
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001228c  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001228c  0001228c  0002228c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000574  20000000  00012294  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030574  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030574  2**0
                  CONTENTS
  5 .bss          00004b30  20000578  00012810  00030578  2**3
                  ALLOC
  6 .stack        00010000  200050a8  00017340  00030578  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030574  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000305a2  2**0
                  CONTENTS, READONLY
  9 .debug_info   000c4c71  00000000  00000000  000305fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010713  00000000  00000000  000f526c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000243bf  00000000  00000000  0010597f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004100  00000000  00000000  00129d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003c30  00000000  00000000  0012de3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005d5f7  00000000  00000000  00131a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000585b2  00000000  00000000  0018f065  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00147c8d  00000000  00000000  001e7617  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011484  00000000  00000000  0032f2a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 50 01 20 65 07 00 00 e9 07 00 00 e9 07 00 00     .P. e...........
      10:	e9 07 00 00 e9 07 00 00 e9 07 00 00 00 00 00 00     ................
	...
      2c:	e9 07 00 00 e9 07 00 00 00 00 00 00 e9 07 00 00     ................
      3c:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
      4c:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
      5c:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
      6c:	39 64 00 00 29 52 00 00 e9 07 00 00 e9 07 00 00     9d..)R..........
      7c:	e9 07 00 00 39 52 00 00 49 52 00 00 59 52 00 00     ....9R..IR..YR..
      8c:	69 52 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     iR..............
      9c:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
      ac:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
      bc:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
      cc:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
      dc:	e9 07 00 00 e9 07 00 00 e9 07 00 00 00 00 00 00     ................
	...
      f4:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     104:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     114:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     124:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     134:	e9 07 00 00 35 76 00 00 51 76 00 00 6d 76 00 00     ....5v..Qv..mv..
     144:	89 76 00 00 a5 76 00 00 c1 76 00 00 dd 76 00 00     .v...v...v...v..
     154:	f9 76 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     .v..............
     164:	e9 07 00 00 15 77 00 00 31 77 00 00 4d 77 00 00     .....w..1w..Mw..
     174:	69 77 00 00 e9 07 00 00 c1 46 00 00 f1 b0 00 00     iw.......F......
     184:	01 b1 00 00 11 b1 00 00 21 b1 00 00 e9 07 00 00     ........!.......
     194:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     1a4:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     1b4:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     1c4:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     1d4:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     1e4:	e9 07 00 00 e9 07 00 00 bd 87 00 00 d9 87 00 00     ................
     1f4:	f5 87 00 00 11 88 00 00 2d 88 00 00 49 88 00 00     ........-...I...
     204:	e9 07 00 00 65 88 00 00 e9 07 00 00 e9 07 00 00     ....e...........
     214:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     224:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     234:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     244:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................
     254:	e9 07 00 00 e9 07 00 00 e9 07 00 00 e9 07 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000578 	.word	0x20000578
     280:	00000000 	.word	0x00000000
     284:	00012294 	.word	0x00012294

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00012294 	.word	0x00012294
     2c4:	2000057c 	.word	0x2000057c
     2c8:	00012294 	.word	0x00012294
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     2d0:	b480      	push	{r7}
     2d2:	b083      	sub	sp, #12
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
     2d8:	6039      	str	r1, [r7, #0]
	{
	data = v;
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	683a      	ldr	r2, [r7, #0]
     2de:	601a      	str	r2, [r3, #0]
	}
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	4618      	mov	r0, r3
     2e4:	370c      	adds	r7, #12
     2e6:	46bd      	mov	sp, r7
     2e8:	bc80      	pop	{r7}
     2ea:	4770      	bx	lr

000002ec <_ZN9ALU_ClassC1Ev>:
#include "DateTime_Class.h"
#include "N25Q256_Class.h"


// default constructor
ALU_Class::ALU_Class()
     2ec:	b480      	push	{r7}
     2ee:	b083      	sub	sp, #12
     2f0:	af00      	add	r7, sp, #0
     2f2:	6078      	str	r0, [r7, #4]
{
	ptrPbit=&pBIT;
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	4a04      	ldr	r2, [pc, #16]	; (308 <_ZN9ALU_ClassC1Ev+0x1c>)
     2f8:	611a      	str	r2, [r3, #16]
} //ALU_Class
     2fa:	687b      	ldr	r3, [r7, #4]
     2fc:	4618      	mov	r0, r3
     2fe:	370c      	adds	r7, #12
     300:	46bd      	mov	sp, r7
     302:	bc80      	pop	{r7}
     304:	4770      	bx	lr
     306:	bf00      	nop
     308:	20002940 	.word	0x20002940

0000030c <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     30c:	b480      	push	{r7}
     30e:	b083      	sub	sp, #12
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
{
} //~ALU_Class
     314:	687b      	ldr	r3, [r7, #4]
     316:	4618      	mov	r0, r3
     318:	370c      	adds	r7, #12
     31a:	46bd      	mov	sp, r7
     31c:	bc80      	pop	{r7}
     31e:	4770      	bx	lr

00000320 <_ZlsIA3_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     320:	b580      	push	{r7, lr}
     322:	b082      	sub	sp, #8
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
     328:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     32a:	6839      	ldr	r1, [r7, #0]
     32c:	6878      	ldr	r0, [r7, #4]
     32e:	4b03      	ldr	r3, [pc, #12]	; (33c <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     330:	4798      	blx	r3
     332:	687b      	ldr	r3, [r7, #4]
     334:	4618      	mov	r0, r3
     336:	3708      	adds	r7, #8
     338:	46bd      	mov	sp, r7
     33a:	bd80      	pop	{r7, pc}
     33c:	0000ec0d 	.word	0x0000ec0d

00000340 <_Z41__static_initialization_and_destruction_0ii>:
}
void ALU_Class::NotifyError(Fault_List fl,const eventData& data)
{
	listener.SendErrorSelf(uint16_t(fl),data);
}
     340:	b580      	push	{r7, lr}
     342:	b082      	sub	sp, #8
     344:	af00      	add	r7, sp, #0
     346:	6078      	str	r0, [r7, #4]
     348:	6039      	str	r1, [r7, #0]
     34a:	687b      	ldr	r3, [r7, #4]
     34c:	2b01      	cmp	r3, #1
     34e:	d10c      	bne.n	36a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     350:	683b      	ldr	r3, [r7, #0]
     352:	f64f 72ff 	movw	r2, #65535	; 0xffff
     356:	4293      	cmp	r3, r2
     358:	d107      	bne.n	36a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     35a:	4806      	ldr	r0, [pc, #24]	; (374 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     35c:	4b06      	ldr	r3, [pc, #24]	; (378 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     35e:	4798      	blx	r3
     360:	4a06      	ldr	r2, [pc, #24]	; (37c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     362:	4907      	ldr	r1, [pc, #28]	; (380 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     364:	4803      	ldr	r0, [pc, #12]	; (374 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     366:	4b07      	ldr	r3, [pc, #28]	; (384 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     368:	4798      	blx	r3
     36a:	bf00      	nop
     36c:	3708      	adds	r7, #8
     36e:	46bd      	mov	sp, r7
     370:	bd80      	pop	{r7, pc}
     372:	bf00      	nop
     374:	20000594 	.word	0x20000594
     378:	000002ed 	.word	0x000002ed
     37c:	20000000 	.word	0x20000000
     380:	0000030d 	.word	0x0000030d
     384:	0000f1f5 	.word	0x0000f1f5

00000388 <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev>:
     388:	b580      	push	{r7, lr}
     38a:	af00      	add	r7, sp, #0
     38c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     390:	2001      	movs	r0, #1
     392:	4b01      	ldr	r3, [pc, #4]	; (398 <_GLOBAL__sub_I__ZN9ALU_ClassC2Ev+0x10>)
     394:	4798      	blx	r3
     396:	bd80      	pop	{r7, pc}
     398:	00000341 	.word	0x00000341

0000039c <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     39c:	b580      	push	{r7, lr}
     39e:	b082      	sub	sp, #8
     3a0:	af00      	add	r7, sp, #0
     3a2:	6078      	str	r0, [r7, #4]
     3a4:	687b      	ldr	r3, [r7, #4]
     3a6:	4618      	mov	r0, r3
     3a8:	4b09      	ldr	r3, [pc, #36]	; (3d0 <_ZN10AMMC_ClassC1Ev+0x34>)
     3aa:	4798      	blx	r3
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	4a09      	ldr	r2, [pc, #36]	; (3d4 <_ZN10AMMC_ClassC1Ev+0x38>)
     3b0:	4611      	mov	r1, r2
     3b2:	4618      	mov	r0, r3
     3b4:	4b08      	ldr	r3, [pc, #32]	; (3d8 <_ZN10AMMC_ClassC1Ev+0x3c>)
     3b6:	4798      	blx	r3
     3b8:	4a08      	ldr	r2, [pc, #32]	; (3dc <_ZN10AMMC_ClassC1Ev+0x40>)
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	601a      	str	r2, [r3, #0]
     3be:	4a07      	ldr	r2, [pc, #28]	; (3dc <_ZN10AMMC_ClassC1Ev+0x40>)
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	601a      	str	r2, [r3, #0]
{
} //AMMC_Class
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	4618      	mov	r0, r3
     3c8:	3708      	adds	r7, #8
     3ca:	46bd      	mov	sp, r7
     3cc:	bd80      	pop	{r7, pc}
     3ce:	bf00      	nop
     3d0:	0000d6c9 	.word	0x0000d6c9
     3d4:	000110e8 	.word	0x000110e8
     3d8:	0000d8f5 	.word	0x0000d8f5
     3dc:	000110d0 	.word	0x000110d0

000003e0 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     3e0:	b580      	push	{r7, lr}
     3e2:	b082      	sub	sp, #8
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
     3e8:	4a0a      	ldr	r2, [pc, #40]	; (414 <_ZN10AMMC_ClassD1Ev+0x34>)
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	601a      	str	r2, [r3, #0]
     3ee:	4a09      	ldr	r2, [pc, #36]	; (414 <_ZN10AMMC_ClassD1Ev+0x34>)
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	601a      	str	r2, [r3, #0]
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	4a08      	ldr	r2, [pc, #32]	; (418 <_ZN10AMMC_ClassD1Ev+0x38>)
     3f8:	4611      	mov	r1, r2
     3fa:	4618      	mov	r0, r3
     3fc:	4b07      	ldr	r3, [pc, #28]	; (41c <_ZN10AMMC_ClassD1Ev+0x3c>)
     3fe:	4798      	blx	r3
     400:	687b      	ldr	r3, [r7, #4]
     402:	4618      	mov	r0, r3
     404:	4b06      	ldr	r3, [pc, #24]	; (420 <_ZN10AMMC_ClassD1Ev+0x40>)
     406:	4798      	blx	r3
{
} //~AMMC_Class
     408:	687b      	ldr	r3, [r7, #4]
     40a:	4618      	mov	r0, r3
     40c:	3708      	adds	r7, #8
     40e:	46bd      	mov	sp, r7
     410:	bd80      	pop	{r7, pc}
     412:	bf00      	nop
     414:	000110d0 	.word	0x000110d0
     418:	000110e8 	.word	0x000110e8
     41c:	0000d9cd 	.word	0x0000d9cd
     420:	0000d6e9 	.word	0x0000d6e9

00000424 <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     424:	b580      	push	{r7, lr}
     426:	b082      	sub	sp, #8
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
} //~AMMC_Class
     42c:	6878      	ldr	r0, [r7, #4]
     42e:	4b06      	ldr	r3, [pc, #24]	; (448 <_ZN10AMMC_ClassD0Ev+0x24>)
     430:	4798      	blx	r3
     432:	f44f 7144 	mov.w	r1, #784	; 0x310
     436:	6878      	ldr	r0, [r7, #4]
     438:	4b04      	ldr	r3, [pc, #16]	; (44c <_ZN10AMMC_ClassD0Ev+0x28>)
     43a:	4798      	blx	r3
     43c:	687b      	ldr	r3, [r7, #4]
     43e:	4618      	mov	r0, r3
     440:	3708      	adds	r7, #8
     442:	46bd      	mov	sp, r7
     444:	bd80      	pop	{r7, pc}
     446:	bf00      	nop
     448:	000003e1 	.word	0x000003e1
     44c:	0000f201 	.word	0x0000f201

00000450 <_Z41__static_initialization_and_destruction_0ii>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     450:	b580      	push	{r7, lr}
     452:	b082      	sub	sp, #8
     454:	af00      	add	r7, sp, #0
     456:	6078      	str	r0, [r7, #4]
     458:	6039      	str	r1, [r7, #0]
     45a:	687b      	ldr	r3, [r7, #4]
     45c:	2b01      	cmp	r3, #1
     45e:	d114      	bne.n	48a <_Z41__static_initialization_and_destruction_0ii+0x3a>
     460:	683b      	ldr	r3, [r7, #0]
     462:	f64f 72ff 	movw	r2, #65535	; 0xffff
     466:	4293      	cmp	r3, r2
     468:	d10f      	bne.n	48a <_Z41__static_initialization_and_destruction_0ii+0x3a>
AMMC_Class	ammc1;
     46a:	480a      	ldr	r0, [pc, #40]	; (494 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     46c:	4b0a      	ldr	r3, [pc, #40]	; (498 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     46e:	4798      	blx	r3
     470:	4a0a      	ldr	r2, [pc, #40]	; (49c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     472:	490b      	ldr	r1, [pc, #44]	; (4a0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     474:	4807      	ldr	r0, [pc, #28]	; (494 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     476:	4b0b      	ldr	r3, [pc, #44]	; (4a4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     478:	4798      	blx	r3
AMMC_Class	ammc2;
     47a:	480b      	ldr	r0, [pc, #44]	; (4a8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     47c:	4b06      	ldr	r3, [pc, #24]	; (498 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     47e:	4798      	blx	r3
     480:	4a06      	ldr	r2, [pc, #24]	; (49c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     482:	4907      	ldr	r1, [pc, #28]	; (4a0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     484:	4808      	ldr	r0, [pc, #32]	; (4a8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     486:	4b07      	ldr	r3, [pc, #28]	; (4a4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     488:	4798      	blx	r3
     48a:	bf00      	nop
     48c:	3708      	adds	r7, #8
     48e:	46bd      	mov	sp, r7
     490:	bd80      	pop	{r7, pc}
     492:	bf00      	nop
     494:	200006e0 	.word	0x200006e0
     498:	0000039d 	.word	0x0000039d
     49c:	20000000 	.word	0x20000000
     4a0:	000003e1 	.word	0x000003e1
     4a4:	0000f1f5 	.word	0x0000f1f5
     4a8:	200009f0 	.word	0x200009f0

000004ac <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     4ac:	b580      	push	{r7, lr}
     4ae:	af00      	add	r7, sp, #0
     4b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
     4b4:	2001      	movs	r0, #1
     4b6:	4b01      	ldr	r3, [pc, #4]	; (4bc <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     4b8:	4798      	blx	r3
     4ba:	bd80      	pop	{r7, pc}
     4bc:	00000451 	.word	0x00000451

000004c0 <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     4c0:	b480      	push	{r7}
     4c2:	b083      	sub	sp, #12
     4c4:	af00      	add	r7, sp, #0
     4c6:	6078      	str	r0, [r7, #4]
{
} //CBIT_Class
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	4618      	mov	r0, r3
     4cc:	370c      	adds	r7, #12
     4ce:	46bd      	mov	sp, r7
     4d0:	bc80      	pop	{r7}
     4d2:	4770      	bx	lr

000004d4 <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     4d4:	b480      	push	{r7}
     4d6:	b083      	sub	sp, #12
     4d8:	af00      	add	r7, sp, #0
     4da:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     4dc:	687b      	ldr	r3, [r7, #4]
     4de:	4618      	mov	r0, r3
     4e0:	370c      	adds	r7, #12
     4e2:	46bd      	mov	sp, r7
     4e4:	bc80      	pop	{r7}
     4e6:	4770      	bx	lr

000004e8 <_Z41__static_initialization_and_destruction_0ii>:
}
CBIT_Class::operator bool(){
	return	isOK;
}

     4e8:	b580      	push	{r7, lr}
     4ea:	b082      	sub	sp, #8
     4ec:	af00      	add	r7, sp, #0
     4ee:	6078      	str	r0, [r7, #4]
     4f0:	6039      	str	r1, [r7, #0]
     4f2:	687b      	ldr	r3, [r7, #4]
     4f4:	2b01      	cmp	r3, #1
     4f6:	d10c      	bne.n	512 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     4f8:	683b      	ldr	r3, [r7, #0]
     4fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
     4fe:	4293      	cmp	r3, r2
     500:	d107      	bne.n	512 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     502:	4806      	ldr	r0, [pc, #24]	; (51c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     504:	4b06      	ldr	r3, [pc, #24]	; (520 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     506:	4798      	blx	r3
     508:	4a06      	ldr	r2, [pc, #24]	; (524 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     50a:	4907      	ldr	r1, [pc, #28]	; (528 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     50c:	4803      	ldr	r0, [pc, #12]	; (51c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     50e:	4b07      	ldr	r3, [pc, #28]	; (52c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     510:	4798      	blx	r3
     512:	bf00      	nop
     514:	3708      	adds	r7, #8
     516:	46bd      	mov	sp, r7
     518:	bd80      	pop	{r7, pc}
     51a:	bf00      	nop
     51c:	20000d04 	.word	0x20000d04
     520:	000004c1 	.word	0x000004c1
     524:	20000000 	.word	0x20000000
     528:	000004d5 	.word	0x000004d5
     52c:	0000f1f5 	.word	0x0000f1f5

00000530 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
     530:	b580      	push	{r7, lr}
     532:	af00      	add	r7, sp, #0
     534:	f64f 71ff 	movw	r1, #65535	; 0xffff
     538:	2001      	movs	r0, #1
     53a:	4b01      	ldr	r3, [pc, #4]	; (540 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
     53c:	4798      	blx	r3
     53e:	bd80      	pop	{r7, pc}
     540:	000004e9 	.word	0x000004e9

00000544 <_ZN17ConfigState_ClassC1Ev>:
	
};


// default constructor
ConfigState_Class::ConfigState_Class()
     544:	b480      	push	{r7}
     546:	b083      	sub	sp, #12
     548:	af00      	add	r7, sp, #0
     54a:	6078      	str	r0, [r7, #4]
     54c:	4a14      	ldr	r2, [pc, #80]	; (5a0 <_ZN17ConfigState_ClassC1Ev+0x5c>)
     54e:	687b      	ldr	r3, [r7, #4]
     550:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kGAINStateReset;
     552:	687b      	ldr	r3, [r7, #4]
     554:	2200      	movs	r2, #0
     556:	629a      	str	r2, [r3, #40]	; 0x28
	defaultState.callingState = kGAINStateReset;
     558:	687b      	ldr	r3, [r7, #4]
     55a:	2200      	movs	r2, #0
     55c:	62da      	str	r2, [r3, #44]	; 0x2c
	defaultState.internalCateringState = 0;
     55e:	687b      	ldr	r3, [r7, #4]
     560:	2200      	movs	r2, #0
     562:	631a      	str	r2, [r3, #48]	; 0x30
	defaultState.targetUDC = 0.0;
     564:	687b      	ldr	r3, [r7, #4]
     566:	f04f 0200 	mov.w	r2, #0
     56a:	63da      	str	r2, [r3, #60]	; 0x3c
	defaultState.cycleDuration = 0;
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	2200      	movs	r2, #0
     570:	651a      	str	r2, [r3, #80]	; 0x50
	defaultState.inStateTime = 0;
     572:	687b      	ldr	r3, [r7, #4]
     574:	2200      	movs	r2, #0
     576:	649a      	str	r2, [r3, #72]	; 0x48
	defaultState.remainingTime = 0;
     578:	687b      	ldr	r3, [r7, #4]
     57a:	2200      	movs	r2, #0
     57c:	655a      	str	r2, [r3, #84]	; 0x54
	defaultState.waitingExceededTime = 0;
     57e:	687b      	ldr	r3, [r7, #4]
     580:	2200      	movs	r2, #0
     582:	65da      	str	r2, [r3, #92]	; 0x5c
	defaultState.fansOnAfterCateringCycleTime = forever;
     584:	4b07      	ldr	r3, [pc, #28]	; (5a4 <_ZN17ConfigState_ClassC1Ev+0x60>)
     586:	681a      	ldr	r2, [r3, #0]
     588:	687b      	ldr	r3, [r7, #4]
     58a:	661a      	str	r2, [r3, #96]	; 0x60
	defaultState.magic=0xCAFEBABE;
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	4a06      	ldr	r2, [pc, #24]	; (5a8 <_ZN17ConfigState_ClassC1Ev+0x64>)
     590:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
     592:	687b      	ldr	r3, [r7, #4]
     594:	4618      	mov	r0, r3
     596:	370c      	adds	r7, #12
     598:	46bd      	mov	sp, r7
     59a:	bc80      	pop	{r7}
     59c:	4770      	bx	lr
     59e:	bf00      	nop
     5a0:	00011154 	.word	0x00011154
     5a4:	0001214c 	.word	0x0001214c
     5a8:	cafebabe 	.word	0xcafebabe

000005ac <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
     5ac:	b480      	push	{r7}
     5ae:	b083      	sub	sp, #12
     5b0:	af00      	add	r7, sp, #0
     5b2:	6078      	str	r0, [r7, #4]
     5b4:	4a04      	ldr	r2, [pc, #16]	; (5c8 <_ZN17ConfigState_ClassD1Ev+0x1c>)
     5b6:	687b      	ldr	r3, [r7, #4]
     5b8:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	4618      	mov	r0, r3
     5be:	370c      	adds	r7, #12
     5c0:	46bd      	mov	sp, r7
     5c2:	bc80      	pop	{r7}
     5c4:	4770      	bx	lr
     5c6:	bf00      	nop
     5c8:	00011154 	.word	0x00011154

000005cc <_ZN11CRC32_ClassC1Ev>:

#include "CRC32_Class.h"
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
     5cc:	b480      	push	{r7}
     5ce:	b083      	sub	sp, #12
     5d0:	af00      	add	r7, sp, #0
     5d2:	6078      	str	r0, [r7, #4]
{
} //CRC32_Class
     5d4:	687b      	ldr	r3, [r7, #4]
     5d6:	4618      	mov	r0, r3
     5d8:	370c      	adds	r7, #12
     5da:	46bd      	mov	sp, r7
     5dc:	bc80      	pop	{r7}
     5de:	4770      	bx	lr

000005e0 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
     5e0:	b480      	push	{r7}
     5e2:	b083      	sub	sp, #12
     5e4:	af00      	add	r7, sp, #0
     5e6:	6078      	str	r0, [r7, #4]
{
} //~CRC32_Class
     5e8:	687b      	ldr	r3, [r7, #4]
     5ea:	4618      	mov	r0, r3
     5ec:	370c      	adds	r7, #12
     5ee:	46bd      	mov	sp, r7
     5f0:	bc80      	pop	{r7}
     5f2:	4770      	bx	lr

000005f4 <_ZN15DataLoger_ClassC1Ev>:
#include "ConfigurationData.h"
#include "MemoryStruct_Class.h"
#include "N25Q256_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
     5f4:	b580      	push	{r7, lr}
     5f6:	b082      	sub	sp, #8
     5f8:	af00      	add	r7, sp, #0
     5fa:	6078      	str	r0, [r7, #4]
     5fc:	687b      	ldr	r3, [r7, #4]
     5fe:	4618      	mov	r0, r3
     600:	4b06      	ldr	r3, [pc, #24]	; (61c <_ZN15DataLoger_ClassC1Ev+0x28>)
     602:	4798      	blx	r3
     604:	687b      	ldr	r3, [r7, #4]
     606:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
     60a:	4618      	mov	r0, r3
     60c:	4b04      	ldr	r3, [pc, #16]	; (620 <_ZN15DataLoger_ClassC1Ev+0x2c>)
     60e:	4798      	blx	r3
{
} //DataLoger_Class
     610:	687b      	ldr	r3, [r7, #4]
     612:	4618      	mov	r0, r3
     614:	3708      	adds	r7, #8
     616:	46bd      	mov	sp, r7
     618:	bd80      	pop	{r7, pc}
     61a:	bf00      	nop
     61c:	0000e089 	.word	0x0000e089
     620:	00000645 	.word	0x00000645

00000624 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
     624:	b580      	push	{r7, lr}
     626:	b082      	sub	sp, #8
     628:	af00      	add	r7, sp, #0
     62a:	6078      	str	r0, [r7, #4]
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	4618      	mov	r0, r3
     630:	4b03      	ldr	r3, [pc, #12]	; (640 <_ZN15DataLoger_ClassD1Ev+0x1c>)
     632:	4798      	blx	r3
{
} //~DataLoger_Class
     634:	687b      	ldr	r3, [r7, #4]
     636:	4618      	mov	r0, r3
     638:	3708      	adds	r7, #8
     63a:	46bd      	mov	sp, r7
     63c:	bd80      	pop	{r7, pc}
     63e:	bf00      	nop
     640:	0000e0c5 	.word	0x0000e0c5

00000644 <_ZN11RingBufferNILi512EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
     644:	b580      	push	{r7, lr}
     646:	b082      	sub	sp, #8
     648:	af00      	add	r7, sp, #0
     64a:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
     64c:	687b      	ldr	r3, [r7, #4]
     64e:	f44f 7200 	mov.w	r2, #512	; 0x200
     652:	2100      	movs	r1, #0
     654:	4618      	mov	r0, r3
     656:	4b05      	ldr	r3, [pc, #20]	; (66c <_ZN11RingBufferNILi512EEC1Ev+0x28>)
     658:	4798      	blx	r3
    clear();
     65a:	6878      	ldr	r0, [r7, #4]
     65c:	4b04      	ldr	r3, [pc, #16]	; (670 <_ZN11RingBufferNILi512EEC1Ev+0x2c>)
     65e:	4798      	blx	r3
}
     660:	687b      	ldr	r3, [r7, #4]
     662:	4618      	mov	r0, r3
     664:	3708      	adds	r7, #8
     666:	46bd      	mov	sp, r7
     668:	bd80      	pop	{r7, pc}
     66a:	bf00      	nop
     66c:	00010e15 	.word	0x00010e15
     670:	00000675 	.word	0x00000675

00000674 <_ZN11RingBufferNILi512EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
     674:	b480      	push	{r7}
     676:	b083      	sub	sp, #12
     678:	af00      	add	r7, sp, #0
     67a:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	2200      	movs	r2, #0
     680:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  _iTail = 0;
     684:	687b      	ldr	r3, [r7, #4]
     686:	2200      	movs	r2, #0
     688:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
     68c:	bf00      	nop
     68e:	370c      	adds	r7, #12
     690:	46bd      	mov	sp, r7
     692:	bc80      	pop	{r7}
     694:	4770      	bx	lr
	...

00000698 <_ZN14DateTime_ClassC1Ev>:

#include "DateTime_Class.h"
#include "FastStorage_Class.h"

// default constructor
DateTime_Class::DateTime_Class()
     698:	b580      	push	{r7, lr}
     69a:	b082      	sub	sp, #8
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	33a8      	adds	r3, #168	; 0xa8
     6a4:	4618      	mov	r0, r3
     6a6:	4b07      	ldr	r3, [pc, #28]	; (6c4 <_ZN14DateTime_ClassC1Ev+0x2c>)
     6a8:	4798      	blx	r3
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	4618      	mov	r0, r3
     6ae:	4b06      	ldr	r3, [pc, #24]	; (6c8 <_ZN14DateTime_ClassC1Ev+0x30>)
     6b0:	4798      	blx	r3
     6b2:	4a06      	ldr	r2, [pc, #24]	; (6cc <_ZN14DateTime_ClassC1Ev+0x34>)
     6b4:	687b      	ldr	r3, [r7, #4]
     6b6:	601a      	str	r2, [r3, #0]
{
} //DateTime_Class
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	4618      	mov	r0, r3
     6bc:	3708      	adds	r7, #8
     6be:	46bd      	mov	sp, r7
     6c0:	bd80      	pop	{r7, pc}
     6c2:	bf00      	nop
     6c4:	000007ef 	.word	0x000007ef
     6c8:	0000e139 	.word	0x0000e139
     6cc:	00011160 	.word	0x00011160

000006d0 <_ZN14DateTime_ClassD1Ev>:

// default destructor
DateTime_Class::~DateTime_Class()
     6d0:	b580      	push	{r7, lr}
     6d2:	b082      	sub	sp, #8
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
     6d8:	4a08      	ldr	r2, [pc, #32]	; (6fc <_ZN14DateTime_ClassD1Ev+0x2c>)
     6da:	687b      	ldr	r3, [r7, #4]
     6dc:	601a      	str	r2, [r3, #0]
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	4618      	mov	r0, r3
     6e2:	4b07      	ldr	r3, [pc, #28]	; (700 <_ZN14DateTime_ClassD1Ev+0x30>)
     6e4:	4798      	blx	r3
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	33a8      	adds	r3, #168	; 0xa8
     6ea:	4618      	mov	r0, r3
     6ec:	4b05      	ldr	r3, [pc, #20]	; (704 <_ZN14DateTime_ClassD1Ev+0x34>)
     6ee:	4798      	blx	r3
{
} //~DateTime_Class
     6f0:	687b      	ldr	r3, [r7, #4]
     6f2:	4618      	mov	r0, r3
     6f4:	3708      	adds	r7, #8
     6f6:	46bd      	mov	sp, r7
     6f8:	bd80      	pop	{r7, pc}
     6fa:	bf00      	nop
     6fc:	00011160 	.word	0x00011160
     700:	0000e1a9 	.word	0x0000e1a9
     704:	00000803 	.word	0x00000803

00000708 <_Z41__static_initialization_and_destruction_0ii>:
	calendar.SetCalendarAddress(addTimeLogs);
	calendar.Init();
	
}

     708:	b580      	push	{r7, lr}
     70a:	b082      	sub	sp, #8
     70c:	af00      	add	r7, sp, #0
     70e:	6078      	str	r0, [r7, #4]
     710:	6039      	str	r1, [r7, #0]
     712:	687b      	ldr	r3, [r7, #4]
     714:	2b01      	cmp	r3, #1
     716:	d10c      	bne.n	732 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     718:	683b      	ldr	r3, [r7, #0]
     71a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     71e:	4293      	cmp	r3, r2
     720:	d107      	bne.n	732 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     722:	4806      	ldr	r0, [pc, #24]	; (73c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     724:	4b06      	ldr	r3, [pc, #24]	; (740 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     726:	4798      	blx	r3
     728:	4a06      	ldr	r2, [pc, #24]	; (744 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     72a:	4907      	ldr	r1, [pc, #28]	; (748 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     72c:	4803      	ldr	r0, [pc, #12]	; (73c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     72e:	4b07      	ldr	r3, [pc, #28]	; (74c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     730:	4798      	blx	r3
     732:	bf00      	nop
     734:	3708      	adds	r7, #8
     736:	46bd      	mov	sp, r7
     738:	bd80      	pop	{r7, pc}
     73a:	bf00      	nop
     73c:	20000d08 	.word	0x20000d08
     740:	00000699 	.word	0x00000699
     744:	20000000 	.word	0x20000000
     748:	000006d1 	.word	0x000006d1
     74c:	0000f1f5 	.word	0x0000f1f5

00000750 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
     750:	b580      	push	{r7, lr}
     752:	af00      	add	r7, sp, #0
     754:	f64f 71ff 	movw	r1, #65535	; 0xffff
     758:	2001      	movs	r0, #1
     75a:	4b01      	ldr	r3, [pc, #4]	; (760 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x10>)
     75c:	4798      	blx	r3
     75e:	bd80      	pop	{r7, pc}
     760:	00000709 	.word	0x00000709

00000764 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     764:	b580      	push	{r7, lr}
     766:	b082      	sub	sp, #8
     768:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     76a:	4b16      	ldr	r3, [pc, #88]	; (7c4 <Reset_Handler+0x60>)
     76c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     76e:	4b16      	ldr	r3, [pc, #88]	; (7c8 <Reset_Handler+0x64>)
     770:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     772:	687a      	ldr	r2, [r7, #4]
     774:	683b      	ldr	r3, [r7, #0]
     776:	429a      	cmp	r2, r3
     778:	d00c      	beq.n	794 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     77a:	e007      	b.n	78c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     77c:	683b      	ldr	r3, [r7, #0]
     77e:	1d1a      	adds	r2, r3, #4
     780:	603a      	str	r2, [r7, #0]
     782:	687a      	ldr	r2, [r7, #4]
     784:	1d11      	adds	r1, r2, #4
     786:	6079      	str	r1, [r7, #4]
     788:	6812      	ldr	r2, [r2, #0]
     78a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     78c:	683b      	ldr	r3, [r7, #0]
     78e:	4a0f      	ldr	r2, [pc, #60]	; (7cc <Reset_Handler+0x68>)
     790:	4293      	cmp	r3, r2
     792:	d3f3      	bcc.n	77c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     794:	4b0e      	ldr	r3, [pc, #56]	; (7d0 <Reset_Handler+0x6c>)
     796:	603b      	str	r3, [r7, #0]
     798:	e004      	b.n	7a4 <Reset_Handler+0x40>
                *pDest++ = 0;
     79a:	683b      	ldr	r3, [r7, #0]
     79c:	1d1a      	adds	r2, r3, #4
     79e:	603a      	str	r2, [r7, #0]
     7a0:	2200      	movs	r2, #0
     7a2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     7a4:	683b      	ldr	r3, [r7, #0]
     7a6:	4a0b      	ldr	r2, [pc, #44]	; (7d4 <Reset_Handler+0x70>)
     7a8:	4293      	cmp	r3, r2
     7aa:	d3f6      	bcc.n	79a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     7ac:	4b0a      	ldr	r3, [pc, #40]	; (7d8 <Reset_Handler+0x74>)
     7ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     7b0:	4a0a      	ldr	r2, [pc, #40]	; (7dc <Reset_Handler+0x78>)
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     7b8:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     7ba:	4b09      	ldr	r3, [pc, #36]	; (7e0 <Reset_Handler+0x7c>)
     7bc:	4798      	blx	r3

        /* Branch to main function */
        main();
     7be:	4b09      	ldr	r3, [pc, #36]	; (7e4 <Reset_Handler+0x80>)
     7c0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     7c2:	e7fe      	b.n	7c2 <Reset_Handler+0x5e>
     7c4:	00012294 	.word	0x00012294
     7c8:	20000000 	.word	0x20000000
     7cc:	20000574 	.word	0x20000574
     7d0:	20000578 	.word	0x20000578
     7d4:	200050a8 	.word	0x200050a8
     7d8:	00000000 	.word	0x00000000
     7dc:	e000ed00 	.word	0xe000ed00
     7e0:	00010c91 	.word	0x00010c91
     7e4:	00000921 	.word	0x00000921

000007e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     7e8:	b480      	push	{r7}
     7ea:	af00      	add	r7, sp, #0
        while (1) {
     7ec:	e7fe      	b.n	7ec <Dummy_Handler+0x4>

000007ee <_ZN17FastStorage_ClassC1Ev>:
#include "MemoryManagment_Class.h"

EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
     7ee:	b480      	push	{r7}
     7f0:	b083      	sub	sp, #12
     7f2:	af00      	add	r7, sp, #0
     7f4:	6078      	str	r0, [r7, #4]
{
} //FastStorage_Class
     7f6:	687b      	ldr	r3, [r7, #4]
     7f8:	4618      	mov	r0, r3
     7fa:	370c      	adds	r7, #12
     7fc:	46bd      	mov	sp, r7
     7fe:	bc80      	pop	{r7}
     800:	4770      	bx	lr

00000802 <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
     802:	b480      	push	{r7}
     804:	b083      	sub	sp, #12
     806:	af00      	add	r7, sp, #0
     808:	6078      	str	r0, [r7, #4]
{
} //~FastStorage_Class
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	4618      	mov	r0, r3
     80e:	370c      	adds	r7, #12
     810:	46bd      	mov	sp, r7
     812:	bc80      	pop	{r7}
     814:	4770      	bx	lr

00000816 <_ZN18FlapperValve_ClassC1Ev>:

#include "FlapperValve_Class.h"
#include "MCP23017_Class.h"

// default constructor
FlapperValve_Class::FlapperValve_Class()
     816:	b480      	push	{r7}
     818:	b083      	sub	sp, #12
     81a:	af00      	add	r7, sp, #0
     81c:	6078      	str	r0, [r7, #4]
{
} //FlapperValve_Class
     81e:	687b      	ldr	r3, [r7, #4]
     820:	4618      	mov	r0, r3
     822:	370c      	adds	r7, #12
     824:	46bd      	mov	sp, r7
     826:	bc80      	pop	{r7}
     828:	4770      	bx	lr

0000082a <_ZN18FlapperValve_ClassD1Ev>:

// default destructor
FlapperValve_Class::~FlapperValve_Class()
     82a:	b480      	push	{r7}
     82c:	b083      	sub	sp, #12
     82e:	af00      	add	r7, sp, #0
     830:	6078      	str	r0, [r7, #4]
{
} //~FlapperValve_Class
     832:	687b      	ldr	r3, [r7, #4]
     834:	4618      	mov	r0, r3
     836:	370c      	adds	r7, #12
     838:	46bd      	mov	sp, r7
     83a:	bc80      	pop	{r7}
     83c:	4770      	bx	lr
	...

00000840 <_Z41__static_initialization_and_destruction_0ii>:
bool	FlapperValve_Class::Init(void){
		return	mcp.Init();
}
     840:	b580      	push	{r7, lr}
     842:	b082      	sub	sp, #8
     844:	af00      	add	r7, sp, #0
     846:	6078      	str	r0, [r7, #4]
     848:	6039      	str	r1, [r7, #0]
     84a:	687b      	ldr	r3, [r7, #4]
     84c:	2b01      	cmp	r3, #1
     84e:	d10c      	bne.n	86a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     850:	683b      	ldr	r3, [r7, #0]
     852:	f64f 72ff 	movw	r2, #65535	; 0xffff
     856:	4293      	cmp	r3, r2
     858:	d107      	bne.n	86a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     85a:	4806      	ldr	r0, [pc, #24]	; (874 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     85c:	4b06      	ldr	r3, [pc, #24]	; (878 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     85e:	4798      	blx	r3
     860:	4a06      	ldr	r2, [pc, #24]	; (87c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     862:	4907      	ldr	r1, [pc, #28]	; (880 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     864:	4803      	ldr	r0, [pc, #12]	; (874 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     866:	4b07      	ldr	r3, [pc, #28]	; (884 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     868:	4798      	blx	r3
     86a:	bf00      	nop
     86c:	3708      	adds	r7, #8
     86e:	46bd      	mov	sp, r7
     870:	bd80      	pop	{r7, pc}
     872:	bf00      	nop
     874:	20000dc0 	.word	0x20000dc0
     878:	00000817 	.word	0x00000817
     87c:	20000000 	.word	0x20000000
     880:	0000082b 	.word	0x0000082b
     884:	0000f1f5 	.word	0x0000f1f5

00000888 <_GLOBAL__sub_I__ZN18FlapperValve_ClassC2Ev>:
     888:	b580      	push	{r7, lr}
     88a:	af00      	add	r7, sp, #0
     88c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     890:	2001      	movs	r0, #1
     892:	4b01      	ldr	r3, [pc, #4]	; (898 <_GLOBAL__sub_I__ZN18FlapperValve_ClassC2Ev+0x10>)
     894:	4798      	blx	r3
     896:	bd80      	pop	{r7, pc}
     898:	00000841 	.word	0x00000841

0000089c <_ZN16Interfaces_ClassC1Ev>:
#include "ARINC_Interface.h"
#include "LTC2983_Class.h"
#include "MCP23017_Class.h"

// default constructor
Interfaces_Class::Interfaces_Class()
     89c:	b480      	push	{r7}
     89e:	b083      	sub	sp, #12
     8a0:	af00      	add	r7, sp, #0
     8a2:	6078      	str	r0, [r7, #4]
{
} //Interfaces_Class
     8a4:	687b      	ldr	r3, [r7, #4]
     8a6:	4618      	mov	r0, r3
     8a8:	370c      	adds	r7, #12
     8aa:	46bd      	mov	sp, r7
     8ac:	bc80      	pop	{r7}
     8ae:	4770      	bx	lr

000008b0 <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
     8b0:	b480      	push	{r7}
     8b2:	b083      	sub	sp, #12
     8b4:	af00      	add	r7, sp, #0
     8b6:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	4618      	mov	r0, r3
     8bc:	370c      	adds	r7, #12
     8be:	46bd      	mov	sp, r7
     8c0:	bc80      	pop	{r7}
     8c2:	4770      	bx	lr

000008c4 <_Z41__static_initialization_and_destruction_0ii>:
		p++;
	}
	return	status.rawStatus;
}

     8c4:	b580      	push	{r7, lr}
     8c6:	b082      	sub	sp, #8
     8c8:	af00      	add	r7, sp, #0
     8ca:	6078      	str	r0, [r7, #4]
     8cc:	6039      	str	r1, [r7, #0]
     8ce:	687b      	ldr	r3, [r7, #4]
     8d0:	2b01      	cmp	r3, #1
     8d2:	d10c      	bne.n	8ee <_Z41__static_initialization_and_destruction_0ii+0x2a>
     8d4:	683b      	ldr	r3, [r7, #0]
     8d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     8da:	4293      	cmp	r3, r2
     8dc:	d107      	bne.n	8ee <_Z41__static_initialization_and_destruction_0ii+0x2a>
     8de:	4806      	ldr	r0, [pc, #24]	; (8f8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     8e0:	4b06      	ldr	r3, [pc, #24]	; (8fc <_Z41__static_initialization_and_destruction_0ii+0x38>)
     8e2:	4798      	blx	r3
     8e4:	4a06      	ldr	r2, [pc, #24]	; (900 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     8e6:	4907      	ldr	r1, [pc, #28]	; (904 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     8e8:	4803      	ldr	r0, [pc, #12]	; (8f8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     8ea:	4b07      	ldr	r3, [pc, #28]	; (908 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     8ec:	4798      	blx	r3
     8ee:	bf00      	nop
     8f0:	3708      	adds	r7, #8
     8f2:	46bd      	mov	sp, r7
     8f4:	bd80      	pop	{r7, pc}
     8f6:	bf00      	nop
     8f8:	20000dc4 	.word	0x20000dc4
     8fc:	0000089d 	.word	0x0000089d
     900:	20000000 	.word	0x20000000
     904:	000008b1 	.word	0x000008b1
     908:	0000f1f5 	.word	0x0000f1f5

0000090c <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
     90c:	b580      	push	{r7, lr}
     90e:	af00      	add	r7, sp, #0
     910:	f64f 71ff 	movw	r1, #65535	; 0xffff
     914:	2001      	movs	r0, #1
     916:	4b01      	ldr	r3, [pc, #4]	; (91c <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
     918:	4798      	blx	r3
     91a:	bd80      	pop	{r7, pc}
     91c:	000008c5 	.word	0x000008c5

00000920 <main>:
		
	}
}

int main(void)
{
     920:	b580      	push	{r7, lr}
     922:	b082      	sub	sp, #8
     924:	af00      	add	r7, sp, #0
	atmel_start_init();
     926:	4b17      	ldr	r3, [pc, #92]	; (984 <main+0x64>)
     928:	4798      	blx	r3
	
	usb.Init();
     92a:	4817      	ldr	r0, [pc, #92]	; (988 <main+0x68>)
     92c:	4b17      	ldr	r3, [pc, #92]	; (98c <main+0x6c>)
     92e:	4798      	blx	r3
	delay_ms(100);
     930:	2064      	movs	r0, #100	; 0x64
     932:	4b17      	ldr	r3, [pc, #92]	; (990 <main+0x70>)
     934:	4798      	blx	r3
	while (usb.plugged==false);
     936:	4b14      	ldr	r3, [pc, #80]	; (988 <main+0x68>)
     938:	7c5b      	ldrb	r3, [r3, #17]
     93a:	b2db      	uxtb	r3, r3
     93c:	f083 0301 	eor.w	r3, r3, #1
     940:	b2db      	uxtb	r3, r3
     942:	2b00      	cmp	r3, #0
     944:	d000      	beq.n	948 <main+0x28>
     946:	e7f6      	b.n	936 <main+0x16>
	while(1){
		if (usb.connected)
     948:	4b0f      	ldr	r3, [pc, #60]	; (988 <main+0x68>)
     94a:	7c1b      	ldrb	r3, [r3, #16]
     94c:	b2db      	uxtb	r3, r3
     94e:	2b00      	cmp	r3, #0
     950:	d0fa      	beq.n	948 <main+0x28>
		{
			
			usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
     952:	4910      	ldr	r1, [pc, #64]	; (994 <main+0x74>)
     954:	480c      	ldr	r0, [pc, #48]	; (988 <main+0x68>)
     956:	4b10      	ldr	r3, [pc, #64]	; (998 <main+0x78>)
     958:	4798      	blx	r3
     95a:	4603      	mov	r3, r0
     95c:	490d      	ldr	r1, [pc, #52]	; (994 <main+0x74>)
     95e:	4618      	mov	r0, r3
     960:	4b0d      	ldr	r3, [pc, #52]	; (998 <main+0x78>)
     962:	4798      	blx	r3
     964:	4603      	mov	r3, r0
     966:	490d      	ldr	r1, [pc, #52]	; (99c <main+0x7c>)
     968:	4618      	mov	r0, r3
     96a:	4b0d      	ldr	r3, [pc, #52]	; (9a0 <main+0x80>)
     96c:	4798      	blx	r3
     96e:	4603      	mov	r3, r0
     970:	4908      	ldr	r1, [pc, #32]	; (994 <main+0x74>)
     972:	4618      	mov	r0, r3
     974:	4b08      	ldr	r3, [pc, #32]	; (998 <main+0x78>)
     976:	4798      	blx	r3
			//usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
			delay_ms(1000);
     978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     97c:	4b04      	ldr	r3, [pc, #16]	; (990 <main+0x70>)
     97e:	4798      	blx	r3
		if (usb.connected)
     980:	e7e2      	b.n	948 <main+0x28>
     982:	bf00      	nop
     984:	00000d75 	.word	0x00000d75
     988:	20004c94 	.word	0x20004c94
     98c:	0000e7fd 	.word	0x0000e7fd
     990:	00002629 	.word	0x00002629
     994:	000111ac 	.word	0x000111ac
     998:	00000321 	.word	0x00000321
     99c:	000111e4 	.word	0x000111e4
     9a0:	000009a5 	.word	0x000009a5

000009a4 <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     9a4:	b580      	push	{r7, lr}
     9a6:	b082      	sub	sp, #8
     9a8:	af00      	add	r7, sp, #0
     9aa:	6078      	str	r0, [r7, #4]
     9ac:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     9ae:	6839      	ldr	r1, [r7, #0]
     9b0:	6878      	ldr	r0, [r7, #4]
     9b2:	4b03      	ldr	r3, [pc, #12]	; (9c0 <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
     9b4:	4798      	blx	r3
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	4618      	mov	r0, r3
     9ba:	3708      	adds	r7, #8
     9bc:	46bd      	mov	sp, r7
     9be:	bd80      	pop	{r7, pc}
     9c0:	0000ec0d 	.word	0x0000ec0d

000009c4 <_ZN19PersistenceServicesD1Ev>:

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
     9c4:	b580      	push	{r7, lr}
     9c6:	b082      	sub	sp, #8
     9c8:	af00      	add	r7, sp, #0
     9ca:	6078      	str	r0, [r7, #4]
     9cc:	687b      	ldr	r3, [r7, #4]
     9ce:	4618      	mov	r0, r3
     9d0:	4b03      	ldr	r3, [pc, #12]	; (9e0 <_ZN19PersistenceServicesD1Ev+0x1c>)
     9d2:	4798      	blx	r3
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	4618      	mov	r0, r3
     9d8:	3708      	adds	r7, #8
     9da:	46bd      	mov	sp, r7
     9dc:	bd80      	pop	{r7, pc}
     9de:	bf00      	nop
     9e0:	000005e1 	.word	0x000005e1

000009e4 <_ZN21MemoryManagment_ClassC1Ev>:
#include "MemoryManagment_Class.h"
#include "AT24MAC_Class.h"
#include "CDC_Class.h"

// default constructor
MemoryManagment_Class::MemoryManagment_Class()
     9e4:	b580      	push	{r7, lr}
     9e6:	b082      	sub	sp, #8
     9e8:	af00      	add	r7, sp, #0
     9ea:	6078      	str	r0, [r7, #4]
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	4618      	mov	r0, r3
     9f0:	4b17      	ldr	r3, [pc, #92]	; (a50 <_ZN21MemoryManagment_ClassC1Ev+0x6c>)
     9f2:	4798      	blx	r3
     9f4:	687b      	ldr	r3, [r7, #4]
     9f6:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
     9fa:	4618      	mov	r0, r3
     9fc:	4b15      	ldr	r3, [pc, #84]	; (a54 <_ZN21MemoryManagment_ClassC1Ev+0x70>)
     9fe:	4798      	blx	r3
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
     a06:	4618      	mov	r0, r3
     a08:	4b13      	ldr	r3, [pc, #76]	; (a58 <_ZN21MemoryManagment_ClassC1Ev+0x74>)
     a0a:	4798      	blx	r3
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
     a12:	4618      	mov	r0, r3
     a14:	4b11      	ldr	r3, [pc, #68]	; (a5c <_ZN21MemoryManagment_ClassC1Ev+0x78>)
     a16:	4798      	blx	r3
     a18:	687b      	ldr	r3, [r7, #4]
     a1a:	f203 7364 	addw	r3, r3, #1892	; 0x764
     a1e:	4618      	mov	r0, r3
     a20:	4b0f      	ldr	r3, [pc, #60]	; (a60 <_ZN21MemoryManagment_ClassC1Ev+0x7c>)
     a22:	4798      	blx	r3
     a24:	687b      	ldr	r3, [r7, #4]
     a26:	2200      	movs	r2, #0
     a28:	f8c3 2998 	str.w	r2, [r3, #2456]	; 0x998
{
	_currentAddress=0;
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	2200      	movs	r2, #0
     a30:	f8c3 2984 	str.w	r2, [r3, #2436]	; 0x984
	head=512;
     a34:	687b      	ldr	r3, [r7, #4]
     a36:	f44f 7200 	mov.w	r2, #512	; 0x200
     a3a:	f8c3 299c 	str.w	r2, [r3, #2460]	; 0x99c
	tail=0;
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	2200      	movs	r2, #0
     a42:	f8c3 29a0 	str.w	r2, [r3, #2464]	; 0x9a0

	
} //MemoryManagment_Class
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	4618      	mov	r0, r3
     a4a:	3708      	adds	r7, #8
     a4c:	46bd      	mov	sp, r7
     a4e:	bd80      	pop	{r7, pc}
     a50:	000005f5 	.word	0x000005f5
     a54:	00000bbd 	.word	0x00000bbd
     a58:	000007ef 	.word	0x000007ef
     a5c:	00000b11 	.word	0x00000b11
     a60:	00000645 	.word	0x00000645

00000a64 <_ZN21MemoryManagment_ClassD1Ev>:



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
     a64:	b580      	push	{r7, lr}
     a66:	b082      	sub	sp, #8
     a68:	af00      	add	r7, sp, #0
     a6a:	6078      	str	r0, [r7, #4]
     a6c:	687b      	ldr	r3, [r7, #4]
     a6e:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
     a72:	4618      	mov	r0, r3
     a74:	4b0b      	ldr	r3, [pc, #44]	; (aa4 <_ZN21MemoryManagment_ClassD1Ev+0x40>)
     a76:	4798      	blx	r3
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
     a7e:	4618      	mov	r0, r3
     a80:	4b09      	ldr	r3, [pc, #36]	; (aa8 <_ZN21MemoryManagment_ClassD1Ev+0x44>)
     a82:	4798      	blx	r3
     a84:	687b      	ldr	r3, [r7, #4]
     a86:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
     a8a:	4618      	mov	r0, r3
     a8c:	4b07      	ldr	r3, [pc, #28]	; (aac <_ZN21MemoryManagment_ClassD1Ev+0x48>)
     a8e:	4798      	blx	r3
     a90:	687b      	ldr	r3, [r7, #4]
     a92:	4618      	mov	r0, r3
     a94:	4b06      	ldr	r3, [pc, #24]	; (ab0 <_ZN21MemoryManagment_ClassD1Ev+0x4c>)
     a96:	4798      	blx	r3
{
} //~MemoryManagment_Class
     a98:	687b      	ldr	r3, [r7, #4]
     a9a:	4618      	mov	r0, r3
     a9c:	3708      	adds	r7, #8
     a9e:	46bd      	mov	sp, r7
     aa0:	bd80      	pop	{r7, pc}
     aa2:	bf00      	nop
     aa4:	00000b25 	.word	0x00000b25
     aa8:	00000803 	.word	0x00000803
     aac:	000009c5 	.word	0x000009c5
     ab0:	00000625 	.word	0x00000625

00000ab4 <_Z41__static_initialization_and_destruction_0ii>:
	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
	return	bufferAddres;
}
 
     ab4:	b580      	push	{r7, lr}
     ab6:	b082      	sub	sp, #8
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
     abc:	6039      	str	r1, [r7, #0]
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	2b01      	cmp	r3, #1
     ac2:	d10c      	bne.n	ade <_Z41__static_initialization_and_destruction_0ii+0x2a>
     ac4:	683b      	ldr	r3, [r7, #0]
     ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     aca:	4293      	cmp	r3, r2
     acc:	d107      	bne.n	ade <_Z41__static_initialization_and_destruction_0ii+0x2a>
     ace:	4806      	ldr	r0, [pc, #24]	; (ae8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     ad0:	4b06      	ldr	r3, [pc, #24]	; (aec <_Z41__static_initialization_and_destruction_0ii+0x38>)
     ad2:	4798      	blx	r3
     ad4:	4a06      	ldr	r2, [pc, #24]	; (af0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     ad6:	4907      	ldr	r1, [pc, #28]	; (af4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     ad8:	4803      	ldr	r0, [pc, #12]	; (ae8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     ada:	4b07      	ldr	r3, [pc, #28]	; (af8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     adc:	4798      	blx	r3
     ade:	bf00      	nop
     ae0:	3708      	adds	r7, #8
     ae2:	46bd      	mov	sp, r7
     ae4:	bd80      	pop	{r7, pc}
     ae6:	bf00      	nop
     ae8:	20000e4c 	.word	0x20000e4c
     aec:	000009e5 	.word	0x000009e5
     af0:	20000000 	.word	0x20000000
     af4:	00000a65 	.word	0x00000a65
     af8:	0000f1f5 	.word	0x0000f1f5

00000afc <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
     afc:	b580      	push	{r7, lr}
     afe:	af00      	add	r7, sp, #0
     b00:	f64f 71ff 	movw	r1, #65535	; 0xffff
     b04:	2001      	movs	r0, #1
     b06:	4b01      	ldr	r3, [pc, #4]	; (b0c <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x10>)
     b08:	4798      	blx	r3
     b0a:	bd80      	pop	{r7, pc}
     b0c:	00000ab5 	.word	0x00000ab5

00000b10 <_ZN18MemoryStruct_ClassC1Ev>:
#include "MemoryManagment_Class.h"

MemoryFlashStruct	*flashMap=NULL;

// default constructor
MemoryStruct_Class::MemoryStruct_Class()
     b10:	b480      	push	{r7}
     b12:	b083      	sub	sp, #12
     b14:	af00      	add	r7, sp, #0
     b16:	6078      	str	r0, [r7, #4]
{
} //MemoryStruct_Class
     b18:	687b      	ldr	r3, [r7, #4]
     b1a:	4618      	mov	r0, r3
     b1c:	370c      	adds	r7, #12
     b1e:	46bd      	mov	sp, r7
     b20:	bc80      	pop	{r7}
     b22:	4770      	bx	lr

00000b24 <_ZN18MemoryStruct_ClassD1Ev>:

// default destructor
MemoryStruct_Class::~MemoryStruct_Class()
     b24:	b480      	push	{r7}
     b26:	b083      	sub	sp, #12
     b28:	af00      	add	r7, sp, #0
     b2a:	6078      	str	r0, [r7, #4]
{
} //~MemoryStruct_Class
     b2c:	687b      	ldr	r3, [r7, #4]
     b2e:	4618      	mov	r0, r3
     b30:	370c      	adds	r7, #12
     b32:	46bd      	mov	sp, r7
     b34:	bc80      	pop	{r7}
     b36:	4770      	bx	lr

00000b38 <_ZN10PBIT_ClassC1Ev>:

#include "PBIT_Class.h"
#include "Interfaces_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
     b38:	b480      	push	{r7}
     b3a:	b083      	sub	sp, #12
     b3c:	af00      	add	r7, sp, #0
     b3e:	6078      	str	r0, [r7, #4]
{
} //PBIT_Class
     b40:	687b      	ldr	r3, [r7, #4]
     b42:	4618      	mov	r0, r3
     b44:	370c      	adds	r7, #12
     b46:	46bd      	mov	sp, r7
     b48:	bc80      	pop	{r7}
     b4a:	4770      	bx	lr

00000b4c <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
     b4c:	b480      	push	{r7}
     b4e:	b083      	sub	sp, #12
     b50:	af00      	add	r7, sp, #0
     b52:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
     b54:	687b      	ldr	r3, [r7, #4]
     b56:	4618      	mov	r0, r3
     b58:	370c      	adds	r7, #12
     b5a:	46bd      	mov	sp, r7
     b5c:	bc80      	pop	{r7}
     b5e:	4770      	bx	lr

00000b60 <_Z41__static_initialization_and_destruction_0ii>:
		isOK=true;
	}
	return	v;
}

     b60:	b580      	push	{r7, lr}
     b62:	b082      	sub	sp, #8
     b64:	af00      	add	r7, sp, #0
     b66:	6078      	str	r0, [r7, #4]
     b68:	6039      	str	r1, [r7, #0]
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	2b01      	cmp	r3, #1
     b6e:	d10c      	bne.n	b8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     b70:	683b      	ldr	r3, [r7, #0]
     b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
     b76:	4293      	cmp	r3, r2
     b78:	d107      	bne.n	b8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
     b7a:	4806      	ldr	r0, [pc, #24]	; (b94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     b7c:	4b06      	ldr	r3, [pc, #24]	; (b98 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     b7e:	4798      	blx	r3
     b80:	4a06      	ldr	r2, [pc, #24]	; (b9c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     b82:	4907      	ldr	r1, [pc, #28]	; (ba0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     b84:	4803      	ldr	r0, [pc, #12]	; (b94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     b86:	4b07      	ldr	r3, [pc, #28]	; (ba4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     b88:	4798      	blx	r3
     b8a:	bf00      	nop
     b8c:	3708      	adds	r7, #8
     b8e:	46bd      	mov	sp, r7
     b90:	bd80      	pop	{r7, pc}
     b92:	bf00      	nop
     b94:	20002940 	.word	0x20002940
     b98:	00000b39 	.word	0x00000b39
     b9c:	20000000 	.word	0x20000000
     ba0:	00000b4d 	.word	0x00000b4d
     ba4:	0000f1f5 	.word	0x0000f1f5

00000ba8 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
     ba8:	b580      	push	{r7, lr}
     baa:	af00      	add	r7, sp, #0
     bac:	f64f 71ff 	movw	r1, #65535	; 0xffff
     bb0:	2001      	movs	r0, #1
     bb2:	4b01      	ldr	r3, [pc, #4]	; (bb8 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
     bb4:	4798      	blx	r3
     bb6:	bd80      	pop	{r7, pc}
     bb8:	00000b61 	.word	0x00000b61

00000bbc <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
     bbc:	b580      	push	{r7, lr}
     bbe:	b082      	sub	sp, #8
     bc0:	af00      	add	r7, sp, #0
     bc2:	6078      	str	r0, [r7, #4]
	:lastValidSaveWorkingStateForGAINIndex(0)
     bc4:	687b      	ldr	r3, [r7, #4]
     bc6:	4618      	mov	r0, r3
     bc8:	4b05      	ldr	r3, [pc, #20]	; (be0 <_ZN19PersistenceServicesC1Ev+0x24>)
     bca:	4798      	blx	r3
     bcc:	687b      	ldr	r3, [r7, #4]
     bce:	2200      	movs	r2, #0
     bd0:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	{
	}
     bd4:	687b      	ldr	r3, [r7, #4]
     bd6:	4618      	mov	r0, r3
     bd8:	3708      	adds	r7, #8
     bda:	46bd      	mov	sp, r7
     bdc:	bd80      	pop	{r7, pc}
     bde:	bf00      	nop
     be0:	000005cd 	.word	0x000005cd

00000be4 <_ZN5eventC1Ev>:
		tick_t		timestamp;
		eventData	data;
		event*		next;
	};

inline event::event()
     be4:	b580      	push	{r7, lr}
     be6:	b082      	sub	sp, #8
     be8:	af00      	add	r7, sp, #0
     bea:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     bec:	687b      	ldr	r3, [r7, #4]
     bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
     bf2:	801a      	strh	r2, [r3, #0]
     bf4:	687b      	ldr	r3, [r7, #4]
     bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     bfa:	805a      	strh	r2, [r3, #2]
     bfc:	687b      	ldr	r3, [r7, #4]
     bfe:	2200      	movs	r2, #0
     c00:	605a      	str	r2, [r3, #4]
     c02:	687b      	ldr	r3, [r7, #4]
     c04:	3308      	adds	r3, #8
     c06:	2100      	movs	r1, #0
     c08:	4618      	mov	r0, r3
     c0a:	4b05      	ldr	r3, [pc, #20]	; (c20 <_ZN5eventC1Ev+0x3c>)
     c0c:	4798      	blx	r3
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	2200      	movs	r2, #0
     c12:	60da      	str	r2, [r3, #12]
	{
	}
     c14:	687b      	ldr	r3, [r7, #4]
     c16:	4618      	mov	r0, r3
     c18:	3708      	adds	r7, #8
     c1a:	46bd      	mov	sp, r7
     c1c:	bd80      	pop	{r7, pc}
     c1e:	bf00      	nop
     c20:	000002d1 	.word	0x000002d1

00000c24 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     c24:	b590      	push	{r4, r7, lr}
     c26:	b083      	sub	sp, #12
     c28:	af00      	add	r7, sp, #0
     c2a:	6078      	str	r0, [r7, #4]
     c2c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
     c2e:	683b      	ldr	r3, [r7, #0]
     c30:	2b00      	cmp	r3, #0
     c32:	d101      	bne.n	c38 <_ZN5Print5writeEPKc+0x14>
     c34:	2300      	movs	r3, #0
     c36:	e00c      	b.n	c52 <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
     c38:	687b      	ldr	r3, [r7, #4]
     c3a:	681b      	ldr	r3, [r3, #0]
     c3c:	3304      	adds	r3, #4
     c3e:	681c      	ldr	r4, [r3, #0]
     c40:	6838      	ldr	r0, [r7, #0]
     c42:	4b06      	ldr	r3, [pc, #24]	; (c5c <_ZN5Print5writeEPKc+0x38>)
     c44:	4798      	blx	r3
     c46:	4603      	mov	r3, r0
     c48:	461a      	mov	r2, r3
     c4a:	6839      	ldr	r1, [r7, #0]
     c4c:	6878      	ldr	r0, [r7, #4]
     c4e:	47a0      	blx	r4
     c50:	4603      	mov	r3, r0
    }
     c52:	4618      	mov	r0, r3
     c54:	370c      	adds	r7, #12
     c56:	46bd      	mov	sp, r7
     c58:	bd90      	pop	{r4, r7, pc}
     c5a:	bf00      	nop
     c5c:	00010ec1 	.word	0x00010ec1

00000c60 <_ZN12States_ClassC1Ev>:
#include "ALU_Class.h"
#include "CBIT_Class.h"
#include "FlapperValve_Class.h"

	// default constructor
States_Class::States_Class(void)
     c60:	b580      	push	{r7, lr}
     c62:	b082      	sub	sp, #8
     c64:	af00      	add	r7, sp, #0
     c66:	6078      	str	r0, [r7, #4]
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	4618      	mov	r0, r3
     c6c:	4b0d      	ldr	r3, [pc, #52]	; (ca4 <_ZN12States_ClassC1Ev+0x44>)
     c6e:	4798      	blx	r3
     c70:	687b      	ldr	r3, [r7, #4]
     c72:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
     c76:	4618      	mov	r0, r3
     c78:	4b0b      	ldr	r3, [pc, #44]	; (ca8 <_ZN12States_ClassC1Ev+0x48>)
     c7a:	4798      	blx	r3
     c7c:	4a0b      	ldr	r2, [pc, #44]	; (cac <_ZN12States_ClassC1Ev+0x4c>)
     c7e:	687b      	ldr	r3, [r7, #4]
     c80:	601a      	str	r2, [r3, #0]
	{
	listener.eventHandler = NULL;
     c82:	4b0b      	ldr	r3, [pc, #44]	; (cb0 <_ZN12States_ClassC1Ev+0x50>)
     c84:	2200      	movs	r2, #0
     c86:	605a      	str	r2, [r3, #4]
state=defaultState;
     c88:	687a      	ldr	r2, [r7, #4]
     c8a:	687b      	ldr	r3, [r7, #4]
     c8c:	f502 7070 	add.w	r0, r2, #960	; 0x3c0
     c90:	3304      	adds	r3, #4
     c92:	227c      	movs	r2, #124	; 0x7c
     c94:	4619      	mov	r1, r3
     c96:	4b07      	ldr	r3, [pc, #28]	; (cb4 <_ZN12States_ClassC1Ev+0x54>)
     c98:	4798      	blx	r3
	}
     c9a:	687b      	ldr	r3, [r7, #4]
     c9c:	4618      	mov	r0, r3
     c9e:	3708      	adds	r7, #8
     ca0:	46bd      	mov	sp, r7
     ca2:	bd80      	pop	{r7, pc}
     ca4:	00000545 	.word	0x00000545
     ca8:	0000089d 	.word	0x0000089d
     cac:	000112c4 	.word	0x000112c4
     cb0:	2000481c 	.word	0x2000481c
     cb4:	00010ce1 	.word	0x00010ce1

00000cb8 <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
     cb8:	b580      	push	{r7, lr}
     cba:	b082      	sub	sp, #8
     cbc:	af00      	add	r7, sp, #0
     cbe:	6078      	str	r0, [r7, #4]
     cc0:	4a08      	ldr	r2, [pc, #32]	; (ce4 <_ZN12States_ClassD1Ev+0x2c>)
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	601a      	str	r2, [r3, #0]
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
     ccc:	4618      	mov	r0, r3
     cce:	4b06      	ldr	r3, [pc, #24]	; (ce8 <_ZN12States_ClassD1Ev+0x30>)
     cd0:	4798      	blx	r3
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	4618      	mov	r0, r3
     cd6:	4b05      	ldr	r3, [pc, #20]	; (cec <_ZN12States_ClassD1Ev+0x34>)
     cd8:	4798      	blx	r3
{
} //~States_Class
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	4618      	mov	r0, r3
     cde:	3708      	adds	r7, #8
     ce0:	46bd      	mov	sp, r7
     ce2:	bd80      	pop	{r7, pc}
     ce4:	000112c4 	.word	0x000112c4
     ce8:	000008b1 	.word	0x000008b1
     cec:	000005ad 	.word	0x000005ad

00000cf0 <_ZN12States_Class15SetCurrentStateER9HVACState>:
	hs=state;
}
void	States_Class::SetConfigurationData(ConfigurationData& cd){
	configuration=cd;
}
void	States_Class::SetCurrentState(HVACState& hs){
     cf0:	b580      	push	{r7, lr}
     cf2:	b082      	sub	sp, #8
     cf4:	af00      	add	r7, sp, #0
     cf6:	6078      	str	r0, [r7, #4]
     cf8:	6039      	str	r1, [r7, #0]
	state=hs;
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	683a      	ldr	r2, [r7, #0]
     cfe:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
     d02:	4611      	mov	r1, r2
     d04:	227c      	movs	r2, #124	; 0x7c
     d06:	4618      	mov	r0, r3
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
     d0a:	4798      	blx	r3
}
     d0c:	bf00      	nop
     d0e:	3708      	adds	r7, #8
     d10:	46bd      	mov	sp, r7
     d12:	bd80      	pop	{r7, pc}
     d14:	00010ce1 	.word	0x00010ce1

00000d18 <_Z41__static_initialization_and_destruction_0ii>:
	s=state.status;
	return	state.status.rawStatus;
}


     d18:	b580      	push	{r7, lr}
     d1a:	b082      	sub	sp, #8
     d1c:	af00      	add	r7, sp, #0
     d1e:	6078      	str	r0, [r7, #4]
     d20:	6039      	str	r1, [r7, #0]
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	2b01      	cmp	r3, #1
     d26:	d10c      	bne.n	d42 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     d28:	683b      	ldr	r3, [r7, #0]
     d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     d2e:	4293      	cmp	r3, r2
     d30:	d107      	bne.n	d42 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     d32:	4806      	ldr	r0, [pc, #24]	; (d4c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     d34:	4b06      	ldr	r3, [pc, #24]	; (d50 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     d36:	4798      	blx	r3
     d38:	4a06      	ldr	r2, [pc, #24]	; (d54 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     d3a:	4907      	ldr	r1, [pc, #28]	; (d58 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     d3c:	4803      	ldr	r0, [pc, #12]	; (d4c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     d3e:	4b07      	ldr	r3, [pc, #28]	; (d5c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     d40:	4798      	blx	r3
     d42:	bf00      	nop
     d44:	3708      	adds	r7, #8
     d46:	46bd      	mov	sp, r7
     d48:	bd80      	pop	{r7, pc}
     d4a:	bf00      	nop
     d4c:	20002954 	.word	0x20002954
     d50:	00000c61 	.word	0x00000c61
     d54:	20000000 	.word	0x20000000
     d58:	00000cb9 	.word	0x00000cb9
     d5c:	0000f1f5 	.word	0x0000f1f5

00000d60 <_GLOBAL__sub_I__ZN12States_ClassC2Ev>:
     d60:	b580      	push	{r7, lr}
     d62:	af00      	add	r7, sp, #0
     d64:	f64f 71ff 	movw	r1, #65535	; 0xffff
     d68:	2001      	movs	r0, #1
     d6a:	4b01      	ldr	r3, [pc, #4]	; (d70 <_GLOBAL__sub_I__ZN12States_ClassC2Ev+0x10>)
     d6c:	4798      	blx	r3
     d6e:	bd80      	pop	{r7, pc}
     d70:	00000d19 	.word	0x00000d19

00000d74 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     d74:	b580      	push	{r7, lr}
     d76:	af00      	add	r7, sp, #0
	system_init();
     d78:	4b03      	ldr	r3, [pc, #12]	; (d88 <atmel_start_init+0x14>)
     d7a:	4798      	blx	r3
	usb_init();
     d7c:	4b03      	ldr	r3, [pc, #12]	; (d8c <atmel_start_init+0x18>)
     d7e:	4798      	blx	r3
	spi_nor_flash_init();
     d80:	4b03      	ldr	r3, [pc, #12]	; (d90 <atmel_start_init+0x1c>)
     d82:	4798      	blx	r3
}
     d84:	bf00      	nop
     d86:	bd80      	pop	{r7, pc}
     d88:	00002035 	.word	0x00002035
     d8c:	0000b7f5 	.word	0x0000b7f5
     d90:	0000b789 	.word	0x0000b789

00000d94 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     d94:	b480      	push	{r7}
     d96:	b085      	sub	sp, #20
     d98:	af00      	add	r7, sp, #0
     d9a:	60f8      	str	r0, [r7, #12]
     d9c:	460b      	mov	r3, r1
     d9e:	607a      	str	r2, [r7, #4]
     da0:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     da2:	7afa      	ldrb	r2, [r7, #11]
     da4:	68fb      	ldr	r3, [r7, #12]
     da6:	3220      	adds	r2, #32
     da8:	6879      	ldr	r1, [r7, #4]
     daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     dae:	bf00      	nop
     db0:	3714      	adds	r7, #20
     db2:	46bd      	mov	sp, r7
     db4:	f85d 7b04 	ldr.w	r7, [sp], #4
     db8:	4770      	bx	lr

00000dba <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     dba:	b480      	push	{r7}
     dbc:	b083      	sub	sp, #12
     dbe:	af00      	add	r7, sp, #0
     dc0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     dc2:	687b      	ldr	r3, [r7, #4]
     dc4:	691b      	ldr	r3, [r3, #16]
     dc6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     dca:	687b      	ldr	r3, [r7, #4]
     dcc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     dce:	bf00      	nop
     dd0:	370c      	adds	r7, #12
     dd2:	46bd      	mov	sp, r7
     dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
     dd8:	4770      	bx	lr

00000dda <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     dda:	b480      	push	{r7}
     ddc:	b083      	sub	sp, #12
     dde:	af00      	add	r7, sp, #0
     de0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	691b      	ldr	r3, [r3, #16]
     de6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     dea:	687b      	ldr	r3, [r7, #4]
     dec:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     dee:	bf00      	nop
     df0:	370c      	adds	r7, #12
     df2:	46bd      	mov	sp, r7
     df4:	f85d 7b04 	ldr.w	r7, [sp], #4
     df8:	4770      	bx	lr

00000dfa <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     dfa:	b480      	push	{r7}
     dfc:	b083      	sub	sp, #12
     dfe:	af00      	add	r7, sp, #0
     e00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     e02:	687b      	ldr	r3, [r7, #4]
     e04:	691b      	ldr	r3, [r3, #16]
     e06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     e0a:	687b      	ldr	r3, [r7, #4]
     e0c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e0e:	bf00      	nop
     e10:	370c      	adds	r7, #12
     e12:	46bd      	mov	sp, r7
     e14:	f85d 7b04 	ldr.w	r7, [sp], #4
     e18:	4770      	bx	lr

00000e1a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     e1a:	b480      	push	{r7}
     e1c:	b083      	sub	sp, #12
     e1e:	af00      	add	r7, sp, #0
     e20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     e22:	687b      	ldr	r3, [r7, #4]
     e24:	691b      	ldr	r3, [r3, #16]
     e26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e2e:	bf00      	nop
     e30:	370c      	adds	r7, #12
     e32:	46bd      	mov	sp, r7
     e34:	f85d 7b04 	ldr.w	r7, [sp], #4
     e38:	4770      	bx	lr

00000e3a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     e3a:	b480      	push	{r7}
     e3c:	b083      	sub	sp, #12
     e3e:	af00      	add	r7, sp, #0
     e40:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	695b      	ldr	r3, [r3, #20]
     e46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     e4a:	687b      	ldr	r3, [r7, #4]
     e4c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e4e:	bf00      	nop
     e50:	370c      	adds	r7, #12
     e52:	46bd      	mov	sp, r7
     e54:	f85d 7b04 	ldr.w	r7, [sp], #4
     e58:	4770      	bx	lr

00000e5a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     e5a:	b480      	push	{r7}
     e5c:	b083      	sub	sp, #12
     e5e:	af00      	add	r7, sp, #0
     e60:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     e62:	687b      	ldr	r3, [r7, #4]
     e64:	695b      	ldr	r3, [r3, #20]
     e66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     e6a:	687b      	ldr	r3, [r7, #4]
     e6c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e6e:	bf00      	nop
     e70:	370c      	adds	r7, #12
     e72:	46bd      	mov	sp, r7
     e74:	f85d 7b04 	ldr.w	r7, [sp], #4
     e78:	4770      	bx	lr

00000e7a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     e7a:	b480      	push	{r7}
     e7c:	b083      	sub	sp, #12
     e7e:	af00      	add	r7, sp, #0
     e80:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     e82:	687b      	ldr	r3, [r7, #4]
     e84:	695b      	ldr	r3, [r3, #20]
     e86:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     e8a:	687b      	ldr	r3, [r7, #4]
     e8c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     e8e:	bf00      	nop
     e90:	370c      	adds	r7, #12
     e92:	46bd      	mov	sp, r7
     e94:	f85d 7b04 	ldr.w	r7, [sp], #4
     e98:	4770      	bx	lr

00000e9a <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     e9a:	b480      	push	{r7}
     e9c:	b083      	sub	sp, #12
     e9e:	af00      	add	r7, sp, #0
     ea0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	695b      	ldr	r3, [r3, #20]
     ea6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     eaa:	687b      	ldr	r3, [r7, #4]
     eac:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     eae:	bf00      	nop
     eb0:	370c      	adds	r7, #12
     eb2:	46bd      	mov	sp, r7
     eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
     eb8:	4770      	bx	lr

00000eba <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     eba:	b480      	push	{r7}
     ebc:	b083      	sub	sp, #12
     ebe:	af00      	add	r7, sp, #0
     ec0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     ec2:	687b      	ldr	r3, [r7, #4]
     ec4:	695b      	ldr	r3, [r3, #20]
     ec6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     eca:	687b      	ldr	r3, [r7, #4]
     ecc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ece:	bf00      	nop
     ed0:	370c      	adds	r7, #12
     ed2:	46bd      	mov	sp, r7
     ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ed8:	4770      	bx	lr

00000eda <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     eda:	b480      	push	{r7}
     edc:	b083      	sub	sp, #12
     ede:	af00      	add	r7, sp, #0
     ee0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     ee2:	687b      	ldr	r3, [r7, #4]
     ee4:	695b      	ldr	r3, [r3, #20]
     ee6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     eea:	687b      	ldr	r3, [r7, #4]
     eec:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     eee:	bf00      	nop
     ef0:	370c      	adds	r7, #12
     ef2:	46bd      	mov	sp, r7
     ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ef8:	4770      	bx	lr

00000efa <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     efa:	b480      	push	{r7}
     efc:	b083      	sub	sp, #12
     efe:	af00      	add	r7, sp, #0
     f00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     f02:	687b      	ldr	r3, [r7, #4]
     f04:	695b      	ldr	r3, [r3, #20]
     f06:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     f0a:	687b      	ldr	r3, [r7, #4]
     f0c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f0e:	bf00      	nop
     f10:	370c      	adds	r7, #12
     f12:	46bd      	mov	sp, r7
     f14:	f85d 7b04 	ldr.w	r7, [sp], #4
     f18:	4770      	bx	lr

00000f1a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     f1a:	b480      	push	{r7}
     f1c:	b083      	sub	sp, #12
     f1e:	af00      	add	r7, sp, #0
     f20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     f22:	687b      	ldr	r3, [r7, #4]
     f24:	699b      	ldr	r3, [r3, #24]
     f26:	f043 0201 	orr.w	r2, r3, #1
     f2a:	687b      	ldr	r3, [r7, #4]
     f2c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f2e:	bf00      	nop
     f30:	370c      	adds	r7, #12
     f32:	46bd      	mov	sp, r7
     f34:	f85d 7b04 	ldr.w	r7, [sp], #4
     f38:	4770      	bx	lr

00000f3a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     f3a:	b480      	push	{r7}
     f3c:	b083      	sub	sp, #12
     f3e:	af00      	add	r7, sp, #0
     f40:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     f42:	687b      	ldr	r3, [r7, #4]
     f44:	699b      	ldr	r3, [r3, #24]
     f46:	f043 0202 	orr.w	r2, r3, #2
     f4a:	687b      	ldr	r3, [r7, #4]
     f4c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f4e:	bf00      	nop
     f50:	370c      	adds	r7, #12
     f52:	46bd      	mov	sp, r7
     f54:	f85d 7b04 	ldr.w	r7, [sp], #4
     f58:	4770      	bx	lr

00000f5a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     f5a:	b480      	push	{r7}
     f5c:	b083      	sub	sp, #12
     f5e:	af00      	add	r7, sp, #0
     f60:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     f62:	687b      	ldr	r3, [r7, #4]
     f64:	699b      	ldr	r3, [r3, #24]
     f66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f6e:	bf00      	nop
     f70:	370c      	adds	r7, #12
     f72:	46bd      	mov	sp, r7
     f74:	f85d 7b04 	ldr.w	r7, [sp], #4
     f78:	4770      	bx	lr

00000f7a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     f7a:	b480      	push	{r7}
     f7c:	b083      	sub	sp, #12
     f7e:	af00      	add	r7, sp, #0
     f80:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	699b      	ldr	r3, [r3, #24]
     f86:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     f8a:	687b      	ldr	r3, [r7, #4]
     f8c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     f8e:	bf00      	nop
     f90:	370c      	adds	r7, #12
     f92:	46bd      	mov	sp, r7
     f94:	f85d 7b04 	ldr.w	r7, [sp], #4
     f98:	4770      	bx	lr

00000f9a <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     f9a:	b480      	push	{r7}
     f9c:	b083      	sub	sp, #12
     f9e:	af00      	add	r7, sp, #0
     fa0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     fa2:	687b      	ldr	r3, [r7, #4]
     fa4:	699b      	ldr	r3, [r3, #24]
     fa6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fae:	bf00      	nop
     fb0:	370c      	adds	r7, #12
     fb2:	46bd      	mov	sp, r7
     fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
     fb8:	4770      	bx	lr

00000fba <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     fba:	b480      	push	{r7}
     fbc:	b083      	sub	sp, #12
     fbe:	af00      	add	r7, sp, #0
     fc0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     fc2:	687b      	ldr	r3, [r7, #4]
     fc4:	69db      	ldr	r3, [r3, #28]
     fc6:	f043 0220 	orr.w	r2, r3, #32
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fce:	bf00      	nop
     fd0:	370c      	adds	r7, #12
     fd2:	46bd      	mov	sp, r7
     fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
     fd8:	4770      	bx	lr

00000fda <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     fda:	b480      	push	{r7}
     fdc:	b083      	sub	sp, #12
     fde:	af00      	add	r7, sp, #0
     fe0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     fe2:	687b      	ldr	r3, [r7, #4]
     fe4:	69db      	ldr	r3, [r3, #28]
     fe6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     fea:	687b      	ldr	r3, [r7, #4]
     fec:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     fee:	bf00      	nop
     ff0:	370c      	adds	r7, #12
     ff2:	46bd      	mov	sp, r7
     ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ff8:	4770      	bx	lr

00000ffa <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     ffa:	b480      	push	{r7}
     ffc:	b083      	sub	sp, #12
     ffe:	af00      	add	r7, sp, #0
    1000:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    1002:	687b      	ldr	r3, [r7, #4]
    1004:	69db      	ldr	r3, [r3, #28]
    1006:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    100e:	bf00      	nop
    1010:	370c      	adds	r7, #12
    1012:	46bd      	mov	sp, r7
    1014:	f85d 7b04 	ldr.w	r7, [sp], #4
    1018:	4770      	bx	lr

0000101a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    101a:	b480      	push	{r7}
    101c:	b083      	sub	sp, #12
    101e:	af00      	add	r7, sp, #0
    1020:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    1022:	687b      	ldr	r3, [r7, #4]
    1024:	6a1b      	ldr	r3, [r3, #32]
    1026:	f043 0201 	orr.w	r2, r3, #1
    102a:	687b      	ldr	r3, [r7, #4]
    102c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    102e:	bf00      	nop
    1030:	370c      	adds	r7, #12
    1032:	46bd      	mov	sp, r7
    1034:	f85d 7b04 	ldr.w	r7, [sp], #4
    1038:	4770      	bx	lr

0000103a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    103a:	b480      	push	{r7}
    103c:	b083      	sub	sp, #12
    103e:	af00      	add	r7, sp, #0
    1040:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	6a1b      	ldr	r3, [r3, #32]
    1046:	f043 0202 	orr.w	r2, r3, #2
    104a:	687b      	ldr	r3, [r7, #4]
    104c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    104e:	bf00      	nop
    1050:	370c      	adds	r7, #12
    1052:	46bd      	mov	sp, r7
    1054:	f85d 7b04 	ldr.w	r7, [sp], #4
    1058:	4770      	bx	lr

0000105a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    105a:	b480      	push	{r7}
    105c:	b083      	sub	sp, #12
    105e:	af00      	add	r7, sp, #0
    1060:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	6a1b      	ldr	r3, [r3, #32]
    1066:	f043 0208 	orr.w	r2, r3, #8
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    106e:	bf00      	nop
    1070:	370c      	adds	r7, #12
    1072:	46bd      	mov	sp, r7
    1074:	f85d 7b04 	ldr.w	r7, [sp], #4
    1078:	4770      	bx	lr

0000107a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    107a:	b480      	push	{r7}
    107c:	b083      	sub	sp, #12
    107e:	af00      	add	r7, sp, #0
    1080:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	6a1b      	ldr	r3, [r3, #32]
    1086:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    108a:	687b      	ldr	r3, [r7, #4]
    108c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    108e:	bf00      	nop
    1090:	370c      	adds	r7, #12
    1092:	46bd      	mov	sp, r7
    1094:	f85d 7b04 	ldr.w	r7, [sp], #4
    1098:	4770      	bx	lr

0000109a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    109a:	b480      	push	{r7}
    109c:	b085      	sub	sp, #20
    109e:	af00      	add	r7, sp, #0
    10a0:	60f8      	str	r0, [r7, #12]
    10a2:	460b      	mov	r3, r1
    10a4:	607a      	str	r2, [r7, #4]
    10a6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    10a8:	7afb      	ldrb	r3, [r7, #11]
    10aa:	68fa      	ldr	r2, [r7, #12]
    10ac:	01db      	lsls	r3, r3, #7
    10ae:	4413      	add	r3, r2
    10b0:	3308      	adds	r3, #8
    10b2:	687a      	ldr	r2, [r7, #4]
    10b4:	601a      	str	r2, [r3, #0]
}
    10b6:	bf00      	nop
    10b8:	3714      	adds	r7, #20
    10ba:	46bd      	mov	sp, r7
    10bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    10c0:	4770      	bx	lr

000010c2 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    10c2:	b480      	push	{r7}
    10c4:	b085      	sub	sp, #20
    10c6:	af00      	add	r7, sp, #0
    10c8:	60f8      	str	r0, [r7, #12]
    10ca:	460b      	mov	r3, r1
    10cc:	607a      	str	r2, [r7, #4]
    10ce:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10d0:	7afb      	ldrb	r3, [r7, #11]
    10d2:	68fa      	ldr	r2, [r7, #12]
    10d4:	01db      	lsls	r3, r3, #7
    10d6:	4413      	add	r3, r2
    10d8:	3304      	adds	r3, #4
    10da:	687a      	ldr	r2, [r7, #4]
    10dc:	601a      	str	r2, [r3, #0]
}
    10de:	bf00      	nop
    10e0:	3714      	adds	r7, #20
    10e2:	46bd      	mov	sp, r7
    10e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    10e8:	4770      	bx	lr

000010ea <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    10ea:	b480      	push	{r7}
    10ec:	b085      	sub	sp, #20
    10ee:	af00      	add	r7, sp, #0
    10f0:	60f8      	str	r0, [r7, #12]
    10f2:	460b      	mov	r3, r1
    10f4:	607a      	str	r2, [r7, #4]
    10f6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    10f8:	7afb      	ldrb	r3, [r7, #11]
    10fa:	68fa      	ldr	r2, [r7, #12]
    10fc:	01db      	lsls	r3, r3, #7
    10fe:	4413      	add	r3, r2
    1100:	3318      	adds	r3, #24
    1102:	687a      	ldr	r2, [r7, #4]
    1104:	601a      	str	r2, [r3, #0]
}
    1106:	bf00      	nop
    1108:	3714      	adds	r7, #20
    110a:	46bd      	mov	sp, r7
    110c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1110:	4770      	bx	lr

00001112 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1112:	b480      	push	{r7}
    1114:	b085      	sub	sp, #20
    1116:	af00      	add	r7, sp, #0
    1118:	60f8      	str	r0, [r7, #12]
    111a:	460b      	mov	r3, r1
    111c:	607a      	str	r2, [r7, #4]
    111e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1120:	7afb      	ldrb	r3, [r7, #11]
    1122:	68fa      	ldr	r2, [r7, #12]
    1124:	01db      	lsls	r3, r3, #7
    1126:	4413      	add	r3, r2
    1128:	3314      	adds	r3, #20
    112a:	687a      	ldr	r2, [r7, #4]
    112c:	601a      	str	r2, [r3, #0]
}
    112e:	bf00      	nop
    1130:	3714      	adds	r7, #20
    1132:	46bd      	mov	sp, r7
    1134:	f85d 7b04 	ldr.w	r7, [sp], #4
    1138:	4770      	bx	lr

0000113a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    113a:	b480      	push	{r7}
    113c:	b085      	sub	sp, #20
    113e:	af00      	add	r7, sp, #0
    1140:	6078      	str	r0, [r7, #4]
    1142:	4608      	mov	r0, r1
    1144:	4611      	mov	r1, r2
    1146:	461a      	mov	r2, r3
    1148:	4603      	mov	r3, r0
    114a:	70fb      	strb	r3, [r7, #3]
    114c:	460b      	mov	r3, r1
    114e:	70bb      	strb	r3, [r7, #2]
    1150:	4613      	mov	r3, r2
    1152:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1154:	78fa      	ldrb	r2, [r7, #3]
    1156:	78bb      	ldrb	r3, [r7, #2]
    1158:	6879      	ldr	r1, [r7, #4]
    115a:	01d2      	lsls	r2, r2, #7
    115c:	440a      	add	r2, r1
    115e:	4413      	add	r3, r2
    1160:	3330      	adds	r3, #48	; 0x30
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1166:	7bfb      	ldrb	r3, [r7, #15]
    1168:	f023 030f 	bic.w	r3, r3, #15
    116c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    116e:	787b      	ldrb	r3, [r7, #1]
    1170:	f003 030f 	and.w	r3, r3, #15
    1174:	b2da      	uxtb	r2, r3
    1176:	7bfb      	ldrb	r3, [r7, #15]
    1178:	4313      	orrs	r3, r2
    117a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    117c:	78fa      	ldrb	r2, [r7, #3]
    117e:	78bb      	ldrb	r3, [r7, #2]
    1180:	6879      	ldr	r1, [r7, #4]
    1182:	01d2      	lsls	r2, r2, #7
    1184:	440a      	add	r2, r1
    1186:	4413      	add	r3, r2
    1188:	3330      	adds	r3, #48	; 0x30
    118a:	7bfa      	ldrb	r2, [r7, #15]
    118c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    118e:	bf00      	nop
    1190:	3714      	adds	r7, #20
    1192:	46bd      	mov	sp, r7
    1194:	f85d 7b04 	ldr.w	r7, [sp], #4
    1198:	4770      	bx	lr

0000119a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    119a:	b480      	push	{r7}
    119c:	b085      	sub	sp, #20
    119e:	af00      	add	r7, sp, #0
    11a0:	6078      	str	r0, [r7, #4]
    11a2:	4608      	mov	r0, r1
    11a4:	4611      	mov	r1, r2
    11a6:	461a      	mov	r2, r3
    11a8:	4603      	mov	r3, r0
    11aa:	70fb      	strb	r3, [r7, #3]
    11ac:	460b      	mov	r3, r1
    11ae:	70bb      	strb	r3, [r7, #2]
    11b0:	4613      	mov	r3, r2
    11b2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    11b4:	78fa      	ldrb	r2, [r7, #3]
    11b6:	78bb      	ldrb	r3, [r7, #2]
    11b8:	6879      	ldr	r1, [r7, #4]
    11ba:	01d2      	lsls	r2, r2, #7
    11bc:	440a      	add	r2, r1
    11be:	4413      	add	r3, r2
    11c0:	3330      	adds	r3, #48	; 0x30
    11c2:	781b      	ldrb	r3, [r3, #0]
    11c4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    11c6:	7bfb      	ldrb	r3, [r7, #15]
    11c8:	f003 030f 	and.w	r3, r3, #15
    11cc:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    11ce:	787b      	ldrb	r3, [r7, #1]
    11d0:	011b      	lsls	r3, r3, #4
    11d2:	b2da      	uxtb	r2, r3
    11d4:	7bfb      	ldrb	r3, [r7, #15]
    11d6:	4313      	orrs	r3, r2
    11d8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11da:	78fa      	ldrb	r2, [r7, #3]
    11dc:	78bb      	ldrb	r3, [r7, #2]
    11de:	6879      	ldr	r1, [r7, #4]
    11e0:	01d2      	lsls	r2, r2, #7
    11e2:	440a      	add	r2, r1
    11e4:	4413      	add	r3, r2
    11e6:	3330      	adds	r3, #48	; 0x30
    11e8:	7bfa      	ldrb	r2, [r7, #15]
    11ea:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    11ec:	bf00      	nop
    11ee:	3714      	adds	r7, #20
    11f0:	46bd      	mov	sp, r7
    11f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    11f6:	4770      	bx	lr

000011f8 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    11f8:	b480      	push	{r7}
    11fa:	b085      	sub	sp, #20
    11fc:	af00      	add	r7, sp, #0
    11fe:	6078      	str	r0, [r7, #4]
    1200:	4608      	mov	r0, r1
    1202:	4611      	mov	r1, r2
    1204:	461a      	mov	r2, r3
    1206:	4603      	mov	r3, r0
    1208:	70fb      	strb	r3, [r7, #3]
    120a:	460b      	mov	r3, r1
    120c:	70bb      	strb	r3, [r7, #2]
    120e:	4613      	mov	r3, r2
    1210:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1212:	78fa      	ldrb	r2, [r7, #3]
    1214:	78bb      	ldrb	r3, [r7, #2]
    1216:	6879      	ldr	r1, [r7, #4]
    1218:	01d2      	lsls	r2, r2, #7
    121a:	440a      	add	r2, r1
    121c:	4413      	add	r3, r2
    121e:	3340      	adds	r3, #64	; 0x40
    1220:	781b      	ldrb	r3, [r3, #0]
    1222:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1224:	7bfb      	ldrb	r3, [r7, #15]
    1226:	f023 0301 	bic.w	r3, r3, #1
    122a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    122c:	787a      	ldrb	r2, [r7, #1]
    122e:	7bfb      	ldrb	r3, [r7, #15]
    1230:	4313      	orrs	r3, r2
    1232:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1234:	78fa      	ldrb	r2, [r7, #3]
    1236:	78bb      	ldrb	r3, [r7, #2]
    1238:	6879      	ldr	r1, [r7, #4]
    123a:	01d2      	lsls	r2, r2, #7
    123c:	440a      	add	r2, r1
    123e:	4413      	add	r3, r2
    1240:	3340      	adds	r3, #64	; 0x40
    1242:	7bfa      	ldrb	r2, [r7, #15]
    1244:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1246:	bf00      	nop
    1248:	3714      	adds	r7, #20
    124a:	46bd      	mov	sp, r7
    124c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1250:	4770      	bx	lr

00001252 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1252:	b490      	push	{r4, r7}
    1254:	b082      	sub	sp, #8
    1256:	af00      	add	r7, sp, #0
    1258:	6078      	str	r0, [r7, #4]
    125a:	460b      	mov	r3, r1
    125c:	70fb      	strb	r3, [r7, #3]
    125e:	4613      	mov	r3, r2
    1260:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1262:	78fa      	ldrb	r2, [r7, #3]
    1264:	78bb      	ldrb	r3, [r7, #2]
    1266:	78f8      	ldrb	r0, [r7, #3]
    1268:	78b9      	ldrb	r1, [r7, #2]
    126a:	687c      	ldr	r4, [r7, #4]
    126c:	01c0      	lsls	r0, r0, #7
    126e:	4420      	add	r0, r4
    1270:	4401      	add	r1, r0
    1272:	3140      	adds	r1, #64	; 0x40
    1274:	7809      	ldrb	r1, [r1, #0]
    1276:	b2c9      	uxtb	r1, r1
    1278:	f041 0104 	orr.w	r1, r1, #4
    127c:	b2c8      	uxtb	r0, r1
    127e:	6879      	ldr	r1, [r7, #4]
    1280:	01d2      	lsls	r2, r2, #7
    1282:	440a      	add	r2, r1
    1284:	4413      	add	r3, r2
    1286:	3340      	adds	r3, #64	; 0x40
    1288:	4602      	mov	r2, r0
    128a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    128c:	bf00      	nop
    128e:	3708      	adds	r7, #8
    1290:	46bd      	mov	sp, r7
    1292:	bc90      	pop	{r4, r7}
    1294:	4770      	bx	lr

00001296 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1296:	b490      	push	{r4, r7}
    1298:	b082      	sub	sp, #8
    129a:	af00      	add	r7, sp, #0
    129c:	6078      	str	r0, [r7, #4]
    129e:	460b      	mov	r3, r1
    12a0:	70fb      	strb	r3, [r7, #3]
    12a2:	4613      	mov	r3, r2
    12a4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    12a6:	78fa      	ldrb	r2, [r7, #3]
    12a8:	78bb      	ldrb	r3, [r7, #2]
    12aa:	78f8      	ldrb	r0, [r7, #3]
    12ac:	78b9      	ldrb	r1, [r7, #2]
    12ae:	687c      	ldr	r4, [r7, #4]
    12b0:	01c0      	lsls	r0, r0, #7
    12b2:	4420      	add	r0, r4
    12b4:	4401      	add	r1, r0
    12b6:	3140      	adds	r1, #64	; 0x40
    12b8:	7809      	ldrb	r1, [r1, #0]
    12ba:	b2c9      	uxtb	r1, r1
    12bc:	f021 0104 	bic.w	r1, r1, #4
    12c0:	b2c8      	uxtb	r0, r1
    12c2:	6879      	ldr	r1, [r7, #4]
    12c4:	01d2      	lsls	r2, r2, #7
    12c6:	440a      	add	r2, r1
    12c8:	4413      	add	r3, r2
    12ca:	3340      	adds	r3, #64	; 0x40
    12cc:	4602      	mov	r2, r0
    12ce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    12d0:	bf00      	nop
    12d2:	3708      	adds	r7, #8
    12d4:	46bd      	mov	sp, r7
    12d6:	bc90      	pop	{r4, r7}
    12d8:	4770      	bx	lr

000012da <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    12da:	b480      	push	{r7}
    12dc:	b085      	sub	sp, #20
    12de:	af00      	add	r7, sp, #0
    12e0:	60f8      	str	r0, [r7, #12]
    12e2:	460b      	mov	r3, r1
    12e4:	607a      	str	r2, [r7, #4]
    12e6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12e8:	7afb      	ldrb	r3, [r7, #11]
    12ea:	68fa      	ldr	r2, [r7, #12]
    12ec:	01db      	lsls	r3, r3, #7
    12ee:	4413      	add	r3, r2
    12f0:	3328      	adds	r3, #40	; 0x28
    12f2:	687a      	ldr	r2, [r7, #4]
    12f4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    12f6:	bf00      	nop
    12f8:	3714      	adds	r7, #20
    12fa:	46bd      	mov	sp, r7
    12fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1300:	4770      	bx	lr
	...

00001304 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1304:	b580      	push	{r7, lr}
    1306:	b082      	sub	sp, #8
    1308:	af00      	add	r7, sp, #0
    130a:	4603      	mov	r3, r0
    130c:	6039      	str	r1, [r7, #0]
    130e:	71fb      	strb	r3, [r7, #7]
    1310:	4613      	mov	r3, r2
    1312:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1314:	79bb      	ldrb	r3, [r7, #6]
    1316:	2b01      	cmp	r3, #1
    1318:	d01c      	beq.n	1354 <_gpio_set_direction+0x50>
    131a:	2b02      	cmp	r3, #2
    131c:	d037      	beq.n	138e <_gpio_set_direction+0x8a>
    131e:	2b00      	cmp	r3, #0
    1320:	d14e      	bne.n	13c0 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1322:	79fb      	ldrb	r3, [r7, #7]
    1324:	683a      	ldr	r2, [r7, #0]
    1326:	4619      	mov	r1, r3
    1328:	482a      	ldr	r0, [pc, #168]	; (13d4 <_gpio_set_direction+0xd0>)
    132a:	4b2b      	ldr	r3, [pc, #172]	; (13d8 <_gpio_set_direction+0xd4>)
    132c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    132e:	683b      	ldr	r3, [r7, #0]
    1330:	b29b      	uxth	r3, r3
    1332:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1336:	79fb      	ldrb	r3, [r7, #7]
    1338:	4619      	mov	r1, r3
    133a:	4826      	ldr	r0, [pc, #152]	; (13d4 <_gpio_set_direction+0xd0>)
    133c:	4b27      	ldr	r3, [pc, #156]	; (13dc <_gpio_set_direction+0xd8>)
    133e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1340:	683b      	ldr	r3, [r7, #0]
    1342:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1344:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1348:	79fb      	ldrb	r3, [r7, #7]
    134a:	4619      	mov	r1, r3
    134c:	4821      	ldr	r0, [pc, #132]	; (13d4 <_gpio_set_direction+0xd0>)
    134e:	4b23      	ldr	r3, [pc, #140]	; (13dc <_gpio_set_direction+0xd8>)
    1350:	4798      	blx	r3
		break;
    1352:	e03a      	b.n	13ca <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1354:	79fb      	ldrb	r3, [r7, #7]
    1356:	683a      	ldr	r2, [r7, #0]
    1358:	4619      	mov	r1, r3
    135a:	481e      	ldr	r0, [pc, #120]	; (13d4 <_gpio_set_direction+0xd0>)
    135c:	4b1e      	ldr	r3, [pc, #120]	; (13d8 <_gpio_set_direction+0xd4>)
    135e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1360:	683b      	ldr	r3, [r7, #0]
    1362:	b29b      	uxth	r3, r3
    1364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    136c:	79f9      	ldrb	r1, [r7, #7]
    136e:	461a      	mov	r2, r3
    1370:	4818      	ldr	r0, [pc, #96]	; (13d4 <_gpio_set_direction+0xd0>)
    1372:	4b1a      	ldr	r3, [pc, #104]	; (13dc <_gpio_set_direction+0xd8>)
    1374:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1376:	683b      	ldr	r3, [r7, #0]
    1378:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    137a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    137e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1382:	79f9      	ldrb	r1, [r7, #7]
    1384:	461a      	mov	r2, r3
    1386:	4813      	ldr	r0, [pc, #76]	; (13d4 <_gpio_set_direction+0xd0>)
    1388:	4b14      	ldr	r3, [pc, #80]	; (13dc <_gpio_set_direction+0xd8>)
    138a:	4798      	blx	r3
		break;
    138c:	e01d      	b.n	13ca <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    138e:	79fb      	ldrb	r3, [r7, #7]
    1390:	683a      	ldr	r2, [r7, #0]
    1392:	4619      	mov	r1, r3
    1394:	480f      	ldr	r0, [pc, #60]	; (13d4 <_gpio_set_direction+0xd0>)
    1396:	4b12      	ldr	r3, [pc, #72]	; (13e0 <_gpio_set_direction+0xdc>)
    1398:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    139a:	683b      	ldr	r3, [r7, #0]
    139c:	b29b      	uxth	r3, r3
    139e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    13a2:	79fb      	ldrb	r3, [r7, #7]
    13a4:	4619      	mov	r1, r3
    13a6:	480b      	ldr	r0, [pc, #44]	; (13d4 <_gpio_set_direction+0xd0>)
    13a8:	4b0c      	ldr	r3, [pc, #48]	; (13dc <_gpio_set_direction+0xd8>)
    13aa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    13ac:	683b      	ldr	r3, [r7, #0]
    13ae:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    13b0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    13b4:	79fb      	ldrb	r3, [r7, #7]
    13b6:	4619      	mov	r1, r3
    13b8:	4806      	ldr	r0, [pc, #24]	; (13d4 <_gpio_set_direction+0xd0>)
    13ba:	4b08      	ldr	r3, [pc, #32]	; (13dc <_gpio_set_direction+0xd8>)
    13bc:	4798      	blx	r3
		break;
    13be:	e004      	b.n	13ca <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    13c0:	2246      	movs	r2, #70	; 0x46
    13c2:	4908      	ldr	r1, [pc, #32]	; (13e4 <_gpio_set_direction+0xe0>)
    13c4:	2000      	movs	r0, #0
    13c6:	4b08      	ldr	r3, [pc, #32]	; (13e8 <_gpio_set_direction+0xe4>)
    13c8:	4798      	blx	r3
	}
}
    13ca:	bf00      	nop
    13cc:	3708      	adds	r7, #8
    13ce:	46bd      	mov	sp, r7
    13d0:	bd80      	pop	{r7, pc}
    13d2:	bf00      	nop
    13d4:	41008000 	.word	0x41008000
    13d8:	000010c3 	.word	0x000010c3
    13dc:	000012db 	.word	0x000012db
    13e0:	0000109b 	.word	0x0000109b
    13e4:	000112c8 	.word	0x000112c8
    13e8:	00003f79 	.word	0x00003f79

000013ec <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    13ec:	b580      	push	{r7, lr}
    13ee:	b082      	sub	sp, #8
    13f0:	af00      	add	r7, sp, #0
    13f2:	4603      	mov	r3, r0
    13f4:	6039      	str	r1, [r7, #0]
    13f6:	71fb      	strb	r3, [r7, #7]
    13f8:	4613      	mov	r3, r2
    13fa:	71bb      	strb	r3, [r7, #6]
	if (level) {
    13fc:	79bb      	ldrb	r3, [r7, #6]
    13fe:	2b00      	cmp	r3, #0
    1400:	d006      	beq.n	1410 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1402:	79fb      	ldrb	r3, [r7, #7]
    1404:	683a      	ldr	r2, [r7, #0]
    1406:	4619      	mov	r1, r3
    1408:	4806      	ldr	r0, [pc, #24]	; (1424 <_gpio_set_level+0x38>)
    140a:	4b07      	ldr	r3, [pc, #28]	; (1428 <_gpio_set_level+0x3c>)
    140c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    140e:	e005      	b.n	141c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1410:	79fb      	ldrb	r3, [r7, #7]
    1412:	683a      	ldr	r2, [r7, #0]
    1414:	4619      	mov	r1, r3
    1416:	4803      	ldr	r0, [pc, #12]	; (1424 <_gpio_set_level+0x38>)
    1418:	4b04      	ldr	r3, [pc, #16]	; (142c <_gpio_set_level+0x40>)
    141a:	4798      	blx	r3
}
    141c:	bf00      	nop
    141e:	3708      	adds	r7, #8
    1420:	46bd      	mov	sp, r7
    1422:	bd80      	pop	{r7, pc}
    1424:	41008000 	.word	0x41008000
    1428:	000010eb 	.word	0x000010eb
    142c:	00001113 	.word	0x00001113

00001430 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1430:	b580      	push	{r7, lr}
    1432:	b082      	sub	sp, #8
    1434:	af00      	add	r7, sp, #0
    1436:	4603      	mov	r3, r0
    1438:	71fb      	strb	r3, [r7, #7]
    143a:	460b      	mov	r3, r1
    143c:	71bb      	strb	r3, [r7, #6]
    143e:	4613      	mov	r3, r2
    1440:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1442:	797b      	ldrb	r3, [r7, #5]
    1444:	2b01      	cmp	r3, #1
    1446:	d00a      	beq.n	145e <_gpio_set_pin_pull_mode+0x2e>
    1448:	2b02      	cmp	r3, #2
    144a:	d01f      	beq.n	148c <_gpio_set_pin_pull_mode+0x5c>
    144c:	2b00      	cmp	r3, #0
    144e:	d134      	bne.n	14ba <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1450:	79ba      	ldrb	r2, [r7, #6]
    1452:	79fb      	ldrb	r3, [r7, #7]
    1454:	4619      	mov	r1, r3
    1456:	481e      	ldr	r0, [pc, #120]	; (14d0 <_gpio_set_pin_pull_mode+0xa0>)
    1458:	4b1e      	ldr	r3, [pc, #120]	; (14d4 <_gpio_set_pin_pull_mode+0xa4>)
    145a:	4798      	blx	r3
		break;
    145c:	e033      	b.n	14c6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    145e:	79bb      	ldrb	r3, [r7, #6]
    1460:	2201      	movs	r2, #1
    1462:	409a      	lsls	r2, r3
    1464:	79fb      	ldrb	r3, [r7, #7]
    1466:	4619      	mov	r1, r3
    1468:	4819      	ldr	r0, [pc, #100]	; (14d0 <_gpio_set_pin_pull_mode+0xa0>)
    146a:	4b1b      	ldr	r3, [pc, #108]	; (14d8 <_gpio_set_pin_pull_mode+0xa8>)
    146c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    146e:	79ba      	ldrb	r2, [r7, #6]
    1470:	79fb      	ldrb	r3, [r7, #7]
    1472:	4619      	mov	r1, r3
    1474:	4816      	ldr	r0, [pc, #88]	; (14d0 <_gpio_set_pin_pull_mode+0xa0>)
    1476:	4b19      	ldr	r3, [pc, #100]	; (14dc <_gpio_set_pin_pull_mode+0xac>)
    1478:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    147a:	79bb      	ldrb	r3, [r7, #6]
    147c:	2201      	movs	r2, #1
    147e:	409a      	lsls	r2, r3
    1480:	79fb      	ldrb	r3, [r7, #7]
    1482:	4619      	mov	r1, r3
    1484:	4812      	ldr	r0, [pc, #72]	; (14d0 <_gpio_set_pin_pull_mode+0xa0>)
    1486:	4b16      	ldr	r3, [pc, #88]	; (14e0 <_gpio_set_pin_pull_mode+0xb0>)
    1488:	4798      	blx	r3
		break;
    148a:	e01c      	b.n	14c6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    148c:	79bb      	ldrb	r3, [r7, #6]
    148e:	2201      	movs	r2, #1
    1490:	409a      	lsls	r2, r3
    1492:	79fb      	ldrb	r3, [r7, #7]
    1494:	4619      	mov	r1, r3
    1496:	480e      	ldr	r0, [pc, #56]	; (14d0 <_gpio_set_pin_pull_mode+0xa0>)
    1498:	4b0f      	ldr	r3, [pc, #60]	; (14d8 <_gpio_set_pin_pull_mode+0xa8>)
    149a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    149c:	79ba      	ldrb	r2, [r7, #6]
    149e:	79fb      	ldrb	r3, [r7, #7]
    14a0:	4619      	mov	r1, r3
    14a2:	480b      	ldr	r0, [pc, #44]	; (14d0 <_gpio_set_pin_pull_mode+0xa0>)
    14a4:	4b0d      	ldr	r3, [pc, #52]	; (14dc <_gpio_set_pin_pull_mode+0xac>)
    14a6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    14a8:	79bb      	ldrb	r3, [r7, #6]
    14aa:	2201      	movs	r2, #1
    14ac:	409a      	lsls	r2, r3
    14ae:	79fb      	ldrb	r3, [r7, #7]
    14b0:	4619      	mov	r1, r3
    14b2:	4807      	ldr	r0, [pc, #28]	; (14d0 <_gpio_set_pin_pull_mode+0xa0>)
    14b4:	4b0b      	ldr	r3, [pc, #44]	; (14e4 <_gpio_set_pin_pull_mode+0xb4>)
    14b6:	4798      	blx	r3
		break;
    14b8:	e005      	b.n	14c6 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    14ba:	2289      	movs	r2, #137	; 0x89
    14bc:	490a      	ldr	r1, [pc, #40]	; (14e8 <_gpio_set_pin_pull_mode+0xb8>)
    14be:	2000      	movs	r0, #0
    14c0:	4b0a      	ldr	r3, [pc, #40]	; (14ec <_gpio_set_pin_pull_mode+0xbc>)
    14c2:	4798      	blx	r3
		break;
    14c4:	bf00      	nop
	}
}
    14c6:	bf00      	nop
    14c8:	3708      	adds	r7, #8
    14ca:	46bd      	mov	sp, r7
    14cc:	bd80      	pop	{r7, pc}
    14ce:	bf00      	nop
    14d0:	41008000 	.word	0x41008000
    14d4:	00001297 	.word	0x00001297
    14d8:	000010c3 	.word	0x000010c3
    14dc:	00001253 	.word	0x00001253
    14e0:	000010eb 	.word	0x000010eb
    14e4:	00001113 	.word	0x00001113
    14e8:	000112c8 	.word	0x000112c8
    14ec:	00003f79 	.word	0x00003f79

000014f0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    14f0:	b590      	push	{r4, r7, lr}
    14f2:	b085      	sub	sp, #20
    14f4:	af00      	add	r7, sp, #0
    14f6:	6078      	str	r0, [r7, #4]
    14f8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    14fa:	687b      	ldr	r3, [r7, #4]
    14fc:	095b      	lsrs	r3, r3, #5
    14fe:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1500:	687b      	ldr	r3, [r7, #4]
    1502:	b2db      	uxtb	r3, r3
    1504:	f003 031f 	and.w	r3, r3, #31
    1508:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    150a:	683b      	ldr	r3, [r7, #0]
    150c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1510:	d106      	bne.n	1520 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1512:	7bba      	ldrb	r2, [r7, #14]
    1514:	7bf9      	ldrb	r1, [r7, #15]
    1516:	2300      	movs	r3, #0
    1518:	4812      	ldr	r0, [pc, #72]	; (1564 <_gpio_set_pin_function+0x74>)
    151a:	4c13      	ldr	r4, [pc, #76]	; (1568 <_gpio_set_pin_function+0x78>)
    151c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    151e:	e01d      	b.n	155c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1520:	7bba      	ldrb	r2, [r7, #14]
    1522:	7bf9      	ldrb	r1, [r7, #15]
    1524:	2301      	movs	r3, #1
    1526:	480f      	ldr	r0, [pc, #60]	; (1564 <_gpio_set_pin_function+0x74>)
    1528:	4c0f      	ldr	r4, [pc, #60]	; (1568 <_gpio_set_pin_function+0x78>)
    152a:	47a0      	blx	r4
		if (pin & 1) {
    152c:	7bbb      	ldrb	r3, [r7, #14]
    152e:	f003 0301 	and.w	r3, r3, #1
    1532:	2b00      	cmp	r3, #0
    1534:	d009      	beq.n	154a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1536:	7bbb      	ldrb	r3, [r7, #14]
    1538:	085b      	lsrs	r3, r3, #1
    153a:	b2da      	uxtb	r2, r3
    153c:	683b      	ldr	r3, [r7, #0]
    153e:	b2db      	uxtb	r3, r3
    1540:	7bf9      	ldrb	r1, [r7, #15]
    1542:	4808      	ldr	r0, [pc, #32]	; (1564 <_gpio_set_pin_function+0x74>)
    1544:	4c09      	ldr	r4, [pc, #36]	; (156c <_gpio_set_pin_function+0x7c>)
    1546:	47a0      	blx	r4
}
    1548:	e008      	b.n	155c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    154a:	7bbb      	ldrb	r3, [r7, #14]
    154c:	085b      	lsrs	r3, r3, #1
    154e:	b2da      	uxtb	r2, r3
    1550:	683b      	ldr	r3, [r7, #0]
    1552:	b2db      	uxtb	r3, r3
    1554:	7bf9      	ldrb	r1, [r7, #15]
    1556:	4803      	ldr	r0, [pc, #12]	; (1564 <_gpio_set_pin_function+0x74>)
    1558:	4c05      	ldr	r4, [pc, #20]	; (1570 <_gpio_set_pin_function+0x80>)
    155a:	47a0      	blx	r4
}
    155c:	bf00      	nop
    155e:	3714      	adds	r7, #20
    1560:	46bd      	mov	sp, r7
    1562:	bd90      	pop	{r4, r7, pc}
    1564:	41008000 	.word	0x41008000
    1568:	000011f9 	.word	0x000011f9
    156c:	0000119b 	.word	0x0000119b
    1570:	0000113b 	.word	0x0000113b

00001574 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1574:	b580      	push	{r7, lr}
    1576:	b082      	sub	sp, #8
    1578:	af00      	add	r7, sp, #0
    157a:	4603      	mov	r3, r0
    157c:	460a      	mov	r2, r1
    157e:	71fb      	strb	r3, [r7, #7]
    1580:	4613      	mov	r3, r2
    1582:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1584:	79fb      	ldrb	r3, [r7, #7]
    1586:	095b      	lsrs	r3, r3, #5
    1588:	b2d8      	uxtb	r0, r3
    158a:	79fb      	ldrb	r3, [r7, #7]
    158c:	f003 031f 	and.w	r3, r3, #31
    1590:	b2db      	uxtb	r3, r3
    1592:	79ba      	ldrb	r2, [r7, #6]
    1594:	4619      	mov	r1, r3
    1596:	4b03      	ldr	r3, [pc, #12]	; (15a4 <gpio_set_pin_pull_mode+0x30>)
    1598:	4798      	blx	r3
}
    159a:	bf00      	nop
    159c:	3708      	adds	r7, #8
    159e:	46bd      	mov	sp, r7
    15a0:	bd80      	pop	{r7, pc}
    15a2:	bf00      	nop
    15a4:	00001431 	.word	0x00001431

000015a8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    15a8:	b580      	push	{r7, lr}
    15aa:	b082      	sub	sp, #8
    15ac:	af00      	add	r7, sp, #0
    15ae:	6078      	str	r0, [r7, #4]
    15b0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    15b2:	6839      	ldr	r1, [r7, #0]
    15b4:	6878      	ldr	r0, [r7, #4]
    15b6:	4b03      	ldr	r3, [pc, #12]	; (15c4 <gpio_set_pin_function+0x1c>)
    15b8:	4798      	blx	r3
}
    15ba:	bf00      	nop
    15bc:	3708      	adds	r7, #8
    15be:	46bd      	mov	sp, r7
    15c0:	bd80      	pop	{r7, pc}
    15c2:	bf00      	nop
    15c4:	000014f1 	.word	0x000014f1

000015c8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    15c8:	b580      	push	{r7, lr}
    15ca:	b082      	sub	sp, #8
    15cc:	af00      	add	r7, sp, #0
    15ce:	4603      	mov	r3, r0
    15d0:	460a      	mov	r2, r1
    15d2:	71fb      	strb	r3, [r7, #7]
    15d4:	4613      	mov	r3, r2
    15d6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    15d8:	79fb      	ldrb	r3, [r7, #7]
    15da:	095b      	lsrs	r3, r3, #5
    15dc:	b2d8      	uxtb	r0, r3
    15de:	79fb      	ldrb	r3, [r7, #7]
    15e0:	f003 031f 	and.w	r3, r3, #31
    15e4:	2201      	movs	r2, #1
    15e6:	fa02 f303 	lsl.w	r3, r2, r3
    15ea:	79ba      	ldrb	r2, [r7, #6]
    15ec:	4619      	mov	r1, r3
    15ee:	4b03      	ldr	r3, [pc, #12]	; (15fc <gpio_set_pin_direction+0x34>)
    15f0:	4798      	blx	r3
}
    15f2:	bf00      	nop
    15f4:	3708      	adds	r7, #8
    15f6:	46bd      	mov	sp, r7
    15f8:	bd80      	pop	{r7, pc}
    15fa:	bf00      	nop
    15fc:	00001305 	.word	0x00001305

00001600 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1600:	b580      	push	{r7, lr}
    1602:	b082      	sub	sp, #8
    1604:	af00      	add	r7, sp, #0
    1606:	4603      	mov	r3, r0
    1608:	460a      	mov	r2, r1
    160a:	71fb      	strb	r3, [r7, #7]
    160c:	4613      	mov	r3, r2
    160e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1610:	79fb      	ldrb	r3, [r7, #7]
    1612:	095b      	lsrs	r3, r3, #5
    1614:	b2d8      	uxtb	r0, r3
    1616:	79fb      	ldrb	r3, [r7, #7]
    1618:	f003 031f 	and.w	r3, r3, #31
    161c:	2201      	movs	r2, #1
    161e:	fa02 f303 	lsl.w	r3, r2, r3
    1622:	79ba      	ldrb	r2, [r7, #6]
    1624:	4619      	mov	r1, r3
    1626:	4b03      	ldr	r3, [pc, #12]	; (1634 <gpio_set_pin_level+0x34>)
    1628:	4798      	blx	r3
}
    162a:	bf00      	nop
    162c:	3708      	adds	r7, #8
    162e:	46bd      	mov	sp, r7
    1630:	bd80      	pop	{r7, pc}
    1632:	bf00      	nop
    1634:	000013ed 	.word	0x000013ed

00001638 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1638:	b580      	push	{r7, lr}
    163a:	af00      	add	r7, sp, #0
	_init_chip();
    163c:	4b01      	ldr	r3, [pc, #4]	; (1644 <init_mcu+0xc>)
    163e:	4798      	blx	r3
}
    1640:	bf00      	nop
    1642:	bd80      	pop	{r7, pc}
    1644:	00004b81 	.word	0x00004b81

00001648 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1648:	b580      	push	{r7, lr}
    164a:	b082      	sub	sp, #8
    164c:	af00      	add	r7, sp, #0
    164e:	6078      	str	r0, [r7, #4]
    1650:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1652:	687b      	ldr	r3, [r7, #4]
    1654:	2b00      	cmp	r3, #0
    1656:	d004      	beq.n	1662 <wdt_init+0x1a>
    1658:	683b      	ldr	r3, [r7, #0]
    165a:	2b00      	cmp	r3, #0
    165c:	d001      	beq.n	1662 <wdt_init+0x1a>
    165e:	2301      	movs	r3, #1
    1660:	e000      	b.n	1664 <wdt_init+0x1c>
    1662:	2300      	movs	r3, #0
    1664:	f003 0301 	and.w	r3, r3, #1
    1668:	b2db      	uxtb	r3, r3
    166a:	2248      	movs	r2, #72	; 0x48
    166c:	4907      	ldr	r1, [pc, #28]	; (168c <wdt_init+0x44>)
    166e:	4618      	mov	r0, r3
    1670:	4b07      	ldr	r3, [pc, #28]	; (1690 <wdt_init+0x48>)
    1672:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1674:	687b      	ldr	r3, [r7, #4]
    1676:	683a      	ldr	r2, [r7, #0]
    1678:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    167a:	687b      	ldr	r3, [r7, #4]
    167c:	4618      	mov	r0, r3
    167e:	4b05      	ldr	r3, [pc, #20]	; (1694 <wdt_init+0x4c>)
    1680:	4798      	blx	r3
    1682:	4603      	mov	r3, r0
}
    1684:	4618      	mov	r0, r3
    1686:	3708      	adds	r7, #8
    1688:	46bd      	mov	sp, r7
    168a:	bd80      	pop	{r7, pc}
    168c:	000112e4 	.word	0x000112e4
    1690:	00003f79 	.word	0x00003f79
    1694:	0000b22d 	.word	0x0000b22d

00001698 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1698:	b580      	push	{r7, lr}
    169a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    169c:	4804      	ldr	r0, [pc, #16]	; (16b0 <CRC_CALC_init+0x18>)
    169e:	4b05      	ldr	r3, [pc, #20]	; (16b4 <CRC_CALC_init+0x1c>)
    16a0:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    16a2:	4905      	ldr	r1, [pc, #20]	; (16b8 <CRC_CALC_init+0x20>)
    16a4:	4805      	ldr	r0, [pc, #20]	; (16bc <CRC_CALC_init+0x24>)
    16a6:	4b06      	ldr	r3, [pc, #24]	; (16c0 <CRC_CALC_init+0x28>)
    16a8:	4798      	blx	r3
}
    16aa:	bf00      	nop
    16ac:	bd80      	pop	{r7, pc}
    16ae:	bf00      	nop
    16b0:	40000800 	.word	0x40000800
    16b4:	00000f3b 	.word	0x00000f3b
    16b8:	41002000 	.word	0x41002000
    16bc:	20004fec 	.word	0x20004fec
    16c0:	000025a9 	.word	0x000025a9

000016c4 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    16c4:	b580      	push	{r7, lr}
    16c6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16c8:	2244      	movs	r2, #68	; 0x44
    16ca:	2104      	movs	r1, #4
    16cc:	4825      	ldr	r0, [pc, #148]	; (1764 <EXTERNAL_IRQ_0_init+0xa0>)
    16ce:	4b26      	ldr	r3, [pc, #152]	; (1768 <EXTERNAL_IRQ_0_init+0xa4>)
    16d0:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    16d2:	4826      	ldr	r0, [pc, #152]	; (176c <EXTERNAL_IRQ_0_init+0xa8>)
    16d4:	4b26      	ldr	r3, [pc, #152]	; (1770 <EXTERNAL_IRQ_0_init+0xac>)
    16d6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    16d8:	2101      	movs	r1, #1
    16da:	2040      	movs	r0, #64	; 0x40
    16dc:	4b25      	ldr	r3, [pc, #148]	; (1774 <EXTERNAL_IRQ_0_init+0xb0>)
    16de:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    16e0:	2100      	movs	r1, #0
    16e2:	2040      	movs	r0, #64	; 0x40
    16e4:	4b24      	ldr	r3, [pc, #144]	; (1778 <EXTERNAL_IRQ_0_init+0xb4>)
    16e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    16e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    16ec:	2040      	movs	r0, #64	; 0x40
    16ee:	4b23      	ldr	r3, [pc, #140]	; (177c <EXTERNAL_IRQ_0_init+0xb8>)
    16f0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    16f2:	2101      	movs	r1, #1
    16f4:	2004      	movs	r0, #4
    16f6:	4b1f      	ldr	r3, [pc, #124]	; (1774 <EXTERNAL_IRQ_0_init+0xb0>)
    16f8:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    16fa:	2102      	movs	r1, #2
    16fc:	2004      	movs	r0, #4
    16fe:	4b1e      	ldr	r3, [pc, #120]	; (1778 <EXTERNAL_IRQ_0_init+0xb4>)
    1700:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    1702:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1706:	2004      	movs	r0, #4
    1708:	4b1c      	ldr	r3, [pc, #112]	; (177c <EXTERNAL_IRQ_0_init+0xb8>)
    170a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    170c:	2101      	movs	r1, #1
    170e:	2005      	movs	r0, #5
    1710:	4b18      	ldr	r3, [pc, #96]	; (1774 <EXTERNAL_IRQ_0_init+0xb0>)
    1712:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    1714:	2102      	movs	r1, #2
    1716:	2005      	movs	r0, #5
    1718:	4b17      	ldr	r3, [pc, #92]	; (1778 <EXTERNAL_IRQ_0_init+0xb4>)
    171a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    171c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1720:	2005      	movs	r0, #5
    1722:	4b16      	ldr	r3, [pc, #88]	; (177c <EXTERNAL_IRQ_0_init+0xb8>)
    1724:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    1726:	2101      	movs	r1, #1
    1728:	2056      	movs	r0, #86	; 0x56
    172a:	4b12      	ldr	r3, [pc, #72]	; (1774 <EXTERNAL_IRQ_0_init+0xb0>)
    172c:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    172e:	2102      	movs	r1, #2
    1730:	2056      	movs	r0, #86	; 0x56
    1732:	4b11      	ldr	r3, [pc, #68]	; (1778 <EXTERNAL_IRQ_0_init+0xb4>)
    1734:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    1736:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    173a:	2056      	movs	r0, #86	; 0x56
    173c:	4b0f      	ldr	r3, [pc, #60]	; (177c <EXTERNAL_IRQ_0_init+0xb8>)
    173e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    1740:	2101      	movs	r1, #1
    1742:	2057      	movs	r0, #87	; 0x57
    1744:	4b0b      	ldr	r3, [pc, #44]	; (1774 <EXTERNAL_IRQ_0_init+0xb0>)
    1746:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    1748:	2102      	movs	r1, #2
    174a:	2057      	movs	r0, #87	; 0x57
    174c:	4b0a      	ldr	r3, [pc, #40]	; (1778 <EXTERNAL_IRQ_0_init+0xb4>)
    174e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    1750:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1754:	2057      	movs	r0, #87	; 0x57
    1756:	4b09      	ldr	r3, [pc, #36]	; (177c <EXTERNAL_IRQ_0_init+0xb8>)
    1758:	4798      	blx	r3

	ext_irq_init();
    175a:	4b09      	ldr	r3, [pc, #36]	; (1780 <EXTERNAL_IRQ_0_init+0xbc>)
    175c:	4798      	blx	r3
}
    175e:	bf00      	nop
    1760:	bd80      	pop	{r7, pc}
    1762:	bf00      	nop
    1764:	40001c00 	.word	0x40001c00
    1768:	00000d95 	.word	0x00000d95
    176c:	40000800 	.word	0x40000800
    1770:	00000e7b 	.word	0x00000e7b
    1774:	000015c9 	.word	0x000015c9
    1778:	00001575 	.word	0x00001575
    177c:	000015a9 	.word	0x000015a9
    1780:	00002671 	.word	0x00002671

00001784 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1784:	b580      	push	{r7, lr}
    1786:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1788:	2244      	movs	r2, #68	; 0x44
    178a:	210b      	movs	r1, #11
    178c:	4804      	ldr	r0, [pc, #16]	; (17a0 <EVENT_SYSTEM_0_init+0x1c>)
    178e:	4b05      	ldr	r3, [pc, #20]	; (17a4 <EVENT_SYSTEM_0_init+0x20>)
    1790:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1792:	4805      	ldr	r0, [pc, #20]	; (17a8 <EVENT_SYSTEM_0_init+0x24>)
    1794:	4b05      	ldr	r3, [pc, #20]	; (17ac <EVENT_SYSTEM_0_init+0x28>)
    1796:	4798      	blx	r3

	event_system_init();
    1798:	4b05      	ldr	r3, [pc, #20]	; (17b0 <EVENT_SYSTEM_0_init+0x2c>)
    179a:	4798      	blx	r3
}
    179c:	bf00      	nop
    179e:	bd80      	pop	{r7, pc}
    17a0:	40001c00 	.word	0x40001c00
    17a4:	00000d95 	.word	0x00000d95
    17a8:	40000800 	.word	0x40000800
    17ac:	00000f5b 	.word	0x00000f5b
    17b0:	0000265d 	.word	0x0000265d

000017b4 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    17b4:	b580      	push	{r7, lr}
    17b6:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    17b8:	2101      	movs	r1, #1
    17ba:	202b      	movs	r0, #43	; 0x2b
    17bc:	4b2b      	ldr	r3, [pc, #172]	; (186c <QSPI_N25Q256_PORT_init+0xb8>)
    17be:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    17c0:	2100      	movs	r1, #0
    17c2:	202b      	movs	r0, #43	; 0x2b
    17c4:	4b2a      	ldr	r3, [pc, #168]	; (1870 <QSPI_N25Q256_PORT_init+0xbc>)
    17c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    17c8:	492a      	ldr	r1, [pc, #168]	; (1874 <QSPI_N25Q256_PORT_init+0xc0>)
    17ca:	202b      	movs	r0, #43	; 0x2b
    17cc:	4b2a      	ldr	r3, [pc, #168]	; (1878 <QSPI_N25Q256_PORT_init+0xc4>)
    17ce:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    17d0:	2102      	movs	r1, #2
    17d2:	2008      	movs	r0, #8
    17d4:	4b25      	ldr	r3, [pc, #148]	; (186c <QSPI_N25Q256_PORT_init+0xb8>)
    17d6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    17d8:	2100      	movs	r1, #0
    17da:	2008      	movs	r0, #8
    17dc:	4b27      	ldr	r3, [pc, #156]	; (187c <QSPI_N25Q256_PORT_init+0xc8>)
    17de:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    17e0:	2100      	movs	r1, #0
    17e2:	2008      	movs	r0, #8
    17e4:	4b22      	ldr	r3, [pc, #136]	; (1870 <QSPI_N25Q256_PORT_init+0xbc>)
    17e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    17e8:	4925      	ldr	r1, [pc, #148]	; (1880 <QSPI_N25Q256_PORT_init+0xcc>)
    17ea:	2008      	movs	r0, #8
    17ec:	4b22      	ldr	r3, [pc, #136]	; (1878 <QSPI_N25Q256_PORT_init+0xc4>)
    17ee:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    17f0:	2102      	movs	r1, #2
    17f2:	2009      	movs	r0, #9
    17f4:	4b1d      	ldr	r3, [pc, #116]	; (186c <QSPI_N25Q256_PORT_init+0xb8>)
    17f6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    17f8:	2100      	movs	r1, #0
    17fa:	2009      	movs	r0, #9
    17fc:	4b1f      	ldr	r3, [pc, #124]	; (187c <QSPI_N25Q256_PORT_init+0xc8>)
    17fe:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1800:	2100      	movs	r1, #0
    1802:	2009      	movs	r0, #9
    1804:	4b1a      	ldr	r3, [pc, #104]	; (1870 <QSPI_N25Q256_PORT_init+0xbc>)
    1806:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1808:	491e      	ldr	r1, [pc, #120]	; (1884 <QSPI_N25Q256_PORT_init+0xd0>)
    180a:	2009      	movs	r0, #9
    180c:	4b1a      	ldr	r3, [pc, #104]	; (1878 <QSPI_N25Q256_PORT_init+0xc4>)
    180e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1810:	2102      	movs	r1, #2
    1812:	200a      	movs	r0, #10
    1814:	4b15      	ldr	r3, [pc, #84]	; (186c <QSPI_N25Q256_PORT_init+0xb8>)
    1816:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1818:	2100      	movs	r1, #0
    181a:	200a      	movs	r0, #10
    181c:	4b17      	ldr	r3, [pc, #92]	; (187c <QSPI_N25Q256_PORT_init+0xc8>)
    181e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1820:	2100      	movs	r1, #0
    1822:	200a      	movs	r0, #10
    1824:	4b12      	ldr	r3, [pc, #72]	; (1870 <QSPI_N25Q256_PORT_init+0xbc>)
    1826:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1828:	4917      	ldr	r1, [pc, #92]	; (1888 <QSPI_N25Q256_PORT_init+0xd4>)
    182a:	200a      	movs	r0, #10
    182c:	4b12      	ldr	r3, [pc, #72]	; (1878 <QSPI_N25Q256_PORT_init+0xc4>)
    182e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1830:	2102      	movs	r1, #2
    1832:	200b      	movs	r0, #11
    1834:	4b0d      	ldr	r3, [pc, #52]	; (186c <QSPI_N25Q256_PORT_init+0xb8>)
    1836:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1838:	2100      	movs	r1, #0
    183a:	200b      	movs	r0, #11
    183c:	4b0f      	ldr	r3, [pc, #60]	; (187c <QSPI_N25Q256_PORT_init+0xc8>)
    183e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1840:	2100      	movs	r1, #0
    1842:	200b      	movs	r0, #11
    1844:	4b0a      	ldr	r3, [pc, #40]	; (1870 <QSPI_N25Q256_PORT_init+0xbc>)
    1846:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1848:	4910      	ldr	r1, [pc, #64]	; (188c <QSPI_N25Q256_PORT_init+0xd8>)
    184a:	200b      	movs	r0, #11
    184c:	4b0a      	ldr	r3, [pc, #40]	; (1878 <QSPI_N25Q256_PORT_init+0xc4>)
    184e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1850:	2101      	movs	r1, #1
    1852:	202a      	movs	r0, #42	; 0x2a
    1854:	4b05      	ldr	r3, [pc, #20]	; (186c <QSPI_N25Q256_PORT_init+0xb8>)
    1856:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1858:	2100      	movs	r1, #0
    185a:	202a      	movs	r0, #42	; 0x2a
    185c:	4b04      	ldr	r3, [pc, #16]	; (1870 <QSPI_N25Q256_PORT_init+0xbc>)
    185e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1860:	490b      	ldr	r1, [pc, #44]	; (1890 <QSPI_N25Q256_PORT_init+0xdc>)
    1862:	202a      	movs	r0, #42	; 0x2a
    1864:	4b04      	ldr	r3, [pc, #16]	; (1878 <QSPI_N25Q256_PORT_init+0xc4>)
    1866:	4798      	blx	r3
}
    1868:	bf00      	nop
    186a:	bd80      	pop	{r7, pc}
    186c:	000015c9 	.word	0x000015c9
    1870:	00001575 	.word	0x00001575
    1874:	002b0007 	.word	0x002b0007
    1878:	000015a9 	.word	0x000015a9
    187c:	00001601 	.word	0x00001601
    1880:	00080007 	.word	0x00080007
    1884:	00090007 	.word	0x00090007
    1888:	000a0007 	.word	0x000a0007
    188c:	000b0007 	.word	0x000b0007
    1890:	002a0007 	.word	0x002a0007

00001894 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1894:	b580      	push	{r7, lr}
    1896:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1898:	4805      	ldr	r0, [pc, #20]	; (18b0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    189a:	4b06      	ldr	r3, [pc, #24]	; (18b4 <QSPI_N25Q256_CLOCK_init+0x20>)
    189c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    189e:	4804      	ldr	r0, [pc, #16]	; (18b0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    18a0:	4b05      	ldr	r3, [pc, #20]	; (18b8 <QSPI_N25Q256_CLOCK_init+0x24>)
    18a2:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    18a4:	4802      	ldr	r0, [pc, #8]	; (18b0 <QSPI_N25Q256_CLOCK_init+0x1c>)
    18a6:	4b05      	ldr	r3, [pc, #20]	; (18bc <QSPI_N25Q256_CLOCK_init+0x28>)
    18a8:	4798      	blx	r3
}
    18aa:	bf00      	nop
    18ac:	bd80      	pop	{r7, pc}
    18ae:	bf00      	nop
    18b0:	40000800 	.word	0x40000800
    18b4:	00000ddb 	.word	0x00000ddb
    18b8:	00000e1b 	.word	0x00000e1b
    18bc:	00000ffb 	.word	0x00000ffb

000018c0 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    18c0:	b580      	push	{r7, lr}
    18c2:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    18c4:	4b04      	ldr	r3, [pc, #16]	; (18d8 <QSPI_N25Q256_init+0x18>)
    18c6:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    18c8:	4904      	ldr	r1, [pc, #16]	; (18dc <QSPI_N25Q256_init+0x1c>)
    18ca:	4805      	ldr	r0, [pc, #20]	; (18e0 <QSPI_N25Q256_init+0x20>)
    18cc:	4b05      	ldr	r3, [pc, #20]	; (18e4 <QSPI_N25Q256_init+0x24>)
    18ce:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    18d0:	4b05      	ldr	r3, [pc, #20]	; (18e8 <QSPI_N25Q256_init+0x28>)
    18d2:	4798      	blx	r3
}
    18d4:	bf00      	nop
    18d6:	bd80      	pop	{r7, pc}
    18d8:	00001895 	.word	0x00001895
    18dc:	42003400 	.word	0x42003400
    18e0:	20004e74 	.word	0x20004e74
    18e4:	00002b15 	.word	0x00002b15
    18e8:	000017b5 	.word	0x000017b5

000018ec <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    18ec:	b580      	push	{r7, lr}
    18ee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    18f0:	4802      	ldr	r0, [pc, #8]	; (18fc <DATETIME_CLOCK_CLOCK_init+0x10>)
    18f2:	4b03      	ldr	r3, [pc, #12]	; (1900 <DATETIME_CLOCK_CLOCK_init+0x14>)
    18f4:	4798      	blx	r3
}
    18f6:	bf00      	nop
    18f8:	bd80      	pop	{r7, pc}
    18fa:	bf00      	nop
    18fc:	40000800 	.word	0x40000800
    1900:	00000e5b 	.word	0x00000e5b

00001904 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1904:	b580      	push	{r7, lr}
    1906:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1908:	4b03      	ldr	r3, [pc, #12]	; (1918 <DATETIME_CLOCK_init+0x14>)
    190a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    190c:	4903      	ldr	r1, [pc, #12]	; (191c <DATETIME_CLOCK_init+0x18>)
    190e:	4804      	ldr	r0, [pc, #16]	; (1920 <DATETIME_CLOCK_init+0x1c>)
    1910:	4b04      	ldr	r3, [pc, #16]	; (1924 <DATETIME_CLOCK_init+0x20>)
    1912:	4798      	blx	r3
}
    1914:	bf00      	nop
    1916:	bd80      	pop	{r7, pc}
    1918:	000018ed 	.word	0x000018ed
    191c:	40002400 	.word	0x40002400
    1920:	20004fc8 	.word	0x20004fc8
    1924:	000023fd 	.word	0x000023fd

00001928 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1928:	b580      	push	{r7, lr}
    192a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC17,
    192c:	2100      	movs	r1, #0
    192e:	2051      	movs	r0, #81	; 0x51
    1930:	4b11      	ldr	r3, [pc, #68]	; (1978 <SPI_HI3593_PORT_init+0x50>)
    1932:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC17, GPIO_DIRECTION_OUT);
    1934:	2102      	movs	r1, #2
    1936:	2051      	movs	r0, #81	; 0x51
    1938:	4b10      	ldr	r3, [pc, #64]	; (197c <SPI_HI3593_PORT_init+0x54>)
    193a:	4798      	blx	r3

	gpio_set_pin_function(PC17, PINMUX_PC17D_SERCOM0_PAD0);
    193c:	4910      	ldr	r1, [pc, #64]	; (1980 <SPI_HI3593_PORT_init+0x58>)
    193e:	2051      	movs	r0, #81	; 0x51
    1940:	4b10      	ldr	r3, [pc, #64]	; (1984 <SPI_HI3593_PORT_init+0x5c>)
    1942:	4798      	blx	r3

	gpio_set_pin_level(PC16,
    1944:	2100      	movs	r1, #0
    1946:	2050      	movs	r0, #80	; 0x50
    1948:	4b0b      	ldr	r3, [pc, #44]	; (1978 <SPI_HI3593_PORT_init+0x50>)
    194a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC16, GPIO_DIRECTION_OUT);
    194c:	2102      	movs	r1, #2
    194e:	2050      	movs	r0, #80	; 0x50
    1950:	4b0a      	ldr	r3, [pc, #40]	; (197c <SPI_HI3593_PORT_init+0x54>)
    1952:	4798      	blx	r3

	gpio_set_pin_function(PC16, PINMUX_PC16D_SERCOM0_PAD1);
    1954:	490c      	ldr	r1, [pc, #48]	; (1988 <SPI_HI3593_PORT_init+0x60>)
    1956:	2050      	movs	r0, #80	; 0x50
    1958:	4b0a      	ldr	r3, [pc, #40]	; (1984 <SPI_HI3593_PORT_init+0x5c>)
    195a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
    195c:	2101      	movs	r1, #1
    195e:	2006      	movs	r0, #6
    1960:	4b06      	ldr	r3, [pc, #24]	; (197c <SPI_HI3593_PORT_init+0x54>)
    1962:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
    1964:	2100      	movs	r1, #0
    1966:	2006      	movs	r0, #6
    1968:	4b08      	ldr	r3, [pc, #32]	; (198c <SPI_HI3593_PORT_init+0x64>)
    196a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
    196c:	4908      	ldr	r1, [pc, #32]	; (1990 <SPI_HI3593_PORT_init+0x68>)
    196e:	2006      	movs	r0, #6
    1970:	4b04      	ldr	r3, [pc, #16]	; (1984 <SPI_HI3593_PORT_init+0x5c>)
    1972:	4798      	blx	r3
}
    1974:	bf00      	nop
    1976:	bd80      	pop	{r7, pc}
    1978:	00001601 	.word	0x00001601
    197c:	000015c9 	.word	0x000015c9
    1980:	00510003 	.word	0x00510003
    1984:	000015a9 	.word	0x000015a9
    1988:	00500003 	.word	0x00500003
    198c:	00001575 	.word	0x00001575
    1990:	00060003 	.word	0x00060003

00001994 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1994:	b580      	push	{r7, lr}
    1996:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1998:	2240      	movs	r2, #64	; 0x40
    199a:	2107      	movs	r1, #7
    199c:	4806      	ldr	r0, [pc, #24]	; (19b8 <SPI_HI3593_CLOCK_init+0x24>)
    199e:	4b07      	ldr	r3, [pc, #28]	; (19bc <SPI_HI3593_CLOCK_init+0x28>)
    19a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19a2:	2243      	movs	r2, #67	; 0x43
    19a4:	2103      	movs	r1, #3
    19a6:	4804      	ldr	r0, [pc, #16]	; (19b8 <SPI_HI3593_CLOCK_init+0x24>)
    19a8:	4b04      	ldr	r3, [pc, #16]	; (19bc <SPI_HI3593_CLOCK_init+0x28>)
    19aa:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
    19ac:	4804      	ldr	r0, [pc, #16]	; (19c0 <SPI_HI3593_CLOCK_init+0x2c>)
    19ae:	4b05      	ldr	r3, [pc, #20]	; (19c4 <SPI_HI3593_CLOCK_init+0x30>)
    19b0:	4798      	blx	r3
}
    19b2:	bf00      	nop
    19b4:	bd80      	pop	{r7, pc}
    19b6:	bf00      	nop
    19b8:	40001c00 	.word	0x40001c00
    19bc:	00000d95 	.word	0x00000d95
    19c0:	40000800 	.word	0x40000800
    19c4:	00000e9b 	.word	0x00000e9b

000019c8 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    19c8:	b580      	push	{r7, lr}
    19ca:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    19cc:	4b04      	ldr	r3, [pc, #16]	; (19e0 <SPI_HI3593_init+0x18>)
    19ce:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM0);
    19d0:	4904      	ldr	r1, [pc, #16]	; (19e4 <SPI_HI3593_init+0x1c>)
    19d2:	4805      	ldr	r0, [pc, #20]	; (19e8 <SPI_HI3593_init+0x20>)
    19d4:	4b05      	ldr	r3, [pc, #20]	; (19ec <SPI_HI3593_init+0x24>)
    19d6:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    19d8:	4b05      	ldr	r3, [pc, #20]	; (19f0 <SPI_HI3593_init+0x28>)
    19da:	4798      	blx	r3
}
    19dc:	bf00      	nop
    19de:	bd80      	pop	{r7, pc}
    19e0:	00001995 	.word	0x00001995
    19e4:	40003000 	.word	0x40003000
    19e8:	20004df8 	.word	0x20004df8
    19ec:	00002ff1 	.word	0x00002ff1
    19f0:	00001929 	.word	0x00001929

000019f4 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    19f4:	b580      	push	{r7, lr}
    19f6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    19f8:	2100      	movs	r1, #0
    19fa:	2010      	movs	r0, #16
    19fc:	4b11      	ldr	r3, [pc, #68]	; (1a44 <SPI_MEMORIES_PORT_init+0x50>)
    19fe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    1a00:	2102      	movs	r1, #2
    1a02:	2010      	movs	r0, #16
    1a04:	4b10      	ldr	r3, [pc, #64]	; (1a48 <SPI_MEMORIES_PORT_init+0x54>)
    1a06:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1a08:	4910      	ldr	r1, [pc, #64]	; (1a4c <SPI_MEMORIES_PORT_init+0x58>)
    1a0a:	2010      	movs	r0, #16
    1a0c:	4b10      	ldr	r3, [pc, #64]	; (1a50 <SPI_MEMORIES_PORT_init+0x5c>)
    1a0e:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    1a10:	2100      	movs	r1, #0
    1a12:	2011      	movs	r0, #17
    1a14:	4b0b      	ldr	r3, [pc, #44]	; (1a44 <SPI_MEMORIES_PORT_init+0x50>)
    1a16:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    1a18:	2102      	movs	r1, #2
    1a1a:	2011      	movs	r0, #17
    1a1c:	4b0a      	ldr	r3, [pc, #40]	; (1a48 <SPI_MEMORIES_PORT_init+0x54>)
    1a1e:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1a20:	490c      	ldr	r1, [pc, #48]	; (1a54 <SPI_MEMORIES_PORT_init+0x60>)
    1a22:	2011      	movs	r0, #17
    1a24:	4b0a      	ldr	r3, [pc, #40]	; (1a50 <SPI_MEMORIES_PORT_init+0x5c>)
    1a26:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    1a28:	2101      	movs	r1, #1
    1a2a:	2012      	movs	r0, #18
    1a2c:	4b06      	ldr	r3, [pc, #24]	; (1a48 <SPI_MEMORIES_PORT_init+0x54>)
    1a2e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    1a30:	2100      	movs	r1, #0
    1a32:	2012      	movs	r0, #18
    1a34:	4b08      	ldr	r3, [pc, #32]	; (1a58 <SPI_MEMORIES_PORT_init+0x64>)
    1a36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    1a38:	4908      	ldr	r1, [pc, #32]	; (1a5c <SPI_MEMORIES_PORT_init+0x68>)
    1a3a:	2012      	movs	r0, #18
    1a3c:	4b04      	ldr	r3, [pc, #16]	; (1a50 <SPI_MEMORIES_PORT_init+0x5c>)
    1a3e:	4798      	blx	r3
}
    1a40:	bf00      	nop
    1a42:	bd80      	pop	{r7, pc}
    1a44:	00001601 	.word	0x00001601
    1a48:	000015c9 	.word	0x000015c9
    1a4c:	00100002 	.word	0x00100002
    1a50:	000015a9 	.word	0x000015a9
    1a54:	00110002 	.word	0x00110002
    1a58:	00001575 	.word	0x00001575
    1a5c:	00120002 	.word	0x00120002

00001a60 <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    1a60:	b580      	push	{r7, lr}
    1a62:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a64:	2245      	movs	r2, #69	; 0x45
    1a66:	2108      	movs	r1, #8
    1a68:	4806      	ldr	r0, [pc, #24]	; (1a84 <SPI_MEMORIES_CLOCK_init+0x24>)
    1a6a:	4b07      	ldr	r3, [pc, #28]	; (1a88 <SPI_MEMORIES_CLOCK_init+0x28>)
    1a6c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a6e:	224a      	movs	r2, #74	; 0x4a
    1a70:	2103      	movs	r1, #3
    1a72:	4804      	ldr	r0, [pc, #16]	; (1a84 <SPI_MEMORIES_CLOCK_init+0x24>)
    1a74:	4b04      	ldr	r3, [pc, #16]	; (1a88 <SPI_MEMORIES_CLOCK_init+0x28>)
    1a76:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1a78:	4804      	ldr	r0, [pc, #16]	; (1a8c <SPI_MEMORIES_CLOCK_init+0x2c>)
    1a7a:	4b05      	ldr	r3, [pc, #20]	; (1a90 <SPI_MEMORIES_CLOCK_init+0x30>)
    1a7c:	4798      	blx	r3
}
    1a7e:	bf00      	nop
    1a80:	bd80      	pop	{r7, pc}
    1a82:	bf00      	nop
    1a84:	40001c00 	.word	0x40001c00
    1a88:	00000d95 	.word	0x00000d95
    1a8c:	40000800 	.word	0x40000800
    1a90:	00000ebb 	.word	0x00000ebb

00001a94 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    1a94:	b580      	push	{r7, lr}
    1a96:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    1a98:	4b04      	ldr	r3, [pc, #16]	; (1aac <SPI_MEMORIES_init+0x18>)
    1a9a:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    1a9c:	4904      	ldr	r1, [pc, #16]	; (1ab0 <SPI_MEMORIES_init+0x1c>)
    1a9e:	4805      	ldr	r0, [pc, #20]	; (1ab4 <SPI_MEMORIES_init+0x20>)
    1aa0:	4b05      	ldr	r3, [pc, #20]	; (1ab8 <SPI_MEMORIES_init+0x24>)
    1aa2:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    1aa4:	4b05      	ldr	r3, [pc, #20]	; (1abc <SPI_MEMORIES_init+0x28>)
    1aa6:	4798      	blx	r3
}
    1aa8:	bf00      	nop
    1aaa:	bd80      	pop	{r7, pc}
    1aac:	00001a61 	.word	0x00001a61
    1ab0:	40003400 	.word	0x40003400
    1ab4:	20004de0 	.word	0x20004de0
    1ab8:	00002ff1 	.word	0x00002ff1
    1abc:	000019f5 	.word	0x000019f5

00001ac0 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1ac0:	b580      	push	{r7, lr}
    1ac2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1ac4:	2100      	movs	r1, #0
    1ac6:	203b      	movs	r0, #59	; 0x3b
    1ac8:	4b11      	ldr	r3, [pc, #68]	; (1b10 <SPI_TEMP_PORT_init+0x50>)
    1aca:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1acc:	2102      	movs	r1, #2
    1ace:	203b      	movs	r0, #59	; 0x3b
    1ad0:	4b10      	ldr	r3, [pc, #64]	; (1b14 <SPI_TEMP_PORT_init+0x54>)
    1ad2:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1ad4:	4910      	ldr	r1, [pc, #64]	; (1b18 <SPI_TEMP_PORT_init+0x58>)
    1ad6:	203b      	movs	r0, #59	; 0x3b
    1ad8:	4b10      	ldr	r3, [pc, #64]	; (1b1c <SPI_TEMP_PORT_init+0x5c>)
    1ada:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1adc:	2100      	movs	r1, #0
    1ade:	203a      	movs	r0, #58	; 0x3a
    1ae0:	4b0b      	ldr	r3, [pc, #44]	; (1b10 <SPI_TEMP_PORT_init+0x50>)
    1ae2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1ae4:	2102      	movs	r1, #2
    1ae6:	203a      	movs	r0, #58	; 0x3a
    1ae8:	4b0a      	ldr	r3, [pc, #40]	; (1b14 <SPI_TEMP_PORT_init+0x54>)
    1aea:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1aec:	490c      	ldr	r1, [pc, #48]	; (1b20 <SPI_TEMP_PORT_init+0x60>)
    1aee:	203a      	movs	r0, #58	; 0x3a
    1af0:	4b0a      	ldr	r3, [pc, #40]	; (1b1c <SPI_TEMP_PORT_init+0x5c>)
    1af2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1af4:	2101      	movs	r1, #1
    1af6:	203c      	movs	r0, #60	; 0x3c
    1af8:	4b06      	ldr	r3, [pc, #24]	; (1b14 <SPI_TEMP_PORT_init+0x54>)
    1afa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1afc:	2100      	movs	r1, #0
    1afe:	203c      	movs	r0, #60	; 0x3c
    1b00:	4b08      	ldr	r3, [pc, #32]	; (1b24 <SPI_TEMP_PORT_init+0x64>)
    1b02:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1b04:	4908      	ldr	r1, [pc, #32]	; (1b28 <SPI_TEMP_PORT_init+0x68>)
    1b06:	203c      	movs	r0, #60	; 0x3c
    1b08:	4b04      	ldr	r3, [pc, #16]	; (1b1c <SPI_TEMP_PORT_init+0x5c>)
    1b0a:	4798      	blx	r3
}
    1b0c:	bf00      	nop
    1b0e:	bd80      	pop	{r7, pc}
    1b10:	00001601 	.word	0x00001601
    1b14:	000015c9 	.word	0x000015c9
    1b18:	003b0003 	.word	0x003b0003
    1b1c:	000015a9 	.word	0x000015a9
    1b20:	003a0003 	.word	0x003a0003
    1b24:	00001575 	.word	0x00001575
    1b28:	003c0003 	.word	0x003c0003

00001b2c <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1b2c:	b580      	push	{r7, lr}
    1b2e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b30:	2240      	movs	r2, #64	; 0x40
    1b32:	2122      	movs	r1, #34	; 0x22
    1b34:	4806      	ldr	r0, [pc, #24]	; (1b50 <SPI_TEMP_CLOCK_init+0x24>)
    1b36:	4b07      	ldr	r3, [pc, #28]	; (1b54 <SPI_TEMP_CLOCK_init+0x28>)
    1b38:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b3a:	2243      	movs	r2, #67	; 0x43
    1b3c:	2103      	movs	r1, #3
    1b3e:	4804      	ldr	r0, [pc, #16]	; (1b50 <SPI_TEMP_CLOCK_init+0x24>)
    1b40:	4b04      	ldr	r3, [pc, #16]	; (1b54 <SPI_TEMP_CLOCK_init+0x28>)
    1b42:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1b44:	4804      	ldr	r0, [pc, #16]	; (1b58 <SPI_TEMP_CLOCK_init+0x2c>)
    1b46:	4b05      	ldr	r3, [pc, #20]	; (1b5c <SPI_TEMP_CLOCK_init+0x30>)
    1b48:	4798      	blx	r3
}
    1b4a:	bf00      	nop
    1b4c:	bd80      	pop	{r7, pc}
    1b4e:	bf00      	nop
    1b50:	40001c00 	.word	0x40001c00
    1b54:	00000d95 	.word	0x00000d95
    1b58:	40000800 	.word	0x40000800
    1b5c:	0000101b 	.word	0x0000101b

00001b60 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1b60:	b580      	push	{r7, lr}
    1b62:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1b64:	4b05      	ldr	r3, [pc, #20]	; (1b7c <SPI_TEMP_init+0x1c>)
    1b66:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    1b68:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1b6c:	4804      	ldr	r0, [pc, #16]	; (1b80 <SPI_TEMP_init+0x20>)
    1b6e:	4b05      	ldr	r3, [pc, #20]	; (1b84 <SPI_TEMP_init+0x24>)
    1b70:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1b72:	4b05      	ldr	r3, [pc, #20]	; (1b88 <SPI_TEMP_init+0x28>)
    1b74:	4798      	blx	r3
}
    1b76:	bf00      	nop
    1b78:	bd80      	pop	{r7, pc}
    1b7a:	bf00      	nop
    1b7c:	00001b2d 	.word	0x00001b2d
    1b80:	20004e10 	.word	0x20004e10
    1b84:	00002e3d 	.word	0x00002e3d
    1b88:	00001ac1 	.word	0x00001ac1

00001b8c <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    1b8c:	b580      	push	{r7, lr}
    1b8e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1b90:	2100      	movs	r1, #0
    1b92:	2017      	movs	r0, #23
    1b94:	4b07      	ldr	r3, [pc, #28]	; (1bb4 <I2C_EXPANDER_PORT_init+0x28>)
    1b96:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1b98:	4907      	ldr	r1, [pc, #28]	; (1bb8 <I2C_EXPANDER_PORT_init+0x2c>)
    1b9a:	2017      	movs	r0, #23
    1b9c:	4b07      	ldr	r3, [pc, #28]	; (1bbc <I2C_EXPANDER_PORT_init+0x30>)
    1b9e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1ba0:	2100      	movs	r1, #0
    1ba2:	2016      	movs	r0, #22
    1ba4:	4b03      	ldr	r3, [pc, #12]	; (1bb4 <I2C_EXPANDER_PORT_init+0x28>)
    1ba6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1ba8:	4905      	ldr	r1, [pc, #20]	; (1bc0 <I2C_EXPANDER_PORT_init+0x34>)
    1baa:	2016      	movs	r0, #22
    1bac:	4b03      	ldr	r3, [pc, #12]	; (1bbc <I2C_EXPANDER_PORT_init+0x30>)
    1bae:	4798      	blx	r3
}
    1bb0:	bf00      	nop
    1bb2:	bd80      	pop	{r7, pc}
    1bb4:	00001575 	.word	0x00001575
    1bb8:	00170003 	.word	0x00170003
    1bbc:	000015a9 	.word	0x000015a9
    1bc0:	00160003 	.word	0x00160003

00001bc4 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    1bc4:	b580      	push	{r7, lr}
    1bc6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1bc8:	2242      	movs	r2, #66	; 0x42
    1bca:	2123      	movs	r1, #35	; 0x23
    1bcc:	4806      	ldr	r0, [pc, #24]	; (1be8 <I2C_EXPANDER_CLOCK_init+0x24>)
    1bce:	4b07      	ldr	r3, [pc, #28]	; (1bec <I2C_EXPANDER_CLOCK_init+0x28>)
    1bd0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1bd2:	2246      	movs	r2, #70	; 0x46
    1bd4:	2103      	movs	r1, #3
    1bd6:	4804      	ldr	r0, [pc, #16]	; (1be8 <I2C_EXPANDER_CLOCK_init+0x24>)
    1bd8:	4b04      	ldr	r3, [pc, #16]	; (1bec <I2C_EXPANDER_CLOCK_init+0x28>)
    1bda:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1bdc:	4804      	ldr	r0, [pc, #16]	; (1bf0 <I2C_EXPANDER_CLOCK_init+0x2c>)
    1bde:	4b05      	ldr	r3, [pc, #20]	; (1bf4 <I2C_EXPANDER_CLOCK_init+0x30>)
    1be0:	4798      	blx	r3
}
    1be2:	bf00      	nop
    1be4:	bd80      	pop	{r7, pc}
    1be6:	bf00      	nop
    1be8:	40001c00 	.word	0x40001c00
    1bec:	00000d95 	.word	0x00000d95
    1bf0:	40000800 	.word	0x40000800
    1bf4:	0000103b 	.word	0x0000103b

00001bf8 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1bf8:	b580      	push	{r7, lr}
    1bfa:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1bfc:	4b04      	ldr	r3, [pc, #16]	; (1c10 <I2C_EXPANDER_init+0x18>)
    1bfe:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    1c00:	4904      	ldr	r1, [pc, #16]	; (1c14 <I2C_EXPANDER_init+0x1c>)
    1c02:	4805      	ldr	r0, [pc, #20]	; (1c18 <I2C_EXPANDER_init+0x20>)
    1c04:	4b05      	ldr	r3, [pc, #20]	; (1c1c <I2C_EXPANDER_init+0x24>)
    1c06:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1c08:	4b05      	ldr	r3, [pc, #20]	; (1c20 <I2C_EXPANDER_init+0x28>)
    1c0a:	4798      	blx	r3
}
    1c0c:	bf00      	nop
    1c0e:	bd80      	pop	{r7, pc}
    1c10:	00001bc5 	.word	0x00001bc5
    1c14:	43000400 	.word	0x43000400
    1c18:	20004f2c 	.word	0x20004f2c
    1c1c:	000029d5 	.word	0x000029d5
    1c20:	00001b8d 	.word	0x00001b8d

00001c24 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1c24:	b580      	push	{r7, lr}
    1c26:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1c28:	2100      	movs	r1, #0
    1c2a:	2068      	movs	r0, #104	; 0x68
    1c2c:	4b07      	ldr	r3, [pc, #28]	; (1c4c <I2C_EEPROM_PORT_init+0x28>)
    1c2e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1c30:	4907      	ldr	r1, [pc, #28]	; (1c50 <I2C_EEPROM_PORT_init+0x2c>)
    1c32:	2068      	movs	r0, #104	; 0x68
    1c34:	4b07      	ldr	r3, [pc, #28]	; (1c54 <I2C_EEPROM_PORT_init+0x30>)
    1c36:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1c38:	2100      	movs	r1, #0
    1c3a:	2069      	movs	r0, #105	; 0x69
    1c3c:	4b03      	ldr	r3, [pc, #12]	; (1c4c <I2C_EEPROM_PORT_init+0x28>)
    1c3e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1c40:	4905      	ldr	r1, [pc, #20]	; (1c58 <I2C_EEPROM_PORT_init+0x34>)
    1c42:	2069      	movs	r0, #105	; 0x69
    1c44:	4b03      	ldr	r3, [pc, #12]	; (1c54 <I2C_EEPROM_PORT_init+0x30>)
    1c46:	4798      	blx	r3
}
    1c48:	bf00      	nop
    1c4a:	bd80      	pop	{r7, pc}
    1c4c:	00001575 	.word	0x00001575
    1c50:	00680002 	.word	0x00680002
    1c54:	000015a9 	.word	0x000015a9
    1c58:	00690002 	.word	0x00690002

00001c5c <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1c5c:	b580      	push	{r7, lr}
    1c5e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c60:	2242      	movs	r2, #66	; 0x42
    1c62:	2125      	movs	r1, #37	; 0x25
    1c64:	4806      	ldr	r0, [pc, #24]	; (1c80 <I2C_EEPROM_CLOCK_init+0x24>)
    1c66:	4b07      	ldr	r3, [pc, #28]	; (1c84 <I2C_EEPROM_CLOCK_init+0x28>)
    1c68:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1c6a:	2243      	movs	r2, #67	; 0x43
    1c6c:	2103      	movs	r1, #3
    1c6e:	4804      	ldr	r0, [pc, #16]	; (1c80 <I2C_EEPROM_CLOCK_init+0x24>)
    1c70:	4b04      	ldr	r3, [pc, #16]	; (1c84 <I2C_EEPROM_CLOCK_init+0x28>)
    1c72:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1c74:	4804      	ldr	r0, [pc, #16]	; (1c88 <I2C_EEPROM_CLOCK_init+0x2c>)
    1c76:	4b05      	ldr	r3, [pc, #20]	; (1c8c <I2C_EEPROM_CLOCK_init+0x30>)
    1c78:	4798      	blx	r3
}
    1c7a:	bf00      	nop
    1c7c:	bd80      	pop	{r7, pc}
    1c7e:	bf00      	nop
    1c80:	40001c00 	.word	0x40001c00
    1c84:	00000d95 	.word	0x00000d95
    1c88:	40000800 	.word	0x40000800
    1c8c:	0000105b 	.word	0x0000105b

00001c90 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    1c90:	b580      	push	{r7, lr}
    1c92:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    1c94:	4b04      	ldr	r3, [pc, #16]	; (1ca8 <I2C_EEPROM_init+0x18>)
    1c96:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    1c98:	4904      	ldr	r1, [pc, #16]	; (1cac <I2C_EEPROM_init+0x1c>)
    1c9a:	4805      	ldr	r0, [pc, #20]	; (1cb0 <I2C_EEPROM_init+0x20>)
    1c9c:	4b05      	ldr	r3, [pc, #20]	; (1cb4 <I2C_EEPROM_init+0x24>)
    1c9e:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    1ca0:	4b05      	ldr	r3, [pc, #20]	; (1cb8 <I2C_EEPROM_init+0x28>)
    1ca2:	4798      	blx	r3
}
    1ca4:	bf00      	nop
    1ca6:	bd80      	pop	{r7, pc}
    1ca8:	00001c5d 	.word	0x00001c5d
    1cac:	43000c00 	.word	0x43000c00
    1cb0:	20004f88 	.word	0x20004f88
    1cb4:	000029d5 	.word	0x000029d5
    1cb8:	00001c25 	.word	0x00001c25

00001cbc <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    1cbc:	b580      	push	{r7, lr}
    1cbe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    1cc0:	4808      	ldr	r0, [pc, #32]	; (1ce4 <TIMER_USB_init+0x28>)
    1cc2:	4b09      	ldr	r3, [pc, #36]	; (1ce8 <TIMER_USB_init+0x2c>)
    1cc4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1cc6:	2243      	movs	r2, #67	; 0x43
    1cc8:	2109      	movs	r1, #9
    1cca:	4808      	ldr	r0, [pc, #32]	; (1cec <TIMER_USB_init+0x30>)
    1ccc:	4b08      	ldr	r3, [pc, #32]	; (1cf0 <TIMER_USB_init+0x34>)
    1cce:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    1cd0:	4b08      	ldr	r3, [pc, #32]	; (1cf4 <TIMER_USB_init+0x38>)
    1cd2:	4798      	blx	r3
    1cd4:	4603      	mov	r3, r0
    1cd6:	461a      	mov	r2, r3
    1cd8:	4907      	ldr	r1, [pc, #28]	; (1cf8 <TIMER_USB_init+0x3c>)
    1cda:	4808      	ldr	r0, [pc, #32]	; (1cfc <TIMER_USB_init+0x40>)
    1cdc:	4b08      	ldr	r3, [pc, #32]	; (1d00 <TIMER_USB_init+0x44>)
    1cde:	4798      	blx	r3
}
    1ce0:	bf00      	nop
    1ce2:	bd80      	pop	{r7, pc}
    1ce4:	40000800 	.word	0x40000800
    1ce8:	00000edb 	.word	0x00000edb
    1cec:	40001c00 	.word	0x40001c00
    1cf0:	00000d95 	.word	0x00000d95
    1cf4:	00008699 	.word	0x00008699
    1cf8:	40003800 	.word	0x40003800
    1cfc:	20004f10 	.word	0x20004f10
    1d00:	000031c1 	.word	0x000031c1

00001d04 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1d04:	b580      	push	{r7, lr}
    1d06:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    1d08:	4808      	ldr	r0, [pc, #32]	; (1d2c <TIMER_EVENT_init+0x28>)
    1d0a:	4b09      	ldr	r3, [pc, #36]	; (1d30 <TIMER_EVENT_init+0x2c>)
    1d0c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d0e:	2245      	movs	r2, #69	; 0x45
    1d10:	2109      	movs	r1, #9
    1d12:	4808      	ldr	r0, [pc, #32]	; (1d34 <TIMER_EVENT_init+0x30>)
    1d14:	4b08      	ldr	r3, [pc, #32]	; (1d38 <TIMER_EVENT_init+0x34>)
    1d16:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    1d18:	4b08      	ldr	r3, [pc, #32]	; (1d3c <TIMER_EVENT_init+0x38>)
    1d1a:	4798      	blx	r3
    1d1c:	4603      	mov	r3, r0
    1d1e:	461a      	mov	r2, r3
    1d20:	4907      	ldr	r1, [pc, #28]	; (1d40 <TIMER_EVENT_init+0x3c>)
    1d22:	4808      	ldr	r0, [pc, #32]	; (1d44 <TIMER_EVENT_init+0x40>)
    1d24:	4b08      	ldr	r3, [pc, #32]	; (1d48 <TIMER_EVENT_init+0x44>)
    1d26:	4798      	blx	r3
}
    1d28:	bf00      	nop
    1d2a:	bd80      	pop	{r7, pc}
    1d2c:	40000800 	.word	0x40000800
    1d30:	00000efb 	.word	0x00000efb
    1d34:	40001c00 	.word	0x40001c00
    1d38:	00000d95 	.word	0x00000d95
    1d3c:	00008699 	.word	0x00008699
    1d40:	40003c00 	.word	0x40003c00
    1d44:	20004e78 	.word	0x20004e78
    1d48:	000031c1 	.word	0x000031c1

00001d4c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1d4c:	b580      	push	{r7, lr}
    1d4e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1d50:	4808      	ldr	r0, [pc, #32]	; (1d74 <TIMER_ARINC_init+0x28>)
    1d52:	4b09      	ldr	r3, [pc, #36]	; (1d78 <TIMER_ARINC_init+0x2c>)
    1d54:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d56:	2244      	movs	r2, #68	; 0x44
    1d58:	211a      	movs	r1, #26
    1d5a:	4808      	ldr	r0, [pc, #32]	; (1d7c <TIMER_ARINC_init+0x30>)
    1d5c:	4b08      	ldr	r3, [pc, #32]	; (1d80 <TIMER_ARINC_init+0x34>)
    1d5e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1d60:	4b08      	ldr	r3, [pc, #32]	; (1d84 <TIMER_ARINC_init+0x38>)
    1d62:	4798      	blx	r3
    1d64:	4603      	mov	r3, r0
    1d66:	461a      	mov	r2, r3
    1d68:	4907      	ldr	r1, [pc, #28]	; (1d88 <TIMER_ARINC_init+0x3c>)
    1d6a:	4808      	ldr	r0, [pc, #32]	; (1d8c <TIMER_ARINC_init+0x40>)
    1d6c:	4b08      	ldr	r3, [pc, #32]	; (1d90 <TIMER_ARINC_init+0x44>)
    1d6e:	4798      	blx	r3
}
    1d70:	bf00      	nop
    1d72:	bd80      	pop	{r7, pc}
    1d74:	40000800 	.word	0x40000800
    1d78:	00000f7b 	.word	0x00000f7b
    1d7c:	40001c00 	.word	0x40001c00
    1d80:	00000d95 	.word	0x00000d95
    1d84:	00008699 	.word	0x00008699
    1d88:	4101a000 	.word	0x4101a000
    1d8c:	20004ef4 	.word	0x20004ef4
    1d90:	000031c1 	.word	0x000031c1

00001d94 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    1d94:	b580      	push	{r7, lr}
    1d96:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    1d98:	4808      	ldr	r0, [pc, #32]	; (1dbc <TIMER_HVAC_init+0x28>)
    1d9a:	4b09      	ldr	r3, [pc, #36]	; (1dc0 <TIMER_HVAC_init+0x2c>)
    1d9c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d9e:	2245      	movs	r2, #69	; 0x45
    1da0:	211a      	movs	r1, #26
    1da2:	4808      	ldr	r0, [pc, #32]	; (1dc4 <TIMER_HVAC_init+0x30>)
    1da4:	4b08      	ldr	r3, [pc, #32]	; (1dc8 <TIMER_HVAC_init+0x34>)
    1da6:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    1da8:	4b08      	ldr	r3, [pc, #32]	; (1dcc <TIMER_HVAC_init+0x38>)
    1daa:	4798      	blx	r3
    1dac:	4603      	mov	r3, r0
    1dae:	461a      	mov	r2, r3
    1db0:	4907      	ldr	r1, [pc, #28]	; (1dd0 <TIMER_HVAC_init+0x3c>)
    1db2:	4808      	ldr	r0, [pc, #32]	; (1dd4 <TIMER_HVAC_init+0x40>)
    1db4:	4b08      	ldr	r3, [pc, #32]	; (1dd8 <TIMER_HVAC_init+0x44>)
    1db6:	4798      	blx	r3
}
    1db8:	bf00      	nop
    1dba:	bd80      	pop	{r7, pc}
    1dbc:	40000800 	.word	0x40000800
    1dc0:	00000f9b 	.word	0x00000f9b
    1dc4:	40001c00 	.word	0x40001c00
    1dc8:	00000d95 	.word	0x00000d95
    1dcc:	00008699 	.word	0x00008699
    1dd0:	4101c000 	.word	0x4101c000
    1dd4:	20004f6c 	.word	0x20004f6c
    1dd8:	000031c1 	.word	0x000031c1

00001ddc <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1ddc:	b580      	push	{r7, lr}
    1dde:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    1de0:	4808      	ldr	r0, [pc, #32]	; (1e04 <TIMER_MAINTENANCE_init+0x28>)
    1de2:	4b09      	ldr	r3, [pc, #36]	; (1e08 <TIMER_MAINTENANCE_init+0x2c>)
    1de4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1de6:	2246      	movs	r2, #70	; 0x46
    1de8:	211e      	movs	r1, #30
    1dea:	4808      	ldr	r0, [pc, #32]	; (1e0c <TIMER_MAINTENANCE_init+0x30>)
    1dec:	4b08      	ldr	r3, [pc, #32]	; (1e10 <TIMER_MAINTENANCE_init+0x34>)
    1dee:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    1df0:	4b08      	ldr	r3, [pc, #32]	; (1e14 <TIMER_MAINTENANCE_init+0x38>)
    1df2:	4798      	blx	r3
    1df4:	4603      	mov	r3, r0
    1df6:	461a      	mov	r2, r3
    1df8:	4907      	ldr	r1, [pc, #28]	; (1e18 <TIMER_MAINTENANCE_init+0x3c>)
    1dfa:	4808      	ldr	r0, [pc, #32]	; (1e1c <TIMER_MAINTENANCE_init+0x40>)
    1dfc:	4b08      	ldr	r3, [pc, #32]	; (1e20 <TIMER_MAINTENANCE_init+0x44>)
    1dfe:	4798      	blx	r3
}
    1e00:	bf00      	nop
    1e02:	bd80      	pop	{r7, pc}
    1e04:	40000800 	.word	0x40000800
    1e08:	00000fbb 	.word	0x00000fbb
    1e0c:	40001c00 	.word	0x40001c00
    1e10:	00000d95 	.word	0x00000d95
    1e14:	00008699 	.word	0x00008699
    1e18:	42001400 	.word	0x42001400
    1e1c:	20004e58 	.word	0x20004e58
    1e20:	000031c1 	.word	0x000031c1

00001e24 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1e28:	4808      	ldr	r0, [pc, #32]	; (1e4c <TIMER_INTERFACE_init+0x28>)
    1e2a:	4b09      	ldr	r3, [pc, #36]	; (1e50 <TIMER_INTERFACE_init+0x2c>)
    1e2c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e2e:	2246      	movs	r2, #70	; 0x46
    1e30:	211e      	movs	r1, #30
    1e32:	4808      	ldr	r0, [pc, #32]	; (1e54 <TIMER_INTERFACE_init+0x30>)
    1e34:	4b08      	ldr	r3, [pc, #32]	; (1e58 <TIMER_INTERFACE_init+0x34>)
    1e36:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1e38:	4b08      	ldr	r3, [pc, #32]	; (1e5c <TIMER_INTERFACE_init+0x38>)
    1e3a:	4798      	blx	r3
    1e3c:	4603      	mov	r3, r0
    1e3e:	461a      	mov	r2, r3
    1e40:	4907      	ldr	r1, [pc, #28]	; (1e60 <TIMER_INTERFACE_init+0x3c>)
    1e42:	4808      	ldr	r0, [pc, #32]	; (1e64 <TIMER_INTERFACE_init+0x40>)
    1e44:	4b08      	ldr	r3, [pc, #32]	; (1e68 <TIMER_INTERFACE_init+0x44>)
    1e46:	4798      	blx	r3
}
    1e48:	bf00      	nop
    1e4a:	bd80      	pop	{r7, pc}
    1e4c:	40000800 	.word	0x40000800
    1e50:	00000fdb 	.word	0x00000fdb
    1e54:	40001c00 	.word	0x40001c00
    1e58:	00000d95 	.word	0x00000d95
    1e5c:	00008699 	.word	0x00008699
    1e60:	42001800 	.word	0x42001800
    1e64:	20004e94 	.word	0x20004e94
    1e68:	000031c1 	.word	0x000031c1

00001e6c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1e6c:	b480      	push	{r7}
    1e6e:	af00      	add	r7, sp, #0
}
    1e70:	bf00      	nop
    1e72:	46bd      	mov	sp, r7
    1e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e78:	4770      	bx	lr
	...

00001e7c <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1e7c:	b580      	push	{r7, lr}
    1e7e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1e80:	4804      	ldr	r0, [pc, #16]	; (1e94 <LIVE_PULSE_CLOCK_init+0x18>)
    1e82:	4b05      	ldr	r3, [pc, #20]	; (1e98 <LIVE_PULSE_CLOCK_init+0x1c>)
    1e84:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e86:	224b      	movs	r2, #75	; 0x4b
    1e88:	2127      	movs	r1, #39	; 0x27
    1e8a:	4804      	ldr	r0, [pc, #16]	; (1e9c <LIVE_PULSE_CLOCK_init+0x20>)
    1e8c:	4b04      	ldr	r3, [pc, #16]	; (1ea0 <LIVE_PULSE_CLOCK_init+0x24>)
    1e8e:	4798      	blx	r3
}
    1e90:	bf00      	nop
    1e92:	bd80      	pop	{r7, pc}
    1e94:	40000800 	.word	0x40000800
    1e98:	0000107b 	.word	0x0000107b
    1e9c:	40001c00 	.word	0x40001c00
    1ea0:	00000d95 	.word	0x00000d95

00001ea4 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1ea4:	b580      	push	{r7, lr}
    1ea6:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1ea8:	4b06      	ldr	r3, [pc, #24]	; (1ec4 <LIVE_PULSE_init+0x20>)
    1eaa:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1eac:	4b06      	ldr	r3, [pc, #24]	; (1ec8 <LIVE_PULSE_init+0x24>)
    1eae:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1eb0:	4b06      	ldr	r3, [pc, #24]	; (1ecc <LIVE_PULSE_init+0x28>)
    1eb2:	4798      	blx	r3
    1eb4:	4603      	mov	r3, r0
    1eb6:	461a      	mov	r2, r3
    1eb8:	4905      	ldr	r1, [pc, #20]	; (1ed0 <LIVE_PULSE_init+0x2c>)
    1eba:	4806      	ldr	r0, [pc, #24]	; (1ed4 <LIVE_PULSE_init+0x30>)
    1ebc:	4b06      	ldr	r3, [pc, #24]	; (1ed8 <LIVE_PULSE_init+0x34>)
    1ebe:	4798      	blx	r3
}
    1ec0:	bf00      	nop
    1ec2:	bd80      	pop	{r7, pc}
    1ec4:	00001e7d 	.word	0x00001e7d
    1ec8:	00001e6d 	.word	0x00001e6d
    1ecc:	000086a9 	.word	0x000086a9
    1ed0:	43001800 	.word	0x43001800
    1ed4:	20004eb0 	.word	0x20004eb0
    1ed8:	00002a69 	.word	0x00002a69

00001edc <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1ee0:	2102      	movs	r1, #2
    1ee2:	2018      	movs	r0, #24
    1ee4:	4b0f      	ldr	r3, [pc, #60]	; (1f24 <CDCUSB_PORT_init+0x48>)
    1ee6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1ee8:	2100      	movs	r1, #0
    1eea:	2018      	movs	r0, #24
    1eec:	4b0e      	ldr	r3, [pc, #56]	; (1f28 <CDCUSB_PORT_init+0x4c>)
    1eee:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1ef0:	2100      	movs	r1, #0
    1ef2:	2018      	movs	r0, #24
    1ef4:	4b0d      	ldr	r3, [pc, #52]	; (1f2c <CDCUSB_PORT_init+0x50>)
    1ef6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1ef8:	490d      	ldr	r1, [pc, #52]	; (1f30 <CDCUSB_PORT_init+0x54>)
    1efa:	2018      	movs	r0, #24
    1efc:	4b0d      	ldr	r3, [pc, #52]	; (1f34 <CDCUSB_PORT_init+0x58>)
    1efe:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1f00:	2102      	movs	r1, #2
    1f02:	2019      	movs	r0, #25
    1f04:	4b07      	ldr	r3, [pc, #28]	; (1f24 <CDCUSB_PORT_init+0x48>)
    1f06:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1f08:	2100      	movs	r1, #0
    1f0a:	2019      	movs	r0, #25
    1f0c:	4b06      	ldr	r3, [pc, #24]	; (1f28 <CDCUSB_PORT_init+0x4c>)
    1f0e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1f10:	2100      	movs	r1, #0
    1f12:	2019      	movs	r0, #25
    1f14:	4b05      	ldr	r3, [pc, #20]	; (1f2c <CDCUSB_PORT_init+0x50>)
    1f16:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1f18:	4907      	ldr	r1, [pc, #28]	; (1f38 <CDCUSB_PORT_init+0x5c>)
    1f1a:	2019      	movs	r0, #25
    1f1c:	4b05      	ldr	r3, [pc, #20]	; (1f34 <CDCUSB_PORT_init+0x58>)
    1f1e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1f20:	bf00      	nop
    1f22:	bd80      	pop	{r7, pc}
    1f24:	000015c9 	.word	0x000015c9
    1f28:	00001601 	.word	0x00001601
    1f2c:	00001575 	.word	0x00001575
    1f30:	00180007 	.word	0x00180007
    1f34:	000015a9 	.word	0x000015a9
    1f38:	00190007 	.word	0x00190007

00001f3c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1f3c:	b580      	push	{r7, lr}
    1f3e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1f40:	2242      	movs	r2, #66	; 0x42
    1f42:	210a      	movs	r1, #10
    1f44:	4805      	ldr	r0, [pc, #20]	; (1f5c <CDCUSB_CLOCK_init+0x20>)
    1f46:	4b06      	ldr	r3, [pc, #24]	; (1f60 <CDCUSB_CLOCK_init+0x24>)
    1f48:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    1f4a:	4806      	ldr	r0, [pc, #24]	; (1f64 <CDCUSB_CLOCK_init+0x28>)
    1f4c:	4b06      	ldr	r3, [pc, #24]	; (1f68 <CDCUSB_CLOCK_init+0x2c>)
    1f4e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1f50:	4804      	ldr	r0, [pc, #16]	; (1f64 <CDCUSB_CLOCK_init+0x28>)
    1f52:	4b06      	ldr	r3, [pc, #24]	; (1f6c <CDCUSB_CLOCK_init+0x30>)
    1f54:	4798      	blx	r3
}
    1f56:	bf00      	nop
    1f58:	bd80      	pop	{r7, pc}
    1f5a:	bf00      	nop
    1f5c:	40001c00 	.word	0x40001c00
    1f60:	00000d95 	.word	0x00000d95
    1f64:	40000800 	.word	0x40000800
    1f68:	00000dbb 	.word	0x00000dbb
    1f6c:	00000f1b 	.word	0x00000f1b

00001f70 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1f70:	b580      	push	{r7, lr}
    1f72:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1f74:	4b03      	ldr	r3, [pc, #12]	; (1f84 <CDCUSB_init+0x14>)
    1f76:	4798      	blx	r3
	usb_d_init();
    1f78:	4b03      	ldr	r3, [pc, #12]	; (1f88 <CDCUSB_init+0x18>)
    1f7a:	4798      	blx	r3
	CDCUSB_PORT_init();
    1f7c:	4b03      	ldr	r3, [pc, #12]	; (1f8c <CDCUSB_init+0x1c>)
    1f7e:	4798      	blx	r3
}
    1f80:	bf00      	nop
    1f82:	bd80      	pop	{r7, pc}
    1f84:	00001f3d 	.word	0x00001f3d
    1f88:	000039d1 	.word	0x000039d1
    1f8c:	00001edd 	.word	0x00001edd

00001f90 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1f90:	b580      	push	{r7, lr}
    1f92:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1f94:	4802      	ldr	r0, [pc, #8]	; (1fa0 <WATCHDOG_CLOCK_init+0x10>)
    1f96:	4b03      	ldr	r3, [pc, #12]	; (1fa4 <WATCHDOG_CLOCK_init+0x14>)
    1f98:	4798      	blx	r3
}
    1f9a:	bf00      	nop
    1f9c:	bd80      	pop	{r7, pc}
    1f9e:	bf00      	nop
    1fa0:	40000800 	.word	0x40000800
    1fa4:	00000e3b 	.word	0x00000e3b

00001fa8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1fa8:	b580      	push	{r7, lr}
    1faa:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1fac:	4b03      	ldr	r3, [pc, #12]	; (1fbc <WATCHDOG_init+0x14>)
    1fae:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1fb0:	4903      	ldr	r1, [pc, #12]	; (1fc0 <WATCHDOG_init+0x18>)
    1fb2:	4804      	ldr	r0, [pc, #16]	; (1fc4 <WATCHDOG_init+0x1c>)
    1fb4:	4b04      	ldr	r3, [pc, #16]	; (1fc8 <WATCHDOG_init+0x20>)
    1fb6:	4798      	blx	r3
}
    1fb8:	bf00      	nop
    1fba:	bd80      	pop	{r7, pc}
    1fbc:	00001f91 	.word	0x00001f91
    1fc0:	40002000 	.word	0x40002000
    1fc4:	20004fe8 	.word	0x20004fe8
    1fc8:	00001649 	.word	0x00001649

00001fcc <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1fcc:	b580      	push	{r7, lr}
    1fce:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1fd0:	4904      	ldr	r1, [pc, #16]	; (1fe4 <CAN_CCU_PORT_init+0x18>)
    1fd2:	202d      	movs	r0, #45	; 0x2d
    1fd4:	4b04      	ldr	r3, [pc, #16]	; (1fe8 <CAN_CCU_PORT_init+0x1c>)
    1fd6:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1fd8:	4904      	ldr	r1, [pc, #16]	; (1fec <CAN_CCU_PORT_init+0x20>)
    1fda:	202c      	movs	r0, #44	; 0x2c
    1fdc:	4b02      	ldr	r3, [pc, #8]	; (1fe8 <CAN_CCU_PORT_init+0x1c>)
    1fde:	4798      	blx	r3
}
    1fe0:	bf00      	nop
    1fe2:	bd80      	pop	{r7, pc}
    1fe4:	002d0007 	.word	0x002d0007
    1fe8:	000015a9 	.word	0x000015a9
    1fec:	002c0007 	.word	0x002c0007

00001ff0 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1ff0:	b580      	push	{r7, lr}
    1ff2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1ff4:	4807      	ldr	r0, [pc, #28]	; (2014 <CAN_CCU_init+0x24>)
    1ff6:	4b08      	ldr	r3, [pc, #32]	; (2018 <CAN_CCU_init+0x28>)
    1ff8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ffa:	2243      	movs	r2, #67	; 0x43
    1ffc:	211c      	movs	r1, #28
    1ffe:	4807      	ldr	r0, [pc, #28]	; (201c <CAN_CCU_init+0x2c>)
    2000:	4b07      	ldr	r3, [pc, #28]	; (2020 <CAN_CCU_init+0x30>)
    2002:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    2004:	4907      	ldr	r1, [pc, #28]	; (2024 <CAN_CCU_init+0x34>)
    2006:	4808      	ldr	r0, [pc, #32]	; (2028 <CAN_CCU_init+0x38>)
    2008:	4b08      	ldr	r3, [pc, #32]	; (202c <CAN_CCU_init+0x3c>)
    200a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    200c:	4b08      	ldr	r3, [pc, #32]	; (2030 <CAN_CCU_init+0x40>)
    200e:	4798      	blx	r3
}
    2010:	bf00      	nop
    2012:	bd80      	pop	{r7, pc}
    2014:	40000800 	.word	0x40000800
    2018:	00000dfb 	.word	0x00000dfb
    201c:	40001c00 	.word	0x40001c00
    2020:	00000d95 	.word	0x00000d95
    2024:	42000400 	.word	0x42000400
    2028:	20004ecc 	.word	0x20004ecc
    202c:	000024bd 	.word	0x000024bd
    2030:	00001fcd 	.word	0x00001fcd

00002034 <system_init>:

void system_init(void)
{
    2034:	b580      	push	{r7, lr}
    2036:	af00      	add	r7, sp, #0
	init_mcu();
    2038:	4b50      	ldr	r3, [pc, #320]	; (217c <system_init+0x148>)
    203a:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    203c:	2101      	movs	r1, #1
    203e:	200f      	movs	r0, #15
    2040:	4b4f      	ldr	r3, [pc, #316]	; (2180 <system_init+0x14c>)
    2042:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    2044:	2102      	movs	r1, #2
    2046:	200f      	movs	r0, #15
    2048:	4b4e      	ldr	r3, [pc, #312]	; (2184 <system_init+0x150>)
    204a:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    204c:	f04f 31ff 	mov.w	r1, #4294967295
    2050:	200f      	movs	r0, #15
    2052:	4b4d      	ldr	r3, [pc, #308]	; (2188 <system_init+0x154>)
    2054:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2056:	2101      	movs	r1, #1
    2058:	2013      	movs	r0, #19
    205a:	4b49      	ldr	r3, [pc, #292]	; (2180 <system_init+0x14c>)
    205c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    205e:	2102      	movs	r1, #2
    2060:	2013      	movs	r0, #19
    2062:	4b48      	ldr	r3, [pc, #288]	; (2184 <system_init+0x150>)
    2064:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2066:	f04f 31ff 	mov.w	r1, #4294967295
    206a:	2013      	movs	r0, #19
    206c:	4b46      	ldr	r3, [pc, #280]	; (2188 <system_init+0x154>)
    206e:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    2070:	2101      	movs	r1, #1
    2072:	2027      	movs	r0, #39	; 0x27
    2074:	4b43      	ldr	r3, [pc, #268]	; (2184 <system_init+0x150>)
    2076:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    2078:	2102      	movs	r1, #2
    207a:	2027      	movs	r0, #39	; 0x27
    207c:	4b43      	ldr	r3, [pc, #268]	; (218c <system_init+0x158>)
    207e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    2080:	f04f 31ff 	mov.w	r1, #4294967295
    2084:	2027      	movs	r0, #39	; 0x27
    2086:	4b40      	ldr	r3, [pc, #256]	; (2188 <system_init+0x154>)
    2088:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    208a:	2101      	movs	r1, #1
    208c:	203d      	movs	r0, #61	; 0x3d
    208e:	4b3c      	ldr	r3, [pc, #240]	; (2180 <system_init+0x14c>)
    2090:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    2092:	2102      	movs	r1, #2
    2094:	203d      	movs	r0, #61	; 0x3d
    2096:	4b3b      	ldr	r3, [pc, #236]	; (2184 <system_init+0x150>)
    2098:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    209a:	f04f 31ff 	mov.w	r1, #4294967295
    209e:	203d      	movs	r0, #61	; 0x3d
    20a0:	4b39      	ldr	r3, [pc, #228]	; (2188 <system_init+0x154>)
    20a2:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    20a4:	2101      	movs	r1, #1
    20a6:	203f      	movs	r0, #63	; 0x3f
    20a8:	4b36      	ldr	r3, [pc, #216]	; (2184 <system_init+0x150>)
    20aa:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    20ac:	2101      	movs	r1, #1
    20ae:	203f      	movs	r0, #63	; 0x3f
    20b0:	4b36      	ldr	r3, [pc, #216]	; (218c <system_init+0x158>)
    20b2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    20b4:	f04f 31ff 	mov.w	r1, #4294967295
    20b8:	203f      	movs	r0, #63	; 0x3f
    20ba:	4b33      	ldr	r3, [pc, #204]	; (2188 <system_init+0x154>)
    20bc:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    20be:	2100      	movs	r1, #0
    20c0:	204d      	movs	r0, #77	; 0x4d
    20c2:	4b2f      	ldr	r3, [pc, #188]	; (2180 <system_init+0x14c>)
    20c4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    20c6:	2102      	movs	r1, #2
    20c8:	204d      	movs	r0, #77	; 0x4d
    20ca:	4b2e      	ldr	r3, [pc, #184]	; (2184 <system_init+0x150>)
    20cc:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    20ce:	f04f 31ff 	mov.w	r1, #4294967295
    20d2:	204d      	movs	r0, #77	; 0x4d
    20d4:	4b2c      	ldr	r3, [pc, #176]	; (2188 <system_init+0x154>)
    20d6:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    20d8:	2101      	movs	r1, #1
    20da:	204e      	movs	r0, #78	; 0x4e
    20dc:	4b28      	ldr	r3, [pc, #160]	; (2180 <system_init+0x14c>)
    20de:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    20e0:	2102      	movs	r1, #2
    20e2:	204e      	movs	r0, #78	; 0x4e
    20e4:	4b27      	ldr	r3, [pc, #156]	; (2184 <system_init+0x150>)
    20e6:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    20e8:	f04f 31ff 	mov.w	r1, #4294967295
    20ec:	204e      	movs	r0, #78	; 0x4e
    20ee:	4b26      	ldr	r3, [pc, #152]	; (2188 <system_init+0x154>)
    20f0:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    20f2:	2100      	movs	r1, #0
    20f4:	204f      	movs	r0, #79	; 0x4f
    20f6:	4b22      	ldr	r3, [pc, #136]	; (2180 <system_init+0x14c>)
    20f8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    20fa:	2102      	movs	r1, #2
    20fc:	204f      	movs	r0, #79	; 0x4f
    20fe:	4b21      	ldr	r3, [pc, #132]	; (2184 <system_init+0x150>)
    2100:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    2102:	f04f 31ff 	mov.w	r1, #4294967295
    2106:	204f      	movs	r0, #79	; 0x4f
    2108:	4b1f      	ldr	r3, [pc, #124]	; (2188 <system_init+0x154>)
    210a:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    210c:	2100      	movs	r1, #0
    210e:	2052      	movs	r0, #82	; 0x52
    2110:	4b1b      	ldr	r3, [pc, #108]	; (2180 <system_init+0x14c>)
    2112:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2114:	2102      	movs	r1, #2
    2116:	2052      	movs	r0, #82	; 0x52
    2118:	4b1a      	ldr	r3, [pc, #104]	; (2184 <system_init+0x150>)
    211a:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    211c:	f04f 31ff 	mov.w	r1, #4294967295
    2120:	2052      	movs	r0, #82	; 0x52
    2122:	4b19      	ldr	r3, [pc, #100]	; (2188 <system_init+0x154>)
    2124:	4798      	blx	r3

	CRC_CALC_init();
    2126:	4b1a      	ldr	r3, [pc, #104]	; (2190 <system_init+0x15c>)
    2128:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    212a:	4b1a      	ldr	r3, [pc, #104]	; (2194 <system_init+0x160>)
    212c:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    212e:	4b1a      	ldr	r3, [pc, #104]	; (2198 <system_init+0x164>)
    2130:	4798      	blx	r3

	QSPI_N25Q256_init();
    2132:	4b1a      	ldr	r3, [pc, #104]	; (219c <system_init+0x168>)
    2134:	4798      	blx	r3

	DATETIME_CLOCK_init();
    2136:	4b1a      	ldr	r3, [pc, #104]	; (21a0 <system_init+0x16c>)
    2138:	4798      	blx	r3

	SPI_HI3593_init();
    213a:	4b1a      	ldr	r3, [pc, #104]	; (21a4 <system_init+0x170>)
    213c:	4798      	blx	r3

	SPI_MEMORIES_init();
    213e:	4b1a      	ldr	r3, [pc, #104]	; (21a8 <system_init+0x174>)
    2140:	4798      	blx	r3

	SPI_TEMP_init();
    2142:	4b1a      	ldr	r3, [pc, #104]	; (21ac <system_init+0x178>)
    2144:	4798      	blx	r3

	I2C_EXPANDER_init();
    2146:	4b1a      	ldr	r3, [pc, #104]	; (21b0 <system_init+0x17c>)
    2148:	4798      	blx	r3

	I2C_EEPROM_init();
    214a:	4b1a      	ldr	r3, [pc, #104]	; (21b4 <system_init+0x180>)
    214c:	4798      	blx	r3

	TIMER_USB_init();
    214e:	4b1a      	ldr	r3, [pc, #104]	; (21b8 <system_init+0x184>)
    2150:	4798      	blx	r3
	TIMER_EVENT_init();
    2152:	4b1a      	ldr	r3, [pc, #104]	; (21bc <system_init+0x188>)
    2154:	4798      	blx	r3
	TIMER_ARINC_init();
    2156:	4b1a      	ldr	r3, [pc, #104]	; (21c0 <system_init+0x18c>)
    2158:	4798      	blx	r3
	TIMER_HVAC_init();
    215a:	4b1a      	ldr	r3, [pc, #104]	; (21c4 <system_init+0x190>)
    215c:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    215e:	4b1a      	ldr	r3, [pc, #104]	; (21c8 <system_init+0x194>)
    2160:	4798      	blx	r3
	TIMER_INTERFACE_init();
    2162:	4b1a      	ldr	r3, [pc, #104]	; (21cc <system_init+0x198>)
    2164:	4798      	blx	r3
	LIVE_PULSE_init();
    2166:	4b1a      	ldr	r3, [pc, #104]	; (21d0 <system_init+0x19c>)
    2168:	4798      	blx	r3

	CDCUSB_init();
    216a:	4b1a      	ldr	r3, [pc, #104]	; (21d4 <system_init+0x1a0>)
    216c:	4798      	blx	r3

	WATCHDOG_init();
    216e:	4b1a      	ldr	r3, [pc, #104]	; (21d8 <system_init+0x1a4>)
    2170:	4798      	blx	r3
	CAN_CCU_init();
    2172:	4b1a      	ldr	r3, [pc, #104]	; (21dc <system_init+0x1a8>)
    2174:	4798      	blx	r3
}
    2176:	bf00      	nop
    2178:	bd80      	pop	{r7, pc}
    217a:	bf00      	nop
    217c:	00001639 	.word	0x00001639
    2180:	00001601 	.word	0x00001601
    2184:	000015c9 	.word	0x000015c9
    2188:	000015a9 	.word	0x000015a9
    218c:	00001575 	.word	0x00001575
    2190:	00001699 	.word	0x00001699
    2194:	000016c5 	.word	0x000016c5
    2198:	00001785 	.word	0x00001785
    219c:	000018c1 	.word	0x000018c1
    21a0:	00001905 	.word	0x00001905
    21a4:	000019c9 	.word	0x000019c9
    21a8:	00001a95 	.word	0x00001a95
    21ac:	00001b61 	.word	0x00001b61
    21b0:	00001bf9 	.word	0x00001bf9
    21b4:	00001c91 	.word	0x00001c91
    21b8:	00001cbd 	.word	0x00001cbd
    21bc:	00001d05 	.word	0x00001d05
    21c0:	00001d4d 	.word	0x00001d4d
    21c4:	00001d95 	.word	0x00001d95
    21c8:	00001ddd 	.word	0x00001ddd
    21cc:	00001e25 	.word	0x00001e25
    21d0:	00001ea5 	.word	0x00001ea5
    21d4:	00001f71 	.word	0x00001f71
    21d8:	00001fa9 	.word	0x00001fa9
    21dc:	00001ff1 	.word	0x00001ff1

000021e0 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    21e0:	b480      	push	{r7}
    21e2:	b083      	sub	sp, #12
    21e4:	af00      	add	r7, sp, #0
    21e6:	4603      	mov	r3, r0
    21e8:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    21ea:	88fb      	ldrh	r3, [r7, #6]
    21ec:	f003 0303 	and.w	r3, r3, #3
    21f0:	2b00      	cmp	r3, #0
    21f2:	d001      	beq.n	21f8 <leap_year+0x18>
		return false;
    21f4:	2300      	movs	r3, #0
    21f6:	e000      	b.n	21fa <leap_year+0x1a>
	} else {
		return true;
    21f8:	2301      	movs	r3, #1
	}
}
    21fa:	4618      	mov	r0, r3
    21fc:	370c      	adds	r7, #12
    21fe:	46bd      	mov	sp, r7
    2200:	f85d 7b04 	ldr.w	r7, [sp], #4
    2204:	4770      	bx	lr
	...

00002208 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    2208:	b580      	push	{r7, lr}
    220a:	b084      	sub	sp, #16
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
    2210:	460b      	mov	r3, r1
    2212:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    2214:	2300      	movs	r3, #0
    2216:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    2218:	687b      	ldr	r3, [r7, #4]
    221a:	b29b      	uxth	r3, r3
    221c:	4618      	mov	r0, r3
    221e:	4b2f      	ldr	r3, [pc, #188]	; (22dc <get_secs_in_month+0xd4>)
    2220:	4798      	blx	r3
    2222:	4603      	mov	r3, r0
    2224:	2b00      	cmp	r3, #0
    2226:	d028      	beq.n	227a <get_secs_in_month+0x72>
		switch (month) {
    2228:	78fb      	ldrb	r3, [r7, #3]
    222a:	3b01      	subs	r3, #1
    222c:	2b0b      	cmp	r3, #11
    222e:	d84c      	bhi.n	22ca <get_secs_in_month+0xc2>
    2230:	a201      	add	r2, pc, #4	; (adr r2, 2238 <get_secs_in_month+0x30>)
    2232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2236:	bf00      	nop
    2238:	00002269 	.word	0x00002269
    223c:	0000226f 	.word	0x0000226f
    2240:	00002269 	.word	0x00002269
    2244:	00002275 	.word	0x00002275
    2248:	00002269 	.word	0x00002269
    224c:	00002275 	.word	0x00002275
    2250:	00002269 	.word	0x00002269
    2254:	00002269 	.word	0x00002269
    2258:	00002275 	.word	0x00002275
    225c:	00002269 	.word	0x00002269
    2260:	00002275 	.word	0x00002275
    2264:	00002269 	.word	0x00002269
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2268:	4b1d      	ldr	r3, [pc, #116]	; (22e0 <get_secs_in_month+0xd8>)
    226a:	60fb      	str	r3, [r7, #12]
			break;
    226c:	e030      	b.n	22d0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    226e:	4b1d      	ldr	r3, [pc, #116]	; (22e4 <get_secs_in_month+0xdc>)
    2270:	60fb      	str	r3, [r7, #12]
			break;
    2272:	e02d      	b.n	22d0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2274:	4b1c      	ldr	r3, [pc, #112]	; (22e8 <get_secs_in_month+0xe0>)
    2276:	60fb      	str	r3, [r7, #12]
			break;
    2278:	e02a      	b.n	22d0 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    227a:	78fb      	ldrb	r3, [r7, #3]
    227c:	3b01      	subs	r3, #1
    227e:	2b0b      	cmp	r3, #11
    2280:	d825      	bhi.n	22ce <get_secs_in_month+0xc6>
    2282:	a201      	add	r2, pc, #4	; (adr r2, 2288 <get_secs_in_month+0x80>)
    2284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2288:	000022b9 	.word	0x000022b9
    228c:	000022bf 	.word	0x000022bf
    2290:	000022b9 	.word	0x000022b9
    2294:	000022c5 	.word	0x000022c5
    2298:	000022b9 	.word	0x000022b9
    229c:	000022c5 	.word	0x000022c5
    22a0:	000022b9 	.word	0x000022b9
    22a4:	000022b9 	.word	0x000022b9
    22a8:	000022c5 	.word	0x000022c5
    22ac:	000022b9 	.word	0x000022b9
    22b0:	000022c5 	.word	0x000022c5
    22b4:	000022b9 	.word	0x000022b9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    22b8:	4b09      	ldr	r3, [pc, #36]	; (22e0 <get_secs_in_month+0xd8>)
    22ba:	60fb      	str	r3, [r7, #12]
			break;
    22bc:	e008      	b.n	22d0 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    22be:	4b0b      	ldr	r3, [pc, #44]	; (22ec <get_secs_in_month+0xe4>)
    22c0:	60fb      	str	r3, [r7, #12]
			break;
    22c2:	e005      	b.n	22d0 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    22c4:	4b08      	ldr	r3, [pc, #32]	; (22e8 <get_secs_in_month+0xe0>)
    22c6:	60fb      	str	r3, [r7, #12]
			break;
    22c8:	e002      	b.n	22d0 <get_secs_in_month+0xc8>
			break;
    22ca:	bf00      	nop
    22cc:	e000      	b.n	22d0 <get_secs_in_month+0xc8>
		default:
			break;
    22ce:	bf00      	nop
		}
	}

	return sec_in_month;
    22d0:	68fb      	ldr	r3, [r7, #12]
}
    22d2:	4618      	mov	r0, r3
    22d4:	3710      	adds	r7, #16
    22d6:	46bd      	mov	sp, r7
    22d8:	bd80      	pop	{r7, pc}
    22da:	bf00      	nop
    22dc:	000021e1 	.word	0x000021e1
    22e0:	0028de80 	.word	0x0028de80
    22e4:	00263b80 	.word	0x00263b80
    22e8:	00278d00 	.word	0x00278d00
    22ec:	0024ea00 	.word	0x0024ea00

000022f0 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    22f0:	b580      	push	{r7, lr}
    22f2:	b08a      	sub	sp, #40	; 0x28
    22f4:	af00      	add	r7, sp, #0
    22f6:	60f8      	str	r0, [r7, #12]
    22f8:	60b9      	str	r1, [r7, #8]
    22fa:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    22fc:	68fb      	ldr	r3, [r7, #12]
    22fe:	699b      	ldr	r3, [r3, #24]
    2300:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    2302:	2301      	movs	r3, #1
    2304:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    2306:	2301      	movs	r3, #1
    2308:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    230a:	2300      	movs	r3, #0
    230c:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    230e:	2300      	movs	r3, #0
    2310:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    2312:	68bb      	ldr	r3, [r7, #8]
    2314:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2316:	6a3b      	ldr	r3, [r7, #32]
    2318:	b29b      	uxth	r3, r3
    231a:	4618      	mov	r0, r3
    231c:	4b32      	ldr	r3, [pc, #200]	; (23e8 <convert_timestamp_to_datetime+0xf8>)
    231e:	4798      	blx	r3
    2320:	4603      	mov	r3, r0
    2322:	2b00      	cmp	r3, #0
    2324:	d001      	beq.n	232a <convert_timestamp_to_datetime+0x3a>
    2326:	4b31      	ldr	r3, [pc, #196]	; (23ec <convert_timestamp_to_datetime+0xfc>)
    2328:	e000      	b.n	232c <convert_timestamp_to_datetime+0x3c>
    232a:	4b31      	ldr	r3, [pc, #196]	; (23f0 <convert_timestamp_to_datetime+0x100>)
    232c:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    232e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2330:	69bb      	ldr	r3, [r7, #24]
    2332:	429a      	cmp	r2, r3
    2334:	d307      	bcc.n	2346 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    2336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2338:	69bb      	ldr	r3, [r7, #24]
    233a:	1ad3      	subs	r3, r2, r3
    233c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    233e:	6a3b      	ldr	r3, [r7, #32]
    2340:	3301      	adds	r3, #1
    2342:	623b      	str	r3, [r7, #32]
    2344:	e7e7      	b.n	2316 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2346:	7ffb      	ldrb	r3, [r7, #31]
    2348:	4619      	mov	r1, r3
    234a:	6a38      	ldr	r0, [r7, #32]
    234c:	4b29      	ldr	r3, [pc, #164]	; (23f4 <convert_timestamp_to_datetime+0x104>)
    234e:	4798      	blx	r3
    2350:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    2352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2354:	697b      	ldr	r3, [r7, #20]
    2356:	429a      	cmp	r2, r3
    2358:	d307      	bcc.n	236a <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    235c:	697b      	ldr	r3, [r7, #20]
    235e:	1ad3      	subs	r3, r2, r3
    2360:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    2362:	7ffb      	ldrb	r3, [r7, #31]
    2364:	3301      	adds	r3, #1
    2366:	77fb      	strb	r3, [r7, #31]
    2368:	e7ed      	b.n	2346 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    236c:	4a22      	ldr	r2, [pc, #136]	; (23f8 <convert_timestamp_to_datetime+0x108>)
    236e:	4293      	cmp	r3, r2
    2370:	d909      	bls.n	2386 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    2372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2374:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    2378:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    237c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    237e:	7fbb      	ldrb	r3, [r7, #30]
    2380:	3301      	adds	r3, #1
    2382:	77bb      	strb	r3, [r7, #30]
    2384:	e7f1      	b.n	236a <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    2386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2388:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    238c:	d307      	bcc.n	239e <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2390:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    2394:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    2396:	7f7b      	ldrb	r3, [r7, #29]
    2398:	3301      	adds	r3, #1
    239a:	777b      	strb	r3, [r7, #29]
    239c:	e7f3      	b.n	2386 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23a0:	2b3b      	cmp	r3, #59	; 0x3b
    23a2:	d906      	bls.n	23b2 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    23a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23a6:	3b3c      	subs	r3, #60	; 0x3c
    23a8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    23aa:	7f3b      	ldrb	r3, [r7, #28]
    23ac:	3301      	adds	r3, #1
    23ae:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    23b0:	e7f5      	b.n	239e <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    23b2:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    23b4:	6a3b      	ldr	r3, [r7, #32]
    23b6:	b29a      	uxth	r2, r3
    23b8:	687b      	ldr	r3, [r7, #4]
    23ba:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	7ffa      	ldrb	r2, [r7, #31]
    23c0:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	7fba      	ldrb	r2, [r7, #30]
    23c6:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    23c8:	687b      	ldr	r3, [r7, #4]
    23ca:	7f7a      	ldrb	r2, [r7, #29]
    23cc:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    23ce:	687b      	ldr	r3, [r7, #4]
    23d0:	7f3a      	ldrb	r2, [r7, #28]
    23d2:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    23d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23d6:	b2da      	uxtb	r2, r3
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    23dc:	2300      	movs	r3, #0
}
    23de:	4618      	mov	r0, r3
    23e0:	3728      	adds	r7, #40	; 0x28
    23e2:	46bd      	mov	sp, r7
    23e4:	bd80      	pop	{r7, pc}
    23e6:	bf00      	nop
    23e8:	000021e1 	.word	0x000021e1
    23ec:	01e28500 	.word	0x01e28500
    23f0:	01e13380 	.word	0x01e13380
    23f4:	00002209 	.word	0x00002209
    23f8:	0001517f 	.word	0x0001517f

000023fc <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    23fc:	b580      	push	{r7, lr}
    23fe:	b084      	sub	sp, #16
    2400:	af00      	add	r7, sp, #0
    2402:	6078      	str	r0, [r7, #4]
    2404:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    2406:	2300      	movs	r3, #0
    2408:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    240a:	687b      	ldr	r3, [r7, #4]
    240c:	2b00      	cmp	r3, #0
    240e:	bf14      	ite	ne
    2410:	2301      	movne	r3, #1
    2412:	2300      	moveq	r3, #0
    2414:	b2db      	uxtb	r3, r3
    2416:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    241a:	4911      	ldr	r1, [pc, #68]	; (2460 <calendar_init+0x64>)
    241c:	4618      	mov	r0, r3
    241e:	4b11      	ldr	r3, [pc, #68]	; (2464 <calendar_init+0x68>)
    2420:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    2422:	687b      	ldr	r3, [r7, #4]
    2424:	681a      	ldr	r2, [r3, #0]
    2426:	683b      	ldr	r3, [r7, #0]
    2428:	429a      	cmp	r2, r3
    242a:	d101      	bne.n	2430 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    242c:	2300      	movs	r3, #0
    242e:	e013      	b.n	2458 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2430:	687b      	ldr	r3, [r7, #4]
    2432:	681b      	ldr	r3, [r3, #0]
    2434:	2b00      	cmp	r3, #0
    2436:	d002      	beq.n	243e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2438:	f06f 0311 	mvn.w	r3, #17
    243c:	e00c      	b.n	2458 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    243e:	687b      	ldr	r3, [r7, #4]
    2440:	683a      	ldr	r2, [r7, #0]
    2442:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	4618      	mov	r0, r3
    2448:	4b07      	ldr	r3, [pc, #28]	; (2468 <calendar_init+0x6c>)
    244a:	4798      	blx	r3
    244c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    244e:	687b      	ldr	r3, [r7, #4]
    2450:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2454:	619a      	str	r2, [r3, #24]

	return ret;
    2456:	68fb      	ldr	r3, [r7, #12]
}
    2458:	4618      	mov	r0, r3
    245a:	3710      	adds	r7, #16
    245c:	46bd      	mov	sp, r7
    245e:	bd80      	pop	{r7, pc}
    2460:	00011300 	.word	0x00011300
    2464:	00003f79 	.word	0x00003f79
    2468:	000062b1 	.word	0x000062b1

0000246c <calendar_get_date_time>:
}

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    246c:	b580      	push	{r7, lr}
    246e:	b084      	sub	sp, #16
    2470:	af00      	add	r7, sp, #0
    2472:	6078      	str	r0, [r7, #4]
    2474:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    2476:	687b      	ldr	r3, [r7, #4]
    2478:	2b00      	cmp	r3, #0
    247a:	bf14      	ite	ne
    247c:	2301      	movne	r3, #1
    247e:	2300      	moveq	r3, #0
    2480:	b2db      	uxtb	r3, r3
    2482:	f240 223b 	movw	r2, #571	; 0x23b
    2486:	4909      	ldr	r1, [pc, #36]	; (24ac <calendar_get_date_time+0x40>)
    2488:	4618      	mov	r0, r3
    248a:	4b09      	ldr	r3, [pc, #36]	; (24b0 <calendar_get_date_time+0x44>)
    248c:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    248e:	687b      	ldr	r3, [r7, #4]
    2490:	4618      	mov	r0, r3
    2492:	4b08      	ldr	r3, [pc, #32]	; (24b4 <calendar_get_date_time+0x48>)
    2494:	4798      	blx	r3
    2496:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    2498:	683a      	ldr	r2, [r7, #0]
    249a:	68f9      	ldr	r1, [r7, #12]
    249c:	6878      	ldr	r0, [r7, #4]
    249e:	4b06      	ldr	r3, [pc, #24]	; (24b8 <calendar_get_date_time+0x4c>)
    24a0:	4798      	blx	r3

	return ERR_NONE;
    24a2:	2300      	movs	r3, #0
}
    24a4:	4618      	mov	r0, r3
    24a6:	3710      	adds	r7, #16
    24a8:	46bd      	mov	sp, r7
    24aa:	bd80      	pop	{r7, pc}
    24ac:	00011300 	.word	0x00011300
    24b0:	00003f79 	.word	0x00003f79
    24b4:	00006369 	.word	0x00006369
    24b8:	000022f1 	.word	0x000022f1

000024bc <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    24bc:	b580      	push	{r7, lr}
    24be:	b084      	sub	sp, #16
    24c0:	af00      	add	r7, sp, #0
    24c2:	6078      	str	r0, [r7, #4]
    24c4:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    24c6:	687b      	ldr	r3, [r7, #4]
    24c8:	2b00      	cmp	r3, #0
    24ca:	d004      	beq.n	24d6 <can_async_init+0x1a>
    24cc:	683b      	ldr	r3, [r7, #0]
    24ce:	2b00      	cmp	r3, #0
    24d0:	d001      	beq.n	24d6 <can_async_init+0x1a>
    24d2:	2301      	movs	r3, #1
    24d4:	e000      	b.n	24d8 <can_async_init+0x1c>
    24d6:	2300      	movs	r3, #0
    24d8:	f003 0301 	and.w	r3, r3, #1
    24dc:	b2db      	uxtb	r3, r3
    24de:	2241      	movs	r2, #65	; 0x41
    24e0:	490e      	ldr	r1, [pc, #56]	; (251c <can_async_init+0x60>)
    24e2:	4618      	mov	r0, r3
    24e4:	4b0e      	ldr	r3, [pc, #56]	; (2520 <can_async_init+0x64>)
    24e6:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	6839      	ldr	r1, [r7, #0]
    24ec:	4618      	mov	r0, r3
    24ee:	4b0d      	ldr	r3, [pc, #52]	; (2524 <can_async_init+0x68>)
    24f0:	4798      	blx	r3
    24f2:	60f8      	str	r0, [r7, #12]
	if (rc) {
    24f4:	68fb      	ldr	r3, [r7, #12]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d001      	beq.n	24fe <can_async_init+0x42>
		return rc;
    24fa:	68fb      	ldr	r3, [r7, #12]
    24fc:	e009      	b.n	2512 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    24fe:	687b      	ldr	r3, [r7, #4]
    2500:	4a09      	ldr	r2, [pc, #36]	; (2528 <can_async_init+0x6c>)
    2502:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    2504:	687b      	ldr	r3, [r7, #4]
    2506:	4a09      	ldr	r2, [pc, #36]	; (252c <can_async_init+0x70>)
    2508:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    250a:	687b      	ldr	r3, [r7, #4]
    250c:	4a08      	ldr	r2, [pc, #32]	; (2530 <can_async_init+0x74>)
    250e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2510:	2300      	movs	r3, #0
}
    2512:	4618      	mov	r0, r3
    2514:	3710      	adds	r7, #16
    2516:	46bd      	mov	sp, r7
    2518:	bd80      	pop	{r7, pc}
    251a:	bf00      	nop
    251c:	0001131c 	.word	0x0001131c
    2520:	00003f79 	.word	0x00003f79
    2524:	000044d5 	.word	0x000044d5
    2528:	00002535 	.word	0x00002535
    252c:	00002559 	.word	0x00002559
    2530:	0000257d 	.word	0x0000257d

00002534 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    2534:	b580      	push	{r7, lr}
    2536:	b084      	sub	sp, #16
    2538:	af00      	add	r7, sp, #0
    253a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2540:	68fb      	ldr	r3, [r7, #12]
    2542:	69db      	ldr	r3, [r3, #28]
    2544:	2b00      	cmp	r3, #0
    2546:	d003      	beq.n	2550 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	69db      	ldr	r3, [r3, #28]
    254c:	68f8      	ldr	r0, [r7, #12]
    254e:	4798      	blx	r3
	}
}
    2550:	bf00      	nop
    2552:	3710      	adds	r7, #16
    2554:	46bd      	mov	sp, r7
    2556:	bd80      	pop	{r7, pc}

00002558 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2558:	b580      	push	{r7, lr}
    255a:	b084      	sub	sp, #16
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2564:	68fb      	ldr	r3, [r7, #12]
    2566:	6a1b      	ldr	r3, [r3, #32]
    2568:	2b00      	cmp	r3, #0
    256a:	d003      	beq.n	2574 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    256c:	68fb      	ldr	r3, [r7, #12]
    256e:	6a1b      	ldr	r3, [r3, #32]
    2570:	68f8      	ldr	r0, [r7, #12]
    2572:	4798      	blx	r3
	}
}
    2574:	bf00      	nop
    2576:	3710      	adds	r7, #16
    2578:	46bd      	mov	sp, r7
    257a:	bd80      	pop	{r7, pc}

0000257c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    257c:	b580      	push	{r7, lr}
    257e:	b084      	sub	sp, #16
    2580:	af00      	add	r7, sp, #0
    2582:	6078      	str	r0, [r7, #4]
    2584:	460b      	mov	r3, r1
    2586:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2588:	687b      	ldr	r3, [r7, #4]
    258a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    258c:	68fb      	ldr	r3, [r7, #12]
    258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2590:	2b00      	cmp	r3, #0
    2592:	d005      	beq.n	25a0 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2594:	68fb      	ldr	r3, [r7, #12]
    2596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2598:	78fa      	ldrb	r2, [r7, #3]
    259a:	4611      	mov	r1, r2
    259c:	68f8      	ldr	r0, [r7, #12]
    259e:	4798      	blx	r3
	}
}
    25a0:	bf00      	nop
    25a2:	3710      	adds	r7, #16
    25a4:	46bd      	mov	sp, r7
    25a6:	bd80      	pop	{r7, pc}

000025a8 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    25a8:	b580      	push	{r7, lr}
    25aa:	b082      	sub	sp, #8
    25ac:	af00      	add	r7, sp, #0
    25ae:	6078      	str	r0, [r7, #4]
    25b0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    25b2:	687b      	ldr	r3, [r7, #4]
    25b4:	2b00      	cmp	r3, #0
    25b6:	d004      	beq.n	25c2 <crc_sync_init+0x1a>
    25b8:	683b      	ldr	r3, [r7, #0]
    25ba:	2b00      	cmp	r3, #0
    25bc:	d001      	beq.n	25c2 <crc_sync_init+0x1a>
    25be:	2301      	movs	r3, #1
    25c0:	e000      	b.n	25c4 <crc_sync_init+0x1c>
    25c2:	2300      	movs	r3, #0
    25c4:	f003 0301 	and.w	r3, r3, #1
    25c8:	b2db      	uxtb	r3, r3
    25ca:	222b      	movs	r2, #43	; 0x2b
    25cc:	4906      	ldr	r1, [pc, #24]	; (25e8 <crc_sync_init+0x40>)
    25ce:	4618      	mov	r0, r3
    25d0:	4b06      	ldr	r3, [pc, #24]	; (25ec <crc_sync_init+0x44>)
    25d2:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	6839      	ldr	r1, [r7, #0]
    25d8:	4618      	mov	r0, r3
    25da:	4b05      	ldr	r3, [pc, #20]	; (25f0 <crc_sync_init+0x48>)
    25dc:	4798      	blx	r3
    25de:	4603      	mov	r3, r0
}
    25e0:	4618      	mov	r0, r3
    25e2:	3708      	adds	r7, #8
    25e4:	46bd      	mov	sp, r7
    25e6:	bd80      	pop	{r7, pc}
    25e8:	00011338 	.word	0x00011338
    25ec:	00003f79 	.word	0x00003f79
    25f0:	00004bd5 	.word	0x00004bd5

000025f4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    25f4:	b590      	push	{r4, r7, lr}
    25f6:	b083      	sub	sp, #12
    25f8:	af00      	add	r7, sp, #0
    25fa:	4603      	mov	r3, r0
    25fc:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    25fe:	4b07      	ldr	r3, [pc, #28]	; (261c <delay_us+0x28>)
    2600:	681c      	ldr	r4, [r3, #0]
    2602:	88fb      	ldrh	r3, [r7, #6]
    2604:	4618      	mov	r0, r3
    2606:	4b06      	ldr	r3, [pc, #24]	; (2620 <delay_us+0x2c>)
    2608:	4798      	blx	r3
    260a:	4603      	mov	r3, r0
    260c:	4619      	mov	r1, r3
    260e:	4620      	mov	r0, r4
    2610:	4b04      	ldr	r3, [pc, #16]	; (2624 <delay_us+0x30>)
    2612:	4798      	blx	r3
}
    2614:	bf00      	nop
    2616:	370c      	adds	r7, #12
    2618:	46bd      	mov	sp, r7
    261a:	bd90      	pop	{r4, r7, pc}
    261c:	20002ecc 	.word	0x20002ecc
    2620:	0000492d 	.word	0x0000492d
    2624:	00004ac1 	.word	0x00004ac1

00002628 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2628:	b590      	push	{r4, r7, lr}
    262a:	b083      	sub	sp, #12
    262c:	af00      	add	r7, sp, #0
    262e:	4603      	mov	r3, r0
    2630:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2632:	4b07      	ldr	r3, [pc, #28]	; (2650 <delay_ms+0x28>)
    2634:	681c      	ldr	r4, [r3, #0]
    2636:	88fb      	ldrh	r3, [r7, #6]
    2638:	4618      	mov	r0, r3
    263a:	4b06      	ldr	r3, [pc, #24]	; (2654 <delay_ms+0x2c>)
    263c:	4798      	blx	r3
    263e:	4603      	mov	r3, r0
    2640:	4619      	mov	r1, r3
    2642:	4620      	mov	r0, r4
    2644:	4b04      	ldr	r3, [pc, #16]	; (2658 <delay_ms+0x30>)
    2646:	4798      	blx	r3
}
    2648:	bf00      	nop
    264a:	370c      	adds	r7, #12
    264c:	46bd      	mov	sp, r7
    264e:	bd90      	pop	{r4, r7, pc}
    2650:	20002ecc 	.word	0x20002ecc
    2654:	00004a99 	.word	0x00004a99
    2658:	00004ac1 	.word	0x00004ac1

0000265c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    265c:	b580      	push	{r7, lr}
    265e:	af00      	add	r7, sp, #0
	return _event_system_init();
    2660:	4b02      	ldr	r3, [pc, #8]	; (266c <event_system_init+0x10>)
    2662:	4798      	blx	r3
    2664:	4603      	mov	r3, r0
}
    2666:	4618      	mov	r0, r3
    2668:	bd80      	pop	{r7, pc}
    266a:	bf00      	nop
    266c:	00005305 	.word	0x00005305

00002670 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2670:	b580      	push	{r7, lr}
    2672:	b082      	sub	sp, #8
    2674:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2676:	2300      	movs	r3, #0
    2678:	80fb      	strh	r3, [r7, #6]
    267a:	e00e      	b.n	269a <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    267c:	88fb      	ldrh	r3, [r7, #6]
    267e:	4a0c      	ldr	r2, [pc, #48]	; (26b0 <ext_irq_init+0x40>)
    2680:	00db      	lsls	r3, r3, #3
    2682:	4413      	add	r3, r2
    2684:	f04f 32ff 	mov.w	r2, #4294967295
    2688:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    268a:	88fb      	ldrh	r3, [r7, #6]
    268c:	4a08      	ldr	r2, [pc, #32]	; (26b0 <ext_irq_init+0x40>)
    268e:	2100      	movs	r1, #0
    2690:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2694:	88fb      	ldrh	r3, [r7, #6]
    2696:	3301      	adds	r3, #1
    2698:	80fb      	strh	r3, [r7, #6]
    269a:	88fb      	ldrh	r3, [r7, #6]
    269c:	2b04      	cmp	r3, #4
    269e:	d9ed      	bls.n	267c <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    26a0:	4804      	ldr	r0, [pc, #16]	; (26b4 <ext_irq_init+0x44>)
    26a2:	4b05      	ldr	r3, [pc, #20]	; (26b8 <ext_irq_init+0x48>)
    26a4:	4798      	blx	r3
    26a6:	4603      	mov	r3, r0
}
    26a8:	4618      	mov	r0, r3
    26aa:	3708      	adds	r7, #8
    26ac:	46bd      	mov	sp, r7
    26ae:	bd80      	pop	{r7, pc}
    26b0:	20002ed0 	.word	0x20002ed0
    26b4:	00002815 	.word	0x00002815
    26b8:	00004f15 	.word	0x00004f15

000026bc <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    26bc:	b580      	push	{r7, lr}
    26be:	b086      	sub	sp, #24
    26c0:	af00      	add	r7, sp, #0
    26c2:	6078      	str	r0, [r7, #4]
    26c4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    26c6:	2300      	movs	r3, #0
    26c8:	75fb      	strb	r3, [r7, #23]
    26ca:	2300      	movs	r3, #0
    26cc:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    26ce:	2300      	movs	r3, #0
    26d0:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    26d2:	e012      	b.n	26fa <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    26d4:	7dfb      	ldrb	r3, [r7, #23]
    26d6:	4a4d      	ldr	r2, [pc, #308]	; (280c <ext_irq_register+0x150>)
    26d8:	00db      	lsls	r3, r3, #3
    26da:	4413      	add	r3, r2
    26dc:	685a      	ldr	r2, [r3, #4]
    26de:	687b      	ldr	r3, [r7, #4]
    26e0:	429a      	cmp	r2, r3
    26e2:	d107      	bne.n	26f4 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    26e4:	7dfb      	ldrb	r3, [r7, #23]
    26e6:	4949      	ldr	r1, [pc, #292]	; (280c <ext_irq_register+0x150>)
    26e8:	683a      	ldr	r2, [r7, #0]
    26ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    26ee:	2301      	movs	r3, #1
    26f0:	757b      	strb	r3, [r7, #21]
			break;
    26f2:	e005      	b.n	2700 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    26f4:	7dfb      	ldrb	r3, [r7, #23]
    26f6:	3301      	adds	r3, #1
    26f8:	75fb      	strb	r3, [r7, #23]
    26fa:	7dfb      	ldrb	r3, [r7, #23]
    26fc:	2b04      	cmp	r3, #4
    26fe:	d9e9      	bls.n	26d4 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2700:	683b      	ldr	r3, [r7, #0]
    2702:	2b00      	cmp	r3, #0
    2704:	d10e      	bne.n	2724 <ext_irq_register+0x68>
		if (!found) {
    2706:	7d7b      	ldrb	r3, [r7, #21]
    2708:	f083 0301 	eor.w	r3, r3, #1
    270c:	b2db      	uxtb	r3, r3
    270e:	2b00      	cmp	r3, #0
    2710:	d002      	beq.n	2718 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    2712:	f06f 030c 	mvn.w	r3, #12
    2716:	e074      	b.n	2802 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2718:	2100      	movs	r1, #0
    271a:	6878      	ldr	r0, [r7, #4]
    271c:	4b3c      	ldr	r3, [pc, #240]	; (2810 <ext_irq_register+0x154>)
    271e:	4798      	blx	r3
    2720:	4603      	mov	r3, r0
    2722:	e06e      	b.n	2802 <ext_irq_register+0x146>
	}

	if (!found) {
    2724:	7d7b      	ldrb	r3, [r7, #21]
    2726:	f083 0301 	eor.w	r3, r3, #1
    272a:	b2db      	uxtb	r3, r3
    272c:	2b00      	cmp	r3, #0
    272e:	d05a      	beq.n	27e6 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2730:	2300      	movs	r3, #0
    2732:	75fb      	strb	r3, [r7, #23]
    2734:	e016      	b.n	2764 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2736:	7dfb      	ldrb	r3, [r7, #23]
    2738:	4a34      	ldr	r2, [pc, #208]	; (280c <ext_irq_register+0x150>)
    273a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    273e:	2b00      	cmp	r3, #0
    2740:	d10d      	bne.n	275e <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2742:	7dfb      	ldrb	r3, [r7, #23]
    2744:	4931      	ldr	r1, [pc, #196]	; (280c <ext_irq_register+0x150>)
    2746:	683a      	ldr	r2, [r7, #0]
    2748:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    274c:	7dfb      	ldrb	r3, [r7, #23]
    274e:	4a2f      	ldr	r2, [pc, #188]	; (280c <ext_irq_register+0x150>)
    2750:	00db      	lsls	r3, r3, #3
    2752:	4413      	add	r3, r2
    2754:	687a      	ldr	r2, [r7, #4]
    2756:	605a      	str	r2, [r3, #4]
				found           = true;
    2758:	2301      	movs	r3, #1
    275a:	757b      	strb	r3, [r7, #21]
				break;
    275c:	e005      	b.n	276a <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    275e:	7dfb      	ldrb	r3, [r7, #23]
    2760:	3301      	adds	r3, #1
    2762:	75fb      	strb	r3, [r7, #23]
    2764:	7dfb      	ldrb	r3, [r7, #23]
    2766:	2b04      	cmp	r3, #4
    2768:	d9e5      	bls.n	2736 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    276a:	e036      	b.n	27da <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    276c:	7dfb      	ldrb	r3, [r7, #23]
    276e:	4a27      	ldr	r2, [pc, #156]	; (280c <ext_irq_register+0x150>)
    2770:	00db      	lsls	r3, r3, #3
    2772:	4413      	add	r3, r2
    2774:	685a      	ldr	r2, [r3, #4]
    2776:	7dbb      	ldrb	r3, [r7, #22]
    2778:	4924      	ldr	r1, [pc, #144]	; (280c <ext_irq_register+0x150>)
    277a:	00db      	lsls	r3, r3, #3
    277c:	440b      	add	r3, r1
    277e:	685b      	ldr	r3, [r3, #4]
    2780:	429a      	cmp	r2, r3
    2782:	d227      	bcs.n	27d4 <ext_irq_register+0x118>
    2784:	7dbb      	ldrb	r3, [r7, #22]
    2786:	4a21      	ldr	r2, [pc, #132]	; (280c <ext_irq_register+0x150>)
    2788:	00db      	lsls	r3, r3, #3
    278a:	4413      	add	r3, r2
    278c:	685b      	ldr	r3, [r3, #4]
    278e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2792:	d01f      	beq.n	27d4 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2794:	7dbb      	ldrb	r3, [r7, #22]
    2796:	491d      	ldr	r1, [pc, #116]	; (280c <ext_irq_register+0x150>)
    2798:	f107 020c 	add.w	r2, r7, #12
    279c:	00db      	lsls	r3, r3, #3
    279e:	440b      	add	r3, r1
    27a0:	e893 0003 	ldmia.w	r3, {r0, r1}
    27a4:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    27a8:	7dbb      	ldrb	r3, [r7, #22]
    27aa:	7dfa      	ldrb	r2, [r7, #23]
    27ac:	4817      	ldr	r0, [pc, #92]	; (280c <ext_irq_register+0x150>)
    27ae:	4917      	ldr	r1, [pc, #92]	; (280c <ext_irq_register+0x150>)
    27b0:	00db      	lsls	r3, r3, #3
    27b2:	4403      	add	r3, r0
    27b4:	00d2      	lsls	r2, r2, #3
    27b6:	440a      	add	r2, r1
    27b8:	e892 0003 	ldmia.w	r2, {r0, r1}
    27bc:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    27c0:	7dfb      	ldrb	r3, [r7, #23]
    27c2:	4a12      	ldr	r2, [pc, #72]	; (280c <ext_irq_register+0x150>)
    27c4:	00db      	lsls	r3, r3, #3
    27c6:	4413      	add	r3, r2
    27c8:	f107 020c 	add.w	r2, r7, #12
    27cc:	e892 0003 	ldmia.w	r2, {r0, r1}
    27d0:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    27d4:	7dbb      	ldrb	r3, [r7, #22]
    27d6:	3301      	adds	r3, #1
    27d8:	75bb      	strb	r3, [r7, #22]
    27da:	7dbb      	ldrb	r3, [r7, #22]
    27dc:	2b04      	cmp	r3, #4
    27de:	d802      	bhi.n	27e6 <ext_irq_register+0x12a>
    27e0:	7dfb      	ldrb	r3, [r7, #23]
    27e2:	2b04      	cmp	r3, #4
    27e4:	d9c2      	bls.n	276c <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    27e6:	7d7b      	ldrb	r3, [r7, #21]
    27e8:	f083 0301 	eor.w	r3, r3, #1
    27ec:	b2db      	uxtb	r3, r3
    27ee:	2b00      	cmp	r3, #0
    27f0:	d002      	beq.n	27f8 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    27f2:	f06f 030c 	mvn.w	r3, #12
    27f6:	e004      	b.n	2802 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    27f8:	2101      	movs	r1, #1
    27fa:	6878      	ldr	r0, [r7, #4]
    27fc:	4b04      	ldr	r3, [pc, #16]	; (2810 <ext_irq_register+0x154>)
    27fe:	4798      	blx	r3
    2800:	4603      	mov	r3, r0
}
    2802:	4618      	mov	r0, r3
    2804:	3718      	adds	r7, #24
    2806:	46bd      	mov	sp, r7
    2808:	bd80      	pop	{r7, pc}
    280a:	bf00      	nop
    280c:	20002ed0 	.word	0x20002ed0
    2810:	0000505d 	.word	0x0000505d

00002814 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2814:	b580      	push	{r7, lr}
    2816:	b084      	sub	sp, #16
    2818:	af00      	add	r7, sp, #0
    281a:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    281c:	2300      	movs	r3, #0
    281e:	73fb      	strb	r3, [r7, #15]
    2820:	2305      	movs	r3, #5
    2822:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2824:	e02a      	b.n	287c <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2826:	7bba      	ldrb	r2, [r7, #14]
    2828:	7bfb      	ldrb	r3, [r7, #15]
    282a:	4413      	add	r3, r2
    282c:	105b      	asrs	r3, r3, #1
    282e:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2830:	7b7b      	ldrb	r3, [r7, #13]
    2832:	2b04      	cmp	r3, #4
    2834:	d827      	bhi.n	2886 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2836:	7b7b      	ldrb	r3, [r7, #13]
    2838:	4a16      	ldr	r2, [pc, #88]	; (2894 <process_ext_irq+0x80>)
    283a:	00db      	lsls	r3, r3, #3
    283c:	4413      	add	r3, r2
    283e:	685a      	ldr	r2, [r3, #4]
    2840:	687b      	ldr	r3, [r7, #4]
    2842:	429a      	cmp	r2, r3
    2844:	d10b      	bne.n	285e <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2846:	7b7b      	ldrb	r3, [r7, #13]
    2848:	4a12      	ldr	r2, [pc, #72]	; (2894 <process_ext_irq+0x80>)
    284a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    284e:	2b00      	cmp	r3, #0
    2850:	d01b      	beq.n	288a <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    2852:	7b7b      	ldrb	r3, [r7, #13]
    2854:	4a0f      	ldr	r2, [pc, #60]	; (2894 <process_ext_irq+0x80>)
    2856:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    285a:	4798      	blx	r3
			}
			return;
    285c:	e015      	b.n	288a <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    285e:	7b7b      	ldrb	r3, [r7, #13]
    2860:	4a0c      	ldr	r2, [pc, #48]	; (2894 <process_ext_irq+0x80>)
    2862:	00db      	lsls	r3, r3, #3
    2864:	4413      	add	r3, r2
    2866:	685a      	ldr	r2, [r3, #4]
    2868:	687b      	ldr	r3, [r7, #4]
    286a:	429a      	cmp	r2, r3
    286c:	d203      	bcs.n	2876 <process_ext_irq+0x62>
			lower = middle + 1;
    286e:	7b7b      	ldrb	r3, [r7, #13]
    2870:	3301      	adds	r3, #1
    2872:	73fb      	strb	r3, [r7, #15]
    2874:	e002      	b.n	287c <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    2876:	7b7b      	ldrb	r3, [r7, #13]
    2878:	3b01      	subs	r3, #1
    287a:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    287c:	7bba      	ldrb	r2, [r7, #14]
    287e:	7bfb      	ldrb	r3, [r7, #15]
    2880:	429a      	cmp	r2, r3
    2882:	d2d0      	bcs.n	2826 <process_ext_irq+0x12>
    2884:	e002      	b.n	288c <process_ext_irq+0x78>
			return;
    2886:	bf00      	nop
    2888:	e000      	b.n	288c <process_ext_irq+0x78>
			return;
    288a:	bf00      	nop
		}
	}
}
    288c:	3710      	adds	r7, #16
    288e:	46bd      	mov	sp, r7
    2890:	bd80      	pop	{r7, pc}
    2892:	bf00      	nop
    2894:	20002ed0 	.word	0x20002ed0

00002898 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    2898:	b580      	push	{r7, lr}
    289a:	b084      	sub	sp, #16
    289c:	af00      	add	r7, sp, #0
    289e:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    28a4:	687b      	ldr	r3, [r7, #4]
    28a6:	885b      	ldrh	r3, [r3, #2]
    28a8:	b29b      	uxth	r3, r3
    28aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
    28ae:	2b00      	cmp	r3, #0
    28b0:	d107      	bne.n	28c2 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    28b2:	68fb      	ldr	r3, [r7, #12]
    28b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    28b6:	2b00      	cmp	r3, #0
    28b8:	d003      	beq.n	28c2 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    28ba:	68fb      	ldr	r3, [r7, #12]
    28bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    28be:	68f8      	ldr	r0, [r7, #12]
    28c0:	4798      	blx	r3
		}
	}
}
    28c2:	bf00      	nop
    28c4:	3710      	adds	r7, #16
    28c6:	46bd      	mov	sp, r7
    28c8:	bd80      	pop	{r7, pc}

000028ca <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    28ca:	b580      	push	{r7, lr}
    28cc:	b084      	sub	sp, #16
    28ce:	af00      	add	r7, sp, #0
    28d0:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    28d2:	687b      	ldr	r3, [r7, #4]
    28d4:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	885b      	ldrh	r3, [r3, #2]
    28da:	b29b      	uxth	r3, r3
    28dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    28e0:	2b00      	cmp	r3, #0
    28e2:	d107      	bne.n	28f4 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    28e4:	68fb      	ldr	r3, [r7, #12]
    28e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    28e8:	2b00      	cmp	r3, #0
    28ea:	d003      	beq.n	28f4 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    28ec:	68fb      	ldr	r3, [r7, #12]
    28ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    28f0:	68f8      	ldr	r0, [r7, #12]
    28f2:	4798      	blx	r3
		}
	}
}
    28f4:	bf00      	nop
    28f6:	3710      	adds	r7, #16
    28f8:	46bd      	mov	sp, r7
    28fa:	bd80      	pop	{r7, pc}

000028fc <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    28fc:	b580      	push	{r7, lr}
    28fe:	b084      	sub	sp, #16
    2900:	af00      	add	r7, sp, #0
    2902:	6078      	str	r0, [r7, #4]
    2904:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    2906:	687b      	ldr	r3, [r7, #4]
    2908:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    290a:	687b      	ldr	r3, [r7, #4]
    290c:	885b      	ldrh	r3, [r3, #2]
    290e:	b29b      	uxth	r3, r3
    2910:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2914:	2b00      	cmp	r3, #0
    2916:	d108      	bne.n	292a <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    2918:	68fb      	ldr	r3, [r7, #12]
    291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    291c:	2b00      	cmp	r3, #0
    291e:	d004      	beq.n	292a <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    2920:	68fb      	ldr	r3, [r7, #12]
    2922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2924:	6839      	ldr	r1, [r7, #0]
    2926:	68f8      	ldr	r0, [r7, #12]
    2928:	4798      	blx	r3
		}
	}
}
    292a:	bf00      	nop
    292c:	3710      	adds	r7, #16
    292e:	46bd      	mov	sp, r7
    2930:	bd80      	pop	{r7, pc}
	...

00002934 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    2934:	b580      	push	{r7, lr}
    2936:	b08a      	sub	sp, #40	; 0x28
    2938:	af00      	add	r7, sp, #0
    293a:	60f8      	str	r0, [r7, #12]
    293c:	60b9      	str	r1, [r7, #8]
    293e:	4613      	mov	r3, r2
    2940:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2942:	68fb      	ldr	r3, [r7, #12]
    2944:	3b28      	subs	r3, #40	; 0x28
    2946:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    294a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    294c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    294e:	88fb      	ldrh	r3, [r7, #6]
    2950:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2952:	f248 0301 	movw	r3, #32769	; 0x8001
    2956:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2958:	68bb      	ldr	r3, [r7, #8]
    295a:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    295e:	f107 0214 	add.w	r2, r7, #20
    2962:	4611      	mov	r1, r2
    2964:	4618      	mov	r0, r3
    2966:	4b06      	ldr	r3, [pc, #24]	; (2980 <i2c_m_async_read+0x4c>)
    2968:	4798      	blx	r3
    296a:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    296c:	6a3b      	ldr	r3, [r7, #32]
    296e:	2b00      	cmp	r3, #0
    2970:	d001      	beq.n	2976 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    2972:	6a3b      	ldr	r3, [r7, #32]
    2974:	e000      	b.n	2978 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    2976:	88fb      	ldrh	r3, [r7, #6]
}
    2978:	4618      	mov	r0, r3
    297a:	3728      	adds	r7, #40	; 0x28
    297c:	46bd      	mov	sp, r7
    297e:	bd80      	pop	{r7, pc}
    2980:	00007199 	.word	0x00007199

00002984 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    2984:	b580      	push	{r7, lr}
    2986:	b08a      	sub	sp, #40	; 0x28
    2988:	af00      	add	r7, sp, #0
    298a:	60f8      	str	r0, [r7, #12]
    298c:	60b9      	str	r1, [r7, #8]
    298e:	4613      	mov	r3, r2
    2990:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2992:	68fb      	ldr	r3, [r7, #12]
    2994:	3b28      	subs	r3, #40	; 0x28
    2996:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    2998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    299a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    299c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    299e:	88fb      	ldrh	r3, [r7, #6]
    29a0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    29a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    29a6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    29a8:	68bb      	ldr	r3, [r7, #8]
    29aa:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    29ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    29ae:	f107 0214 	add.w	r2, r7, #20
    29b2:	4611      	mov	r1, r2
    29b4:	4618      	mov	r0, r3
    29b6:	4b06      	ldr	r3, [pc, #24]	; (29d0 <i2c_m_async_write+0x4c>)
    29b8:	4798      	blx	r3
    29ba:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    29bc:	6a3b      	ldr	r3, [r7, #32]
    29be:	2b00      	cmp	r3, #0
    29c0:	d001      	beq.n	29c6 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    29c2:	6a3b      	ldr	r3, [r7, #32]
    29c4:	e000      	b.n	29c8 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    29c6:	88fb      	ldrh	r3, [r7, #6]
}
    29c8:	4618      	mov	r0, r3
    29ca:	3728      	adds	r7, #40	; 0x28
    29cc:	46bd      	mov	sp, r7
    29ce:	bd80      	pop	{r7, pc}
    29d0:	00007199 	.word	0x00007199

000029d4 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    29d4:	b580      	push	{r7, lr}
    29d6:	b084      	sub	sp, #16
    29d8:	af00      	add	r7, sp, #0
    29da:	6078      	str	r0, [r7, #4]
    29dc:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    29de:	687b      	ldr	r3, [r7, #4]
    29e0:	2b00      	cmp	r3, #0
    29e2:	bf14      	ite	ne
    29e4:	2301      	movne	r3, #1
    29e6:	2300      	moveq	r3, #0
    29e8:	b2db      	uxtb	r3, r3
    29ea:	2289      	movs	r2, #137	; 0x89
    29ec:	4915      	ldr	r1, [pc, #84]	; (2a44 <i2c_m_async_init+0x70>)
    29ee:	4618      	mov	r0, r3
    29f0:	4b15      	ldr	r3, [pc, #84]	; (2a48 <i2c_m_async_init+0x74>)
    29f2:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    29f4:	687b      	ldr	r3, [r7, #4]
    29f6:	6839      	ldr	r1, [r7, #0]
    29f8:	4618      	mov	r0, r3
    29fa:	4b14      	ldr	r3, [pc, #80]	; (2a4c <i2c_m_async_init+0x78>)
    29fc:	4798      	blx	r3
    29fe:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	2b00      	cmp	r3, #0
    2a04:	d001      	beq.n	2a0a <i2c_m_async_init+0x36>
		return init_status;
    2a06:	68fb      	ldr	r3, [r7, #12]
    2a08:	e018      	b.n	2a3c <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    2a0a:	687b      	ldr	r3, [r7, #4]
    2a0c:	4a10      	ldr	r2, [pc, #64]	; (2a50 <i2c_m_async_init+0x7c>)
    2a0e:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    2a10:	687b      	ldr	r3, [r7, #4]
    2a12:	4a10      	ldr	r2, [pc, #64]	; (2a54 <i2c_m_async_init+0x80>)
    2a14:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    2a16:	687b      	ldr	r3, [r7, #4]
    2a18:	4a0f      	ldr	r2, [pc, #60]	; (2a58 <i2c_m_async_init+0x84>)
    2a1a:	2101      	movs	r1, #1
    2a1c:	4618      	mov	r0, r3
    2a1e:	4b0f      	ldr	r3, [pc, #60]	; (2a5c <i2c_m_async_init+0x88>)
    2a20:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    2a22:	687b      	ldr	r3, [r7, #4]
    2a24:	4a0e      	ldr	r2, [pc, #56]	; (2a60 <i2c_m_async_init+0x8c>)
    2a26:	2102      	movs	r1, #2
    2a28:	4618      	mov	r0, r3
    2a2a:	4b0c      	ldr	r3, [pc, #48]	; (2a5c <i2c_m_async_init+0x88>)
    2a2c:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    2a2e:	687b      	ldr	r3, [r7, #4]
    2a30:	4a0c      	ldr	r2, [pc, #48]	; (2a64 <i2c_m_async_init+0x90>)
    2a32:	2100      	movs	r1, #0
    2a34:	4618      	mov	r0, r3
    2a36:	4b09      	ldr	r3, [pc, #36]	; (2a5c <i2c_m_async_init+0x88>)
    2a38:	4798      	blx	r3

	return ERR_NONE;
    2a3a:	2300      	movs	r3, #0
}
    2a3c:	4618      	mov	r0, r3
    2a3e:	3710      	adds	r7, #16
    2a40:	46bd      	mov	sp, r7
    2a42:	bd80      	pop	{r7, pc}
    2a44:	00011354 	.word	0x00011354
    2a48:	00003f79 	.word	0x00003f79
    2a4c:	00006fe9 	.word	0x00006fe9
    2a50:	00002935 	.word	0x00002935
    2a54:	00002985 	.word	0x00002985
    2a58:	00002899 	.word	0x00002899
    2a5c:	0000726d 	.word	0x0000726d
    2a60:	000028cb 	.word	0x000028cb
    2a64:	000028fd 	.word	0x000028fd

00002a68 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2a68:	b580      	push	{r7, lr}
    2a6a:	b084      	sub	sp, #16
    2a6c:	af00      	add	r7, sp, #0
    2a6e:	60f8      	str	r0, [r7, #12]
    2a70:	60b9      	str	r1, [r7, #8]
    2a72:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2a74:	68fb      	ldr	r3, [r7, #12]
    2a76:	2b00      	cmp	r3, #0
    2a78:	d004      	beq.n	2a84 <pwm_init+0x1c>
    2a7a:	68bb      	ldr	r3, [r7, #8]
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	d001      	beq.n	2a84 <pwm_init+0x1c>
    2a80:	2301      	movs	r3, #1
    2a82:	e000      	b.n	2a86 <pwm_init+0x1e>
    2a84:	2300      	movs	r3, #0
    2a86:	f003 0301 	and.w	r3, r3, #1
    2a8a:	b2db      	uxtb	r3, r3
    2a8c:	2233      	movs	r2, #51	; 0x33
    2a8e:	490a      	ldr	r1, [pc, #40]	; (2ab8 <pwm_init+0x50>)
    2a90:	4618      	mov	r0, r3
    2a92:	4b0a      	ldr	r3, [pc, #40]	; (2abc <pwm_init+0x54>)
    2a94:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2a96:	68fb      	ldr	r3, [r7, #12]
    2a98:	68b9      	ldr	r1, [r7, #8]
    2a9a:	4618      	mov	r0, r3
    2a9c:	4b08      	ldr	r3, [pc, #32]	; (2ac0 <pwm_init+0x58>)
    2a9e:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2aa0:	68fb      	ldr	r3, [r7, #12]
    2aa2:	4a08      	ldr	r2, [pc, #32]	; (2ac4 <pwm_init+0x5c>)
    2aa4:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2aa6:	68fb      	ldr	r3, [r7, #12]
    2aa8:	4a07      	ldr	r2, [pc, #28]	; (2ac8 <pwm_init+0x60>)
    2aaa:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2aac:	2300      	movs	r3, #0
}
    2aae:	4618      	mov	r0, r3
    2ab0:	3710      	adds	r7, #16
    2ab2:	46bd      	mov	sp, r7
    2ab4:	bd80      	pop	{r7, pc}
    2ab6:	bf00      	nop
    2ab8:	00011374 	.word	0x00011374
    2abc:	00003f79 	.word	0x00003f79
    2ac0:	0000841d 	.word	0x0000841d
    2ac4:	00002acd 	.word	0x00002acd
    2ac8:	00002af1 	.word	0x00002af1

00002acc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2acc:	b580      	push	{r7, lr}
    2ace:	b084      	sub	sp, #16
    2ad0:	af00      	add	r7, sp, #0
    2ad2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2ad4:	687b      	ldr	r3, [r7, #4]
    2ad6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2ad8:	68fb      	ldr	r3, [r7, #12]
    2ada:	695b      	ldr	r3, [r3, #20]
    2adc:	2b00      	cmp	r3, #0
    2ade:	d003      	beq.n	2ae8 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2ae0:	68fb      	ldr	r3, [r7, #12]
    2ae2:	695b      	ldr	r3, [r3, #20]
    2ae4:	68f8      	ldr	r0, [r7, #12]
    2ae6:	4798      	blx	r3
	}
}
    2ae8:	bf00      	nop
    2aea:	3710      	adds	r7, #16
    2aec:	46bd      	mov	sp, r7
    2aee:	bd80      	pop	{r7, pc}

00002af0 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2af0:	b580      	push	{r7, lr}
    2af2:	b084      	sub	sp, #16
    2af4:	af00      	add	r7, sp, #0
    2af6:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2afc:	68fb      	ldr	r3, [r7, #12]
    2afe:	699b      	ldr	r3, [r3, #24]
    2b00:	2b00      	cmp	r3, #0
    2b02:	d003      	beq.n	2b0c <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2b04:	68fb      	ldr	r3, [r7, #12]
    2b06:	699b      	ldr	r3, [r3, #24]
    2b08:	68f8      	ldr	r0, [r7, #12]
    2b0a:	4798      	blx	r3
	}
}
    2b0c:	bf00      	nop
    2b0e:	3710      	adds	r7, #16
    2b10:	46bd      	mov	sp, r7
    2b12:	bd80      	pop	{r7, pc}

00002b14 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2b14:	b580      	push	{r7, lr}
    2b16:	b082      	sub	sp, #8
    2b18:	af00      	add	r7, sp, #0
    2b1a:	6078      	str	r0, [r7, #4]
    2b1c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2b1e:	687b      	ldr	r3, [r7, #4]
    2b20:	2b00      	cmp	r3, #0
    2b22:	d004      	beq.n	2b2e <qspi_sync_init+0x1a>
    2b24:	683b      	ldr	r3, [r7, #0]
    2b26:	2b00      	cmp	r3, #0
    2b28:	d001      	beq.n	2b2e <qspi_sync_init+0x1a>
    2b2a:	2301      	movs	r3, #1
    2b2c:	e000      	b.n	2b30 <qspi_sync_init+0x1c>
    2b2e:	2300      	movs	r3, #0
    2b30:	f003 0301 	and.w	r3, r3, #1
    2b34:	b2db      	uxtb	r3, r3
    2b36:	2231      	movs	r2, #49	; 0x31
    2b38:	4906      	ldr	r1, [pc, #24]	; (2b54 <qspi_sync_init+0x40>)
    2b3a:	4618      	mov	r0, r3
    2b3c:	4b06      	ldr	r3, [pc, #24]	; (2b58 <qspi_sync_init+0x44>)
    2b3e:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	6839      	ldr	r1, [r7, #0]
    2b44:	4618      	mov	r0, r3
    2b46:	4b05      	ldr	r3, [pc, #20]	; (2b5c <qspi_sync_init+0x48>)
    2b48:	4798      	blx	r3
    2b4a:	4603      	mov	r3, r0
}
    2b4c:	4618      	mov	r0, r3
    2b4e:	3708      	adds	r7, #8
    2b50:	46bd      	mov	sp, r7
    2b52:	bd80      	pop	{r7, pc}
    2b54:	0001138c 	.word	0x0001138c
    2b58:	00003f79 	.word	0x00003f79
    2b5c:	00005ecd 	.word	0x00005ecd

00002b60 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2b60:	b580      	push	{r7, lr}
    2b62:	b082      	sub	sp, #8
    2b64:	af00      	add	r7, sp, #0
    2b66:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2b68:	687b      	ldr	r3, [r7, #4]
    2b6a:	2b00      	cmp	r3, #0
    2b6c:	bf14      	ite	ne
    2b6e:	2301      	movne	r3, #1
    2b70:	2300      	moveq	r3, #0
    2b72:	b2db      	uxtb	r3, r3
    2b74:	223f      	movs	r2, #63	; 0x3f
    2b76:	4906      	ldr	r1, [pc, #24]	; (2b90 <qspi_sync_enable+0x30>)
    2b78:	4618      	mov	r0, r3
    2b7a:	4b06      	ldr	r3, [pc, #24]	; (2b94 <qspi_sync_enable+0x34>)
    2b7c:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2b7e:	687b      	ldr	r3, [r7, #4]
    2b80:	4618      	mov	r0, r3
    2b82:	4b05      	ldr	r3, [pc, #20]	; (2b98 <qspi_sync_enable+0x38>)
    2b84:	4798      	blx	r3
    2b86:	4603      	mov	r3, r0
}
    2b88:	4618      	mov	r0, r3
    2b8a:	3708      	adds	r7, #8
    2b8c:	46bd      	mov	sp, r7
    2b8e:	bd80      	pop	{r7, pc}
    2b90:	0001138c 	.word	0x0001138c
    2b94:	00003f79 	.word	0x00003f79
    2b98:	00005f41 	.word	0x00005f41

00002b9c <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2b9c:	b580      	push	{r7, lr}
    2b9e:	b082      	sub	sp, #8
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	bf14      	ite	ne
    2baa:	2301      	movne	r3, #1
    2bac:	2300      	moveq	r3, #0
    2bae:	b2db      	uxtb	r3, r3
    2bb0:	2246      	movs	r2, #70	; 0x46
    2bb2:	4906      	ldr	r1, [pc, #24]	; (2bcc <qspi_sync_disable+0x30>)
    2bb4:	4618      	mov	r0, r3
    2bb6:	4b06      	ldr	r3, [pc, #24]	; (2bd0 <qspi_sync_disable+0x34>)
    2bb8:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2bba:	687b      	ldr	r3, [r7, #4]
    2bbc:	4618      	mov	r0, r3
    2bbe:	4b05      	ldr	r3, [pc, #20]	; (2bd4 <qspi_sync_disable+0x38>)
    2bc0:	4798      	blx	r3
    2bc2:	4603      	mov	r3, r0
}
    2bc4:	4618      	mov	r0, r3
    2bc6:	3708      	adds	r7, #8
    2bc8:	46bd      	mov	sp, r7
    2bca:	bd80      	pop	{r7, pc}
    2bcc:	0001138c 	.word	0x0001138c
    2bd0:	00003f79 	.word	0x00003f79
    2bd4:	00005f65 	.word	0x00005f65

00002bd8 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2bd8:	b580      	push	{r7, lr}
    2bda:	b082      	sub	sp, #8
    2bdc:	af00      	add	r7, sp, #0
    2bde:	6078      	str	r0, [r7, #4]
    2be0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2be2:	687b      	ldr	r3, [r7, #4]
    2be4:	2b00      	cmp	r3, #0
    2be6:	d004      	beq.n	2bf2 <qspi_sync_serial_run_command+0x1a>
    2be8:	683b      	ldr	r3, [r7, #0]
    2bea:	2b00      	cmp	r3, #0
    2bec:	d001      	beq.n	2bf2 <qspi_sync_serial_run_command+0x1a>
    2bee:	2301      	movs	r3, #1
    2bf0:	e000      	b.n	2bf4 <qspi_sync_serial_run_command+0x1c>
    2bf2:	2300      	movs	r3, #0
    2bf4:	f003 0301 	and.w	r3, r3, #1
    2bf8:	b2db      	uxtb	r3, r3
    2bfa:	224d      	movs	r2, #77	; 0x4d
    2bfc:	4906      	ldr	r1, [pc, #24]	; (2c18 <qspi_sync_serial_run_command+0x40>)
    2bfe:	4618      	mov	r0, r3
    2c00:	4b06      	ldr	r3, [pc, #24]	; (2c1c <qspi_sync_serial_run_command+0x44>)
    2c02:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2c04:	687b      	ldr	r3, [r7, #4]
    2c06:	6839      	ldr	r1, [r7, #0]
    2c08:	4618      	mov	r0, r3
    2c0a:	4b05      	ldr	r3, [pc, #20]	; (2c20 <qspi_sync_serial_run_command+0x48>)
    2c0c:	4798      	blx	r3
    2c0e:	4603      	mov	r3, r0
}
    2c10:	4618      	mov	r0, r3
    2c12:	3708      	adds	r7, #8
    2c14:	46bd      	mov	sp, r7
    2c16:	bd80      	pop	{r7, pc}
    2c18:	0001138c 	.word	0x0001138c
    2c1c:	00003f79 	.word	0x00003f79
    2c20:	000060b1 	.word	0x000060b1

00002c24 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    2c24:	b580      	push	{r7, lr}
    2c26:	b084      	sub	sp, #16
    2c28:	af00      	add	r7, sp, #0
    2c2a:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2c2c:	687b      	ldr	r3, [r7, #4]
    2c2e:	3b04      	subs	r3, #4
    2c30:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	791b      	ldrb	r3, [r3, #4]
    2c36:	2b01      	cmp	r3, #1
    2c38:	d80e      	bhi.n	2c58 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    2c3a:	68fb      	ldr	r3, [r7, #12]
    2c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2c3e:	68fb      	ldr	r3, [r7, #12]
    2c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2c42:	1c58      	adds	r0, r3, #1
    2c44:	68f9      	ldr	r1, [r7, #12]
    2c46:	6448      	str	r0, [r1, #68]	; 0x44
    2c48:	4413      	add	r3, r2
    2c4a:	781b      	ldrb	r3, [r3, #0]
    2c4c:	b29b      	uxth	r3, r3
    2c4e:	4619      	mov	r1, r3
    2c50:	6878      	ldr	r0, [r7, #4]
    2c52:	4b11      	ldr	r3, [pc, #68]	; (2c98 <_spi_dev_tx+0x74>)
    2c54:	4798      	blx	r3
    2c56:	e00d      	b.n	2c74 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    2c58:	68fb      	ldr	r3, [r7, #12]
    2c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2c5c:	68fb      	ldr	r3, [r7, #12]
    2c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2c60:	1c58      	adds	r0, r3, #1
    2c62:	68f9      	ldr	r1, [r7, #12]
    2c64:	6448      	str	r0, [r1, #68]	; 0x44
    2c66:	005b      	lsls	r3, r3, #1
    2c68:	4413      	add	r3, r2
    2c6a:	881b      	ldrh	r3, [r3, #0]
    2c6c:	4619      	mov	r1, r3
    2c6e:	6878      	ldr	r0, [r7, #4]
    2c70:	4b09      	ldr	r3, [pc, #36]	; (2c98 <_spi_dev_tx+0x74>)
    2c72:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    2c74:	68fb      	ldr	r3, [r7, #12]
    2c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2c78:	68fb      	ldr	r3, [r7, #12]
    2c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2c7c:	429a      	cmp	r2, r3
    2c7e:	d107      	bne.n	2c90 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    2c80:	2100      	movs	r1, #0
    2c82:	6878      	ldr	r0, [r7, #4]
    2c84:	4b05      	ldr	r3, [pc, #20]	; (2c9c <_spi_dev_tx+0x78>)
    2c86:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    2c88:	2101      	movs	r1, #1
    2c8a:	6878      	ldr	r0, [r7, #4]
    2c8c:	4b04      	ldr	r3, [pc, #16]	; (2ca0 <_spi_dev_tx+0x7c>)
    2c8e:	4798      	blx	r3
	}
}
    2c90:	bf00      	nop
    2c92:	3710      	adds	r7, #16
    2c94:	46bd      	mov	sp, r7
    2c96:	bd80      	pop	{r7, pc}
    2c98:	00007ccd 	.word	0x00007ccd
    2c9c:	00007b91 	.word	0x00007b91
    2ca0:	00007c65 	.word	0x00007c65

00002ca4 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    2ca4:	b590      	push	{r4, r7, lr}
    2ca6:	b085      	sub	sp, #20
    2ca8:	af00      	add	r7, sp, #0
    2caa:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	3b04      	subs	r3, #4
    2cb0:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    2cb2:	68fb      	ldr	r3, [r7, #12]
    2cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d021      	beq.n	2cfe <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    2cba:	687b      	ldr	r3, [r7, #4]
    2cbc:	791b      	ldrb	r3, [r3, #4]
    2cbe:	2b01      	cmp	r3, #1
    2cc0:	d80e      	bhi.n	2ce0 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    2cc2:	68fb      	ldr	r3, [r7, #12]
    2cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2cc6:	68fb      	ldr	r3, [r7, #12]
    2cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2cca:	1c58      	adds	r0, r3, #1
    2ccc:	68f9      	ldr	r1, [r7, #12]
    2cce:	6448      	str	r0, [r1, #68]	; 0x44
    2cd0:	18d4      	adds	r4, r2, r3
    2cd2:	6878      	ldr	r0, [r7, #4]
    2cd4:	4b2e      	ldr	r3, [pc, #184]	; (2d90 <_spi_dev_rx+0xec>)
    2cd6:	4798      	blx	r3
    2cd8:	4603      	mov	r3, r0
    2cda:	b2db      	uxtb	r3, r3
    2cdc:	7023      	strb	r3, [r4, #0]
    2cde:	e016      	b.n	2d0e <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    2ce0:	68fb      	ldr	r3, [r7, #12]
    2ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2ce4:	68fb      	ldr	r3, [r7, #12]
    2ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2ce8:	1c58      	adds	r0, r3, #1
    2cea:	68f9      	ldr	r1, [r7, #12]
    2cec:	6448      	str	r0, [r1, #68]	; 0x44
    2cee:	005b      	lsls	r3, r3, #1
    2cf0:	18d4      	adds	r4, r2, r3
    2cf2:	6878      	ldr	r0, [r7, #4]
    2cf4:	4b26      	ldr	r3, [pc, #152]	; (2d90 <_spi_dev_rx+0xec>)
    2cf6:	4798      	blx	r3
    2cf8:	4603      	mov	r3, r0
    2cfa:	8023      	strh	r3, [r4, #0]
    2cfc:	e007      	b.n	2d0e <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    2cfe:	6878      	ldr	r0, [r7, #4]
    2d00:	4b23      	ldr	r3, [pc, #140]	; (2d90 <_spi_dev_rx+0xec>)
    2d02:	4798      	blx	r3
		spi->xfercnt++;
    2d04:	68fb      	ldr	r3, [r7, #12]
    2d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2d08:	1c5a      	adds	r2, r3, #1
    2d0a:	68fb      	ldr	r3, [r7, #12]
    2d0c:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    2d0e:	68fb      	ldr	r3, [r7, #12]
    2d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2d12:	68fb      	ldr	r3, [r7, #12]
    2d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2d16:	429a      	cmp	r2, r3
    2d18:	d226      	bcs.n	2d68 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    2d1a:	68fb      	ldr	r3, [r7, #12]
    2d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d1e:	2b00      	cmp	r3, #0
    2d20:	d01b      	beq.n	2d5a <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	791b      	ldrb	r3, [r3, #4]
    2d26:	2b01      	cmp	r3, #1
    2d28:	d80b      	bhi.n	2d42 <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    2d2a:	68fb      	ldr	r3, [r7, #12]
    2d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2d2e:	68fb      	ldr	r3, [r7, #12]
    2d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2d32:	4413      	add	r3, r2
    2d34:	781b      	ldrb	r3, [r3, #0]
    2d36:	b29b      	uxth	r3, r3
    2d38:	4619      	mov	r1, r3
    2d3a:	6878      	ldr	r0, [r7, #4]
    2d3c:	4b15      	ldr	r3, [pc, #84]	; (2d94 <_spi_dev_rx+0xf0>)
    2d3e:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    2d40:	e022      	b.n	2d88 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    2d42:	68fb      	ldr	r3, [r7, #12]
    2d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2d46:	68fb      	ldr	r3, [r7, #12]
    2d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2d4a:	005b      	lsls	r3, r3, #1
    2d4c:	4413      	add	r3, r2
    2d4e:	881b      	ldrh	r3, [r3, #0]
    2d50:	4619      	mov	r1, r3
    2d52:	6878      	ldr	r0, [r7, #4]
    2d54:	4b0f      	ldr	r3, [pc, #60]	; (2d94 <_spi_dev_rx+0xf0>)
    2d56:	4798      	blx	r3
}
    2d58:	e016      	b.n	2d88 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    2d5a:	687b      	ldr	r3, [r7, #4]
    2d5c:	88db      	ldrh	r3, [r3, #6]
    2d5e:	4619      	mov	r1, r3
    2d60:	6878      	ldr	r0, [r7, #4]
    2d62:	4b0c      	ldr	r3, [pc, #48]	; (2d94 <_spi_dev_rx+0xf0>)
    2d64:	4798      	blx	r3
}
    2d66:	e00f      	b.n	2d88 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    2d68:	2100      	movs	r1, #0
    2d6a:	6878      	ldr	r0, [r7, #4]
    2d6c:	4b0a      	ldr	r3, [pc, #40]	; (2d98 <_spi_dev_rx+0xf4>)
    2d6e:	4798      	blx	r3
		spi->stat = 0;
    2d70:	68fb      	ldr	r3, [r7, #12]
    2d72:	2200      	movs	r2, #0
    2d74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    2d78:	68fb      	ldr	r3, [r7, #12]
    2d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	d003      	beq.n	2d88 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    2d80:	68fb      	ldr	r3, [r7, #12]
    2d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d84:	68f8      	ldr	r0, [r7, #12]
    2d86:	4798      	blx	r3
}
    2d88:	bf00      	nop
    2d8a:	3714      	adds	r7, #20
    2d8c:	46bd      	mov	sp, r7
    2d8e:	bd90      	pop	{r4, r7, pc}
    2d90:	00007d25 	.word	0x00007d25
    2d94:	00007ccd 	.word	0x00007ccd
    2d98:	00007bf5 	.word	0x00007bf5

00002d9c <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    2d9c:	b580      	push	{r7, lr}
    2d9e:	b084      	sub	sp, #16
    2da0:	af00      	add	r7, sp, #0
    2da2:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2da4:	687b      	ldr	r3, [r7, #4]
    2da6:	3b04      	subs	r3, #4
    2da8:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    2daa:	68fb      	ldr	r3, [r7, #12]
    2dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2dae:	68fb      	ldr	r3, [r7, #12]
    2db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2db2:	429a      	cmp	r2, r3
    2db4:	d30f      	bcc.n	2dd6 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    2db6:	2100      	movs	r1, #0
    2db8:	6878      	ldr	r0, [r7, #4]
    2dba:	4b09      	ldr	r3, [pc, #36]	; (2de0 <_spi_dev_complete+0x44>)
    2dbc:	4798      	blx	r3
		spi->stat = 0;
    2dbe:	68fb      	ldr	r3, [r7, #12]
    2dc0:	2200      	movs	r2, #0
    2dc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    2dc6:	68fb      	ldr	r3, [r7, #12]
    2dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2dca:	2b00      	cmp	r3, #0
    2dcc:	d003      	beq.n	2dd6 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    2dce:	68fb      	ldr	r3, [r7, #12]
    2dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2dd2:	68f8      	ldr	r0, [r7, #12]
    2dd4:	4798      	blx	r3
		}
	}
}
    2dd6:	bf00      	nop
    2dd8:	3710      	adds	r7, #16
    2dda:	46bd      	mov	sp, r7
    2ddc:	bd80      	pop	{r7, pc}
    2dde:	bf00      	nop
    2de0:	00007c65 	.word	0x00007c65

00002de4 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b084      	sub	sp, #16
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    2dec:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2dee:	687b      	ldr	r3, [r7, #4]
    2df0:	3b04      	subs	r3, #4
    2df2:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    2df4:	2100      	movs	r1, #0
    2df6:	6878      	ldr	r0, [r7, #4]
    2df8:	4b0d      	ldr	r3, [pc, #52]	; (2e30 <_spi_dev_error+0x4c>)
    2dfa:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    2dfc:	2100      	movs	r1, #0
    2dfe:	6878      	ldr	r0, [r7, #4]
    2e00:	4b0c      	ldr	r3, [pc, #48]	; (2e34 <_spi_dev_error+0x50>)
    2e02:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    2e04:	2100      	movs	r1, #0
    2e06:	6878      	ldr	r0, [r7, #4]
    2e08:	4b0b      	ldr	r3, [pc, #44]	; (2e38 <_spi_dev_error+0x54>)
    2e0a:	4798      	blx	r3
	spi->stat = 0;
    2e0c:	68fb      	ldr	r3, [r7, #12]
    2e0e:	2200      	movs	r2, #0
    2e10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    2e14:	68fb      	ldr	r3, [r7, #12]
    2e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2e18:	2b00      	cmp	r3, #0
    2e1a:	d004      	beq.n	2e26 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    2e1c:	68fb      	ldr	r3, [r7, #12]
    2e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2e20:	6839      	ldr	r1, [r7, #0]
    2e22:	68f8      	ldr	r0, [r7, #12]
    2e24:	4798      	blx	r3
	}
}
    2e26:	bf00      	nop
    2e28:	3710      	adds	r7, #16
    2e2a:	46bd      	mov	sp, r7
    2e2c:	bd80      	pop	{r7, pc}
    2e2e:	bf00      	nop
    2e30:	00007b91 	.word	0x00007b91
    2e34:	00007bf5 	.word	0x00007bf5
    2e38:	00007c65 	.word	0x00007c65

00002e3c <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    2e3c:	b580      	push	{r7, lr}
    2e3e:	b084      	sub	sp, #16
    2e40:	af00      	add	r7, sp, #0
    2e42:	6078      	str	r0, [r7, #4]
    2e44:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2e46:	2300      	movs	r3, #0
    2e48:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2e4a:	687b      	ldr	r3, [r7, #4]
    2e4c:	2b00      	cmp	r3, #0
    2e4e:	d004      	beq.n	2e5a <spi_m_async_init+0x1e>
    2e50:	683b      	ldr	r3, [r7, #0]
    2e52:	2b00      	cmp	r3, #0
    2e54:	d001      	beq.n	2e5a <spi_m_async_init+0x1e>
    2e56:	2301      	movs	r3, #1
    2e58:	e000      	b.n	2e5c <spi_m_async_init+0x20>
    2e5a:	2300      	movs	r3, #0
    2e5c:	f003 0301 	and.w	r3, r3, #1
    2e60:	b2db      	uxtb	r3, r3
    2e62:	22a5      	movs	r2, #165	; 0xa5
    2e64:	491c      	ldr	r1, [pc, #112]	; (2ed8 <spi_m_async_init+0x9c>)
    2e66:	4618      	mov	r0, r3
    2e68:	4b1c      	ldr	r3, [pc, #112]	; (2edc <spi_m_async_init+0xa0>)
    2e6a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	683a      	ldr	r2, [r7, #0]
    2e70:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    2e72:	687b      	ldr	r3, [r7, #4]
    2e74:	3304      	adds	r3, #4
    2e76:	6839      	ldr	r1, [r7, #0]
    2e78:	4618      	mov	r0, r3
    2e7a:	4b19      	ldr	r3, [pc, #100]	; (2ee0 <spi_m_async_init+0xa4>)
    2e7c:	4798      	blx	r3
    2e7e:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    2e80:	68fb      	ldr	r3, [r7, #12]
    2e82:	2b00      	cmp	r3, #0
    2e84:	db23      	blt.n	2ece <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    2e86:	687b      	ldr	r3, [r7, #4]
    2e88:	3304      	adds	r3, #4
    2e8a:	4a16      	ldr	r2, [pc, #88]	; (2ee4 <spi_m_async_init+0xa8>)
    2e8c:	2100      	movs	r1, #0
    2e8e:	4618      	mov	r0, r3
    2e90:	4b15      	ldr	r3, [pc, #84]	; (2ee8 <spi_m_async_init+0xac>)
    2e92:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    2e94:	687b      	ldr	r3, [r7, #4]
    2e96:	3304      	adds	r3, #4
    2e98:	4a14      	ldr	r2, [pc, #80]	; (2eec <spi_m_async_init+0xb0>)
    2e9a:	2101      	movs	r1, #1
    2e9c:	4618      	mov	r0, r3
    2e9e:	4b12      	ldr	r3, [pc, #72]	; (2ee8 <spi_m_async_init+0xac>)
    2ea0:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    2ea2:	687b      	ldr	r3, [r7, #4]
    2ea4:	3304      	adds	r3, #4
    2ea6:	4a12      	ldr	r2, [pc, #72]	; (2ef0 <spi_m_async_init+0xb4>)
    2ea8:	2102      	movs	r1, #2
    2eaa:	4618      	mov	r0, r3
    2eac:	4b0e      	ldr	r3, [pc, #56]	; (2ee8 <spi_m_async_init+0xac>)
    2eae:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    2eb0:	687b      	ldr	r3, [r7, #4]
    2eb2:	3304      	adds	r3, #4
    2eb4:	4a0f      	ldr	r2, [pc, #60]	; (2ef4 <spi_m_async_init+0xb8>)
    2eb6:	2103      	movs	r1, #3
    2eb8:	4618      	mov	r0, r3
    2eba:	4b0b      	ldr	r3, [pc, #44]	; (2ee8 <spi_m_async_init+0xac>)
    2ebc:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    2ebe:	687b      	ldr	r3, [r7, #4]
    2ec0:	4a0d      	ldr	r2, [pc, #52]	; (2ef8 <spi_m_async_init+0xbc>)
    2ec2:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    2ec4:	687b      	ldr	r3, [r7, #4]
    2ec6:	4a0d      	ldr	r2, [pc, #52]	; (2efc <spi_m_async_init+0xc0>)
    2ec8:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    2eca:	2300      	movs	r3, #0
    2ecc:	e000      	b.n	2ed0 <spi_m_async_init+0x94>
		return rc;
    2ece:	68fb      	ldr	r3, [r7, #12]
}
    2ed0:	4618      	mov	r0, r3
    2ed2:	3710      	adds	r7, #16
    2ed4:	46bd      	mov	sp, r7
    2ed6:	bd80      	pop	{r7, pc}
    2ed8:	000113a8 	.word	0x000113a8
    2edc:	00003f79 	.word	0x00003f79
    2ee0:	00007891 	.word	0x00007891
    2ee4:	00002c25 	.word	0x00002c25
    2ee8:	00007d75 	.word	0x00007d75
    2eec:	00002ca5 	.word	0x00002ca5
    2ef0:	00002d9d 	.word	0x00002d9d
    2ef4:	00002de5 	.word	0x00002de5
    2ef8:	00002f01 	.word	0x00002f01
    2efc:	00002f81 	.word	0x00002f81

00002f00 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    2f00:	b580      	push	{r7, lr}
    2f02:	b086      	sub	sp, #24
    2f04:	af00      	add	r7, sp, #0
    2f06:	60f8      	str	r0, [r7, #12]
    2f08:	60b9      	str	r1, [r7, #8]
    2f0a:	4613      	mov	r3, r2
    2f0c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2f0e:	68fb      	ldr	r3, [r7, #12]
    2f10:	2b00      	cmp	r3, #0
    2f12:	bf14      	ite	ne
    2f14:	2301      	movne	r3, #1
    2f16:	2300      	moveq	r3, #0
    2f18:	b2db      	uxtb	r3, r3
    2f1a:	f240 1205 	movw	r2, #261	; 0x105
    2f1e:	4914      	ldr	r1, [pc, #80]	; (2f70 <_spi_m_async_io_read+0x70>)
    2f20:	4618      	mov	r0, r3
    2f22:	4b14      	ldr	r3, [pc, #80]	; (2f74 <_spi_m_async_io_read+0x74>)
    2f24:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    2f26:	68fb      	ldr	r3, [r7, #12]
    2f28:	3b24      	subs	r3, #36	; 0x24
    2f2a:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    2f2c:	697b      	ldr	r3, [r7, #20]
    2f2e:	68ba      	ldr	r2, [r7, #8]
    2f30:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    2f32:	697b      	ldr	r3, [r7, #20]
    2f34:	2200      	movs	r2, #0
    2f36:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2f38:	88fa      	ldrh	r2, [r7, #6]
    2f3a:	697b      	ldr	r3, [r7, #20]
    2f3c:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    2f3e:	697b      	ldr	r3, [r7, #20]
    2f40:	2200      	movs	r2, #0
    2f42:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2f44:	697b      	ldr	r3, [r7, #20]
    2f46:	2210      	movs	r2, #16
    2f48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    2f4c:	697b      	ldr	r3, [r7, #20]
    2f4e:	3304      	adds	r3, #4
    2f50:	2101      	movs	r1, #1
    2f52:	4618      	mov	r0, r3
    2f54:	4b08      	ldr	r3, [pc, #32]	; (2f78 <_spi_m_async_io_read+0x78>)
    2f56:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    2f58:	697b      	ldr	r3, [r7, #20]
    2f5a:	3304      	adds	r3, #4
    2f5c:	f240 11ff 	movw	r1, #511	; 0x1ff
    2f60:	4618      	mov	r0, r3
    2f62:	4b06      	ldr	r3, [pc, #24]	; (2f7c <_spi_m_async_io_read+0x7c>)
    2f64:	4798      	blx	r3

	return ERR_NONE;
    2f66:	2300      	movs	r3, #0
}
    2f68:	4618      	mov	r0, r3
    2f6a:	3718      	adds	r7, #24
    2f6c:	46bd      	mov	sp, r7
    2f6e:	bd80      	pop	{r7, pc}
    2f70:	000113a8 	.word	0x000113a8
    2f74:	00003f79 	.word	0x00003f79
    2f78:	00007bf5 	.word	0x00007bf5
    2f7c:	00007ccd 	.word	0x00007ccd

00002f80 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    2f80:	b580      	push	{r7, lr}
    2f82:	b086      	sub	sp, #24
    2f84:	af00      	add	r7, sp, #0
    2f86:	60f8      	str	r0, [r7, #12]
    2f88:	60b9      	str	r1, [r7, #8]
    2f8a:	4613      	mov	r3, r2
    2f8c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2f8e:	68fb      	ldr	r3, [r7, #12]
    2f90:	2b00      	cmp	r3, #0
    2f92:	bf14      	ite	ne
    2f94:	2301      	movne	r3, #1
    2f96:	2300      	moveq	r3, #0
    2f98:	b2db      	uxtb	r3, r3
    2f9a:	f240 1227 	movw	r2, #295	; 0x127
    2f9e:	4911      	ldr	r1, [pc, #68]	; (2fe4 <_spi_m_async_io_write+0x64>)
    2fa0:	4618      	mov	r0, r3
    2fa2:	4b11      	ldr	r3, [pc, #68]	; (2fe8 <_spi_m_async_io_write+0x68>)
    2fa4:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    2fa6:	68fb      	ldr	r3, [r7, #12]
    2fa8:	3b24      	subs	r3, #36	; 0x24
    2faa:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    2fac:	697b      	ldr	r3, [r7, #20]
    2fae:	2200      	movs	r2, #0
    2fb0:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    2fb2:	697b      	ldr	r3, [r7, #20]
    2fb4:	68ba      	ldr	r2, [r7, #8]
    2fb6:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2fb8:	88fa      	ldrh	r2, [r7, #6]
    2fba:	697b      	ldr	r3, [r7, #20]
    2fbc:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    2fbe:	697b      	ldr	r3, [r7, #20]
    2fc0:	2200      	movs	r2, #0
    2fc2:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2fc4:	697b      	ldr	r3, [r7, #20]
    2fc6:	2210      	movs	r2, #16
    2fc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    2fcc:	697b      	ldr	r3, [r7, #20]
    2fce:	3304      	adds	r3, #4
    2fd0:	2101      	movs	r1, #1
    2fd2:	4618      	mov	r0, r3
    2fd4:	4b05      	ldr	r3, [pc, #20]	; (2fec <_spi_m_async_io_write+0x6c>)
    2fd6:	4798      	blx	r3

	return ERR_NONE;
    2fd8:	2300      	movs	r3, #0
}
    2fda:	4618      	mov	r0, r3
    2fdc:	3718      	adds	r7, #24
    2fde:	46bd      	mov	sp, r7
    2fe0:	bd80      	pop	{r7, pc}
    2fe2:	bf00      	nop
    2fe4:	000113a8 	.word	0x000113a8
    2fe8:	00003f79 	.word	0x00003f79
    2fec:	00007b91 	.word	0x00007b91

00002ff0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b084      	sub	sp, #16
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	6078      	str	r0, [r7, #4]
    2ff8:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2ffa:	2300      	movs	r3, #0
    2ffc:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	2b00      	cmp	r3, #0
    3002:	d004      	beq.n	300e <spi_m_sync_init+0x1e>
    3004:	683b      	ldr	r3, [r7, #0]
    3006:	2b00      	cmp	r3, #0
    3008:	d001      	beq.n	300e <spi_m_sync_init+0x1e>
    300a:	2301      	movs	r3, #1
    300c:	e000      	b.n	3010 <spi_m_sync_init+0x20>
    300e:	2300      	movs	r3, #0
    3010:	f003 0301 	and.w	r3, r3, #1
    3014:	b2db      	uxtb	r3, r3
    3016:	2240      	movs	r2, #64	; 0x40
    3018:	4910      	ldr	r1, [pc, #64]	; (305c <spi_m_sync_init+0x6c>)
    301a:	4618      	mov	r0, r3
    301c:	4b10      	ldr	r3, [pc, #64]	; (3060 <spi_m_sync_init+0x70>)
    301e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    3020:	687b      	ldr	r3, [r7, #4]
    3022:	683a      	ldr	r2, [r7, #0]
    3024:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	3304      	adds	r3, #4
    302a:	6839      	ldr	r1, [r7, #0]
    302c:	4618      	mov	r0, r3
    302e:	4b0d      	ldr	r3, [pc, #52]	; (3064 <spi_m_sync_init+0x74>)
    3030:	4798      	blx	r3
    3032:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    3034:	68fb      	ldr	r3, [r7, #12]
    3036:	2b00      	cmp	r3, #0
    3038:	da01      	bge.n	303e <spi_m_sync_init+0x4e>
		return rc;
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	e00a      	b.n	3054 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    303e:	687b      	ldr	r3, [r7, #4]
    3040:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3044:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	4a07      	ldr	r2, [pc, #28]	; (3068 <spi_m_sync_init+0x78>)
    304a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    304c:	687b      	ldr	r3, [r7, #4]
    304e:	4a07      	ldr	r2, [pc, #28]	; (306c <spi_m_sync_init+0x7c>)
    3050:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3052:	2300      	movs	r3, #0
}
    3054:	4618      	mov	r0, r3
    3056:	3710      	adds	r7, #16
    3058:	46bd      	mov	sp, r7
    305a:	bd80      	pop	{r7, pc}
    305c:	000113c8 	.word	0x000113c8
    3060:	00003f79 	.word	0x00003f79
    3064:	00007785 	.word	0x00007785
    3068:	00003071 	.word	0x00003071
    306c:	000030c9 	.word	0x000030c9

00003070 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    3070:	b580      	push	{r7, lr}
    3072:	b088      	sub	sp, #32
    3074:	af00      	add	r7, sp, #0
    3076:	60f8      	str	r0, [r7, #12]
    3078:	60b9      	str	r1, [r7, #8]
    307a:	4613      	mov	r3, r2
    307c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    307e:	68fb      	ldr	r3, [r7, #12]
    3080:	2b00      	cmp	r3, #0
    3082:	bf14      	ite	ne
    3084:	2301      	movne	r3, #1
    3086:	2300      	moveq	r3, #0
    3088:	b2db      	uxtb	r3, r3
    308a:	2287      	movs	r2, #135	; 0x87
    308c:	490b      	ldr	r1, [pc, #44]	; (30bc <_spi_m_sync_io_read+0x4c>)
    308e:	4618      	mov	r0, r3
    3090:	4b0b      	ldr	r3, [pc, #44]	; (30c0 <_spi_m_sync_io_read+0x50>)
    3092:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3094:	68fb      	ldr	r3, [r7, #12]
    3096:	3b0c      	subs	r3, #12
    3098:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    309a:	68bb      	ldr	r3, [r7, #8]
    309c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    309e:	2300      	movs	r3, #0
    30a0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    30a2:	88fb      	ldrh	r3, [r7, #6]
    30a4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    30a6:	f107 0310 	add.w	r3, r7, #16
    30aa:	4619      	mov	r1, r3
    30ac:	69f8      	ldr	r0, [r7, #28]
    30ae:	4b05      	ldr	r3, [pc, #20]	; (30c4 <_spi_m_sync_io_read+0x54>)
    30b0:	4798      	blx	r3
    30b2:	4603      	mov	r3, r0
}
    30b4:	4618      	mov	r0, r3
    30b6:	3720      	adds	r7, #32
    30b8:	46bd      	mov	sp, r7
    30ba:	bd80      	pop	{r7, pc}
    30bc:	000113c8 	.word	0x000113c8
    30c0:	00003f79 	.word	0x00003f79
    30c4:	00003121 	.word	0x00003121

000030c8 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    30c8:	b580      	push	{r7, lr}
    30ca:	b088      	sub	sp, #32
    30cc:	af00      	add	r7, sp, #0
    30ce:	60f8      	str	r0, [r7, #12]
    30d0:	60b9      	str	r1, [r7, #8]
    30d2:	4613      	mov	r3, r2
    30d4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    30d6:	68fb      	ldr	r3, [r7, #12]
    30d8:	2b00      	cmp	r3, #0
    30da:	bf14      	ite	ne
    30dc:	2301      	movne	r3, #1
    30de:	2300      	moveq	r3, #0
    30e0:	b2db      	uxtb	r3, r3
    30e2:	22a3      	movs	r2, #163	; 0xa3
    30e4:	490b      	ldr	r1, [pc, #44]	; (3114 <_spi_m_sync_io_write+0x4c>)
    30e6:	4618      	mov	r0, r3
    30e8:	4b0b      	ldr	r3, [pc, #44]	; (3118 <_spi_m_sync_io_write+0x50>)
    30ea:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    30ec:	68fb      	ldr	r3, [r7, #12]
    30ee:	3b0c      	subs	r3, #12
    30f0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    30f2:	2300      	movs	r3, #0
    30f4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    30f6:	68bb      	ldr	r3, [r7, #8]
    30f8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    30fa:	88fb      	ldrh	r3, [r7, #6]
    30fc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    30fe:	f107 0310 	add.w	r3, r7, #16
    3102:	4619      	mov	r1, r3
    3104:	69f8      	ldr	r0, [r7, #28]
    3106:	4b05      	ldr	r3, [pc, #20]	; (311c <_spi_m_sync_io_write+0x54>)
    3108:	4798      	blx	r3
    310a:	4603      	mov	r3, r0
}
    310c:	4618      	mov	r0, r3
    310e:	3720      	adds	r7, #32
    3110:	46bd      	mov	sp, r7
    3112:	bd80      	pop	{r7, pc}
    3114:	000113c8 	.word	0x000113c8
    3118:	00003f79 	.word	0x00003f79
    311c:	00003121 	.word	0x00003121

00003120 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    3120:	b580      	push	{r7, lr}
    3122:	b086      	sub	sp, #24
    3124:	af00      	add	r7, sp, #0
    3126:	6078      	str	r0, [r7, #4]
    3128:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	2b00      	cmp	r3, #0
    312e:	d004      	beq.n	313a <spi_m_sync_transfer+0x1a>
    3130:	683b      	ldr	r3, [r7, #0]
    3132:	2b00      	cmp	r3, #0
    3134:	d001      	beq.n	313a <spi_m_sync_transfer+0x1a>
    3136:	2301      	movs	r3, #1
    3138:	e000      	b.n	313c <spi_m_sync_transfer+0x1c>
    313a:	2300      	movs	r3, #0
    313c:	f003 0301 	and.w	r3, r3, #1
    3140:	b2db      	uxtb	r3, r3
    3142:	22b3      	movs	r2, #179	; 0xb3
    3144:	490c      	ldr	r1, [pc, #48]	; (3178 <spi_m_sync_transfer+0x58>)
    3146:	4618      	mov	r0, r3
    3148:	4b0c      	ldr	r3, [pc, #48]	; (317c <spi_m_sync_transfer+0x5c>)
    314a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    314c:	683b      	ldr	r3, [r7, #0]
    314e:	681b      	ldr	r3, [r3, #0]
    3150:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    3152:	683b      	ldr	r3, [r7, #0]
    3154:	685b      	ldr	r3, [r3, #4]
    3156:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    3158:	683b      	ldr	r3, [r7, #0]
    315a:	689b      	ldr	r3, [r3, #8]
    315c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    315e:	687b      	ldr	r3, [r7, #4]
    3160:	3304      	adds	r3, #4
    3162:	f107 020c 	add.w	r2, r7, #12
    3166:	4611      	mov	r1, r2
    3168:	4618      	mov	r0, r3
    316a:	4b05      	ldr	r3, [pc, #20]	; (3180 <spi_m_sync_transfer+0x60>)
    316c:	4798      	blx	r3
    316e:	4603      	mov	r3, r0
}
    3170:	4618      	mov	r0, r3
    3172:	3718      	adds	r7, #24
    3174:	46bd      	mov	sp, r7
    3176:	bd80      	pop	{r7, pc}
    3178:	000113c8 	.word	0x000113c8
    317c:	00003f79 	.word	0x00003f79
    3180:	00007a75 	.word	0x00007a75

00003184 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    3184:	b480      	push	{r7}
    3186:	b083      	sub	sp, #12
    3188:	af00      	add	r7, sp, #0
    318a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	681b      	ldr	r3, [r3, #0]
}
    3190:	4618      	mov	r0, r3
    3192:	370c      	adds	r7, #12
    3194:	46bd      	mov	sp, r7
    3196:	f85d 7b04 	ldr.w	r7, [sp], #4
    319a:	4770      	bx	lr

0000319c <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    319c:	b480      	push	{r7}
    319e:	b083      	sub	sp, #12
    31a0:	af00      	add	r7, sp, #0
    31a2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    31a4:	687b      	ldr	r3, [r7, #4]
    31a6:	2b00      	cmp	r3, #0
    31a8:	d002      	beq.n	31b0 <list_get_next_element+0x14>
    31aa:	687b      	ldr	r3, [r7, #4]
    31ac:	681b      	ldr	r3, [r3, #0]
    31ae:	e000      	b.n	31b2 <list_get_next_element+0x16>
    31b0:	2300      	movs	r3, #0
}
    31b2:	4618      	mov	r0, r3
    31b4:	370c      	adds	r7, #12
    31b6:	46bd      	mov	sp, r7
    31b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    31bc:	4770      	bx	lr
	...

000031c0 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    31c0:	b580      	push	{r7, lr}
    31c2:	b084      	sub	sp, #16
    31c4:	af00      	add	r7, sp, #0
    31c6:	60f8      	str	r0, [r7, #12]
    31c8:	60b9      	str	r1, [r7, #8]
    31ca:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    31cc:	68fb      	ldr	r3, [r7, #12]
    31ce:	2b00      	cmp	r3, #0
    31d0:	d004      	beq.n	31dc <timer_init+0x1c>
    31d2:	68bb      	ldr	r3, [r7, #8]
    31d4:	2b00      	cmp	r3, #0
    31d6:	d001      	beq.n	31dc <timer_init+0x1c>
    31d8:	2301      	movs	r3, #1
    31da:	e000      	b.n	31de <timer_init+0x1e>
    31dc:	2300      	movs	r3, #0
    31de:	f003 0301 	and.w	r3, r3, #1
    31e2:	b2db      	uxtb	r3, r3
    31e4:	223b      	movs	r2, #59	; 0x3b
    31e6:	490a      	ldr	r1, [pc, #40]	; (3210 <timer_init+0x50>)
    31e8:	4618      	mov	r0, r3
    31ea:	4b0a      	ldr	r3, [pc, #40]	; (3214 <timer_init+0x54>)
    31ec:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    31ee:	68fb      	ldr	r3, [r7, #12]
    31f0:	68b9      	ldr	r1, [r7, #8]
    31f2:	4618      	mov	r0, r3
    31f4:	4b08      	ldr	r3, [pc, #32]	; (3218 <timer_init+0x58>)
    31f6:	4798      	blx	r3
	descr->time                           = 0;
    31f8:	68fb      	ldr	r3, [r7, #12]
    31fa:	2200      	movs	r2, #0
    31fc:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    31fe:	68fb      	ldr	r3, [r7, #12]
    3200:	4a06      	ldr	r2, [pc, #24]	; (321c <timer_init+0x5c>)
    3202:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    3204:	2300      	movs	r3, #0
}
    3206:	4618      	mov	r0, r3
    3208:	3710      	adds	r7, #16
    320a:	46bd      	mov	sp, r7
    320c:	bd80      	pop	{r7, pc}
    320e:	bf00      	nop
    3210:	000113e4 	.word	0x000113e4
    3214:	00003f79 	.word	0x00003f79
    3218:	0000816d 	.word	0x0000816d
    321c:	00003569 	.word	0x00003569

00003220 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    3220:	b580      	push	{r7, lr}
    3222:	b082      	sub	sp, #8
    3224:	af00      	add	r7, sp, #0
    3226:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    3228:	687b      	ldr	r3, [r7, #4]
    322a:	2b00      	cmp	r3, #0
    322c:	bf14      	ite	ne
    322e:	2301      	movne	r3, #1
    3230:	2300      	moveq	r3, #0
    3232:	b2db      	uxtb	r3, r3
    3234:	2253      	movs	r2, #83	; 0x53
    3236:	490b      	ldr	r1, [pc, #44]	; (3264 <timer_start+0x44>)
    3238:	4618      	mov	r0, r3
    323a:	4b0b      	ldr	r3, [pc, #44]	; (3268 <timer_start+0x48>)
    323c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    323e:	687b      	ldr	r3, [r7, #4]
    3240:	4618      	mov	r0, r3
    3242:	4b0a      	ldr	r3, [pc, #40]	; (326c <timer_start+0x4c>)
    3244:	4798      	blx	r3
    3246:	4603      	mov	r3, r0
    3248:	2b00      	cmp	r3, #0
    324a:	d002      	beq.n	3252 <timer_start+0x32>
		return ERR_DENIED;
    324c:	f06f 0310 	mvn.w	r3, #16
    3250:	e004      	b.n	325c <timer_start+0x3c>
	}
	_timer_start(&descr->device);
    3252:	687b      	ldr	r3, [r7, #4]
    3254:	4618      	mov	r0, r3
    3256:	4b06      	ldr	r3, [pc, #24]	; (3270 <timer_start+0x50>)
    3258:	4798      	blx	r3

	return ERR_NONE;
    325a:	2300      	movs	r3, #0
}
    325c:	4618      	mov	r0, r3
    325e:	3708      	adds	r7, #8
    3260:	46bd      	mov	sp, r7
    3262:	bd80      	pop	{r7, pc}
    3264:	000113e4 	.word	0x000113e4
    3268:	00003f79 	.word	0x00003f79
    326c:	00008679 	.word	0x00008679
    3270:	00008639 	.word	0x00008639

00003274 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    3274:	b580      	push	{r7, lr}
    3276:	b082      	sub	sp, #8
    3278:	af00      	add	r7, sp, #0
    327a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    327c:	687b      	ldr	r3, [r7, #4]
    327e:	2b00      	cmp	r3, #0
    3280:	bf14      	ite	ne
    3282:	2301      	movne	r3, #1
    3284:	2300      	moveq	r3, #0
    3286:	b2db      	uxtb	r3, r3
    3288:	2261      	movs	r2, #97	; 0x61
    328a:	490d      	ldr	r1, [pc, #52]	; (32c0 <timer_stop+0x4c>)
    328c:	4618      	mov	r0, r3
    328e:	4b0d      	ldr	r3, [pc, #52]	; (32c4 <timer_stop+0x50>)
    3290:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    3292:	687b      	ldr	r3, [r7, #4]
    3294:	4618      	mov	r0, r3
    3296:	4b0c      	ldr	r3, [pc, #48]	; (32c8 <timer_stop+0x54>)
    3298:	4798      	blx	r3
    329a:	4603      	mov	r3, r0
    329c:	f083 0301 	eor.w	r3, r3, #1
    32a0:	b2db      	uxtb	r3, r3
    32a2:	2b00      	cmp	r3, #0
    32a4:	d002      	beq.n	32ac <timer_stop+0x38>
		return ERR_DENIED;
    32a6:	f06f 0310 	mvn.w	r3, #16
    32aa:	e004      	b.n	32b6 <timer_stop+0x42>
	}
	_timer_stop(&descr->device);
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	4618      	mov	r0, r3
    32b0:	4b06      	ldr	r3, [pc, #24]	; (32cc <timer_stop+0x58>)
    32b2:	4798      	blx	r3

	return ERR_NONE;
    32b4:	2300      	movs	r3, #0
}
    32b6:	4618      	mov	r0, r3
    32b8:	3708      	adds	r7, #8
    32ba:	46bd      	mov	sp, r7
    32bc:	bd80      	pop	{r7, pc}
    32be:	bf00      	nop
    32c0:	000113e4 	.word	0x000113e4
    32c4:	00003f79 	.word	0x00003f79
    32c8:	00008679 	.word	0x00008679
    32cc:	00008659 	.word	0x00008659

000032d0 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    32d0:	b580      	push	{r7, lr}
    32d2:	b084      	sub	sp, #16
    32d4:	af00      	add	r7, sp, #0
    32d6:	6078      	str	r0, [r7, #4]
    32d8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    32da:	687b      	ldr	r3, [r7, #4]
    32dc:	2b00      	cmp	r3, #0
    32de:	d004      	beq.n	32ea <timer_add_task+0x1a>
    32e0:	683b      	ldr	r3, [r7, #0]
    32e2:	2b00      	cmp	r3, #0
    32e4:	d001      	beq.n	32ea <timer_add_task+0x1a>
    32e6:	2301      	movs	r3, #1
    32e8:	e000      	b.n	32ec <timer_add_task+0x1c>
    32ea:	2300      	movs	r3, #0
    32ec:	f003 0301 	and.w	r3, r3, #1
    32f0:	b2db      	uxtb	r3, r3
    32f2:	227a      	movs	r2, #122	; 0x7a
    32f4:	492d      	ldr	r1, [pc, #180]	; (33ac <timer_add_task+0xdc>)
    32f6:	4618      	mov	r0, r3
    32f8:	4b2d      	ldr	r3, [pc, #180]	; (33b0 <timer_add_task+0xe0>)
    32fa:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    32fc:	687b      	ldr	r3, [r7, #4]
    32fe:	7e1b      	ldrb	r3, [r3, #24]
    3300:	b2db      	uxtb	r3, r3
    3302:	f043 0301 	orr.w	r3, r3, #1
    3306:	b2da      	uxtb	r2, r3
    3308:	687b      	ldr	r3, [r7, #4]
    330a:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
    330c:	687b      	ldr	r3, [r7, #4]
    330e:	3314      	adds	r3, #20
    3310:	6839      	ldr	r1, [r7, #0]
    3312:	4618      	mov	r0, r3
    3314:	4b27      	ldr	r3, [pc, #156]	; (33b4 <timer_add_task+0xe4>)
    3316:	4798      	blx	r3
    3318:	4603      	mov	r3, r0
    331a:	2b00      	cmp	r3, #0
    331c:	d00f      	beq.n	333e <timer_add_task+0x6e>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    331e:	687b      	ldr	r3, [r7, #4]
    3320:	7e1b      	ldrb	r3, [r3, #24]
    3322:	b2db      	uxtb	r3, r3
    3324:	f023 0301 	bic.w	r3, r3, #1
    3328:	b2da      	uxtb	r2, r3
    332a:	687b      	ldr	r3, [r7, #4]
    332c:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    332e:	227f      	movs	r2, #127	; 0x7f
    3330:	491e      	ldr	r1, [pc, #120]	; (33ac <timer_add_task+0xdc>)
    3332:	2000      	movs	r0, #0
    3334:	4b1e      	ldr	r3, [pc, #120]	; (33b0 <timer_add_task+0xe0>)
    3336:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3338:	f06f 0311 	mvn.w	r3, #17
    333c:	e032      	b.n	33a4 <timer_add_task+0xd4>
	}
	task->time_label = descr->time;
    333e:	687b      	ldr	r3, [r7, #4]
    3340:	691a      	ldr	r2, [r3, #16]
    3342:	683b      	ldr	r3, [r7, #0]
    3344:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    3346:	687b      	ldr	r3, [r7, #4]
    3348:	f103 0014 	add.w	r0, r3, #20
    334c:	687b      	ldr	r3, [r7, #4]
    334e:	691b      	ldr	r3, [r3, #16]
    3350:	461a      	mov	r2, r3
    3352:	6839      	ldr	r1, [r7, #0]
    3354:	4b18      	ldr	r3, [pc, #96]	; (33b8 <timer_add_task+0xe8>)
    3356:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3358:	687b      	ldr	r3, [r7, #4]
    335a:	7e1b      	ldrb	r3, [r3, #24]
    335c:	b2db      	uxtb	r3, r3
    335e:	f023 0301 	bic.w	r3, r3, #1
    3362:	b2da      	uxtb	r2, r3
    3364:	687b      	ldr	r3, [r7, #4]
    3366:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3368:	687b      	ldr	r3, [r7, #4]
    336a:	7e1b      	ldrb	r3, [r3, #24]
    336c:	b2db      	uxtb	r3, r3
    336e:	f003 0302 	and.w	r3, r3, #2
    3372:	2b00      	cmp	r3, #0
    3374:	d015      	beq.n	33a2 <timer_add_task+0xd2>
		CRITICAL_SECTION_ENTER()
    3376:	f107 030c 	add.w	r3, r7, #12
    337a:	4618      	mov	r0, r3
    337c:	4b0f      	ldr	r3, [pc, #60]	; (33bc <timer_add_task+0xec>)
    337e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3380:	687b      	ldr	r3, [r7, #4]
    3382:	7e1b      	ldrb	r3, [r3, #24]
    3384:	b2db      	uxtb	r3, r3
    3386:	f023 0302 	bic.w	r3, r3, #2
    338a:	b2da      	uxtb	r2, r3
    338c:	687b      	ldr	r3, [r7, #4]
    338e:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    3390:	687b      	ldr	r3, [r7, #4]
    3392:	4618      	mov	r0, r3
    3394:	4b0a      	ldr	r3, [pc, #40]	; (33c0 <timer_add_task+0xf0>)
    3396:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3398:	f107 030c 	add.w	r3, r7, #12
    339c:	4618      	mov	r0, r3
    339e:	4b09      	ldr	r3, [pc, #36]	; (33c4 <timer_add_task+0xf4>)
    33a0:	4798      	blx	r3
	}

	return ERR_NONE;
    33a2:	2300      	movs	r3, #0
}
    33a4:	4618      	mov	r0, r3
    33a6:	3710      	adds	r7, #16
    33a8:	46bd      	mov	sp, r7
    33aa:	bd80      	pop	{r7, pc}
    33ac:	000113e4 	.word	0x000113e4
    33b0:	00003f79 	.word	0x00003f79
    33b4:	00003fa1 	.word	0x00003fa1
    33b8:	000034b9 	.word	0x000034b9
    33bc:	0000b805 	.word	0x0000b805
    33c0:	000086b9 	.word	0x000086b9
    33c4:	0000b82b 	.word	0x0000b82b

000033c8 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    33c8:	b580      	push	{r7, lr}
    33ca:	b084      	sub	sp, #16
    33cc:	af00      	add	r7, sp, #0
    33ce:	6078      	str	r0, [r7, #4]
    33d0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	2b00      	cmp	r3, #0
    33d6:	d004      	beq.n	33e2 <timer_remove_task+0x1a>
    33d8:	683b      	ldr	r3, [r7, #0]
    33da:	2b00      	cmp	r3, #0
    33dc:	d001      	beq.n	33e2 <timer_remove_task+0x1a>
    33de:	2301      	movs	r3, #1
    33e0:	e000      	b.n	33e4 <timer_remove_task+0x1c>
    33e2:	2300      	movs	r3, #0
    33e4:	f003 0301 	and.w	r3, r3, #1
    33e8:	b2db      	uxtb	r3, r3
    33ea:	2295      	movs	r2, #149	; 0x95
    33ec:	492b      	ldr	r1, [pc, #172]	; (349c <timer_remove_task+0xd4>)
    33ee:	4618      	mov	r0, r3
    33f0:	4b2b      	ldr	r3, [pc, #172]	; (34a0 <timer_remove_task+0xd8>)
    33f2:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    33f4:	687b      	ldr	r3, [r7, #4]
    33f6:	7e1b      	ldrb	r3, [r3, #24]
    33f8:	b2db      	uxtb	r3, r3
    33fa:	f043 0301 	orr.w	r3, r3, #1
    33fe:	b2da      	uxtb	r2, r3
    3400:	687b      	ldr	r3, [r7, #4]
    3402:	761a      	strb	r2, [r3, #24]
	if (!is_list_element(&descr->tasks, task)) {
    3404:	687b      	ldr	r3, [r7, #4]
    3406:	3314      	adds	r3, #20
    3408:	6839      	ldr	r1, [r7, #0]
    340a:	4618      	mov	r0, r3
    340c:	4b25      	ldr	r3, [pc, #148]	; (34a4 <timer_remove_task+0xdc>)
    340e:	4798      	blx	r3
    3410:	4603      	mov	r3, r0
    3412:	f083 0301 	eor.w	r3, r3, #1
    3416:	b2db      	uxtb	r3, r3
    3418:	2b00      	cmp	r3, #0
    341a:	d00f      	beq.n	343c <timer_remove_task+0x74>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	7e1b      	ldrb	r3, [r3, #24]
    3420:	b2db      	uxtb	r3, r3
    3422:	f023 0301 	bic.w	r3, r3, #1
    3426:	b2da      	uxtb	r2, r3
    3428:	687b      	ldr	r3, [r7, #4]
    342a:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
    342c:	229a      	movs	r2, #154	; 0x9a
    342e:	491b      	ldr	r1, [pc, #108]	; (349c <timer_remove_task+0xd4>)
    3430:	2000      	movs	r0, #0
    3432:	4b1b      	ldr	r3, [pc, #108]	; (34a0 <timer_remove_task+0xd8>)
    3434:	4798      	blx	r3
		return ERR_NOT_FOUND;
    3436:	f06f 0309 	mvn.w	r3, #9
    343a:	e02b      	b.n	3494 <timer_remove_task+0xcc>
	}
	list_delete_element(&descr->tasks, task);
    343c:	687b      	ldr	r3, [r7, #4]
    343e:	3314      	adds	r3, #20
    3440:	6839      	ldr	r1, [r7, #0]
    3442:	4618      	mov	r0, r3
    3444:	4b18      	ldr	r3, [pc, #96]	; (34a8 <timer_remove_task+0xe0>)
    3446:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	7e1b      	ldrb	r3, [r3, #24]
    344c:	b2db      	uxtb	r3, r3
    344e:	f023 0301 	bic.w	r3, r3, #1
    3452:	b2da      	uxtb	r2, r3
    3454:	687b      	ldr	r3, [r7, #4]
    3456:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	7e1b      	ldrb	r3, [r3, #24]
    345c:	b2db      	uxtb	r3, r3
    345e:	f003 0302 	and.w	r3, r3, #2
    3462:	2b00      	cmp	r3, #0
    3464:	d015      	beq.n	3492 <timer_remove_task+0xca>
		CRITICAL_SECTION_ENTER()
    3466:	f107 030c 	add.w	r3, r7, #12
    346a:	4618      	mov	r0, r3
    346c:	4b0f      	ldr	r3, [pc, #60]	; (34ac <timer_remove_task+0xe4>)
    346e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3470:	687b      	ldr	r3, [r7, #4]
    3472:	7e1b      	ldrb	r3, [r3, #24]
    3474:	b2db      	uxtb	r3, r3
    3476:	f023 0302 	bic.w	r3, r3, #2
    347a:	b2da      	uxtb	r2, r3
    347c:	687b      	ldr	r3, [r7, #4]
    347e:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
    3480:	687b      	ldr	r3, [r7, #4]
    3482:	4618      	mov	r0, r3
    3484:	4b0a      	ldr	r3, [pc, #40]	; (34b0 <timer_remove_task+0xe8>)
    3486:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3488:	f107 030c 	add.w	r3, r7, #12
    348c:	4618      	mov	r0, r3
    348e:	4b09      	ldr	r3, [pc, #36]	; (34b4 <timer_remove_task+0xec>)
    3490:	4798      	blx	r3
	}

	return ERR_NONE;
    3492:	2300      	movs	r3, #0
}
    3494:	4618      	mov	r0, r3
    3496:	3710      	adds	r7, #16
    3498:	46bd      	mov	sp, r7
    349a:	bd80      	pop	{r7, pc}
    349c:	000113e4 	.word	0x000113e4
    34a0:	00003f79 	.word	0x00003f79
    34a4:	00003fa1 	.word	0x00003fa1
    34a8:	00004103 	.word	0x00004103
    34ac:	0000b805 	.word	0x0000b805
    34b0:	000086b9 	.word	0x000086b9
    34b4:	0000b82b 	.word	0x0000b82b

000034b8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    34b8:	b580      	push	{r7, lr}
    34ba:	b088      	sub	sp, #32
    34bc:	af00      	add	r7, sp, #0
    34be:	60f8      	str	r0, [r7, #12]
    34c0:	60b9      	str	r1, [r7, #8]
    34c2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    34c4:	2300      	movs	r3, #0
    34c6:	61bb      	str	r3, [r7, #24]
    34c8:	68f8      	ldr	r0, [r7, #12]
    34ca:	4b23      	ldr	r3, [pc, #140]	; (3558 <timer_add_timer_task+0xa0>)
    34cc:	4798      	blx	r3
    34ce:	6138      	str	r0, [r7, #16]

	if (!head) {
    34d0:	693b      	ldr	r3, [r7, #16]
    34d2:	2b00      	cmp	r3, #0
    34d4:	d104      	bne.n	34e0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    34d6:	68b9      	ldr	r1, [r7, #8]
    34d8:	68f8      	ldr	r0, [r7, #12]
    34da:	4b20      	ldr	r3, [pc, #128]	; (355c <timer_add_timer_task+0xa4>)
    34dc:	4798      	blx	r3
		return;
    34de:	e037      	b.n	3550 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    34e0:	693b      	ldr	r3, [r7, #16]
    34e2:	61fb      	str	r3, [r7, #28]
    34e4:	e022      	b.n	352c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    34e6:	69fb      	ldr	r3, [r7, #28]
    34e8:	685a      	ldr	r2, [r3, #4]
    34ea:	687b      	ldr	r3, [r7, #4]
    34ec:	429a      	cmp	r2, r3
    34ee:	d808      	bhi.n	3502 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    34f0:	69fb      	ldr	r3, [r7, #28]
    34f2:	689a      	ldr	r2, [r3, #8]
    34f4:	69fb      	ldr	r3, [r7, #28]
    34f6:	6859      	ldr	r1, [r3, #4]
    34f8:	687b      	ldr	r3, [r7, #4]
    34fa:	1acb      	subs	r3, r1, r3
    34fc:	4413      	add	r3, r2
    34fe:	617b      	str	r3, [r7, #20]
    3500:	e009      	b.n	3516 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    3502:	69fb      	ldr	r3, [r7, #28]
    3504:	689a      	ldr	r2, [r3, #8]
    3506:	69fb      	ldr	r3, [r7, #28]
    3508:	685b      	ldr	r3, [r3, #4]
    350a:	441a      	add	r2, r3
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	425b      	negs	r3, r3
    3510:	4413      	add	r3, r2
    3512:	3301      	adds	r3, #1
    3514:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    3516:	68bb      	ldr	r3, [r7, #8]
    3518:	689a      	ldr	r2, [r3, #8]
    351a:	697b      	ldr	r3, [r7, #20]
    351c:	429a      	cmp	r2, r3
    351e:	d909      	bls.n	3534 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3520:	69fb      	ldr	r3, [r7, #28]
    3522:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3524:	69f8      	ldr	r0, [r7, #28]
    3526:	4b0e      	ldr	r3, [pc, #56]	; (3560 <timer_add_timer_task+0xa8>)
    3528:	4798      	blx	r3
    352a:	61f8      	str	r0, [r7, #28]
    352c:	69fb      	ldr	r3, [r7, #28]
    352e:	2b00      	cmp	r3, #0
    3530:	d1d9      	bne.n	34e6 <timer_add_timer_task+0x2e>
    3532:	e000      	b.n	3536 <timer_add_timer_task+0x7e>
			break;
    3534:	bf00      	nop
	}

	if (it == head) {
    3536:	69fa      	ldr	r2, [r7, #28]
    3538:	693b      	ldr	r3, [r7, #16]
    353a:	429a      	cmp	r2, r3
    353c:	d104      	bne.n	3548 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    353e:	68b9      	ldr	r1, [r7, #8]
    3540:	68f8      	ldr	r0, [r7, #12]
    3542:	4b06      	ldr	r3, [pc, #24]	; (355c <timer_add_timer_task+0xa4>)
    3544:	4798      	blx	r3
    3546:	e003      	b.n	3550 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    3548:	68b9      	ldr	r1, [r7, #8]
    354a:	69b8      	ldr	r0, [r7, #24]
    354c:	4b05      	ldr	r3, [pc, #20]	; (3564 <timer_add_timer_task+0xac>)
    354e:	4798      	blx	r3
	}
}
    3550:	3720      	adds	r7, #32
    3552:	46bd      	mov	sp, r7
    3554:	bd80      	pop	{r7, pc}
    3556:	bf00      	nop
    3558:	00003185 	.word	0x00003185
    355c:	00003fd9 	.word	0x00003fd9
    3560:	0000319d 	.word	0x0000319d
    3564:	00004031 	.word	0x00004031

00003568 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    3568:	b580      	push	{r7, lr}
    356a:	b086      	sub	sp, #24
    356c:	af00      	add	r7, sp, #0
    356e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    3570:	687b      	ldr	r3, [r7, #4]
    3572:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    3574:	693b      	ldr	r3, [r7, #16]
    3576:	3314      	adds	r3, #20
    3578:	4618      	mov	r0, r3
    357a:	4b27      	ldr	r3, [pc, #156]	; (3618 <timer_process_counted+0xb0>)
    357c:	4798      	blx	r3
    357e:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    3580:	693b      	ldr	r3, [r7, #16]
    3582:	691b      	ldr	r3, [r3, #16]
    3584:	1c5a      	adds	r2, r3, #1
    3586:	693b      	ldr	r3, [r7, #16]
    3588:	611a      	str	r2, [r3, #16]
    358a:	693b      	ldr	r3, [r7, #16]
    358c:	691b      	ldr	r3, [r3, #16]
    358e:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    3590:	693b      	ldr	r3, [r7, #16]
    3592:	7e1b      	ldrb	r3, [r3, #24]
    3594:	b2db      	uxtb	r3, r3
    3596:	f003 0301 	and.w	r3, r3, #1
    359a:	2b00      	cmp	r3, #0
    359c:	d106      	bne.n	35ac <timer_process_counted+0x44>
    359e:	693b      	ldr	r3, [r7, #16]
    35a0:	7e1b      	ldrb	r3, [r3, #24]
    35a2:	b2db      	uxtb	r3, r3
    35a4:	f003 0302 	and.w	r3, r3, #2
    35a8:	2b00      	cmp	r3, #0
    35aa:	d027      	beq.n	35fc <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    35ac:	693b      	ldr	r3, [r7, #16]
    35ae:	7e1b      	ldrb	r3, [r3, #24]
    35b0:	b2db      	uxtb	r3, r3
    35b2:	f043 0302 	orr.w	r3, r3, #2
    35b6:	b2da      	uxtb	r2, r3
    35b8:	693b      	ldr	r3, [r7, #16]
    35ba:	761a      	strb	r2, [r3, #24]
		return;
    35bc:	e029      	b.n	3612 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    35be:	697b      	ldr	r3, [r7, #20]
    35c0:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    35c2:	693b      	ldr	r3, [r7, #16]
    35c4:	3314      	adds	r3, #20
    35c6:	4618      	mov	r0, r3
    35c8:	4b14      	ldr	r3, [pc, #80]	; (361c <timer_process_counted+0xb4>)
    35ca:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    35cc:	68bb      	ldr	r3, [r7, #8]
    35ce:	7c1b      	ldrb	r3, [r3, #16]
    35d0:	2b01      	cmp	r3, #1
    35d2:	d109      	bne.n	35e8 <timer_process_counted+0x80>
			tmp->time_label = time;
    35d4:	68bb      	ldr	r3, [r7, #8]
    35d6:	68fa      	ldr	r2, [r7, #12]
    35d8:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    35da:	693b      	ldr	r3, [r7, #16]
    35dc:	3314      	adds	r3, #20
    35de:	68fa      	ldr	r2, [r7, #12]
    35e0:	68b9      	ldr	r1, [r7, #8]
    35e2:	4618      	mov	r0, r3
    35e4:	4b0e      	ldr	r3, [pc, #56]	; (3620 <timer_process_counted+0xb8>)
    35e6:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    35e8:	693b      	ldr	r3, [r7, #16]
    35ea:	3314      	adds	r3, #20
    35ec:	4618      	mov	r0, r3
    35ee:	4b0a      	ldr	r3, [pc, #40]	; (3618 <timer_process_counted+0xb0>)
    35f0:	4798      	blx	r3
    35f2:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    35f4:	68bb      	ldr	r3, [r7, #8]
    35f6:	68db      	ldr	r3, [r3, #12]
    35f8:	68b8      	ldr	r0, [r7, #8]
    35fa:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    35fc:	697b      	ldr	r3, [r7, #20]
    35fe:	2b00      	cmp	r3, #0
    3600:	d007      	beq.n	3612 <timer_process_counted+0xaa>
    3602:	697b      	ldr	r3, [r7, #20]
    3604:	685b      	ldr	r3, [r3, #4]
    3606:	68fa      	ldr	r2, [r7, #12]
    3608:	1ad2      	subs	r2, r2, r3
    360a:	697b      	ldr	r3, [r7, #20]
    360c:	689b      	ldr	r3, [r3, #8]
    360e:	429a      	cmp	r2, r3
    3610:	d2d5      	bcs.n	35be <timer_process_counted+0x56>
	}
}
    3612:	3718      	adds	r7, #24
    3614:	46bd      	mov	sp, r7
    3616:	bd80      	pop	{r7, pc}
    3618:	00003185 	.word	0x00003185
    361c:	000040d1 	.word	0x000040d1
    3620:	000034b9 	.word	0x000034b9

00003624 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    3624:	b480      	push	{r7}
    3626:	b085      	sub	sp, #20
    3628:	af00      	add	r7, sp, #0
    362a:	4603      	mov	r3, r0
    362c:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    362e:	2300      	movs	r3, #0
    3630:	73fb      	strb	r3, [r7, #15]
    3632:	e029      	b.n	3688 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3634:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3638:	4a19      	ldr	r2, [pc, #100]	; (36a0 <_usb_d_find_ep+0x7c>)
    363a:	015b      	lsls	r3, r3, #5
    363c:	4413      	add	r3, r2
    363e:	3301      	adds	r3, #1
    3640:	781b      	ldrb	r3, [r3, #0]
    3642:	79fa      	ldrb	r2, [r7, #7]
    3644:	429a      	cmp	r2, r3
    3646:	d102      	bne.n	364e <_usb_d_find_ep+0x2a>
			return i;
    3648:	f997 300f 	ldrsb.w	r3, [r7, #15]
    364c:	e022      	b.n	3694 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    364e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3652:	4a13      	ldr	r2, [pc, #76]	; (36a0 <_usb_d_find_ep+0x7c>)
    3654:	015b      	lsls	r3, r3, #5
    3656:	4413      	add	r3, r2
    3658:	781b      	ldrb	r3, [r3, #0]
    365a:	2b00      	cmp	r3, #0
    365c:	d10e      	bne.n	367c <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    365e:	79fb      	ldrb	r3, [r7, #7]
    3660:	f003 030f 	and.w	r3, r3, #15
    3664:	f997 200f 	ldrsb.w	r2, [r7, #15]
    3668:	490d      	ldr	r1, [pc, #52]	; (36a0 <_usb_d_find_ep+0x7c>)
    366a:	0152      	lsls	r2, r2, #5
    366c:	440a      	add	r2, r1
    366e:	3201      	adds	r2, #1
    3670:	7812      	ldrb	r2, [r2, #0]
    3672:	4293      	cmp	r3, r2
    3674:	d102      	bne.n	367c <_usb_d_find_ep+0x58>
			return i;
    3676:	f997 300f 	ldrsb.w	r3, [r7, #15]
    367a:	e00b      	b.n	3694 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    367c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3680:	b2db      	uxtb	r3, r3
    3682:	3301      	adds	r3, #1
    3684:	b2db      	uxtb	r3, r3
    3686:	73fb      	strb	r3, [r7, #15]
    3688:	f997 300f 	ldrsb.w	r3, [r7, #15]
    368c:	2b03      	cmp	r3, #3
    368e:	ddd1      	ble.n	3634 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3690:	f04f 33ff 	mov.w	r3, #4294967295
}
    3694:	4618      	mov	r0, r3
    3696:	3714      	adds	r7, #20
    3698:	46bd      	mov	sp, r7
    369a:	f85d 7b04 	ldr.w	r7, [sp], #4
    369e:	4770      	bx	lr
    36a0:	20002ef8 	.word	0x20002ef8

000036a4 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    36a4:	b580      	push	{r7, lr}
    36a6:	b088      	sub	sp, #32
    36a8:	af00      	add	r7, sp, #0
    36aa:	60ba      	str	r2, [r7, #8]
    36ac:	607b      	str	r3, [r7, #4]
    36ae:	4603      	mov	r3, r0
    36b0:	73fb      	strb	r3, [r7, #15]
    36b2:	460b      	mov	r3, r1
    36b4:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    36b6:	68bb      	ldr	r3, [r7, #8]
    36b8:	617b      	str	r3, [r7, #20]
    36ba:	687b      	ldr	r3, [r7, #4]
    36bc:	61bb      	str	r3, [r7, #24]
    36be:	7bbb      	ldrb	r3, [r7, #14]
    36c0:	2b00      	cmp	r3, #0
    36c2:	d004      	beq.n	36ce <_usb_d_trans+0x2a>
    36c4:	7bfb      	ldrb	r3, [r7, #15]
    36c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    36ca:	b2db      	uxtb	r3, r3
    36cc:	e003      	b.n	36d6 <_usb_d_trans+0x32>
    36ce:	7bfb      	ldrb	r3, [r7, #15]
    36d0:	f003 030f 	and.w	r3, r3, #15
    36d4:	b2db      	uxtb	r3, r3
    36d6:	773b      	strb	r3, [r7, #28]
    36d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    36dc:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    36de:	f107 0314 	add.w	r3, r7, #20
    36e2:	4618      	mov	r0, r3
    36e4:	4b03      	ldr	r3, [pc, #12]	; (36f4 <_usb_d_trans+0x50>)
    36e6:	4798      	blx	r3
    36e8:	4603      	mov	r3, r0
}
    36ea:	4618      	mov	r0, r3
    36ec:	3720      	adds	r7, #32
    36ee:	46bd      	mov	sp, r7
    36f0:	bd80      	pop	{r7, pc}
    36f2:	bf00      	nop
    36f4:	0000ae39 	.word	0x0000ae39

000036f8 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    36f8:	b480      	push	{r7}
    36fa:	b085      	sub	sp, #20
    36fc:	af00      	add	r7, sp, #0
    36fe:	60f8      	str	r0, [r7, #12]
    3700:	60b9      	str	r1, [r7, #8]
    3702:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3704:	2300      	movs	r3, #0
}
    3706:	4618      	mov	r0, r3
    3708:	3714      	adds	r7, #20
    370a:	46bd      	mov	sp, r7
    370c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3710:	4770      	bx	lr
	...

00003714 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    3714:	b580      	push	{r7, lr}
    3716:	b086      	sub	sp, #24
    3718:	af00      	add	r7, sp, #0
    371a:	4603      	mov	r3, r0
    371c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    371e:	79fb      	ldrb	r3, [r7, #7]
    3720:	4618      	mov	r0, r3
    3722:	4b2a      	ldr	r3, [pc, #168]	; (37cc <usb_d_cb_trans_setup+0xb8>)
    3724:	4798      	blx	r3
    3726:	4603      	mov	r3, r0
    3728:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    372a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    372e:	015b      	lsls	r3, r3, #5
    3730:	4a27      	ldr	r2, [pc, #156]	; (37d0 <usb_d_cb_trans_setup+0xbc>)
    3732:	4413      	add	r3, r2
    3734:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    3736:	693b      	ldr	r3, [r7, #16]
    3738:	330c      	adds	r3, #12
    373a:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    373c:	79fb      	ldrb	r3, [r7, #7]
    373e:	68f9      	ldr	r1, [r7, #12]
    3740:	4618      	mov	r0, r3
    3742:	4b24      	ldr	r3, [pc, #144]	; (37d4 <usb_d_cb_trans_setup+0xc0>)
    3744:	4798      	blx	r3
    3746:	4603      	mov	r3, r0
    3748:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    374a:	7afb      	ldrb	r3, [r7, #11]
    374c:	2b08      	cmp	r3, #8
    374e:	d00d      	beq.n	376c <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3750:	79fb      	ldrb	r3, [r7, #7]
    3752:	2101      	movs	r1, #1
    3754:	4618      	mov	r0, r3
    3756:	4b20      	ldr	r3, [pc, #128]	; (37d8 <usb_d_cb_trans_setup+0xc4>)
    3758:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    375a:	79fb      	ldrb	r3, [r7, #7]
    375c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3760:	b2db      	uxtb	r3, r3
    3762:	2101      	movs	r1, #1
    3764:	4618      	mov	r0, r3
    3766:	4b1c      	ldr	r3, [pc, #112]	; (37d8 <usb_d_cb_trans_setup+0xc4>)
    3768:	4798      	blx	r3
		return;
    376a:	e02b      	b.n	37c4 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    376c:	79fb      	ldrb	r3, [r7, #7]
    376e:	2100      	movs	r1, #0
    3770:	4618      	mov	r0, r3
    3772:	4b19      	ldr	r3, [pc, #100]	; (37d8 <usb_d_cb_trans_setup+0xc4>)
    3774:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    3776:	79fb      	ldrb	r3, [r7, #7]
    3778:	f063 037f 	orn	r3, r3, #127	; 0x7f
    377c:	b2db      	uxtb	r3, r3
    377e:	2100      	movs	r1, #0
    3780:	4618      	mov	r0, r3
    3782:	4b15      	ldr	r3, [pc, #84]	; (37d8 <usb_d_cb_trans_setup+0xc4>)
    3784:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    3786:	693b      	ldr	r3, [r7, #16]
    3788:	2201      	movs	r2, #1
    378a:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    378c:	693b      	ldr	r3, [r7, #16]
    378e:	695b      	ldr	r3, [r3, #20]
    3790:	79fa      	ldrb	r2, [r7, #7]
    3792:	68f9      	ldr	r1, [r7, #12]
    3794:	4610      	mov	r0, r2
    3796:	4798      	blx	r3
    3798:	4603      	mov	r3, r0
    379a:	f083 0301 	eor.w	r3, r3, #1
    379e:	b2db      	uxtb	r3, r3
    37a0:	2b00      	cmp	r3, #0
    37a2:	d00f      	beq.n	37c4 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    37a4:	693b      	ldr	r3, [r7, #16]
    37a6:	2205      	movs	r2, #5
    37a8:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    37aa:	79fb      	ldrb	r3, [r7, #7]
    37ac:	2101      	movs	r1, #1
    37ae:	4618      	mov	r0, r3
    37b0:	4b09      	ldr	r3, [pc, #36]	; (37d8 <usb_d_cb_trans_setup+0xc4>)
    37b2:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    37b4:	79fb      	ldrb	r3, [r7, #7]
    37b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    37ba:	b2db      	uxtb	r3, r3
    37bc:	2101      	movs	r1, #1
    37be:	4618      	mov	r0, r3
    37c0:	4b05      	ldr	r3, [pc, #20]	; (37d8 <usb_d_cb_trans_setup+0xc4>)
    37c2:	4798      	blx	r3
	}
}
    37c4:	3718      	adds	r7, #24
    37c6:	46bd      	mov	sp, r7
    37c8:	bd80      	pop	{r7, pc}
    37ca:	bf00      	nop
    37cc:	00003625 	.word	0x00003625
    37d0:	20002ef8 	.word	0x20002ef8
    37d4:	0000ad91 	.word	0x0000ad91
    37d8:	0000ac09 	.word	0x0000ac09

000037dc <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    37dc:	b580      	push	{r7, lr}
    37de:	b084      	sub	sp, #16
    37e0:	af00      	add	r7, sp, #0
    37e2:	4603      	mov	r3, r0
    37e4:	6039      	str	r1, [r7, #0]
    37e6:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    37e8:	79fb      	ldrb	r3, [r7, #7]
    37ea:	4618      	mov	r0, r3
    37ec:	4b0d      	ldr	r3, [pc, #52]	; (3824 <usb_d_cb_trans_more+0x48>)
    37ee:	4798      	blx	r3
    37f0:	4603      	mov	r3, r0
    37f2:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    37f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    37f8:	015b      	lsls	r3, r3, #5
    37fa:	4a0b      	ldr	r2, [pc, #44]	; (3828 <usb_d_cb_trans_more+0x4c>)
    37fc:	4413      	add	r3, r2
    37fe:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    3800:	68bb      	ldr	r3, [r7, #8]
    3802:	789b      	ldrb	r3, [r3, #2]
    3804:	2b03      	cmp	r3, #3
    3806:	d107      	bne.n	3818 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3808:	68bb      	ldr	r3, [r7, #8]
    380a:	699b      	ldr	r3, [r3, #24]
    380c:	79fa      	ldrb	r2, [r7, #7]
    380e:	6839      	ldr	r1, [r7, #0]
    3810:	4610      	mov	r0, r2
    3812:	4798      	blx	r3
    3814:	4603      	mov	r3, r0
    3816:	e000      	b.n	381a <usb_d_cb_trans_more+0x3e>
	}
	return false;
    3818:	2300      	movs	r3, #0
}
    381a:	4618      	mov	r0, r3
    381c:	3710      	adds	r7, #16
    381e:	46bd      	mov	sp, r7
    3820:	bd80      	pop	{r7, pc}
    3822:	bf00      	nop
    3824:	00003625 	.word	0x00003625
    3828:	20002ef8 	.word	0x20002ef8

0000382c <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    382c:	b590      	push	{r4, r7, lr}
    382e:	b087      	sub	sp, #28
    3830:	af02      	add	r7, sp, #8
    3832:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3834:	687b      	ldr	r3, [r7, #4]
    3836:	789b      	ldrb	r3, [r3, #2]
    3838:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    383a:	687b      	ldr	r3, [r7, #4]
    383c:	7b1b      	ldrb	r3, [r3, #12]
    383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3842:	2b00      	cmp	r3, #0
    3844:	bf14      	ite	ne
    3846:	2301      	movne	r3, #1
    3848:	2300      	moveq	r3, #0
    384a:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    384c:	7bfb      	ldrb	r3, [r7, #15]
    384e:	2b03      	cmp	r3, #3
    3850:	d13a      	bne.n	38c8 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    3852:	687b      	ldr	r3, [r7, #4]
    3854:	69db      	ldr	r3, [r3, #28]
    3856:	687a      	ldr	r2, [r7, #4]
    3858:	7850      	ldrb	r0, [r2, #1]
    385a:	687a      	ldr	r2, [r7, #4]
    385c:	320c      	adds	r2, #12
    385e:	2101      	movs	r1, #1
    3860:	4798      	blx	r3
    3862:	4603      	mov	r3, r0
    3864:	737b      	strb	r3, [r7, #13]
		if (err) {
    3866:	7b7b      	ldrb	r3, [r7, #13]
    3868:	2b00      	cmp	r3, #0
    386a:	d015      	beq.n	3898 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    386c:	687b      	ldr	r3, [r7, #4]
    386e:	2205      	movs	r2, #5
    3870:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    3872:	687b      	ldr	r3, [r7, #4]
    3874:	2202      	movs	r2, #2
    3876:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3878:	7bbb      	ldrb	r3, [r7, #14]
    387a:	2b00      	cmp	r3, #0
    387c:	d002      	beq.n	3884 <usb_d_ctrl_trans_done+0x58>
    387e:	687b      	ldr	r3, [r7, #4]
    3880:	785b      	ldrb	r3, [r3, #1]
    3882:	e004      	b.n	388e <usb_d_ctrl_trans_done+0x62>
    3884:	687b      	ldr	r3, [r7, #4]
    3886:	785b      	ldrb	r3, [r3, #1]
    3888:	f063 037f 	orn	r3, r3, #127	; 0x7f
    388c:	b2db      	uxtb	r3, r3
    388e:	2101      	movs	r1, #1
    3890:	4618      	mov	r0, r3
    3892:	4b15      	ldr	r3, [pc, #84]	; (38e8 <usb_d_ctrl_trans_done+0xbc>)
    3894:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    3896:	e022      	b.n	38de <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	2204      	movs	r2, #4
    389c:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    389e:	687b      	ldr	r3, [r7, #4]
    38a0:	7858      	ldrb	r0, [r3, #1]
    38a2:	7bbb      	ldrb	r3, [r7, #14]
    38a4:	2b00      	cmp	r3, #0
    38a6:	bf14      	ite	ne
    38a8:	2301      	movne	r3, #1
    38aa:	2300      	moveq	r3, #0
    38ac:	b2db      	uxtb	r3, r3
    38ae:	f083 0301 	eor.w	r3, r3, #1
    38b2:	b2db      	uxtb	r3, r3
    38b4:	f003 0301 	and.w	r3, r3, #1
    38b8:	b2d9      	uxtb	r1, r3
    38ba:	2301      	movs	r3, #1
    38bc:	9300      	str	r3, [sp, #0]
    38be:	2300      	movs	r3, #0
    38c0:	2200      	movs	r2, #0
    38c2:	4c0a      	ldr	r4, [pc, #40]	; (38ec <usb_d_ctrl_trans_done+0xc0>)
    38c4:	47a0      	blx	r4
}
    38c6:	e00a      	b.n	38de <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    38c8:	687b      	ldr	r3, [r7, #4]
    38ca:	69db      	ldr	r3, [r3, #28]
    38cc:	687a      	ldr	r2, [r7, #4]
    38ce:	7850      	ldrb	r0, [r2, #1]
    38d0:	687a      	ldr	r2, [r7, #4]
    38d2:	320c      	adds	r2, #12
    38d4:	2100      	movs	r1, #0
    38d6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    38d8:	687b      	ldr	r3, [r7, #4]
    38da:	2202      	movs	r2, #2
    38dc:	709a      	strb	r2, [r3, #2]
}
    38de:	bf00      	nop
    38e0:	3714      	adds	r7, #20
    38e2:	46bd      	mov	sp, r7
    38e4:	bd90      	pop	{r4, r7, pc}
    38e6:	bf00      	nop
    38e8:	0000ac09 	.word	0x0000ac09
    38ec:	000036a5 	.word	0x000036a5

000038f0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    38f0:	b580      	push	{r7, lr}
    38f2:	b086      	sub	sp, #24
    38f4:	af00      	add	r7, sp, #0
    38f6:	4603      	mov	r3, r0
    38f8:	60b9      	str	r1, [r7, #8]
    38fa:	607a      	str	r2, [r7, #4]
    38fc:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    38fe:	7bfb      	ldrb	r3, [r7, #15]
    3900:	4618      	mov	r0, r3
    3902:	4b2f      	ldr	r3, [pc, #188]	; (39c0 <_usb_d_cb_trans_done+0xd0>)
    3904:	4798      	blx	r3
    3906:	4603      	mov	r3, r0
    3908:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    390a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    390e:	015b      	lsls	r3, r3, #5
    3910:	4a2c      	ldr	r2, [pc, #176]	; (39c4 <_usb_d_cb_trans_done+0xd4>)
    3912:	4413      	add	r3, r2
    3914:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    3916:	68bb      	ldr	r3, [r7, #8]
    3918:	2b00      	cmp	r3, #0
    391a:	d10e      	bne.n	393a <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    391c:	693b      	ldr	r3, [r7, #16]
    391e:	2200      	movs	r2, #0
    3920:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3922:	693b      	ldr	r3, [r7, #16]
    3924:	781b      	ldrb	r3, [r3, #0]
    3926:	2b00      	cmp	r3, #0
    3928:	d103      	bne.n	3932 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    392a:	6938      	ldr	r0, [r7, #16]
    392c:	4b26      	ldr	r3, [pc, #152]	; (39c8 <_usb_d_cb_trans_done+0xd8>)
    392e:	4798      	blx	r3
			return;
    3930:	e043      	b.n	39ba <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3932:	693b      	ldr	r3, [r7, #16]
    3934:	2201      	movs	r2, #1
    3936:	709a      	strb	r2, [r3, #2]
    3938:	e038      	b.n	39ac <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    393a:	68bb      	ldr	r3, [r7, #8]
    393c:	2b01      	cmp	r3, #1
    393e:	d113      	bne.n	3968 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3940:	693b      	ldr	r3, [r7, #16]
    3942:	2202      	movs	r2, #2
    3944:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3946:	693b      	ldr	r3, [r7, #16]
    3948:	781b      	ldrb	r3, [r3, #0]
    394a:	2b00      	cmp	r3, #0
    394c:	d108      	bne.n	3960 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    394e:	693b      	ldr	r3, [r7, #16]
    3950:	2202      	movs	r2, #2
    3952:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3954:	7bfb      	ldrb	r3, [r7, #15]
    3956:	2100      	movs	r1, #0
    3958:	4618      	mov	r0, r3
    395a:	4b1c      	ldr	r3, [pc, #112]	; (39cc <_usb_d_cb_trans_done+0xdc>)
    395c:	4798      	blx	r3
    395e:	e025      	b.n	39ac <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3960:	693b      	ldr	r3, [r7, #16]
    3962:	2205      	movs	r2, #5
    3964:	709a      	strb	r2, [r3, #2]
    3966:	e021      	b.n	39ac <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3968:	68bb      	ldr	r3, [r7, #8]
    396a:	2b02      	cmp	r3, #2
    396c:	d10e      	bne.n	398c <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    396e:	693b      	ldr	r3, [r7, #16]
    3970:	2204      	movs	r2, #4
    3972:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3974:	693b      	ldr	r3, [r7, #16]
    3976:	781b      	ldrb	r3, [r3, #0]
    3978:	2b00      	cmp	r3, #0
    397a:	d103      	bne.n	3984 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    397c:	693b      	ldr	r3, [r7, #16]
    397e:	2202      	movs	r2, #2
    3980:	709a      	strb	r2, [r3, #2]
			return;
    3982:	e01a      	b.n	39ba <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3984:	693b      	ldr	r3, [r7, #16]
    3986:	2201      	movs	r2, #1
    3988:	709a      	strb	r2, [r3, #2]
    398a:	e00f      	b.n	39ac <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    398c:	68bb      	ldr	r3, [r7, #8]
    398e:	2b03      	cmp	r3, #3
    3990:	d106      	bne.n	39a0 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3992:	693b      	ldr	r3, [r7, #16]
    3994:	2200      	movs	r2, #0
    3996:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3998:	693b      	ldr	r3, [r7, #16]
    399a:	2205      	movs	r2, #5
    399c:	70da      	strb	r2, [r3, #3]
    399e:	e005      	b.n	39ac <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    39a0:	693b      	ldr	r3, [r7, #16]
    39a2:	2206      	movs	r2, #6
    39a4:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    39a6:	693b      	ldr	r3, [r7, #16]
    39a8:	2206      	movs	r2, #6
    39aa:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    39ac:	693b      	ldr	r3, [r7, #16]
    39ae:	69db      	ldr	r3, [r3, #28]
    39b0:	693a      	ldr	r2, [r7, #16]
    39b2:	78d1      	ldrb	r1, [r2, #3]
    39b4:	687a      	ldr	r2, [r7, #4]
    39b6:	7bf8      	ldrb	r0, [r7, #15]
    39b8:	4798      	blx	r3
}
    39ba:	3718      	adds	r7, #24
    39bc:	46bd      	mov	sp, r7
    39be:	bd80      	pop	{r7, pc}
    39c0:	00003625 	.word	0x00003625
    39c4:	20002ef8 	.word	0x20002ef8
    39c8:	0000382d 	.word	0x0000382d
    39cc:	0000ac09 	.word	0x0000ac09

000039d0 <usb_d_init>:

int32_t usb_d_init(void)
{
    39d0:	b580      	push	{r7, lr}
    39d2:	b082      	sub	sp, #8
    39d4:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    39d6:	4b21      	ldr	r3, [pc, #132]	; (3a5c <usb_d_init+0x8c>)
    39d8:	4798      	blx	r3
    39da:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    39dc:	683b      	ldr	r3, [r7, #0]
    39de:	2b00      	cmp	r3, #0
    39e0:	da01      	bge.n	39e6 <usb_d_init+0x16>
		return rc;
    39e2:	683b      	ldr	r3, [r7, #0]
    39e4:	e036      	b.n	3a54 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    39e6:	2280      	movs	r2, #128	; 0x80
    39e8:	2100      	movs	r1, #0
    39ea:	481d      	ldr	r0, [pc, #116]	; (3a60 <usb_d_init+0x90>)
    39ec:	4b1d      	ldr	r3, [pc, #116]	; (3a64 <usb_d_init+0x94>)
    39ee:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    39f0:	2300      	movs	r3, #0
    39f2:	71fb      	strb	r3, [r7, #7]
    39f4:	e01e      	b.n	3a34 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    39f6:	79fb      	ldrb	r3, [r7, #7]
    39f8:	4a19      	ldr	r2, [pc, #100]	; (3a60 <usb_d_init+0x90>)
    39fa:	015b      	lsls	r3, r3, #5
    39fc:	4413      	add	r3, r2
    39fe:	3301      	adds	r3, #1
    3a00:	22ff      	movs	r2, #255	; 0xff
    3a02:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3a04:	79fb      	ldrb	r3, [r7, #7]
    3a06:	4a16      	ldr	r2, [pc, #88]	; (3a60 <usb_d_init+0x90>)
    3a08:	015b      	lsls	r3, r3, #5
    3a0a:	4413      	add	r3, r2
    3a0c:	3314      	adds	r3, #20
    3a0e:	4a16      	ldr	r2, [pc, #88]	; (3a68 <usb_d_init+0x98>)
    3a10:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3a12:	79fb      	ldrb	r3, [r7, #7]
    3a14:	4a12      	ldr	r2, [pc, #72]	; (3a60 <usb_d_init+0x90>)
    3a16:	015b      	lsls	r3, r3, #5
    3a18:	4413      	add	r3, r2
    3a1a:	3318      	adds	r3, #24
    3a1c:	4a12      	ldr	r2, [pc, #72]	; (3a68 <usb_d_init+0x98>)
    3a1e:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3a20:	79fb      	ldrb	r3, [r7, #7]
    3a22:	4a0f      	ldr	r2, [pc, #60]	; (3a60 <usb_d_init+0x90>)
    3a24:	015b      	lsls	r3, r3, #5
    3a26:	4413      	add	r3, r2
    3a28:	331c      	adds	r3, #28
    3a2a:	4a0f      	ldr	r2, [pc, #60]	; (3a68 <usb_d_init+0x98>)
    3a2c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3a2e:	79fb      	ldrb	r3, [r7, #7]
    3a30:	3301      	adds	r3, #1
    3a32:	71fb      	strb	r3, [r7, #7]
    3a34:	79fb      	ldrb	r3, [r7, #7]
    3a36:	2b03      	cmp	r3, #3
    3a38:	d9dd      	bls.n	39f6 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3a3a:	490c      	ldr	r1, [pc, #48]	; (3a6c <usb_d_init+0x9c>)
    3a3c:	2000      	movs	r0, #0
    3a3e:	4b0c      	ldr	r3, [pc, #48]	; (3a70 <usb_d_init+0xa0>)
    3a40:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3a42:	490c      	ldr	r1, [pc, #48]	; (3a74 <usb_d_init+0xa4>)
    3a44:	2001      	movs	r0, #1
    3a46:	4b0a      	ldr	r3, [pc, #40]	; (3a70 <usb_d_init+0xa0>)
    3a48:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3a4a:	490b      	ldr	r1, [pc, #44]	; (3a78 <usb_d_init+0xa8>)
    3a4c:	2002      	movs	r0, #2
    3a4e:	4b08      	ldr	r3, [pc, #32]	; (3a70 <usb_d_init+0xa0>)
    3a50:	4798      	blx	r3
	return ERR_NONE;
    3a52:	2300      	movs	r3, #0
}
    3a54:	4618      	mov	r0, r3
    3a56:	3708      	adds	r7, #8
    3a58:	46bd      	mov	sp, r7
    3a5a:	bd80      	pop	{r7, pc}
    3a5c:	0000a451 	.word	0x0000a451
    3a60:	20002ef8 	.word	0x20002ef8
    3a64:	00010e15 	.word	0x00010e15
    3a68:	000036f9 	.word	0x000036f9
    3a6c:	00003715 	.word	0x00003715
    3a70:	0000b099 	.word	0x0000b099
    3a74:	000037dd 	.word	0x000037dd
    3a78:	000038f1 	.word	0x000038f1

00003a7c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3a7c:	b580      	push	{r7, lr}
    3a7e:	b082      	sub	sp, #8
    3a80:	af00      	add	r7, sp, #0
    3a82:	4603      	mov	r3, r0
    3a84:	6039      	str	r1, [r7, #0]
    3a86:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3a88:	79fb      	ldrb	r3, [r7, #7]
    3a8a:	6839      	ldr	r1, [r7, #0]
    3a8c:	4618      	mov	r0, r3
    3a8e:	4b03      	ldr	r3, [pc, #12]	; (3a9c <usb_d_register_callback+0x20>)
    3a90:	4798      	blx	r3
}
    3a92:	bf00      	nop
    3a94:	3708      	adds	r7, #8
    3a96:	46bd      	mov	sp, r7
    3a98:	bd80      	pop	{r7, pc}
    3a9a:	bf00      	nop
    3a9c:	0000b051 	.word	0x0000b051

00003aa0 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3aa0:	b580      	push	{r7, lr}
    3aa2:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3aa4:	4b02      	ldr	r3, [pc, #8]	; (3ab0 <usb_d_enable+0x10>)
    3aa6:	4798      	blx	r3
    3aa8:	4603      	mov	r3, r0
}
    3aaa:	4618      	mov	r0, r3
    3aac:	bd80      	pop	{r7, pc}
    3aae:	bf00      	nop
    3ab0:	0000a541 	.word	0x0000a541

00003ab4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3ab4:	b580      	push	{r7, lr}
    3ab6:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3ab8:	4b01      	ldr	r3, [pc, #4]	; (3ac0 <usb_d_attach+0xc>)
    3aba:	4798      	blx	r3
}
    3abc:	bf00      	nop
    3abe:	bd80      	pop	{r7, pc}
    3ac0:	0000a5c5 	.word	0x0000a5c5

00003ac4 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3ac4:	b580      	push	{r7, lr}
    3ac6:	b082      	sub	sp, #8
    3ac8:	af00      	add	r7, sp, #0
    3aca:	4603      	mov	r3, r0
    3acc:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3ace:	79fb      	ldrb	r3, [r7, #7]
    3ad0:	4618      	mov	r0, r3
    3ad2:	4b03      	ldr	r3, [pc, #12]	; (3ae0 <usb_d_set_address+0x1c>)
    3ad4:	4798      	blx	r3
}
    3ad6:	bf00      	nop
    3ad8:	3708      	adds	r7, #8
    3ada:	46bd      	mov	sp, r7
    3adc:	bd80      	pop	{r7, pc}
    3ade:	bf00      	nop
    3ae0:	0000a5d9 	.word	0x0000a5d9

00003ae4 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3ae4:	b580      	push	{r7, lr}
    3ae6:	b082      	sub	sp, #8
    3ae8:	af00      	add	r7, sp, #0
    3aea:	4603      	mov	r3, r0
    3aec:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3aee:	79fb      	ldrb	r3, [r7, #7]
    3af0:	b29b      	uxth	r3, r3
    3af2:	461a      	mov	r2, r3
    3af4:	2100      	movs	r1, #0
    3af6:	2000      	movs	r0, #0
    3af8:	4b03      	ldr	r3, [pc, #12]	; (3b08 <usb_d_ep0_init+0x24>)
    3afa:	4798      	blx	r3
    3afc:	4603      	mov	r3, r0
}
    3afe:	4618      	mov	r0, r3
    3b00:	3708      	adds	r7, #8
    3b02:	46bd      	mov	sp, r7
    3b04:	bd80      	pop	{r7, pc}
    3b06:	bf00      	nop
    3b08:	00003b0d 	.word	0x00003b0d

00003b0c <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3b0c:	b580      	push	{r7, lr}
    3b0e:	b086      	sub	sp, #24
    3b10:	af00      	add	r7, sp, #0
    3b12:	4603      	mov	r3, r0
    3b14:	71fb      	strb	r3, [r7, #7]
    3b16:	460b      	mov	r3, r1
    3b18:	71bb      	strb	r3, [r7, #6]
    3b1a:	4613      	mov	r3, r2
    3b1c:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3b1e:	79fb      	ldrb	r3, [r7, #7]
    3b20:	4618      	mov	r0, r3
    3b22:	4b1e      	ldr	r3, [pc, #120]	; (3b9c <usb_d_ep_init+0x90>)
    3b24:	4798      	blx	r3
    3b26:	4603      	mov	r3, r0
    3b28:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b2e:	015b      	lsls	r3, r3, #5
    3b30:	4a1b      	ldr	r2, [pc, #108]	; (3ba0 <usb_d_ep_init+0x94>)
    3b32:	4413      	add	r3, r2
    3b34:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    3b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	db02      	blt.n	3b44 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3b3e:	f06f 0313 	mvn.w	r3, #19
    3b42:	e027      	b.n	3b94 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3b44:	20ff      	movs	r0, #255	; 0xff
    3b46:	4b15      	ldr	r3, [pc, #84]	; (3b9c <usb_d_ep_init+0x90>)
    3b48:	4798      	blx	r3
    3b4a:	4603      	mov	r3, r0
    3b4c:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b52:	2b00      	cmp	r3, #0
    3b54:	da02      	bge.n	3b5c <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    3b56:	f06f 0314 	mvn.w	r3, #20
    3b5a:	e01b      	b.n	3b94 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3b60:	015b      	lsls	r3, r3, #5
    3b62:	4a0f      	ldr	r2, [pc, #60]	; (3ba0 <usb_d_ep_init+0x94>)
    3b64:	4413      	add	r3, r2
    3b66:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3b68:	88ba      	ldrh	r2, [r7, #4]
    3b6a:	79b9      	ldrb	r1, [r7, #6]
    3b6c:	79fb      	ldrb	r3, [r7, #7]
    3b6e:	4618      	mov	r0, r3
    3b70:	4b0c      	ldr	r3, [pc, #48]	; (3ba4 <usb_d_ep_init+0x98>)
    3b72:	4798      	blx	r3
    3b74:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3b76:	68fb      	ldr	r3, [r7, #12]
    3b78:	2b00      	cmp	r3, #0
    3b7a:	da01      	bge.n	3b80 <usb_d_ep_init+0x74>
		return rc;
    3b7c:	68fb      	ldr	r3, [r7, #12]
    3b7e:	e009      	b.n	3b94 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3b80:	693b      	ldr	r3, [r7, #16]
    3b82:	79fa      	ldrb	r2, [r7, #7]
    3b84:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3b86:	79bb      	ldrb	r3, [r7, #6]
    3b88:	f003 0303 	and.w	r3, r3, #3
    3b8c:	b2da      	uxtb	r2, r3
    3b8e:	693b      	ldr	r3, [r7, #16]
    3b90:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3b92:	2300      	movs	r3, #0
}
    3b94:	4618      	mov	r0, r3
    3b96:	3718      	adds	r7, #24
    3b98:	46bd      	mov	sp, r7
    3b9a:	bd80      	pop	{r7, pc}
    3b9c:	00003625 	.word	0x00003625
    3ba0:	20002ef8 	.word	0x20002ef8
    3ba4:	0000a679 	.word	0x0000a679

00003ba8 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3ba8:	b580      	push	{r7, lr}
    3baa:	b084      	sub	sp, #16
    3bac:	af00      	add	r7, sp, #0
    3bae:	4603      	mov	r3, r0
    3bb0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3bb2:	79fb      	ldrb	r3, [r7, #7]
    3bb4:	4618      	mov	r0, r3
    3bb6:	4b0d      	ldr	r3, [pc, #52]	; (3bec <usb_d_ep_deinit+0x44>)
    3bb8:	4798      	blx	r3
    3bba:	4603      	mov	r3, r0
    3bbc:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3bc2:	015b      	lsls	r3, r3, #5
    3bc4:	4a0a      	ldr	r2, [pc, #40]	; (3bf0 <usb_d_ep_deinit+0x48>)
    3bc6:	4413      	add	r3, r2
    3bc8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3bce:	2b00      	cmp	r3, #0
    3bd0:	db07      	blt.n	3be2 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3bd2:	79fb      	ldrb	r3, [r7, #7]
    3bd4:	4618      	mov	r0, r3
    3bd6:	4b07      	ldr	r3, [pc, #28]	; (3bf4 <usb_d_ep_deinit+0x4c>)
    3bd8:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3bda:	68bb      	ldr	r3, [r7, #8]
    3bdc:	22ff      	movs	r2, #255	; 0xff
    3bde:	705a      	strb	r2, [r3, #1]
    3be0:	e000      	b.n	3be4 <usb_d_ep_deinit+0x3c>
		return;
    3be2:	bf00      	nop
}
    3be4:	3710      	adds	r7, #16
    3be6:	46bd      	mov	sp, r7
    3be8:	bd80      	pop	{r7, pc}
    3bea:	bf00      	nop
    3bec:	00003625 	.word	0x00003625
    3bf0:	20002ef8 	.word	0x20002ef8
    3bf4:	0000a7ad 	.word	0x0000a7ad

00003bf8 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3bf8:	b580      	push	{r7, lr}
    3bfa:	b086      	sub	sp, #24
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	4603      	mov	r3, r0
    3c00:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c02:	79fb      	ldrb	r3, [r7, #7]
    3c04:	4618      	mov	r0, r3
    3c06:	4b15      	ldr	r3, [pc, #84]	; (3c5c <usb_d_ep_enable+0x64>)
    3c08:	4798      	blx	r3
    3c0a:	4603      	mov	r3, r0
    3c0c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c12:	015b      	lsls	r3, r3, #5
    3c14:	4a12      	ldr	r2, [pc, #72]	; (3c60 <usb_d_ep_enable+0x68>)
    3c16:	4413      	add	r3, r2
    3c18:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c1e:	2b00      	cmp	r3, #0
    3c20:	da02      	bge.n	3c28 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3c22:	f06f 0311 	mvn.w	r3, #17
    3c26:	e014      	b.n	3c52 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3c28:	693b      	ldr	r3, [r7, #16]
    3c2a:	781b      	ldrb	r3, [r3, #0]
    3c2c:	2b00      	cmp	r3, #0
    3c2e:	d101      	bne.n	3c34 <usb_d_ep_enable+0x3c>
    3c30:	2202      	movs	r2, #2
    3c32:	e000      	b.n	3c36 <usb_d_ep_enable+0x3e>
    3c34:	2201      	movs	r2, #1
    3c36:	693b      	ldr	r3, [r7, #16]
    3c38:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3c3a:	79fb      	ldrb	r3, [r7, #7]
    3c3c:	4618      	mov	r0, r3
    3c3e:	4b09      	ldr	r3, [pc, #36]	; (3c64 <usb_d_ep_enable+0x6c>)
    3c40:	4798      	blx	r3
    3c42:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3c44:	68fb      	ldr	r3, [r7, #12]
    3c46:	2b00      	cmp	r3, #0
    3c48:	da02      	bge.n	3c50 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3c4a:	693b      	ldr	r3, [r7, #16]
    3c4c:	2200      	movs	r2, #0
    3c4e:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3c50:	68fb      	ldr	r3, [r7, #12]
}
    3c52:	4618      	mov	r0, r3
    3c54:	3718      	adds	r7, #24
    3c56:	46bd      	mov	sp, r7
    3c58:	bd80      	pop	{r7, pc}
    3c5a:	bf00      	nop
    3c5c:	00003625 	.word	0x00003625
    3c60:	20002ef8 	.word	0x20002ef8
    3c64:	0000a891 	.word	0x0000a891

00003c68 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3c68:	b590      	push	{r4, r7, lr}
    3c6a:	b08d      	sub	sp, #52	; 0x34
    3c6c:	af02      	add	r7, sp, #8
    3c6e:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	7a1b      	ldrb	r3, [r3, #8]
    3c74:	4618      	mov	r0, r3
    3c76:	4b51      	ldr	r3, [pc, #324]	; (3dbc <usb_d_ep_transfer+0x154>)
    3c78:	4798      	blx	r3
    3c7a:	4603      	mov	r3, r0
    3c7c:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3c7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3c82:	015b      	lsls	r3, r3, #5
    3c84:	4a4e      	ldr	r2, [pc, #312]	; (3dc0 <usb_d_ep_transfer+0x158>)
    3c86:	4413      	add	r3, r2
    3c88:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	7a1b      	ldrb	r3, [r3, #8]
    3c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3c92:	2b00      	cmp	r3, #0
    3c94:	bf14      	ite	ne
    3c96:	2301      	movne	r3, #1
    3c98:	2300      	moveq	r3, #0
    3c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	7a5b      	ldrb	r3, [r3, #9]
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	bf14      	ite	ne
    3ca6:	2301      	movne	r3, #1
    3ca8:	2300      	moveq	r3, #0
    3caa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	685b      	ldr	r3, [r3, #4]
    3cb2:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3cb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3cb8:	2b00      	cmp	r3, #0
    3cba:	da02      	bge.n	3cc2 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3cbc:	f06f 0311 	mvn.w	r3, #17
    3cc0:	e077      	b.n	3db2 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3cc2:	f107 0308 	add.w	r3, r7, #8
    3cc6:	4618      	mov	r0, r3
    3cc8:	4b3e      	ldr	r3, [pc, #248]	; (3dc4 <usb_d_ep_transfer+0x15c>)
    3cca:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3ccc:	69bb      	ldr	r3, [r7, #24]
    3cce:	789b      	ldrb	r3, [r3, #2]
    3cd0:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3cd2:	7bfb      	ldrb	r3, [r7, #15]
    3cd4:	b2db      	uxtb	r3, r3
    3cd6:	2b01      	cmp	r3, #1
    3cd8:	d10c      	bne.n	3cf4 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3cda:	69bb      	ldr	r3, [r7, #24]
    3cdc:	2203      	movs	r2, #3
    3cde:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3ce0:	f107 0308 	add.w	r3, r7, #8
    3ce4:	4618      	mov	r0, r3
    3ce6:	4b38      	ldr	r3, [pc, #224]	; (3dc8 <usb_d_ep_transfer+0x160>)
    3ce8:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3cea:	69bb      	ldr	r3, [r7, #24]
    3cec:	781b      	ldrb	r3, [r3, #0]
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d151      	bne.n	3d96 <usb_d_ep_transfer+0x12e>
    3cf2:	e017      	b.n	3d24 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3cf4:	f107 0308 	add.w	r3, r7, #8
    3cf8:	4618      	mov	r0, r3
    3cfa:	4b33      	ldr	r3, [pc, #204]	; (3dc8 <usb_d_ep_transfer+0x160>)
    3cfc:	4798      	blx	r3
		switch (state) {
    3cfe:	7bfb      	ldrb	r3, [r7, #15]
    3d00:	b2db      	uxtb	r3, r3
    3d02:	2b05      	cmp	r3, #5
    3d04:	d004      	beq.n	3d10 <usb_d_ep_transfer+0xa8>
    3d06:	2b06      	cmp	r3, #6
    3d08:	d004      	beq.n	3d14 <usb_d_ep_transfer+0xac>
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	d005      	beq.n	3d1a <usb_d_ep_transfer+0xb2>
    3d0e:	e007      	b.n	3d20 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3d10:	2302      	movs	r3, #2
    3d12:	e04e      	b.n	3db2 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3d14:	f06f 030f 	mvn.w	r3, #15
    3d18:	e04b      	b.n	3db2 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3d1a:	f06f 0312 	mvn.w	r3, #18
    3d1e:	e048      	b.n	3db2 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3d20:	2301      	movs	r3, #1
    3d22:	e046      	b.n	3db2 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3d24:	69bb      	ldr	r3, [r7, #24]
    3d26:	7c9b      	ldrb	r3, [r3, #18]
    3d28:	b29a      	uxth	r2, r3
    3d2a:	69bb      	ldr	r3, [r7, #24]
    3d2c:	7cdb      	ldrb	r3, [r3, #19]
    3d2e:	b29b      	uxth	r3, r3
    3d30:	021b      	lsls	r3, r3, #8
    3d32:	b29b      	uxth	r3, r3
    3d34:	4413      	add	r3, r2
    3d36:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3d38:	8afb      	ldrh	r3, [r7, #22]
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d10b      	bne.n	3d56 <usb_d_ep_transfer+0xee>
			dir                 = true;
    3d3e:	2301      	movs	r3, #1
    3d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3d44:	2300      	movs	r3, #0
    3d46:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3d48:	2301      	movs	r3, #1
    3d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3d4e:	69bb      	ldr	r3, [r7, #24]
    3d50:	2204      	movs	r2, #4
    3d52:	709a      	strb	r2, [r3, #2]
    3d54:	e01f      	b.n	3d96 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3d56:	69bb      	ldr	r3, [r7, #24]
    3d58:	7b1b      	ldrb	r3, [r3, #12]
    3d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3d5e:	2b00      	cmp	r3, #0
    3d60:	bf14      	ite	ne
    3d62:	2301      	movne	r3, #1
    3d64:	2300      	moveq	r3, #0
    3d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3d6a:	8afa      	ldrh	r2, [r7, #22]
    3d6c:	6a3b      	ldr	r3, [r7, #32]
    3d6e:	429a      	cmp	r2, r3
    3d70:	d201      	bcs.n	3d76 <usb_d_ep_transfer+0x10e>
				len = req_len;
    3d72:	8afb      	ldrh	r3, [r7, #22]
    3d74:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d008      	beq.n	3d90 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3d7e:	8afa      	ldrh	r2, [r7, #22]
    3d80:	6a3b      	ldr	r3, [r7, #32]
    3d82:	429a      	cmp	r2, r3
    3d84:	bf8c      	ite	hi
    3d86:	2301      	movhi	r3, #1
    3d88:	2300      	movls	r3, #0
    3d8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3d8e:	e002      	b.n	3d96 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3d90:	2300      	movs	r3, #0
    3d92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	7a18      	ldrb	r0, [r3, #8]
    3d9a:	687b      	ldr	r3, [r7, #4]
    3d9c:	681a      	ldr	r2, [r3, #0]
    3d9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3da2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3da6:	9300      	str	r3, [sp, #0]
    3da8:	6a3b      	ldr	r3, [r7, #32]
    3daa:	4c08      	ldr	r4, [pc, #32]	; (3dcc <usb_d_ep_transfer+0x164>)
    3dac:	47a0      	blx	r4
    3dae:	6138      	str	r0, [r7, #16]
	return rc;
    3db0:	693b      	ldr	r3, [r7, #16]
}
    3db2:	4618      	mov	r0, r3
    3db4:	372c      	adds	r7, #44	; 0x2c
    3db6:	46bd      	mov	sp, r7
    3db8:	bd90      	pop	{r4, r7, pc}
    3dba:	bf00      	nop
    3dbc:	00003625 	.word	0x00003625
    3dc0:	20002ef8 	.word	0x20002ef8
    3dc4:	0000b805 	.word	0x0000b805
    3dc8:	0000b82b 	.word	0x0000b82b
    3dcc:	000036a5 	.word	0x000036a5

00003dd0 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3dd0:	b580      	push	{r7, lr}
    3dd2:	b084      	sub	sp, #16
    3dd4:	af00      	add	r7, sp, #0
    3dd6:	4603      	mov	r3, r0
    3dd8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3dda:	79fb      	ldrb	r3, [r7, #7]
    3ddc:	4618      	mov	r0, r3
    3dde:	4b0e      	ldr	r3, [pc, #56]	; (3e18 <usb_d_ep_abort+0x48>)
    3de0:	4798      	blx	r3
    3de2:	4603      	mov	r3, r0
    3de4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3dea:	015b      	lsls	r3, r3, #5
    3dec:	4a0b      	ldr	r2, [pc, #44]	; (3e1c <usb_d_ep_abort+0x4c>)
    3dee:	4413      	add	r3, r2
    3df0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3df6:	2b00      	cmp	r3, #0
    3df8:	db0a      	blt.n	3e10 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3dfa:	79fb      	ldrb	r3, [r7, #7]
    3dfc:	4618      	mov	r0, r3
    3dfe:	4b08      	ldr	r3, [pc, #32]	; (3e20 <usb_d_ep_abort+0x50>)
    3e00:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3e02:	68bb      	ldr	r3, [r7, #8]
    3e04:	2201      	movs	r2, #1
    3e06:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3e08:	68bb      	ldr	r3, [r7, #8]
    3e0a:	2204      	movs	r2, #4
    3e0c:	70da      	strb	r2, [r3, #3]
    3e0e:	e000      	b.n	3e12 <usb_d_ep_abort+0x42>
		return;
    3e10:	bf00      	nop
}
    3e12:	3710      	adds	r7, #16
    3e14:	46bd      	mov	sp, r7
    3e16:	bd80      	pop	{r7, pc}
    3e18:	00003625 	.word	0x00003625
    3e1c:	20002ef8 	.word	0x20002ef8
    3e20:	0000affd 	.word	0x0000affd

00003e24 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3e24:	b580      	push	{r7, lr}
    3e26:	b086      	sub	sp, #24
    3e28:	af00      	add	r7, sp, #0
    3e2a:	4603      	mov	r3, r0
    3e2c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3e2e:	79fb      	ldrb	r3, [r7, #7]
    3e30:	4618      	mov	r0, r3
    3e32:	4b1a      	ldr	r3, [pc, #104]	; (3e9c <_usb_d_ep_halt_clr+0x78>)
    3e34:	4798      	blx	r3
    3e36:	4603      	mov	r3, r0
    3e38:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3e3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3e3e:	015b      	lsls	r3, r3, #5
    3e40:	4a17      	ldr	r2, [pc, #92]	; (3ea0 <_usb_d_ep_halt_clr+0x7c>)
    3e42:	4413      	add	r3, r2
    3e44:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	da02      	bge.n	3e54 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3e4e:	f06f 0311 	mvn.w	r3, #17
    3e52:	e01f      	b.n	3e94 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3e54:	79fb      	ldrb	r3, [r7, #7]
    3e56:	2102      	movs	r1, #2
    3e58:	4618      	mov	r0, r3
    3e5a:	4b12      	ldr	r3, [pc, #72]	; (3ea4 <_usb_d_ep_halt_clr+0x80>)
    3e5c:	4798      	blx	r3
    3e5e:	4603      	mov	r3, r0
    3e60:	2b00      	cmp	r3, #0
    3e62:	d016      	beq.n	3e92 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3e64:	79fb      	ldrb	r3, [r7, #7]
    3e66:	2100      	movs	r1, #0
    3e68:	4618      	mov	r0, r3
    3e6a:	4b0e      	ldr	r3, [pc, #56]	; (3ea4 <_usb_d_ep_halt_clr+0x80>)
    3e6c:	4798      	blx	r3
    3e6e:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3e70:	68fb      	ldr	r3, [r7, #12]
    3e72:	2b00      	cmp	r3, #0
    3e74:	da01      	bge.n	3e7a <_usb_d_ep_halt_clr+0x56>
			return rc;
    3e76:	68fb      	ldr	r3, [r7, #12]
    3e78:	e00c      	b.n	3e94 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3e7a:	693b      	ldr	r3, [r7, #16]
    3e7c:	2201      	movs	r2, #1
    3e7e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3e80:	693b      	ldr	r3, [r7, #16]
    3e82:	2203      	movs	r2, #3
    3e84:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3e86:	693b      	ldr	r3, [r7, #16]
    3e88:	69db      	ldr	r3, [r3, #28]
    3e8a:	79f8      	ldrb	r0, [r7, #7]
    3e8c:	2200      	movs	r2, #0
    3e8e:	2103      	movs	r1, #3
    3e90:	4798      	blx	r3
	}
	return ERR_NONE;
    3e92:	2300      	movs	r3, #0
}
    3e94:	4618      	mov	r0, r3
    3e96:	3718      	adds	r7, #24
    3e98:	46bd      	mov	sp, r7
    3e9a:	bd80      	pop	{r7, pc}
    3e9c:	00003625 	.word	0x00003625
    3ea0:	20002ef8 	.word	0x20002ef8
    3ea4:	0000ac09 	.word	0x0000ac09

00003ea8 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3ea8:	b580      	push	{r7, lr}
    3eaa:	b082      	sub	sp, #8
    3eac:	af00      	add	r7, sp, #0
    3eae:	4603      	mov	r3, r0
    3eb0:	460a      	mov	r2, r1
    3eb2:	71fb      	strb	r3, [r7, #7]
    3eb4:	4613      	mov	r3, r2
    3eb6:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3eb8:	79bb      	ldrb	r3, [r7, #6]
    3eba:	2b00      	cmp	r3, #0
    3ebc:	d105      	bne.n	3eca <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3ebe:	79fb      	ldrb	r3, [r7, #7]
    3ec0:	4618      	mov	r0, r3
    3ec2:	4b0c      	ldr	r3, [pc, #48]	; (3ef4 <usb_d_ep_halt+0x4c>)
    3ec4:	4798      	blx	r3
    3ec6:	4603      	mov	r3, r0
    3ec8:	e00f      	b.n	3eea <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3eca:	79bb      	ldrb	r3, [r7, #6]
    3ecc:	2b01      	cmp	r3, #1
    3ece:	d106      	bne.n	3ede <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3ed0:	79fb      	ldrb	r3, [r7, #7]
    3ed2:	2101      	movs	r1, #1
    3ed4:	4618      	mov	r0, r3
    3ed6:	4b08      	ldr	r3, [pc, #32]	; (3ef8 <usb_d_ep_halt+0x50>)
    3ed8:	4798      	blx	r3
    3eda:	4603      	mov	r3, r0
    3edc:	e005      	b.n	3eea <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3ede:	79fb      	ldrb	r3, [r7, #7]
    3ee0:	2102      	movs	r1, #2
    3ee2:	4618      	mov	r0, r3
    3ee4:	4b04      	ldr	r3, [pc, #16]	; (3ef8 <usb_d_ep_halt+0x50>)
    3ee6:	4798      	blx	r3
    3ee8:	4603      	mov	r3, r0
	}
}
    3eea:	4618      	mov	r0, r3
    3eec:	3708      	adds	r7, #8
    3eee:	46bd      	mov	sp, r7
    3ef0:	bd80      	pop	{r7, pc}
    3ef2:	bf00      	nop
    3ef4:	00003e25 	.word	0x00003e25
    3ef8:	0000ac09 	.word	0x0000ac09

00003efc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3efc:	b580      	push	{r7, lr}
    3efe:	b086      	sub	sp, #24
    3f00:	af00      	add	r7, sp, #0
    3f02:	4603      	mov	r3, r0
    3f04:	603a      	str	r2, [r7, #0]
    3f06:	71fb      	strb	r3, [r7, #7]
    3f08:	460b      	mov	r3, r1
    3f0a:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3f0c:	79fb      	ldrb	r3, [r7, #7]
    3f0e:	4618      	mov	r0, r3
    3f10:	4b16      	ldr	r3, [pc, #88]	; (3f6c <usb_d_ep_register_callback+0x70>)
    3f12:	4798      	blx	r3
    3f14:	4603      	mov	r3, r0
    3f16:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3f1c:	015b      	lsls	r3, r3, #5
    3f1e:	4a14      	ldr	r2, [pc, #80]	; (3f70 <usb_d_ep_register_callback+0x74>)
    3f20:	4413      	add	r3, r2
    3f22:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3f24:	683b      	ldr	r3, [r7, #0]
    3f26:	2b00      	cmp	r3, #0
    3f28:	d001      	beq.n	3f2e <usb_d_ep_register_callback+0x32>
    3f2a:	683b      	ldr	r3, [r7, #0]
    3f2c:	e000      	b.n	3f30 <usb_d_ep_register_callback+0x34>
    3f2e:	4b11      	ldr	r3, [pc, #68]	; (3f74 <usb_d_ep_register_callback+0x78>)
    3f30:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3f36:	2b00      	cmp	r3, #0
    3f38:	db13      	blt.n	3f62 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3f3a:	79bb      	ldrb	r3, [r7, #6]
    3f3c:	2b01      	cmp	r3, #1
    3f3e:	d008      	beq.n	3f52 <usb_d_ep_register_callback+0x56>
    3f40:	2b02      	cmp	r3, #2
    3f42:	d00a      	beq.n	3f5a <usb_d_ep_register_callback+0x5e>
    3f44:	2b00      	cmp	r3, #0
    3f46:	d000      	beq.n	3f4a <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3f48:	e00c      	b.n	3f64 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3f4a:	693b      	ldr	r3, [r7, #16]
    3f4c:	68fa      	ldr	r2, [r7, #12]
    3f4e:	615a      	str	r2, [r3, #20]
		break;
    3f50:	e008      	b.n	3f64 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3f52:	693b      	ldr	r3, [r7, #16]
    3f54:	68fa      	ldr	r2, [r7, #12]
    3f56:	619a      	str	r2, [r3, #24]
		break;
    3f58:	e004      	b.n	3f64 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3f5a:	693b      	ldr	r3, [r7, #16]
    3f5c:	68fa      	ldr	r2, [r7, #12]
    3f5e:	61da      	str	r2, [r3, #28]
		break;
    3f60:	e000      	b.n	3f64 <usb_d_ep_register_callback+0x68>
		return;
    3f62:	bf00      	nop
	}
}
    3f64:	3718      	adds	r7, #24
    3f66:	46bd      	mov	sp, r7
    3f68:	bd80      	pop	{r7, pc}
    3f6a:	bf00      	nop
    3f6c:	00003625 	.word	0x00003625
    3f70:	20002ef8 	.word	0x20002ef8
    3f74:	000036f9 	.word	0x000036f9

00003f78 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3f78:	b480      	push	{r7}
    3f7a:	b085      	sub	sp, #20
    3f7c:	af00      	add	r7, sp, #0
    3f7e:	4603      	mov	r3, r0
    3f80:	60b9      	str	r1, [r7, #8]
    3f82:	607a      	str	r2, [r7, #4]
    3f84:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3f86:	7bfb      	ldrb	r3, [r7, #15]
    3f88:	f083 0301 	eor.w	r3, r3, #1
    3f8c:	b2db      	uxtb	r3, r3
    3f8e:	2b00      	cmp	r3, #0
    3f90:	d000      	beq.n	3f94 <assert+0x1c>
		__asm("BKPT #0");
    3f92:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3f94:	bf00      	nop
    3f96:	3714      	adds	r7, #20
    3f98:	46bd      	mov	sp, r7
    3f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f9e:	4770      	bx	lr

00003fa0 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3fa0:	b480      	push	{r7}
    3fa2:	b085      	sub	sp, #20
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
    3fa8:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3faa:	687b      	ldr	r3, [r7, #4]
    3fac:	681b      	ldr	r3, [r3, #0]
    3fae:	60fb      	str	r3, [r7, #12]
    3fb0:	e008      	b.n	3fc4 <is_list_element+0x24>
		if (it == element) {
    3fb2:	68fa      	ldr	r2, [r7, #12]
    3fb4:	683b      	ldr	r3, [r7, #0]
    3fb6:	429a      	cmp	r2, r3
    3fb8:	d101      	bne.n	3fbe <is_list_element+0x1e>
			return true;
    3fba:	2301      	movs	r3, #1
    3fbc:	e006      	b.n	3fcc <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3fbe:	68fb      	ldr	r3, [r7, #12]
    3fc0:	681b      	ldr	r3, [r3, #0]
    3fc2:	60fb      	str	r3, [r7, #12]
    3fc4:	68fb      	ldr	r3, [r7, #12]
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d1f3      	bne.n	3fb2 <is_list_element+0x12>
		}
	}

	return false;
    3fca:	2300      	movs	r3, #0
}
    3fcc:	4618      	mov	r0, r3
    3fce:	3714      	adds	r7, #20
    3fd0:	46bd      	mov	sp, r7
    3fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fd6:	4770      	bx	lr

00003fd8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3fd8:	b580      	push	{r7, lr}
    3fda:	b082      	sub	sp, #8
    3fdc:	af00      	add	r7, sp, #0
    3fde:	6078      	str	r0, [r7, #4]
    3fe0:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3fe2:	6839      	ldr	r1, [r7, #0]
    3fe4:	6878      	ldr	r0, [r7, #4]
    3fe6:	4b0f      	ldr	r3, [pc, #60]	; (4024 <list_insert_as_head+0x4c>)
    3fe8:	4798      	blx	r3
    3fea:	4603      	mov	r3, r0
    3fec:	2b00      	cmp	r3, #0
    3fee:	bf14      	ite	ne
    3ff0:	2301      	movne	r3, #1
    3ff2:	2300      	moveq	r3, #0
    3ff4:	b2db      	uxtb	r3, r3
    3ff6:	f083 0301 	eor.w	r3, r3, #1
    3ffa:	b2db      	uxtb	r3, r3
    3ffc:	f003 0301 	and.w	r3, r3, #1
    4000:	b2db      	uxtb	r3, r3
    4002:	2239      	movs	r2, #57	; 0x39
    4004:	4908      	ldr	r1, [pc, #32]	; (4028 <list_insert_as_head+0x50>)
    4006:	4618      	mov	r0, r3
    4008:	4b08      	ldr	r3, [pc, #32]	; (402c <list_insert_as_head+0x54>)
    400a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    400c:	687b      	ldr	r3, [r7, #4]
    400e:	681a      	ldr	r2, [r3, #0]
    4010:	683b      	ldr	r3, [r7, #0]
    4012:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	683a      	ldr	r2, [r7, #0]
    4018:	601a      	str	r2, [r3, #0]
}
    401a:	bf00      	nop
    401c:	3708      	adds	r7, #8
    401e:	46bd      	mov	sp, r7
    4020:	bd80      	pop	{r7, pc}
    4022:	bf00      	nop
    4024:	00003fa1 	.word	0x00003fa1
    4028:	000113fc 	.word	0x000113fc
    402c:	00003f79 	.word	0x00003f79

00004030 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    4030:	b480      	push	{r7}
    4032:	b083      	sub	sp, #12
    4034:	af00      	add	r7, sp, #0
    4036:	6078      	str	r0, [r7, #4]
    4038:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    403a:	687b      	ldr	r3, [r7, #4]
    403c:	681a      	ldr	r2, [r3, #0]
    403e:	683b      	ldr	r3, [r7, #0]
    4040:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    4042:	687b      	ldr	r3, [r7, #4]
    4044:	683a      	ldr	r2, [r7, #0]
    4046:	601a      	str	r2, [r3, #0]
}
    4048:	bf00      	nop
    404a:	370c      	adds	r7, #12
    404c:	46bd      	mov	sp, r7
    404e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4052:	4770      	bx	lr

00004054 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    4054:	b580      	push	{r7, lr}
    4056:	b084      	sub	sp, #16
    4058:	af00      	add	r7, sp, #0
    405a:	6078      	str	r0, [r7, #4]
    405c:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    405e:	687b      	ldr	r3, [r7, #4]
    4060:	681b      	ldr	r3, [r3, #0]
    4062:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    4064:	6839      	ldr	r1, [r7, #0]
    4066:	6878      	ldr	r0, [r7, #4]
    4068:	4b16      	ldr	r3, [pc, #88]	; (40c4 <list_insert_at_end+0x70>)
    406a:	4798      	blx	r3
    406c:	4603      	mov	r3, r0
    406e:	2b00      	cmp	r3, #0
    4070:	bf14      	ite	ne
    4072:	2301      	movne	r3, #1
    4074:	2300      	moveq	r3, #0
    4076:	b2db      	uxtb	r3, r3
    4078:	f083 0301 	eor.w	r3, r3, #1
    407c:	b2db      	uxtb	r3, r3
    407e:	f003 0301 	and.w	r3, r3, #1
    4082:	b2db      	uxtb	r3, r3
    4084:	224f      	movs	r2, #79	; 0x4f
    4086:	4910      	ldr	r1, [pc, #64]	; (40c8 <list_insert_at_end+0x74>)
    4088:	4618      	mov	r0, r3
    408a:	4b10      	ldr	r3, [pc, #64]	; (40cc <list_insert_at_end+0x78>)
    408c:	4798      	blx	r3

	if (!list->head) {
    408e:	687b      	ldr	r3, [r7, #4]
    4090:	681b      	ldr	r3, [r3, #0]
    4092:	2b00      	cmp	r3, #0
    4094:	d109      	bne.n	40aa <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	683a      	ldr	r2, [r7, #0]
    409a:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    409c:	683b      	ldr	r3, [r7, #0]
    409e:	2200      	movs	r2, #0
    40a0:	601a      	str	r2, [r3, #0]
		return;
    40a2:	e00c      	b.n	40be <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    40a4:	68fb      	ldr	r3, [r7, #12]
    40a6:	681b      	ldr	r3, [r3, #0]
    40a8:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    40aa:	68fb      	ldr	r3, [r7, #12]
    40ac:	681b      	ldr	r3, [r3, #0]
    40ae:	2b00      	cmp	r3, #0
    40b0:	d1f8      	bne.n	40a4 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    40b2:	68fb      	ldr	r3, [r7, #12]
    40b4:	683a      	ldr	r2, [r7, #0]
    40b6:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    40b8:	683b      	ldr	r3, [r7, #0]
    40ba:	2200      	movs	r2, #0
    40bc:	601a      	str	r2, [r3, #0]
}
    40be:	3710      	adds	r7, #16
    40c0:	46bd      	mov	sp, r7
    40c2:	bd80      	pop	{r7, pc}
    40c4:	00003fa1 	.word	0x00003fa1
    40c8:	000113fc 	.word	0x000113fc
    40cc:	00003f79 	.word	0x00003f79

000040d0 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    40d0:	b480      	push	{r7}
    40d2:	b085      	sub	sp, #20
    40d4:	af00      	add	r7, sp, #0
    40d6:	6078      	str	r0, [r7, #4]
	if (list->head) {
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	681b      	ldr	r3, [r3, #0]
    40dc:	2b00      	cmp	r3, #0
    40de:	d009      	beq.n	40f4 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    40e0:	687b      	ldr	r3, [r7, #4]
    40e2:	681b      	ldr	r3, [r3, #0]
    40e4:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    40e6:	687b      	ldr	r3, [r7, #4]
    40e8:	681b      	ldr	r3, [r3, #0]
    40ea:	681a      	ldr	r2, [r3, #0]
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    40f0:	68fb      	ldr	r3, [r7, #12]
    40f2:	e000      	b.n	40f6 <list_remove_head+0x26>
	}

	return NULL;
    40f4:	2300      	movs	r3, #0
}
    40f6:	4618      	mov	r0, r3
    40f8:	3714      	adds	r7, #20
    40fa:	46bd      	mov	sp, r7
    40fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4100:	4770      	bx	lr

00004102 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    4102:	b480      	push	{r7}
    4104:	b085      	sub	sp, #20
    4106:	af00      	add	r7, sp, #0
    4108:	6078      	str	r0, [r7, #4]
    410a:	6039      	str	r1, [r7, #0]
	if (!element) {
    410c:	683b      	ldr	r3, [r7, #0]
    410e:	2b00      	cmp	r3, #0
    4110:	d101      	bne.n	4116 <list_delete_element+0x14>
		return false;
    4112:	2300      	movs	r3, #0
    4114:	e024      	b.n	4160 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    4116:	687b      	ldr	r3, [r7, #4]
    4118:	681a      	ldr	r2, [r3, #0]
    411a:	683b      	ldr	r3, [r7, #0]
    411c:	429a      	cmp	r2, r3
    411e:	d106      	bne.n	412e <list_delete_element+0x2c>
		list->head = list->head->next;
    4120:	687b      	ldr	r3, [r7, #4]
    4122:	681b      	ldr	r3, [r3, #0]
    4124:	681a      	ldr	r2, [r3, #0]
    4126:	687b      	ldr	r3, [r7, #4]
    4128:	601a      	str	r2, [r3, #0]
		return true;
    412a:	2301      	movs	r3, #1
    412c:	e018      	b.n	4160 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    412e:	687b      	ldr	r3, [r7, #4]
    4130:	681b      	ldr	r3, [r3, #0]
    4132:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    4134:	e002      	b.n	413c <list_delete_element+0x3a>
			it = it->next;
    4136:	68fb      	ldr	r3, [r7, #12]
    4138:	681b      	ldr	r3, [r3, #0]
    413a:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    413c:	68fb      	ldr	r3, [r7, #12]
    413e:	2b00      	cmp	r3, #0
    4140:	d004      	beq.n	414c <list_delete_element+0x4a>
    4142:	68fb      	ldr	r3, [r7, #12]
    4144:	681a      	ldr	r2, [r3, #0]
    4146:	683b      	ldr	r3, [r7, #0]
    4148:	429a      	cmp	r2, r3
    414a:	d1f4      	bne.n	4136 <list_delete_element+0x34>
		}
		if (it) {
    414c:	68fb      	ldr	r3, [r7, #12]
    414e:	2b00      	cmp	r3, #0
    4150:	d005      	beq.n	415e <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    4152:	683b      	ldr	r3, [r7, #0]
    4154:	681a      	ldr	r2, [r3, #0]
    4156:	68fb      	ldr	r3, [r7, #12]
    4158:	601a      	str	r2, [r3, #0]
			return true;
    415a:	2301      	movs	r3, #1
    415c:	e000      	b.n	4160 <list_delete_element+0x5e>
		}
	}

	return false;
    415e:	2300      	movs	r3, #0
}
    4160:	4618      	mov	r0, r3
    4162:	3714      	adds	r7, #20
    4164:	46bd      	mov	sp, r7
    4166:	f85d 7b04 	ldr.w	r7, [sp], #4
    416a:	4770      	bx	lr

0000416c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    416c:	b480      	push	{r7}
    416e:	b083      	sub	sp, #12
    4170:	af00      	add	r7, sp, #0
    4172:	4603      	mov	r3, r0
    4174:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    417a:	2b00      	cmp	r3, #0
    417c:	db0b      	blt.n	4196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    417e:	4909      	ldr	r1, [pc, #36]	; (41a4 <__NVIC_EnableIRQ+0x38>)
    4180:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4184:	095b      	lsrs	r3, r3, #5
    4186:	88fa      	ldrh	r2, [r7, #6]
    4188:	f002 021f 	and.w	r2, r2, #31
    418c:	2001      	movs	r0, #1
    418e:	fa00 f202 	lsl.w	r2, r0, r2
    4192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4196:	bf00      	nop
    4198:	370c      	adds	r7, #12
    419a:	46bd      	mov	sp, r7
    419c:	f85d 7b04 	ldr.w	r7, [sp], #4
    41a0:	4770      	bx	lr
    41a2:	bf00      	nop
    41a4:	e000e100 	.word	0xe000e100

000041a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    41a8:	b480      	push	{r7}
    41aa:	b083      	sub	sp, #12
    41ac:	af00      	add	r7, sp, #0
    41ae:	4603      	mov	r3, r0
    41b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    41b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41b6:	2b00      	cmp	r3, #0
    41b8:	db10      	blt.n	41dc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    41ba:	490b      	ldr	r1, [pc, #44]	; (41e8 <__NVIC_DisableIRQ+0x40>)
    41bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41c0:	095b      	lsrs	r3, r3, #5
    41c2:	88fa      	ldrh	r2, [r7, #6]
    41c4:	f002 021f 	and.w	r2, r2, #31
    41c8:	2001      	movs	r0, #1
    41ca:	fa00 f202 	lsl.w	r2, r0, r2
    41ce:	3320      	adds	r3, #32
    41d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    41d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    41d8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    41dc:	bf00      	nop
    41de:	370c      	adds	r7, #12
    41e0:	46bd      	mov	sp, r7
    41e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    41e6:	4770      	bx	lr
    41e8:	e000e100 	.word	0xe000e100

000041ec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    41ec:	b480      	push	{r7}
    41ee:	b083      	sub	sp, #12
    41f0:	af00      	add	r7, sp, #0
    41f2:	4603      	mov	r3, r0
    41f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    41f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    41fa:	2b00      	cmp	r3, #0
    41fc:	db0c      	blt.n	4218 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    41fe:	4909      	ldr	r1, [pc, #36]	; (4224 <__NVIC_ClearPendingIRQ+0x38>)
    4200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4204:	095b      	lsrs	r3, r3, #5
    4206:	88fa      	ldrh	r2, [r7, #6]
    4208:	f002 021f 	and.w	r2, r2, #31
    420c:	2001      	movs	r0, #1
    420e:	fa00 f202 	lsl.w	r2, r0, r2
    4212:	3360      	adds	r3, #96	; 0x60
    4214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4218:	bf00      	nop
    421a:	370c      	adds	r7, #12
    421c:	46bd      	mov	sp, r7
    421e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4222:	4770      	bx	lr
    4224:	e000e100 	.word	0xe000e100

00004228 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    4228:	b480      	push	{r7}
    422a:	b083      	sub	sp, #12
    422c:	af00      	add	r7, sp, #0
    422e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4234:	095b      	lsrs	r3, r3, #5
    4236:	f003 0301 	and.w	r3, r3, #1
    423a:	2b00      	cmp	r3, #0
    423c:	bf14      	ite	ne
    423e:	2301      	movne	r3, #1
    4240:	2300      	moveq	r3, #0
    4242:	b2db      	uxtb	r3, r3
}
    4244:	4618      	mov	r0, r3
    4246:	370c      	adds	r7, #12
    4248:	46bd      	mov	sp, r7
    424a:	f85d 7b04 	ldr.w	r7, [sp], #4
    424e:	4770      	bx	lr

00004250 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    4250:	b480      	push	{r7}
    4252:	b083      	sub	sp, #12
    4254:	af00      	add	r7, sp, #0
    4256:	6078      	str	r0, [r7, #4]
    4258:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	683a      	ldr	r2, [r7, #0]
    425e:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4260:	bf00      	nop
    4262:	370c      	adds	r7, #12
    4264:	46bd      	mov	sp, r7
    4266:	f85d 7b04 	ldr.w	r7, [sp], #4
    426a:	4770      	bx	lr

0000426c <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    426c:	b480      	push	{r7}
    426e:	b083      	sub	sp, #12
    4270:	af00      	add	r7, sp, #0
    4272:	6078      	str	r0, [r7, #4]
    4274:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    4276:	687b      	ldr	r3, [r7, #4]
    4278:	683a      	ldr	r2, [r7, #0]
    427a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    427c:	bf00      	nop
    427e:	370c      	adds	r7, #12
    4280:	46bd      	mov	sp, r7
    4282:	f85d 7b04 	ldr.w	r7, [sp], #4
    4286:	4770      	bx	lr

00004288 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    4288:	b480      	push	{r7}
    428a:	b083      	sub	sp, #12
    428c:	af00      	add	r7, sp, #0
    428e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    4290:	687b      	ldr	r3, [r7, #4]
    4292:	699b      	ldr	r3, [r3, #24]
    4294:	f043 0201 	orr.w	r2, r3, #1
    4298:	687b      	ldr	r3, [r7, #4]
    429a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    429c:	bf00      	nop
    429e:	370c      	adds	r7, #12
    42a0:	46bd      	mov	sp, r7
    42a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42a6:	4770      	bx	lr

000042a8 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    42a8:	b480      	push	{r7}
    42aa:	b085      	sub	sp, #20
    42ac:	af00      	add	r7, sp, #0
    42ae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	699b      	ldr	r3, [r3, #24]
    42b4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    42b6:	68fb      	ldr	r3, [r7, #12]
    42b8:	f003 0301 	and.w	r3, r3, #1
    42bc:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    42be:	68fb      	ldr	r3, [r7, #12]
    42c0:	2b00      	cmp	r3, #0
    42c2:	bf14      	ite	ne
    42c4:	2301      	movne	r3, #1
    42c6:	2300      	moveq	r3, #0
    42c8:	b2db      	uxtb	r3, r3
}
    42ca:	4618      	mov	r0, r3
    42cc:	3714      	adds	r7, #20
    42ce:	46bd      	mov	sp, r7
    42d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    42d4:	4770      	bx	lr

000042d6 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    42d6:	b480      	push	{r7}
    42d8:	b083      	sub	sp, #12
    42da:	af00      	add	r7, sp, #0
    42dc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    42de:	687b      	ldr	r3, [r7, #4]
    42e0:	699b      	ldr	r3, [r3, #24]
    42e2:	f023 0201 	bic.w	r2, r3, #1
    42e6:	687b      	ldr	r3, [r7, #4]
    42e8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    42ea:	bf00      	nop
    42ec:	370c      	adds	r7, #12
    42ee:	46bd      	mov	sp, r7
    42f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f4:	4770      	bx	lr

000042f6 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    42f6:	b480      	push	{r7}
    42f8:	b083      	sub	sp, #12
    42fa:	af00      	add	r7, sp, #0
    42fc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    42fe:	687b      	ldr	r3, [r7, #4]
    4300:	699b      	ldr	r3, [r3, #24]
    4302:	f043 0202 	orr.w	r2, r3, #2
    4306:	687b      	ldr	r3, [r7, #4]
    4308:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    430a:	bf00      	nop
    430c:	370c      	adds	r7, #12
    430e:	46bd      	mov	sp, r7
    4310:	f85d 7b04 	ldr.w	r7, [sp], #4
    4314:	4770      	bx	lr

00004316 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    4316:	b480      	push	{r7}
    4318:	b083      	sub	sp, #12
    431a:	af00      	add	r7, sp, #0
    431c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    431e:	687b      	ldr	r3, [r7, #4]
    4320:	699b      	ldr	r3, [r3, #24]
    4322:	f023 0202 	bic.w	r2, r3, #2
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    432a:	bf00      	nop
    432c:	370c      	adds	r7, #12
    432e:	46bd      	mov	sp, r7
    4330:	f85d 7b04 	ldr.w	r7, [sp], #4
    4334:	4770      	bx	lr

00004336 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    4336:	b480      	push	{r7}
    4338:	b083      	sub	sp, #12
    433a:	af00      	add	r7, sp, #0
    433c:	6078      	str	r0, [r7, #4]
    433e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	699a      	ldr	r2, [r3, #24]
    4344:	683b      	ldr	r3, [r7, #0]
    4346:	431a      	orrs	r2, r3
    4348:	687b      	ldr	r3, [r7, #4]
    434a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    434c:	bf00      	nop
    434e:	370c      	adds	r7, #12
    4350:	46bd      	mov	sp, r7
    4352:	f85d 7b04 	ldr.w	r7, [sp], #4
    4356:	4770      	bx	lr

00004358 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    4358:	b480      	push	{r7}
    435a:	b083      	sub	sp, #12
    435c:	af00      	add	r7, sp, #0
    435e:	6078      	str	r0, [r7, #4]
    4360:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    4362:	687b      	ldr	r3, [r7, #4]
    4364:	683a      	ldr	r2, [r7, #0]
    4366:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4368:	bf00      	nop
    436a:	370c      	adds	r7, #12
    436c:	46bd      	mov	sp, r7
    436e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4372:	4770      	bx	lr

00004374 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    4374:	b480      	push	{r7}
    4376:	b083      	sub	sp, #12
    4378:	af00      	add	r7, sp, #0
    437a:	6078      	str	r0, [r7, #4]
    437c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	683a      	ldr	r2, [r7, #0]
    4382:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    4384:	bf00      	nop
    4386:	370c      	adds	r7, #12
    4388:	46bd      	mov	sp, r7
    438a:	f85d 7b04 	ldr.w	r7, [sp], #4
    438e:	4770      	bx	lr

00004390 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    4390:	b480      	push	{r7}
    4392:	b083      	sub	sp, #12
    4394:	af00      	add	r7, sp, #0
    4396:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    439c:	4618      	mov	r0, r3
    439e:	370c      	adds	r7, #12
    43a0:	46bd      	mov	sp, r7
    43a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    43a6:	4770      	bx	lr

000043a8 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    43a8:	b480      	push	{r7}
    43aa:	b083      	sub	sp, #12
    43ac:	af00      	add	r7, sp, #0
    43ae:	6078      	str	r0, [r7, #4]
    43b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    43b2:	687b      	ldr	r3, [r7, #4]
    43b4:	683a      	ldr	r2, [r7, #0]
    43b6:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    43b8:	bf00      	nop
    43ba:	370c      	adds	r7, #12
    43bc:	46bd      	mov	sp, r7
    43be:	f85d 7b04 	ldr.w	r7, [sp], #4
    43c2:	4770      	bx	lr

000043c4 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    43c4:	b480      	push	{r7}
    43c6:	b083      	sub	sp, #12
    43c8:	af00      	add	r7, sp, #0
    43ca:	6078      	str	r0, [r7, #4]
    43cc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    43ce:	687b      	ldr	r3, [r7, #4]
    43d0:	683a      	ldr	r2, [r7, #0]
    43d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    43d6:	bf00      	nop
    43d8:	370c      	adds	r7, #12
    43da:	46bd      	mov	sp, r7
    43dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    43e0:	4770      	bx	lr

000043e2 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    43e2:	b480      	push	{r7}
    43e4:	b083      	sub	sp, #12
    43e6:	af00      	add	r7, sp, #0
    43e8:	6078      	str	r0, [r7, #4]
    43ea:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    43ec:	687b      	ldr	r3, [r7, #4]
    43ee:	683a      	ldr	r2, [r7, #0]
    43f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    43f4:	bf00      	nop
    43f6:	370c      	adds	r7, #12
    43f8:	46bd      	mov	sp, r7
    43fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    43fe:	4770      	bx	lr

00004400 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    4400:	b480      	push	{r7}
    4402:	b083      	sub	sp, #12
    4404:	af00      	add	r7, sp, #0
    4406:	6078      	str	r0, [r7, #4]
    4408:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	683a      	ldr	r2, [r7, #0]
    440e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    4412:	bf00      	nop
    4414:	370c      	adds	r7, #12
    4416:	46bd      	mov	sp, r7
    4418:	f85d 7b04 	ldr.w	r7, [sp], #4
    441c:	4770      	bx	lr

0000441e <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    441e:	b480      	push	{r7}
    4420:	b083      	sub	sp, #12
    4422:	af00      	add	r7, sp, #0
    4424:	6078      	str	r0, [r7, #4]
    4426:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    4428:	687b      	ldr	r3, [r7, #4]
    442a:	683a      	ldr	r2, [r7, #0]
    442c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    4430:	bf00      	nop
    4432:	370c      	adds	r7, #12
    4434:	46bd      	mov	sp, r7
    4436:	f85d 7b04 	ldr.w	r7, [sp], #4
    443a:	4770      	bx	lr

0000443c <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    443c:	b480      	push	{r7}
    443e:	b083      	sub	sp, #12
    4440:	af00      	add	r7, sp, #0
    4442:	6078      	str	r0, [r7, #4]
    4444:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    4446:	687b      	ldr	r3, [r7, #4]
    4448:	683a      	ldr	r2, [r7, #0]
    444a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    444e:	bf00      	nop
    4450:	370c      	adds	r7, #12
    4452:	46bd      	mov	sp, r7
    4454:	f85d 7b04 	ldr.w	r7, [sp], #4
    4458:	4770      	bx	lr

0000445a <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    445a:	b480      	push	{r7}
    445c:	b083      	sub	sp, #12
    445e:	af00      	add	r7, sp, #0
    4460:	6078      	str	r0, [r7, #4]
    4462:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    4464:	687b      	ldr	r3, [r7, #4]
    4466:	683a      	ldr	r2, [r7, #0]
    4468:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    446c:	bf00      	nop
    446e:	370c      	adds	r7, #12
    4470:	46bd      	mov	sp, r7
    4472:	f85d 7b04 	ldr.w	r7, [sp], #4
    4476:	4770      	bx	lr

00004478 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    4478:	b480      	push	{r7}
    447a:	b083      	sub	sp, #12
    447c:	af00      	add	r7, sp, #0
    447e:	6078      	str	r0, [r7, #4]
    4480:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    4482:	687b      	ldr	r3, [r7, #4]
    4484:	683a      	ldr	r2, [r7, #0]
    4486:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    448a:	bf00      	nop
    448c:	370c      	adds	r7, #12
    448e:	46bd      	mov	sp, r7
    4490:	f85d 7b04 	ldr.w	r7, [sp], #4
    4494:	4770      	bx	lr

00004496 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    4496:	b480      	push	{r7}
    4498:	b083      	sub	sp, #12
    449a:	af00      	add	r7, sp, #0
    449c:	6078      	str	r0, [r7, #4]
    449e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    44a0:	687b      	ldr	r3, [r7, #4]
    44a2:	683a      	ldr	r2, [r7, #0]
    44a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    44a8:	bf00      	nop
    44aa:	370c      	adds	r7, #12
    44ac:	46bd      	mov	sp, r7
    44ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    44b2:	4770      	bx	lr

000044b4 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    44b4:	b480      	push	{r7}
    44b6:	b083      	sub	sp, #12
    44b8:	af00      	add	r7, sp, #0
    44ba:	6078      	str	r0, [r7, #4]
    44bc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    44be:	687b      	ldr	r3, [r7, #4]
    44c0:	683a      	ldr	r2, [r7, #0]
    44c2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    44c6:	bf00      	nop
    44c8:	370c      	adds	r7, #12
    44ca:	46bd      	mov	sp, r7
    44cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    44d0:	4770      	bx	lr
	...

000044d4 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    44d4:	b580      	push	{r7, lr}
    44d6:	b082      	sub	sp, #8
    44d8:	af00      	add	r7, sp, #0
    44da:	6078      	str	r0, [r7, #4]
    44dc:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	683a      	ldr	r2, [r7, #0]
    44e2:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    44e4:	687b      	ldr	r3, [r7, #4]
    44e6:	681b      	ldr	r3, [r3, #0]
    44e8:	4618      	mov	r0, r3
    44ea:	4b55      	ldr	r3, [pc, #340]	; (4640 <_can_async_init+0x16c>)
    44ec:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    44ee:	bf00      	nop
    44f0:	687b      	ldr	r3, [r7, #4]
    44f2:	681b      	ldr	r3, [r3, #0]
    44f4:	4618      	mov	r0, r3
    44f6:	4b53      	ldr	r3, [pc, #332]	; (4644 <_can_async_init+0x170>)
    44f8:	4798      	blx	r3
    44fa:	4603      	mov	r3, r0
    44fc:	f083 0301 	eor.w	r3, r3, #1
    4500:	b2db      	uxtb	r3, r3
    4502:	2b00      	cmp	r3, #0
    4504:	d1f4      	bne.n	44f0 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    4506:	687b      	ldr	r3, [r7, #4]
    4508:	681b      	ldr	r3, [r3, #0]
    450a:	4618      	mov	r0, r3
    450c:	4b4e      	ldr	r3, [pc, #312]	; (4648 <_can_async_init+0x174>)
    450e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    4510:	683b      	ldr	r3, [r7, #0]
    4512:	4a4e      	ldr	r2, [pc, #312]	; (464c <_can_async_init+0x178>)
    4514:	4293      	cmp	r3, r2
    4516:	d17a      	bne.n	460e <_can_async_init+0x13a>
		_can1_dev    = dev;
    4518:	4a4d      	ldr	r2, [pc, #308]	; (4650 <_can_async_init+0x17c>)
    451a:	687b      	ldr	r3, [r7, #4]
    451c:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    451e:	687b      	ldr	r3, [r7, #4]
    4520:	4a4c      	ldr	r2, [pc, #304]	; (4654 <_can_async_init+0x180>)
    4522:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    4524:	687b      	ldr	r3, [r7, #4]
    4526:	681b      	ldr	r3, [r3, #0]
    4528:	f44f 7140 	mov.w	r1, #768	; 0x300
    452c:	4618      	mov	r0, r3
    452e:	4b4a      	ldr	r3, [pc, #296]	; (4658 <_can_async_init+0x184>)
    4530:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    4532:	687b      	ldr	r3, [r7, #4]
    4534:	681b      	ldr	r3, [r3, #0]
    4536:	2102      	movs	r1, #2
    4538:	4618      	mov	r0, r3
    453a:	4b48      	ldr	r3, [pc, #288]	; (465c <_can_async_init+0x188>)
    453c:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    453e:	687b      	ldr	r3, [r7, #4]
    4540:	681b      	ldr	r3, [r3, #0]
    4542:	4947      	ldr	r1, [pc, #284]	; (4660 <_can_async_init+0x18c>)
    4544:	4618      	mov	r0, r3
    4546:	4b47      	ldr	r3, [pc, #284]	; (4664 <_can_async_init+0x190>)
    4548:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    454a:	687b      	ldr	r3, [r7, #4]
    454c:	681b      	ldr	r3, [r3, #0]
    454e:	4946      	ldr	r1, [pc, #280]	; (4668 <_can_async_init+0x194>)
    4550:	4618      	mov	r0, r3
    4552:	4b46      	ldr	r3, [pc, #280]	; (466c <_can_async_init+0x198>)
    4554:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    4556:	687b      	ldr	r3, [r7, #4]
    4558:	681a      	ldr	r2, [r3, #0]
    455a:	4b45      	ldr	r3, [pc, #276]	; (4670 <_can_async_init+0x19c>)
    455c:	b29b      	uxth	r3, r3
    455e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4566:	4619      	mov	r1, r3
    4568:	4610      	mov	r0, r2
    456a:	4b42      	ldr	r3, [pc, #264]	; (4674 <_can_async_init+0x1a0>)
    456c:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    456e:	687b      	ldr	r3, [r7, #4]
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	2107      	movs	r1, #7
    4574:	4618      	mov	r0, r3
    4576:	4b40      	ldr	r3, [pc, #256]	; (4678 <_can_async_init+0x1a4>)
    4578:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    457a:	687b      	ldr	r3, [r7, #4]
    457c:	681b      	ldr	r3, [r3, #0]
    457e:	2107      	movs	r1, #7
    4580:	4618      	mov	r0, r3
    4582:	4b3e      	ldr	r3, [pc, #248]	; (467c <_can_async_init+0x1a8>)
    4584:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    4586:	687b      	ldr	r3, [r7, #4]
    4588:	681a      	ldr	r2, [r3, #0]
    458a:	4b3d      	ldr	r3, [pc, #244]	; (4680 <_can_async_init+0x1ac>)
    458c:	b29b      	uxth	r3, r3
    458e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    4592:	4619      	mov	r1, r3
    4594:	4610      	mov	r0, r2
    4596:	4b3b      	ldr	r3, [pc, #236]	; (4684 <_can_async_init+0x1b0>)
    4598:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    459a:	687b      	ldr	r3, [r7, #4]
    459c:	681a      	ldr	r2, [r3, #0]
    459e:	4b3a      	ldr	r3, [pc, #232]	; (4688 <_can_async_init+0x1b4>)
    45a0:	b29b      	uxth	r3, r3
    45a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    45a6:	4619      	mov	r1, r3
    45a8:	4610      	mov	r0, r2
    45aa:	4b38      	ldr	r3, [pc, #224]	; (468c <_can_async_init+0x1b8>)
    45ac:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    45ae:	687b      	ldr	r3, [r7, #4]
    45b0:	681b      	ldr	r3, [r3, #0]
    45b2:	2108      	movs	r1, #8
    45b4:	4618      	mov	r0, r3
    45b6:	4b36      	ldr	r3, [pc, #216]	; (4690 <_can_async_init+0x1bc>)
    45b8:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    45ba:	687b      	ldr	r3, [r7, #4]
    45bc:	681a      	ldr	r2, [r3, #0]
    45be:	4b35      	ldr	r3, [pc, #212]	; (4694 <_can_async_init+0x1c0>)
    45c0:	b29b      	uxth	r3, r3
    45c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    45c6:	4619      	mov	r1, r3
    45c8:	4610      	mov	r0, r2
    45ca:	4b33      	ldr	r3, [pc, #204]	; (4698 <_can_async_init+0x1c4>)
    45cc:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    45ce:	687b      	ldr	r3, [r7, #4]
    45d0:	681a      	ldr	r2, [r3, #0]
    45d2:	4b32      	ldr	r3, [pc, #200]	; (469c <_can_async_init+0x1c8>)
    45d4:	b29b      	uxth	r3, r3
    45d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    45da:	4619      	mov	r1, r3
    45dc:	4610      	mov	r0, r2
    45de:	4b30      	ldr	r3, [pc, #192]	; (46a0 <_can_async_init+0x1cc>)
    45e0:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	681b      	ldr	r3, [r3, #0]
    45e6:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    45ea:	4618      	mov	r0, r3
    45ec:	4b2d      	ldr	r3, [pc, #180]	; (46a4 <_can_async_init+0x1d0>)
    45ee:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    45f0:	204f      	movs	r0, #79	; 0x4f
    45f2:	4b2d      	ldr	r3, [pc, #180]	; (46a8 <_can_async_init+0x1d4>)
    45f4:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    45f6:	204f      	movs	r0, #79	; 0x4f
    45f8:	4b2c      	ldr	r3, [pc, #176]	; (46ac <_can_async_init+0x1d8>)
    45fa:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    45fc:	204f      	movs	r0, #79	; 0x4f
    45fe:	4b2c      	ldr	r3, [pc, #176]	; (46b0 <_can_async_init+0x1dc>)
    4600:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	681b      	ldr	r3, [r3, #0]
    4606:	2101      	movs	r1, #1
    4608:	4618      	mov	r0, r3
    460a:	4b2a      	ldr	r3, [pc, #168]	; (46b4 <_can_async_init+0x1e0>)
    460c:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    460e:	687b      	ldr	r3, [r7, #4]
    4610:	681b      	ldr	r3, [r3, #0]
    4612:	4618      	mov	r0, r3
    4614:	4b28      	ldr	r3, [pc, #160]	; (46b8 <_can_async_init+0x1e4>)
    4616:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4618:	687b      	ldr	r3, [r7, #4]
    461a:	681b      	ldr	r3, [r3, #0]
    461c:	4618      	mov	r0, r3
    461e:	4b27      	ldr	r3, [pc, #156]	; (46bc <_can_async_init+0x1e8>)
    4620:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    4622:	bf00      	nop
    4624:	687b      	ldr	r3, [r7, #4]
    4626:	681b      	ldr	r3, [r3, #0]
    4628:	4618      	mov	r0, r3
    462a:	4b06      	ldr	r3, [pc, #24]	; (4644 <_can_async_init+0x170>)
    462c:	4798      	blx	r3
    462e:	4603      	mov	r3, r0
    4630:	2b00      	cmp	r3, #0
    4632:	d1f7      	bne.n	4624 <_can_async_init+0x150>
	};

	return ERR_NONE;
    4634:	2300      	movs	r3, #0
}
    4636:	4618      	mov	r0, r3
    4638:	3708      	adds	r7, #8
    463a:	46bd      	mov	sp, r7
    463c:	bd80      	pop	{r7, pc}
    463e:	bf00      	nop
    4640:	00004289 	.word	0x00004289
    4644:	000042a9 	.word	0x000042a9
    4648:	000042f7 	.word	0x000042f7
    464c:	42000400 	.word	0x42000400
    4650:	20003018 	.word	0x20003018
    4654:	20000004 	.word	0x20000004
    4658:	00004337 	.word	0x00004337
    465c:	00004251 	.word	0x00004251
    4660:	00010c01 	.word	0x00010c01
    4664:	00004359 	.word	0x00004359
    4668:	00010c10 	.word	0x00010c10
    466c:	0000426d 	.word	0x0000426d
    4670:	20005038 	.word	0x20005038
    4674:	0000443d 	.word	0x0000443d
    4678:	0000445b 	.word	0x0000445b
    467c:	00004497 	.word	0x00004497
    4680:	20004ff0 	.word	0x20004ff0
    4684:	00004479 	.word	0x00004479
    4688:	20002f78 	.word	0x20002f78
    468c:	000044b5 	.word	0x000044b5
    4690:	000043c5 	.word	0x000043c5
    4694:	20002f88 	.word	0x20002f88
    4698:	000043e3 	.word	0x000043e3
    469c:	20003008 	.word	0x20003008
    46a0:	00004401 	.word	0x00004401
    46a4:	0000441f 	.word	0x0000441f
    46a8:	000041a9 	.word	0x000041a9
    46ac:	000041ed 	.word	0x000041ed
    46b0:	0000416d 	.word	0x0000416d
    46b4:	000043a9 	.word	0x000043a9
    46b8:	00004317 	.word	0x00004317
    46bc:	000042d7 	.word	0x000042d7

000046c0 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    46c0:	b590      	push	{r4, r7, lr}
    46c2:	b083      	sub	sp, #12
    46c4:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    46c6:	4b2c      	ldr	r3, [pc, #176]	; (4778 <CAN1_Handler+0xb8>)
    46c8:	681b      	ldr	r3, [r3, #0]
    46ca:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    46cc:	687b      	ldr	r3, [r7, #4]
    46ce:	681b      	ldr	r3, [r3, #0]
    46d0:	4618      	mov	r0, r3
    46d2:	4b2a      	ldr	r3, [pc, #168]	; (477c <CAN1_Handler+0xbc>)
    46d4:	4798      	blx	r3
    46d6:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    46d8:	683b      	ldr	r3, [r7, #0]
    46da:	f003 0301 	and.w	r3, r3, #1
    46de:	2b00      	cmp	r3, #0
    46e0:	d003      	beq.n	46ea <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    46e2:	687b      	ldr	r3, [r7, #4]
    46e4:	689b      	ldr	r3, [r3, #8]
    46e6:	6878      	ldr	r0, [r7, #4]
    46e8:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    46ea:	683b      	ldr	r3, [r7, #0]
    46ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
    46f0:	2b00      	cmp	r3, #0
    46f2:	d003      	beq.n	46fc <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    46f4:	687b      	ldr	r3, [r7, #4]
    46f6:	685b      	ldr	r3, [r3, #4]
    46f8:	6878      	ldr	r0, [r7, #4]
    46fa:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    46fc:	683b      	ldr	r3, [r7, #0]
    46fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4702:	2b00      	cmp	r3, #0
    4704:	d004      	beq.n	4710 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    4706:	687b      	ldr	r3, [r7, #4]
    4708:	68db      	ldr	r3, [r3, #12]
    470a:	2103      	movs	r1, #3
    470c:	6878      	ldr	r0, [r7, #4]
    470e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    4710:	683b      	ldr	r3, [r7, #0]
    4712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    4716:	2b00      	cmp	r3, #0
    4718:	d004      	beq.n	4724 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    471a:	687b      	ldr	r3, [r7, #4]
    471c:	68db      	ldr	r3, [r3, #12]
    471e:	2100      	movs	r1, #0
    4720:	6878      	ldr	r0, [r7, #4]
    4722:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4724:	683b      	ldr	r3, [r7, #0]
    4726:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    472a:	2b00      	cmp	r3, #0
    472c:	d00f      	beq.n	474e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    472e:	687b      	ldr	r3, [r7, #4]
    4730:	68dc      	ldr	r4, [r3, #12]
    4732:	687b      	ldr	r3, [r7, #4]
    4734:	681b      	ldr	r3, [r3, #0]
    4736:	4618      	mov	r0, r3
    4738:	4b11      	ldr	r3, [pc, #68]	; (4780 <CAN1_Handler+0xc0>)
    473a:	4798      	blx	r3
    473c:	4603      	mov	r3, r0
    473e:	2b00      	cmp	r3, #0
    4740:	d001      	beq.n	4746 <CAN1_Handler+0x86>
    4742:	2302      	movs	r3, #2
    4744:	e000      	b.n	4748 <CAN1_Handler+0x88>
    4746:	2301      	movs	r3, #1
    4748:	4619      	mov	r1, r3
    474a:	6878      	ldr	r0, [r7, #4]
    474c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    474e:	683b      	ldr	r3, [r7, #0]
    4750:	f003 0308 	and.w	r3, r3, #8
    4754:	2b00      	cmp	r3, #0
    4756:	d004      	beq.n	4762 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4758:	687b      	ldr	r3, [r7, #4]
    475a:	68db      	ldr	r3, [r3, #12]
    475c:	2104      	movs	r1, #4
    475e:	6878      	ldr	r0, [r7, #4]
    4760:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    4762:	687b      	ldr	r3, [r7, #4]
    4764:	681b      	ldr	r3, [r3, #0]
    4766:	6839      	ldr	r1, [r7, #0]
    4768:	4618      	mov	r0, r3
    476a:	4b06      	ldr	r3, [pc, #24]	; (4784 <CAN1_Handler+0xc4>)
    476c:	4798      	blx	r3
}
    476e:	bf00      	nop
    4770:	370c      	adds	r7, #12
    4772:	46bd      	mov	sp, r7
    4774:	bd90      	pop	{r4, r7, pc}
    4776:	bf00      	nop
    4778:	20003018 	.word	0x20003018
    477c:	00004391 	.word	0x00004391
    4780:	00004229 	.word	0x00004229
    4784:	00004375 	.word	0x00004375

00004788 <__NVIC_SetPendingIRQ>:
{
    4788:	b480      	push	{r7}
    478a:	b083      	sub	sp, #12
    478c:	af00      	add	r7, sp, #0
    478e:	4603      	mov	r3, r0
    4790:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4796:	2b00      	cmp	r3, #0
    4798:	db0c      	blt.n	47b4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    479a:	4909      	ldr	r1, [pc, #36]	; (47c0 <__NVIC_SetPendingIRQ+0x38>)
    479c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    47a0:	095b      	lsrs	r3, r3, #5
    47a2:	88fa      	ldrh	r2, [r7, #6]
    47a4:	f002 021f 	and.w	r2, r2, #31
    47a8:	2001      	movs	r0, #1
    47aa:	fa00 f202 	lsl.w	r2, r0, r2
    47ae:	3340      	adds	r3, #64	; 0x40
    47b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47b4:	bf00      	nop
    47b6:	370c      	adds	r7, #12
    47b8:	46bd      	mov	sp, r7
    47ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    47be:	4770      	bx	lr
    47c0:	e000e100 	.word	0xe000e100

000047c4 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    47c4:	b580      	push	{r7, lr}
    47c6:	b082      	sub	sp, #8
    47c8:	af00      	add	r7, sp, #0
    47ca:	4603      	mov	r3, r0
    47cc:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    47ce:	79fb      	ldrb	r3, [r7, #7]
    47d0:	b21b      	sxth	r3, r3
    47d2:	4618      	mov	r0, r3
    47d4:	4b02      	ldr	r3, [pc, #8]	; (47e0 <_irq_set+0x1c>)
    47d6:	4798      	blx	r3
}
    47d8:	bf00      	nop
    47da:	3708      	adds	r7, #8
    47dc:	46bd      	mov	sp, r7
    47de:	bd80      	pop	{r7, pc}
    47e0:	00004789 	.word	0x00004789

000047e4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    47e4:	b480      	push	{r7}
    47e6:	b083      	sub	sp, #12
    47e8:	af00      	add	r7, sp, #0
    47ea:	4603      	mov	r3, r0
    47ec:	6039      	str	r1, [r7, #0]
    47ee:	80fb      	strh	r3, [r7, #6]
    47f0:	4613      	mov	r3, r2
    47f2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    47f4:	797b      	ldrb	r3, [r7, #5]
    47f6:	3b04      	subs	r3, #4
    47f8:	2b05      	cmp	r3, #5
    47fa:	d86b      	bhi.n	48d4 <_get_cycles_for_us_internal+0xf0>
    47fc:	a201      	add	r2, pc, #4	; (adr r2, 4804 <_get_cycles_for_us_internal+0x20>)
    47fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4802:	bf00      	nop
    4804:	000048b3 	.word	0x000048b3
    4808:	00004893 	.word	0x00004893
    480c:	00004875 	.word	0x00004875
    4810:	00004857 	.word	0x00004857
    4814:	00004839 	.word	0x00004839
    4818:	0000481d 	.word	0x0000481d
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    481c:	88fb      	ldrh	r3, [r7, #6]
    481e:	683a      	ldr	r2, [r7, #0]
    4820:	4935      	ldr	r1, [pc, #212]	; (48f8 <_get_cycles_for_us_internal+0x114>)
    4822:	fba1 1202 	umull	r1, r2, r1, r2
    4826:	0c92      	lsrs	r2, r2, #18
    4828:	fb02 f303 	mul.w	r3, r2, r3
    482c:	3302      	adds	r3, #2
    482e:	4a33      	ldr	r2, [pc, #204]	; (48fc <_get_cycles_for_us_internal+0x118>)
    4830:	fba2 2303 	umull	r2, r3, r2, r3
    4834:	085b      	lsrs	r3, r3, #1
    4836:	e059      	b.n	48ec <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4838:	88fb      	ldrh	r3, [r7, #6]
    483a:	683a      	ldr	r2, [r7, #0]
    483c:	0952      	lsrs	r2, r2, #5
    483e:	4930      	ldr	r1, [pc, #192]	; (4900 <_get_cycles_for_us_internal+0x11c>)
    4840:	fba1 1202 	umull	r1, r2, r1, r2
    4844:	09d2      	lsrs	r2, r2, #7
    4846:	fb02 f303 	mul.w	r3, r2, r3
    484a:	331d      	adds	r3, #29
    484c:	4a2d      	ldr	r2, [pc, #180]	; (4904 <_get_cycles_for_us_internal+0x120>)
    484e:	fba2 2303 	umull	r2, r3, r2, r3
    4852:	091b      	lsrs	r3, r3, #4
    4854:	e04a      	b.n	48ec <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    4856:	88fb      	ldrh	r3, [r7, #6]
    4858:	683a      	ldr	r2, [r7, #0]
    485a:	492b      	ldr	r1, [pc, #172]	; (4908 <_get_cycles_for_us_internal+0x124>)
    485c:	fba1 1202 	umull	r1, r2, r1, r2
    4860:	0b52      	lsrs	r2, r2, #13
    4862:	fb02 f303 	mul.w	r3, r2, r3
    4866:	f203 132b 	addw	r3, r3, #299	; 0x12b
    486a:	4a28      	ldr	r2, [pc, #160]	; (490c <_get_cycles_for_us_internal+0x128>)
    486c:	fba2 2303 	umull	r2, r3, r2, r3
    4870:	095b      	lsrs	r3, r3, #5
    4872:	e03b      	b.n	48ec <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4874:	88fb      	ldrh	r3, [r7, #6]
    4876:	683a      	ldr	r2, [r7, #0]
    4878:	4925      	ldr	r1, [pc, #148]	; (4910 <_get_cycles_for_us_internal+0x12c>)
    487a:	fba1 1202 	umull	r1, r2, r1, r2
    487e:	0992      	lsrs	r2, r2, #6
    4880:	fb02 f303 	mul.w	r3, r2, r3
    4884:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4888:	4a22      	ldr	r2, [pc, #136]	; (4914 <_get_cycles_for_us_internal+0x130>)
    488a:	fba2 2303 	umull	r2, r3, r2, r3
    488e:	099b      	lsrs	r3, r3, #6
    4890:	e02c      	b.n	48ec <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4892:	88fb      	ldrh	r3, [r7, #6]
    4894:	683a      	ldr	r2, [r7, #0]
    4896:	4920      	ldr	r1, [pc, #128]	; (4918 <_get_cycles_for_us_internal+0x134>)
    4898:	fba1 1202 	umull	r1, r2, r1, r2
    489c:	0952      	lsrs	r2, r2, #5
    489e:	fb02 f303 	mul.w	r3, r2, r3
    48a2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    48a6:	332f      	adds	r3, #47	; 0x2f
    48a8:	4a1c      	ldr	r2, [pc, #112]	; (491c <_get_cycles_for_us_internal+0x138>)
    48aa:	fba2 2303 	umull	r2, r3, r2, r3
    48ae:	0b5b      	lsrs	r3, r3, #13
    48b0:	e01c      	b.n	48ec <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    48b2:	88fb      	ldrh	r3, [r7, #6]
    48b4:	683a      	ldr	r2, [r7, #0]
    48b6:	491a      	ldr	r1, [pc, #104]	; (4920 <_get_cycles_for_us_internal+0x13c>)
    48b8:	fba1 1202 	umull	r1, r2, r1, r2
    48bc:	08d2      	lsrs	r2, r2, #3
    48be:	fb02 f303 	mul.w	r3, r2, r3
    48c2:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    48c6:	f203 33df 	addw	r3, r3, #991	; 0x3df
    48ca:	4a16      	ldr	r2, [pc, #88]	; (4924 <_get_cycles_for_us_internal+0x140>)
    48cc:	fba2 2303 	umull	r2, r3, r2, r3
    48d0:	0c5b      	lsrs	r3, r3, #17
    48d2:	e00b      	b.n	48ec <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    48d4:	88fb      	ldrh	r3, [r7, #6]
    48d6:	683a      	ldr	r2, [r7, #0]
    48d8:	fb02 f303 	mul.w	r3, r2, r3
    48dc:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    48e0:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    48e4:	4a10      	ldr	r2, [pc, #64]	; (4928 <_get_cycles_for_us_internal+0x144>)
    48e6:	fba2 2303 	umull	r2, r3, r2, r3
    48ea:	0c9b      	lsrs	r3, r3, #18
	}
}
    48ec:	4618      	mov	r0, r3
    48ee:	370c      	adds	r7, #12
    48f0:	46bd      	mov	sp, r7
    48f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    48f6:	4770      	bx	lr
    48f8:	431bde83 	.word	0x431bde83
    48fc:	aaaaaaab 	.word	0xaaaaaaab
    4900:	0a7c5ac5 	.word	0x0a7c5ac5
    4904:	88888889 	.word	0x88888889
    4908:	d1b71759 	.word	0xd1b71759
    490c:	1b4e81b5 	.word	0x1b4e81b5
    4910:	10624dd3 	.word	0x10624dd3
    4914:	057619f1 	.word	0x057619f1
    4918:	51eb851f 	.word	0x51eb851f
    491c:	45e7b273 	.word	0x45e7b273
    4920:	cccccccd 	.word	0xcccccccd
    4924:	6fd91d85 	.word	0x6fd91d85
    4928:	165e9f81 	.word	0x165e9f81

0000492c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    492c:	b580      	push	{r7, lr}
    492e:	b082      	sub	sp, #8
    4930:	af00      	add	r7, sp, #0
    4932:	4603      	mov	r3, r0
    4934:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4936:	88fb      	ldrh	r3, [r7, #6]
    4938:	2209      	movs	r2, #9
    493a:	4904      	ldr	r1, [pc, #16]	; (494c <_get_cycles_for_us+0x20>)
    493c:	4618      	mov	r0, r3
    493e:	4b04      	ldr	r3, [pc, #16]	; (4950 <_get_cycles_for_us+0x24>)
    4940:	4798      	blx	r3
    4942:	4603      	mov	r3, r0
}
    4944:	4618      	mov	r0, r3
    4946:	3708      	adds	r7, #8
    4948:	46bd      	mov	sp, r7
    494a:	bd80      	pop	{r7, pc}
    494c:	07270e00 	.word	0x07270e00
    4950:	000047e5 	.word	0x000047e5

00004954 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4954:	b480      	push	{r7}
    4956:	b083      	sub	sp, #12
    4958:	af00      	add	r7, sp, #0
    495a:	4603      	mov	r3, r0
    495c:	6039      	str	r1, [r7, #0]
    495e:	80fb      	strh	r3, [r7, #6]
    4960:	4613      	mov	r3, r2
    4962:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4964:	797b      	ldrb	r3, [r7, #5]
    4966:	3b04      	subs	r3, #4
    4968:	2b05      	cmp	r3, #5
    496a:	d870      	bhi.n	4a4e <_get_cycles_for_ms_internal+0xfa>
    496c:	a201      	add	r2, pc, #4	; (adr r2, 4974 <_get_cycles_for_ms_internal+0x20>)
    496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4972:	bf00      	nop
    4974:	00004a31 	.word	0x00004a31
    4978:	00004a15 	.word	0x00004a15
    497c:	000049f9 	.word	0x000049f9
    4980:	000049d5 	.word	0x000049d5
    4984:	000049b1 	.word	0x000049b1
    4988:	0000498d 	.word	0x0000498d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    498c:	88fb      	ldrh	r3, [r7, #6]
    498e:	683a      	ldr	r2, [r7, #0]
    4990:	4937      	ldr	r1, [pc, #220]	; (4a70 <_get_cycles_for_ms_internal+0x11c>)
    4992:	fba1 1202 	umull	r1, r2, r1, r2
    4996:	0c92      	lsrs	r2, r2, #18
    4998:	fb02 f303 	mul.w	r3, r2, r3
    499c:	3302      	adds	r3, #2
    499e:	4a35      	ldr	r2, [pc, #212]	; (4a74 <_get_cycles_for_ms_internal+0x120>)
    49a0:	fba2 2303 	umull	r2, r3, r2, r3
    49a4:	085b      	lsrs	r3, r3, #1
    49a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    49aa:	fb02 f303 	mul.w	r3, r2, r3
    49ae:	e058      	b.n	4a62 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    49b0:	88fb      	ldrh	r3, [r7, #6]
    49b2:	683a      	ldr	r2, [r7, #0]
    49b4:	0952      	lsrs	r2, r2, #5
    49b6:	4930      	ldr	r1, [pc, #192]	; (4a78 <_get_cycles_for_ms_internal+0x124>)
    49b8:	fba1 1202 	umull	r1, r2, r1, r2
    49bc:	09d2      	lsrs	r2, r2, #7
    49be:	fb02 f303 	mul.w	r3, r2, r3
    49c2:	3302      	adds	r3, #2
    49c4:	4a2b      	ldr	r2, [pc, #172]	; (4a74 <_get_cycles_for_ms_internal+0x120>)
    49c6:	fba2 2303 	umull	r2, r3, r2, r3
    49ca:	085b      	lsrs	r3, r3, #1
    49cc:	2264      	movs	r2, #100	; 0x64
    49ce:	fb02 f303 	mul.w	r3, r2, r3
    49d2:	e046      	b.n	4a62 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    49d4:	88fb      	ldrh	r3, [r7, #6]
    49d6:	683a      	ldr	r2, [r7, #0]
    49d8:	4928      	ldr	r1, [pc, #160]	; (4a7c <_get_cycles_for_ms_internal+0x128>)
    49da:	fba1 1202 	umull	r1, r2, r1, r2
    49de:	0b52      	lsrs	r2, r2, #13
    49e0:	fb02 f303 	mul.w	r3, r2, r3
    49e4:	3302      	adds	r3, #2
    49e6:	4a23      	ldr	r2, [pc, #140]	; (4a74 <_get_cycles_for_ms_internal+0x120>)
    49e8:	fba2 2303 	umull	r2, r3, r2, r3
    49ec:	085a      	lsrs	r2, r3, #1
    49ee:	4613      	mov	r3, r2
    49f0:	009b      	lsls	r3, r3, #2
    49f2:	4413      	add	r3, r2
    49f4:	005b      	lsls	r3, r3, #1
    49f6:	e034      	b.n	4a62 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    49f8:	88fb      	ldrh	r3, [r7, #6]
    49fa:	683a      	ldr	r2, [r7, #0]
    49fc:	4920      	ldr	r1, [pc, #128]	; (4a80 <_get_cycles_for_ms_internal+0x12c>)
    49fe:	fba1 1202 	umull	r1, r2, r1, r2
    4a02:	0992      	lsrs	r2, r2, #6
    4a04:	fb02 f303 	mul.w	r3, r2, r3
    4a08:	3302      	adds	r3, #2
    4a0a:	4a1a      	ldr	r2, [pc, #104]	; (4a74 <_get_cycles_for_ms_internal+0x120>)
    4a0c:	fba2 2303 	umull	r2, r3, r2, r3
    4a10:	085b      	lsrs	r3, r3, #1
    4a12:	e026      	b.n	4a62 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4a14:	88fb      	ldrh	r3, [r7, #6]
    4a16:	683a      	ldr	r2, [r7, #0]
    4a18:	491a      	ldr	r1, [pc, #104]	; (4a84 <_get_cycles_for_ms_internal+0x130>)
    4a1a:	fba1 1202 	umull	r1, r2, r1, r2
    4a1e:	0952      	lsrs	r2, r2, #5
    4a20:	fb02 f303 	mul.w	r3, r2, r3
    4a24:	331d      	adds	r3, #29
    4a26:	4a18      	ldr	r2, [pc, #96]	; (4a88 <_get_cycles_for_ms_internal+0x134>)
    4a28:	fba2 2303 	umull	r2, r3, r2, r3
    4a2c:	091b      	lsrs	r3, r3, #4
    4a2e:	e018      	b.n	4a62 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4a30:	88fb      	ldrh	r3, [r7, #6]
    4a32:	683a      	ldr	r2, [r7, #0]
    4a34:	4915      	ldr	r1, [pc, #84]	; (4a8c <_get_cycles_for_ms_internal+0x138>)
    4a36:	fba1 1202 	umull	r1, r2, r1, r2
    4a3a:	08d2      	lsrs	r2, r2, #3
    4a3c:	fb02 f303 	mul.w	r3, r2, r3
    4a40:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4a44:	4a12      	ldr	r2, [pc, #72]	; (4a90 <_get_cycles_for_ms_internal+0x13c>)
    4a46:	fba2 2303 	umull	r2, r3, r2, r3
    4a4a:	095b      	lsrs	r3, r3, #5
    4a4c:	e009      	b.n	4a62 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4a4e:	88fb      	ldrh	r3, [r7, #6]
    4a50:	683a      	ldr	r2, [r7, #0]
    4a52:	fb02 f303 	mul.w	r3, r2, r3
    4a56:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4a5a:	4a0e      	ldr	r2, [pc, #56]	; (4a94 <_get_cycles_for_ms_internal+0x140>)
    4a5c:	fba2 2303 	umull	r2, r3, r2, r3
    4a60:	099b      	lsrs	r3, r3, #6
	}
}
    4a62:	4618      	mov	r0, r3
    4a64:	370c      	adds	r7, #12
    4a66:	46bd      	mov	sp, r7
    4a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a6c:	4770      	bx	lr
    4a6e:	bf00      	nop
    4a70:	431bde83 	.word	0x431bde83
    4a74:	aaaaaaab 	.word	0xaaaaaaab
    4a78:	0a7c5ac5 	.word	0x0a7c5ac5
    4a7c:	d1b71759 	.word	0xd1b71759
    4a80:	10624dd3 	.word	0x10624dd3
    4a84:	51eb851f 	.word	0x51eb851f
    4a88:	88888889 	.word	0x88888889
    4a8c:	cccccccd 	.word	0xcccccccd
    4a90:	1b4e81b5 	.word	0x1b4e81b5
    4a94:	057619f1 	.word	0x057619f1

00004a98 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4a98:	b580      	push	{r7, lr}
    4a9a:	b082      	sub	sp, #8
    4a9c:	af00      	add	r7, sp, #0
    4a9e:	4603      	mov	r3, r0
    4aa0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4aa2:	88fb      	ldrh	r3, [r7, #6]
    4aa4:	2209      	movs	r2, #9
    4aa6:	4904      	ldr	r1, [pc, #16]	; (4ab8 <_get_cycles_for_ms+0x20>)
    4aa8:	4618      	mov	r0, r3
    4aaa:	4b04      	ldr	r3, [pc, #16]	; (4abc <_get_cycles_for_ms+0x24>)
    4aac:	4798      	blx	r3
    4aae:	4603      	mov	r3, r0
}
    4ab0:	4618      	mov	r0, r3
    4ab2:	3708      	adds	r7, #8
    4ab4:	46bd      	mov	sp, r7
    4ab6:	bd80      	pop	{r7, pc}
    4ab8:	07270e00 	.word	0x07270e00
    4abc:	00004955 	.word	0x00004955

00004ac0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4ac0:	b480      	push	{r7}
    4ac2:	b083      	sub	sp, #12
    4ac4:	af00      	add	r7, sp, #0
    4ac6:	6078      	str	r0, [r7, #4]
    4ac8:	6039      	str	r1, [r7, #0]
    4aca:	bf00      	nop
    4acc:	f3af 8000 	nop.w

00004ad0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4ad0:	3901      	subs	r1, #1
    4ad2:	d8fd      	bhi.n	4ad0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4ad4:	bf00      	nop
    4ad6:	370c      	adds	r7, #12
    4ad8:	46bd      	mov	sp, r7
    4ada:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ade:	4770      	bx	lr

00004ae0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4ae0:	b480      	push	{r7}
    4ae2:	b083      	sub	sp, #12
    4ae4:	af00      	add	r7, sp, #0
    4ae6:	6078      	str	r0, [r7, #4]
    4ae8:	460b      	mov	r3, r1
    4aea:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	881b      	ldrh	r3, [r3, #0]
    4af0:	b29a      	uxth	r2, r3
    4af2:	887b      	ldrh	r3, [r7, #2]
    4af4:	021b      	lsls	r3, r3, #8
    4af6:	b29b      	uxth	r3, r3
    4af8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4afc:	b29b      	uxth	r3, r3
    4afe:	4313      	orrs	r3, r2
    4b00:	b29a      	uxth	r2, r3
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4b06:	bf00      	nop
    4b08:	370c      	adds	r7, #12
    4b0a:	46bd      	mov	sp, r7
    4b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b10:	4770      	bx	lr

00004b12 <hri_port_set_EVCTRL_reg>:
{
    4b12:	b480      	push	{r7}
    4b14:	b085      	sub	sp, #20
    4b16:	af00      	add	r7, sp, #0
    4b18:	60f8      	str	r0, [r7, #12]
    4b1a:	460b      	mov	r3, r1
    4b1c:	607a      	str	r2, [r7, #4]
    4b1e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4b20:	7afb      	ldrb	r3, [r7, #11]
    4b22:	7afa      	ldrb	r2, [r7, #11]
    4b24:	68f9      	ldr	r1, [r7, #12]
    4b26:	01d2      	lsls	r2, r2, #7
    4b28:	440a      	add	r2, r1
    4b2a:	322c      	adds	r2, #44	; 0x2c
    4b2c:	6811      	ldr	r1, [r2, #0]
    4b2e:	687a      	ldr	r2, [r7, #4]
    4b30:	430a      	orrs	r2, r1
    4b32:	68f9      	ldr	r1, [r7, #12]
    4b34:	01db      	lsls	r3, r3, #7
    4b36:	440b      	add	r3, r1
    4b38:	332c      	adds	r3, #44	; 0x2c
    4b3a:	601a      	str	r2, [r3, #0]
}
    4b3c:	bf00      	nop
    4b3e:	3714      	adds	r7, #20
    4b40:	46bd      	mov	sp, r7
    4b42:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b46:	4770      	bx	lr

00004b48 <_port_event_init>:

static inline void _port_event_init()
{
    4b48:	b580      	push	{r7, lr}
    4b4a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4b4c:	2200      	movs	r2, #0
    4b4e:	2100      	movs	r1, #0
    4b50:	4809      	ldr	r0, [pc, #36]	; (4b78 <_port_event_init+0x30>)
    4b52:	4b0a      	ldr	r3, [pc, #40]	; (4b7c <_port_event_init+0x34>)
    4b54:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4b56:	2200      	movs	r2, #0
    4b58:	2101      	movs	r1, #1
    4b5a:	4807      	ldr	r0, [pc, #28]	; (4b78 <_port_event_init+0x30>)
    4b5c:	4b07      	ldr	r3, [pc, #28]	; (4b7c <_port_event_init+0x34>)
    4b5e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4b60:	22ef      	movs	r2, #239	; 0xef
    4b62:	2102      	movs	r1, #2
    4b64:	4804      	ldr	r0, [pc, #16]	; (4b78 <_port_event_init+0x30>)
    4b66:	4b05      	ldr	r3, [pc, #20]	; (4b7c <_port_event_init+0x34>)
    4b68:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4b6a:	2200      	movs	r2, #0
    4b6c:	2103      	movs	r1, #3
    4b6e:	4802      	ldr	r0, [pc, #8]	; (4b78 <_port_event_init+0x30>)
    4b70:	4b02      	ldr	r3, [pc, #8]	; (4b7c <_port_event_init+0x34>)
    4b72:	4798      	blx	r3
}
    4b74:	bf00      	nop
    4b76:	bd80      	pop	{r7, pc}
    4b78:	41008000 	.word	0x41008000
    4b7c:	00004b13 	.word	0x00004b13

00004b80 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4b80:	b580      	push	{r7, lr}
    4b82:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4b84:	2104      	movs	r1, #4
    4b86:	480b      	ldr	r0, [pc, #44]	; (4bb4 <_init_chip+0x34>)
    4b88:	4b0b      	ldr	r3, [pc, #44]	; (4bb8 <_init_chip+0x38>)
    4b8a:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4b8c:	4b0b      	ldr	r3, [pc, #44]	; (4bbc <_init_chip+0x3c>)
    4b8e:	4798      	blx	r3
	_oscctrl_init_sources();
    4b90:	4b0b      	ldr	r3, [pc, #44]	; (4bc0 <_init_chip+0x40>)
    4b92:	4798      	blx	r3
	_mclk_init();
    4b94:	4b0b      	ldr	r3, [pc, #44]	; (4bc4 <_init_chip+0x44>)
    4b96:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4b98:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4b9c:	4b0a      	ldr	r3, [pc, #40]	; (4bc8 <_init_chip+0x48>)
    4b9e:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4ba0:	4b0a      	ldr	r3, [pc, #40]	; (4bcc <_init_chip+0x4c>)
    4ba2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4ba4:	f640 30df 	movw	r0, #3039	; 0xbdf
    4ba8:	4b07      	ldr	r3, [pc, #28]	; (4bc8 <_init_chip+0x48>)
    4baa:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4bac:	4b08      	ldr	r3, [pc, #32]	; (4bd0 <_init_chip+0x50>)
    4bae:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4bb0:	bf00      	nop
    4bb2:	bd80      	pop	{r7, pc}
    4bb4:	41004000 	.word	0x41004000
    4bb8:	00004ae1 	.word	0x00004ae1
    4bbc:	00005605 	.word	0x00005605
    4bc0:	00005acd 	.word	0x00005acd
    4bc4:	00005525 	.word	0x00005525
    4bc8:	000053e5 	.word	0x000053e5
    4bcc:	00005b0d 	.word	0x00005b0d
    4bd0:	00004b49 	.word	0x00004b49

00004bd4 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4bd4:	b480      	push	{r7}
    4bd6:	b083      	sub	sp, #12
    4bd8:	af00      	add	r7, sp, #0
    4bda:	6078      	str	r0, [r7, #4]
    4bdc:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4bde:	687b      	ldr	r3, [r7, #4]
    4be0:	683a      	ldr	r2, [r7, #0]
    4be2:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4be4:	2300      	movs	r3, #0
}
    4be6:	4618      	mov	r0, r3
    4be8:	370c      	adds	r7, #12
    4bea:	46bd      	mov	sp, r7
    4bec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bf0:	4770      	bx	lr
	...

00004bf4 <__NVIC_EnableIRQ>:
{
    4bf4:	b480      	push	{r7}
    4bf6:	b083      	sub	sp, #12
    4bf8:	af00      	add	r7, sp, #0
    4bfa:	4603      	mov	r3, r0
    4bfc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c02:	2b00      	cmp	r3, #0
    4c04:	db0b      	blt.n	4c1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c06:	4909      	ldr	r1, [pc, #36]	; (4c2c <__NVIC_EnableIRQ+0x38>)
    4c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c0c:	095b      	lsrs	r3, r3, #5
    4c0e:	88fa      	ldrh	r2, [r7, #6]
    4c10:	f002 021f 	and.w	r2, r2, #31
    4c14:	2001      	movs	r0, #1
    4c16:	fa00 f202 	lsl.w	r2, r0, r2
    4c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4c1e:	bf00      	nop
    4c20:	370c      	adds	r7, #12
    4c22:	46bd      	mov	sp, r7
    4c24:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c28:	4770      	bx	lr
    4c2a:	bf00      	nop
    4c2c:	e000e100 	.word	0xe000e100

00004c30 <__NVIC_DisableIRQ>:
{
    4c30:	b480      	push	{r7}
    4c32:	b083      	sub	sp, #12
    4c34:	af00      	add	r7, sp, #0
    4c36:	4603      	mov	r3, r0
    4c38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c3e:	2b00      	cmp	r3, #0
    4c40:	db10      	blt.n	4c64 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c42:	490b      	ldr	r1, [pc, #44]	; (4c70 <__NVIC_DisableIRQ+0x40>)
    4c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c48:	095b      	lsrs	r3, r3, #5
    4c4a:	88fa      	ldrh	r2, [r7, #6]
    4c4c:	f002 021f 	and.w	r2, r2, #31
    4c50:	2001      	movs	r0, #1
    4c52:	fa00 f202 	lsl.w	r2, r0, r2
    4c56:	3320      	adds	r3, #32
    4c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4c5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c60:	f3bf 8f6f 	isb	sy
}
    4c64:	bf00      	nop
    4c66:	370c      	adds	r7, #12
    4c68:	46bd      	mov	sp, r7
    4c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c6e:	4770      	bx	lr
    4c70:	e000e100 	.word	0xe000e100

00004c74 <__NVIC_ClearPendingIRQ>:
{
    4c74:	b480      	push	{r7}
    4c76:	b083      	sub	sp, #12
    4c78:	af00      	add	r7, sp, #0
    4c7a:	4603      	mov	r3, r0
    4c7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c82:	2b00      	cmp	r3, #0
    4c84:	db0c      	blt.n	4ca0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c86:	4909      	ldr	r1, [pc, #36]	; (4cac <__NVIC_ClearPendingIRQ+0x38>)
    4c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c8c:	095b      	lsrs	r3, r3, #5
    4c8e:	88fa      	ldrh	r2, [r7, #6]
    4c90:	f002 021f 	and.w	r2, r2, #31
    4c94:	2001      	movs	r0, #1
    4c96:	fa00 f202 	lsl.w	r2, r0, r2
    4c9a:	3360      	adds	r3, #96	; 0x60
    4c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4ca0:	bf00      	nop
    4ca2:	370c      	adds	r7, #12
    4ca4:	46bd      	mov	sp, r7
    4ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4caa:	4770      	bx	lr
    4cac:	e000e100 	.word	0xe000e100

00004cb0 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4cb0:	b480      	push	{r7}
    4cb2:	b083      	sub	sp, #12
    4cb4:	af00      	add	r7, sp, #0
    4cb6:	6078      	str	r0, [r7, #4]
    4cb8:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4cba:	bf00      	nop
    4cbc:	687b      	ldr	r3, [r7, #4]
    4cbe:	685a      	ldr	r2, [r3, #4]
    4cc0:	683b      	ldr	r3, [r7, #0]
    4cc2:	4013      	ands	r3, r2
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d1f9      	bne.n	4cbc <hri_eic_wait_for_sync+0xc>
	};
}
    4cc8:	bf00      	nop
    4cca:	370c      	adds	r7, #12
    4ccc:	46bd      	mov	sp, r7
    4cce:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cd2:	4770      	bx	lr

00004cd4 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4cd4:	b480      	push	{r7}
    4cd6:	b083      	sub	sp, #12
    4cd8:	af00      	add	r7, sp, #0
    4cda:	6078      	str	r0, [r7, #4]
    4cdc:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4cde:	687b      	ldr	r3, [r7, #4]
    4ce0:	685a      	ldr	r2, [r3, #4]
    4ce2:	683b      	ldr	r3, [r7, #0]
    4ce4:	4013      	ands	r3, r2
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	bf14      	ite	ne
    4cea:	2301      	movne	r3, #1
    4cec:	2300      	moveq	r3, #0
    4cee:	b2db      	uxtb	r3, r3
}
    4cf0:	4618      	mov	r0, r3
    4cf2:	370c      	adds	r7, #12
    4cf4:	46bd      	mov	sp, r7
    4cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cfa:	4770      	bx	lr

00004cfc <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4cfc:	b480      	push	{r7}
    4cfe:	b083      	sub	sp, #12
    4d00:	af00      	add	r7, sp, #0
    4d02:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4d04:	687b      	ldr	r3, [r7, #4]
    4d06:	695b      	ldr	r3, [r3, #20]
}
    4d08:	4618      	mov	r0, r3
    4d0a:	370c      	adds	r7, #12
    4d0c:	46bd      	mov	sp, r7
    4d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d12:	4770      	bx	lr

00004d14 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4d14:	b480      	push	{r7}
    4d16:	b083      	sub	sp, #12
    4d18:	af00      	add	r7, sp, #0
    4d1a:	6078      	str	r0, [r7, #4]
    4d1c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4d1e:	687b      	ldr	r3, [r7, #4]
    4d20:	683a      	ldr	r2, [r7, #0]
    4d22:	615a      	str	r2, [r3, #20]
}
    4d24:	bf00      	nop
    4d26:	370c      	adds	r7, #12
    4d28:	46bd      	mov	sp, r7
    4d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d2e:	4770      	bx	lr

00004d30 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4d30:	b480      	push	{r7}
    4d32:	b083      	sub	sp, #12
    4d34:	af00      	add	r7, sp, #0
    4d36:	6078      	str	r0, [r7, #4]
    4d38:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	683a      	ldr	r2, [r7, #0]
    4d3e:	611a      	str	r2, [r3, #16]
}
    4d40:	bf00      	nop
    4d42:	370c      	adds	r7, #12
    4d44:	46bd      	mov	sp, r7
    4d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d4a:	4770      	bx	lr

00004d4c <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4d4c:	b480      	push	{r7}
    4d4e:	b083      	sub	sp, #12
    4d50:	af00      	add	r7, sp, #0
    4d52:	6078      	str	r0, [r7, #4]
    4d54:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4d56:	687b      	ldr	r3, [r7, #4]
    4d58:	683a      	ldr	r2, [r7, #0]
    4d5a:	60da      	str	r2, [r3, #12]
}
    4d5c:	bf00      	nop
    4d5e:	370c      	adds	r7, #12
    4d60:	46bd      	mov	sp, r7
    4d62:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d66:	4770      	bx	lr

00004d68 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4d68:	b580      	push	{r7, lr}
    4d6a:	b082      	sub	sp, #8
    4d6c:	af00      	add	r7, sp, #0
    4d6e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4d70:	687b      	ldr	r3, [r7, #4]
    4d72:	781b      	ldrb	r3, [r3, #0]
    4d74:	b2db      	uxtb	r3, r3
    4d76:	f043 0302 	orr.w	r3, r3, #2
    4d7a:	b2da      	uxtb	r2, r3
    4d7c:	687b      	ldr	r3, [r7, #4]
    4d7e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4d80:	2103      	movs	r1, #3
    4d82:	6878      	ldr	r0, [r7, #4]
    4d84:	4b02      	ldr	r3, [pc, #8]	; (4d90 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4d86:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d88:	bf00      	nop
    4d8a:	3708      	adds	r7, #8
    4d8c:	46bd      	mov	sp, r7
    4d8e:	bd80      	pop	{r7, pc}
    4d90:	00004cb1 	.word	0x00004cb1

00004d94 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4d94:	b580      	push	{r7, lr}
    4d96:	b082      	sub	sp, #8
    4d98:	af00      	add	r7, sp, #0
    4d9a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4d9c:	687b      	ldr	r3, [r7, #4]
    4d9e:	781b      	ldrb	r3, [r3, #0]
    4da0:	b2db      	uxtb	r3, r3
    4da2:	f023 0302 	bic.w	r3, r3, #2
    4da6:	b2da      	uxtb	r2, r3
    4da8:	687b      	ldr	r3, [r7, #4]
    4daa:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4dac:	2103      	movs	r1, #3
    4dae:	6878      	ldr	r0, [r7, #4]
    4db0:	4b02      	ldr	r3, [pc, #8]	; (4dbc <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4db2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4db4:	bf00      	nop
    4db6:	3708      	adds	r7, #8
    4db8:	46bd      	mov	sp, r7
    4dba:	bd80      	pop	{r7, pc}
    4dbc:	00004cb1 	.word	0x00004cb1

00004dc0 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4dc0:	b580      	push	{r7, lr}
    4dc2:	b084      	sub	sp, #16
    4dc4:	af00      	add	r7, sp, #0
    4dc6:	6078      	str	r0, [r7, #4]
    4dc8:	460b      	mov	r3, r1
    4dca:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4dcc:	687b      	ldr	r3, [r7, #4]
    4dce:	781b      	ldrb	r3, [r3, #0]
    4dd0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4dd2:	7bfb      	ldrb	r3, [r7, #15]
    4dd4:	f023 0310 	bic.w	r3, r3, #16
    4dd8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4dda:	78fb      	ldrb	r3, [r7, #3]
    4ddc:	011b      	lsls	r3, r3, #4
    4dde:	b25a      	sxtb	r2, r3
    4de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4de4:	4313      	orrs	r3, r2
    4de6:	b25b      	sxtb	r3, r3
    4de8:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	7bfa      	ldrb	r2, [r7, #15]
    4dee:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4df0:	2103      	movs	r1, #3
    4df2:	6878      	ldr	r0, [r7, #4]
    4df4:	4b02      	ldr	r3, [pc, #8]	; (4e00 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4df6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4df8:	bf00      	nop
    4dfa:	3710      	adds	r7, #16
    4dfc:	46bd      	mov	sp, r7
    4dfe:	bd80      	pop	{r7, pc}
    4e00:	00004cb1 	.word	0x00004cb1

00004e04 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4e04:	b580      	push	{r7, lr}
    4e06:	b084      	sub	sp, #16
    4e08:	af00      	add	r7, sp, #0
    4e0a:	6078      	str	r0, [r7, #4]
    4e0c:	460b      	mov	r3, r1
    4e0e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4e10:	2103      	movs	r1, #3
    4e12:	6878      	ldr	r0, [r7, #4]
    4e14:	4b06      	ldr	r3, [pc, #24]	; (4e30 <hri_eic_get_CTRLA_reg+0x2c>)
    4e16:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4e18:	687b      	ldr	r3, [r7, #4]
    4e1a:	781b      	ldrb	r3, [r3, #0]
    4e1c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4e1e:	7bfa      	ldrb	r2, [r7, #15]
    4e20:	78fb      	ldrb	r3, [r7, #3]
    4e22:	4013      	ands	r3, r2
    4e24:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4e26:	7bfb      	ldrb	r3, [r7, #15]
}
    4e28:	4618      	mov	r0, r3
    4e2a:	3710      	adds	r7, #16
    4e2c:	46bd      	mov	sp, r7
    4e2e:	bd80      	pop	{r7, pc}
    4e30:	00004cb1 	.word	0x00004cb1

00004e34 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4e34:	b580      	push	{r7, lr}
    4e36:	b082      	sub	sp, #8
    4e38:	af00      	add	r7, sp, #0
    4e3a:	6078      	str	r0, [r7, #4]
    4e3c:	460b      	mov	r3, r1
    4e3e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4e40:	687b      	ldr	r3, [r7, #4]
    4e42:	78fa      	ldrb	r2, [r7, #3]
    4e44:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4e46:	2103      	movs	r1, #3
    4e48:	6878      	ldr	r0, [r7, #4]
    4e4a:	4b03      	ldr	r3, [pc, #12]	; (4e58 <hri_eic_write_CTRLA_reg+0x24>)
    4e4c:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4e4e:	bf00      	nop
    4e50:	3708      	adds	r7, #8
    4e52:	46bd      	mov	sp, r7
    4e54:	bd80      	pop	{r7, pc}
    4e56:	bf00      	nop
    4e58:	00004cb1 	.word	0x00004cb1

00004e5c <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4e5c:	b480      	push	{r7}
    4e5e:	b083      	sub	sp, #12
    4e60:	af00      	add	r7, sp, #0
    4e62:	6078      	str	r0, [r7, #4]
    4e64:	460b      	mov	r3, r1
    4e66:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4e68:	687b      	ldr	r3, [r7, #4]
    4e6a:	78fa      	ldrb	r2, [r7, #3]
    4e6c:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4e6e:	bf00      	nop
    4e70:	370c      	adds	r7, #12
    4e72:	46bd      	mov	sp, r7
    4e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e78:	4770      	bx	lr

00004e7a <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4e7a:	b480      	push	{r7}
    4e7c:	b083      	sub	sp, #12
    4e7e:	af00      	add	r7, sp, #0
    4e80:	6078      	str	r0, [r7, #4]
    4e82:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	683a      	ldr	r2, [r7, #0]
    4e88:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4e8a:	bf00      	nop
    4e8c:	370c      	adds	r7, #12
    4e8e:	46bd      	mov	sp, r7
    4e90:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e94:	4770      	bx	lr

00004e96 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4e96:	b480      	push	{r7}
    4e98:	b083      	sub	sp, #12
    4e9a:	af00      	add	r7, sp, #0
    4e9c:	6078      	str	r0, [r7, #4]
    4e9e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4ea0:	687b      	ldr	r3, [r7, #4]
    4ea2:	683a      	ldr	r2, [r7, #0]
    4ea4:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4ea6:	bf00      	nop
    4ea8:	370c      	adds	r7, #12
    4eaa:	46bd      	mov	sp, r7
    4eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eb0:	4770      	bx	lr

00004eb2 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4eb2:	b480      	push	{r7}
    4eb4:	b085      	sub	sp, #20
    4eb6:	af00      	add	r7, sp, #0
    4eb8:	60f8      	str	r0, [r7, #12]
    4eba:	460b      	mov	r3, r1
    4ebc:	607a      	str	r2, [r7, #4]
    4ebe:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4ec0:	7afb      	ldrb	r3, [r7, #11]
    4ec2:	68fa      	ldr	r2, [r7, #12]
    4ec4:	3306      	adds	r3, #6
    4ec6:	009b      	lsls	r3, r3, #2
    4ec8:	4413      	add	r3, r2
    4eca:	687a      	ldr	r2, [r7, #4]
    4ecc:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4ece:	bf00      	nop
    4ed0:	3714      	adds	r7, #20
    4ed2:	46bd      	mov	sp, r7
    4ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ed8:	4770      	bx	lr

00004eda <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4eda:	b480      	push	{r7}
    4edc:	b083      	sub	sp, #12
    4ede:	af00      	add	r7, sp, #0
    4ee0:	6078      	str	r0, [r7, #4]
    4ee2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4ee4:	687b      	ldr	r3, [r7, #4]
    4ee6:	683a      	ldr	r2, [r7, #0]
    4ee8:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4eea:	bf00      	nop
    4eec:	370c      	adds	r7, #12
    4eee:	46bd      	mov	sp, r7
    4ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ef4:	4770      	bx	lr

00004ef6 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4ef6:	b480      	push	{r7}
    4ef8:	b083      	sub	sp, #12
    4efa:	af00      	add	r7, sp, #0
    4efc:	6078      	str	r0, [r7, #4]
    4efe:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4f00:	687b      	ldr	r3, [r7, #4]
    4f02:	683a      	ldr	r2, [r7, #0]
    4f04:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f06:	bf00      	nop
    4f08:	370c      	adds	r7, #12
    4f0a:	46bd      	mov	sp, r7
    4f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f10:	4770      	bx	lr
	...

00004f14 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4f14:	b580      	push	{r7, lr}
    4f16:	b082      	sub	sp, #8
    4f18:	af00      	add	r7, sp, #0
    4f1a:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4f1c:	2101      	movs	r1, #1
    4f1e:	483c      	ldr	r0, [pc, #240]	; (5010 <_ext_irq_init+0xfc>)
    4f20:	4b3c      	ldr	r3, [pc, #240]	; (5014 <_ext_irq_init+0x100>)
    4f22:	4798      	blx	r3
    4f24:	4603      	mov	r3, r0
    4f26:	f083 0301 	eor.w	r3, r3, #1
    4f2a:	b2db      	uxtb	r3, r3
    4f2c:	2b00      	cmp	r3, #0
    4f2e:	d011      	beq.n	4f54 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4f30:	2102      	movs	r1, #2
    4f32:	4837      	ldr	r0, [pc, #220]	; (5010 <_ext_irq_init+0xfc>)
    4f34:	4b38      	ldr	r3, [pc, #224]	; (5018 <_ext_irq_init+0x104>)
    4f36:	4798      	blx	r3
    4f38:	4603      	mov	r3, r0
    4f3a:	2b00      	cmp	r3, #0
    4f3c:	d006      	beq.n	4f4c <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4f3e:	4834      	ldr	r0, [pc, #208]	; (5010 <_ext_irq_init+0xfc>)
    4f40:	4b36      	ldr	r3, [pc, #216]	; (501c <_ext_irq_init+0x108>)
    4f42:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4f44:	2102      	movs	r1, #2
    4f46:	4832      	ldr	r0, [pc, #200]	; (5010 <_ext_irq_init+0xfc>)
    4f48:	4b35      	ldr	r3, [pc, #212]	; (5020 <_ext_irq_init+0x10c>)
    4f4a:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4f4c:	2101      	movs	r1, #1
    4f4e:	4830      	ldr	r0, [pc, #192]	; (5010 <_ext_irq_init+0xfc>)
    4f50:	4b34      	ldr	r3, [pc, #208]	; (5024 <_ext_irq_init+0x110>)
    4f52:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4f54:	2101      	movs	r1, #1
    4f56:	482e      	ldr	r0, [pc, #184]	; (5010 <_ext_irq_init+0xfc>)
    4f58:	4b31      	ldr	r3, [pc, #196]	; (5020 <_ext_irq_init+0x10c>)
    4f5a:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4f5c:	2100      	movs	r1, #0
    4f5e:	482c      	ldr	r0, [pc, #176]	; (5010 <_ext_irq_init+0xfc>)
    4f60:	4b31      	ldr	r3, [pc, #196]	; (5028 <_ext_irq_init+0x114>)
    4f62:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4f64:	2100      	movs	r1, #0
    4f66:	482a      	ldr	r0, [pc, #168]	; (5010 <_ext_irq_init+0xfc>)
    4f68:	4b30      	ldr	r3, [pc, #192]	; (502c <_ext_irq_init+0x118>)
    4f6a:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4f6c:	2100      	movs	r1, #0
    4f6e:	4828      	ldr	r0, [pc, #160]	; (5010 <_ext_irq_init+0xfc>)
    4f70:	4b2f      	ldr	r3, [pc, #188]	; (5030 <_ext_irq_init+0x11c>)
    4f72:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4f74:	2131      	movs	r1, #49	; 0x31
    4f76:	4826      	ldr	r0, [pc, #152]	; (5010 <_ext_irq_init+0xfc>)
    4f78:	4b2e      	ldr	r3, [pc, #184]	; (5034 <_ext_irq_init+0x120>)
    4f7a:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4f7c:	2131      	movs	r1, #49	; 0x31
    4f7e:	4824      	ldr	r0, [pc, #144]	; (5010 <_ext_irq_init+0xfc>)
    4f80:	4b2d      	ldr	r3, [pc, #180]	; (5038 <_ext_irq_init+0x124>)
    4f82:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4f84:	2100      	movs	r1, #0
    4f86:	4822      	ldr	r0, [pc, #136]	; (5010 <_ext_irq_init+0xfc>)
    4f88:	4b2c      	ldr	r3, [pc, #176]	; (503c <_ext_irq_init+0x128>)
    4f8a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4f8c:	4a2c      	ldr	r2, [pc, #176]	; (5040 <_ext_irq_init+0x12c>)
    4f8e:	2100      	movs	r1, #0
    4f90:	481f      	ldr	r0, [pc, #124]	; (5010 <_ext_irq_init+0xfc>)
    4f92:	4b2c      	ldr	r3, [pc, #176]	; (5044 <_ext_irq_init+0x130>)
    4f94:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4f96:	2200      	movs	r2, #0
    4f98:	2101      	movs	r1, #1
    4f9a:	481d      	ldr	r0, [pc, #116]	; (5010 <_ext_irq_init+0xfc>)
    4f9c:	4b29      	ldr	r3, [pc, #164]	; (5044 <_ext_irq_init+0x130>)
    4f9e:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4fa0:	481b      	ldr	r0, [pc, #108]	; (5010 <_ext_irq_init+0xfc>)
    4fa2:	4b29      	ldr	r3, [pc, #164]	; (5048 <_ext_irq_init+0x134>)
    4fa4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    4fa6:	200c      	movs	r0, #12
    4fa8:	4b28      	ldr	r3, [pc, #160]	; (504c <_ext_irq_init+0x138>)
    4faa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4fac:	200c      	movs	r0, #12
    4fae:	4b28      	ldr	r3, [pc, #160]	; (5050 <_ext_irq_init+0x13c>)
    4fb0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    4fb2:	200c      	movs	r0, #12
    4fb4:	4b27      	ldr	r3, [pc, #156]	; (5054 <_ext_irq_init+0x140>)
    4fb6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4fb8:	2010      	movs	r0, #16
    4fba:	4b24      	ldr	r3, [pc, #144]	; (504c <_ext_irq_init+0x138>)
    4fbc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4fbe:	2010      	movs	r0, #16
    4fc0:	4b23      	ldr	r3, [pc, #140]	; (5050 <_ext_irq_init+0x13c>)
    4fc2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4fc4:	2010      	movs	r0, #16
    4fc6:	4b23      	ldr	r3, [pc, #140]	; (5054 <_ext_irq_init+0x140>)
    4fc8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4fca:	2011      	movs	r0, #17
    4fcc:	4b1f      	ldr	r3, [pc, #124]	; (504c <_ext_irq_init+0x138>)
    4fce:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4fd0:	2011      	movs	r0, #17
    4fd2:	4b1f      	ldr	r3, [pc, #124]	; (5050 <_ext_irq_init+0x13c>)
    4fd4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4fd6:	2011      	movs	r0, #17
    4fd8:	4b1e      	ldr	r3, [pc, #120]	; (5054 <_ext_irq_init+0x140>)
    4fda:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4fdc:	2012      	movs	r0, #18
    4fde:	4b1b      	ldr	r3, [pc, #108]	; (504c <_ext_irq_init+0x138>)
    4fe0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4fe2:	2012      	movs	r0, #18
    4fe4:	4b1a      	ldr	r3, [pc, #104]	; (5050 <_ext_irq_init+0x13c>)
    4fe6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4fe8:	2012      	movs	r0, #18
    4fea:	4b1a      	ldr	r3, [pc, #104]	; (5054 <_ext_irq_init+0x140>)
    4fec:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4fee:	2013      	movs	r0, #19
    4ff0:	4b16      	ldr	r3, [pc, #88]	; (504c <_ext_irq_init+0x138>)
    4ff2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4ff4:	2013      	movs	r0, #19
    4ff6:	4b16      	ldr	r3, [pc, #88]	; (5050 <_ext_irq_init+0x13c>)
    4ff8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4ffa:	2013      	movs	r0, #19
    4ffc:	4b15      	ldr	r3, [pc, #84]	; (5054 <_ext_irq_init+0x140>)
    4ffe:	4798      	blx	r3

	callback = cb;
    5000:	4a15      	ldr	r2, [pc, #84]	; (5058 <_ext_irq_init+0x144>)
    5002:	687b      	ldr	r3, [r7, #4]
    5004:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    5006:	2300      	movs	r3, #0
}
    5008:	4618      	mov	r0, r3
    500a:	3708      	adds	r7, #8
    500c:	46bd      	mov	sp, r7
    500e:	bd80      	pop	{r7, pc}
    5010:	40002800 	.word	0x40002800
    5014:	00004cd5 	.word	0x00004cd5
    5018:	00004e05 	.word	0x00004e05
    501c:	00004d95 	.word	0x00004d95
    5020:	00004cb1 	.word	0x00004cb1
    5024:	00004e35 	.word	0x00004e35
    5028:	00004dc1 	.word	0x00004dc1
    502c:	00004e5d 	.word	0x00004e5d
    5030:	00004e7b 	.word	0x00004e7b
    5034:	00004e97 	.word	0x00004e97
    5038:	00004edb 	.word	0x00004edb
    503c:	00004ef7 	.word	0x00004ef7
    5040:	00990003 	.word	0x00990003
    5044:	00004eb3 	.word	0x00004eb3
    5048:	00004d69 	.word	0x00004d69
    504c:	00004c31 	.word	0x00004c31
    5050:	00004c75 	.word	0x00004c75
    5054:	00004bf5 	.word	0x00004bf5
    5058:	2000301c 	.word	0x2000301c

0000505c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    505c:	b580      	push	{r7, lr}
    505e:	b084      	sub	sp, #16
    5060:	af00      	add	r7, sp, #0
    5062:	6078      	str	r0, [r7, #4]
    5064:	460b      	mov	r3, r1
    5066:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    5068:	23ff      	movs	r3, #255	; 0xff
    506a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    506c:	2300      	movs	r3, #0
    506e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    5070:	e010      	b.n	5094 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    5072:	7bbb      	ldrb	r3, [r7, #14]
    5074:	4a1c      	ldr	r2, [pc, #112]	; (50e8 <_ext_irq_enable+0x8c>)
    5076:	00db      	lsls	r3, r3, #3
    5078:	4413      	add	r3, r2
    507a:	685a      	ldr	r2, [r3, #4]
    507c:	687b      	ldr	r3, [r7, #4]
    507e:	429a      	cmp	r2, r3
    5080:	d105      	bne.n	508e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    5082:	7bbb      	ldrb	r3, [r7, #14]
    5084:	4a18      	ldr	r2, [pc, #96]	; (50e8 <_ext_irq_enable+0x8c>)
    5086:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    508a:	73fb      	strb	r3, [r7, #15]
			break;
    508c:	e005      	b.n	509a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    508e:	7bbb      	ldrb	r3, [r7, #14]
    5090:	3301      	adds	r3, #1
    5092:	73bb      	strb	r3, [r7, #14]
    5094:	7bbb      	ldrb	r3, [r7, #14]
    5096:	2b04      	cmp	r3, #4
    5098:	d9eb      	bls.n	5072 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    509a:	7bfb      	ldrb	r3, [r7, #15]
    509c:	2bff      	cmp	r3, #255	; 0xff
    509e:	d102      	bne.n	50a6 <_ext_irq_enable+0x4a>
		return -1;
    50a0:	f04f 33ff 	mov.w	r3, #4294967295
    50a4:	e01c      	b.n	50e0 <_ext_irq_enable+0x84>
	}

	if (enable) {
    50a6:	78fb      	ldrb	r3, [r7, #3]
    50a8:	2b00      	cmp	r3, #0
    50aa:	d008      	beq.n	50be <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    50ac:	7bfb      	ldrb	r3, [r7, #15]
    50ae:	2201      	movs	r2, #1
    50b0:	fa02 f303 	lsl.w	r3, r2, r3
    50b4:	4619      	mov	r1, r3
    50b6:	480d      	ldr	r0, [pc, #52]	; (50ec <_ext_irq_enable+0x90>)
    50b8:	4b0d      	ldr	r3, [pc, #52]	; (50f0 <_ext_irq_enable+0x94>)
    50ba:	4798      	blx	r3
    50bc:	e00f      	b.n	50de <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    50be:	7bfb      	ldrb	r3, [r7, #15]
    50c0:	2201      	movs	r2, #1
    50c2:	fa02 f303 	lsl.w	r3, r2, r3
    50c6:	4619      	mov	r1, r3
    50c8:	4808      	ldr	r0, [pc, #32]	; (50ec <_ext_irq_enable+0x90>)
    50ca:	4b0a      	ldr	r3, [pc, #40]	; (50f4 <_ext_irq_enable+0x98>)
    50cc:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    50ce:	7bfb      	ldrb	r3, [r7, #15]
    50d0:	2201      	movs	r2, #1
    50d2:	fa02 f303 	lsl.w	r3, r2, r3
    50d6:	4619      	mov	r1, r3
    50d8:	4804      	ldr	r0, [pc, #16]	; (50ec <_ext_irq_enable+0x90>)
    50da:	4b07      	ldr	r3, [pc, #28]	; (50f8 <_ext_irq_enable+0x9c>)
    50dc:	4798      	blx	r3
	}

	return ERR_NONE;
    50de:	2300      	movs	r3, #0
}
    50e0:	4618      	mov	r0, r3
    50e2:	3710      	adds	r7, #16
    50e4:	46bd      	mov	sp, r7
    50e6:	bd80      	pop	{r7, pc}
    50e8:	0001141c 	.word	0x0001141c
    50ec:	40002800 	.word	0x40002800
    50f0:	00004d31 	.word	0x00004d31
    50f4:	00004d4d 	.word	0x00004d4d
    50f8:	00004d15 	.word	0x00004d15

000050fc <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    50fc:	b580      	push	{r7, lr}
    50fe:	b084      	sub	sp, #16
    5100:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    5102:	4841      	ldr	r0, [pc, #260]	; (5208 <_ext_irq_handler+0x10c>)
    5104:	4b41      	ldr	r3, [pc, #260]	; (520c <_ext_irq_handler+0x110>)
    5106:	4798      	blx	r3
    5108:	4603      	mov	r3, r0
    510a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    510c:	f04f 33ff 	mov.w	r3, #4294967295
    5110:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    5112:	683b      	ldr	r3, [r7, #0]
    5114:	4619      	mov	r1, r3
    5116:	483c      	ldr	r0, [pc, #240]	; (5208 <_ext_irq_handler+0x10c>)
    5118:	4b3d      	ldr	r3, [pc, #244]	; (5210 <_ext_irq_handler+0x114>)
    511a:	4798      	blx	r3

	ASSERT(callback);
    511c:	4b3d      	ldr	r3, [pc, #244]	; (5214 <_ext_irq_handler+0x118>)
    511e:	681b      	ldr	r3, [r3, #0]
    5120:	2b00      	cmp	r3, #0
    5122:	bf14      	ite	ne
    5124:	2301      	movne	r3, #1
    5126:	2300      	moveq	r3, #0
    5128:	b2db      	uxtb	r3, r3
    512a:	22f8      	movs	r2, #248	; 0xf8
    512c:	493a      	ldr	r1, [pc, #232]	; (5218 <_ext_irq_handler+0x11c>)
    512e:	4618      	mov	r0, r3
    5130:	4b3a      	ldr	r3, [pc, #232]	; (521c <_ext_irq_handler+0x120>)
    5132:	4798      	blx	r3

	while (flags) {
    5134:	e060      	b.n	51f8 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    5136:	683b      	ldr	r3, [r7, #0]
    5138:	4618      	mov	r0, r3
    513a:	4b39      	ldr	r3, [pc, #228]	; (5220 <_ext_irq_handler+0x124>)
    513c:	4798      	blx	r3
    513e:	4603      	mov	r3, r0
    5140:	b2db      	uxtb	r3, r3
    5142:	3b01      	subs	r3, #1
    5144:	b2db      	uxtb	r3, r3
    5146:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    5148:	e047      	b.n	51da <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    514a:	2300      	movs	r3, #0
    514c:	71fb      	strb	r3, [r7, #7]
    514e:	2305      	movs	r3, #5
    5150:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    5152:	e024      	b.n	519e <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    5154:	79ba      	ldrb	r2, [r7, #6]
    5156:	79fb      	ldrb	r3, [r7, #7]
    5158:	4413      	add	r3, r2
    515a:	105b      	asrs	r3, r3, #1
    515c:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    515e:	797b      	ldrb	r3, [r7, #5]
    5160:	4a30      	ldr	r2, [pc, #192]	; (5224 <_ext_irq_handler+0x128>)
    5162:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5166:	461a      	mov	r2, r3
    5168:	f997 300f 	ldrsb.w	r3, [r7, #15]
    516c:	429a      	cmp	r2, r3
    516e:	d106      	bne.n	517e <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    5170:	797b      	ldrb	r3, [r7, #5]
    5172:	4a2c      	ldr	r2, [pc, #176]	; (5224 <_ext_irq_handler+0x128>)
    5174:	00db      	lsls	r3, r3, #3
    5176:	4413      	add	r3, r2
    5178:	685b      	ldr	r3, [r3, #4]
    517a:	60bb      	str	r3, [r7, #8]
					break;
    517c:	e013      	b.n	51a6 <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    517e:	797b      	ldrb	r3, [r7, #5]
    5180:	4a28      	ldr	r2, [pc, #160]	; (5224 <_ext_irq_handler+0x128>)
    5182:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5186:	461a      	mov	r2, r3
    5188:	f997 300f 	ldrsb.w	r3, [r7, #15]
    518c:	429a      	cmp	r2, r3
    518e:	da03      	bge.n	5198 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    5190:	797b      	ldrb	r3, [r7, #5]
    5192:	3301      	adds	r3, #1
    5194:	71fb      	strb	r3, [r7, #7]
    5196:	e002      	b.n	519e <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    5198:	797b      	ldrb	r3, [r7, #5]
    519a:	3b01      	subs	r3, #1
    519c:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    519e:	79ba      	ldrb	r2, [r7, #6]
    51a0:	79fb      	ldrb	r3, [r7, #7]
    51a2:	429a      	cmp	r2, r3
    51a4:	d2d6      	bcs.n	5154 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    51a6:	68bb      	ldr	r3, [r7, #8]
    51a8:	f1b3 3fff 	cmp.w	r3, #4294967295
    51ac:	d003      	beq.n	51b6 <_ext_irq_handler+0xba>
				callback(pin);
    51ae:	4b19      	ldr	r3, [pc, #100]	; (5214 <_ext_irq_handler+0x118>)
    51b0:	681b      	ldr	r3, [r3, #0]
    51b2:	68b8      	ldr	r0, [r7, #8]
    51b4:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    51b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    51ba:	2201      	movs	r2, #1
    51bc:	fa02 f303 	lsl.w	r3, r2, r3
    51c0:	43da      	mvns	r2, r3
    51c2:	683b      	ldr	r3, [r7, #0]
    51c4:	4013      	ands	r3, r2
    51c6:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    51c8:	683b      	ldr	r3, [r7, #0]
    51ca:	4618      	mov	r0, r3
    51cc:	4b14      	ldr	r3, [pc, #80]	; (5220 <_ext_irq_handler+0x124>)
    51ce:	4798      	blx	r3
    51d0:	4603      	mov	r3, r0
    51d2:	b2db      	uxtb	r3, r3
    51d4:	3b01      	subs	r3, #1
    51d6:	b2db      	uxtb	r3, r3
    51d8:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    51da:	f997 300f 	ldrsb.w	r3, [r7, #15]
    51de:	f1b3 3fff 	cmp.w	r3, #4294967295
    51e2:	d1b2      	bne.n	514a <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    51e4:	4808      	ldr	r0, [pc, #32]	; (5208 <_ext_irq_handler+0x10c>)
    51e6:	4b09      	ldr	r3, [pc, #36]	; (520c <_ext_irq_handler+0x110>)
    51e8:	4798      	blx	r3
    51ea:	4603      	mov	r3, r0
    51ec:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    51ee:	683b      	ldr	r3, [r7, #0]
    51f0:	4619      	mov	r1, r3
    51f2:	4805      	ldr	r0, [pc, #20]	; (5208 <_ext_irq_handler+0x10c>)
    51f4:	4b06      	ldr	r3, [pc, #24]	; (5210 <_ext_irq_handler+0x114>)
    51f6:	4798      	blx	r3
	while (flags) {
    51f8:	683b      	ldr	r3, [r7, #0]
    51fa:	2b00      	cmp	r3, #0
    51fc:	d19b      	bne.n	5136 <_ext_irq_handler+0x3a>
	}
}
    51fe:	bf00      	nop
    5200:	3710      	adds	r7, #16
    5202:	46bd      	mov	sp, r7
    5204:	bd80      	pop	{r7, pc}
    5206:	bf00      	nop
    5208:	40002800 	.word	0x40002800
    520c:	00004cfd 	.word	0x00004cfd
    5210:	00004d15 	.word	0x00004d15
    5214:	2000301c 	.word	0x2000301c
    5218:	00011444 	.word	0x00011444
    521c:	00003f79 	.word	0x00003f79
    5220:	00010c75 	.word	0x00010c75
    5224:	0001141c 	.word	0x0001141c

00005228 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    5228:	b580      	push	{r7, lr}
    522a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    522c:	4b01      	ldr	r3, [pc, #4]	; (5234 <EIC_0_Handler+0xc>)
    522e:	4798      	blx	r3
} /**
    5230:	bf00      	nop
    5232:	bd80      	pop	{r7, pc}
    5234:	000050fd 	.word	0x000050fd

00005238 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5238:	b580      	push	{r7, lr}
    523a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    523c:	4b01      	ldr	r3, [pc, #4]	; (5244 <EIC_4_Handler+0xc>)
    523e:	4798      	blx	r3
} /**
    5240:	bf00      	nop
    5242:	bd80      	pop	{r7, pc}
    5244:	000050fd 	.word	0x000050fd

00005248 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5248:	b580      	push	{r7, lr}
    524a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    524c:	4b01      	ldr	r3, [pc, #4]	; (5254 <EIC_5_Handler+0xc>)
    524e:	4798      	blx	r3
} /**
    5250:	bf00      	nop
    5252:	bd80      	pop	{r7, pc}
    5254:	000050fd 	.word	0x000050fd

00005258 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5258:	b580      	push	{r7, lr}
    525a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    525c:	4b01      	ldr	r3, [pc, #4]	; (5264 <EIC_6_Handler+0xc>)
    525e:	4798      	blx	r3
} /**
    5260:	bf00      	nop
    5262:	bd80      	pop	{r7, pc}
    5264:	000050fd 	.word	0x000050fd

00005268 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    5268:	b580      	push	{r7, lr}
    526a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    526c:	4b01      	ldr	r3, [pc, #4]	; (5274 <EIC_7_Handler+0xc>)
    526e:	4798      	blx	r3
}
    5270:	bf00      	nop
    5272:	bd80      	pop	{r7, pc}
    5274:	000050fd 	.word	0x000050fd

00005278 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    5278:	b480      	push	{r7}
    527a:	b085      	sub	sp, #20
    527c:	af00      	add	r7, sp, #0
    527e:	60f8      	str	r0, [r7, #12]
    5280:	460b      	mov	r3, r1
    5282:	607a      	str	r2, [r7, #4]
    5284:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    5286:	7afa      	ldrb	r2, [r7, #11]
    5288:	68fb      	ldr	r3, [r7, #12]
    528a:	3248      	adds	r2, #72	; 0x48
    528c:	6879      	ldr	r1, [r7, #4]
    528e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5292:	bf00      	nop
    5294:	3714      	adds	r7, #20
    5296:	46bd      	mov	sp, r7
    5298:	f85d 7b04 	ldr.w	r7, [sp], #4
    529c:	4770      	bx	lr

0000529e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    529e:	b480      	push	{r7}
    52a0:	b083      	sub	sp, #12
    52a2:	af00      	add	r7, sp, #0
    52a4:	6078      	str	r0, [r7, #4]
    52a6:	460b      	mov	r3, r1
    52a8:	70fb      	strb	r3, [r7, #3]
    52aa:	4613      	mov	r3, r2
    52ac:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    52ae:	78fb      	ldrb	r3, [r7, #3]
    52b0:	687a      	ldr	r2, [r7, #4]
    52b2:	3304      	adds	r3, #4
    52b4:	00db      	lsls	r3, r3, #3
    52b6:	4413      	add	r3, r2
    52b8:	78ba      	ldrb	r2, [r7, #2]
    52ba:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    52bc:	78fb      	ldrb	r3, [r7, #3]
    52be:	78ba      	ldrb	r2, [r7, #2]
    52c0:	43d2      	mvns	r2, r2
    52c2:	b2d1      	uxtb	r1, r2
    52c4:	687a      	ldr	r2, [r7, #4]
    52c6:	3304      	adds	r3, #4
    52c8:	00db      	lsls	r3, r3, #3
    52ca:	4413      	add	r3, r2
    52cc:	460a      	mov	r2, r1
    52ce:	711a      	strb	r2, [r3, #4]
}
    52d0:	bf00      	nop
    52d2:	370c      	adds	r7, #12
    52d4:	46bd      	mov	sp, r7
    52d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    52da:	4770      	bx	lr

000052dc <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    52dc:	b480      	push	{r7}
    52de:	b085      	sub	sp, #20
    52e0:	af00      	add	r7, sp, #0
    52e2:	60f8      	str	r0, [r7, #12]
    52e4:	460b      	mov	r3, r1
    52e6:	607a      	str	r2, [r7, #4]
    52e8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    52ea:	7afa      	ldrb	r2, [r7, #11]
    52ec:	68fb      	ldr	r3, [r7, #12]
    52ee:	3204      	adds	r2, #4
    52f0:	6879      	ldr	r1, [r7, #4]
    52f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    52f6:	bf00      	nop
    52f8:	3714      	adds	r7, #20
    52fa:	46bd      	mov	sp, r7
    52fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5300:	4770      	bx	lr
	...

00005304 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    5304:	b580      	push	{r7, lr}
    5306:	b082      	sub	sp, #8
    5308:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    530a:	2300      	movs	r3, #0
    530c:	71fb      	strb	r3, [r7, #7]
    530e:	e00b      	b.n	5328 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5310:	79fb      	ldrb	r3, [r7, #7]
    5312:	4a18      	ldr	r2, [pc, #96]	; (5374 <_event_system_init+0x70>)
    5314:	5cd3      	ldrb	r3, [r2, r3]
    5316:	461a      	mov	r2, r3
    5318:	79fb      	ldrb	r3, [r7, #7]
    531a:	4619      	mov	r1, r3
    531c:	4816      	ldr	r0, [pc, #88]	; (5378 <_event_system_init+0x74>)
    531e:	4b17      	ldr	r3, [pc, #92]	; (537c <_event_system_init+0x78>)
    5320:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    5322:	79fb      	ldrb	r3, [r7, #7]
    5324:	3301      	adds	r3, #1
    5326:	71fb      	strb	r3, [r7, #7]
    5328:	79fb      	ldrb	r3, [r7, #7]
    532a:	2b42      	cmp	r3, #66	; 0x42
    532c:	d9f0      	bls.n	5310 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    532e:	2300      	movs	r3, #0
    5330:	71fb      	strb	r3, [r7, #7]
    5332:	e016      	b.n	5362 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5334:	79fb      	ldrb	r3, [r7, #7]
    5336:	4a12      	ldr	r2, [pc, #72]	; (5380 <_event_system_init+0x7c>)
    5338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    533c:	461a      	mov	r2, r3
    533e:	79fb      	ldrb	r3, [r7, #7]
    5340:	4619      	mov	r1, r3
    5342:	480d      	ldr	r0, [pc, #52]	; (5378 <_event_system_init+0x74>)
    5344:	4b0f      	ldr	r3, [pc, #60]	; (5384 <_event_system_init+0x80>)
    5346:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5348:	79fb      	ldrb	r3, [r7, #7]
    534a:	4a0f      	ldr	r2, [pc, #60]	; (5388 <_event_system_init+0x84>)
    534c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5350:	b2da      	uxtb	r2, r3
    5352:	79fb      	ldrb	r3, [r7, #7]
    5354:	4619      	mov	r1, r3
    5356:	4808      	ldr	r0, [pc, #32]	; (5378 <_event_system_init+0x74>)
    5358:	4b0c      	ldr	r3, [pc, #48]	; (538c <_event_system_init+0x88>)
    535a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    535c:	79fb      	ldrb	r3, [r7, #7]
    535e:	3301      	adds	r3, #1
    5360:	71fb      	strb	r3, [r7, #7]
    5362:	79fb      	ldrb	r3, [r7, #7]
    5364:	2b1f      	cmp	r3, #31
    5366:	d9e5      	bls.n	5334 <_event_system_init+0x30>
	}

	return ERR_NONE;
    5368:	2300      	movs	r3, #0
}
    536a:	4618      	mov	r0, r3
    536c:	3708      	adds	r7, #8
    536e:	46bd      	mov	sp, r7
    5370:	bd80      	pop	{r7, pc}
    5372:	bf00      	nop
    5374:	0001145c 	.word	0x0001145c
    5378:	4100e000 	.word	0x4100e000
    537c:	00005279 	.word	0x00005279
    5380:	000114a0 	.word	0x000114a0
    5384:	000052dd 	.word	0x000052dd
    5388:	000114e0 	.word	0x000114e0
    538c:	0000529f 	.word	0x0000529f

00005390 <hri_gclk_wait_for_sync>:
{
    5390:	b480      	push	{r7}
    5392:	b083      	sub	sp, #12
    5394:	af00      	add	r7, sp, #0
    5396:	6078      	str	r0, [r7, #4]
    5398:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    539a:	bf00      	nop
    539c:	687b      	ldr	r3, [r7, #4]
    539e:	685a      	ldr	r2, [r3, #4]
    53a0:	683b      	ldr	r3, [r7, #0]
    53a2:	4013      	ands	r3, r2
    53a4:	2b00      	cmp	r3, #0
    53a6:	d1f9      	bne.n	539c <hri_gclk_wait_for_sync+0xc>
}
    53a8:	bf00      	nop
    53aa:	370c      	adds	r7, #12
    53ac:	46bd      	mov	sp, r7
    53ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    53b2:	4770      	bx	lr

000053b4 <hri_gclk_write_GENCTRL_reg>:
{
    53b4:	b580      	push	{r7, lr}
    53b6:	b084      	sub	sp, #16
    53b8:	af00      	add	r7, sp, #0
    53ba:	60f8      	str	r0, [r7, #12]
    53bc:	460b      	mov	r3, r1
    53be:	607a      	str	r2, [r7, #4]
    53c0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    53c2:	7afa      	ldrb	r2, [r7, #11]
    53c4:	68fb      	ldr	r3, [r7, #12]
    53c6:	3208      	adds	r2, #8
    53c8:	6879      	ldr	r1, [r7, #4]
    53ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    53ce:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    53d2:	68f8      	ldr	r0, [r7, #12]
    53d4:	4b02      	ldr	r3, [pc, #8]	; (53e0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    53d6:	4798      	blx	r3
}
    53d8:	bf00      	nop
    53da:	3710      	adds	r7, #16
    53dc:	46bd      	mov	sp, r7
    53de:	bd80      	pop	{r7, pc}
    53e0:	00005391 	.word	0x00005391

000053e4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    53e4:	b580      	push	{r7, lr}
    53e6:	b082      	sub	sp, #8
    53e8:	af00      	add	r7, sp, #0
    53ea:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    53ec:	687b      	ldr	r3, [r7, #4]
    53ee:	f003 0301 	and.w	r3, r3, #1
    53f2:	2b00      	cmp	r3, #0
    53f4:	d004      	beq.n	5400 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    53f6:	4a36      	ldr	r2, [pc, #216]	; (54d0 <_gclk_init_generators_by_fref+0xec>)
    53f8:	2100      	movs	r1, #0
    53fa:	4836      	ldr	r0, [pc, #216]	; (54d4 <_gclk_init_generators_by_fref+0xf0>)
    53fc:	4b36      	ldr	r3, [pc, #216]	; (54d8 <_gclk_init_generators_by_fref+0xf4>)
    53fe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5400:	687b      	ldr	r3, [r7, #4]
    5402:	f003 0302 	and.w	r3, r3, #2
    5406:	2b00      	cmp	r3, #0
    5408:	d004      	beq.n	5414 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    540a:	4a34      	ldr	r2, [pc, #208]	; (54dc <_gclk_init_generators_by_fref+0xf8>)
    540c:	2101      	movs	r1, #1
    540e:	4831      	ldr	r0, [pc, #196]	; (54d4 <_gclk_init_generators_by_fref+0xf0>)
    5410:	4b31      	ldr	r3, [pc, #196]	; (54d8 <_gclk_init_generators_by_fref+0xf4>)
    5412:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	f003 0304 	and.w	r3, r3, #4
    541a:	2b00      	cmp	r3, #0
    541c:	d004      	beq.n	5428 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    541e:	4a30      	ldr	r2, [pc, #192]	; (54e0 <_gclk_init_generators_by_fref+0xfc>)
    5420:	2102      	movs	r1, #2
    5422:	482c      	ldr	r0, [pc, #176]	; (54d4 <_gclk_init_generators_by_fref+0xf0>)
    5424:	4b2c      	ldr	r3, [pc, #176]	; (54d8 <_gclk_init_generators_by_fref+0xf4>)
    5426:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5428:	687b      	ldr	r3, [r7, #4]
    542a:	f003 0308 	and.w	r3, r3, #8
    542e:	2b00      	cmp	r3, #0
    5430:	d004      	beq.n	543c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    5432:	4a2c      	ldr	r2, [pc, #176]	; (54e4 <_gclk_init_generators_by_fref+0x100>)
    5434:	2103      	movs	r1, #3
    5436:	4827      	ldr	r0, [pc, #156]	; (54d4 <_gclk_init_generators_by_fref+0xf0>)
    5438:	4b27      	ldr	r3, [pc, #156]	; (54d8 <_gclk_init_generators_by_fref+0xf4>)
    543a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    543c:	687b      	ldr	r3, [r7, #4]
    543e:	f003 0310 	and.w	r3, r3, #16
    5442:	2b00      	cmp	r3, #0
    5444:	d004      	beq.n	5450 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    5446:	4a28      	ldr	r2, [pc, #160]	; (54e8 <_gclk_init_generators_by_fref+0x104>)
    5448:	2104      	movs	r1, #4
    544a:	4822      	ldr	r0, [pc, #136]	; (54d4 <_gclk_init_generators_by_fref+0xf0>)
    544c:	4b22      	ldr	r3, [pc, #136]	; (54d8 <_gclk_init_generators_by_fref+0xf4>)
    544e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    5450:	687b      	ldr	r3, [r7, #4]
    5452:	f003 0320 	and.w	r3, r3, #32
    5456:	2b00      	cmp	r3, #0
    5458:	d004      	beq.n	5464 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    545a:	4a24      	ldr	r2, [pc, #144]	; (54ec <_gclk_init_generators_by_fref+0x108>)
    545c:	2105      	movs	r1, #5
    545e:	481d      	ldr	r0, [pc, #116]	; (54d4 <_gclk_init_generators_by_fref+0xf0>)
    5460:	4b1d      	ldr	r3, [pc, #116]	; (54d8 <_gclk_init_generators_by_fref+0xf4>)
    5462:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    5464:	687b      	ldr	r3, [r7, #4]
    5466:	f003 0340 	and.w	r3, r3, #64	; 0x40
    546a:	2b00      	cmp	r3, #0
    546c:	d004      	beq.n	5478 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    546e:	4a20      	ldr	r2, [pc, #128]	; (54f0 <_gclk_init_generators_by_fref+0x10c>)
    5470:	2106      	movs	r1, #6
    5472:	4818      	ldr	r0, [pc, #96]	; (54d4 <_gclk_init_generators_by_fref+0xf0>)
    5474:	4b18      	ldr	r3, [pc, #96]	; (54d8 <_gclk_init_generators_by_fref+0xf4>)
    5476:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    5478:	687b      	ldr	r3, [r7, #4]
    547a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    547e:	2b00      	cmp	r3, #0
    5480:	d004      	beq.n	548c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    5482:	4a1c      	ldr	r2, [pc, #112]	; (54f4 <_gclk_init_generators_by_fref+0x110>)
    5484:	2107      	movs	r1, #7
    5486:	4813      	ldr	r0, [pc, #76]	; (54d4 <_gclk_init_generators_by_fref+0xf0>)
    5488:	4b13      	ldr	r3, [pc, #76]	; (54d8 <_gclk_init_generators_by_fref+0xf4>)
    548a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    548c:	687b      	ldr	r3, [r7, #4]
    548e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5492:	2b00      	cmp	r3, #0
    5494:	d004      	beq.n	54a0 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    5496:	4a18      	ldr	r2, [pc, #96]	; (54f8 <_gclk_init_generators_by_fref+0x114>)
    5498:	2108      	movs	r1, #8
    549a:	480e      	ldr	r0, [pc, #56]	; (54d4 <_gclk_init_generators_by_fref+0xf0>)
    549c:	4b0e      	ldr	r3, [pc, #56]	; (54d8 <_gclk_init_generators_by_fref+0xf4>)
    549e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    54a0:	687b      	ldr	r3, [r7, #4]
    54a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    54a6:	2b00      	cmp	r3, #0
    54a8:	d004      	beq.n	54b4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    54aa:	4a14      	ldr	r2, [pc, #80]	; (54fc <_gclk_init_generators_by_fref+0x118>)
    54ac:	210a      	movs	r1, #10
    54ae:	4809      	ldr	r0, [pc, #36]	; (54d4 <_gclk_init_generators_by_fref+0xf0>)
    54b0:	4b09      	ldr	r3, [pc, #36]	; (54d8 <_gclk_init_generators_by_fref+0xf4>)
    54b2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    54b4:	687b      	ldr	r3, [r7, #4]
    54b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    54ba:	2b00      	cmp	r3, #0
    54bc:	d004      	beq.n	54c8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    54be:	4a10      	ldr	r2, [pc, #64]	; (5500 <_gclk_init_generators_by_fref+0x11c>)
    54c0:	210b      	movs	r1, #11
    54c2:	4804      	ldr	r0, [pc, #16]	; (54d4 <_gclk_init_generators_by_fref+0xf0>)
    54c4:	4b04      	ldr	r3, [pc, #16]	; (54d8 <_gclk_init_generators_by_fref+0xf4>)
    54c6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    54c8:	bf00      	nop
    54ca:	3708      	adds	r7, #8
    54cc:	46bd      	mov	sp, r7
    54ce:	bd80      	pop	{r7, pc}
    54d0:	00010107 	.word	0x00010107
    54d4:	40001c00 	.word	0x40001c00
    54d8:	000053b5 	.word	0x000053b5
    54dc:	00010907 	.word	0x00010907
    54e0:	00010906 	.word	0x00010906
    54e4:	00020908 	.word	0x00020908
    54e8:	00010901 	.word	0x00010901
    54ec:	00062901 	.word	0x00062901
    54f0:	000c2901 	.word	0x000c2901
    54f4:	00082908 	.word	0x00082908
    54f8:	00032901 	.word	0x00032901
    54fc:	00010905 	.word	0x00010905
    5500:	00041905 	.word	0x00041905

00005504 <hri_mclk_write_CPUDIV_reg>:
{
    5504:	b480      	push	{r7}
    5506:	b083      	sub	sp, #12
    5508:	af00      	add	r7, sp, #0
    550a:	6078      	str	r0, [r7, #4]
    550c:	460b      	mov	r3, r1
    550e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5510:	687b      	ldr	r3, [r7, #4]
    5512:	78fa      	ldrb	r2, [r7, #3]
    5514:	715a      	strb	r2, [r3, #5]
}
    5516:	bf00      	nop
    5518:	370c      	adds	r7, #12
    551a:	46bd      	mov	sp, r7
    551c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5520:	4770      	bx	lr
	...

00005524 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    5524:	b580      	push	{r7, lr}
    5526:	b082      	sub	sp, #8
    5528:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    552a:	4b05      	ldr	r3, [pc, #20]	; (5540 <_mclk_init+0x1c>)
    552c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    552e:	2101      	movs	r1, #1
    5530:	6878      	ldr	r0, [r7, #4]
    5532:	4b04      	ldr	r3, [pc, #16]	; (5544 <_mclk_init+0x20>)
    5534:	4798      	blx	r3
}
    5536:	bf00      	nop
    5538:	3708      	adds	r7, #8
    553a:	46bd      	mov	sp, r7
    553c:	bd80      	pop	{r7, pc}
    553e:	bf00      	nop
    5540:	40000800 	.word	0x40000800
    5544:	00005505 	.word	0x00005505

00005548 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    5548:	b480      	push	{r7}
    554a:	b083      	sub	sp, #12
    554c:	af00      	add	r7, sp, #0
    554e:	6078      	str	r0, [r7, #4]
    5550:	460b      	mov	r3, r1
    5552:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5554:	687b      	ldr	r3, [r7, #4]
    5556:	78fa      	ldrb	r2, [r7, #3]
    5558:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    555a:	bf00      	nop
    555c:	370c      	adds	r7, #12
    555e:	46bd      	mov	sp, r7
    5560:	f85d 7b04 	ldr.w	r7, [sp], #4
    5564:	4770      	bx	lr

00005566 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    5566:	b480      	push	{r7}
    5568:	b083      	sub	sp, #12
    556a:	af00      	add	r7, sp, #0
    556c:	6078      	str	r0, [r7, #4]
    556e:	460b      	mov	r3, r1
    5570:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    5572:	687b      	ldr	r3, [r7, #4]
    5574:	887a      	ldrh	r2, [r7, #2]
    5576:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5578:	bf00      	nop
    557a:	370c      	adds	r7, #12
    557c:	46bd      	mov	sp, r7
    557e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5582:	4770      	bx	lr

00005584 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    5584:	b480      	push	{r7}
    5586:	b083      	sub	sp, #12
    5588:	af00      	add	r7, sp, #0
    558a:	6078      	str	r0, [r7, #4]
    558c:	460b      	mov	r3, r1
    558e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5590:	687b      	ldr	r3, [r7, #4]
    5592:	78fa      	ldrb	r2, [r7, #3]
    5594:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5596:	bf00      	nop
    5598:	370c      	adds	r7, #12
    559a:	46bd      	mov	sp, r7
    559c:	f85d 7b04 	ldr.w	r7, [sp], #4
    55a0:	4770      	bx	lr

000055a2 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    55a2:	b480      	push	{r7}
    55a4:	b083      	sub	sp, #12
    55a6:	af00      	add	r7, sp, #0
    55a8:	6078      	str	r0, [r7, #4]
    55aa:	460b      	mov	r3, r1
    55ac:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    55ae:	687b      	ldr	r3, [r7, #4]
    55b0:	78fa      	ldrb	r2, [r7, #3]
    55b2:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    55b4:	bf00      	nop
    55b6:	370c      	adds	r7, #12
    55b8:	46bd      	mov	sp, r7
    55ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    55be:	4770      	bx	lr

000055c0 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    55c0:	b480      	push	{r7}
    55c2:	b085      	sub	sp, #20
    55c4:	af00      	add	r7, sp, #0
    55c6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	69db      	ldr	r3, [r3, #28]
    55cc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    55ce:	68fb      	ldr	r3, [r7, #12]
    55d0:	0a1b      	lsrs	r3, r3, #8
    55d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    55d6:	60fb      	str	r3, [r7, #12]
	return tmp;
    55d8:	68fb      	ldr	r3, [r7, #12]
}
    55da:	4618      	mov	r0, r3
    55dc:	3714      	adds	r7, #20
    55de:	46bd      	mov	sp, r7
    55e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    55e4:	4770      	bx	lr

000055e6 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    55e6:	b480      	push	{r7}
    55e8:	b083      	sub	sp, #12
    55ea:	af00      	add	r7, sp, #0
    55ec:	6078      	str	r0, [r7, #4]
    55ee:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    55f0:	687b      	ldr	r3, [r7, #4]
    55f2:	683a      	ldr	r2, [r7, #0]
    55f4:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    55f6:	bf00      	nop
    55f8:	370c      	adds	r7, #12
    55fa:	46bd      	mov	sp, r7
    55fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5600:	4770      	bx	lr
	...

00005604 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    5604:	b580      	push	{r7, lr}
    5606:	b082      	sub	sp, #8
    5608:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    560a:	4b13      	ldr	r3, [pc, #76]	; (5658 <_osc32kctrl_init_sources+0x54>)
    560c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    560e:	2300      	movs	r3, #0
    5610:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    5612:	f242 018e 	movw	r1, #8334	; 0x208e
    5616:	6878      	ldr	r0, [r7, #4]
    5618:	4b10      	ldr	r3, [pc, #64]	; (565c <_osc32kctrl_init_sources+0x58>)
    561a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    561c:	2100      	movs	r1, #0
    561e:	6878      	ldr	r0, [r7, #4]
    5620:	4b0f      	ldr	r3, [pc, #60]	; (5660 <_osc32kctrl_init_sources+0x5c>)
    5622:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    5624:	2100      	movs	r1, #0
    5626:	6878      	ldr	r0, [r7, #4]
    5628:	4b0e      	ldr	r3, [pc, #56]	; (5664 <_osc32kctrl_init_sources+0x60>)
    562a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    562c:	6878      	ldr	r0, [r7, #4]
    562e:	4b0e      	ldr	r3, [pc, #56]	; (5668 <_osc32kctrl_init_sources+0x64>)
    5630:	4798      	blx	r3
    5632:	4603      	mov	r3, r0
    5634:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5636:	887b      	ldrh	r3, [r7, #2]
    5638:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    563a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    563e:	4619      	mov	r1, r3
    5640:	6878      	ldr	r0, [r7, #4]
    5642:	4b0a      	ldr	r3, [pc, #40]	; (566c <_osc32kctrl_init_sources+0x68>)
    5644:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    5646:	2100      	movs	r1, #0
    5648:	6878      	ldr	r0, [r7, #4]
    564a:	4b09      	ldr	r3, [pc, #36]	; (5670 <_osc32kctrl_init_sources+0x6c>)
    564c:	4798      	blx	r3
	(void)calib;
}
    564e:	bf00      	nop
    5650:	3708      	adds	r7, #8
    5652:	46bd      	mov	sp, r7
    5654:	bd80      	pop	{r7, pc}
    5656:	bf00      	nop
    5658:	40001400 	.word	0x40001400
    565c:	00005567 	.word	0x00005567
    5660:	00005585 	.word	0x00005585
    5664:	000055a3 	.word	0x000055a3
    5668:	000055c1 	.word	0x000055c1
    566c:	000055e7 	.word	0x000055e7
    5670:	00005549 	.word	0x00005549

00005674 <hri_gclk_wait_for_sync>:
{
    5674:	b480      	push	{r7}
    5676:	b083      	sub	sp, #12
    5678:	af00      	add	r7, sp, #0
    567a:	6078      	str	r0, [r7, #4]
    567c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    567e:	bf00      	nop
    5680:	687b      	ldr	r3, [r7, #4]
    5682:	685a      	ldr	r2, [r3, #4]
    5684:	683b      	ldr	r3, [r7, #0]
    5686:	4013      	ands	r3, r2
    5688:	2b00      	cmp	r3, #0
    568a:	d1f9      	bne.n	5680 <hri_gclk_wait_for_sync+0xc>
}
    568c:	bf00      	nop
    568e:	370c      	adds	r7, #12
    5690:	46bd      	mov	sp, r7
    5692:	f85d 7b04 	ldr.w	r7, [sp], #4
    5696:	4770      	bx	lr

00005698 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5698:	b480      	push	{r7}
    569a:	b083      	sub	sp, #12
    569c:	af00      	add	r7, sp, #0
    569e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	685b      	ldr	r3, [r3, #4]
    56a4:	089b      	lsrs	r3, r3, #2
    56a6:	f003 0301 	and.w	r3, r3, #1
    56aa:	2b00      	cmp	r3, #0
    56ac:	bf14      	ite	ne
    56ae:	2301      	movne	r3, #1
    56b0:	2300      	moveq	r3, #0
    56b2:	b2db      	uxtb	r3, r3
}
    56b4:	4618      	mov	r0, r3
    56b6:	370c      	adds	r7, #12
    56b8:	46bd      	mov	sp, r7
    56ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    56be:	4770      	bx	lr

000056c0 <hri_gclk_read_SYNCBUSY_reg>:
{
    56c0:	b480      	push	{r7}
    56c2:	b083      	sub	sp, #12
    56c4:	af00      	add	r7, sp, #0
    56c6:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    56c8:	687b      	ldr	r3, [r7, #4]
    56ca:	685b      	ldr	r3, [r3, #4]
}
    56cc:	4618      	mov	r0, r3
    56ce:	370c      	adds	r7, #12
    56d0:	46bd      	mov	sp, r7
    56d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    56d6:	4770      	bx	lr

000056d8 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    56d8:	b580      	push	{r7, lr}
    56da:	b086      	sub	sp, #24
    56dc:	af00      	add	r7, sp, #0
    56de:	60f8      	str	r0, [r7, #12]
    56e0:	460b      	mov	r3, r1
    56e2:	607a      	str	r2, [r7, #4]
    56e4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    56e6:	7afa      	ldrb	r2, [r7, #11]
    56e8:	68fb      	ldr	r3, [r7, #12]
    56ea:	3208      	adds	r2, #8
    56ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    56f0:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    56f2:	697b      	ldr	r3, [r7, #20]
    56f4:	f023 030f 	bic.w	r3, r3, #15
    56f8:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    56fa:	687b      	ldr	r3, [r7, #4]
    56fc:	f003 030f 	and.w	r3, r3, #15
    5700:	697a      	ldr	r2, [r7, #20]
    5702:	4313      	orrs	r3, r2
    5704:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5706:	7afa      	ldrb	r2, [r7, #11]
    5708:	68fb      	ldr	r3, [r7, #12]
    570a:	3208      	adds	r2, #8
    570c:	6979      	ldr	r1, [r7, #20]
    570e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5712:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5716:	68f8      	ldr	r0, [r7, #12]
    5718:	4b02      	ldr	r3, [pc, #8]	; (5724 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    571a:	4798      	blx	r3
}
    571c:	bf00      	nop
    571e:	3718      	adds	r7, #24
    5720:	46bd      	mov	sp, r7
    5722:	bd80      	pop	{r7, pc}
    5724:	00005675 	.word	0x00005675

00005728 <hri_gclk_write_PCHCTRL_reg>:
{
    5728:	b480      	push	{r7}
    572a:	b085      	sub	sp, #20
    572c:	af00      	add	r7, sp, #0
    572e:	60f8      	str	r0, [r7, #12]
    5730:	460b      	mov	r3, r1
    5732:	607a      	str	r2, [r7, #4]
    5734:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5736:	7afa      	ldrb	r2, [r7, #11]
    5738:	68fb      	ldr	r3, [r7, #12]
    573a:	3220      	adds	r2, #32
    573c:	6879      	ldr	r1, [r7, #4]
    573e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5742:	bf00      	nop
    5744:	3714      	adds	r7, #20
    5746:	46bd      	mov	sp, r7
    5748:	f85d 7b04 	ldr.w	r7, [sp], #4
    574c:	4770      	bx	lr

0000574e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    574e:	b480      	push	{r7}
    5750:	b085      	sub	sp, #20
    5752:	af00      	add	r7, sp, #0
    5754:	60f8      	str	r0, [r7, #12]
    5756:	460b      	mov	r3, r1
    5758:	607a      	str	r2, [r7, #4]
    575a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    575c:	bf00      	nop
    575e:	7afa      	ldrb	r2, [r7, #11]
    5760:	68f9      	ldr	r1, [r7, #12]
    5762:	4613      	mov	r3, r2
    5764:	009b      	lsls	r3, r3, #2
    5766:	4413      	add	r3, r2
    5768:	009b      	lsls	r3, r3, #2
    576a:	440b      	add	r3, r1
    576c:	333c      	adds	r3, #60	; 0x3c
    576e:	681a      	ldr	r2, [r3, #0]
    5770:	687b      	ldr	r3, [r7, #4]
    5772:	4013      	ands	r3, r2
    5774:	2b00      	cmp	r3, #0
    5776:	d1f2      	bne.n	575e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5778:	bf00      	nop
    577a:	3714      	adds	r7, #20
    577c:	46bd      	mov	sp, r7
    577e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5782:	4770      	bx	lr

00005784 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    5784:	b480      	push	{r7}
    5786:	b083      	sub	sp, #12
    5788:	af00      	add	r7, sp, #0
    578a:	6078      	str	r0, [r7, #4]
    578c:	460b      	mov	r3, r1
    578e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5790:	78fa      	ldrb	r2, [r7, #3]
    5792:	6879      	ldr	r1, [r7, #4]
    5794:	4613      	mov	r3, r2
    5796:	009b      	lsls	r3, r3, #2
    5798:	4413      	add	r3, r2
    579a:	009b      	lsls	r3, r3, #2
    579c:	440b      	add	r3, r1
    579e:	3340      	adds	r3, #64	; 0x40
    57a0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    57a2:	f003 0301 	and.w	r3, r3, #1
    57a6:	2b00      	cmp	r3, #0
    57a8:	bf14      	ite	ne
    57aa:	2301      	movne	r3, #1
    57ac:	2300      	moveq	r3, #0
    57ae:	b2db      	uxtb	r3, r3
}
    57b0:	4618      	mov	r0, r3
    57b2:	370c      	adds	r7, #12
    57b4:	46bd      	mov	sp, r7
    57b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ba:	4770      	bx	lr

000057bc <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    57bc:	b480      	push	{r7}
    57be:	b083      	sub	sp, #12
    57c0:	af00      	add	r7, sp, #0
    57c2:	6078      	str	r0, [r7, #4]
    57c4:	460b      	mov	r3, r1
    57c6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    57c8:	78fa      	ldrb	r2, [r7, #3]
    57ca:	6879      	ldr	r1, [r7, #4]
    57cc:	4613      	mov	r3, r2
    57ce:	009b      	lsls	r3, r3, #2
    57d0:	4413      	add	r3, r2
    57d2:	009b      	lsls	r3, r3, #2
    57d4:	440b      	add	r3, r1
    57d6:	3340      	adds	r3, #64	; 0x40
    57d8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    57da:	085b      	lsrs	r3, r3, #1
    57dc:	f003 0301 	and.w	r3, r3, #1
    57e0:	2b00      	cmp	r3, #0
    57e2:	bf14      	ite	ne
    57e4:	2301      	movne	r3, #1
    57e6:	2300      	moveq	r3, #0
    57e8:	b2db      	uxtb	r3, r3
}
    57ea:	4618      	mov	r0, r3
    57ec:	370c      	adds	r7, #12
    57ee:	46bd      	mov	sp, r7
    57f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    57f4:	4770      	bx	lr
	...

000057f8 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    57f8:	b580      	push	{r7, lr}
    57fa:	b082      	sub	sp, #8
    57fc:	af00      	add	r7, sp, #0
    57fe:	6078      	str	r0, [r7, #4]
    5800:	460b      	mov	r3, r1
    5802:	70fb      	strb	r3, [r7, #3]
    5804:	4613      	mov	r3, r2
    5806:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5808:	78fa      	ldrb	r2, [r7, #3]
    580a:	6879      	ldr	r1, [r7, #4]
    580c:	4613      	mov	r3, r2
    580e:	009b      	lsls	r3, r3, #2
    5810:	4413      	add	r3, r2
    5812:	009b      	lsls	r3, r3, #2
    5814:	440b      	add	r3, r1
    5816:	3330      	adds	r3, #48	; 0x30
    5818:	78ba      	ldrb	r2, [r7, #2]
    581a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    581c:	78fb      	ldrb	r3, [r7, #3]
    581e:	2202      	movs	r2, #2
    5820:	4619      	mov	r1, r3
    5822:	6878      	ldr	r0, [r7, #4]
    5824:	4b02      	ldr	r3, [pc, #8]	; (5830 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5826:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5828:	bf00      	nop
    582a:	3708      	adds	r7, #8
    582c:	46bd      	mov	sp, r7
    582e:	bd80      	pop	{r7, pc}
    5830:	0000574f 	.word	0x0000574f

00005834 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5834:	b580      	push	{r7, lr}
    5836:	b084      	sub	sp, #16
    5838:	af00      	add	r7, sp, #0
    583a:	60f8      	str	r0, [r7, #12]
    583c:	460b      	mov	r3, r1
    583e:	607a      	str	r2, [r7, #4]
    5840:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5842:	7afa      	ldrb	r2, [r7, #11]
    5844:	68f9      	ldr	r1, [r7, #12]
    5846:	4613      	mov	r3, r2
    5848:	009b      	lsls	r3, r3, #2
    584a:	4413      	add	r3, r2
    584c:	009b      	lsls	r3, r3, #2
    584e:	440b      	add	r3, r1
    5850:	3334      	adds	r3, #52	; 0x34
    5852:	687a      	ldr	r2, [r7, #4]
    5854:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5856:	7afb      	ldrb	r3, [r7, #11]
    5858:	2206      	movs	r2, #6
    585a:	4619      	mov	r1, r3
    585c:	68f8      	ldr	r0, [r7, #12]
    585e:	4b03      	ldr	r3, [pc, #12]	; (586c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5860:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5862:	bf00      	nop
    5864:	3710      	adds	r7, #16
    5866:	46bd      	mov	sp, r7
    5868:	bd80      	pop	{r7, pc}
    586a:	bf00      	nop
    586c:	0000574f 	.word	0x0000574f

00005870 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5870:	b480      	push	{r7}
    5872:	b085      	sub	sp, #20
    5874:	af00      	add	r7, sp, #0
    5876:	60f8      	str	r0, [r7, #12]
    5878:	460b      	mov	r3, r1
    587a:	607a      	str	r2, [r7, #4]
    587c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    587e:	7afa      	ldrb	r2, [r7, #11]
    5880:	68f9      	ldr	r1, [r7, #12]
    5882:	4613      	mov	r3, r2
    5884:	009b      	lsls	r3, r3, #2
    5886:	4413      	add	r3, r2
    5888:	009b      	lsls	r3, r3, #2
    588a:	440b      	add	r3, r1
    588c:	3338      	adds	r3, #56	; 0x38
    588e:	687a      	ldr	r2, [r7, #4]
    5890:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5892:	bf00      	nop
    5894:	3714      	adds	r7, #20
    5896:	46bd      	mov	sp, r7
    5898:	f85d 7b04 	ldr.w	r7, [sp], #4
    589c:	4770      	bx	lr

0000589e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    589e:	b480      	push	{r7}
    58a0:	b083      	sub	sp, #12
    58a2:	af00      	add	r7, sp, #0
    58a4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	691b      	ldr	r3, [r3, #16]
    58aa:	085b      	lsrs	r3, r3, #1
    58ac:	f003 0301 	and.w	r3, r3, #1
    58b0:	2b00      	cmp	r3, #0
    58b2:	bf14      	ite	ne
    58b4:	2301      	movne	r3, #1
    58b6:	2300      	moveq	r3, #0
    58b8:	b2db      	uxtb	r3, r3
}
    58ba:	4618      	mov	r0, r3
    58bc:	370c      	adds	r7, #12
    58be:	46bd      	mov	sp, r7
    58c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    58c4:	4770      	bx	lr

000058c6 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    58c6:	b480      	push	{r7}
    58c8:	b083      	sub	sp, #12
    58ca:	af00      	add	r7, sp, #0
    58cc:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    58ce:	687b      	ldr	r3, [r7, #4]
    58d0:	691b      	ldr	r3, [r3, #16]
    58d2:	0a1b      	lsrs	r3, r3, #8
    58d4:	f003 0301 	and.w	r3, r3, #1
    58d8:	2b00      	cmp	r3, #0
    58da:	bf14      	ite	ne
    58dc:	2301      	movne	r3, #1
    58de:	2300      	moveq	r3, #0
    58e0:	b2db      	uxtb	r3, r3
}
    58e2:	4618      	mov	r0, r3
    58e4:	370c      	adds	r7, #12
    58e6:	46bd      	mov	sp, r7
    58e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ec:	4770      	bx	lr

000058ee <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    58ee:	b480      	push	{r7}
    58f0:	b085      	sub	sp, #20
    58f2:	af00      	add	r7, sp, #0
    58f4:	6078      	str	r0, [r7, #4]
    58f6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    58f8:	687b      	ldr	r3, [r7, #4]
    58fa:	691b      	ldr	r3, [r3, #16]
    58fc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    58fe:	68fa      	ldr	r2, [r7, #12]
    5900:	683b      	ldr	r3, [r7, #0]
    5902:	4013      	ands	r3, r2
    5904:	60fb      	str	r3, [r7, #12]
	return tmp;
    5906:	68fb      	ldr	r3, [r7, #12]
}
    5908:	4618      	mov	r0, r3
    590a:	3714      	adds	r7, #20
    590c:	46bd      	mov	sp, r7
    590e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5912:	4770      	bx	lr

00005914 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5914:	b480      	push	{r7}
    5916:	b085      	sub	sp, #20
    5918:	af00      	add	r7, sp, #0
    591a:	60f8      	str	r0, [r7, #12]
    591c:	460b      	mov	r3, r1
    591e:	607a      	str	r2, [r7, #4]
    5920:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5922:	7afb      	ldrb	r3, [r7, #11]
    5924:	68fa      	ldr	r2, [r7, #12]
    5926:	3304      	adds	r3, #4
    5928:	009b      	lsls	r3, r3, #2
    592a:	4413      	add	r3, r2
    592c:	687a      	ldr	r2, [r7, #4]
    592e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5930:	bf00      	nop
    5932:	3714      	adds	r7, #20
    5934:	46bd      	mov	sp, r7
    5936:	f85d 7b04 	ldr.w	r7, [sp], #4
    593a:	4770      	bx	lr

0000593c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    593c:	b480      	push	{r7}
    593e:	b083      	sub	sp, #12
    5940:	af00      	add	r7, sp, #0
    5942:	6078      	str	r0, [r7, #4]
    5944:	460b      	mov	r3, r1
    5946:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5948:	687b      	ldr	r3, [r7, #4]
    594a:	78fa      	ldrb	r2, [r7, #3]
    594c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    594e:	bf00      	nop
    5950:	370c      	adds	r7, #12
    5952:	46bd      	mov	sp, r7
    5954:	f85d 7b04 	ldr.w	r7, [sp], #4
    5958:	4770      	bx	lr

0000595a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    595a:	b480      	push	{r7}
    595c:	b085      	sub	sp, #20
    595e:	af00      	add	r7, sp, #0
    5960:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5962:	687b      	ldr	r3, [r7, #4]
    5964:	f893 3020 	ldrb.w	r3, [r3, #32]
    5968:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    596a:	7bfb      	ldrb	r3, [r7, #15]
    596c:	f003 0301 	and.w	r3, r3, #1
    5970:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5972:	7bfb      	ldrb	r3, [r7, #15]
    5974:	2b00      	cmp	r3, #0
    5976:	bf14      	ite	ne
    5978:	2301      	movne	r3, #1
    597a:	2300      	moveq	r3, #0
    597c:	b2db      	uxtb	r3, r3
}
    597e:	4618      	mov	r0, r3
    5980:	3714      	adds	r7, #20
    5982:	46bd      	mov	sp, r7
    5984:	f85d 7b04 	ldr.w	r7, [sp], #4
    5988:	4770      	bx	lr

0000598a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    598a:	b480      	push	{r7}
    598c:	b083      	sub	sp, #12
    598e:	af00      	add	r7, sp, #0
    5990:	6078      	str	r0, [r7, #4]
    5992:	460b      	mov	r3, r1
    5994:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	78fa      	ldrb	r2, [r7, #3]
    599a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    599e:	bf00      	nop
    59a0:	370c      	adds	r7, #12
    59a2:	46bd      	mov	sp, r7
    59a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59a8:	4770      	bx	lr

000059aa <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    59aa:	b480      	push	{r7}
    59ac:	b083      	sub	sp, #12
    59ae:	af00      	add	r7, sp, #0
    59b0:	6078      	str	r0, [r7, #4]
    59b2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    59b4:	687b      	ldr	r3, [r7, #4]
    59b6:	683a      	ldr	r2, [r7, #0]
    59b8:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    59ba:	bf00      	nop
    59bc:	370c      	adds	r7, #12
    59be:	46bd      	mov	sp, r7
    59c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59c4:	4770      	bx	lr

000059c6 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    59c6:	b480      	push	{r7}
    59c8:	b083      	sub	sp, #12
    59ca:	af00      	add	r7, sp, #0
    59cc:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    59ce:	687b      	ldr	r3, [r7, #4]
    59d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    59d2:	4618      	mov	r0, r3
    59d4:	370c      	adds	r7, #12
    59d6:	46bd      	mov	sp, r7
    59d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    59dc:	4770      	bx	lr

000059de <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    59de:	b480      	push	{r7}
    59e0:	b083      	sub	sp, #12
    59e2:	af00      	add	r7, sp, #0
    59e4:	6078      	str	r0, [r7, #4]
    59e6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	683a      	ldr	r2, [r7, #0]
    59ec:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    59ee:	bf00      	nop
    59f0:	370c      	adds	r7, #12
    59f2:	46bd      	mov	sp, r7
    59f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59f8:	4770      	bx	lr

000059fa <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    59fa:	b480      	push	{r7}
    59fc:	b085      	sub	sp, #20
    59fe:	af00      	add	r7, sp, #0
    5a00:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5a02:	687b      	ldr	r3, [r7, #4]
    5a04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5a08:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5a0a:	7bfb      	ldrb	r3, [r7, #15]
    5a0c:	085b      	lsrs	r3, r3, #1
    5a0e:	b2db      	uxtb	r3, r3
    5a10:	f003 0301 	and.w	r3, r3, #1
    5a14:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5a16:	7bfb      	ldrb	r3, [r7, #15]
    5a18:	2b00      	cmp	r3, #0
    5a1a:	bf14      	ite	ne
    5a1c:	2301      	movne	r3, #1
    5a1e:	2300      	moveq	r3, #0
    5a20:	b2db      	uxtb	r3, r3
}
    5a22:	4618      	mov	r0, r3
    5a24:	3714      	adds	r7, #20
    5a26:	46bd      	mov	sp, r7
    5a28:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a2c:	4770      	bx	lr

00005a2e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    5a2e:	b480      	push	{r7}
    5a30:	b085      	sub	sp, #20
    5a32:	af00      	add	r7, sp, #0
    5a34:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5a36:	687b      	ldr	r3, [r7, #4]
    5a38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5a3c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5a3e:	7bfb      	ldrb	r3, [r7, #15]
    5a40:	089b      	lsrs	r3, r3, #2
    5a42:	b2db      	uxtb	r3, r3
    5a44:	f003 0301 	and.w	r3, r3, #1
    5a48:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5a4a:	7bfb      	ldrb	r3, [r7, #15]
    5a4c:	2b00      	cmp	r3, #0
    5a4e:	bf14      	ite	ne
    5a50:	2301      	movne	r3, #1
    5a52:	2300      	moveq	r3, #0
    5a54:	b2db      	uxtb	r3, r3
}
    5a56:	4618      	mov	r0, r3
    5a58:	3714      	adds	r7, #20
    5a5a:	46bd      	mov	sp, r7
    5a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a60:	4770      	bx	lr

00005a62 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5a62:	b480      	push	{r7}
    5a64:	b085      	sub	sp, #20
    5a66:	af00      	add	r7, sp, #0
    5a68:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5a70:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5a72:	7bfb      	ldrb	r3, [r7, #15]
    5a74:	08db      	lsrs	r3, r3, #3
    5a76:	b2db      	uxtb	r3, r3
    5a78:	f003 0301 	and.w	r3, r3, #1
    5a7c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5a7e:	7bfb      	ldrb	r3, [r7, #15]
    5a80:	2b00      	cmp	r3, #0
    5a82:	bf14      	ite	ne
    5a84:	2301      	movne	r3, #1
    5a86:	2300      	moveq	r3, #0
    5a88:	b2db      	uxtb	r3, r3
}
    5a8a:	4618      	mov	r0, r3
    5a8c:	3714      	adds	r7, #20
    5a8e:	46bd      	mov	sp, r7
    5a90:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a94:	4770      	bx	lr

00005a96 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5a96:	b480      	push	{r7}
    5a98:	b085      	sub	sp, #20
    5a9a:	af00      	add	r7, sp, #0
    5a9c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5a9e:	687b      	ldr	r3, [r7, #4]
    5aa0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5aa4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5aa6:	7bfb      	ldrb	r3, [r7, #15]
    5aa8:	091b      	lsrs	r3, r3, #4
    5aaa:	b2db      	uxtb	r3, r3
    5aac:	f003 0301 	and.w	r3, r3, #1
    5ab0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5ab2:	7bfb      	ldrb	r3, [r7, #15]
    5ab4:	2b00      	cmp	r3, #0
    5ab6:	bf14      	ite	ne
    5ab8:	2301      	movne	r3, #1
    5aba:	2300      	moveq	r3, #0
    5abc:	b2db      	uxtb	r3, r3
}
    5abe:	4618      	mov	r0, r3
    5ac0:	3714      	adds	r7, #20
    5ac2:	46bd      	mov	sp, r7
    5ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ac8:	4770      	bx	lr
	...

00005acc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5acc:	b580      	push	{r7, lr}
    5ace:	b082      	sub	sp, #8
    5ad0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5ad2:	4b0a      	ldr	r3, [pc, #40]	; (5afc <_oscctrl_init_sources+0x30>)
    5ad4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5ad6:	4a0a      	ldr	r2, [pc, #40]	; (5b00 <_oscctrl_init_sources+0x34>)
    5ad8:	2101      	movs	r1, #1
    5ada:	6878      	ldr	r0, [r7, #4]
    5adc:	4b09      	ldr	r3, [pc, #36]	; (5b04 <_oscctrl_init_sources+0x38>)
    5ade:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5ae0:	bf00      	nop
    5ae2:	6878      	ldr	r0, [r7, #4]
    5ae4:	4b08      	ldr	r3, [pc, #32]	; (5b08 <_oscctrl_init_sources+0x3c>)
    5ae6:	4798      	blx	r3
    5ae8:	4603      	mov	r3, r0
    5aea:	f083 0301 	eor.w	r3, r3, #1
    5aee:	b2db      	uxtb	r3, r3
    5af0:	2b00      	cmp	r3, #0
    5af2:	d1f6      	bne.n	5ae2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5af4:	bf00      	nop
    5af6:	3708      	adds	r7, #8
    5af8:	46bd      	mov	sp, r7
    5afa:	bd80      	pop	{r7, pc}
    5afc:	40001000 	.word	0x40001000
    5b00:	03002646 	.word	0x03002646
    5b04:	00005915 	.word	0x00005915
    5b08:	0000589f 	.word	0x0000589f

00005b0c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5b0c:	b580      	push	{r7, lr}
    5b0e:	b084      	sub	sp, #16
    5b10:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5b12:	4b6b      	ldr	r3, [pc, #428]	; (5cc0 <_oscctrl_init_referenced_generators+0x1b4>)
    5b14:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5b16:	2204      	movs	r2, #4
    5b18:	2100      	movs	r1, #0
    5b1a:	486a      	ldr	r0, [pc, #424]	; (5cc4 <_oscctrl_init_referenced_generators+0x1b8>)
    5b1c:	4b6a      	ldr	r3, [pc, #424]	; (5cc8 <_oscctrl_init_referenced_generators+0x1bc>)
    5b1e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5b20:	bf00      	nop
    5b22:	4868      	ldr	r0, [pc, #416]	; (5cc4 <_oscctrl_init_referenced_generators+0x1b8>)
    5b24:	4b69      	ldr	r3, [pc, #420]	; (5ccc <_oscctrl_init_referenced_generators+0x1c0>)
    5b26:	4798      	blx	r3
    5b28:	4603      	mov	r3, r0
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d1f9      	bne.n	5b22 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5b2e:	2100      	movs	r1, #0
    5b30:	68f8      	ldr	r0, [r7, #12]
    5b32:	4b67      	ldr	r3, [pc, #412]	; (5cd0 <_oscctrl_init_referenced_generators+0x1c4>)
    5b34:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5b36:	4967      	ldr	r1, [pc, #412]	; (5cd4 <_oscctrl_init_referenced_generators+0x1c8>)
    5b38:	68f8      	ldr	r0, [r7, #12]
    5b3a:	4b67      	ldr	r3, [pc, #412]	; (5cd8 <_oscctrl_init_referenced_generators+0x1cc>)
    5b3c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5b3e:	bf00      	nop
    5b40:	68f8      	ldr	r0, [r7, #12]
    5b42:	4b66      	ldr	r3, [pc, #408]	; (5cdc <_oscctrl_init_referenced_generators+0x1d0>)
    5b44:	4798      	blx	r3
    5b46:	4603      	mov	r3, r0
    5b48:	2b00      	cmp	r3, #0
    5b4a:	d1f9      	bne.n	5b40 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5b4c:	2100      	movs	r1, #0
    5b4e:	68f8      	ldr	r0, [r7, #12]
    5b50:	4b63      	ldr	r3, [pc, #396]	; (5ce0 <_oscctrl_init_referenced_generators+0x1d4>)
    5b52:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5b54:	bf00      	nop
    5b56:	68f8      	ldr	r0, [r7, #12]
    5b58:	4b62      	ldr	r3, [pc, #392]	; (5ce4 <_oscctrl_init_referenced_generators+0x1d8>)
    5b5a:	4798      	blx	r3
    5b5c:	4603      	mov	r3, r0
    5b5e:	2b00      	cmp	r3, #0
    5b60:	d1f9      	bne.n	5b56 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5b62:	2302      	movs	r3, #2
    5b64:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5b66:	7afb      	ldrb	r3, [r7, #11]
    5b68:	4619      	mov	r1, r3
    5b6a:	68f8      	ldr	r0, [r7, #12]
    5b6c:	4b58      	ldr	r3, [pc, #352]	; (5cd0 <_oscctrl_init_referenced_generators+0x1c4>)
    5b6e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5b70:	bf00      	nop
    5b72:	68f8      	ldr	r0, [r7, #12]
    5b74:	4b5c      	ldr	r3, [pc, #368]	; (5ce8 <_oscctrl_init_referenced_generators+0x1dc>)
    5b76:	4798      	blx	r3
    5b78:	4603      	mov	r3, r0
    5b7a:	2b00      	cmp	r3, #0
    5b7c:	d1f9      	bne.n	5b72 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5b7e:	68f8      	ldr	r0, [r7, #12]
    5b80:	4b5a      	ldr	r3, [pc, #360]	; (5cec <_oscctrl_init_referenced_generators+0x1e0>)
    5b82:	4798      	blx	r3
    5b84:	4603      	mov	r3, r0
    5b86:	4619      	mov	r1, r3
    5b88:	68f8      	ldr	r0, [r7, #12]
    5b8a:	4b59      	ldr	r3, [pc, #356]	; (5cf0 <_oscctrl_init_referenced_generators+0x1e4>)
    5b8c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5b8e:	bf00      	nop
    5b90:	68f8      	ldr	r0, [r7, #12]
    5b92:	4b58      	ldr	r3, [pc, #352]	; (5cf4 <_oscctrl_init_referenced_generators+0x1e8>)
    5b94:	4798      	blx	r3
    5b96:	4603      	mov	r3, r0
    5b98:	2b00      	cmp	r3, #0
    5b9a:	d1f9      	bne.n	5b90 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5b9c:	2319      	movs	r3, #25
    5b9e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5ba0:	7afb      	ldrb	r3, [r7, #11]
    5ba2:	4619      	mov	r1, r3
    5ba4:	68f8      	ldr	r0, [r7, #12]
    5ba6:	4b4e      	ldr	r3, [pc, #312]	; (5ce0 <_oscctrl_init_referenced_generators+0x1d4>)
    5ba8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5baa:	bf00      	nop
    5bac:	68f8      	ldr	r0, [r7, #12]
    5bae:	4b4d      	ldr	r3, [pc, #308]	; (5ce4 <_oscctrl_init_referenced_generators+0x1d8>)
    5bb0:	4798      	blx	r3
    5bb2:	4603      	mov	r3, r0
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	d1f9      	bne.n	5bac <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5bb8:	2245      	movs	r2, #69	; 0x45
    5bba:	2101      	movs	r1, #1
    5bbc:	4841      	ldr	r0, [pc, #260]	; (5cc4 <_oscctrl_init_referenced_generators+0x1b8>)
    5bbe:	4b4e      	ldr	r3, [pc, #312]	; (5cf8 <_oscctrl_init_referenced_generators+0x1ec>)
    5bc0:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5bc2:	223b      	movs	r2, #59	; 0x3b
    5bc4:	2100      	movs	r1, #0
    5bc6:	68f8      	ldr	r0, [r7, #12]
    5bc8:	4b4c      	ldr	r3, [pc, #304]	; (5cfc <_oscctrl_init_referenced_generators+0x1f0>)
    5bca:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5bcc:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5bd0:	2100      	movs	r1, #0
    5bd2:	68f8      	ldr	r0, [r7, #12]
    5bd4:	4b4a      	ldr	r3, [pc, #296]	; (5d00 <_oscctrl_init_referenced_generators+0x1f4>)
    5bd6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5bd8:	2242      	movs	r2, #66	; 0x42
    5bda:	2100      	movs	r1, #0
    5bdc:	68f8      	ldr	r0, [r7, #12]
    5bde:	4b49      	ldr	r3, [pc, #292]	; (5d04 <_oscctrl_init_referenced_generators+0x1f8>)
    5be0:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5be2:	4a49      	ldr	r2, [pc, #292]	; (5d08 <_oscctrl_init_referenced_generators+0x1fc>)
    5be4:	2101      	movs	r1, #1
    5be6:	68f8      	ldr	r0, [r7, #12]
    5be8:	4b44      	ldr	r3, [pc, #272]	; (5cfc <_oscctrl_init_referenced_generators+0x1f0>)
    5bea:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5bec:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5bf0:	2101      	movs	r1, #1
    5bf2:	68f8      	ldr	r0, [r7, #12]
    5bf4:	4b42      	ldr	r3, [pc, #264]	; (5d00 <_oscctrl_init_referenced_generators+0x1f4>)
    5bf6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5bf8:	2202      	movs	r2, #2
    5bfa:	2101      	movs	r1, #1
    5bfc:	68f8      	ldr	r0, [r7, #12]
    5bfe:	4b41      	ldr	r3, [pc, #260]	; (5d04 <_oscctrl_init_referenced_generators+0x1f8>)
    5c00:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5c02:	68f8      	ldr	r0, [r7, #12]
    5c04:	4b41      	ldr	r3, [pc, #260]	; (5d0c <_oscctrl_init_referenced_generators+0x200>)
    5c06:	4798      	blx	r3
    5c08:	4603      	mov	r3, r0
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	d00c      	beq.n	5c28 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5c0e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5c12:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5c14:	bf00      	nop
    5c16:	6879      	ldr	r1, [r7, #4]
    5c18:	68f8      	ldr	r0, [r7, #12]
    5c1a:	4b3d      	ldr	r3, [pc, #244]	; (5d10 <_oscctrl_init_referenced_generators+0x204>)
    5c1c:	4798      	blx	r3
    5c1e:	4602      	mov	r2, r0
    5c20:	687b      	ldr	r3, [r7, #4]
    5c22:	429a      	cmp	r2, r3
    5c24:	d1f7      	bne.n	5c16 <_oscctrl_init_referenced_generators+0x10a>
    5c26:	e009      	b.n	5c3c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5c28:	bf00      	nop
    5c2a:	68f8      	ldr	r0, [r7, #12]
    5c2c:	4b39      	ldr	r3, [pc, #228]	; (5d14 <_oscctrl_init_referenced_generators+0x208>)
    5c2e:	4798      	blx	r3
    5c30:	4603      	mov	r3, r0
    5c32:	f083 0301 	eor.w	r3, r3, #1
    5c36:	b2db      	uxtb	r3, r3
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d1f6      	bne.n	5c2a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5c3c:	bf00      	nop
    5c3e:	2100      	movs	r1, #0
    5c40:	68f8      	ldr	r0, [r7, #12]
    5c42:	4b35      	ldr	r3, [pc, #212]	; (5d18 <_oscctrl_init_referenced_generators+0x20c>)
    5c44:	4798      	blx	r3
    5c46:	4603      	mov	r3, r0
    5c48:	f083 0301 	eor.w	r3, r3, #1
    5c4c:	b2db      	uxtb	r3, r3
    5c4e:	2b00      	cmp	r3, #0
    5c50:	d009      	beq.n	5c66 <_oscctrl_init_referenced_generators+0x15a>
    5c52:	2100      	movs	r1, #0
    5c54:	68f8      	ldr	r0, [r7, #12]
    5c56:	4b31      	ldr	r3, [pc, #196]	; (5d1c <_oscctrl_init_referenced_generators+0x210>)
    5c58:	4798      	blx	r3
    5c5a:	4603      	mov	r3, r0
    5c5c:	f083 0301 	eor.w	r3, r3, #1
    5c60:	b2db      	uxtb	r3, r3
    5c62:	2b00      	cmp	r3, #0
    5c64:	d1eb      	bne.n	5c3e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5c66:	bf00      	nop
    5c68:	2101      	movs	r1, #1
    5c6a:	68f8      	ldr	r0, [r7, #12]
    5c6c:	4b2a      	ldr	r3, [pc, #168]	; (5d18 <_oscctrl_init_referenced_generators+0x20c>)
    5c6e:	4798      	blx	r3
    5c70:	4603      	mov	r3, r0
    5c72:	f083 0301 	eor.w	r3, r3, #1
    5c76:	b2db      	uxtb	r3, r3
    5c78:	2b00      	cmp	r3, #0
    5c7a:	d009      	beq.n	5c90 <_oscctrl_init_referenced_generators+0x184>
    5c7c:	2101      	movs	r1, #1
    5c7e:	68f8      	ldr	r0, [r7, #12]
    5c80:	4b26      	ldr	r3, [pc, #152]	; (5d1c <_oscctrl_init_referenced_generators+0x210>)
    5c82:	4798      	blx	r3
    5c84:	4603      	mov	r3, r0
    5c86:	f083 0301 	eor.w	r3, r3, #1
    5c8a:	b2db      	uxtb	r3, r3
    5c8c:	2b00      	cmp	r3, #0
    5c8e:	d1eb      	bne.n	5c68 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5c90:	bf00      	nop
    5c92:	480c      	ldr	r0, [pc, #48]	; (5cc4 <_oscctrl_init_referenced_generators+0x1b8>)
    5c94:	4b22      	ldr	r3, [pc, #136]	; (5d20 <_oscctrl_init_referenced_generators+0x214>)
    5c96:	4798      	blx	r3
    5c98:	4603      	mov	r3, r0
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	d1f9      	bne.n	5c92 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5c9e:	2207      	movs	r2, #7
    5ca0:	2100      	movs	r1, #0
    5ca2:	4808      	ldr	r0, [pc, #32]	; (5cc4 <_oscctrl_init_referenced_generators+0x1b8>)
    5ca4:	4b08      	ldr	r3, [pc, #32]	; (5cc8 <_oscctrl_init_referenced_generators+0x1bc>)
    5ca6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5ca8:	bf00      	nop
    5caa:	4806      	ldr	r0, [pc, #24]	; (5cc4 <_oscctrl_init_referenced_generators+0x1b8>)
    5cac:	4b07      	ldr	r3, [pc, #28]	; (5ccc <_oscctrl_init_referenced_generators+0x1c0>)
    5cae:	4798      	blx	r3
    5cb0:	4603      	mov	r3, r0
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	d1f9      	bne.n	5caa <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5cb6:	bf00      	nop
    5cb8:	3710      	adds	r7, #16
    5cba:	46bd      	mov	sp, r7
    5cbc:	bd80      	pop	{r7, pc}
    5cbe:	bf00      	nop
    5cc0:	40001000 	.word	0x40001000
    5cc4:	40001c00 	.word	0x40001c00
    5cc8:	000056d9 	.word	0x000056d9
    5ccc:	00005699 	.word	0x00005699
    5cd0:	0000593d 	.word	0x0000593d
    5cd4:	0401bb80 	.word	0x0401bb80
    5cd8:	000059df 	.word	0x000059df
    5cdc:	00005a97 	.word	0x00005a97
    5ce0:	0000598b 	.word	0x0000598b
    5ce4:	00005a2f 	.word	0x00005a2f
    5ce8:	000059fb 	.word	0x000059fb
    5cec:	000059c7 	.word	0x000059c7
    5cf0:	000059ab 	.word	0x000059ab
    5cf4:	00005a63 	.word	0x00005a63
    5cf8:	00005729 	.word	0x00005729
    5cfc:	00005835 	.word	0x00005835
    5d00:	00005871 	.word	0x00005871
    5d04:	000057f9 	.word	0x000057f9
    5d08:	000407a0 	.word	0x000407a0
    5d0c:	0000595b 	.word	0x0000595b
    5d10:	000058ef 	.word	0x000058ef
    5d14:	000058c7 	.word	0x000058c7
    5d18:	00005785 	.word	0x00005785
    5d1c:	000057bd 	.word	0x000057bd
    5d20:	000056c1 	.word	0x000056c1

00005d24 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5d24:	b480      	push	{r7}
    5d26:	b083      	sub	sp, #12
    5d28:	af00      	add	r7, sp, #0
    5d2a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5d2c:	687b      	ldr	r3, [r7, #4]
    5d2e:	69db      	ldr	r3, [r3, #28]
    5d30:	0a9b      	lsrs	r3, r3, #10
    5d32:	f003 0301 	and.w	r3, r3, #1
    5d36:	2b00      	cmp	r3, #0
    5d38:	bf14      	ite	ne
    5d3a:	2301      	movne	r3, #1
    5d3c:	2300      	moveq	r3, #0
    5d3e:	b2db      	uxtb	r3, r3
}
    5d40:	4618      	mov	r0, r3
    5d42:	370c      	adds	r7, #12
    5d44:	46bd      	mov	sp, r7
    5d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d4a:	4770      	bx	lr

00005d4c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5d4c:	b480      	push	{r7}
    5d4e:	b083      	sub	sp, #12
    5d50:	af00      	add	r7, sp, #0
    5d52:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5d5a:	61da      	str	r2, [r3, #28]
}
    5d5c:	bf00      	nop
    5d5e:	370c      	adds	r7, #12
    5d60:	46bd      	mov	sp, r7
    5d62:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d66:	4770      	bx	lr

00005d68 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5d68:	b480      	push	{r7}
    5d6a:	b083      	sub	sp, #12
    5d6c:	af00      	add	r7, sp, #0
    5d6e:	6078      	str	r0, [r7, #4]
    5d70:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5d72:	687b      	ldr	r3, [r7, #4]
    5d74:	683a      	ldr	r2, [r7, #0]
    5d76:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5d78:	bf00      	nop
    5d7a:	370c      	adds	r7, #12
    5d7c:	46bd      	mov	sp, r7
    5d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d82:	4770      	bx	lr

00005d84 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5d84:	b480      	push	{r7}
    5d86:	b083      	sub	sp, #12
    5d88:	af00      	add	r7, sp, #0
    5d8a:	6078      	str	r0, [r7, #4]
    5d8c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5d8e:	687b      	ldr	r3, [r7, #4]
    5d90:	683a      	ldr	r2, [r7, #0]
    5d92:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5d94:	bf00      	nop
    5d96:	370c      	adds	r7, #12
    5d98:	46bd      	mov	sp, r7
    5d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d9e:	4770      	bx	lr

00005da0 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5da0:	b480      	push	{r7}
    5da2:	b083      	sub	sp, #12
    5da4:	af00      	add	r7, sp, #0
    5da6:	6078      	str	r0, [r7, #4]
    5da8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5daa:	687b      	ldr	r3, [r7, #4]
    5dac:	683a      	ldr	r2, [r7, #0]
    5dae:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5db0:	bf00      	nop
    5db2:	370c      	adds	r7, #12
    5db4:	46bd      	mov	sp, r7
    5db6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dba:	4770      	bx	lr

00005dbc <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5dbc:	b480      	push	{r7}
    5dbe:	b083      	sub	sp, #12
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	6078      	str	r0, [r7, #4]
    5dc4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5dc6:	687b      	ldr	r3, [r7, #4]
    5dc8:	683a      	ldr	r2, [r7, #0]
    5dca:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5dcc:	bf00      	nop
    5dce:	370c      	adds	r7, #12
    5dd0:	46bd      	mov	sp, r7
    5dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dd6:	4770      	bx	lr

00005dd8 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5dd8:	b480      	push	{r7}
    5dda:	b085      	sub	sp, #20
    5ddc:	af00      	add	r7, sp, #0
    5dde:	6078      	str	r0, [r7, #4]
    5de0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5de2:	687b      	ldr	r3, [r7, #4]
    5de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5de6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5de8:	68fb      	ldr	r3, [r7, #12]
    5dea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5dee:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5df0:	683b      	ldr	r3, [r7, #0]
    5df2:	b2db      	uxtb	r3, r3
    5df4:	68fa      	ldr	r2, [r7, #12]
    5df6:	4313      	orrs	r3, r2
    5df8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5dfa:	687b      	ldr	r3, [r7, #4]
    5dfc:	68fa      	ldr	r2, [r7, #12]
    5dfe:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5e00:	bf00      	nop
    5e02:	3714      	adds	r7, #20
    5e04:	46bd      	mov	sp, r7
    5e06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e0a:	4770      	bx	lr

00005e0c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5e0c:	b480      	push	{r7}
    5e0e:	b085      	sub	sp, #20
    5e10:	af00      	add	r7, sp, #0
    5e12:	6078      	str	r0, [r7, #4]
    5e14:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5e16:	687b      	ldr	r3, [r7, #4]
    5e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5e1a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5e1c:	68fb      	ldr	r3, [r7, #12]
    5e1e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5e22:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5e24:	683b      	ldr	r3, [r7, #0]
    5e26:	041b      	lsls	r3, r3, #16
    5e28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5e2c:	68fa      	ldr	r2, [r7, #12]
    5e2e:	4313      	orrs	r3, r2
    5e30:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5e32:	687b      	ldr	r3, [r7, #4]
    5e34:	68fa      	ldr	r2, [r7, #12]
    5e36:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5e38:	bf00      	nop
    5e3a:	3714      	adds	r7, #20
    5e3c:	46bd      	mov	sp, r7
    5e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e42:	4770      	bx	lr

00005e44 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5e44:	b480      	push	{r7}
    5e46:	b083      	sub	sp, #12
    5e48:	af00      	add	r7, sp, #0
    5e4a:	6078      	str	r0, [r7, #4]
    5e4c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5e4e:	687b      	ldr	r3, [r7, #4]
    5e50:	683a      	ldr	r2, [r7, #0]
    5e52:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5e54:	bf00      	nop
    5e56:	370c      	adds	r7, #12
    5e58:	46bd      	mov	sp, r7
    5e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e5e:	4770      	bx	lr

00005e60 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5e60:	b480      	push	{r7}
    5e62:	b083      	sub	sp, #12
    5e64:	af00      	add	r7, sp, #0
    5e66:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5e68:	687b      	ldr	r3, [r7, #4]
    5e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5e6c:	4618      	mov	r0, r3
    5e6e:	370c      	adds	r7, #12
    5e70:	46bd      	mov	sp, r7
    5e72:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e76:	4770      	bx	lr

00005e78 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5e78:	b480      	push	{r7}
    5e7a:	b085      	sub	sp, #20
    5e7c:	af00      	add	r7, sp, #0
    5e7e:	60f8      	str	r0, [r7, #12]
    5e80:	60b9      	str	r1, [r7, #8]
    5e82:	607a      	str	r2, [r7, #4]
	while (count--) {
    5e84:	e007      	b.n	5e96 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5e86:	68fb      	ldr	r3, [r7, #12]
    5e88:	1c5a      	adds	r2, r3, #1
    5e8a:	60fa      	str	r2, [r7, #12]
    5e8c:	68ba      	ldr	r2, [r7, #8]
    5e8e:	1c51      	adds	r1, r2, #1
    5e90:	60b9      	str	r1, [r7, #8]
    5e92:	7812      	ldrb	r2, [r2, #0]
    5e94:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5e96:	687b      	ldr	r3, [r7, #4]
    5e98:	1e5a      	subs	r2, r3, #1
    5e9a:	607a      	str	r2, [r7, #4]
    5e9c:	2b00      	cmp	r3, #0
    5e9e:	d1f2      	bne.n	5e86 <_qspi_memcpy+0xe>
	}
}
    5ea0:	bf00      	nop
    5ea2:	3714      	adds	r7, #20
    5ea4:	46bd      	mov	sp, r7
    5ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eaa:	4770      	bx	lr

00005eac <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5eac:	b580      	push	{r7, lr}
    5eae:	b082      	sub	sp, #8
    5eb0:	af00      	add	r7, sp, #0
    5eb2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5eb4:	4903      	ldr	r1, [pc, #12]	; (5ec4 <_qspi_end_transfer+0x18>)
    5eb6:	6878      	ldr	r0, [r7, #4]
    5eb8:	4b03      	ldr	r3, [pc, #12]	; (5ec8 <_qspi_end_transfer+0x1c>)
    5eba:	4798      	blx	r3
}
    5ebc:	bf00      	nop
    5ebe:	3708      	adds	r7, #8
    5ec0:	46bd      	mov	sp, r7
    5ec2:	bd80      	pop	{r7, pc}
    5ec4:	01000002 	.word	0x01000002
    5ec8:	00005d69 	.word	0x00005d69

00005ecc <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5ecc:	b580      	push	{r7, lr}
    5ece:	b082      	sub	sp, #8
    5ed0:	af00      	add	r7, sp, #0
    5ed2:	6078      	str	r0, [r7, #4]
    5ed4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5ed6:	687b      	ldr	r3, [r7, #4]
    5ed8:	2b00      	cmp	r3, #0
    5eda:	d004      	beq.n	5ee6 <_qspi_sync_init+0x1a>
    5edc:	683b      	ldr	r3, [r7, #0]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d001      	beq.n	5ee6 <_qspi_sync_init+0x1a>
    5ee2:	2301      	movs	r3, #1
    5ee4:	e000      	b.n	5ee8 <_qspi_sync_init+0x1c>
    5ee6:	2300      	movs	r3, #0
    5ee8:	f003 0301 	and.w	r3, r3, #1
    5eec:	b2db      	uxtb	r3, r3
    5eee:	2240      	movs	r2, #64	; 0x40
    5ef0:	490c      	ldr	r1, [pc, #48]	; (5f24 <_qspi_sync_init+0x58>)
    5ef2:	4618      	mov	r0, r3
    5ef4:	4b0c      	ldr	r3, [pc, #48]	; (5f28 <_qspi_sync_init+0x5c>)
    5ef6:	4798      	blx	r3
	dev->prvt = hw;
    5ef8:	687b      	ldr	r3, [r7, #4]
    5efa:	683a      	ldr	r2, [r7, #0]
    5efc:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5efe:	687b      	ldr	r3, [r7, #4]
    5f00:	681b      	ldr	r3, [r3, #0]
    5f02:	2101      	movs	r1, #1
    5f04:	4618      	mov	r0, r3
    5f06:	4b09      	ldr	r3, [pc, #36]	; (5f2c <_qspi_sync_init+0x60>)
    5f08:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5f0a:	4909      	ldr	r1, [pc, #36]	; (5f30 <_qspi_sync_init+0x64>)
    5f0c:	6838      	ldr	r0, [r7, #0]
    5f0e:	4b09      	ldr	r3, [pc, #36]	; (5f34 <_qspi_sync_init+0x68>)
    5f10:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5f12:	4909      	ldr	r1, [pc, #36]	; (5f38 <_qspi_sync_init+0x6c>)
    5f14:	6838      	ldr	r0, [r7, #0]
    5f16:	4b09      	ldr	r3, [pc, #36]	; (5f3c <_qspi_sync_init+0x70>)
    5f18:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5f1a:	2300      	movs	r3, #0
}
    5f1c:	4618      	mov	r0, r3
    5f1e:	3708      	adds	r7, #8
    5f20:	46bd      	mov	sp, r7
    5f22:	bd80      	pop	{r7, pc}
    5f24:	00011560 	.word	0x00011560
    5f28:	00003f79 	.word	0x00003f79
    5f2c:	00005d69 	.word	0x00005d69
    5f30:	06000011 	.word	0x06000011
    5f34:	00005d85 	.word	0x00005d85
    5f38:	00241300 	.word	0x00241300
    5f3c:	00005da1 	.word	0x00005da1

00005f40 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5f40:	b580      	push	{r7, lr}
    5f42:	b082      	sub	sp, #8
    5f44:	af00      	add	r7, sp, #0
    5f46:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5f48:	687b      	ldr	r3, [r7, #4]
    5f4a:	681b      	ldr	r3, [r3, #0]
    5f4c:	2102      	movs	r1, #2
    5f4e:	4618      	mov	r0, r3
    5f50:	4b03      	ldr	r3, [pc, #12]	; (5f60 <_qspi_sync_enable+0x20>)
    5f52:	4798      	blx	r3
	return ERR_NONE;
    5f54:	2300      	movs	r3, #0
}
    5f56:	4618      	mov	r0, r3
    5f58:	3708      	adds	r7, #8
    5f5a:	46bd      	mov	sp, r7
    5f5c:	bd80      	pop	{r7, pc}
    5f5e:	bf00      	nop
    5f60:	00005d69 	.word	0x00005d69

00005f64 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5f64:	b580      	push	{r7, lr}
    5f66:	b082      	sub	sp, #8
    5f68:	af00      	add	r7, sp, #0
    5f6a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5f6c:	687b      	ldr	r3, [r7, #4]
    5f6e:	681b      	ldr	r3, [r3, #0]
    5f70:	2100      	movs	r1, #0
    5f72:	4618      	mov	r0, r3
    5f74:	4b03      	ldr	r3, [pc, #12]	; (5f84 <_qspi_sync_disable+0x20>)
    5f76:	4798      	blx	r3
	return ERR_NONE;
    5f78:	2300      	movs	r3, #0
}
    5f7a:	4618      	mov	r0, r3
    5f7c:	3708      	adds	r7, #8
    5f7e:	46bd      	mov	sp, r7
    5f80:	bd80      	pop	{r7, pc}
    5f82:	bf00      	nop
    5f84:	00005d69 	.word	0x00005d69

00005f88 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5f88:	b580      	push	{r7, lr}
    5f8a:	b084      	sub	sp, #16
    5f8c:	af00      	add	r7, sp, #0
    5f8e:	6078      	str	r0, [r7, #4]
    5f90:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5f92:	687b      	ldr	r3, [r7, #4]
    5f94:	681b      	ldr	r3, [r3, #0]
    5f96:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5f98:	683b      	ldr	r3, [r7, #0]
    5f9a:	781b      	ldrb	r3, [r3, #0]
    5f9c:	f003 0320 	and.w	r3, r3, #32
    5fa0:	b2db      	uxtb	r3, r3
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d005      	beq.n	5fb2 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5fa6:	683b      	ldr	r3, [r7, #0]
    5fa8:	689b      	ldr	r3, [r3, #8]
    5faa:	4619      	mov	r1, r3
    5fac:	68f8      	ldr	r0, [r7, #12]
    5fae:	4b13      	ldr	r3, [pc, #76]	; (5ffc <_qspi_sync_command_set_ifr+0x74>)
    5fb0:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5fb2:	683b      	ldr	r3, [r7, #0]
    5fb4:	781b      	ldrb	r3, [r3, #0]
    5fb6:	f003 0310 	and.w	r3, r3, #16
    5fba:	b2db      	uxtb	r3, r3
    5fbc:	2b00      	cmp	r3, #0
    5fbe:	d005      	beq.n	5fcc <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5fc0:	683b      	ldr	r3, [r7, #0]
    5fc2:	791b      	ldrb	r3, [r3, #4]
    5fc4:	4619      	mov	r1, r3
    5fc6:	68f8      	ldr	r0, [r7, #12]
    5fc8:	4b0d      	ldr	r3, [pc, #52]	; (6000 <_qspi_sync_command_set_ifr+0x78>)
    5fca:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5fcc:	683b      	ldr	r3, [r7, #0]
    5fce:	781b      	ldrb	r3, [r3, #0]
    5fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5fd4:	b2db      	uxtb	r3, r3
    5fd6:	2b00      	cmp	r3, #0
    5fd8:	d005      	beq.n	5fe6 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5fda:	683b      	ldr	r3, [r7, #0]
    5fdc:	795b      	ldrb	r3, [r3, #5]
    5fde:	4619      	mov	r1, r3
    5fe0:	68f8      	ldr	r0, [r7, #12]
    5fe2:	4b08      	ldr	r3, [pc, #32]	; (6004 <_qspi_sync_command_set_ifr+0x7c>)
    5fe4:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5fe6:	683b      	ldr	r3, [r7, #0]
    5fe8:	681b      	ldr	r3, [r3, #0]
    5fea:	4619      	mov	r1, r3
    5fec:	68f8      	ldr	r0, [r7, #12]
    5fee:	4b06      	ldr	r3, [pc, #24]	; (6008 <_qspi_sync_command_set_ifr+0x80>)
    5ff0:	4798      	blx	r3
}
    5ff2:	bf00      	nop
    5ff4:	3710      	adds	r7, #16
    5ff6:	46bd      	mov	sp, r7
    5ff8:	bd80      	pop	{r7, pc}
    5ffa:	bf00      	nop
    5ffc:	00005dbd 	.word	0x00005dbd
    6000:	00005dd9 	.word	0x00005dd9
    6004:	00005e0d 	.word	0x00005e0d
    6008:	00005e45 	.word	0x00005e45

0000600c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    600c:	b580      	push	{r7, lr}
    600e:	b084      	sub	sp, #16
    6010:	af00      	add	r7, sp, #0
    6012:	6078      	str	r0, [r7, #4]
    6014:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    6016:	687b      	ldr	r3, [r7, #4]
    6018:	681b      	ldr	r3, [r3, #0]
    601a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    601c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6020:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    6022:	683b      	ldr	r3, [r7, #0]
    6024:	781b      	ldrb	r3, [r3, #0]
    6026:	f003 0320 	and.w	r3, r3, #32
    602a:	b2db      	uxtb	r3, r3
    602c:	2b00      	cmp	r3, #0
    602e:	d004      	beq.n	603a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    6030:	683b      	ldr	r3, [r7, #0]
    6032:	689b      	ldr	r3, [r3, #8]
    6034:	68fa      	ldr	r2, [r7, #12]
    6036:	4413      	add	r3, r2
    6038:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    603a:	68b8      	ldr	r0, [r7, #8]
    603c:	4b18      	ldr	r3, [pc, #96]	; (60a0 <_qspi_sync_run_transfer+0x94>)
    603e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    6040:	683b      	ldr	r3, [r7, #0]
    6042:	691b      	ldr	r3, [r3, #16]
    6044:	2b00      	cmp	r3, #0
    6046:	d103      	bne.n	6050 <_qspi_sync_run_transfer+0x44>
    6048:	683b      	ldr	r3, [r7, #0]
    604a:	695b      	ldr	r3, [r3, #20]
    604c:	2b00      	cmp	r3, #0
    604e:	d001      	beq.n	6054 <_qspi_sync_run_transfer+0x48>
    6050:	2301      	movs	r3, #1
    6052:	e000      	b.n	6056 <_qspi_sync_run_transfer+0x4a>
    6054:	2300      	movs	r3, #0
    6056:	f003 0301 	and.w	r3, r3, #1
    605a:	b2db      	uxtb	r3, r3
    605c:	2282      	movs	r2, #130	; 0x82
    605e:	4911      	ldr	r1, [pc, #68]	; (60a4 <_qspi_sync_run_transfer+0x98>)
    6060:	4618      	mov	r0, r3
    6062:	4b11      	ldr	r3, [pc, #68]	; (60a8 <_qspi_sync_run_transfer+0x9c>)
    6064:	4798      	blx	r3

	if (cmd->tx_buf) {
    6066:	683b      	ldr	r3, [r7, #0]
    6068:	691b      	ldr	r3, [r3, #16]
    606a:	2b00      	cmp	r3, #0
    606c:	d008      	beq.n	6080 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    606e:	683b      	ldr	r3, [r7, #0]
    6070:	6919      	ldr	r1, [r3, #16]
    6072:	683b      	ldr	r3, [r7, #0]
    6074:	68db      	ldr	r3, [r3, #12]
    6076:	461a      	mov	r2, r3
    6078:	68f8      	ldr	r0, [r7, #12]
    607a:	4b0c      	ldr	r3, [pc, #48]	; (60ac <_qspi_sync_run_transfer+0xa0>)
    607c:	4798      	blx	r3
    607e:	e007      	b.n	6090 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    6080:	683b      	ldr	r3, [r7, #0]
    6082:	6958      	ldr	r0, [r3, #20]
    6084:	683b      	ldr	r3, [r7, #0]
    6086:	68db      	ldr	r3, [r3, #12]
    6088:	461a      	mov	r2, r3
    608a:	68f9      	ldr	r1, [r7, #12]
    608c:	4b07      	ldr	r3, [pc, #28]	; (60ac <_qspi_sync_run_transfer+0xa0>)
    608e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    6090:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6094:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    6098:	bf00      	nop
    609a:	3710      	adds	r7, #16
    609c:	46bd      	mov	sp, r7
    609e:	bd80      	pop	{r7, pc}
    60a0:	00005e61 	.word	0x00005e61
    60a4:	00011560 	.word	0x00011560
    60a8:	00003f79 	.word	0x00003f79
    60ac:	00005e79 	.word	0x00005e79

000060b0 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    60b0:	b580      	push	{r7, lr}
    60b2:	b082      	sub	sp, #8
    60b4:	af00      	add	r7, sp, #0
    60b6:	6078      	str	r0, [r7, #4]
    60b8:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    60ba:	6839      	ldr	r1, [r7, #0]
    60bc:	6878      	ldr	r0, [r7, #4]
    60be:	4b14      	ldr	r3, [pc, #80]	; (6110 <_qspi_sync_serial_run_command+0x60>)
    60c0:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    60c2:	683b      	ldr	r3, [r7, #0]
    60c4:	781b      	ldrb	r3, [r3, #0]
    60c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    60ca:	b2db      	uxtb	r3, r3
    60cc:	2b00      	cmp	r3, #0
    60ce:	d003      	beq.n	60d8 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    60d0:	6839      	ldr	r1, [r7, #0]
    60d2:	6878      	ldr	r0, [r7, #4]
    60d4:	4b0f      	ldr	r3, [pc, #60]	; (6114 <_qspi_sync_serial_run_command+0x64>)
    60d6:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    60d8:	687b      	ldr	r3, [r7, #4]
    60da:	681b      	ldr	r3, [r3, #0]
    60dc:	4618      	mov	r0, r3
    60de:	4b0e      	ldr	r3, [pc, #56]	; (6118 <_qspi_sync_serial_run_command+0x68>)
    60e0:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    60e2:	bf00      	nop
    60e4:	687b      	ldr	r3, [r7, #4]
    60e6:	681b      	ldr	r3, [r3, #0]
    60e8:	4618      	mov	r0, r3
    60ea:	4b0c      	ldr	r3, [pc, #48]	; (611c <_qspi_sync_serial_run_command+0x6c>)
    60ec:	4798      	blx	r3
    60ee:	4603      	mov	r3, r0
    60f0:	f083 0301 	eor.w	r3, r3, #1
    60f4:	b2db      	uxtb	r3, r3
    60f6:	2b00      	cmp	r3, #0
    60f8:	d1f4      	bne.n	60e4 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    60fa:	687b      	ldr	r3, [r7, #4]
    60fc:	681b      	ldr	r3, [r3, #0]
    60fe:	4618      	mov	r0, r3
    6100:	4b07      	ldr	r3, [pc, #28]	; (6120 <_qspi_sync_serial_run_command+0x70>)
    6102:	4798      	blx	r3
	return ERR_NONE;
    6104:	2300      	movs	r3, #0
}
    6106:	4618      	mov	r0, r3
    6108:	3708      	adds	r7, #8
    610a:	46bd      	mov	sp, r7
    610c:	bd80      	pop	{r7, pc}
    610e:	bf00      	nop
    6110:	00005f89 	.word	0x00005f89
    6114:	0000600d 	.word	0x0000600d
    6118:	00005ead 	.word	0x00005ead
    611c:	00005d25 	.word	0x00005d25
    6120:	00005d4d 	.word	0x00005d4d

00006124 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    6124:	b480      	push	{r7}
    6126:	b083      	sub	sp, #12
    6128:	af00      	add	r7, sp, #0
    612a:	6078      	str	r0, [r7, #4]
    612c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    612e:	bf00      	nop
    6130:	687b      	ldr	r3, [r7, #4]
    6132:	691a      	ldr	r2, [r3, #16]
    6134:	683b      	ldr	r3, [r7, #0]
    6136:	4013      	ands	r3, r2
    6138:	2b00      	cmp	r3, #0
    613a:	d1f9      	bne.n	6130 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    613c:	bf00      	nop
    613e:	370c      	adds	r7, #12
    6140:	46bd      	mov	sp, r7
    6142:	f85d 7b04 	ldr.w	r7, [sp], #4
    6146:	4770      	bx	lr

00006148 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    6148:	b480      	push	{r7}
    614a:	b083      	sub	sp, #12
    614c:	af00      	add	r7, sp, #0
    614e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6150:	687b      	ldr	r3, [r7, #4]
    6152:	f44f 7280 	mov.w	r2, #256	; 0x100
    6156:	819a      	strh	r2, [r3, #12]
}
    6158:	bf00      	nop
    615a:	370c      	adds	r7, #12
    615c:	46bd      	mov	sp, r7
    615e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6162:	4770      	bx	lr

00006164 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    6164:	b480      	push	{r7}
    6166:	b083      	sub	sp, #12
    6168:	af00      	add	r7, sp, #0
    616a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    616c:	687b      	ldr	r3, [r7, #4]
    616e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6172:	819a      	strh	r2, [r3, #12]
}
    6174:	bf00      	nop
    6176:	370c      	adds	r7, #12
    6178:	46bd      	mov	sp, r7
    617a:	f85d 7b04 	ldr.w	r7, [sp], #4
    617e:	4770      	bx	lr

00006180 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    6180:	b480      	push	{r7}
    6182:	b083      	sub	sp, #12
    6184:	af00      	add	r7, sp, #0
    6186:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	899b      	ldrh	r3, [r3, #12]
    618c:	b29b      	uxth	r3, r3
}
    618e:	4618      	mov	r0, r3
    6190:	370c      	adds	r7, #12
    6192:	46bd      	mov	sp, r7
    6194:	f85d 7b04 	ldr.w	r7, [sp], #4
    6198:	4770      	bx	lr

0000619a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    619a:	b480      	push	{r7}
    619c:	b083      	sub	sp, #12
    619e:	af00      	add	r7, sp, #0
    61a0:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    61a2:	687b      	ldr	r3, [r7, #4]
    61a4:	895b      	ldrh	r3, [r3, #10]
    61a6:	b29b      	uxth	r3, r3
}
    61a8:	4618      	mov	r0, r3
    61aa:	370c      	adds	r7, #12
    61ac:	46bd      	mov	sp, r7
    61ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    61b2:	4770      	bx	lr

000061b4 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    61b4:	b580      	push	{r7, lr}
    61b6:	b082      	sub	sp, #8
    61b8:	af00      	add	r7, sp, #0
    61ba:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    61bc:	687b      	ldr	r3, [r7, #4]
    61be:	881b      	ldrh	r3, [r3, #0]
    61c0:	b29b      	uxth	r3, r3
    61c2:	f043 0301 	orr.w	r3, r3, #1
    61c6:	b29a      	uxth	r2, r3
    61c8:	687b      	ldr	r3, [r7, #4]
    61ca:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    61cc:	2101      	movs	r1, #1
    61ce:	6878      	ldr	r0, [r7, #4]
    61d0:	4b02      	ldr	r3, [pc, #8]	; (61dc <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    61d2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    61d4:	bf00      	nop
    61d6:	3708      	adds	r7, #8
    61d8:	46bd      	mov	sp, r7
    61da:	bd80      	pop	{r7, pc}
    61dc:	00006125 	.word	0x00006125

000061e0 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    61e0:	b580      	push	{r7, lr}
    61e2:	b084      	sub	sp, #16
    61e4:	af00      	add	r7, sp, #0
    61e6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    61e8:	f248 0103 	movw	r1, #32771	; 0x8003
    61ec:	6878      	ldr	r0, [r7, #4]
    61ee:	4b0a      	ldr	r3, [pc, #40]	; (6218 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    61f0:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    61f2:	687b      	ldr	r3, [r7, #4]
    61f4:	881b      	ldrh	r3, [r3, #0]
    61f6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    61f8:	89fb      	ldrh	r3, [r7, #14]
    61fa:	085b      	lsrs	r3, r3, #1
    61fc:	b29b      	uxth	r3, r3
    61fe:	f003 0301 	and.w	r3, r3, #1
    6202:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    6204:	89fb      	ldrh	r3, [r7, #14]
    6206:	2b00      	cmp	r3, #0
    6208:	bf14      	ite	ne
    620a:	2301      	movne	r3, #1
    620c:	2300      	moveq	r3, #0
    620e:	b2db      	uxtb	r3, r3
}
    6210:	4618      	mov	r0, r3
    6212:	3710      	adds	r7, #16
    6214:	46bd      	mov	sp, r7
    6216:	bd80      	pop	{r7, pc}
    6218:	00006125 	.word	0x00006125

0000621c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    621c:	b580      	push	{r7, lr}
    621e:	b082      	sub	sp, #8
    6220:	af00      	add	r7, sp, #0
    6222:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6224:	687b      	ldr	r3, [r7, #4]
    6226:	881b      	ldrh	r3, [r3, #0]
    6228:	b29b      	uxth	r3, r3
    622a:	f023 0302 	bic.w	r3, r3, #2
    622e:	b29a      	uxth	r2, r3
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6234:	f248 0103 	movw	r1, #32771	; 0x8003
    6238:	6878      	ldr	r0, [r7, #4]
    623a:	4b03      	ldr	r3, [pc, #12]	; (6248 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    623c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    623e:	bf00      	nop
    6240:	3708      	adds	r7, #8
    6242:	46bd      	mov	sp, r7
    6244:	bd80      	pop	{r7, pc}
    6246:	bf00      	nop
    6248:	00006125 	.word	0x00006125

0000624c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    624c:	b580      	push	{r7, lr}
    624e:	b082      	sub	sp, #8
    6250:	af00      	add	r7, sp, #0
    6252:	6078      	str	r0, [r7, #4]
    6254:	460b      	mov	r3, r1
    6256:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6258:	687b      	ldr	r3, [r7, #4]
    625a:	887a      	ldrh	r2, [r7, #2]
    625c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    625e:	f248 0103 	movw	r1, #32771	; 0x8003
    6262:	6878      	ldr	r0, [r7, #4]
    6264:	4b02      	ldr	r3, [pc, #8]	; (6270 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    6266:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6268:	bf00      	nop
    626a:	3708      	adds	r7, #8
    626c:	46bd      	mov	sp, r7
    626e:	bd80      	pop	{r7, pc}
    6270:	00006125 	.word	0x00006125

00006274 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    6274:	b580      	push	{r7, lr}
    6276:	b082      	sub	sp, #8
    6278:	af00      	add	r7, sp, #0
    627a:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    627c:	2108      	movs	r1, #8
    627e:	6878      	ldr	r0, [r7, #4]
    6280:	4b03      	ldr	r3, [pc, #12]	; (6290 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    6282:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    6284:	687b      	ldr	r3, [r7, #4]
    6286:	699b      	ldr	r3, [r3, #24]
}
    6288:	4618      	mov	r0, r3
    628a:	3708      	adds	r7, #8
    628c:	46bd      	mov	sp, r7
    628e:	bd80      	pop	{r7, pc}
    6290:	00006125 	.word	0x00006125

00006294 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    6294:	b480      	push	{r7}
    6296:	b083      	sub	sp, #12
    6298:	af00      	add	r7, sp, #0
    629a:	6078      	str	r0, [r7, #4]
    629c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    629e:	687b      	ldr	r3, [r7, #4]
    62a0:	683a      	ldr	r2, [r7, #0]
    62a2:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    62a4:	bf00      	nop
    62a6:	370c      	adds	r7, #12
    62a8:	46bd      	mov	sp, r7
    62aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ae:	4770      	bx	lr

000062b0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    62b0:	b580      	push	{r7, lr}
    62b2:	b082      	sub	sp, #8
    62b4:	af00      	add	r7, sp, #0
    62b6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    62b8:	687b      	ldr	r3, [r7, #4]
    62ba:	2b00      	cmp	r3, #0
    62bc:	d005      	beq.n	62ca <_calendar_init+0x1a>
    62be:	687b      	ldr	r3, [r7, #4]
    62c0:	681b      	ldr	r3, [r3, #0]
    62c2:	2b00      	cmp	r3, #0
    62c4:	d001      	beq.n	62ca <_calendar_init+0x1a>
    62c6:	2301      	movs	r3, #1
    62c8:	e000      	b.n	62cc <_calendar_init+0x1c>
    62ca:	2300      	movs	r3, #0
    62cc:	f003 0301 	and.w	r3, r3, #1
    62d0:	b2db      	uxtb	r3, r3
    62d2:	222f      	movs	r2, #47	; 0x2f
    62d4:	491b      	ldr	r1, [pc, #108]	; (6344 <_calendar_init+0x94>)
    62d6:	4618      	mov	r0, r3
    62d8:	4b1b      	ldr	r3, [pc, #108]	; (6348 <_calendar_init+0x98>)
    62da:	4798      	blx	r3

	_rtc_dev = dev;
    62dc:	4a1b      	ldr	r2, [pc, #108]	; (634c <_calendar_init+0x9c>)
    62de:	687b      	ldr	r3, [r7, #4]
    62e0:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    62e2:	687b      	ldr	r3, [r7, #4]
    62e4:	681b      	ldr	r3, [r3, #0]
    62e6:	4618      	mov	r0, r3
    62e8:	4b19      	ldr	r3, [pc, #100]	; (6350 <_calendar_init+0xa0>)
    62ea:	4798      	blx	r3
    62ec:	4603      	mov	r3, r0
    62ee:	2b00      	cmp	r3, #0
    62f0:	d00a      	beq.n	6308 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    62f2:	687b      	ldr	r3, [r7, #4]
    62f4:	681b      	ldr	r3, [r3, #0]
    62f6:	4618      	mov	r0, r3
    62f8:	4b16      	ldr	r3, [pc, #88]	; (6354 <_calendar_init+0xa4>)
    62fa:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    62fc:	687b      	ldr	r3, [r7, #4]
    62fe:	681b      	ldr	r3, [r3, #0]
    6300:	2102      	movs	r1, #2
    6302:	4618      	mov	r0, r3
    6304:	4b14      	ldr	r3, [pc, #80]	; (6358 <_calendar_init+0xa8>)
    6306:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    6308:	687b      	ldr	r3, [r7, #4]
    630a:	681b      	ldr	r3, [r3, #0]
    630c:	4618      	mov	r0, r3
    630e:	4b13      	ldr	r3, [pc, #76]	; (635c <_calendar_init+0xac>)
    6310:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	681b      	ldr	r3, [r3, #0]
    6316:	2101      	movs	r1, #1
    6318:	4618      	mov	r0, r3
    631a:	4b0f      	ldr	r3, [pc, #60]	; (6358 <_calendar_init+0xa8>)
    631c:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    631e:	687b      	ldr	r3, [r7, #4]
    6320:	681b      	ldr	r3, [r3, #0]
    6322:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    6326:	4618      	mov	r0, r3
    6328:	4b0d      	ldr	r3, [pc, #52]	; (6360 <_calendar_init+0xb0>)
    632a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    632c:	687b      	ldr	r3, [r7, #4]
    632e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6330:	2100      	movs	r1, #0
    6332:	4618      	mov	r0, r3
    6334:	4b0b      	ldr	r3, [pc, #44]	; (6364 <_calendar_init+0xb4>)
    6336:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6338:	2300      	movs	r3, #0
}
    633a:	4618      	mov	r0, r3
    633c:	3708      	adds	r7, #8
    633e:	46bd      	mov	sp, r7
    6340:	bd80      	pop	{r7, pc}
    6342:	bf00      	nop
    6344:	00011578 	.word	0x00011578
    6348:	00003f79 	.word	0x00003f79
    634c:	20003020 	.word	0x20003020
    6350:	000061e1 	.word	0x000061e1
    6354:	0000621d 	.word	0x0000621d
    6358:	00006125 	.word	0x00006125
    635c:	000061b5 	.word	0x000061b5
    6360:	0000624d 	.word	0x0000624d
    6364:	00006295 	.word	0x00006295

00006368 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    6368:	b580      	push	{r7, lr}
    636a:	b082      	sub	sp, #8
    636c:	af00      	add	r7, sp, #0
    636e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    6370:	687b      	ldr	r3, [r7, #4]
    6372:	2b00      	cmp	r3, #0
    6374:	d005      	beq.n	6382 <_calendar_get_counter+0x1a>
    6376:	687b      	ldr	r3, [r7, #4]
    6378:	681b      	ldr	r3, [r3, #0]
    637a:	2b00      	cmp	r3, #0
    637c:	d001      	beq.n	6382 <_calendar_get_counter+0x1a>
    637e:	2301      	movs	r3, #1
    6380:	e000      	b.n	6384 <_calendar_get_counter+0x1c>
    6382:	2300      	movs	r3, #0
    6384:	f003 0301 	and.w	r3, r3, #1
    6388:	b2db      	uxtb	r3, r3
    638a:	2299      	movs	r2, #153	; 0x99
    638c:	4906      	ldr	r1, [pc, #24]	; (63a8 <_calendar_get_counter+0x40>)
    638e:	4618      	mov	r0, r3
    6390:	4b06      	ldr	r3, [pc, #24]	; (63ac <_calendar_get_counter+0x44>)
    6392:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    6394:	687b      	ldr	r3, [r7, #4]
    6396:	681b      	ldr	r3, [r3, #0]
    6398:	4618      	mov	r0, r3
    639a:	4b05      	ldr	r3, [pc, #20]	; (63b0 <_calendar_get_counter+0x48>)
    639c:	4798      	blx	r3
    639e:	4603      	mov	r3, r0
}
    63a0:	4618      	mov	r0, r3
    63a2:	3708      	adds	r7, #8
    63a4:	46bd      	mov	sp, r7
    63a6:	bd80      	pop	{r7, pc}
    63a8:	00011578 	.word	0x00011578
    63ac:	00003f79 	.word	0x00003f79
    63b0:	00006275 	.word	0x00006275

000063b4 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    63b4:	b580      	push	{r7, lr}
    63b6:	b084      	sub	sp, #16
    63b8:	af00      	add	r7, sp, #0
    63ba:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    63bc:	687b      	ldr	r3, [r7, #4]
    63be:	681b      	ldr	r3, [r3, #0]
    63c0:	4618      	mov	r0, r3
    63c2:	4b19      	ldr	r3, [pc, #100]	; (6428 <_rtc_interrupt_handler+0x74>)
    63c4:	4798      	blx	r3
    63c6:	4603      	mov	r3, r0
    63c8:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    63ca:	687b      	ldr	r3, [r7, #4]
    63cc:	681b      	ldr	r3, [r3, #0]
    63ce:	4618      	mov	r0, r3
    63d0:	4b16      	ldr	r3, [pc, #88]	; (642c <_rtc_interrupt_handler+0x78>)
    63d2:	4798      	blx	r3
    63d4:	4603      	mov	r3, r0
    63d6:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    63d8:	89fa      	ldrh	r2, [r7, #14]
    63da:	89bb      	ldrh	r3, [r7, #12]
    63dc:	4013      	ands	r3, r2
    63de:	b29b      	uxth	r3, r3
    63e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    63e4:	2b00      	cmp	r3, #0
    63e6:	d009      	beq.n	63fc <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    63e8:	687b      	ldr	r3, [r7, #4]
    63ea:	685b      	ldr	r3, [r3, #4]
    63ec:	6878      	ldr	r0, [r7, #4]
    63ee:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    63f0:	687b      	ldr	r3, [r7, #4]
    63f2:	681b      	ldr	r3, [r3, #0]
    63f4:	4618      	mov	r0, r3
    63f6:	4b0e      	ldr	r3, [pc, #56]	; (6430 <_rtc_interrupt_handler+0x7c>)
    63f8:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    63fa:	e010      	b.n	641e <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    63fc:	89fa      	ldrh	r2, [r7, #14]
    63fe:	89bb      	ldrh	r3, [r7, #12]
    6400:	4013      	ands	r3, r2
    6402:	b29b      	uxth	r3, r3
    6404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6408:	2b00      	cmp	r3, #0
    640a:	d008      	beq.n	641e <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    640c:	687b      	ldr	r3, [r7, #4]
    640e:	689b      	ldr	r3, [r3, #8]
    6410:	6878      	ldr	r0, [r7, #4]
    6412:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    6414:	687b      	ldr	r3, [r7, #4]
    6416:	681b      	ldr	r3, [r3, #0]
    6418:	4618      	mov	r0, r3
    641a:	4b06      	ldr	r3, [pc, #24]	; (6434 <_rtc_interrupt_handler+0x80>)
    641c:	4798      	blx	r3
}
    641e:	bf00      	nop
    6420:	3710      	adds	r7, #16
    6422:	46bd      	mov	sp, r7
    6424:	bd80      	pop	{r7, pc}
    6426:	bf00      	nop
    6428:	00006181 	.word	0x00006181
    642c:	0000619b 	.word	0x0000619b
    6430:	00006149 	.word	0x00006149
    6434:	00006165 	.word	0x00006165

00006438 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6438:	b580      	push	{r7, lr}
    643a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    643c:	4b03      	ldr	r3, [pc, #12]	; (644c <RTC_Handler+0x14>)
    643e:	681b      	ldr	r3, [r3, #0]
    6440:	4618      	mov	r0, r3
    6442:	4b03      	ldr	r3, [pc, #12]	; (6450 <RTC_Handler+0x18>)
    6444:	4798      	blx	r3
}
    6446:	bf00      	nop
    6448:	bd80      	pop	{r7, pc}
    644a:	bf00      	nop
    644c:	20003020 	.word	0x20003020
    6450:	000063b5 	.word	0x000063b5

00006454 <__NVIC_EnableIRQ>:
{
    6454:	b480      	push	{r7}
    6456:	b083      	sub	sp, #12
    6458:	af00      	add	r7, sp, #0
    645a:	4603      	mov	r3, r0
    645c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    645e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6462:	2b00      	cmp	r3, #0
    6464:	db0b      	blt.n	647e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6466:	4909      	ldr	r1, [pc, #36]	; (648c <__NVIC_EnableIRQ+0x38>)
    6468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    646c:	095b      	lsrs	r3, r3, #5
    646e:	88fa      	ldrh	r2, [r7, #6]
    6470:	f002 021f 	and.w	r2, r2, #31
    6474:	2001      	movs	r0, #1
    6476:	fa00 f202 	lsl.w	r2, r0, r2
    647a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    647e:	bf00      	nop
    6480:	370c      	adds	r7, #12
    6482:	46bd      	mov	sp, r7
    6484:	f85d 7b04 	ldr.w	r7, [sp], #4
    6488:	4770      	bx	lr
    648a:	bf00      	nop
    648c:	e000e100 	.word	0xe000e100

00006490 <__NVIC_DisableIRQ>:
{
    6490:	b480      	push	{r7}
    6492:	b083      	sub	sp, #12
    6494:	af00      	add	r7, sp, #0
    6496:	4603      	mov	r3, r0
    6498:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    649a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    649e:	2b00      	cmp	r3, #0
    64a0:	db10      	blt.n	64c4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    64a2:	490b      	ldr	r1, [pc, #44]	; (64d0 <__NVIC_DisableIRQ+0x40>)
    64a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    64a8:	095b      	lsrs	r3, r3, #5
    64aa:	88fa      	ldrh	r2, [r7, #6]
    64ac:	f002 021f 	and.w	r2, r2, #31
    64b0:	2001      	movs	r0, #1
    64b2:	fa00 f202 	lsl.w	r2, r0, r2
    64b6:	3320      	adds	r3, #32
    64b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    64bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    64c0:	f3bf 8f6f 	isb	sy
}
    64c4:	bf00      	nop
    64c6:	370c      	adds	r7, #12
    64c8:	46bd      	mov	sp, r7
    64ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ce:	4770      	bx	lr
    64d0:	e000e100 	.word	0xe000e100

000064d4 <__NVIC_ClearPendingIRQ>:
{
    64d4:	b480      	push	{r7}
    64d6:	b083      	sub	sp, #12
    64d8:	af00      	add	r7, sp, #0
    64da:	4603      	mov	r3, r0
    64dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    64de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    64e2:	2b00      	cmp	r3, #0
    64e4:	db0c      	blt.n	6500 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    64e6:	4909      	ldr	r1, [pc, #36]	; (650c <__NVIC_ClearPendingIRQ+0x38>)
    64e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    64ec:	095b      	lsrs	r3, r3, #5
    64ee:	88fa      	ldrh	r2, [r7, #6]
    64f0:	f002 021f 	and.w	r2, r2, #31
    64f4:	2001      	movs	r0, #1
    64f6:	fa00 f202 	lsl.w	r2, r0, r2
    64fa:	3360      	adds	r3, #96	; 0x60
    64fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6500:	bf00      	nop
    6502:	370c      	adds	r7, #12
    6504:	46bd      	mov	sp, r7
    6506:	f85d 7b04 	ldr.w	r7, [sp], #4
    650a:	4770      	bx	lr
    650c:	e000e100 	.word	0xe000e100

00006510 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6510:	b480      	push	{r7}
    6512:	b083      	sub	sp, #12
    6514:	af00      	add	r7, sp, #0
    6516:	6078      	str	r0, [r7, #4]
    6518:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    651a:	bf00      	nop
    651c:	687b      	ldr	r3, [r7, #4]
    651e:	69da      	ldr	r2, [r3, #28]
    6520:	683b      	ldr	r3, [r7, #0]
    6522:	4013      	ands	r3, r2
    6524:	2b00      	cmp	r3, #0
    6526:	d1f9      	bne.n	651c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6528:	bf00      	nop
    652a:	370c      	adds	r7, #12
    652c:	46bd      	mov	sp, r7
    652e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6532:	4770      	bx	lr

00006534 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6534:	b480      	push	{r7}
    6536:	b083      	sub	sp, #12
    6538:	af00      	add	r7, sp, #0
    653a:	6078      	str	r0, [r7, #4]
    653c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	69da      	ldr	r2, [r3, #28]
    6542:	683b      	ldr	r3, [r7, #0]
    6544:	4013      	ands	r3, r2
    6546:	2b00      	cmp	r3, #0
    6548:	bf14      	ite	ne
    654a:	2301      	movne	r3, #1
    654c:	2300      	moveq	r3, #0
    654e:	b2db      	uxtb	r3, r3
}
    6550:	4618      	mov	r0, r3
    6552:	370c      	adds	r7, #12
    6554:	46bd      	mov	sp, r7
    6556:	f85d 7b04 	ldr.w	r7, [sp], #4
    655a:	4770      	bx	lr

0000655c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    655c:	b480      	push	{r7}
    655e:	b083      	sub	sp, #12
    6560:	af00      	add	r7, sp, #0
    6562:	6078      	str	r0, [r7, #4]
    6564:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    6566:	bf00      	nop
    6568:	687b      	ldr	r3, [r7, #4]
    656a:	69da      	ldr	r2, [r3, #28]
    656c:	683b      	ldr	r3, [r7, #0]
    656e:	4013      	ands	r3, r2
    6570:	2b00      	cmp	r3, #0
    6572:	d1f9      	bne.n	6568 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    6574:	bf00      	nop
    6576:	370c      	adds	r7, #12
    6578:	46bd      	mov	sp, r7
    657a:	f85d 7b04 	ldr.w	r7, [sp], #4
    657e:	4770      	bx	lr

00006580 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6580:	b480      	push	{r7}
    6582:	b083      	sub	sp, #12
    6584:	af00      	add	r7, sp, #0
    6586:	6078      	str	r0, [r7, #4]
    6588:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    658a:	687b      	ldr	r3, [r7, #4]
    658c:	69da      	ldr	r2, [r3, #28]
    658e:	683b      	ldr	r3, [r7, #0]
    6590:	4013      	ands	r3, r2
    6592:	2b00      	cmp	r3, #0
    6594:	bf14      	ite	ne
    6596:	2301      	movne	r3, #1
    6598:	2300      	moveq	r3, #0
    659a:	b2db      	uxtb	r3, r3
}
    659c:	4618      	mov	r0, r3
    659e:	370c      	adds	r7, #12
    65a0:	46bd      	mov	sp, r7
    65a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    65a6:	4770      	bx	lr

000065a8 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    65a8:	b480      	push	{r7}
    65aa:	b083      	sub	sp, #12
    65ac:	af00      	add	r7, sp, #0
    65ae:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	2201      	movs	r2, #1
    65b4:	761a      	strb	r2, [r3, #24]
}
    65b6:	bf00      	nop
    65b8:	370c      	adds	r7, #12
    65ba:	46bd      	mov	sp, r7
    65bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    65c0:	4770      	bx	lr

000065c2 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    65c2:	b480      	push	{r7}
    65c4:	b083      	sub	sp, #12
    65c6:	af00      	add	r7, sp, #0
    65c8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    65ca:	687b      	ldr	r3, [r7, #4]
    65cc:	2202      	movs	r2, #2
    65ce:	761a      	strb	r2, [r3, #24]
}
    65d0:	bf00      	nop
    65d2:	370c      	adds	r7, #12
    65d4:	46bd      	mov	sp, r7
    65d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    65da:	4770      	bx	lr

000065dc <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    65dc:	b480      	push	{r7}
    65de:	b083      	sub	sp, #12
    65e0:	af00      	add	r7, sp, #0
    65e2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    65e4:	687b      	ldr	r3, [r7, #4]
    65e6:	7e1b      	ldrb	r3, [r3, #24]
    65e8:	b2db      	uxtb	r3, r3
}
    65ea:	4618      	mov	r0, r3
    65ec:	370c      	adds	r7, #12
    65ee:	46bd      	mov	sp, r7
    65f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    65f4:	4770      	bx	lr

000065f6 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    65f6:	b480      	push	{r7}
    65f8:	b083      	sub	sp, #12
    65fa:	af00      	add	r7, sp, #0
    65fc:	6078      	str	r0, [r7, #4]
    65fe:	460b      	mov	r3, r1
    6600:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    6602:	687b      	ldr	r3, [r7, #4]
    6604:	78fa      	ldrb	r2, [r7, #3]
    6606:	761a      	strb	r2, [r3, #24]
}
    6608:	bf00      	nop
    660a:	370c      	adds	r7, #12
    660c:	46bd      	mov	sp, r7
    660e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6612:	4770      	bx	lr

00006614 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6614:	b480      	push	{r7}
    6616:	b085      	sub	sp, #20
    6618:	af00      	add	r7, sp, #0
    661a:	6078      	str	r0, [r7, #4]
    661c:	460b      	mov	r3, r1
    661e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    6620:	687b      	ldr	r3, [r7, #4]
    6622:	7e1b      	ldrb	r3, [r3, #24]
    6624:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6626:	7bfa      	ldrb	r2, [r7, #15]
    6628:	78fb      	ldrb	r3, [r7, #3]
    662a:	4013      	ands	r3, r2
    662c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    662e:	7bfb      	ldrb	r3, [r7, #15]
}
    6630:	4618      	mov	r0, r3
    6632:	3714      	adds	r7, #20
    6634:	46bd      	mov	sp, r7
    6636:	f85d 7b04 	ldr.w	r7, [sp], #4
    663a:	4770      	bx	lr

0000663c <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    663c:	b480      	push	{r7}
    663e:	b083      	sub	sp, #12
    6640:	af00      	add	r7, sp, #0
    6642:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6644:	687b      	ldr	r3, [r7, #4]
    6646:	7e1b      	ldrb	r3, [r3, #24]
    6648:	b2db      	uxtb	r3, r3
}
    664a:	4618      	mov	r0, r3
    664c:	370c      	adds	r7, #12
    664e:	46bd      	mov	sp, r7
    6650:	f85d 7b04 	ldr.w	r7, [sp], #4
    6654:	4770      	bx	lr

00006656 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6656:	b480      	push	{r7}
    6658:	b083      	sub	sp, #12
    665a:	af00      	add	r7, sp, #0
    665c:	6078      	str	r0, [r7, #4]
    665e:	460b      	mov	r3, r1
    6660:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    6662:	687b      	ldr	r3, [r7, #4]
    6664:	78fa      	ldrb	r2, [r7, #3]
    6666:	761a      	strb	r2, [r3, #24]
}
    6668:	bf00      	nop
    666a:	370c      	adds	r7, #12
    666c:	46bd      	mov	sp, r7
    666e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6672:	4770      	bx	lr

00006674 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    6674:	b480      	push	{r7}
    6676:	b083      	sub	sp, #12
    6678:	af00      	add	r7, sp, #0
    667a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    667c:	687b      	ldr	r3, [r7, #4]
    667e:	2201      	movs	r2, #1
    6680:	759a      	strb	r2, [r3, #22]
}
    6682:	bf00      	nop
    6684:	370c      	adds	r7, #12
    6686:	46bd      	mov	sp, r7
    6688:	f85d 7b04 	ldr.w	r7, [sp], #4
    668c:	4770      	bx	lr

0000668e <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    668e:	b480      	push	{r7}
    6690:	b083      	sub	sp, #12
    6692:	af00      	add	r7, sp, #0
    6694:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    6696:	687b      	ldr	r3, [r7, #4]
    6698:	2201      	movs	r2, #1
    669a:	751a      	strb	r2, [r3, #20]
}
    669c:	bf00      	nop
    669e:	370c      	adds	r7, #12
    66a0:	46bd      	mov	sp, r7
    66a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    66a6:	4770      	bx	lr

000066a8 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    66a8:	b480      	push	{r7}
    66aa:	b083      	sub	sp, #12
    66ac:	af00      	add	r7, sp, #0
    66ae:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    66b0:	687b      	ldr	r3, [r7, #4]
    66b2:	2202      	movs	r2, #2
    66b4:	759a      	strb	r2, [r3, #22]
}
    66b6:	bf00      	nop
    66b8:	370c      	adds	r7, #12
    66ba:	46bd      	mov	sp, r7
    66bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    66c0:	4770      	bx	lr

000066c2 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    66c2:	b480      	push	{r7}
    66c4:	b083      	sub	sp, #12
    66c6:	af00      	add	r7, sp, #0
    66c8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    66ca:	687b      	ldr	r3, [r7, #4]
    66cc:	2202      	movs	r2, #2
    66ce:	751a      	strb	r2, [r3, #20]
}
    66d0:	bf00      	nop
    66d2:	370c      	adds	r7, #12
    66d4:	46bd      	mov	sp, r7
    66d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    66da:	4770      	bx	lr

000066dc <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    66dc:	b480      	push	{r7}
    66de:	b083      	sub	sp, #12
    66e0:	af00      	add	r7, sp, #0
    66e2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    66e4:	687b      	ldr	r3, [r7, #4]
    66e6:	2204      	movs	r2, #4
    66e8:	759a      	strb	r2, [r3, #22]
}
    66ea:	bf00      	nop
    66ec:	370c      	adds	r7, #12
    66ee:	46bd      	mov	sp, r7
    66f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    66f4:	4770      	bx	lr

000066f6 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    66f6:	b480      	push	{r7}
    66f8:	b083      	sub	sp, #12
    66fa:	af00      	add	r7, sp, #0
    66fc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    66fe:	687b      	ldr	r3, [r7, #4]
    6700:	2204      	movs	r2, #4
    6702:	751a      	strb	r2, [r3, #20]
}
    6704:	bf00      	nop
    6706:	370c      	adds	r7, #12
    6708:	46bd      	mov	sp, r7
    670a:	f85d 7b04 	ldr.w	r7, [sp], #4
    670e:	4770      	bx	lr

00006710 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    6710:	b480      	push	{r7}
    6712:	b083      	sub	sp, #12
    6714:	af00      	add	r7, sp, #0
    6716:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    6718:	687b      	ldr	r3, [r7, #4]
    671a:	7d9b      	ldrb	r3, [r3, #22]
    671c:	b2db      	uxtb	r3, r3
}
    671e:	4618      	mov	r0, r3
    6720:	370c      	adds	r7, #12
    6722:	46bd      	mov	sp, r7
    6724:	f85d 7b04 	ldr.w	r7, [sp], #4
    6728:	4770      	bx	lr
	...

0000672c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    672c:	b580      	push	{r7, lr}
    672e:	b082      	sub	sp, #8
    6730:	af00      	add	r7, sp, #0
    6732:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	681b      	ldr	r3, [r3, #0]
    6738:	f023 0202 	bic.w	r2, r3, #2
    673c:	687b      	ldr	r3, [r7, #4]
    673e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6740:	2103      	movs	r1, #3
    6742:	6878      	ldr	r0, [r7, #4]
    6744:	4b02      	ldr	r3, [pc, #8]	; (6750 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    6746:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6748:	bf00      	nop
    674a:	3708      	adds	r7, #8
    674c:	46bd      	mov	sp, r7
    674e:	bd80      	pop	{r7, pc}
    6750:	00006511 	.word	0x00006511

00006754 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6754:	b480      	push	{r7}
    6756:	b085      	sub	sp, #20
    6758:	af00      	add	r7, sp, #0
    675a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    675c:	687b      	ldr	r3, [r7, #4]
    675e:	681b      	ldr	r3, [r3, #0]
    6760:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6762:	68fb      	ldr	r3, [r7, #12]
    6764:	0edb      	lsrs	r3, r3, #27
    6766:	f003 0301 	and.w	r3, r3, #1
    676a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    676c:	68fb      	ldr	r3, [r7, #12]
    676e:	2b00      	cmp	r3, #0
    6770:	bf14      	ite	ne
    6772:	2301      	movne	r3, #1
    6774:	2300      	moveq	r3, #0
    6776:	b2db      	uxtb	r3, r3
}
    6778:	4618      	mov	r0, r3
    677a:	3714      	adds	r7, #20
    677c:	46bd      	mov	sp, r7
    677e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6782:	4770      	bx	lr

00006784 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6784:	b580      	push	{r7, lr}
    6786:	b084      	sub	sp, #16
    6788:	af00      	add	r7, sp, #0
    678a:	6078      	str	r0, [r7, #4]
    678c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    678e:	2103      	movs	r1, #3
    6790:	6878      	ldr	r0, [r7, #4]
    6792:	4b07      	ldr	r3, [pc, #28]	; (67b0 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6794:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6796:	687b      	ldr	r3, [r7, #4]
    6798:	681b      	ldr	r3, [r3, #0]
    679a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    679c:	68fa      	ldr	r2, [r7, #12]
    679e:	683b      	ldr	r3, [r7, #0]
    67a0:	4013      	ands	r3, r2
    67a2:	60fb      	str	r3, [r7, #12]
	return tmp;
    67a4:	68fb      	ldr	r3, [r7, #12]
}
    67a6:	4618      	mov	r0, r3
    67a8:	3710      	adds	r7, #16
    67aa:	46bd      	mov	sp, r7
    67ac:	bd80      	pop	{r7, pc}
    67ae:	bf00      	nop
    67b0:	00006511 	.word	0x00006511

000067b4 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    67b4:	b580      	push	{r7, lr}
    67b6:	b082      	sub	sp, #8
    67b8:	af00      	add	r7, sp, #0
    67ba:	6078      	str	r0, [r7, #4]
    67bc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    67be:	687b      	ldr	r3, [r7, #4]
    67c0:	683a      	ldr	r2, [r7, #0]
    67c2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    67c4:	2103      	movs	r1, #3
    67c6:	6878      	ldr	r0, [r7, #4]
    67c8:	4b02      	ldr	r3, [pc, #8]	; (67d4 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    67ca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67cc:	bf00      	nop
    67ce:	3708      	adds	r7, #8
    67d0:	46bd      	mov	sp, r7
    67d2:	bd80      	pop	{r7, pc}
    67d4:	00006511 	.word	0x00006511

000067d8 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    67d8:	b580      	push	{r7, lr}
    67da:	b084      	sub	sp, #16
    67dc:	af00      	add	r7, sp, #0
    67de:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    67e0:	2103      	movs	r1, #3
    67e2:	6878      	ldr	r0, [r7, #4]
    67e4:	4b09      	ldr	r3, [pc, #36]	; (680c <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    67e6:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    67e8:	687b      	ldr	r3, [r7, #4]
    67ea:	681b      	ldr	r3, [r3, #0]
    67ec:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    67ee:	68fb      	ldr	r3, [r7, #12]
    67f0:	085b      	lsrs	r3, r3, #1
    67f2:	f003 0301 	and.w	r3, r3, #1
    67f6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    67f8:	68fb      	ldr	r3, [r7, #12]
    67fa:	2b00      	cmp	r3, #0
    67fc:	bf14      	ite	ne
    67fe:	2301      	movne	r3, #1
    6800:	2300      	moveq	r3, #0
    6802:	b2db      	uxtb	r3, r3
}
    6804:	4618      	mov	r0, r3
    6806:	3710      	adds	r7, #16
    6808:	46bd      	mov	sp, r7
    680a:	bd80      	pop	{r7, pc}
    680c:	0000655d 	.word	0x0000655d

00006810 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6810:	b580      	push	{r7, lr}
    6812:	b082      	sub	sp, #8
    6814:	af00      	add	r7, sp, #0
    6816:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6818:	687b      	ldr	r3, [r7, #4]
    681a:	681b      	ldr	r3, [r3, #0]
    681c:	f023 0202 	bic.w	r2, r3, #2
    6820:	687b      	ldr	r3, [r7, #4]
    6822:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6824:	2103      	movs	r1, #3
    6826:	6878      	ldr	r0, [r7, #4]
    6828:	4b02      	ldr	r3, [pc, #8]	; (6834 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    682a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    682c:	bf00      	nop
    682e:	3708      	adds	r7, #8
    6830:	46bd      	mov	sp, r7
    6832:	bd80      	pop	{r7, pc}
    6834:	0000655d 	.word	0x0000655d

00006838 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    6838:	b580      	push	{r7, lr}
    683a:	b084      	sub	sp, #16
    683c:	af00      	add	r7, sp, #0
    683e:	6078      	str	r0, [r7, #4]
    6840:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6842:	2103      	movs	r1, #3
    6844:	6878      	ldr	r0, [r7, #4]
    6846:	4b07      	ldr	r3, [pc, #28]	; (6864 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    6848:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    684a:	687b      	ldr	r3, [r7, #4]
    684c:	681b      	ldr	r3, [r3, #0]
    684e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6850:	68fa      	ldr	r2, [r7, #12]
    6852:	683b      	ldr	r3, [r7, #0]
    6854:	4013      	ands	r3, r2
    6856:	60fb      	str	r3, [r7, #12]
	return tmp;
    6858:	68fb      	ldr	r3, [r7, #12]
}
    685a:	4618      	mov	r0, r3
    685c:	3710      	adds	r7, #16
    685e:	46bd      	mov	sp, r7
    6860:	bd80      	pop	{r7, pc}
    6862:	bf00      	nop
    6864:	0000655d 	.word	0x0000655d

00006868 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    6868:	b580      	push	{r7, lr}
    686a:	b082      	sub	sp, #8
    686c:	af00      	add	r7, sp, #0
    686e:	6078      	str	r0, [r7, #4]
    6870:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    6872:	687b      	ldr	r3, [r7, #4]
    6874:	683a      	ldr	r2, [r7, #0]
    6876:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6878:	2103      	movs	r1, #3
    687a:	6878      	ldr	r0, [r7, #4]
    687c:	4b02      	ldr	r3, [pc, #8]	; (6888 <hri_sercomspi_write_CTRLA_reg+0x20>)
    687e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6880:	bf00      	nop
    6882:	3708      	adds	r7, #8
    6884:	46bd      	mov	sp, r7
    6886:	bd80      	pop	{r7, pc}
    6888:	0000655d 	.word	0x0000655d

0000688c <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    688c:	b580      	push	{r7, lr}
    688e:	b082      	sub	sp, #8
    6890:	af00      	add	r7, sp, #0
    6892:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6894:	687b      	ldr	r3, [r7, #4]
    6896:	685b      	ldr	r3, [r3, #4]
    6898:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    689c:	687b      	ldr	r3, [r7, #4]
    689e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68a0:	2104      	movs	r1, #4
    68a2:	6878      	ldr	r0, [r7, #4]
    68a4:	4b02      	ldr	r3, [pc, #8]	; (68b0 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    68a6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68a8:	bf00      	nop
    68aa:	3708      	adds	r7, #8
    68ac:	46bd      	mov	sp, r7
    68ae:	bd80      	pop	{r7, pc}
    68b0:	00006511 	.word	0x00006511

000068b4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    68b4:	b580      	push	{r7, lr}
    68b6:	b082      	sub	sp, #8
    68b8:	af00      	add	r7, sp, #0
    68ba:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    68bc:	687b      	ldr	r3, [r7, #4]
    68be:	685b      	ldr	r3, [r3, #4]
    68c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    68c4:	687b      	ldr	r3, [r7, #4]
    68c6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68c8:	2104      	movs	r1, #4
    68ca:	6878      	ldr	r0, [r7, #4]
    68cc:	4b02      	ldr	r3, [pc, #8]	; (68d8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    68ce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68d0:	bf00      	nop
    68d2:	3708      	adds	r7, #8
    68d4:	46bd      	mov	sp, r7
    68d6:	bd80      	pop	{r7, pc}
    68d8:	00006511 	.word	0x00006511

000068dc <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    68dc:	b580      	push	{r7, lr}
    68de:	b082      	sub	sp, #8
    68e0:	af00      	add	r7, sp, #0
    68e2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    68e4:	687b      	ldr	r3, [r7, #4]
    68e6:	685b      	ldr	r3, [r3, #4]
    68e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    68ec:	687b      	ldr	r3, [r7, #4]
    68ee:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68f0:	2104      	movs	r1, #4
    68f2:	6878      	ldr	r0, [r7, #4]
    68f4:	4b02      	ldr	r3, [pc, #8]	; (6900 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    68f6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68f8:	bf00      	nop
    68fa:	3708      	adds	r7, #8
    68fc:	46bd      	mov	sp, r7
    68fe:	bd80      	pop	{r7, pc}
    6900:	00006511 	.word	0x00006511

00006904 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6904:	b580      	push	{r7, lr}
    6906:	b082      	sub	sp, #8
    6908:	af00      	add	r7, sp, #0
    690a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    690c:	687b      	ldr	r3, [r7, #4]
    690e:	685b      	ldr	r3, [r3, #4]
    6910:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6914:	687b      	ldr	r3, [r7, #4]
    6916:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6918:	2104      	movs	r1, #4
    691a:	6878      	ldr	r0, [r7, #4]
    691c:	4b02      	ldr	r3, [pc, #8]	; (6928 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    691e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6920:	bf00      	nop
    6922:	3708      	adds	r7, #8
    6924:	46bd      	mov	sp, r7
    6926:	bd80      	pop	{r7, pc}
    6928:	00006511 	.word	0x00006511

0000692c <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    692c:	b580      	push	{r7, lr}
    692e:	b082      	sub	sp, #8
    6930:	af00      	add	r7, sp, #0
    6932:	6078      	str	r0, [r7, #4]
    6934:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6936:	687b      	ldr	r3, [r7, #4]
    6938:	685a      	ldr	r2, [r3, #4]
    693a:	683b      	ldr	r3, [r7, #0]
    693c:	041b      	lsls	r3, r3, #16
    693e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    6942:	431a      	orrs	r2, r3
    6944:	687b      	ldr	r3, [r7, #4]
    6946:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6948:	2104      	movs	r1, #4
    694a:	6878      	ldr	r0, [r7, #4]
    694c:	4b02      	ldr	r3, [pc, #8]	; (6958 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    694e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6950:	bf00      	nop
    6952:	3708      	adds	r7, #8
    6954:	46bd      	mov	sp, r7
    6956:	bd80      	pop	{r7, pc}
    6958:	00006511 	.word	0x00006511

0000695c <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    695c:	b580      	push	{r7, lr}
    695e:	b082      	sub	sp, #8
    6960:	af00      	add	r7, sp, #0
    6962:	6078      	str	r0, [r7, #4]
    6964:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6966:	687b      	ldr	r3, [r7, #4]
    6968:	683a      	ldr	r2, [r7, #0]
    696a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    696c:	2104      	movs	r1, #4
    696e:	6878      	ldr	r0, [r7, #4]
    6970:	4b02      	ldr	r3, [pc, #8]	; (697c <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    6972:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6974:	bf00      	nop
    6976:	3708      	adds	r7, #8
    6978:	46bd      	mov	sp, r7
    697a:	bd80      	pop	{r7, pc}
    697c:	00006511 	.word	0x00006511

00006980 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    6980:	b580      	push	{r7, lr}
    6982:	b082      	sub	sp, #8
    6984:	af00      	add	r7, sp, #0
    6986:	6078      	str	r0, [r7, #4]
    6988:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    698a:	687b      	ldr	r3, [r7, #4]
    698c:	683a      	ldr	r2, [r7, #0]
    698e:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6990:	2117      	movs	r1, #23
    6992:	6878      	ldr	r0, [r7, #4]
    6994:	4b02      	ldr	r3, [pc, #8]	; (69a0 <hri_sercomspi_write_CTRLB_reg+0x20>)
    6996:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6998:	bf00      	nop
    699a:	3708      	adds	r7, #8
    699c:	46bd      	mov	sp, r7
    699e:	bd80      	pop	{r7, pc}
    69a0:	0000655d 	.word	0x0000655d

000069a4 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    69a4:	b480      	push	{r7}
    69a6:	b083      	sub	sp, #12
    69a8:	af00      	add	r7, sp, #0
    69aa:	6078      	str	r0, [r7, #4]
    69ac:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    69ae:	687b      	ldr	r3, [r7, #4]
    69b0:	683a      	ldr	r2, [r7, #0]
    69b2:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69b4:	bf00      	nop
    69b6:	370c      	adds	r7, #12
    69b8:	46bd      	mov	sp, r7
    69ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    69be:	4770      	bx	lr

000069c0 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    69c0:	b480      	push	{r7}
    69c2:	b083      	sub	sp, #12
    69c4:	af00      	add	r7, sp, #0
    69c6:	6078      	str	r0, [r7, #4]
    69c8:	460b      	mov	r3, r1
    69ca:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    69cc:	687b      	ldr	r3, [r7, #4]
    69ce:	78fa      	ldrb	r2, [r7, #3]
    69d0:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69d2:	bf00      	nop
    69d4:	370c      	adds	r7, #12
    69d6:	46bd      	mov	sp, r7
    69d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    69dc:	4770      	bx	lr
	...

000069e0 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    69e0:	b580      	push	{r7, lr}
    69e2:	b084      	sub	sp, #16
    69e4:	af00      	add	r7, sp, #0
    69e6:	6078      	str	r0, [r7, #4]
    69e8:	460b      	mov	r3, r1
    69ea:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    69ec:	687b      	ldr	r3, [r7, #4]
    69ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    69f0:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    69f2:	68fb      	ldr	r3, [r7, #12]
    69f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    69f8:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    69fa:	78fb      	ldrb	r3, [r7, #3]
    69fc:	039b      	lsls	r3, r3, #14
    69fe:	461a      	mov	r2, r3
    6a00:	68fb      	ldr	r3, [r7, #12]
    6a02:	4313      	orrs	r3, r2
    6a04:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    6a06:	687b      	ldr	r3, [r7, #4]
    6a08:	68fa      	ldr	r2, [r7, #12]
    6a0a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a0c:	2104      	movs	r1, #4
    6a0e:	6878      	ldr	r0, [r7, #4]
    6a10:	4b02      	ldr	r3, [pc, #8]	; (6a1c <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    6a12:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a14:	bf00      	nop
    6a16:	3710      	adds	r7, #16
    6a18:	46bd      	mov	sp, r7
    6a1a:	bd80      	pop	{r7, pc}
    6a1c:	00006511 	.word	0x00006511

00006a20 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6a20:	b580      	push	{r7, lr}
    6a22:	b082      	sub	sp, #8
    6a24:	af00      	add	r7, sp, #0
    6a26:	6078      	str	r0, [r7, #4]
    6a28:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6a2a:	687b      	ldr	r3, [r7, #4]
    6a2c:	683a      	ldr	r2, [r7, #0]
    6a2e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a30:	2104      	movs	r1, #4
    6a32:	6878      	ldr	r0, [r7, #4]
    6a34:	4b02      	ldr	r3, [pc, #8]	; (6a40 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    6a36:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a38:	bf00      	nop
    6a3a:	3708      	adds	r7, #8
    6a3c:	46bd      	mov	sp, r7
    6a3e:	bd80      	pop	{r7, pc}
    6a40:	00006511 	.word	0x00006511

00006a44 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6a44:	b580      	push	{r7, lr}
    6a46:	b082      	sub	sp, #8
    6a48:	af00      	add	r7, sp, #0
    6a4a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a4c:	2104      	movs	r1, #4
    6a4e:	6878      	ldr	r0, [r7, #4]
    6a50:	4b03      	ldr	r3, [pc, #12]	; (6a60 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6a52:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6a54:	687b      	ldr	r3, [r7, #4]
    6a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6a58:	4618      	mov	r0, r3
    6a5a:	3708      	adds	r7, #8
    6a5c:	46bd      	mov	sp, r7
    6a5e:	bd80      	pop	{r7, pc}
    6a60:	00006511 	.word	0x00006511

00006a64 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6a64:	b480      	push	{r7}
    6a66:	b083      	sub	sp, #12
    6a68:	af00      	add	r7, sp, #0
    6a6a:	6078      	str	r0, [r7, #4]
    6a6c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6a6e:	687b      	ldr	r3, [r7, #4]
    6a70:	683a      	ldr	r2, [r7, #0]
    6a72:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a74:	bf00      	nop
    6a76:	370c      	adds	r7, #12
    6a78:	46bd      	mov	sp, r7
    6a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a7e:	4770      	bx	lr

00006a80 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6a80:	b580      	push	{r7, lr}
    6a82:	b082      	sub	sp, #8
    6a84:	af00      	add	r7, sp, #0
    6a86:	6078      	str	r0, [r7, #4]
    6a88:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6a8a:	687b      	ldr	r3, [r7, #4]
    6a8c:	683a      	ldr	r2, [r7, #0]
    6a8e:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a90:	2104      	movs	r1, #4
    6a92:	6878      	ldr	r0, [r7, #4]
    6a94:	4b02      	ldr	r3, [pc, #8]	; (6aa0 <hri_sercomi2cm_write_DATA_reg+0x20>)
    6a96:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a98:	bf00      	nop
    6a9a:	3708      	adds	r7, #8
    6a9c:	46bd      	mov	sp, r7
    6a9e:	bd80      	pop	{r7, pc}
    6aa0:	00006511 	.word	0x00006511

00006aa4 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6aa4:	b580      	push	{r7, lr}
    6aa6:	b082      	sub	sp, #8
    6aa8:	af00      	add	r7, sp, #0
    6aaa:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6aac:	2104      	movs	r1, #4
    6aae:	6878      	ldr	r0, [r7, #4]
    6ab0:	4b03      	ldr	r3, [pc, #12]	; (6ac0 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6ab2:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6ab4:	687b      	ldr	r3, [r7, #4]
    6ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6ab8:	4618      	mov	r0, r3
    6aba:	3708      	adds	r7, #8
    6abc:	46bd      	mov	sp, r7
    6abe:	bd80      	pop	{r7, pc}
    6ac0:	00006511 	.word	0x00006511

00006ac4 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6ac4:	b480      	push	{r7}
    6ac6:	b083      	sub	sp, #12
    6ac8:	af00      	add	r7, sp, #0
    6aca:	6078      	str	r0, [r7, #4]
    6acc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6ace:	687b      	ldr	r3, [r7, #4]
    6ad0:	683a      	ldr	r2, [r7, #0]
    6ad2:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ad4:	bf00      	nop
    6ad6:	370c      	adds	r7, #12
    6ad8:	46bd      	mov	sp, r7
    6ada:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ade:	4770      	bx	lr

00006ae0 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6ae0:	b480      	push	{r7}
    6ae2:	b083      	sub	sp, #12
    6ae4:	af00      	add	r7, sp, #0
    6ae6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6ae8:	687b      	ldr	r3, [r7, #4]
    6aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6aec:	4618      	mov	r0, r3
    6aee:	370c      	adds	r7, #12
    6af0:	46bd      	mov	sp, r7
    6af2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6af6:	4770      	bx	lr

00006af8 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6af8:	b480      	push	{r7}
    6afa:	b083      	sub	sp, #12
    6afc:	af00      	add	r7, sp, #0
    6afe:	6078      	str	r0, [r7, #4]
    6b00:	460b      	mov	r3, r1
    6b02:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6b04:	687b      	ldr	r3, [r7, #4]
    6b06:	78fa      	ldrb	r2, [r7, #3]
    6b08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b0c:	bf00      	nop
    6b0e:	370c      	adds	r7, #12
    6b10:	46bd      	mov	sp, r7
    6b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b16:	4770      	bx	lr

00006b18 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6b18:	b480      	push	{r7}
    6b1a:	b083      	sub	sp, #12
    6b1c:	af00      	add	r7, sp, #0
    6b1e:	6078      	str	r0, [r7, #4]
    6b20:	460b      	mov	r3, r1
    6b22:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6b24:	687b      	ldr	r3, [r7, #4]
    6b26:	887a      	ldrh	r2, [r7, #2]
    6b28:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b2a:	bf00      	nop
    6b2c:	370c      	adds	r7, #12
    6b2e:	46bd      	mov	sp, r7
    6b30:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b34:	4770      	bx	lr
	...

00006b38 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6b38:	b580      	push	{r7, lr}
    6b3a:	b082      	sub	sp, #8
    6b3c:	af00      	add	r7, sp, #0
    6b3e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6b40:	2104      	movs	r1, #4
    6b42:	6878      	ldr	r0, [r7, #4]
    6b44:	4b04      	ldr	r3, [pc, #16]	; (6b58 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6b46:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6b48:	687b      	ldr	r3, [r7, #4]
    6b4a:	8b5b      	ldrh	r3, [r3, #26]
    6b4c:	b29b      	uxth	r3, r3
}
    6b4e:	4618      	mov	r0, r3
    6b50:	3708      	adds	r7, #8
    6b52:	46bd      	mov	sp, r7
    6b54:	bd80      	pop	{r7, pc}
    6b56:	bf00      	nop
    6b58:	00006511 	.word	0x00006511

00006b5c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6b5c:	b4b0      	push	{r4, r5, r7}
    6b5e:	b08d      	sub	sp, #52	; 0x34
    6b60:	af00      	add	r7, sp, #0
    6b62:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6b64:	4b13      	ldr	r3, [pc, #76]	; (6bb4 <_sercom_get_hardware_index+0x58>)
    6b66:	f107 040c 	add.w	r4, r7, #12
    6b6a:	461d      	mov	r5, r3
    6b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6b70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6b74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6b78:	2300      	movs	r3, #0
    6b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    6b7c:	e010      	b.n	6ba0 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b80:	009b      	lsls	r3, r3, #2
    6b82:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6b86:	4413      	add	r3, r2
    6b88:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6b8c:	461a      	mov	r2, r3
    6b8e:	687b      	ldr	r3, [r7, #4]
    6b90:	429a      	cmp	r2, r3
    6b92:	d102      	bne.n	6b9a <_sercom_get_hardware_index+0x3e>
			return i;
    6b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b96:	b2db      	uxtb	r3, r3
    6b98:	e006      	b.n	6ba8 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b9c:	3301      	adds	r3, #1
    6b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6ba2:	2b07      	cmp	r3, #7
    6ba4:	d9eb      	bls.n	6b7e <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6ba6:	2300      	movs	r3, #0
}
    6ba8:	4618      	mov	r0, r3
    6baa:	3734      	adds	r7, #52	; 0x34
    6bac:	46bd      	mov	sp, r7
    6bae:	bcb0      	pop	{r4, r5, r7}
    6bb0:	4770      	bx	lr
    6bb2:	bf00      	nop
    6bb4:	000115ac 	.word	0x000115ac

00006bb8 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    6bb8:	b480      	push	{r7}
    6bba:	b083      	sub	sp, #12
    6bbc:	af00      	add	r7, sp, #0
    6bbe:	6078      	str	r0, [r7, #4]
    6bc0:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    6bc2:	687b      	ldr	r3, [r7, #4]
    6bc4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    6bc8:	d102      	bne.n	6bd0 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    6bca:	4a0b      	ldr	r2, [pc, #44]	; (6bf8 <_sercom_init_irq_param+0x40>)
    6bcc:	683b      	ldr	r3, [r7, #0]
    6bce:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    6bd0:	687b      	ldr	r3, [r7, #4]
    6bd2:	4a0a      	ldr	r2, [pc, #40]	; (6bfc <_sercom_init_irq_param+0x44>)
    6bd4:	4293      	cmp	r3, r2
    6bd6:	d102      	bne.n	6bde <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    6bd8:	4a09      	ldr	r2, [pc, #36]	; (6c00 <_sercom_init_irq_param+0x48>)
    6bda:	683b      	ldr	r3, [r7, #0]
    6bdc:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	4a08      	ldr	r2, [pc, #32]	; (6c04 <_sercom_init_irq_param+0x4c>)
    6be2:	4293      	cmp	r3, r2
    6be4:	d102      	bne.n	6bec <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    6be6:	4a08      	ldr	r2, [pc, #32]	; (6c08 <_sercom_init_irq_param+0x50>)
    6be8:	683b      	ldr	r3, [r7, #0]
    6bea:	6013      	str	r3, [r2, #0]
	}
}
    6bec:	bf00      	nop
    6bee:	370c      	adds	r7, #12
    6bf0:	46bd      	mov	sp, r7
    6bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bf6:	4770      	bx	lr
    6bf8:	2000303c 	.word	0x2000303c
    6bfc:	43000400 	.word	0x43000400
    6c00:	20003040 	.word	0x20003040
    6c04:	43000c00 	.word	0x43000c00
    6c08:	20003044 	.word	0x20003044

00006c0c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6c0c:	b580      	push	{r7, lr}
    6c0e:	b084      	sub	sp, #16
    6c10:	af00      	add	r7, sp, #0
    6c12:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6c14:	6878      	ldr	r0, [r7, #4]
    6c16:	4b13      	ldr	r3, [pc, #76]	; (6c64 <_get_i2cm_index+0x58>)
    6c18:	4798      	blx	r3
    6c1a:	4603      	mov	r3, r0
    6c1c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6c1e:	2300      	movs	r3, #0
    6c20:	73fb      	strb	r3, [r7, #15]
    6c22:	e010      	b.n	6c46 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6c24:	7bfa      	ldrb	r2, [r7, #15]
    6c26:	4910      	ldr	r1, [pc, #64]	; (6c68 <_get_i2cm_index+0x5c>)
    6c28:	4613      	mov	r3, r2
    6c2a:	005b      	lsls	r3, r3, #1
    6c2c:	4413      	add	r3, r2
    6c2e:	00db      	lsls	r3, r3, #3
    6c30:	440b      	add	r3, r1
    6c32:	781b      	ldrb	r3, [r3, #0]
    6c34:	7bba      	ldrb	r2, [r7, #14]
    6c36:	429a      	cmp	r2, r3
    6c38:	d102      	bne.n	6c40 <_get_i2cm_index+0x34>
			return i;
    6c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6c3e:	e00d      	b.n	6c5c <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6c40:	7bfb      	ldrb	r3, [r7, #15]
    6c42:	3301      	adds	r3, #1
    6c44:	73fb      	strb	r3, [r7, #15]
    6c46:	7bfb      	ldrb	r3, [r7, #15]
    6c48:	2b01      	cmp	r3, #1
    6c4a:	d9eb      	bls.n	6c24 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6c4c:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    6c50:	4906      	ldr	r1, [pc, #24]	; (6c6c <_get_i2cm_index+0x60>)
    6c52:	2000      	movs	r0, #0
    6c54:	4b06      	ldr	r3, [pc, #24]	; (6c70 <_get_i2cm_index+0x64>)
    6c56:	4798      	blx	r3
	return -1;
    6c58:	f04f 33ff 	mov.w	r3, #4294967295
}
    6c5c:	4618      	mov	r0, r3
    6c5e:	3710      	adds	r7, #16
    6c60:	46bd      	mov	sp, r7
    6c62:	bd80      	pop	{r7, pc}
    6c64:	00006b5d 	.word	0x00006b5d
    6c68:	20000018 	.word	0x20000018
    6c6c:	00011590 	.word	0x00011590
    6c70:	00003f79 	.word	0x00003f79

00006c74 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6c74:	b580      	push	{r7, lr}
    6c76:	b082      	sub	sp, #8
    6c78:	af00      	add	r7, sp, #0
    6c7a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6c7c:	2103      	movs	r1, #3
    6c7e:	6878      	ldr	r0, [r7, #4]
    6c80:	4b02      	ldr	r3, [pc, #8]	; (6c8c <_sercom_i2c_send_stop+0x18>)
    6c82:	4798      	blx	r3
}
    6c84:	bf00      	nop
    6c86:	3708      	adds	r7, #8
    6c88:	46bd      	mov	sp, r7
    6c8a:	bd80      	pop	{r7, pc}
    6c8c:	0000692d 	.word	0x0000692d

00006c90 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6c90:	b590      	push	{r4, r7, lr}
    6c92:	b087      	sub	sp, #28
    6c94:	af00      	add	r7, sp, #0
    6c96:	60f8      	str	r0, [r7, #12]
    6c98:	60b9      	str	r1, [r7, #8]
    6c9a:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6c9c:	68f8      	ldr	r0, [r7, #12]
    6c9e:	4b7d      	ldr	r3, [pc, #500]	; (6e94 <_sercom_i2c_sync_analyse_flags+0x204>)
    6ca0:	4798      	blx	r3
    6ca2:	4603      	mov	r3, r0
    6ca4:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6ca6:	68f8      	ldr	r0, [r7, #12]
    6ca8:	4b7b      	ldr	r3, [pc, #492]	; (6e98 <_sercom_i2c_sync_analyse_flags+0x208>)
    6caa:	4798      	blx	r3
    6cac:	4603      	mov	r3, r0
    6cae:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6cb0:	68bb      	ldr	r3, [r7, #8]
    6cb2:	f003 0301 	and.w	r3, r3, #1
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	f000 8095 	beq.w	6de6 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6cbc:	8a7b      	ldrh	r3, [r7, #18]
    6cbe:	f003 0302 	and.w	r3, r3, #2
    6cc2:	2b00      	cmp	r3, #0
    6cc4:	d01d      	beq.n	6d02 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6cc6:	68f8      	ldr	r0, [r7, #12]
    6cc8:	4b74      	ldr	r3, [pc, #464]	; (6e9c <_sercom_i2c_sync_analyse_flags+0x20c>)
    6cca:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	885b      	ldrh	r3, [r3, #2]
    6cd0:	b29b      	uxth	r3, r3
    6cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6cd6:	b29a      	uxth	r2, r3
    6cd8:	687b      	ldr	r3, [r7, #4]
    6cda:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	885b      	ldrh	r3, [r3, #2]
    6ce0:	b29b      	uxth	r3, r3
    6ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ce6:	b29a      	uxth	r2, r3
    6ce8:	687b      	ldr	r3, [r7, #4]
    6cea:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6cec:	8a7b      	ldrh	r3, [r7, #18]
    6cee:	f003 0301 	and.w	r3, r3, #1
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d002      	beq.n	6cfc <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6cf6:	f06f 0304 	mvn.w	r3, #4
    6cfa:	e0c6      	b.n	6e8a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6cfc:	f06f 0303 	mvn.w	r3, #3
    6d00:	e0c3      	b.n	6e8a <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6d02:	8a7b      	ldrh	r3, [r7, #18]
    6d04:	f003 0304 	and.w	r3, r3, #4
    6d08:	2b00      	cmp	r3, #0
    6d0a:	d01f      	beq.n	6d4c <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6d0c:	687b      	ldr	r3, [r7, #4]
    6d0e:	685b      	ldr	r3, [r3, #4]
    6d10:	2b00      	cmp	r3, #0
    6d12:	dd07      	ble.n	6d24 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	885b      	ldrh	r3, [r3, #2]
    6d18:	b29b      	uxth	r3, r3
    6d1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6d1e:	b29a      	uxth	r2, r3
    6d20:	687b      	ldr	r3, [r7, #4]
    6d22:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6d24:	687b      	ldr	r3, [r7, #4]
    6d26:	885b      	ldrh	r3, [r3, #2]
    6d28:	b29b      	uxth	r3, r3
    6d2a:	b21b      	sxth	r3, r3
    6d2c:	2b00      	cmp	r3, #0
    6d2e:	da02      	bge.n	6d36 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6d30:	68f8      	ldr	r0, [r7, #12]
    6d32:	4b5b      	ldr	r3, [pc, #364]	; (6ea0 <_sercom_i2c_sync_analyse_flags+0x210>)
    6d34:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	885b      	ldrh	r3, [r3, #2]
    6d3a:	b29b      	uxth	r3, r3
    6d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d40:	b29a      	uxth	r2, r3
    6d42:	687b      	ldr	r3, [r7, #4]
    6d44:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6d46:	f06f 0301 	mvn.w	r3, #1
    6d4a:	e09e      	b.n	6e8a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6d4c:	687b      	ldr	r3, [r7, #4]
    6d4e:	885b      	ldrh	r3, [r3, #2]
    6d50:	b29b      	uxth	r3, r3
    6d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6d56:	2b00      	cmp	r3, #0
    6d58:	d01c      	beq.n	6d94 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6d5a:	687b      	ldr	r3, [r7, #4]
    6d5c:	881b      	ldrh	r3, [r3, #0]
    6d5e:	121b      	asrs	r3, r3, #8
    6d60:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6d62:	f003 0406 	and.w	r4, r3, #6
    6d66:	68f8      	ldr	r0, [r7, #12]
    6d68:	4b4e      	ldr	r3, [pc, #312]	; (6ea4 <_sercom_i2c_sync_analyse_flags+0x214>)
    6d6a:	4798      	blx	r3
    6d6c:	4603      	mov	r3, r0
    6d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6d72:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6d74:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6d78:	4619      	mov	r1, r3
    6d7a:	68f8      	ldr	r0, [r7, #12]
    6d7c:	4b4a      	ldr	r3, [pc, #296]	; (6ea8 <_sercom_i2c_sync_analyse_flags+0x218>)
    6d7e:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	885b      	ldrh	r3, [r3, #2]
    6d84:	b29b      	uxth	r3, r3
    6d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6d8a:	b29a      	uxth	r2, r3
    6d8c:	687b      	ldr	r3, [r7, #4]
    6d8e:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6d90:	2300      	movs	r3, #0
    6d92:	e07a      	b.n	6e8a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6d94:	687b      	ldr	r3, [r7, #4]
    6d96:	685b      	ldr	r3, [r3, #4]
    6d98:	2b00      	cmp	r3, #0
    6d9a:	d111      	bne.n	6dc0 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6d9c:	687b      	ldr	r3, [r7, #4]
    6d9e:	885b      	ldrh	r3, [r3, #2]
    6da0:	b29b      	uxth	r3, r3
    6da2:	b21b      	sxth	r3, r3
    6da4:	2b00      	cmp	r3, #0
    6da6:	da02      	bge.n	6dae <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6da8:	68f8      	ldr	r0, [r7, #12]
    6daa:	4b3d      	ldr	r3, [pc, #244]	; (6ea0 <_sercom_i2c_sync_analyse_flags+0x210>)
    6dac:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6dae:	687b      	ldr	r3, [r7, #4]
    6db0:	885b      	ldrh	r3, [r3, #2]
    6db2:	b29b      	uxth	r3, r3
    6db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6db8:	b29a      	uxth	r2, r3
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	805a      	strh	r2, [r3, #2]
    6dbe:	e010      	b.n	6de2 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6dc0:	687b      	ldr	r3, [r7, #4]
    6dc2:	689b      	ldr	r3, [r3, #8]
    6dc4:	781b      	ldrb	r3, [r3, #0]
    6dc6:	4619      	mov	r1, r3
    6dc8:	68f8      	ldr	r0, [r7, #12]
    6dca:	4b38      	ldr	r3, [pc, #224]	; (6eac <_sercom_i2c_sync_analyse_flags+0x21c>)
    6dcc:	4798      	blx	r3
				msg->buffer++;
    6dce:	687b      	ldr	r3, [r7, #4]
    6dd0:	689b      	ldr	r3, [r3, #8]
    6dd2:	1c5a      	adds	r2, r3, #1
    6dd4:	687b      	ldr	r3, [r7, #4]
    6dd6:	609a      	str	r2, [r3, #8]
				msg->len--;
    6dd8:	687b      	ldr	r3, [r7, #4]
    6dda:	685b      	ldr	r3, [r3, #4]
    6ddc:	1e5a      	subs	r2, r3, #1
    6dde:	687b      	ldr	r3, [r7, #4]
    6de0:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6de2:	2300      	movs	r3, #0
    6de4:	e051      	b.n	6e8a <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6de6:	68bb      	ldr	r3, [r7, #8]
    6de8:	f003 0302 	and.w	r3, r3, #2
    6dec:	2b00      	cmp	r3, #0
    6dee:	d04b      	beq.n	6e88 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6df0:	687b      	ldr	r3, [r7, #4]
    6df2:	685b      	ldr	r3, [r3, #4]
    6df4:	2b00      	cmp	r3, #0
    6df6:	d041      	beq.n	6e7c <_sercom_i2c_sync_analyse_flags+0x1ec>
    6df8:	8a7b      	ldrh	r3, [r7, #18]
    6dfa:	f003 0304 	and.w	r3, r3, #4
    6dfe:	2b00      	cmp	r3, #0
    6e00:	d13c      	bne.n	6e7c <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6e02:	687b      	ldr	r3, [r7, #4]
    6e04:	685b      	ldr	r3, [r3, #4]
    6e06:	1e5a      	subs	r2, r3, #1
    6e08:	687b      	ldr	r3, [r7, #4]
    6e0a:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6e0c:	687b      	ldr	r3, [r7, #4]
    6e0e:	685b      	ldr	r3, [r3, #4]
    6e10:	2b00      	cmp	r3, #0
    6e12:	d102      	bne.n	6e1a <_sercom_i2c_sync_analyse_flags+0x18a>
    6e14:	697b      	ldr	r3, [r7, #20]
    6e16:	2b00      	cmp	r3, #0
    6e18:	d006      	beq.n	6e28 <_sercom_i2c_sync_analyse_flags+0x198>
    6e1a:	687b      	ldr	r3, [r7, #4]
    6e1c:	685b      	ldr	r3, [r3, #4]
    6e1e:	2b01      	cmp	r3, #1
    6e20:	d105      	bne.n	6e2e <_sercom_i2c_sync_analyse_flags+0x19e>
    6e22:	697b      	ldr	r3, [r7, #20]
    6e24:	2b00      	cmp	r3, #0
    6e26:	d002      	beq.n	6e2e <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6e28:	68f8      	ldr	r0, [r7, #12]
    6e2a:	4b21      	ldr	r3, [pc, #132]	; (6eb0 <_sercom_i2c_sync_analyse_flags+0x220>)
    6e2c:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6e2e:	687b      	ldr	r3, [r7, #4]
    6e30:	685b      	ldr	r3, [r3, #4]
    6e32:	2b00      	cmp	r3, #0
    6e34:	d113      	bne.n	6e5e <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6e36:	687b      	ldr	r3, [r7, #4]
    6e38:	885b      	ldrh	r3, [r3, #2]
    6e3a:	b29b      	uxth	r3, r3
    6e3c:	b21b      	sxth	r3, r3
    6e3e:	2b00      	cmp	r3, #0
    6e40:	da05      	bge.n	6e4e <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6e42:	68f8      	ldr	r0, [r7, #12]
    6e44:	4b1b      	ldr	r3, [pc, #108]	; (6eb4 <_sercom_i2c_sync_analyse_flags+0x224>)
    6e46:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6e48:	68f8      	ldr	r0, [r7, #12]
    6e4a:	4b15      	ldr	r3, [pc, #84]	; (6ea0 <_sercom_i2c_sync_analyse_flags+0x210>)
    6e4c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6e4e:	687b      	ldr	r3, [r7, #4]
    6e50:	885b      	ldrh	r3, [r3, #2]
    6e52:	b29b      	uxth	r3, r3
    6e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e58:	b29a      	uxth	r2, r3
    6e5a:	687b      	ldr	r3, [r7, #4]
    6e5c:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6e5e:	687b      	ldr	r3, [r7, #4]
    6e60:	689c      	ldr	r4, [r3, #8]
    6e62:	1c62      	adds	r2, r4, #1
    6e64:	687b      	ldr	r3, [r7, #4]
    6e66:	609a      	str	r2, [r3, #8]
    6e68:	68f8      	ldr	r0, [r7, #12]
    6e6a:	4b13      	ldr	r3, [pc, #76]	; (6eb8 <_sercom_i2c_sync_analyse_flags+0x228>)
    6e6c:	4798      	blx	r3
    6e6e:	4603      	mov	r3, r0
    6e70:	b2db      	uxtb	r3, r3
    6e72:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6e74:	68f8      	ldr	r0, [r7, #12]
    6e76:	4b11      	ldr	r3, [pc, #68]	; (6ebc <_sercom_i2c_sync_analyse_flags+0x22c>)
    6e78:	4798      	blx	r3
    6e7a:	e005      	b.n	6e88 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6e7c:	68f8      	ldr	r0, [r7, #12]
    6e7e:	4b0f      	ldr	r3, [pc, #60]	; (6ebc <_sercom_i2c_sync_analyse_flags+0x22c>)
    6e80:	4798      	blx	r3
			return I2C_NACK;
    6e82:	f06f 0301 	mvn.w	r3, #1
    6e86:	e000      	b.n	6e8a <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6e88:	2300      	movs	r3, #0
}
    6e8a:	4618      	mov	r0, r3
    6e8c:	371c      	adds	r7, #28
    6e8e:	46bd      	mov	sp, r7
    6e90:	bd90      	pop	{r4, r7, pc}
    6e92:	bf00      	nop
    6e94:	00006755 	.word	0x00006755
    6e98:	00006b39 	.word	0x00006b39
    6e9c:	000065a9 	.word	0x000065a9
    6ea0:	00006c75 	.word	0x00006c75
    6ea4:	00006a45 	.word	0x00006a45
    6ea8:	00006a21 	.word	0x00006a21
    6eac:	00006a81 	.word	0x00006a81
    6eb0:	000068dd 	.word	0x000068dd
    6eb4:	000068b5 	.word	0x000068b5
    6eb8:	00006aa5 	.word	0x00006aa5
    6ebc:	000065c3 	.word	0x000065c3

00006ec0 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6ec0:	b580      	push	{r7, lr}
    6ec2:	b086      	sub	sp, #24
    6ec4:	af00      	add	r7, sp, #0
    6ec6:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    6ec8:	687b      	ldr	r3, [r7, #4]
    6eca:	691b      	ldr	r3, [r3, #16]
    6ecc:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6ece:	6938      	ldr	r0, [r7, #16]
    6ed0:	4b37      	ldr	r3, [pc, #220]	; (6fb0 <_sercom_i2c_m_irq_handler+0xf0>)
    6ed2:	4798      	blx	r3
    6ed4:	4603      	mov	r3, r0
    6ed6:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    6ed8:	2300      	movs	r3, #0
    6eda:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6edc:	687b      	ldr	r3, [r7, #4]
    6ede:	2b00      	cmp	r3, #0
    6ee0:	bf14      	ite	ne
    6ee2:	2301      	movne	r3, #1
    6ee4:	2300      	moveq	r3, #0
    6ee6:	b2db      	uxtb	r3, r3
    6ee8:	f240 422a 	movw	r2, #1066	; 0x42a
    6eec:	4931      	ldr	r1, [pc, #196]	; (6fb4 <_sercom_i2c_m_irq_handler+0xf4>)
    6eee:	4618      	mov	r0, r3
    6ef0:	4b31      	ldr	r3, [pc, #196]	; (6fb8 <_sercom_i2c_m_irq_handler+0xf8>)
    6ef2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6ef4:	687b      	ldr	r3, [r7, #4]
    6ef6:	691b      	ldr	r3, [r3, #16]
    6ef8:	2b00      	cmp	r3, #0
    6efa:	bf14      	ite	ne
    6efc:	2301      	movne	r3, #1
    6efe:	2300      	moveq	r3, #0
    6f00:	b2db      	uxtb	r3, r3
    6f02:	f240 422b 	movw	r2, #1067	; 0x42b
    6f06:	492b      	ldr	r1, [pc, #172]	; (6fb4 <_sercom_i2c_m_irq_handler+0xf4>)
    6f08:	4618      	mov	r0, r3
    6f0a:	4b2b      	ldr	r3, [pc, #172]	; (6fb8 <_sercom_i2c_m_irq_handler+0xf8>)
    6f0c:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    6f0e:	bf00      	nop
    6f10:	68fb      	ldr	r3, [r7, #12]
    6f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6f16:	2b00      	cmp	r3, #0
    6f18:	d126      	bne.n	6f68 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6f1a:	687b      	ldr	r3, [r7, #4]
    6f1c:	461a      	mov	r2, r3
    6f1e:	68f9      	ldr	r1, [r7, #12]
    6f20:	6938      	ldr	r0, [r7, #16]
    6f22:	4b26      	ldr	r3, [pc, #152]	; (6fbc <_sercom_i2c_m_irq_handler+0xfc>)
    6f24:	4798      	blx	r3
    6f26:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    6f28:	697b      	ldr	r3, [r7, #20]
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	d11b      	bne.n	6f66 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6f2e:	68fb      	ldr	r3, [r7, #12]
    6f30:	f003 0301 	and.w	r3, r3, #1
    6f34:	2b00      	cmp	r3, #0
    6f36:	d008      	beq.n	6f4a <_sercom_i2c_m_irq_handler+0x8a>
    6f38:	687b      	ldr	r3, [r7, #4]
    6f3a:	699b      	ldr	r3, [r3, #24]
    6f3c:	2b00      	cmp	r3, #0
    6f3e:	d004      	beq.n	6f4a <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6f40:	687b      	ldr	r3, [r7, #4]
    6f42:	699b      	ldr	r3, [r3, #24]
    6f44:	6878      	ldr	r0, [r7, #4]
    6f46:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    6f48:	e02e      	b.n	6fa8 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    6f4a:	68fb      	ldr	r3, [r7, #12]
    6f4c:	f003 0302 	and.w	r3, r3, #2
    6f50:	2b00      	cmp	r3, #0
    6f52:	d029      	beq.n	6fa8 <_sercom_i2c_m_irq_handler+0xe8>
    6f54:	687b      	ldr	r3, [r7, #4]
    6f56:	69db      	ldr	r3, [r3, #28]
    6f58:	2b00      	cmp	r3, #0
    6f5a:	d025      	beq.n	6fa8 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6f5c:	687b      	ldr	r3, [r7, #4]
    6f5e:	69db      	ldr	r3, [r3, #28]
    6f60:	6878      	ldr	r0, [r7, #4]
    6f62:	4798      	blx	r3
		return;
    6f64:	e020      	b.n	6fa8 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    6f66:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6f68:	687b      	ldr	r3, [r7, #4]
    6f6a:	885b      	ldrh	r3, [r3, #2]
    6f6c:	b29b      	uxth	r3, r3
    6f6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6f72:	b29a      	uxth	r2, r3
    6f74:	687b      	ldr	r3, [r7, #4]
    6f76:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    6f78:	687b      	ldr	r3, [r7, #4]
    6f7a:	695b      	ldr	r3, [r3, #20]
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d014      	beq.n	6faa <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6f80:	697b      	ldr	r3, [r7, #20]
    6f82:	2b00      	cmp	r3, #0
    6f84:	d005      	beq.n	6f92 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    6f86:	687b      	ldr	r3, [r7, #4]
    6f88:	695b      	ldr	r3, [r3, #20]
    6f8a:	6979      	ldr	r1, [r7, #20]
    6f8c:	6878      	ldr	r0, [r7, #4]
    6f8e:	4798      	blx	r3
    6f90:	e005      	b.n	6f9e <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6f92:	687b      	ldr	r3, [r7, #4]
    6f94:	695b      	ldr	r3, [r3, #20]
    6f96:	f06f 0104 	mvn.w	r1, #4
    6f9a:	6878      	ldr	r0, [r7, #4]
    6f9c:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    6f9e:	2180      	movs	r1, #128	; 0x80
    6fa0:	6938      	ldr	r0, [r7, #16]
    6fa2:	4b07      	ldr	r3, [pc, #28]	; (6fc0 <_sercom_i2c_m_irq_handler+0x100>)
    6fa4:	4798      	blx	r3
    6fa6:	e000      	b.n	6faa <_sercom_i2c_m_irq_handler+0xea>
		return;
    6fa8:	bf00      	nop
	}
}
    6faa:	3718      	adds	r7, #24
    6fac:	46bd      	mov	sp, r7
    6fae:	bd80      	pop	{r7, pc}
    6fb0:	000065dd 	.word	0x000065dd
    6fb4:	00011590 	.word	0x00011590
    6fb8:	00003f79 	.word	0x00003f79
    6fbc:	00006c91 	.word	0x00006c91
    6fc0:	000065f7 	.word	0x000065f7

00006fc4 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6fc4:	b580      	push	{r7, lr}
    6fc6:	b082      	sub	sp, #8
    6fc8:	af00      	add	r7, sp, #0
    6fca:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6fcc:	6878      	ldr	r0, [r7, #4]
    6fce:	4b05      	ldr	r3, [pc, #20]	; (6fe4 <_sercom_get_irq_num+0x20>)
    6fd0:	4798      	blx	r3
    6fd2:	4603      	mov	r3, r0
    6fd4:	009b      	lsls	r3, r3, #2
    6fd6:	b2db      	uxtb	r3, r3
    6fd8:	332e      	adds	r3, #46	; 0x2e
    6fda:	b2db      	uxtb	r3, r3
}
    6fdc:	4618      	mov	r0, r3
    6fde:	3708      	adds	r7, #8
    6fe0:	46bd      	mov	sp, r7
    6fe2:	bd80      	pop	{r7, pc}
    6fe4:	00006b5d 	.word	0x00006b5d

00006fe8 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    6fe8:	b580      	push	{r7, lr}
    6fea:	b086      	sub	sp, #24
    6fec:	af00      	add	r7, sp, #0
    6fee:	6078      	str	r0, [r7, #4]
    6ff0:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    6ff2:	687b      	ldr	r3, [r7, #4]
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	bf14      	ite	ne
    6ff8:	2301      	movne	r3, #1
    6ffa:	2300      	moveq	r3, #0
    6ffc:	b2db      	uxtb	r3, r3
    6ffe:	f240 429e 	movw	r2, #1182	; 0x49e
    7002:	491d      	ldr	r1, [pc, #116]	; (7078 <_i2c_m_async_init+0x90>)
    7004:	4618      	mov	r0, r3
    7006:	4b1d      	ldr	r3, [pc, #116]	; (707c <_i2c_m_async_init+0x94>)
    7008:	4798      	blx	r3

	i2c_dev->hw = hw;
    700a:	687b      	ldr	r3, [r7, #4]
    700c:	683a      	ldr	r2, [r7, #0]
    700e:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    7010:	687b      	ldr	r3, [r7, #4]
    7012:	6839      	ldr	r1, [r7, #0]
    7014:	4618      	mov	r0, r3
    7016:	4b1a      	ldr	r3, [pc, #104]	; (7080 <_i2c_m_async_init+0x98>)
    7018:	4798      	blx	r3
    701a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    701c:	68fb      	ldr	r3, [r7, #12]
    701e:	2b00      	cmp	r3, #0
    7020:	d001      	beq.n	7026 <_i2c_m_async_init+0x3e>
		return init_status;
    7022:	68fb      	ldr	r3, [r7, #12]
    7024:	e024      	b.n	7070 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    7026:	6879      	ldr	r1, [r7, #4]
    7028:	6838      	ldr	r0, [r7, #0]
    702a:	4b16      	ldr	r3, [pc, #88]	; (7084 <_i2c_m_async_init+0x9c>)
    702c:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    702e:	6838      	ldr	r0, [r7, #0]
    7030:	4b15      	ldr	r3, [pc, #84]	; (7088 <_i2c_m_async_init+0xa0>)
    7032:	4798      	blx	r3
    7034:	4603      	mov	r3, r0
    7036:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    7038:	2300      	movs	r3, #0
    703a:	613b      	str	r3, [r7, #16]
    703c:	e014      	b.n	7068 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    703e:	7dfb      	ldrb	r3, [r7, #23]
    7040:	b21b      	sxth	r3, r3
    7042:	4618      	mov	r0, r3
    7044:	4b11      	ldr	r3, [pc, #68]	; (708c <_i2c_m_async_init+0xa4>)
    7046:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    7048:	7dfb      	ldrb	r3, [r7, #23]
    704a:	b21b      	sxth	r3, r3
    704c:	4618      	mov	r0, r3
    704e:	4b10      	ldr	r3, [pc, #64]	; (7090 <_i2c_m_async_init+0xa8>)
    7050:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    7052:	7dfb      	ldrb	r3, [r7, #23]
    7054:	b21b      	sxth	r3, r3
    7056:	4618      	mov	r0, r3
    7058:	4b0e      	ldr	r3, [pc, #56]	; (7094 <_i2c_m_async_init+0xac>)
    705a:	4798      	blx	r3
		irq++;
    705c:	7dfb      	ldrb	r3, [r7, #23]
    705e:	3301      	adds	r3, #1
    7060:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    7062:	693b      	ldr	r3, [r7, #16]
    7064:	3301      	adds	r3, #1
    7066:	613b      	str	r3, [r7, #16]
    7068:	693b      	ldr	r3, [r7, #16]
    706a:	2b03      	cmp	r3, #3
    706c:	d9e7      	bls.n	703e <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    706e:	2300      	movs	r3, #0
}
    7070:	4618      	mov	r0, r3
    7072:	3718      	adds	r7, #24
    7074:	46bd      	mov	sp, r7
    7076:	bd80      	pop	{r7, pc}
    7078:	00011590 	.word	0x00011590
    707c:	00003f79 	.word	0x00003f79
    7080:	000072b1 	.word	0x000072b1
    7084:	00006bb9 	.word	0x00006bb9
    7088:	00006fc5 	.word	0x00006fc5
    708c:	00006491 	.word	0x00006491
    7090:	000064d5 	.word	0x000064d5
    7094:	00006455 	.word	0x00006455

00007098 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    7098:	b590      	push	{r4, r7, lr}
    709a:	b087      	sub	sp, #28
    709c:	af00      	add	r7, sp, #0
    709e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    70a0:	687b      	ldr	r3, [r7, #4]
    70a2:	691b      	ldr	r3, [r3, #16]
    70a4:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    70a6:	687b      	ldr	r3, [r7, #4]
    70a8:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    70aa:	6978      	ldr	r0, [r7, #20]
    70ac:	4b33      	ldr	r3, [pc, #204]	; (717c <_sercom_i2c_send_address+0xe4>)
    70ae:	4798      	blx	r3
    70b0:	4603      	mov	r3, r0
    70b2:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    70b4:	687b      	ldr	r3, [r7, #4]
    70b6:	2b00      	cmp	r3, #0
    70b8:	bf14      	ite	ne
    70ba:	2301      	movne	r3, #1
    70bc:	2300      	moveq	r3, #0
    70be:	b2db      	uxtb	r3, r3
    70c0:	f240 42cc 	movw	r2, #1228	; 0x4cc
    70c4:	492e      	ldr	r1, [pc, #184]	; (7180 <_sercom_i2c_send_address+0xe8>)
    70c6:	4618      	mov	r0, r3
    70c8:	4b2e      	ldr	r3, [pc, #184]	; (7184 <_sercom_i2c_send_address+0xec>)
    70ca:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    70cc:	693b      	ldr	r3, [r7, #16]
    70ce:	685b      	ldr	r3, [r3, #4]
    70d0:	2b01      	cmp	r3, #1
    70d2:	d106      	bne.n	70e2 <_sercom_i2c_send_address+0x4a>
    70d4:	68fb      	ldr	r3, [r7, #12]
    70d6:	2b00      	cmp	r3, #0
    70d8:	d003      	beq.n	70e2 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    70da:	6978      	ldr	r0, [r7, #20]
    70dc:	4b2a      	ldr	r3, [pc, #168]	; (7188 <_sercom_i2c_send_address+0xf0>)
    70de:	4798      	blx	r3
    70e0:	e002      	b.n	70e8 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    70e2:	6978      	ldr	r0, [r7, #20]
    70e4:	4b29      	ldr	r3, [pc, #164]	; (718c <_sercom_i2c_send_address+0xf4>)
    70e6:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    70e8:	693b      	ldr	r3, [r7, #16]
    70ea:	881b      	ldrh	r3, [r3, #0]
    70ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    70f0:	2b00      	cmp	r3, #0
    70f2:	d022      	beq.n	713a <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    70f4:	693b      	ldr	r3, [r7, #16]
    70f6:	885b      	ldrh	r3, [r3, #2]
    70f8:	b29b      	uxth	r3, r3
    70fa:	f003 0301 	and.w	r3, r3, #1
    70fe:	2b00      	cmp	r3, #0
    7100:	d007      	beq.n	7112 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    7102:	693b      	ldr	r3, [r7, #16]
    7104:	885b      	ldrh	r3, [r3, #2]
    7106:	b29b      	uxth	r3, r3
    7108:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    710c:	b29a      	uxth	r2, r3
    710e:	693b      	ldr	r3, [r7, #16]
    7110:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    7112:	693b      	ldr	r3, [r7, #16]
    7114:	881b      	ldrh	r3, [r3, #0]
    7116:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7118:	f240 74fe 	movw	r4, #2046	; 0x7fe
    711c:	401c      	ands	r4, r3
    711e:	6978      	ldr	r0, [r7, #20]
    7120:	4b1b      	ldr	r3, [pc, #108]	; (7190 <_sercom_i2c_send_address+0xf8>)
    7122:	4798      	blx	r3
    7124:	4603      	mov	r3, r0
    7126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    712a:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    712c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7130:	4619      	mov	r1, r3
    7132:	6978      	ldr	r0, [r7, #20]
    7134:	4b17      	ldr	r3, [pc, #92]	; (7194 <_sercom_i2c_send_address+0xfc>)
    7136:	4798      	blx	r3
    7138:	e01a      	b.n	7170 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    713a:	693b      	ldr	r3, [r7, #16]
    713c:	881b      	ldrh	r3, [r3, #0]
    713e:	005b      	lsls	r3, r3, #1
    7140:	b2db      	uxtb	r3, r3
    7142:	693a      	ldr	r2, [r7, #16]
    7144:	8852      	ldrh	r2, [r2, #2]
    7146:	b292      	uxth	r2, r2
    7148:	f002 0201 	and.w	r2, r2, #1
    714c:	2a00      	cmp	r2, #0
    714e:	bf14      	ite	ne
    7150:	2201      	movne	r2, #1
    7152:	2200      	moveq	r2, #0
    7154:	b2d2      	uxtb	r2, r2
    7156:	4313      	orrs	r3, r2
    7158:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    715a:	6978      	ldr	r0, [r7, #20]
    715c:	4b0c      	ldr	r3, [pc, #48]	; (7190 <_sercom_i2c_send_address+0xf8>)
    715e:	4798      	blx	r3
    7160:	4603      	mov	r3, r0
    7162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    7166:	4323      	orrs	r3, r4
    7168:	4619      	mov	r1, r3
    716a:	6978      	ldr	r0, [r7, #20]
    716c:	4b09      	ldr	r3, [pc, #36]	; (7194 <_sercom_i2c_send_address+0xfc>)
    716e:	4798      	blx	r3
	}

	return ERR_NONE;
    7170:	2300      	movs	r3, #0
}
    7172:	4618      	mov	r0, r3
    7174:	371c      	adds	r7, #28
    7176:	46bd      	mov	sp, r7
    7178:	bd90      	pop	{r4, r7, pc}
    717a:	bf00      	nop
    717c:	00006755 	.word	0x00006755
    7180:	00011590 	.word	0x00011590
    7184:	00003f79 	.word	0x00003f79
    7188:	000068dd 	.word	0x000068dd
    718c:	00006905 	.word	0x00006905
    7190:	00006a45 	.word	0x00006a45
    7194:	00006a21 	.word	0x00006a21

00007198 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    7198:	b580      	push	{r7, lr}
    719a:	b084      	sub	sp, #16
    719c:	af00      	add	r7, sp, #0
    719e:	6078      	str	r0, [r7, #4]
    71a0:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    71a2:	687b      	ldr	r3, [r7, #4]
    71a4:	2b00      	cmp	r3, #0
    71a6:	bf14      	ite	ne
    71a8:	2301      	movne	r3, #1
    71aa:	2300      	moveq	r3, #0
    71ac:	b2db      	uxtb	r3, r3
    71ae:	f240 42f4 	movw	r2, #1268	; 0x4f4
    71b2:	492a      	ldr	r1, [pc, #168]	; (725c <_i2c_m_async_transfer+0xc4>)
    71b4:	4618      	mov	r0, r3
    71b6:	4b2a      	ldr	r3, [pc, #168]	; (7260 <_i2c_m_async_transfer+0xc8>)
    71b8:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    71ba:	687b      	ldr	r3, [r7, #4]
    71bc:	691b      	ldr	r3, [r3, #16]
    71be:	2b00      	cmp	r3, #0
    71c0:	bf14      	ite	ne
    71c2:	2301      	movne	r3, #1
    71c4:	2300      	moveq	r3, #0
    71c6:	b2db      	uxtb	r3, r3
    71c8:	f240 42f5 	movw	r2, #1269	; 0x4f5
    71cc:	4923      	ldr	r1, [pc, #140]	; (725c <_i2c_m_async_transfer+0xc4>)
    71ce:	4618      	mov	r0, r3
    71d0:	4b23      	ldr	r3, [pc, #140]	; (7260 <_i2c_m_async_transfer+0xc8>)
    71d2:	4798      	blx	r3
	ASSERT(msg);
    71d4:	683b      	ldr	r3, [r7, #0]
    71d6:	2b00      	cmp	r3, #0
    71d8:	bf14      	ite	ne
    71da:	2301      	movne	r3, #1
    71dc:	2300      	moveq	r3, #0
    71de:	b2db      	uxtb	r3, r3
    71e0:	f240 42f6 	movw	r2, #1270	; 0x4f6
    71e4:	491d      	ldr	r1, [pc, #116]	; (725c <_i2c_m_async_transfer+0xc4>)
    71e6:	4618      	mov	r0, r3
    71e8:	4b1d      	ldr	r3, [pc, #116]	; (7260 <_i2c_m_async_transfer+0xc8>)
    71ea:	4798      	blx	r3

	if (msg->len == 0) {
    71ec:	683b      	ldr	r3, [r7, #0]
    71ee:	685b      	ldr	r3, [r3, #4]
    71f0:	2b00      	cmp	r3, #0
    71f2:	d101      	bne.n	71f8 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    71f4:	2300      	movs	r3, #0
    71f6:	e02d      	b.n	7254 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    71f8:	687b      	ldr	r3, [r7, #4]
    71fa:	885b      	ldrh	r3, [r3, #2]
    71fc:	b29b      	uxth	r3, r3
    71fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7202:	2b00      	cmp	r3, #0
    7204:	d002      	beq.n	720c <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    7206:	f06f 0303 	mvn.w	r3, #3
    720a:	e023      	b.n	7254 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    720c:	683b      	ldr	r3, [r7, #0]
    720e:	885b      	ldrh	r3, [r3, #2]
    7210:	b29b      	uxth	r3, r3
    7212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7216:	b29a      	uxth	r2, r3
    7218:	683b      	ldr	r3, [r7, #0]
    721a:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    721c:	687b      	ldr	r3, [r7, #4]
    721e:	683a      	ldr	r2, [r7, #0]
    7220:	ca07      	ldmia	r2, {r0, r1, r2}
    7222:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    7226:	687b      	ldr	r3, [r7, #4]
    7228:	691b      	ldr	r3, [r3, #16]
    722a:	4618      	mov	r0, r3
    722c:	4b0d      	ldr	r3, [pc, #52]	; (7264 <_i2c_m_async_transfer+0xcc>)
    722e:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    7230:	6878      	ldr	r0, [r7, #4]
    7232:	4b0d      	ldr	r3, [pc, #52]	; (7268 <_i2c_m_async_transfer+0xd0>)
    7234:	4798      	blx	r3
    7236:	60f8      	str	r0, [r7, #12]

	if (ret) {
    7238:	68fb      	ldr	r3, [r7, #12]
    723a:	2b00      	cmp	r3, #0
    723c:	d009      	beq.n	7252 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    723e:	687b      	ldr	r3, [r7, #4]
    7240:	885b      	ldrh	r3, [r3, #2]
    7242:	b29b      	uxth	r3, r3
    7244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7248:	b29a      	uxth	r2, r3
    724a:	687b      	ldr	r3, [r7, #4]
    724c:	805a      	strh	r2, [r3, #2]

		return ret;
    724e:	68fb      	ldr	r3, [r7, #12]
    7250:	e000      	b.n	7254 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    7252:	2300      	movs	r3, #0
}
    7254:	4618      	mov	r0, r3
    7256:	3710      	adds	r7, #16
    7258:	46bd      	mov	sp, r7
    725a:	bd80      	pop	{r7, pc}
    725c:	00011590 	.word	0x00011590
    7260:	00003f79 	.word	0x00003f79
    7264:	0000688d 	.word	0x0000688d
    7268:	00007099 	.word	0x00007099

0000726c <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    726c:	b480      	push	{r7}
    726e:	b085      	sub	sp, #20
    7270:	af00      	add	r7, sp, #0
    7272:	60f8      	str	r0, [r7, #12]
    7274:	460b      	mov	r3, r1
    7276:	607a      	str	r2, [r7, #4]
    7278:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    727a:	7afb      	ldrb	r3, [r7, #11]
    727c:	2b01      	cmp	r3, #1
    727e:	d008      	beq.n	7292 <_i2c_m_async_register_callback+0x26>
    7280:	2b02      	cmp	r3, #2
    7282:	d00a      	beq.n	729a <_i2c_m_async_register_callback+0x2e>
    7284:	2b00      	cmp	r3, #0
    7286:	d000      	beq.n	728a <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    7288:	e00b      	b.n	72a2 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    728a:	68fb      	ldr	r3, [r7, #12]
    728c:	687a      	ldr	r2, [r7, #4]
    728e:	615a      	str	r2, [r3, #20]
		break;
    7290:	e007      	b.n	72a2 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    7292:	68fb      	ldr	r3, [r7, #12]
    7294:	687a      	ldr	r2, [r7, #4]
    7296:	619a      	str	r2, [r3, #24]
		break;
    7298:	e003      	b.n	72a2 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    729a:	68fb      	ldr	r3, [r7, #12]
    729c:	687a      	ldr	r2, [r7, #4]
    729e:	61da      	str	r2, [r3, #28]
		break;
    72a0:	bf00      	nop
	}

	return ERR_NONE;
    72a2:	2300      	movs	r3, #0
}
    72a4:	4618      	mov	r0, r3
    72a6:	3714      	adds	r7, #20
    72a8:	46bd      	mov	sp, r7
    72aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    72ae:	4770      	bx	lr

000072b0 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    72b0:	b580      	push	{r7, lr}
    72b2:	b084      	sub	sp, #16
    72b4:	af00      	add	r7, sp, #0
    72b6:	6078      	str	r0, [r7, #4]
    72b8:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    72ba:	6838      	ldr	r0, [r7, #0]
    72bc:	4b42      	ldr	r3, [pc, #264]	; (73c8 <_i2c_m_sync_init_impl+0x118>)
    72be:	4798      	blx	r3
    72c0:	4603      	mov	r3, r0
    72c2:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    72c4:	2101      	movs	r1, #1
    72c6:	6838      	ldr	r0, [r7, #0]
    72c8:	4b40      	ldr	r3, [pc, #256]	; (73cc <_i2c_m_sync_init_impl+0x11c>)
    72ca:	4798      	blx	r3
    72cc:	4603      	mov	r3, r0
    72ce:	f083 0301 	eor.w	r3, r3, #1
    72d2:	b2db      	uxtb	r3, r3
    72d4:	2b00      	cmp	r3, #0
    72d6:	d020      	beq.n	731a <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    72d8:	7bfa      	ldrb	r2, [r7, #15]
    72da:	493d      	ldr	r1, [pc, #244]	; (73d0 <_i2c_m_sync_init_impl+0x120>)
    72dc:	4613      	mov	r3, r2
    72de:	005b      	lsls	r3, r3, #1
    72e0:	4413      	add	r3, r2
    72e2:	00db      	lsls	r3, r3, #3
    72e4:	440b      	add	r3, r1
    72e6:	3304      	adds	r3, #4
    72e8:	681b      	ldr	r3, [r3, #0]
    72ea:	f003 031c 	and.w	r3, r3, #28
    72ee:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    72f0:	2102      	movs	r1, #2
    72f2:	6838      	ldr	r0, [r7, #0]
    72f4:	4b37      	ldr	r3, [pc, #220]	; (73d4 <_i2c_m_sync_init_impl+0x124>)
    72f6:	4798      	blx	r3
    72f8:	4603      	mov	r3, r0
    72fa:	2b00      	cmp	r3, #0
    72fc:	d006      	beq.n	730c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    72fe:	6838      	ldr	r0, [r7, #0]
    7300:	4b35      	ldr	r3, [pc, #212]	; (73d8 <_i2c_m_sync_init_impl+0x128>)
    7302:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    7304:	2102      	movs	r1, #2
    7306:	6838      	ldr	r0, [r7, #0]
    7308:	4b34      	ldr	r3, [pc, #208]	; (73dc <_i2c_m_sync_init_impl+0x12c>)
    730a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    730c:	68bb      	ldr	r3, [r7, #8]
    730e:	f043 0301 	orr.w	r3, r3, #1
    7312:	4619      	mov	r1, r3
    7314:	6838      	ldr	r0, [r7, #0]
    7316:	4b32      	ldr	r3, [pc, #200]	; (73e0 <_i2c_m_sync_init_impl+0x130>)
    7318:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    731a:	2101      	movs	r1, #1
    731c:	6838      	ldr	r0, [r7, #0]
    731e:	4b2f      	ldr	r3, [pc, #188]	; (73dc <_i2c_m_sync_init_impl+0x12c>)
    7320:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    7322:	7bfa      	ldrb	r2, [r7, #15]
    7324:	492a      	ldr	r1, [pc, #168]	; (73d0 <_i2c_m_sync_init_impl+0x120>)
    7326:	4613      	mov	r3, r2
    7328:	005b      	lsls	r3, r3, #1
    732a:	4413      	add	r3, r2
    732c:	00db      	lsls	r3, r3, #3
    732e:	440b      	add	r3, r1
    7330:	3304      	adds	r3, #4
    7332:	681b      	ldr	r3, [r3, #0]
    7334:	4619      	mov	r1, r3
    7336:	6838      	ldr	r0, [r7, #0]
    7338:	4b29      	ldr	r3, [pc, #164]	; (73e0 <_i2c_m_sync_init_impl+0x130>)
    733a:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    733c:	7bfa      	ldrb	r2, [r7, #15]
    733e:	4924      	ldr	r1, [pc, #144]	; (73d0 <_i2c_m_sync_init_impl+0x120>)
    7340:	4613      	mov	r3, r2
    7342:	005b      	lsls	r3, r3, #1
    7344:	4413      	add	r3, r2
    7346:	00db      	lsls	r3, r3, #3
    7348:	440b      	add	r3, r1
    734a:	3308      	adds	r3, #8
    734c:	681b      	ldr	r3, [r3, #0]
    734e:	4619      	mov	r1, r3
    7350:	6838      	ldr	r0, [r7, #0]
    7352:	4b24      	ldr	r3, [pc, #144]	; (73e4 <_i2c_m_sync_init_impl+0x134>)
    7354:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    7356:	7bfa      	ldrb	r2, [r7, #15]
    7358:	491d      	ldr	r1, [pc, #116]	; (73d0 <_i2c_m_sync_init_impl+0x120>)
    735a:	4613      	mov	r3, r2
    735c:	005b      	lsls	r3, r3, #1
    735e:	4413      	add	r3, r2
    7360:	00db      	lsls	r3, r3, #3
    7362:	440b      	add	r3, r1
    7364:	330c      	adds	r3, #12
    7366:	681b      	ldr	r3, [r3, #0]
    7368:	4619      	mov	r1, r3
    736a:	6838      	ldr	r0, [r7, #0]
    736c:	4b1e      	ldr	r3, [pc, #120]	; (73e8 <_i2c_m_sync_init_impl+0x138>)
    736e:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    7370:	7bfa      	ldrb	r2, [r7, #15]
    7372:	4917      	ldr	r1, [pc, #92]	; (73d0 <_i2c_m_sync_init_impl+0x120>)
    7374:	4613      	mov	r3, r2
    7376:	005b      	lsls	r3, r3, #1
    7378:	4413      	add	r3, r2
    737a:	00db      	lsls	r3, r3, #3
    737c:	440b      	add	r3, r1
    737e:	3304      	adds	r3, #4
    7380:	681b      	ldr	r3, [r3, #0]
    7382:	0e1b      	lsrs	r3, r3, #24
    7384:	b29b      	uxth	r3, r3
    7386:	f003 0303 	and.w	r3, r3, #3
    738a:	b29a      	uxth	r2, r3
    738c:	687b      	ldr	r3, [r7, #4]
    738e:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    7390:	687b      	ldr	r3, [r7, #4]
    7392:	899b      	ldrh	r3, [r3, #12]
    7394:	2b01      	cmp	r3, #1
    7396:	bf8c      	ite	hi
    7398:	2301      	movhi	r3, #1
    739a:	2300      	movls	r3, #0
    739c:	b2db      	uxtb	r3, r3
    739e:	4619      	mov	r1, r3
    73a0:	6838      	ldr	r0, [r7, #0]
    73a2:	4b12      	ldr	r3, [pc, #72]	; (73ec <_i2c_m_sync_init_impl+0x13c>)
    73a4:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    73a6:	7bfa      	ldrb	r2, [r7, #15]
    73a8:	4909      	ldr	r1, [pc, #36]	; (73d0 <_i2c_m_sync_init_impl+0x120>)
    73aa:	4613      	mov	r3, r2
    73ac:	005b      	lsls	r3, r3, #1
    73ae:	4413      	add	r3, r2
    73b0:	00db      	lsls	r3, r3, #3
    73b2:	440b      	add	r3, r1
    73b4:	3312      	adds	r3, #18
    73b6:	881a      	ldrh	r2, [r3, #0]
    73b8:	687b      	ldr	r3, [r7, #4]
    73ba:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    73bc:	2300      	movs	r3, #0
}
    73be:	4618      	mov	r0, r3
    73c0:	3710      	adds	r7, #16
    73c2:	46bd      	mov	sp, r7
    73c4:	bd80      	pop	{r7, pc}
    73c6:	bf00      	nop
    73c8:	00006c0d 	.word	0x00006c0d
    73cc:	00006535 	.word	0x00006535
    73d0:	20000018 	.word	0x20000018
    73d4:	00006785 	.word	0x00006785
    73d8:	0000672d 	.word	0x0000672d
    73dc:	00006511 	.word	0x00006511
    73e0:	000067b5 	.word	0x000067b5
    73e4:	0000695d 	.word	0x0000695d
    73e8:	000069a5 	.word	0x000069a5
    73ec:	000069e1 	.word	0x000069e1

000073f0 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    73f0:	b580      	push	{r7, lr}
    73f2:	b082      	sub	sp, #8
    73f4:	af00      	add	r7, sp, #0
    73f6:	6078      	str	r0, [r7, #4]
    73f8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    73fa:	687b      	ldr	r3, [r7, #4]
    73fc:	2b00      	cmp	r3, #0
    73fe:	d004      	beq.n	740a <_spi_load_regs_master+0x1a>
    7400:	683b      	ldr	r3, [r7, #0]
    7402:	2b00      	cmp	r3, #0
    7404:	d001      	beq.n	740a <_spi_load_regs_master+0x1a>
    7406:	2301      	movs	r3, #1
    7408:	e000      	b.n	740c <_spi_load_regs_master+0x1c>
    740a:	2300      	movs	r3, #0
    740c:	f003 0301 	and.w	r3, r3, #1
    7410:	b2db      	uxtb	r3, r3
    7412:	f640 1245 	movw	r2, #2373	; 0x945
    7416:	4915      	ldr	r1, [pc, #84]	; (746c <_spi_load_regs_master+0x7c>)
    7418:	4618      	mov	r0, r3
    741a:	4b15      	ldr	r3, [pc, #84]	; (7470 <_spi_load_regs_master+0x80>)
    741c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    741e:	683b      	ldr	r3, [r7, #0]
    7420:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7422:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7426:	f023 0301 	bic.w	r3, r3, #1
    742a:	4619      	mov	r1, r3
    742c:	6878      	ldr	r0, [r7, #4]
    742e:	4b11      	ldr	r3, [pc, #68]	; (7474 <_spi_load_regs_master+0x84>)
    7430:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    7432:	683b      	ldr	r3, [r7, #0]
    7434:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    7436:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    743a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    743e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7442:	4619      	mov	r1, r3
    7444:	6878      	ldr	r0, [r7, #4]
    7446:	4b0c      	ldr	r3, [pc, #48]	; (7478 <_spi_load_regs_master+0x88>)
    7448:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    744a:	683b      	ldr	r3, [r7, #0]
    744c:	7b1b      	ldrb	r3, [r3, #12]
    744e:	4619      	mov	r1, r3
    7450:	6878      	ldr	r0, [r7, #4]
    7452:	4b0a      	ldr	r3, [pc, #40]	; (747c <_spi_load_regs_master+0x8c>)
    7454:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7456:	683b      	ldr	r3, [r7, #0]
    7458:	7b5b      	ldrb	r3, [r3, #13]
    745a:	4619      	mov	r1, r3
    745c:	6878      	ldr	r0, [r7, #4]
    745e:	4b08      	ldr	r3, [pc, #32]	; (7480 <_spi_load_regs_master+0x90>)
    7460:	4798      	blx	r3
}
    7462:	bf00      	nop
    7464:	3708      	adds	r7, #8
    7466:	46bd      	mov	sp, r7
    7468:	bd80      	pop	{r7, pc}
    746a:	bf00      	nop
    746c:	00011590 	.word	0x00011590
    7470:	00003f79 	.word	0x00003f79
    7474:	00006869 	.word	0x00006869
    7478:	00006981 	.word	0x00006981
    747c:	000069c1 	.word	0x000069c1
    7480:	00006af9 	.word	0x00006af9

00007484 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7484:	b580      	push	{r7, lr}
    7486:	b082      	sub	sp, #8
    7488:	af00      	add	r7, sp, #0
    748a:	6078      	str	r0, [r7, #4]
    748c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    748e:	687b      	ldr	r3, [r7, #4]
    7490:	2b00      	cmp	r3, #0
    7492:	d004      	beq.n	749e <_spi_load_regs_slave+0x1a>
    7494:	683b      	ldr	r3, [r7, #0]
    7496:	2b00      	cmp	r3, #0
    7498:	d001      	beq.n	749e <_spi_load_regs_slave+0x1a>
    749a:	2301      	movs	r3, #1
    749c:	e000      	b.n	74a0 <_spi_load_regs_slave+0x1c>
    749e:	2300      	movs	r3, #0
    74a0:	f003 0301 	and.w	r3, r3, #1
    74a4:	b2db      	uxtb	r3, r3
    74a6:	f640 1259 	movw	r2, #2393	; 0x959
    74aa:	491a      	ldr	r1, [pc, #104]	; (7514 <_spi_load_regs_slave+0x90>)
    74ac:	4618      	mov	r0, r3
    74ae:	4b1a      	ldr	r3, [pc, #104]	; (7518 <_spi_load_regs_slave+0x94>)
    74b0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    74b2:	683b      	ldr	r3, [r7, #0]
    74b4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    74b6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    74ba:	f023 0301 	bic.w	r3, r3, #1
    74be:	4619      	mov	r1, r3
    74c0:	6878      	ldr	r0, [r7, #4]
    74c2:	4b16      	ldr	r3, [pc, #88]	; (751c <_spi_load_regs_slave+0x98>)
    74c4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    74c6:	683b      	ldr	r3, [r7, #0]
    74c8:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    74ca:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    74ce:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    74d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    74d6:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    74da:	4619      	mov	r1, r3
    74dc:	6878      	ldr	r0, [r7, #4]
    74de:	4b10      	ldr	r3, [pc, #64]	; (7520 <_spi_load_regs_slave+0x9c>)
    74e0:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    74e2:	683b      	ldr	r3, [r7, #0]
    74e4:	689b      	ldr	r3, [r3, #8]
    74e6:	4619      	mov	r1, r3
    74e8:	6878      	ldr	r0, [r7, #4]
    74ea:	4b0e      	ldr	r3, [pc, #56]	; (7524 <_spi_load_regs_slave+0xa0>)
    74ec:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    74ee:	683b      	ldr	r3, [r7, #0]
    74f0:	7b5b      	ldrb	r3, [r3, #13]
    74f2:	4619      	mov	r1, r3
    74f4:	6878      	ldr	r0, [r7, #4]
    74f6:	4b0c      	ldr	r3, [pc, #48]	; (7528 <_spi_load_regs_slave+0xa4>)
    74f8:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    74fa:	bf00      	nop
    74fc:	f04f 31ff 	mov.w	r1, #4294967295
    7500:	6878      	ldr	r0, [r7, #4]
    7502:	4b0a      	ldr	r3, [pc, #40]	; (752c <_spi_load_regs_slave+0xa8>)
    7504:	4798      	blx	r3
    7506:	4603      	mov	r3, r0
    7508:	2b00      	cmp	r3, #0
    750a:	d1f7      	bne.n	74fc <_spi_load_regs_slave+0x78>
		;
}
    750c:	bf00      	nop
    750e:	3708      	adds	r7, #8
    7510:	46bd      	mov	sp, r7
    7512:	bd80      	pop	{r7, pc}
    7514:	00011590 	.word	0x00011590
    7518:	00003f79 	.word	0x00003f79
    751c:	00006869 	.word	0x00006869
    7520:	00006981 	.word	0x00006981
    7524:	00006a65 	.word	0x00006a65
    7528:	00006af9 	.word	0x00006af9
    752c:	00006581 	.word	0x00006581

00007530 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    7530:	b580      	push	{r7, lr}
    7532:	b084      	sub	sp, #16
    7534:	af00      	add	r7, sp, #0
    7536:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7538:	687b      	ldr	r3, [r7, #4]
    753a:	4618      	mov	r0, r3
    753c:	4b11      	ldr	r3, [pc, #68]	; (7584 <_spi_get_regs+0x54>)
    753e:	4798      	blx	r3
    7540:	4603      	mov	r3, r0
    7542:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7544:	2300      	movs	r3, #0
    7546:	73fb      	strb	r3, [r7, #15]
    7548:	e014      	b.n	7574 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    754a:	7bfa      	ldrb	r2, [r7, #15]
    754c:	490e      	ldr	r1, [pc, #56]	; (7588 <_spi_get_regs+0x58>)
    754e:	4613      	mov	r3, r2
    7550:	011b      	lsls	r3, r3, #4
    7552:	4413      	add	r3, r2
    7554:	440b      	add	r3, r1
    7556:	3310      	adds	r3, #16
    7558:	781b      	ldrb	r3, [r3, #0]
    755a:	7bba      	ldrb	r2, [r7, #14]
    755c:	429a      	cmp	r2, r3
    755e:	d106      	bne.n	756e <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7560:	7bfa      	ldrb	r2, [r7, #15]
    7562:	4613      	mov	r3, r2
    7564:	011b      	lsls	r3, r3, #4
    7566:	4413      	add	r3, r2
    7568:	4a07      	ldr	r2, [pc, #28]	; (7588 <_spi_get_regs+0x58>)
    756a:	4413      	add	r3, r2
    756c:	e006      	b.n	757c <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    756e:	7bfb      	ldrb	r3, [r7, #15]
    7570:	3301      	adds	r3, #1
    7572:	73fb      	strb	r3, [r7, #15]
    7574:	7bfb      	ldrb	r3, [r7, #15]
    7576:	2b02      	cmp	r3, #2
    7578:	d9e7      	bls.n	754a <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    757a:	2300      	movs	r3, #0
}
    757c:	4618      	mov	r0, r3
    757e:	3710      	adds	r7, #16
    7580:	46bd      	mov	sp, r7
    7582:	bd80      	pop	{r7, pc}
    7584:	00006b5d 	.word	0x00006b5d
    7588:	000115cc 	.word	0x000115cc

0000758c <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    758c:	b580      	push	{r7, lr}
    758e:	b084      	sub	sp, #16
    7590:	af00      	add	r7, sp, #0
    7592:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    7594:	687b      	ldr	r3, [r7, #4]
    7596:	681b      	ldr	r3, [r3, #0]
    7598:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    759a:	68f8      	ldr	r0, [r7, #12]
    759c:	4b21      	ldr	r3, [pc, #132]	; (7624 <_spi_handler+0x98>)
    759e:	4798      	blx	r3
    75a0:	4603      	mov	r3, r0
    75a2:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    75a4:	68f8      	ldr	r0, [r7, #12]
    75a6:	4b20      	ldr	r3, [pc, #128]	; (7628 <_spi_handler+0x9c>)
    75a8:	4798      	blx	r3
    75aa:	4603      	mov	r3, r0
    75ac:	461a      	mov	r2, r3
    75ae:	7afb      	ldrb	r3, [r7, #11]
    75b0:	4013      	ands	r3, r2
    75b2:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    75b4:	7afb      	ldrb	r3, [r7, #11]
    75b6:	f003 0301 	and.w	r3, r3, #1
    75ba:	2b00      	cmp	r3, #0
    75bc:	d004      	beq.n	75c8 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    75be:	687b      	ldr	r3, [r7, #4]
    75c0:	689b      	ldr	r3, [r3, #8]
    75c2:	6878      	ldr	r0, [r7, #4]
    75c4:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    75c6:	e029      	b.n	761c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    75c8:	7afb      	ldrb	r3, [r7, #11]
    75ca:	f003 0304 	and.w	r3, r3, #4
    75ce:	2b00      	cmp	r3, #0
    75d0:	d004      	beq.n	75dc <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	68db      	ldr	r3, [r3, #12]
    75d6:	6878      	ldr	r0, [r7, #4]
    75d8:	4798      	blx	r3
}
    75da:	e01f      	b.n	761c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    75dc:	7afb      	ldrb	r3, [r7, #11]
    75de:	f003 0302 	and.w	r3, r3, #2
    75e2:	2b00      	cmp	r3, #0
    75e4:	d008      	beq.n	75f8 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    75e6:	2102      	movs	r1, #2
    75e8:	68f8      	ldr	r0, [r7, #12]
    75ea:	4b10      	ldr	r3, [pc, #64]	; (762c <_spi_handler+0xa0>)
    75ec:	4798      	blx	r3
		dev->callbacks.complete(dev);
    75ee:	687b      	ldr	r3, [r7, #4]
    75f0:	691b      	ldr	r3, [r3, #16]
    75f2:	6878      	ldr	r0, [r7, #4]
    75f4:	4798      	blx	r3
}
    75f6:	e011      	b.n	761c <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    75f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
    75fc:	2b00      	cmp	r3, #0
    75fe:	da0d      	bge.n	761c <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    7600:	2104      	movs	r1, #4
    7602:	68f8      	ldr	r0, [r7, #12]
    7604:	4b0a      	ldr	r3, [pc, #40]	; (7630 <_spi_handler+0xa4>)
    7606:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7608:	2180      	movs	r1, #128	; 0x80
    760a:	68f8      	ldr	r0, [r7, #12]
    760c:	4b07      	ldr	r3, [pc, #28]	; (762c <_spi_handler+0xa0>)
    760e:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    7610:	687b      	ldr	r3, [r7, #4]
    7612:	695b      	ldr	r3, [r3, #20]
    7614:	f06f 0112 	mvn.w	r1, #18
    7618:	6878      	ldr	r0, [r7, #4]
    761a:	4798      	blx	r3
}
    761c:	bf00      	nop
    761e:	3710      	adds	r7, #16
    7620:	46bd      	mov	sp, r7
    7622:	bd80      	pop	{r7, pc}
    7624:	0000663d 	.word	0x0000663d
    7628:	00006711 	.word	0x00006711
    762c:	00006657 	.word	0x00006657
    7630:	00006b19 	.word	0x00006b19

00007634 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    7634:	b580      	push	{r7, lr}
    7636:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    7638:	4b03      	ldr	r3, [pc, #12]	; (7648 <SERCOM4_0_Handler+0x14>)
    763a:	681b      	ldr	r3, [r3, #0]
    763c:	4618      	mov	r0, r3
    763e:	4b03      	ldr	r3, [pc, #12]	; (764c <SERCOM4_0_Handler+0x18>)
    7640:	4798      	blx	r3
}
    7642:	bf00      	nop
    7644:	bd80      	pop	{r7, pc}
    7646:	bf00      	nop
    7648:	2000303c 	.word	0x2000303c
    764c:	0000758d 	.word	0x0000758d

00007650 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    7650:	b580      	push	{r7, lr}
    7652:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    7654:	4b03      	ldr	r3, [pc, #12]	; (7664 <SERCOM4_1_Handler+0x14>)
    7656:	681b      	ldr	r3, [r3, #0]
    7658:	4618      	mov	r0, r3
    765a:	4b03      	ldr	r3, [pc, #12]	; (7668 <SERCOM4_1_Handler+0x18>)
    765c:	4798      	blx	r3
}
    765e:	bf00      	nop
    7660:	bd80      	pop	{r7, pc}
    7662:	bf00      	nop
    7664:	2000303c 	.word	0x2000303c
    7668:	0000758d 	.word	0x0000758d

0000766c <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    766c:	b580      	push	{r7, lr}
    766e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    7670:	4b03      	ldr	r3, [pc, #12]	; (7680 <SERCOM4_2_Handler+0x14>)
    7672:	681b      	ldr	r3, [r3, #0]
    7674:	4618      	mov	r0, r3
    7676:	4b03      	ldr	r3, [pc, #12]	; (7684 <SERCOM4_2_Handler+0x18>)
    7678:	4798      	blx	r3
}
    767a:	bf00      	nop
    767c:	bd80      	pop	{r7, pc}
    767e:	bf00      	nop
    7680:	2000303c 	.word	0x2000303c
    7684:	0000758d 	.word	0x0000758d

00007688 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    7688:	b580      	push	{r7, lr}
    768a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    768c:	4b03      	ldr	r3, [pc, #12]	; (769c <SERCOM4_3_Handler+0x14>)
    768e:	681b      	ldr	r3, [r3, #0]
    7690:	4618      	mov	r0, r3
    7692:	4b03      	ldr	r3, [pc, #12]	; (76a0 <SERCOM4_3_Handler+0x18>)
    7694:	4798      	blx	r3
}
    7696:	bf00      	nop
    7698:	bd80      	pop	{r7, pc}
    769a:	bf00      	nop
    769c:	2000303c 	.word	0x2000303c
    76a0:	0000758d 	.word	0x0000758d

000076a4 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    76a4:	b580      	push	{r7, lr}
    76a6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    76a8:	4b03      	ldr	r3, [pc, #12]	; (76b8 <SERCOM5_0_Handler+0x14>)
    76aa:	681b      	ldr	r3, [r3, #0]
    76ac:	4618      	mov	r0, r3
    76ae:	4b03      	ldr	r3, [pc, #12]	; (76bc <SERCOM5_0_Handler+0x18>)
    76b0:	4798      	blx	r3
}
    76b2:	bf00      	nop
    76b4:	bd80      	pop	{r7, pc}
    76b6:	bf00      	nop
    76b8:	20003040 	.word	0x20003040
    76bc:	00006ec1 	.word	0x00006ec1

000076c0 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    76c0:	b580      	push	{r7, lr}
    76c2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    76c4:	4b03      	ldr	r3, [pc, #12]	; (76d4 <SERCOM5_1_Handler+0x14>)
    76c6:	681b      	ldr	r3, [r3, #0]
    76c8:	4618      	mov	r0, r3
    76ca:	4b03      	ldr	r3, [pc, #12]	; (76d8 <SERCOM5_1_Handler+0x18>)
    76cc:	4798      	blx	r3
}
    76ce:	bf00      	nop
    76d0:	bd80      	pop	{r7, pc}
    76d2:	bf00      	nop
    76d4:	20003040 	.word	0x20003040
    76d8:	00006ec1 	.word	0x00006ec1

000076dc <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    76dc:	b580      	push	{r7, lr}
    76de:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    76e0:	4b03      	ldr	r3, [pc, #12]	; (76f0 <SERCOM5_2_Handler+0x14>)
    76e2:	681b      	ldr	r3, [r3, #0]
    76e4:	4618      	mov	r0, r3
    76e6:	4b03      	ldr	r3, [pc, #12]	; (76f4 <SERCOM5_2_Handler+0x18>)
    76e8:	4798      	blx	r3
}
    76ea:	bf00      	nop
    76ec:	bd80      	pop	{r7, pc}
    76ee:	bf00      	nop
    76f0:	20003040 	.word	0x20003040
    76f4:	00006ec1 	.word	0x00006ec1

000076f8 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    76f8:	b580      	push	{r7, lr}
    76fa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    76fc:	4b03      	ldr	r3, [pc, #12]	; (770c <SERCOM5_3_Handler+0x14>)
    76fe:	681b      	ldr	r3, [r3, #0]
    7700:	4618      	mov	r0, r3
    7702:	4b03      	ldr	r3, [pc, #12]	; (7710 <SERCOM5_3_Handler+0x18>)
    7704:	4798      	blx	r3
}
    7706:	bf00      	nop
    7708:	bd80      	pop	{r7, pc}
    770a:	bf00      	nop
    770c:	20003040 	.word	0x20003040
    7710:	00006ec1 	.word	0x00006ec1

00007714 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    7714:	b580      	push	{r7, lr}
    7716:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7718:	4b03      	ldr	r3, [pc, #12]	; (7728 <SERCOM7_0_Handler+0x14>)
    771a:	681b      	ldr	r3, [r3, #0]
    771c:	4618      	mov	r0, r3
    771e:	4b03      	ldr	r3, [pc, #12]	; (772c <SERCOM7_0_Handler+0x18>)
    7720:	4798      	blx	r3
}
    7722:	bf00      	nop
    7724:	bd80      	pop	{r7, pc}
    7726:	bf00      	nop
    7728:	20003044 	.word	0x20003044
    772c:	00006ec1 	.word	0x00006ec1

00007730 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    7730:	b580      	push	{r7, lr}
    7732:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7734:	4b03      	ldr	r3, [pc, #12]	; (7744 <SERCOM7_1_Handler+0x14>)
    7736:	681b      	ldr	r3, [r3, #0]
    7738:	4618      	mov	r0, r3
    773a:	4b03      	ldr	r3, [pc, #12]	; (7748 <SERCOM7_1_Handler+0x18>)
    773c:	4798      	blx	r3
}
    773e:	bf00      	nop
    7740:	bd80      	pop	{r7, pc}
    7742:	bf00      	nop
    7744:	20003044 	.word	0x20003044
    7748:	00006ec1 	.word	0x00006ec1

0000774c <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    774c:	b580      	push	{r7, lr}
    774e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    7750:	4b03      	ldr	r3, [pc, #12]	; (7760 <SERCOM7_2_Handler+0x14>)
    7752:	681b      	ldr	r3, [r3, #0]
    7754:	4618      	mov	r0, r3
    7756:	4b03      	ldr	r3, [pc, #12]	; (7764 <SERCOM7_2_Handler+0x18>)
    7758:	4798      	blx	r3
}
    775a:	bf00      	nop
    775c:	bd80      	pop	{r7, pc}
    775e:	bf00      	nop
    7760:	20003044 	.word	0x20003044
    7764:	00006ec1 	.word	0x00006ec1

00007768 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    7768:	b580      	push	{r7, lr}
    776a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    776c:	4b03      	ldr	r3, [pc, #12]	; (777c <SERCOM7_3_Handler+0x14>)
    776e:	681b      	ldr	r3, [r3, #0]
    7770:	4618      	mov	r0, r3
    7772:	4b03      	ldr	r3, [pc, #12]	; (7780 <SERCOM7_3_Handler+0x18>)
    7774:	4798      	blx	r3
}
    7776:	bf00      	nop
    7778:	bd80      	pop	{r7, pc}
    777a:	bf00      	nop
    777c:	20003044 	.word	0x20003044
    7780:	00006ec1 	.word	0x00006ec1

00007784 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7784:	b580      	push	{r7, lr}
    7786:	b084      	sub	sp, #16
    7788:	af00      	add	r7, sp, #0
    778a:	6078      	str	r0, [r7, #4]
    778c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    778e:	683b      	ldr	r3, [r7, #0]
    7790:	4618      	mov	r0, r3
    7792:	4b35      	ldr	r3, [pc, #212]	; (7868 <_spi_m_sync_init+0xe4>)
    7794:	4798      	blx	r3
    7796:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7798:	687b      	ldr	r3, [r7, #4]
    779a:	2b00      	cmp	r3, #0
    779c:	d004      	beq.n	77a8 <_spi_m_sync_init+0x24>
    779e:	683b      	ldr	r3, [r7, #0]
    77a0:	2b00      	cmp	r3, #0
    77a2:	d001      	beq.n	77a8 <_spi_m_sync_init+0x24>
    77a4:	2301      	movs	r3, #1
    77a6:	e000      	b.n	77aa <_spi_m_sync_init+0x26>
    77a8:	2300      	movs	r3, #0
    77aa:	f003 0301 	and.w	r3, r3, #1
    77ae:	b2db      	uxtb	r3, r3
    77b0:	f640 12ec 	movw	r2, #2540	; 0x9ec
    77b4:	492d      	ldr	r1, [pc, #180]	; (786c <_spi_m_sync_init+0xe8>)
    77b6:	4618      	mov	r0, r3
    77b8:	4b2d      	ldr	r3, [pc, #180]	; (7870 <_spi_m_sync_init+0xec>)
    77ba:	4798      	blx	r3

	if (regs == NULL) {
    77bc:	68fb      	ldr	r3, [r7, #12]
    77be:	2b00      	cmp	r3, #0
    77c0:	d102      	bne.n	77c8 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    77c2:	f06f 030c 	mvn.w	r3, #12
    77c6:	e04a      	b.n	785e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    77c8:	2101      	movs	r1, #1
    77ca:	6838      	ldr	r0, [r7, #0]
    77cc:	4b29      	ldr	r3, [pc, #164]	; (7874 <_spi_m_sync_init+0xf0>)
    77ce:	4798      	blx	r3
    77d0:	4603      	mov	r3, r0
    77d2:	f083 0301 	eor.w	r3, r3, #1
    77d6:	b2db      	uxtb	r3, r3
    77d8:	2b00      	cmp	r3, #0
    77da:	d019      	beq.n	7810 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    77dc:	68fb      	ldr	r3, [r7, #12]
    77de:	681b      	ldr	r3, [r3, #0]
    77e0:	f003 031c 	and.w	r3, r3, #28
    77e4:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    77e6:	2102      	movs	r1, #2
    77e8:	6838      	ldr	r0, [r7, #0]
    77ea:	4b23      	ldr	r3, [pc, #140]	; (7878 <_spi_m_sync_init+0xf4>)
    77ec:	4798      	blx	r3
    77ee:	4603      	mov	r3, r0
    77f0:	2b00      	cmp	r3, #0
    77f2:	d006      	beq.n	7802 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    77f4:	6838      	ldr	r0, [r7, #0]
    77f6:	4b21      	ldr	r3, [pc, #132]	; (787c <_spi_m_sync_init+0xf8>)
    77f8:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    77fa:	2102      	movs	r1, #2
    77fc:	6838      	ldr	r0, [r7, #0]
    77fe:	4b20      	ldr	r3, [pc, #128]	; (7880 <_spi_m_sync_init+0xfc>)
    7800:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    7802:	68bb      	ldr	r3, [r7, #8]
    7804:	f043 0301 	orr.w	r3, r3, #1
    7808:	4619      	mov	r1, r3
    780a:	6838      	ldr	r0, [r7, #0]
    780c:	4b1d      	ldr	r3, [pc, #116]	; (7884 <_spi_m_sync_init+0x100>)
    780e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    7810:	2101      	movs	r1, #1
    7812:	6838      	ldr	r0, [r7, #0]
    7814:	4b1a      	ldr	r3, [pc, #104]	; (7880 <_spi_m_sync_init+0xfc>)
    7816:	4798      	blx	r3

	dev->prvt = hw;
    7818:	687b      	ldr	r3, [r7, #4]
    781a:	683a      	ldr	r2, [r7, #0]
    781c:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    781e:	68fb      	ldr	r3, [r7, #12]
    7820:	681b      	ldr	r3, [r3, #0]
    7822:	f003 031c 	and.w	r3, r3, #28
    7826:	2b08      	cmp	r3, #8
    7828:	d104      	bne.n	7834 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    782a:	68f9      	ldr	r1, [r7, #12]
    782c:	6838      	ldr	r0, [r7, #0]
    782e:	4b16      	ldr	r3, [pc, #88]	; (7888 <_spi_m_sync_init+0x104>)
    7830:	4798      	blx	r3
    7832:	e003      	b.n	783c <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    7834:	68f9      	ldr	r1, [r7, #12]
    7836:	6838      	ldr	r0, [r7, #0]
    7838:	4b14      	ldr	r3, [pc, #80]	; (788c <_spi_m_sync_init+0x108>)
    783a:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    783c:	68fb      	ldr	r3, [r7, #12]
    783e:	685b      	ldr	r3, [r3, #4]
    7840:	f003 0307 	and.w	r3, r3, #7
    7844:	2b00      	cmp	r3, #0
    7846:	d101      	bne.n	784c <_spi_m_sync_init+0xc8>
    7848:	2201      	movs	r2, #1
    784a:	e000      	b.n	784e <_spi_m_sync_init+0xca>
    784c:	2202      	movs	r2, #2
    784e:	687b      	ldr	r3, [r7, #4]
    7850:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    7852:	68fb      	ldr	r3, [r7, #12]
    7854:	89db      	ldrh	r3, [r3, #14]
    7856:	b29a      	uxth	r2, r3
    7858:	687b      	ldr	r3, [r7, #4]
    785a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    785c:	2300      	movs	r3, #0
}
    785e:	4618      	mov	r0, r3
    7860:	3710      	adds	r7, #16
    7862:	46bd      	mov	sp, r7
    7864:	bd80      	pop	{r7, pc}
    7866:	bf00      	nop
    7868:	00007531 	.word	0x00007531
    786c:	00011590 	.word	0x00011590
    7870:	00003f79 	.word	0x00003f79
    7874:	00006581 	.word	0x00006581
    7878:	00006839 	.word	0x00006839
    787c:	00006811 	.word	0x00006811
    7880:	0000655d 	.word	0x0000655d
    7884:	00006869 	.word	0x00006869
    7888:	00007485 	.word	0x00007485
    788c:	000073f1 	.word	0x000073f1

00007890 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    7890:	b580      	push	{r7, lr}
    7892:	b086      	sub	sp, #24
    7894:	af00      	add	r7, sp, #0
    7896:	6078      	str	r0, [r7, #4]
    7898:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    789a:	687b      	ldr	r3, [r7, #4]
    789c:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    789e:	6839      	ldr	r1, [r7, #0]
    78a0:	6878      	ldr	r0, [r7, #4]
    78a2:	4b1a      	ldr	r3, [pc, #104]	; (790c <_spi_m_async_init+0x7c>)
    78a4:	4798      	blx	r3
    78a6:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    78a8:	68bb      	ldr	r3, [r7, #8]
    78aa:	2b00      	cmp	r3, #0
    78ac:	da01      	bge.n	78b2 <_spi_m_async_init+0x22>
		return rc;
    78ae:	68bb      	ldr	r3, [r7, #8]
    78b0:	e028      	b.n	7904 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    78b2:	6879      	ldr	r1, [r7, #4]
    78b4:	6838      	ldr	r0, [r7, #0]
    78b6:	4b16      	ldr	r3, [pc, #88]	; (7910 <_spi_m_async_init+0x80>)
    78b8:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    78ba:	68fb      	ldr	r3, [r7, #12]
    78bc:	2200      	movs	r2, #0
    78be:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    78c0:	68fb      	ldr	r3, [r7, #12]
    78c2:	2200      	movs	r2, #0
    78c4:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    78c6:	68fb      	ldr	r3, [r7, #12]
    78c8:	2200      	movs	r2, #0
    78ca:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    78cc:	6838      	ldr	r0, [r7, #0]
    78ce:	4b11      	ldr	r3, [pc, #68]	; (7914 <_spi_m_async_init+0x84>)
    78d0:	4798      	blx	r3
    78d2:	4603      	mov	r3, r0
    78d4:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    78d6:	2300      	movs	r3, #0
    78d8:	613b      	str	r3, [r7, #16]
    78da:	e00f      	b.n	78fc <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    78dc:	7dfb      	ldrb	r3, [r7, #23]
    78de:	b21b      	sxth	r3, r3
    78e0:	4618      	mov	r0, r3
    78e2:	4b0d      	ldr	r3, [pc, #52]	; (7918 <_spi_m_async_init+0x88>)
    78e4:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    78e6:	7dfb      	ldrb	r3, [r7, #23]
    78e8:	b21b      	sxth	r3, r3
    78ea:	4618      	mov	r0, r3
    78ec:	4b0b      	ldr	r3, [pc, #44]	; (791c <_spi_m_async_init+0x8c>)
    78ee:	4798      	blx	r3
		irq++;
    78f0:	7dfb      	ldrb	r3, [r7, #23]
    78f2:	3301      	adds	r3, #1
    78f4:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    78f6:	693b      	ldr	r3, [r7, #16]
    78f8:	3301      	adds	r3, #1
    78fa:	613b      	str	r3, [r7, #16]
    78fc:	693b      	ldr	r3, [r7, #16]
    78fe:	2b03      	cmp	r3, #3
    7900:	d9ec      	bls.n	78dc <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    7902:	2300      	movs	r3, #0
}
    7904:	4618      	mov	r0, r3
    7906:	3718      	adds	r7, #24
    7908:	46bd      	mov	sp, r7
    790a:	bd80      	pop	{r7, pc}
    790c:	00007785 	.word	0x00007785
    7910:	00006bb9 	.word	0x00006bb9
    7914:	00006fc5 	.word	0x00006fc5
    7918:	00006491 	.word	0x00006491
    791c:	000064d5 	.word	0x000064d5

00007920 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    7920:	b580      	push	{r7, lr}
    7922:	b082      	sub	sp, #8
    7924:	af00      	add	r7, sp, #0
    7926:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7928:	bf00      	nop
    792a:	2103      	movs	r1, #3
    792c:	6878      	ldr	r0, [r7, #4]
    792e:	4b06      	ldr	r3, [pc, #24]	; (7948 <_spi_wait_bus_idle+0x28>)
    7930:	4798      	blx	r3
    7932:	4603      	mov	r3, r0
    7934:	2b00      	cmp	r3, #0
    7936:	d0f8      	beq.n	792a <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7938:	2103      	movs	r1, #3
    793a:	6878      	ldr	r0, [r7, #4]
    793c:	4b03      	ldr	r3, [pc, #12]	; (794c <_spi_wait_bus_idle+0x2c>)
    793e:	4798      	blx	r3
}
    7940:	bf00      	nop
    7942:	3708      	adds	r7, #8
    7944:	46bd      	mov	sp, r7
    7946:	bd80      	pop	{r7, pc}
    7948:	00006615 	.word	0x00006615
    794c:	00006657 	.word	0x00006657

00007950 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    7950:	b580      	push	{r7, lr}
    7952:	b086      	sub	sp, #24
    7954:	af00      	add	r7, sp, #0
    7956:	60f8      	str	r0, [r7, #12]
    7958:	60b9      	str	r1, [r7, #8]
    795a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    795c:	68bb      	ldr	r3, [r7, #8]
    795e:	f003 0304 	and.w	r3, r3, #4
    7962:	2b00      	cmp	r3, #0
    7964:	d101      	bne.n	796a <_spi_rx_check_and_receive+0x1a>
		return false;
    7966:	2300      	movs	r3, #0
    7968:	e022      	b.n	79b0 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    796a:	68f8      	ldr	r0, [r7, #12]
    796c:	4b12      	ldr	r3, [pc, #72]	; (79b8 <_spi_rx_check_and_receive+0x68>)
    796e:	4798      	blx	r3
    7970:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	685b      	ldr	r3, [r3, #4]
    7976:	2b00      	cmp	r3, #0
    7978:	d014      	beq.n	79a4 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    797a:	687b      	ldr	r3, [r7, #4]
    797c:	685b      	ldr	r3, [r3, #4]
    797e:	1c59      	adds	r1, r3, #1
    7980:	687a      	ldr	r2, [r7, #4]
    7982:	6051      	str	r1, [r2, #4]
    7984:	697a      	ldr	r2, [r7, #20]
    7986:	b2d2      	uxtb	r2, r2
    7988:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    798a:	687b      	ldr	r3, [r7, #4]
    798c:	7c1b      	ldrb	r3, [r3, #16]
    798e:	2b01      	cmp	r3, #1
    7990:	d908      	bls.n	79a4 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    7992:	687b      	ldr	r3, [r7, #4]
    7994:	685b      	ldr	r3, [r3, #4]
    7996:	1c59      	adds	r1, r3, #1
    7998:	687a      	ldr	r2, [r7, #4]
    799a:	6051      	str	r1, [r2, #4]
    799c:	697a      	ldr	r2, [r7, #20]
    799e:	0a12      	lsrs	r2, r2, #8
    79a0:	b2d2      	uxtb	r2, r2
    79a2:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    79a4:	687b      	ldr	r3, [r7, #4]
    79a6:	68db      	ldr	r3, [r3, #12]
    79a8:	1c5a      	adds	r2, r3, #1
    79aa:	687b      	ldr	r3, [r7, #4]
    79ac:	60da      	str	r2, [r3, #12]

	return true;
    79ae:	2301      	movs	r3, #1
}
    79b0:	4618      	mov	r0, r3
    79b2:	3718      	adds	r7, #24
    79b4:	46bd      	mov	sp, r7
    79b6:	bd80      	pop	{r7, pc}
    79b8:	00006ae1 	.word	0x00006ae1

000079bc <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    79bc:	b580      	push	{r7, lr}
    79be:	b086      	sub	sp, #24
    79c0:	af00      	add	r7, sp, #0
    79c2:	60f8      	str	r0, [r7, #12]
    79c4:	60b9      	str	r1, [r7, #8]
    79c6:	607a      	str	r2, [r7, #4]
    79c8:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    79ca:	68bb      	ldr	r3, [r7, #8]
    79cc:	f003 0301 	and.w	r3, r3, #1
    79d0:	2b00      	cmp	r3, #0
    79d2:	d028      	beq.n	7a26 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    79d4:	687b      	ldr	r3, [r7, #4]
    79d6:	681b      	ldr	r3, [r3, #0]
    79d8:	2b00      	cmp	r3, #0
    79da:	d018      	beq.n	7a0e <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    79dc:	687b      	ldr	r3, [r7, #4]
    79de:	681b      	ldr	r3, [r3, #0]
    79e0:	1c59      	adds	r1, r3, #1
    79e2:	687a      	ldr	r2, [r7, #4]
    79e4:	6011      	str	r1, [r2, #0]
    79e6:	781b      	ldrb	r3, [r3, #0]
    79e8:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    79ea:	687b      	ldr	r3, [r7, #4]
    79ec:	7c1b      	ldrb	r3, [r3, #16]
    79ee:	2b01      	cmp	r3, #1
    79f0:	d90f      	bls.n	7a12 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    79f2:	687b      	ldr	r3, [r7, #4]
    79f4:	681b      	ldr	r3, [r3, #0]
    79f6:	781b      	ldrb	r3, [r3, #0]
    79f8:	021b      	lsls	r3, r3, #8
    79fa:	461a      	mov	r2, r3
    79fc:	697b      	ldr	r3, [r7, #20]
    79fe:	4313      	orrs	r3, r2
    7a00:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    7a02:	687b      	ldr	r3, [r7, #4]
    7a04:	681b      	ldr	r3, [r3, #0]
    7a06:	1c5a      	adds	r2, r3, #1
    7a08:	687b      	ldr	r3, [r7, #4]
    7a0a:	601a      	str	r2, [r3, #0]
    7a0c:	e001      	b.n	7a12 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    7a0e:	887b      	ldrh	r3, [r7, #2]
    7a10:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    7a12:	687b      	ldr	r3, [r7, #4]
    7a14:	689b      	ldr	r3, [r3, #8]
    7a16:	1c5a      	adds	r2, r3, #1
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7a1c:	6979      	ldr	r1, [r7, #20]
    7a1e:	68f8      	ldr	r0, [r7, #12]
    7a20:	4b03      	ldr	r3, [pc, #12]	; (7a30 <_spi_tx_check_and_send+0x74>)
    7a22:	4798      	blx	r3
    7a24:	e000      	b.n	7a28 <_spi_tx_check_and_send+0x6c>
		return;
    7a26:	bf00      	nop
}
    7a28:	3718      	adds	r7, #24
    7a2a:	46bd      	mov	sp, r7
    7a2c:	bd80      	pop	{r7, pc}
    7a2e:	bf00      	nop
    7a30:	00006ac5 	.word	0x00006ac5

00007a34 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    7a34:	b580      	push	{r7, lr}
    7a36:	b082      	sub	sp, #8
    7a38:	af00      	add	r7, sp, #0
    7a3a:	6078      	str	r0, [r7, #4]
    7a3c:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    7a3e:	687b      	ldr	r3, [r7, #4]
    7a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7a44:	2b00      	cmp	r3, #0
    7a46:	d00b      	beq.n	7a60 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7a48:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7a4c:	6838      	ldr	r0, [r7, #0]
    7a4e:	4b07      	ldr	r3, [pc, #28]	; (7a6c <_spi_err_check+0x38>)
    7a50:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7a52:	2180      	movs	r1, #128	; 0x80
    7a54:	6838      	ldr	r0, [r7, #0]
    7a56:	4b06      	ldr	r3, [pc, #24]	; (7a70 <_spi_err_check+0x3c>)
    7a58:	4798      	blx	r3
		return ERR_OVERFLOW;
    7a5a:	f06f 0312 	mvn.w	r3, #18
    7a5e:	e000      	b.n	7a62 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7a60:	2300      	movs	r3, #0
}
    7a62:	4618      	mov	r0, r3
    7a64:	3708      	adds	r7, #8
    7a66:	46bd      	mov	sp, r7
    7a68:	bd80      	pop	{r7, pc}
    7a6a:	bf00      	nop
    7a6c:	00006b19 	.word	0x00006b19
    7a70:	00006657 	.word	0x00006657

00007a74 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7a74:	b590      	push	{r4, r7, lr}
    7a76:	b08b      	sub	sp, #44	; 0x2c
    7a78:	af00      	add	r7, sp, #0
    7a7a:	6078      	str	r0, [r7, #4]
    7a7c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    7a7e:	687b      	ldr	r3, [r7, #4]
    7a80:	681b      	ldr	r3, [r3, #0]
    7a82:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7a84:	2300      	movs	r3, #0
    7a86:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7a88:	683b      	ldr	r3, [r7, #0]
    7a8a:	681b      	ldr	r3, [r3, #0]
    7a8c:	60bb      	str	r3, [r7, #8]
    7a8e:	683b      	ldr	r3, [r7, #0]
    7a90:	685b      	ldr	r3, [r3, #4]
    7a92:	60fb      	str	r3, [r7, #12]
    7a94:	2300      	movs	r3, #0
    7a96:	613b      	str	r3, [r7, #16]
    7a98:	2300      	movs	r3, #0
    7a9a:	617b      	str	r3, [r7, #20]
    7a9c:	687b      	ldr	r3, [r7, #4]
    7a9e:	791b      	ldrb	r3, [r3, #4]
    7aa0:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7aa2:	687b      	ldr	r3, [r7, #4]
    7aa4:	2b00      	cmp	r3, #0
    7aa6:	d004      	beq.n	7ab2 <_spi_m_sync_trans+0x3e>
    7aa8:	6a3b      	ldr	r3, [r7, #32]
    7aaa:	2b00      	cmp	r3, #0
    7aac:	d001      	beq.n	7ab2 <_spi_m_sync_trans+0x3e>
    7aae:	2301      	movs	r3, #1
    7ab0:	e000      	b.n	7ab4 <_spi_m_sync_trans+0x40>
    7ab2:	2300      	movs	r3, #0
    7ab4:	f003 0301 	and.w	r3, r3, #1
    7ab8:	b2db      	uxtb	r3, r3
    7aba:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    7abe:	492b      	ldr	r1, [pc, #172]	; (7b6c <_spi_m_sync_trans+0xf8>)
    7ac0:	4618      	mov	r0, r3
    7ac2:	4b2b      	ldr	r3, [pc, #172]	; (7b70 <_spi_m_sync_trans+0xfc>)
    7ac4:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7ac6:	2107      	movs	r1, #7
    7ac8:	6a38      	ldr	r0, [r7, #32]
    7aca:	4b2a      	ldr	r3, [pc, #168]	; (7b74 <_spi_m_sync_trans+0x100>)
    7acc:	4798      	blx	r3
    7ace:	4603      	mov	r3, r0
    7ad0:	2b00      	cmp	r3, #0
    7ad2:	d002      	beq.n	7ada <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7ad4:	f06f 0303 	mvn.w	r3, #3
    7ad8:	e043      	b.n	7b62 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7ada:	6a38      	ldr	r0, [r7, #32]
    7adc:	4b26      	ldr	r3, [pc, #152]	; (7b78 <_spi_m_sync_trans+0x104>)
    7ade:	4798      	blx	r3
    7ae0:	4603      	mov	r3, r0
    7ae2:	f083 0301 	eor.w	r3, r3, #1
    7ae6:	b2db      	uxtb	r3, r3
    7ae8:	2b00      	cmp	r3, #0
    7aea:	d002      	beq.n	7af2 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7aec:	f06f 0313 	mvn.w	r3, #19
    7af0:	e037      	b.n	7b62 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    7af2:	6a38      	ldr	r0, [r7, #32]
    7af4:	4b21      	ldr	r3, [pc, #132]	; (7b7c <_spi_m_sync_trans+0x108>)
    7af6:	4798      	blx	r3
    7af8:	4603      	mov	r3, r0
    7afa:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7afc:	f107 0308 	add.w	r3, r7, #8
    7b00:	461a      	mov	r2, r3
    7b02:	69f9      	ldr	r1, [r7, #28]
    7b04:	6a38      	ldr	r0, [r7, #32]
    7b06:	4b1e      	ldr	r3, [pc, #120]	; (7b80 <_spi_m_sync_trans+0x10c>)
    7b08:	4798      	blx	r3
    7b0a:	4603      	mov	r3, r0
    7b0c:	f083 0301 	eor.w	r3, r3, #1
    7b10:	b2db      	uxtb	r3, r3
    7b12:	2b00      	cmp	r3, #0
    7b14:	d00b      	beq.n	7b2e <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    7b16:	697a      	ldr	r2, [r7, #20]
    7b18:	693b      	ldr	r3, [r7, #16]
    7b1a:	429a      	cmp	r2, r3
    7b1c:	d307      	bcc.n	7b2e <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7b1e:	687b      	ldr	r3, [r7, #4]
    7b20:	88db      	ldrh	r3, [r3, #6]
    7b22:	f107 0208 	add.w	r2, r7, #8
    7b26:	69f9      	ldr	r1, [r7, #28]
    7b28:	6a38      	ldr	r0, [r7, #32]
    7b2a:	4c16      	ldr	r4, [pc, #88]	; (7b84 <_spi_m_sync_trans+0x110>)
    7b2c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7b2e:	6a39      	ldr	r1, [r7, #32]
    7b30:	69f8      	ldr	r0, [r7, #28]
    7b32:	4b15      	ldr	r3, [pc, #84]	; (7b88 <_spi_m_sync_trans+0x114>)
    7b34:	4798      	blx	r3
    7b36:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	db0c      	blt.n	7b58 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    7b3e:	693a      	ldr	r2, [r7, #16]
    7b40:	683b      	ldr	r3, [r7, #0]
    7b42:	689b      	ldr	r3, [r3, #8]
    7b44:	429a      	cmp	r2, r3
    7b46:	d3d4      	bcc.n	7af2 <_spi_m_sync_trans+0x7e>
    7b48:	697a      	ldr	r2, [r7, #20]
    7b4a:	683b      	ldr	r3, [r7, #0]
    7b4c:	689b      	ldr	r3, [r3, #8]
    7b4e:	429a      	cmp	r2, r3
    7b50:	d3cf      	bcc.n	7af2 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7b52:	693b      	ldr	r3, [r7, #16]
    7b54:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7b56:	e000      	b.n	7b5a <_spi_m_sync_trans+0xe6>
			break;
    7b58:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7b5a:	6a38      	ldr	r0, [r7, #32]
    7b5c:	4b0b      	ldr	r3, [pc, #44]	; (7b8c <_spi_m_sync_trans+0x118>)
    7b5e:	4798      	blx	r3

	return rc;
    7b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7b62:	4618      	mov	r0, r3
    7b64:	372c      	adds	r7, #44	; 0x2c
    7b66:	46bd      	mov	sp, r7
    7b68:	bd90      	pop	{r4, r7, pc}
    7b6a:	bf00      	nop
    7b6c:	00011590 	.word	0x00011590
    7b70:	00003f79 	.word	0x00003f79
    7b74:	00006581 	.word	0x00006581
    7b78:	000067d9 	.word	0x000067d9
    7b7c:	0000663d 	.word	0x0000663d
    7b80:	00007951 	.word	0x00007951
    7b84:	000079bd 	.word	0x000079bd
    7b88:	00007a35 	.word	0x00007a35
    7b8c:	00007921 	.word	0x00007921

00007b90 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    7b90:	b580      	push	{r7, lr}
    7b92:	b084      	sub	sp, #16
    7b94:	af00      	add	r7, sp, #0
    7b96:	6078      	str	r0, [r7, #4]
    7b98:	460b      	mov	r3, r1
    7b9a:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    7b9c:	687b      	ldr	r3, [r7, #4]
    7b9e:	681b      	ldr	r3, [r3, #0]
    7ba0:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    7ba2:	687b      	ldr	r3, [r7, #4]
    7ba4:	2b00      	cmp	r3, #0
    7ba6:	d004      	beq.n	7bb2 <_spi_m_async_enable_tx+0x22>
    7ba8:	68fb      	ldr	r3, [r7, #12]
    7baa:	2b00      	cmp	r3, #0
    7bac:	d001      	beq.n	7bb2 <_spi_m_async_enable_tx+0x22>
    7bae:	2301      	movs	r3, #1
    7bb0:	e000      	b.n	7bb4 <_spi_m_async_enable_tx+0x24>
    7bb2:	2300      	movs	r3, #0
    7bb4:	f003 0301 	and.w	r3, r3, #1
    7bb8:	b2db      	uxtb	r3, r3
    7bba:	f640 327c 	movw	r2, #2940	; 0xb7c
    7bbe:	4909      	ldr	r1, [pc, #36]	; (7be4 <_spi_m_async_enable_tx+0x54>)
    7bc0:	4618      	mov	r0, r3
    7bc2:	4b09      	ldr	r3, [pc, #36]	; (7be8 <_spi_m_async_enable_tx+0x58>)
    7bc4:	4798      	blx	r3

	if (state) {
    7bc6:	78fb      	ldrb	r3, [r7, #3]
    7bc8:	2b00      	cmp	r3, #0
    7bca:	d003      	beq.n	7bd4 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    7bcc:	68f8      	ldr	r0, [r7, #12]
    7bce:	4b07      	ldr	r3, [pc, #28]	; (7bec <_spi_m_async_enable_tx+0x5c>)
    7bd0:	4798      	blx	r3
    7bd2:	e002      	b.n	7bda <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    7bd4:	68f8      	ldr	r0, [r7, #12]
    7bd6:	4b06      	ldr	r3, [pc, #24]	; (7bf0 <_spi_m_async_enable_tx+0x60>)
    7bd8:	4798      	blx	r3
	}

	return ERR_NONE;
    7bda:	2300      	movs	r3, #0
}
    7bdc:	4618      	mov	r0, r3
    7bde:	3710      	adds	r7, #16
    7be0:	46bd      	mov	sp, r7
    7be2:	bd80      	pop	{r7, pc}
    7be4:	00011590 	.word	0x00011590
    7be8:	00003f79 	.word	0x00003f79
    7bec:	00006675 	.word	0x00006675
    7bf0:	0000668f 	.word	0x0000668f

00007bf4 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    7bf4:	b580      	push	{r7, lr}
    7bf6:	b084      	sub	sp, #16
    7bf8:	af00      	add	r7, sp, #0
    7bfa:	6078      	str	r0, [r7, #4]
    7bfc:	460b      	mov	r3, r1
    7bfe:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    7c00:	687b      	ldr	r3, [r7, #4]
    7c02:	681b      	ldr	r3, [r3, #0]
    7c04:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    7c06:	687b      	ldr	r3, [r7, #4]
    7c08:	2b00      	cmp	r3, #0
    7c0a:	bf14      	ite	ne
    7c0c:	2301      	movne	r3, #1
    7c0e:	2300      	moveq	r3, #0
    7c10:	b2db      	uxtb	r3, r3
    7c12:	f44f 6239 	mov.w	r2, #2960	; 0xb90
    7c16:	490f      	ldr	r1, [pc, #60]	; (7c54 <_spi_m_async_enable_rx+0x60>)
    7c18:	4618      	mov	r0, r3
    7c1a:	4b0f      	ldr	r3, [pc, #60]	; (7c58 <_spi_m_async_enable_rx+0x64>)
    7c1c:	4798      	blx	r3
	ASSERT(hw);
    7c1e:	68fb      	ldr	r3, [r7, #12]
    7c20:	2b00      	cmp	r3, #0
    7c22:	bf14      	ite	ne
    7c24:	2301      	movne	r3, #1
    7c26:	2300      	moveq	r3, #0
    7c28:	b2db      	uxtb	r3, r3
    7c2a:	f640 3291 	movw	r2, #2961	; 0xb91
    7c2e:	4909      	ldr	r1, [pc, #36]	; (7c54 <_spi_m_async_enable_rx+0x60>)
    7c30:	4618      	mov	r0, r3
    7c32:	4b09      	ldr	r3, [pc, #36]	; (7c58 <_spi_m_async_enable_rx+0x64>)
    7c34:	4798      	blx	r3

	if (state) {
    7c36:	78fb      	ldrb	r3, [r7, #3]
    7c38:	2b00      	cmp	r3, #0
    7c3a:	d003      	beq.n	7c44 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    7c3c:	68f8      	ldr	r0, [r7, #12]
    7c3e:	4b07      	ldr	r3, [pc, #28]	; (7c5c <_spi_m_async_enable_rx+0x68>)
    7c40:	4798      	blx	r3
    7c42:	e002      	b.n	7c4a <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    7c44:	68f8      	ldr	r0, [r7, #12]
    7c46:	4b06      	ldr	r3, [pc, #24]	; (7c60 <_spi_m_async_enable_rx+0x6c>)
    7c48:	4798      	blx	r3
	}

	return ERR_NONE;
    7c4a:	2300      	movs	r3, #0
}
    7c4c:	4618      	mov	r0, r3
    7c4e:	3710      	adds	r7, #16
    7c50:	46bd      	mov	sp, r7
    7c52:	bd80      	pop	{r7, pc}
    7c54:	00011590 	.word	0x00011590
    7c58:	00003f79 	.word	0x00003f79
    7c5c:	000066dd 	.word	0x000066dd
    7c60:	000066f7 	.word	0x000066f7

00007c64 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    7c64:	b580      	push	{r7, lr}
    7c66:	b082      	sub	sp, #8
    7c68:	af00      	add	r7, sp, #0
    7c6a:	6078      	str	r0, [r7, #4]
    7c6c:	460b      	mov	r3, r1
    7c6e:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    7c70:	687b      	ldr	r3, [r7, #4]
    7c72:	2b00      	cmp	r3, #0
    7c74:	d005      	beq.n	7c82 <_spi_m_async_enable_tx_complete+0x1e>
    7c76:	687b      	ldr	r3, [r7, #4]
    7c78:	681b      	ldr	r3, [r3, #0]
    7c7a:	2b00      	cmp	r3, #0
    7c7c:	d001      	beq.n	7c82 <_spi_m_async_enable_tx_complete+0x1e>
    7c7e:	2301      	movs	r3, #1
    7c80:	e000      	b.n	7c84 <_spi_m_async_enable_tx_complete+0x20>
    7c82:	2300      	movs	r3, #0
    7c84:	f003 0301 	and.w	r3, r3, #1
    7c88:	b2db      	uxtb	r3, r3
    7c8a:	f640 32a3 	movw	r2, #2979	; 0xba3
    7c8e:	490b      	ldr	r1, [pc, #44]	; (7cbc <_spi_m_async_enable_tx_complete+0x58>)
    7c90:	4618      	mov	r0, r3
    7c92:	4b0b      	ldr	r3, [pc, #44]	; (7cc0 <_spi_m_async_enable_tx_complete+0x5c>)
    7c94:	4798      	blx	r3

	if (state) {
    7c96:	78fb      	ldrb	r3, [r7, #3]
    7c98:	2b00      	cmp	r3, #0
    7c9a:	d005      	beq.n	7ca8 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    7c9c:	687b      	ldr	r3, [r7, #4]
    7c9e:	681b      	ldr	r3, [r3, #0]
    7ca0:	4618      	mov	r0, r3
    7ca2:	4b08      	ldr	r3, [pc, #32]	; (7cc4 <_spi_m_async_enable_tx_complete+0x60>)
    7ca4:	4798      	blx	r3
    7ca6:	e004      	b.n	7cb2 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    7ca8:	687b      	ldr	r3, [r7, #4]
    7caa:	681b      	ldr	r3, [r3, #0]
    7cac:	4618      	mov	r0, r3
    7cae:	4b06      	ldr	r3, [pc, #24]	; (7cc8 <_spi_m_async_enable_tx_complete+0x64>)
    7cb0:	4798      	blx	r3
	}

	return ERR_NONE;
    7cb2:	2300      	movs	r3, #0
}
    7cb4:	4618      	mov	r0, r3
    7cb6:	3708      	adds	r7, #8
    7cb8:	46bd      	mov	sp, r7
    7cba:	bd80      	pop	{r7, pc}
    7cbc:	00011590 	.word	0x00011590
    7cc0:	00003f79 	.word	0x00003f79
    7cc4:	000066a9 	.word	0x000066a9
    7cc8:	000066c3 	.word	0x000066c3

00007ccc <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    7ccc:	b580      	push	{r7, lr}
    7cce:	b082      	sub	sp, #8
    7cd0:	af00      	add	r7, sp, #0
    7cd2:	6078      	str	r0, [r7, #4]
    7cd4:	460b      	mov	r3, r1
    7cd6:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    7cd8:	687b      	ldr	r3, [r7, #4]
    7cda:	2b00      	cmp	r3, #0
    7cdc:	d005      	beq.n	7cea <_spi_m_async_write_one+0x1e>
    7cde:	687b      	ldr	r3, [r7, #4]
    7ce0:	681b      	ldr	r3, [r3, #0]
    7ce2:	2b00      	cmp	r3, #0
    7ce4:	d001      	beq.n	7cea <_spi_m_async_write_one+0x1e>
    7ce6:	2301      	movs	r3, #1
    7ce8:	e000      	b.n	7cec <_spi_m_async_write_one+0x20>
    7cea:	2300      	movs	r3, #0
    7cec:	f003 0301 	and.w	r3, r3, #1
    7cf0:	b2db      	uxtb	r3, r3
    7cf2:	f640 32b5 	movw	r2, #2997	; 0xbb5
    7cf6:	4908      	ldr	r1, [pc, #32]	; (7d18 <_spi_m_async_write_one+0x4c>)
    7cf8:	4618      	mov	r0, r3
    7cfa:	4b08      	ldr	r3, [pc, #32]	; (7d1c <_spi_m_async_write_one+0x50>)
    7cfc:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    7cfe:	687b      	ldr	r3, [r7, #4]
    7d00:	681b      	ldr	r3, [r3, #0]
    7d02:	887a      	ldrh	r2, [r7, #2]
    7d04:	4611      	mov	r1, r2
    7d06:	4618      	mov	r0, r3
    7d08:	4b05      	ldr	r3, [pc, #20]	; (7d20 <_spi_m_async_write_one+0x54>)
    7d0a:	4798      	blx	r3

	return ERR_NONE;
    7d0c:	2300      	movs	r3, #0
}
    7d0e:	4618      	mov	r0, r3
    7d10:	3708      	adds	r7, #8
    7d12:	46bd      	mov	sp, r7
    7d14:	bd80      	pop	{r7, pc}
    7d16:	bf00      	nop
    7d18:	00011590 	.word	0x00011590
    7d1c:	00003f79 	.word	0x00003f79
    7d20:	00006ac5 	.word	0x00006ac5

00007d24 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    7d24:	b580      	push	{r7, lr}
    7d26:	b082      	sub	sp, #8
    7d28:	af00      	add	r7, sp, #0
    7d2a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7d2c:	687b      	ldr	r3, [r7, #4]
    7d2e:	2b00      	cmp	r3, #0
    7d30:	d005      	beq.n	7d3e <_spi_m_async_read_one+0x1a>
    7d32:	687b      	ldr	r3, [r7, #4]
    7d34:	681b      	ldr	r3, [r3, #0]
    7d36:	2b00      	cmp	r3, #0
    7d38:	d001      	beq.n	7d3e <_spi_m_async_read_one+0x1a>
    7d3a:	2301      	movs	r3, #1
    7d3c:	e000      	b.n	7d40 <_spi_m_async_read_one+0x1c>
    7d3e:	2300      	movs	r3, #0
    7d40:	f003 0301 	and.w	r3, r3, #1
    7d44:	b2db      	uxtb	r3, r3
    7d46:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    7d4a:	4907      	ldr	r1, [pc, #28]	; (7d68 <_spi_m_async_read_one+0x44>)
    7d4c:	4618      	mov	r0, r3
    7d4e:	4b07      	ldr	r3, [pc, #28]	; (7d6c <_spi_m_async_read_one+0x48>)
    7d50:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    7d52:	687b      	ldr	r3, [r7, #4]
    7d54:	681b      	ldr	r3, [r3, #0]
    7d56:	4618      	mov	r0, r3
    7d58:	4b05      	ldr	r3, [pc, #20]	; (7d70 <_spi_m_async_read_one+0x4c>)
    7d5a:	4798      	blx	r3
    7d5c:	4603      	mov	r3, r0
    7d5e:	b29b      	uxth	r3, r3
}
    7d60:	4618      	mov	r0, r3
    7d62:	3708      	adds	r7, #8
    7d64:	46bd      	mov	sp, r7
    7d66:	bd80      	pop	{r7, pc}
    7d68:	00011590 	.word	0x00011590
    7d6c:	00003f79 	.word	0x00003f79
    7d70:	00006ae1 	.word	0x00006ae1

00007d74 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    7d74:	b580      	push	{r7, lr}
    7d76:	b086      	sub	sp, #24
    7d78:	af00      	add	r7, sp, #0
    7d7a:	60f8      	str	r0, [r7, #12]
    7d7c:	460b      	mov	r3, r1
    7d7e:	607a      	str	r2, [r7, #4]
    7d80:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    7d82:	68fb      	ldr	r3, [r7, #12]
    7d84:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    7d86:	68fb      	ldr	r3, [r7, #12]
    7d88:	2b00      	cmp	r3, #0
    7d8a:	d004      	beq.n	7d96 <_spi_m_async_register_callback+0x22>
    7d8c:	7afb      	ldrb	r3, [r7, #11]
    7d8e:	2b03      	cmp	r3, #3
    7d90:	d801      	bhi.n	7d96 <_spi_m_async_register_callback+0x22>
    7d92:	2301      	movs	r3, #1
    7d94:	e000      	b.n	7d98 <_spi_m_async_register_callback+0x24>
    7d96:	2300      	movs	r3, #0
    7d98:	f003 0301 	and.w	r3, r3, #1
    7d9c:	b2db      	uxtb	r3, r3
    7d9e:	f640 32e9 	movw	r2, #3049	; 0xbe9
    7da2:	4909      	ldr	r1, [pc, #36]	; (7dc8 <_spi_m_async_register_callback+0x54>)
    7da4:	4618      	mov	r0, r3
    7da6:	4b09      	ldr	r3, [pc, #36]	; (7dcc <_spi_m_async_register_callback+0x58>)
    7da8:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    7daa:	697b      	ldr	r3, [r7, #20]
    7dac:	3308      	adds	r3, #8
    7dae:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    7db0:	7afb      	ldrb	r3, [r7, #11]
    7db2:	009b      	lsls	r3, r3, #2
    7db4:	693a      	ldr	r2, [r7, #16]
    7db6:	4413      	add	r3, r2
    7db8:	687a      	ldr	r2, [r7, #4]
    7dba:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    7dbc:	2300      	movs	r3, #0
}
    7dbe:	4618      	mov	r0, r3
    7dc0:	3718      	adds	r7, #24
    7dc2:	46bd      	mov	sp, r7
    7dc4:	bd80      	pop	{r7, pc}
    7dc6:	bf00      	nop
    7dc8:	00011590 	.word	0x00011590
    7dcc:	00003f79 	.word	0x00003f79

00007dd0 <__NVIC_EnableIRQ>:
{
    7dd0:	b480      	push	{r7}
    7dd2:	b083      	sub	sp, #12
    7dd4:	af00      	add	r7, sp, #0
    7dd6:	4603      	mov	r3, r0
    7dd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7dde:	2b00      	cmp	r3, #0
    7de0:	db0b      	blt.n	7dfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7de2:	4909      	ldr	r1, [pc, #36]	; (7e08 <__NVIC_EnableIRQ+0x38>)
    7de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7de8:	095b      	lsrs	r3, r3, #5
    7dea:	88fa      	ldrh	r2, [r7, #6]
    7dec:	f002 021f 	and.w	r2, r2, #31
    7df0:	2001      	movs	r0, #1
    7df2:	fa00 f202 	lsl.w	r2, r0, r2
    7df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7dfa:	bf00      	nop
    7dfc:	370c      	adds	r7, #12
    7dfe:	46bd      	mov	sp, r7
    7e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e04:	4770      	bx	lr
    7e06:	bf00      	nop
    7e08:	e000e100 	.word	0xe000e100

00007e0c <__NVIC_DisableIRQ>:
{
    7e0c:	b480      	push	{r7}
    7e0e:	b083      	sub	sp, #12
    7e10:	af00      	add	r7, sp, #0
    7e12:	4603      	mov	r3, r0
    7e14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	db10      	blt.n	7e40 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e1e:	490b      	ldr	r1, [pc, #44]	; (7e4c <__NVIC_DisableIRQ+0x40>)
    7e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e24:	095b      	lsrs	r3, r3, #5
    7e26:	88fa      	ldrh	r2, [r7, #6]
    7e28:	f002 021f 	and.w	r2, r2, #31
    7e2c:	2001      	movs	r0, #1
    7e2e:	fa00 f202 	lsl.w	r2, r0, r2
    7e32:	3320      	adds	r3, #32
    7e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7e38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7e3c:	f3bf 8f6f 	isb	sy
}
    7e40:	bf00      	nop
    7e42:	370c      	adds	r7, #12
    7e44:	46bd      	mov	sp, r7
    7e46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e4a:	4770      	bx	lr
    7e4c:	e000e100 	.word	0xe000e100

00007e50 <__NVIC_ClearPendingIRQ>:
{
    7e50:	b480      	push	{r7}
    7e52:	b083      	sub	sp, #12
    7e54:	af00      	add	r7, sp, #0
    7e56:	4603      	mov	r3, r0
    7e58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e5e:	2b00      	cmp	r3, #0
    7e60:	db0c      	blt.n	7e7c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e62:	4909      	ldr	r1, [pc, #36]	; (7e88 <__NVIC_ClearPendingIRQ+0x38>)
    7e64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e68:	095b      	lsrs	r3, r3, #5
    7e6a:	88fa      	ldrh	r2, [r7, #6]
    7e6c:	f002 021f 	and.w	r2, r2, #31
    7e70:	2001      	movs	r0, #1
    7e72:	fa00 f202 	lsl.w	r2, r0, r2
    7e76:	3360      	adds	r3, #96	; 0x60
    7e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7e7c:	bf00      	nop
    7e7e:	370c      	adds	r7, #12
    7e80:	46bd      	mov	sp, r7
    7e82:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e86:	4770      	bx	lr
    7e88:	e000e100 	.word	0xe000e100

00007e8c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7e8c:	b480      	push	{r7}
    7e8e:	b083      	sub	sp, #12
    7e90:	af00      	add	r7, sp, #0
    7e92:	6078      	str	r0, [r7, #4]
    7e94:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7e96:	bf00      	nop
    7e98:	687b      	ldr	r3, [r7, #4]
    7e9a:	691a      	ldr	r2, [r3, #16]
    7e9c:	683b      	ldr	r3, [r7, #0]
    7e9e:	4013      	ands	r3, r2
    7ea0:	2b00      	cmp	r3, #0
    7ea2:	d1f9      	bne.n	7e98 <hri_tc_wait_for_sync+0xc>
	};
}
    7ea4:	bf00      	nop
    7ea6:	370c      	adds	r7, #12
    7ea8:	46bd      	mov	sp, r7
    7eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eae:	4770      	bx	lr

00007eb0 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7eb0:	b480      	push	{r7}
    7eb2:	b083      	sub	sp, #12
    7eb4:	af00      	add	r7, sp, #0
    7eb6:	6078      	str	r0, [r7, #4]
    7eb8:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7eba:	687b      	ldr	r3, [r7, #4]
    7ebc:	691a      	ldr	r2, [r3, #16]
    7ebe:	683b      	ldr	r3, [r7, #0]
    7ec0:	4013      	ands	r3, r2
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	bf14      	ite	ne
    7ec6:	2301      	movne	r3, #1
    7ec8:	2300      	moveq	r3, #0
    7eca:	b2db      	uxtb	r3, r3
}
    7ecc:	4618      	mov	r0, r3
    7ece:	370c      	adds	r7, #12
    7ed0:	46bd      	mov	sp, r7
    7ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ed6:	4770      	bx	lr

00007ed8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7ed8:	b480      	push	{r7}
    7eda:	b083      	sub	sp, #12
    7edc:	af00      	add	r7, sp, #0
    7ede:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7ee0:	687b      	ldr	r3, [r7, #4]
    7ee2:	7a9b      	ldrb	r3, [r3, #10]
    7ee4:	b2db      	uxtb	r3, r3
    7ee6:	f003 0301 	and.w	r3, r3, #1
    7eea:	2b00      	cmp	r3, #0
    7eec:	bf14      	ite	ne
    7eee:	2301      	movne	r3, #1
    7ef0:	2300      	moveq	r3, #0
    7ef2:	b2db      	uxtb	r3, r3
}
    7ef4:	4618      	mov	r0, r3
    7ef6:	370c      	adds	r7, #12
    7ef8:	46bd      	mov	sp, r7
    7efa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7efe:	4770      	bx	lr

00007f00 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7f00:	b480      	push	{r7}
    7f02:	b083      	sub	sp, #12
    7f04:	af00      	add	r7, sp, #0
    7f06:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7f08:	687b      	ldr	r3, [r7, #4]
    7f0a:	2201      	movs	r2, #1
    7f0c:	729a      	strb	r2, [r3, #10]
}
    7f0e:	bf00      	nop
    7f10:	370c      	adds	r7, #12
    7f12:	46bd      	mov	sp, r7
    7f14:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f18:	4770      	bx	lr

00007f1a <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7f1a:	b480      	push	{r7}
    7f1c:	b083      	sub	sp, #12
    7f1e:	af00      	add	r7, sp, #0
    7f20:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    7f22:	687b      	ldr	r3, [r7, #4]
    7f24:	2202      	movs	r2, #2
    7f26:	729a      	strb	r2, [r3, #10]
}
    7f28:	bf00      	nop
    7f2a:	370c      	adds	r7, #12
    7f2c:	46bd      	mov	sp, r7
    7f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f32:	4770      	bx	lr

00007f34 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7f34:	b480      	push	{r7}
    7f36:	b083      	sub	sp, #12
    7f38:	af00      	add	r7, sp, #0
    7f3a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7f3c:	687b      	ldr	r3, [r7, #4]
    7f3e:	2201      	movs	r2, #1
    7f40:	725a      	strb	r2, [r3, #9]
}
    7f42:	bf00      	nop
    7f44:	370c      	adds	r7, #12
    7f46:	46bd      	mov	sp, r7
    7f48:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f4c:	4770      	bx	lr

00007f4e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7f4e:	b480      	push	{r7}
    7f50:	b083      	sub	sp, #12
    7f52:	af00      	add	r7, sp, #0
    7f54:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7f56:	687b      	ldr	r3, [r7, #4]
    7f58:	7a5b      	ldrb	r3, [r3, #9]
    7f5a:	b2db      	uxtb	r3, r3
    7f5c:	085b      	lsrs	r3, r3, #1
    7f5e:	f003 0301 	and.w	r3, r3, #1
    7f62:	2b00      	cmp	r3, #0
    7f64:	bf14      	ite	ne
    7f66:	2301      	movne	r3, #1
    7f68:	2300      	moveq	r3, #0
    7f6a:	b2db      	uxtb	r3, r3
}
    7f6c:	4618      	mov	r0, r3
    7f6e:	370c      	adds	r7, #12
    7f70:	46bd      	mov	sp, r7
    7f72:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f76:	4770      	bx	lr

00007f78 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7f78:	b580      	push	{r7, lr}
    7f7a:	b082      	sub	sp, #8
    7f7c:	af00      	add	r7, sp, #0
    7f7e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7f80:	687b      	ldr	r3, [r7, #4]
    7f82:	681b      	ldr	r3, [r3, #0]
    7f84:	f043 0202 	orr.w	r2, r3, #2
    7f88:	687b      	ldr	r3, [r7, #4]
    7f8a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7f8c:	2103      	movs	r1, #3
    7f8e:	6878      	ldr	r0, [r7, #4]
    7f90:	4b02      	ldr	r3, [pc, #8]	; (7f9c <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7f92:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7f94:	bf00      	nop
    7f96:	3708      	adds	r7, #8
    7f98:	46bd      	mov	sp, r7
    7f9a:	bd80      	pop	{r7, pc}
    7f9c:	00007e8d 	.word	0x00007e8d

00007fa0 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7fa0:	b580      	push	{r7, lr}
    7fa2:	b084      	sub	sp, #16
    7fa4:	af00      	add	r7, sp, #0
    7fa6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7fa8:	2103      	movs	r1, #3
    7faa:	6878      	ldr	r0, [r7, #4]
    7fac:	4b09      	ldr	r3, [pc, #36]	; (7fd4 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7fae:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7fb0:	687b      	ldr	r3, [r7, #4]
    7fb2:	681b      	ldr	r3, [r3, #0]
    7fb4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7fb6:	68fb      	ldr	r3, [r7, #12]
    7fb8:	085b      	lsrs	r3, r3, #1
    7fba:	f003 0301 	and.w	r3, r3, #1
    7fbe:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7fc0:	68fb      	ldr	r3, [r7, #12]
    7fc2:	2b00      	cmp	r3, #0
    7fc4:	bf14      	ite	ne
    7fc6:	2301      	movne	r3, #1
    7fc8:	2300      	moveq	r3, #0
    7fca:	b2db      	uxtb	r3, r3
}
    7fcc:	4618      	mov	r0, r3
    7fce:	3710      	adds	r7, #16
    7fd0:	46bd      	mov	sp, r7
    7fd2:	bd80      	pop	{r7, pc}
    7fd4:	00007e8d 	.word	0x00007e8d

00007fd8 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7fd8:	b580      	push	{r7, lr}
    7fda:	b082      	sub	sp, #8
    7fdc:	af00      	add	r7, sp, #0
    7fde:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7fe0:	687b      	ldr	r3, [r7, #4]
    7fe2:	681b      	ldr	r3, [r3, #0]
    7fe4:	f023 0202 	bic.w	r2, r3, #2
    7fe8:	687b      	ldr	r3, [r7, #4]
    7fea:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7fec:	2103      	movs	r1, #3
    7fee:	6878      	ldr	r0, [r7, #4]
    7ff0:	4b02      	ldr	r3, [pc, #8]	; (7ffc <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7ff2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7ff4:	bf00      	nop
    7ff6:	3708      	adds	r7, #8
    7ff8:	46bd      	mov	sp, r7
    7ffa:	bd80      	pop	{r7, pc}
    7ffc:	00007e8d 	.word	0x00007e8d

00008000 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    8000:	b580      	push	{r7, lr}
    8002:	b084      	sub	sp, #16
    8004:	af00      	add	r7, sp, #0
    8006:	6078      	str	r0, [r7, #4]
    8008:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    800a:	2103      	movs	r1, #3
    800c:	6878      	ldr	r0, [r7, #4]
    800e:	4b07      	ldr	r3, [pc, #28]	; (802c <hri_tc_get_CTRLA_reg+0x2c>)
    8010:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8012:	687b      	ldr	r3, [r7, #4]
    8014:	681b      	ldr	r3, [r3, #0]
    8016:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8018:	68fa      	ldr	r2, [r7, #12]
    801a:	683b      	ldr	r3, [r7, #0]
    801c:	4013      	ands	r3, r2
    801e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8020:	68fb      	ldr	r3, [r7, #12]
}
    8022:	4618      	mov	r0, r3
    8024:	3710      	adds	r7, #16
    8026:	46bd      	mov	sp, r7
    8028:	bd80      	pop	{r7, pc}
    802a:	bf00      	nop
    802c:	00007e8d 	.word	0x00007e8d

00008030 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8030:	b580      	push	{r7, lr}
    8032:	b082      	sub	sp, #8
    8034:	af00      	add	r7, sp, #0
    8036:	6078      	str	r0, [r7, #4]
    8038:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    803a:	687b      	ldr	r3, [r7, #4]
    803c:	683a      	ldr	r2, [r7, #0]
    803e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8040:	2103      	movs	r1, #3
    8042:	6878      	ldr	r0, [r7, #4]
    8044:	4b02      	ldr	r3, [pc, #8]	; (8050 <hri_tc_write_CTRLA_reg+0x20>)
    8046:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8048:	bf00      	nop
    804a:	3708      	adds	r7, #8
    804c:	46bd      	mov	sp, r7
    804e:	bd80      	pop	{r7, pc}
    8050:	00007e8d 	.word	0x00007e8d

00008054 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8054:	b480      	push	{r7}
    8056:	b083      	sub	sp, #12
    8058:	af00      	add	r7, sp, #0
    805a:	6078      	str	r0, [r7, #4]
    805c:	460b      	mov	r3, r1
    805e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8060:	687b      	ldr	r3, [r7, #4]
    8062:	887a      	ldrh	r2, [r7, #2]
    8064:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    8066:	bf00      	nop
    8068:	370c      	adds	r7, #12
    806a:	46bd      	mov	sp, r7
    806c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8070:	4770      	bx	lr

00008072 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    8072:	b480      	push	{r7}
    8074:	b083      	sub	sp, #12
    8076:	af00      	add	r7, sp, #0
    8078:	6078      	str	r0, [r7, #4]
    807a:	460b      	mov	r3, r1
    807c:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    807e:	687b      	ldr	r3, [r7, #4]
    8080:	78fa      	ldrb	r2, [r7, #3]
    8082:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    8084:	bf00      	nop
    8086:	370c      	adds	r7, #12
    8088:	46bd      	mov	sp, r7
    808a:	f85d 7b04 	ldr.w	r7, [sp], #4
    808e:	4770      	bx	lr

00008090 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    8090:	b480      	push	{r7}
    8092:	b083      	sub	sp, #12
    8094:	af00      	add	r7, sp, #0
    8096:	6078      	str	r0, [r7, #4]
    8098:	460b      	mov	r3, r1
    809a:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    809c:	687b      	ldr	r3, [r7, #4]
    809e:	78fa      	ldrb	r2, [r7, #3]
    80a0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    80a2:	bf00      	nop
    80a4:	370c      	adds	r7, #12
    80a6:	46bd      	mov	sp, r7
    80a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    80ac:	4770      	bx	lr
	...

000080b0 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    80b0:	b580      	push	{r7, lr}
    80b2:	b082      	sub	sp, #8
    80b4:	af00      	add	r7, sp, #0
    80b6:	6078      	str	r0, [r7, #4]
    80b8:	460b      	mov	r3, r1
    80ba:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    80bc:	687b      	ldr	r3, [r7, #4]
    80be:	78fa      	ldrb	r2, [r7, #3]
    80c0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    80c2:	2120      	movs	r1, #32
    80c4:	6878      	ldr	r0, [r7, #4]
    80c6:	4b03      	ldr	r3, [pc, #12]	; (80d4 <hri_tccount8_write_PER_reg+0x24>)
    80c8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    80ca:	bf00      	nop
    80cc:	3708      	adds	r7, #8
    80ce:	46bd      	mov	sp, r7
    80d0:	bd80      	pop	{r7, pc}
    80d2:	bf00      	nop
    80d4:	00007e8d 	.word	0x00007e8d

000080d8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    80d8:	b580      	push	{r7, lr}
    80da:	b082      	sub	sp, #8
    80dc:	af00      	add	r7, sp, #0
    80de:	6078      	str	r0, [r7, #4]
    80e0:	460b      	mov	r3, r1
    80e2:	70fb      	strb	r3, [r7, #3]
    80e4:	4613      	mov	r3, r2
    80e6:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    80e8:	78fb      	ldrb	r3, [r7, #3]
    80ea:	687a      	ldr	r2, [r7, #4]
    80ec:	4413      	add	r3, r2
    80ee:	78ba      	ldrb	r2, [r7, #2]
    80f0:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    80f2:	21c0      	movs	r1, #192	; 0xc0
    80f4:	6878      	ldr	r0, [r7, #4]
    80f6:	4b03      	ldr	r3, [pc, #12]	; (8104 <hri_tccount8_write_CC_reg+0x2c>)
    80f8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    80fa:	bf00      	nop
    80fc:	3708      	adds	r7, #8
    80fe:	46bd      	mov	sp, r7
    8100:	bd80      	pop	{r7, pc}
    8102:	bf00      	nop
    8104:	00007e8d 	.word	0x00007e8d

00008108 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    8108:	b580      	push	{r7, lr}
    810a:	b082      	sub	sp, #8
    810c:	af00      	add	r7, sp, #0
    810e:	6078      	str	r0, [r7, #4]
    8110:	460b      	mov	r3, r1
    8112:	70fb      	strb	r3, [r7, #3]
    8114:	4613      	mov	r3, r2
    8116:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8118:	78fb      	ldrb	r3, [r7, #3]
    811a:	687a      	ldr	r2, [r7, #4]
    811c:	330c      	adds	r3, #12
    811e:	005b      	lsls	r3, r3, #1
    8120:	4413      	add	r3, r2
    8122:	883a      	ldrh	r2, [r7, #0]
    8124:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8126:	21c0      	movs	r1, #192	; 0xc0
    8128:	6878      	ldr	r0, [r7, #4]
    812a:	4b03      	ldr	r3, [pc, #12]	; (8138 <hri_tccount16_write_CC_reg+0x30>)
    812c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    812e:	bf00      	nop
    8130:	3708      	adds	r7, #8
    8132:	46bd      	mov	sp, r7
    8134:	bd80      	pop	{r7, pc}
    8136:	bf00      	nop
    8138:	00007e8d 	.word	0x00007e8d

0000813c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    813c:	b580      	push	{r7, lr}
    813e:	b084      	sub	sp, #16
    8140:	af00      	add	r7, sp, #0
    8142:	60f8      	str	r0, [r7, #12]
    8144:	460b      	mov	r3, r1
    8146:	607a      	str	r2, [r7, #4]
    8148:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    814a:	7afb      	ldrb	r3, [r7, #11]
    814c:	68fa      	ldr	r2, [r7, #12]
    814e:	3306      	adds	r3, #6
    8150:	009b      	lsls	r3, r3, #2
    8152:	4413      	add	r3, r2
    8154:	687a      	ldr	r2, [r7, #4]
    8156:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8158:	21c0      	movs	r1, #192	; 0xc0
    815a:	68f8      	ldr	r0, [r7, #12]
    815c:	4b02      	ldr	r3, [pc, #8]	; (8168 <hri_tccount32_write_CC_reg+0x2c>)
    815e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8160:	bf00      	nop
    8162:	3710      	adds	r7, #16
    8164:	46bd      	mov	sp, r7
    8166:	bd80      	pop	{r7, pc}
    8168:	00007e8d 	.word	0x00007e8d

0000816c <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    816c:	b580      	push	{r7, lr}
    816e:	b084      	sub	sp, #16
    8170:	af00      	add	r7, sp, #0
    8172:	6078      	str	r0, [r7, #4]
    8174:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    8176:	6838      	ldr	r0, [r7, #0]
    8178:	4b93      	ldr	r3, [pc, #588]	; (83c8 <_timer_init+0x25c>)
    817a:	4798      	blx	r3
    817c:	4603      	mov	r3, r0
    817e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    8180:	687b      	ldr	r3, [r7, #4]
    8182:	683a      	ldr	r2, [r7, #0]
    8184:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    8186:	2299      	movs	r2, #153	; 0x99
    8188:	4990      	ldr	r1, [pc, #576]	; (83cc <_timer_init+0x260>)
    818a:	2001      	movs	r0, #1
    818c:	4b90      	ldr	r3, [pc, #576]	; (83d0 <_timer_init+0x264>)
    818e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8190:	2101      	movs	r1, #1
    8192:	6838      	ldr	r0, [r7, #0]
    8194:	4b8f      	ldr	r3, [pc, #572]	; (83d4 <_timer_init+0x268>)
    8196:	4798      	blx	r3
    8198:	4603      	mov	r3, r0
    819a:	f083 0301 	eor.w	r3, r3, #1
    819e:	b2db      	uxtb	r3, r3
    81a0:	2b00      	cmp	r3, #0
    81a2:	d011      	beq.n	81c8 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    81a4:	2102      	movs	r1, #2
    81a6:	6838      	ldr	r0, [r7, #0]
    81a8:	4b8b      	ldr	r3, [pc, #556]	; (83d8 <_timer_init+0x26c>)
    81aa:	4798      	blx	r3
    81ac:	4603      	mov	r3, r0
    81ae:	2b00      	cmp	r3, #0
    81b0:	d006      	beq.n	81c0 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    81b2:	6838      	ldr	r0, [r7, #0]
    81b4:	4b89      	ldr	r3, [pc, #548]	; (83dc <_timer_init+0x270>)
    81b6:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    81b8:	2102      	movs	r1, #2
    81ba:	6838      	ldr	r0, [r7, #0]
    81bc:	4b88      	ldr	r3, [pc, #544]	; (83e0 <_timer_init+0x274>)
    81be:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    81c0:	2101      	movs	r1, #1
    81c2:	6838      	ldr	r0, [r7, #0]
    81c4:	4b87      	ldr	r3, [pc, #540]	; (83e4 <_timer_init+0x278>)
    81c6:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    81c8:	2101      	movs	r1, #1
    81ca:	6838      	ldr	r0, [r7, #0]
    81cc:	4b84      	ldr	r3, [pc, #528]	; (83e0 <_timer_init+0x274>)
    81ce:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    81d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    81d4:	4984      	ldr	r1, [pc, #528]	; (83e8 <_timer_init+0x27c>)
    81d6:	4613      	mov	r3, r2
    81d8:	009b      	lsls	r3, r3, #2
    81da:	4413      	add	r3, r2
    81dc:	009b      	lsls	r3, r3, #2
    81de:	440b      	add	r3, r1
    81e0:	3304      	adds	r3, #4
    81e2:	681b      	ldr	r3, [r3, #0]
    81e4:	4619      	mov	r1, r3
    81e6:	6838      	ldr	r0, [r7, #0]
    81e8:	4b7e      	ldr	r3, [pc, #504]	; (83e4 <_timer_init+0x278>)
    81ea:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    81ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    81f0:	497d      	ldr	r1, [pc, #500]	; (83e8 <_timer_init+0x27c>)
    81f2:	4613      	mov	r3, r2
    81f4:	009b      	lsls	r3, r3, #2
    81f6:	4413      	add	r3, r2
    81f8:	009b      	lsls	r3, r3, #2
    81fa:	440b      	add	r3, r1
    81fc:	330a      	adds	r3, #10
    81fe:	781b      	ldrb	r3, [r3, #0]
    8200:	4619      	mov	r1, r3
    8202:	6838      	ldr	r0, [r7, #0]
    8204:	4b79      	ldr	r3, [pc, #484]	; (83ec <_timer_init+0x280>)
    8206:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8208:	f997 200f 	ldrsb.w	r2, [r7, #15]
    820c:	4976      	ldr	r1, [pc, #472]	; (83e8 <_timer_init+0x27c>)
    820e:	4613      	mov	r3, r2
    8210:	009b      	lsls	r3, r3, #2
    8212:	4413      	add	r3, r2
    8214:	009b      	lsls	r3, r3, #2
    8216:	440b      	add	r3, r1
    8218:	3308      	adds	r3, #8
    821a:	881b      	ldrh	r3, [r3, #0]
    821c:	4619      	mov	r1, r3
    821e:	6838      	ldr	r0, [r7, #0]
    8220:	4b73      	ldr	r3, [pc, #460]	; (83f0 <_timer_init+0x284>)
    8222:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    8224:	2101      	movs	r1, #1
    8226:	6838      	ldr	r0, [r7, #0]
    8228:	4b72      	ldr	r3, [pc, #456]	; (83f4 <_timer_init+0x288>)
    822a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    822c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8230:	496d      	ldr	r1, [pc, #436]	; (83e8 <_timer_init+0x27c>)
    8232:	4613      	mov	r3, r2
    8234:	009b      	lsls	r3, r3, #2
    8236:	4413      	add	r3, r2
    8238:	009b      	lsls	r3, r3, #2
    823a:	440b      	add	r3, r1
    823c:	3304      	adds	r3, #4
    823e:	681b      	ldr	r3, [r3, #0]
    8240:	f003 030c 	and.w	r3, r3, #12
    8244:	2b08      	cmp	r3, #8
    8246:	d11e      	bne.n	8286 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8248:	f997 200f 	ldrsb.w	r2, [r7, #15]
    824c:	4966      	ldr	r1, [pc, #408]	; (83e8 <_timer_init+0x27c>)
    824e:	4613      	mov	r3, r2
    8250:	009b      	lsls	r3, r3, #2
    8252:	4413      	add	r3, r2
    8254:	009b      	lsls	r3, r3, #2
    8256:	440b      	add	r3, r1
    8258:	330c      	adds	r3, #12
    825a:	681b      	ldr	r3, [r3, #0]
    825c:	461a      	mov	r2, r3
    825e:	2100      	movs	r1, #0
    8260:	6838      	ldr	r0, [r7, #0]
    8262:	4b65      	ldr	r3, [pc, #404]	; (83f8 <_timer_init+0x28c>)
    8264:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8266:	f997 200f 	ldrsb.w	r2, [r7, #15]
    826a:	495f      	ldr	r1, [pc, #380]	; (83e8 <_timer_init+0x27c>)
    826c:	4613      	mov	r3, r2
    826e:	009b      	lsls	r3, r3, #2
    8270:	4413      	add	r3, r2
    8272:	009b      	lsls	r3, r3, #2
    8274:	440b      	add	r3, r1
    8276:	3310      	adds	r3, #16
    8278:	681b      	ldr	r3, [r3, #0]
    827a:	461a      	mov	r2, r3
    827c:	2101      	movs	r1, #1
    827e:	6838      	ldr	r0, [r7, #0]
    8280:	4b5d      	ldr	r3, [pc, #372]	; (83f8 <_timer_init+0x28c>)
    8282:	4798      	blx	r3
    8284:	e06a      	b.n	835c <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8286:	f997 200f 	ldrsb.w	r2, [r7, #15]
    828a:	4957      	ldr	r1, [pc, #348]	; (83e8 <_timer_init+0x27c>)
    828c:	4613      	mov	r3, r2
    828e:	009b      	lsls	r3, r3, #2
    8290:	4413      	add	r3, r2
    8292:	009b      	lsls	r3, r3, #2
    8294:	440b      	add	r3, r1
    8296:	3304      	adds	r3, #4
    8298:	681b      	ldr	r3, [r3, #0]
    829a:	f003 030c 	and.w	r3, r3, #12
    829e:	2b00      	cmp	r3, #0
    82a0:	d120      	bne.n	82e4 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    82a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82a6:	4950      	ldr	r1, [pc, #320]	; (83e8 <_timer_init+0x27c>)
    82a8:	4613      	mov	r3, r2
    82aa:	009b      	lsls	r3, r3, #2
    82ac:	4413      	add	r3, r2
    82ae:	009b      	lsls	r3, r3, #2
    82b0:	440b      	add	r3, r1
    82b2:	330c      	adds	r3, #12
    82b4:	681b      	ldr	r3, [r3, #0]
    82b6:	b29b      	uxth	r3, r3
    82b8:	461a      	mov	r2, r3
    82ba:	2100      	movs	r1, #0
    82bc:	6838      	ldr	r0, [r7, #0]
    82be:	4b4f      	ldr	r3, [pc, #316]	; (83fc <_timer_init+0x290>)
    82c0:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    82c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82c6:	4948      	ldr	r1, [pc, #288]	; (83e8 <_timer_init+0x27c>)
    82c8:	4613      	mov	r3, r2
    82ca:	009b      	lsls	r3, r3, #2
    82cc:	4413      	add	r3, r2
    82ce:	009b      	lsls	r3, r3, #2
    82d0:	440b      	add	r3, r1
    82d2:	3310      	adds	r3, #16
    82d4:	681b      	ldr	r3, [r3, #0]
    82d6:	b29b      	uxth	r3, r3
    82d8:	461a      	mov	r2, r3
    82da:	2101      	movs	r1, #1
    82dc:	6838      	ldr	r0, [r7, #0]
    82de:	4b47      	ldr	r3, [pc, #284]	; (83fc <_timer_init+0x290>)
    82e0:	4798      	blx	r3
    82e2:	e03b      	b.n	835c <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    82e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82e8:	493f      	ldr	r1, [pc, #252]	; (83e8 <_timer_init+0x27c>)
    82ea:	4613      	mov	r3, r2
    82ec:	009b      	lsls	r3, r3, #2
    82ee:	4413      	add	r3, r2
    82f0:	009b      	lsls	r3, r3, #2
    82f2:	440b      	add	r3, r1
    82f4:	3304      	adds	r3, #4
    82f6:	681b      	ldr	r3, [r3, #0]
    82f8:	f003 030c 	and.w	r3, r3, #12
    82fc:	2b04      	cmp	r3, #4
    82fe:	d12d      	bne.n	835c <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    8300:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8304:	4938      	ldr	r1, [pc, #224]	; (83e8 <_timer_init+0x27c>)
    8306:	4613      	mov	r3, r2
    8308:	009b      	lsls	r3, r3, #2
    830a:	4413      	add	r3, r2
    830c:	009b      	lsls	r3, r3, #2
    830e:	440b      	add	r3, r1
    8310:	330c      	adds	r3, #12
    8312:	681b      	ldr	r3, [r3, #0]
    8314:	b2db      	uxtb	r3, r3
    8316:	461a      	mov	r2, r3
    8318:	2100      	movs	r1, #0
    831a:	6838      	ldr	r0, [r7, #0]
    831c:	4b38      	ldr	r3, [pc, #224]	; (8400 <_timer_init+0x294>)
    831e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    8320:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8324:	4930      	ldr	r1, [pc, #192]	; (83e8 <_timer_init+0x27c>)
    8326:	4613      	mov	r3, r2
    8328:	009b      	lsls	r3, r3, #2
    832a:	4413      	add	r3, r2
    832c:	009b      	lsls	r3, r3, #2
    832e:	440b      	add	r3, r1
    8330:	3310      	adds	r3, #16
    8332:	681b      	ldr	r3, [r3, #0]
    8334:	b2db      	uxtb	r3, r3
    8336:	461a      	mov	r2, r3
    8338:	2101      	movs	r1, #1
    833a:	6838      	ldr	r0, [r7, #0]
    833c:	4b30      	ldr	r3, [pc, #192]	; (8400 <_timer_init+0x294>)
    833e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    8340:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8344:	4928      	ldr	r1, [pc, #160]	; (83e8 <_timer_init+0x27c>)
    8346:	4613      	mov	r3, r2
    8348:	009b      	lsls	r3, r3, #2
    834a:	4413      	add	r3, r2
    834c:	009b      	lsls	r3, r3, #2
    834e:	440b      	add	r3, r1
    8350:	330b      	adds	r3, #11
    8352:	781b      	ldrb	r3, [r3, #0]
    8354:	4619      	mov	r1, r3
    8356:	6838      	ldr	r0, [r7, #0]
    8358:	4b2a      	ldr	r3, [pc, #168]	; (8404 <_timer_init+0x298>)
    835a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    835c:	6838      	ldr	r0, [r7, #0]
    835e:	4b2a      	ldr	r3, [pc, #168]	; (8408 <_timer_init+0x29c>)
    8360:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    8362:	6879      	ldr	r1, [r7, #4]
    8364:	6838      	ldr	r0, [r7, #0]
    8366:	4b29      	ldr	r3, [pc, #164]	; (840c <_timer_init+0x2a0>)
    8368:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    836a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    836e:	491e      	ldr	r1, [pc, #120]	; (83e8 <_timer_init+0x27c>)
    8370:	4613      	mov	r3, r2
    8372:	009b      	lsls	r3, r3, #2
    8374:	4413      	add	r3, r2
    8376:	009b      	lsls	r3, r3, #2
    8378:	440b      	add	r3, r1
    837a:	3302      	adds	r3, #2
    837c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8380:	4618      	mov	r0, r3
    8382:	4b23      	ldr	r3, [pc, #140]	; (8410 <_timer_init+0x2a4>)
    8384:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8386:	f997 200f 	ldrsb.w	r2, [r7, #15]
    838a:	4917      	ldr	r1, [pc, #92]	; (83e8 <_timer_init+0x27c>)
    838c:	4613      	mov	r3, r2
    838e:	009b      	lsls	r3, r3, #2
    8390:	4413      	add	r3, r2
    8392:	009b      	lsls	r3, r3, #2
    8394:	440b      	add	r3, r1
    8396:	3302      	adds	r3, #2
    8398:	f9b3 3000 	ldrsh.w	r3, [r3]
    839c:	4618      	mov	r0, r3
    839e:	4b1d      	ldr	r3, [pc, #116]	; (8414 <_timer_init+0x2a8>)
    83a0:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    83a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    83a6:	4910      	ldr	r1, [pc, #64]	; (83e8 <_timer_init+0x27c>)
    83a8:	4613      	mov	r3, r2
    83aa:	009b      	lsls	r3, r3, #2
    83ac:	4413      	add	r3, r2
    83ae:	009b      	lsls	r3, r3, #2
    83b0:	440b      	add	r3, r1
    83b2:	3302      	adds	r3, #2
    83b4:	f9b3 3000 	ldrsh.w	r3, [r3]
    83b8:	4618      	mov	r0, r3
    83ba:	4b17      	ldr	r3, [pc, #92]	; (8418 <_timer_init+0x2ac>)
    83bc:	4798      	blx	r3

	return ERR_NONE;
    83be:	2300      	movs	r3, #0
}
    83c0:	4618      	mov	r0, r3
    83c2:	3710      	adds	r7, #16
    83c4:	46bd      	mov	sp, r7
    83c6:	bd80      	pop	{r7, pc}
    83c8:	00008881 	.word	0x00008881
    83cc:	00011600 	.word	0x00011600
    83d0:	00003f79 	.word	0x00003f79
    83d4:	00007eb1 	.word	0x00007eb1
    83d8:	00008001 	.word	0x00008001
    83dc:	00007fd9 	.word	0x00007fd9
    83e0:	00007e8d 	.word	0x00007e8d
    83e4:	00008031 	.word	0x00008031
    83e8:	20000048 	.word	0x20000048
    83ec:	00008091 	.word	0x00008091
    83f0:	00008055 	.word	0x00008055
    83f4:	00008073 	.word	0x00008073
    83f8:	0000813d 	.word	0x0000813d
    83fc:	00008109 	.word	0x00008109
    8400:	000080d9 	.word	0x000080d9
    8404:	000080b1 	.word	0x000080b1
    8408:	00007f35 	.word	0x00007f35
    840c:	000088e9 	.word	0x000088e9
    8410:	00007e0d 	.word	0x00007e0d
    8414:	00007e51 	.word	0x00007e51
    8418:	00007dd1 	.word	0x00007dd1

0000841c <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    841c:	b580      	push	{r7, lr}
    841e:	b084      	sub	sp, #16
    8420:	af00      	add	r7, sp, #0
    8422:	6078      	str	r0, [r7, #4]
    8424:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    8426:	6838      	ldr	r0, [r7, #0]
    8428:	4b73      	ldr	r3, [pc, #460]	; (85f8 <_pwm_init+0x1dc>)
    842a:	4798      	blx	r3
    842c:	4603      	mov	r3, r0
    842e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    8430:	687b      	ldr	r3, [r7, #4]
    8432:	683a      	ldr	r2, [r7, #0]
    8434:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8436:	2101      	movs	r1, #1
    8438:	6838      	ldr	r0, [r7, #0]
    843a:	4b70      	ldr	r3, [pc, #448]	; (85fc <_pwm_init+0x1e0>)
    843c:	4798      	blx	r3
    843e:	4603      	mov	r3, r0
    8440:	f083 0301 	eor.w	r3, r3, #1
    8444:	b2db      	uxtb	r3, r3
    8446:	2b00      	cmp	r3, #0
    8448:	d011      	beq.n	846e <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    844a:	2102      	movs	r1, #2
    844c:	6838      	ldr	r0, [r7, #0]
    844e:	4b6c      	ldr	r3, [pc, #432]	; (8600 <_pwm_init+0x1e4>)
    8450:	4798      	blx	r3
    8452:	4603      	mov	r3, r0
    8454:	2b00      	cmp	r3, #0
    8456:	d006      	beq.n	8466 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8458:	6838      	ldr	r0, [r7, #0]
    845a:	4b6a      	ldr	r3, [pc, #424]	; (8604 <_pwm_init+0x1e8>)
    845c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    845e:	2102      	movs	r1, #2
    8460:	6838      	ldr	r0, [r7, #0]
    8462:	4b69      	ldr	r3, [pc, #420]	; (8608 <_pwm_init+0x1ec>)
    8464:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8466:	2101      	movs	r1, #1
    8468:	6838      	ldr	r0, [r7, #0]
    846a:	4b68      	ldr	r3, [pc, #416]	; (860c <_pwm_init+0x1f0>)
    846c:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    846e:	2101      	movs	r1, #1
    8470:	6838      	ldr	r0, [r7, #0]
    8472:	4b65      	ldr	r3, [pc, #404]	; (8608 <_pwm_init+0x1ec>)
    8474:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8476:	f997 200f 	ldrsb.w	r2, [r7, #15]
    847a:	4965      	ldr	r1, [pc, #404]	; (8610 <_pwm_init+0x1f4>)
    847c:	4613      	mov	r3, r2
    847e:	009b      	lsls	r3, r3, #2
    8480:	4413      	add	r3, r2
    8482:	009b      	lsls	r3, r3, #2
    8484:	440b      	add	r3, r1
    8486:	3304      	adds	r3, #4
    8488:	681b      	ldr	r3, [r3, #0]
    848a:	4619      	mov	r1, r3
    848c:	6838      	ldr	r0, [r7, #0]
    848e:	4b5f      	ldr	r3, [pc, #380]	; (860c <_pwm_init+0x1f0>)
    8490:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8492:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8496:	495e      	ldr	r1, [pc, #376]	; (8610 <_pwm_init+0x1f4>)
    8498:	4613      	mov	r3, r2
    849a:	009b      	lsls	r3, r3, #2
    849c:	4413      	add	r3, r2
    849e:	009b      	lsls	r3, r3, #2
    84a0:	440b      	add	r3, r1
    84a2:	330a      	adds	r3, #10
    84a4:	781b      	ldrb	r3, [r3, #0]
    84a6:	4619      	mov	r1, r3
    84a8:	6838      	ldr	r0, [r7, #0]
    84aa:	4b5a      	ldr	r3, [pc, #360]	; (8614 <_pwm_init+0x1f8>)
    84ac:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    84ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    84b2:	4957      	ldr	r1, [pc, #348]	; (8610 <_pwm_init+0x1f4>)
    84b4:	4613      	mov	r3, r2
    84b6:	009b      	lsls	r3, r3, #2
    84b8:	4413      	add	r3, r2
    84ba:	009b      	lsls	r3, r3, #2
    84bc:	440b      	add	r3, r1
    84be:	3308      	adds	r3, #8
    84c0:	881b      	ldrh	r3, [r3, #0]
    84c2:	4619      	mov	r1, r3
    84c4:	6838      	ldr	r0, [r7, #0]
    84c6:	4b54      	ldr	r3, [pc, #336]	; (8618 <_pwm_init+0x1fc>)
    84c8:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    84ca:	2103      	movs	r1, #3
    84cc:	6838      	ldr	r0, [r7, #0]
    84ce:	4b53      	ldr	r3, [pc, #332]	; (861c <_pwm_init+0x200>)
    84d0:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    84d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    84d6:	494e      	ldr	r1, [pc, #312]	; (8610 <_pwm_init+0x1f4>)
    84d8:	4613      	mov	r3, r2
    84da:	009b      	lsls	r3, r3, #2
    84dc:	4413      	add	r3, r2
    84de:	009b      	lsls	r3, r3, #2
    84e0:	440b      	add	r3, r1
    84e2:	3304      	adds	r3, #4
    84e4:	681b      	ldr	r3, [r3, #0]
    84e6:	f003 030c 	and.w	r3, r3, #12
    84ea:	2b08      	cmp	r3, #8
    84ec:	d11e      	bne.n	852c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    84ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    84f2:	4947      	ldr	r1, [pc, #284]	; (8610 <_pwm_init+0x1f4>)
    84f4:	4613      	mov	r3, r2
    84f6:	009b      	lsls	r3, r3, #2
    84f8:	4413      	add	r3, r2
    84fa:	009b      	lsls	r3, r3, #2
    84fc:	440b      	add	r3, r1
    84fe:	330c      	adds	r3, #12
    8500:	681b      	ldr	r3, [r3, #0]
    8502:	461a      	mov	r2, r3
    8504:	2100      	movs	r1, #0
    8506:	6838      	ldr	r0, [r7, #0]
    8508:	4b45      	ldr	r3, [pc, #276]	; (8620 <_pwm_init+0x204>)
    850a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    850c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8510:	493f      	ldr	r1, [pc, #252]	; (8610 <_pwm_init+0x1f4>)
    8512:	4613      	mov	r3, r2
    8514:	009b      	lsls	r3, r3, #2
    8516:	4413      	add	r3, r2
    8518:	009b      	lsls	r3, r3, #2
    851a:	440b      	add	r3, r1
    851c:	3310      	adds	r3, #16
    851e:	681b      	ldr	r3, [r3, #0]
    8520:	461a      	mov	r2, r3
    8522:	2101      	movs	r1, #1
    8524:	6838      	ldr	r0, [r7, #0]
    8526:	4b3e      	ldr	r3, [pc, #248]	; (8620 <_pwm_init+0x204>)
    8528:	4798      	blx	r3
    852a:	e031      	b.n	8590 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    852c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8530:	4937      	ldr	r1, [pc, #220]	; (8610 <_pwm_init+0x1f4>)
    8532:	4613      	mov	r3, r2
    8534:	009b      	lsls	r3, r3, #2
    8536:	4413      	add	r3, r2
    8538:	009b      	lsls	r3, r3, #2
    853a:	440b      	add	r3, r1
    853c:	3304      	adds	r3, #4
    853e:	681b      	ldr	r3, [r3, #0]
    8540:	f003 030c 	and.w	r3, r3, #12
    8544:	2b00      	cmp	r3, #0
    8546:	d120      	bne.n	858a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8548:	f997 200f 	ldrsb.w	r2, [r7, #15]
    854c:	4930      	ldr	r1, [pc, #192]	; (8610 <_pwm_init+0x1f4>)
    854e:	4613      	mov	r3, r2
    8550:	009b      	lsls	r3, r3, #2
    8552:	4413      	add	r3, r2
    8554:	009b      	lsls	r3, r3, #2
    8556:	440b      	add	r3, r1
    8558:	330c      	adds	r3, #12
    855a:	681b      	ldr	r3, [r3, #0]
    855c:	b29b      	uxth	r3, r3
    855e:	461a      	mov	r2, r3
    8560:	2100      	movs	r1, #0
    8562:	6838      	ldr	r0, [r7, #0]
    8564:	4b2f      	ldr	r3, [pc, #188]	; (8624 <_pwm_init+0x208>)
    8566:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8568:	f997 200f 	ldrsb.w	r2, [r7, #15]
    856c:	4928      	ldr	r1, [pc, #160]	; (8610 <_pwm_init+0x1f4>)
    856e:	4613      	mov	r3, r2
    8570:	009b      	lsls	r3, r3, #2
    8572:	4413      	add	r3, r2
    8574:	009b      	lsls	r3, r3, #2
    8576:	440b      	add	r3, r1
    8578:	3310      	adds	r3, #16
    857a:	681b      	ldr	r3, [r3, #0]
    857c:	b29b      	uxth	r3, r3
    857e:	461a      	mov	r2, r3
    8580:	2101      	movs	r1, #1
    8582:	6838      	ldr	r0, [r7, #0]
    8584:	4b27      	ldr	r3, [pc, #156]	; (8624 <_pwm_init+0x208>)
    8586:	4798      	blx	r3
    8588:	e002      	b.n	8590 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    858a:	f04f 33ff 	mov.w	r3, #4294967295
    858e:	e02e      	b.n	85ee <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8590:	6879      	ldr	r1, [r7, #4]
    8592:	6838      	ldr	r0, [r7, #0]
    8594:	4b24      	ldr	r3, [pc, #144]	; (8628 <_pwm_init+0x20c>)
    8596:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    8598:	f997 200f 	ldrsb.w	r2, [r7, #15]
    859c:	491c      	ldr	r1, [pc, #112]	; (8610 <_pwm_init+0x1f4>)
    859e:	4613      	mov	r3, r2
    85a0:	009b      	lsls	r3, r3, #2
    85a2:	4413      	add	r3, r2
    85a4:	009b      	lsls	r3, r3, #2
    85a6:	440b      	add	r3, r1
    85a8:	3302      	adds	r3, #2
    85aa:	f9b3 3000 	ldrsh.w	r3, [r3]
    85ae:	4618      	mov	r0, r3
    85b0:	4b1e      	ldr	r3, [pc, #120]	; (862c <_pwm_init+0x210>)
    85b2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    85b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85b8:	4915      	ldr	r1, [pc, #84]	; (8610 <_pwm_init+0x1f4>)
    85ba:	4613      	mov	r3, r2
    85bc:	009b      	lsls	r3, r3, #2
    85be:	4413      	add	r3, r2
    85c0:	009b      	lsls	r3, r3, #2
    85c2:	440b      	add	r3, r1
    85c4:	3302      	adds	r3, #2
    85c6:	f9b3 3000 	ldrsh.w	r3, [r3]
    85ca:	4618      	mov	r0, r3
    85cc:	4b18      	ldr	r3, [pc, #96]	; (8630 <_pwm_init+0x214>)
    85ce:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    85d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85d4:	490e      	ldr	r1, [pc, #56]	; (8610 <_pwm_init+0x1f4>)
    85d6:	4613      	mov	r3, r2
    85d8:	009b      	lsls	r3, r3, #2
    85da:	4413      	add	r3, r2
    85dc:	009b      	lsls	r3, r3, #2
    85de:	440b      	add	r3, r1
    85e0:	3302      	adds	r3, #2
    85e2:	f9b3 3000 	ldrsh.w	r3, [r3]
    85e6:	4618      	mov	r0, r3
    85e8:	4b12      	ldr	r3, [pc, #72]	; (8634 <_pwm_init+0x218>)
    85ea:	4798      	blx	r3

	return 0;
    85ec:	2300      	movs	r3, #0
}
    85ee:	4618      	mov	r0, r3
    85f0:	3710      	adds	r7, #16
    85f2:	46bd      	mov	sp, r7
    85f4:	bd80      	pop	{r7, pc}
    85f6:	bf00      	nop
    85f8:	00008881 	.word	0x00008881
    85fc:	00007eb1 	.word	0x00007eb1
    8600:	00008001 	.word	0x00008001
    8604:	00007fd9 	.word	0x00007fd9
    8608:	00007e8d 	.word	0x00007e8d
    860c:	00008031 	.word	0x00008031
    8610:	20000048 	.word	0x20000048
    8614:	00008091 	.word	0x00008091
    8618:	00008055 	.word	0x00008055
    861c:	00008073 	.word	0x00008073
    8620:	0000813d 	.word	0x0000813d
    8624:	00008109 	.word	0x00008109
    8628:	000088e9 	.word	0x000088e9
    862c:	00007e0d 	.word	0x00007e0d
    8630:	00007e51 	.word	0x00007e51
    8634:	00007dd1 	.word	0x00007dd1

00008638 <_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const device)
{
    8638:	b580      	push	{r7, lr}
    863a:	b082      	sub	sp, #8
    863c:	af00      	add	r7, sp, #0
    863e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8640:	687b      	ldr	r3, [r7, #4]
    8642:	68db      	ldr	r3, [r3, #12]
    8644:	4618      	mov	r0, r3
    8646:	4b03      	ldr	r3, [pc, #12]	; (8654 <_timer_start+0x1c>)
    8648:	4798      	blx	r3
}
    864a:	bf00      	nop
    864c:	3708      	adds	r7, #8
    864e:	46bd      	mov	sp, r7
    8650:	bd80      	pop	{r7, pc}
    8652:	bf00      	nop
    8654:	00007f79 	.word	0x00007f79

00008658 <_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _timer_stop(struct _timer_device *const device)
{
    8658:	b580      	push	{r7, lr}
    865a:	b082      	sub	sp, #8
    865c:	af00      	add	r7, sp, #0
    865e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8660:	687b      	ldr	r3, [r7, #4]
    8662:	68db      	ldr	r3, [r3, #12]
    8664:	4618      	mov	r0, r3
    8666:	4b03      	ldr	r3, [pc, #12]	; (8674 <_timer_stop+0x1c>)
    8668:	4798      	blx	r3
}
    866a:	bf00      	nop
    866c:	3708      	adds	r7, #8
    866e:	46bd      	mov	sp, r7
    8670:	bd80      	pop	{r7, pc}
    8672:	bf00      	nop
    8674:	00007fd9 	.word	0x00007fd9

00008678 <_timer_is_started>:
}
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const device)
{
    8678:	b580      	push	{r7, lr}
    867a:	b082      	sub	sp, #8
    867c:	af00      	add	r7, sp, #0
    867e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8680:	687b      	ldr	r3, [r7, #4]
    8682:	68db      	ldr	r3, [r3, #12]
    8684:	4618      	mov	r0, r3
    8686:	4b03      	ldr	r3, [pc, #12]	; (8694 <_timer_is_started+0x1c>)
    8688:	4798      	blx	r3
    868a:	4603      	mov	r3, r0
}
    868c:	4618      	mov	r0, r3
    868e:	3708      	adds	r7, #8
    8690:	46bd      	mov	sp, r7
    8692:	bd80      	pop	{r7, pc}
    8694:	00007fa1 	.word	0x00007fa1

00008698 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8698:	b480      	push	{r7}
    869a:	af00      	add	r7, sp, #0
	return NULL;
    869c:	2300      	movs	r3, #0
}
    869e:	4618      	mov	r0, r3
    86a0:	46bd      	mov	sp, r7
    86a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    86a6:	4770      	bx	lr

000086a8 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    86a8:	b480      	push	{r7}
    86aa:	af00      	add	r7, sp, #0
	return NULL;
    86ac:	2300      	movs	r3, #0
}
    86ae:	4618      	mov	r0, r3
    86b0:	46bd      	mov	sp, r7
    86b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    86b6:	4770      	bx	lr

000086b8 <_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _timer_set_irq(struct _timer_device *const device)
{
    86b8:	b580      	push	{r7, lr}
    86ba:	b084      	sub	sp, #16
    86bc:	af00      	add	r7, sp, #0
    86be:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    86c0:	687b      	ldr	r3, [r7, #4]
    86c2:	68db      	ldr	r3, [r3, #12]
    86c4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    86c6:	68f8      	ldr	r0, [r7, #12]
    86c8:	4b0e      	ldr	r3, [pc, #56]	; (8704 <_timer_set_irq+0x4c>)
    86ca:	4798      	blx	r3
    86cc:	4603      	mov	r3, r0
    86ce:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    86d0:	f240 12a7 	movw	r2, #423	; 0x1a7
    86d4:	490c      	ldr	r1, [pc, #48]	; (8708 <_timer_set_irq+0x50>)
    86d6:	2001      	movs	r0, #1
    86d8:	4b0c      	ldr	r3, [pc, #48]	; (870c <_timer_set_irq+0x54>)
    86da:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    86dc:	f997 200b 	ldrsb.w	r2, [r7, #11]
    86e0:	490b      	ldr	r1, [pc, #44]	; (8710 <_timer_set_irq+0x58>)
    86e2:	4613      	mov	r3, r2
    86e4:	009b      	lsls	r3, r3, #2
    86e6:	4413      	add	r3, r2
    86e8:	009b      	lsls	r3, r3, #2
    86ea:	440b      	add	r3, r1
    86ec:	3302      	adds	r3, #2
    86ee:	f9b3 3000 	ldrsh.w	r3, [r3]
    86f2:	b2db      	uxtb	r3, r3
    86f4:	4618      	mov	r0, r3
    86f6:	4b07      	ldr	r3, [pc, #28]	; (8714 <_timer_set_irq+0x5c>)
    86f8:	4798      	blx	r3
}
    86fa:	bf00      	nop
    86fc:	3710      	adds	r7, #16
    86fe:	46bd      	mov	sp, r7
    8700:	bd80      	pop	{r7, pc}
    8702:	bf00      	nop
    8704:	00008881 	.word	0x00008881
    8708:	00011600 	.word	0x00011600
    870c:	00003f79 	.word	0x00003f79
    8710:	20000048 	.word	0x20000048
    8714:	000047c5 	.word	0x000047c5

00008718 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8718:	b580      	push	{r7, lr}
    871a:	b084      	sub	sp, #16
    871c:	af00      	add	r7, sp, #0
    871e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8720:	687b      	ldr	r3, [r7, #4]
    8722:	68db      	ldr	r3, [r3, #12]
    8724:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8726:	68f8      	ldr	r0, [r7, #12]
    8728:	4b07      	ldr	r3, [pc, #28]	; (8748 <tc_interrupt_handler+0x30>)
    872a:	4798      	blx	r3
    872c:	4603      	mov	r3, r0
    872e:	2b00      	cmp	r3, #0
    8730:	d006      	beq.n	8740 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8732:	68f8      	ldr	r0, [r7, #12]
    8734:	4b05      	ldr	r3, [pc, #20]	; (874c <tc_interrupt_handler+0x34>)
    8736:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8738:	687b      	ldr	r3, [r7, #4]
    873a:	681b      	ldr	r3, [r3, #0]
    873c:	6878      	ldr	r0, [r7, #4]
    873e:	4798      	blx	r3
	}
}
    8740:	bf00      	nop
    8742:	3710      	adds	r7, #16
    8744:	46bd      	mov	sp, r7
    8746:	bd80      	pop	{r7, pc}
    8748:	00007ed9 	.word	0x00007ed9
    874c:	00007f01 	.word	0x00007f01

00008750 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8750:	b580      	push	{r7, lr}
    8752:	b084      	sub	sp, #16
    8754:	af00      	add	r7, sp, #0
    8756:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8758:	687b      	ldr	r3, [r7, #4]
    875a:	691b      	ldr	r3, [r3, #16]
    875c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    875e:	68f8      	ldr	r0, [r7, #12]
    8760:	4b12      	ldr	r3, [pc, #72]	; (87ac <tc_pwm_interrupt_handler+0x5c>)
    8762:	4798      	blx	r3
    8764:	4603      	mov	r3, r0
    8766:	2b00      	cmp	r3, #0
    8768:	d00a      	beq.n	8780 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    876a:	68f8      	ldr	r0, [r7, #12]
    876c:	4b10      	ldr	r3, [pc, #64]	; (87b0 <tc_pwm_interrupt_handler+0x60>)
    876e:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8770:	687b      	ldr	r3, [r7, #4]
    8772:	681b      	ldr	r3, [r3, #0]
    8774:	2b00      	cmp	r3, #0
    8776:	d003      	beq.n	8780 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8778:	687b      	ldr	r3, [r7, #4]
    877a:	681b      	ldr	r3, [r3, #0]
    877c:	6878      	ldr	r0, [r7, #4]
    877e:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8780:	68f8      	ldr	r0, [r7, #12]
    8782:	4b0c      	ldr	r3, [pc, #48]	; (87b4 <tc_pwm_interrupt_handler+0x64>)
    8784:	4798      	blx	r3
    8786:	4603      	mov	r3, r0
    8788:	2b00      	cmp	r3, #0
    878a:	d00a      	beq.n	87a2 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    878c:	68f8      	ldr	r0, [r7, #12]
    878e:	4b0a      	ldr	r3, [pc, #40]	; (87b8 <tc_pwm_interrupt_handler+0x68>)
    8790:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8792:	687b      	ldr	r3, [r7, #4]
    8794:	685b      	ldr	r3, [r3, #4]
    8796:	2b00      	cmp	r3, #0
    8798:	d003      	beq.n	87a2 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    879a:	687b      	ldr	r3, [r7, #4]
    879c:	685b      	ldr	r3, [r3, #4]
    879e:	6878      	ldr	r0, [r7, #4]
    87a0:	4798      	blx	r3
		}
	}
}
    87a2:	bf00      	nop
    87a4:	3710      	adds	r7, #16
    87a6:	46bd      	mov	sp, r7
    87a8:	bd80      	pop	{r7, pc}
    87aa:	bf00      	nop
    87ac:	00007ed9 	.word	0x00007ed9
    87b0:	00007f01 	.word	0x00007f01
    87b4:	00007f4f 	.word	0x00007f4f
    87b8:	00007f1b 	.word	0x00007f1b

000087bc <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    87bc:	b580      	push	{r7, lr}
    87be:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    87c0:	4b03      	ldr	r3, [pc, #12]	; (87d0 <TC0_Handler+0x14>)
    87c2:	681b      	ldr	r3, [r3, #0]
    87c4:	4618      	mov	r0, r3
    87c6:	4b03      	ldr	r3, [pc, #12]	; (87d4 <TC0_Handler+0x18>)
    87c8:	4798      	blx	r3
}
    87ca:	bf00      	nop
    87cc:	bd80      	pop	{r7, pc}
    87ce:	bf00      	nop
    87d0:	20003058 	.word	0x20003058
    87d4:	00008719 	.word	0x00008719

000087d8 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    87d8:	b580      	push	{r7, lr}
    87da:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    87dc:	4b03      	ldr	r3, [pc, #12]	; (87ec <TC1_Handler+0x14>)
    87de:	681b      	ldr	r3, [r3, #0]
    87e0:	4618      	mov	r0, r3
    87e2:	4b03      	ldr	r3, [pc, #12]	; (87f0 <TC1_Handler+0x18>)
    87e4:	4798      	blx	r3
}
    87e6:	bf00      	nop
    87e8:	bd80      	pop	{r7, pc}
    87ea:	bf00      	nop
    87ec:	2000305c 	.word	0x2000305c
    87f0:	00008719 	.word	0x00008719

000087f4 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    87f4:	b580      	push	{r7, lr}
    87f6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    87f8:	4b03      	ldr	r3, [pc, #12]	; (8808 <TC2_Handler+0x14>)
    87fa:	681b      	ldr	r3, [r3, #0]
    87fc:	4618      	mov	r0, r3
    87fe:	4b03      	ldr	r3, [pc, #12]	; (880c <TC2_Handler+0x18>)
    8800:	4798      	blx	r3
}
    8802:	bf00      	nop
    8804:	bd80      	pop	{r7, pc}
    8806:	bf00      	nop
    8808:	20003060 	.word	0x20003060
    880c:	00008719 	.word	0x00008719

00008810 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    8810:	b580      	push	{r7, lr}
    8812:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    8814:	4b03      	ldr	r3, [pc, #12]	; (8824 <TC3_Handler+0x14>)
    8816:	681b      	ldr	r3, [r3, #0]
    8818:	4618      	mov	r0, r3
    881a:	4b03      	ldr	r3, [pc, #12]	; (8828 <TC3_Handler+0x18>)
    881c:	4798      	blx	r3
}
    881e:	bf00      	nop
    8820:	bd80      	pop	{r7, pc}
    8822:	bf00      	nop
    8824:	20003064 	.word	0x20003064
    8828:	00008719 	.word	0x00008719

0000882c <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    882c:	b580      	push	{r7, lr}
    882e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8830:	4b03      	ldr	r3, [pc, #12]	; (8840 <TC4_Handler+0x14>)
    8832:	681b      	ldr	r3, [r3, #0]
    8834:	4618      	mov	r0, r3
    8836:	4b03      	ldr	r3, [pc, #12]	; (8844 <TC4_Handler+0x18>)
    8838:	4798      	blx	r3
}
    883a:	bf00      	nop
    883c:	bd80      	pop	{r7, pc}
    883e:	bf00      	nop
    8840:	20003068 	.word	0x20003068
    8844:	00008719 	.word	0x00008719

00008848 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8848:	b580      	push	{r7, lr}
    884a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    884c:	4b03      	ldr	r3, [pc, #12]	; (885c <TC5_Handler+0x14>)
    884e:	681b      	ldr	r3, [r3, #0]
    8850:	4618      	mov	r0, r3
    8852:	4b03      	ldr	r3, [pc, #12]	; (8860 <TC5_Handler+0x18>)
    8854:	4798      	blx	r3
}
    8856:	bf00      	nop
    8858:	bd80      	pop	{r7, pc}
    885a:	bf00      	nop
    885c:	2000306c 	.word	0x2000306c
    8860:	00008719 	.word	0x00008719

00008864 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8864:	b580      	push	{r7, lr}
    8866:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8868:	4b03      	ldr	r3, [pc, #12]	; (8878 <TC7_Handler+0x14>)
    886a:	681b      	ldr	r3, [r3, #0]
    886c:	4618      	mov	r0, r3
    886e:	4b03      	ldr	r3, [pc, #12]	; (887c <TC7_Handler+0x18>)
    8870:	4798      	blx	r3
}
    8872:	bf00      	nop
    8874:	bd80      	pop	{r7, pc}
    8876:	bf00      	nop
    8878:	20003070 	.word	0x20003070
    887c:	00008751 	.word	0x00008751

00008880 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8880:	b580      	push	{r7, lr}
    8882:	b084      	sub	sp, #16
    8884:	af00      	add	r7, sp, #0
    8886:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8888:	6878      	ldr	r0, [r7, #4]
    888a:	4b13      	ldr	r3, [pc, #76]	; (88d8 <get_tc_index+0x58>)
    888c:	4798      	blx	r3
    888e:	4603      	mov	r3, r0
    8890:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8892:	2300      	movs	r3, #0
    8894:	73fb      	strb	r3, [r7, #15]
    8896:	e010      	b.n	88ba <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8898:	7bfa      	ldrb	r2, [r7, #15]
    889a:	4910      	ldr	r1, [pc, #64]	; (88dc <get_tc_index+0x5c>)
    889c:	4613      	mov	r3, r2
    889e:	009b      	lsls	r3, r3, #2
    88a0:	4413      	add	r3, r2
    88a2:	009b      	lsls	r3, r3, #2
    88a4:	440b      	add	r3, r1
    88a6:	781b      	ldrb	r3, [r3, #0]
    88a8:	7bba      	ldrb	r2, [r7, #14]
    88aa:	429a      	cmp	r2, r3
    88ac:	d102      	bne.n	88b4 <get_tc_index+0x34>
			return i;
    88ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    88b2:	e00d      	b.n	88d0 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    88b4:	7bfb      	ldrb	r3, [r7, #15]
    88b6:	3301      	adds	r3, #1
    88b8:	73fb      	strb	r3, [r7, #15]
    88ba:	7bfb      	ldrb	r3, [r7, #15]
    88bc:	2b06      	cmp	r3, #6
    88be:	d9eb      	bls.n	8898 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    88c0:	f240 221a 	movw	r2, #538	; 0x21a
    88c4:	4906      	ldr	r1, [pc, #24]	; (88e0 <get_tc_index+0x60>)
    88c6:	2000      	movs	r0, #0
    88c8:	4b06      	ldr	r3, [pc, #24]	; (88e4 <get_tc_index+0x64>)
    88ca:	4798      	blx	r3
	return -1;
    88cc:	f04f 33ff 	mov.w	r3, #4294967295
}
    88d0:	4618      	mov	r0, r3
    88d2:	3710      	adds	r7, #16
    88d4:	46bd      	mov	sp, r7
    88d6:	bd80      	pop	{r7, pc}
    88d8:	00008999 	.word	0x00008999
    88dc:	20000048 	.word	0x20000048
    88e0:	00011600 	.word	0x00011600
    88e4:	00003f79 	.word	0x00003f79

000088e8 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    88e8:	b480      	push	{r7}
    88ea:	b083      	sub	sp, #12
    88ec:	af00      	add	r7, sp, #0
    88ee:	6078      	str	r0, [r7, #4]
    88f0:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    88f2:	687b      	ldr	r3, [r7, #4]
    88f4:	4a1a      	ldr	r2, [pc, #104]	; (8960 <_tc_init_irq_param+0x78>)
    88f6:	4293      	cmp	r3, r2
    88f8:	d102      	bne.n	8900 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    88fa:	4a1a      	ldr	r2, [pc, #104]	; (8964 <_tc_init_irq_param+0x7c>)
    88fc:	683b      	ldr	r3, [r7, #0]
    88fe:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    8900:	687b      	ldr	r3, [r7, #4]
    8902:	4a19      	ldr	r2, [pc, #100]	; (8968 <_tc_init_irq_param+0x80>)
    8904:	4293      	cmp	r3, r2
    8906:	d102      	bne.n	890e <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    8908:	4a18      	ldr	r2, [pc, #96]	; (896c <_tc_init_irq_param+0x84>)
    890a:	683b      	ldr	r3, [r7, #0]
    890c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    890e:	687b      	ldr	r3, [r7, #4]
    8910:	4a17      	ldr	r2, [pc, #92]	; (8970 <_tc_init_irq_param+0x88>)
    8912:	4293      	cmp	r3, r2
    8914:	d102      	bne.n	891c <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    8916:	4a17      	ldr	r2, [pc, #92]	; (8974 <_tc_init_irq_param+0x8c>)
    8918:	683b      	ldr	r3, [r7, #0]
    891a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    891c:	687b      	ldr	r3, [r7, #4]
    891e:	4a16      	ldr	r2, [pc, #88]	; (8978 <_tc_init_irq_param+0x90>)
    8920:	4293      	cmp	r3, r2
    8922:	d102      	bne.n	892a <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    8924:	4a15      	ldr	r2, [pc, #84]	; (897c <_tc_init_irq_param+0x94>)
    8926:	683b      	ldr	r3, [r7, #0]
    8928:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    892a:	687b      	ldr	r3, [r7, #4]
    892c:	4a14      	ldr	r2, [pc, #80]	; (8980 <_tc_init_irq_param+0x98>)
    892e:	4293      	cmp	r3, r2
    8930:	d102      	bne.n	8938 <_tc_init_irq_param+0x50>
		_tc4_dev = (struct _timer_device *)dev;
    8932:	4a14      	ldr	r2, [pc, #80]	; (8984 <_tc_init_irq_param+0x9c>)
    8934:	683b      	ldr	r3, [r7, #0]
    8936:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8938:	687b      	ldr	r3, [r7, #4]
    893a:	4a13      	ldr	r2, [pc, #76]	; (8988 <_tc_init_irq_param+0xa0>)
    893c:	4293      	cmp	r3, r2
    893e:	d102      	bne.n	8946 <_tc_init_irq_param+0x5e>
		_tc5_dev = (struct _timer_device *)dev;
    8940:	4a12      	ldr	r2, [pc, #72]	; (898c <_tc_init_irq_param+0xa4>)
    8942:	683b      	ldr	r3, [r7, #0]
    8944:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8946:	687b      	ldr	r3, [r7, #4]
    8948:	4a11      	ldr	r2, [pc, #68]	; (8990 <_tc_init_irq_param+0xa8>)
    894a:	4293      	cmp	r3, r2
    894c:	d102      	bne.n	8954 <_tc_init_irq_param+0x6c>
		_tc7_dev = (struct _pwm_device *)dev;
    894e:	4a11      	ldr	r2, [pc, #68]	; (8994 <_tc_init_irq_param+0xac>)
    8950:	683b      	ldr	r3, [r7, #0]
    8952:	6013      	str	r3, [r2, #0]
	}
}
    8954:	bf00      	nop
    8956:	370c      	adds	r7, #12
    8958:	46bd      	mov	sp, r7
    895a:	f85d 7b04 	ldr.w	r7, [sp], #4
    895e:	4770      	bx	lr
    8960:	40003800 	.word	0x40003800
    8964:	20003058 	.word	0x20003058
    8968:	40003c00 	.word	0x40003c00
    896c:	2000305c 	.word	0x2000305c
    8970:	4101a000 	.word	0x4101a000
    8974:	20003060 	.word	0x20003060
    8978:	4101c000 	.word	0x4101c000
    897c:	20003064 	.word	0x20003064
    8980:	42001400 	.word	0x42001400
    8984:	20003068 	.word	0x20003068
    8988:	42001800 	.word	0x42001800
    898c:	2000306c 	.word	0x2000306c
    8990:	43001800 	.word	0x43001800
    8994:	20003070 	.word	0x20003070

00008998 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8998:	b4b0      	push	{r4, r5, r7}
    899a:	b08d      	sub	sp, #52	; 0x34
    899c:	af00      	add	r7, sp, #0
    899e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    89a0:	4b13      	ldr	r3, [pc, #76]	; (89f0 <_get_hardware_offset+0x58>)
    89a2:	f107 040c 	add.w	r4, r7, #12
    89a6:	461d      	mov	r5, r3
    89a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    89aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    89ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    89b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    89b4:	2300      	movs	r3, #0
    89b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    89b8:	e010      	b.n	89dc <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    89ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    89bc:	009b      	lsls	r3, r3, #2
    89be:	f107 0230 	add.w	r2, r7, #48	; 0x30
    89c2:	4413      	add	r3, r2
    89c4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    89c8:	461a      	mov	r2, r3
    89ca:	687b      	ldr	r3, [r7, #4]
    89cc:	429a      	cmp	r2, r3
    89ce:	d102      	bne.n	89d6 <_get_hardware_offset+0x3e>
			return i;
    89d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    89d2:	b2db      	uxtb	r3, r3
    89d4:	e006      	b.n	89e4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    89d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    89d8:	3301      	adds	r3, #1
    89da:	62fb      	str	r3, [r7, #44]	; 0x2c
    89dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    89de:	2b07      	cmp	r3, #7
    89e0:	d9eb      	bls.n	89ba <_get_hardware_offset+0x22>
		}
	}
	return 0;
    89e2:	2300      	movs	r3, #0
}
    89e4:	4618      	mov	r0, r3
    89e6:	3734      	adds	r7, #52	; 0x34
    89e8:	46bd      	mov	sp, r7
    89ea:	bcb0      	pop	{r4, r5, r7}
    89ec:	4770      	bx	lr
    89ee:	bf00      	nop
    89f0:	00011614 	.word	0x00011614

000089f4 <__NVIC_EnableIRQ>:
{
    89f4:	b480      	push	{r7}
    89f6:	b083      	sub	sp, #12
    89f8:	af00      	add	r7, sp, #0
    89fa:	4603      	mov	r3, r0
    89fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    89fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8a02:	2b00      	cmp	r3, #0
    8a04:	db0b      	blt.n	8a1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8a06:	4909      	ldr	r1, [pc, #36]	; (8a2c <__NVIC_EnableIRQ+0x38>)
    8a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8a0c:	095b      	lsrs	r3, r3, #5
    8a0e:	88fa      	ldrh	r2, [r7, #6]
    8a10:	f002 021f 	and.w	r2, r2, #31
    8a14:	2001      	movs	r0, #1
    8a16:	fa00 f202 	lsl.w	r2, r0, r2
    8a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a1e:	bf00      	nop
    8a20:	370c      	adds	r7, #12
    8a22:	46bd      	mov	sp, r7
    8a24:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a28:	4770      	bx	lr
    8a2a:	bf00      	nop
    8a2c:	e000e100 	.word	0xe000e100

00008a30 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8a30:	b480      	push	{r7}
    8a32:	b087      	sub	sp, #28
    8a34:	af00      	add	r7, sp, #0
    8a36:	60f8      	str	r0, [r7, #12]
    8a38:	460b      	mov	r3, r1
    8a3a:	607a      	str	r2, [r7, #4]
    8a3c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8a3e:	7afa      	ldrb	r2, [r7, #11]
    8a40:	68f9      	ldr	r1, [r7, #12]
    8a42:	4613      	mov	r3, r2
    8a44:	009b      	lsls	r3, r3, #2
    8a46:	4413      	add	r3, r2
    8a48:	009b      	lsls	r3, r3, #2
    8a4a:	440b      	add	r3, r1
    8a4c:	3340      	adds	r3, #64	; 0x40
    8a4e:	681b      	ldr	r3, [r3, #0]
    8a50:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8a52:	697a      	ldr	r2, [r7, #20]
    8a54:	687b      	ldr	r3, [r7, #4]
    8a56:	4013      	ands	r3, r2
    8a58:	617b      	str	r3, [r7, #20]
	return tmp;
    8a5a:	697b      	ldr	r3, [r7, #20]
}
    8a5c:	4618      	mov	r0, r3
    8a5e:	371c      	adds	r7, #28
    8a60:	46bd      	mov	sp, r7
    8a62:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a66:	4770      	bx	lr

00008a68 <hri_oscctrl_get_STATUS_reg>:
{
    8a68:	b480      	push	{r7}
    8a6a:	b085      	sub	sp, #20
    8a6c:	af00      	add	r7, sp, #0
    8a6e:	6078      	str	r0, [r7, #4]
    8a70:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8a72:	687b      	ldr	r3, [r7, #4]
    8a74:	691b      	ldr	r3, [r3, #16]
    8a76:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8a78:	68fa      	ldr	r2, [r7, #12]
    8a7a:	683b      	ldr	r3, [r7, #0]
    8a7c:	4013      	ands	r3, r2
    8a7e:	60fb      	str	r3, [r7, #12]
	return tmp;
    8a80:	68fb      	ldr	r3, [r7, #12]
}
    8a82:	4618      	mov	r0, r3
    8a84:	3714      	adds	r7, #20
    8a86:	46bd      	mov	sp, r7
    8a88:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a8c:	4770      	bx	lr

00008a8e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8a8e:	b480      	push	{r7}
    8a90:	b085      	sub	sp, #20
    8a92:	af00      	add	r7, sp, #0
    8a94:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8a96:	687b      	ldr	r3, [r7, #4]
    8a98:	f893 3020 	ldrb.w	r3, [r3, #32]
    8a9c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8a9e:	7bfb      	ldrb	r3, [r7, #15]
    8aa0:	f003 0301 	and.w	r3, r3, #1
    8aa4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8aa6:	7bfb      	ldrb	r3, [r7, #15]
    8aa8:	2b00      	cmp	r3, #0
    8aaa:	bf14      	ite	ne
    8aac:	2301      	movne	r3, #1
    8aae:	2300      	moveq	r3, #0
    8ab0:	b2db      	uxtb	r3, r3
}
    8ab2:	4618      	mov	r0, r3
    8ab4:	3714      	adds	r7, #20
    8ab6:	46bd      	mov	sp, r7
    8ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8abc:	4770      	bx	lr

00008abe <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8abe:	b480      	push	{r7}
    8ac0:	b083      	sub	sp, #12
    8ac2:	af00      	add	r7, sp, #0
    8ac4:	6078      	str	r0, [r7, #4]
    8ac6:	460b      	mov	r3, r1
    8ac8:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8aca:	bf00      	nop
    8acc:	687b      	ldr	r3, [r7, #4]
    8ace:	789b      	ldrb	r3, [r3, #2]
    8ad0:	b2da      	uxtb	r2, r3
    8ad2:	78fb      	ldrb	r3, [r7, #3]
    8ad4:	4013      	ands	r3, r2
    8ad6:	b2db      	uxtb	r3, r3
    8ad8:	2b00      	cmp	r3, #0
    8ada:	d1f7      	bne.n	8acc <hri_usb_wait_for_sync+0xe>
	};
}
    8adc:	bf00      	nop
    8ade:	370c      	adds	r7, #12
    8ae0:	46bd      	mov	sp, r7
    8ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ae6:	4770      	bx	lr

00008ae8 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8ae8:	b480      	push	{r7}
    8aea:	b083      	sub	sp, #12
    8aec:	af00      	add	r7, sp, #0
    8aee:	6078      	str	r0, [r7, #4]
    8af0:	460b      	mov	r3, r1
    8af2:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8af4:	687b      	ldr	r3, [r7, #4]
    8af6:	789b      	ldrb	r3, [r3, #2]
    8af8:	b2da      	uxtb	r2, r3
    8afa:	78fb      	ldrb	r3, [r7, #3]
    8afc:	4013      	ands	r3, r2
    8afe:	b2db      	uxtb	r3, r3
    8b00:	2b00      	cmp	r3, #0
    8b02:	bf14      	ite	ne
    8b04:	2301      	movne	r3, #1
    8b06:	2300      	moveq	r3, #0
    8b08:	b2db      	uxtb	r3, r3
}
    8b0a:	4618      	mov	r0, r3
    8b0c:	370c      	adds	r7, #12
    8b0e:	46bd      	mov	sp, r7
    8b10:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b14:	4770      	bx	lr

00008b16 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8b16:	b480      	push	{r7}
    8b18:	b085      	sub	sp, #20
    8b1a:	af00      	add	r7, sp, #0
    8b1c:	6078      	str	r0, [r7, #4]
    8b1e:	460b      	mov	r3, r1
    8b20:	70fb      	strb	r3, [r7, #3]
    8b22:	4613      	mov	r3, r2
    8b24:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8b26:	78fb      	ldrb	r3, [r7, #3]
    8b28:	687a      	ldr	r2, [r7, #4]
    8b2a:	3308      	adds	r3, #8
    8b2c:	015b      	lsls	r3, r3, #5
    8b2e:	4413      	add	r3, r2
    8b30:	3307      	adds	r3, #7
    8b32:	781b      	ldrb	r3, [r3, #0]
    8b34:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8b36:	7bfa      	ldrb	r2, [r7, #15]
    8b38:	78bb      	ldrb	r3, [r7, #2]
    8b3a:	4013      	ands	r3, r2
    8b3c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8b3e:	7bfb      	ldrb	r3, [r7, #15]
}
    8b40:	4618      	mov	r0, r3
    8b42:	3714      	adds	r7, #20
    8b44:	46bd      	mov	sp, r7
    8b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b4a:	4770      	bx	lr

00008b4c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8b4c:	b480      	push	{r7}
    8b4e:	b083      	sub	sp, #12
    8b50:	af00      	add	r7, sp, #0
    8b52:	6078      	str	r0, [r7, #4]
    8b54:	460b      	mov	r3, r1
    8b56:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8b58:	78fb      	ldrb	r3, [r7, #3]
    8b5a:	687a      	ldr	r2, [r7, #4]
    8b5c:	3308      	adds	r3, #8
    8b5e:	015b      	lsls	r3, r3, #5
    8b60:	4413      	add	r3, r2
    8b62:	3307      	adds	r3, #7
    8b64:	781b      	ldrb	r3, [r3, #0]
    8b66:	b2db      	uxtb	r3, r3
}
    8b68:	4618      	mov	r0, r3
    8b6a:	370c      	adds	r7, #12
    8b6c:	46bd      	mov	sp, r7
    8b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b72:	4770      	bx	lr

00008b74 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8b74:	b480      	push	{r7}
    8b76:	b083      	sub	sp, #12
    8b78:	af00      	add	r7, sp, #0
    8b7a:	6078      	str	r0, [r7, #4]
    8b7c:	460b      	mov	r3, r1
    8b7e:	70fb      	strb	r3, [r7, #3]
    8b80:	4613      	mov	r3, r2
    8b82:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8b84:	78fb      	ldrb	r3, [r7, #3]
    8b86:	687a      	ldr	r2, [r7, #4]
    8b88:	3308      	adds	r3, #8
    8b8a:	015b      	lsls	r3, r3, #5
    8b8c:	4413      	add	r3, r2
    8b8e:	3307      	adds	r3, #7
    8b90:	78ba      	ldrb	r2, [r7, #2]
    8b92:	701a      	strb	r2, [r3, #0]
}
    8b94:	bf00      	nop
    8b96:	370c      	adds	r7, #12
    8b98:	46bd      	mov	sp, r7
    8b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b9e:	4770      	bx	lr

00008ba0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8ba0:	b480      	push	{r7}
    8ba2:	b083      	sub	sp, #12
    8ba4:	af00      	add	r7, sp, #0
    8ba6:	6078      	str	r0, [r7, #4]
    8ba8:	460b      	mov	r3, r1
    8baa:	70fb      	strb	r3, [r7, #3]
    8bac:	4613      	mov	r3, r2
    8bae:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8bb0:	78fb      	ldrb	r3, [r7, #3]
    8bb2:	687a      	ldr	r2, [r7, #4]
    8bb4:	3308      	adds	r3, #8
    8bb6:	015b      	lsls	r3, r3, #5
    8bb8:	4413      	add	r3, r2
    8bba:	3305      	adds	r3, #5
    8bbc:	78ba      	ldrb	r2, [r7, #2]
    8bbe:	701a      	strb	r2, [r3, #0]
}
    8bc0:	bf00      	nop
    8bc2:	370c      	adds	r7, #12
    8bc4:	46bd      	mov	sp, r7
    8bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bca:	4770      	bx	lr

00008bcc <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8bcc:	b480      	push	{r7}
    8bce:	b083      	sub	sp, #12
    8bd0:	af00      	add	r7, sp, #0
    8bd2:	6078      	str	r0, [r7, #4]
    8bd4:	460b      	mov	r3, r1
    8bd6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8bd8:	78fb      	ldrb	r3, [r7, #3]
    8bda:	687a      	ldr	r2, [r7, #4]
    8bdc:	3308      	adds	r3, #8
    8bde:	015b      	lsls	r3, r3, #5
    8be0:	4413      	add	r3, r2
    8be2:	3306      	adds	r3, #6
    8be4:	781b      	ldrb	r3, [r3, #0]
    8be6:	b2db      	uxtb	r3, r3
}
    8be8:	4618      	mov	r0, r3
    8bea:	370c      	adds	r7, #12
    8bec:	46bd      	mov	sp, r7
    8bee:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bf2:	4770      	bx	lr

00008bf4 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8bf4:	b480      	push	{r7}
    8bf6:	b083      	sub	sp, #12
    8bf8:	af00      	add	r7, sp, #0
    8bfa:	6078      	str	r0, [r7, #4]
    8bfc:	460b      	mov	r3, r1
    8bfe:	70fb      	strb	r3, [r7, #3]
    8c00:	4613      	mov	r3, r2
    8c02:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8c04:	78fb      	ldrb	r3, [r7, #3]
    8c06:	687a      	ldr	r2, [r7, #4]
    8c08:	3308      	adds	r3, #8
    8c0a:	015b      	lsls	r3, r3, #5
    8c0c:	4413      	add	r3, r2
    8c0e:	3304      	adds	r3, #4
    8c10:	78ba      	ldrb	r2, [r7, #2]
    8c12:	701a      	strb	r2, [r3, #0]
}
    8c14:	bf00      	nop
    8c16:	370c      	adds	r7, #12
    8c18:	46bd      	mov	sp, r7
    8c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c1e:	4770      	bx	lr

00008c20 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8c20:	b480      	push	{r7}
    8c22:	b083      	sub	sp, #12
    8c24:	af00      	add	r7, sp, #0
    8c26:	6078      	str	r0, [r7, #4]
    8c28:	460b      	mov	r3, r1
    8c2a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8c2c:	78fb      	ldrb	r3, [r7, #3]
    8c2e:	687a      	ldr	r2, [r7, #4]
    8c30:	015b      	lsls	r3, r3, #5
    8c32:	4413      	add	r3, r2
    8c34:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8c38:	2210      	movs	r2, #16
    8c3a:	701a      	strb	r2, [r3, #0]
}
    8c3c:	bf00      	nop
    8c3e:	370c      	adds	r7, #12
    8c40:	46bd      	mov	sp, r7
    8c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c46:	4770      	bx	lr

00008c48 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8c48:	b480      	push	{r7}
    8c4a:	b083      	sub	sp, #12
    8c4c:	af00      	add	r7, sp, #0
    8c4e:	6078      	str	r0, [r7, #4]
    8c50:	460b      	mov	r3, r1
    8c52:	70fb      	strb	r3, [r7, #3]
    8c54:	4613      	mov	r3, r2
    8c56:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8c58:	78fb      	ldrb	r3, [r7, #3]
    8c5a:	687a      	ldr	r2, [r7, #4]
    8c5c:	015b      	lsls	r3, r3, #5
    8c5e:	4413      	add	r3, r2
    8c60:	f203 1309 	addw	r3, r3, #265	; 0x109
    8c64:	78ba      	ldrb	r2, [r7, #2]
    8c66:	701a      	strb	r2, [r3, #0]
}
    8c68:	bf00      	nop
    8c6a:	370c      	adds	r7, #12
    8c6c:	46bd      	mov	sp, r7
    8c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c72:	4770      	bx	lr

00008c74 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8c74:	b480      	push	{r7}
    8c76:	b083      	sub	sp, #12
    8c78:	af00      	add	r7, sp, #0
    8c7a:	6078      	str	r0, [r7, #4]
    8c7c:	460b      	mov	r3, r1
    8c7e:	70fb      	strb	r3, [r7, #3]
    8c80:	4613      	mov	r3, r2
    8c82:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8c84:	78fb      	ldrb	r3, [r7, #3]
    8c86:	687a      	ldr	r2, [r7, #4]
    8c88:	015b      	lsls	r3, r3, #5
    8c8a:	4413      	add	r3, r2
    8c8c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8c90:	78ba      	ldrb	r2, [r7, #2]
    8c92:	701a      	strb	r2, [r3, #0]
}
    8c94:	bf00      	nop
    8c96:	370c      	adds	r7, #12
    8c98:	46bd      	mov	sp, r7
    8c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c9e:	4770      	bx	lr

00008ca0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8ca0:	b480      	push	{r7}
    8ca2:	b085      	sub	sp, #20
    8ca4:	af00      	add	r7, sp, #0
    8ca6:	6078      	str	r0, [r7, #4]
    8ca8:	460b      	mov	r3, r1
    8caa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8cac:	78fb      	ldrb	r3, [r7, #3]
    8cae:	687a      	ldr	r2, [r7, #4]
    8cb0:	3308      	adds	r3, #8
    8cb2:	015b      	lsls	r3, r3, #5
    8cb4:	4413      	add	r3, r2
    8cb6:	781b      	ldrb	r3, [r3, #0]
    8cb8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8cba:	7bfb      	ldrb	r3, [r7, #15]
    8cbc:	f003 0307 	and.w	r3, r3, #7
    8cc0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8cc2:	7bfb      	ldrb	r3, [r7, #15]
}
    8cc4:	4618      	mov	r0, r3
    8cc6:	3714      	adds	r7, #20
    8cc8:	46bd      	mov	sp, r7
    8cca:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cce:	4770      	bx	lr

00008cd0 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8cd0:	b480      	push	{r7}
    8cd2:	b085      	sub	sp, #20
    8cd4:	af00      	add	r7, sp, #0
    8cd6:	6078      	str	r0, [r7, #4]
    8cd8:	460b      	mov	r3, r1
    8cda:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8cdc:	78fb      	ldrb	r3, [r7, #3]
    8cde:	687a      	ldr	r2, [r7, #4]
    8ce0:	3308      	adds	r3, #8
    8ce2:	015b      	lsls	r3, r3, #5
    8ce4:	4413      	add	r3, r2
    8ce6:	781b      	ldrb	r3, [r3, #0]
    8ce8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8cea:	7bfb      	ldrb	r3, [r7, #15]
    8cec:	091b      	lsrs	r3, r3, #4
    8cee:	b2db      	uxtb	r3, r3
    8cf0:	f003 0307 	and.w	r3, r3, #7
    8cf4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8cf6:	7bfb      	ldrb	r3, [r7, #15]
}
    8cf8:	4618      	mov	r0, r3
    8cfa:	3714      	adds	r7, #20
    8cfc:	46bd      	mov	sp, r7
    8cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d02:	4770      	bx	lr

00008d04 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8d04:	b480      	push	{r7}
    8d06:	b083      	sub	sp, #12
    8d08:	af00      	add	r7, sp, #0
    8d0a:	6078      	str	r0, [r7, #4]
    8d0c:	460b      	mov	r3, r1
    8d0e:	70fb      	strb	r3, [r7, #3]
    8d10:	4613      	mov	r3, r2
    8d12:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8d14:	78fb      	ldrb	r3, [r7, #3]
    8d16:	687a      	ldr	r2, [r7, #4]
    8d18:	3308      	adds	r3, #8
    8d1a:	015b      	lsls	r3, r3, #5
    8d1c:	4413      	add	r3, r2
    8d1e:	78ba      	ldrb	r2, [r7, #2]
    8d20:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8d22:	bf00      	nop
    8d24:	370c      	adds	r7, #12
    8d26:	46bd      	mov	sp, r7
    8d28:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d2c:	4770      	bx	lr

00008d2e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8d2e:	b480      	push	{r7}
    8d30:	b083      	sub	sp, #12
    8d32:	af00      	add	r7, sp, #0
    8d34:	6078      	str	r0, [r7, #4]
    8d36:	460b      	mov	r3, r1
    8d38:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8d3a:	78fb      	ldrb	r3, [r7, #3]
    8d3c:	687a      	ldr	r2, [r7, #4]
    8d3e:	3308      	adds	r3, #8
    8d40:	015b      	lsls	r3, r3, #5
    8d42:	4413      	add	r3, r2
    8d44:	781b      	ldrb	r3, [r3, #0]
    8d46:	b2db      	uxtb	r3, r3
}
    8d48:	4618      	mov	r0, r3
    8d4a:	370c      	adds	r7, #12
    8d4c:	46bd      	mov	sp, r7
    8d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d52:	4770      	bx	lr

00008d54 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8d54:	b480      	push	{r7}
    8d56:	b083      	sub	sp, #12
    8d58:	af00      	add	r7, sp, #0
    8d5a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8d5c:	687b      	ldr	r3, [r7, #4]
    8d5e:	8b9b      	ldrh	r3, [r3, #28]
    8d60:	b29b      	uxth	r3, r3
}
    8d62:	4618      	mov	r0, r3
    8d64:	370c      	adds	r7, #12
    8d66:	46bd      	mov	sp, r7
    8d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d6c:	4770      	bx	lr

00008d6e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8d6e:	b480      	push	{r7}
    8d70:	b083      	sub	sp, #12
    8d72:	af00      	add	r7, sp, #0
    8d74:	6078      	str	r0, [r7, #4]
    8d76:	460b      	mov	r3, r1
    8d78:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8d7a:	687b      	ldr	r3, [r7, #4]
    8d7c:	887a      	ldrh	r2, [r7, #2]
    8d7e:	839a      	strh	r2, [r3, #28]
}
    8d80:	bf00      	nop
    8d82:	370c      	adds	r7, #12
    8d84:	46bd      	mov	sp, r7
    8d86:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d8a:	4770      	bx	lr

00008d8c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8d8c:	b480      	push	{r7}
    8d8e:	b083      	sub	sp, #12
    8d90:	af00      	add	r7, sp, #0
    8d92:	6078      	str	r0, [r7, #4]
    8d94:	460b      	mov	r3, r1
    8d96:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8d98:	687b      	ldr	r3, [r7, #4]
    8d9a:	887a      	ldrh	r2, [r7, #2]
    8d9c:	831a      	strh	r2, [r3, #24]
}
    8d9e:	bf00      	nop
    8da0:	370c      	adds	r7, #12
    8da2:	46bd      	mov	sp, r7
    8da4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8da8:	4770      	bx	lr

00008daa <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    8daa:	b480      	push	{r7}
    8dac:	b083      	sub	sp, #12
    8dae:	af00      	add	r7, sp, #0
    8db0:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8db2:	687b      	ldr	r3, [r7, #4]
    8db4:	8b1b      	ldrh	r3, [r3, #24]
    8db6:	b29b      	uxth	r3, r3
}
    8db8:	4618      	mov	r0, r3
    8dba:	370c      	adds	r7, #12
    8dbc:	46bd      	mov	sp, r7
    8dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dc2:	4770      	bx	lr

00008dc4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8dc4:	b480      	push	{r7}
    8dc6:	b083      	sub	sp, #12
    8dc8:	af00      	add	r7, sp, #0
    8dca:	6078      	str	r0, [r7, #4]
    8dcc:	460b      	mov	r3, r1
    8dce:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8dd0:	687b      	ldr	r3, [r7, #4]
    8dd2:	887a      	ldrh	r2, [r7, #2]
    8dd4:	829a      	strh	r2, [r3, #20]
}
    8dd6:	bf00      	nop
    8dd8:	370c      	adds	r7, #12
    8dda:	46bd      	mov	sp, r7
    8ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8de0:	4770      	bx	lr

00008de2 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8de2:	b480      	push	{r7}
    8de4:	b085      	sub	sp, #20
    8de6:	af00      	add	r7, sp, #0
    8de8:	6078      	str	r0, [r7, #4]
    8dea:	460b      	mov	r3, r1
    8dec:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8dee:	687b      	ldr	r3, [r7, #4]
    8df0:	789b      	ldrb	r3, [r3, #2]
    8df2:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8df4:	7bfa      	ldrb	r2, [r7, #15]
    8df6:	78fb      	ldrb	r3, [r7, #3]
    8df8:	4013      	ands	r3, r2
    8dfa:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8dfc:	7bfb      	ldrb	r3, [r7, #15]
}
    8dfe:	4618      	mov	r0, r3
    8e00:	3714      	adds	r7, #20
    8e02:	46bd      	mov	sp, r7
    8e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e08:	4770      	bx	lr
	...

00008e0c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8e0c:	b580      	push	{r7, lr}
    8e0e:	b082      	sub	sp, #8
    8e10:	af00      	add	r7, sp, #0
    8e12:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8e14:	687b      	ldr	r3, [r7, #4]
    8e16:	781b      	ldrb	r3, [r3, #0]
    8e18:	b2db      	uxtb	r3, r3
    8e1a:	f023 0302 	bic.w	r3, r3, #2
    8e1e:	b2da      	uxtb	r2, r3
    8e20:	687b      	ldr	r3, [r7, #4]
    8e22:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    8e24:	2103      	movs	r1, #3
    8e26:	6878      	ldr	r0, [r7, #4]
    8e28:	4b02      	ldr	r3, [pc, #8]	; (8e34 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8e2a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8e2c:	bf00      	nop
    8e2e:	3708      	adds	r7, #8
    8e30:	46bd      	mov	sp, r7
    8e32:	bd80      	pop	{r7, pc}
    8e34:	00008abf 	.word	0x00008abf

00008e38 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8e38:	b580      	push	{r7, lr}
    8e3a:	b084      	sub	sp, #16
    8e3c:	af00      	add	r7, sp, #0
    8e3e:	6078      	str	r0, [r7, #4]
    8e40:	460b      	mov	r3, r1
    8e42:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8e44:	2103      	movs	r1, #3
    8e46:	6878      	ldr	r0, [r7, #4]
    8e48:	4b06      	ldr	r3, [pc, #24]	; (8e64 <hri_usb_get_CTRLA_reg+0x2c>)
    8e4a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8e4c:	687b      	ldr	r3, [r7, #4]
    8e4e:	781b      	ldrb	r3, [r3, #0]
    8e50:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8e52:	7bfa      	ldrb	r2, [r7, #15]
    8e54:	78fb      	ldrb	r3, [r7, #3]
    8e56:	4013      	ands	r3, r2
    8e58:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8e5a:	7bfb      	ldrb	r3, [r7, #15]
}
    8e5c:	4618      	mov	r0, r3
    8e5e:	3710      	adds	r7, #16
    8e60:	46bd      	mov	sp, r7
    8e62:	bd80      	pop	{r7, pc}
    8e64:	00008abf 	.word	0x00008abf

00008e68 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8e68:	b580      	push	{r7, lr}
    8e6a:	b082      	sub	sp, #8
    8e6c:	af00      	add	r7, sp, #0
    8e6e:	6078      	str	r0, [r7, #4]
    8e70:	460b      	mov	r3, r1
    8e72:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8e74:	687b      	ldr	r3, [r7, #4]
    8e76:	78fa      	ldrb	r2, [r7, #3]
    8e78:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8e7a:	2103      	movs	r1, #3
    8e7c:	6878      	ldr	r0, [r7, #4]
    8e7e:	4b03      	ldr	r3, [pc, #12]	; (8e8c <hri_usb_write_CTRLA_reg+0x24>)
    8e80:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8e82:	bf00      	nop
    8e84:	3708      	adds	r7, #8
    8e86:	46bd      	mov	sp, r7
    8e88:	bd80      	pop	{r7, pc}
    8e8a:	bf00      	nop
    8e8c:	00008abf 	.word	0x00008abf

00008e90 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8e90:	b580      	push	{r7, lr}
    8e92:	b082      	sub	sp, #8
    8e94:	af00      	add	r7, sp, #0
    8e96:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8e98:	2103      	movs	r1, #3
    8e9a:	6878      	ldr	r0, [r7, #4]
    8e9c:	4b04      	ldr	r3, [pc, #16]	; (8eb0 <hri_usb_read_CTRLA_reg+0x20>)
    8e9e:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8ea0:	687b      	ldr	r3, [r7, #4]
    8ea2:	781b      	ldrb	r3, [r3, #0]
    8ea4:	b2db      	uxtb	r3, r3
}
    8ea6:	4618      	mov	r0, r3
    8ea8:	3708      	adds	r7, #8
    8eaa:	46bd      	mov	sp, r7
    8eac:	bd80      	pop	{r7, pc}
    8eae:	bf00      	nop
    8eb0:	00008abf 	.word	0x00008abf

00008eb4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8eb4:	b480      	push	{r7}
    8eb6:	b083      	sub	sp, #12
    8eb8:	af00      	add	r7, sp, #0
    8eba:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8ebc:	687b      	ldr	r3, [r7, #4]
    8ebe:	891b      	ldrh	r3, [r3, #8]
    8ec0:	b29b      	uxth	r3, r3
    8ec2:	f023 0301 	bic.w	r3, r3, #1
    8ec6:	b29a      	uxth	r2, r3
    8ec8:	687b      	ldr	r3, [r7, #4]
    8eca:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8ecc:	bf00      	nop
    8ece:	370c      	adds	r7, #12
    8ed0:	46bd      	mov	sp, r7
    8ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ed6:	4770      	bx	lr

00008ed8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8ed8:	b480      	push	{r7}
    8eda:	b083      	sub	sp, #12
    8edc:	af00      	add	r7, sp, #0
    8ede:	6078      	str	r0, [r7, #4]
    8ee0:	460b      	mov	r3, r1
    8ee2:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8ee4:	687b      	ldr	r3, [r7, #4]
    8ee6:	887a      	ldrh	r2, [r7, #2]
    8ee8:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8eea:	bf00      	nop
    8eec:	370c      	adds	r7, #12
    8eee:	46bd      	mov	sp, r7
    8ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ef4:	4770      	bx	lr

00008ef6 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8ef6:	b480      	push	{r7}
    8ef8:	b083      	sub	sp, #12
    8efa:	af00      	add	r7, sp, #0
    8efc:	6078      	str	r0, [r7, #4]
    8efe:	460b      	mov	r3, r1
    8f00:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    8f02:	687b      	ldr	r3, [r7, #4]
    8f04:	78fa      	ldrb	r2, [r7, #3]
    8f06:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8f08:	bf00      	nop
    8f0a:	370c      	adds	r7, #12
    8f0c:	46bd      	mov	sp, r7
    8f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f12:	4770      	bx	lr

00008f14 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8f14:	b480      	push	{r7}
    8f16:	b083      	sub	sp, #12
    8f18:	af00      	add	r7, sp, #0
    8f1a:	6078      	str	r0, [r7, #4]
    8f1c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8f1e:	687b      	ldr	r3, [r7, #4]
    8f20:	683a      	ldr	r2, [r7, #0]
    8f22:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    8f24:	bf00      	nop
    8f26:	370c      	adds	r7, #12
    8f28:	46bd      	mov	sp, r7
    8f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f2e:	4770      	bx	lr

00008f30 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8f30:	b480      	push	{r7}
    8f32:	b083      	sub	sp, #12
    8f34:	af00      	add	r7, sp, #0
    8f36:	6078      	str	r0, [r7, #4]
    8f38:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8f3a:	2300      	movs	r3, #0
}
    8f3c:	4618      	mov	r0, r3
    8f3e:	370c      	adds	r7, #12
    8f40:	46bd      	mov	sp, r7
    8f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f46:	4770      	bx	lr

00008f48 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8f48:	b480      	push	{r7}
    8f4a:	b085      	sub	sp, #20
    8f4c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8f4e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8f52:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8f54:	4b28      	ldr	r3, [pc, #160]	; (8ff8 <_usb_load_calib+0xb0>)
    8f56:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8f58:	f003 031f 	and.w	r3, r3, #31
    8f5c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8f5e:	4b26      	ldr	r3, [pc, #152]	; (8ff8 <_usb_load_calib+0xb0>)
    8f60:	681b      	ldr	r3, [r3, #0]
    8f62:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8f64:	f003 031f 	and.w	r3, r3, #31
    8f68:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8f6a:	4b23      	ldr	r3, [pc, #140]	; (8ff8 <_usb_load_calib+0xb0>)
    8f6c:	681b      	ldr	r3, [r3, #0]
    8f6e:	0a9b      	lsrs	r3, r3, #10
    8f70:	f003 0307 	and.w	r3, r3, #7
    8f74:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8f76:	68fb      	ldr	r3, [r7, #12]
    8f78:	2b00      	cmp	r3, #0
    8f7a:	d002      	beq.n	8f82 <_usb_load_calib+0x3a>
    8f7c:	68fb      	ldr	r3, [r7, #12]
    8f7e:	2b1f      	cmp	r3, #31
    8f80:	d101      	bne.n	8f86 <_usb_load_calib+0x3e>
		pad_transn = 9;
    8f82:	2309      	movs	r3, #9
    8f84:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8f86:	68bb      	ldr	r3, [r7, #8]
    8f88:	2b00      	cmp	r3, #0
    8f8a:	d002      	beq.n	8f92 <_usb_load_calib+0x4a>
    8f8c:	68bb      	ldr	r3, [r7, #8]
    8f8e:	2b1f      	cmp	r3, #31
    8f90:	d101      	bne.n	8f96 <_usb_load_calib+0x4e>
		pad_transp = 25;
    8f92:	2319      	movs	r3, #25
    8f94:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8f96:	687b      	ldr	r3, [r7, #4]
    8f98:	2b00      	cmp	r3, #0
    8f9a:	d002      	beq.n	8fa2 <_usb_load_calib+0x5a>
    8f9c:	687b      	ldr	r3, [r7, #4]
    8f9e:	2b07      	cmp	r3, #7
    8fa0:	d101      	bne.n	8fa6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    8fa2:	2306      	movs	r3, #6
    8fa4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8fa6:	68fb      	ldr	r3, [r7, #12]
    8fa8:	b29b      	uxth	r3, r3
    8faa:	019b      	lsls	r3, r3, #6
    8fac:	b29b      	uxth	r3, r3
    8fae:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8fb2:	b29a      	uxth	r2, r3
    8fb4:	68bb      	ldr	r3, [r7, #8]
    8fb6:	b29b      	uxth	r3, r3
    8fb8:	f003 031f 	and.w	r3, r3, #31
    8fbc:	b29b      	uxth	r3, r3
    8fbe:	4313      	orrs	r3, r2
    8fc0:	b29a      	uxth	r2, r3
    8fc2:	687b      	ldr	r3, [r7, #4]
    8fc4:	b29b      	uxth	r3, r3
    8fc6:	031b      	lsls	r3, r3, #12
    8fc8:	b29b      	uxth	r3, r3
    8fca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    8fce:	b29b      	uxth	r3, r3
    8fd0:	4313      	orrs	r3, r2
    8fd2:	b29a      	uxth	r2, r3
    8fd4:	683b      	ldr	r3, [r7, #0]
    8fd6:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8fd8:	683a      	ldr	r2, [r7, #0]
    8fda:	78d3      	ldrb	r3, [r2, #3]
    8fdc:	f043 0303 	orr.w	r3, r3, #3
    8fe0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    8fe2:	683a      	ldr	r2, [r7, #0]
    8fe4:	78d3      	ldrb	r3, [r2, #3]
    8fe6:	f043 030c 	orr.w	r3, r3, #12
    8fea:	70d3      	strb	r3, [r2, #3]
}
    8fec:	bf00      	nop
    8fee:	3714      	adds	r7, #20
    8ff0:	46bd      	mov	sp, r7
    8ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ff6:	4770      	bx	lr
    8ff8:	00800084 	.word	0x00800084

00008ffc <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8ffc:	b580      	push	{r7, lr}
    8ffe:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    9000:	bf00      	nop
    9002:	2203      	movs	r2, #3
    9004:	2100      	movs	r1, #0
    9006:	4804      	ldr	r0, [pc, #16]	; (9018 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    9008:	4b04      	ldr	r3, [pc, #16]	; (901c <_usb_d_dev_wait_dpll_rdy+0x20>)
    900a:	4798      	blx	r3
    900c:	4603      	mov	r3, r0
    900e:	2b03      	cmp	r3, #3
    9010:	d1f7      	bne.n	9002 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    9012:	bf00      	nop
    9014:	bd80      	pop	{r7, pc}
    9016:	bf00      	nop
    9018:	40001000 	.word	0x40001000
    901c:	00008a31 	.word	0x00008a31

00009020 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    9020:	b580      	push	{r7, lr}
    9022:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    9024:	480e      	ldr	r0, [pc, #56]	; (9060 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9026:	4b0f      	ldr	r3, [pc, #60]	; (9064 <_usb_d_dev_wait_dfll_rdy+0x44>)
    9028:	4798      	blx	r3
    902a:	4603      	mov	r3, r0
    902c:	2b00      	cmp	r3, #0
    902e:	d00a      	beq.n	9046 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    9030:	bf00      	nop
    9032:	f44f 6110 	mov.w	r1, #2304	; 0x900
    9036:	480a      	ldr	r0, [pc, #40]	; (9060 <_usb_d_dev_wait_dfll_rdy+0x40>)
    9038:	4b0b      	ldr	r3, [pc, #44]	; (9068 <_usb_d_dev_wait_dfll_rdy+0x48>)
    903a:	4798      	blx	r3
    903c:	4603      	mov	r3, r0
    903e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    9042:	d1f6      	bne.n	9032 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    9044:	e009      	b.n	905a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    9046:	bf00      	nop
    9048:	f44f 7180 	mov.w	r1, #256	; 0x100
    904c:	4804      	ldr	r0, [pc, #16]	; (9060 <_usb_d_dev_wait_dfll_rdy+0x40>)
    904e:	4b06      	ldr	r3, [pc, #24]	; (9068 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9050:	4798      	blx	r3
    9052:	4603      	mov	r3, r0
    9054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9058:	d1f6      	bne.n	9048 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    905a:	bf00      	nop
    905c:	bd80      	pop	{r7, pc}
    905e:	bf00      	nop
    9060:	40001000 	.word	0x40001000
    9064:	00008a8f 	.word	0x00008a8f
    9068:	00008a69 	.word	0x00008a69

0000906c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    906c:	b580      	push	{r7, lr}
    906e:	b082      	sub	sp, #8
    9070:	af00      	add	r7, sp, #0
    9072:	4603      	mov	r3, r0
    9074:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    9076:	79fb      	ldrb	r3, [r7, #7]
    9078:	2b00      	cmp	r3, #0
    907a:	d102      	bne.n	9082 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    907c:	4b05      	ldr	r3, [pc, #20]	; (9094 <_usb_d_dev_wait_clk_rdy+0x28>)
    907e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    9080:	e004      	b.n	908c <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    9082:	79fb      	ldrb	r3, [r7, #7]
    9084:	2b01      	cmp	r3, #1
    9086:	d101      	bne.n	908c <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9088:	4b03      	ldr	r3, [pc, #12]	; (9098 <_usb_d_dev_wait_clk_rdy+0x2c>)
    908a:	4798      	blx	r3
}
    908c:	bf00      	nop
    908e:	3708      	adds	r7, #8
    9090:	46bd      	mov	sp, r7
    9092:	bd80      	pop	{r7, pc}
    9094:	00009021 	.word	0x00009021
    9098:	00008ffd 	.word	0x00008ffd

0000909c <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    909c:	b580      	push	{r7, lr}
    909e:	b082      	sub	sp, #8
    90a0:	af00      	add	r7, sp, #0
    90a2:	4603      	mov	r3, r0
    90a4:	6039      	str	r1, [r7, #0]
    90a6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    90a8:	683b      	ldr	r3, [r7, #0]
    90aa:	b2da      	uxtb	r2, r3
    90ac:	79fb      	ldrb	r3, [r7, #7]
    90ae:	4619      	mov	r1, r3
    90b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90b4:	4b02      	ldr	r3, [pc, #8]	; (90c0 <_usbd_ep_int_ack+0x24>)
    90b6:	4798      	blx	r3
}
    90b8:	bf00      	nop
    90ba:	3708      	adds	r7, #8
    90bc:	46bd      	mov	sp, r7
    90be:	bd80      	pop	{r7, pc}
    90c0:	00008b75 	.word	0x00008b75

000090c4 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    90c4:	b580      	push	{r7, lr}
    90c6:	b082      	sub	sp, #8
    90c8:	af00      	add	r7, sp, #0
    90ca:	4603      	mov	r3, r0
    90cc:	6039      	str	r1, [r7, #0]
    90ce:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    90d0:	683b      	ldr	r3, [r7, #0]
    90d2:	b2da      	uxtb	r2, r3
    90d4:	79fb      	ldrb	r3, [r7, #7]
    90d6:	4619      	mov	r1, r3
    90d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    90dc:	4b02      	ldr	r3, [pc, #8]	; (90e8 <_usbd_ep_int_en+0x24>)
    90de:	4798      	blx	r3
}
    90e0:	bf00      	nop
    90e2:	3708      	adds	r7, #8
    90e4:	46bd      	mov	sp, r7
    90e6:	bd80      	pop	{r7, pc}
    90e8:	00008c49 	.word	0x00008c49

000090ec <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    90ec:	b580      	push	{r7, lr}
    90ee:	b082      	sub	sp, #8
    90f0:	af00      	add	r7, sp, #0
    90f2:	4603      	mov	r3, r0
    90f4:	6039      	str	r1, [r7, #0]
    90f6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    90f8:	683b      	ldr	r3, [r7, #0]
    90fa:	b2da      	uxtb	r2, r3
    90fc:	79fb      	ldrb	r3, [r7, #7]
    90fe:	4619      	mov	r1, r3
    9100:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9104:	4b02      	ldr	r3, [pc, #8]	; (9110 <_usbd_ep_int_dis+0x24>)
    9106:	4798      	blx	r3
}
    9108:	bf00      	nop
    910a:	3708      	adds	r7, #8
    910c:	46bd      	mov	sp, r7
    910e:	bd80      	pop	{r7, pc}
    9110:	00008c75 	.word	0x00008c75

00009114 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    9114:	b580      	push	{r7, lr}
    9116:	b082      	sub	sp, #8
    9118:	af00      	add	r7, sp, #0
    911a:	4603      	mov	r3, r0
    911c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    911e:	79fb      	ldrb	r3, [r7, #7]
    9120:	4619      	mov	r1, r3
    9122:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9126:	4b06      	ldr	r3, [pc, #24]	; (9140 <_usbd_ep_is_ctrl+0x2c>)
    9128:	4798      	blx	r3
    912a:	4603      	mov	r3, r0
    912c:	2b11      	cmp	r3, #17
    912e:	bf0c      	ite	eq
    9130:	2301      	moveq	r3, #1
    9132:	2300      	movne	r3, #0
    9134:	b2db      	uxtb	r3, r3
}
    9136:	4618      	mov	r0, r3
    9138:	3708      	adds	r7, #8
    913a:	46bd      	mov	sp, r7
    913c:	bd80      	pop	{r7, pc}
    913e:	bf00      	nop
    9140:	00008d2f 	.word	0x00008d2f

00009144 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    9144:	b580      	push	{r7, lr}
    9146:	b082      	sub	sp, #8
    9148:	af00      	add	r7, sp, #0
    914a:	4603      	mov	r3, r0
    914c:	71fb      	strb	r3, [r7, #7]
    914e:	460b      	mov	r3, r1
    9150:	71bb      	strb	r3, [r7, #6]
    9152:	4613      	mov	r3, r2
    9154:	717b      	strb	r3, [r7, #5]
	if (st) {
    9156:	797b      	ldrb	r3, [r7, #5]
    9158:	2b00      	cmp	r3, #0
    915a:	d00b      	beq.n	9174 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    915c:	79bb      	ldrb	r3, [r7, #6]
    915e:	2210      	movs	r2, #16
    9160:	fa02 f303 	lsl.w	r3, r2, r3
    9164:	b2da      	uxtb	r2, r3
    9166:	79fb      	ldrb	r3, [r7, #7]
    9168:	4619      	mov	r1, r3
    916a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    916e:	4b09      	ldr	r3, [pc, #36]	; (9194 <_usbd_ep_set_stall+0x50>)
    9170:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    9172:	e00a      	b.n	918a <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9174:	79bb      	ldrb	r3, [r7, #6]
    9176:	2210      	movs	r2, #16
    9178:	fa02 f303 	lsl.w	r3, r2, r3
    917c:	b2da      	uxtb	r2, r3
    917e:	79fb      	ldrb	r3, [r7, #7]
    9180:	4619      	mov	r1, r3
    9182:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9186:	4b04      	ldr	r3, [pc, #16]	; (9198 <_usbd_ep_set_stall+0x54>)
    9188:	4798      	blx	r3
}
    918a:	bf00      	nop
    918c:	3708      	adds	r7, #8
    918e:	46bd      	mov	sp, r7
    9190:	bd80      	pop	{r7, pc}
    9192:	bf00      	nop
    9194:	00008ba1 	.word	0x00008ba1
    9198:	00008bf5 	.word	0x00008bf5

0000919c <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    919c:	b580      	push	{r7, lr}
    919e:	b084      	sub	sp, #16
    91a0:	af00      	add	r7, sp, #0
    91a2:	4603      	mov	r3, r0
    91a4:	460a      	mov	r2, r1
    91a6:	71fb      	strb	r3, [r7, #7]
    91a8:	4613      	mov	r3, r2
    91aa:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    91ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    91b0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    91b2:	79fb      	ldrb	r3, [r7, #7]
    91b4:	4619      	mov	r1, r3
    91b6:	68f8      	ldr	r0, [r7, #12]
    91b8:	4b08      	ldr	r3, [pc, #32]	; (91dc <_usbd_ep_is_stalled+0x40>)
    91ba:	4798      	blx	r3
    91bc:	4603      	mov	r3, r0
    91be:	4619      	mov	r1, r3
    91c0:	79bb      	ldrb	r3, [r7, #6]
    91c2:	2210      	movs	r2, #16
    91c4:	fa02 f303 	lsl.w	r3, r2, r3
    91c8:	400b      	ands	r3, r1
    91ca:	2b00      	cmp	r3, #0
    91cc:	bf14      	ite	ne
    91ce:	2301      	movne	r3, #1
    91d0:	2300      	moveq	r3, #0
    91d2:	b2db      	uxtb	r3, r3
}
    91d4:	4618      	mov	r0, r3
    91d6:	3710      	adds	r7, #16
    91d8:	46bd      	mov	sp, r7
    91da:	bd80      	pop	{r7, pc}
    91dc:	00008bcd 	.word	0x00008bcd

000091e0 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    91e0:	b580      	push	{r7, lr}
    91e2:	b084      	sub	sp, #16
    91e4:	af00      	add	r7, sp, #0
    91e6:	4603      	mov	r3, r0
    91e8:	460a      	mov	r2, r1
    91ea:	71fb      	strb	r3, [r7, #7]
    91ec:	4613      	mov	r3, r2
    91ee:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    91f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    91f4:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    91f6:	79fb      	ldrb	r3, [r7, #7]
    91f8:	4619      	mov	r1, r3
    91fa:	68f8      	ldr	r0, [r7, #12]
    91fc:	4b08      	ldr	r3, [pc, #32]	; (9220 <_usbd_ep_is_stall_sent+0x40>)
    91fe:	4798      	blx	r3
    9200:	4603      	mov	r3, r0
    9202:	4619      	mov	r1, r3
    9204:	79bb      	ldrb	r3, [r7, #6]
    9206:	2220      	movs	r2, #32
    9208:	fa02 f303 	lsl.w	r3, r2, r3
    920c:	400b      	ands	r3, r1
    920e:	2b00      	cmp	r3, #0
    9210:	bf14      	ite	ne
    9212:	2301      	movne	r3, #1
    9214:	2300      	moveq	r3, #0
    9216:	b2db      	uxtb	r3, r3
}
    9218:	4618      	mov	r0, r3
    921a:	3710      	adds	r7, #16
    921c:	46bd      	mov	sp, r7
    921e:	bd80      	pop	{r7, pc}
    9220:	00008b4d 	.word	0x00008b4d

00009224 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    9224:	b580      	push	{r7, lr}
    9226:	b082      	sub	sp, #8
    9228:	af00      	add	r7, sp, #0
    922a:	4603      	mov	r3, r0
    922c:	460a      	mov	r2, r1
    922e:	71fb      	strb	r3, [r7, #7]
    9230:	4613      	mov	r3, r2
    9232:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9234:	79bb      	ldrb	r3, [r7, #6]
    9236:	2220      	movs	r2, #32
    9238:	409a      	lsls	r2, r3
    923a:	79fb      	ldrb	r3, [r7, #7]
    923c:	4611      	mov	r1, r2
    923e:	4618      	mov	r0, r3
    9240:	4b02      	ldr	r3, [pc, #8]	; (924c <_usbd_ep_ack_stall+0x28>)
    9242:	4798      	blx	r3
}
    9244:	bf00      	nop
    9246:	3708      	adds	r7, #8
    9248:	46bd      	mov	sp, r7
    924a:	bd80      	pop	{r7, pc}
    924c:	0000909d 	.word	0x0000909d

00009250 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    9250:	b580      	push	{r7, lr}
    9252:	b082      	sub	sp, #8
    9254:	af00      	add	r7, sp, #0
    9256:	4603      	mov	r3, r0
    9258:	71fb      	strb	r3, [r7, #7]
    925a:	460b      	mov	r3, r1
    925c:	71bb      	strb	r3, [r7, #6]
    925e:	4613      	mov	r3, r2
    9260:	717b      	strb	r3, [r7, #5]
	if (en) {
    9262:	797b      	ldrb	r3, [r7, #5]
    9264:	2b00      	cmp	r3, #0
    9266:	d008      	beq.n	927a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9268:	79bb      	ldrb	r3, [r7, #6]
    926a:	2220      	movs	r2, #32
    926c:	409a      	lsls	r2, r3
    926e:	79fb      	ldrb	r3, [r7, #7]
    9270:	4611      	mov	r1, r2
    9272:	4618      	mov	r0, r3
    9274:	4b07      	ldr	r3, [pc, #28]	; (9294 <_usbd_ep_int_stall_en+0x44>)
    9276:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9278:	e007      	b.n	928a <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    927a:	79bb      	ldrb	r3, [r7, #6]
    927c:	2220      	movs	r2, #32
    927e:	409a      	lsls	r2, r3
    9280:	79fb      	ldrb	r3, [r7, #7]
    9282:	4611      	mov	r1, r2
    9284:	4618      	mov	r0, r3
    9286:	4b04      	ldr	r3, [pc, #16]	; (9298 <_usbd_ep_int_stall_en+0x48>)
    9288:	4798      	blx	r3
}
    928a:	bf00      	nop
    928c:	3708      	adds	r7, #8
    928e:	46bd      	mov	sp, r7
    9290:	bd80      	pop	{r7, pc}
    9292:	bf00      	nop
    9294:	000090c5 	.word	0x000090c5
    9298:	000090ed 	.word	0x000090ed

0000929c <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    929c:	b580      	push	{r7, lr}
    929e:	b082      	sub	sp, #8
    92a0:	af00      	add	r7, sp, #0
    92a2:	4603      	mov	r3, r0
    92a4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    92a6:	79fb      	ldrb	r3, [r7, #7]
    92a8:	4619      	mov	r1, r3
    92aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92ae:	4b03      	ldr	r3, [pc, #12]	; (92bc <_usbd_ep_stop_setup+0x20>)
    92b0:	4798      	blx	r3
}
    92b2:	bf00      	nop
    92b4:	3708      	adds	r7, #8
    92b6:	46bd      	mov	sp, r7
    92b8:	bd80      	pop	{r7, pc}
    92ba:	bf00      	nop
    92bc:	00008c21 	.word	0x00008c21

000092c0 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    92c0:	b580      	push	{r7, lr}
    92c2:	b082      	sub	sp, #8
    92c4:	af00      	add	r7, sp, #0
    92c6:	4603      	mov	r3, r0
    92c8:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    92ca:	79fb      	ldrb	r3, [r7, #7]
    92cc:	2210      	movs	r2, #16
    92ce:	4619      	mov	r1, r3
    92d0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92d4:	4b05      	ldr	r3, [pc, #20]	; (92ec <_usbd_ep_is_setup+0x2c>)
    92d6:	4798      	blx	r3
    92d8:	4603      	mov	r3, r0
    92da:	2b00      	cmp	r3, #0
    92dc:	bf14      	ite	ne
    92de:	2301      	movne	r3, #1
    92e0:	2300      	moveq	r3, #0
    92e2:	b2db      	uxtb	r3, r3
}
    92e4:	4618      	mov	r0, r3
    92e6:	3708      	adds	r7, #8
    92e8:	46bd      	mov	sp, r7
    92ea:	bd80      	pop	{r7, pc}
    92ec:	00008b17 	.word	0x00008b17

000092f0 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    92f0:	b580      	push	{r7, lr}
    92f2:	b082      	sub	sp, #8
    92f4:	af00      	add	r7, sp, #0
    92f6:	4603      	mov	r3, r0
    92f8:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    92fa:	79fb      	ldrb	r3, [r7, #7]
    92fc:	2110      	movs	r1, #16
    92fe:	4618      	mov	r0, r3
    9300:	4b02      	ldr	r3, [pc, #8]	; (930c <_usbd_ep_ack_setup+0x1c>)
    9302:	4798      	blx	r3
}
    9304:	bf00      	nop
    9306:	3708      	adds	r7, #8
    9308:	46bd      	mov	sp, r7
    930a:	bd80      	pop	{r7, pc}
    930c:	0000909d 	.word	0x0000909d

00009310 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9310:	b580      	push	{r7, lr}
    9312:	b082      	sub	sp, #8
    9314:	af00      	add	r7, sp, #0
    9316:	4603      	mov	r3, r0
    9318:	71fb      	strb	r3, [r7, #7]
    931a:	460b      	mov	r3, r1
    931c:	71bb      	strb	r3, [r7, #6]
    931e:	4613      	mov	r3, r2
    9320:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    9322:	797b      	ldrb	r3, [r7, #5]
    9324:	2b00      	cmp	r3, #0
    9326:	d00b      	beq.n	9340 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9328:	79bb      	ldrb	r3, [r7, #6]
    932a:	2201      	movs	r2, #1
    932c:	fa02 f303 	lsl.w	r3, r2, r3
    9330:	b2da      	uxtb	r2, r3
    9332:	79fb      	ldrb	r3, [r7, #7]
    9334:	4619      	mov	r1, r3
    9336:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    933a:	4b09      	ldr	r3, [pc, #36]	; (9360 <_usbd_ep_set_toggle+0x50>)
    933c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    933e:	e00a      	b.n	9356 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9340:	79bb      	ldrb	r3, [r7, #6]
    9342:	2201      	movs	r2, #1
    9344:	fa02 f303 	lsl.w	r3, r2, r3
    9348:	b2da      	uxtb	r2, r3
    934a:	79fb      	ldrb	r3, [r7, #7]
    934c:	4619      	mov	r1, r3
    934e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9352:	4b04      	ldr	r3, [pc, #16]	; (9364 <_usbd_ep_set_toggle+0x54>)
    9354:	4798      	blx	r3
}
    9356:	bf00      	nop
    9358:	3708      	adds	r7, #8
    935a:	46bd      	mov	sp, r7
    935c:	bd80      	pop	{r7, pc}
    935e:	bf00      	nop
    9360:	00008ba1 	.word	0x00008ba1
    9364:	00008bf5 	.word	0x00008bf5

00009368 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9368:	b580      	push	{r7, lr}
    936a:	b082      	sub	sp, #8
    936c:	af00      	add	r7, sp, #0
    936e:	4603      	mov	r3, r0
    9370:	460a      	mov	r2, r1
    9372:	71fb      	strb	r3, [r7, #7]
    9374:	4613      	mov	r3, r2
    9376:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9378:	79bb      	ldrb	r3, [r7, #6]
    937a:	2201      	movs	r2, #1
    937c:	409a      	lsls	r2, r3
    937e:	79fb      	ldrb	r3, [r7, #7]
    9380:	4611      	mov	r1, r2
    9382:	4618      	mov	r0, r3
    9384:	4b02      	ldr	r3, [pc, #8]	; (9390 <_usbd_ep_ack_io_cpt+0x28>)
    9386:	4798      	blx	r3
}
    9388:	bf00      	nop
    938a:	3708      	adds	r7, #8
    938c:	46bd      	mov	sp, r7
    938e:	bd80      	pop	{r7, pc}
    9390:	0000909d 	.word	0x0000909d

00009394 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9394:	b480      	push	{r7}
    9396:	b085      	sub	sp, #20
    9398:	af00      	add	r7, sp, #0
    939a:	4603      	mov	r3, r0
    939c:	603a      	str	r2, [r7, #0]
    939e:	71fb      	strb	r3, [r7, #7]
    93a0:	460b      	mov	r3, r1
    93a2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    93a4:	79fa      	ldrb	r2, [r7, #7]
    93a6:	79bb      	ldrb	r3, [r7, #6]
    93a8:	0052      	lsls	r2, r2, #1
    93aa:	4413      	add	r3, r2
    93ac:	011b      	lsls	r3, r3, #4
    93ae:	4a06      	ldr	r2, [pc, #24]	; (93c8 <_usbd_ep_set_buf+0x34>)
    93b0:	4413      	add	r3, r2
    93b2:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    93b4:	68fb      	ldr	r3, [r7, #12]
    93b6:	683a      	ldr	r2, [r7, #0]
    93b8:	601a      	str	r2, [r3, #0]
}
    93ba:	bf00      	nop
    93bc:	3714      	adds	r7, #20
    93be:	46bd      	mov	sp, r7
    93c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    93c4:	4770      	bx	lr
    93c6:	bf00      	nop
    93c8:	2000337c 	.word	0x2000337c

000093cc <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    93cc:	b480      	push	{r7}
    93ce:	b085      	sub	sp, #20
    93d0:	af00      	add	r7, sp, #0
    93d2:	4603      	mov	r3, r0
    93d4:	71fb      	strb	r3, [r7, #7]
    93d6:	460b      	mov	r3, r1
    93d8:	71bb      	strb	r3, [r7, #6]
    93da:	4613      	mov	r3, r2
    93dc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    93de:	79fa      	ldrb	r2, [r7, #7]
    93e0:	79bb      	ldrb	r3, [r7, #6]
    93e2:	0052      	lsls	r2, r2, #1
    93e4:	4413      	add	r3, r2
    93e6:	011b      	lsls	r3, r3, #4
    93e8:	4a08      	ldr	r2, [pc, #32]	; (940c <_usbd_ep_set_in_count+0x40>)
    93ea:	4413      	add	r3, r2
    93ec:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    93ee:	88bb      	ldrh	r3, [r7, #4]
    93f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    93f4:	b299      	uxth	r1, r3
    93f6:	68fa      	ldr	r2, [r7, #12]
    93f8:	6853      	ldr	r3, [r2, #4]
    93fa:	f361 339b 	bfi	r3, r1, #14, #14
    93fe:	6053      	str	r3, [r2, #4]
}
    9400:	bf00      	nop
    9402:	3714      	adds	r7, #20
    9404:	46bd      	mov	sp, r7
    9406:	f85d 7b04 	ldr.w	r7, [sp], #4
    940a:	4770      	bx	lr
    940c:	2000337c 	.word	0x2000337c

00009410 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9410:	b480      	push	{r7}
    9412:	b085      	sub	sp, #20
    9414:	af00      	add	r7, sp, #0
    9416:	4603      	mov	r3, r0
    9418:	71fb      	strb	r3, [r7, #7]
    941a:	460b      	mov	r3, r1
    941c:	71bb      	strb	r3, [r7, #6]
    941e:	4613      	mov	r3, r2
    9420:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9422:	79fa      	ldrb	r2, [r7, #7]
    9424:	79bb      	ldrb	r3, [r7, #6]
    9426:	0052      	lsls	r2, r2, #1
    9428:	4413      	add	r3, r2
    942a:	011b      	lsls	r3, r3, #4
    942c:	4a08      	ldr	r2, [pc, #32]	; (9450 <_usbd_ep_set_in_size+0x40>)
    942e:	4413      	add	r3, r2
    9430:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    9432:	88bb      	ldrh	r3, [r7, #4]
    9434:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9438:	b299      	uxth	r1, r3
    943a:	68fa      	ldr	r2, [r7, #12]
    943c:	6853      	ldr	r3, [r2, #4]
    943e:	f361 030d 	bfi	r3, r1, #0, #14
    9442:	6053      	str	r3, [r2, #4]
}
    9444:	bf00      	nop
    9446:	3714      	adds	r7, #20
    9448:	46bd      	mov	sp, r7
    944a:	f85d 7b04 	ldr.w	r7, [sp], #4
    944e:	4770      	bx	lr
    9450:	2000337c 	.word	0x2000337c

00009454 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9454:	b480      	push	{r7}
    9456:	b085      	sub	sp, #20
    9458:	af00      	add	r7, sp, #0
    945a:	4603      	mov	r3, r0
    945c:	71fb      	strb	r3, [r7, #7]
    945e:	460b      	mov	r3, r1
    9460:	71bb      	strb	r3, [r7, #6]
    9462:	4613      	mov	r3, r2
    9464:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9466:	79fa      	ldrb	r2, [r7, #7]
    9468:	79bb      	ldrb	r3, [r7, #6]
    946a:	0052      	lsls	r2, r2, #1
    946c:	4413      	add	r3, r2
    946e:	011b      	lsls	r3, r3, #4
    9470:	4a08      	ldr	r2, [pc, #32]	; (9494 <_usbd_ep_set_out_count+0x40>)
    9472:	4413      	add	r3, r2
    9474:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9476:	88bb      	ldrh	r3, [r7, #4]
    9478:	f3c3 030d 	ubfx	r3, r3, #0, #14
    947c:	b299      	uxth	r1, r3
    947e:	68fa      	ldr	r2, [r7, #12]
    9480:	6853      	ldr	r3, [r2, #4]
    9482:	f361 030d 	bfi	r3, r1, #0, #14
    9486:	6053      	str	r3, [r2, #4]
}
    9488:	bf00      	nop
    948a:	3714      	adds	r7, #20
    948c:	46bd      	mov	sp, r7
    948e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9492:	4770      	bx	lr
    9494:	2000337c 	.word	0x2000337c

00009498 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9498:	b480      	push	{r7}
    949a:	b085      	sub	sp, #20
    949c:	af00      	add	r7, sp, #0
    949e:	4603      	mov	r3, r0
    94a0:	71fb      	strb	r3, [r7, #7]
    94a2:	460b      	mov	r3, r1
    94a4:	71bb      	strb	r3, [r7, #6]
    94a6:	4613      	mov	r3, r2
    94a8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    94aa:	79fa      	ldrb	r2, [r7, #7]
    94ac:	79bb      	ldrb	r3, [r7, #6]
    94ae:	0052      	lsls	r2, r2, #1
    94b0:	4413      	add	r3, r2
    94b2:	011b      	lsls	r3, r3, #4
    94b4:	4a08      	ldr	r2, [pc, #32]	; (94d8 <_usbd_ep_set_out_size+0x40>)
    94b6:	4413      	add	r3, r2
    94b8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    94ba:	88bb      	ldrh	r3, [r7, #4]
    94bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    94c0:	b299      	uxth	r1, r3
    94c2:	68fa      	ldr	r2, [r7, #12]
    94c4:	6853      	ldr	r3, [r2, #4]
    94c6:	f361 339b 	bfi	r3, r1, #14, #14
    94ca:	6053      	str	r3, [r2, #4]
}
    94cc:	bf00      	nop
    94ce:	3714      	adds	r7, #20
    94d0:	46bd      	mov	sp, r7
    94d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    94d6:	4770      	bx	lr
    94d8:	2000337c 	.word	0x2000337c

000094dc <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    94dc:	b580      	push	{r7, lr}
    94de:	b084      	sub	sp, #16
    94e0:	af00      	add	r7, sp, #0
    94e2:	60ba      	str	r2, [r7, #8]
    94e4:	607b      	str	r3, [r7, #4]
    94e6:	4603      	mov	r3, r0
    94e8:	73fb      	strb	r3, [r7, #15]
    94ea:	460b      	mov	r3, r1
    94ec:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    94ee:	68bb      	ldr	r3, [r7, #8]
    94f0:	b29a      	uxth	r2, r3
    94f2:	7bb9      	ldrb	r1, [r7, #14]
    94f4:	7bfb      	ldrb	r3, [r7, #15]
    94f6:	4618      	mov	r0, r3
    94f8:	4b06      	ldr	r3, [pc, #24]	; (9514 <_usbd_ep_set_in_trans+0x38>)
    94fa:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    94fc:	687b      	ldr	r3, [r7, #4]
    94fe:	b29a      	uxth	r2, r3
    9500:	7bb9      	ldrb	r1, [r7, #14]
    9502:	7bfb      	ldrb	r3, [r7, #15]
    9504:	4618      	mov	r0, r3
    9506:	4b04      	ldr	r3, [pc, #16]	; (9518 <_usbd_ep_set_in_trans+0x3c>)
    9508:	4798      	blx	r3
}
    950a:	bf00      	nop
    950c:	3710      	adds	r7, #16
    950e:	46bd      	mov	sp, r7
    9510:	bd80      	pop	{r7, pc}
    9512:	bf00      	nop
    9514:	00009411 	.word	0x00009411
    9518:	000093cd 	.word	0x000093cd

0000951c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    951c:	b580      	push	{r7, lr}
    951e:	b084      	sub	sp, #16
    9520:	af00      	add	r7, sp, #0
    9522:	60ba      	str	r2, [r7, #8]
    9524:	607b      	str	r3, [r7, #4]
    9526:	4603      	mov	r3, r0
    9528:	73fb      	strb	r3, [r7, #15]
    952a:	460b      	mov	r3, r1
    952c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    952e:	68bb      	ldr	r3, [r7, #8]
    9530:	b29a      	uxth	r2, r3
    9532:	7bb9      	ldrb	r1, [r7, #14]
    9534:	7bfb      	ldrb	r3, [r7, #15]
    9536:	4618      	mov	r0, r3
    9538:	4b06      	ldr	r3, [pc, #24]	; (9554 <_usbd_ep_set_out_trans+0x38>)
    953a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    953c:	687b      	ldr	r3, [r7, #4]
    953e:	b29a      	uxth	r2, r3
    9540:	7bb9      	ldrb	r1, [r7, #14]
    9542:	7bfb      	ldrb	r3, [r7, #15]
    9544:	4618      	mov	r0, r3
    9546:	4b04      	ldr	r3, [pc, #16]	; (9558 <_usbd_ep_set_out_trans+0x3c>)
    9548:	4798      	blx	r3
}
    954a:	bf00      	nop
    954c:	3710      	adds	r7, #16
    954e:	46bd      	mov	sp, r7
    9550:	bd80      	pop	{r7, pc}
    9552:	bf00      	nop
    9554:	00009499 	.word	0x00009499
    9558:	00009455 	.word	0x00009455

0000955c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    955c:	b480      	push	{r7}
    955e:	b085      	sub	sp, #20
    9560:	af00      	add	r7, sp, #0
    9562:	4603      	mov	r3, r0
    9564:	460a      	mov	r2, r1
    9566:	71fb      	strb	r3, [r7, #7]
    9568:	4613      	mov	r3, r2
    956a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    956c:	79fa      	ldrb	r2, [r7, #7]
    956e:	79bb      	ldrb	r3, [r7, #6]
    9570:	0052      	lsls	r2, r2, #1
    9572:	4413      	add	r3, r2
    9574:	011b      	lsls	r3, r3, #4
    9576:	4a06      	ldr	r2, [pc, #24]	; (9590 <_usbd_ep_clear_bank_status+0x34>)
    9578:	4413      	add	r3, r2
    957a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    957c:	68fb      	ldr	r3, [r7, #12]
    957e:	2200      	movs	r2, #0
    9580:	729a      	strb	r2, [r3, #10]
}
    9582:	bf00      	nop
    9584:	3714      	adds	r7, #20
    9586:	46bd      	mov	sp, r7
    9588:	f85d 7b04 	ldr.w	r7, [sp], #4
    958c:	4770      	bx	lr
    958e:	bf00      	nop
    9590:	2000337c 	.word	0x2000337c

00009594 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9594:	b580      	push	{r7, lr}
    9596:	b082      	sub	sp, #8
    9598:	af00      	add	r7, sp, #0
    959a:	4603      	mov	r3, r0
    959c:	71fb      	strb	r3, [r7, #7]
    959e:	460b      	mov	r3, r1
    95a0:	71bb      	strb	r3, [r7, #6]
    95a2:	4613      	mov	r3, r2
    95a4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    95a6:	797b      	ldrb	r3, [r7, #5]
    95a8:	2b00      	cmp	r3, #0
    95aa:	d00b      	beq.n	95c4 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    95ac:	79bb      	ldrb	r3, [r7, #6]
    95ae:	2240      	movs	r2, #64	; 0x40
    95b0:	fa02 f303 	lsl.w	r3, r2, r3
    95b4:	b2da      	uxtb	r2, r3
    95b6:	79fb      	ldrb	r3, [r7, #7]
    95b8:	4619      	mov	r1, r3
    95ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95be:	4b09      	ldr	r3, [pc, #36]	; (95e4 <_usbd_ep_set_in_rdy+0x50>)
    95c0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    95c2:	e00a      	b.n	95da <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    95c4:	79bb      	ldrb	r3, [r7, #6]
    95c6:	2240      	movs	r2, #64	; 0x40
    95c8:	fa02 f303 	lsl.w	r3, r2, r3
    95cc:	b2da      	uxtb	r2, r3
    95ce:	79fb      	ldrb	r3, [r7, #7]
    95d0:	4619      	mov	r1, r3
    95d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95d6:	4b04      	ldr	r3, [pc, #16]	; (95e8 <_usbd_ep_set_in_rdy+0x54>)
    95d8:	4798      	blx	r3
}
    95da:	bf00      	nop
    95dc:	3708      	adds	r7, #8
    95de:	46bd      	mov	sp, r7
    95e0:	bd80      	pop	{r7, pc}
    95e2:	bf00      	nop
    95e4:	00008ba1 	.word	0x00008ba1
    95e8:	00008bf5 	.word	0x00008bf5

000095ec <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    95ec:	b580      	push	{r7, lr}
    95ee:	b082      	sub	sp, #8
    95f0:	af00      	add	r7, sp, #0
    95f2:	4603      	mov	r3, r0
    95f4:	71fb      	strb	r3, [r7, #7]
    95f6:	460b      	mov	r3, r1
    95f8:	71bb      	strb	r3, [r7, #6]
    95fa:	4613      	mov	r3, r2
    95fc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    95fe:	797b      	ldrb	r3, [r7, #5]
    9600:	2b00      	cmp	r3, #0
    9602:	d00b      	beq.n	961c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9604:	79bb      	ldrb	r3, [r7, #6]
    9606:	2240      	movs	r2, #64	; 0x40
    9608:	fa02 f303 	lsl.w	r3, r2, r3
    960c:	b2da      	uxtb	r2, r3
    960e:	79fb      	ldrb	r3, [r7, #7]
    9610:	4619      	mov	r1, r3
    9612:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9616:	4b09      	ldr	r3, [pc, #36]	; (963c <_usbd_ep_set_out_rdy+0x50>)
    9618:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    961a:	e00a      	b.n	9632 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    961c:	79bb      	ldrb	r3, [r7, #6]
    961e:	2240      	movs	r2, #64	; 0x40
    9620:	fa02 f303 	lsl.w	r3, r2, r3
    9624:	b2da      	uxtb	r2, r3
    9626:	79fb      	ldrb	r3, [r7, #7]
    9628:	4619      	mov	r1, r3
    962a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    962e:	4b04      	ldr	r3, [pc, #16]	; (9640 <_usbd_ep_set_out_rdy+0x54>)
    9630:	4798      	blx	r3
}
    9632:	bf00      	nop
    9634:	3708      	adds	r7, #8
    9636:	46bd      	mov	sp, r7
    9638:	bd80      	pop	{r7, pc}
    963a:	bf00      	nop
    963c:	00008bf5 	.word	0x00008bf5
    9640:	00008ba1 	.word	0x00008ba1

00009644 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9644:	b480      	push	{r7}
    9646:	b083      	sub	sp, #12
    9648:	af00      	add	r7, sp, #0
    964a:	4603      	mov	r3, r0
    964c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    964e:	88fb      	ldrh	r3, [r7, #6]
    9650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9654:	d820      	bhi.n	9698 <_usbd_ep_pcksize_size+0x54>
    9656:	88fb      	ldrh	r3, [r7, #6]
    9658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    965c:	d81a      	bhi.n	9694 <_usbd_ep_pcksize_size+0x50>
    965e:	88fb      	ldrh	r3, [r7, #6]
    9660:	2b80      	cmp	r3, #128	; 0x80
    9662:	d815      	bhi.n	9690 <_usbd_ep_pcksize_size+0x4c>
    9664:	88fb      	ldrh	r3, [r7, #6]
    9666:	2b40      	cmp	r3, #64	; 0x40
    9668:	d810      	bhi.n	968c <_usbd_ep_pcksize_size+0x48>
    966a:	88fb      	ldrh	r3, [r7, #6]
    966c:	2b20      	cmp	r3, #32
    966e:	d80b      	bhi.n	9688 <_usbd_ep_pcksize_size+0x44>
    9670:	88fb      	ldrh	r3, [r7, #6]
    9672:	2b10      	cmp	r3, #16
    9674:	d806      	bhi.n	9684 <_usbd_ep_pcksize_size+0x40>
    9676:	88fb      	ldrh	r3, [r7, #6]
    9678:	2b08      	cmp	r3, #8
    967a:	bf8c      	ite	hi
    967c:	2301      	movhi	r3, #1
    967e:	2300      	movls	r3, #0
    9680:	b2db      	uxtb	r3, r3
    9682:	e00a      	b.n	969a <_usbd_ep_pcksize_size+0x56>
    9684:	2302      	movs	r3, #2
    9686:	e008      	b.n	969a <_usbd_ep_pcksize_size+0x56>
    9688:	2303      	movs	r3, #3
    968a:	e006      	b.n	969a <_usbd_ep_pcksize_size+0x56>
    968c:	2304      	movs	r3, #4
    968e:	e004      	b.n	969a <_usbd_ep_pcksize_size+0x56>
    9690:	2305      	movs	r3, #5
    9692:	e002      	b.n	969a <_usbd_ep_pcksize_size+0x56>
    9694:	2306      	movs	r3, #6
    9696:	e000      	b.n	969a <_usbd_ep_pcksize_size+0x56>
    9698:	2307      	movs	r3, #7
}
    969a:	4618      	mov	r0, r3
    969c:	370c      	adds	r7, #12
    969e:	46bd      	mov	sp, r7
    96a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    96a4:	4770      	bx	lr
	...

000096a8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    96a8:	b480      	push	{r7}
    96aa:	b085      	sub	sp, #20
    96ac:	af00      	add	r7, sp, #0
    96ae:	4603      	mov	r3, r0
    96b0:	460a      	mov	r2, r1
    96b2:	71fb      	strb	r3, [r7, #7]
    96b4:	4613      	mov	r3, r2
    96b6:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    96b8:	79fb      	ldrb	r3, [r7, #7]
    96ba:	2b00      	cmp	r3, #0
    96bc:	d008      	beq.n	96d0 <_usb_d_dev_ept+0x28>
    96be:	79bb      	ldrb	r3, [r7, #6]
    96c0:	2b00      	cmp	r3, #0
    96c2:	d003      	beq.n	96cc <_usb_d_dev_ept+0x24>
    96c4:	79fb      	ldrb	r3, [r7, #7]
    96c6:	3304      	adds	r3, #4
    96c8:	b2db      	uxtb	r3, r3
    96ca:	e002      	b.n	96d2 <_usb_d_dev_ept+0x2a>
    96cc:	79fb      	ldrb	r3, [r7, #7]
    96ce:	e000      	b.n	96d2 <_usb_d_dev_ept+0x2a>
    96d0:	2300      	movs	r3, #0
    96d2:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    96d4:	7bfa      	ldrb	r2, [r7, #15]
    96d6:	4613      	mov	r3, r2
    96d8:	009b      	lsls	r3, r3, #2
    96da:	4413      	add	r3, r2
    96dc:	009b      	lsls	r3, r3, #2
    96de:	3310      	adds	r3, #16
    96e0:	4a04      	ldr	r2, [pc, #16]	; (96f4 <_usb_d_dev_ept+0x4c>)
    96e2:	4413      	add	r3, r2
    96e4:	3304      	adds	r3, #4
}
    96e6:	4618      	mov	r0, r3
    96e8:	3714      	adds	r7, #20
    96ea:	46bd      	mov	sp, r7
    96ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    96f0:	4770      	bx	lr
    96f2:	bf00      	nop
    96f4:	200032b4 	.word	0x200032b4

000096f8 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    96f8:	b580      	push	{r7, lr}
    96fa:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    96fc:	2104      	movs	r1, #4
    96fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9702:	4b03      	ldr	r3, [pc, #12]	; (9710 <_usb_d_dev_sof+0x18>)
    9704:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9706:	4b03      	ldr	r3, [pc, #12]	; (9714 <_usb_d_dev_sof+0x1c>)
    9708:	681b      	ldr	r3, [r3, #0]
    970a:	4798      	blx	r3
}
    970c:	bf00      	nop
    970e:	bd80      	pop	{r7, pc}
    9710:	00008d6f 	.word	0x00008d6f
    9714:	200032b4 	.word	0x200032b4

00009718 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9718:	b580      	push	{r7, lr}
    971a:	b084      	sub	sp, #16
    971c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    971e:	2300      	movs	r3, #0
    9720:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9722:	f240 2101 	movw	r1, #513	; 0x201
    9726:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    972a:	4b1a      	ldr	r3, [pc, #104]	; (9794 <_usb_d_dev_lpmsusp+0x7c>)
    972c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    972e:	f240 2101 	movw	r1, #513	; 0x201
    9732:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9736:	4b18      	ldr	r3, [pc, #96]	; (9798 <_usb_d_dev_lpmsusp+0x80>)
    9738:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    973a:	2170      	movs	r1, #112	; 0x70
    973c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9740:	4b16      	ldr	r3, [pc, #88]	; (979c <_usb_d_dev_lpmsusp+0x84>)
    9742:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9744:	2300      	movs	r3, #0
    9746:	73fb      	strb	r3, [r7, #15]
    9748:	e018      	b.n	977c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    974a:	7bfb      	ldrb	r3, [r7, #15]
    974c:	015b      	lsls	r3, r3, #5
    974e:	4a14      	ldr	r2, [pc, #80]	; (97a0 <_usb_d_dev_lpmsusp+0x88>)
    9750:	4413      	add	r3, r2
    9752:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9754:	687b      	ldr	r3, [r7, #4]
    9756:	891b      	ldrh	r3, [r3, #8]
    9758:	f3c3 0303 	ubfx	r3, r3, #0, #4
    975c:	b2db      	uxtb	r3, r3
    975e:	2b03      	cmp	r3, #3
    9760:	d109      	bne.n	9776 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9762:	687b      	ldr	r3, [r7, #4]
    9764:	891b      	ldrh	r3, [r3, #8]
    9766:	f3c3 130a 	ubfx	r3, r3, #4, #11
    976a:	b29b      	uxth	r3, r3
    976c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    976e:	687b      	ldr	r3, [r7, #4]
    9770:	2200      	movs	r2, #0
    9772:	811a      	strh	r2, [r3, #8]
			break;
    9774:	e005      	b.n	9782 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9776:	7bfb      	ldrb	r3, [r7, #15]
    9778:	3301      	adds	r3, #1
    977a:	73fb      	strb	r3, [r7, #15]
    977c:	7bfb      	ldrb	r3, [r7, #15]
    977e:	2b03      	cmp	r3, #3
    9780:	d9e3      	bls.n	974a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9782:	4b08      	ldr	r3, [pc, #32]	; (97a4 <_usb_d_dev_lpmsusp+0x8c>)
    9784:	685b      	ldr	r3, [r3, #4]
    9786:	68b9      	ldr	r1, [r7, #8]
    9788:	2003      	movs	r0, #3
    978a:	4798      	blx	r3
}
    978c:	bf00      	nop
    978e:	3710      	adds	r7, #16
    9790:	46bd      	mov	sp, r7
    9792:	bd80      	pop	{r7, pc}
    9794:	00008d6f 	.word	0x00008d6f
    9798:	00008dc5 	.word	0x00008dc5
    979c:	00008d8d 	.word	0x00008d8d
    97a0:	2000337c 	.word	0x2000337c
    97a4:	200032b4 	.word	0x200032b4

000097a8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    97a8:	b580      	push	{r7, lr}
    97aa:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    97ac:	2180      	movs	r1, #128	; 0x80
    97ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97b2:	4b04      	ldr	r3, [pc, #16]	; (97c4 <_usb_d_dev_ramerr+0x1c>)
    97b4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    97b6:	4b04      	ldr	r3, [pc, #16]	; (97c8 <_usb_d_dev_ramerr+0x20>)
    97b8:	685b      	ldr	r3, [r3, #4]
    97ba:	2100      	movs	r1, #0
    97bc:	2005      	movs	r0, #5
    97be:	4798      	blx	r3
}
    97c0:	bf00      	nop
    97c2:	bd80      	pop	{r7, pc}
    97c4:	00008d6f 	.word	0x00008d6f
    97c8:	200032b4 	.word	0x200032b4

000097cc <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    97cc:	b580      	push	{r7, lr}
    97ce:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    97d0:	2170      	movs	r1, #112	; 0x70
    97d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97d6:	4b0b      	ldr	r3, [pc, #44]	; (9804 <_usb_d_dev_wakeup+0x38>)
    97d8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    97da:	2170      	movs	r1, #112	; 0x70
    97dc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97e0:	4b09      	ldr	r3, [pc, #36]	; (9808 <_usb_d_dev_wakeup+0x3c>)
    97e2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    97e4:	f240 2101 	movw	r1, #513	; 0x201
    97e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97ec:	4b07      	ldr	r3, [pc, #28]	; (980c <_usb_d_dev_wakeup+0x40>)
    97ee:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    97f0:	2000      	movs	r0, #0
    97f2:	4b07      	ldr	r3, [pc, #28]	; (9810 <_usb_d_dev_wakeup+0x44>)
    97f4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    97f6:	4b07      	ldr	r3, [pc, #28]	; (9814 <_usb_d_dev_wakeup+0x48>)
    97f8:	685b      	ldr	r3, [r3, #4]
    97fa:	2100      	movs	r1, #0
    97fc:	2002      	movs	r0, #2
    97fe:	4798      	blx	r3
}
    9800:	bf00      	nop
    9802:	bd80      	pop	{r7, pc}
    9804:	00008d6f 	.word	0x00008d6f
    9808:	00008dc5 	.word	0x00008dc5
    980c:	00008d8d 	.word	0x00008d8d
    9810:	0000906d 	.word	0x0000906d
    9814:	200032b4 	.word	0x200032b4

00009818 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9818:	b580      	push	{r7, lr}
    981a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    981c:	2200      	movs	r2, #0
    981e:	2100      	movs	r1, #0
    9820:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9824:	4b0d      	ldr	r3, [pc, #52]	; (985c <_usb_d_dev_reset+0x44>)
    9826:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9828:	2108      	movs	r1, #8
    982a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    982e:	4b0c      	ldr	r3, [pc, #48]	; (9860 <_usb_d_dev_reset+0x48>)
    9830:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9832:	2170      	movs	r1, #112	; 0x70
    9834:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9838:	4b0a      	ldr	r3, [pc, #40]	; (9864 <_usb_d_dev_reset+0x4c>)
    983a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    983c:	f240 2101 	movw	r1, #513	; 0x201
    9840:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9844:	4b08      	ldr	r3, [pc, #32]	; (9868 <_usb_d_dev_reset+0x50>)
    9846:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9848:	4b08      	ldr	r3, [pc, #32]	; (986c <_usb_d_dev_reset+0x54>)
    984a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    984c:	4b08      	ldr	r3, [pc, #32]	; (9870 <_usb_d_dev_reset+0x58>)
    984e:	685b      	ldr	r3, [r3, #4]
    9850:	2100      	movs	r1, #0
    9852:	2001      	movs	r0, #1
    9854:	4798      	blx	r3
}
    9856:	bf00      	nop
    9858:	bd80      	pop	{r7, pc}
    985a:	bf00      	nop
    985c:	00008d05 	.word	0x00008d05
    9860:	00008d6f 	.word	0x00008d6f
    9864:	00008dc5 	.word	0x00008dc5
    9868:	00008d8d 	.word	0x00008d8d
    986c:	0000a3d5 	.word	0x0000a3d5
    9870:	200032b4 	.word	0x200032b4

00009874 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9874:	b580      	push	{r7, lr}
    9876:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9878:	f240 2101 	movw	r1, #513	; 0x201
    987c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9880:	4b09      	ldr	r3, [pc, #36]	; (98a8 <_usb_d_dev_suspend+0x34>)
    9882:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9884:	f240 2101 	movw	r1, #513	; 0x201
    9888:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    988c:	4b07      	ldr	r3, [pc, #28]	; (98ac <_usb_d_dev_suspend+0x38>)
    988e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9890:	2170      	movs	r1, #112	; 0x70
    9892:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9896:	4b06      	ldr	r3, [pc, #24]	; (98b0 <_usb_d_dev_suspend+0x3c>)
    9898:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    989a:	4b06      	ldr	r3, [pc, #24]	; (98b4 <_usb_d_dev_suspend+0x40>)
    989c:	685b      	ldr	r3, [r3, #4]
    989e:	2100      	movs	r1, #0
    98a0:	2004      	movs	r0, #4
    98a2:	4798      	blx	r3
}
    98a4:	bf00      	nop
    98a6:	bd80      	pop	{r7, pc}
    98a8:	00008d6f 	.word	0x00008d6f
    98ac:	00008dc5 	.word	0x00008dc5
    98b0:	00008d8d 	.word	0x00008d8d
    98b4:	200032b4 	.word	0x200032b4

000098b8 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    98b8:	b580      	push	{r7, lr}
    98ba:	b082      	sub	sp, #8
    98bc:	af00      	add	r7, sp, #0
	bool     rc    = true;
    98be:	2301      	movs	r3, #1
    98c0:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    98c2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98c6:	4b22      	ldr	r3, [pc, #136]	; (9950 <_usb_d_dev_handle_nep+0x98>)
    98c8:	4798      	blx	r3
    98ca:	4603      	mov	r3, r0
    98cc:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    98ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98d2:	4b20      	ldr	r3, [pc, #128]	; (9954 <_usb_d_dev_handle_nep+0x9c>)
    98d4:	4798      	blx	r3
    98d6:	4603      	mov	r3, r0
    98d8:	461a      	mov	r2, r3
    98da:	88bb      	ldrh	r3, [r7, #4]
    98dc:	4013      	ands	r3, r2
    98de:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    98e0:	88bb      	ldrh	r3, [r7, #4]
    98e2:	f003 0304 	and.w	r3, r3, #4
    98e6:	2b00      	cmp	r3, #0
    98e8:	d003      	beq.n	98f2 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    98ea:	4b1b      	ldr	r3, [pc, #108]	; (9958 <_usb_d_dev_handle_nep+0xa0>)
    98ec:	4798      	blx	r3
		return true;
    98ee:	2301      	movs	r3, #1
    98f0:	e02a      	b.n	9948 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    98f2:	88bb      	ldrh	r3, [r7, #4]
    98f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    98f8:	2b00      	cmp	r3, #0
    98fa:	d002      	beq.n	9902 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    98fc:	4b17      	ldr	r3, [pc, #92]	; (995c <_usb_d_dev_handle_nep+0xa4>)
    98fe:	4798      	blx	r3
    9900:	e021      	b.n	9946 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9902:	88bb      	ldrh	r3, [r7, #4]
    9904:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9908:	2b00      	cmp	r3, #0
    990a:	d002      	beq.n	9912 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    990c:	4b14      	ldr	r3, [pc, #80]	; (9960 <_usb_d_dev_handle_nep+0xa8>)
    990e:	4798      	blx	r3
    9910:	e019      	b.n	9946 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9912:	88bb      	ldrh	r3, [r7, #4]
    9914:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9918:	2b00      	cmp	r3, #0
    991a:	d002      	beq.n	9922 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    991c:	4b11      	ldr	r3, [pc, #68]	; (9964 <_usb_d_dev_handle_nep+0xac>)
    991e:	4798      	blx	r3
    9920:	e011      	b.n	9946 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9922:	88bb      	ldrh	r3, [r7, #4]
    9924:	f003 0308 	and.w	r3, r3, #8
    9928:	2b00      	cmp	r3, #0
    992a:	d002      	beq.n	9932 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    992c:	4b0e      	ldr	r3, [pc, #56]	; (9968 <_usb_d_dev_handle_nep+0xb0>)
    992e:	4798      	blx	r3
    9930:	e009      	b.n	9946 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9932:	88bb      	ldrh	r3, [r7, #4]
    9934:	f003 0301 	and.w	r3, r3, #1
    9938:	2b00      	cmp	r3, #0
    993a:	d002      	beq.n	9942 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    993c:	4b0b      	ldr	r3, [pc, #44]	; (996c <_usb_d_dev_handle_nep+0xb4>)
    993e:	4798      	blx	r3
    9940:	e001      	b.n	9946 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9942:	2300      	movs	r3, #0
    9944:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9946:	79fb      	ldrb	r3, [r7, #7]
}
    9948:	4618      	mov	r0, r3
    994a:	3708      	adds	r7, #8
    994c:	46bd      	mov	sp, r7
    994e:	bd80      	pop	{r7, pc}
    9950:	00008d55 	.word	0x00008d55
    9954:	00008dab 	.word	0x00008dab
    9958:	000096f9 	.word	0x000096f9
    995c:	00009719 	.word	0x00009719
    9960:	000097a9 	.word	0x000097a9
    9964:	000097cd 	.word	0x000097cd
    9968:	00009819 	.word	0x00009819
    996c:	00009875 	.word	0x00009875

00009970 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9970:	b590      	push	{r4, r7, lr}
    9972:	b089      	sub	sp, #36	; 0x24
    9974:	af00      	add	r7, sp, #0
    9976:	6078      	str	r0, [r7, #4]
    9978:	460b      	mov	r3, r1
    997a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    997c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9980:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9982:	687b      	ldr	r3, [r7, #4]
    9984:	7c9b      	ldrb	r3, [r3, #18]
    9986:	f003 030f 	and.w	r3, r3, #15
    998a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    998c:	7dfb      	ldrb	r3, [r7, #23]
    998e:	015b      	lsls	r3, r3, #5
    9990:	4a73      	ldr	r2, [pc, #460]	; (9b60 <_usb_d_dev_in_next+0x1f0>)
    9992:	4413      	add	r3, r2
    9994:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9996:	78fb      	ldrb	r3, [r7, #3]
    9998:	2b00      	cmp	r3, #0
    999a:	d006      	beq.n	99aa <_usb_d_dev_in_next+0x3a>
    999c:	693b      	ldr	r3, [r7, #16]
    999e:	3310      	adds	r3, #16
    99a0:	685b      	ldr	r3, [r3, #4]
    99a2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    99a6:	b29b      	uxth	r3, r3
    99a8:	e000      	b.n	99ac <_usb_d_dev_in_next+0x3c>
    99aa:	2300      	movs	r3, #0
    99ac:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    99ae:	687b      	ldr	r3, [r7, #4]
    99b0:	8a1b      	ldrh	r3, [r3, #16]
    99b2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    99b6:	4293      	cmp	r3, r2
    99b8:	d103      	bne.n	99c2 <_usb_d_dev_in_next+0x52>
    99ba:	687b      	ldr	r3, [r7, #4]
    99bc:	8a1b      	ldrh	r3, [r3, #16]
    99be:	b21b      	sxth	r3, r3
    99c0:	e004      	b.n	99cc <_usb_d_dev_in_next+0x5c>
    99c2:	687b      	ldr	r3, [r7, #4]
    99c4:	8a1b      	ldrh	r3, [r3, #16]
    99c6:	3b01      	subs	r3, #1
    99c8:	b29b      	uxth	r3, r3
    99ca:	b21b      	sxth	r3, r3
    99cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    99d0:	4013      	ands	r3, r2
    99d2:	b21b      	sxth	r3, r3
    99d4:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    99d6:	2300      	movs	r3, #0
    99d8:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    99da:	687b      	ldr	r3, [r7, #4]
    99dc:	7cdb      	ldrb	r3, [r3, #19]
    99de:	f003 0307 	and.w	r3, r3, #7
    99e2:	b2db      	uxtb	r3, r3
    99e4:	2b01      	cmp	r3, #1
    99e6:	bf0c      	ite	eq
    99e8:	2301      	moveq	r3, #1
    99ea:	2300      	movne	r3, #0
    99ec:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    99ee:	78fb      	ldrb	r3, [r7, #3]
    99f0:	2b00      	cmp	r3, #0
    99f2:	d004      	beq.n	99fe <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    99f4:	7dfb      	ldrb	r3, [r7, #23]
    99f6:	2101      	movs	r1, #1
    99f8:	4618      	mov	r0, r3
    99fa:	4b5a      	ldr	r3, [pc, #360]	; (9b64 <_usb_d_dev_in_next+0x1f4>)
    99fc:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    99fe:	687b      	ldr	r3, [r7, #4]
    9a00:	689a      	ldr	r2, [r3, #8]
    9a02:	89fb      	ldrh	r3, [r7, #14]
    9a04:	441a      	add	r2, r3
    9a06:	687b      	ldr	r3, [r7, #4]
    9a08:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9a0a:	687b      	ldr	r3, [r7, #4]
    9a0c:	689a      	ldr	r2, [r3, #8]
    9a0e:	687b      	ldr	r3, [r7, #4]
    9a10:	685b      	ldr	r3, [r3, #4]
    9a12:	429a      	cmp	r2, r3
    9a14:	d243      	bcs.n	9a9e <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9a16:	687b      	ldr	r3, [r7, #4]
    9a18:	685b      	ldr	r3, [r3, #4]
    9a1a:	b29a      	uxth	r2, r3
    9a1c:	687b      	ldr	r3, [r7, #4]
    9a1e:	689b      	ldr	r3, [r3, #8]
    9a20:	b29b      	uxth	r3, r3
    9a22:	1ad3      	subs	r3, r2, r3
    9a24:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9a26:	687b      	ldr	r3, [r7, #4]
    9a28:	7cdb      	ldrb	r3, [r3, #19]
    9a2a:	f003 0320 	and.w	r3, r3, #32
    9a2e:	b2db      	uxtb	r3, r3
    9a30:	2b00      	cmp	r3, #0
    9a32:	d01b      	beq.n	9a6c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9a34:	687b      	ldr	r3, [r7, #4]
    9a36:	8a1b      	ldrh	r3, [r3, #16]
    9a38:	8bfa      	ldrh	r2, [r7, #30]
    9a3a:	429a      	cmp	r2, r3
    9a3c:	d902      	bls.n	9a44 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9a3e:	687b      	ldr	r3, [r7, #4]
    9a40:	8a1b      	ldrh	r3, [r3, #16]
    9a42:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9a44:	687b      	ldr	r3, [r7, #4]
    9a46:	68d8      	ldr	r0, [r3, #12]
    9a48:	687b      	ldr	r3, [r7, #4]
    9a4a:	681a      	ldr	r2, [r3, #0]
    9a4c:	687b      	ldr	r3, [r7, #4]
    9a4e:	689b      	ldr	r3, [r3, #8]
    9a50:	4413      	add	r3, r2
    9a52:	8bfa      	ldrh	r2, [r7, #30]
    9a54:	4619      	mov	r1, r3
    9a56:	4b44      	ldr	r3, [pc, #272]	; (9b68 <_usb_d_dev_in_next+0x1f8>)
    9a58:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9a5a:	687b      	ldr	r3, [r7, #4]
    9a5c:	68db      	ldr	r3, [r3, #12]
    9a5e:	461a      	mov	r2, r3
    9a60:	7dfb      	ldrb	r3, [r7, #23]
    9a62:	2101      	movs	r1, #1
    9a64:	4618      	mov	r0, r3
    9a66:	4b41      	ldr	r3, [pc, #260]	; (9b6c <_usb_d_dev_in_next+0x1fc>)
    9a68:	4798      	blx	r3
    9a6a:	e011      	b.n	9a90 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9a6c:	8bfb      	ldrh	r3, [r7, #30]
    9a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9a72:	d902      	bls.n	9a7a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9a78:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9a7a:	687b      	ldr	r3, [r7, #4]
    9a7c:	681a      	ldr	r2, [r3, #0]
    9a7e:	687b      	ldr	r3, [r7, #4]
    9a80:	689b      	ldr	r3, [r3, #8]
    9a82:	4413      	add	r3, r2
    9a84:	461a      	mov	r2, r3
    9a86:	7dfb      	ldrb	r3, [r7, #23]
    9a88:	2101      	movs	r1, #1
    9a8a:	4618      	mov	r0, r3
    9a8c:	4b37      	ldr	r3, [pc, #220]	; (9b6c <_usb_d_dev_in_next+0x1fc>)
    9a8e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9a90:	8bfa      	ldrh	r2, [r7, #30]
    9a92:	7df8      	ldrb	r0, [r7, #23]
    9a94:	2300      	movs	r3, #0
    9a96:	2101      	movs	r1, #1
    9a98:	4c35      	ldr	r4, [pc, #212]	; (9b70 <_usb_d_dev_in_next+0x200>)
    9a9a:	47a0      	blx	r4
		goto _in_tx_exec;
    9a9c:	e041      	b.n	9b22 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9a9e:	687b      	ldr	r3, [r7, #4]
    9aa0:	7cdb      	ldrb	r3, [r3, #19]
    9aa2:	f003 0310 	and.w	r3, r3, #16
    9aa6:	b2db      	uxtb	r3, r3
    9aa8:	2b00      	cmp	r3, #0
    9aaa:	d00b      	beq.n	9ac4 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9aac:	687a      	ldr	r2, [r7, #4]
    9aae:	7cd3      	ldrb	r3, [r2, #19]
    9ab0:	f36f 1304 	bfc	r3, #4, #1
    9ab4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9ab6:	7df8      	ldrb	r0, [r7, #23]
    9ab8:	2300      	movs	r3, #0
    9aba:	2200      	movs	r2, #0
    9abc:	2101      	movs	r1, #1
    9abe:	4c2c      	ldr	r4, [pc, #176]	; (9b70 <_usb_d_dev_in_next+0x200>)
    9ac0:	47a0      	blx	r4
		goto _in_tx_exec;
    9ac2:	e02e      	b.n	9b22 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9ac4:	7afb      	ldrb	r3, [r7, #11]
    9ac6:	2b00      	cmp	r3, #0
    9ac8:	d006      	beq.n	9ad8 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9aca:	7dfb      	ldrb	r3, [r7, #23]
    9acc:	224b      	movs	r2, #75	; 0x4b
    9ace:	4619      	mov	r1, r3
    9ad0:	69b8      	ldr	r0, [r7, #24]
    9ad2:	4b28      	ldr	r3, [pc, #160]	; (9b74 <_usb_d_dev_in_next+0x204>)
    9ad4:	4798      	blx	r3
    9ad6:	e005      	b.n	9ae4 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9ad8:	7dfb      	ldrb	r3, [r7, #23]
    9ada:	224a      	movs	r2, #74	; 0x4a
    9adc:	4619      	mov	r1, r3
    9ade:	69b8      	ldr	r0, [r7, #24]
    9ae0:	4b24      	ldr	r3, [pc, #144]	; (9b74 <_usb_d_dev_in_next+0x204>)
    9ae2:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9ae4:	687b      	ldr	r3, [r7, #4]
    9ae6:	8a1b      	ldrh	r3, [r3, #16]
    9ae8:	89ba      	ldrh	r2, [r7, #12]
    9aea:	429a      	cmp	r2, r3
    9aec:	d114      	bne.n	9b18 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9aee:	687a      	ldr	r2, [r7, #4]
    9af0:	7cd3      	ldrb	r3, [r2, #19]
    9af2:	f36f 1386 	bfc	r3, #6, #1
    9af6:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9af8:	4b1f      	ldr	r3, [pc, #124]	; (9b78 <_usb_d_dev_in_next+0x208>)
    9afa:	68db      	ldr	r3, [r3, #12]
    9afc:	687a      	ldr	r2, [r7, #4]
    9afe:	7c90      	ldrb	r0, [r2, #18]
    9b00:	687a      	ldr	r2, [r7, #4]
    9b02:	6892      	ldr	r2, [r2, #8]
    9b04:	4611      	mov	r1, r2
    9b06:	4798      	blx	r3
    9b08:	4603      	mov	r3, r0
    9b0a:	2b00      	cmp	r3, #0
    9b0c:	d124      	bne.n	9b58 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9b0e:	687a      	ldr	r2, [r7, #4]
    9b10:	7cd3      	ldrb	r3, [r2, #19]
    9b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9b16:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9b18:	2100      	movs	r1, #0
    9b1a:	6878      	ldr	r0, [r7, #4]
    9b1c:	4b17      	ldr	r3, [pc, #92]	; (9b7c <_usb_d_dev_in_next+0x20c>)
    9b1e:	4798      	blx	r3
	return;
    9b20:	e01b      	b.n	9b5a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9b22:	78fb      	ldrb	r3, [r7, #3]
    9b24:	f083 0301 	eor.w	r3, r3, #1
    9b28:	b2db      	uxtb	r3, r3
    9b2a:	2b00      	cmp	r3, #0
    9b2c:	d00d      	beq.n	9b4a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9b2e:	7afb      	ldrb	r3, [r7, #11]
    9b30:	2b00      	cmp	r3, #0
    9b32:	d002      	beq.n	9b3a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9b34:	234e      	movs	r3, #78	; 0x4e
    9b36:	777b      	strb	r3, [r7, #29]
    9b38:	e001      	b.n	9b3e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9b3a:	234a      	movs	r3, #74	; 0x4a
    9b3c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9b3e:	7f7a      	ldrb	r2, [r7, #29]
    9b40:	7dfb      	ldrb	r3, [r7, #23]
    9b42:	4619      	mov	r1, r3
    9b44:	69b8      	ldr	r0, [r7, #24]
    9b46:	4b0e      	ldr	r3, [pc, #56]	; (9b80 <_usb_d_dev_in_next+0x210>)
    9b48:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9b4a:	7dfb      	ldrb	r3, [r7, #23]
    9b4c:	2201      	movs	r2, #1
    9b4e:	2101      	movs	r1, #1
    9b50:	4618      	mov	r0, r3
    9b52:	4b0c      	ldr	r3, [pc, #48]	; (9b84 <_usb_d_dev_in_next+0x214>)
    9b54:	4798      	blx	r3
    9b56:	e000      	b.n	9b5a <_usb_d_dev_in_next+0x1ea>
			return;
    9b58:	bf00      	nop
}
    9b5a:	3724      	adds	r7, #36	; 0x24
    9b5c:	46bd      	mov	sp, r7
    9b5e:	bd90      	pop	{r4, r7, pc}
    9b60:	2000337c 	.word	0x2000337c
    9b64:	00009369 	.word	0x00009369
    9b68:	00010ce1 	.word	0x00010ce1
    9b6c:	00009395 	.word	0x00009395
    9b70:	000094dd 	.word	0x000094dd
    9b74:	00008c75 	.word	0x00008c75
    9b78:	200032b4 	.word	0x200032b4
    9b7c:	0000ac99 	.word	0x0000ac99
    9b80:	00008c49 	.word	0x00008c49
    9b84:	00009595 	.word	0x00009595

00009b88 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9b88:	b590      	push	{r4, r7, lr}
    9b8a:	b08b      	sub	sp, #44	; 0x2c
    9b8c:	af00      	add	r7, sp, #0
    9b8e:	6078      	str	r0, [r7, #4]
    9b90:	460b      	mov	r3, r1
    9b92:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9b94:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9b98:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    9b9a:	687b      	ldr	r3, [r7, #4]
    9b9c:	7c9b      	ldrb	r3, [r3, #18]
    9b9e:	f003 030f 	and.w	r3, r3, #15
    9ba2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9ba4:	7ffb      	ldrb	r3, [r7, #31]
    9ba6:	015b      	lsls	r3, r3, #5
    9ba8:	4a94      	ldr	r2, [pc, #592]	; (9dfc <_usb_d_dev_out_next+0x274>)
    9baa:	4413      	add	r3, r2
    9bac:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9bae:	78fb      	ldrb	r3, [r7, #3]
    9bb0:	2b00      	cmp	r3, #0
    9bb2:	d005      	beq.n	9bc0 <_usb_d_dev_out_next+0x38>
    9bb4:	69bb      	ldr	r3, [r7, #24]
    9bb6:	685b      	ldr	r3, [r3, #4]
    9bb8:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9bbc:	b29b      	uxth	r3, r3
    9bbe:	e000      	b.n	9bc2 <_usb_d_dev_out_next+0x3a>
    9bc0:	2300      	movs	r3, #0
    9bc2:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9bc4:	78fb      	ldrb	r3, [r7, #3]
    9bc6:	2b00      	cmp	r3, #0
    9bc8:	d005      	beq.n	9bd6 <_usb_d_dev_out_next+0x4e>
    9bca:	69bb      	ldr	r3, [r7, #24]
    9bcc:	685b      	ldr	r3, [r3, #4]
    9bce:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9bd2:	b29b      	uxth	r3, r3
    9bd4:	e000      	b.n	9bd8 <_usb_d_dev_out_next+0x50>
    9bd6:	2300      	movs	r3, #0
    9bd8:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9bda:	687b      	ldr	r3, [r7, #4]
    9bdc:	8a1b      	ldrh	r3, [r3, #16]
    9bde:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9be2:	4293      	cmp	r3, r2
    9be4:	d004      	beq.n	9bf0 <_usb_d_dev_out_next+0x68>
    9be6:	687b      	ldr	r3, [r7, #4]
    9be8:	8a1b      	ldrh	r3, [r3, #16]
    9bea:	3b01      	subs	r3, #1
    9bec:	b29b      	uxth	r3, r3
    9bee:	e001      	b.n	9bf4 <_usb_d_dev_out_next+0x6c>
    9bf0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9bf4:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9bf6:	8aba      	ldrh	r2, [r7, #20]
    9bf8:	8a7b      	ldrh	r3, [r7, #18]
    9bfa:	4013      	ands	r3, r2
    9bfc:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9bfe:	687b      	ldr	r3, [r7, #4]
    9c00:	7cdb      	ldrb	r3, [r3, #19]
    9c02:	f003 0307 	and.w	r3, r3, #7
    9c06:	b2db      	uxtb	r3, r3
    9c08:	2b01      	cmp	r3, #1
    9c0a:	bf0c      	ite	eq
    9c0c:	2301      	moveq	r3, #1
    9c0e:	2300      	movne	r3, #0
    9c10:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9c12:	78fb      	ldrb	r3, [r7, #3]
    9c14:	2b00      	cmp	r3, #0
    9c16:	d004      	beq.n	9c22 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9c18:	7ffb      	ldrb	r3, [r7, #31]
    9c1a:	2100      	movs	r1, #0
    9c1c:	4618      	mov	r0, r3
    9c1e:	4b78      	ldr	r3, [pc, #480]	; (9e00 <_usb_d_dev_out_next+0x278>)
    9c20:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9c22:	687b      	ldr	r3, [r7, #4]
    9c24:	7cdb      	ldrb	r3, [r3, #19]
    9c26:	f003 0320 	and.w	r3, r3, #32
    9c2a:	b2db      	uxtb	r3, r3
    9c2c:	2b00      	cmp	r3, #0
    9c2e:	d01c      	beq.n	9c6a <_usb_d_dev_out_next+0xe2>
    9c30:	687b      	ldr	r3, [r7, #4]
    9c32:	685b      	ldr	r3, [r3, #4]
    9c34:	2b00      	cmp	r3, #0
    9c36:	d018      	beq.n	9c6a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9c38:	687b      	ldr	r3, [r7, #4]
    9c3a:	685b      	ldr	r3, [r3, #4]
    9c3c:	b29a      	uxth	r2, r3
    9c3e:	687b      	ldr	r3, [r7, #4]
    9c40:	689b      	ldr	r3, [r3, #8]
    9c42:	b29b      	uxth	r3, r3
    9c44:	1ad3      	subs	r3, r2, r3
    9c46:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9c48:	687b      	ldr	r3, [r7, #4]
    9c4a:	681a      	ldr	r2, [r3, #0]
    9c4c:	687b      	ldr	r3, [r7, #4]
    9c4e:	689b      	ldr	r3, [r3, #8]
    9c50:	18d0      	adds	r0, r2, r3
    9c52:	687b      	ldr	r3, [r7, #4]
    9c54:	68d9      	ldr	r1, [r3, #12]
    9c56:	89ba      	ldrh	r2, [r7, #12]
    9c58:	8a3b      	ldrh	r3, [r7, #16]
    9c5a:	429a      	cmp	r2, r3
    9c5c:	d901      	bls.n	9c62 <_usb_d_dev_out_next+0xda>
    9c5e:	8a3b      	ldrh	r3, [r7, #16]
    9c60:	e000      	b.n	9c64 <_usb_d_dev_out_next+0xdc>
    9c62:	89bb      	ldrh	r3, [r7, #12]
    9c64:	461a      	mov	r2, r3
    9c66:	4b67      	ldr	r3, [pc, #412]	; (9e04 <_usb_d_dev_out_next+0x27c>)
    9c68:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    9c6a:	687b      	ldr	r3, [r7, #4]
    9c6c:	685b      	ldr	r3, [r3, #4]
    9c6e:	2b00      	cmp	r3, #0
    9c70:	d121      	bne.n	9cb6 <_usb_d_dev_out_next+0x12e>
    9c72:	687b      	ldr	r3, [r7, #4]
    9c74:	7cdb      	ldrb	r3, [r3, #19]
    9c76:	f003 0310 	and.w	r3, r3, #16
    9c7a:	b2db      	uxtb	r3, r3
    9c7c:	2b00      	cmp	r3, #0
    9c7e:	d01a      	beq.n	9cb6 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9c80:	687a      	ldr	r2, [r7, #4]
    9c82:	7cd3      	ldrb	r3, [r2, #19]
    9c84:	f36f 1304 	bfc	r3, #4, #1
    9c88:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    9c8a:	687a      	ldr	r2, [r7, #4]
    9c8c:	7cd3      	ldrb	r3, [r2, #19]
    9c8e:	f043 0320 	orr.w	r3, r3, #32
    9c92:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9c94:	687b      	ldr	r3, [r7, #4]
    9c96:	68db      	ldr	r3, [r3, #12]
    9c98:	461a      	mov	r2, r3
    9c9a:	7ffb      	ldrb	r3, [r7, #31]
    9c9c:	2100      	movs	r1, #0
    9c9e:	4618      	mov	r0, r3
    9ca0:	4b59      	ldr	r3, [pc, #356]	; (9e08 <_usb_d_dev_out_next+0x280>)
    9ca2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9ca4:	687b      	ldr	r3, [r7, #4]
    9ca6:	8a1b      	ldrh	r3, [r3, #16]
    9ca8:	461a      	mov	r2, r3
    9caa:	7ff8      	ldrb	r0, [r7, #31]
    9cac:	2300      	movs	r3, #0
    9cae:	2100      	movs	r1, #0
    9cb0:	4c56      	ldr	r4, [pc, #344]	; (9e0c <_usb_d_dev_out_next+0x284>)
    9cb2:	47a0      	blx	r4
		goto _out_rx_exec;
    9cb4:	e090      	b.n	9dd8 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9cb6:	78fb      	ldrb	r3, [r7, #3]
    9cb8:	2b00      	cmp	r3, #0
    9cba:	d010      	beq.n	9cde <_usb_d_dev_out_next+0x156>
    9cbc:	687b      	ldr	r3, [r7, #4]
    9cbe:	8a1b      	ldrh	r3, [r3, #16]
    9cc0:	8a3a      	ldrh	r2, [r7, #16]
    9cc2:	429a      	cmp	r2, r3
    9cc4:	d20b      	bcs.n	9cde <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    9cc6:	687a      	ldr	r2, [r7, #4]
    9cc8:	7cd3      	ldrb	r3, [r2, #19]
    9cca:	f36f 1304 	bfc	r3, #4, #1
    9cce:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9cd0:	687b      	ldr	r3, [r7, #4]
    9cd2:	689a      	ldr	r2, [r3, #8]
    9cd4:	8abb      	ldrh	r3, [r7, #20]
    9cd6:	441a      	add	r2, r3
    9cd8:	687b      	ldr	r3, [r7, #4]
    9cda:	609a      	str	r2, [r3, #8]
    9cdc:	e05c      	b.n	9d98 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    9cde:	687b      	ldr	r3, [r7, #4]
    9ce0:	689a      	ldr	r2, [r3, #8]
    9ce2:	8afb      	ldrh	r3, [r7, #22]
    9ce4:	441a      	add	r2, r3
    9ce6:	687b      	ldr	r3, [r7, #4]
    9ce8:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    9cea:	687b      	ldr	r3, [r7, #4]
    9cec:	689a      	ldr	r2, [r3, #8]
    9cee:	687b      	ldr	r3, [r7, #4]
    9cf0:	685b      	ldr	r3, [r3, #4]
    9cf2:	429a      	cmp	r2, r3
    9cf4:	d250      	bcs.n	9d98 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9cf6:	687b      	ldr	r3, [r7, #4]
    9cf8:	685b      	ldr	r3, [r3, #4]
    9cfa:	b29a      	uxth	r2, r3
    9cfc:	687b      	ldr	r3, [r7, #4]
    9cfe:	689b      	ldr	r3, [r3, #8]
    9d00:	b29b      	uxth	r3, r3
    9d02:	1ad3      	subs	r3, r2, r3
    9d04:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9d06:	687b      	ldr	r3, [r7, #4]
    9d08:	7cdb      	ldrb	r3, [r3, #19]
    9d0a:	f003 0320 	and.w	r3, r3, #32
    9d0e:	b2db      	uxtb	r3, r3
    9d10:	2b00      	cmp	r3, #0
    9d12:	d010      	beq.n	9d36 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9d14:	687b      	ldr	r3, [r7, #4]
    9d16:	8a1b      	ldrh	r3, [r3, #16]
    9d18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9d1a:	429a      	cmp	r2, r3
    9d1c:	d902      	bls.n	9d24 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9d1e:	687b      	ldr	r3, [r7, #4]
    9d20:	8a1b      	ldrh	r3, [r3, #16]
    9d22:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9d24:	687b      	ldr	r3, [r7, #4]
    9d26:	68db      	ldr	r3, [r3, #12]
    9d28:	461a      	mov	r2, r3
    9d2a:	7ffb      	ldrb	r3, [r7, #31]
    9d2c:	2100      	movs	r1, #0
    9d2e:	4618      	mov	r0, r3
    9d30:	4b35      	ldr	r3, [pc, #212]	; (9e08 <_usb_d_dev_out_next+0x280>)
    9d32:	4798      	blx	r3
    9d34:	e029      	b.n	9d8a <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9d36:	687b      	ldr	r3, [r7, #4]
    9d38:	8a1b      	ldrh	r3, [r3, #16]
    9d3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9d3c:	429a      	cmp	r2, r3
    9d3e:	d90f      	bls.n	9d60 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9d40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9d46:	d903      	bls.n	9d50 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9d4c:	84fb      	strh	r3, [r7, #38]	; 0x26
    9d4e:	e011      	b.n	9d74 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9d50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9d52:	8a7b      	ldrh	r3, [r7, #18]
    9d54:	4013      	ands	r3, r2
    9d56:	b29b      	uxth	r3, r3
    9d58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9d5a:	1ad3      	subs	r3, r2, r3
    9d5c:	84fb      	strh	r3, [r7, #38]	; 0x26
    9d5e:	e009      	b.n	9d74 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9d60:	687b      	ldr	r3, [r7, #4]
    9d62:	8a1b      	ldrh	r3, [r3, #16]
    9d64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9d66:	429a      	cmp	r2, r3
    9d68:	d204      	bcs.n	9d74 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9d6a:	687a      	ldr	r2, [r7, #4]
    9d6c:	7cd3      	ldrb	r3, [r2, #19]
    9d6e:	f043 0320 	orr.w	r3, r3, #32
    9d72:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9d74:	687b      	ldr	r3, [r7, #4]
    9d76:	681a      	ldr	r2, [r3, #0]
    9d78:	687b      	ldr	r3, [r7, #4]
    9d7a:	689b      	ldr	r3, [r3, #8]
    9d7c:	4413      	add	r3, r2
    9d7e:	461a      	mov	r2, r3
    9d80:	7ffb      	ldrb	r3, [r7, #31]
    9d82:	2100      	movs	r1, #0
    9d84:	4618      	mov	r0, r3
    9d86:	4b20      	ldr	r3, [pc, #128]	; (9e08 <_usb_d_dev_out_next+0x280>)
    9d88:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9d8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9d8c:	7ff8      	ldrb	r0, [r7, #31]
    9d8e:	2300      	movs	r3, #0
    9d90:	2100      	movs	r1, #0
    9d92:	4c1e      	ldr	r4, [pc, #120]	; (9e0c <_usb_d_dev_out_next+0x284>)
    9d94:	47a0      	blx	r4
			goto _out_rx_exec;
    9d96:	e01f      	b.n	9dd8 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9d98:	7bfb      	ldrb	r3, [r7, #15]
    9d9a:	2b00      	cmp	r3, #0
    9d9c:	d006      	beq.n	9dac <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9d9e:	7ffb      	ldrb	r3, [r7, #31]
    9da0:	222d      	movs	r2, #45	; 0x2d
    9da2:	4619      	mov	r1, r3
    9da4:	6a38      	ldr	r0, [r7, #32]
    9da6:	4b1a      	ldr	r3, [pc, #104]	; (9e10 <_usb_d_dev_out_next+0x288>)
    9da8:	4798      	blx	r3
    9daa:	e005      	b.n	9db8 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9dac:	7ffb      	ldrb	r3, [r7, #31]
    9dae:	2225      	movs	r2, #37	; 0x25
    9db0:	4619      	mov	r1, r3
    9db2:	6a38      	ldr	r0, [r7, #32]
    9db4:	4b16      	ldr	r3, [pc, #88]	; (9e10 <_usb_d_dev_out_next+0x288>)
    9db6:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9db8:	7ffb      	ldrb	r3, [r7, #31]
    9dba:	2b00      	cmp	r3, #0
    9dbc:	d107      	bne.n	9dce <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9dbe:	687b      	ldr	r3, [r7, #4]
    9dc0:	68db      	ldr	r3, [r3, #12]
    9dc2:	461a      	mov	r2, r3
    9dc4:	7ffb      	ldrb	r3, [r7, #31]
    9dc6:	2100      	movs	r1, #0
    9dc8:	4618      	mov	r0, r3
    9dca:	4b0f      	ldr	r3, [pc, #60]	; (9e08 <_usb_d_dev_out_next+0x280>)
    9dcc:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9dce:	2100      	movs	r1, #0
    9dd0:	6878      	ldr	r0, [r7, #4]
    9dd2:	4b10      	ldr	r3, [pc, #64]	; (9e14 <_usb_d_dev_out_next+0x28c>)
    9dd4:	4798      	blx	r3
	return;
    9dd6:	e031      	b.n	9e3c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9dd8:	78fb      	ldrb	r3, [r7, #3]
    9dda:	f083 0301 	eor.w	r3, r3, #1
    9dde:	b2db      	uxtb	r3, r3
    9de0:	2b00      	cmp	r3, #0
    9de2:	d025      	beq.n	9e30 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9de4:	7bfb      	ldrb	r3, [r7, #15]
    9de6:	2b00      	cmp	r3, #0
    9de8:	d018      	beq.n	9e1c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    9dea:	7ffb      	ldrb	r3, [r7, #31]
    9dec:	2101      	movs	r1, #1
    9dee:	4618      	mov	r0, r3
    9df0:	4b09      	ldr	r3, [pc, #36]	; (9e18 <_usb_d_dev_out_next+0x290>)
    9df2:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9df4:	232d      	movs	r3, #45	; 0x2d
    9df6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9dfa:	e012      	b.n	9e22 <_usb_d_dev_out_next+0x29a>
    9dfc:	2000337c 	.word	0x2000337c
    9e00:	00009369 	.word	0x00009369
    9e04:	00010ce1 	.word	0x00010ce1
    9e08:	00009395 	.word	0x00009395
    9e0c:	0000951d 	.word	0x0000951d
    9e10:	00008c75 	.word	0x00008c75
    9e14:	0000ac99 	.word	0x0000ac99
    9e18:	0000955d 	.word	0x0000955d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9e1c:	2325      	movs	r3, #37	; 0x25
    9e1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9e22:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    9e26:	7ffb      	ldrb	r3, [r7, #31]
    9e28:	4619      	mov	r1, r3
    9e2a:	6a38      	ldr	r0, [r7, #32]
    9e2c:	4b05      	ldr	r3, [pc, #20]	; (9e44 <_usb_d_dev_out_next+0x2bc>)
    9e2e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9e30:	7ffb      	ldrb	r3, [r7, #31]
    9e32:	2201      	movs	r2, #1
    9e34:	2100      	movs	r1, #0
    9e36:	4618      	mov	r0, r3
    9e38:	4b03      	ldr	r3, [pc, #12]	; (9e48 <_usb_d_dev_out_next+0x2c0>)
    9e3a:	4798      	blx	r3
}
    9e3c:	372c      	adds	r7, #44	; 0x2c
    9e3e:	46bd      	mov	sp, r7
    9e40:	bd90      	pop	{r4, r7, pc}
    9e42:	bf00      	nop
    9e44:	00008c49 	.word	0x00008c49
    9e48:	000095ed 	.word	0x000095ed

00009e4c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9e4c:	b580      	push	{r7, lr}
    9e4e:	b084      	sub	sp, #16
    9e50:	af00      	add	r7, sp, #0
    9e52:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9e54:	687b      	ldr	r3, [r7, #4]
    9e56:	7c9b      	ldrb	r3, [r3, #18]
    9e58:	f003 030f 	and.w	r3, r3, #15
    9e5c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9e5e:	687b      	ldr	r3, [r7, #4]
    9e60:	7cdb      	ldrb	r3, [r3, #19]
    9e62:	f003 0307 	and.w	r3, r3, #7
    9e66:	b2db      	uxtb	r3, r3
    9e68:	2b01      	cmp	r3, #1
    9e6a:	bf0c      	ite	eq
    9e6c:	2301      	moveq	r3, #1
    9e6e:	2300      	movne	r3, #0
    9e70:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9e72:	7bbb      	ldrb	r3, [r7, #14]
    9e74:	f083 0301 	eor.w	r3, r3, #1
    9e78:	b2db      	uxtb	r3, r3
    9e7a:	2b00      	cmp	r3, #0
    9e7c:	d008      	beq.n	9e90 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9e7e:	7bfb      	ldrb	r3, [r7, #15]
    9e80:	4618      	mov	r0, r3
    9e82:	4b20      	ldr	r3, [pc, #128]	; (9f04 <_usb_d_dev_handle_setup+0xb8>)
    9e84:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9e86:	7bfb      	ldrb	r3, [r7, #15]
    9e88:	4618      	mov	r0, r3
    9e8a:	4b1f      	ldr	r3, [pc, #124]	; (9f08 <_usb_d_dev_handle_setup+0xbc>)
    9e8c:	4798      	blx	r3
		return;
    9e8e:	e036      	b.n	9efe <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	7cdb      	ldrb	r3, [r3, #19]
    9e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e98:	b2db      	uxtb	r3, r3
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	d010      	beq.n	9ec0 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9e9e:	687a      	ldr	r2, [r7, #4]
    9ea0:	7cd3      	ldrb	r3, [r2, #19]
    9ea2:	f36f 1386 	bfc	r3, #6, #1
    9ea6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9ea8:	7bfb      	ldrb	r3, [r7, #15]
    9eaa:	2200      	movs	r2, #0
    9eac:	2101      	movs	r1, #1
    9eae:	4618      	mov	r0, r3
    9eb0:	4b16      	ldr	r3, [pc, #88]	; (9f0c <_usb_d_dev_handle_setup+0xc0>)
    9eb2:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9eb4:	7bfb      	ldrb	r3, [r7, #15]
    9eb6:	2200      	movs	r2, #0
    9eb8:	2100      	movs	r1, #0
    9eba:	4618      	mov	r0, r3
    9ebc:	4b14      	ldr	r3, [pc, #80]	; (9f10 <_usb_d_dev_handle_setup+0xc4>)
    9ebe:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9ec0:	687a      	ldr	r2, [r7, #4]
    9ec2:	7cd3      	ldrb	r3, [r2, #19]
    9ec4:	f36f 03c3 	bfc	r3, #3, #1
    9ec8:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9eca:	7bfb      	ldrb	r3, [r7, #15]
    9ecc:	2100      	movs	r1, #0
    9ece:	4618      	mov	r0, r3
    9ed0:	4b10      	ldr	r3, [pc, #64]	; (9f14 <_usb_d_dev_handle_setup+0xc8>)
    9ed2:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9ed4:	7bfb      	ldrb	r3, [r7, #15]
    9ed6:	2101      	movs	r1, #1
    9ed8:	4618      	mov	r0, r3
    9eda:	4b0e      	ldr	r3, [pc, #56]	; (9f14 <_usb_d_dev_handle_setup+0xc8>)
    9edc:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9ede:	7bfb      	ldrb	r3, [r7, #15]
    9ee0:	216f      	movs	r1, #111	; 0x6f
    9ee2:	4618      	mov	r0, r3
    9ee4:	4b0c      	ldr	r3, [pc, #48]	; (9f18 <_usb_d_dev_handle_setup+0xcc>)
    9ee6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9ee8:	7bfb      	ldrb	r3, [r7, #15]
    9eea:	216f      	movs	r1, #111	; 0x6f
    9eec:	4618      	mov	r0, r3
    9eee:	4b0b      	ldr	r3, [pc, #44]	; (9f1c <_usb_d_dev_handle_setup+0xd0>)
    9ef0:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    9ef2:	4b0b      	ldr	r3, [pc, #44]	; (9f20 <_usb_d_dev_handle_setup+0xd4>)
    9ef4:	689b      	ldr	r3, [r3, #8]
    9ef6:	687a      	ldr	r2, [r7, #4]
    9ef8:	7c92      	ldrb	r2, [r2, #18]
    9efa:	4610      	mov	r0, r2
    9efc:	4798      	blx	r3
}
    9efe:	3710      	adds	r7, #16
    9f00:	46bd      	mov	sp, r7
    9f02:	bd80      	pop	{r7, pc}
    9f04:	000092f1 	.word	0x000092f1
    9f08:	0000929d 	.word	0x0000929d
    9f0c:	00009595 	.word	0x00009595
    9f10:	000095ed 	.word	0x000095ed
    9f14:	0000955d 	.word	0x0000955d
    9f18:	0000909d 	.word	0x0000909d
    9f1c:	000090ed 	.word	0x000090ed
    9f20:	200032b4 	.word	0x200032b4

00009f24 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9f24:	b580      	push	{r7, lr}
    9f26:	b084      	sub	sp, #16
    9f28:	af00      	add	r7, sp, #0
    9f2a:	6078      	str	r0, [r7, #4]
    9f2c:	460b      	mov	r3, r1
    9f2e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9f30:	687b      	ldr	r3, [r7, #4]
    9f32:	7c9b      	ldrb	r3, [r3, #18]
    9f34:	f003 030f 	and.w	r3, r3, #15
    9f38:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9f3a:	78f9      	ldrb	r1, [r7, #3]
    9f3c:	7bfb      	ldrb	r3, [r7, #15]
    9f3e:	2200      	movs	r2, #0
    9f40:	4618      	mov	r0, r3
    9f42:	4b07      	ldr	r3, [pc, #28]	; (9f60 <_usb_d_dev_handle_stall+0x3c>)
    9f44:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9f46:	4b07      	ldr	r3, [pc, #28]	; (9f64 <_usb_d_dev_handle_stall+0x40>)
    9f48:	691b      	ldr	r3, [r3, #16]
    9f4a:	687a      	ldr	r2, [r7, #4]
    9f4c:	7c90      	ldrb	r0, [r2, #18]
    9f4e:	687a      	ldr	r2, [r7, #4]
    9f50:	6892      	ldr	r2, [r2, #8]
    9f52:	2101      	movs	r1, #1
    9f54:	4798      	blx	r3
}
    9f56:	bf00      	nop
    9f58:	3710      	adds	r7, #16
    9f5a:	46bd      	mov	sp, r7
    9f5c:	bd80      	pop	{r7, pc}
    9f5e:	bf00      	nop
    9f60:	00009251 	.word	0x00009251
    9f64:	200032b4 	.word	0x200032b4

00009f68 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9f68:	b580      	push	{r7, lr}
    9f6a:	b088      	sub	sp, #32
    9f6c:	af00      	add	r7, sp, #0
    9f6e:	6078      	str	r0, [r7, #4]
    9f70:	460b      	mov	r3, r1
    9f72:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9f74:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9f78:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9f7a:	687b      	ldr	r3, [r7, #4]
    9f7c:	7c9b      	ldrb	r3, [r3, #18]
    9f7e:	f003 030f 	and.w	r3, r3, #15
    9f82:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9f84:	4b61      	ldr	r3, [pc, #388]	; (a10c <_usb_d_dev_handle_trfail+0x1a4>)
    9f86:	881b      	ldrh	r3, [r3, #0]
    9f88:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9f8a:	7efb      	ldrb	r3, [r7, #27]
    9f8c:	015b      	lsls	r3, r3, #5
    9f8e:	4a60      	ldr	r2, [pc, #384]	; (a110 <_usb_d_dev_handle_trfail+0x1a8>)
    9f90:	4413      	add	r3, r2
    9f92:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9f94:	78fb      	ldrb	r3, [r7, #3]
    9f96:	2b00      	cmp	r3, #0
    9f98:	d006      	beq.n	9fa8 <_usb_d_dev_handle_trfail+0x40>
    9f9a:	7efb      	ldrb	r3, [r7, #27]
    9f9c:	4619      	mov	r1, r3
    9f9e:	69f8      	ldr	r0, [r7, #28]
    9fa0:	4b5c      	ldr	r3, [pc, #368]	; (a114 <_usb_d_dev_handle_trfail+0x1ac>)
    9fa2:	4798      	blx	r3
    9fa4:	4603      	mov	r3, r0
    9fa6:	e005      	b.n	9fb4 <_usb_d_dev_handle_trfail+0x4c>
    9fa8:	7efb      	ldrb	r3, [r7, #27]
    9faa:	4619      	mov	r1, r3
    9fac:	69f8      	ldr	r0, [r7, #28]
    9fae:	4b5a      	ldr	r3, [pc, #360]	; (a118 <_usb_d_dev_handle_trfail+0x1b0>)
    9fb0:	4798      	blx	r3
    9fb2:	4603      	mov	r3, r0
    9fb4:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9fb6:	687b      	ldr	r3, [r7, #4]
    9fb8:	7cdb      	ldrb	r3, [r3, #19]
    9fba:	f003 0307 	and.w	r3, r3, #7
    9fbe:	b2db      	uxtb	r3, r3
    9fc0:	2b01      	cmp	r3, #1
    9fc2:	bf0c      	ite	eq
    9fc4:	2301      	moveq	r3, #1
    9fc6:	2300      	movne	r3, #0
    9fc8:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9fca:	78fb      	ldrb	r3, [r7, #3]
    9fcc:	011b      	lsls	r3, r3, #4
    9fce:	697a      	ldr	r2, [r7, #20]
    9fd0:	4413      	add	r3, r2
    9fd2:	7a9b      	ldrb	r3, [r3, #10]
    9fd4:	b2db      	uxtb	r3, r3
    9fd6:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9fd8:	7cfb      	ldrb	r3, [r7, #19]
    9fda:	2b02      	cmp	r3, #2
    9fdc:	d12f      	bne.n	a03e <_usb_d_dev_handle_trfail+0xd6>
    9fde:	7b3b      	ldrb	r3, [r7, #12]
    9fe0:	f003 0301 	and.w	r3, r3, #1
    9fe4:	b2db      	uxtb	r3, r3
    9fe6:	2b00      	cmp	r3, #0
    9fe8:	d029      	beq.n	a03e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9fea:	78fb      	ldrb	r3, [r7, #3]
    9fec:	011b      	lsls	r3, r3, #4
    9fee:	697a      	ldr	r2, [r7, #20]
    9ff0:	441a      	add	r2, r3
    9ff2:	7a93      	ldrb	r3, [r2, #10]
    9ff4:	f36f 0300 	bfc	r3, #0, #1
    9ff8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9ffa:	78fb      	ldrb	r3, [r7, #3]
    9ffc:	f107 0220 	add.w	r2, r7, #32
    a000:	4413      	add	r3, r2
    a002:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a006:	7efb      	ldrb	r3, [r7, #27]
    a008:	4619      	mov	r1, r3
    a00a:	69f8      	ldr	r0, [r7, #28]
    a00c:	4b43      	ldr	r3, [pc, #268]	; (a11c <_usb_d_dev_handle_trfail+0x1b4>)
    a00e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a010:	78fb      	ldrb	r3, [r7, #3]
    a012:	f107 0220 	add.w	r2, r7, #32
    a016:	4413      	add	r3, r2
    a018:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a01c:	7efb      	ldrb	r3, [r7, #27]
    a01e:	4619      	mov	r1, r3
    a020:	69f8      	ldr	r0, [r7, #28]
    a022:	4b3f      	ldr	r3, [pc, #252]	; (a120 <_usb_d_dev_handle_trfail+0x1b8>)
    a024:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a026:	78fb      	ldrb	r3, [r7, #3]
    a028:	2b00      	cmp	r3, #0
    a02a:	bf14      	ite	ne
    a02c:	2301      	movne	r3, #1
    a02e:	2300      	moveq	r3, #0
    a030:	b2db      	uxtb	r3, r3
    a032:	2204      	movs	r2, #4
    a034:	4619      	mov	r1, r3
    a036:	6878      	ldr	r0, [r7, #4]
    a038:	4b3a      	ldr	r3, [pc, #232]	; (a124 <_usb_d_dev_handle_trfail+0x1bc>)
    a03a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a03c:	e062      	b.n	a104 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a03e:	7b3b      	ldrb	r3, [r7, #12]
    a040:	f003 0302 	and.w	r3, r3, #2
    a044:	b2db      	uxtb	r3, r3
    a046:	2b00      	cmp	r3, #0
    a048:	d040      	beq.n	a0cc <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a04a:	78fb      	ldrb	r3, [r7, #3]
    a04c:	011b      	lsls	r3, r3, #4
    a04e:	697a      	ldr	r2, [r7, #20]
    a050:	441a      	add	r2, r3
    a052:	7a93      	ldrb	r3, [r2, #10]
    a054:	f36f 0341 	bfc	r3, #1, #1
    a058:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a05a:	78fb      	ldrb	r3, [r7, #3]
    a05c:	f107 0220 	add.w	r2, r7, #32
    a060:	4413      	add	r3, r2
    a062:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a066:	7efb      	ldrb	r3, [r7, #27]
    a068:	4619      	mov	r1, r3
    a06a:	69f8      	ldr	r0, [r7, #28]
    a06c:	4b2b      	ldr	r3, [pc, #172]	; (a11c <_usb_d_dev_handle_trfail+0x1b4>)
    a06e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a070:	78fb      	ldrb	r3, [r7, #3]
    a072:	f107 0220 	add.w	r2, r7, #32
    a076:	4413      	add	r3, r2
    a078:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a07c:	7efb      	ldrb	r3, [r7, #27]
    a07e:	4619      	mov	r1, r3
    a080:	69f8      	ldr	r0, [r7, #28]
    a082:	4b27      	ldr	r3, [pc, #156]	; (a120 <_usb_d_dev_handle_trfail+0x1b8>)
    a084:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a086:	7cbb      	ldrb	r3, [r7, #18]
    a088:	2b00      	cmp	r3, #0
    a08a:	d03b      	beq.n	a104 <_usb_d_dev_handle_trfail+0x19c>
    a08c:	687b      	ldr	r3, [r7, #4]
    a08e:	7cdb      	ldrb	r3, [r3, #19]
    a090:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a094:	b2db      	uxtb	r3, r3
    a096:	2b00      	cmp	r3, #0
    a098:	d034      	beq.n	a104 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a09a:	687b      	ldr	r3, [r7, #4]
    a09c:	7cdb      	ldrb	r3, [r3, #19]
    a09e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a0a2:	b2db      	uxtb	r3, r3
    a0a4:	461a      	mov	r2, r3
    a0a6:	78fb      	ldrb	r3, [r7, #3]
    a0a8:	4293      	cmp	r3, r2
    a0aa:	d02b      	beq.n	a104 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a0ac:	687b      	ldr	r3, [r7, #4]
    a0ae:	7cdb      	ldrb	r3, [r3, #19]
    a0b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a0b4:	b2db      	uxtb	r3, r3
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	bf14      	ite	ne
    a0ba:	2301      	movne	r3, #1
    a0bc:	2300      	moveq	r3, #0
    a0be:	b2db      	uxtb	r3, r3
    a0c0:	2200      	movs	r2, #0
    a0c2:	4619      	mov	r1, r3
    a0c4:	6878      	ldr	r0, [r7, #4]
    a0c6:	4b17      	ldr	r3, [pc, #92]	; (a124 <_usb_d_dev_handle_trfail+0x1bc>)
    a0c8:	4798      	blx	r3
}
    a0ca:	e01b      	b.n	a104 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a0cc:	78fa      	ldrb	r2, [r7, #3]
    a0ce:	7efb      	ldrb	r3, [r7, #27]
    a0d0:	4611      	mov	r1, r2
    a0d2:	4618      	mov	r0, r3
    a0d4:	4b14      	ldr	r3, [pc, #80]	; (a128 <_usb_d_dev_handle_trfail+0x1c0>)
    a0d6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a0d8:	78fb      	ldrb	r3, [r7, #3]
    a0da:	f107 0220 	add.w	r2, r7, #32
    a0de:	4413      	add	r3, r2
    a0e0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a0e4:	7efb      	ldrb	r3, [r7, #27]
    a0e6:	4619      	mov	r1, r3
    a0e8:	69f8      	ldr	r0, [r7, #28]
    a0ea:	4b0c      	ldr	r3, [pc, #48]	; (a11c <_usb_d_dev_handle_trfail+0x1b4>)
    a0ec:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a0ee:	78fb      	ldrb	r3, [r7, #3]
    a0f0:	f107 0220 	add.w	r2, r7, #32
    a0f4:	4413      	add	r3, r2
    a0f6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a0fa:	7efb      	ldrb	r3, [r7, #27]
    a0fc:	4619      	mov	r1, r3
    a0fe:	69f8      	ldr	r0, [r7, #28]
    a100:	4b07      	ldr	r3, [pc, #28]	; (a120 <_usb_d_dev_handle_trfail+0x1b8>)
    a102:	4798      	blx	r3
}
    a104:	bf00      	nop
    a106:	3720      	adds	r7, #32
    a108:	46bd      	mov	sp, r7
    a10a:	bd80      	pop	{r7, pc}
    a10c:	00011670 	.word	0x00011670
    a110:	2000337c 	.word	0x2000337c
    a114:	00008cd1 	.word	0x00008cd1
    a118:	00008ca1 	.word	0x00008ca1
    a11c:	00008b75 	.word	0x00008b75
    a120:	00008c75 	.word	0x00008c75
    a124:	0000ace1 	.word	0x0000ace1
    a128:	0000955d 	.word	0x0000955d

0000a12c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a12c:	b580      	push	{r7, lr}
    a12e:	b082      	sub	sp, #8
    a130:	af00      	add	r7, sp, #0
    a132:	6078      	str	r0, [r7, #4]
    a134:	460b      	mov	r3, r1
    a136:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a138:	78fb      	ldrb	r3, [r7, #3]
    a13a:	f003 0310 	and.w	r3, r3, #16
    a13e:	2b00      	cmp	r3, #0
    a140:	d003      	beq.n	a14a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a142:	6878      	ldr	r0, [r7, #4]
    a144:	4b0c      	ldr	r3, [pc, #48]	; (a178 <_usb_d_dev_trans_setup_isr+0x4c>)
    a146:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a148:	e012      	b.n	a170 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a14a:	78fb      	ldrb	r3, [r7, #3]
    a14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a150:	2b00      	cmp	r3, #0
    a152:	d004      	beq.n	a15e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a154:	2101      	movs	r1, #1
    a156:	6878      	ldr	r0, [r7, #4]
    a158:	4b08      	ldr	r3, [pc, #32]	; (a17c <_usb_d_dev_trans_setup_isr+0x50>)
    a15a:	4798      	blx	r3
}
    a15c:	e008      	b.n	a170 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a15e:	78fb      	ldrb	r3, [r7, #3]
    a160:	f003 0320 	and.w	r3, r3, #32
    a164:	2b00      	cmp	r3, #0
    a166:	d003      	beq.n	a170 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a168:	2100      	movs	r1, #0
    a16a:	6878      	ldr	r0, [r7, #4]
    a16c:	4b03      	ldr	r3, [pc, #12]	; (a17c <_usb_d_dev_trans_setup_isr+0x50>)
    a16e:	4798      	blx	r3
}
    a170:	bf00      	nop
    a172:	3708      	adds	r7, #8
    a174:	46bd      	mov	sp, r7
    a176:	bd80      	pop	{r7, pc}
    a178:	00009e4d 	.word	0x00009e4d
    a17c:	00009f25 	.word	0x00009f25

0000a180 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a180:	b580      	push	{r7, lr}
    a182:	b082      	sub	sp, #8
    a184:	af00      	add	r7, sp, #0
    a186:	6078      	str	r0, [r7, #4]
    a188:	460b      	mov	r3, r1
    a18a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a18c:	78fb      	ldrb	r3, [r7, #3]
    a18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a192:	2b00      	cmp	r3, #0
    a194:	d004      	beq.n	a1a0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a196:	2101      	movs	r1, #1
    a198:	6878      	ldr	r0, [r7, #4]
    a19a:	4b1a      	ldr	r3, [pc, #104]	; (a204 <_usb_d_dev_trans_in_isr+0x84>)
    a19c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a19e:	e02c      	b.n	a1fa <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a1a0:	78fb      	ldrb	r3, [r7, #3]
    a1a2:	f003 0308 	and.w	r3, r3, #8
    a1a6:	2b00      	cmp	r3, #0
    a1a8:	d004      	beq.n	a1b4 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a1aa:	2101      	movs	r1, #1
    a1ac:	6878      	ldr	r0, [r7, #4]
    a1ae:	4b16      	ldr	r3, [pc, #88]	; (a208 <_usb_d_dev_trans_in_isr+0x88>)
    a1b0:	4798      	blx	r3
}
    a1b2:	e022      	b.n	a1fa <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a1b4:	78fb      	ldrb	r3, [r7, #3]
    a1b6:	f003 0302 	and.w	r3, r3, #2
    a1ba:	2b00      	cmp	r3, #0
    a1bc:	d004      	beq.n	a1c8 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a1be:	2101      	movs	r1, #1
    a1c0:	6878      	ldr	r0, [r7, #4]
    a1c2:	4b12      	ldr	r3, [pc, #72]	; (a20c <_usb_d_dev_trans_in_isr+0x8c>)
    a1c4:	4798      	blx	r3
}
    a1c6:	e018      	b.n	a1fa <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a1c8:	687b      	ldr	r3, [r7, #4]
    a1ca:	7cdb      	ldrb	r3, [r3, #19]
    a1cc:	f003 0307 	and.w	r3, r3, #7
    a1d0:	b2db      	uxtb	r3, r3
    a1d2:	2b01      	cmp	r3, #1
    a1d4:	d111      	bne.n	a1fa <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a1d6:	78fb      	ldrb	r3, [r7, #3]
    a1d8:	f003 0304 	and.w	r3, r3, #4
    a1dc:	2b00      	cmp	r3, #0
    a1de:	d004      	beq.n	a1ea <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a1e0:	2100      	movs	r1, #0
    a1e2:	6878      	ldr	r0, [r7, #4]
    a1e4:	4b08      	ldr	r3, [pc, #32]	; (a208 <_usb_d_dev_trans_in_isr+0x88>)
    a1e6:	4798      	blx	r3
}
    a1e8:	e007      	b.n	a1fa <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a1ea:	78fb      	ldrb	r3, [r7, #3]
    a1ec:	f003 0310 	and.w	r3, r3, #16
    a1f0:	2b00      	cmp	r3, #0
    a1f2:	d002      	beq.n	a1fa <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a1f4:	6878      	ldr	r0, [r7, #4]
    a1f6:	4b06      	ldr	r3, [pc, #24]	; (a210 <_usb_d_dev_trans_in_isr+0x90>)
    a1f8:	4798      	blx	r3
}
    a1fa:	bf00      	nop
    a1fc:	3708      	adds	r7, #8
    a1fe:	46bd      	mov	sp, r7
    a200:	bd80      	pop	{r7, pc}
    a202:	bf00      	nop
    a204:	00009f25 	.word	0x00009f25
    a208:	00009f69 	.word	0x00009f69
    a20c:	00009971 	.word	0x00009971
    a210:	00009e4d 	.word	0x00009e4d

0000a214 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a214:	b580      	push	{r7, lr}
    a216:	b082      	sub	sp, #8
    a218:	af00      	add	r7, sp, #0
    a21a:	6078      	str	r0, [r7, #4]
    a21c:	460b      	mov	r3, r1
    a21e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a220:	78fb      	ldrb	r3, [r7, #3]
    a222:	f003 0320 	and.w	r3, r3, #32
    a226:	2b00      	cmp	r3, #0
    a228:	d004      	beq.n	a234 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a22a:	2100      	movs	r1, #0
    a22c:	6878      	ldr	r0, [r7, #4]
    a22e:	4b1a      	ldr	r3, [pc, #104]	; (a298 <_usb_d_dev_trans_out_isr+0x84>)
    a230:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a232:	e02c      	b.n	a28e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a234:	78fb      	ldrb	r3, [r7, #3]
    a236:	f003 0304 	and.w	r3, r3, #4
    a23a:	2b00      	cmp	r3, #0
    a23c:	d004      	beq.n	a248 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a23e:	2100      	movs	r1, #0
    a240:	6878      	ldr	r0, [r7, #4]
    a242:	4b16      	ldr	r3, [pc, #88]	; (a29c <_usb_d_dev_trans_out_isr+0x88>)
    a244:	4798      	blx	r3
}
    a246:	e022      	b.n	a28e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a248:	78fb      	ldrb	r3, [r7, #3]
    a24a:	f003 0301 	and.w	r3, r3, #1
    a24e:	2b00      	cmp	r3, #0
    a250:	d004      	beq.n	a25c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a252:	2101      	movs	r1, #1
    a254:	6878      	ldr	r0, [r7, #4]
    a256:	4b12      	ldr	r3, [pc, #72]	; (a2a0 <_usb_d_dev_trans_out_isr+0x8c>)
    a258:	4798      	blx	r3
}
    a25a:	e018      	b.n	a28e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a25c:	687b      	ldr	r3, [r7, #4]
    a25e:	7cdb      	ldrb	r3, [r3, #19]
    a260:	f003 0307 	and.w	r3, r3, #7
    a264:	b2db      	uxtb	r3, r3
    a266:	2b01      	cmp	r3, #1
    a268:	d111      	bne.n	a28e <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a26a:	78fb      	ldrb	r3, [r7, #3]
    a26c:	f003 0308 	and.w	r3, r3, #8
    a270:	2b00      	cmp	r3, #0
    a272:	d004      	beq.n	a27e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a274:	2101      	movs	r1, #1
    a276:	6878      	ldr	r0, [r7, #4]
    a278:	4b08      	ldr	r3, [pc, #32]	; (a29c <_usb_d_dev_trans_out_isr+0x88>)
    a27a:	4798      	blx	r3
}
    a27c:	e007      	b.n	a28e <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a27e:	78fb      	ldrb	r3, [r7, #3]
    a280:	f003 0310 	and.w	r3, r3, #16
    a284:	2b00      	cmp	r3, #0
    a286:	d002      	beq.n	a28e <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a288:	6878      	ldr	r0, [r7, #4]
    a28a:	4b06      	ldr	r3, [pc, #24]	; (a2a4 <_usb_d_dev_trans_out_isr+0x90>)
    a28c:	4798      	blx	r3
}
    a28e:	bf00      	nop
    a290:	3708      	adds	r7, #8
    a292:	46bd      	mov	sp, r7
    a294:	bd80      	pop	{r7, pc}
    a296:	bf00      	nop
    a298:	00009f25 	.word	0x00009f25
    a29c:	00009f69 	.word	0x00009f69
    a2a0:	00009b89 	.word	0x00009b89
    a2a4:	00009e4d 	.word	0x00009e4d

0000a2a8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a2a8:	b580      	push	{r7, lr}
    a2aa:	b084      	sub	sp, #16
    a2ac:	af00      	add	r7, sp, #0
    a2ae:	6078      	str	r0, [r7, #4]
    a2b0:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a2b2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a2b6:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a2b8:	683b      	ldr	r3, [r7, #0]
    a2ba:	7c9b      	ldrb	r3, [r3, #18]
    a2bc:	f003 030f 	and.w	r3, r3, #15
    a2c0:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a2c2:	7afb      	ldrb	r3, [r7, #11]
    a2c4:	2201      	movs	r2, #1
    a2c6:	409a      	lsls	r2, r3
    a2c8:	687b      	ldr	r3, [r7, #4]
    a2ca:	4013      	ands	r3, r2
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	d03d      	beq.n	a34c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a2d0:	7afb      	ldrb	r3, [r7, #11]
    a2d2:	68fa      	ldr	r2, [r7, #12]
    a2d4:	3308      	adds	r3, #8
    a2d6:	015b      	lsls	r3, r3, #5
    a2d8:	4413      	add	r3, r2
    a2da:	3307      	adds	r3, #7
    a2dc:	781b      	ldrb	r3, [r3, #0]
    a2de:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a2e0:	7afb      	ldrb	r3, [r7, #11]
    a2e2:	68fa      	ldr	r2, [r7, #12]
    a2e4:	015b      	lsls	r3, r3, #5
    a2e6:	4413      	add	r3, r2
    a2e8:	f203 1309 	addw	r3, r3, #265	; 0x109
    a2ec:	781b      	ldrb	r3, [r3, #0]
    a2ee:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a2f0:	7aba      	ldrb	r2, [r7, #10]
    a2f2:	7a7b      	ldrb	r3, [r7, #9]
    a2f4:	4013      	ands	r3, r2
    a2f6:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a2f8:	7abb      	ldrb	r3, [r7, #10]
    a2fa:	2b00      	cmp	r3, #0
    a2fc:	d027      	beq.n	a34e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a2fe:	683b      	ldr	r3, [r7, #0]
    a300:	7cdb      	ldrb	r3, [r3, #19]
    a302:	f003 0307 	and.w	r3, r3, #7
    a306:	b2db      	uxtb	r3, r3
    a308:	2b01      	cmp	r3, #1
    a30a:	d10c      	bne.n	a326 <_usb_d_dev_handle_eps+0x7e>
    a30c:	683b      	ldr	r3, [r7, #0]
    a30e:	7cdb      	ldrb	r3, [r3, #19]
    a310:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a314:	b2db      	uxtb	r3, r3
    a316:	2b00      	cmp	r3, #0
    a318:	d105      	bne.n	a326 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a31a:	7abb      	ldrb	r3, [r7, #10]
    a31c:	4619      	mov	r1, r3
    a31e:	6838      	ldr	r0, [r7, #0]
    a320:	4b0c      	ldr	r3, [pc, #48]	; (a354 <_usb_d_dev_handle_eps+0xac>)
    a322:	4798      	blx	r3
    a324:	e013      	b.n	a34e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a326:	683b      	ldr	r3, [r7, #0]
    a328:	7cdb      	ldrb	r3, [r3, #19]
    a32a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a32e:	b2db      	uxtb	r3, r3
    a330:	2b00      	cmp	r3, #0
    a332:	d005      	beq.n	a340 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a334:	7abb      	ldrb	r3, [r7, #10]
    a336:	4619      	mov	r1, r3
    a338:	6838      	ldr	r0, [r7, #0]
    a33a:	4b07      	ldr	r3, [pc, #28]	; (a358 <_usb_d_dev_handle_eps+0xb0>)
    a33c:	4798      	blx	r3
    a33e:	e006      	b.n	a34e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a340:	7abb      	ldrb	r3, [r7, #10]
    a342:	4619      	mov	r1, r3
    a344:	6838      	ldr	r0, [r7, #0]
    a346:	4b05      	ldr	r3, [pc, #20]	; (a35c <_usb_d_dev_handle_eps+0xb4>)
    a348:	4798      	blx	r3
    a34a:	e000      	b.n	a34e <_usb_d_dev_handle_eps+0xa6>
		return;
    a34c:	bf00      	nop
		}
	}
}
    a34e:	3710      	adds	r7, #16
    a350:	46bd      	mov	sp, r7
    a352:	bd80      	pop	{r7, pc}
    a354:	0000a12d 	.word	0x0000a12d
    a358:	0000a181 	.word	0x0000a181
    a35c:	0000a215 	.word	0x0000a215

0000a360 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a360:	b580      	push	{r7, lr}
    a362:	b084      	sub	sp, #16
    a364:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a366:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a36a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a36c:	68bb      	ldr	r3, [r7, #8]
    a36e:	8c1b      	ldrh	r3, [r3, #32]
    a370:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a372:	88fb      	ldrh	r3, [r7, #6]
    a374:	2b00      	cmp	r3, #0
    a376:	d104      	bne.n	a382 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a378:	4b13      	ldr	r3, [pc, #76]	; (a3c8 <_usb_d_dev_handler+0x68>)
    a37a:	4798      	blx	r3
    a37c:	4603      	mov	r3, r0
    a37e:	2b00      	cmp	r3, #0
    a380:	d11e      	bne.n	a3c0 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a382:	2300      	movs	r3, #0
    a384:	73fb      	strb	r3, [r7, #15]
    a386:	e017      	b.n	a3b8 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a388:	7bfa      	ldrb	r2, [r7, #15]
    a38a:	4613      	mov	r3, r2
    a38c:	009b      	lsls	r3, r3, #2
    a38e:	4413      	add	r3, r2
    a390:	009b      	lsls	r3, r3, #2
    a392:	3310      	adds	r3, #16
    a394:	4a0d      	ldr	r2, [pc, #52]	; (a3cc <_usb_d_dev_handler+0x6c>)
    a396:	4413      	add	r3, r2
    a398:	3304      	adds	r3, #4
    a39a:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a39c:	683b      	ldr	r3, [r7, #0]
    a39e:	7c9b      	ldrb	r3, [r3, #18]
    a3a0:	2bff      	cmp	r3, #255	; 0xff
    a3a2:	d005      	beq.n	a3b0 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a3a4:	88fb      	ldrh	r3, [r7, #6]
    a3a6:	6839      	ldr	r1, [r7, #0]
    a3a8:	4618      	mov	r0, r3
    a3aa:	4b09      	ldr	r3, [pc, #36]	; (a3d0 <_usb_d_dev_handler+0x70>)
    a3ac:	4798      	blx	r3
    a3ae:	e000      	b.n	a3b2 <_usb_d_dev_handler+0x52>
			continue;
    a3b0:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a3b2:	7bfb      	ldrb	r3, [r7, #15]
    a3b4:	3301      	adds	r3, #1
    a3b6:	73fb      	strb	r3, [r7, #15]
    a3b8:	7bfb      	ldrb	r3, [r7, #15]
    a3ba:	2b08      	cmp	r3, #8
    a3bc:	d9e4      	bls.n	a388 <_usb_d_dev_handler+0x28>
    a3be:	e000      	b.n	a3c2 <_usb_d_dev_handler+0x62>
			return;
    a3c0:	bf00      	nop
	}
}
    a3c2:	3710      	adds	r7, #16
    a3c4:	46bd      	mov	sp, r7
    a3c6:	bd80      	pop	{r7, pc}
    a3c8:	000098b9 	.word	0x000098b9
    a3cc:	200032b4 	.word	0x200032b4
    a3d0:	0000a2a9 	.word	0x0000a2a9

0000a3d4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a3d4:	b580      	push	{r7, lr}
    a3d6:	b082      	sub	sp, #8
    a3d8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a3da:	2300      	movs	r3, #0
    a3dc:	71fb      	strb	r3, [r7, #7]
    a3de:	e023      	b.n	a428 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a3e0:	79fa      	ldrb	r2, [r7, #7]
    a3e2:	4613      	mov	r3, r2
    a3e4:	009b      	lsls	r3, r3, #2
    a3e6:	4413      	add	r3, r2
    a3e8:	009b      	lsls	r3, r3, #2
    a3ea:	3310      	adds	r3, #16
    a3ec:	4a14      	ldr	r2, [pc, #80]	; (a440 <_usb_d_dev_reset_epts+0x6c>)
    a3ee:	4413      	add	r3, r2
    a3f0:	3304      	adds	r3, #4
    a3f2:	2103      	movs	r1, #3
    a3f4:	4618      	mov	r0, r3
    a3f6:	4b13      	ldr	r3, [pc, #76]	; (a444 <_usb_d_dev_reset_epts+0x70>)
    a3f8:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a3fa:	79fa      	ldrb	r2, [r7, #7]
    a3fc:	4910      	ldr	r1, [pc, #64]	; (a440 <_usb_d_dev_reset_epts+0x6c>)
    a3fe:	4613      	mov	r3, r2
    a400:	009b      	lsls	r3, r3, #2
    a402:	4413      	add	r3, r2
    a404:	009b      	lsls	r3, r3, #2
    a406:	440b      	add	r3, r1
    a408:	3326      	adds	r3, #38	; 0x26
    a40a:	22ff      	movs	r2, #255	; 0xff
    a40c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a40e:	79fa      	ldrb	r2, [r7, #7]
    a410:	490b      	ldr	r1, [pc, #44]	; (a440 <_usb_d_dev_reset_epts+0x6c>)
    a412:	4613      	mov	r3, r2
    a414:	009b      	lsls	r3, r3, #2
    a416:	4413      	add	r3, r2
    a418:	009b      	lsls	r3, r3, #2
    a41a:	440b      	add	r3, r1
    a41c:	3327      	adds	r3, #39	; 0x27
    a41e:	2200      	movs	r2, #0
    a420:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a422:	79fb      	ldrb	r3, [r7, #7]
    a424:	3301      	adds	r3, #1
    a426:	71fb      	strb	r3, [r7, #7]
    a428:	79fb      	ldrb	r3, [r7, #7]
    a42a:	2b08      	cmp	r3, #8
    a42c:	d9d8      	bls.n	a3e0 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a42e:	22a0      	movs	r2, #160	; 0xa0
    a430:	2100      	movs	r1, #0
    a432:	4805      	ldr	r0, [pc, #20]	; (a448 <_usb_d_dev_reset_epts+0x74>)
    a434:	4b05      	ldr	r3, [pc, #20]	; (a44c <_usb_d_dev_reset_epts+0x78>)
    a436:	4798      	blx	r3
}
    a438:	bf00      	nop
    a43a:	3708      	adds	r7, #8
    a43c:	46bd      	mov	sp, r7
    a43e:	bd80      	pop	{r7, pc}
    a440:	200032b4 	.word	0x200032b4
    a444:	0000ac99 	.word	0x0000ac99
    a448:	2000337c 	.word	0x2000337c
    a44c:	00010e15 	.word	0x00010e15

0000a450 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a450:	b580      	push	{r7, lr}
    a452:	b084      	sub	sp, #16
    a454:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a456:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a45a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a45c:	2301      	movs	r3, #1
    a45e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a460:	2304      	movs	r3, #4
    a462:	713b      	strb	r3, [r7, #4]
    a464:	2300      	movs	r3, #0
    a466:	717b      	strb	r3, [r7, #5]
    a468:	2300      	movs	r3, #0
    a46a:	71bb      	strb	r3, [r7, #6]
    a46c:	2300      	movs	r3, #0
    a46e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a470:	2101      	movs	r1, #1
    a472:	68f8      	ldr	r0, [r7, #12]
    a474:	4b26      	ldr	r3, [pc, #152]	; (a510 <_usb_d_dev_init+0xc0>)
    a476:	4798      	blx	r3
    a478:	4603      	mov	r3, r0
    a47a:	f083 0301 	eor.w	r3, r3, #1
    a47e:	b2db      	uxtb	r3, r3
    a480:	2b00      	cmp	r3, #0
    a482:	d011      	beq.n	a4a8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a484:	2102      	movs	r1, #2
    a486:	68f8      	ldr	r0, [r7, #12]
    a488:	4b22      	ldr	r3, [pc, #136]	; (a514 <_usb_d_dev_init+0xc4>)
    a48a:	4798      	blx	r3
    a48c:	4603      	mov	r3, r0
    a48e:	2b00      	cmp	r3, #0
    a490:	d006      	beq.n	a4a0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a492:	68f8      	ldr	r0, [r7, #12]
    a494:	4b20      	ldr	r3, [pc, #128]	; (a518 <_usb_d_dev_init+0xc8>)
    a496:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a498:	2102      	movs	r1, #2
    a49a:	68f8      	ldr	r0, [r7, #12]
    a49c:	4b1f      	ldr	r3, [pc, #124]	; (a51c <_usb_d_dev_init+0xcc>)
    a49e:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a4a0:	2101      	movs	r1, #1
    a4a2:	68f8      	ldr	r0, [r7, #12]
    a4a4:	4b1e      	ldr	r3, [pc, #120]	; (a520 <_usb_d_dev_init+0xd0>)
    a4a6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a4a8:	2101      	movs	r1, #1
    a4aa:	68f8      	ldr	r0, [r7, #12]
    a4ac:	4b1b      	ldr	r3, [pc, #108]	; (a51c <_usb_d_dev_init+0xcc>)
    a4ae:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a4b0:	4b1c      	ldr	r3, [pc, #112]	; (a524 <_usb_d_dev_init+0xd4>)
    a4b2:	4a1d      	ldr	r2, [pc, #116]	; (a528 <_usb_d_dev_init+0xd8>)
    a4b4:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a4b6:	4b1b      	ldr	r3, [pc, #108]	; (a524 <_usb_d_dev_init+0xd4>)
    a4b8:	4a1b      	ldr	r2, [pc, #108]	; (a528 <_usb_d_dev_init+0xd8>)
    a4ba:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a4bc:	4b19      	ldr	r3, [pc, #100]	; (a524 <_usb_d_dev_init+0xd4>)
    a4be:	4a1a      	ldr	r2, [pc, #104]	; (a528 <_usb_d_dev_init+0xd8>)
    a4c0:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a4c2:	4b18      	ldr	r3, [pc, #96]	; (a524 <_usb_d_dev_init+0xd4>)
    a4c4:	4a18      	ldr	r2, [pc, #96]	; (a528 <_usb_d_dev_init+0xd8>)
    a4c6:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a4c8:	4b16      	ldr	r3, [pc, #88]	; (a524 <_usb_d_dev_init+0xd4>)
    a4ca:	4a17      	ldr	r2, [pc, #92]	; (a528 <_usb_d_dev_init+0xd8>)
    a4cc:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a4ce:	4b17      	ldr	r3, [pc, #92]	; (a52c <_usb_d_dev_init+0xdc>)
    a4d0:	4798      	blx	r3

	_usb_load_calib();
    a4d2:	4b17      	ldr	r3, [pc, #92]	; (a530 <_usb_d_dev_init+0xe0>)
    a4d4:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a4d6:	2104      	movs	r1, #4
    a4d8:	68f8      	ldr	r0, [r7, #12]
    a4da:	4b11      	ldr	r3, [pc, #68]	; (a520 <_usb_d_dev_init+0xd0>)
    a4dc:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a4de:	4b15      	ldr	r3, [pc, #84]	; (a534 <_usb_d_dev_init+0xe4>)
    a4e0:	4619      	mov	r1, r3
    a4e2:	68f8      	ldr	r0, [r7, #12]
    a4e4:	4b14      	ldr	r3, [pc, #80]	; (a538 <_usb_d_dev_init+0xe8>)
    a4e6:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a4e8:	7afb      	ldrb	r3, [r7, #11]
    a4ea:	f107 0210 	add.w	r2, r7, #16
    a4ee:	4413      	add	r3, r2
    a4f0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a4f4:	f043 0301 	orr.w	r3, r3, #1
    a4f8:	b2db      	uxtb	r3, r3
    a4fa:	b29b      	uxth	r3, r3
    a4fc:	4619      	mov	r1, r3
    a4fe:	68f8      	ldr	r0, [r7, #12]
    a500:	4b0e      	ldr	r3, [pc, #56]	; (a53c <_usb_d_dev_init+0xec>)
    a502:	4798      	blx	r3

	return ERR_NONE;
    a504:	2300      	movs	r3, #0
}
    a506:	4618      	mov	r0, r3
    a508:	3710      	adds	r7, #16
    a50a:	46bd      	mov	sp, r7
    a50c:	bd80      	pop	{r7, pc}
    a50e:	bf00      	nop
    a510:	00008ae9 	.word	0x00008ae9
    a514:	00008e39 	.word	0x00008e39
    a518:	00008e0d 	.word	0x00008e0d
    a51c:	00008abf 	.word	0x00008abf
    a520:	00008e69 	.word	0x00008e69
    a524:	200032b4 	.word	0x200032b4
    a528:	00008f31 	.word	0x00008f31
    a52c:	0000a3d5 	.word	0x0000a3d5
    a530:	00008f49 	.word	0x00008f49
    a534:	2000337c 	.word	0x2000337c
    a538:	00008f15 	.word	0x00008f15
    a53c:	00008ed9 	.word	0x00008ed9

0000a540 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a540:	b580      	push	{r7, lr}
    a542:	b082      	sub	sp, #8
    a544:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a546:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a54a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a54c:	2103      	movs	r1, #3
    a54e:	6878      	ldr	r0, [r7, #4]
    a550:	4b17      	ldr	r3, [pc, #92]	; (a5b0 <_usb_d_dev_enable+0x70>)
    a552:	4798      	blx	r3
    a554:	4603      	mov	r3, r0
    a556:	2b00      	cmp	r3, #0
    a558:	d002      	beq.n	a560 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a55a:	f06f 0310 	mvn.w	r3, #16
    a55e:	e023      	b.n	a5a8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a560:	6878      	ldr	r0, [r7, #4]
    a562:	4b14      	ldr	r3, [pc, #80]	; (a5b4 <_usb_d_dev_enable+0x74>)
    a564:	4798      	blx	r3
    a566:	4603      	mov	r3, r0
    a568:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a56a:	78fb      	ldrb	r3, [r7, #3]
    a56c:	f003 0302 	and.w	r3, r3, #2
    a570:	2b00      	cmp	r3, #0
    a572:	d107      	bne.n	a584 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a574:	78fb      	ldrb	r3, [r7, #3]
    a576:	f043 0302 	orr.w	r3, r3, #2
    a57a:	b2db      	uxtb	r3, r3
    a57c:	4619      	mov	r1, r3
    a57e:	6878      	ldr	r0, [r7, #4]
    a580:	4b0d      	ldr	r3, [pc, #52]	; (a5b8 <_usb_d_dev_enable+0x78>)
    a582:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a584:	2050      	movs	r0, #80	; 0x50
    a586:	4b0d      	ldr	r3, [pc, #52]	; (a5bc <_usb_d_dev_enable+0x7c>)
    a588:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a58a:	2051      	movs	r0, #81	; 0x51
    a58c:	4b0b      	ldr	r3, [pc, #44]	; (a5bc <_usb_d_dev_enable+0x7c>)
    a58e:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a590:	2052      	movs	r0, #82	; 0x52
    a592:	4b0a      	ldr	r3, [pc, #40]	; (a5bc <_usb_d_dev_enable+0x7c>)
    a594:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a596:	2053      	movs	r0, #83	; 0x53
    a598:	4b08      	ldr	r3, [pc, #32]	; (a5bc <_usb_d_dev_enable+0x7c>)
    a59a:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a59c:	f240 218d 	movw	r1, #653	; 0x28d
    a5a0:	6878      	ldr	r0, [r7, #4]
    a5a2:	4b07      	ldr	r3, [pc, #28]	; (a5c0 <_usb_d_dev_enable+0x80>)
    a5a4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a5a6:	2300      	movs	r3, #0
}
    a5a8:	4618      	mov	r0, r3
    a5aa:	3708      	adds	r7, #8
    a5ac:	46bd      	mov	sp, r7
    a5ae:	bd80      	pop	{r7, pc}
    a5b0:	00008de3 	.word	0x00008de3
    a5b4:	00008e91 	.word	0x00008e91
    a5b8:	00008e69 	.word	0x00008e69
    a5bc:	000089f5 	.word	0x000089f5
    a5c0:	00008d8d 	.word	0x00008d8d

0000a5c4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a5c4:	b580      	push	{r7, lr}
    a5c6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a5c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a5cc:	4b01      	ldr	r3, [pc, #4]	; (a5d4 <_usb_d_dev_attach+0x10>)
    a5ce:	4798      	blx	r3
}
    a5d0:	bf00      	nop
    a5d2:	bd80      	pop	{r7, pc}
    a5d4:	00008eb5 	.word	0x00008eb5

0000a5d8 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a5d8:	b580      	push	{r7, lr}
    a5da:	b082      	sub	sp, #8
    a5dc:	af00      	add	r7, sp, #0
    a5de:	4603      	mov	r3, r0
    a5e0:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a5e2:	79fb      	ldrb	r3, [r7, #7]
    a5e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a5e8:	b2db      	uxtb	r3, r3
    a5ea:	4619      	mov	r1, r3
    a5ec:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a5f0:	4b02      	ldr	r3, [pc, #8]	; (a5fc <_usb_d_dev_set_address+0x24>)
    a5f2:	4798      	blx	r3
}
    a5f4:	bf00      	nop
    a5f6:	3708      	adds	r7, #8
    a5f8:	46bd      	mov	sp, r7
    a5fa:	bd80      	pop	{r7, pc}
    a5fc:	00008ef7 	.word	0x00008ef7

0000a600 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a600:	b590      	push	{r4, r7, lr}
    a602:	b085      	sub	sp, #20
    a604:	af00      	add	r7, sp, #0
    a606:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a608:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a60c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a60e:	687b      	ldr	r3, [r7, #4]
    a610:	7c9b      	ldrb	r3, [r3, #18]
    a612:	f003 030f 	and.w	r3, r3, #15
    a616:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a618:	687b      	ldr	r3, [r7, #4]
    a61a:	68db      	ldr	r3, [r3, #12]
    a61c:	461a      	mov	r2, r3
    a61e:	7afb      	ldrb	r3, [r7, #11]
    a620:	2100      	movs	r1, #0
    a622:	4618      	mov	r0, r3
    a624:	4b0f      	ldr	r3, [pc, #60]	; (a664 <_usb_d_dev_trans_setup+0x64>)
    a626:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a628:	687b      	ldr	r3, [r7, #4]
    a62a:	8a1b      	ldrh	r3, [r3, #16]
    a62c:	461a      	mov	r2, r3
    a62e:	7af8      	ldrb	r0, [r7, #11]
    a630:	2300      	movs	r3, #0
    a632:	2100      	movs	r1, #0
    a634:	4c0c      	ldr	r4, [pc, #48]	; (a668 <_usb_d_dev_trans_setup+0x68>)
    a636:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a638:	7afb      	ldrb	r3, [r7, #11]
    a63a:	22b0      	movs	r2, #176	; 0xb0
    a63c:	4619      	mov	r1, r3
    a63e:	68f8      	ldr	r0, [r7, #12]
    a640:	4b0a      	ldr	r3, [pc, #40]	; (a66c <_usb_d_dev_trans_setup+0x6c>)
    a642:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a644:	7afb      	ldrb	r3, [r7, #11]
    a646:	2200      	movs	r2, #0
    a648:	2100      	movs	r1, #0
    a64a:	4618      	mov	r0, r3
    a64c:	4b08      	ldr	r3, [pc, #32]	; (a670 <_usb_d_dev_trans_setup+0x70>)
    a64e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a650:	7afb      	ldrb	r3, [r7, #11]
    a652:	2210      	movs	r2, #16
    a654:	4619      	mov	r1, r3
    a656:	68f8      	ldr	r0, [r7, #12]
    a658:	4b06      	ldr	r3, [pc, #24]	; (a674 <_usb_d_dev_trans_setup+0x74>)
    a65a:	4798      	blx	r3
}
    a65c:	bf00      	nop
    a65e:	3714      	adds	r7, #20
    a660:	46bd      	mov	sp, r7
    a662:	bd90      	pop	{r4, r7, pc}
    a664:	00009395 	.word	0x00009395
    a668:	0000951d 	.word	0x0000951d
    a66c:	00008bf5 	.word	0x00008bf5
    a670:	000095ed 	.word	0x000095ed
    a674:	00008c49 	.word	0x00008c49

0000a678 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a678:	b580      	push	{r7, lr}
    a67a:	b088      	sub	sp, #32
    a67c:	af00      	add	r7, sp, #0
    a67e:	4603      	mov	r3, r0
    a680:	71fb      	strb	r3, [r7, #7]
    a682:	460b      	mov	r3, r1
    a684:	71bb      	strb	r3, [r7, #6]
    a686:	4613      	mov	r3, r2
    a688:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a68a:	79fb      	ldrb	r3, [r7, #7]
    a68c:	f003 030f 	and.w	r3, r3, #15
    a690:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a692:	79fb      	ldrb	r3, [r7, #7]
    a694:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a698:	2b00      	cmp	r3, #0
    a69a:	bf14      	ite	ne
    a69c:	2301      	movne	r3, #1
    a69e:	2300      	moveq	r3, #0
    a6a0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a6a2:	7fba      	ldrb	r2, [r7, #30]
    a6a4:	7ffb      	ldrb	r3, [r7, #31]
    a6a6:	4611      	mov	r1, r2
    a6a8:	4618      	mov	r0, r3
    a6aa:	4b3e      	ldr	r3, [pc, #248]	; (a7a4 <_usb_d_dev_ep_init+0x12c>)
    a6ac:	4798      	blx	r3
    a6ae:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a6b0:	79bb      	ldrb	r3, [r7, #6]
    a6b2:	f003 0303 	and.w	r3, r3, #3
    a6b6:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a6b8:	7ffa      	ldrb	r2, [r7, #31]
    a6ba:	4613      	mov	r3, r2
    a6bc:	005b      	lsls	r3, r3, #1
    a6be:	4413      	add	r3, r2
    a6c0:	009b      	lsls	r3, r3, #2
    a6c2:	4a39      	ldr	r2, [pc, #228]	; (a7a8 <_usb_d_dev_ep_init+0x130>)
    a6c4:	4413      	add	r3, r2
    a6c6:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a6c8:	7ffb      	ldrb	r3, [r7, #31]
    a6ca:	2b04      	cmp	r3, #4
    a6cc:	d902      	bls.n	a6d4 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a6ce:	f06f 0311 	mvn.w	r3, #17
    a6d2:	e063      	b.n	a79c <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a6d4:	69bb      	ldr	r3, [r7, #24]
    a6d6:	7c9b      	ldrb	r3, [r3, #18]
    a6d8:	2bff      	cmp	r3, #255	; 0xff
    a6da:	d002      	beq.n	a6e2 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a6dc:	f06f 0313 	mvn.w	r3, #19
    a6e0:	e05c      	b.n	a79c <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a6e2:	7dfb      	ldrb	r3, [r7, #23]
    a6e4:	2b00      	cmp	r3, #0
    a6e6:	d11f      	bne.n	a728 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a6e8:	7fbb      	ldrb	r3, [r7, #30]
    a6ea:	2b00      	cmp	r3, #0
    a6ec:	bf14      	ite	ne
    a6ee:	2301      	movne	r3, #1
    a6f0:	2300      	moveq	r3, #0
    a6f2:	b2db      	uxtb	r3, r3
    a6f4:	f083 0301 	eor.w	r3, r3, #1
    a6f8:	b2db      	uxtb	r3, r3
    a6fa:	f003 0301 	and.w	r3, r3, #1
    a6fe:	b2da      	uxtb	r2, r3
    a700:	7ffb      	ldrb	r3, [r7, #31]
    a702:	4611      	mov	r1, r2
    a704:	4618      	mov	r0, r3
    a706:	4b27      	ldr	r3, [pc, #156]	; (a7a4 <_usb_d_dev_ep_init+0x12c>)
    a708:	4798      	blx	r3
    a70a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a70c:	68fb      	ldr	r3, [r7, #12]
    a70e:	7c9b      	ldrb	r3, [r3, #18]
    a710:	2bff      	cmp	r3, #255	; 0xff
    a712:	d002      	beq.n	a71a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a714:	f06f 0313 	mvn.w	r3, #19
    a718:	e040      	b.n	a79c <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a71a:	693b      	ldr	r3, [r7, #16]
    a71c:	681b      	ldr	r3, [r3, #0]
    a71e:	2b00      	cmp	r3, #0
    a720:	d102      	bne.n	a728 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a722:	f06f 0312 	mvn.w	r3, #18
    a726:	e039      	b.n	a79c <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a728:	7fbb      	ldrb	r3, [r7, #30]
    a72a:	2b00      	cmp	r3, #0
    a72c:	d007      	beq.n	a73e <_usb_d_dev_ep_init+0xc6>
    a72e:	693b      	ldr	r3, [r7, #16]
    a730:	685b      	ldr	r3, [r3, #4]
    a732:	2b00      	cmp	r3, #0
    a734:	bf14      	ite	ne
    a736:	2301      	movne	r3, #1
    a738:	2300      	moveq	r3, #0
    a73a:	b2db      	uxtb	r3, r3
    a73c:	e006      	b.n	a74c <_usb_d_dev_ep_init+0xd4>
    a73e:	693b      	ldr	r3, [r7, #16]
    a740:	681b      	ldr	r3, [r3, #0]
    a742:	2b00      	cmp	r3, #0
    a744:	bf14      	ite	ne
    a746:	2301      	movne	r3, #1
    a748:	2300      	moveq	r3, #0
    a74a:	b2db      	uxtb	r3, r3
    a74c:	2b00      	cmp	r3, #0
    a74e:	d00f      	beq.n	a770 <_usb_d_dev_ep_init+0xf8>
    a750:	7fbb      	ldrb	r3, [r7, #30]
    a752:	2b00      	cmp	r3, #0
    a754:	d003      	beq.n	a75e <_usb_d_dev_ep_init+0xe6>
    a756:	693b      	ldr	r3, [r7, #16]
    a758:	895b      	ldrh	r3, [r3, #10]
    a75a:	461a      	mov	r2, r3
    a75c:	e002      	b.n	a764 <_usb_d_dev_ep_init+0xec>
    a75e:	693b      	ldr	r3, [r7, #16]
    a760:	891b      	ldrh	r3, [r3, #8]
    a762:	461a      	mov	r2, r3
    a764:	88bb      	ldrh	r3, [r7, #4]
    a766:	429a      	cmp	r2, r3
    a768:	da02      	bge.n	a770 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a76a:	f06f 0312 	mvn.w	r3, #18
    a76e:	e015      	b.n	a79c <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a770:	7fbb      	ldrb	r3, [r7, #30]
    a772:	2b00      	cmp	r3, #0
    a774:	d002      	beq.n	a77c <_usb_d_dev_ep_init+0x104>
    a776:	693b      	ldr	r3, [r7, #16]
    a778:	685b      	ldr	r3, [r3, #4]
    a77a:	e001      	b.n	a780 <_usb_d_dev_ep_init+0x108>
    a77c:	693b      	ldr	r3, [r7, #16]
    a77e:	681b      	ldr	r3, [r3, #0]
    a780:	69ba      	ldr	r2, [r7, #24]
    a782:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a784:	69bb      	ldr	r3, [r7, #24]
    a786:	88ba      	ldrh	r2, [r7, #4]
    a788:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a78a:	7dfb      	ldrb	r3, [r7, #23]
    a78c:	3301      	adds	r3, #1
    a78e:	b2da      	uxtb	r2, r3
    a790:	69bb      	ldr	r3, [r7, #24]
    a792:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a794:	69bb      	ldr	r3, [r7, #24]
    a796:	79fa      	ldrb	r2, [r7, #7]
    a798:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a79a:	2300      	movs	r3, #0
}
    a79c:	4618      	mov	r0, r3
    a79e:	3720      	adds	r7, #32
    a7a0:	46bd      	mov	sp, r7
    a7a2:	bd80      	pop	{r7, pc}
    a7a4:	000096a9 	.word	0x000096a9
    a7a8:	00011634 	.word	0x00011634

0000a7ac <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a7ac:	b580      	push	{r7, lr}
    a7ae:	b086      	sub	sp, #24
    a7b0:	af00      	add	r7, sp, #0
    a7b2:	4603      	mov	r3, r0
    a7b4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a7b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a7ba:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a7bc:	79fb      	ldrb	r3, [r7, #7]
    a7be:	f003 030f 	and.w	r3, r3, #15
    a7c2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a7c4:	79fb      	ldrb	r3, [r7, #7]
    a7c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a7ca:	2b00      	cmp	r3, #0
    a7cc:	bf14      	ite	ne
    a7ce:	2301      	movne	r3, #1
    a7d0:	2300      	moveq	r3, #0
    a7d2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a7d4:	7cba      	ldrb	r2, [r7, #18]
    a7d6:	7cfb      	ldrb	r3, [r7, #19]
    a7d8:	4611      	mov	r1, r2
    a7da:	4618      	mov	r0, r3
    a7dc:	4b2a      	ldr	r3, [pc, #168]	; (a888 <_usb_d_dev_ep_deinit+0xdc>)
    a7de:	4798      	blx	r3
    a7e0:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a7e2:	7cfb      	ldrb	r3, [r7, #19]
    a7e4:	2b04      	cmp	r3, #4
    a7e6:	d84a      	bhi.n	a87e <_usb_d_dev_ep_deinit+0xd2>
    a7e8:	68fb      	ldr	r3, [r7, #12]
    a7ea:	7c9b      	ldrb	r3, [r3, #18]
    a7ec:	2bff      	cmp	r3, #255	; 0xff
    a7ee:	d046      	beq.n	a87e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a7f0:	7cbb      	ldrb	r3, [r7, #18]
    a7f2:	2203      	movs	r2, #3
    a7f4:	4619      	mov	r1, r3
    a7f6:	68f8      	ldr	r0, [r7, #12]
    a7f8:	4b24      	ldr	r3, [pc, #144]	; (a88c <_usb_d_dev_ep_deinit+0xe0>)
    a7fa:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a7fc:	68fb      	ldr	r3, [r7, #12]
    a7fe:	7cdb      	ldrb	r3, [r3, #19]
    a800:	f003 0307 	and.w	r3, r3, #7
    a804:	b2db      	uxtb	r3, r3
    a806:	2b01      	cmp	r3, #1
    a808:	d107      	bne.n	a81a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a80a:	79fb      	ldrb	r3, [r7, #7]
    a80c:	697a      	ldr	r2, [r7, #20]
    a80e:	3308      	adds	r3, #8
    a810:	015b      	lsls	r3, r3, #5
    a812:	4413      	add	r3, r2
    a814:	2200      	movs	r2, #0
    a816:	701a      	strb	r2, [r3, #0]
    a818:	e02a      	b.n	a870 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a81a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a81e:	2b00      	cmp	r3, #0
    a820:	da15      	bge.n	a84e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a822:	79fb      	ldrb	r3, [r7, #7]
    a824:	f003 030f 	and.w	r3, r3, #15
    a828:	79fa      	ldrb	r2, [r7, #7]
    a82a:	f002 020f 	and.w	r2, r2, #15
    a82e:	6979      	ldr	r1, [r7, #20]
    a830:	3208      	adds	r2, #8
    a832:	0152      	lsls	r2, r2, #5
    a834:	440a      	add	r2, r1
    a836:	7812      	ldrb	r2, [r2, #0]
    a838:	b2d2      	uxtb	r2, r2
    a83a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    a83e:	b2d1      	uxtb	r1, r2
    a840:	697a      	ldr	r2, [r7, #20]
    a842:	3308      	adds	r3, #8
    a844:	015b      	lsls	r3, r3, #5
    a846:	4413      	add	r3, r2
    a848:	460a      	mov	r2, r1
    a84a:	701a      	strb	r2, [r3, #0]
    a84c:	e010      	b.n	a870 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    a84e:	79fb      	ldrb	r3, [r7, #7]
    a850:	79fa      	ldrb	r2, [r7, #7]
    a852:	6979      	ldr	r1, [r7, #20]
    a854:	3208      	adds	r2, #8
    a856:	0152      	lsls	r2, r2, #5
    a858:	440a      	add	r2, r1
    a85a:	7812      	ldrb	r2, [r2, #0]
    a85c:	b2d2      	uxtb	r2, r2
    a85e:	f022 0207 	bic.w	r2, r2, #7
    a862:	b2d1      	uxtb	r1, r2
    a864:	697a      	ldr	r2, [r7, #20]
    a866:	3308      	adds	r3, #8
    a868:	015b      	lsls	r3, r3, #5
    a86a:	4413      	add	r3, r2
    a86c:	460a      	mov	r2, r1
    a86e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    a870:	68fb      	ldr	r3, [r7, #12]
    a872:	2200      	movs	r2, #0
    a874:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    a876:	68fb      	ldr	r3, [r7, #12]
    a878:	22ff      	movs	r2, #255	; 0xff
    a87a:	749a      	strb	r2, [r3, #18]
    a87c:	e000      	b.n	a880 <_usb_d_dev_ep_deinit+0xd4>
		return;
    a87e:	bf00      	nop
}
    a880:	3718      	adds	r7, #24
    a882:	46bd      	mov	sp, r7
    a884:	bd80      	pop	{r7, pc}
    a886:	bf00      	nop
    a888:	000096a9 	.word	0x000096a9
    a88c:	0000ace1 	.word	0x0000ace1

0000a890 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    a890:	b5b0      	push	{r4, r5, r7, lr}
    a892:	b088      	sub	sp, #32
    a894:	af00      	add	r7, sp, #0
    a896:	4603      	mov	r3, r0
    a898:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    a89a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a89e:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    a8a0:	79fb      	ldrb	r3, [r7, #7]
    a8a2:	f003 030f 	and.w	r3, r3, #15
    a8a6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    a8a8:	79fb      	ldrb	r3, [r7, #7]
    a8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	bf14      	ite	ne
    a8b2:	2301      	movne	r3, #1
    a8b4:	2300      	moveq	r3, #0
    a8b6:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    a8b8:	7eba      	ldrb	r2, [r7, #26]
    a8ba:	7efb      	ldrb	r3, [r7, #27]
    a8bc:	4611      	mov	r1, r2
    a8be:	4618      	mov	r0, r3
    a8c0:	4b70      	ldr	r3, [pc, #448]	; (aa84 <_usb_d_dev_ep_enable+0x1f4>)
    a8c2:	4798      	blx	r3
    a8c4:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    a8c6:	7efb      	ldrb	r3, [r7, #27]
    a8c8:	4619      	mov	r1, r3
    a8ca:	69f8      	ldr	r0, [r7, #28]
    a8cc:	4b6e      	ldr	r3, [pc, #440]	; (aa88 <_usb_d_dev_ep_enable+0x1f8>)
    a8ce:	4798      	blx	r3
    a8d0:	4603      	mov	r3, r0
    a8d2:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a8d4:	7efb      	ldrb	r3, [r7, #27]
    a8d6:	2b04      	cmp	r3, #4
    a8d8:	d803      	bhi.n	a8e2 <_usb_d_dev_ep_enable+0x52>
    a8da:	697b      	ldr	r3, [r7, #20]
    a8dc:	7c9b      	ldrb	r3, [r3, #18]
    a8de:	2bff      	cmp	r3, #255	; 0xff
    a8e0:	d102      	bne.n	a8e8 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    a8e2:	f06f 0311 	mvn.w	r3, #17
    a8e6:	e0c8      	b.n	aa7a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    a8e8:	7efb      	ldrb	r3, [r7, #27]
    a8ea:	015b      	lsls	r3, r3, #5
    a8ec:	4a67      	ldr	r2, [pc, #412]	; (aa8c <_usb_d_dev_ep_enable+0x1fc>)
    a8ee:	4413      	add	r3, r2
    a8f0:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    a8f2:	697b      	ldr	r3, [r7, #20]
    a8f4:	7cdb      	ldrb	r3, [r3, #19]
    a8f6:	f003 0307 	and.w	r3, r3, #7
    a8fa:	b2db      	uxtb	r3, r3
    a8fc:	2b01      	cmp	r3, #1
    a8fe:	d14b      	bne.n	a998 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    a900:	7cfb      	ldrb	r3, [r7, #19]
    a902:	f003 0377 	and.w	r3, r3, #119	; 0x77
    a906:	2b00      	cmp	r3, #0
    a908:	d002      	beq.n	a910 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    a90a:	f06f 0313 	mvn.w	r3, #19
    a90e:	e0b4      	b.n	aa7a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    a910:	7efb      	ldrb	r3, [r7, #27]
    a912:	2211      	movs	r2, #17
    a914:	4619      	mov	r1, r3
    a916:	69f8      	ldr	r0, [r7, #28]
    a918:	4b5d      	ldr	r3, [pc, #372]	; (aa90 <_usb_d_dev_ep_enable+0x200>)
    a91a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a91c:	697b      	ldr	r3, [r7, #20]
    a91e:	8a1b      	ldrh	r3, [r3, #16]
    a920:	039b      	lsls	r3, r3, #14
    a922:	4c5c      	ldr	r4, [pc, #368]	; (aa94 <_usb_d_dev_ep_enable+0x204>)
    a924:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a926:	697b      	ldr	r3, [r7, #20]
    a928:	8a1b      	ldrh	r3, [r3, #16]
    a92a:	4618      	mov	r0, r3
    a92c:	4b5a      	ldr	r3, [pc, #360]	; (aa98 <_usb_d_dev_ep_enable+0x208>)
    a92e:	4798      	blx	r3
    a930:	4603      	mov	r3, r0
    a932:	071b      	lsls	r3, r3, #28
    a934:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a938:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    a93c:	68fb      	ldr	r3, [r7, #12]
    a93e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    a940:	68fb      	ldr	r3, [r7, #12]
    a942:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a946:	697b      	ldr	r3, [r7, #20]
    a948:	8a1b      	ldrh	r3, [r3, #16]
    a94a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a94e:	697b      	ldr	r3, [r7, #20]
    a950:	8a1b      	ldrh	r3, [r3, #16]
    a952:	4618      	mov	r0, r3
    a954:	4b50      	ldr	r3, [pc, #320]	; (aa98 <_usb_d_dev_ep_enable+0x208>)
    a956:	4798      	blx	r3
    a958:	4603      	mov	r3, r0
    a95a:	071b      	lsls	r3, r3, #28
    a95c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a960:	432b      	orrs	r3, r5
    a962:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a964:	7efb      	ldrb	r3, [r7, #27]
    a966:	2200      	movs	r2, #0
    a968:	2100      	movs	r1, #0
    a96a:	4618      	mov	r0, r3
    a96c:	4b4b      	ldr	r3, [pc, #300]	; (aa9c <_usb_d_dev_ep_enable+0x20c>)
    a96e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    a970:	7efb      	ldrb	r3, [r7, #27]
    a972:	2200      	movs	r2, #0
    a974:	2101      	movs	r1, #1
    a976:	4618      	mov	r0, r3
    a978:	4b49      	ldr	r3, [pc, #292]	; (aaa0 <_usb_d_dev_ep_enable+0x210>)
    a97a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    a97c:	7efb      	ldrb	r3, [r7, #27]
    a97e:	2100      	movs	r1, #0
    a980:	4618      	mov	r0, r3
    a982:	4b48      	ldr	r3, [pc, #288]	; (aaa4 <_usb_d_dev_ep_enable+0x214>)
    a984:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    a986:	7efb      	ldrb	r3, [r7, #27]
    a988:	2101      	movs	r1, #1
    a98a:	4618      	mov	r0, r3
    a98c:	4b45      	ldr	r3, [pc, #276]	; (aaa4 <_usb_d_dev_ep_enable+0x214>)
    a98e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    a990:	6978      	ldr	r0, [r7, #20]
    a992:	4b45      	ldr	r3, [pc, #276]	; (aaa8 <_usb_d_dev_ep_enable+0x218>)
    a994:	4798      	blx	r3
    a996:	e06f      	b.n	aa78 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    a998:	7ebb      	ldrb	r3, [r7, #26]
    a99a:	2b00      	cmp	r3, #0
    a99c:	d038      	beq.n	aa10 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    a99e:	7cfb      	ldrb	r3, [r7, #19]
    a9a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a9a4:	2b00      	cmp	r3, #0
    a9a6:	d002      	beq.n	a9ae <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    a9a8:	f06f 0313 	mvn.w	r3, #19
    a9ac:	e065      	b.n	aa7a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    a9ae:	697b      	ldr	r3, [r7, #20]
    a9b0:	7cdb      	ldrb	r3, [r3, #19]
    a9b2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    a9b6:	b2db      	uxtb	r3, r3
    a9b8:	011b      	lsls	r3, r3, #4
    a9ba:	b2db      	uxtb	r3, r3
    a9bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a9c0:	b2da      	uxtb	r2, r3
    a9c2:	7cfb      	ldrb	r3, [r7, #19]
    a9c4:	4313      	orrs	r3, r2
    a9c6:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    a9c8:	7cfa      	ldrb	r2, [r7, #19]
    a9ca:	7efb      	ldrb	r3, [r7, #27]
    a9cc:	4619      	mov	r1, r3
    a9ce:	69f8      	ldr	r0, [r7, #28]
    a9d0:	4b2f      	ldr	r3, [pc, #188]	; (aa90 <_usb_d_dev_ep_enable+0x200>)
    a9d2:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    a9d4:	68fb      	ldr	r3, [r7, #12]
    a9d6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    a9da:	697b      	ldr	r3, [r7, #20]
    a9dc:	8a1b      	ldrh	r3, [r3, #16]
    a9de:	f3c3 050d 	ubfx	r5, r3, #0, #14
    a9e2:	697b      	ldr	r3, [r7, #20]
    a9e4:	8a1b      	ldrh	r3, [r3, #16]
    a9e6:	4618      	mov	r0, r3
    a9e8:	4b2b      	ldr	r3, [pc, #172]	; (aa98 <_usb_d_dev_ep_enable+0x208>)
    a9ea:	4798      	blx	r3
    a9ec:	4603      	mov	r3, r0
    a9ee:	071b      	lsls	r3, r3, #28
    a9f0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    a9f4:	432b      	orrs	r3, r5
    a9f6:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a9f8:	7efb      	ldrb	r3, [r7, #27]
    a9fa:	2200      	movs	r2, #0
    a9fc:	2101      	movs	r1, #1
    a9fe:	4618      	mov	r0, r3
    aa00:	4b27      	ldr	r3, [pc, #156]	; (aaa0 <_usb_d_dev_ep_enable+0x210>)
    aa02:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    aa04:	7efb      	ldrb	r3, [r7, #27]
    aa06:	2101      	movs	r1, #1
    aa08:	4618      	mov	r0, r3
    aa0a:	4b26      	ldr	r3, [pc, #152]	; (aaa4 <_usb_d_dev_ep_enable+0x214>)
    aa0c:	4798      	blx	r3
    aa0e:	e033      	b.n	aa78 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    aa10:	7cfb      	ldrb	r3, [r7, #19]
    aa12:	f003 0307 	and.w	r3, r3, #7
    aa16:	2b00      	cmp	r3, #0
    aa18:	d002      	beq.n	aa20 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    aa1a:	f06f 0313 	mvn.w	r3, #19
    aa1e:	e02c      	b.n	aa7a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    aa20:	697b      	ldr	r3, [r7, #20]
    aa22:	7cdb      	ldrb	r3, [r3, #19]
    aa24:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aa28:	b2db      	uxtb	r3, r3
    aa2a:	461a      	mov	r2, r3
    aa2c:	7cfb      	ldrb	r3, [r7, #19]
    aa2e:	4313      	orrs	r3, r2
    aa30:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    aa32:	7cfa      	ldrb	r2, [r7, #19]
    aa34:	7efb      	ldrb	r3, [r7, #27]
    aa36:	4619      	mov	r1, r3
    aa38:	69f8      	ldr	r0, [r7, #28]
    aa3a:	4b15      	ldr	r3, [pc, #84]	; (aa90 <_usb_d_dev_ep_enable+0x200>)
    aa3c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aa3e:	697b      	ldr	r3, [r7, #20]
    aa40:	8a1b      	ldrh	r3, [r3, #16]
    aa42:	039b      	lsls	r3, r3, #14
    aa44:	4c13      	ldr	r4, [pc, #76]	; (aa94 <_usb_d_dev_ep_enable+0x204>)
    aa46:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    aa48:	697b      	ldr	r3, [r7, #20]
    aa4a:	8a1b      	ldrh	r3, [r3, #16]
    aa4c:	4618      	mov	r0, r3
    aa4e:	4b12      	ldr	r3, [pc, #72]	; (aa98 <_usb_d_dev_ep_enable+0x208>)
    aa50:	4798      	blx	r3
    aa52:	4603      	mov	r3, r0
    aa54:	071b      	lsls	r3, r3, #28
    aa56:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    aa5a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aa5e:	68fb      	ldr	r3, [r7, #12]
    aa60:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    aa62:	7efb      	ldrb	r3, [r7, #27]
    aa64:	2200      	movs	r2, #0
    aa66:	2100      	movs	r1, #0
    aa68:	4618      	mov	r0, r3
    aa6a:	4b0c      	ldr	r3, [pc, #48]	; (aa9c <_usb_d_dev_ep_enable+0x20c>)
    aa6c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    aa6e:	7efb      	ldrb	r3, [r7, #27]
    aa70:	2100      	movs	r1, #0
    aa72:	4618      	mov	r0, r3
    aa74:	4b0b      	ldr	r3, [pc, #44]	; (aaa4 <_usb_d_dev_ep_enable+0x214>)
    aa76:	4798      	blx	r3
	}

	return USB_OK;
    aa78:	2300      	movs	r3, #0
}
    aa7a:	4618      	mov	r0, r3
    aa7c:	3720      	adds	r7, #32
    aa7e:	46bd      	mov	sp, r7
    aa80:	bdb0      	pop	{r4, r5, r7, pc}
    aa82:	bf00      	nop
    aa84:	000096a9 	.word	0x000096a9
    aa88:	00008d2f 	.word	0x00008d2f
    aa8c:	2000337c 	.word	0x2000337c
    aa90:	00008d05 	.word	0x00008d05
    aa94:	0fffc000 	.word	0x0fffc000
    aa98:	00009645 	.word	0x00009645
    aa9c:	000095ed 	.word	0x000095ed
    aaa0:	00009595 	.word	0x00009595
    aaa4:	0000955d 	.word	0x0000955d
    aaa8:	0000a601 	.word	0x0000a601

0000aaac <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    aaac:	b580      	push	{r7, lr}
    aaae:	b084      	sub	sp, #16
    aab0:	af00      	add	r7, sp, #0
    aab2:	6078      	str	r0, [r7, #4]
    aab4:	460b      	mov	r3, r1
    aab6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aab8:	687b      	ldr	r3, [r7, #4]
    aaba:	7c9b      	ldrb	r3, [r3, #18]
    aabc:	f003 030f 	and.w	r3, r3, #15
    aac0:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    aac2:	78fa      	ldrb	r2, [r7, #3]
    aac4:	7bfb      	ldrb	r3, [r7, #15]
    aac6:	4611      	mov	r1, r2
    aac8:	4618      	mov	r0, r3
    aaca:	4b03      	ldr	r3, [pc, #12]	; (aad8 <_usb_d_dev_ep_stall_get+0x2c>)
    aacc:	4798      	blx	r3
    aace:	4603      	mov	r3, r0
}
    aad0:	4618      	mov	r0, r3
    aad2:	3710      	adds	r7, #16
    aad4:	46bd      	mov	sp, r7
    aad6:	bd80      	pop	{r7, pc}
    aad8:	0000919d 	.word	0x0000919d

0000aadc <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    aadc:	b580      	push	{r7, lr}
    aade:	b084      	sub	sp, #16
    aae0:	af00      	add	r7, sp, #0
    aae2:	6078      	str	r0, [r7, #4]
    aae4:	460b      	mov	r3, r1
    aae6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aae8:	687b      	ldr	r3, [r7, #4]
    aaea:	7c9b      	ldrb	r3, [r3, #18]
    aaec:	f003 030f 	and.w	r3, r3, #15
    aaf0:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    aaf2:	78f9      	ldrb	r1, [r7, #3]
    aaf4:	7bfb      	ldrb	r3, [r7, #15]
    aaf6:	2201      	movs	r2, #1
    aaf8:	4618      	mov	r0, r3
    aafa:	4b0a      	ldr	r3, [pc, #40]	; (ab24 <_usb_d_dev_ep_stall_set+0x48>)
    aafc:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    aafe:	78fb      	ldrb	r3, [r7, #3]
    ab00:	2220      	movs	r2, #32
    ab02:	409a      	lsls	r2, r3
    ab04:	7bfb      	ldrb	r3, [r7, #15]
    ab06:	4611      	mov	r1, r2
    ab08:	4618      	mov	r0, r3
    ab0a:	4b07      	ldr	r3, [pc, #28]	; (ab28 <_usb_d_dev_ep_stall_set+0x4c>)
    ab0c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    ab0e:	687a      	ldr	r2, [r7, #4]
    ab10:	7cd3      	ldrb	r3, [r2, #19]
    ab12:	f043 0308 	orr.w	r3, r3, #8
    ab16:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    ab18:	2300      	movs	r3, #0
}
    ab1a:	4618      	mov	r0, r3
    ab1c:	3710      	adds	r7, #16
    ab1e:	46bd      	mov	sp, r7
    ab20:	bd80      	pop	{r7, pc}
    ab22:	bf00      	nop
    ab24:	00009145 	.word	0x00009145
    ab28:	000090c5 	.word	0x000090c5

0000ab2c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    ab2c:	b580      	push	{r7, lr}
    ab2e:	b084      	sub	sp, #16
    ab30:	af00      	add	r7, sp, #0
    ab32:	6078      	str	r0, [r7, #4]
    ab34:	460b      	mov	r3, r1
    ab36:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    ab38:	687b      	ldr	r3, [r7, #4]
    ab3a:	7c9b      	ldrb	r3, [r3, #18]
    ab3c:	f003 030f 	and.w	r3, r3, #15
    ab40:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    ab42:	78fa      	ldrb	r2, [r7, #3]
    ab44:	7bfb      	ldrb	r3, [r7, #15]
    ab46:	4611      	mov	r1, r2
    ab48:	4618      	mov	r0, r3
    ab4a:	4b28      	ldr	r3, [pc, #160]	; (abec <_usb_d_dev_ep_stall_clr+0xc0>)
    ab4c:	4798      	blx	r3
    ab4e:	4603      	mov	r3, r0
    ab50:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    ab52:	7bbb      	ldrb	r3, [r7, #14]
    ab54:	f083 0301 	eor.w	r3, r3, #1
    ab58:	b2db      	uxtb	r3, r3
    ab5a:	2b00      	cmp	r3, #0
    ab5c:	d001      	beq.n	ab62 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    ab5e:	2300      	movs	r3, #0
    ab60:	e040      	b.n	abe4 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    ab62:	78f9      	ldrb	r1, [r7, #3]
    ab64:	7bfb      	ldrb	r3, [r7, #15]
    ab66:	2200      	movs	r2, #0
    ab68:	4618      	mov	r0, r3
    ab6a:	4b21      	ldr	r3, [pc, #132]	; (abf0 <_usb_d_dev_ep_stall_clr+0xc4>)
    ab6c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    ab6e:	78fb      	ldrb	r3, [r7, #3]
    ab70:	2220      	movs	r2, #32
    ab72:	409a      	lsls	r2, r3
    ab74:	7bfb      	ldrb	r3, [r7, #15]
    ab76:	4611      	mov	r1, r2
    ab78:	4618      	mov	r0, r3
    ab7a:	4b1e      	ldr	r3, [pc, #120]	; (abf4 <_usb_d_dev_ep_stall_clr+0xc8>)
    ab7c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    ab7e:	78fa      	ldrb	r2, [r7, #3]
    ab80:	7bfb      	ldrb	r3, [r7, #15]
    ab82:	4611      	mov	r1, r2
    ab84:	4618      	mov	r0, r3
    ab86:	4b1c      	ldr	r3, [pc, #112]	; (abf8 <_usb_d_dev_ep_stall_clr+0xcc>)
    ab88:	4798      	blx	r3
    ab8a:	4603      	mov	r3, r0
    ab8c:	2b00      	cmp	r3, #0
    ab8e:	d00b      	beq.n	aba8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    ab90:	78fa      	ldrb	r2, [r7, #3]
    ab92:	7bfb      	ldrb	r3, [r7, #15]
    ab94:	4611      	mov	r1, r2
    ab96:	4618      	mov	r0, r3
    ab98:	4b18      	ldr	r3, [pc, #96]	; (abfc <_usb_d_dev_ep_stall_clr+0xd0>)
    ab9a:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    ab9c:	78f9      	ldrb	r1, [r7, #3]
    ab9e:	7bfb      	ldrb	r3, [r7, #15]
    aba0:	2200      	movs	r2, #0
    aba2:	4618      	mov	r0, r3
    aba4:	4b16      	ldr	r3, [pc, #88]	; (ac00 <_usb_d_dev_ep_stall_clr+0xd4>)
    aba6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    aba8:	687b      	ldr	r3, [r7, #4]
    abaa:	7cdb      	ldrb	r3, [r3, #19]
    abac:	f003 0307 	and.w	r3, r3, #7
    abb0:	b2db      	uxtb	r3, r3
    abb2:	2b01      	cmp	r3, #1
    abb4:	d110      	bne.n	abd8 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    abb6:	7bfb      	ldrb	r3, [r7, #15]
    abb8:	4619      	mov	r1, r3
    abba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    abbe:	4b11      	ldr	r3, [pc, #68]	; (ac04 <_usb_d_dev_ep_stall_clr+0xd8>)
    abc0:	4798      	blx	r3
    abc2:	4603      	mov	r3, r0
    abc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    abc8:	2b00      	cmp	r3, #0
    abca:	d10a      	bne.n	abe2 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    abcc:	687a      	ldr	r2, [r7, #4]
    abce:	7cd3      	ldrb	r3, [r2, #19]
    abd0:	f36f 03c3 	bfc	r3, #3, #1
    abd4:	74d3      	strb	r3, [r2, #19]
    abd6:	e004      	b.n	abe2 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    abd8:	687a      	ldr	r2, [r7, #4]
    abda:	7cd3      	ldrb	r3, [r2, #19]
    abdc:	f36f 03c3 	bfc	r3, #3, #1
    abe0:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    abe2:	2300      	movs	r3, #0
}
    abe4:	4618      	mov	r0, r3
    abe6:	3710      	adds	r7, #16
    abe8:	46bd      	mov	sp, r7
    abea:	bd80      	pop	{r7, pc}
    abec:	0000919d 	.word	0x0000919d
    abf0:	00009145 	.word	0x00009145
    abf4:	000090ed 	.word	0x000090ed
    abf8:	000091e1 	.word	0x000091e1
    abfc:	00009225 	.word	0x00009225
    ac00:	00009311 	.word	0x00009311
    ac04:	00008bcd 	.word	0x00008bcd

0000ac08 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    ac08:	b580      	push	{r7, lr}
    ac0a:	b086      	sub	sp, #24
    ac0c:	af00      	add	r7, sp, #0
    ac0e:	4603      	mov	r3, r0
    ac10:	460a      	mov	r2, r1
    ac12:	71fb      	strb	r3, [r7, #7]
    ac14:	4613      	mov	r3, r2
    ac16:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    ac18:	79fb      	ldrb	r3, [r7, #7]
    ac1a:	f003 030f 	and.w	r3, r3, #15
    ac1e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ac20:	79fb      	ldrb	r3, [r7, #7]
    ac22:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ac26:	2b00      	cmp	r3, #0
    ac28:	bf14      	ite	ne
    ac2a:	2301      	movne	r3, #1
    ac2c:	2300      	moveq	r3, #0
    ac2e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ac30:	7cba      	ldrb	r2, [r7, #18]
    ac32:	7cfb      	ldrb	r3, [r7, #19]
    ac34:	4611      	mov	r1, r2
    ac36:	4618      	mov	r0, r3
    ac38:	4b13      	ldr	r3, [pc, #76]	; (ac88 <_usb_d_dev_ep_stall+0x80>)
    ac3a:	4798      	blx	r3
    ac3c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ac3e:	7cfb      	ldrb	r3, [r7, #19]
    ac40:	2b04      	cmp	r3, #4
    ac42:	d902      	bls.n	ac4a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    ac44:	f06f 0311 	mvn.w	r3, #17
    ac48:	e01a      	b.n	ac80 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    ac4a:	79bb      	ldrb	r3, [r7, #6]
    ac4c:	2b01      	cmp	r3, #1
    ac4e:	d106      	bne.n	ac5e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    ac50:	7cbb      	ldrb	r3, [r7, #18]
    ac52:	4619      	mov	r1, r3
    ac54:	68f8      	ldr	r0, [r7, #12]
    ac56:	4b0d      	ldr	r3, [pc, #52]	; (ac8c <_usb_d_dev_ep_stall+0x84>)
    ac58:	4798      	blx	r3
    ac5a:	6178      	str	r0, [r7, #20]
    ac5c:	e00f      	b.n	ac7e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    ac5e:	79bb      	ldrb	r3, [r7, #6]
    ac60:	2b00      	cmp	r3, #0
    ac62:	d106      	bne.n	ac72 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    ac64:	7cbb      	ldrb	r3, [r7, #18]
    ac66:	4619      	mov	r1, r3
    ac68:	68f8      	ldr	r0, [r7, #12]
    ac6a:	4b09      	ldr	r3, [pc, #36]	; (ac90 <_usb_d_dev_ep_stall+0x88>)
    ac6c:	4798      	blx	r3
    ac6e:	6178      	str	r0, [r7, #20]
    ac70:	e005      	b.n	ac7e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    ac72:	7cbb      	ldrb	r3, [r7, #18]
    ac74:	4619      	mov	r1, r3
    ac76:	68f8      	ldr	r0, [r7, #12]
    ac78:	4b06      	ldr	r3, [pc, #24]	; (ac94 <_usb_d_dev_ep_stall+0x8c>)
    ac7a:	4798      	blx	r3
    ac7c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    ac7e:	697b      	ldr	r3, [r7, #20]
}
    ac80:	4618      	mov	r0, r3
    ac82:	3718      	adds	r7, #24
    ac84:	46bd      	mov	sp, r7
    ac86:	bd80      	pop	{r7, pc}
    ac88:	000096a9 	.word	0x000096a9
    ac8c:	0000aadd 	.word	0x0000aadd
    ac90:	0000ab2d 	.word	0x0000ab2d
    ac94:	0000aaad 	.word	0x0000aaad

0000ac98 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    ac98:	b580      	push	{r7, lr}
    ac9a:	b082      	sub	sp, #8
    ac9c:	af00      	add	r7, sp, #0
    ac9e:	6078      	str	r0, [r7, #4]
    aca0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    aca2:	687b      	ldr	r3, [r7, #4]
    aca4:	7c9b      	ldrb	r3, [r3, #18]
    aca6:	2bff      	cmp	r3, #255	; 0xff
    aca8:	d014      	beq.n	acd4 <_usb_d_dev_trans_done+0x3c>
    acaa:	687b      	ldr	r3, [r7, #4]
    acac:	7cdb      	ldrb	r3, [r3, #19]
    acae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    acb2:	b2db      	uxtb	r3, r3
    acb4:	2b00      	cmp	r3, #0
    acb6:	d00d      	beq.n	acd4 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    acb8:	687a      	ldr	r2, [r7, #4]
    acba:	7cd3      	ldrb	r3, [r2, #19]
    acbc:	f36f 1386 	bfc	r3, #6, #1
    acc0:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    acc2:	4b06      	ldr	r3, [pc, #24]	; (acdc <_usb_d_dev_trans_done+0x44>)
    acc4:	691b      	ldr	r3, [r3, #16]
    acc6:	687a      	ldr	r2, [r7, #4]
    acc8:	7c90      	ldrb	r0, [r2, #18]
    acca:	687a      	ldr	r2, [r7, #4]
    accc:	6892      	ldr	r2, [r2, #8]
    acce:	6839      	ldr	r1, [r7, #0]
    acd0:	4798      	blx	r3
    acd2:	e000      	b.n	acd6 <_usb_d_dev_trans_done+0x3e>
		return;
    acd4:	bf00      	nop
}
    acd6:	3708      	adds	r7, #8
    acd8:	46bd      	mov	sp, r7
    acda:	bd80      	pop	{r7, pc}
    acdc:	200032b4 	.word	0x200032b4

0000ace0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    ace0:	b580      	push	{r7, lr}
    ace2:	b086      	sub	sp, #24
    ace4:	af00      	add	r7, sp, #0
    ace6:	60f8      	str	r0, [r7, #12]
    ace8:	460b      	mov	r3, r1
    acea:	607a      	str	r2, [r7, #4]
    acec:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    acee:	68fb      	ldr	r3, [r7, #12]
    acf0:	7c9b      	ldrb	r3, [r3, #18]
    acf2:	f003 030f 	and.w	r3, r3, #15
    acf6:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    acf8:	4b1f      	ldr	r3, [pc, #124]	; (ad78 <_usb_d_dev_trans_stop+0x98>)
    acfa:	881b      	ldrh	r3, [r3, #0]
    acfc:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    acfe:	68fb      	ldr	r3, [r7, #12]
    ad00:	7c9b      	ldrb	r3, [r3, #18]
    ad02:	2bff      	cmp	r3, #255	; 0xff
    ad04:	d033      	beq.n	ad6e <_usb_d_dev_trans_stop+0x8e>
    ad06:	68fb      	ldr	r3, [r7, #12]
    ad08:	7cdb      	ldrb	r3, [r3, #19]
    ad0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ad0e:	b2db      	uxtb	r3, r3
    ad10:	2b00      	cmp	r3, #0
    ad12:	d02c      	beq.n	ad6e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    ad14:	7afb      	ldrb	r3, [r7, #11]
    ad16:	2b00      	cmp	r3, #0
    ad18:	d006      	beq.n	ad28 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    ad1a:	7dfb      	ldrb	r3, [r7, #23]
    ad1c:	2200      	movs	r2, #0
    ad1e:	2101      	movs	r1, #1
    ad20:	4618      	mov	r0, r3
    ad22:	4b16      	ldr	r3, [pc, #88]	; (ad7c <_usb_d_dev_trans_stop+0x9c>)
    ad24:	4798      	blx	r3
    ad26:	e005      	b.n	ad34 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ad28:	7dfb      	ldrb	r3, [r7, #23]
    ad2a:	2200      	movs	r2, #0
    ad2c:	2100      	movs	r1, #0
    ad2e:	4618      	mov	r0, r3
    ad30:	4b13      	ldr	r3, [pc, #76]	; (ad80 <_usb_d_dev_trans_stop+0xa0>)
    ad32:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    ad34:	7afb      	ldrb	r3, [r7, #11]
    ad36:	f107 0218 	add.w	r2, r7, #24
    ad3a:	4413      	add	r3, r2
    ad3c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    ad40:	461a      	mov	r2, r3
    ad42:	7dfb      	ldrb	r3, [r7, #23]
    ad44:	4611      	mov	r1, r2
    ad46:	4618      	mov	r0, r3
    ad48:	4b0e      	ldr	r3, [pc, #56]	; (ad84 <_usb_d_dev_trans_stop+0xa4>)
    ad4a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    ad4c:	7afb      	ldrb	r3, [r7, #11]
    ad4e:	f107 0218 	add.w	r2, r7, #24
    ad52:	4413      	add	r3, r2
    ad54:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    ad58:	461a      	mov	r2, r3
    ad5a:	7dfb      	ldrb	r3, [r7, #23]
    ad5c:	4611      	mov	r1, r2
    ad5e:	4618      	mov	r0, r3
    ad60:	4b09      	ldr	r3, [pc, #36]	; (ad88 <_usb_d_dev_trans_stop+0xa8>)
    ad62:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    ad64:	6879      	ldr	r1, [r7, #4]
    ad66:	68f8      	ldr	r0, [r7, #12]
    ad68:	4b08      	ldr	r3, [pc, #32]	; (ad8c <_usb_d_dev_trans_stop+0xac>)
    ad6a:	4798      	blx	r3
    ad6c:	e000      	b.n	ad70 <_usb_d_dev_trans_stop+0x90>
		return;
    ad6e:	bf00      	nop
}
    ad70:	3718      	adds	r7, #24
    ad72:	46bd      	mov	sp, r7
    ad74:	bd80      	pop	{r7, pc}
    ad76:	bf00      	nop
    ad78:	00011674 	.word	0x00011674
    ad7c:	00009595 	.word	0x00009595
    ad80:	000095ed 	.word	0x000095ed
    ad84:	0000909d 	.word	0x0000909d
    ad88:	000090ed 	.word	0x000090ed
    ad8c:	0000ac99 	.word	0x0000ac99

0000ad90 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    ad90:	b580      	push	{r7, lr}
    ad92:	b086      	sub	sp, #24
    ad94:	af00      	add	r7, sp, #0
    ad96:	4603      	mov	r3, r0
    ad98:	6039      	str	r1, [r7, #0]
    ad9a:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    ad9c:	79fb      	ldrb	r3, [r7, #7]
    ad9e:	f003 030f 	and.w	r3, r3, #15
    ada2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    ada4:	7dfb      	ldrb	r3, [r7, #23]
    ada6:	015b      	lsls	r3, r3, #5
    ada8:	4a1e      	ldr	r2, [pc, #120]	; (ae24 <_usb_d_dev_ep_read_req+0x94>)
    adaa:	4413      	add	r3, r2
    adac:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    adae:	693b      	ldr	r3, [r7, #16]
    adb0:	681b      	ldr	r3, [r3, #0]
    adb2:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    adb4:	693b      	ldr	r3, [r7, #16]
    adb6:	685b      	ldr	r3, [r3, #4]
    adb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    adbc:	b29b      	uxth	r3, r3
    adbe:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    adc0:	7dfb      	ldrb	r3, [r7, #23]
    adc2:	2b04      	cmp	r3, #4
    adc4:	d802      	bhi.n	adcc <_usb_d_dev_ep_read_req+0x3c>
    adc6:	683b      	ldr	r3, [r7, #0]
    adc8:	2b00      	cmp	r3, #0
    adca:	d102      	bne.n	add2 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    adcc:	f06f 0311 	mvn.w	r3, #17
    add0:	e023      	b.n	ae1a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    add2:	7dfb      	ldrb	r3, [r7, #23]
    add4:	4618      	mov	r0, r3
    add6:	4b14      	ldr	r3, [pc, #80]	; (ae28 <_usb_d_dev_ep_read_req+0x98>)
    add8:	4798      	blx	r3
    adda:	4603      	mov	r3, r0
    addc:	f083 0301 	eor.w	r3, r3, #1
    ade0:	b2db      	uxtb	r3, r3
    ade2:	2b00      	cmp	r3, #0
    ade4:	d002      	beq.n	adec <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    ade6:	f06f 0312 	mvn.w	r3, #18
    adea:	e016      	b.n	ae1a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    adec:	7dfb      	ldrb	r3, [r7, #23]
    adee:	4618      	mov	r0, r3
    adf0:	4b0e      	ldr	r3, [pc, #56]	; (ae2c <_usb_d_dev_ep_read_req+0x9c>)
    adf2:	4798      	blx	r3
    adf4:	4603      	mov	r3, r0
    adf6:	f083 0301 	eor.w	r3, r3, #1
    adfa:	b2db      	uxtb	r3, r3
    adfc:	2b00      	cmp	r3, #0
    adfe:	d001      	beq.n	ae04 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    ae00:	2300      	movs	r3, #0
    ae02:	e00a      	b.n	ae1a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    ae04:	68fb      	ldr	r3, [r7, #12]
    ae06:	2208      	movs	r2, #8
    ae08:	4619      	mov	r1, r3
    ae0a:	6838      	ldr	r0, [r7, #0]
    ae0c:	4b08      	ldr	r3, [pc, #32]	; (ae30 <_usb_d_dev_ep_read_req+0xa0>)
    ae0e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    ae10:	7dfb      	ldrb	r3, [r7, #23]
    ae12:	4618      	mov	r0, r3
    ae14:	4b07      	ldr	r3, [pc, #28]	; (ae34 <_usb_d_dev_ep_read_req+0xa4>)
    ae16:	4798      	blx	r3

	return bytes;
    ae18:	897b      	ldrh	r3, [r7, #10]
}
    ae1a:	4618      	mov	r0, r3
    ae1c:	3718      	adds	r7, #24
    ae1e:	46bd      	mov	sp, r7
    ae20:	bd80      	pop	{r7, pc}
    ae22:	bf00      	nop
    ae24:	2000337c 	.word	0x2000337c
    ae28:	00009115 	.word	0x00009115
    ae2c:	000092c1 	.word	0x000092c1
    ae30:	00010ce1 	.word	0x00010ce1
    ae34:	000092f1 	.word	0x000092f1

0000ae38 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    ae38:	b580      	push	{r7, lr}
    ae3a:	b086      	sub	sp, #24
    ae3c:	af00      	add	r7, sp, #0
    ae3e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    ae40:	687b      	ldr	r3, [r7, #4]
    ae42:	7a1b      	ldrb	r3, [r3, #8]
    ae44:	f003 030f 	and.w	r3, r3, #15
    ae48:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    ae4a:	687b      	ldr	r3, [r7, #4]
    ae4c:	7a1b      	ldrb	r3, [r3, #8]
    ae4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ae52:	2b00      	cmp	r3, #0
    ae54:	bf14      	ite	ne
    ae56:	2301      	movne	r3, #1
    ae58:	2300      	moveq	r3, #0
    ae5a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ae5c:	7d7a      	ldrb	r2, [r7, #21]
    ae5e:	7dbb      	ldrb	r3, [r7, #22]
    ae60:	4611      	mov	r1, r2
    ae62:	4618      	mov	r0, r3
    ae64:	4b5f      	ldr	r3, [pc, #380]	; (afe4 <_usb_d_dev_ep_trans+0x1ac>)
    ae66:	4798      	blx	r3
    ae68:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ae6a:	693b      	ldr	r3, [r7, #16]
    ae6c:	8a1b      	ldrh	r3, [r3, #16]
    ae6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ae72:	4293      	cmp	r3, r2
    ae74:	d004      	beq.n	ae80 <_usb_d_dev_ep_trans+0x48>
    ae76:	693b      	ldr	r3, [r7, #16]
    ae78:	8a1b      	ldrh	r3, [r3, #16]
    ae7a:	3b01      	subs	r3, #1
    ae7c:	b29b      	uxth	r3, r3
    ae7e:	e001      	b.n	ae84 <_usb_d_dev_ep_trans+0x4c>
    ae80:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ae84:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    ae86:	687b      	ldr	r3, [r7, #4]
    ae88:	685a      	ldr	r2, [r3, #4]
    ae8a:	89fb      	ldrh	r3, [r7, #14]
    ae8c:	4013      	ands	r3, r2
    ae8e:	2b00      	cmp	r3, #0
    ae90:	bf14      	ite	ne
    ae92:	2301      	movne	r3, #1
    ae94:	2300      	moveq	r3, #0
    ae96:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    ae98:	2300      	movs	r3, #0
    ae9a:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ae9c:	7dbb      	ldrb	r3, [r7, #22]
    ae9e:	2b04      	cmp	r3, #4
    aea0:	d902      	bls.n	aea8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    aea2:	f06f 0311 	mvn.w	r3, #17
    aea6:	e098      	b.n	afda <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    aea8:	687b      	ldr	r3, [r7, #4]
    aeaa:	681b      	ldr	r3, [r3, #0]
    aeac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    aeb0:	d31a      	bcc.n	aee8 <_usb_d_dev_ep_trans+0xb0>
    aeb2:	687b      	ldr	r3, [r7, #4]
    aeb4:	681b      	ldr	r3, [r3, #0]
    aeb6:	461a      	mov	r2, r3
    aeb8:	687b      	ldr	r3, [r7, #4]
    aeba:	685b      	ldr	r3, [r3, #4]
    aebc:	4413      	add	r3, r2
    aebe:	4a4a      	ldr	r2, [pc, #296]	; (afe8 <_usb_d_dev_ep_trans+0x1b0>)
    aec0:	4293      	cmp	r3, r2
    aec2:	d811      	bhi.n	aee8 <_usb_d_dev_ep_trans+0xb0>
    aec4:	687b      	ldr	r3, [r7, #4]
    aec6:	681b      	ldr	r3, [r3, #0]
    aec8:	f003 0303 	and.w	r3, r3, #3
    aecc:	2b00      	cmp	r3, #0
    aece:	d10b      	bne.n	aee8 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    aed0:	7d7b      	ldrb	r3, [r7, #21]
    aed2:	f083 0301 	eor.w	r3, r3, #1
    aed6:	b2db      	uxtb	r3, r3
    aed8:	2b00      	cmp	r3, #0
    aeda:	d00e      	beq.n	aefa <_usb_d_dev_ep_trans+0xc2>
    aedc:	687b      	ldr	r3, [r7, #4]
    aede:	685b      	ldr	r3, [r3, #4]
    aee0:	693a      	ldr	r2, [r7, #16]
    aee2:	8a12      	ldrh	r2, [r2, #16]
    aee4:	4293      	cmp	r3, r2
    aee6:	d208      	bcs.n	aefa <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    aee8:	693b      	ldr	r3, [r7, #16]
    aeea:	68db      	ldr	r3, [r3, #12]
    aeec:	2b00      	cmp	r3, #0
    aeee:	d102      	bne.n	aef6 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    aef0:	f06f 0312 	mvn.w	r3, #18
    aef4:	e071      	b.n	afda <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    aef6:	2301      	movs	r3, #1
    aef8:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    aefa:	7d7b      	ldrb	r3, [r7, #21]
    aefc:	f083 0301 	eor.w	r3, r3, #1
    af00:	b2db      	uxtb	r3, r3
    af02:	2b00      	cmp	r3, #0
    af04:	d009      	beq.n	af1a <_usb_d_dev_ep_trans+0xe2>
    af06:	7b7b      	ldrb	r3, [r7, #13]
    af08:	2b00      	cmp	r3, #0
    af0a:	d006      	beq.n	af1a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    af0c:	693b      	ldr	r3, [r7, #16]
    af0e:	68db      	ldr	r3, [r3, #12]
    af10:	2b00      	cmp	r3, #0
    af12:	d102      	bne.n	af1a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    af14:	f06f 0311 	mvn.w	r3, #17
    af18:	e05f      	b.n	afda <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    af1a:	693b      	ldr	r3, [r7, #16]
    af1c:	7cdb      	ldrb	r3, [r3, #19]
    af1e:	f003 0308 	and.w	r3, r3, #8
    af22:	b2db      	uxtb	r3, r3
    af24:	2b00      	cmp	r3, #0
    af26:	d001      	beq.n	af2c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    af28:	2302      	movs	r3, #2
    af2a:	e056      	b.n	afda <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    af2c:	f107 0308 	add.w	r3, r7, #8
    af30:	4618      	mov	r0, r3
    af32:	4b2e      	ldr	r3, [pc, #184]	; (afec <_usb_d_dev_ep_trans+0x1b4>)
    af34:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    af36:	693b      	ldr	r3, [r7, #16]
    af38:	7cdb      	ldrb	r3, [r3, #19]
    af3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    af3e:	b2db      	uxtb	r3, r3
    af40:	2b00      	cmp	r3, #0
    af42:	d006      	beq.n	af52 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    af44:	f107 0308 	add.w	r3, r7, #8
    af48:	4618      	mov	r0, r3
    af4a:	4b29      	ldr	r3, [pc, #164]	; (aff0 <_usb_d_dev_ep_trans+0x1b8>)
    af4c:	4798      	blx	r3
		return USB_BUSY;
    af4e:	2301      	movs	r3, #1
    af50:	e043      	b.n	afda <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    af52:	693a      	ldr	r2, [r7, #16]
    af54:	7cd3      	ldrb	r3, [r2, #19]
    af56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    af5a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    af5c:	f107 0308 	add.w	r3, r7, #8
    af60:	4618      	mov	r0, r3
    af62:	4b23      	ldr	r3, [pc, #140]	; (aff0 <_usb_d_dev_ep_trans+0x1b8>)
    af64:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    af66:	687b      	ldr	r3, [r7, #4]
    af68:	681a      	ldr	r2, [r3, #0]
    af6a:	693b      	ldr	r3, [r7, #16]
    af6c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    af6e:	687b      	ldr	r3, [r7, #4]
    af70:	685a      	ldr	r2, [r3, #4]
    af72:	693b      	ldr	r3, [r7, #16]
    af74:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    af76:	693b      	ldr	r3, [r7, #16]
    af78:	2200      	movs	r2, #0
    af7a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    af7c:	693a      	ldr	r2, [r7, #16]
    af7e:	7cd3      	ldrb	r3, [r2, #19]
    af80:	7d79      	ldrb	r1, [r7, #21]
    af82:	f361 13c7 	bfi	r3, r1, #7, #1
    af86:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    af88:	693a      	ldr	r2, [r7, #16]
    af8a:	7cd3      	ldrb	r3, [r2, #19]
    af8c:	7df9      	ldrb	r1, [r7, #23]
    af8e:	f361 1345 	bfi	r3, r1, #5, #1
    af92:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    af94:	687b      	ldr	r3, [r7, #4]
    af96:	7a5b      	ldrb	r3, [r3, #9]
    af98:	2b00      	cmp	r3, #0
    af9a:	d007      	beq.n	afac <_usb_d_dev_ep_trans+0x174>
    af9c:	7b7b      	ldrb	r3, [r7, #13]
    af9e:	f083 0301 	eor.w	r3, r3, #1
    afa2:	b2db      	uxtb	r3, r3
    afa4:	2b00      	cmp	r3, #0
    afa6:	d001      	beq.n	afac <_usb_d_dev_ep_trans+0x174>
    afa8:	2301      	movs	r3, #1
    afaa:	e000      	b.n	afae <_usb_d_dev_ep_trans+0x176>
    afac:	2300      	movs	r3, #0
    afae:	b2db      	uxtb	r3, r3
    afb0:	f003 0301 	and.w	r3, r3, #1
    afb4:	b2d9      	uxtb	r1, r3
    afb6:	693a      	ldr	r2, [r7, #16]
    afb8:	7cd3      	ldrb	r3, [r2, #19]
    afba:	f361 1304 	bfi	r3, r1, #4, #1
    afbe:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    afc0:	7d7b      	ldrb	r3, [r7, #21]
    afc2:	2b00      	cmp	r3, #0
    afc4:	d004      	beq.n	afd0 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    afc6:	2100      	movs	r1, #0
    afc8:	6938      	ldr	r0, [r7, #16]
    afca:	4b0a      	ldr	r3, [pc, #40]	; (aff4 <_usb_d_dev_ep_trans+0x1bc>)
    afcc:	4798      	blx	r3
    afce:	e003      	b.n	afd8 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    afd0:	2100      	movs	r1, #0
    afd2:	6938      	ldr	r0, [r7, #16]
    afd4:	4b08      	ldr	r3, [pc, #32]	; (aff8 <_usb_d_dev_ep_trans+0x1c0>)
    afd6:	4798      	blx	r3
	}

	return ERR_NONE;
    afd8:	2300      	movs	r3, #0
}
    afda:	4618      	mov	r0, r3
    afdc:	3718      	adds	r7, #24
    afde:	46bd      	mov	sp, r7
    afe0:	bd80      	pop	{r7, pc}
    afe2:	bf00      	nop
    afe4:	000096a9 	.word	0x000096a9
    afe8:	20041fff 	.word	0x20041fff
    afec:	0000b805 	.word	0x0000b805
    aff0:	0000b82b 	.word	0x0000b82b
    aff4:	00009971 	.word	0x00009971
    aff8:	00009b89 	.word	0x00009b89

0000affc <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    affc:	b580      	push	{r7, lr}
    affe:	b084      	sub	sp, #16
    b000:	af00      	add	r7, sp, #0
    b002:	4603      	mov	r3, r0
    b004:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b006:	79fb      	ldrb	r3, [r7, #7]
    b008:	f003 030f 	and.w	r3, r3, #15
    b00c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b00e:	79fb      	ldrb	r3, [r7, #7]
    b010:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b014:	2b00      	cmp	r3, #0
    b016:	bf14      	ite	ne
    b018:	2301      	movne	r3, #1
    b01a:	2300      	moveq	r3, #0
    b01c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b01e:	7bba      	ldrb	r2, [r7, #14]
    b020:	7bfb      	ldrb	r3, [r7, #15]
    b022:	4611      	mov	r1, r2
    b024:	4618      	mov	r0, r3
    b026:	4b08      	ldr	r3, [pc, #32]	; (b048 <_usb_d_dev_ep_abort+0x4c>)
    b028:	4798      	blx	r3
    b02a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b02c:	7bfb      	ldrb	r3, [r7, #15]
    b02e:	2b04      	cmp	r3, #4
    b030:	d806      	bhi.n	b040 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b032:	7bbb      	ldrb	r3, [r7, #14]
    b034:	2202      	movs	r2, #2
    b036:	4619      	mov	r1, r3
    b038:	68b8      	ldr	r0, [r7, #8]
    b03a:	4b04      	ldr	r3, [pc, #16]	; (b04c <_usb_d_dev_ep_abort+0x50>)
    b03c:	4798      	blx	r3
    b03e:	e000      	b.n	b042 <_usb_d_dev_ep_abort+0x46>
		return;
    b040:	bf00      	nop
}
    b042:	3710      	adds	r7, #16
    b044:	46bd      	mov	sp, r7
    b046:	bd80      	pop	{r7, pc}
    b048:	000096a9 	.word	0x000096a9
    b04c:	0000ace1 	.word	0x0000ace1

0000b050 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b050:	b480      	push	{r7}
    b052:	b085      	sub	sp, #20
    b054:	af00      	add	r7, sp, #0
    b056:	4603      	mov	r3, r0
    b058:	6039      	str	r1, [r7, #0]
    b05a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b05c:	683b      	ldr	r3, [r7, #0]
    b05e:	2b00      	cmp	r3, #0
    b060:	d001      	beq.n	b066 <_usb_d_dev_register_callback+0x16>
    b062:	683b      	ldr	r3, [r7, #0]
    b064:	e000      	b.n	b068 <_usb_d_dev_register_callback+0x18>
    b066:	4b0a      	ldr	r3, [pc, #40]	; (b090 <_usb_d_dev_register_callback+0x40>)
    b068:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b06a:	79fb      	ldrb	r3, [r7, #7]
    b06c:	2b01      	cmp	r3, #1
    b06e:	d103      	bne.n	b078 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b070:	4a08      	ldr	r2, [pc, #32]	; (b094 <_usb_d_dev_register_callback+0x44>)
    b072:	68fb      	ldr	r3, [r7, #12]
    b074:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b076:	e005      	b.n	b084 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b078:	79fb      	ldrb	r3, [r7, #7]
    b07a:	2b00      	cmp	r3, #0
    b07c:	d102      	bne.n	b084 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b07e:	4a05      	ldr	r2, [pc, #20]	; (b094 <_usb_d_dev_register_callback+0x44>)
    b080:	68fb      	ldr	r3, [r7, #12]
    b082:	6013      	str	r3, [r2, #0]
}
    b084:	bf00      	nop
    b086:	3714      	adds	r7, #20
    b088:	46bd      	mov	sp, r7
    b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b08e:	4770      	bx	lr
    b090:	00008f31 	.word	0x00008f31
    b094:	200032b4 	.word	0x200032b4

0000b098 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b098:	b480      	push	{r7}
    b09a:	b085      	sub	sp, #20
    b09c:	af00      	add	r7, sp, #0
    b09e:	4603      	mov	r3, r0
    b0a0:	6039      	str	r1, [r7, #0]
    b0a2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b0a4:	683b      	ldr	r3, [r7, #0]
    b0a6:	2b00      	cmp	r3, #0
    b0a8:	d001      	beq.n	b0ae <_usb_d_dev_register_ep_callback+0x16>
    b0aa:	683b      	ldr	r3, [r7, #0]
    b0ac:	e000      	b.n	b0b0 <_usb_d_dev_register_ep_callback+0x18>
    b0ae:	4b0e      	ldr	r3, [pc, #56]	; (b0e8 <_usb_d_dev_register_ep_callback+0x50>)
    b0b0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b0b2:	79fb      	ldrb	r3, [r7, #7]
    b0b4:	2b00      	cmp	r3, #0
    b0b6:	d103      	bne.n	b0c0 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b0b8:	4a0c      	ldr	r2, [pc, #48]	; (b0ec <_usb_d_dev_register_ep_callback+0x54>)
    b0ba:	68fb      	ldr	r3, [r7, #12]
    b0bc:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b0be:	e00c      	b.n	b0da <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b0c0:	79fb      	ldrb	r3, [r7, #7]
    b0c2:	2b01      	cmp	r3, #1
    b0c4:	d103      	bne.n	b0ce <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b0c6:	4a09      	ldr	r2, [pc, #36]	; (b0ec <_usb_d_dev_register_ep_callback+0x54>)
    b0c8:	68fb      	ldr	r3, [r7, #12]
    b0ca:	60d3      	str	r3, [r2, #12]
}
    b0cc:	e005      	b.n	b0da <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b0ce:	79fb      	ldrb	r3, [r7, #7]
    b0d0:	2b02      	cmp	r3, #2
    b0d2:	d102      	bne.n	b0da <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b0d4:	4a05      	ldr	r2, [pc, #20]	; (b0ec <_usb_d_dev_register_ep_callback+0x54>)
    b0d6:	68fb      	ldr	r3, [r7, #12]
    b0d8:	6113      	str	r3, [r2, #16]
}
    b0da:	bf00      	nop
    b0dc:	3714      	adds	r7, #20
    b0de:	46bd      	mov	sp, r7
    b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0e4:	4770      	bx	lr
    b0e6:	bf00      	nop
    b0e8:	00008f31 	.word	0x00008f31
    b0ec:	200032b4 	.word	0x200032b4

0000b0f0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b0f0:	b580      	push	{r7, lr}
    b0f2:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b0f4:	4b01      	ldr	r3, [pc, #4]	; (b0fc <USB_0_Handler+0xc>)
    b0f6:	4798      	blx	r3
}
    b0f8:	bf00      	nop
    b0fa:	bd80      	pop	{r7, pc}
    b0fc:	0000a361 	.word	0x0000a361

0000b100 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b100:	b580      	push	{r7, lr}
    b102:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b104:	4b01      	ldr	r3, [pc, #4]	; (b10c <USB_1_Handler+0xc>)
    b106:	4798      	blx	r3
}
    b108:	bf00      	nop
    b10a:	bd80      	pop	{r7, pc}
    b10c:	0000a361 	.word	0x0000a361

0000b110 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b110:	b580      	push	{r7, lr}
    b112:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b114:	4b01      	ldr	r3, [pc, #4]	; (b11c <USB_2_Handler+0xc>)
    b116:	4798      	blx	r3
}
    b118:	bf00      	nop
    b11a:	bd80      	pop	{r7, pc}
    b11c:	0000a361 	.word	0x0000a361

0000b120 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b120:	b580      	push	{r7, lr}
    b122:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b124:	4b01      	ldr	r3, [pc, #4]	; (b12c <USB_3_Handler+0xc>)
    b126:	4798      	blx	r3
}
    b128:	bf00      	nop
    b12a:	bd80      	pop	{r7, pc}
    b12c:	0000a361 	.word	0x0000a361

0000b130 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b130:	b480      	push	{r7}
    b132:	b083      	sub	sp, #12
    b134:	af00      	add	r7, sp, #0
    b136:	6078      	str	r0, [r7, #4]
    b138:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b13a:	bf00      	nop
    b13c:	687b      	ldr	r3, [r7, #4]
    b13e:	689a      	ldr	r2, [r3, #8]
    b140:	683b      	ldr	r3, [r7, #0]
    b142:	4013      	ands	r3, r2
    b144:	2b00      	cmp	r3, #0
    b146:	d1f9      	bne.n	b13c <hri_wdt_wait_for_sync+0xc>
	};
}
    b148:	bf00      	nop
    b14a:	370c      	adds	r7, #12
    b14c:	46bd      	mov	sp, r7
    b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b152:	4770      	bx	lr

0000b154 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b154:	b580      	push	{r7, lr}
    b156:	b084      	sub	sp, #16
    b158:	af00      	add	r7, sp, #0
    b15a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b15c:	210e      	movs	r1, #14
    b15e:	6878      	ldr	r0, [r7, #4]
    b160:	4b0a      	ldr	r3, [pc, #40]	; (b18c <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b162:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b164:	687b      	ldr	r3, [r7, #4]
    b166:	781b      	ldrb	r3, [r3, #0]
    b168:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b16a:	7bfb      	ldrb	r3, [r7, #15]
    b16c:	085b      	lsrs	r3, r3, #1
    b16e:	b2db      	uxtb	r3, r3
    b170:	f003 0301 	and.w	r3, r3, #1
    b174:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b176:	7bfb      	ldrb	r3, [r7, #15]
    b178:	2b00      	cmp	r3, #0
    b17a:	bf14      	ite	ne
    b17c:	2301      	movne	r3, #1
    b17e:	2300      	moveq	r3, #0
    b180:	b2db      	uxtb	r3, r3
}
    b182:	4618      	mov	r0, r3
    b184:	3710      	adds	r7, #16
    b186:	46bd      	mov	sp, r7
    b188:	bd80      	pop	{r7, pc}
    b18a:	bf00      	nop
    b18c:	0000b131 	.word	0x0000b131

0000b190 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b190:	b580      	push	{r7, lr}
    b192:	b082      	sub	sp, #8
    b194:	af00      	add	r7, sp, #0
    b196:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b198:	687b      	ldr	r3, [r7, #4]
    b19a:	781b      	ldrb	r3, [r3, #0]
    b19c:	b2db      	uxtb	r3, r3
    b19e:	f023 0304 	bic.w	r3, r3, #4
    b1a2:	b2da      	uxtb	r2, r3
    b1a4:	687b      	ldr	r3, [r7, #4]
    b1a6:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b1a8:	210e      	movs	r1, #14
    b1aa:	6878      	ldr	r0, [r7, #4]
    b1ac:	4b02      	ldr	r3, [pc, #8]	; (b1b8 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b1ae:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b1b0:	bf00      	nop
    b1b2:	3708      	adds	r7, #8
    b1b4:	46bd      	mov	sp, r7
    b1b6:	bd80      	pop	{r7, pc}
    b1b8:	0000b131 	.word	0x0000b131

0000b1bc <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b1bc:	b580      	push	{r7, lr}
    b1be:	b084      	sub	sp, #16
    b1c0:	af00      	add	r7, sp, #0
    b1c2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b1c4:	210e      	movs	r1, #14
    b1c6:	6878      	ldr	r0, [r7, #4]
    b1c8:	4b08      	ldr	r3, [pc, #32]	; (b1ec <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b1ca:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b1cc:	687b      	ldr	r3, [r7, #4]
    b1ce:	781b      	ldrb	r3, [r3, #0]
    b1d0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b1d2:	7bfb      	ldrb	r3, [r7, #15]
    b1d4:	09db      	lsrs	r3, r3, #7
    b1d6:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b1d8:	7bfb      	ldrb	r3, [r7, #15]
    b1da:	2b00      	cmp	r3, #0
    b1dc:	bf14      	ite	ne
    b1de:	2301      	movne	r3, #1
    b1e0:	2300      	moveq	r3, #0
    b1e2:	b2db      	uxtb	r3, r3
}
    b1e4:	4618      	mov	r0, r3
    b1e6:	3710      	adds	r7, #16
    b1e8:	46bd      	mov	sp, r7
    b1ea:	bd80      	pop	{r7, pc}
    b1ec:	0000b131 	.word	0x0000b131

0000b1f0 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b1f0:	b480      	push	{r7}
    b1f2:	b085      	sub	sp, #20
    b1f4:	af00      	add	r7, sp, #0
    b1f6:	6078      	str	r0, [r7, #4]
    b1f8:	460b      	mov	r3, r1
    b1fa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b1fc:	687b      	ldr	r3, [r7, #4]
    b1fe:	785b      	ldrb	r3, [r3, #1]
    b200:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b202:	7bfb      	ldrb	r3, [r7, #15]
    b204:	f023 030f 	bic.w	r3, r3, #15
    b208:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b20a:	78fb      	ldrb	r3, [r7, #3]
    b20c:	f003 030f 	and.w	r3, r3, #15
    b210:	b2da      	uxtb	r2, r3
    b212:	7bfb      	ldrb	r3, [r7, #15]
    b214:	4313      	orrs	r3, r2
    b216:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b218:	687b      	ldr	r3, [r7, #4]
    b21a:	7bfa      	ldrb	r2, [r7, #15]
    b21c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b21e:	bf00      	nop
    b220:	3714      	adds	r7, #20
    b222:	46bd      	mov	sp, r7
    b224:	f85d 7b04 	ldr.w	r7, [sp], #4
    b228:	4770      	bx	lr
	...

0000b22c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b22c:	b580      	push	{r7, lr}
    b22e:	b082      	sub	sp, #8
    b230:	af00      	add	r7, sp, #0
    b232:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b234:	687b      	ldr	r3, [r7, #4]
    b236:	2b00      	cmp	r3, #0
    b238:	d005      	beq.n	b246 <_wdt_init+0x1a>
    b23a:	687b      	ldr	r3, [r7, #4]
    b23c:	681b      	ldr	r3, [r3, #0]
    b23e:	2b00      	cmp	r3, #0
    b240:	d001      	beq.n	b246 <_wdt_init+0x1a>
    b242:	2301      	movs	r3, #1
    b244:	e000      	b.n	b248 <_wdt_init+0x1c>
    b246:	2300      	movs	r3, #0
    b248:	f003 0301 	and.w	r3, r3, #1
    b24c:	b2db      	uxtb	r3, r3
    b24e:	2250      	movs	r2, #80	; 0x50
    b250:	4913      	ldr	r1, [pc, #76]	; (b2a0 <_wdt_init+0x74>)
    b252:	4618      	mov	r0, r3
    b254:	4b13      	ldr	r3, [pc, #76]	; (b2a4 <_wdt_init+0x78>)
    b256:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b258:	687b      	ldr	r3, [r7, #4]
    b25a:	681b      	ldr	r3, [r3, #0]
    b25c:	4618      	mov	r0, r3
    b25e:	4b12      	ldr	r3, [pc, #72]	; (b2a8 <_wdt_init+0x7c>)
    b260:	4798      	blx	r3
    b262:	4603      	mov	r3, r0
    b264:	2b00      	cmp	r3, #0
    b266:	d107      	bne.n	b278 <_wdt_init+0x4c>
    b268:	687b      	ldr	r3, [r7, #4]
    b26a:	681b      	ldr	r3, [r3, #0]
    b26c:	4618      	mov	r0, r3
    b26e:	4b0f      	ldr	r3, [pc, #60]	; (b2ac <_wdt_init+0x80>)
    b270:	4798      	blx	r3
    b272:	4603      	mov	r3, r0
    b274:	2b00      	cmp	r3, #0
    b276:	d002      	beq.n	b27e <_wdt_init+0x52>
		return ERR_DENIED;
    b278:	f06f 0310 	mvn.w	r3, #16
    b27c:	e00b      	b.n	b296 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b27e:	687b      	ldr	r3, [r7, #4]
    b280:	681b      	ldr	r3, [r3, #0]
    b282:	4618      	mov	r0, r3
    b284:	4b0a      	ldr	r3, [pc, #40]	; (b2b0 <_wdt_init+0x84>)
    b286:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b288:	687b      	ldr	r3, [r7, #4]
    b28a:	681b      	ldr	r3, [r3, #0]
    b28c:	210b      	movs	r1, #11
    b28e:	4618      	mov	r0, r3
    b290:	4b08      	ldr	r3, [pc, #32]	; (b2b4 <_wdt_init+0x88>)
    b292:	4798      	blx	r3
	}

	return ERR_NONE;
    b294:	2300      	movs	r3, #0
}
    b296:	4618      	mov	r0, r3
    b298:	3708      	adds	r7, #8
    b29a:	46bd      	mov	sp, r7
    b29c:	bd80      	pop	{r7, pc}
    b29e:	bf00      	nop
    b2a0:	00011678 	.word	0x00011678
    b2a4:	00003f79 	.word	0x00003f79
    b2a8:	0000b1bd 	.word	0x0000b1bd
    b2ac:	0000b155 	.word	0x0000b155
    b2b0:	0000b191 	.word	0x0000b191
    b2b4:	0000b1f1 	.word	0x0000b1f1

0000b2b8 <hri_port_set_DIR_reg>:
{
    b2b8:	b480      	push	{r7}
    b2ba:	b085      	sub	sp, #20
    b2bc:	af00      	add	r7, sp, #0
    b2be:	60f8      	str	r0, [r7, #12]
    b2c0:	460b      	mov	r3, r1
    b2c2:	607a      	str	r2, [r7, #4]
    b2c4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b2c6:	7afb      	ldrb	r3, [r7, #11]
    b2c8:	68fa      	ldr	r2, [r7, #12]
    b2ca:	01db      	lsls	r3, r3, #7
    b2cc:	4413      	add	r3, r2
    b2ce:	3308      	adds	r3, #8
    b2d0:	687a      	ldr	r2, [r7, #4]
    b2d2:	601a      	str	r2, [r3, #0]
}
    b2d4:	bf00      	nop
    b2d6:	3714      	adds	r7, #20
    b2d8:	46bd      	mov	sp, r7
    b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2de:	4770      	bx	lr

0000b2e0 <hri_port_clear_DIR_reg>:
{
    b2e0:	b480      	push	{r7}
    b2e2:	b085      	sub	sp, #20
    b2e4:	af00      	add	r7, sp, #0
    b2e6:	60f8      	str	r0, [r7, #12]
    b2e8:	460b      	mov	r3, r1
    b2ea:	607a      	str	r2, [r7, #4]
    b2ec:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b2ee:	7afb      	ldrb	r3, [r7, #11]
    b2f0:	68fa      	ldr	r2, [r7, #12]
    b2f2:	01db      	lsls	r3, r3, #7
    b2f4:	4413      	add	r3, r2
    b2f6:	3304      	adds	r3, #4
    b2f8:	687a      	ldr	r2, [r7, #4]
    b2fa:	601a      	str	r2, [r3, #0]
}
    b2fc:	bf00      	nop
    b2fe:	3714      	adds	r7, #20
    b300:	46bd      	mov	sp, r7
    b302:	f85d 7b04 	ldr.w	r7, [sp], #4
    b306:	4770      	bx	lr

0000b308 <hri_port_set_OUT_reg>:
{
    b308:	b480      	push	{r7}
    b30a:	b085      	sub	sp, #20
    b30c:	af00      	add	r7, sp, #0
    b30e:	60f8      	str	r0, [r7, #12]
    b310:	460b      	mov	r3, r1
    b312:	607a      	str	r2, [r7, #4]
    b314:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b316:	7afb      	ldrb	r3, [r7, #11]
    b318:	68fa      	ldr	r2, [r7, #12]
    b31a:	01db      	lsls	r3, r3, #7
    b31c:	4413      	add	r3, r2
    b31e:	3318      	adds	r3, #24
    b320:	687a      	ldr	r2, [r7, #4]
    b322:	601a      	str	r2, [r3, #0]
}
    b324:	bf00      	nop
    b326:	3714      	adds	r7, #20
    b328:	46bd      	mov	sp, r7
    b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b32e:	4770      	bx	lr

0000b330 <hri_port_clear_OUT_reg>:
{
    b330:	b480      	push	{r7}
    b332:	b085      	sub	sp, #20
    b334:	af00      	add	r7, sp, #0
    b336:	60f8      	str	r0, [r7, #12]
    b338:	460b      	mov	r3, r1
    b33a:	607a      	str	r2, [r7, #4]
    b33c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b33e:	7afb      	ldrb	r3, [r7, #11]
    b340:	68fa      	ldr	r2, [r7, #12]
    b342:	01db      	lsls	r3, r3, #7
    b344:	4413      	add	r3, r2
    b346:	3314      	adds	r3, #20
    b348:	687a      	ldr	r2, [r7, #4]
    b34a:	601a      	str	r2, [r3, #0]
}
    b34c:	bf00      	nop
    b34e:	3714      	adds	r7, #20
    b350:	46bd      	mov	sp, r7
    b352:	f85d 7b04 	ldr.w	r7, [sp], #4
    b356:	4770      	bx	lr

0000b358 <hri_port_write_PMUX_PMUXE_bf>:
{
    b358:	b480      	push	{r7}
    b35a:	b085      	sub	sp, #20
    b35c:	af00      	add	r7, sp, #0
    b35e:	6078      	str	r0, [r7, #4]
    b360:	4608      	mov	r0, r1
    b362:	4611      	mov	r1, r2
    b364:	461a      	mov	r2, r3
    b366:	4603      	mov	r3, r0
    b368:	70fb      	strb	r3, [r7, #3]
    b36a:	460b      	mov	r3, r1
    b36c:	70bb      	strb	r3, [r7, #2]
    b36e:	4613      	mov	r3, r2
    b370:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b372:	78fa      	ldrb	r2, [r7, #3]
    b374:	78bb      	ldrb	r3, [r7, #2]
    b376:	6879      	ldr	r1, [r7, #4]
    b378:	01d2      	lsls	r2, r2, #7
    b37a:	440a      	add	r2, r1
    b37c:	4413      	add	r3, r2
    b37e:	3330      	adds	r3, #48	; 0x30
    b380:	781b      	ldrb	r3, [r3, #0]
    b382:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b384:	7bfb      	ldrb	r3, [r7, #15]
    b386:	f023 030f 	bic.w	r3, r3, #15
    b38a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b38c:	787b      	ldrb	r3, [r7, #1]
    b38e:	f003 030f 	and.w	r3, r3, #15
    b392:	b2da      	uxtb	r2, r3
    b394:	7bfb      	ldrb	r3, [r7, #15]
    b396:	4313      	orrs	r3, r2
    b398:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b39a:	78fa      	ldrb	r2, [r7, #3]
    b39c:	78bb      	ldrb	r3, [r7, #2]
    b39e:	6879      	ldr	r1, [r7, #4]
    b3a0:	01d2      	lsls	r2, r2, #7
    b3a2:	440a      	add	r2, r1
    b3a4:	4413      	add	r3, r2
    b3a6:	3330      	adds	r3, #48	; 0x30
    b3a8:	7bfa      	ldrb	r2, [r7, #15]
    b3aa:	701a      	strb	r2, [r3, #0]
}
    b3ac:	bf00      	nop
    b3ae:	3714      	adds	r7, #20
    b3b0:	46bd      	mov	sp, r7
    b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3b6:	4770      	bx	lr

0000b3b8 <hri_port_write_PMUX_PMUXO_bf>:
{
    b3b8:	b480      	push	{r7}
    b3ba:	b085      	sub	sp, #20
    b3bc:	af00      	add	r7, sp, #0
    b3be:	6078      	str	r0, [r7, #4]
    b3c0:	4608      	mov	r0, r1
    b3c2:	4611      	mov	r1, r2
    b3c4:	461a      	mov	r2, r3
    b3c6:	4603      	mov	r3, r0
    b3c8:	70fb      	strb	r3, [r7, #3]
    b3ca:	460b      	mov	r3, r1
    b3cc:	70bb      	strb	r3, [r7, #2]
    b3ce:	4613      	mov	r3, r2
    b3d0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b3d2:	78fa      	ldrb	r2, [r7, #3]
    b3d4:	78bb      	ldrb	r3, [r7, #2]
    b3d6:	6879      	ldr	r1, [r7, #4]
    b3d8:	01d2      	lsls	r2, r2, #7
    b3da:	440a      	add	r2, r1
    b3dc:	4413      	add	r3, r2
    b3de:	3330      	adds	r3, #48	; 0x30
    b3e0:	781b      	ldrb	r3, [r3, #0]
    b3e2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b3e4:	7bfb      	ldrb	r3, [r7, #15]
    b3e6:	f003 030f 	and.w	r3, r3, #15
    b3ea:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b3ec:	787b      	ldrb	r3, [r7, #1]
    b3ee:	011b      	lsls	r3, r3, #4
    b3f0:	b2da      	uxtb	r2, r3
    b3f2:	7bfb      	ldrb	r3, [r7, #15]
    b3f4:	4313      	orrs	r3, r2
    b3f6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b3f8:	78fa      	ldrb	r2, [r7, #3]
    b3fa:	78bb      	ldrb	r3, [r7, #2]
    b3fc:	6879      	ldr	r1, [r7, #4]
    b3fe:	01d2      	lsls	r2, r2, #7
    b400:	440a      	add	r2, r1
    b402:	4413      	add	r3, r2
    b404:	3330      	adds	r3, #48	; 0x30
    b406:	7bfa      	ldrb	r2, [r7, #15]
    b408:	701a      	strb	r2, [r3, #0]
}
    b40a:	bf00      	nop
    b40c:	3714      	adds	r7, #20
    b40e:	46bd      	mov	sp, r7
    b410:	f85d 7b04 	ldr.w	r7, [sp], #4
    b414:	4770      	bx	lr

0000b416 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b416:	b480      	push	{r7}
    b418:	b085      	sub	sp, #20
    b41a:	af00      	add	r7, sp, #0
    b41c:	6078      	str	r0, [r7, #4]
    b41e:	4608      	mov	r0, r1
    b420:	4611      	mov	r1, r2
    b422:	461a      	mov	r2, r3
    b424:	4603      	mov	r3, r0
    b426:	70fb      	strb	r3, [r7, #3]
    b428:	460b      	mov	r3, r1
    b42a:	70bb      	strb	r3, [r7, #2]
    b42c:	4613      	mov	r3, r2
    b42e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b430:	78fa      	ldrb	r2, [r7, #3]
    b432:	78bb      	ldrb	r3, [r7, #2]
    b434:	6879      	ldr	r1, [r7, #4]
    b436:	01d2      	lsls	r2, r2, #7
    b438:	440a      	add	r2, r1
    b43a:	4413      	add	r3, r2
    b43c:	3340      	adds	r3, #64	; 0x40
    b43e:	781b      	ldrb	r3, [r3, #0]
    b440:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b442:	7bfb      	ldrb	r3, [r7, #15]
    b444:	f023 0301 	bic.w	r3, r3, #1
    b448:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b44a:	787a      	ldrb	r2, [r7, #1]
    b44c:	7bfb      	ldrb	r3, [r7, #15]
    b44e:	4313      	orrs	r3, r2
    b450:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b452:	78fa      	ldrb	r2, [r7, #3]
    b454:	78bb      	ldrb	r3, [r7, #2]
    b456:	6879      	ldr	r1, [r7, #4]
    b458:	01d2      	lsls	r2, r2, #7
    b45a:	440a      	add	r2, r1
    b45c:	4413      	add	r3, r2
    b45e:	3340      	adds	r3, #64	; 0x40
    b460:	7bfa      	ldrb	r2, [r7, #15]
    b462:	701a      	strb	r2, [r3, #0]
}
    b464:	bf00      	nop
    b466:	3714      	adds	r7, #20
    b468:	46bd      	mov	sp, r7
    b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b46e:	4770      	bx	lr

0000b470 <hri_port_write_WRCONFIG_reg>:
{
    b470:	b480      	push	{r7}
    b472:	b085      	sub	sp, #20
    b474:	af00      	add	r7, sp, #0
    b476:	60f8      	str	r0, [r7, #12]
    b478:	460b      	mov	r3, r1
    b47a:	607a      	str	r2, [r7, #4]
    b47c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b47e:	7afb      	ldrb	r3, [r7, #11]
    b480:	68fa      	ldr	r2, [r7, #12]
    b482:	01db      	lsls	r3, r3, #7
    b484:	4413      	add	r3, r2
    b486:	3328      	adds	r3, #40	; 0x28
    b488:	687a      	ldr	r2, [r7, #4]
    b48a:	601a      	str	r2, [r3, #0]
}
    b48c:	bf00      	nop
    b48e:	3714      	adds	r7, #20
    b490:	46bd      	mov	sp, r7
    b492:	f85d 7b04 	ldr.w	r7, [sp], #4
    b496:	4770      	bx	lr

0000b498 <_gpio_set_direction>:
{
    b498:	b580      	push	{r7, lr}
    b49a:	b082      	sub	sp, #8
    b49c:	af00      	add	r7, sp, #0
    b49e:	4603      	mov	r3, r0
    b4a0:	6039      	str	r1, [r7, #0]
    b4a2:	71fb      	strb	r3, [r7, #7]
    b4a4:	4613      	mov	r3, r2
    b4a6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b4a8:	79bb      	ldrb	r3, [r7, #6]
    b4aa:	2b01      	cmp	r3, #1
    b4ac:	d01c      	beq.n	b4e8 <_gpio_set_direction+0x50>
    b4ae:	2b02      	cmp	r3, #2
    b4b0:	d037      	beq.n	b522 <_gpio_set_direction+0x8a>
    b4b2:	2b00      	cmp	r3, #0
    b4b4:	d14e      	bne.n	b554 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b4b6:	79fb      	ldrb	r3, [r7, #7]
    b4b8:	683a      	ldr	r2, [r7, #0]
    b4ba:	4619      	mov	r1, r3
    b4bc:	482a      	ldr	r0, [pc, #168]	; (b568 <_gpio_set_direction+0xd0>)
    b4be:	4b2b      	ldr	r3, [pc, #172]	; (b56c <_gpio_set_direction+0xd4>)
    b4c0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b4c2:	683b      	ldr	r3, [r7, #0]
    b4c4:	b29b      	uxth	r3, r3
    b4c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b4ca:	79fb      	ldrb	r3, [r7, #7]
    b4cc:	4619      	mov	r1, r3
    b4ce:	4826      	ldr	r0, [pc, #152]	; (b568 <_gpio_set_direction+0xd0>)
    b4d0:	4b27      	ldr	r3, [pc, #156]	; (b570 <_gpio_set_direction+0xd8>)
    b4d2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b4d4:	683b      	ldr	r3, [r7, #0]
    b4d6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b4d8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b4dc:	79fb      	ldrb	r3, [r7, #7]
    b4de:	4619      	mov	r1, r3
    b4e0:	4821      	ldr	r0, [pc, #132]	; (b568 <_gpio_set_direction+0xd0>)
    b4e2:	4b23      	ldr	r3, [pc, #140]	; (b570 <_gpio_set_direction+0xd8>)
    b4e4:	4798      	blx	r3
		break;
    b4e6:	e03a      	b.n	b55e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b4e8:	79fb      	ldrb	r3, [r7, #7]
    b4ea:	683a      	ldr	r2, [r7, #0]
    b4ec:	4619      	mov	r1, r3
    b4ee:	481e      	ldr	r0, [pc, #120]	; (b568 <_gpio_set_direction+0xd0>)
    b4f0:	4b1e      	ldr	r3, [pc, #120]	; (b56c <_gpio_set_direction+0xd4>)
    b4f2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b4f4:	683b      	ldr	r3, [r7, #0]
    b4f6:	b29b      	uxth	r3, r3
    b4f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b4fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b500:	79f9      	ldrb	r1, [r7, #7]
    b502:	461a      	mov	r2, r3
    b504:	4818      	ldr	r0, [pc, #96]	; (b568 <_gpio_set_direction+0xd0>)
    b506:	4b1a      	ldr	r3, [pc, #104]	; (b570 <_gpio_set_direction+0xd8>)
    b508:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b50a:	683b      	ldr	r3, [r7, #0]
    b50c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b50e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b516:	79f9      	ldrb	r1, [r7, #7]
    b518:	461a      	mov	r2, r3
    b51a:	4813      	ldr	r0, [pc, #76]	; (b568 <_gpio_set_direction+0xd0>)
    b51c:	4b14      	ldr	r3, [pc, #80]	; (b570 <_gpio_set_direction+0xd8>)
    b51e:	4798      	blx	r3
		break;
    b520:	e01d      	b.n	b55e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b522:	79fb      	ldrb	r3, [r7, #7]
    b524:	683a      	ldr	r2, [r7, #0]
    b526:	4619      	mov	r1, r3
    b528:	480f      	ldr	r0, [pc, #60]	; (b568 <_gpio_set_direction+0xd0>)
    b52a:	4b12      	ldr	r3, [pc, #72]	; (b574 <_gpio_set_direction+0xdc>)
    b52c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b52e:	683b      	ldr	r3, [r7, #0]
    b530:	b29b      	uxth	r3, r3
    b532:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b536:	79fb      	ldrb	r3, [r7, #7]
    b538:	4619      	mov	r1, r3
    b53a:	480b      	ldr	r0, [pc, #44]	; (b568 <_gpio_set_direction+0xd0>)
    b53c:	4b0c      	ldr	r3, [pc, #48]	; (b570 <_gpio_set_direction+0xd8>)
    b53e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b540:	683b      	ldr	r3, [r7, #0]
    b542:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b544:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b548:	79fb      	ldrb	r3, [r7, #7]
    b54a:	4619      	mov	r1, r3
    b54c:	4806      	ldr	r0, [pc, #24]	; (b568 <_gpio_set_direction+0xd0>)
    b54e:	4b08      	ldr	r3, [pc, #32]	; (b570 <_gpio_set_direction+0xd8>)
    b550:	4798      	blx	r3
		break;
    b552:	e004      	b.n	b55e <_gpio_set_direction+0xc6>
		ASSERT(false);
    b554:	2246      	movs	r2, #70	; 0x46
    b556:	4908      	ldr	r1, [pc, #32]	; (b578 <_gpio_set_direction+0xe0>)
    b558:	2000      	movs	r0, #0
    b55a:	4b08      	ldr	r3, [pc, #32]	; (b57c <_gpio_set_direction+0xe4>)
    b55c:	4798      	blx	r3
}
    b55e:	bf00      	nop
    b560:	3708      	adds	r7, #8
    b562:	46bd      	mov	sp, r7
    b564:	bd80      	pop	{r7, pc}
    b566:	bf00      	nop
    b568:	41008000 	.word	0x41008000
    b56c:	0000b2e1 	.word	0x0000b2e1
    b570:	0000b471 	.word	0x0000b471
    b574:	0000b2b9 	.word	0x0000b2b9
    b578:	00011690 	.word	0x00011690
    b57c:	00003f79 	.word	0x00003f79

0000b580 <_gpio_set_level>:
{
    b580:	b580      	push	{r7, lr}
    b582:	b082      	sub	sp, #8
    b584:	af00      	add	r7, sp, #0
    b586:	4603      	mov	r3, r0
    b588:	6039      	str	r1, [r7, #0]
    b58a:	71fb      	strb	r3, [r7, #7]
    b58c:	4613      	mov	r3, r2
    b58e:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b590:	79bb      	ldrb	r3, [r7, #6]
    b592:	2b00      	cmp	r3, #0
    b594:	d006      	beq.n	b5a4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b596:	79fb      	ldrb	r3, [r7, #7]
    b598:	683a      	ldr	r2, [r7, #0]
    b59a:	4619      	mov	r1, r3
    b59c:	4806      	ldr	r0, [pc, #24]	; (b5b8 <_gpio_set_level+0x38>)
    b59e:	4b07      	ldr	r3, [pc, #28]	; (b5bc <_gpio_set_level+0x3c>)
    b5a0:	4798      	blx	r3
}
    b5a2:	e005      	b.n	b5b0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b5a4:	79fb      	ldrb	r3, [r7, #7]
    b5a6:	683a      	ldr	r2, [r7, #0]
    b5a8:	4619      	mov	r1, r3
    b5aa:	4803      	ldr	r0, [pc, #12]	; (b5b8 <_gpio_set_level+0x38>)
    b5ac:	4b04      	ldr	r3, [pc, #16]	; (b5c0 <_gpio_set_level+0x40>)
    b5ae:	4798      	blx	r3
}
    b5b0:	bf00      	nop
    b5b2:	3708      	adds	r7, #8
    b5b4:	46bd      	mov	sp, r7
    b5b6:	bd80      	pop	{r7, pc}
    b5b8:	41008000 	.word	0x41008000
    b5bc:	0000b309 	.word	0x0000b309
    b5c0:	0000b331 	.word	0x0000b331

0000b5c4 <_gpio_set_pin_function>:
{
    b5c4:	b590      	push	{r4, r7, lr}
    b5c6:	b085      	sub	sp, #20
    b5c8:	af00      	add	r7, sp, #0
    b5ca:	6078      	str	r0, [r7, #4]
    b5cc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b5ce:	687b      	ldr	r3, [r7, #4]
    b5d0:	095b      	lsrs	r3, r3, #5
    b5d2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b5d4:	687b      	ldr	r3, [r7, #4]
    b5d6:	b2db      	uxtb	r3, r3
    b5d8:	f003 031f 	and.w	r3, r3, #31
    b5dc:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b5de:	683b      	ldr	r3, [r7, #0]
    b5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    b5e4:	d106      	bne.n	b5f4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b5e6:	7bba      	ldrb	r2, [r7, #14]
    b5e8:	7bf9      	ldrb	r1, [r7, #15]
    b5ea:	2300      	movs	r3, #0
    b5ec:	4812      	ldr	r0, [pc, #72]	; (b638 <_gpio_set_pin_function+0x74>)
    b5ee:	4c13      	ldr	r4, [pc, #76]	; (b63c <_gpio_set_pin_function+0x78>)
    b5f0:	47a0      	blx	r4
}
    b5f2:	e01d      	b.n	b630 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b5f4:	7bba      	ldrb	r2, [r7, #14]
    b5f6:	7bf9      	ldrb	r1, [r7, #15]
    b5f8:	2301      	movs	r3, #1
    b5fa:	480f      	ldr	r0, [pc, #60]	; (b638 <_gpio_set_pin_function+0x74>)
    b5fc:	4c0f      	ldr	r4, [pc, #60]	; (b63c <_gpio_set_pin_function+0x78>)
    b5fe:	47a0      	blx	r4
		if (pin & 1) {
    b600:	7bbb      	ldrb	r3, [r7, #14]
    b602:	f003 0301 	and.w	r3, r3, #1
    b606:	2b00      	cmp	r3, #0
    b608:	d009      	beq.n	b61e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b60a:	7bbb      	ldrb	r3, [r7, #14]
    b60c:	085b      	lsrs	r3, r3, #1
    b60e:	b2da      	uxtb	r2, r3
    b610:	683b      	ldr	r3, [r7, #0]
    b612:	b2db      	uxtb	r3, r3
    b614:	7bf9      	ldrb	r1, [r7, #15]
    b616:	4808      	ldr	r0, [pc, #32]	; (b638 <_gpio_set_pin_function+0x74>)
    b618:	4c09      	ldr	r4, [pc, #36]	; (b640 <_gpio_set_pin_function+0x7c>)
    b61a:	47a0      	blx	r4
}
    b61c:	e008      	b.n	b630 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b61e:	7bbb      	ldrb	r3, [r7, #14]
    b620:	085b      	lsrs	r3, r3, #1
    b622:	b2da      	uxtb	r2, r3
    b624:	683b      	ldr	r3, [r7, #0]
    b626:	b2db      	uxtb	r3, r3
    b628:	7bf9      	ldrb	r1, [r7, #15]
    b62a:	4803      	ldr	r0, [pc, #12]	; (b638 <_gpio_set_pin_function+0x74>)
    b62c:	4c05      	ldr	r4, [pc, #20]	; (b644 <_gpio_set_pin_function+0x80>)
    b62e:	47a0      	blx	r4
}
    b630:	bf00      	nop
    b632:	3714      	adds	r7, #20
    b634:	46bd      	mov	sp, r7
    b636:	bd90      	pop	{r4, r7, pc}
    b638:	41008000 	.word	0x41008000
    b63c:	0000b417 	.word	0x0000b417
    b640:	0000b3b9 	.word	0x0000b3b9
    b644:	0000b359 	.word	0x0000b359

0000b648 <gpio_set_pin_function>:
{
    b648:	b580      	push	{r7, lr}
    b64a:	b082      	sub	sp, #8
    b64c:	af00      	add	r7, sp, #0
    b64e:	6078      	str	r0, [r7, #4]
    b650:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b652:	6839      	ldr	r1, [r7, #0]
    b654:	6878      	ldr	r0, [r7, #4]
    b656:	4b03      	ldr	r3, [pc, #12]	; (b664 <gpio_set_pin_function+0x1c>)
    b658:	4798      	blx	r3
}
    b65a:	bf00      	nop
    b65c:	3708      	adds	r7, #8
    b65e:	46bd      	mov	sp, r7
    b660:	bd80      	pop	{r7, pc}
    b662:	bf00      	nop
    b664:	0000b5c5 	.word	0x0000b5c5

0000b668 <gpio_set_pin_direction>:
{
    b668:	b580      	push	{r7, lr}
    b66a:	b082      	sub	sp, #8
    b66c:	af00      	add	r7, sp, #0
    b66e:	4603      	mov	r3, r0
    b670:	460a      	mov	r2, r1
    b672:	71fb      	strb	r3, [r7, #7]
    b674:	4613      	mov	r3, r2
    b676:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b678:	79fb      	ldrb	r3, [r7, #7]
    b67a:	095b      	lsrs	r3, r3, #5
    b67c:	b2d8      	uxtb	r0, r3
    b67e:	79fb      	ldrb	r3, [r7, #7]
    b680:	f003 031f 	and.w	r3, r3, #31
    b684:	2201      	movs	r2, #1
    b686:	fa02 f303 	lsl.w	r3, r2, r3
    b68a:	79ba      	ldrb	r2, [r7, #6]
    b68c:	4619      	mov	r1, r3
    b68e:	4b03      	ldr	r3, [pc, #12]	; (b69c <gpio_set_pin_direction+0x34>)
    b690:	4798      	blx	r3
}
    b692:	bf00      	nop
    b694:	3708      	adds	r7, #8
    b696:	46bd      	mov	sp, r7
    b698:	bd80      	pop	{r7, pc}
    b69a:	bf00      	nop
    b69c:	0000b499 	.word	0x0000b499

0000b6a0 <gpio_set_pin_level>:
{
    b6a0:	b580      	push	{r7, lr}
    b6a2:	b082      	sub	sp, #8
    b6a4:	af00      	add	r7, sp, #0
    b6a6:	4603      	mov	r3, r0
    b6a8:	460a      	mov	r2, r1
    b6aa:	71fb      	strb	r3, [r7, #7]
    b6ac:	4613      	mov	r3, r2
    b6ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b6b0:	79fb      	ldrb	r3, [r7, #7]
    b6b2:	095b      	lsrs	r3, r3, #5
    b6b4:	b2d8      	uxtb	r0, r3
    b6b6:	79fb      	ldrb	r3, [r7, #7]
    b6b8:	f003 031f 	and.w	r3, r3, #31
    b6bc:	2201      	movs	r2, #1
    b6be:	fa02 f303 	lsl.w	r3, r2, r3
    b6c2:	79ba      	ldrb	r2, [r7, #6]
    b6c4:	4619      	mov	r1, r3
    b6c6:	4b03      	ldr	r3, [pc, #12]	; (b6d4 <gpio_set_pin_level+0x34>)
    b6c8:	4798      	blx	r3
}
    b6ca:	bf00      	nop
    b6cc:	3708      	adds	r7, #8
    b6ce:	46bd      	mov	sp, r7
    b6d0:	bd80      	pop	{r7, pc}
    b6d2:	bf00      	nop
    b6d4:	0000b581 	.word	0x0000b581

0000b6d8 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b6d8:	b580      	push	{r7, lr}
    b6da:	b082      	sub	sp, #8
    b6dc:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b6de:	2100      	movs	r1, #0
    b6e0:	2008      	movs	r0, #8
    b6e2:	4b24      	ldr	r3, [pc, #144]	; (b774 <QSPI_N25Q256_exit_xip+0x9c>)
    b6e4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b6e6:	2100      	movs	r1, #0
    b6e8:	202b      	movs	r0, #43	; 0x2b
    b6ea:	4b22      	ldr	r3, [pc, #136]	; (b774 <QSPI_N25Q256_exit_xip+0x9c>)
    b6ec:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b6ee:	2100      	movs	r1, #0
    b6f0:	202a      	movs	r0, #42	; 0x2a
    b6f2:	4b20      	ldr	r3, [pc, #128]	; (b774 <QSPI_N25Q256_exit_xip+0x9c>)
    b6f4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b6f6:	2102      	movs	r1, #2
    b6f8:	2008      	movs	r0, #8
    b6fa:	4b1f      	ldr	r3, [pc, #124]	; (b778 <QSPI_N25Q256_exit_xip+0xa0>)
    b6fc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b6fe:	2102      	movs	r1, #2
    b700:	202b      	movs	r0, #43	; 0x2b
    b702:	4b1d      	ldr	r3, [pc, #116]	; (b778 <QSPI_N25Q256_exit_xip+0xa0>)
    b704:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b706:	2102      	movs	r1, #2
    b708:	202a      	movs	r0, #42	; 0x2a
    b70a:	4b1b      	ldr	r3, [pc, #108]	; (b778 <QSPI_N25Q256_exit_xip+0xa0>)
    b70c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b70e:	2101      	movs	r1, #1
    b710:	2008      	movs	r0, #8
    b712:	4b1a      	ldr	r3, [pc, #104]	; (b77c <QSPI_N25Q256_exit_xip+0xa4>)
    b714:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b716:	2100      	movs	r1, #0
    b718:	202b      	movs	r0, #43	; 0x2b
    b71a:	4b18      	ldr	r3, [pc, #96]	; (b77c <QSPI_N25Q256_exit_xip+0xa4>)
    b71c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b71e:	2100      	movs	r1, #0
    b720:	202a      	movs	r0, #42	; 0x2a
    b722:	4b16      	ldr	r3, [pc, #88]	; (b77c <QSPI_N25Q256_exit_xip+0xa4>)
    b724:	4798      	blx	r3

	delay_us(1);
    b726:	2001      	movs	r0, #1
    b728:	4b15      	ldr	r3, [pc, #84]	; (b780 <QSPI_N25Q256_exit_xip+0xa8>)
    b72a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b72c:	2300      	movs	r3, #0
    b72e:	607b      	str	r3, [r7, #4]
    b730:	e010      	b.n	b754 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b732:	2101      	movs	r1, #1
    b734:	202a      	movs	r0, #42	; 0x2a
    b736:	4b11      	ldr	r3, [pc, #68]	; (b77c <QSPI_N25Q256_exit_xip+0xa4>)
    b738:	4798      	blx	r3
		delay_us(1);
    b73a:	2001      	movs	r0, #1
    b73c:	4b10      	ldr	r3, [pc, #64]	; (b780 <QSPI_N25Q256_exit_xip+0xa8>)
    b73e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b740:	2100      	movs	r1, #0
    b742:	202a      	movs	r0, #42	; 0x2a
    b744:	4b0d      	ldr	r3, [pc, #52]	; (b77c <QSPI_N25Q256_exit_xip+0xa4>)
    b746:	4798      	blx	r3
		delay_us(1);
    b748:	2001      	movs	r0, #1
    b74a:	4b0d      	ldr	r3, [pc, #52]	; (b780 <QSPI_N25Q256_exit_xip+0xa8>)
    b74c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b74e:	687b      	ldr	r3, [r7, #4]
    b750:	3301      	adds	r3, #1
    b752:	607b      	str	r3, [r7, #4]
    b754:	687b      	ldr	r3, [r7, #4]
    b756:	2b06      	cmp	r3, #6
    b758:	ddeb      	ble.n	b732 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b75a:	2101      	movs	r1, #1
    b75c:	202b      	movs	r0, #43	; 0x2b
    b75e:	4b07      	ldr	r3, [pc, #28]	; (b77c <QSPI_N25Q256_exit_xip+0xa4>)
    b760:	4798      	blx	r3
	delay_us(1);
    b762:	2001      	movs	r0, #1
    b764:	4b06      	ldr	r3, [pc, #24]	; (b780 <QSPI_N25Q256_exit_xip+0xa8>)
    b766:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b768:	4b06      	ldr	r3, [pc, #24]	; (b784 <QSPI_N25Q256_exit_xip+0xac>)
    b76a:	4798      	blx	r3
}
    b76c:	bf00      	nop
    b76e:	3708      	adds	r7, #8
    b770:	46bd      	mov	sp, r7
    b772:	bd80      	pop	{r7, pc}
    b774:	0000b649 	.word	0x0000b649
    b778:	0000b669 	.word	0x0000b669
    b77c:	0000b6a1 	.word	0x0000b6a1
    b780:	000025f5 	.word	0x000025f5
    b784:	000017b5 	.word	0x000017b5

0000b788 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b788:	b598      	push	{r3, r4, r7, lr}
    b78a:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b78c:	4806      	ldr	r0, [pc, #24]	; (b7a8 <spi_nor_flash_init+0x20>)
    b78e:	4b07      	ldr	r3, [pc, #28]	; (b7ac <spi_nor_flash_init+0x24>)
    b790:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b792:	2300      	movs	r3, #0
    b794:	4a06      	ldr	r2, [pc, #24]	; (b7b0 <spi_nor_flash_init+0x28>)
    b796:	4904      	ldr	r1, [pc, #16]	; (b7a8 <spi_nor_flash_init+0x20>)
    b798:	4806      	ldr	r0, [pc, #24]	; (b7b4 <spi_nor_flash_init+0x2c>)
    b79a:	4c07      	ldr	r4, [pc, #28]	; (b7b8 <spi_nor_flash_init+0x30>)
    b79c:	47a0      	blx	r4
    b79e:	4602      	mov	r2, r0
    b7a0:	4b06      	ldr	r3, [pc, #24]	; (b7bc <spi_nor_flash_init+0x34>)
    b7a2:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b7a4:	bf00      	nop
    b7a6:	bd98      	pop	{r3, r4, r7, pc}
    b7a8:	20004e74 	.word	0x20004e74
    b7ac:	00002b61 	.word	0x00002b61
    b7b0:	0000b6d9 	.word	0x0000b6d9
    b7b4:	2000341c 	.word	0x2000341c
    b7b8:	0000bbf5 	.word	0x0000bbf5
    b7bc:	20005080 	.word	0x20005080

0000b7c0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b7c0:	b580      	push	{r7, lr}
    b7c2:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b7c4:	4805      	ldr	r0, [pc, #20]	; (b7dc <cdc_device_acm_init+0x1c>)
    b7c6:	4b06      	ldr	r3, [pc, #24]	; (b7e0 <cdc_device_acm_init+0x20>)
    b7c8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b7ca:	4b06      	ldr	r3, [pc, #24]	; (b7e4 <cdc_device_acm_init+0x24>)
    b7cc:	4798      	blx	r3

	usbdc_start(single_desc);
    b7ce:	4806      	ldr	r0, [pc, #24]	; (b7e8 <cdc_device_acm_init+0x28>)
    b7d0:	4b06      	ldr	r3, [pc, #24]	; (b7ec <cdc_device_acm_init+0x2c>)
    b7d2:	4798      	blx	r3
	usbdc_attach();
    b7d4:	4b06      	ldr	r3, [pc, #24]	; (b7f0 <cdc_device_acm_init+0x30>)
    b7d6:	4798      	blx	r3
}
    b7d8:	bf00      	nop
    b7da:	bd80      	pop	{r7, pc}
    b7dc:	2000346c 	.word	0x2000346c
    b7e0:	0000d31d 	.word	0x0000d31d
    b7e4:	0000c595 	.word	0x0000c595
    b7e8:	2000012c 	.word	0x2000012c
    b7ec:	0000d3b9 	.word	0x0000d3b9
    b7f0:	0000d409 	.word	0x0000d409

0000b7f4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b7f4:	b580      	push	{r7, lr}
    b7f6:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b7f8:	4b01      	ldr	r3, [pc, #4]	; (b800 <usb_init+0xc>)
    b7fa:	4798      	blx	r3
}
    b7fc:	bf00      	nop
    b7fe:	bd80      	pop	{r7, pc}
    b800:	0000b7c1 	.word	0x0000b7c1

0000b804 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b804:	b480      	push	{r7}
    b806:	b085      	sub	sp, #20
    b808:	af00      	add	r7, sp, #0
    b80a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b80c:	f3ef 8310 	mrs	r3, PRIMASK
    b810:	60fb      	str	r3, [r7, #12]
  return(result);
    b812:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b814:	687b      	ldr	r3, [r7, #4]
    b816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b818:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b81a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b81e:	bf00      	nop
    b820:	3714      	adds	r7, #20
    b822:	46bd      	mov	sp, r7
    b824:	f85d 7b04 	ldr.w	r7, [sp], #4
    b828:	4770      	bx	lr

0000b82a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    b82a:	b480      	push	{r7}
    b82c:	b085      	sub	sp, #20
    b82e:	af00      	add	r7, sp, #0
    b830:	6078      	str	r0, [r7, #4]
    b832:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    b836:	687b      	ldr	r3, [r7, #4]
    b838:	681b      	ldr	r3, [r3, #0]
    b83a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    b83c:	68fb      	ldr	r3, [r7, #12]
    b83e:	f383 8810 	msr	PRIMASK, r3
}
    b842:	bf00      	nop
    b844:	3714      	adds	r7, #20
    b846:	46bd      	mov	sp, r7
    b848:	f85d 7b04 	ldr.w	r7, [sp], #4
    b84c:	4770      	bx	lr
	...

0000b850 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    b850:	b580      	push	{r7, lr}
    b852:	b08c      	sub	sp, #48	; 0x30
    b854:	af00      	add	r7, sp, #0
    b856:	6078      	str	r0, [r7, #4]
    b858:	460b      	mov	r3, r1
    b85a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b85c:	687b      	ldr	r3, [r7, #4]
    b85e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b860:	687b      	ldr	r3, [r7, #4]
    b862:	681b      	ldr	r3, [r3, #0]
    b864:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    b866:	f107 030c 	add.w	r3, r7, #12
    b86a:	2200      	movs	r2, #0
    b86c:	601a      	str	r2, [r3, #0]
    b86e:	605a      	str	r2, [r3, #4]
    b870:	609a      	str	r2, [r3, #8]
    b872:	60da      	str	r2, [r3, #12]
    b874:	611a      	str	r2, [r3, #16]
    b876:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b87a:	7b1b      	ldrb	r3, [r3, #12]
    b87c:	2b00      	cmp	r3, #0
    b87e:	d001      	beq.n	b884 <n25q256a_xip_confirm+0x34>
    b880:	2206      	movs	r2, #6
    b882:	e000      	b.n	b886 <n25q256a_xip_confirm+0x36>
    b884:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b886:	7b3b      	ldrb	r3, [r7, #12]
    b888:	f362 0302 	bfi	r3, r2, #0, #3
    b88c:	733b      	strb	r3, [r7, #12]
    b88e:	7b3b      	ldrb	r3, [r7, #12]
    b890:	f043 0310 	orr.w	r3, r3, #16
    b894:	733b      	strb	r3, [r7, #12]
    b896:	7b3b      	ldrb	r3, [r7, #12]
    b898:	f043 0320 	orr.w	r3, r3, #32
    b89c:	733b      	strb	r3, [r7, #12]
    b89e:	7b3b      	ldrb	r3, [r7, #12]
    b8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b8a4:	733b      	strb	r3, [r7, #12]
    b8a6:	7b3b      	ldrb	r3, [r7, #12]
    b8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b8ac:	733b      	strb	r3, [r7, #12]
    b8ae:	7b7b      	ldrb	r3, [r7, #13]
    b8b0:	f043 0303 	orr.w	r3, r3, #3
    b8b4:	737b      	strb	r3, [r7, #13]
    b8b6:	7b7b      	ldrb	r3, [r7, #13]
    b8b8:	2201      	movs	r2, #1
    b8ba:	f362 1305 	bfi	r3, r2, #4, #2
    b8be:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    b8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b8c2:	7b1b      	ldrb	r3, [r3, #12]
    b8c4:	2b00      	cmp	r3, #0
    b8c6:	d001      	beq.n	b8cc <n25q256a_xip_confirm+0x7c>
    b8c8:	2208      	movs	r2, #8
    b8ca:	e000      	b.n	b8ce <n25q256a_xip_confirm+0x7e>
    b8cc:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    b8ce:	7bbb      	ldrb	r3, [r7, #14]
    b8d0:	f362 0304 	bfi	r3, r2, #0, #5
    b8d4:	73bb      	strb	r3, [r7, #14]
    b8d6:	230b      	movs	r3, #11
    b8d8:	743b      	strb	r3, [r7, #16]
    b8da:	78fb      	ldrb	r3, [r7, #3]
    b8dc:	2b00      	cmp	r3, #0
    b8de:	d001      	beq.n	b8e4 <n25q256a_xip_confirm+0x94>
    b8e0:	2300      	movs	r3, #0
    b8e2:	e000      	b.n	b8e6 <n25q256a_xip_confirm+0x96>
    b8e4:	23ff      	movs	r3, #255	; 0xff
    b8e6:	747b      	strb	r3, [r7, #17]
    b8e8:	2301      	movs	r3, #1
    b8ea:	61bb      	str	r3, [r7, #24]
    b8ec:	f107 0327 	add.w	r3, r7, #39	; 0x27
    b8f0:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    b8f2:	f107 030c 	add.w	r3, r7, #12
    b8f6:	4619      	mov	r1, r3
    b8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b8fa:	4b07      	ldr	r3, [pc, #28]	; (b918 <n25q256a_xip_confirm+0xc8>)
    b8fc:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    b8fe:	78fb      	ldrb	r3, [r7, #3]
    b900:	2b00      	cmp	r3, #0
    b902:	d001      	beq.n	b908 <n25q256a_xip_confirm+0xb8>
    b904:	2202      	movs	r2, #2
    b906:	e000      	b.n	b90a <n25q256a_xip_confirm+0xba>
    b908:	2201      	movs	r2, #1
    b90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b90c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b90e:	2300      	movs	r3, #0
}
    b910:	4618      	mov	r0, r3
    b912:	3730      	adds	r7, #48	; 0x30
    b914:	46bd      	mov	sp, r7
    b916:	bd80      	pop	{r7, pc}
    b918:	00002bd9 	.word	0x00002bd9

0000b91c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    b91c:	b580      	push	{r7, lr}
    b91e:	b08c      	sub	sp, #48	; 0x30
    b920:	af00      	add	r7, sp, #0
    b922:	6078      	str	r0, [r7, #4]
    b924:	460b      	mov	r3, r1
    b926:	70fb      	strb	r3, [r7, #3]
    b928:	4613      	mov	r3, r2
    b92a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    b92c:	2300      	movs	r3, #0
    b92e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    b930:	687b      	ldr	r3, [r7, #4]
    b932:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    b934:	687b      	ldr	r3, [r7, #4]
    b936:	681b      	ldr	r3, [r3, #0]
    b938:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    b93a:	f107 030c 	add.w	r3, r7, #12
    b93e:	2200      	movs	r2, #0
    b940:	601a      	str	r2, [r3, #0]
    b942:	605a      	str	r2, [r3, #4]
    b944:	609a      	str	r2, [r3, #8]
    b946:	60da      	str	r2, [r3, #12]
    b948:	611a      	str	r2, [r3, #16]
    b94a:	615a      	str	r2, [r3, #20]
    b94c:	78fb      	ldrb	r3, [r7, #3]
    b94e:	f003 0307 	and.w	r3, r3, #7
    b952:	b2da      	uxtb	r2, r3
    b954:	7b3b      	ldrb	r3, [r7, #12]
    b956:	f362 0302 	bfi	r3, r2, #0, #3
    b95a:	733b      	strb	r3, [r7, #12]
    b95c:	7b3b      	ldrb	r3, [r7, #12]
    b95e:	f043 0310 	orr.w	r3, r3, #16
    b962:	733b      	strb	r3, [r7, #12]
    b964:	7b3b      	ldrb	r3, [r7, #12]
    b966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b96a:	733b      	strb	r3, [r7, #12]
    b96c:	78bb      	ldrb	r3, [r7, #2]
    b96e:	743b      	strb	r3, [r7, #16]
    b970:	2301      	movs	r3, #1
    b972:	61bb      	str	r3, [r7, #24]
    b974:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b978:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b97c:	7b5b      	ldrb	r3, [r3, #13]
    b97e:	2b00      	cmp	r3, #0
    b980:	d003      	beq.n	b98a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    b982:	2100      	movs	r1, #0
    b984:	6878      	ldr	r0, [r7, #4]
    b986:	4b0a      	ldr	r3, [pc, #40]	; (b9b0 <n25q256a_read_reg+0x94>)
    b988:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    b98a:	f107 030c 	add.w	r3, r7, #12
    b98e:	4619      	mov	r1, r3
    b990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b992:	4b08      	ldr	r3, [pc, #32]	; (b9b4 <n25q256a_read_reg+0x98>)
    b994:	4798      	blx	r3
	if (n25q->xip_mode) {
    b996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b998:	7b5b      	ldrb	r3, [r3, #13]
    b99a:	2b00      	cmp	r3, #0
    b99c:	d003      	beq.n	b9a6 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    b99e:	2101      	movs	r1, #1
    b9a0:	6878      	ldr	r0, [r7, #4]
    b9a2:	4b03      	ldr	r3, [pc, #12]	; (b9b0 <n25q256a_read_reg+0x94>)
    b9a4:	4798      	blx	r3
	}
	return status;
    b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    b9a8:	4618      	mov	r0, r3
    b9aa:	3730      	adds	r7, #48	; 0x30
    b9ac:	46bd      	mov	sp, r7
    b9ae:	bd80      	pop	{r7, pc}
    b9b0:	0000b851 	.word	0x0000b851
    b9b4:	00002bd9 	.word	0x00002bd9

0000b9b8 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    b9b8:	b580      	push	{r7, lr}
    b9ba:	b08c      	sub	sp, #48	; 0x30
    b9bc:	af00      	add	r7, sp, #0
    b9be:	60f8      	str	r0, [r7, #12]
    b9c0:	607b      	str	r3, [r7, #4]
    b9c2:	460b      	mov	r3, r1
    b9c4:	72fb      	strb	r3, [r7, #11]
    b9c6:	4613      	mov	r3, r2
    b9c8:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b9ca:	68fb      	ldr	r3, [r7, #12]
    b9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b9ce:	68fb      	ldr	r3, [r7, #12]
    b9d0:	681b      	ldr	r3, [r3, #0]
    b9d2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    b9d4:	f107 0310 	add.w	r3, r7, #16
    b9d8:	2200      	movs	r2, #0
    b9da:	601a      	str	r2, [r3, #0]
    b9dc:	605a      	str	r2, [r3, #4]
    b9de:	609a      	str	r2, [r3, #8]
    b9e0:	60da      	str	r2, [r3, #12]
    b9e2:	611a      	str	r2, [r3, #16]
    b9e4:	615a      	str	r2, [r3, #20]
    b9e6:	7afb      	ldrb	r3, [r7, #11]
    b9e8:	f003 0307 	and.w	r3, r3, #7
    b9ec:	b2da      	uxtb	r2, r3
    b9ee:	7c3b      	ldrb	r3, [r7, #16]
    b9f0:	f362 0302 	bfi	r3, r2, #0, #3
    b9f4:	743b      	strb	r3, [r7, #16]
    b9f6:	7c3b      	ldrb	r3, [r7, #16]
    b9f8:	f043 0310 	orr.w	r3, r3, #16
    b9fc:	743b      	strb	r3, [r7, #16]
    b9fe:	7c3b      	ldrb	r3, [r7, #16]
    ba00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ba04:	743b      	strb	r3, [r7, #16]
    ba06:	7c7b      	ldrb	r3, [r7, #17]
    ba08:	2202      	movs	r2, #2
    ba0a:	f362 1305 	bfi	r3, r2, #4, #2
    ba0e:	747b      	strb	r3, [r7, #17]
    ba10:	7abb      	ldrb	r3, [r7, #10]
    ba12:	753b      	strb	r3, [r7, #20]
    ba14:	2301      	movs	r3, #1
    ba16:	61fb      	str	r3, [r7, #28]
    ba18:	1d3b      	adds	r3, r7, #4
    ba1a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    ba1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba1e:	7b5b      	ldrb	r3, [r3, #13]
    ba20:	2b00      	cmp	r3, #0
    ba22:	d003      	beq.n	ba2c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    ba24:	2100      	movs	r1, #0
    ba26:	68f8      	ldr	r0, [r7, #12]
    ba28:	4b09      	ldr	r3, [pc, #36]	; (ba50 <n25q256a_write_reg+0x98>)
    ba2a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    ba2c:	f107 0310 	add.w	r3, r7, #16
    ba30:	4619      	mov	r1, r3
    ba32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ba34:	4b07      	ldr	r3, [pc, #28]	; (ba54 <n25q256a_write_reg+0x9c>)
    ba36:	4798      	blx	r3
	if (n25q->xip_mode) {
    ba38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba3a:	7b5b      	ldrb	r3, [r3, #13]
    ba3c:	2b00      	cmp	r3, #0
    ba3e:	d003      	beq.n	ba48 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    ba40:	2101      	movs	r1, #1
    ba42:	68f8      	ldr	r0, [r7, #12]
    ba44:	4b02      	ldr	r3, [pc, #8]	; (ba50 <n25q256a_write_reg+0x98>)
    ba46:	4798      	blx	r3
	}
}
    ba48:	bf00      	nop
    ba4a:	3730      	adds	r7, #48	; 0x30
    ba4c:	46bd      	mov	sp, r7
    ba4e:	bd80      	pop	{r7, pc}
    ba50:	0000b851 	.word	0x0000b851
    ba54:	00002bd9 	.word	0x00002bd9

0000ba58 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    ba58:	b580      	push	{r7, lr}
    ba5a:	b090      	sub	sp, #64	; 0x40
    ba5c:	af00      	add	r7, sp, #0
    ba5e:	6078      	str	r0, [r7, #4]
    ba60:	460b      	mov	r3, r1
    ba62:	70fb      	strb	r3, [r7, #3]
    ba64:	4613      	mov	r3, r2
    ba66:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ba68:	687b      	ldr	r3, [r7, #4]
    ba6a:	681b      	ldr	r3, [r3, #0]
    ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    ba6e:	78bb      	ldrb	r3, [r7, #2]
    ba70:	2b00      	cmp	r3, #0
    ba72:	d001      	beq.n	ba78 <n25q256a_write_enable+0x20>
    ba74:	2306      	movs	r3, #6
    ba76:	e000      	b.n	ba7a <n25q256a_write_enable+0x22>
    ba78:	2304      	movs	r3, #4
    ba7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    ba7e:	f107 0320 	add.w	r3, r7, #32
    ba82:	2200      	movs	r2, #0
    ba84:	601a      	str	r2, [r3, #0]
    ba86:	605a      	str	r2, [r3, #4]
    ba88:	609a      	str	r2, [r3, #8]
    ba8a:	60da      	str	r2, [r3, #12]
    ba8c:	611a      	str	r2, [r3, #16]
    ba8e:	615a      	str	r2, [r3, #20]
    ba90:	78fb      	ldrb	r3, [r7, #3]
    ba92:	f003 0307 	and.w	r3, r3, #7
    ba96:	b2da      	uxtb	r2, r3
    ba98:	f897 3020 	ldrb.w	r3, [r7, #32]
    ba9c:	f362 0302 	bfi	r3, r2, #0, #3
    baa0:	f887 3020 	strb.w	r3, [r7, #32]
    baa4:	f897 3020 	ldrb.w	r3, [r7, #32]
    baa8:	f043 0310 	orr.w	r3, r3, #16
    baac:	f887 3020 	strb.w	r3, [r7, #32]
    bab0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    bab4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    bab8:	f107 0308 	add.w	r3, r7, #8
    babc:	2200      	movs	r2, #0
    babe:	601a      	str	r2, [r3, #0]
    bac0:	605a      	str	r2, [r3, #4]
    bac2:	609a      	str	r2, [r3, #8]
    bac4:	60da      	str	r2, [r3, #12]
    bac6:	611a      	str	r2, [r3, #16]
    bac8:	615a      	str	r2, [r3, #20]
    baca:	78fb      	ldrb	r3, [r7, #3]
    bacc:	f003 0307 	and.w	r3, r3, #7
    bad0:	b2da      	uxtb	r2, r3
    bad2:	7a3b      	ldrb	r3, [r7, #8]
    bad4:	f362 0302 	bfi	r3, r2, #0, #3
    bad8:	723b      	strb	r3, [r7, #8]
    bada:	7a3b      	ldrb	r3, [r7, #8]
    badc:	f043 0310 	orr.w	r3, r3, #16
    bae0:	723b      	strb	r3, [r7, #8]
    bae2:	7a3b      	ldrb	r3, [r7, #8]
    bae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bae8:	723b      	strb	r3, [r7, #8]
    baea:	2305      	movs	r3, #5
    baec:	733b      	strb	r3, [r7, #12]
    baee:	2301      	movs	r3, #1
    baf0:	617b      	str	r3, [r7, #20]
    baf2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    baf6:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    baf8:	f107 0320 	add.w	r3, r7, #32
    bafc:	4619      	mov	r1, r3
    bafe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bb00:	4b08      	ldr	r3, [pc, #32]	; (bb24 <n25q256a_write_enable+0xcc>)
    bb02:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    bb04:	f107 0308 	add.w	r3, r7, #8
    bb08:	4619      	mov	r1, r3
    bb0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bb0c:	4b05      	ldr	r3, [pc, #20]	; (bb24 <n25q256a_write_enable+0xcc>)
    bb0e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    bb10:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    bb14:	f003 0302 	and.w	r3, r3, #2
    bb18:	2b00      	cmp	r3, #0
    bb1a:	d0ed      	beq.n	baf8 <n25q256a_write_enable+0xa0>
}
    bb1c:	bf00      	nop
    bb1e:	3740      	adds	r7, #64	; 0x40
    bb20:	46bd      	mov	sp, r7
    bb22:	bd80      	pop	{r7, pc}
    bb24:	00002bd9 	.word	0x00002bd9

0000bb28 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    bb28:	b590      	push	{r4, r7, lr}
    bb2a:	b087      	sub	sp, #28
    bb2c:	af00      	add	r7, sp, #0
    bb2e:	6078      	str	r0, [r7, #4]
    bb30:	460b      	mov	r3, r1
    bb32:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    bb34:	687b      	ldr	r3, [r7, #4]
    bb36:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bb38:	68fb      	ldr	r3, [r7, #12]
    bb3a:	7b1b      	ldrb	r3, [r3, #12]
    bb3c:	2b00      	cmp	r3, #0
    bb3e:	d001      	beq.n	bb44 <n25q256a_switch_mode+0x1c>
    bb40:	2306      	movs	r3, #6
    bb42:	e000      	b.n	bb46 <n25q256a_switch_mode+0x1e>
    bb44:	2300      	movs	r3, #0
    bb46:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    bb48:	7afb      	ldrb	r3, [r7, #11]
    bb4a:	2265      	movs	r2, #101	; 0x65
    bb4c:	4619      	mov	r1, r3
    bb4e:	6878      	ldr	r0, [r7, #4]
    bb50:	4b25      	ldr	r3, [pc, #148]	; (bbe8 <n25q256a_switch_mode+0xc0>)
    bb52:	4798      	blx	r3
    bb54:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    bb56:	2300      	movs	r3, #0
    bb58:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    bb5a:	68fb      	ldr	r3, [r7, #12]
    bb5c:	7b1b      	ldrb	r3, [r3, #12]
    bb5e:	78fa      	ldrb	r2, [r7, #3]
    bb60:	429a      	cmp	r2, r3
    bb62:	d03d      	beq.n	bbe0 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    bb64:	78fb      	ldrb	r3, [r7, #3]
    bb66:	2b00      	cmp	r3, #0
    bb68:	d00b      	beq.n	bb82 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    bb6a:	697b      	ldr	r3, [r7, #20]
    bb6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bb70:	2b00      	cmp	r3, #0
    bb72:	d011      	beq.n	bb98 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    bb74:	697b      	ldr	r3, [r7, #20]
    bb76:	f003 031f 	and.w	r3, r3, #31
    bb7a:	617b      	str	r3, [r7, #20]
			modify = 1;
    bb7c:	2301      	movs	r3, #1
    bb7e:	74fb      	strb	r3, [r7, #19]
    bb80:	e00a      	b.n	bb98 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    bb82:	697b      	ldr	r3, [r7, #20]
    bb84:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bb88:	2b00      	cmp	r3, #0
    bb8a:	d105      	bne.n	bb98 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    bb8c:	697b      	ldr	r3, [r7, #20]
    bb8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    bb92:	617b      	str	r3, [r7, #20]
			modify = 1;
    bb94:	2301      	movs	r3, #1
    bb96:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    bb98:	7cfb      	ldrb	r3, [r7, #19]
    bb9a:	2b00      	cmp	r3, #0
    bb9c:	d021      	beq.n	bbe2 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    bb9e:	68fb      	ldr	r3, [r7, #12]
    bba0:	78fa      	ldrb	r2, [r7, #3]
    bba2:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    bba4:	7afb      	ldrb	r3, [r7, #11]
    bba6:	2201      	movs	r2, #1
    bba8:	4619      	mov	r1, r3
    bbaa:	6878      	ldr	r0, [r7, #4]
    bbac:	4b0f      	ldr	r3, [pc, #60]	; (bbec <n25q256a_switch_mode+0xc4>)
    bbae:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    bbb0:	7af9      	ldrb	r1, [r7, #11]
    bbb2:	697b      	ldr	r3, [r7, #20]
    bbb4:	2261      	movs	r2, #97	; 0x61
    bbb6:	6878      	ldr	r0, [r7, #4]
    bbb8:	4c0d      	ldr	r4, [pc, #52]	; (bbf0 <n25q256a_switch_mode+0xc8>)
    bbba:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bbbc:	78fb      	ldrb	r3, [r7, #3]
    bbbe:	2b00      	cmp	r3, #0
    bbc0:	d001      	beq.n	bbc6 <n25q256a_switch_mode+0x9e>
    bbc2:	2306      	movs	r3, #6
    bbc4:	e000      	b.n	bbc8 <n25q256a_switch_mode+0xa0>
    bbc6:	2300      	movs	r3, #0
    bbc8:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    bbca:	7afb      	ldrb	r3, [r7, #11]
    bbcc:	2265      	movs	r2, #101	; 0x65
    bbce:	4619      	mov	r1, r3
    bbd0:	6878      	ldr	r0, [r7, #4]
    bbd2:	4b05      	ldr	r3, [pc, #20]	; (bbe8 <n25q256a_switch_mode+0xc0>)
    bbd4:	4798      	blx	r3
    bbd6:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    bbd8:	68fb      	ldr	r3, [r7, #12]
    bbda:	78fa      	ldrb	r2, [r7, #3]
    bbdc:	731a      	strb	r2, [r3, #12]
    bbde:	e000      	b.n	bbe2 <n25q256a_switch_mode+0xba>
		return;
    bbe0:	bf00      	nop
	}
}
    bbe2:	371c      	adds	r7, #28
    bbe4:	46bd      	mov	sp, r7
    bbe6:	bd90      	pop	{r4, r7, pc}
    bbe8:	0000b91d 	.word	0x0000b91d
    bbec:	0000ba59 	.word	0x0000ba59
    bbf0:	0000b9b9 	.word	0x0000b9b9

0000bbf4 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    bbf4:	b580      	push	{r7, lr}
    bbf6:	b086      	sub	sp, #24
    bbf8:	af00      	add	r7, sp, #0
    bbfa:	60f8      	str	r0, [r7, #12]
    bbfc:	60b9      	str	r1, [r7, #8]
    bbfe:	607a      	str	r2, [r7, #4]
    bc00:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    bc02:	68fb      	ldr	r3, [r7, #12]
    bc04:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    bc06:	4a0c      	ldr	r2, [pc, #48]	; (bc38 <n25q256a_construct+0x44>)
    bc08:	68b9      	ldr	r1, [r7, #8]
    bc0a:	68f8      	ldr	r0, [r7, #12]
    bc0c:	4b0b      	ldr	r3, [pc, #44]	; (bc3c <n25q256a_construct+0x48>)
    bc0e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    bc10:	697b      	ldr	r3, [r7, #20]
    bc12:	2200      	movs	r2, #0
    bc14:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    bc16:	697b      	ldr	r3, [r7, #20]
    bc18:	2200      	movs	r2, #0
    bc1a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    bc1c:	697b      	ldr	r3, [r7, #20]
    bc1e:	687a      	ldr	r2, [r7, #4]
    bc20:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    bc22:	78fb      	ldrb	r3, [r7, #3]
    bc24:	4619      	mov	r1, r3
    bc26:	68f8      	ldr	r0, [r7, #12]
    bc28:	4b05      	ldr	r3, [pc, #20]	; (bc40 <n25q256a_construct+0x4c>)
    bc2a:	4798      	blx	r3
	return me;
    bc2c:	68fb      	ldr	r3, [r7, #12]
}
    bc2e:	4618      	mov	r0, r3
    bc30:	3718      	adds	r7, #24
    bc32:	46bd      	mov	sp, r7
    bc34:	bd80      	pop	{r7, pc}
    bc36:	bf00      	nop
    bc38:	000116ac 	.word	0x000116ac
    bc3c:	0000c0d1 	.word	0x0000c0d1
    bc40:	0000bb29 	.word	0x0000bb29

0000bc44 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    bc44:	b580      	push	{r7, lr}
    bc46:	b08c      	sub	sp, #48	; 0x30
    bc48:	af00      	add	r7, sp, #0
    bc4a:	60f8      	str	r0, [r7, #12]
    bc4c:	60b9      	str	r1, [r7, #8]
    bc4e:	607a      	str	r2, [r7, #4]
    bc50:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bc52:	68fb      	ldr	r3, [r7, #12]
    bc54:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bc56:	68fb      	ldr	r3, [r7, #12]
    bc58:	681b      	ldr	r3, [r3, #0]
    bc5a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    bc5c:	f107 0310 	add.w	r3, r7, #16
    bc60:	2200      	movs	r2, #0
    bc62:	601a      	str	r2, [r3, #0]
    bc64:	605a      	str	r2, [r3, #4]
    bc66:	609a      	str	r2, [r3, #8]
    bc68:	60da      	str	r2, [r3, #12]
    bc6a:	611a      	str	r2, [r3, #16]
    bc6c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc70:	7b1b      	ldrb	r3, [r3, #12]
    bc72:	2b00      	cmp	r3, #0
    bc74:	d001      	beq.n	bc7a <n25q256a_read+0x36>
    bc76:	2206      	movs	r2, #6
    bc78:	e000      	b.n	bc7c <n25q256a_read+0x38>
    bc7a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    bc7c:	7c3b      	ldrb	r3, [r7, #16]
    bc7e:	f362 0302 	bfi	r3, r2, #0, #3
    bc82:	743b      	strb	r3, [r7, #16]
    bc84:	7c3b      	ldrb	r3, [r7, #16]
    bc86:	f043 0310 	orr.w	r3, r3, #16
    bc8a:	743b      	strb	r3, [r7, #16]
    bc8c:	7c3b      	ldrb	r3, [r7, #16]
    bc8e:	f043 0320 	orr.w	r3, r3, #32
    bc92:	743b      	strb	r3, [r7, #16]
    bc94:	7c3b      	ldrb	r3, [r7, #16]
    bc96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bc9a:	743b      	strb	r3, [r7, #16]
    bc9c:	7c7b      	ldrb	r3, [r7, #17]
    bc9e:	2201      	movs	r2, #1
    bca0:	f362 1305 	bfi	r3, r2, #4, #2
    bca4:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    bca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bca8:	7b1b      	ldrb	r3, [r3, #12]
    bcaa:	2b00      	cmp	r3, #0
    bcac:	d001      	beq.n	bcb2 <n25q256a_read+0x6e>
    bcae:	220a      	movs	r2, #10
    bcb0:	e000      	b.n	bcb4 <n25q256a_read+0x70>
    bcb2:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    bcb4:	7cbb      	ldrb	r3, [r7, #18]
    bcb6:	f362 0304 	bfi	r3, r2, #0, #5
    bcba:	74bb      	strb	r3, [r7, #18]
    bcbc:	230b      	movs	r3, #11
    bcbe:	753b      	strb	r3, [r7, #20]
    bcc0:	687b      	ldr	r3, [r7, #4]
    bcc2:	61bb      	str	r3, [r7, #24]
    bcc4:	683b      	ldr	r3, [r7, #0]
    bcc6:	61fb      	str	r3, [r7, #28]
    bcc8:	68bb      	ldr	r3, [r7, #8]
    bcca:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    bccc:	f107 0310 	add.w	r3, r7, #16
    bcd0:	4619      	mov	r1, r3
    bcd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bcd4:	4b03      	ldr	r3, [pc, #12]	; (bce4 <n25q256a_read+0xa0>)
    bcd6:	4798      	blx	r3
	return ERR_NONE;
    bcd8:	2300      	movs	r3, #0
}
    bcda:	4618      	mov	r0, r3
    bcdc:	3730      	adds	r7, #48	; 0x30
    bcde:	46bd      	mov	sp, r7
    bce0:	bd80      	pop	{r7, pc}
    bce2:	bf00      	nop
    bce4:	00002bd9 	.word	0x00002bd9

0000bce8 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    bce8:	b580      	push	{r7, lr}
    bcea:	b08c      	sub	sp, #48	; 0x30
    bcec:	af00      	add	r7, sp, #0
    bcee:	60f8      	str	r0, [r7, #12]
    bcf0:	60b9      	str	r1, [r7, #8]
    bcf2:	607a      	str	r2, [r7, #4]
    bcf4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bcf6:	68fb      	ldr	r3, [r7, #12]
    bcf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bcfa:	68fb      	ldr	r3, [r7, #12]
    bcfc:	681b      	ldr	r3, [r3, #0]
    bcfe:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    bd00:	f107 0310 	add.w	r3, r7, #16
    bd04:	2200      	movs	r2, #0
    bd06:	601a      	str	r2, [r3, #0]
    bd08:	605a      	str	r2, [r3, #4]
    bd0a:	609a      	str	r2, [r3, #8]
    bd0c:	60da      	str	r2, [r3, #12]
    bd0e:	611a      	str	r2, [r3, #16]
    bd10:	615a      	str	r2, [r3, #20]
    bd12:	7c3b      	ldrb	r3, [r7, #16]
    bd14:	f043 0310 	orr.w	r3, r3, #16
    bd18:	743b      	strb	r3, [r7, #16]
    bd1a:	7c3b      	ldrb	r3, [r7, #16]
    bd1c:	f043 0320 	orr.w	r3, r3, #32
    bd20:	743b      	strb	r3, [r7, #16]
    bd22:	7c3b      	ldrb	r3, [r7, #16]
    bd24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bd28:	743b      	strb	r3, [r7, #16]
    bd2a:	7c7b      	ldrb	r3, [r7, #17]
    bd2c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    bd30:	747b      	strb	r3, [r7, #17]
    bd32:	2302      	movs	r3, #2
    bd34:	753b      	strb	r3, [r7, #20]
    bd36:	687b      	ldr	r3, [r7, #4]
    bd38:	61bb      	str	r3, [r7, #24]
    bd3a:	683b      	ldr	r3, [r7, #0]
    bd3c:	61fb      	str	r3, [r7, #28]
    bd3e:	68bb      	ldr	r3, [r7, #8]
    bd40:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd44:	7b1b      	ldrb	r3, [r3, #12]
    bd46:	2b00      	cmp	r3, #0
    bd48:	d001      	beq.n	bd4e <n25q256a_write+0x66>
    bd4a:	2206      	movs	r2, #6
    bd4c:	e000      	b.n	bd50 <n25q256a_write+0x68>
    bd4e:	2200      	movs	r2, #0
    bd50:	7c3b      	ldrb	r3, [r7, #16]
    bd52:	f362 0302 	bfi	r3, r2, #0, #3
    bd56:	743b      	strb	r3, [r7, #16]
	while (length) {
    bd58:	e035      	b.n	bdc6 <n25q256a_write+0xde>
		cmd.address = address;
    bd5a:	687b      	ldr	r3, [r7, #4]
    bd5c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    bd5e:	683b      	ldr	r3, [r7, #0]
    bd60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    bd64:	d802      	bhi.n	bd6c <n25q256a_write+0x84>
			cmd.buf_len = length;
    bd66:	683b      	ldr	r3, [r7, #0]
    bd68:	61fb      	str	r3, [r7, #28]
    bd6a:	e002      	b.n	bd72 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    bd6c:	f44f 7380 	mov.w	r3, #256	; 0x100
    bd70:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bd72:	7c3b      	ldrb	r3, [r7, #16]
    bd74:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bd78:	b2db      	uxtb	r3, r3
    bd7a:	2201      	movs	r2, #1
    bd7c:	4619      	mov	r1, r3
    bd7e:	68f8      	ldr	r0, [r7, #12]
    bd80:	4b19      	ldr	r3, [pc, #100]	; (bde8 <n25q256a_write+0x100>)
    bd82:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    bd84:	f107 0310 	add.w	r3, r7, #16
    bd88:	4619      	mov	r1, r3
    bd8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bd8c:	4b17      	ldr	r3, [pc, #92]	; (bdec <n25q256a_write+0x104>)
    bd8e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bd90:	bf00      	nop
    bd92:	7c3b      	ldrb	r3, [r7, #16]
    bd94:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bd98:	b2db      	uxtb	r3, r3
    bd9a:	2270      	movs	r2, #112	; 0x70
    bd9c:	4619      	mov	r1, r3
    bd9e:	68f8      	ldr	r0, [r7, #12]
    bda0:	4b13      	ldr	r3, [pc, #76]	; (bdf0 <n25q256a_write+0x108>)
    bda2:	4798      	blx	r3
    bda4:	4603      	mov	r3, r0
    bda6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bdaa:	2b00      	cmp	r3, #0
    bdac:	d0f1      	beq.n	bd92 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    bdae:	6a3a      	ldr	r2, [r7, #32]
    bdb0:	69fb      	ldr	r3, [r7, #28]
    bdb2:	4413      	add	r3, r2
    bdb4:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    bdb6:	69fb      	ldr	r3, [r7, #28]
    bdb8:	683a      	ldr	r2, [r7, #0]
    bdba:	1ad3      	subs	r3, r2, r3
    bdbc:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    bdbe:	69fb      	ldr	r3, [r7, #28]
    bdc0:	687a      	ldr	r2, [r7, #4]
    bdc2:	4413      	add	r3, r2
    bdc4:	607b      	str	r3, [r7, #4]
	while (length) {
    bdc6:	683b      	ldr	r3, [r7, #0]
    bdc8:	2b00      	cmp	r3, #0
    bdca:	d1c6      	bne.n	bd5a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    bdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bdce:	7b5b      	ldrb	r3, [r3, #13]
    bdd0:	2b00      	cmp	r3, #0
    bdd2:	d003      	beq.n	bddc <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    bdd4:	2101      	movs	r1, #1
    bdd6:	68f8      	ldr	r0, [r7, #12]
    bdd8:	4b06      	ldr	r3, [pc, #24]	; (bdf4 <n25q256a_write+0x10c>)
    bdda:	4798      	blx	r3
	}
	return ERR_NONE;
    bddc:	2300      	movs	r3, #0
}
    bdde:	4618      	mov	r0, r3
    bde0:	3730      	adds	r7, #48	; 0x30
    bde2:	46bd      	mov	sp, r7
    bde4:	bd80      	pop	{r7, pc}
    bde6:	bf00      	nop
    bde8:	0000ba59 	.word	0x0000ba59
    bdec:	00002bd9 	.word	0x00002bd9
    bdf0:	0000b91d 	.word	0x0000b91d
    bdf4:	0000b851 	.word	0x0000b851

0000bdf8 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    bdf8:	b580      	push	{r7, lr}
    bdfa:	b090      	sub	sp, #64	; 0x40
    bdfc:	af00      	add	r7, sp, #0
    bdfe:	60f8      	str	r0, [r7, #12]
    be00:	60b9      	str	r1, [r7, #8]
    be02:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    be04:	68fb      	ldr	r3, [r7, #12]
    be06:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    be08:	68fb      	ldr	r3, [r7, #12]
    be0a:	681b      	ldr	r3, [r3, #0]
    be0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    be0e:	f107 0314 	add.w	r3, r7, #20
    be12:	2200      	movs	r2, #0
    be14:	601a      	str	r2, [r3, #0]
    be16:	605a      	str	r2, [r3, #4]
    be18:	609a      	str	r2, [r3, #8]
    be1a:	60da      	str	r2, [r3, #12]
    be1c:	611a      	str	r2, [r3, #16]
    be1e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    be20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    be22:	7b1b      	ldrb	r3, [r3, #12]
    be24:	2b00      	cmp	r3, #0
    be26:	d001      	beq.n	be2c <n25q256a_erase+0x34>
    be28:	2206      	movs	r2, #6
    be2a:	e000      	b.n	be2e <n25q256a_erase+0x36>
    be2c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    be2e:	7d3b      	ldrb	r3, [r7, #20]
    be30:	f362 0302 	bfi	r3, r2, #0, #3
    be34:	753b      	strb	r3, [r7, #20]
    be36:	7d3b      	ldrb	r3, [r7, #20]
    be38:	f043 0310 	orr.w	r3, r3, #16
    be3c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    be3e:	687b      	ldr	r3, [r7, #4]
    be40:	4a56      	ldr	r2, [pc, #344]	; (bf9c <n25q256a_erase+0x1a4>)
    be42:	4293      	cmp	r3, r2
    be44:	bf94      	ite	ls
    be46:	2301      	movls	r3, #1
    be48:	2300      	movhi	r3, #0
    be4a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    be4c:	7d3b      	ldrb	r3, [r7, #20]
    be4e:	f362 1345 	bfi	r3, r2, #5, #1
    be52:	753b      	strb	r3, [r7, #20]
    be54:	7d7b      	ldrb	r3, [r7, #21]
    be56:	2202      	movs	r2, #2
    be58:	f362 1305 	bfi	r3, r2, #4, #2
    be5c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    be5e:	68bb      	ldr	r3, [r7, #8]
    be60:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    be62:	687b      	ldr	r3, [r7, #4]
    be64:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    be66:	2300      	movs	r3, #0
    be68:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    be6a:	687b      	ldr	r3, [r7, #4]
    be6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    be70:	2b00      	cmp	r3, #0
    be72:	d104      	bne.n	be7e <n25q256a_erase+0x86>
    be74:	68bb      	ldr	r3, [r7, #8]
    be76:	f3c3 030b 	ubfx	r3, r3, #0, #12
    be7a:	2b00      	cmp	r3, #0
    be7c:	d002      	beq.n	be84 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    be7e:	f06f 030c 	mvn.w	r3, #12
    be82:	e087      	b.n	bf94 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    be84:	687b      	ldr	r3, [r7, #4]
    be86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    be8a:	d368      	bcc.n	bf5e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    be8c:	23c7      	movs	r3, #199	; 0xc7
    be8e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    be90:	7d3b      	ldrb	r3, [r7, #20]
    be92:	f3c3 0302 	ubfx	r3, r3, #0, #3
    be96:	b2db      	uxtb	r3, r3
    be98:	2201      	movs	r2, #1
    be9a:	4619      	mov	r1, r3
    be9c:	68f8      	ldr	r0, [r7, #12]
    be9e:	4b40      	ldr	r3, [pc, #256]	; (bfa0 <n25q256a_erase+0x1a8>)
    bea0:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    bea2:	f107 0314 	add.w	r3, r7, #20
    bea6:	4619      	mov	r1, r3
    bea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    beaa:	4b3e      	ldr	r3, [pc, #248]	; (bfa4 <n25q256a_erase+0x1ac>)
    beac:	4798      	blx	r3
    beae:	e059      	b.n	bf64 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    beb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    beb2:	b29b      	uxth	r3, r3
    beb4:	2b00      	cmp	r3, #0
    beb6:	d11f      	bne.n	bef8 <n25q256a_erase+0x100>
    beb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    beba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bebe:	d31b      	bcc.n	bef8 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    bec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bec2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    bec4:	23d8      	movs	r3, #216	; 0xd8
    bec6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bec8:	7d3b      	ldrb	r3, [r7, #20]
    beca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bece:	b2db      	uxtb	r3, r3
    bed0:	2201      	movs	r2, #1
    bed2:	4619      	mov	r1, r3
    bed4:	68f8      	ldr	r0, [r7, #12]
    bed6:	4b32      	ldr	r3, [pc, #200]	; (bfa0 <n25q256a_erase+0x1a8>)
    bed8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    beda:	f107 0314 	add.w	r3, r7, #20
    bede:	4619      	mov	r1, r3
    bee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bee2:	4b30      	ldr	r3, [pc, #192]	; (bfa4 <n25q256a_erase+0x1ac>)
    bee4:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    bee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bee8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    beec:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    beee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bef0:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    bef4:	63bb      	str	r3, [r7, #56]	; 0x38
    bef6:	e023      	b.n	bf40 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    bef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    befa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    befe:	d31b      	bcc.n	bf38 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    bf00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bf02:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    bf04:	2320      	movs	r3, #32
    bf06:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bf08:	7d3b      	ldrb	r3, [r7, #20]
    bf0a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bf0e:	b2db      	uxtb	r3, r3
    bf10:	2201      	movs	r2, #1
    bf12:	4619      	mov	r1, r3
    bf14:	68f8      	ldr	r0, [r7, #12]
    bf16:	4b22      	ldr	r3, [pc, #136]	; (bfa0 <n25q256a_erase+0x1a8>)
    bf18:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    bf1a:	f107 0314 	add.w	r3, r7, #20
    bf1e:	4619      	mov	r1, r3
    bf20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    bf22:	4b20      	ldr	r3, [pc, #128]	; (bfa4 <n25q256a_erase+0x1ac>)
    bf24:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    bf26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bf28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    bf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bf30:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    bf34:	63bb      	str	r3, [r7, #56]	; 0x38
    bf36:	e003      	b.n	bf40 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    bf38:	f06f 030c 	mvn.w	r3, #12
    bf3c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    bf3e:	e011      	b.n	bf64 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bf40:	bf00      	nop
    bf42:	7d3b      	ldrb	r3, [r7, #20]
    bf44:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bf48:	b2db      	uxtb	r3, r3
    bf4a:	2270      	movs	r2, #112	; 0x70
    bf4c:	4619      	mov	r1, r3
    bf4e:	68f8      	ldr	r0, [r7, #12]
    bf50:	4b15      	ldr	r3, [pc, #84]	; (bfa8 <n25q256a_erase+0x1b0>)
    bf52:	4798      	blx	r3
    bf54:	4603      	mov	r3, r0
    bf56:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bf5a:	2b00      	cmp	r3, #0
    bf5c:	d0f1      	beq.n	bf42 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    bf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bf60:	2b00      	cmp	r3, #0
    bf62:	d1a5      	bne.n	beb0 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bf64:	bf00      	nop
    bf66:	7d3b      	ldrb	r3, [r7, #20]
    bf68:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bf6c:	b2db      	uxtb	r3, r3
    bf6e:	2270      	movs	r2, #112	; 0x70
    bf70:	4619      	mov	r1, r3
    bf72:	68f8      	ldr	r0, [r7, #12]
    bf74:	4b0c      	ldr	r3, [pc, #48]	; (bfa8 <n25q256a_erase+0x1b0>)
    bf76:	4798      	blx	r3
    bf78:	4603      	mov	r3, r0
    bf7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bf7e:	2b00      	cmp	r3, #0
    bf80:	d0f1      	beq.n	bf66 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    bf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bf84:	7b5b      	ldrb	r3, [r3, #13]
    bf86:	2b00      	cmp	r3, #0
    bf88:	d003      	beq.n	bf92 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    bf8a:	2101      	movs	r1, #1
    bf8c:	68f8      	ldr	r0, [r7, #12]
    bf8e:	4b07      	ldr	r3, [pc, #28]	; (bfac <n25q256a_erase+0x1b4>)
    bf90:	4798      	blx	r3
	}
	return rc;
    bf92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    bf94:	4618      	mov	r0, r3
    bf96:	3740      	adds	r7, #64	; 0x40
    bf98:	46bd      	mov	sp, r7
    bf9a:	bd80      	pop	{r7, pc}
    bf9c:	001fffff 	.word	0x001fffff
    bfa0:	0000ba59 	.word	0x0000ba59
    bfa4:	00002bd9 	.word	0x00002bd9
    bfa8:	0000b91d 	.word	0x0000b91d
    bfac:	0000b851 	.word	0x0000b851

0000bfb0 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    bfb0:	b590      	push	{r4, r7, lr}
    bfb2:	b085      	sub	sp, #20
    bfb4:	af00      	add	r7, sp, #0
    bfb6:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    bfb8:	687b      	ldr	r3, [r7, #4]
    bfba:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bfbc:	68fb      	ldr	r3, [r7, #12]
    bfbe:	7b1b      	ldrb	r3, [r3, #12]
    bfc0:	2b00      	cmp	r3, #0
    bfc2:	d001      	beq.n	bfc8 <n25q256a_enable_xip+0x18>
    bfc4:	2306      	movs	r3, #6
    bfc6:	e000      	b.n	bfca <n25q256a_enable_xip+0x1a>
    bfc8:	2300      	movs	r3, #0
    bfca:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    bfcc:	68fb      	ldr	r3, [r7, #12]
    bfce:	7b5b      	ldrb	r3, [r3, #13]
    bfd0:	2b00      	cmp	r3, #0
    bfd2:	d129      	bne.n	c028 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    bfd4:	7afb      	ldrb	r3, [r7, #11]
    bfd6:	2285      	movs	r2, #133	; 0x85
    bfd8:	4619      	mov	r1, r3
    bfda:	6878      	ldr	r0, [r7, #4]
    bfdc:	4b15      	ldr	r3, [pc, #84]	; (c034 <n25q256a_enable_xip+0x84>)
    bfde:	4798      	blx	r3
    bfe0:	4603      	mov	r3, r0
    bfe2:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    bfe4:	7abb      	ldrb	r3, [r7, #10]
    bfe6:	f003 0308 	and.w	r3, r3, #8
    bfea:	2b00      	cmp	r3, #0
    bfec:	d015      	beq.n	c01a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    bfee:	7abb      	ldrb	r3, [r7, #10]
    bff0:	f023 0308 	bic.w	r3, r3, #8
    bff4:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    bff6:	7abb      	ldrb	r3, [r7, #10]
    bff8:	7af9      	ldrb	r1, [r7, #11]
    bffa:	2281      	movs	r2, #129	; 0x81
    bffc:	6878      	ldr	r0, [r7, #4]
    bffe:	4c0e      	ldr	r4, [pc, #56]	; (c038 <n25q256a_enable_xip+0x88>)
    c000:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c002:	bf00      	nop
    c004:	7afb      	ldrb	r3, [r7, #11]
    c006:	2270      	movs	r2, #112	; 0x70
    c008:	4619      	mov	r1, r3
    c00a:	6878      	ldr	r0, [r7, #4]
    c00c:	4b09      	ldr	r3, [pc, #36]	; (c034 <n25q256a_enable_xip+0x84>)
    c00e:	4798      	blx	r3
    c010:	4603      	mov	r3, r0
    c012:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c016:	2b00      	cmp	r3, #0
    c018:	d0f4      	beq.n	c004 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c01a:	68fb      	ldr	r3, [r7, #12]
    c01c:	2201      	movs	r2, #1
    c01e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c020:	2101      	movs	r1, #1
    c022:	6878      	ldr	r0, [r7, #4]
    c024:	4b05      	ldr	r3, [pc, #20]	; (c03c <n25q256a_enable_xip+0x8c>)
    c026:	4798      	blx	r3
	}
	return ERR_NONE;
    c028:	2300      	movs	r3, #0
}
    c02a:	4618      	mov	r0, r3
    c02c:	3714      	adds	r7, #20
    c02e:	46bd      	mov	sp, r7
    c030:	bd90      	pop	{r4, r7, pc}
    c032:	bf00      	nop
    c034:	0000b91d 	.word	0x0000b91d
    c038:	0000b9b9 	.word	0x0000b9b9
    c03c:	0000b851 	.word	0x0000b851

0000c040 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c040:	b580      	push	{r7, lr}
    c042:	b086      	sub	sp, #24
    c044:	af00      	add	r7, sp, #0
    c046:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c048:	687b      	ldr	r3, [r7, #4]
    c04a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c04c:	687b      	ldr	r3, [r7, #4]
    c04e:	681b      	ldr	r3, [r3, #0]
    c050:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c052:	697b      	ldr	r3, [r7, #20]
    c054:	7b1b      	ldrb	r3, [r3, #12]
    c056:	2b00      	cmp	r3, #0
    c058:	d001      	beq.n	c05e <n25q256a_disable_xip+0x1e>
    c05a:	2306      	movs	r3, #6
    c05c:	e000      	b.n	c060 <n25q256a_disable_xip+0x20>
    c05e:	2300      	movs	r3, #0
    c060:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c062:	2100      	movs	r1, #0
    c064:	6878      	ldr	r0, [r7, #4]
    c066:	4b15      	ldr	r3, [pc, #84]	; (c0bc <n25q256a_disable_xip+0x7c>)
    c068:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c06a:	7bfb      	ldrb	r3, [r7, #15]
    c06c:	2285      	movs	r2, #133	; 0x85
    c06e:	4619      	mov	r1, r3
    c070:	6878      	ldr	r0, [r7, #4]
    c072:	4b13      	ldr	r3, [pc, #76]	; (c0c0 <n25q256a_disable_xip+0x80>)
    c074:	4798      	blx	r3
    c076:	4603      	mov	r3, r0
    c078:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c07a:	7bbb      	ldrb	r3, [r7, #14]
    c07c:	f003 0308 	and.w	r3, r3, #8
    c080:	2b00      	cmp	r3, #0
    c082:	d113      	bne.n	c0ac <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c084:	697b      	ldr	r3, [r7, #20]
    c086:	689b      	ldr	r3, [r3, #8]
    c088:	2b00      	cmp	r3, #0
    c08a:	d00f      	beq.n	c0ac <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c08c:	693b      	ldr	r3, [r7, #16]
    c08e:	681b      	ldr	r3, [r3, #0]
    c090:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c092:	6938      	ldr	r0, [r7, #16]
    c094:	4b0b      	ldr	r3, [pc, #44]	; (c0c4 <n25q256a_disable_xip+0x84>)
    c096:	4798      	blx	r3
			n25q->pin_exit_xip();
    c098:	697b      	ldr	r3, [r7, #20]
    c09a:	689b      	ldr	r3, [r3, #8]
    c09c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c09e:	68b9      	ldr	r1, [r7, #8]
    c0a0:	6938      	ldr	r0, [r7, #16]
    c0a2:	4b09      	ldr	r3, [pc, #36]	; (c0c8 <n25q256a_disable_xip+0x88>)
    c0a4:	4798      	blx	r3
			qspi_sync_enable(descr);
    c0a6:	6938      	ldr	r0, [r7, #16]
    c0a8:	4b08      	ldr	r3, [pc, #32]	; (c0cc <n25q256a_disable_xip+0x8c>)
    c0aa:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c0ac:	697b      	ldr	r3, [r7, #20]
    c0ae:	2200      	movs	r2, #0
    c0b0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c0b2:	2300      	movs	r3, #0
}
    c0b4:	4618      	mov	r0, r3
    c0b6:	3718      	adds	r7, #24
    c0b8:	46bd      	mov	sp, r7
    c0ba:	bd80      	pop	{r7, pc}
    c0bc:	0000b851 	.word	0x0000b851
    c0c0:	0000b91d 	.word	0x0000b91d
    c0c4:	00002b9d 	.word	0x00002b9d
    c0c8:	00002b15 	.word	0x00002b15
    c0cc:	00002b61 	.word	0x00002b61

0000c0d0 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c0d0:	b480      	push	{r7}
    c0d2:	b085      	sub	sp, #20
    c0d4:	af00      	add	r7, sp, #0
    c0d6:	60f8      	str	r0, [r7, #12]
    c0d8:	60b9      	str	r1, [r7, #8]
    c0da:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c0dc:	68fb      	ldr	r3, [r7, #12]
    c0de:	68ba      	ldr	r2, [r7, #8]
    c0e0:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c0e2:	68fb      	ldr	r3, [r7, #12]
    c0e4:	687a      	ldr	r2, [r7, #4]
    c0e6:	605a      	str	r2, [r3, #4]

	return me;
    c0e8:	68fb      	ldr	r3, [r7, #12]
}
    c0ea:	4618      	mov	r0, r3
    c0ec:	3714      	adds	r7, #20
    c0ee:	46bd      	mov	sp, r7
    c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0f4:	4770      	bx	lr

0000c0f6 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c0f6:	b480      	push	{r7}
    c0f8:	b083      	sub	sp, #12
    c0fa:	af00      	add	r7, sp, #0
    c0fc:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c0fe:	687b      	ldr	r3, [r7, #4]
    c100:	781b      	ldrb	r3, [r3, #0]
    c102:	b29a      	uxth	r2, r3
    c104:	687b      	ldr	r3, [r7, #4]
    c106:	3301      	adds	r3, #1
    c108:	781b      	ldrb	r3, [r3, #0]
    c10a:	b29b      	uxth	r3, r3
    c10c:	021b      	lsls	r3, r3, #8
    c10e:	b29b      	uxth	r3, r3
    c110:	4413      	add	r3, r2
    c112:	b29b      	uxth	r3, r3
}
    c114:	4618      	mov	r0, r3
    c116:	370c      	adds	r7, #12
    c118:	46bd      	mov	sp, r7
    c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c11e:	4770      	bx	lr

0000c120 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c120:	b480      	push	{r7}
    c122:	b083      	sub	sp, #12
    c124:	af00      	add	r7, sp, #0
    c126:	6078      	str	r0, [r7, #4]
	return desc[0];
    c128:	687b      	ldr	r3, [r7, #4]
    c12a:	781b      	ldrb	r3, [r3, #0]
}
    c12c:	4618      	mov	r0, r3
    c12e:	370c      	adds	r7, #12
    c130:	46bd      	mov	sp, r7
    c132:	f85d 7b04 	ldr.w	r7, [sp], #4
    c136:	4770      	bx	lr

0000c138 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c138:	b580      	push	{r7, lr}
    c13a:	b082      	sub	sp, #8
    c13c:	af00      	add	r7, sp, #0
    c13e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c140:	6878      	ldr	r0, [r7, #4]
    c142:	4b05      	ldr	r3, [pc, #20]	; (c158 <usb_desc_next+0x20>)
    c144:	4798      	blx	r3
    c146:	4603      	mov	r3, r0
    c148:	461a      	mov	r2, r3
    c14a:	687b      	ldr	r3, [r7, #4]
    c14c:	4413      	add	r3, r2
}
    c14e:	4618      	mov	r0, r3
    c150:	3708      	adds	r7, #8
    c152:	46bd      	mov	sp, r7
    c154:	bd80      	pop	{r7, pc}
    c156:	bf00      	nop
    c158:	0000c121 	.word	0x0000c121

0000c15c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c15c:	b580      	push	{r7, lr}
    c15e:	b08c      	sub	sp, #48	; 0x30
    c160:	af00      	add	r7, sp, #0
    c162:	6078      	str	r0, [r7, #4]
    c164:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c166:	687b      	ldr	r3, [r7, #4]
    c168:	689b      	ldr	r3, [r3, #8]
    c16a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c16c:	683b      	ldr	r3, [r7, #0]
    c16e:	681b      	ldr	r3, [r3, #0]
    c170:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c172:	2300      	movs	r3, #0
    c174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c178:	e08f      	b.n	c29a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c17c:	2b00      	cmp	r3, #0
    c17e:	d102      	bne.n	c186 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c180:	f06f 0309 	mvn.w	r3, #9
    c184:	e092      	b.n	c2ac <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c188:	789b      	ldrb	r3, [r3, #2]
    c18a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c18e:	795b      	ldrb	r3, [r3, #5]
    c190:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c192:	7c7b      	ldrb	r3, [r7, #17]
    c194:	2b02      	cmp	r3, #2
    c196:	d002      	beq.n	c19e <cdcdf_acm_enable+0x42>
    c198:	7c7b      	ldrb	r3, [r7, #17]
    c19a:	2b0a      	cmp	r3, #10
    c19c:	d121      	bne.n	c1e2 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c19e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c1a2:	6a3a      	ldr	r2, [r7, #32]
    c1a4:	5cd2      	ldrb	r2, [r2, r3]
    c1a6:	7bbb      	ldrb	r3, [r7, #14]
    c1a8:	429a      	cmp	r2, r3
    c1aa:	d102      	bne.n	c1b2 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c1ac:	f06f 0311 	mvn.w	r3, #17
    c1b0:	e07c      	b.n	c2ac <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c1b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c1b6:	6a3a      	ldr	r2, [r7, #32]
    c1b8:	5cd3      	ldrb	r3, [r2, r3]
    c1ba:	2bff      	cmp	r3, #255	; 0xff
    c1bc:	d002      	beq.n	c1c4 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c1be:	f06f 031b 	mvn.w	r3, #27
    c1c2:	e073      	b.n	c2ac <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c1c8:	7bb9      	ldrb	r1, [r7, #14]
    c1ca:	6a3a      	ldr	r2, [r7, #32]
    c1cc:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c1ce:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c1d0:	683b      	ldr	r3, [r7, #0]
    c1d2:	685b      	ldr	r3, [r3, #4]
    c1d4:	2205      	movs	r2, #5
    c1d6:	4619      	mov	r1, r3
    c1d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c1da:	4b36      	ldr	r3, [pc, #216]	; (c2b4 <cdcdf_acm_enable+0x158>)
    c1dc:	4798      	blx	r3
    c1de:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c1e0:	e047      	b.n	c272 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c1e2:	f06f 0309 	mvn.w	r3, #9
    c1e6:	e061      	b.n	c2ac <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c1ea:	789b      	ldrb	r3, [r3, #2]
    c1ec:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c1f0:	78db      	ldrb	r3, [r3, #3]
    c1f2:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c1f6:	3304      	adds	r3, #4
    c1f8:	4618      	mov	r0, r3
    c1fa:	4b2f      	ldr	r3, [pc, #188]	; (c2b8 <cdcdf_acm_enable+0x15c>)
    c1fc:	4798      	blx	r3
    c1fe:	4603      	mov	r3, r0
    c200:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c202:	7ebb      	ldrb	r3, [r7, #26]
    c204:	7ef9      	ldrb	r1, [r7, #27]
    c206:	8bba      	ldrh	r2, [r7, #28]
    c208:	4618      	mov	r0, r3
    c20a:	4b2c      	ldr	r3, [pc, #176]	; (c2bc <cdcdf_acm_enable+0x160>)
    c20c:	4798      	blx	r3
    c20e:	4603      	mov	r3, r0
    c210:	2b00      	cmp	r3, #0
    c212:	d002      	beq.n	c21a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c214:	f06f 0313 	mvn.w	r3, #19
    c218:	e048      	b.n	c2ac <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c21a:	7ebb      	ldrb	r3, [r7, #26]
    c21c:	b25b      	sxtb	r3, r3
    c21e:	2b00      	cmp	r3, #0
    c220:	da0f      	bge.n	c242 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c226:	7eb9      	ldrb	r1, [r7, #26]
    c228:	6a3a      	ldr	r2, [r7, #32]
    c22a:	4413      	add	r3, r2
    c22c:	460a      	mov	r2, r1
    c22e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c234:	6a3a      	ldr	r2, [r7, #32]
    c236:	4413      	add	r3, r2
    c238:	789b      	ldrb	r3, [r3, #2]
    c23a:	4618      	mov	r0, r3
    c23c:	4b20      	ldr	r3, [pc, #128]	; (c2c0 <cdcdf_acm_enable+0x164>)
    c23e:	4798      	blx	r3
    c240:	e007      	b.n	c252 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c242:	7eba      	ldrb	r2, [r7, #26]
    c244:	6a3b      	ldr	r3, [r7, #32]
    c246:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c248:	6a3b      	ldr	r3, [r7, #32]
    c24a:	791b      	ldrb	r3, [r3, #4]
    c24c:	4618      	mov	r0, r3
    c24e:	4b1c      	ldr	r3, [pc, #112]	; (c2c0 <cdcdf_acm_enable+0x164>)
    c250:	4798      	blx	r3
			}
			desc->sod = ep;
    c252:	683b      	ldr	r3, [r7, #0]
    c254:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c256:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c258:	683b      	ldr	r3, [r7, #0]
    c25a:	681b      	ldr	r3, [r3, #0]
    c25c:	4618      	mov	r0, r3
    c25e:	4b19      	ldr	r3, [pc, #100]	; (c2c4 <cdcdf_acm_enable+0x168>)
    c260:	4798      	blx	r3
    c262:	4602      	mov	r2, r0
    c264:	683b      	ldr	r3, [r7, #0]
    c266:	685b      	ldr	r3, [r3, #4]
    c268:	4619      	mov	r1, r3
    c26a:	4610      	mov	r0, r2
    c26c:	4b16      	ldr	r3, [pc, #88]	; (c2c8 <cdcdf_acm_enable+0x16c>)
    c26e:	4798      	blx	r3
    c270:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c272:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c274:	2b00      	cmp	r3, #0
    c276:	d1b7      	bne.n	c1e8 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c278:	683b      	ldr	r3, [r7, #0]
    c27a:	681b      	ldr	r3, [r3, #0]
    c27c:	4618      	mov	r0, r3
    c27e:	4b11      	ldr	r3, [pc, #68]	; (c2c4 <cdcdf_acm_enable+0x168>)
    c280:	4798      	blx	r3
    c282:	683b      	ldr	r3, [r7, #0]
    c284:	685b      	ldr	r3, [r3, #4]
    c286:	2204      	movs	r2, #4
    c288:	4619      	mov	r1, r3
    c28a:	4b0a      	ldr	r3, [pc, #40]	; (c2b4 <cdcdf_acm_enable+0x158>)
    c28c:	4798      	blx	r3
    c28e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c294:	3301      	adds	r3, #1
    c296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c29a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c29e:	2b01      	cmp	r3, #1
    c2a0:	f67f af6b 	bls.w	c17a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c2a4:	4b09      	ldr	r3, [pc, #36]	; (c2cc <cdcdf_acm_enable+0x170>)
    c2a6:	2201      	movs	r2, #1
    c2a8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c2aa:	2300      	movs	r3, #0
}
    c2ac:	4618      	mov	r0, r3
    c2ae:	3730      	adds	r7, #48	; 0x30
    c2b0:	46bd      	mov	sp, r7
    c2b2:	bd80      	pop	{r7, pc}
    c2b4:	0000d51d 	.word	0x0000d51d
    c2b8:	0000c0f7 	.word	0x0000c0f7
    c2bc:	00003b0d 	.word	0x00003b0d
    c2c0:	00003bf9 	.word	0x00003bf9
    c2c4:	0000c139 	.word	0x0000c139
    c2c8:	0000d579 	.word	0x0000d579
    c2cc:	200034b8 	.word	0x200034b8

0000c2d0 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c2d0:	b580      	push	{r7, lr}
    c2d2:	b088      	sub	sp, #32
    c2d4:	af00      	add	r7, sp, #0
    c2d6:	6078      	str	r0, [r7, #4]
    c2d8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c2da:	687b      	ldr	r3, [r7, #4]
    c2dc:	689b      	ldr	r3, [r3, #8]
    c2de:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c2e0:	683b      	ldr	r3, [r7, #0]
    c2e2:	2b00      	cmp	r3, #0
    c2e4:	d00c      	beq.n	c300 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c2e6:	683b      	ldr	r3, [r7, #0]
    c2e8:	681b      	ldr	r3, [r3, #0]
    c2ea:	795b      	ldrb	r3, [r3, #5]
    c2ec:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c2ee:	7c7b      	ldrb	r3, [r7, #17]
    c2f0:	2b02      	cmp	r3, #2
    c2f2:	d005      	beq.n	c300 <cdcdf_acm_disable+0x30>
    c2f4:	7c7b      	ldrb	r3, [r7, #17]
    c2f6:	2b0a      	cmp	r3, #10
    c2f8:	d002      	beq.n	c300 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c2fa:	f06f 0309 	mvn.w	r3, #9
    c2fe:	e035      	b.n	c36c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c300:	2300      	movs	r3, #0
    c302:	77fb      	strb	r3, [r7, #31]
    c304:	e01f      	b.n	c346 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c306:	7ffb      	ldrb	r3, [r7, #31]
    c308:	69ba      	ldr	r2, [r7, #24]
    c30a:	5cd3      	ldrb	r3, [r2, r3]
    c30c:	2bff      	cmp	r3, #255	; 0xff
    c30e:	d016      	beq.n	c33e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c310:	7ffb      	ldrb	r3, [r7, #31]
    c312:	69ba      	ldr	r2, [r7, #24]
    c314:	21ff      	movs	r1, #255	; 0xff
    c316:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c318:	7ffb      	ldrb	r3, [r7, #31]
    c31a:	69ba      	ldr	r2, [r7, #24]
    c31c:	4413      	add	r3, r2
    c31e:	789b      	ldrb	r3, [r3, #2]
    c320:	2bff      	cmp	r3, #255	; 0xff
    c322:	d00d      	beq.n	c340 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c324:	7ffb      	ldrb	r3, [r7, #31]
    c326:	69ba      	ldr	r2, [r7, #24]
    c328:	4413      	add	r3, r2
    c32a:	789b      	ldrb	r3, [r3, #2]
    c32c:	4618      	mov	r0, r3
    c32e:	4b11      	ldr	r3, [pc, #68]	; (c374 <cdcdf_acm_disable+0xa4>)
    c330:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c332:	7ffb      	ldrb	r3, [r7, #31]
    c334:	69ba      	ldr	r2, [r7, #24]
    c336:	4413      	add	r3, r2
    c338:	22ff      	movs	r2, #255	; 0xff
    c33a:	709a      	strb	r2, [r3, #2]
    c33c:	e000      	b.n	c340 <cdcdf_acm_disable+0x70>
			continue;
    c33e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c340:	7ffb      	ldrb	r3, [r7, #31]
    c342:	3301      	adds	r3, #1
    c344:	77fb      	strb	r3, [r7, #31]
    c346:	7ffb      	ldrb	r3, [r7, #31]
    c348:	2b01      	cmp	r3, #1
    c34a:	d9dc      	bls.n	c306 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c34c:	69bb      	ldr	r3, [r7, #24]
    c34e:	791b      	ldrb	r3, [r3, #4]
    c350:	2bff      	cmp	r3, #255	; 0xff
    c352:	d007      	beq.n	c364 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c354:	69bb      	ldr	r3, [r7, #24]
    c356:	791b      	ldrb	r3, [r3, #4]
    c358:	4618      	mov	r0, r3
    c35a:	4b06      	ldr	r3, [pc, #24]	; (c374 <cdcdf_acm_disable+0xa4>)
    c35c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c35e:	69bb      	ldr	r3, [r7, #24]
    c360:	22ff      	movs	r2, #255	; 0xff
    c362:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c364:	4b04      	ldr	r3, [pc, #16]	; (c378 <cdcdf_acm_disable+0xa8>)
    c366:	2200      	movs	r2, #0
    c368:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c36a:	2300      	movs	r3, #0
}
    c36c:	4618      	mov	r0, r3
    c36e:	3720      	adds	r7, #32
    c370:	46bd      	mov	sp, r7
    c372:	bd80      	pop	{r7, pc}
    c374:	00003ba9 	.word	0x00003ba9
    c378:	200034b8 	.word	0x200034b8

0000c37c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c37c:	b580      	push	{r7, lr}
    c37e:	b084      	sub	sp, #16
    c380:	af00      	add	r7, sp, #0
    c382:	60f8      	str	r0, [r7, #12]
    c384:	460b      	mov	r3, r1
    c386:	607a      	str	r2, [r7, #4]
    c388:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c38a:	7afb      	ldrb	r3, [r7, #11]
    c38c:	2b01      	cmp	r3, #1
    c38e:	d009      	beq.n	c3a4 <cdcdf_acm_ctrl+0x28>
    c390:	2b02      	cmp	r3, #2
    c392:	d00d      	beq.n	c3b0 <cdcdf_acm_ctrl+0x34>
    c394:	2b00      	cmp	r3, #0
    c396:	d10e      	bne.n	c3b6 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c398:	6879      	ldr	r1, [r7, #4]
    c39a:	68f8      	ldr	r0, [r7, #12]
    c39c:	4b09      	ldr	r3, [pc, #36]	; (c3c4 <cdcdf_acm_ctrl+0x48>)
    c39e:	4798      	blx	r3
    c3a0:	4603      	mov	r3, r0
    c3a2:	e00a      	b.n	c3ba <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c3a4:	6879      	ldr	r1, [r7, #4]
    c3a6:	68f8      	ldr	r0, [r7, #12]
    c3a8:	4b07      	ldr	r3, [pc, #28]	; (c3c8 <cdcdf_acm_ctrl+0x4c>)
    c3aa:	4798      	blx	r3
    c3ac:	4603      	mov	r3, r0
    c3ae:	e004      	b.n	c3ba <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c3b0:	f06f 031a 	mvn.w	r3, #26
    c3b4:	e001      	b.n	c3ba <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c3b6:	f06f 030c 	mvn.w	r3, #12
	}
}
    c3ba:	4618      	mov	r0, r3
    c3bc:	3710      	adds	r7, #16
    c3be:	46bd      	mov	sp, r7
    c3c0:	bd80      	pop	{r7, pc}
    c3c2:	bf00      	nop
    c3c4:	0000c15d 	.word	0x0000c15d
    c3c8:	0000c2d1 	.word	0x0000c2d1

0000c3cc <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c3cc:	b590      	push	{r4, r7, lr}
    c3ce:	b087      	sub	sp, #28
    c3d0:	af00      	add	r7, sp, #0
    c3d2:	4603      	mov	r3, r0
    c3d4:	6039      	str	r1, [r7, #0]
    c3d6:	71fb      	strb	r3, [r7, #7]
    c3d8:	4613      	mov	r3, r2
    c3da:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c3dc:	683b      	ldr	r3, [r7, #0]
    c3de:	799a      	ldrb	r2, [r3, #6]
    c3e0:	79db      	ldrb	r3, [r3, #7]
    c3e2:	021b      	lsls	r3, r3, #8
    c3e4:	4313      	orrs	r3, r2
    c3e6:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c3e8:	4b2b      	ldr	r3, [pc, #172]	; (c498 <cdcdf_acm_set_req+0xcc>)
    c3ea:	4798      	blx	r3
    c3ec:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c3ee:	683b      	ldr	r3, [r7, #0]
    c3f0:	785b      	ldrb	r3, [r3, #1]
    c3f2:	2b20      	cmp	r3, #32
    c3f4:	d002      	beq.n	c3fc <cdcdf_acm_set_req+0x30>
    c3f6:	2b22      	cmp	r3, #34	; 0x22
    c3f8:	d034      	beq.n	c464 <cdcdf_acm_set_req+0x98>
    c3fa:	e046      	b.n	c48a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c3fc:	8afb      	ldrh	r3, [r7, #22]
    c3fe:	2b07      	cmp	r3, #7
    c400:	d002      	beq.n	c408 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c402:	f04f 33ff 	mov.w	r3, #4294967295
    c406:	e042      	b.n	c48e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c408:	79bb      	ldrb	r3, [r7, #6]
    c40a:	2b00      	cmp	r3, #0
    c40c:	d107      	bne.n	c41e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c40e:	8afa      	ldrh	r2, [r7, #22]
    c410:	79f8      	ldrb	r0, [r7, #7]
    c412:	2300      	movs	r3, #0
    c414:	6939      	ldr	r1, [r7, #16]
    c416:	4c21      	ldr	r4, [pc, #132]	; (c49c <cdcdf_acm_set_req+0xd0>)
    c418:	47a0      	blx	r4
    c41a:	4603      	mov	r3, r0
    c41c:	e037      	b.n	c48e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c41e:	693a      	ldr	r2, [r7, #16]
    c420:	f107 0308 	add.w	r3, r7, #8
    c424:	6810      	ldr	r0, [r2, #0]
    c426:	6018      	str	r0, [r3, #0]
    c428:	8891      	ldrh	r1, [r2, #4]
    c42a:	7992      	ldrb	r2, [r2, #6]
    c42c:	8099      	strh	r1, [r3, #4]
    c42e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c430:	4b1b      	ldr	r3, [pc, #108]	; (c4a0 <cdcdf_acm_set_req+0xd4>)
    c432:	681b      	ldr	r3, [r3, #0]
    c434:	2b00      	cmp	r3, #0
    c436:	d008      	beq.n	c44a <cdcdf_acm_set_req+0x7e>
    c438:	4b19      	ldr	r3, [pc, #100]	; (c4a0 <cdcdf_acm_set_req+0xd4>)
    c43a:	681b      	ldr	r3, [r3, #0]
    c43c:	f107 0208 	add.w	r2, r7, #8
    c440:	4610      	mov	r0, r2
    c442:	4798      	blx	r3
    c444:	4603      	mov	r3, r0
    c446:	2b00      	cmp	r3, #0
    c448:	d00a      	beq.n	c460 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c44a:	4b16      	ldr	r3, [pc, #88]	; (c4a4 <cdcdf_acm_set_req+0xd8>)
    c44c:	f107 0208 	add.w	r2, r7, #8
    c450:	e892 0003 	ldmia.w	r2, {r0, r1}
    c454:	6018      	str	r0, [r3, #0]
    c456:	3304      	adds	r3, #4
    c458:	8019      	strh	r1, [r3, #0]
    c45a:	3302      	adds	r3, #2
    c45c:	0c0a      	lsrs	r2, r1, #16
    c45e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c460:	2300      	movs	r3, #0
    c462:	e014      	b.n	c48e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c464:	2300      	movs	r3, #0
    c466:	2200      	movs	r2, #0
    c468:	2100      	movs	r1, #0
    c46a:	2000      	movs	r0, #0
    c46c:	4c0b      	ldr	r4, [pc, #44]	; (c49c <cdcdf_acm_set_req+0xd0>)
    c46e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c470:	4b0d      	ldr	r3, [pc, #52]	; (c4a8 <cdcdf_acm_set_req+0xdc>)
    c472:	681b      	ldr	r3, [r3, #0]
    c474:	2b00      	cmp	r3, #0
    c476:	d006      	beq.n	c486 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c478:	4b0b      	ldr	r3, [pc, #44]	; (c4a8 <cdcdf_acm_set_req+0xdc>)
    c47a:	681b      	ldr	r3, [r3, #0]
    c47c:	683a      	ldr	r2, [r7, #0]
    c47e:	8852      	ldrh	r2, [r2, #2]
    c480:	b292      	uxth	r2, r2
    c482:	4610      	mov	r0, r2
    c484:	4798      	blx	r3
		}
		return ERR_NONE;
    c486:	2300      	movs	r3, #0
    c488:	e001      	b.n	c48e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c48a:	f06f 030c 	mvn.w	r3, #12
	}
}
    c48e:	4618      	mov	r0, r3
    c490:	371c      	adds	r7, #28
    c492:	46bd      	mov	sp, r7
    c494:	bd90      	pop	{r4, r7, pc}
    c496:	bf00      	nop
    c498:	0000d419 	.word	0x0000d419
    c49c:	0000d28d 	.word	0x0000d28d
    c4a0:	200034cc 	.word	0x200034cc
    c4a4:	200034c0 	.word	0x200034c0
    c4a8:	200034c8 	.word	0x200034c8

0000c4ac <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c4ac:	b590      	push	{r4, r7, lr}
    c4ae:	b085      	sub	sp, #20
    c4b0:	af00      	add	r7, sp, #0
    c4b2:	4603      	mov	r3, r0
    c4b4:	6039      	str	r1, [r7, #0]
    c4b6:	71fb      	strb	r3, [r7, #7]
    c4b8:	4613      	mov	r3, r2
    c4ba:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c4bc:	683b      	ldr	r3, [r7, #0]
    c4be:	799a      	ldrb	r2, [r3, #6]
    c4c0:	79db      	ldrb	r3, [r3, #7]
    c4c2:	021b      	lsls	r3, r3, #8
    c4c4:	4313      	orrs	r3, r2
    c4c6:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c4c8:	79bb      	ldrb	r3, [r7, #6]
    c4ca:	2b01      	cmp	r3, #1
    c4cc:	d101      	bne.n	c4d2 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c4ce:	2300      	movs	r3, #0
    c4d0:	e013      	b.n	c4fa <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c4d2:	683b      	ldr	r3, [r7, #0]
    c4d4:	785b      	ldrb	r3, [r3, #1]
    c4d6:	2b21      	cmp	r3, #33	; 0x21
    c4d8:	d10d      	bne.n	c4f6 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c4da:	89fb      	ldrh	r3, [r7, #14]
    c4dc:	2b07      	cmp	r3, #7
    c4de:	d002      	beq.n	c4e6 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c4e0:	f04f 33ff 	mov.w	r3, #4294967295
    c4e4:	e009      	b.n	c4fa <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c4e6:	89fa      	ldrh	r2, [r7, #14]
    c4e8:	79f8      	ldrb	r0, [r7, #7]
    c4ea:	2300      	movs	r3, #0
    c4ec:	4905      	ldr	r1, [pc, #20]	; (c504 <cdcdf_acm_get_req+0x58>)
    c4ee:	4c06      	ldr	r4, [pc, #24]	; (c508 <cdcdf_acm_get_req+0x5c>)
    c4f0:	47a0      	blx	r4
    c4f2:	4603      	mov	r3, r0
    c4f4:	e001      	b.n	c4fa <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c4f6:	f06f 030c 	mvn.w	r3, #12
	}
}
    c4fa:	4618      	mov	r0, r3
    c4fc:	3714      	adds	r7, #20
    c4fe:	46bd      	mov	sp, r7
    c500:	bd90      	pop	{r4, r7, pc}
    c502:	bf00      	nop
    c504:	200034c0 	.word	0x200034c0
    c508:	0000d28d 	.word	0x0000d28d

0000c50c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c50c:	b580      	push	{r7, lr}
    c50e:	b082      	sub	sp, #8
    c510:	af00      	add	r7, sp, #0
    c512:	4603      	mov	r3, r0
    c514:	6039      	str	r1, [r7, #0]
    c516:	71fb      	strb	r3, [r7, #7]
    c518:	4613      	mov	r3, r2
    c51a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c51c:	683b      	ldr	r3, [r7, #0]
    c51e:	781b      	ldrb	r3, [r3, #0]
    c520:	095b      	lsrs	r3, r3, #5
    c522:	b2db      	uxtb	r3, r3
    c524:	f003 0303 	and.w	r3, r3, #3
    c528:	2b01      	cmp	r3, #1
    c52a:	d002      	beq.n	c532 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c52c:	f06f 0309 	mvn.w	r3, #9
    c530:	e026      	b.n	c580 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c532:	683b      	ldr	r3, [r7, #0]
    c534:	889b      	ldrh	r3, [r3, #4]
    c536:	b29a      	uxth	r2, r3
    c538:	4b13      	ldr	r3, [pc, #76]	; (c588 <cdcdf_acm_req+0x7c>)
    c53a:	781b      	ldrb	r3, [r3, #0]
    c53c:	b29b      	uxth	r3, r3
    c53e:	429a      	cmp	r2, r3
    c540:	d007      	beq.n	c552 <cdcdf_acm_req+0x46>
    c542:	683b      	ldr	r3, [r7, #0]
    c544:	889b      	ldrh	r3, [r3, #4]
    c546:	b29a      	uxth	r2, r3
    c548:	4b0f      	ldr	r3, [pc, #60]	; (c588 <cdcdf_acm_req+0x7c>)
    c54a:	785b      	ldrb	r3, [r3, #1]
    c54c:	b29b      	uxth	r3, r3
    c54e:	429a      	cmp	r2, r3
    c550:	d114      	bne.n	c57c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c552:	683b      	ldr	r3, [r7, #0]
    c554:	781b      	ldrb	r3, [r3, #0]
    c556:	b25b      	sxtb	r3, r3
    c558:	2b00      	cmp	r3, #0
    c55a:	da07      	bge.n	c56c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c55c:	79ba      	ldrb	r2, [r7, #6]
    c55e:	79fb      	ldrb	r3, [r7, #7]
    c560:	6839      	ldr	r1, [r7, #0]
    c562:	4618      	mov	r0, r3
    c564:	4b09      	ldr	r3, [pc, #36]	; (c58c <cdcdf_acm_req+0x80>)
    c566:	4798      	blx	r3
    c568:	4603      	mov	r3, r0
    c56a:	e009      	b.n	c580 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c56c:	79ba      	ldrb	r2, [r7, #6]
    c56e:	79fb      	ldrb	r3, [r7, #7]
    c570:	6839      	ldr	r1, [r7, #0]
    c572:	4618      	mov	r0, r3
    c574:	4b06      	ldr	r3, [pc, #24]	; (c590 <cdcdf_acm_req+0x84>)
    c576:	4798      	blx	r3
    c578:	4603      	mov	r3, r0
    c57a:	e001      	b.n	c580 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c57c:	f06f 0309 	mvn.w	r3, #9
	}
}
    c580:	4618      	mov	r0, r3
    c582:	3708      	adds	r7, #8
    c584:	46bd      	mov	sp, r7
    c586:	bd80      	pop	{r7, pc}
    c588:	200034b8 	.word	0x200034b8
    c58c:	0000c4ad 	.word	0x0000c4ad
    c590:	0000c3cd 	.word	0x0000c3cd

0000c594 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c594:	b580      	push	{r7, lr}
    c596:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c598:	4b0b      	ldr	r3, [pc, #44]	; (c5c8 <cdcdf_acm_init+0x34>)
    c59a:	4798      	blx	r3
    c59c:	4603      	mov	r3, r0
    c59e:	2b01      	cmp	r3, #1
    c5a0:	d902      	bls.n	c5a8 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c5a2:	f06f 0310 	mvn.w	r3, #16
    c5a6:	e00d      	b.n	c5c4 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c5a8:	4b08      	ldr	r3, [pc, #32]	; (c5cc <cdcdf_acm_init+0x38>)
    c5aa:	4a09      	ldr	r2, [pc, #36]	; (c5d0 <cdcdf_acm_init+0x3c>)
    c5ac:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c5ae:	4b07      	ldr	r3, [pc, #28]	; (c5cc <cdcdf_acm_init+0x38>)
    c5b0:	4a08      	ldr	r2, [pc, #32]	; (c5d4 <cdcdf_acm_init+0x40>)
    c5b2:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c5b4:	4805      	ldr	r0, [pc, #20]	; (c5cc <cdcdf_acm_init+0x38>)
    c5b6:	4b08      	ldr	r3, [pc, #32]	; (c5d8 <cdcdf_acm_init+0x44>)
    c5b8:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c5ba:	4908      	ldr	r1, [pc, #32]	; (c5dc <cdcdf_acm_init+0x48>)
    c5bc:	2001      	movs	r0, #1
    c5be:	4b08      	ldr	r3, [pc, #32]	; (c5e0 <cdcdf_acm_init+0x4c>)
    c5c0:	4798      	blx	r3
	return ERR_NONE;
    c5c2:	2300      	movs	r3, #0
}
    c5c4:	4618      	mov	r0, r3
    c5c6:	bd80      	pop	{r7, pc}
    c5c8:	0000d431 	.word	0x0000d431
    c5cc:	200034ac 	.word	0x200034ac
    c5d0:	0000c37d 	.word	0x0000c37d
    c5d4:	200034b8 	.word	0x200034b8
    c5d8:	0000d399 	.word	0x0000d399
    c5dc:	20000134 	.word	0x20000134
    c5e0:	0000d2c9 	.word	0x0000d2c9

0000c5e4 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c5e4:	b590      	push	{r4, r7, lr}
    c5e6:	b083      	sub	sp, #12
    c5e8:	af00      	add	r7, sp, #0
    c5ea:	6078      	str	r0, [r7, #4]
    c5ec:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c5ee:	4b0b      	ldr	r3, [pc, #44]	; (c61c <cdcdf_acm_read+0x38>)
    c5f0:	4798      	blx	r3
    c5f2:	4603      	mov	r3, r0
    c5f4:	f083 0301 	eor.w	r3, r3, #1
    c5f8:	b2db      	uxtb	r3, r3
    c5fa:	2b00      	cmp	r3, #0
    c5fc:	d002      	beq.n	c604 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c5fe:	f06f 0310 	mvn.w	r3, #16
    c602:	e007      	b.n	c614 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c604:	4b06      	ldr	r3, [pc, #24]	; (c620 <cdcdf_acm_read+0x3c>)
    c606:	7918      	ldrb	r0, [r3, #4]
    c608:	2300      	movs	r3, #0
    c60a:	683a      	ldr	r2, [r7, #0]
    c60c:	6879      	ldr	r1, [r7, #4]
    c60e:	4c05      	ldr	r4, [pc, #20]	; (c624 <cdcdf_acm_read+0x40>)
    c610:	47a0      	blx	r4
    c612:	4603      	mov	r3, r0
}
    c614:	4618      	mov	r0, r3
    c616:	370c      	adds	r7, #12
    c618:	46bd      	mov	sp, r7
    c61a:	bd90      	pop	{r4, r7, pc}
    c61c:	0000c709 	.word	0x0000c709
    c620:	200034b8 	.word	0x200034b8
    c624:	0000d28d 	.word	0x0000d28d

0000c628 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c628:	b590      	push	{r4, r7, lr}
    c62a:	b083      	sub	sp, #12
    c62c:	af00      	add	r7, sp, #0
    c62e:	6078      	str	r0, [r7, #4]
    c630:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c632:	4b0b      	ldr	r3, [pc, #44]	; (c660 <cdcdf_acm_write+0x38>)
    c634:	4798      	blx	r3
    c636:	4603      	mov	r3, r0
    c638:	f083 0301 	eor.w	r3, r3, #1
    c63c:	b2db      	uxtb	r3, r3
    c63e:	2b00      	cmp	r3, #0
    c640:	d002      	beq.n	c648 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c642:	f06f 0310 	mvn.w	r3, #16
    c646:	e007      	b.n	c658 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c648:	4b06      	ldr	r3, [pc, #24]	; (c664 <cdcdf_acm_write+0x3c>)
    c64a:	78d8      	ldrb	r0, [r3, #3]
    c64c:	2301      	movs	r3, #1
    c64e:	683a      	ldr	r2, [r7, #0]
    c650:	6879      	ldr	r1, [r7, #4]
    c652:	4c05      	ldr	r4, [pc, #20]	; (c668 <cdcdf_acm_write+0x40>)
    c654:	47a0      	blx	r4
    c656:	4603      	mov	r3, r0
}
    c658:	4618      	mov	r0, r3
    c65a:	370c      	adds	r7, #12
    c65c:	46bd      	mov	sp, r7
    c65e:	bd90      	pop	{r4, r7, pc}
    c660:	0000c709 	.word	0x0000c709
    c664:	200034b8 	.word	0x200034b8
    c668:	0000d28d 	.word	0x0000d28d

0000c66c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c66c:	b580      	push	{r7, lr}
    c66e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c670:	4b05      	ldr	r3, [pc, #20]	; (c688 <cdcdf_acm_stop_xfer+0x1c>)
    c672:	78db      	ldrb	r3, [r3, #3]
    c674:	4618      	mov	r0, r3
    c676:	4b05      	ldr	r3, [pc, #20]	; (c68c <cdcdf_acm_stop_xfer+0x20>)
    c678:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c67a:	4b03      	ldr	r3, [pc, #12]	; (c688 <cdcdf_acm_stop_xfer+0x1c>)
    c67c:	791b      	ldrb	r3, [r3, #4]
    c67e:	4618      	mov	r0, r3
    c680:	4b02      	ldr	r3, [pc, #8]	; (c68c <cdcdf_acm_stop_xfer+0x20>)
    c682:	4798      	blx	r3
}
    c684:	bf00      	nop
    c686:	bd80      	pop	{r7, pc}
    c688:	200034b8 	.word	0x200034b8
    c68c:	00003dd1 	.word	0x00003dd1

0000c690 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c690:	b580      	push	{r7, lr}
    c692:	b082      	sub	sp, #8
    c694:	af00      	add	r7, sp, #0
    c696:	4603      	mov	r3, r0
    c698:	6039      	str	r1, [r7, #0]
    c69a:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c69c:	79fb      	ldrb	r3, [r7, #7]
    c69e:	2b03      	cmp	r3, #3
    c6a0:	d822      	bhi.n	c6e8 <cdcdf_acm_register_callback+0x58>
    c6a2:	a201      	add	r2, pc, #4	; (adr r2, c6a8 <cdcdf_acm_register_callback+0x18>)
    c6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c6a8:	0000c6b9 	.word	0x0000c6b9
    c6ac:	0000c6c9 	.word	0x0000c6c9
    c6b0:	0000c6d9 	.word	0x0000c6d9
    c6b4:	0000c6e1 	.word	0x0000c6e1
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c6b8:	4b0f      	ldr	r3, [pc, #60]	; (c6f8 <cdcdf_acm_register_callback+0x68>)
    c6ba:	791b      	ldrb	r3, [r3, #4]
    c6bc:	683a      	ldr	r2, [r7, #0]
    c6be:	2102      	movs	r1, #2
    c6c0:	4618      	mov	r0, r3
    c6c2:	4b0e      	ldr	r3, [pc, #56]	; (c6fc <cdcdf_acm_register_callback+0x6c>)
    c6c4:	4798      	blx	r3
		break;
    c6c6:	e012      	b.n	c6ee <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c6c8:	4b0b      	ldr	r3, [pc, #44]	; (c6f8 <cdcdf_acm_register_callback+0x68>)
    c6ca:	78db      	ldrb	r3, [r3, #3]
    c6cc:	683a      	ldr	r2, [r7, #0]
    c6ce:	2102      	movs	r1, #2
    c6d0:	4618      	mov	r0, r3
    c6d2:	4b0a      	ldr	r3, [pc, #40]	; (c6fc <cdcdf_acm_register_callback+0x6c>)
    c6d4:	4798      	blx	r3
		break;
    c6d6:	e00a      	b.n	c6ee <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c6d8:	4a09      	ldr	r2, [pc, #36]	; (c700 <cdcdf_acm_register_callback+0x70>)
    c6da:	683b      	ldr	r3, [r7, #0]
    c6dc:	6013      	str	r3, [r2, #0]
		break;
    c6de:	e006      	b.n	c6ee <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c6e0:	4a08      	ldr	r2, [pc, #32]	; (c704 <cdcdf_acm_register_callback+0x74>)
    c6e2:	683b      	ldr	r3, [r7, #0]
    c6e4:	6013      	str	r3, [r2, #0]
		break;
    c6e6:	e002      	b.n	c6ee <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c6e8:	f06f 030c 	mvn.w	r3, #12
    c6ec:	e000      	b.n	c6f0 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c6ee:	2300      	movs	r3, #0
}
    c6f0:	4618      	mov	r0, r3
    c6f2:	3708      	adds	r7, #8
    c6f4:	46bd      	mov	sp, r7
    c6f6:	bd80      	pop	{r7, pc}
    c6f8:	200034b8 	.word	0x200034b8
    c6fc:	00003efd 	.word	0x00003efd
    c700:	200034cc 	.word	0x200034cc
    c704:	200034c8 	.word	0x200034c8

0000c708 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c708:	b480      	push	{r7}
    c70a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c70c:	4b03      	ldr	r3, [pc, #12]	; (c71c <cdcdf_acm_is_enabled+0x14>)
    c70e:	795b      	ldrb	r3, [r3, #5]
}
    c710:	4618      	mov	r0, r3
    c712:	46bd      	mov	sp, r7
    c714:	f85d 7b04 	ldr.w	r7, [sp], #4
    c718:	4770      	bx	lr
    c71a:	bf00      	nop
    c71c:	200034b8 	.word	0x200034b8

0000c720 <usb_get_u16>:
{
    c720:	b480      	push	{r7}
    c722:	b083      	sub	sp, #12
    c724:	af00      	add	r7, sp, #0
    c726:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c728:	687b      	ldr	r3, [r7, #4]
    c72a:	781b      	ldrb	r3, [r3, #0]
    c72c:	b29a      	uxth	r2, r3
    c72e:	687b      	ldr	r3, [r7, #4]
    c730:	3301      	adds	r3, #1
    c732:	781b      	ldrb	r3, [r3, #0]
    c734:	b29b      	uxth	r3, r3
    c736:	021b      	lsls	r3, r3, #8
    c738:	b29b      	uxth	r3, r3
    c73a:	4413      	add	r3, r2
    c73c:	b29b      	uxth	r3, r3
}
    c73e:	4618      	mov	r0, r3
    c740:	370c      	adds	r7, #12
    c742:	46bd      	mov	sp, r7
    c744:	f85d 7b04 	ldr.w	r7, [sp], #4
    c748:	4770      	bx	lr

0000c74a <usb_desc_len>:
{
    c74a:	b480      	push	{r7}
    c74c:	b083      	sub	sp, #12
    c74e:	af00      	add	r7, sp, #0
    c750:	6078      	str	r0, [r7, #4]
	return desc[0];
    c752:	687b      	ldr	r3, [r7, #4]
    c754:	781b      	ldrb	r3, [r3, #0]
}
    c756:	4618      	mov	r0, r3
    c758:	370c      	adds	r7, #12
    c75a:	46bd      	mov	sp, r7
    c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c760:	4770      	bx	lr
	...

0000c764 <usb_desc_next>:
{
    c764:	b580      	push	{r7, lr}
    c766:	b082      	sub	sp, #8
    c768:	af00      	add	r7, sp, #0
    c76a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c76c:	6878      	ldr	r0, [r7, #4]
    c76e:	4b05      	ldr	r3, [pc, #20]	; (c784 <usb_desc_next+0x20>)
    c770:	4798      	blx	r3
    c772:	4603      	mov	r3, r0
    c774:	461a      	mov	r2, r3
    c776:	687b      	ldr	r3, [r7, #4]
    c778:	4413      	add	r3, r2
}
    c77a:	4618      	mov	r0, r3
    c77c:	3708      	adds	r7, #8
    c77e:	46bd      	mov	sp, r7
    c780:	bd80      	pop	{r7, pc}
    c782:	bf00      	nop
    c784:	0000c74b 	.word	0x0000c74b

0000c788 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c788:	b580      	push	{r7, lr}
    c78a:	b082      	sub	sp, #8
    c78c:	af00      	add	r7, sp, #0
    c78e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c790:	687b      	ldr	r3, [r7, #4]
    c792:	3302      	adds	r3, #2
    c794:	4618      	mov	r0, r3
    c796:	4b03      	ldr	r3, [pc, #12]	; (c7a4 <usb_cfg_desc_total_len+0x1c>)
    c798:	4798      	blx	r3
    c79a:	4603      	mov	r3, r0
}
    c79c:	4618      	mov	r0, r3
    c79e:	3708      	adds	r7, #8
    c7a0:	46bd      	mov	sp, r7
    c7a2:	bd80      	pop	{r7, pc}
    c7a4:	0000c721 	.word	0x0000c721

0000c7a8 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c7a8:	b590      	push	{r4, r7, lr}
    c7aa:	b085      	sub	sp, #20
    c7ac:	af00      	add	r7, sp, #0
    c7ae:	4603      	mov	r3, r0
    c7b0:	6039      	str	r1, [r7, #0]
    c7b2:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c7b4:	2300      	movs	r3, #0
    c7b6:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c7b8:	683b      	ldr	r3, [r7, #0]
    c7ba:	799a      	ldrb	r2, [r3, #6]
    c7bc:	79db      	ldrb	r3, [r3, #7]
    c7be:	021b      	lsls	r3, r3, #8
    c7c0:	4313      	orrs	r3, r2
    c7c2:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c7c4:	897b      	ldrh	r3, [r7, #10]
    c7c6:	2b12      	cmp	r3, #18
    c7c8:	d901      	bls.n	c7ce <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c7ca:	2312      	movs	r3, #18
    c7cc:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c7ce:	68fb      	ldr	r3, [r7, #12]
    c7d0:	2b00      	cmp	r3, #0
    c7d2:	d10a      	bne.n	c7ea <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c7d4:	4b0f      	ldr	r3, [pc, #60]	; (c814 <usbdc_get_dev_desc+0x6c>)
    c7d6:	681b      	ldr	r3, [r3, #0]
    c7d8:	6818      	ldr	r0, [r3, #0]
    c7da:	4b0e      	ldr	r3, [pc, #56]	; (c814 <usbdc_get_dev_desc+0x6c>)
    c7dc:	681b      	ldr	r3, [r3, #0]
    c7de:	685b      	ldr	r3, [r3, #4]
    c7e0:	2201      	movs	r2, #1
    c7e2:	4619      	mov	r1, r3
    c7e4:	4b0c      	ldr	r3, [pc, #48]	; (c818 <usbdc_get_dev_desc+0x70>)
    c7e6:	4798      	blx	r3
    c7e8:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c7ea:	68fb      	ldr	r3, [r7, #12]
    c7ec:	2b00      	cmp	r3, #0
    c7ee:	d101      	bne.n	c7f4 <usbdc_get_dev_desc+0x4c>
		return false;
    c7f0:	2300      	movs	r3, #0
    c7f2:	e00b      	b.n	c80c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c7f4:	897a      	ldrh	r2, [r7, #10]
    c7f6:	79f8      	ldrb	r0, [r7, #7]
    c7f8:	2300      	movs	r3, #0
    c7fa:	68f9      	ldr	r1, [r7, #12]
    c7fc:	4c07      	ldr	r4, [pc, #28]	; (c81c <usbdc_get_dev_desc+0x74>)
    c7fe:	47a0      	blx	r4
    c800:	4603      	mov	r3, r0
    c802:	2b00      	cmp	r3, #0
    c804:	d001      	beq.n	c80a <usbdc_get_dev_desc+0x62>
		return false;
    c806:	2300      	movs	r3, #0
    c808:	e000      	b.n	c80c <usbdc_get_dev_desc+0x64>
	}
	return true;
    c80a:	2301      	movs	r3, #1
}
    c80c:	4618      	mov	r0, r3
    c80e:	3714      	adds	r7, #20
    c810:	46bd      	mov	sp, r7
    c812:	bd90      	pop	{r4, r7, pc}
    c814:	200034d0 	.word	0x200034d0
    c818:	0000d51d 	.word	0x0000d51d
    c81c:	0000d28d 	.word	0x0000d28d

0000c820 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c820:	b590      	push	{r4, r7, lr}
    c822:	b087      	sub	sp, #28
    c824:	af00      	add	r7, sp, #0
    c826:	4603      	mov	r3, r0
    c828:	6039      	str	r1, [r7, #0]
    c82a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    c82c:	2300      	movs	r3, #0
    c82e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    c830:	683b      	ldr	r3, [r7, #0]
    c832:	799a      	ldrb	r2, [r3, #6]
    c834:	79db      	ldrb	r3, [r3, #7]
    c836:	021b      	lsls	r3, r3, #8
    c838:	4313      	orrs	r3, r2
    c83a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    c83c:	683b      	ldr	r3, [r7, #0]
    c83e:	885b      	ldrh	r3, [r3, #2]
    c840:	b29b      	uxth	r3, r3
    c842:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c844:	8a7a      	ldrh	r2, [r7, #18]
    c846:	4b1e      	ldr	r3, [pc, #120]	; (c8c0 <usbdc_get_cfg_desc+0xa0>)
    c848:	7f1b      	ldrb	r3, [r3, #28]
    c84a:	3b01      	subs	r3, #1
    c84c:	4013      	ands	r3, r2
    c84e:	2b00      	cmp	r3, #0
    c850:	bf0c      	ite	eq
    c852:	2301      	moveq	r3, #1
    c854:	2300      	movne	r3, #0
    c856:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    c858:	697b      	ldr	r3, [r7, #20]
    c85a:	2b00      	cmp	r3, #0
    c85c:	d10c      	bne.n	c878 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c85e:	4b18      	ldr	r3, [pc, #96]	; (c8c0 <usbdc_get_cfg_desc+0xa0>)
    c860:	681b      	ldr	r3, [r3, #0]
    c862:	6818      	ldr	r0, [r3, #0]
    c864:	4b16      	ldr	r3, [pc, #88]	; (c8c0 <usbdc_get_cfg_desc+0xa0>)
    c866:	681b      	ldr	r3, [r3, #0]
    c868:	6859      	ldr	r1, [r3, #4]
    c86a:	7c3b      	ldrb	r3, [r7, #16]
    c86c:	3301      	adds	r3, #1
    c86e:	b2db      	uxtb	r3, r3
    c870:	461a      	mov	r2, r3
    c872:	4b14      	ldr	r3, [pc, #80]	; (c8c4 <usbdc_get_cfg_desc+0xa4>)
    c874:	4798      	blx	r3
    c876:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    c878:	697b      	ldr	r3, [r7, #20]
    c87a:	2b00      	cmp	r3, #0
    c87c:	d101      	bne.n	c882 <usbdc_get_cfg_desc+0x62>
		return false;
    c87e:	2300      	movs	r3, #0
    c880:	e019      	b.n	c8b6 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    c882:	6978      	ldr	r0, [r7, #20]
    c884:	4b10      	ldr	r3, [pc, #64]	; (c8c8 <usbdc_get_cfg_desc+0xa8>)
    c886:	4798      	blx	r3
    c888:	4603      	mov	r3, r0
    c88a:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    c88c:	8a7a      	ldrh	r2, [r7, #18]
    c88e:	89fb      	ldrh	r3, [r7, #14]
    c890:	429a      	cmp	r2, r3
    c892:	d802      	bhi.n	c89a <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    c894:	2300      	movs	r3, #0
    c896:	747b      	strb	r3, [r7, #17]
    c898:	e001      	b.n	c89e <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    c89a:	89fb      	ldrh	r3, [r7, #14]
    c89c:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c89e:	8a7a      	ldrh	r2, [r7, #18]
    c8a0:	7c7b      	ldrb	r3, [r7, #17]
    c8a2:	79f8      	ldrb	r0, [r7, #7]
    c8a4:	6979      	ldr	r1, [r7, #20]
    c8a6:	4c09      	ldr	r4, [pc, #36]	; (c8cc <usbdc_get_cfg_desc+0xac>)
    c8a8:	47a0      	blx	r4
    c8aa:	4603      	mov	r3, r0
    c8ac:	2b00      	cmp	r3, #0
    c8ae:	d001      	beq.n	c8b4 <usbdc_get_cfg_desc+0x94>
		return false;
    c8b0:	2300      	movs	r3, #0
    c8b2:	e000      	b.n	c8b6 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    c8b4:	2301      	movs	r3, #1
}
    c8b6:	4618      	mov	r0, r3
    c8b8:	371c      	adds	r7, #28
    c8ba:	46bd      	mov	sp, r7
    c8bc:	bd90      	pop	{r4, r7, pc}
    c8be:	bf00      	nop
    c8c0:	200034d0 	.word	0x200034d0
    c8c4:	0000d5dd 	.word	0x0000d5dd
    c8c8:	0000c789 	.word	0x0000c789
    c8cc:	0000d28d 	.word	0x0000d28d

0000c8d0 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    c8d0:	b590      	push	{r4, r7, lr}
    c8d2:	b085      	sub	sp, #20
    c8d4:	af00      	add	r7, sp, #0
    c8d6:	4603      	mov	r3, r0
    c8d8:	6039      	str	r1, [r7, #0]
    c8da:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    c8dc:	683b      	ldr	r3, [r7, #0]
    c8de:	799a      	ldrb	r2, [r3, #6]
    c8e0:	79db      	ldrb	r3, [r3, #7]
    c8e2:	021b      	lsls	r3, r3, #8
    c8e4:	4313      	orrs	r3, r2
    c8e6:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    c8e8:	683b      	ldr	r3, [r7, #0]
    c8ea:	885b      	ldrh	r3, [r3, #2]
    c8ec:	b29b      	uxth	r3, r3
    c8ee:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c8f0:	89fa      	ldrh	r2, [r7, #14]
    c8f2:	4b1a      	ldr	r3, [pc, #104]	; (c95c <usbdc_get_str_desc+0x8c>)
    c8f4:	7f1b      	ldrb	r3, [r3, #28]
    c8f6:	3b01      	subs	r3, #1
    c8f8:	4013      	ands	r3, r2
    c8fa:	2b00      	cmp	r3, #0
    c8fc:	bf0c      	ite	eq
    c8fe:	2301      	moveq	r3, #1
    c900:	2300      	movne	r3, #0
    c902:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c904:	4b15      	ldr	r3, [pc, #84]	; (c95c <usbdc_get_str_desc+0x8c>)
    c906:	681b      	ldr	r3, [r3, #0]
    c908:	6818      	ldr	r0, [r3, #0]
    c90a:	4b14      	ldr	r3, [pc, #80]	; (c95c <usbdc_get_str_desc+0x8c>)
    c90c:	681b      	ldr	r3, [r3, #0]
    c90e:	685b      	ldr	r3, [r3, #4]
    c910:	7b3a      	ldrb	r2, [r7, #12]
    c912:	4619      	mov	r1, r3
    c914:	4b12      	ldr	r3, [pc, #72]	; (c960 <usbdc_get_str_desc+0x90>)
    c916:	4798      	blx	r3
    c918:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    c91a:	68bb      	ldr	r3, [r7, #8]
    c91c:	2b00      	cmp	r3, #0
    c91e:	d101      	bne.n	c924 <usbdc_get_str_desc+0x54>
		return false;
    c920:	2300      	movs	r3, #0
    c922:	e017      	b.n	c954 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    c924:	68bb      	ldr	r3, [r7, #8]
    c926:	781b      	ldrb	r3, [r3, #0]
    c928:	b29b      	uxth	r3, r3
    c92a:	89fa      	ldrh	r2, [r7, #14]
    c92c:	429a      	cmp	r2, r3
    c92e:	d802      	bhi.n	c936 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    c930:	2300      	movs	r3, #0
    c932:	737b      	strb	r3, [r7, #13]
    c934:	e002      	b.n	c93c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    c936:	68bb      	ldr	r3, [r7, #8]
    c938:	781b      	ldrb	r3, [r3, #0]
    c93a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c93c:	89fa      	ldrh	r2, [r7, #14]
    c93e:	7b7b      	ldrb	r3, [r7, #13]
    c940:	79f8      	ldrb	r0, [r7, #7]
    c942:	68b9      	ldr	r1, [r7, #8]
    c944:	4c07      	ldr	r4, [pc, #28]	; (c964 <usbdc_get_str_desc+0x94>)
    c946:	47a0      	blx	r4
    c948:	4603      	mov	r3, r0
    c94a:	2b00      	cmp	r3, #0
    c94c:	d001      	beq.n	c952 <usbdc_get_str_desc+0x82>
		return false;
    c94e:	2300      	movs	r3, #0
    c950:	e000      	b.n	c954 <usbdc_get_str_desc+0x84>
	}
	return true;
    c952:	2301      	movs	r3, #1
}
    c954:	4618      	mov	r0, r3
    c956:	3714      	adds	r7, #20
    c958:	46bd      	mov	sp, r7
    c95a:	bd90      	pop	{r4, r7, pc}
    c95c:	200034d0 	.word	0x200034d0
    c960:	0000d655 	.word	0x0000d655
    c964:	0000d28d 	.word	0x0000d28d

0000c968 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    c968:	b580      	push	{r7, lr}
    c96a:	b084      	sub	sp, #16
    c96c:	af00      	add	r7, sp, #0
    c96e:	4603      	mov	r3, r0
    c970:	6039      	str	r1, [r7, #0]
    c972:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c974:	683b      	ldr	r3, [r7, #0]
    c976:	885b      	ldrh	r3, [r3, #2]
    c978:	b29b      	uxth	r3, r3
    c97a:	0a1b      	lsrs	r3, r3, #8
    c97c:	b29b      	uxth	r3, r3
    c97e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    c980:	7bfb      	ldrb	r3, [r7, #15]
    c982:	2b02      	cmp	r3, #2
    c984:	d00d      	beq.n	c9a2 <usbdc_get_desc_req+0x3a>
    c986:	2b03      	cmp	r3, #3
    c988:	d012      	beq.n	c9b0 <usbdc_get_desc_req+0x48>
    c98a:	2b01      	cmp	r3, #1
    c98c:	d002      	beq.n	c994 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    c98e:	bf00      	nop
	}
	return false;
    c990:	2300      	movs	r3, #0
    c992:	e013      	b.n	c9bc <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    c994:	79fb      	ldrb	r3, [r7, #7]
    c996:	6839      	ldr	r1, [r7, #0]
    c998:	4618      	mov	r0, r3
    c99a:	4b0a      	ldr	r3, [pc, #40]	; (c9c4 <usbdc_get_desc_req+0x5c>)
    c99c:	4798      	blx	r3
    c99e:	4603      	mov	r3, r0
    c9a0:	e00c      	b.n	c9bc <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    c9a2:	79fb      	ldrb	r3, [r7, #7]
    c9a4:	6839      	ldr	r1, [r7, #0]
    c9a6:	4618      	mov	r0, r3
    c9a8:	4b07      	ldr	r3, [pc, #28]	; (c9c8 <usbdc_get_desc_req+0x60>)
    c9aa:	4798      	blx	r3
    c9ac:	4603      	mov	r3, r0
    c9ae:	e005      	b.n	c9bc <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    c9b0:	79fb      	ldrb	r3, [r7, #7]
    c9b2:	6839      	ldr	r1, [r7, #0]
    c9b4:	4618      	mov	r0, r3
    c9b6:	4b05      	ldr	r3, [pc, #20]	; (c9cc <usbdc_get_desc_req+0x64>)
    c9b8:	4798      	blx	r3
    c9ba:	4603      	mov	r3, r0
}
    c9bc:	4618      	mov	r0, r3
    c9be:	3710      	adds	r7, #16
    c9c0:	46bd      	mov	sp, r7
    c9c2:	bd80      	pop	{r7, pc}
    c9c4:	0000c7a9 	.word	0x0000c7a9
    c9c8:	0000c821 	.word	0x0000c821
    c9cc:	0000c8d1 	.word	0x0000c8d1

0000c9d0 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    c9d0:	b590      	push	{r4, r7, lr}
    c9d2:	b085      	sub	sp, #20
    c9d4:	af00      	add	r7, sp, #0
    c9d6:	4603      	mov	r3, r0
    c9d8:	6039      	str	r1, [r7, #0]
    c9da:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c9dc:	683b      	ldr	r3, [r7, #0]
    c9de:	781b      	ldrb	r3, [r3, #0]
    c9e0:	f003 031f 	and.w	r3, r3, #31
    c9e4:	2b00      	cmp	r3, #0
    c9e6:	db1b      	blt.n	ca20 <usbdc_get_status_req+0x50>
    c9e8:	2b01      	cmp	r3, #1
    c9ea:	dd02      	ble.n	c9f2 <usbdc_get_status_req+0x22>
    c9ec:	2b02      	cmp	r3, #2
    c9ee:	d003      	beq.n	c9f8 <usbdc_get_status_req+0x28>
    c9f0:	e016      	b.n	ca20 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    c9f2:	2300      	movs	r3, #0
    c9f4:	60fb      	str	r3, [r7, #12]
		break;
    c9f6:	e015      	b.n	ca24 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    c9f8:	683b      	ldr	r3, [r7, #0]
    c9fa:	889b      	ldrh	r3, [r3, #4]
    c9fc:	b29b      	uxth	r3, r3
    c9fe:	b2db      	uxtb	r3, r3
    ca00:	2102      	movs	r1, #2
    ca02:	4618      	mov	r0, r3
    ca04:	4b0f      	ldr	r3, [pc, #60]	; (ca44 <usbdc_get_status_req+0x74>)
    ca06:	4798      	blx	r3
    ca08:	4603      	mov	r3, r0
    ca0a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    ca0c:	68fb      	ldr	r3, [r7, #12]
    ca0e:	2b00      	cmp	r3, #0
    ca10:	da01      	bge.n	ca16 <usbdc_get_status_req+0x46>
			return false;
    ca12:	2300      	movs	r3, #0
    ca14:	e012      	b.n	ca3c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    ca16:	68fb      	ldr	r3, [r7, #12]
    ca18:	f003 0301 	and.w	r3, r3, #1
    ca1c:	60fb      	str	r3, [r7, #12]
		break;
    ca1e:	e001      	b.n	ca24 <usbdc_get_status_req+0x54>
	default:
		return false;
    ca20:	2300      	movs	r3, #0
    ca22:	e00b      	b.n	ca3c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    ca24:	4b08      	ldr	r3, [pc, #32]	; (ca48 <usbdc_get_status_req+0x78>)
    ca26:	695b      	ldr	r3, [r3, #20]
    ca28:	89ba      	ldrh	r2, [r7, #12]
    ca2a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ca2c:	4b06      	ldr	r3, [pc, #24]	; (ca48 <usbdc_get_status_req+0x78>)
    ca2e:	6959      	ldr	r1, [r3, #20]
    ca30:	79f8      	ldrb	r0, [r7, #7]
    ca32:	2300      	movs	r3, #0
    ca34:	2202      	movs	r2, #2
    ca36:	4c05      	ldr	r4, [pc, #20]	; (ca4c <usbdc_get_status_req+0x7c>)
    ca38:	47a0      	blx	r4
	return true;
    ca3a:	2301      	movs	r3, #1
}
    ca3c:	4618      	mov	r0, r3
    ca3e:	3714      	adds	r7, #20
    ca40:	46bd      	mov	sp, r7
    ca42:	bd90      	pop	{r4, r7, pc}
    ca44:	00003ea9 	.word	0x00003ea9
    ca48:	200034d0 	.word	0x200034d0
    ca4c:	0000d28d 	.word	0x0000d28d

0000ca50 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    ca50:	b590      	push	{r4, r7, lr}
    ca52:	b085      	sub	sp, #20
    ca54:	af00      	add	r7, sp, #0
    ca56:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ca58:	4b1f      	ldr	r3, [pc, #124]	; (cad8 <usbdc_get_interface+0x88>)
    ca5a:	691b      	ldr	r3, [r3, #16]
    ca5c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    ca5e:	4b1e      	ldr	r3, [pc, #120]	; (cad8 <usbdc_get_interface+0x88>)
    ca60:	7f5b      	ldrb	r3, [r3, #29]
    ca62:	461a      	mov	r2, r3
    ca64:	687b      	ldr	r3, [r7, #4]
    ca66:	889b      	ldrh	r3, [r3, #4]
    ca68:	b29b      	uxth	r3, r3
    ca6a:	fa42 f303 	asr.w	r3, r2, r3
    ca6e:	f003 0301 	and.w	r3, r3, #1
    ca72:	2b00      	cmp	r3, #0
    ca74:	d128      	bne.n	cac8 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    ca76:	4b18      	ldr	r3, [pc, #96]	; (cad8 <usbdc_get_interface+0x88>)
    ca78:	695b      	ldr	r3, [r3, #20]
    ca7a:	2200      	movs	r2, #0
    ca7c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ca7e:	4b16      	ldr	r3, [pc, #88]	; (cad8 <usbdc_get_interface+0x88>)
    ca80:	6959      	ldr	r1, [r3, #20]
    ca82:	2300      	movs	r3, #0
    ca84:	2201      	movs	r2, #1
    ca86:	2000      	movs	r0, #0
    ca88:	4c14      	ldr	r4, [pc, #80]	; (cadc <usbdc_get_interface+0x8c>)
    ca8a:	47a0      	blx	r4
		return true;
    ca8c:	2301      	movs	r3, #1
    ca8e:	e01f      	b.n	cad0 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    ca90:	68fb      	ldr	r3, [r7, #12]
    ca92:	685b      	ldr	r3, [r3, #4]
    ca94:	687a      	ldr	r2, [r7, #4]
    ca96:	2102      	movs	r1, #2
    ca98:	68f8      	ldr	r0, [r7, #12]
    ca9a:	4798      	blx	r3
    ca9c:	60b8      	str	r0, [r7, #8]
    ca9e:	68bb      	ldr	r3, [r7, #8]
    caa0:	2b00      	cmp	r3, #0
    caa2:	da03      	bge.n	caac <usbdc_get_interface+0x5c>
			func = func->next;
    caa4:	68fb      	ldr	r3, [r7, #12]
    caa6:	681b      	ldr	r3, [r3, #0]
    caa8:	60fb      	str	r3, [r7, #12]
    caaa:	e00d      	b.n	cac8 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    caac:	4b0a      	ldr	r3, [pc, #40]	; (cad8 <usbdc_get_interface+0x88>)
    caae:	695b      	ldr	r3, [r3, #20]
    cab0:	68ba      	ldr	r2, [r7, #8]
    cab2:	b2d2      	uxtb	r2, r2
    cab4:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cab6:	4b08      	ldr	r3, [pc, #32]	; (cad8 <usbdc_get_interface+0x88>)
    cab8:	6959      	ldr	r1, [r3, #20]
    caba:	2300      	movs	r3, #0
    cabc:	2201      	movs	r2, #1
    cabe:	2000      	movs	r0, #0
    cac0:	4c06      	ldr	r4, [pc, #24]	; (cadc <usbdc_get_interface+0x8c>)
    cac2:	47a0      	blx	r4
			return true;
    cac4:	2301      	movs	r3, #1
    cac6:	e003      	b.n	cad0 <usbdc_get_interface+0x80>
	while (NULL != func) {
    cac8:	68fb      	ldr	r3, [r7, #12]
    caca:	2b00      	cmp	r3, #0
    cacc:	d1e0      	bne.n	ca90 <usbdc_get_interface+0x40>
		}
	}
	return false;
    cace:	2300      	movs	r3, #0
}
    cad0:	4618      	mov	r0, r3
    cad2:	3714      	adds	r7, #20
    cad4:	46bd      	mov	sp, r7
    cad6:	bd90      	pop	{r4, r7, pc}
    cad8:	200034d0 	.word	0x200034d0
    cadc:	0000d28d 	.word	0x0000d28d

0000cae0 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    cae0:	b590      	push	{r4, r7, lr}
    cae2:	b083      	sub	sp, #12
    cae4:	af00      	add	r7, sp, #0
    cae6:	4603      	mov	r3, r0
    cae8:	6039      	str	r1, [r7, #0]
    caea:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    caec:	683b      	ldr	r3, [r7, #0]
    caee:	785b      	ldrb	r3, [r3, #1]
    caf0:	2b0a      	cmp	r3, #10
    caf2:	d83a      	bhi.n	cb6a <usbdc_get_req+0x8a>
    caf4:	a201      	add	r2, pc, #4	; (adr r2, cafc <usbdc_get_req+0x1c>)
    caf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cafa:	bf00      	nop
    cafc:	0000cb53 	.word	0x0000cb53
    cb00:	0000cb6b 	.word	0x0000cb6b
    cb04:	0000cb6b 	.word	0x0000cb6b
    cb08:	0000cb6b 	.word	0x0000cb6b
    cb0c:	0000cb6b 	.word	0x0000cb6b
    cb10:	0000cb6b 	.word	0x0000cb6b
    cb14:	0000cb29 	.word	0x0000cb29
    cb18:	0000cb6b 	.word	0x0000cb6b
    cb1c:	0000cb37 	.word	0x0000cb37
    cb20:	0000cb6b 	.word	0x0000cb6b
    cb24:	0000cb61 	.word	0x0000cb61
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    cb28:	79fb      	ldrb	r3, [r7, #7]
    cb2a:	6839      	ldr	r1, [r7, #0]
    cb2c:	4618      	mov	r0, r3
    cb2e:	4b11      	ldr	r3, [pc, #68]	; (cb74 <usbdc_get_req+0x94>)
    cb30:	4798      	blx	r3
    cb32:	4603      	mov	r3, r0
    cb34:	e01a      	b.n	cb6c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    cb36:	4b10      	ldr	r3, [pc, #64]	; (cb78 <usbdc_get_req+0x98>)
    cb38:	695b      	ldr	r3, [r3, #20]
    cb3a:	4a0f      	ldr	r2, [pc, #60]	; (cb78 <usbdc_get_req+0x98>)
    cb3c:	7ed2      	ldrb	r2, [r2, #27]
    cb3e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    cb40:	4b0d      	ldr	r3, [pc, #52]	; (cb78 <usbdc_get_req+0x98>)
    cb42:	6959      	ldr	r1, [r3, #20]
    cb44:	79f8      	ldrb	r0, [r7, #7]
    cb46:	2300      	movs	r3, #0
    cb48:	2201      	movs	r2, #1
    cb4a:	4c0c      	ldr	r4, [pc, #48]	; (cb7c <usbdc_get_req+0x9c>)
    cb4c:	47a0      	blx	r4
		return true;
    cb4e:	2301      	movs	r3, #1
    cb50:	e00c      	b.n	cb6c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    cb52:	79fb      	ldrb	r3, [r7, #7]
    cb54:	6839      	ldr	r1, [r7, #0]
    cb56:	4618      	mov	r0, r3
    cb58:	4b09      	ldr	r3, [pc, #36]	; (cb80 <usbdc_get_req+0xa0>)
    cb5a:	4798      	blx	r3
    cb5c:	4603      	mov	r3, r0
    cb5e:	e005      	b.n	cb6c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    cb60:	6838      	ldr	r0, [r7, #0]
    cb62:	4b08      	ldr	r3, [pc, #32]	; (cb84 <usbdc_get_req+0xa4>)
    cb64:	4798      	blx	r3
    cb66:	4603      	mov	r3, r0
    cb68:	e000      	b.n	cb6c <usbdc_get_req+0x8c>
	default:
		return false;
    cb6a:	2300      	movs	r3, #0
	}
}
    cb6c:	4618      	mov	r0, r3
    cb6e:	370c      	adds	r7, #12
    cb70:	46bd      	mov	sp, r7
    cb72:	bd90      	pop	{r4, r7, pc}
    cb74:	0000c969 	.word	0x0000c969
    cb78:	200034d0 	.word	0x200034d0
    cb7c:	0000d28d 	.word	0x0000d28d
    cb80:	0000c9d1 	.word	0x0000c9d1
    cb84:	0000ca51 	.word	0x0000ca51

0000cb88 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cb88:	b590      	push	{r4, r7, lr}
    cb8a:	b083      	sub	sp, #12
    cb8c:	af00      	add	r7, sp, #0
    cb8e:	4603      	mov	r3, r0
    cb90:	6039      	str	r1, [r7, #0]
    cb92:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cb94:	683b      	ldr	r3, [r7, #0]
    cb96:	781b      	ldrb	r3, [r3, #0]
    cb98:	f003 031f 	and.w	r3, r3, #31
    cb9c:	2b02      	cmp	r3, #2
    cb9e:	d116      	bne.n	cbce <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    cba0:	683b      	ldr	r3, [r7, #0]
    cba2:	88db      	ldrh	r3, [r3, #6]
    cba4:	b29b      	uxth	r3, r3
    cba6:	2b00      	cmp	r3, #0
    cba8:	d001      	beq.n	cbae <usbdc_clear_ftr_req+0x26>
			return false;
    cbaa:	2300      	movs	r3, #0
    cbac:	e010      	b.n	cbd0 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    cbae:	683b      	ldr	r3, [r7, #0]
    cbb0:	889b      	ldrh	r3, [r3, #4]
    cbb2:	b29b      	uxth	r3, r3
    cbb4:	b2db      	uxtb	r3, r3
    cbb6:	2100      	movs	r1, #0
    cbb8:	4618      	mov	r0, r3
    cbba:	4b07      	ldr	r3, [pc, #28]	; (cbd8 <usbdc_clear_ftr_req+0x50>)
    cbbc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    cbbe:	79f8      	ldrb	r0, [r7, #7]
    cbc0:	2301      	movs	r3, #1
    cbc2:	2200      	movs	r2, #0
    cbc4:	2100      	movs	r1, #0
    cbc6:	4c05      	ldr	r4, [pc, #20]	; (cbdc <usbdc_clear_ftr_req+0x54>)
    cbc8:	47a0      	blx	r4
		return true;
    cbca:	2301      	movs	r3, #1
    cbcc:	e000      	b.n	cbd0 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    cbce:	2300      	movs	r3, #0
	}
}
    cbd0:	4618      	mov	r0, r3
    cbd2:	370c      	adds	r7, #12
    cbd4:	46bd      	mov	sp, r7
    cbd6:	bd90      	pop	{r4, r7, pc}
    cbd8:	00003ea9 	.word	0x00003ea9
    cbdc:	0000d28d 	.word	0x0000d28d

0000cbe0 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cbe0:	b590      	push	{r4, r7, lr}
    cbe2:	b083      	sub	sp, #12
    cbe4:	af00      	add	r7, sp, #0
    cbe6:	4603      	mov	r3, r0
    cbe8:	6039      	str	r1, [r7, #0]
    cbea:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cbec:	683b      	ldr	r3, [r7, #0]
    cbee:	781b      	ldrb	r3, [r3, #0]
    cbf0:	f003 031f 	and.w	r3, r3, #31
    cbf4:	2b02      	cmp	r3, #2
    cbf6:	d116      	bne.n	cc26 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    cbf8:	683b      	ldr	r3, [r7, #0]
    cbfa:	88db      	ldrh	r3, [r3, #6]
    cbfc:	b29b      	uxth	r3, r3
    cbfe:	2b00      	cmp	r3, #0
    cc00:	d001      	beq.n	cc06 <usbdc_set_ftr_req+0x26>
			return false;
    cc02:	2300      	movs	r3, #0
    cc04:	e010      	b.n	cc28 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    cc06:	683b      	ldr	r3, [r7, #0]
    cc08:	889b      	ldrh	r3, [r3, #4]
    cc0a:	b29b      	uxth	r3, r3
    cc0c:	b2db      	uxtb	r3, r3
    cc0e:	2101      	movs	r1, #1
    cc10:	4618      	mov	r0, r3
    cc12:	4b07      	ldr	r3, [pc, #28]	; (cc30 <usbdc_set_ftr_req+0x50>)
    cc14:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    cc16:	79f8      	ldrb	r0, [r7, #7]
    cc18:	2301      	movs	r3, #1
    cc1a:	2200      	movs	r2, #0
    cc1c:	2100      	movs	r1, #0
    cc1e:	4c05      	ldr	r4, [pc, #20]	; (cc34 <usbdc_set_ftr_req+0x54>)
    cc20:	47a0      	blx	r4
		return true;
    cc22:	2301      	movs	r3, #1
    cc24:	e000      	b.n	cc28 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    cc26:	2300      	movs	r3, #0
	}
}
    cc28:	4618      	mov	r0, r3
    cc2a:	370c      	adds	r7, #12
    cc2c:	46bd      	mov	sp, r7
    cc2e:	bd90      	pop	{r4, r7, pc}
    cc30:	00003ea9 	.word	0x00003ea9
    cc34:	0000d28d 	.word	0x0000d28d

0000cc38 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    cc38:	b580      	push	{r7, lr}
    cc3a:	b082      	sub	sp, #8
    cc3c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cc3e:	4b0a      	ldr	r3, [pc, #40]	; (cc68 <usbdc_unconfig+0x30>)
    cc40:	691b      	ldr	r3, [r3, #16]
    cc42:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    cc44:	e008      	b.n	cc58 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    cc46:	687b      	ldr	r3, [r7, #4]
    cc48:	685b      	ldr	r3, [r3, #4]
    cc4a:	2200      	movs	r2, #0
    cc4c:	2101      	movs	r1, #1
    cc4e:	6878      	ldr	r0, [r7, #4]
    cc50:	4798      	blx	r3
		func = func->next;
    cc52:	687b      	ldr	r3, [r7, #4]
    cc54:	681b      	ldr	r3, [r3, #0]
    cc56:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    cc58:	687b      	ldr	r3, [r7, #4]
    cc5a:	2b00      	cmp	r3, #0
    cc5c:	d1f3      	bne.n	cc46 <usbdc_unconfig+0xe>
	}
}
    cc5e:	bf00      	nop
    cc60:	3708      	adds	r7, #8
    cc62:	46bd      	mov	sp, r7
    cc64:	bd80      	pop	{r7, pc}
    cc66:	bf00      	nop
    cc68:	200034d0 	.word	0x200034d0

0000cc6c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    cc6c:	b580      	push	{r7, lr}
    cc6e:	b088      	sub	sp, #32
    cc70:	af00      	add	r7, sp, #0
    cc72:	4603      	mov	r3, r0
    cc74:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    cc76:	2300      	movs	r3, #0
    cc78:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    cc7a:	23ff      	movs	r3, #255	; 0xff
    cc7c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    cc7e:	79fb      	ldrb	r3, [r7, #7]
    cc80:	2b00      	cmp	r3, #0
    cc82:	d103      	bne.n	cc8c <usbdc_set_config+0x20>
		usbdc_unconfig();
    cc84:	4b2e      	ldr	r3, [pc, #184]	; (cd40 <usbdc_set_config+0xd4>)
    cc86:	4798      	blx	r3
		return true;
    cc88:	2301      	movs	r3, #1
    cc8a:	e055      	b.n	cd38 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cc8c:	69bb      	ldr	r3, [r7, #24]
    cc8e:	2b00      	cmp	r3, #0
    cc90:	d10a      	bne.n	cca8 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    cc92:	4b2c      	ldr	r3, [pc, #176]	; (cd44 <usbdc_set_config+0xd8>)
    cc94:	681b      	ldr	r3, [r3, #0]
    cc96:	6818      	ldr	r0, [r3, #0]
    cc98:	4b2a      	ldr	r3, [pc, #168]	; (cd44 <usbdc_set_config+0xd8>)
    cc9a:	681b      	ldr	r3, [r3, #0]
    cc9c:	685b      	ldr	r3, [r3, #4]
    cc9e:	79fa      	ldrb	r2, [r7, #7]
    cca0:	4619      	mov	r1, r3
    cca2:	4b29      	ldr	r3, [pc, #164]	; (cd48 <usbdc_set_config+0xdc>)
    cca4:	4798      	blx	r3
    cca6:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    cca8:	69bb      	ldr	r3, [r7, #24]
    ccaa:	2b00      	cmp	r3, #0
    ccac:	d101      	bne.n	ccb2 <usbdc_set_config+0x46>
		return false;
    ccae:	2300      	movs	r3, #0
    ccb0:	e042      	b.n	cd38 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    ccb2:	69b8      	ldr	r0, [r7, #24]
    ccb4:	4b25      	ldr	r3, [pc, #148]	; (cd4c <usbdc_set_config+0xe0>)
    ccb6:	4798      	blx	r3
    ccb8:	4603      	mov	r3, r0
    ccba:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    ccbc:	8abb      	ldrh	r3, [r7, #20]
    ccbe:	69ba      	ldr	r2, [r7, #24]
    ccc0:	4413      	add	r3, r2
    ccc2:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ccc4:	693b      	ldr	r3, [r7, #16]
    ccc6:	2204      	movs	r2, #4
    ccc8:	4619      	mov	r1, r3
    ccca:	69b8      	ldr	r0, [r7, #24]
    cccc:	4b20      	ldr	r3, [pc, #128]	; (cd50 <usbdc_set_config+0xe4>)
    ccce:	4798      	blx	r3
    ccd0:	4603      	mov	r3, r0
    ccd2:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    ccd4:	e02c      	b.n	cd30 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    ccd6:	68fb      	ldr	r3, [r7, #12]
    ccd8:	3302      	adds	r3, #2
    ccda:	781b      	ldrb	r3, [r3, #0]
    ccdc:	7dfa      	ldrb	r2, [r7, #23]
    ccde:	429a      	cmp	r2, r3
    cce0:	d018      	beq.n	cd14 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    cce2:	68fb      	ldr	r3, [r7, #12]
    cce4:	789b      	ldrb	r3, [r3, #2]
    cce6:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    cce8:	4b16      	ldr	r3, [pc, #88]	; (cd44 <usbdc_set_config+0xd8>)
    ccea:	691b      	ldr	r3, [r3, #16]
    ccec:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    ccee:	e00c      	b.n	cd0a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    ccf0:	69fb      	ldr	r3, [r7, #28]
    ccf2:	685b      	ldr	r3, [r3, #4]
    ccf4:	f107 020c 	add.w	r2, r7, #12
    ccf8:	2100      	movs	r1, #0
    ccfa:	69f8      	ldr	r0, [r7, #28]
    ccfc:	4798      	blx	r3
    ccfe:	4603      	mov	r3, r0
    cd00:	2b00      	cmp	r3, #0
    cd02:	d006      	beq.n	cd12 <usbdc_set_config+0xa6>
					func = func->next;
    cd04:	69fb      	ldr	r3, [r7, #28]
    cd06:	681b      	ldr	r3, [r3, #0]
    cd08:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    cd0a:	69fb      	ldr	r3, [r7, #28]
    cd0c:	2b00      	cmp	r3, #0
    cd0e:	d1ef      	bne.n	ccf0 <usbdc_set_config+0x84>
    cd10:	e000      	b.n	cd14 <usbdc_set_config+0xa8>
				} else {
					break;
    cd12:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    cd14:	68fb      	ldr	r3, [r7, #12]
    cd16:	4618      	mov	r0, r3
    cd18:	4b0e      	ldr	r3, [pc, #56]	; (cd54 <usbdc_set_config+0xe8>)
    cd1a:	4798      	blx	r3
    cd1c:	4603      	mov	r3, r0
    cd1e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cd20:	68fb      	ldr	r3, [r7, #12]
    cd22:	6939      	ldr	r1, [r7, #16]
    cd24:	2204      	movs	r2, #4
    cd26:	4618      	mov	r0, r3
    cd28:	4b09      	ldr	r3, [pc, #36]	; (cd50 <usbdc_set_config+0xe4>)
    cd2a:	4798      	blx	r3
    cd2c:	4603      	mov	r3, r0
    cd2e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    cd30:	68fb      	ldr	r3, [r7, #12]
    cd32:	2b00      	cmp	r3, #0
    cd34:	d1cf      	bne.n	ccd6 <usbdc_set_config+0x6a>
	}
	return true;
    cd36:	2301      	movs	r3, #1
}
    cd38:	4618      	mov	r0, r3
    cd3a:	3720      	adds	r7, #32
    cd3c:	46bd      	mov	sp, r7
    cd3e:	bd80      	pop	{r7, pc}
    cd40:	0000cc39 	.word	0x0000cc39
    cd44:	200034d0 	.word	0x200034d0
    cd48:	0000d5dd 	.word	0x0000d5dd
    cd4c:	0000c789 	.word	0x0000c789
    cd50:	0000d51d 	.word	0x0000d51d
    cd54:	0000c765 	.word	0x0000c765

0000cd58 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    cd58:	b580      	push	{r7, lr}
    cd5a:	b082      	sub	sp, #8
    cd5c:	af00      	add	r7, sp, #0
    cd5e:	4603      	mov	r3, r0
    cd60:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    cd62:	79fb      	ldrb	r3, [r7, #7]
    cd64:	4618      	mov	r0, r3
    cd66:	4b03      	ldr	r3, [pc, #12]	; (cd74 <usbdc_set_address+0x1c>)
    cd68:	4798      	blx	r3
}
    cd6a:	bf00      	nop
    cd6c:	3708      	adds	r7, #8
    cd6e:	46bd      	mov	sp, r7
    cd70:	bd80      	pop	{r7, pc}
    cd72:	bf00      	nop
    cd74:	00003ac5 	.word	0x00003ac5

0000cd78 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    cd78:	b590      	push	{r4, r7, lr}
    cd7a:	b087      	sub	sp, #28
    cd7c:	af00      	add	r7, sp, #0
    cd7e:	4603      	mov	r3, r0
    cd80:	460a      	mov	r2, r1
    cd82:	80fb      	strh	r3, [r7, #6]
    cd84:	4613      	mov	r3, r2
    cd86:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    cd88:	2300      	movs	r3, #0
    cd8a:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    cd8c:	693b      	ldr	r3, [r7, #16]
    cd8e:	2b00      	cmp	r3, #0
    cd90:	d10b      	bne.n	cdaa <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    cd92:	4b43      	ldr	r3, [pc, #268]	; (cea0 <usbdc_set_interface+0x128>)
    cd94:	681b      	ldr	r3, [r3, #0]
    cd96:	6818      	ldr	r0, [r3, #0]
    cd98:	4b41      	ldr	r3, [pc, #260]	; (cea0 <usbdc_set_interface+0x128>)
    cd9a:	681b      	ldr	r3, [r3, #0]
    cd9c:	6859      	ldr	r1, [r3, #4]
    cd9e:	4b40      	ldr	r3, [pc, #256]	; (cea0 <usbdc_set_interface+0x128>)
    cda0:	7edb      	ldrb	r3, [r3, #27]
    cda2:	461a      	mov	r2, r3
    cda4:	4b3f      	ldr	r3, [pc, #252]	; (cea4 <usbdc_set_interface+0x12c>)
    cda6:	4798      	blx	r3
    cda8:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    cdaa:	693b      	ldr	r3, [r7, #16]
    cdac:	2b00      	cmp	r3, #0
    cdae:	d101      	bne.n	cdb4 <usbdc_set_interface+0x3c>
		return false;
    cdb0:	2300      	movs	r3, #0
    cdb2:	e071      	b.n	ce98 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    cdb4:	693b      	ldr	r3, [r7, #16]
    cdb6:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    cdb8:	6938      	ldr	r0, [r7, #16]
    cdba:	4b3b      	ldr	r3, [pc, #236]	; (cea8 <usbdc_set_interface+0x130>)
    cdbc:	4798      	blx	r3
    cdbe:	4603      	mov	r3, r0
    cdc0:	461a      	mov	r2, r3
    cdc2:	693b      	ldr	r3, [r7, #16]
    cdc4:	4413      	add	r3, r2
    cdc6:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    cdc8:	68bb      	ldr	r3, [r7, #8]
    cdca:	68f9      	ldr	r1, [r7, #12]
    cdcc:	2204      	movs	r2, #4
    cdce:	4618      	mov	r0, r3
    cdd0:	4b36      	ldr	r3, [pc, #216]	; (ceac <usbdc_set_interface+0x134>)
    cdd2:	4798      	blx	r3
    cdd4:	6138      	str	r0, [r7, #16]
    cdd6:	693b      	ldr	r3, [r7, #16]
    cdd8:	2b00      	cmp	r3, #0
    cdda:	d113      	bne.n	ce04 <usbdc_set_interface+0x8c>
		return false;
    cddc:	2300      	movs	r3, #0
    cdde:	e05b      	b.n	ce98 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    cde0:	68bb      	ldr	r3, [r7, #8]
    cde2:	4618      	mov	r0, r3
    cde4:	4b32      	ldr	r3, [pc, #200]	; (ceb0 <usbdc_set_interface+0x138>)
    cde6:	4798      	blx	r3
    cde8:	4603      	mov	r3, r0
    cdea:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cdec:	68bb      	ldr	r3, [r7, #8]
    cdee:	68f9      	ldr	r1, [r7, #12]
    cdf0:	2204      	movs	r2, #4
    cdf2:	4618      	mov	r0, r3
    cdf4:	4b2d      	ldr	r3, [pc, #180]	; (ceac <usbdc_set_interface+0x134>)
    cdf6:	4798      	blx	r3
    cdf8:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    cdfa:	693b      	ldr	r3, [r7, #16]
    cdfc:	2b00      	cmp	r3, #0
    cdfe:	d101      	bne.n	ce04 <usbdc_set_interface+0x8c>
			return false;
    ce00:	2300      	movs	r3, #0
    ce02:	e049      	b.n	ce98 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    ce04:	693b      	ldr	r3, [r7, #16]
    ce06:	3302      	adds	r3, #2
    ce08:	781b      	ldrb	r3, [r3, #0]
    ce0a:	b29b      	uxth	r3, r3
    ce0c:	88ba      	ldrh	r2, [r7, #4]
    ce0e:	429a      	cmp	r2, r3
    ce10:	d1e6      	bne.n	cde0 <usbdc_set_interface+0x68>
    ce12:	693b      	ldr	r3, [r7, #16]
    ce14:	3303      	adds	r3, #3
    ce16:	781b      	ldrb	r3, [r3, #0]
    ce18:	b29b      	uxth	r3, r3
    ce1a:	88fa      	ldrh	r2, [r7, #6]
    ce1c:	429a      	cmp	r2, r3
    ce1e:	d1df      	bne.n	cde0 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    ce20:	693b      	ldr	r3, [r7, #16]
    ce22:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    ce24:	4b1e      	ldr	r3, [pc, #120]	; (cea0 <usbdc_set_interface+0x128>)
    ce26:	691b      	ldr	r3, [r3, #16]
    ce28:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    ce2a:	e031      	b.n	ce90 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    ce2c:	697b      	ldr	r3, [r7, #20]
    ce2e:	685b      	ldr	r3, [r3, #4]
    ce30:	f107 0208 	add.w	r2, r7, #8
    ce34:	2101      	movs	r1, #1
    ce36:	6978      	ldr	r0, [r7, #20]
    ce38:	4798      	blx	r3
    ce3a:	4603      	mov	r3, r0
    ce3c:	2b00      	cmp	r3, #0
    ce3e:	d003      	beq.n	ce48 <usbdc_set_interface+0xd0>
			func = func->next;
    ce40:	697b      	ldr	r3, [r7, #20]
    ce42:	681b      	ldr	r3, [r3, #0]
    ce44:	617b      	str	r3, [r7, #20]
    ce46:	e023      	b.n	ce90 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    ce48:	697b      	ldr	r3, [r7, #20]
    ce4a:	685b      	ldr	r3, [r3, #4]
    ce4c:	f107 0208 	add.w	r2, r7, #8
    ce50:	2100      	movs	r1, #0
    ce52:	6978      	ldr	r0, [r7, #20]
    ce54:	4798      	blx	r3
    ce56:	4603      	mov	r3, r0
    ce58:	2b00      	cmp	r3, #0
    ce5a:	d117      	bne.n	ce8c <usbdc_set_interface+0x114>
			if (alt_set) {
    ce5c:	88fb      	ldrh	r3, [r7, #6]
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d00c      	beq.n	ce7c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    ce62:	4b0f      	ldr	r3, [pc, #60]	; (cea0 <usbdc_set_interface+0x128>)
    ce64:	7f5b      	ldrb	r3, [r3, #29]
    ce66:	b25a      	sxtb	r2, r3
    ce68:	88bb      	ldrh	r3, [r7, #4]
    ce6a:	2101      	movs	r1, #1
    ce6c:	fa01 f303 	lsl.w	r3, r1, r3
    ce70:	b25b      	sxtb	r3, r3
    ce72:	4313      	orrs	r3, r2
    ce74:	b25b      	sxtb	r3, r3
    ce76:	b2da      	uxtb	r2, r3
    ce78:	4b09      	ldr	r3, [pc, #36]	; (cea0 <usbdc_set_interface+0x128>)
    ce7a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    ce7c:	2300      	movs	r3, #0
    ce7e:	2200      	movs	r2, #0
    ce80:	2100      	movs	r1, #0
    ce82:	2000      	movs	r0, #0
    ce84:	4c0b      	ldr	r4, [pc, #44]	; (ceb4 <usbdc_set_interface+0x13c>)
    ce86:	47a0      	blx	r4
			return true;
    ce88:	2301      	movs	r3, #1
    ce8a:	e005      	b.n	ce98 <usbdc_set_interface+0x120>
		} else {
			return false;
    ce8c:	2300      	movs	r3, #0
    ce8e:	e003      	b.n	ce98 <usbdc_set_interface+0x120>
	while (NULL != func) {
    ce90:	697b      	ldr	r3, [r7, #20]
    ce92:	2b00      	cmp	r3, #0
    ce94:	d1ca      	bne.n	ce2c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    ce96:	2300      	movs	r3, #0
}
    ce98:	4618      	mov	r0, r3
    ce9a:	371c      	adds	r7, #28
    ce9c:	46bd      	mov	sp, r7
    ce9e:	bd90      	pop	{r4, r7, pc}
    cea0:	200034d0 	.word	0x200034d0
    cea4:	0000d5dd 	.word	0x0000d5dd
    cea8:	0000c789 	.word	0x0000c789
    ceac:	0000d51d 	.word	0x0000d51d
    ceb0:	0000c765 	.word	0x0000c765
    ceb4:	0000d28d 	.word	0x0000d28d

0000ceb8 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    ceb8:	b590      	push	{r4, r7, lr}
    ceba:	b083      	sub	sp, #12
    cebc:	af00      	add	r7, sp, #0
    cebe:	4603      	mov	r3, r0
    cec0:	6039      	str	r1, [r7, #0]
    cec2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cec4:	683b      	ldr	r3, [r7, #0]
    cec6:	785b      	ldrb	r3, [r3, #1]
    cec8:	3b01      	subs	r3, #1
    ceca:	2b0a      	cmp	r3, #10
    cecc:	d85b      	bhi.n	cf86 <usbdc_set_req+0xce>
    cece:	a201      	add	r2, pc, #4	; (adr r2, ced4 <usbdc_set_req+0x1c>)
    ced0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ced4:	0000cf53 	.word	0x0000cf53
    ced8:	0000cf87 	.word	0x0000cf87
    cedc:	0000cf61 	.word	0x0000cf61
    cee0:	0000cf87 	.word	0x0000cf87
    cee4:	0000cf01 	.word	0x0000cf01
    cee8:	0000cf87 	.word	0x0000cf87
    ceec:	0000cf87 	.word	0x0000cf87
    cef0:	0000cf87 	.word	0x0000cf87
    cef4:	0000cf1b 	.word	0x0000cf1b
    cef8:	0000cf87 	.word	0x0000cf87
    cefc:	0000cf6f 	.word	0x0000cf6f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cf00:	79f8      	ldrb	r0, [r7, #7]
    cf02:	2301      	movs	r3, #1
    cf04:	2200      	movs	r2, #0
    cf06:	2100      	movs	r1, #0
    cf08:	4c21      	ldr	r4, [pc, #132]	; (cf90 <usbdc_set_req+0xd8>)
    cf0a:	47a0      	blx	r4
    cf0c:	4603      	mov	r3, r0
    cf0e:	2b00      	cmp	r3, #0
    cf10:	bf0c      	ite	eq
    cf12:	2301      	moveq	r3, #1
    cf14:	2300      	movne	r3, #0
    cf16:	b2db      	uxtb	r3, r3
    cf18:	e036      	b.n	cf88 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    cf1a:	683b      	ldr	r3, [r7, #0]
    cf1c:	885b      	ldrh	r3, [r3, #2]
    cf1e:	b29b      	uxth	r3, r3
    cf20:	b2db      	uxtb	r3, r3
    cf22:	4618      	mov	r0, r3
    cf24:	4b1b      	ldr	r3, [pc, #108]	; (cf94 <usbdc_set_req+0xdc>)
    cf26:	4798      	blx	r3
    cf28:	4603      	mov	r3, r0
    cf2a:	f083 0301 	eor.w	r3, r3, #1
    cf2e:	b2db      	uxtb	r3, r3
    cf30:	2b00      	cmp	r3, #0
    cf32:	d001      	beq.n	cf38 <usbdc_set_req+0x80>
			return false;
    cf34:	2300      	movs	r3, #0
    cf36:	e027      	b.n	cf88 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    cf38:	79f8      	ldrb	r0, [r7, #7]
    cf3a:	2301      	movs	r3, #1
    cf3c:	2200      	movs	r2, #0
    cf3e:	2100      	movs	r1, #0
    cf40:	4c13      	ldr	r4, [pc, #76]	; (cf90 <usbdc_set_req+0xd8>)
    cf42:	47a0      	blx	r4
    cf44:	4603      	mov	r3, r0
    cf46:	2b00      	cmp	r3, #0
    cf48:	bf0c      	ite	eq
    cf4a:	2301      	moveq	r3, #1
    cf4c:	2300      	movne	r3, #0
    cf4e:	b2db      	uxtb	r3, r3
    cf50:	e01a      	b.n	cf88 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    cf52:	79fb      	ldrb	r3, [r7, #7]
    cf54:	6839      	ldr	r1, [r7, #0]
    cf56:	4618      	mov	r0, r3
    cf58:	4b0f      	ldr	r3, [pc, #60]	; (cf98 <usbdc_set_req+0xe0>)
    cf5a:	4798      	blx	r3
    cf5c:	4603      	mov	r3, r0
    cf5e:	e013      	b.n	cf88 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    cf60:	79fb      	ldrb	r3, [r7, #7]
    cf62:	6839      	ldr	r1, [r7, #0]
    cf64:	4618      	mov	r0, r3
    cf66:	4b0d      	ldr	r3, [pc, #52]	; (cf9c <usbdc_set_req+0xe4>)
    cf68:	4798      	blx	r3
    cf6a:	4603      	mov	r3, r0
    cf6c:	e00c      	b.n	cf88 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    cf6e:	683b      	ldr	r3, [r7, #0]
    cf70:	885b      	ldrh	r3, [r3, #2]
    cf72:	b29a      	uxth	r2, r3
    cf74:	683b      	ldr	r3, [r7, #0]
    cf76:	889b      	ldrh	r3, [r3, #4]
    cf78:	b29b      	uxth	r3, r3
    cf7a:	4619      	mov	r1, r3
    cf7c:	4610      	mov	r0, r2
    cf7e:	4b08      	ldr	r3, [pc, #32]	; (cfa0 <usbdc_set_req+0xe8>)
    cf80:	4798      	blx	r3
    cf82:	4603      	mov	r3, r0
    cf84:	e000      	b.n	cf88 <usbdc_set_req+0xd0>
	default:
		return false;
    cf86:	2300      	movs	r3, #0
	}
}
    cf88:	4618      	mov	r0, r3
    cf8a:	370c      	adds	r7, #12
    cf8c:	46bd      	mov	sp, r7
    cf8e:	bd90      	pop	{r4, r7, pc}
    cf90:	0000d28d 	.word	0x0000d28d
    cf94:	0000cc6d 	.word	0x0000cc6d
    cf98:	0000cb89 	.word	0x0000cb89
    cf9c:	0000cbe1 	.word	0x0000cbe1
    cfa0:	0000cd79 	.word	0x0000cd79

0000cfa4 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    cfa4:	b580      	push	{r7, lr}
    cfa6:	b082      	sub	sp, #8
    cfa8:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    cfaa:	4b0a      	ldr	r3, [pc, #40]	; (cfd4 <usbdc_sof_notify+0x30>)
    cfac:	685b      	ldr	r3, [r3, #4]
    cfae:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    cfb0:	e009      	b.n	cfc6 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    cfb2:	687b      	ldr	r3, [r7, #4]
    cfb4:	685b      	ldr	r3, [r3, #4]
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d002      	beq.n	cfc0 <usbdc_sof_notify+0x1c>
			sof->cb();
    cfba:	687b      	ldr	r3, [r7, #4]
    cfbc:	685b      	ldr	r3, [r3, #4]
    cfbe:	4798      	blx	r3
		}
		sof = sof->next;
    cfc0:	687b      	ldr	r3, [r7, #4]
    cfc2:	681b      	ldr	r3, [r3, #0]
    cfc4:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    cfc6:	687b      	ldr	r3, [r7, #4]
    cfc8:	2b00      	cmp	r3, #0
    cfca:	d1f2      	bne.n	cfb2 <usbdc_sof_notify+0xe>
	}
}
    cfcc:	bf00      	nop
    cfce:	3708      	adds	r7, #8
    cfd0:	46bd      	mov	sp, r7
    cfd2:	bd80      	pop	{r7, pc}
    cfd4:	200034d0 	.word	0x200034d0

0000cfd8 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    cfd8:	b580      	push	{r7, lr}
    cfda:	b084      	sub	sp, #16
    cfdc:	af00      	add	r7, sp, #0
    cfde:	4603      	mov	r3, r0
    cfe0:	6039      	str	r1, [r7, #0]
    cfe2:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    cfe4:	4b0b      	ldr	r3, [pc, #44]	; (d014 <usbdc_change_notify+0x3c>)
    cfe6:	68db      	ldr	r3, [r3, #12]
    cfe8:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    cfea:	e00c      	b.n	d006 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    cfec:	68fb      	ldr	r3, [r7, #12]
    cfee:	685b      	ldr	r3, [r3, #4]
    cff0:	2b00      	cmp	r3, #0
    cff2:	d005      	beq.n	d000 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    cff4:	68fb      	ldr	r3, [r7, #12]
    cff6:	685b      	ldr	r3, [r3, #4]
    cff8:	79fa      	ldrb	r2, [r7, #7]
    cffa:	6839      	ldr	r1, [r7, #0]
    cffc:	4610      	mov	r0, r2
    cffe:	4798      	blx	r3
		}
		cg = cg->next;
    d000:	68fb      	ldr	r3, [r7, #12]
    d002:	681b      	ldr	r3, [r3, #0]
    d004:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d006:	68fb      	ldr	r3, [r7, #12]
    d008:	2b00      	cmp	r3, #0
    d00a:	d1ef      	bne.n	cfec <usbdc_change_notify+0x14>
	}
}
    d00c:	bf00      	nop
    d00e:	3710      	adds	r7, #16
    d010:	46bd      	mov	sp, r7
    d012:	bd80      	pop	{r7, pc}
    d014:	200034d0 	.word	0x200034d0

0000d018 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d018:	b580      	push	{r7, lr}
    d01a:	b084      	sub	sp, #16
    d01c:	af00      	add	r7, sp, #0
    d01e:	4603      	mov	r3, r0
    d020:	6039      	str	r1, [r7, #0]
    d022:	71fb      	strb	r3, [r7, #7]
    d024:	4613      	mov	r3, r2
    d026:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d028:	4b12      	ldr	r3, [pc, #72]	; (d074 <usbdc_request_handler+0x5c>)
    d02a:	689b      	ldr	r3, [r3, #8]
    d02c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d02e:	e019      	b.n	d064 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d030:	68fb      	ldr	r3, [r7, #12]
    d032:	685b      	ldr	r3, [r3, #4]
    d034:	2b00      	cmp	r3, #0
    d036:	d012      	beq.n	d05e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d038:	68fb      	ldr	r3, [r7, #12]
    d03a:	685b      	ldr	r3, [r3, #4]
    d03c:	79ba      	ldrb	r2, [r7, #6]
    d03e:	79f8      	ldrb	r0, [r7, #7]
    d040:	6839      	ldr	r1, [r7, #0]
    d042:	4798      	blx	r3
    d044:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d046:	68bb      	ldr	r3, [r7, #8]
    d048:	2b00      	cmp	r3, #0
    d04a:	d101      	bne.n	d050 <usbdc_request_handler+0x38>
				return true;
    d04c:	2301      	movs	r3, #1
    d04e:	e00d      	b.n	d06c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d050:	68bb      	ldr	r3, [r7, #8]
    d052:	f113 0f0a 	cmn.w	r3, #10
    d056:	d002      	beq.n	d05e <usbdc_request_handler+0x46>
				return -1;
    d058:	f04f 33ff 	mov.w	r3, #4294967295
    d05c:	e006      	b.n	d06c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d05e:	68fb      	ldr	r3, [r7, #12]
    d060:	681b      	ldr	r3, [r3, #0]
    d062:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d064:	68fb      	ldr	r3, [r7, #12]
    d066:	2b00      	cmp	r3, #0
    d068:	d1e2      	bne.n	d030 <usbdc_request_handler+0x18>
	}
	return false;
    d06a:	2300      	movs	r3, #0
}
    d06c:	4618      	mov	r0, r3
    d06e:	3710      	adds	r7, #16
    d070:	46bd      	mov	sp, r7
    d072:	bd80      	pop	{r7, pc}
    d074:	200034d0 	.word	0x200034d0

0000d078 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d078:	b580      	push	{r7, lr}
    d07a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d07c:	4b01      	ldr	r3, [pc, #4]	; (d084 <usbd_sof_cb+0xc>)
    d07e:	4798      	blx	r3
}
    d080:	bf00      	nop
    d082:	bd80      	pop	{r7, pc}
    d084:	0000cfa5 	.word	0x0000cfa5

0000d088 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d088:	b580      	push	{r7, lr}
    d08a:	b082      	sub	sp, #8
    d08c:	af00      	add	r7, sp, #0
    d08e:	4603      	mov	r3, r0
    d090:	6039      	str	r1, [r7, #0]
    d092:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d094:	79fb      	ldrb	r3, [r7, #7]
    d096:	2200      	movs	r2, #0
    d098:	6839      	ldr	r1, [r7, #0]
    d09a:	4618      	mov	r0, r3
    d09c:	4b14      	ldr	r3, [pc, #80]	; (d0f0 <usbdc_cb_ctl_req+0x68>)
    d09e:	4798      	blx	r3
    d0a0:	4603      	mov	r3, r0
    d0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
    d0a6:	d00b      	beq.n	d0c0 <usbdc_cb_ctl_req+0x38>
    d0a8:	2b01      	cmp	r3, #1
    d0aa:	d007      	beq.n	d0bc <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d0ac:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d0ae:	683b      	ldr	r3, [r7, #0]
    d0b0:	781b      	ldrb	r3, [r3, #0]
    d0b2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d0b6:	2b00      	cmp	r3, #0
    d0b8:	d007      	beq.n	d0ca <usbdc_cb_ctl_req+0x42>
    d0ba:	e003      	b.n	d0c4 <usbdc_cb_ctl_req+0x3c>
		return true;
    d0bc:	2301      	movs	r3, #1
    d0be:	e013      	b.n	d0e8 <usbdc_cb_ctl_req+0x60>
		return false;
    d0c0:	2300      	movs	r3, #0
    d0c2:	e011      	b.n	d0e8 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d0c4:	2b80      	cmp	r3, #128	; 0x80
    d0c6:	d007      	beq.n	d0d8 <usbdc_cb_ctl_req+0x50>
    d0c8:	e00d      	b.n	d0e6 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d0ca:	79fb      	ldrb	r3, [r7, #7]
    d0cc:	6839      	ldr	r1, [r7, #0]
    d0ce:	4618      	mov	r0, r3
    d0d0:	4b08      	ldr	r3, [pc, #32]	; (d0f4 <usbdc_cb_ctl_req+0x6c>)
    d0d2:	4798      	blx	r3
    d0d4:	4603      	mov	r3, r0
    d0d6:	e007      	b.n	d0e8 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d0d8:	79fb      	ldrb	r3, [r7, #7]
    d0da:	6839      	ldr	r1, [r7, #0]
    d0dc:	4618      	mov	r0, r3
    d0de:	4b06      	ldr	r3, [pc, #24]	; (d0f8 <usbdc_cb_ctl_req+0x70>)
    d0e0:	4798      	blx	r3
    d0e2:	4603      	mov	r3, r0
    d0e4:	e000      	b.n	d0e8 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d0e6:	2300      	movs	r3, #0
	}
}
    d0e8:	4618      	mov	r0, r3
    d0ea:	3708      	adds	r7, #8
    d0ec:	46bd      	mov	sp, r7
    d0ee:	bd80      	pop	{r7, pc}
    d0f0:	0000d019 	.word	0x0000d019
    d0f4:	0000ceb9 	.word	0x0000ceb9
    d0f8:	0000cae1 	.word	0x0000cae1

0000d0fc <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d0fc:	b580      	push	{r7, lr}
    d0fe:	b082      	sub	sp, #8
    d100:	af00      	add	r7, sp, #0
    d102:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d104:	687b      	ldr	r3, [r7, #4]
    d106:	781b      	ldrb	r3, [r3, #0]
    d108:	2b00      	cmp	r3, #0
    d10a:	d135      	bne.n	d178 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d10c:	687b      	ldr	r3, [r7, #4]
    d10e:	785b      	ldrb	r3, [r3, #1]
    d110:	2b05      	cmp	r3, #5
    d112:	d019      	beq.n	d148 <usbdc_ctrl_status_end+0x4c>
    d114:	2b09      	cmp	r3, #9
    d116:	d000      	beq.n	d11a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d118:	e02f      	b.n	d17a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d11a:	687b      	ldr	r3, [r7, #4]
    d11c:	885b      	ldrh	r3, [r3, #2]
    d11e:	b29b      	uxth	r3, r3
    d120:	b2da      	uxtb	r2, r3
    d122:	4b17      	ldr	r3, [pc, #92]	; (d180 <usbdc_ctrl_status_end+0x84>)
    d124:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d126:	687b      	ldr	r3, [r7, #4]
    d128:	885b      	ldrh	r3, [r3, #2]
    d12a:	b29b      	uxth	r3, r3
    d12c:	2b00      	cmp	r3, #0
    d12e:	d001      	beq.n	d134 <usbdc_ctrl_status_end+0x38>
    d130:	2204      	movs	r2, #4
    d132:	e000      	b.n	d136 <usbdc_ctrl_status_end+0x3a>
    d134:	2203      	movs	r2, #3
    d136:	4b12      	ldr	r3, [pc, #72]	; (d180 <usbdc_ctrl_status_end+0x84>)
    d138:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d13a:	4b11      	ldr	r3, [pc, #68]	; (d180 <usbdc_ctrl_status_end+0x84>)
    d13c:	7e9b      	ldrb	r3, [r3, #26]
    d13e:	4619      	mov	r1, r3
    d140:	2001      	movs	r0, #1
    d142:	4b10      	ldr	r3, [pc, #64]	; (d184 <usbdc_ctrl_status_end+0x88>)
    d144:	4798      	blx	r3
		break;
    d146:	e018      	b.n	d17a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d148:	687b      	ldr	r3, [r7, #4]
    d14a:	885b      	ldrh	r3, [r3, #2]
    d14c:	b29b      	uxth	r3, r3
    d14e:	b2db      	uxtb	r3, r3
    d150:	4618      	mov	r0, r3
    d152:	4b0d      	ldr	r3, [pc, #52]	; (d188 <usbdc_ctrl_status_end+0x8c>)
    d154:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d156:	687b      	ldr	r3, [r7, #4]
    d158:	885b      	ldrh	r3, [r3, #2]
    d15a:	b29b      	uxth	r3, r3
    d15c:	2b00      	cmp	r3, #0
    d15e:	d001      	beq.n	d164 <usbdc_ctrl_status_end+0x68>
    d160:	2203      	movs	r2, #3
    d162:	e000      	b.n	d166 <usbdc_ctrl_status_end+0x6a>
    d164:	2202      	movs	r2, #2
    d166:	4b06      	ldr	r3, [pc, #24]	; (d180 <usbdc_ctrl_status_end+0x84>)
    d168:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d16a:	4b05      	ldr	r3, [pc, #20]	; (d180 <usbdc_ctrl_status_end+0x84>)
    d16c:	7e9b      	ldrb	r3, [r3, #26]
    d16e:	4619      	mov	r1, r3
    d170:	2001      	movs	r0, #1
    d172:	4b04      	ldr	r3, [pc, #16]	; (d184 <usbdc_ctrl_status_end+0x88>)
    d174:	4798      	blx	r3
		break;
    d176:	e000      	b.n	d17a <usbdc_ctrl_status_end+0x7e>
		return;
    d178:	bf00      	nop
	}
}
    d17a:	3708      	adds	r7, #8
    d17c:	46bd      	mov	sp, r7
    d17e:	bd80      	pop	{r7, pc}
    d180:	200034d0 	.word	0x200034d0
    d184:	0000cfd9 	.word	0x0000cfd9
    d188:	0000cd59 	.word	0x0000cd59

0000d18c <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d18c:	b580      	push	{r7, lr}
    d18e:	b082      	sub	sp, #8
    d190:	af00      	add	r7, sp, #0
    d192:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d194:	2201      	movs	r2, #1
    d196:	6879      	ldr	r1, [r7, #4]
    d198:	2000      	movs	r0, #0
    d19a:	4b03      	ldr	r3, [pc, #12]	; (d1a8 <usbdc_ctrl_data_end+0x1c>)
    d19c:	4798      	blx	r3
	return false;
    d19e:	2300      	movs	r3, #0
}
    d1a0:	4618      	mov	r0, r3
    d1a2:	3708      	adds	r7, #8
    d1a4:	46bd      	mov	sp, r7
    d1a6:	bd80      	pop	{r7, pc}
    d1a8:	0000d019 	.word	0x0000d019

0000d1ac <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d1ac:	b580      	push	{r7, lr}
    d1ae:	b082      	sub	sp, #8
    d1b0:	af00      	add	r7, sp, #0
    d1b2:	4603      	mov	r3, r0
    d1b4:	603a      	str	r2, [r7, #0]
    d1b6:	71fb      	strb	r3, [r7, #7]
    d1b8:	460b      	mov	r3, r1
    d1ba:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d1bc:	79bb      	ldrb	r3, [r7, #6]
    d1be:	2b00      	cmp	r3, #0
    d1c0:	d002      	beq.n	d1c8 <usbdc_cb_ctl_done+0x1c>
    d1c2:	2b01      	cmp	r3, #1
    d1c4:	d004      	beq.n	d1d0 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d1c6:	e008      	b.n	d1da <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d1c8:	6838      	ldr	r0, [r7, #0]
    d1ca:	4b06      	ldr	r3, [pc, #24]	; (d1e4 <usbdc_cb_ctl_done+0x38>)
    d1cc:	4798      	blx	r3
		break;
    d1ce:	e004      	b.n	d1da <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d1d0:	6838      	ldr	r0, [r7, #0]
    d1d2:	4b05      	ldr	r3, [pc, #20]	; (d1e8 <usbdc_cb_ctl_done+0x3c>)
    d1d4:	4798      	blx	r3
    d1d6:	4603      	mov	r3, r0
    d1d8:	e000      	b.n	d1dc <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d1da:	2300      	movs	r3, #0
}
    d1dc:	4618      	mov	r0, r3
    d1de:	3708      	adds	r7, #8
    d1e0:	46bd      	mov	sp, r7
    d1e2:	bd80      	pop	{r7, pc}
    d1e4:	0000d0fd 	.word	0x0000d0fd
    d1e8:	0000d18d 	.word	0x0000d18d

0000d1ec <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d1ec:	b580      	push	{r7, lr}
    d1ee:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d1f0:	4b10      	ldr	r3, [pc, #64]	; (d234 <usbdc_reset+0x48>)
    d1f2:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d1f4:	4b10      	ldr	r3, [pc, #64]	; (d238 <usbdc_reset+0x4c>)
    d1f6:	2202      	movs	r2, #2
    d1f8:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d1fa:	4b0f      	ldr	r3, [pc, #60]	; (d238 <usbdc_reset+0x4c>)
    d1fc:	2200      	movs	r2, #0
    d1fe:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d200:	4b0d      	ldr	r3, [pc, #52]	; (d238 <usbdc_reset+0x4c>)
    d202:	2200      	movs	r2, #0
    d204:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d206:	2000      	movs	r0, #0
    d208:	4b0c      	ldr	r3, [pc, #48]	; (d23c <usbdc_reset+0x50>)
    d20a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d20c:	4b0a      	ldr	r3, [pc, #40]	; (d238 <usbdc_reset+0x4c>)
    d20e:	7f1b      	ldrb	r3, [r3, #28]
    d210:	4618      	mov	r0, r3
    d212:	4b0b      	ldr	r3, [pc, #44]	; (d240 <usbdc_reset+0x54>)
    d214:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d216:	4a0b      	ldr	r2, [pc, #44]	; (d244 <usbdc_reset+0x58>)
    d218:	2100      	movs	r1, #0
    d21a:	2000      	movs	r0, #0
    d21c:	4b0a      	ldr	r3, [pc, #40]	; (d248 <usbdc_reset+0x5c>)
    d21e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d220:	4a0a      	ldr	r2, [pc, #40]	; (d24c <usbdc_reset+0x60>)
    d222:	2102      	movs	r1, #2
    d224:	2000      	movs	r0, #0
    d226:	4b08      	ldr	r3, [pc, #32]	; (d248 <usbdc_reset+0x5c>)
    d228:	4798      	blx	r3
	usb_d_ep_enable(0);
    d22a:	2000      	movs	r0, #0
    d22c:	4b08      	ldr	r3, [pc, #32]	; (d250 <usbdc_reset+0x64>)
    d22e:	4798      	blx	r3
}
    d230:	bf00      	nop
    d232:	bd80      	pop	{r7, pc}
    d234:	0000cc39 	.word	0x0000cc39
    d238:	200034d0 	.word	0x200034d0
    d23c:	00003ba9 	.word	0x00003ba9
    d240:	00003ae5 	.word	0x00003ae5
    d244:	0000d089 	.word	0x0000d089
    d248:	00003efd 	.word	0x00003efd
    d24c:	0000d1ad 	.word	0x0000d1ad
    d250:	00003bf9 	.word	0x00003bf9

0000d254 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d254:	b580      	push	{r7, lr}
    d256:	b082      	sub	sp, #8
    d258:	af00      	add	r7, sp, #0
    d25a:	4603      	mov	r3, r0
    d25c:	6039      	str	r1, [r7, #0]
    d25e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d260:	79fb      	ldrb	r3, [r7, #7]
    d262:	2b00      	cmp	r3, #0
    d264:	d002      	beq.n	d26c <usbd_event_cb+0x18>
    d266:	2b01      	cmp	r3, #1
    d268:	d005      	beq.n	d276 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d26a:	e007      	b.n	d27c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d26c:	6839      	ldr	r1, [r7, #0]
    d26e:	2000      	movs	r0, #0
    d270:	4b04      	ldr	r3, [pc, #16]	; (d284 <usbd_event_cb+0x30>)
    d272:	4798      	blx	r3
		break;
    d274:	e002      	b.n	d27c <usbd_event_cb+0x28>
		usbdc_reset();
    d276:	4b04      	ldr	r3, [pc, #16]	; (d288 <usbd_event_cb+0x34>)
    d278:	4798      	blx	r3
		break;
    d27a:	bf00      	nop
	}
}
    d27c:	bf00      	nop
    d27e:	3708      	adds	r7, #8
    d280:	46bd      	mov	sp, r7
    d282:	bd80      	pop	{r7, pc}
    d284:	0000cfd9 	.word	0x0000cfd9
    d288:	0000d1ed 	.word	0x0000d1ed

0000d28c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d28c:	b580      	push	{r7, lr}
    d28e:	b088      	sub	sp, #32
    d290:	af00      	add	r7, sp, #0
    d292:	60b9      	str	r1, [r7, #8]
    d294:	607a      	str	r2, [r7, #4]
    d296:	461a      	mov	r2, r3
    d298:	4603      	mov	r3, r0
    d29a:	73fb      	strb	r3, [r7, #15]
    d29c:	4613      	mov	r3, r2
    d29e:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d2a0:	68bb      	ldr	r3, [r7, #8]
    d2a2:	617b      	str	r3, [r7, #20]
    d2a4:	687b      	ldr	r3, [r7, #4]
    d2a6:	61bb      	str	r3, [r7, #24]
    d2a8:	7bfb      	ldrb	r3, [r7, #15]
    d2aa:	773b      	strb	r3, [r7, #28]
    d2ac:	7bbb      	ldrb	r3, [r7, #14]
    d2ae:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d2b0:	f107 0314 	add.w	r3, r7, #20
    d2b4:	4618      	mov	r0, r3
    d2b6:	4b03      	ldr	r3, [pc, #12]	; (d2c4 <usbdc_xfer+0x38>)
    d2b8:	4798      	blx	r3
    d2ba:	4603      	mov	r3, r0
}
    d2bc:	4618      	mov	r0, r3
    d2be:	3720      	adds	r7, #32
    d2c0:	46bd      	mov	sp, r7
    d2c2:	bd80      	pop	{r7, pc}
    d2c4:	00003c69 	.word	0x00003c69

0000d2c8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d2c8:	b580      	push	{r7, lr}
    d2ca:	b082      	sub	sp, #8
    d2cc:	af00      	add	r7, sp, #0
    d2ce:	4603      	mov	r3, r0
    d2d0:	6039      	str	r1, [r7, #0]
    d2d2:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d2d4:	79fb      	ldrb	r3, [r7, #7]
    d2d6:	2b01      	cmp	r3, #1
    d2d8:	d009      	beq.n	d2ee <usbdc_register_handler+0x26>
    d2da:	2b02      	cmp	r3, #2
    d2dc:	d00c      	beq.n	d2f8 <usbdc_register_handler+0x30>
    d2de:	2b00      	cmp	r3, #0
    d2e0:	d000      	beq.n	d2e4 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d2e2:	e00e      	b.n	d302 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d2e4:	6839      	ldr	r1, [r7, #0]
    d2e6:	4809      	ldr	r0, [pc, #36]	; (d30c <usbdc_register_handler+0x44>)
    d2e8:	4b09      	ldr	r3, [pc, #36]	; (d310 <usbdc_register_handler+0x48>)
    d2ea:	4798      	blx	r3
		break;
    d2ec:	e009      	b.n	d302 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d2ee:	6839      	ldr	r1, [r7, #0]
    d2f0:	4808      	ldr	r0, [pc, #32]	; (d314 <usbdc_register_handler+0x4c>)
    d2f2:	4b07      	ldr	r3, [pc, #28]	; (d310 <usbdc_register_handler+0x48>)
    d2f4:	4798      	blx	r3
		break;
    d2f6:	e004      	b.n	d302 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d2f8:	6839      	ldr	r1, [r7, #0]
    d2fa:	4807      	ldr	r0, [pc, #28]	; (d318 <usbdc_register_handler+0x50>)
    d2fc:	4b04      	ldr	r3, [pc, #16]	; (d310 <usbdc_register_handler+0x48>)
    d2fe:	4798      	blx	r3
		break;
    d300:	bf00      	nop
	}
}
    d302:	bf00      	nop
    d304:	3708      	adds	r7, #8
    d306:	46bd      	mov	sp, r7
    d308:	bd80      	pop	{r7, pc}
    d30a:	bf00      	nop
    d30c:	200034d4 	.word	0x200034d4
    d310:	00004055 	.word	0x00004055
    d314:	200034d8 	.word	0x200034d8
    d318:	200034dc 	.word	0x200034dc

0000d31c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d31c:	b580      	push	{r7, lr}
    d31e:	b084      	sub	sp, #16
    d320:	af00      	add	r7, sp, #0
    d322:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d324:	687b      	ldr	r3, [r7, #4]
    d326:	2b00      	cmp	r3, #0
    d328:	bf14      	ite	ne
    d32a:	2301      	movne	r3, #1
    d32c:	2300      	moveq	r3, #0
    d32e:	b2db      	uxtb	r3, r3
    d330:	f240 3255 	movw	r2, #853	; 0x355
    d334:	4910      	ldr	r1, [pc, #64]	; (d378 <usbdc_init+0x5c>)
    d336:	4618      	mov	r0, r3
    d338:	4b10      	ldr	r3, [pc, #64]	; (d37c <usbdc_init+0x60>)
    d33a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d33c:	4b10      	ldr	r3, [pc, #64]	; (d380 <usbdc_init+0x64>)
    d33e:	4798      	blx	r3
    d340:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d342:	68fb      	ldr	r3, [r7, #12]
    d344:	2b00      	cmp	r3, #0
    d346:	da01      	bge.n	d34c <usbdc_init+0x30>
		return rc;
    d348:	68fb      	ldr	r3, [r7, #12]
    d34a:	e010      	b.n	d36e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d34c:	2220      	movs	r2, #32
    d34e:	2100      	movs	r1, #0
    d350:	480c      	ldr	r0, [pc, #48]	; (d384 <usbdc_init+0x68>)
    d352:	4b0d      	ldr	r3, [pc, #52]	; (d388 <usbdc_init+0x6c>)
    d354:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d356:	4a0b      	ldr	r2, [pc, #44]	; (d384 <usbdc_init+0x68>)
    d358:	687b      	ldr	r3, [r7, #4]
    d35a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d35c:	490b      	ldr	r1, [pc, #44]	; (d38c <usbdc_init+0x70>)
    d35e:	2000      	movs	r0, #0
    d360:	4b0b      	ldr	r3, [pc, #44]	; (d390 <usbdc_init+0x74>)
    d362:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d364:	490b      	ldr	r1, [pc, #44]	; (d394 <usbdc_init+0x78>)
    d366:	2001      	movs	r0, #1
    d368:	4b09      	ldr	r3, [pc, #36]	; (d390 <usbdc_init+0x74>)
    d36a:	4798      	blx	r3

	return 0;
    d36c:	2300      	movs	r3, #0
}
    d36e:	4618      	mov	r0, r3
    d370:	3710      	adds	r7, #16
    d372:	46bd      	mov	sp, r7
    d374:	bd80      	pop	{r7, pc}
    d376:	bf00      	nop
    d378:	000116c0 	.word	0x000116c0
    d37c:	00003f79 	.word	0x00003f79
    d380:	000039d1 	.word	0x000039d1
    d384:	200034d0 	.word	0x200034d0
    d388:	00010e15 	.word	0x00010e15
    d38c:	0000d079 	.word	0x0000d079
    d390:	00003a7d 	.word	0x00003a7d
    d394:	0000d255 	.word	0x0000d255

0000d398 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d398:	b580      	push	{r7, lr}
    d39a:	b082      	sub	sp, #8
    d39c:	af00      	add	r7, sp, #0
    d39e:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d3a0:	6879      	ldr	r1, [r7, #4]
    d3a2:	4803      	ldr	r0, [pc, #12]	; (d3b0 <usbdc_register_function+0x18>)
    d3a4:	4b03      	ldr	r3, [pc, #12]	; (d3b4 <usbdc_register_function+0x1c>)
    d3a6:	4798      	blx	r3
}
    d3a8:	bf00      	nop
    d3aa:	3708      	adds	r7, #8
    d3ac:	46bd      	mov	sp, r7
    d3ae:	bd80      	pop	{r7, pc}
    d3b0:	200034e0 	.word	0x200034e0
    d3b4:	00004055 	.word	0x00004055

0000d3b8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d3b8:	b580      	push	{r7, lr}
    d3ba:	b082      	sub	sp, #8
    d3bc:	af00      	add	r7, sp, #0
    d3be:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d3c0:	4b0f      	ldr	r3, [pc, #60]	; (d400 <usbdc_start+0x48>)
    d3c2:	7e9b      	ldrb	r3, [r3, #26]
    d3c4:	2b00      	cmp	r3, #0
    d3c6:	d002      	beq.n	d3ce <usbdc_start+0x16>
		return ERR_BUSY;
    d3c8:	f06f 0303 	mvn.w	r3, #3
    d3cc:	e013      	b.n	d3f6 <usbdc_start+0x3e>
	}

	if (desces) {
    d3ce:	687b      	ldr	r3, [r7, #4]
    d3d0:	2b00      	cmp	r3, #0
    d3d2:	d00e      	beq.n	d3f2 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d3d4:	4a0a      	ldr	r2, [pc, #40]	; (d400 <usbdc_start+0x48>)
    d3d6:	687b      	ldr	r3, [r7, #4]
    d3d8:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d3da:	687b      	ldr	r3, [r7, #4]
    d3dc:	681b      	ldr	r3, [r3, #0]
    d3de:	79da      	ldrb	r2, [r3, #7]
    d3e0:	4b07      	ldr	r3, [pc, #28]	; (d400 <usbdc_start+0x48>)
    d3e2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d3e4:	4b06      	ldr	r3, [pc, #24]	; (d400 <usbdc_start+0x48>)
    d3e6:	2201      	movs	r2, #1
    d3e8:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d3ea:	4b06      	ldr	r3, [pc, #24]	; (d404 <usbdc_start+0x4c>)
    d3ec:	4798      	blx	r3
	return ERR_NONE;
    d3ee:	2300      	movs	r3, #0
    d3f0:	e001      	b.n	d3f6 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d3f2:	f06f 0308 	mvn.w	r3, #8
}
    d3f6:	4618      	mov	r0, r3
    d3f8:	3708      	adds	r7, #8
    d3fa:	46bd      	mov	sp, r7
    d3fc:	bd80      	pop	{r7, pc}
    d3fe:	bf00      	nop
    d400:	200034d0 	.word	0x200034d0
    d404:	00003aa1 	.word	0x00003aa1

0000d408 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d408:	b580      	push	{r7, lr}
    d40a:	af00      	add	r7, sp, #0
	usb_d_attach();
    d40c:	4b01      	ldr	r3, [pc, #4]	; (d414 <usbdc_attach+0xc>)
    d40e:	4798      	blx	r3
}
    d410:	bf00      	nop
    d412:	bd80      	pop	{r7, pc}
    d414:	00003ab5 	.word	0x00003ab5

0000d418 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d418:	b480      	push	{r7}
    d41a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d41c:	4b03      	ldr	r3, [pc, #12]	; (d42c <usbdc_get_ctrl_buffer+0x14>)
    d41e:	695b      	ldr	r3, [r3, #20]
}
    d420:	4618      	mov	r0, r3
    d422:	46bd      	mov	sp, r7
    d424:	f85d 7b04 	ldr.w	r7, [sp], #4
    d428:	4770      	bx	lr
    d42a:	bf00      	nop
    d42c:	200034d0 	.word	0x200034d0

0000d430 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d430:	b480      	push	{r7}
    d432:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d434:	4b07      	ldr	r3, [pc, #28]	; (d454 <usbdc_get_state+0x24>)
    d436:	7e9b      	ldrb	r3, [r3, #26]
    d438:	f003 0310 	and.w	r3, r3, #16
    d43c:	2b00      	cmp	r3, #0
    d43e:	d001      	beq.n	d444 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d440:	2310      	movs	r3, #16
    d442:	e001      	b.n	d448 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d444:	4b03      	ldr	r3, [pc, #12]	; (d454 <usbdc_get_state+0x24>)
    d446:	7e9b      	ldrb	r3, [r3, #26]
}
    d448:	4618      	mov	r0, r3
    d44a:	46bd      	mov	sp, r7
    d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d450:	4770      	bx	lr
    d452:	bf00      	nop
    d454:	200034d0 	.word	0x200034d0

0000d458 <usb_get_u16>:
{
    d458:	b480      	push	{r7}
    d45a:	b083      	sub	sp, #12
    d45c:	af00      	add	r7, sp, #0
    d45e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d460:	687b      	ldr	r3, [r7, #4]
    d462:	781b      	ldrb	r3, [r3, #0]
    d464:	b29a      	uxth	r2, r3
    d466:	687b      	ldr	r3, [r7, #4]
    d468:	3301      	adds	r3, #1
    d46a:	781b      	ldrb	r3, [r3, #0]
    d46c:	b29b      	uxth	r3, r3
    d46e:	021b      	lsls	r3, r3, #8
    d470:	b29b      	uxth	r3, r3
    d472:	4413      	add	r3, r2
    d474:	b29b      	uxth	r3, r3
}
    d476:	4618      	mov	r0, r3
    d478:	370c      	adds	r7, #12
    d47a:	46bd      	mov	sp, r7
    d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d480:	4770      	bx	lr

0000d482 <usb_desc_len>:
{
    d482:	b480      	push	{r7}
    d484:	b083      	sub	sp, #12
    d486:	af00      	add	r7, sp, #0
    d488:	6078      	str	r0, [r7, #4]
	return desc[0];
    d48a:	687b      	ldr	r3, [r7, #4]
    d48c:	781b      	ldrb	r3, [r3, #0]
}
    d48e:	4618      	mov	r0, r3
    d490:	370c      	adds	r7, #12
    d492:	46bd      	mov	sp, r7
    d494:	f85d 7b04 	ldr.w	r7, [sp], #4
    d498:	4770      	bx	lr

0000d49a <usb_desc_type>:
{
    d49a:	b480      	push	{r7}
    d49c:	b083      	sub	sp, #12
    d49e:	af00      	add	r7, sp, #0
    d4a0:	6078      	str	r0, [r7, #4]
	return desc[1];
    d4a2:	687b      	ldr	r3, [r7, #4]
    d4a4:	3301      	adds	r3, #1
    d4a6:	781b      	ldrb	r3, [r3, #0]
}
    d4a8:	4618      	mov	r0, r3
    d4aa:	370c      	adds	r7, #12
    d4ac:	46bd      	mov	sp, r7
    d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    d4b2:	4770      	bx	lr

0000d4b4 <usb_desc_next>:
{
    d4b4:	b580      	push	{r7, lr}
    d4b6:	b082      	sub	sp, #8
    d4b8:	af00      	add	r7, sp, #0
    d4ba:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d4bc:	6878      	ldr	r0, [r7, #4]
    d4be:	4b05      	ldr	r3, [pc, #20]	; (d4d4 <usb_desc_next+0x20>)
    d4c0:	4798      	blx	r3
    d4c2:	4603      	mov	r3, r0
    d4c4:	461a      	mov	r2, r3
    d4c6:	687b      	ldr	r3, [r7, #4]
    d4c8:	4413      	add	r3, r2
}
    d4ca:	4618      	mov	r0, r3
    d4cc:	3708      	adds	r7, #8
    d4ce:	46bd      	mov	sp, r7
    d4d0:	bd80      	pop	{r7, pc}
    d4d2:	bf00      	nop
    d4d4:	0000d483 	.word	0x0000d483

0000d4d8 <usb_cfg_desc_total_len>:
{
    d4d8:	b580      	push	{r7, lr}
    d4da:	b082      	sub	sp, #8
    d4dc:	af00      	add	r7, sp, #0
    d4de:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d4e0:	687b      	ldr	r3, [r7, #4]
    d4e2:	3302      	adds	r3, #2
    d4e4:	4618      	mov	r0, r3
    d4e6:	4b03      	ldr	r3, [pc, #12]	; (d4f4 <usb_cfg_desc_total_len+0x1c>)
    d4e8:	4798      	blx	r3
    d4ea:	4603      	mov	r3, r0
}
    d4ec:	4618      	mov	r0, r3
    d4ee:	3708      	adds	r7, #8
    d4f0:	46bd      	mov	sp, r7
    d4f2:	bd80      	pop	{r7, pc}
    d4f4:	0000d459 	.word	0x0000d459

0000d4f8 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d4f8:	b580      	push	{r7, lr}
    d4fa:	b082      	sub	sp, #8
    d4fc:	af00      	add	r7, sp, #0
    d4fe:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d500:	6878      	ldr	r0, [r7, #4]
    d502:	4b05      	ldr	r3, [pc, #20]	; (d518 <usb_cfg_desc_next+0x20>)
    d504:	4798      	blx	r3
    d506:	4603      	mov	r3, r0
    d508:	461a      	mov	r2, r3
    d50a:	687b      	ldr	r3, [r7, #4]
    d50c:	4413      	add	r3, r2
}
    d50e:	4618      	mov	r0, r3
    d510:	3708      	adds	r7, #8
    d512:	46bd      	mov	sp, r7
    d514:	bd80      	pop	{r7, pc}
    d516:	bf00      	nop
    d518:	0000d4d9 	.word	0x0000d4d9

0000d51c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d51c:	b580      	push	{r7, lr}
    d51e:	b084      	sub	sp, #16
    d520:	af00      	add	r7, sp, #0
    d522:	60f8      	str	r0, [r7, #12]
    d524:	60b9      	str	r1, [r7, #8]
    d526:	4613      	mov	r3, r2
    d528:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d52a:	e015      	b.n	d558 <usb_find_desc+0x3c>
		_desc_len_check();
    d52c:	68f8      	ldr	r0, [r7, #12]
    d52e:	4b0f      	ldr	r3, [pc, #60]	; (d56c <usb_find_desc+0x50>)
    d530:	4798      	blx	r3
    d532:	4603      	mov	r3, r0
    d534:	2b01      	cmp	r3, #1
    d536:	d801      	bhi.n	d53c <usb_find_desc+0x20>
    d538:	2300      	movs	r3, #0
    d53a:	e012      	b.n	d562 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d53c:	68f8      	ldr	r0, [r7, #12]
    d53e:	4b0c      	ldr	r3, [pc, #48]	; (d570 <usb_find_desc+0x54>)
    d540:	4798      	blx	r3
    d542:	4603      	mov	r3, r0
    d544:	461a      	mov	r2, r3
    d546:	79fb      	ldrb	r3, [r7, #7]
    d548:	4293      	cmp	r3, r2
    d54a:	d101      	bne.n	d550 <usb_find_desc+0x34>
			return desc;
    d54c:	68fb      	ldr	r3, [r7, #12]
    d54e:	e008      	b.n	d562 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d550:	68f8      	ldr	r0, [r7, #12]
    d552:	4b08      	ldr	r3, [pc, #32]	; (d574 <usb_find_desc+0x58>)
    d554:	4798      	blx	r3
    d556:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d558:	68fa      	ldr	r2, [r7, #12]
    d55a:	68bb      	ldr	r3, [r7, #8]
    d55c:	429a      	cmp	r2, r3
    d55e:	d3e5      	bcc.n	d52c <usb_find_desc+0x10>
	}
	return NULL;
    d560:	2300      	movs	r3, #0
}
    d562:	4618      	mov	r0, r3
    d564:	3710      	adds	r7, #16
    d566:	46bd      	mov	sp, r7
    d568:	bd80      	pop	{r7, pc}
    d56a:	bf00      	nop
    d56c:	0000d483 	.word	0x0000d483
    d570:	0000d49b 	.word	0x0000d49b
    d574:	0000d4b5 	.word	0x0000d4b5

0000d578 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d578:	b580      	push	{r7, lr}
    d57a:	b082      	sub	sp, #8
    d57c:	af00      	add	r7, sp, #0
    d57e:	6078      	str	r0, [r7, #4]
    d580:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d582:	e019      	b.n	d5b8 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d584:	6878      	ldr	r0, [r7, #4]
    d586:	4b12      	ldr	r3, [pc, #72]	; (d5d0 <usb_find_ep_desc+0x58>)
    d588:	4798      	blx	r3
    d58a:	4603      	mov	r3, r0
    d58c:	2b01      	cmp	r3, #1
    d58e:	d801      	bhi.n	d594 <usb_find_ep_desc+0x1c>
    d590:	2300      	movs	r3, #0
    d592:	e018      	b.n	d5c6 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d594:	6878      	ldr	r0, [r7, #4]
    d596:	4b0f      	ldr	r3, [pc, #60]	; (d5d4 <usb_find_ep_desc+0x5c>)
    d598:	4798      	blx	r3
    d59a:	4603      	mov	r3, r0
    d59c:	2b04      	cmp	r3, #4
    d59e:	d010      	beq.n	d5c2 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d5a0:	6878      	ldr	r0, [r7, #4]
    d5a2:	4b0c      	ldr	r3, [pc, #48]	; (d5d4 <usb_find_ep_desc+0x5c>)
    d5a4:	4798      	blx	r3
    d5a6:	4603      	mov	r3, r0
    d5a8:	2b05      	cmp	r3, #5
    d5aa:	d101      	bne.n	d5b0 <usb_find_ep_desc+0x38>
			return desc;
    d5ac:	687b      	ldr	r3, [r7, #4]
    d5ae:	e00a      	b.n	d5c6 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d5b0:	6878      	ldr	r0, [r7, #4]
    d5b2:	4b09      	ldr	r3, [pc, #36]	; (d5d8 <usb_find_ep_desc+0x60>)
    d5b4:	4798      	blx	r3
    d5b6:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d5b8:	687a      	ldr	r2, [r7, #4]
    d5ba:	683b      	ldr	r3, [r7, #0]
    d5bc:	429a      	cmp	r2, r3
    d5be:	d3e1      	bcc.n	d584 <usb_find_ep_desc+0xc>
    d5c0:	e000      	b.n	d5c4 <usb_find_ep_desc+0x4c>
			break;
    d5c2:	bf00      	nop
	}
	return NULL;
    d5c4:	2300      	movs	r3, #0
}
    d5c6:	4618      	mov	r0, r3
    d5c8:	3708      	adds	r7, #8
    d5ca:	46bd      	mov	sp, r7
    d5cc:	bd80      	pop	{r7, pc}
    d5ce:	bf00      	nop
    d5d0:	0000d483 	.word	0x0000d483
    d5d4:	0000d49b 	.word	0x0000d49b
    d5d8:	0000d4b5 	.word	0x0000d4b5

0000d5dc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d5dc:	b580      	push	{r7, lr}
    d5de:	b084      	sub	sp, #16
    d5e0:	af00      	add	r7, sp, #0
    d5e2:	60f8      	str	r0, [r7, #12]
    d5e4:	60b9      	str	r1, [r7, #8]
    d5e6:	4613      	mov	r3, r2
    d5e8:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d5ea:	2202      	movs	r2, #2
    d5ec:	68b9      	ldr	r1, [r7, #8]
    d5ee:	68f8      	ldr	r0, [r7, #12]
    d5f0:	4b15      	ldr	r3, [pc, #84]	; (d648 <usb_find_cfg_desc+0x6c>)
    d5f2:	4798      	blx	r3
    d5f4:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d5f6:	68fb      	ldr	r3, [r7, #12]
    d5f8:	2b00      	cmp	r3, #0
    d5fa:	d11a      	bne.n	d632 <usb_find_cfg_desc+0x56>
		return NULL;
    d5fc:	2300      	movs	r3, #0
    d5fe:	e01f      	b.n	d640 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d600:	68f8      	ldr	r0, [r7, #12]
    d602:	4b12      	ldr	r3, [pc, #72]	; (d64c <usb_find_cfg_desc+0x70>)
    d604:	4798      	blx	r3
    d606:	4603      	mov	r3, r0
    d608:	2b01      	cmp	r3, #1
    d60a:	d801      	bhi.n	d610 <usb_find_cfg_desc+0x34>
    d60c:	2300      	movs	r3, #0
    d60e:	e017      	b.n	d640 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d610:	68fb      	ldr	r3, [r7, #12]
    d612:	3301      	adds	r3, #1
    d614:	781b      	ldrb	r3, [r3, #0]
    d616:	2b02      	cmp	r3, #2
    d618:	d110      	bne.n	d63c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d61a:	68fb      	ldr	r3, [r7, #12]
    d61c:	3305      	adds	r3, #5
    d61e:	781b      	ldrb	r3, [r3, #0]
    d620:	79fa      	ldrb	r2, [r7, #7]
    d622:	429a      	cmp	r2, r3
    d624:	d101      	bne.n	d62a <usb_find_cfg_desc+0x4e>
			return desc;
    d626:	68fb      	ldr	r3, [r7, #12]
    d628:	e00a      	b.n	d640 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d62a:	68f8      	ldr	r0, [r7, #12]
    d62c:	4b08      	ldr	r3, [pc, #32]	; (d650 <usb_find_cfg_desc+0x74>)
    d62e:	4798      	blx	r3
    d630:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d632:	68fa      	ldr	r2, [r7, #12]
    d634:	68bb      	ldr	r3, [r7, #8]
    d636:	429a      	cmp	r2, r3
    d638:	d3e2      	bcc.n	d600 <usb_find_cfg_desc+0x24>
    d63a:	e000      	b.n	d63e <usb_find_cfg_desc+0x62>
			break;
    d63c:	bf00      	nop
	}
	return NULL;
    d63e:	2300      	movs	r3, #0
}
    d640:	4618      	mov	r0, r3
    d642:	3710      	adds	r7, #16
    d644:	46bd      	mov	sp, r7
    d646:	bd80      	pop	{r7, pc}
    d648:	0000d51d 	.word	0x0000d51d
    d64c:	0000d483 	.word	0x0000d483
    d650:	0000d4f9 	.word	0x0000d4f9

0000d654 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d654:	b580      	push	{r7, lr}
    d656:	b086      	sub	sp, #24
    d658:	af00      	add	r7, sp, #0
    d65a:	60f8      	str	r0, [r7, #12]
    d65c:	60b9      	str	r1, [r7, #8]
    d65e:	4613      	mov	r3, r2
    d660:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d662:	2300      	movs	r3, #0
    d664:	75fb      	strb	r3, [r7, #23]
    d666:	e020      	b.n	d6aa <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d668:	2203      	movs	r2, #3
    d66a:	68b9      	ldr	r1, [r7, #8]
    d66c:	68f8      	ldr	r0, [r7, #12]
    d66e:	4b13      	ldr	r3, [pc, #76]	; (d6bc <usb_find_str_desc+0x68>)
    d670:	4798      	blx	r3
    d672:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d674:	68fb      	ldr	r3, [r7, #12]
    d676:	2b00      	cmp	r3, #0
    d678:	d015      	beq.n	d6a6 <usb_find_str_desc+0x52>
			_desc_len_check();
    d67a:	68f8      	ldr	r0, [r7, #12]
    d67c:	4b10      	ldr	r3, [pc, #64]	; (d6c0 <usb_find_str_desc+0x6c>)
    d67e:	4798      	blx	r3
    d680:	4603      	mov	r3, r0
    d682:	2b01      	cmp	r3, #1
    d684:	d801      	bhi.n	d68a <usb_find_str_desc+0x36>
    d686:	2300      	movs	r3, #0
    d688:	e014      	b.n	d6b4 <usb_find_str_desc+0x60>
			if (i == str_index) {
    d68a:	7dfa      	ldrb	r2, [r7, #23]
    d68c:	79fb      	ldrb	r3, [r7, #7]
    d68e:	429a      	cmp	r2, r3
    d690:	d101      	bne.n	d696 <usb_find_str_desc+0x42>
				return desc;
    d692:	68fb      	ldr	r3, [r7, #12]
    d694:	e00e      	b.n	d6b4 <usb_find_str_desc+0x60>
			}
			i++;
    d696:	7dfb      	ldrb	r3, [r7, #23]
    d698:	3301      	adds	r3, #1
    d69a:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d69c:	68f8      	ldr	r0, [r7, #12]
    d69e:	4b09      	ldr	r3, [pc, #36]	; (d6c4 <usb_find_str_desc+0x70>)
    d6a0:	4798      	blx	r3
    d6a2:	60f8      	str	r0, [r7, #12]
    d6a4:	e001      	b.n	d6aa <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d6a6:	2300      	movs	r3, #0
    d6a8:	e004      	b.n	d6b4 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d6aa:	68fa      	ldr	r2, [r7, #12]
    d6ac:	68bb      	ldr	r3, [r7, #8]
    d6ae:	429a      	cmp	r2, r3
    d6b0:	d3da      	bcc.n	d668 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d6b2:	2300      	movs	r3, #0
}
    d6b4:	4618      	mov	r0, r3
    d6b6:	3718      	adds	r7, #24
    d6b8:	46bd      	mov	sp, r7
    d6ba:	bd80      	pop	{r7, pc}
    d6bc:	0000d51d 	.word	0x0000d51d
    d6c0:	0000d483 	.word	0x0000d483
    d6c4:	0000d4b5 	.word	0x0000d4b5

0000d6c8 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
    d6c8:	b480      	push	{r7}
    d6ca:	b083      	sub	sp, #12
    d6cc:	af00      	add	r7, sp, #0
    d6ce:	6078      	str	r0, [r7, #4]
    d6d0:	4a04      	ldr	r2, [pc, #16]	; (d6e4 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
    d6d2:	687b      	ldr	r3, [r7, #4]
    d6d4:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
    d6d6:	687b      	ldr	r3, [r7, #4]
    d6d8:	4618      	mov	r0, r3
    d6da:	370c      	adds	r7, #12
    d6dc:	46bd      	mov	sp, r7
    d6de:	bc80      	pop	{r7}
    d6e0:	4770      	bx	lr
    d6e2:	bf00      	nop
    d6e4:	000116e0 	.word	0x000116e0

0000d6e8 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
    d6e8:	b480      	push	{r7}
    d6ea:	b083      	sub	sp, #12
    d6ec:	af00      	add	r7, sp, #0
    d6ee:	6078      	str	r0, [r7, #4]
    d6f0:	4a04      	ldr	r2, [pc, #16]	; (d704 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
    d6f2:	687b      	ldr	r3, [r7, #4]
    d6f4:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
    d6f6:	687b      	ldr	r3, [r7, #4]
    d6f8:	4618      	mov	r0, r3
    d6fa:	370c      	adds	r7, #12
    d6fc:	46bd      	mov	sp, r7
    d6fe:	bc80      	pop	{r7}
    d700:	4770      	bx	lr
    d702:	bf00      	nop
    d704:	000116e0 	.word	0x000116e0

0000d708 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    d708:	b5b0      	push	{r4, r5, r7, lr}
    d70a:	b082      	sub	sp, #8
    d70c:	af00      	add	r7, sp, #0
    d70e:	6078      	str	r0, [r7, #4]
    d710:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    d712:	4b0a      	ldr	r3, [pc, #40]	; (d73c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
    d714:	6878      	ldr	r0, [r7, #4]
    d716:	4798      	blx	r3
    d718:	4604      	mov	r4, r0
    d71a:	460d      	mov	r5, r1
    d71c:	4b07      	ldr	r3, [pc, #28]	; (d73c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
    d71e:	6838      	ldr	r0, [r7, #0]
    d720:	4798      	blx	r3
    d722:	4602      	mov	r2, r0
    d724:	460b      	mov	r3, r1
    d726:	4620      	mov	r0, r4
    d728:	4629      	mov	r1, r5
    d72a:	4c05      	ldr	r4, [pc, #20]	; (d740 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
    d72c:	47a0      	blx	r4
    d72e:	4603      	mov	r3, r0
    d730:	460c      	mov	r4, r1
    }
    d732:	4618      	mov	r0, r3
    d734:	4621      	mov	r1, r4
    d736:	3708      	adds	r7, #8
    d738:	46bd      	mov	sp, r7
    d73a:	bdb0      	pop	{r4, r5, r7, pc}
    d73c:	000105f1 	.word	0x000105f1
    d740:	0000f205 	.word	0x0000f205

0000d744 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
    d744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d748:	b085      	sub	sp, #20
    d74a:	af00      	add	r7, sp, #0
    d74c:	6078      	str	r0, [r7, #4]
    d74e:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
    d750:	2300      	movs	r3, #0
    d752:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
    d754:	2300      	movs	r3, #0
    d756:	73bb      	strb	r3, [r7, #14]
    d758:	7bbb      	ldrb	r3, [r7, #14]
    d75a:	2b02      	cmp	r3, #2
    d75c:	d86d      	bhi.n	d83a <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
    d75e:	7bbb      	ldrb	r3, [r7, #14]
    d760:	f1c3 0402 	rsb	r4, r3, #2
    d764:	4b3c      	ldr	r3, [pc, #240]	; (d858 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
    d766:	6838      	ldr	r0, [r7, #0]
    d768:	4798      	blx	r3
    d76a:	4680      	mov	r8, r0
    d76c:	4689      	mov	r9, r1
    d76e:	7bbb      	ldrb	r3, [r7, #14]
    d770:	f1c3 0302 	rsb	r3, r3, #2
    d774:	4619      	mov	r1, r3
    d776:	200a      	movs	r0, #10
    d778:	4b38      	ldr	r3, [pc, #224]	; (d85c <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
    d77a:	4798      	blx	r3
    d77c:	4602      	mov	r2, r0
    d77e:	460b      	mov	r3, r1
    d780:	4d37      	ldr	r5, [pc, #220]	; (d860 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
    d782:	4640      	mov	r0, r8
    d784:	4649      	mov	r1, r9
    d786:	47a8      	blx	r5
    d788:	4602      	mov	r2, r0
    d78a:	460b      	mov	r3, r1
    d78c:	4611      	mov	r1, r2
    d78e:	461a      	mov	r2, r3
    d790:	4b34      	ldr	r3, [pc, #208]	; (d864 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
    d792:	4608      	mov	r0, r1
    d794:	4611      	mov	r1, r2
    d796:	4798      	blx	r3
    d798:	4603      	mov	r3, r0
    d79a:	b2da      	uxtb	r2, r3
    d79c:	f107 0310 	add.w	r3, r7, #16
    d7a0:	4423      	add	r3, r4
    d7a2:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
    d7a6:	7bbb      	ldrb	r3, [r7, #14]
    d7a8:	f1c3 0302 	rsb	r3, r3, #2
    d7ac:	f107 0210 	add.w	r2, r7, #16
    d7b0:	4413      	add	r3, r2
    d7b2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    d7b6:	461a      	mov	r2, r3
    d7b8:	4b2b      	ldr	r3, [pc, #172]	; (d868 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
    d7ba:	4610      	mov	r0, r2
    d7bc:	4798      	blx	r3
    d7be:	4605      	mov	r5, r0
    d7c0:	460e      	mov	r6, r1
    d7c2:	7bbb      	ldrb	r3, [r7, #14]
    d7c4:	f1c3 0302 	rsb	r3, r3, #2
    d7c8:	4619      	mov	r1, r3
    d7ca:	200a      	movs	r0, #10
    d7cc:	4b23      	ldr	r3, [pc, #140]	; (d85c <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
    d7ce:	4798      	blx	r3
    d7d0:	4602      	mov	r2, r0
    d7d2:	460b      	mov	r3, r1
    d7d4:	4c25      	ldr	r4, [pc, #148]	; (d86c <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
    d7d6:	4628      	mov	r0, r5
    d7d8:	4631      	mov	r1, r6
    d7da:	47a0      	blx	r4
    d7dc:	4603      	mov	r3, r0
    d7de:	460c      	mov	r4, r1
    d7e0:	461d      	mov	r5, r3
    d7e2:	4626      	mov	r6, r4
    d7e4:	4b1c      	ldr	r3, [pc, #112]	; (d858 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
    d7e6:	6838      	ldr	r0, [r7, #0]
    d7e8:	4798      	blx	r3
    d7ea:	4c21      	ldr	r4, [pc, #132]	; (d870 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
    d7ec:	462a      	mov	r2, r5
    d7ee:	4633      	mov	r3, r6
    d7f0:	47a0      	blx	r4
    d7f2:	4603      	mov	r3, r0
    d7f4:	460c      	mov	r4, r1
    d7f6:	4619      	mov	r1, r3
    d7f8:	4622      	mov	r2, r4
    d7fa:	4b1a      	ldr	r3, [pc, #104]	; (d864 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
    d7fc:	4608      	mov	r0, r1
    d7fe:	4611      	mov	r1, r2
    d800:	4798      	blx	r3
    d802:	4603      	mov	r3, r0
    d804:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
    d806:	7bbb      	ldrb	r3, [r7, #14]
    d808:	f1c3 0302 	rsb	r3, r3, #2
    d80c:	f107 0210 	add.w	r2, r7, #16
    d810:	4413      	add	r3, r2
    d812:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    d816:	461a      	mov	r2, r3
    d818:	7bbb      	ldrb	r3, [r7, #14]
    d81a:	4619      	mov	r1, r3
    d81c:	009b      	lsls	r3, r3, #2
    d81e:	1acb      	subs	r3, r1, r3
    d820:	3306      	adds	r3, #6
    d822:	fa02 f303 	lsl.w	r3, r2, r3
    d826:	b25a      	sxtb	r2, r3
    d828:	f997 300f 	ldrsb.w	r3, [r7, #15]
    d82c:	4313      	orrs	r3, r2
    d82e:	b25b      	sxtb	r3, r3
    d830:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
    d832:	7bbb      	ldrb	r3, [r7, #14]
    d834:	3301      	adds	r3, #1
    d836:	73bb      	strb	r3, [r7, #14]
    d838:	e78e      	b.n	d758 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
    d83a:	687b      	ldr	r3, [r7, #4]
    d83c:	681b      	ldr	r3, [r3, #0]
    d83e:	681b      	ldr	r3, [r3, #0]
    d840:	7bfa      	ldrb	r2, [r7, #15]
    d842:	4611      	mov	r1, r2
    d844:	6878      	ldr	r0, [r7, #4]
    d846:	4798      	blx	r3
    d848:	4603      	mov	r3, r0
    d84a:	73fb      	strb	r3, [r7, #15]
	return result;
    d84c:	7bfb      	ldrb	r3, [r7, #15]
	
}
    d84e:	4618      	mov	r0, r3
    d850:	3714      	adds	r7, #20
    d852:	46bd      	mov	sp, r7
    d854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d858:	000105d1 	.word	0x000105d1
    d85c:	0000d709 	.word	0x0000d709
    d860:	00010911 	.word	0x00010911
    d864:	00010c1d 	.word	0x00010c1d
    d868:	000105f1 	.word	0x000105f1
    d86c:	000106bd 	.word	0x000106bd
    d870:	00010355 	.word	0x00010355

0000d874 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
    d874:	b480      	push	{r7}
    d876:	b085      	sub	sp, #20
    d878:	af00      	add	r7, sp, #0
    d87a:	6078      	str	r0, [r7, #4]
    d87c:	460b      	mov	r3, r1
    d87e:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
    d880:	2300      	movs	r3, #0
    d882:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
    d884:	2300      	movs	r3, #0
    d886:	60bb      	str	r3, [r7, #8]
    d888:	68bb      	ldr	r3, [r7, #8]
    d88a:	2b07      	cmp	r3, #7
    d88c:	dc13      	bgt.n	d8b6 <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
    d88e:	7bfb      	ldrb	r3, [r7, #15]
    d890:	005b      	lsls	r3, r3, #1
    d892:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
    d894:	78fa      	ldrb	r2, [r7, #3]
    d896:	68bb      	ldr	r3, [r7, #8]
    d898:	fa42 f303 	asr.w	r3, r2, r3
    d89c:	b25b      	sxtb	r3, r3
    d89e:	f003 0301 	and.w	r3, r3, #1
    d8a2:	b25a      	sxtb	r2, r3
    d8a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    d8a8:	4313      	orrs	r3, r2
    d8aa:	b25b      	sxtb	r3, r3
    d8ac:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
    d8ae:	68bb      	ldr	r3, [r7, #8]
    d8b0:	3301      	adds	r3, #1
    d8b2:	60bb      	str	r3, [r7, #8]
    d8b4:	e7e8      	b.n	d888 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
    d8b6:	7bfb      	ldrb	r3, [r7, #15]
    d8b8:	4618      	mov	r0, r3
    d8ba:	3714      	adds	r7, #20
    d8bc:	46bd      	mov	sp, r7
    d8be:	bc80      	pop	{r7}
    d8c0:	4770      	bx	lr

0000d8c2 <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: public virtual ARINC_Conversions
    d8c2:	b480      	push	{r7}
    d8c4:	b083      	sub	sp, #12
    d8c6:	af00      	add	r7, sp, #0
    d8c8:	6078      	str	r0, [r7, #4]
    d8ca:	6039      	str	r1, [r7, #0]
    d8cc:	683b      	ldr	r3, [r7, #0]
    d8ce:	681a      	ldr	r2, [r3, #0]
    d8d0:	687b      	ldr	r3, [r7, #4]
    d8d2:	601a      	str	r2, [r3, #0]
    d8d4:	687b      	ldr	r3, [r7, #4]
    d8d6:	681b      	ldr	r3, [r3, #0]
    d8d8:	3b14      	subs	r3, #20
    d8da:	681b      	ldr	r3, [r3, #0]
    d8dc:	461a      	mov	r2, r3
    d8de:	687b      	ldr	r3, [r7, #4]
    d8e0:	4413      	add	r3, r2
    d8e2:	683a      	ldr	r2, [r7, #0]
    d8e4:	6852      	ldr	r2, [r2, #4]
    d8e6:	601a      	str	r2, [r3, #0]
    d8e8:	687b      	ldr	r3, [r7, #4]
    d8ea:	4618      	mov	r0, r3
    d8ec:	370c      	adds	r7, #12
    d8ee:	46bd      	mov	sp, r7
    d8f0:	bc80      	pop	{r7}
    d8f2:	4770      	bx	lr

0000d8f4 <_ZN15ARINC_InterfaceC2Ev>:
static void Receiver1Int(void){
	ptrARINCInterface->newMessageR1=true;
}

// default constructor
ARINC_Interface::ARINC_Interface()
    d8f4:	b580      	push	{r7, lr}
    d8f6:	b082      	sub	sp, #8
    d8f8:	af00      	add	r7, sp, #0
    d8fa:	6078      	str	r0, [r7, #4]
    d8fc:	6039      	str	r1, [r7, #0]
    d8fe:	687a      	ldr	r2, [r7, #4]
    d900:	683b      	ldr	r3, [r7, #0]
    d902:	3304      	adds	r3, #4
    d904:	4619      	mov	r1, r3
    d906:	4610      	mov	r0, r2
    d908:	4b11      	ldr	r3, [pc, #68]	; (d950 <_ZN15ARINC_InterfaceC2Ev+0x5c>)
    d90a:	4798      	blx	r3
    d90c:	683b      	ldr	r3, [r7, #0]
    d90e:	681a      	ldr	r2, [r3, #0]
    d910:	687b      	ldr	r3, [r7, #4]
    d912:	601a      	str	r2, [r3, #0]
    d914:	687b      	ldr	r3, [r7, #4]
    d916:	681b      	ldr	r3, [r3, #0]
    d918:	3b14      	subs	r3, #20
    d91a:	681b      	ldr	r3, [r3, #0]
    d91c:	461a      	mov	r2, r3
    d91e:	687b      	ldr	r3, [r7, #4]
    d920:	4413      	add	r3, r2
    d922:	683a      	ldr	r2, [r7, #0]
    d924:	68d2      	ldr	r2, [r2, #12]
    d926:	601a      	str	r2, [r3, #0]
    d928:	687b      	ldr	r3, [r7, #4]
    d92a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
    d92e:	4618      	mov	r0, r3
    d930:	4b08      	ldr	r3, [pc, #32]	; (d954 <_ZN15ARINC_InterfaceC2Ev+0x60>)
    d932:	4798      	blx	r3
    d934:	687b      	ldr	r3, [r7, #4]
    d936:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
    d93a:	4618      	mov	r0, r3
    d93c:	4b06      	ldr	r3, [pc, #24]	; (d958 <_ZN15ARINC_InterfaceC2Ev+0x64>)
    d93e:	4798      	blx	r3
{
	ptrARINCInterface=this;
    d940:	4a06      	ldr	r2, [pc, #24]	; (d95c <_ZN15ARINC_InterfaceC2Ev+0x68>)
    d942:	687b      	ldr	r3, [r7, #4]
    d944:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
    d946:	687b      	ldr	r3, [r7, #4]
    d948:	4618      	mov	r0, r3
    d94a:	3708      	adds	r7, #8
    d94c:	46bd      	mov	sp, r7
    d94e:	bd80      	pop	{r7, pc}
    d950:	0000d8c3 	.word	0x0000d8c3
    d954:	0000e4e5 	.word	0x0000e4e5
    d958:	0000db7d 	.word	0x0000db7d
    d95c:	200034f0 	.word	0x200034f0

0000d960 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
    d960:	b580      	push	{r7, lr}
    d962:	b082      	sub	sp, #8
    d964:	af00      	add	r7, sp, #0
    d966:	6078      	str	r0, [r7, #4]
    d968:	687b      	ldr	r3, [r7, #4]
    d96a:	4618      	mov	r0, r3
    d96c:	4b10      	ldr	r3, [pc, #64]	; (d9b0 <_ZN15ARINC_InterfaceC1Ev+0x50>)
    d96e:	4798      	blx	r3
    d970:	687b      	ldr	r3, [r7, #4]
    d972:	4a10      	ldr	r2, [pc, #64]	; (d9b4 <_ZN15ARINC_InterfaceC1Ev+0x54>)
    d974:	4611      	mov	r1, r2
    d976:	4618      	mov	r0, r3
    d978:	4b0f      	ldr	r3, [pc, #60]	; (d9b8 <_ZN15ARINC_InterfaceC1Ev+0x58>)
    d97a:	4798      	blx	r3
    d97c:	4a0f      	ldr	r2, [pc, #60]	; (d9bc <_ZN15ARINC_InterfaceC1Ev+0x5c>)
    d97e:	687b      	ldr	r3, [r7, #4]
    d980:	601a      	str	r2, [r3, #0]
    d982:	4a0e      	ldr	r2, [pc, #56]	; (d9bc <_ZN15ARINC_InterfaceC1Ev+0x5c>)
    d984:	687b      	ldr	r3, [r7, #4]
    d986:	601a      	str	r2, [r3, #0]
    d988:	687b      	ldr	r3, [r7, #4]
    d98a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
    d98e:	4618      	mov	r0, r3
    d990:	4b0b      	ldr	r3, [pc, #44]	; (d9c0 <_ZN15ARINC_InterfaceC1Ev+0x60>)
    d992:	4798      	blx	r3
    d994:	687b      	ldr	r3, [r7, #4]
    d996:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
    d99a:	4618      	mov	r0, r3
    d99c:	4b09      	ldr	r3, [pc, #36]	; (d9c4 <_ZN15ARINC_InterfaceC1Ev+0x64>)
    d99e:	4798      	blx	r3
	ptrARINCInterface=this;
    d9a0:	4a09      	ldr	r2, [pc, #36]	; (d9c8 <_ZN15ARINC_InterfaceC1Ev+0x68>)
    d9a2:	687b      	ldr	r3, [r7, #4]
    d9a4:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
    d9a6:	687b      	ldr	r3, [r7, #4]
    d9a8:	4618      	mov	r0, r3
    d9aa:	3708      	adds	r7, #8
    d9ac:	46bd      	mov	sp, r7
    d9ae:	bd80      	pop	{r7, pc}
    d9b0:	0000d6c9 	.word	0x0000d6c9
    d9b4:	00012114 	.word	0x00012114
    d9b8:	0000d8c3 	.word	0x0000d8c3
    d9bc:	000120fc 	.word	0x000120fc
    d9c0:	0000e4e5 	.word	0x0000e4e5
    d9c4:	0000db7d 	.word	0x0000db7d
    d9c8:	200034f0 	.word	0x200034f0

0000d9cc <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
    d9cc:	b580      	push	{r7, lr}
    d9ce:	b082      	sub	sp, #8
    d9d0:	af00      	add	r7, sp, #0
    d9d2:	6078      	str	r0, [r7, #4]
    d9d4:	6039      	str	r1, [r7, #0]
    d9d6:	683b      	ldr	r3, [r7, #0]
    d9d8:	681a      	ldr	r2, [r3, #0]
    d9da:	687b      	ldr	r3, [r7, #4]
    d9dc:	601a      	str	r2, [r3, #0]
    d9de:	687b      	ldr	r3, [r7, #4]
    d9e0:	681b      	ldr	r3, [r3, #0]
    d9e2:	3b14      	subs	r3, #20
    d9e4:	681b      	ldr	r3, [r3, #0]
    d9e6:	461a      	mov	r2, r3
    d9e8:	687b      	ldr	r3, [r7, #4]
    d9ea:	4413      	add	r3, r2
    d9ec:	683a      	ldr	r2, [r7, #0]
    d9ee:	68d2      	ldr	r2, [r2, #12]
    d9f0:	601a      	str	r2, [r3, #0]
    d9f2:	687b      	ldr	r3, [r7, #4]
    d9f4:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
    d9f8:	4618      	mov	r0, r3
    d9fa:	4b0a      	ldr	r3, [pc, #40]	; (da24 <_ZN15ARINC_InterfaceD2Ev+0x58>)
    d9fc:	4798      	blx	r3
    d9fe:	687b      	ldr	r3, [r7, #4]
    da00:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
    da04:	4618      	mov	r0, r3
    da06:	4b08      	ldr	r3, [pc, #32]	; (da28 <_ZN15ARINC_InterfaceD2Ev+0x5c>)
    da08:	4798      	blx	r3
    da0a:	687a      	ldr	r2, [r7, #4]
    da0c:	683b      	ldr	r3, [r7, #0]
    da0e:	3304      	adds	r3, #4
    da10:	4619      	mov	r1, r3
    da12:	4610      	mov	r0, r2
    da14:	4b05      	ldr	r3, [pc, #20]	; (da2c <_ZN15ARINC_InterfaceD2Ev+0x60>)
    da16:	4798      	blx	r3
{
} //~ARINC_Interface
    da18:	687b      	ldr	r3, [r7, #4]
    da1a:	4618      	mov	r0, r3
    da1c:	3708      	adds	r7, #8
    da1e:	46bd      	mov	sp, r7
    da20:	bd80      	pop	{r7, pc}
    da22:	bf00      	nop
    da24:	0000db9d 	.word	0x0000db9d
    da28:	0000e555 	.word	0x0000e555
    da2c:	0000dbbd 	.word	0x0000dbbd

0000da30 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
    da30:	b580      	push	{r7, lr}
    da32:	b082      	sub	sp, #8
    da34:	af00      	add	r7, sp, #0
    da36:	6078      	str	r0, [r7, #4]
    da38:	4a10      	ldr	r2, [pc, #64]	; (da7c <_ZN15ARINC_InterfaceD1Ev+0x4c>)
    da3a:	687b      	ldr	r3, [r7, #4]
    da3c:	601a      	str	r2, [r3, #0]
    da3e:	4a0f      	ldr	r2, [pc, #60]	; (da7c <_ZN15ARINC_InterfaceD1Ev+0x4c>)
    da40:	687b      	ldr	r3, [r7, #4]
    da42:	601a      	str	r2, [r3, #0]
    da44:	687b      	ldr	r3, [r7, #4]
    da46:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
    da4a:	4618      	mov	r0, r3
    da4c:	4b0c      	ldr	r3, [pc, #48]	; (da80 <_ZN15ARINC_InterfaceD1Ev+0x50>)
    da4e:	4798      	blx	r3
    da50:	687b      	ldr	r3, [r7, #4]
    da52:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
    da56:	4618      	mov	r0, r3
    da58:	4b0a      	ldr	r3, [pc, #40]	; (da84 <_ZN15ARINC_InterfaceD1Ev+0x54>)
    da5a:	4798      	blx	r3
    da5c:	687b      	ldr	r3, [r7, #4]
    da5e:	4a0a      	ldr	r2, [pc, #40]	; (da88 <_ZN15ARINC_InterfaceD1Ev+0x58>)
    da60:	4611      	mov	r1, r2
    da62:	4618      	mov	r0, r3
    da64:	4b09      	ldr	r3, [pc, #36]	; (da8c <_ZN15ARINC_InterfaceD1Ev+0x5c>)
    da66:	4798      	blx	r3
    da68:	687b      	ldr	r3, [r7, #4]
    da6a:	4618      	mov	r0, r3
    da6c:	4b08      	ldr	r3, [pc, #32]	; (da90 <_ZN15ARINC_InterfaceD1Ev+0x60>)
    da6e:	4798      	blx	r3
} //~ARINC_Interface
    da70:	687b      	ldr	r3, [r7, #4]
    da72:	4618      	mov	r0, r3
    da74:	3708      	adds	r7, #8
    da76:	46bd      	mov	sp, r7
    da78:	bd80      	pop	{r7, pc}
    da7a:	bf00      	nop
    da7c:	000120fc 	.word	0x000120fc
    da80:	0000db9d 	.word	0x0000db9d
    da84:	0000e555 	.word	0x0000e555
    da88:	00012114 	.word	0x00012114
    da8c:	0000dbbd 	.word	0x0000dbbd
    da90:	0000d6e9 	.word	0x0000d6e9

0000da94 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
    da94:	b580      	push	{r7, lr}
    da96:	b082      	sub	sp, #8
    da98:	af00      	add	r7, sp, #0
    da9a:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
    da9c:	6878      	ldr	r0, [r7, #4]
    da9e:	4b06      	ldr	r3, [pc, #24]	; (dab8 <_ZN15ARINC_InterfaceD0Ev+0x24>)
    daa0:	4798      	blx	r3
    daa2:	f44f 7143 	mov.w	r1, #780	; 0x30c
    daa6:	6878      	ldr	r0, [r7, #4]
    daa8:	4b04      	ldr	r3, [pc, #16]	; (dabc <_ZN15ARINC_InterfaceD0Ev+0x28>)
    daaa:	4798      	blx	r3
    daac:	687b      	ldr	r3, [r7, #4]
    daae:	4618      	mov	r0, r3
    dab0:	3708      	adds	r7, #8
    dab2:	46bd      	mov	sp, r7
    dab4:	bd80      	pop	{r7, pc}
    dab6:	bf00      	nop
    dab8:	0000da31 	.word	0x0000da31
    dabc:	0000f201 	.word	0x0000f201

0000dac0 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
    dac0:	b480      	push	{r7}
    dac2:	b085      	sub	sp, #20
    dac4:	af00      	add	r7, sp, #0
    dac6:	6078      	str	r0, [r7, #4]
    dac8:	460b      	mov	r3, r1
    daca:	70fb      	strb	r3, [r7, #3]
	uint32_t *data;
	uint8_t	j;
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
    dacc:	2300      	movs	r3, #0
    dace:	73fb      	strb	r3, [r7, #15]
    dad0:	7bfb      	ldrb	r3, [r7, #15]
    dad2:	2b3f      	cmp	r3, #63	; 0x3f
    dad4:	dc1e      	bgt.n	db14 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x54>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
    dad6:	687b      	ldr	r3, [r7, #4]
    dad8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
    dadc:	7bfb      	ldrb	r3, [r7, #15]
    dade:	4413      	add	r3, r2
    dae0:	b2db      	uxtb	r3, r3
    dae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dae6:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
    dae8:	7bbb      	ldrb	r3, [r7, #14]
    daea:	687a      	ldr	r2, [r7, #4]
    daec:	009b      	lsls	r3, r3, #2
    daee:	4413      	add	r3, r2
    daf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    daf4:	78fa      	ldrb	r2, [r7, #3]
    daf6:	429a      	cmp	r2, r3
    daf8:	d108      	bne.n	db0c <_ZN15ARINC_Interface15ReadBufferLabelEh+0x4c>
		{
			data=(uint32_t*)receiverBuffer[j];
    dafa:	7bbb      	ldrb	r3, [r7, #14]
    dafc:	3310      	adds	r3, #16
    dafe:	009b      	lsls	r3, r3, #2
    db00:	687a      	ldr	r2, [r7, #4]
    db02:	4413      	add	r3, r2
    db04:	60bb      	str	r3, [r7, #8]
			return *data;
    db06:	68bb      	ldr	r3, [r7, #8]
    db08:	681b      	ldr	r3, [r3, #0]
    db0a:	e004      	b.n	db16 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x56>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
    db0c:	7bfb      	ldrb	r3, [r7, #15]
    db0e:	3301      	adds	r3, #1
    db10:	73fb      	strb	r3, [r7, #15]
    db12:	e7dd      	b.n	dad0 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
    db14:	2300      	movs	r3, #0
}
    db16:	4618      	mov	r0, r3
    db18:	3714      	adds	r7, #20
    db1a:	46bd      	mov	sp, r7
    db1c:	bc80      	pop	{r7}
    db1e:	4770      	bx	lr

0000db20 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

    db20:	b580      	push	{r7, lr}
    db22:	b082      	sub	sp, #8
    db24:	af00      	add	r7, sp, #0
    db26:	6078      	str	r0, [r7, #4]
    db28:	6039      	str	r1, [r7, #0]
    db2a:	687b      	ldr	r3, [r7, #4]
    db2c:	2b01      	cmp	r3, #1
    db2e:	d10c      	bne.n	db4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    db30:	683b      	ldr	r3, [r7, #0]
    db32:	f64f 72ff 	movw	r2, #65535	; 0xffff
    db36:	4293      	cmp	r3, r2
    db38:	d107      	bne.n	db4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    db3a:	4806      	ldr	r0, [pc, #24]	; (db54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    db3c:	4b06      	ldr	r3, [pc, #24]	; (db58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    db3e:	4798      	blx	r3
    db40:	4a06      	ldr	r2, [pc, #24]	; (db5c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    db42:	4907      	ldr	r1, [pc, #28]	; (db60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    db44:	4803      	ldr	r0, [pc, #12]	; (db54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    db46:	4b07      	ldr	r3, [pc, #28]	; (db64 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    db48:	4798      	blx	r3
    db4a:	bf00      	nop
    db4c:	3708      	adds	r7, #8
    db4e:	46bd      	mov	sp, r7
    db50:	bd80      	pop	{r7, pc}
    db52:	bf00      	nop
    db54:	200034f4 	.word	0x200034f4
    db58:	0000d961 	.word	0x0000d961
    db5c:	20000000 	.word	0x20000000
    db60:	0000da31 	.word	0x0000da31
    db64:	0000f1f5 	.word	0x0000f1f5

0000db68 <_GLOBAL__sub_I_HexSymbols>:
    db68:	b580      	push	{r7, lr}
    db6a:	af00      	add	r7, sp, #0
    db6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    db70:	2001      	movs	r0, #1
    db72:	4b01      	ldr	r3, [pc, #4]	; (db78 <_GLOBAL__sub_I_HexSymbols+0x10>)
    db74:	4798      	blx	r3
    db76:	bd80      	pop	{r7, pc}
    db78:	0000db21 	.word	0x0000db21

0000db7c <_ZN15Holt_3593_ClassC1Ev>:


#include "Holt_3593_Class.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
    db7c:	b580      	push	{r7, lr}
    db7e:	b082      	sub	sp, #8
    db80:	af00      	add	r7, sp, #0
    db82:	6078      	str	r0, [r7, #4]
    db84:	687b      	ldr	r3, [r7, #4]
    db86:	4618      	mov	r0, r3
    db88:	4b03      	ldr	r3, [pc, #12]	; (db98 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
    db8a:	4798      	blx	r3
{
} //Holt_3593_Class
    db8c:	687b      	ldr	r3, [r7, #4]
    db8e:	4618      	mov	r0, r3
    db90:	3708      	adds	r7, #8
    db92:	46bd      	mov	sp, r7
    db94:	bd80      	pop	{r7, pc}
    db96:	bf00      	nop
    db98:	0000dfa1 	.word	0x0000dfa1

0000db9c <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
    db9c:	b580      	push	{r7, lr}
    db9e:	b082      	sub	sp, #8
    dba0:	af00      	add	r7, sp, #0
    dba2:	6078      	str	r0, [r7, #4]
    dba4:	687b      	ldr	r3, [r7, #4]
    dba6:	4618      	mov	r0, r3
    dba8:	4b03      	ldr	r3, [pc, #12]	; (dbb8 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
    dbaa:	4798      	blx	r3
{
} //~Holt_3593_Class
    dbac:	687b      	ldr	r3, [r7, #4]
    dbae:	4618      	mov	r0, r3
    dbb0:	3708      	adds	r7, #8
    dbb2:	46bd      	mov	sp, r7
    dbb4:	bd80      	pop	{r7, pc}
    dbb6:	bf00      	nop
    dbb8:	0000dfc1 	.word	0x0000dfc1

0000dbbc <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"


// virtual destructor
Protocol_Class::~Protocol_Class()
    dbbc:	b480      	push	{r7}
    dbbe:	b083      	sub	sp, #12
    dbc0:	af00      	add	r7, sp, #0
    dbc2:	6078      	str	r0, [r7, #4]
    dbc4:	6039      	str	r1, [r7, #0]
    dbc6:	683b      	ldr	r3, [r7, #0]
    dbc8:	681a      	ldr	r2, [r3, #0]
    dbca:	687b      	ldr	r3, [r7, #4]
    dbcc:	601a      	str	r2, [r3, #0]
    dbce:	687b      	ldr	r3, [r7, #4]
    dbd0:	681b      	ldr	r3, [r3, #0]
    dbd2:	3b14      	subs	r3, #20
    dbd4:	681b      	ldr	r3, [r3, #0]
    dbd6:	461a      	mov	r2, r3
    dbd8:	687b      	ldr	r3, [r7, #4]
    dbda:	4413      	add	r3, r2
    dbdc:	683a      	ldr	r2, [r7, #0]
    dbde:	6852      	ldr	r2, [r2, #4]
    dbe0:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
    dbe2:	687b      	ldr	r3, [r7, #4]
    dbe4:	4618      	mov	r0, r3
    dbe6:	370c      	adds	r7, #12
    dbe8:	46bd      	mov	sp, r7
    dbea:	bc80      	pop	{r7}
    dbec:	4770      	bx	lr

0000dbee <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    dbee:	b480      	push	{r7}
    dbf0:	b083      	sub	sp, #12
    dbf2:	af00      	add	r7, sp, #0
    dbf4:	6078      	str	r0, [r7, #4]
    return (void *)0;
    dbf6:	2300      	movs	r3, #0
	}
    dbf8:	4618      	mov	r0, r3
    dbfa:	370c      	adds	r7, #12
    dbfc:	46bd      	mov	sp, r7
    dbfe:	bc80      	pop	{r7}
    dc00:	4770      	bx	lr

0000dc02 <free>:
//............................................................................
extern "C" void free(void *)
	{
    dc02:	b480      	push	{r7}
    dc04:	b083      	sub	sp, #12
    dc06:	af00      	add	r7, sp, #0
    dc08:	6078      	str	r0, [r7, #4]
	}
    dc0a:	bf00      	nop
    dc0c:	370c      	adds	r7, #12
    dc0e:	46bd      	mov	sp, r7
    dc10:	bc80      	pop	{r7}
    dc12:	4770      	bx	lr

0000dc14 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    dc14:	b480      	push	{r7}
    dc16:	af00      	add	r7, sp, #0
		}
    dc18:	bf00      	nop
    dc1a:	46bd      	mov	sp, r7
    dc1c:	bc80      	pop	{r7}
    dc1e:	4770      	bx	lr

0000dc20 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
    dc20:	b580      	push	{r7, lr}
    dc22:	b082      	sub	sp, #8
    dc24:	af00      	add	r7, sp, #0
    dc26:	6078      	str	r0, [r7, #4]
	free(p);
    dc28:	6878      	ldr	r0, [r7, #4]
    dc2a:	4b03      	ldr	r3, [pc, #12]	; (dc38 <_ZdlPv+0x18>)
    dc2c:	4798      	blx	r3
	}
    dc2e:	bf00      	nop
    dc30:	3708      	adds	r7, #8
    dc32:	46bd      	mov	sp, r7
    dc34:	bd80      	pop	{r7, pc}
    dc36:	bf00      	nop
    dc38:	0000dc03 	.word	0x0000dc03

0000dc3c <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
    dc3c:	b480      	push	{r7}
    dc3e:	b083      	sub	sp, #12
    dc40:	af00      	add	r7, sp, #0
    dc42:	6078      	str	r0, [r7, #4]
    dc44:	687b      	ldr	r3, [r7, #4]
    dc46:	4618      	mov	r0, r3
    dc48:	370c      	adds	r7, #12
    dc4a:	46bd      	mov	sp, r7
    dc4c:	bc80      	pop	{r7}
    dc4e:	4770      	bx	lr

0000dc50 <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
    dc50:	b480      	push	{r7}
    dc52:	b083      	sub	sp, #12
    dc54:	af00      	add	r7, sp, #0
    dc56:	6078      	str	r0, [r7, #4]
    dc58:	687b      	ldr	r3, [r7, #4]
    dc5a:	4618      	mov	r0, r3
    dc5c:	370c      	adds	r7, #12
    dc5e:	46bd      	mov	sp, r7
    dc60:	bc80      	pop	{r7}
    dc62:	4770      	bx	lr

0000dc64 <_Z41__static_initialization_and_destruction_0ii>:
void Diagnostics::_printSupportLink(void) {
	usb.print(F("If this does not help resolve/clarify this issue, "));
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
}

Diagnostics diagnostics; // default instantiation of Diagnostics object
    dc64:	b580      	push	{r7, lr}
    dc66:	b082      	sub	sp, #8
    dc68:	af00      	add	r7, sp, #0
    dc6a:	6078      	str	r0, [r7, #4]
    dc6c:	6039      	str	r1, [r7, #0]
    dc6e:	687b      	ldr	r3, [r7, #4]
    dc70:	2b01      	cmp	r3, #1
    dc72:	d10c      	bne.n	dc8e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    dc74:	683b      	ldr	r3, [r7, #0]
    dc76:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dc7a:	4293      	cmp	r3, r2
    dc7c:	d107      	bne.n	dc8e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    dc7e:	4806      	ldr	r0, [pc, #24]	; (dc98 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dc80:	4b06      	ldr	r3, [pc, #24]	; (dc9c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dc82:	4798      	blx	r3
    dc84:	4a06      	ldr	r2, [pc, #24]	; (dca0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    dc86:	4907      	ldr	r1, [pc, #28]	; (dca4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    dc88:	4803      	ldr	r0, [pc, #12]	; (dc98 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dc8a:	4b07      	ldr	r3, [pc, #28]	; (dca8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    dc8c:	4798      	blx	r3
    dc8e:	bf00      	nop
    dc90:	3708      	adds	r7, #8
    dc92:	46bd      	mov	sp, r7
    dc94:	bd80      	pop	{r7, pc}
    dc96:	bf00      	nop
    dc98:	20003800 	.word	0x20003800
    dc9c:	0000dc3d 	.word	0x0000dc3d
    dca0:	20000000 	.word	0x20000000
    dca4:	0000dc51 	.word	0x0000dc51
    dca8:	0000f1f5 	.word	0x0000f1f5

0000dcac <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
    dcac:	b580      	push	{r7, lr}
    dcae:	af00      	add	r7, sp, #0
    dcb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dcb4:	2001      	movs	r0, #1
    dcb6:	4b01      	ldr	r3, [pc, #4]	; (dcbc <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
    dcb8:	4798      	blx	r3
    dcba:	bd80      	pop	{r7, pc}
    dcbc:	0000dc65 	.word	0x0000dc65

0000dcc0 <_ZN18EventHandler_ClassC1Ev>:
	ptrEventHandlerClass->eventTimeout=true;
}


// default constructor
EventHandler_Class::EventHandler_Class()
    dcc0:	b480      	push	{r7}
    dcc2:	b083      	sub	sp, #12
    dcc4:	af00      	add	r7, sp, #0
    dcc6:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
    dcc8:	4a04      	ldr	r2, [pc, #16]	; (dcdc <_ZN18EventHandler_ClassC1Ev+0x1c>)
    dcca:	687b      	ldr	r3, [r7, #4]
    dccc:	6013      	str	r3, [r2, #0]
} //EventHandler_Class
    dcce:	687b      	ldr	r3, [r7, #4]
    dcd0:	4618      	mov	r0, r3
    dcd2:	370c      	adds	r7, #12
    dcd4:	46bd      	mov	sp, r7
    dcd6:	bc80      	pop	{r7}
    dcd8:	4770      	bx	lr
    dcda:	bf00      	nop
    dcdc:	2000480c 	.word	0x2000480c

0000dce0 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
    dce0:	b480      	push	{r7}
    dce2:	b083      	sub	sp, #12
    dce4:	af00      	add	r7, sp, #0
    dce6:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
    dce8:	4a04      	ldr	r2, [pc, #16]	; (dcfc <_ZN18EventHandler_ClassD1Ev+0x1c>)
    dcea:	687b      	ldr	r3, [r7, #4]
    dcec:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
    dcee:	687b      	ldr	r3, [r7, #4]
    dcf0:	4618      	mov	r0, r3
    dcf2:	370c      	adds	r7, #12
    dcf4:	46bd      	mov	sp, r7
    dcf6:	bc80      	pop	{r7}
    dcf8:	4770      	bx	lr
    dcfa:	bf00      	nop
    dcfc:	2000480c 	.word	0x2000480c

0000dd00 <_Z41__static_initialization_and_destruction_0ii>:
	return	(uint32_t)eventsInUse;
	
}


    dd00:	b5b0      	push	{r4, r5, r7, lr}
    dd02:	b082      	sub	sp, #8
    dd04:	af00      	add	r7, sp, #0
    dd06:	6078      	str	r0, [r7, #4]
    dd08:	6039      	str	r1, [r7, #0]
    dd0a:	687b      	ldr	r3, [r7, #4]
    dd0c:	2b01      	cmp	r3, #1
    dd0e:	d117      	bne.n	dd40 <_Z41__static_initialization_and_destruction_0ii+0x40>
    dd10:	683b      	ldr	r3, [r7, #0]
    dd12:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dd16:	4293      	cmp	r3, r2
    dd18:	d112      	bne.n	dd40 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
    dd1a:	4b0b      	ldr	r3, [pc, #44]	; (dd48 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    dd1c:	24ff      	movs	r4, #255	; 0xff
    dd1e:	461d      	mov	r5, r3
    dd20:	2c00      	cmp	r4, #0
    dd22:	db05      	blt.n	dd30 <_Z41__static_initialization_and_destruction_0ii+0x30>
    dd24:	4628      	mov	r0, r5
    dd26:	4b09      	ldr	r3, [pc, #36]	; (dd4c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    dd28:	4798      	blx	r3
    dd2a:	3510      	adds	r5, #16
    dd2c:	3c01      	subs	r4, #1
    dd2e:	e7f7      	b.n	dd20 <_Z41__static_initialization_and_destruction_0ii+0x20>
    dd30:	4807      	ldr	r0, [pc, #28]	; (dd50 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    dd32:	4b08      	ldr	r3, [pc, #32]	; (dd54 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    dd34:	4798      	blx	r3
    dd36:	4a08      	ldr	r2, [pc, #32]	; (dd58 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    dd38:	4908      	ldr	r1, [pc, #32]	; (dd5c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    dd3a:	4805      	ldr	r0, [pc, #20]	; (dd50 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    dd3c:	4b08      	ldr	r3, [pc, #32]	; (dd60 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    dd3e:	4798      	blx	r3
    dd40:	bf00      	nop
    dd42:	3708      	adds	r7, #8
    dd44:	46bd      	mov	sp, r7
    dd46:	bdb0      	pop	{r4, r5, r7, pc}
    dd48:	20003804 	.word	0x20003804
    dd4c:	00000be5 	.word	0x00000be5
    dd50:	2000481c 	.word	0x2000481c
    dd54:	0000dcc1 	.word	0x0000dcc1
    dd58:	20000000 	.word	0x20000000
    dd5c:	0000dce1 	.word	0x0000dce1
    dd60:	0000f1f5 	.word	0x0000f1f5

0000dd64 <_GLOBAL__sub_I_maxEventCount>:
    dd64:	b580      	push	{r7, lr}
    dd66:	af00      	add	r7, sp, #0
    dd68:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd6c:	2001      	movs	r0, #1
    dd6e:	4b01      	ldr	r3, [pc, #4]	; (dd74 <_GLOBAL__sub_I_maxEventCount+0x10>)
    dd70:	4798      	blx	r3
    dd72:	bd80      	pop	{r7, pc}
    dd74:	0000dd01 	.word	0x0000dd01

0000dd78 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc>:

MCP23017_Class::MCP23017_Class()
{
	ptrMCP23017Class=this;
} //AT24MAC_Class
MCP23017_Class::MCP23017_Class(i2c_m_async_desc *i2c)
    dd78:	b580      	push	{r7, lr}
    dd7a:	b082      	sub	sp, #8
    dd7c:	af00      	add	r7, sp, #0
    dd7e:	6078      	str	r0, [r7, #4]
    dd80:	6039      	str	r1, [r7, #0]
    dd82:	687b      	ldr	r3, [r7, #4]
    dd84:	3308      	adds	r3, #8
    dd86:	4618      	mov	r0, r3
    dd88:	4b06      	ldr	r3, [pc, #24]	; (dda4 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x2c>)
    dd8a:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
    dd8c:	687b      	ldr	r3, [r7, #4]
    dd8e:	683a      	ldr	r2, [r7, #0]
    dd90:	605a      	str	r2, [r3, #4]
	ptrMCP23017Class=this;
    dd92:	4a05      	ldr	r2, [pc, #20]	; (dda8 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x30>)
    dd94:	687b      	ldr	r3, [r7, #4]
    dd96:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
    dd98:	687b      	ldr	r3, [r7, #4]
    dd9a:	4618      	mov	r0, r3
    dd9c:	3708      	adds	r7, #8
    dd9e:	46bd      	mov	sp, r7
    dda0:	bd80      	pop	{r7, pc}
    dda2:	bf00      	nop
    dda4:	0000f1b9 	.word	0x0000f1b9
    dda8:	20004838 	.word	0x20004838

0000ddac <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
    ddac:	b580      	push	{r7, lr}
    ddae:	b082      	sub	sp, #8
    ddb0:	af00      	add	r7, sp, #0
    ddb2:	6078      	str	r0, [r7, #4]
    ddb4:	687b      	ldr	r3, [r7, #4]
    ddb6:	3308      	adds	r3, #8
    ddb8:	4618      	mov	r0, r3
    ddba:	4b03      	ldr	r3, [pc, #12]	; (ddc8 <_ZN14MCP23017_ClassD1Ev+0x1c>)
    ddbc:	4798      	blx	r3
{
} //~AT24MAC_Class
    ddbe:	687b      	ldr	r3, [r7, #4]
    ddc0:	4618      	mov	r0, r3
    ddc2:	3708      	adds	r7, #8
    ddc4:	46bd      	mov	sp, r7
    ddc6:	bd80      	pop	{r7, pc}
    ddc8:	0000f1e1 	.word	0x0000f1e1

0000ddcc <_Z41__static_initialization_and_destruction_0ii>:
	{
		isOK=false;
	}
	return isOK;
}
    ddcc:	b580      	push	{r7, lr}
    ddce:	b082      	sub	sp, #8
    ddd0:	af00      	add	r7, sp, #0
    ddd2:	6078      	str	r0, [r7, #4]
    ddd4:	6039      	str	r1, [r7, #0]
    ddd6:	687b      	ldr	r3, [r7, #4]
    ddd8:	2b01      	cmp	r3, #1
    ddda:	d10d      	bne.n	ddf8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    dddc:	683b      	ldr	r3, [r7, #0]
    ddde:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dde2:	4293      	cmp	r3, r2
    dde4:	d108      	bne.n	ddf8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    dde6:	4906      	ldr	r1, [pc, #24]	; (de00 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    dde8:	4806      	ldr	r0, [pc, #24]	; (de04 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    ddea:	4b07      	ldr	r3, [pc, #28]	; (de08 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    ddec:	4798      	blx	r3
    ddee:	4a07      	ldr	r2, [pc, #28]	; (de0c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    ddf0:	4907      	ldr	r1, [pc, #28]	; (de10 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    ddf2:	4804      	ldr	r0, [pc, #16]	; (de04 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    ddf4:	4b07      	ldr	r3, [pc, #28]	; (de14 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    ddf6:	4798      	blx	r3
    ddf8:	bf00      	nop
    ddfa:	3708      	adds	r7, #8
    ddfc:	46bd      	mov	sp, r7
    ddfe:	bd80      	pop	{r7, pc}
    de00:	20004f2c 	.word	0x20004f2c
    de04:	2000483c 	.word	0x2000483c
    de08:	0000dd79 	.word	0x0000dd79
    de0c:	20000000 	.word	0x20000000
    de10:	0000ddad 	.word	0x0000ddad
    de14:	0000f1f5 	.word	0x0000f1f5

0000de18 <_GLOBAL__sub_I_ptrMCP23017Class>:
    de18:	b580      	push	{r7, lr}
    de1a:	af00      	add	r7, sp, #0
    de1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de20:	2001      	movs	r0, #1
    de22:	4b01      	ldr	r3, [pc, #4]	; (de28 <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
    de24:	4798      	blx	r3
    de26:	bd80      	pop	{r7, pc}
    de28:	0000ddcd 	.word	0x0000ddcd

0000de2c <_ZN13LTC2983_ClassD1Ev>:
LTC2983_Class::LTC2983_Class()
{
} //LTC2983_Class

// default destructor
LTC2983_Class::~LTC2983_Class()
    de2c:	b580      	push	{r7, lr}
    de2e:	b082      	sub	sp, #8
    de30:	af00      	add	r7, sp, #0
    de32:	6078      	str	r0, [r7, #4]
    de34:	687b      	ldr	r3, [r7, #4]
    de36:	4618      	mov	r0, r3
    de38:	4b03      	ldr	r3, [pc, #12]	; (de48 <_ZN13LTC2983_ClassD1Ev+0x1c>)
    de3a:	4798      	blx	r3
{
} //~LTC2983_Class
    de3c:	687b      	ldr	r3, [r7, #4]
    de3e:	4618      	mov	r0, r3
    de40:	3708      	adds	r7, #8
    de42:	46bd      	mov	sp, r7
    de44:	bd80      	pop	{r7, pc}
    de46:	bf00      	nop
    de48:	0000defd 	.word	0x0000defd

0000de4c <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor>:

LTC2983_Class::LTC2983_Class(spi_m_async_descriptor *SPI_LTC){
    de4c:	b580      	push	{r7, lr}
    de4e:	b082      	sub	sp, #8
    de50:	af00      	add	r7, sp, #0
    de52:	6078      	str	r0, [r7, #4]
    de54:	6039      	str	r1, [r7, #0]
    de56:	687b      	ldr	r3, [r7, #4]
    de58:	4618      	mov	r0, r3
    de5a:	4b06      	ldr	r3, [pc, #24]	; (de74 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x28>)
    de5c:	4798      	blx	r3
	ptrLTCClass=this;
    de5e:	4a06      	ldr	r2, [pc, #24]	; (de78 <_ZN13LTC2983_ClassC1EP22spi_m_async_descriptor+0x2c>)
    de60:	687b      	ldr	r3, [r7, #4]
    de62:	6013      	str	r3, [r2, #0]
	SPIA=SPI_LTC;
    de64:	687b      	ldr	r3, [r7, #4]
    de66:	683a      	ldr	r2, [r7, #0]
    de68:	615a      	str	r2, [r3, #20]
	};
    de6a:	687b      	ldr	r3, [r7, #4]
    de6c:	4618      	mov	r0, r3
    de6e:	3708      	adds	r7, #8
    de70:	46bd      	mov	sp, r7
    de72:	bd80      	pop	{r7, pc}
    de74:	0000dedd 	.word	0x0000dedd
    de78:	20004860 	.word	0x20004860

0000de7c <_Z41__static_initialization_and_destruction_0ii>:
	}
	isOK=process_finished==1?true:false;
	return	isOK;
	}

LTC2983_Class	temperatures(&SPI_TEMP);
    de7c:	b580      	push	{r7, lr}
    de7e:	b082      	sub	sp, #8
    de80:	af00      	add	r7, sp, #0
    de82:	6078      	str	r0, [r7, #4]
    de84:	6039      	str	r1, [r7, #0]
    de86:	687b      	ldr	r3, [r7, #4]
    de88:	2b01      	cmp	r3, #1
    de8a:	d10d      	bne.n	dea8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    de8c:	683b      	ldr	r3, [r7, #0]
    de8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    de92:	4293      	cmp	r3, r2
    de94:	d108      	bne.n	dea8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    de96:	4906      	ldr	r1, [pc, #24]	; (deb0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    de98:	4806      	ldr	r0, [pc, #24]	; (deb4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    de9a:	4b07      	ldr	r3, [pc, #28]	; (deb8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    de9c:	4798      	blx	r3
    de9e:	4a07      	ldr	r2, [pc, #28]	; (debc <_Z41__static_initialization_and_destruction_0ii+0x40>)
    dea0:	4907      	ldr	r1, [pc, #28]	; (dec0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    dea2:	4804      	ldr	r0, [pc, #16]	; (deb4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    dea4:	4b07      	ldr	r3, [pc, #28]	; (dec4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    dea6:	4798      	blx	r3
    dea8:	bf00      	nop
    deaa:	3708      	adds	r7, #8
    deac:	46bd      	mov	sp, r7
    deae:	bd80      	pop	{r7, pc}
    deb0:	20004e10 	.word	0x20004e10
    deb4:	20004864 	.word	0x20004864
    deb8:	0000de4d 	.word	0x0000de4d
    debc:	20000000 	.word	0x20000000
    dec0:	0000de2d 	.word	0x0000de2d
    dec4:	0000f1f5 	.word	0x0000f1f5

0000dec8 <_GLOBAL__sub_I_ptrLTCClass>:
    dec8:	b580      	push	{r7, lr}
    deca:	af00      	add	r7, sp, #0
    decc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ded0:	2001      	movs	r0, #1
    ded2:	4b01      	ldr	r3, [pc, #4]	; (ded8 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
    ded4:	4798      	blx	r3
    ded6:	bd80      	pop	{r7, pc}
    ded8:	0000de7d 	.word	0x0000de7d

0000dedc <_ZN6LT_SPIC1Ev>:

SPI_Asyn_Class LT_SPI::spiTemp;


// default constructor
LT_SPI::LT_SPI()
    dedc:	b480      	push	{r7}
    dede:	b083      	sub	sp, #12
    dee0:	af00      	add	r7, sp, #0
    dee2:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
    dee4:	4a04      	ldr	r2, [pc, #16]	; (def8 <_ZN6LT_SPIC1Ev+0x1c>)
    dee6:	687b      	ldr	r3, [r7, #4]
    dee8:	6013      	str	r3, [r2, #0]
} //LT_SPI
    deea:	687b      	ldr	r3, [r7, #4]
    deec:	4618      	mov	r0, r3
    deee:	370c      	adds	r7, #12
    def0:	46bd      	mov	sp, r7
    def2:	bc80      	pop	{r7}
    def4:	4770      	bx	lr
    def6:	bf00      	nop
    def8:	2000489c 	.word	0x2000489c

0000defc <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
    defc:	b480      	push	{r7}
    defe:	b083      	sub	sp, #12
    df00:	af00      	add	r7, sp, #0
    df02:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
    df04:	687b      	ldr	r3, [r7, #4]
    df06:	4618      	mov	r0, r3
    df08:	370c      	adds	r7, #12
    df0a:	46bd      	mov	sp, r7
    df0c:	bc80      	pop	{r7}
    df0e:	4770      	bx	lr

0000df10 <_Z41__static_initialization_and_destruction_0ii>:
{
	uint8_t rx;
	spiTemp.read(&rx,1);
	return	(int8_t)rx;

}
    df10:	b580      	push	{r7, lr}
    df12:	b082      	sub	sp, #8
    df14:	af00      	add	r7, sp, #0
    df16:	6078      	str	r0, [r7, #4]
    df18:	6039      	str	r1, [r7, #0]
    df1a:	687b      	ldr	r3, [r7, #4]
    df1c:	2b01      	cmp	r3, #1
    df1e:	d10c      	bne.n	df3a <_Z41__static_initialization_and_destruction_0ii+0x2a>
    df20:	683b      	ldr	r3, [r7, #0]
    df22:	f64f 72ff 	movw	r2, #65535	; 0xffff
    df26:	4293      	cmp	r3, r2
    df28:	d107      	bne.n	df3a <_Z41__static_initialization_and_destruction_0ii+0x2a>
SPI_Asyn_Class LT_SPI::spiTemp;
    df2a:	4806      	ldr	r0, [pc, #24]	; (df44 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    df2c:	4b06      	ldr	r3, [pc, #24]	; (df48 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    df2e:	4798      	blx	r3
    df30:	4a06      	ldr	r2, [pc, #24]	; (df4c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    df32:	4907      	ldr	r1, [pc, #28]	; (df50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    df34:	4803      	ldr	r0, [pc, #12]	; (df44 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    df36:	4b07      	ldr	r3, [pc, #28]	; (df54 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    df38:	4798      	blx	r3
}
    df3a:	bf00      	nop
    df3c:	3708      	adds	r7, #8
    df3e:	46bd      	mov	sp, r7
    df40:	bd80      	pop	{r7, pc}
    df42:	bf00      	nop
    df44:	200048a0 	.word	0x200048a0
    df48:	0000df6d 	.word	0x0000df6d
    df4c:	20000000 	.word	0x20000000
    df50:	0000df8d 	.word	0x0000df8d
    df54:	0000f1f5 	.word	0x0000f1f5

0000df58 <_GLOBAL__sub_I_ptrLTSPIClass>:
    df58:	b580      	push	{r7, lr}
    df5a:	af00      	add	r7, sp, #0
    df5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    df60:	2001      	movs	r0, #1
    df62:	4b01      	ldr	r3, [pc, #4]	; (df68 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
    df64:	4798      	blx	r3
    df66:	bd80      	pop	{r7, pc}
    df68:	0000df11 	.word	0x0000df11

0000df6c <_ZN14SPI_Asyn_ClassC1Ev>:
SPI_Asyn_Class::SPI_Asyn_Class(spi_m_async_descriptor *spi)
{
	SPIA=spi;
	ptrSPIAClass=this;
} //SPI_Asyn_Class
SPI_Asyn_Class::SPI_Asyn_Class()
    df6c:	b480      	push	{r7}
    df6e:	b083      	sub	sp, #12
    df70:	af00      	add	r7, sp, #0
    df72:	6078      	str	r0, [r7, #4]
{
	ptrSPIAClass=this;
    df74:	4a04      	ldr	r2, [pc, #16]	; (df88 <_ZN14SPI_Asyn_ClassC1Ev+0x1c>)
    df76:	687b      	ldr	r3, [r7, #4]
    df78:	6013      	str	r3, [r2, #0]
} //SPI_Asyn_Class
    df7a:	687b      	ldr	r3, [r7, #4]
    df7c:	4618      	mov	r0, r3
    df7e:	370c      	adds	r7, #12
    df80:	46bd      	mov	sp, r7
    df82:	bc80      	pop	{r7}
    df84:	4770      	bx	lr
    df86:	bf00      	nop
    df88:	200048c0 	.word	0x200048c0

0000df8c <_ZN14SPI_Asyn_ClassD1Ev>:

// default destructor
SPI_Asyn_Class::~SPI_Asyn_Class()
    df8c:	b480      	push	{r7}
    df8e:	b083      	sub	sp, #12
    df90:	af00      	add	r7, sp, #0
    df92:	6078      	str	r0, [r7, #4]
{
} //~SPI_Asyn_Class
    df94:	687b      	ldr	r3, [r7, #4]
    df96:	4618      	mov	r0, r3
    df98:	370c      	adds	r7, #12
    df9a:	46bd      	mov	sp, r7
    df9c:	bc80      	pop	{r7}
    df9e:	4770      	bx	lr

0000dfa0 <_ZN13SPI_Syn_ClassC1Ev>:
#include "SPI_Syn_Class.h"

SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
    dfa0:	b480      	push	{r7}
    dfa2:	b083      	sub	sp, #12
    dfa4:	af00      	add	r7, sp, #0
    dfa6:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
    dfa8:	4a04      	ldr	r2, [pc, #16]	; (dfbc <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
    dfaa:	687b      	ldr	r3, [r7, #4]
    dfac:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    dfae:	687b      	ldr	r3, [r7, #4]
    dfb0:	4618      	mov	r0, r3
    dfb2:	370c      	adds	r7, #12
    dfb4:	46bd      	mov	sp, r7
    dfb6:	bc80      	pop	{r7}
    dfb8:	4770      	bx	lr
    dfba:	bf00      	nop
    dfbc:	200048c4 	.word	0x200048c4

0000dfc0 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
    dfc0:	b480      	push	{r7}
    dfc2:	b083      	sub	sp, #12
    dfc4:	af00      	add	r7, sp, #0
    dfc6:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
    dfc8:	687b      	ldr	r3, [r7, #4]
    dfca:	4618      	mov	r0, r3
    dfcc:	370c      	adds	r7, #12
    dfce:	46bd      	mov	sp, r7
    dfd0:	bc80      	pop	{r7}
    dfd2:	4770      	bx	lr

0000dfd4 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
    dfd4:	b580      	push	{r7, lr}
    dfd6:	b082      	sub	sp, #8
    dfd8:	af00      	add	r7, sp, #0
    dfda:	6078      	str	r0, [r7, #4]
    dfdc:	6039      	str	r1, [r7, #0]
    dfde:	687b      	ldr	r3, [r7, #4]
    dfe0:	3308      	adds	r3, #8
    dfe2:	4618      	mov	r0, r3
    dfe4:	4b06      	ldr	r3, [pc, #24]	; (e000 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
    dfe6:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
    dfe8:	687b      	ldr	r3, [r7, #4]
    dfea:	683a      	ldr	r2, [r7, #0]
    dfec:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
    dfee:	4a05      	ldr	r2, [pc, #20]	; (e004 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x30>)
    dff0:	687b      	ldr	r3, [r7, #4]
    dff2:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
    dff4:	687b      	ldr	r3, [r7, #4]
    dff6:	4618      	mov	r0, r3
    dff8:	3708      	adds	r7, #8
    dffa:	46bd      	mov	sp, r7
    dffc:	bd80      	pop	{r7, pc}
    dffe:	bf00      	nop
    e000:	0000f1b9 	.word	0x0000f1b9
    e004:	200048c8 	.word	0x200048c8

0000e008 <_ZN13AT24MAC_ClassD1Ev>:

// default destructor
AT24MAC_Class::~AT24MAC_Class()
    e008:	b580      	push	{r7, lr}
    e00a:	b082      	sub	sp, #8
    e00c:	af00      	add	r7, sp, #0
    e00e:	6078      	str	r0, [r7, #4]
    e010:	687b      	ldr	r3, [r7, #4]
    e012:	3308      	adds	r3, #8
    e014:	4618      	mov	r0, r3
    e016:	4b03      	ldr	r3, [pc, #12]	; (e024 <_ZN13AT24MAC_ClassD1Ev+0x1c>)
    e018:	4798      	blx	r3
{
} //~AT24MAC_Class
    e01a:	687b      	ldr	r3, [r7, #4]
    e01c:	4618      	mov	r0, r3
    e01e:	3708      	adds	r7, #8
    e020:	46bd      	mov	sp, r7
    e022:	bd80      	pop	{r7, pc}
    e024:	0000f1e1 	.word	0x0000f1e1

0000e028 <_Z41__static_initialization_and_destruction_0ii>:
		isReady=false;
	}
	return isReady;	
}

    e028:	b580      	push	{r7, lr}
    e02a:	b082      	sub	sp, #8
    e02c:	af00      	add	r7, sp, #0
    e02e:	6078      	str	r0, [r7, #4]
    e030:	6039      	str	r1, [r7, #0]
    e032:	687b      	ldr	r3, [r7, #4]
    e034:	2b01      	cmp	r3, #1
    e036:	d10d      	bne.n	e054 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e038:	683b      	ldr	r3, [r7, #0]
    e03a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e03e:	4293      	cmp	r3, r2
    e040:	d108      	bne.n	e054 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e042:	4906      	ldr	r1, [pc, #24]	; (e05c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e044:	4806      	ldr	r0, [pc, #24]	; (e060 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e046:	4b07      	ldr	r3, [pc, #28]	; (e064 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e048:	4798      	blx	r3
    e04a:	4a07      	ldr	r2, [pc, #28]	; (e068 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e04c:	4907      	ldr	r1, [pc, #28]	; (e06c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e04e:	4804      	ldr	r0, [pc, #16]	; (e060 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e050:	4b07      	ldr	r3, [pc, #28]	; (e070 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e052:	4798      	blx	r3
    e054:	bf00      	nop
    e056:	3708      	adds	r7, #8
    e058:	46bd      	mov	sp, r7
    e05a:	bd80      	pop	{r7, pc}
    e05c:	20004f88 	.word	0x20004f88
    e060:	200048d0 	.word	0x200048d0
    e064:	0000dfd5 	.word	0x0000dfd5
    e068:	20000000 	.word	0x20000000
    e06c:	0000e009 	.word	0x0000e009
    e070:	0000f1f5 	.word	0x0000f1f5

0000e074 <_GLOBAL__sub_I_ptrAT24MACClass>:
    e074:	b580      	push	{r7, lr}
    e076:	af00      	add	r7, sp, #0
    e078:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e07c:	2001      	movs	r0, #1
    e07e:	4b01      	ldr	r3, [pc, #4]	; (e084 <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
    e080:	4798      	blx	r3
    e082:	bd80      	pop	{r7, pc}
    e084:	0000e029 	.word	0x0000e029

0000e088 <_ZN13N25Q256_ClassC1Ev>:
	delay_us(1);
	QSPI_N25Q256_PORT_init();
}

// default constructor
N25Q256_Class::N25Q256_Class()
    e088:	b480      	push	{r7}
    e08a:	b083      	sub	sp, #12
    e08c:	af00      	add	r7, sp, #0
    e08e:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
    e090:	687b      	ldr	r3, [r7, #4]
    e092:	4618      	mov	r0, r3
    e094:	370c      	adds	r7, #12
    e096:	46bd      	mov	sp, r7
    e098:	bc80      	pop	{r7}
    e09a:	4770      	bx	lr

0000e09c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
    e09c:	b480      	push	{r7}
    e09e:	b083      	sub	sp, #12
    e0a0:	af00      	add	r7, sp, #0
    e0a2:	6078      	str	r0, [r7, #4]
    e0a4:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
    e0a6:	687b      	ldr	r3, [r7, #4]
    e0a8:	683a      	ldr	r2, [r7, #0]
    e0aa:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
    e0ac:	687b      	ldr	r3, [r7, #4]
    e0ae:	4a04      	ldr	r2, [pc, #16]	; (e0c0 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
    e0b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
    e0b4:	687b      	ldr	r3, [r7, #4]
    e0b6:	4618      	mov	r0, r3
    e0b8:	370c      	adds	r7, #12
    e0ba:	46bd      	mov	sp, r7
    e0bc:	bc80      	pop	{r7}
    e0be:	4770      	bx	lr
    e0c0:	001fff00 	.word	0x001fff00

0000e0c4 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
    e0c4:	b480      	push	{r7}
    e0c6:	b083      	sub	sp, #12
    e0c8:	af00      	add	r7, sp, #0
    e0ca:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
    e0cc:	687b      	ldr	r3, [r7, #4]
    e0ce:	4618      	mov	r0, r3
    e0d0:	370c      	adds	r7, #12
    e0d2:	46bd      	mov	sp, r7
    e0d4:	bc80      	pop	{r7}
    e0d6:	4770      	bx	lr

0000e0d8 <_Z41__static_initialization_and_destruction_0ii>:
		}
					
	}
	return	isOK;
}
    e0d8:	b580      	push	{r7, lr}
    e0da:	b082      	sub	sp, #8
    e0dc:	af00      	add	r7, sp, #0
    e0de:	6078      	str	r0, [r7, #4]
    e0e0:	6039      	str	r1, [r7, #0]
    e0e2:	687b      	ldr	r3, [r7, #4]
    e0e4:	2b01      	cmp	r3, #1
    e0e6:	d10d      	bne.n	e104 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e0e8:	683b      	ldr	r3, [r7, #0]
    e0ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e0ee:	4293      	cmp	r3, r2
    e0f0:	d108      	bne.n	e104 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e0f2:	4906      	ldr	r1, [pc, #24]	; (e10c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e0f4:	4806      	ldr	r0, [pc, #24]	; (e110 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e0f6:	4b07      	ldr	r3, [pc, #28]	; (e114 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e0f8:	4798      	blx	r3
    e0fa:	4a07      	ldr	r2, [pc, #28]	; (e118 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e0fc:	4907      	ldr	r1, [pc, #28]	; (e11c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e0fe:	4804      	ldr	r0, [pc, #16]	; (e110 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e100:	4b07      	ldr	r3, [pc, #28]	; (e120 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e102:	4798      	blx	r3
    e104:	bf00      	nop
    e106:	3708      	adds	r7, #8
    e108:	46bd      	mov	sp, r7
    e10a:	bd80      	pop	{r7, pc}
    e10c:	20004e74 	.word	0x20004e74
    e110:	20004924 	.word	0x20004924
    e114:	0000e09d 	.word	0x0000e09d
    e118:	20000000 	.word	0x20000000
    e11c:	0000e0c5 	.word	0x0000e0c5
    e120:	0000f1f5 	.word	0x0000f1f5

0000e124 <_GLOBAL__sub_I_ptrN25Q256Class>:
    e124:	b580      	push	{r7, lr}
    e126:	af00      	add	r7, sp, #0
    e128:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e12c:	2001      	movs	r0, #1
    e12e:	4b01      	ldr	r3, [pc, #4]	; (e134 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
    e130:	4798      	blx	r3
    e132:	bd80      	pop	{r7, pc}
    e134:	0000e0d9 	.word	0x0000e0d9

0000e138 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
    e138:	b580      	push	{r7, lr}
    e13a:	b082      	sub	sp, #8
    e13c:	af00      	add	r7, sp, #0
    e13e:	6078      	str	r0, [r7, #4]
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	4618      	mov	r0, r3
    e144:	4b06      	ldr	r3, [pc, #24]	; (e160 <_ZN14Calendar_ClassC1Ev+0x28>)
    e146:	4798      	blx	r3
    e148:	4a06      	ldr	r2, [pc, #24]	; (e164 <_ZN14Calendar_ClassC1Ev+0x2c>)
    e14a:	687b      	ldr	r3, [r7, #4]
    e14c:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
    e14e:	4a06      	ldr	r2, [pc, #24]	; (e168 <_ZN14Calendar_ClassC1Ev+0x30>)
    e150:	687b      	ldr	r3, [r7, #4]
    e152:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    e154:	687b      	ldr	r3, [r7, #4]
    e156:	4618      	mov	r0, r3
    e158:	3708      	adds	r7, #8
    e15a:	46bd      	mov	sp, r7
    e15c:	bd80      	pop	{r7, pc}
    e15e:	bf00      	nop
    e160:	0000e481 	.word	0x0000e481
    e164:	00012158 	.word	0x00012158
    e168:	20004b58 	.word	0x20004b58

0000e16c <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
    e16c:	b580      	push	{r7, lr}
    e16e:	b082      	sub	sp, #8
    e170:	af00      	add	r7, sp, #0
    e172:	6078      	str	r0, [r7, #4]
    e174:	6039      	str	r1, [r7, #0]
    e176:	687b      	ldr	r3, [r7, #4]
    e178:	4618      	mov	r0, r3
    e17a:	4b08      	ldr	r3, [pc, #32]	; (e19c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
    e17c:	4798      	blx	r3
    e17e:	4a08      	ldr	r2, [pc, #32]	; (e1a0 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
    e180:	687b      	ldr	r3, [r7, #4]
    e182:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
    e184:	687b      	ldr	r3, [r7, #4]
    e186:	683a      	ldr	r2, [r7, #0]
    e188:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
    e18c:	4a05      	ldr	r2, [pc, #20]	; (e1a4 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
    e18e:	687b      	ldr	r3, [r7, #4]
    e190:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
    e192:	687b      	ldr	r3, [r7, #4]
    e194:	4618      	mov	r0, r3
    e196:	3708      	adds	r7, #8
    e198:	46bd      	mov	sp, r7
    e19a:	bd80      	pop	{r7, pc}
    e19c:	0000e481 	.word	0x0000e481
    e1a0:	00012158 	.word	0x00012158
    e1a4:	20004b58 	.word	0x20004b58

0000e1a8 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
    e1a8:	b580      	push	{r7, lr}
    e1aa:	b082      	sub	sp, #8
    e1ac:	af00      	add	r7, sp, #0
    e1ae:	6078      	str	r0, [r7, #4]
    e1b0:	4a05      	ldr	r2, [pc, #20]	; (e1c8 <_ZN14Calendar_ClassD1Ev+0x20>)
    e1b2:	687b      	ldr	r3, [r7, #4]
    e1b4:	601a      	str	r2, [r3, #0]
    e1b6:	687b      	ldr	r3, [r7, #4]
    e1b8:	4618      	mov	r0, r3
    e1ba:	4b04      	ldr	r3, [pc, #16]	; (e1cc <_ZN14Calendar_ClassD1Ev+0x24>)
    e1bc:	4798      	blx	r3
{
} //~Calendar_Class
    e1be:	687b      	ldr	r3, [r7, #4]
    e1c0:	4618      	mov	r0, r3
    e1c2:	3708      	adds	r7, #8
    e1c4:	46bd      	mov	sp, r7
    e1c6:	bd80      	pop	{r7, pc}
    e1c8:	00012158 	.word	0x00012158
    e1cc:	0000e4a1 	.word	0x0000e4a1

0000e1d0 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
    e1d0:	b580      	push	{r7, lr}
    e1d2:	b082      	sub	sp, #8
    e1d4:	af00      	add	r7, sp, #0
    e1d6:	6078      	str	r0, [r7, #4]
    e1d8:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
    e1da:	687b      	ldr	r3, [r7, #4]
    e1dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    e1e0:	6839      	ldr	r1, [r7, #0]
    e1e2:	4618      	mov	r0, r3
    e1e4:	4b03      	ldr	r3, [pc, #12]	; (e1f4 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
    e1e6:	4798      	blx	r3
    e1e8:	4603      	mov	r3, r0
}
    e1ea:	4618      	mov	r0, r3
    e1ec:	3708      	adds	r7, #8
    e1ee:	46bd      	mov	sp, r7
    e1f0:	bd80      	pop	{r7, pc}
    e1f2:	bf00      	nop
    e1f4:	0000246d 	.word	0x0000246d

0000e1f8 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
    e1f8:	b480      	push	{r7}
    e1fa:	b083      	sub	sp, #12
    e1fc:	af00      	add	r7, sp, #0
    e1fe:	6078      	str	r0, [r7, #4]
    e200:	460b      	mov	r3, r1
    e202:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
    e204:	887b      	ldrh	r3, [r7, #2]
    e206:	f003 0303 	and.w	r3, r3, #3
    e20a:	2b00      	cmp	r3, #0
    e20c:	d001      	beq.n	e212 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
    e20e:	2300      	movs	r3, #0
    e210:	e000      	b.n	e214 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
    e212:	2301      	movs	r3, #1
	}
}
    e214:	4618      	mov	r0, r3
    e216:	370c      	adds	r7, #12
    e218:	46bd      	mov	sp, r7
    e21a:	bc80      	pop	{r7}
    e21c:	4770      	bx	lr
	...

0000e220 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:
			
}


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    e220:	b580      	push	{r7, lr}
    e222:	b086      	sub	sp, #24
    e224:	af00      	add	r7, sp, #0
    e226:	6078      	str	r0, [r7, #4]
    e228:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    e22a:	2300      	movs	r3, #0
    e22c:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    e22e:	2300      	movs	r3, #0
    e230:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
    e232:	683b      	ldr	r3, [r7, #0]
    e234:	88db      	ldrh	r3, [r3, #6]
    e236:	b2da      	uxtb	r2, r3
    e238:	687b      	ldr	r3, [r7, #4]
    e23a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    e23e:	699b      	ldr	r3, [r3, #24]
    e240:	b2db      	uxtb	r3, r3
    e242:	1ad3      	subs	r3, r2, r3
    e244:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    e246:	683b      	ldr	r3, [r7, #0]
    e248:	795b      	ldrb	r3, [r3, #5]
    e24a:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    e24c:	683b      	ldr	r3, [r7, #0]
    e24e:	791b      	ldrb	r3, [r3, #4]
    e250:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    e252:	683b      	ldr	r3, [r7, #0]
    e254:	789b      	ldrb	r3, [r3, #2]
    e256:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    e258:	683b      	ldr	r3, [r7, #0]
    e25a:	785b      	ldrb	r3, [r3, #1]
    e25c:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    e25e:	683b      	ldr	r3, [r7, #0]
    e260:	781b      	ldrb	r3, [r3, #0]
    e262:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    e264:	2300      	movs	r3, #0
    e266:	613b      	str	r3, [r7, #16]
    e268:	7bfa      	ldrb	r2, [r7, #15]
    e26a:	693b      	ldr	r3, [r7, #16]
    e26c:	429a      	cmp	r2, r3
    e26e:	d91e      	bls.n	e2ae <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
    e270:	687b      	ldr	r3, [r7, #4]
    e272:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    e276:	699b      	ldr	r3, [r3, #24]
    e278:	b29a      	uxth	r2, r3
    e27a:	693b      	ldr	r3, [r7, #16]
    e27c:	b29b      	uxth	r3, r3
    e27e:	4413      	add	r3, r2
    e280:	b29b      	uxth	r3, r3
    e282:	4619      	mov	r1, r3
    e284:	6878      	ldr	r0, [r7, #4]
    e286:	4b27      	ldr	r3, [pc, #156]	; (e324 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
    e288:	4798      	blx	r3
    e28a:	4603      	mov	r3, r0
    e28c:	2b00      	cmp	r3, #0
    e28e:	d006      	beq.n	e29e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
    e290:	697b      	ldr	r3, [r7, #20]
    e292:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    e296:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    e29a:	617b      	str	r3, [r7, #20]
    e29c:	e003      	b.n	e2a6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    e29e:	697a      	ldr	r2, [r7, #20]
    e2a0:	4b21      	ldr	r3, [pc, #132]	; (e328 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
    e2a2:	4413      	add	r3, r2
    e2a4:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    e2a6:	693b      	ldr	r3, [r7, #16]
    e2a8:	3301      	adds	r3, #1
    e2aa:	613b      	str	r3, [r7, #16]
    e2ac:	e7dc      	b.n	e268 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    e2ae:	2301      	movs	r3, #1
    e2b0:	613b      	str	r3, [r7, #16]
    e2b2:	7bba      	ldrb	r2, [r7, #14]
    e2b4:	693b      	ldr	r3, [r7, #16]
    e2b6:	429a      	cmp	r2, r3
    e2b8:	d910      	bls.n	e2dc <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
    e2ba:	683b      	ldr	r3, [r7, #0]
    e2bc:	88db      	ldrh	r3, [r3, #6]
    e2be:	4619      	mov	r1, r3
    e2c0:	693b      	ldr	r3, [r7, #16]
    e2c2:	b2db      	uxtb	r3, r3
    e2c4:	461a      	mov	r2, r3
    e2c6:	6878      	ldr	r0, [r7, #4]
    e2c8:	4b18      	ldr	r3, [pc, #96]	; (e32c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
    e2ca:	4798      	blx	r3
    e2cc:	4602      	mov	r2, r0
    e2ce:	697b      	ldr	r3, [r7, #20]
    e2d0:	4413      	add	r3, r2
    e2d2:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    e2d4:	693b      	ldr	r3, [r7, #16]
    e2d6:	3301      	adds	r3, #1
    e2d8:	613b      	str	r3, [r7, #16]
    e2da:	e7ea      	b.n	e2b2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    e2dc:	7b7b      	ldrb	r3, [r7, #13]
    e2de:	3b01      	subs	r3, #1
    e2e0:	4a13      	ldr	r2, [pc, #76]	; (e330 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
    e2e2:	fb02 f303 	mul.w	r3, r2, r3
    e2e6:	461a      	mov	r2, r3
    e2e8:	697b      	ldr	r3, [r7, #20]
    e2ea:	4413      	add	r3, r2
    e2ec:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    e2ee:	7b3b      	ldrb	r3, [r7, #12]
    e2f0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    e2f4:	fb02 f303 	mul.w	r3, r2, r3
    e2f8:	461a      	mov	r2, r3
    e2fa:	697b      	ldr	r3, [r7, #20]
    e2fc:	4413      	add	r3, r2
    e2fe:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    e300:	7afa      	ldrb	r2, [r7, #11]
    e302:	4613      	mov	r3, r2
    e304:	011b      	lsls	r3, r3, #4
    e306:	1a9b      	subs	r3, r3, r2
    e308:	009b      	lsls	r3, r3, #2
    e30a:	461a      	mov	r2, r3
    e30c:	697b      	ldr	r3, [r7, #20]
    e30e:	4413      	add	r3, r2
    e310:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    e312:	7abb      	ldrb	r3, [r7, #10]
    e314:	697a      	ldr	r2, [r7, #20]
    e316:	4413      	add	r3, r2
    e318:	617b      	str	r3, [r7, #20]

	return tmp;
    e31a:	697b      	ldr	r3, [r7, #20]
}
    e31c:	4618      	mov	r0, r3
    e31e:	3718      	adds	r7, #24
    e320:	46bd      	mov	sp, r7
    e322:	bd80      	pop	{r7, pc}
    e324:	0000e1f9 	.word	0x0000e1f9
    e328:	01e13380 	.word	0x01e13380
    e32c:	0000e335 	.word	0x0000e335
    e330:	00015180 	.word	0x00015180

0000e334 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
    e334:	b580      	push	{r7, lr}
    e336:	b086      	sub	sp, #24
    e338:	af00      	add	r7, sp, #0
    e33a:	60f8      	str	r0, [r7, #12]
    e33c:	60b9      	str	r1, [r7, #8]
    e33e:	4613      	mov	r3, r2
    e340:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
    e342:	2300      	movs	r3, #0
    e344:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
    e346:	68bb      	ldr	r3, [r7, #8]
    e348:	b29b      	uxth	r3, r3
    e34a:	4619      	mov	r1, r3
    e34c:	68f8      	ldr	r0, [r7, #12]
    e34e:	4b2f      	ldr	r3, [pc, #188]	; (e40c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
    e350:	4798      	blx	r3
    e352:	4603      	mov	r3, r0
    e354:	2b00      	cmp	r3, #0
    e356:	d028      	beq.n	e3aa <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
    e358:	79fb      	ldrb	r3, [r7, #7]
    e35a:	3b01      	subs	r3, #1
    e35c:	2b0b      	cmp	r3, #11
    e35e:	d84c      	bhi.n	e3fa <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
    e360:	a201      	add	r2, pc, #4	; (adr r2, e368 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
    e362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e366:	bf00      	nop
    e368:	0000e399 	.word	0x0000e399
    e36c:	0000e39f 	.word	0x0000e39f
    e370:	0000e399 	.word	0x0000e399
    e374:	0000e3a5 	.word	0x0000e3a5
    e378:	0000e399 	.word	0x0000e399
    e37c:	0000e3a5 	.word	0x0000e3a5
    e380:	0000e399 	.word	0x0000e399
    e384:	0000e399 	.word	0x0000e399
    e388:	0000e3a5 	.word	0x0000e3a5
    e38c:	0000e399 	.word	0x0000e399
    e390:	0000e3a5 	.word	0x0000e3a5
    e394:	0000e399 	.word	0x0000e399
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    e398:	4b1d      	ldr	r3, [pc, #116]	; (e410 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    e39a:	617b      	str	r3, [r7, #20]
			break;
    e39c:	e030      	b.n	e400 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
    e39e:	4b1d      	ldr	r3, [pc, #116]	; (e414 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
    e3a0:	617b      	str	r3, [r7, #20]
			break;
    e3a2:	e02d      	b.n	e400 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    e3a4:	4b1c      	ldr	r3, [pc, #112]	; (e418 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    e3a6:	617b      	str	r3, [r7, #20]
			break;
    e3a8:	e02a      	b.n	e400 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
    e3aa:	79fb      	ldrb	r3, [r7, #7]
    e3ac:	3b01      	subs	r3, #1
    e3ae:	2b0b      	cmp	r3, #11
    e3b0:	d825      	bhi.n	e3fe <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
    e3b2:	a201      	add	r2, pc, #4	; (adr r2, e3b8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
    e3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e3b8:	0000e3e9 	.word	0x0000e3e9
    e3bc:	0000e3ef 	.word	0x0000e3ef
    e3c0:	0000e3e9 	.word	0x0000e3e9
    e3c4:	0000e3f5 	.word	0x0000e3f5
    e3c8:	0000e3e9 	.word	0x0000e3e9
    e3cc:	0000e3f5 	.word	0x0000e3f5
    e3d0:	0000e3e9 	.word	0x0000e3e9
    e3d4:	0000e3e9 	.word	0x0000e3e9
    e3d8:	0000e3f5 	.word	0x0000e3f5
    e3dc:	0000e3e9 	.word	0x0000e3e9
    e3e0:	0000e3f5 	.word	0x0000e3f5
    e3e4:	0000e3e9 	.word	0x0000e3e9
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
    e3e8:	4b09      	ldr	r3, [pc, #36]	; (e410 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
    e3ea:	617b      	str	r3, [r7, #20]
			break;
    e3ec:	e008      	b.n	e400 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
    e3ee:	4b0b      	ldr	r3, [pc, #44]	; (e41c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
    e3f0:	617b      	str	r3, [r7, #20]
			break;
    e3f2:	e005      	b.n	e400 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
    e3f4:	4b08      	ldr	r3, [pc, #32]	; (e418 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
    e3f6:	617b      	str	r3, [r7, #20]
			break;
    e3f8:	e002      	b.n	e400 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
    e3fa:	bf00      	nop
    e3fc:	e000      	b.n	e400 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
    e3fe:	bf00      	nop
		}
	}

	return sec_in_month;
    e400:	697b      	ldr	r3, [r7, #20]
}
    e402:	4618      	mov	r0, r3
    e404:	3718      	adds	r7, #24
    e406:	46bd      	mov	sp, r7
    e408:	bd80      	pop	{r7, pc}
    e40a:	bf00      	nop
    e40c:	0000e1f9 	.word	0x0000e1f9
    e410:	0028de80 	.word	0x0028de80
    e414:	00263b80 	.word	0x00263b80
    e418:	00278d00 	.word	0x00278d00
    e41c:	0024ea00 	.word	0x0024ea00

0000e420 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.min   = tmp_minutes;
	dt->time.sec   = tmp;

	return ERR_NONE;
}
    e420:	b580      	push	{r7, lr}
    e422:	b082      	sub	sp, #8
    e424:	af00      	add	r7, sp, #0
    e426:	6078      	str	r0, [r7, #4]
    e428:	6039      	str	r1, [r7, #0]
    e42a:	687b      	ldr	r3, [r7, #4]
    e42c:	2b01      	cmp	r3, #1
    e42e:	d10d      	bne.n	e44c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e430:	683b      	ldr	r3, [r7, #0]
    e432:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e436:	4293      	cmp	r3, r2
    e438:	d108      	bne.n	e44c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    e43a:	4906      	ldr	r1, [pc, #24]	; (e454 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e43c:	4806      	ldr	r0, [pc, #24]	; (e458 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e43e:	4b07      	ldr	r3, [pc, #28]	; (e45c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e440:	4798      	blx	r3
    e442:	4a07      	ldr	r2, [pc, #28]	; (e460 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e444:	4907      	ldr	r1, [pc, #28]	; (e464 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e446:	4804      	ldr	r0, [pc, #16]	; (e458 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e448:	4b07      	ldr	r3, [pc, #28]	; (e468 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e44a:	4798      	blx	r3
    e44c:	bf00      	nop
    e44e:	3708      	adds	r7, #8
    e450:	46bd      	mov	sp, r7
    e452:	bd80      	pop	{r7, pc}
    e454:	20004fc8 	.word	0x20004fc8
    e458:	20004b60 	.word	0x20004b60
    e45c:	0000e16d 	.word	0x0000e16d
    e460:	20000000 	.word	0x20000000
    e464:	0000e1a9 	.word	0x0000e1a9
    e468:	0000f1f5 	.word	0x0000f1f5

0000e46c <_GLOBAL__sub_I_ptrCalendarClass>:
    e46c:	b580      	push	{r7, lr}
    e46e:	af00      	add	r7, sp, #0
    e470:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e474:	2001      	movs	r0, #1
    e476:	4b01      	ldr	r3, [pc, #4]	; (e47c <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
    e478:	4798      	blx	r3
    e47a:	bd80      	pop	{r7, pc}
    e47c:	0000e421 	.word	0x0000e421

0000e480 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
    e480:	b480      	push	{r7}
    e482:	b083      	sub	sp, #12
    e484:	af00      	add	r7, sp, #0
    e486:	6078      	str	r0, [r7, #4]
    e488:	4a04      	ldr	r2, [pc, #16]	; (e49c <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
    e48a:	687b      	ldr	r3, [r7, #4]
    e48c:	601a      	str	r2, [r3, #0]
{
} //~D
    e48e:	687b      	ldr	r3, [r7, #4]
    e490:	4618      	mov	r0, r3
    e492:	370c      	adds	r7, #12
    e494:	46bd      	mov	sp, r7
    e496:	bc80      	pop	{r7}
    e498:	4770      	bx	lr
    e49a:	bf00      	nop
    e49c:	00012168 	.word	0x00012168

0000e4a0 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
    e4a0:	b480      	push	{r7}
    e4a2:	b083      	sub	sp, #12
    e4a4:	af00      	add	r7, sp, #0
    e4a6:	6078      	str	r0, [r7, #4]
    e4a8:	4a04      	ldr	r2, [pc, #16]	; (e4bc <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
    e4aa:	687b      	ldr	r3, [r7, #4]
    e4ac:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
    e4ae:	687b      	ldr	r3, [r7, #4]
    e4b0:	4618      	mov	r0, r3
    e4b2:	370c      	adds	r7, #12
    e4b4:	46bd      	mov	sp, r7
    e4b6:	bc80      	pop	{r7}
    e4b8:	4770      	bx	lr
    e4ba:	bf00      	nop
    e4bc:	00012168 	.word	0x00012168

0000e4c0 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    e4c0:	b580      	push	{r7, lr}
    e4c2:	b082      	sub	sp, #8
    e4c4:	af00      	add	r7, sp, #0
    e4c6:	6078      	str	r0, [r7, #4]
	ptrTimerClass->setTimeout();
    e4c8:	4b04      	ldr	r3, [pc, #16]	; (e4dc <_ZL7task_cbPK10timer_task+0x1c>)
    e4ca:	681b      	ldr	r3, [r3, #0]
    e4cc:	4618      	mov	r0, r3
    e4ce:	4b04      	ldr	r3, [pc, #16]	; (e4e0 <_ZL7task_cbPK10timer_task+0x20>)
    e4d0:	4798      	blx	r3
}
    e4d2:	bf00      	nop
    e4d4:	3708      	adds	r7, #8
    e4d6:	46bd      	mov	sp, r7
    e4d8:	bd80      	pop	{r7, pc}
    e4da:	bf00      	nop
    e4dc:	20004c08 	.word	0x20004c08
    e4e0:	0000e56f 	.word	0x0000e56f

0000e4e4 <_ZN11Timer_ClassC1Ev>:
// default constructor
Timer_Class::Timer_Class()
    e4e4:	b480      	push	{r7}
    e4e6:	b083      	sub	sp, #12
    e4e8:	af00      	add	r7, sp, #0
    e4ea:	6078      	str	r0, [r7, #4]
{
	prtTimer=this;
    e4ec:	687b      	ldr	r3, [r7, #4]
    e4ee:	687a      	ldr	r2, [r7, #4]
    e4f0:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    e4f2:	4a08      	ldr	r2, [pc, #32]	; (e514 <_ZN11Timer_ClassC1Ev+0x30>)
    e4f4:	687b      	ldr	r3, [r7, #4]
    e4f6:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e4f8:	687b      	ldr	r3, [r7, #4]
    e4fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e4fe:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    e500:	687b      	ldr	r3, [r7, #4]
    e502:	4a05      	ldr	r2, [pc, #20]	; (e518 <_ZN11Timer_ClassC1Ev+0x34>)
    e504:	621a      	str	r2, [r3, #32]
} //Timer_Class
    e506:	687b      	ldr	r3, [r7, #4]
    e508:	4618      	mov	r0, r3
    e50a:	370c      	adds	r7, #12
    e50c:	46bd      	mov	sp, r7
    e50e:	bc80      	pop	{r7}
    e510:	4770      	bx	lr
    e512:	bf00      	nop
    e514:	20004c08 	.word	0x20004c08
    e518:	0000e4c1 	.word	0x0000e4c1

0000e51c <_ZN11Timer_ClassC1EP16timer_descriptor>:

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    e51c:	b480      	push	{r7}
    e51e:	b083      	sub	sp, #12
    e520:	af00      	add	r7, sp, #0
    e522:	6078      	str	r0, [r7, #4]
    e524:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e526:	687b      	ldr	r3, [r7, #4]
    e528:	683a      	ldr	r2, [r7, #0]
    e52a:	609a      	str	r2, [r3, #8]
	ptrTimerClass=this;
    e52c:	4a07      	ldr	r2, [pc, #28]	; (e54c <_ZN11Timer_ClassC1EP16timer_descriptor+0x30>)
    e52e:	687b      	ldr	r3, [r7, #4]
    e530:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e532:	687b      	ldr	r3, [r7, #4]
    e534:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e538:	611a      	str	r2, [r3, #16]
	task.cb=task_cb;
    e53a:	687b      	ldr	r3, [r7, #4]
    e53c:	4a04      	ldr	r2, [pc, #16]	; (e550 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    e53e:	621a      	str	r2, [r3, #32]
} //Timer_Class
    e540:	687b      	ldr	r3, [r7, #4]
    e542:	4618      	mov	r0, r3
    e544:	370c      	adds	r7, #12
    e546:	46bd      	mov	sp, r7
    e548:	bc80      	pop	{r7}
    e54a:	4770      	bx	lr
    e54c:	20004c08 	.word	0x20004c08
    e550:	0000e4c1 	.word	0x0000e4c1

0000e554 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    e554:	b480      	push	{r7}
    e556:	b083      	sub	sp, #12
    e558:	af00      	add	r7, sp, #0
    e55a:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e55c:	687b      	ldr	r3, [r7, #4]
    e55e:	2200      	movs	r2, #0
    e560:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e562:	687b      	ldr	r3, [r7, #4]
    e564:	4618      	mov	r0, r3
    e566:	370c      	adds	r7, #12
    e568:	46bd      	mov	sp, r7
    e56a:	bc80      	pop	{r7}
    e56c:	4770      	bx	lr

0000e56e <_ZN11Timer_Class10setTimeoutEv>:
	task.cb=task_cb;
	task.mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, &task);
}

volatile void Timer_Class::setTimeout(){
    e56e:	b480      	push	{r7}
    e570:	b083      	sub	sp, #12
    e572:	af00      	add	r7, sp, #0
    e574:	6078      	str	r0, [r7, #4]
	timeout=1;
    e576:	687b      	ldr	r3, [r7, #4]
    e578:	2201      	movs	r2, #1
    e57a:	705a      	strb	r2, [r3, #1]
}
    e57c:	bf00      	nop
    e57e:	370c      	adds	r7, #12
    e580:	46bd      	mov	sp, r7
    e582:	bc80      	pop	{r7}
    e584:	4770      	bx	lr
	...

0000e588 <_Z41__static_initialization_and_destruction_0ii>:
	return ticks;
}

Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
    e588:	b580      	push	{r7, lr}
    e58a:	b082      	sub	sp, #8
    e58c:	af00      	add	r7, sp, #0
    e58e:	6078      	str	r0, [r7, #4]
    e590:	6039      	str	r1, [r7, #0]
    e592:	687b      	ldr	r3, [r7, #4]
    e594:	2b01      	cmp	r3, #1
    e596:	d11f      	bne.n	e5d8 <_Z41__static_initialization_and_destruction_0ii+0x50>
    e598:	683b      	ldr	r3, [r7, #0]
    e59a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e59e:	4293      	cmp	r3, r2
    e5a0:	d11a      	bne.n	e5d8 <_Z41__static_initialization_and_destruction_0ii+0x50>
Timer_Class eventTimer(&TIMER_EVENT);
    e5a2:	490f      	ldr	r1, [pc, #60]	; (e5e0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e5a4:	480f      	ldr	r0, [pc, #60]	; (e5e4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e5a6:	4b10      	ldr	r3, [pc, #64]	; (e5e8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    e5a8:	4798      	blx	r3
    e5aa:	4a10      	ldr	r2, [pc, #64]	; (e5ec <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e5ac:	4910      	ldr	r1, [pc, #64]	; (e5f0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    e5ae:	480d      	ldr	r0, [pc, #52]	; (e5e4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e5b0:	4b10      	ldr	r3, [pc, #64]	; (e5f4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    e5b2:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    e5b4:	4910      	ldr	r1, [pc, #64]	; (e5f8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    e5b6:	4811      	ldr	r0, [pc, #68]	; (e5fc <_Z41__static_initialization_and_destruction_0ii+0x74>)
    e5b8:	4b0b      	ldr	r3, [pc, #44]	; (e5e8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    e5ba:	4798      	blx	r3
    e5bc:	4a0b      	ldr	r2, [pc, #44]	; (e5ec <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e5be:	490c      	ldr	r1, [pc, #48]	; (e5f0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    e5c0:	480e      	ldr	r0, [pc, #56]	; (e5fc <_Z41__static_initialization_and_destruction_0ii+0x74>)
    e5c2:	4b0c      	ldr	r3, [pc, #48]	; (e5f4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    e5c4:	4798      	blx	r3
    e5c6:	490e      	ldr	r1, [pc, #56]	; (e600 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    e5c8:	480e      	ldr	r0, [pc, #56]	; (e604 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    e5ca:	4b07      	ldr	r3, [pc, #28]	; (e5e8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    e5cc:	4798      	blx	r3
    e5ce:	4a07      	ldr	r2, [pc, #28]	; (e5ec <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e5d0:	4907      	ldr	r1, [pc, #28]	; (e5f0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    e5d2:	480c      	ldr	r0, [pc, #48]	; (e604 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    e5d4:	4b07      	ldr	r3, [pc, #28]	; (e5f4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    e5d6:	4798      	blx	r3
    e5d8:	bf00      	nop
    e5da:	3708      	adds	r7, #8
    e5dc:	46bd      	mov	sp, r7
    e5de:	bd80      	pop	{r7, pc}
    e5e0:	20004e78 	.word	0x20004e78
    e5e4:	20004c0c 	.word	0x20004c0c
    e5e8:	0000e51d 	.word	0x0000e51d
    e5ec:	20000000 	.word	0x20000000
    e5f0:	0000e555 	.word	0x0000e555
    e5f4:	0000f1f5 	.word	0x0000f1f5
    e5f8:	20004f6c 	.word	0x20004f6c
    e5fc:	20004c38 	.word	0x20004c38
    e600:	20004e94 	.word	0x20004e94
    e604:	20004c64 	.word	0x20004c64

0000e608 <_GLOBAL__sub_I_ptrTimerClass>:
    e608:	b580      	push	{r7, lr}
    e60a:	af00      	add	r7, sp, #0
    e60c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e610:	2001      	movs	r0, #1
    e612:	4b01      	ldr	r3, [pc, #4]	; (e618 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    e614:	4798      	blx	r3
    e616:	bd80      	pop	{r7, pc}
    e618:	0000e589 	.word	0x0000e589

0000e61c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    e61c:	b480      	push	{r7}
    e61e:	b083      	sub	sp, #12
    e620:	af00      	add	r7, sp, #0
    e622:	6078      	str	r0, [r7, #4]
    e624:	4a05      	ldr	r2, [pc, #20]	; (e63c <_ZN5PrintC1Ev+0x20>)
    e626:	687b      	ldr	r3, [r7, #4]
    e628:	601a      	str	r2, [r3, #0]
    e62a:	687b      	ldr	r3, [r7, #4]
    e62c:	2200      	movs	r2, #0
    e62e:	605a      	str	r2, [r3, #4]
    e630:	687b      	ldr	r3, [r7, #4]
    e632:	4618      	mov	r0, r3
    e634:	370c      	adds	r7, #12
    e636:	46bd      	mov	sp, r7
    e638:	bc80      	pop	{r7}
    e63a:	4770      	bx	lr
    e63c:	000121e4 	.word	0x000121e4

0000e640 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    e640:	b480      	push	{r7}
    e642:	b083      	sub	sp, #12
    e644:	af00      	add	r7, sp, #0
    e646:	6078      	str	r0, [r7, #4]
    e648:	2300      	movs	r3, #0
    e64a:	4618      	mov	r0, r3
    e64c:	370c      	adds	r7, #12
    e64e:	46bd      	mov	sp, r7
    e650:	bc80      	pop	{r7}
    e652:	4770      	bx	lr

0000e654 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    e654:	b480      	push	{r7}
    e656:	b083      	sub	sp, #12
    e658:	af00      	add	r7, sp, #0
    e65a:	6078      	str	r0, [r7, #4]
    e65c:	bf00      	nop
    e65e:	370c      	adds	r7, #12
    e660:	46bd      	mov	sp, r7
    e662:	bc80      	pop	{r7}
    e664:	4770      	bx	lr
	...

0000e668 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    e668:	b580      	push	{r7, lr}
    e66a:	b082      	sub	sp, #8
    e66c:	af00      	add	r7, sp, #0
    e66e:	6078      	str	r0, [r7, #4]
    e670:	687b      	ldr	r3, [r7, #4]
    e672:	4618      	mov	r0, r3
    e674:	4b06      	ldr	r3, [pc, #24]	; (e690 <_ZN6StreamC1Ev+0x28>)
    e676:	4798      	blx	r3
    e678:	4a06      	ldr	r2, [pc, #24]	; (e694 <_ZN6StreamC1Ev+0x2c>)
    e67a:	687b      	ldr	r3, [r7, #4]
    e67c:	601a      	str	r2, [r3, #0]
    e67e:	687b      	ldr	r3, [r7, #4]
    e680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e684:	609a      	str	r2, [r3, #8]
    e686:	687b      	ldr	r3, [r7, #4]
    e688:	4618      	mov	r0, r3
    e68a:	3708      	adds	r7, #8
    e68c:	46bd      	mov	sp, r7
    e68e:	bd80      	pop	{r7, pc}
    e690:	0000e61d 	.word	0x0000e61d
    e694:	000121a8 	.word	0x000121a8

0000e698 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    e698:	b480      	push	{r7}
    e69a:	b083      	sub	sp, #12
    e69c:	af00      	add	r7, sp, #0
    e69e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    e6a0:	4b06      	ldr	r3, [pc, #24]	; (e6bc <_ZL10USBTimeoutPK10timer_task+0x24>)
    e6a2:	681b      	ldr	r3, [r3, #0]
    e6a4:	2201      	movs	r2, #1
    e6a6:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    e6a8:	4b04      	ldr	r3, [pc, #16]	; (e6bc <_ZL10USBTimeoutPK10timer_task+0x24>)
    e6aa:	681b      	ldr	r3, [r3, #0]
    e6ac:	2200      	movs	r2, #0
    e6ae:	741a      	strb	r2, [r3, #16]
	
}
    e6b0:	bf00      	nop
    e6b2:	370c      	adds	r7, #12
    e6b4:	46bd      	mov	sp, r7
    e6b6:	bc80      	pop	{r7}
    e6b8:	4770      	bx	lr
    e6ba:	bf00      	nop
    e6bc:	20004c90 	.word	0x20004c90

0000e6c0 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e6c0:	b480      	push	{r7}
    e6c2:	b083      	sub	sp, #12
    e6c4:	af00      	add	r7, sp, #0
    e6c6:	4603      	mov	r3, r0
    e6c8:	603a      	str	r2, [r7, #0]
    e6ca:	71fb      	strb	r3, [r7, #7]
    e6cc:	460b      	mov	r3, r1
    e6ce:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    e6d0:	4b08      	ldr	r3, [pc, #32]	; (e6f4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e6d2:	681b      	ldr	r3, [r3, #0]
    e6d4:	2201      	movs	r2, #1
    e6d6:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    e6d8:	4b06      	ldr	r3, [pc, #24]	; (e6f4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e6da:	681b      	ldr	r3, [r3, #0]
    e6dc:	2201      	movs	r2, #1
    e6de:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e6e0:	4b04      	ldr	r3, [pc, #16]	; (e6f4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e6e2:	681b      	ldr	r3, [r3, #0]
    e6e4:	2201      	movs	r2, #1
    e6e6:	741a      	strb	r2, [r3, #16]


	return false;
    e6e8:	2300      	movs	r3, #0
}
    e6ea:	4618      	mov	r0, r3
    e6ec:	370c      	adds	r7, #12
    e6ee:	46bd      	mov	sp, r7
    e6f0:	bc80      	pop	{r7}
    e6f2:	4770      	bx	lr
    e6f4:	20004c90 	.word	0x20004c90

0000e6f8 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e6f8:	b480      	push	{r7}
    e6fa:	b083      	sub	sp, #12
    e6fc:	af00      	add	r7, sp, #0
    e6fe:	4603      	mov	r3, r0
    e700:	603a      	str	r2, [r7, #0]
    e702:	71fb      	strb	r3, [r7, #7]
    e704:	460b      	mov	r3, r1
    e706:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    e708:	4b08      	ldr	r3, [pc, #32]	; (e72c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e70a:	681b      	ldr	r3, [r3, #0]
    e70c:	2201      	movs	r2, #1
    e70e:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    e710:	4b06      	ldr	r3, [pc, #24]	; (e72c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e712:	681b      	ldr	r3, [r3, #0]
    e714:	2201      	movs	r2, #1
    e716:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e718:	4b04      	ldr	r3, [pc, #16]	; (e72c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e71a:	681b      	ldr	r3, [r3, #0]
    e71c:	2201      	movs	r2, #1
    e71e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    e720:	2300      	movs	r3, #0
}
    e722:	4618      	mov	r0, r3
    e724:	370c      	adds	r7, #12
    e726:	46bd      	mov	sp, r7
    e728:	bc80      	pop	{r7}
    e72a:	4770      	bx	lr
    e72c:	20004c90 	.word	0x20004c90

0000e730 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    e730:	b580      	push	{r7, lr}
    e732:	b082      	sub	sp, #8
    e734:	af00      	add	r7, sp, #0
    e736:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    e738:	793b      	ldrb	r3, [r7, #4]
    e73a:	f003 0301 	and.w	r3, r3, #1
    e73e:	b2db      	uxtb	r3, r3
    e740:	2b00      	cmp	r3, #0
    e742:	d013      	beq.n	e76c <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    e744:	490c      	ldr	r1, [pc, #48]	; (e778 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    e746:	2000      	movs	r0, #0
    e748:	4b0c      	ldr	r3, [pc, #48]	; (e77c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e74a:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    e74c:	490c      	ldr	r1, [pc, #48]	; (e780 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    e74e:	2001      	movs	r0, #1
    e750:	4b0a      	ldr	r3, [pc, #40]	; (e77c <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e752:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    e754:	4b0b      	ldr	r3, [pc, #44]	; (e784 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e756:	681b      	ldr	r3, [r3, #0]
    e758:	2201      	movs	r2, #1
    e75a:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    e75c:	4b09      	ldr	r3, [pc, #36]	; (e784 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e75e:	681b      	ldr	r3, [r3, #0]
    e760:	2201      	movs	r2, #1
    e762:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    e764:	4b07      	ldr	r3, [pc, #28]	; (e784 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e766:	681b      	ldr	r3, [r3, #0]
    e768:	2201      	movs	r2, #1
    e76a:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    e76c:	2300      	movs	r3, #0
}
    e76e:	4618      	mov	r0, r3
    e770:	3708      	adds	r7, #8
    e772:	46bd      	mov	sp, r7
    e774:	bd80      	pop	{r7, pc}
    e776:	bf00      	nop
    e778:	0000e6c1 	.word	0x0000e6c1
    e77c:	0000c691 	.word	0x0000c691
    e780:	0000e6f9 	.word	0x0000e6f9
    e784:	20004c90 	.word	0x20004c90

0000e788 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    e788:	b580      	push	{r7, lr}
    e78a:	b082      	sub	sp, #8
    e78c:	af00      	add	r7, sp, #0
    e78e:	6078      	str	r0, [r7, #4]
    e790:	687b      	ldr	r3, [r7, #4]
    e792:	4618      	mov	r0, r3
    e794:	4b0a      	ldr	r3, [pc, #40]	; (e7c0 <_ZN9CDC_ClassC1Ev+0x38>)
    e796:	4798      	blx	r3
    e798:	687b      	ldr	r3, [r7, #4]
    e79a:	3310      	adds	r3, #16
    e79c:	4618      	mov	r0, r3
    e79e:	4b09      	ldr	r3, [pc, #36]	; (e7c4 <_ZN9CDC_ClassC1Ev+0x3c>)
    e7a0:	4798      	blx	r3
    e7a2:	4a09      	ldr	r2, [pc, #36]	; (e7c8 <_ZN9CDC_ClassC1Ev+0x40>)
    e7a4:	687b      	ldr	r3, [r7, #4]
    e7a6:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    e7a8:	687b      	ldr	r3, [r7, #4]
    e7aa:	f04f 32ff 	mov.w	r2, #4294967295
    e7ae:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    e7b0:	4a06      	ldr	r2, [pc, #24]	; (e7cc <_ZN9CDC_ClassC1Ev+0x44>)
    e7b2:	687b      	ldr	r3, [r7, #4]
    e7b4:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    e7b6:	687b      	ldr	r3, [r7, #4]
    e7b8:	4618      	mov	r0, r3
    e7ba:	3708      	adds	r7, #8
    e7bc:	46bd      	mov	sp, r7
    e7be:	bd80      	pop	{r7, pc}
    e7c0:	0000e669 	.word	0x0000e669
    e7c4:	0000eda5 	.word	0x0000eda5
    e7c8:	00012178 	.word	0x00012178
    e7cc:	20004c90 	.word	0x20004c90

0000e7d0 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    e7d0:	b580      	push	{r7, lr}
    e7d2:	b082      	sub	sp, #8
    e7d4:	af00      	add	r7, sp, #0
    e7d6:	6078      	str	r0, [r7, #4]
    e7d8:	4a06      	ldr	r2, [pc, #24]	; (e7f4 <_ZN9CDC_ClassD1Ev+0x24>)
    e7da:	687b      	ldr	r3, [r7, #4]
    e7dc:	601a      	str	r2, [r3, #0]
    e7de:	687b      	ldr	r3, [r7, #4]
    e7e0:	3310      	adds	r3, #16
    e7e2:	4618      	mov	r0, r3
    e7e4:	4b04      	ldr	r3, [pc, #16]	; (e7f8 <_ZN9CDC_ClassD1Ev+0x28>)
    e7e6:	4798      	blx	r3
{
} //~CDC_Class
    e7e8:	687b      	ldr	r3, [r7, #4]
    e7ea:	4618      	mov	r0, r3
    e7ec:	3708      	adds	r7, #8
    e7ee:	46bd      	mov	sp, r7
    e7f0:	bd80      	pop	{r7, pc}
    e7f2:	bf00      	nop
    e7f4:	00012178 	.word	0x00012178
    e7f8:	0000edc5 	.word	0x0000edc5

0000e7fc <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    e7fc:	b580      	push	{r7, lr}
    e7fe:	b082      	sub	sp, #8
    e800:	af00      	add	r7, sp, #0
    e802:	6078      	str	r0, [r7, #4]
	
	OnInit();
    e804:	687b      	ldr	r3, [r7, #4]
    e806:	3310      	adds	r3, #16
    e808:	4618      	mov	r0, r3
    e80a:	4b07      	ldr	r3, [pc, #28]	; (e828 <_ZN9CDC_Class4InitEv+0x2c>)
    e80c:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    e80e:	4907      	ldr	r1, [pc, #28]	; (e82c <_ZN9CDC_Class4InitEv+0x30>)
    e810:	2003      	movs	r0, #3
    e812:	4b07      	ldr	r3, [pc, #28]	; (e830 <_ZN9CDC_Class4InitEv+0x34>)
    e814:	4798      	blx	r3
	
		
	if (connected)
    e816:	687b      	ldr	r3, [r7, #4]
    e818:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(200);
    e81a:	20c8      	movs	r0, #200	; 0xc8
    e81c:	4b05      	ldr	r3, [pc, #20]	; (e834 <_ZN9CDC_Class4InitEv+0x38>)
    e81e:	4798      	blx	r3

}
    e820:	bf00      	nop
    e822:	3708      	adds	r7, #8
    e824:	46bd      	mov	sp, r7
    e826:	bd80      	pop	{r7, pc}
    e828:	0000edd9 	.word	0x0000edd9
    e82c:	0000e731 	.word	0x0000e731
    e830:	0000c691 	.word	0x0000c691
    e834:	00002629 	.word	0x00002629

0000e838 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    e838:	b580      	push	{r7, lr}
    e83a:	b082      	sub	sp, #8
    e83c:	af00      	add	r7, sp, #0
    e83e:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    e840:	4b03      	ldr	r3, [pc, #12]	; (e850 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    e842:	4798      	blx	r3
    e844:	4603      	mov	r3, r0
	
}
    e846:	4618      	mov	r0, r3
    e848:	3708      	adds	r7, #8
    e84a:	46bd      	mov	sp, r7
    e84c:	bd80      	pop	{r7, pc}
    e84e:	bf00      	nop
    e850:	0000c709 	.word	0x0000c709

0000e854 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    e854:	b580      	push	{r7, lr}
    e856:	b084      	sub	sp, #16
    e858:	af00      	add	r7, sp, #0
    e85a:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    e85c:	687b      	ldr	r3, [r7, #4]
    e85e:	699b      	ldr	r3, [r3, #24]
    e860:	f1b3 3fff 	cmp.w	r3, #4294967295
    e864:	bf14      	ite	ne
    e866:	2301      	movne	r3, #1
    e868:	2300      	moveq	r3, #0
    e86a:	b2db      	uxtb	r3, r3
    e86c:	2b00      	cmp	r3, #0
    e86e:	d002      	beq.n	e876 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    e870:	687b      	ldr	r3, [r7, #4]
    e872:	699b      	ldr	r3, [r3, #24]
    e874:	e011      	b.n	e89a <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    e876:	687b      	ldr	r3, [r7, #4]
    e878:	681b      	ldr	r3, [r3, #0]
    e87a:	331c      	adds	r3, #28
    e87c:	681b      	ldr	r3, [r3, #0]
    e87e:	f107 010f 	add.w	r1, r7, #15
    e882:	2201      	movs	r2, #1
    e884:	6878      	ldr	r0, [r7, #4]
    e886:	4798      	blx	r3
    e888:	4602      	mov	r2, r0
    e88a:	687b      	ldr	r3, [r7, #4]
    e88c:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    e88e:	7bfb      	ldrb	r3, [r7, #15]
    e890:	461a      	mov	r2, r3
    e892:	687b      	ldr	r3, [r7, #4]
    e894:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    e896:	687b      	ldr	r3, [r7, #4]
    e898:	699b      	ldr	r3, [r3, #24]
}
    e89a:	4618      	mov	r0, r3
    e89c:	3710      	adds	r7, #16
    e89e:	46bd      	mov	sp, r7
    e8a0:	bd80      	pop	{r7, pc}
	...

0000e8a4 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    e8a4:	b580      	push	{r7, lr}
    e8a6:	b086      	sub	sp, #24
    e8a8:	af00      	add	r7, sp, #0
    e8aa:	60f8      	str	r0, [r7, #12]
    e8ac:	60b9      	str	r1, [r7, #8]
    e8ae:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    e8b0:	68fb      	ldr	r3, [r7, #12]
    e8b2:	7c1b      	ldrb	r3, [r3, #16]
    e8b4:	b2db      	uxtb	r3, r3
    e8b6:	2b00      	cmp	r3, #0
    e8b8:	d02e      	beq.n	e918 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e8ba:	687a      	ldr	r2, [r7, #4]
    e8bc:	4613      	mov	r3, r2
    e8be:	009b      	lsls	r3, r3, #2
    e8c0:	4413      	add	r3, r2
    e8c2:	005b      	lsls	r3, r3, #1
    e8c4:	461a      	mov	r2, r3
    e8c6:	4918      	ldr	r1, [pc, #96]	; (e928 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e8c8:	4818      	ldr	r0, [pc, #96]	; (e92c <_ZN9CDC_Class8readDataEPvl+0x88>)
    e8ca:	4b19      	ldr	r3, [pc, #100]	; (e930 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e8cc:	4798      	blx	r3
		rxReady=false;
    e8ce:	68fb      	ldr	r3, [r7, #12]
    e8d0:	2200      	movs	r2, #0
    e8d2:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e8d4:	687b      	ldr	r3, [r7, #4]
    e8d6:	4619      	mov	r1, r3
    e8d8:	68b8      	ldr	r0, [r7, #8]
    e8da:	4b16      	ldr	r3, [pc, #88]	; (e934 <_ZN9CDC_Class8readDataEPvl+0x90>)
    e8dc:	4798      	blx	r3
    e8de:	4603      	mov	r3, r0
    e8e0:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e8e2:	68fb      	ldr	r3, [r7, #12]
    e8e4:	7d5b      	ldrb	r3, [r3, #21]
    e8e6:	b2db      	uxtb	r3, r3
    e8e8:	f083 0301 	eor.w	r3, r3, #1
    e8ec:	b2db      	uxtb	r3, r3
    e8ee:	2b00      	cmp	r3, #0
    e8f0:	d006      	beq.n	e900 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e8f2:	68fb      	ldr	r3, [r7, #12]
    e8f4:	7c1b      	ldrb	r3, [r3, #16]
    e8f6:	b2db      	uxtb	r3, r3
    e8f8:	2b00      	cmp	r3, #0
    e8fa:	d001      	beq.n	e900 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e8fc:	2301      	movs	r3, #1
    e8fe:	e000      	b.n	e902 <_ZN9CDC_Class8readDataEPvl+0x5e>
    e900:	2300      	movs	r3, #0
    e902:	2b00      	cmp	r3, #0
    e904:	d000      	beq.n	e908 <_ZN9CDC_Class8readDataEPvl+0x64>
    e906:	e7ec      	b.n	e8e2 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e908:	4808      	ldr	r0, [pc, #32]	; (e92c <_ZN9CDC_Class8readDataEPvl+0x88>)
    e90a:	4b0b      	ldr	r3, [pc, #44]	; (e938 <_ZN9CDC_Class8readDataEPvl+0x94>)
    e90c:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e90e:	4906      	ldr	r1, [pc, #24]	; (e928 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e910:	4806      	ldr	r0, [pc, #24]	; (e92c <_ZN9CDC_Class8readDataEPvl+0x88>)
    e912:	4b0a      	ldr	r3, [pc, #40]	; (e93c <_ZN9CDC_Class8readDataEPvl+0x98>)
    e914:	4798      	blx	r3
    e916:	e001      	b.n	e91c <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e918:	2300      	movs	r3, #0
    e91a:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e91c:	7dfb      	ldrb	r3, [r7, #23]
}
    e91e:	4618      	mov	r0, r3
    e920:	3718      	adds	r7, #24
    e922:	46bd      	mov	sp, r7
    e924:	bd80      	pop	{r7, pc}
    e926:	bf00      	nop
    e928:	0000e699 	.word	0x0000e699
    e92c:	20004d9c 	.word	0x20004d9c
    e930:	0000efdd 	.word	0x0000efdd
    e934:	0000c5e5 	.word	0x0000c5e5
    e938:	0000ef25 	.word	0x0000ef25
    e93c:	0000f015 	.word	0x0000f015

0000e940 <_ZN9CDC_Class4readEv>:
	rxReady=false;
	r=cdcdf_acm_read((uint8_t *)p, size);
	return r;
}
int CDC_Class::read(void)
{
    e940:	b580      	push	{r7, lr}
    e942:	b084      	sub	sp, #16
    e944:	af00      	add	r7, sp, #0
    e946:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e948:	687b      	ldr	r3, [r7, #4]
    e94a:	2200      	movs	r2, #0
    e94c:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e94e:	f107 030f 	add.w	r3, r7, #15
    e952:	2101      	movs	r1, #1
    e954:	4618      	mov	r0, r3
    e956:	4b08      	ldr	r3, [pc, #32]	; (e978 <_ZN9CDC_Class4readEv+0x38>)
    e958:	4798      	blx	r3
	while(!rxReady);
    e95a:	687b      	ldr	r3, [r7, #4]
    e95c:	7d5b      	ldrb	r3, [r3, #21]
    e95e:	b2db      	uxtb	r3, r3
    e960:	f083 0301 	eor.w	r3, r3, #1
    e964:	b2db      	uxtb	r3, r3
    e966:	2b00      	cmp	r3, #0
    e968:	d000      	beq.n	e96c <_ZN9CDC_Class4readEv+0x2c>
    e96a:	e7f6      	b.n	e95a <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e96c:	7bfb      	ldrb	r3, [r7, #15]
}
    e96e:	4618      	mov	r0, r3
    e970:	3710      	adds	r7, #16
    e972:	46bd      	mov	sp, r7
    e974:	bd80      	pop	{r7, pc}
    e976:	bf00      	nop
    e978:	0000c5e5 	.word	0x0000c5e5

0000e97c <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e97c:	b580      	push	{r7, lr}
    e97e:	b082      	sub	sp, #8
    e980:	af00      	add	r7, sp, #0
    e982:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e984:	687b      	ldr	r3, [r7, #4]
    e986:	331c      	adds	r3, #28
    e988:	2140      	movs	r1, #64	; 0x40
    e98a:	4618      	mov	r0, r3
    e98c:	4b02      	ldr	r3, [pc, #8]	; (e998 <_ZN9CDC_Class5flushEv+0x1c>)
    e98e:	4798      	blx	r3
}
    e990:	bf00      	nop
    e992:	3708      	adds	r7, #8
    e994:	46bd      	mov	sp, r7
    e996:	bd80      	pop	{r7, pc}
    e998:	0000c629 	.word	0x0000c629

0000e99c <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e99c:	b580      	push	{r7, lr}
    e99e:	b082      	sub	sp, #8
    e9a0:	af00      	add	r7, sp, #0
    e9a2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e9a4:	4b02      	ldr	r3, [pc, #8]	; (e9b0 <_ZN9CDC_Class5clearEv+0x14>)
    e9a6:	4798      	blx	r3
}
    e9a8:	bf00      	nop
    e9aa:	3708      	adds	r7, #8
    e9ac:	46bd      	mov	sp, r7
    e9ae:	bd80      	pop	{r7, pc}
    e9b0:	0000c66d 	.word	0x0000c66d

0000e9b4 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e9b4:	b580      	push	{r7, lr}
    e9b6:	b082      	sub	sp, #8
    e9b8:	af00      	add	r7, sp, #0
    e9ba:	6078      	str	r0, [r7, #4]
    e9bc:	460b      	mov	r3, r1
    e9be:	70fb      	strb	r3, [r7, #3]
		while(!txReady);
    e9c0:	687b      	ldr	r3, [r7, #4]
    e9c2:	7d1b      	ldrb	r3, [r3, #20]
    e9c4:	b2db      	uxtb	r3, r3
    e9c6:	f083 0301 	eor.w	r3, r3, #1
    e9ca:	b2db      	uxtb	r3, r3
    e9cc:	2b00      	cmp	r3, #0
    e9ce:	d000      	beq.n	e9d2 <_ZN9CDC_Class5writeEh+0x1e>
    e9d0:	e7f6      	b.n	e9c0 <_ZN9CDC_Class5writeEh+0xc>
	
		return writeData(&c, 1);
    e9d2:	687b      	ldr	r3, [r7, #4]
    e9d4:	681b      	ldr	r3, [r3, #0]
    e9d6:	3324      	adds	r3, #36	; 0x24
    e9d8:	681b      	ldr	r3, [r3, #0]
    e9da:	1cf9      	adds	r1, r7, #3
    e9dc:	2201      	movs	r2, #1
    e9de:	6878      	ldr	r0, [r7, #4]
    e9e0:	4798      	blx	r3
    e9e2:	4603      	mov	r3, r0
}
    e9e4:	4618      	mov	r0, r3
    e9e6:	3708      	adds	r7, #8
    e9e8:	46bd      	mov	sp, r7
    e9ea:	bd80      	pop	{r7, pc}

0000e9ec <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e9ec:	b580      	push	{r7, lr}
    e9ee:	b086      	sub	sp, #24
    e9f0:	af00      	add	r7, sp, #0
    e9f2:	60f8      	str	r0, [r7, #12]
    e9f4:	60b9      	str	r1, [r7, #8]
    e9f6:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e9f8:	68fb      	ldr	r3, [r7, #12]
    e9fa:	7c1b      	ldrb	r3, [r3, #16]
    e9fc:	b2db      	uxtb	r3, r3
    e9fe:	2b00      	cmp	r3, #0
    ea00:	d02f      	beq.n	ea62 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    ea02:	687a      	ldr	r2, [r7, #4]
    ea04:	4613      	mov	r3, r2
    ea06:	009b      	lsls	r3, r3, #2
    ea08:	4413      	add	r3, r2
    ea0a:	005b      	lsls	r3, r3, #1
    ea0c:	461a      	mov	r2, r3
    ea0e:	4917      	ldr	r1, [pc, #92]	; (ea6c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    ea10:	4817      	ldr	r0, [pc, #92]	; (ea70 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ea12:	4b18      	ldr	r3, [pc, #96]	; (ea74 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    ea14:	4798      	blx	r3
		txReady=false;
    ea16:	68fb      	ldr	r3, [r7, #12]
    ea18:	2200      	movs	r2, #0
    ea1a:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    ea1c:	687b      	ldr	r3, [r7, #4]
    ea1e:	4619      	mov	r1, r3
    ea20:	68b8      	ldr	r0, [r7, #8]
    ea22:	4b15      	ldr	r3, [pc, #84]	; (ea78 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    ea24:	4798      	blx	r3
    ea26:	4603      	mov	r3, r0
    ea28:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    ea2a:	68fb      	ldr	r3, [r7, #12]
    ea2c:	7d1b      	ldrb	r3, [r3, #20]
    ea2e:	b2db      	uxtb	r3, r3
    ea30:	f083 0301 	eor.w	r3, r3, #1
    ea34:	b2db      	uxtb	r3, r3
    ea36:	2b00      	cmp	r3, #0
    ea38:	d006      	beq.n	ea48 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    ea3a:	68fb      	ldr	r3, [r7, #12]
    ea3c:	7c1b      	ldrb	r3, [r3, #16]
    ea3e:	b2db      	uxtb	r3, r3
    ea40:	2b00      	cmp	r3, #0
    ea42:	d001      	beq.n	ea48 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    ea44:	2301      	movs	r3, #1
    ea46:	e000      	b.n	ea4a <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    ea48:	2300      	movs	r3, #0
    ea4a:	2b00      	cmp	r3, #0
    ea4c:	d000      	beq.n	ea50 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    ea4e:	e7ec      	b.n	ea2a <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    ea50:	4807      	ldr	r0, [pc, #28]	; (ea70 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ea52:	4b0a      	ldr	r3, [pc, #40]	; (ea7c <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    ea54:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    ea56:	4905      	ldr	r1, [pc, #20]	; (ea6c <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    ea58:	4805      	ldr	r0, [pc, #20]	; (ea70 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    ea5a:	4b09      	ldr	r3, [pc, #36]	; (ea80 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    ea5c:	4798      	blx	r3
		return r;
    ea5e:	697b      	ldr	r3, [r7, #20]
    ea60:	e000      	b.n	ea64 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    ea62:	2300      	movs	r3, #0
	}
	

}
    ea64:	4618      	mov	r0, r3
    ea66:	3718      	adds	r7, #24
    ea68:	46bd      	mov	sp, r7
    ea6a:	bd80      	pop	{r7, pc}
    ea6c:	0000e699 	.word	0x0000e699
    ea70:	20004d9c 	.word	0x20004d9c
    ea74:	0000efdd 	.word	0x0000efdd
    ea78:	0000c629 	.word	0x0000c629
    ea7c:	0000ef25 	.word	0x0000ef25
    ea80:	0000f015 	.word	0x0000f015

0000ea84 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    ea84:	b580      	push	{r7, lr}
    ea86:	b086      	sub	sp, #24
    ea88:	af00      	add	r7, sp, #0
    ea8a:	60f8      	str	r0, [r7, #12]
    ea8c:	60b9      	str	r1, [r7, #8]
    ea8e:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    ea90:	68fb      	ldr	r3, [r7, #12]
    ea92:	2200      	movs	r2, #0
    ea94:	751a      	strb	r2, [r3, #20]

 	if (connected){
    ea96:	68fb      	ldr	r3, [r7, #12]
    ea98:	7c1b      	ldrb	r3, [r3, #16]
    ea9a:	b2db      	uxtb	r3, r3
    ea9c:	2b00      	cmp	r3, #0
    ea9e:	d02a      	beq.n	eaf6 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    eaa0:	687a      	ldr	r2, [r7, #4]
    eaa2:	4613      	mov	r3, r2
    eaa4:	009b      	lsls	r3, r3, #2
    eaa6:	4413      	add	r3, r2
    eaa8:	005b      	lsls	r3, r3, #1
    eaaa:	461a      	mov	r2, r3
    eaac:	4915      	ldr	r1, [pc, #84]	; (eb04 <_ZN9CDC_Class5writeEPKhj+0x80>)
    eaae:	4816      	ldr	r0, [pc, #88]	; (eb08 <_ZN9CDC_Class5writeEPKhj+0x84>)
    eab0:	4b16      	ldr	r3, [pc, #88]	; (eb0c <_ZN9CDC_Class5writeEPKhj+0x88>)
    eab2:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    eab4:	6879      	ldr	r1, [r7, #4]
    eab6:	68b8      	ldr	r0, [r7, #8]
    eab8:	4b15      	ldr	r3, [pc, #84]	; (eb10 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    eaba:	4798      	blx	r3
    eabc:	4603      	mov	r3, r0
    eabe:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    eac0:	68fb      	ldr	r3, [r7, #12]
    eac2:	7d1b      	ldrb	r3, [r3, #20]
    eac4:	b2db      	uxtb	r3, r3
    eac6:	f083 0301 	eor.w	r3, r3, #1
    eaca:	b2db      	uxtb	r3, r3
    eacc:	2b00      	cmp	r3, #0
    eace:	d006      	beq.n	eade <_ZN9CDC_Class5writeEPKhj+0x5a>
    ead0:	68fb      	ldr	r3, [r7, #12]
    ead2:	7c1b      	ldrb	r3, [r3, #16]
    ead4:	b2db      	uxtb	r3, r3
    ead6:	2b00      	cmp	r3, #0
    ead8:	d001      	beq.n	eade <_ZN9CDC_Class5writeEPKhj+0x5a>
    eada:	2301      	movs	r3, #1
    eadc:	e000      	b.n	eae0 <_ZN9CDC_Class5writeEPKhj+0x5c>
    eade:	2300      	movs	r3, #0
    eae0:	2b00      	cmp	r3, #0
    eae2:	d000      	beq.n	eae6 <_ZN9CDC_Class5writeEPKhj+0x62>
    eae4:	e7ec      	b.n	eac0 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    eae6:	4808      	ldr	r0, [pc, #32]	; (eb08 <_ZN9CDC_Class5writeEPKhj+0x84>)
    eae8:	4b0a      	ldr	r3, [pc, #40]	; (eb14 <_ZN9CDC_Class5writeEPKhj+0x90>)
    eaea:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    eaec:	4905      	ldr	r1, [pc, #20]	; (eb04 <_ZN9CDC_Class5writeEPKhj+0x80>)
    eaee:	4806      	ldr	r0, [pc, #24]	; (eb08 <_ZN9CDC_Class5writeEPKhj+0x84>)
    eaf0:	4b09      	ldr	r3, [pc, #36]	; (eb18 <_ZN9CDC_Class5writeEPKhj+0x94>)
    eaf2:	4798      	blx	r3
    eaf4:	e001      	b.n	eafa <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    eaf6:	2300      	movs	r3, #0
    eaf8:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    eafa:	697b      	ldr	r3, [r7, #20]
}
    eafc:	4618      	mov	r0, r3
    eafe:	3718      	adds	r7, #24
    eb00:	46bd      	mov	sp, r7
    eb02:	bd80      	pop	{r7, pc}
    eb04:	0000e699 	.word	0x0000e699
    eb08:	20004d9c 	.word	0x20004d9c
    eb0c:	0000efdd 	.word	0x0000efdd
    eb10:	0000c629 	.word	0x0000c629
    eb14:	0000ef25 	.word	0x0000ef25
    eb18:	0000f015 	.word	0x0000f015

0000eb1c <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    eb1c:	b480      	push	{r7}
    eb1e:	b083      	sub	sp, #12
    eb20:	af00      	add	r7, sp, #0
    eb22:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    eb24:	687b      	ldr	r3, [r7, #4]
    eb26:	7d5b      	ldrb	r3, [r3, #21]
    eb28:	b2db      	uxtb	r3, r3
    eb2a:	2b00      	cmp	r3, #0
    eb2c:	d006      	beq.n	eb3c <_ZN9CDC_Class9availableEv+0x20>
    eb2e:	687b      	ldr	r3, [r7, #4]
    eb30:	7d1b      	ldrb	r3, [r3, #20]
    eb32:	b2db      	uxtb	r3, r3
    eb34:	2b00      	cmp	r3, #0
    eb36:	d001      	beq.n	eb3c <_ZN9CDC_Class9availableEv+0x20>
    eb38:	2301      	movs	r3, #1
    eb3a:	e000      	b.n	eb3e <_ZN9CDC_Class9availableEv+0x22>
    eb3c:	2300      	movs	r3, #0
    eb3e:	2b00      	cmp	r3, #0
    eb40:	d001      	beq.n	eb46 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    eb42:	2301      	movs	r3, #1
    eb44:	e000      	b.n	eb48 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    eb46:	2300      	movs	r3, #0
	}
	
}
    eb48:	4618      	mov	r0, r3
    eb4a:	370c      	adds	r7, #12
    eb4c:	46bd      	mov	sp, r7
    eb4e:	bc80      	pop	{r7}
    eb50:	4770      	bx	lr
	...

0000eb54 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    eb54:	b580      	push	{r7, lr}
    eb56:	b082      	sub	sp, #8
    eb58:	af00      	add	r7, sp, #0
    eb5a:	6078      	str	r0, [r7, #4]
    eb5c:	6039      	str	r1, [r7, #0]
    eb5e:	687b      	ldr	r3, [r7, #4]
    eb60:	2b01      	cmp	r3, #1
    eb62:	d10c      	bne.n	eb7e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    eb64:	683b      	ldr	r3, [r7, #0]
    eb66:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eb6a:	4293      	cmp	r3, r2
    eb6c:	d107      	bne.n	eb7e <_Z41__static_initialization_and_destruction_0ii+0x2a>
    eb6e:	4806      	ldr	r0, [pc, #24]	; (eb88 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    eb70:	4b06      	ldr	r3, [pc, #24]	; (eb8c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    eb72:	4798      	blx	r3
    eb74:	4a06      	ldr	r2, [pc, #24]	; (eb90 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    eb76:	4907      	ldr	r1, [pc, #28]	; (eb94 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    eb78:	4803      	ldr	r0, [pc, #12]	; (eb88 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    eb7a:	4b07      	ldr	r3, [pc, #28]	; (eb98 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    eb7c:	4798      	blx	r3
    eb7e:	bf00      	nop
    eb80:	3708      	adds	r7, #8
    eb82:	46bd      	mov	sp, r7
    eb84:	bd80      	pop	{r7, pc}
    eb86:	bf00      	nop
    eb88:	20004c94 	.word	0x20004c94
    eb8c:	0000e789 	.word	0x0000e789
    eb90:	20000000 	.word	0x20000000
    eb94:	0000e7d1 	.word	0x0000e7d1
    eb98:	0000f1f5 	.word	0x0000f1f5

0000eb9c <_GLOBAL__sub_I_ptrCDCClass>:
    eb9c:	b580      	push	{r7, lr}
    eb9e:	af00      	add	r7, sp, #0
    eba0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eba4:	2001      	movs	r0, #1
    eba6:	4b01      	ldr	r3, [pc, #4]	; (ebac <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    eba8:	4798      	blx	r3
    ebaa:	bd80      	pop	{r7, pc}
    ebac:	0000eb55 	.word	0x0000eb55

0000ebb0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    ebb0:	b580      	push	{r7, lr}
    ebb2:	b086      	sub	sp, #24
    ebb4:	af00      	add	r7, sp, #0
    ebb6:	60f8      	str	r0, [r7, #12]
    ebb8:	60b9      	str	r1, [r7, #8]
    ebba:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    ebbc:	2300      	movs	r3, #0
    ebbe:	617b      	str	r3, [r7, #20]
  while (size--) {
    ebc0:	687b      	ldr	r3, [r7, #4]
    ebc2:	1e5a      	subs	r2, r3, #1
    ebc4:	607a      	str	r2, [r7, #4]
    ebc6:	2b00      	cmp	r3, #0
    ebc8:	bf14      	ite	ne
    ebca:	2301      	movne	r3, #1
    ebcc:	2300      	moveq	r3, #0
    ebce:	b2db      	uxtb	r3, r3
    ebd0:	2b00      	cmp	r3, #0
    ebd2:	d016      	beq.n	ec02 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    ebd4:	68fb      	ldr	r3, [r7, #12]
    ebd6:	681b      	ldr	r3, [r3, #0]
    ebd8:	681a      	ldr	r2, [r3, #0]
    ebda:	68bb      	ldr	r3, [r7, #8]
    ebdc:	1c59      	adds	r1, r3, #1
    ebde:	60b9      	str	r1, [r7, #8]
    ebe0:	781b      	ldrb	r3, [r3, #0]
    ebe2:	4619      	mov	r1, r3
    ebe4:	68f8      	ldr	r0, [r7, #12]
    ebe6:	4790      	blx	r2
    ebe8:	4603      	mov	r3, r0
    ebea:	2b00      	cmp	r3, #0
    ebec:	bf14      	ite	ne
    ebee:	2301      	movne	r3, #1
    ebf0:	2300      	moveq	r3, #0
    ebf2:	b2db      	uxtb	r3, r3
    ebf4:	2b00      	cmp	r3, #0
    ebf6:	d003      	beq.n	ec00 <_ZN5Print5writeEPKhj+0x50>
    ebf8:	697b      	ldr	r3, [r7, #20]
    ebfa:	3301      	adds	r3, #1
    ebfc:	617b      	str	r3, [r7, #20]
  while (size--) {
    ebfe:	e7df      	b.n	ebc0 <_ZN5Print5writeEPKhj+0x10>
    else break;
    ec00:	bf00      	nop
  }
  return n;
    ec02:	697b      	ldr	r3, [r7, #20]
}
    ec04:	4618      	mov	r0, r3
    ec06:	3718      	adds	r7, #24
    ec08:	46bd      	mov	sp, r7
    ec0a:	bd80      	pop	{r7, pc}

0000ec0c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    ec0c:	b580      	push	{r7, lr}
    ec0e:	b082      	sub	sp, #8
    ec10:	af00      	add	r7, sp, #0
    ec12:	6078      	str	r0, [r7, #4]
    ec14:	6039      	str	r1, [r7, #0]
  return write(str);
    ec16:	6839      	ldr	r1, [r7, #0]
    ec18:	6878      	ldr	r0, [r7, #4]
    ec1a:	4b03      	ldr	r3, [pc, #12]	; (ec28 <_ZN5Print5printEPKc+0x1c>)
    ec1c:	4798      	blx	r3
    ec1e:	4603      	mov	r3, r0
}
    ec20:	4618      	mov	r0, r3
    ec22:	3708      	adds	r7, #8
    ec24:	46bd      	mov	sp, r7
    ec26:	bd80      	pop	{r7, pc}
    ec28:	00000c25 	.word	0x00000c25

0000ec2c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    ec2c:	b480      	push	{r7}
    ec2e:	b083      	sub	sp, #12
    ec30:	af00      	add	r7, sp, #0
    ec32:	6078      	str	r0, [r7, #4]
    ec34:	460b      	mov	r3, r1
    ec36:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    ec38:	78fb      	ldrb	r3, [r7, #3]
    ec3a:	687a      	ldr	r2, [r7, #4]
    ec3c:	01db      	lsls	r3, r3, #7
    ec3e:	4413      	add	r3, r2
    ec40:	681b      	ldr	r3, [r3, #0]
}
    ec42:	4618      	mov	r0, r3
    ec44:	370c      	adds	r7, #12
    ec46:	46bd      	mov	sp, r7
    ec48:	bc80      	pop	{r7}
    ec4a:	4770      	bx	lr

0000ec4c <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    ec4c:	b480      	push	{r7}
    ec4e:	b083      	sub	sp, #12
    ec50:	af00      	add	r7, sp, #0
    ec52:	6078      	str	r0, [r7, #4]
    ec54:	460b      	mov	r3, r1
    ec56:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    ec58:	78fb      	ldrb	r3, [r7, #3]
    ec5a:	687a      	ldr	r2, [r7, #4]
    ec5c:	01db      	lsls	r3, r3, #7
    ec5e:	4413      	add	r3, r2
    ec60:	3310      	adds	r3, #16
    ec62:	681b      	ldr	r3, [r3, #0]
}
    ec64:	4618      	mov	r0, r3
    ec66:	370c      	adds	r7, #12
    ec68:	46bd      	mov	sp, r7
    ec6a:	bc80      	pop	{r7}
    ec6c:	4770      	bx	lr

0000ec6e <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    ec6e:	b480      	push	{r7}
    ec70:	b083      	sub	sp, #12
    ec72:	af00      	add	r7, sp, #0
    ec74:	6078      	str	r0, [r7, #4]
    ec76:	460b      	mov	r3, r1
    ec78:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    ec7a:	78fb      	ldrb	r3, [r7, #3]
    ec7c:	687a      	ldr	r2, [r7, #4]
    ec7e:	01db      	lsls	r3, r3, #7
    ec80:	4413      	add	r3, r2
    ec82:	3320      	adds	r3, #32
    ec84:	681b      	ldr	r3, [r3, #0]
}
    ec86:	4618      	mov	r0, r3
    ec88:	370c      	adds	r7, #12
    ec8a:	46bd      	mov	sp, r7
    ec8c:	bc80      	pop	{r7}
    ec8e:	4770      	bx	lr

0000ec90 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    ec90:	b580      	push	{r7, lr}
    ec92:	b086      	sub	sp, #24
    ec94:	af00      	add	r7, sp, #0
    ec96:	4603      	mov	r3, r0
    ec98:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    ec9a:	f107 030c 	add.w	r3, r7, #12
    ec9e:	4618      	mov	r0, r3
    eca0:	4b13      	ldr	r3, [pc, #76]	; (ecf0 <_gpio_get_level+0x60>)
    eca2:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    eca4:	79fb      	ldrb	r3, [r7, #7]
    eca6:	4619      	mov	r1, r3
    eca8:	4812      	ldr	r0, [pc, #72]	; (ecf4 <_gpio_get_level+0x64>)
    ecaa:	4b13      	ldr	r3, [pc, #76]	; (ecf8 <_gpio_get_level+0x68>)
    ecac:	4798      	blx	r3
    ecae:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    ecb0:	79fb      	ldrb	r3, [r7, #7]
    ecb2:	4619      	mov	r1, r3
    ecb4:	480f      	ldr	r0, [pc, #60]	; (ecf4 <_gpio_get_level+0x64>)
    ecb6:	4b11      	ldr	r3, [pc, #68]	; (ecfc <_gpio_get_level+0x6c>)
    ecb8:	4798      	blx	r3
    ecba:	4602      	mov	r2, r0
    ecbc:	697b      	ldr	r3, [r7, #20]
    ecbe:	43db      	mvns	r3, r3
    ecc0:	4013      	ands	r3, r2
    ecc2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    ecc4:	79fb      	ldrb	r3, [r7, #7]
    ecc6:	4619      	mov	r1, r3
    ecc8:	480a      	ldr	r0, [pc, #40]	; (ecf4 <_gpio_get_level+0x64>)
    ecca:	4b0d      	ldr	r3, [pc, #52]	; (ed00 <_gpio_get_level+0x70>)
    eccc:	4798      	blx	r3
    ecce:	4602      	mov	r2, r0
    ecd0:	697b      	ldr	r3, [r7, #20]
    ecd2:	4013      	ands	r3, r2
    ecd4:	693a      	ldr	r2, [r7, #16]
    ecd6:	4313      	orrs	r3, r2
    ecd8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    ecda:	f107 030c 	add.w	r3, r7, #12
    ecde:	4618      	mov	r0, r3
    ece0:	4b08      	ldr	r3, [pc, #32]	; (ed04 <_gpio_get_level+0x74>)
    ece2:	4798      	blx	r3

	return tmp;
    ece4:	693b      	ldr	r3, [r7, #16]
}
    ece6:	4618      	mov	r0, r3
    ece8:	3718      	adds	r7, #24
    ecea:	46bd      	mov	sp, r7
    ecec:	bd80      	pop	{r7, pc}
    ecee:	bf00      	nop
    ecf0:	0000b805 	.word	0x0000b805
    ecf4:	41008000 	.word	0x41008000
    ecf8:	0000ec2d 	.word	0x0000ec2d
    ecfc:	0000ec6f 	.word	0x0000ec6f
    ed00:	0000ec4d 	.word	0x0000ec4d
    ed04:	0000b82b 	.word	0x0000b82b

0000ed08 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    ed08:	b580      	push	{r7, lr}
    ed0a:	b082      	sub	sp, #8
    ed0c:	af00      	add	r7, sp, #0
    ed0e:	4603      	mov	r3, r0
    ed10:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    ed12:	79fb      	ldrb	r3, [r7, #7]
    ed14:	115b      	asrs	r3, r3, #5
    ed16:	b2db      	uxtb	r3, r3
    ed18:	4618      	mov	r0, r3
    ed1a:	4b09      	ldr	r3, [pc, #36]	; (ed40 <gpio_get_pin_level+0x38>)
    ed1c:	4798      	blx	r3
    ed1e:	4601      	mov	r1, r0
    ed20:	79fb      	ldrb	r3, [r7, #7]
    ed22:	f003 031f 	and.w	r3, r3, #31
    ed26:	2201      	movs	r2, #1
    ed28:	fa02 f303 	lsl.w	r3, r2, r3
    ed2c:	400b      	ands	r3, r1
    ed2e:	2b00      	cmp	r3, #0
    ed30:	bf14      	ite	ne
    ed32:	2301      	movne	r3, #1
    ed34:	2300      	moveq	r3, #0
    ed36:	b2db      	uxtb	r3, r3
}
    ed38:	4618      	mov	r0, r3
    ed3a:	3708      	adds	r7, #8
    ed3c:	46bd      	mov	sp, r7
    ed3e:	bd80      	pop	{r7, pc}
    ed40:	0000ec91 	.word	0x0000ec91

0000ed44 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "TimerSerial_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    ed44:	b480      	push	{r7}
    ed46:	b083      	sub	sp, #12
    ed48:	af00      	add	r7, sp, #0
    ed4a:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    ed4c:	4b06      	ldr	r3, [pc, #24]	; (ed68 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    ed4e:	681b      	ldr	r3, [r3, #0]
    ed50:	2201      	movs	r2, #1
    ed52:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    ed54:	4b04      	ldr	r3, [pc, #16]	; (ed68 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    ed56:	681b      	ldr	r3, [r3, #0]
    ed58:	2200      	movs	r2, #0
    ed5a:	705a      	strb	r2, [r3, #1]
}
    ed5c:	bf00      	nop
    ed5e:	370c      	adds	r7, #12
    ed60:	46bd      	mov	sp, r7
    ed62:	bc80      	pop	{r7}
    ed64:	4770      	bx	lr
    ed66:	bf00      	nop
    ed68:	20004cf4 	.word	0x20004cf4

0000ed6c <_ZL10USBPluggedv>:

static void USBPlugged(void){
    ed6c:	b580      	push	{r7, lr}
    ed6e:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    ed70:	2040      	movs	r0, #64	; 0x40
    ed72:	4b0a      	ldr	r3, [pc, #40]	; (ed9c <_ZL10USBPluggedv+0x30>)
    ed74:	4798      	blx	r3
    ed76:	4603      	mov	r3, r0
    ed78:	2b00      	cmp	r3, #0
    ed7a:	d004      	beq.n	ed86 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    ed7c:	4b08      	ldr	r3, [pc, #32]	; (eda0 <_ZL10USBPluggedv+0x34>)
    ed7e:	681b      	ldr	r3, [r3, #0]
    ed80:	2201      	movs	r2, #1
    ed82:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    ed84:	e007      	b.n	ed96 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    ed86:	4b06      	ldr	r3, [pc, #24]	; (eda0 <_ZL10USBPluggedv+0x34>)
    ed88:	681b      	ldr	r3, [r3, #0]
    ed8a:	2200      	movs	r2, #0
    ed8c:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    ed8e:	4b04      	ldr	r3, [pc, #16]	; (eda0 <_ZL10USBPluggedv+0x34>)
    ed90:	681b      	ldr	r3, [r3, #0]
    ed92:	2200      	movs	r2, #0
    ed94:	701a      	strb	r2, [r3, #0]
}
    ed96:	bf00      	nop
    ed98:	bd80      	pop	{r7, pc}
    ed9a:	bf00      	nop
    ed9c:	0000ed09 	.word	0x0000ed09
    eda0:	20004cf4 	.word	0x20004cf4

0000eda4 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    eda4:	b480      	push	{r7}
    eda6:	b083      	sub	sp, #12
    eda8:	af00      	add	r7, sp, #0
    edaa:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    edac:	4a04      	ldr	r2, [pc, #16]	; (edc0 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    edae:	687b      	ldr	r3, [r7, #4]
    edb0:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    edb2:	687b      	ldr	r3, [r7, #4]
    edb4:	4618      	mov	r0, r3
    edb6:	370c      	adds	r7, #12
    edb8:	46bd      	mov	sp, r7
    edba:	bc80      	pop	{r7}
    edbc:	4770      	bx	lr
    edbe:	bf00      	nop
    edc0:	20004cf4 	.word	0x20004cf4

0000edc4 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    edc4:	b480      	push	{r7}
    edc6:	b083      	sub	sp, #12
    edc8:	af00      	add	r7, sp, #0
    edca:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    edcc:	687b      	ldr	r3, [r7, #4]
    edce:	4618      	mov	r0, r3
    edd0:	370c      	adds	r7, #12
    edd2:	46bd      	mov	sp, r7
    edd4:	bc80      	pop	{r7}
    edd6:	4770      	bx	lr

0000edd8 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    edd8:	b580      	push	{r7, lr}
    edda:	b082      	sub	sp, #8
    eddc:	af00      	add	r7, sp, #0
    edde:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    ede0:	491e      	ldr	r1, [pc, #120]	; (ee5c <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    ede2:	2040      	movs	r0, #64	; 0x40
    ede4:	4b1e      	ldr	r3, [pc, #120]	; (ee60 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    ede6:	4798      	blx	r3
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    ede8:	2040      	movs	r0, #64	; 0x40
    edea:	4b1e      	ldr	r3, [pc, #120]	; (ee64 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    edec:	4798      	blx	r3
    edee:	4603      	mov	r3, r0
    edf0:	461a      	mov	r2, r3
    edf2:	687b      	ldr	r3, [r7, #4]
    edf4:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    edf6:	687b      	ldr	r3, [r7, #4]
    edf8:	78db      	ldrb	r3, [r3, #3]
    edfa:	2b00      	cmp	r3, #0
    edfc:	d024      	beq.n	ee48 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    edfe:	687b      	ldr	r3, [r7, #4]
    ee00:	2200      	movs	r2, #0
    ee02:	709a      	strb	r2, [r3, #2]
			plugged=true;
    ee04:	687b      	ldr	r3, [r7, #4]
    ee06:	2201      	movs	r2, #1
    ee08:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    ee0a:	f44f 7216 	mov.w	r2, #600	; 0x258
    ee0e:	4916      	ldr	r1, [pc, #88]	; (ee68 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    ee10:	4816      	ldr	r0, [pc, #88]	; (ee6c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    ee12:	4b17      	ldr	r3, [pc, #92]	; (ee70 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    ee14:	4798      	blx	r3
			usbTerminalTimer.Start();
    ee16:	4815      	ldr	r0, [pc, #84]	; (ee6c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    ee18:	4b16      	ldr	r3, [pc, #88]	; (ee74 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    ee1a:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    ee1c:	4816      	ldr	r0, [pc, #88]	; (ee78 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    ee1e:	4b17      	ldr	r3, [pc, #92]	; (ee7c <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    ee20:	4798      	blx	r3
    ee22:	4603      	mov	r3, r0
    ee24:	f083 0301 	eor.w	r3, r3, #1
    ee28:	b2db      	uxtb	r3, r3
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	d008      	beq.n	ee40 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    ee2e:	687b      	ldr	r3, [r7, #4]
    ee30:	789b      	ldrb	r3, [r3, #2]
    ee32:	b2db      	uxtb	r3, r3
    ee34:	2b00      	cmp	r3, #0
    ee36:	d0f1      	beq.n	ee1c <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    ee38:	687b      	ldr	r3, [r7, #4]
    ee3a:	2200      	movs	r2, #0
    ee3c:	701a      	strb	r2, [r3, #0]
					return;
    ee3e:	e009      	b.n	ee54 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    ee40:	480a      	ldr	r0, [pc, #40]	; (ee6c <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    ee42:	4b0f      	ldr	r3, [pc, #60]	; (ee80 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    ee44:	4798      	blx	r3
    ee46:	e005      	b.n	ee54 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    ee48:	687b      	ldr	r3, [r7, #4]
    ee4a:	2200      	movs	r2, #0
    ee4c:	701a      	strb	r2, [r3, #0]
			plugged=false;
    ee4e:	687b      	ldr	r3, [r7, #4]
    ee50:	2200      	movs	r2, #0
    ee52:	705a      	strb	r2, [r3, #1]
		}
		
}
    ee54:	3708      	adds	r7, #8
    ee56:	46bd      	mov	sp, r7
    ee58:	bd80      	pop	{r7, pc}
    ee5a:	bf00      	nop
    ee5c:	0000ed6d 	.word	0x0000ed6d
    ee60:	000026bd 	.word	0x000026bd
    ee64:	0000ed09 	.word	0x0000ed09
    ee68:	0000ed45 	.word	0x0000ed45
    ee6c:	20004d9c 	.word	0x20004d9c
    ee70:	0000efb5 	.word	0x0000efb5
    ee74:	0000ef01 	.word	0x0000ef01
    ee78:	20004c94 	.word	0x20004c94
    ee7c:	0000e839 	.word	0x0000e839
    ee80:	0000ef25 	.word	0x0000ef25

0000ee84 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    ee84:	b580      	push	{r7, lr}
    ee86:	b082      	sub	sp, #8
    ee88:	af00      	add	r7, sp, #0
    ee8a:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    ee8c:	4b04      	ldr	r3, [pc, #16]	; (eea0 <_ZL7task_cbPK10timer_task+0x1c>)
    ee8e:	681b      	ldr	r3, [r3, #0]
    ee90:	4618      	mov	r0, r3
    ee92:	4b04      	ldr	r3, [pc, #16]	; (eea4 <_ZL7task_cbPK10timer_task+0x20>)
    ee94:	4798      	blx	r3
}
    ee96:	bf00      	nop
    ee98:	3708      	adds	r7, #8
    ee9a:	46bd      	mov	sp, r7
    ee9c:	bd80      	pop	{r7, pc}
    ee9e:	bf00      	nop
    eea0:	20004cf8 	.word	0x20004cf8
    eea4:	0000ef4d 	.word	0x0000ef4d

0000eea8 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    eea8:	b480      	push	{r7}
    eeaa:	b083      	sub	sp, #12
    eeac:	af00      	add	r7, sp, #0
    eeae:	6078      	str	r0, [r7, #4]
    eeb0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    eeb2:	687b      	ldr	r3, [r7, #4]
    eeb4:	683a      	ldr	r2, [r7, #0]
    eeb6:	60da      	str	r2, [r3, #12]
	ptrTimerSerialClass=this;
    eeb8:	4a08      	ldr	r2, [pc, #32]	; (eedc <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    eeba:	687b      	ldr	r3, [r7, #4]
    eebc:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    eebe:	687b      	ldr	r3, [r7, #4]
    eec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    eec4:	615a      	str	r2, [r3, #20]
	task->cb=task_cb;
    eec6:	687b      	ldr	r3, [r7, #4]
    eec8:	689b      	ldr	r3, [r3, #8]
    eeca:	4a05      	ldr	r2, [pc, #20]	; (eee0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    eecc:	60da      	str	r2, [r3, #12]
} //Timer_Class
    eece:	687b      	ldr	r3, [r7, #4]
    eed0:	4618      	mov	r0, r3
    eed2:	370c      	adds	r7, #12
    eed4:	46bd      	mov	sp, r7
    eed6:	bc80      	pop	{r7}
    eed8:	4770      	bx	lr
    eeda:	bf00      	nop
    eedc:	20004cf8 	.word	0x20004cf8
    eee0:	0000ee85 	.word	0x0000ee85

0000eee4 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    eee4:	b480      	push	{r7}
    eee6:	b083      	sub	sp, #12
    eee8:	af00      	add	r7, sp, #0
    eeea:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    eeec:	687b      	ldr	r3, [r7, #4]
    eeee:	2200      	movs	r2, #0
    eef0:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    eef2:	687b      	ldr	r3, [r7, #4]
    eef4:	4618      	mov	r0, r3
    eef6:	370c      	adds	r7, #12
    eef8:	46bd      	mov	sp, r7
    eefa:	bc80      	pop	{r7}
    eefc:	4770      	bx	lr
	...

0000ef00 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    ef00:	b580      	push	{r7, lr}
    ef02:	b084      	sub	sp, #16
    ef04:	af00      	add	r7, sp, #0
    ef06:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    ef08:	687b      	ldr	r3, [r7, #4]
    ef0a:	68db      	ldr	r3, [r3, #12]
    ef0c:	4618      	mov	r0, r3
    ef0e:	4b04      	ldr	r3, [pc, #16]	; (ef20 <_ZN17TimerSerial_Class5StartEv+0x20>)
    ef10:	4798      	blx	r3
    ef12:	60f8      	str	r0, [r7, #12]
	return status;
    ef14:	68fb      	ldr	r3, [r7, #12]
	
}
    ef16:	4618      	mov	r0, r3
    ef18:	3710      	adds	r7, #16
    ef1a:	46bd      	mov	sp, r7
    ef1c:	bd80      	pop	{r7, pc}
    ef1e:	bf00      	nop
    ef20:	00003221 	.word	0x00003221

0000ef24 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    ef24:	b580      	push	{r7, lr}
    ef26:	b084      	sub	sp, #16
    ef28:	af00      	add	r7, sp, #0
    ef2a:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    ef2c:	687b      	ldr	r3, [r7, #4]
    ef2e:	68db      	ldr	r3, [r3, #12]
    ef30:	4618      	mov	r0, r3
    ef32:	4b05      	ldr	r3, [pc, #20]	; (ef48 <_ZN17TimerSerial_Class4StopEv+0x24>)
    ef34:	4798      	blx	r3
    ef36:	60f8      	str	r0, [r7, #12]
	timeout=0;
    ef38:	687b      	ldr	r3, [r7, #4]
    ef3a:	2200      	movs	r2, #0
    ef3c:	705a      	strb	r2, [r3, #1]
	return status;
    ef3e:	68fb      	ldr	r3, [r7, #12]
}
    ef40:	4618      	mov	r0, r3
    ef42:	3710      	adds	r7, #16
    ef44:	46bd      	mov	sp, r7
    ef46:	bd80      	pop	{r7, pc}
    ef48:	00003275 	.word	0x00003275

0000ef4c <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    ef4c:	b480      	push	{r7}
    ef4e:	b083      	sub	sp, #12
    ef50:	af00      	add	r7, sp, #0
    ef52:	6078      	str	r0, [r7, #4]
	timeout=1;
    ef54:	687b      	ldr	r3, [r7, #4]
    ef56:	2201      	movs	r2, #1
    ef58:	705a      	strb	r2, [r3, #1]
}
    ef5a:	bf00      	nop
    ef5c:	370c      	adds	r7, #12
    ef5e:	46bd      	mov	sp, r7
    ef60:	bc80      	pop	{r7}
    ef62:	4770      	bx	lr

0000ef64 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    ef64:	b580      	push	{r7, lr}
    ef66:	b086      	sub	sp, #24
    ef68:	af00      	add	r7, sp, #0
    ef6a:	60f8      	str	r0, [r7, #12]
    ef6c:	60b9      	str	r1, [r7, #8]
    ef6e:	607a      	str	r2, [r7, #4]
    ef70:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    ef72:	68f8      	ldr	r0, [r7, #12]
    ef74:	4b0d      	ldr	r3, [pc, #52]	; (efac <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    ef76:	4798      	blx	r3
	task->interval = interval;
    ef78:	68fb      	ldr	r3, [r7, #12]
    ef7a:	689b      	ldr	r3, [r3, #8]
    ef7c:	687a      	ldr	r2, [r7, #4]
    ef7e:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    ef80:	68fb      	ldr	r3, [r7, #12]
    ef82:	689b      	ldr	r3, [r3, #8]
    ef84:	68ba      	ldr	r2, [r7, #8]
    ef86:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    ef88:	68fb      	ldr	r3, [r7, #12]
    ef8a:	689b      	ldr	r3, [r3, #8]
    ef8c:	78fa      	ldrb	r2, [r7, #3]
    ef8e:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    ef90:	68fb      	ldr	r3, [r7, #12]
    ef92:	68da      	ldr	r2, [r3, #12]
    ef94:	68fb      	ldr	r3, [r7, #12]
    ef96:	689b      	ldr	r3, [r3, #8]
    ef98:	4619      	mov	r1, r3
    ef9a:	4610      	mov	r0, r2
    ef9c:	4b04      	ldr	r3, [pc, #16]	; (efb0 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    ef9e:	4798      	blx	r3
    efa0:	6178      	str	r0, [r7, #20]
	
	return status;
    efa2:	697b      	ldr	r3, [r7, #20]
}
    efa4:	4618      	mov	r0, r3
    efa6:	3718      	adds	r7, #24
    efa8:	46bd      	mov	sp, r7
    efaa:	bd80      	pop	{r7, pc}
    efac:	0000f06d 	.word	0x0000f06d
    efb0:	000032d1 	.word	0x000032d1

0000efb4 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    efb4:	b590      	push	{r4, r7, lr}
    efb6:	b087      	sub	sp, #28
    efb8:	af00      	add	r7, sp, #0
    efba:	60f8      	str	r0, [r7, #12]
    efbc:	60b9      	str	r1, [r7, #8]
    efbe:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    efc0:	2300      	movs	r3, #0
    efc2:	687a      	ldr	r2, [r7, #4]
    efc4:	68b9      	ldr	r1, [r7, #8]
    efc6:	68f8      	ldr	r0, [r7, #12]
    efc8:	4c03      	ldr	r4, [pc, #12]	; (efd8 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    efca:	47a0      	blx	r4
    efcc:	6178      	str	r0, [r7, #20]
	return status;
    efce:	697b      	ldr	r3, [r7, #20]
}
    efd0:	4618      	mov	r0, r3
    efd2:	371c      	adds	r7, #28
    efd4:	46bd      	mov	sp, r7
    efd6:	bd90      	pop	{r4, r7, pc}
    efd8:	0000ef65 	.word	0x0000ef65

0000efdc <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    efdc:	b590      	push	{r4, r7, lr}
    efde:	b087      	sub	sp, #28
    efe0:	af00      	add	r7, sp, #0
    efe2:	60f8      	str	r0, [r7, #12]
    efe4:	60b9      	str	r1, [r7, #8]
    efe6:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    efe8:	2300      	movs	r3, #0
    efea:	687a      	ldr	r2, [r7, #4]
    efec:	68b9      	ldr	r1, [r7, #8]
    efee:	68f8      	ldr	r0, [r7, #12]
    eff0:	4c06      	ldr	r4, [pc, #24]	; (f00c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    eff2:	47a0      	blx	r4
    eff4:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    eff6:	68fb      	ldr	r3, [r7, #12]
    eff8:	68db      	ldr	r3, [r3, #12]
    effa:	4618      	mov	r0, r3
    effc:	4b04      	ldr	r3, [pc, #16]	; (f010 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    effe:	4798      	blx	r3
    f000:	6178      	str	r0, [r7, #20]
	return status;
    f002:	697b      	ldr	r3, [r7, #20]
}
    f004:	4618      	mov	r0, r3
    f006:	371c      	adds	r7, #28
    f008:	46bd      	mov	sp, r7
    f00a:	bd90      	pop	{r4, r7, pc}
    f00c:	0000ef65 	.word	0x0000ef65
    f010:	00003221 	.word	0x00003221

0000f014 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    f014:	b580      	push	{r7, lr}
    f016:	b082      	sub	sp, #8
    f018:	af00      	add	r7, sp, #0
    f01a:	6078      	str	r0, [r7, #4]
    f01c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    f01e:	6839      	ldr	r1, [r7, #0]
    f020:	6878      	ldr	r0, [r7, #4]
    f022:	4b0f      	ldr	r3, [pc, #60]	; (f060 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    f024:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    f026:	687b      	ldr	r3, [r7, #4]
    f028:	68db      	ldr	r3, [r3, #12]
    f02a:	f103 0214 	add.w	r2, r3, #20
    f02e:	687b      	ldr	r3, [r7, #4]
    f030:	689b      	ldr	r3, [r3, #8]
    f032:	4619      	mov	r1, r3
    f034:	4610      	mov	r0, r2
    f036:	4b0b      	ldr	r3, [pc, #44]	; (f064 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    f038:	4798      	blx	r3
    f03a:	4603      	mov	r3, r0
    f03c:	2b00      	cmp	r3, #0
    f03e:	d007      	beq.n	f050 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    f040:	687b      	ldr	r3, [r7, #4]
    f042:	68da      	ldr	r2, [r3, #12]
    f044:	687b      	ldr	r3, [r7, #4]
    f046:	689b      	ldr	r3, [r3, #8]
    f048:	4619      	mov	r1, r3
    f04a:	4610      	mov	r0, r2
    f04c:	4b06      	ldr	r3, [pc, #24]	; (f068 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    f04e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    f050:	687b      	ldr	r3, [r7, #4]
    f052:	689b      	ldr	r3, [r3, #8]
    f054:	2200      	movs	r2, #0
    f056:	60da      	str	r2, [r3, #12]
}
    f058:	bf00      	nop
    f05a:	3708      	adds	r7, #8
    f05c:	46bd      	mov	sp, r7
    f05e:	bd80      	pop	{r7, pc}
    f060:	0000f0d5 	.word	0x0000f0d5
    f064:	00003fa1 	.word	0x00003fa1
    f068:	000033c9 	.word	0x000033c9

0000f06c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    f06c:	b480      	push	{r7}
    f06e:	b083      	sub	sp, #12
    f070:	af00      	add	r7, sp, #0
    f072:	6078      	str	r0, [r7, #4]
	for (i = 0; i < TASK_NUMBER; i++)
    f074:	687b      	ldr	r3, [r7, #4]
    f076:	2200      	movs	r2, #0
    f078:	771a      	strb	r2, [r3, #28]
    f07a:	687b      	ldr	r3, [r7, #4]
    f07c:	7f1b      	ldrb	r3, [r3, #28]
    f07e:	2b07      	cmp	r3, #7
    f080:	dc1f      	bgt.n	f0c2 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x56>
	{
			if (taskArray[i].cb==NULL)
    f082:	687b      	ldr	r3, [r7, #4]
    f084:	7f1b      	ldrb	r3, [r3, #28]
    f086:	4619      	mov	r1, r3
    f088:	4a11      	ldr	r2, [pc, #68]	; (f0d0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    f08a:	460b      	mov	r3, r1
    f08c:	009b      	lsls	r3, r3, #2
    f08e:	440b      	add	r3, r1
    f090:	009b      	lsls	r3, r3, #2
    f092:	4413      	add	r3, r2
    f094:	330c      	adds	r3, #12
    f096:	681b      	ldr	r3, [r3, #0]
    f098:	2b00      	cmp	r3, #0
    f09a:	d10b      	bne.n	f0b4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x48>
			{
				
				task=&taskArray[i];
    f09c:	687b      	ldr	r3, [r7, #4]
    f09e:	7f1b      	ldrb	r3, [r3, #28]
    f0a0:	461a      	mov	r2, r3
    f0a2:	4613      	mov	r3, r2
    f0a4:	009b      	lsls	r3, r3, #2
    f0a6:	4413      	add	r3, r2
    f0a8:	009b      	lsls	r3, r3, #2
    f0aa:	4a09      	ldr	r2, [pc, #36]	; (f0d0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    f0ac:	441a      	add	r2, r3
    f0ae:	687b      	ldr	r3, [r7, #4]
    f0b0:	609a      	str	r2, [r3, #8]
			return;
    f0b2:	e009      	b.n	f0c8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x5c>
	for (i = 0; i < TASK_NUMBER; i++)
    f0b4:	687b      	ldr	r3, [r7, #4]
    f0b6:	7f1b      	ldrb	r3, [r3, #28]
    f0b8:	3301      	adds	r3, #1
    f0ba:	b2da      	uxtb	r2, r3
    f0bc:	687b      	ldr	r3, [r7, #4]
    f0be:	771a      	strb	r2, [r3, #28]
    f0c0:	e7db      	b.n	f07a <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xe>
				
			}
	}
	task=&taskArray[0];
    f0c2:	687b      	ldr	r3, [r7, #4]
    f0c4:	4a02      	ldr	r2, [pc, #8]	; (f0d0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x64>)
    f0c6:	609a      	str	r2, [r3, #8]

}
    f0c8:	370c      	adds	r7, #12
    f0ca:	46bd      	mov	sp, r7
    f0cc:	bc80      	pop	{r7}
    f0ce:	4770      	bx	lr
    f0d0:	20004cfc 	.word	0x20004cfc

0000f0d4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    f0d4:	b480      	push	{r7}
    f0d6:	b083      	sub	sp, #12
    f0d8:	af00      	add	r7, sp, #0
    f0da:	6078      	str	r0, [r7, #4]
    f0dc:	6039      	str	r1, [r7, #0]
	for (i = 0; i < TASK_NUMBER; i++)
    f0de:	687b      	ldr	r3, [r7, #4]
    f0e0:	2200      	movs	r2, #0
    f0e2:	771a      	strb	r2, [r3, #28]
    f0e4:	687b      	ldr	r3, [r7, #4]
    f0e6:	7f1b      	ldrb	r3, [r3, #28]
    f0e8:	2b07      	cmp	r3, #7
    f0ea:	dc20      	bgt.n	f12e <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	{
		if (taskArray[i].cb==(timer_cb_t)func)
    f0ec:	687b      	ldr	r3, [r7, #4]
    f0ee:	7f1b      	ldrb	r3, [r3, #28]
    f0f0:	4619      	mov	r1, r3
    f0f2:	4a11      	ldr	r2, [pc, #68]	; (f138 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    f0f4:	460b      	mov	r3, r1
    f0f6:	009b      	lsls	r3, r3, #2
    f0f8:	440b      	add	r3, r1
    f0fa:	009b      	lsls	r3, r3, #2
    f0fc:	4413      	add	r3, r2
    f0fe:	330c      	adds	r3, #12
    f100:	681a      	ldr	r2, [r3, #0]
    f102:	683b      	ldr	r3, [r7, #0]
    f104:	429a      	cmp	r2, r3
    f106:	d10b      	bne.n	f120 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x4c>
		{
			
			task=&taskArray[i];
    f108:	687b      	ldr	r3, [r7, #4]
    f10a:	7f1b      	ldrb	r3, [r3, #28]
    f10c:	461a      	mov	r2, r3
    f10e:	4613      	mov	r3, r2
    f110:	009b      	lsls	r3, r3, #2
    f112:	4413      	add	r3, r2
    f114:	009b      	lsls	r3, r3, #2
    f116:	4a08      	ldr	r2, [pc, #32]	; (f138 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x64>)
    f118:	441a      	add	r2, r3
    f11a:	687b      	ldr	r3, [r7, #4]
    f11c:	609a      	str	r2, [r3, #8]
			return;
    f11e:	e006      	b.n	f12e <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x5a>
	for (i = 0; i < TASK_NUMBER; i++)
    f120:	687b      	ldr	r3, [r7, #4]
    f122:	7f1b      	ldrb	r3, [r3, #28]
    f124:	3301      	adds	r3, #1
    f126:	b2da      	uxtb	r2, r3
    f128:	687b      	ldr	r3, [r7, #4]
    f12a:	771a      	strb	r2, [r3, #28]
    f12c:	e7da      	b.n	f0e4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x10>
			
		}
	}


}
    f12e:	370c      	adds	r7, #12
    f130:	46bd      	mov	sp, r7
    f132:	bc80      	pop	{r7}
    f134:	4770      	bx	lr
    f136:	bf00      	nop
    f138:	20004cfc 	.word	0x20004cfc

0000f13c <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    f13c:	b580      	push	{r7, lr}
    f13e:	b082      	sub	sp, #8
    f140:	af00      	add	r7, sp, #0
    f142:	6078      	str	r0, [r7, #4]
    f144:	6039      	str	r1, [r7, #0]
    f146:	687b      	ldr	r3, [r7, #4]
    f148:	2b01      	cmp	r3, #1
    f14a:	d116      	bne.n	f17a <_Z41__static_initialization_and_destruction_0ii+0x3e>
    f14c:	683b      	ldr	r3, [r7, #0]
    f14e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f152:	4293      	cmp	r3, r2
    f154:	d111      	bne.n	f17a <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    f156:	490b      	ldr	r1, [pc, #44]	; (f184 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    f158:	480b      	ldr	r0, [pc, #44]	; (f188 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f15a:	4b0c      	ldr	r3, [pc, #48]	; (f18c <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f15c:	4798      	blx	r3
    f15e:	4a0c      	ldr	r2, [pc, #48]	; (f190 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f160:	490c      	ldr	r1, [pc, #48]	; (f194 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f162:	4809      	ldr	r0, [pc, #36]	; (f188 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    f164:	4b0c      	ldr	r3, [pc, #48]	; (f198 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f166:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    f168:	490c      	ldr	r1, [pc, #48]	; (f19c <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f16a:	480d      	ldr	r0, [pc, #52]	; (f1a0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f16c:	4b07      	ldr	r3, [pc, #28]	; (f18c <_Z41__static_initialization_and_destruction_0ii+0x50>)
    f16e:	4798      	blx	r3
    f170:	4a07      	ldr	r2, [pc, #28]	; (f190 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f172:	4908      	ldr	r1, [pc, #32]	; (f194 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f174:	480a      	ldr	r0, [pc, #40]	; (f1a0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f176:	4b08      	ldr	r3, [pc, #32]	; (f198 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f178:	4798      	blx	r3
    f17a:	bf00      	nop
    f17c:	3708      	adds	r7, #8
    f17e:	46bd      	mov	sp, r7
    f180:	bd80      	pop	{r7, pc}
    f182:	bf00      	nop
    f184:	20004f10 	.word	0x20004f10
    f188:	20004d9c 	.word	0x20004d9c
    f18c:	0000eea9 	.word	0x0000eea9
    f190:	20000000 	.word	0x20000000
    f194:	0000eee5 	.word	0x0000eee5
    f198:	0000f1f5 	.word	0x0000f1f5
    f19c:	20004e58 	.word	0x20004e58
    f1a0:	20004dbc 	.word	0x20004dbc

0000f1a4 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    f1a4:	b580      	push	{r7, lr}
    f1a6:	af00      	add	r7, sp, #0
    f1a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f1ac:	2001      	movs	r0, #1
    f1ae:	4b01      	ldr	r3, [pc, #4]	; (f1b4 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    f1b0:	4798      	blx	r3
    f1b2:	bd80      	pop	{r7, pc}
    f1b4:	0000f13d 	.word	0x0000f13d

0000f1b8 <_ZN14I2C_Asyn_ClassC1Ev>:
		ptrI2C_Asyn_Class->txReady=true;
		ptrI2C_Asyn_Class->rxReady=true;
 }

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
    f1b8:	b480      	push	{r7}
    f1ba:	b083      	sub	sp, #12
    f1bc:	af00      	add	r7, sp, #0
    f1be:	6078      	str	r0, [r7, #4]
{
	ptrI2CAsynDescr=&I2C_EXPANDER;
    f1c0:	687b      	ldr	r3, [r7, #4]
    f1c2:	4a05      	ldr	r2, [pc, #20]	; (f1d8 <_ZN14I2C_Asyn_ClassC1Ev+0x20>)
    f1c4:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
    f1c6:	4a05      	ldr	r2, [pc, #20]	; (f1dc <_ZN14I2C_Asyn_ClassC1Ev+0x24>)
    f1c8:	687b      	ldr	r3, [r7, #4]
    f1ca:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
    f1cc:	687b      	ldr	r3, [r7, #4]
    f1ce:	4618      	mov	r0, r3
    f1d0:	370c      	adds	r7, #12
    f1d2:	46bd      	mov	sp, r7
    f1d4:	bc80      	pop	{r7}
    f1d6:	4770      	bx	lr
    f1d8:	20004f2c 	.word	0x20004f2c
    f1dc:	20004ddc 	.word	0x20004ddc

0000f1e0 <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrI2CAsynDescr=i2c_a;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
    f1e0:	b480      	push	{r7}
    f1e2:	b083      	sub	sp, #12
    f1e4:	af00      	add	r7, sp, #0
    f1e6:	6078      	str	r0, [r7, #4]
{
} //~I2C_Asyn_Class
    f1e8:	687b      	ldr	r3, [r7, #4]
    f1ea:	4618      	mov	r0, r3
    f1ec:	370c      	adds	r7, #12
    f1ee:	46bd      	mov	sp, r7
    f1f0:	bc80      	pop	{r7}
    f1f2:	4770      	bx	lr

0000f1f4 <__aeabi_atexit>:
    f1f4:	460b      	mov	r3, r1
    f1f6:	4601      	mov	r1, r0
    f1f8:	4618      	mov	r0, r3
    f1fa:	f001 bd2f 	b.w	10c5c <__cxa_atexit>
    f1fe:	bf00      	nop

0000f200 <_ZdlPvj>:
    f200:	f7fe bd0e 	b.w	dc20 <_ZdlPv>

0000f204 <pow>:
    f204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f208:	f8df 92f0 	ldr.w	r9, [pc, #752]	; f4fc <pow+0x2f8>
    f20c:	b08d      	sub	sp, #52	; 0x34
    f20e:	4606      	mov	r6, r0
    f210:	460f      	mov	r7, r1
    f212:	4614      	mov	r4, r2
    f214:	461d      	mov	r5, r3
    f216:	f000 f973 	bl	f500 <__ieee754_pow>
    f21a:	f999 8000 	ldrsb.w	r8, [r9]
    f21e:	f1b8 3fff 	cmp.w	r8, #4294967295
    f222:	e9cd 0100 	strd	r0, r1, [sp]
    f226:	d036      	beq.n	f296 <pow+0x92>
    f228:	4622      	mov	r2, r4
    f22a:	462b      	mov	r3, r5
    f22c:	4620      	mov	r0, r4
    f22e:	4629      	mov	r1, r5
    f230:	f001 fcde 	bl	10bf0 <__aeabi_dcmpun>
    f234:	4683      	mov	fp, r0
    f236:	bb70      	cbnz	r0, f296 <pow+0x92>
    f238:	4632      	mov	r2, r6
    f23a:	463b      	mov	r3, r7
    f23c:	4630      	mov	r0, r6
    f23e:	4639      	mov	r1, r7
    f240:	f001 fcd6 	bl	10bf0 <__aeabi_dcmpun>
    f244:	2200      	movs	r2, #0
    f246:	4682      	mov	sl, r0
    f248:	2300      	movs	r3, #0
    f24a:	2800      	cmp	r0, #0
    f24c:	f040 80a0 	bne.w	f390 <pow+0x18c>
    f250:	4630      	mov	r0, r6
    f252:	4639      	mov	r1, r7
    f254:	f001 fc9a 	bl	10b8c <__aeabi_dcmpeq>
    f258:	b310      	cbz	r0, f2a0 <pow+0x9c>
    f25a:	2200      	movs	r2, #0
    f25c:	2300      	movs	r3, #0
    f25e:	4620      	mov	r0, r4
    f260:	4629      	mov	r1, r5
    f262:	f001 fc93 	bl	10b8c <__aeabi_dcmpeq>
    f266:	4683      	mov	fp, r0
    f268:	2800      	cmp	r0, #0
    f26a:	d06a      	beq.n	f342 <pow+0x13e>
    f26c:	2201      	movs	r2, #1
    f26e:	4b9c      	ldr	r3, [pc, #624]	; (f4e0 <pow+0x2dc>)
    f270:	9202      	str	r2, [sp, #8]
    f272:	2100      	movs	r1, #0
    f274:	2200      	movs	r2, #0
    f276:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    f27a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    f27e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    f282:	e9cd 1208 	strd	r1, r2, [sp, #32]
    f286:	9303      	str	r3, [sp, #12]
    f288:	f1b8 0f00 	cmp.w	r8, #0
    f28c:	d045      	beq.n	f31a <pow+0x116>
    f28e:	4c95      	ldr	r4, [pc, #596]	; (f4e4 <pow+0x2e0>)
    f290:	2300      	movs	r3, #0
    f292:	e9cd 3400 	strd	r3, r4, [sp]
    f296:	e9dd 0100 	ldrd	r0, r1, [sp]
    f29a:	b00d      	add	sp, #52	; 0x34
    f29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2a0:	e9dd 0100 	ldrd	r0, r1, [sp]
    f2a4:	f000 ff32 	bl	1010c <finite>
    f2a8:	4680      	mov	r8, r0
    f2aa:	2800      	cmp	r0, #0
    f2ac:	f000 808b 	beq.w	f3c6 <pow+0x1c2>
    f2b0:	f04f 0a00 	mov.w	sl, #0
    f2b4:	f04f 0b00 	mov.w	fp, #0
    f2b8:	4652      	mov	r2, sl
    f2ba:	465b      	mov	r3, fp
    f2bc:	e9dd 0100 	ldrd	r0, r1, [sp]
    f2c0:	f001 fc64 	bl	10b8c <__aeabi_dcmpeq>
    f2c4:	2800      	cmp	r0, #0
    f2c6:	d0e6      	beq.n	f296 <pow+0x92>
    f2c8:	4630      	mov	r0, r6
    f2ca:	4639      	mov	r1, r7
    f2cc:	f000 ff1e 	bl	1010c <finite>
    f2d0:	2800      	cmp	r0, #0
    f2d2:	d0e0      	beq.n	f296 <pow+0x92>
    f2d4:	4620      	mov	r0, r4
    f2d6:	4629      	mov	r1, r5
    f2d8:	f000 ff18 	bl	1010c <finite>
    f2dc:	2800      	cmp	r0, #0
    f2de:	d0da      	beq.n	f296 <pow+0x92>
    f2e0:	f999 3000 	ldrsb.w	r3, [r9]
    f2e4:	4a7e      	ldr	r2, [pc, #504]	; (f4e0 <pow+0x2dc>)
    f2e6:	9203      	str	r2, [sp, #12]
    f2e8:	2104      	movs	r1, #4
    f2ea:	2200      	movs	r2, #0
    f2ec:	2b02      	cmp	r3, #2
    f2ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
    f2f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    f2f6:	e9cd ab08 	strd	sl, fp, [sp, #32]
    f2fa:	9102      	str	r1, [sp, #8]
    f2fc:	920a      	str	r2, [sp, #40]	; 0x28
    f2fe:	d003      	beq.n	f308 <pow+0x104>
    f300:	a802      	add	r0, sp, #8
    f302:	f000 ff09 	bl	10118 <matherr>
    f306:	b968      	cbnz	r0, f324 <pow+0x120>
    f308:	f001 fcae 	bl	10c68 <__errno>
    f30c:	2322      	movs	r3, #34	; 0x22
    f30e:	6003      	str	r3, [r0, #0]
    f310:	e008      	b.n	f324 <pow+0x120>
    f312:	2300      	movs	r3, #0
    f314:	2400      	movs	r4, #0
    f316:	e9cd 3408 	strd	r3, r4, [sp, #32]
    f31a:	a802      	add	r0, sp, #8
    f31c:	f000 fefc 	bl	10118 <matherr>
    f320:	2800      	cmp	r0, #0
    f322:	d030      	beq.n	f386 <pow+0x182>
    f324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f326:	b11b      	cbz	r3, f330 <pow+0x12c>
    f328:	f001 fc9e 	bl	10c68 <__errno>
    f32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f32e:	6003      	str	r3, [r0, #0]
    f330:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    f334:	e9cd 3400 	strd	r3, r4, [sp]
    f338:	e9dd 0100 	ldrd	r0, r1, [sp]
    f33c:	b00d      	add	sp, #52	; 0x34
    f33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f342:	4620      	mov	r0, r4
    f344:	4629      	mov	r1, r5
    f346:	f000 fee1 	bl	1010c <finite>
    f34a:	2800      	cmp	r0, #0
    f34c:	d0a3      	beq.n	f296 <pow+0x92>
    f34e:	2200      	movs	r2, #0
    f350:	2300      	movs	r3, #0
    f352:	4620      	mov	r0, r4
    f354:	4629      	mov	r1, r5
    f356:	f001 fc23 	bl	10ba0 <__aeabi_dcmplt>
    f35a:	2800      	cmp	r0, #0
    f35c:	d09b      	beq.n	f296 <pow+0x92>
    f35e:	f999 3000 	ldrsb.w	r3, [r9]
    f362:	4a5f      	ldr	r2, [pc, #380]	; (f4e0 <pow+0x2dc>)
    f364:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    f368:	2101      	movs	r1, #1
    f36a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    f36e:	e9cd 4506 	strd	r4, r5, [sp, #24]
    f372:	9102      	str	r1, [sp, #8]
    f374:	9203      	str	r2, [sp, #12]
    f376:	2b00      	cmp	r3, #0
    f378:	d0cb      	beq.n	f312 <pow+0x10e>
    f37a:	495b      	ldr	r1, [pc, #364]	; (f4e8 <pow+0x2e4>)
    f37c:	2000      	movs	r0, #0
    f37e:	2b02      	cmp	r3, #2
    f380:	e9cd 0108 	strd	r0, r1, [sp, #32]
    f384:	d1c9      	bne.n	f31a <pow+0x116>
    f386:	f001 fc6f 	bl	10c68 <__errno>
    f38a:	2321      	movs	r3, #33	; 0x21
    f38c:	6003      	str	r3, [r0, #0]
    f38e:	e7c9      	b.n	f324 <pow+0x120>
    f390:	4620      	mov	r0, r4
    f392:	4629      	mov	r1, r5
    f394:	f001 fbfa 	bl	10b8c <__aeabi_dcmpeq>
    f398:	2800      	cmp	r0, #0
    f39a:	f43f af7c 	beq.w	f296 <pow+0x92>
    f39e:	4b51      	ldr	r3, [pc, #324]	; (f4e4 <pow+0x2e0>)
    f3a0:	494f      	ldr	r1, [pc, #316]	; (f4e0 <pow+0x2dc>)
    f3a2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    f3a6:	2001      	movs	r0, #1
    f3a8:	2200      	movs	r2, #0
    f3aa:	f1b8 0f02 	cmp.w	r8, #2
    f3ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
    f3b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    f3b6:	9002      	str	r0, [sp, #8]
    f3b8:	9103      	str	r1, [sp, #12]
    f3ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
    f3be:	d1ac      	bne.n	f31a <pow+0x116>
    f3c0:	e9cd 2300 	strd	r2, r3, [sp]
    f3c4:	e767      	b.n	f296 <pow+0x92>
    f3c6:	4630      	mov	r0, r6
    f3c8:	4639      	mov	r1, r7
    f3ca:	f000 fe9f 	bl	1010c <finite>
    f3ce:	2800      	cmp	r0, #0
    f3d0:	f43f af6e 	beq.w	f2b0 <pow+0xac>
    f3d4:	4620      	mov	r0, r4
    f3d6:	4629      	mov	r1, r5
    f3d8:	f000 fe98 	bl	1010c <finite>
    f3dc:	2800      	cmp	r0, #0
    f3de:	f43f af67 	beq.w	f2b0 <pow+0xac>
    f3e2:	e9dd 2300 	ldrd	r2, r3, [sp]
    f3e6:	4610      	mov	r0, r2
    f3e8:	4619      	mov	r1, r3
    f3ea:	f001 fc01 	bl	10bf0 <__aeabi_dcmpun>
    f3ee:	2800      	cmp	r0, #0
    f3f0:	d158      	bne.n	f4a4 <pow+0x2a0>
    f3f2:	2303      	movs	r3, #3
    f3f4:	f999 8000 	ldrsb.w	r8, [r9]
    f3f8:	9302      	str	r3, [sp, #8]
    f3fa:	4b39      	ldr	r3, [pc, #228]	; (f4e0 <pow+0x2dc>)
    f3fc:	900a      	str	r0, [sp, #40]	; 0x28
    f3fe:	9303      	str	r3, [sp, #12]
    f400:	e9cd 6704 	strd	r6, r7, [sp, #16]
    f404:	e9cd 4506 	strd	r4, r5, [sp, #24]
    f408:	2200      	movs	r2, #0
    f40a:	2300      	movs	r3, #0
    f40c:	4630      	mov	r0, r6
    f40e:	4639      	mov	r1, r7
    f410:	f1b8 0f00 	cmp.w	r8, #0
    f414:	d126      	bne.n	f464 <pow+0x260>
    f416:	4f35      	ldr	r7, [pc, #212]	; (f4ec <pow+0x2e8>)
    f418:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
    f41c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    f420:	f001 fbbe 	bl	10ba0 <__aeabi_dcmplt>
    f424:	2800      	cmp	r0, #0
    f426:	f43f af6b 	beq.w	f300 <pow+0xfc>
    f42a:	2200      	movs	r2, #0
    f42c:	4b30      	ldr	r3, [pc, #192]	; (f4f0 <pow+0x2ec>)
    f42e:	4620      	mov	r0, r4
    f430:	4629      	mov	r1, r5
    f432:	f001 f943 	bl	106bc <__aeabi_dmul>
    f436:	4604      	mov	r4, r0
    f438:	460d      	mov	r5, r1
    f43a:	f000 fe75 	bl	10128 <rint>
    f43e:	4602      	mov	r2, r0
    f440:	460b      	mov	r3, r1
    f442:	4620      	mov	r0, r4
    f444:	4629      	mov	r1, r5
    f446:	f001 fba1 	bl	10b8c <__aeabi_dcmpeq>
    f44a:	bb40      	cbnz	r0, f49e <pow+0x29a>
    f44c:	4b29      	ldr	r3, [pc, #164]	; (f4f4 <pow+0x2f0>)
    f44e:	f999 8000 	ldrsb.w	r8, [r9]
    f452:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f456:	e9cd 2308 	strd	r2, r3, [sp, #32]
    f45a:	f1b8 0f02 	cmp.w	r8, #2
    f45e:	f47f af4f 	bne.w	f300 <pow+0xfc>
    f462:	e751      	b.n	f308 <pow+0x104>
    f464:	4f24      	ldr	r7, [pc, #144]	; (f4f8 <pow+0x2f4>)
    f466:	2600      	movs	r6, #0
    f468:	e9cd 6708 	strd	r6, r7, [sp, #32]
    f46c:	f001 fb98 	bl	10ba0 <__aeabi_dcmplt>
    f470:	2800      	cmp	r0, #0
    f472:	d0f2      	beq.n	f45a <pow+0x256>
    f474:	2200      	movs	r2, #0
    f476:	4b1e      	ldr	r3, [pc, #120]	; (f4f0 <pow+0x2ec>)
    f478:	4620      	mov	r0, r4
    f47a:	4629      	mov	r1, r5
    f47c:	f001 f91e 	bl	106bc <__aeabi_dmul>
    f480:	4604      	mov	r4, r0
    f482:	460d      	mov	r5, r1
    f484:	f000 fe50 	bl	10128 <rint>
    f488:	4602      	mov	r2, r0
    f48a:	460b      	mov	r3, r1
    f48c:	4620      	mov	r0, r4
    f48e:	4629      	mov	r1, r5
    f490:	f001 fb7c 	bl	10b8c <__aeabi_dcmpeq>
    f494:	b918      	cbnz	r0, f49e <pow+0x29a>
    f496:	4b14      	ldr	r3, [pc, #80]	; (f4e8 <pow+0x2e4>)
    f498:	2200      	movs	r2, #0
    f49a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    f49e:	f999 8000 	ldrsb.w	r8, [r9]
    f4a2:	e7da      	b.n	f45a <pow+0x256>
    f4a4:	f999 9000 	ldrsb.w	r9, [r9]
    f4a8:	4b0d      	ldr	r3, [pc, #52]	; (f4e0 <pow+0x2dc>)
    f4aa:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    f4ae:	2201      	movs	r2, #1
    f4b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
    f4b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    f4b8:	9202      	str	r2, [sp, #8]
    f4ba:	9303      	str	r3, [sp, #12]
    f4bc:	f1b9 0f00 	cmp.w	r9, #0
    f4c0:	f43f af27 	beq.w	f312 <pow+0x10e>
    f4c4:	2200      	movs	r2, #0
    f4c6:	2300      	movs	r3, #0
    f4c8:	4610      	mov	r0, r2
    f4ca:	4619      	mov	r1, r3
    f4cc:	f001 fa20 	bl	10910 <__aeabi_ddiv>
    f4d0:	f1b9 0f02 	cmp.w	r9, #2
    f4d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
    f4d8:	f43f af55 	beq.w	f386 <pow+0x182>
    f4dc:	e71d      	b.n	f31a <pow+0x116>
    f4de:	bf00      	nop
    f4e0:	000121f4 	.word	0x000121f4
    f4e4:	3ff00000 	.word	0x3ff00000
    f4e8:	fff00000 	.word	0xfff00000
    f4ec:	47efffff 	.word	0x47efffff
    f4f0:	3fe00000 	.word	0x3fe00000
    f4f4:	c7efffff 	.word	0xc7efffff
    f4f8:	7ff00000 	.word	0x7ff00000
    f4fc:	2000013c 	.word	0x2000013c

0000f500 <__ieee754_pow>:
    f500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f504:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
    f508:	ea57 0402 	orrs.w	r4, r7, r2
    f50c:	b093      	sub	sp, #76	; 0x4c
    f50e:	d037      	beq.n	f580 <__ieee754_pow+0x80>
    f510:	4c67      	ldr	r4, [pc, #412]	; (f6b0 <__ieee754_pow+0x1b0>)
    f512:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    f516:	42a6      	cmp	r6, r4
    f518:	4683      	mov	fp, r0
    f51a:	460d      	mov	r5, r1
    f51c:	dc29      	bgt.n	f572 <__ieee754_pow+0x72>
    f51e:	469a      	mov	sl, r3
    f520:	4696      	mov	lr, r2
    f522:	d025      	beq.n	f570 <__ieee754_pow+0x70>
    f524:	42a7      	cmp	r7, r4
    f526:	dc24      	bgt.n	f572 <__ieee754_pow+0x72>
    f528:	4c61      	ldr	r4, [pc, #388]	; (f6b0 <__ieee754_pow+0x1b0>)
    f52a:	42a7      	cmp	r7, r4
    f52c:	d079      	beq.n	f622 <__ieee754_pow+0x122>
    f52e:	2d00      	cmp	r5, #0
    f530:	4689      	mov	r9, r1
    f532:	4680      	mov	r8, r0
    f534:	e9cd 2300 	strd	r2, r3, [sp]
    f538:	db77      	blt.n	f62a <__ieee754_pow+0x12a>
    f53a:	2400      	movs	r4, #0
    f53c:	f1be 0f00 	cmp.w	lr, #0
    f540:	d12c      	bne.n	f59c <__ieee754_pow+0x9c>
    f542:	4b5b      	ldr	r3, [pc, #364]	; (f6b0 <__ieee754_pow+0x1b0>)
    f544:	429f      	cmp	r7, r3
    f546:	f000 808b 	beq.w	f660 <__ieee754_pow+0x160>
    f54a:	4b5a      	ldr	r3, [pc, #360]	; (f6b4 <__ieee754_pow+0x1b4>)
    f54c:	429f      	cmp	r7, r3
    f54e:	d061      	beq.n	f614 <__ieee754_pow+0x114>
    f550:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
    f554:	f000 83ba 	beq.w	fccc <__ieee754_pow+0x7cc>
    f558:	4b57      	ldr	r3, [pc, #348]	; (f6b8 <__ieee754_pow+0x1b8>)
    f55a:	459a      	cmp	sl, r3
    f55c:	d11e      	bne.n	f59c <__ieee754_pow+0x9c>
    f55e:	2d00      	cmp	r5, #0
    f560:	db1c      	blt.n	f59c <__ieee754_pow+0x9c>
    f562:	4640      	mov	r0, r8
    f564:	4649      	mov	r1, r9
    f566:	b013      	add	sp, #76	; 0x4c
    f568:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f56c:	f000 bd0e 	b.w	ff8c <__ieee754_sqrt>
    f570:	b158      	cbz	r0, f58a <__ieee754_pow+0x8a>
    f572:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    f576:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    f57a:	ea56 030b 	orrs.w	r3, r6, fp
    f57e:	d106      	bne.n	f58e <__ieee754_pow+0x8e>
    f580:	494c      	ldr	r1, [pc, #304]	; (f6b4 <__ieee754_pow+0x1b4>)
    f582:	2000      	movs	r0, #0
    f584:	b013      	add	sp, #76	; 0x4c
    f586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f58a:	42b7      	cmp	r7, r6
    f58c:	ddcc      	ble.n	f528 <__ieee754_pow+0x28>
    f58e:	484b      	ldr	r0, [pc, #300]	; (f6bc <__ieee754_pow+0x1bc>)
    f590:	b013      	add	sp, #76	; 0x4c
    f592:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f596:	f000 bdc1 	b.w	1011c <nan>
    f59a:	2400      	movs	r4, #0
    f59c:	4640      	mov	r0, r8
    f59e:	4649      	mov	r1, r9
    f5a0:	f000 fdb0 	bl	10104 <fabs>
    f5a4:	f1bb 0f00 	cmp.w	fp, #0
    f5a8:	d119      	bne.n	f5de <__ieee754_pow+0xde>
    f5aa:	b126      	cbz	r6, f5b6 <__ieee754_pow+0xb6>
    f5ac:	4b41      	ldr	r3, [pc, #260]	; (f6b4 <__ieee754_pow+0x1b4>)
    f5ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
    f5b2:	429a      	cmp	r2, r3
    f5b4:	d113      	bne.n	f5de <__ieee754_pow+0xde>
    f5b6:	f1ba 0f00 	cmp.w	sl, #0
    f5ba:	f2c0 83bc 	blt.w	fd36 <__ieee754_pow+0x836>
    f5be:	2d00      	cmp	r5, #0
    f5c0:	dae0      	bge.n	f584 <__ieee754_pow+0x84>
    f5c2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
    f5c6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    f5ca:	ea56 0304 	orrs.w	r3, r6, r4
    f5ce:	f000 848f 	beq.w	fef0 <__ieee754_pow+0x9f0>
    f5d2:	2c01      	cmp	r4, #1
    f5d4:	d1d6      	bne.n	f584 <__ieee754_pow+0x84>
    f5d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    f5da:	4619      	mov	r1, r3
    f5dc:	e7d2      	b.n	f584 <__ieee754_pow+0x84>
    f5de:	0fed      	lsrs	r5, r5, #31
    f5e0:	3d01      	subs	r5, #1
    f5e2:	ea54 0305 	orrs.w	r3, r4, r5
    f5e6:	d04e      	beq.n	f686 <__ieee754_pow+0x186>
    f5e8:	4b35      	ldr	r3, [pc, #212]	; (f6c0 <__ieee754_pow+0x1c0>)
    f5ea:	429f      	cmp	r7, r3
    f5ec:	dd6e      	ble.n	f6cc <__ieee754_pow+0x1cc>
    f5ee:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    f5f2:	429f      	cmp	r7, r3
    f5f4:	f340 83e8 	ble.w	fdc8 <__ieee754_pow+0x8c8>
    f5f8:	4b32      	ldr	r3, [pc, #200]	; (f6c4 <__ieee754_pow+0x1c4>)
    f5fa:	429e      	cmp	r6, r3
    f5fc:	dd4e      	ble.n	f69c <__ieee754_pow+0x19c>
    f5fe:	f1ba 0f00 	cmp.w	sl, #0
    f602:	dd4e      	ble.n	f6a2 <__ieee754_pow+0x1a2>
    f604:	a328      	add	r3, pc, #160	; (adr r3, f6a8 <__ieee754_pow+0x1a8>)
    f606:	e9d3 2300 	ldrd	r2, r3, [r3]
    f60a:	4610      	mov	r0, r2
    f60c:	4619      	mov	r1, r3
    f60e:	f001 f855 	bl	106bc <__aeabi_dmul>
    f612:	e7b7      	b.n	f584 <__ieee754_pow+0x84>
    f614:	f1ba 0f00 	cmp.w	sl, #0
    f618:	f2c0 843c 	blt.w	fe94 <__ieee754_pow+0x994>
    f61c:	4640      	mov	r0, r8
    f61e:	4649      	mov	r1, r9
    f620:	e7b0      	b.n	f584 <__ieee754_pow+0x84>
    f622:	f1be 0f00 	cmp.w	lr, #0
    f626:	d082      	beq.n	f52e <__ieee754_pow+0x2e>
    f628:	e7a3      	b.n	f572 <__ieee754_pow+0x72>
    f62a:	4b27      	ldr	r3, [pc, #156]	; (f6c8 <__ieee754_pow+0x1c8>)
    f62c:	429f      	cmp	r7, r3
    f62e:	dc28      	bgt.n	f682 <__ieee754_pow+0x182>
    f630:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    f634:	429f      	cmp	r7, r3
    f636:	dd80      	ble.n	f53a <__ieee754_pow+0x3a>
    f638:	153b      	asrs	r3, r7, #20
    f63a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    f63e:	2b14      	cmp	r3, #20
    f640:	f340 843e 	ble.w	fec0 <__ieee754_pow+0x9c0>
    f644:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    f648:	fa2e f203 	lsr.w	r2, lr, r3
    f64c:	fa02 f303 	lsl.w	r3, r2, r3
    f650:	459e      	cmp	lr, r3
    f652:	f47f af72 	bne.w	f53a <__ieee754_pow+0x3a>
    f656:	f002 0201 	and.w	r2, r2, #1
    f65a:	f1c2 0402 	rsb	r4, r2, #2
    f65e:	e76d      	b.n	f53c <__ieee754_pow+0x3c>
    f660:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
    f664:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    f668:	ea53 030b 	orrs.w	r3, r3, fp
    f66c:	d088      	beq.n	f580 <__ieee754_pow+0x80>
    f66e:	4b15      	ldr	r3, [pc, #84]	; (f6c4 <__ieee754_pow+0x1c4>)
    f670:	429e      	cmp	r6, r3
    f672:	f340 8332 	ble.w	fcda <__ieee754_pow+0x7da>
    f676:	f1ba 0f00 	cmp.w	sl, #0
    f67a:	db12      	blt.n	f6a2 <__ieee754_pow+0x1a2>
    f67c:	e9dd 0100 	ldrd	r0, r1, [sp]
    f680:	e780      	b.n	f584 <__ieee754_pow+0x84>
    f682:	2402      	movs	r4, #2
    f684:	e75a      	b.n	f53c <__ieee754_pow+0x3c>
    f686:	4642      	mov	r2, r8
    f688:	464b      	mov	r3, r9
    f68a:	4640      	mov	r0, r8
    f68c:	4649      	mov	r1, r9
    f68e:	f000 fe61 	bl	10354 <__aeabi_dsub>
    f692:	4602      	mov	r2, r0
    f694:	460b      	mov	r3, r1
    f696:	f001 f93b 	bl	10910 <__aeabi_ddiv>
    f69a:	e773      	b.n	f584 <__ieee754_pow+0x84>
    f69c:	f1ba 0f00 	cmp.w	sl, #0
    f6a0:	dbb0      	blt.n	f604 <__ieee754_pow+0x104>
    f6a2:	2000      	movs	r0, #0
    f6a4:	2100      	movs	r1, #0
    f6a6:	e76d      	b.n	f584 <__ieee754_pow+0x84>
    f6a8:	8800759c 	.word	0x8800759c
    f6ac:	7e37e43c 	.word	0x7e37e43c
    f6b0:	7ff00000 	.word	0x7ff00000
    f6b4:	3ff00000 	.word	0x3ff00000
    f6b8:	3fe00000 	.word	0x3fe00000
    f6bc:	000121f8 	.word	0x000121f8
    f6c0:	41e00000 	.word	0x41e00000
    f6c4:	3fefffff 	.word	0x3fefffff
    f6c8:	433fffff 	.word	0x433fffff
    f6cc:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    f6d0:	f04f 0200 	mov.w	r2, #0
    f6d4:	da05      	bge.n	f6e2 <__ieee754_pow+0x1e2>
    f6d6:	4bd4      	ldr	r3, [pc, #848]	; (fa28 <__ieee754_pow+0x528>)
    f6d8:	f000 fff0 	bl	106bc <__aeabi_dmul>
    f6dc:	f06f 0234 	mvn.w	r2, #52	; 0x34
    f6e0:	460e      	mov	r6, r1
    f6e2:	1533      	asrs	r3, r6, #20
    f6e4:	4fd1      	ldr	r7, [pc, #836]	; (fa2c <__ieee754_pow+0x52c>)
    f6e6:	f3c6 0613 	ubfx	r6, r6, #0, #20
    f6ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    f6ee:	4413      	add	r3, r2
    f6f0:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
    f6f4:	42be      	cmp	r6, r7
    f6f6:	461a      	mov	r2, r3
    f6f8:	930d      	str	r3, [sp, #52]	; 0x34
    f6fa:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
    f6fe:	f340 8321 	ble.w	fd44 <__ieee754_pow+0x844>
    f702:	4bcb      	ldr	r3, [pc, #812]	; (fa30 <__ieee754_pow+0x530>)
    f704:	429e      	cmp	r6, r3
    f706:	f340 83fd 	ble.w	ff04 <__ieee754_pow+0xa04>
    f70a:	4613      	mov	r3, r2
    f70c:	3301      	adds	r3, #1
    f70e:	930d      	str	r3, [sp, #52]	; 0x34
    f710:	4bc8      	ldr	r3, [pc, #800]	; (fa34 <__ieee754_pow+0x534>)
    f712:	2200      	movs	r2, #0
    f714:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f718:	2700      	movs	r7, #0
    f71a:	2600      	movs	r6, #0
    f71c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    f720:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
    f724:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
    f728:	2700      	movs	r7, #0
    f72a:	4602      	mov	r2, r0
    f72c:	4653      	mov	r3, sl
    f72e:	4651      	mov	r1, sl
    f730:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    f734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f738:	f000 fe0c 	bl	10354 <__aeabi_dsub>
    f73c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f740:	4680      	mov	r8, r0
    f742:	4689      	mov	r9, r1
    f744:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    f748:	f000 fe06 	bl	10358 <__adddf3>
    f74c:	4602      	mov	r2, r0
    f74e:	460b      	mov	r3, r1
    f750:	2000      	movs	r0, #0
    f752:	49b8      	ldr	r1, [pc, #736]	; (fa34 <__ieee754_pow+0x534>)
    f754:	f001 f8dc 	bl	10910 <__aeabi_ddiv>
    f758:	460a      	mov	r2, r1
    f75a:	4601      	mov	r1, r0
    f75c:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
    f760:	4613      	mov	r3, r2
    f762:	4649      	mov	r1, r9
    f764:	4602      	mov	r2, r0
    f766:	4640      	mov	r0, r8
    f768:	f000 ffa8 	bl	106bc <__aeabi_dmul>
    f76c:	ea4f 036a 	mov.w	r3, sl, asr #1
    f770:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    f774:	468c      	mov	ip, r1
    f776:	4683      	mov	fp, r0
    f778:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    f77c:	e9cd bc04 	strd	fp, ip, [sp, #16]
    f780:	46da      	mov	sl, fp
    f782:	468b      	mov	fp, r1
    f784:	19d9      	adds	r1, r3, r7
    f786:	2300      	movs	r3, #0
    f788:	e9cd ab02 	strd	sl, fp, [sp, #8]
    f78c:	9302      	str	r3, [sp, #8]
    f78e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    f792:	2000      	movs	r0, #0
    f794:	4606      	mov	r6, r0
    f796:	460f      	mov	r7, r1
    f798:	4602      	mov	r2, r0
    f79a:	460b      	mov	r3, r1
    f79c:	4650      	mov	r0, sl
    f79e:	4659      	mov	r1, fp
    f7a0:	f000 ff8c 	bl	106bc <__aeabi_dmul>
    f7a4:	4602      	mov	r2, r0
    f7a6:	460b      	mov	r3, r1
    f7a8:	4640      	mov	r0, r8
    f7aa:	4649      	mov	r1, r9
    f7ac:	f000 fdd2 	bl	10354 <__aeabi_dsub>
    f7b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f7b4:	4680      	mov	r8, r0
    f7b6:	4689      	mov	r9, r1
    f7b8:	4630      	mov	r0, r6
    f7ba:	4639      	mov	r1, r7
    f7bc:	f000 fdca 	bl	10354 <__aeabi_dsub>
    f7c0:	4602      	mov	r2, r0
    f7c2:	460b      	mov	r3, r1
    f7c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    f7c8:	f000 fdc4 	bl	10354 <__aeabi_dsub>
    f7cc:	4652      	mov	r2, sl
    f7ce:	465b      	mov	r3, fp
    f7d0:	f000 ff74 	bl	106bc <__aeabi_dmul>
    f7d4:	4602      	mov	r2, r0
    f7d6:	460b      	mov	r3, r1
    f7d8:	4640      	mov	r0, r8
    f7da:	4649      	mov	r1, r9
    f7dc:	f000 fdba 	bl	10354 <__aeabi_dsub>
    f7e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    f7e4:	f000 ff6a 	bl	106bc <__aeabi_dmul>
    f7e8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    f7ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
    f7f0:	4632      	mov	r2, r6
    f7f2:	463b      	mov	r3, r7
    f7f4:	4630      	mov	r0, r6
    f7f6:	4639      	mov	r1, r7
    f7f8:	f000 ff60 	bl	106bc <__aeabi_dmul>
    f7fc:	a378      	add	r3, pc, #480	; (adr r3, f9e0 <__ieee754_pow+0x4e0>)
    f7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    f802:	4606      	mov	r6, r0
    f804:	460f      	mov	r7, r1
    f806:	f000 ff59 	bl	106bc <__aeabi_dmul>
    f80a:	a377      	add	r3, pc, #476	; (adr r3, f9e8 <__ieee754_pow+0x4e8>)
    f80c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f810:	f000 fda2 	bl	10358 <__adddf3>
    f814:	4632      	mov	r2, r6
    f816:	463b      	mov	r3, r7
    f818:	f000 ff50 	bl	106bc <__aeabi_dmul>
    f81c:	a374      	add	r3, pc, #464	; (adr r3, f9f0 <__ieee754_pow+0x4f0>)
    f81e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f822:	f000 fd99 	bl	10358 <__adddf3>
    f826:	4632      	mov	r2, r6
    f828:	463b      	mov	r3, r7
    f82a:	f000 ff47 	bl	106bc <__aeabi_dmul>
    f82e:	a372      	add	r3, pc, #456	; (adr r3, f9f8 <__ieee754_pow+0x4f8>)
    f830:	e9d3 2300 	ldrd	r2, r3, [r3]
    f834:	f000 fd90 	bl	10358 <__adddf3>
    f838:	4632      	mov	r2, r6
    f83a:	463b      	mov	r3, r7
    f83c:	f000 ff3e 	bl	106bc <__aeabi_dmul>
    f840:	a36f      	add	r3, pc, #444	; (adr r3, fa00 <__ieee754_pow+0x500>)
    f842:	e9d3 2300 	ldrd	r2, r3, [r3]
    f846:	f000 fd87 	bl	10358 <__adddf3>
    f84a:	4632      	mov	r2, r6
    f84c:	463b      	mov	r3, r7
    f84e:	f000 ff35 	bl	106bc <__aeabi_dmul>
    f852:	a36d      	add	r3, pc, #436	; (adr r3, fa08 <__ieee754_pow+0x508>)
    f854:	e9d3 2300 	ldrd	r2, r3, [r3]
    f858:	f000 fd7e 	bl	10358 <__adddf3>
    f85c:	4632      	mov	r2, r6
    f85e:	4680      	mov	r8, r0
    f860:	4689      	mov	r9, r1
    f862:	463b      	mov	r3, r7
    f864:	4630      	mov	r0, r6
    f866:	4639      	mov	r1, r7
    f868:	f000 ff28 	bl	106bc <__aeabi_dmul>
    f86c:	4602      	mov	r2, r0
    f86e:	460b      	mov	r3, r1
    f870:	4640      	mov	r0, r8
    f872:	4649      	mov	r1, r9
    f874:	f000 ff22 	bl	106bc <__aeabi_dmul>
    f878:	4652      	mov	r2, sl
    f87a:	4606      	mov	r6, r0
    f87c:	460f      	mov	r7, r1
    f87e:	465b      	mov	r3, fp
    f880:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    f884:	f000 fd68 	bl	10358 <__adddf3>
    f888:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f88c:	f000 ff16 	bl	106bc <__aeabi_dmul>
    f890:	4632      	mov	r2, r6
    f892:	463b      	mov	r3, r7
    f894:	f000 fd60 	bl	10358 <__adddf3>
    f898:	4652      	mov	r2, sl
    f89a:	4680      	mov	r8, r0
    f89c:	4689      	mov	r9, r1
    f89e:	465b      	mov	r3, fp
    f8a0:	4650      	mov	r0, sl
    f8a2:	4659      	mov	r1, fp
    f8a4:	f000 ff0a 	bl	106bc <__aeabi_dmul>
    f8a8:	2200      	movs	r2, #0
    f8aa:	4b63      	ldr	r3, [pc, #396]	; (fa38 <__ieee754_pow+0x538>)
    f8ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    f8b0:	f000 fd52 	bl	10358 <__adddf3>
    f8b4:	4642      	mov	r2, r8
    f8b6:	464b      	mov	r3, r9
    f8b8:	f000 fd4e 	bl	10358 <__adddf3>
    f8bc:	9802      	ldr	r0, [sp, #8]
    f8be:	460f      	mov	r7, r1
    f8c0:	4606      	mov	r6, r0
    f8c2:	4632      	mov	r2, r6
    f8c4:	463b      	mov	r3, r7
    f8c6:	4650      	mov	r0, sl
    f8c8:	4659      	mov	r1, fp
    f8ca:	f000 fef7 	bl	106bc <__aeabi_dmul>
    f8ce:	2200      	movs	r2, #0
    f8d0:	4682      	mov	sl, r0
    f8d2:	468b      	mov	fp, r1
    f8d4:	4b58      	ldr	r3, [pc, #352]	; (fa38 <__ieee754_pow+0x538>)
    f8d6:	4630      	mov	r0, r6
    f8d8:	4639      	mov	r1, r7
    f8da:	f000 fd3b 	bl	10354 <__aeabi_dsub>
    f8de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    f8e2:	f000 fd37 	bl	10354 <__aeabi_dsub>
    f8e6:	4602      	mov	r2, r0
    f8e8:	460b      	mov	r3, r1
    f8ea:	4640      	mov	r0, r8
    f8ec:	4649      	mov	r1, r9
    f8ee:	f000 fd31 	bl	10354 <__aeabi_dsub>
    f8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f8f6:	f000 fee1 	bl	106bc <__aeabi_dmul>
    f8fa:	4632      	mov	r2, r6
    f8fc:	4680      	mov	r8, r0
    f8fe:	4689      	mov	r9, r1
    f900:	463b      	mov	r3, r7
    f902:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    f906:	f000 fed9 	bl	106bc <__aeabi_dmul>
    f90a:	4602      	mov	r2, r0
    f90c:	460b      	mov	r3, r1
    f90e:	4640      	mov	r0, r8
    f910:	4649      	mov	r1, r9
    f912:	f000 fd21 	bl	10358 <__adddf3>
    f916:	4680      	mov	r8, r0
    f918:	4689      	mov	r9, r1
    f91a:	4602      	mov	r2, r0
    f91c:	460b      	mov	r3, r1
    f91e:	4650      	mov	r0, sl
    f920:	4659      	mov	r1, fp
    f922:	e9cd ab04 	strd	sl, fp, [sp, #16]
    f926:	f000 fd17 	bl	10358 <__adddf3>
    f92a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    f92e:	a338      	add	r3, pc, #224	; (adr r3, fa10 <__ieee754_pow+0x510>)
    f930:	e9d3 2300 	ldrd	r2, r3, [r3]
    f934:	4650      	mov	r0, sl
    f936:	460f      	mov	r7, r1
    f938:	f000 fec0 	bl	106bc <__aeabi_dmul>
    f93c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f940:	e9cd 0102 	strd	r0, r1, [sp, #8]
    f944:	4639      	mov	r1, r7
    f946:	4650      	mov	r0, sl
    f948:	f000 fd04 	bl	10354 <__aeabi_dsub>
    f94c:	4602      	mov	r2, r0
    f94e:	460b      	mov	r3, r1
    f950:	4640      	mov	r0, r8
    f952:	4649      	mov	r1, r9
    f954:	f000 fcfe 	bl	10354 <__aeabi_dsub>
    f958:	a32f      	add	r3, pc, #188	; (adr r3, fa18 <__ieee754_pow+0x518>)
    f95a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f95e:	f000 fead 	bl	106bc <__aeabi_dmul>
    f962:	a32f      	add	r3, pc, #188	; (adr r3, fa20 <__ieee754_pow+0x520>)
    f964:	e9d3 2300 	ldrd	r2, r3, [r3]
    f968:	4680      	mov	r8, r0
    f96a:	4689      	mov	r9, r1
    f96c:	4650      	mov	r0, sl
    f96e:	4639      	mov	r1, r7
    f970:	f000 fea4 	bl	106bc <__aeabi_dmul>
    f974:	4602      	mov	r2, r0
    f976:	460b      	mov	r3, r1
    f978:	4640      	mov	r0, r8
    f97a:	4649      	mov	r1, r9
    f97c:	f000 fcec 	bl	10358 <__adddf3>
    f980:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    f984:	f000 fce8 	bl	10358 <__adddf3>
    f988:	4680      	mov	r8, r0
    f98a:	980d      	ldr	r0, [sp, #52]	; 0x34
    f98c:	4689      	mov	r9, r1
    f98e:	f000 fe2f 	bl	105f0 <__aeabi_i2d>
    f992:	4642      	mov	r2, r8
    f994:	4606      	mov	r6, r0
    f996:	460f      	mov	r7, r1
    f998:	464b      	mov	r3, r9
    f99a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f99e:	f000 fcdb 	bl	10358 <__adddf3>
    f9a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    f9a6:	f000 fcd7 	bl	10358 <__adddf3>
    f9aa:	4632      	mov	r2, r6
    f9ac:	463b      	mov	r3, r7
    f9ae:	f000 fcd3 	bl	10358 <__adddf3>
    f9b2:	4632      	mov	r2, r6
    f9b4:	463b      	mov	r3, r7
    f9b6:	4650      	mov	r0, sl
    f9b8:	468b      	mov	fp, r1
    f9ba:	f000 fccb 	bl	10354 <__aeabi_dsub>
    f9be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    f9c2:	f000 fcc7 	bl	10354 <__aeabi_dsub>
    f9c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f9ca:	f000 fcc3 	bl	10354 <__aeabi_dsub>
    f9ce:	4602      	mov	r2, r0
    f9d0:	460b      	mov	r3, r1
    f9d2:	4640      	mov	r0, r8
    f9d4:	4649      	mov	r1, r9
    f9d6:	f000 fcbd 	bl	10354 <__aeabi_dsub>
    f9da:	4680      	mov	r8, r0
    f9dc:	e02e      	b.n	fa3c <__ieee754_pow+0x53c>
    f9de:	bf00      	nop
    f9e0:	4a454eef 	.word	0x4a454eef
    f9e4:	3fca7e28 	.word	0x3fca7e28
    f9e8:	93c9db65 	.word	0x93c9db65
    f9ec:	3fcd864a 	.word	0x3fcd864a
    f9f0:	a91d4101 	.word	0xa91d4101
    f9f4:	3fd17460 	.word	0x3fd17460
    f9f8:	518f264d 	.word	0x518f264d
    f9fc:	3fd55555 	.word	0x3fd55555
    fa00:	db6fabff 	.word	0xdb6fabff
    fa04:	3fdb6db6 	.word	0x3fdb6db6
    fa08:	33333303 	.word	0x33333303
    fa0c:	3fe33333 	.word	0x3fe33333
    fa10:	e0000000 	.word	0xe0000000
    fa14:	3feec709 	.word	0x3feec709
    fa18:	dc3a03fd 	.word	0xdc3a03fd
    fa1c:	3feec709 	.word	0x3feec709
    fa20:	145b01f5 	.word	0x145b01f5
    fa24:	be3e2fe0 	.word	0xbe3e2fe0
    fa28:	43400000 	.word	0x43400000
    fa2c:	0003988e 	.word	0x0003988e
    fa30:	000bb679 	.word	0x000bb679
    fa34:	3ff00000 	.word	0x3ff00000
    fa38:	40080000 	.word	0x40080000
    fa3c:	4689      	mov	r9, r1
    fa3e:	3c01      	subs	r4, #1
    fa40:	ea54 0305 	orrs.w	r3, r4, r5
    fa44:	e9dd 0100 	ldrd	r0, r1, [sp]
    fa48:	bf14      	ite	ne
    fa4a:	4cd9      	ldrne	r4, [pc, #868]	; (fdb0 <__ieee754_pow+0x8b0>)
    fa4c:	4cd9      	ldreq	r4, [pc, #868]	; (fdb4 <__ieee754_pow+0x8b4>)
    fa4e:	2300      	movs	r3, #0
    fa50:	e9cd 3404 	strd	r3, r4, [sp, #16]
    fa54:	4603      	mov	r3, r0
    fa56:	460c      	mov	r4, r1
    fa58:	e9cd 3402 	strd	r3, r4, [sp, #8]
    fa5c:	2300      	movs	r3, #0
    fa5e:	9302      	str	r3, [sp, #8]
    fa60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    fa64:	4622      	mov	r2, r4
    fa66:	462b      	mov	r3, r5
    fa68:	f000 fc74 	bl	10354 <__aeabi_dsub>
    fa6c:	4652      	mov	r2, sl
    fa6e:	465b      	mov	r3, fp
    fa70:	f000 fe24 	bl	106bc <__aeabi_dmul>
    fa74:	e9dd 2300 	ldrd	r2, r3, [sp]
    fa78:	4606      	mov	r6, r0
    fa7a:	460f      	mov	r7, r1
    fa7c:	4640      	mov	r0, r8
    fa7e:	4649      	mov	r1, r9
    fa80:	f000 fe1c 	bl	106bc <__aeabi_dmul>
    fa84:	4602      	mov	r2, r0
    fa86:	460b      	mov	r3, r1
    fa88:	4630      	mov	r0, r6
    fa8a:	4639      	mov	r1, r7
    fa8c:	f000 fc64 	bl	10358 <__adddf3>
    fa90:	4622      	mov	r2, r4
    fa92:	4680      	mov	r8, r0
    fa94:	4689      	mov	r9, r1
    fa96:	462b      	mov	r3, r5
    fa98:	4650      	mov	r0, sl
    fa9a:	4659      	mov	r1, fp
    fa9c:	e9cd 8900 	strd	r8, r9, [sp]
    faa0:	f000 fe0c 	bl	106bc <__aeabi_dmul>
    faa4:	460b      	mov	r3, r1
    faa6:	4602      	mov	r2, r0
    faa8:	4606      	mov	r6, r0
    faaa:	460f      	mov	r7, r1
    faac:	4640      	mov	r0, r8
    faae:	4649      	mov	r1, r9
    fab0:	f000 fc52 	bl	10358 <__adddf3>
    fab4:	4bc0      	ldr	r3, [pc, #768]	; (fdb8 <__ieee754_pow+0x8b8>)
    fab6:	4299      	cmp	r1, r3
    fab8:	4604      	mov	r4, r0
    faba:	460d      	mov	r5, r1
    fabc:	468a      	mov	sl, r1
    fabe:	f340 8116 	ble.w	fcee <__ieee754_pow+0x7ee>
    fac2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    fac6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    faca:	4303      	orrs	r3, r0
    facc:	f040 81ea 	bne.w	fea4 <__ieee754_pow+0x9a4>
    fad0:	a3a3      	add	r3, pc, #652	; (adr r3, fd60 <__ieee754_pow+0x860>)
    fad2:	e9d3 2300 	ldrd	r2, r3, [r3]
    fad6:	e9dd 0100 	ldrd	r0, r1, [sp]
    fada:	f000 fc3d 	bl	10358 <__adddf3>
    fade:	4632      	mov	r2, r6
    fae0:	4680      	mov	r8, r0
    fae2:	4689      	mov	r9, r1
    fae4:	463b      	mov	r3, r7
    fae6:	4620      	mov	r0, r4
    fae8:	4629      	mov	r1, r5
    faea:	f000 fc33 	bl	10354 <__aeabi_dsub>
    faee:	4602      	mov	r2, r0
    faf0:	460b      	mov	r3, r1
    faf2:	4640      	mov	r0, r8
    faf4:	4649      	mov	r1, r9
    faf6:	f001 f871 	bl	10bdc <__aeabi_dcmpgt>
    fafa:	2800      	cmp	r0, #0
    fafc:	f040 81d2 	bne.w	fea4 <__ieee754_pow+0x9a4>
    fb00:	46a8      	mov	r8, r5
    fb02:	ea4f 5328 	mov.w	r3, r8, asr #20
    fb06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    fb0a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    fb0e:	fa42 f303 	asr.w	r3, r2, r3
    fb12:	4453      	add	r3, sl
    fb14:	f3c3 520a 	ubfx	r2, r3, #20, #11
    fb18:	4da8      	ldr	r5, [pc, #672]	; (fdbc <__ieee754_pow+0x8bc>)
    fb1a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    fb1e:	4115      	asrs	r5, r2
    fb20:	f3c3 0413 	ubfx	r4, r3, #0, #20
    fb24:	ea23 0105 	bic.w	r1, r3, r5
    fb28:	2000      	movs	r0, #0
    fb2a:	f1c2 0b14 	rsb	fp, r2, #20
    fb2e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    fb32:	f1ba 0f00 	cmp.w	sl, #0
    fb36:	4602      	mov	r2, r0
    fb38:	460b      	mov	r3, r1
    fb3a:	fa44 fb0b 	asr.w	fp, r4, fp
    fb3e:	4630      	mov	r0, r6
    fb40:	4639      	mov	r1, r7
    fb42:	bfb8      	it	lt
    fb44:	f1cb 0b00 	rsblt	fp, fp, #0
    fb48:	f000 fc04 	bl	10354 <__aeabi_dsub>
    fb4c:	4602      	mov	r2, r0
    fb4e:	460b      	mov	r3, r1
    fb50:	4606      	mov	r6, r0
    fb52:	460f      	mov	r7, r1
    fb54:	e9dd 0100 	ldrd	r0, r1, [sp]
    fb58:	f000 fbfe 	bl	10358 <__adddf3>
    fb5c:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
    fb60:	460d      	mov	r5, r1
    fb62:	2400      	movs	r4, #0
    fb64:	a380      	add	r3, pc, #512	; (adr r3, fd68 <__ieee754_pow+0x868>)
    fb66:	e9d3 2300 	ldrd	r2, r3, [r3]
    fb6a:	4620      	mov	r0, r4
    fb6c:	4629      	mov	r1, r5
    fb6e:	f000 fda5 	bl	106bc <__aeabi_dmul>
    fb72:	4632      	mov	r2, r6
    fb74:	4680      	mov	r8, r0
    fb76:	4689      	mov	r9, r1
    fb78:	463b      	mov	r3, r7
    fb7a:	4620      	mov	r0, r4
    fb7c:	4629      	mov	r1, r5
    fb7e:	f000 fbe9 	bl	10354 <__aeabi_dsub>
    fb82:	4602      	mov	r2, r0
    fb84:	460b      	mov	r3, r1
    fb86:	e9dd 0100 	ldrd	r0, r1, [sp]
    fb8a:	f000 fbe3 	bl	10354 <__aeabi_dsub>
    fb8e:	a378      	add	r3, pc, #480	; (adr r3, fd70 <__ieee754_pow+0x870>)
    fb90:	e9d3 2300 	ldrd	r2, r3, [r3]
    fb94:	f000 fd92 	bl	106bc <__aeabi_dmul>
    fb98:	a377      	add	r3, pc, #476	; (adr r3, fd78 <__ieee754_pow+0x878>)
    fb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    fb9e:	4606      	mov	r6, r0
    fba0:	460f      	mov	r7, r1
    fba2:	4620      	mov	r0, r4
    fba4:	4629      	mov	r1, r5
    fba6:	f000 fd89 	bl	106bc <__aeabi_dmul>
    fbaa:	4602      	mov	r2, r0
    fbac:	460b      	mov	r3, r1
    fbae:	4630      	mov	r0, r6
    fbb0:	4639      	mov	r1, r7
    fbb2:	f000 fbd1 	bl	10358 <__adddf3>
    fbb6:	4606      	mov	r6, r0
    fbb8:	460f      	mov	r7, r1
    fbba:	4602      	mov	r2, r0
    fbbc:	460b      	mov	r3, r1
    fbbe:	4640      	mov	r0, r8
    fbc0:	4649      	mov	r1, r9
    fbc2:	f000 fbc9 	bl	10358 <__adddf3>
    fbc6:	4642      	mov	r2, r8
    fbc8:	464b      	mov	r3, r9
    fbca:	4604      	mov	r4, r0
    fbcc:	460d      	mov	r5, r1
    fbce:	f000 fbc1 	bl	10354 <__aeabi_dsub>
    fbd2:	4602      	mov	r2, r0
    fbd4:	460b      	mov	r3, r1
    fbd6:	4630      	mov	r0, r6
    fbd8:	4639      	mov	r1, r7
    fbda:	f000 fbbb 	bl	10354 <__aeabi_dsub>
    fbde:	4622      	mov	r2, r4
    fbe0:	4680      	mov	r8, r0
    fbe2:	4689      	mov	r9, r1
    fbe4:	462b      	mov	r3, r5
    fbe6:	4620      	mov	r0, r4
    fbe8:	4629      	mov	r1, r5
    fbea:	f000 fd67 	bl	106bc <__aeabi_dmul>
    fbee:	a364      	add	r3, pc, #400	; (adr r3, fd80 <__ieee754_pow+0x880>)
    fbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
    fbf4:	4606      	mov	r6, r0
    fbf6:	460f      	mov	r7, r1
    fbf8:	f000 fd60 	bl	106bc <__aeabi_dmul>
    fbfc:	a362      	add	r3, pc, #392	; (adr r3, fd88 <__ieee754_pow+0x888>)
    fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc02:	f000 fba7 	bl	10354 <__aeabi_dsub>
    fc06:	4632      	mov	r2, r6
    fc08:	463b      	mov	r3, r7
    fc0a:	f000 fd57 	bl	106bc <__aeabi_dmul>
    fc0e:	a360      	add	r3, pc, #384	; (adr r3, fd90 <__ieee754_pow+0x890>)
    fc10:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc14:	f000 fba0 	bl	10358 <__adddf3>
    fc18:	4632      	mov	r2, r6
    fc1a:	463b      	mov	r3, r7
    fc1c:	f000 fd4e 	bl	106bc <__aeabi_dmul>
    fc20:	a35d      	add	r3, pc, #372	; (adr r3, fd98 <__ieee754_pow+0x898>)
    fc22:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc26:	f000 fb95 	bl	10354 <__aeabi_dsub>
    fc2a:	4632      	mov	r2, r6
    fc2c:	463b      	mov	r3, r7
    fc2e:	f000 fd45 	bl	106bc <__aeabi_dmul>
    fc32:	a35b      	add	r3, pc, #364	; (adr r3, fda0 <__ieee754_pow+0x8a0>)
    fc34:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc38:	f000 fb8e 	bl	10358 <__adddf3>
    fc3c:	4632      	mov	r2, r6
    fc3e:	463b      	mov	r3, r7
    fc40:	f000 fd3c 	bl	106bc <__aeabi_dmul>
    fc44:	4602      	mov	r2, r0
    fc46:	460b      	mov	r3, r1
    fc48:	4620      	mov	r0, r4
    fc4a:	4629      	mov	r1, r5
    fc4c:	f000 fb82 	bl	10354 <__aeabi_dsub>
    fc50:	4606      	mov	r6, r0
    fc52:	460f      	mov	r7, r1
    fc54:	4602      	mov	r2, r0
    fc56:	460b      	mov	r3, r1
    fc58:	4620      	mov	r0, r4
    fc5a:	4629      	mov	r1, r5
    fc5c:	f000 fd2e 	bl	106bc <__aeabi_dmul>
    fc60:	2200      	movs	r2, #0
    fc62:	e9cd 0100 	strd	r0, r1, [sp]
    fc66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fc6a:	4630      	mov	r0, r6
    fc6c:	4639      	mov	r1, r7
    fc6e:	f000 fb71 	bl	10354 <__aeabi_dsub>
    fc72:	4602      	mov	r2, r0
    fc74:	460b      	mov	r3, r1
    fc76:	e9dd 0100 	ldrd	r0, r1, [sp]
    fc7a:	f000 fe49 	bl	10910 <__aeabi_ddiv>
    fc7e:	4642      	mov	r2, r8
    fc80:	4606      	mov	r6, r0
    fc82:	460f      	mov	r7, r1
    fc84:	464b      	mov	r3, r9
    fc86:	4620      	mov	r0, r4
    fc88:	4629      	mov	r1, r5
    fc8a:	f000 fd17 	bl	106bc <__aeabi_dmul>
    fc8e:	4642      	mov	r2, r8
    fc90:	464b      	mov	r3, r9
    fc92:	f000 fb61 	bl	10358 <__adddf3>
    fc96:	4602      	mov	r2, r0
    fc98:	460b      	mov	r3, r1
    fc9a:	4630      	mov	r0, r6
    fc9c:	4639      	mov	r1, r7
    fc9e:	f000 fb59 	bl	10354 <__aeabi_dsub>
    fca2:	4622      	mov	r2, r4
    fca4:	462b      	mov	r3, r5
    fca6:	f000 fb55 	bl	10354 <__aeabi_dsub>
    fcaa:	4602      	mov	r2, r0
    fcac:	460b      	mov	r3, r1
    fcae:	2000      	movs	r0, #0
    fcb0:	493f      	ldr	r1, [pc, #252]	; (fdb0 <__ieee754_pow+0x8b0>)
    fcb2:	f000 fb4f 	bl	10354 <__aeabi_dsub>
    fcb6:	448a      	add	sl, r1
    fcb8:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
    fcbc:	f2c0 8133 	blt.w	ff26 <__ieee754_pow+0xa26>
    fcc0:	4651      	mov	r1, sl
    fcc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    fcc6:	f000 fcf9 	bl	106bc <__aeabi_dmul>
    fcca:	e45b      	b.n	f584 <__ieee754_pow+0x84>
    fccc:	4642      	mov	r2, r8
    fcce:	4640      	mov	r0, r8
    fcd0:	464b      	mov	r3, r9
    fcd2:	4649      	mov	r1, r9
    fcd4:	f000 fcf2 	bl	106bc <__aeabi_dmul>
    fcd8:	e454      	b.n	f584 <__ieee754_pow+0x84>
    fcda:	f1ba 0f00 	cmp.w	sl, #0
    fcde:	f6bf ace0 	bge.w	f6a2 <__ieee754_pow+0x1a2>
    fce2:	e9dd 3400 	ldrd	r3, r4, [sp]
    fce6:	4618      	mov	r0, r3
    fce8:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    fcec:	e44a      	b.n	f584 <__ieee754_pow+0x84>
    fcee:	4b34      	ldr	r3, [pc, #208]	; (fdc0 <__ieee754_pow+0x8c0>)
    fcf0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
    fcf4:	4598      	cmp	r8, r3
    fcf6:	f340 80f2 	ble.w	fede <__ieee754_pow+0x9de>
    fcfa:	4b32      	ldr	r3, [pc, #200]	; (fdc4 <__ieee754_pow+0x8c4>)
    fcfc:	440b      	add	r3, r1
    fcfe:	4303      	orrs	r3, r0
    fd00:	d10c      	bne.n	fd1c <__ieee754_pow+0x81c>
    fd02:	4632      	mov	r2, r6
    fd04:	463b      	mov	r3, r7
    fd06:	f000 fb25 	bl	10354 <__aeabi_dsub>
    fd0a:	4602      	mov	r2, r0
    fd0c:	460b      	mov	r3, r1
    fd0e:	e9dd 0100 	ldrd	r0, r1, [sp]
    fd12:	f000 ff4f 	bl	10bb4 <__aeabi_dcmple>
    fd16:	2800      	cmp	r0, #0
    fd18:	f43f aef3 	beq.w	fb02 <__ieee754_pow+0x602>
    fd1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    fd20:	a321      	add	r3, pc, #132	; (adr r3, fda8 <__ieee754_pow+0x8a8>)
    fd22:	e9d3 2300 	ldrd	r2, r3, [r3]
    fd26:	f000 fcc9 	bl	106bc <__aeabi_dmul>
    fd2a:	a31f      	add	r3, pc, #124	; (adr r3, fda8 <__ieee754_pow+0x8a8>)
    fd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
    fd30:	f000 fcc4 	bl	106bc <__aeabi_dmul>
    fd34:	e426      	b.n	f584 <__ieee754_pow+0x84>
    fd36:	4602      	mov	r2, r0
    fd38:	460b      	mov	r3, r1
    fd3a:	2000      	movs	r0, #0
    fd3c:	491c      	ldr	r1, [pc, #112]	; (fdb0 <__ieee754_pow+0x8b0>)
    fd3e:	f000 fde7 	bl	10910 <__aeabi_ddiv>
    fd42:	e43c      	b.n	f5be <__ieee754_pow+0xbe>
    fd44:	2200      	movs	r2, #0
    fd46:	2300      	movs	r3, #0
    fd48:	e9cd 2308 	strd	r2, r3, [sp, #32]
    fd4c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    fd50:	4b17      	ldr	r3, [pc, #92]	; (fdb0 <__ieee754_pow+0x8b0>)
    fd52:	2200      	movs	r2, #0
    fd54:	2700      	movs	r7, #0
    fd56:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fd5a:	e4e6      	b.n	f72a <__ieee754_pow+0x22a>
    fd5c:	f3af 8000 	nop.w
    fd60:	652b82fe 	.word	0x652b82fe
    fd64:	3c971547 	.word	0x3c971547
    fd68:	00000000 	.word	0x00000000
    fd6c:	3fe62e43 	.word	0x3fe62e43
    fd70:	fefa39ef 	.word	0xfefa39ef
    fd74:	3fe62e42 	.word	0x3fe62e42
    fd78:	0ca86c39 	.word	0x0ca86c39
    fd7c:	be205c61 	.word	0xbe205c61
    fd80:	72bea4d0 	.word	0x72bea4d0
    fd84:	3e663769 	.word	0x3e663769
    fd88:	c5d26bf1 	.word	0xc5d26bf1
    fd8c:	3ebbbd41 	.word	0x3ebbbd41
    fd90:	af25de2c 	.word	0xaf25de2c
    fd94:	3f11566a 	.word	0x3f11566a
    fd98:	16bebd93 	.word	0x16bebd93
    fd9c:	3f66c16c 	.word	0x3f66c16c
    fda0:	5555553e 	.word	0x5555553e
    fda4:	3fc55555 	.word	0x3fc55555
    fda8:	c2f8f359 	.word	0xc2f8f359
    fdac:	01a56e1f 	.word	0x01a56e1f
    fdb0:	3ff00000 	.word	0x3ff00000
    fdb4:	bff00000 	.word	0xbff00000
    fdb8:	408fffff 	.word	0x408fffff
    fdbc:	000fffff 	.word	0x000fffff
    fdc0:	4090cbff 	.word	0x4090cbff
    fdc4:	3f6f3400 	.word	0x3f6f3400
    fdc8:	4b6b      	ldr	r3, [pc, #428]	; (ff78 <__ieee754_pow+0xa78>)
    fdca:	429e      	cmp	r6, r3
    fdcc:	f77f ac66 	ble.w	f69c <__ieee754_pow+0x19c>
    fdd0:	4b6a      	ldr	r3, [pc, #424]	; (ff7c <__ieee754_pow+0xa7c>)
    fdd2:	429e      	cmp	r6, r3
    fdd4:	f73f ac13 	bgt.w	f5fe <__ieee754_pow+0xfe>
    fdd8:	2200      	movs	r2, #0
    fdda:	4b68      	ldr	r3, [pc, #416]	; (ff7c <__ieee754_pow+0xa7c>)
    fddc:	f000 faba 	bl	10354 <__aeabi_dsub>
    fde0:	a357      	add	r3, pc, #348	; (adr r3, ff40 <__ieee754_pow+0xa40>)
    fde2:	e9d3 2300 	ldrd	r2, r3, [r3]
    fde6:	4606      	mov	r6, r0
    fde8:	460f      	mov	r7, r1
    fdea:	f000 fc67 	bl	106bc <__aeabi_dmul>
    fdee:	a356      	add	r3, pc, #344	; (adr r3, ff48 <__ieee754_pow+0xa48>)
    fdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
    fdf4:	4680      	mov	r8, r0
    fdf6:	4689      	mov	r9, r1
    fdf8:	4630      	mov	r0, r6
    fdfa:	4639      	mov	r1, r7
    fdfc:	f000 fc5e 	bl	106bc <__aeabi_dmul>
    fe00:	2200      	movs	r2, #0
    fe02:	4682      	mov	sl, r0
    fe04:	468b      	mov	fp, r1
    fe06:	4b5e      	ldr	r3, [pc, #376]	; (ff80 <__ieee754_pow+0xa80>)
    fe08:	4630      	mov	r0, r6
    fe0a:	4639      	mov	r1, r7
    fe0c:	f000 fc56 	bl	106bc <__aeabi_dmul>
    fe10:	4602      	mov	r2, r0
    fe12:	460b      	mov	r3, r1
    fe14:	a14e      	add	r1, pc, #312	; (adr r1, ff50 <__ieee754_pow+0xa50>)
    fe16:	e9d1 0100 	ldrd	r0, r1, [r1]
    fe1a:	f000 fa9b 	bl	10354 <__aeabi_dsub>
    fe1e:	4632      	mov	r2, r6
    fe20:	463b      	mov	r3, r7
    fe22:	f000 fc4b 	bl	106bc <__aeabi_dmul>
    fe26:	4602      	mov	r2, r0
    fe28:	460b      	mov	r3, r1
    fe2a:	2000      	movs	r0, #0
    fe2c:	4955      	ldr	r1, [pc, #340]	; (ff84 <__ieee754_pow+0xa84>)
    fe2e:	f000 fa91 	bl	10354 <__aeabi_dsub>
    fe32:	4632      	mov	r2, r6
    fe34:	e9cd 0102 	strd	r0, r1, [sp, #8]
    fe38:	463b      	mov	r3, r7
    fe3a:	4630      	mov	r0, r6
    fe3c:	4639      	mov	r1, r7
    fe3e:	f000 fc3d 	bl	106bc <__aeabi_dmul>
    fe42:	4602      	mov	r2, r0
    fe44:	460b      	mov	r3, r1
    fe46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    fe4a:	f000 fc37 	bl	106bc <__aeabi_dmul>
    fe4e:	a342      	add	r3, pc, #264	; (adr r3, ff58 <__ieee754_pow+0xa58>)
    fe50:	e9d3 2300 	ldrd	r2, r3, [r3]
    fe54:	f000 fc32 	bl	106bc <__aeabi_dmul>
    fe58:	4602      	mov	r2, r0
    fe5a:	460b      	mov	r3, r1
    fe5c:	4650      	mov	r0, sl
    fe5e:	4659      	mov	r1, fp
    fe60:	f000 fa78 	bl	10354 <__aeabi_dsub>
    fe64:	4602      	mov	r2, r0
    fe66:	460b      	mov	r3, r1
    fe68:	4606      	mov	r6, r0
    fe6a:	460f      	mov	r7, r1
    fe6c:	4640      	mov	r0, r8
    fe6e:	4649      	mov	r1, r9
    fe70:	f000 fa72 	bl	10358 <__adddf3>
    fe74:	4642      	mov	r2, r8
    fe76:	464b      	mov	r3, r9
    fe78:	2000      	movs	r0, #0
    fe7a:	4682      	mov	sl, r0
    fe7c:	468b      	mov	fp, r1
    fe7e:	f000 fa69 	bl	10354 <__aeabi_dsub>
    fe82:	4602      	mov	r2, r0
    fe84:	460b      	mov	r3, r1
    fe86:	4630      	mov	r0, r6
    fe88:	4639      	mov	r1, r7
    fe8a:	f000 fa63 	bl	10354 <__aeabi_dsub>
    fe8e:	4680      	mov	r8, r0
    fe90:	4689      	mov	r9, r1
    fe92:	e5d4      	b.n	fa3e <__ieee754_pow+0x53e>
    fe94:	4642      	mov	r2, r8
    fe96:	464b      	mov	r3, r9
    fe98:	2000      	movs	r0, #0
    fe9a:	4938      	ldr	r1, [pc, #224]	; (ff7c <__ieee754_pow+0xa7c>)
    fe9c:	f000 fd38 	bl	10910 <__aeabi_ddiv>
    fea0:	f7ff bb70 	b.w	f584 <__ieee754_pow+0x84>
    fea4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    fea8:	a32d      	add	r3, pc, #180	; (adr r3, ff60 <__ieee754_pow+0xa60>)
    feaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    feae:	f000 fc05 	bl	106bc <__aeabi_dmul>
    feb2:	a32b      	add	r3, pc, #172	; (adr r3, ff60 <__ieee754_pow+0xa60>)
    feb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    feb8:	f000 fc00 	bl	106bc <__aeabi_dmul>
    febc:	f7ff bb62 	b.w	f584 <__ieee754_pow+0x84>
    fec0:	f1be 0f00 	cmp.w	lr, #0
    fec4:	f47f ab69 	bne.w	f59a <__ieee754_pow+0x9a>
    fec8:	f1c3 0314 	rsb	r3, r3, #20
    fecc:	fa47 f203 	asr.w	r2, r7, r3
    fed0:	fa02 f303 	lsl.w	r3, r2, r3
    fed4:	429f      	cmp	r7, r3
    fed6:	d02a      	beq.n	ff2e <__ieee754_pow+0xa2e>
    fed8:	4674      	mov	r4, lr
    feda:	f7ff bb36 	b.w	f54a <__ieee754_pow+0x4a>
    fede:	4b29      	ldr	r3, [pc, #164]	; (ff84 <__ieee754_pow+0xa84>)
    fee0:	4598      	cmp	r8, r3
    fee2:	f73f ae0e 	bgt.w	fb02 <__ieee754_pow+0x602>
    fee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    feea:	4692      	mov	sl, r2
    feec:	4693      	mov	fp, r2
    feee:	e638      	b.n	fb62 <__ieee754_pow+0x662>
    fef0:	4602      	mov	r2, r0
    fef2:	460b      	mov	r3, r1
    fef4:	f000 fa2e 	bl	10354 <__aeabi_dsub>
    fef8:	4602      	mov	r2, r0
    fefa:	460b      	mov	r3, r1
    fefc:	f000 fd08 	bl	10910 <__aeabi_ddiv>
    ff00:	f7ff bb40 	b.w	f584 <__ieee754_pow+0x84>
    ff04:	a318      	add	r3, pc, #96	; (adr r3, ff68 <__ieee754_pow+0xa68>)
    ff06:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    ff0e:	a318      	add	r3, pc, #96	; (adr r3, ff70 <__ieee754_pow+0xa70>)
    ff10:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff14:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    ff18:	4b1b      	ldr	r3, [pc, #108]	; (ff88 <__ieee754_pow+0xa88>)
    ff1a:	2200      	movs	r2, #0
    ff1c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
    ff20:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ff24:	e401      	b.n	f72a <__ieee754_pow+0x22a>
    ff26:	465a      	mov	r2, fp
    ff28:	f000 f98a 	bl	10240 <scalbn>
    ff2c:	e6c9      	b.n	fcc2 <__ieee754_pow+0x7c2>
    ff2e:	f002 0201 	and.w	r2, r2, #1
    ff32:	f1c2 0402 	rsb	r4, r2, #2
    ff36:	f7ff bb08 	b.w	f54a <__ieee754_pow+0x4a>
    ff3a:	bf00      	nop
    ff3c:	f3af 8000 	nop.w
    ff40:	60000000 	.word	0x60000000
    ff44:	3ff71547 	.word	0x3ff71547
    ff48:	f85ddf44 	.word	0xf85ddf44
    ff4c:	3e54ae0b 	.word	0x3e54ae0b
    ff50:	55555555 	.word	0x55555555
    ff54:	3fd55555 	.word	0x3fd55555
    ff58:	652b82fe 	.word	0x652b82fe
    ff5c:	3ff71547 	.word	0x3ff71547
    ff60:	8800759c 	.word	0x8800759c
    ff64:	7e37e43c 	.word	0x7e37e43c
    ff68:	40000000 	.word	0x40000000
    ff6c:	3fe2b803 	.word	0x3fe2b803
    ff70:	43cfd006 	.word	0x43cfd006
    ff74:	3e4cfdeb 	.word	0x3e4cfdeb
    ff78:	3feffffe 	.word	0x3feffffe
    ff7c:	3ff00000 	.word	0x3ff00000
    ff80:	3fd00000 	.word	0x3fd00000
    ff84:	3fe00000 	.word	0x3fe00000
    ff88:	3ff80000 	.word	0x3ff80000

0000ff8c <__ieee754_sqrt>:
    ff8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ff90:	4f5b      	ldr	r7, [pc, #364]	; (10100 <STACK_SIZE+0x100>)
    ff92:	438f      	bics	r7, r1
    ff94:	4605      	mov	r5, r0
    ff96:	460c      	mov	r4, r1
    ff98:	f000 8092 	beq.w	100c0 <STACK_SIZE+0xc0>
    ff9c:	2900      	cmp	r1, #0
    ff9e:	460b      	mov	r3, r1
    ffa0:	4602      	mov	r2, r0
    ffa2:	dd6f      	ble.n	10084 <STACK_SIZE+0x84>
    ffa4:	150f      	asrs	r7, r1, #20
    ffa6:	d07b      	beq.n	100a0 <STACK_SIZE+0xa0>
    ffa8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
    ffac:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ffb0:	07f8      	lsls	r0, r7, #31
    ffb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ffb6:	d45c      	bmi.n	10072 <STACK_SIZE+0x72>
    ffb8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
    ffbc:	2600      	movs	r6, #0
    ffbe:	440b      	add	r3, r1
    ffc0:	107f      	asrs	r7, r7, #1
    ffc2:	0052      	lsls	r2, r2, #1
    ffc4:	46b6      	mov	lr, r6
    ffc6:	2016      	movs	r0, #22
    ffc8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    ffcc:	eb0e 0401 	add.w	r4, lr, r1
    ffd0:	429c      	cmp	r4, r3
    ffd2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
    ffd6:	ea4f 0242 	mov.w	r2, r2, lsl #1
    ffda:	dc03      	bgt.n	ffe4 <__ieee754_sqrt+0x58>
    ffdc:	1b1b      	subs	r3, r3, r4
    ffde:	eb04 0e01 	add.w	lr, r4, r1
    ffe2:	440e      	add	r6, r1
    ffe4:	3801      	subs	r0, #1
    ffe6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    ffea:	ea4f 0151 	mov.w	r1, r1, lsr #1
    ffee:	d1ed      	bne.n	ffcc <__ieee754_sqrt+0x40>
    fff0:	4684      	mov	ip, r0
    fff2:	2420      	movs	r4, #32
    fff4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    fff8:	e009      	b.n	1000e <STACK_SIZE+0xe>
    fffa:	d020      	beq.n	1003e <STACK_SIZE+0x3e>
    fffc:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   10000:	3c01      	subs	r4, #1
   10002:	ea4f 0151 	mov.w	r1, r1, lsr #1
   10006:	442b      	add	r3, r5
   10008:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1000c:	d020      	beq.n	10050 <STACK_SIZE+0x50>
   1000e:	4573      	cmp	r3, lr
   10010:	eb01 050c 	add.w	r5, r1, ip
   10014:	ddf1      	ble.n	fffa <__ieee754_sqrt+0x6e>
   10016:	2d00      	cmp	r5, #0
   10018:	eb05 0c01 	add.w	ip, r5, r1
   1001c:	db09      	blt.n	10032 <STACK_SIZE+0x32>
   1001e:	46f0      	mov	r8, lr
   10020:	4295      	cmp	r5, r2
   10022:	eba3 030e 	sub.w	r3, r3, lr
   10026:	d900      	bls.n	1002a <STACK_SIZE+0x2a>
   10028:	3b01      	subs	r3, #1
   1002a:	1b52      	subs	r2, r2, r5
   1002c:	4408      	add	r0, r1
   1002e:	46c6      	mov	lr, r8
   10030:	e7e4      	b.n	fffc <__ieee754_sqrt+0x70>
   10032:	f1bc 0f00 	cmp.w	ip, #0
   10036:	dbf2      	blt.n	1001e <STACK_SIZE+0x1e>
   10038:	f10e 0801 	add.w	r8, lr, #1
   1003c:	e7f0      	b.n	10020 <STACK_SIZE+0x20>
   1003e:	4295      	cmp	r5, r2
   10040:	d8dc      	bhi.n	fffc <__ieee754_sqrt+0x70>
   10042:	2d00      	cmp	r5, #0
   10044:	eb05 0c01 	add.w	ip, r5, r1
   10048:	db44      	blt.n	100d4 <STACK_SIZE+0xd4>
   1004a:	4698      	mov	r8, r3
   1004c:	2300      	movs	r3, #0
   1004e:	e7ec      	b.n	1002a <STACK_SIZE+0x2a>
   10050:	4313      	orrs	r3, r2
   10052:	d113      	bne.n	1007c <STACK_SIZE+0x7c>
   10054:	0840      	lsrs	r0, r0, #1
   10056:	1073      	asrs	r3, r6, #1
   10058:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   1005c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   10060:	07f2      	lsls	r2, r6, #31
   10062:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   10066:	bf48      	it	mi
   10068:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   1006c:	4649      	mov	r1, r9
   1006e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10072:	005b      	lsls	r3, r3, #1
   10074:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   10078:	0052      	lsls	r2, r2, #1
   1007a:	e79d      	b.n	ffb8 <__ieee754_sqrt+0x2c>
   1007c:	1c41      	adds	r1, r0, #1
   1007e:	d02d      	beq.n	100dc <STACK_SIZE+0xdc>
   10080:	3001      	adds	r0, #1
   10082:	e7e7      	b.n	10054 <STACK_SIZE+0x54>
   10084:	4606      	mov	r6, r0
   10086:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   1008a:	433e      	orrs	r6, r7
   1008c:	d0ef      	beq.n	1006e <STACK_SIZE+0x6e>
   1008e:	bb69      	cbnz	r1, 100ec <STACK_SIZE+0xec>
   10090:	460f      	mov	r7, r1
   10092:	0ad3      	lsrs	r3, r2, #11
   10094:	3f15      	subs	r7, #21
   10096:	0552      	lsls	r2, r2, #21
   10098:	2b00      	cmp	r3, #0
   1009a:	d0fa      	beq.n	10092 <STACK_SIZE+0x92>
   1009c:	02de      	lsls	r6, r3, #11
   1009e:	d420      	bmi.n	100e2 <STACK_SIZE+0xe2>
   100a0:	2400      	movs	r4, #0
   100a2:	e000      	b.n	100a6 <STACK_SIZE+0xa6>
   100a4:	4604      	mov	r4, r0
   100a6:	005b      	lsls	r3, r3, #1
   100a8:	02dd      	lsls	r5, r3, #11
   100aa:	f104 0001 	add.w	r0, r4, #1
   100ae:	d5f9      	bpl.n	100a4 <STACK_SIZE+0xa4>
   100b0:	f1c0 0120 	rsb	r1, r0, #32
   100b4:	fa22 f101 	lsr.w	r1, r2, r1
   100b8:	430b      	orrs	r3, r1
   100ba:	1b3f      	subs	r7, r7, r4
   100bc:	4082      	lsls	r2, r0
   100be:	e773      	b.n	ffa8 <__ieee754_sqrt+0x1c>
   100c0:	4602      	mov	r2, r0
   100c2:	460b      	mov	r3, r1
   100c4:	f000 fafa 	bl	106bc <__aeabi_dmul>
   100c8:	462a      	mov	r2, r5
   100ca:	4623      	mov	r3, r4
   100cc:	f000 f944 	bl	10358 <__adddf3>
   100d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   100d4:	f1bc 0f00 	cmp.w	ip, #0
   100d8:	daae      	bge.n	10038 <STACK_SIZE+0x38>
   100da:	e7b6      	b.n	1004a <STACK_SIZE+0x4a>
   100dc:	3601      	adds	r6, #1
   100de:	4620      	mov	r0, r4
   100e0:	e7b9      	b.n	10056 <STACK_SIZE+0x56>
   100e2:	2000      	movs	r0, #0
   100e4:	2120      	movs	r1, #32
   100e6:	f04f 34ff 	mov.w	r4, #4294967295
   100ea:	e7e3      	b.n	100b4 <STACK_SIZE+0xb4>
   100ec:	4602      	mov	r2, r0
   100ee:	460b      	mov	r3, r1
   100f0:	f000 f930 	bl	10354 <__aeabi_dsub>
   100f4:	4602      	mov	r2, r0
   100f6:	460b      	mov	r3, r1
   100f8:	f000 fc0a 	bl	10910 <__aeabi_ddiv>
   100fc:	e7b7      	b.n	1006e <STACK_SIZE+0x6e>
   100fe:	bf00      	nop
   10100:	7ff00000 	.word	0x7ff00000

00010104 <fabs>:
   10104:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10108:	4770      	bx	lr
   1010a:	bf00      	nop

0001010c <finite>:
   1010c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   10110:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   10114:	0fc0      	lsrs	r0, r0, #31
   10116:	4770      	bx	lr

00010118 <matherr>:
   10118:	2000      	movs	r0, #0
   1011a:	4770      	bx	lr

0001011c <nan>:
   1011c:	2000      	movs	r0, #0
   1011e:	4901      	ldr	r1, [pc, #4]	; (10124 <nan+0x8>)
   10120:	4770      	bx	lr
   10122:	bf00      	nop
   10124:	7ff80000 	.word	0x7ff80000

00010128 <rint>:
   10128:	b5f0      	push	{r4, r5, r6, r7, lr}
   1012a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   1012e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   10132:	2e13      	cmp	r6, #19
   10134:	b083      	sub	sp, #12
   10136:	4602      	mov	r2, r0
   10138:	460b      	mov	r3, r1
   1013a:	460c      	mov	r4, r1
   1013c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   10140:	4607      	mov	r7, r0
   10142:	dc2e      	bgt.n	101a2 <rint+0x7a>
   10144:	2e00      	cmp	r6, #0
   10146:	db49      	blt.n	101dc <rint+0xb4>
   10148:	493a      	ldr	r1, [pc, #232]	; (10234 <rint+0x10c>)
   1014a:	4131      	asrs	r1, r6
   1014c:	ea03 0001 	and.w	r0, r3, r1
   10150:	4310      	orrs	r0, r2
   10152:	d02b      	beq.n	101ac <rint+0x84>
   10154:	0849      	lsrs	r1, r1, #1
   10156:	400b      	ands	r3, r1
   10158:	ea53 0702 	orrs.w	r7, r3, r2
   1015c:	d00c      	beq.n	10178 <rint+0x50>
   1015e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   10162:	2e13      	cmp	r6, #19
   10164:	ea24 0101 	bic.w	r1, r4, r1
   10168:	fa43 f406 	asr.w	r4, r3, r6
   1016c:	ea44 0401 	orr.w	r4, r4, r1
   10170:	bf0c      	ite	eq
   10172:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   10176:	2700      	movne	r7, #0
   10178:	4b2f      	ldr	r3, [pc, #188]	; (10238 <rint+0x110>)
   1017a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1017e:	4621      	mov	r1, r4
   10180:	e9d5 4500 	ldrd	r4, r5, [r5]
   10184:	4638      	mov	r0, r7
   10186:	4622      	mov	r2, r4
   10188:	462b      	mov	r3, r5
   1018a:	f000 f8e5 	bl	10358 <__adddf3>
   1018e:	e9cd 0100 	strd	r0, r1, [sp]
   10192:	4622      	mov	r2, r4
   10194:	462b      	mov	r3, r5
   10196:	e9dd 0100 	ldrd	r0, r1, [sp]
   1019a:	f000 f8db 	bl	10354 <__aeabi_dsub>
   1019e:	b003      	add	sp, #12
   101a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101a2:	2e33      	cmp	r6, #51	; 0x33
   101a4:	dd06      	ble.n	101b4 <rint+0x8c>
   101a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   101aa:	d040      	beq.n	1022e <rint+0x106>
   101ac:	4610      	mov	r0, r2
   101ae:	4619      	mov	r1, r3
   101b0:	b003      	add	sp, #12
   101b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101b4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   101b8:	f04f 31ff 	mov.w	r1, #4294967295
   101bc:	fa21 f10e 	lsr.w	r1, r1, lr
   101c0:	4208      	tst	r0, r1
   101c2:	d0f3      	beq.n	101ac <rint+0x84>
   101c4:	0849      	lsrs	r1, r1, #1
   101c6:	4208      	tst	r0, r1
   101c8:	d0d6      	beq.n	10178 <rint+0x50>
   101ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   101ce:	ea20 0101 	bic.w	r1, r0, r1
   101d2:	fa43 fe0e 	asr.w	lr, r3, lr
   101d6:	ea4e 0701 	orr.w	r7, lr, r1
   101da:	e7cd      	b.n	10178 <rint+0x50>
   101dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   101e0:	4301      	orrs	r1, r0
   101e2:	d0e3      	beq.n	101ac <rint+0x84>
   101e4:	f3c3 0113 	ubfx	r1, r3, #0, #20
   101e8:	4e13      	ldr	r6, [pc, #76]	; (10238 <rint+0x110>)
   101ea:	4301      	orrs	r1, r0
   101ec:	f1c1 0c00 	rsb	ip, r1, #0
   101f0:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   101f4:	e9d6 6700 	ldrd	r6, r7, [r6]
   101f8:	ea4c 0c01 	orr.w	ip, ip, r1
   101fc:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   10200:	0c5c      	lsrs	r4, r3, #17
   10202:	0464      	lsls	r4, r4, #17
   10204:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   10208:	ea43 0104 	orr.w	r1, r3, r4
   1020c:	4632      	mov	r2, r6
   1020e:	463b      	mov	r3, r7
   10210:	f000 f8a2 	bl	10358 <__adddf3>
   10214:	e9cd 0100 	strd	r0, r1, [sp]
   10218:	4632      	mov	r2, r6
   1021a:	463b      	mov	r3, r7
   1021c:	e9dd 0100 	ldrd	r0, r1, [sp]
   10220:	f000 f898 	bl	10354 <__aeabi_dsub>
   10224:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   10228:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   1022c:	e7c0      	b.n	101b0 <rint+0x88>
   1022e:	f000 f893 	bl	10358 <__adddf3>
   10232:	e7bd      	b.n	101b0 <rint+0x88>
   10234:	000fffff 	.word	0x000fffff
   10238:	00012200 	.word	0x00012200
   1023c:	00000000 	.word	0x00000000

00010240 <scalbn>:
   10240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10242:	f3c1 560a 	ubfx	r6, r1, #20, #11
   10246:	4604      	mov	r4, r0
   10248:	460d      	mov	r5, r1
   1024a:	460b      	mov	r3, r1
   1024c:	4617      	mov	r7, r2
   1024e:	bb0e      	cbnz	r6, 10294 <scalbn+0x54>
   10250:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10254:	4303      	orrs	r3, r0
   10256:	4686      	mov	lr, r0
   10258:	d025      	beq.n	102a6 <scalbn+0x66>
   1025a:	2200      	movs	r2, #0
   1025c:	4b34      	ldr	r3, [pc, #208]	; (10330 <scalbn+0xf0>)
   1025e:	f000 fa2d 	bl	106bc <__aeabi_dmul>
   10262:	4a34      	ldr	r2, [pc, #208]	; (10334 <scalbn+0xf4>)
   10264:	4297      	cmp	r7, r2
   10266:	4604      	mov	r4, r0
   10268:	460d      	mov	r5, r1
   1026a:	460b      	mov	r3, r1
   1026c:	db2a      	blt.n	102c4 <scalbn+0x84>
   1026e:	f3c1 560a 	ubfx	r6, r1, #20, #11
   10272:	3e36      	subs	r6, #54	; 0x36
   10274:	443e      	add	r6, r7
   10276:	f240 72fe 	movw	r2, #2046	; 0x7fe
   1027a:	4296      	cmp	r6, r2
   1027c:	dc28      	bgt.n	102d0 <scalbn+0x90>
   1027e:	2e00      	cmp	r6, #0
   10280:	dd12      	ble.n	102a8 <scalbn+0x68>
   10282:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   10286:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1028a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1028e:	4620      	mov	r0, r4
   10290:	4629      	mov	r1, r5
   10292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10294:	f240 72ff 	movw	r2, #2047	; 0x7ff
   10298:	4296      	cmp	r6, r2
   1029a:	d1eb      	bne.n	10274 <scalbn+0x34>
   1029c:	4602      	mov	r2, r0
   1029e:	460b      	mov	r3, r1
   102a0:	f000 f85a 	bl	10358 <__adddf3>
   102a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102a8:	f116 0f35 	cmn.w	r6, #53	; 0x35
   102ac:	da1d      	bge.n	102ea <scalbn+0xaa>
   102ae:	f24c 3350 	movw	r3, #50000	; 0xc350
   102b2:	429f      	cmp	r7, r3
   102b4:	4622      	mov	r2, r4
   102b6:	462b      	mov	r3, r5
   102b8:	dc25      	bgt.n	10306 <scalbn+0xc6>
   102ba:	a119      	add	r1, pc, #100	; (adr r1, 10320 <scalbn+0xe0>)
   102bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   102c0:	f000 f83c 	bl	1033c <copysign>
   102c4:	a316      	add	r3, pc, #88	; (adr r3, 10320 <scalbn+0xe0>)
   102c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   102ca:	f000 f9f7 	bl	106bc <__aeabi_dmul>
   102ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102d0:	4622      	mov	r2, r4
   102d2:	462b      	mov	r3, r5
   102d4:	a114      	add	r1, pc, #80	; (adr r1, 10328 <scalbn+0xe8>)
   102d6:	e9d1 0100 	ldrd	r0, r1, [r1]
   102da:	f000 f82f 	bl	1033c <copysign>
   102de:	a312      	add	r3, pc, #72	; (adr r3, 10328 <scalbn+0xe8>)
   102e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   102e4:	f000 f9ea 	bl	106bc <__aeabi_dmul>
   102e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   102ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   102f2:	3636      	adds	r6, #54	; 0x36
   102f4:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   102f8:	4620      	mov	r0, r4
   102fa:	4629      	mov	r1, r5
   102fc:	2200      	movs	r2, #0
   102fe:	4b0e      	ldr	r3, [pc, #56]	; (10338 <scalbn+0xf8>)
   10300:	f000 f9dc 	bl	106bc <__aeabi_dmul>
   10304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10306:	a108      	add	r1, pc, #32	; (adr r1, 10328 <scalbn+0xe8>)
   10308:	e9d1 0100 	ldrd	r0, r1, [r1]
   1030c:	f000 f816 	bl	1033c <copysign>
   10310:	a305      	add	r3, pc, #20	; (adr r3, 10328 <scalbn+0xe8>)
   10312:	e9d3 2300 	ldrd	r2, r3, [r3]
   10316:	f000 f9d1 	bl	106bc <__aeabi_dmul>
   1031a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1031c:	f3af 8000 	nop.w
   10320:	c2f8f359 	.word	0xc2f8f359
   10324:	01a56e1f 	.word	0x01a56e1f
   10328:	8800759c 	.word	0x8800759c
   1032c:	7e37e43c 	.word	0x7e37e43c
   10330:	43500000 	.word	0x43500000
   10334:	ffff3cb0 	.word	0xffff3cb0
   10338:	3c900000 	.word	0x3c900000

0001033c <copysign>:
   1033c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   10340:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   10344:	ea42 0103 	orr.w	r1, r2, r3
   10348:	4770      	bx	lr
   1034a:	bf00      	nop

0001034c <__aeabi_drsub>:
   1034c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   10350:	e002      	b.n	10358 <__adddf3>
   10352:	bf00      	nop

00010354 <__aeabi_dsub>:
   10354:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00010358 <__adddf3>:
   10358:	b530      	push	{r4, r5, lr}
   1035a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1035e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   10362:	ea94 0f05 	teq	r4, r5
   10366:	bf08      	it	eq
   10368:	ea90 0f02 	teqeq	r0, r2
   1036c:	bf1f      	itttt	ne
   1036e:	ea54 0c00 	orrsne.w	ip, r4, r0
   10372:	ea55 0c02 	orrsne.w	ip, r5, r2
   10376:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1037a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1037e:	f000 80e2 	beq.w	10546 <__adddf3+0x1ee>
   10382:	ea4f 5454 	mov.w	r4, r4, lsr #21
   10386:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1038a:	bfb8      	it	lt
   1038c:	426d      	neglt	r5, r5
   1038e:	dd0c      	ble.n	103aa <__adddf3+0x52>
   10390:	442c      	add	r4, r5
   10392:	ea80 0202 	eor.w	r2, r0, r2
   10396:	ea81 0303 	eor.w	r3, r1, r3
   1039a:	ea82 0000 	eor.w	r0, r2, r0
   1039e:	ea83 0101 	eor.w	r1, r3, r1
   103a2:	ea80 0202 	eor.w	r2, r0, r2
   103a6:	ea81 0303 	eor.w	r3, r1, r3
   103aa:	2d36      	cmp	r5, #54	; 0x36
   103ac:	bf88      	it	hi
   103ae:	bd30      	pophi	{r4, r5, pc}
   103b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   103b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   103b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   103bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   103c0:	d002      	beq.n	103c8 <__adddf3+0x70>
   103c2:	4240      	negs	r0, r0
   103c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   103c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   103cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   103d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   103d4:	d002      	beq.n	103dc <__adddf3+0x84>
   103d6:	4252      	negs	r2, r2
   103d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   103dc:	ea94 0f05 	teq	r4, r5
   103e0:	f000 80a7 	beq.w	10532 <__adddf3+0x1da>
   103e4:	f1a4 0401 	sub.w	r4, r4, #1
   103e8:	f1d5 0e20 	rsbs	lr, r5, #32
   103ec:	db0d      	blt.n	1040a <__adddf3+0xb2>
   103ee:	fa02 fc0e 	lsl.w	ip, r2, lr
   103f2:	fa22 f205 	lsr.w	r2, r2, r5
   103f6:	1880      	adds	r0, r0, r2
   103f8:	f141 0100 	adc.w	r1, r1, #0
   103fc:	fa03 f20e 	lsl.w	r2, r3, lr
   10400:	1880      	adds	r0, r0, r2
   10402:	fa43 f305 	asr.w	r3, r3, r5
   10406:	4159      	adcs	r1, r3
   10408:	e00e      	b.n	10428 <__adddf3+0xd0>
   1040a:	f1a5 0520 	sub.w	r5, r5, #32
   1040e:	f10e 0e20 	add.w	lr, lr, #32
   10412:	2a01      	cmp	r2, #1
   10414:	fa03 fc0e 	lsl.w	ip, r3, lr
   10418:	bf28      	it	cs
   1041a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1041e:	fa43 f305 	asr.w	r3, r3, r5
   10422:	18c0      	adds	r0, r0, r3
   10424:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   10428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1042c:	d507      	bpl.n	1043e <__adddf3+0xe6>
   1042e:	f04f 0e00 	mov.w	lr, #0
   10432:	f1dc 0c00 	rsbs	ip, ip, #0
   10436:	eb7e 0000 	sbcs.w	r0, lr, r0
   1043a:	eb6e 0101 	sbc.w	r1, lr, r1
   1043e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   10442:	d31b      	bcc.n	1047c <__adddf3+0x124>
   10444:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   10448:	d30c      	bcc.n	10464 <__adddf3+0x10c>
   1044a:	0849      	lsrs	r1, r1, #1
   1044c:	ea5f 0030 	movs.w	r0, r0, rrx
   10450:	ea4f 0c3c 	mov.w	ip, ip, rrx
   10454:	f104 0401 	add.w	r4, r4, #1
   10458:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1045c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   10460:	f080 809a 	bcs.w	10598 <__adddf3+0x240>
   10464:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10468:	bf08      	it	eq
   1046a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1046e:	f150 0000 	adcs.w	r0, r0, #0
   10472:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10476:	ea41 0105 	orr.w	r1, r1, r5
   1047a:	bd30      	pop	{r4, r5, pc}
   1047c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   10480:	4140      	adcs	r0, r0
   10482:	eb41 0101 	adc.w	r1, r1, r1
   10486:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1048a:	f1a4 0401 	sub.w	r4, r4, #1
   1048e:	d1e9      	bne.n	10464 <__adddf3+0x10c>
   10490:	f091 0f00 	teq	r1, #0
   10494:	bf04      	itt	eq
   10496:	4601      	moveq	r1, r0
   10498:	2000      	moveq	r0, #0
   1049a:	fab1 f381 	clz	r3, r1
   1049e:	bf08      	it	eq
   104a0:	3320      	addeq	r3, #32
   104a2:	f1a3 030b 	sub.w	r3, r3, #11
   104a6:	f1b3 0220 	subs.w	r2, r3, #32
   104aa:	da0c      	bge.n	104c6 <__adddf3+0x16e>
   104ac:	320c      	adds	r2, #12
   104ae:	dd08      	ble.n	104c2 <__adddf3+0x16a>
   104b0:	f102 0c14 	add.w	ip, r2, #20
   104b4:	f1c2 020c 	rsb	r2, r2, #12
   104b8:	fa01 f00c 	lsl.w	r0, r1, ip
   104bc:	fa21 f102 	lsr.w	r1, r1, r2
   104c0:	e00c      	b.n	104dc <__adddf3+0x184>
   104c2:	f102 0214 	add.w	r2, r2, #20
   104c6:	bfd8      	it	le
   104c8:	f1c2 0c20 	rsble	ip, r2, #32
   104cc:	fa01 f102 	lsl.w	r1, r1, r2
   104d0:	fa20 fc0c 	lsr.w	ip, r0, ip
   104d4:	bfdc      	itt	le
   104d6:	ea41 010c 	orrle.w	r1, r1, ip
   104da:	4090      	lslle	r0, r2
   104dc:	1ae4      	subs	r4, r4, r3
   104de:	bfa2      	ittt	ge
   104e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   104e4:	4329      	orrge	r1, r5
   104e6:	bd30      	popge	{r4, r5, pc}
   104e8:	ea6f 0404 	mvn.w	r4, r4
   104ec:	3c1f      	subs	r4, #31
   104ee:	da1c      	bge.n	1052a <__adddf3+0x1d2>
   104f0:	340c      	adds	r4, #12
   104f2:	dc0e      	bgt.n	10512 <__adddf3+0x1ba>
   104f4:	f104 0414 	add.w	r4, r4, #20
   104f8:	f1c4 0220 	rsb	r2, r4, #32
   104fc:	fa20 f004 	lsr.w	r0, r0, r4
   10500:	fa01 f302 	lsl.w	r3, r1, r2
   10504:	ea40 0003 	orr.w	r0, r0, r3
   10508:	fa21 f304 	lsr.w	r3, r1, r4
   1050c:	ea45 0103 	orr.w	r1, r5, r3
   10510:	bd30      	pop	{r4, r5, pc}
   10512:	f1c4 040c 	rsb	r4, r4, #12
   10516:	f1c4 0220 	rsb	r2, r4, #32
   1051a:	fa20 f002 	lsr.w	r0, r0, r2
   1051e:	fa01 f304 	lsl.w	r3, r1, r4
   10522:	ea40 0003 	orr.w	r0, r0, r3
   10526:	4629      	mov	r1, r5
   10528:	bd30      	pop	{r4, r5, pc}
   1052a:	fa21 f004 	lsr.w	r0, r1, r4
   1052e:	4629      	mov	r1, r5
   10530:	bd30      	pop	{r4, r5, pc}
   10532:	f094 0f00 	teq	r4, #0
   10536:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1053a:	bf06      	itte	eq
   1053c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   10540:	3401      	addeq	r4, #1
   10542:	3d01      	subne	r5, #1
   10544:	e74e      	b.n	103e4 <__adddf3+0x8c>
   10546:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1054a:	bf18      	it	ne
   1054c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10550:	d029      	beq.n	105a6 <__adddf3+0x24e>
   10552:	ea94 0f05 	teq	r4, r5
   10556:	bf08      	it	eq
   10558:	ea90 0f02 	teqeq	r0, r2
   1055c:	d005      	beq.n	1056a <__adddf3+0x212>
   1055e:	ea54 0c00 	orrs.w	ip, r4, r0
   10562:	bf04      	itt	eq
   10564:	4619      	moveq	r1, r3
   10566:	4610      	moveq	r0, r2
   10568:	bd30      	pop	{r4, r5, pc}
   1056a:	ea91 0f03 	teq	r1, r3
   1056e:	bf1e      	ittt	ne
   10570:	2100      	movne	r1, #0
   10572:	2000      	movne	r0, #0
   10574:	bd30      	popne	{r4, r5, pc}
   10576:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1057a:	d105      	bne.n	10588 <__adddf3+0x230>
   1057c:	0040      	lsls	r0, r0, #1
   1057e:	4149      	adcs	r1, r1
   10580:	bf28      	it	cs
   10582:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   10586:	bd30      	pop	{r4, r5, pc}
   10588:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1058c:	bf3c      	itt	cc
   1058e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   10592:	bd30      	popcc	{r4, r5, pc}
   10594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10598:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1059c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   105a0:	f04f 0000 	mov.w	r0, #0
   105a4:	bd30      	pop	{r4, r5, pc}
   105a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   105aa:	bf1a      	itte	ne
   105ac:	4619      	movne	r1, r3
   105ae:	4610      	movne	r0, r2
   105b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   105b4:	bf1c      	itt	ne
   105b6:	460b      	movne	r3, r1
   105b8:	4602      	movne	r2, r0
   105ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   105be:	bf06      	itte	eq
   105c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   105c4:	ea91 0f03 	teqeq	r1, r3
   105c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   105cc:	bd30      	pop	{r4, r5, pc}
   105ce:	bf00      	nop

000105d0 <__aeabi_ui2d>:
   105d0:	f090 0f00 	teq	r0, #0
   105d4:	bf04      	itt	eq
   105d6:	2100      	moveq	r1, #0
   105d8:	4770      	bxeq	lr
   105da:	b530      	push	{r4, r5, lr}
   105dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   105e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   105e4:	f04f 0500 	mov.w	r5, #0
   105e8:	f04f 0100 	mov.w	r1, #0
   105ec:	e750      	b.n	10490 <__adddf3+0x138>
   105ee:	bf00      	nop

000105f0 <__aeabi_i2d>:
   105f0:	f090 0f00 	teq	r0, #0
   105f4:	bf04      	itt	eq
   105f6:	2100      	moveq	r1, #0
   105f8:	4770      	bxeq	lr
   105fa:	b530      	push	{r4, r5, lr}
   105fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10600:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10604:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   10608:	bf48      	it	mi
   1060a:	4240      	negmi	r0, r0
   1060c:	f04f 0100 	mov.w	r1, #0
   10610:	e73e      	b.n	10490 <__adddf3+0x138>
   10612:	bf00      	nop

00010614 <__aeabi_f2d>:
   10614:	0042      	lsls	r2, r0, #1
   10616:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1061a:	ea4f 0131 	mov.w	r1, r1, rrx
   1061e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   10622:	bf1f      	itttt	ne
   10624:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   10628:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1062c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   10630:	4770      	bxne	lr
   10632:	f092 0f00 	teq	r2, #0
   10636:	bf14      	ite	ne
   10638:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1063c:	4770      	bxeq	lr
   1063e:	b530      	push	{r4, r5, lr}
   10640:	f44f 7460 	mov.w	r4, #896	; 0x380
   10644:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10648:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1064c:	e720      	b.n	10490 <__adddf3+0x138>
   1064e:	bf00      	nop

00010650 <__aeabi_ul2d>:
   10650:	ea50 0201 	orrs.w	r2, r0, r1
   10654:	bf08      	it	eq
   10656:	4770      	bxeq	lr
   10658:	b530      	push	{r4, r5, lr}
   1065a:	f04f 0500 	mov.w	r5, #0
   1065e:	e00a      	b.n	10676 <__aeabi_l2d+0x16>

00010660 <__aeabi_l2d>:
   10660:	ea50 0201 	orrs.w	r2, r0, r1
   10664:	bf08      	it	eq
   10666:	4770      	bxeq	lr
   10668:	b530      	push	{r4, r5, lr}
   1066a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1066e:	d502      	bpl.n	10676 <__aeabi_l2d+0x16>
   10670:	4240      	negs	r0, r0
   10672:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10676:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1067a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1067e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   10682:	f43f aedc 	beq.w	1043e <__adddf3+0xe6>
   10686:	f04f 0203 	mov.w	r2, #3
   1068a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1068e:	bf18      	it	ne
   10690:	3203      	addne	r2, #3
   10692:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10696:	bf18      	it	ne
   10698:	3203      	addne	r2, #3
   1069a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1069e:	f1c2 0320 	rsb	r3, r2, #32
   106a2:	fa00 fc03 	lsl.w	ip, r0, r3
   106a6:	fa20 f002 	lsr.w	r0, r0, r2
   106aa:	fa01 fe03 	lsl.w	lr, r1, r3
   106ae:	ea40 000e 	orr.w	r0, r0, lr
   106b2:	fa21 f102 	lsr.w	r1, r1, r2
   106b6:	4414      	add	r4, r2
   106b8:	e6c1      	b.n	1043e <__adddf3+0xe6>
   106ba:	bf00      	nop

000106bc <__aeabi_dmul>:
   106bc:	b570      	push	{r4, r5, r6, lr}
   106be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   106c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   106c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   106ca:	bf1d      	ittte	ne
   106cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   106d0:	ea94 0f0c 	teqne	r4, ip
   106d4:	ea95 0f0c 	teqne	r5, ip
   106d8:	f000 f8de 	bleq	10898 <__aeabi_dmul+0x1dc>
   106dc:	442c      	add	r4, r5
   106de:	ea81 0603 	eor.w	r6, r1, r3
   106e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   106e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   106ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   106ee:	bf18      	it	ne
   106f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   106f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   106f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   106fc:	d038      	beq.n	10770 <__aeabi_dmul+0xb4>
   106fe:	fba0 ce02 	umull	ip, lr, r0, r2
   10702:	f04f 0500 	mov.w	r5, #0
   10706:	fbe1 e502 	umlal	lr, r5, r1, r2
   1070a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1070e:	fbe0 e503 	umlal	lr, r5, r0, r3
   10712:	f04f 0600 	mov.w	r6, #0
   10716:	fbe1 5603 	umlal	r5, r6, r1, r3
   1071a:	f09c 0f00 	teq	ip, #0
   1071e:	bf18      	it	ne
   10720:	f04e 0e01 	orrne.w	lr, lr, #1
   10724:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   10728:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1072c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   10730:	d204      	bcs.n	1073c <__aeabi_dmul+0x80>
   10732:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   10736:	416d      	adcs	r5, r5
   10738:	eb46 0606 	adc.w	r6, r6, r6
   1073c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   10740:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   10744:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10748:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1074c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   10750:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10754:	bf88      	it	hi
   10756:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1075a:	d81e      	bhi.n	1079a <__aeabi_dmul+0xde>
   1075c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   10760:	bf08      	it	eq
   10762:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   10766:	f150 0000 	adcs.w	r0, r0, #0
   1076a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1076e:	bd70      	pop	{r4, r5, r6, pc}
   10770:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   10774:	ea46 0101 	orr.w	r1, r6, r1
   10778:	ea40 0002 	orr.w	r0, r0, r2
   1077c:	ea81 0103 	eor.w	r1, r1, r3
   10780:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   10784:	bfc2      	ittt	gt
   10786:	ebd4 050c 	rsbsgt	r5, r4, ip
   1078a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1078e:	bd70      	popgt	{r4, r5, r6, pc}
   10790:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10794:	f04f 0e00 	mov.w	lr, #0
   10798:	3c01      	subs	r4, #1
   1079a:	f300 80ab 	bgt.w	108f4 <__aeabi_dmul+0x238>
   1079e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   107a2:	bfde      	ittt	le
   107a4:	2000      	movle	r0, #0
   107a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   107aa:	bd70      	pople	{r4, r5, r6, pc}
   107ac:	f1c4 0400 	rsb	r4, r4, #0
   107b0:	3c20      	subs	r4, #32
   107b2:	da35      	bge.n	10820 <__aeabi_dmul+0x164>
   107b4:	340c      	adds	r4, #12
   107b6:	dc1b      	bgt.n	107f0 <__aeabi_dmul+0x134>
   107b8:	f104 0414 	add.w	r4, r4, #20
   107bc:	f1c4 0520 	rsb	r5, r4, #32
   107c0:	fa00 f305 	lsl.w	r3, r0, r5
   107c4:	fa20 f004 	lsr.w	r0, r0, r4
   107c8:	fa01 f205 	lsl.w	r2, r1, r5
   107cc:	ea40 0002 	orr.w	r0, r0, r2
   107d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   107d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   107d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   107dc:	fa21 f604 	lsr.w	r6, r1, r4
   107e0:	eb42 0106 	adc.w	r1, r2, r6
   107e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   107e8:	bf08      	it	eq
   107ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   107ee:	bd70      	pop	{r4, r5, r6, pc}
   107f0:	f1c4 040c 	rsb	r4, r4, #12
   107f4:	f1c4 0520 	rsb	r5, r4, #32
   107f8:	fa00 f304 	lsl.w	r3, r0, r4
   107fc:	fa20 f005 	lsr.w	r0, r0, r5
   10800:	fa01 f204 	lsl.w	r2, r1, r4
   10804:	ea40 0002 	orr.w	r0, r0, r2
   10808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1080c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10810:	f141 0100 	adc.w	r1, r1, #0
   10814:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10818:	bf08      	it	eq
   1081a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1081e:	bd70      	pop	{r4, r5, r6, pc}
   10820:	f1c4 0520 	rsb	r5, r4, #32
   10824:	fa00 f205 	lsl.w	r2, r0, r5
   10828:	ea4e 0e02 	orr.w	lr, lr, r2
   1082c:	fa20 f304 	lsr.w	r3, r0, r4
   10830:	fa01 f205 	lsl.w	r2, r1, r5
   10834:	ea43 0302 	orr.w	r3, r3, r2
   10838:	fa21 f004 	lsr.w	r0, r1, r4
   1083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10840:	fa21 f204 	lsr.w	r2, r1, r4
   10844:	ea20 0002 	bic.w	r0, r0, r2
   10848:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1084c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10850:	bf08      	it	eq
   10852:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10856:	bd70      	pop	{r4, r5, r6, pc}
   10858:	f094 0f00 	teq	r4, #0
   1085c:	d10f      	bne.n	1087e <__aeabi_dmul+0x1c2>
   1085e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   10862:	0040      	lsls	r0, r0, #1
   10864:	eb41 0101 	adc.w	r1, r1, r1
   10868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1086c:	bf08      	it	eq
   1086e:	3c01      	subeq	r4, #1
   10870:	d0f7      	beq.n	10862 <__aeabi_dmul+0x1a6>
   10872:	ea41 0106 	orr.w	r1, r1, r6
   10876:	f095 0f00 	teq	r5, #0
   1087a:	bf18      	it	ne
   1087c:	4770      	bxne	lr
   1087e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   10882:	0052      	lsls	r2, r2, #1
   10884:	eb43 0303 	adc.w	r3, r3, r3
   10888:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1088c:	bf08      	it	eq
   1088e:	3d01      	subeq	r5, #1
   10890:	d0f7      	beq.n	10882 <__aeabi_dmul+0x1c6>
   10892:	ea43 0306 	orr.w	r3, r3, r6
   10896:	4770      	bx	lr
   10898:	ea94 0f0c 	teq	r4, ip
   1089c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   108a0:	bf18      	it	ne
   108a2:	ea95 0f0c 	teqne	r5, ip
   108a6:	d00c      	beq.n	108c2 <__aeabi_dmul+0x206>
   108a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   108ac:	bf18      	it	ne
   108ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   108b2:	d1d1      	bne.n	10858 <__aeabi_dmul+0x19c>
   108b4:	ea81 0103 	eor.w	r1, r1, r3
   108b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   108bc:	f04f 0000 	mov.w	r0, #0
   108c0:	bd70      	pop	{r4, r5, r6, pc}
   108c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   108c6:	bf06      	itte	eq
   108c8:	4610      	moveq	r0, r2
   108ca:	4619      	moveq	r1, r3
   108cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   108d0:	d019      	beq.n	10906 <__aeabi_dmul+0x24a>
   108d2:	ea94 0f0c 	teq	r4, ip
   108d6:	d102      	bne.n	108de <__aeabi_dmul+0x222>
   108d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   108dc:	d113      	bne.n	10906 <__aeabi_dmul+0x24a>
   108de:	ea95 0f0c 	teq	r5, ip
   108e2:	d105      	bne.n	108f0 <__aeabi_dmul+0x234>
   108e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   108e8:	bf1c      	itt	ne
   108ea:	4610      	movne	r0, r2
   108ec:	4619      	movne	r1, r3
   108ee:	d10a      	bne.n	10906 <__aeabi_dmul+0x24a>
   108f0:	ea81 0103 	eor.w	r1, r1, r3
   108f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   108f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   108fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10900:	f04f 0000 	mov.w	r0, #0
   10904:	bd70      	pop	{r4, r5, r6, pc}
   10906:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1090a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1090e:	bd70      	pop	{r4, r5, r6, pc}

00010910 <__aeabi_ddiv>:
   10910:	b570      	push	{r4, r5, r6, lr}
   10912:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10916:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1091a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1091e:	bf1d      	ittte	ne
   10920:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10924:	ea94 0f0c 	teqne	r4, ip
   10928:	ea95 0f0c 	teqne	r5, ip
   1092c:	f000 f8a7 	bleq	10a7e <__aeabi_ddiv+0x16e>
   10930:	eba4 0405 	sub.w	r4, r4, r5
   10934:	ea81 0e03 	eor.w	lr, r1, r3
   10938:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1093c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   10940:	f000 8088 	beq.w	10a54 <__aeabi_ddiv+0x144>
   10944:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10948:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1094c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   10950:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   10954:	ea4f 2202 	mov.w	r2, r2, lsl #8
   10958:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1095c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   10960:	ea4f 2600 	mov.w	r6, r0, lsl #8
   10964:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   10968:	429d      	cmp	r5, r3
   1096a:	bf08      	it	eq
   1096c:	4296      	cmpeq	r6, r2
   1096e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   10972:	f504 7440 	add.w	r4, r4, #768	; 0x300
   10976:	d202      	bcs.n	1097e <__aeabi_ddiv+0x6e>
   10978:	085b      	lsrs	r3, r3, #1
   1097a:	ea4f 0232 	mov.w	r2, r2, rrx
   1097e:	1ab6      	subs	r6, r6, r2
   10980:	eb65 0503 	sbc.w	r5, r5, r3
   10984:	085b      	lsrs	r3, r3, #1
   10986:	ea4f 0232 	mov.w	r2, r2, rrx
   1098a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1098e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   10992:	ebb6 0e02 	subs.w	lr, r6, r2
   10996:	eb75 0e03 	sbcs.w	lr, r5, r3
   1099a:	bf22      	ittt	cs
   1099c:	1ab6      	subcs	r6, r6, r2
   1099e:	4675      	movcs	r5, lr
   109a0:	ea40 000c 	orrcs.w	r0, r0, ip
   109a4:	085b      	lsrs	r3, r3, #1
   109a6:	ea4f 0232 	mov.w	r2, r2, rrx
   109aa:	ebb6 0e02 	subs.w	lr, r6, r2
   109ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   109b2:	bf22      	ittt	cs
   109b4:	1ab6      	subcs	r6, r6, r2
   109b6:	4675      	movcs	r5, lr
   109b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   109bc:	085b      	lsrs	r3, r3, #1
   109be:	ea4f 0232 	mov.w	r2, r2, rrx
   109c2:	ebb6 0e02 	subs.w	lr, r6, r2
   109c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   109ca:	bf22      	ittt	cs
   109cc:	1ab6      	subcs	r6, r6, r2
   109ce:	4675      	movcs	r5, lr
   109d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   109d4:	085b      	lsrs	r3, r3, #1
   109d6:	ea4f 0232 	mov.w	r2, r2, rrx
   109da:	ebb6 0e02 	subs.w	lr, r6, r2
   109de:	eb75 0e03 	sbcs.w	lr, r5, r3
   109e2:	bf22      	ittt	cs
   109e4:	1ab6      	subcs	r6, r6, r2
   109e6:	4675      	movcs	r5, lr
   109e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   109ec:	ea55 0e06 	orrs.w	lr, r5, r6
   109f0:	d018      	beq.n	10a24 <__aeabi_ddiv+0x114>
   109f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   109f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   109fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   109fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   10a02:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   10a06:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   10a0a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   10a0e:	d1c0      	bne.n	10992 <__aeabi_ddiv+0x82>
   10a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10a14:	d10b      	bne.n	10a2e <__aeabi_ddiv+0x11e>
   10a16:	ea41 0100 	orr.w	r1, r1, r0
   10a1a:	f04f 0000 	mov.w	r0, #0
   10a1e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   10a22:	e7b6      	b.n	10992 <__aeabi_ddiv+0x82>
   10a24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10a28:	bf04      	itt	eq
   10a2a:	4301      	orreq	r1, r0
   10a2c:	2000      	moveq	r0, #0
   10a2e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10a32:	bf88      	it	hi
   10a34:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10a38:	f63f aeaf 	bhi.w	1079a <__aeabi_dmul+0xde>
   10a3c:	ebb5 0c03 	subs.w	ip, r5, r3
   10a40:	bf04      	itt	eq
   10a42:	ebb6 0c02 	subseq.w	ip, r6, r2
   10a46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10a4a:	f150 0000 	adcs.w	r0, r0, #0
   10a4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10a52:	bd70      	pop	{r4, r5, r6, pc}
   10a54:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10a58:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   10a5c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   10a60:	bfc2      	ittt	gt
   10a62:	ebd4 050c 	rsbsgt	r5, r4, ip
   10a66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   10a6a:	bd70      	popgt	{r4, r5, r6, pc}
   10a6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10a70:	f04f 0e00 	mov.w	lr, #0
   10a74:	3c01      	subs	r4, #1
   10a76:	e690      	b.n	1079a <__aeabi_dmul+0xde>
   10a78:	ea45 0e06 	orr.w	lr, r5, r6
   10a7c:	e68d      	b.n	1079a <__aeabi_dmul+0xde>
   10a7e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   10a82:	ea94 0f0c 	teq	r4, ip
   10a86:	bf08      	it	eq
   10a88:	ea95 0f0c 	teqeq	r5, ip
   10a8c:	f43f af3b 	beq.w	10906 <__aeabi_dmul+0x24a>
   10a90:	ea94 0f0c 	teq	r4, ip
   10a94:	d10a      	bne.n	10aac <__aeabi_ddiv+0x19c>
   10a96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10a9a:	f47f af34 	bne.w	10906 <__aeabi_dmul+0x24a>
   10a9e:	ea95 0f0c 	teq	r5, ip
   10aa2:	f47f af25 	bne.w	108f0 <__aeabi_dmul+0x234>
   10aa6:	4610      	mov	r0, r2
   10aa8:	4619      	mov	r1, r3
   10aaa:	e72c      	b.n	10906 <__aeabi_dmul+0x24a>
   10aac:	ea95 0f0c 	teq	r5, ip
   10ab0:	d106      	bne.n	10ac0 <__aeabi_ddiv+0x1b0>
   10ab2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   10ab6:	f43f aefd 	beq.w	108b4 <__aeabi_dmul+0x1f8>
   10aba:	4610      	mov	r0, r2
   10abc:	4619      	mov	r1, r3
   10abe:	e722      	b.n	10906 <__aeabi_dmul+0x24a>
   10ac0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   10ac4:	bf18      	it	ne
   10ac6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   10aca:	f47f aec5 	bne.w	10858 <__aeabi_dmul+0x19c>
   10ace:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   10ad2:	f47f af0d 	bne.w	108f0 <__aeabi_dmul+0x234>
   10ad6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   10ada:	f47f aeeb 	bne.w	108b4 <__aeabi_dmul+0x1f8>
   10ade:	e712      	b.n	10906 <__aeabi_dmul+0x24a>

00010ae0 <__gedf2>:
   10ae0:	f04f 3cff 	mov.w	ip, #4294967295
   10ae4:	e006      	b.n	10af4 <__cmpdf2+0x4>
   10ae6:	bf00      	nop

00010ae8 <__ledf2>:
   10ae8:	f04f 0c01 	mov.w	ip, #1
   10aec:	e002      	b.n	10af4 <__cmpdf2+0x4>
   10aee:	bf00      	nop

00010af0 <__cmpdf2>:
   10af0:	f04f 0c01 	mov.w	ip, #1
   10af4:	f84d cd04 	str.w	ip, [sp, #-4]!
   10af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10b04:	bf18      	it	ne
   10b06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   10b0a:	d01b      	beq.n	10b44 <__cmpdf2+0x54>
   10b0c:	b001      	add	sp, #4
   10b0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   10b12:	bf0c      	ite	eq
   10b14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   10b18:	ea91 0f03 	teqne	r1, r3
   10b1c:	bf02      	ittt	eq
   10b1e:	ea90 0f02 	teqeq	r0, r2
   10b22:	2000      	moveq	r0, #0
   10b24:	4770      	bxeq	lr
   10b26:	f110 0f00 	cmn.w	r0, #0
   10b2a:	ea91 0f03 	teq	r1, r3
   10b2e:	bf58      	it	pl
   10b30:	4299      	cmppl	r1, r3
   10b32:	bf08      	it	eq
   10b34:	4290      	cmpeq	r0, r2
   10b36:	bf2c      	ite	cs
   10b38:	17d8      	asrcs	r0, r3, #31
   10b3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   10b3e:	f040 0001 	orr.w	r0, r0, #1
   10b42:	4770      	bx	lr
   10b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10b4c:	d102      	bne.n	10b54 <__cmpdf2+0x64>
   10b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10b52:	d107      	bne.n	10b64 <__cmpdf2+0x74>
   10b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10b5c:	d1d6      	bne.n	10b0c <__cmpdf2+0x1c>
   10b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10b62:	d0d3      	beq.n	10b0c <__cmpdf2+0x1c>
   10b64:	f85d 0b04 	ldr.w	r0, [sp], #4
   10b68:	4770      	bx	lr
   10b6a:	bf00      	nop

00010b6c <__aeabi_cdrcmple>:
   10b6c:	4684      	mov	ip, r0
   10b6e:	4610      	mov	r0, r2
   10b70:	4662      	mov	r2, ip
   10b72:	468c      	mov	ip, r1
   10b74:	4619      	mov	r1, r3
   10b76:	4663      	mov	r3, ip
   10b78:	e000      	b.n	10b7c <__aeabi_cdcmpeq>
   10b7a:	bf00      	nop

00010b7c <__aeabi_cdcmpeq>:
   10b7c:	b501      	push	{r0, lr}
   10b7e:	f7ff ffb7 	bl	10af0 <__cmpdf2>
   10b82:	2800      	cmp	r0, #0
   10b84:	bf48      	it	mi
   10b86:	f110 0f00 	cmnmi.w	r0, #0
   10b8a:	bd01      	pop	{r0, pc}

00010b8c <__aeabi_dcmpeq>:
   10b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   10b90:	f7ff fff4 	bl	10b7c <__aeabi_cdcmpeq>
   10b94:	bf0c      	ite	eq
   10b96:	2001      	moveq	r0, #1
   10b98:	2000      	movne	r0, #0
   10b9a:	f85d fb08 	ldr.w	pc, [sp], #8
   10b9e:	bf00      	nop

00010ba0 <__aeabi_dcmplt>:
   10ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
   10ba4:	f7ff ffea 	bl	10b7c <__aeabi_cdcmpeq>
   10ba8:	bf34      	ite	cc
   10baa:	2001      	movcc	r0, #1
   10bac:	2000      	movcs	r0, #0
   10bae:	f85d fb08 	ldr.w	pc, [sp], #8
   10bb2:	bf00      	nop

00010bb4 <__aeabi_dcmple>:
   10bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   10bb8:	f7ff ffe0 	bl	10b7c <__aeabi_cdcmpeq>
   10bbc:	bf94      	ite	ls
   10bbe:	2001      	movls	r0, #1
   10bc0:	2000      	movhi	r0, #0
   10bc2:	f85d fb08 	ldr.w	pc, [sp], #8
   10bc6:	bf00      	nop

00010bc8 <__aeabi_dcmpge>:
   10bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   10bcc:	f7ff ffce 	bl	10b6c <__aeabi_cdrcmple>
   10bd0:	bf94      	ite	ls
   10bd2:	2001      	movls	r0, #1
   10bd4:	2000      	movhi	r0, #0
   10bd6:	f85d fb08 	ldr.w	pc, [sp], #8
   10bda:	bf00      	nop

00010bdc <__aeabi_dcmpgt>:
   10bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
   10be0:	f7ff ffc4 	bl	10b6c <__aeabi_cdrcmple>
   10be4:	bf34      	ite	cc
   10be6:	2001      	movcc	r0, #1
   10be8:	2000      	movcs	r0, #0
   10bea:	f85d fb08 	ldr.w	pc, [sp], #8
   10bee:	bf00      	nop

00010bf0 <__aeabi_dcmpun>:
   10bf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10bf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10bf8:	d102      	bne.n	10c00 <__aeabi_dcmpun+0x10>
   10bfa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10bfe:	d10a      	bne.n	10c16 <__aeabi_dcmpun+0x26>
   10c00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10c04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10c08:	d102      	bne.n	10c10 <__aeabi_dcmpun+0x20>
   10c0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10c0e:	d102      	bne.n	10c16 <__aeabi_dcmpun+0x26>
   10c10:	f04f 0000 	mov.w	r0, #0
   10c14:	4770      	bx	lr
   10c16:	f04f 0001 	mov.w	r0, #1
   10c1a:	4770      	bx	lr

00010c1c <__aeabi_d2uiz>:
   10c1c:	004a      	lsls	r2, r1, #1
   10c1e:	d211      	bcs.n	10c44 <__aeabi_d2uiz+0x28>
   10c20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   10c24:	d211      	bcs.n	10c4a <__aeabi_d2uiz+0x2e>
   10c26:	d50d      	bpl.n	10c44 <__aeabi_d2uiz+0x28>
   10c28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   10c2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   10c30:	d40e      	bmi.n	10c50 <__aeabi_d2uiz+0x34>
   10c32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10c36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10c3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   10c3e:	fa23 f002 	lsr.w	r0, r3, r2
   10c42:	4770      	bx	lr
   10c44:	f04f 0000 	mov.w	r0, #0
   10c48:	4770      	bx	lr
   10c4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   10c4e:	d102      	bne.n	10c56 <__aeabi_d2uiz+0x3a>
   10c50:	f04f 30ff 	mov.w	r0, #4294967295
   10c54:	4770      	bx	lr
   10c56:	f04f 0000 	mov.w	r0, #0
   10c5a:	4770      	bx	lr

00010c5c <__cxa_atexit>:
   10c5c:	4613      	mov	r3, r2
   10c5e:	460a      	mov	r2, r1
   10c60:	4601      	mov	r1, r0
   10c62:	2002      	movs	r0, #2
   10c64:	f000 b99a 	b.w	10f9c <__register_exitproc>

00010c68 <__errno>:
   10c68:	4b01      	ldr	r3, [pc, #4]	; (10c70 <__errno+0x8>)
   10c6a:	6818      	ldr	r0, [r3, #0]
   10c6c:	4770      	bx	lr
   10c6e:	bf00      	nop
   10c70:	20000140 	.word	0x20000140

00010c74 <ffs>:
   10c74:	b140      	cbz	r0, 10c88 <ffs+0x14>
   10c76:	2300      	movs	r3, #0
   10c78:	fa40 f103 	asr.w	r1, r0, r3
   10c7c:	1c5a      	adds	r2, r3, #1
   10c7e:	07c9      	lsls	r1, r1, #31
   10c80:	4613      	mov	r3, r2
   10c82:	d5f9      	bpl.n	10c78 <ffs+0x4>
   10c84:	4610      	mov	r0, r2
   10c86:	4770      	bx	lr
   10c88:	4602      	mov	r2, r0
   10c8a:	4610      	mov	r0, r2
   10c8c:	4770      	bx	lr
   10c8e:	bf00      	nop

00010c90 <__libc_init_array>:
   10c90:	b570      	push	{r4, r5, r6, lr}
   10c92:	4e0f      	ldr	r6, [pc, #60]	; (10cd0 <__libc_init_array+0x40>)
   10c94:	4d0f      	ldr	r5, [pc, #60]	; (10cd4 <__libc_init_array+0x44>)
   10c96:	1b76      	subs	r6, r6, r5
   10c98:	10b6      	asrs	r6, r6, #2
   10c9a:	bf18      	it	ne
   10c9c:	2400      	movne	r4, #0
   10c9e:	d005      	beq.n	10cac <__libc_init_array+0x1c>
   10ca0:	3401      	adds	r4, #1
   10ca2:	f855 3b04 	ldr.w	r3, [r5], #4
   10ca6:	4798      	blx	r3
   10ca8:	42a6      	cmp	r6, r4
   10caa:	d1f9      	bne.n	10ca0 <__libc_init_array+0x10>
   10cac:	4e0a      	ldr	r6, [pc, #40]	; (10cd8 <__libc_init_array+0x48>)
   10cae:	4d0b      	ldr	r5, [pc, #44]	; (10cdc <__libc_init_array+0x4c>)
   10cb0:	1b76      	subs	r6, r6, r5
   10cb2:	f001 faaf 	bl	12214 <_init>
   10cb6:	10b6      	asrs	r6, r6, #2
   10cb8:	bf18      	it	ne
   10cba:	2400      	movne	r4, #0
   10cbc:	d006      	beq.n	10ccc <__libc_init_array+0x3c>
   10cbe:	3401      	adds	r4, #1
   10cc0:	f855 3b04 	ldr.w	r3, [r5], #4
   10cc4:	4798      	blx	r3
   10cc6:	42a6      	cmp	r6, r4
   10cc8:	d1f9      	bne.n	10cbe <__libc_init_array+0x2e>
   10cca:	bd70      	pop	{r4, r5, r6, pc}
   10ccc:	bd70      	pop	{r4, r5, r6, pc}
   10cce:	bf00      	nop
   10cd0:	00012220 	.word	0x00012220
   10cd4:	00012220 	.word	0x00012220
   10cd8:	0001227c 	.word	0x0001227c
   10cdc:	00012220 	.word	0x00012220

00010ce0 <memcpy>:
   10ce0:	4684      	mov	ip, r0
   10ce2:	ea41 0300 	orr.w	r3, r1, r0
   10ce6:	f013 0303 	ands.w	r3, r3, #3
   10cea:	d16d      	bne.n	10dc8 <memcpy+0xe8>
   10cec:	3a40      	subs	r2, #64	; 0x40
   10cee:	d341      	bcc.n	10d74 <memcpy+0x94>
   10cf0:	f851 3b04 	ldr.w	r3, [r1], #4
   10cf4:	f840 3b04 	str.w	r3, [r0], #4
   10cf8:	f851 3b04 	ldr.w	r3, [r1], #4
   10cfc:	f840 3b04 	str.w	r3, [r0], #4
   10d00:	f851 3b04 	ldr.w	r3, [r1], #4
   10d04:	f840 3b04 	str.w	r3, [r0], #4
   10d08:	f851 3b04 	ldr.w	r3, [r1], #4
   10d0c:	f840 3b04 	str.w	r3, [r0], #4
   10d10:	f851 3b04 	ldr.w	r3, [r1], #4
   10d14:	f840 3b04 	str.w	r3, [r0], #4
   10d18:	f851 3b04 	ldr.w	r3, [r1], #4
   10d1c:	f840 3b04 	str.w	r3, [r0], #4
   10d20:	f851 3b04 	ldr.w	r3, [r1], #4
   10d24:	f840 3b04 	str.w	r3, [r0], #4
   10d28:	f851 3b04 	ldr.w	r3, [r1], #4
   10d2c:	f840 3b04 	str.w	r3, [r0], #4
   10d30:	f851 3b04 	ldr.w	r3, [r1], #4
   10d34:	f840 3b04 	str.w	r3, [r0], #4
   10d38:	f851 3b04 	ldr.w	r3, [r1], #4
   10d3c:	f840 3b04 	str.w	r3, [r0], #4
   10d40:	f851 3b04 	ldr.w	r3, [r1], #4
   10d44:	f840 3b04 	str.w	r3, [r0], #4
   10d48:	f851 3b04 	ldr.w	r3, [r1], #4
   10d4c:	f840 3b04 	str.w	r3, [r0], #4
   10d50:	f851 3b04 	ldr.w	r3, [r1], #4
   10d54:	f840 3b04 	str.w	r3, [r0], #4
   10d58:	f851 3b04 	ldr.w	r3, [r1], #4
   10d5c:	f840 3b04 	str.w	r3, [r0], #4
   10d60:	f851 3b04 	ldr.w	r3, [r1], #4
   10d64:	f840 3b04 	str.w	r3, [r0], #4
   10d68:	f851 3b04 	ldr.w	r3, [r1], #4
   10d6c:	f840 3b04 	str.w	r3, [r0], #4
   10d70:	3a40      	subs	r2, #64	; 0x40
   10d72:	d2bd      	bcs.n	10cf0 <memcpy+0x10>
   10d74:	3230      	adds	r2, #48	; 0x30
   10d76:	d311      	bcc.n	10d9c <memcpy+0xbc>
   10d78:	f851 3b04 	ldr.w	r3, [r1], #4
   10d7c:	f840 3b04 	str.w	r3, [r0], #4
   10d80:	f851 3b04 	ldr.w	r3, [r1], #4
   10d84:	f840 3b04 	str.w	r3, [r0], #4
   10d88:	f851 3b04 	ldr.w	r3, [r1], #4
   10d8c:	f840 3b04 	str.w	r3, [r0], #4
   10d90:	f851 3b04 	ldr.w	r3, [r1], #4
   10d94:	f840 3b04 	str.w	r3, [r0], #4
   10d98:	3a10      	subs	r2, #16
   10d9a:	d2ed      	bcs.n	10d78 <memcpy+0x98>
   10d9c:	320c      	adds	r2, #12
   10d9e:	d305      	bcc.n	10dac <memcpy+0xcc>
   10da0:	f851 3b04 	ldr.w	r3, [r1], #4
   10da4:	f840 3b04 	str.w	r3, [r0], #4
   10da8:	3a04      	subs	r2, #4
   10daa:	d2f9      	bcs.n	10da0 <memcpy+0xc0>
   10dac:	3204      	adds	r2, #4
   10dae:	d008      	beq.n	10dc2 <memcpy+0xe2>
   10db0:	07d2      	lsls	r2, r2, #31
   10db2:	bf1c      	itt	ne
   10db4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10db8:	f800 3b01 	strbne.w	r3, [r0], #1
   10dbc:	d301      	bcc.n	10dc2 <memcpy+0xe2>
   10dbe:	880b      	ldrh	r3, [r1, #0]
   10dc0:	8003      	strh	r3, [r0, #0]
   10dc2:	4660      	mov	r0, ip
   10dc4:	4770      	bx	lr
   10dc6:	bf00      	nop
   10dc8:	2a08      	cmp	r2, #8
   10dca:	d313      	bcc.n	10df4 <memcpy+0x114>
   10dcc:	078b      	lsls	r3, r1, #30
   10dce:	d08d      	beq.n	10cec <memcpy+0xc>
   10dd0:	f010 0303 	ands.w	r3, r0, #3
   10dd4:	d08a      	beq.n	10cec <memcpy+0xc>
   10dd6:	f1c3 0304 	rsb	r3, r3, #4
   10dda:	1ad2      	subs	r2, r2, r3
   10ddc:	07db      	lsls	r3, r3, #31
   10dde:	bf1c      	itt	ne
   10de0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   10de4:	f800 3b01 	strbne.w	r3, [r0], #1
   10de8:	d380      	bcc.n	10cec <memcpy+0xc>
   10dea:	f831 3b02 	ldrh.w	r3, [r1], #2
   10dee:	f820 3b02 	strh.w	r3, [r0], #2
   10df2:	e77b      	b.n	10cec <memcpy+0xc>
   10df4:	3a04      	subs	r2, #4
   10df6:	d3d9      	bcc.n	10dac <memcpy+0xcc>
   10df8:	3a01      	subs	r2, #1
   10dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
   10dfe:	f800 3b01 	strb.w	r3, [r0], #1
   10e02:	d2f9      	bcs.n	10df8 <memcpy+0x118>
   10e04:	780b      	ldrb	r3, [r1, #0]
   10e06:	7003      	strb	r3, [r0, #0]
   10e08:	784b      	ldrb	r3, [r1, #1]
   10e0a:	7043      	strb	r3, [r0, #1]
   10e0c:	788b      	ldrb	r3, [r1, #2]
   10e0e:	7083      	strb	r3, [r0, #2]
   10e10:	4660      	mov	r0, ip
   10e12:	4770      	bx	lr

00010e14 <memset>:
   10e14:	b470      	push	{r4, r5, r6}
   10e16:	0786      	lsls	r6, r0, #30
   10e18:	d046      	beq.n	10ea8 <memset+0x94>
   10e1a:	1e54      	subs	r4, r2, #1
   10e1c:	2a00      	cmp	r2, #0
   10e1e:	d041      	beq.n	10ea4 <memset+0x90>
   10e20:	b2ca      	uxtb	r2, r1
   10e22:	4603      	mov	r3, r0
   10e24:	e002      	b.n	10e2c <memset+0x18>
   10e26:	f114 34ff 	adds.w	r4, r4, #4294967295
   10e2a:	d33b      	bcc.n	10ea4 <memset+0x90>
   10e2c:	f803 2b01 	strb.w	r2, [r3], #1
   10e30:	079d      	lsls	r5, r3, #30
   10e32:	d1f8      	bne.n	10e26 <memset+0x12>
   10e34:	2c03      	cmp	r4, #3
   10e36:	d92e      	bls.n	10e96 <memset+0x82>
   10e38:	b2cd      	uxtb	r5, r1
   10e3a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10e3e:	2c0f      	cmp	r4, #15
   10e40:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10e44:	d919      	bls.n	10e7a <memset+0x66>
   10e46:	f103 0210 	add.w	r2, r3, #16
   10e4a:	4626      	mov	r6, r4
   10e4c:	3e10      	subs	r6, #16
   10e4e:	2e0f      	cmp	r6, #15
   10e50:	f842 5c10 	str.w	r5, [r2, #-16]
   10e54:	f842 5c0c 	str.w	r5, [r2, #-12]
   10e58:	f842 5c08 	str.w	r5, [r2, #-8]
   10e5c:	f842 5c04 	str.w	r5, [r2, #-4]
   10e60:	f102 0210 	add.w	r2, r2, #16
   10e64:	d8f2      	bhi.n	10e4c <memset+0x38>
   10e66:	f1a4 0210 	sub.w	r2, r4, #16
   10e6a:	f022 020f 	bic.w	r2, r2, #15
   10e6e:	f004 040f 	and.w	r4, r4, #15
   10e72:	3210      	adds	r2, #16
   10e74:	2c03      	cmp	r4, #3
   10e76:	4413      	add	r3, r2
   10e78:	d90d      	bls.n	10e96 <memset+0x82>
   10e7a:	461e      	mov	r6, r3
   10e7c:	4622      	mov	r2, r4
   10e7e:	3a04      	subs	r2, #4
   10e80:	2a03      	cmp	r2, #3
   10e82:	f846 5b04 	str.w	r5, [r6], #4
   10e86:	d8fa      	bhi.n	10e7e <memset+0x6a>
   10e88:	1f22      	subs	r2, r4, #4
   10e8a:	f022 0203 	bic.w	r2, r2, #3
   10e8e:	3204      	adds	r2, #4
   10e90:	4413      	add	r3, r2
   10e92:	f004 0403 	and.w	r4, r4, #3
   10e96:	b12c      	cbz	r4, 10ea4 <memset+0x90>
   10e98:	b2c9      	uxtb	r1, r1
   10e9a:	441c      	add	r4, r3
   10e9c:	f803 1b01 	strb.w	r1, [r3], #1
   10ea0:	429c      	cmp	r4, r3
   10ea2:	d1fb      	bne.n	10e9c <memset+0x88>
   10ea4:	bc70      	pop	{r4, r5, r6}
   10ea6:	4770      	bx	lr
   10ea8:	4614      	mov	r4, r2
   10eaa:	4603      	mov	r3, r0
   10eac:	e7c2      	b.n	10e34 <memset+0x20>
   10eae:	bf00      	nop
	...

00010ec0 <strlen>:
   10ec0:	f890 f000 	pld	[r0]
   10ec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   10ec8:	f020 0107 	bic.w	r1, r0, #7
   10ecc:	f06f 0c00 	mvn.w	ip, #0
   10ed0:	f010 0407 	ands.w	r4, r0, #7
   10ed4:	f891 f020 	pld	[r1, #32]
   10ed8:	f040 8049 	bne.w	10f6e <strlen+0xae>
   10edc:	f04f 0400 	mov.w	r4, #0
   10ee0:	f06f 0007 	mvn.w	r0, #7
   10ee4:	e9d1 2300 	ldrd	r2, r3, [r1]
   10ee8:	f891 f040 	pld	[r1, #64]	; 0x40
   10eec:	f100 0008 	add.w	r0, r0, #8
   10ef0:	fa82 f24c 	uadd8	r2, r2, ip
   10ef4:	faa4 f28c 	sel	r2, r4, ip
   10ef8:	fa83 f34c 	uadd8	r3, r3, ip
   10efc:	faa2 f38c 	sel	r3, r2, ip
   10f00:	bb4b      	cbnz	r3, 10f56 <strlen+0x96>
   10f02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   10f06:	fa82 f24c 	uadd8	r2, r2, ip
   10f0a:	f100 0008 	add.w	r0, r0, #8
   10f0e:	faa4 f28c 	sel	r2, r4, ip
   10f12:	fa83 f34c 	uadd8	r3, r3, ip
   10f16:	faa2 f38c 	sel	r3, r2, ip
   10f1a:	b9e3      	cbnz	r3, 10f56 <strlen+0x96>
   10f1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   10f20:	fa82 f24c 	uadd8	r2, r2, ip
   10f24:	f100 0008 	add.w	r0, r0, #8
   10f28:	faa4 f28c 	sel	r2, r4, ip
   10f2c:	fa83 f34c 	uadd8	r3, r3, ip
   10f30:	faa2 f38c 	sel	r3, r2, ip
   10f34:	b97b      	cbnz	r3, 10f56 <strlen+0x96>
   10f36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   10f3a:	f101 0120 	add.w	r1, r1, #32
   10f3e:	fa82 f24c 	uadd8	r2, r2, ip
   10f42:	f100 0008 	add.w	r0, r0, #8
   10f46:	faa4 f28c 	sel	r2, r4, ip
   10f4a:	fa83 f34c 	uadd8	r3, r3, ip
   10f4e:	faa2 f38c 	sel	r3, r2, ip
   10f52:	2b00      	cmp	r3, #0
   10f54:	d0c6      	beq.n	10ee4 <strlen+0x24>
   10f56:	2a00      	cmp	r2, #0
   10f58:	bf04      	itt	eq
   10f5a:	3004      	addeq	r0, #4
   10f5c:	461a      	moveq	r2, r3
   10f5e:	ba12      	rev	r2, r2
   10f60:	fab2 f282 	clz	r2, r2
   10f64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   10f68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   10f6c:	4770      	bx	lr
   10f6e:	e9d1 2300 	ldrd	r2, r3, [r1]
   10f72:	f004 0503 	and.w	r5, r4, #3
   10f76:	f1c4 0000 	rsb	r0, r4, #0
   10f7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   10f7e:	f014 0f04 	tst.w	r4, #4
   10f82:	f891 f040 	pld	[r1, #64]	; 0x40
   10f86:	fa0c f505 	lsl.w	r5, ip, r5
   10f8a:	ea62 0205 	orn	r2, r2, r5
   10f8e:	bf1c      	itt	ne
   10f90:	ea63 0305 	ornne	r3, r3, r5
   10f94:	4662      	movne	r2, ip
   10f96:	f04f 0400 	mov.w	r4, #0
   10f9a:	e7a9      	b.n	10ef0 <strlen+0x30>

00010f9c <__register_exitproc>:
   10f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10fa0:	4d2c      	ldr	r5, [pc, #176]	; (11054 <__register_exitproc+0xb8>)
   10fa2:	4606      	mov	r6, r0
   10fa4:	6828      	ldr	r0, [r5, #0]
   10fa6:	4698      	mov	r8, r3
   10fa8:	460f      	mov	r7, r1
   10faa:	4691      	mov	r9, r2
   10fac:	f000 f882 	bl	110b4 <__retarget_lock_acquire_recursive>
   10fb0:	4b29      	ldr	r3, [pc, #164]	; (11058 <__register_exitproc+0xbc>)
   10fb2:	681c      	ldr	r4, [r3, #0]
   10fb4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10fb8:	2b00      	cmp	r3, #0
   10fba:	d03e      	beq.n	1103a <__register_exitproc+0x9e>
   10fbc:	685a      	ldr	r2, [r3, #4]
   10fbe:	2a1f      	cmp	r2, #31
   10fc0:	dc1c      	bgt.n	10ffc <__register_exitproc+0x60>
   10fc2:	f102 0e01 	add.w	lr, r2, #1
   10fc6:	b176      	cbz	r6, 10fe6 <__register_exitproc+0x4a>
   10fc8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   10fcc:	2401      	movs	r4, #1
   10fce:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10fd2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   10fd6:	4094      	lsls	r4, r2
   10fd8:	4320      	orrs	r0, r4
   10fda:	2e02      	cmp	r6, #2
   10fdc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   10fe0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10fe4:	d023      	beq.n	1102e <__register_exitproc+0x92>
   10fe6:	3202      	adds	r2, #2
   10fe8:	f8c3 e004 	str.w	lr, [r3, #4]
   10fec:	6828      	ldr	r0, [r5, #0]
   10fee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   10ff2:	f000 f861 	bl	110b8 <__retarget_lock_release_recursive>
   10ff6:	2000      	movs	r0, #0
   10ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10ffc:	4b17      	ldr	r3, [pc, #92]	; (1105c <__register_exitproc+0xc0>)
   10ffe:	b30b      	cbz	r3, 11044 <__register_exitproc+0xa8>
   11000:	f44f 70c8 	mov.w	r0, #400	; 0x190
   11004:	f7fc fdf3 	bl	dbee <malloc>
   11008:	4603      	mov	r3, r0
   1100a:	b1d8      	cbz	r0, 11044 <__register_exitproc+0xa8>
   1100c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   11010:	6002      	str	r2, [r0, #0]
   11012:	2100      	movs	r1, #0
   11014:	6041      	str	r1, [r0, #4]
   11016:	460a      	mov	r2, r1
   11018:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1101c:	f04f 0e01 	mov.w	lr, #1
   11020:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   11024:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   11028:	2e00      	cmp	r6, #0
   1102a:	d0dc      	beq.n	10fe6 <__register_exitproc+0x4a>
   1102c:	e7cc      	b.n	10fc8 <__register_exitproc+0x2c>
   1102e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   11032:	430c      	orrs	r4, r1
   11034:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   11038:	e7d5      	b.n	10fe6 <__register_exitproc+0x4a>
   1103a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1103e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   11042:	e7bb      	b.n	10fbc <__register_exitproc+0x20>
   11044:	6828      	ldr	r0, [r5, #0]
   11046:	f000 f837 	bl	110b8 <__retarget_lock_release_recursive>
   1104a:	f04f 30ff 	mov.w	r0, #4294967295
   1104e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11052:	bf00      	nop
   11054:	20000570 	.word	0x20000570
   11058:	00012210 	.word	0x00012210
   1105c:	0000dbef 	.word	0x0000dbef

00011060 <register_fini>:
   11060:	4b02      	ldr	r3, [pc, #8]	; (1106c <register_fini+0xc>)
   11062:	b113      	cbz	r3, 1106a <register_fini+0xa>
   11064:	4802      	ldr	r0, [pc, #8]	; (11070 <register_fini+0x10>)
   11066:	f000 b805 	b.w	11074 <atexit>
   1106a:	4770      	bx	lr
   1106c:	00000000 	.word	0x00000000
   11070:	00011081 	.word	0x00011081

00011074 <atexit>:
   11074:	2300      	movs	r3, #0
   11076:	4601      	mov	r1, r0
   11078:	461a      	mov	r2, r3
   1107a:	4618      	mov	r0, r3
   1107c:	f7ff bf8e 	b.w	10f9c <__register_exitproc>

00011080 <__libc_fini_array>:
   11080:	b538      	push	{r3, r4, r5, lr}
   11082:	4c0a      	ldr	r4, [pc, #40]	; (110ac <__libc_fini_array+0x2c>)
   11084:	4d0a      	ldr	r5, [pc, #40]	; (110b0 <__libc_fini_array+0x30>)
   11086:	1b64      	subs	r4, r4, r5
   11088:	10a4      	asrs	r4, r4, #2
   1108a:	d00a      	beq.n	110a2 <__libc_fini_array+0x22>
   1108c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   11090:	3b01      	subs	r3, #1
   11092:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   11096:	3c01      	subs	r4, #1
   11098:	f855 3904 	ldr.w	r3, [r5], #-4
   1109c:	4798      	blx	r3
   1109e:	2c00      	cmp	r4, #0
   110a0:	d1f9      	bne.n	11096 <__libc_fini_array+0x16>
   110a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   110a6:	f001 b8e9 	b.w	1227c <_fini>
   110aa:	bf00      	nop
   110ac:	0001228c 	.word	0x0001228c
   110b0:	00012288 	.word	0x00012288

000110b4 <__retarget_lock_acquire_recursive>:
   110b4:	4770      	bx	lr
   110b6:	bf00      	nop

000110b8 <__retarget_lock_release_recursive>:
   110b8:	4770      	bx	lr
   110ba:	bf00      	nop

000110bc <_ZTV10AMMC_Class>:
	...
   110d0:	d875 0000 d745 0000 03e1 0000 0425 0000     u...E.......%...
   110e0:	dac1 0000                                   ....

000110e4 <_ZTT10AMMC_Class>:
   110e4:	10d0 0001 1110 0001 1138 0001 1138 0001     ........8...8...
   110f4:	1110 0001 10d0 0001                         ........

000110fc <_ZTC10AMMC_Class0_15ARINC_Interface>:
	...
   11110:	d875 0000 d745 0000 0000 0000 0000 0000     u...E...........
   11120:	dac1 0000                                   ....

00011124 <_ZTC10AMMC_Class0_14Protocol_Class>:
	...
   11138:	d875 0000 d745 0000 0000 0000 0000 0000     u...E...........
   11148:	dc15 0000                                   ....

0001114c <_ZTV17ConfigState_Class>:
	...
   11154:	dc15 0000                                   ....

00011158 <_ZTV14DateTime_Class>:
	...
   11160:	e1d1 0000 e221 0000 5351 4950 5020 6f72     ....!...QSPI Pro
   11170:	7267 6d61 5320 6174 7472 6465 0d0a 0000     gram Started....
   11180:	6c46 7361 2068 6164 6174 7620 7265 6669     Flash data verif
   11190:	6369 7461 6f69 206e 6166 6c69 6465 0a2e     ication failed..
   111a0:	000d 0000 6220 7469 3a20 0000 0a0d 0000     .... bit :......
   111b0:	7257 7469 2065 202d 6552 6461 6920 2073     Write - Read is 
   111c0:	7573 6363 7365 6673 6c75 6920 206e 5351     successful in QS
   111d0:	4950 4620 616c 6873 6d20 6d65 726f 2079     PI Flash memory 
   111e0:	0000 0000 2a2a 202a 7453 7261 5574 2070     ....*** StartUp 
   111f0:	6c41 6f67 6972 6874 656d 206e 6554 7473     Algorithmen Test
   11200:	2a20 2a2a 0000 0000 6168 646e 656c 4147      ***....handleGA
   11210:	4e49 7645 6e65 2074 6572 6563 7669 6465     INEvent received
   11220:	203a 7773 7469 6863 6e69 2067 7266 6d6f     : switching from
   11230:	0020 0000 7420 206f 0000 0000 2820 6c66      ... to .... (fl
   11240:	6761 2073 3d3d 0020 0a0d 0000 6168 646e     ags == .....hand
   11250:	656c 7453 7461 4965 696e 6974 6c61 7a69     leStateInitializ
   11260:	3a65 6620 616c 7367 3d20 203d 7830 0000     e: flags == 0x..
   11270:	6168 646e 656c 7453 7461 4965 696e 6974     handleStateIniti
   11280:	6c61 7a69 0065 0000 6168 646e 656c 7453     alize...handleSt
   11290:	7461 5365 6174 646e 7962 464f 0046 0000     ateStandbyOFF...
   112a0:	6168 646e 656c 7453 7461 5065 6572 6170     handleStatePrepa
   112b0:	6572 7453 6e61 6264 4f79 004e               reStandbyON.

000112bc <_ZTV12States_Class>:
	...
   112c4:	0cf1 0000 2e2e 682f 6c70 702f 726f 2f74     ....../hpl/port/
   112d4:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.
   112e4:	2e2e 682f 6c61 692f 636e 756c 6564 682f     ../hal/include/h
   112f4:	6c61 775f 7464 682e 0000 0000 2e2e 682f     al_wdt.h....../h
   11304:	6c61 732f 6372 682f 6c61 635f 6c61 6e65     al/src/hal_calen
   11314:	6164 2e72 0063 0000 2e2e 682f 6c61 732f     dar.c...../hal/s
   11324:	6372 682f 6c61 635f 6e61 615f 7973 636e     rc/hal_can_async
   11334:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
   11344:	6c61 635f 6372 735f 6e79 2e63 0063 0000     al_crc_sync.c...
   11354:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
   11364:	6332 6d5f 615f 7973 636e 632e 0000 0000     2c_m_async.c....
   11374:	2e2e 682f 6c61 732f 6372 682f 6c61 705f     ../hal/src/hal_p
   11384:	6d77 632e 0000 0000 2e2e 682f 6c61 732f     wm.c....../hal/s
   11394:	6372 682f 6c61 715f 7073 5f69 7973 636e     rc/hal_qspi_sync
   113a4:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
   113b4:	6c61 735f 6970 6d5f 615f 7973 636e 632e     al_spi_m_async.c
   113c4:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   113d4:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
   113e4:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
   113f4:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
   11404:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
   11414:	7369 2e74 0063 0000                         ist.c...

0001141c <_map>:
   1141c:	0000 0000 0040 0000 0004 0000 0004 0000     ....@...........
   1142c:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   1143c:	0007 0000 0057 0000 2e2e 682f 6c70 652f     ....W...../hpl/e
   1144c:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

0001145c <user_mux_confs>:
   1145c:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

000114a0 <channel_confs>:
   114a0:	065e 0000 0000 0000 0000 0000 0000 0000     ^...............
	...

000114e0 <interrupt_cfg>:
	...
   11560:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   11570:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   11580:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   11590:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   115a0:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   115b0:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   115c0:	0400 4300 0800 4300 0c00 4300               ...C...C...C

000115cc <sercomspi_regs>:
   115cc:	000c 0020 0000 0002 0000 0000 00fe 01ff     .. .............
   115dc:	8c00 2000 0000 0200 0000 0000 6300 ff00     ... .........c..
   115ec:	0101 000c 0020 0000 0002 0000 0000 00fe     .... ...........
   115fc:	01ff 0004 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   1160c:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   1161c:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   1162c:	1400 4300 1800 4300                         ...C...C

00011634 <_usb_ep_cfgs>:
   11634:	3074 2000 0000 0000 0040 0000 30b4 2000     t0. ....@....0. 
   11644:	30f4 2000 0040 0040 3134 2000 3174 2000     .0. @.@.41. t1. 
   11654:	0040 0040 31b4 2000 31f4 2000 0040 0040     @.@..1. .1. @.@.
   11664:	3234 2000 3274 2000 0040 0040 0804 0000     42. t2. @.@.....
   11674:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   11684:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   11694:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   116a4:	625f 7361 2e65 0068                         _base.h.

000116ac <n25q256a_interface>:
   116ac:	bc45 0000 bce9 0000 bdf9 0000 bfb1 0000     E...............
   116bc:	c041 0000 2e2e 752f 6273 642f 7665 6369     A...../usb/devic
   116cc:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

000116d8 <_ZTV17ARINC_Conversions>:
	...
   116e0:	d875 0000 d745 0000                         u...E...

000116e8 <_ZL5Mesg1>:
   116e8:	5241 4e49 2043 614c 6562 3a6c 0020 0000     ARINC Label: ...

000116f8 <_ZL5Mesg2>:
   116f8:	6144 6174 203a 0000                         Data: ..

00011700 <_ZL10HexToAscii>:
   11700:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF

00011710 <_ZL11HistoryMesg>:
   11710:	6948 7473 726f 2079 4946 4f46 203a 0000     History FIFO: ..
   11720:	0d0a 4948 332d 3935 2033 6166 6c69 6465     ..HI-3593 failed
   11730:	7420 206f 6e69 7469 6c69 7a69 0a65 000d      to initilize...
   11740:	0d0a 2d0a 2d2d 6820 3273 4120 4952 434e     ...--- hs2 ARINC
   11750:	4920 746e 7265 6166 6563 2020 2d2d 2d2d      Interface  ----
   11760:	0d0a 0000 0a72 2d2d 212d 6f67 2074 656d     ....r.---!got me
   11770:	7373 6761 2165 2d2d 2d2d 0000 0d0a 7254     ssage!----....Tr
   11780:	6e61 6d73 7469 2620 5220 6365 6965 6576     ansmit & Receive
   11790:	5720 7469 2068 614c 6562 736c 4d20 646f      With Labels Mod
   117a0:	0a65 000d 0d0a 4553 464c 542d 5345 2c54     e.....SELF-TEST,
   117b0:	4920 746e 7265 616e 206c 6944 6967 6174      Internal Digita
   117c0:	206c 6f4c 706f 622d 6361 2c6b 4e20 206f     l Loop-back, No 
   117d0:	6164 6174 6920 2073 7274 6e61 6d73 7469     data is transmit
   117e0:	6574 2064 7865 6574 6e72 6c61 796c 0d0a     ted externally..
   117f0:	0000 0000 0d0a 6f20 206e 6154 6c62 2065     ...... on Table 
   11800:	616c 6562 736c 6120 6572 4520 616e 6c62     labels are Enabl
   11810:	6465 0000 0d0a 500a 6572 7373 5320 2d57     ed.....Press SW-
   11820:	2031 6f74 7320 6174 7472 6920 696e 6974     1 to start initi
   11830:	6c61 796c 0d0a 000a 2d2d 202d 7542 7474     ally....--- Butt
   11840:	6e6f 4320 6d6f 616d 646e 2073 2d2d 0a2d     on Commands ---.
   11850:	000d 0000 2020 7053 6361 2065 6142 2072     ....  Space Bar 
   11860:	6f74 4420 7369 6c70 7961 5320 6174 7574     to Display Statu
   11870:	2073 6e61 2064 6f43 746e 6f72 206c 6552     s and Control Re
   11880:	6967 7473 7265 0a73 000d 0000 2020 2070     gisters.....  p 
   11890:	6f74 5020 7561 6573 0d0a 0000 2020 206d     to Pause....  m 
   118a0:	6f74 4420 7369 6c70 7961 4c20 6261 6c65     to Display Label
   118b0:	4d20 6d65 726f 0079 0d0a 003e 0d0a 7254      Memory...>...Tr
   118c0:	6e61 6d73 7469 6974 676e 0d0a 003e 0000     ansmitting..>...
   118d0:	0d0a 4948 332d 3935 2033 7453 7461 7375     ..HI-3593 Status
   118e0:	202c 6f43 746e 6f72 206c 6552 6967 7473     , Control Regist
   118f0:	7265 0d73 000a 0000 0d0a 2009 2a20 2a2a     ers........  ***
   11900:	2a2a 5020 6572 7373 2020 7073 6361 6265     ** Press  spaceb
   11910:	7261 7420 206f 6f63 746e 6e69 6575 2a20     ar to continue *
   11920:	2a2a 2a2a 002a 0000 0a0a 540d 6172 736e     *****......Trans
   11930:	696d 2074 6150 7375 6465 0d0a 0000 0000     mit Paused......
   11940:	0d0a 7250 7365 2073 4c4f 4445 425f 5455     ..Press OLED_BUT
   11950:	4f54 2d4e 2032 6f74 7420 6172 736e 696d     TON-2 to transmi
   11960:	2074 6e6f 2065 7266 6d61 2065 6e61 2064     t one frame and 
   11970:	6170 7375 0a65 000d 0d0a 7250 7365 2073     pause.....Press 
   11980:	4c4f 4445 425f 5455 4f54 2d4e 2033 6f74     OLED_BUTTON-3 to
   11990:	5220 7365 6d75 0a65 000d 0000 0d0a 7254      Resume.......Tr
   119a0:	6e61 6d73 7469 6574 2072 6552 7573 656d     ansmitter Resume
   119b0:	2e64 2e2e 0d0a 0000 0d0a 6552 6563 7669     d.........Receiv
   119c0:	7265 3120 4c20 6261 6c65 0a73 000d 0000     er 1 Labels.....
   119d0:	0d0a 6552 6563 7669 7265 3220 4c20 6261     ..Receiver 2 Lab
   119e0:	6c65 0a73 000d 0000 0d0a 7254 6e61 6d73     els.......Transm
   119f0:	7469 2620 5220 6365 6965 6576 4520 6863     it & Receive Ech
   11a00:	206f 6f4d 6564 0d0a 0000 0000 0d0a 6c53     o Mode........Sl
   11a10:	776f 5320 6570 6465 0000 0000 0d0a 6146     ow Speed......Fa
   11a20:	7473 5320 6570 6465 0000 0000 0d0a 7254     st Speed......Tr
   11a30:	6e61 6d73 7469 6574 2072 6150 6972 7974     ansmitter Parity
   11a40:	4520 616e 6c62 6465 0000 0000 0d0a 6154      Enabled......Ta
   11a50:	6c62 2065 616c 6562 736c 6120 6572 4520     ble labels are E
   11a60:	616e 6c62 6465 0000 0d0a 2d0a 2d2d 4320     nabled.....--- C
   11a70:	6e6f 6f73 656c 4320 6d6f 616d 646e 2073     onsole Commands 
   11a80:	6548 706c 2d20 2d2d 0000 0000 2020 2050     Help ---....  P 
   11a90:	203d 6150 6972 7974 5420 676f 6c67 2065     = Parity Toggle 
   11aa0:	6e6f 6f2f 6666 0000 2020 2054 203d 4654     on/off..  T = TF
   11ab0:	494c 2050 5420 676f 6c67 2065 6e6f 6f2f     LIP  Toggle on/o
   11ac0:	6666 0000 2020 2052 203d 4652 494c 2050     ff..  R = RFLIP 
   11ad0:	5420 676f 6c67 2065 6e6f 6f2f 6666 0000      Toggle on/off..
   11ae0:	2020 2053 203d 4453 4e4f 202c 4453 2c39       S = SDON, SD9,
   11af0:	5320 3144 2030 6f54 6767 656c 6f20 2f6e      SD10 Toggle on/
   11b00:	666f 0066 2020 2048 203d 6854 7369 4820     off.  H = This H
   11b10:	6c65 2070 6150 6567 0000 0000 2020 7053     elp Page....  Sp
   11b20:	6361 2065 6142 2072 203d 6944 7073 616c     ace Bar = Displa
   11b30:	2079 7453 7461 7375 6120 646e 4320 6e6f     y Status and Con
   11b40:	7274 6c6f 7220 6765 0073 0000 2020 2049     trol regs...  I 
   11b50:	203d 6e49 7263 6d65 6e65 2074 654d 7373     = Increment Mess
   11b60:	6761 2065 6e61 2064 7254 6e61 6d73 7469     age and Transmit
   11b70:	202e 7845 6c70 726f 7265 4d20 646f 2065     . Explorer Mode 
   11b80:	2d20 4f20 4c4e 2159 0000 0000 2020 204d      - ONLY!....  M 
   11b90:	203d 6e45 6574 2072 7543 7473 6d6f 4d20     = Enter Custom M
   11ba0:	7365 6173 6567 202e 7845 6c70 726f 7265     essage. Explorer
   11bb0:	4d20 646f 2065 2d20 4f20 4c4e 2159 0000      Mode  - ONLY!..
   11bc0:	2020 4e45 4554 3d52 5420 6172 736e 696d       ENTER= Transmi
   11bd0:	2074 656e 7478 6d20 7365 6173 6567 202e     t next message. 
   11be0:	7845 6c70 726f 7265 4d20 646f 2065 2d20     Explorer Mode  -
   11bf0:	4f20 4c4e 2159 0000 7830 0020 7826 3030      ONLY!..0x .&x00
   11c00:	2030 0000 5854 5020 7261 7469 2079 4e4f     0 ..TX Parity ON
   11c10:	0d0a 003e 5854 5020 7261 7469 2079 464f     ..>.TX Parity OF
   11c20:	0a46 3e0d 0000 0000 4654 494c 2050 6553     F..>....TFLIP Se
   11c30:	0a74 3e0d 0000 0000 4654 494c 2050 6c43     t..>....TFLIP Cl
   11c40:	6165 6572 0a64 3e0d 0000 0000 4552 2d43     eared..>....REC-
   11c50:	2031 4652 494c 2050 6553 0a74 3e0d 0000     1 RFLIP Set..>..
   11c60:	4552 2d43 2031 4652 494c 2050 6c43 6165     REC-1 RFLIP Clea
   11c70:	6572 0a64 3e0d 0000 4552 2d43 2032 4652     red..>..REC-2 RF
   11c80:	494c 2050 6553 0a74 3e0d 0000 4552 2d43     LIP Set..>..REC-
   11c90:	2032 4652 494c 2050 6c43 6165 6572 0a64     2 RFLIP Cleared.
   11ca0:	3e0d 0000 4552 2d43 2031 4453 4e4f 532c     .>..REC-1 SDON,S
   11cb0:	3944 6120 646e 5320 3144 2030 6553 0a74     D9 and SD10 Set.
   11cc0:	3e0d 0000 4552 2d43 2031 4453 4e4f 532c     .>..REC-1 SDON,S
   11cd0:	3944 6120 646e 5320 3144 2030 6c43 6165     D9 and SD10 Clea
   11ce0:	6572 0a64 3e0d 0000 4552 2d43 2032 4453     red..>..REC-2 SD
   11cf0:	4e4f 532c 3944 6120 646e 5320 3144 2030     ON,SD9 and SD10 
   11d00:	6553 0a74 3e0d 0000 4552 2d43 2032 4453     Set..>..REC-2 SD
   11d10:	4e4f 532c 3944 6120 646e 5320 3144 2030     ON,SD9 and SD10 
   11d20:	6c43 6165 6572 0a64 3e0d 0000 0d0a 500a     Cleared..>.....P
   11d30:	6572 7373 5320 6170 6563 4220 7261 6f20     ress Space Bar o
   11d40:	2072 5753 342d 7420 206f 6572 7573 656d     r SW-4 to resume
   11d50:	0000 0000 614c 6562 736c 2020 2030 202d     ....Labels  0 - 
   11d60:	3336 203a 0020 0000 0020 0000 0d0a 614c     63:  ... .....La
   11d70:	6562 736c 2020 3436 312d 3732 203a 0020     bels  64-127:  .
   11d80:	0d0a 614c 6562 736c 3120 3832 312d 3139     ..Labels 128-191
   11d90:	203a 0020 0d0a 614c 6562 736c 3120 3239     :  ...Labels 192
   11da0:	322d 3535 203a 0020 0d0a 614c 6562 736c     -255:  ...Labels
   11db0:	2020 2030 202d 3336 203a 0020 0d0a 543e       0 - 63:  ...>T
   11dc0:	2058 2020 4420 7461 3a61 0000 614c 6562     X    Data:..Labe
   11dd0:	3a6c 0000 003e 0000 6552 2d63 2031 6144     l:..>...Rec-1 Da
   11de0:	6174 003a 4c50 2d31 2031 6144 6174 003a     ta:.PL1-1 Data:.
   11df0:	614d 6374 3a68 0000 4c50 2d31 2032 6144     Match:..PL1-2 Da
   11e00:	6174 003a 4c50 2d31 2033 6144 6174 003a     ta:.PL1-3 Data:.
   11e10:	6552 2d63 2032 6144 6174 003a 4c50 2d32     Rec-2 Data:.PL2-
   11e20:	2031 6144 6174 003a 4c50 2d32 2032 6144     1 Data:.PL2-2 Da
   11e30:	6174 003a 4c50 2d32 2033 6144 6174 003a     ta:.PL2-3 Data:.
   11e40:	0d0a 0000 0d0a 7845 6c70 726f 7265 4d20     ......Explorer M
   11e50:	646f 0a65 000d 0000 0d0a 6c20 6261 6c65     ode....... label
   11e60:	2073 6154 6c62 2065 7369 4520 616e 6c62     s Table is Enabl
   11e70:	6465 0000 0d0a 2d0a 2d2d 4220 7475 6f74     ed.....--- Butto
   11e80:	206e 6f43 6d6d 6e61 7364 2d20 2d2d 0000     n Commands ---..
   11e90:	0d0a 2020 7073 6361 6265 7261 7420 206f     ..  spacebar to 
   11ea0:	6944 7073 616c 2079 7453 7461 7375 6120     Display Status a
   11eb0:	646e 4320 6e6f 7274 6c6f 5220 6765 7369     nd Control Regis
   11ec0:	6574 7372 0000 0000 0d0a 2020 4c4f 4445     ters......  OLED
   11ed0:	422d 5455 4f54 324e 7420 6172 736e 696d     -BUTTON2 transmi
   11ee0:	2074 6e6f 2065 656d 7373 6761 2065 7266     t one message fr
   11ef0:	6d6f 7420 6172 736e 696d 2074 7562 6666     om transmit buff
   11f00:	7265 0000 0d0a 2020 204c 6f74 5020 6972     er....  L to Pri
   11f10:	746e 4c20 6261 6c65 4d20 6d65 726f 0a79     nt Label Memory.
   11f20:	000d 0000 0d0a 7250 7365 2073 4e45 4554     ......Press ENTE
   11f30:	2052 6f74 5420 6172 736e 696d 2074 726f     R to Transmit or
   11f40:	7520 6573 7420 6568 2820 294d 6320 6d6f      use the (M) com
   11f50:	616d 646e 7420 206f 6e65 6574 2072 2061     mand to enter a 
   11f60:	7563 7473 6d6f 6d20 7365 6173 6567 0000     custom message..
   11f70:	7250 7365 2073 5753 2034 726f 7320 6170     Press SW4 or spa
   11f80:	6563 6162 2072 6f74 6320 6e6f 6974 756e     cebar to continu
   11f90:	0065 0000 7250 7365 2073 7073 6361 6265     e...Press spaceb
   11fa0:	7261 7420 206f 6f63 746e 6e69 6575 0000     ar to continue..
   11fb0:	0d0a 433e 6d6f 616d 646e 4d20 0000 0000     ..>Command M....
   11fc0:	0d0a 6e45 6574 2072 2033 7962 6574 2073     ..Enter 3 bytes 
   11fd0:	202b 414c 4542 204c 6f74 5420 6172 736e     + LABEL to Trans
   11fe0:	696d 2074 6f66 6c6c 776f 6465 6220 2079     mit followed by 
   11ff0:	4e45 4554 0a52 000d 0d0a 6f54 5420 6172     ENTER.....To Tra
   12000:	736e 696d 2c74 6520 746e 7265 3320 6220     nsmit, enter 3 b
   12010:	7479 7365 6620 6c6f 6f6c 6577 2064 7962     ytes followed by
   12020:	6120 4c20 6261 6c65 6220 7479 2065 6f66      a Label byte fo
   12030:	6c6c 776f 6465 6220 2079 4e45 4554 0a52     llowed by ENTER.
   12040:	000d 0000 6f46 6d72 7461 203a 6942 7374     ....Format: Bits
   12050:	3233 322d 2c35 4220 7469 3273 2d34 3731     32-25, Bits24-17
   12060:	202c 6942 7374 3631 392d 202c 414c 4542     , Bits16-9, LABE
   12070:	0a4c 3a0d 0000 0000 7845 6d61 6c70 3a65     L..:....Example:
   12080:	3020 2031 3332 3420 2035 3736 4520 544e      01 23 45 67 ENT
   12090:	5245 0d0a 003a 0000 5020 6572 7373 5220     ER..:... Press R
   120a0:	5445 5255 004e 0000 5420 6172 736e 696d     ETURN... Transmi
   120b0:	6974 676e 2e2e 002e 5420 6172 736e 696d     ting.... Transmi
   120c0:	6574 2164 0000 0000 6f43 6d6d 6e61 2064     ted!....Command 
   120d0:	3a49 4920 636e 6572 656d 746e 6420 7461     I: Increment dat
   120e0:	0a61 3e0d 0000 0000                         a..>....

000120e8 <_ZTV15ARINC_Interface>:
	...
   120fc:	d875 0000 d745 0000 da31 0000 da95 0000     u...E...1.......
   1210c:	dac1 0000                                   ....

00012110 <_ZTT15ARINC_Interface>:
   12110:	20fc 0001 2134 0001 2134 0001 20fc 0001     . ..4!..4!... ..

00012120 <_ZTC15ARINC_Interface0_14Protocol_Class>:
	...
   12134:	d875 0000 d745 0000 0000 0000 0000 0000     u...E...........
   12144:	dc15 0000                                   ....

00012148 <maxEventCount>:
   12148:	0010                                        ..

0001214a <sizeOfEventQueue>:
   1214a:	0100                                        ..

0001214c <forever>:
   1214c:	ffff 7fff                                   ....

00012150 <_ZTV14Calendar_Class>:
	...
   12158:	e1d1 0000 e221 0000                         ....!...

00012160 <_ZTV17DateTimeLog_Class>:
	...
   12168:	dc15 0000 dc15 0000                         ........

00012170 <_ZTV9CDC_Class>:
	...
   12178:	e9b5 0000 ea85 0000 e641 0000 e97d 0000     ........A...}...
   12188:	eb1d 0000 e941 0000 e855 0000 e8a5 0000     ....A...U.......
   12198:	e99d 0000 e9ed 0000                         ........

000121a0 <_ZTV6Stream>:
	...
   121a8:	dc15 0000 ebb1 0000 e641 0000 e655 0000     ........A...U...
   121b8:	dc15 0000 dc15 0000 dc15 0000 7830 2e25     ............0x%.
   121c8:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   121d8:	766f 0066                                   ovf.

000121dc <_ZTV5Print>:
	...
   121e4:	dc15 0000 ebb1 0000 e641 0000 e655 0000     ........A...U...
   121f4:	6f70 0077 0000 0000 0000 0000               pow.........

00012200 <TWO52>:
   12200:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

00012210 <_global_impure_ptr>:
   12210:	0148 2000                                   H.. 

00012214 <_init>:
   12214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12216:	bf00      	nop
   12218:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1221a:	bc08      	pop	{r3}
   1221c:	469e      	mov	lr, r3
   1221e:	4770      	bx	lr

00012220 <__init_array_start>:
   12220:	00011061 	.word	0x00011061

00012224 <__frame_dummy_init_array_entry>:
   12224:	00000289 00000389 000004ad 00000531     ............1...
   12234:	00000751 00000889 0000090d 00000afd     Q...............
   12244:	00000ba9 00000d61 0000db69 0000dcad     ....a...i.......
   12254:	0000dd65 0000de19 0000dec9 0000df59     e...........Y...
   12264:	0000e075 0000e125 0000e46d 0000e609     u...%...m.......
   12274:	0000eb9d 0000f1a5                       ........

0001227c <_fini>:
   1227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1227e:	bf00      	nop
   12280:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12282:	bc08      	pop	{r3}
   12284:	469e      	mov	lr, r3
   12286:	4770      	bx	lr

00012288 <__fini_array_start>:
   12288:	00000265 	.word	0x00000265
