
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00022734  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00022734  00022734  00032734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c44  20000000  0002273c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00040c44  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00040c44  2**0
                  CONTENTS
  5 .bss          00009dc4  20000c48  00023388  00040c48  2**3
                  ALLOC
  6 .stack        00010004  2000aa0c  0002d14c  00040c48  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00040c44  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00040c72  2**0
                  CONTENTS, READONLY
  9 .debug_info   00106e81  00000000  00000000  00040ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00014bbe  00000000  00000000  00147b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002b32e  00000000  00000000  0015c70a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004d90  00000000  00000000  00187a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000047d8  00000000  00000000  0018c7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000694cf  00000000  00000000  00190fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006f2ca  00000000  00000000  001fa46f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001500f7  00000000  00000000  00269739  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00015654  00000000  00000000  003b9830  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 aa 01 20 85 17 00 00 09 18 00 00 09 18 00 00     ... ............
      10:	09 18 00 00 09 18 00 00 09 18 00 00 00 00 00 00     ................
	...
      2c:	09 18 00 00 09 18 00 00 00 00 00 00 09 18 00 00     ................
      3c:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      4c:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      5c:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      6c:	cd ac 00 00 91 96 00 00 09 18 00 00 09 18 00 00     ................
      7c:	a1 96 00 00 b1 96 00 00 c1 96 00 00 d1 96 00 00     ................
      8c:	e1 96 00 00 f1 96 00 00 01 97 00 00 09 18 00 00     ................
      9c:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      ac:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      bc:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      cc:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
      dc:	09 18 00 00 09 18 00 00 09 18 00 00 00 00 00 00     ................
	...
      f4:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     104:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     114:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     124:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     134:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     144:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     154:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     164:	09 18 00 00 45 c3 00 00 61 c3 00 00 7d c3 00 00     ....E...a...}...
     174:	99 c3 00 00 09 18 00 00 8d 88 00 00 8d 03 01 00     ................
     184:	9d 03 01 00 ad 03 01 00 bd 03 01 00 09 18 00 00     ................
     194:	a9 cd 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     1a4:	09 18 00 00 09 18 00 00 09 18 00 00 c5 cd 00 00     ................
     1b4:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     1c4:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     1d4:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     1e4:	09 18 00 00 09 18 00 00 89 da 00 00 09 18 00 00     ................
     1f4:	a5 da 00 00 09 18 00 00 c1 da 00 00 dd da 00 00     ................
     204:	f9 da 00 00 15 db 00 00 09 18 00 00 09 18 00 00     ................
     214:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     224:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     234:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     244:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................
     254:	09 18 00 00 09 18 00 00 09 18 00 00 09 18 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000c48 	.word	0x20000c48
     280:	00000000 	.word	0x00000000
     284:	0002273c 	.word	0x0002273c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0002273c 	.word	0x0002273c
     2c4:	20000c4c 	.word	0x20000c4c
     2c8:	0002273c 	.word	0x0002273c
     2cc:	00000000 	.word	0x00000000

000002d0 <wdt_set_timeout_period>:
 * \retval -1 Always on or enabled, can't set again.
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	60f8      	str	r0, [r7, #12]
     2d8:	60b9      	str	r1, [r7, #8]
     2da:	4613      	mov	r3, r2
     2dc:	80fb      	strh	r3, [r7, #6]
	ASSERT(wdt && wdt->dev.hw);
     2de:	68fb      	ldr	r3, [r7, #12]
     2e0:	2b00      	cmp	r3, #0
     2e2:	d005      	beq.n	2f0 <wdt_set_timeout_period+0x20>
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	681b      	ldr	r3, [r3, #0]
     2e8:	2b00      	cmp	r3, #0
     2ea:	d001      	beq.n	2f0 <wdt_set_timeout_period+0x20>
     2ec:	2301      	movs	r3, #1
     2ee:	e000      	b.n	2f2 <wdt_set_timeout_period+0x22>
     2f0:	2300      	movs	r3, #0
     2f2:	226f      	movs	r2, #111	; 0x6f
     2f4:	4907      	ldr	r1, [pc, #28]	; (314 <wdt_set_timeout_period+0x44>)
     2f6:	4618      	mov	r0, r3
     2f8:	4b07      	ldr	r3, [pc, #28]	; (318 <wdt_set_timeout_period+0x48>)
     2fa:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
     2fc:	68fb      	ldr	r3, [r7, #12]
     2fe:	88fa      	ldrh	r2, [r7, #6]
     300:	68b9      	ldr	r1, [r7, #8]
     302:	4618      	mov	r0, r3
     304:	4b05      	ldr	r3, [pc, #20]	; (31c <wdt_set_timeout_period+0x4c>)
     306:	4798      	blx	r3
     308:	4603      	mov	r3, r0
}
     30a:	4618      	mov	r0, r3
     30c:	3710      	adds	r7, #16
     30e:	46bd      	mov	sp, r7
     310:	bd80      	pop	{r7, pc}
     312:	bf00      	nop
     314:	000200d0 	.word	0x000200d0
     318:	00008145 	.word	0x00008145
     31c:	000105a9 	.word	0x000105a9

00000320 <wdt_enable>:
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
     320:	b580      	push	{r7, lr}
     322:	b082      	sub	sp, #8
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
	ASSERT(wdt && wdt->dev.hw);
     328:	687b      	ldr	r3, [r7, #4]
     32a:	2b00      	cmp	r3, #0
     32c:	d005      	beq.n	33a <wdt_enable+0x1a>
     32e:	687b      	ldr	r3, [r7, #4]
     330:	681b      	ldr	r3, [r3, #0]
     332:	2b00      	cmp	r3, #0
     334:	d001      	beq.n	33a <wdt_enable+0x1a>
     336:	2301      	movs	r3, #1
     338:	e000      	b.n	33c <wdt_enable+0x1c>
     33a:	2300      	movs	r3, #0
     33c:	228c      	movs	r2, #140	; 0x8c
     33e:	4906      	ldr	r1, [pc, #24]	; (358 <wdt_enable+0x38>)
     340:	4618      	mov	r0, r3
     342:	4b06      	ldr	r3, [pc, #24]	; (35c <wdt_enable+0x3c>)
     344:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
     346:	687b      	ldr	r3, [r7, #4]
     348:	4618      	mov	r0, r3
     34a:	4b05      	ldr	r3, [pc, #20]	; (360 <wdt_enable+0x40>)
     34c:	4798      	blx	r3
     34e:	4603      	mov	r3, r0
}
     350:	4618      	mov	r0, r3
     352:	3708      	adds	r7, #8
     354:	46bd      	mov	sp, r7
     356:	bd80      	pop	{r7, pc}
     358:	000200d0 	.word	0x000200d0
     35c:	00008145 	.word	0x00008145
     360:	00010739 	.word	0x00010739

00000364 <wdt_feed>:
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
     364:	b580      	push	{r7, lr}
     366:	b082      	sub	sp, #8
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
	ASSERT(wdt && wdt->dev.hw);
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	2b00      	cmp	r3, #0
     370:	d005      	beq.n	37e <wdt_feed+0x1a>
     372:	687b      	ldr	r3, [r7, #4]
     374:	681b      	ldr	r3, [r3, #0]
     376:	2b00      	cmp	r3, #0
     378:	d001      	beq.n	37e <wdt_feed+0x1a>
     37a:	2301      	movs	r3, #1
     37c:	e000      	b.n	380 <wdt_feed+0x1c>
     37e:	2300      	movs	r3, #0
     380:	22a9      	movs	r2, #169	; 0xa9
     382:	4906      	ldr	r1, [pc, #24]	; (39c <wdt_feed+0x38>)
     384:	4618      	mov	r0, r3
     386:	4b06      	ldr	r3, [pc, #24]	; (3a0 <wdt_feed+0x3c>)
     388:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
     38a:	687b      	ldr	r3, [r7, #4]
     38c:	4618      	mov	r0, r3
     38e:	4b05      	ldr	r3, [pc, #20]	; (3a4 <wdt_feed+0x40>)
     390:	4798      	blx	r3
     392:	4603      	mov	r3, r0
}
     394:	4618      	mov	r0, r3
     396:	3708      	adds	r7, #8
     398:	46bd      	mov	sp, r7
     39a:	bd80      	pop	{r7, pc}
     39c:	000200d0 	.word	0x000200d0
     3a0:	00008145 	.word	0x00008145
     3a4:	00010785 	.word	0x00010785

000003a8 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
     3b0:	6039      	str	r1, [r7, #0]
	{
	data = v;
     3b2:	687b      	ldr	r3, [r7, #4]
     3b4:	683a      	ldr	r2, [r7, #0]
     3b6:	601a      	str	r2, [r3, #0]
	}
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	4618      	mov	r0, r3
     3bc:	370c      	adds	r7, #12
     3be:	46bd      	mov	sp, r7
     3c0:	bc80      	pop	{r7}
     3c2:	4770      	bx	lr

000003c4 <_ZN5eventC1Ev>:
	private:
		
		
	};

inline event::event()
     3c4:	b580      	push	{r7, lr}
     3c6:	b082      	sub	sp, #8
     3c8:	af00      	add	r7, sp, #0
     3ca:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3d2:	801a      	strh	r2, [r3, #0]
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3da:	805a      	strh	r2, [r3, #2]
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	2200      	movs	r2, #0
     3e0:	605a      	str	r2, [r3, #4]
     3e2:	687b      	ldr	r3, [r7, #4]
     3e4:	3308      	adds	r3, #8
     3e6:	2100      	movs	r1, #0
     3e8:	4618      	mov	r0, r3
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <_ZN5eventC1Ev+0x3c>)
     3ec:	4798      	blx	r3
     3ee:	687b      	ldr	r3, [r7, #4]
     3f0:	2200      	movs	r2, #0
     3f2:	60da      	str	r2, [r3, #12]
	{
		
	}
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	4618      	mov	r0, r3
     3f8:	3708      	adds	r7, #8
     3fa:	46bd      	mov	sp, r7
     3fc:	bd80      	pop	{r7, pc}
     3fe:	bf00      	nop
     400:	000003a9 	.word	0x000003a9

00000404 <_ZL11ARINCTimeUpPK10timer_task>:
ALU_Class	*ptrALUClass;

//static TaskHandler_Class*	taskList(NULL);

static void CheckPeriodicTask(void);
static void ARINCTimeUp(const struct timer_task *const timer_task){
     404:	b480      	push	{r7}
     406:	b083      	sub	sp, #12
     408:	af00      	add	r7, sp, #0
     40a:	6078      	str	r0, [r7, #4]
	ptrALUClass->arincTXTimeUP=true;
     40c:	4b04      	ldr	r3, [pc, #16]	; (420 <_ZL11ARINCTimeUpPK10timer_task+0x1c>)
     40e:	681b      	ldr	r3, [r3, #0]
     410:	2201      	movs	r2, #1
     412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
     416:	bf00      	nop
     418:	370c      	adds	r7, #12
     41a:	46bd      	mov	sp, r7
     41c:	bc80      	pop	{r7}
     41e:	4770      	bx	lr
     420:	20000c7c 	.word	0x20000c7c

00000424 <_ZN9ALU_ClassC1Ev>:


// default constructor
ALU_Class::ALU_Class()
     424:	b580      	push	{r7, lr}
     426:	b082      	sub	sp, #8
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
     42c:	687b      	ldr	r3, [r7, #4]
     42e:	4618      	mov	r0, r3
     430:	4b09      	ldr	r3, [pc, #36]	; (458 <_ZN9ALU_ClassC1Ev+0x34>)
     432:	4798      	blx	r3
{
	
	//taskList=(list_descriptor*)taskStorage;
	ptrALUClass=this;
     434:	4a09      	ldr	r2, [pc, #36]	; (45c <_ZN9ALU_ClassC1Ev+0x38>)
     436:	687b      	ldr	r3, [r7, #4]
     438:	6013      	str	r3, [r2, #0]
	clk_rate       = 1000;
     43a:	687b      	ldr	r3, [r7, #4]
     43c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     440:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	timeout_period = 4096*1024;
     444:	687b      	ldr	r3, [r7, #4]
     446:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     44a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
} //ALU_Class
     44e:	687b      	ldr	r3, [r7, #4]
     450:	4618      	mov	r0, r3
     452:	3708      	adds	r7, #8
     454:	46bd      	mov	sp, r7
     456:	bd80      	pop	{r7, pc}
     458:	00004679 	.word	0x00004679
     45c:	20000c7c 	.word	0x20000c7c

00000460 <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	6078      	str	r0, [r7, #4]
     468:	687b      	ldr	r3, [r7, #4]
     46a:	4618      	mov	r0, r3
     46c:	4b03      	ldr	r3, [pc, #12]	; (47c <_ZN9ALU_ClassD1Ev+0x1c>)
     46e:	4798      	blx	r3
{
} //~ALU_Class
     470:	687b      	ldr	r3, [r7, #4]
     472:	4618      	mov	r0, r3
     474:	3708      	adds	r7, #8
     476:	46bd      	mov	sp, r7
     478:	bd80      	pop	{r7, pc}
     47a:	bf00      	nop
     47c:	00004699 	.word	0x00004699

00000480 <_ZN9ALU_Class4InitEv>:

uint32_t	ALU_Class::Init(void){
     480:	b580      	push	{r7, lr}
     482:	b08a      	sub	sp, #40	; 0x28
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
	uint32_t	s;
	event	e;
     488:	f107 030c 	add.w	r3, r7, #12
     48c:	4618      	mov	r0, r3
     48e:	4b39      	ldr	r3, [pc, #228]	; (574 <_ZN9ALU_Class4InitEv+0xf4>)
     490:	4798      	blx	r3
	ptrPbit=&pBit;
     492:	687b      	ldr	r3, [r7, #4]
     494:	4a38      	ldr	r2, [pc, #224]	; (578 <_ZN9ALU_Class4InitEv+0xf8>)
     496:	621a      	str	r2, [r3, #32]
	StartLivePulse();
     498:	6878      	ldr	r0, [r7, #4]
     49a:	4b38      	ldr	r3, [pc, #224]	; (57c <_ZN9ALU_Class4InitEv+0xfc>)
     49c:	4798      	blx	r3
		
	if (hvac.Init())
     49e:	4838      	ldr	r0, [pc, #224]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4a0:	4b38      	ldr	r3, [pc, #224]	; (584 <_ZN9ALU_Class4InitEv+0x104>)
     4a2:	4798      	blx	r3
     4a4:	4603      	mov	r3, r0
     4a6:	2b00      	cmp	r3, #0
     4a8:	d05f      	beq.n	56a <_ZN9ALU_Class4InitEv+0xea>
	{
		cBit.isOK=true;
     4aa:	4b37      	ldr	r3, [pc, #220]	; (588 <_ZN9ALU_Class4InitEv+0x108>)
     4ac:	2201      	movs	r2, #1
     4ae:	701a      	strb	r2, [r3, #0]
		hvac.SetCRCConfigData();
     4b0:	4833      	ldr	r0, [pc, #204]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4b2:	4b36      	ldr	r3, [pc, #216]	; (58c <_ZN9ALU_Class4InitEv+0x10c>)
     4b4:	4798      	blx	r3
		SetInitialConfiguration(configuration);
     4b6:	687b      	ldr	r3, [r7, #4]
     4b8:	332c      	adds	r3, #44	; 0x2c
     4ba:	4619      	mov	r1, r3
     4bc:	6878      	ldr	r0, [r7, #4]
     4be:	4b34      	ldr	r3, [pc, #208]	; (590 <_ZN9ALU_Class4InitEv+0x110>)
     4c0:	4798      	blx	r3
		memory.WriteDefaultState();
     4c2:	4834      	ldr	r0, [pc, #208]	; (594 <_ZN9ALU_Class4InitEv+0x114>)
     4c4:	4b34      	ldr	r3, [pc, #208]	; (598 <_ZN9ALU_Class4InitEv+0x118>)
     4c6:	4798      	blx	r3
		hvac.SetInitialState();
     4c8:	4834      	ldr	r0, [pc, #208]	; (59c <_ZN9ALU_Class4InitEv+0x11c>)
     4ca:	4b35      	ldr	r3, [pc, #212]	; (5a0 <_ZN9ALU_Class4InitEv+0x120>)
     4cc:	4798      	blx	r3
		uhr.Init();
     4ce:	4835      	ldr	r0, [pc, #212]	; (5a4 <_ZN9ALU_Class4InitEv+0x124>)
     4d0:	4b35      	ldr	r3, [pc, #212]	; (5a8 <_ZN9ALU_Class4InitEv+0x128>)
     4d2:	4798      	blx	r3
		hvac.saveCurrentState();
     4d4:	482a      	ldr	r0, [pc, #168]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4d6:	4b35      	ldr	r3, [pc, #212]	; (5ac <_ZN9ALU_Class4InitEv+0x12c>)
     4d8:	4798      	blx	r3
		listener.Init();
     4da:	4835      	ldr	r0, [pc, #212]	; (5b0 <_ZN9ALU_Class4InitEv+0x130>)
     4dc:	4b35      	ldr	r3, [pc, #212]	; (5b4 <_ZN9ALU_Class4InitEv+0x134>)
     4de:	4798      	blx	r3
		
		if (!(interfaces.Init()))
     4e0:	4835      	ldr	r0, [pc, #212]	; (5b8 <_ZN9ALU_Class4InitEv+0x138>)
     4e2:	4b36      	ldr	r3, [pc, #216]	; (5bc <_ZN9ALU_Class4InitEv+0x13c>)
     4e4:	4798      	blx	r3
     4e6:	4603      	mov	r3, r0
     4e8:	f083 0301 	eor.w	r3, r3, #1
     4ec:	b2db      	uxtb	r3, r3
     4ee:	2b00      	cmp	r3, #0
     4f0:	d00e      	beq.n	510 <_ZN9ALU_Class4InitEv+0x90>
		{
			NotifyError(kARINCINnterfaceError,s);
     4f2:	f107 031c 	add.w	r3, r7, #28
     4f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
     4f8:	4618      	mov	r0, r3
     4fa:	4b31      	ldr	r3, [pc, #196]	; (5c0 <_ZN9ALU_Class4InitEv+0x140>)
     4fc:	4798      	blx	r3
     4fe:	f107 031c 	add.w	r3, r7, #28
     502:	461a      	mov	r2, r3
     504:	2100      	movs	r1, #0
     506:	6878      	ldr	r0, [r7, #4]
     508:	4b2e      	ldr	r3, [pc, #184]	; (5c4 <_ZN9ALU_Class4InitEv+0x144>)
     50a:	4798      	blx	r3
			return s;
     50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     50e:	e02d      	b.n	56c <_ZN9ALU_Class4InitEv+0xec>
		}
		else
		{
			arincTimer.Start_periodic_task(FUNC_PTR(ARINCTimeUp),500);
     510:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     514:	492c      	ldr	r1, [pc, #176]	; (5c8 <_ZN9ALU_Class4InitEv+0x148>)
     516:	482d      	ldr	r0, [pc, #180]	; (5cc <_ZN9ALU_Class4InitEv+0x14c>)
     518:	4b2d      	ldr	r3, [pc, #180]	; (5d0 <_ZN9ALU_Class4InitEv+0x150>)
     51a:	4798      	blx	r3
			
			s=pBit.CheckCurrentStatus(status);
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
     522:	4619      	mov	r1, r3
     524:	4814      	ldr	r0, [pc, #80]	; (578 <_ZN9ALU_Class4InitEv+0xf8>)
     526:	4b2b      	ldr	r3, [pc, #172]	; (5d4 <_ZN9ALU_Class4InitEv+0x154>)
     528:	4798      	blx	r3
     52a:	6278      	str	r0, [r7, #36]	; 0x24
			if (s>0)
     52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     52e:	2b00      	cmp	r3, #0
     530:	d00e      	beq.n	550 <_ZN9ALU_Class4InitEv+0xd0>
			{
				NotifyError(kpBITError,s);
     532:	f107 0320 	add.w	r3, r7, #32
     536:	6a79      	ldr	r1, [r7, #36]	; 0x24
     538:	4618      	mov	r0, r3
     53a:	4b21      	ldr	r3, [pc, #132]	; (5c0 <_ZN9ALU_Class4InitEv+0x140>)
     53c:	4798      	blx	r3
     53e:	f107 0320 	add.w	r3, r7, #32
     542:	461a      	mov	r2, r3
     544:	2101      	movs	r1, #1
     546:	6878      	ldr	r0, [r7, #4]
     548:	4b1e      	ldr	r3, [pc, #120]	; (5c4 <_ZN9ALU_Class4InitEv+0x144>)
     54a:	4798      	blx	r3
				return s;
     54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     54e:	e00d      	b.n	56c <_ZN9ALU_Class4InitEv+0xec>
			}
			else
			{
				InitTaskArray();
     550:	687b      	ldr	r3, [r7, #4]
     552:	4618      	mov	r0, r3
     554:	4b20      	ldr	r3, [pc, #128]	; (5d8 <_ZN9ALU_Class4InitEv+0x158>)
     556:	4798      	blx	r3
				EnableWatchDog();
     558:	6878      	ldr	r0, [r7, #4]
     55a:	4b20      	ldr	r3, [pc, #128]	; (5dc <_ZN9ALU_Class4InitEv+0x15c>)
     55c:	4798      	blx	r3
				PrepareNewEvent(kALUEventSimpleStart);
     55e:	2200      	movs	r2, #0
     560:	f44f 7182 	mov.w	r1, #260	; 0x104
     564:	6878      	ldr	r0, [r7, #4]
     566:	4b1e      	ldr	r3, [pc, #120]	; (5e0 <_ZN9ALU_Class4InitEv+0x160>)
     568:	4798      	blx	r3
	//while(1);

	

	  
	return s;
     56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     56c:	4618      	mov	r0, r3
     56e:	3728      	adds	r7, #40	; 0x28
     570:	46bd      	mov	sp, r7
     572:	bd80      	pop	{r7, pc}
     574:	000003c5 	.word	0x000003c5
     578:	20000c64 	.word	0x20000c64
     57c:	0000083d 	.word	0x0000083d
     580:	200081c4 	.word	0x200081c4
     584:	000030fd 	.word	0x000030fd
     588:	20000c78 	.word	0x20000c78
     58c:	000042f5 	.word	0x000042f5
     590:	00000889 	.word	0x00000889
     594:	20002d74 	.word	0x20002d74
     598:	00002b91 	.word	0x00002b91
     59c:	200083dc 	.word	0x200083dc
     5a0:	00001159 	.word	0x00001159
     5a4:	200013f8 	.word	0x200013f8
     5a8:	000016dd 	.word	0x000016dd
     5ac:	00004169 	.word	0x00004169
     5b0:	20009b20 	.word	0x20009b20
     5b4:	00014ca1 	.word	0x00014ca1
     5b8:	2000165c 	.word	0x2000165c
     5bc:	00001dc1 	.word	0x00001dc1
     5c0:	000003a9 	.word	0x000003a9
     5c4:	000009e1 	.word	0x000009e1
     5c8:	00000405 	.word	0x00000405
     5cc:	2000a4b0 	.word	0x2000a4b0
     5d0:	00017c9d 	.word	0x00017c9d
     5d4:	00002d69 	.word	0x00002d69
     5d8:	000046ad 	.word	0x000046ad
     5dc:	000007e1 	.word	0x000007e1
     5e0:	00000a49 	.word	0x00000a49

000005e4 <_ZN9ALU_Class13RunControllerEv>:

uint32_t	ALU_Class::RunController(void){
     5e4:	b590      	push	{r4, r7, lr}
     5e6:	b089      	sub	sp, #36	; 0x24
     5e8:	af02      	add	r7, sp, #8
     5ea:	6078      	str	r0, [r7, #4]
	event e;
     5ec:	f107 0308 	add.w	r3, r7, #8
     5f0:	4618      	mov	r0, r3
     5f2:	4b25      	ldr	r3, [pc, #148]	; (688 <_ZN9ALU_Class13RunControllerEv+0xa4>)
     5f4:	4798      	blx	r3
	
	
	   while (pBit)
     5f6:	4825      	ldr	r0, [pc, #148]	; (68c <_ZN9ALU_Class13RunControllerEv+0xa8>)
     5f8:	4b25      	ldr	r3, [pc, #148]	; (690 <_ZN9ALU_Class13RunControllerEv+0xac>)
     5fa:	4798      	blx	r3
     5fc:	4603      	mov	r3, r0
     5fe:	2b00      	cmp	r3, #0
     600:	d03c      	beq.n	67c <_ZN9ALU_Class13RunControllerEv+0x98>
	   {
		   listener.eventHandler=&ALU_Class::CheckPeriodicTask;
     602:	4b24      	ldr	r3, [pc, #144]	; (694 <_ZN9ALU_Class13RunControllerEv+0xb0>)
     604:	4a24      	ldr	r2, [pc, #144]	; (698 <_ZN9ALU_Class13RunControllerEv+0xb4>)
     606:	615a      	str	r2, [r3, #20]
		   while (!arincTXTimeUP)
     608:	687b      	ldr	r3, [r7, #4]
     60a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
     60e:	b2db      	uxtb	r3, r3
     610:	f083 0301 	eor.w	r3, r3, #1
     614:	b2db      	uxtb	r3, r3
     616:	2b00      	cmp	r3, #0
     618:	d028      	beq.n	66c <_ZN9ALU_Class13RunControllerEv+0x88>
		   	{
				   if (listener.WaitForEvent(e, kALUEventClass, kALUControllerEvent,8))
     61a:	f107 0108 	add.w	r1, r7, #8
     61e:	2308      	movs	r3, #8
     620:	9300      	str	r3, [sp, #0]
     622:	2302      	movs	r3, #2
     624:	f44f 7240 	mov.w	r2, #768	; 0x300
     628:	481a      	ldr	r0, [pc, #104]	; (694 <_ZN9ALU_Class13RunControllerEv+0xb0>)
     62a:	4c1c      	ldr	r4, [pc, #112]	; (69c <_ZN9ALU_Class13RunControllerEv+0xb8>)
     62c:	47a0      	blx	r4
     62e:	4603      	mov	r3, r0
     630:	2b00      	cmp	r3, #0
     632:	d006      	beq.n	642 <_ZN9ALU_Class13RunControllerEv+0x5e>
				   {
					   HandleControllerEvent(e);
     634:	f107 0308 	add.w	r3, r7, #8
     638:	4619      	mov	r1, r3
     63a:	6878      	ldr	r0, [r7, #4]
     63c:	4b18      	ldr	r3, [pc, #96]	; (6a0 <_ZN9ALU_Class13RunControllerEv+0xbc>)
     63e:	4798      	blx	r3
     640:	e7e2      	b.n	608 <_ZN9ALU_Class13RunControllerEv+0x24>
					   
				   }else if(listener.WaitForEvent(e, kHVACEventClass, kHVACEventDoPendingTasks,4)){
     642:	f107 0108 	add.w	r1, r7, #8
     646:	2304      	movs	r3, #4
     648:	9300      	str	r3, [sp, #0]
     64a:	2303      	movs	r3, #3
     64c:	f44f 7200 	mov.w	r2, #512	; 0x200
     650:	4810      	ldr	r0, [pc, #64]	; (694 <_ZN9ALU_Class13RunControllerEv+0xb0>)
     652:	4c12      	ldr	r4, [pc, #72]	; (69c <_ZN9ALU_Class13RunControllerEv+0xb8>)
     654:	47a0      	blx	r4
     656:	4603      	mov	r3, r0
     658:	2b00      	cmp	r3, #0
     65a:	d106      	bne.n	66a <_ZN9ALU_Class13RunControllerEv+0x86>
					   break;
				   }else{
						PrepareNewEvent(kALUEventSimpleResume);
     65c:	2200      	movs	r2, #0
     65e:	f240 1107 	movw	r1, #263	; 0x107
     662:	6878      	ldr	r0, [r7, #4]
     664:	4b0f      	ldr	r3, [pc, #60]	; (6a4 <_ZN9ALU_Class13RunControllerEv+0xc0>)
     666:	4798      	blx	r3
		   while (!arincTXTimeUP)
     668:	e7ce      	b.n	608 <_ZN9ALU_Class13RunControllerEv+0x24>
					   break;
     66a:	bf00      	nop
				   }
			 }
			//arinc.TrasmitSingleLabel();
			ExecutePendingTask();
     66c:	6878      	ldr	r0, [r7, #4]
     66e:	4b0e      	ldr	r3, [pc, #56]	; (6a8 <_ZN9ALU_Class13RunControllerEv+0xc4>)
     670:	4798      	blx	r3
			arincTXTimeUP=false;
     672:	687b      	ldr	r3, [r7, #4]
     674:	2200      	movs	r2, #0
     676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	   while (pBit)
     67a:	e7bc      	b.n	5f6 <_ZN9ALU_Class13RunControllerEv+0x12>
// 			
// 		}
// 		interfaces.CheckCommunication();
// 	}
	
}
     67c:	bf00      	nop
     67e:	4618      	mov	r0, r3
     680:	371c      	adds	r7, #28
     682:	46bd      	mov	sp, r7
     684:	bd90      	pop	{r4, r7, pc}
     686:	bf00      	nop
     688:	000003c5 	.word	0x000003c5
     68c:	20000c64 	.word	0x20000c64
     690:	00002d4f 	.word	0x00002d4f
     694:	20009b20 	.word	0x20009b20
     698:	00000c35 	.word	0x00000c35
     69c:	00014d81 	.word	0x00014d81
     6a0:	000006ad 	.word	0x000006ad
     6a4:	00000a49 	.word	0x00000a49
     6a8:	00000a95 	.word	0x00000a95

000006ac <_ZN9ALU_Class21HandleControllerEventER5event>:



void ALU_Class::HandleControllerEvent(event& e)
{
     6ac:	b580      	push	{r7, lr}
     6ae:	b086      	sub	sp, #24
     6b0:	af00      	add	r7, sp, #0
     6b2:	6078      	str	r0, [r7, #4]
     6b4:	6039      	str	r1, [r7, #0]

	alu.callingTask = alu.currentTask;
     6b6:	4b28      	ldr	r3, [pc, #160]	; (758 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6b8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
     6bc:	4a26      	ldr	r2, [pc, #152]	; (758 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6be:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	alu.currentTask = e.data.wordData[0];
     6c2:	683b      	ldr	r3, [r7, #0]
     6c4:	891b      	ldrh	r3, [r3, #8]
     6c6:	461a      	mov	r2, r3
     6c8:	4b23      	ldr	r3, [pc, #140]	; (758 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6ca:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	alu.taskEntryTime= hvacTimer.Get_ticks();
     6ce:	4823      	ldr	r0, [pc, #140]	; (75c <_ZN9ALU_Class21HandleControllerEventER5event+0xb0>)
     6d0:	4b23      	ldr	r3, [pc, #140]	; (760 <_ZN9ALU_Class21HandleControllerEventER5event+0xb4>)
     6d2:	4798      	blx	r3
     6d4:	4602      	mov	r2, r0
     6d6:	4b20      	ldr	r3, [pc, #128]	; (758 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6d8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154




	switch (alu.currentTask)
     6dc:	4b1e      	ldr	r3, [pc, #120]	; (758 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6de:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
     6e2:	f240 1205 	movw	r2, #261	; 0x105
     6e6:	4293      	cmp	r3, r2
     6e8:	d026      	beq.n	738 <_ZN9ALU_Class21HandleControllerEventER5event+0x8c>
     6ea:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     6ee:	d205      	bcs.n	6fc <_ZN9ALU_Class21HandleControllerEventER5event+0x50>
     6f0:	2b03      	cmp	r3, #3
     6f2:	d01a      	beq.n	72a <_ZN9ALU_Class21HandleControllerEventER5event+0x7e>
     6f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
     6f8:	d008      	beq.n	70c <_ZN9ALU_Class21HandleControllerEventER5event+0x60>
     6fa:	e024      	b.n	746 <_ZN9ALU_Class21HandleControllerEventER5event+0x9a>
     6fc:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     700:	d00e      	beq.n	720 <_ZN9ALU_Class21HandleControllerEventER5event+0x74>
     702:	f240 1207 	movw	r2, #263	; 0x107
     706:	4293      	cmp	r3, r2
     708:	d005      	beq.n	716 <_ZN9ALU_Class21HandleControllerEventER5event+0x6a>
     70a:	e01c      	b.n	746 <_ZN9ALU_Class21HandleControllerEventER5event+0x9a>
	{
		case kALUEventSimpleStart:
			hvac.Start(1);
     70c:	2101      	movs	r1, #1
     70e:	4815      	ldr	r0, [pc, #84]	; (764 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     710:	4b15      	ldr	r3, [pc, #84]	; (768 <_ZN9ALU_Class21HandleControllerEventER5event+0xbc>)
     712:	4798      	blx	r3
		break;
     714:	e01c      	b.n	750 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		case kALUEventSimpleResume:
			hvac.ControllerResume(1);
     716:	2101      	movs	r1, #1
     718:	4812      	ldr	r0, [pc, #72]	; (764 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     71a:	4b14      	ldr	r3, [pc, #80]	; (76c <_ZN9ALU_Class21HandleControllerEventER5event+0xc0>)
     71c:	4798      	blx	r3
		break;
     71e:	e017      	b.n	750 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		case kALUEventSimpleStop:
			hvac.Stop(0);
     720:	2100      	movs	r1, #0
     722:	4810      	ldr	r0, [pc, #64]	; (764 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     724:	4b12      	ldr	r3, [pc, #72]	; (770 <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     726:	4798      	blx	r3
		break;
     728:	e012      	b.n	750 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     72a:	f107 0308 	add.w	r3, r7, #8
     72e:	4911      	ldr	r1, [pc, #68]	; (774 <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     730:	4618      	mov	r0, r3
     732:	4b11      	ldr	r3, [pc, #68]	; (778 <_ZN9ALU_Class21HandleControllerEventER5event+0xcc>)
     734:	4798      	blx	r3
		break;
     736:	e00b      	b.n	750 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>
		case kALUEventCheckPheripherals:
			interfaces.CheckCommunication();
     738:	f107 0310 	add.w	r3, r7, #16
     73c:	490d      	ldr	r1, [pc, #52]	; (774 <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     73e:	4618      	mov	r0, r3
     740:	4b0d      	ldr	r3, [pc, #52]	; (778 <_ZN9ALU_Class21HandleControllerEventER5event+0xcc>)
     742:	4798      	blx	r3
		break;
     744:	e004      	b.n	750 <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		default:
			hvac.Stop(0);
     746:	2100      	movs	r1, #0
     748:	4806      	ldr	r0, [pc, #24]	; (764 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     74a:	4b09      	ldr	r3, [pc, #36]	; (770 <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     74c:	4798      	blx	r3
		break;
     74e:	bf00      	nop
	}
}
     750:	bf00      	nop
     752:	3718      	adds	r7, #24
     754:	46bd      	mov	sp, r7
     756:	bd80      	pop	{r7, pc}
     758:	20000c80 	.word	0x20000c80
     75c:	2000a478 	.word	0x2000a478
     760:	00017d69 	.word	0x00017d69
     764:	200081c4 	.word	0x200081c4
     768:	00003309 	.word	0x00003309
     76c:	00003185 	.word	0x00003185
     770:	000041f9 	.word	0x000041f9
     774:	2000165c 	.word	0x2000165c
     778:	00001e49 	.word	0x00001e49

0000077c <_ZN9ALU_Class15GetSelectedAMMCEv>:

uint8_t	ALU_Class::GetSelectedAMMC(void){
     77c:	b580      	push	{r7, lr}
     77e:	b082      	sub	sp, #8
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
	activeLine=arinc.GetActiveLine();
     784:	4811      	ldr	r0, [pc, #68]	; (7cc <_ZN9ALU_Class15GetSelectedAMMCEv+0x50>)
     786:	4b12      	ldr	r3, [pc, #72]	; (7d0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>)
     788:	4798      	blx	r3
     78a:	4603      	mov	r3, r0
     78c:	461a      	mov	r2, r3
     78e:	687b      	ldr	r3, [r7, #4]
     790:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
		switch (activeLine)
     794:	687b      	ldr	r3, [r7, #4]
     796:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
     79a:	2b01      	cmp	r3, #1
     79c:	d002      	beq.n	7a4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x28>
     79e:	2b02      	cmp	r3, #2
     7a0:	d004      	beq.n	7ac <_ZN9ALU_Class15GetSelectedAMMCEv+0x30>
     7a2:	e007      	b.n	7b4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>
		{
			case 1:
			ammc=&ammc1;
     7a4:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     7a6:	4a0c      	ldr	r2, [pc, #48]	; (7d8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     7a8:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     7aa:	e007      	b.n	7bc <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			
			case 2:
			ammc=&ammc2;
     7ac:	4b09      	ldr	r3, [pc, #36]	; (7d4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     7ae:	4a0b      	ldr	r2, [pc, #44]	; (7dc <_ZN9ALU_Class15GetSelectedAMMCEv+0x60>)
     7b0:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     7b2:	e003      	b.n	7bc <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			default:
			ammc=&ammc1;
     7b4:	4b07      	ldr	r3, [pc, #28]	; (7d4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     7b6:	4a08      	ldr	r2, [pc, #32]	; (7d8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     7b8:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     7ba:	bf00      	nop
		}
	return activeLine;	
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
}
     7c2:	4618      	mov	r0, r3
     7c4:	3708      	adds	r7, #8
     7c6:	46bd      	mov	sp, r7
     7c8:	bd80      	pop	{r7, pc}
     7ca:	bf00      	nop
     7cc:	200092c4 	.word	0x200092c4
     7d0:	000146c7 	.word	0x000146c7
     7d4:	200013ec 	.word	0x200013ec
     7d8:	20000e04 	.word	0x20000e04
     7dc:	200010f8 	.word	0x200010f8

000007e0 <_ZN9ALU_Class14EnableWatchDogEv>:
	else
	{
	}
	return line;
}
int32_t	ALU_Class::EnableWatchDog(void){
     7e0:	b580      	push	{r7, lr}
     7e2:	b082      	sub	sp, #8
     7e4:	af00      	add	r7, sp, #0
     7e6:	6078      	str	r0, [r7, #4]

	wdt_set_timeout_period(&WATCHDOG, clk_rate, timeout_period);
     7e8:	687b      	ldr	r3, [r7, #4]
     7ea:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
     7ee:	687b      	ldr	r3, [r7, #4]
     7f0:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
     7f4:	b29b      	uxth	r3, r3
     7f6:	461a      	mov	r2, r3
     7f8:	4805      	ldr	r0, [pc, #20]	; (810 <_ZN9ALU_Class14EnableWatchDogEv+0x30>)
     7fa:	4b06      	ldr	r3, [pc, #24]	; (814 <_ZN9ALU_Class14EnableWatchDogEv+0x34>)
     7fc:	4798      	blx	r3
	return wdt_enable(&WATCHDOG);
     7fe:	4804      	ldr	r0, [pc, #16]	; (810 <_ZN9ALU_Class14EnableWatchDogEv+0x30>)
     800:	4b05      	ldr	r3, [pc, #20]	; (818 <_ZN9ALU_Class14EnableWatchDogEv+0x38>)
     802:	4798      	blx	r3
     804:	4603      	mov	r3, r0

	
}
     806:	4618      	mov	r0, r3
     808:	3708      	adds	r7, #8
     80a:	46bd      	mov	sp, r7
     80c:	bd80      	pop	{r7, pc}
     80e:	bf00      	nop
     810:	2000a948 	.word	0x2000a948
     814:	000002d1 	.word	0x000002d1
     818:	00000321 	.word	0x00000321

0000081c <_ZN9ALU_Class12FeedWatchDogEv>:
int32_t	ALU_Class::FeedWatchDog(void){
     81c:	b580      	push	{r7, lr}
     81e:	b082      	sub	sp, #8
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
	return wdt_feed(&WATCHDOG);
     824:	4803      	ldr	r0, [pc, #12]	; (834 <_ZN9ALU_Class12FeedWatchDogEv+0x18>)
     826:	4b04      	ldr	r3, [pc, #16]	; (838 <_ZN9ALU_Class12FeedWatchDogEv+0x1c>)
     828:	4798      	blx	r3
     82a:	4603      	mov	r3, r0
}
     82c:	4618      	mov	r0, r3
     82e:	3708      	adds	r7, #8
     830:	46bd      	mov	sp, r7
     832:	bd80      	pop	{r7, pc}
     834:	2000a948 	.word	0x2000a948
     838:	00000365 	.word	0x00000365

0000083c <_ZN9ALU_Class14StartLivePulseEv>:
uint8_t	ALU_Class::StartLivePulse(void){
     83c:	b580      	push	{r7, lr}
     83e:	b084      	sub	sp, #16
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     844:	4909      	ldr	r1, [pc, #36]	; (86c <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     846:	480a      	ldr	r0, [pc, #40]	; (870 <_ZN9ALU_Class14StartLivePulseEv+0x34>)
     848:	4b0a      	ldr	r3, [pc, #40]	; (874 <_ZN9ALU_Class14StartLivePulseEv+0x38>)
     84a:	4798      	blx	r3
     84c:	4603      	mov	r3, r0
     84e:	490a      	ldr	r1, [pc, #40]	; (878 <_ZN9ALU_Class14StartLivePulseEv+0x3c>)
     850:	4618      	mov	r0, r3
     852:	4b0a      	ldr	r3, [pc, #40]	; (87c <_ZN9ALU_Class14StartLivePulseEv+0x40>)
     854:	4798      	blx	r3
	//pwm_set_parameters(&LIVE_PULSE, 1000000, 500);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     856:	480a      	ldr	r0, [pc, #40]	; (880 <_ZN9ALU_Class14StartLivePulseEv+0x44>)
     858:	4b0a      	ldr	r3, [pc, #40]	; (884 <_ZN9ALU_Class14StartLivePulseEv+0x48>)
     85a:	4798      	blx	r3
     85c:	4603      	mov	r3, r0
     85e:	60fb      	str	r3, [r7, #12]
	return p;
     860:	68fb      	ldr	r3, [r7, #12]
     862:	b2db      	uxtb	r3, r3
}
     864:	4618      	mov	r0, r3
     866:	3710      	adds	r7, #16
     868:	46bd      	mov	sp, r7
     86a:	bd80      	pop	{r7, pc}
     86c:	0002011c 	.word	0x0002011c
     870:	2000a4d0 	.word	0x2000a4d0
     874:	00000cb9 	.word	0x00000cb9
     878:	00020118 	.word	0x00020118
     87c:	00000c99 	.word	0x00000c99
     880:	2000a804 	.word	0x2000a804
     884:	00006f05 	.word	0x00006f05

00000888 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData>:
		nextUptimeUpdate = hvacTimer.Get_ticks()+ 1000;
	}
	
	return (alu.FeedWatchDog()>0);
}
uint32_t ALU_Class::SetInitialConfiguration(ConfigurationData& cd){
     888:	b580      	push	{r7, lr}
     88a:	b088      	sub	sp, #32
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
     890:	6039      	str	r1, [r7, #0]
	uint32_t	w,crc,refCRC,e;
	w=0;
     892:	2300      	movs	r3, #0
     894:	61bb      	str	r3, [r7, #24]
	uint32_t	r=memory.ReadLastConfigurationData(cd);
     896:	6839      	ldr	r1, [r7, #0]
     898:	483d      	ldr	r0, [pc, #244]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     89a:	4b3e      	ldr	r3, [pc, #248]	; (994 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     89c:	4798      	blx	r3
     89e:	61f8      	str	r0, [r7, #28]
	if (memory.IsConfigurationDataUpdated())
     8a0:	483d      	ldr	r0, [pc, #244]	; (998 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     8a2:	4b3e      	ldr	r3, [pc, #248]	; (99c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x114>)
     8a4:	4798      	blx	r3
     8a6:	4603      	mov	r3, r0
     8a8:	2b00      	cmp	r3, #0
     8aa:	d007      	beq.n	8bc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x34>
	{
		r=memory.ReadUpdatedConfigurationData(configuration);
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	332c      	adds	r3, #44	; 0x2c
     8b0:	4619      	mov	r1, r3
     8b2:	4837      	ldr	r0, [pc, #220]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     8b4:	4b3a      	ldr	r3, [pc, #232]	; (9a0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x118>)
     8b6:	4798      	blx	r3
     8b8:	61f8      	str	r0, [r7, #28]
     8ba:	e05e      	b.n	97a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
		
	}
	else
	{
		crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(configuration));
     8bc:	22ac      	movs	r2, #172	; 0xac
     8be:	6839      	ldr	r1, [r7, #0]
     8c0:	4835      	ldr	r0, [pc, #212]	; (998 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     8c2:	4b38      	ldr	r3, [pc, #224]	; (9a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     8c4:	4798      	blx	r3
     8c6:	6178      	str	r0, [r7, #20]
		refCRC=memory.ReadCRCConfigurationData();
     8c8:	4831      	ldr	r0, [pc, #196]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     8ca:	4b37      	ldr	r3, [pc, #220]	; (9a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x120>)
     8cc:	4798      	blx	r3
     8ce:	6138      	str	r0, [r7, #16]
		if (crc==refCRC)
     8d0:	697a      	ldr	r2, [r7, #20]
     8d2:	693b      	ldr	r3, [r7, #16]
     8d4:	429a      	cmp	r2, r3
     8d6:	d108      	bne.n	8ea <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x62>
		{
			configuration=cd;
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	683a      	ldr	r2, [r7, #0]
     8dc:	332c      	adds	r3, #44	; 0x2c
     8de:	4611      	mov	r1, r2
     8e0:	22ac      	movs	r2, #172	; 0xac
     8e2:	4618      	mov	r0, r3
     8e4:	4b31      	ldr	r3, [pc, #196]	; (9ac <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     8e6:	4798      	blx	r3
     8e8:	e047      	b.n	97a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
		
		} 
		else
		{
		
			r=memory.ReadDefaultConfigurationData(configuration);
     8ea:	687b      	ldr	r3, [r7, #4]
     8ec:	332c      	adds	r3, #44	; 0x2c
     8ee:	4619      	mov	r1, r3
     8f0:	4827      	ldr	r0, [pc, #156]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     8f2:	4b2f      	ldr	r3, [pc, #188]	; (9b0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x128>)
     8f4:	4798      	blx	r3
     8f6:	61f8      	str	r0, [r7, #28]
			crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     8f8:	687b      	ldr	r3, [r7, #4]
     8fa:	332c      	adds	r3, #44	; 0x2c
     8fc:	22ac      	movs	r2, #172	; 0xac
     8fe:	4619      	mov	r1, r3
     900:	4825      	ldr	r0, [pc, #148]	; (998 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     902:	4b28      	ldr	r3, [pc, #160]	; (9a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     904:	4798      	blx	r3
     906:	6178      	str	r0, [r7, #20]
			if (crc==hvac.CRC32)
     908:	4b2a      	ldr	r3, [pc, #168]	; (9b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     90a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
     90e:	697b      	ldr	r3, [r7, #20]
     910:	429a      	cmp	r2, r3
     912:	d105      	bne.n	920 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x98>
			{
				w=memory.WriteCRCConfigurationData(crc);
     914:	6979      	ldr	r1, [r7, #20]
     916:	481e      	ldr	r0, [pc, #120]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     918:	4b27      	ldr	r3, [pc, #156]	; (9b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x130>)
     91a:	4798      	blx	r3
     91c:	61b8      	str	r0, [r7, #24]
     91e:	e02c      	b.n	97a <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
				
			}
			else
			{
							
				configuration=factoryDefaultsConfiguration;
     920:	687b      	ldr	r3, [r7, #4]
     922:	4a26      	ldr	r2, [pc, #152]	; (9bc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x134>)
     924:	332c      	adds	r3, #44	; 0x2c
     926:	4611      	mov	r1, r2
     928:	22ac      	movs	r2, #172	; 0xac
     92a:	4618      	mov	r0, r3
     92c:	4b1f      	ldr	r3, [pc, #124]	; (9ac <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     92e:	4798      	blx	r3
				e=qspiFlash.Erase((uint32_t)&flashMap->configurationSector);
     930:	4b23      	ldr	r3, [pc, #140]	; (9c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x138>)
     932:	681b      	ldr	r3, [r3, #0]
     934:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     938:	4619      	mov	r1, r3
     93a:	4822      	ldr	r0, [pc, #136]	; (9c4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x13c>)
     93c:	4b22      	ldr	r3, [pc, #136]	; (9c8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x140>)
     93e:	4798      	blx	r3
     940:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultConfiguration();
     942:	4813      	ldr	r0, [pc, #76]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     944:	4b21      	ldr	r3, [pc, #132]	; (9cc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x144>)
     946:	4798      	blx	r3
     948:	61b8      	str	r0, [r7, #24]
				
				w=memory.WriteCRCConfigurationData(hvac.CRC32);
     94a:	4b1a      	ldr	r3, [pc, #104]	; (9b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     94c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     950:	4619      	mov	r1, r3
     952:	480f      	ldr	r0, [pc, #60]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     954:	4b18      	ldr	r3, [pc, #96]	; (9b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x130>)
     956:	4798      	blx	r3
     958:	61b8      	str	r0, [r7, #24]
				
				e=qspiFlash.Erase((uint32_t)&flashMap->parametersSector);
     95a:	4b19      	ldr	r3, [pc, #100]	; (9c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x138>)
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     962:	4619      	mov	r1, r3
     964:	4817      	ldr	r0, [pc, #92]	; (9c4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x13c>)
     966:	4b18      	ldr	r3, [pc, #96]	; (9c8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x140>)
     968:	4798      	blx	r3
     96a:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultParameters();
     96c:	4808      	ldr	r0, [pc, #32]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     96e:	4b18      	ldr	r3, [pc, #96]	; (9d0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x148>)
     970:	4798      	blx	r3
     972:	61b8      	str	r0, [r7, #24]
				memory.WriteFastDefaultParameters();
     974:	4817      	ldr	r0, [pc, #92]	; (9d4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x14c>)
     976:	4b18      	ldr	r3, [pc, #96]	; (9d8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x150>)
     978:	4798      	blx	r3
			
		}
		
		
	}
	hvac.SetConfigurationData(configuration);
     97a:	687b      	ldr	r3, [r7, #4]
     97c:	332c      	adds	r3, #44	; 0x2c
     97e:	4619      	mov	r1, r3
     980:	480c      	ldr	r0, [pc, #48]	; (9b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     982:	4b16      	ldr	r3, [pc, #88]	; (9dc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x154>)
     984:	4798      	blx	r3
	return r;
     986:	69fb      	ldr	r3, [r7, #28]
};
     988:	4618      	mov	r0, r3
     98a:	3720      	adds	r7, #32
     98c:	46bd      	mov	sp, r7
     98e:	bd80      	pop	{r7, pc}
     990:	20002d74 	.word	0x20002d74
     994:	00002985 	.word	0x00002985
     998:	20002be0 	.word	0x20002be0
     99c:	00002e7d 	.word	0x00002e7d
     9a0:	000029b9 	.word	0x000029b9
     9a4:	00001551 	.word	0x00001551
     9a8:	00002a25 	.word	0x00002a25
     9ac:	0001c485 	.word	0x0001c485
     9b0:	00002951 	.word	0x00002951
     9b4:	200081c4 	.word	0x200081c4
     9b8:	00002c15 	.word	0x00002c15
     9bc:	00020290 	.word	0x00020290
     9c0:	20008128 	.word	0x20008128
     9c4:	2000a018 	.word	0x2000a018
     9c8:	00016d4d 	.word	0x00016d4d
     9cc:	00002afd 	.word	0x00002afd
     9d0:	00002b51 	.word	0x00002b51
     9d4:	20002d64 	.word	0x20002d64
     9d8:	00001bc9 	.word	0x00001bc9
     9dc:	00004275 	.word	0x00004275

000009e0 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData>:

void ALU_Class::NotifyError(Internal_Fault_List ifl,const eventData& data)
{
     9e0:	b580      	push	{r7, lr}
     9e2:	b084      	sub	sp, #16
     9e4:	af00      	add	r7, sp, #0
     9e6:	60f8      	str	r0, [r7, #12]
     9e8:	460b      	mov	r3, r1
     9ea:	607a      	str	r2, [r7, #4]
     9ec:	72fb      	strb	r3, [r7, #11]
	listener.SendErrorSelf(uint16_t(ifl),data);
     9ee:	7afb      	ldrb	r3, [r7, #11]
     9f0:	b29b      	uxth	r3, r3
     9f2:	687a      	ldr	r2, [r7, #4]
     9f4:	4619      	mov	r1, r3
     9f6:	4803      	ldr	r0, [pc, #12]	; (a04 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x24>)
     9f8:	4b03      	ldr	r3, [pc, #12]	; (a08 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x28>)
     9fa:	4798      	blx	r3
}
     9fc:	bf00      	nop
     9fe:	3710      	adds	r7, #16
     a00:	46bd      	mov	sp, r7
     a02:	bd80      	pop	{r7, pc}
     a04:	20009b20 	.word	0x20009b20
     a08:	00015049 	.word	0x00015049

00000a0c <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm>:
{
	listener.SendErrorSelf(uint16_t(fl),data);
}

void ALU_Class::PrepareNewTask(ALUTaskEnum newTask, uint32_t data)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	b084      	sub	sp, #16
     a10:	af00      	add	r7, sp, #0
     a12:	60f8      	str	r0, [r7, #12]
     a14:	460b      	mov	r3, r1
     a16:	607a      	str	r2, [r7, #4]
     a18:	72fb      	strb	r3, [r7, #11]
	
	task.id=newTask;
     a1a:	68fb      	ldr	r3, [r7, #12]
     a1c:	7afa      	ldrb	r2, [r7, #11]
     a1e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	task.prio=(uint8_t)newTask;
     a22:	68fb      	ldr	r3, [r7, #12]
     a24:	7afa      	ldrb	r2, [r7, #11]
     a26:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	AddTask(task);
     a2a:	68fa      	ldr	r2, [r7, #12]
     a2c:	68fb      	ldr	r3, [r7, #12]
     a2e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
     a32:	4619      	mov	r1, r3
     a34:	4610      	mov	r0, r2
     a36:	4b03      	ldr	r3, [pc, #12]	; (a44 <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm+0x38>)
     a38:	4798      	blx	r3

}
     a3a:	bf00      	nop
     a3c:	3710      	adds	r7, #16
     a3e:	46bd      	mov	sp, r7
     a40:	bd80      	pop	{r7, pc}
     a42:	bf00      	nop
     a44:	00004755 	.word	0x00004755

00000a48 <_ZN9ALU_Class15PrepareNewEventEtt>:

void ALU_Class::PrepareNewEvent( uint16 newState, uint16 data)
{
     a48:	b580      	push	{r7, lr}
     a4a:	b086      	sub	sp, #24
     a4c:	af00      	add	r7, sp, #0
     a4e:	6078      	str	r0, [r7, #4]
     a50:	460b      	mov	r3, r1
     a52:	807b      	strh	r3, [r7, #2]
     a54:	4613      	mov	r3, r2
     a56:	803b      	strh	r3, [r7, #0]
	event	e;
     a58:	f107 0308 	add.w	r3, r7, #8
     a5c:	4618      	mov	r0, r3
     a5e:	4b0a      	ldr	r3, [pc, #40]	; (a88 <_ZN9ALU_Class15PrepareNewEventEtt+0x40>)
     a60:	4798      	blx	r3
	e.eventClass =(EventClass)kALUEventClass;
     a62:	f44f 7340 	mov.w	r3, #768	; 0x300
     a66:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kALUControllerEvent;
     a68:	2302      	movs	r3, #2
     a6a:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
     a6c:	887b      	ldrh	r3, [r7, #2]
     a6e:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
     a70:	883b      	ldrh	r3, [r7, #0]
     a72:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
     a74:	f107 0308 	add.w	r3, r7, #8
     a78:	4619      	mov	r1, r3
     a7a:	4804      	ldr	r0, [pc, #16]	; (a8c <_ZN9ALU_Class15PrepareNewEventEtt+0x44>)
     a7c:	4b04      	ldr	r3, [pc, #16]	; (a90 <_ZN9ALU_Class15PrepareNewEventEtt+0x48>)
     a7e:	4798      	blx	r3

}
     a80:	bf00      	nop
     a82:	3718      	adds	r7, #24
     a84:	46bd      	mov	sp, r7
     a86:	bd80      	pop	{r7, pc}
     a88:	000003c5 	.word	0x000003c5
     a8c:	20009b20 	.word	0x20009b20
     a90:	00014f45 	.word	0x00014f45

00000a94 <_ZN9ALU_Class18ExecutePendingTaskEv>:

bool	ALU_Class::ExecutePendingTask(void){
     a94:	b580      	push	{r7, lr}
     a96:	b088      	sub	sp, #32
     a98:	af00      	add	r7, sp, #0
     a9a:	60f8      	str	r0, [r7, #12]
	allTasksDone=false;
     a9c:	68fb      	ldr	r3, [r7, #12]
     a9e:	2200      	movs	r2, #0
     aa0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	list_element *it;
	ControllerTask tk;
	uint8_t		highPrio=kALUNumberTasks;
     aa4:	230c      	movs	r3, #12
     aa6:	77fb      	strb	r3, [r7, #31]
	tk=GetHighPrioTask();
     aa8:	68fa      	ldr	r2, [r7, #12]
     aaa:	463b      	mov	r3, r7
     aac:	4611      	mov	r1, r2
     aae:	4618      	mov	r0, r3
     ab0:	4b24      	ldr	r3, [pc, #144]	; (b44 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb0>)
     ab2:	4798      	blx	r3
     ab4:	f107 0314 	add.w	r3, r7, #20
     ab8:	463a      	mov	r2, r7
     aba:	e892 0003 	ldmia.w	r2, {r0, r1}
     abe:	e883 0003 	stmia.w	r3, {r0, r1}
	if (tk.id!=kALUTaskArincTXMessage)
     ac2:	7e3b      	ldrb	r3, [r7, #24]
     ac4:	2b02      	cmp	r3, #2
     ac6:	d004      	beq.n	ad2 <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	{
		PrepareNewTask(kALUTaskArincTXMessage);
     ac8:	2200      	movs	r2, #0
     aca:	2102      	movs	r1, #2
     acc:	68f8      	ldr	r0, [r7, #12]
     ace:	4b1e      	ldr	r3, [pc, #120]	; (b48 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb4>)
     ad0:	4798      	blx	r3
	}
	while (taskList->head){
     ad2:	68fb      	ldr	r3, [r7, #12]
     ad4:	681b      	ldr	r3, [r3, #0]
     ad6:	681b      	ldr	r3, [r3, #0]
     ad8:	2b00      	cmp	r3, #0
     ada:	d01a      	beq.n	b12 <_ZN9ALU_Class18ExecutePendingTaskEv+0x7e>
		tk=GetHighPrioTask();
     adc:	68fa      	ldr	r2, [r7, #12]
     ade:	463b      	mov	r3, r7
     ae0:	4611      	mov	r1, r2
     ae2:	4618      	mov	r0, r3
     ae4:	4b17      	ldr	r3, [pc, #92]	; (b44 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb0>)
     ae6:	4798      	blx	r3
     ae8:	f107 0314 	add.w	r3, r7, #20
     aec:	463a      	mov	r2, r7
     aee:	e892 0003 	ldmia.w	r2, {r0, r1}
     af2:	e883 0003 	stmia.w	r3, {r0, r1}
		HandleTasks(tk);
     af6:	f107 0314 	add.w	r3, r7, #20
     afa:	4619      	mov	r1, r3
     afc:	68f8      	ldr	r0, [r7, #12]
     afe:	4b13      	ldr	r3, [pc, #76]	; (b4c <_ZN9ALU_Class18ExecutePendingTaskEv+0xb8>)
     b00:	4798      	blx	r3
		RemoveTask(tk);
     b02:	68fb      	ldr	r3, [r7, #12]
     b04:	f107 0214 	add.w	r2, r7, #20
     b08:	4611      	mov	r1, r2
     b0a:	4618      	mov	r0, r3
     b0c:	4b10      	ldr	r3, [pc, #64]	; (b50 <_ZN9ALU_Class18ExecutePendingTaskEv+0xbc>)
     b0e:	4798      	blx	r3
	while (taskList->head){
     b10:	e7df      	b.n	ad2 <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	
	}
	RunPeriodicTasks();
     b12:	68f8      	ldr	r0, [r7, #12]
     b14:	4b0f      	ldr	r3, [pc, #60]	; (b54 <_ZN9ALU_Class18ExecutePendingTaskEv+0xc0>)
     b16:	4798      	blx	r3
	allTasksDone=~((bool)taskList->head);
     b18:	68fb      	ldr	r3, [r7, #12]
     b1a:	2201      	movs	r2, #1
     b1c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	if (allTasksDone)
     b20:	68fb      	ldr	r3, [r7, #12]
     b22:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
     b26:	2b00      	cmp	r3, #0
     b28:	d005      	beq.n	b36 <_ZN9ALU_Class18ExecutePendingTaskEv+0xa2>
	{
		
		PrepareNewEvent(kALUEventSimpleResume);
     b2a:	2200      	movs	r2, #0
     b2c:	f240 1107 	movw	r1, #263	; 0x107
     b30:	68f8      	ldr	r0, [r7, #12]
     b32:	4b09      	ldr	r3, [pc, #36]	; (b58 <_ZN9ALU_Class18ExecutePendingTaskEv+0xc4>)
     b34:	4798      	blx	r3
	}
	return allTasksDone; 
     b36:	68fb      	ldr	r3, [r7, #12]
     b38:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
}
     b3c:	4618      	mov	r0, r3
     b3e:	3720      	adds	r7, #32
     b40:	46bd      	mov	sp, r7
     b42:	bd80      	pop	{r7, pc}
     b44:	000048d9 	.word	0x000048d9
     b48:	00000a0d 	.word	0x00000a0d
     b4c:	00000b5d 	.word	0x00000b5d
     b50:	00004845 	.word	0x00004845
     b54:	00000c55 	.word	0x00000c55
     b58:	00000a49 	.word	0x00000a49

00000b5c <_ZN9ALU_Class11HandleTasksER14ControllerTask>:
void ALU_Class::HandleTasks(ControllerTask& ct)
{
     b5c:	b580      	push	{r7, lr}
     b5e:	b084      	sub	sp, #16
     b60:	af00      	add	r7, sp, #0
     b62:	6078      	str	r0, [r7, #4]
     b64:	6039      	str	r1, [r7, #0]

	taskEntryTime= hvacTimer.Get_ticks();
     b66:	4827      	ldr	r0, [pc, #156]	; (c04 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa8>)
     b68:	4b27      	ldr	r3, [pc, #156]	; (c08 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xac>)
     b6a:	4798      	blx	r3
     b6c:	4602      	mov	r2, r0
     b6e:	687b      	ldr	r3, [r7, #4]
     b70:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	switch (ct.id)
     b74:	683b      	ldr	r3, [r7, #0]
     b76:	791b      	ldrb	r3, [r3, #4]
     b78:	3b02      	subs	r3, #2
     b7a:	2b09      	cmp	r3, #9
     b7c:	d838      	bhi.n	bf0 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x94>
     b7e:	a201      	add	r2, pc, #4	; (adr r2, b84 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x28>)
     b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     b84:	00000bd9 	.word	0x00000bd9
     b88:	00000bc1 	.word	0x00000bc1
     b8c:	00000bcf 	.word	0x00000bcf
     b90:	00000bf1 	.word	0x00000bf1
     b94:	00000bf1 	.word	0x00000bf1
     b98:	00000bf1 	.word	0x00000bf1
     b9c:	00000bb7 	.word	0x00000bb7
     ba0:	00000bad 	.word	0x00000bad
     ba4:	00000be1 	.word	0x00000be1
     ba8:	00000be9 	.word	0x00000be9
	{
		case kALUEventSimpleStart:
			hvac.Start(0);
		break;
		case kALUSimpleResume:
			hvac.ControllerResume(0);
     bac:	2100      	movs	r1, #0
     bae:	4817      	ldr	r0, [pc, #92]	; (c0c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     bb0:	4b17      	ldr	r3, [pc, #92]	; (c10 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb4>)
     bb2:	4798      	blx	r3
		break;
     bb4:	e021      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUSimpleStop:
			hvac.Stop(0);
     bb6:	2100      	movs	r1, #0
     bb8:	4814      	ldr	r0, [pc, #80]	; (c0c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     bba:	4b16      	ldr	r3, [pc, #88]	; (c14 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     bbc:	4798      	blx	r3
		break;
     bbe:	e01c      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     bc0:	f107 0308 	add.w	r3, r7, #8
     bc4:	4914      	ldr	r1, [pc, #80]	; (c18 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xbc>)
     bc6:	4618      	mov	r0, r3
     bc8:	4b14      	ldr	r3, [pc, #80]	; (c1c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc0>)
     bca:	4798      	blx	r3
		break;
     bcc:	e015      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskReadARINCR1:
			arinc.ReadRXBuffer(1);			
     bce:	2101      	movs	r1, #1
     bd0:	4813      	ldr	r0, [pc, #76]	; (c20 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     bd2:	4b14      	ldr	r3, [pc, #80]	; (c24 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc8>)
     bd4:	4798      	blx	r3
		break;
     bd6:	e010      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskArincTXMessage:
			arinc.TransmitTXBuffer();
     bd8:	4811      	ldr	r0, [pc, #68]	; (c20 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     bda:	4b13      	ldr	r3, [pc, #76]	; (c28 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xcc>)
     bdc:	4798      	blx	r3
		break;
     bde:	e00c      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskUpdateTemperatures:
			arinc.SaveTemperature();		
     be0:	480f      	ldr	r0, [pc, #60]	; (c20 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     be2:	4b12      	ldr	r3, [pc, #72]	; (c2c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xd0>)
     be4:	4798      	blx	r3
		break;
     be6:	e008      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>
		case kALUTaskUpdateFlapperValves:
			arinc.SaveFlapperValveAngle();
     be8:	480d      	ldr	r0, [pc, #52]	; (c20 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     bea:	4b11      	ldr	r3, [pc, #68]	; (c30 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xd4>)
     bec:	4798      	blx	r3
		break;
     bee:	e004      	b.n	bfa <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9e>

		default:
		hvac.Stop(0);
     bf0:	2100      	movs	r1, #0
     bf2:	4806      	ldr	r0, [pc, #24]	; (c0c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     bf4:	4b07      	ldr	r3, [pc, #28]	; (c14 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     bf6:	4798      	blx	r3
		break;
     bf8:	bf00      	nop
	}
}
     bfa:	bf00      	nop
     bfc:	3710      	adds	r7, #16
     bfe:	46bd      	mov	sp, r7
     c00:	bd80      	pop	{r7, pc}
     c02:	bf00      	nop
     c04:	2000a478 	.word	0x2000a478
     c08:	00017d69 	.word	0x00017d69
     c0c:	200081c4 	.word	0x200081c4
     c10:	00003185 	.word	0x00003185
     c14:	000041f9 	.word	0x000041f9
     c18:	2000165c 	.word	0x2000165c
     c1c:	00001e49 	.word	0x00001e49
     c20:	20008ff0 	.word	0x20008ff0
     c24:	00013879 	.word	0x00013879
     c28:	00013d09 	.word	0x00013d09
     c2c:	00012dcd 	.word	0x00012dcd
     c30:	00012cf9 	.word	0x00012cf9

00000c34 <_ZN9ALU_Class17CheckPeriodicTaskEv>:

void ALU_Class::CheckPeriodicTask(void){
     c34:	b580      	push	{r7, lr}
     c36:	b082      	sub	sp, #8
     c38:	af00      	add	r7, sp, #0
	interfaces.CheckCommunication();
     c3a:	463b      	mov	r3, r7
     c3c:	4903      	ldr	r1, [pc, #12]	; (c4c <_ZN9ALU_Class17CheckPeriodicTaskEv+0x18>)
     c3e:	4618      	mov	r0, r3
     c40:	4b03      	ldr	r3, [pc, #12]	; (c50 <_ZN9ALU_Class17CheckPeriodicTaskEv+0x1c>)
     c42:	4798      	blx	r3
}
     c44:	bf00      	nop
     c46:	3708      	adds	r7, #8
     c48:	46bd      	mov	sp, r7
     c4a:	bd80      	pop	{r7, pc}
     c4c:	2000165c 	.word	0x2000165c
     c50:	00001e49 	.word	0x00001e49

00000c54 <_ZN9ALU_Class16RunPeriodicTasksEv>:

void	ALU_Class::RunPeriodicTasks(void){
     c54:	b580      	push	{r7, lr}
     c56:	b082      	sub	sp, #8
     c58:	af00      	add	r7, sp, #0
     c5a:	6078      	str	r0, [r7, #4]
	FeedWatchDog();
     c5c:	6878      	ldr	r0, [r7, #4]
     c5e:	4b03      	ldr	r3, [pc, #12]	; (c6c <_ZN9ALU_Class16RunPeriodicTasksEv+0x18>)
     c60:	4798      	blx	r3

}
     c62:	bf00      	nop
     c64:	3708      	adds	r7, #8
     c66:	46bd      	mov	sp, r7
     c68:	bd80      	pop	{r7, pc}
     c6a:	bf00      	nop
     c6c:	0000081d 	.word	0x0000081d

00000c70 <_ZlsIhER5PrintS1_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     c70:	b580      	push	{r7, lr}
     c72:	b082      	sub	sp, #8
     c74:	af00      	add	r7, sp, #0
     c76:	6078      	str	r0, [r7, #4]
     c78:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     c7a:	683b      	ldr	r3, [r7, #0]
     c7c:	781b      	ldrb	r3, [r3, #0]
     c7e:	220a      	movs	r2, #10
     c80:	4619      	mov	r1, r3
     c82:	6878      	ldr	r0, [r7, #4]
     c84:	4b03      	ldr	r3, [pc, #12]	; (c94 <_ZlsIhER5PrintS1_RKT_+0x24>)
     c86:	4798      	blx	r3
     c88:	687b      	ldr	r3, [r7, #4]
     c8a:	4618      	mov	r0, r3
     c8c:	3708      	adds	r7, #8
     c8e:	46bd      	mov	sp, r7
     c90:	bd80      	pop	{r7, pc}
     c92:	bf00      	nop
     c94:	00018605 	.word	0x00018605

00000c98 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     c98:	b580      	push	{r7, lr}
     c9a:	b082      	sub	sp, #8
     c9c:	af00      	add	r7, sp, #0
     c9e:	6078      	str	r0, [r7, #4]
     ca0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     ca2:	6839      	ldr	r1, [r7, #0]
     ca4:	6878      	ldr	r0, [r7, #4]
     ca6:	4b03      	ldr	r3, [pc, #12]	; (cb4 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     ca8:	4798      	blx	r3
     caa:	687b      	ldr	r3, [r7, #4]
     cac:	4618      	mov	r0, r3
     cae:	3708      	adds	r7, #8
     cb0:	46bd      	mov	sp, r7
     cb2:	bd80      	pop	{r7, pc}
     cb4:	000185e5 	.word	0x000185e5

00000cb8 <_ZlsIA30_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     cb8:	b580      	push	{r7, lr}
     cba:	b082      	sub	sp, #8
     cbc:	af00      	add	r7, sp, #0
     cbe:	6078      	str	r0, [r7, #4]
     cc0:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     cc2:	6839      	ldr	r1, [r7, #0]
     cc4:	6878      	ldr	r0, [r7, #4]
     cc6:	4b03      	ldr	r3, [pc, #12]	; (cd4 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     cc8:	4798      	blx	r3
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	4618      	mov	r0, r3
     cce:	3708      	adds	r7, #8
     cd0:	46bd      	mov	sp, r7
     cd2:	bd80      	pop	{r7, pc}
     cd4:	000185e5 	.word	0x000185e5

00000cd8 <_Z41__static_initialization_and_destruction_0ii>:




     cd8:	b580      	push	{r7, lr}
     cda:	b082      	sub	sp, #8
     cdc:	af00      	add	r7, sp, #0
     cde:	6078      	str	r0, [r7, #4]
     ce0:	6039      	str	r1, [r7, #0]
     ce2:	687b      	ldr	r3, [r7, #4]
     ce4:	2b01      	cmp	r3, #1
     ce6:	d11c      	bne.n	d22 <_Z41__static_initialization_and_destruction_0ii+0x4a>
     ce8:	683b      	ldr	r3, [r7, #0]
     cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
     cee:	4293      	cmp	r3, r2
     cf0:	d117      	bne.n	d22 <_Z41__static_initialization_and_destruction_0ii+0x4a>
	PBIT_Class( const PBIT_Class &c );
	PBIT_Class& operator=( const PBIT_Class &c );

}; //PBIT_Class

static	PBIT_Class	pBit;
     cf2:	480e      	ldr	r0, [pc, #56]	; (d2c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     cf4:	4b0e      	ldr	r3, [pc, #56]	; (d30 <_Z41__static_initialization_and_destruction_0ii+0x58>)
     cf6:	4798      	blx	r3
     cf8:	4a0e      	ldr	r2, [pc, #56]	; (d34 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     cfa:	490f      	ldr	r1, [pc, #60]	; (d38 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     cfc:	480b      	ldr	r0, [pc, #44]	; (d2c <_Z41__static_initialization_and_destruction_0ii+0x54>)
     cfe:	4b0f      	ldr	r3, [pc, #60]	; (d3c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     d00:	4798      	blx	r3
	CBIT_Class( const CBIT_Class &c );
	CBIT_Class& operator=( const CBIT_Class &c );

}; //CBIT_Class

static	CBIT_Class	cBit;
     d02:	480f      	ldr	r0, [pc, #60]	; (d40 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     d04:	4b0f      	ldr	r3, [pc, #60]	; (d44 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     d06:	4798      	blx	r3
     d08:	4a0a      	ldr	r2, [pc, #40]	; (d34 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     d0a:	490f      	ldr	r1, [pc, #60]	; (d48 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     d0c:	480c      	ldr	r0, [pc, #48]	; (d40 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     d0e:	4b0b      	ldr	r3, [pc, #44]	; (d3c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     d10:	4798      	blx	r3
     d12:	480e      	ldr	r0, [pc, #56]	; (d4c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     d14:	4b0e      	ldr	r3, [pc, #56]	; (d50 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     d16:	4798      	blx	r3
     d18:	4a06      	ldr	r2, [pc, #24]	; (d34 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     d1a:	490e      	ldr	r1, [pc, #56]	; (d54 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     d1c:	480b      	ldr	r0, [pc, #44]	; (d4c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     d1e:	4b07      	ldr	r3, [pc, #28]	; (d3c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     d20:	4798      	blx	r3
     d22:	bf00      	nop
     d24:	3708      	adds	r7, #8
     d26:	46bd      	mov	sp, r7
     d28:	bd80      	pop	{r7, pc}
     d2a:	bf00      	nop
     d2c:	20000c64 	.word	0x20000c64
     d30:	00002d21 	.word	0x00002d21
     d34:	20000000 	.word	0x20000000
     d38:	00002d3b 	.word	0x00002d3b
     d3c:	00019d1d 	.word	0x00019d1d
     d40:	20000c78 	.word	0x20000c78
     d44:	00000fb5 	.word	0x00000fb5
     d48:	00000fcf 	.word	0x00000fcf
     d4c:	20000c80 	.word	0x20000c80
     d50:	00000425 	.word	0x00000425
     d54:	00000461 	.word	0x00000461

00000d58 <_GLOBAL__sub_I_ptrALUClass>:
     d58:	b580      	push	{r7, lr}
     d5a:	af00      	add	r7, sp, #0
     d5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     d60:	2001      	movs	r0, #1
     d62:	4b01      	ldr	r3, [pc, #4]	; (d68 <_GLOBAL__sub_I_ptrALUClass+0x10>)
     d64:	4798      	blx	r3
     d66:	bd80      	pop	{r7, pc}
     d68:	00000cd9 	.word	0x00000cd9

00000d6c <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: private virtual ARINC_Conversions
     d6c:	b480      	push	{r7}
     d6e:	b083      	sub	sp, #12
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
     d74:	6039      	str	r1, [r7, #0]
     d76:	683b      	ldr	r3, [r7, #0]
     d78:	681a      	ldr	r2, [r3, #0]
     d7a:	687b      	ldr	r3, [r7, #4]
     d7c:	601a      	str	r2, [r3, #0]
     d7e:	687b      	ldr	r3, [r7, #4]
     d80:	681b      	ldr	r3, [r3, #0]
     d82:	3b0c      	subs	r3, #12
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	461a      	mov	r2, r3
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	4413      	add	r3, r2
     d8c:	683a      	ldr	r2, [r7, #0]
     d8e:	6852      	ldr	r2, [r2, #4]
     d90:	601a      	str	r2, [r3, #0]
     d92:	687b      	ldr	r3, [r7, #4]
     d94:	4618      	mov	r0, r3
     d96:	370c      	adds	r7, #12
     d98:	46bd      	mov	sp, r7
     d9a:	bc80      	pop	{r7}
     d9c:	4770      	bx	lr
	...

00000da0 <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     da0:	b580      	push	{r7, lr}
     da2:	b082      	sub	sp, #8
     da4:	af00      	add	r7, sp, #0
     da6:	6078      	str	r0, [r7, #4]
     da8:	687b      	ldr	r3, [r7, #4]
     daa:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
     dae:	4618      	mov	r0, r3
     db0:	4b10      	ldr	r3, [pc, #64]	; (df4 <_ZN10AMMC_ClassC1Ev+0x54>)
     db2:	4798      	blx	r3
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
     dba:	4a0f      	ldr	r2, [pc, #60]	; (df8 <_ZN10AMMC_ClassC1Ev+0x58>)
     dbc:	4611      	mov	r1, r2
     dbe:	4618      	mov	r0, r3
     dc0:	4b0e      	ldr	r3, [pc, #56]	; (dfc <_ZN10AMMC_ClassC1Ev+0x5c>)
     dc2:	4798      	blx	r3
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	4a0e      	ldr	r2, [pc, #56]	; (e00 <_ZN10AMMC_ClassC1Ev+0x60>)
     dc8:	4611      	mov	r1, r2
     dca:	4618      	mov	r0, r3
     dcc:	4b0d      	ldr	r3, [pc, #52]	; (e04 <_ZN10AMMC_ClassC1Ev+0x64>)
     dce:	4798      	blx	r3
     dd0:	4a0d      	ldr	r2, [pc, #52]	; (e08 <_ZN10AMMC_ClassC1Ev+0x68>)
     dd2:	687b      	ldr	r3, [r7, #4]
     dd4:	601a      	str	r2, [r3, #0]
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
     ddc:	4a0b      	ldr	r2, [pc, #44]	; (e0c <_ZN10AMMC_ClassC1Ev+0x6c>)
     dde:	601a      	str	r2, [r3, #0]
     de0:	687b      	ldr	r3, [r7, #4]
     de2:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
     de6:	4a0a      	ldr	r2, [pc, #40]	; (e10 <_ZN10AMMC_ClassC1Ev+0x70>)
     de8:	601a      	str	r2, [r3, #0]
{
} //AMMC_Class
     dea:	687b      	ldr	r3, [r7, #4]
     dec:	4618      	mov	r0, r3
     dee:	3708      	adds	r7, #8
     df0:	46bd      	mov	sp, r7
     df2:	bd80      	pop	{r7, pc}
     df4:	00012fd9 	.word	0x00012fd9
     df8:	000201b4 	.word	0x000201b4
     dfc:	00000d6d 	.word	0x00000d6d
     e00:	00020194 	.word	0x00020194
     e04:	00013489 	.word	0x00013489
     e08:	0002014c 	.word	0x0002014c
     e0c:	00020168 	.word	0x00020168
     e10:	00020184 	.word	0x00020184

00000e14 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     e14:	b580      	push	{r7, lr}
     e16:	b082      	sub	sp, #8
     e18:	af00      	add	r7, sp, #0
     e1a:	6078      	str	r0, [r7, #4]
     e1c:	4a12      	ldr	r2, [pc, #72]	; (e68 <_ZN10AMMC_ClassD1Ev+0x54>)
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	601a      	str	r2, [r3, #0]
     e22:	687b      	ldr	r3, [r7, #4]
     e24:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
     e28:	4a10      	ldr	r2, [pc, #64]	; (e6c <_ZN10AMMC_ClassD1Ev+0x58>)
     e2a:	601a      	str	r2, [r3, #0]
     e2c:	687b      	ldr	r3, [r7, #4]
     e2e:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
     e32:	4a0f      	ldr	r2, [pc, #60]	; (e70 <_ZN10AMMC_ClassD1Ev+0x5c>)
     e34:	601a      	str	r2, [r3, #0]
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	4a0e      	ldr	r2, [pc, #56]	; (e74 <_ZN10AMMC_ClassD1Ev+0x60>)
     e3a:	4611      	mov	r1, r2
     e3c:	4618      	mov	r0, r3
     e3e:	4b0e      	ldr	r3, [pc, #56]	; (e78 <_ZN10AMMC_ClassD1Ev+0x64>)
     e40:	4798      	blx	r3
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
     e48:	4a0c      	ldr	r2, [pc, #48]	; (e7c <_ZN10AMMC_ClassD1Ev+0x68>)
     e4a:	4611      	mov	r1, r2
     e4c:	4618      	mov	r0, r3
     e4e:	4b0c      	ldr	r3, [pc, #48]	; (e80 <_ZN10AMMC_ClassD1Ev+0x6c>)
     e50:	4798      	blx	r3
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
     e58:	4618      	mov	r0, r3
     e5a:	4b0a      	ldr	r3, [pc, #40]	; (e84 <_ZN10AMMC_ClassD1Ev+0x70>)
     e5c:	4798      	blx	r3
{
} //~AMMC_Class
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	4618      	mov	r0, r3
     e62:	3708      	adds	r7, #8
     e64:	46bd      	mov	sp, r7
     e66:	bd80      	pop	{r7, pc}
     e68:	0002014c 	.word	0x0002014c
     e6c:	00020168 	.word	0x00020168
     e70:	00020184 	.word	0x00020184
     e74:	00020194 	.word	0x00020194
     e78:	00013589 	.word	0x00013589
     e7c:	000201b4 	.word	0x000201b4
     e80:	00014695 	.word	0x00014695
     e84:	00012ff9 	.word	0x00012ff9

00000e88 <_ZTv0_n16_N10AMMC_ClassD1Ev>:
     e88:	b580      	push	{r7, lr}
     e8a:	b082      	sub	sp, #8
     e8c:	af00      	add	r7, sp, #0
     e8e:	6078      	str	r0, [r7, #4]
     e90:	687b      	ldr	r3, [r7, #4]
     e92:	681b      	ldr	r3, [r3, #0]
     e94:	3b10      	subs	r3, #16
     e96:	681b      	ldr	r3, [r3, #0]
     e98:	461a      	mov	r2, r3
     e9a:	687b      	ldr	r3, [r7, #4]
     e9c:	4413      	add	r3, r2
     e9e:	4618      	mov	r0, r3
     ea0:	4b03      	ldr	r3, [pc, #12]	; (eb0 <_ZTv0_n16_N10AMMC_ClassD1Ev+0x28>)
     ea2:	4798      	blx	r3
     ea4:	4603      	mov	r3, r0
     ea6:	4618      	mov	r0, r3
     ea8:	3708      	adds	r7, #8
     eaa:	46bd      	mov	sp, r7
     eac:	bd80      	pop	{r7, pc}
     eae:	bf00      	nop
     eb0:	00000e15 	.word	0x00000e15

00000eb4 <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     eb4:	b580      	push	{r7, lr}
     eb6:	b082      	sub	sp, #8
     eb8:	af00      	add	r7, sp, #0
     eba:	6078      	str	r0, [r7, #4]
} //~AMMC_Class
     ebc:	6878      	ldr	r0, [r7, #4]
     ebe:	4b06      	ldr	r3, [pc, #24]	; (ed8 <_ZN10AMMC_ClassD0Ev+0x24>)
     ec0:	4798      	blx	r3
     ec2:	f44f 713d 	mov.w	r1, #756	; 0x2f4
     ec6:	6878      	ldr	r0, [r7, #4]
     ec8:	4b04      	ldr	r3, [pc, #16]	; (edc <_ZN10AMMC_ClassD0Ev+0x28>)
     eca:	4798      	blx	r3
     ecc:	687b      	ldr	r3, [r7, #4]
     ece:	4618      	mov	r0, r3
     ed0:	3708      	adds	r7, #8
     ed2:	46bd      	mov	sp, r7
     ed4:	bd80      	pop	{r7, pc}
     ed6:	bf00      	nop
     ed8:	00000e15 	.word	0x00000e15
     edc:	00019d29 	.word	0x00019d29

00000ee0 <_ZTv0_n16_N10AMMC_ClassD0Ev>:
     ee0:	b580      	push	{r7, lr}
     ee2:	b082      	sub	sp, #8
     ee4:	af00      	add	r7, sp, #0
     ee6:	6078      	str	r0, [r7, #4]
     ee8:	687b      	ldr	r3, [r7, #4]
     eea:	681b      	ldr	r3, [r3, #0]
     eec:	3b10      	subs	r3, #16
     eee:	681b      	ldr	r3, [r3, #0]
     ef0:	461a      	mov	r2, r3
     ef2:	687b      	ldr	r3, [r7, #4]
     ef4:	4413      	add	r3, r2
     ef6:	4618      	mov	r0, r3
     ef8:	4b03      	ldr	r3, [pc, #12]	; (f08 <_ZTv0_n16_N10AMMC_ClassD0Ev+0x28>)
     efa:	4798      	blx	r3
     efc:	4603      	mov	r3, r0
     efe:	4618      	mov	r0, r3
     f00:	3708      	adds	r7, #8
     f02:	46bd      	mov	sp, r7
     f04:	bd80      	pop	{r7, pc}
     f06:	bf00      	nop
     f08:	00000eb5 	.word	0x00000eb5

00000f0c <_Z41__static_initialization_and_destruction_0ii>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     f0c:	b580      	push	{r7, lr}
     f0e:	b082      	sub	sp, #8
     f10:	af00      	add	r7, sp, #0
     f12:	6078      	str	r0, [r7, #4]
     f14:	6039      	str	r1, [r7, #0]
     f16:	687b      	ldr	r3, [r7, #4]
     f18:	2b01      	cmp	r3, #1
     f1a:	d124      	bne.n	f66 <_Z41__static_initialization_and_destruction_0ii+0x5a>
     f1c:	683b      	ldr	r3, [r7, #0]
     f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
     f22:	4293      	cmp	r3, r2
     f24:	d11f      	bne.n	f66 <_Z41__static_initialization_and_destruction_0ii+0x5a>
     f26:	4812      	ldr	r0, [pc, #72]	; (f70 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     f28:	4b12      	ldr	r3, [pc, #72]	; (f74 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     f2a:	4798      	blx	r3
     f2c:	4a12      	ldr	r2, [pc, #72]	; (f78 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f2e:	4913      	ldr	r1, [pc, #76]	; (f7c <_Z41__static_initialization_and_destruction_0ii+0x70>)
     f30:	480f      	ldr	r0, [pc, #60]	; (f70 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     f32:	4b13      	ldr	r3, [pc, #76]	; (f80 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f34:	4798      	blx	r3
     f36:	4813      	ldr	r0, [pc, #76]	; (f84 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     f38:	4b13      	ldr	r3, [pc, #76]	; (f88 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     f3a:	4798      	blx	r3
     f3c:	4a0e      	ldr	r2, [pc, #56]	; (f78 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f3e:	4913      	ldr	r1, [pc, #76]	; (f8c <_Z41__static_initialization_and_destruction_0ii+0x80>)
     f40:	4810      	ldr	r0, [pc, #64]	; (f84 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     f42:	4b0f      	ldr	r3, [pc, #60]	; (f80 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f44:	4798      	blx	r3
AMMC_Class	ammc1;
     f46:	4812      	ldr	r0, [pc, #72]	; (f90 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     f48:	4b12      	ldr	r3, [pc, #72]	; (f94 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     f4a:	4798      	blx	r3
     f4c:	4a0a      	ldr	r2, [pc, #40]	; (f78 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f4e:	4912      	ldr	r1, [pc, #72]	; (f98 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     f50:	480f      	ldr	r0, [pc, #60]	; (f90 <_Z41__static_initialization_and_destruction_0ii+0x84>)
     f52:	4b0b      	ldr	r3, [pc, #44]	; (f80 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f54:	4798      	blx	r3
AMMC_Class	ammc2;
     f56:	4811      	ldr	r0, [pc, #68]	; (f9c <_Z41__static_initialization_and_destruction_0ii+0x90>)
     f58:	4b0e      	ldr	r3, [pc, #56]	; (f94 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     f5a:	4798      	blx	r3
     f5c:	4a06      	ldr	r2, [pc, #24]	; (f78 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f5e:	490e      	ldr	r1, [pc, #56]	; (f98 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     f60:	480e      	ldr	r0, [pc, #56]	; (f9c <_Z41__static_initialization_and_destruction_0ii+0x90>)
     f62:	4b07      	ldr	r3, [pc, #28]	; (f80 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f64:	4798      	blx	r3
     f66:	bf00      	nop
     f68:	3708      	adds	r7, #8
     f6a:	46bd      	mov	sp, r7
     f6c:	bd80      	pop	{r7, pc}
     f6e:	bf00      	nop
     f70:	20000dec 	.word	0x20000dec
     f74:	00002d21 	.word	0x00002d21
     f78:	20000000 	.word	0x20000000
     f7c:	00002d3b 	.word	0x00002d3b
     f80:	00019d1d 	.word	0x00019d1d
     f84:	20000e00 	.word	0x20000e00
     f88:	00000fb5 	.word	0x00000fb5
     f8c:	00000fcf 	.word	0x00000fcf
     f90:	20000e04 	.word	0x20000e04
     f94:	00000da1 	.word	0x00000da1
     f98:	00000e15 	.word	0x00000e15
     f9c:	200010f8 	.word	0x200010f8

00000fa0 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     fa0:	b580      	push	{r7, lr}
     fa2:	af00      	add	r7, sp, #0
     fa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     fa8:	2001      	movs	r0, #1
     faa:	4b01      	ldr	r3, [pc, #4]	; (fb0 <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     fac:	4798      	blx	r3
     fae:	bd80      	pop	{r7, pc}
     fb0:	00000f0d 	.word	0x00000f0d

00000fb4 <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     fb4:	b480      	push	{r7}
     fb6:	b083      	sub	sp, #12
     fb8:	af00      	add	r7, sp, #0
     fba:	6078      	str	r0, [r7, #4]
{
	isOK=true;
     fbc:	687b      	ldr	r3, [r7, #4]
     fbe:	2201      	movs	r2, #1
     fc0:	701a      	strb	r2, [r3, #0]
} //CBIT_Class
     fc2:	687b      	ldr	r3, [r7, #4]
     fc4:	4618      	mov	r0, r3
     fc6:	370c      	adds	r7, #12
     fc8:	46bd      	mov	sp, r7
     fca:	bc80      	pop	{r7}
     fcc:	4770      	bx	lr

00000fce <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     fce:	b480      	push	{r7}
     fd0:	b083      	sub	sp, #12
     fd2:	af00      	add	r7, sp, #0
     fd4:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     fd6:	687b      	ldr	r3, [r7, #4]
     fd8:	4618      	mov	r0, r3
     fda:	370c      	adds	r7, #12
     fdc:	46bd      	mov	sp, r7
     fde:	bc80      	pop	{r7}
     fe0:	4770      	bx	lr

00000fe2 <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
     fe2:	b480      	push	{r7}
     fe4:	b083      	sub	sp, #12
     fe6:	af00      	add	r7, sp, #0
     fe8:	6078      	str	r0, [r7, #4]
	return	isOK;
     fea:	687b      	ldr	r3, [r7, #4]
     fec:	781b      	ldrb	r3, [r3, #0]
     fee:	b2db      	uxtb	r3, r3
}
     ff0:	4618      	mov	r0, r3
     ff2:	370c      	adds	r7, #12
     ff4:	46bd      	mov	sp, r7
     ff6:	bc80      	pop	{r7}
     ff8:	4770      	bx	lr
	...

00000ffc <_Z41__static_initialization_and_destruction_0ii>:
CBIT_Class::operator bool(){
	return	isOK;
}
     ffc:	b580      	push	{r7, lr}
     ffe:	b082      	sub	sp, #8
    1000:	af00      	add	r7, sp, #0
    1002:	6078      	str	r0, [r7, #4]
    1004:	6039      	str	r1, [r7, #0]
    1006:	687b      	ldr	r3, [r7, #4]
    1008:	2b01      	cmp	r3, #1
    100a:	d10c      	bne.n	1026 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    100c:	683b      	ldr	r3, [r7, #0]
    100e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1012:	4293      	cmp	r3, r2
    1014:	d107      	bne.n	1026 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1016:	4806      	ldr	r0, [pc, #24]	; (1030 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1018:	4b06      	ldr	r3, [pc, #24]	; (1034 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    101a:	4798      	blx	r3
    101c:	4a06      	ldr	r2, [pc, #24]	; (1038 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    101e:	4907      	ldr	r1, [pc, #28]	; (103c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    1020:	4803      	ldr	r0, [pc, #12]	; (1030 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1022:	4b07      	ldr	r3, [pc, #28]	; (1040 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1024:	4798      	blx	r3
    1026:	bf00      	nop
    1028:	3708      	adds	r7, #8
    102a:	46bd      	mov	sp, r7
    102c:	bd80      	pop	{r7, pc}
    102e:	bf00      	nop
    1030:	200013f0 	.word	0x200013f0
    1034:	00000fb5 	.word	0x00000fb5
    1038:	20000000 	.word	0x20000000
    103c:	00000fcf 	.word	0x00000fcf
    1040:	00019d1d 	.word	0x00019d1d

00001044 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
    1044:	b580      	push	{r7, lr}
    1046:	af00      	add	r7, sp, #0
    1048:	f64f 71ff 	movw	r1, #65535	; 0xffff
    104c:	2001      	movs	r0, #1
    104e:	4b01      	ldr	r3, [pc, #4]	; (1054 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
    1050:	4798      	blx	r3
    1052:	bd80      	pop	{r7, pc}
    1054:	00000ffd 	.word	0x00000ffd

00001058 <_ZN19CondesatorFan_ClassC1Ev>:


#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
    1058:	b480      	push	{r7}
    105a:	b083      	sub	sp, #12
    105c:	af00      	add	r7, sp, #0
    105e:	6078      	str	r0, [r7, #4]
{
} //CondesatorFan_Class
    1060:	687b      	ldr	r3, [r7, #4]
    1062:	4618      	mov	r0, r3
    1064:	370c      	adds	r7, #12
    1066:	46bd      	mov	sp, r7
    1068:	bc80      	pop	{r7}
    106a:	4770      	bx	lr

0000106c <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
    106c:	b480      	push	{r7}
    106e:	b083      	sub	sp, #12
    1070:	af00      	add	r7, sp, #0
    1072:	6078      	str	r0, [r7, #4]
{
} //~CondesatorFan_Class
    1074:	687b      	ldr	r3, [r7, #4]
    1076:	4618      	mov	r0, r3
    1078:	370c      	adds	r7, #12
    107a:	46bd      	mov	sp, r7
    107c:	bc80      	pop	{r7}
    107e:	4770      	bx	lr

00001080 <_ZN17ConfigState_ClassC1Ev>:

} ;


// default constructor
ConfigState_Class::ConfigState_Class()
    1080:	b480      	push	{r7}
    1082:	b083      	sub	sp, #12
    1084:	af00      	add	r7, sp, #0
    1086:	6078      	str	r0, [r7, #4]
    1088:	4a13      	ldr	r2, [pc, #76]	; (10d8 <_ZN17ConfigState_ClassC1Ev+0x58>)
    108a:	687b      	ldr	r3, [r7, #4]
    108c:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kHVACStateReset;
    108e:	687b      	ldr	r3, [r7, #4]
    1090:	f240 122d 	movw	r2, #301	; 0x12d
    1094:	629a      	str	r2, [r3, #40]	; 0x28
	defaultState.callingState = kHVACStateReset;
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	f240 122d 	movw	r2, #301	; 0x12d
    109c:	62da      	str	r2, [r3, #44]	; 0x2c
	defaultState.internalCateringState = 0;
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	2200      	movs	r2, #0
    10a2:	631a      	str	r2, [r3, #48]	; 0x30
	//defaultState.targetUDC = 0.0;
	defaultState.cycleDuration = 0;
    10a4:	687b      	ldr	r3, [r7, #4]
    10a6:	2200      	movs	r2, #0
    10a8:	645a      	str	r2, [r3, #68]	; 0x44
	defaultState.inStateTime = 0;
    10aa:	687b      	ldr	r3, [r7, #4]
    10ac:	2200      	movs	r2, #0
    10ae:	63da      	str	r2, [r3, #60]	; 0x3c
	defaultState.remainingTime = 0;
    10b0:	687b      	ldr	r3, [r7, #4]
    10b2:	2200      	movs	r2, #0
    10b4:	649a      	str	r2, [r3, #72]	; 0x48
	defaultState.waitingExceededTime = 0;
    10b6:	687b      	ldr	r3, [r7, #4]
    10b8:	2200      	movs	r2, #0
    10ba:	651a      	str	r2, [r3, #80]	; 0x50
	defaultState.fansOnAfterCateringCycleTime = forever;
    10bc:	4b07      	ldr	r3, [pc, #28]	; (10dc <_ZN17ConfigState_ClassC1Ev+0x5c>)
    10be:	681a      	ldr	r2, [r3, #0]
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	655a      	str	r2, [r3, #84]	; 0x54
	defaultState.magic=0xCAFEBABE;
    10c4:	687b      	ldr	r3, [r7, #4]
    10c6:	4a06      	ldr	r2, [pc, #24]	; (10e0 <_ZN17ConfigState_ClassC1Ev+0x60>)
    10c8:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
    10ca:	687b      	ldr	r3, [r7, #4]
    10cc:	4618      	mov	r0, r3
    10ce:	370c      	adds	r7, #12
    10d0:	46bd      	mov	sp, r7
    10d2:	bc80      	pop	{r7}
    10d4:	4770      	bx	lr
    10d6:	bf00      	nop
    10d8:	0002069c 	.word	0x0002069c
    10dc:	00021fac 	.word	0x00021fac
    10e0:	cafebabe 	.word	0xcafebabe

000010e4 <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
    10e4:	b480      	push	{r7}
    10e6:	b083      	sub	sp, #12
    10e8:	af00      	add	r7, sp, #0
    10ea:	6078      	str	r0, [r7, #4]
    10ec:	4a04      	ldr	r2, [pc, #16]	; (1100 <_ZN17ConfigState_ClassD1Ev+0x1c>)
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	4618      	mov	r0, r3
    10f6:	370c      	adds	r7, #12
    10f8:	46bd      	mov	sp, r7
    10fa:	bc80      	pop	{r7}
    10fc:	4770      	bx	lr
    10fe:	bf00      	nop
    1100:	0002069c 	.word	0x0002069c

00001104 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb>:

void ConfigState_Class::SetFactoryDefaults(uint32_t subPartNumber, bool config, bool cycles)
{
    1104:	b580      	push	{r7, lr}
    1106:	b084      	sub	sp, #16
    1108:	af00      	add	r7, sp, #0
    110a:	60f8      	str	r0, [r7, #12]
    110c:	60b9      	str	r1, [r7, #8]
    110e:	4611      	mov	r1, r2
    1110:	461a      	mov	r2, r3
    1112:	460b      	mov	r3, r1
    1114:	71fb      	strb	r3, [r7, #7]
    1116:	4613      	mov	r3, r2
    1118:	71bb      	strb	r3, [r7, #6]
	
	if (config)
    111a:	79fb      	ldrb	r3, [r7, #7]
    111c:	2b00      	cmp	r3, #0
    111e:	d00f      	beq.n	1140 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x3c>
	{
		memcpy(&configuration, &factoryDefaultsConfiguration, sizeof(configuration));
    1120:	68fb      	ldr	r3, [r7, #12]
    1122:	336c      	adds	r3, #108	; 0x6c
    1124:	22ac      	movs	r2, #172	; 0xac
    1126:	4908      	ldr	r1, [pc, #32]	; (1148 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x44>)
    1128:	4618      	mov	r0, r3
    112a:	4b08      	ldr	r3, [pc, #32]	; (114c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x48>)
    112c:	4798      	blx	r3
		configuration.commons.subPartNumber = subPartNumber;
    112e:	68fb      	ldr	r3, [r7, #12]
    1130:	68ba      	ldr	r2, [r7, #8]
    1132:	679a      	str	r2, [r3, #120]	; 0x78
		memory.writeConfigurationDataArea(configuration);
    1134:	68fb      	ldr	r3, [r7, #12]
    1136:	336c      	adds	r3, #108	; 0x6c
    1138:	4619      	mov	r1, r3
    113a:	4805      	ldr	r0, [pc, #20]	; (1150 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x4c>)
    113c:	4b05      	ldr	r3, [pc, #20]	; (1154 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x50>)
    113e:	4798      	blx	r3
	}
	
	
}
    1140:	bf00      	nop
    1142:	3710      	adds	r7, #16
    1144:	46bd      	mov	sp, r7
    1146:	bd80      	pop	{r7, pc}
    1148:	00020290 	.word	0x00020290
    114c:	0001c485 	.word	0x0001c485
    1150:	20002be0 	.word	0x20002be0
    1154:	00002e4d 	.word	0x00002e4d

00001158 <_ZN17ConfigState_Class15SetInitialStateEv>:


uint32_t ConfigState_Class::SetInitialState(){
    1158:	b580      	push	{r7, lr}
    115a:	b084      	sub	sp, #16
    115c:	af00      	add	r7, sp, #0
    115e:	6078      	str	r0, [r7, #4]
		uint32_t	r;
		r=memory.ReadApplicationState(lastHVACState);
    1160:	687b      	ldr	r3, [r7, #4]
    1162:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    1166:	4619      	mov	r1, r3
    1168:	4823      	ldr	r0, [pc, #140]	; (11f8 <_ZN17ConfigState_Class15SetInitialStateEv+0xa0>)
    116a:	4b24      	ldr	r3, [pc, #144]	; (11fc <_ZN17ConfigState_Class15SetInitialStateEv+0xa4>)
    116c:	4798      	blx	r3
    116e:	60f8      	str	r0, [r7, #12]
		if (memory.IsStateDataValid(lastHVACState))
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    1176:	4619      	mov	r1, r3
    1178:	4821      	ldr	r0, [pc, #132]	; (1200 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
    117a:	4b22      	ldr	r3, [pc, #136]	; (1204 <_ZN17ConfigState_Class15SetInitialStateEv+0xac>)
    117c:	4798      	blx	r3
    117e:	4603      	mov	r3, r0
    1180:	2b00      	cmp	r3, #0
    1182:	d007      	beq.n	1194 <_ZN17ConfigState_Class15SetInitialStateEv+0x3c>
		{
				hvac.SetCurrentState(lastHVACState);
    1184:	687b      	ldr	r3, [r7, #4]
    1186:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    118a:	4619      	mov	r1, r3
    118c:	481e      	ldr	r0, [pc, #120]	; (1208 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
    118e:	4b1f      	ldr	r3, [pc, #124]	; (120c <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
    1190:	4798      	blx	r3
    1192:	e02b      	b.n	11ec <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
		} 
		else
		{	
			r=memory.ReadFastApplicationState(lastHVACState);
    1194:	687b      	ldr	r3, [r7, #4]
    1196:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    119a:	4619      	mov	r1, r3
    119c:	481c      	ldr	r0, [pc, #112]	; (1210 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
    119e:	4b1d      	ldr	r3, [pc, #116]	; (1214 <_ZN17ConfigState_Class15SetInitialStateEv+0xbc>)
    11a0:	4798      	blx	r3
    11a2:	60f8      	str	r0, [r7, #12]
			if (memory.IsFastStateDataValid(lastHVACState))
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    11aa:	4619      	mov	r1, r3
    11ac:	4814      	ldr	r0, [pc, #80]	; (1200 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
    11ae:	4b1a      	ldr	r3, [pc, #104]	; (1218 <_ZN17ConfigState_Class15SetInitialStateEv+0xc0>)
    11b0:	4798      	blx	r3
    11b2:	4603      	mov	r3, r0
    11b4:	2b00      	cmp	r3, #0
    11b6:	d00e      	beq.n	11d6 <_ZN17ConfigState_Class15SetInitialStateEv+0x7e>
			{
				hvac.SetCurrentState(lastHVACState);
    11b8:	687b      	ldr	r3, [r7, #4]
    11ba:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    11be:	4619      	mov	r1, r3
    11c0:	4811      	ldr	r0, [pc, #68]	; (1208 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
    11c2:	4b12      	ldr	r3, [pc, #72]	; (120c <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
    11c4:	4798      	blx	r3
				memory.SaveApplicationState(lastHVACState);
    11c6:	687b      	ldr	r3, [r7, #4]
    11c8:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
    11cc:	4619      	mov	r1, r3
    11ce:	4813      	ldr	r0, [pc, #76]	; (121c <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
    11d0:	4b13      	ldr	r3, [pc, #76]	; (1220 <_ZN17ConfigState_Class15SetInitialStateEv+0xc8>)
    11d2:	4798      	blx	r3
    11d4:	e00a      	b.n	11ec <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
			} 
			else
			{
				hvac.SetDefaultState();
    11d6:	4813      	ldr	r0, [pc, #76]	; (1224 <_ZN17ConfigState_Class15SetInitialStateEv+0xcc>)
    11d8:	4b13      	ldr	r3, [pc, #76]	; (1228 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
    11da:	4798      	blx	r3
				memory.WriteValidApplicationState(hvac.defaultState);
    11dc:	4913      	ldr	r1, [pc, #76]	; (122c <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
    11de:	480f      	ldr	r0, [pc, #60]	; (121c <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
    11e0:	4b13      	ldr	r3, [pc, #76]	; (1230 <_ZN17ConfigState_Class15SetInitialStateEv+0xd8>)
    11e2:	4798      	blx	r3
				memory.WriteFastCurrentState(hvac.defaultState);
    11e4:	4911      	ldr	r1, [pc, #68]	; (122c <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
    11e6:	480a      	ldr	r0, [pc, #40]	; (1210 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
    11e8:	4b12      	ldr	r3, [pc, #72]	; (1234 <_ZN17ConfigState_Class15SetInitialStateEv+0xdc>)
    11ea:	4798      	blx	r3
			}
					
		
		}

		return r;
    11ec:	68fb      	ldr	r3, [r7, #12]
	};
    11ee:	4618      	mov	r0, r3
    11f0:	3710      	adds	r7, #16
    11f2:	46bd      	mov	sp, r7
    11f4:	bd80      	pop	{r7, pc}
    11f6:	bf00      	nop
    11f8:	20002d74 	.word	0x20002d74
    11fc:	00002c8d 	.word	0x00002c8d
    1200:	20002be0 	.word	0x20002be0
    1204:	00002ef9 	.word	0x00002ef9
    1208:	200081c4 	.word	0x200081c4
    120c:	0000429d 	.word	0x0000429d
    1210:	20002d64 	.word	0x20002d64
    1214:	00001aa9 	.word	0x00001aa9
    1218:	00002f3d 	.word	0x00002f3d
    121c:	200026f4 	.word	0x200026f4
    1220:	00002829 	.word	0x00002829
    1224:	200083dc 	.word	0x200083dc
    1228:	0000143d 	.word	0x0000143d
    122c:	200083e0 	.word	0x200083e0
    1230:	0000273d 	.word	0x0000273d
    1234:	00001af1 	.word	0x00001af1

00001238 <_ZN17ConfigState_Class22UpdateStatusArincLabelEv>:
	
uint32_t	ConfigState_Class::UpdateStatusArincLabel(void){
    1238:	b480      	push	{r7}
    123a:	b085      	sub	sp, #20
    123c:	af00      	add	r7, sp, #0
    123e:	6078      	str	r0, [r7, #4]
	uint32_t s=0;
    1240:	2300      	movs	r3, #0
    1242:	60fb      	str	r3, [r7, #12]
	AcknoledgeStatus as=hvac.hvacState->arincStatus;
    1244:	4b19      	ldr	r3, [pc, #100]	; (12ac <_ZN17ConfigState_Class22UpdateStatusArincLabelEv+0x74>)
    1246:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    124a:	69db      	ldr	r3, [r3, #28]
    124c:	60bb      	str	r3, [r7, #8]
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    124e:	7a3b      	ldrb	r3, [r7, #8]
    1250:	461a      	mov	r2, r3
    1252:	7a7b      	ldrb	r3, [r7, #9]
    1254:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1258:	b2db      	uxtb	r3, r3
    125a:	009b      	lsls	r3, r3, #2
    125c:	431a      	orrs	r2, r3
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
    125e:	7a7b      	ldrb	r3, [r7, #9]
    1260:	f3c3 0340 	ubfx	r3, r3, #1, #1
    1264:	b2db      	uxtb	r3, r3
    1266:	00db      	lsls	r3, r3, #3
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    1268:	431a      	orrs	r2, r3
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
    126a:	7a7b      	ldrb	r3, [r7, #9]
    126c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    1270:	b2db      	uxtb	r3, r3
    1272:	011b      	lsls	r3, r3, #4
    1274:	431a      	orrs	r2, r3
	//|(((uint32_t)0x1d)<<9)
	|(((uint32_t)as.statusFV)<<5)|(((uint32_t)as.DEFOG)<<7);
    1276:	7abb      	ldrb	r3, [r7, #10]
    1278:	015b      	lsls	r3, r3, #5
    127a:	431a      	orrs	r2, r3
    127c:	7afb      	ldrb	r3, [r7, #11]
    127e:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1282:	b2db      	uxtb	r3, r3
    1284:	01db      	lsls	r3, r3, #7
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    1286:	4313      	orrs	r3, r2
    1288:	60fb      	str	r3, [r7, #12]
	lastAcknowledgeStatus=acknowledgeStatus;
    128a:	687b      	ldr	r3, [r7, #4]
    128c:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
    1290:	687b      	ldr	r3, [r7, #4]
    1292:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	acknowledgeStatus=s;
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	68fa      	ldr	r2, [r7, #12]
    129a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	return s;
    129e:	68fb      	ldr	r3, [r7, #12]
}	
    12a0:	4618      	mov	r0, r3
    12a2:	3714      	adds	r7, #20
    12a4:	46bd      	mov	sp, r7
    12a6:	bc80      	pop	{r7}
    12a8:	4770      	bx	lr
    12aa:	bf00      	nop
    12ac:	200081c4 	.word	0x200081c4

000012b0 <_ZN17ConfigState_Class20GetAcknowledgeStatusEv>:

uint32_t ConfigState_Class::GetAcknowledgeStatus(void){
    12b0:	b480      	push	{r7}
    12b2:	b083      	sub	sp, #12
    12b4:	af00      	add	r7, sp, #0
    12b6:	6078      	str	r0, [r7, #4]
	
	return acknowledgeStatus;
    12b8:	687b      	ldr	r3, [r7, #4]
    12ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
}
    12be:	4618      	mov	r0, r3
    12c0:	370c      	adds	r7, #12
    12c2:	46bd      	mov	sp, r7
    12c4:	bc80      	pop	{r7}
    12c6:	4770      	bx	lr

000012c8 <_ZN17ConfigState_Class25IsStatusArinclabelChangedEv>:
bool  ConfigState_Class::IsStatusArinclabelChanged(void){
    12c8:	b580      	push	{r7, lr}
    12ca:	b082      	sub	sp, #8
    12cc:	af00      	add	r7, sp, #0
    12ce:	6078      	str	r0, [r7, #4]
	UpdateStatusArincLabel();
    12d0:	6878      	ldr	r0, [r7, #4]
    12d2:	4b08      	ldr	r3, [pc, #32]	; (12f4 <_ZN17ConfigState_Class25IsStatusArinclabelChangedEv+0x2c>)
    12d4:	4798      	blx	r3
	return lastAcknowledgeStatus!=acknowledgeStatus;
    12d6:	687b      	ldr	r3, [r7, #4]
    12d8:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
    12dc:	687b      	ldr	r3, [r7, #4]
    12de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    12e2:	429a      	cmp	r2, r3
    12e4:	bf14      	ite	ne
    12e6:	2301      	movne	r3, #1
    12e8:	2300      	moveq	r3, #0
    12ea:	b2db      	uxtb	r3, r3
}
    12ec:	4618      	mov	r0, r3
    12ee:	3708      	adds	r7, #8
    12f0:	46bd      	mov	sp, r7
    12f2:	bd80      	pop	{r7, pc}
    12f4:	00001239 	.word	0x00001239

000012f8 <_ZN17ConfigState_Class10PrintStateEv>:
		st=is;
	}
	s=uint32_t(st.rawStatus);
	return	s;
}
void	ConfigState_Class::PrintState(void){
    12f8:	b580      	push	{r7, lr}
    12fa:	b0a2      	sub	sp, #136	; 0x88
    12fc:	af00      	add	r7, sp, #0
    12fe:	6078      	str	r0, [r7, #4]
	HVACState	hs;
	bool	done=false;
    1300:	2300      	movs	r3, #0
    1302:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	hvac.GetCurrentState(hs);
    1306:	f107 030c 	add.w	r3, r7, #12
    130a:	4619      	mov	r1, r3
    130c:	483d      	ldr	r0, [pc, #244]	; (1404 <_ZN17ConfigState_Class10PrintStateEv+0x10c>)
    130e:	4b3e      	ldr	r3, [pc, #248]	; (1408 <_ZN17ConfigState_Class10PrintStateEv+0x110>)
    1310:	4798      	blx	r3
	uint32_t	nowTime=(uint32_t)hs.now;
    1312:	693b      	ldr	r3, [r7, #16]
    1314:	60bb      	str	r3, [r7, #8]
	char *act=ctime((time_t *)&nowTime);
    1316:	f107 0308 	add.w	r3, r7, #8
    131a:	4618      	mov	r0, r3
    131c:	4b3b      	ldr	r3, [pc, #236]	; (140c <_ZN17ConfigState_Class10PrintStateEv+0x114>)
    131e:	4798      	blx	r3
    1320:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	k=sizeof(printableNamesHVACState)/(sizeof(char*));
    1324:	687b      	ldr	r3, [r7, #4]
    1326:	2206      	movs	r2, #6
    1328:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
	for (uint8_t ii = 0; ii < k; ii++)
    132c:	2300      	movs	r3, #0
    132e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    1332:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    1336:	687a      	ldr	r2, [r7, #4]
    1338:	f892 2296 	ldrb.w	r2, [r2, #662]	; 0x296
    133c:	4293      	cmp	r3, r2
    133e:	da5d      	bge.n	13fc <_ZN17ConfigState_Class10PrintStateEv+0x104>
	{
	
		usb<<printableNamesHVACState[ii]<<" : ";
    1340:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    1344:	009b      	lsls	r3, r3, #2
    1346:	4a32      	ldr	r2, [pc, #200]	; (1410 <_ZN17ConfigState_Class10PrintStateEv+0x118>)
    1348:	4413      	add	r3, r2
    134a:	4619      	mov	r1, r3
    134c:	4831      	ldr	r0, [pc, #196]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    134e:	4b32      	ldr	r3, [pc, #200]	; (1418 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    1350:	4798      	blx	r3
    1352:	4603      	mov	r3, r0
    1354:	4931      	ldr	r1, [pc, #196]	; (141c <_ZN17ConfigState_Class10PrintStateEv+0x124>)
    1356:	4618      	mov	r0, r3
    1358:	4b31      	ldr	r3, [pc, #196]	; (1420 <_ZN17ConfigState_Class10PrintStateEv+0x128>)
    135a:	4798      	blx	r3
	
		switch (ii)
    135c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    1360:	2b05      	cmp	r3, #5
    1362:	d83b      	bhi.n	13dc <_ZN17ConfigState_Class10PrintStateEv+0xe4>
    1364:	a201      	add	r2, pc, #4	; (adr r2, 136c <_ZN17ConfigState_Class10PrintStateEv+0x74>)
    1366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    136a:	bf00      	nop
    136c:	00001385 	.word	0x00001385
    1370:	00001397 	.word	0x00001397
    1374:	000013a9 	.word	0x000013a9
    1378:	000013e7 	.word	0x000013e7
    137c:	000013bb 	.word	0x000013bb
    1380:	000013c7 	.word	0x000013c7
		{
			case 0:
				usb<<(uint32_t)hs.currentState;
    1384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1386:	677b      	str	r3, [r7, #116]	; 0x74
    1388:	f107 0374 	add.w	r3, r7, #116	; 0x74
    138c:	4619      	mov	r1, r3
    138e:	4821      	ldr	r0, [pc, #132]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    1390:	4b24      	ldr	r3, [pc, #144]	; (1424 <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
    1392:	4798      	blx	r3
			/* Your code here */
			break;
    1394:	e028      	b.n	13e8 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			case 1:
				usb<<(uint32_t)hs.cycleDuration;
    1396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1398:	67bb      	str	r3, [r7, #120]	; 0x78
    139a:	f107 0378 	add.w	r3, r7, #120	; 0x78
    139e:	4619      	mov	r1, r3
    13a0:	481c      	ldr	r0, [pc, #112]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13a2:	4b20      	ldr	r3, [pc, #128]	; (1424 <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
    13a4:	4798      	blx	r3
			/* Your code here */
			break;
    13a6:	e01f      	b.n	13e8 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			case 2:
				usb<<(uint32_t)hs.remainingTime;
    13a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    13aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    13ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
    13b0:	4619      	mov	r1, r3
    13b2:	4818      	ldr	r0, [pc, #96]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13b4:	4b1b      	ldr	r3, [pc, #108]	; (1424 <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
    13b6:	4798      	blx	r3
			/* Your code here */
			break;
    13b8:	e016      	b.n	13e8 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
				//usb<<(uint32_t)hs.targetPower;
			/* Your code here */
			break;
			case 4:
				
				usb.print(act);
    13ba:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    13be:	4815      	ldr	r0, [pc, #84]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13c0:	4b19      	ldr	r3, [pc, #100]	; (1428 <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    13c2:	4798      	blx	r3
			/* Your code here */
			break;
    13c4:	e010      	b.n	13e8 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			case 5:
				usb<<"0x";
    13c6:	4919      	ldr	r1, [pc, #100]	; (142c <_ZN17ConfigState_Class10PrintStateEv+0x134>)
    13c8:	4812      	ldr	r0, [pc, #72]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13ca:	4b19      	ldr	r3, [pc, #100]	; (1430 <_ZN17ConfigState_Class10PrintStateEv+0x138>)
    13cc:	4798      	blx	r3
				usb.print(hs.magic,HEX);
    13ce:	68fb      	ldr	r3, [r7, #12]
    13d0:	2210      	movs	r2, #16
    13d2:	4619      	mov	r1, r3
    13d4:	480f      	ldr	r0, [pc, #60]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13d6:	4b17      	ldr	r3, [pc, #92]	; (1434 <_ZN17ConfigState_Class10PrintStateEv+0x13c>)
    13d8:	4798      	blx	r3
			
				/* Your code here */
			break;
    13da:	e005      	b.n	13e8 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			default:
				i=sizeof(printableNamesHVACState);
    13dc:	687b      	ldr	r3, [r7, #4]
    13de:	2218      	movs	r2, #24
    13e0:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
				
			/* Your code here */
			break;
    13e4:	e000      	b.n	13e8 <_ZN17ConfigState_Class10PrintStateEv+0xf0>
			break;
    13e6:	bf00      	nop
		}
		usb<<NEWLINE;
    13e8:	4913      	ldr	r1, [pc, #76]	; (1438 <_ZN17ConfigState_Class10PrintStateEv+0x140>)
    13ea:	480a      	ldr	r0, [pc, #40]	; (1414 <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    13ec:	4b10      	ldr	r3, [pc, #64]	; (1430 <_ZN17ConfigState_Class10PrintStateEv+0x138>)
    13ee:	4798      	blx	r3
	for (uint8_t ii = 0; ii < k; ii++)
    13f0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    13f4:	3301      	adds	r3, #1
    13f6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    13fa:	e79a      	b.n	1332 <_ZN17ConfigState_Class10PrintStateEv+0x3a>
			
	}
	
}
    13fc:	bf00      	nop
    13fe:	3788      	adds	r7, #136	; 0x88
    1400:	46bd      	mov	sp, r7
    1402:	bd80      	pop	{r7, pc}
    1404:	200081c4 	.word	0x200081c4
    1408:	00004249 	.word	0x00004249
    140c:	0001c19d 	.word	0x0001c19d
    1410:	20000050 	.word	0x20000050
    1414:	2000a4d0 	.word	0x2000a4d0
    1418:	00001461 	.word	0x00001461
    141c:	00020688 	.word	0x00020688
    1420:	00001485 	.word	0x00001485
    1424:	000014a5 	.word	0x000014a5
    1428:	000185e5 	.word	0x000185e5
    142c:	0002068c 	.word	0x0002068c
    1430:	00000c99 	.word	0x00000c99
    1434:	0001862d 	.word	0x0001862d
    1438:	00020690 	.word	0x00020690

0000143c <_ZN17ConfigState_Class15SetDefaultStateEv>:
void	ConfigState_Class::SetDefaultState(void){
    143c:	b580      	push	{r7, lr}
    143e:	b082      	sub	sp, #8
    1440:	af00      	add	r7, sp, #0
    1442:	6078      	str	r0, [r7, #4]
	hvac.SetCurrentState(defaultState);
    1444:	687b      	ldr	r3, [r7, #4]
    1446:	3304      	adds	r3, #4
    1448:	4619      	mov	r1, r3
    144a:	4803      	ldr	r0, [pc, #12]	; (1458 <_ZN17ConfigState_Class15SetDefaultStateEv+0x1c>)
    144c:	4b03      	ldr	r3, [pc, #12]	; (145c <_ZN17ConfigState_Class15SetDefaultStateEv+0x20>)
    144e:	4798      	blx	r3

}
    1450:	bf00      	nop
    1452:	3708      	adds	r7, #8
    1454:	46bd      	mov	sp, r7
    1456:	bd80      	pop	{r7, pc}
    1458:	200081c4 	.word	0x200081c4
    145c:	0000429d 	.word	0x0000429d

00001460 <_ZlsIPKcER5PrintS3_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1460:	b580      	push	{r7, lr}
    1462:	b082      	sub	sp, #8
    1464:	af00      	add	r7, sp, #0
    1466:	6078      	str	r0, [r7, #4]
    1468:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    146a:	683b      	ldr	r3, [r7, #0]
    146c:	681b      	ldr	r3, [r3, #0]
    146e:	4619      	mov	r1, r3
    1470:	6878      	ldr	r0, [r7, #4]
    1472:	4b03      	ldr	r3, [pc, #12]	; (1480 <_ZlsIPKcER5PrintS3_RKT_+0x20>)
    1474:	4798      	blx	r3
    1476:	687b      	ldr	r3, [r7, #4]
    1478:	4618      	mov	r0, r3
    147a:	3708      	adds	r7, #8
    147c:	46bd      	mov	sp, r7
    147e:	bd80      	pop	{r7, pc}
    1480:	000185e5 	.word	0x000185e5

00001484 <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1484:	b580      	push	{r7, lr}
    1486:	b082      	sub	sp, #8
    1488:	af00      	add	r7, sp, #0
    148a:	6078      	str	r0, [r7, #4]
    148c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    148e:	6839      	ldr	r1, [r7, #0]
    1490:	6878      	ldr	r0, [r7, #4]
    1492:	4b03      	ldr	r3, [pc, #12]	; (14a0 <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
    1494:	4798      	blx	r3
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	4618      	mov	r0, r3
    149a:	3708      	adds	r7, #8
    149c:	46bd      	mov	sp, r7
    149e:	bd80      	pop	{r7, pc}
    14a0:	000185e5 	.word	0x000185e5

000014a4 <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    14a4:	b580      	push	{r7, lr}
    14a6:	b082      	sub	sp, #8
    14a8:	af00      	add	r7, sp, #0
    14aa:	6078      	str	r0, [r7, #4]
    14ac:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    14ae:	683b      	ldr	r3, [r7, #0]
    14b0:	681b      	ldr	r3, [r3, #0]
    14b2:	220a      	movs	r2, #10
    14b4:	4619      	mov	r1, r3
    14b6:	6878      	ldr	r0, [r7, #4]
    14b8:	4b03      	ldr	r3, [pc, #12]	; (14c8 <_ZlsImER5PrintS1_RKT_+0x24>)
    14ba:	4798      	blx	r3
    14bc:	687b      	ldr	r3, [r7, #4]
    14be:	4618      	mov	r0, r3
    14c0:	3708      	adds	r7, #8
    14c2:	46bd      	mov	sp, r7
    14c4:	bd80      	pop	{r7, pc}
    14c6:	bf00      	nop
    14c8:	0001862d 	.word	0x0001862d

000014cc <_ZN11CRC32_ClassC1Ev>:

#include "CRC32_Class.h"
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
    14cc:	b480      	push	{r7}
    14ce:	b083      	sub	sp, #12
    14d0:	af00      	add	r7, sp, #0
    14d2:	6078      	str	r0, [r7, #4]
{
} //CRC32_Class
    14d4:	687b      	ldr	r3, [r7, #4]
    14d6:	4618      	mov	r0, r3
    14d8:	370c      	adds	r7, #12
    14da:	46bd      	mov	sp, r7
    14dc:	bc80      	pop	{r7}
    14de:	4770      	bx	lr

000014e0 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
    14e0:	b480      	push	{r7}
    14e2:	b083      	sub	sp, #12
    14e4:	af00      	add	r7, sp, #0
    14e6:	6078      	str	r0, [r7, #4]
{
} //~CRC32_Class
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	4618      	mov	r0, r3
    14ec:	370c      	adds	r7, #12
    14ee:	46bd      	mov	sp, r7
    14f0:	bc80      	pop	{r7}
    14f2:	4770      	bx	lr

000014f4 <_ZN11CRC32_Class4InitEm>:

uint32_t	CRC32_Class::Init(uint32_t refCRC/* =0xFFFFFFFF */){
    14f4:	b580      	push	{r7, lr}
    14f6:	b082      	sub	sp, #8
    14f8:	af00      	add	r7, sp, #0
    14fa:	6078      	str	r0, [r7, #4]
    14fc:	6039      	str	r1, [r7, #0]
	crc_sync_enable(&CRC_CALC);
    14fe:	4806      	ldr	r0, [pc, #24]	; (1518 <_ZN11CRC32_Class4InitEm+0x24>)
    1500:	4b06      	ldr	r3, [pc, #24]	; (151c <_ZN11CRC32_Class4InitEm+0x28>)
    1502:	4798      	blx	r3
	refCRC32=refCRC;
    1504:	687b      	ldr	r3, [r7, #4]
    1506:	683a      	ldr	r2, [r7, #0]
    1508:	601a      	str	r2, [r3, #0]
	return	refCRC32;
    150a:	687b      	ldr	r3, [r7, #4]
    150c:	681b      	ldr	r3, [r3, #0]
}
    150e:	4618      	mov	r0, r3
    1510:	3708      	adds	r7, #8
    1512:	46bd      	mov	sp, r7
    1514:	bd80      	pop	{r7, pc}
    1516:	bf00      	nop
    1518:	2000a94c 	.word	0x2000a94c
    151c:	00006705 	.word	0x00006705

00001520 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    1520:	b590      	push	{r4, r7, lr}
    1522:	b083      	sub	sp, #12
    1524:	af00      	add	r7, sp, #0
    1526:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
    1528:	4b07      	ldr	r3, [pc, #28]	; (1548 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
    152a:	6878      	ldr	r0, [r7, #4]
    152c:	4798      	blx	r3
    152e:	4603      	mov	r3, r0
    1530:	460c      	mov	r4, r1
    1532:	4618      	mov	r0, r3
    1534:	4621      	mov	r1, r4
    1536:	4b05      	ldr	r3, [pc, #20]	; (154c <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x2c>)
    1538:	4798      	blx	r3
    153a:	4603      	mov	r3, r0
    153c:	460c      	mov	r4, r1
    153e:	4618      	mov	r0, r3
    1540:	4621      	mov	r1, r4
    1542:	370c      	adds	r7, #12
    1544:	46bd      	mov	sp, r7
    1546:	bd90      	pop	{r4, r7, pc}
    1548:	0001b219 	.word	0x0001b219
    154c:	00019d31 	.word	0x00019d31

00001550 <_ZN11CRC32_Class12CalculateCRCEPmm>:
	uint32_t	lenght32=(uint32_t)floor(len/4);
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
    1550:	b590      	push	{r4, r7, lr}
    1552:	b087      	sub	sp, #28
    1554:	af00      	add	r7, sp, #0
    1556:	60f8      	str	r0, [r7, #12]
    1558:	60b9      	str	r1, [r7, #8]
    155a:	607a      	str	r2, [r7, #4]
	uint32_t	lenght32=(uint32_t)floor(len/4);
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	089b      	lsrs	r3, r3, #2
    1560:	4618      	mov	r0, r3
    1562:	4b0f      	ldr	r3, [pc, #60]	; (15a0 <_ZN11CRC32_Class12CalculateCRCEPmm+0x50>)
    1564:	4798      	blx	r3
    1566:	460a      	mov	r2, r1
    1568:	4601      	mov	r1, r0
    156a:	4b0e      	ldr	r3, [pc, #56]	; (15a4 <_ZN11CRC32_Class12CalculateCRCEPmm+0x54>)
    156c:	4608      	mov	r0, r1
    156e:	4611      	mov	r1, r2
    1570:	4798      	blx	r3
    1572:	4603      	mov	r3, r0
    1574:	617b      	str	r3, [r7, #20]
	uint32_t crc=Init();
    1576:	f04f 31ff 	mov.w	r1, #4294967295
    157a:	68f8      	ldr	r0, [r7, #12]
    157c:	4b0a      	ldr	r3, [pc, #40]	; (15a8 <_ZN11CRC32_Class12CalculateCRCEPmm+0x58>)
    157e:	4798      	blx	r3
    1580:	4603      	mov	r3, r0
    1582:	613b      	str	r3, [r7, #16]
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
    1584:	f107 0310 	add.w	r3, r7, #16
    1588:	697a      	ldr	r2, [r7, #20]
    158a:	68b9      	ldr	r1, [r7, #8]
    158c:	4807      	ldr	r0, [pc, #28]	; (15ac <_ZN11CRC32_Class12CalculateCRCEPmm+0x5c>)
    158e:	4c08      	ldr	r4, [pc, #32]	; (15b0 <_ZN11CRC32_Class12CalculateCRCEPmm+0x60>)
    1590:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
    1592:	693b      	ldr	r3, [r7, #16]
    1594:	43db      	mvns	r3, r3
    1596:	4618      	mov	r0, r3
    1598:	371c      	adds	r7, #28
    159a:	46bd      	mov	sp, r7
    159c:	bd90      	pop	{r4, r7, pc}
    159e:	bf00      	nop
    15a0:	00001521 	.word	0x00001521
    15a4:	0001b865 	.word	0x0001b865
    15a8:	000014f5 	.word	0x000014f5
    15ac:	2000a94c 	.word	0x2000a94c
    15b0:	00006741 	.word	0x00006741

000015b4 <_ZN15DataLoger_ClassC1Ev>:
#include "ConfigurationData.h"
#include "FlashHandler_Class.h"
#include "N25Q256_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
    15b4:	b580      	push	{r7, lr}
    15b6:	b082      	sub	sp, #8
    15b8:	af00      	add	r7, sp, #0
    15ba:	6078      	str	r0, [r7, #4]
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	4618      	mov	r0, r3
    15c0:	4b06      	ldr	r3, [pc, #24]	; (15dc <_ZN15DataLoger_ClassC1Ev+0x28>)
    15c2:	4798      	blx	r3
    15c4:	687b      	ldr	r3, [r7, #4]
    15c6:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
    15ca:	4618      	mov	r0, r3
    15cc:	4b04      	ldr	r3, [pc, #16]	; (15e0 <_ZN15DataLoger_ClassC1Ev+0x2c>)
    15ce:	4798      	blx	r3
{
} //DataLoger_Class
    15d0:	687b      	ldr	r3, [r7, #4]
    15d2:	4618      	mov	r0, r3
    15d4:	3708      	adds	r7, #8
    15d6:	46bd      	mov	sp, r7
    15d8:	bd80      	pop	{r7, pc}
    15da:	bf00      	nop
    15dc:	00016c91 	.word	0x00016c91
    15e0:	00001619 	.word	0x00001619

000015e4 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
    15e4:	b580      	push	{r7, lr}
    15e6:	b082      	sub	sp, #8
    15e8:	af00      	add	r7, sp, #0
    15ea:	6078      	str	r0, [r7, #4]
    15ec:	687b      	ldr	r3, [r7, #4]
    15ee:	4618      	mov	r0, r3
    15f0:	4b03      	ldr	r3, [pc, #12]	; (1600 <_ZN15DataLoger_ClassD1Ev+0x1c>)
    15f2:	4798      	blx	r3
{
} //~DataLoger_Class
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	4618      	mov	r0, r3
    15f8:	3708      	adds	r7, #8
    15fa:	46bd      	mov	sp, r7
    15fc:	bd80      	pop	{r7, pc}
    15fe:	bf00      	nop
    1600:	00016ccd 	.word	0x00016ccd

00001604 <_ZN15DataLoger_Class13LogResetEventEv>:
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)PTR_CONFIG_DATA(cd),add,sizeof(dataOnMemory));
	
	return	r;
}

uint32_t	DataLoger_Class::LogResetEvent(void){
    1604:	b480      	push	{r7}
    1606:	b083      	sub	sp, #12
    1608:	af00      	add	r7, sp, #0
    160a:	6078      	str	r0, [r7, #4]
	return 0;
    160c:	2300      	movs	r3, #0
    160e:	4618      	mov	r0, r3
    1610:	370c      	adds	r7, #12
    1612:	46bd      	mov	sp, r7
    1614:	bc80      	pop	{r7}
    1616:	4770      	bx	lr

00001618 <_ZN11RingBufferNILi512EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
    1618:	b580      	push	{r7, lr}
    161a:	b082      	sub	sp, #8
    161c:	af00      	add	r7, sp, #0
    161e:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	f44f 7200 	mov.w	r2, #512	; 0x200
    1626:	2100      	movs	r1, #0
    1628:	4618      	mov	r0, r3
    162a:	4b05      	ldr	r3, [pc, #20]	; (1640 <_ZN11RingBufferNILi512EEC1Ev+0x28>)
    162c:	4798      	blx	r3
    clear();
    162e:	6878      	ldr	r0, [r7, #4]
    1630:	4b04      	ldr	r3, [pc, #16]	; (1644 <_ZN11RingBufferNILi512EEC1Ev+0x2c>)
    1632:	4798      	blx	r3
}
    1634:	687b      	ldr	r3, [r7, #4]
    1636:	4618      	mov	r0, r3
    1638:	3708      	adds	r7, #8
    163a:	46bd      	mov	sp, r7
    163c:	bd80      	pop	{r7, pc}
    163e:	bf00      	nop
    1640:	0001c5b9 	.word	0x0001c5b9
    1644:	00001649 	.word	0x00001649

00001648 <_ZN11RingBufferNILi512EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
    1648:	b480      	push	{r7}
    164a:	b083      	sub	sp, #12
    164c:	af00      	add	r7, sp, #0
    164e:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	2200      	movs	r2, #0
    1654:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  _iTail = 0;
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	2200      	movs	r2, #0
    165c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
    1660:	bf00      	nop
    1662:	370c      	adds	r7, #12
    1664:	46bd      	mov	sp, r7
    1666:	bc80      	pop	{r7}
    1668:	4770      	bx	lr
	...

0000166c <_ZN14DateTime_ClassC1Ev>:

#include "DateTime_Class.h"
#include "FastStorage_Class.h"

// default constructor
DateTime_Class::DateTime_Class()
    166c:	b580      	push	{r7, lr}
    166e:	b082      	sub	sp, #8
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
    1674:	687b      	ldr	r3, [r7, #4]
    1676:	33a8      	adds	r3, #168	; 0xa8
    1678:	4618      	mov	r0, r3
    167a:	4b07      	ldr	r3, [pc, #28]	; (1698 <_ZN14DateTime_ClassC1Ev+0x2c>)
    167c:	4798      	blx	r3
    167e:	687b      	ldr	r3, [r7, #4]
    1680:	4618      	mov	r0, r3
    1682:	4b06      	ldr	r3, [pc, #24]	; (169c <_ZN14DateTime_ClassC1Ev+0x30>)
    1684:	4798      	blx	r3
    1686:	4a06      	ldr	r2, [pc, #24]	; (16a0 <_ZN14DateTime_ClassC1Ev+0x34>)
    1688:	687b      	ldr	r3, [r7, #4]
    168a:	601a      	str	r2, [r3, #0]
{
} //DateTime_Class
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	4618      	mov	r0, r3
    1690:	3708      	adds	r7, #8
    1692:	46bd      	mov	sp, r7
    1694:	bd80      	pop	{r7, pc}
    1696:	bf00      	nop
    1698:	00001a41 	.word	0x00001a41
    169c:	000170a1 	.word	0x000170a1
    16a0:	000206a8 	.word	0x000206a8

000016a4 <_ZN14DateTime_ClassD1Ev>:

// default destructor
DateTime_Class::~DateTime_Class()
    16a4:	b580      	push	{r7, lr}
    16a6:	b082      	sub	sp, #8
    16a8:	af00      	add	r7, sp, #0
    16aa:	6078      	str	r0, [r7, #4]
    16ac:	4a08      	ldr	r2, [pc, #32]	; (16d0 <_ZN14DateTime_ClassD1Ev+0x2c>)
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	601a      	str	r2, [r3, #0]
    16b2:	687b      	ldr	r3, [r7, #4]
    16b4:	4618      	mov	r0, r3
    16b6:	4b07      	ldr	r3, [pc, #28]	; (16d4 <_ZN14DateTime_ClassD1Ev+0x30>)
    16b8:	4798      	blx	r3
    16ba:	687b      	ldr	r3, [r7, #4]
    16bc:	33a8      	adds	r3, #168	; 0xa8
    16be:	4618      	mov	r0, r3
    16c0:	4b05      	ldr	r3, [pc, #20]	; (16d8 <_ZN14DateTime_ClassD1Ev+0x34>)
    16c2:	4798      	blx	r3
{
} //~DateTime_Class
    16c4:	687b      	ldr	r3, [r7, #4]
    16c6:	4618      	mov	r0, r3
    16c8:	3708      	adds	r7, #8
    16ca:	46bd      	mov	sp, r7
    16cc:	bd80      	pop	{r7, pc}
    16ce:	bf00      	nop
    16d0:	000206a8 	.word	0x000206a8
    16d4:	00017111 	.word	0x00017111
    16d8:	00001a55 	.word	0x00001a55

000016dc <_ZN14DateTime_Class4InitEv>:

void	DateTime_Class::Init(){
    16dc:	b580      	push	{r7, lr}
    16de:	b084      	sub	sp, #16
    16e0:	af00      	add	r7, sp, #0
    16e2:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&eepromMap->stack;
    16e4:	4b0b      	ldr	r3, [pc, #44]	; (1714 <_ZN14DateTime_Class4InitEv+0x38>)
    16e6:	681b      	ldr	r3, [r3, #0]
    16e8:	3370      	adds	r3, #112	; 0x70
    16ea:	60fb      	str	r3, [r7, #12]
	calendar.SetCalendarStackAddress(add);
    16ec:	68f9      	ldr	r1, [r7, #12]
    16ee:	480a      	ldr	r0, [pc, #40]	; (1718 <_ZN14DateTime_Class4InitEv+0x3c>)
    16f0:	4b0a      	ldr	r3, [pc, #40]	; (171c <_ZN14DateTime_Class4InitEv+0x40>)
    16f2:	4798      	blx	r3
	uint32_t	addTimeLogs=(uint32_t)&eepromMap->timeLogs[0];
    16f4:	4b07      	ldr	r3, [pc, #28]	; (1714 <_ZN14DateTime_Class4InitEv+0x38>)
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	3374      	adds	r3, #116	; 0x74
    16fa:	60bb      	str	r3, [r7, #8]
	calendar.SetCalendarAddress(addTimeLogs);
    16fc:	68b9      	ldr	r1, [r7, #8]
    16fe:	4806      	ldr	r0, [pc, #24]	; (1718 <_ZN14DateTime_Class4InitEv+0x3c>)
    1700:	4b07      	ldr	r3, [pc, #28]	; (1720 <_ZN14DateTime_Class4InitEv+0x44>)
    1702:	4798      	blx	r3
	calendar.Init();
    1704:	4804      	ldr	r0, [pc, #16]	; (1718 <_ZN14DateTime_Class4InitEv+0x3c>)
    1706:	4b07      	ldr	r3, [pc, #28]	; (1724 <_ZN14DateTime_Class4InitEv+0x48>)
    1708:	4798      	blx	r3
	
}
    170a:	bf00      	nop
    170c:	3710      	adds	r7, #16
    170e:	46bd      	mov	sp, r7
    1710:	bd80      	pop	{r7, pc}
    1712:	bf00      	nop
    1714:	20001638 	.word	0x20001638
    1718:	2000a250 	.word	0x2000a250
    171c:	00017a11 	.word	0x00017a11
    1720:	00017a31 	.word	0x00017a31
    1724:	00017139 	.word	0x00017139

00001728 <_Z41__static_initialization_and_destruction_0ii>:

    1728:	b580      	push	{r7, lr}
    172a:	b082      	sub	sp, #8
    172c:	af00      	add	r7, sp, #0
    172e:	6078      	str	r0, [r7, #4]
    1730:	6039      	str	r1, [r7, #0]
    1732:	687b      	ldr	r3, [r7, #4]
    1734:	2b01      	cmp	r3, #1
    1736:	d10c      	bne.n	1752 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1738:	683b      	ldr	r3, [r7, #0]
    173a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    173e:	4293      	cmp	r3, r2
    1740:	d107      	bne.n	1752 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1742:	4806      	ldr	r0, [pc, #24]	; (175c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    1744:	4b06      	ldr	r3, [pc, #24]	; (1760 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    1746:	4798      	blx	r3
    1748:	4a06      	ldr	r2, [pc, #24]	; (1764 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    174a:	4907      	ldr	r1, [pc, #28]	; (1768 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    174c:	4803      	ldr	r0, [pc, #12]	; (175c <_Z41__static_initialization_and_destruction_0ii+0x34>)
    174e:	4b07      	ldr	r3, [pc, #28]	; (176c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1750:	4798      	blx	r3
    1752:	bf00      	nop
    1754:	3708      	adds	r7, #8
    1756:	46bd      	mov	sp, r7
    1758:	bd80      	pop	{r7, pc}
    175a:	bf00      	nop
    175c:	200013f8 	.word	0x200013f8
    1760:	0000166d 	.word	0x0000166d
    1764:	20000000 	.word	0x20000000
    1768:	000016a5 	.word	0x000016a5
    176c:	00019d1d 	.word	0x00019d1d

00001770 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
    1770:	b580      	push	{r7, lr}
    1772:	af00      	add	r7, sp, #0
    1774:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1778:	2001      	movs	r0, #1
    177a:	4b01      	ldr	r3, [pc, #4]	; (1780 <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x10>)
    177c:	4798      	blx	r3
    177e:	bd80      	pop	{r7, pc}
    1780:	00001729 	.word	0x00001729

00001784 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1784:	b580      	push	{r7, lr}
    1786:	b082      	sub	sp, #8
    1788:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    178a:	4b16      	ldr	r3, [pc, #88]	; (17e4 <Reset_Handler+0x60>)
    178c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    178e:	4b16      	ldr	r3, [pc, #88]	; (17e8 <Reset_Handler+0x64>)
    1790:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1792:	687a      	ldr	r2, [r7, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	429a      	cmp	r2, r3
    1798:	d00c      	beq.n	17b4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    179a:	e007      	b.n	17ac <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	1d1a      	adds	r2, r3, #4
    17a0:	603a      	str	r2, [r7, #0]
    17a2:	687a      	ldr	r2, [r7, #4]
    17a4:	1d11      	adds	r1, r2, #4
    17a6:	6079      	str	r1, [r7, #4]
    17a8:	6812      	ldr	r2, [r2, #0]
    17aa:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    17ac:	683b      	ldr	r3, [r7, #0]
    17ae:	4a0f      	ldr	r2, [pc, #60]	; (17ec <Reset_Handler+0x68>)
    17b0:	4293      	cmp	r3, r2
    17b2:	d3f3      	bcc.n	179c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    17b4:	4b0e      	ldr	r3, [pc, #56]	; (17f0 <Reset_Handler+0x6c>)
    17b6:	603b      	str	r3, [r7, #0]
    17b8:	e004      	b.n	17c4 <Reset_Handler+0x40>
                *pDest++ = 0;
    17ba:	683b      	ldr	r3, [r7, #0]
    17bc:	1d1a      	adds	r2, r3, #4
    17be:	603a      	str	r2, [r7, #0]
    17c0:	2200      	movs	r2, #0
    17c2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	4a0b      	ldr	r2, [pc, #44]	; (17f4 <Reset_Handler+0x70>)
    17c8:	4293      	cmp	r3, r2
    17ca:	d3f6      	bcc.n	17ba <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    17cc:	4b0a      	ldr	r3, [pc, #40]	; (17f8 <Reset_Handler+0x74>)
    17ce:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    17d0:	4a0a      	ldr	r2, [pc, #40]	; (17fc <Reset_Handler+0x78>)
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    17d8:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    17da:	4b09      	ldr	r3, [pc, #36]	; (1800 <Reset_Handler+0x7c>)
    17dc:	4798      	blx	r3

        /* Branch to main function */
        main();
    17de:	4b09      	ldr	r3, [pc, #36]	; (1804 <Reset_Handler+0x80>)
    17e0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    17e2:	e7fe      	b.n	17e2 <Reset_Handler+0x5e>
    17e4:	0002273c 	.word	0x0002273c
    17e8:	20000000 	.word	0x20000000
    17ec:	20000c44 	.word	0x20000c44
    17f0:	20000c48 	.word	0x20000c48
    17f4:	2000aa0c 	.word	0x2000aa0c
    17f8:	00000000 	.word	0x00000000
    17fc:	e000ed00 	.word	0xe000ed00
    1800:	0001c1ed 	.word	0x0001c1ed
    1804:	0000223d 	.word	0x0000223d

00001808 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1808:	b480      	push	{r7}
    180a:	af00      	add	r7, sp, #0
        while (1) {
    180c:	e7fe      	b.n	180c <Dummy_Handler+0x4>
	...

00001810 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:


}

// default constructor
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
    1810:	b580      	push	{r7, lr}
    1812:	b082      	sub	sp, #8
    1814:	af00      	add	r7, sp, #0
    1816:	6078      	str	r0, [r7, #4]
    1818:	687b      	ldr	r3, [r7, #4]
    181a:	4618      	mov	r0, r3
    181c:	4b0a      	ldr	r3, [pc, #40]	; (1848 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x38>)
    181e:	4798      	blx	r3
    1820:	687b      	ldr	r3, [r7, #4]
    1822:	3324      	adds	r3, #36	; 0x24
    1824:	4618      	mov	r0, r3
    1826:	4b09      	ldr	r3, [pc, #36]	; (184c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
    1828:	4798      	blx	r3
{
	i2c=&i2cSharedStatic;
    182a:	687b      	ldr	r3, [r7, #4]
    182c:	4a08      	ldr	r2, [pc, #32]	; (1850 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
    182e:	671a      	str	r2, [r3, #112]	; 0x70
	evaporator[0]=&evaporatorFan[0];
    1830:	687b      	ldr	r3, [r7, #4]
    1832:	4a08      	ldr	r2, [pc, #32]	; (1854 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
    1834:	64da      	str	r2, [r3, #76]	; 0x4c
	evaporator[1]=&evaporatorFan[1];
    1836:	687b      	ldr	r3, [r7, #4]
    1838:	4a07      	ldr	r2, [pc, #28]	; (1858 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x48>)
    183a:	651a      	str	r2, [r3, #80]	; 0x50
} //EvaporatorAndCondesatorFans_Class
    183c:	687b      	ldr	r3, [r7, #4]
    183e:	4618      	mov	r0, r3
    1840:	3708      	adds	r7, #8
    1842:	46bd      	mov	sp, r7
    1844:	bd80      	pop	{r7, pc}
    1846:	bf00      	nop
    1848:	000019f9 	.word	0x000019f9
    184c:	00001059 	.word	0x00001059
    1850:	200014b0 	.word	0x200014b0
    1854:	200014c4 	.word	0x200014c4
    1858:	200014e8 	.word	0x200014e8

0000185c <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
    185c:	b580      	push	{r7, lr}
    185e:	b082      	sub	sp, #8
    1860:	af00      	add	r7, sp, #0
    1862:	6078      	str	r0, [r7, #4]
    1864:	687b      	ldr	r3, [r7, #4]
    1866:	3324      	adds	r3, #36	; 0x24
    1868:	4618      	mov	r0, r3
    186a:	4b05      	ldr	r3, [pc, #20]	; (1880 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x24>)
    186c:	4798      	blx	r3
    186e:	687b      	ldr	r3, [r7, #4]
    1870:	4618      	mov	r0, r3
    1872:	4b04      	ldr	r3, [pc, #16]	; (1884 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x28>)
    1874:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
    1876:	687b      	ldr	r3, [r7, #4]
    1878:	4618      	mov	r0, r3
    187a:	3708      	adds	r7, #8
    187c:	46bd      	mov	sp, r7
    187e:	bd80      	pop	{r7, pc}
    1880:	0000106d 	.word	0x0000106d
    1884:	00001a21 	.word	0x00001a21

00001888 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
    1888:	b590      	push	{r4, r7, lr}
    188a:	b083      	sub	sp, #12
    188c:	af00      	add	r7, sp, #0
    188e:	6078      	str	r0, [r7, #4]
    1890:	4c05      	ldr	r4, [pc, #20]	; (18a8 <__tcf_0+0x20>)
    1892:	4b06      	ldr	r3, [pc, #24]	; (18ac <__tcf_0+0x24>)
    1894:	429c      	cmp	r4, r3
    1896:	d004      	beq.n	18a2 <__tcf_0+0x1a>
    1898:	3c24      	subs	r4, #36	; 0x24
    189a:	4620      	mov	r0, r4
    189c:	4b04      	ldr	r3, [pc, #16]	; (18b0 <__tcf_0+0x28>)
    189e:	4798      	blx	r3
    18a0:	e7f7      	b.n	1892 <__tcf_0+0xa>
    18a2:	370c      	adds	r7, #12
    18a4:	46bd      	mov	sp, r7
    18a6:	bd90      	pop	{r4, r7, pc}
    18a8:	2000150c 	.word	0x2000150c
    18ac:	200014c4 	.word	0x200014c4
    18b0:	00001a21 	.word	0x00001a21

000018b4 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    18b4:	b590      	push	{r4, r7, lr}
    18b6:	b083      	sub	sp, #12
    18b8:	af00      	add	r7, sp, #0
    18ba:	6078      	str	r0, [r7, #4]
    18bc:	4c05      	ldr	r4, [pc, #20]	; (18d4 <__tcf_1+0x20>)
    18be:	4b06      	ldr	r3, [pc, #24]	; (18d8 <__tcf_1+0x24>)
    18c0:	429c      	cmp	r4, r3
    18c2:	d004      	beq.n	18ce <__tcf_1+0x1a>
    18c4:	3c1c      	subs	r4, #28
    18c6:	4620      	mov	r0, r4
    18c8:	4b04      	ldr	r3, [pc, #16]	; (18dc <__tcf_1+0x28>)
    18ca:	4798      	blx	r3
    18cc:	e7f7      	b.n	18be <__tcf_1+0xa>
    18ce:	370c      	adds	r7, #12
    18d0:	46bd      	mov	sp, r7
    18d2:	bd90      	pop	{r4, r7, pc}
    18d4:	200015bc 	.word	0x200015bc
    18d8:	20001530 	.word	0x20001530
    18dc:	00015819 	.word	0x00015819

000018e0 <_Z41__static_initialization_and_destruction_0ii>:
		currentExpander=(expanders[i]);
		currentExpander->Init(i,i2c);
	}
}

EvaporatorAndCondesatorFans_Class  fans;
    18e0:	b5b0      	push	{r4, r5, r7, lr}
    18e2:	b082      	sub	sp, #8
    18e4:	af00      	add	r7, sp, #0
    18e6:	6078      	str	r0, [r7, #4]
    18e8:	6039      	str	r1, [r7, #0]
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	2b01      	cmp	r3, #1
    18ee:	d13d      	bne.n	196c <_Z41__static_initialization_and_destruction_0ii+0x8c>
    18f0:	683b      	ldr	r3, [r7, #0]
    18f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    18f6:	4293      	cmp	r3, r2
    18f8:	d138      	bne.n	196c <_Z41__static_initialization_and_destruction_0ii+0x8c>
static I2C_Sync_Class	i2cSharedStatic(&I2C_SHARED);
    18fa:	491e      	ldr	r1, [pc, #120]	; (1974 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    18fc:	481e      	ldr	r0, [pc, #120]	; (1978 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    18fe:	4b1f      	ldr	r3, [pc, #124]	; (197c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    1900:	4798      	blx	r3
    1902:	4a1f      	ldr	r2, [pc, #124]	; (1980 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1904:	491f      	ldr	r1, [pc, #124]	; (1984 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    1906:	481c      	ldr	r0, [pc, #112]	; (1978 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    1908:	4b1f      	ldr	r3, [pc, #124]	; (1988 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    190a:	4798      	blx	r3
static EvaporatorFan_Class	evaporatorFan[2];
    190c:	4b1f      	ldr	r3, [pc, #124]	; (198c <_Z41__static_initialization_and_destruction_0ii+0xac>)
    190e:	2401      	movs	r4, #1
    1910:	461d      	mov	r5, r3
    1912:	2c00      	cmp	r4, #0
    1914:	db05      	blt.n	1922 <_Z41__static_initialization_and_destruction_0ii+0x42>
    1916:	4628      	mov	r0, r5
    1918:	4b1d      	ldr	r3, [pc, #116]	; (1990 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    191a:	4798      	blx	r3
    191c:	3524      	adds	r5, #36	; 0x24
    191e:	3c01      	subs	r4, #1
    1920:	e7f7      	b.n	1912 <_Z41__static_initialization_and_destruction_0ii+0x32>
    1922:	4a17      	ldr	r2, [pc, #92]	; (1980 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1924:	491b      	ldr	r1, [pc, #108]	; (1994 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    1926:	2000      	movs	r0, #0
    1928:	4b17      	ldr	r3, [pc, #92]	; (1988 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    192a:	4798      	blx	r3
static CondesatorFan_Class	condesatorFan;
    192c:	481a      	ldr	r0, [pc, #104]	; (1998 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    192e:	4b1b      	ldr	r3, [pc, #108]	; (199c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    1930:	4798      	blx	r3
    1932:	4a13      	ldr	r2, [pc, #76]	; (1980 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1934:	491a      	ldr	r1, [pc, #104]	; (19a0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    1936:	4818      	ldr	r0, [pc, #96]	; (1998 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    1938:	4b13      	ldr	r3, [pc, #76]	; (1988 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    193a:	4798      	blx	r3
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    193c:	4b19      	ldr	r3, [pc, #100]	; (19a4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    193e:	2404      	movs	r4, #4
    1940:	461d      	mov	r5, r3
    1942:	2c00      	cmp	r4, #0
    1944:	db05      	blt.n	1952 <_Z41__static_initialization_and_destruction_0ii+0x72>
    1946:	4628      	mov	r0, r5
    1948:	4b17      	ldr	r3, [pc, #92]	; (19a8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    194a:	4798      	blx	r3
    194c:	351c      	adds	r5, #28
    194e:	3c01      	subs	r4, #1
    1950:	e7f7      	b.n	1942 <_Z41__static_initialization_and_destruction_0ii+0x62>
    1952:	4a0b      	ldr	r2, [pc, #44]	; (1980 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1954:	4915      	ldr	r1, [pc, #84]	; (19ac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    1956:	2000      	movs	r0, #0
    1958:	4b0b      	ldr	r3, [pc, #44]	; (1988 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    195a:	4798      	blx	r3
EvaporatorAndCondesatorFans_Class  fans;
    195c:	4814      	ldr	r0, [pc, #80]	; (19b0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    195e:	4b15      	ldr	r3, [pc, #84]	; (19b4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    1960:	4798      	blx	r3
    1962:	4a07      	ldr	r2, [pc, #28]	; (1980 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    1964:	4914      	ldr	r1, [pc, #80]	; (19b8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    1966:	4812      	ldr	r0, [pc, #72]	; (19b0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    1968:	4b07      	ldr	r3, [pc, #28]	; (1988 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    196a:	4798      	blx	r3
    196c:	bf00      	nop
    196e:	3708      	adds	r7, #8
    1970:	46bd      	mov	sp, r7
    1972:	bdb0      	pop	{r4, r5, r7, pc}
    1974:	2000a8a8 	.word	0x2000a8a8
    1978:	200014b0 	.word	0x200014b0
    197c:	0001514d 	.word	0x0001514d
    1980:	20000000 	.word	0x20000000
    1984:	00015169 	.word	0x00015169
    1988:	00019d1d 	.word	0x00019d1d
    198c:	200014c4 	.word	0x200014c4
    1990:	000019f9 	.word	0x000019f9
    1994:	00001889 	.word	0x00001889
    1998:	2000150c 	.word	0x2000150c
    199c:	00001059 	.word	0x00001059
    19a0:	0000106d 	.word	0x0000106d
    19a4:	20001530 	.word	0x20001530
    19a8:	00015805 	.word	0x00015805
    19ac:	000018b5 	.word	0x000018b5
    19b0:	200015c0 	.word	0x200015c0
    19b4:	00001811 	.word	0x00001811
    19b8:	0000185d 	.word	0x0000185d

000019bc <_GLOBAL__sub_I_ptrFansClass>:
    19bc:	b580      	push	{r7, lr}
    19be:	af00      	add	r7, sp, #0
    19c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    19c4:	2001      	movs	r0, #1
    19c6:	4b01      	ldr	r3, [pc, #4]	; (19cc <_GLOBAL__sub_I_ptrFansClass+0x10>)
    19c8:	4798      	blx	r3
    19ca:	bd80      	pop	{r7, pc}
    19cc:	000018e1 	.word	0x000018e1

000019d0 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:


#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
    19d0:	b480      	push	{r7}
    19d2:	b083      	sub	sp, #12
    19d4:	af00      	add	r7, sp, #0
    19d6:	6078      	str	r0, [r7, #4]
{
} //EvaporatorFanDataStruct_Class
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	4618      	mov	r0, r3
    19dc:	370c      	adds	r7, #12
    19de:	46bd      	mov	sp, r7
    19e0:	bc80      	pop	{r7}
    19e2:	4770      	bx	lr

000019e4 <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
    19e4:	b480      	push	{r7}
    19e6:	b083      	sub	sp, #12
    19e8:	af00      	add	r7, sp, #0
    19ea:	6078      	str	r0, [r7, #4]
{
} //~EvaporatorFanDataStruct_Class
    19ec:	687b      	ldr	r3, [r7, #4]
    19ee:	4618      	mov	r0, r3
    19f0:	370c      	adds	r7, #12
    19f2:	46bd      	mov	sp, r7
    19f4:	bc80      	pop	{r7}
    19f6:	4770      	bx	lr

000019f8 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
    19f8:	b580      	push	{r7, lr}
    19fa:	b082      	sub	sp, #8
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	4618      	mov	r0, r3
    1a04:	4b04      	ldr	r3, [pc, #16]	; (1a18 <_ZN19EvaporatorFan_ClassC1Ev+0x20>)
    1a06:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
    1a08:	4a04      	ldr	r2, [pc, #16]	; (1a1c <_ZN19EvaporatorFan_ClassC1Ev+0x24>)
    1a0a:	687b      	ldr	r3, [r7, #4]
    1a0c:	6013      	str	r3, [r2, #0]
	
} //EvaporatorFan_Class
    1a0e:	687b      	ldr	r3, [r7, #4]
    1a10:	4618      	mov	r0, r3
    1a12:	3708      	adds	r7, #8
    1a14:	46bd      	mov	sp, r7
    1a16:	bd80      	pop	{r7, pc}
    1a18:	000019d1 	.word	0x000019d1
    1a1c:	20001634 	.word	0x20001634

00001a20 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
    1a20:	b580      	push	{r7, lr}
    1a22:	b082      	sub	sp, #8
    1a24:	af00      	add	r7, sp, #0
    1a26:	6078      	str	r0, [r7, #4]
    1a28:	687b      	ldr	r3, [r7, #4]
    1a2a:	4618      	mov	r0, r3
    1a2c:	4b03      	ldr	r3, [pc, #12]	; (1a3c <_ZN19EvaporatorFan_ClassD1Ev+0x1c>)
    1a2e:	4798      	blx	r3
{
} //~EvaporatorFan_Class
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	4618      	mov	r0, r3
    1a34:	3708      	adds	r7, #8
    1a36:	46bd      	mov	sp, r7
    1a38:	bd80      	pop	{r7, pc}
    1a3a:	bf00      	nop
    1a3c:	000019e5 	.word	0x000019e5

00001a40 <_ZN17FastStorage_ClassC1Ev>:
#include "MemoryManagment_Class.h"

EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
    1a40:	b480      	push	{r7}
    1a42:	b083      	sub	sp, #12
    1a44:	af00      	add	r7, sp, #0
    1a46:	6078      	str	r0, [r7, #4]
{
} //FastStorage_Class
    1a48:	687b      	ldr	r3, [r7, #4]
    1a4a:	4618      	mov	r0, r3
    1a4c:	370c      	adds	r7, #12
    1a4e:	46bd      	mov	sp, r7
    1a50:	bc80      	pop	{r7}
    1a52:	4770      	bx	lr

00001a54 <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
    1a54:	b480      	push	{r7}
    1a56:	b083      	sub	sp, #12
    1a58:	af00      	add	r7, sp, #0
    1a5a:	6078      	str	r0, [r7, #4]
{
} //~FastStorage_Class
    1a5c:	687b      	ldr	r3, [r7, #4]
    1a5e:	4618      	mov	r0, r3
    1a60:	370c      	adds	r7, #12
    1a62:	46bd      	mov	sp, r7
    1a64:	bc80      	pop	{r7}
    1a66:	4770      	bx	lr

00001a68 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv>:


uint32_t	FastStorage_Class::ReadFastCRCApplicationState(void){
    1a68:	b590      	push	{r4, r7, lr}
    1a6a:	b087      	sub	sp, #28
    1a6c:	af00      	add	r7, sp, #0
    1a6e:	6078      	str	r0, [r7, #4]
	uint32_t	crc,add32;
	add32=(uint32_t)&eepromMap->crcAppState;
    1a70:	4b0a      	ldr	r3, [pc, #40]	; (1a9c <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x34>)
    1a72:	681b      	ldr	r3, [r3, #0]
    1a74:	3304      	adds	r3, #4
    1a76:	617b      	str	r3, [r7, #20]
	eepromAddress=(uint16_t)(0xffff&add32);
    1a78:	697b      	ldr	r3, [r7, #20]
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	819a      	strh	r2, [r3, #12]
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(&crc),eepromAddress,sizeof(uint32_t));
    1a80:	687b      	ldr	r3, [r7, #4]
    1a82:	899a      	ldrh	r2, [r3, #12]
    1a84:	f107 010c 	add.w	r1, r7, #12
    1a88:	2304      	movs	r3, #4
    1a8a:	4805      	ldr	r0, [pc, #20]	; (1aa0 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x38>)
    1a8c:	4c05      	ldr	r4, [pc, #20]	; (1aa4 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x3c>)
    1a8e:	47a0      	blx	r4
    1a90:	6138      	str	r0, [r7, #16]
	return	crc;
    1a92:	68fb      	ldr	r3, [r7, #12]
}
    1a94:	4618      	mov	r0, r3
    1a96:	371c      	adds	r7, #28
    1a98:	46bd      	mov	sp, r7
    1a9a:	bd90      	pop	{r4, r7, pc}
    1a9c:	20001638 	.word	0x20001638
    1aa0:	20009f7c 	.word	0x20009f7c
    1aa4:	0001650d 	.word	0x0001650d

00001aa8 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState>:
uint32_t	FastStorage_Class::ReadFastApplicationState(HVACState& hs){
    1aa8:	b590      	push	{r4, r7, lr}
    1aaa:	b085      	sub	sp, #20
    1aac:	af00      	add	r7, sp, #0
    1aae:	6078      	str	r0, [r7, #4]
    1ab0:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->appState;
    1ab2:	4b0c      	ldr	r3, [pc, #48]	; (1ae4 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x3c>)
    1ab4:	681b      	ldr	r3, [r3, #0]
    1ab6:	3308      	adds	r3, #8
    1ab8:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    1aba:	68fb      	ldr	r3, [r7, #12]
    1abc:	b29a      	uxth	r2, r3
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	819a      	strh	r2, [r3, #12]
	handlerAppState=PTR_HVAC_STATE(&hs);
    1ac2:	683a      	ldr	r2, [r7, #0]
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	601a      	str	r2, [r3, #0]
	r=eeprom.ReadAddress((uint8_t*)handlerAppState,eepromAddress,sizeof(HVACState));
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	6819      	ldr	r1, [r3, #0]
    1acc:	687b      	ldr	r3, [r7, #4]
    1ace:	899a      	ldrh	r2, [r3, #12]
    1ad0:	2368      	movs	r3, #104	; 0x68
    1ad2:	4805      	ldr	r0, [pc, #20]	; (1ae8 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x40>)
    1ad4:	4c05      	ldr	r4, [pc, #20]	; (1aec <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x44>)
    1ad6:	47a0      	blx	r4
    1ad8:	60b8      	str	r0, [r7, #8]
	return	r;
    1ada:	68bb      	ldr	r3, [r7, #8]
}
    1adc:	4618      	mov	r0, r3
    1ade:	3714      	adds	r7, #20
    1ae0:	46bd      	mov	sp, r7
    1ae2:	bd90      	pop	{r4, r7, pc}
    1ae4:	20001638 	.word	0x20001638
    1ae8:	20009f7c 	.word	0x20009f7c
    1aec:	0001650d 	.word	0x0001650d

00001af0 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState>:
	eepromAddress=(uint16_t)(0xffff&add32);
	handlerCalendar=(PTR_DATE_TIME)(&cdt);
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(handlerCalendar),(uint8_t)eepromAddress,sizeof(calendar_date_time)*AT24MAC_BUFFER_SIZE);
	return	r;
}
uint32_t	FastStorage_Class::WriteFastCurrentState(HVACState& hs){
    1af0:	b580      	push	{r7, lr}
    1af2:	b084      	sub	sp, #16
    1af4:	af00      	add	r7, sp, #0
    1af6:	6078      	str	r0, [r7, #4]
    1af8:	6039      	str	r1, [r7, #0]
	uint32_t	add32=(uint32_t)&eepromMap->appState;
    1afa:	4b12      	ldr	r3, [pc, #72]	; (1b44 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x54>)
    1afc:	681b      	ldr	r3, [r3, #0]
    1afe:	3308      	adds	r3, #8
    1b00:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    1b02:	68fb      	ldr	r3, [r7, #12]
    1b04:	b29a      	uxth	r2, r3
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	819a      	strh	r2, [r3, #12]
	uint32_t	w=WriteFastAppState(hs,eepromAddress);
    1b0a:	687b      	ldr	r3, [r7, #4]
    1b0c:	899b      	ldrh	r3, [r3, #12]
    1b0e:	461a      	mov	r2, r3
    1b10:	6839      	ldr	r1, [r7, #0]
    1b12:	6878      	ldr	r0, [r7, #4]
    1b14:	4b0c      	ldr	r3, [pc, #48]	; (1b48 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x58>)
    1b16:	4798      	blx	r3
    1b18:	60b8      	str	r0, [r7, #8]
	crc32=		memory.CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    1b1a:	2268      	movs	r2, #104	; 0x68
    1b1c:	6839      	ldr	r1, [r7, #0]
    1b1e:	480b      	ldr	r0, [pc, #44]	; (1b4c <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x5c>)
    1b20:	4b0b      	ldr	r3, [pc, #44]	; (1b50 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x60>)
    1b22:	4798      	blx	r3
    1b24:	4602      	mov	r2, r0
    1b26:	687b      	ldr	r3, [r7, #4]
    1b28:	609a      	str	r2, [r3, #8]
	w=WriteFastCRCAppState(crc32);
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	689b      	ldr	r3, [r3, #8]
    1b2e:	4619      	mov	r1, r3
    1b30:	6878      	ldr	r0, [r7, #4]
    1b32:	4b08      	ldr	r3, [pc, #32]	; (1b54 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x64>)
    1b34:	4798      	blx	r3
    1b36:	60b8      	str	r0, [r7, #8]
	return	w;
    1b38:	68bb      	ldr	r3, [r7, #8]
}
    1b3a:	4618      	mov	r0, r3
    1b3c:	3710      	adds	r7, #16
    1b3e:	46bd      	mov	sp, r7
    1b40:	bd80      	pop	{r7, pc}
    1b42:	bf00      	nop
    1b44:	20001638 	.word	0x20001638
    1b48:	00001b59 	.word	0x00001b59
    1b4c:	20002be0 	.word	0x20002be0
    1b50:	00001551 	.word	0x00001551
    1b54:	00001b91 	.word	0x00001b91

00001b58 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem>:
uint32_t	FastStorage_Class::WriteFastAppState(HVACState& hs,uint32_t add){
    1b58:	b590      	push	{r4, r7, lr}
    1b5a:	b087      	sub	sp, #28
    1b5c:	af00      	add	r7, sp, #0
    1b5e:	60f8      	str	r0, [r7, #12]
    1b60:	60b9      	str	r1, [r7, #8]
    1b62:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    1b64:	68ba      	ldr	r2, [r7, #8]
    1b66:	68fb      	ldr	r3, [r7, #12]
    1b68:	601a      	str	r2, [r3, #0]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)handlerAppState,(uint16_t)add,sizeof(HVACState));
    1b6a:	68fb      	ldr	r3, [r7, #12]
    1b6c:	6819      	ldr	r1, [r3, #0]
    1b6e:	687b      	ldr	r3, [r7, #4]
    1b70:	b29a      	uxth	r2, r3
    1b72:	2368      	movs	r3, #104	; 0x68
    1b74:	4804      	ldr	r0, [pc, #16]	; (1b88 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x30>)
    1b76:	4c05      	ldr	r4, [pc, #20]	; (1b8c <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x34>)
    1b78:	47a0      	blx	r4
    1b7a:	6178      	str	r0, [r7, #20]
	return	w;
    1b7c:	697b      	ldr	r3, [r7, #20]
}
    1b7e:	4618      	mov	r0, r3
    1b80:	371c      	adds	r7, #28
    1b82:	46bd      	mov	sp, r7
    1b84:	bd90      	pop	{r4, r7, pc}
    1b86:	bf00      	nop
    1b88:	20009f7c 	.word	0x20009f7c
    1b8c:	00016451 	.word	0x00016451

00001b90 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm>:
uint32_t	FastStorage_Class::WriteFastCRCAppState(uint32_t crc){
    1b90:	b590      	push	{r4, r7, lr}
    1b92:	b085      	sub	sp, #20
    1b94:	af00      	add	r7, sp, #0
    1b96:	6078      	str	r0, [r7, #4]
    1b98:	6039      	str	r1, [r7, #0]
	uint16_t	add=(uint32_t)&eepromMap->crcAppState;
    1b9a:	4b08      	ldr	r3, [pc, #32]	; (1bbc <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x2c>)
    1b9c:	681b      	ldr	r3, [r3, #0]
    1b9e:	3304      	adds	r3, #4
    1ba0:	81fb      	strh	r3, [r7, #14]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&crc),(uint16_t)add,sizeof(uint32_t));
    1ba2:	89fa      	ldrh	r2, [r7, #14]
    1ba4:	4639      	mov	r1, r7
    1ba6:	2304      	movs	r3, #4
    1ba8:	4805      	ldr	r0, [pc, #20]	; (1bc0 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x30>)
    1baa:	4c06      	ldr	r4, [pc, #24]	; (1bc4 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x34>)
    1bac:	47a0      	blx	r4
    1bae:	60b8      	str	r0, [r7, #8]
	return	w;
    1bb0:	68bb      	ldr	r3, [r7, #8]
}
    1bb2:	4618      	mov	r0, r3
    1bb4:	3714      	adds	r7, #20
    1bb6:	46bd      	mov	sp, r7
    1bb8:	bd90      	pop	{r4, r7, pc}
    1bba:	bf00      	nop
    1bbc:	20001638 	.word	0x20001638
    1bc0:	20009f7c 	.word	0x20009f7c
    1bc4:	00016451 	.word	0x00016451

00001bc8 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv>:
	uint32_t	add32=(uint32_t)&eepromMap->parameters;
	uint8_t		add8=(uint8_t)(0xff&&add32);
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&up),add8,sizeof(UserParameters));
	return	w;
}
uint32_t	FastStorage_Class::WriteFastDefaultParameters(void){
    1bc8:	b590      	push	{r4, r7, lr}
    1bca:	b087      	sub	sp, #28
    1bcc:	af00      	add	r7, sp, #0
    1bce:	6078      	str	r0, [r7, #4]
	UserParameters up=defaultParameters;
    1bd0:	4b0d      	ldr	r3, [pc, #52]	; (1c08 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x40>)
    1bd2:	781b      	ldrb	r3, [r3, #0]
    1bd4:	723b      	strb	r3, [r7, #8]
	uint32_t	add32=(uint32_t)&eepromMap->parameters;
    1bd6:	4b0d      	ldr	r3, [pc, #52]	; (1c0c <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x44>)
    1bd8:	681b      	ldr	r3, [r3, #0]
    1bda:	3301      	adds	r3, #1
    1bdc:	617b      	str	r3, [r7, #20]
	uint8_t		add8=(uint8_t)(0xff&&add32);
    1bde:	697b      	ldr	r3, [r7, #20]
    1be0:	2b00      	cmp	r3, #0
    1be2:	bf14      	ite	ne
    1be4:	2301      	movne	r3, #1
    1be6:	2300      	moveq	r3, #0
    1be8:	b2db      	uxtb	r3, r3
    1bea:	74fb      	strb	r3, [r7, #19]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&up),add8,sizeof(UserParameters));
    1bec:	7cfa      	ldrb	r2, [r7, #19]
    1bee:	f107 0108 	add.w	r1, r7, #8
    1bf2:	2301      	movs	r3, #1
    1bf4:	4806      	ldr	r0, [pc, #24]	; (1c10 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x48>)
    1bf6:	4c07      	ldr	r4, [pc, #28]	; (1c14 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x4c>)
    1bf8:	47a0      	blx	r4
    1bfa:	60f8      	str	r0, [r7, #12]
	return	w;
    1bfc:	68fb      	ldr	r3, [r7, #12]
    1bfe:	4618      	mov	r0, r3
    1c00:	371c      	adds	r7, #28
    1c02:	46bd      	mov	sp, r7
    1c04:	bd90      	pop	{r4, r7, pc}
    1c06:	bf00      	nop
    1c08:	00021fe8 	.word	0x00021fe8
    1c0c:	20001638 	.word	0x20001638
    1c10:	20009f7c 	.word	0x20009f7c
    1c14:	000162f1 	.word	0x000162f1

00001c18 <_ZN19HVAC_Commando_ClassC2Ev>:

#include "HVAC_Commando_Class.h"
#include "ARINC_Interface.h"

// default constructor
HVAC_Commando_Class::HVAC_Commando_Class()
    1c18:	b480      	push	{r7}
    1c1a:	b083      	sub	sp, #12
    1c1c:	af00      	add	r7, sp, #0
    1c1e:	6078      	str	r0, [r7, #4]
    1c20:	6039      	str	r1, [r7, #0]
    1c22:	683b      	ldr	r3, [r7, #0]
    1c24:	681a      	ldr	r2, [r3, #0]
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	601a      	str	r2, [r3, #0]
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	681b      	ldr	r3, [r3, #0]
    1c2e:	3b0c      	subs	r3, #12
    1c30:	681b      	ldr	r3, [r3, #0]
    1c32:	461a      	mov	r2, r3
    1c34:	687b      	ldr	r3, [r7, #4]
    1c36:	4413      	add	r3, r2
    1c38:	683a      	ldr	r2, [r7, #0]
    1c3a:	6852      	ldr	r2, [r2, #4]
    1c3c:	601a      	str	r2, [r3, #0]
{
} //HVAC_Commando_Class
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	4618      	mov	r0, r3
    1c42:	370c      	adds	r7, #12
    1c44:	46bd      	mov	sp, r7
    1c46:	bc80      	pop	{r7}
    1c48:	4770      	bx	lr

00001c4a <_ZN19HVAC_Commando_ClassD2Ev>:

// default destructor
HVAC_Commando_Class::~HVAC_Commando_Class()
    1c4a:	b480      	push	{r7}
    1c4c:	b083      	sub	sp, #12
    1c4e:	af00      	add	r7, sp, #0
    1c50:	6078      	str	r0, [r7, #4]
    1c52:	6039      	str	r1, [r7, #0]
    1c54:	683b      	ldr	r3, [r7, #0]
    1c56:	681a      	ldr	r2, [r3, #0]
    1c58:	687b      	ldr	r3, [r7, #4]
    1c5a:	601a      	str	r2, [r3, #0]
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	681b      	ldr	r3, [r3, #0]
    1c60:	3b0c      	subs	r3, #12
    1c62:	681b      	ldr	r3, [r3, #0]
    1c64:	461a      	mov	r2, r3
    1c66:	687b      	ldr	r3, [r7, #4]
    1c68:	4413      	add	r3, r2
    1c6a:	683a      	ldr	r2, [r7, #0]
    1c6c:	6852      	ldr	r2, [r2, #4]
    1c6e:	601a      	str	r2, [r3, #0]
{
} //~HVAC_Commando_Class
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	4618      	mov	r0, r3
    1c74:	370c      	adds	r7, #12
    1c76:	46bd      	mov	sp, r7
    1c78:	bc80      	pop	{r7}
    1c7a:	4770      	bx	lr

00001c7c <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv>:

bool HVAC_Commando_Class::IsCommando270Changed(void){
    1c7c:	b590      	push	{r4, r7, lr}
    1c7e:	b083      	sub	sp, #12
    1c80:	af00      	add	r7, sp, #0
    1c82:	6078      	str	r0, [r7, #4]
	
	if (lastCommando==UpdateCommando())
    1c84:	687b      	ldr	r3, [r7, #4]
    1c86:	68dc      	ldr	r4, [r3, #12]
    1c88:	6878      	ldr	r0, [r7, #4]
    1c8a:	4b08      	ldr	r3, [pc, #32]	; (1cac <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x30>)
    1c8c:	4798      	blx	r3
    1c8e:	4603      	mov	r3, r0
    1c90:	429c      	cmp	r4, r3
    1c92:	bf0c      	ite	eq
    1c94:	2301      	moveq	r3, #1
    1c96:	2300      	movne	r3, #0
    1c98:	b2db      	uxtb	r3, r3
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	d001      	beq.n	1ca2 <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x26>
	{
		return false;
    1c9e:	2300      	movs	r3, #0
    1ca0:	e000      	b.n	1ca4 <_ZN19HVAC_Commando_Class20IsCommando270ChangedEv+0x28>
	} 
	else
	{
		return true;
    1ca2:	2301      	movs	r3, #1
	
	}
	return true;
}
    1ca4:	4618      	mov	r0, r3
    1ca6:	370c      	adds	r7, #12
    1ca8:	46bd      	mov	sp, r7
    1caa:	bd90      	pop	{r4, r7, pc}
    1cac:	00001cb1 	.word	0x00001cb1

00001cb0 <_ZN19HVAC_Commando_Class14UpdateCommandoEv>:

uint32_t HVAC_Commando_Class::UpdateCommando(void){
    1cb0:	b580      	push	{r7, lr}
    1cb2:	b084      	sub	sp, #16
    1cb4:	af00      	add	r7, sp, #0
    1cb6:	6078      	str	r0, [r7, #4]
	lastCommando=actualCommando;
    1cb8:	687b      	ldr	r3, [r7, #4]
    1cba:	689a      	ldr	r2, [r3, #8]
    1cbc:	687b      	ldr	r3, [r7, #4]
    1cbe:	60da      	str	r2, [r3, #12]
	uint32_t value=arinc.ReadBufferLabel((uint32_t)270);
    1cc0:	f44f 7187 	mov.w	r1, #270	; 0x10e
    1cc4:	4810      	ldr	r0, [pc, #64]	; (1d08 <_ZN19HVAC_Commando_Class14UpdateCommandoEv+0x58>)
    1cc6:	4b11      	ldr	r3, [pc, #68]	; (1d0c <_ZN19HVAC_Commando_Class14UpdateCommandoEv+0x5c>)
    1cc8:	4798      	blx	r3
    1cca:	60f8      	str	r0, [r7, #12]
	commando270.AC_CMD=(bool)((value>>12)&0x01);
    1ccc:	68fb      	ldr	r3, [r7, #12]
    1cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	bf14      	ite	ne
    1cd6:	2301      	movne	r3, #1
    1cd8:	2300      	moveq	r3, #0
    1cda:	b2d9      	uxtb	r1, r3
    1cdc:	687a      	ldr	r2, [r7, #4]
    1cde:	7953      	ldrb	r3, [r2, #5]
    1ce0:	f361 0300 	bfi	r3, r1, #0, #1
    1ce4:	7153      	strb	r3, [r2, #5]
	commando270.statusArinc=(StatusHVACARINC)((value>>10)&0x03);
    1ce6:	68fb      	ldr	r3, [r7, #12]
    1ce8:	0a9b      	lsrs	r3, r3, #10
    1cea:	b2db      	uxtb	r3, r3
    1cec:	f003 0303 	and.w	r3, r3, #3
    1cf0:	b2da      	uxtb	r2, r3
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	711a      	strb	r2, [r3, #4]
	actualCommando=value;
    1cf6:	687b      	ldr	r3, [r7, #4]
    1cf8:	68fa      	ldr	r2, [r7, #12]
    1cfa:	609a      	str	r2, [r3, #8]
	return actualCommando;
    1cfc:	687b      	ldr	r3, [r7, #4]
    1cfe:	689b      	ldr	r3, [r3, #8]
}
    1d00:	4618      	mov	r0, r3
    1d02:	3710      	adds	r7, #16
    1d04:	46bd      	mov	sp, r7
    1d06:	bd80      	pop	{r7, pc}
    1d08:	20008ff0 	.word	0x20008ff0
    1d0c:	00013a6d 	.word	0x00013a6d

00001d10 <_ZN19HVAC_Commando_Class27UpadateFlapperValveSetpointEv>:
uint32_t HVAC_Commando_Class::GetCommando270(void){
	return actualCommando;
}
uint8_t HVAC_Commando_Class::UpadateFlapperValveSetpoint(void){
    1d10:	b580      	push	{r7, lr}
    1d12:	b084      	sub	sp, #16
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
	lastflapperValveSetpoint=flapperValveSetpoint;
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	7c1a      	ldrb	r2, [r3, #16]
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	745a      	strb	r2, [r3, #17]
	uint32_t value=arinc.ReadBufferLabel((uint32_t)275);
    1d20:	f240 1113 	movw	r1, #275	; 0x113
    1d24:	4807      	ldr	r0, [pc, #28]	; (1d44 <_ZN19HVAC_Commando_Class27UpadateFlapperValveSetpointEv+0x34>)
    1d26:	4b08      	ldr	r3, [pc, #32]	; (1d48 <_ZN19HVAC_Commando_Class27UpadateFlapperValveSetpointEv+0x38>)
    1d28:	4798      	blx	r3
    1d2a:	60f8      	str	r0, [r7, #12]
	uint8_t position=(uint8_t)((value>>10)&0xff);
    1d2c:	68fb      	ldr	r3, [r7, #12]
    1d2e:	0a9b      	lsrs	r3, r3, #10
    1d30:	72fb      	strb	r3, [r7, #11]
	flapperValveSetpoint=position;
    1d32:	687b      	ldr	r3, [r7, #4]
    1d34:	7afa      	ldrb	r2, [r7, #11]
    1d36:	741a      	strb	r2, [r3, #16]
	return flapperValveSetpoint;
    1d38:	687b      	ldr	r3, [r7, #4]
    1d3a:	7c1b      	ldrb	r3, [r3, #16]
}
    1d3c:	4618      	mov	r0, r3
    1d3e:	3710      	adds	r7, #16
    1d40:	46bd      	mov	sp, r7
    1d42:	bd80      	pop	{r7, pc}
    1d44:	20008ff0 	.word	0x20008ff0
    1d48:	00013a6d 	.word	0x00013a6d

00001d4c <_ZN19HVAC_Commando_Class23GetFlapperValveSetpointEv>:
uint8_t HVAC_Commando_Class::GetFlapperValveSetpoint(void){
    1d4c:	b480      	push	{r7}
    1d4e:	b083      	sub	sp, #12
    1d50:	af00      	add	r7, sp, #0
    1d52:	6078      	str	r0, [r7, #4]
	return flapperValveSetpoint;
    1d54:	687b      	ldr	r3, [r7, #4]
    1d56:	7c1b      	ldrb	r3, [r3, #16]
}
    1d58:	4618      	mov	r0, r3
    1d5a:	370c      	adds	r7, #12
    1d5c:	46bd      	mov	sp, r7
    1d5e:	bc80      	pop	{r7}
    1d60:	4770      	bx	lr
	...

00001d64 <_ZN19HVAC_Commando_Class25IsNewFlapperValveSetpointEv>:

bool HVAC_Commando_Class::IsNewFlapperValveSetpoint(void){
    1d64:	b590      	push	{r4, r7, lr}
    1d66:	b083      	sub	sp, #12
    1d68:	af00      	add	r7, sp, #0
    1d6a:	6078      	str	r0, [r7, #4]
		if (lastflapperValveSetpoint==UpadateFlapperValveSetpoint())
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	7c5c      	ldrb	r4, [r3, #17]
    1d70:	6878      	ldr	r0, [r7, #4]
    1d72:	4b08      	ldr	r3, [pc, #32]	; (1d94 <_ZN19HVAC_Commando_Class25IsNewFlapperValveSetpointEv+0x30>)
    1d74:	4798      	blx	r3
    1d76:	4603      	mov	r3, r0
    1d78:	429c      	cmp	r4, r3
    1d7a:	bf0c      	ite	eq
    1d7c:	2301      	moveq	r3, #1
    1d7e:	2300      	movne	r3, #0
    1d80:	b2db      	uxtb	r3, r3
    1d82:	2b00      	cmp	r3, #0
    1d84:	d001      	beq.n	1d8a <_ZN19HVAC_Commando_Class25IsNewFlapperValveSetpointEv+0x26>
		{
			return false;
    1d86:	2300      	movs	r3, #0
    1d88:	e000      	b.n	1d8c <_ZN19HVAC_Commando_Class25IsNewFlapperValveSetpointEv+0x28>
		}
		else
		{
			return true;
    1d8a:	2301      	movs	r3, #1
			
		}
		return true;
    1d8c:	4618      	mov	r0, r3
    1d8e:	370c      	adds	r7, #12
    1d90:	46bd      	mov	sp, r7
    1d92:	bd90      	pop	{r4, r7, pc}
    1d94:	00001d11 	.word	0x00001d11

00001d98 <_ZN16Interfaces_ClassC1Ev>:
#include "Maintenance_Tool.h"
#include "FlapperValve_Class.h"


// default constructor
Interfaces_Class::Interfaces_Class()
    1d98:	b480      	push	{r7}
    1d9a:	b083      	sub	sp, #12
    1d9c:	af00      	add	r7, sp, #0
    1d9e:	6078      	str	r0, [r7, #4]
{
	
} //Interfaces_Class
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	4618      	mov	r0, r3
    1da4:	370c      	adds	r7, #12
    1da6:	46bd      	mov	sp, r7
    1da8:	bc80      	pop	{r7}
    1daa:	4770      	bx	lr

00001dac <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
    1dac:	b480      	push	{r7}
    1dae:	b083      	sub	sp, #12
    1db0:	af00      	add	r7, sp, #0
    1db2:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	4618      	mov	r0, r3
    1db8:	370c      	adds	r7, #12
    1dba:	46bd      	mov	sp, r7
    1dbc:	bc80      	pop	{r7}
    1dbe:	4770      	bx	lr

00001dc0 <_ZN16Interfaces_Class4InitEv>:

CommunicationRequest	Interfaces_Class::request;

bool	Interfaces_Class::Init(){
    1dc0:	b580      	push	{r7, lr}
    1dc2:	b084      	sub	sp, #16
    1dc4:	af00      	add	r7, sp, #0
    1dc6:	6078      	str	r0, [r7, #4]
	size=sizeof(CommunicationRequest);
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	2205      	movs	r2, #5
    1dcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	result=arinc.Init();
    1dd0:	4815      	ldr	r0, [pc, #84]	; (1e28 <_ZN16Interfaces_Class4InitEv+0x68>)
    1dd2:	4b16      	ldr	r3, [pc, #88]	; (1e2c <_ZN16Interfaces_Class4InitEv+0x6c>)
    1dd4:	4798      	blx	r3
    1dd6:	4603      	mov	r3, r0
    1dd8:	461a      	mov	r2, r3
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	675a      	str	r2, [r3, #116]	; 0x74
	if (result==0x01)
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    1de2:	2b01      	cmp	r3, #1
    1de4:	d106      	bne.n	1df4 <_ZN16Interfaces_Class4InitEv+0x34>
	{
		arinc.TrasmitSingleLabel();
    1de6:	4810      	ldr	r0, [pc, #64]	; (1e28 <_ZN16Interfaces_Class4InitEv+0x68>)
    1de8:	4b11      	ldr	r3, [pc, #68]	; (1e30 <_ZN16Interfaces_Class4InitEv+0x70>)
    1dea:	4798      	blx	r3
		if (maintenance.IsAppConnected())
    1dec:	4811      	ldr	r0, [pc, #68]	; (1e34 <_ZN16Interfaces_Class4InitEv+0x74>)
    1dee:	4b12      	ldr	r3, [pc, #72]	; (1e38 <_ZN16Interfaces_Class4InitEv+0x78>)
    1df0:	4798      	blx	r3
    1df2:	e00e      	b.n	1e12 <_ZN16Interfaces_Class4InitEv+0x52>
		{
		}
	} 
	else
	{
		alu.NotifyError(kARINCINnterfaceError,result);
    1df4:	687b      	ldr	r3, [r7, #4]
    1df6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    1df8:	f107 030c 	add.w	r3, r7, #12
    1dfc:	4611      	mov	r1, r2
    1dfe:	4618      	mov	r0, r3
    1e00:	4b0e      	ldr	r3, [pc, #56]	; (1e3c <_ZN16Interfaces_Class4InitEv+0x7c>)
    1e02:	4798      	blx	r3
    1e04:	f107 030c 	add.w	r3, r7, #12
    1e08:	461a      	mov	r2, r3
    1e0a:	2100      	movs	r1, #0
    1e0c:	480c      	ldr	r0, [pc, #48]	; (1e40 <_ZN16Interfaces_Class4InitEv+0x80>)
    1e0e:	4b0d      	ldr	r3, [pc, #52]	; (1e44 <_ZN16Interfaces_Class4InitEv+0x84>)
    1e10:	4798      	blx	r3
	}
	return result;
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    1e16:	2b00      	cmp	r3, #0
    1e18:	bf14      	ite	ne
    1e1a:	2301      	movne	r3, #1
    1e1c:	2300      	moveq	r3, #0
    1e1e:	b2db      	uxtb	r3, r3
}
    1e20:	4618      	mov	r0, r3
    1e22:	3710      	adds	r7, #16
    1e24:	46bd      	mov	sp, r7
    1e26:	bd80      	pop	{r7, pc}
    1e28:	20008ff0 	.word	0x20008ff0
    1e2c:	000136f9 	.word	0x000136f9
    1e30:	00013abd 	.word	0x00013abd
    1e34:	20008724 	.word	0x20008724
    1e38:	00004a8d 	.word	0x00004a8d
    1e3c:	000003a9 	.word	0x000003a9
    1e40:	20000c80 	.word	0x20000c80
    1e44:	000009e1 	.word	0x000009e1

00001e48 <_ZN16Interfaces_Class18CheckCommunicationEv>:

CommunicationRequest Interfaces_Class::CheckCommunication(void)
{
    1e48:	b580      	push	{r7, lr}
    1e4a:	b086      	sub	sp, #24
    1e4c:	af00      	add	r7, sp, #0
    1e4e:	6078      	str	r0, [r7, #4]
    1e50:	6039      	str	r1, [r7, #0]
	event e;
    1e52:	f107 0308 	add.w	r3, r7, #8
    1e56:	4618      	mov	r0, r3
    1e58:	4b09      	ldr	r3, [pc, #36]	; (1e80 <_ZN16Interfaces_Class18CheckCommunicationEv+0x38>)
    1e5a:	4798      	blx	r3
	CommunicationRequest	r;
	CheckInternalCommunication();
    1e5c:	6838      	ldr	r0, [r7, #0]
    1e5e:	4b09      	ldr	r3, [pc, #36]	; (1e84 <_ZN16Interfaces_Class18CheckCommunicationEv+0x3c>)
    1e60:	4798      	blx	r3
	CheckExternalCommunication();
    1e62:	6838      	ldr	r0, [r7, #0]
    1e64:	4b08      	ldr	r3, [pc, #32]	; (1e88 <_ZN16Interfaces_Class18CheckCommunicationEv+0x40>)
    1e66:	4798      	blx	r3
	r=request;
    1e68:	687b      	ldr	r3, [r7, #4]
    1e6a:	4a08      	ldr	r2, [pc, #32]	; (1e8c <_ZN16Interfaces_Class18CheckCommunicationEv+0x44>)
    1e6c:	6810      	ldr	r0, [r2, #0]
    1e6e:	6018      	str	r0, [r3, #0]
    1e70:	7912      	ldrb	r2, [r2, #4]
    1e72:	711a      	strb	r2, [r3, #4]
	
	return	r;
    1e74:	bf00      	nop
}
    1e76:	6878      	ldr	r0, [r7, #4]
    1e78:	3718      	adds	r7, #24
    1e7a:	46bd      	mov	sp, r7
    1e7c:	bd80      	pop	{r7, pc}
    1e7e:	bf00      	nop
    1e80:	000003c5 	.word	0x000003c5
    1e84:	00001f09 	.word	0x00001f09
    1e88:	00001f49 	.word	0x00001f49
    1e8c:	20001654 	.word	0x20001654

00001e90 <_ZN16Interfaces_Class22IsCommunicationRequestEv>:

bool	Interfaces_Class::IsCommunicationRequest(void){
    1e90:	b580      	push	{r7, lr}
    1e92:	b086      	sub	sp, #24
    1e94:	af00      	add	r7, sp, #0
    1e96:	6078      	str	r0, [r7, #4]
	bool arr[sizeof(CommunicationRequest)];
	CommunicationRequest r=CheckCommunication();
    1e98:	f107 0308 	add.w	r3, r7, #8
    1e9c:	6879      	ldr	r1, [r7, #4]
    1e9e:	4618      	mov	r0, r3
    1ea0:	4b17      	ldr	r3, [pc, #92]	; (1f00 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x70>)
    1ea2:	4798      	blx	r3
	uint8_t result=0;
    1ea4:	2300      	movs	r3, #0
    1ea6:	75fb      	strb	r3, [r7, #23]
	memcpy((void*)arr,(void*)&r,size);
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    1eae:	461a      	mov	r2, r3
    1eb0:	f107 0108 	add.w	r1, r7, #8
    1eb4:	f107 0310 	add.w	r3, r7, #16
    1eb8:	4618      	mov	r0, r3
    1eba:	4b12      	ldr	r3, [pc, #72]	; (1f04 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x74>)
    1ebc:	4798      	blx	r3
	for (uint8_t ii = 0; ii < size; ii++)
    1ebe:	2300      	movs	r3, #0
    1ec0:	75bb      	strb	r3, [r7, #22]
    1ec2:	7dbb      	ldrb	r3, [r7, #22]
    1ec4:	687a      	ldr	r2, [r7, #4]
    1ec6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    1eca:	4293      	cmp	r3, r2
    1ecc:	da0d      	bge.n	1eea <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x5a>
	{
		result|=arr[ii];
    1ece:	7dbb      	ldrb	r3, [r7, #22]
    1ed0:	f107 0218 	add.w	r2, r7, #24
    1ed4:	4413      	add	r3, r2
    1ed6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    1eda:	461a      	mov	r2, r3
    1edc:	7dfb      	ldrb	r3, [r7, #23]
    1ede:	4313      	orrs	r3, r2
    1ee0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t ii = 0; ii < size; ii++)
    1ee2:	7dbb      	ldrb	r3, [r7, #22]
    1ee4:	3301      	adds	r3, #1
    1ee6:	75bb      	strb	r3, [r7, #22]
    1ee8:	e7eb      	b.n	1ec2 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x32>
	}
	return	result>0;
    1eea:	7dfb      	ldrb	r3, [r7, #23]
    1eec:	2b00      	cmp	r3, #0
    1eee:	bfcc      	ite	gt
    1ef0:	2301      	movgt	r3, #1
    1ef2:	2300      	movle	r3, #0
    1ef4:	b2db      	uxtb	r3, r3
}
    1ef6:	4618      	mov	r0, r3
    1ef8:	3718      	adds	r7, #24
    1efa:	46bd      	mov	sp, r7
    1efc:	bd80      	pop	{r7, pc}
    1efe:	bf00      	nop
    1f00:	00001e49 	.word	0x00001e49
    1f04:	0001c485 	.word	0x0001c485

00001f08 <_ZN16Interfaces_Class26CheckInternalCommunicationEv>:

uint32_t Interfaces_Class::CheckInternalCommunication(void)
{
    1f08:	b580      	push	{r7, lr}
    1f0a:	b084      	sub	sp, #16
    1f0c:	af00      	add	r7, sp, #0
    1f0e:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1f10:	2300      	movs	r3, #0
    1f12:	60fb      	str	r3, [r7, #12]
	request.internRequest.flapperValvesMessage=CheckFlapperValveInterface(1);
    1f14:	2101      	movs	r1, #1
    1f16:	6878      	ldr	r0, [r7, #4]
    1f18:	4b08      	ldr	r3, [pc, #32]	; (1f3c <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x34>)
    1f1a:	4798      	blx	r3
    1f1c:	4603      	mov	r3, r0
    1f1e:	461a      	mov	r2, r3
    1f20:	4b07      	ldr	r3, [pc, #28]	; (1f40 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    1f22:	705a      	strb	r2, [r3, #1]
	request.internRequest.temperatureSensorsMessage=CheckTemperatures();
    1f24:	6878      	ldr	r0, [r7, #4]
    1f26:	4b07      	ldr	r3, [pc, #28]	; (1f44 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x3c>)
    1f28:	4798      	blx	r3
    1f2a:	4603      	mov	r3, r0
    1f2c:	461a      	mov	r2, r3
    1f2e:	4b04      	ldr	r3, [pc, #16]	; (1f40 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    1f30:	701a      	strb	r2, [r3, #0]
	return	0;
    1f32:	2300      	movs	r3, #0
}
    1f34:	4618      	mov	r0, r3
    1f36:	3710      	adds	r7, #16
    1f38:	46bd      	mov	sp, r7
    1f3a:	bd80      	pop	{r7, pc}
    1f3c:	00001fbd 	.word	0x00001fbd
    1f40:	20001654 	.word	0x20001654
    1f44:	0000208d 	.word	0x0000208d

00001f48 <_ZN16Interfaces_Class26CheckExternalCommunicationEv>:
uint32_t Interfaces_Class::CheckExternalCommunication(void)
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	b084      	sub	sp, #16
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1f50:	2300      	movs	r3, #0
    1f52:	60fb      	str	r3, [r7, #12]


	if (arinc.newMessageR1)
    1f54:	4b14      	ldr	r3, [pc, #80]	; (1fa8 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
    1f56:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
    1f5a:	b2db      	uxtb	r3, r3
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	d007      	beq.n	1f70 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x28>
	{
		request.externRequest.arinc1GotMessage=true;
    1f60:	4b12      	ldr	r3, [pc, #72]	; (1fac <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1f62:	2201      	movs	r2, #1
    1f64:	709a      	strb	r2, [r3, #2]
		alu.PrepareNewTask(kALUTaskReadARINCR1);
    1f66:	2200      	movs	r2, #0
    1f68:	2104      	movs	r1, #4
    1f6a:	4811      	ldr	r0, [pc, #68]	; (1fb0 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x68>)
    1f6c:	4b11      	ldr	r3, [pc, #68]	; (1fb4 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x6c>)
    1f6e:	4798      	blx	r3
	}
	if (arinc.newMessageR2)
    1f70:	4b0d      	ldr	r3, [pc, #52]	; (1fa8 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
    1f72:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
    1f76:	b2db      	uxtb	r3, r3
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d007      	beq.n	1f8c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x44>
	{
		request.externRequest.arinc2GotMessage=true;
    1f7c:	4b0b      	ldr	r3, [pc, #44]	; (1fac <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1f7e:	2201      	movs	r2, #1
    1f80:	70da      	strb	r2, [r3, #3]
		alu.PrepareNewTask(kALUTaskReadARINCR2);
    1f82:	2200      	movs	r2, #0
    1f84:	2105      	movs	r1, #5
    1f86:	480a      	ldr	r0, [pc, #40]	; (1fb0 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x68>)
    1f88:	4b0a      	ldr	r3, [pc, #40]	; (1fb4 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x6c>)
    1f8a:	4798      	blx	r3
	}
	if (CheckUSBInterface())
    1f8c:	6878      	ldr	r0, [r7, #4]
    1f8e:	4b0a      	ldr	r3, [pc, #40]	; (1fb8 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x70>)
    1f90:	4798      	blx	r3
    1f92:	4603      	mov	r3, r0
    1f94:	2b00      	cmp	r3, #0
    1f96:	d002      	beq.n	1f9e <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x56>
	{
		request.externRequest.usbGotMessage=true;
    1f98:	4b04      	ldr	r3, [pc, #16]	; (1fac <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1f9a:	2201      	movs	r2, #1
    1f9c:	711a      	strb	r2, [r3, #4]
		//alu.PrepareNewTask(kALUTaskReadARINCR2);
	}
	//request.externRequest.arinc1GotMessage=arinc.newMessageR2;
	
	return	0;
    1f9e:	2300      	movs	r3, #0
}
    1fa0:	4618      	mov	r0, r3
    1fa2:	3710      	adds	r7, #16
    1fa4:	46bd      	mov	sp, r7
    1fa6:	bd80      	pop	{r7, pc}
    1fa8:	20008ff0 	.word	0x20008ff0
    1fac:	20001654 	.word	0x20001654
    1fb0:	20000c80 	.word	0x20000c80
    1fb4:	00000a0d 	.word	0x00000a0d
    1fb8:	00002009 	.word	0x00002009

00001fbc <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh>:
bool	Interfaces_Class::CheckFlapperValveInterface(uint8_t add){
    1fbc:	b580      	push	{r7, lr}
    1fbe:	b082      	sub	sp, #8
    1fc0:	af00      	add	r7, sp, #0
    1fc2:	6078      	str	r0, [r7, #4]
    1fc4:	460b      	mov	r3, r1
    1fc6:	70fb      	strb	r3, [r7, #3]
		if (fv1.fv1StatusChanged)
    1fc8:	4b0b      	ldr	r3, [pc, #44]	; (1ff8 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x3c>)
    1fca:	7fdb      	ldrb	r3, [r3, #31]
    1fcc:	b2db      	uxtb	r3, r3
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d00a      	beq.n	1fe8 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x2c>
		{
			fv1.ReadActualPosition();
    1fd2:	4809      	ldr	r0, [pc, #36]	; (1ff8 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x3c>)
    1fd4:	4b09      	ldr	r3, [pc, #36]	; (1ffc <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x40>)
    1fd6:	4798      	blx	r3
			alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    1fd8:	2200      	movs	r2, #0
    1fda:	210b      	movs	r1, #11
    1fdc:	4808      	ldr	r0, [pc, #32]	; (2000 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x44>)
    1fde:	4b09      	ldr	r3, [pc, #36]	; (2004 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x48>)
    1fe0:	4798      	blx	r3
			fv1.fv1StatusChanged=false;
    1fe2:	4b05      	ldr	r3, [pc, #20]	; (1ff8 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x3c>)
    1fe4:	2200      	movs	r2, #0
    1fe6:	77da      	strb	r2, [r3, #31]
		}
		return	fv1.fv1StatusChanged;
    1fe8:	4b03      	ldr	r3, [pc, #12]	; (1ff8 <_ZN16Interfaces_Class26CheckFlapperValveInterfaceEh+0x3c>)
    1fea:	7fdb      	ldrb	r3, [r3, #31]
    1fec:	b2db      	uxtb	r3, r3
}
    1fee:	4618      	mov	r0, r3
    1ff0:	3708      	adds	r7, #8
    1ff2:	46bd      	mov	sp, r7
    1ff4:	bd80      	pop	{r7, pc}
    1ff6:	bf00      	nop
    1ff8:	20009c38 	.word	0x20009c38
    1ffc:	00015669 	.word	0x00015669
    2000:	20000c80 	.word	0x20000c80
    2004:	00000a0d 	.word	0x00000a0d

00002008 <_ZN16Interfaces_Class17CheckUSBInterfaceEv>:
bool	Interfaces_Class::CheckUSBInterface(void){
    2008:	b580      	push	{r7, lr}
    200a:	b082      	sub	sp, #8
    200c:	af00      	add	r7, sp, #0
    200e:	6078      	str	r0, [r7, #4]
		if (usb.connected)
    2010:	4b13      	ldr	r3, [pc, #76]	; (2060 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    2012:	7c1b      	ldrb	r3, [r3, #16]
    2014:	b2db      	uxtb	r3, r3
    2016:	2b00      	cmp	r3, #0
    2018:	d01b      	beq.n	2052 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x4a>
		{
			if (maintenance.IsAppConnected())
    201a:	4812      	ldr	r0, [pc, #72]	; (2064 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x5c>)
    201c:	4b12      	ldr	r3, [pc, #72]	; (2068 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x60>)
    201e:	4798      	blx	r3
    2020:	4603      	mov	r3, r0
    2022:	2b00      	cmp	r3, #0
    2024:	d009      	beq.n	203a <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x32>
			{
				usb<<"Maintenance Tool Locked"<<NEWLINE;
    2026:	4911      	ldr	r1, [pc, #68]	; (206c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x64>)
    2028:	480d      	ldr	r0, [pc, #52]	; (2060 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    202a:	4b11      	ldr	r3, [pc, #68]	; (2070 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x68>)
    202c:	4798      	blx	r3
    202e:	4603      	mov	r3, r0
    2030:	4910      	ldr	r1, [pc, #64]	; (2074 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    2032:	4618      	mov	r0, r3
    2034:	4b10      	ldr	r3, [pc, #64]	; (2078 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    2036:	4798      	blx	r3
    2038:	e008      	b.n	204c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x44>
			} 
			else
			{
				usb<<"Remote operation Disabled"<<NEWLINE;
    203a:	4910      	ldr	r1, [pc, #64]	; (207c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x74>)
    203c:	4808      	ldr	r0, [pc, #32]	; (2060 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    203e:	4b10      	ldr	r3, [pc, #64]	; (2080 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x78>)
    2040:	4798      	blx	r3
    2042:	4603      	mov	r3, r0
    2044:	490b      	ldr	r1, [pc, #44]	; (2074 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    2046:	4618      	mov	r0, r3
    2048:	4b0b      	ldr	r3, [pc, #44]	; (2078 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    204a:	4798      	blx	r3
			}
			hvac.PrintState();
    204c:	480d      	ldr	r0, [pc, #52]	; (2084 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x7c>)
    204e:	4b0e      	ldr	r3, [pc, #56]	; (2088 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x80>)
    2050:	4798      	blx	r3
		}else{
						
		}
		return	usb.rxReady;
    2052:	4b03      	ldr	r3, [pc, #12]	; (2060 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    2054:	7d5b      	ldrb	r3, [r3, #21]
    2056:	b2db      	uxtb	r3, r3
}
    2058:	4618      	mov	r0, r3
    205a:	3708      	adds	r7, #8
    205c:	46bd      	mov	sp, r7
    205e:	bd80      	pop	{r7, pc}
    2060:	2000a4d0 	.word	0x2000a4d0
    2064:	20008724 	.word	0x20008724
    2068:	00004a8d 	.word	0x00004a8d
    206c:	000206b0 	.word	0x000206b0
    2070:	00002169 	.word	0x00002169
    2074:	000206c8 	.word	0x000206c8
    2078:	00000c99 	.word	0x00000c99
    207c:	000206cc 	.word	0x000206cc
    2080:	00002189 	.word	0x00002189
    2084:	200083dc 	.word	0x200083dc
    2088:	000012f9 	.word	0x000012f9

0000208c <_ZN16Interfaces_Class17CheckTemperaturesEv>:

bool	Interfaces_Class::CheckTemperatures(void){
    208c:	b580      	push	{r7, lr}
    208e:	b084      	sub	sp, #16
    2090:	af00      	add	r7, sp, #0
    2092:	6078      	str	r0, [r7, #4]
	bool result(false);
    2094:	2300      	movs	r3, #0
    2096:	73fb      	strb	r3, [r7, #15]
	if (temperatures.IsConversionFinished())
    2098:	4815      	ldr	r0, [pc, #84]	; (20f0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    209a:	4b16      	ldr	r3, [pc, #88]	; (20f4 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x68>)
    209c:	4798      	blx	r3
    209e:	4603      	mov	r3, r0
    20a0:	2b00      	cmp	r3, #0
    20a2:	d020      	beq.n	20e6 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x5a>
	{
		
		temperatures.GetConversionResult();
    20a4:	4812      	ldr	r0, [pc, #72]	; (20f0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    20a6:	4b14      	ldr	r3, [pc, #80]	; (20f8 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x6c>)
    20a8:	4798      	blx	r3
		if (temperatures.faultData==VALID_TEMPERATURE)
    20aa:	4b11      	ldr	r3, [pc, #68]	; (20f0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    20ac:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    20b0:	2b01      	cmp	r3, #1
    20b2:	d114      	bne.n	20de <_ZN16Interfaces_Class17CheckTemperaturesEv+0x52>
		{
			if (lastTemperature!=temperatures.values[0][1])
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    20b8:	4b0d      	ldr	r3, [pc, #52]	; (20f0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    20ba:	6e59      	ldr	r1, [r3, #100]	; 0x64
    20bc:	4b0f      	ldr	r3, [pc, #60]	; (20fc <_ZN16Interfaces_Class17CheckTemperaturesEv+0x70>)
    20be:	4610      	mov	r0, r2
    20c0:	4798      	blx	r3
    20c2:	4603      	mov	r3, r0
    20c4:	2b00      	cmp	r3, #0
    20c6:	d10a      	bne.n	20de <_ZN16Interfaces_Class17CheckTemperaturesEv+0x52>
			{
				lastTemperature=temperatures.values[0][1];
    20c8:	4b09      	ldr	r3, [pc, #36]	; (20f0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    20ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    20cc:	687b      	ldr	r3, [r7, #4]
    20ce:	67da      	str	r2, [r3, #124]	; 0x7c
				alu.PrepareNewTask(kALUTaskUpdateTemperatures);
    20d0:	2200      	movs	r2, #0
    20d2:	210a      	movs	r1, #10
    20d4:	480a      	ldr	r0, [pc, #40]	; (2100 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x74>)
    20d6:	4b0b      	ldr	r3, [pc, #44]	; (2104 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x78>)
    20d8:	4798      	blx	r3
				result=true;
    20da:	2301      	movs	r3, #1
    20dc:	73fb      	strb	r3, [r7, #15]
			}
				
		}
			temperatures.StartOneConversion();
    20de:	4804      	ldr	r0, [pc, #16]	; (20f0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x64>)
    20e0:	4b09      	ldr	r3, [pc, #36]	; (2108 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x7c>)
    20e2:	4798      	blx	r3
			asm("nop");
    20e4:	bf00      	nop
	
	} 
	else
	{
	}
	return	result;
    20e6:	7bfb      	ldrb	r3, [r7, #15]
}
    20e8:	4618      	mov	r0, r3
    20ea:	3710      	adds	r7, #16
    20ec:	46bd      	mov	sp, r7
    20ee:	bd80      	pop	{r7, pc}
    20f0:	20009d9c 	.word	0x20009d9c
    20f4:	00015fa5 	.word	0x00015fa5
    20f8:	00015eb5 	.word	0x00015eb5
    20fc:	0001bde9 	.word	0x0001bde9
    2100:	20000c80 	.word	0x20000c80
    2104:	00000a0d 	.word	0x00000a0d
    2108:	00015e49 	.word	0x00015e49

0000210c <_ZN16Interfaces_Class9GetStatusER10HVACStatus>:
	{
		
	}
	return	arinc.newMessageR1||arinc.newMessageR2;
}
uint32_t	Interfaces_Class::GetStatus(HVACStatus& s){
    210c:	b480      	push	{r7}
    210e:	b085      	sub	sp, #20
    2110:	af00      	add	r7, sp, #0
    2112:	6078      	str	r0, [r7, #4]
    2114:	6039      	str	r1, [r7, #0]
	s=status;
    2116:	683a      	ldr	r2, [r7, #0]
    2118:	687b      	ldr	r3, [r7, #4]
    211a:	3368      	adds	r3, #104	; 0x68
    211c:	e893 0003 	ldmia.w	r3, {r0, r1}
    2120:	e882 0003 	stmia.w	r2, {r0, r1}
	uint32_t	*p=(uint32_t*)(&s.statusBits);
    2124:	683b      	ldr	r3, [r7, #0]
    2126:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    2128:	2300      	movs	r3, #0
    212a:	60bb      	str	r3, [r7, #8]
    212c:	68bb      	ldr	r3, [r7, #8]
    212e:	2b01      	cmp	r3, #1
    2130:	d812      	bhi.n	2158 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x4c>
	{
		s.rawStatus+=(*p)&(0x01<<i);
    2132:	683b      	ldr	r3, [r7, #0]
    2134:	685a      	ldr	r2, [r3, #4]
    2136:	68fb      	ldr	r3, [r7, #12]
    2138:	681b      	ldr	r3, [r3, #0]
    213a:	2001      	movs	r0, #1
    213c:	68b9      	ldr	r1, [r7, #8]
    213e:	fa00 f101 	lsl.w	r1, r0, r1
    2142:	400b      	ands	r3, r1
    2144:	441a      	add	r2, r3
    2146:	683b      	ldr	r3, [r7, #0]
    2148:	605a      	str	r2, [r3, #4]
		p++;
    214a:	68fb      	ldr	r3, [r7, #12]
    214c:	3304      	adds	r3, #4
    214e:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    2150:	68bb      	ldr	r3, [r7, #8]
    2152:	3301      	adds	r3, #1
    2154:	60bb      	str	r3, [r7, #8]
    2156:	e7e9      	b.n	212c <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x20>
	}
	return	status.rawStatus;
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
}
    215c:	4618      	mov	r0, r3
    215e:	3714      	adds	r7, #20
    2160:	46bd      	mov	sp, r7
    2162:	bc80      	pop	{r7}
    2164:	4770      	bx	lr
	...

00002168 <_ZlsIA24_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2168:	b580      	push	{r7, lr}
    216a:	b082      	sub	sp, #8
    216c:	af00      	add	r7, sp, #0
    216e:	6078      	str	r0, [r7, #4]
    2170:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2172:	6839      	ldr	r1, [r7, #0]
    2174:	6878      	ldr	r0, [r7, #4]
    2176:	4b03      	ldr	r3, [pc, #12]	; (2184 <_ZlsIA24_cER5PrintS2_RKT_+0x1c>)
    2178:	4798      	blx	r3
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	4618      	mov	r0, r3
    217e:	3708      	adds	r7, #8
    2180:	46bd      	mov	sp, r7
    2182:	bd80      	pop	{r7, pc}
    2184:	000185e5 	.word	0x000185e5

00002188 <_ZlsIA26_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2188:	b580      	push	{r7, lr}
    218a:	b082      	sub	sp, #8
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
    2190:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2192:	6839      	ldr	r1, [r7, #0]
    2194:	6878      	ldr	r0, [r7, #4]
    2196:	4b03      	ldr	r3, [pc, #12]	; (21a4 <_ZlsIA26_cER5PrintS2_RKT_+0x1c>)
    2198:	4798      	blx	r3
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	4618      	mov	r0, r3
    219e:	3708      	adds	r7, #8
    21a0:	46bd      	mov	sp, r7
    21a2:	bd80      	pop	{r7, pc}
    21a4:	000185e5 	.word	0x000185e5

000021a8 <_Z41__static_initialization_and_destruction_0ii>:
Interfaces_Class	interfaces;
    21a8:	b580      	push	{r7, lr}
    21aa:	b082      	sub	sp, #8
    21ac:	af00      	add	r7, sp, #0
    21ae:	6078      	str	r0, [r7, #4]
    21b0:	6039      	str	r1, [r7, #0]
    21b2:	687b      	ldr	r3, [r7, #4]
    21b4:	2b01      	cmp	r3, #1
    21b6:	d11c      	bne.n	21f2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    21b8:	683b      	ldr	r3, [r7, #0]
    21ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    21be:	4293      	cmp	r3, r2
    21c0:	d117      	bne.n	21f2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    21c2:	480e      	ldr	r0, [pc, #56]	; (21fc <_Z41__static_initialization_and_destruction_0ii+0x54>)
    21c4:	4b0e      	ldr	r3, [pc, #56]	; (2200 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    21c6:	4798      	blx	r3
    21c8:	4a0e      	ldr	r2, [pc, #56]	; (2204 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    21ca:	490f      	ldr	r1, [pc, #60]	; (2208 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    21cc:	480b      	ldr	r0, [pc, #44]	; (21fc <_Z41__static_initialization_and_destruction_0ii+0x54>)
    21ce:	4b0f      	ldr	r3, [pc, #60]	; (220c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    21d0:	4798      	blx	r3
    21d2:	480f      	ldr	r0, [pc, #60]	; (2210 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    21d4:	4b0f      	ldr	r3, [pc, #60]	; (2214 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    21d6:	4798      	blx	r3
    21d8:	4a0a      	ldr	r2, [pc, #40]	; (2204 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    21da:	490f      	ldr	r1, [pc, #60]	; (2218 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    21dc:	480c      	ldr	r0, [pc, #48]	; (2210 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    21de:	4b0b      	ldr	r3, [pc, #44]	; (220c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    21e0:	4798      	blx	r3
    21e2:	480e      	ldr	r0, [pc, #56]	; (221c <_Z41__static_initialization_and_destruction_0ii+0x74>)
    21e4:	4b0e      	ldr	r3, [pc, #56]	; (2220 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    21e6:	4798      	blx	r3
    21e8:	4a06      	ldr	r2, [pc, #24]	; (2204 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    21ea:	490e      	ldr	r1, [pc, #56]	; (2224 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    21ec:	480b      	ldr	r0, [pc, #44]	; (221c <_Z41__static_initialization_and_destruction_0ii+0x74>)
    21ee:	4b07      	ldr	r3, [pc, #28]	; (220c <_Z41__static_initialization_and_destruction_0ii+0x64>)
    21f0:	4798      	blx	r3
    21f2:	bf00      	nop
    21f4:	3708      	adds	r7, #8
    21f6:	46bd      	mov	sp, r7
    21f8:	bd80      	pop	{r7, pc}
    21fa:	bf00      	nop
    21fc:	2000163c 	.word	0x2000163c
    2200:	00002d21 	.word	0x00002d21
    2204:	20000000 	.word	0x20000000
    2208:	00002d3b 	.word	0x00002d3b
    220c:	00019d1d 	.word	0x00019d1d
    2210:	20001650 	.word	0x20001650
    2214:	00000fb5 	.word	0x00000fb5
    2218:	00000fcf 	.word	0x00000fcf
    221c:	2000165c 	.word	0x2000165c
    2220:	00001d99 	.word	0x00001d99
    2224:	00001dad 	.word	0x00001dad

00002228 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
    2228:	b580      	push	{r7, lr}
    222a:	af00      	add	r7, sp, #0
    222c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2230:	2001      	movs	r0, #1
    2232:	4b01      	ldr	r3, [pc, #4]	; (2238 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
    2234:	4798      	blx	r3
    2236:	bd80      	pop	{r7, pc}
    2238:	000021a9 	.word	0x000021a9

0000223c <main>:
		
	}
}

int main(void)
{
    223c:	b580      	push	{r7, lr}
    223e:	b082      	sub	sp, #8
    2240:	af00      	add	r7, sp, #0
	atmel_start_init();
    2242:	4b40      	ldr	r3, [pc, #256]	; (2344 <main+0x108>)
    2244:	4798      	blx	r3
//  	uint32_t p=pwm_enable(&LIVE_PULSE);
//  	while (1);

	usb.Init();
    2246:	4840      	ldr	r0, [pc, #256]	; (2348 <main+0x10c>)
    2248:	4b40      	ldr	r3, [pc, #256]	; (234c <main+0x110>)
    224a:	4798      	blx	r3
	delay_ms(100);
    224c:	2064      	movs	r0, #100	; 0x64
    224e:	4b40      	ldr	r3, [pc, #256]	; (2350 <main+0x114>)
    2250:	4798      	blx	r3
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    2252:	4940      	ldr	r1, [pc, #256]	; (2354 <main+0x118>)
    2254:	483c      	ldr	r0, [pc, #240]	; (2348 <main+0x10c>)
    2256:	4b40      	ldr	r3, [pc, #256]	; (2358 <main+0x11c>)
    2258:	4798      	blx	r3
    225a:	4603      	mov	r3, r0
    225c:	493d      	ldr	r1, [pc, #244]	; (2354 <main+0x118>)
    225e:	4618      	mov	r0, r3
    2260:	4b3d      	ldr	r3, [pc, #244]	; (2358 <main+0x11c>)
    2262:	4798      	blx	r3
    2264:	4603      	mov	r3, r0
    2266:	493d      	ldr	r1, [pc, #244]	; (235c <main+0x120>)
    2268:	4618      	mov	r0, r3
    226a:	4b3d      	ldr	r3, [pc, #244]	; (2360 <main+0x124>)
    226c:	4798      	blx	r3
    226e:	4603      	mov	r3, r0
    2270:	4938      	ldr	r1, [pc, #224]	; (2354 <main+0x118>)
    2272:	4618      	mov	r0, r3
    2274:	4b38      	ldr	r3, [pc, #224]	; (2358 <main+0x11c>)
    2276:	4798      	blx	r3
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
    2278:	493a      	ldr	r1, [pc, #232]	; (2364 <main+0x128>)
    227a:	4833      	ldr	r0, [pc, #204]	; (2348 <main+0x10c>)
    227c:	4b3a      	ldr	r3, [pc, #232]	; (2368 <main+0x12c>)
    227e:	4798      	blx	r3
    2280:	4603      	mov	r3, r0
    2282:	493a      	ldr	r1, [pc, #232]	; (236c <main+0x130>)
    2284:	4618      	mov	r0, r3
    2286:	4b38      	ldr	r3, [pc, #224]	; (2368 <main+0x12c>)
    2288:	4798      	blx	r3
    228a:	4603      	mov	r3, r0
    228c:	4938      	ldr	r1, [pc, #224]	; (2370 <main+0x134>)
    228e:	4618      	mov	r0, r3
    2290:	4b38      	ldr	r3, [pc, #224]	; (2374 <main+0x138>)
    2292:	4798      	blx	r3
    2294:	4603      	mov	r3, r0
    2296:	4938      	ldr	r1, [pc, #224]	; (2378 <main+0x13c>)
    2298:	4618      	mov	r0, r3
    229a:	4b38      	ldr	r3, [pc, #224]	; (237c <main+0x140>)
    229c:	4798      	blx	r3
    229e:	4603      	mov	r3, r0
    22a0:	492c      	ldr	r1, [pc, #176]	; (2354 <main+0x118>)
    22a2:	4618      	mov	r0, r3
    22a4:	4b2c      	ldr	r3, [pc, #176]	; (2358 <main+0x11c>)
    22a6:	4798      	blx	r3
    22a8:	4603      	mov	r3, r0
    22aa:	492a      	ldr	r1, [pc, #168]	; (2354 <main+0x118>)
    22ac:	4618      	mov	r0, r3
    22ae:	4b2a      	ldr	r3, [pc, #168]	; (2358 <main+0x11c>)
    22b0:	4798      	blx	r3
	//QSPIDriverTest();
	memory.Init();
    22b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    22b6:	4832      	ldr	r0, [pc, #200]	; (2380 <main+0x144>)
    22b8:	4b32      	ldr	r3, [pc, #200]	; (2384 <main+0x148>)
    22ba:	4798      	blx	r3
	alu.Init();
    22bc:	4832      	ldr	r0, [pc, #200]	; (2388 <main+0x14c>)
    22be:	4b33      	ldr	r3, [pc, #204]	; (238c <main+0x150>)
    22c0:	4798      	blx	r3
	alu.RunController();
    22c2:	4831      	ldr	r0, [pc, #196]	; (2388 <main+0x14c>)
    22c4:	4b32      	ldr	r3, [pc, #200]	; (2390 <main+0x154>)
    22c6:	4798      	blx	r3
	usb<<"*** ALU initiated ***"<<NEWLINE;
    22c8:	4932      	ldr	r1, [pc, #200]	; (2394 <main+0x158>)
    22ca:	481f      	ldr	r0, [pc, #124]	; (2348 <main+0x10c>)
    22cc:	4b32      	ldr	r3, [pc, #200]	; (2398 <main+0x15c>)
    22ce:	4798      	blx	r3
    22d0:	4603      	mov	r3, r0
    22d2:	4920      	ldr	r1, [pc, #128]	; (2354 <main+0x118>)
    22d4:	4618      	mov	r0, r3
    22d6:	4b20      	ldr	r3, [pc, #128]	; (2358 <main+0x11c>)
    22d8:	4798      	blx	r3
	uint8_t	line= alu.GetSelectedAMMC();
    22da:	482b      	ldr	r0, [pc, #172]	; (2388 <main+0x14c>)
    22dc:	4b2f      	ldr	r3, [pc, #188]	; (239c <main+0x160>)
    22de:	4798      	blx	r3
    22e0:	4603      	mov	r3, r0
    22e2:	71fb      	strb	r3, [r7, #7]
	usb<<"Active line: "<<line<<NEWLINE;
    22e4:	492e      	ldr	r1, [pc, #184]	; (23a0 <main+0x164>)
    22e6:	4818      	ldr	r0, [pc, #96]	; (2348 <main+0x10c>)
    22e8:	4b2e      	ldr	r3, [pc, #184]	; (23a4 <main+0x168>)
    22ea:	4798      	blx	r3
    22ec:	4602      	mov	r2, r0
    22ee:	1dfb      	adds	r3, r7, #7
    22f0:	4619      	mov	r1, r3
    22f2:	4610      	mov	r0, r2
    22f4:	4b2c      	ldr	r3, [pc, #176]	; (23a8 <main+0x16c>)
    22f6:	4798      	blx	r3
    22f8:	4603      	mov	r3, r0
    22fa:	4916      	ldr	r1, [pc, #88]	; (2354 <main+0x118>)
    22fc:	4618      	mov	r0, r3
    22fe:	4b16      	ldr	r3, [pc, #88]	; (2358 <main+0x11c>)
    2300:	4798      	blx	r3
	if (!pBit)
    2302:	482a      	ldr	r0, [pc, #168]	; (23ac <main+0x170>)
    2304:	4b2a      	ldr	r3, [pc, #168]	; (23b0 <main+0x174>)
    2306:	4798      	blx	r3
    2308:	4603      	mov	r3, r0
    230a:	f083 0301 	eor.w	r3, r3, #1
    230e:	b2db      	uxtb	r3, r3
    2310:	2b00      	cmp	r3, #0
    2312:	d004      	beq.n	231e <main+0xe2>
	{
		hvac.Stop(0);
    2314:	2100      	movs	r1, #0
    2316:	4827      	ldr	r0, [pc, #156]	; (23b4 <main+0x178>)
    2318:	4b27      	ldr	r3, [pc, #156]	; (23b8 <main+0x17c>)
    231a:	4798      	blx	r3
    231c:	e003      	b.n	2326 <main+0xea>
	} 
	else
	{
		hvac.Start(0);
    231e:	2100      	movs	r1, #0
    2320:	4824      	ldr	r0, [pc, #144]	; (23b4 <main+0x178>)
    2322:	4b26      	ldr	r3, [pc, #152]	; (23bc <main+0x180>)
    2324:	4798      	blx	r3
	}
    /* Replace with your application code */
    while (1) 
    {
		delay_ms(1000);
    2326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    232a:	4b09      	ldr	r3, [pc, #36]	; (2350 <main+0x114>)
    232c:	4798      	blx	r3
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    232e:	490b      	ldr	r1, [pc, #44]	; (235c <main+0x120>)
    2330:	4805      	ldr	r0, [pc, #20]	; (2348 <main+0x10c>)
    2332:	4b0b      	ldr	r3, [pc, #44]	; (2360 <main+0x124>)
    2334:	4798      	blx	r3
    2336:	4603      	mov	r3, r0
    2338:	4906      	ldr	r1, [pc, #24]	; (2354 <main+0x118>)
    233a:	4618      	mov	r0, r3
    233c:	4b06      	ldr	r3, [pc, #24]	; (2358 <main+0x11c>)
    233e:	4798      	blx	r3
		delay_ms(1000);
    2340:	e7f1      	b.n	2326 <main+0xea>
    2342:	bf00      	nop
    2344:	00004b39 	.word	0x00004b39
    2348:	2000a4d0 	.word	0x2000a4d0
    234c:	00018131 	.word	0x00018131
    2350:	000067d5 	.word	0x000067d5
    2354:	0002072c 	.word	0x0002072c
    2358:	00000c99 	.word	0x00000c99
    235c:	00020764 	.word	0x00020764
    2360:	000023c1 	.word	0x000023c1
    2364:	00020788 	.word	0x00020788
    2368:	000023e1 	.word	0x000023e1
    236c:	00020794 	.word	0x00020794
    2370:	000207a0 	.word	0x000207a0
    2374:	00002401 	.word	0x00002401
    2378:	000207a8 	.word	0x000207a8
    237c:	00002421 	.word	0x00002421
    2380:	200026f4 	.word	0x200026f4
    2384:	000025f9 	.word	0x000025f9
    2388:	20000c80 	.word	0x20000c80
    238c:	00000481 	.word	0x00000481
    2390:	000005e5 	.word	0x000005e5
    2394:	000207b4 	.word	0x000207b4
    2398:	00002441 	.word	0x00002441
    239c:	0000077d 	.word	0x0000077d
    23a0:	000207cc 	.word	0x000207cc
    23a4:	00002461 	.word	0x00002461
    23a8:	00000c71 	.word	0x00000c71
    23ac:	200016dc 	.word	0x200016dc
    23b0:	00002d4f 	.word	0x00002d4f
    23b4:	200081c4 	.word	0x200081c4
    23b8:	000041f9 	.word	0x000041f9
    23bc:	00003309 	.word	0x00003309

000023c0 <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    23c0:	b580      	push	{r7, lr}
    23c2:	b082      	sub	sp, #8
    23c4:	af00      	add	r7, sp, #0
    23c6:	6078      	str	r0, [r7, #4]
    23c8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    23ca:	6839      	ldr	r1, [r7, #0]
    23cc:	6878      	ldr	r0, [r7, #4]
    23ce:	4b03      	ldr	r3, [pc, #12]	; (23dc <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
    23d0:	4798      	blx	r3
    23d2:	687b      	ldr	r3, [r7, #4]
    23d4:	4618      	mov	r0, r3
    23d6:	3708      	adds	r7, #8
    23d8:	46bd      	mov	sp, r7
    23da:	bd80      	pop	{r7, pc}
    23dc:	000185e5 	.word	0x000185e5

000023e0 <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    23e0:	b580      	push	{r7, lr}
    23e2:	b082      	sub	sp, #8
    23e4:	af00      	add	r7, sp, #0
    23e6:	6078      	str	r0, [r7, #4]
    23e8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    23ea:	6839      	ldr	r1, [r7, #0]
    23ec:	6878      	ldr	r0, [r7, #4]
    23ee:	4b03      	ldr	r3, [pc, #12]	; (23fc <_ZlsIA12_cER5PrintS2_RKT_+0x1c>)
    23f0:	4798      	blx	r3
    23f2:	687b      	ldr	r3, [r7, #4]
    23f4:	4618      	mov	r0, r3
    23f6:	3708      	adds	r7, #8
    23f8:	46bd      	mov	sp, r7
    23fa:	bd80      	pop	{r7, pc}
    23fc:	000185e5 	.word	0x000185e5

00002400 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2400:	b580      	push	{r7, lr}
    2402:	b082      	sub	sp, #8
    2404:	af00      	add	r7, sp, #0
    2406:	6078      	str	r0, [r7, #4]
    2408:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    240a:	6839      	ldr	r1, [r7, #0]
    240c:	6878      	ldr	r0, [r7, #4]
    240e:	4b03      	ldr	r3, [pc, #12]	; (241c <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
    2410:	4798      	blx	r3
    2412:	687b      	ldr	r3, [r7, #4]
    2414:	4618      	mov	r0, r3
    2416:	3708      	adds	r7, #8
    2418:	46bd      	mov	sp, r7
    241a:	bd80      	pop	{r7, pc}
    241c:	000185e5 	.word	0x000185e5

00002420 <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2420:	b580      	push	{r7, lr}
    2422:	b082      	sub	sp, #8
    2424:	af00      	add	r7, sp, #0
    2426:	6078      	str	r0, [r7, #4]
    2428:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    242a:	6839      	ldr	r1, [r7, #0]
    242c:	6878      	ldr	r0, [r7, #4]
    242e:	4b03      	ldr	r3, [pc, #12]	; (243c <_ZlsIA9_cER5PrintS2_RKT_+0x1c>)
    2430:	4798      	blx	r3
    2432:	687b      	ldr	r3, [r7, #4]
    2434:	4618      	mov	r0, r3
    2436:	3708      	adds	r7, #8
    2438:	46bd      	mov	sp, r7
    243a:	bd80      	pop	{r7, pc}
    243c:	000185e5 	.word	0x000185e5

00002440 <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2440:	b580      	push	{r7, lr}
    2442:	b082      	sub	sp, #8
    2444:	af00      	add	r7, sp, #0
    2446:	6078      	str	r0, [r7, #4]
    2448:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    244a:	6839      	ldr	r1, [r7, #0]
    244c:	6878      	ldr	r0, [r7, #4]
    244e:	4b03      	ldr	r3, [pc, #12]	; (245c <_ZlsIA22_cER5PrintS2_RKT_+0x1c>)
    2450:	4798      	blx	r3
    2452:	687b      	ldr	r3, [r7, #4]
    2454:	4618      	mov	r0, r3
    2456:	3708      	adds	r7, #8
    2458:	46bd      	mov	sp, r7
    245a:	bd80      	pop	{r7, pc}
    245c:	000185e5 	.word	0x000185e5

00002460 <_ZlsIA14_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2460:	b580      	push	{r7, lr}
    2462:	b082      	sub	sp, #8
    2464:	af00      	add	r7, sp, #0
    2466:	6078      	str	r0, [r7, #4]
    2468:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    246a:	6839      	ldr	r1, [r7, #0]
    246c:	6878      	ldr	r0, [r7, #4]
    246e:	4b03      	ldr	r3, [pc, #12]	; (247c <_ZlsIA14_cER5PrintS2_RKT_+0x1c>)
    2470:	4798      	blx	r3
    2472:	687b      	ldr	r3, [r7, #4]
    2474:	4618      	mov	r0, r3
    2476:	3708      	adds	r7, #8
    2478:	46bd      	mov	sp, r7
    247a:	bd80      	pop	{r7, pc}
    247c:	000185e5 	.word	0x000185e5

00002480 <_Z41__static_initialization_and_destruction_0ii>:
    }
}
    2480:	b580      	push	{r7, lr}
    2482:	b082      	sub	sp, #8
    2484:	af00      	add	r7, sp, #0
    2486:	6078      	str	r0, [r7, #4]
    2488:	6039      	str	r1, [r7, #0]
    248a:	687b      	ldr	r3, [r7, #4]
    248c:	2b01      	cmp	r3, #1
    248e:	d114      	bne.n	24ba <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2490:	683b      	ldr	r3, [r7, #0]
    2492:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2496:	4293      	cmp	r3, r2
    2498:	d10f      	bne.n	24ba <_Z41__static_initialization_and_destruction_0ii+0x3a>
    249a:	480a      	ldr	r0, [pc, #40]	; (24c4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    249c:	4b0a      	ldr	r3, [pc, #40]	; (24c8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    249e:	4798      	blx	r3
    24a0:	4a0a      	ldr	r2, [pc, #40]	; (24cc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    24a2:	490b      	ldr	r1, [pc, #44]	; (24d0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    24a4:	4807      	ldr	r0, [pc, #28]	; (24c4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    24a6:	4b0b      	ldr	r3, [pc, #44]	; (24d4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    24a8:	4798      	blx	r3
    24aa:	480b      	ldr	r0, [pc, #44]	; (24d8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    24ac:	4b0b      	ldr	r3, [pc, #44]	; (24dc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    24ae:	4798      	blx	r3
    24b0:	4a06      	ldr	r2, [pc, #24]	; (24cc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    24b2:	490b      	ldr	r1, [pc, #44]	; (24e0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    24b4:	4808      	ldr	r0, [pc, #32]	; (24d8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    24b6:	4b07      	ldr	r3, [pc, #28]	; (24d4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    24b8:	4798      	blx	r3
    24ba:	bf00      	nop
    24bc:	3708      	adds	r7, #8
    24be:	46bd      	mov	sp, r7
    24c0:	bd80      	pop	{r7, pc}
    24c2:	bf00      	nop
    24c4:	200016dc 	.word	0x200016dc
    24c8:	00002d21 	.word	0x00002d21
    24cc:	20000000 	.word	0x20000000
    24d0:	00002d3b 	.word	0x00002d3b
    24d4:	00019d1d 	.word	0x00019d1d
    24d8:	200016f0 	.word	0x200016f0
    24dc:	00000fb5 	.word	0x00000fb5
    24e0:	00000fcf 	.word	0x00000fcf

000024e4 <_GLOBAL__sub_I__Z14QSPIDriverTestv>:
    24e4:	b580      	push	{r7, lr}
    24e6:	af00      	add	r7, sp, #0
    24e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    24ec:	2001      	movs	r0, #1
    24ee:	4b01      	ldr	r3, [pc, #4]	; (24f4 <_GLOBAL__sub_I__Z14QSPIDriverTestv+0x10>)
    24f0:	4798      	blx	r3
    24f2:	bd80      	pop	{r7, pc}
    24f4:	00002481 	.word	0x00002481

000024f8 <_ZN19PersistenceServicesD1Ev>:

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
    24f8:	b580      	push	{r7, lr}
    24fa:	b082      	sub	sp, #8
    24fc:	af00      	add	r7, sp, #0
    24fe:	6078      	str	r0, [r7, #4]
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	4618      	mov	r0, r3
    2504:	4b03      	ldr	r3, [pc, #12]	; (2514 <_ZN19PersistenceServicesD1Ev+0x1c>)
    2506:	4798      	blx	r3
    2508:	687b      	ldr	r3, [r7, #4]
    250a:	4618      	mov	r0, r3
    250c:	3708      	adds	r7, #8
    250e:	46bd      	mov	sp, r7
    2510:	bd80      	pop	{r7, pc}
    2512:	bf00      	nop
    2514:	000014e1 	.word	0x000014e1

00002518 <_ZN21MemoryManagment_ClassC1Ev>:
#include "CDC_Class.h"

static	uint8_t	flashBufferStatic[QSPI_ERBLK/1];

// default constructor
MemoryManagment_Class::MemoryManagment_Class()
    2518:	b580      	push	{r7, lr}
    251a:	b082      	sub	sp, #8
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
    2520:	687b      	ldr	r3, [r7, #4]
    2522:	4618      	mov	r0, r3
    2524:	4b1a      	ldr	r3, [pc, #104]	; (2590 <_ZN21MemoryManagment_ClassC1Ev+0x78>)
    2526:	4798      	blx	r3
    2528:	687b      	ldr	r3, [r7, #4]
    252a:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    252e:	4618      	mov	r0, r3
    2530:	4b18      	ldr	r3, [pc, #96]	; (2594 <_ZN21MemoryManagment_ClassC1Ev+0x7c>)
    2532:	4798      	blx	r3
    2534:	687b      	ldr	r3, [r7, #4]
    2536:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
    253a:	4618      	mov	r0, r3
    253c:	4b16      	ldr	r3, [pc, #88]	; (2598 <_ZN21MemoryManagment_ClassC1Ev+0x80>)
    253e:	4798      	blx	r3
    2540:	687b      	ldr	r3, [r7, #4]
    2542:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    2546:	4618      	mov	r0, r3
    2548:	4b14      	ldr	r3, [pc, #80]	; (259c <_ZN21MemoryManagment_ClassC1Ev+0x84>)
    254a:	4798      	blx	r3
    254c:	687b      	ldr	r3, [r7, #4]
    254e:	f203 733c 	addw	r3, r3, #1852	; 0x73c
    2552:	4618      	mov	r0, r3
    2554:	4b12      	ldr	r3, [pc, #72]	; (25a0 <_ZN21MemoryManagment_ClassC1Ev+0x88>)
    2556:	4798      	blx	r3
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	2200      	movs	r2, #0
    255c:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
{
	_currentAddress=0;
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	2200      	movs	r2, #0
    2564:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
	head=512;
    2568:	687b      	ldr	r3, [r7, #4]
    256a:	f44f 7200 	mov.w	r2, #512	; 0x200
    256e:	f8c3 2974 	str.w	r2, [r3, #2420]	; 0x974
	tail=0;
    2572:	687b      	ldr	r3, [r7, #4]
    2574:	2200      	movs	r2, #0
    2576:	f8c3 2978 	str.w	r2, [r3, #2424]	; 0x978
	flashBuffer=&flashBufferStatic[0];
    257a:	687b      	ldr	r3, [r7, #4]
    257c:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2580:	3330      	adds	r3, #48	; 0x30
    2582:	4a08      	ldr	r2, [pc, #32]	; (25a4 <_ZN21MemoryManagment_ClassC1Ev+0x8c>)
    2584:	601a      	str	r2, [r3, #0]
	
} //MemoryManagment_Class
    2586:	687b      	ldr	r3, [r7, #4]
    2588:	4618      	mov	r0, r3
    258a:	3708      	adds	r7, #8
    258c:	46bd      	mov	sp, r7
    258e:	bd80      	pop	{r7, pc}
    2590:	000015b5 	.word	0x000015b5
    2594:	00002e25 	.word	0x00002e25
    2598:	00001a41 	.word	0x00001a41
    259c:	00002929 	.word	0x00002929
    25a0:	00001619 	.word	0x00001619
    25a4:	200016f4 	.word	0x200016f4

000025a8 <_ZN21MemoryManagment_ClassD1Ev>:



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
    25a8:	b580      	push	{r7, lr}
    25aa:	b082      	sub	sp, #8
    25ac:	af00      	add	r7, sp, #0
    25ae:	6078      	str	r0, [r7, #4]
    25b0:	687b      	ldr	r3, [r7, #4]
    25b2:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    25b6:	4618      	mov	r0, r3
    25b8:	4b0b      	ldr	r3, [pc, #44]	; (25e8 <_ZN21MemoryManagment_ClassD1Ev+0x40>)
    25ba:	4798      	blx	r3
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
    25c2:	4618      	mov	r0, r3
    25c4:	4b09      	ldr	r3, [pc, #36]	; (25ec <_ZN21MemoryManagment_ClassD1Ev+0x44>)
    25c6:	4798      	blx	r3
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    25ce:	4618      	mov	r0, r3
    25d0:	4b07      	ldr	r3, [pc, #28]	; (25f0 <_ZN21MemoryManagment_ClassD1Ev+0x48>)
    25d2:	4798      	blx	r3
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	4618      	mov	r0, r3
    25d8:	4b06      	ldr	r3, [pc, #24]	; (25f4 <_ZN21MemoryManagment_ClassD1Ev+0x4c>)
    25da:	4798      	blx	r3
{
} //~MemoryManagment_Class
    25dc:	687b      	ldr	r3, [r7, #4]
    25de:	4618      	mov	r0, r3
    25e0:	3708      	adds	r7, #8
    25e2:	46bd      	mov	sp, r7
    25e4:	bd80      	pop	{r7, pc}
    25e6:	bf00      	nop
    25e8:	0000293d 	.word	0x0000293d
    25ec:	00001a55 	.word	0x00001a55
    25f0:	000024f9 	.word	0x000024f9
    25f4:	000015e5 	.word	0x000015e5

000025f8 <_ZN21MemoryManagment_Class4InitEm>:

bool	MemoryManagment_Class::Init(uint32_t flashChipSize){
    25f8:	b580      	push	{r7, lr}
    25fa:	b082      	sub	sp, #8
    25fc:	af00      	add	r7, sp, #0
    25fe:	6078      	str	r0, [r7, #4]
    2600:	6039      	str	r1, [r7, #0]
		if (qspiFlash.Init())
    2602:	481d      	ldr	r0, [pc, #116]	; (2678 <_ZN21MemoryManagment_Class4InitEm+0x80>)
    2604:	4b1d      	ldr	r3, [pc, #116]	; (267c <_ZN21MemoryManagment_Class4InitEm+0x84>)
    2606:	4798      	blx	r3
    2608:	4603      	mov	r3, r0
    260a:	2b00      	cmp	r3, #0
    260c:	d009      	beq.n	2622 <_ZN21MemoryManagment_Class4InitEm+0x2a>
		{
			usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
    260e:	491c      	ldr	r1, [pc, #112]	; (2680 <_ZN21MemoryManagment_Class4InitEm+0x88>)
    2610:	481c      	ldr	r0, [pc, #112]	; (2684 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    2612:	4b1d      	ldr	r3, [pc, #116]	; (2688 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    2614:	4798      	blx	r3
    2616:	4603      	mov	r3, r0
    2618:	491c      	ldr	r1, [pc, #112]	; (268c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    261a:	4618      	mov	r0, r3
    261c:	4b1c      	ldr	r3, [pc, #112]	; (2690 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    261e:	4798      	blx	r3
    2620:	e008      	b.n	2634 <_ZN21MemoryManagment_Class4InitEm+0x3c>
		} 
		else
		{
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
    2622:	491c      	ldr	r1, [pc, #112]	; (2694 <_ZN21MemoryManagment_Class4InitEm+0x9c>)
    2624:	4817      	ldr	r0, [pc, #92]	; (2684 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    2626:	4b18      	ldr	r3, [pc, #96]	; (2688 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    2628:	4798      	blx	r3
    262a:	4603      	mov	r3, r0
    262c:	4917      	ldr	r1, [pc, #92]	; (268c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    262e:	4618      	mov	r0, r3
    2630:	4b17      	ldr	r3, [pc, #92]	; (2690 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    2632:	4798      	blx	r3
		}
		if (eeprom.Init())
    2634:	4818      	ldr	r0, [pc, #96]	; (2698 <_ZN21MemoryManagment_Class4InitEm+0xa0>)
    2636:	4b19      	ldr	r3, [pc, #100]	; (269c <_ZN21MemoryManagment_Class4InitEm+0xa4>)
    2638:	4798      	blx	r3
    263a:	4603      	mov	r3, r0
    263c:	2b00      	cmp	r3, #0
    263e:	d009      	beq.n	2654 <_ZN21MemoryManagment_Class4InitEm+0x5c>
		{
			usb<<"EEPROM Memory SelfTest PASSED"<<NEWLINE;
    2640:	4917      	ldr	r1, [pc, #92]	; (26a0 <_ZN21MemoryManagment_Class4InitEm+0xa8>)
    2642:	4810      	ldr	r0, [pc, #64]	; (2684 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    2644:	4b17      	ldr	r3, [pc, #92]	; (26a4 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    2646:	4798      	blx	r3
    2648:	4603      	mov	r3, r0
    264a:	4910      	ldr	r1, [pc, #64]	; (268c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    264c:	4618      	mov	r0, r3
    264e:	4b10      	ldr	r3, [pc, #64]	; (2690 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    2650:	4798      	blx	r3
    2652:	e008      	b.n	2666 <_ZN21MemoryManagment_Class4InitEm+0x6e>
		
		} 
		else
		{
			usb<<"EEPROM Memory SelfTest FAILED"<<NEWLINE;
    2654:	4914      	ldr	r1, [pc, #80]	; (26a8 <_ZN21MemoryManagment_Class4InitEm+0xb0>)
    2656:	480b      	ldr	r0, [pc, #44]	; (2684 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    2658:	4b12      	ldr	r3, [pc, #72]	; (26a4 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    265a:	4798      	blx	r3
    265c:	4603      	mov	r3, r0
    265e:	490b      	ldr	r1, [pc, #44]	; (268c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    2660:	4618      	mov	r0, r3
    2662:	4b0b      	ldr	r3, [pc, #44]	; (2690 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    2664:	4798      	blx	r3
		}
		
		SetChipID(flashChipSize);
    2666:	6839      	ldr	r1, [r7, #0]
    2668:	6878      	ldr	r0, [r7, #4]
    266a:	4b10      	ldr	r3, [pc, #64]	; (26ac <_ZN21MemoryManagment_Class4InitEm+0xb4>)
    266c:	4798      	blx	r3
}
    266e:	bf00      	nop
    2670:	4618      	mov	r0, r3
    2672:	3708      	adds	r7, #8
    2674:	46bd      	mov	sp, r7
    2676:	bd80      	pop	{r7, pc}
    2678:	2000a018 	.word	0x2000a018
    267c:	00016ce1 	.word	0x00016ce1
    2680:	000207dc 	.word	0x000207dc
    2684:	2000a4d0 	.word	0x2000a4d0
    2688:	000028ad 	.word	0x000028ad
    268c:	000207fc 	.word	0x000207fc
    2690:	00000c99 	.word	0x00000c99
    2694:	00020800 	.word	0x00020800
    2698:	20009f7c 	.word	0x20009f7c
    269c:	0001627d 	.word	0x0001627d
    26a0:	00020820 	.word	0x00020820
    26a4:	00000cb9 	.word	0x00000cb9
    26a8:	00020840 	.word	0x00020840
    26ac:	000026dd 	.word	0x000026dd

000026b0 <_ZN21MemoryManagment_Class13_troubleshootEhb>:
 uint8_t	MemoryManagment_Class::GetErrorCode(){
	 
	 // PLease don forget to do the real impelementation
	 return	0;
 }
  void MemoryManagment_Class::_troubleshoot(uint8_t _code, bool printoverride) {
    26b0:	b580      	push	{r7, lr}
    26b2:	b082      	sub	sp, #8
    26b4:	af00      	add	r7, sp, #0
    26b6:	6078      	str	r0, [r7, #4]
    26b8:	460b      	mov	r3, r1
    26ba:	70fb      	strb	r3, [r7, #3]
    26bc:	4613      	mov	r3, r2
    26be:	70bb      	strb	r3, [r7, #2]
	  diagnostics.troubleshoot(_code, printoverride);
    26c0:	78ba      	ldrb	r2, [r7, #2]
    26c2:	78fb      	ldrb	r3, [r7, #3]
    26c4:	4619      	mov	r1, r3
    26c6:	4803      	ldr	r0, [pc, #12]	; (26d4 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x24>)
    26c8:	4b03      	ldr	r3, [pc, #12]	; (26d8 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x28>)
    26ca:	4798      	blx	r3
  }
    26cc:	bf00      	nop
    26ce:	3708      	adds	r7, #8
    26d0:	46bd      	mov	sp, r7
    26d2:	bd80      	pop	{r7, pc}
    26d4:	20009308 	.word	0x20009308
    26d8:	0001496d 	.word	0x0001496d

000026dc <_ZN21MemoryManagment_Class9SetChipIDEm>:

 bool MemoryManagment_Class::SetChipID(uint32_t flashChipSize) {
    26dc:	b580      	push	{r7, lr}
    26de:	b082      	sub	sp, #8
    26e0:	af00      	add	r7, sp, #0
    26e2:	6078      	str	r0, [r7, #4]
    26e4:	6039      	str	r1, [r7, #0]
	 //set some default values

	 logArea.capacity =GetMemoryCapacity();
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	4618      	mov	r0, r3
    26ea:	4b12      	ldr	r3, [pc, #72]	; (2734 <_ZN21MemoryManagment_Class9SetChipIDEm+0x58>)
    26ec:	4798      	blx	r3
    26ee:	4602      	mov	r2, r0
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	f8c3 2968 	str.w	r2, [r3, #2408]	; 0x968


	 if (!logArea.capacity) {
    26f6:	687b      	ldr	r3, [r7, #4]
    26f8:	f8d3 3968 	ldr.w	r3, [r3, #2408]	; 0x968
    26fc:	2b00      	cmp	r3, #0
    26fe:	d113      	bne.n	2728 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4c>
		 #ifdef RUNDIAGNOSTIC
		 usb.println(F("Chip capacity cannot be identified"));
		 #endif
		 if (flashChipSize) {
    2700:	683b      	ldr	r3, [r7, #0]
    2702:	2b00      	cmp	r3, #0
    2704:	d009      	beq.n	271a <_ZN21MemoryManagment_Class9SetChipIDEm+0x3e>
			 // If a custom chip size is defined
			 #ifdef RUNDIAGNOSTIC
			 usb.println(F("Custom Chipsize defined"));
			 #endif
			 logArea.capacity = flashChipSize;
    2706:	687b      	ldr	r3, [r7, #4]
    2708:	683a      	ldr	r2, [r7, #0]
    270a:	f8c3 2968 	str.w	r2, [r3, #2408]	; 0x968
			 logArea.supported = false;
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	2200      	movs	r2, #0
    2712:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
			 return true;
    2716:	2301      	movs	r3, #1
    2718:	e007      	b.n	272a <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

		 else {
			 _troubleshoot(UNKNOWNCAP);
    271a:	2200      	movs	r2, #0
    271c:	2103      	movs	r1, #3
    271e:	6878      	ldr	r0, [r7, #4]
    2720:	4b05      	ldr	r3, [pc, #20]	; (2738 <_ZN21MemoryManagment_Class9SetChipIDEm+0x5c>)
    2722:	4798      	blx	r3
			 return false;
    2724:	2300      	movs	r3, #0
    2726:	e000      	b.n	272a <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

	 }
	 return true;
    2728:	2301      	movs	r3, #1
 }
    272a:	4618      	mov	r0, r3
    272c:	3708      	adds	r7, #8
    272e:	46bd      	mov	sp, r7
    2730:	bd80      	pop	{r7, pc}
    2732:	bf00      	nop
    2734:	00016e61 	.word	0x00016e61
    2738:	000026b1 	.word	0x000026b1

0000273c <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState>:
	handlerAppState=PTR_HVAC_STATE(&as);
	uint32_t	add=(uint32_t )(&flashMap->hvacStateSector.hvacDefaultState);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
	return	r;
}
 uint32_t	MemoryManagment_Class::WriteValidApplicationState(HVACState& hs ){
    273c:	b580      	push	{r7, lr}
    273e:	b084      	sub	sp, #16
    2740:	af00      	add	r7, sp, #0
    2742:	6078      	str	r0, [r7, #4]
    2744:	6039      	str	r1, [r7, #0]
	uint32_t w=  WriteCurrentState(hs);
    2746:	687b      	ldr	r3, [r7, #4]
    2748:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    274c:	6839      	ldr	r1, [r7, #0]
    274e:	4618      	mov	r0, r3
    2750:	4b11      	ldr	r3, [pc, #68]	; (2798 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x5c>)
    2752:	4798      	blx	r3
    2754:	60f8      	str	r0, [r7, #12]
	crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    2756:	687b      	ldr	r3, [r7, #4]
    2758:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    275c:	2268      	movs	r2, #104	; 0x68
    275e:	6839      	ldr	r1, [r7, #0]
    2760:	4618      	mov	r0, r3
    2762:	4b0e      	ldr	r3, [pc, #56]	; (279c <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x60>)
    2764:	4798      	blx	r3
    2766:	4602      	mov	r2, r0
    2768:	687b      	ldr	r3, [r7, #4]
    276a:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    276e:	332c      	adds	r3, #44	; 0x2c
    2770:	601a      	str	r2, [r3, #0]
	w=WriteCRCAppState(crc32);
    2772:	687b      	ldr	r3, [r7, #4]
    2774:	f503 62d0 	add.w	r2, r3, #1664	; 0x680
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    277e:	332c      	adds	r3, #44	; 0x2c
    2780:	681b      	ldr	r3, [r3, #0]
    2782:	4619      	mov	r1, r3
    2784:	4610      	mov	r0, r2
    2786:	4b06      	ldr	r3, [pc, #24]	; (27a0 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x64>)
    2788:	4798      	blx	r3
    278a:	60f8      	str	r0, [r7, #12]
	return	w;
    278c:	68fb      	ldr	r3, [r7, #12]
 }
    278e:	4618      	mov	r0, r3
    2790:	3710      	adds	r7, #16
    2792:	46bd      	mov	sp, r7
    2794:	bd80      	pop	{r7, pc}
    2796:	bf00      	nop
    2798:	00002be1 	.word	0x00002be1
    279c:	00001551 	.word	0x00001551
    27a0:	00002c51 	.word	0x00002c51

000027a4 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState>:
 uint32_t	MemoryManagment_Class::WriteValidConfigurationData(ConfigurationData& cd){
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
 };
 uint32_t	MemoryManagment_Class::SaveCurrentState(HVACState& hs){
    27a4:	b590      	push	{r4, r7, lr}
    27a6:	b087      	sub	sp, #28
    27a8:	af00      	add	r7, sp, #0
    27aa:	6078      	str	r0, [r7, #4]
    27ac:	6039      	str	r1, [r7, #0]
	 uint32_t	add=(uint32_t)&flashMap->hvacStateSector;
    27ae:	4b18      	ldr	r3, [pc, #96]	; (2810 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x6c>)
    27b0:	681b      	ldr	r3, [r3, #0]
    27b2:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    27b6:	332c      	adds	r3, #44	; 0x2c
    27b8:	617b      	str	r3, [r7, #20]
	 HVACStateSector	*hss=(HVACStateSector*)&flashBuffer[0];
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    27c0:	3330      	adds	r3, #48	; 0x30
    27c2:	681b      	ldr	r3, [r3, #0]
    27c4:	613b      	str	r3, [r7, #16]
	 uint32_t r=qspiFlash.ReadAddress((uint8_t*)hss,add,QSPI_ERBLK);
    27c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    27ca:	697a      	ldr	r2, [r7, #20]
    27cc:	6939      	ldr	r1, [r7, #16]
    27ce:	4811      	ldr	r0, [pc, #68]	; (2814 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    27d0:	4c11      	ldr	r4, [pc, #68]	; (2818 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x74>)
    27d2:	47a0      	blx	r4
    27d4:	60f8      	str	r0, [r7, #12]
	 if (r==0)
    27d6:	68fb      	ldr	r3, [r7, #12]
    27d8:	2b00      	cmp	r3, #0
    27da:	d114      	bne.n	2806 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x62>
	 {
		 memcpy((void*)&(hss->hvacState),(void*)&hs,sizeof(HVACState));
    27dc:	693b      	ldr	r3, [r7, #16]
    27de:	3370      	adds	r3, #112	; 0x70
    27e0:	2268      	movs	r2, #104	; 0x68
    27e2:	6839      	ldr	r1, [r7, #0]
    27e4:	4618      	mov	r0, r3
    27e6:	4b0d      	ldr	r3, [pc, #52]	; (281c <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x78>)
    27e8:	4798      	blx	r3
		 qspiFlash.Erase(add);
    27ea:	6979      	ldr	r1, [r7, #20]
    27ec:	4809      	ldr	r0, [pc, #36]	; (2814 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    27ee:	4b0c      	ldr	r3, [pc, #48]	; (2820 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x7c>)
    27f0:	4798      	blx	r3
		 uint32_t w=qspiFlash.WriteAddress((uint8_t*)hss,add,QSPI_ERBLK);
    27f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    27f6:	697a      	ldr	r2, [r7, #20]
    27f8:	6939      	ldr	r1, [r7, #16]
    27fa:	4806      	ldr	r0, [pc, #24]	; (2814 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    27fc:	4c09      	ldr	r4, [pc, #36]	; (2824 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x80>)
    27fe:	47a0      	blx	r4
    2800:	60b8      	str	r0, [r7, #8]
		  return	w;
    2802:	68bb      	ldr	r3, [r7, #8]
    2804:	e000      	b.n	2808 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x64>
	 }

	 return	r;
    2806:	68fb      	ldr	r3, [r7, #12]
 }
    2808:	4618      	mov	r0, r3
    280a:	371c      	adds	r7, #28
    280c:	46bd      	mov	sp, r7
    280e:	bd90      	pop	{r4, r7, pc}
    2810:	20008128 	.word	0x20008128
    2814:	2000a018 	.word	0x2000a018
    2818:	00016db1 	.word	0x00016db1
    281c:	0001c485 	.word	0x0001c485
    2820:	00016d4d 	.word	0x00016d4d
    2824:	00016d7d 	.word	0x00016d7d

00002828 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState>:
uint32_t	MemoryManagment_Class::SaveApplicationState(HVACState& hs ){
    2828:	b580      	push	{r7, lr}
    282a:	b084      	sub	sp, #16
    282c:	af00      	add	r7, sp, #0
    282e:	6078      	str	r0, [r7, #4]
    2830:	6039      	str	r1, [r7, #0]
	  uint32_t w=  SaveCurrentState(hs);
    2832:	6839      	ldr	r1, [r7, #0]
    2834:	6878      	ldr	r0, [r7, #4]
    2836:	4b10      	ldr	r3, [pc, #64]	; (2878 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x50>)
    2838:	4798      	blx	r3
    283a:	60f8      	str	r0, [r7, #12]
	  crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    2842:	2268      	movs	r2, #104	; 0x68
    2844:	6839      	ldr	r1, [r7, #0]
    2846:	4618      	mov	r0, r3
    2848:	4b0c      	ldr	r3, [pc, #48]	; (287c <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x54>)
    284a:	4798      	blx	r3
    284c:	4602      	mov	r2, r0
    284e:	687b      	ldr	r3, [r7, #4]
    2850:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2854:	332c      	adds	r3, #44	; 0x2c
    2856:	601a      	str	r2, [r3, #0]
	  w=SaveCRCAppState(crc32);
    2858:	687b      	ldr	r3, [r7, #4]
    285a:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    285e:	332c      	adds	r3, #44	; 0x2c
    2860:	681b      	ldr	r3, [r3, #0]
    2862:	4619      	mov	r1, r3
    2864:	6878      	ldr	r0, [r7, #4]
    2866:	4b06      	ldr	r3, [pc, #24]	; (2880 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x58>)
    2868:	4798      	blx	r3
    286a:	60f8      	str	r0, [r7, #12]
	  return	w;
    286c:	68fb      	ldr	r3, [r7, #12]
  }
    286e:	4618      	mov	r0, r3
    2870:	3710      	adds	r7, #16
    2872:	46bd      	mov	sp, r7
    2874:	bd80      	pop	{r7, pc}
    2876:	bf00      	nop
    2878:	000027a5 	.word	0x000027a5
    287c:	00001551 	.word	0x00001551
    2880:	00002885 	.word	0x00002885

00002884 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm>:
uint32_t	MemoryManagment_Class::SaveCRCAppState(uint32_t crc){
    2884:	b580      	push	{r7, lr}
    2886:	b082      	sub	sp, #8
    2888:	af00      	add	r7, sp, #0
    288a:	6078      	str	r0, [r7, #4]
    288c:	6039      	str	r1, [r7, #0]
// 	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
// 	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
    288e:	687b      	ldr	r3, [r7, #4]
    2890:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    2894:	6839      	ldr	r1, [r7, #0]
    2896:	4618      	mov	r0, r3
    2898:	4b03      	ldr	r3, [pc, #12]	; (28a8 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm+0x24>)
    289a:	4798      	blx	r3
    289c:	4603      	mov	r3, r0
}
    289e:	4618      	mov	r0, r3
    28a0:	3708      	adds	r7, #8
    28a2:	46bd      	mov	sp, r7
    28a4:	bd80      	pop	{r7, pc}
    28a6:	bf00      	nop
    28a8:	00002c51 	.word	0x00002c51

000028ac <_ZlsIA29_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    28ac:	b580      	push	{r7, lr}
    28ae:	b082      	sub	sp, #8
    28b0:	af00      	add	r7, sp, #0
    28b2:	6078      	str	r0, [r7, #4]
    28b4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    28b6:	6839      	ldr	r1, [r7, #0]
    28b8:	6878      	ldr	r0, [r7, #4]
    28ba:	4b03      	ldr	r3, [pc, #12]	; (28c8 <_ZlsIA29_cER5PrintS2_RKT_+0x1c>)
    28bc:	4798      	blx	r3
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	4618      	mov	r0, r3
    28c2:	3708      	adds	r7, #8
    28c4:	46bd      	mov	sp, r7
    28c6:	bd80      	pop	{r7, pc}
    28c8:	000185e5 	.word	0x000185e5

000028cc <_Z41__static_initialization_and_destruction_0ii>:
 
    28cc:	b580      	push	{r7, lr}
    28ce:	b082      	sub	sp, #8
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
    28d4:	6039      	str	r1, [r7, #0]
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	2b01      	cmp	r3, #1
    28da:	d10c      	bne.n	28f6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    28dc:	683b      	ldr	r3, [r7, #0]
    28de:	f64f 72ff 	movw	r2, #65535	; 0xffff
    28e2:	4293      	cmp	r3, r2
    28e4:	d107      	bne.n	28f6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    28e6:	4806      	ldr	r0, [pc, #24]	; (2900 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    28e8:	4b06      	ldr	r3, [pc, #24]	; (2904 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    28ea:	4798      	blx	r3
    28ec:	4a06      	ldr	r2, [pc, #24]	; (2908 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    28ee:	4907      	ldr	r1, [pc, #28]	; (290c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    28f0:	4803      	ldr	r0, [pc, #12]	; (2900 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    28f2:	4b07      	ldr	r3, [pc, #28]	; (2910 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    28f4:	4798      	blx	r3
    28f6:	bf00      	nop
    28f8:	3708      	adds	r7, #8
    28fa:	46bd      	mov	sp, r7
    28fc:	bd80      	pop	{r7, pc}
    28fe:	bf00      	nop
    2900:	200026f4 	.word	0x200026f4
    2904:	00002519 	.word	0x00002519
    2908:	20000000 	.word	0x20000000
    290c:	000025a9 	.word	0x000025a9
    2910:	00019d1d 	.word	0x00019d1d

00002914 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
    2914:	b580      	push	{r7, lr}
    2916:	af00      	add	r7, sp, #0
    2918:	f64f 71ff 	movw	r1, #65535	; 0xffff
    291c:	2001      	movs	r0, #1
    291e:	4b01      	ldr	r3, [pc, #4]	; (2924 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x10>)
    2920:	4798      	blx	r3
    2922:	bd80      	pop	{r7, pc}
    2924:	000028cd 	.word	0x000028cd

00002928 <_ZN18FlashHandler_ClassC1Ev>:


MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
    2928:	b480      	push	{r7}
    292a:	b083      	sub	sp, #12
    292c:	af00      	add	r7, sp, #0
    292e:	6078      	str	r0, [r7, #4]
{
} //MemoryStruct_Class
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	4618      	mov	r0, r3
    2934:	370c      	adds	r7, #12
    2936:	46bd      	mov	sp, r7
    2938:	bc80      	pop	{r7}
    293a:	4770      	bx	lr

0000293c <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
    293c:	b480      	push	{r7}
    293e:	b083      	sub	sp, #12
    2940:	af00      	add	r7, sp, #0
    2942:	6078      	str	r0, [r7, #4]
{
} //~MemoryStruct_Class
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	4618      	mov	r0, r3
    2948:	370c      	adds	r7, #12
    294a:	46bd      	mov	sp, r7
    294c:	bc80      	pop	{r7}
    294e:	4770      	bx	lr

00002950 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData>:

uint32_t	FlashHandler_Class::ReadDefaultConfigurationData(ConfigurationData& cd){
    2950:	b580      	push	{r7, lr}
    2952:	b084      	sub	sp, #16
    2954:	af00      	add	r7, sp, #0
    2956:	6078      	str	r0, [r7, #4]
    2958:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
    295a:	4b08      	ldr	r3, [pc, #32]	; (297c <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x2c>)
    295c:	681b      	ldr	r3, [r3, #0]
    295e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    2962:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    2964:	68fa      	ldr	r2, [r7, #12]
    2966:	6839      	ldr	r1, [r7, #0]
    2968:	6878      	ldr	r0, [r7, #4]
    296a:	4b05      	ldr	r3, [pc, #20]	; (2980 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x30>)
    296c:	4798      	blx	r3
    296e:	60b8      	str	r0, [r7, #8]
	return	r;
    2970:	68bb      	ldr	r3, [r7, #8]
}
    2972:	4618      	mov	r0, r3
    2974:	3710      	adds	r7, #16
    2976:	46bd      	mov	sp, r7
    2978:	bd80      	pop	{r7, pc}
    297a:	bf00      	nop
    297c:	20008128 	.word	0x20008128
    2980:	000029ed 	.word	0x000029ed

00002984 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData>:
uint32_t	FlashHandler_Class::ReadDefaultParameters(UserParameters& up){
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
	uint32_t	r=ReadParameters(up,add);
	return	r;
}
uint32_t	FlashHandler_Class::ReadLastConfigurationData(ConfigurationData& cd){
    2984:	b580      	push	{r7, lr}
    2986:	b084      	sub	sp, #16
    2988:	af00      	add	r7, sp, #0
    298a:	6078      	str	r0, [r7, #4]
    298c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.lastConfiguracion;
    298e:	4b08      	ldr	r3, [pc, #32]	; (29b0 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData+0x2c>)
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
    2996:	332c      	adds	r3, #44	; 0x2c
    2998:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    299a:	68fa      	ldr	r2, [r7, #12]
    299c:	6839      	ldr	r1, [r7, #0]
    299e:	6878      	ldr	r0, [r7, #4]
    29a0:	4b04      	ldr	r3, [pc, #16]	; (29b4 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData+0x30>)
    29a2:	4798      	blx	r3
    29a4:	60b8      	str	r0, [r7, #8]
	return	r;
    29a6:	68bb      	ldr	r3, [r7, #8]
}
    29a8:	4618      	mov	r0, r3
    29aa:	3710      	adds	r7, #16
    29ac:	46bd      	mov	sp, r7
    29ae:	bd80      	pop	{r7, pc}
    29b0:	20008128 	.word	0x20008128
    29b4:	000029ed 	.word	0x000029ed

000029b8 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData>:
uint32_t	FlashHandler_Class::ReadUpdatedConfigurationData(ConfigurationData& cd){
    29b8:	b580      	push	{r7, lr}
    29ba:	b084      	sub	sp, #16
    29bc:	af00      	add	r7, sp, #0
    29be:	6078      	str	r0, [r7, #4]
    29c0:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.updatedConfiguration;
    29c2:	4b08      	ldr	r3, [pc, #32]	; (29e4 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x2c>)
    29c4:	681b      	ldr	r3, [r3, #0]
    29c6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
    29ca:	3304      	adds	r3, #4
    29cc:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    29ce:	68fa      	ldr	r2, [r7, #12]
    29d0:	6839      	ldr	r1, [r7, #0]
    29d2:	6878      	ldr	r0, [r7, #4]
    29d4:	4b04      	ldr	r3, [pc, #16]	; (29e8 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x30>)
    29d6:	4798      	blx	r3
    29d8:	60b8      	str	r0, [r7, #8]
	return	r;
    29da:	68bb      	ldr	r3, [r7, #8]
}
    29dc:	4618      	mov	r0, r3
    29de:	3710      	adds	r7, #16
    29e0:	46bd      	mov	sp, r7
    29e2:	bd80      	pop	{r7, pc}
    29e4:	20008128 	.word	0x20008128
    29e8:	000029ed 	.word	0x000029ed

000029ec <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam>:

uint32_t	FlashHandler_Class::ReadConfigurationData(ConfigurationData& cd,uint32_t add){
    29ec:	b590      	push	{r4, r7, lr}
    29ee:	b087      	sub	sp, #28
    29f0:	af00      	add	r7, sp, #0
    29f2:	60f8      	str	r0, [r7, #12]
    29f4:	60b9      	str	r1, [r7, #8]
    29f6:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    29f8:	68ba      	ldr	r2, [r7, #8]
    29fa:	68fb      	ldr	r3, [r7, #12]
    29fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    2a06:	23ac      	movs	r3, #172	; 0xac
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	4804      	ldr	r0, [pc, #16]	; (2a1c <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam+0x30>)
    2a0c:	4c04      	ldr	r4, [pc, #16]	; (2a20 <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam+0x34>)
    2a0e:	47a0      	blx	r4
    2a10:	6178      	str	r0, [r7, #20]
	return	r;
    2a12:	697b      	ldr	r3, [r7, #20]
}
    2a14:	4618      	mov	r0, r3
    2a16:	371c      	adds	r7, #28
    2a18:	46bd      	mov	sp, r7
    2a1a:	bd90      	pop	{r4, r7, pc}
    2a1c:	2000a018 	.word	0x2000a018
    2a20:	00016db1 	.word	0x00016db1

00002a24 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
	return	r;
}
uint32_t	FlashHandler_Class::ReadCRCConfigurationData(void){
    2a24:	b590      	push	{r4, r7, lr}
    2a26:	b087      	sub	sp, #28
    2a28:	af00      	add	r7, sp, #0
    2a2a:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
    2a2c:	4b09      	ldr	r3, [pc, #36]	; (2a54 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x30>)
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
    2a34:	3330      	adds	r3, #48	; 0x30
    2a36:	617b      	str	r3, [r7, #20]
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2a38:	f107 010c 	add.w	r1, r7, #12
    2a3c:	2304      	movs	r3, #4
    2a3e:	697a      	ldr	r2, [r7, #20]
    2a40:	4805      	ldr	r0, [pc, #20]	; (2a58 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x34>)
    2a42:	4c06      	ldr	r4, [pc, #24]	; (2a5c <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x38>)
    2a44:	47a0      	blx	r4
    2a46:	6138      	str	r0, [r7, #16]
	return	crc;
    2a48:	68fb      	ldr	r3, [r7, #12]
}
    2a4a:	4618      	mov	r0, r3
    2a4c:	371c      	adds	r7, #28
    2a4e:	46bd      	mov	sp, r7
    2a50:	bd90      	pop	{r4, r7, pc}
    2a52:	bf00      	nop
    2a54:	20008128 	.word	0x20008128
    2a58:	2000a018 	.word	0x2000a018
    2a5c:	00016db1 	.word	0x00016db1

00002a60 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
    2a60:	b590      	push	{r4, r7, lr}
    2a62:	b087      	sub	sp, #28
    2a64:	af00      	add	r7, sp, #0
    2a66:	60f8      	str	r0, [r7, #12]
    2a68:	60b9      	str	r1, [r7, #8]
    2a6a:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    2a6c:	68ba      	ldr	r2, [r7, #8]
    2a6e:	68fb      	ldr	r3, [r7, #12]
    2a70:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    2a74:	68fb      	ldr	r3, [r7, #12]
    2a76:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    2a7a:	23ac      	movs	r3, #172	; 0xac
    2a7c:	687a      	ldr	r2, [r7, #4]
    2a7e:	4804      	ldr	r0, [pc, #16]	; (2a90 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam+0x30>)
    2a80:	4c04      	ldr	r4, [pc, #16]	; (2a94 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam+0x34>)
    2a82:	47a0      	blx	r4
    2a84:	6178      	str	r0, [r7, #20]
	return	w;
    2a86:	697b      	ldr	r3, [r7, #20]
}
    2a88:	4618      	mov	r0, r3
    2a8a:	371c      	adds	r7, #28
    2a8c:	46bd      	mov	sp, r7
    2a8e:	bd90      	pop	{r4, r7, pc}
    2a90:	2000a018 	.word	0x2000a018
    2a94:	00016d7d 	.word	0x00016d7d

00002a98 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    2a98:	b590      	push	{r4, r7, lr}
    2a9a:	b087      	sub	sp, #28
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	60f8      	str	r0, [r7, #12]
    2aa0:	60b9      	str	r1, [r7, #8]
    2aa2:	607a      	str	r2, [r7, #4]

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    2aa4:	2301      	movs	r3, #1
    2aa6:	687a      	ldr	r2, [r7, #4]
    2aa8:	68b9      	ldr	r1, [r7, #8]
    2aaa:	4804      	ldr	r0, [pc, #16]	; (2abc <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x24>)
    2aac:	4c04      	ldr	r4, [pc, #16]	; (2ac0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x28>)
    2aae:	47a0      	blx	r4
    2ab0:	6178      	str	r0, [r7, #20]
	return	w;
    2ab2:	697b      	ldr	r3, [r7, #20]
}
    2ab4:	4618      	mov	r0, r3
    2ab6:	371c      	adds	r7, #28
    2ab8:	46bd      	mov	sp, r7
    2aba:	bd90      	pop	{r4, r7, pc}
    2abc:	2000a018 	.word	0x2000a018
    2ac0:	00016d7d 	.word	0x00016d7d

00002ac4 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem>:
uint32_t	FlashHandler_Class::WriteApplicationState(HVACState& hs,uint32_t add){
    2ac4:	b590      	push	{r4, r7, lr}
    2ac6:	b087      	sub	sp, #28
    2ac8:	af00      	add	r7, sp, #0
    2aca:	60f8      	str	r0, [r7, #12]
    2acc:	60b9      	str	r1, [r7, #8]
    2ace:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    2ad0:	68ba      	ldr	r2, [r7, #8]
    2ad2:	68fb      	ldr	r3, [r7, #12]
    2ad4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
    2ad8:	68fb      	ldr	r3, [r7, #12]
    2ada:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    2ade:	2368      	movs	r3, #104	; 0x68
    2ae0:	687a      	ldr	r2, [r7, #4]
    2ae2:	4804      	ldr	r0, [pc, #16]	; (2af4 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem+0x30>)
    2ae4:	4c04      	ldr	r4, [pc, #16]	; (2af8 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem+0x34>)
    2ae6:	47a0      	blx	r4
    2ae8:	6178      	str	r0, [r7, #20]
	return	w;
    2aea:	697b      	ldr	r3, [r7, #20]
}
    2aec:	4618      	mov	r0, r3
    2aee:	371c      	adds	r7, #28
    2af0:	46bd      	mov	sp, r7
    2af2:	bd90      	pop	{r4, r7, pc}
    2af4:	2000a018 	.word	0x2000a018
    2af8:	00016d7d 	.word	0x00016d7d

00002afc <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv>:
uint32_t	FlashHandler_Class::WriteDefaultConfiguration(void){
    2afc:	b580      	push	{r7, lr}
    2afe:	b0b0      	sub	sp, #192	; 0xc0
    2b00:	af00      	add	r7, sp, #0
    2b02:	6078      	str	r0, [r7, #4]
	ConfigurationData cd=factoryDefaultsConfiguration;
    2b04:	4a0e      	ldr	r2, [pc, #56]	; (2b40 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x44>)
    2b06:	f107 030c 	add.w	r3, r7, #12
    2b0a:	4611      	mov	r1, r2
    2b0c:	22ac      	movs	r2, #172	; 0xac
    2b0e:	4618      	mov	r0, r3
    2b10:	4b0c      	ldr	r3, [pc, #48]	; (2b44 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x48>)
    2b12:	4798      	blx	r3
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
    2b14:	4b0c      	ldr	r3, [pc, #48]	; (2b48 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x4c>)
    2b16:	681b      	ldr	r3, [r3, #0]
    2b18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    2b1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t	w=WriteConfigurationData(cd,add);
    2b20:	f107 030c 	add.w	r3, r7, #12
    2b24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    2b28:	4619      	mov	r1, r3
    2b2a:	6878      	ldr	r0, [r7, #4]
    2b2c:	4b07      	ldr	r3, [pc, #28]	; (2b4c <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x50>)
    2b2e:	4798      	blx	r3
    2b30:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	return	w;
    2b34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
}
    2b38:	4618      	mov	r0, r3
    2b3a:	37c0      	adds	r7, #192	; 0xc0
    2b3c:	46bd      	mov	sp, r7
    2b3e:	bd80      	pop	{r7, pc}
    2b40:	00020290 	.word	0x00020290
    2b44:	0001c485 	.word	0x0001c485
    2b48:	20008128 	.word	0x20008128
    2b4c:	00002a61 	.word	0x00002a61

00002b50 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    2b50:	b580      	push	{r7, lr}
    2b52:	b086      	sub	sp, #24
    2b54:	af00      	add	r7, sp, #0
    2b56:	6078      	str	r0, [r7, #4]
	UserParameters up=defaultParameters;
    2b58:	4b0a      	ldr	r3, [pc, #40]	; (2b84 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x34>)
    2b5a:	781b      	ldrb	r3, [r3, #0]
    2b5c:	733b      	strb	r3, [r7, #12]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    2b5e:	4b0a      	ldr	r3, [pc, #40]	; (2b88 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x38>)
    2b60:	681b      	ldr	r3, [r3, #0]
    2b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2b66:	3301      	adds	r3, #1
    2b68:	617b      	str	r3, [r7, #20]
	uint32_t	w=WriteParameters(up,add);
    2b6a:	f107 030c 	add.w	r3, r7, #12
    2b6e:	697a      	ldr	r2, [r7, #20]
    2b70:	4619      	mov	r1, r3
    2b72:	6878      	ldr	r0, [r7, #4]
    2b74:	4b05      	ldr	r3, [pc, #20]	; (2b8c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x3c>)
    2b76:	4798      	blx	r3
    2b78:	6138      	str	r0, [r7, #16]
	return	w;
    2b7a:	693b      	ldr	r3, [r7, #16]
}
    2b7c:	4618      	mov	r0, r3
    2b7e:	3718      	adds	r7, #24
    2b80:	46bd      	mov	sp, r7
    2b82:	bd80      	pop	{r7, pc}
    2b84:	00021fe8 	.word	0x00021fe8
    2b88:	20008128 	.word	0x20008128
    2b8c:	00002a99 	.word	0x00002a99

00002b90 <_ZN18FlashHandler_Class17WriteDefaultStateEv>:
uint32_t	FlashHandler_Class::WriteDefaultState(void){
    2b90:	b580      	push	{r7, lr}
    2b92:	b09e      	sub	sp, #120	; 0x78
    2b94:	af00      	add	r7, sp, #0
    2b96:	6078      	str	r0, [r7, #4]
	HVACState hs=defaultHVACState;
    2b98:	4a0d      	ldr	r2, [pc, #52]	; (2bd0 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x40>)
    2b9a:	f107 0308 	add.w	r3, r7, #8
    2b9e:	4611      	mov	r1, r2
    2ba0:	2268      	movs	r2, #104	; 0x68
    2ba2:	4618      	mov	r0, r3
    2ba4:	4b0b      	ldr	r3, [pc, #44]	; (2bd4 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x44>)
    2ba6:	4798      	blx	r3
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.hvacDefaultState;
    2ba8:	4b0b      	ldr	r3, [pc, #44]	; (2bd8 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x48>)
    2baa:	681b      	ldr	r3, [r3, #0]
    2bac:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    2bb0:	3334      	adds	r3, #52	; 0x34
    2bb2:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t	w=WriteApplicationState(hs,add);
    2bb4:	f107 0308 	add.w	r3, r7, #8
    2bb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    2bba:	4619      	mov	r1, r3
    2bbc:	6878      	ldr	r0, [r7, #4]
    2bbe:	4b07      	ldr	r3, [pc, #28]	; (2bdc <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x4c>)
    2bc0:	4798      	blx	r3
    2bc2:	6738      	str	r0, [r7, #112]	; 0x70
	return	w;
    2bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
    2bc6:	4618      	mov	r0, r3
    2bc8:	3778      	adds	r7, #120	; 0x78
    2bca:	46bd      	mov	sp, r7
    2bcc:	bd80      	pop	{r7, pc}
    2bce:	bf00      	nop
    2bd0:	00020620 	.word	0x00020620
    2bd4:	0001c485 	.word	0x0001c485
    2bd8:	20008128 	.word	0x20008128
    2bdc:	00002ac5 	.word	0x00002ac5

00002be0 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState>:

uint32_t	FlashHandler_Class::WriteCurrentState(HVACState& hs){
    2be0:	b580      	push	{r7, lr}
    2be2:	b084      	sub	sp, #16
    2be4:	af00      	add	r7, sp, #0
    2be6:	6078      	str	r0, [r7, #4]
    2be8:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.hvacState;
    2bea:	4b08      	ldr	r3, [pc, #32]	; (2c0c <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState+0x2c>)
    2bec:	681b      	ldr	r3, [r3, #0]
    2bee:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
    2bf2:	331c      	adds	r3, #28
    2bf4:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hs,add);
    2bf6:	68fa      	ldr	r2, [r7, #12]
    2bf8:	6839      	ldr	r1, [r7, #0]
    2bfa:	6878      	ldr	r0, [r7, #4]
    2bfc:	4b04      	ldr	r3, [pc, #16]	; (2c10 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState+0x30>)
    2bfe:	4798      	blx	r3
    2c00:	60b8      	str	r0, [r7, #8]
	return	w;
    2c02:	68bb      	ldr	r3, [r7, #8]
}
    2c04:	4618      	mov	r0, r3
    2c06:	3710      	adds	r7, #16
    2c08:	46bd      	mov	sp, r7
    2c0a:	bd80      	pop	{r7, pc}
    2c0c:	20008128 	.word	0x20008128
    2c10:	00002ac5 	.word	0x00002ac5

00002c14 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm>:

uint32_t	FlashHandler_Class::WriteCRCConfigurationData(uint32_t crc){
    2c14:	b590      	push	{r4, r7, lr}
    2c16:	b085      	sub	sp, #20
    2c18:	af00      	add	r7, sp, #0
    2c1a:	6078      	str	r0, [r7, #4]
    2c1c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
    2c1e:	4b09      	ldr	r3, [pc, #36]	; (2c44 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x30>)
    2c20:	681b      	ldr	r3, [r3, #0]
    2c22:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
    2c26:	3330      	adds	r3, #48	; 0x30
    2c28:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2c2a:	4639      	mov	r1, r7
    2c2c:	2304      	movs	r3, #4
    2c2e:	68fa      	ldr	r2, [r7, #12]
    2c30:	4805      	ldr	r0, [pc, #20]	; (2c48 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x34>)
    2c32:	4c06      	ldr	r4, [pc, #24]	; (2c4c <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x38>)
    2c34:	47a0      	blx	r4
    2c36:	60b8      	str	r0, [r7, #8]
	return	w;
    2c38:	68bb      	ldr	r3, [r7, #8]
}
    2c3a:	4618      	mov	r0, r3
    2c3c:	3714      	adds	r7, #20
    2c3e:	46bd      	mov	sp, r7
    2c40:	bd90      	pop	{r4, r7, pc}
    2c42:	bf00      	nop
    2c44:	20008128 	.word	0x20008128
    2c48:	2000a018 	.word	0x2000a018
    2c4c:	00016d7d 	.word	0x00016d7d

00002c50 <_ZN18FlashHandler_Class16WriteCRCAppStateEm>:
uint32_t	FlashHandler_Class::WriteCRCAppState(uint32_t crc){
    2c50:	b590      	push	{r4, r7, lr}
    2c52:	b085      	sub	sp, #20
    2c54:	af00      	add	r7, sp, #0
    2c56:	6078      	str	r0, [r7, #4]
    2c58:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
    2c5a:	4b09      	ldr	r3, [pc, #36]	; (2c80 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x30>)
    2c5c:	681b      	ldr	r3, [r3, #0]
    2c5e:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    2c62:	3304      	adds	r3, #4
    2c64:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2c66:	4639      	mov	r1, r7
    2c68:	2304      	movs	r3, #4
    2c6a:	68fa      	ldr	r2, [r7, #12]
    2c6c:	4805      	ldr	r0, [pc, #20]	; (2c84 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x34>)
    2c6e:	4c06      	ldr	r4, [pc, #24]	; (2c88 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x38>)
    2c70:	47a0      	blx	r4
    2c72:	60b8      	str	r0, [r7, #8]
	return	w;
    2c74:	68bb      	ldr	r3, [r7, #8]
}
    2c76:	4618      	mov	r0, r3
    2c78:	3714      	adds	r7, #20
    2c7a:	46bd      	mov	sp, r7
    2c7c:	bd90      	pop	{r4, r7, pc}
    2c7e:	bf00      	nop
    2c80:	20008128 	.word	0x20008128
    2c84:	2000a018 	.word	0x2000a018
    2c88:	00016d7d 	.word	0x00016d7d

00002c8c <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState>:
uint32_t	FlashHandler_Class::WriteLastConfigurationData(ConfigurationData& cd){
	uint32_t	add=(uint32_t)&flashMap->configurationSector.lastConfiguracion;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::ReadApplicationState(HVACState& as){
    2c8c:	b590      	push	{r4, r7, lr}
    2c8e:	b085      	sub	sp, #20
    2c90:	af00      	add	r7, sp, #0
    2c92:	6078      	str	r0, [r7, #4]
    2c94:	6039      	str	r1, [r7, #0]
	flashAddress=(uint32_t)&flashMap->hvacStateSector.hvacState;
    2c96:	4b0e      	ldr	r3, [pc, #56]	; (2cd0 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x44>)
    2c98:	681b      	ldr	r3, [r3, #0]
    2c9a:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
    2c9e:	331c      	adds	r3, #28
    2ca0:	461a      	mov	r2, r3
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	handlerAppState=PTR_HVAC_STATE(&as);
    2ca8:	683a      	ldr	r2, [r7, #0]
    2caa:	687b      	ldr	r3, [r7, #4]
    2cac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,flashAddress,sizeof(HVACState));
    2cb0:	687b      	ldr	r3, [r7, #4]
    2cb2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    2cbc:	2368      	movs	r3, #104	; 0x68
    2cbe:	4805      	ldr	r0, [pc, #20]	; (2cd4 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x48>)
    2cc0:	4c05      	ldr	r4, [pc, #20]	; (2cd8 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x4c>)
    2cc2:	47a0      	blx	r4
    2cc4:	60f8      	str	r0, [r7, #12]
	return	r;
    2cc6:	68fb      	ldr	r3, [r7, #12]
}
    2cc8:	4618      	mov	r0, r3
    2cca:	3714      	adds	r7, #20
    2ccc:	46bd      	mov	sp, r7
    2cce:	bd90      	pop	{r4, r7, pc}
    2cd0:	20008128 	.word	0x20008128
    2cd4:	2000a018 	.word	0x2000a018
    2cd8:	00016db1 	.word	0x00016db1

00002cdc <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv>:
uint32_t	FlashHandler_Class::ReadCRCApplicationState(void){
    2cdc:	b590      	push	{r4, r7, lr}
    2cde:	b085      	sub	sp, #20
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	flashAddress=(uint32_t)&flashMap->hvacStateSector.crcAppState;
    2ce4:	4b0b      	ldr	r3, [pc, #44]	; (2d14 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x38>)
    2ce6:	681b      	ldr	r3, [r3, #0]
    2ce8:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    2cec:	3304      	adds	r3, #4
    2cee:	461a      	mov	r2, r3
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),flashAddress,sizeof(uint32_t));
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    2cfc:	f107 0108 	add.w	r1, r7, #8
    2d00:	2304      	movs	r3, #4
    2d02:	4805      	ldr	r0, [pc, #20]	; (2d18 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x3c>)
    2d04:	4c05      	ldr	r4, [pc, #20]	; (2d1c <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x40>)
    2d06:	47a0      	blx	r4
    2d08:	60f8      	str	r0, [r7, #12]
	return	crc;
    2d0a:	68bb      	ldr	r3, [r7, #8]
    2d0c:	4618      	mov	r0, r3
    2d0e:	3714      	adds	r7, #20
    2d10:	46bd      	mov	sp, r7
    2d12:	bd90      	pop	{r4, r7, pc}
    2d14:	20008128 	.word	0x20008128
    2d18:	2000a018 	.word	0x2000a018
    2d1c:	00016db1 	.word	0x00016db1

00002d20 <_ZN10PBIT_ClassC1Ev>:

#include "PBIT_Class.h"
#include "Interfaces_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
    2d20:	b480      	push	{r7}
    2d22:	b083      	sub	sp, #12
    2d24:	af00      	add	r7, sp, #0
    2d26:	6078      	str	r0, [r7, #4]
{
	isOK=true;
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	2201      	movs	r2, #1
    2d2c:	701a      	strb	r2, [r3, #0]
} //PBIT_Class
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	4618      	mov	r0, r3
    2d32:	370c      	adds	r7, #12
    2d34:	46bd      	mov	sp, r7
    2d36:	bc80      	pop	{r7}
    2d38:	4770      	bx	lr

00002d3a <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
    2d3a:	b480      	push	{r7}
    2d3c:	b083      	sub	sp, #12
    2d3e:	af00      	add	r7, sp, #0
    2d40:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
    2d42:	687b      	ldr	r3, [r7, #4]
    2d44:	4618      	mov	r0, r3
    2d46:	370c      	adds	r7, #12
    2d48:	46bd      	mov	sp, r7
    2d4a:	bc80      	pop	{r7}
    2d4c:	4770      	bx	lr

00002d4e <_ZN10PBIT_ClasscvbEv>:
		isOK=true;
	}
	return isOK;
}

PBIT_Class::operator bool(){
    2d4e:	b480      	push	{r7}
    2d50:	b083      	sub	sp, #12
    2d52:	af00      	add	r7, sp, #0
    2d54:	6078      	str	r0, [r7, #4]
	return	isOK;
    2d56:	687b      	ldr	r3, [r7, #4]
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	b2db      	uxtb	r3, r3
}
    2d5c:	4618      	mov	r0, r3
    2d5e:	370c      	adds	r7, #12
    2d60:	46bd      	mov	sp, r7
    2d62:	bc80      	pop	{r7}
    2d64:	4770      	bx	lr
	...

00002d68 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus>:

uint32_t  PBIT_Class::CheckCurrentStatus(HVACStatus& cs){
    2d68:	b580      	push	{r7, lr}
    2d6a:	b086      	sub	sp, #24
    2d6c:	af00      	add	r7, sp, #0
    2d6e:	6078      	str	r0, [r7, #4]
    2d70:	6039      	str	r1, [r7, #0]
	interfaces.GetStatus(cs);
    2d72:	6839      	ldr	r1, [r7, #0]
    2d74:	4812      	ldr	r0, [pc, #72]	; (2dc0 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x58>)
    2d76:	4b13      	ldr	r3, [pc, #76]	; (2dc4 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x5c>)
    2d78:	4798      	blx	r3
	uint32_t	*s=(uint32_t*)&cs.statusBits;
    2d7a:	683b      	ldr	r3, [r7, #0]
    2d7c:	613b      	str	r3, [r7, #16]
	uint32_t	v=*s;
    2d7e:	693b      	ldr	r3, [r7, #16]
    2d80:	681b      	ldr	r3, [r3, #0]
    2d82:	60fb      	str	r3, [r7, #12]

	for (int i=0;i<32;i++)
    2d84:	2300      	movs	r3, #0
    2d86:	617b      	str	r3, [r7, #20]
    2d88:	697b      	ldr	r3, [r7, #20]
    2d8a:	2b1f      	cmp	r3, #31
    2d8c:	dc0d      	bgt.n	2daa <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x42>
	{
		v+=(0x01<<i)&(v);
    2d8e:	2201      	movs	r2, #1
    2d90:	697b      	ldr	r3, [r7, #20]
    2d92:	fa02 f303 	lsl.w	r3, r2, r3
    2d96:	461a      	mov	r2, r3
    2d98:	68fb      	ldr	r3, [r7, #12]
    2d9a:	401a      	ands	r2, r3
    2d9c:	68fb      	ldr	r3, [r7, #12]
    2d9e:	4413      	add	r3, r2
    2da0:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<32;i++)
    2da2:	697b      	ldr	r3, [r7, #20]
    2da4:	3301      	adds	r3, #1
    2da6:	617b      	str	r3, [r7, #20]
    2da8:	e7ee      	b.n	2d88 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x20>
		
	}
	if (v==0)
    2daa:	68fb      	ldr	r3, [r7, #12]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d102      	bne.n	2db6 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x4e>
	{
		isOK=true;
    2db0:	687b      	ldr	r3, [r7, #4]
    2db2:	2201      	movs	r2, #1
    2db4:	701a      	strb	r2, [r3, #0]
	}
	return	v;
    2db6:	68fb      	ldr	r3, [r7, #12]
}
    2db8:	4618      	mov	r0, r3
    2dba:	3718      	adds	r7, #24
    2dbc:	46bd      	mov	sp, r7
    2dbe:	bd80      	pop	{r7, pc}
    2dc0:	2000165c 	.word	0x2000165c
    2dc4:	0000210d 	.word	0x0000210d

00002dc8 <_Z41__static_initialization_and_destruction_0ii>:
    2dc8:	b580      	push	{r7, lr}
    2dca:	b082      	sub	sp, #8
    2dcc:	af00      	add	r7, sp, #0
    2dce:	6078      	str	r0, [r7, #4]
    2dd0:	6039      	str	r1, [r7, #0]
    2dd2:	687b      	ldr	r3, [r7, #4]
    2dd4:	2b01      	cmp	r3, #1
    2dd6:	d10c      	bne.n	2df2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2dd8:	683b      	ldr	r3, [r7, #0]
    2dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2dde:	4293      	cmp	r3, r2
    2de0:	d107      	bne.n	2df2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2de2:	4806      	ldr	r0, [pc, #24]	; (2dfc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2de4:	4b06      	ldr	r3, [pc, #24]	; (2e00 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2de6:	4798      	blx	r3
    2de8:	4a06      	ldr	r2, [pc, #24]	; (2e04 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2dea:	4907      	ldr	r1, [pc, #28]	; (2e08 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2dec:	4803      	ldr	r0, [pc, #12]	; (2dfc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2dee:	4b07      	ldr	r3, [pc, #28]	; (2e0c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2df0:	4798      	blx	r3
    2df2:	bf00      	nop
    2df4:	3708      	adds	r7, #8
    2df6:	46bd      	mov	sp, r7
    2df8:	bd80      	pop	{r7, pc}
    2dfa:	bf00      	nop
    2dfc:	2000812c 	.word	0x2000812c
    2e00:	00002d21 	.word	0x00002d21
    2e04:	20000000 	.word	0x20000000
    2e08:	00002d3b 	.word	0x00002d3b
    2e0c:	00019d1d 	.word	0x00019d1d

00002e10 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
    2e10:	b580      	push	{r7, lr}
    2e12:	af00      	add	r7, sp, #0
    2e14:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2e18:	2001      	movs	r0, #1
    2e1a:	4b01      	ldr	r3, [pc, #4]	; (2e20 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
    2e1c:	4798      	blx	r3
    2e1e:	bd80      	pop	{r7, pc}
    2e20:	00002dc9 	.word	0x00002dc9

00002e24 <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
    2e24:	b580      	push	{r7, lr}
    2e26:	b082      	sub	sp, #8
    2e28:	af00      	add	r7, sp, #0
    2e2a:	6078      	str	r0, [r7, #4]
	:lastValidSaveWorkingStateForGAINIndex(0)
    2e2c:	687b      	ldr	r3, [r7, #4]
    2e2e:	4618      	mov	r0, r3
    2e30:	4b05      	ldr	r3, [pc, #20]	; (2e48 <_ZN19PersistenceServicesC1Ev+0x24>)
    2e32:	4798      	blx	r3
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	2200      	movs	r2, #0
    2e38:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
	{
	}
    2e3c:	687b      	ldr	r3, [r7, #4]
    2e3e:	4618      	mov	r0, r3
    2e40:	3708      	adds	r7, #8
    2e42:	46bd      	mov	sp, r7
    2e44:	bd80      	pop	{r7, pc}
    2e46:	bf00      	nop
    2e48:	000014cd 	.word	0x000014cd

00002e4c <_ZN19PersistenceServices26writeConfigurationDataAreaER17ConfigurationData>:
	
	return result;
	}

bool PersistenceServices::writeConfigurationDataArea(ConfigurationData& data)
	{
    2e4c:	b480      	push	{r7}
    2e4e:	b085      	sub	sp, #20
    2e50:	af00      	add	r7, sp, #0
    2e52:	6078      	str	r0, [r7, #4]
    2e54:	6039      	str	r1, [r7, #0]
	bool	result(true);
    2e56:	2301      	movs	r3, #1
    2e58:	73fb      	strb	r3, [r7, #15]

	data.commons.version = kConfigurationDataVersion;
    2e5a:	683b      	ldr	r3, [r7, #0]
    2e5c:	2204      	movs	r2, #4
    2e5e:	605a      	str	r2, [r3, #4]
	data.commons.size = kConfigurationDataSize;
    2e60:	683b      	ldr	r3, [r7, #0]
    2e62:	22ac      	movs	r2, #172	; 0xac
    2e64:	601a      	str	r2, [r3, #0]
	data.commons.partNumber = PARTNUMBER;
    2e66:	683b      	ldr	r3, [r7, #0]
    2e68:	f240 720c 	movw	r2, #1804	; 0x70c
    2e6c:	609a      	str	r2, [r3, #8]



	

	return result;
    2e6e:	7bfb      	ldrb	r3, [r7, #15]
	}
    2e70:	4618      	mov	r0, r3
    2e72:	3714      	adds	r7, #20
    2e74:	46bd      	mov	sp, r7
    2e76:	bc80      	pop	{r7}
    2e78:	4770      	bx	lr
	...

00002e7c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv>:
	value += increment;

	}
	
bool PersistenceServices::IsConfigurationDataUpdated()
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	b086      	sub	sp, #24
    2e80:	af00      	add	r7, sp, #0
    2e82:	6078      	str	r0, [r7, #4]
	uint32_t	ver=factoryDefaultsConfiguration.commons.version;
    2e84:	4b17      	ldr	r3, [pc, #92]	; (2ee4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x68>)
    2e86:	685b      	ldr	r3, [r3, #4]
    2e88:	617b      	str	r3, [r7, #20]
	uint32_t	verUp=memory.ReadUpdatedConfigurationData(configuration);
    2e8a:	687b      	ldr	r3, [r7, #4]
    2e8c:	33d4      	adds	r3, #212	; 0xd4
    2e8e:	4619      	mov	r1, r3
    2e90:	4815      	ldr	r0, [pc, #84]	; (2ee8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    2e92:	4b16      	ldr	r3, [pc, #88]	; (2eec <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x70>)
    2e94:	4798      	blx	r3
    2e96:	6138      	str	r0, [r7, #16]

	if ((verUp>0))
    2e98:	693b      	ldr	r3, [r7, #16]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d001      	beq.n	2ea2 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x26>
	{
		return false;
    2e9e:	2300      	movs	r3, #0
    2ea0:	e01c      	b.n	2edc <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
	} 
	else
	{
		uint32_t	refCRC=memory.ReadCRCConfigurationData();
    2ea2:	4811      	ldr	r0, [pc, #68]	; (2ee8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    2ea4:	4b12      	ldr	r3, [pc, #72]	; (2ef0 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x74>)
    2ea6:	4798      	blx	r3
    2ea8:	60f8      	str	r0, [r7, #12]
		uint32_t	crc=CalculateCRC((uint32_t *)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
    2eaa:	6878      	ldr	r0, [r7, #4]
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	33d4      	adds	r3, #212	; 0xd4
    2eb0:	22ac      	movs	r2, #172	; 0xac
    2eb2:	4619      	mov	r1, r3
    2eb4:	4b0f      	ldr	r3, [pc, #60]	; (2ef4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x78>)
    2eb6:	4798      	blx	r3
    2eb8:	60b8      	str	r0, [r7, #8]
		if (refCRC==crc)
    2eba:	68fa      	ldr	r2, [r7, #12]
    2ebc:	68bb      	ldr	r3, [r7, #8]
    2ebe:	429a      	cmp	r2, r3
    2ec0:	d10b      	bne.n	2eda <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x5e>
		{
			verUp=configuration.commons.version;
    2ec2:	687b      	ldr	r3, [r7, #4]
    2ec4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    2ec8:	613b      	str	r3, [r7, #16]
			return (verUp>ver);
    2eca:	693a      	ldr	r2, [r7, #16]
    2ecc:	697b      	ldr	r3, [r7, #20]
    2ece:	429a      	cmp	r2, r3
    2ed0:	bf8c      	ite	hi
    2ed2:	2301      	movhi	r3, #1
    2ed4:	2300      	movls	r3, #0
    2ed6:	b2db      	uxtb	r3, r3
    2ed8:	e000      	b.n	2edc <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
		} 
		else
		{
			return	false;
    2eda:	2300      	movs	r3, #0
		}
		
	}
	return	false;

}
    2edc:	4618      	mov	r0, r3
    2ede:	3718      	adds	r7, #24
    2ee0:	46bd      	mov	sp, r7
    2ee2:	bd80      	pop	{r7, pc}
    2ee4:	00020290 	.word	0x00020290
    2ee8:	20002d74 	.word	0x20002d74
    2eec:	000029b9 	.word	0x000029b9
    2ef0:	00002a25 	.word	0x00002a25
    2ef4:	00001551 	.word	0x00001551

00002ef8 <_ZN19PersistenceServices16IsStateDataValidER9HVACState>:
	

	return result;
	}
bool PersistenceServices::IsStateDataValid(HVACState& as)
{
    2ef8:	b580      	push	{r7, lr}
    2efa:	b084      	sub	sp, #16
    2efc:	af00      	add	r7, sp, #0
    2efe:	6078      	str	r0, [r7, #4]
    2f00:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadCRCApplicationState();
    2f02:	480b      	ldr	r0, [pc, #44]	; (2f30 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x38>)
    2f04:	4b0b      	ldr	r3, [pc, #44]	; (2f34 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x3c>)
    2f06:	4798      	blx	r3
    2f08:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(lastState));
    2f0a:	687b      	ldr	r3, [r7, #4]
    2f0c:	2268      	movs	r2, #104	; 0x68
    2f0e:	6839      	ldr	r1, [r7, #0]
    2f10:	4618      	mov	r0, r3
    2f12:	4b09      	ldr	r3, [pc, #36]	; (2f38 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x40>)
    2f14:	4798      	blx	r3
    2f16:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    2f18:	68fa      	ldr	r2, [r7, #12]
    2f1a:	68bb      	ldr	r3, [r7, #8]
    2f1c:	429a      	cmp	r2, r3
    2f1e:	bf0c      	ite	eq
    2f20:	2301      	moveq	r3, #1
    2f22:	2300      	movne	r3, #0
    2f24:	b2db      	uxtb	r3, r3
}
    2f26:	4618      	mov	r0, r3
    2f28:	3710      	adds	r7, #16
    2f2a:	46bd      	mov	sp, r7
    2f2c:	bd80      	pop	{r7, pc}
    2f2e:	bf00      	nop
    2f30:	20002d74 	.word	0x20002d74
    2f34:	00002cdd 	.word	0x00002cdd
    2f38:	00001551 	.word	0x00001551

00002f3c <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState>:
bool PersistenceServices::IsFastStateDataValid(HVACState& as)
{
    2f3c:	b580      	push	{r7, lr}
    2f3e:	b084      	sub	sp, #16
    2f40:	af00      	add	r7, sp, #0
    2f42:	6078      	str	r0, [r7, #4]
    2f44:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadFastCRCApplicationState();
    2f46:	480b      	ldr	r0, [pc, #44]	; (2f74 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x38>)
    2f48:	4b0b      	ldr	r3, [pc, #44]	; (2f78 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x3c>)
    2f4a:	4798      	blx	r3
    2f4c:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(HVACState));
    2f4e:	687b      	ldr	r3, [r7, #4]
    2f50:	2268      	movs	r2, #104	; 0x68
    2f52:	6839      	ldr	r1, [r7, #0]
    2f54:	4618      	mov	r0, r3
    2f56:	4b09      	ldr	r3, [pc, #36]	; (2f7c <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x40>)
    2f58:	4798      	blx	r3
    2f5a:	60b8      	str	r0, [r7, #8]
	
	return (refCRC==crc);
    2f5c:	68fa      	ldr	r2, [r7, #12]
    2f5e:	68bb      	ldr	r3, [r7, #8]
    2f60:	429a      	cmp	r2, r3
    2f62:	bf0c      	ite	eq
    2f64:	2301      	moveq	r3, #1
    2f66:	2300      	movne	r3, #0
    2f68:	b2db      	uxtb	r3, r3
}
    2f6a:	4618      	mov	r0, r3
    2f6c:	3710      	adds	r7, #16
    2f6e:	46bd      	mov	sp, r7
    2f70:	bd80      	pop	{r7, pc}
    2f72:	bf00      	nop
    2f74:	20002d64 	.word	0x20002d64
    2f78:	00001a69 	.word	0x00001a69
    2f7c:	00001551 	.word	0x00001551

00002f80 <_ZN9eventDataC1Ei>:
inline eventData::eventData(int v)
    2f80:	b480      	push	{r7}
    2f82:	b083      	sub	sp, #12
    2f84:	af00      	add	r7, sp, #0
    2f86:	6078      	str	r0, [r7, #4]
    2f88:	6039      	str	r1, [r7, #0]
	integerData = v;
    2f8a:	687b      	ldr	r3, [r7, #4]
    2f8c:	683a      	ldr	r2, [r7, #0]
    2f8e:	601a      	str	r2, [r3, #0]
	}
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	4618      	mov	r0, r3
    2f94:	370c      	adds	r7, #12
    2f96:	46bd      	mov	sp, r7
    2f98:	bc80      	pop	{r7}
    2f9a:	4770      	bx	lr

00002f9c <_ZL24HVACOperationTimeElapsedPK10timer_task>:
#include "CBIT_Class.h"
#include "FlapperValve_Class.h"
#include "TemperatureSensors_Class.h"

States_Class*	ptrStatesClass;
static void  HVACOperationTimeElapsed(const struct timer_task *const timer_task){
    2f9c:	b480      	push	{r7}
    2f9e:	b083      	sub	sp, #12
    2fa0:	af00      	add	r7, sp, #0
    2fa2:	6078      	str	r0, [r7, #4]
	ptrStatesClass->timeElapsed=true;
    2fa4:	4b04      	ldr	r3, [pc, #16]	; (2fb8 <_ZL24HVACOperationTimeElapsedPK10timer_task+0x1c>)
    2fa6:	681b      	ldr	r3, [r3, #0]
    2fa8:	2201      	movs	r2, #1
    2faa:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
}
    2fae:	bf00      	nop
    2fb0:	370c      	adds	r7, #12
    2fb2:	46bd      	mov	sp, r7
    2fb4:	bc80      	pop	{r7}
    2fb6:	4770      	bx	lr
    2fb8:	20008158 	.word	0x20008158

00002fbc <_ZL14HVACTimerTicksPK10timer_task>:
static void HVACTimerTicks(const struct timer_task *const timer_task)
{
    2fbc:	b480      	push	{r7}
    2fbe:	b083      	sub	sp, #12
    2fc0:	af00      	add	r7, sp, #0
    2fc2:	6078      	str	r0, [r7, #4]
	hvacTimer.ticks++;
    2fc4:	4b04      	ldr	r3, [pc, #16]	; (2fd8 <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2fc6:	689b      	ldr	r3, [r3, #8]
    2fc8:	3301      	adds	r3, #1
    2fca:	4a03      	ldr	r2, [pc, #12]	; (2fd8 <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2fcc:	6093      	str	r3, [r2, #8]
}
    2fce:	bf00      	nop
    2fd0:	370c      	adds	r7, #12
    2fd2:	46bd      	mov	sp, r7
    2fd4:	bc80      	pop	{r7}
    2fd6:	4770      	bx	lr
    2fd8:	2000a478 	.word	0x2000a478

00002fdc <_ZN12States_ClassC1Ev>:

static HVACState staticCurrentState;
	// default constructor
States_Class::States_Class(void)
    2fdc:	b580      	push	{r7, lr}
    2fde:	b082      	sub	sp, #8
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	6078      	str	r0, [r7, #4]
    2fe4:	687b      	ldr	r3, [r7, #4]
    2fe6:	f503 7306 	add.w	r3, r3, #536	; 0x218
    2fea:	4618      	mov	r0, r3
    2fec:	4b1c      	ldr	r3, [pc, #112]	; (3060 <_ZN12States_ClassC1Ev+0x84>)
    2fee:	4798      	blx	r3
    2ff0:	687b      	ldr	r3, [r7, #4]
    2ff2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
    2ff6:	4a1b      	ldr	r2, [pc, #108]	; (3064 <_ZN12States_ClassC1Ev+0x88>)
    2ff8:	4611      	mov	r1, r2
    2ffa:	4618      	mov	r0, r3
    2ffc:	4b1a      	ldr	r3, [pc, #104]	; (3068 <_ZN12States_ClassC1Ev+0x8c>)
    2ffe:	4798      	blx	r3
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	3304      	adds	r3, #4
    3004:	4618      	mov	r0, r3
    3006:	4b19      	ldr	r3, [pc, #100]	; (306c <_ZN12States_ClassC1Ev+0x90>)
    3008:	4798      	blx	r3
    300a:	4a19      	ldr	r2, [pc, #100]	; (3070 <_ZN12States_ClassC1Ev+0x94>)
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	601a      	str	r2, [r3, #0]
    3010:	687b      	ldr	r3, [r7, #4]
    3012:	f503 7306 	add.w	r3, r3, #536	; 0x218
    3016:	4a17      	ldr	r2, [pc, #92]	; (3074 <_ZN12States_ClassC1Ev+0x98>)
    3018:	601a      	str	r2, [r3, #0]
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
    3020:	4a15      	ldr	r2, [pc, #84]	; (3078 <_ZN12States_ClassC1Ev+0x9c>)
    3022:	601a      	str	r2, [r3, #0]
{
	ptrStatesClass=this;
    3024:	4a15      	ldr	r2, [pc, #84]	; (307c <_ZN12States_ClassC1Ev+0xa0>)
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	6013      	str	r3, [r2, #0]
	listener.eventHandler = NULL;
    302a:	4b15      	ldr	r3, [pc, #84]	; (3080 <_ZN12States_ClassC1Ev+0xa4>)
    302c:	2200      	movs	r2, #0
    302e:	615a      	str	r2, [r3, #20]
	staticCurrentState=defaultState;
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	f503 7306 	add.w	r3, r3, #536	; 0x218
    3036:	4a13      	ldr	r2, [pc, #76]	; (3084 <_ZN12States_ClassC1Ev+0xa8>)
    3038:	4610      	mov	r0, r2
    303a:	3304      	adds	r3, #4
    303c:	2268      	movs	r2, #104	; 0x68
    303e:	4619      	mov	r1, r3
    3040:	4b11      	ldr	r3, [pc, #68]	; (3088 <_ZN12States_ClassC1Ev+0xac>)
    3042:	4798      	blx	r3
	isOK=false;
    3044:	687b      	ldr	r3, [r7, #4]
    3046:	2200      	movs	r2, #0
    3048:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	hvacState=&staticCurrentState;
    304c:	687b      	ldr	r3, [r7, #4]
    304e:	4a0d      	ldr	r2, [pc, #52]	; (3084 <_ZN12States_ClassC1Ev+0xa8>)
    3050:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
    3054:	687b      	ldr	r3, [r7, #4]
    3056:	4618      	mov	r0, r3
    3058:	3708      	adds	r7, #8
    305a:	46bd      	mov	sp, r7
    305c:	bd80      	pop	{r7, pc}
    305e:	bf00      	nop
    3060:	00001081 	.word	0x00001081
    3064:	0002098c 	.word	0x0002098c
    3068:	00001c19 	.word	0x00001c19
    306c:	00001d99 	.word	0x00001d99
    3070:	00020960 	.word	0x00020960
    3074:	00020970 	.word	0x00020970
    3078:	00020980 	.word	0x00020980
    307c:	20008158 	.word	0x20008158
    3080:	20009b20 	.word	0x20009b20
    3084:	2000815c 	.word	0x2000815c
    3088:	0001c485 	.word	0x0001c485

0000308c <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
    308c:	b580      	push	{r7, lr}
    308e:	b082      	sub	sp, #8
    3090:	af00      	add	r7, sp, #0
    3092:	6078      	str	r0, [r7, #4]
    3094:	4a12      	ldr	r2, [pc, #72]	; (30e0 <_ZN12States_ClassD1Ev+0x54>)
    3096:	687b      	ldr	r3, [r7, #4]
    3098:	601a      	str	r2, [r3, #0]
    309a:	687b      	ldr	r3, [r7, #4]
    309c:	f503 7306 	add.w	r3, r3, #536	; 0x218
    30a0:	4a10      	ldr	r2, [pc, #64]	; (30e4 <_ZN12States_ClassD1Ev+0x58>)
    30a2:	601a      	str	r2, [r3, #0]
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
    30aa:	4a0f      	ldr	r2, [pc, #60]	; (30e8 <_ZN12States_ClassD1Ev+0x5c>)
    30ac:	601a      	str	r2, [r3, #0]
    30ae:	687b      	ldr	r3, [r7, #4]
    30b0:	3304      	adds	r3, #4
    30b2:	4618      	mov	r0, r3
    30b4:	4b0d      	ldr	r3, [pc, #52]	; (30ec <_ZN12States_ClassD1Ev+0x60>)
    30b6:	4798      	blx	r3
    30b8:	687b      	ldr	r3, [r7, #4]
    30ba:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
    30be:	4a0c      	ldr	r2, [pc, #48]	; (30f0 <_ZN12States_ClassD1Ev+0x64>)
    30c0:	4611      	mov	r1, r2
    30c2:	4618      	mov	r0, r3
    30c4:	4b0b      	ldr	r3, [pc, #44]	; (30f4 <_ZN12States_ClassD1Ev+0x68>)
    30c6:	4798      	blx	r3
    30c8:	687b      	ldr	r3, [r7, #4]
    30ca:	f503 7306 	add.w	r3, r3, #536	; 0x218
    30ce:	4618      	mov	r0, r3
    30d0:	4b09      	ldr	r3, [pc, #36]	; (30f8 <_ZN12States_ClassD1Ev+0x6c>)
    30d2:	4798      	blx	r3
{
} //~States_Class
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	4618      	mov	r0, r3
    30d8:	3708      	adds	r7, #8
    30da:	46bd      	mov	sp, r7
    30dc:	bd80      	pop	{r7, pc}
    30de:	bf00      	nop
    30e0:	00020960 	.word	0x00020960
    30e4:	00020970 	.word	0x00020970
    30e8:	00020980 	.word	0x00020980
    30ec:	00001dad 	.word	0x00001dad
    30f0:	0002098c 	.word	0x0002098c
    30f4:	00001c4b 	.word	0x00001c4b
    30f8:	000010e5 	.word	0x000010e5

000030fc <_ZN12States_Class4InitEv>:

bool States_Class::Init(void){
    30fc:	b580      	push	{r7, lr}
    30fe:	b082      	sub	sp, #8
    3100:	af00      	add	r7, sp, #0
    3102:	6078      	str	r0, [r7, #4]
	if (hvacTimer.Init())
    3104:	4816      	ldr	r0, [pc, #88]	; (3160 <_ZN12States_Class4InitEv+0x64>)
    3106:	4b17      	ldr	r3, [pc, #92]	; (3164 <_ZN12States_Class4InitEv+0x68>)
    3108:	4798      	blx	r3
    310a:	4603      	mov	r3, r0
    310c:	2b00      	cmp	r3, #0
    310e:	d004      	beq.n	311a <_ZN12States_Class4InitEv+0x1e>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACTimerTicks),1);
    3110:	2201      	movs	r2, #1
    3112:	4915      	ldr	r1, [pc, #84]	; (3168 <_ZN12States_Class4InitEv+0x6c>)
    3114:	4812      	ldr	r0, [pc, #72]	; (3160 <_ZN12States_Class4InitEv+0x64>)
    3116:	4b15      	ldr	r3, [pc, #84]	; (316c <_ZN12States_Class4InitEv+0x70>)
    3118:	4798      	blx	r3
	}
	isOK=temperatures.Init();
    311a:	4815      	ldr	r0, [pc, #84]	; (3170 <_ZN12States_Class4InitEv+0x74>)
    311c:	4b15      	ldr	r3, [pc, #84]	; (3174 <_ZN12States_Class4InitEv+0x78>)
    311e:	4798      	blx	r3
    3120:	4603      	mov	r3, r0
    3122:	461a      	mov	r2, r3
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	if (isOK)
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
    3130:	b2db      	uxtb	r3, r3
    3132:	2b00      	cmp	r3, #0
    3134:	d002      	beq.n	313c <_ZN12States_Class4InitEv+0x40>
	{
		temperatures.StartOneConversion();
    3136:	480e      	ldr	r0, [pc, #56]	; (3170 <_ZN12States_Class4InitEv+0x74>)
    3138:	4b0f      	ldr	r3, [pc, #60]	; (3178 <_ZN12States_Class4InitEv+0x7c>)
    313a:	4798      	blx	r3
	}
	if (fv1.Init())
    313c:	480f      	ldr	r0, [pc, #60]	; (317c <_ZN12States_Class4InitEv+0x80>)
    313e:	4b10      	ldr	r3, [pc, #64]	; (3180 <_ZN12States_Class4InitEv+0x84>)
    3140:	4798      	blx	r3
    3142:	4603      	mov	r3, r0
    3144:	2b00      	cmp	r3, #0
    3146:	d006      	beq.n	3156 <_ZN12States_Class4InitEv+0x5a>
	{
		hvacState->hvacStatus.statusBits.flapValve1=true;
    3148:	687b      	ldr	r3, [r7, #4]
    314a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    314e:	7d13      	ldrb	r3, [r2, #20]
    3150:	f043 0308 	orr.w	r3, r3, #8
    3154:	7513      	strb	r3, [r2, #20]
	}
	
	

	//return isOK;
	return true;
    3156:	2301      	movs	r3, #1
	
}
    3158:	4618      	mov	r0, r3
    315a:	3708      	adds	r7, #8
    315c:	46bd      	mov	sp, r7
    315e:	bd80      	pop	{r7, pc}
    3160:	2000a478 	.word	0x2000a478
    3164:	00017bd9 	.word	0x00017bd9
    3168:	00002fbd 	.word	0x00002fbd
    316c:	00017c9d 	.word	0x00017c9d
    3170:	20009d9c 	.word	0x20009d9c
    3174:	00015d49 	.word	0x00015d49
    3178:	00015e49 	.word	0x00015e49
    317c:	20009c38 	.word	0x20009c38
    3180:	0001539d 	.word	0x0001539d

00003184 <_ZN12States_Class16ControllerResumeEh>:
void States_Class::ControllerResume(uint8_t	operationMode){
    3184:	b590      	push	{r4, r7, lr}
    3186:	b08f      	sub	sp, #60	; 0x3c
    3188:	af02      	add	r7, sp, #8
    318a:	6078      	str	r0, [r7, #4]
    318c:	460b      	mov	r3, r1
    318e:	70fb      	strb	r3, [r7, #3]
	event e;
    3190:	f107 031c 	add.w	r3, r7, #28
    3194:	4618      	mov	r0, r3
    3196:	4b4b      	ldr	r3, [pc, #300]	; (32c4 <_ZN12States_Class16ControllerResumeEh+0x140>)
    3198:	4798      	blx	r3
	bool done(false);
    319a:	2300      	movs	r3, #0
    319c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	
	
		if (operationMode==0)
    31a0:	78fb      	ldrb	r3, [r7, #3]
    31a2:	2b00      	cmp	r3, #0
    31a4:	d115      	bne.n	31d2 <_ZN12States_Class16ControllerResumeEh+0x4e>
		{
			if (timeElapsed)
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    31ac:	b2db      	uxtb	r3, r3
    31ae:	2b00      	cmp	r3, #0
    31b0:	d00f      	beq.n	31d2 <_ZN12States_Class16ControllerResumeEh+0x4e>
			{
				usb<<"Air Conditioning System Operating"<<NEWLINE;
    31b2:	4945      	ldr	r1, [pc, #276]	; (32c8 <_ZN12States_Class16ControllerResumeEh+0x144>)
    31b4:	4845      	ldr	r0, [pc, #276]	; (32cc <_ZN12States_Class16ControllerResumeEh+0x148>)
    31b6:	4b46      	ldr	r3, [pc, #280]	; (32d0 <_ZN12States_Class16ControllerResumeEh+0x14c>)
    31b8:	4798      	blx	r3
    31ba:	4603      	mov	r3, r0
    31bc:	4945      	ldr	r1, [pc, #276]	; (32d4 <_ZN12States_Class16ControllerResumeEh+0x150>)
    31be:	4618      	mov	r0, r3
    31c0:	4b45      	ldr	r3, [pc, #276]	; (32d8 <_ZN12States_Class16ControllerResumeEh+0x154>)
    31c2:	4798      	blx	r3
				timeElapsed=false;
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	2200      	movs	r2, #0
    31c8:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
				delay_ms(10);
    31cc:	200a      	movs	r0, #10
    31ce:	4b43      	ldr	r3, [pc, #268]	; (32dc <_ZN12States_Class16ControllerResumeEh+0x158>)
    31d0:	4798      	blx	r3
				//alu.PrepareNewTask(kALUCheckCommunication);
				
			}
		}
		if (hvacState->currentState==kHVACStateLeaving)
    31d2:	687b      	ldr	r3, [r7, #4]
    31d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    31d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31da:	f240 1243 	movw	r2, #323	; 0x143
    31de:	4293      	cmp	r3, r2
    31e0:	d10a      	bne.n	31f8 <_ZN12States_Class16ControllerResumeEh+0x74>
		{
			prepareStateChangeEvent(hvacState->lastState);
    31e2:	687b      	ldr	r3, [r7, #4]
    31e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    31e8:	6a1b      	ldr	r3, [r3, #32]
    31ea:	b29b      	uxth	r3, r3
    31ec:	2200      	movs	r2, #0
    31ee:	4619      	mov	r1, r3
    31f0:	6878      	ldr	r0, [r7, #4]
    31f2:	4b3b      	ldr	r3, [pc, #236]	; (32e0 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    31f4:	4798      	blx	r3
    31f6:	e005      	b.n	3204 <_ZN12States_Class16ControllerResumeEh+0x80>
			
		} 
		else
		{
			prepareStateChangeEvent(kHVACStateInitialize);
    31f8:	2200      	movs	r2, #0
    31fa:	f44f 7197 	mov.w	r1, #302	; 0x12e
    31fe:	6878      	ldr	r0, [r7, #4]
    3200:	4b37      	ldr	r3, [pc, #220]	; (32e0 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    3202:	4798      	blx	r3
		}
		
		if (operationMode>0)
    3204:	78fb      	ldrb	r3, [r7, #3]
    3206:	2b00      	cmp	r3, #0
    3208:	dd51      	ble.n	32ae <_ZN12States_Class16ControllerResumeEh+0x12a>
		{
			
			event	e;
    320a:	f107 030c 	add.w	r3, r7, #12
    320e:	4618      	mov	r0, r3
    3210:	4b2c      	ldr	r3, [pc, #176]	; (32c4 <_ZN12States_Class16ControllerResumeEh+0x140>)
    3212:	4798      	blx	r3
			listener.eventHandler=&States_Class::CheckEvents;
    3214:	4b33      	ldr	r3, [pc, #204]	; (32e4 <_ZN12States_Class16ControllerResumeEh+0x160>)
    3216:	4a34      	ldr	r2, [pc, #208]	; (32e8 <_ZN12States_Class16ControllerResumeEh+0x164>)
    3218:	615a      	str	r2, [r3, #20]
			while ((cBit.IsOK())&&(!done))
    321a:	4834      	ldr	r0, [pc, #208]	; (32ec <_ZN12States_Class16ControllerResumeEh+0x168>)
    321c:	4b34      	ldr	r3, [pc, #208]	; (32f0 <_ZN12States_Class16ControllerResumeEh+0x16c>)
    321e:	4798      	blx	r3
    3220:	4603      	mov	r3, r0
    3222:	2b00      	cmp	r3, #0
    3224:	d008      	beq.n	3238 <_ZN12States_Class16ControllerResumeEh+0xb4>
    3226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    322a:	f083 0301 	eor.w	r3, r3, #1
    322e:	b2db      	uxtb	r3, r3
    3230:	2b00      	cmp	r3, #0
    3232:	d001      	beq.n	3238 <_ZN12States_Class16ControllerResumeEh+0xb4>
    3234:	2301      	movs	r3, #1
    3236:	e000      	b.n	323a <_ZN12States_Class16ControllerResumeEh+0xb6>
    3238:	2300      	movs	r3, #0
    323a:	2b00      	cmp	r3, #0
    323c:	d03e      	beq.n	32bc <_ZN12States_Class16ControllerResumeEh+0x138>
			{
				if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent,8))
    323e:	f107 010c 	add.w	r1, r7, #12
    3242:	2308      	movs	r3, #8
    3244:	9300      	str	r3, [sp, #0]
    3246:	f44f 7300 	mov.w	r3, #512	; 0x200
    324a:	f44f 7200 	mov.w	r2, #512	; 0x200
    324e:	4825      	ldr	r0, [pc, #148]	; (32e4 <_ZN12States_Class16ControllerResumeEh+0x160>)
    3250:	4c28      	ldr	r4, [pc, #160]	; (32f4 <_ZN12States_Class16ControllerResumeEh+0x170>)
    3252:	47a0      	blx	r4
    3254:	4603      	mov	r3, r0
    3256:	2b00      	cmp	r3, #0
    3258:	d011      	beq.n	327e <_ZN12States_Class16ControllerResumeEh+0xfa>
				{
					handleHVACEvent(e);
    325a:	f107 030c 	add.w	r3, r7, #12
    325e:	4619      	mov	r1, r3
    3260:	6878      	ldr	r0, [r7, #4]
    3262:	4b25      	ldr	r3, [pc, #148]	; (32f8 <_ZN12States_Class16ControllerResumeEh+0x174>)
    3264:	4798      	blx	r3
					if (hvacState->currentState==kHVACStateLeaving)
    3266:	687b      	ldr	r3, [r7, #4]
    3268:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    326e:	f240 1243 	movw	r2, #323	; 0x143
    3272:	4293      	cmp	r3, r2
    3274:	d1d1      	bne.n	321a <_ZN12States_Class16ControllerResumeEh+0x96>
					{
							done=true;
    3276:	2301      	movs	r3, #1
    3278:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
    327c:	e01e      	b.n	32bc <_ZN12States_Class16ControllerResumeEh+0x138>
					} 
						
				}
				else if (listener.WaitForEvent(e, kALUEventClass, kAnyEventType,4)){
    327e:	f107 010c 	add.w	r1, r7, #12
    3282:	2304      	movs	r3, #4
    3284:	9300      	str	r3, [sp, #0]
    3286:	f64f 73ff 	movw	r3, #65535	; 0xffff
    328a:	f44f 7240 	mov.w	r2, #768	; 0x300
    328e:	4815      	ldr	r0, [pc, #84]	; (32e4 <_ZN12States_Class16ControllerResumeEh+0x160>)
    3290:	4c1a      	ldr	r4, [pc, #104]	; (32fc <_ZN12States_Class16ControllerResumeEh+0x178>)
    3292:	47a0      	blx	r4
    3294:	4603      	mov	r3, r0
    3296:	2b00      	cmp	r3, #0
    3298:	d0bf      	beq.n	321a <_ZN12States_Class16ControllerResumeEh+0x96>
					alu.PrepareNewEvent(kALUEventCheckPheripherals);
    329a:	2200      	movs	r2, #0
    329c:	f240 1105 	movw	r1, #261	; 0x105
    32a0:	4817      	ldr	r0, [pc, #92]	; (3300 <_ZN12States_Class16ControllerResumeEh+0x17c>)
    32a2:	4b18      	ldr	r3, [pc, #96]	; (3304 <_ZN12States_Class16ControllerResumeEh+0x180>)
    32a4:	4798      	blx	r3
					done=true;
    32a6:	2301      	movs	r3, #1
    32a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while ((cBit.IsOK())&&(!done))
    32ac:	e7b5      	b.n	321a <_ZN12States_Class16ControllerResumeEh+0x96>
				}
			}
			
		}else{
			alu.PrepareNewEvent(kALUEventSimpleStart);
    32ae:	2200      	movs	r2, #0
    32b0:	f44f 7182 	mov.w	r1, #260	; 0x104
    32b4:	4812      	ldr	r0, [pc, #72]	; (3300 <_ZN12States_Class16ControllerResumeEh+0x17c>)
    32b6:	4b13      	ldr	r3, [pc, #76]	; (3304 <_ZN12States_Class16ControllerResumeEh+0x180>)
    32b8:	4798      	blx	r3
			return;
    32ba:	bf00      	nop
		}
		
}
    32bc:	3734      	adds	r7, #52	; 0x34
    32be:	46bd      	mov	sp, r7
    32c0:	bd90      	pop	{r4, r7, pc}
    32c2:	bf00      	nop
    32c4:	000003c5 	.word	0x000003c5
    32c8:	00020860 	.word	0x00020860
    32cc:	2000a4d0 	.word	0x2000a4d0
    32d0:	0000452d 	.word	0x0000452d
    32d4:	00020884 	.word	0x00020884
    32d8:	00000c99 	.word	0x00000c99
    32dc:	000067d5 	.word	0x000067d5
    32e0:	000040f5 	.word	0x000040f5
    32e4:	20009b20 	.word	0x20009b20
    32e8:	0000444d 	.word	0x0000444d
    32ec:	20008154 	.word	0x20008154
    32f0:	00000fe3 	.word	0x00000fe3
    32f4:	00014d49 	.word	0x00014d49
    32f8:	00003535 	.word	0x00003535
    32fc:	00014d81 	.word	0x00014d81
    3300:	20000c80 	.word	0x20000c80
    3304:	00000a49 	.word	0x00000a49

00003308 <_ZN12States_Class5StartEh>:

void States_Class::Start(uint8_t	operationMode)
	{
    3308:	b590      	push	{r4, r7, lr}
    330a:	b08d      	sub	sp, #52	; 0x34
    330c:	af02      	add	r7, sp, #8
    330e:	6078      	str	r0, [r7, #4]
    3310:	460b      	mov	r3, r1
    3312:	70fb      	strb	r3, [r7, #3]
	hvacState->currentState = kHVACStateStart;
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    331a:	f44f 7296 	mov.w	r2, #300	; 0x12c
    331e:	625a      	str	r2, [r3, #36]	; 0x24
	bool done(false);
    3320:	2300      	movs	r3, #0
    3322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (operationMode==0)
    3326:	78fb      	ldrb	r3, [r7, #3]
    3328:	2b00      	cmp	r3, #0
    332a:	d113      	bne.n	3354 <_ZN12States_Class5StartEh+0x4c>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACOperationTimeElapsed),100);
    332c:	2264      	movs	r2, #100	; 0x64
    332e:	4962      	ldr	r1, [pc, #392]	; (34b8 <_ZN12States_Class5StartEh+0x1b0>)
    3330:	4862      	ldr	r0, [pc, #392]	; (34bc <_ZN12States_Class5StartEh+0x1b4>)
    3332:	4b63      	ldr	r3, [pc, #396]	; (34c0 <_ZN12States_Class5StartEh+0x1b8>)
    3334:	4798      	blx	r3
		usb<<"Air Conditioning System Started"<<NEWLINE;
    3336:	4963      	ldr	r1, [pc, #396]	; (34c4 <_ZN12States_Class5StartEh+0x1bc>)
    3338:	4863      	ldr	r0, [pc, #396]	; (34c8 <_ZN12States_Class5StartEh+0x1c0>)
    333a:	4b64      	ldr	r3, [pc, #400]	; (34cc <_ZN12States_Class5StartEh+0x1c4>)
    333c:	4798      	blx	r3
    333e:	4603      	mov	r3, r0
    3340:	4963      	ldr	r1, [pc, #396]	; (34d0 <_ZN12States_Class5StartEh+0x1c8>)
    3342:	4618      	mov	r0, r3
    3344:	4b63      	ldr	r3, [pc, #396]	; (34d4 <_ZN12States_Class5StartEh+0x1cc>)
    3346:	4798      	blx	r3
		alu.PrepareNewTask(kALUTaskCheckCommunication);
    3348:	2200      	movs	r2, #0
    334a:	2103      	movs	r1, #3
    334c:	4862      	ldr	r0, [pc, #392]	; (34d8 <_ZN12States_Class5StartEh+0x1d0>)
    334e:	4b63      	ldr	r3, [pc, #396]	; (34dc <_ZN12States_Class5StartEh+0x1d4>)
    3350:	4798      	blx	r3
	
		return;
    3352:	e0ad      	b.n	34b0 <_ZN12States_Class5StartEh+0x1a8>
	}
		
		

    tick_t	timerValue = 0L;
    3354:	2300      	movs	r3, #0
    3356:	623b      	str	r3, [r7, #32]
    bool	isCurrentStateValid = false;
    3358:	2300      	movs	r3, #0
    335a:	77fb      	strb	r3, [r7, #31]
	memory.ReadFastApplicationState(lastHVACState);
    335c:	687b      	ldr	r3, [r7, #4]
    335e:	33f0      	adds	r3, #240	; 0xf0
    3360:	4619      	mov	r1, r3
    3362:	485f      	ldr	r0, [pc, #380]	; (34e0 <_ZN12States_Class5StartEh+0x1d8>)
    3364:	4b5f      	ldr	r3, [pc, #380]	; (34e4 <_ZN12States_Class5StartEh+0x1dc>)
    3366:	4798      	blx	r3
	
	if (calendar.WasInterrupted())
    3368:	485f      	ldr	r0, [pc, #380]	; (34e8 <_ZN12States_Class5StartEh+0x1e0>)
    336a:	4b60      	ldr	r3, [pc, #384]	; (34ec <_ZN12States_Class5StartEh+0x1e4>)
    336c:	4798      	blx	r3
    336e:	4603      	mov	r3, r0
    3370:	2b00      	cmp	r3, #0
    3372:	d019      	beq.n	33a8 <_ZN12States_Class5StartEh+0xa0>
	{
		powerInterruptDuration = calendar.GetPowerInterrupTime();
    3374:	485c      	ldr	r0, [pc, #368]	; (34e8 <_ZN12States_Class5StartEh+0x1e0>)
    3376:	4b5e      	ldr	r3, [pc, #376]	; (34f0 <_ZN12States_Class5StartEh+0x1e8>)
    3378:	4798      	blx	r3
    337a:	4602      	mov	r2, r0
    337c:	687b      	ldr	r3, [r7, #4]
    337e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		#ifdef OFFLINE
		resumeLastStateValid = ((powerInterruptDuration > 0) && (powerInterruptDuration < 5000L));
		#else
		resumeLastStateValid = ((powerInterruptDuration >= 0) && (powerInterruptDuration < 5000L));
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    3388:	2b00      	cmp	r3, #0
    338a:	db08      	blt.n	339e <_ZN12States_Class5StartEh+0x96>
    338c:	687b      	ldr	r3, [r7, #4]
    338e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    3392:	f241 3287 	movw	r2, #4999	; 0x1387
    3396:	4293      	cmp	r3, r2
    3398:	dc01      	bgt.n	339e <_ZN12States_Class5StartEh+0x96>
    339a:	2201      	movs	r2, #1
    339c:	e000      	b.n	33a0 <_ZN12States_Class5StartEh+0x98>
    339e:	2200      	movs	r2, #0
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    33a6:	e002      	b.n	33ae <_ZN12States_Class5StartEh+0xa6>

		usb << "powerInterruptDuration was " << powerInterruptDuration << (resumeLastStateValid?" 200msec":" power resume") << newline;
		
		#endif
	}else{
		memory.LogResetEvent();
    33a8:	4852      	ldr	r0, [pc, #328]	; (34f4 <_ZN12States_Class5StartEh+0x1ec>)
    33aa:	4b53      	ldr	r3, [pc, #332]	; (34f8 <_ZN12States_Class5StartEh+0x1f0>)
    33ac:	4798      	blx	r3
	//	SetDefaultState();
	//}



	readResult=memory.ReadLastConfigurationData(configuration);
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
    33b4:	4619      	mov	r1, r3
    33b6:	4851      	ldr	r0, [pc, #324]	; (34fc <_ZN12States_Class5StartEh+0x1f4>)
    33b8:	4b51      	ldr	r3, [pc, #324]	; (3500 <_ZN12States_Class5StartEh+0x1f8>)
    33ba:	4798      	blx	r3
    33bc:	4602      	mov	r2, r0
    33be:	687b      	ldr	r3, [r7, #4]
    33c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	if (readResult>0)
    33c4:	687b      	ldr	r3, [r7, #4]
    33c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    33ca:	2b00      	cmp	r3, #0
    33cc:	d00b      	beq.n	33e6 <_ZN12States_Class5StartEh+0xde>
		{
		#if __DEBUG__ > 3
			usb << "readConfigurationDataArea failed!" << newline;
		#endif
		SetFactoryDefaults(0, true, false);
    33ce:	687b      	ldr	r3, [r7, #4]
    33d0:	681b      	ldr	r3, [r3, #0]
    33d2:	3b0c      	subs	r3, #12
    33d4:	681b      	ldr	r3, [r3, #0]
    33d6:	461a      	mov	r2, r3
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	1898      	adds	r0, r3, r2
    33dc:	2300      	movs	r3, #0
    33de:	2201      	movs	r2, #1
    33e0:	2100      	movs	r1, #0
    33e2:	4c48      	ldr	r4, [pc, #288]	; (3504 <_ZN12States_Class5StartEh+0x1fc>)
    33e4:	47a0      	blx	r4
// #endif
	

	//interfaces.CheckInternalCommunication();

	if (readResult==0)
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    33ec:	2b00      	cmp	r3, #0
    33ee:	d158      	bne.n	34a2 <_ZN12States_Class5StartEh+0x19a>
    {
		prepareStateChangeEvent(kHVACStateInitialize);
    33f0:	2200      	movs	r2, #0
    33f2:	f44f 7197 	mov.w	r1, #302	; 0x12e
    33f6:	6878      	ldr	r0, [r7, #4]
    33f8:	4b43      	ldr	r3, [pc, #268]	; (3508 <_ZN12States_Class5StartEh+0x200>)
    33fa:	4798      	blx	r3
		event	e;
    33fc:	f107 030c 	add.w	r3, r7, #12
    3400:	4618      	mov	r0, r3
    3402:	4b42      	ldr	r3, [pc, #264]	; (350c <_ZN12States_Class5StartEh+0x204>)
    3404:	4798      	blx	r3
		listener.eventHandler=&States_Class::CheckEvents;
    3406:	4b42      	ldr	r3, [pc, #264]	; (3510 <_ZN12States_Class5StartEh+0x208>)
    3408:	4a42      	ldr	r2, [pc, #264]	; (3514 <_ZN12States_Class5StartEh+0x20c>)
    340a:	615a      	str	r2, [r3, #20]
		while ((cBit.IsOK())&&(!done))
    340c:	4842      	ldr	r0, [pc, #264]	; (3518 <_ZN12States_Class5StartEh+0x210>)
    340e:	4b43      	ldr	r3, [pc, #268]	; (351c <_ZN12States_Class5StartEh+0x214>)
    3410:	4798      	blx	r3
    3412:	4603      	mov	r3, r0
    3414:	2b00      	cmp	r3, #0
    3416:	d008      	beq.n	342a <_ZN12States_Class5StartEh+0x122>
    3418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    341c:	f083 0301 	eor.w	r3, r3, #1
    3420:	b2db      	uxtb	r3, r3
    3422:	2b00      	cmp	r3, #0
    3424:	d001      	beq.n	342a <_ZN12States_Class5StartEh+0x122>
    3426:	2301      	movs	r3, #1
    3428:	e000      	b.n	342c <_ZN12States_Class5StartEh+0x124>
    342a:	2300      	movs	r3, #0
    342c:	2b00      	cmp	r3, #0
    342e:	d03f      	beq.n	34b0 <_ZN12States_Class5StartEh+0x1a8>
		{
			if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent))
    3430:	4b3b      	ldr	r3, [pc, #236]	; (3520 <_ZN12States_Class5StartEh+0x218>)
    3432:	681b      	ldr	r3, [r3, #0]
    3434:	f107 010c 	add.w	r1, r7, #12
    3438:	9300      	str	r3, [sp, #0]
    343a:	f44f 7300 	mov.w	r3, #512	; 0x200
    343e:	f44f 7200 	mov.w	r2, #512	; 0x200
    3442:	4833      	ldr	r0, [pc, #204]	; (3510 <_ZN12States_Class5StartEh+0x208>)
    3444:	4c37      	ldr	r4, [pc, #220]	; (3524 <_ZN12States_Class5StartEh+0x21c>)
    3446:	47a0      	blx	r4
    3448:	4603      	mov	r3, r0
    344a:	2b00      	cmp	r3, #0
    344c:	d011      	beq.n	3472 <_ZN12States_Class5StartEh+0x16a>
			{
		
				handleHVACEvent(e);
    344e:	f107 030c 	add.w	r3, r7, #12
    3452:	4619      	mov	r1, r3
    3454:	6878      	ldr	r0, [r7, #4]
    3456:	4b34      	ldr	r3, [pc, #208]	; (3528 <_ZN12States_Class5StartEh+0x220>)
    3458:	4798      	blx	r3
				if (hvacState->currentState==kHVACStateLeaving)
    345a:	687b      	ldr	r3, [r7, #4]
    345c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3462:	f240 1243 	movw	r2, #323	; 0x143
    3466:	4293      	cmp	r3, r2
    3468:	d1d0      	bne.n	340c <_ZN12States_Class5StartEh+0x104>
				{
						done=true;
    346a:	2301      	movs	r3, #1
    346c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
    3470:	e01e      	b.n	34b0 <_ZN12States_Class5StartEh+0x1a8>
					
				}
			
			}
			else{
				if (listener.WaitForEvent(e, kALUEventClass, kHVACEventDoPendingTasks)){
    3472:	4b2b      	ldr	r3, [pc, #172]	; (3520 <_ZN12States_Class5StartEh+0x218>)
    3474:	681b      	ldr	r3, [r3, #0]
    3476:	f107 010c 	add.w	r1, r7, #12
    347a:	9300      	str	r3, [sp, #0]
    347c:	2303      	movs	r3, #3
    347e:	f44f 7240 	mov.w	r2, #768	; 0x300
    3482:	4823      	ldr	r0, [pc, #140]	; (3510 <_ZN12States_Class5StartEh+0x208>)
    3484:	4c29      	ldr	r4, [pc, #164]	; (352c <_ZN12States_Class5StartEh+0x224>)
    3486:	47a0      	blx	r4
    3488:	4603      	mov	r3, r0
    348a:	2b00      	cmp	r3, #0
    348c:	d0be      	beq.n	340c <_ZN12States_Class5StartEh+0x104>
					alu.PrepareNewEvent(kALUEventSimpleStart);
    348e:	2200      	movs	r2, #0
    3490:	f44f 7182 	mov.w	r1, #260	; 0x104
    3494:	4810      	ldr	r0, [pc, #64]	; (34d8 <_ZN12States_Class5StartEh+0x1d0>)
    3496:	4b26      	ldr	r3, [pc, #152]	; (3530 <_ZN12States_Class5StartEh+0x228>)
    3498:	4798      	blx	r3
					done=true;
    349a:	2301      	movs	r3, #1
    349c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    34a0:	e006      	b.n	34b0 <_ZN12States_Class5StartEh+0x1a8>

			}
		}
			
    }else{
		alu.PrepareNewEvent(kALUEventSimpleStart);
    34a2:	2200      	movs	r2, #0
    34a4:	f44f 7182 	mov.w	r1, #260	; 0x104
    34a8:	480b      	ldr	r0, [pc, #44]	; (34d8 <_ZN12States_Class5StartEh+0x1d0>)
    34aa:	4b21      	ldr	r3, [pc, #132]	; (3530 <_ZN12States_Class5StartEh+0x228>)
    34ac:	4798      	blx	r3
		return;
    34ae:	bf00      	nop
    }



}
    34b0:	372c      	adds	r7, #44	; 0x2c
    34b2:	46bd      	mov	sp, r7
    34b4:	bd90      	pop	{r4, r7, pc}
    34b6:	bf00      	nop
    34b8:	00002f9d 	.word	0x00002f9d
    34bc:	2000a478 	.word	0x2000a478
    34c0:	00017c9d 	.word	0x00017c9d
    34c4:	00020888 	.word	0x00020888
    34c8:	2000a4d0 	.word	0x2000a4d0
    34cc:	0000454d 	.word	0x0000454d
    34d0:	00020884 	.word	0x00020884
    34d4:	00000c99 	.word	0x00000c99
    34d8:	20000c80 	.word	0x20000c80
    34dc:	00000a0d 	.word	0x00000a0d
    34e0:	20002d64 	.word	0x20002d64
    34e4:	00001aa9 	.word	0x00001aa9
    34e8:	2000a250 	.word	0x2000a250
    34ec:	00017905 	.word	0x00017905
    34f0:	0001782d 	.word	0x0001782d
    34f4:	200026f4 	.word	0x200026f4
    34f8:	00001605 	.word	0x00001605
    34fc:	20002d74 	.word	0x20002d74
    3500:	00002985 	.word	0x00002985
    3504:	00001105 	.word	0x00001105
    3508:	000040f5 	.word	0x000040f5
    350c:	000003c5 	.word	0x000003c5
    3510:	20009b20 	.word	0x20009b20
    3514:	0000444d 	.word	0x0000444d
    3518:	20008154 	.word	0x20008154
    351c:	00000fe3 	.word	0x00000fe3
    3520:	00021fac 	.word	0x00021fac
    3524:	00014d49 	.word	0x00014d49
    3528:	00003535 	.word	0x00003535
    352c:	00014d81 	.word	0x00014d81
    3530:	00000a49 	.word	0x00000a49

00003534 <_ZN12States_Class15handleHVACEventER5event>:
	return result;
	}


void States_Class::handleHVACEvent(event& e)
	{
    3534:	b590      	push	{r4, r7, lr}
    3536:	b083      	sub	sp, #12
    3538:	af00      	add	r7, sp, #0
    353a:	6078      	str	r0, [r7, #4]
    353c:	6039      	str	r1, [r7, #0]
		hvacState->callingState = hvacState->currentState;
    353e:	687b      	ldr	r3, [r7, #4]
    3540:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3544:	687a      	ldr	r2, [r7, #4]
    3546:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    354a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    354c:	629a      	str	r2, [r3, #40]	; 0x28
	if (hvacState->currentState != kHVACStateResume){
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3556:	f240 122f 	movw	r2, #303	; 0x12f
    355a:	4293      	cmp	r3, r2
    355c:	d00c      	beq.n	3578 <_ZN12States_Class15handleHVACEventER5event+0x44>
		hvacState->currentState = e.data.wordData[0];
    355e:	687b      	ldr	r3, [r7, #4]
    3560:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3564:	683a      	ldr	r2, [r7, #0]
    3566:	8912      	ldrh	r2, [r2, #8]
    3568:	625a      	str	r2, [r3, #36]	; 0x24
		hvacState->stateFlags = e.data.wordData[1];
    356a:	687b      	ldr	r3, [r7, #4]
    356c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3570:	683a      	ldr	r2, [r7, #0]
    3572:	8952      	ldrh	r2, [r2, #10]
    3574:	631a      	str	r2, [r3, #48]	; 0x30
    3576:	e007      	b.n	3588 <_ZN12States_Class15handleHVACEventER5event+0x54>
		
	}else{
		hvacState->currentState=hvacState->lastState;
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    357e:	687a      	ldr	r2, [r7, #4]
    3580:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    3584:	6a12      	ldr	r2, [r2, #32]
    3586:	625a      	str	r2, [r3, #36]	; 0x24
	}
	hvacState->stateEntryTime = hvacTimer.Get_ticks();
    3588:	687b      	ldr	r3, [r7, #4]
    358a:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    358e:	4871      	ldr	r0, [pc, #452]	; (3754 <_ZN12States_Class15handleHVACEventER5event+0x220>)
    3590:	4b71      	ldr	r3, [pc, #452]	; (3758 <_ZN12States_Class15handleHVACEventER5event+0x224>)
    3592:	4798      	blx	r3
    3594:	4603      	mov	r3, r0
    3596:	6363      	str	r3, [r4, #52]	; 0x34

#if __DEBUG__ > 0
	
	usb << "handleGAINEvent received: switching from ";
    3598:	4970      	ldr	r1, [pc, #448]	; (375c <_ZN12States_Class15handleHVACEventER5event+0x228>)
    359a:	4871      	ldr	r0, [pc, #452]	; (3760 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    359c:	4b71      	ldr	r3, [pc, #452]	; (3764 <_ZN12States_Class15handleHVACEventER5event+0x230>)
    359e:	4798      	blx	r3
	//usb.write(gainStateDescription[hvacState->callingState]);
	usb << " to ";
    35a0:	4971      	ldr	r1, [pc, #452]	; (3768 <_ZN12States_Class15handleHVACEventER5event+0x234>)
    35a2:	486f      	ldr	r0, [pc, #444]	; (3760 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    35a4:	4b71      	ldr	r3, [pc, #452]	; (376c <_ZN12States_Class15handleHVACEventER5event+0x238>)
    35a6:	4798      	blx	r3
	//usb.write(gainStateDescription[hvacState->currentState]);
	//usb << " (flags == " << hvacState->stateFlags << ')' << NEWLINE;
	
#endif

	saveCurrentState();
    35a8:	6878      	ldr	r0, [r7, #4]
    35aa:	4b71      	ldr	r3, [pc, #452]	; (3770 <_ZN12States_Class15handleHVACEventER5event+0x23c>)
    35ac:	4798      	blx	r3

	switch (hvacState->currentState)
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    35b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    35b6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
    35ba:	2b15      	cmp	r3, #21
    35bc:	f200 80c0 	bhi.w	3740 <_ZN12States_Class15handleHVACEventER5event+0x20c>
    35c0:	a201      	add	r2, pc, #4	; (adr r2, 35c8 <_ZN12States_Class15handleHVACEventER5event+0x94>)
    35c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    35c6:	bf00      	nop
    35c8:	00003621 	.word	0x00003621
    35cc:	00003633 	.word	0x00003633
    35d0:	0000368d 	.word	0x0000368d
    35d4:	0000367b 	.word	0x0000367b
    35d8:	00003645 	.word	0x00003645
    35dc:	000036b1 	.word	0x000036b1
    35e0:	00003657 	.word	0x00003657
    35e4:	00003669 	.word	0x00003669
    35e8:	0000369f 	.word	0x0000369f
    35ec:	00003741 	.word	0x00003741
    35f0:	00003741 	.word	0x00003741
    35f4:	000036c3 	.word	0x000036c3
    35f8:	000036e7 	.word	0x000036e7
    35fc:	00003741 	.word	0x00003741
    3600:	000036d5 	.word	0x000036d5
    3604:	00003741 	.word	0x00003741
    3608:	000036f9 	.word	0x000036f9
    360c:	0000370b 	.word	0x0000370b
    3610:	0000371d 	.word	0x0000371d
    3614:	00003741 	.word	0x00003741
    3618:	00003741 	.word	0x00003741
    361c:	0000372f 	.word	0x0000372f
		{
		case kHVACStateInitialize:
			StateInitialize(hvacState->stateFlags);
    3620:	687b      	ldr	r3, [r7, #4]
    3622:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3628:	4619      	mov	r1, r3
    362a:	6878      	ldr	r0, [r7, #4]
    362c:	4b51      	ldr	r3, [pc, #324]	; (3774 <_ZN12States_Class15handleHVACEventER5event+0x240>)
    362e:	4798      	blx	r3
			break;
    3630:	e08b      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateResume:
			StateResume(hvacState->stateFlags);
    3632:	687b      	ldr	r3, [r7, #4]
    3634:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    363a:	4619      	mov	r1, r3
    363c:	6878      	ldr	r0, [r7, #4]
    363e:	4b4e      	ldr	r3, [pc, #312]	; (3778 <_ZN12States_Class15handleHVACEventER5event+0x244>)
    3640:	4798      	blx	r3
			break;
    3642:	e082      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateStandbyOFF:
			StateStandbyOFF(hvacState->stateFlags);
    3644:	687b      	ldr	r3, [r7, #4]
    3646:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    364c:	4619      	mov	r1, r3
    364e:	6878      	ldr	r0, [r7, #4]
    3650:	4b4a      	ldr	r3, [pc, #296]	; (377c <_ZN12States_Class15handleHVACEventER5event+0x248>)
    3652:	4798      	blx	r3
			break;
    3654:	e079      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStatePrepareStandbyON:
			StatePrepareStandbyON(hvacState->stateFlags);
    3656:	687b      	ldr	r3, [r7, #4]
    3658:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    365e:	4619      	mov	r1, r3
    3660:	6878      	ldr	r0, [r7, #4]
    3662:	4b47      	ldr	r3, [pc, #284]	; (3780 <_ZN12States_Class15handleHVACEventER5event+0x24c>)
    3664:	4798      	blx	r3
			break;
    3666:	e070      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateStandbyON:
			handleStateStandbyON(hvacState->stateFlags);
    3668:	687b      	ldr	r3, [r7, #4]
    366a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3670:	4619      	mov	r1, r3
    3672:	6878      	ldr	r0, [r7, #4]
    3674:	4b43      	ldr	r3, [pc, #268]	; (3784 <_ZN12States_Class15handleHVACEventER5event+0x250>)
    3676:	4798      	blx	r3
			break;
    3678:	e067      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>
		case kHVACStateStandbyAUTO:
			StateStandbyAUTO(hvacState->stateFlags);
    367a:	687b      	ldr	r3, [r7, #4]
    367c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3682:	4619      	mov	r1, r3
    3684:	6878      	ldr	r0, [r7, #4]
    3686:	4b40      	ldr	r3, [pc, #256]	; (3788 <_ZN12States_Class15handleHVACEventER5event+0x254>)
    3688:	4798      	blx	r3
			break;
    368a:	e05e      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>
		case kHVACStateStandbyVENT:
			StateStandbyVENT(hvacState->stateFlags);
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3694:	4619      	mov	r1, r3
    3696:	6878      	ldr	r0, [r7, #4]
    3698:	4b3c      	ldr	r3, [pc, #240]	; (378c <_ZN12States_Class15handleHVACEventER5event+0x258>)
    369a:	4798      	blx	r3
			break;
    369c:	e055      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateStandbyReady:
			handleStateStandbyReady(hvacState->stateFlags);
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36a6:	4619      	mov	r1, r3
    36a8:	6878      	ldr	r0, [r7, #4]
    36aa:	4b39      	ldr	r3, [pc, #228]	; (3790 <_ZN12States_Class15handleHVACEventER5event+0x25c>)
    36ac:	4798      	blx	r3
			break;
    36ae:	e04c      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>
		case kHVACStatePrepareStandbyOFF:
			StatePrepareStandbyOFF(hvacState->stateFlags);
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36b8:	4619      	mov	r1, r3
    36ba:	6878      	ldr	r0, [r7, #4]
    36bc:	4b35      	ldr	r3, [pc, #212]	; (3794 <_ZN12States_Class15handleHVACEventER5event+0x260>)
    36be:	4798      	blx	r3
			break;
    36c0:	e043      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateON:
			handleStateON(hvacState->stateFlags);
    36c2:	687b      	ldr	r3, [r7, #4]
    36c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36ca:	4619      	mov	r1, r3
    36cc:	6878      	ldr	r0, [r7, #4]
    36ce:	4b32      	ldr	r3, [pc, #200]	; (3798 <_ZN12States_Class15handleHVACEventER5event+0x264>)
    36d0:	4798      	blx	r3
			break;
    36d2:	e03a      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateFinished:
			handleStateFinished(hvacState->stateFlags);
    36d4:	687b      	ldr	r3, [r7, #4]
    36d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36dc:	4619      	mov	r1, r3
    36de:	6878      	ldr	r0, [r7, #4]
    36e0:	4b2e      	ldr	r3, [pc, #184]	; (379c <_ZN12States_Class15handleHVACEventER5event+0x268>)
    36e2:	4798      	blx	r3
			break;
    36e4:	e031      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateStoppedProcess:
			StateStoppedProcess(hvacState->stateFlags);
    36e6:	687b      	ldr	r3, [r7, #4]
    36e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36ee:	4619      	mov	r1, r3
    36f0:	6878      	ldr	r0, [r7, #4]
    36f2:	4b2b      	ldr	r3, [pc, #172]	; (37a0 <_ZN12States_Class15handleHVACEventER5event+0x26c>)
    36f4:	4798      	blx	r3
			break;
    36f6:	e028      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateSelfProtect:
			handleStateSelfProtect(hvacState->stateFlags);
    36f8:	687b      	ldr	r3, [r7, #4]
    36fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    36fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3700:	4619      	mov	r1, r3
    3702:	6878      	ldr	r0, [r7, #4]
    3704:	4b27      	ldr	r3, [pc, #156]	; (37a4 <_ZN12States_Class15handleHVACEventER5event+0x270>)
    3706:	4798      	blx	r3
			break;
    3708:	e01f      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateError:
			handleStateError(hvacState->stateFlags);
    370a:	687b      	ldr	r3, [r7, #4]
    370c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3712:	4619      	mov	r1, r3
    3714:	6878      	ldr	r0, [r7, #4]
    3716:	4b24      	ldr	r3, [pc, #144]	; (37a8 <_ZN12States_Class15handleHVACEventER5event+0x274>)
    3718:	4798      	blx	r3
			break;
    371a:	e016      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		case kHVACStateMaintenance:
			handleStateMaintenance(hvacState->stateFlags);
    371c:	687b      	ldr	r3, [r7, #4]
    371e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3724:	4619      	mov	r1, r3
    3726:	6878      	ldr	r0, [r7, #4]
    3728:	4b20      	ldr	r3, [pc, #128]	; (37ac <_ZN12States_Class15handleHVACEventER5event+0x278>)
    372a:	4798      	blx	r3
			break;
    372c:	e00d      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>
		case kHVACStateLeaving:
			StateLeaving(hvacState->stateFlags);
    372e:	687b      	ldr	r3, [r7, #4]
    3730:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3736:	4619      	mov	r1, r3
    3738:	6878      	ldr	r0, [r7, #4]
    373a:	4b1d      	ldr	r3, [pc, #116]	; (37b0 <_ZN12States_Class15handleHVACEventER5event+0x27c>)
    373c:	4798      	blx	r3
		break;
    373e:	e004      	b.n	374a <_ZN12States_Class15handleHVACEventER5event+0x216>

		default:
			handleStateError(kHVACErrorIllegalStateTransition);
    3740:	2102      	movs	r1, #2
    3742:	6878      	ldr	r0, [r7, #4]
    3744:	4b18      	ldr	r3, [pc, #96]	; (37a8 <_ZN12States_Class15handleHVACEventER5event+0x274>)
    3746:	4798      	blx	r3
			break;
    3748:	bf00      	nop
		}
	}
    374a:	bf00      	nop
    374c:	370c      	adds	r7, #12
    374e:	46bd      	mov	sp, r7
    3750:	bd90      	pop	{r4, r7, pc}
    3752:	bf00      	nop
    3754:	2000a478 	.word	0x2000a478
    3758:	00017d69 	.word	0x00017d69
    375c:	000208a8 	.word	0x000208a8
    3760:	2000a4d0 	.word	0x2000a4d0
    3764:	0000456d 	.word	0x0000456d
    3768:	000208d4 	.word	0x000208d4
    376c:	0000458d 	.word	0x0000458d
    3770:	00004169 	.word	0x00004169
    3774:	000037b5 	.word	0x000037b5
    3778:	00003875 	.word	0x00003875
    377c:	00003929 	.word	0x00003929
    3780:	00003d69 	.word	0x00003d69
    3784:	00003e5d 	.word	0x00003e5d
    3788:	00003a59 	.word	0x00003a59
    378c:	00003bdd 	.word	0x00003bdd
    3790:	00003ed1 	.word	0x00003ed1
    3794:	00003df1 	.word	0x00003df1
    3798:	00003f09 	.word	0x00003f09
    379c:	00003f55 	.word	0x00003f55
    37a0:	00003fd5 	.word	0x00003fd5
    37a4:	00004015 	.word	0x00004015
    37a8:	0000404d 	.word	0x0000404d
    37ac:	00004085 	.word	0x00004085
    37b0:	00003f8d 	.word	0x00003f8d

000037b4 <_ZN12States_Class15StateInitializeEm>:


void States_Class::StateInitialize(uint32 flags)
	{
    37b4:	b580      	push	{r7, lr}
    37b6:	b088      	sub	sp, #32
    37b8:	af00      	add	r7, sp, #0
    37ba:	6078      	str	r0, [r7, #4]
    37bc:	6039      	str	r1, [r7, #0]
	event	e;
    37be:	f107 030c 	add.w	r3, r7, #12
    37c2:	4618      	mov	r0, r3
    37c4:	4b1e      	ldr	r3, [pc, #120]	; (3840 <_ZN12States_Class15StateInitializeEm+0x8c>)
    37c6:	4798      	blx	r3
	hvacState->currentState=kHVACStateInitialize;
    37c8:	687b      	ldr	r3, [r7, #4]
    37ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    37ce:	f44f 7297 	mov.w	r2, #302	; 0x12e
    37d2:	625a      	str	r2, [r3, #36]	; 0x24
   	uint16	selfTestResult(kHVACNoError);
    37d4:	2300      	movs	r3, #0
    37d6:	83fb      	strh	r3, [r7, #30]
	
#if __DEBUG__ > 0
	
	usb << "handleStateInitialize: flags == 0x" << flags << NEWLINE;
    37d8:	491a      	ldr	r1, [pc, #104]	; (3844 <_ZN12States_Class15StateInitializeEm+0x90>)
    37da:	481b      	ldr	r0, [pc, #108]	; (3848 <_ZN12States_Class15StateInitializeEm+0x94>)
    37dc:	4b1b      	ldr	r3, [pc, #108]	; (384c <_ZN12States_Class15StateInitializeEm+0x98>)
    37de:	4798      	blx	r3
    37e0:	4602      	mov	r2, r0
    37e2:	463b      	mov	r3, r7
    37e4:	4619      	mov	r1, r3
    37e6:	4610      	mov	r0, r2
    37e8:	4b19      	ldr	r3, [pc, #100]	; (3850 <_ZN12States_Class15StateInitializeEm+0x9c>)
    37ea:	4798      	blx	r3
    37ec:	4603      	mov	r3, r0
    37ee:	4919      	ldr	r1, [pc, #100]	; (3854 <_ZN12States_Class15StateInitializeEm+0xa0>)
    37f0:	4618      	mov	r0, r3
    37f2:	4b19      	ldr	r3, [pc, #100]	; (3858 <_ZN12States_Class15StateInitializeEm+0xa4>)
    37f4:	4798      	blx	r3
		
#endif
	
	
	//listener.CheckEvent();
	if (pBit.isOK)
    37f6:	4b19      	ldr	r3, [pc, #100]	; (385c <_ZN12States_Class15StateInitializeEm+0xa8>)
    37f8:	781b      	ldrb	r3, [r3, #0]
    37fa:	b2db      	uxtb	r3, r3
    37fc:	2b00      	cmp	r3, #0
    37fe:	d017      	beq.n	3830 <_ZN12States_Class15StateInitializeEm+0x7c>
	{
		#if __DEBUG__ > 0
		
		usb << "handleStateInitialize" << NEWLINE;
    3800:	4917      	ldr	r1, [pc, #92]	; (3860 <_ZN12States_Class15StateInitializeEm+0xac>)
    3802:	4811      	ldr	r0, [pc, #68]	; (3848 <_ZN12States_Class15StateInitializeEm+0x94>)
    3804:	4b17      	ldr	r3, [pc, #92]	; (3864 <_ZN12States_Class15StateInitializeEm+0xb0>)
    3806:	4798      	blx	r3
    3808:	4603      	mov	r3, r0
    380a:	4912      	ldr	r1, [pc, #72]	; (3854 <_ZN12States_Class15StateInitializeEm+0xa0>)
    380c:	4618      	mov	r0, r3
    380e:	4b12      	ldr	r3, [pc, #72]	; (3858 <_ZN12States_Class15StateInitializeEm+0xa4>)
    3810:	4798      	blx	r3

		#ifdef _OFFLINE
			prepareStateChangeEvent( kHVACStateInterrupted);
			listener.SendEventSelf(e);
		#else
		selfTestResult = handlePowerOnSelftest();
    3812:	6878      	ldr	r0, [r7, #4]
    3814:	4b14      	ldr	r3, [pc, #80]	; (3868 <_ZN12States_Class15StateInitializeEm+0xb4>)
    3816:	4798      	blx	r3
    3818:	4603      	mov	r3, r0
    381a:	83fb      	strh	r3, [r7, #30]
		if (selfTestResult == kHVACNoError)
    381c:	8bfb      	ldrh	r3, [r7, #30]
    381e:	2b00      	cmp	r3, #0
    3820:	d10a      	bne.n	3838 <_ZN12States_Class15StateInitializeEm+0x84>
		{
			prepareStateChangeEvent( kHVACStateStandbyOFF);
    3822:	2200      	movs	r2, #0
    3824:	f44f 7199 	mov.w	r1, #306	; 0x132
    3828:	6878      	ldr	r0, [r7, #4]
    382a:	4b10      	ldr	r3, [pc, #64]	; (386c <_ZN12States_Class15StateInitializeEm+0xb8>)
    382c:	4798      	blx	r3
	}



	
	}
    382e:	e003      	b.n	3838 <_ZN12States_Class15StateInitializeEm+0x84>
		Stop(0);
    3830:	2100      	movs	r1, #0
    3832:	6878      	ldr	r0, [r7, #4]
    3834:	4b0e      	ldr	r3, [pc, #56]	; (3870 <_ZN12States_Class15StateInitializeEm+0xbc>)
    3836:	4798      	blx	r3
	}
    3838:	bf00      	nop
    383a:	3720      	adds	r7, #32
    383c:	46bd      	mov	sp, r7
    383e:	bd80      	pop	{r7, pc}
    3840:	000003c5 	.word	0x000003c5
    3844:	000208dc 	.word	0x000208dc
    3848:	2000a4d0 	.word	0x2000a4d0
    384c:	000045ad 	.word	0x000045ad
    3850:	000014a5 	.word	0x000014a5
    3854:	00020884 	.word	0x00020884
    3858:	00000c99 	.word	0x00000c99
    385c:	20008140 	.word	0x20008140
    3860:	00020900 	.word	0x00020900
    3864:	00002441 	.word	0x00002441
    3868:	00004145 	.word	0x00004145
    386c:	000040f5 	.word	0x000040f5
    3870:	000041f9 	.word	0x000041f9

00003874 <_ZN12States_Class11StateResumeEm>:


void States_Class::StateResume(uint32 flags)
	{
    3874:	b580      	push	{r7, lr}
    3876:	b088      	sub	sp, #32
    3878:	af00      	add	r7, sp, #0
    387a:	6078      	str	r0, [r7, #4]
    387c:	6039      	str	r1, [r7, #0]
	event	e;
    387e:	f107 030c 	add.w	r3, r7, #12
    3882:	4618      	mov	r0, r3
    3884:	4b23      	ldr	r3, [pc, #140]	; (3914 <_ZN12States_Class11StateResumeEm+0xa0>)
    3886:	4798      	blx	r3
	uint8	currentState(hvacState->currentState);
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3890:	77fb      	strb	r3, [r7, #31]
    uint16	selfTestResult(kHVACNoError);
    3892:	2300      	movs	r3, #0
    3894:	83bb      	strh	r3, [r7, #28]
	usb << "state.currentState (after) " << hvacState->currentState << newline;
#endif


    //Switch into current state if no error occured
    if(selfTestResult == kHVACNoError)
    3896:	8bbb      	ldrh	r3, [r7, #28]
    3898:	2b00      	cmp	r3, #0
    389a:	d128      	bne.n	38ee <_ZN12States_Class11StateResumeEm+0x7a>
    {
        switch (hvacState->currentState)
    389c:	687b      	ldr	r3, [r7, #4]
    389e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    38a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    38a4:	f240 1239 	movw	r2, #313	; 0x139
    38a8:	4293      	cmp	r3, r2
    38aa:	d003      	beq.n	38b4 <_ZN12States_Class11StateResumeEm+0x40>
    38ac:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
    38b0:	d00b      	beq.n	38ca <_ZN12States_Class11StateResumeEm+0x56>
    38b2:	e011      	b.n	38d8 <_ZN12States_Class11StateResumeEm+0x64>
        {
        case kHVACStateON:
            prepareStateChangeEvent( hvacState->currentState, true);
    38b4:	687b      	ldr	r3, [r7, #4]
    38b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    38ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    38bc:	b29b      	uxth	r3, r3
    38be:	2201      	movs	r2, #1
    38c0:	4619      	mov	r1, r3
    38c2:	6878      	ldr	r0, [r7, #4]
    38c4:	4b14      	ldr	r3, [pc, #80]	; (3918 <_ZN12States_Class11StateResumeEm+0xa4>)
    38c6:	4798      	blx	r3
            break;
    38c8:	e011      	b.n	38ee <_ZN12States_Class11StateResumeEm+0x7a>

        case kHVACStateStoppedProcess:
            prepareStateChangeEvent( kHVACStateStoppedProcess);
    38ca:	2200      	movs	r2, #0
    38cc:	f44f 719d 	mov.w	r1, #314	; 0x13a
    38d0:	6878      	ldr	r0, [r7, #4]
    38d2:	4b11      	ldr	r3, [pc, #68]	; (3918 <_ZN12States_Class11StateResumeEm+0xa4>)
    38d4:	4798      	blx	r3
            break;
    38d6:	e00a      	b.n	38ee <_ZN12States_Class11StateResumeEm+0x7a>

        default:
            prepareStateChangeEvent( hvacState->currentState);
    38d8:	687b      	ldr	r3, [r7, #4]
    38da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    38de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    38e0:	b29b      	uxth	r3, r3
    38e2:	2200      	movs	r2, #0
    38e4:	4619      	mov	r1, r3
    38e6:	6878      	ldr	r0, [r7, #4]
    38e8:	4b0b      	ldr	r3, [pc, #44]	; (3918 <_ZN12States_Class11StateResumeEm+0xa4>)
    38ea:	4798      	blx	r3
            break;
    38ec:	bf00      	nop
        }
    }

	hvacState->currentState = currentState;
    38ee:	687b      	ldr	r3, [r7, #4]
    38f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    38f4:	7ffa      	ldrb	r2, [r7, #31]
    38f6:	625a      	str	r2, [r3, #36]	; 0x24

	listener.CheckEvent();
    38f8:	4808      	ldr	r0, [pc, #32]	; (391c <_ZN12States_Class11StateResumeEm+0xa8>)
    38fa:	4b09      	ldr	r3, [pc, #36]	; (3920 <_ZN12States_Class11StateResumeEm+0xac>)
    38fc:	4798      	blx	r3
	listener.SendEventSelf(e);
    38fe:	f107 030c 	add.w	r3, r7, #12
    3902:	4619      	mov	r1, r3
    3904:	4805      	ldr	r0, [pc, #20]	; (391c <_ZN12States_Class11StateResumeEm+0xa8>)
    3906:	4b07      	ldr	r3, [pc, #28]	; (3924 <_ZN12States_Class11StateResumeEm+0xb0>)
    3908:	4798      	blx	r3
	}
    390a:	bf00      	nop
    390c:	3720      	adds	r7, #32
    390e:	46bd      	mov	sp, r7
    3910:	bd80      	pop	{r7, pc}
    3912:	bf00      	nop
    3914:	000003c5 	.word	0x000003c5
    3918:	000040f5 	.word	0x000040f5
    391c:	20009b20 	.word	0x20009b20
    3920:	0001508d 	.word	0x0001508d
    3924:	00014f45 	.word	0x00014f45

00003928 <_ZN12States_Class15StateStandbyOFFEm>:
				
void States_Class::StateStandbyOFF(uint32 flags)
{
    3928:	b580      	push	{r7, lr}
    392a:	b088      	sub	sp, #32
    392c:	af00      	add	r7, sp, #0
    392e:	6078      	str	r0, [r7, #4]
    3930:	6039      	str	r1, [r7, #0]
	event	e;
    3932:	f107 030c 	add.w	r3, r7, #12
    3936:	4618      	mov	r0, r3
    3938:	4b39      	ldr	r3, [pc, #228]	; (3a20 <_ZN12States_Class15StateStandbyOFFEm+0xf8>)
    393a:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyOFF;
    393c:	687b      	ldr	r3, [r7, #4]
    393e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3942:	f44f 7299 	mov.w	r2, #306	; 0x132
    3946:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=OFF;
    3948:	687b      	ldr	r3, [r7, #4]
    394a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    394e:	2200      	movs	r2, #0
    3950:	771a      	strb	r2, [r3, #28]
	hvacState->arincStatus.AC_CMD=false;
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    3958:	7f53      	ldrb	r3, [r2, #29]
    395a:	f36f 0300 	bfc	r3, #0, #1
    395e:	7753      	strb	r3, [r2, #29]
	bool	done(false);
    3960:	2300      	movs	r3, #0
    3962:	77fb      	strb	r3, [r7, #31]

#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    3964:	492f      	ldr	r1, [pc, #188]	; (3a24 <_ZN12States_Class15StateStandbyOFFEm+0xfc>)
    3966:	4830      	ldr	r0, [pc, #192]	; (3a28 <_ZN12States_Class15StateStandbyOFFEm+0x100>)
    3968:	4b30      	ldr	r3, [pc, #192]	; (3a2c <_ZN12States_Class15StateStandbyOFFEm+0x104>)
    396a:	4798      	blx	r3
    396c:	4603      	mov	r3, r0
    396e:	4930      	ldr	r1, [pc, #192]	; (3a30 <_ZN12States_Class15StateStandbyOFFEm+0x108>)
    3970:	4618      	mov	r0, r3
    3972:	4b30      	ldr	r3, [pc, #192]	; (3a34 <_ZN12States_Class15StateStandbyOFFEm+0x10c>)
    3974:	4798      	blx	r3
#endif




	listener.eventHandler=&States_Class::CheckEvents;
    3976:	4b30      	ldr	r3, [pc, #192]	; (3a38 <_ZN12States_Class15StateStandbyOFFEm+0x110>)
    3978:	4a30      	ldr	r2, [pc, #192]	; (3a3c <_ZN12States_Class15StateStandbyOFFEm+0x114>)
    397a:	615a      	str	r2, [r3, #20]
	if (fv1.IsPositionChanged())
    397c:	4830      	ldr	r0, [pc, #192]	; (3a40 <_ZN12States_Class15StateStandbyOFFEm+0x118>)
    397e:	4b31      	ldr	r3, [pc, #196]	; (3a44 <_ZN12States_Class15StateStandbyOFFEm+0x11c>)
    3980:	4798      	blx	r3
    3982:	4603      	mov	r3, r0
    3984:	2b00      	cmp	r3, #0
    3986:	d002      	beq.n	398e <_ZN12States_Class15StateStandbyOFFEm+0x66>
	{
		arinc.SaveFlapperValveAngle();
    3988:	482f      	ldr	r0, [pc, #188]	; (3a48 <_ZN12States_Class15StateStandbyOFFEm+0x120>)
    398a:	4b30      	ldr	r3, [pc, #192]	; (3a4c <_ZN12States_Class15StateStandbyOFFEm+0x124>)
    398c:	4798      	blx	r3
	}
	while(!done){
    398e:	7ffb      	ldrb	r3, [r7, #31]
    3990:	2b00      	cmp	r3, #0
    3992:	d141      	bne.n	3a18 <_ZN12States_Class15StateStandbyOFFEm+0xf0>
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    3994:	f107 030c 	add.w	r3, r7, #12
    3998:	2208      	movs	r2, #8
    399a:	4619      	mov	r1, r3
    399c:	6878      	ldr	r0, [r7, #4]
    399e:	4b2c      	ldr	r3, [pc, #176]	; (3a50 <_ZN12States_Class15StateStandbyOFFEm+0x128>)
    39a0:	4798      	blx	r3
    39a2:	4603      	mov	r3, r0
    39a4:	2b00      	cmp	r3, #0
    39a6:	d034      	beq.n	3a12 <_ZN12States_Class15StateStandbyOFFEm+0xea>
		{
			switch(e.eventClass){
    39a8:	89bb      	ldrh	r3, [r7, #12]
    39aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    39ae:	d006      	beq.n	39be <_ZN12States_Class15StateStandbyOFFEm+0x96>
    39b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    39b4:	d01f      	beq.n	39f6 <_ZN12States_Class15StateStandbyOFFEm+0xce>
    39b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    39ba:	d00e      	beq.n	39da <_ZN12States_Class15StateStandbyOFFEm+0xb2>
						break;
					}
		
				break;
				default:
				break;
    39bc:	e02b      	b.n	3a16 <_ZN12States_Class15StateStandbyOFFEm+0xee>
					switch (e.eventType){
    39be:	89fb      	ldrh	r3, [r7, #14]
    39c0:	2b03      	cmp	r3, #3
    39c2:	d000      	beq.n	39c6 <_ZN12States_Class15StateStandbyOFFEm+0x9e>
						break;
    39c4:	e008      	b.n	39d8 <_ZN12States_Class15StateStandbyOFFEm+0xb0>
							prepareStateChangeEvent(kHVACStateLeaving);
    39c6:	2200      	movs	r2, #0
    39c8:	f240 1143 	movw	r1, #323	; 0x143
    39cc:	6878      	ldr	r0, [r7, #4]
    39ce:	4b21      	ldr	r3, [pc, #132]	; (3a54 <_ZN12States_Class15StateStandbyOFFEm+0x12c>)
    39d0:	4798      	blx	r3
							done=true;
    39d2:	2301      	movs	r3, #1
    39d4:	77fb      	strb	r3, [r7, #31]
						break;
    39d6:	bf00      	nop
				break;
    39d8:	e01d      	b.n	3a16 <_ZN12States_Class15StateStandbyOFFEm+0xee>
					switch (e.eventType){
    39da:	89fb      	ldrh	r3, [r7, #14]
    39dc:	2b03      	cmp	r3, #3
    39de:	d000      	beq.n	39e2 <_ZN12States_Class15StateStandbyOFFEm+0xba>
							break;
    39e0:	e008      	b.n	39f4 <_ZN12States_Class15StateStandbyOFFEm+0xcc>
								prepareStateChangeEvent(kHVACStateLeaving);
    39e2:	2200      	movs	r2, #0
    39e4:	f240 1143 	movw	r1, #323	; 0x143
    39e8:	6878      	ldr	r0, [r7, #4]
    39ea:	4b1a      	ldr	r3, [pc, #104]	; (3a54 <_ZN12States_Class15StateStandbyOFFEm+0x12c>)
    39ec:	4798      	blx	r3
								done=true;
    39ee:	2301      	movs	r3, #1
    39f0:	77fb      	strb	r3, [r7, #31]
							break;
    39f2:	bf00      	nop
				break;
    39f4:	e00f      	b.n	3a16 <_ZN12States_Class15StateStandbyOFFEm+0xee>
					switch (e.eventType){
    39f6:	89fb      	ldrh	r3, [r7, #14]
    39f8:	2b04      	cmp	r3, #4
    39fa:	d000      	beq.n	39fe <_ZN12States_Class15StateStandbyOFFEm+0xd6>
						break;
    39fc:	e008      	b.n	3a10 <_ZN12States_Class15StateStandbyOFFEm+0xe8>
							prepareStateChangeEvent(kHVACStatePrepareStandbyON);
    39fe:	2200      	movs	r2, #0
    3a00:	f44f 719a 	mov.w	r1, #308	; 0x134
    3a04:	6878      	ldr	r0, [r7, #4]
    3a06:	4b13      	ldr	r3, [pc, #76]	; (3a54 <_ZN12States_Class15StateStandbyOFFEm+0x12c>)
    3a08:	4798      	blx	r3
							done=true;
    3a0a:	2301      	movs	r3, #1
    3a0c:	77fb      	strb	r3, [r7, #31]
						break;
    3a0e:	bf00      	nop
				break;
    3a10:	e001      	b.n	3a16 <_ZN12States_Class15StateStandbyOFFEm+0xee>
		
			
		} 
		else
		{
			done=false;			
    3a12:	2300      	movs	r3, #0
    3a14:	77fb      	strb	r3, [r7, #31]
	while(!done){
    3a16:	e7ba      	b.n	398e <_ZN12States_Class15StateStandbyOFFEm+0x66>
		}
	}



}
    3a18:	bf00      	nop
    3a1a:	3720      	adds	r7, #32
    3a1c:	46bd      	mov	sp, r7
    3a1e:	bd80      	pop	{r7, pc}
    3a20:	000003c5 	.word	0x000003c5
    3a24:	00020918 	.word	0x00020918
    3a28:	2000a4d0 	.word	0x2000a4d0
    3a2c:	00002441 	.word	0x00002441
    3a30:	00020884 	.word	0x00020884
    3a34:	00000c99 	.word	0x00000c99
    3a38:	20009b20 	.word	0x20009b20
    3a3c:	0000444d 	.word	0x0000444d
    3a40:	20009c38 	.word	0x20009c38
    3a44:	000156d9 	.word	0x000156d9
    3a48:	20008ff0 	.word	0x20008ff0
    3a4c:	00012cf9 	.word	0x00012cf9
    3a50:	000040bd 	.word	0x000040bd
    3a54:	000040f5 	.word	0x000040f5

00003a58 <_ZN12States_Class16StateStandbyAUTOEm>:
	
void States_Class::StateStandbyAUTO(uint32 flags)
{
    3a58:	b580      	push	{r7, lr}
    3a5a:	b088      	sub	sp, #32
    3a5c:	af00      	add	r7, sp, #0
    3a5e:	6078      	str	r0, [r7, #4]
    3a60:	6039      	str	r1, [r7, #0]
	event	e;
    3a62:	f107 030c 	add.w	r3, r7, #12
    3a66:	4618      	mov	r0, r3
    3a68:	4b4d      	ldr	r3, [pc, #308]	; (3ba0 <_ZN12States_Class16StateStandbyAUTOEm+0x148>)
    3a6a:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyAUTO;
    3a6c:	687b      	ldr	r3, [r7, #4]
    3a6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3a72:	f240 1231 	movw	r2, #305	; 0x131
    3a76:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=AUTO;
    3a78:	687b      	ldr	r3, [r7, #4]
    3a7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3a7e:	2202      	movs	r2, #2
    3a80:	771a      	strb	r2, [r3, #28]
	hvacState->arincStatus.AC_CMD=true;
    3a82:	687b      	ldr	r3, [r7, #4]
    3a84:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    3a88:	7f53      	ldrb	r3, [r2, #29]
    3a8a:	f043 0301 	orr.w	r3, r3, #1
    3a8e:	7753      	strb	r3, [r2, #29]
	bool	done(false);
    3a90:	2300      	movs	r3, #0
    3a92:	77fb      	strb	r3, [r7, #31]
	gotAluEvent=false;
    3a94:	687b      	ldr	r3, [r7, #4]
    3a96:	2200      	movs	r2, #0
    3a98:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	gotHVACEvent=false;
    3a9c:	687b      	ldr	r3, [r7, #4]
    3a9e:	2200      	movs	r2, #0
    3aa0:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	
	#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    3aa4:	493f      	ldr	r1, [pc, #252]	; (3ba4 <_ZN12States_Class16StateStandbyAUTOEm+0x14c>)
    3aa6:	4840      	ldr	r0, [pc, #256]	; (3ba8 <_ZN12States_Class16StateStandbyAUTOEm+0x150>)
    3aa8:	4b40      	ldr	r3, [pc, #256]	; (3bac <_ZN12States_Class16StateStandbyAUTOEm+0x154>)
    3aaa:	4798      	blx	r3
    3aac:	4603      	mov	r3, r0
    3aae:	4940      	ldr	r1, [pc, #256]	; (3bb0 <_ZN12States_Class16StateStandbyAUTOEm+0x158>)
    3ab0:	4618      	mov	r0, r3
    3ab2:	4b40      	ldr	r3, [pc, #256]	; (3bb4 <_ZN12States_Class16StateStandbyAUTOEm+0x15c>)
    3ab4:	4798      	blx	r3
	#endif




	listener.eventHandler=&States_Class::CheckEvents;
    3ab6:	4b40      	ldr	r3, [pc, #256]	; (3bb8 <_ZN12States_Class16StateStandbyAUTOEm+0x160>)
    3ab8:	4a40      	ldr	r2, [pc, #256]	; (3bbc <_ZN12States_Class16StateStandbyAUTOEm+0x164>)
    3aba:	615a      	str	r2, [r3, #20]
	while(!done){
    3abc:	7ffb      	ldrb	r3, [r7, #31]
    3abe:	2b00      	cmp	r3, #0
    3ac0:	d164      	bne.n	3b8c <_ZN12States_Class16StateStandbyAUTOEm+0x134>
		do
		{
				fv1.WriteSetpoint(GetFlapperValveSetpoint());
    3ac2:	687b      	ldr	r3, [r7, #4]
    3ac4:	681b      	ldr	r3, [r3, #0]
    3ac6:	3b10      	subs	r3, #16
    3ac8:	681b      	ldr	r3, [r3, #0]
    3aca:	461a      	mov	r2, r3
    3acc:	687b      	ldr	r3, [r7, #4]
    3ace:	4413      	add	r3, r2
    3ad0:	4618      	mov	r0, r3
    3ad2:	4b3b      	ldr	r3, [pc, #236]	; (3bc0 <_ZN12States_Class16StateStandbyAUTOEm+0x168>)
    3ad4:	4798      	blx	r3
    3ad6:	4603      	mov	r3, r0
    3ad8:	4619      	mov	r1, r3
    3ada:	483a      	ldr	r0, [pc, #232]	; (3bc4 <_ZN12States_Class16StateStandbyAUTOEm+0x16c>)
    3adc:	4b3a      	ldr	r3, [pc, #232]	; (3bc8 <_ZN12States_Class16StateStandbyAUTOEm+0x170>)
    3ade:	4798      	blx	r3
		}while(IsNewFlapperValveSetpoint());
    3ae0:	687b      	ldr	r3, [r7, #4]
    3ae2:	681b      	ldr	r3, [r3, #0]
    3ae4:	3b10      	subs	r3, #16
    3ae6:	681b      	ldr	r3, [r3, #0]
    3ae8:	461a      	mov	r2, r3
    3aea:	687b      	ldr	r3, [r7, #4]
    3aec:	4413      	add	r3, r2
		do
    3aee:	4618      	mov	r0, r3
    3af0:	4b36      	ldr	r3, [pc, #216]	; (3bcc <_ZN12States_Class16StateStandbyAUTOEm+0x174>)
    3af2:	4798      	blx	r3
    3af4:	4603      	mov	r3, r0
    3af6:	2b00      	cmp	r3, #0
    3af8:	d000      	beq.n	3afc <_ZN12States_Class16StateStandbyAUTOEm+0xa4>
    3afa:	e7e2      	b.n	3ac2 <_ZN12States_Class16StateStandbyAUTOEm+0x6a>
	
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    3afc:	f107 030c 	add.w	r3, r7, #12
    3b00:	2208      	movs	r2, #8
    3b02:	4619      	mov	r1, r3
    3b04:	6878      	ldr	r0, [r7, #4]
    3b06:	4b32      	ldr	r3, [pc, #200]	; (3bd0 <_ZN12States_Class16StateStandbyAUTOEm+0x178>)
    3b08:	4798      	blx	r3
    3b0a:	4603      	mov	r3, r0
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d03a      	beq.n	3b86 <_ZN12States_Class16StateStandbyAUTOEm+0x12e>
		{
			switch(e.eventClass){
    3b10:	89bb      	ldrh	r3, [r7, #12]
    3b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3b16:	d006      	beq.n	3b26 <_ZN12States_Class16StateStandbyAUTOEm+0xce>
    3b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3b1c:	d025      	beq.n	3b6a <_ZN12States_Class16StateStandbyAUTOEm+0x112>
    3b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3b22:	d011      	beq.n	3b48 <_ZN12States_Class16StateStandbyAUTOEm+0xf0>
						break;
					}
				
				break;
				default:
				break;
    3b24:	e031      	b.n	3b8a <_ZN12States_Class16StateStandbyAUTOEm+0x132>
					switch (e.eventType){
    3b26:	89fb      	ldrh	r3, [r7, #14]
    3b28:	2b03      	cmp	r3, #3
    3b2a:	d000      	beq.n	3b2e <_ZN12States_Class16StateStandbyAUTOEm+0xd6>
						break;
    3b2c:	e00b      	b.n	3b46 <_ZN12States_Class16StateStandbyAUTOEm+0xee>
							saveCurrentState();
    3b2e:	6878      	ldr	r0, [r7, #4]
    3b30:	4b28      	ldr	r3, [pc, #160]	; (3bd4 <_ZN12States_Class16StateStandbyAUTOEm+0x17c>)
    3b32:	4798      	blx	r3
							prepareStateChangeEvent(kHVACStateLeaving);
    3b34:	2200      	movs	r2, #0
    3b36:	f240 1143 	movw	r1, #323	; 0x143
    3b3a:	6878      	ldr	r0, [r7, #4]
    3b3c:	4b26      	ldr	r3, [pc, #152]	; (3bd8 <_ZN12States_Class16StateStandbyAUTOEm+0x180>)
    3b3e:	4798      	blx	r3
							done=true;
    3b40:	2301      	movs	r3, #1
    3b42:	77fb      	strb	r3, [r7, #31]
						break;
    3b44:	bf00      	nop
				break;
    3b46:	e020      	b.n	3b8a <_ZN12States_Class16StateStandbyAUTOEm+0x132>
					switch (e.eventType){
    3b48:	89fb      	ldrh	r3, [r7, #14]
    3b4a:	2b03      	cmp	r3, #3
    3b4c:	d000      	beq.n	3b50 <_ZN12States_Class16StateStandbyAUTOEm+0xf8>
						break;
    3b4e:	e00b      	b.n	3b68 <_ZN12States_Class16StateStandbyAUTOEm+0x110>
							saveCurrentState();
    3b50:	6878      	ldr	r0, [r7, #4]
    3b52:	4b20      	ldr	r3, [pc, #128]	; (3bd4 <_ZN12States_Class16StateStandbyAUTOEm+0x17c>)
    3b54:	4798      	blx	r3
							prepareStateChangeEvent(kHVACStateLeaving);
    3b56:	2200      	movs	r2, #0
    3b58:	f240 1143 	movw	r1, #323	; 0x143
    3b5c:	6878      	ldr	r0, [r7, #4]
    3b5e:	4b1e      	ldr	r3, [pc, #120]	; (3bd8 <_ZN12States_Class16StateStandbyAUTOEm+0x180>)
    3b60:	4798      	blx	r3
							done=true;
    3b62:	2301      	movs	r3, #1
    3b64:	77fb      	strb	r3, [r7, #31]
						break;
    3b66:	bf00      	nop
				break;
    3b68:	e00f      	b.n	3b8a <_ZN12States_Class16StateStandbyAUTOEm+0x132>
					switch (e.eventType){
    3b6a:	89fb      	ldrh	r3, [r7, #14]
    3b6c:	2b05      	cmp	r3, #5
    3b6e:	d000      	beq.n	3b72 <_ZN12States_Class16StateStandbyAUTOEm+0x11a>
						break;
    3b70:	e008      	b.n	3b84 <_ZN12States_Class16StateStandbyAUTOEm+0x12c>
							prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3b72:	2200      	movs	r2, #0
    3b74:	f240 1133 	movw	r1, #307	; 0x133
    3b78:	6878      	ldr	r0, [r7, #4]
    3b7a:	4b17      	ldr	r3, [pc, #92]	; (3bd8 <_ZN12States_Class16StateStandbyAUTOEm+0x180>)
    3b7c:	4798      	blx	r3
							done=true;
    3b7e:	2301      	movs	r3, #1
    3b80:	77fb      	strb	r3, [r7, #31]
						break;
    3b82:	bf00      	nop
				break;
    3b84:	e001      	b.n	3b8a <_ZN12States_Class16StateStandbyAUTOEm+0x132>
			
			
		}
		else
		{
			done=false;
    3b86:	2300      	movs	r3, #0
    3b88:	77fb      	strb	r3, [r7, #31]
	while(!done){
    3b8a:	e797      	b.n	3abc <_ZN12States_Class16StateStandbyAUTOEm+0x64>
		}
	}

	prepareStateChangeEvent(kHVACStateLeaving);
    3b8c:	2200      	movs	r2, #0
    3b8e:	f240 1143 	movw	r1, #323	; 0x143
    3b92:	6878      	ldr	r0, [r7, #4]
    3b94:	4b10      	ldr	r3, [pc, #64]	; (3bd8 <_ZN12States_Class16StateStandbyAUTOEm+0x180>)
    3b96:	4798      	blx	r3

}
    3b98:	bf00      	nop
    3b9a:	3720      	adds	r7, #32
    3b9c:	46bd      	mov	sp, r7
    3b9e:	bd80      	pop	{r7, pc}
    3ba0:	000003c5 	.word	0x000003c5
    3ba4:	00020918 	.word	0x00020918
    3ba8:	2000a4d0 	.word	0x2000a4d0
    3bac:	00002441 	.word	0x00002441
    3bb0:	00020884 	.word	0x00020884
    3bb4:	00000c99 	.word	0x00000c99
    3bb8:	20009b20 	.word	0x20009b20
    3bbc:	0000444d 	.word	0x0000444d
    3bc0:	00001d4d 	.word	0x00001d4d
    3bc4:	20009c38 	.word	0x20009c38
    3bc8:	00015465 	.word	0x00015465
    3bcc:	00001d65 	.word	0x00001d65
    3bd0:	000040bd 	.word	0x000040bd
    3bd4:	00004169 	.word	0x00004169
    3bd8:	000040f5 	.word	0x000040f5

00003bdc <_ZN12States_Class16StateStandbyVENTEm>:

void States_Class::StateStandbyVENT(uint32 flags)
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b08a      	sub	sp, #40	; 0x28
    3be0:	af00      	add	r7, sp, #0
    3be2:	6078      	str	r0, [r7, #4]
    3be4:	6039      	str	r1, [r7, #0]
	event	e;
    3be6:	f107 030c 	add.w	r3, r7, #12
    3bea:	4618      	mov	r0, r3
    3bec:	4b4b      	ldr	r3, [pc, #300]	; (3d1c <_ZN12States_Class16StateStandbyVENTEm+0x140>)
    3bee:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyVENT;
    3bf0:	687b      	ldr	r3, [r7, #4]
    3bf2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3bf6:	f44f 7298 	mov.w	r2, #304	; 0x130
    3bfa:	625a      	str	r2, [r3, #36]	; 0x24
	hvacState->arincStatus.statusArinc=VENT;
    3bfc:	687b      	ldr	r3, [r7, #4]
    3bfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3c02:	2201      	movs	r2, #1
    3c04:	771a      	strb	r2, [r3, #28]
	hvacState->arincStatus.AC_CMD=true;
    3c06:	687b      	ldr	r3, [r7, #4]
    3c08:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    3c0c:	7f53      	ldrb	r3, [r2, #29]
    3c0e:	f043 0301 	orr.w	r3, r3, #1
    3c12:	7753      	strb	r3, [r2, #29]
	bool	done(false);
    3c14:	2300      	movs	r3, #0
    3c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t	coolingRequired;

	
	#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    3c1a:	4941      	ldr	r1, [pc, #260]	; (3d20 <_ZN12States_Class16StateStandbyVENTEm+0x144>)
    3c1c:	4841      	ldr	r0, [pc, #260]	; (3d24 <_ZN12States_Class16StateStandbyVENTEm+0x148>)
    3c1e:	4b42      	ldr	r3, [pc, #264]	; (3d28 <_ZN12States_Class16StateStandbyVENTEm+0x14c>)
    3c20:	4798      	blx	r3
    3c22:	4603      	mov	r3, r0
    3c24:	4941      	ldr	r1, [pc, #260]	; (3d2c <_ZN12States_Class16StateStandbyVENTEm+0x150>)
    3c26:	4618      	mov	r0, r3
    3c28:	4b41      	ldr	r3, [pc, #260]	; (3d30 <_ZN12States_Class16StateStandbyVENTEm+0x154>)
    3c2a:	4798      	blx	r3
	#endif




	listener.eventHandler=&States_Class::CheckEvents;
    3c2c:	4b41      	ldr	r3, [pc, #260]	; (3d34 <_ZN12States_Class16StateStandbyVENTEm+0x158>)
    3c2e:	4a42      	ldr	r2, [pc, #264]	; (3d38 <_ZN12States_Class16StateStandbyVENTEm+0x15c>)
    3c30:	615a      	str	r2, [r3, #20]
	while(!done){
    3c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3c36:	2b00      	cmp	r3, #0
    3c38:	d166      	bne.n	3d08 <_ZN12States_Class16StateStandbyVENTEm+0x12c>
		cokspitTemperature=temperatures.values[0][1];
    3c3a:	4b40      	ldr	r3, [pc, #256]	; (3d3c <_ZN12States_Class16StateStandbyVENTEm+0x160>)
    3c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3c3e:	623b      	str	r3, [r7, #32]
		coolingRequired=0x80+(uint8_t)(((uint32_t)((cokspitTemperature*10)-200))&0xff);
    3c40:	4b3f      	ldr	r3, [pc, #252]	; (3d40 <_ZN12States_Class16StateStandbyVENTEm+0x164>)
    3c42:	4940      	ldr	r1, [pc, #256]	; (3d44 <_ZN12States_Class16StateStandbyVENTEm+0x168>)
    3c44:	6a38      	ldr	r0, [r7, #32]
    3c46:	4798      	blx	r3
    3c48:	4603      	mov	r3, r0
    3c4a:	461a      	mov	r2, r3
    3c4c:	4b3e      	ldr	r3, [pc, #248]	; (3d48 <_ZN12States_Class16StateStandbyVENTEm+0x16c>)
    3c4e:	493f      	ldr	r1, [pc, #252]	; (3d4c <_ZN12States_Class16StateStandbyVENTEm+0x170>)
    3c50:	4610      	mov	r0, r2
    3c52:	4798      	blx	r3
    3c54:	4603      	mov	r3, r0
    3c56:	461a      	mov	r2, r3
    3c58:	4b3d      	ldr	r3, [pc, #244]	; (3d50 <_ZN12States_Class16StateStandbyVENTEm+0x174>)
    3c5a:	4610      	mov	r0, r2
    3c5c:	4798      	blx	r3
    3c5e:	4603      	mov	r3, r0
    3c60:	b2db      	uxtb	r3, r3
    3c62:	3b80      	subs	r3, #128	; 0x80
    3c64:	77fb      	strb	r3, [r7, #31]
		fv1.WriteSetpoint(coolingRequired);
    3c66:	7ffb      	ldrb	r3, [r7, #31]
    3c68:	4619      	mov	r1, r3
    3c6a:	483a      	ldr	r0, [pc, #232]	; (3d54 <_ZN12States_Class16StateStandbyVENTEm+0x178>)
    3c6c:	4b3a      	ldr	r3, [pc, #232]	; (3d58 <_ZN12States_Class16StateStandbyVENTEm+0x17c>)
    3c6e:	4798      	blx	r3
		
		
		if (InStateEvent(e,CHECK_EVENT_STATE_TIMEOUT))
    3c70:	f107 030c 	add.w	r3, r7, #12
    3c74:	2208      	movs	r2, #8
    3c76:	4619      	mov	r1, r3
    3c78:	6878      	ldr	r0, [r7, #4]
    3c7a:	4b38      	ldr	r3, [pc, #224]	; (3d5c <_ZN12States_Class16StateStandbyVENTEm+0x180>)
    3c7c:	4798      	blx	r3
    3c7e:	4603      	mov	r3, r0
    3c80:	2b00      	cmp	r3, #0
    3c82:	d03d      	beq.n	3d00 <_ZN12States_Class16StateStandbyVENTEm+0x124>
		{
			switch(e.eventClass){
    3c84:	89bb      	ldrh	r3, [r7, #12]
    3c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3c8a:	d006      	beq.n	3c9a <_ZN12States_Class16StateStandbyVENTEm+0xbe>
    3c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3c90:	d027      	beq.n	3ce2 <_ZN12States_Class16StateStandbyVENTEm+0x106>
    3c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3c96:	d012      	beq.n	3cbe <_ZN12States_Class16StateStandbyVENTEm+0xe2>
					break;
				}
				
				break;
				default:
				break;
    3c98:	e035      	b.n	3d06 <_ZN12States_Class16StateStandbyVENTEm+0x12a>
				switch (e.eventType){
    3c9a:	89fb      	ldrh	r3, [r7, #14]
    3c9c:	2b03      	cmp	r3, #3
    3c9e:	d000      	beq.n	3ca2 <_ZN12States_Class16StateStandbyVENTEm+0xc6>
					break;
    3ca0:	e00c      	b.n	3cbc <_ZN12States_Class16StateStandbyVENTEm+0xe0>
						saveCurrentState();
    3ca2:	6878      	ldr	r0, [r7, #4]
    3ca4:	4b2e      	ldr	r3, [pc, #184]	; (3d60 <_ZN12States_Class16StateStandbyVENTEm+0x184>)
    3ca6:	4798      	blx	r3
						prepareStateChangeEvent(kHVACStateLeaving);
    3ca8:	2200      	movs	r2, #0
    3caa:	f240 1143 	movw	r1, #323	; 0x143
    3cae:	6878      	ldr	r0, [r7, #4]
    3cb0:	4b2c      	ldr	r3, [pc, #176]	; (3d64 <_ZN12States_Class16StateStandbyVENTEm+0x188>)
    3cb2:	4798      	blx	r3
						done=true;
    3cb4:	2301      	movs	r3, #1
    3cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    3cba:	bf00      	nop
				break;
    3cbc:	e023      	b.n	3d06 <_ZN12States_Class16StateStandbyVENTEm+0x12a>
				switch (e.eventType){
    3cbe:	89fb      	ldrh	r3, [r7, #14]
    3cc0:	2b03      	cmp	r3, #3
    3cc2:	d000      	beq.n	3cc6 <_ZN12States_Class16StateStandbyVENTEm+0xea>
					break;
    3cc4:	e00c      	b.n	3ce0 <_ZN12States_Class16StateStandbyVENTEm+0x104>
						saveCurrentState();
    3cc6:	6878      	ldr	r0, [r7, #4]
    3cc8:	4b25      	ldr	r3, [pc, #148]	; (3d60 <_ZN12States_Class16StateStandbyVENTEm+0x184>)
    3cca:	4798      	blx	r3
						prepareStateChangeEvent(kHVACStateLeaving);
    3ccc:	2200      	movs	r2, #0
    3cce:	f240 1143 	movw	r1, #323	; 0x143
    3cd2:	6878      	ldr	r0, [r7, #4]
    3cd4:	4b23      	ldr	r3, [pc, #140]	; (3d64 <_ZN12States_Class16StateStandbyVENTEm+0x188>)
    3cd6:	4798      	blx	r3
						done=true;
    3cd8:	2301      	movs	r3, #1
    3cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    3cde:	bf00      	nop
				break;
    3ce0:	e011      	b.n	3d06 <_ZN12States_Class16StateStandbyVENTEm+0x12a>
				switch (e.eventType){
    3ce2:	89fb      	ldrh	r3, [r7, #14]
    3ce4:	2b05      	cmp	r3, #5
    3ce6:	d000      	beq.n	3cea <_ZN12States_Class16StateStandbyVENTEm+0x10e>
					break;
    3ce8:	e009      	b.n	3cfe <_ZN12States_Class16StateStandbyVENTEm+0x122>
						prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3cea:	2200      	movs	r2, #0
    3cec:	f240 1133 	movw	r1, #307	; 0x133
    3cf0:	6878      	ldr	r0, [r7, #4]
    3cf2:	4b1c      	ldr	r3, [pc, #112]	; (3d64 <_ZN12States_Class16StateStandbyVENTEm+0x188>)
    3cf4:	4798      	blx	r3
						done=true;
    3cf6:	2301      	movs	r3, #1
    3cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    3cfc:	bf00      	nop
				break;
    3cfe:	e002      	b.n	3d06 <_ZN12States_Class16StateStandbyVENTEm+0x12a>
			
			
		}
		else
		{
			done=false;
    3d00:	2300      	movs	r3, #0
    3d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(!done){
    3d06:	e794      	b.n	3c32 <_ZN12States_Class16StateStandbyVENTEm+0x56>
		}
	}

	prepareStateChangeEvent(kHVACStateLeaving);
    3d08:	2200      	movs	r2, #0
    3d0a:	f240 1143 	movw	r1, #323	; 0x143
    3d0e:	6878      	ldr	r0, [r7, #4]
    3d10:	4b14      	ldr	r3, [pc, #80]	; (3d64 <_ZN12States_Class16StateStandbyVENTEm+0x188>)
    3d12:	4798      	blx	r3

}
    3d14:	bf00      	nop
    3d16:	3728      	adds	r7, #40	; 0x28
    3d18:	46bd      	mov	sp, r7
    3d1a:	bd80      	pop	{r7, pc}
    3d1c:	000003c5 	.word	0x000003c5
    3d20:	00020918 	.word	0x00020918
    3d24:	2000a4d0 	.word	0x2000a4d0
    3d28:	00002441 	.word	0x00002441
    3d2c:	00020884 	.word	0x00020884
    3d30:	00000c99 	.word	0x00000c99
    3d34:	20009b20 	.word	0x20009b20
    3d38:	0000444d 	.word	0x0000444d
    3d3c:	20009d9c 	.word	0x20009d9c
    3d40:	0001bac1 	.word	0x0001bac1
    3d44:	41200000 	.word	0x41200000
    3d48:	0001b8ad 	.word	0x0001b8ad
    3d4c:	43480000 	.word	0x43480000
    3d50:	0001be4d 	.word	0x0001be4d
    3d54:	20009c38 	.word	0x20009c38
    3d58:	00015465 	.word	0x00015465
    3d5c:	000040bd 	.word	0x000040bd
    3d60:	00004169 	.word	0x00004169
    3d64:	000040f5 	.word	0x000040f5

00003d68 <_ZN12States_Class21StatePrepareStandbyONEm>:

void States_Class::StatePrepareStandbyON(uint32 flags)
	{
    3d68:	b580      	push	{r7, lr}
    3d6a:	b082      	sub	sp, #8
    3d6c:	af00      	add	r7, sp, #0
    3d6e:	6078      	str	r0, [r7, #4]
    3d70:	6039      	str	r1, [r7, #0]
	hvacState->lastState=hvacState->currentState;
    3d72:	687b      	ldr	r3, [r7, #4]
    3d74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3d78:	687a      	ldr	r2, [r7, #4]
    3d7a:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    3d7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    3d80:	621a      	str	r2, [r3, #32]
	hvacState->currentState=kHVACStatePrepareStandbyON;
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3d88:	f44f 729a 	mov.w	r2, #308	; 0x134
    3d8c:	625a      	str	r2, [r3, #36]	; 0x24
	//usb << "handleStatePrepareStandbyON" << NEWLINE;
		
#endif

	//tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
		switch (commando270.statusArinc)
    3d8e:	687b      	ldr	r3, [r7, #4]
    3d90:	681b      	ldr	r3, [r3, #0]
    3d92:	3b10      	subs	r3, #16
    3d94:	681b      	ldr	r3, [r3, #0]
    3d96:	461a      	mov	r2, r3
    3d98:	687b      	ldr	r3, [r7, #4]
    3d9a:	4413      	add	r3, r2
    3d9c:	791b      	ldrb	r3, [r3, #4]
    3d9e:	2b01      	cmp	r3, #1
    3da0:	d00a      	beq.n	3db8 <_ZN12States_Class21StatePrepareStandbyONEm+0x50>
    3da2:	2b02      	cmp	r3, #2
    3da4:	d00f      	beq.n	3dc6 <_ZN12States_Class21StatePrepareStandbyONEm+0x5e>
    3da6:	2b00      	cmp	r3, #0
    3da8:	d114      	bne.n	3dd4 <_ZN12States_Class21StatePrepareStandbyONEm+0x6c>
		{
			case OFF:
				prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3daa:	2200      	movs	r2, #0
    3dac:	f240 1133 	movw	r1, #307	; 0x133
    3db0:	6878      	ldr	r0, [r7, #4]
    3db2:	4b0e      	ldr	r3, [pc, #56]	; (3dec <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3db4:	4798      	blx	r3
			/* Your code here */
			break;
    3db6:	e014      	b.n	3de2 <_ZN12States_Class21StatePrepareStandbyONEm+0x7a>
			case VENT:
				prepareStateChangeEvent(kHVACStateStandbyVENT);
    3db8:	2200      	movs	r2, #0
    3dba:	f44f 7198 	mov.w	r1, #304	; 0x130
    3dbe:	6878      	ldr	r0, [r7, #4]
    3dc0:	4b0a      	ldr	r3, [pc, #40]	; (3dec <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3dc2:	4798      	blx	r3
			/* Your code here */
			break;
    3dc4:	e00d      	b.n	3de2 <_ZN12States_Class21StatePrepareStandbyONEm+0x7a>
			case AUTO :
				prepareStateChangeEvent(kHVACStateStandbyAUTO);
    3dc6:	2200      	movs	r2, #0
    3dc8:	f240 1131 	movw	r1, #305	; 0x131
    3dcc:	6878      	ldr	r0, [r7, #4]
    3dce:	4b07      	ldr	r3, [pc, #28]	; (3dec <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3dd0:	4798      	blx	r3
			/* Your code here */
			break;
    3dd2:	e006      	b.n	3de2 <_ZN12States_Class21StatePrepareStandbyONEm+0x7a>
			default:
				prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    3dd4:	2200      	movs	r2, #0
    3dd6:	f240 1133 	movw	r1, #307	; 0x133
    3dda:	6878      	ldr	r0, [r7, #4]
    3ddc:	4b03      	ldr	r3, [pc, #12]	; (3dec <_ZN12States_Class21StatePrepareStandbyONEm+0x84>)
    3dde:	4798      	blx	r3
			/* Your code here */
			break;
    3de0:	bf00      	nop
		}
	


	}
    3de2:	bf00      	nop
    3de4:	3708      	adds	r7, #8
    3de6:	46bd      	mov	sp, r7
    3de8:	bd80      	pop	{r7, pc}
    3dea:	bf00      	nop
    3dec:	000040f5 	.word	0x000040f5

00003df0 <_ZN12States_Class22StatePrepareStandbyOFFEm>:
	
void States_Class::StatePrepareStandbyOFF(uint32 flags)
{
    3df0:	b580      	push	{r7, lr}
    3df2:	b082      	sub	sp, #8
    3df4:	af00      	add	r7, sp, #0
    3df6:	6078      	str	r0, [r7, #4]
    3df8:	6039      	str	r1, [r7, #0]
	
	hvacState->currentState=kHVACStatePrepareStandbyOFF;
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3e00:	f240 1233 	movw	r2, #307	; 0x133
    3e04:	625a      	str	r2, [r3, #36]	; 0x24
	//usb << "handleStatePrepareStandbyON" << NEWLINE;
	
	#endif

	//tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
	switch (hvacState->lastState)
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3e0c:	6a1b      	ldr	r3, [r3, #32]
    3e0e:	f240 1231 	movw	r2, #305	; 0x131
    3e12:	4293      	cmp	r3, r2
    3e14:	d00a      	beq.n	3e2c <_ZN12States_Class22StatePrepareStandbyOFFEm+0x3c>
    3e16:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    3e1a:	d00b      	beq.n	3e34 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x44>
    3e1c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
    3e20:	d000      	beq.n	3e24 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x34>
		/* Your code here */
		break;
		default:
	
		/* Your code here */
		break;
    3e22:	e008      	b.n	3e36 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x46>
			fv1.SetVentilatePosition();
    3e24:	4809      	ldr	r0, [pc, #36]	; (3e4c <_ZN12States_Class22StatePrepareStandbyOFFEm+0x5c>)
    3e26:	4b0a      	ldr	r3, [pc, #40]	; (3e50 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x60>)
    3e28:	4798      	blx	r3
		break;
    3e2a:	e004      	b.n	3e36 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x46>
			fv1.SetOffsetPosition();
    3e2c:	4807      	ldr	r0, [pc, #28]	; (3e4c <_ZN12States_Class22StatePrepareStandbyOFFEm+0x5c>)
    3e2e:	4b09      	ldr	r3, [pc, #36]	; (3e54 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x64>)
    3e30:	4798      	blx	r3
		break;
    3e32:	e000      	b.n	3e36 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x46>
		break;
    3e34:	bf00      	nop
	}
	prepareStateChangeEvent(kHVACStateStandbyOFF);
    3e36:	2200      	movs	r2, #0
    3e38:	f44f 7199 	mov.w	r1, #306	; 0x132
    3e3c:	6878      	ldr	r0, [r7, #4]
    3e3e:	4b06      	ldr	r3, [pc, #24]	; (3e58 <_ZN12States_Class22StatePrepareStandbyOFFEm+0x68>)
    3e40:	4798      	blx	r3


}
    3e42:	bf00      	nop
    3e44:	3708      	adds	r7, #8
    3e46:	46bd      	mov	sp, r7
    3e48:	bd80      	pop	{r7, pc}
    3e4a:	bf00      	nop
    3e4c:	20009c38 	.word	0x20009c38
    3e50:	00015575 	.word	0x00015575
    3e54:	0001549d 	.word	0x0001549d
    3e58:	000040f5 	.word	0x000040f5

00003e5c <_ZN12States_Class20handleStateStandbyONEm>:

void States_Class::handleStateStandbyON(uint32 flags)
	{
    3e5c:	b580      	push	{r7, lr}
    3e5e:	b088      	sub	sp, #32
    3e60:	af00      	add	r7, sp, #0
    3e62:	6078      	str	r0, [r7, #4]
    3e64:	6039      	str	r1, [r7, #0]
	event	e;
    3e66:	f107 030c 	add.w	r3, r7, #12
    3e6a:	4618      	mov	r0, r3
    3e6c:	4b15      	ldr	r3, [pc, #84]	; (3ec4 <_ZN12States_Class20handleStateStandbyONEm+0x68>)
    3e6e:	4798      	blx	r3
	bool	done(false);
    3e70:	2300      	movs	r3, #0
    3e72:	77fb      	strb	r3, [r7, #31]
	
	usb << "handleStateStandbyON" << newline;
		
#endif

	hvacState->latchClosedConfirmPending = false;
    3e74:	687b      	ldr	r3, [r7, #4]
    3e76:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    3e7a:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
    3e7e:	f36f 1345 	bfc	r3, #5, #1
    3e82:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    hvacState->remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    3e86:	687b      	ldr	r3, [r7, #4]
    3e88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3e8c:	687a      	ldr	r2, [r7, #4]
    3e8e:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    3e92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    3e96:	fb01 f202 	mul.w	r2, r1, r2
    3e9a:	645a      	str	r2, [r3, #68]	; 0x44

	
	hvacState->reedRelayOpen = false;
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    3ea2:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
    3ea6:	f36f 1304 	bfc	r3, #4, #1
    3eaa:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
	
	listener.SendEventSelf(e);
    3eae:	f107 030c 	add.w	r3, r7, #12
    3eb2:	4619      	mov	r1, r3
    3eb4:	4804      	ldr	r0, [pc, #16]	; (3ec8 <_ZN12States_Class20handleStateStandbyONEm+0x6c>)
    3eb6:	4b05      	ldr	r3, [pc, #20]	; (3ecc <_ZN12States_Class20handleStateStandbyONEm+0x70>)
    3eb8:	4798      	blx	r3
	}
    3eba:	bf00      	nop
    3ebc:	3720      	adds	r7, #32
    3ebe:	46bd      	mov	sp, r7
    3ec0:	bd80      	pop	{r7, pc}
    3ec2:	bf00      	nop
    3ec4:	000003c5 	.word	0x000003c5
    3ec8:	20009b20 	.word	0x20009b20
    3ecc:	00014f45 	.word	0x00014f45

00003ed0 <_ZN12States_Class23handleStateStandbyReadyEm>:

void States_Class::handleStateStandbyReady(uint32 flags)
	{
    3ed0:	b580      	push	{r7, lr}
    3ed2:	b088      	sub	sp, #32
    3ed4:	af00      	add	r7, sp, #0
    3ed6:	6078      	str	r0, [r7, #4]
    3ed8:	6039      	str	r1, [r7, #0]
	event	e;
    3eda:	f107 030c 	add.w	r3, r7, #12
    3ede:	4618      	mov	r0, r3
    3ee0:	4b06      	ldr	r3, [pc, #24]	; (3efc <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    3ee2:	4798      	blx	r3
	bool	done(false);
    3ee4:	2300      	movs	r3, #0
    3ee6:	77fb      	strb	r3, [r7, #31]

	
	listener.SendEventSelf(e);
    3ee8:	f107 030c 	add.w	r3, r7, #12
    3eec:	4619      	mov	r1, r3
    3eee:	4804      	ldr	r0, [pc, #16]	; (3f00 <_ZN12States_Class23handleStateStandbyReadyEm+0x30>)
    3ef0:	4b04      	ldr	r3, [pc, #16]	; (3f04 <_ZN12States_Class23handleStateStandbyReadyEm+0x34>)
    3ef2:	4798      	blx	r3
	}
    3ef4:	bf00      	nop
    3ef6:	3720      	adds	r7, #32
    3ef8:	46bd      	mov	sp, r7
    3efa:	bd80      	pop	{r7, pc}
    3efc:	000003c5 	.word	0x000003c5
    3f00:	20009b20 	.word	0x20009b20
    3f04:	00014f45 	.word	0x00014f45

00003f08 <_ZN12States_Class13handleStateONEm>:

	listener.SendEventSelf(e);
	}

void States_Class::handleStateON(uint32 flags)
	{
    3f08:	b580      	push	{r7, lr}
    3f0a:	b088      	sub	sp, #32
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	6078      	str	r0, [r7, #4]
    3f10:	6039      	str	r1, [r7, #0]
	event	e;
    3f12:	f107 030c 	add.w	r3, r7, #12
    3f16:	4618      	mov	r0, r3
    3f18:	4b0b      	ldr	r3, [pc, #44]	; (3f48 <_ZN12States_Class13handleStateONEm+0x40>)
    3f1a:	4798      	blx	r3
	bool	done(false);
    3f1c:	2300      	movs	r3, #0
    3f1e:	77fb      	strb	r3, [r7, #31]
	bool	checkForEmptyCavity(true);
    3f20:	2301      	movs	r3, #1
    3f22:	77bb      	strb	r3, [r7, #30]
	bool	checkForSMPSTemperature(true);
    3f24:	2301      	movs	r3, #1
    3f26:	777b      	strb	r3, [r7, #29]
	bool	resume(flags != 0);		
    3f28:	683b      	ldr	r3, [r7, #0]
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	bf14      	ite	ne
    3f2e:	2301      	movne	r3, #1
    3f30:	2300      	moveq	r3, #0
    3f32:	773b      	strb	r3, [r7, #28]
	usb << "handleStateON: resume == " << (resume?"true":"false") << newline;
		
#endif


	listener.SendEventSelf(e);
    3f34:	f107 030c 	add.w	r3, r7, #12
    3f38:	4619      	mov	r1, r3
    3f3a:	4804      	ldr	r0, [pc, #16]	; (3f4c <_ZN12States_Class13handleStateONEm+0x44>)
    3f3c:	4b04      	ldr	r3, [pc, #16]	; (3f50 <_ZN12States_Class13handleStateONEm+0x48>)
    3f3e:	4798      	blx	r3
	}
    3f40:	bf00      	nop
    3f42:	3720      	adds	r7, #32
    3f44:	46bd      	mov	sp, r7
    3f46:	bd80      	pop	{r7, pc}
    3f48:	000003c5 	.word	0x000003c5
    3f4c:	20009b20 	.word	0x20009b20
    3f50:	00014f45 	.word	0x00014f45

00003f54 <_ZN12States_Class19handleStateFinishedEm>:

void States_Class::handleStateFinished(uint32 flags)
	{
    3f54:	b580      	push	{r7, lr}
    3f56:	b088      	sub	sp, #32
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6078      	str	r0, [r7, #4]
    3f5c:	6039      	str	r1, [r7, #0]
	event	e;
    3f5e:	f107 030c 	add.w	r3, r7, #12
    3f62:	4618      	mov	r0, r3
    3f64:	4b06      	ldr	r3, [pc, #24]	; (3f80 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    3f66:	4798      	blx	r3
	bool	done(false);
    3f68:	2300      	movs	r3, #0
    3f6a:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3f6c:	f107 030c 	add.w	r3, r7, #12
    3f70:	4619      	mov	r1, r3
    3f72:	4804      	ldr	r0, [pc, #16]	; (3f84 <_ZN12States_Class19handleStateFinishedEm+0x30>)
    3f74:	4b04      	ldr	r3, [pc, #16]	; (3f88 <_ZN12States_Class19handleStateFinishedEm+0x34>)
    3f76:	4798      	blx	r3
	}
    3f78:	bf00      	nop
    3f7a:	3720      	adds	r7, #32
    3f7c:	46bd      	mov	sp, r7
    3f7e:	bd80      	pop	{r7, pc}
    3f80:	000003c5 	.word	0x000003c5
    3f84:	20009b20 	.word	0x20009b20
    3f88:	00014f45 	.word	0x00014f45

00003f8c <_ZN12States_Class12StateLeavingEm>:
void States_Class::StateLeaving(uint32 flags)
{
    3f8c:	b580      	push	{r7, lr}
    3f8e:	b086      	sub	sp, #24
    3f90:	af00      	add	r7, sp, #0
    3f92:	6078      	str	r0, [r7, #4]
    3f94:	6039      	str	r1, [r7, #0]
	event	e;
    3f96:	f107 0308 	add.w	r3, r7, #8
    3f9a:	4618      	mov	r0, r3
    3f9c:	4b0b      	ldr	r3, [pc, #44]	; (3fcc <_ZN12States_Class12StateLeavingEm+0x40>)
    3f9e:	4798      	blx	r3
	hvacState->lastState=hvacState->callingState;
    3fa0:	687b      	ldr	r3, [r7, #4]
    3fa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3fa6:	687a      	ldr	r2, [r7, #4]
    3fa8:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
    3fac:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3fae:	621a      	str	r2, [r3, #32]
	hvacState->currentState=kHVACStateLeaving;
    3fb0:	687b      	ldr	r3, [r7, #4]
    3fb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3fb6:	f240 1243 	movw	r2, #323	; 0x143
    3fba:	625a      	str	r2, [r3, #36]	; 0x24
	
	saveCurrentState();
    3fbc:	6878      	ldr	r0, [r7, #4]
    3fbe:	4b04      	ldr	r3, [pc, #16]	; (3fd0 <_ZN12States_Class12StateLeavingEm+0x44>)
    3fc0:	4798      	blx	r3
	//prepareStateChangeEvent(kHVACStateLeaving,(uint16)hvacState->lastState);
	//bool	done(false);
	//listener.SendEventSelf(e);
}
    3fc2:	bf00      	nop
    3fc4:	3718      	adds	r7, #24
    3fc6:	46bd      	mov	sp, r7
    3fc8:	bd80      	pop	{r7, pc}
    3fca:	bf00      	nop
    3fcc:	000003c5 	.word	0x000003c5
    3fd0:	00004169 	.word	0x00004169

00003fd4 <_ZN12States_Class19StateStoppedProcessEm>:

void States_Class::StateStoppedProcess(uint32 flags)
	{
    3fd4:	b580      	push	{r7, lr}
    3fd6:	b088      	sub	sp, #32
    3fd8:	af00      	add	r7, sp, #0
    3fda:	6078      	str	r0, [r7, #4]
    3fdc:	6039      	str	r1, [r7, #0]
	event	e;
    3fde:	f107 030c 	add.w	r3, r7, #12
    3fe2:	4618      	mov	r0, r3
    3fe4:	4b08      	ldr	r3, [pc, #32]	; (4008 <_ZN12States_Class19StateStoppedProcessEm+0x34>)
    3fe6:	4798      	blx	r3
 	bool	done(false);
    3fe8:	2300      	movs	r3, #0
    3fea:	77fb      	strb	r3, [r7, #31]
 	bool	abortCycle(true);
    3fec:	2301      	movs	r3, #1
    3fee:	77bb      	strb	r3, [r7, #30]
    uint16	resumeFlags(flags);
    3ff0:	683b      	ldr	r3, [r7, #0]
    3ff2:	83bb      	strh	r3, [r7, #28]
	listener.SendEventSelf(e);
    3ff4:	f107 030c 	add.w	r3, r7, #12
    3ff8:	4619      	mov	r1, r3
    3ffa:	4804      	ldr	r0, [pc, #16]	; (400c <_ZN12States_Class19StateStoppedProcessEm+0x38>)
    3ffc:	4b04      	ldr	r3, [pc, #16]	; (4010 <_ZN12States_Class19StateStoppedProcessEm+0x3c>)
    3ffe:	4798      	blx	r3
	}
    4000:	bf00      	nop
    4002:	3720      	adds	r7, #32
    4004:	46bd      	mov	sp, r7
    4006:	bd80      	pop	{r7, pc}
    4008:	000003c5 	.word	0x000003c5
    400c:	20009b20 	.word	0x20009b20
    4010:	00014f45 	.word	0x00014f45

00004014 <_ZN12States_Class22handleStateSelfProtectEm>:

void States_Class::handleStateSelfProtect(uint32_t error)
	{
    4014:	b580      	push	{r7, lr}
    4016:	b088      	sub	sp, #32
    4018:	af00      	add	r7, sp, #0
    401a:	6078      	str	r0, [r7, #4]
    401c:	6039      	str	r1, [r7, #0]
	event	e;
    401e:	f107 030c 	add.w	r3, r7, #12
    4022:	4618      	mov	r0, r3
    4024:	4b06      	ldr	r3, [pc, #24]	; (4040 <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    4026:	4798      	blx	r3
	bool	done(false);
    4028:	2300      	movs	r3, #0
    402a:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    402c:	f107 030c 	add.w	r3, r7, #12
    4030:	4619      	mov	r1, r3
    4032:	4804      	ldr	r0, [pc, #16]	; (4044 <_ZN12States_Class22handleStateSelfProtectEm+0x30>)
    4034:	4b04      	ldr	r3, [pc, #16]	; (4048 <_ZN12States_Class22handleStateSelfProtectEm+0x34>)
    4036:	4798      	blx	r3
	}
    4038:	bf00      	nop
    403a:	3720      	adds	r7, #32
    403c:	46bd      	mov	sp, r7
    403e:	bd80      	pop	{r7, pc}
    4040:	000003c5 	.word	0x000003c5
    4044:	20009b20 	.word	0x20009b20
    4048:	00014f45 	.word	0x00014f45

0000404c <_ZN12States_Class16handleStateErrorEm>:

void States_Class::handleStateError(uint32_t error)
	{
    404c:	b580      	push	{r7, lr}
    404e:	b088      	sub	sp, #32
    4050:	af00      	add	r7, sp, #0
    4052:	6078      	str	r0, [r7, #4]
    4054:	6039      	str	r1, [r7, #0]
	event	e;
    4056:	f107 030c 	add.w	r3, r7, #12
    405a:	4618      	mov	r0, r3
    405c:	4b06      	ldr	r3, [pc, #24]	; (4078 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    405e:	4798      	blx	r3
	bool	done(false);
    4060:	2300      	movs	r3, #0
    4062:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    4064:	f107 030c 	add.w	r3, r7, #12
    4068:	4619      	mov	r1, r3
    406a:	4804      	ldr	r0, [pc, #16]	; (407c <_ZN12States_Class16handleStateErrorEm+0x30>)
    406c:	4b04      	ldr	r3, [pc, #16]	; (4080 <_ZN12States_Class16handleStateErrorEm+0x34>)
    406e:	4798      	blx	r3
	}
    4070:	bf00      	nop
    4072:	3720      	adds	r7, #32
    4074:	46bd      	mov	sp, r7
    4076:	bd80      	pop	{r7, pc}
    4078:	000003c5 	.word	0x000003c5
    407c:	20009b20 	.word	0x20009b20
    4080:	00014f45 	.word	0x00014f45

00004084 <_ZN12States_Class22handleStateMaintenanceEm>:

void States_Class::handleStateMaintenance(uint32 flags)
	{
    4084:	b580      	push	{r7, lr}
    4086:	b088      	sub	sp, #32
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
    408c:	6039      	str	r1, [r7, #0]
	event	e;
    408e:	f107 030c 	add.w	r3, r7, #12
    4092:	4618      	mov	r0, r3
    4094:	4b06      	ldr	r3, [pc, #24]	; (40b0 <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    4096:	4798      	blx	r3
	bool	done(false);
    4098:	2300      	movs	r3, #0
    409a:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    409c:	f107 030c 	add.w	r3, r7, #12
    40a0:	4619      	mov	r1, r3
    40a2:	4804      	ldr	r0, [pc, #16]	; (40b4 <_ZN12States_Class22handleStateMaintenanceEm+0x30>)
    40a4:	4b04      	ldr	r3, [pc, #16]	; (40b8 <_ZN12States_Class22handleStateMaintenanceEm+0x34>)
    40a6:	4798      	blx	r3
	}
    40a8:	bf00      	nop
    40aa:	3720      	adds	r7, #32
    40ac:	46bd      	mov	sp, r7
    40ae:	bd80      	pop	{r7, pc}
    40b0:	000003c5 	.word	0x000003c5
    40b4:	20009b20 	.word	0x20009b20
    40b8:	00014f45 	.word	0x00014f45

000040bc <_ZN12States_Class12InStateEventER5eventl>:
	result=listener.WaitForEvent(e,kAnyEventClass,kAnyEventType,t);
	
	return result;
	}
	
bool States_Class::InStateEvent(event& e, tick_t t){
    40bc:	b590      	push	{r4, r7, lr}
    40be:	b089      	sub	sp, #36	; 0x24
    40c0:	af02      	add	r7, sp, #8
    40c2:	60f8      	str	r0, [r7, #12]
    40c4:	60b9      	str	r1, [r7, #8]
    40c6:	607a      	str	r2, [r7, #4]

	bool result=listener.WaitForEvent(e,kAnyEventClass,kAnyEventType,t);
    40c8:	687b      	ldr	r3, [r7, #4]
    40ca:	9300      	str	r3, [sp, #0]
    40cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    40d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    40d4:	68b9      	ldr	r1, [r7, #8]
    40d6:	4805      	ldr	r0, [pc, #20]	; (40ec <_ZN12States_Class12InStateEventER5eventl+0x30>)
    40d8:	4c05      	ldr	r4, [pc, #20]	; (40f0 <_ZN12States_Class12InStateEventER5eventl+0x34>)
    40da:	47a0      	blx	r4
    40dc:	4603      	mov	r3, r0
    40de:	75fb      	strb	r3, [r7, #23]
	return result;
    40e0:	7dfb      	ldrb	r3, [r7, #23]

}
    40e2:	4618      	mov	r0, r3
    40e4:	371c      	adds	r7, #28
    40e6:	46bd      	mov	sp, r7
    40e8:	bd90      	pop	{r4, r7, pc}
    40ea:	bf00      	nop
    40ec:	20009b20 	.word	0x20009b20
    40f0:	00014d81 	.word	0x00014d81

000040f4 <_ZN12States_Class23prepareStateChangeEventEtt>:

void States_Class::prepareStateChangeEvent(uint16 newState, uint16 data)
	{
    40f4:	b580      	push	{r7, lr}
    40f6:	b086      	sub	sp, #24
    40f8:	af00      	add	r7, sp, #0
    40fa:	6078      	str	r0, [r7, #4]
    40fc:	460b      	mov	r3, r1
    40fe:	807b      	strh	r3, [r7, #2]
    4100:	4613      	mov	r3, r2
    4102:	803b      	strh	r3, [r7, #0]
	event e;
    4104:	f107 0308 	add.w	r3, r7, #8
    4108:	4618      	mov	r0, r3
    410a:	4b0b      	ldr	r3, [pc, #44]	; (4138 <_ZN12States_Class23prepareStateChangeEventEtt+0x44>)
    410c:	4798      	blx	r3
	e.eventClass =(EventClass)kHVACEventClass;
    410e:	f44f 7300 	mov.w	r3, #512	; 0x200
    4112:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kHVACSwitchStateEvent;
    4114:	f44f 7300 	mov.w	r3, #512	; 0x200
    4118:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
    411a:	887b      	ldrh	r3, [r7, #2]
    411c:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
    411e:	883b      	ldrh	r3, [r7, #0]
    4120:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
    4122:	f107 0308 	add.w	r3, r7, #8
    4126:	4619      	mov	r1, r3
    4128:	4804      	ldr	r0, [pc, #16]	; (413c <_ZN12States_Class23prepareStateChangeEventEtt+0x48>)
    412a:	4b05      	ldr	r3, [pc, #20]	; (4140 <_ZN12States_Class23prepareStateChangeEventEtt+0x4c>)
    412c:	4798      	blx	r3
	}
    412e:	bf00      	nop
    4130:	3718      	adds	r7, #24
    4132:	46bd      	mov	sp, r7
    4134:	bd80      	pop	{r7, pc}
    4136:	bf00      	nop
    4138:	000003c5 	.word	0x000003c5
    413c:	20009b20 	.word	0x20009b20
    4140:	00014f45 	.word	0x00014f45

00004144 <_ZN12States_Class21handlePowerOnSelftestEv>:

uint32_t States_Class::handlePowerOnSelftest(void)
	{
    4144:	b580      	push	{r7, lr}
    4146:	b088      	sub	sp, #32
    4148:	af00      	add	r7, sp, #0
    414a:	6078      	str	r0, [r7, #4]
	event	e;
    414c:	f107 030c 	add.w	r3, r7, #12
    4150:	4618      	mov	r0, r3
    4152:	4b04      	ldr	r3, [pc, #16]	; (4164 <_ZN12States_Class21handlePowerOnSelftestEv+0x20>)
    4154:	4798      	blx	r3
	uint16	selfTestResult(kHVACNoError);
    4156:	2300      	movs	r3, #0
    4158:	83fb      	strh	r3, [r7, #30]
	bool	moduleAvailable;
	int16	temperature;
		
	return selfTestResult;
    415a:	8bfb      	ldrh	r3, [r7, #30]
	}
    415c:	4618      	mov	r0, r3
    415e:	3720      	adds	r7, #32
    4160:	46bd      	mov	sp, r7
    4162:	bd80      	pop	{r7, pc}
    4164:	000003c5 	.word	0x000003c5

00004168 <_ZN12States_Class16saveCurrentStateEv>:


void States_Class::saveCurrentState(void){
    4168:	b590      	push	{r4, r7, lr}
    416a:	b085      	sub	sp, #20
    416c:	af00      	add	r7, sp, #0
    416e:	6078      	str	r0, [r7, #4]
		calendar_date_time	cdt;
		calendar.GetDateTime(&cdt);
    4170:	f107 0308 	add.w	r3, r7, #8
    4174:	4619      	mov	r1, r3
    4176:	4818      	ldr	r0, [pc, #96]	; (41d8 <_ZN12States_Class16saveCurrentStateEv+0x70>)
    4178:	4b18      	ldr	r3, [pc, #96]	; (41dc <_ZN12States_Class16saveCurrentStateEv+0x74>)
    417a:	4798      	blx	r3
		hvacState->dateTime=cdt;
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    4182:	3308      	adds	r3, #8
    4184:	f107 0208 	add.w	r2, r7, #8
    4188:	e892 0003 	ldmia.w	r2, {r0, r1}
    418c:	e883 0003 	stmia.w	r3, {r0, r1}
		hvacState->now = calendar.convert_datetime_to_timestamp(&cdt);
    4190:	687b      	ldr	r3, [r7, #4]
    4192:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    4196:	f107 0308 	add.w	r3, r7, #8
    419a:	4619      	mov	r1, r3
    419c:	480e      	ldr	r0, [pc, #56]	; (41d8 <_ZN12States_Class16saveCurrentStateEv+0x70>)
    419e:	4b10      	ldr	r3, [pc, #64]	; (41e0 <_ZN12States_Class16saveCurrentStateEv+0x78>)
    41a0:	4798      	blx	r3
    41a2:	4603      	mov	r3, r0
    41a4:	6063      	str	r3, [r4, #4]
	if (hvacState->currentState!=kHVACStateMaintenance){
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    41ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    41ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    41b2:	d00d      	beq.n	41d0 <_ZN12States_Class16saveCurrentStateEv+0x68>
		memory.WriteFastCurrentState(staticCurrentState);
    41b4:	490b      	ldr	r1, [pc, #44]	; (41e4 <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    41b6:	480c      	ldr	r0, [pc, #48]	; (41e8 <_ZN12States_Class16saveCurrentStateEv+0x80>)
    41b8:	4b0c      	ldr	r3, [pc, #48]	; (41ec <_ZN12States_Class16saveCurrentStateEv+0x84>)
    41ba:	4798      	blx	r3
		//memory.ReadFastApplicationState(lastState);
		if (hvacState->currentState==0)
    41bc:	687b      	ldr	r3, [r7, #4]
    41be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    41c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    41c4:	2b00      	cmp	r3, #0
    41c6:	d103      	bne.n	41d0 <_ZN12States_Class16saveCurrentStateEv+0x68>
		{
			memory.SaveApplicationState(staticCurrentState);
    41c8:	4906      	ldr	r1, [pc, #24]	; (41e4 <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    41ca:	4809      	ldr	r0, [pc, #36]	; (41f0 <_ZN12States_Class16saveCurrentStateEv+0x88>)
    41cc:	4b09      	ldr	r3, [pc, #36]	; (41f4 <_ZN12States_Class16saveCurrentStateEv+0x8c>)
    41ce:	4798      	blx	r3
// 		 if (state.currentState > kGAINStateResume){
// 			 
// 			memory.clearWorkingStateForGAIN();
// 		 }
	}
}
    41d0:	bf00      	nop
    41d2:	3714      	adds	r7, #20
    41d4:	46bd      	mov	sp, r7
    41d6:	bd90      	pop	{r4, r7, pc}
    41d8:	2000a250 	.word	0x2000a250
    41dc:	0001749d 	.word	0x0001749d
    41e0:	0001758d 	.word	0x0001758d
    41e4:	2000815c 	.word	0x2000815c
    41e8:	20002d64 	.word	0x20002d64
    41ec:	00001af1 	.word	0x00001af1
    41f0:	200026f4 	.word	0x200026f4
    41f4:	00002829 	.word	0x00002829

000041f8 <_ZN12States_Class4StopEh>:


uint8_t	States_Class::Stop(uint8_t	layer){
    41f8:	b580      	push	{r7, lr}
    41fa:	b082      	sub	sp, #8
    41fc:	af00      	add	r7, sp, #0
    41fe:	6078      	str	r0, [r7, #4]
    4200:	460b      	mov	r3, r1
    4202:	70fb      	strb	r3, [r7, #3]
		if (layer==0)
    4204:	78fb      	ldrb	r3, [r7, #3]
    4206:	2b00      	cmp	r3, #0
    4208:	d10d      	bne.n	4226 <_ZN12States_Class4StopEh+0x2e>
		{
			usb<<"Air Conditioning System Stopped"<<NEWLINE;
    420a:	4909      	ldr	r1, [pc, #36]	; (4230 <_ZN12States_Class4StopEh+0x38>)
    420c:	4809      	ldr	r0, [pc, #36]	; (4234 <_ZN12States_Class4StopEh+0x3c>)
    420e:	4b0a      	ldr	r3, [pc, #40]	; (4238 <_ZN12States_Class4StopEh+0x40>)
    4210:	4798      	blx	r3
    4212:	4603      	mov	r3, r0
    4214:	4909      	ldr	r1, [pc, #36]	; (423c <_ZN12States_Class4StopEh+0x44>)
    4216:	4618      	mov	r0, r3
    4218:	4b09      	ldr	r3, [pc, #36]	; (4240 <_ZN12States_Class4StopEh+0x48>)
    421a:	4798      	blx	r3
			delay_ms(100);
    421c:	2064      	movs	r0, #100	; 0x64
    421e:	4b09      	ldr	r3, [pc, #36]	; (4244 <_ZN12States_Class4StopEh+0x4c>)
    4220:	4798      	blx	r3
			return layer;
    4222:	78fb      	ldrb	r3, [r7, #3]
    4224:	e000      	b.n	4228 <_ZN12States_Class4StopEh+0x30>
		}
	return	layer;
    4226:	78fb      	ldrb	r3, [r7, #3]
}
    4228:	4618      	mov	r0, r3
    422a:	3708      	adds	r7, #8
    422c:	46bd      	mov	sp, r7
    422e:	bd80      	pop	{r7, pc}
    4230:	00020930 	.word	0x00020930
    4234:	2000a4d0 	.word	0x2000a4d0
    4238:	0000454d 	.word	0x0000454d
    423c:	00020884 	.word	0x00020884
    4240:	00000c99 	.word	0x00000c99
    4244:	000067d5 	.word	0x000067d5

00004248 <_ZN12States_Class15GetCurrentStateER9HVACState>:

void	States_Class::GetCurrentConfiguration(ConfigurationData *cd){
	cd=&configuration;
}
void	States_Class::GetCurrentState(HVACState& hs){
    4248:	b580      	push	{r7, lr}
    424a:	b082      	sub	sp, #8
    424c:	af00      	add	r7, sp, #0
    424e:	6078      	str	r0, [r7, #4]
    4250:	6039      	str	r1, [r7, #0]
	hs=*hvacState;
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    4258:	683a      	ldr	r2, [r7, #0]
    425a:	4610      	mov	r0, r2
    425c:	4619      	mov	r1, r3
    425e:	2368      	movs	r3, #104	; 0x68
    4260:	461a      	mov	r2, r3
    4262:	4b03      	ldr	r3, [pc, #12]	; (4270 <_ZN12States_Class15GetCurrentStateER9HVACState+0x28>)
    4264:	4798      	blx	r3
}
    4266:	bf00      	nop
    4268:	3708      	adds	r7, #8
    426a:	46bd      	mov	sp, r7
    426c:	bd80      	pop	{r7, pc}
    426e:	bf00      	nop
    4270:	0001c485 	.word	0x0001c485

00004274 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData>:
void	States_Class::SetConfigurationData(ConfigurationData& cd){
    4274:	b580      	push	{r7, lr}
    4276:	b082      	sub	sp, #8
    4278:	af00      	add	r7, sp, #0
    427a:	6078      	str	r0, [r7, #4]
    427c:	6039      	str	r1, [r7, #0]
	configuration=cd;
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	683a      	ldr	r2, [r7, #0]
    4282:	f503 73b0 	add.w	r3, r3, #352	; 0x160
    4286:	4611      	mov	r1, r2
    4288:	22ac      	movs	r2, #172	; 0xac
    428a:	4618      	mov	r0, r3
    428c:	4b02      	ldr	r3, [pc, #8]	; (4298 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData+0x24>)
    428e:	4798      	blx	r3
}
    4290:	bf00      	nop
    4292:	3708      	adds	r7, #8
    4294:	46bd      	mov	sp, r7
    4296:	bd80      	pop	{r7, pc}
    4298:	0001c485 	.word	0x0001c485

0000429c <_ZN12States_Class15SetCurrentStateER9HVACState>:
void	States_Class::SetCurrentState(HVACState& hs){
    429c:	b580      	push	{r7, lr}
    429e:	b082      	sub	sp, #8
    42a0:	af00      	add	r7, sp, #0
    42a2:	6078      	str	r0, [r7, #4]
    42a4:	6039      	str	r1, [r7, #0]
	staticCurrentState=hs;
    42a6:	4a06      	ldr	r2, [pc, #24]	; (42c0 <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
    42a8:	683b      	ldr	r3, [r7, #0]
    42aa:	4610      	mov	r0, r2
    42ac:	4619      	mov	r1, r3
    42ae:	2368      	movs	r3, #104	; 0x68
    42b0:	461a      	mov	r2, r3
    42b2:	4b04      	ldr	r3, [pc, #16]	; (42c4 <_ZN12States_Class15SetCurrentStateER9HVACState+0x28>)
    42b4:	4798      	blx	r3
}
    42b6:	bf00      	nop
    42b8:	3708      	adds	r7, #8
    42ba:	46bd      	mov	sp, r7
    42bc:	bd80      	pop	{r7, pc}
    42be:	bf00      	nop
    42c0:	2000815c 	.word	0x2000815c
    42c4:	0001c485 	.word	0x0001c485

000042c8 <_ZTv0_n12_N12States_Class15SetCurrentStateER9HVACState>:
    42c8:	b580      	push	{r7, lr}
    42ca:	b082      	sub	sp, #8
    42cc:	af00      	add	r7, sp, #0
    42ce:	6078      	str	r0, [r7, #4]
    42d0:	6039      	str	r1, [r7, #0]
    42d2:	687b      	ldr	r3, [r7, #4]
    42d4:	681b      	ldr	r3, [r3, #0]
    42d6:	3b0c      	subs	r3, #12
    42d8:	681b      	ldr	r3, [r3, #0]
    42da:	461a      	mov	r2, r3
    42dc:	687b      	ldr	r3, [r7, #4]
    42de:	4413      	add	r3, r2
    42e0:	6839      	ldr	r1, [r7, #0]
    42e2:	4618      	mov	r0, r3
    42e4:	4b02      	ldr	r3, [pc, #8]	; (42f0 <_ZTv0_n12_N12States_Class15SetCurrentStateER9HVACState+0x28>)
    42e6:	4798      	blx	r3
    42e8:	3708      	adds	r7, #8
    42ea:	46bd      	mov	sp, r7
    42ec:	bd80      	pop	{r7, pc}
    42ee:	bf00      	nop
    42f0:	0000429d 	.word	0x0000429d

000042f4 <_ZN12States_Class16SetCRCConfigDataEv>:
void	States_Class::SetCRCConfigData(void){
    42f4:	b580      	push	{r7, lr}
    42f6:	b082      	sub	sp, #8
    42f8:	af00      	add	r7, sp, #0
    42fa:	6078      	str	r0, [r7, #4]
	CRC32=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&factoryDefaultsConfiguration),sizeof(factoryDefaultsConfiguration));
    42fc:	22ac      	movs	r2, #172	; 0xac
    42fe:	4906      	ldr	r1, [pc, #24]	; (4318 <_ZN12States_Class16SetCRCConfigDataEv+0x24>)
    4300:	4806      	ldr	r0, [pc, #24]	; (431c <_ZN12States_Class16SetCRCConfigDataEv+0x28>)
    4302:	4b07      	ldr	r3, [pc, #28]	; (4320 <_ZN12States_Class16SetCRCConfigDataEv+0x2c>)
    4304:	4798      	blx	r3
    4306:	4602      	mov	r2, r0
    4308:	687b      	ldr	r3, [r7, #4]
    430a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
    430e:	bf00      	nop
    4310:	3708      	adds	r7, #8
    4312:	46bd      	mov	sp, r7
    4314:	bd80      	pop	{r7, pc}
    4316:	bf00      	nop
    4318:	00020290 	.word	0x00020290
    431c:	20002be0 	.word	0x20002be0
    4320:	00001551 	.word	0x00001551

00004324 <_ZN12States_Class19ExecutePeriodicTaskEv>:
uint32_t	States_Class::GetStatus(HVACStatus& s){
	s=hvacState->hvacStatus;
	return	hvacState->hvacStatus.rawStatus;
}
void States_Class::ExecutePeriodicTask(void){
    4324:	b590      	push	{r4, r7, lr}
    4326:	b085      	sub	sp, #20
    4328:	af00      	add	r7, sp, #0
    432a:	6078      	str	r0, [r7, #4]
	if (IsCommando270Changed())
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	681b      	ldr	r3, [r3, #0]
    4330:	3b10      	subs	r3, #16
    4332:	681b      	ldr	r3, [r3, #0]
    4334:	461a      	mov	r2, r3
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	4413      	add	r3, r2
    433a:	4618      	mov	r0, r3
    433c:	4b36      	ldr	r3, [pc, #216]	; (4418 <_ZN12States_Class19ExecutePeriodicTaskEv+0xf4>)
    433e:	4798      	blx	r3
    4340:	4603      	mov	r3, r0
    4342:	2b00      	cmp	r3, #0
    4344:	d035      	beq.n	43b2 <_ZN12States_Class19ExecutePeriodicTaskEv+0x8e>
	{
		if (commando270.AC_CMD)
    4346:	687b      	ldr	r3, [r7, #4]
    4348:	681b      	ldr	r3, [r3, #0]
    434a:	3b10      	subs	r3, #16
    434c:	681b      	ldr	r3, [r3, #0]
    434e:	461a      	mov	r2, r3
    4350:	687b      	ldr	r3, [r7, #4]
    4352:	4413      	add	r3, r2
    4354:	795b      	ldrb	r3, [r3, #5]
    4356:	f3c3 0300 	ubfx	r3, r3, #0, #1
    435a:	b2db      	uxtb	r3, r3
    435c:	2b00      	cmp	r3, #0
    435e:	d014      	beq.n	438a <_ZN12States_Class19ExecutePeriodicTaskEv+0x66>
		{
			
			prepareStateChangeEvent(kHVACStatePrepareStandbyON);
    4360:	2200      	movs	r2, #0
    4362:	f44f 719a 	mov.w	r1, #308	; 0x134
    4366:	6878      	ldr	r0, [r7, #4]
    4368:	4b2c      	ldr	r3, [pc, #176]	; (441c <_ZN12States_Class19ExecutePeriodicTaskEv+0xf8>)
    436a:	4798      	blx	r3
			listener.SendEventSelf(kInterfaceEventClass,k_AC_CMD_ENABLE_Event);
    436c:	f107 0308 	add.w	r3, r7, #8
    4370:	2100      	movs	r1, #0
    4372:	4618      	mov	r0, r3
    4374:	4b2a      	ldr	r3, [pc, #168]	; (4420 <_ZN12States_Class19ExecutePeriodicTaskEv+0xfc>)
    4376:	4798      	blx	r3
    4378:	f107 0308 	add.w	r3, r7, #8
    437c:	2204      	movs	r2, #4
    437e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4382:	4828      	ldr	r0, [pc, #160]	; (4424 <_ZN12States_Class19ExecutePeriodicTaskEv+0x100>)
    4384:	4c28      	ldr	r4, [pc, #160]	; (4428 <_ZN12States_Class19ExecutePeriodicTaskEv+0x104>)
    4386:	47a0      	blx	r4
    4388:	e013      	b.n	43b2 <_ZN12States_Class19ExecutePeriodicTaskEv+0x8e>
		} 
		else
		{
			prepareStateChangeEvent(kHVACStatePrepareStandbyOFF);
    438a:	2200      	movs	r2, #0
    438c:	f240 1133 	movw	r1, #307	; 0x133
    4390:	6878      	ldr	r0, [r7, #4]
    4392:	4b22      	ldr	r3, [pc, #136]	; (441c <_ZN12States_Class19ExecutePeriodicTaskEv+0xf8>)
    4394:	4798      	blx	r3
			listener.SendEventSelf(kInterfaceEventClass,k_AC_CMD_DISABLE_Event);
    4396:	f107 030c 	add.w	r3, r7, #12
    439a:	2100      	movs	r1, #0
    439c:	4618      	mov	r0, r3
    439e:	4b20      	ldr	r3, [pc, #128]	; (4420 <_ZN12States_Class19ExecutePeriodicTaskEv+0xfc>)
    43a0:	4798      	blx	r3
    43a2:	f107 030c 	add.w	r3, r7, #12
    43a6:	2205      	movs	r2, #5
    43a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    43ac:	481d      	ldr	r0, [pc, #116]	; (4424 <_ZN12States_Class19ExecutePeriodicTaskEv+0x100>)
    43ae:	4c1e      	ldr	r4, [pc, #120]	; (4428 <_ZN12States_Class19ExecutePeriodicTaskEv+0x104>)
    43b0:	47a0      	blx	r4
		}
		

	}
	if (fv1.IsPositionChanged())
    43b2:	481e      	ldr	r0, [pc, #120]	; (442c <_ZN12States_Class19ExecutePeriodicTaskEv+0x108>)
    43b4:	4b1e      	ldr	r3, [pc, #120]	; (4430 <_ZN12States_Class19ExecutePeriodicTaskEv+0x10c>)
    43b6:	4798      	blx	r3
    43b8:	4603      	mov	r3, r0
    43ba:	2b00      	cmp	r3, #0
    43bc:	d00b      	beq.n	43d6 <_ZN12States_Class19ExecutePeriodicTaskEv+0xb2>
	{
		alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    43be:	2200      	movs	r2, #0
    43c0:	210b      	movs	r1, #11
    43c2:	481c      	ldr	r0, [pc, #112]	; (4434 <_ZN12States_Class19ExecutePeriodicTaskEv+0x110>)
    43c4:	4b1c      	ldr	r3, [pc, #112]	; (4438 <_ZN12States_Class19ExecutePeriodicTaskEv+0x114>)
    43c6:	4798      	blx	r3
		hvacState->arincStatus.statusFV=fv1.statusFlapperValve;
    43c8:	687b      	ldr	r3, [r7, #4]
    43ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    43ce:	4a17      	ldr	r2, [pc, #92]	; (442c <_ZN12States_Class19ExecutePeriodicTaskEv+0x108>)
    43d0:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    43d4:	779a      	strb	r2, [r3, #30]
		
	}
	if (IsStatusArinclabelChanged())
    43d6:	687b      	ldr	r3, [r7, #4]
    43d8:	681b      	ldr	r3, [r3, #0]
    43da:	3b0c      	subs	r3, #12
    43dc:	681b      	ldr	r3, [r3, #0]
    43de:	461a      	mov	r2, r3
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	4413      	add	r3, r2
    43e4:	4618      	mov	r0, r3
    43e6:	4b15      	ldr	r3, [pc, #84]	; (443c <_ZN12States_Class19ExecutePeriodicTaskEv+0x118>)
    43e8:	4798      	blx	r3
    43ea:	4603      	mov	r3, r0
    43ec:	2b00      	cmp	r3, #0
    43ee:	d00e      	beq.n	440e <_ZN12States_Class19ExecutePeriodicTaskEv+0xea>
 	{
		arinc.SaveStatus(GetAcknowledgeStatus());
    43f0:	687b      	ldr	r3, [r7, #4]
    43f2:	681b      	ldr	r3, [r3, #0]
    43f4:	3b0c      	subs	r3, #12
    43f6:	681b      	ldr	r3, [r3, #0]
    43f8:	461a      	mov	r2, r3
    43fa:	687b      	ldr	r3, [r7, #4]
    43fc:	4413      	add	r3, r2
    43fe:	4618      	mov	r0, r3
    4400:	4b0f      	ldr	r3, [pc, #60]	; (4440 <_ZN12States_Class19ExecutePeriodicTaskEv+0x11c>)
    4402:	4798      	blx	r3
    4404:	4603      	mov	r3, r0
    4406:	4619      	mov	r1, r3
    4408:	480e      	ldr	r0, [pc, #56]	; (4444 <_ZN12States_Class19ExecutePeriodicTaskEv+0x120>)
    440a:	4b0f      	ldr	r3, [pc, #60]	; (4448 <_ZN12States_Class19ExecutePeriodicTaskEv+0x124>)
    440c:	4798      	blx	r3
	}
		
}
    440e:	bf00      	nop
    4410:	3714      	adds	r7, #20
    4412:	46bd      	mov	sp, r7
    4414:	bd90      	pop	{r4, r7, pc}
    4416:	bf00      	nop
    4418:	00001c7d 	.word	0x00001c7d
    441c:	000040f5 	.word	0x000040f5
    4420:	00002f81 	.word	0x00002f81
    4424:	20009b20 	.word	0x20009b20
    4428:	00015001 	.word	0x00015001
    442c:	20009c38 	.word	0x20009c38
    4430:	000156d9 	.word	0x000156d9
    4434:	20000c80 	.word	0x20000c80
    4438:	00000a0d 	.word	0x00000a0d
    443c:	000012c9 	.word	0x000012c9
    4440:	000012b1 	.word	0x000012b1
    4444:	20008ff0 	.word	0x20008ff0
    4448:	00012eb9 	.word	0x00012eb9

0000444c <_ZN12States_Class11CheckEventsEv>:

void States_Class::CheckEvents(void){
    444c:	b590      	push	{r4, r7, lr}
    444e:	b087      	sub	sp, #28
    4450:	af00      	add	r7, sp, #0
	event e;
    4452:	463b      	mov	r3, r7
    4454:	4618      	mov	r0, r3
    4456:	4b28      	ldr	r3, [pc, #160]	; (44f8 <_ZN12States_Class11CheckEventsEv+0xac>)
    4458:	4798      	blx	r3
	hvac.ExecutePeriodicTask();
    445a:	4828      	ldr	r0, [pc, #160]	; (44fc <_ZN12States_Class11CheckEventsEv+0xb0>)
    445c:	4b28      	ldr	r3, [pc, #160]	; (4500 <_ZN12States_Class11CheckEventsEv+0xb4>)
    445e:	4798      	blx	r3
	if (interfaces.IsCommunicationRequest())
    4460:	4828      	ldr	r0, [pc, #160]	; (4504 <_ZN12States_Class11CheckEventsEv+0xb8>)
    4462:	4b29      	ldr	r3, [pc, #164]	; (4508 <_ZN12States_Class11CheckEventsEv+0xbc>)
    4464:	4798      	blx	r3
	{
		//e.eventClass=kALUEventClass;
	//	e.eventType=(EventType)kALUEventCheckCommunication;
		
	}
	if ((hvac.hvacState->currentState==kHVACStateStandbyOFF)&&(alu.taskList->head)){
    4466:	4b25      	ldr	r3, [pc, #148]	; (44fc <_ZN12States_Class11CheckEventsEv+0xb0>)
    4468:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    446e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    4472:	d11a      	bne.n	44aa <_ZN12States_Class11CheckEventsEv+0x5e>
    4474:	4b25      	ldr	r3, [pc, #148]	; (450c <_ZN12States_Class11CheckEventsEv+0xc0>)
    4476:	681b      	ldr	r3, [r3, #0]
    4478:	681b      	ldr	r3, [r3, #0]
    447a:	2b00      	cmp	r3, #0
    447c:	d015      	beq.n	44aa <_ZN12States_Class11CheckEventsEv+0x5e>
		fv1.ReadActualPosition();
    447e:	4824      	ldr	r0, [pc, #144]	; (4510 <_ZN12States_Class11CheckEventsEv+0xc4>)
    4480:	4b24      	ldr	r3, [pc, #144]	; (4514 <_ZN12States_Class11CheckEventsEv+0xc8>)
    4482:	4798      	blx	r3
		alu.PrepareNewTask(kALUTaskUpdateFlapperValves);
    4484:	2200      	movs	r2, #0
    4486:	210b      	movs	r1, #11
    4488:	4820      	ldr	r0, [pc, #128]	; (450c <_ZN12States_Class11CheckEventsEv+0xc0>)
    448a:	4b23      	ldr	r3, [pc, #140]	; (4518 <_ZN12States_Class11CheckEventsEv+0xcc>)
    448c:	4798      	blx	r3
		listener.SendEventSelf(kHVACEventClass,kHVACEventDoPendingTasks);
    448e:	f107 0310 	add.w	r3, r7, #16
    4492:	2100      	movs	r1, #0
    4494:	4618      	mov	r0, r3
    4496:	4b21      	ldr	r3, [pc, #132]	; (451c <_ZN12States_Class11CheckEventsEv+0xd0>)
    4498:	4798      	blx	r3
    449a:	f107 0310 	add.w	r3, r7, #16
    449e:	2203      	movs	r2, #3
    44a0:	f44f 7100 	mov.w	r1, #512	; 0x200
    44a4:	481e      	ldr	r0, [pc, #120]	; (4520 <_ZN12States_Class11CheckEventsEv+0xd4>)
    44a6:	4c1f      	ldr	r4, [pc, #124]	; (4524 <_ZN12States_Class11CheckEventsEv+0xd8>)
    44a8:	47a0      	blx	r4

	}
	if (alu.arincTXTimeUP){
    44aa:	4b18      	ldr	r3, [pc, #96]	; (450c <_ZN12States_Class11CheckEventsEv+0xc0>)
    44ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    44b0:	b2db      	uxtb	r3, r3
    44b2:	2b00      	cmp	r3, #0
    44b4:	d01c      	beq.n	44f0 <_ZN12States_Class11CheckEventsEv+0xa4>
		if ((!alu.IsListedTask(kALUTaskArincTXMessage)))
    44b6:	2102      	movs	r1, #2
    44b8:	4814      	ldr	r0, [pc, #80]	; (450c <_ZN12States_Class11CheckEventsEv+0xc0>)
    44ba:	4b1b      	ldr	r3, [pc, #108]	; (4528 <_ZN12States_Class11CheckEventsEv+0xdc>)
    44bc:	4798      	blx	r3
    44be:	4603      	mov	r3, r0
    44c0:	f083 0301 	eor.w	r3, r3, #1
    44c4:	b2db      	uxtb	r3, r3
    44c6:	2b00      	cmp	r3, #0
    44c8:	d004      	beq.n	44d4 <_ZN12States_Class11CheckEventsEv+0x88>
		{
			alu.PrepareNewTask(kALUTaskArincTXMessage);
    44ca:	2200      	movs	r2, #0
    44cc:	2102      	movs	r1, #2
    44ce:	480f      	ldr	r0, [pc, #60]	; (450c <_ZN12States_Class11CheckEventsEv+0xc0>)
    44d0:	4b11      	ldr	r3, [pc, #68]	; (4518 <_ZN12States_Class11CheckEventsEv+0xcc>)
    44d2:	4798      	blx	r3
		} 
		else
		{
			
		}
		listener.SendEventSelf(kALUEventClass,kHVACEventDoPendingTasks);
    44d4:	f107 0314 	add.w	r3, r7, #20
    44d8:	2100      	movs	r1, #0
    44da:	4618      	mov	r0, r3
    44dc:	4b0f      	ldr	r3, [pc, #60]	; (451c <_ZN12States_Class11CheckEventsEv+0xd0>)
    44de:	4798      	blx	r3
    44e0:	f107 0314 	add.w	r3, r7, #20
    44e4:	2203      	movs	r2, #3
    44e6:	f44f 7140 	mov.w	r1, #768	; 0x300
    44ea:	480d      	ldr	r0, [pc, #52]	; (4520 <_ZN12States_Class11CheckEventsEv+0xd4>)
    44ec:	4c0d      	ldr	r4, [pc, #52]	; (4524 <_ZN12States_Class11CheckEventsEv+0xd8>)
    44ee:	47a0      	blx	r4
	}
		

}
    44f0:	bf00      	nop
    44f2:	371c      	adds	r7, #28
    44f4:	46bd      	mov	sp, r7
    44f6:	bd90      	pop	{r4, r7, pc}
    44f8:	000003c5 	.word	0x000003c5
    44fc:	200081c4 	.word	0x200081c4
    4500:	00004325 	.word	0x00004325
    4504:	2000165c 	.word	0x2000165c
    4508:	00001e91 	.word	0x00001e91
    450c:	20000c80 	.word	0x20000c80
    4510:	20009c38 	.word	0x20009c38
    4514:	00015669 	.word	0x00015669
    4518:	00000a0d 	.word	0x00000a0d
    451c:	00002f81 	.word	0x00002f81
    4520:	20009b20 	.word	0x20009b20
    4524:	00015001 	.word	0x00015001
    4528:	000049c9 	.word	0x000049c9

0000452c <_ZlsIA34_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    452c:	b580      	push	{r7, lr}
    452e:	b082      	sub	sp, #8
    4530:	af00      	add	r7, sp, #0
    4532:	6078      	str	r0, [r7, #4]
    4534:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    4536:	6839      	ldr	r1, [r7, #0]
    4538:	6878      	ldr	r0, [r7, #4]
    453a:	4b03      	ldr	r3, [pc, #12]	; (4548 <_ZlsIA34_cER5PrintS2_RKT_+0x1c>)
    453c:	4798      	blx	r3
    453e:	687b      	ldr	r3, [r7, #4]
    4540:	4618      	mov	r0, r3
    4542:	3708      	adds	r7, #8
    4544:	46bd      	mov	sp, r7
    4546:	bd80      	pop	{r7, pc}
    4548:	000185e5 	.word	0x000185e5

0000454c <_ZlsIA32_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    454c:	b580      	push	{r7, lr}
    454e:	b082      	sub	sp, #8
    4550:	af00      	add	r7, sp, #0
    4552:	6078      	str	r0, [r7, #4]
    4554:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    4556:	6839      	ldr	r1, [r7, #0]
    4558:	6878      	ldr	r0, [r7, #4]
    455a:	4b03      	ldr	r3, [pc, #12]	; (4568 <_ZlsIA32_cER5PrintS2_RKT_+0x1c>)
    455c:	4798      	blx	r3
    455e:	687b      	ldr	r3, [r7, #4]
    4560:	4618      	mov	r0, r3
    4562:	3708      	adds	r7, #8
    4564:	46bd      	mov	sp, r7
    4566:	bd80      	pop	{r7, pc}
    4568:	000185e5 	.word	0x000185e5

0000456c <_ZlsIA42_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    456c:	b580      	push	{r7, lr}
    456e:	b082      	sub	sp, #8
    4570:	af00      	add	r7, sp, #0
    4572:	6078      	str	r0, [r7, #4]
    4574:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    4576:	6839      	ldr	r1, [r7, #0]
    4578:	6878      	ldr	r0, [r7, #4]
    457a:	4b03      	ldr	r3, [pc, #12]	; (4588 <_ZlsIA42_cER5PrintS2_RKT_+0x1c>)
    457c:	4798      	blx	r3
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	4618      	mov	r0, r3
    4582:	3708      	adds	r7, #8
    4584:	46bd      	mov	sp, r7
    4586:	bd80      	pop	{r7, pc}
    4588:	000185e5 	.word	0x000185e5

0000458c <_ZlsIA5_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    458c:	b580      	push	{r7, lr}
    458e:	b082      	sub	sp, #8
    4590:	af00      	add	r7, sp, #0
    4592:	6078      	str	r0, [r7, #4]
    4594:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    4596:	6839      	ldr	r1, [r7, #0]
    4598:	6878      	ldr	r0, [r7, #4]
    459a:	4b03      	ldr	r3, [pc, #12]	; (45a8 <_ZlsIA5_cER5PrintS2_RKT_+0x1c>)
    459c:	4798      	blx	r3
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	4618      	mov	r0, r3
    45a2:	3708      	adds	r7, #8
    45a4:	46bd      	mov	sp, r7
    45a6:	bd80      	pop	{r7, pc}
    45a8:	000185e5 	.word	0x000185e5

000045ac <_ZlsIA35_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    45ac:	b580      	push	{r7, lr}
    45ae:	b082      	sub	sp, #8
    45b0:	af00      	add	r7, sp, #0
    45b2:	6078      	str	r0, [r7, #4]
    45b4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    45b6:	6839      	ldr	r1, [r7, #0]
    45b8:	6878      	ldr	r0, [r7, #4]
    45ba:	4b03      	ldr	r3, [pc, #12]	; (45c8 <_ZlsIA35_cER5PrintS2_RKT_+0x1c>)
    45bc:	4798      	blx	r3
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	4618      	mov	r0, r3
    45c2:	3708      	adds	r7, #8
    45c4:	46bd      	mov	sp, r7
    45c6:	bd80      	pop	{r7, pc}
    45c8:	000185e5 	.word	0x000185e5

000045cc <_Z41__static_initialization_and_destruction_0ii>:


    45cc:	b580      	push	{r7, lr}
    45ce:	b082      	sub	sp, #8
    45d0:	af00      	add	r7, sp, #0
    45d2:	6078      	str	r0, [r7, #4]
    45d4:	6039      	str	r1, [r7, #0]
    45d6:	687b      	ldr	r3, [r7, #4]
    45d8:	2b01      	cmp	r3, #1
    45da:	d11c      	bne.n	4616 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    45dc:	683b      	ldr	r3, [r7, #0]
    45de:	f64f 72ff 	movw	r2, #65535	; 0xffff
    45e2:	4293      	cmp	r3, r2
    45e4:	d117      	bne.n	4616 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    45e6:	480e      	ldr	r0, [pc, #56]	; (4620 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    45e8:	4b0e      	ldr	r3, [pc, #56]	; (4624 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    45ea:	4798      	blx	r3
    45ec:	4a0e      	ldr	r2, [pc, #56]	; (4628 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    45ee:	490f      	ldr	r1, [pc, #60]	; (462c <_Z41__static_initialization_and_destruction_0ii+0x60>)
    45f0:	480b      	ldr	r0, [pc, #44]	; (4620 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    45f2:	4b0f      	ldr	r3, [pc, #60]	; (4630 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    45f4:	4798      	blx	r3
    45f6:	480f      	ldr	r0, [pc, #60]	; (4634 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    45f8:	4b0f      	ldr	r3, [pc, #60]	; (4638 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    45fa:	4798      	blx	r3
    45fc:	4a0a      	ldr	r2, [pc, #40]	; (4628 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    45fe:	490f      	ldr	r1, [pc, #60]	; (463c <_Z41__static_initialization_and_destruction_0ii+0x70>)
    4600:	480c      	ldr	r0, [pc, #48]	; (4634 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    4602:	4b0b      	ldr	r3, [pc, #44]	; (4630 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    4604:	4798      	blx	r3
    4606:	480e      	ldr	r0, [pc, #56]	; (4640 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    4608:	4b0e      	ldr	r3, [pc, #56]	; (4644 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    460a:	4798      	blx	r3
    460c:	4a06      	ldr	r2, [pc, #24]	; (4628 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    460e:	490e      	ldr	r1, [pc, #56]	; (4648 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    4610:	480b      	ldr	r0, [pc, #44]	; (4640 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    4612:	4b07      	ldr	r3, [pc, #28]	; (4630 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    4614:	4798      	blx	r3
    4616:	bf00      	nop
    4618:	3708      	adds	r7, #8
    461a:	46bd      	mov	sp, r7
    461c:	bd80      	pop	{r7, pc}
    461e:	bf00      	nop
    4620:	20008140 	.word	0x20008140
    4624:	00002d21 	.word	0x00002d21
    4628:	20000000 	.word	0x20000000
    462c:	00002d3b 	.word	0x00002d3b
    4630:	00019d1d 	.word	0x00019d1d
    4634:	20008154 	.word	0x20008154
    4638:	00000fb5 	.word	0x00000fb5
    463c:	00000fcf 	.word	0x00000fcf
    4640:	200081c4 	.word	0x200081c4
    4644:	00002fdd 	.word	0x00002fdd
    4648:	0000308d 	.word	0x0000308d

0000464c <_GLOBAL__sub_I_ptrStatesClass>:
    464c:	b580      	push	{r7, lr}
    464e:	af00      	add	r7, sp, #0
    4650:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4654:	2001      	movs	r0, #1
    4656:	4b01      	ldr	r3, [pc, #4]	; (465c <_GLOBAL__sub_I_ptrStatesClass+0x10>)
    4658:	4798      	blx	r3
    465a:	bd80      	pop	{r7, pc}
    465c:	000045cd 	.word	0x000045cd

00004660 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    4660:	b480      	push	{r7}
    4662:	b083      	sub	sp, #12
    4664:	af00      	add	r7, sp, #0
    4666:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    4668:	687b      	ldr	r3, [r7, #4]
    466a:	681b      	ldr	r3, [r3, #0]
}
    466c:	4618      	mov	r0, r3
    466e:	370c      	adds	r7, #12
    4670:	46bd      	mov	sp, r7
    4672:	bc80      	pop	{r7}
    4674:	4770      	bx	lr
	...

00004678 <_ZN17TaskHandler_ClassC1Ev>:
//static TaskHandler_Class	taskStorage[MAXIMUM_TASKS];
//list_descriptor		taskStorage;
static	ControllerTask	taskStorage[MAXIMUM_TASKS];
static	list_element	listElements[MAXIMUM_TASKS];
// default constructor
TaskHandler_Class::TaskHandler_Class()
    4678:	b480      	push	{r7}
    467a:	b083      	sub	sp, #12
    467c:	af00      	add	r7, sp, #0
    467e:	6078      	str	r0, [r7, #4]
{
	taskListPrivate=(list_descriptor*)listElements;
    4680:	687b      	ldr	r3, [r7, #4]
    4682:	4a04      	ldr	r2, [pc, #16]	; (4694 <_ZN17TaskHandler_ClassC1Ev+0x1c>)
    4684:	60da      	str	r2, [r3, #12]
	//taskList->head->next=NULL;
	
	//task->id=(ALUTaskEnum)0;


} //TaskHandler_Class
    4686:	687b      	ldr	r3, [r7, #4]
    4688:	4618      	mov	r0, r3
    468a:	370c      	adds	r7, #12
    468c:	46bd      	mov	sp, r7
    468e:	bc80      	pop	{r7}
    4690:	4770      	bx	lr
    4692:	bf00      	nop
    4694:	200086f0 	.word	0x200086f0

00004698 <_ZN17TaskHandler_ClassD1Ev>:

// default destructor
TaskHandler_Class::~TaskHandler_Class()
    4698:	b480      	push	{r7}
    469a:	b083      	sub	sp, #12
    469c:	af00      	add	r7, sp, #0
    469e:	6078      	str	r0, [r7, #4]
{
} //~TaskHandler_Class
    46a0:	687b      	ldr	r3, [r7, #4]
    46a2:	4618      	mov	r0, r3
    46a4:	370c      	adds	r7, #12
    46a6:	46bd      	mov	sp, r7
    46a8:	bc80      	pop	{r7}
    46aa:	4770      	bx	lr

000046ac <_ZN17TaskHandler_Class13InitTaskArrayEv>:

void TaskHandler_Class::InitTaskArray(void){
    46ac:	b480      	push	{r7}
    46ae:	b083      	sub	sp, #12
    46b0:	af00      	add	r7, sp, #0
    46b2:	6078      	str	r0, [r7, #4]
	for (i=1; i<MAXIMUM_TASKS; i++)
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	2201      	movs	r2, #1
    46b8:	721a      	strb	r2, [r3, #8]
    46ba:	687b      	ldr	r3, [r7, #4]
    46bc:	7a1b      	ldrb	r3, [r3, #8]
    46be:	2b0b      	cmp	r3, #11
    46c0:	dc31      	bgt.n	4726 <_ZN17TaskHandler_Class13InitTaskArrayEv+0x7a>
	{
		taskStorage[i].elem.next = (list_element*)NULL;
    46c2:	687b      	ldr	r3, [r7, #4]
    46c4:	7a1b      	ldrb	r3, [r3, #8]
    46c6:	4619      	mov	r1, r3
    46c8:	4b20      	ldr	r3, [pc, #128]	; (474c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    46ca:	2200      	movs	r2, #0
    46cc:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
		taskStorage[i].id=kALUNotTaskEvent;
    46d0:	687b      	ldr	r3, [r7, #4]
    46d2:	7a1b      	ldrb	r3, [r3, #8]
    46d4:	4a1d      	ldr	r2, [pc, #116]	; (474c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    46d6:	00db      	lsls	r3, r3, #3
    46d8:	4413      	add	r3, r2
    46da:	2200      	movs	r2, #0
    46dc:	711a      	strb	r2, [r3, #4]
		taskStorage[i-1].elem.next = &taskStorage[i].elem;
    46de:	687b      	ldr	r3, [r7, #4]
    46e0:	7a1b      	ldrb	r3, [r3, #8]
    46e2:	3b01      	subs	r3, #1
    46e4:	687a      	ldr	r2, [r7, #4]
    46e6:	7a12      	ldrb	r2, [r2, #8]
    46e8:	00d2      	lsls	r2, r2, #3
    46ea:	4918      	ldr	r1, [pc, #96]	; (474c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    46ec:	440a      	add	r2, r1
    46ee:	4917      	ldr	r1, [pc, #92]	; (474c <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    46f0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		listElements[i].next = (list_element*)NULL;
    46f4:	687b      	ldr	r3, [r7, #4]
    46f6:	7a1b      	ldrb	r3, [r3, #8]
    46f8:	4619      	mov	r1, r3
    46fa:	4b15      	ldr	r3, [pc, #84]	; (4750 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    46fc:	2200      	movs	r2, #0
    46fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		listElements[i-1].next = &listElements[i];
    4702:	687b      	ldr	r3, [r7, #4]
    4704:	7a1b      	ldrb	r3, [r3, #8]
    4706:	3b01      	subs	r3, #1
    4708:	687a      	ldr	r2, [r7, #4]
    470a:	7a12      	ldrb	r2, [r2, #8]
    470c:	0092      	lsls	r2, r2, #2
    470e:	4910      	ldr	r1, [pc, #64]	; (4750 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    4710:	440a      	add	r2, r1
    4712:	490f      	ldr	r1, [pc, #60]	; (4750 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    4714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=1; i<MAXIMUM_TASKS; i++)
    4718:	687b      	ldr	r3, [r7, #4]
    471a:	7a1b      	ldrb	r3, [r3, #8]
    471c:	3301      	adds	r3, #1
    471e:	b2da      	uxtb	r2, r3
    4720:	687b      	ldr	r3, [r7, #4]
    4722:	721a      	strb	r2, [r3, #8]
    4724:	e7c9      	b.n	46ba <_ZN17TaskHandler_Class13InitTaskArrayEv+0xe>
	}
	taskListPrivate->head->next=NULL;
    4726:	687b      	ldr	r3, [r7, #4]
    4728:	68db      	ldr	r3, [r3, #12]
    472a:	681b      	ldr	r3, [r3, #0]
    472c:	2200      	movs	r2, #0
    472e:	601a      	str	r2, [r3, #0]
	taskListPrivate->head=NULL;
    4730:	687b      	ldr	r3, [r7, #4]
    4732:	68db      	ldr	r3, [r3, #12]
    4734:	2200      	movs	r2, #0
    4736:	601a      	str	r2, [r3, #0]

		//taskList->head->next=NULL;
		taskList=taskListPrivate;
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	68da      	ldr	r2, [r3, #12]
    473c:	687b      	ldr	r3, [r7, #4]
    473e:	601a      	str	r2, [r3, #0]
}
    4740:	bf00      	nop
    4742:	370c      	adds	r7, #12
    4744:	46bd      	mov	sp, r7
    4746:	bc80      	pop	{r7}
    4748:	4770      	bx	lr
    474a:	bf00      	nop
    474c:	20008690 	.word	0x20008690
    4750:	200086f0 	.word	0x200086f0

00004754 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask>:
		return ERR_ALREADY_INITIALIZED;
	}
	AddALUTask(taskListPrivate,task);
	return ERR_NONE;
}
int TaskHandler_Class::AddTask(ControllerTask& tk ){
    4754:	b580      	push	{r7, lr}
    4756:	b082      	sub	sp, #8
    4758:	af00      	add	r7, sp, #0
    475a:	6078      	str	r0, [r7, #4]
    475c:	6039      	str	r1, [r7, #0]
	if (IsNotDeclaredTask(tk))
    475e:	6839      	ldr	r1, [r7, #0]
    4760:	6878      	ldr	r0, [r7, #4]
    4762:	4b22      	ldr	r3, [pc, #136]	; (47ec <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x98>)
    4764:	4798      	blx	r3
    4766:	4603      	mov	r3, r0
    4768:	2b00      	cmp	r3, #0
    476a:	d039      	beq.n	47e0 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x8c>
	{
		ChooseAvailableTask();
    476c:	6878      	ldr	r0, [r7, #4]
    476e:	4b20      	ldr	r3, [pc, #128]	; (47f0 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x9c>)
    4770:	4798      	blx	r3
		task->elem=tk.elem;
    4772:	687b      	ldr	r3, [r7, #4]
    4774:	685b      	ldr	r3, [r3, #4]
    4776:	683a      	ldr	r2, [r7, #0]
    4778:	6812      	ldr	r2, [r2, #0]
    477a:	601a      	str	r2, [r3, #0]
		task->id=tk.id;
    477c:	687b      	ldr	r3, [r7, #4]
    477e:	685b      	ldr	r3, [r3, #4]
    4780:	683a      	ldr	r2, [r7, #0]
    4782:	7912      	ldrb	r2, [r2, #4]
    4784:	711a      	strb	r2, [r3, #4]
		task->prio=tk.prio;
    4786:	687b      	ldr	r3, [r7, #4]
    4788:	685b      	ldr	r3, [r3, #4]
    478a:	683a      	ldr	r2, [r7, #0]
    478c:	7952      	ldrb	r2, [r2, #5]
    478e:	715a      	strb	r2, [r3, #5]
		ASSERT((taskListPrivate)&&(task));
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	68db      	ldr	r3, [r3, #12]
    4794:	2b00      	cmp	r3, #0
    4796:	d005      	beq.n	47a4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    4798:	687b      	ldr	r3, [r7, #4]
    479a:	685b      	ldr	r3, [r3, #4]
    479c:	2b00      	cmp	r3, #0
    479e:	d001      	beq.n	47a4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    47a0:	2301      	movs	r3, #1
    47a2:	e000      	b.n	47a6 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x52>
    47a4:	2300      	movs	r3, #0
    47a6:	2242      	movs	r2, #66	; 0x42
    47a8:	4912      	ldr	r1, [pc, #72]	; (47f4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa0>)
    47aa:	4618      	mov	r0, r3
    47ac:	4b12      	ldr	r3, [pc, #72]	; (47f8 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa4>)
    47ae:	4798      	blx	r3
		if (is_list_element(taskListPrivate,task)) {
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	68da      	ldr	r2, [r3, #12]
    47b4:	687b      	ldr	r3, [r7, #4]
    47b6:	685b      	ldr	r3, [r3, #4]
    47b8:	4619      	mov	r1, r3
    47ba:	4610      	mov	r0, r2
    47bc:	4b0f      	ldr	r3, [pc, #60]	; (47fc <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa8>)
    47be:	4798      	blx	r3
    47c0:	4603      	mov	r3, r0
    47c2:	2b00      	cmp	r3, #0
    47c4:	d002      	beq.n	47cc <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x78>

			//ASSERT(false);
			return ERR_ALREADY_INITIALIZED;
    47c6:	f06f 0311 	mvn.w	r3, #17
    47ca:	e00b      	b.n	47e4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
		}
		AddALUTask(taskListPrivate,task);
    47cc:	687b      	ldr	r3, [r7, #4]
    47ce:	68d9      	ldr	r1, [r3, #12]
    47d0:	687b      	ldr	r3, [r7, #4]
    47d2:	685b      	ldr	r3, [r3, #4]
    47d4:	461a      	mov	r2, r3
    47d6:	6878      	ldr	r0, [r7, #4]
    47d8:	4b09      	ldr	r3, [pc, #36]	; (4800 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xac>)
    47da:	4798      	blx	r3
		return ERR_NONE;
    47dc:	2300      	movs	r3, #0
    47de:	e001      	b.n	47e4 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
	}else{
		return ERR_ALREADY_INITIALIZED;
    47e0:	f06f 0311 	mvn.w	r3, #17
	}
	
}
    47e4:	4618      	mov	r0, r3
    47e6:	3708      	adds	r7, #8
    47e8:	46bd      	mov	sp, r7
    47ea:	bd80      	pop	{r7, pc}
    47ec:	00004979 	.word	0x00004979
    47f0:	00004931 	.word	0x00004931
    47f4:	000209b0 	.word	0x000209b0
    47f8:	00008145 	.word	0x00008145
    47fc:	0000816d 	.word	0x0000816d
    4800:	00004805 	.word	0x00004805

00004804 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask>:

void TaskHandler_Class::AddALUTask(list_descriptor *list,ControllerTask* pct){
    4804:	b580      	push	{r7, lr}
    4806:	b086      	sub	sp, #24
    4808:	af00      	add	r7, sp, #0
    480a:	60f8      	str	r0, [r7, #12]
    480c:	60b9      	str	r1, [r7, #8]
    480e:	607a      	str	r2, [r7, #4]
	ControllerTask *it, *head = (ControllerTask *)list_get_head(list);
    4810:	68b8      	ldr	r0, [r7, #8]
    4812:	4b09      	ldr	r3, [pc, #36]	; (4838 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x34>)
    4814:	4798      	blx	r3
    4816:	6178      	str	r0, [r7, #20]

	if (!head) {
    4818:	697b      	ldr	r3, [r7, #20]
    481a:	2b00      	cmp	r3, #0
    481c:	d104      	bne.n	4828 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x24>
		list_insert_as_head(list, pct);
    481e:	6879      	ldr	r1, [r7, #4]
    4820:	68b8      	ldr	r0, [r7, #8]
    4822:	4b06      	ldr	r3, [pc, #24]	; (483c <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x38>)
    4824:	4798      	blx	r3
		return;
    4826:	e003      	b.n	4830 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x2c>
		}else{
		list_insert_at_end(list,pct);
    4828:	6879      	ldr	r1, [r7, #4]
    482a:	68b8      	ldr	r0, [r7, #8]
    482c:	4b04      	ldr	r3, [pc, #16]	; (4840 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x3c>)
    482e:	4798      	blx	r3
	}

		

}
    4830:	3718      	adds	r7, #24
    4832:	46bd      	mov	sp, r7
    4834:	bd80      	pop	{r7, pc}
    4836:	bf00      	nop
    4838:	00004661 	.word	0x00004661
    483c:	000081a5 	.word	0x000081a5
    4840:	00008221 	.word	0x00008221

00004844 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask>:
		}
		list_delete_element(taskListPrivate, task);

		return ERR_NONE;
}
int32_t TaskHandler_Class::RemoveTask(ControllerTask& tk){
    4844:	b580      	push	{r7, lr}
    4846:	b082      	sub	sp, #8
    4848:	af00      	add	r7, sp, #0
    484a:	6078      	str	r0, [r7, #4]
    484c:	6039      	str	r1, [r7, #0]


	ASSERT(taskListPrivate && (&tk));
    484e:	687b      	ldr	r3, [r7, #4]
    4850:	68db      	ldr	r3, [r3, #12]
    4852:	2b00      	cmp	r3, #0
    4854:	d004      	beq.n	4860 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    4856:	683b      	ldr	r3, [r7, #0]
    4858:	2b00      	cmp	r3, #0
    485a:	d001      	beq.n	4860 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    485c:	2301      	movs	r3, #1
    485e:	e000      	b.n	4862 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1e>
    4860:	2300      	movs	r3, #0
    4862:	226f      	movs	r2, #111	; 0x6f
    4864:	4917      	ldr	r1, [pc, #92]	; (48c4 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x80>)
    4866:	4618      	mov	r0, r3
    4868:	4b17      	ldr	r3, [pc, #92]	; (48c8 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x84>)
    486a:	4798      	blx	r3
	if (IsNotDeclaredTask(tk))
    486c:	6839      	ldr	r1, [r7, #0]
    486e:	6878      	ldr	r0, [r7, #4]
    4870:	4b16      	ldr	r3, [pc, #88]	; (48cc <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x88>)
    4872:	4798      	blx	r3
    4874:	4603      	mov	r3, r0
    4876:	2b00      	cmp	r3, #0
    4878:	d002      	beq.n	4880 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x3c>
	{
			return ERR_NOT_FOUND;
    487a:	f06f 0309 	mvn.w	r3, #9
    487e:	e01d      	b.n	48bc <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
	} 
	else
	{
		
		if (!is_list_element(taskListPrivate, task)) {
    4880:	687b      	ldr	r3, [r7, #4]
    4882:	68da      	ldr	r2, [r3, #12]
    4884:	687b      	ldr	r3, [r7, #4]
    4886:	685b      	ldr	r3, [r3, #4]
    4888:	4619      	mov	r1, r3
    488a:	4610      	mov	r0, r2
    488c:	4b10      	ldr	r3, [pc, #64]	; (48d0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x8c>)
    488e:	4798      	blx	r3
    4890:	4603      	mov	r3, r0
    4892:	f083 0301 	eor.w	r3, r3, #1
    4896:	b2db      	uxtb	r3, r3
    4898:	2b00      	cmp	r3, #0
    489a:	d002      	beq.n	48a2 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x5e>
			//ASSERT(false);
			return ERR_NOT_FOUND;
    489c:	f06f 0309 	mvn.w	r3, #9
    48a0:	e00c      	b.n	48bc <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
		}
			
		list_delete_element(taskListPrivate, task);
    48a2:	687b      	ldr	r3, [r7, #4]
    48a4:	68da      	ldr	r2, [r3, #12]
    48a6:	687b      	ldr	r3, [r7, #4]
    48a8:	685b      	ldr	r3, [r3, #4]
    48aa:	4619      	mov	r1, r3
    48ac:	4610      	mov	r0, r2
    48ae:	4b09      	ldr	r3, [pc, #36]	; (48d4 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x90>)
    48b0:	4798      	blx	r3
		task->id=kALUNotTaskEvent;
    48b2:	687b      	ldr	r3, [r7, #4]
    48b4:	685b      	ldr	r3, [r3, #4]
    48b6:	2200      	movs	r2, #0
    48b8:	711a      	strb	r2, [r3, #4]
		return ERR_NONE;
    48ba:	2300      	movs	r3, #0
	}

	return ERR_NOT_FOUND;
}
    48bc:	4618      	mov	r0, r3
    48be:	3708      	adds	r7, #8
    48c0:	46bd      	mov	sp, r7
    48c2:	bd80      	pop	{r7, pc}
    48c4:	000209b0 	.word	0x000209b0
    48c8:	00008145 	.word	0x00008145
    48cc:	00004979 	.word	0x00004979
    48d0:	0000816d 	.word	0x0000816d
    48d4:	000082cf 	.word	0x000082cf

000048d8 <_ZN17TaskHandler_Class15GetHighPrioTaskEv>:

ControllerTask	TaskHandler_Class::GetHighPrioTask(void){
    48d8:	b480      	push	{r7}
    48da:	b087      	sub	sp, #28
    48dc:	af00      	add	r7, sp, #0
    48de:	6078      	str	r0, [r7, #4]
    48e0:	6039      	str	r1, [r7, #0]
	list_element *it;
	ControllerTask* ct;
	uint8_t		highPrio=kALUNumberTasks;
    48e2:	230c      	movs	r3, #12
    48e4:	73fb      	strb	r3, [r7, #15]
		
	for (it = taskListPrivate->head; it; it = it->next) {
    48e6:	683b      	ldr	r3, [r7, #0]
    48e8:	68db      	ldr	r3, [r3, #12]
    48ea:	681b      	ldr	r3, [r3, #0]
    48ec:	617b      	str	r3, [r7, #20]
    48ee:	697b      	ldr	r3, [r7, #20]
    48f0:	2b00      	cmp	r3, #0
    48f2:	d011      	beq.n	4918 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x40>
		ct=(ControllerTask*)it;
    48f4:	697b      	ldr	r3, [r7, #20]
    48f6:	613b      	str	r3, [r7, #16]
		if ((ct->prio)<(highPrio)) {
    48f8:	693b      	ldr	r3, [r7, #16]
    48fa:	795b      	ldrb	r3, [r3, #5]
    48fc:	461a      	mov	r2, r3
    48fe:	7bfb      	ldrb	r3, [r7, #15]
    4900:	429a      	cmp	r2, r3
    4902:	da05      	bge.n	4910 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x38>
			highPrio=ct->prio;
    4904:	693b      	ldr	r3, [r7, #16]
    4906:	795b      	ldrb	r3, [r3, #5]
    4908:	73fb      	strb	r3, [r7, #15]
			task=ct;
    490a:	683b      	ldr	r3, [r7, #0]
    490c:	693a      	ldr	r2, [r7, #16]
    490e:	605a      	str	r2, [r3, #4]
	for (it = taskListPrivate->head; it; it = it->next) {
    4910:	697b      	ldr	r3, [r7, #20]
    4912:	681b      	ldr	r3, [r3, #0]
    4914:	617b      	str	r3, [r7, #20]
    4916:	e7ea      	b.n	48ee <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x16>
			
		}
	}
	return (ControllerTask)(*task);
    4918:	683b      	ldr	r3, [r7, #0]
    491a:	685a      	ldr	r2, [r3, #4]
    491c:	687b      	ldr	r3, [r7, #4]
    491e:	e892 0003 	ldmia.w	r2, {r0, r1}
    4922:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4926:	6878      	ldr	r0, [r7, #4]
    4928:	371c      	adds	r7, #28
    492a:	46bd      	mov	sp, r7
    492c:	bc80      	pop	{r7}
    492e:	4770      	bx	lr

00004930 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv>:

void	TaskHandler_Class::ChooseAvailableTask(void){
    4930:	b480      	push	{r7}
    4932:	b085      	sub	sp, #20
    4934:	af00      	add	r7, sp, #0
    4936:	6078      	str	r0, [r7, #4]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4938:	2300      	movs	r3, #0
    493a:	73fb      	strb	r3, [r7, #15]
    493c:	7bfb      	ldrb	r3, [r7, #15]
    493e:	2b0b      	cmp	r3, #11
    4940:	dc11      	bgt.n	4966 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x36>
	{
	
		if (taskStorage[ii].id==kALUNotTaskEvent)
    4942:	7bfb      	ldrb	r3, [r7, #15]
    4944:	4a0b      	ldr	r2, [pc, #44]	; (4974 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    4946:	00db      	lsls	r3, r3, #3
    4948:	4413      	add	r3, r2
    494a:	791b      	ldrb	r3, [r3, #4]
    494c:	2b00      	cmp	r3, #0
    494e:	d106      	bne.n	495e <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x2e>
		{			
			task=&taskStorage[ii];
    4950:	7bfb      	ldrb	r3, [r7, #15]
    4952:	00db      	lsls	r3, r3, #3
    4954:	4a07      	ldr	r2, [pc, #28]	; (4974 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    4956:	441a      	add	r2, r3
    4958:	687b      	ldr	r3, [r7, #4]
    495a:	605a      	str	r2, [r3, #4]
			return;
    495c:	e006      	b.n	496c <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x3c>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    495e:	7bfb      	ldrb	r3, [r7, #15]
    4960:	3301      	adds	r3, #1
    4962:	73fb      	strb	r3, [r7, #15]
    4964:	e7ea      	b.n	493c <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0xc>
			
		}
	}
	task=&taskStorage[0];
    4966:	687b      	ldr	r3, [r7, #4]
    4968:	4a02      	ldr	r2, [pc, #8]	; (4974 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x44>)
    496a:	605a      	str	r2, [r3, #4]

}
    496c:	3714      	adds	r7, #20
    496e:	46bd      	mov	sp, r7
    4970:	bc80      	pop	{r7}
    4972:	4770      	bx	lr
    4974:	20008690 	.word	0x20008690

00004978 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask>:

bool	TaskHandler_Class::IsNotDeclaredTask(ControllerTask& tk){
    4978:	b480      	push	{r7}
    497a:	b085      	sub	sp, #20
    497c:	af00      	add	r7, sp, #0
    497e:	6078      	str	r0, [r7, #4]
    4980:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    4982:	2300      	movs	r3, #0
    4984:	73fb      	strb	r3, [r7, #15]
    4986:	7bfb      	ldrb	r3, [r7, #15]
    4988:	2b0b      	cmp	r3, #11
    498a:	dc14      	bgt.n	49b6 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x3e>
	{
		if (taskStorage[ii].id==tk.id)
    498c:	7bfb      	ldrb	r3, [r7, #15]
    498e:	4a0d      	ldr	r2, [pc, #52]	; (49c4 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>)
    4990:	00db      	lsls	r3, r3, #3
    4992:	4413      	add	r3, r2
    4994:	791a      	ldrb	r2, [r3, #4]
    4996:	683b      	ldr	r3, [r7, #0]
    4998:	791b      	ldrb	r3, [r3, #4]
    499a:	429a      	cmp	r2, r3
    499c:	d107      	bne.n	49ae <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x36>
		{
			task=&taskStorage[ii];
    499e:	7bfb      	ldrb	r3, [r7, #15]
    49a0:	00db      	lsls	r3, r3, #3
    49a2:	4a08      	ldr	r2, [pc, #32]	; (49c4 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>)
    49a4:	441a      	add	r2, r3
    49a6:	687b      	ldr	r3, [r7, #4]
    49a8:	605a      	str	r2, [r3, #4]
			return false;
    49aa:	2300      	movs	r3, #0
    49ac:	e004      	b.n	49b8 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x40>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    49ae:	7bfb      	ldrb	r3, [r7, #15]
    49b0:	3301      	adds	r3, #1
    49b2:	73fb      	strb	r3, [r7, #15]
    49b4:	e7e7      	b.n	4986 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0xe>
			
		}
	}
	return true;
    49b6:	2301      	movs	r3, #1


}
    49b8:	4618      	mov	r0, r3
    49ba:	3714      	adds	r7, #20
    49bc:	46bd      	mov	sp, r7
    49be:	bc80      	pop	{r7}
    49c0:	4770      	bx	lr
    49c2:	bf00      	nop
    49c4:	20008690 	.word	0x20008690

000049c8 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum>:

bool	TaskHandler_Class::IsListedTask(ALUTaskEnum at){
    49c8:	b480      	push	{r7}
    49ca:	b085      	sub	sp, #20
    49cc:	af00      	add	r7, sp, #0
    49ce:	6078      	str	r0, [r7, #4]
    49d0:	460b      	mov	r3, r1
    49d2:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    49d4:	2300      	movs	r3, #0
    49d6:	73fb      	strb	r3, [r7, #15]
    49d8:	7bfb      	ldrb	r3, [r7, #15]
    49da:	2b0b      	cmp	r3, #11
    49dc:	dc0d      	bgt.n	49fa <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x32>
	{
		if (taskStorage[ii].id==at)
    49de:	7bfb      	ldrb	r3, [r7, #15]
    49e0:	4a09      	ldr	r2, [pc, #36]	; (4a08 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x40>)
    49e2:	00db      	lsls	r3, r3, #3
    49e4:	4413      	add	r3, r2
    49e6:	791b      	ldrb	r3, [r3, #4]
    49e8:	78fa      	ldrb	r2, [r7, #3]
    49ea:	429a      	cmp	r2, r3
    49ec:	d101      	bne.n	49f2 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x2a>
		{
		//	task=&taskStorage[ii];
			return true;
    49ee:	2301      	movs	r3, #1
    49f0:	e004      	b.n	49fc <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x34>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    49f2:	7bfb      	ldrb	r3, [r7, #15]
    49f4:	3301      	adds	r3, #1
    49f6:	73fb      	strb	r3, [r7, #15]
    49f8:	e7ee      	b.n	49d8 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x10>
			
		}
	}
	return false;
    49fa:	2300      	movs	r3, #0


    49fc:	4618      	mov	r0, r3
    49fe:	3714      	adds	r7, #20
    4a00:	46bd      	mov	sp, r7
    4a02:	bc80      	pop	{r7}
    4a04:	4770      	bx	lr
    4a06:	bf00      	nop
    4a08:	20008690 	.word	0x20008690

00004a0c <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
    4a0c:	4b02      	ldr	r3, [pc, #8]	; (4a18 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
    4a0e:	681b      	ldr	r3, [r3, #0]
    4a10:	2200      	movs	r2, #0
    4a12:	711a      	strb	r2, [r3, #4]
    4a14:	4770      	bx	lr
    4a16:	bf00      	nop
    4a18:	20008720 	.word	0x20008720

00004a1c <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
    4a1c:	b538      	push	{r3, r4, r5, lr}
    4a1e:	4604      	mov	r4, r0
{
	ticks=0;
    4a20:	2300      	movs	r3, #0
    4a22:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
    4a24:	4d04      	ldr	r5, [pc, #16]	; (4a38 <_ZN16Maintenance_ToolD1Ev+0x1c>)
    4a26:	4628      	mov	r0, r5
    4a28:	4b04      	ldr	r3, [pc, #16]	; (4a3c <_ZN16Maintenance_ToolD1Ev+0x20>)
    4a2a:	4798      	blx	r3
	interfaceTimer.Remove_task();
    4a2c:	4628      	mov	r0, r5
    4a2e:	4b04      	ldr	r3, [pc, #16]	; (4a40 <_ZN16Maintenance_ToolD1Ev+0x24>)
    4a30:	4798      	blx	r3
	
} //~Maintenance_Tool
    4a32:	4620      	mov	r0, r4
    4a34:	bd38      	pop	{r3, r4, r5, pc}
    4a36:	bf00      	nop
    4a38:	2000a5a8 	.word	0x2000a5a8
    4a3c:	00018b2d 	.word	0x00018b2d
    4a40:	00018c1d 	.word	0x00018c1d

00004a44 <_ZN16Maintenance_ToolC1Ev>:
	ptrMaintenanceTool=this;
    4a44:	4a04      	ldr	r2, [pc, #16]	; (4a58 <_ZN16Maintenance_ToolC1Ev+0x14>)
    4a46:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
    4a48:	2200      	movs	r2, #0
    4a4a:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
	nextMaintenanceSyncTime = 0;
    4a4e:	6542      	str	r2, [r0, #84]	; 0x54
	nextMaintenanceUsageTimerSyncTime = 0;
    4a50:	6582      	str	r2, [r0, #88]	; 0x58
	ticks=0;
    4a52:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
    4a54:	4770      	bx	lr
    4a56:	bf00      	nop
    4a58:	20008720 	.word	0x20008720

00004a5c <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
    4a5c:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
    4a5e:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
		if (isConnected)
    4a62:	b919      	cbnz	r1, 4a6c <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
    4a64:	4805      	ldr	r0, [pc, #20]	; (4a7c <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
    4a66:	4b06      	ldr	r3, [pc, #24]	; (4a80 <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
    4a68:	4798      	blx	r3
    4a6a:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
    4a6c:	f64e 2260 	movw	r2, #60000	; 0xea60
    4a70:	4904      	ldr	r1, [pc, #16]	; (4a84 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
    4a72:	4802      	ldr	r0, [pc, #8]	; (4a7c <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
    4a74:	4b04      	ldr	r3, [pc, #16]	; (4a88 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
    4a76:	4798      	blx	r3
    4a78:	bd08      	pop	{r3, pc}
    4a7a:	bf00      	nop
    4a7c:	2000a5a8 	.word	0x2000a5a8
    4a80:	00018b2d 	.word	0x00018b2d
    4a84:	00004a0d 	.word	0x00004a0d
    4a88:	00018be5 	.word	0x00018be5

00004a8c <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
    4a8c:	b510      	push	{r4, lr}
    4a8e:	4604      	mov	r4, r0
	result=false;
    4a90:	2300      	movs	r3, #0
    4a92:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
	magic=0;
    4a96:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
	if (gotAccess==true)
    4a9a:	f890 3109 	ldrb.w	r3, [r0, #265]	; 0x109
    4a9e:	b12b      	cbz	r3, 4aac <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
    4aa0:	2301      	movs	r3, #1
    4aa2:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
	return	result;
    4aa6:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
}
    4aaa:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
    4aac:	4b13      	ldr	r3, [pc, #76]	; (4afc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
    4aae:	7d5b      	ldrb	r3, [r3, #21]
    4ab0:	b18b      	cbz	r3, 4ad6 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x4a>
    4ab2:	1d43      	adds	r3, r0, #5
    4ab4:	3009      	adds	r0, #9
    4ab6:	2200      	movs	r2, #0
				magic|= localBuffer[i];
    4ab8:	f813 1b01 	ldrb.w	r1, [r3], #1
    4abc:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
			for (int i = 0; i < 4; i++)
    4ac0:	4283      	cmp	r3, r0
    4ac2:	d1f9      	bne.n	4ab8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2c>
    4ac4:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
    4ac8:	4b0d      	ldr	r3, [pc, #52]	; (4b00 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x74>)
    4aca:	ea82 0103 	eor.w	r1, r2, r3
    4ace:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
			if (xorResult==0)
    4ad2:	429a      	cmp	r2, r3
    4ad4:	d005      	beq.n	4ae2 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x56>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    4ad6:	2240      	movs	r2, #64	; 0x40
    4ad8:	1d61      	adds	r1, r4, #5
    4ada:	4808      	ldr	r0, [pc, #32]	; (4afc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x70>)
    4adc:	4b09      	ldr	r3, [pc, #36]	; (4b04 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    4ade:	4798      	blx	r3
    4ae0:	e7e1      	b.n	4aa6 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
    4ae2:	2101      	movs	r1, #1
    4ae4:	f884 1109 	strb.w	r1, [r4, #265]	; 0x109
				result=true;
    4ae8:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
				is_MTPC_Beaming=true;
    4aec:	7121      	strb	r1, [r4, #4]
				setConnected(true);
    4aee:	4620      	mov	r0, r4
    4af0:	4b05      	ldr	r3, [pc, #20]	; (4b08 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
    4af2:	4798      	blx	r3
				return	result;
    4af4:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
    4af8:	bd10      	pop	{r4, pc}
    4afa:	bf00      	nop
    4afc:	2000a4d0 	.word	0x2000a4d0
    4b00:	61626364 	.word	0x61626364
    4b04:	0001827d 	.word	0x0001827d
    4b08:	00004a5d 	.word	0x00004a5d

00004b0c <_GLOBAL__sub_I_ptrMaintenanceTool>:
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
	}

}
    4b0c:	b510      	push	{r4, lr}
    4b0e:	4c05      	ldr	r4, [pc, #20]	; (4b24 <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
    4b10:	4620      	mov	r0, r4
    4b12:	4b05      	ldr	r3, [pc, #20]	; (4b28 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
    4b14:	4798      	blx	r3
    4b16:	4a05      	ldr	r2, [pc, #20]	; (4b2c <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
    4b18:	4905      	ldr	r1, [pc, #20]	; (4b30 <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
    4b1a:	4620      	mov	r0, r4
    4b1c:	4b05      	ldr	r3, [pc, #20]	; (4b34 <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
    4b1e:	4798      	blx	r3
    4b20:	bd10      	pop	{r4, pc}
    4b22:	bf00      	nop
    4b24:	20008724 	.word	0x20008724
    4b28:	00004a45 	.word	0x00004a45
    4b2c:	20000000 	.word	0x20000000
    4b30:	00004a1d 	.word	0x00004a1d
    4b34:	00019d1d 	.word	0x00019d1d

00004b38 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    4b38:	b580      	push	{r7, lr}
    4b3a:	af00      	add	r7, sp, #0
	system_init();
    4b3c:	4b03      	ldr	r3, [pc, #12]	; (4b4c <atmel_start_init+0x14>)
    4b3e:	4798      	blx	r3
	usb_init();
    4b40:	4b03      	ldr	r3, [pc, #12]	; (4b50 <atmel_start_init+0x18>)
    4b42:	4798      	blx	r3
	spi_nor_flash_init();
    4b44:	4b03      	ldr	r3, [pc, #12]	; (4b54 <atmel_start_init+0x1c>)
    4b46:	4798      	blx	r3
}
    4b48:	bf00      	nop
    4b4a:	bd80      	pop	{r7, pc}
    4b4c:	00005ead 	.word	0x00005ead
    4b50:	00010d11 	.word	0x00010d11
    4b54:	00010ca5 	.word	0x00010ca5

00004b58 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    4b58:	b480      	push	{r7}
    4b5a:	b085      	sub	sp, #20
    4b5c:	af00      	add	r7, sp, #0
    4b5e:	60f8      	str	r0, [r7, #12]
    4b60:	460b      	mov	r3, r1
    4b62:	607a      	str	r2, [r7, #4]
    4b64:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4b66:	7afa      	ldrb	r2, [r7, #11]
    4b68:	68fb      	ldr	r3, [r7, #12]
    4b6a:	3220      	adds	r2, #32
    4b6c:	6879      	ldr	r1, [r7, #4]
    4b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    4b72:	bf00      	nop
    4b74:	3714      	adds	r7, #20
    4b76:	46bd      	mov	sp, r7
    4b78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b7c:	4770      	bx	lr

00004b7e <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    4b7e:	b480      	push	{r7}
    4b80:	b083      	sub	sp, #12
    4b82:	af00      	add	r7, sp, #0
    4b84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    4b86:	687b      	ldr	r3, [r7, #4]
    4b88:	691b      	ldr	r3, [r3, #16]
    4b8a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    4b8e:	687b      	ldr	r3, [r7, #4]
    4b90:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4b92:	bf00      	nop
    4b94:	370c      	adds	r7, #12
    4b96:	46bd      	mov	sp, r7
    4b98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b9c:	4770      	bx	lr

00004b9e <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    4b9e:	b480      	push	{r7}
    4ba0:	b083      	sub	sp, #12
    4ba2:	af00      	add	r7, sp, #0
    4ba4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    4ba6:	687b      	ldr	r3, [r7, #4]
    4ba8:	691b      	ldr	r3, [r3, #16]
    4baa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4bae:	687b      	ldr	r3, [r7, #4]
    4bb0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4bb2:	bf00      	nop
    4bb4:	370c      	adds	r7, #12
    4bb6:	46bd      	mov	sp, r7
    4bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bbc:	4770      	bx	lr

00004bbe <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    4bbe:	b480      	push	{r7}
    4bc0:	b083      	sub	sp, #12
    4bc2:	af00      	add	r7, sp, #0
    4bc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    4bc6:	687b      	ldr	r3, [r7, #4]
    4bc8:	691b      	ldr	r3, [r3, #16]
    4bca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    4bce:	687b      	ldr	r3, [r7, #4]
    4bd0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4bd2:	bf00      	nop
    4bd4:	370c      	adds	r7, #12
    4bd6:	46bd      	mov	sp, r7
    4bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bdc:	4770      	bx	lr

00004bde <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    4bde:	b480      	push	{r7}
    4be0:	b083      	sub	sp, #12
    4be2:	af00      	add	r7, sp, #0
    4be4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    4be6:	687b      	ldr	r3, [r7, #4]
    4be8:	691b      	ldr	r3, [r3, #16]
    4bea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    4bee:	687b      	ldr	r3, [r7, #4]
    4bf0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4bf2:	bf00      	nop
    4bf4:	370c      	adds	r7, #12
    4bf6:	46bd      	mov	sp, r7
    4bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bfc:	4770      	bx	lr

00004bfe <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    4bfe:	b480      	push	{r7}
    4c00:	b083      	sub	sp, #12
    4c02:	af00      	add	r7, sp, #0
    4c04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    4c06:	687b      	ldr	r3, [r7, #4]
    4c08:	695b      	ldr	r3, [r3, #20]
    4c0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    4c0e:	687b      	ldr	r3, [r7, #4]
    4c10:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c12:	bf00      	nop
    4c14:	370c      	adds	r7, #12
    4c16:	46bd      	mov	sp, r7
    4c18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c1c:	4770      	bx	lr

00004c1e <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    4c1e:	b480      	push	{r7}
    4c20:	b083      	sub	sp, #12
    4c22:	af00      	add	r7, sp, #0
    4c24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    4c26:	687b      	ldr	r3, [r7, #4]
    4c28:	695b      	ldr	r3, [r3, #20]
    4c2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4c2e:	687b      	ldr	r3, [r7, #4]
    4c30:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c32:	bf00      	nop
    4c34:	370c      	adds	r7, #12
    4c36:	46bd      	mov	sp, r7
    4c38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c3c:	4770      	bx	lr

00004c3e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    4c3e:	b480      	push	{r7}
    4c40:	b083      	sub	sp, #12
    4c42:	af00      	add	r7, sp, #0
    4c44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    4c46:	687b      	ldr	r3, [r7, #4]
    4c48:	695b      	ldr	r3, [r3, #20]
    4c4a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c52:	bf00      	nop
    4c54:	370c      	adds	r7, #12
    4c56:	46bd      	mov	sp, r7
    4c58:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c5c:	4770      	bx	lr

00004c5e <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    4c5e:	b480      	push	{r7}
    4c60:	b083      	sub	sp, #12
    4c62:	af00      	add	r7, sp, #0
    4c64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    4c66:	687b      	ldr	r3, [r7, #4]
    4c68:	695b      	ldr	r3, [r3, #20]
    4c6a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4c6e:	687b      	ldr	r3, [r7, #4]
    4c70:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c72:	bf00      	nop
    4c74:	370c      	adds	r7, #12
    4c76:	46bd      	mov	sp, r7
    4c78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c7c:	4770      	bx	lr

00004c7e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    4c7e:	b480      	push	{r7}
    4c80:	b083      	sub	sp, #12
    4c82:	af00      	add	r7, sp, #0
    4c84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    4c86:	687b      	ldr	r3, [r7, #4]
    4c88:	695b      	ldr	r3, [r3, #20]
    4c8a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    4c8e:	687b      	ldr	r3, [r7, #4]
    4c90:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4c92:	bf00      	nop
    4c94:	370c      	adds	r7, #12
    4c96:	46bd      	mov	sp, r7
    4c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c9c:	4770      	bx	lr

00004c9e <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    4c9e:	b480      	push	{r7}
    4ca0:	b083      	sub	sp, #12
    4ca2:	af00      	add	r7, sp, #0
    4ca4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	699b      	ldr	r3, [r3, #24]
    4caa:	f043 0201 	orr.w	r2, r3, #1
    4cae:	687b      	ldr	r3, [r7, #4]
    4cb0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4cb2:	bf00      	nop
    4cb4:	370c      	adds	r7, #12
    4cb6:	46bd      	mov	sp, r7
    4cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cbc:	4770      	bx	lr

00004cbe <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    4cbe:	b480      	push	{r7}
    4cc0:	b083      	sub	sp, #12
    4cc2:	af00      	add	r7, sp, #0
    4cc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    4cc6:	687b      	ldr	r3, [r7, #4]
    4cc8:	699b      	ldr	r3, [r3, #24]
    4cca:	f043 0202 	orr.w	r2, r3, #2
    4cce:	687b      	ldr	r3, [r7, #4]
    4cd0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4cd2:	bf00      	nop
    4cd4:	370c      	adds	r7, #12
    4cd6:	46bd      	mov	sp, r7
    4cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cdc:	4770      	bx	lr

00004cde <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    4cde:	b480      	push	{r7}
    4ce0:	b083      	sub	sp, #12
    4ce2:	af00      	add	r7, sp, #0
    4ce4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    4ce6:	687b      	ldr	r3, [r7, #4]
    4ce8:	699b      	ldr	r3, [r3, #24]
    4cea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    4cee:	687b      	ldr	r3, [r7, #4]
    4cf0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4cf2:	bf00      	nop
    4cf4:	370c      	adds	r7, #12
    4cf6:	46bd      	mov	sp, r7
    4cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cfc:	4770      	bx	lr

00004cfe <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    4cfe:	b480      	push	{r7}
    4d00:	b083      	sub	sp, #12
    4d02:	af00      	add	r7, sp, #0
    4d04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    4d06:	687b      	ldr	r3, [r7, #4]
    4d08:	699b      	ldr	r3, [r3, #24]
    4d0a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    4d0e:	687b      	ldr	r3, [r7, #4]
    4d10:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d12:	bf00      	nop
    4d14:	370c      	adds	r7, #12
    4d16:	46bd      	mov	sp, r7
    4d18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d1c:	4770      	bx	lr

00004d1e <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    4d1e:	b480      	push	{r7}
    4d20:	b083      	sub	sp, #12
    4d22:	af00      	add	r7, sp, #0
    4d24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    4d26:	687b      	ldr	r3, [r7, #4]
    4d28:	699b      	ldr	r3, [r3, #24]
    4d2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    4d2e:	687b      	ldr	r3, [r7, #4]
    4d30:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d32:	bf00      	nop
    4d34:	370c      	adds	r7, #12
    4d36:	46bd      	mov	sp, r7
    4d38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d3c:	4770      	bx	lr

00004d3e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    4d3e:	b480      	push	{r7}
    4d40:	b083      	sub	sp, #12
    4d42:	af00      	add	r7, sp, #0
    4d44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    4d46:	687b      	ldr	r3, [r7, #4]
    4d48:	699b      	ldr	r3, [r3, #24]
    4d4a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4d4e:	687b      	ldr	r3, [r7, #4]
    4d50:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d52:	bf00      	nop
    4d54:	370c      	adds	r7, #12
    4d56:	46bd      	mov	sp, r7
    4d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d5c:	4770      	bx	lr

00004d5e <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    4d5e:	b480      	push	{r7}
    4d60:	b083      	sub	sp, #12
    4d62:	af00      	add	r7, sp, #0
    4d64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    4d66:	687b      	ldr	r3, [r7, #4]
    4d68:	69db      	ldr	r3, [r3, #28]
    4d6a:	f043 0220 	orr.w	r2, r3, #32
    4d6e:	687b      	ldr	r3, [r7, #4]
    4d70:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d72:	bf00      	nop
    4d74:	370c      	adds	r7, #12
    4d76:	46bd      	mov	sp, r7
    4d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d7c:	4770      	bx	lr

00004d7e <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    4d7e:	b480      	push	{r7}
    4d80:	b083      	sub	sp, #12
    4d82:	af00      	add	r7, sp, #0
    4d84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    4d86:	687b      	ldr	r3, [r7, #4]
    4d88:	69db      	ldr	r3, [r3, #28]
    4d8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    4d8e:	687b      	ldr	r3, [r7, #4]
    4d90:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4d92:	bf00      	nop
    4d94:	370c      	adds	r7, #12
    4d96:	46bd      	mov	sp, r7
    4d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d9c:	4770      	bx	lr

00004d9e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    4d9e:	b480      	push	{r7}
    4da0:	b083      	sub	sp, #12
    4da2:	af00      	add	r7, sp, #0
    4da4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	69db      	ldr	r3, [r3, #28]
    4daa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    4dae:	687b      	ldr	r3, [r7, #4]
    4db0:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4db2:	bf00      	nop
    4db4:	370c      	adds	r7, #12
    4db6:	46bd      	mov	sp, r7
    4db8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dbc:	4770      	bx	lr

00004dbe <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    4dbe:	b480      	push	{r7}
    4dc0:	b083      	sub	sp, #12
    4dc2:	af00      	add	r7, sp, #0
    4dc4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    4dc6:	687b      	ldr	r3, [r7, #4]
    4dc8:	6a1b      	ldr	r3, [r3, #32]
    4dca:	f043 0201 	orr.w	r2, r3, #1
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4dd2:	bf00      	nop
    4dd4:	370c      	adds	r7, #12
    4dd6:	46bd      	mov	sp, r7
    4dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ddc:	4770      	bx	lr

00004dde <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    4dde:	b480      	push	{r7}
    4de0:	b083      	sub	sp, #12
    4de2:	af00      	add	r7, sp, #0
    4de4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    4de6:	687b      	ldr	r3, [r7, #4]
    4de8:	6a1b      	ldr	r3, [r3, #32]
    4dea:	f043 0202 	orr.w	r2, r3, #2
    4dee:	687b      	ldr	r3, [r7, #4]
    4df0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4df2:	bf00      	nop
    4df4:	370c      	adds	r7, #12
    4df6:	46bd      	mov	sp, r7
    4df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dfc:	4770      	bx	lr

00004dfe <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    4dfe:	b480      	push	{r7}
    4e00:	b083      	sub	sp, #12
    4e02:	af00      	add	r7, sp, #0
    4e04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    4e06:	687b      	ldr	r3, [r7, #4]
    4e08:	6a1b      	ldr	r3, [r3, #32]
    4e0a:	f043 0204 	orr.w	r2, r3, #4
    4e0e:	687b      	ldr	r3, [r7, #4]
    4e10:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4e12:	bf00      	nop
    4e14:	370c      	adds	r7, #12
    4e16:	46bd      	mov	sp, r7
    4e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e1c:	4770      	bx	lr

00004e1e <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    4e1e:	b480      	push	{r7}
    4e20:	b083      	sub	sp, #12
    4e22:	af00      	add	r7, sp, #0
    4e24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    4e26:	687b      	ldr	r3, [r7, #4]
    4e28:	6a1b      	ldr	r3, [r3, #32]
    4e2a:	f043 0208 	orr.w	r2, r3, #8
    4e2e:	687b      	ldr	r3, [r7, #4]
    4e30:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4e32:	bf00      	nop
    4e34:	370c      	adds	r7, #12
    4e36:	46bd      	mov	sp, r7
    4e38:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e3c:	4770      	bx	lr

00004e3e <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    4e3e:	b480      	push	{r7}
    4e40:	b083      	sub	sp, #12
    4e42:	af00      	add	r7, sp, #0
    4e44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	6a1b      	ldr	r3, [r3, #32]
    4e4a:	f043 0220 	orr.w	r2, r3, #32
    4e4e:	687b      	ldr	r3, [r7, #4]
    4e50:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4e52:	bf00      	nop
    4e54:	370c      	adds	r7, #12
    4e56:	46bd      	mov	sp, r7
    4e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e5c:	4770      	bx	lr

00004e5e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    4e5e:	b480      	push	{r7}
    4e60:	b083      	sub	sp, #12
    4e62:	af00      	add	r7, sp, #0
    4e64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    4e66:	687b      	ldr	r3, [r7, #4]
    4e68:	6a1b      	ldr	r3, [r3, #32]
    4e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    4e6e:	687b      	ldr	r3, [r7, #4]
    4e70:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    4e72:	bf00      	nop
    4e74:	370c      	adds	r7, #12
    4e76:	46bd      	mov	sp, r7
    4e78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e7c:	4770      	bx	lr

00004e7e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    4e7e:	b480      	push	{r7}
    4e80:	b085      	sub	sp, #20
    4e82:	af00      	add	r7, sp, #0
    4e84:	60f8      	str	r0, [r7, #12]
    4e86:	460b      	mov	r3, r1
    4e88:	607a      	str	r2, [r7, #4]
    4e8a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4e8c:	7afb      	ldrb	r3, [r7, #11]
    4e8e:	68fa      	ldr	r2, [r7, #12]
    4e90:	01db      	lsls	r3, r3, #7
    4e92:	4413      	add	r3, r2
    4e94:	3308      	adds	r3, #8
    4e96:	687a      	ldr	r2, [r7, #4]
    4e98:	601a      	str	r2, [r3, #0]
}
    4e9a:	bf00      	nop
    4e9c:	3714      	adds	r7, #20
    4e9e:	46bd      	mov	sp, r7
    4ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ea4:	4770      	bx	lr

00004ea6 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    4ea6:	b480      	push	{r7}
    4ea8:	b085      	sub	sp, #20
    4eaa:	af00      	add	r7, sp, #0
    4eac:	60f8      	str	r0, [r7, #12]
    4eae:	460b      	mov	r3, r1
    4eb0:	607a      	str	r2, [r7, #4]
    4eb2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4eb4:	7afb      	ldrb	r3, [r7, #11]
    4eb6:	68fa      	ldr	r2, [r7, #12]
    4eb8:	01db      	lsls	r3, r3, #7
    4eba:	4413      	add	r3, r2
    4ebc:	3304      	adds	r3, #4
    4ebe:	687a      	ldr	r2, [r7, #4]
    4ec0:	601a      	str	r2, [r3, #0]
}
    4ec2:	bf00      	nop
    4ec4:	3714      	adds	r7, #20
    4ec6:	46bd      	mov	sp, r7
    4ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ecc:	4770      	bx	lr

00004ece <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4ece:	b480      	push	{r7}
    4ed0:	b085      	sub	sp, #20
    4ed2:	af00      	add	r7, sp, #0
    4ed4:	60f8      	str	r0, [r7, #12]
    4ed6:	460b      	mov	r3, r1
    4ed8:	607a      	str	r2, [r7, #4]
    4eda:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4edc:	7afb      	ldrb	r3, [r7, #11]
    4ede:	68fa      	ldr	r2, [r7, #12]
    4ee0:	01db      	lsls	r3, r3, #7
    4ee2:	4413      	add	r3, r2
    4ee4:	3318      	adds	r3, #24
    4ee6:	687a      	ldr	r2, [r7, #4]
    4ee8:	601a      	str	r2, [r3, #0]
}
    4eea:	bf00      	nop
    4eec:	3714      	adds	r7, #20
    4eee:	46bd      	mov	sp, r7
    4ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ef4:	4770      	bx	lr

00004ef6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4ef6:	b480      	push	{r7}
    4ef8:	b085      	sub	sp, #20
    4efa:	af00      	add	r7, sp, #0
    4efc:	60f8      	str	r0, [r7, #12]
    4efe:	460b      	mov	r3, r1
    4f00:	607a      	str	r2, [r7, #4]
    4f02:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f04:	7afb      	ldrb	r3, [r7, #11]
    4f06:	68fa      	ldr	r2, [r7, #12]
    4f08:	01db      	lsls	r3, r3, #7
    4f0a:	4413      	add	r3, r2
    4f0c:	3314      	adds	r3, #20
    4f0e:	687a      	ldr	r2, [r7, #4]
    4f10:	601a      	str	r2, [r3, #0]
}
    4f12:	bf00      	nop
    4f14:	3714      	adds	r7, #20
    4f16:	46bd      	mov	sp, r7
    4f18:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f1c:	4770      	bx	lr

00004f1e <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    4f1e:	b480      	push	{r7}
    4f20:	b085      	sub	sp, #20
    4f22:	af00      	add	r7, sp, #0
    4f24:	6078      	str	r0, [r7, #4]
    4f26:	4608      	mov	r0, r1
    4f28:	4611      	mov	r1, r2
    4f2a:	461a      	mov	r2, r3
    4f2c:	4603      	mov	r3, r0
    4f2e:	70fb      	strb	r3, [r7, #3]
    4f30:	460b      	mov	r3, r1
    4f32:	70bb      	strb	r3, [r7, #2]
    4f34:	4613      	mov	r3, r2
    4f36:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4f38:	78fa      	ldrb	r2, [r7, #3]
    4f3a:	78bb      	ldrb	r3, [r7, #2]
    4f3c:	6879      	ldr	r1, [r7, #4]
    4f3e:	01d2      	lsls	r2, r2, #7
    4f40:	440a      	add	r2, r1
    4f42:	4413      	add	r3, r2
    4f44:	3330      	adds	r3, #48	; 0x30
    4f46:	781b      	ldrb	r3, [r3, #0]
    4f48:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4f4a:	7bfb      	ldrb	r3, [r7, #15]
    4f4c:	f023 030f 	bic.w	r3, r3, #15
    4f50:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    4f52:	787b      	ldrb	r3, [r7, #1]
    4f54:	f003 030f 	and.w	r3, r3, #15
    4f58:	b2da      	uxtb	r2, r3
    4f5a:	7bfb      	ldrb	r3, [r7, #15]
    4f5c:	4313      	orrs	r3, r2
    4f5e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4f60:	78fa      	ldrb	r2, [r7, #3]
    4f62:	78bb      	ldrb	r3, [r7, #2]
    4f64:	6879      	ldr	r1, [r7, #4]
    4f66:	01d2      	lsls	r2, r2, #7
    4f68:	440a      	add	r2, r1
    4f6a:	4413      	add	r3, r2
    4f6c:	3330      	adds	r3, #48	; 0x30
    4f6e:	7bfa      	ldrb	r2, [r7, #15]
    4f70:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4f72:	bf00      	nop
    4f74:	3714      	adds	r7, #20
    4f76:	46bd      	mov	sp, r7
    4f78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f7c:	4770      	bx	lr

00004f7e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    4f7e:	b480      	push	{r7}
    4f80:	b085      	sub	sp, #20
    4f82:	af00      	add	r7, sp, #0
    4f84:	6078      	str	r0, [r7, #4]
    4f86:	4608      	mov	r0, r1
    4f88:	4611      	mov	r1, r2
    4f8a:	461a      	mov	r2, r3
    4f8c:	4603      	mov	r3, r0
    4f8e:	70fb      	strb	r3, [r7, #3]
    4f90:	460b      	mov	r3, r1
    4f92:	70bb      	strb	r3, [r7, #2]
    4f94:	4613      	mov	r3, r2
    4f96:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4f98:	78fa      	ldrb	r2, [r7, #3]
    4f9a:	78bb      	ldrb	r3, [r7, #2]
    4f9c:	6879      	ldr	r1, [r7, #4]
    4f9e:	01d2      	lsls	r2, r2, #7
    4fa0:	440a      	add	r2, r1
    4fa2:	4413      	add	r3, r2
    4fa4:	3330      	adds	r3, #48	; 0x30
    4fa6:	781b      	ldrb	r3, [r3, #0]
    4fa8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4faa:	7bfb      	ldrb	r3, [r7, #15]
    4fac:	f003 030f 	and.w	r3, r3, #15
    4fb0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    4fb2:	787b      	ldrb	r3, [r7, #1]
    4fb4:	011b      	lsls	r3, r3, #4
    4fb6:	b2da      	uxtb	r2, r3
    4fb8:	7bfb      	ldrb	r3, [r7, #15]
    4fba:	4313      	orrs	r3, r2
    4fbc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4fbe:	78fa      	ldrb	r2, [r7, #3]
    4fc0:	78bb      	ldrb	r3, [r7, #2]
    4fc2:	6879      	ldr	r1, [r7, #4]
    4fc4:	01d2      	lsls	r2, r2, #7
    4fc6:	440a      	add	r2, r1
    4fc8:	4413      	add	r3, r2
    4fca:	3330      	adds	r3, #48	; 0x30
    4fcc:	7bfa      	ldrb	r2, [r7, #15]
    4fce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4fd0:	bf00      	nop
    4fd2:	3714      	adds	r7, #20
    4fd4:	46bd      	mov	sp, r7
    4fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fda:	4770      	bx	lr

00004fdc <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    4fdc:	b480      	push	{r7}
    4fde:	b085      	sub	sp, #20
    4fe0:	af00      	add	r7, sp, #0
    4fe2:	6078      	str	r0, [r7, #4]
    4fe4:	4608      	mov	r0, r1
    4fe6:	4611      	mov	r1, r2
    4fe8:	461a      	mov	r2, r3
    4fea:	4603      	mov	r3, r0
    4fec:	70fb      	strb	r3, [r7, #3]
    4fee:	460b      	mov	r3, r1
    4ff0:	70bb      	strb	r3, [r7, #2]
    4ff2:	4613      	mov	r3, r2
    4ff4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ff6:	78fa      	ldrb	r2, [r7, #3]
    4ff8:	78bb      	ldrb	r3, [r7, #2]
    4ffa:	6879      	ldr	r1, [r7, #4]
    4ffc:	01d2      	lsls	r2, r2, #7
    4ffe:	440a      	add	r2, r1
    5000:	4413      	add	r3, r2
    5002:	3340      	adds	r3, #64	; 0x40
    5004:	781b      	ldrb	r3, [r3, #0]
    5006:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    5008:	7bfb      	ldrb	r3, [r7, #15]
    500a:	f023 0301 	bic.w	r3, r3, #1
    500e:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    5010:	787a      	ldrb	r2, [r7, #1]
    5012:	7bfb      	ldrb	r3, [r7, #15]
    5014:	4313      	orrs	r3, r2
    5016:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5018:	78fa      	ldrb	r2, [r7, #3]
    501a:	78bb      	ldrb	r3, [r7, #2]
    501c:	6879      	ldr	r1, [r7, #4]
    501e:	01d2      	lsls	r2, r2, #7
    5020:	440a      	add	r2, r1
    5022:	4413      	add	r3, r2
    5024:	3340      	adds	r3, #64	; 0x40
    5026:	7bfa      	ldrb	r2, [r7, #15]
    5028:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    502a:	bf00      	nop
    502c:	3714      	adds	r7, #20
    502e:	46bd      	mov	sp, r7
    5030:	f85d 7b04 	ldr.w	r7, [sp], #4
    5034:	4770      	bx	lr

00005036 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    5036:	b490      	push	{r4, r7}
    5038:	b082      	sub	sp, #8
    503a:	af00      	add	r7, sp, #0
    503c:	6078      	str	r0, [r7, #4]
    503e:	460b      	mov	r3, r1
    5040:	70fb      	strb	r3, [r7, #3]
    5042:	4613      	mov	r3, r2
    5044:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    5046:	78fa      	ldrb	r2, [r7, #3]
    5048:	78bb      	ldrb	r3, [r7, #2]
    504a:	78f8      	ldrb	r0, [r7, #3]
    504c:	78b9      	ldrb	r1, [r7, #2]
    504e:	687c      	ldr	r4, [r7, #4]
    5050:	01c0      	lsls	r0, r0, #7
    5052:	4420      	add	r0, r4
    5054:	4401      	add	r1, r0
    5056:	3140      	adds	r1, #64	; 0x40
    5058:	7809      	ldrb	r1, [r1, #0]
    505a:	b2c9      	uxtb	r1, r1
    505c:	f041 0104 	orr.w	r1, r1, #4
    5060:	b2c8      	uxtb	r0, r1
    5062:	6879      	ldr	r1, [r7, #4]
    5064:	01d2      	lsls	r2, r2, #7
    5066:	440a      	add	r2, r1
    5068:	4413      	add	r3, r2
    506a:	3340      	adds	r3, #64	; 0x40
    506c:	4602      	mov	r2, r0
    506e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    5070:	bf00      	nop
    5072:	3708      	adds	r7, #8
    5074:	46bd      	mov	sp, r7
    5076:	bc90      	pop	{r4, r7}
    5078:	4770      	bx	lr

0000507a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    507a:	b490      	push	{r4, r7}
    507c:	b082      	sub	sp, #8
    507e:	af00      	add	r7, sp, #0
    5080:	6078      	str	r0, [r7, #4]
    5082:	460b      	mov	r3, r1
    5084:	70fb      	strb	r3, [r7, #3]
    5086:	4613      	mov	r3, r2
    5088:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    508a:	78fa      	ldrb	r2, [r7, #3]
    508c:	78bb      	ldrb	r3, [r7, #2]
    508e:	78f8      	ldrb	r0, [r7, #3]
    5090:	78b9      	ldrb	r1, [r7, #2]
    5092:	687c      	ldr	r4, [r7, #4]
    5094:	01c0      	lsls	r0, r0, #7
    5096:	4420      	add	r0, r4
    5098:	4401      	add	r1, r0
    509a:	3140      	adds	r1, #64	; 0x40
    509c:	7809      	ldrb	r1, [r1, #0]
    509e:	b2c9      	uxtb	r1, r1
    50a0:	f021 0104 	bic.w	r1, r1, #4
    50a4:	b2c8      	uxtb	r0, r1
    50a6:	6879      	ldr	r1, [r7, #4]
    50a8:	01d2      	lsls	r2, r2, #7
    50aa:	440a      	add	r2, r1
    50ac:	4413      	add	r3, r2
    50ae:	3340      	adds	r3, #64	; 0x40
    50b0:	4602      	mov	r2, r0
    50b2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    50b4:	bf00      	nop
    50b6:	3708      	adds	r7, #8
    50b8:	46bd      	mov	sp, r7
    50ba:	bc90      	pop	{r4, r7}
    50bc:	4770      	bx	lr

000050be <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    50be:	b480      	push	{r7}
    50c0:	b085      	sub	sp, #20
    50c2:	af00      	add	r7, sp, #0
    50c4:	60f8      	str	r0, [r7, #12]
    50c6:	460b      	mov	r3, r1
    50c8:	607a      	str	r2, [r7, #4]
    50ca:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    50cc:	7afb      	ldrb	r3, [r7, #11]
    50ce:	68fa      	ldr	r2, [r7, #12]
    50d0:	01db      	lsls	r3, r3, #7
    50d2:	4413      	add	r3, r2
    50d4:	3328      	adds	r3, #40	; 0x28
    50d6:	687a      	ldr	r2, [r7, #4]
    50d8:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    50da:	bf00      	nop
    50dc:	3714      	adds	r7, #20
    50de:	46bd      	mov	sp, r7
    50e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    50e4:	4770      	bx	lr
	...

000050e8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    50e8:	b580      	push	{r7, lr}
    50ea:	b082      	sub	sp, #8
    50ec:	af00      	add	r7, sp, #0
    50ee:	4603      	mov	r3, r0
    50f0:	6039      	str	r1, [r7, #0]
    50f2:	71fb      	strb	r3, [r7, #7]
    50f4:	4613      	mov	r3, r2
    50f6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    50f8:	79bb      	ldrb	r3, [r7, #6]
    50fa:	2b01      	cmp	r3, #1
    50fc:	d01c      	beq.n	5138 <_gpio_set_direction+0x50>
    50fe:	2b02      	cmp	r3, #2
    5100:	d037      	beq.n	5172 <_gpio_set_direction+0x8a>
    5102:	2b00      	cmp	r3, #0
    5104:	d14e      	bne.n	51a4 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    5106:	79fb      	ldrb	r3, [r7, #7]
    5108:	683a      	ldr	r2, [r7, #0]
    510a:	4619      	mov	r1, r3
    510c:	482a      	ldr	r0, [pc, #168]	; (51b8 <_gpio_set_direction+0xd0>)
    510e:	4b2b      	ldr	r3, [pc, #172]	; (51bc <_gpio_set_direction+0xd4>)
    5110:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    5112:	683b      	ldr	r3, [r7, #0]
    5114:	b29b      	uxth	r3, r3
    5116:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    511a:	79fb      	ldrb	r3, [r7, #7]
    511c:	4619      	mov	r1, r3
    511e:	4826      	ldr	r0, [pc, #152]	; (51b8 <_gpio_set_direction+0xd0>)
    5120:	4b27      	ldr	r3, [pc, #156]	; (51c0 <_gpio_set_direction+0xd8>)
    5122:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    5124:	683b      	ldr	r3, [r7, #0]
    5126:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    5128:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    512c:	79fb      	ldrb	r3, [r7, #7]
    512e:	4619      	mov	r1, r3
    5130:	4821      	ldr	r0, [pc, #132]	; (51b8 <_gpio_set_direction+0xd0>)
    5132:	4b23      	ldr	r3, [pc, #140]	; (51c0 <_gpio_set_direction+0xd8>)
    5134:	4798      	blx	r3
		break;
    5136:	e03a      	b.n	51ae <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    5138:	79fb      	ldrb	r3, [r7, #7]
    513a:	683a      	ldr	r2, [r7, #0]
    513c:	4619      	mov	r1, r3
    513e:	481e      	ldr	r0, [pc, #120]	; (51b8 <_gpio_set_direction+0xd0>)
    5140:	4b1e      	ldr	r3, [pc, #120]	; (51bc <_gpio_set_direction+0xd4>)
    5142:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    5144:	683b      	ldr	r3, [r7, #0]
    5146:	b29b      	uxth	r3, r3
    5148:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    514c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5150:	79f9      	ldrb	r1, [r7, #7]
    5152:	461a      	mov	r2, r3
    5154:	4818      	ldr	r0, [pc, #96]	; (51b8 <_gpio_set_direction+0xd0>)
    5156:	4b1a      	ldr	r3, [pc, #104]	; (51c0 <_gpio_set_direction+0xd8>)
    5158:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    515a:	683b      	ldr	r3, [r7, #0]
    515c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    515e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    5162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    5166:	79f9      	ldrb	r1, [r7, #7]
    5168:	461a      	mov	r2, r3
    516a:	4813      	ldr	r0, [pc, #76]	; (51b8 <_gpio_set_direction+0xd0>)
    516c:	4b14      	ldr	r3, [pc, #80]	; (51c0 <_gpio_set_direction+0xd8>)
    516e:	4798      	blx	r3
		break;
    5170:	e01d      	b.n	51ae <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    5172:	79fb      	ldrb	r3, [r7, #7]
    5174:	683a      	ldr	r2, [r7, #0]
    5176:	4619      	mov	r1, r3
    5178:	480f      	ldr	r0, [pc, #60]	; (51b8 <_gpio_set_direction+0xd0>)
    517a:	4b12      	ldr	r3, [pc, #72]	; (51c4 <_gpio_set_direction+0xdc>)
    517c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    517e:	683b      	ldr	r3, [r7, #0]
    5180:	b29b      	uxth	r3, r3
    5182:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    5186:	79fb      	ldrb	r3, [r7, #7]
    5188:	4619      	mov	r1, r3
    518a:	480b      	ldr	r0, [pc, #44]	; (51b8 <_gpio_set_direction+0xd0>)
    518c:	4b0c      	ldr	r3, [pc, #48]	; (51c0 <_gpio_set_direction+0xd8>)
    518e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    5190:	683b      	ldr	r3, [r7, #0]
    5192:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    5194:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    5198:	79fb      	ldrb	r3, [r7, #7]
    519a:	4619      	mov	r1, r3
    519c:	4806      	ldr	r0, [pc, #24]	; (51b8 <_gpio_set_direction+0xd0>)
    519e:	4b08      	ldr	r3, [pc, #32]	; (51c0 <_gpio_set_direction+0xd8>)
    51a0:	4798      	blx	r3
		break;
    51a2:	e004      	b.n	51ae <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    51a4:	2246      	movs	r2, #70	; 0x46
    51a6:	4908      	ldr	r1, [pc, #32]	; (51c8 <_gpio_set_direction+0xe0>)
    51a8:	2000      	movs	r0, #0
    51aa:	4b08      	ldr	r3, [pc, #32]	; (51cc <_gpio_set_direction+0xe4>)
    51ac:	4798      	blx	r3
	}
}
    51ae:	bf00      	nop
    51b0:	3708      	adds	r7, #8
    51b2:	46bd      	mov	sp, r7
    51b4:	bd80      	pop	{r7, pc}
    51b6:	bf00      	nop
    51b8:	41008000 	.word	0x41008000
    51bc:	00004ea7 	.word	0x00004ea7
    51c0:	000050bf 	.word	0x000050bf
    51c4:	00004e7f 	.word	0x00004e7f
    51c8:	000209cc 	.word	0x000209cc
    51cc:	00008145 	.word	0x00008145

000051d0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    51d0:	b580      	push	{r7, lr}
    51d2:	b082      	sub	sp, #8
    51d4:	af00      	add	r7, sp, #0
    51d6:	4603      	mov	r3, r0
    51d8:	6039      	str	r1, [r7, #0]
    51da:	71fb      	strb	r3, [r7, #7]
    51dc:	4613      	mov	r3, r2
    51de:	71bb      	strb	r3, [r7, #6]
	if (level) {
    51e0:	79bb      	ldrb	r3, [r7, #6]
    51e2:	2b00      	cmp	r3, #0
    51e4:	d006      	beq.n	51f4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    51e6:	79fb      	ldrb	r3, [r7, #7]
    51e8:	683a      	ldr	r2, [r7, #0]
    51ea:	4619      	mov	r1, r3
    51ec:	4806      	ldr	r0, [pc, #24]	; (5208 <_gpio_set_level+0x38>)
    51ee:	4b07      	ldr	r3, [pc, #28]	; (520c <_gpio_set_level+0x3c>)
    51f0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    51f2:	e005      	b.n	5200 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    51f4:	79fb      	ldrb	r3, [r7, #7]
    51f6:	683a      	ldr	r2, [r7, #0]
    51f8:	4619      	mov	r1, r3
    51fa:	4803      	ldr	r0, [pc, #12]	; (5208 <_gpio_set_level+0x38>)
    51fc:	4b04      	ldr	r3, [pc, #16]	; (5210 <_gpio_set_level+0x40>)
    51fe:	4798      	blx	r3
}
    5200:	bf00      	nop
    5202:	3708      	adds	r7, #8
    5204:	46bd      	mov	sp, r7
    5206:	bd80      	pop	{r7, pc}
    5208:	41008000 	.word	0x41008000
    520c:	00004ecf 	.word	0x00004ecf
    5210:	00004ef7 	.word	0x00004ef7

00005214 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    5214:	b580      	push	{r7, lr}
    5216:	b082      	sub	sp, #8
    5218:	af00      	add	r7, sp, #0
    521a:	4603      	mov	r3, r0
    521c:	71fb      	strb	r3, [r7, #7]
    521e:	460b      	mov	r3, r1
    5220:	71bb      	strb	r3, [r7, #6]
    5222:	4613      	mov	r3, r2
    5224:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    5226:	797b      	ldrb	r3, [r7, #5]
    5228:	2b01      	cmp	r3, #1
    522a:	d00a      	beq.n	5242 <_gpio_set_pin_pull_mode+0x2e>
    522c:	2b02      	cmp	r3, #2
    522e:	d01f      	beq.n	5270 <_gpio_set_pin_pull_mode+0x5c>
    5230:	2b00      	cmp	r3, #0
    5232:	d134      	bne.n	529e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    5234:	79ba      	ldrb	r2, [r7, #6]
    5236:	79fb      	ldrb	r3, [r7, #7]
    5238:	4619      	mov	r1, r3
    523a:	481e      	ldr	r0, [pc, #120]	; (52b4 <_gpio_set_pin_pull_mode+0xa0>)
    523c:	4b1e      	ldr	r3, [pc, #120]	; (52b8 <_gpio_set_pin_pull_mode+0xa4>)
    523e:	4798      	blx	r3
		break;
    5240:	e033      	b.n	52aa <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    5242:	79bb      	ldrb	r3, [r7, #6]
    5244:	2201      	movs	r2, #1
    5246:	409a      	lsls	r2, r3
    5248:	79fb      	ldrb	r3, [r7, #7]
    524a:	4619      	mov	r1, r3
    524c:	4819      	ldr	r0, [pc, #100]	; (52b4 <_gpio_set_pin_pull_mode+0xa0>)
    524e:	4b1b      	ldr	r3, [pc, #108]	; (52bc <_gpio_set_pin_pull_mode+0xa8>)
    5250:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    5252:	79ba      	ldrb	r2, [r7, #6]
    5254:	79fb      	ldrb	r3, [r7, #7]
    5256:	4619      	mov	r1, r3
    5258:	4816      	ldr	r0, [pc, #88]	; (52b4 <_gpio_set_pin_pull_mode+0xa0>)
    525a:	4b19      	ldr	r3, [pc, #100]	; (52c0 <_gpio_set_pin_pull_mode+0xac>)
    525c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    525e:	79bb      	ldrb	r3, [r7, #6]
    5260:	2201      	movs	r2, #1
    5262:	409a      	lsls	r2, r3
    5264:	79fb      	ldrb	r3, [r7, #7]
    5266:	4619      	mov	r1, r3
    5268:	4812      	ldr	r0, [pc, #72]	; (52b4 <_gpio_set_pin_pull_mode+0xa0>)
    526a:	4b16      	ldr	r3, [pc, #88]	; (52c4 <_gpio_set_pin_pull_mode+0xb0>)
    526c:	4798      	blx	r3
		break;
    526e:	e01c      	b.n	52aa <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    5270:	79bb      	ldrb	r3, [r7, #6]
    5272:	2201      	movs	r2, #1
    5274:	409a      	lsls	r2, r3
    5276:	79fb      	ldrb	r3, [r7, #7]
    5278:	4619      	mov	r1, r3
    527a:	480e      	ldr	r0, [pc, #56]	; (52b4 <_gpio_set_pin_pull_mode+0xa0>)
    527c:	4b0f      	ldr	r3, [pc, #60]	; (52bc <_gpio_set_pin_pull_mode+0xa8>)
    527e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    5280:	79ba      	ldrb	r2, [r7, #6]
    5282:	79fb      	ldrb	r3, [r7, #7]
    5284:	4619      	mov	r1, r3
    5286:	480b      	ldr	r0, [pc, #44]	; (52b4 <_gpio_set_pin_pull_mode+0xa0>)
    5288:	4b0d      	ldr	r3, [pc, #52]	; (52c0 <_gpio_set_pin_pull_mode+0xac>)
    528a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    528c:	79bb      	ldrb	r3, [r7, #6]
    528e:	2201      	movs	r2, #1
    5290:	409a      	lsls	r2, r3
    5292:	79fb      	ldrb	r3, [r7, #7]
    5294:	4619      	mov	r1, r3
    5296:	4807      	ldr	r0, [pc, #28]	; (52b4 <_gpio_set_pin_pull_mode+0xa0>)
    5298:	4b0b      	ldr	r3, [pc, #44]	; (52c8 <_gpio_set_pin_pull_mode+0xb4>)
    529a:	4798      	blx	r3
		break;
    529c:	e005      	b.n	52aa <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    529e:	2289      	movs	r2, #137	; 0x89
    52a0:	490a      	ldr	r1, [pc, #40]	; (52cc <_gpio_set_pin_pull_mode+0xb8>)
    52a2:	2000      	movs	r0, #0
    52a4:	4b0a      	ldr	r3, [pc, #40]	; (52d0 <_gpio_set_pin_pull_mode+0xbc>)
    52a6:	4798      	blx	r3
		break;
    52a8:	bf00      	nop
	}
}
    52aa:	bf00      	nop
    52ac:	3708      	adds	r7, #8
    52ae:	46bd      	mov	sp, r7
    52b0:	bd80      	pop	{r7, pc}
    52b2:	bf00      	nop
    52b4:	41008000 	.word	0x41008000
    52b8:	0000507b 	.word	0x0000507b
    52bc:	00004ea7 	.word	0x00004ea7
    52c0:	00005037 	.word	0x00005037
    52c4:	00004ecf 	.word	0x00004ecf
    52c8:	00004ef7 	.word	0x00004ef7
    52cc:	000209cc 	.word	0x000209cc
    52d0:	00008145 	.word	0x00008145

000052d4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    52d4:	b590      	push	{r4, r7, lr}
    52d6:	b085      	sub	sp, #20
    52d8:	af00      	add	r7, sp, #0
    52da:	6078      	str	r0, [r7, #4]
    52dc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	095b      	lsrs	r3, r3, #5
    52e2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    52e4:	687b      	ldr	r3, [r7, #4]
    52e6:	b2db      	uxtb	r3, r3
    52e8:	f003 031f 	and.w	r3, r3, #31
    52ec:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    52ee:	683b      	ldr	r3, [r7, #0]
    52f0:	f1b3 3fff 	cmp.w	r3, #4294967295
    52f4:	d106      	bne.n	5304 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    52f6:	7bba      	ldrb	r2, [r7, #14]
    52f8:	7bf9      	ldrb	r1, [r7, #15]
    52fa:	2300      	movs	r3, #0
    52fc:	4812      	ldr	r0, [pc, #72]	; (5348 <_gpio_set_pin_function+0x74>)
    52fe:	4c13      	ldr	r4, [pc, #76]	; (534c <_gpio_set_pin_function+0x78>)
    5300:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    5302:	e01d      	b.n	5340 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    5304:	7bba      	ldrb	r2, [r7, #14]
    5306:	7bf9      	ldrb	r1, [r7, #15]
    5308:	2301      	movs	r3, #1
    530a:	480f      	ldr	r0, [pc, #60]	; (5348 <_gpio_set_pin_function+0x74>)
    530c:	4c0f      	ldr	r4, [pc, #60]	; (534c <_gpio_set_pin_function+0x78>)
    530e:	47a0      	blx	r4
		if (pin & 1) {
    5310:	7bbb      	ldrb	r3, [r7, #14]
    5312:	f003 0301 	and.w	r3, r3, #1
    5316:	2b00      	cmp	r3, #0
    5318:	d009      	beq.n	532e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    531a:	7bbb      	ldrb	r3, [r7, #14]
    531c:	085b      	lsrs	r3, r3, #1
    531e:	b2da      	uxtb	r2, r3
    5320:	683b      	ldr	r3, [r7, #0]
    5322:	b2db      	uxtb	r3, r3
    5324:	7bf9      	ldrb	r1, [r7, #15]
    5326:	4808      	ldr	r0, [pc, #32]	; (5348 <_gpio_set_pin_function+0x74>)
    5328:	4c09      	ldr	r4, [pc, #36]	; (5350 <_gpio_set_pin_function+0x7c>)
    532a:	47a0      	blx	r4
}
    532c:	e008      	b.n	5340 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    532e:	7bbb      	ldrb	r3, [r7, #14]
    5330:	085b      	lsrs	r3, r3, #1
    5332:	b2da      	uxtb	r2, r3
    5334:	683b      	ldr	r3, [r7, #0]
    5336:	b2db      	uxtb	r3, r3
    5338:	7bf9      	ldrb	r1, [r7, #15]
    533a:	4803      	ldr	r0, [pc, #12]	; (5348 <_gpio_set_pin_function+0x74>)
    533c:	4c05      	ldr	r4, [pc, #20]	; (5354 <_gpio_set_pin_function+0x80>)
    533e:	47a0      	blx	r4
}
    5340:	bf00      	nop
    5342:	3714      	adds	r7, #20
    5344:	46bd      	mov	sp, r7
    5346:	bd90      	pop	{r4, r7, pc}
    5348:	41008000 	.word	0x41008000
    534c:	00004fdd 	.word	0x00004fdd
    5350:	00004f7f 	.word	0x00004f7f
    5354:	00004f1f 	.word	0x00004f1f

00005358 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    5358:	b580      	push	{r7, lr}
    535a:	b082      	sub	sp, #8
    535c:	af00      	add	r7, sp, #0
    535e:	4603      	mov	r3, r0
    5360:	460a      	mov	r2, r1
    5362:	71fb      	strb	r3, [r7, #7]
    5364:	4613      	mov	r3, r2
    5366:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    5368:	79fb      	ldrb	r3, [r7, #7]
    536a:	095b      	lsrs	r3, r3, #5
    536c:	b2d8      	uxtb	r0, r3
    536e:	79fb      	ldrb	r3, [r7, #7]
    5370:	f003 031f 	and.w	r3, r3, #31
    5374:	b2db      	uxtb	r3, r3
    5376:	79ba      	ldrb	r2, [r7, #6]
    5378:	4619      	mov	r1, r3
    537a:	4b03      	ldr	r3, [pc, #12]	; (5388 <gpio_set_pin_pull_mode+0x30>)
    537c:	4798      	blx	r3
}
    537e:	bf00      	nop
    5380:	3708      	adds	r7, #8
    5382:	46bd      	mov	sp, r7
    5384:	bd80      	pop	{r7, pc}
    5386:	bf00      	nop
    5388:	00005215 	.word	0x00005215

0000538c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    538c:	b580      	push	{r7, lr}
    538e:	b082      	sub	sp, #8
    5390:	af00      	add	r7, sp, #0
    5392:	6078      	str	r0, [r7, #4]
    5394:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    5396:	6839      	ldr	r1, [r7, #0]
    5398:	6878      	ldr	r0, [r7, #4]
    539a:	4b03      	ldr	r3, [pc, #12]	; (53a8 <gpio_set_pin_function+0x1c>)
    539c:	4798      	blx	r3
}
    539e:	bf00      	nop
    53a0:	3708      	adds	r7, #8
    53a2:	46bd      	mov	sp, r7
    53a4:	bd80      	pop	{r7, pc}
    53a6:	bf00      	nop
    53a8:	000052d5 	.word	0x000052d5

000053ac <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    53ac:	b580      	push	{r7, lr}
    53ae:	b082      	sub	sp, #8
    53b0:	af00      	add	r7, sp, #0
    53b2:	4603      	mov	r3, r0
    53b4:	460a      	mov	r2, r1
    53b6:	71fb      	strb	r3, [r7, #7]
    53b8:	4613      	mov	r3, r2
    53ba:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    53bc:	79fb      	ldrb	r3, [r7, #7]
    53be:	095b      	lsrs	r3, r3, #5
    53c0:	b2d8      	uxtb	r0, r3
    53c2:	79fb      	ldrb	r3, [r7, #7]
    53c4:	f003 031f 	and.w	r3, r3, #31
    53c8:	2201      	movs	r2, #1
    53ca:	fa02 f303 	lsl.w	r3, r2, r3
    53ce:	79ba      	ldrb	r2, [r7, #6]
    53d0:	4619      	mov	r1, r3
    53d2:	4b03      	ldr	r3, [pc, #12]	; (53e0 <gpio_set_pin_direction+0x34>)
    53d4:	4798      	blx	r3
}
    53d6:	bf00      	nop
    53d8:	3708      	adds	r7, #8
    53da:	46bd      	mov	sp, r7
    53dc:	bd80      	pop	{r7, pc}
    53de:	bf00      	nop
    53e0:	000050e9 	.word	0x000050e9

000053e4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    53e4:	b580      	push	{r7, lr}
    53e6:	b082      	sub	sp, #8
    53e8:	af00      	add	r7, sp, #0
    53ea:	4603      	mov	r3, r0
    53ec:	460a      	mov	r2, r1
    53ee:	71fb      	strb	r3, [r7, #7]
    53f0:	4613      	mov	r3, r2
    53f2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    53f4:	79fb      	ldrb	r3, [r7, #7]
    53f6:	095b      	lsrs	r3, r3, #5
    53f8:	b2d8      	uxtb	r0, r3
    53fa:	79fb      	ldrb	r3, [r7, #7]
    53fc:	f003 031f 	and.w	r3, r3, #31
    5400:	2201      	movs	r2, #1
    5402:	fa02 f303 	lsl.w	r3, r2, r3
    5406:	79ba      	ldrb	r2, [r7, #6]
    5408:	4619      	mov	r1, r3
    540a:	4b03      	ldr	r3, [pc, #12]	; (5418 <gpio_set_pin_level+0x34>)
    540c:	4798      	blx	r3
}
    540e:	bf00      	nop
    5410:	3708      	adds	r7, #8
    5412:	46bd      	mov	sp, r7
    5414:	bd80      	pop	{r7, pc}
    5416:	bf00      	nop
    5418:	000051d1 	.word	0x000051d1

0000541c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    541c:	b580      	push	{r7, lr}
    541e:	af00      	add	r7, sp, #0
	_init_chip();
    5420:	4b01      	ldr	r3, [pc, #4]	; (5428 <init_mcu+0xc>)
    5422:	4798      	blx	r3
}
    5424:	bf00      	nop
    5426:	bd80      	pop	{r7, pc}
    5428:	00008d55 	.word	0x00008d55

0000542c <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    542c:	b580      	push	{r7, lr}
    542e:	b082      	sub	sp, #8
    5430:	af00      	add	r7, sp, #0
    5432:	6078      	str	r0, [r7, #4]
    5434:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    5436:	687b      	ldr	r3, [r7, #4]
    5438:	2b00      	cmp	r3, #0
    543a:	d004      	beq.n	5446 <wdt_init+0x1a>
    543c:	683b      	ldr	r3, [r7, #0]
    543e:	2b00      	cmp	r3, #0
    5440:	d001      	beq.n	5446 <wdt_init+0x1a>
    5442:	2301      	movs	r3, #1
    5444:	e000      	b.n	5448 <wdt_init+0x1c>
    5446:	2300      	movs	r3, #0
    5448:	f003 0301 	and.w	r3, r3, #1
    544c:	b2db      	uxtb	r3, r3
    544e:	2248      	movs	r2, #72	; 0x48
    5450:	4907      	ldr	r1, [pc, #28]	; (5470 <wdt_init+0x44>)
    5452:	4618      	mov	r0, r3
    5454:	4b07      	ldr	r3, [pc, #28]	; (5474 <wdt_init+0x48>)
    5456:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    5458:	687b      	ldr	r3, [r7, #4]
    545a:	683a      	ldr	r2, [r7, #0]
    545c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    545e:	687b      	ldr	r3, [r7, #4]
    5460:	4618      	mov	r0, r3
    5462:	4b05      	ldr	r3, [pc, #20]	; (5478 <wdt_init+0x4c>)
    5464:	4798      	blx	r3
    5466:	4603      	mov	r3, r0
}
    5468:	4618      	mov	r0, r3
    546a:	3708      	adds	r7, #8
    546c:	46bd      	mov	sp, r7
    546e:	bd80      	pop	{r7, pc}
    5470:	000209e8 	.word	0x000209e8
    5474:	00008145 	.word	0x00008145
    5478:	0001051d 	.word	0x0001051d

0000547c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    547c:	b580      	push	{r7, lr}
    547e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    5480:	4804      	ldr	r0, [pc, #16]	; (5494 <CRC_CALC_init+0x18>)
    5482:	4b05      	ldr	r3, [pc, #20]	; (5498 <CRC_CALC_init+0x1c>)
    5484:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    5486:	4905      	ldr	r1, [pc, #20]	; (549c <CRC_CALC_init+0x20>)
    5488:	4805      	ldr	r0, [pc, #20]	; (54a0 <CRC_CALC_init+0x24>)
    548a:	4b06      	ldr	r3, [pc, #24]	; (54a4 <CRC_CALC_init+0x28>)
    548c:	4798      	blx	r3
}
    548e:	bf00      	nop
    5490:	bd80      	pop	{r7, pc}
    5492:	bf00      	nop
    5494:	40000800 	.word	0x40000800
    5498:	00004cbf 	.word	0x00004cbf
    549c:	41002000 	.word	0x41002000
    54a0:	2000a94c 	.word	0x2000a94c
    54a4:	000066b9 	.word	0x000066b9

000054a8 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    54a8:	b580      	push	{r7, lr}
    54aa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    54ac:	2244      	movs	r2, #68	; 0x44
    54ae:	2104      	movs	r1, #4
    54b0:	4838      	ldr	r0, [pc, #224]	; (5594 <EXTERNAL_IRQ_0_init+0xec>)
    54b2:	4b39      	ldr	r3, [pc, #228]	; (5598 <EXTERNAL_IRQ_0_init+0xf0>)
    54b4:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    54b6:	4839      	ldr	r0, [pc, #228]	; (559c <EXTERNAL_IRQ_0_init+0xf4>)
    54b8:	4b39      	ldr	r3, [pc, #228]	; (55a0 <EXTERNAL_IRQ_0_init+0xf8>)
    54ba:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    54bc:	2101      	movs	r1, #1
    54be:	2040      	movs	r0, #64	; 0x40
    54c0:	4b38      	ldr	r3, [pc, #224]	; (55a4 <EXTERNAL_IRQ_0_init+0xfc>)
    54c2:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    54c4:	2100      	movs	r1, #0
    54c6:	2040      	movs	r0, #64	; 0x40
    54c8:	4b37      	ldr	r3, [pc, #220]	; (55a8 <EXTERNAL_IRQ_0_init+0x100>)
    54ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    54cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    54d0:	2040      	movs	r0, #64	; 0x40
    54d2:	4b36      	ldr	r3, [pc, #216]	; (55ac <EXTERNAL_IRQ_0_init+0x104>)
    54d4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    54d6:	2101      	movs	r1, #1
    54d8:	2003      	movs	r0, #3
    54da:	4b32      	ldr	r3, [pc, #200]	; (55a4 <EXTERNAL_IRQ_0_init+0xfc>)
    54dc:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    54de:	2102      	movs	r1, #2
    54e0:	2003      	movs	r0, #3
    54e2:	4b31      	ldr	r3, [pc, #196]	; (55a8 <EXTERNAL_IRQ_0_init+0x100>)
    54e4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    54e6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    54ea:	2003      	movs	r0, #3
    54ec:	4b2f      	ldr	r3, [pc, #188]	; (55ac <EXTERNAL_IRQ_0_init+0x104>)
    54ee:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    54f0:	2101      	movs	r1, #1
    54f2:	2004      	movs	r0, #4
    54f4:	4b2b      	ldr	r3, [pc, #172]	; (55a4 <EXTERNAL_IRQ_0_init+0xfc>)
    54f6:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    54f8:	2102      	movs	r1, #2
    54fa:	2004      	movs	r0, #4
    54fc:	4b2a      	ldr	r3, [pc, #168]	; (55a8 <EXTERNAL_IRQ_0_init+0x100>)
    54fe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    5500:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    5504:	2004      	movs	r0, #4
    5506:	4b29      	ldr	r3, [pc, #164]	; (55ac <EXTERNAL_IRQ_0_init+0x104>)
    5508:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    550a:	2101      	movs	r1, #1
    550c:	2005      	movs	r0, #5
    550e:	4b25      	ldr	r3, [pc, #148]	; (55a4 <EXTERNAL_IRQ_0_init+0xfc>)
    5510:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    5512:	2102      	movs	r1, #2
    5514:	2005      	movs	r0, #5
    5516:	4b24      	ldr	r3, [pc, #144]	; (55a8 <EXTERNAL_IRQ_0_init+0x100>)
    5518:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    551a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    551e:	2005      	movs	r0, #5
    5520:	4b22      	ldr	r3, [pc, #136]	; (55ac <EXTERNAL_IRQ_0_init+0x104>)
    5522:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    5524:	2101      	movs	r1, #1
    5526:	2056      	movs	r0, #86	; 0x56
    5528:	4b1e      	ldr	r3, [pc, #120]	; (55a4 <EXTERNAL_IRQ_0_init+0xfc>)
    552a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    552c:	2102      	movs	r1, #2
    552e:	2056      	movs	r0, #86	; 0x56
    5530:	4b1d      	ldr	r3, [pc, #116]	; (55a8 <EXTERNAL_IRQ_0_init+0x100>)
    5532:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    5534:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    5538:	2056      	movs	r0, #86	; 0x56
    553a:	4b1c      	ldr	r3, [pc, #112]	; (55ac <EXTERNAL_IRQ_0_init+0x104>)
    553c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    553e:	2101      	movs	r1, #1
    5540:	2057      	movs	r0, #87	; 0x57
    5542:	4b18      	ldr	r3, [pc, #96]	; (55a4 <EXTERNAL_IRQ_0_init+0xfc>)
    5544:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    5546:	2102      	movs	r1, #2
    5548:	2057      	movs	r0, #87	; 0x57
    554a:	4b17      	ldr	r3, [pc, #92]	; (55a8 <EXTERNAL_IRQ_0_init+0x100>)
    554c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    554e:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    5552:	2057      	movs	r0, #87	; 0x57
    5554:	4b15      	ldr	r3, [pc, #84]	; (55ac <EXTERNAL_IRQ_0_init+0x104>)
    5556:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    5558:	2101      	movs	r1, #1
    555a:	2028      	movs	r0, #40	; 0x28
    555c:	4b11      	ldr	r3, [pc, #68]	; (55a4 <EXTERNAL_IRQ_0_init+0xfc>)
    555e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    5560:	2100      	movs	r1, #0
    5562:	2028      	movs	r0, #40	; 0x28
    5564:	4b10      	ldr	r3, [pc, #64]	; (55a8 <EXTERNAL_IRQ_0_init+0x100>)
    5566:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    5568:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    556c:	2028      	movs	r0, #40	; 0x28
    556e:	4b0f      	ldr	r3, [pc, #60]	; (55ac <EXTERNAL_IRQ_0_init+0x104>)
    5570:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    5572:	2101      	movs	r1, #1
    5574:	2029      	movs	r0, #41	; 0x29
    5576:	4b0b      	ldr	r3, [pc, #44]	; (55a4 <EXTERNAL_IRQ_0_init+0xfc>)
    5578:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    557a:	2100      	movs	r1, #0
    557c:	2029      	movs	r0, #41	; 0x29
    557e:	4b0a      	ldr	r3, [pc, #40]	; (55a8 <EXTERNAL_IRQ_0_init+0x100>)
    5580:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    5582:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    5586:	2029      	movs	r0, #41	; 0x29
    5588:	4b08      	ldr	r3, [pc, #32]	; (55ac <EXTERNAL_IRQ_0_init+0x104>)
    558a:	4798      	blx	r3

	ext_irq_init();
    558c:	4b08      	ldr	r3, [pc, #32]	; (55b0 <EXTERNAL_IRQ_0_init+0x108>)
    558e:	4798      	blx	r3
}
    5590:	bf00      	nop
    5592:	bd80      	pop	{r7, pc}
    5594:	40001c00 	.word	0x40001c00
    5598:	00004b59 	.word	0x00004b59
    559c:	40000800 	.word	0x40000800
    55a0:	00004c3f 	.word	0x00004c3f
    55a4:	000053ad 	.word	0x000053ad
    55a8:	00005359 	.word	0x00005359
    55ac:	0000538d 	.word	0x0000538d
    55b0:	0000681d 	.word	0x0000681d

000055b4 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    55b4:	b580      	push	{r7, lr}
    55b6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    55b8:	2244      	movs	r2, #68	; 0x44
    55ba:	210b      	movs	r1, #11
    55bc:	4807      	ldr	r0, [pc, #28]	; (55dc <EVENT_SYSTEM_0_init+0x28>)
    55be:	4b08      	ldr	r3, [pc, #32]	; (55e0 <EVENT_SYSTEM_0_init+0x2c>)
    55c0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    55c2:	2244      	movs	r2, #68	; 0x44
    55c4:	210c      	movs	r1, #12
    55c6:	4805      	ldr	r0, [pc, #20]	; (55dc <EVENT_SYSTEM_0_init+0x28>)
    55c8:	4b05      	ldr	r3, [pc, #20]	; (55e0 <EVENT_SYSTEM_0_init+0x2c>)
    55ca:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    55cc:	4805      	ldr	r0, [pc, #20]	; (55e4 <EVENT_SYSTEM_0_init+0x30>)
    55ce:	4b06      	ldr	r3, [pc, #24]	; (55e8 <EVENT_SYSTEM_0_init+0x34>)
    55d0:	4798      	blx	r3

	event_system_init();
    55d2:	4b06      	ldr	r3, [pc, #24]	; (55ec <EVENT_SYSTEM_0_init+0x38>)
    55d4:	4798      	blx	r3
}
    55d6:	bf00      	nop
    55d8:	bd80      	pop	{r7, pc}
    55da:	bf00      	nop
    55dc:	40001c00 	.word	0x40001c00
    55e0:	00004b59 	.word	0x00004b59
    55e4:	40000800 	.word	0x40000800
    55e8:	00004cdf 	.word	0x00004cdf
    55ec:	00006809 	.word	0x00006809

000055f0 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    55f0:	b580      	push	{r7, lr}
    55f2:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    55f4:	2101      	movs	r1, #1
    55f6:	202b      	movs	r0, #43	; 0x2b
    55f8:	4b2b      	ldr	r3, [pc, #172]	; (56a8 <QSPI_N25Q256_PORT_init+0xb8>)
    55fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    55fc:	2100      	movs	r1, #0
    55fe:	202b      	movs	r0, #43	; 0x2b
    5600:	4b2a      	ldr	r3, [pc, #168]	; (56ac <QSPI_N25Q256_PORT_init+0xbc>)
    5602:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    5604:	492a      	ldr	r1, [pc, #168]	; (56b0 <QSPI_N25Q256_PORT_init+0xc0>)
    5606:	202b      	movs	r0, #43	; 0x2b
    5608:	4b2a      	ldr	r3, [pc, #168]	; (56b4 <QSPI_N25Q256_PORT_init+0xc4>)
    560a:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    560c:	2102      	movs	r1, #2
    560e:	2008      	movs	r0, #8
    5610:	4b25      	ldr	r3, [pc, #148]	; (56a8 <QSPI_N25Q256_PORT_init+0xb8>)
    5612:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    5614:	2100      	movs	r1, #0
    5616:	2008      	movs	r0, #8
    5618:	4b27      	ldr	r3, [pc, #156]	; (56b8 <QSPI_N25Q256_PORT_init+0xc8>)
    561a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    561c:	2100      	movs	r1, #0
    561e:	2008      	movs	r0, #8
    5620:	4b22      	ldr	r3, [pc, #136]	; (56ac <QSPI_N25Q256_PORT_init+0xbc>)
    5622:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    5624:	4925      	ldr	r1, [pc, #148]	; (56bc <QSPI_N25Q256_PORT_init+0xcc>)
    5626:	2008      	movs	r0, #8
    5628:	4b22      	ldr	r3, [pc, #136]	; (56b4 <QSPI_N25Q256_PORT_init+0xc4>)
    562a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    562c:	2102      	movs	r1, #2
    562e:	2009      	movs	r0, #9
    5630:	4b1d      	ldr	r3, [pc, #116]	; (56a8 <QSPI_N25Q256_PORT_init+0xb8>)
    5632:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    5634:	2100      	movs	r1, #0
    5636:	2009      	movs	r0, #9
    5638:	4b1f      	ldr	r3, [pc, #124]	; (56b8 <QSPI_N25Q256_PORT_init+0xc8>)
    563a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    563c:	2100      	movs	r1, #0
    563e:	2009      	movs	r0, #9
    5640:	4b1a      	ldr	r3, [pc, #104]	; (56ac <QSPI_N25Q256_PORT_init+0xbc>)
    5642:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    5644:	491e      	ldr	r1, [pc, #120]	; (56c0 <QSPI_N25Q256_PORT_init+0xd0>)
    5646:	2009      	movs	r0, #9
    5648:	4b1a      	ldr	r3, [pc, #104]	; (56b4 <QSPI_N25Q256_PORT_init+0xc4>)
    564a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    564c:	2102      	movs	r1, #2
    564e:	200a      	movs	r0, #10
    5650:	4b15      	ldr	r3, [pc, #84]	; (56a8 <QSPI_N25Q256_PORT_init+0xb8>)
    5652:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    5654:	2100      	movs	r1, #0
    5656:	200a      	movs	r0, #10
    5658:	4b17      	ldr	r3, [pc, #92]	; (56b8 <QSPI_N25Q256_PORT_init+0xc8>)
    565a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    565c:	2100      	movs	r1, #0
    565e:	200a      	movs	r0, #10
    5660:	4b12      	ldr	r3, [pc, #72]	; (56ac <QSPI_N25Q256_PORT_init+0xbc>)
    5662:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    5664:	4917      	ldr	r1, [pc, #92]	; (56c4 <QSPI_N25Q256_PORT_init+0xd4>)
    5666:	200a      	movs	r0, #10
    5668:	4b12      	ldr	r3, [pc, #72]	; (56b4 <QSPI_N25Q256_PORT_init+0xc4>)
    566a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    566c:	2102      	movs	r1, #2
    566e:	200b      	movs	r0, #11
    5670:	4b0d      	ldr	r3, [pc, #52]	; (56a8 <QSPI_N25Q256_PORT_init+0xb8>)
    5672:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    5674:	2100      	movs	r1, #0
    5676:	200b      	movs	r0, #11
    5678:	4b0f      	ldr	r3, [pc, #60]	; (56b8 <QSPI_N25Q256_PORT_init+0xc8>)
    567a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    567c:	2100      	movs	r1, #0
    567e:	200b      	movs	r0, #11
    5680:	4b0a      	ldr	r3, [pc, #40]	; (56ac <QSPI_N25Q256_PORT_init+0xbc>)
    5682:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    5684:	4910      	ldr	r1, [pc, #64]	; (56c8 <QSPI_N25Q256_PORT_init+0xd8>)
    5686:	200b      	movs	r0, #11
    5688:	4b0a      	ldr	r3, [pc, #40]	; (56b4 <QSPI_N25Q256_PORT_init+0xc4>)
    568a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    568c:	2101      	movs	r1, #1
    568e:	202a      	movs	r0, #42	; 0x2a
    5690:	4b05      	ldr	r3, [pc, #20]	; (56a8 <QSPI_N25Q256_PORT_init+0xb8>)
    5692:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    5694:	2100      	movs	r1, #0
    5696:	202a      	movs	r0, #42	; 0x2a
    5698:	4b04      	ldr	r3, [pc, #16]	; (56ac <QSPI_N25Q256_PORT_init+0xbc>)
    569a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    569c:	490b      	ldr	r1, [pc, #44]	; (56cc <QSPI_N25Q256_PORT_init+0xdc>)
    569e:	202a      	movs	r0, #42	; 0x2a
    56a0:	4b04      	ldr	r3, [pc, #16]	; (56b4 <QSPI_N25Q256_PORT_init+0xc4>)
    56a2:	4798      	blx	r3
}
    56a4:	bf00      	nop
    56a6:	bd80      	pop	{r7, pc}
    56a8:	000053ad 	.word	0x000053ad
    56ac:	00005359 	.word	0x00005359
    56b0:	002b0007 	.word	0x002b0007
    56b4:	0000538d 	.word	0x0000538d
    56b8:	000053e5 	.word	0x000053e5
    56bc:	00080007 	.word	0x00080007
    56c0:	00090007 	.word	0x00090007
    56c4:	000a0007 	.word	0x000a0007
    56c8:	000b0007 	.word	0x000b0007
    56cc:	002a0007 	.word	0x002a0007

000056d0 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    56d0:	b580      	push	{r7, lr}
    56d2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    56d4:	4805      	ldr	r0, [pc, #20]	; (56ec <QSPI_N25Q256_CLOCK_init+0x1c>)
    56d6:	4b06      	ldr	r3, [pc, #24]	; (56f0 <QSPI_N25Q256_CLOCK_init+0x20>)
    56d8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    56da:	4804      	ldr	r0, [pc, #16]	; (56ec <QSPI_N25Q256_CLOCK_init+0x1c>)
    56dc:	4b05      	ldr	r3, [pc, #20]	; (56f4 <QSPI_N25Q256_CLOCK_init+0x24>)
    56de:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    56e0:	4802      	ldr	r0, [pc, #8]	; (56ec <QSPI_N25Q256_CLOCK_init+0x1c>)
    56e2:	4b05      	ldr	r3, [pc, #20]	; (56f8 <QSPI_N25Q256_CLOCK_init+0x28>)
    56e4:	4798      	blx	r3
}
    56e6:	bf00      	nop
    56e8:	bd80      	pop	{r7, pc}
    56ea:	bf00      	nop
    56ec:	40000800 	.word	0x40000800
    56f0:	00004b9f 	.word	0x00004b9f
    56f4:	00004bdf 	.word	0x00004bdf
    56f8:	00004d9f 	.word	0x00004d9f

000056fc <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    56fc:	b580      	push	{r7, lr}
    56fe:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    5700:	4b04      	ldr	r3, [pc, #16]	; (5714 <QSPI_N25Q256_init+0x18>)
    5702:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    5704:	4904      	ldr	r1, [pc, #16]	; (5718 <QSPI_N25Q256_init+0x1c>)
    5706:	4805      	ldr	r0, [pc, #20]	; (571c <QSPI_N25Q256_init+0x20>)
    5708:	4b05      	ldr	r3, [pc, #20]	; (5720 <QSPI_N25Q256_init+0x24>)
    570a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    570c:	4b05      	ldr	r3, [pc, #20]	; (5724 <QSPI_N25Q256_init+0x28>)
    570e:	4798      	blx	r3
}
    5710:	bf00      	nop
    5712:	bd80      	pop	{r7, pc}
    5714:	000056d1 	.word	0x000056d1
    5718:	42003400 	.word	0x42003400
    571c:	2000a7c0 	.word	0x2000a7c0
    5720:	00006fa1 	.word	0x00006fa1
    5724:	000055f1 	.word	0x000055f1

00005728 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    5728:	b580      	push	{r7, lr}
    572a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    572c:	4802      	ldr	r0, [pc, #8]	; (5738 <DATETIME_CLOCK_CLOCK_init+0x10>)
    572e:	4b03      	ldr	r3, [pc, #12]	; (573c <DATETIME_CLOCK_CLOCK_init+0x14>)
    5730:	4798      	blx	r3
}
    5732:	bf00      	nop
    5734:	bd80      	pop	{r7, pc}
    5736:	bf00      	nop
    5738:	40000800 	.word	0x40000800
    573c:	00004c1f 	.word	0x00004c1f

00005740 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    5740:	b580      	push	{r7, lr}
    5742:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    5744:	4b03      	ldr	r3, [pc, #12]	; (5754 <DATETIME_CLOCK_init+0x14>)
    5746:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    5748:	4903      	ldr	r1, [pc, #12]	; (5758 <DATETIME_CLOCK_init+0x18>)
    574a:	4804      	ldr	r0, [pc, #16]	; (575c <DATETIME_CLOCK_init+0x1c>)
    574c:	4b04      	ldr	r3, [pc, #16]	; (5760 <DATETIME_CLOCK_init+0x20>)
    574e:	4798      	blx	r3
}
    5750:	bf00      	nop
    5752:	bd80      	pop	{r7, pc}
    5754:	00005729 	.word	0x00005729
    5758:	40002400 	.word	0x40002400
    575c:	2000a928 	.word	0x2000a928
    5760:	000063bd 	.word	0x000063bd

00005764 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    5764:	b580      	push	{r7, lr}
    5766:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    5768:	2100      	movs	r1, #0
    576a:	2010      	movs	r0, #16
    576c:	4b07      	ldr	r3, [pc, #28]	; (578c <I2C_SHARED_PORT_init+0x28>)
    576e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    5770:	4907      	ldr	r1, [pc, #28]	; (5790 <I2C_SHARED_PORT_init+0x2c>)
    5772:	2010      	movs	r0, #16
    5774:	4b07      	ldr	r3, [pc, #28]	; (5794 <I2C_SHARED_PORT_init+0x30>)
    5776:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    5778:	2100      	movs	r1, #0
    577a:	2011      	movs	r0, #17
    577c:	4b03      	ldr	r3, [pc, #12]	; (578c <I2C_SHARED_PORT_init+0x28>)
    577e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    5780:	4905      	ldr	r1, [pc, #20]	; (5798 <I2C_SHARED_PORT_init+0x34>)
    5782:	2011      	movs	r0, #17
    5784:	4b03      	ldr	r3, [pc, #12]	; (5794 <I2C_SHARED_PORT_init+0x30>)
    5786:	4798      	blx	r3
}
    5788:	bf00      	nop
    578a:	bd80      	pop	{r7, pc}
    578c:	00005359 	.word	0x00005359
    5790:	00100002 	.word	0x00100002
    5794:	0000538d 	.word	0x0000538d
    5798:	00110002 	.word	0x00110002

0000579c <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    579c:	b580      	push	{r7, lr}
    579e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    57a0:	2245      	movs	r2, #69	; 0x45
    57a2:	2108      	movs	r1, #8
    57a4:	4806      	ldr	r0, [pc, #24]	; (57c0 <I2C_SHARED_CLOCK_init+0x24>)
    57a6:	4b07      	ldr	r3, [pc, #28]	; (57c4 <I2C_SHARED_CLOCK_init+0x28>)
    57a8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    57aa:	224a      	movs	r2, #74	; 0x4a
    57ac:	2103      	movs	r1, #3
    57ae:	4804      	ldr	r0, [pc, #16]	; (57c0 <I2C_SHARED_CLOCK_init+0x24>)
    57b0:	4b04      	ldr	r3, [pc, #16]	; (57c4 <I2C_SHARED_CLOCK_init+0x28>)
    57b2:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    57b4:	4804      	ldr	r0, [pc, #16]	; (57c8 <I2C_SHARED_CLOCK_init+0x2c>)
    57b6:	4b05      	ldr	r3, [pc, #20]	; (57cc <I2C_SHARED_CLOCK_init+0x30>)
    57b8:	4798      	blx	r3
}
    57ba:	bf00      	nop
    57bc:	bd80      	pop	{r7, pc}
    57be:	bf00      	nop
    57c0:	40001c00 	.word	0x40001c00
    57c4:	00004b59 	.word	0x00004b59
    57c8:	40000800 	.word	0x40000800
    57cc:	00004c5f 	.word	0x00004c5f

000057d0 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    57d0:	b580      	push	{r7, lr}
    57d2:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    57d4:	4b04      	ldr	r3, [pc, #16]	; (57e8 <I2C_SHARED_init+0x18>)
    57d6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM1);
    57d8:	4904      	ldr	r1, [pc, #16]	; (57ec <I2C_SHARED_init+0x1c>)
    57da:	4805      	ldr	r0, [pc, #20]	; (57f0 <I2C_SHARED_init+0x20>)
    57dc:	4b05      	ldr	r3, [pc, #20]	; (57f4 <I2C_SHARED_init+0x24>)
    57de:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    57e0:	4b05      	ldr	r3, [pc, #20]	; (57f8 <I2C_SHARED_init+0x28>)
    57e2:	4798      	blx	r3
}
    57e4:	bf00      	nop
    57e6:	bd80      	pop	{r7, pc}
    57e8:	0000579d 	.word	0x0000579d
    57ec:	40003400 	.word	0x40003400
    57f0:	2000a8a8 	.word	0x2000a8a8
    57f4:	00006dc5 	.word	0x00006dc5
    57f8:	00005765 	.word	0x00005765

000057fc <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    57fc:	b580      	push	{r7, lr}
    57fe:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    5800:	2100      	movs	r1, #0
    5802:	203b      	movs	r0, #59	; 0x3b
    5804:	4b11      	ldr	r3, [pc, #68]	; (584c <SPI_TEMP_PORT_init+0x50>)
    5806:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    5808:	2102      	movs	r1, #2
    580a:	203b      	movs	r0, #59	; 0x3b
    580c:	4b10      	ldr	r3, [pc, #64]	; (5850 <SPI_TEMP_PORT_init+0x54>)
    580e:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    5810:	4910      	ldr	r1, [pc, #64]	; (5854 <SPI_TEMP_PORT_init+0x58>)
    5812:	203b      	movs	r0, #59	; 0x3b
    5814:	4b10      	ldr	r3, [pc, #64]	; (5858 <SPI_TEMP_PORT_init+0x5c>)
    5816:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    5818:	2100      	movs	r1, #0
    581a:	203a      	movs	r0, #58	; 0x3a
    581c:	4b0b      	ldr	r3, [pc, #44]	; (584c <SPI_TEMP_PORT_init+0x50>)
    581e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    5820:	2102      	movs	r1, #2
    5822:	203a      	movs	r0, #58	; 0x3a
    5824:	4b0a      	ldr	r3, [pc, #40]	; (5850 <SPI_TEMP_PORT_init+0x54>)
    5826:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    5828:	490c      	ldr	r1, [pc, #48]	; (585c <SPI_TEMP_PORT_init+0x60>)
    582a:	203a      	movs	r0, #58	; 0x3a
    582c:	4b0a      	ldr	r3, [pc, #40]	; (5858 <SPI_TEMP_PORT_init+0x5c>)
    582e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    5830:	2101      	movs	r1, #1
    5832:	203c      	movs	r0, #60	; 0x3c
    5834:	4b06      	ldr	r3, [pc, #24]	; (5850 <SPI_TEMP_PORT_init+0x54>)
    5836:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    5838:	2100      	movs	r1, #0
    583a:	203c      	movs	r0, #60	; 0x3c
    583c:	4b08      	ldr	r3, [pc, #32]	; (5860 <SPI_TEMP_PORT_init+0x64>)
    583e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    5840:	4908      	ldr	r1, [pc, #32]	; (5864 <SPI_TEMP_PORT_init+0x68>)
    5842:	203c      	movs	r0, #60	; 0x3c
    5844:	4b04      	ldr	r3, [pc, #16]	; (5858 <SPI_TEMP_PORT_init+0x5c>)
    5846:	4798      	blx	r3
}
    5848:	bf00      	nop
    584a:	bd80      	pop	{r7, pc}
    584c:	000053e5 	.word	0x000053e5
    5850:	000053ad 	.word	0x000053ad
    5854:	003b0003 	.word	0x003b0003
    5858:	0000538d 	.word	0x0000538d
    585c:	003a0003 	.word	0x003a0003
    5860:	00005359 	.word	0x00005359
    5864:	003c0003 	.word	0x003c0003

00005868 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    5868:	b580      	push	{r7, lr}
    586a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    586c:	2245      	movs	r2, #69	; 0x45
    586e:	2122      	movs	r1, #34	; 0x22
    5870:	4806      	ldr	r0, [pc, #24]	; (588c <SPI_TEMP_CLOCK_init+0x24>)
    5872:	4b07      	ldr	r3, [pc, #28]	; (5890 <SPI_TEMP_CLOCK_init+0x28>)
    5874:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5876:	224a      	movs	r2, #74	; 0x4a
    5878:	2103      	movs	r1, #3
    587a:	4804      	ldr	r0, [pc, #16]	; (588c <SPI_TEMP_CLOCK_init+0x24>)
    587c:	4b04      	ldr	r3, [pc, #16]	; (5890 <SPI_TEMP_CLOCK_init+0x28>)
    587e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    5880:	4804      	ldr	r0, [pc, #16]	; (5894 <SPI_TEMP_CLOCK_init+0x2c>)
    5882:	4b05      	ldr	r3, [pc, #20]	; (5898 <SPI_TEMP_CLOCK_init+0x30>)
    5884:	4798      	blx	r3
}
    5886:	bf00      	nop
    5888:	bd80      	pop	{r7, pc}
    588a:	bf00      	nop
    588c:	40001c00 	.word	0x40001c00
    5890:	00004b59 	.word	0x00004b59
    5894:	40000800 	.word	0x40000800
    5898:	00004dbf 	.word	0x00004dbf

0000589c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    589c:	b580      	push	{r7, lr}
    589e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    58a0:	4b05      	ldr	r3, [pc, #20]	; (58b8 <SPI_TEMP_init+0x1c>)
    58a2:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    58a4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    58a8:	4804      	ldr	r0, [pc, #16]	; (58bc <SPI_TEMP_init+0x20>)
    58aa:	4b05      	ldr	r3, [pc, #20]	; (58c0 <SPI_TEMP_init+0x24>)
    58ac:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    58ae:	4b05      	ldr	r3, [pc, #20]	; (58c4 <SPI_TEMP_init+0x28>)
    58b0:	4798      	blx	r3
}
    58b2:	bf00      	nop
    58b4:	bd80      	pop	{r7, pc}
    58b6:	bf00      	nop
    58b8:	00005869 	.word	0x00005869
    58bc:	2000a788 	.word	0x2000a788
    58c0:	000070b1 	.word	0x000070b1
    58c4:	000057fd 	.word	0x000057fd

000058c8 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    58c8:	b580      	push	{r7, lr}
    58ca:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    58cc:	2100      	movs	r1, #0
    58ce:	2017      	movs	r0, #23
    58d0:	4b07      	ldr	r3, [pc, #28]	; (58f0 <I2C_EXPANDER_PORT_init+0x28>)
    58d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    58d4:	4907      	ldr	r1, [pc, #28]	; (58f4 <I2C_EXPANDER_PORT_init+0x2c>)
    58d6:	2017      	movs	r0, #23
    58d8:	4b07      	ldr	r3, [pc, #28]	; (58f8 <I2C_EXPANDER_PORT_init+0x30>)
    58da:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    58dc:	2100      	movs	r1, #0
    58de:	2016      	movs	r0, #22
    58e0:	4b03      	ldr	r3, [pc, #12]	; (58f0 <I2C_EXPANDER_PORT_init+0x28>)
    58e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    58e4:	4905      	ldr	r1, [pc, #20]	; (58fc <I2C_EXPANDER_PORT_init+0x34>)
    58e6:	2016      	movs	r0, #22
    58e8:	4b03      	ldr	r3, [pc, #12]	; (58f8 <I2C_EXPANDER_PORT_init+0x30>)
    58ea:	4798      	blx	r3
}
    58ec:	bf00      	nop
    58ee:	bd80      	pop	{r7, pc}
    58f0:	00005359 	.word	0x00005359
    58f4:	00170003 	.word	0x00170003
    58f8:	0000538d 	.word	0x0000538d
    58fc:	00160003 	.word	0x00160003

00005900 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    5900:	b580      	push	{r7, lr}
    5902:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5904:	2244      	movs	r2, #68	; 0x44
    5906:	2123      	movs	r1, #35	; 0x23
    5908:	4806      	ldr	r0, [pc, #24]	; (5924 <I2C_EXPANDER_CLOCK_init+0x24>)
    590a:	4b07      	ldr	r3, [pc, #28]	; (5928 <I2C_EXPANDER_CLOCK_init+0x28>)
    590c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    590e:	224a      	movs	r2, #74	; 0x4a
    5910:	2103      	movs	r1, #3
    5912:	4804      	ldr	r0, [pc, #16]	; (5924 <I2C_EXPANDER_CLOCK_init+0x24>)
    5914:	4b04      	ldr	r3, [pc, #16]	; (5928 <I2C_EXPANDER_CLOCK_init+0x28>)
    5916:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    5918:	4804      	ldr	r0, [pc, #16]	; (592c <I2C_EXPANDER_CLOCK_init+0x2c>)
    591a:	4b05      	ldr	r3, [pc, #20]	; (5930 <I2C_EXPANDER_CLOCK_init+0x30>)
    591c:	4798      	blx	r3
}
    591e:	bf00      	nop
    5920:	bd80      	pop	{r7, pc}
    5922:	bf00      	nop
    5924:	40001c00 	.word	0x40001c00
    5928:	00004b59 	.word	0x00004b59
    592c:	40000800 	.word	0x40000800
    5930:	00004ddf 	.word	0x00004ddf

00005934 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    5934:	b580      	push	{r7, lr}
    5936:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    5938:	4b04      	ldr	r3, [pc, #16]	; (594c <I2C_EXPANDER_init+0x18>)
    593a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_EXPANDER, SERCOM5);
    593c:	4904      	ldr	r1, [pc, #16]	; (5950 <I2C_EXPANDER_init+0x1c>)
    593e:	4805      	ldr	r0, [pc, #20]	; (5954 <I2C_EXPANDER_init+0x20>)
    5940:	4b05      	ldr	r3, [pc, #20]	; (5958 <I2C_EXPANDER_init+0x24>)
    5942:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    5944:	4b05      	ldr	r3, [pc, #20]	; (595c <I2C_EXPANDER_init+0x28>)
    5946:	4798      	blx	r3
}
    5948:	bf00      	nop
    594a:	bd80      	pop	{r7, pc}
    594c:	00005901 	.word	0x00005901
    5950:	43000400 	.word	0x43000400
    5954:	2000a888 	.word	0x2000a888
    5958:	00006dc5 	.word	0x00006dc5
    595c:	000058c9 	.word	0x000058c9

00005960 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    5960:	b580      	push	{r7, lr}
    5962:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    5964:	2100      	movs	r1, #0
    5966:	2044      	movs	r0, #68	; 0x44
    5968:	4b11      	ldr	r3, [pc, #68]	; (59b0 <SPI_HI3593_PORT_init+0x50>)
    596a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    596c:	2102      	movs	r1, #2
    596e:	2044      	movs	r0, #68	; 0x44
    5970:	4b10      	ldr	r3, [pc, #64]	; (59b4 <SPI_HI3593_PORT_init+0x54>)
    5972:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    5974:	4910      	ldr	r1, [pc, #64]	; (59b8 <SPI_HI3593_PORT_init+0x58>)
    5976:	2044      	movs	r0, #68	; 0x44
    5978:	4b10      	ldr	r3, [pc, #64]	; (59bc <SPI_HI3593_PORT_init+0x5c>)
    597a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    597c:	2100      	movs	r1, #0
    597e:	2045      	movs	r0, #69	; 0x45
    5980:	4b0b      	ldr	r3, [pc, #44]	; (59b0 <SPI_HI3593_PORT_init+0x50>)
    5982:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    5984:	2102      	movs	r1, #2
    5986:	2045      	movs	r0, #69	; 0x45
    5988:	4b0a      	ldr	r3, [pc, #40]	; (59b4 <SPI_HI3593_PORT_init+0x54>)
    598a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    598c:	490c      	ldr	r1, [pc, #48]	; (59c0 <SPI_HI3593_PORT_init+0x60>)
    598e:	2045      	movs	r0, #69	; 0x45
    5990:	4b0a      	ldr	r3, [pc, #40]	; (59bc <SPI_HI3593_PORT_init+0x5c>)
    5992:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    5994:	2101      	movs	r1, #1
    5996:	2047      	movs	r0, #71	; 0x47
    5998:	4b06      	ldr	r3, [pc, #24]	; (59b4 <SPI_HI3593_PORT_init+0x54>)
    599a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    599c:	2100      	movs	r1, #0
    599e:	2047      	movs	r0, #71	; 0x47
    59a0:	4b08      	ldr	r3, [pc, #32]	; (59c4 <SPI_HI3593_PORT_init+0x64>)
    59a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    59a4:	4908      	ldr	r1, [pc, #32]	; (59c8 <SPI_HI3593_PORT_init+0x68>)
    59a6:	2047      	movs	r0, #71	; 0x47
    59a8:	4b04      	ldr	r3, [pc, #16]	; (59bc <SPI_HI3593_PORT_init+0x5c>)
    59aa:	4798      	blx	r3
}
    59ac:	bf00      	nop
    59ae:	bd80      	pop	{r7, pc}
    59b0:	000053e5 	.word	0x000053e5
    59b4:	000053ad 	.word	0x000053ad
    59b8:	00440002 	.word	0x00440002
    59bc:	0000538d 	.word	0x0000538d
    59c0:	00450002 	.word	0x00450002
    59c4:	00005359 	.word	0x00005359
    59c8:	00470002 	.word	0x00470002

000059cc <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    59cc:	b580      	push	{r7, lr}
    59ce:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    59d0:	2242      	movs	r2, #66	; 0x42
    59d2:	2124      	movs	r1, #36	; 0x24
    59d4:	4806      	ldr	r0, [pc, #24]	; (59f0 <SPI_HI3593_CLOCK_init+0x24>)
    59d6:	4b07      	ldr	r3, [pc, #28]	; (59f4 <SPI_HI3593_CLOCK_init+0x28>)
    59d8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    59da:	224a      	movs	r2, #74	; 0x4a
    59dc:	2103      	movs	r1, #3
    59de:	4804      	ldr	r0, [pc, #16]	; (59f0 <SPI_HI3593_CLOCK_init+0x24>)
    59e0:	4b04      	ldr	r3, [pc, #16]	; (59f4 <SPI_HI3593_CLOCK_init+0x28>)
    59e2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    59e4:	4804      	ldr	r0, [pc, #16]	; (59f8 <SPI_HI3593_CLOCK_init+0x2c>)
    59e6:	4b05      	ldr	r3, [pc, #20]	; (59fc <SPI_HI3593_CLOCK_init+0x30>)
    59e8:	4798      	blx	r3
}
    59ea:	bf00      	nop
    59ec:	bd80      	pop	{r7, pc}
    59ee:	bf00      	nop
    59f0:	40001c00 	.word	0x40001c00
    59f4:	00004b59 	.word	0x00004b59
    59f8:	40000800 	.word	0x40000800
    59fc:	00004dff 	.word	0x00004dff

00005a00 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    5a00:	b580      	push	{r7, lr}
    5a02:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    5a04:	4b04      	ldr	r3, [pc, #16]	; (5a18 <SPI_HI3593_init+0x18>)
    5a06:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    5a08:	4904      	ldr	r1, [pc, #16]	; (5a1c <SPI_HI3593_init+0x1c>)
    5a0a:	4805      	ldr	r0, [pc, #20]	; (5a20 <SPI_HI3593_init+0x20>)
    5a0c:	4b05      	ldr	r3, [pc, #20]	; (5a24 <SPI_HI3593_init+0x24>)
    5a0e:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    5a10:	4b05      	ldr	r3, [pc, #20]	; (5a28 <SPI_HI3593_init+0x28>)
    5a12:	4798      	blx	r3
}
    5a14:	bf00      	nop
    5a16:	bd80      	pop	{r7, pc}
    5a18:	000059cd 	.word	0x000059cd
    5a1c:	43000800 	.word	0x43000800
    5a20:	2000a770 	.word	0x2000a770
    5a24:	000070b1 	.word	0x000070b1
    5a28:	00005961 	.word	0x00005961

00005a2c <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    5a2c:	b580      	push	{r7, lr}
    5a2e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    5a30:	2100      	movs	r1, #0
    5a32:	2068      	movs	r0, #104	; 0x68
    5a34:	4b07      	ldr	r3, [pc, #28]	; (5a54 <I2C_EEPROM_PORT_init+0x28>)
    5a36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    5a38:	4907      	ldr	r1, [pc, #28]	; (5a58 <I2C_EEPROM_PORT_init+0x2c>)
    5a3a:	2068      	movs	r0, #104	; 0x68
    5a3c:	4b07      	ldr	r3, [pc, #28]	; (5a5c <I2C_EEPROM_PORT_init+0x30>)
    5a3e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    5a40:	2100      	movs	r1, #0
    5a42:	2069      	movs	r0, #105	; 0x69
    5a44:	4b03      	ldr	r3, [pc, #12]	; (5a54 <I2C_EEPROM_PORT_init+0x28>)
    5a46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    5a48:	4905      	ldr	r1, [pc, #20]	; (5a60 <I2C_EEPROM_PORT_init+0x34>)
    5a4a:	2069      	movs	r0, #105	; 0x69
    5a4c:	4b03      	ldr	r3, [pc, #12]	; (5a5c <I2C_EEPROM_PORT_init+0x30>)
    5a4e:	4798      	blx	r3
}
    5a50:	bf00      	nop
    5a52:	bd80      	pop	{r7, pc}
    5a54:	00005359 	.word	0x00005359
    5a58:	00680002 	.word	0x00680002
    5a5c:	0000538d 	.word	0x0000538d
    5a60:	00690002 	.word	0x00690002

00005a64 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    5a64:	b580      	push	{r7, lr}
    5a66:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5a68:	2248      	movs	r2, #72	; 0x48
    5a6a:	2125      	movs	r1, #37	; 0x25
    5a6c:	4806      	ldr	r0, [pc, #24]	; (5a88 <I2C_EEPROM_CLOCK_init+0x24>)
    5a6e:	4b07      	ldr	r3, [pc, #28]	; (5a8c <I2C_EEPROM_CLOCK_init+0x28>)
    5a70:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5a72:	224a      	movs	r2, #74	; 0x4a
    5a74:	2103      	movs	r1, #3
    5a76:	4804      	ldr	r0, [pc, #16]	; (5a88 <I2C_EEPROM_CLOCK_init+0x24>)
    5a78:	4b04      	ldr	r3, [pc, #16]	; (5a8c <I2C_EEPROM_CLOCK_init+0x28>)
    5a7a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    5a7c:	4804      	ldr	r0, [pc, #16]	; (5a90 <I2C_EEPROM_CLOCK_init+0x2c>)
    5a7e:	4b05      	ldr	r3, [pc, #20]	; (5a94 <I2C_EEPROM_CLOCK_init+0x30>)
    5a80:	4798      	blx	r3
}
    5a82:	bf00      	nop
    5a84:	bd80      	pop	{r7, pc}
    5a86:	bf00      	nop
    5a88:	40001c00 	.word	0x40001c00
    5a8c:	00004b59 	.word	0x00004b59
    5a90:	40000800 	.word	0x40000800
    5a94:	00004e1f 	.word	0x00004e1f

00005a98 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    5a98:	b580      	push	{r7, lr}
    5a9a:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    5a9c:	4b04      	ldr	r3, [pc, #16]	; (5ab0 <I2C_EEPROM_init+0x18>)
    5a9e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    5aa0:	4904      	ldr	r1, [pc, #16]	; (5ab4 <I2C_EEPROM_init+0x1c>)
    5aa2:	4805      	ldr	r0, [pc, #20]	; (5ab8 <I2C_EEPROM_init+0x20>)
    5aa4:	4b05      	ldr	r3, [pc, #20]	; (5abc <I2C_EEPROM_init+0x24>)
    5aa6:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    5aa8:	4b05      	ldr	r3, [pc, #20]	; (5ac0 <I2C_EEPROM_init+0x28>)
    5aaa:	4798      	blx	r3
}
    5aac:	bf00      	nop
    5aae:	bd80      	pop	{r7, pc}
    5ab0:	00005a65 	.word	0x00005a65
    5ab4:	43000c00 	.word	0x43000c00
    5ab8:	2000a8e8 	.word	0x2000a8e8
    5abc:	00006b81 	.word	0x00006b81
    5ac0:	00005a2d 	.word	0x00005a2d

00005ac4 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    5ac4:	b580      	push	{r7, lr}
    5ac6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    5ac8:	4808      	ldr	r0, [pc, #32]	; (5aec <TIMER_USB_init+0x28>)
    5aca:	4b09      	ldr	r3, [pc, #36]	; (5af0 <TIMER_USB_init+0x2c>)
    5acc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5ace:	2243      	movs	r2, #67	; 0x43
    5ad0:	2109      	movs	r1, #9
    5ad2:	4808      	ldr	r0, [pc, #32]	; (5af4 <TIMER_USB_init+0x30>)
    5ad4:	4b08      	ldr	r3, [pc, #32]	; (5af8 <TIMER_USB_init+0x34>)
    5ad6:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    5ad8:	4b08      	ldr	r3, [pc, #32]	; (5afc <TIMER_USB_init+0x38>)
    5ada:	4798      	blx	r3
    5adc:	4603      	mov	r3, r0
    5ade:	461a      	mov	r2, r3
    5ae0:	4907      	ldr	r1, [pc, #28]	; (5b00 <TIMER_USB_init+0x3c>)
    5ae2:	4808      	ldr	r0, [pc, #32]	; (5b04 <TIMER_USB_init+0x40>)
    5ae4:	4b08      	ldr	r3, [pc, #32]	; (5b08 <TIMER_USB_init+0x44>)
    5ae6:	4798      	blx	r3
}
    5ae8:	bf00      	nop
    5aea:	bd80      	pop	{r7, pc}
    5aec:	40000800 	.word	0x40000800
    5af0:	00004c7f 	.word	0x00004c7f
    5af4:	40001c00 	.word	0x40001c00
    5af8:	00004b59 	.word	0x00004b59
    5afc:	0000d961 	.word	0x0000d961
    5b00:	40003800 	.word	0x40003800
    5b04:	2000a868 	.word	0x2000a868
    5b08:	00007341 	.word	0x00007341

00005b0c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    5b0c:	b580      	push	{r7, lr}
    5b0e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    5b10:	4808      	ldr	r0, [pc, #32]	; (5b34 <TIMER_ARINC_init+0x28>)
    5b12:	4b09      	ldr	r3, [pc, #36]	; (5b38 <TIMER_ARINC_init+0x2c>)
    5b14:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5b16:	2244      	movs	r2, #68	; 0x44
    5b18:	211a      	movs	r1, #26
    5b1a:	4808      	ldr	r0, [pc, #32]	; (5b3c <TIMER_ARINC_init+0x30>)
    5b1c:	4b08      	ldr	r3, [pc, #32]	; (5b40 <TIMER_ARINC_init+0x34>)
    5b1e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    5b20:	4b08      	ldr	r3, [pc, #32]	; (5b44 <TIMER_ARINC_init+0x38>)
    5b22:	4798      	blx	r3
    5b24:	4603      	mov	r3, r0
    5b26:	461a      	mov	r2, r3
    5b28:	4907      	ldr	r1, [pc, #28]	; (5b48 <TIMER_ARINC_init+0x3c>)
    5b2a:	4808      	ldr	r0, [pc, #32]	; (5b4c <TIMER_ARINC_init+0x40>)
    5b2c:	4b08      	ldr	r3, [pc, #32]	; (5b50 <TIMER_ARINC_init+0x44>)
    5b2e:	4798      	blx	r3
}
    5b30:	bf00      	nop
    5b32:	bd80      	pop	{r7, pc}
    5b34:	40000800 	.word	0x40000800
    5b38:	00004d3f 	.word	0x00004d3f
    5b3c:	40001c00 	.word	0x40001c00
    5b40:	00004b59 	.word	0x00004b59
    5b44:	0000d961 	.word	0x0000d961
    5b48:	4101a000 	.word	0x4101a000
    5b4c:	2000a848 	.word	0x2000a848
    5b50:	00007341 	.word	0x00007341

00005b54 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    5b54:	b580      	push	{r7, lr}
    5b56:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    5b58:	4808      	ldr	r0, [pc, #32]	; (5b7c <TIMER_MAINTENANCE_init+0x28>)
    5b5a:	4b09      	ldr	r3, [pc, #36]	; (5b80 <TIMER_MAINTENANCE_init+0x2c>)
    5b5c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5b5e:	2246      	movs	r2, #70	; 0x46
    5b60:	211e      	movs	r1, #30
    5b62:	4808      	ldr	r0, [pc, #32]	; (5b84 <TIMER_MAINTENANCE_init+0x30>)
    5b64:	4b08      	ldr	r3, [pc, #32]	; (5b88 <TIMER_MAINTENANCE_init+0x34>)
    5b66:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    5b68:	4b08      	ldr	r3, [pc, #32]	; (5b8c <TIMER_MAINTENANCE_init+0x38>)
    5b6a:	4798      	blx	r3
    5b6c:	4603      	mov	r3, r0
    5b6e:	461a      	mov	r2, r3
    5b70:	4907      	ldr	r1, [pc, #28]	; (5b90 <TIMER_MAINTENANCE_init+0x3c>)
    5b72:	4808      	ldr	r0, [pc, #32]	; (5b94 <TIMER_MAINTENANCE_init+0x40>)
    5b74:	4b08      	ldr	r3, [pc, #32]	; (5b98 <TIMER_MAINTENANCE_init+0x44>)
    5b76:	4798      	blx	r3
}
    5b78:	bf00      	nop
    5b7a:	bd80      	pop	{r7, pc}
    5b7c:	40000800 	.word	0x40000800
    5b80:	00004d5f 	.word	0x00004d5f
    5b84:	40001c00 	.word	0x40001c00
    5b88:	00004b59 	.word	0x00004b59
    5b8c:	0000d961 	.word	0x0000d961
    5b90:	42001400 	.word	0x42001400
    5b94:	2000a7a0 	.word	0x2000a7a0
    5b98:	00007341 	.word	0x00007341

00005b9c <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    5b9c:	b580      	push	{r7, lr}
    5b9e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    5ba0:	4808      	ldr	r0, [pc, #32]	; (5bc4 <TIMER_INTERFACE_init+0x28>)
    5ba2:	4b09      	ldr	r3, [pc, #36]	; (5bc8 <TIMER_INTERFACE_init+0x2c>)
    5ba4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5ba6:	2246      	movs	r2, #70	; 0x46
    5ba8:	211e      	movs	r1, #30
    5baa:	4808      	ldr	r0, [pc, #32]	; (5bcc <TIMER_INTERFACE_init+0x30>)
    5bac:	4b08      	ldr	r3, [pc, #32]	; (5bd0 <TIMER_INTERFACE_init+0x34>)
    5bae:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    5bb0:	4b08      	ldr	r3, [pc, #32]	; (5bd4 <TIMER_INTERFACE_init+0x38>)
    5bb2:	4798      	blx	r3
    5bb4:	4603      	mov	r3, r0
    5bb6:	461a      	mov	r2, r3
    5bb8:	4907      	ldr	r1, [pc, #28]	; (5bd8 <TIMER_INTERFACE_init+0x3c>)
    5bba:	4808      	ldr	r0, [pc, #32]	; (5bdc <TIMER_INTERFACE_init+0x40>)
    5bbc:	4b08      	ldr	r3, [pc, #32]	; (5be0 <TIMER_INTERFACE_init+0x44>)
    5bbe:	4798      	blx	r3
}
    5bc0:	bf00      	nop
    5bc2:	bd80      	pop	{r7, pc}
    5bc4:	40000800 	.word	0x40000800
    5bc8:	00004d7f 	.word	0x00004d7f
    5bcc:	40001c00 	.word	0x40001c00
    5bd0:	00004b59 	.word	0x00004b59
    5bd4:	0000d961 	.word	0x0000d961
    5bd8:	42001800 	.word	0x42001800
    5bdc:	2000a7e4 	.word	0x2000a7e4
    5be0:	00007341 	.word	0x00007341

00005be4 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    5be4:	b580      	push	{r7, lr}
    5be6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    5be8:	4808      	ldr	r0, [pc, #32]	; (5c0c <TIMER_EVENT_init+0x28>)
    5bea:	4b09      	ldr	r3, [pc, #36]	; (5c10 <TIMER_EVENT_init+0x2c>)
    5bec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5bee:	2246      	movs	r2, #70	; 0x46
    5bf0:	2127      	movs	r1, #39	; 0x27
    5bf2:	4808      	ldr	r0, [pc, #32]	; (5c14 <TIMER_EVENT_init+0x30>)
    5bf4:	4b08      	ldr	r3, [pc, #32]	; (5c18 <TIMER_EVENT_init+0x34>)
    5bf6:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    5bf8:	4b08      	ldr	r3, [pc, #32]	; (5c1c <TIMER_EVENT_init+0x38>)
    5bfa:	4798      	blx	r3
    5bfc:	4603      	mov	r3, r0
    5bfe:	461a      	mov	r2, r3
    5c00:	4907      	ldr	r1, [pc, #28]	; (5c20 <TIMER_EVENT_init+0x3c>)
    5c02:	4808      	ldr	r0, [pc, #32]	; (5c24 <TIMER_EVENT_init+0x40>)
    5c04:	4b08      	ldr	r3, [pc, #32]	; (5c28 <TIMER_EVENT_init+0x44>)
    5c06:	4798      	blx	r3
}
    5c08:	bf00      	nop
    5c0a:	bd80      	pop	{r7, pc}
    5c0c:	40000800 	.word	0x40000800
    5c10:	00004e3f 	.word	0x00004e3f
    5c14:	40001c00 	.word	0x40001c00
    5c18:	00004b59 	.word	0x00004b59
    5c1c:	0000d961 	.word	0x0000d961
    5c20:	43001400 	.word	0x43001400
    5c24:	2000a7c4 	.word	0x2000a7c4
    5c28:	00007341 	.word	0x00007341

00005c2c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    5c2c:	b580      	push	{r7, lr}
    5c2e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    5c30:	4902      	ldr	r1, [pc, #8]	; (5c3c <LIVE_PULSE_PORT_init+0x10>)
    5c32:	2021      	movs	r0, #33	; 0x21
    5c34:	4b02      	ldr	r3, [pc, #8]	; (5c40 <LIVE_PULSE_PORT_init+0x14>)
    5c36:	4798      	blx	r3
}
    5c38:	bf00      	nop
    5c3a:	bd80      	pop	{r7, pc}
    5c3c:	00210004 	.word	0x00210004
    5c40:	0000538d 	.word	0x0000538d

00005c44 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    5c44:	b580      	push	{r7, lr}
    5c46:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    5c48:	4804      	ldr	r0, [pc, #16]	; (5c5c <LIVE_PULSE_CLOCK_init+0x18>)
    5c4a:	4b05      	ldr	r3, [pc, #20]	; (5c60 <LIVE_PULSE_CLOCK_init+0x1c>)
    5c4c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5c4e:	2240      	movs	r2, #64	; 0x40
    5c50:	2127      	movs	r1, #39	; 0x27
    5c52:	4804      	ldr	r0, [pc, #16]	; (5c64 <LIVE_PULSE_CLOCK_init+0x20>)
    5c54:	4b04      	ldr	r3, [pc, #16]	; (5c68 <LIVE_PULSE_CLOCK_init+0x24>)
    5c56:	4798      	blx	r3
}
    5c58:	bf00      	nop
    5c5a:	bd80      	pop	{r7, pc}
    5c5c:	40000800 	.word	0x40000800
    5c60:	00004e5f 	.word	0x00004e5f
    5c64:	40001c00 	.word	0x40001c00
    5c68:	00004b59 	.word	0x00004b59

00005c6c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    5c6c:	b580      	push	{r7, lr}
    5c6e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    5c70:	4b06      	ldr	r3, [pc, #24]	; (5c8c <LIVE_PULSE_init+0x20>)
    5c72:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    5c74:	4b06      	ldr	r3, [pc, #24]	; (5c90 <LIVE_PULSE_init+0x24>)
    5c76:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    5c78:	4b06      	ldr	r3, [pc, #24]	; (5c94 <LIVE_PULSE_init+0x28>)
    5c7a:	4798      	blx	r3
    5c7c:	4603      	mov	r3, r0
    5c7e:	461a      	mov	r2, r3
    5c80:	4905      	ldr	r1, [pc, #20]	; (5c98 <LIVE_PULSE_init+0x2c>)
    5c82:	4806      	ldr	r0, [pc, #24]	; (5c9c <LIVE_PULSE_init+0x30>)
    5c84:	4b06      	ldr	r3, [pc, #24]	; (5ca0 <LIVE_PULSE_init+0x34>)
    5c86:	4798      	blx	r3
}
    5c88:	bf00      	nop
    5c8a:	bd80      	pop	{r7, pc}
    5c8c:	00005c45 	.word	0x00005c45
    5c90:	00005c2d 	.word	0x00005c2d
    5c94:	0000d975 	.word	0x0000d975
    5c98:	43001800 	.word	0x43001800
    5c9c:	2000a804 	.word	0x2000a804
    5ca0:	00006ea1 	.word	0x00006ea1

00005ca4 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    5ca4:	b580      	push	{r7, lr}
    5ca6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    5ca8:	4804      	ldr	r0, [pc, #16]	; (5cbc <TIMER_HVAC_CLOCK_init+0x18>)
    5caa:	4b05      	ldr	r3, [pc, #20]	; (5cc0 <TIMER_HVAC_CLOCK_init+0x1c>)
    5cac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5cae:	2244      	movs	r2, #68	; 0x44
    5cb0:	2119      	movs	r1, #25
    5cb2:	4804      	ldr	r0, [pc, #16]	; (5cc4 <TIMER_HVAC_CLOCK_init+0x20>)
    5cb4:	4b04      	ldr	r3, [pc, #16]	; (5cc8 <TIMER_HVAC_CLOCK_init+0x24>)
    5cb6:	4798      	blx	r3
}
    5cb8:	bf00      	nop
    5cba:	bd80      	pop	{r7, pc}
    5cbc:	40000800 	.word	0x40000800
    5cc0:	00004cff 	.word	0x00004cff
    5cc4:	40001c00 	.word	0x40001c00
    5cc8:	00004b59 	.word	0x00004b59

00005ccc <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    5ccc:	b580      	push	{r7, lr}
    5cce:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    5cd0:	4b05      	ldr	r3, [pc, #20]	; (5ce8 <TIMER_HVAC_init+0x1c>)
    5cd2:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    5cd4:	4b05      	ldr	r3, [pc, #20]	; (5cec <TIMER_HVAC_init+0x20>)
    5cd6:	4798      	blx	r3
    5cd8:	4603      	mov	r3, r0
    5cda:	461a      	mov	r2, r3
    5cdc:	4904      	ldr	r1, [pc, #16]	; (5cf0 <TIMER_HVAC_init+0x24>)
    5cde:	4805      	ldr	r0, [pc, #20]	; (5cf4 <TIMER_HVAC_init+0x28>)
    5ce0:	4b05      	ldr	r3, [pc, #20]	; (5cf8 <TIMER_HVAC_init+0x2c>)
    5ce2:	4798      	blx	r3
}
    5ce4:	bf00      	nop
    5ce6:	bd80      	pop	{r7, pc}
    5ce8:	00005ca5 	.word	0x00005ca5
    5cec:	0000cd21 	.word	0x0000cd21
    5cf0:	41016000 	.word	0x41016000
    5cf4:	2000a8c8 	.word	0x2000a8c8
    5cf8:	00007341 	.word	0x00007341

00005cfc <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    5cfc:	b580      	push	{r7, lr}
    5cfe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    5d00:	4804      	ldr	r0, [pc, #16]	; (5d14 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    5d02:	4b05      	ldr	r3, [pc, #20]	; (5d18 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    5d04:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5d06:	2244      	movs	r2, #68	; 0x44
    5d08:	2119      	movs	r1, #25
    5d0a:	4804      	ldr	r0, [pc, #16]	; (5d1c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    5d0c:	4b04      	ldr	r3, [pc, #16]	; (5d20 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    5d0e:	4798      	blx	r3
}
    5d10:	bf00      	nop
    5d12:	bd80      	pop	{r7, pc}
    5d14:	40000800 	.word	0x40000800
    5d18:	00004d1f 	.word	0x00004d1f
    5d1c:	40001c00 	.word	0x40001c00
    5d20:	00004b59 	.word	0x00004b59

00005d24 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    5d24:	b580      	push	{r7, lr}
    5d26:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    5d28:	4b05      	ldr	r3, [pc, #20]	; (5d40 <TIMER_TEMPERATURES_init+0x1c>)
    5d2a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    5d2c:	4b05      	ldr	r3, [pc, #20]	; (5d44 <TIMER_TEMPERATURES_init+0x20>)
    5d2e:	4798      	blx	r3
    5d30:	4603      	mov	r3, r0
    5d32:	461a      	mov	r2, r3
    5d34:	4904      	ldr	r1, [pc, #16]	; (5d48 <TIMER_TEMPERATURES_init+0x24>)
    5d36:	4805      	ldr	r0, [pc, #20]	; (5d4c <TIMER_TEMPERATURES_init+0x28>)
    5d38:	4b05      	ldr	r3, [pc, #20]	; (5d50 <TIMER_TEMPERATURES_init+0x2c>)
    5d3a:	4798      	blx	r3
}
    5d3c:	bf00      	nop
    5d3e:	bd80      	pop	{r7, pc}
    5d40:	00005cfd 	.word	0x00005cfd
    5d44:	0000cd21 	.word	0x0000cd21
    5d48:	41018000 	.word	0x41018000
    5d4c:	2000a750 	.word	0x2000a750
    5d50:	00007341 	.word	0x00007341

00005d54 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    5d54:	b580      	push	{r7, lr}
    5d56:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    5d58:	2102      	movs	r1, #2
    5d5a:	2018      	movs	r0, #24
    5d5c:	4b0f      	ldr	r3, [pc, #60]	; (5d9c <CDCUSB_PORT_init+0x48>)
    5d5e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    5d60:	2100      	movs	r1, #0
    5d62:	2018      	movs	r0, #24
    5d64:	4b0e      	ldr	r3, [pc, #56]	; (5da0 <CDCUSB_PORT_init+0x4c>)
    5d66:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    5d68:	2100      	movs	r1, #0
    5d6a:	2018      	movs	r0, #24
    5d6c:	4b0d      	ldr	r3, [pc, #52]	; (5da4 <CDCUSB_PORT_init+0x50>)
    5d6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    5d70:	490d      	ldr	r1, [pc, #52]	; (5da8 <CDCUSB_PORT_init+0x54>)
    5d72:	2018      	movs	r0, #24
    5d74:	4b0d      	ldr	r3, [pc, #52]	; (5dac <CDCUSB_PORT_init+0x58>)
    5d76:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    5d78:	2102      	movs	r1, #2
    5d7a:	2019      	movs	r0, #25
    5d7c:	4b07      	ldr	r3, [pc, #28]	; (5d9c <CDCUSB_PORT_init+0x48>)
    5d7e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    5d80:	2100      	movs	r1, #0
    5d82:	2019      	movs	r0, #25
    5d84:	4b06      	ldr	r3, [pc, #24]	; (5da0 <CDCUSB_PORT_init+0x4c>)
    5d86:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    5d88:	2100      	movs	r1, #0
    5d8a:	2019      	movs	r0, #25
    5d8c:	4b05      	ldr	r3, [pc, #20]	; (5da4 <CDCUSB_PORT_init+0x50>)
    5d8e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    5d90:	4907      	ldr	r1, [pc, #28]	; (5db0 <CDCUSB_PORT_init+0x5c>)
    5d92:	2019      	movs	r0, #25
    5d94:	4b05      	ldr	r3, [pc, #20]	; (5dac <CDCUSB_PORT_init+0x58>)
    5d96:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    5d98:	bf00      	nop
    5d9a:	bd80      	pop	{r7, pc}
    5d9c:	000053ad 	.word	0x000053ad
    5da0:	000053e5 	.word	0x000053e5
    5da4:	00005359 	.word	0x00005359
    5da8:	00180007 	.word	0x00180007
    5dac:	0000538d 	.word	0x0000538d
    5db0:	00190007 	.word	0x00190007

00005db4 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    5db4:	b580      	push	{r7, lr}
    5db6:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    5db8:	2242      	movs	r2, #66	; 0x42
    5dba:	210a      	movs	r1, #10
    5dbc:	4805      	ldr	r0, [pc, #20]	; (5dd4 <CDCUSB_CLOCK_init+0x20>)
    5dbe:	4b06      	ldr	r3, [pc, #24]	; (5dd8 <CDCUSB_CLOCK_init+0x24>)
    5dc0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    5dc2:	4806      	ldr	r0, [pc, #24]	; (5ddc <CDCUSB_CLOCK_init+0x28>)
    5dc4:	4b06      	ldr	r3, [pc, #24]	; (5de0 <CDCUSB_CLOCK_init+0x2c>)
    5dc6:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    5dc8:	4804      	ldr	r0, [pc, #16]	; (5ddc <CDCUSB_CLOCK_init+0x28>)
    5dca:	4b06      	ldr	r3, [pc, #24]	; (5de4 <CDCUSB_CLOCK_init+0x30>)
    5dcc:	4798      	blx	r3
}
    5dce:	bf00      	nop
    5dd0:	bd80      	pop	{r7, pc}
    5dd2:	bf00      	nop
    5dd4:	40001c00 	.word	0x40001c00
    5dd8:	00004b59 	.word	0x00004b59
    5ddc:	40000800 	.word	0x40000800
    5de0:	00004b7f 	.word	0x00004b7f
    5de4:	00004c9f 	.word	0x00004c9f

00005de8 <CDCUSB_init>:

void CDCUSB_init(void)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    5dec:	4b03      	ldr	r3, [pc, #12]	; (5dfc <CDCUSB_init+0x14>)
    5dee:	4798      	blx	r3
	usb_d_init();
    5df0:	4b03      	ldr	r3, [pc, #12]	; (5e00 <CDCUSB_init+0x18>)
    5df2:	4798      	blx	r3
	CDCUSB_PORT_init();
    5df4:	4b03      	ldr	r3, [pc, #12]	; (5e04 <CDCUSB_init+0x1c>)
    5df6:	4798      	blx	r3
}
    5df8:	bf00      	nop
    5dfa:	bd80      	pop	{r7, pc}
    5dfc:	00005db5 	.word	0x00005db5
    5e00:	00007b9d 	.word	0x00007b9d
    5e04:	00005d55 	.word	0x00005d55

00005e08 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    5e08:	b580      	push	{r7, lr}
    5e0a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    5e0c:	4802      	ldr	r0, [pc, #8]	; (5e18 <WATCHDOG_CLOCK_init+0x10>)
    5e0e:	4b03      	ldr	r3, [pc, #12]	; (5e1c <WATCHDOG_CLOCK_init+0x14>)
    5e10:	4798      	blx	r3
}
    5e12:	bf00      	nop
    5e14:	bd80      	pop	{r7, pc}
    5e16:	bf00      	nop
    5e18:	40000800 	.word	0x40000800
    5e1c:	00004bff 	.word	0x00004bff

00005e20 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    5e20:	b580      	push	{r7, lr}
    5e22:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    5e24:	4b03      	ldr	r3, [pc, #12]	; (5e34 <WATCHDOG_init+0x14>)
    5e26:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    5e28:	4903      	ldr	r1, [pc, #12]	; (5e38 <WATCHDOG_init+0x18>)
    5e2a:	4804      	ldr	r0, [pc, #16]	; (5e3c <WATCHDOG_init+0x1c>)
    5e2c:	4b04      	ldr	r3, [pc, #16]	; (5e40 <WATCHDOG_init+0x20>)
    5e2e:	4798      	blx	r3
}
    5e30:	bf00      	nop
    5e32:	bd80      	pop	{r7, pc}
    5e34:	00005e09 	.word	0x00005e09
    5e38:	40002000 	.word	0x40002000
    5e3c:	2000a948 	.word	0x2000a948
    5e40:	0000542d 	.word	0x0000542d

00005e44 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    5e44:	b580      	push	{r7, lr}
    5e46:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    5e48:	4904      	ldr	r1, [pc, #16]	; (5e5c <CAN_CCU_PORT_init+0x18>)
    5e4a:	202d      	movs	r0, #45	; 0x2d
    5e4c:	4b04      	ldr	r3, [pc, #16]	; (5e60 <CAN_CCU_PORT_init+0x1c>)
    5e4e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    5e50:	4904      	ldr	r1, [pc, #16]	; (5e64 <CAN_CCU_PORT_init+0x20>)
    5e52:	202c      	movs	r0, #44	; 0x2c
    5e54:	4b02      	ldr	r3, [pc, #8]	; (5e60 <CAN_CCU_PORT_init+0x1c>)
    5e56:	4798      	blx	r3
}
    5e58:	bf00      	nop
    5e5a:	bd80      	pop	{r7, pc}
    5e5c:	002d0007 	.word	0x002d0007
    5e60:	0000538d 	.word	0x0000538d
    5e64:	002c0007 	.word	0x002c0007

00005e68 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    5e68:	b580      	push	{r7, lr}
    5e6a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    5e6c:	4807      	ldr	r0, [pc, #28]	; (5e8c <CAN_CCU_init+0x24>)
    5e6e:	4b08      	ldr	r3, [pc, #32]	; (5e90 <CAN_CCU_init+0x28>)
    5e70:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5e72:	2243      	movs	r2, #67	; 0x43
    5e74:	211c      	movs	r1, #28
    5e76:	4807      	ldr	r0, [pc, #28]	; (5e94 <CAN_CCU_init+0x2c>)
    5e78:	4b07      	ldr	r3, [pc, #28]	; (5e98 <CAN_CCU_init+0x30>)
    5e7a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    5e7c:	4907      	ldr	r1, [pc, #28]	; (5e9c <CAN_CCU_init+0x34>)
    5e7e:	4808      	ldr	r0, [pc, #32]	; (5ea0 <CAN_CCU_init+0x38>)
    5e80:	4b08      	ldr	r3, [pc, #32]	; (5ea4 <CAN_CCU_init+0x3c>)
    5e82:	4798      	blx	r3
	CAN_CCU_PORT_init();
    5e84:	4b08      	ldr	r3, [pc, #32]	; (5ea8 <CAN_CCU_init+0x40>)
    5e86:	4798      	blx	r3
}
    5e88:	bf00      	nop
    5e8a:	bd80      	pop	{r7, pc}
    5e8c:	40000800 	.word	0x40000800
    5e90:	00004bbf 	.word	0x00004bbf
    5e94:	40001c00 	.word	0x40001c00
    5e98:	00004b59 	.word	0x00004b59
    5e9c:	42000400 	.word	0x42000400
    5ea0:	2000a820 	.word	0x2000a820
    5ea4:	000065cd 	.word	0x000065cd
    5ea8:	00005e45 	.word	0x00005e45

00005eac <system_init>:

void system_init(void)
{
    5eac:	b580      	push	{r7, lr}
    5eae:	af00      	add	r7, sp, #0
	init_mcu();
    5eb0:	4b5e      	ldr	r3, [pc, #376]	; (602c <system_init+0x180>)
    5eb2:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    5eb4:	2100      	movs	r1, #0
    5eb6:	2007      	movs	r0, #7
    5eb8:	4b5d      	ldr	r3, [pc, #372]	; (6030 <system_init+0x184>)
    5eba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    5ebc:	2102      	movs	r1, #2
    5ebe:	2007      	movs	r0, #7
    5ec0:	4b5c      	ldr	r3, [pc, #368]	; (6034 <system_init+0x188>)
    5ec2:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    5ec4:	f04f 31ff 	mov.w	r1, #4294967295
    5ec8:	2007      	movs	r0, #7
    5eca:	4b5b      	ldr	r3, [pc, #364]	; (6038 <system_init+0x18c>)
    5ecc:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    5ece:	2101      	movs	r1, #1
    5ed0:	200f      	movs	r0, #15
    5ed2:	4b57      	ldr	r3, [pc, #348]	; (6030 <system_init+0x184>)
    5ed4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    5ed6:	2102      	movs	r1, #2
    5ed8:	200f      	movs	r0, #15
    5eda:	4b56      	ldr	r3, [pc, #344]	; (6034 <system_init+0x188>)
    5edc:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    5ede:	f04f 31ff 	mov.w	r1, #4294967295
    5ee2:	200f      	movs	r0, #15
    5ee4:	4b54      	ldr	r3, [pc, #336]	; (6038 <system_init+0x18c>)
    5ee6:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    5ee8:	2101      	movs	r1, #1
    5eea:	2013      	movs	r0, #19
    5eec:	4b50      	ldr	r3, [pc, #320]	; (6030 <system_init+0x184>)
    5eee:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    5ef0:	2102      	movs	r1, #2
    5ef2:	2013      	movs	r0, #19
    5ef4:	4b4f      	ldr	r3, [pc, #316]	; (6034 <system_init+0x188>)
    5ef6:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    5ef8:	f04f 31ff 	mov.w	r1, #4294967295
    5efc:	2013      	movs	r0, #19
    5efe:	4b4e      	ldr	r3, [pc, #312]	; (6038 <system_init+0x18c>)
    5f00:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    5f02:	2101      	movs	r1, #1
    5f04:	201b      	movs	r0, #27
    5f06:	4b4a      	ldr	r3, [pc, #296]	; (6030 <system_init+0x184>)
    5f08:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    5f0a:	2102      	movs	r1, #2
    5f0c:	201b      	movs	r0, #27
    5f0e:	4b49      	ldr	r3, [pc, #292]	; (6034 <system_init+0x188>)
    5f10:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    5f12:	f04f 31ff 	mov.w	r1, #4294967295
    5f16:	201b      	movs	r0, #27
    5f18:	4b47      	ldr	r3, [pc, #284]	; (6038 <system_init+0x18c>)
    5f1a:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    5f1c:	2101      	movs	r1, #1
    5f1e:	2027      	movs	r0, #39	; 0x27
    5f20:	4b44      	ldr	r3, [pc, #272]	; (6034 <system_init+0x188>)
    5f22:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    5f24:	2102      	movs	r1, #2
    5f26:	2027      	movs	r0, #39	; 0x27
    5f28:	4b44      	ldr	r3, [pc, #272]	; (603c <system_init+0x190>)
    5f2a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    5f2c:	f04f 31ff 	mov.w	r1, #4294967295
    5f30:	2027      	movs	r0, #39	; 0x27
    5f32:	4b41      	ldr	r3, [pc, #260]	; (6038 <system_init+0x18c>)
    5f34:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    5f36:	2101      	movs	r1, #1
    5f38:	203d      	movs	r0, #61	; 0x3d
    5f3a:	4b3d      	ldr	r3, [pc, #244]	; (6030 <system_init+0x184>)
    5f3c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    5f3e:	2102      	movs	r1, #2
    5f40:	203d      	movs	r0, #61	; 0x3d
    5f42:	4b3c      	ldr	r3, [pc, #240]	; (6034 <system_init+0x188>)
    5f44:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    5f46:	f04f 31ff 	mov.w	r1, #4294967295
    5f4a:	203d      	movs	r0, #61	; 0x3d
    5f4c:	4b3a      	ldr	r3, [pc, #232]	; (6038 <system_init+0x18c>)
    5f4e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    5f50:	2101      	movs	r1, #1
    5f52:	203f      	movs	r0, #63	; 0x3f
    5f54:	4b37      	ldr	r3, [pc, #220]	; (6034 <system_init+0x188>)
    5f56:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    5f58:	2101      	movs	r1, #1
    5f5a:	203f      	movs	r0, #63	; 0x3f
    5f5c:	4b37      	ldr	r3, [pc, #220]	; (603c <system_init+0x190>)
    5f5e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    5f60:	f04f 31ff 	mov.w	r1, #4294967295
    5f64:	203f      	movs	r0, #63	; 0x3f
    5f66:	4b34      	ldr	r3, [pc, #208]	; (6038 <system_init+0x18c>)
    5f68:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    5f6a:	2100      	movs	r1, #0
    5f6c:	204d      	movs	r0, #77	; 0x4d
    5f6e:	4b30      	ldr	r3, [pc, #192]	; (6030 <system_init+0x184>)
    5f70:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    5f72:	2102      	movs	r1, #2
    5f74:	204d      	movs	r0, #77	; 0x4d
    5f76:	4b2f      	ldr	r3, [pc, #188]	; (6034 <system_init+0x188>)
    5f78:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    5f7a:	f04f 31ff 	mov.w	r1, #4294967295
    5f7e:	204d      	movs	r0, #77	; 0x4d
    5f80:	4b2d      	ldr	r3, [pc, #180]	; (6038 <system_init+0x18c>)
    5f82:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    5f84:	2101      	movs	r1, #1
    5f86:	204e      	movs	r0, #78	; 0x4e
    5f88:	4b29      	ldr	r3, [pc, #164]	; (6030 <system_init+0x184>)
    5f8a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    5f8c:	2102      	movs	r1, #2
    5f8e:	204e      	movs	r0, #78	; 0x4e
    5f90:	4b28      	ldr	r3, [pc, #160]	; (6034 <system_init+0x188>)
    5f92:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    5f94:	f04f 31ff 	mov.w	r1, #4294967295
    5f98:	204e      	movs	r0, #78	; 0x4e
    5f9a:	4b27      	ldr	r3, [pc, #156]	; (6038 <system_init+0x18c>)
    5f9c:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    5f9e:	2100      	movs	r1, #0
    5fa0:	204f      	movs	r0, #79	; 0x4f
    5fa2:	4b23      	ldr	r3, [pc, #140]	; (6030 <system_init+0x184>)
    5fa4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    5fa6:	2102      	movs	r1, #2
    5fa8:	204f      	movs	r0, #79	; 0x4f
    5faa:	4b22      	ldr	r3, [pc, #136]	; (6034 <system_init+0x188>)
    5fac:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    5fae:	f04f 31ff 	mov.w	r1, #4294967295
    5fb2:	204f      	movs	r0, #79	; 0x4f
    5fb4:	4b20      	ldr	r3, [pc, #128]	; (6038 <system_init+0x18c>)
    5fb6:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    5fb8:	2100      	movs	r1, #0
    5fba:	2052      	movs	r0, #82	; 0x52
    5fbc:	4b1c      	ldr	r3, [pc, #112]	; (6030 <system_init+0x184>)
    5fbe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    5fc0:	2102      	movs	r1, #2
    5fc2:	2052      	movs	r0, #82	; 0x52
    5fc4:	4b1b      	ldr	r3, [pc, #108]	; (6034 <system_init+0x188>)
    5fc6:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    5fc8:	f04f 31ff 	mov.w	r1, #4294967295
    5fcc:	2052      	movs	r0, #82	; 0x52
    5fce:	4b1a      	ldr	r3, [pc, #104]	; (6038 <system_init+0x18c>)
    5fd0:	4798      	blx	r3

	CRC_CALC_init();
    5fd2:	4b1b      	ldr	r3, [pc, #108]	; (6040 <system_init+0x194>)
    5fd4:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    5fd6:	4b1b      	ldr	r3, [pc, #108]	; (6044 <system_init+0x198>)
    5fd8:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    5fda:	4b1b      	ldr	r3, [pc, #108]	; (6048 <system_init+0x19c>)
    5fdc:	4798      	blx	r3

	QSPI_N25Q256_init();
    5fde:	4b1b      	ldr	r3, [pc, #108]	; (604c <system_init+0x1a0>)
    5fe0:	4798      	blx	r3

	DATETIME_CLOCK_init();
    5fe2:	4b1b      	ldr	r3, [pc, #108]	; (6050 <system_init+0x1a4>)
    5fe4:	4798      	blx	r3

	I2C_SHARED_init();
    5fe6:	4b1b      	ldr	r3, [pc, #108]	; (6054 <system_init+0x1a8>)
    5fe8:	4798      	blx	r3

	SPI_TEMP_init();
    5fea:	4b1b      	ldr	r3, [pc, #108]	; (6058 <system_init+0x1ac>)
    5fec:	4798      	blx	r3

	I2C_EXPANDER_init();
    5fee:	4b1b      	ldr	r3, [pc, #108]	; (605c <system_init+0x1b0>)
    5ff0:	4798      	blx	r3

	SPI_HI3593_init();
    5ff2:	4b1b      	ldr	r3, [pc, #108]	; (6060 <system_init+0x1b4>)
    5ff4:	4798      	blx	r3

	I2C_EEPROM_init();
    5ff6:	4b1b      	ldr	r3, [pc, #108]	; (6064 <system_init+0x1b8>)
    5ff8:	4798      	blx	r3

	TIMER_USB_init();
    5ffa:	4b1b      	ldr	r3, [pc, #108]	; (6068 <system_init+0x1bc>)
    5ffc:	4798      	blx	r3
	TIMER_ARINC_init();
    5ffe:	4b1b      	ldr	r3, [pc, #108]	; (606c <system_init+0x1c0>)
    6000:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    6002:	4b1b      	ldr	r3, [pc, #108]	; (6070 <system_init+0x1c4>)
    6004:	4798      	blx	r3
	TIMER_INTERFACE_init();
    6006:	4b1b      	ldr	r3, [pc, #108]	; (6074 <system_init+0x1c8>)
    6008:	4798      	blx	r3
	TIMER_EVENT_init();
    600a:	4b1b      	ldr	r3, [pc, #108]	; (6078 <system_init+0x1cc>)
    600c:	4798      	blx	r3
	LIVE_PULSE_init();
    600e:	4b1b      	ldr	r3, [pc, #108]	; (607c <system_init+0x1d0>)
    6010:	4798      	blx	r3

	TIMER_HVAC_init();
    6012:	4b1b      	ldr	r3, [pc, #108]	; (6080 <system_init+0x1d4>)
    6014:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    6016:	4b1b      	ldr	r3, [pc, #108]	; (6084 <system_init+0x1d8>)
    6018:	4798      	blx	r3

	CDCUSB_init();
    601a:	4b1b      	ldr	r3, [pc, #108]	; (6088 <system_init+0x1dc>)
    601c:	4798      	blx	r3

	WATCHDOG_init();
    601e:	4b1b      	ldr	r3, [pc, #108]	; (608c <system_init+0x1e0>)
    6020:	4798      	blx	r3
	CAN_CCU_init();
    6022:	4b1b      	ldr	r3, [pc, #108]	; (6090 <system_init+0x1e4>)
    6024:	4798      	blx	r3
}
    6026:	bf00      	nop
    6028:	bd80      	pop	{r7, pc}
    602a:	bf00      	nop
    602c:	0000541d 	.word	0x0000541d
    6030:	000053e5 	.word	0x000053e5
    6034:	000053ad 	.word	0x000053ad
    6038:	0000538d 	.word	0x0000538d
    603c:	00005359 	.word	0x00005359
    6040:	0000547d 	.word	0x0000547d
    6044:	000054a9 	.word	0x000054a9
    6048:	000055b5 	.word	0x000055b5
    604c:	000056fd 	.word	0x000056fd
    6050:	00005741 	.word	0x00005741
    6054:	000057d1 	.word	0x000057d1
    6058:	0000589d 	.word	0x0000589d
    605c:	00005935 	.word	0x00005935
    6060:	00005a01 	.word	0x00005a01
    6064:	00005a99 	.word	0x00005a99
    6068:	00005ac5 	.word	0x00005ac5
    606c:	00005b0d 	.word	0x00005b0d
    6070:	00005b55 	.word	0x00005b55
    6074:	00005b9d 	.word	0x00005b9d
    6078:	00005be5 	.word	0x00005be5
    607c:	00005c6d 	.word	0x00005c6d
    6080:	00005ccd 	.word	0x00005ccd
    6084:	00005d25 	.word	0x00005d25
    6088:	00005de9 	.word	0x00005de9
    608c:	00005e21 	.word	0x00005e21
    6090:	00005e69 	.word	0x00005e69

00006094 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    6094:	b480      	push	{r7}
    6096:	b083      	sub	sp, #12
    6098:	af00      	add	r7, sp, #0
    609a:	4603      	mov	r3, r0
    609c:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    609e:	88fb      	ldrh	r3, [r7, #6]
    60a0:	f003 0303 	and.w	r3, r3, #3
    60a4:	2b00      	cmp	r3, #0
    60a6:	d001      	beq.n	60ac <leap_year+0x18>
		return false;
    60a8:	2300      	movs	r3, #0
    60aa:	e000      	b.n	60ae <leap_year+0x1a>
	} else {
		return true;
    60ac:	2301      	movs	r3, #1
	}
}
    60ae:	4618      	mov	r0, r3
    60b0:	370c      	adds	r7, #12
    60b2:	46bd      	mov	sp, r7
    60b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    60b8:	4770      	bx	lr
	...

000060bc <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    60bc:	b580      	push	{r7, lr}
    60be:	b084      	sub	sp, #16
    60c0:	af00      	add	r7, sp, #0
    60c2:	6078      	str	r0, [r7, #4]
    60c4:	460b      	mov	r3, r1
    60c6:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    60c8:	2300      	movs	r3, #0
    60ca:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	b29b      	uxth	r3, r3
    60d0:	4618      	mov	r0, r3
    60d2:	4b2f      	ldr	r3, [pc, #188]	; (6190 <get_secs_in_month+0xd4>)
    60d4:	4798      	blx	r3
    60d6:	4603      	mov	r3, r0
    60d8:	2b00      	cmp	r3, #0
    60da:	d028      	beq.n	612e <get_secs_in_month+0x72>
		switch (month) {
    60dc:	78fb      	ldrb	r3, [r7, #3]
    60de:	3b01      	subs	r3, #1
    60e0:	2b0b      	cmp	r3, #11
    60e2:	d84c      	bhi.n	617e <get_secs_in_month+0xc2>
    60e4:	a201      	add	r2, pc, #4	; (adr r2, 60ec <get_secs_in_month+0x30>)
    60e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    60ea:	bf00      	nop
    60ec:	0000611d 	.word	0x0000611d
    60f0:	00006123 	.word	0x00006123
    60f4:	0000611d 	.word	0x0000611d
    60f8:	00006129 	.word	0x00006129
    60fc:	0000611d 	.word	0x0000611d
    6100:	00006129 	.word	0x00006129
    6104:	0000611d 	.word	0x0000611d
    6108:	0000611d 	.word	0x0000611d
    610c:	00006129 	.word	0x00006129
    6110:	0000611d 	.word	0x0000611d
    6114:	00006129 	.word	0x00006129
    6118:	0000611d 	.word	0x0000611d
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    611c:	4b1d      	ldr	r3, [pc, #116]	; (6194 <get_secs_in_month+0xd8>)
    611e:	60fb      	str	r3, [r7, #12]
			break;
    6120:	e030      	b.n	6184 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    6122:	4b1d      	ldr	r3, [pc, #116]	; (6198 <get_secs_in_month+0xdc>)
    6124:	60fb      	str	r3, [r7, #12]
			break;
    6126:	e02d      	b.n	6184 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    6128:	4b1c      	ldr	r3, [pc, #112]	; (619c <get_secs_in_month+0xe0>)
    612a:	60fb      	str	r3, [r7, #12]
			break;
    612c:	e02a      	b.n	6184 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    612e:	78fb      	ldrb	r3, [r7, #3]
    6130:	3b01      	subs	r3, #1
    6132:	2b0b      	cmp	r3, #11
    6134:	d825      	bhi.n	6182 <get_secs_in_month+0xc6>
    6136:	a201      	add	r2, pc, #4	; (adr r2, 613c <get_secs_in_month+0x80>)
    6138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    613c:	0000616d 	.word	0x0000616d
    6140:	00006173 	.word	0x00006173
    6144:	0000616d 	.word	0x0000616d
    6148:	00006179 	.word	0x00006179
    614c:	0000616d 	.word	0x0000616d
    6150:	00006179 	.word	0x00006179
    6154:	0000616d 	.word	0x0000616d
    6158:	0000616d 	.word	0x0000616d
    615c:	00006179 	.word	0x00006179
    6160:	0000616d 	.word	0x0000616d
    6164:	00006179 	.word	0x00006179
    6168:	0000616d 	.word	0x0000616d
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    616c:	4b09      	ldr	r3, [pc, #36]	; (6194 <get_secs_in_month+0xd8>)
    616e:	60fb      	str	r3, [r7, #12]
			break;
    6170:	e008      	b.n	6184 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    6172:	4b0b      	ldr	r3, [pc, #44]	; (61a0 <get_secs_in_month+0xe4>)
    6174:	60fb      	str	r3, [r7, #12]
			break;
    6176:	e005      	b.n	6184 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    6178:	4b08      	ldr	r3, [pc, #32]	; (619c <get_secs_in_month+0xe0>)
    617a:	60fb      	str	r3, [r7, #12]
			break;
    617c:	e002      	b.n	6184 <get_secs_in_month+0xc8>
			break;
    617e:	bf00      	nop
    6180:	e000      	b.n	6184 <get_secs_in_month+0xc8>
		default:
			break;
    6182:	bf00      	nop
		}
	}

	return sec_in_month;
    6184:	68fb      	ldr	r3, [r7, #12]
}
    6186:	4618      	mov	r0, r3
    6188:	3710      	adds	r7, #16
    618a:	46bd      	mov	sp, r7
    618c:	bd80      	pop	{r7, pc}
    618e:	bf00      	nop
    6190:	00006095 	.word	0x00006095
    6194:	0028de80 	.word	0x0028de80
    6198:	00263b80 	.word	0x00263b80
    619c:	00278d00 	.word	0x00278d00
    61a0:	0024ea00 	.word	0x0024ea00

000061a4 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    61a4:	b580      	push	{r7, lr}
    61a6:	b08a      	sub	sp, #40	; 0x28
    61a8:	af00      	add	r7, sp, #0
    61aa:	60f8      	str	r0, [r7, #12]
    61ac:	60b9      	str	r1, [r7, #8]
    61ae:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    61b0:	68fb      	ldr	r3, [r7, #12]
    61b2:	699b      	ldr	r3, [r3, #24]
    61b4:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    61b6:	2301      	movs	r3, #1
    61b8:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    61ba:	2301      	movs	r3, #1
    61bc:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    61be:	2300      	movs	r3, #0
    61c0:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    61c2:	2300      	movs	r3, #0
    61c4:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    61c6:	68bb      	ldr	r3, [r7, #8]
    61c8:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    61ca:	6a3b      	ldr	r3, [r7, #32]
    61cc:	b29b      	uxth	r3, r3
    61ce:	4618      	mov	r0, r3
    61d0:	4b32      	ldr	r3, [pc, #200]	; (629c <convert_timestamp_to_datetime+0xf8>)
    61d2:	4798      	blx	r3
    61d4:	4603      	mov	r3, r0
    61d6:	2b00      	cmp	r3, #0
    61d8:	d001      	beq.n	61de <convert_timestamp_to_datetime+0x3a>
    61da:	4b31      	ldr	r3, [pc, #196]	; (62a0 <convert_timestamp_to_datetime+0xfc>)
    61dc:	e000      	b.n	61e0 <convert_timestamp_to_datetime+0x3c>
    61de:	4b31      	ldr	r3, [pc, #196]	; (62a4 <convert_timestamp_to_datetime+0x100>)
    61e0:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    61e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    61e4:	69bb      	ldr	r3, [r7, #24]
    61e6:	429a      	cmp	r2, r3
    61e8:	d307      	bcc.n	61fa <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    61ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    61ec:	69bb      	ldr	r3, [r7, #24]
    61ee:	1ad3      	subs	r3, r2, r3
    61f0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    61f2:	6a3b      	ldr	r3, [r7, #32]
    61f4:	3301      	adds	r3, #1
    61f6:	623b      	str	r3, [r7, #32]
    61f8:	e7e7      	b.n	61ca <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    61fa:	7ffb      	ldrb	r3, [r7, #31]
    61fc:	4619      	mov	r1, r3
    61fe:	6a38      	ldr	r0, [r7, #32]
    6200:	4b29      	ldr	r3, [pc, #164]	; (62a8 <convert_timestamp_to_datetime+0x104>)
    6202:	4798      	blx	r3
    6204:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    6206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6208:	697b      	ldr	r3, [r7, #20]
    620a:	429a      	cmp	r2, r3
    620c:	d307      	bcc.n	621e <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    620e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6210:	697b      	ldr	r3, [r7, #20]
    6212:	1ad3      	subs	r3, r2, r3
    6214:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    6216:	7ffb      	ldrb	r3, [r7, #31]
    6218:	3301      	adds	r3, #1
    621a:	77fb      	strb	r3, [r7, #31]
    621c:	e7ed      	b.n	61fa <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6220:	4a22      	ldr	r2, [pc, #136]	; (62ac <convert_timestamp_to_datetime+0x108>)
    6222:	4293      	cmp	r3, r2
    6224:	d909      	bls.n	623a <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    6226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6228:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    622c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    6230:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    6232:	7fbb      	ldrb	r3, [r7, #30]
    6234:	3301      	adds	r3, #1
    6236:	77bb      	strb	r3, [r7, #30]
    6238:	e7f1      	b.n	621e <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    623c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    6240:	d307      	bcc.n	6252 <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    6242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6244:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    6248:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    624a:	7f7b      	ldrb	r3, [r7, #29]
    624c:	3301      	adds	r3, #1
    624e:	777b      	strb	r3, [r7, #29]
    6250:	e7f3      	b.n	623a <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    6252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6254:	2b3b      	cmp	r3, #59	; 0x3b
    6256:	d906      	bls.n	6266 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    6258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    625a:	3b3c      	subs	r3, #60	; 0x3c
    625c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    625e:	7f3b      	ldrb	r3, [r7, #28]
    6260:	3301      	adds	r3, #1
    6262:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    6264:	e7f5      	b.n	6252 <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    6266:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    6268:	6a3b      	ldr	r3, [r7, #32]
    626a:	b29a      	uxth	r2, r3
    626c:	687b      	ldr	r3, [r7, #4]
    626e:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    6270:	687b      	ldr	r3, [r7, #4]
    6272:	7ffa      	ldrb	r2, [r7, #31]
    6274:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    6276:	687b      	ldr	r3, [r7, #4]
    6278:	7fba      	ldrb	r2, [r7, #30]
    627a:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    627c:	687b      	ldr	r3, [r7, #4]
    627e:	7f7a      	ldrb	r2, [r7, #29]
    6280:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	7f3a      	ldrb	r2, [r7, #28]
    6286:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    6288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    628a:	b2da      	uxtb	r2, r3
    628c:	687b      	ldr	r3, [r7, #4]
    628e:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    6290:	2300      	movs	r3, #0
}
    6292:	4618      	mov	r0, r3
    6294:	3728      	adds	r7, #40	; 0x28
    6296:	46bd      	mov	sp, r7
    6298:	bd80      	pop	{r7, pc}
    629a:	bf00      	nop
    629c:	00006095 	.word	0x00006095
    62a0:	01e28500 	.word	0x01e28500
    62a4:	01e13380 	.word	0x01e13380
    62a8:	000060bd 	.word	0x000060bd
    62ac:	0001517f 	.word	0x0001517f

000062b0 <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    62b0:	b580      	push	{r7, lr}
    62b2:	b086      	sub	sp, #24
    62b4:	af00      	add	r7, sp, #0
    62b6:	6078      	str	r0, [r7, #4]
    62b8:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    62ba:	2300      	movs	r3, #0
    62bc:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    62be:	2300      	movs	r3, #0
    62c0:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    62c2:	683b      	ldr	r3, [r7, #0]
    62c4:	88db      	ldrh	r3, [r3, #6]
    62c6:	b2da      	uxtb	r2, r3
    62c8:	687b      	ldr	r3, [r7, #4]
    62ca:	699b      	ldr	r3, [r3, #24]
    62cc:	b2db      	uxtb	r3, r3
    62ce:	1ad3      	subs	r3, r2, r3
    62d0:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    62d2:	683b      	ldr	r3, [r7, #0]
    62d4:	795b      	ldrb	r3, [r3, #5]
    62d6:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    62d8:	683b      	ldr	r3, [r7, #0]
    62da:	791b      	ldrb	r3, [r3, #4]
    62dc:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    62de:	683b      	ldr	r3, [r7, #0]
    62e0:	789b      	ldrb	r3, [r3, #2]
    62e2:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    62e4:	683b      	ldr	r3, [r7, #0]
    62e6:	785b      	ldrb	r3, [r3, #1]
    62e8:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    62ea:	683b      	ldr	r3, [r7, #0]
    62ec:	781b      	ldrb	r3, [r3, #0]
    62ee:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    62f0:	2300      	movs	r3, #0
    62f2:	613b      	str	r3, [r7, #16]
    62f4:	e01a      	b.n	632c <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    62f6:	687b      	ldr	r3, [r7, #4]
    62f8:	699b      	ldr	r3, [r3, #24]
    62fa:	b29a      	uxth	r2, r3
    62fc:	693b      	ldr	r3, [r7, #16]
    62fe:	b29b      	uxth	r3, r3
    6300:	4413      	add	r3, r2
    6302:	b29b      	uxth	r3, r3
    6304:	4618      	mov	r0, r3
    6306:	4b29      	ldr	r3, [pc, #164]	; (63ac <convert_datetime_to_timestamp+0xfc>)
    6308:	4798      	blx	r3
    630a:	4603      	mov	r3, r0
    630c:	2b00      	cmp	r3, #0
    630e:	d006      	beq.n	631e <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    6310:	697b      	ldr	r3, [r7, #20]
    6312:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    6316:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    631a:	617b      	str	r3, [r7, #20]
    631c:	e003      	b.n	6326 <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    631e:	697a      	ldr	r2, [r7, #20]
    6320:	4b23      	ldr	r3, [pc, #140]	; (63b0 <convert_datetime_to_timestamp+0x100>)
    6322:	4413      	add	r3, r2
    6324:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    6326:	693b      	ldr	r3, [r7, #16]
    6328:	3301      	adds	r3, #1
    632a:	613b      	str	r3, [r7, #16]
    632c:	7bfa      	ldrb	r2, [r7, #15]
    632e:	693b      	ldr	r3, [r7, #16]
    6330:	429a      	cmp	r2, r3
    6332:	d8e0      	bhi.n	62f6 <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    6334:	2301      	movs	r3, #1
    6336:	613b      	str	r3, [r7, #16]
    6338:	e00f      	b.n	635a <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    633a:	683b      	ldr	r3, [r7, #0]
    633c:	88db      	ldrh	r3, [r3, #6]
    633e:	461a      	mov	r2, r3
    6340:	693b      	ldr	r3, [r7, #16]
    6342:	b2db      	uxtb	r3, r3
    6344:	4619      	mov	r1, r3
    6346:	4610      	mov	r0, r2
    6348:	4b1a      	ldr	r3, [pc, #104]	; (63b4 <convert_datetime_to_timestamp+0x104>)
    634a:	4798      	blx	r3
    634c:	4602      	mov	r2, r0
    634e:	697b      	ldr	r3, [r7, #20]
    6350:	4413      	add	r3, r2
    6352:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    6354:	693b      	ldr	r3, [r7, #16]
    6356:	3301      	adds	r3, #1
    6358:	613b      	str	r3, [r7, #16]
    635a:	7bba      	ldrb	r2, [r7, #14]
    635c:	693b      	ldr	r3, [r7, #16]
    635e:	429a      	cmp	r2, r3
    6360:	d8eb      	bhi.n	633a <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    6362:	7b7b      	ldrb	r3, [r7, #13]
    6364:	3b01      	subs	r3, #1
    6366:	4a14      	ldr	r2, [pc, #80]	; (63b8 <convert_datetime_to_timestamp+0x108>)
    6368:	fb02 f303 	mul.w	r3, r2, r3
    636c:	461a      	mov	r2, r3
    636e:	697b      	ldr	r3, [r7, #20]
    6370:	4413      	add	r3, r2
    6372:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    6374:	7b3b      	ldrb	r3, [r7, #12]
    6376:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    637a:	fb02 f303 	mul.w	r3, r2, r3
    637e:	461a      	mov	r2, r3
    6380:	697b      	ldr	r3, [r7, #20]
    6382:	4413      	add	r3, r2
    6384:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    6386:	7afa      	ldrb	r2, [r7, #11]
    6388:	4613      	mov	r3, r2
    638a:	011b      	lsls	r3, r3, #4
    638c:	1a9b      	subs	r3, r3, r2
    638e:	009b      	lsls	r3, r3, #2
    6390:	461a      	mov	r2, r3
    6392:	697b      	ldr	r3, [r7, #20]
    6394:	4413      	add	r3, r2
    6396:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    6398:	7abb      	ldrb	r3, [r7, #10]
    639a:	697a      	ldr	r2, [r7, #20]
    639c:	4413      	add	r3, r2
    639e:	617b      	str	r3, [r7, #20]

	return tmp;
    63a0:	697b      	ldr	r3, [r7, #20]
}
    63a2:	4618      	mov	r0, r3
    63a4:	3718      	adds	r7, #24
    63a6:	46bd      	mov	sp, r7
    63a8:	bd80      	pop	{r7, pc}
    63aa:	bf00      	nop
    63ac:	00006095 	.word	0x00006095
    63b0:	01e13380 	.word	0x01e13380
    63b4:	000060bd 	.word	0x000060bd
    63b8:	00015180 	.word	0x00015180

000063bc <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    63bc:	b580      	push	{r7, lr}
    63be:	b084      	sub	sp, #16
    63c0:	af00      	add	r7, sp, #0
    63c2:	6078      	str	r0, [r7, #4]
    63c4:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    63c6:	2300      	movs	r3, #0
    63c8:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    63ca:	687b      	ldr	r3, [r7, #4]
    63cc:	2b00      	cmp	r3, #0
    63ce:	bf14      	ite	ne
    63d0:	2301      	movne	r3, #1
    63d2:	2300      	moveq	r3, #0
    63d4:	b2db      	uxtb	r3, r3
    63d6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    63da:	4911      	ldr	r1, [pc, #68]	; (6420 <calendar_init+0x64>)
    63dc:	4618      	mov	r0, r3
    63de:	4b11      	ldr	r3, [pc, #68]	; (6424 <calendar_init+0x68>)
    63e0:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	681a      	ldr	r2, [r3, #0]
    63e6:	683b      	ldr	r3, [r7, #0]
    63e8:	429a      	cmp	r2, r3
    63ea:	d101      	bne.n	63f0 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    63ec:	2300      	movs	r3, #0
    63ee:	e013      	b.n	6418 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    63f0:	687b      	ldr	r3, [r7, #4]
    63f2:	681b      	ldr	r3, [r3, #0]
    63f4:	2b00      	cmp	r3, #0
    63f6:	d002      	beq.n	63fe <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    63f8:	f06f 0311 	mvn.w	r3, #17
    63fc:	e00c      	b.n	6418 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    63fe:	687b      	ldr	r3, [r7, #4]
    6400:	683a      	ldr	r2, [r7, #0]
    6402:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    6404:	687b      	ldr	r3, [r7, #4]
    6406:	4618      	mov	r0, r3
    6408:	4b07      	ldr	r3, [pc, #28]	; (6428 <calendar_init+0x6c>)
    640a:	4798      	blx	r3
    640c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	f240 72b2 	movw	r2, #1970	; 0x7b2
    6414:	619a      	str	r2, [r3, #24]

	return ret;
    6416:	68fb      	ldr	r3, [r7, #12]
}
    6418:	4618      	mov	r0, r3
    641a:	3710      	adds	r7, #16
    641c:	46bd      	mov	sp, r7
    641e:	bd80      	pop	{r7, pc}
    6420:	00020a04 	.word	0x00020a04
    6424:	00008145 	.word	0x00008145
    6428:	0000aaa9 	.word	0x0000aaa9

0000642c <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    642c:	b580      	push	{r7, lr}
    642e:	b082      	sub	sp, #8
    6430:	af00      	add	r7, sp, #0
    6432:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    6434:	687b      	ldr	r3, [r7, #4]
    6436:	2b00      	cmp	r3, #0
    6438:	bf14      	ite	ne
    643a:	2301      	movne	r3, #1
    643c:	2300      	moveq	r3, #0
    643e:	b2db      	uxtb	r3, r3
    6440:	f240 12e5 	movw	r2, #485	; 0x1e5
    6444:	4906      	ldr	r1, [pc, #24]	; (6460 <calendar_enable+0x34>)
    6446:	4618      	mov	r0, r3
    6448:	4b06      	ldr	r3, [pc, #24]	; (6464 <calendar_enable+0x38>)
    644a:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    644c:	687b      	ldr	r3, [r7, #4]
    644e:	4618      	mov	r0, r3
    6450:	4b05      	ldr	r3, [pc, #20]	; (6468 <calendar_enable+0x3c>)
    6452:	4798      	blx	r3

	return ERR_NONE;
    6454:	2300      	movs	r3, #0
}
    6456:	4618      	mov	r0, r3
    6458:	3708      	adds	r7, #8
    645a:	46bd      	mov	sp, r7
    645c:	bd80      	pop	{r7, pc}
    645e:	bf00      	nop
    6460:	00020a04 	.word	0x00020a04
    6464:	00008145 	.word	0x00008145
    6468:	0000ab61 	.word	0x0000ab61

0000646c <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    646c:	b580      	push	{r7, lr}
    646e:	b086      	sub	sp, #24
    6470:	af00      	add	r7, sp, #0
    6472:	6078      	str	r0, [r7, #4]
    6474:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    6476:	687b      	ldr	r3, [r7, #4]
    6478:	2b00      	cmp	r3, #0
    647a:	bf14      	ite	ne
    647c:	2301      	movne	r3, #1
    647e:	2300      	moveq	r3, #0
    6480:	b2db      	uxtb	r3, r3
    6482:	f44f 7203 	mov.w	r2, #524	; 0x20c
    6486:	4915      	ldr	r1, [pc, #84]	; (64dc <calendar_set_time+0x70>)
    6488:	4618      	mov	r0, r3
    648a:	4b15      	ldr	r3, [pc, #84]	; (64e0 <calendar_set_time+0x74>)
    648c:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    648e:	687b      	ldr	r3, [r7, #4]
    6490:	4618      	mov	r0, r3
    6492:	4b14      	ldr	r3, [pc, #80]	; (64e4 <calendar_set_time+0x78>)
    6494:	4798      	blx	r3
    6496:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    6498:	f107 0308 	add.w	r3, r7, #8
    649c:	461a      	mov	r2, r3
    649e:	6979      	ldr	r1, [r7, #20]
    64a0:	6878      	ldr	r0, [r7, #4]
    64a2:	4b11      	ldr	r3, [pc, #68]	; (64e8 <calendar_set_time+0x7c>)
    64a4:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    64a6:	683b      	ldr	r3, [r7, #0]
    64a8:	781b      	ldrb	r3, [r3, #0]
    64aa:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    64ac:	683b      	ldr	r3, [r7, #0]
    64ae:	785b      	ldrb	r3, [r3, #1]
    64b0:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    64b2:	683b      	ldr	r3, [r7, #0]
    64b4:	789b      	ldrb	r3, [r3, #2]
    64b6:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    64b8:	f107 0308 	add.w	r3, r7, #8
    64bc:	4619      	mov	r1, r3
    64be:	6878      	ldr	r0, [r7, #4]
    64c0:	4b0a      	ldr	r3, [pc, #40]	; (64ec <calendar_set_time+0x80>)
    64c2:	4798      	blx	r3
    64c4:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    64c6:	687b      	ldr	r3, [r7, #4]
    64c8:	6939      	ldr	r1, [r7, #16]
    64ca:	4618      	mov	r0, r3
    64cc:	4b08      	ldr	r3, [pc, #32]	; (64f0 <calendar_set_time+0x84>)
    64ce:	4798      	blx	r3

	return ERR_NONE;
    64d0:	2300      	movs	r3, #0
}
    64d2:	4618      	mov	r0, r3
    64d4:	3718      	adds	r7, #24
    64d6:	46bd      	mov	sp, r7
    64d8:	bd80      	pop	{r7, pc}
    64da:	bf00      	nop
    64dc:	00020a04 	.word	0x00020a04
    64e0:	00008145 	.word	0x00008145
    64e4:	0000abfd 	.word	0x0000abfd
    64e8:	000061a5 	.word	0x000061a5
    64ec:	000062b1 	.word	0x000062b1
    64f0:	0000abad 	.word	0x0000abad

000064f4 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    64f4:	b580      	push	{r7, lr}
    64f6:	b086      	sub	sp, #24
    64f8:	af00      	add	r7, sp, #0
    64fa:	6078      	str	r0, [r7, #4]
    64fc:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    64fe:	687b      	ldr	r3, [r7, #4]
    6500:	2b00      	cmp	r3, #0
    6502:	bf14      	ite	ne
    6504:	2301      	movne	r3, #1
    6506:	2300      	moveq	r3, #0
    6508:	b2db      	uxtb	r3, r3
    650a:	f44f 7209 	mov.w	r2, #548	; 0x224
    650e:	4915      	ldr	r1, [pc, #84]	; (6564 <calendar_set_date+0x70>)
    6510:	4618      	mov	r0, r3
    6512:	4b15      	ldr	r3, [pc, #84]	; (6568 <calendar_set_date+0x74>)
    6514:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    6516:	687b      	ldr	r3, [r7, #4]
    6518:	4618      	mov	r0, r3
    651a:	4b14      	ldr	r3, [pc, #80]	; (656c <calendar_set_date+0x78>)
    651c:	4798      	blx	r3
    651e:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    6520:	f107 0308 	add.w	r3, r7, #8
    6524:	461a      	mov	r2, r3
    6526:	6979      	ldr	r1, [r7, #20]
    6528:	6878      	ldr	r0, [r7, #4]
    652a:	4b11      	ldr	r3, [pc, #68]	; (6570 <calendar_set_date+0x7c>)
    652c:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    652e:	683b      	ldr	r3, [r7, #0]
    6530:	781b      	ldrb	r3, [r3, #0]
    6532:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    6534:	683b      	ldr	r3, [r7, #0]
    6536:	785b      	ldrb	r3, [r3, #1]
    6538:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    653a:	683b      	ldr	r3, [r7, #0]
    653c:	885b      	ldrh	r3, [r3, #2]
    653e:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    6540:	f107 0308 	add.w	r3, r7, #8
    6544:	4619      	mov	r1, r3
    6546:	6878      	ldr	r0, [r7, #4]
    6548:	4b0a      	ldr	r3, [pc, #40]	; (6574 <calendar_set_date+0x80>)
    654a:	4798      	blx	r3
    654c:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	6939      	ldr	r1, [r7, #16]
    6552:	4618      	mov	r0, r3
    6554:	4b08      	ldr	r3, [pc, #32]	; (6578 <calendar_set_date+0x84>)
    6556:	4798      	blx	r3

	return ERR_NONE;
    6558:	2300      	movs	r3, #0
}
    655a:	4618      	mov	r0, r3
    655c:	3718      	adds	r7, #24
    655e:	46bd      	mov	sp, r7
    6560:	bd80      	pop	{r7, pc}
    6562:	bf00      	nop
    6564:	00020a04 	.word	0x00020a04
    6568:	00008145 	.word	0x00008145
    656c:	0000abfd 	.word	0x0000abfd
    6570:	000061a5 	.word	0x000061a5
    6574:	000062b1 	.word	0x000062b1
    6578:	0000abad 	.word	0x0000abad

0000657c <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    657c:	b580      	push	{r7, lr}
    657e:	b084      	sub	sp, #16
    6580:	af00      	add	r7, sp, #0
    6582:	6078      	str	r0, [r7, #4]
    6584:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    6586:	687b      	ldr	r3, [r7, #4]
    6588:	2b00      	cmp	r3, #0
    658a:	bf14      	ite	ne
    658c:	2301      	movne	r3, #1
    658e:	2300      	moveq	r3, #0
    6590:	b2db      	uxtb	r3, r3
    6592:	f240 223b 	movw	r2, #571	; 0x23b
    6596:	4909      	ldr	r1, [pc, #36]	; (65bc <calendar_get_date_time+0x40>)
    6598:	4618      	mov	r0, r3
    659a:	4b09      	ldr	r3, [pc, #36]	; (65c0 <calendar_get_date_time+0x44>)
    659c:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    659e:	687b      	ldr	r3, [r7, #4]
    65a0:	4618      	mov	r0, r3
    65a2:	4b08      	ldr	r3, [pc, #32]	; (65c4 <calendar_get_date_time+0x48>)
    65a4:	4798      	blx	r3
    65a6:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    65a8:	683a      	ldr	r2, [r7, #0]
    65aa:	68f9      	ldr	r1, [r7, #12]
    65ac:	6878      	ldr	r0, [r7, #4]
    65ae:	4b06      	ldr	r3, [pc, #24]	; (65c8 <calendar_get_date_time+0x4c>)
    65b0:	4798      	blx	r3

	return ERR_NONE;
    65b2:	2300      	movs	r3, #0
}
    65b4:	4618      	mov	r0, r3
    65b6:	3710      	adds	r7, #16
    65b8:	46bd      	mov	sp, r7
    65ba:	bd80      	pop	{r7, pc}
    65bc:	00020a04 	.word	0x00020a04
    65c0:	00008145 	.word	0x00008145
    65c4:	0000abfd 	.word	0x0000abfd
    65c8:	000061a5 	.word	0x000061a5

000065cc <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    65cc:	b580      	push	{r7, lr}
    65ce:	b084      	sub	sp, #16
    65d0:	af00      	add	r7, sp, #0
    65d2:	6078      	str	r0, [r7, #4]
    65d4:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    65d6:	687b      	ldr	r3, [r7, #4]
    65d8:	2b00      	cmp	r3, #0
    65da:	d004      	beq.n	65e6 <can_async_init+0x1a>
    65dc:	683b      	ldr	r3, [r7, #0]
    65de:	2b00      	cmp	r3, #0
    65e0:	d001      	beq.n	65e6 <can_async_init+0x1a>
    65e2:	2301      	movs	r3, #1
    65e4:	e000      	b.n	65e8 <can_async_init+0x1c>
    65e6:	2300      	movs	r3, #0
    65e8:	f003 0301 	and.w	r3, r3, #1
    65ec:	b2db      	uxtb	r3, r3
    65ee:	2241      	movs	r2, #65	; 0x41
    65f0:	490e      	ldr	r1, [pc, #56]	; (662c <can_async_init+0x60>)
    65f2:	4618      	mov	r0, r3
    65f4:	4b0e      	ldr	r3, [pc, #56]	; (6630 <can_async_init+0x64>)
    65f6:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    65f8:	687b      	ldr	r3, [r7, #4]
    65fa:	6839      	ldr	r1, [r7, #0]
    65fc:	4618      	mov	r0, r3
    65fe:	4b0d      	ldr	r3, [pc, #52]	; (6634 <can_async_init+0x68>)
    6600:	4798      	blx	r3
    6602:	60f8      	str	r0, [r7, #12]
	if (rc) {
    6604:	68fb      	ldr	r3, [r7, #12]
    6606:	2b00      	cmp	r3, #0
    6608:	d001      	beq.n	660e <can_async_init+0x42>
		return rc;
    660a:	68fb      	ldr	r3, [r7, #12]
    660c:	e009      	b.n	6622 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    660e:	687b      	ldr	r3, [r7, #4]
    6610:	4a09      	ldr	r2, [pc, #36]	; (6638 <can_async_init+0x6c>)
    6612:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    6614:	687b      	ldr	r3, [r7, #4]
    6616:	4a09      	ldr	r2, [pc, #36]	; (663c <can_async_init+0x70>)
    6618:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    661a:	687b      	ldr	r3, [r7, #4]
    661c:	4a08      	ldr	r2, [pc, #32]	; (6640 <can_async_init+0x74>)
    661e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    6620:	2300      	movs	r3, #0
}
    6622:	4618      	mov	r0, r3
    6624:	3710      	adds	r7, #16
    6626:	46bd      	mov	sp, r7
    6628:	bd80      	pop	{r7, pc}
    662a:	bf00      	nop
    662c:	00020a20 	.word	0x00020a20
    6630:	00008145 	.word	0x00008145
    6634:	000086a1 	.word	0x000086a1
    6638:	00006645 	.word	0x00006645
    663c:	00006669 	.word	0x00006669
    6640:	0000668d 	.word	0x0000668d

00006644 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    6644:	b580      	push	{r7, lr}
    6646:	b084      	sub	sp, #16
    6648:	af00      	add	r7, sp, #0
    664a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    664c:	687b      	ldr	r3, [r7, #4]
    664e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    6650:	68fb      	ldr	r3, [r7, #12]
    6652:	69db      	ldr	r3, [r3, #28]
    6654:	2b00      	cmp	r3, #0
    6656:	d003      	beq.n	6660 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    6658:	68fb      	ldr	r3, [r7, #12]
    665a:	69db      	ldr	r3, [r3, #28]
    665c:	68f8      	ldr	r0, [r7, #12]
    665e:	4798      	blx	r3
	}
}
    6660:	bf00      	nop
    6662:	3710      	adds	r7, #16
    6664:	46bd      	mov	sp, r7
    6666:	bd80      	pop	{r7, pc}

00006668 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    6668:	b580      	push	{r7, lr}
    666a:	b084      	sub	sp, #16
    666c:	af00      	add	r7, sp, #0
    666e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    6670:	687b      	ldr	r3, [r7, #4]
    6672:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    6674:	68fb      	ldr	r3, [r7, #12]
    6676:	6a1b      	ldr	r3, [r3, #32]
    6678:	2b00      	cmp	r3, #0
    667a:	d003      	beq.n	6684 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    667c:	68fb      	ldr	r3, [r7, #12]
    667e:	6a1b      	ldr	r3, [r3, #32]
    6680:	68f8      	ldr	r0, [r7, #12]
    6682:	4798      	blx	r3
	}
}
    6684:	bf00      	nop
    6686:	3710      	adds	r7, #16
    6688:	46bd      	mov	sp, r7
    668a:	bd80      	pop	{r7, pc}

0000668c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    668c:	b580      	push	{r7, lr}
    668e:	b084      	sub	sp, #16
    6690:	af00      	add	r7, sp, #0
    6692:	6078      	str	r0, [r7, #4]
    6694:	460b      	mov	r3, r1
    6696:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    6698:	687b      	ldr	r3, [r7, #4]
    669a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    669c:	68fb      	ldr	r3, [r7, #12]
    669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66a0:	2b00      	cmp	r3, #0
    66a2:	d005      	beq.n	66b0 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    66a4:	68fb      	ldr	r3, [r7, #12]
    66a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66a8:	78fa      	ldrb	r2, [r7, #3]
    66aa:	4611      	mov	r1, r2
    66ac:	68f8      	ldr	r0, [r7, #12]
    66ae:	4798      	blx	r3
	}
}
    66b0:	bf00      	nop
    66b2:	3710      	adds	r7, #16
    66b4:	46bd      	mov	sp, r7
    66b6:	bd80      	pop	{r7, pc}

000066b8 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    66b8:	b580      	push	{r7, lr}
    66ba:	b082      	sub	sp, #8
    66bc:	af00      	add	r7, sp, #0
    66be:	6078      	str	r0, [r7, #4]
    66c0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    66c2:	687b      	ldr	r3, [r7, #4]
    66c4:	2b00      	cmp	r3, #0
    66c6:	d004      	beq.n	66d2 <crc_sync_init+0x1a>
    66c8:	683b      	ldr	r3, [r7, #0]
    66ca:	2b00      	cmp	r3, #0
    66cc:	d001      	beq.n	66d2 <crc_sync_init+0x1a>
    66ce:	2301      	movs	r3, #1
    66d0:	e000      	b.n	66d4 <crc_sync_init+0x1c>
    66d2:	2300      	movs	r3, #0
    66d4:	f003 0301 	and.w	r3, r3, #1
    66d8:	b2db      	uxtb	r3, r3
    66da:	222b      	movs	r2, #43	; 0x2b
    66dc:	4906      	ldr	r1, [pc, #24]	; (66f8 <crc_sync_init+0x40>)
    66de:	4618      	mov	r0, r3
    66e0:	4b06      	ldr	r3, [pc, #24]	; (66fc <crc_sync_init+0x44>)
    66e2:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    66e4:	687b      	ldr	r3, [r7, #4]
    66e6:	6839      	ldr	r1, [r7, #0]
    66e8:	4618      	mov	r0, r3
    66ea:	4b05      	ldr	r3, [pc, #20]	; (6700 <crc_sync_init+0x48>)
    66ec:	4798      	blx	r3
    66ee:	4603      	mov	r3, r0
}
    66f0:	4618      	mov	r0, r3
    66f2:	3708      	adds	r7, #8
    66f4:	46bd      	mov	sp, r7
    66f6:	bd80      	pop	{r7, pc}
    66f8:	00020a3c 	.word	0x00020a3c
    66fc:	00008145 	.word	0x00008145
    6700:	00008ed1 	.word	0x00008ed1

00006704 <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    6704:	b580      	push	{r7, lr}
    6706:	b082      	sub	sp, #8
    6708:	af00      	add	r7, sp, #0
    670a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    670c:	687b      	ldr	r3, [r7, #4]
    670e:	2b00      	cmp	r3, #0
    6710:	bf14      	ite	ne
    6712:	2301      	movne	r3, #1
    6714:	2300      	moveq	r3, #0
    6716:	b2db      	uxtb	r3, r3
    6718:	223f      	movs	r2, #63	; 0x3f
    671a:	4906      	ldr	r1, [pc, #24]	; (6734 <crc_sync_enable+0x30>)
    671c:	4618      	mov	r0, r3
    671e:	4b06      	ldr	r3, [pc, #24]	; (6738 <crc_sync_enable+0x34>)
    6720:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    6722:	687b      	ldr	r3, [r7, #4]
    6724:	4618      	mov	r0, r3
    6726:	4b05      	ldr	r3, [pc, #20]	; (673c <crc_sync_enable+0x38>)
    6728:	4798      	blx	r3
    672a:	4603      	mov	r3, r0
}
    672c:	4618      	mov	r0, r3
    672e:	3708      	adds	r7, #8
    6730:	46bd      	mov	sp, r7
    6732:	bd80      	pop	{r7, pc}
    6734:	00020a3c 	.word	0x00020a3c
    6738:	00008145 	.word	0x00008145
    673c:	00008eef 	.word	0x00008eef

00006740 <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    6740:	b590      	push	{r4, r7, lr}
    6742:	b085      	sub	sp, #20
    6744:	af00      	add	r7, sp, #0
    6746:	60f8      	str	r0, [r7, #12]
    6748:	60b9      	str	r1, [r7, #8]
    674a:	607a      	str	r2, [r7, #4]
    674c:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    674e:	68fb      	ldr	r3, [r7, #12]
    6750:	2b00      	cmp	r3, #0
    6752:	d00a      	beq.n	676a <crc_sync_crc32+0x2a>
    6754:	68bb      	ldr	r3, [r7, #8]
    6756:	2b00      	cmp	r3, #0
    6758:	d007      	beq.n	676a <crc_sync_crc32+0x2a>
    675a:	687b      	ldr	r3, [r7, #4]
    675c:	2b00      	cmp	r3, #0
    675e:	d004      	beq.n	676a <crc_sync_crc32+0x2a>
    6760:	683b      	ldr	r3, [r7, #0]
    6762:	2b00      	cmp	r3, #0
    6764:	d001      	beq.n	676a <crc_sync_crc32+0x2a>
    6766:	2301      	movs	r3, #1
    6768:	e000      	b.n	676c <crc_sync_crc32+0x2c>
    676a:	2300      	movs	r3, #0
    676c:	f003 0301 	and.w	r3, r3, #1
    6770:	b2db      	uxtb	r3, r3
    6772:	2253      	movs	r2, #83	; 0x53
    6774:	4907      	ldr	r1, [pc, #28]	; (6794 <crc_sync_crc32+0x54>)
    6776:	4618      	mov	r0, r3
    6778:	4b07      	ldr	r3, [pc, #28]	; (6798 <crc_sync_crc32+0x58>)
    677a:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    677c:	68f8      	ldr	r0, [r7, #12]
    677e:	683b      	ldr	r3, [r7, #0]
    6780:	687a      	ldr	r2, [r7, #4]
    6782:	68b9      	ldr	r1, [r7, #8]
    6784:	4c05      	ldr	r4, [pc, #20]	; (679c <crc_sync_crc32+0x5c>)
    6786:	47a0      	blx	r4
    6788:	4603      	mov	r3, r0
}
    678a:	4618      	mov	r0, r3
    678c:	3714      	adds	r7, #20
    678e:	46bd      	mov	sp, r7
    6790:	bd90      	pop	{r4, r7, pc}
    6792:	bf00      	nop
    6794:	00020a3c 	.word	0x00020a3c
    6798:	00008145 	.word	0x00008145
    679c:	00008f05 	.word	0x00008f05

000067a0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    67a0:	b590      	push	{r4, r7, lr}
    67a2:	b083      	sub	sp, #12
    67a4:	af00      	add	r7, sp, #0
    67a6:	4603      	mov	r3, r0
    67a8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    67aa:	4b07      	ldr	r3, [pc, #28]	; (67c8 <delay_us+0x28>)
    67ac:	681c      	ldr	r4, [r3, #0]
    67ae:	88fb      	ldrh	r3, [r7, #6]
    67b0:	4618      	mov	r0, r3
    67b2:	4b06      	ldr	r3, [pc, #24]	; (67cc <delay_us+0x2c>)
    67b4:	4798      	blx	r3
    67b6:	4603      	mov	r3, r0
    67b8:	4619      	mov	r1, r3
    67ba:	4620      	mov	r0, r4
    67bc:	4b04      	ldr	r3, [pc, #16]	; (67d0 <delay_us+0x30>)
    67be:	4798      	blx	r3
}
    67c0:	bf00      	nop
    67c2:	370c      	adds	r7, #12
    67c4:	46bd      	mov	sp, r7
    67c6:	bd90      	pop	{r4, r7, pc}
    67c8:	20008854 	.word	0x20008854
    67cc:	00008af9 	.word	0x00008af9
    67d0:	00008c91 	.word	0x00008c91

000067d4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    67d4:	b590      	push	{r4, r7, lr}
    67d6:	b083      	sub	sp, #12
    67d8:	af00      	add	r7, sp, #0
    67da:	4603      	mov	r3, r0
    67dc:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    67de:	4b07      	ldr	r3, [pc, #28]	; (67fc <delay_ms+0x28>)
    67e0:	681c      	ldr	r4, [r3, #0]
    67e2:	88fb      	ldrh	r3, [r7, #6]
    67e4:	4618      	mov	r0, r3
    67e6:	4b06      	ldr	r3, [pc, #24]	; (6800 <delay_ms+0x2c>)
    67e8:	4798      	blx	r3
    67ea:	4603      	mov	r3, r0
    67ec:	4619      	mov	r1, r3
    67ee:	4620      	mov	r0, r4
    67f0:	4b04      	ldr	r3, [pc, #16]	; (6804 <delay_ms+0x30>)
    67f2:	4798      	blx	r3
}
    67f4:	bf00      	nop
    67f6:	370c      	adds	r7, #12
    67f8:	46bd      	mov	sp, r7
    67fa:	bd90      	pop	{r4, r7, pc}
    67fc:	20008854 	.word	0x20008854
    6800:	00008c65 	.word	0x00008c65
    6804:	00008c91 	.word	0x00008c91

00006808 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    6808:	b580      	push	{r7, lr}
    680a:	af00      	add	r7, sp, #0
	return _event_system_init();
    680c:	4b02      	ldr	r3, [pc, #8]	; (6818 <event_system_init+0x10>)
    680e:	4798      	blx	r3
    6810:	4603      	mov	r3, r0
}
    6812:	4618      	mov	r0, r3
    6814:	bd80      	pop	{r7, pc}
    6816:	bf00      	nop
    6818:	0000979d 	.word	0x0000979d

0000681c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    681c:	b580      	push	{r7, lr}
    681e:	b082      	sub	sp, #8
    6820:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    6822:	2300      	movs	r3, #0
    6824:	80fb      	strh	r3, [r7, #6]
    6826:	e00e      	b.n	6846 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    6828:	88fb      	ldrh	r3, [r7, #6]
    682a:	4a0c      	ldr	r2, [pc, #48]	; (685c <ext_irq_init+0x40>)
    682c:	00db      	lsls	r3, r3, #3
    682e:	4413      	add	r3, r2
    6830:	f04f 32ff 	mov.w	r2, #4294967295
    6834:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    6836:	88fb      	ldrh	r3, [r7, #6]
    6838:	4a08      	ldr	r2, [pc, #32]	; (685c <ext_irq_init+0x40>)
    683a:	2100      	movs	r1, #0
    683c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    6840:	88fb      	ldrh	r3, [r7, #6]
    6842:	3301      	adds	r3, #1
    6844:	80fb      	strh	r3, [r7, #6]
    6846:	88fb      	ldrh	r3, [r7, #6]
    6848:	2b07      	cmp	r3, #7
    684a:	d9ed      	bls.n	6828 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    684c:	4804      	ldr	r0, [pc, #16]	; (6860 <ext_irq_init+0x44>)
    684e:	4b05      	ldr	r3, [pc, #20]	; (6864 <ext_irq_init+0x48>)
    6850:	4798      	blx	r3
    6852:	4603      	mov	r3, r0
}
    6854:	4618      	mov	r0, r3
    6856:	3708      	adds	r7, #8
    6858:	46bd      	mov	sp, r7
    685a:	bd80      	pop	{r7, pc}
    685c:	20008858 	.word	0x20008858
    6860:	000069c1 	.word	0x000069c1
    6864:	00009341 	.word	0x00009341

00006868 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    6868:	b580      	push	{r7, lr}
    686a:	b086      	sub	sp, #24
    686c:	af00      	add	r7, sp, #0
    686e:	6078      	str	r0, [r7, #4]
    6870:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    6872:	2300      	movs	r3, #0
    6874:	75fb      	strb	r3, [r7, #23]
    6876:	2300      	movs	r3, #0
    6878:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    687a:	2300      	movs	r3, #0
    687c:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    687e:	e012      	b.n	68a6 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    6880:	7dfb      	ldrb	r3, [r7, #23]
    6882:	4a4d      	ldr	r2, [pc, #308]	; (69b8 <ext_irq_register+0x150>)
    6884:	00db      	lsls	r3, r3, #3
    6886:	4413      	add	r3, r2
    6888:	685a      	ldr	r2, [r3, #4]
    688a:	687b      	ldr	r3, [r7, #4]
    688c:	429a      	cmp	r2, r3
    688e:	d107      	bne.n	68a0 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    6890:	7dfb      	ldrb	r3, [r7, #23]
    6892:	4949      	ldr	r1, [pc, #292]	; (69b8 <ext_irq_register+0x150>)
    6894:	683a      	ldr	r2, [r7, #0]
    6896:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    689a:	2301      	movs	r3, #1
    689c:	757b      	strb	r3, [r7, #21]
			break;
    689e:	e005      	b.n	68ac <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    68a0:	7dfb      	ldrb	r3, [r7, #23]
    68a2:	3301      	adds	r3, #1
    68a4:	75fb      	strb	r3, [r7, #23]
    68a6:	7dfb      	ldrb	r3, [r7, #23]
    68a8:	2b07      	cmp	r3, #7
    68aa:	d9e9      	bls.n	6880 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    68ac:	683b      	ldr	r3, [r7, #0]
    68ae:	2b00      	cmp	r3, #0
    68b0:	d10e      	bne.n	68d0 <ext_irq_register+0x68>
		if (!found) {
    68b2:	7d7b      	ldrb	r3, [r7, #21]
    68b4:	f083 0301 	eor.w	r3, r3, #1
    68b8:	b2db      	uxtb	r3, r3
    68ba:	2b00      	cmp	r3, #0
    68bc:	d002      	beq.n	68c4 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    68be:	f06f 030c 	mvn.w	r3, #12
    68c2:	e074      	b.n	69ae <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    68c4:	2100      	movs	r1, #0
    68c6:	6878      	ldr	r0, [r7, #4]
    68c8:	4b3c      	ldr	r3, [pc, #240]	; (69bc <ext_irq_register+0x154>)
    68ca:	4798      	blx	r3
    68cc:	4603      	mov	r3, r0
    68ce:	e06e      	b.n	69ae <ext_irq_register+0x146>
	}

	if (!found) {
    68d0:	7d7b      	ldrb	r3, [r7, #21]
    68d2:	f083 0301 	eor.w	r3, r3, #1
    68d6:	b2db      	uxtb	r3, r3
    68d8:	2b00      	cmp	r3, #0
    68da:	d05a      	beq.n	6992 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    68dc:	2300      	movs	r3, #0
    68de:	75fb      	strb	r3, [r7, #23]
    68e0:	e016      	b.n	6910 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    68e2:	7dfb      	ldrb	r3, [r7, #23]
    68e4:	4a34      	ldr	r2, [pc, #208]	; (69b8 <ext_irq_register+0x150>)
    68e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    68ea:	2b00      	cmp	r3, #0
    68ec:	d10d      	bne.n	690a <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    68ee:	7dfb      	ldrb	r3, [r7, #23]
    68f0:	4931      	ldr	r1, [pc, #196]	; (69b8 <ext_irq_register+0x150>)
    68f2:	683a      	ldr	r2, [r7, #0]
    68f4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    68f8:	7dfb      	ldrb	r3, [r7, #23]
    68fa:	4a2f      	ldr	r2, [pc, #188]	; (69b8 <ext_irq_register+0x150>)
    68fc:	00db      	lsls	r3, r3, #3
    68fe:	4413      	add	r3, r2
    6900:	687a      	ldr	r2, [r7, #4]
    6902:	605a      	str	r2, [r3, #4]
				found           = true;
    6904:	2301      	movs	r3, #1
    6906:	757b      	strb	r3, [r7, #21]
				break;
    6908:	e005      	b.n	6916 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    690a:	7dfb      	ldrb	r3, [r7, #23]
    690c:	3301      	adds	r3, #1
    690e:	75fb      	strb	r3, [r7, #23]
    6910:	7dfb      	ldrb	r3, [r7, #23]
    6912:	2b07      	cmp	r3, #7
    6914:	d9e5      	bls.n	68e2 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    6916:	e036      	b.n	6986 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    6918:	7dfb      	ldrb	r3, [r7, #23]
    691a:	4a27      	ldr	r2, [pc, #156]	; (69b8 <ext_irq_register+0x150>)
    691c:	00db      	lsls	r3, r3, #3
    691e:	4413      	add	r3, r2
    6920:	685a      	ldr	r2, [r3, #4]
    6922:	7dbb      	ldrb	r3, [r7, #22]
    6924:	4924      	ldr	r1, [pc, #144]	; (69b8 <ext_irq_register+0x150>)
    6926:	00db      	lsls	r3, r3, #3
    6928:	440b      	add	r3, r1
    692a:	685b      	ldr	r3, [r3, #4]
    692c:	429a      	cmp	r2, r3
    692e:	d227      	bcs.n	6980 <ext_irq_register+0x118>
    6930:	7dbb      	ldrb	r3, [r7, #22]
    6932:	4a21      	ldr	r2, [pc, #132]	; (69b8 <ext_irq_register+0x150>)
    6934:	00db      	lsls	r3, r3, #3
    6936:	4413      	add	r3, r2
    6938:	685b      	ldr	r3, [r3, #4]
    693a:	f1b3 3fff 	cmp.w	r3, #4294967295
    693e:	d01f      	beq.n	6980 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    6940:	7dbb      	ldrb	r3, [r7, #22]
    6942:	491d      	ldr	r1, [pc, #116]	; (69b8 <ext_irq_register+0x150>)
    6944:	f107 020c 	add.w	r2, r7, #12
    6948:	00db      	lsls	r3, r3, #3
    694a:	440b      	add	r3, r1
    694c:	e893 0003 	ldmia.w	r3, {r0, r1}
    6950:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    6954:	7dbb      	ldrb	r3, [r7, #22]
    6956:	7dfa      	ldrb	r2, [r7, #23]
    6958:	4817      	ldr	r0, [pc, #92]	; (69b8 <ext_irq_register+0x150>)
    695a:	4917      	ldr	r1, [pc, #92]	; (69b8 <ext_irq_register+0x150>)
    695c:	00db      	lsls	r3, r3, #3
    695e:	4403      	add	r3, r0
    6960:	00d2      	lsls	r2, r2, #3
    6962:	440a      	add	r2, r1
    6964:	e892 0003 	ldmia.w	r2, {r0, r1}
    6968:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    696c:	7dfb      	ldrb	r3, [r7, #23]
    696e:	4a12      	ldr	r2, [pc, #72]	; (69b8 <ext_irq_register+0x150>)
    6970:	00db      	lsls	r3, r3, #3
    6972:	4413      	add	r3, r2
    6974:	f107 020c 	add.w	r2, r7, #12
    6978:	e892 0003 	ldmia.w	r2, {r0, r1}
    697c:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    6980:	7dbb      	ldrb	r3, [r7, #22]
    6982:	3301      	adds	r3, #1
    6984:	75bb      	strb	r3, [r7, #22]
    6986:	7dbb      	ldrb	r3, [r7, #22]
    6988:	2b07      	cmp	r3, #7
    698a:	d802      	bhi.n	6992 <ext_irq_register+0x12a>
    698c:	7dfb      	ldrb	r3, [r7, #23]
    698e:	2b07      	cmp	r3, #7
    6990:	d9c2      	bls.n	6918 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    6992:	7d7b      	ldrb	r3, [r7, #21]
    6994:	f083 0301 	eor.w	r3, r3, #1
    6998:	b2db      	uxtb	r3, r3
    699a:	2b00      	cmp	r3, #0
    699c:	d002      	beq.n	69a4 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    699e:	f06f 030c 	mvn.w	r3, #12
    69a2:	e004      	b.n	69ae <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    69a4:	2101      	movs	r1, #1
    69a6:	6878      	ldr	r0, [r7, #4]
    69a8:	4b04      	ldr	r3, [pc, #16]	; (69bc <ext_irq_register+0x154>)
    69aa:	4798      	blx	r3
    69ac:	4603      	mov	r3, r0
}
    69ae:	4618      	mov	r0, r3
    69b0:	3718      	adds	r7, #24
    69b2:	46bd      	mov	sp, r7
    69b4:	bd80      	pop	{r7, pc}
    69b6:	bf00      	nop
    69b8:	20008858 	.word	0x20008858
    69bc:	000094c5 	.word	0x000094c5

000069c0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    69c0:	b580      	push	{r7, lr}
    69c2:	b084      	sub	sp, #16
    69c4:	af00      	add	r7, sp, #0
    69c6:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    69c8:	2300      	movs	r3, #0
    69ca:	73fb      	strb	r3, [r7, #15]
    69cc:	2308      	movs	r3, #8
    69ce:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    69d0:	e02a      	b.n	6a28 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    69d2:	7bba      	ldrb	r2, [r7, #14]
    69d4:	7bfb      	ldrb	r3, [r7, #15]
    69d6:	4413      	add	r3, r2
    69d8:	105b      	asrs	r3, r3, #1
    69da:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    69dc:	7b7b      	ldrb	r3, [r7, #13]
    69de:	2b07      	cmp	r3, #7
    69e0:	d827      	bhi.n	6a32 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    69e2:	7b7b      	ldrb	r3, [r7, #13]
    69e4:	4a16      	ldr	r2, [pc, #88]	; (6a40 <process_ext_irq+0x80>)
    69e6:	00db      	lsls	r3, r3, #3
    69e8:	4413      	add	r3, r2
    69ea:	685a      	ldr	r2, [r3, #4]
    69ec:	687b      	ldr	r3, [r7, #4]
    69ee:	429a      	cmp	r2, r3
    69f0:	d10b      	bne.n	6a0a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    69f2:	7b7b      	ldrb	r3, [r7, #13]
    69f4:	4a12      	ldr	r2, [pc, #72]	; (6a40 <process_ext_irq+0x80>)
    69f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    69fa:	2b00      	cmp	r3, #0
    69fc:	d01b      	beq.n	6a36 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    69fe:	7b7b      	ldrb	r3, [r7, #13]
    6a00:	4a0f      	ldr	r2, [pc, #60]	; (6a40 <process_ext_irq+0x80>)
    6a02:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    6a06:	4798      	blx	r3
			}
			return;
    6a08:	e015      	b.n	6a36 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    6a0a:	7b7b      	ldrb	r3, [r7, #13]
    6a0c:	4a0c      	ldr	r2, [pc, #48]	; (6a40 <process_ext_irq+0x80>)
    6a0e:	00db      	lsls	r3, r3, #3
    6a10:	4413      	add	r3, r2
    6a12:	685a      	ldr	r2, [r3, #4]
    6a14:	687b      	ldr	r3, [r7, #4]
    6a16:	429a      	cmp	r2, r3
    6a18:	d203      	bcs.n	6a22 <process_ext_irq+0x62>
			lower = middle + 1;
    6a1a:	7b7b      	ldrb	r3, [r7, #13]
    6a1c:	3301      	adds	r3, #1
    6a1e:	73fb      	strb	r3, [r7, #15]
    6a20:	e002      	b.n	6a28 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    6a22:	7b7b      	ldrb	r3, [r7, #13]
    6a24:	3b01      	subs	r3, #1
    6a26:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    6a28:	7bba      	ldrb	r2, [r7, #14]
    6a2a:	7bfb      	ldrb	r3, [r7, #15]
    6a2c:	429a      	cmp	r2, r3
    6a2e:	d2d0      	bcs.n	69d2 <process_ext_irq+0x12>
    6a30:	e002      	b.n	6a38 <process_ext_irq+0x78>
			return;
    6a32:	bf00      	nop
    6a34:	e000      	b.n	6a38 <process_ext_irq+0x78>
			return;
    6a36:	bf00      	nop
		}
	}
}
    6a38:	3710      	adds	r7, #16
    6a3a:	46bd      	mov	sp, r7
    6a3c:	bd80      	pop	{r7, pc}
    6a3e:	bf00      	nop
    6a40:	20008858 	.word	0x20008858

00006a44 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    6a44:	b580      	push	{r7, lr}
    6a46:	b084      	sub	sp, #16
    6a48:	af00      	add	r7, sp, #0
    6a4a:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    6a4c:	687b      	ldr	r3, [r7, #4]
    6a4e:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    6a50:	687b      	ldr	r3, [r7, #4]
    6a52:	885b      	ldrh	r3, [r3, #2]
    6a54:	b29b      	uxth	r3, r3
    6a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6a5a:	2b00      	cmp	r3, #0
    6a5c:	d107      	bne.n	6a6e <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    6a5e:	68fb      	ldr	r3, [r7, #12]
    6a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6a62:	2b00      	cmp	r3, #0
    6a64:	d003      	beq.n	6a6e <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    6a66:	68fb      	ldr	r3, [r7, #12]
    6a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6a6a:	68f8      	ldr	r0, [r7, #12]
    6a6c:	4798      	blx	r3
		}
	}
}
    6a6e:	bf00      	nop
    6a70:	3710      	adds	r7, #16
    6a72:	46bd      	mov	sp, r7
    6a74:	bd80      	pop	{r7, pc}

00006a76 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    6a76:	b580      	push	{r7, lr}
    6a78:	b084      	sub	sp, #16
    6a7a:	af00      	add	r7, sp, #0
    6a7c:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    6a7e:	687b      	ldr	r3, [r7, #4]
    6a80:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    6a82:	687b      	ldr	r3, [r7, #4]
    6a84:	885b      	ldrh	r3, [r3, #2]
    6a86:	b29b      	uxth	r3, r3
    6a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6a8c:	2b00      	cmp	r3, #0
    6a8e:	d107      	bne.n	6aa0 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    6a90:	68fb      	ldr	r3, [r7, #12]
    6a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6a94:	2b00      	cmp	r3, #0
    6a96:	d003      	beq.n	6aa0 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    6a98:	68fb      	ldr	r3, [r7, #12]
    6a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6a9c:	68f8      	ldr	r0, [r7, #12]
    6a9e:	4798      	blx	r3
		}
	}
}
    6aa0:	bf00      	nop
    6aa2:	3710      	adds	r7, #16
    6aa4:	46bd      	mov	sp, r7
    6aa6:	bd80      	pop	{r7, pc}

00006aa8 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    6aa8:	b580      	push	{r7, lr}
    6aaa:	b084      	sub	sp, #16
    6aac:	af00      	add	r7, sp, #0
    6aae:	6078      	str	r0, [r7, #4]
    6ab0:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    6ab2:	687b      	ldr	r3, [r7, #4]
    6ab4:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    6ab6:	687b      	ldr	r3, [r7, #4]
    6ab8:	885b      	ldrh	r3, [r3, #2]
    6aba:	b29b      	uxth	r3, r3
    6abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6ac0:	2b00      	cmp	r3, #0
    6ac2:	d108      	bne.n	6ad6 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    6ac4:	68fb      	ldr	r3, [r7, #12]
    6ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6ac8:	2b00      	cmp	r3, #0
    6aca:	d004      	beq.n	6ad6 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    6acc:	68fb      	ldr	r3, [r7, #12]
    6ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6ad0:	6839      	ldr	r1, [r7, #0]
    6ad2:	68f8      	ldr	r0, [r7, #12]
    6ad4:	4798      	blx	r3
		}
	}
}
    6ad6:	bf00      	nop
    6ad8:	3710      	adds	r7, #16
    6ada:	46bd      	mov	sp, r7
    6adc:	bd80      	pop	{r7, pc}
	...

00006ae0 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    6ae0:	b580      	push	{r7, lr}
    6ae2:	b08a      	sub	sp, #40	; 0x28
    6ae4:	af00      	add	r7, sp, #0
    6ae6:	60f8      	str	r0, [r7, #12]
    6ae8:	60b9      	str	r1, [r7, #8]
    6aea:	4613      	mov	r3, r2
    6aec:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    6aee:	68fb      	ldr	r3, [r7, #12]
    6af0:	3b28      	subs	r3, #40	; 0x28
    6af2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    6af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6af6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    6af8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6afa:	88fb      	ldrh	r3, [r7, #6]
    6afc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    6afe:	f248 0301 	movw	r3, #32769	; 0x8001
    6b02:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    6b04:	68bb      	ldr	r3, [r7, #8]
    6b06:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    6b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b0a:	f107 0214 	add.w	r2, r7, #20
    6b0e:	4611      	mov	r1, r2
    6b10:	4618      	mov	r0, r3
    6b12:	4b06      	ldr	r3, [pc, #24]	; (6b2c <i2c_m_async_read+0x4c>)
    6b14:	4798      	blx	r3
    6b16:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    6b18:	6a3b      	ldr	r3, [r7, #32]
    6b1a:	2b00      	cmp	r3, #0
    6b1c:	d001      	beq.n	6b22 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    6b1e:	6a3b      	ldr	r3, [r7, #32]
    6b20:	e000      	b.n	6b24 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    6b22:	88fb      	ldrh	r3, [r7, #6]
}
    6b24:	4618      	mov	r0, r3
    6b26:	3728      	adds	r7, #40	; 0x28
    6b28:	46bd      	mov	sp, r7
    6b2a:	bd80      	pop	{r7, pc}
    6b2c:	0000bac9 	.word	0x0000bac9

00006b30 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    6b30:	b580      	push	{r7, lr}
    6b32:	b08a      	sub	sp, #40	; 0x28
    6b34:	af00      	add	r7, sp, #0
    6b36:	60f8      	str	r0, [r7, #12]
    6b38:	60b9      	str	r1, [r7, #8]
    6b3a:	4613      	mov	r3, r2
    6b3c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    6b3e:	68fb      	ldr	r3, [r7, #12]
    6b40:	3b28      	subs	r3, #40	; 0x28
    6b42:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    6b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    6b48:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6b4a:	88fb      	ldrh	r3, [r7, #6]
    6b4c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    6b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6b52:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    6b54:	68bb      	ldr	r3, [r7, #8]
    6b56:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    6b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b5a:	f107 0214 	add.w	r2, r7, #20
    6b5e:	4611      	mov	r1, r2
    6b60:	4618      	mov	r0, r3
    6b62:	4b06      	ldr	r3, [pc, #24]	; (6b7c <i2c_m_async_write+0x4c>)
    6b64:	4798      	blx	r3
    6b66:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    6b68:	6a3b      	ldr	r3, [r7, #32]
    6b6a:	2b00      	cmp	r3, #0
    6b6c:	d001      	beq.n	6b72 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    6b6e:	6a3b      	ldr	r3, [r7, #32]
    6b70:	e000      	b.n	6b74 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    6b72:	88fb      	ldrh	r3, [r7, #6]
}
    6b74:	4618      	mov	r0, r3
    6b76:	3728      	adds	r7, #40	; 0x28
    6b78:	46bd      	mov	sp, r7
    6b7a:	bd80      	pop	{r7, pc}
    6b7c:	0000bac9 	.word	0x0000bac9

00006b80 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    6b80:	b580      	push	{r7, lr}
    6b82:	b084      	sub	sp, #16
    6b84:	af00      	add	r7, sp, #0
    6b86:	6078      	str	r0, [r7, #4]
    6b88:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    6b8a:	687b      	ldr	r3, [r7, #4]
    6b8c:	2b00      	cmp	r3, #0
    6b8e:	bf14      	ite	ne
    6b90:	2301      	movne	r3, #1
    6b92:	2300      	moveq	r3, #0
    6b94:	b2db      	uxtb	r3, r3
    6b96:	2289      	movs	r2, #137	; 0x89
    6b98:	4915      	ldr	r1, [pc, #84]	; (6bf0 <i2c_m_async_init+0x70>)
    6b9a:	4618      	mov	r0, r3
    6b9c:	4b15      	ldr	r3, [pc, #84]	; (6bf4 <i2c_m_async_init+0x74>)
    6b9e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	6839      	ldr	r1, [r7, #0]
    6ba4:	4618      	mov	r0, r3
    6ba6:	4b14      	ldr	r3, [pc, #80]	; (6bf8 <i2c_m_async_init+0x78>)
    6ba8:	4798      	blx	r3
    6baa:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6bac:	68fb      	ldr	r3, [r7, #12]
    6bae:	2b00      	cmp	r3, #0
    6bb0:	d001      	beq.n	6bb6 <i2c_m_async_init+0x36>
		return init_status;
    6bb2:	68fb      	ldr	r3, [r7, #12]
    6bb4:	e018      	b.n	6be8 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    6bb6:	687b      	ldr	r3, [r7, #4]
    6bb8:	4a10      	ldr	r2, [pc, #64]	; (6bfc <i2c_m_async_init+0x7c>)
    6bba:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    6bbc:	687b      	ldr	r3, [r7, #4]
    6bbe:	4a10      	ldr	r2, [pc, #64]	; (6c00 <i2c_m_async_init+0x80>)
    6bc0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    6bc2:	687b      	ldr	r3, [r7, #4]
    6bc4:	4a0f      	ldr	r2, [pc, #60]	; (6c04 <i2c_m_async_init+0x84>)
    6bc6:	2101      	movs	r1, #1
    6bc8:	4618      	mov	r0, r3
    6bca:	4b0f      	ldr	r3, [pc, #60]	; (6c08 <i2c_m_async_init+0x88>)
    6bcc:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	4a0e      	ldr	r2, [pc, #56]	; (6c0c <i2c_m_async_init+0x8c>)
    6bd2:	2102      	movs	r1, #2
    6bd4:	4618      	mov	r0, r3
    6bd6:	4b0c      	ldr	r3, [pc, #48]	; (6c08 <i2c_m_async_init+0x88>)
    6bd8:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    6bda:	687b      	ldr	r3, [r7, #4]
    6bdc:	4a0c      	ldr	r2, [pc, #48]	; (6c10 <i2c_m_async_init+0x90>)
    6bde:	2100      	movs	r1, #0
    6be0:	4618      	mov	r0, r3
    6be2:	4b09      	ldr	r3, [pc, #36]	; (6c08 <i2c_m_async_init+0x88>)
    6be4:	4798      	blx	r3

	return ERR_NONE;
    6be6:	2300      	movs	r3, #0
}
    6be8:	4618      	mov	r0, r3
    6bea:	3710      	adds	r7, #16
    6bec:	46bd      	mov	sp, r7
    6bee:	bd80      	pop	{r7, pc}
    6bf0:	00020a58 	.word	0x00020a58
    6bf4:	00008145 	.word	0x00008145
    6bf8:	0000b919 	.word	0x0000b919
    6bfc:	00006ae1 	.word	0x00006ae1
    6c00:	00006b31 	.word	0x00006b31
    6c04:	00006a45 	.word	0x00006a45
    6c08:	0000bb9d 	.word	0x0000bb9d
    6c0c:	00006a77 	.word	0x00006a77
    6c10:	00006aa9 	.word	0x00006aa9

00006c14 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    6c14:	b580      	push	{r7, lr}
    6c16:	b084      	sub	sp, #16
    6c18:	af00      	add	r7, sp, #0
    6c1a:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    6c1c:	687b      	ldr	r3, [r7, #4]
    6c1e:	2b00      	cmp	r3, #0
    6c20:	bf14      	ite	ne
    6c22:	2301      	movne	r3, #1
    6c24:	2300      	moveq	r3, #0
    6c26:	b2db      	uxtb	r3, r3
    6c28:	22b9      	movs	r2, #185	; 0xb9
    6c2a:	4911      	ldr	r1, [pc, #68]	; (6c70 <i2c_m_async_enable+0x5c>)
    6c2c:	4618      	mov	r0, r3
    6c2e:	4b11      	ldr	r3, [pc, #68]	; (6c74 <i2c_m_async_enable+0x60>)
    6c30:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    6c32:	687b      	ldr	r3, [r7, #4]
    6c34:	4618      	mov	r0, r3
    6c36:	4b10      	ldr	r3, [pc, #64]	; (6c78 <i2c_m_async_enable+0x64>)
    6c38:	4798      	blx	r3
    6c3a:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    6c3c:	68fb      	ldr	r3, [r7, #12]
    6c3e:	2b00      	cmp	r3, #0
    6c40:	d111      	bne.n	6c66 <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    6c42:	687b      	ldr	r3, [r7, #4]
    6c44:	2201      	movs	r2, #1
    6c46:	2101      	movs	r1, #1
    6c48:	4618      	mov	r0, r3
    6c4a:	4b0c      	ldr	r3, [pc, #48]	; (6c7c <i2c_m_async_enable+0x68>)
    6c4c:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    6c4e:	687b      	ldr	r3, [r7, #4]
    6c50:	2201      	movs	r2, #1
    6c52:	2102      	movs	r1, #2
    6c54:	4618      	mov	r0, r3
    6c56:	4b09      	ldr	r3, [pc, #36]	; (6c7c <i2c_m_async_enable+0x68>)
    6c58:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    6c5a:	687b      	ldr	r3, [r7, #4]
    6c5c:	2201      	movs	r2, #1
    6c5e:	2100      	movs	r1, #0
    6c60:	4618      	mov	r0, r3
    6c62:	4b06      	ldr	r3, [pc, #24]	; (6c7c <i2c_m_async_enable+0x68>)
    6c64:	4798      	blx	r3
	}
	return rc;
    6c66:	68fb      	ldr	r3, [r7, #12]
}
    6c68:	4618      	mov	r0, r3
    6c6a:	3710      	adds	r7, #16
    6c6c:	46bd      	mov	sp, r7
    6c6e:	bd80      	pop	{r7, pc}
    6c70:	00020a58 	.word	0x00020a58
    6c74:	00008145 	.word	0x00008145
    6c78:	0000b8b5 	.word	0x0000b8b5
    6c7c:	0000bc69 	.word	0x0000bc69

00006c80 <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    6c80:	b480      	push	{r7}
    6c82:	b085      	sub	sp, #20
    6c84:	af00      	add	r7, sp, #0
    6c86:	60f8      	str	r0, [r7, #12]
    6c88:	460b      	mov	r3, r1
    6c8a:	607a      	str	r2, [r7, #4]
    6c8c:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    6c8e:	897b      	ldrh	r3, [r7, #10]
    6c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6c94:	b21a      	sxth	r2, r3
    6c96:	687b      	ldr	r3, [r7, #4]
    6c98:	b21b      	sxth	r3, r3
    6c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6c9e:	b21b      	sxth	r3, r3
    6ca0:	4313      	orrs	r3, r2
    6ca2:	b21b      	sxth	r3, r3
    6ca4:	b29a      	uxth	r2, r3
    6ca6:	68fb      	ldr	r3, [r7, #12]
    6ca8:	879a      	strh	r2, [r3, #60]	; 0x3c
    6caa:	68fb      	ldr	r3, [r7, #12]
    6cac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    6cae:	4618      	mov	r0, r3
    6cb0:	3714      	adds	r7, #20
    6cb2:	46bd      	mov	sp, r7
    6cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cb8:	4770      	bx	lr

00006cba <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    6cba:	b480      	push	{r7}
    6cbc:	b085      	sub	sp, #20
    6cbe:	af00      	add	r7, sp, #0
    6cc0:	60f8      	str	r0, [r7, #12]
    6cc2:	460b      	mov	r3, r1
    6cc4:	607a      	str	r2, [r7, #4]
    6cc6:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    6cc8:	7afb      	ldrb	r3, [r7, #11]
    6cca:	2b01      	cmp	r3, #1
    6ccc:	d007      	beq.n	6cde <i2c_m_async_register_callback+0x24>
    6cce:	2b02      	cmp	r3, #2
    6cd0:	d009      	beq.n	6ce6 <i2c_m_async_register_callback+0x2c>
    6cd2:	2b00      	cmp	r3, #0
    6cd4:	d10b      	bne.n	6cee <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    6cd6:	68fb      	ldr	r3, [r7, #12]
    6cd8:	687a      	ldr	r2, [r7, #4]
    6cda:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    6cdc:	e00a      	b.n	6cf4 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    6cde:	68fb      	ldr	r3, [r7, #12]
    6ce0:	687a      	ldr	r2, [r7, #4]
    6ce2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    6ce4:	e006      	b.n	6cf4 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    6ce6:	68fb      	ldr	r3, [r7, #12]
    6ce8:	687a      	ldr	r2, [r7, #4]
    6cea:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    6cec:	e002      	b.n	6cf4 <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    6cee:	f06f 030c 	mvn.w	r3, #12
    6cf2:	e000      	b.n	6cf6 <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    6cf4:	2300      	movs	r3, #0
}
    6cf6:	4618      	mov	r0, r3
    6cf8:	3714      	adds	r7, #20
    6cfa:	46bd      	mov	sp, r7
    6cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d00:	4770      	bx	lr

00006d02 <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    6d02:	b480      	push	{r7}
    6d04:	b083      	sub	sp, #12
    6d06:	af00      	add	r7, sp, #0
    6d08:	6078      	str	r0, [r7, #4]
    6d0a:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    6d0c:	687b      	ldr	r3, [r7, #4]
    6d0e:	f103 0228 	add.w	r2, r3, #40	; 0x28
    6d12:	683b      	ldr	r3, [r7, #0]
    6d14:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    6d16:	2300      	movs	r3, #0
}
    6d18:	4618      	mov	r0, r3
    6d1a:	370c      	adds	r7, #12
    6d1c:	46bd      	mov	sp, r7
    6d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d22:	4770      	bx	lr

00006d24 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    6d24:	b580      	push	{r7, lr}
    6d26:	b08a      	sub	sp, #40	; 0x28
    6d28:	af00      	add	r7, sp, #0
    6d2a:	60f8      	str	r0, [r7, #12]
    6d2c:	60b9      	str	r1, [r7, #8]
    6d2e:	4613      	mov	r3, r2
    6d30:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    6d32:	68fb      	ldr	r3, [r7, #12]
    6d34:	3b14      	subs	r3, #20
    6d36:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6d3a:	8b9b      	ldrh	r3, [r3, #28]
    6d3c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6d3e:	88fb      	ldrh	r3, [r7, #6]
    6d40:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    6d42:	f248 0301 	movw	r3, #32769	; 0x8001
    6d46:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    6d48:	68bb      	ldr	r3, [r7, #8]
    6d4a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6d4e:	f107 0214 	add.w	r2, r7, #20
    6d52:	4611      	mov	r1, r2
    6d54:	4618      	mov	r0, r3
    6d56:	4b06      	ldr	r3, [pc, #24]	; (6d70 <i2c_m_sync_read+0x4c>)
    6d58:	4798      	blx	r3
    6d5a:	6238      	str	r0, [r7, #32]

	if (ret) {
    6d5c:	6a3b      	ldr	r3, [r7, #32]
    6d5e:	2b00      	cmp	r3, #0
    6d60:	d001      	beq.n	6d66 <i2c_m_sync_read+0x42>
		return ret;
    6d62:	6a3b      	ldr	r3, [r7, #32]
    6d64:	e000      	b.n	6d68 <i2c_m_sync_read+0x44>
	}

	return n;
    6d66:	88fb      	ldrh	r3, [r7, #6]
}
    6d68:	4618      	mov	r0, r3
    6d6a:	3728      	adds	r7, #40	; 0x28
    6d6c:	46bd      	mov	sp, r7
    6d6e:	bd80      	pop	{r7, pc}
    6d70:	0000be49 	.word	0x0000be49

00006d74 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    6d74:	b580      	push	{r7, lr}
    6d76:	b08a      	sub	sp, #40	; 0x28
    6d78:	af00      	add	r7, sp, #0
    6d7a:	60f8      	str	r0, [r7, #12]
    6d7c:	60b9      	str	r1, [r7, #8]
    6d7e:	4613      	mov	r3, r2
    6d80:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    6d82:	68fb      	ldr	r3, [r7, #12]
    6d84:	3b14      	subs	r3, #20
    6d86:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    6d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6d8a:	8b9b      	ldrh	r3, [r3, #28]
    6d8c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6d8e:	88fb      	ldrh	r3, [r7, #6]
    6d90:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    6d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6d96:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    6d98:	68bb      	ldr	r3, [r7, #8]
    6d9a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6d9e:	f107 0214 	add.w	r2, r7, #20
    6da2:	4611      	mov	r1, r2
    6da4:	4618      	mov	r0, r3
    6da6:	4b06      	ldr	r3, [pc, #24]	; (6dc0 <i2c_m_sync_write+0x4c>)
    6da8:	4798      	blx	r3
    6daa:	6238      	str	r0, [r7, #32]

	if (ret) {
    6dac:	6a3b      	ldr	r3, [r7, #32]
    6dae:	2b00      	cmp	r3, #0
    6db0:	d001      	beq.n	6db6 <i2c_m_sync_write+0x42>
		return ret;
    6db2:	6a3b      	ldr	r3, [r7, #32]
    6db4:	e000      	b.n	6db8 <i2c_m_sync_write+0x44>
	}

	return n;
    6db6:	88fb      	ldrh	r3, [r7, #6]
}
    6db8:	4618      	mov	r0, r3
    6dba:	3728      	adds	r7, #40	; 0x28
    6dbc:	46bd      	mov	sp, r7
    6dbe:	bd80      	pop	{r7, pc}
    6dc0:	0000be49 	.word	0x0000be49

00006dc4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    6dc4:	b580      	push	{r7, lr}
    6dc6:	b084      	sub	sp, #16
    6dc8:	af00      	add	r7, sp, #0
    6dca:	6078      	str	r0, [r7, #4]
    6dcc:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    6dce:	687b      	ldr	r3, [r7, #4]
    6dd0:	2b00      	cmp	r3, #0
    6dd2:	bf14      	ite	ne
    6dd4:	2301      	movne	r3, #1
    6dd6:	2300      	moveq	r3, #0
    6dd8:	b2db      	uxtb	r3, r3
    6dda:	225e      	movs	r2, #94	; 0x5e
    6ddc:	490c      	ldr	r1, [pc, #48]	; (6e10 <i2c_m_sync_init+0x4c>)
    6dde:	4618      	mov	r0, r3
    6de0:	4b0c      	ldr	r3, [pc, #48]	; (6e14 <i2c_m_sync_init+0x50>)
    6de2:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    6de4:	687b      	ldr	r3, [r7, #4]
    6de6:	6839      	ldr	r1, [r7, #0]
    6de8:	4618      	mov	r0, r3
    6dea:	4b0b      	ldr	r3, [pc, #44]	; (6e18 <i2c_m_sync_init+0x54>)
    6dec:	4798      	blx	r3
    6dee:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6df0:	68fb      	ldr	r3, [r7, #12]
    6df2:	2b00      	cmp	r3, #0
    6df4:	d001      	beq.n	6dfa <i2c_m_sync_init+0x36>
		return init_status;
    6df6:	68fb      	ldr	r3, [r7, #12]
    6df8:	e006      	b.n	6e08 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    6dfa:	687b      	ldr	r3, [r7, #4]
    6dfc:	4a07      	ldr	r2, [pc, #28]	; (6e1c <i2c_m_sync_init+0x58>)
    6dfe:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    6e00:	687b      	ldr	r3, [r7, #4]
    6e02:	4a07      	ldr	r2, [pc, #28]	; (6e20 <i2c_m_sync_init+0x5c>)
    6e04:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    6e06:	2300      	movs	r3, #0
}
    6e08:	4618      	mov	r0, r3
    6e0a:	3710      	adds	r7, #16
    6e0c:	46bd      	mov	sp, r7
    6e0e:	bd80      	pop	{r7, pc}
    6e10:	00020a78 	.word	0x00020a78
    6e14:	00008145 	.word	0x00008145
    6e18:	0000bbe1 	.word	0x0000bbe1
    6e1c:	00006d25 	.word	0x00006d25
    6e20:	00006d75 	.word	0x00006d75

00006e24 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    6e24:	b580      	push	{r7, lr}
    6e26:	b082      	sub	sp, #8
    6e28:	af00      	add	r7, sp, #0
    6e2a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    6e2c:	687b      	ldr	r3, [r7, #4]
    6e2e:	4618      	mov	r0, r3
    6e30:	4b03      	ldr	r3, [pc, #12]	; (6e40 <i2c_m_sync_enable+0x1c>)
    6e32:	4798      	blx	r3
    6e34:	4603      	mov	r3, r0
}
    6e36:	4618      	mov	r0, r3
    6e38:	3708      	adds	r7, #8
    6e3a:	46bd      	mov	sp, r7
    6e3c:	bd80      	pop	{r7, pc}
    6e3e:	bf00      	nop
    6e40:	0000bc29 	.word	0x0000bc29

00006e44 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    6e44:	b480      	push	{r7}
    6e46:	b085      	sub	sp, #20
    6e48:	af00      	add	r7, sp, #0
    6e4a:	60f8      	str	r0, [r7, #12]
    6e4c:	460b      	mov	r3, r1
    6e4e:	607a      	str	r2, [r7, #4]
    6e50:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    6e52:	897b      	ldrh	r3, [r7, #10]
    6e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6e58:	b21a      	sxth	r2, r3
    6e5a:	687b      	ldr	r3, [r7, #4]
    6e5c:	b21b      	sxth	r3, r3
    6e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6e62:	b21b      	sxth	r3, r3
    6e64:	4313      	orrs	r3, r2
    6e66:	b21b      	sxth	r3, r3
    6e68:	b29a      	uxth	r2, r3
    6e6a:	68fb      	ldr	r3, [r7, #12]
    6e6c:	839a      	strh	r2, [r3, #28]
    6e6e:	68fb      	ldr	r3, [r7, #12]
    6e70:	8b9b      	ldrh	r3, [r3, #28]
}
    6e72:	4618      	mov	r0, r3
    6e74:	3714      	adds	r7, #20
    6e76:	46bd      	mov	sp, r7
    6e78:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e7c:	4770      	bx	lr

00006e7e <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    6e7e:	b480      	push	{r7}
    6e80:	b083      	sub	sp, #12
    6e82:	af00      	add	r7, sp, #0
    6e84:	6078      	str	r0, [r7, #4]
    6e86:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    6e88:	687b      	ldr	r3, [r7, #4]
    6e8a:	f103 0214 	add.w	r2, r3, #20
    6e8e:	683b      	ldr	r3, [r7, #0]
    6e90:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    6e92:	2300      	movs	r3, #0
}
    6e94:	4618      	mov	r0, r3
    6e96:	370c      	adds	r7, #12
    6e98:	46bd      	mov	sp, r7
    6e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e9e:	4770      	bx	lr

00006ea0 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    6ea0:	b580      	push	{r7, lr}
    6ea2:	b084      	sub	sp, #16
    6ea4:	af00      	add	r7, sp, #0
    6ea6:	60f8      	str	r0, [r7, #12]
    6ea8:	60b9      	str	r1, [r7, #8]
    6eaa:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    6eac:	68fb      	ldr	r3, [r7, #12]
    6eae:	2b00      	cmp	r3, #0
    6eb0:	d004      	beq.n	6ebc <pwm_init+0x1c>
    6eb2:	68bb      	ldr	r3, [r7, #8]
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	d001      	beq.n	6ebc <pwm_init+0x1c>
    6eb8:	2301      	movs	r3, #1
    6eba:	e000      	b.n	6ebe <pwm_init+0x1e>
    6ebc:	2300      	movs	r3, #0
    6ebe:	f003 0301 	and.w	r3, r3, #1
    6ec2:	b2db      	uxtb	r3, r3
    6ec4:	2233      	movs	r2, #51	; 0x33
    6ec6:	490a      	ldr	r1, [pc, #40]	; (6ef0 <pwm_init+0x50>)
    6ec8:	4618      	mov	r0, r3
    6eca:	4b0a      	ldr	r3, [pc, #40]	; (6ef4 <pwm_init+0x54>)
    6ecc:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    6ece:	68fb      	ldr	r3, [r7, #12]
    6ed0:	68b9      	ldr	r1, [r7, #8]
    6ed2:	4618      	mov	r0, r3
    6ed4:	4b08      	ldr	r3, [pc, #32]	; (6ef8 <pwm_init+0x58>)
    6ed6:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    6ed8:	68fb      	ldr	r3, [r7, #12]
    6eda:	4a08      	ldr	r2, [pc, #32]	; (6efc <pwm_init+0x5c>)
    6edc:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    6ede:	68fb      	ldr	r3, [r7, #12]
    6ee0:	4a07      	ldr	r2, [pc, #28]	; (6f00 <pwm_init+0x60>)
    6ee2:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    6ee4:	2300      	movs	r3, #0
}
    6ee6:	4618      	mov	r0, r3
    6ee8:	3710      	adds	r7, #16
    6eea:	46bd      	mov	sp, r7
    6eec:	bd80      	pop	{r7, pc}
    6eee:	bf00      	nop
    6ef0:	00020a94 	.word	0x00020a94
    6ef4:	00008145 	.word	0x00008145
    6ef8:	0000d551 	.word	0x0000d551
    6efc:	00006f59 	.word	0x00006f59
    6f00:	00006f7d 	.word	0x00006f7d

00006f04 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    6f04:	b580      	push	{r7, lr}
    6f06:	b082      	sub	sp, #8
    6f08:	af00      	add	r7, sp, #0
    6f0a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    6f0c:	687b      	ldr	r3, [r7, #4]
    6f0e:	2b00      	cmp	r3, #0
    6f10:	bf14      	ite	ne
    6f12:	2301      	movne	r3, #1
    6f14:	2300      	moveq	r3, #0
    6f16:	b2db      	uxtb	r3, r3
    6f18:	224a      	movs	r2, #74	; 0x4a
    6f1a:	490b      	ldr	r1, [pc, #44]	; (6f48 <pwm_enable+0x44>)
    6f1c:	4618      	mov	r0, r3
    6f1e:	4b0b      	ldr	r3, [pc, #44]	; (6f4c <pwm_enable+0x48>)
    6f20:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    6f22:	687b      	ldr	r3, [r7, #4]
    6f24:	4618      	mov	r0, r3
    6f26:	4b0a      	ldr	r3, [pc, #40]	; (6f50 <pwm_enable+0x4c>)
    6f28:	4798      	blx	r3
    6f2a:	4603      	mov	r3, r0
    6f2c:	2b00      	cmp	r3, #0
    6f2e:	d002      	beq.n	6f36 <pwm_enable+0x32>
		return ERR_DENIED;
    6f30:	f06f 0310 	mvn.w	r3, #16
    6f34:	e004      	b.n	6f40 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    6f36:	687b      	ldr	r3, [r7, #4]
    6f38:	4618      	mov	r0, r3
    6f3a:	4b06      	ldr	r3, [pc, #24]	; (6f54 <pwm_enable+0x50>)
    6f3c:	4798      	blx	r3

	return ERR_NONE;
    6f3e:	2300      	movs	r3, #0
}
    6f40:	4618      	mov	r0, r3
    6f42:	3708      	adds	r7, #8
    6f44:	46bd      	mov	sp, r7
    6f46:	bd80      	pop	{r7, pc}
    6f48:	00020a94 	.word	0x00020a94
    6f4c:	00008145 	.word	0x00008145
    6f50:	0000d941 	.word	0x0000d941
    6f54:	0000d7fd 	.word	0x0000d7fd

00006f58 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    6f58:	b580      	push	{r7, lr}
    6f5a:	b084      	sub	sp, #16
    6f5c:	af00      	add	r7, sp, #0
    6f5e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    6f60:	687b      	ldr	r3, [r7, #4]
    6f62:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    6f64:	68fb      	ldr	r3, [r7, #12]
    6f66:	695b      	ldr	r3, [r3, #20]
    6f68:	2b00      	cmp	r3, #0
    6f6a:	d003      	beq.n	6f74 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    6f6c:	68fb      	ldr	r3, [r7, #12]
    6f6e:	695b      	ldr	r3, [r3, #20]
    6f70:	68f8      	ldr	r0, [r7, #12]
    6f72:	4798      	blx	r3
	}
}
    6f74:	bf00      	nop
    6f76:	3710      	adds	r7, #16
    6f78:	46bd      	mov	sp, r7
    6f7a:	bd80      	pop	{r7, pc}

00006f7c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    6f7c:	b580      	push	{r7, lr}
    6f7e:	b084      	sub	sp, #16
    6f80:	af00      	add	r7, sp, #0
    6f82:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    6f84:	687b      	ldr	r3, [r7, #4]
    6f86:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    6f88:	68fb      	ldr	r3, [r7, #12]
    6f8a:	699b      	ldr	r3, [r3, #24]
    6f8c:	2b00      	cmp	r3, #0
    6f8e:	d003      	beq.n	6f98 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    6f90:	68fb      	ldr	r3, [r7, #12]
    6f92:	699b      	ldr	r3, [r3, #24]
    6f94:	68f8      	ldr	r0, [r7, #12]
    6f96:	4798      	blx	r3
	}
}
    6f98:	bf00      	nop
    6f9a:	3710      	adds	r7, #16
    6f9c:	46bd      	mov	sp, r7
    6f9e:	bd80      	pop	{r7, pc}

00006fa0 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    6fa0:	b580      	push	{r7, lr}
    6fa2:	b082      	sub	sp, #8
    6fa4:	af00      	add	r7, sp, #0
    6fa6:	6078      	str	r0, [r7, #4]
    6fa8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    6faa:	687b      	ldr	r3, [r7, #4]
    6fac:	2b00      	cmp	r3, #0
    6fae:	d004      	beq.n	6fba <qspi_sync_init+0x1a>
    6fb0:	683b      	ldr	r3, [r7, #0]
    6fb2:	2b00      	cmp	r3, #0
    6fb4:	d001      	beq.n	6fba <qspi_sync_init+0x1a>
    6fb6:	2301      	movs	r3, #1
    6fb8:	e000      	b.n	6fbc <qspi_sync_init+0x1c>
    6fba:	2300      	movs	r3, #0
    6fbc:	f003 0301 	and.w	r3, r3, #1
    6fc0:	b2db      	uxtb	r3, r3
    6fc2:	2231      	movs	r2, #49	; 0x31
    6fc4:	4906      	ldr	r1, [pc, #24]	; (6fe0 <qspi_sync_init+0x40>)
    6fc6:	4618      	mov	r0, r3
    6fc8:	4b06      	ldr	r3, [pc, #24]	; (6fe4 <qspi_sync_init+0x44>)
    6fca:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    6fcc:	687b      	ldr	r3, [r7, #4]
    6fce:	6839      	ldr	r1, [r7, #0]
    6fd0:	4618      	mov	r0, r3
    6fd2:	4b05      	ldr	r3, [pc, #20]	; (6fe8 <qspi_sync_init+0x48>)
    6fd4:	4798      	blx	r3
    6fd6:	4603      	mov	r3, r0
}
    6fd8:	4618      	mov	r0, r3
    6fda:	3708      	adds	r7, #8
    6fdc:	46bd      	mov	sp, r7
    6fde:	bd80      	pop	{r7, pc}
    6fe0:	00020aac 	.word	0x00020aac
    6fe4:	00008145 	.word	0x00008145
    6fe8:	0000a671 	.word	0x0000a671

00006fec <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    6fec:	b580      	push	{r7, lr}
    6fee:	b082      	sub	sp, #8
    6ff0:	af00      	add	r7, sp, #0
    6ff2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    6ff4:	687b      	ldr	r3, [r7, #4]
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	bf14      	ite	ne
    6ffa:	2301      	movne	r3, #1
    6ffc:	2300      	moveq	r3, #0
    6ffe:	b2db      	uxtb	r3, r3
    7000:	223f      	movs	r2, #63	; 0x3f
    7002:	4906      	ldr	r1, [pc, #24]	; (701c <qspi_sync_enable+0x30>)
    7004:	4618      	mov	r0, r3
    7006:	4b06      	ldr	r3, [pc, #24]	; (7020 <qspi_sync_enable+0x34>)
    7008:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    700a:	687b      	ldr	r3, [r7, #4]
    700c:	4618      	mov	r0, r3
    700e:	4b05      	ldr	r3, [pc, #20]	; (7024 <qspi_sync_enable+0x38>)
    7010:	4798      	blx	r3
    7012:	4603      	mov	r3, r0
}
    7014:	4618      	mov	r0, r3
    7016:	3708      	adds	r7, #8
    7018:	46bd      	mov	sp, r7
    701a:	bd80      	pop	{r7, pc}
    701c:	00020aac 	.word	0x00020aac
    7020:	00008145 	.word	0x00008145
    7024:	0000a6e5 	.word	0x0000a6e5

00007028 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    7028:	b580      	push	{r7, lr}
    702a:	b082      	sub	sp, #8
    702c:	af00      	add	r7, sp, #0
    702e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    7030:	687b      	ldr	r3, [r7, #4]
    7032:	2b00      	cmp	r3, #0
    7034:	bf14      	ite	ne
    7036:	2301      	movne	r3, #1
    7038:	2300      	moveq	r3, #0
    703a:	b2db      	uxtb	r3, r3
    703c:	2246      	movs	r2, #70	; 0x46
    703e:	4906      	ldr	r1, [pc, #24]	; (7058 <qspi_sync_disable+0x30>)
    7040:	4618      	mov	r0, r3
    7042:	4b06      	ldr	r3, [pc, #24]	; (705c <qspi_sync_disable+0x34>)
    7044:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    7046:	687b      	ldr	r3, [r7, #4]
    7048:	4618      	mov	r0, r3
    704a:	4b05      	ldr	r3, [pc, #20]	; (7060 <qspi_sync_disable+0x38>)
    704c:	4798      	blx	r3
    704e:	4603      	mov	r3, r0
}
    7050:	4618      	mov	r0, r3
    7052:	3708      	adds	r7, #8
    7054:	46bd      	mov	sp, r7
    7056:	bd80      	pop	{r7, pc}
    7058:	00020aac 	.word	0x00020aac
    705c:	00008145 	.word	0x00008145
    7060:	0000a709 	.word	0x0000a709

00007064 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    7064:	b580      	push	{r7, lr}
    7066:	b082      	sub	sp, #8
    7068:	af00      	add	r7, sp, #0
    706a:	6078      	str	r0, [r7, #4]
    706c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    706e:	687b      	ldr	r3, [r7, #4]
    7070:	2b00      	cmp	r3, #0
    7072:	d004      	beq.n	707e <qspi_sync_serial_run_command+0x1a>
    7074:	683b      	ldr	r3, [r7, #0]
    7076:	2b00      	cmp	r3, #0
    7078:	d001      	beq.n	707e <qspi_sync_serial_run_command+0x1a>
    707a:	2301      	movs	r3, #1
    707c:	e000      	b.n	7080 <qspi_sync_serial_run_command+0x1c>
    707e:	2300      	movs	r3, #0
    7080:	f003 0301 	and.w	r3, r3, #1
    7084:	b2db      	uxtb	r3, r3
    7086:	224d      	movs	r2, #77	; 0x4d
    7088:	4906      	ldr	r1, [pc, #24]	; (70a4 <qspi_sync_serial_run_command+0x40>)
    708a:	4618      	mov	r0, r3
    708c:	4b06      	ldr	r3, [pc, #24]	; (70a8 <qspi_sync_serial_run_command+0x44>)
    708e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    7090:	687b      	ldr	r3, [r7, #4]
    7092:	6839      	ldr	r1, [r7, #0]
    7094:	4618      	mov	r0, r3
    7096:	4b05      	ldr	r3, [pc, #20]	; (70ac <qspi_sync_serial_run_command+0x48>)
    7098:	4798      	blx	r3
    709a:	4603      	mov	r3, r0
}
    709c:	4618      	mov	r0, r3
    709e:	3708      	adds	r7, #8
    70a0:	46bd      	mov	sp, r7
    70a2:	bd80      	pop	{r7, pc}
    70a4:	00020aac 	.word	0x00020aac
    70a8:	00008145 	.word	0x00008145
    70ac:	0000a855 	.word	0x0000a855

000070b0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    70b0:	b580      	push	{r7, lr}
    70b2:	b084      	sub	sp, #16
    70b4:	af00      	add	r7, sp, #0
    70b6:	6078      	str	r0, [r7, #4]
    70b8:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    70ba:	2300      	movs	r3, #0
    70bc:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    70be:	687b      	ldr	r3, [r7, #4]
    70c0:	2b00      	cmp	r3, #0
    70c2:	d004      	beq.n	70ce <spi_m_sync_init+0x1e>
    70c4:	683b      	ldr	r3, [r7, #0]
    70c6:	2b00      	cmp	r3, #0
    70c8:	d001      	beq.n	70ce <spi_m_sync_init+0x1e>
    70ca:	2301      	movs	r3, #1
    70cc:	e000      	b.n	70d0 <spi_m_sync_init+0x20>
    70ce:	2300      	movs	r3, #0
    70d0:	f003 0301 	and.w	r3, r3, #1
    70d4:	b2db      	uxtb	r3, r3
    70d6:	2240      	movs	r2, #64	; 0x40
    70d8:	4910      	ldr	r1, [pc, #64]	; (711c <spi_m_sync_init+0x6c>)
    70da:	4618      	mov	r0, r3
    70dc:	4b10      	ldr	r3, [pc, #64]	; (7120 <spi_m_sync_init+0x70>)
    70de:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    70e0:	687b      	ldr	r3, [r7, #4]
    70e2:	683a      	ldr	r2, [r7, #0]
    70e4:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    70e6:	687b      	ldr	r3, [r7, #4]
    70e8:	3304      	adds	r3, #4
    70ea:	6839      	ldr	r1, [r7, #0]
    70ec:	4618      	mov	r0, r3
    70ee:	4b0d      	ldr	r3, [pc, #52]	; (7124 <spi_m_sync_init+0x74>)
    70f0:	4798      	blx	r3
    70f2:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    70f4:	68fb      	ldr	r3, [r7, #12]
    70f6:	2b00      	cmp	r3, #0
    70f8:	da01      	bge.n	70fe <spi_m_sync_init+0x4e>
		return rc;
    70fa:	68fb      	ldr	r3, [r7, #12]
    70fc:	e00a      	b.n	7114 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    70fe:	687b      	ldr	r3, [r7, #4]
    7100:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    7104:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    7106:	687b      	ldr	r3, [r7, #4]
    7108:	4a07      	ldr	r2, [pc, #28]	; (7128 <spi_m_sync_init+0x78>)
    710a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    710c:	687b      	ldr	r3, [r7, #4]
    710e:	4a07      	ldr	r2, [pc, #28]	; (712c <spi_m_sync_init+0x7c>)
    7110:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    7112:	2300      	movs	r3, #0
}
    7114:	4618      	mov	r0, r3
    7116:	3710      	adds	r7, #16
    7118:	46bd      	mov	sp, r7
    711a:	bd80      	pop	{r7, pc}
    711c:	00020ac8 	.word	0x00020ac8
    7120:	00008145 	.word	0x00008145
    7124:	0000c3b5 	.word	0x0000c3b5
    7128:	000071a9 	.word	0x000071a9
    712c:	00007201 	.word	0x00007201

00007130 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    7130:	b580      	push	{r7, lr}
    7132:	b082      	sub	sp, #8
    7134:	af00      	add	r7, sp, #0
    7136:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    7138:	687b      	ldr	r3, [r7, #4]
    713a:	2b00      	cmp	r3, #0
    713c:	bf14      	ite	ne
    713e:	2301      	movne	r3, #1
    7140:	2300      	moveq	r3, #0
    7142:	b2db      	uxtb	r3, r3
    7144:	2257      	movs	r2, #87	; 0x57
    7146:	4906      	ldr	r1, [pc, #24]	; (7160 <spi_m_sync_enable+0x30>)
    7148:	4618      	mov	r0, r3
    714a:	4b06      	ldr	r3, [pc, #24]	; (7164 <spi_m_sync_enable+0x34>)
    714c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    714e:	687b      	ldr	r3, [r7, #4]
    7150:	3304      	adds	r3, #4
    7152:	4618      	mov	r0, r3
    7154:	4b04      	ldr	r3, [pc, #16]	; (7168 <spi_m_sync_enable+0x38>)
    7156:	4798      	blx	r3
}
    7158:	bf00      	nop
    715a:	3708      	adds	r7, #8
    715c:	46bd      	mov	sp, r7
    715e:	bd80      	pop	{r7, pc}
    7160:	00020ac8 	.word	0x00020ac8
    7164:	00008145 	.word	0x00008145
    7168:	0000c4c1 	.word	0x0000c4c1

0000716c <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    716c:	b580      	push	{r7, lr}
    716e:	b082      	sub	sp, #8
    7170:	af00      	add	r7, sp, #0
    7172:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    7174:	687b      	ldr	r3, [r7, #4]
    7176:	2b00      	cmp	r3, #0
    7178:	bf14      	ite	ne
    717a:	2301      	movne	r3, #1
    717c:	2300      	moveq	r3, #0
    717e:	b2db      	uxtb	r3, r3
    7180:	225d      	movs	r2, #93	; 0x5d
    7182:	4906      	ldr	r1, [pc, #24]	; (719c <spi_m_sync_disable+0x30>)
    7184:	4618      	mov	r0, r3
    7186:	4b06      	ldr	r3, [pc, #24]	; (71a0 <spi_m_sync_disable+0x34>)
    7188:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    718a:	687b      	ldr	r3, [r7, #4]
    718c:	3304      	adds	r3, #4
    718e:	4618      	mov	r0, r3
    7190:	4b04      	ldr	r3, [pc, #16]	; (71a4 <spi_m_sync_disable+0x38>)
    7192:	4798      	blx	r3
}
    7194:	bf00      	nop
    7196:	3708      	adds	r7, #8
    7198:	46bd      	mov	sp, r7
    719a:	bd80      	pop	{r7, pc}
    719c:	00020ac8 	.word	0x00020ac8
    71a0:	00008145 	.word	0x00008145
    71a4:	0000c511 	.word	0x0000c511

000071a8 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    71a8:	b580      	push	{r7, lr}
    71aa:	b088      	sub	sp, #32
    71ac:	af00      	add	r7, sp, #0
    71ae:	60f8      	str	r0, [r7, #12]
    71b0:	60b9      	str	r1, [r7, #8]
    71b2:	4613      	mov	r3, r2
    71b4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    71b6:	68fb      	ldr	r3, [r7, #12]
    71b8:	2b00      	cmp	r3, #0
    71ba:	bf14      	ite	ne
    71bc:	2301      	movne	r3, #1
    71be:	2300      	moveq	r3, #0
    71c0:	b2db      	uxtb	r3, r3
    71c2:	2287      	movs	r2, #135	; 0x87
    71c4:	490b      	ldr	r1, [pc, #44]	; (71f4 <_spi_m_sync_io_read+0x4c>)
    71c6:	4618      	mov	r0, r3
    71c8:	4b0b      	ldr	r3, [pc, #44]	; (71f8 <_spi_m_sync_io_read+0x50>)
    71ca:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    71cc:	68fb      	ldr	r3, [r7, #12]
    71ce:	3b0c      	subs	r3, #12
    71d0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    71d2:	68bb      	ldr	r3, [r7, #8]
    71d4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    71d6:	2300      	movs	r3, #0
    71d8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    71da:	88fb      	ldrh	r3, [r7, #6]
    71dc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    71de:	f107 0310 	add.w	r3, r7, #16
    71e2:	4619      	mov	r1, r3
    71e4:	69f8      	ldr	r0, [r7, #28]
    71e6:	4b05      	ldr	r3, [pc, #20]	; (71fc <_spi_m_sync_io_read+0x54>)
    71e8:	4798      	blx	r3
    71ea:	4603      	mov	r3, r0
}
    71ec:	4618      	mov	r0, r3
    71ee:	3720      	adds	r7, #32
    71f0:	46bd      	mov	sp, r7
    71f2:	bd80      	pop	{r7, pc}
    71f4:	00020ac8 	.word	0x00020ac8
    71f8:	00008145 	.word	0x00008145
    71fc:	00007259 	.word	0x00007259

00007200 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    7200:	b580      	push	{r7, lr}
    7202:	b088      	sub	sp, #32
    7204:	af00      	add	r7, sp, #0
    7206:	60f8      	str	r0, [r7, #12]
    7208:	60b9      	str	r1, [r7, #8]
    720a:	4613      	mov	r3, r2
    720c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    720e:	68fb      	ldr	r3, [r7, #12]
    7210:	2b00      	cmp	r3, #0
    7212:	bf14      	ite	ne
    7214:	2301      	movne	r3, #1
    7216:	2300      	moveq	r3, #0
    7218:	b2db      	uxtb	r3, r3
    721a:	22a3      	movs	r2, #163	; 0xa3
    721c:	490b      	ldr	r1, [pc, #44]	; (724c <_spi_m_sync_io_write+0x4c>)
    721e:	4618      	mov	r0, r3
    7220:	4b0b      	ldr	r3, [pc, #44]	; (7250 <_spi_m_sync_io_write+0x50>)
    7222:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    7224:	68fb      	ldr	r3, [r7, #12]
    7226:	3b0c      	subs	r3, #12
    7228:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    722a:	2300      	movs	r3, #0
    722c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    722e:	68bb      	ldr	r3, [r7, #8]
    7230:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    7232:	88fb      	ldrh	r3, [r7, #6]
    7234:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    7236:	f107 0310 	add.w	r3, r7, #16
    723a:	4619      	mov	r1, r3
    723c:	69f8      	ldr	r0, [r7, #28]
    723e:	4b05      	ldr	r3, [pc, #20]	; (7254 <_spi_m_sync_io_write+0x54>)
    7240:	4798      	blx	r3
    7242:	4603      	mov	r3, r0
}
    7244:	4618      	mov	r0, r3
    7246:	3720      	adds	r7, #32
    7248:	46bd      	mov	sp, r7
    724a:	bd80      	pop	{r7, pc}
    724c:	00020ac8 	.word	0x00020ac8
    7250:	00008145 	.word	0x00008145
    7254:	00007259 	.word	0x00007259

00007258 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    7258:	b580      	push	{r7, lr}
    725a:	b086      	sub	sp, #24
    725c:	af00      	add	r7, sp, #0
    725e:	6078      	str	r0, [r7, #4]
    7260:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    7262:	687b      	ldr	r3, [r7, #4]
    7264:	2b00      	cmp	r3, #0
    7266:	d004      	beq.n	7272 <spi_m_sync_transfer+0x1a>
    7268:	683b      	ldr	r3, [r7, #0]
    726a:	2b00      	cmp	r3, #0
    726c:	d001      	beq.n	7272 <spi_m_sync_transfer+0x1a>
    726e:	2301      	movs	r3, #1
    7270:	e000      	b.n	7274 <spi_m_sync_transfer+0x1c>
    7272:	2300      	movs	r3, #0
    7274:	f003 0301 	and.w	r3, r3, #1
    7278:	b2db      	uxtb	r3, r3
    727a:	22b3      	movs	r2, #179	; 0xb3
    727c:	490c      	ldr	r1, [pc, #48]	; (72b0 <spi_m_sync_transfer+0x58>)
    727e:	4618      	mov	r0, r3
    7280:	4b0c      	ldr	r3, [pc, #48]	; (72b4 <spi_m_sync_transfer+0x5c>)
    7282:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    7284:	683b      	ldr	r3, [r7, #0]
    7286:	681b      	ldr	r3, [r3, #0]
    7288:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    728a:	683b      	ldr	r3, [r7, #0]
    728c:	685b      	ldr	r3, [r3, #4]
    728e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    7290:	683b      	ldr	r3, [r7, #0]
    7292:	689b      	ldr	r3, [r3, #8]
    7294:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    7296:	687b      	ldr	r3, [r7, #4]
    7298:	3304      	adds	r3, #4
    729a:	f107 020c 	add.w	r2, r7, #12
    729e:	4611      	mov	r1, r2
    72a0:	4618      	mov	r0, r3
    72a2:	4b05      	ldr	r3, [pc, #20]	; (72b8 <spi_m_sync_transfer+0x60>)
    72a4:	4798      	blx	r3
    72a6:	4603      	mov	r3, r0
}
    72a8:	4618      	mov	r0, r3
    72aa:	3718      	adds	r7, #24
    72ac:	46bd      	mov	sp, r7
    72ae:	bd80      	pop	{r7, pc}
    72b0:	00020ac8 	.word	0x00020ac8
    72b4:	00008145 	.word	0x00008145
    72b8:	0000c6b5 	.word	0x0000c6b5

000072bc <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    72bc:	b580      	push	{r7, lr}
    72be:	b082      	sub	sp, #8
    72c0:	af00      	add	r7, sp, #0
    72c2:	6078      	str	r0, [r7, #4]
    72c4:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    72c6:	687b      	ldr	r3, [r7, #4]
    72c8:	2b00      	cmp	r3, #0
    72ca:	d004      	beq.n	72d6 <spi_m_sync_get_io_descriptor+0x1a>
    72cc:	683b      	ldr	r3, [r7, #0]
    72ce:	2b00      	cmp	r3, #0
    72d0:	d001      	beq.n	72d6 <spi_m_sync_get_io_descriptor+0x1a>
    72d2:	2301      	movs	r3, #1
    72d4:	e000      	b.n	72d8 <spi_m_sync_get_io_descriptor+0x1c>
    72d6:	2300      	movs	r3, #0
    72d8:	f003 0301 	and.w	r3, r3, #1
    72dc:	b2db      	uxtb	r3, r3
    72de:	22bd      	movs	r2, #189	; 0xbd
    72e0:	4906      	ldr	r1, [pc, #24]	; (72fc <spi_m_sync_get_io_descriptor+0x40>)
    72e2:	4618      	mov	r0, r3
    72e4:	4b06      	ldr	r3, [pc, #24]	; (7300 <spi_m_sync_get_io_descriptor+0x44>)
    72e6:	4798      	blx	r3
	*io = &spi->io;
    72e8:	687b      	ldr	r3, [r7, #4]
    72ea:	f103 020c 	add.w	r2, r3, #12
    72ee:	683b      	ldr	r3, [r7, #0]
    72f0:	601a      	str	r2, [r3, #0]
	return 0;
    72f2:	2300      	movs	r3, #0
}
    72f4:	4618      	mov	r0, r3
    72f6:	3708      	adds	r7, #8
    72f8:	46bd      	mov	sp, r7
    72fa:	bd80      	pop	{r7, pc}
    72fc:	00020ac8 	.word	0x00020ac8
    7300:	00008145 	.word	0x00008145

00007304 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    7304:	b480      	push	{r7}
    7306:	b083      	sub	sp, #12
    7308:	af00      	add	r7, sp, #0
    730a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    730c:	687b      	ldr	r3, [r7, #4]
    730e:	681b      	ldr	r3, [r3, #0]
}
    7310:	4618      	mov	r0, r3
    7312:	370c      	adds	r7, #12
    7314:	46bd      	mov	sp, r7
    7316:	f85d 7b04 	ldr.w	r7, [sp], #4
    731a:	4770      	bx	lr

0000731c <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    731c:	b480      	push	{r7}
    731e:	b083      	sub	sp, #12
    7320:	af00      	add	r7, sp, #0
    7322:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    7324:	687b      	ldr	r3, [r7, #4]
    7326:	2b00      	cmp	r3, #0
    7328:	d002      	beq.n	7330 <list_get_next_element+0x14>
    732a:	687b      	ldr	r3, [r7, #4]
    732c:	681b      	ldr	r3, [r3, #0]
    732e:	e000      	b.n	7332 <list_get_next_element+0x16>
    7330:	2300      	movs	r3, #0
}
    7332:	4618      	mov	r0, r3
    7334:	370c      	adds	r7, #12
    7336:	46bd      	mov	sp, r7
    7338:	f85d 7b04 	ldr.w	r7, [sp], #4
    733c:	4770      	bx	lr
	...

00007340 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    7340:	b580      	push	{r7, lr}
    7342:	b084      	sub	sp, #16
    7344:	af00      	add	r7, sp, #0
    7346:	60f8      	str	r0, [r7, #12]
    7348:	60b9      	str	r1, [r7, #8]
    734a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    734c:	68fb      	ldr	r3, [r7, #12]
    734e:	2b00      	cmp	r3, #0
    7350:	d007      	beq.n	7362 <timer_init+0x22>
    7352:	68bb      	ldr	r3, [r7, #8]
    7354:	2b00      	cmp	r3, #0
    7356:	d004      	beq.n	7362 <timer_init+0x22>
    7358:	687b      	ldr	r3, [r7, #4]
    735a:	2b00      	cmp	r3, #0
    735c:	d001      	beq.n	7362 <timer_init+0x22>
    735e:	2301      	movs	r3, #1
    7360:	e000      	b.n	7364 <timer_init+0x24>
    7362:	2300      	movs	r3, #0
    7364:	f003 0301 	and.w	r3, r3, #1
    7368:	b2db      	uxtb	r3, r3
    736a:	223b      	movs	r2, #59	; 0x3b
    736c:	490c      	ldr	r1, [pc, #48]	; (73a0 <timer_init+0x60>)
    736e:	4618      	mov	r0, r3
    7370:	4b0c      	ldr	r3, [pc, #48]	; (73a4 <timer_init+0x64>)
    7372:	4798      	blx	r3
	descr->func = func;
    7374:	68fb      	ldr	r3, [r7, #12]
    7376:	687a      	ldr	r2, [r7, #4]
    7378:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    737a:	68fb      	ldr	r3, [r7, #12]
    737c:	681b      	ldr	r3, [r3, #0]
    737e:	681b      	ldr	r3, [r3, #0]
    7380:	68fa      	ldr	r2, [r7, #12]
    7382:	3204      	adds	r2, #4
    7384:	68b9      	ldr	r1, [r7, #8]
    7386:	4610      	mov	r0, r2
    7388:	4798      	blx	r3
	descr->time                           = 0;
    738a:	68fb      	ldr	r3, [r7, #12]
    738c:	2200      	movs	r2, #0
    738e:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    7390:	68fb      	ldr	r3, [r7, #12]
    7392:	4a05      	ldr	r2, [pc, #20]	; (73a8 <timer_init+0x68>)
    7394:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    7396:	2300      	movs	r3, #0
}
    7398:	4618      	mov	r0, r3
    739a:	3710      	adds	r7, #16
    739c:	46bd      	mov	sp, r7
    739e:	bd80      	pop	{r7, pc}
    73a0:	00020ae4 	.word	0x00020ae4
    73a4:	00008145 	.word	0x00008145
    73a8:	00007731 	.word	0x00007731

000073ac <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    73ac:	b580      	push	{r7, lr}
    73ae:	b082      	sub	sp, #8
    73b0:	af00      	add	r7, sp, #0
    73b2:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    73b4:	687b      	ldr	r3, [r7, #4]
    73b6:	2b00      	cmp	r3, #0
    73b8:	d005      	beq.n	73c6 <timer_start+0x1a>
    73ba:	687b      	ldr	r3, [r7, #4]
    73bc:	681b      	ldr	r3, [r3, #0]
    73be:	2b00      	cmp	r3, #0
    73c0:	d001      	beq.n	73c6 <timer_start+0x1a>
    73c2:	2301      	movs	r3, #1
    73c4:	e000      	b.n	73c8 <timer_start+0x1c>
    73c6:	2300      	movs	r3, #0
    73c8:	f003 0301 	and.w	r3, r3, #1
    73cc:	b2db      	uxtb	r3, r3
    73ce:	2254      	movs	r2, #84	; 0x54
    73d0:	490e      	ldr	r1, [pc, #56]	; (740c <timer_start+0x60>)
    73d2:	4618      	mov	r0, r3
    73d4:	4b0e      	ldr	r3, [pc, #56]	; (7410 <timer_start+0x64>)
    73d6:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    73d8:	687b      	ldr	r3, [r7, #4]
    73da:	681b      	ldr	r3, [r3, #0]
    73dc:	699b      	ldr	r3, [r3, #24]
    73de:	687a      	ldr	r2, [r7, #4]
    73e0:	3204      	adds	r2, #4
    73e2:	4610      	mov	r0, r2
    73e4:	4798      	blx	r3
    73e6:	4603      	mov	r3, r0
    73e8:	2b00      	cmp	r3, #0
    73ea:	d002      	beq.n	73f2 <timer_start+0x46>
		return ERR_DENIED;
    73ec:	f06f 0310 	mvn.w	r3, #16
    73f0:	e007      	b.n	7402 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    73f2:	687b      	ldr	r3, [r7, #4]
    73f4:	681b      	ldr	r3, [r3, #0]
    73f6:	689b      	ldr	r3, [r3, #8]
    73f8:	687a      	ldr	r2, [r7, #4]
    73fa:	3204      	adds	r2, #4
    73fc:	4610      	mov	r0, r2
    73fe:	4798      	blx	r3

	return ERR_NONE;
    7400:	2300      	movs	r3, #0
}
    7402:	4618      	mov	r0, r3
    7404:	3708      	adds	r7, #8
    7406:	46bd      	mov	sp, r7
    7408:	bd80      	pop	{r7, pc}
    740a:	bf00      	nop
    740c:	00020ae4 	.word	0x00020ae4
    7410:	00008145 	.word	0x00008145

00007414 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    7414:	b580      	push	{r7, lr}
    7416:	b082      	sub	sp, #8
    7418:	af00      	add	r7, sp, #0
    741a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    741c:	687b      	ldr	r3, [r7, #4]
    741e:	2b00      	cmp	r3, #0
    7420:	d005      	beq.n	742e <timer_stop+0x1a>
    7422:	687b      	ldr	r3, [r7, #4]
    7424:	681b      	ldr	r3, [r3, #0]
    7426:	2b00      	cmp	r3, #0
    7428:	d001      	beq.n	742e <timer_stop+0x1a>
    742a:	2301      	movs	r3, #1
    742c:	e000      	b.n	7430 <timer_stop+0x1c>
    742e:	2300      	movs	r3, #0
    7430:	f003 0301 	and.w	r3, r3, #1
    7434:	b2db      	uxtb	r3, r3
    7436:	2262      	movs	r2, #98	; 0x62
    7438:	490f      	ldr	r1, [pc, #60]	; (7478 <timer_stop+0x64>)
    743a:	4618      	mov	r0, r3
    743c:	4b0f      	ldr	r3, [pc, #60]	; (747c <timer_stop+0x68>)
    743e:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    7440:	687b      	ldr	r3, [r7, #4]
    7442:	681b      	ldr	r3, [r3, #0]
    7444:	699b      	ldr	r3, [r3, #24]
    7446:	687a      	ldr	r2, [r7, #4]
    7448:	3204      	adds	r2, #4
    744a:	4610      	mov	r0, r2
    744c:	4798      	blx	r3
    744e:	4603      	mov	r3, r0
    7450:	f083 0301 	eor.w	r3, r3, #1
    7454:	b2db      	uxtb	r3, r3
    7456:	2b00      	cmp	r3, #0
    7458:	d002      	beq.n	7460 <timer_stop+0x4c>
		return ERR_DENIED;
    745a:	f06f 0310 	mvn.w	r3, #16
    745e:	e007      	b.n	7470 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    7460:	687b      	ldr	r3, [r7, #4]
    7462:	681b      	ldr	r3, [r3, #0]
    7464:	68db      	ldr	r3, [r3, #12]
    7466:	687a      	ldr	r2, [r7, #4]
    7468:	3204      	adds	r2, #4
    746a:	4610      	mov	r0, r2
    746c:	4798      	blx	r3

	return ERR_NONE;
    746e:	2300      	movs	r3, #0
}
    7470:	4618      	mov	r0, r3
    7472:	3708      	adds	r7, #8
    7474:	46bd      	mov	sp, r7
    7476:	bd80      	pop	{r7, pc}
    7478:	00020ae4 	.word	0x00020ae4
    747c:	00008145 	.word	0x00008145

00007480 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    7480:	b580      	push	{r7, lr}
    7482:	b084      	sub	sp, #16
    7484:	af00      	add	r7, sp, #0
    7486:	6078      	str	r0, [r7, #4]
    7488:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	2b00      	cmp	r3, #0
    748e:	d008      	beq.n	74a2 <timer_add_task+0x22>
    7490:	683b      	ldr	r3, [r7, #0]
    7492:	2b00      	cmp	r3, #0
    7494:	d005      	beq.n	74a2 <timer_add_task+0x22>
    7496:	687b      	ldr	r3, [r7, #4]
    7498:	681b      	ldr	r3, [r3, #0]
    749a:	2b00      	cmp	r3, #0
    749c:	d001      	beq.n	74a2 <timer_add_task+0x22>
    749e:	2301      	movs	r3, #1
    74a0:	e000      	b.n	74a4 <timer_add_task+0x24>
    74a2:	2300      	movs	r3, #0
    74a4:	f003 0301 	and.w	r3, r3, #1
    74a8:	b2db      	uxtb	r3, r3
    74aa:	227b      	movs	r2, #123	; 0x7b
    74ac:	492f      	ldr	r1, [pc, #188]	; (756c <timer_add_task+0xec>)
    74ae:	4618      	mov	r0, r3
    74b0:	4b2f      	ldr	r3, [pc, #188]	; (7570 <timer_add_task+0xf0>)
    74b2:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    74b4:	687b      	ldr	r3, [r7, #4]
    74b6:	7f1b      	ldrb	r3, [r3, #28]
    74b8:	b2db      	uxtb	r3, r3
    74ba:	f043 0301 	orr.w	r3, r3, #1
    74be:	b2da      	uxtb	r2, r3
    74c0:	687b      	ldr	r3, [r7, #4]
    74c2:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    74c4:	687b      	ldr	r3, [r7, #4]
    74c6:	3318      	adds	r3, #24
    74c8:	6839      	ldr	r1, [r7, #0]
    74ca:	4618      	mov	r0, r3
    74cc:	4b29      	ldr	r3, [pc, #164]	; (7574 <timer_add_task+0xf4>)
    74ce:	4798      	blx	r3
    74d0:	4603      	mov	r3, r0
    74d2:	2b00      	cmp	r3, #0
    74d4:	d00f      	beq.n	74f6 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    74d6:	687b      	ldr	r3, [r7, #4]
    74d8:	7f1b      	ldrb	r3, [r3, #28]
    74da:	b2db      	uxtb	r3, r3
    74dc:	f023 0301 	bic.w	r3, r3, #1
    74e0:	b2da      	uxtb	r2, r3
    74e2:	687b      	ldr	r3, [r7, #4]
    74e4:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    74e6:	2280      	movs	r2, #128	; 0x80
    74e8:	4920      	ldr	r1, [pc, #128]	; (756c <timer_add_task+0xec>)
    74ea:	2000      	movs	r0, #0
    74ec:	4b20      	ldr	r3, [pc, #128]	; (7570 <timer_add_task+0xf0>)
    74ee:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    74f0:	f06f 0311 	mvn.w	r3, #17
    74f4:	e035      	b.n	7562 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    74f6:	687b      	ldr	r3, [r7, #4]
    74f8:	695a      	ldr	r2, [r3, #20]
    74fa:	683b      	ldr	r3, [r7, #0]
    74fc:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    74fe:	687b      	ldr	r3, [r7, #4]
    7500:	f103 0018 	add.w	r0, r3, #24
    7504:	687b      	ldr	r3, [r7, #4]
    7506:	695b      	ldr	r3, [r3, #20]
    7508:	461a      	mov	r2, r3
    750a:	6839      	ldr	r1, [r7, #0]
    750c:	4b1a      	ldr	r3, [pc, #104]	; (7578 <timer_add_task+0xf8>)
    750e:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    7510:	687b      	ldr	r3, [r7, #4]
    7512:	7f1b      	ldrb	r3, [r3, #28]
    7514:	b2db      	uxtb	r3, r3
    7516:	f023 0301 	bic.w	r3, r3, #1
    751a:	b2da      	uxtb	r2, r3
    751c:	687b      	ldr	r3, [r7, #4]
    751e:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    7520:	687b      	ldr	r3, [r7, #4]
    7522:	7f1b      	ldrb	r3, [r3, #28]
    7524:	b2db      	uxtb	r3, r3
    7526:	f003 0302 	and.w	r3, r3, #2
    752a:	2b00      	cmp	r3, #0
    752c:	d018      	beq.n	7560 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    752e:	f107 030c 	add.w	r3, r7, #12
    7532:	4618      	mov	r0, r3
    7534:	4b11      	ldr	r3, [pc, #68]	; (757c <timer_add_task+0xfc>)
    7536:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    7538:	687b      	ldr	r3, [r7, #4]
    753a:	7f1b      	ldrb	r3, [r3, #28]
    753c:	b2db      	uxtb	r3, r3
    753e:	f023 0302 	bic.w	r3, r3, #2
    7542:	b2da      	uxtb	r2, r3
    7544:	687b      	ldr	r3, [r7, #4]
    7546:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    7548:	687b      	ldr	r3, [r7, #4]
    754a:	681b      	ldr	r3, [r3, #0]
    754c:	69db      	ldr	r3, [r3, #28]
    754e:	687a      	ldr	r2, [r7, #4]
    7550:	3204      	adds	r2, #4
    7552:	4610      	mov	r0, r2
    7554:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    7556:	f107 030c 	add.w	r3, r7, #12
    755a:	4618      	mov	r0, r3
    755c:	4b08      	ldr	r3, [pc, #32]	; (7580 <timer_add_task+0x100>)
    755e:	4798      	blx	r3
	}

	return ERR_NONE;
    7560:	2300      	movs	r3, #0
}
    7562:	4618      	mov	r0, r3
    7564:	3710      	adds	r7, #16
    7566:	46bd      	mov	sp, r7
    7568:	bd80      	pop	{r7, pc}
    756a:	bf00      	nop
    756c:	00020ae4 	.word	0x00020ae4
    7570:	00008145 	.word	0x00008145
    7574:	0000816d 	.word	0x0000816d
    7578:	00007681 	.word	0x00007681
    757c:	00010d21 	.word	0x00010d21
    7580:	00010d47 	.word	0x00010d47

00007584 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    7584:	b580      	push	{r7, lr}
    7586:	b084      	sub	sp, #16
    7588:	af00      	add	r7, sp, #0
    758a:	6078      	str	r0, [r7, #4]
    758c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    758e:	687b      	ldr	r3, [r7, #4]
    7590:	2b00      	cmp	r3, #0
    7592:	d008      	beq.n	75a6 <timer_remove_task+0x22>
    7594:	683b      	ldr	r3, [r7, #0]
    7596:	2b00      	cmp	r3, #0
    7598:	d005      	beq.n	75a6 <timer_remove_task+0x22>
    759a:	687b      	ldr	r3, [r7, #4]
    759c:	681b      	ldr	r3, [r3, #0]
    759e:	2b00      	cmp	r3, #0
    75a0:	d001      	beq.n	75a6 <timer_remove_task+0x22>
    75a2:	2301      	movs	r3, #1
    75a4:	e000      	b.n	75a8 <timer_remove_task+0x24>
    75a6:	2300      	movs	r3, #0
    75a8:	f003 0301 	and.w	r3, r3, #1
    75ac:	b2db      	uxtb	r3, r3
    75ae:	2296      	movs	r2, #150	; 0x96
    75b0:	492d      	ldr	r1, [pc, #180]	; (7668 <timer_remove_task+0xe4>)
    75b2:	4618      	mov	r0, r3
    75b4:	4b2d      	ldr	r3, [pc, #180]	; (766c <timer_remove_task+0xe8>)
    75b6:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    75b8:	687b      	ldr	r3, [r7, #4]
    75ba:	7f1b      	ldrb	r3, [r3, #28]
    75bc:	b2db      	uxtb	r3, r3
    75be:	f043 0301 	orr.w	r3, r3, #1
    75c2:	b2da      	uxtb	r2, r3
    75c4:	687b      	ldr	r3, [r7, #4]
    75c6:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    75c8:	687b      	ldr	r3, [r7, #4]
    75ca:	3318      	adds	r3, #24
    75cc:	6839      	ldr	r1, [r7, #0]
    75ce:	4618      	mov	r0, r3
    75d0:	4b27      	ldr	r3, [pc, #156]	; (7670 <timer_remove_task+0xec>)
    75d2:	4798      	blx	r3
    75d4:	4603      	mov	r3, r0
    75d6:	f083 0301 	eor.w	r3, r3, #1
    75da:	b2db      	uxtb	r3, r3
    75dc:	2b00      	cmp	r3, #0
    75de:	d00f      	beq.n	7600 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    75e0:	687b      	ldr	r3, [r7, #4]
    75e2:	7f1b      	ldrb	r3, [r3, #28]
    75e4:	b2db      	uxtb	r3, r3
    75e6:	f023 0301 	bic.w	r3, r3, #1
    75ea:	b2da      	uxtb	r2, r3
    75ec:	687b      	ldr	r3, [r7, #4]
    75ee:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    75f0:	229b      	movs	r2, #155	; 0x9b
    75f2:	491d      	ldr	r1, [pc, #116]	; (7668 <timer_remove_task+0xe4>)
    75f4:	2000      	movs	r0, #0
    75f6:	4b1d      	ldr	r3, [pc, #116]	; (766c <timer_remove_task+0xe8>)
    75f8:	4798      	blx	r3
		return ERR_NOT_FOUND;
    75fa:	f06f 0309 	mvn.w	r3, #9
    75fe:	e02e      	b.n	765e <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    7600:	687b      	ldr	r3, [r7, #4]
    7602:	3318      	adds	r3, #24
    7604:	6839      	ldr	r1, [r7, #0]
    7606:	4618      	mov	r0, r3
    7608:	4b1a      	ldr	r3, [pc, #104]	; (7674 <timer_remove_task+0xf0>)
    760a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    760c:	687b      	ldr	r3, [r7, #4]
    760e:	7f1b      	ldrb	r3, [r3, #28]
    7610:	b2db      	uxtb	r3, r3
    7612:	f023 0301 	bic.w	r3, r3, #1
    7616:	b2da      	uxtb	r2, r3
    7618:	687b      	ldr	r3, [r7, #4]
    761a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    761c:	687b      	ldr	r3, [r7, #4]
    761e:	7f1b      	ldrb	r3, [r3, #28]
    7620:	b2db      	uxtb	r3, r3
    7622:	f003 0302 	and.w	r3, r3, #2
    7626:	2b00      	cmp	r3, #0
    7628:	d018      	beq.n	765c <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    762a:	f107 030c 	add.w	r3, r7, #12
    762e:	4618      	mov	r0, r3
    7630:	4b11      	ldr	r3, [pc, #68]	; (7678 <timer_remove_task+0xf4>)
    7632:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    7634:	687b      	ldr	r3, [r7, #4]
    7636:	7f1b      	ldrb	r3, [r3, #28]
    7638:	b2db      	uxtb	r3, r3
    763a:	f023 0302 	bic.w	r3, r3, #2
    763e:	b2da      	uxtb	r2, r3
    7640:	687b      	ldr	r3, [r7, #4]
    7642:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    7644:	687b      	ldr	r3, [r7, #4]
    7646:	681b      	ldr	r3, [r3, #0]
    7648:	69db      	ldr	r3, [r3, #28]
    764a:	687a      	ldr	r2, [r7, #4]
    764c:	3204      	adds	r2, #4
    764e:	4610      	mov	r0, r2
    7650:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    7652:	f107 030c 	add.w	r3, r7, #12
    7656:	4618      	mov	r0, r3
    7658:	4b08      	ldr	r3, [pc, #32]	; (767c <timer_remove_task+0xf8>)
    765a:	4798      	blx	r3
	}

	return ERR_NONE;
    765c:	2300      	movs	r3, #0
}
    765e:	4618      	mov	r0, r3
    7660:	3710      	adds	r7, #16
    7662:	46bd      	mov	sp, r7
    7664:	bd80      	pop	{r7, pc}
    7666:	bf00      	nop
    7668:	00020ae4 	.word	0x00020ae4
    766c:	00008145 	.word	0x00008145
    7670:	0000816d 	.word	0x0000816d
    7674:	000082cf 	.word	0x000082cf
    7678:	00010d21 	.word	0x00010d21
    767c:	00010d47 	.word	0x00010d47

00007680 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    7680:	b580      	push	{r7, lr}
    7682:	b088      	sub	sp, #32
    7684:	af00      	add	r7, sp, #0
    7686:	60f8      	str	r0, [r7, #12]
    7688:	60b9      	str	r1, [r7, #8]
    768a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    768c:	2300      	movs	r3, #0
    768e:	61bb      	str	r3, [r7, #24]
    7690:	68f8      	ldr	r0, [r7, #12]
    7692:	4b23      	ldr	r3, [pc, #140]	; (7720 <timer_add_timer_task+0xa0>)
    7694:	4798      	blx	r3
    7696:	6138      	str	r0, [r7, #16]

	if (!head) {
    7698:	693b      	ldr	r3, [r7, #16]
    769a:	2b00      	cmp	r3, #0
    769c:	d104      	bne.n	76a8 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    769e:	68b9      	ldr	r1, [r7, #8]
    76a0:	68f8      	ldr	r0, [r7, #12]
    76a2:	4b20      	ldr	r3, [pc, #128]	; (7724 <timer_add_timer_task+0xa4>)
    76a4:	4798      	blx	r3
		return;
    76a6:	e037      	b.n	7718 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    76a8:	693b      	ldr	r3, [r7, #16]
    76aa:	61fb      	str	r3, [r7, #28]
    76ac:	e022      	b.n	76f4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    76ae:	69fb      	ldr	r3, [r7, #28]
    76b0:	685a      	ldr	r2, [r3, #4]
    76b2:	687b      	ldr	r3, [r7, #4]
    76b4:	429a      	cmp	r2, r3
    76b6:	d808      	bhi.n	76ca <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    76b8:	69fb      	ldr	r3, [r7, #28]
    76ba:	689a      	ldr	r2, [r3, #8]
    76bc:	69fb      	ldr	r3, [r7, #28]
    76be:	6859      	ldr	r1, [r3, #4]
    76c0:	687b      	ldr	r3, [r7, #4]
    76c2:	1acb      	subs	r3, r1, r3
    76c4:	4413      	add	r3, r2
    76c6:	617b      	str	r3, [r7, #20]
    76c8:	e009      	b.n	76de <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    76ca:	69fb      	ldr	r3, [r7, #28]
    76cc:	689a      	ldr	r2, [r3, #8]
    76ce:	69fb      	ldr	r3, [r7, #28]
    76d0:	685b      	ldr	r3, [r3, #4]
    76d2:	441a      	add	r2, r3
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	425b      	negs	r3, r3
    76d8:	4413      	add	r3, r2
    76da:	3301      	adds	r3, #1
    76dc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    76de:	68bb      	ldr	r3, [r7, #8]
    76e0:	689a      	ldr	r2, [r3, #8]
    76e2:	697b      	ldr	r3, [r7, #20]
    76e4:	429a      	cmp	r2, r3
    76e6:	d909      	bls.n	76fc <timer_add_timer_task+0x7c>
			break;
		prev = it;
    76e8:	69fb      	ldr	r3, [r7, #28]
    76ea:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    76ec:	69f8      	ldr	r0, [r7, #28]
    76ee:	4b0e      	ldr	r3, [pc, #56]	; (7728 <timer_add_timer_task+0xa8>)
    76f0:	4798      	blx	r3
    76f2:	61f8      	str	r0, [r7, #28]
    76f4:	69fb      	ldr	r3, [r7, #28]
    76f6:	2b00      	cmp	r3, #0
    76f8:	d1d9      	bne.n	76ae <timer_add_timer_task+0x2e>
    76fa:	e000      	b.n	76fe <timer_add_timer_task+0x7e>
			break;
    76fc:	bf00      	nop
	}

	if (it == head) {
    76fe:	69fa      	ldr	r2, [r7, #28]
    7700:	693b      	ldr	r3, [r7, #16]
    7702:	429a      	cmp	r2, r3
    7704:	d104      	bne.n	7710 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    7706:	68b9      	ldr	r1, [r7, #8]
    7708:	68f8      	ldr	r0, [r7, #12]
    770a:	4b06      	ldr	r3, [pc, #24]	; (7724 <timer_add_timer_task+0xa4>)
    770c:	4798      	blx	r3
    770e:	e003      	b.n	7718 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    7710:	68b9      	ldr	r1, [r7, #8]
    7712:	69b8      	ldr	r0, [r7, #24]
    7714:	4b05      	ldr	r3, [pc, #20]	; (772c <timer_add_timer_task+0xac>)
    7716:	4798      	blx	r3
	}
}
    7718:	3720      	adds	r7, #32
    771a:	46bd      	mov	sp, r7
    771c:	bd80      	pop	{r7, pc}
    771e:	bf00      	nop
    7720:	00007305 	.word	0x00007305
    7724:	000081a5 	.word	0x000081a5
    7728:	0000731d 	.word	0x0000731d
    772c:	000081fd 	.word	0x000081fd

00007730 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    7730:	b580      	push	{r7, lr}
    7732:	b086      	sub	sp, #24
    7734:	af00      	add	r7, sp, #0
    7736:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    7738:	687b      	ldr	r3, [r7, #4]
    773a:	3b04      	subs	r3, #4
    773c:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    773e:	693b      	ldr	r3, [r7, #16]
    7740:	3318      	adds	r3, #24
    7742:	4618      	mov	r0, r3
    7744:	4b27      	ldr	r3, [pc, #156]	; (77e4 <timer_process_counted+0xb4>)
    7746:	4798      	blx	r3
    7748:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    774a:	693b      	ldr	r3, [r7, #16]
    774c:	695b      	ldr	r3, [r3, #20]
    774e:	1c5a      	adds	r2, r3, #1
    7750:	693b      	ldr	r3, [r7, #16]
    7752:	615a      	str	r2, [r3, #20]
    7754:	693b      	ldr	r3, [r7, #16]
    7756:	695b      	ldr	r3, [r3, #20]
    7758:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    775a:	693b      	ldr	r3, [r7, #16]
    775c:	7f1b      	ldrb	r3, [r3, #28]
    775e:	b2db      	uxtb	r3, r3
    7760:	f003 0301 	and.w	r3, r3, #1
    7764:	2b00      	cmp	r3, #0
    7766:	d106      	bne.n	7776 <timer_process_counted+0x46>
    7768:	693b      	ldr	r3, [r7, #16]
    776a:	7f1b      	ldrb	r3, [r3, #28]
    776c:	b2db      	uxtb	r3, r3
    776e:	f003 0302 	and.w	r3, r3, #2
    7772:	2b00      	cmp	r3, #0
    7774:	d027      	beq.n	77c6 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    7776:	693b      	ldr	r3, [r7, #16]
    7778:	7f1b      	ldrb	r3, [r3, #28]
    777a:	b2db      	uxtb	r3, r3
    777c:	f043 0302 	orr.w	r3, r3, #2
    7780:	b2da      	uxtb	r2, r3
    7782:	693b      	ldr	r3, [r7, #16]
    7784:	771a      	strb	r2, [r3, #28]
		return;
    7786:	e029      	b.n	77dc <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    7788:	697b      	ldr	r3, [r7, #20]
    778a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    778c:	693b      	ldr	r3, [r7, #16]
    778e:	3318      	adds	r3, #24
    7790:	4618      	mov	r0, r3
    7792:	4b15      	ldr	r3, [pc, #84]	; (77e8 <timer_process_counted+0xb8>)
    7794:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    7796:	68bb      	ldr	r3, [r7, #8]
    7798:	7c1b      	ldrb	r3, [r3, #16]
    779a:	2b01      	cmp	r3, #1
    779c:	d109      	bne.n	77b2 <timer_process_counted+0x82>
			tmp->time_label = time;
    779e:	68bb      	ldr	r3, [r7, #8]
    77a0:	68fa      	ldr	r2, [r7, #12]
    77a2:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    77a4:	693b      	ldr	r3, [r7, #16]
    77a6:	3318      	adds	r3, #24
    77a8:	68fa      	ldr	r2, [r7, #12]
    77aa:	68b9      	ldr	r1, [r7, #8]
    77ac:	4618      	mov	r0, r3
    77ae:	4b0f      	ldr	r3, [pc, #60]	; (77ec <timer_process_counted+0xbc>)
    77b0:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    77b2:	693b      	ldr	r3, [r7, #16]
    77b4:	3318      	adds	r3, #24
    77b6:	4618      	mov	r0, r3
    77b8:	4b0a      	ldr	r3, [pc, #40]	; (77e4 <timer_process_counted+0xb4>)
    77ba:	4798      	blx	r3
    77bc:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    77be:	68bb      	ldr	r3, [r7, #8]
    77c0:	68db      	ldr	r3, [r3, #12]
    77c2:	68b8      	ldr	r0, [r7, #8]
    77c4:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    77c6:	697b      	ldr	r3, [r7, #20]
    77c8:	2b00      	cmp	r3, #0
    77ca:	d007      	beq.n	77dc <timer_process_counted+0xac>
    77cc:	697b      	ldr	r3, [r7, #20]
    77ce:	685b      	ldr	r3, [r3, #4]
    77d0:	68fa      	ldr	r2, [r7, #12]
    77d2:	1ad2      	subs	r2, r2, r3
    77d4:	697b      	ldr	r3, [r7, #20]
    77d6:	689b      	ldr	r3, [r3, #8]
    77d8:	429a      	cmp	r2, r3
    77da:	d2d5      	bcs.n	7788 <timer_process_counted+0x58>
	}
}
    77dc:	3718      	adds	r7, #24
    77de:	46bd      	mov	sp, r7
    77e0:	bd80      	pop	{r7, pc}
    77e2:	bf00      	nop
    77e4:	00007305 	.word	0x00007305
    77e8:	0000829d 	.word	0x0000829d
    77ec:	00007681 	.word	0x00007681

000077f0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    77f0:	b480      	push	{r7}
    77f2:	b085      	sub	sp, #20
    77f4:	af00      	add	r7, sp, #0
    77f6:	4603      	mov	r3, r0
    77f8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    77fa:	2300      	movs	r3, #0
    77fc:	73fb      	strb	r3, [r7, #15]
    77fe:	e029      	b.n	7854 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    7800:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7804:	4a19      	ldr	r2, [pc, #100]	; (786c <_usb_d_find_ep+0x7c>)
    7806:	015b      	lsls	r3, r3, #5
    7808:	4413      	add	r3, r2
    780a:	3301      	adds	r3, #1
    780c:	781b      	ldrb	r3, [r3, #0]
    780e:	79fa      	ldrb	r2, [r7, #7]
    7810:	429a      	cmp	r2, r3
    7812:	d102      	bne.n	781a <_usb_d_find_ep+0x2a>
			return i;
    7814:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7818:	e022      	b.n	7860 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    781a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    781e:	4a13      	ldr	r2, [pc, #76]	; (786c <_usb_d_find_ep+0x7c>)
    7820:	015b      	lsls	r3, r3, #5
    7822:	4413      	add	r3, r2
    7824:	781b      	ldrb	r3, [r3, #0]
    7826:	2b00      	cmp	r3, #0
    7828:	d10e      	bne.n	7848 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    782a:	79fb      	ldrb	r3, [r7, #7]
    782c:	f003 030f 	and.w	r3, r3, #15
    7830:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7834:	490d      	ldr	r1, [pc, #52]	; (786c <_usb_d_find_ep+0x7c>)
    7836:	0152      	lsls	r2, r2, #5
    7838:	440a      	add	r2, r1
    783a:	3201      	adds	r2, #1
    783c:	7812      	ldrb	r2, [r2, #0]
    783e:	4293      	cmp	r3, r2
    7840:	d102      	bne.n	7848 <_usb_d_find_ep+0x58>
			return i;
    7842:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7846:	e00b      	b.n	7860 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7848:	f997 300f 	ldrsb.w	r3, [r7, #15]
    784c:	b2db      	uxtb	r3, r3
    784e:	3301      	adds	r3, #1
    7850:	b2db      	uxtb	r3, r3
    7852:	73fb      	strb	r3, [r7, #15]
    7854:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7858:	2b03      	cmp	r3, #3
    785a:	ddd1      	ble.n	7800 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    785c:	f04f 33ff 	mov.w	r3, #4294967295
}
    7860:	4618      	mov	r0, r3
    7862:	3714      	adds	r7, #20
    7864:	46bd      	mov	sp, r7
    7866:	f85d 7b04 	ldr.w	r7, [sp], #4
    786a:	4770      	bx	lr
    786c:	20008898 	.word	0x20008898

00007870 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    7870:	b580      	push	{r7, lr}
    7872:	b088      	sub	sp, #32
    7874:	af00      	add	r7, sp, #0
    7876:	60ba      	str	r2, [r7, #8]
    7878:	607b      	str	r3, [r7, #4]
    787a:	4603      	mov	r3, r0
    787c:	73fb      	strb	r3, [r7, #15]
    787e:	460b      	mov	r3, r1
    7880:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    7882:	68bb      	ldr	r3, [r7, #8]
    7884:	617b      	str	r3, [r7, #20]
    7886:	687b      	ldr	r3, [r7, #4]
    7888:	61bb      	str	r3, [r7, #24]
    788a:	7bbb      	ldrb	r3, [r7, #14]
    788c:	2b00      	cmp	r3, #0
    788e:	d004      	beq.n	789a <_usb_d_trans+0x2a>
    7890:	7bfb      	ldrb	r3, [r7, #15]
    7892:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7896:	b2db      	uxtb	r3, r3
    7898:	e003      	b.n	78a2 <_usb_d_trans+0x32>
    789a:	7bfb      	ldrb	r3, [r7, #15]
    789c:	f003 030f 	and.w	r3, r3, #15
    78a0:	b2db      	uxtb	r3, r3
    78a2:	773b      	strb	r3, [r7, #28]
    78a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    78a8:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    78aa:	f107 0314 	add.w	r3, r7, #20
    78ae:	4618      	mov	r0, r3
    78b0:	4b03      	ldr	r3, [pc, #12]	; (78c0 <_usb_d_trans+0x50>)
    78b2:	4798      	blx	r3
    78b4:	4603      	mov	r3, r0
}
    78b6:	4618      	mov	r0, r3
    78b8:	3720      	adds	r7, #32
    78ba:	46bd      	mov	sp, r7
    78bc:	bd80      	pop	{r7, pc}
    78be:	bf00      	nop
    78c0:	000100d5 	.word	0x000100d5

000078c4 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    78c4:	b480      	push	{r7}
    78c6:	b085      	sub	sp, #20
    78c8:	af00      	add	r7, sp, #0
    78ca:	60f8      	str	r0, [r7, #12]
    78cc:	60b9      	str	r1, [r7, #8]
    78ce:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    78d0:	2300      	movs	r3, #0
}
    78d2:	4618      	mov	r0, r3
    78d4:	3714      	adds	r7, #20
    78d6:	46bd      	mov	sp, r7
    78d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    78dc:	4770      	bx	lr
	...

000078e0 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    78e0:	b580      	push	{r7, lr}
    78e2:	b086      	sub	sp, #24
    78e4:	af00      	add	r7, sp, #0
    78e6:	4603      	mov	r3, r0
    78e8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    78ea:	79fb      	ldrb	r3, [r7, #7]
    78ec:	4618      	mov	r0, r3
    78ee:	4b2a      	ldr	r3, [pc, #168]	; (7998 <usb_d_cb_trans_setup+0xb8>)
    78f0:	4798      	blx	r3
    78f2:	4603      	mov	r3, r0
    78f4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    78f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    78fa:	015b      	lsls	r3, r3, #5
    78fc:	4a27      	ldr	r2, [pc, #156]	; (799c <usb_d_cb_trans_setup+0xbc>)
    78fe:	4413      	add	r3, r2
    7900:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    7902:	693b      	ldr	r3, [r7, #16]
    7904:	330c      	adds	r3, #12
    7906:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    7908:	79fb      	ldrb	r3, [r7, #7]
    790a:	68f9      	ldr	r1, [r7, #12]
    790c:	4618      	mov	r0, r3
    790e:	4b24      	ldr	r3, [pc, #144]	; (79a0 <usb_d_cb_trans_setup+0xc0>)
    7910:	4798      	blx	r3
    7912:	4603      	mov	r3, r0
    7914:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    7916:	7afb      	ldrb	r3, [r7, #11]
    7918:	2b08      	cmp	r3, #8
    791a:	d00d      	beq.n	7938 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    791c:	79fb      	ldrb	r3, [r7, #7]
    791e:	2101      	movs	r1, #1
    7920:	4618      	mov	r0, r3
    7922:	4b20      	ldr	r3, [pc, #128]	; (79a4 <usb_d_cb_trans_setup+0xc4>)
    7924:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    7926:	79fb      	ldrb	r3, [r7, #7]
    7928:	f063 037f 	orn	r3, r3, #127	; 0x7f
    792c:	b2db      	uxtb	r3, r3
    792e:	2101      	movs	r1, #1
    7930:	4618      	mov	r0, r3
    7932:	4b1c      	ldr	r3, [pc, #112]	; (79a4 <usb_d_cb_trans_setup+0xc4>)
    7934:	4798      	blx	r3
		return;
    7936:	e02b      	b.n	7990 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7938:	79fb      	ldrb	r3, [r7, #7]
    793a:	2100      	movs	r1, #0
    793c:	4618      	mov	r0, r3
    793e:	4b19      	ldr	r3, [pc, #100]	; (79a4 <usb_d_cb_trans_setup+0xc4>)
    7940:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    7942:	79fb      	ldrb	r3, [r7, #7]
    7944:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7948:	b2db      	uxtb	r3, r3
    794a:	2100      	movs	r1, #0
    794c:	4618      	mov	r0, r3
    794e:	4b15      	ldr	r3, [pc, #84]	; (79a4 <usb_d_cb_trans_setup+0xc4>)
    7950:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    7952:	693b      	ldr	r3, [r7, #16]
    7954:	2201      	movs	r2, #1
    7956:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    7958:	693b      	ldr	r3, [r7, #16]
    795a:	695b      	ldr	r3, [r3, #20]
    795c:	79fa      	ldrb	r2, [r7, #7]
    795e:	68f9      	ldr	r1, [r7, #12]
    7960:	4610      	mov	r0, r2
    7962:	4798      	blx	r3
    7964:	4603      	mov	r3, r0
    7966:	f083 0301 	eor.w	r3, r3, #1
    796a:	b2db      	uxtb	r3, r3
    796c:	2b00      	cmp	r3, #0
    796e:	d00f      	beq.n	7990 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    7970:	693b      	ldr	r3, [r7, #16]
    7972:	2205      	movs	r2, #5
    7974:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    7976:	79fb      	ldrb	r3, [r7, #7]
    7978:	2101      	movs	r1, #1
    797a:	4618      	mov	r0, r3
    797c:	4b09      	ldr	r3, [pc, #36]	; (79a4 <usb_d_cb_trans_setup+0xc4>)
    797e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    7980:	79fb      	ldrb	r3, [r7, #7]
    7982:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7986:	b2db      	uxtb	r3, r3
    7988:	2101      	movs	r1, #1
    798a:	4618      	mov	r0, r3
    798c:	4b05      	ldr	r3, [pc, #20]	; (79a4 <usb_d_cb_trans_setup+0xc4>)
    798e:	4798      	blx	r3
	}
}
    7990:	3718      	adds	r7, #24
    7992:	46bd      	mov	sp, r7
    7994:	bd80      	pop	{r7, pc}
    7996:	bf00      	nop
    7998:	000077f1 	.word	0x000077f1
    799c:	20008898 	.word	0x20008898
    79a0:	0001002d 	.word	0x0001002d
    79a4:	0000fea5 	.word	0x0000fea5

000079a8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    79a8:	b580      	push	{r7, lr}
    79aa:	b084      	sub	sp, #16
    79ac:	af00      	add	r7, sp, #0
    79ae:	4603      	mov	r3, r0
    79b0:	6039      	str	r1, [r7, #0]
    79b2:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    79b4:	79fb      	ldrb	r3, [r7, #7]
    79b6:	4618      	mov	r0, r3
    79b8:	4b0d      	ldr	r3, [pc, #52]	; (79f0 <usb_d_cb_trans_more+0x48>)
    79ba:	4798      	blx	r3
    79bc:	4603      	mov	r3, r0
    79be:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    79c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    79c4:	015b      	lsls	r3, r3, #5
    79c6:	4a0b      	ldr	r2, [pc, #44]	; (79f4 <usb_d_cb_trans_more+0x4c>)
    79c8:	4413      	add	r3, r2
    79ca:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    79cc:	68bb      	ldr	r3, [r7, #8]
    79ce:	789b      	ldrb	r3, [r3, #2]
    79d0:	2b03      	cmp	r3, #3
    79d2:	d107      	bne.n	79e4 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    79d4:	68bb      	ldr	r3, [r7, #8]
    79d6:	699b      	ldr	r3, [r3, #24]
    79d8:	79fa      	ldrb	r2, [r7, #7]
    79da:	6839      	ldr	r1, [r7, #0]
    79dc:	4610      	mov	r0, r2
    79de:	4798      	blx	r3
    79e0:	4603      	mov	r3, r0
    79e2:	e000      	b.n	79e6 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    79e4:	2300      	movs	r3, #0
}
    79e6:	4618      	mov	r0, r3
    79e8:	3710      	adds	r7, #16
    79ea:	46bd      	mov	sp, r7
    79ec:	bd80      	pop	{r7, pc}
    79ee:	bf00      	nop
    79f0:	000077f1 	.word	0x000077f1
    79f4:	20008898 	.word	0x20008898

000079f8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    79f8:	b590      	push	{r4, r7, lr}
    79fa:	b087      	sub	sp, #28
    79fc:	af02      	add	r7, sp, #8
    79fe:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    7a00:	687b      	ldr	r3, [r7, #4]
    7a02:	789b      	ldrb	r3, [r3, #2]
    7a04:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    7a06:	687b      	ldr	r3, [r7, #4]
    7a08:	7b1b      	ldrb	r3, [r3, #12]
    7a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7a0e:	2b00      	cmp	r3, #0
    7a10:	bf14      	ite	ne
    7a12:	2301      	movne	r3, #1
    7a14:	2300      	moveq	r3, #0
    7a16:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    7a18:	7bfb      	ldrb	r3, [r7, #15]
    7a1a:	2b03      	cmp	r3, #3
    7a1c:	d13a      	bne.n	7a94 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    7a1e:	687b      	ldr	r3, [r7, #4]
    7a20:	69db      	ldr	r3, [r3, #28]
    7a22:	687a      	ldr	r2, [r7, #4]
    7a24:	7850      	ldrb	r0, [r2, #1]
    7a26:	687a      	ldr	r2, [r7, #4]
    7a28:	320c      	adds	r2, #12
    7a2a:	2101      	movs	r1, #1
    7a2c:	4798      	blx	r3
    7a2e:	4603      	mov	r3, r0
    7a30:	737b      	strb	r3, [r7, #13]
		if (err) {
    7a32:	7b7b      	ldrb	r3, [r7, #13]
    7a34:	2b00      	cmp	r3, #0
    7a36:	d015      	beq.n	7a64 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    7a38:	687b      	ldr	r3, [r7, #4]
    7a3a:	2205      	movs	r2, #5
    7a3c:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    7a3e:	687b      	ldr	r3, [r7, #4]
    7a40:	2202      	movs	r2, #2
    7a42:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    7a44:	7bbb      	ldrb	r3, [r7, #14]
    7a46:	2b00      	cmp	r3, #0
    7a48:	d002      	beq.n	7a50 <usb_d_ctrl_trans_done+0x58>
    7a4a:	687b      	ldr	r3, [r7, #4]
    7a4c:	785b      	ldrb	r3, [r3, #1]
    7a4e:	e004      	b.n	7a5a <usb_d_ctrl_trans_done+0x62>
    7a50:	687b      	ldr	r3, [r7, #4]
    7a52:	785b      	ldrb	r3, [r3, #1]
    7a54:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7a58:	b2db      	uxtb	r3, r3
    7a5a:	2101      	movs	r1, #1
    7a5c:	4618      	mov	r0, r3
    7a5e:	4b15      	ldr	r3, [pc, #84]	; (7ab4 <usb_d_ctrl_trans_done+0xbc>)
    7a60:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    7a62:	e022      	b.n	7aaa <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    7a64:	687b      	ldr	r3, [r7, #4]
    7a66:	2204      	movs	r2, #4
    7a68:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    7a6a:	687b      	ldr	r3, [r7, #4]
    7a6c:	7858      	ldrb	r0, [r3, #1]
    7a6e:	7bbb      	ldrb	r3, [r7, #14]
    7a70:	2b00      	cmp	r3, #0
    7a72:	bf14      	ite	ne
    7a74:	2301      	movne	r3, #1
    7a76:	2300      	moveq	r3, #0
    7a78:	b2db      	uxtb	r3, r3
    7a7a:	f083 0301 	eor.w	r3, r3, #1
    7a7e:	b2db      	uxtb	r3, r3
    7a80:	f003 0301 	and.w	r3, r3, #1
    7a84:	b2d9      	uxtb	r1, r3
    7a86:	2301      	movs	r3, #1
    7a88:	9300      	str	r3, [sp, #0]
    7a8a:	2300      	movs	r3, #0
    7a8c:	2200      	movs	r2, #0
    7a8e:	4c0a      	ldr	r4, [pc, #40]	; (7ab8 <usb_d_ctrl_trans_done+0xc0>)
    7a90:	47a0      	blx	r4
}
    7a92:	e00a      	b.n	7aaa <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    7a94:	687b      	ldr	r3, [r7, #4]
    7a96:	69db      	ldr	r3, [r3, #28]
    7a98:	687a      	ldr	r2, [r7, #4]
    7a9a:	7850      	ldrb	r0, [r2, #1]
    7a9c:	687a      	ldr	r2, [r7, #4]
    7a9e:	320c      	adds	r2, #12
    7aa0:	2100      	movs	r1, #0
    7aa2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7aa4:	687b      	ldr	r3, [r7, #4]
    7aa6:	2202      	movs	r2, #2
    7aa8:	709a      	strb	r2, [r3, #2]
}
    7aaa:	bf00      	nop
    7aac:	3714      	adds	r7, #20
    7aae:	46bd      	mov	sp, r7
    7ab0:	bd90      	pop	{r4, r7, pc}
    7ab2:	bf00      	nop
    7ab4:	0000fea5 	.word	0x0000fea5
    7ab8:	00007871 	.word	0x00007871

00007abc <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    7abc:	b580      	push	{r7, lr}
    7abe:	b086      	sub	sp, #24
    7ac0:	af00      	add	r7, sp, #0
    7ac2:	4603      	mov	r3, r0
    7ac4:	60b9      	str	r1, [r7, #8]
    7ac6:	607a      	str	r2, [r7, #4]
    7ac8:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7aca:	7bfb      	ldrb	r3, [r7, #15]
    7acc:	4618      	mov	r0, r3
    7ace:	4b2f      	ldr	r3, [pc, #188]	; (7b8c <_usb_d_cb_trans_done+0xd0>)
    7ad0:	4798      	blx	r3
    7ad2:	4603      	mov	r3, r0
    7ad4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7ada:	015b      	lsls	r3, r3, #5
    7adc:	4a2c      	ldr	r2, [pc, #176]	; (7b90 <_usb_d_cb_trans_done+0xd4>)
    7ade:	4413      	add	r3, r2
    7ae0:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    7ae2:	68bb      	ldr	r3, [r7, #8]
    7ae4:	2b00      	cmp	r3, #0
    7ae6:	d10e      	bne.n	7b06 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    7ae8:	693b      	ldr	r3, [r7, #16]
    7aea:	2200      	movs	r2, #0
    7aec:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7aee:	693b      	ldr	r3, [r7, #16]
    7af0:	781b      	ldrb	r3, [r3, #0]
    7af2:	2b00      	cmp	r3, #0
    7af4:	d103      	bne.n	7afe <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    7af6:	6938      	ldr	r0, [r7, #16]
    7af8:	4b26      	ldr	r3, [pc, #152]	; (7b94 <_usb_d_cb_trans_done+0xd8>)
    7afa:	4798      	blx	r3
			return;
    7afc:	e043      	b.n	7b86 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    7afe:	693b      	ldr	r3, [r7, #16]
    7b00:	2201      	movs	r2, #1
    7b02:	709a      	strb	r2, [r3, #2]
    7b04:	e038      	b.n	7b78 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    7b06:	68bb      	ldr	r3, [r7, #8]
    7b08:	2b01      	cmp	r3, #1
    7b0a:	d113      	bne.n	7b34 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    7b0c:	693b      	ldr	r3, [r7, #16]
    7b0e:	2202      	movs	r2, #2
    7b10:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7b12:	693b      	ldr	r3, [r7, #16]
    7b14:	781b      	ldrb	r3, [r3, #0]
    7b16:	2b00      	cmp	r3, #0
    7b18:	d108      	bne.n	7b2c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7b1a:	693b      	ldr	r3, [r7, #16]
    7b1c:	2202      	movs	r2, #2
    7b1e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7b20:	7bfb      	ldrb	r3, [r7, #15]
    7b22:	2100      	movs	r1, #0
    7b24:	4618      	mov	r0, r3
    7b26:	4b1c      	ldr	r3, [pc, #112]	; (7b98 <_usb_d_cb_trans_done+0xdc>)
    7b28:	4798      	blx	r3
    7b2a:	e025      	b.n	7b78 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    7b2c:	693b      	ldr	r3, [r7, #16]
    7b2e:	2205      	movs	r2, #5
    7b30:	709a      	strb	r2, [r3, #2]
    7b32:	e021      	b.n	7b78 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    7b34:	68bb      	ldr	r3, [r7, #8]
    7b36:	2b02      	cmp	r3, #2
    7b38:	d10e      	bne.n	7b58 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    7b3a:	693b      	ldr	r3, [r7, #16]
    7b3c:	2204      	movs	r2, #4
    7b3e:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7b40:	693b      	ldr	r3, [r7, #16]
    7b42:	781b      	ldrb	r3, [r3, #0]
    7b44:	2b00      	cmp	r3, #0
    7b46:	d103      	bne.n	7b50 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7b48:	693b      	ldr	r3, [r7, #16]
    7b4a:	2202      	movs	r2, #2
    7b4c:	709a      	strb	r2, [r3, #2]
			return;
    7b4e:	e01a      	b.n	7b86 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    7b50:	693b      	ldr	r3, [r7, #16]
    7b52:	2201      	movs	r2, #1
    7b54:	709a      	strb	r2, [r3, #2]
    7b56:	e00f      	b.n	7b78 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    7b58:	68bb      	ldr	r3, [r7, #8]
    7b5a:	2b03      	cmp	r3, #3
    7b5c:	d106      	bne.n	7b6c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    7b5e:	693b      	ldr	r3, [r7, #16]
    7b60:	2200      	movs	r2, #0
    7b62:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    7b64:	693b      	ldr	r3, [r7, #16]
    7b66:	2205      	movs	r2, #5
    7b68:	70da      	strb	r2, [r3, #3]
    7b6a:	e005      	b.n	7b78 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    7b6c:	693b      	ldr	r3, [r7, #16]
    7b6e:	2206      	movs	r2, #6
    7b70:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    7b72:	693b      	ldr	r3, [r7, #16]
    7b74:	2206      	movs	r2, #6
    7b76:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    7b78:	693b      	ldr	r3, [r7, #16]
    7b7a:	69db      	ldr	r3, [r3, #28]
    7b7c:	693a      	ldr	r2, [r7, #16]
    7b7e:	78d1      	ldrb	r1, [r2, #3]
    7b80:	687a      	ldr	r2, [r7, #4]
    7b82:	7bf8      	ldrb	r0, [r7, #15]
    7b84:	4798      	blx	r3
}
    7b86:	3718      	adds	r7, #24
    7b88:	46bd      	mov	sp, r7
    7b8a:	bd80      	pop	{r7, pc}
    7b8c:	000077f1 	.word	0x000077f1
    7b90:	20008898 	.word	0x20008898
    7b94:	000079f9 	.word	0x000079f9
    7b98:	0000fea5 	.word	0x0000fea5

00007b9c <usb_d_init>:

int32_t usb_d_init(void)
{
    7b9c:	b580      	push	{r7, lr}
    7b9e:	b082      	sub	sp, #8
    7ba0:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    7ba2:	4b21      	ldr	r3, [pc, #132]	; (7c28 <usb_d_init+0x8c>)
    7ba4:	4798      	blx	r3
    7ba6:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    7ba8:	683b      	ldr	r3, [r7, #0]
    7baa:	2b00      	cmp	r3, #0
    7bac:	da01      	bge.n	7bb2 <usb_d_init+0x16>
		return rc;
    7bae:	683b      	ldr	r3, [r7, #0]
    7bb0:	e036      	b.n	7c20 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    7bb2:	2280      	movs	r2, #128	; 0x80
    7bb4:	2100      	movs	r1, #0
    7bb6:	481d      	ldr	r0, [pc, #116]	; (7c2c <usb_d_init+0x90>)
    7bb8:	4b1d      	ldr	r3, [pc, #116]	; (7c30 <usb_d_init+0x94>)
    7bba:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7bbc:	2300      	movs	r3, #0
    7bbe:	71fb      	strb	r3, [r7, #7]
    7bc0:	e01e      	b.n	7c00 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    7bc2:	79fb      	ldrb	r3, [r7, #7]
    7bc4:	4a19      	ldr	r2, [pc, #100]	; (7c2c <usb_d_init+0x90>)
    7bc6:	015b      	lsls	r3, r3, #5
    7bc8:	4413      	add	r3, r2
    7bca:	3301      	adds	r3, #1
    7bcc:	22ff      	movs	r2, #255	; 0xff
    7bce:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    7bd0:	79fb      	ldrb	r3, [r7, #7]
    7bd2:	4a16      	ldr	r2, [pc, #88]	; (7c2c <usb_d_init+0x90>)
    7bd4:	015b      	lsls	r3, r3, #5
    7bd6:	4413      	add	r3, r2
    7bd8:	3314      	adds	r3, #20
    7bda:	4a16      	ldr	r2, [pc, #88]	; (7c34 <usb_d_init+0x98>)
    7bdc:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    7bde:	79fb      	ldrb	r3, [r7, #7]
    7be0:	4a12      	ldr	r2, [pc, #72]	; (7c2c <usb_d_init+0x90>)
    7be2:	015b      	lsls	r3, r3, #5
    7be4:	4413      	add	r3, r2
    7be6:	3318      	adds	r3, #24
    7be8:	4a12      	ldr	r2, [pc, #72]	; (7c34 <usb_d_init+0x98>)
    7bea:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    7bec:	79fb      	ldrb	r3, [r7, #7]
    7bee:	4a0f      	ldr	r2, [pc, #60]	; (7c2c <usb_d_init+0x90>)
    7bf0:	015b      	lsls	r3, r3, #5
    7bf2:	4413      	add	r3, r2
    7bf4:	331c      	adds	r3, #28
    7bf6:	4a0f      	ldr	r2, [pc, #60]	; (7c34 <usb_d_init+0x98>)
    7bf8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7bfa:	79fb      	ldrb	r3, [r7, #7]
    7bfc:	3301      	adds	r3, #1
    7bfe:	71fb      	strb	r3, [r7, #7]
    7c00:	79fb      	ldrb	r3, [r7, #7]
    7c02:	2b03      	cmp	r3, #3
    7c04:	d9dd      	bls.n	7bc2 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    7c06:	490c      	ldr	r1, [pc, #48]	; (7c38 <usb_d_init+0x9c>)
    7c08:	2000      	movs	r0, #0
    7c0a:	4b0c      	ldr	r3, [pc, #48]	; (7c3c <usb_d_init+0xa0>)
    7c0c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    7c0e:	490c      	ldr	r1, [pc, #48]	; (7c40 <usb_d_init+0xa4>)
    7c10:	2001      	movs	r0, #1
    7c12:	4b0a      	ldr	r3, [pc, #40]	; (7c3c <usb_d_init+0xa0>)
    7c14:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    7c16:	490b      	ldr	r1, [pc, #44]	; (7c44 <usb_d_init+0xa8>)
    7c18:	2002      	movs	r0, #2
    7c1a:	4b08      	ldr	r3, [pc, #32]	; (7c3c <usb_d_init+0xa0>)
    7c1c:	4798      	blx	r3
	return ERR_NONE;
    7c1e:	2300      	movs	r3, #0
}
    7c20:	4618      	mov	r0, r3
    7c22:	3708      	adds	r7, #8
    7c24:	46bd      	mov	sp, r7
    7c26:	bd80      	pop	{r7, pc}
    7c28:	0000f6ed 	.word	0x0000f6ed
    7c2c:	20008898 	.word	0x20008898
    7c30:	0001c5b9 	.word	0x0001c5b9
    7c34:	000078c5 	.word	0x000078c5
    7c38:	000078e1 	.word	0x000078e1
    7c3c:	00010335 	.word	0x00010335
    7c40:	000079a9 	.word	0x000079a9
    7c44:	00007abd 	.word	0x00007abd

00007c48 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    7c48:	b580      	push	{r7, lr}
    7c4a:	b082      	sub	sp, #8
    7c4c:	af00      	add	r7, sp, #0
    7c4e:	4603      	mov	r3, r0
    7c50:	6039      	str	r1, [r7, #0]
    7c52:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    7c54:	79fb      	ldrb	r3, [r7, #7]
    7c56:	6839      	ldr	r1, [r7, #0]
    7c58:	4618      	mov	r0, r3
    7c5a:	4b03      	ldr	r3, [pc, #12]	; (7c68 <usb_d_register_callback+0x20>)
    7c5c:	4798      	blx	r3
}
    7c5e:	bf00      	nop
    7c60:	3708      	adds	r7, #8
    7c62:	46bd      	mov	sp, r7
    7c64:	bd80      	pop	{r7, pc}
    7c66:	bf00      	nop
    7c68:	000102ed 	.word	0x000102ed

00007c6c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    7c6c:	b580      	push	{r7, lr}
    7c6e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    7c70:	4b02      	ldr	r3, [pc, #8]	; (7c7c <usb_d_enable+0x10>)
    7c72:	4798      	blx	r3
    7c74:	4603      	mov	r3, r0
}
    7c76:	4618      	mov	r0, r3
    7c78:	bd80      	pop	{r7, pc}
    7c7a:	bf00      	nop
    7c7c:	0000f7dd 	.word	0x0000f7dd

00007c80 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    7c80:	b580      	push	{r7, lr}
    7c82:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    7c84:	4b01      	ldr	r3, [pc, #4]	; (7c8c <usb_d_attach+0xc>)
    7c86:	4798      	blx	r3
}
    7c88:	bf00      	nop
    7c8a:	bd80      	pop	{r7, pc}
    7c8c:	0000f861 	.word	0x0000f861

00007c90 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    7c90:	b580      	push	{r7, lr}
    7c92:	b082      	sub	sp, #8
    7c94:	af00      	add	r7, sp, #0
    7c96:	4603      	mov	r3, r0
    7c98:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    7c9a:	79fb      	ldrb	r3, [r7, #7]
    7c9c:	4618      	mov	r0, r3
    7c9e:	4b03      	ldr	r3, [pc, #12]	; (7cac <usb_d_set_address+0x1c>)
    7ca0:	4798      	blx	r3
}
    7ca2:	bf00      	nop
    7ca4:	3708      	adds	r7, #8
    7ca6:	46bd      	mov	sp, r7
    7ca8:	bd80      	pop	{r7, pc}
    7caa:	bf00      	nop
    7cac:	0000f875 	.word	0x0000f875

00007cb0 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    7cb0:	b580      	push	{r7, lr}
    7cb2:	b082      	sub	sp, #8
    7cb4:	af00      	add	r7, sp, #0
    7cb6:	4603      	mov	r3, r0
    7cb8:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    7cba:	79fb      	ldrb	r3, [r7, #7]
    7cbc:	b29b      	uxth	r3, r3
    7cbe:	461a      	mov	r2, r3
    7cc0:	2100      	movs	r1, #0
    7cc2:	2000      	movs	r0, #0
    7cc4:	4b03      	ldr	r3, [pc, #12]	; (7cd4 <usb_d_ep0_init+0x24>)
    7cc6:	4798      	blx	r3
    7cc8:	4603      	mov	r3, r0
}
    7cca:	4618      	mov	r0, r3
    7ccc:	3708      	adds	r7, #8
    7cce:	46bd      	mov	sp, r7
    7cd0:	bd80      	pop	{r7, pc}
    7cd2:	bf00      	nop
    7cd4:	00007cd9 	.word	0x00007cd9

00007cd8 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    7cd8:	b580      	push	{r7, lr}
    7cda:	b086      	sub	sp, #24
    7cdc:	af00      	add	r7, sp, #0
    7cde:	4603      	mov	r3, r0
    7ce0:	71fb      	strb	r3, [r7, #7]
    7ce2:	460b      	mov	r3, r1
    7ce4:	71bb      	strb	r3, [r7, #6]
    7ce6:	4613      	mov	r3, r2
    7ce8:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    7cea:	79fb      	ldrb	r3, [r7, #7]
    7cec:	4618      	mov	r0, r3
    7cee:	4b1e      	ldr	r3, [pc, #120]	; (7d68 <usb_d_ep_init+0x90>)
    7cf0:	4798      	blx	r3
    7cf2:	4603      	mov	r3, r0
    7cf4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7cf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7cfa:	015b      	lsls	r3, r3, #5
    7cfc:	4a1b      	ldr	r2, [pc, #108]	; (7d6c <usb_d_ep_init+0x94>)
    7cfe:	4413      	add	r3, r2
    7d00:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    7d02:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7d06:	2b00      	cmp	r3, #0
    7d08:	db02      	blt.n	7d10 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    7d0a:	f06f 0313 	mvn.w	r3, #19
    7d0e:	e027      	b.n	7d60 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    7d10:	20ff      	movs	r0, #255	; 0xff
    7d12:	4b15      	ldr	r3, [pc, #84]	; (7d68 <usb_d_ep_init+0x90>)
    7d14:	4798      	blx	r3
    7d16:	4603      	mov	r3, r0
    7d18:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    7d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7d1e:	2b00      	cmp	r3, #0
    7d20:	da02      	bge.n	7d28 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    7d22:	f06f 0314 	mvn.w	r3, #20
    7d26:	e01b      	b.n	7d60 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    7d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7d2c:	015b      	lsls	r3, r3, #5
    7d2e:	4a0f      	ldr	r2, [pc, #60]	; (7d6c <usb_d_ep_init+0x94>)
    7d30:	4413      	add	r3, r2
    7d32:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    7d34:	88ba      	ldrh	r2, [r7, #4]
    7d36:	79b9      	ldrb	r1, [r7, #6]
    7d38:	79fb      	ldrb	r3, [r7, #7]
    7d3a:	4618      	mov	r0, r3
    7d3c:	4b0c      	ldr	r3, [pc, #48]	; (7d70 <usb_d_ep_init+0x98>)
    7d3e:	4798      	blx	r3
    7d40:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    7d42:	68fb      	ldr	r3, [r7, #12]
    7d44:	2b00      	cmp	r3, #0
    7d46:	da01      	bge.n	7d4c <usb_d_ep_init+0x74>
		return rc;
    7d48:	68fb      	ldr	r3, [r7, #12]
    7d4a:	e009      	b.n	7d60 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    7d4c:	693b      	ldr	r3, [r7, #16]
    7d4e:	79fa      	ldrb	r2, [r7, #7]
    7d50:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    7d52:	79bb      	ldrb	r3, [r7, #6]
    7d54:	f003 0303 	and.w	r3, r3, #3
    7d58:	b2da      	uxtb	r2, r3
    7d5a:	693b      	ldr	r3, [r7, #16]
    7d5c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    7d5e:	2300      	movs	r3, #0
}
    7d60:	4618      	mov	r0, r3
    7d62:	3718      	adds	r7, #24
    7d64:	46bd      	mov	sp, r7
    7d66:	bd80      	pop	{r7, pc}
    7d68:	000077f1 	.word	0x000077f1
    7d6c:	20008898 	.word	0x20008898
    7d70:	0000f915 	.word	0x0000f915

00007d74 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    7d74:	b580      	push	{r7, lr}
    7d76:	b084      	sub	sp, #16
    7d78:	af00      	add	r7, sp, #0
    7d7a:	4603      	mov	r3, r0
    7d7c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7d7e:	79fb      	ldrb	r3, [r7, #7]
    7d80:	4618      	mov	r0, r3
    7d82:	4b0d      	ldr	r3, [pc, #52]	; (7db8 <usb_d_ep_deinit+0x44>)
    7d84:	4798      	blx	r3
    7d86:	4603      	mov	r3, r0
    7d88:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7d8e:	015b      	lsls	r3, r3, #5
    7d90:	4a0a      	ldr	r2, [pc, #40]	; (7dbc <usb_d_ep_deinit+0x48>)
    7d92:	4413      	add	r3, r2
    7d94:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    7d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7d9a:	2b00      	cmp	r3, #0
    7d9c:	db07      	blt.n	7dae <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    7d9e:	79fb      	ldrb	r3, [r7, #7]
    7da0:	4618      	mov	r0, r3
    7da2:	4b07      	ldr	r3, [pc, #28]	; (7dc0 <usb_d_ep_deinit+0x4c>)
    7da4:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    7da6:	68bb      	ldr	r3, [r7, #8]
    7da8:	22ff      	movs	r2, #255	; 0xff
    7daa:	705a      	strb	r2, [r3, #1]
    7dac:	e000      	b.n	7db0 <usb_d_ep_deinit+0x3c>
		return;
    7dae:	bf00      	nop
}
    7db0:	3710      	adds	r7, #16
    7db2:	46bd      	mov	sp, r7
    7db4:	bd80      	pop	{r7, pc}
    7db6:	bf00      	nop
    7db8:	000077f1 	.word	0x000077f1
    7dbc:	20008898 	.word	0x20008898
    7dc0:	0000fa49 	.word	0x0000fa49

00007dc4 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    7dc4:	b580      	push	{r7, lr}
    7dc6:	b086      	sub	sp, #24
    7dc8:	af00      	add	r7, sp, #0
    7dca:	4603      	mov	r3, r0
    7dcc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7dce:	79fb      	ldrb	r3, [r7, #7]
    7dd0:	4618      	mov	r0, r3
    7dd2:	4b15      	ldr	r3, [pc, #84]	; (7e28 <usb_d_ep_enable+0x64>)
    7dd4:	4798      	blx	r3
    7dd6:	4603      	mov	r3, r0
    7dd8:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7dde:	015b      	lsls	r3, r3, #5
    7de0:	4a12      	ldr	r2, [pc, #72]	; (7e2c <usb_d_ep_enable+0x68>)
    7de2:	4413      	add	r3, r2
    7de4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    7de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7dea:	2b00      	cmp	r3, #0
    7dec:	da02      	bge.n	7df4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    7dee:	f06f 0311 	mvn.w	r3, #17
    7df2:	e014      	b.n	7e1e <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    7df4:	693b      	ldr	r3, [r7, #16]
    7df6:	781b      	ldrb	r3, [r3, #0]
    7df8:	2b00      	cmp	r3, #0
    7dfa:	d101      	bne.n	7e00 <usb_d_ep_enable+0x3c>
    7dfc:	2202      	movs	r2, #2
    7dfe:	e000      	b.n	7e02 <usb_d_ep_enable+0x3e>
    7e00:	2201      	movs	r2, #1
    7e02:	693b      	ldr	r3, [r7, #16]
    7e04:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    7e06:	79fb      	ldrb	r3, [r7, #7]
    7e08:	4618      	mov	r0, r3
    7e0a:	4b09      	ldr	r3, [pc, #36]	; (7e30 <usb_d_ep_enable+0x6c>)
    7e0c:	4798      	blx	r3
    7e0e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    7e10:	68fb      	ldr	r3, [r7, #12]
    7e12:	2b00      	cmp	r3, #0
    7e14:	da02      	bge.n	7e1c <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    7e16:	693b      	ldr	r3, [r7, #16]
    7e18:	2200      	movs	r2, #0
    7e1a:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    7e1c:	68fb      	ldr	r3, [r7, #12]
}
    7e1e:	4618      	mov	r0, r3
    7e20:	3718      	adds	r7, #24
    7e22:	46bd      	mov	sp, r7
    7e24:	bd80      	pop	{r7, pc}
    7e26:	bf00      	nop
    7e28:	000077f1 	.word	0x000077f1
    7e2c:	20008898 	.word	0x20008898
    7e30:	0000fb2d 	.word	0x0000fb2d

00007e34 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    7e34:	b590      	push	{r4, r7, lr}
    7e36:	b08d      	sub	sp, #52	; 0x34
    7e38:	af02      	add	r7, sp, #8
    7e3a:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    7e3c:	687b      	ldr	r3, [r7, #4]
    7e3e:	7a1b      	ldrb	r3, [r3, #8]
    7e40:	4618      	mov	r0, r3
    7e42:	4b51      	ldr	r3, [pc, #324]	; (7f88 <usb_d_ep_transfer+0x154>)
    7e44:	4798      	blx	r3
    7e46:	4603      	mov	r3, r0
    7e48:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    7e4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    7e4e:	015b      	lsls	r3, r3, #5
    7e50:	4a4e      	ldr	r2, [pc, #312]	; (7f8c <usb_d_ep_transfer+0x158>)
    7e52:	4413      	add	r3, r2
    7e54:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    7e56:	687b      	ldr	r3, [r7, #4]
    7e58:	7a1b      	ldrb	r3, [r3, #8]
    7e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7e5e:	2b00      	cmp	r3, #0
    7e60:	bf14      	ite	ne
    7e62:	2301      	movne	r3, #1
    7e64:	2300      	moveq	r3, #0
    7e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    7e6a:	687b      	ldr	r3, [r7, #4]
    7e6c:	7a5b      	ldrb	r3, [r3, #9]
    7e6e:	2b00      	cmp	r3, #0
    7e70:	bf14      	ite	ne
    7e72:	2301      	movne	r3, #1
    7e74:	2300      	moveq	r3, #0
    7e76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    7e7a:	687b      	ldr	r3, [r7, #4]
    7e7c:	685b      	ldr	r3, [r3, #4]
    7e7e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    7e80:	f997 301f 	ldrsb.w	r3, [r7, #31]
    7e84:	2b00      	cmp	r3, #0
    7e86:	da02      	bge.n	7e8e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    7e88:	f06f 0311 	mvn.w	r3, #17
    7e8c:	e077      	b.n	7f7e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    7e8e:	f107 0308 	add.w	r3, r7, #8
    7e92:	4618      	mov	r0, r3
    7e94:	4b3e      	ldr	r3, [pc, #248]	; (7f90 <usb_d_ep_transfer+0x15c>)
    7e96:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    7e98:	69bb      	ldr	r3, [r7, #24]
    7e9a:	789b      	ldrb	r3, [r3, #2]
    7e9c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    7e9e:	7bfb      	ldrb	r3, [r7, #15]
    7ea0:	b2db      	uxtb	r3, r3
    7ea2:	2b01      	cmp	r3, #1
    7ea4:	d10c      	bne.n	7ec0 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    7ea6:	69bb      	ldr	r3, [r7, #24]
    7ea8:	2203      	movs	r2, #3
    7eaa:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    7eac:	f107 0308 	add.w	r3, r7, #8
    7eb0:	4618      	mov	r0, r3
    7eb2:	4b38      	ldr	r3, [pc, #224]	; (7f94 <usb_d_ep_transfer+0x160>)
    7eb4:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7eb6:	69bb      	ldr	r3, [r7, #24]
    7eb8:	781b      	ldrb	r3, [r3, #0]
    7eba:	2b00      	cmp	r3, #0
    7ebc:	d151      	bne.n	7f62 <usb_d_ep_transfer+0x12e>
    7ebe:	e017      	b.n	7ef0 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    7ec0:	f107 0308 	add.w	r3, r7, #8
    7ec4:	4618      	mov	r0, r3
    7ec6:	4b33      	ldr	r3, [pc, #204]	; (7f94 <usb_d_ep_transfer+0x160>)
    7ec8:	4798      	blx	r3
		switch (state) {
    7eca:	7bfb      	ldrb	r3, [r7, #15]
    7ecc:	b2db      	uxtb	r3, r3
    7ece:	2b05      	cmp	r3, #5
    7ed0:	d004      	beq.n	7edc <usb_d_ep_transfer+0xa8>
    7ed2:	2b06      	cmp	r3, #6
    7ed4:	d004      	beq.n	7ee0 <usb_d_ep_transfer+0xac>
    7ed6:	2b00      	cmp	r3, #0
    7ed8:	d005      	beq.n	7ee6 <usb_d_ep_transfer+0xb2>
    7eda:	e007      	b.n	7eec <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    7edc:	2302      	movs	r3, #2
    7ede:	e04e      	b.n	7f7e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    7ee0:	f06f 030f 	mvn.w	r3, #15
    7ee4:	e04b      	b.n	7f7e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    7ee6:	f06f 0312 	mvn.w	r3, #18
    7eea:	e048      	b.n	7f7e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    7eec:	2301      	movs	r3, #1
    7eee:	e046      	b.n	7f7e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    7ef0:	69bb      	ldr	r3, [r7, #24]
    7ef2:	7c9b      	ldrb	r3, [r3, #18]
    7ef4:	b29a      	uxth	r2, r3
    7ef6:	69bb      	ldr	r3, [r7, #24]
    7ef8:	7cdb      	ldrb	r3, [r3, #19]
    7efa:	b29b      	uxth	r3, r3
    7efc:	021b      	lsls	r3, r3, #8
    7efe:	b29b      	uxth	r3, r3
    7f00:	4413      	add	r3, r2
    7f02:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    7f04:	8afb      	ldrh	r3, [r7, #22]
    7f06:	2b00      	cmp	r3, #0
    7f08:	d10b      	bne.n	7f22 <usb_d_ep_transfer+0xee>
			dir                 = true;
    7f0a:	2301      	movs	r3, #1
    7f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    7f10:	2300      	movs	r3, #0
    7f12:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    7f14:	2301      	movs	r3, #1
    7f16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    7f1a:	69bb      	ldr	r3, [r7, #24]
    7f1c:	2204      	movs	r2, #4
    7f1e:	709a      	strb	r2, [r3, #2]
    7f20:	e01f      	b.n	7f62 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    7f22:	69bb      	ldr	r3, [r7, #24]
    7f24:	7b1b      	ldrb	r3, [r3, #12]
    7f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7f2a:	2b00      	cmp	r3, #0
    7f2c:	bf14      	ite	ne
    7f2e:	2301      	movne	r3, #1
    7f30:	2300      	moveq	r3, #0
    7f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    7f36:	8afa      	ldrh	r2, [r7, #22]
    7f38:	6a3b      	ldr	r3, [r7, #32]
    7f3a:	429a      	cmp	r2, r3
    7f3c:	d201      	bcs.n	7f42 <usb_d_ep_transfer+0x10e>
				len = req_len;
    7f3e:	8afb      	ldrh	r3, [r7, #22]
    7f40:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    7f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    7f46:	2b00      	cmp	r3, #0
    7f48:	d008      	beq.n	7f5c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    7f4a:	8afa      	ldrh	r2, [r7, #22]
    7f4c:	6a3b      	ldr	r3, [r7, #32]
    7f4e:	429a      	cmp	r2, r3
    7f50:	bf8c      	ite	hi
    7f52:	2301      	movhi	r3, #1
    7f54:	2300      	movls	r3, #0
    7f56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    7f5a:	e002      	b.n	7f62 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    7f5c:	2300      	movs	r3, #0
    7f5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    7f62:	687b      	ldr	r3, [r7, #4]
    7f64:	7a18      	ldrb	r0, [r3, #8]
    7f66:	687b      	ldr	r3, [r7, #4]
    7f68:	681a      	ldr	r2, [r3, #0]
    7f6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    7f6e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    7f72:	9300      	str	r3, [sp, #0]
    7f74:	6a3b      	ldr	r3, [r7, #32]
    7f76:	4c08      	ldr	r4, [pc, #32]	; (7f98 <usb_d_ep_transfer+0x164>)
    7f78:	47a0      	blx	r4
    7f7a:	6138      	str	r0, [r7, #16]
	return rc;
    7f7c:	693b      	ldr	r3, [r7, #16]
}
    7f7e:	4618      	mov	r0, r3
    7f80:	372c      	adds	r7, #44	; 0x2c
    7f82:	46bd      	mov	sp, r7
    7f84:	bd90      	pop	{r4, r7, pc}
    7f86:	bf00      	nop
    7f88:	000077f1 	.word	0x000077f1
    7f8c:	20008898 	.word	0x20008898
    7f90:	00010d21 	.word	0x00010d21
    7f94:	00010d47 	.word	0x00010d47
    7f98:	00007871 	.word	0x00007871

00007f9c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    7f9c:	b580      	push	{r7, lr}
    7f9e:	b084      	sub	sp, #16
    7fa0:	af00      	add	r7, sp, #0
    7fa2:	4603      	mov	r3, r0
    7fa4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7fa6:	79fb      	ldrb	r3, [r7, #7]
    7fa8:	4618      	mov	r0, r3
    7faa:	4b0e      	ldr	r3, [pc, #56]	; (7fe4 <usb_d_ep_abort+0x48>)
    7fac:	4798      	blx	r3
    7fae:	4603      	mov	r3, r0
    7fb0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7fb6:	015b      	lsls	r3, r3, #5
    7fb8:	4a0b      	ldr	r2, [pc, #44]	; (7fe8 <usb_d_ep_abort+0x4c>)
    7fba:	4413      	add	r3, r2
    7fbc:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    7fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7fc2:	2b00      	cmp	r3, #0
    7fc4:	db0a      	blt.n	7fdc <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    7fc6:	79fb      	ldrb	r3, [r7, #7]
    7fc8:	4618      	mov	r0, r3
    7fca:	4b08      	ldr	r3, [pc, #32]	; (7fec <usb_d_ep_abort+0x50>)
    7fcc:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7fce:	68bb      	ldr	r3, [r7, #8]
    7fd0:	2201      	movs	r2, #1
    7fd2:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    7fd4:	68bb      	ldr	r3, [r7, #8]
    7fd6:	2204      	movs	r2, #4
    7fd8:	70da      	strb	r2, [r3, #3]
    7fda:	e000      	b.n	7fde <usb_d_ep_abort+0x42>
		return;
    7fdc:	bf00      	nop
}
    7fde:	3710      	adds	r7, #16
    7fe0:	46bd      	mov	sp, r7
    7fe2:	bd80      	pop	{r7, pc}
    7fe4:	000077f1 	.word	0x000077f1
    7fe8:	20008898 	.word	0x20008898
    7fec:	00010299 	.word	0x00010299

00007ff0 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    7ff0:	b580      	push	{r7, lr}
    7ff2:	b086      	sub	sp, #24
    7ff4:	af00      	add	r7, sp, #0
    7ff6:	4603      	mov	r3, r0
    7ff8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7ffa:	79fb      	ldrb	r3, [r7, #7]
    7ffc:	4618      	mov	r0, r3
    7ffe:	4b1a      	ldr	r3, [pc, #104]	; (8068 <_usb_d_ep_halt_clr+0x78>)
    8000:	4798      	blx	r3
    8002:	4603      	mov	r3, r0
    8004:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    8006:	f997 3017 	ldrsb.w	r3, [r7, #23]
    800a:	015b      	lsls	r3, r3, #5
    800c:	4a17      	ldr	r2, [pc, #92]	; (806c <_usb_d_ep_halt_clr+0x7c>)
    800e:	4413      	add	r3, r2
    8010:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    8012:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8016:	2b00      	cmp	r3, #0
    8018:	da02      	bge.n	8020 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    801a:	f06f 0311 	mvn.w	r3, #17
    801e:	e01f      	b.n	8060 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    8020:	79fb      	ldrb	r3, [r7, #7]
    8022:	2102      	movs	r1, #2
    8024:	4618      	mov	r0, r3
    8026:	4b12      	ldr	r3, [pc, #72]	; (8070 <_usb_d_ep_halt_clr+0x80>)
    8028:	4798      	blx	r3
    802a:	4603      	mov	r3, r0
    802c:	2b00      	cmp	r3, #0
    802e:	d016      	beq.n	805e <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    8030:	79fb      	ldrb	r3, [r7, #7]
    8032:	2100      	movs	r1, #0
    8034:	4618      	mov	r0, r3
    8036:	4b0e      	ldr	r3, [pc, #56]	; (8070 <_usb_d_ep_halt_clr+0x80>)
    8038:	4798      	blx	r3
    803a:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    803c:	68fb      	ldr	r3, [r7, #12]
    803e:	2b00      	cmp	r3, #0
    8040:	da01      	bge.n	8046 <_usb_d_ep_halt_clr+0x56>
			return rc;
    8042:	68fb      	ldr	r3, [r7, #12]
    8044:	e00c      	b.n	8060 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    8046:	693b      	ldr	r3, [r7, #16]
    8048:	2201      	movs	r2, #1
    804a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    804c:	693b      	ldr	r3, [r7, #16]
    804e:	2203      	movs	r2, #3
    8050:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    8052:	693b      	ldr	r3, [r7, #16]
    8054:	69db      	ldr	r3, [r3, #28]
    8056:	79f8      	ldrb	r0, [r7, #7]
    8058:	2200      	movs	r2, #0
    805a:	2103      	movs	r1, #3
    805c:	4798      	blx	r3
	}
	return ERR_NONE;
    805e:	2300      	movs	r3, #0
}
    8060:	4618      	mov	r0, r3
    8062:	3718      	adds	r7, #24
    8064:	46bd      	mov	sp, r7
    8066:	bd80      	pop	{r7, pc}
    8068:	000077f1 	.word	0x000077f1
    806c:	20008898 	.word	0x20008898
    8070:	0000fea5 	.word	0x0000fea5

00008074 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    8074:	b580      	push	{r7, lr}
    8076:	b082      	sub	sp, #8
    8078:	af00      	add	r7, sp, #0
    807a:	4603      	mov	r3, r0
    807c:	460a      	mov	r2, r1
    807e:	71fb      	strb	r3, [r7, #7]
    8080:	4613      	mov	r3, r2
    8082:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    8084:	79bb      	ldrb	r3, [r7, #6]
    8086:	2b00      	cmp	r3, #0
    8088:	d105      	bne.n	8096 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    808a:	79fb      	ldrb	r3, [r7, #7]
    808c:	4618      	mov	r0, r3
    808e:	4b0c      	ldr	r3, [pc, #48]	; (80c0 <usb_d_ep_halt+0x4c>)
    8090:	4798      	blx	r3
    8092:	4603      	mov	r3, r0
    8094:	e00f      	b.n	80b6 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    8096:	79bb      	ldrb	r3, [r7, #6]
    8098:	2b01      	cmp	r3, #1
    809a:	d106      	bne.n	80aa <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    809c:	79fb      	ldrb	r3, [r7, #7]
    809e:	2101      	movs	r1, #1
    80a0:	4618      	mov	r0, r3
    80a2:	4b08      	ldr	r3, [pc, #32]	; (80c4 <usb_d_ep_halt+0x50>)
    80a4:	4798      	blx	r3
    80a6:	4603      	mov	r3, r0
    80a8:	e005      	b.n	80b6 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    80aa:	79fb      	ldrb	r3, [r7, #7]
    80ac:	2102      	movs	r1, #2
    80ae:	4618      	mov	r0, r3
    80b0:	4b04      	ldr	r3, [pc, #16]	; (80c4 <usb_d_ep_halt+0x50>)
    80b2:	4798      	blx	r3
    80b4:	4603      	mov	r3, r0
	}
}
    80b6:	4618      	mov	r0, r3
    80b8:	3708      	adds	r7, #8
    80ba:	46bd      	mov	sp, r7
    80bc:	bd80      	pop	{r7, pc}
    80be:	bf00      	nop
    80c0:	00007ff1 	.word	0x00007ff1
    80c4:	0000fea5 	.word	0x0000fea5

000080c8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    80c8:	b580      	push	{r7, lr}
    80ca:	b086      	sub	sp, #24
    80cc:	af00      	add	r7, sp, #0
    80ce:	4603      	mov	r3, r0
    80d0:	603a      	str	r2, [r7, #0]
    80d2:	71fb      	strb	r3, [r7, #7]
    80d4:	460b      	mov	r3, r1
    80d6:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    80d8:	79fb      	ldrb	r3, [r7, #7]
    80da:	4618      	mov	r0, r3
    80dc:	4b16      	ldr	r3, [pc, #88]	; (8138 <usb_d_ep_register_callback+0x70>)
    80de:	4798      	blx	r3
    80e0:	4603      	mov	r3, r0
    80e2:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    80e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    80e8:	015b      	lsls	r3, r3, #5
    80ea:	4a14      	ldr	r2, [pc, #80]	; (813c <usb_d_ep_register_callback+0x74>)
    80ec:	4413      	add	r3, r2
    80ee:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    80f0:	683b      	ldr	r3, [r7, #0]
    80f2:	2b00      	cmp	r3, #0
    80f4:	d001      	beq.n	80fa <usb_d_ep_register_callback+0x32>
    80f6:	683b      	ldr	r3, [r7, #0]
    80f8:	e000      	b.n	80fc <usb_d_ep_register_callback+0x34>
    80fa:	4b11      	ldr	r3, [pc, #68]	; (8140 <usb_d_ep_register_callback+0x78>)
    80fc:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    80fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    8102:	2b00      	cmp	r3, #0
    8104:	db13      	blt.n	812e <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    8106:	79bb      	ldrb	r3, [r7, #6]
    8108:	2b01      	cmp	r3, #1
    810a:	d008      	beq.n	811e <usb_d_ep_register_callback+0x56>
    810c:	2b02      	cmp	r3, #2
    810e:	d00a      	beq.n	8126 <usb_d_ep_register_callback+0x5e>
    8110:	2b00      	cmp	r3, #0
    8112:	d000      	beq.n	8116 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    8114:	e00c      	b.n	8130 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    8116:	693b      	ldr	r3, [r7, #16]
    8118:	68fa      	ldr	r2, [r7, #12]
    811a:	615a      	str	r2, [r3, #20]
		break;
    811c:	e008      	b.n	8130 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    811e:	693b      	ldr	r3, [r7, #16]
    8120:	68fa      	ldr	r2, [r7, #12]
    8122:	619a      	str	r2, [r3, #24]
		break;
    8124:	e004      	b.n	8130 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    8126:	693b      	ldr	r3, [r7, #16]
    8128:	68fa      	ldr	r2, [r7, #12]
    812a:	61da      	str	r2, [r3, #28]
		break;
    812c:	e000      	b.n	8130 <usb_d_ep_register_callback+0x68>
		return;
    812e:	bf00      	nop
	}
}
    8130:	3718      	adds	r7, #24
    8132:	46bd      	mov	sp, r7
    8134:	bd80      	pop	{r7, pc}
    8136:	bf00      	nop
    8138:	000077f1 	.word	0x000077f1
    813c:	20008898 	.word	0x20008898
    8140:	000078c5 	.word	0x000078c5

00008144 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    8144:	b480      	push	{r7}
    8146:	b085      	sub	sp, #20
    8148:	af00      	add	r7, sp, #0
    814a:	4603      	mov	r3, r0
    814c:	60b9      	str	r1, [r7, #8]
    814e:	607a      	str	r2, [r7, #4]
    8150:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    8152:	7bfb      	ldrb	r3, [r7, #15]
    8154:	f083 0301 	eor.w	r3, r3, #1
    8158:	b2db      	uxtb	r3, r3
    815a:	2b00      	cmp	r3, #0
    815c:	d000      	beq.n	8160 <assert+0x1c>
		__asm("BKPT #0");
    815e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    8160:	bf00      	nop
    8162:	3714      	adds	r7, #20
    8164:	46bd      	mov	sp, r7
    8166:	f85d 7b04 	ldr.w	r7, [sp], #4
    816a:	4770      	bx	lr

0000816c <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    816c:	b480      	push	{r7}
    816e:	b085      	sub	sp, #20
    8170:	af00      	add	r7, sp, #0
    8172:	6078      	str	r0, [r7, #4]
    8174:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    8176:	687b      	ldr	r3, [r7, #4]
    8178:	681b      	ldr	r3, [r3, #0]
    817a:	60fb      	str	r3, [r7, #12]
    817c:	e008      	b.n	8190 <is_list_element+0x24>
		if (it == element) {
    817e:	68fa      	ldr	r2, [r7, #12]
    8180:	683b      	ldr	r3, [r7, #0]
    8182:	429a      	cmp	r2, r3
    8184:	d101      	bne.n	818a <is_list_element+0x1e>
			return true;
    8186:	2301      	movs	r3, #1
    8188:	e006      	b.n	8198 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    818a:	68fb      	ldr	r3, [r7, #12]
    818c:	681b      	ldr	r3, [r3, #0]
    818e:	60fb      	str	r3, [r7, #12]
    8190:	68fb      	ldr	r3, [r7, #12]
    8192:	2b00      	cmp	r3, #0
    8194:	d1f3      	bne.n	817e <is_list_element+0x12>
		}
	}

	return false;
    8196:	2300      	movs	r3, #0
}
    8198:	4618      	mov	r0, r3
    819a:	3714      	adds	r7, #20
    819c:	46bd      	mov	sp, r7
    819e:	f85d 7b04 	ldr.w	r7, [sp], #4
    81a2:	4770      	bx	lr

000081a4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    81a4:	b580      	push	{r7, lr}
    81a6:	b082      	sub	sp, #8
    81a8:	af00      	add	r7, sp, #0
    81aa:	6078      	str	r0, [r7, #4]
    81ac:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    81ae:	6839      	ldr	r1, [r7, #0]
    81b0:	6878      	ldr	r0, [r7, #4]
    81b2:	4b0f      	ldr	r3, [pc, #60]	; (81f0 <list_insert_as_head+0x4c>)
    81b4:	4798      	blx	r3
    81b6:	4603      	mov	r3, r0
    81b8:	2b00      	cmp	r3, #0
    81ba:	bf14      	ite	ne
    81bc:	2301      	movne	r3, #1
    81be:	2300      	moveq	r3, #0
    81c0:	b2db      	uxtb	r3, r3
    81c2:	f083 0301 	eor.w	r3, r3, #1
    81c6:	b2db      	uxtb	r3, r3
    81c8:	f003 0301 	and.w	r3, r3, #1
    81cc:	b2db      	uxtb	r3, r3
    81ce:	2239      	movs	r2, #57	; 0x39
    81d0:	4908      	ldr	r1, [pc, #32]	; (81f4 <list_insert_as_head+0x50>)
    81d2:	4618      	mov	r0, r3
    81d4:	4b08      	ldr	r3, [pc, #32]	; (81f8 <list_insert_as_head+0x54>)
    81d6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    81d8:	687b      	ldr	r3, [r7, #4]
    81da:	681a      	ldr	r2, [r3, #0]
    81dc:	683b      	ldr	r3, [r7, #0]
    81de:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    81e0:	687b      	ldr	r3, [r7, #4]
    81e2:	683a      	ldr	r2, [r7, #0]
    81e4:	601a      	str	r2, [r3, #0]
}
    81e6:	bf00      	nop
    81e8:	3708      	adds	r7, #8
    81ea:	46bd      	mov	sp, r7
    81ec:	bd80      	pop	{r7, pc}
    81ee:	bf00      	nop
    81f0:	0000816d 	.word	0x0000816d
    81f4:	00020afc 	.word	0x00020afc
    81f8:	00008145 	.word	0x00008145

000081fc <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    81fc:	b480      	push	{r7}
    81fe:	b083      	sub	sp, #12
    8200:	af00      	add	r7, sp, #0
    8202:	6078      	str	r0, [r7, #4]
    8204:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    8206:	687b      	ldr	r3, [r7, #4]
    8208:	681a      	ldr	r2, [r3, #0]
    820a:	683b      	ldr	r3, [r7, #0]
    820c:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    820e:	687b      	ldr	r3, [r7, #4]
    8210:	683a      	ldr	r2, [r7, #0]
    8212:	601a      	str	r2, [r3, #0]
}
    8214:	bf00      	nop
    8216:	370c      	adds	r7, #12
    8218:	46bd      	mov	sp, r7
    821a:	f85d 7b04 	ldr.w	r7, [sp], #4
    821e:	4770      	bx	lr

00008220 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    8220:	b580      	push	{r7, lr}
    8222:	b084      	sub	sp, #16
    8224:	af00      	add	r7, sp, #0
    8226:	6078      	str	r0, [r7, #4]
    8228:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    822a:	687b      	ldr	r3, [r7, #4]
    822c:	681b      	ldr	r3, [r3, #0]
    822e:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    8230:	6839      	ldr	r1, [r7, #0]
    8232:	6878      	ldr	r0, [r7, #4]
    8234:	4b16      	ldr	r3, [pc, #88]	; (8290 <list_insert_at_end+0x70>)
    8236:	4798      	blx	r3
    8238:	4603      	mov	r3, r0
    823a:	2b00      	cmp	r3, #0
    823c:	bf14      	ite	ne
    823e:	2301      	movne	r3, #1
    8240:	2300      	moveq	r3, #0
    8242:	b2db      	uxtb	r3, r3
    8244:	f083 0301 	eor.w	r3, r3, #1
    8248:	b2db      	uxtb	r3, r3
    824a:	f003 0301 	and.w	r3, r3, #1
    824e:	b2db      	uxtb	r3, r3
    8250:	224f      	movs	r2, #79	; 0x4f
    8252:	4910      	ldr	r1, [pc, #64]	; (8294 <list_insert_at_end+0x74>)
    8254:	4618      	mov	r0, r3
    8256:	4b10      	ldr	r3, [pc, #64]	; (8298 <list_insert_at_end+0x78>)
    8258:	4798      	blx	r3

	if (!list->head) {
    825a:	687b      	ldr	r3, [r7, #4]
    825c:	681b      	ldr	r3, [r3, #0]
    825e:	2b00      	cmp	r3, #0
    8260:	d109      	bne.n	8276 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    8262:	687b      	ldr	r3, [r7, #4]
    8264:	683a      	ldr	r2, [r7, #0]
    8266:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    8268:	683b      	ldr	r3, [r7, #0]
    826a:	2200      	movs	r2, #0
    826c:	601a      	str	r2, [r3, #0]
		return;
    826e:	e00c      	b.n	828a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    8270:	68fb      	ldr	r3, [r7, #12]
    8272:	681b      	ldr	r3, [r3, #0]
    8274:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    8276:	68fb      	ldr	r3, [r7, #12]
    8278:	681b      	ldr	r3, [r3, #0]
    827a:	2b00      	cmp	r3, #0
    827c:	d1f8      	bne.n	8270 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    827e:	68fb      	ldr	r3, [r7, #12]
    8280:	683a      	ldr	r2, [r7, #0]
    8282:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    8284:	683b      	ldr	r3, [r7, #0]
    8286:	2200      	movs	r2, #0
    8288:	601a      	str	r2, [r3, #0]
}
    828a:	3710      	adds	r7, #16
    828c:	46bd      	mov	sp, r7
    828e:	bd80      	pop	{r7, pc}
    8290:	0000816d 	.word	0x0000816d
    8294:	00020afc 	.word	0x00020afc
    8298:	00008145 	.word	0x00008145

0000829c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    829c:	b480      	push	{r7}
    829e:	b085      	sub	sp, #20
    82a0:	af00      	add	r7, sp, #0
    82a2:	6078      	str	r0, [r7, #4]
	if (list->head) {
    82a4:	687b      	ldr	r3, [r7, #4]
    82a6:	681b      	ldr	r3, [r3, #0]
    82a8:	2b00      	cmp	r3, #0
    82aa:	d009      	beq.n	82c0 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    82ac:	687b      	ldr	r3, [r7, #4]
    82ae:	681b      	ldr	r3, [r3, #0]
    82b0:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    82b2:	687b      	ldr	r3, [r7, #4]
    82b4:	681b      	ldr	r3, [r3, #0]
    82b6:	681a      	ldr	r2, [r3, #0]
    82b8:	687b      	ldr	r3, [r7, #4]
    82ba:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    82bc:	68fb      	ldr	r3, [r7, #12]
    82be:	e000      	b.n	82c2 <list_remove_head+0x26>
	}

	return NULL;
    82c0:	2300      	movs	r3, #0
}
    82c2:	4618      	mov	r0, r3
    82c4:	3714      	adds	r7, #20
    82c6:	46bd      	mov	sp, r7
    82c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    82cc:	4770      	bx	lr

000082ce <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    82ce:	b480      	push	{r7}
    82d0:	b085      	sub	sp, #20
    82d2:	af00      	add	r7, sp, #0
    82d4:	6078      	str	r0, [r7, #4]
    82d6:	6039      	str	r1, [r7, #0]
	if (!element) {
    82d8:	683b      	ldr	r3, [r7, #0]
    82da:	2b00      	cmp	r3, #0
    82dc:	d101      	bne.n	82e2 <list_delete_element+0x14>
		return false;
    82de:	2300      	movs	r3, #0
    82e0:	e024      	b.n	832c <list_delete_element+0x5e>
	}

	if (list->head == element) {
    82e2:	687b      	ldr	r3, [r7, #4]
    82e4:	681a      	ldr	r2, [r3, #0]
    82e6:	683b      	ldr	r3, [r7, #0]
    82e8:	429a      	cmp	r2, r3
    82ea:	d106      	bne.n	82fa <list_delete_element+0x2c>
		list->head = list->head->next;
    82ec:	687b      	ldr	r3, [r7, #4]
    82ee:	681b      	ldr	r3, [r3, #0]
    82f0:	681a      	ldr	r2, [r3, #0]
    82f2:	687b      	ldr	r3, [r7, #4]
    82f4:	601a      	str	r2, [r3, #0]
		return true;
    82f6:	2301      	movs	r3, #1
    82f8:	e018      	b.n	832c <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    82fa:	687b      	ldr	r3, [r7, #4]
    82fc:	681b      	ldr	r3, [r3, #0]
    82fe:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    8300:	e002      	b.n	8308 <list_delete_element+0x3a>
			it = it->next;
    8302:	68fb      	ldr	r3, [r7, #12]
    8304:	681b      	ldr	r3, [r3, #0]
    8306:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    8308:	68fb      	ldr	r3, [r7, #12]
    830a:	2b00      	cmp	r3, #0
    830c:	d004      	beq.n	8318 <list_delete_element+0x4a>
    830e:	68fb      	ldr	r3, [r7, #12]
    8310:	681a      	ldr	r2, [r3, #0]
    8312:	683b      	ldr	r3, [r7, #0]
    8314:	429a      	cmp	r2, r3
    8316:	d1f4      	bne.n	8302 <list_delete_element+0x34>
		}
		if (it) {
    8318:	68fb      	ldr	r3, [r7, #12]
    831a:	2b00      	cmp	r3, #0
    831c:	d005      	beq.n	832a <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    831e:	683b      	ldr	r3, [r7, #0]
    8320:	681a      	ldr	r2, [r3, #0]
    8322:	68fb      	ldr	r3, [r7, #12]
    8324:	601a      	str	r2, [r3, #0]
			return true;
    8326:	2301      	movs	r3, #1
    8328:	e000      	b.n	832c <list_delete_element+0x5e>
		}
	}

	return false;
    832a:	2300      	movs	r3, #0
}
    832c:	4618      	mov	r0, r3
    832e:	3714      	adds	r7, #20
    8330:	46bd      	mov	sp, r7
    8332:	f85d 7b04 	ldr.w	r7, [sp], #4
    8336:	4770      	bx	lr

00008338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    8338:	b480      	push	{r7}
    833a:	b083      	sub	sp, #12
    833c:	af00      	add	r7, sp, #0
    833e:	4603      	mov	r3, r0
    8340:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8346:	2b00      	cmp	r3, #0
    8348:	db0b      	blt.n	8362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    834a:	4909      	ldr	r1, [pc, #36]	; (8370 <__NVIC_EnableIRQ+0x38>)
    834c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8350:	095b      	lsrs	r3, r3, #5
    8352:	88fa      	ldrh	r2, [r7, #6]
    8354:	f002 021f 	and.w	r2, r2, #31
    8358:	2001      	movs	r0, #1
    835a:	fa00 f202 	lsl.w	r2, r0, r2
    835e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    8362:	bf00      	nop
    8364:	370c      	adds	r7, #12
    8366:	46bd      	mov	sp, r7
    8368:	f85d 7b04 	ldr.w	r7, [sp], #4
    836c:	4770      	bx	lr
    836e:	bf00      	nop
    8370:	e000e100 	.word	0xe000e100

00008374 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    8374:	b480      	push	{r7}
    8376:	b083      	sub	sp, #12
    8378:	af00      	add	r7, sp, #0
    837a:	4603      	mov	r3, r0
    837c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    837e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8382:	2b00      	cmp	r3, #0
    8384:	db10      	blt.n	83a8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8386:	490b      	ldr	r1, [pc, #44]	; (83b4 <__NVIC_DisableIRQ+0x40>)
    8388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    838c:	095b      	lsrs	r3, r3, #5
    838e:	88fa      	ldrh	r2, [r7, #6]
    8390:	f002 021f 	and.w	r2, r2, #31
    8394:	2001      	movs	r0, #1
    8396:	fa00 f202 	lsl.w	r2, r0, r2
    839a:	3320      	adds	r3, #32
    839c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    83a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    83a4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    83a8:	bf00      	nop
    83aa:	370c      	adds	r7, #12
    83ac:	46bd      	mov	sp, r7
    83ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    83b2:	4770      	bx	lr
    83b4:	e000e100 	.word	0xe000e100

000083b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    83b8:	b480      	push	{r7}
    83ba:	b083      	sub	sp, #12
    83bc:	af00      	add	r7, sp, #0
    83be:	4603      	mov	r3, r0
    83c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    83c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83c6:	2b00      	cmp	r3, #0
    83c8:	db0c      	blt.n	83e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    83ca:	4909      	ldr	r1, [pc, #36]	; (83f0 <__NVIC_ClearPendingIRQ+0x38>)
    83cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    83d0:	095b      	lsrs	r3, r3, #5
    83d2:	88fa      	ldrh	r2, [r7, #6]
    83d4:	f002 021f 	and.w	r2, r2, #31
    83d8:	2001      	movs	r0, #1
    83da:	fa00 f202 	lsl.w	r2, r0, r2
    83de:	3360      	adds	r3, #96	; 0x60
    83e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    83e4:	bf00      	nop
    83e6:	370c      	adds	r7, #12
    83e8:	46bd      	mov	sp, r7
    83ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    83ee:	4770      	bx	lr
    83f0:	e000e100 	.word	0xe000e100

000083f4 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    83f4:	b480      	push	{r7}
    83f6:	b083      	sub	sp, #12
    83f8:	af00      	add	r7, sp, #0
    83fa:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    83fc:	687b      	ldr	r3, [r7, #4]
    83fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8400:	095b      	lsrs	r3, r3, #5
    8402:	f003 0301 	and.w	r3, r3, #1
    8406:	2b00      	cmp	r3, #0
    8408:	bf14      	ite	ne
    840a:	2301      	movne	r3, #1
    840c:	2300      	moveq	r3, #0
    840e:	b2db      	uxtb	r3, r3
}
    8410:	4618      	mov	r0, r3
    8412:	370c      	adds	r7, #12
    8414:	46bd      	mov	sp, r7
    8416:	f85d 7b04 	ldr.w	r7, [sp], #4
    841a:	4770      	bx	lr

0000841c <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    841c:	b480      	push	{r7}
    841e:	b083      	sub	sp, #12
    8420:	af00      	add	r7, sp, #0
    8422:	6078      	str	r0, [r7, #4]
    8424:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    8426:	687b      	ldr	r3, [r7, #4]
    8428:	683a      	ldr	r2, [r7, #0]
    842a:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    842c:	bf00      	nop
    842e:	370c      	adds	r7, #12
    8430:	46bd      	mov	sp, r7
    8432:	f85d 7b04 	ldr.w	r7, [sp], #4
    8436:	4770      	bx	lr

00008438 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    8438:	b480      	push	{r7}
    843a:	b083      	sub	sp, #12
    843c:	af00      	add	r7, sp, #0
    843e:	6078      	str	r0, [r7, #4]
    8440:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    8442:	687b      	ldr	r3, [r7, #4]
    8444:	683a      	ldr	r2, [r7, #0]
    8446:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8448:	bf00      	nop
    844a:	370c      	adds	r7, #12
    844c:	46bd      	mov	sp, r7
    844e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8452:	4770      	bx	lr

00008454 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    8454:	b480      	push	{r7}
    8456:	b083      	sub	sp, #12
    8458:	af00      	add	r7, sp, #0
    845a:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    845c:	687b      	ldr	r3, [r7, #4]
    845e:	699b      	ldr	r3, [r3, #24]
    8460:	f043 0201 	orr.w	r2, r3, #1
    8464:	687b      	ldr	r3, [r7, #4]
    8466:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8468:	bf00      	nop
    846a:	370c      	adds	r7, #12
    846c:	46bd      	mov	sp, r7
    846e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8472:	4770      	bx	lr

00008474 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    8474:	b480      	push	{r7}
    8476:	b085      	sub	sp, #20
    8478:	af00      	add	r7, sp, #0
    847a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    847c:	687b      	ldr	r3, [r7, #4]
    847e:	699b      	ldr	r3, [r3, #24]
    8480:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    8482:	68fb      	ldr	r3, [r7, #12]
    8484:	f003 0301 	and.w	r3, r3, #1
    8488:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    848a:	68fb      	ldr	r3, [r7, #12]
    848c:	2b00      	cmp	r3, #0
    848e:	bf14      	ite	ne
    8490:	2301      	movne	r3, #1
    8492:	2300      	moveq	r3, #0
    8494:	b2db      	uxtb	r3, r3
}
    8496:	4618      	mov	r0, r3
    8498:	3714      	adds	r7, #20
    849a:	46bd      	mov	sp, r7
    849c:	f85d 7b04 	ldr.w	r7, [sp], #4
    84a0:	4770      	bx	lr

000084a2 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    84a2:	b480      	push	{r7}
    84a4:	b083      	sub	sp, #12
    84a6:	af00      	add	r7, sp, #0
    84a8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    84aa:	687b      	ldr	r3, [r7, #4]
    84ac:	699b      	ldr	r3, [r3, #24]
    84ae:	f023 0201 	bic.w	r2, r3, #1
    84b2:	687b      	ldr	r3, [r7, #4]
    84b4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    84b6:	bf00      	nop
    84b8:	370c      	adds	r7, #12
    84ba:	46bd      	mov	sp, r7
    84bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    84c0:	4770      	bx	lr

000084c2 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    84c2:	b480      	push	{r7}
    84c4:	b083      	sub	sp, #12
    84c6:	af00      	add	r7, sp, #0
    84c8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    84ca:	687b      	ldr	r3, [r7, #4]
    84cc:	699b      	ldr	r3, [r3, #24]
    84ce:	f043 0202 	orr.w	r2, r3, #2
    84d2:	687b      	ldr	r3, [r7, #4]
    84d4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    84d6:	bf00      	nop
    84d8:	370c      	adds	r7, #12
    84da:	46bd      	mov	sp, r7
    84dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    84e0:	4770      	bx	lr

000084e2 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    84e2:	b480      	push	{r7}
    84e4:	b083      	sub	sp, #12
    84e6:	af00      	add	r7, sp, #0
    84e8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    84ea:	687b      	ldr	r3, [r7, #4]
    84ec:	699b      	ldr	r3, [r3, #24]
    84ee:	f023 0202 	bic.w	r2, r3, #2
    84f2:	687b      	ldr	r3, [r7, #4]
    84f4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    84f6:	bf00      	nop
    84f8:	370c      	adds	r7, #12
    84fa:	46bd      	mov	sp, r7
    84fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8500:	4770      	bx	lr

00008502 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    8502:	b480      	push	{r7}
    8504:	b083      	sub	sp, #12
    8506:	af00      	add	r7, sp, #0
    8508:	6078      	str	r0, [r7, #4]
    850a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    850c:	687b      	ldr	r3, [r7, #4]
    850e:	699a      	ldr	r2, [r3, #24]
    8510:	683b      	ldr	r3, [r7, #0]
    8512:	431a      	orrs	r2, r3
    8514:	687b      	ldr	r3, [r7, #4]
    8516:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8518:	bf00      	nop
    851a:	370c      	adds	r7, #12
    851c:	46bd      	mov	sp, r7
    851e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8522:	4770      	bx	lr

00008524 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    8524:	b480      	push	{r7}
    8526:	b083      	sub	sp, #12
    8528:	af00      	add	r7, sp, #0
    852a:	6078      	str	r0, [r7, #4]
    852c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    852e:	687b      	ldr	r3, [r7, #4]
    8530:	683a      	ldr	r2, [r7, #0]
    8532:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    8534:	bf00      	nop
    8536:	370c      	adds	r7, #12
    8538:	46bd      	mov	sp, r7
    853a:	f85d 7b04 	ldr.w	r7, [sp], #4
    853e:	4770      	bx	lr

00008540 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    8540:	b480      	push	{r7}
    8542:	b083      	sub	sp, #12
    8544:	af00      	add	r7, sp, #0
    8546:	6078      	str	r0, [r7, #4]
    8548:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    854a:	687b      	ldr	r3, [r7, #4]
    854c:	683a      	ldr	r2, [r7, #0]
    854e:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    8550:	bf00      	nop
    8552:	370c      	adds	r7, #12
    8554:	46bd      	mov	sp, r7
    8556:	f85d 7b04 	ldr.w	r7, [sp], #4
    855a:	4770      	bx	lr

0000855c <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    855c:	b480      	push	{r7}
    855e:	b083      	sub	sp, #12
    8560:	af00      	add	r7, sp, #0
    8562:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    8564:	687b      	ldr	r3, [r7, #4]
    8566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    8568:	4618      	mov	r0, r3
    856a:	370c      	adds	r7, #12
    856c:	46bd      	mov	sp, r7
    856e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8572:	4770      	bx	lr

00008574 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    8574:	b480      	push	{r7}
    8576:	b083      	sub	sp, #12
    8578:	af00      	add	r7, sp, #0
    857a:	6078      	str	r0, [r7, #4]
    857c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    857e:	687b      	ldr	r3, [r7, #4]
    8580:	683a      	ldr	r2, [r7, #0]
    8582:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    8584:	bf00      	nop
    8586:	370c      	adds	r7, #12
    8588:	46bd      	mov	sp, r7
    858a:	f85d 7b04 	ldr.w	r7, [sp], #4
    858e:	4770      	bx	lr

00008590 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    8590:	b480      	push	{r7}
    8592:	b083      	sub	sp, #12
    8594:	af00      	add	r7, sp, #0
    8596:	6078      	str	r0, [r7, #4]
    8598:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    859a:	687b      	ldr	r3, [r7, #4]
    859c:	683a      	ldr	r2, [r7, #0]
    859e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    85a2:	bf00      	nop
    85a4:	370c      	adds	r7, #12
    85a6:	46bd      	mov	sp, r7
    85a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ac:	4770      	bx	lr

000085ae <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    85ae:	b480      	push	{r7}
    85b0:	b083      	sub	sp, #12
    85b2:	af00      	add	r7, sp, #0
    85b4:	6078      	str	r0, [r7, #4]
    85b6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	683a      	ldr	r2, [r7, #0]
    85bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    85c0:	bf00      	nop
    85c2:	370c      	adds	r7, #12
    85c4:	46bd      	mov	sp, r7
    85c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ca:	4770      	bx	lr

000085cc <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    85cc:	b480      	push	{r7}
    85ce:	b083      	sub	sp, #12
    85d0:	af00      	add	r7, sp, #0
    85d2:	6078      	str	r0, [r7, #4]
    85d4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    85d6:	687b      	ldr	r3, [r7, #4]
    85d8:	683a      	ldr	r2, [r7, #0]
    85da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    85de:	bf00      	nop
    85e0:	370c      	adds	r7, #12
    85e2:	46bd      	mov	sp, r7
    85e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    85e8:	4770      	bx	lr

000085ea <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    85ea:	b480      	push	{r7}
    85ec:	b083      	sub	sp, #12
    85ee:	af00      	add	r7, sp, #0
    85f0:	6078      	str	r0, [r7, #4]
    85f2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    85f4:	687b      	ldr	r3, [r7, #4]
    85f6:	683a      	ldr	r2, [r7, #0]
    85f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    85fc:	bf00      	nop
    85fe:	370c      	adds	r7, #12
    8600:	46bd      	mov	sp, r7
    8602:	f85d 7b04 	ldr.w	r7, [sp], #4
    8606:	4770      	bx	lr

00008608 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    8608:	b480      	push	{r7}
    860a:	b083      	sub	sp, #12
    860c:	af00      	add	r7, sp, #0
    860e:	6078      	str	r0, [r7, #4]
    8610:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    8612:	687b      	ldr	r3, [r7, #4]
    8614:	683a      	ldr	r2, [r7, #0]
    8616:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    861a:	bf00      	nop
    861c:	370c      	adds	r7, #12
    861e:	46bd      	mov	sp, r7
    8620:	f85d 7b04 	ldr.w	r7, [sp], #4
    8624:	4770      	bx	lr

00008626 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    8626:	b480      	push	{r7}
    8628:	b083      	sub	sp, #12
    862a:	af00      	add	r7, sp, #0
    862c:	6078      	str	r0, [r7, #4]
    862e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    8630:	687b      	ldr	r3, [r7, #4]
    8632:	683a      	ldr	r2, [r7, #0]
    8634:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    8638:	bf00      	nop
    863a:	370c      	adds	r7, #12
    863c:	46bd      	mov	sp, r7
    863e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8642:	4770      	bx	lr

00008644 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    8644:	b480      	push	{r7}
    8646:	b083      	sub	sp, #12
    8648:	af00      	add	r7, sp, #0
    864a:	6078      	str	r0, [r7, #4]
    864c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    864e:	687b      	ldr	r3, [r7, #4]
    8650:	683a      	ldr	r2, [r7, #0]
    8652:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    8656:	bf00      	nop
    8658:	370c      	adds	r7, #12
    865a:	46bd      	mov	sp, r7
    865c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8660:	4770      	bx	lr

00008662 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    8662:	b480      	push	{r7}
    8664:	b083      	sub	sp, #12
    8666:	af00      	add	r7, sp, #0
    8668:	6078      	str	r0, [r7, #4]
    866a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    866c:	687b      	ldr	r3, [r7, #4]
    866e:	683a      	ldr	r2, [r7, #0]
    8670:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    8674:	bf00      	nop
    8676:	370c      	adds	r7, #12
    8678:	46bd      	mov	sp, r7
    867a:	f85d 7b04 	ldr.w	r7, [sp], #4
    867e:	4770      	bx	lr

00008680 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    8680:	b480      	push	{r7}
    8682:	b083      	sub	sp, #12
    8684:	af00      	add	r7, sp, #0
    8686:	6078      	str	r0, [r7, #4]
    8688:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    868a:	687b      	ldr	r3, [r7, #4]
    868c:	683a      	ldr	r2, [r7, #0]
    868e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    8692:	bf00      	nop
    8694:	370c      	adds	r7, #12
    8696:	46bd      	mov	sp, r7
    8698:	f85d 7b04 	ldr.w	r7, [sp], #4
    869c:	4770      	bx	lr
	...

000086a0 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    86a0:	b580      	push	{r7, lr}
    86a2:	b082      	sub	sp, #8
    86a4:	af00      	add	r7, sp, #0
    86a6:	6078      	str	r0, [r7, #4]
    86a8:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    86aa:	687b      	ldr	r3, [r7, #4]
    86ac:	683a      	ldr	r2, [r7, #0]
    86ae:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    86b0:	687b      	ldr	r3, [r7, #4]
    86b2:	681b      	ldr	r3, [r3, #0]
    86b4:	4618      	mov	r0, r3
    86b6:	4b55      	ldr	r3, [pc, #340]	; (880c <_can_async_init+0x16c>)
    86b8:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    86ba:	bf00      	nop
    86bc:	687b      	ldr	r3, [r7, #4]
    86be:	681b      	ldr	r3, [r3, #0]
    86c0:	4618      	mov	r0, r3
    86c2:	4b53      	ldr	r3, [pc, #332]	; (8810 <_can_async_init+0x170>)
    86c4:	4798      	blx	r3
    86c6:	4603      	mov	r3, r0
    86c8:	f083 0301 	eor.w	r3, r3, #1
    86cc:	b2db      	uxtb	r3, r3
    86ce:	2b00      	cmp	r3, #0
    86d0:	d1f4      	bne.n	86bc <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	681b      	ldr	r3, [r3, #0]
    86d6:	4618      	mov	r0, r3
    86d8:	4b4e      	ldr	r3, [pc, #312]	; (8814 <_can_async_init+0x174>)
    86da:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    86dc:	683b      	ldr	r3, [r7, #0]
    86de:	4a4e      	ldr	r2, [pc, #312]	; (8818 <_can_async_init+0x178>)
    86e0:	4293      	cmp	r3, r2
    86e2:	d17a      	bne.n	87da <_can_async_init+0x13a>
		_can1_dev    = dev;
    86e4:	4a4d      	ldr	r2, [pc, #308]	; (881c <_can_async_init+0x17c>)
    86e6:	687b      	ldr	r3, [r7, #4]
    86e8:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    86ea:	687b      	ldr	r3, [r7, #4]
    86ec:	4a4c      	ldr	r2, [pc, #304]	; (8820 <_can_async_init+0x180>)
    86ee:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    86f0:	687b      	ldr	r3, [r7, #4]
    86f2:	681b      	ldr	r3, [r3, #0]
    86f4:	f44f 7140 	mov.w	r1, #768	; 0x300
    86f8:	4618      	mov	r0, r3
    86fa:	4b4a      	ldr	r3, [pc, #296]	; (8824 <_can_async_init+0x184>)
    86fc:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    86fe:	687b      	ldr	r3, [r7, #4]
    8700:	681b      	ldr	r3, [r3, #0]
    8702:	2102      	movs	r1, #2
    8704:	4618      	mov	r0, r3
    8706:	4b48      	ldr	r3, [pc, #288]	; (8828 <_can_async_init+0x188>)
    8708:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    870a:	687b      	ldr	r3, [r7, #4]
    870c:	681b      	ldr	r3, [r3, #0]
    870e:	4947      	ldr	r1, [pc, #284]	; (882c <_can_async_init+0x18c>)
    8710:	4618      	mov	r0, r3
    8712:	4b47      	ldr	r3, [pc, #284]	; (8830 <_can_async_init+0x190>)
    8714:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    8716:	687b      	ldr	r3, [r7, #4]
    8718:	681b      	ldr	r3, [r3, #0]
    871a:	4946      	ldr	r1, [pc, #280]	; (8834 <_can_async_init+0x194>)
    871c:	4618      	mov	r0, r3
    871e:	4b46      	ldr	r3, [pc, #280]	; (8838 <_can_async_init+0x198>)
    8720:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    8722:	687b      	ldr	r3, [r7, #4]
    8724:	681a      	ldr	r2, [r3, #0]
    8726:	4b45      	ldr	r3, [pc, #276]	; (883c <_can_async_init+0x19c>)
    8728:	b29b      	uxth	r3, r3
    872a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    872e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8732:	4619      	mov	r1, r3
    8734:	4610      	mov	r0, r2
    8736:	4b42      	ldr	r3, [pc, #264]	; (8840 <_can_async_init+0x1a0>)
    8738:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    873a:	687b      	ldr	r3, [r7, #4]
    873c:	681b      	ldr	r3, [r3, #0]
    873e:	2107      	movs	r1, #7
    8740:	4618      	mov	r0, r3
    8742:	4b40      	ldr	r3, [pc, #256]	; (8844 <_can_async_init+0x1a4>)
    8744:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    8746:	687b      	ldr	r3, [r7, #4]
    8748:	681b      	ldr	r3, [r3, #0]
    874a:	2107      	movs	r1, #7
    874c:	4618      	mov	r0, r3
    874e:	4b3e      	ldr	r3, [pc, #248]	; (8848 <_can_async_init+0x1a8>)
    8750:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    8752:	687b      	ldr	r3, [r7, #4]
    8754:	681a      	ldr	r2, [r3, #0]
    8756:	4b3d      	ldr	r3, [pc, #244]	; (884c <_can_async_init+0x1ac>)
    8758:	b29b      	uxth	r3, r3
    875a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    875e:	4619      	mov	r1, r3
    8760:	4610      	mov	r0, r2
    8762:	4b3b      	ldr	r3, [pc, #236]	; (8850 <_can_async_init+0x1b0>)
    8764:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    8766:	687b      	ldr	r3, [r7, #4]
    8768:	681a      	ldr	r2, [r3, #0]
    876a:	4b3a      	ldr	r3, [pc, #232]	; (8854 <_can_async_init+0x1b4>)
    876c:	b29b      	uxth	r3, r3
    876e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8772:	4619      	mov	r1, r3
    8774:	4610      	mov	r0, r2
    8776:	4b38      	ldr	r3, [pc, #224]	; (8858 <_can_async_init+0x1b8>)
    8778:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    877a:	687b      	ldr	r3, [r7, #4]
    877c:	681b      	ldr	r3, [r3, #0]
    877e:	2108      	movs	r1, #8
    8780:	4618      	mov	r0, r3
    8782:	4b36      	ldr	r3, [pc, #216]	; (885c <_can_async_init+0x1bc>)
    8784:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    8786:	687b      	ldr	r3, [r7, #4]
    8788:	681a      	ldr	r2, [r3, #0]
    878a:	4b35      	ldr	r3, [pc, #212]	; (8860 <_can_async_init+0x1c0>)
    878c:	b29b      	uxth	r3, r3
    878e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    8792:	4619      	mov	r1, r3
    8794:	4610      	mov	r0, r2
    8796:	4b33      	ldr	r3, [pc, #204]	; (8864 <_can_async_init+0x1c4>)
    8798:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    879a:	687b      	ldr	r3, [r7, #4]
    879c:	681a      	ldr	r2, [r3, #0]
    879e:	4b32      	ldr	r3, [pc, #200]	; (8868 <_can_async_init+0x1c8>)
    87a0:	b29b      	uxth	r3, r3
    87a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    87a6:	4619      	mov	r1, r3
    87a8:	4610      	mov	r0, r2
    87aa:	4b30      	ldr	r3, [pc, #192]	; (886c <_can_async_init+0x1cc>)
    87ac:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    87ae:	687b      	ldr	r3, [r7, #4]
    87b0:	681b      	ldr	r3, [r3, #0]
    87b2:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    87b6:	4618      	mov	r0, r3
    87b8:	4b2d      	ldr	r3, [pc, #180]	; (8870 <_can_async_init+0x1d0>)
    87ba:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    87bc:	204f      	movs	r0, #79	; 0x4f
    87be:	4b2d      	ldr	r3, [pc, #180]	; (8874 <_can_async_init+0x1d4>)
    87c0:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    87c2:	204f      	movs	r0, #79	; 0x4f
    87c4:	4b2c      	ldr	r3, [pc, #176]	; (8878 <_can_async_init+0x1d8>)
    87c6:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    87c8:	204f      	movs	r0, #79	; 0x4f
    87ca:	4b2c      	ldr	r3, [pc, #176]	; (887c <_can_async_init+0x1dc>)
    87cc:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    87ce:	687b      	ldr	r3, [r7, #4]
    87d0:	681b      	ldr	r3, [r3, #0]
    87d2:	2101      	movs	r1, #1
    87d4:	4618      	mov	r0, r3
    87d6:	4b2a      	ldr	r3, [pc, #168]	; (8880 <_can_async_init+0x1e0>)
    87d8:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    87da:	687b      	ldr	r3, [r7, #4]
    87dc:	681b      	ldr	r3, [r3, #0]
    87de:	4618      	mov	r0, r3
    87e0:	4b28      	ldr	r3, [pc, #160]	; (8884 <_can_async_init+0x1e4>)
    87e2:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    87e4:	687b      	ldr	r3, [r7, #4]
    87e6:	681b      	ldr	r3, [r3, #0]
    87e8:	4618      	mov	r0, r3
    87ea:	4b27      	ldr	r3, [pc, #156]	; (8888 <_can_async_init+0x1e8>)
    87ec:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    87ee:	bf00      	nop
    87f0:	687b      	ldr	r3, [r7, #4]
    87f2:	681b      	ldr	r3, [r3, #0]
    87f4:	4618      	mov	r0, r3
    87f6:	4b06      	ldr	r3, [pc, #24]	; (8810 <_can_async_init+0x170>)
    87f8:	4798      	blx	r3
    87fa:	4603      	mov	r3, r0
    87fc:	2b00      	cmp	r3, #0
    87fe:	d1f7      	bne.n	87f0 <_can_async_init+0x150>
	};

	return ERR_NONE;
    8800:	2300      	movs	r3, #0
}
    8802:	4618      	mov	r0, r3
    8804:	3708      	adds	r7, #8
    8806:	46bd      	mov	sp, r7
    8808:	bd80      	pop	{r7, pc}
    880a:	bf00      	nop
    880c:	00008455 	.word	0x00008455
    8810:	00008475 	.word	0x00008475
    8814:	000084c3 	.word	0x000084c3
    8818:	42000400 	.word	0x42000400
    881c:	200089b8 	.word	0x200089b8
    8820:	20000068 	.word	0x20000068
    8824:	00008503 	.word	0x00008503
    8828:	0000841d 	.word	0x0000841d
    882c:	00010c01 	.word	0x00010c01
    8830:	00008525 	.word	0x00008525
    8834:	00010c10 	.word	0x00010c10
    8838:	00008439 	.word	0x00008439
    883c:	2000a998 	.word	0x2000a998
    8840:	00008609 	.word	0x00008609
    8844:	00008627 	.word	0x00008627
    8848:	00008663 	.word	0x00008663
    884c:	2000a950 	.word	0x2000a950
    8850:	00008645 	.word	0x00008645
    8854:	20008918 	.word	0x20008918
    8858:	00008681 	.word	0x00008681
    885c:	00008591 	.word	0x00008591
    8860:	20008928 	.word	0x20008928
    8864:	000085af 	.word	0x000085af
    8868:	200089a8 	.word	0x200089a8
    886c:	000085cd 	.word	0x000085cd
    8870:	000085eb 	.word	0x000085eb
    8874:	00008375 	.word	0x00008375
    8878:	000083b9 	.word	0x000083b9
    887c:	00008339 	.word	0x00008339
    8880:	00008575 	.word	0x00008575
    8884:	000084e3 	.word	0x000084e3
    8888:	000084a3 	.word	0x000084a3

0000888c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    888c:	b590      	push	{r4, r7, lr}
    888e:	b083      	sub	sp, #12
    8890:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    8892:	4b2c      	ldr	r3, [pc, #176]	; (8944 <CAN1_Handler+0xb8>)
    8894:	681b      	ldr	r3, [r3, #0]
    8896:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    8898:	687b      	ldr	r3, [r7, #4]
    889a:	681b      	ldr	r3, [r3, #0]
    889c:	4618      	mov	r0, r3
    889e:	4b2a      	ldr	r3, [pc, #168]	; (8948 <CAN1_Handler+0xbc>)
    88a0:	4798      	blx	r3
    88a2:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    88a4:	683b      	ldr	r3, [r7, #0]
    88a6:	f003 0301 	and.w	r3, r3, #1
    88aa:	2b00      	cmp	r3, #0
    88ac:	d003      	beq.n	88b6 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    88ae:	687b      	ldr	r3, [r7, #4]
    88b0:	689b      	ldr	r3, [r3, #8]
    88b2:	6878      	ldr	r0, [r7, #4]
    88b4:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    88b6:	683b      	ldr	r3, [r7, #0]
    88b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    88bc:	2b00      	cmp	r3, #0
    88be:	d003      	beq.n	88c8 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    88c0:	687b      	ldr	r3, [r7, #4]
    88c2:	685b      	ldr	r3, [r3, #4]
    88c4:	6878      	ldr	r0, [r7, #4]
    88c6:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    88c8:	683b      	ldr	r3, [r7, #0]
    88ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    88ce:	2b00      	cmp	r3, #0
    88d0:	d004      	beq.n	88dc <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    88d2:	687b      	ldr	r3, [r7, #4]
    88d4:	68db      	ldr	r3, [r3, #12]
    88d6:	2103      	movs	r1, #3
    88d8:	6878      	ldr	r0, [r7, #4]
    88da:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    88dc:	683b      	ldr	r3, [r7, #0]
    88de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    88e2:	2b00      	cmp	r3, #0
    88e4:	d004      	beq.n	88f0 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    88e6:	687b      	ldr	r3, [r7, #4]
    88e8:	68db      	ldr	r3, [r3, #12]
    88ea:	2100      	movs	r1, #0
    88ec:	6878      	ldr	r0, [r7, #4]
    88ee:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    88f0:	683b      	ldr	r3, [r7, #0]
    88f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    88f6:	2b00      	cmp	r3, #0
    88f8:	d00f      	beq.n	891a <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    88fa:	687b      	ldr	r3, [r7, #4]
    88fc:	68dc      	ldr	r4, [r3, #12]
    88fe:	687b      	ldr	r3, [r7, #4]
    8900:	681b      	ldr	r3, [r3, #0]
    8902:	4618      	mov	r0, r3
    8904:	4b11      	ldr	r3, [pc, #68]	; (894c <CAN1_Handler+0xc0>)
    8906:	4798      	blx	r3
    8908:	4603      	mov	r3, r0
    890a:	2b00      	cmp	r3, #0
    890c:	d001      	beq.n	8912 <CAN1_Handler+0x86>
    890e:	2302      	movs	r3, #2
    8910:	e000      	b.n	8914 <CAN1_Handler+0x88>
    8912:	2301      	movs	r3, #1
    8914:	4619      	mov	r1, r3
    8916:	6878      	ldr	r0, [r7, #4]
    8918:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    891a:	683b      	ldr	r3, [r7, #0]
    891c:	f003 0308 	and.w	r3, r3, #8
    8920:	2b00      	cmp	r3, #0
    8922:	d004      	beq.n	892e <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    8924:	687b      	ldr	r3, [r7, #4]
    8926:	68db      	ldr	r3, [r3, #12]
    8928:	2104      	movs	r1, #4
    892a:	6878      	ldr	r0, [r7, #4]
    892c:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    892e:	687b      	ldr	r3, [r7, #4]
    8930:	681b      	ldr	r3, [r3, #0]
    8932:	6839      	ldr	r1, [r7, #0]
    8934:	4618      	mov	r0, r3
    8936:	4b06      	ldr	r3, [pc, #24]	; (8950 <CAN1_Handler+0xc4>)
    8938:	4798      	blx	r3
}
    893a:	bf00      	nop
    893c:	370c      	adds	r7, #12
    893e:	46bd      	mov	sp, r7
    8940:	bd90      	pop	{r4, r7, pc}
    8942:	bf00      	nop
    8944:	200089b8 	.word	0x200089b8
    8948:	0000855d 	.word	0x0000855d
    894c:	000083f5 	.word	0x000083f5
    8950:	00008541 	.word	0x00008541

00008954 <__NVIC_SetPendingIRQ>:
{
    8954:	b480      	push	{r7}
    8956:	b083      	sub	sp, #12
    8958:	af00      	add	r7, sp, #0
    895a:	4603      	mov	r3, r0
    895c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    895e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8962:	2b00      	cmp	r3, #0
    8964:	db0c      	blt.n	8980 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8966:	4909      	ldr	r1, [pc, #36]	; (898c <__NVIC_SetPendingIRQ+0x38>)
    8968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    896c:	095b      	lsrs	r3, r3, #5
    896e:	88fa      	ldrh	r2, [r7, #6]
    8970:	f002 021f 	and.w	r2, r2, #31
    8974:	2001      	movs	r0, #1
    8976:	fa00 f202 	lsl.w	r2, r0, r2
    897a:	3340      	adds	r3, #64	; 0x40
    897c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8980:	bf00      	nop
    8982:	370c      	adds	r7, #12
    8984:	46bd      	mov	sp, r7
    8986:	f85d 7b04 	ldr.w	r7, [sp], #4
    898a:	4770      	bx	lr
    898c:	e000e100 	.word	0xe000e100

00008990 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    8990:	b580      	push	{r7, lr}
    8992:	b082      	sub	sp, #8
    8994:	af00      	add	r7, sp, #0
    8996:	4603      	mov	r3, r0
    8998:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    899a:	79fb      	ldrb	r3, [r7, #7]
    899c:	b21b      	sxth	r3, r3
    899e:	4618      	mov	r0, r3
    89a0:	4b02      	ldr	r3, [pc, #8]	; (89ac <_irq_set+0x1c>)
    89a2:	4798      	blx	r3
}
    89a4:	bf00      	nop
    89a6:	3708      	adds	r7, #8
    89a8:	46bd      	mov	sp, r7
    89aa:	bd80      	pop	{r7, pc}
    89ac:	00008955 	.word	0x00008955

000089b0 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    89b0:	b480      	push	{r7}
    89b2:	b083      	sub	sp, #12
    89b4:	af00      	add	r7, sp, #0
    89b6:	4603      	mov	r3, r0
    89b8:	6039      	str	r1, [r7, #0]
    89ba:	80fb      	strh	r3, [r7, #6]
    89bc:	4613      	mov	r3, r2
    89be:	717b      	strb	r3, [r7, #5]
	switch (power) {
    89c0:	797b      	ldrb	r3, [r7, #5]
    89c2:	3b04      	subs	r3, #4
    89c4:	2b05      	cmp	r3, #5
    89c6:	d86b      	bhi.n	8aa0 <_get_cycles_for_us_internal+0xf0>
    89c8:	a201      	add	r2, pc, #4	; (adr r2, 89d0 <_get_cycles_for_us_internal+0x20>)
    89ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    89ce:	bf00      	nop
    89d0:	00008a7f 	.word	0x00008a7f
    89d4:	00008a5f 	.word	0x00008a5f
    89d8:	00008a41 	.word	0x00008a41
    89dc:	00008a23 	.word	0x00008a23
    89e0:	00008a05 	.word	0x00008a05
    89e4:	000089e9 	.word	0x000089e9
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    89e8:	88fb      	ldrh	r3, [r7, #6]
    89ea:	683a      	ldr	r2, [r7, #0]
    89ec:	4935      	ldr	r1, [pc, #212]	; (8ac4 <_get_cycles_for_us_internal+0x114>)
    89ee:	fba1 1202 	umull	r1, r2, r1, r2
    89f2:	0c92      	lsrs	r2, r2, #18
    89f4:	fb02 f303 	mul.w	r3, r2, r3
    89f8:	3302      	adds	r3, #2
    89fa:	4a33      	ldr	r2, [pc, #204]	; (8ac8 <_get_cycles_for_us_internal+0x118>)
    89fc:	fba2 2303 	umull	r2, r3, r2, r3
    8a00:	085b      	lsrs	r3, r3, #1
    8a02:	e059      	b.n	8ab8 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    8a04:	88fb      	ldrh	r3, [r7, #6]
    8a06:	683a      	ldr	r2, [r7, #0]
    8a08:	0952      	lsrs	r2, r2, #5
    8a0a:	4930      	ldr	r1, [pc, #192]	; (8acc <_get_cycles_for_us_internal+0x11c>)
    8a0c:	fba1 1202 	umull	r1, r2, r1, r2
    8a10:	09d2      	lsrs	r2, r2, #7
    8a12:	fb02 f303 	mul.w	r3, r2, r3
    8a16:	331d      	adds	r3, #29
    8a18:	4a2d      	ldr	r2, [pc, #180]	; (8ad0 <_get_cycles_for_us_internal+0x120>)
    8a1a:	fba2 2303 	umull	r2, r3, r2, r3
    8a1e:	091b      	lsrs	r3, r3, #4
    8a20:	e04a      	b.n	8ab8 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    8a22:	88fb      	ldrh	r3, [r7, #6]
    8a24:	683a      	ldr	r2, [r7, #0]
    8a26:	492b      	ldr	r1, [pc, #172]	; (8ad4 <_get_cycles_for_us_internal+0x124>)
    8a28:	fba1 1202 	umull	r1, r2, r1, r2
    8a2c:	0b52      	lsrs	r2, r2, #13
    8a2e:	fb02 f303 	mul.w	r3, r2, r3
    8a32:	f203 132b 	addw	r3, r3, #299	; 0x12b
    8a36:	4a28      	ldr	r2, [pc, #160]	; (8ad8 <_get_cycles_for_us_internal+0x128>)
    8a38:	fba2 2303 	umull	r2, r3, r2, r3
    8a3c:	095b      	lsrs	r3, r3, #5
    8a3e:	e03b      	b.n	8ab8 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    8a40:	88fb      	ldrh	r3, [r7, #6]
    8a42:	683a      	ldr	r2, [r7, #0]
    8a44:	4925      	ldr	r1, [pc, #148]	; (8adc <_get_cycles_for_us_internal+0x12c>)
    8a46:	fba1 1202 	umull	r1, r2, r1, r2
    8a4a:	0992      	lsrs	r2, r2, #6
    8a4c:	fb02 f303 	mul.w	r3, r2, r3
    8a50:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8a54:	4a22      	ldr	r2, [pc, #136]	; (8ae0 <_get_cycles_for_us_internal+0x130>)
    8a56:	fba2 2303 	umull	r2, r3, r2, r3
    8a5a:	099b      	lsrs	r3, r3, #6
    8a5c:	e02c      	b.n	8ab8 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    8a5e:	88fb      	ldrh	r3, [r7, #6]
    8a60:	683a      	ldr	r2, [r7, #0]
    8a62:	4920      	ldr	r1, [pc, #128]	; (8ae4 <_get_cycles_for_us_internal+0x134>)
    8a64:	fba1 1202 	umull	r1, r2, r1, r2
    8a68:	0952      	lsrs	r2, r2, #5
    8a6a:	fb02 f303 	mul.w	r3, r2, r3
    8a6e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    8a72:	332f      	adds	r3, #47	; 0x2f
    8a74:	4a1c      	ldr	r2, [pc, #112]	; (8ae8 <_get_cycles_for_us_internal+0x138>)
    8a76:	fba2 2303 	umull	r2, r3, r2, r3
    8a7a:	0b5b      	lsrs	r3, r3, #13
    8a7c:	e01c      	b.n	8ab8 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    8a7e:	88fb      	ldrh	r3, [r7, #6]
    8a80:	683a      	ldr	r2, [r7, #0]
    8a82:	491a      	ldr	r1, [pc, #104]	; (8aec <_get_cycles_for_us_internal+0x13c>)
    8a84:	fba1 1202 	umull	r1, r2, r1, r2
    8a88:	08d2      	lsrs	r2, r2, #3
    8a8a:	fb02 f303 	mul.w	r3, r2, r3
    8a8e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    8a92:	f203 33df 	addw	r3, r3, #991	; 0x3df
    8a96:	4a16      	ldr	r2, [pc, #88]	; (8af0 <_get_cycles_for_us_internal+0x140>)
    8a98:	fba2 2303 	umull	r2, r3, r2, r3
    8a9c:	0c5b      	lsrs	r3, r3, #17
    8a9e:	e00b      	b.n	8ab8 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    8aa0:	88fb      	ldrh	r3, [r7, #6]
    8aa2:	683a      	ldr	r2, [r7, #0]
    8aa4:	fb02 f303 	mul.w	r3, r2, r3
    8aa8:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    8aac:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    8ab0:	4a10      	ldr	r2, [pc, #64]	; (8af4 <_get_cycles_for_us_internal+0x144>)
    8ab2:	fba2 2303 	umull	r2, r3, r2, r3
    8ab6:	0c9b      	lsrs	r3, r3, #18
	}
}
    8ab8:	4618      	mov	r0, r3
    8aba:	370c      	adds	r7, #12
    8abc:	46bd      	mov	sp, r7
    8abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ac2:	4770      	bx	lr
    8ac4:	431bde83 	.word	0x431bde83
    8ac8:	aaaaaaab 	.word	0xaaaaaaab
    8acc:	0a7c5ac5 	.word	0x0a7c5ac5
    8ad0:	88888889 	.word	0x88888889
    8ad4:	d1b71759 	.word	0xd1b71759
    8ad8:	1b4e81b5 	.word	0x1b4e81b5
    8adc:	10624dd3 	.word	0x10624dd3
    8ae0:	057619f1 	.word	0x057619f1
    8ae4:	51eb851f 	.word	0x51eb851f
    8ae8:	45e7b273 	.word	0x45e7b273
    8aec:	cccccccd 	.word	0xcccccccd
    8af0:	6fd91d85 	.word	0x6fd91d85
    8af4:	165e9f81 	.word	0x165e9f81

00008af8 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    8af8:	b580      	push	{r7, lr}
    8afa:	b082      	sub	sp, #8
    8afc:	af00      	add	r7, sp, #0
    8afe:	4603      	mov	r3, r0
    8b00:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    8b02:	88fb      	ldrh	r3, [r7, #6]
    8b04:	2209      	movs	r2, #9
    8b06:	4904      	ldr	r1, [pc, #16]	; (8b18 <_get_cycles_for_us+0x20>)
    8b08:	4618      	mov	r0, r3
    8b0a:	4b04      	ldr	r3, [pc, #16]	; (8b1c <_get_cycles_for_us+0x24>)
    8b0c:	4798      	blx	r3
    8b0e:	4603      	mov	r3, r0
}
    8b10:	4618      	mov	r0, r3
    8b12:	3708      	adds	r7, #8
    8b14:	46bd      	mov	sp, r7
    8b16:	bd80      	pop	{r7, pc}
    8b18:	07270e00 	.word	0x07270e00
    8b1c:	000089b1 	.word	0x000089b1

00008b20 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    8b20:	b480      	push	{r7}
    8b22:	b083      	sub	sp, #12
    8b24:	af00      	add	r7, sp, #0
    8b26:	4603      	mov	r3, r0
    8b28:	6039      	str	r1, [r7, #0]
    8b2a:	80fb      	strh	r3, [r7, #6]
    8b2c:	4613      	mov	r3, r2
    8b2e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    8b30:	797b      	ldrb	r3, [r7, #5]
    8b32:	3b04      	subs	r3, #4
    8b34:	2b05      	cmp	r3, #5
    8b36:	d870      	bhi.n	8c1a <_get_cycles_for_ms_internal+0xfa>
    8b38:	a201      	add	r2, pc, #4	; (adr r2, 8b40 <_get_cycles_for_ms_internal+0x20>)
    8b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8b3e:	bf00      	nop
    8b40:	00008bfd 	.word	0x00008bfd
    8b44:	00008be1 	.word	0x00008be1
    8b48:	00008bc5 	.word	0x00008bc5
    8b4c:	00008ba1 	.word	0x00008ba1
    8b50:	00008b7d 	.word	0x00008b7d
    8b54:	00008b59 	.word	0x00008b59
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    8b58:	88fb      	ldrh	r3, [r7, #6]
    8b5a:	683a      	ldr	r2, [r7, #0]
    8b5c:	4937      	ldr	r1, [pc, #220]	; (8c3c <_get_cycles_for_ms_internal+0x11c>)
    8b5e:	fba1 1202 	umull	r1, r2, r1, r2
    8b62:	0c92      	lsrs	r2, r2, #18
    8b64:	fb02 f303 	mul.w	r3, r2, r3
    8b68:	3302      	adds	r3, #2
    8b6a:	4a35      	ldr	r2, [pc, #212]	; (8c40 <_get_cycles_for_ms_internal+0x120>)
    8b6c:	fba2 2303 	umull	r2, r3, r2, r3
    8b70:	085b      	lsrs	r3, r3, #1
    8b72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8b76:	fb02 f303 	mul.w	r3, r2, r3
    8b7a:	e058      	b.n	8c2e <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    8b7c:	88fb      	ldrh	r3, [r7, #6]
    8b7e:	683a      	ldr	r2, [r7, #0]
    8b80:	0952      	lsrs	r2, r2, #5
    8b82:	4930      	ldr	r1, [pc, #192]	; (8c44 <_get_cycles_for_ms_internal+0x124>)
    8b84:	fba1 1202 	umull	r1, r2, r1, r2
    8b88:	09d2      	lsrs	r2, r2, #7
    8b8a:	fb02 f303 	mul.w	r3, r2, r3
    8b8e:	3302      	adds	r3, #2
    8b90:	4a2b      	ldr	r2, [pc, #172]	; (8c40 <_get_cycles_for_ms_internal+0x120>)
    8b92:	fba2 2303 	umull	r2, r3, r2, r3
    8b96:	085b      	lsrs	r3, r3, #1
    8b98:	2264      	movs	r2, #100	; 0x64
    8b9a:	fb02 f303 	mul.w	r3, r2, r3
    8b9e:	e046      	b.n	8c2e <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    8ba0:	88fb      	ldrh	r3, [r7, #6]
    8ba2:	683a      	ldr	r2, [r7, #0]
    8ba4:	4928      	ldr	r1, [pc, #160]	; (8c48 <_get_cycles_for_ms_internal+0x128>)
    8ba6:	fba1 1202 	umull	r1, r2, r1, r2
    8baa:	0b52      	lsrs	r2, r2, #13
    8bac:	fb02 f303 	mul.w	r3, r2, r3
    8bb0:	3302      	adds	r3, #2
    8bb2:	4a23      	ldr	r2, [pc, #140]	; (8c40 <_get_cycles_for_ms_internal+0x120>)
    8bb4:	fba2 2303 	umull	r2, r3, r2, r3
    8bb8:	085a      	lsrs	r2, r3, #1
    8bba:	4613      	mov	r3, r2
    8bbc:	009b      	lsls	r3, r3, #2
    8bbe:	4413      	add	r3, r2
    8bc0:	005b      	lsls	r3, r3, #1
    8bc2:	e034      	b.n	8c2e <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    8bc4:	88fb      	ldrh	r3, [r7, #6]
    8bc6:	683a      	ldr	r2, [r7, #0]
    8bc8:	4920      	ldr	r1, [pc, #128]	; (8c4c <_get_cycles_for_ms_internal+0x12c>)
    8bca:	fba1 1202 	umull	r1, r2, r1, r2
    8bce:	0992      	lsrs	r2, r2, #6
    8bd0:	fb02 f303 	mul.w	r3, r2, r3
    8bd4:	3302      	adds	r3, #2
    8bd6:	4a1a      	ldr	r2, [pc, #104]	; (8c40 <_get_cycles_for_ms_internal+0x120>)
    8bd8:	fba2 2303 	umull	r2, r3, r2, r3
    8bdc:	085b      	lsrs	r3, r3, #1
    8bde:	e026      	b.n	8c2e <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    8be0:	88fb      	ldrh	r3, [r7, #6]
    8be2:	683a      	ldr	r2, [r7, #0]
    8be4:	491a      	ldr	r1, [pc, #104]	; (8c50 <_get_cycles_for_ms_internal+0x130>)
    8be6:	fba1 1202 	umull	r1, r2, r1, r2
    8bea:	0952      	lsrs	r2, r2, #5
    8bec:	fb02 f303 	mul.w	r3, r2, r3
    8bf0:	331d      	adds	r3, #29
    8bf2:	4a18      	ldr	r2, [pc, #96]	; (8c54 <_get_cycles_for_ms_internal+0x134>)
    8bf4:	fba2 2303 	umull	r2, r3, r2, r3
    8bf8:	091b      	lsrs	r3, r3, #4
    8bfa:	e018      	b.n	8c2e <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    8bfc:	88fb      	ldrh	r3, [r7, #6]
    8bfe:	683a      	ldr	r2, [r7, #0]
    8c00:	4915      	ldr	r1, [pc, #84]	; (8c58 <_get_cycles_for_ms_internal+0x138>)
    8c02:	fba1 1202 	umull	r1, r2, r1, r2
    8c06:	08d2      	lsrs	r2, r2, #3
    8c08:	fb02 f303 	mul.w	r3, r2, r3
    8c0c:	f203 132b 	addw	r3, r3, #299	; 0x12b
    8c10:	4a12      	ldr	r2, [pc, #72]	; (8c5c <_get_cycles_for_ms_internal+0x13c>)
    8c12:	fba2 2303 	umull	r2, r3, r2, r3
    8c16:	095b      	lsrs	r3, r3, #5
    8c18:	e009      	b.n	8c2e <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    8c1a:	88fb      	ldrh	r3, [r7, #6]
    8c1c:	683a      	ldr	r2, [r7, #0]
    8c1e:	fb02 f303 	mul.w	r3, r2, r3
    8c22:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8c26:	4a0e      	ldr	r2, [pc, #56]	; (8c60 <_get_cycles_for_ms_internal+0x140>)
    8c28:	fba2 2303 	umull	r2, r3, r2, r3
    8c2c:	099b      	lsrs	r3, r3, #6
	}
}
    8c2e:	4618      	mov	r0, r3
    8c30:	370c      	adds	r7, #12
    8c32:	46bd      	mov	sp, r7
    8c34:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c38:	4770      	bx	lr
    8c3a:	bf00      	nop
    8c3c:	431bde83 	.word	0x431bde83
    8c40:	aaaaaaab 	.word	0xaaaaaaab
    8c44:	0a7c5ac5 	.word	0x0a7c5ac5
    8c48:	d1b71759 	.word	0xd1b71759
    8c4c:	10624dd3 	.word	0x10624dd3
    8c50:	51eb851f 	.word	0x51eb851f
    8c54:	88888889 	.word	0x88888889
    8c58:	cccccccd 	.word	0xcccccccd
    8c5c:	1b4e81b5 	.word	0x1b4e81b5
    8c60:	057619f1 	.word	0x057619f1

00008c64 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    8c64:	b580      	push	{r7, lr}
    8c66:	b082      	sub	sp, #8
    8c68:	af00      	add	r7, sp, #0
    8c6a:	4603      	mov	r3, r0
    8c6c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    8c6e:	88fb      	ldrh	r3, [r7, #6]
    8c70:	2209      	movs	r2, #9
    8c72:	4904      	ldr	r1, [pc, #16]	; (8c84 <_get_cycles_for_ms+0x20>)
    8c74:	4618      	mov	r0, r3
    8c76:	4b04      	ldr	r3, [pc, #16]	; (8c88 <_get_cycles_for_ms+0x24>)
    8c78:	4798      	blx	r3
    8c7a:	4603      	mov	r3, r0
}
    8c7c:	4618      	mov	r0, r3
    8c7e:	3708      	adds	r7, #8
    8c80:	46bd      	mov	sp, r7
    8c82:	bd80      	pop	{r7, pc}
    8c84:	07270e00 	.word	0x07270e00
    8c88:	00008b21 	.word	0x00008b21
    8c8c:	00000000 	.word	0x00000000

00008c90 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    8c90:	b480      	push	{r7}
    8c92:	b083      	sub	sp, #12
    8c94:	af00      	add	r7, sp, #0
    8c96:	6078      	str	r0, [r7, #4]
    8c98:	6039      	str	r1, [r7, #0]
    8c9a:	bf00      	nop
    8c9c:	f3af 8000 	nop.w

00008ca0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    8ca0:	3901      	subs	r1, #1
    8ca2:	d8fd      	bhi.n	8ca0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    8ca4:	bf00      	nop
    8ca6:	370c      	adds	r7, #12
    8ca8:	46bd      	mov	sp, r7
    8caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cae:	4770      	bx	lr

00008cb0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    8cb0:	b480      	push	{r7}
    8cb2:	b083      	sub	sp, #12
    8cb4:	af00      	add	r7, sp, #0
    8cb6:	6078      	str	r0, [r7, #4]
    8cb8:	460b      	mov	r3, r1
    8cba:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    8cbc:	687b      	ldr	r3, [r7, #4]
    8cbe:	881b      	ldrh	r3, [r3, #0]
    8cc0:	b29a      	uxth	r2, r3
    8cc2:	887b      	ldrh	r3, [r7, #2]
    8cc4:	021b      	lsls	r3, r3, #8
    8cc6:	b29b      	uxth	r3, r3
    8cc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    8ccc:	b29b      	uxth	r3, r3
    8cce:	4313      	orrs	r3, r2
    8cd0:	b29a      	uxth	r2, r3
    8cd2:	687b      	ldr	r3, [r7, #4]
    8cd4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    8cd6:	bf00      	nop
    8cd8:	370c      	adds	r7, #12
    8cda:	46bd      	mov	sp, r7
    8cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ce0:	4770      	bx	lr

00008ce2 <hri_port_set_EVCTRL_reg>:
{
    8ce2:	b480      	push	{r7}
    8ce4:	b085      	sub	sp, #20
    8ce6:	af00      	add	r7, sp, #0
    8ce8:	60f8      	str	r0, [r7, #12]
    8cea:	460b      	mov	r3, r1
    8cec:	607a      	str	r2, [r7, #4]
    8cee:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    8cf0:	7afb      	ldrb	r3, [r7, #11]
    8cf2:	7afa      	ldrb	r2, [r7, #11]
    8cf4:	68f9      	ldr	r1, [r7, #12]
    8cf6:	01d2      	lsls	r2, r2, #7
    8cf8:	440a      	add	r2, r1
    8cfa:	322c      	adds	r2, #44	; 0x2c
    8cfc:	6811      	ldr	r1, [r2, #0]
    8cfe:	687a      	ldr	r2, [r7, #4]
    8d00:	430a      	orrs	r2, r1
    8d02:	68f9      	ldr	r1, [r7, #12]
    8d04:	01db      	lsls	r3, r3, #7
    8d06:	440b      	add	r3, r1
    8d08:	332c      	adds	r3, #44	; 0x2c
    8d0a:	601a      	str	r2, [r3, #0]
}
    8d0c:	bf00      	nop
    8d0e:	3714      	adds	r7, #20
    8d10:	46bd      	mov	sp, r7
    8d12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d16:	4770      	bx	lr

00008d18 <_port_event_init>:

static inline void _port_event_init()
{
    8d18:	b580      	push	{r7, lr}
    8d1a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    8d1c:	2200      	movs	r2, #0
    8d1e:	2100      	movs	r1, #0
    8d20:	480a      	ldr	r0, [pc, #40]	; (8d4c <_port_event_init+0x34>)
    8d22:	4b0b      	ldr	r3, [pc, #44]	; (8d50 <_port_event_init+0x38>)
    8d24:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    8d26:	2200      	movs	r2, #0
    8d28:	2101      	movs	r1, #1
    8d2a:	4808      	ldr	r0, [pc, #32]	; (8d4c <_port_event_init+0x34>)
    8d2c:	4b08      	ldr	r3, [pc, #32]	; (8d50 <_port_event_init+0x38>)
    8d2e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    8d30:	f64e 72ef 	movw	r2, #61423	; 0xefef
    8d34:	2102      	movs	r1, #2
    8d36:	4805      	ldr	r0, [pc, #20]	; (8d4c <_port_event_init+0x34>)
    8d38:	4b05      	ldr	r3, [pc, #20]	; (8d50 <_port_event_init+0x38>)
    8d3a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    8d3c:	2200      	movs	r2, #0
    8d3e:	2103      	movs	r1, #3
    8d40:	4802      	ldr	r0, [pc, #8]	; (8d4c <_port_event_init+0x34>)
    8d42:	4b03      	ldr	r3, [pc, #12]	; (8d50 <_port_event_init+0x38>)
    8d44:	4798      	blx	r3
}
    8d46:	bf00      	nop
    8d48:	bd80      	pop	{r7, pc}
    8d4a:	bf00      	nop
    8d4c:	41008000 	.word	0x41008000
    8d50:	00008ce3 	.word	0x00008ce3

00008d54 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    8d54:	b580      	push	{r7, lr}
    8d56:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    8d58:	2104      	movs	r1, #4
    8d5a:	480b      	ldr	r0, [pc, #44]	; (8d88 <_init_chip+0x34>)
    8d5c:	4b0b      	ldr	r3, [pc, #44]	; (8d8c <_init_chip+0x38>)
    8d5e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    8d60:	4b0b      	ldr	r3, [pc, #44]	; (8d90 <_init_chip+0x3c>)
    8d62:	4798      	blx	r3
	_oscctrl_init_sources();
    8d64:	4b0b      	ldr	r3, [pc, #44]	; (8d94 <_init_chip+0x40>)
    8d66:	4798      	blx	r3
	_mclk_init();
    8d68:	4b0b      	ldr	r3, [pc, #44]	; (8d98 <_init_chip+0x44>)
    8d6a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    8d6c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    8d70:	4b0a      	ldr	r3, [pc, #40]	; (8d9c <_init_chip+0x48>)
    8d72:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    8d74:	4b0a      	ldr	r3, [pc, #40]	; (8da0 <_init_chip+0x4c>)
    8d76:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    8d78:	f640 30df 	movw	r0, #3039	; 0xbdf
    8d7c:	4b07      	ldr	r3, [pc, #28]	; (8d9c <_init_chip+0x48>)
    8d7e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    8d80:	4b08      	ldr	r3, [pc, #32]	; (8da4 <_init_chip+0x50>)
    8d82:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    8d84:	bf00      	nop
    8d86:	bd80      	pop	{r7, pc}
    8d88:	41004000 	.word	0x41004000
    8d8c:	00008cb1 	.word	0x00008cb1
    8d90:	00009a9d 	.word	0x00009a9d
    8d94:	00009f65 	.word	0x00009f65
    8d98:	000099bd 	.word	0x000099bd
    8d9c:	0000987d 	.word	0x0000987d
    8da0:	00009fa5 	.word	0x00009fa5
    8da4:	00008d19 	.word	0x00008d19

00008da8 <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    8da8:	b480      	push	{r7}
    8daa:	b083      	sub	sp, #12
    8dac:	af00      	add	r7, sp, #0
    8dae:	6078      	str	r0, [r7, #4]
    8db0:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    8db2:	687b      	ldr	r3, [r7, #4]
    8db4:	683a      	ldr	r2, [r7, #0]
    8db6:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8db8:	bf00      	nop
    8dba:	370c      	adds	r7, #12
    8dbc:	46bd      	mov	sp, r7
    8dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dc2:	4770      	bx	lr

00008dc4 <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    8dc4:	b480      	push	{r7}
    8dc6:	b085      	sub	sp, #20
    8dc8:	af00      	add	r7, sp, #0
    8dca:	6078      	str	r0, [r7, #4]
    8dcc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    8dce:	687b      	ldr	r3, [r7, #4]
    8dd0:	689b      	ldr	r3, [r3, #8]
    8dd2:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    8dd4:	68fb      	ldr	r3, [r7, #12]
    8dd6:	f003 0303 	and.w	r3, r3, #3
    8dda:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    8ddc:	683b      	ldr	r3, [r7, #0]
    8dde:	009b      	lsls	r3, r3, #2
    8de0:	68fa      	ldr	r2, [r7, #12]
    8de2:	4313      	orrs	r3, r2
    8de4:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    8de6:	687b      	ldr	r3, [r7, #4]
    8de8:	68fa      	ldr	r2, [r7, #12]
    8dea:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8dec:	bf00      	nop
    8dee:	3714      	adds	r7, #20
    8df0:	46bd      	mov	sp, r7
    8df2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8df6:	4770      	bx	lr

00008df8 <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    8df8:	b480      	push	{r7}
    8dfa:	b083      	sub	sp, #12
    8dfc:	af00      	add	r7, sp, #0
    8dfe:	6078      	str	r0, [r7, #4]
    8e00:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    8e02:	687b      	ldr	r3, [r7, #4]
    8e04:	683a      	ldr	r2, [r7, #0]
    8e06:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8e08:	bf00      	nop
    8e0a:	370c      	adds	r7, #12
    8e0c:	46bd      	mov	sp, r7
    8e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e12:	4770      	bx	lr

00008e14 <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    8e14:	b480      	push	{r7}
    8e16:	b083      	sub	sp, #12
    8e18:	af00      	add	r7, sp, #0
    8e1a:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    8e1c:	687b      	ldr	r3, [r7, #4]
    8e1e:	68db      	ldr	r3, [r3, #12]
}
    8e20:	4618      	mov	r0, r3
    8e22:	370c      	adds	r7, #12
    8e24:	46bd      	mov	sp, r7
    8e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e2a:	4770      	bx	lr

00008e2c <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    8e2c:	b480      	push	{r7}
    8e2e:	b083      	sub	sp, #12
    8e30:	af00      	add	r7, sp, #0
    8e32:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    8e34:	687b      	ldr	r3, [r7, #4]
    8e36:	785b      	ldrb	r3, [r3, #1]
    8e38:	b2db      	uxtb	r3, r3
    8e3a:	f003 0301 	and.w	r3, r3, #1
    8e3e:	2b00      	cmp	r3, #0
    8e40:	bf14      	ite	ne
    8e42:	2301      	movne	r3, #1
    8e44:	2300      	moveq	r3, #0
    8e46:	b2db      	uxtb	r3, r3
}
    8e48:	4618      	mov	r0, r3
    8e4a:	370c      	adds	r7, #12
    8e4c:	46bd      	mov	sp, r7
    8e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e52:	4770      	bx	lr

00008e54 <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    8e54:	b480      	push	{r7}
    8e56:	b083      	sub	sp, #12
    8e58:	af00      	add	r7, sp, #0
    8e5a:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    8e5c:	687b      	ldr	r3, [r7, #4]
    8e5e:	2201      	movs	r2, #1
    8e60:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8e62:	bf00      	nop
    8e64:	370c      	adds	r7, #12
    8e66:	46bd      	mov	sp, r7
    8e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e6c:	4770      	bx	lr

00008e6e <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    8e6e:	b480      	push	{r7}
    8e70:	b083      	sub	sp, #12
    8e72:	af00      	add	r7, sp, #0
    8e74:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    8e76:	687b      	ldr	r3, [r7, #4]
    8e78:	785b      	ldrb	r3, [r3, #1]
    8e7a:	b2db      	uxtb	r3, r3
    8e7c:	089b      	lsrs	r3, r3, #2
    8e7e:	f003 0301 	and.w	r3, r3, #1
    8e82:	2b00      	cmp	r3, #0
    8e84:	bf14      	ite	ne
    8e86:	2301      	movne	r3, #1
    8e88:	2300      	moveq	r3, #0
    8e8a:	b2db      	uxtb	r3, r3
}
    8e8c:	4618      	mov	r0, r3
    8e8e:	370c      	adds	r7, #12
    8e90:	46bd      	mov	sp, r7
    8e92:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e96:	4770      	bx	lr

00008e98 <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    8e98:	b480      	push	{r7}
    8e9a:	b083      	sub	sp, #12
    8e9c:	af00      	add	r7, sp, #0
    8e9e:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    8ea0:	687b      	ldr	r3, [r7, #4]
    8ea2:	2204      	movs	r2, #4
    8ea4:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8ea6:	bf00      	nop
    8ea8:	370c      	adds	r7, #12
    8eaa:	46bd      	mov	sp, r7
    8eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eb0:	4770      	bx	lr

00008eb2 <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    8eb2:	b480      	push	{r7}
    8eb4:	b083      	sub	sp, #12
    8eb6:	af00      	add	r7, sp, #0
    8eb8:	6078      	str	r0, [r7, #4]
    8eba:	460b      	mov	r3, r1
    8ebc:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    8ebe:	687b      	ldr	r3, [r7, #4]
    8ec0:	78fa      	ldrb	r2, [r7, #3]
    8ec2:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8ec4:	bf00      	nop
    8ec6:	370c      	adds	r7, #12
    8ec8:	46bd      	mov	sp, r7
    8eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ece:	4770      	bx	lr

00008ed0 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    8ed0:	b480      	push	{r7}
    8ed2:	b083      	sub	sp, #12
    8ed4:	af00      	add	r7, sp, #0
    8ed6:	6078      	str	r0, [r7, #4]
    8ed8:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    8eda:	687b      	ldr	r3, [r7, #4]
    8edc:	683a      	ldr	r2, [r7, #0]
    8ede:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    8ee0:	2300      	movs	r3, #0
}
    8ee2:	4618      	mov	r0, r3
    8ee4:	370c      	adds	r7, #12
    8ee6:	46bd      	mov	sp, r7
    8ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eec:	4770      	bx	lr

00008eee <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    8eee:	b480      	push	{r7}
    8ef0:	b083      	sub	sp, #12
    8ef2:	af00      	add	r7, sp, #0
    8ef4:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    8ef6:	2300      	movs	r3, #0
}
    8ef8:	4618      	mov	r0, r3
    8efa:	370c      	adds	r7, #12
    8efc:	46bd      	mov	sp, r7
    8efe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f02:	4770      	bx	lr

00008f04 <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    8f04:	b580      	push	{r7, lr}
    8f06:	b086      	sub	sp, #24
    8f08:	af00      	add	r7, sp, #0
    8f0a:	60f8      	str	r0, [r7, #12]
    8f0c:	60b9      	str	r1, [r7, #8]
    8f0e:	607a      	str	r2, [r7, #4]
    8f10:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    8f12:	2300      	movs	r3, #0
    8f14:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    8f16:	68bb      	ldr	r3, [r7, #8]
    8f18:	f003 0303 	and.w	r3, r3, #3
    8f1c:	2b00      	cmp	r3, #0
    8f1e:	d002      	beq.n	8f26 <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    8f20:	f06f 030c 	mvn.w	r3, #12
    8f24:	e05e      	b.n	8fe4 <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    8f26:	f107 0310 	add.w	r3, r7, #16
    8f2a:	4618      	mov	r0, r3
    8f2c:	4b2f      	ldr	r3, [pc, #188]	; (8fec <_crc_sync_crc32+0xe8>)
    8f2e:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    8f30:	68fb      	ldr	r3, [r7, #12]
    8f32:	681b      	ldr	r3, [r3, #0]
    8f34:	4618      	mov	r0, r3
    8f36:	4b2e      	ldr	r3, [pc, #184]	; (8ff0 <_crc_sync_crc32+0xec>)
    8f38:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    8f3a:	68fb      	ldr	r3, [r7, #12]
    8f3c:	681b      	ldr	r3, [r3, #0]
    8f3e:	68ba      	ldr	r2, [r7, #8]
    8f40:	4611      	mov	r1, r2
    8f42:	4618      	mov	r0, r3
    8f44:	4b2b      	ldr	r3, [pc, #172]	; (8ff4 <_crc_sync_crc32+0xf0>)
    8f46:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    8f48:	68fb      	ldr	r3, [r7, #12]
    8f4a:	681b      	ldr	r3, [r3, #0]
    8f4c:	6879      	ldr	r1, [r7, #4]
    8f4e:	4618      	mov	r0, r3
    8f50:	4b29      	ldr	r3, [pc, #164]	; (8ff8 <_crc_sync_crc32+0xf4>)
    8f52:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    8f54:	68fb      	ldr	r3, [r7, #12]
    8f56:	681a      	ldr	r2, [r3, #0]
    8f58:	683b      	ldr	r3, [r7, #0]
    8f5a:	681b      	ldr	r3, [r3, #0]
    8f5c:	4619      	mov	r1, r3
    8f5e:	4610      	mov	r0, r2
    8f60:	4b26      	ldr	r3, [pc, #152]	; (8ffc <_crc_sync_crc32+0xf8>)
    8f62:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    8f64:	68fb      	ldr	r3, [r7, #12]
    8f66:	681b      	ldr	r3, [r3, #0]
    8f68:	2104      	movs	r1, #4
    8f6a:	4618      	mov	r0, r3
    8f6c:	4b24      	ldr	r3, [pc, #144]	; (9000 <_crc_sync_crc32+0xfc>)
    8f6e:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    8f70:	bf00      	nop
    8f72:	68fb      	ldr	r3, [r7, #12]
    8f74:	681b      	ldr	r3, [r3, #0]
    8f76:	4618      	mov	r0, r3
    8f78:	4b22      	ldr	r3, [pc, #136]	; (9004 <_crc_sync_crc32+0x100>)
    8f7a:	4798      	blx	r3
    8f7c:	4603      	mov	r3, r0
    8f7e:	f083 0301 	eor.w	r3, r3, #1
    8f82:	b2db      	uxtb	r3, r3
    8f84:	2b00      	cmp	r3, #0
    8f86:	d1f4      	bne.n	8f72 <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    8f88:	68fb      	ldr	r3, [r7, #12]
    8f8a:	681b      	ldr	r3, [r3, #0]
    8f8c:	4618      	mov	r0, r3
    8f8e:	4b1e      	ldr	r3, [pc, #120]	; (9008 <_crc_sync_crc32+0x104>)
    8f90:	4798      	blx	r3
    8f92:	4603      	mov	r3, r0
    8f94:	2b00      	cmp	r3, #0
    8f96:	d00d      	beq.n	8fb4 <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    8f98:	68fb      	ldr	r3, [r7, #12]
    8f9a:	681b      	ldr	r3, [r3, #0]
    8f9c:	4618      	mov	r0, r3
    8f9e:	4b1b      	ldr	r3, [pc, #108]	; (900c <_crc_sync_crc32+0x108>)
    8fa0:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    8fa2:	68fb      	ldr	r3, [r7, #12]
    8fa4:	681b      	ldr	r3, [r3, #0]
    8fa6:	4618      	mov	r0, r3
    8fa8:	4b19      	ldr	r3, [pc, #100]	; (9010 <_crc_sync_crc32+0x10c>)
    8faa:	4798      	blx	r3
		rc = ERR_IO;
    8fac:	f06f 0305 	mvn.w	r3, #5
    8fb0:	617b      	str	r3, [r7, #20]
    8fb2:	e007      	b.n	8fc4 <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    8fb4:	68fb      	ldr	r3, [r7, #12]
    8fb6:	681b      	ldr	r3, [r3, #0]
    8fb8:	4618      	mov	r0, r3
    8fba:	4b16      	ldr	r3, [pc, #88]	; (9014 <_crc_sync_crc32+0x110>)
    8fbc:	4798      	blx	r3
    8fbe:	4602      	mov	r2, r0
    8fc0:	683b      	ldr	r3, [r7, #0]
    8fc2:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    8fc4:	68fb      	ldr	r3, [r7, #12]
    8fc6:	681b      	ldr	r3, [r3, #0]
    8fc8:	4618      	mov	r0, r3
    8fca:	4b11      	ldr	r3, [pc, #68]	; (9010 <_crc_sync_crc32+0x10c>)
    8fcc:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    8fce:	68fb      	ldr	r3, [r7, #12]
    8fd0:	681b      	ldr	r3, [r3, #0]
    8fd2:	4618      	mov	r0, r3
    8fd4:	4b10      	ldr	r3, [pc, #64]	; (9018 <_crc_sync_crc32+0x114>)
    8fd6:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    8fd8:	f107 0310 	add.w	r3, r7, #16
    8fdc:	4618      	mov	r0, r3
    8fde:	4b0f      	ldr	r3, [pc, #60]	; (901c <_crc_sync_crc32+0x118>)
    8fe0:	4798      	blx	r3

	return rc;
    8fe2:	697b      	ldr	r3, [r7, #20]
}
    8fe4:	4618      	mov	r0, r3
    8fe6:	3718      	adds	r7, #24
    8fe8:	46bd      	mov	sp, r7
    8fea:	bd80      	pop	{r7, pc}
    8fec:	00010d21 	.word	0x00010d21
    8ff0:	0000a345 	.word	0x0000a345
    8ff4:	00008da9 	.word	0x00008da9
    8ff8:	00008dc5 	.word	0x00008dc5
    8ffc:	00008df9 	.word	0x00008df9
    9000:	00008eb3 	.word	0x00008eb3
    9004:	00008e2d 	.word	0x00008e2d
    9008:	00008e6f 	.word	0x00008e6f
    900c:	00008e99 	.word	0x00008e99
    9010:	00008e55 	.word	0x00008e55
    9014:	00008e15 	.word	0x00008e15
    9018:	0000a2b9 	.word	0x0000a2b9
    901c:	00010d47 	.word	0x00010d47

00009020 <__NVIC_EnableIRQ>:
{
    9020:	b480      	push	{r7}
    9022:	b083      	sub	sp, #12
    9024:	af00      	add	r7, sp, #0
    9026:	4603      	mov	r3, r0
    9028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    902a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    902e:	2b00      	cmp	r3, #0
    9030:	db0b      	blt.n	904a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9032:	4909      	ldr	r1, [pc, #36]	; (9058 <__NVIC_EnableIRQ+0x38>)
    9034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9038:	095b      	lsrs	r3, r3, #5
    903a:	88fa      	ldrh	r2, [r7, #6]
    903c:	f002 021f 	and.w	r2, r2, #31
    9040:	2001      	movs	r0, #1
    9042:	fa00 f202 	lsl.w	r2, r0, r2
    9046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    904a:	bf00      	nop
    904c:	370c      	adds	r7, #12
    904e:	46bd      	mov	sp, r7
    9050:	f85d 7b04 	ldr.w	r7, [sp], #4
    9054:	4770      	bx	lr
    9056:	bf00      	nop
    9058:	e000e100 	.word	0xe000e100

0000905c <__NVIC_DisableIRQ>:
{
    905c:	b480      	push	{r7}
    905e:	b083      	sub	sp, #12
    9060:	af00      	add	r7, sp, #0
    9062:	4603      	mov	r3, r0
    9064:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    906a:	2b00      	cmp	r3, #0
    906c:	db10      	blt.n	9090 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    906e:	490b      	ldr	r1, [pc, #44]	; (909c <__NVIC_DisableIRQ+0x40>)
    9070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9074:	095b      	lsrs	r3, r3, #5
    9076:	88fa      	ldrh	r2, [r7, #6]
    9078:	f002 021f 	and.w	r2, r2, #31
    907c:	2001      	movs	r0, #1
    907e:	fa00 f202 	lsl.w	r2, r0, r2
    9082:	3320      	adds	r3, #32
    9084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    9088:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    908c:	f3bf 8f6f 	isb	sy
}
    9090:	bf00      	nop
    9092:	370c      	adds	r7, #12
    9094:	46bd      	mov	sp, r7
    9096:	f85d 7b04 	ldr.w	r7, [sp], #4
    909a:	4770      	bx	lr
    909c:	e000e100 	.word	0xe000e100

000090a0 <__NVIC_ClearPendingIRQ>:
{
    90a0:	b480      	push	{r7}
    90a2:	b083      	sub	sp, #12
    90a4:	af00      	add	r7, sp, #0
    90a6:	4603      	mov	r3, r0
    90a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    90aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    90ae:	2b00      	cmp	r3, #0
    90b0:	db0c      	blt.n	90cc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    90b2:	4909      	ldr	r1, [pc, #36]	; (90d8 <__NVIC_ClearPendingIRQ+0x38>)
    90b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    90b8:	095b      	lsrs	r3, r3, #5
    90ba:	88fa      	ldrh	r2, [r7, #6]
    90bc:	f002 021f 	and.w	r2, r2, #31
    90c0:	2001      	movs	r0, #1
    90c2:	fa00 f202 	lsl.w	r2, r0, r2
    90c6:	3360      	adds	r3, #96	; 0x60
    90c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    90cc:	bf00      	nop
    90ce:	370c      	adds	r7, #12
    90d0:	46bd      	mov	sp, r7
    90d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    90d6:	4770      	bx	lr
    90d8:	e000e100 	.word	0xe000e100

000090dc <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    90dc:	b480      	push	{r7}
    90de:	b083      	sub	sp, #12
    90e0:	af00      	add	r7, sp, #0
    90e2:	6078      	str	r0, [r7, #4]
    90e4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    90e6:	bf00      	nop
    90e8:	687b      	ldr	r3, [r7, #4]
    90ea:	685a      	ldr	r2, [r3, #4]
    90ec:	683b      	ldr	r3, [r7, #0]
    90ee:	4013      	ands	r3, r2
    90f0:	2b00      	cmp	r3, #0
    90f2:	d1f9      	bne.n	90e8 <hri_eic_wait_for_sync+0xc>
	};
}
    90f4:	bf00      	nop
    90f6:	370c      	adds	r7, #12
    90f8:	46bd      	mov	sp, r7
    90fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    90fe:	4770      	bx	lr

00009100 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    9100:	b480      	push	{r7}
    9102:	b083      	sub	sp, #12
    9104:	af00      	add	r7, sp, #0
    9106:	6078      	str	r0, [r7, #4]
    9108:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    910a:	687b      	ldr	r3, [r7, #4]
    910c:	685a      	ldr	r2, [r3, #4]
    910e:	683b      	ldr	r3, [r7, #0]
    9110:	4013      	ands	r3, r2
    9112:	2b00      	cmp	r3, #0
    9114:	bf14      	ite	ne
    9116:	2301      	movne	r3, #1
    9118:	2300      	moveq	r3, #0
    911a:	b2db      	uxtb	r3, r3
}
    911c:	4618      	mov	r0, r3
    911e:	370c      	adds	r7, #12
    9120:	46bd      	mov	sp, r7
    9122:	f85d 7b04 	ldr.w	r7, [sp], #4
    9126:	4770      	bx	lr

00009128 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    9128:	b480      	push	{r7}
    912a:	b083      	sub	sp, #12
    912c:	af00      	add	r7, sp, #0
    912e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    9130:	687b      	ldr	r3, [r7, #4]
    9132:	695b      	ldr	r3, [r3, #20]
}
    9134:	4618      	mov	r0, r3
    9136:	370c      	adds	r7, #12
    9138:	46bd      	mov	sp, r7
    913a:	f85d 7b04 	ldr.w	r7, [sp], #4
    913e:	4770      	bx	lr

00009140 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    9140:	b480      	push	{r7}
    9142:	b083      	sub	sp, #12
    9144:	af00      	add	r7, sp, #0
    9146:	6078      	str	r0, [r7, #4]
    9148:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    914a:	687b      	ldr	r3, [r7, #4]
    914c:	683a      	ldr	r2, [r7, #0]
    914e:	615a      	str	r2, [r3, #20]
}
    9150:	bf00      	nop
    9152:	370c      	adds	r7, #12
    9154:	46bd      	mov	sp, r7
    9156:	f85d 7b04 	ldr.w	r7, [sp], #4
    915a:	4770      	bx	lr

0000915c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    915c:	b480      	push	{r7}
    915e:	b083      	sub	sp, #12
    9160:	af00      	add	r7, sp, #0
    9162:	6078      	str	r0, [r7, #4]
    9164:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    9166:	687b      	ldr	r3, [r7, #4]
    9168:	683a      	ldr	r2, [r7, #0]
    916a:	611a      	str	r2, [r3, #16]
}
    916c:	bf00      	nop
    916e:	370c      	adds	r7, #12
    9170:	46bd      	mov	sp, r7
    9172:	f85d 7b04 	ldr.w	r7, [sp], #4
    9176:	4770      	bx	lr

00009178 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    9178:	b480      	push	{r7}
    917a:	b083      	sub	sp, #12
    917c:	af00      	add	r7, sp, #0
    917e:	6078      	str	r0, [r7, #4]
    9180:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    9182:	687b      	ldr	r3, [r7, #4]
    9184:	683a      	ldr	r2, [r7, #0]
    9186:	60da      	str	r2, [r3, #12]
}
    9188:	bf00      	nop
    918a:	370c      	adds	r7, #12
    918c:	46bd      	mov	sp, r7
    918e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9192:	4770      	bx	lr

00009194 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    9194:	b580      	push	{r7, lr}
    9196:	b082      	sub	sp, #8
    9198:	af00      	add	r7, sp, #0
    919a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    919c:	687b      	ldr	r3, [r7, #4]
    919e:	781b      	ldrb	r3, [r3, #0]
    91a0:	b2db      	uxtb	r3, r3
    91a2:	f043 0302 	orr.w	r3, r3, #2
    91a6:	b2da      	uxtb	r2, r3
    91a8:	687b      	ldr	r3, [r7, #4]
    91aa:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    91ac:	2103      	movs	r1, #3
    91ae:	6878      	ldr	r0, [r7, #4]
    91b0:	4b02      	ldr	r3, [pc, #8]	; (91bc <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    91b2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    91b4:	bf00      	nop
    91b6:	3708      	adds	r7, #8
    91b8:	46bd      	mov	sp, r7
    91ba:	bd80      	pop	{r7, pc}
    91bc:	000090dd 	.word	0x000090dd

000091c0 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    91c0:	b580      	push	{r7, lr}
    91c2:	b082      	sub	sp, #8
    91c4:	af00      	add	r7, sp, #0
    91c6:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    91c8:	687b      	ldr	r3, [r7, #4]
    91ca:	781b      	ldrb	r3, [r3, #0]
    91cc:	b2db      	uxtb	r3, r3
    91ce:	f023 0302 	bic.w	r3, r3, #2
    91d2:	b2da      	uxtb	r2, r3
    91d4:	687b      	ldr	r3, [r7, #4]
    91d6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    91d8:	2103      	movs	r1, #3
    91da:	6878      	ldr	r0, [r7, #4]
    91dc:	4b02      	ldr	r3, [pc, #8]	; (91e8 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    91de:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    91e0:	bf00      	nop
    91e2:	3708      	adds	r7, #8
    91e4:	46bd      	mov	sp, r7
    91e6:	bd80      	pop	{r7, pc}
    91e8:	000090dd 	.word	0x000090dd

000091ec <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    91ec:	b580      	push	{r7, lr}
    91ee:	b084      	sub	sp, #16
    91f0:	af00      	add	r7, sp, #0
    91f2:	6078      	str	r0, [r7, #4]
    91f4:	460b      	mov	r3, r1
    91f6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    91f8:	687b      	ldr	r3, [r7, #4]
    91fa:	781b      	ldrb	r3, [r3, #0]
    91fc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    91fe:	7bfb      	ldrb	r3, [r7, #15]
    9200:	f023 0310 	bic.w	r3, r3, #16
    9204:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    9206:	78fb      	ldrb	r3, [r7, #3]
    9208:	011b      	lsls	r3, r3, #4
    920a:	b25a      	sxtb	r2, r3
    920c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9210:	4313      	orrs	r3, r2
    9212:	b25b      	sxtb	r3, r3
    9214:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    9216:	687b      	ldr	r3, [r7, #4]
    9218:	7bfa      	ldrb	r2, [r7, #15]
    921a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    921c:	2103      	movs	r1, #3
    921e:	6878      	ldr	r0, [r7, #4]
    9220:	4b02      	ldr	r3, [pc, #8]	; (922c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    9222:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    9224:	bf00      	nop
    9226:	3710      	adds	r7, #16
    9228:	46bd      	mov	sp, r7
    922a:	bd80      	pop	{r7, pc}
    922c:	000090dd 	.word	0x000090dd

00009230 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    9230:	b580      	push	{r7, lr}
    9232:	b084      	sub	sp, #16
    9234:	af00      	add	r7, sp, #0
    9236:	6078      	str	r0, [r7, #4]
    9238:	460b      	mov	r3, r1
    923a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    923c:	2103      	movs	r1, #3
    923e:	6878      	ldr	r0, [r7, #4]
    9240:	4b06      	ldr	r3, [pc, #24]	; (925c <hri_eic_get_CTRLA_reg+0x2c>)
    9242:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    9244:	687b      	ldr	r3, [r7, #4]
    9246:	781b      	ldrb	r3, [r3, #0]
    9248:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    924a:	7bfa      	ldrb	r2, [r7, #15]
    924c:	78fb      	ldrb	r3, [r7, #3]
    924e:	4013      	ands	r3, r2
    9250:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9252:	7bfb      	ldrb	r3, [r7, #15]
}
    9254:	4618      	mov	r0, r3
    9256:	3710      	adds	r7, #16
    9258:	46bd      	mov	sp, r7
    925a:	bd80      	pop	{r7, pc}
    925c:	000090dd 	.word	0x000090dd

00009260 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    9260:	b580      	push	{r7, lr}
    9262:	b082      	sub	sp, #8
    9264:	af00      	add	r7, sp, #0
    9266:	6078      	str	r0, [r7, #4]
    9268:	460b      	mov	r3, r1
    926a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    926c:	687b      	ldr	r3, [r7, #4]
    926e:	78fa      	ldrb	r2, [r7, #3]
    9270:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    9272:	2103      	movs	r1, #3
    9274:	6878      	ldr	r0, [r7, #4]
    9276:	4b03      	ldr	r3, [pc, #12]	; (9284 <hri_eic_write_CTRLA_reg+0x24>)
    9278:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    927a:	bf00      	nop
    927c:	3708      	adds	r7, #8
    927e:	46bd      	mov	sp, r7
    9280:	bd80      	pop	{r7, pc}
    9282:	bf00      	nop
    9284:	000090dd 	.word	0x000090dd

00009288 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    9288:	b480      	push	{r7}
    928a:	b083      	sub	sp, #12
    928c:	af00      	add	r7, sp, #0
    928e:	6078      	str	r0, [r7, #4]
    9290:	460b      	mov	r3, r1
    9292:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    9294:	687b      	ldr	r3, [r7, #4]
    9296:	78fa      	ldrb	r2, [r7, #3]
    9298:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    929a:	bf00      	nop
    929c:	370c      	adds	r7, #12
    929e:	46bd      	mov	sp, r7
    92a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    92a4:	4770      	bx	lr

000092a6 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    92a6:	b480      	push	{r7}
    92a8:	b083      	sub	sp, #12
    92aa:	af00      	add	r7, sp, #0
    92ac:	6078      	str	r0, [r7, #4]
    92ae:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    92b0:	687b      	ldr	r3, [r7, #4]
    92b2:	683a      	ldr	r2, [r7, #0]
    92b4:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    92b6:	bf00      	nop
    92b8:	370c      	adds	r7, #12
    92ba:	46bd      	mov	sp, r7
    92bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    92c0:	4770      	bx	lr

000092c2 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    92c2:	b480      	push	{r7}
    92c4:	b083      	sub	sp, #12
    92c6:	af00      	add	r7, sp, #0
    92c8:	6078      	str	r0, [r7, #4]
    92ca:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    92cc:	687b      	ldr	r3, [r7, #4]
    92ce:	683a      	ldr	r2, [r7, #0]
    92d0:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    92d2:	bf00      	nop
    92d4:	370c      	adds	r7, #12
    92d6:	46bd      	mov	sp, r7
    92d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    92dc:	4770      	bx	lr

000092de <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    92de:	b480      	push	{r7}
    92e0:	b085      	sub	sp, #20
    92e2:	af00      	add	r7, sp, #0
    92e4:	60f8      	str	r0, [r7, #12]
    92e6:	460b      	mov	r3, r1
    92e8:	607a      	str	r2, [r7, #4]
    92ea:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    92ec:	7afb      	ldrb	r3, [r7, #11]
    92ee:	68fa      	ldr	r2, [r7, #12]
    92f0:	3306      	adds	r3, #6
    92f2:	009b      	lsls	r3, r3, #2
    92f4:	4413      	add	r3, r2
    92f6:	687a      	ldr	r2, [r7, #4]
    92f8:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    92fa:	bf00      	nop
    92fc:	3714      	adds	r7, #20
    92fe:	46bd      	mov	sp, r7
    9300:	f85d 7b04 	ldr.w	r7, [sp], #4
    9304:	4770      	bx	lr

00009306 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    9306:	b480      	push	{r7}
    9308:	b083      	sub	sp, #12
    930a:	af00      	add	r7, sp, #0
    930c:	6078      	str	r0, [r7, #4]
    930e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    9310:	687b      	ldr	r3, [r7, #4]
    9312:	683a      	ldr	r2, [r7, #0]
    9314:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    9316:	bf00      	nop
    9318:	370c      	adds	r7, #12
    931a:	46bd      	mov	sp, r7
    931c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9320:	4770      	bx	lr

00009322 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    9322:	b480      	push	{r7}
    9324:	b083      	sub	sp, #12
    9326:	af00      	add	r7, sp, #0
    9328:	6078      	str	r0, [r7, #4]
    932a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    932c:	687b      	ldr	r3, [r7, #4]
    932e:	683a      	ldr	r2, [r7, #0]
    9330:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    9332:	bf00      	nop
    9334:	370c      	adds	r7, #12
    9336:	46bd      	mov	sp, r7
    9338:	f85d 7b04 	ldr.w	r7, [sp], #4
    933c:	4770      	bx	lr
	...

00009340 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    9340:	b580      	push	{r7, lr}
    9342:	b082      	sub	sp, #8
    9344:	af00      	add	r7, sp, #0
    9346:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    9348:	2101      	movs	r1, #1
    934a:	484b      	ldr	r0, [pc, #300]	; (9478 <_ext_irq_init+0x138>)
    934c:	4b4b      	ldr	r3, [pc, #300]	; (947c <_ext_irq_init+0x13c>)
    934e:	4798      	blx	r3
    9350:	4603      	mov	r3, r0
    9352:	f083 0301 	eor.w	r3, r3, #1
    9356:	b2db      	uxtb	r3, r3
    9358:	2b00      	cmp	r3, #0
    935a:	d011      	beq.n	9380 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    935c:	2102      	movs	r1, #2
    935e:	4846      	ldr	r0, [pc, #280]	; (9478 <_ext_irq_init+0x138>)
    9360:	4b47      	ldr	r3, [pc, #284]	; (9480 <_ext_irq_init+0x140>)
    9362:	4798      	blx	r3
    9364:	4603      	mov	r3, r0
    9366:	2b00      	cmp	r3, #0
    9368:	d006      	beq.n	9378 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    936a:	4843      	ldr	r0, [pc, #268]	; (9478 <_ext_irq_init+0x138>)
    936c:	4b45      	ldr	r3, [pc, #276]	; (9484 <_ext_irq_init+0x144>)
    936e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    9370:	2102      	movs	r1, #2
    9372:	4841      	ldr	r0, [pc, #260]	; (9478 <_ext_irq_init+0x138>)
    9374:	4b44      	ldr	r3, [pc, #272]	; (9488 <_ext_irq_init+0x148>)
    9376:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    9378:	2101      	movs	r1, #1
    937a:	483f      	ldr	r0, [pc, #252]	; (9478 <_ext_irq_init+0x138>)
    937c:	4b43      	ldr	r3, [pc, #268]	; (948c <_ext_irq_init+0x14c>)
    937e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    9380:	2101      	movs	r1, #1
    9382:	483d      	ldr	r0, [pc, #244]	; (9478 <_ext_irq_init+0x138>)
    9384:	4b40      	ldr	r3, [pc, #256]	; (9488 <_ext_irq_init+0x148>)
    9386:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    9388:	2100      	movs	r1, #0
    938a:	483b      	ldr	r0, [pc, #236]	; (9478 <_ext_irq_init+0x138>)
    938c:	4b40      	ldr	r3, [pc, #256]	; (9490 <_ext_irq_init+0x150>)
    938e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    9390:	2100      	movs	r1, #0
    9392:	4839      	ldr	r0, [pc, #228]	; (9478 <_ext_irq_init+0x138>)
    9394:	4b3f      	ldr	r3, [pc, #252]	; (9494 <_ext_irq_init+0x154>)
    9396:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    9398:	2100      	movs	r1, #0
    939a:	4837      	ldr	r0, [pc, #220]	; (9478 <_ext_irq_init+0x138>)
    939c:	4b3e      	ldr	r3, [pc, #248]	; (9498 <_ext_irq_init+0x158>)
    939e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    93a0:	f240 31b9 	movw	r1, #953	; 0x3b9
    93a4:	4834      	ldr	r0, [pc, #208]	; (9478 <_ext_irq_init+0x138>)
    93a6:	4b3d      	ldr	r3, [pc, #244]	; (949c <_ext_irq_init+0x15c>)
    93a8:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    93aa:	f240 3139 	movw	r1, #825	; 0x339
    93ae:	4832      	ldr	r0, [pc, #200]	; (9478 <_ext_irq_init+0x138>)
    93b0:	4b3b      	ldr	r3, [pc, #236]	; (94a0 <_ext_irq_init+0x160>)
    93b2:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    93b4:	2100      	movs	r1, #0
    93b6:	4830      	ldr	r0, [pc, #192]	; (9478 <_ext_irq_init+0x138>)
    93b8:	4b3a      	ldr	r3, [pc, #232]	; (94a4 <_ext_irq_init+0x164>)
    93ba:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    93bc:	4a3a      	ldr	r2, [pc, #232]	; (94a8 <_ext_irq_init+0x168>)
    93be:	2100      	movs	r1, #0
    93c0:	482d      	ldr	r0, [pc, #180]	; (9478 <_ext_irq_init+0x138>)
    93c2:	4b3a      	ldr	r3, [pc, #232]	; (94ac <_ext_irq_init+0x16c>)
    93c4:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    93c6:	2211      	movs	r2, #17
    93c8:	2101      	movs	r1, #1
    93ca:	482b      	ldr	r0, [pc, #172]	; (9478 <_ext_irq_init+0x138>)
    93cc:	4b37      	ldr	r3, [pc, #220]	; (94ac <_ext_irq_init+0x16c>)
    93ce:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    93d0:	4829      	ldr	r0, [pc, #164]	; (9478 <_ext_irq_init+0x138>)
    93d2:	4b37      	ldr	r3, [pc, #220]	; (94b0 <_ext_irq_init+0x170>)
    93d4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    93d6:	200c      	movs	r0, #12
    93d8:	4b36      	ldr	r3, [pc, #216]	; (94b4 <_ext_irq_init+0x174>)
    93da:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    93dc:	200c      	movs	r0, #12
    93de:	4b36      	ldr	r3, [pc, #216]	; (94b8 <_ext_irq_init+0x178>)
    93e0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    93e2:	200c      	movs	r0, #12
    93e4:	4b35      	ldr	r3, [pc, #212]	; (94bc <_ext_irq_init+0x17c>)
    93e6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    93e8:	200f      	movs	r0, #15
    93ea:	4b32      	ldr	r3, [pc, #200]	; (94b4 <_ext_irq_init+0x174>)
    93ec:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    93ee:	200f      	movs	r0, #15
    93f0:	4b31      	ldr	r3, [pc, #196]	; (94b8 <_ext_irq_init+0x178>)
    93f2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    93f4:	200f      	movs	r0, #15
    93f6:	4b31      	ldr	r3, [pc, #196]	; (94bc <_ext_irq_init+0x17c>)
    93f8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    93fa:	2010      	movs	r0, #16
    93fc:	4b2d      	ldr	r3, [pc, #180]	; (94b4 <_ext_irq_init+0x174>)
    93fe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    9400:	2010      	movs	r0, #16
    9402:	4b2d      	ldr	r3, [pc, #180]	; (94b8 <_ext_irq_init+0x178>)
    9404:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    9406:	2010      	movs	r0, #16
    9408:	4b2c      	ldr	r3, [pc, #176]	; (94bc <_ext_irq_init+0x17c>)
    940a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    940c:	2011      	movs	r0, #17
    940e:	4b29      	ldr	r3, [pc, #164]	; (94b4 <_ext_irq_init+0x174>)
    9410:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    9412:	2011      	movs	r0, #17
    9414:	4b28      	ldr	r3, [pc, #160]	; (94b8 <_ext_irq_init+0x178>)
    9416:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    9418:	2011      	movs	r0, #17
    941a:	4b28      	ldr	r3, [pc, #160]	; (94bc <_ext_irq_init+0x17c>)
    941c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    941e:	2012      	movs	r0, #18
    9420:	4b24      	ldr	r3, [pc, #144]	; (94b4 <_ext_irq_init+0x174>)
    9422:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    9424:	2012      	movs	r0, #18
    9426:	4b24      	ldr	r3, [pc, #144]	; (94b8 <_ext_irq_init+0x178>)
    9428:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    942a:	2012      	movs	r0, #18
    942c:	4b23      	ldr	r3, [pc, #140]	; (94bc <_ext_irq_init+0x17c>)
    942e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    9430:	2013      	movs	r0, #19
    9432:	4b20      	ldr	r3, [pc, #128]	; (94b4 <_ext_irq_init+0x174>)
    9434:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    9436:	2013      	movs	r0, #19
    9438:	4b1f      	ldr	r3, [pc, #124]	; (94b8 <_ext_irq_init+0x178>)
    943a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    943c:	2013      	movs	r0, #19
    943e:	4b1f      	ldr	r3, [pc, #124]	; (94bc <_ext_irq_init+0x17c>)
    9440:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    9442:	2014      	movs	r0, #20
    9444:	4b1b      	ldr	r3, [pc, #108]	; (94b4 <_ext_irq_init+0x174>)
    9446:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    9448:	2014      	movs	r0, #20
    944a:	4b1b      	ldr	r3, [pc, #108]	; (94b8 <_ext_irq_init+0x178>)
    944c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    944e:	2014      	movs	r0, #20
    9450:	4b1a      	ldr	r3, [pc, #104]	; (94bc <_ext_irq_init+0x17c>)
    9452:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    9454:	2015      	movs	r0, #21
    9456:	4b17      	ldr	r3, [pc, #92]	; (94b4 <_ext_irq_init+0x174>)
    9458:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    945a:	2015      	movs	r0, #21
    945c:	4b16      	ldr	r3, [pc, #88]	; (94b8 <_ext_irq_init+0x178>)
    945e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    9460:	2015      	movs	r0, #21
    9462:	4b16      	ldr	r3, [pc, #88]	; (94bc <_ext_irq_init+0x17c>)
    9464:	4798      	blx	r3

	callback = cb;
    9466:	4a16      	ldr	r2, [pc, #88]	; (94c0 <_ext_irq_init+0x180>)
    9468:	687b      	ldr	r3, [r7, #4]
    946a:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    946c:	2300      	movs	r3, #0
}
    946e:	4618      	mov	r0, r3
    9470:	3708      	adds	r7, #8
    9472:	46bd      	mov	sp, r7
    9474:	bd80      	pop	{r7, pc}
    9476:	bf00      	nop
    9478:	40002800 	.word	0x40002800
    947c:	00009101 	.word	0x00009101
    9480:	00009231 	.word	0x00009231
    9484:	000091c1 	.word	0x000091c1
    9488:	000090dd 	.word	0x000090dd
    948c:	00009261 	.word	0x00009261
    9490:	000091ed 	.word	0x000091ed
    9494:	00009289 	.word	0x00009289
    9498:	000092a7 	.word	0x000092a7
    949c:	000092c3 	.word	0x000092c3
    94a0:	00009307 	.word	0x00009307
    94a4:	00009323 	.word	0x00009323
    94a8:	90999003 	.word	0x90999003
    94ac:	000092df 	.word	0x000092df
    94b0:	00009195 	.word	0x00009195
    94b4:	0000905d 	.word	0x0000905d
    94b8:	000090a1 	.word	0x000090a1
    94bc:	00009021 	.word	0x00009021
    94c0:	200089bc 	.word	0x200089bc

000094c4 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    94c4:	b580      	push	{r7, lr}
    94c6:	b084      	sub	sp, #16
    94c8:	af00      	add	r7, sp, #0
    94ca:	6078      	str	r0, [r7, #4]
    94cc:	460b      	mov	r3, r1
    94ce:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    94d0:	23ff      	movs	r3, #255	; 0xff
    94d2:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    94d4:	2300      	movs	r3, #0
    94d6:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    94d8:	e010      	b.n	94fc <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    94da:	7bbb      	ldrb	r3, [r7, #14]
    94dc:	4a1c      	ldr	r2, [pc, #112]	; (9550 <_ext_irq_enable+0x8c>)
    94de:	00db      	lsls	r3, r3, #3
    94e0:	4413      	add	r3, r2
    94e2:	685a      	ldr	r2, [r3, #4]
    94e4:	687b      	ldr	r3, [r7, #4]
    94e6:	429a      	cmp	r2, r3
    94e8:	d105      	bne.n	94f6 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    94ea:	7bbb      	ldrb	r3, [r7, #14]
    94ec:	4a18      	ldr	r2, [pc, #96]	; (9550 <_ext_irq_enable+0x8c>)
    94ee:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    94f2:	73fb      	strb	r3, [r7, #15]
			break;
    94f4:	e005      	b.n	9502 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    94f6:	7bbb      	ldrb	r3, [r7, #14]
    94f8:	3301      	adds	r3, #1
    94fa:	73bb      	strb	r3, [r7, #14]
    94fc:	7bbb      	ldrb	r3, [r7, #14]
    94fe:	2b07      	cmp	r3, #7
    9500:	d9eb      	bls.n	94da <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    9502:	7bfb      	ldrb	r3, [r7, #15]
    9504:	2bff      	cmp	r3, #255	; 0xff
    9506:	d102      	bne.n	950e <_ext_irq_enable+0x4a>
		return -1;
    9508:	f04f 33ff 	mov.w	r3, #4294967295
    950c:	e01c      	b.n	9548 <_ext_irq_enable+0x84>
	}

	if (enable) {
    950e:	78fb      	ldrb	r3, [r7, #3]
    9510:	2b00      	cmp	r3, #0
    9512:	d008      	beq.n	9526 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    9514:	7bfb      	ldrb	r3, [r7, #15]
    9516:	2201      	movs	r2, #1
    9518:	fa02 f303 	lsl.w	r3, r2, r3
    951c:	4619      	mov	r1, r3
    951e:	480d      	ldr	r0, [pc, #52]	; (9554 <_ext_irq_enable+0x90>)
    9520:	4b0d      	ldr	r3, [pc, #52]	; (9558 <_ext_irq_enable+0x94>)
    9522:	4798      	blx	r3
    9524:	e00f      	b.n	9546 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    9526:	7bfb      	ldrb	r3, [r7, #15]
    9528:	2201      	movs	r2, #1
    952a:	fa02 f303 	lsl.w	r3, r2, r3
    952e:	4619      	mov	r1, r3
    9530:	4808      	ldr	r0, [pc, #32]	; (9554 <_ext_irq_enable+0x90>)
    9532:	4b0a      	ldr	r3, [pc, #40]	; (955c <_ext_irq_enable+0x98>)
    9534:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    9536:	7bfb      	ldrb	r3, [r7, #15]
    9538:	2201      	movs	r2, #1
    953a:	fa02 f303 	lsl.w	r3, r2, r3
    953e:	4619      	mov	r1, r3
    9540:	4804      	ldr	r0, [pc, #16]	; (9554 <_ext_irq_enable+0x90>)
    9542:	4b07      	ldr	r3, [pc, #28]	; (9560 <_ext_irq_enable+0x9c>)
    9544:	4798      	blx	r3
	}

	return ERR_NONE;
    9546:	2300      	movs	r3, #0
}
    9548:	4618      	mov	r0, r3
    954a:	3710      	adds	r7, #16
    954c:	46bd      	mov	sp, r7
    954e:	bd80      	pop	{r7, pc}
    9550:	00020b1c 	.word	0x00020b1c
    9554:	40002800 	.word	0x40002800
    9558:	0000915d 	.word	0x0000915d
    955c:	00009179 	.word	0x00009179
    9560:	00009141 	.word	0x00009141

00009564 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    9564:	b580      	push	{r7, lr}
    9566:	b084      	sub	sp, #16
    9568:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    956a:	4841      	ldr	r0, [pc, #260]	; (9670 <_ext_irq_handler+0x10c>)
    956c:	4b41      	ldr	r3, [pc, #260]	; (9674 <_ext_irq_handler+0x110>)
    956e:	4798      	blx	r3
    9570:	4603      	mov	r3, r0
    9572:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    9574:	f04f 33ff 	mov.w	r3, #4294967295
    9578:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    957a:	683b      	ldr	r3, [r7, #0]
    957c:	4619      	mov	r1, r3
    957e:	483c      	ldr	r0, [pc, #240]	; (9670 <_ext_irq_handler+0x10c>)
    9580:	4b3d      	ldr	r3, [pc, #244]	; (9678 <_ext_irq_handler+0x114>)
    9582:	4798      	blx	r3

	ASSERT(callback);
    9584:	4b3d      	ldr	r3, [pc, #244]	; (967c <_ext_irq_handler+0x118>)
    9586:	681b      	ldr	r3, [r3, #0]
    9588:	2b00      	cmp	r3, #0
    958a:	bf14      	ite	ne
    958c:	2301      	movne	r3, #1
    958e:	2300      	moveq	r3, #0
    9590:	b2db      	uxtb	r3, r3
    9592:	f44f 7282 	mov.w	r2, #260	; 0x104
    9596:	493a      	ldr	r1, [pc, #232]	; (9680 <_ext_irq_handler+0x11c>)
    9598:	4618      	mov	r0, r3
    959a:	4b3a      	ldr	r3, [pc, #232]	; (9684 <_ext_irq_handler+0x120>)
    959c:	4798      	blx	r3

	while (flags) {
    959e:	e060      	b.n	9662 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    95a0:	683b      	ldr	r3, [r7, #0]
    95a2:	4618      	mov	r0, r3
    95a4:	4b38      	ldr	r3, [pc, #224]	; (9688 <_ext_irq_handler+0x124>)
    95a6:	4798      	blx	r3
    95a8:	4603      	mov	r3, r0
    95aa:	b2db      	uxtb	r3, r3
    95ac:	3b01      	subs	r3, #1
    95ae:	b2db      	uxtb	r3, r3
    95b0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    95b2:	e047      	b.n	9644 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    95b4:	2300      	movs	r3, #0
    95b6:	71fb      	strb	r3, [r7, #7]
    95b8:	2308      	movs	r3, #8
    95ba:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    95bc:	e024      	b.n	9608 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    95be:	79ba      	ldrb	r2, [r7, #6]
    95c0:	79fb      	ldrb	r3, [r7, #7]
    95c2:	4413      	add	r3, r2
    95c4:	105b      	asrs	r3, r3, #1
    95c6:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    95c8:	797b      	ldrb	r3, [r7, #5]
    95ca:	4a30      	ldr	r2, [pc, #192]	; (968c <_ext_irq_handler+0x128>)
    95cc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    95d0:	461a      	mov	r2, r3
    95d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    95d6:	429a      	cmp	r2, r3
    95d8:	d106      	bne.n	95e8 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    95da:	797b      	ldrb	r3, [r7, #5]
    95dc:	4a2b      	ldr	r2, [pc, #172]	; (968c <_ext_irq_handler+0x128>)
    95de:	00db      	lsls	r3, r3, #3
    95e0:	4413      	add	r3, r2
    95e2:	685b      	ldr	r3, [r3, #4]
    95e4:	60bb      	str	r3, [r7, #8]
					break;
    95e6:	e013      	b.n	9610 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    95e8:	797b      	ldrb	r3, [r7, #5]
    95ea:	4a28      	ldr	r2, [pc, #160]	; (968c <_ext_irq_handler+0x128>)
    95ec:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    95f0:	461a      	mov	r2, r3
    95f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    95f6:	429a      	cmp	r2, r3
    95f8:	da03      	bge.n	9602 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    95fa:	797b      	ldrb	r3, [r7, #5]
    95fc:	3301      	adds	r3, #1
    95fe:	71fb      	strb	r3, [r7, #7]
    9600:	e002      	b.n	9608 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    9602:	797b      	ldrb	r3, [r7, #5]
    9604:	3b01      	subs	r3, #1
    9606:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    9608:	79ba      	ldrb	r2, [r7, #6]
    960a:	79fb      	ldrb	r3, [r7, #7]
    960c:	429a      	cmp	r2, r3
    960e:	d2d6      	bcs.n	95be <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    9610:	68bb      	ldr	r3, [r7, #8]
    9612:	f1b3 3fff 	cmp.w	r3, #4294967295
    9616:	d003      	beq.n	9620 <_ext_irq_handler+0xbc>
				callback(pin);
    9618:	4b18      	ldr	r3, [pc, #96]	; (967c <_ext_irq_handler+0x118>)
    961a:	681b      	ldr	r3, [r3, #0]
    961c:	68b8      	ldr	r0, [r7, #8]
    961e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    9620:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9624:	2201      	movs	r2, #1
    9626:	fa02 f303 	lsl.w	r3, r2, r3
    962a:	43da      	mvns	r2, r3
    962c:	683b      	ldr	r3, [r7, #0]
    962e:	4013      	ands	r3, r2
    9630:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    9632:	683b      	ldr	r3, [r7, #0]
    9634:	4618      	mov	r0, r3
    9636:	4b14      	ldr	r3, [pc, #80]	; (9688 <_ext_irq_handler+0x124>)
    9638:	4798      	blx	r3
    963a:	4603      	mov	r3, r0
    963c:	b2db      	uxtb	r3, r3
    963e:	3b01      	subs	r3, #1
    9640:	b2db      	uxtb	r3, r3
    9642:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    9644:	f997 300f 	ldrsb.w	r3, [r7, #15]
    9648:	f1b3 3fff 	cmp.w	r3, #4294967295
    964c:	d1b2      	bne.n	95b4 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    964e:	4808      	ldr	r0, [pc, #32]	; (9670 <_ext_irq_handler+0x10c>)
    9650:	4b08      	ldr	r3, [pc, #32]	; (9674 <_ext_irq_handler+0x110>)
    9652:	4798      	blx	r3
    9654:	4603      	mov	r3, r0
    9656:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    9658:	683b      	ldr	r3, [r7, #0]
    965a:	4619      	mov	r1, r3
    965c:	4804      	ldr	r0, [pc, #16]	; (9670 <_ext_irq_handler+0x10c>)
    965e:	4b06      	ldr	r3, [pc, #24]	; (9678 <_ext_irq_handler+0x114>)
    9660:	4798      	blx	r3
	while (flags) {
    9662:	683b      	ldr	r3, [r7, #0]
    9664:	2b00      	cmp	r3, #0
    9666:	d19b      	bne.n	95a0 <_ext_irq_handler+0x3c>
	}
}
    9668:	bf00      	nop
    966a:	3710      	adds	r7, #16
    966c:	46bd      	mov	sp, r7
    966e:	bd80      	pop	{r7, pc}
    9670:	40002800 	.word	0x40002800
    9674:	00009129 	.word	0x00009129
    9678:	00009141 	.word	0x00009141
    967c:	200089bc 	.word	0x200089bc
    9680:	00020b5c 	.word	0x00020b5c
    9684:	00008145 	.word	0x00008145
    9688:	0001c1d1 	.word	0x0001c1d1
    968c:	00020b1c 	.word	0x00020b1c

00009690 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    9690:	b580      	push	{r7, lr}
    9692:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9694:	4b01      	ldr	r3, [pc, #4]	; (969c <EIC_0_Handler+0xc>)
    9696:	4798      	blx	r3
} /**
    9698:	bf00      	nop
    969a:	bd80      	pop	{r7, pc}
    969c:	00009565 	.word	0x00009565

000096a0 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    96a0:	b580      	push	{r7, lr}
    96a2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    96a4:	4b01      	ldr	r3, [pc, #4]	; (96ac <EIC_3_Handler+0xc>)
    96a6:	4798      	blx	r3
} /**
    96a8:	bf00      	nop
    96aa:	bd80      	pop	{r7, pc}
    96ac:	00009565 	.word	0x00009565

000096b0 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    96b0:	b580      	push	{r7, lr}
    96b2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    96b4:	4b01      	ldr	r3, [pc, #4]	; (96bc <EIC_4_Handler+0xc>)
    96b6:	4798      	blx	r3
} /**
    96b8:	bf00      	nop
    96ba:	bd80      	pop	{r7, pc}
    96bc:	00009565 	.word	0x00009565

000096c0 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    96c0:	b580      	push	{r7, lr}
    96c2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    96c4:	4b01      	ldr	r3, [pc, #4]	; (96cc <EIC_5_Handler+0xc>)
    96c6:	4798      	blx	r3
} /**
    96c8:	bf00      	nop
    96ca:	bd80      	pop	{r7, pc}
    96cc:	00009565 	.word	0x00009565

000096d0 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    96d0:	b580      	push	{r7, lr}
    96d2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    96d4:	4b01      	ldr	r3, [pc, #4]	; (96dc <EIC_6_Handler+0xc>)
    96d6:	4798      	blx	r3
} /**
    96d8:	bf00      	nop
    96da:	bd80      	pop	{r7, pc}
    96dc:	00009565 	.word	0x00009565

000096e0 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    96e0:	b580      	push	{r7, lr}
    96e2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    96e4:	4b01      	ldr	r3, [pc, #4]	; (96ec <EIC_7_Handler+0xc>)
    96e6:	4798      	blx	r3
} /**
    96e8:	bf00      	nop
    96ea:	bd80      	pop	{r7, pc}
    96ec:	00009565 	.word	0x00009565

000096f0 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    96f0:	b580      	push	{r7, lr}
    96f2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    96f4:	4b01      	ldr	r3, [pc, #4]	; (96fc <EIC_8_Handler+0xc>)
    96f6:	4798      	blx	r3
} /**
    96f8:	bf00      	nop
    96fa:	bd80      	pop	{r7, pc}
    96fc:	00009565 	.word	0x00009565

00009700 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    9700:	b580      	push	{r7, lr}
    9702:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    9704:	4b01      	ldr	r3, [pc, #4]	; (970c <EIC_9_Handler+0xc>)
    9706:	4798      	blx	r3
}
    9708:	bf00      	nop
    970a:	bd80      	pop	{r7, pc}
    970c:	00009565 	.word	0x00009565

00009710 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    9710:	b480      	push	{r7}
    9712:	b085      	sub	sp, #20
    9714:	af00      	add	r7, sp, #0
    9716:	60f8      	str	r0, [r7, #12]
    9718:	460b      	mov	r3, r1
    971a:	607a      	str	r2, [r7, #4]
    971c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    971e:	7afa      	ldrb	r2, [r7, #11]
    9720:	68fb      	ldr	r3, [r7, #12]
    9722:	3248      	adds	r2, #72	; 0x48
    9724:	6879      	ldr	r1, [r7, #4]
    9726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    972a:	bf00      	nop
    972c:	3714      	adds	r7, #20
    972e:	46bd      	mov	sp, r7
    9730:	f85d 7b04 	ldr.w	r7, [sp], #4
    9734:	4770      	bx	lr

00009736 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    9736:	b480      	push	{r7}
    9738:	b083      	sub	sp, #12
    973a:	af00      	add	r7, sp, #0
    973c:	6078      	str	r0, [r7, #4]
    973e:	460b      	mov	r3, r1
    9740:	70fb      	strb	r3, [r7, #3]
    9742:	4613      	mov	r3, r2
    9744:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    9746:	78fb      	ldrb	r3, [r7, #3]
    9748:	687a      	ldr	r2, [r7, #4]
    974a:	3304      	adds	r3, #4
    974c:	00db      	lsls	r3, r3, #3
    974e:	4413      	add	r3, r2
    9750:	78ba      	ldrb	r2, [r7, #2]
    9752:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    9754:	78fb      	ldrb	r3, [r7, #3]
    9756:	78ba      	ldrb	r2, [r7, #2]
    9758:	43d2      	mvns	r2, r2
    975a:	b2d1      	uxtb	r1, r2
    975c:	687a      	ldr	r2, [r7, #4]
    975e:	3304      	adds	r3, #4
    9760:	00db      	lsls	r3, r3, #3
    9762:	4413      	add	r3, r2
    9764:	460a      	mov	r2, r1
    9766:	711a      	strb	r2, [r3, #4]
}
    9768:	bf00      	nop
    976a:	370c      	adds	r7, #12
    976c:	46bd      	mov	sp, r7
    976e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9772:	4770      	bx	lr

00009774 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    9774:	b480      	push	{r7}
    9776:	b085      	sub	sp, #20
    9778:	af00      	add	r7, sp, #0
    977a:	60f8      	str	r0, [r7, #12]
    977c:	460b      	mov	r3, r1
    977e:	607a      	str	r2, [r7, #4]
    9780:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    9782:	7afa      	ldrb	r2, [r7, #11]
    9784:	68fb      	ldr	r3, [r7, #12]
    9786:	3204      	adds	r2, #4
    9788:	6879      	ldr	r1, [r7, #4]
    978a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    978e:	bf00      	nop
    9790:	3714      	adds	r7, #20
    9792:	46bd      	mov	sp, r7
    9794:	f85d 7b04 	ldr.w	r7, [sp], #4
    9798:	4770      	bx	lr
	...

0000979c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    979c:	b580      	push	{r7, lr}
    979e:	b082      	sub	sp, #8
    97a0:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    97a2:	2300      	movs	r3, #0
    97a4:	71fb      	strb	r3, [r7, #7]
    97a6:	e00b      	b.n	97c0 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    97a8:	79fb      	ldrb	r3, [r7, #7]
    97aa:	4a18      	ldr	r2, [pc, #96]	; (980c <_event_system_init+0x70>)
    97ac:	5cd3      	ldrb	r3, [r2, r3]
    97ae:	461a      	mov	r2, r3
    97b0:	79fb      	ldrb	r3, [r7, #7]
    97b2:	4619      	mov	r1, r3
    97b4:	4816      	ldr	r0, [pc, #88]	; (9810 <_event_system_init+0x74>)
    97b6:	4b17      	ldr	r3, [pc, #92]	; (9814 <_event_system_init+0x78>)
    97b8:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    97ba:	79fb      	ldrb	r3, [r7, #7]
    97bc:	3301      	adds	r3, #1
    97be:	71fb      	strb	r3, [r7, #7]
    97c0:	79fb      	ldrb	r3, [r7, #7]
    97c2:	2b42      	cmp	r3, #66	; 0x42
    97c4:	d9f0      	bls.n	97a8 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    97c6:	2300      	movs	r3, #0
    97c8:	71fb      	strb	r3, [r7, #7]
    97ca:	e016      	b.n	97fa <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    97cc:	79fb      	ldrb	r3, [r7, #7]
    97ce:	4a12      	ldr	r2, [pc, #72]	; (9818 <_event_system_init+0x7c>)
    97d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    97d4:	461a      	mov	r2, r3
    97d6:	79fb      	ldrb	r3, [r7, #7]
    97d8:	4619      	mov	r1, r3
    97da:	480d      	ldr	r0, [pc, #52]	; (9810 <_event_system_init+0x74>)
    97dc:	4b0f      	ldr	r3, [pc, #60]	; (981c <_event_system_init+0x80>)
    97de:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    97e0:	79fb      	ldrb	r3, [r7, #7]
    97e2:	4a0f      	ldr	r2, [pc, #60]	; (9820 <_event_system_init+0x84>)
    97e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e8:	b2da      	uxtb	r2, r3
    97ea:	79fb      	ldrb	r3, [r7, #7]
    97ec:	4619      	mov	r1, r3
    97ee:	4808      	ldr	r0, [pc, #32]	; (9810 <_event_system_init+0x74>)
    97f0:	4b0c      	ldr	r3, [pc, #48]	; (9824 <_event_system_init+0x88>)
    97f2:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    97f4:	79fb      	ldrb	r3, [r7, #7]
    97f6:	3301      	adds	r3, #1
    97f8:	71fb      	strb	r3, [r7, #7]
    97fa:	79fb      	ldrb	r3, [r7, #7]
    97fc:	2b1f      	cmp	r3, #31
    97fe:	d9e5      	bls.n	97cc <_event_system_init+0x30>
	}

	return ERR_NONE;
    9800:	2300      	movs	r3, #0
}
    9802:	4618      	mov	r0, r3
    9804:	3708      	adds	r7, #8
    9806:	46bd      	mov	sp, r7
    9808:	bd80      	pop	{r7, pc}
    980a:	bf00      	nop
    980c:	00020b74 	.word	0x00020b74
    9810:	4100e000 	.word	0x4100e000
    9814:	00009711 	.word	0x00009711
    9818:	00020bb8 	.word	0x00020bb8
    981c:	00009775 	.word	0x00009775
    9820:	00020bf8 	.word	0x00020bf8
    9824:	00009737 	.word	0x00009737

00009828 <hri_gclk_wait_for_sync>:
{
    9828:	b480      	push	{r7}
    982a:	b083      	sub	sp, #12
    982c:	af00      	add	r7, sp, #0
    982e:	6078      	str	r0, [r7, #4]
    9830:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9832:	bf00      	nop
    9834:	687b      	ldr	r3, [r7, #4]
    9836:	685a      	ldr	r2, [r3, #4]
    9838:	683b      	ldr	r3, [r7, #0]
    983a:	4013      	ands	r3, r2
    983c:	2b00      	cmp	r3, #0
    983e:	d1f9      	bne.n	9834 <hri_gclk_wait_for_sync+0xc>
}
    9840:	bf00      	nop
    9842:	370c      	adds	r7, #12
    9844:	46bd      	mov	sp, r7
    9846:	f85d 7b04 	ldr.w	r7, [sp], #4
    984a:	4770      	bx	lr

0000984c <hri_gclk_write_GENCTRL_reg>:
{
    984c:	b580      	push	{r7, lr}
    984e:	b084      	sub	sp, #16
    9850:	af00      	add	r7, sp, #0
    9852:	60f8      	str	r0, [r7, #12]
    9854:	460b      	mov	r3, r1
    9856:	607a      	str	r2, [r7, #4]
    9858:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    985a:	7afa      	ldrb	r2, [r7, #11]
    985c:	68fb      	ldr	r3, [r7, #12]
    985e:	3208      	adds	r2, #8
    9860:	6879      	ldr	r1, [r7, #4]
    9862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    9866:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    986a:	68f8      	ldr	r0, [r7, #12]
    986c:	4b02      	ldr	r3, [pc, #8]	; (9878 <hri_gclk_write_GENCTRL_reg+0x2c>)
    986e:	4798      	blx	r3
}
    9870:	bf00      	nop
    9872:	3710      	adds	r7, #16
    9874:	46bd      	mov	sp, r7
    9876:	bd80      	pop	{r7, pc}
    9878:	00009829 	.word	0x00009829

0000987c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    987c:	b580      	push	{r7, lr}
    987e:	b082      	sub	sp, #8
    9880:	af00      	add	r7, sp, #0
    9882:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    9884:	687b      	ldr	r3, [r7, #4]
    9886:	f003 0301 	and.w	r3, r3, #1
    988a:	2b00      	cmp	r3, #0
    988c:	d004      	beq.n	9898 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    988e:	4a36      	ldr	r2, [pc, #216]	; (9968 <_gclk_init_generators_by_fref+0xec>)
    9890:	2100      	movs	r1, #0
    9892:	4836      	ldr	r0, [pc, #216]	; (996c <_gclk_init_generators_by_fref+0xf0>)
    9894:	4b36      	ldr	r3, [pc, #216]	; (9970 <_gclk_init_generators_by_fref+0xf4>)
    9896:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    9898:	687b      	ldr	r3, [r7, #4]
    989a:	f003 0302 	and.w	r3, r3, #2
    989e:	2b00      	cmp	r3, #0
    98a0:	d004      	beq.n	98ac <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    98a2:	4a34      	ldr	r2, [pc, #208]	; (9974 <_gclk_init_generators_by_fref+0xf8>)
    98a4:	2101      	movs	r1, #1
    98a6:	4831      	ldr	r0, [pc, #196]	; (996c <_gclk_init_generators_by_fref+0xf0>)
    98a8:	4b31      	ldr	r3, [pc, #196]	; (9970 <_gclk_init_generators_by_fref+0xf4>)
    98aa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    98ac:	687b      	ldr	r3, [r7, #4]
    98ae:	f003 0304 	and.w	r3, r3, #4
    98b2:	2b00      	cmp	r3, #0
    98b4:	d004      	beq.n	98c0 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    98b6:	4a30      	ldr	r2, [pc, #192]	; (9978 <_gclk_init_generators_by_fref+0xfc>)
    98b8:	2102      	movs	r1, #2
    98ba:	482c      	ldr	r0, [pc, #176]	; (996c <_gclk_init_generators_by_fref+0xf0>)
    98bc:	4b2c      	ldr	r3, [pc, #176]	; (9970 <_gclk_init_generators_by_fref+0xf4>)
    98be:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    98c0:	687b      	ldr	r3, [r7, #4]
    98c2:	f003 0308 	and.w	r3, r3, #8
    98c6:	2b00      	cmp	r3, #0
    98c8:	d004      	beq.n	98d4 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    98ca:	4a2c      	ldr	r2, [pc, #176]	; (997c <_gclk_init_generators_by_fref+0x100>)
    98cc:	2103      	movs	r1, #3
    98ce:	4827      	ldr	r0, [pc, #156]	; (996c <_gclk_init_generators_by_fref+0xf0>)
    98d0:	4b27      	ldr	r3, [pc, #156]	; (9970 <_gclk_init_generators_by_fref+0xf4>)
    98d2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    98d4:	687b      	ldr	r3, [r7, #4]
    98d6:	f003 0310 	and.w	r3, r3, #16
    98da:	2b00      	cmp	r3, #0
    98dc:	d004      	beq.n	98e8 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    98de:	4a28      	ldr	r2, [pc, #160]	; (9980 <_gclk_init_generators_by_fref+0x104>)
    98e0:	2104      	movs	r1, #4
    98e2:	4822      	ldr	r0, [pc, #136]	; (996c <_gclk_init_generators_by_fref+0xf0>)
    98e4:	4b22      	ldr	r3, [pc, #136]	; (9970 <_gclk_init_generators_by_fref+0xf4>)
    98e6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    98e8:	687b      	ldr	r3, [r7, #4]
    98ea:	f003 0320 	and.w	r3, r3, #32
    98ee:	2b00      	cmp	r3, #0
    98f0:	d004      	beq.n	98fc <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    98f2:	4a24      	ldr	r2, [pc, #144]	; (9984 <_gclk_init_generators_by_fref+0x108>)
    98f4:	2105      	movs	r1, #5
    98f6:	481d      	ldr	r0, [pc, #116]	; (996c <_gclk_init_generators_by_fref+0xf0>)
    98f8:	4b1d      	ldr	r3, [pc, #116]	; (9970 <_gclk_init_generators_by_fref+0xf4>)
    98fa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    98fc:	687b      	ldr	r3, [r7, #4]
    98fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9902:	2b00      	cmp	r3, #0
    9904:	d004      	beq.n	9910 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    9906:	4a20      	ldr	r2, [pc, #128]	; (9988 <_gclk_init_generators_by_fref+0x10c>)
    9908:	2106      	movs	r1, #6
    990a:	4818      	ldr	r0, [pc, #96]	; (996c <_gclk_init_generators_by_fref+0xf0>)
    990c:	4b18      	ldr	r3, [pc, #96]	; (9970 <_gclk_init_generators_by_fref+0xf4>)
    990e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    9910:	687b      	ldr	r3, [r7, #4]
    9912:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9916:	2b00      	cmp	r3, #0
    9918:	d004      	beq.n	9924 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    991a:	4a1c      	ldr	r2, [pc, #112]	; (998c <_gclk_init_generators_by_fref+0x110>)
    991c:	2107      	movs	r1, #7
    991e:	4813      	ldr	r0, [pc, #76]	; (996c <_gclk_init_generators_by_fref+0xf0>)
    9920:	4b13      	ldr	r3, [pc, #76]	; (9970 <_gclk_init_generators_by_fref+0xf4>)
    9922:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    9924:	687b      	ldr	r3, [r7, #4]
    9926:	f403 7380 	and.w	r3, r3, #256	; 0x100
    992a:	2b00      	cmp	r3, #0
    992c:	d004      	beq.n	9938 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    992e:	4a18      	ldr	r2, [pc, #96]	; (9990 <_gclk_init_generators_by_fref+0x114>)
    9930:	2108      	movs	r1, #8
    9932:	480e      	ldr	r0, [pc, #56]	; (996c <_gclk_init_generators_by_fref+0xf0>)
    9934:	4b0e      	ldr	r3, [pc, #56]	; (9970 <_gclk_init_generators_by_fref+0xf4>)
    9936:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    9938:	687b      	ldr	r3, [r7, #4]
    993a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    993e:	2b00      	cmp	r3, #0
    9940:	d004      	beq.n	994c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    9942:	4a14      	ldr	r2, [pc, #80]	; (9994 <_gclk_init_generators_by_fref+0x118>)
    9944:	210a      	movs	r1, #10
    9946:	4809      	ldr	r0, [pc, #36]	; (996c <_gclk_init_generators_by_fref+0xf0>)
    9948:	4b09      	ldr	r3, [pc, #36]	; (9970 <_gclk_init_generators_by_fref+0xf4>)
    994a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    994c:	687b      	ldr	r3, [r7, #4]
    994e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    9952:	2b00      	cmp	r3, #0
    9954:	d004      	beq.n	9960 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    9956:	4a10      	ldr	r2, [pc, #64]	; (9998 <_gclk_init_generators_by_fref+0x11c>)
    9958:	210b      	movs	r1, #11
    995a:	4804      	ldr	r0, [pc, #16]	; (996c <_gclk_init_generators_by_fref+0xf0>)
    995c:	4b04      	ldr	r3, [pc, #16]	; (9970 <_gclk_init_generators_by_fref+0xf4>)
    995e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    9960:	bf00      	nop
    9962:	3708      	adds	r7, #8
    9964:	46bd      	mov	sp, r7
    9966:	bd80      	pop	{r7, pc}
    9968:	00010107 	.word	0x00010107
    996c:	40001c00 	.word	0x40001c00
    9970:	0000984d 	.word	0x0000984d
    9974:	00010907 	.word	0x00010907
    9978:	00010906 	.word	0x00010906
    997c:	00020908 	.word	0x00020908
    9980:	00010901 	.word	0x00010901
    9984:	00062901 	.word	0x00062901
    9988:	000c2901 	.word	0x000c2901
    998c:	00082908 	.word	0x00082908
    9990:	00032901 	.word	0x00032901
    9994:	00010905 	.word	0x00010905
    9998:	00041905 	.word	0x00041905

0000999c <hri_mclk_write_CPUDIV_reg>:
{
    999c:	b480      	push	{r7}
    999e:	b083      	sub	sp, #12
    99a0:	af00      	add	r7, sp, #0
    99a2:	6078      	str	r0, [r7, #4]
    99a4:	460b      	mov	r3, r1
    99a6:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    99a8:	687b      	ldr	r3, [r7, #4]
    99aa:	78fa      	ldrb	r2, [r7, #3]
    99ac:	715a      	strb	r2, [r3, #5]
}
    99ae:	bf00      	nop
    99b0:	370c      	adds	r7, #12
    99b2:	46bd      	mov	sp, r7
    99b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    99b8:	4770      	bx	lr
	...

000099bc <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    99bc:	b580      	push	{r7, lr}
    99be:	b082      	sub	sp, #8
    99c0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    99c2:	4b05      	ldr	r3, [pc, #20]	; (99d8 <_mclk_init+0x1c>)
    99c4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    99c6:	2101      	movs	r1, #1
    99c8:	6878      	ldr	r0, [r7, #4]
    99ca:	4b04      	ldr	r3, [pc, #16]	; (99dc <_mclk_init+0x20>)
    99cc:	4798      	blx	r3
}
    99ce:	bf00      	nop
    99d0:	3708      	adds	r7, #8
    99d2:	46bd      	mov	sp, r7
    99d4:	bd80      	pop	{r7, pc}
    99d6:	bf00      	nop
    99d8:	40000800 	.word	0x40000800
    99dc:	0000999d 	.word	0x0000999d

000099e0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    99e0:	b480      	push	{r7}
    99e2:	b083      	sub	sp, #12
    99e4:	af00      	add	r7, sp, #0
    99e6:	6078      	str	r0, [r7, #4]
    99e8:	460b      	mov	r3, r1
    99ea:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    99ec:	687b      	ldr	r3, [r7, #4]
    99ee:	78fa      	ldrb	r2, [r7, #3]
    99f0:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    99f2:	bf00      	nop
    99f4:	370c      	adds	r7, #12
    99f6:	46bd      	mov	sp, r7
    99f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    99fc:	4770      	bx	lr

000099fe <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    99fe:	b480      	push	{r7}
    9a00:	b083      	sub	sp, #12
    9a02:	af00      	add	r7, sp, #0
    9a04:	6078      	str	r0, [r7, #4]
    9a06:	460b      	mov	r3, r1
    9a08:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    9a0a:	687b      	ldr	r3, [r7, #4]
    9a0c:	887a      	ldrh	r2, [r7, #2]
    9a0e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9a10:	bf00      	nop
    9a12:	370c      	adds	r7, #12
    9a14:	46bd      	mov	sp, r7
    9a16:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a1a:	4770      	bx	lr

00009a1c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    9a1c:	b480      	push	{r7}
    9a1e:	b083      	sub	sp, #12
    9a20:	af00      	add	r7, sp, #0
    9a22:	6078      	str	r0, [r7, #4]
    9a24:	460b      	mov	r3, r1
    9a26:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    9a28:	687b      	ldr	r3, [r7, #4]
    9a2a:	78fa      	ldrb	r2, [r7, #3]
    9a2c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9a2e:	bf00      	nop
    9a30:	370c      	adds	r7, #12
    9a32:	46bd      	mov	sp, r7
    9a34:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a38:	4770      	bx	lr

00009a3a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    9a3a:	b480      	push	{r7}
    9a3c:	b083      	sub	sp, #12
    9a3e:	af00      	add	r7, sp, #0
    9a40:	6078      	str	r0, [r7, #4]
    9a42:	460b      	mov	r3, r1
    9a44:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    9a46:	687b      	ldr	r3, [r7, #4]
    9a48:	78fa      	ldrb	r2, [r7, #3]
    9a4a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9a4c:	bf00      	nop
    9a4e:	370c      	adds	r7, #12
    9a50:	46bd      	mov	sp, r7
    9a52:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a56:	4770      	bx	lr

00009a58 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    9a58:	b480      	push	{r7}
    9a5a:	b085      	sub	sp, #20
    9a5c:	af00      	add	r7, sp, #0
    9a5e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    9a60:	687b      	ldr	r3, [r7, #4]
    9a62:	69db      	ldr	r3, [r3, #28]
    9a64:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    9a66:	68fb      	ldr	r3, [r7, #12]
    9a68:	0a1b      	lsrs	r3, r3, #8
    9a6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9a6e:	60fb      	str	r3, [r7, #12]
	return tmp;
    9a70:	68fb      	ldr	r3, [r7, #12]
}
    9a72:	4618      	mov	r0, r3
    9a74:	3714      	adds	r7, #20
    9a76:	46bd      	mov	sp, r7
    9a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a7c:	4770      	bx	lr

00009a7e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    9a7e:	b480      	push	{r7}
    9a80:	b083      	sub	sp, #12
    9a82:	af00      	add	r7, sp, #0
    9a84:	6078      	str	r0, [r7, #4]
    9a86:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    9a88:	687b      	ldr	r3, [r7, #4]
    9a8a:	683a      	ldr	r2, [r7, #0]
    9a8c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9a8e:	bf00      	nop
    9a90:	370c      	adds	r7, #12
    9a92:	46bd      	mov	sp, r7
    9a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a98:	4770      	bx	lr
	...

00009a9c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    9a9c:	b580      	push	{r7, lr}
    9a9e:	b082      	sub	sp, #8
    9aa0:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    9aa2:	4b13      	ldr	r3, [pc, #76]	; (9af0 <_osc32kctrl_init_sources+0x54>)
    9aa4:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    9aa6:	2300      	movs	r3, #0
    9aa8:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    9aaa:	f242 018e 	movw	r1, #8334	; 0x208e
    9aae:	6878      	ldr	r0, [r7, #4]
    9ab0:	4b10      	ldr	r3, [pc, #64]	; (9af4 <_osc32kctrl_init_sources+0x58>)
    9ab2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    9ab4:	2100      	movs	r1, #0
    9ab6:	6878      	ldr	r0, [r7, #4]
    9ab8:	4b0f      	ldr	r3, [pc, #60]	; (9af8 <_osc32kctrl_init_sources+0x5c>)
    9aba:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    9abc:	2100      	movs	r1, #0
    9abe:	6878      	ldr	r0, [r7, #4]
    9ac0:	4b0e      	ldr	r3, [pc, #56]	; (9afc <_osc32kctrl_init_sources+0x60>)
    9ac2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    9ac4:	6878      	ldr	r0, [r7, #4]
    9ac6:	4b0e      	ldr	r3, [pc, #56]	; (9b00 <_osc32kctrl_init_sources+0x64>)
    9ac8:	4798      	blx	r3
    9aca:	4603      	mov	r3, r0
    9acc:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    9ace:	887b      	ldrh	r3, [r7, #2]
    9ad0:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    9ad2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    9ad6:	4619      	mov	r1, r3
    9ad8:	6878      	ldr	r0, [r7, #4]
    9ada:	4b0a      	ldr	r3, [pc, #40]	; (9b04 <_osc32kctrl_init_sources+0x68>)
    9adc:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    9ade:	2100      	movs	r1, #0
    9ae0:	6878      	ldr	r0, [r7, #4]
    9ae2:	4b09      	ldr	r3, [pc, #36]	; (9b08 <_osc32kctrl_init_sources+0x6c>)
    9ae4:	4798      	blx	r3
	(void)calib;
}
    9ae6:	bf00      	nop
    9ae8:	3708      	adds	r7, #8
    9aea:	46bd      	mov	sp, r7
    9aec:	bd80      	pop	{r7, pc}
    9aee:	bf00      	nop
    9af0:	40001400 	.word	0x40001400
    9af4:	000099ff 	.word	0x000099ff
    9af8:	00009a1d 	.word	0x00009a1d
    9afc:	00009a3b 	.word	0x00009a3b
    9b00:	00009a59 	.word	0x00009a59
    9b04:	00009a7f 	.word	0x00009a7f
    9b08:	000099e1 	.word	0x000099e1

00009b0c <hri_gclk_wait_for_sync>:
{
    9b0c:	b480      	push	{r7}
    9b0e:	b083      	sub	sp, #12
    9b10:	af00      	add	r7, sp, #0
    9b12:	6078      	str	r0, [r7, #4]
    9b14:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9b16:	bf00      	nop
    9b18:	687b      	ldr	r3, [r7, #4]
    9b1a:	685a      	ldr	r2, [r3, #4]
    9b1c:	683b      	ldr	r3, [r7, #0]
    9b1e:	4013      	ands	r3, r2
    9b20:	2b00      	cmp	r3, #0
    9b22:	d1f9      	bne.n	9b18 <hri_gclk_wait_for_sync+0xc>
}
    9b24:	bf00      	nop
    9b26:	370c      	adds	r7, #12
    9b28:	46bd      	mov	sp, r7
    9b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b2e:	4770      	bx	lr

00009b30 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    9b30:	b480      	push	{r7}
    9b32:	b083      	sub	sp, #12
    9b34:	af00      	add	r7, sp, #0
    9b36:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    9b38:	687b      	ldr	r3, [r7, #4]
    9b3a:	685b      	ldr	r3, [r3, #4]
    9b3c:	089b      	lsrs	r3, r3, #2
    9b3e:	f003 0301 	and.w	r3, r3, #1
    9b42:	2b00      	cmp	r3, #0
    9b44:	bf14      	ite	ne
    9b46:	2301      	movne	r3, #1
    9b48:	2300      	moveq	r3, #0
    9b4a:	b2db      	uxtb	r3, r3
}
    9b4c:	4618      	mov	r0, r3
    9b4e:	370c      	adds	r7, #12
    9b50:	46bd      	mov	sp, r7
    9b52:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b56:	4770      	bx	lr

00009b58 <hri_gclk_read_SYNCBUSY_reg>:
{
    9b58:	b480      	push	{r7}
    9b5a:	b083      	sub	sp, #12
    9b5c:	af00      	add	r7, sp, #0
    9b5e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    9b60:	687b      	ldr	r3, [r7, #4]
    9b62:	685b      	ldr	r3, [r3, #4]
}
    9b64:	4618      	mov	r0, r3
    9b66:	370c      	adds	r7, #12
    9b68:	46bd      	mov	sp, r7
    9b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b6e:	4770      	bx	lr

00009b70 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    9b70:	b580      	push	{r7, lr}
    9b72:	b086      	sub	sp, #24
    9b74:	af00      	add	r7, sp, #0
    9b76:	60f8      	str	r0, [r7, #12]
    9b78:	460b      	mov	r3, r1
    9b7a:	607a      	str	r2, [r7, #4]
    9b7c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    9b7e:	7afa      	ldrb	r2, [r7, #11]
    9b80:	68fb      	ldr	r3, [r7, #12]
    9b82:	3208      	adds	r2, #8
    9b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9b88:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    9b8a:	697b      	ldr	r3, [r7, #20]
    9b8c:	f023 030f 	bic.w	r3, r3, #15
    9b90:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    9b92:	687b      	ldr	r3, [r7, #4]
    9b94:	f003 030f 	and.w	r3, r3, #15
    9b98:	697a      	ldr	r2, [r7, #20]
    9b9a:	4313      	orrs	r3, r2
    9b9c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    9b9e:	7afa      	ldrb	r2, [r7, #11]
    9ba0:	68fb      	ldr	r3, [r7, #12]
    9ba2:	3208      	adds	r2, #8
    9ba4:	6979      	ldr	r1, [r7, #20]
    9ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    9baa:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    9bae:	68f8      	ldr	r0, [r7, #12]
    9bb0:	4b02      	ldr	r3, [pc, #8]	; (9bbc <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    9bb2:	4798      	blx	r3
}
    9bb4:	bf00      	nop
    9bb6:	3718      	adds	r7, #24
    9bb8:	46bd      	mov	sp, r7
    9bba:	bd80      	pop	{r7, pc}
    9bbc:	00009b0d 	.word	0x00009b0d

00009bc0 <hri_gclk_write_PCHCTRL_reg>:
{
    9bc0:	b480      	push	{r7}
    9bc2:	b085      	sub	sp, #20
    9bc4:	af00      	add	r7, sp, #0
    9bc6:	60f8      	str	r0, [r7, #12]
    9bc8:	460b      	mov	r3, r1
    9bca:	607a      	str	r2, [r7, #4]
    9bcc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    9bce:	7afa      	ldrb	r2, [r7, #11]
    9bd0:	68fb      	ldr	r3, [r7, #12]
    9bd2:	3220      	adds	r2, #32
    9bd4:	6879      	ldr	r1, [r7, #4]
    9bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    9bda:	bf00      	nop
    9bdc:	3714      	adds	r7, #20
    9bde:	46bd      	mov	sp, r7
    9be0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9be4:	4770      	bx	lr

00009be6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    9be6:	b480      	push	{r7}
    9be8:	b085      	sub	sp, #20
    9bea:	af00      	add	r7, sp, #0
    9bec:	60f8      	str	r0, [r7, #12]
    9bee:	460b      	mov	r3, r1
    9bf0:	607a      	str	r2, [r7, #4]
    9bf2:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    9bf4:	bf00      	nop
    9bf6:	7afa      	ldrb	r2, [r7, #11]
    9bf8:	68f9      	ldr	r1, [r7, #12]
    9bfa:	4613      	mov	r3, r2
    9bfc:	009b      	lsls	r3, r3, #2
    9bfe:	4413      	add	r3, r2
    9c00:	009b      	lsls	r3, r3, #2
    9c02:	440b      	add	r3, r1
    9c04:	333c      	adds	r3, #60	; 0x3c
    9c06:	681a      	ldr	r2, [r3, #0]
    9c08:	687b      	ldr	r3, [r7, #4]
    9c0a:	4013      	ands	r3, r2
    9c0c:	2b00      	cmp	r3, #0
    9c0e:	d1f2      	bne.n	9bf6 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    9c10:	bf00      	nop
    9c12:	3714      	adds	r7, #20
    9c14:	46bd      	mov	sp, r7
    9c16:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c1a:	4770      	bx	lr

00009c1c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    9c1c:	b480      	push	{r7}
    9c1e:	b083      	sub	sp, #12
    9c20:	af00      	add	r7, sp, #0
    9c22:	6078      	str	r0, [r7, #4]
    9c24:	460b      	mov	r3, r1
    9c26:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    9c28:	78fa      	ldrb	r2, [r7, #3]
    9c2a:	6879      	ldr	r1, [r7, #4]
    9c2c:	4613      	mov	r3, r2
    9c2e:	009b      	lsls	r3, r3, #2
    9c30:	4413      	add	r3, r2
    9c32:	009b      	lsls	r3, r3, #2
    9c34:	440b      	add	r3, r1
    9c36:	3340      	adds	r3, #64	; 0x40
    9c38:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    9c3a:	f003 0301 	and.w	r3, r3, #1
    9c3e:	2b00      	cmp	r3, #0
    9c40:	bf14      	ite	ne
    9c42:	2301      	movne	r3, #1
    9c44:	2300      	moveq	r3, #0
    9c46:	b2db      	uxtb	r3, r3
}
    9c48:	4618      	mov	r0, r3
    9c4a:	370c      	adds	r7, #12
    9c4c:	46bd      	mov	sp, r7
    9c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c52:	4770      	bx	lr

00009c54 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    9c54:	b480      	push	{r7}
    9c56:	b083      	sub	sp, #12
    9c58:	af00      	add	r7, sp, #0
    9c5a:	6078      	str	r0, [r7, #4]
    9c5c:	460b      	mov	r3, r1
    9c5e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    9c60:	78fa      	ldrb	r2, [r7, #3]
    9c62:	6879      	ldr	r1, [r7, #4]
    9c64:	4613      	mov	r3, r2
    9c66:	009b      	lsls	r3, r3, #2
    9c68:	4413      	add	r3, r2
    9c6a:	009b      	lsls	r3, r3, #2
    9c6c:	440b      	add	r3, r1
    9c6e:	3340      	adds	r3, #64	; 0x40
    9c70:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    9c72:	085b      	lsrs	r3, r3, #1
    9c74:	f003 0301 	and.w	r3, r3, #1
    9c78:	2b00      	cmp	r3, #0
    9c7a:	bf14      	ite	ne
    9c7c:	2301      	movne	r3, #1
    9c7e:	2300      	moveq	r3, #0
    9c80:	b2db      	uxtb	r3, r3
}
    9c82:	4618      	mov	r0, r3
    9c84:	370c      	adds	r7, #12
    9c86:	46bd      	mov	sp, r7
    9c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c8c:	4770      	bx	lr
	...

00009c90 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    9c90:	b580      	push	{r7, lr}
    9c92:	b082      	sub	sp, #8
    9c94:	af00      	add	r7, sp, #0
    9c96:	6078      	str	r0, [r7, #4]
    9c98:	460b      	mov	r3, r1
    9c9a:	70fb      	strb	r3, [r7, #3]
    9c9c:	4613      	mov	r3, r2
    9c9e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    9ca0:	78fa      	ldrb	r2, [r7, #3]
    9ca2:	6879      	ldr	r1, [r7, #4]
    9ca4:	4613      	mov	r3, r2
    9ca6:	009b      	lsls	r3, r3, #2
    9ca8:	4413      	add	r3, r2
    9caa:	009b      	lsls	r3, r3, #2
    9cac:	440b      	add	r3, r1
    9cae:	3330      	adds	r3, #48	; 0x30
    9cb0:	78ba      	ldrb	r2, [r7, #2]
    9cb2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    9cb4:	78fb      	ldrb	r3, [r7, #3]
    9cb6:	2202      	movs	r2, #2
    9cb8:	4619      	mov	r1, r3
    9cba:	6878      	ldr	r0, [r7, #4]
    9cbc:	4b02      	ldr	r3, [pc, #8]	; (9cc8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    9cbe:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9cc0:	bf00      	nop
    9cc2:	3708      	adds	r7, #8
    9cc4:	46bd      	mov	sp, r7
    9cc6:	bd80      	pop	{r7, pc}
    9cc8:	00009be7 	.word	0x00009be7

00009ccc <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    9ccc:	b580      	push	{r7, lr}
    9cce:	b084      	sub	sp, #16
    9cd0:	af00      	add	r7, sp, #0
    9cd2:	60f8      	str	r0, [r7, #12]
    9cd4:	460b      	mov	r3, r1
    9cd6:	607a      	str	r2, [r7, #4]
    9cd8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    9cda:	7afa      	ldrb	r2, [r7, #11]
    9cdc:	68f9      	ldr	r1, [r7, #12]
    9cde:	4613      	mov	r3, r2
    9ce0:	009b      	lsls	r3, r3, #2
    9ce2:	4413      	add	r3, r2
    9ce4:	009b      	lsls	r3, r3, #2
    9ce6:	440b      	add	r3, r1
    9ce8:	3334      	adds	r3, #52	; 0x34
    9cea:	687a      	ldr	r2, [r7, #4]
    9cec:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    9cee:	7afb      	ldrb	r3, [r7, #11]
    9cf0:	2206      	movs	r2, #6
    9cf2:	4619      	mov	r1, r3
    9cf4:	68f8      	ldr	r0, [r7, #12]
    9cf6:	4b03      	ldr	r3, [pc, #12]	; (9d04 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    9cf8:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9cfa:	bf00      	nop
    9cfc:	3710      	adds	r7, #16
    9cfe:	46bd      	mov	sp, r7
    9d00:	bd80      	pop	{r7, pc}
    9d02:	bf00      	nop
    9d04:	00009be7 	.word	0x00009be7

00009d08 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    9d08:	b480      	push	{r7}
    9d0a:	b085      	sub	sp, #20
    9d0c:	af00      	add	r7, sp, #0
    9d0e:	60f8      	str	r0, [r7, #12]
    9d10:	460b      	mov	r3, r1
    9d12:	607a      	str	r2, [r7, #4]
    9d14:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    9d16:	7afa      	ldrb	r2, [r7, #11]
    9d18:	68f9      	ldr	r1, [r7, #12]
    9d1a:	4613      	mov	r3, r2
    9d1c:	009b      	lsls	r3, r3, #2
    9d1e:	4413      	add	r3, r2
    9d20:	009b      	lsls	r3, r3, #2
    9d22:	440b      	add	r3, r1
    9d24:	3338      	adds	r3, #56	; 0x38
    9d26:	687a      	ldr	r2, [r7, #4]
    9d28:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9d2a:	bf00      	nop
    9d2c:	3714      	adds	r7, #20
    9d2e:	46bd      	mov	sp, r7
    9d30:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d34:	4770      	bx	lr

00009d36 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    9d36:	b480      	push	{r7}
    9d38:	b083      	sub	sp, #12
    9d3a:	af00      	add	r7, sp, #0
    9d3c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	691b      	ldr	r3, [r3, #16]
    9d42:	085b      	lsrs	r3, r3, #1
    9d44:	f003 0301 	and.w	r3, r3, #1
    9d48:	2b00      	cmp	r3, #0
    9d4a:	bf14      	ite	ne
    9d4c:	2301      	movne	r3, #1
    9d4e:	2300      	moveq	r3, #0
    9d50:	b2db      	uxtb	r3, r3
}
    9d52:	4618      	mov	r0, r3
    9d54:	370c      	adds	r7, #12
    9d56:	46bd      	mov	sp, r7
    9d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d5c:	4770      	bx	lr

00009d5e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    9d5e:	b480      	push	{r7}
    9d60:	b083      	sub	sp, #12
    9d62:	af00      	add	r7, sp, #0
    9d64:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    9d66:	687b      	ldr	r3, [r7, #4]
    9d68:	691b      	ldr	r3, [r3, #16]
    9d6a:	0a1b      	lsrs	r3, r3, #8
    9d6c:	f003 0301 	and.w	r3, r3, #1
    9d70:	2b00      	cmp	r3, #0
    9d72:	bf14      	ite	ne
    9d74:	2301      	movne	r3, #1
    9d76:	2300      	moveq	r3, #0
    9d78:	b2db      	uxtb	r3, r3
}
    9d7a:	4618      	mov	r0, r3
    9d7c:	370c      	adds	r7, #12
    9d7e:	46bd      	mov	sp, r7
    9d80:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d84:	4770      	bx	lr

00009d86 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    9d86:	b480      	push	{r7}
    9d88:	b085      	sub	sp, #20
    9d8a:	af00      	add	r7, sp, #0
    9d8c:	6078      	str	r0, [r7, #4]
    9d8e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9d90:	687b      	ldr	r3, [r7, #4]
    9d92:	691b      	ldr	r3, [r3, #16]
    9d94:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9d96:	68fa      	ldr	r2, [r7, #12]
    9d98:	683b      	ldr	r3, [r7, #0]
    9d9a:	4013      	ands	r3, r2
    9d9c:	60fb      	str	r3, [r7, #12]
	return tmp;
    9d9e:	68fb      	ldr	r3, [r7, #12]
}
    9da0:	4618      	mov	r0, r3
    9da2:	3714      	adds	r7, #20
    9da4:	46bd      	mov	sp, r7
    9da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9daa:	4770      	bx	lr

00009dac <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    9dac:	b480      	push	{r7}
    9dae:	b085      	sub	sp, #20
    9db0:	af00      	add	r7, sp, #0
    9db2:	60f8      	str	r0, [r7, #12]
    9db4:	460b      	mov	r3, r1
    9db6:	607a      	str	r2, [r7, #4]
    9db8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    9dba:	7afb      	ldrb	r3, [r7, #11]
    9dbc:	68fa      	ldr	r2, [r7, #12]
    9dbe:	3304      	adds	r3, #4
    9dc0:	009b      	lsls	r3, r3, #2
    9dc2:	4413      	add	r3, r2
    9dc4:	687a      	ldr	r2, [r7, #4]
    9dc6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9dc8:	bf00      	nop
    9dca:	3714      	adds	r7, #20
    9dcc:	46bd      	mov	sp, r7
    9dce:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dd2:	4770      	bx	lr

00009dd4 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    9dd4:	b480      	push	{r7}
    9dd6:	b083      	sub	sp, #12
    9dd8:	af00      	add	r7, sp, #0
    9dda:	6078      	str	r0, [r7, #4]
    9ddc:	460b      	mov	r3, r1
    9dde:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    9de0:	687b      	ldr	r3, [r7, #4]
    9de2:	78fa      	ldrb	r2, [r7, #3]
    9de4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9de6:	bf00      	nop
    9de8:	370c      	adds	r7, #12
    9dea:	46bd      	mov	sp, r7
    9dec:	f85d 7b04 	ldr.w	r7, [sp], #4
    9df0:	4770      	bx	lr

00009df2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    9df2:	b480      	push	{r7}
    9df4:	b085      	sub	sp, #20
    9df6:	af00      	add	r7, sp, #0
    9df8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    9dfa:	687b      	ldr	r3, [r7, #4]
    9dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
    9e00:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    9e02:	7bfb      	ldrb	r3, [r7, #15]
    9e04:	f003 0301 	and.w	r3, r3, #1
    9e08:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9e0a:	7bfb      	ldrb	r3, [r7, #15]
    9e0c:	2b00      	cmp	r3, #0
    9e0e:	bf14      	ite	ne
    9e10:	2301      	movne	r3, #1
    9e12:	2300      	moveq	r3, #0
    9e14:	b2db      	uxtb	r3, r3
}
    9e16:	4618      	mov	r0, r3
    9e18:	3714      	adds	r7, #20
    9e1a:	46bd      	mov	sp, r7
    9e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e20:	4770      	bx	lr

00009e22 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    9e22:	b480      	push	{r7}
    9e24:	b083      	sub	sp, #12
    9e26:	af00      	add	r7, sp, #0
    9e28:	6078      	str	r0, [r7, #4]
    9e2a:	460b      	mov	r3, r1
    9e2c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    9e2e:	687b      	ldr	r3, [r7, #4]
    9e30:	78fa      	ldrb	r2, [r7, #3]
    9e32:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9e36:	bf00      	nop
    9e38:	370c      	adds	r7, #12
    9e3a:	46bd      	mov	sp, r7
    9e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e40:	4770      	bx	lr

00009e42 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    9e42:	b480      	push	{r7}
    9e44:	b083      	sub	sp, #12
    9e46:	af00      	add	r7, sp, #0
    9e48:	6078      	str	r0, [r7, #4]
    9e4a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    9e4c:	687b      	ldr	r3, [r7, #4]
    9e4e:	683a      	ldr	r2, [r7, #0]
    9e50:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9e52:	bf00      	nop
    9e54:	370c      	adds	r7, #12
    9e56:	46bd      	mov	sp, r7
    9e58:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e5c:	4770      	bx	lr

00009e5e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    9e5e:	b480      	push	{r7}
    9e60:	b083      	sub	sp, #12
    9e62:	af00      	add	r7, sp, #0
    9e64:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    9e66:	687b      	ldr	r3, [r7, #4]
    9e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    9e6a:	4618      	mov	r0, r3
    9e6c:	370c      	adds	r7, #12
    9e6e:	46bd      	mov	sp, r7
    9e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e74:	4770      	bx	lr

00009e76 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    9e76:	b480      	push	{r7}
    9e78:	b083      	sub	sp, #12
    9e7a:	af00      	add	r7, sp, #0
    9e7c:	6078      	str	r0, [r7, #4]
    9e7e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    9e80:	687b      	ldr	r3, [r7, #4]
    9e82:	683a      	ldr	r2, [r7, #0]
    9e84:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9e86:	bf00      	nop
    9e88:	370c      	adds	r7, #12
    9e8a:	46bd      	mov	sp, r7
    9e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e90:	4770      	bx	lr

00009e92 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    9e92:	b480      	push	{r7}
    9e94:	b085      	sub	sp, #20
    9e96:	af00      	add	r7, sp, #0
    9e98:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9e9a:	687b      	ldr	r3, [r7, #4]
    9e9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9ea0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    9ea2:	7bfb      	ldrb	r3, [r7, #15]
    9ea4:	085b      	lsrs	r3, r3, #1
    9ea6:	b2db      	uxtb	r3, r3
    9ea8:	f003 0301 	and.w	r3, r3, #1
    9eac:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9eae:	7bfb      	ldrb	r3, [r7, #15]
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	bf14      	ite	ne
    9eb4:	2301      	movne	r3, #1
    9eb6:	2300      	moveq	r3, #0
    9eb8:	b2db      	uxtb	r3, r3
}
    9eba:	4618      	mov	r0, r3
    9ebc:	3714      	adds	r7, #20
    9ebe:	46bd      	mov	sp, r7
    9ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ec4:	4770      	bx	lr

00009ec6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    9ec6:	b480      	push	{r7}
    9ec8:	b085      	sub	sp, #20
    9eca:	af00      	add	r7, sp, #0
    9ecc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9ece:	687b      	ldr	r3, [r7, #4]
    9ed0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9ed4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    9ed6:	7bfb      	ldrb	r3, [r7, #15]
    9ed8:	089b      	lsrs	r3, r3, #2
    9eda:	b2db      	uxtb	r3, r3
    9edc:	f003 0301 	and.w	r3, r3, #1
    9ee0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9ee2:	7bfb      	ldrb	r3, [r7, #15]
    9ee4:	2b00      	cmp	r3, #0
    9ee6:	bf14      	ite	ne
    9ee8:	2301      	movne	r3, #1
    9eea:	2300      	moveq	r3, #0
    9eec:	b2db      	uxtb	r3, r3
}
    9eee:	4618      	mov	r0, r3
    9ef0:	3714      	adds	r7, #20
    9ef2:	46bd      	mov	sp, r7
    9ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ef8:	4770      	bx	lr

00009efa <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    9efa:	b480      	push	{r7}
    9efc:	b085      	sub	sp, #20
    9efe:	af00      	add	r7, sp, #0
    9f00:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9f02:	687b      	ldr	r3, [r7, #4]
    9f04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9f08:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    9f0a:	7bfb      	ldrb	r3, [r7, #15]
    9f0c:	08db      	lsrs	r3, r3, #3
    9f0e:	b2db      	uxtb	r3, r3
    9f10:	f003 0301 	and.w	r3, r3, #1
    9f14:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9f16:	7bfb      	ldrb	r3, [r7, #15]
    9f18:	2b00      	cmp	r3, #0
    9f1a:	bf14      	ite	ne
    9f1c:	2301      	movne	r3, #1
    9f1e:	2300      	moveq	r3, #0
    9f20:	b2db      	uxtb	r3, r3
}
    9f22:	4618      	mov	r0, r3
    9f24:	3714      	adds	r7, #20
    9f26:	46bd      	mov	sp, r7
    9f28:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f2c:	4770      	bx	lr

00009f2e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    9f2e:	b480      	push	{r7}
    9f30:	b085      	sub	sp, #20
    9f32:	af00      	add	r7, sp, #0
    9f34:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9f36:	687b      	ldr	r3, [r7, #4]
    9f38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9f3c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    9f3e:	7bfb      	ldrb	r3, [r7, #15]
    9f40:	091b      	lsrs	r3, r3, #4
    9f42:	b2db      	uxtb	r3, r3
    9f44:	f003 0301 	and.w	r3, r3, #1
    9f48:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9f4a:	7bfb      	ldrb	r3, [r7, #15]
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	bf14      	ite	ne
    9f50:	2301      	movne	r3, #1
    9f52:	2300      	moveq	r3, #0
    9f54:	b2db      	uxtb	r3, r3
}
    9f56:	4618      	mov	r0, r3
    9f58:	3714      	adds	r7, #20
    9f5a:	46bd      	mov	sp, r7
    9f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f60:	4770      	bx	lr
	...

00009f64 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    9f64:	b580      	push	{r7, lr}
    9f66:	b082      	sub	sp, #8
    9f68:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    9f6a:	4b0a      	ldr	r3, [pc, #40]	; (9f94 <_oscctrl_init_sources+0x30>)
    9f6c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    9f6e:	4a0a      	ldr	r2, [pc, #40]	; (9f98 <_oscctrl_init_sources+0x34>)
    9f70:	2101      	movs	r1, #1
    9f72:	6878      	ldr	r0, [r7, #4]
    9f74:	4b09      	ldr	r3, [pc, #36]	; (9f9c <_oscctrl_init_sources+0x38>)
    9f76:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    9f78:	bf00      	nop
    9f7a:	6878      	ldr	r0, [r7, #4]
    9f7c:	4b08      	ldr	r3, [pc, #32]	; (9fa0 <_oscctrl_init_sources+0x3c>)
    9f7e:	4798      	blx	r3
    9f80:	4603      	mov	r3, r0
    9f82:	f083 0301 	eor.w	r3, r3, #1
    9f86:	b2db      	uxtb	r3, r3
    9f88:	2b00      	cmp	r3, #0
    9f8a:	d1f6      	bne.n	9f7a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    9f8c:	bf00      	nop
    9f8e:	3708      	adds	r7, #8
    9f90:	46bd      	mov	sp, r7
    9f92:	bd80      	pop	{r7, pc}
    9f94:	40001000 	.word	0x40001000
    9f98:	03002646 	.word	0x03002646
    9f9c:	00009dad 	.word	0x00009dad
    9fa0:	00009d37 	.word	0x00009d37

00009fa4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    9fa4:	b580      	push	{r7, lr}
    9fa6:	b084      	sub	sp, #16
    9fa8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    9faa:	4b6b      	ldr	r3, [pc, #428]	; (a158 <_oscctrl_init_referenced_generators+0x1b4>)
    9fac:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    9fae:	2204      	movs	r2, #4
    9fb0:	2100      	movs	r1, #0
    9fb2:	486a      	ldr	r0, [pc, #424]	; (a15c <_oscctrl_init_referenced_generators+0x1b8>)
    9fb4:	4b6a      	ldr	r3, [pc, #424]	; (a160 <_oscctrl_init_referenced_generators+0x1bc>)
    9fb6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    9fb8:	bf00      	nop
    9fba:	4868      	ldr	r0, [pc, #416]	; (a15c <_oscctrl_init_referenced_generators+0x1b8>)
    9fbc:	4b69      	ldr	r3, [pc, #420]	; (a164 <_oscctrl_init_referenced_generators+0x1c0>)
    9fbe:	4798      	blx	r3
    9fc0:	4603      	mov	r3, r0
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	d1f9      	bne.n	9fba <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    9fc6:	2100      	movs	r1, #0
    9fc8:	68f8      	ldr	r0, [r7, #12]
    9fca:	4b67      	ldr	r3, [pc, #412]	; (a168 <_oscctrl_init_referenced_generators+0x1c4>)
    9fcc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    9fce:	4967      	ldr	r1, [pc, #412]	; (a16c <_oscctrl_init_referenced_generators+0x1c8>)
    9fd0:	68f8      	ldr	r0, [r7, #12]
    9fd2:	4b67      	ldr	r3, [pc, #412]	; (a170 <_oscctrl_init_referenced_generators+0x1cc>)
    9fd4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    9fd6:	bf00      	nop
    9fd8:	68f8      	ldr	r0, [r7, #12]
    9fda:	4b66      	ldr	r3, [pc, #408]	; (a174 <_oscctrl_init_referenced_generators+0x1d0>)
    9fdc:	4798      	blx	r3
    9fde:	4603      	mov	r3, r0
    9fe0:	2b00      	cmp	r3, #0
    9fe2:	d1f9      	bne.n	9fd8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    9fe4:	2100      	movs	r1, #0
    9fe6:	68f8      	ldr	r0, [r7, #12]
    9fe8:	4b63      	ldr	r3, [pc, #396]	; (a178 <_oscctrl_init_referenced_generators+0x1d4>)
    9fea:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    9fec:	bf00      	nop
    9fee:	68f8      	ldr	r0, [r7, #12]
    9ff0:	4b62      	ldr	r3, [pc, #392]	; (a17c <_oscctrl_init_referenced_generators+0x1d8>)
    9ff2:	4798      	blx	r3
    9ff4:	4603      	mov	r3, r0
    9ff6:	2b00      	cmp	r3, #0
    9ff8:	d1f9      	bne.n	9fee <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    9ffa:	2302      	movs	r3, #2
    9ffc:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    9ffe:	7afb      	ldrb	r3, [r7, #11]
    a000:	4619      	mov	r1, r3
    a002:	68f8      	ldr	r0, [r7, #12]
    a004:	4b58      	ldr	r3, [pc, #352]	; (a168 <_oscctrl_init_referenced_generators+0x1c4>)
    a006:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    a008:	bf00      	nop
    a00a:	68f8      	ldr	r0, [r7, #12]
    a00c:	4b5c      	ldr	r3, [pc, #368]	; (a180 <_oscctrl_init_referenced_generators+0x1dc>)
    a00e:	4798      	blx	r3
    a010:	4603      	mov	r3, r0
    a012:	2b00      	cmp	r3, #0
    a014:	d1f9      	bne.n	a00a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    a016:	68f8      	ldr	r0, [r7, #12]
    a018:	4b5a      	ldr	r3, [pc, #360]	; (a184 <_oscctrl_init_referenced_generators+0x1e0>)
    a01a:	4798      	blx	r3
    a01c:	4603      	mov	r3, r0
    a01e:	4619      	mov	r1, r3
    a020:	68f8      	ldr	r0, [r7, #12]
    a022:	4b59      	ldr	r3, [pc, #356]	; (a188 <_oscctrl_init_referenced_generators+0x1e4>)
    a024:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    a026:	bf00      	nop
    a028:	68f8      	ldr	r0, [r7, #12]
    a02a:	4b58      	ldr	r3, [pc, #352]	; (a18c <_oscctrl_init_referenced_generators+0x1e8>)
    a02c:	4798      	blx	r3
    a02e:	4603      	mov	r3, r0
    a030:	2b00      	cmp	r3, #0
    a032:	d1f9      	bne.n	a028 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    a034:	2319      	movs	r3, #25
    a036:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    a038:	7afb      	ldrb	r3, [r7, #11]
    a03a:	4619      	mov	r1, r3
    a03c:	68f8      	ldr	r0, [r7, #12]
    a03e:	4b4e      	ldr	r3, [pc, #312]	; (a178 <_oscctrl_init_referenced_generators+0x1d4>)
    a040:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    a042:	bf00      	nop
    a044:	68f8      	ldr	r0, [r7, #12]
    a046:	4b4d      	ldr	r3, [pc, #308]	; (a17c <_oscctrl_init_referenced_generators+0x1d8>)
    a048:	4798      	blx	r3
    a04a:	4603      	mov	r3, r0
    a04c:	2b00      	cmp	r3, #0
    a04e:	d1f9      	bne.n	a044 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    a050:	2245      	movs	r2, #69	; 0x45
    a052:	2101      	movs	r1, #1
    a054:	4841      	ldr	r0, [pc, #260]	; (a15c <_oscctrl_init_referenced_generators+0x1b8>)
    a056:	4b4e      	ldr	r3, [pc, #312]	; (a190 <_oscctrl_init_referenced_generators+0x1ec>)
    a058:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    a05a:	223b      	movs	r2, #59	; 0x3b
    a05c:	2100      	movs	r1, #0
    a05e:	68f8      	ldr	r0, [r7, #12]
    a060:	4b4c      	ldr	r3, [pc, #304]	; (a194 <_oscctrl_init_referenced_generators+0x1f0>)
    a062:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    a064:	f44f 6201 	mov.w	r2, #2064	; 0x810
    a068:	2100      	movs	r1, #0
    a06a:	68f8      	ldr	r0, [r7, #12]
    a06c:	4b4a      	ldr	r3, [pc, #296]	; (a198 <_oscctrl_init_referenced_generators+0x1f4>)
    a06e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    a070:	2242      	movs	r2, #66	; 0x42
    a072:	2100      	movs	r1, #0
    a074:	68f8      	ldr	r0, [r7, #12]
    a076:	4b49      	ldr	r3, [pc, #292]	; (a19c <_oscctrl_init_referenced_generators+0x1f8>)
    a078:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    a07a:	4a49      	ldr	r2, [pc, #292]	; (a1a0 <_oscctrl_init_referenced_generators+0x1fc>)
    a07c:	2101      	movs	r1, #1
    a07e:	68f8      	ldr	r0, [r7, #12]
    a080:	4b44      	ldr	r3, [pc, #272]	; (a194 <_oscctrl_init_referenced_generators+0x1f0>)
    a082:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    a084:	f44f 6203 	mov.w	r2, #2096	; 0x830
    a088:	2101      	movs	r1, #1
    a08a:	68f8      	ldr	r0, [r7, #12]
    a08c:	4b42      	ldr	r3, [pc, #264]	; (a198 <_oscctrl_init_referenced_generators+0x1f4>)
    a08e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    a090:	2202      	movs	r2, #2
    a092:	2101      	movs	r1, #1
    a094:	68f8      	ldr	r0, [r7, #12]
    a096:	4b41      	ldr	r3, [pc, #260]	; (a19c <_oscctrl_init_referenced_generators+0x1f8>)
    a098:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    a09a:	68f8      	ldr	r0, [r7, #12]
    a09c:	4b41      	ldr	r3, [pc, #260]	; (a1a4 <_oscctrl_init_referenced_generators+0x200>)
    a09e:	4798      	blx	r3
    a0a0:	4603      	mov	r3, r0
    a0a2:	2b00      	cmp	r3, #0
    a0a4:	d00c      	beq.n	a0c0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    a0a6:	f44f 6310 	mov.w	r3, #2304	; 0x900
    a0aa:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    a0ac:	bf00      	nop
    a0ae:	6879      	ldr	r1, [r7, #4]
    a0b0:	68f8      	ldr	r0, [r7, #12]
    a0b2:	4b3d      	ldr	r3, [pc, #244]	; (a1a8 <_oscctrl_init_referenced_generators+0x204>)
    a0b4:	4798      	blx	r3
    a0b6:	4602      	mov	r2, r0
    a0b8:	687b      	ldr	r3, [r7, #4]
    a0ba:	429a      	cmp	r2, r3
    a0bc:	d1f7      	bne.n	a0ae <_oscctrl_init_referenced_generators+0x10a>
    a0be:	e009      	b.n	a0d4 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    a0c0:	bf00      	nop
    a0c2:	68f8      	ldr	r0, [r7, #12]
    a0c4:	4b39      	ldr	r3, [pc, #228]	; (a1ac <_oscctrl_init_referenced_generators+0x208>)
    a0c6:	4798      	blx	r3
    a0c8:	4603      	mov	r3, r0
    a0ca:	f083 0301 	eor.w	r3, r3, #1
    a0ce:	b2db      	uxtb	r3, r3
    a0d0:	2b00      	cmp	r3, #0
    a0d2:	d1f6      	bne.n	a0c2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    a0d4:	bf00      	nop
    a0d6:	2100      	movs	r1, #0
    a0d8:	68f8      	ldr	r0, [r7, #12]
    a0da:	4b35      	ldr	r3, [pc, #212]	; (a1b0 <_oscctrl_init_referenced_generators+0x20c>)
    a0dc:	4798      	blx	r3
    a0de:	4603      	mov	r3, r0
    a0e0:	f083 0301 	eor.w	r3, r3, #1
    a0e4:	b2db      	uxtb	r3, r3
    a0e6:	2b00      	cmp	r3, #0
    a0e8:	d009      	beq.n	a0fe <_oscctrl_init_referenced_generators+0x15a>
    a0ea:	2100      	movs	r1, #0
    a0ec:	68f8      	ldr	r0, [r7, #12]
    a0ee:	4b31      	ldr	r3, [pc, #196]	; (a1b4 <_oscctrl_init_referenced_generators+0x210>)
    a0f0:	4798      	blx	r3
    a0f2:	4603      	mov	r3, r0
    a0f4:	f083 0301 	eor.w	r3, r3, #1
    a0f8:	b2db      	uxtb	r3, r3
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	d1eb      	bne.n	a0d6 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    a0fe:	bf00      	nop
    a100:	2101      	movs	r1, #1
    a102:	68f8      	ldr	r0, [r7, #12]
    a104:	4b2a      	ldr	r3, [pc, #168]	; (a1b0 <_oscctrl_init_referenced_generators+0x20c>)
    a106:	4798      	blx	r3
    a108:	4603      	mov	r3, r0
    a10a:	f083 0301 	eor.w	r3, r3, #1
    a10e:	b2db      	uxtb	r3, r3
    a110:	2b00      	cmp	r3, #0
    a112:	d009      	beq.n	a128 <_oscctrl_init_referenced_generators+0x184>
    a114:	2101      	movs	r1, #1
    a116:	68f8      	ldr	r0, [r7, #12]
    a118:	4b26      	ldr	r3, [pc, #152]	; (a1b4 <_oscctrl_init_referenced_generators+0x210>)
    a11a:	4798      	blx	r3
    a11c:	4603      	mov	r3, r0
    a11e:	f083 0301 	eor.w	r3, r3, #1
    a122:	b2db      	uxtb	r3, r3
    a124:	2b00      	cmp	r3, #0
    a126:	d1eb      	bne.n	a100 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    a128:	bf00      	nop
    a12a:	480c      	ldr	r0, [pc, #48]	; (a15c <_oscctrl_init_referenced_generators+0x1b8>)
    a12c:	4b22      	ldr	r3, [pc, #136]	; (a1b8 <_oscctrl_init_referenced_generators+0x214>)
    a12e:	4798      	blx	r3
    a130:	4603      	mov	r3, r0
    a132:	2b00      	cmp	r3, #0
    a134:	d1f9      	bne.n	a12a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    a136:	2207      	movs	r2, #7
    a138:	2100      	movs	r1, #0
    a13a:	4808      	ldr	r0, [pc, #32]	; (a15c <_oscctrl_init_referenced_generators+0x1b8>)
    a13c:	4b08      	ldr	r3, [pc, #32]	; (a160 <_oscctrl_init_referenced_generators+0x1bc>)
    a13e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    a140:	bf00      	nop
    a142:	4806      	ldr	r0, [pc, #24]	; (a15c <_oscctrl_init_referenced_generators+0x1b8>)
    a144:	4b07      	ldr	r3, [pc, #28]	; (a164 <_oscctrl_init_referenced_generators+0x1c0>)
    a146:	4798      	blx	r3
    a148:	4603      	mov	r3, r0
    a14a:	2b00      	cmp	r3, #0
    a14c:	d1f9      	bne.n	a142 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    a14e:	bf00      	nop
    a150:	3710      	adds	r7, #16
    a152:	46bd      	mov	sp, r7
    a154:	bd80      	pop	{r7, pc}
    a156:	bf00      	nop
    a158:	40001000 	.word	0x40001000
    a15c:	40001c00 	.word	0x40001c00
    a160:	00009b71 	.word	0x00009b71
    a164:	00009b31 	.word	0x00009b31
    a168:	00009dd5 	.word	0x00009dd5
    a16c:	0401bb80 	.word	0x0401bb80
    a170:	00009e77 	.word	0x00009e77
    a174:	00009f2f 	.word	0x00009f2f
    a178:	00009e23 	.word	0x00009e23
    a17c:	00009ec7 	.word	0x00009ec7
    a180:	00009e93 	.word	0x00009e93
    a184:	00009e5f 	.word	0x00009e5f
    a188:	00009e43 	.word	0x00009e43
    a18c:	00009efb 	.word	0x00009efb
    a190:	00009bc1 	.word	0x00009bc1
    a194:	00009ccd 	.word	0x00009ccd
    a198:	00009d09 	.word	0x00009d09
    a19c:	00009c91 	.word	0x00009c91
    a1a0:	000407a0 	.word	0x000407a0
    a1a4:	00009df3 	.word	0x00009df3
    a1a8:	00009d87 	.word	0x00009d87
    a1ac:	00009d5f 	.word	0x00009d5f
    a1b0:	00009c1d 	.word	0x00009c1d
    a1b4:	00009c55 	.word	0x00009c55
    a1b8:	00009b59 	.word	0x00009b59

0000a1bc <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    a1bc:	b480      	push	{r7}
    a1be:	b085      	sub	sp, #20
    a1c0:	af00      	add	r7, sp, #0
    a1c2:	6078      	str	r0, [r7, #4]
    a1c4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    a1c6:	687b      	ldr	r3, [r7, #4]
    a1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a1ca:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a1cc:	68fa      	ldr	r2, [r7, #12]
    a1ce:	683b      	ldr	r3, [r7, #0]
    a1d0:	4013      	ands	r3, r2
    a1d2:	60fb      	str	r3, [r7, #12]
	return tmp;
    a1d4:	68fb      	ldr	r3, [r7, #12]
}
    a1d6:	4618      	mov	r0, r3
    a1d8:	3714      	adds	r7, #20
    a1da:	46bd      	mov	sp, r7
    a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1e0:	4770      	bx	lr

0000a1e2 <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    a1e2:	b480      	push	{r7}
    a1e4:	b085      	sub	sp, #20
    a1e6:	af00      	add	r7, sp, #0
    a1e8:	6078      	str	r0, [r7, #4]
    a1ea:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    a1ec:	687b      	ldr	r3, [r7, #4]
    a1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a1f0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a1f2:	68fa      	ldr	r2, [r7, #12]
    a1f4:	683b      	ldr	r3, [r7, #0]
    a1f6:	4013      	ands	r3, r2
    a1f8:	60fb      	str	r3, [r7, #12]
	return tmp;
    a1fa:	68fb      	ldr	r3, [r7, #12]
}
    a1fc:	4618      	mov	r0, r3
    a1fe:	3714      	adds	r7, #20
    a200:	46bd      	mov	sp, r7
    a202:	f85d 7b04 	ldr.w	r7, [sp], #4
    a206:	4770      	bx	lr

0000a208 <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    a208:	b480      	push	{r7}
    a20a:	b085      	sub	sp, #20
    a20c:	af00      	add	r7, sp, #0
    a20e:	6078      	str	r0, [r7, #4]
    a210:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    a212:	687b      	ldr	r3, [r7, #4]
    a214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    a216:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a218:	68fa      	ldr	r2, [r7, #12]
    a21a:	683b      	ldr	r3, [r7, #0]
    a21c:	4013      	ands	r3, r2
    a21e:	60fb      	str	r3, [r7, #12]
	return tmp;
    a220:	68fb      	ldr	r3, [r7, #12]
}
    a222:	4618      	mov	r0, r3
    a224:	3714      	adds	r7, #20
    a226:	46bd      	mov	sp, r7
    a228:	f85d 7b04 	ldr.w	r7, [sp], #4
    a22c:	4770      	bx	lr

0000a22e <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    a22e:	b480      	push	{r7}
    a230:	b085      	sub	sp, #20
    a232:	af00      	add	r7, sp, #0
    a234:	6078      	str	r0, [r7, #4]
    a236:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    a238:	687b      	ldr	r3, [r7, #4]
    a23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a23c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a23e:	68fa      	ldr	r2, [r7, #12]
    a240:	683b      	ldr	r3, [r7, #0]
    a242:	4013      	ands	r3, r2
    a244:	60fb      	str	r3, [r7, #12]
	return tmp;
    a246:	68fb      	ldr	r3, [r7, #12]
}
    a248:	4618      	mov	r0, r3
    a24a:	3714      	adds	r7, #20
    a24c:	46bd      	mov	sp, r7
    a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a252:	4770      	bx	lr

0000a254 <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    a254:	b480      	push	{r7}
    a256:	b083      	sub	sp, #12
    a258:	af00      	add	r7, sp, #0
    a25a:	6078      	str	r0, [r7, #4]
    a25c:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    a25e:	687b      	ldr	r3, [r7, #4]
    a260:	683a      	ldr	r2, [r7, #0]
    a262:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    a264:	bf00      	nop
    a266:	370c      	adds	r7, #12
    a268:	46bd      	mov	sp, r7
    a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a26e:	4770      	bx	lr

0000a270 <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    a270:	b480      	push	{r7}
    a272:	b085      	sub	sp, #20
    a274:	af00      	add	r7, sp, #0
    a276:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    a278:	230a      	movs	r3, #10
    a27a:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    a27c:	687b      	ldr	r3, [r7, #4]
    a27e:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    a282:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    a286:	d101      	bne.n	a28c <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    a288:	230d      	movs	r3, #13
    a28a:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    a28c:	687b      	ldr	r3, [r7, #4]
    a28e:	0e1b      	lsrs	r3, r3, #24
    a290:	f003 030f 	and.w	r3, r3, #15
    a294:	015a      	lsls	r2, r3, #5
    a296:	6879      	ldr	r1, [r7, #4]
    a298:	4b06      	ldr	r3, [pc, #24]	; (a2b4 <_pac_get_peripheral_id+0x44>)
    a29a:	400b      	ands	r3, r1
    a29c:	68f9      	ldr	r1, [r7, #12]
    a29e:	40cb      	lsrs	r3, r1
    a2a0:	4413      	add	r3, r2
    a2a2:	60fb      	str	r3, [r7, #12]

	return peripheral;
    a2a4:	68fb      	ldr	r3, [r7, #12]
}
    a2a6:	4618      	mov	r0, r3
    a2a8:	3714      	adds	r7, #20
    a2aa:	46bd      	mov	sp, r7
    a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2b0:	4770      	bx	lr
    a2b2:	bf00      	nop
    a2b4:	000fff00 	.word	0x000fff00

0000a2b8 <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    a2b8:	b580      	push	{r7, lr}
    a2ba:	b086      	sub	sp, #24
    a2bc:	af00      	add	r7, sp, #0
    a2be:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    a2c0:	687b      	ldr	r3, [r7, #4]
    a2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    a2c6:	bf8c      	ite	hi
    a2c8:	2301      	movhi	r3, #1
    a2ca:	2300      	movls	r3, #0
    a2cc:	b2db      	uxtb	r3, r3
    a2ce:	2239      	movs	r2, #57	; 0x39
    a2d0:	4917      	ldr	r1, [pc, #92]	; (a330 <_periph_lock+0x78>)
    a2d2:	4618      	mov	r0, r3
    a2d4:	4b17      	ldr	r3, [pc, #92]	; (a334 <_periph_lock+0x7c>)
    a2d6:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    a2d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a2dc:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    a2de:	6878      	ldr	r0, [r7, #4]
    a2e0:	4b15      	ldr	r3, [pc, #84]	; (a338 <_periph_lock+0x80>)
    a2e2:	4798      	blx	r3
    a2e4:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    a2e6:	693b      	ldr	r3, [r7, #16]
    a2e8:	b29b      	uxth	r3, r3
    a2ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a2ee:	4619      	mov	r1, r3
    a2f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a2f4:	4b11      	ldr	r3, [pc, #68]	; (a33c <_periph_lock+0x84>)
    a2f6:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    a2f8:	f107 030f 	add.w	r3, r7, #15
    a2fc:	4619      	mov	r1, r3
    a2fe:	6878      	ldr	r0, [r7, #4]
    a300:	4b0f      	ldr	r3, [pc, #60]	; (a340 <_periph_lock+0x88>)
    a302:	4798      	blx	r3
	} while (!stat && timeout--);
    a304:	7bfb      	ldrb	r3, [r7, #15]
    a306:	f083 0301 	eor.w	r3, r3, #1
    a30a:	b2db      	uxtb	r3, r3
    a30c:	2b00      	cmp	r3, #0
    a30e:	d004      	beq.n	a31a <_periph_lock+0x62>
    a310:	697b      	ldr	r3, [r7, #20]
    a312:	1e5a      	subs	r2, r3, #1
    a314:	617a      	str	r2, [r7, #20]
    a316:	2b00      	cmp	r3, #0
    a318:	d1ee      	bne.n	a2f8 <_periph_lock+0x40>

	if (timeout < 0) {
    a31a:	697b      	ldr	r3, [r7, #20]
    a31c:	2b00      	cmp	r3, #0
    a31e:	da02      	bge.n	a326 <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    a320:	f06f 0307 	mvn.w	r3, #7
    a324:	e000      	b.n	a328 <_periph_lock+0x70>
	}

	return ERR_NONE;
    a326:	2300      	movs	r3, #0
}
    a328:	4618      	mov	r0, r3
    a32a:	3718      	adds	r7, #24
    a32c:	46bd      	mov	sp, r7
    a32e:	bd80      	pop	{r7, pc}
    a330:	00020c78 	.word	0x00020c78
    a334:	00008145 	.word	0x00008145
    a338:	0000a271 	.word	0x0000a271
    a33c:	0000a255 	.word	0x0000a255
    a340:	0000a3cd 	.word	0x0000a3cd

0000a344 <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    a344:	b580      	push	{r7, lr}
    a346:	b086      	sub	sp, #24
    a348:	af00      	add	r7, sp, #0
    a34a:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    a34c:	687b      	ldr	r3, [r7, #4]
    a34e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    a352:	bf8c      	ite	hi
    a354:	2301      	movhi	r3, #1
    a356:	2300      	movls	r3, #0
    a358:	b2db      	uxtb	r3, r3
    a35a:	2253      	movs	r2, #83	; 0x53
    a35c:	4916      	ldr	r1, [pc, #88]	; (a3b8 <_periph_unlock+0x74>)
    a35e:	4618      	mov	r0, r3
    a360:	4b16      	ldr	r3, [pc, #88]	; (a3bc <_periph_unlock+0x78>)
    a362:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    a364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a368:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    a36a:	6878      	ldr	r0, [r7, #4]
    a36c:	4b14      	ldr	r3, [pc, #80]	; (a3c0 <_periph_unlock+0x7c>)
    a36e:	4798      	blx	r3
    a370:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    a372:	693b      	ldr	r3, [r7, #16]
    a374:	b29b      	uxth	r3, r3
    a376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a37a:	4619      	mov	r1, r3
    a37c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a380:	4b10      	ldr	r3, [pc, #64]	; (a3c4 <_periph_unlock+0x80>)
    a382:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    a384:	f107 030f 	add.w	r3, r7, #15
    a388:	4619      	mov	r1, r3
    a38a:	6878      	ldr	r0, [r7, #4]
    a38c:	4b0e      	ldr	r3, [pc, #56]	; (a3c8 <_periph_unlock+0x84>)
    a38e:	4798      	blx	r3
	} while (stat && timeout--);
    a390:	7bfb      	ldrb	r3, [r7, #15]
    a392:	2b00      	cmp	r3, #0
    a394:	d004      	beq.n	a3a0 <_periph_unlock+0x5c>
    a396:	697b      	ldr	r3, [r7, #20]
    a398:	1e5a      	subs	r2, r3, #1
    a39a:	617a      	str	r2, [r7, #20]
    a39c:	2b00      	cmp	r3, #0
    a39e:	d1f1      	bne.n	a384 <_periph_unlock+0x40>

	if (timeout < 0) {
    a3a0:	697b      	ldr	r3, [r7, #20]
    a3a2:	2b00      	cmp	r3, #0
    a3a4:	da02      	bge.n	a3ac <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    a3a6:	f06f 0307 	mvn.w	r3, #7
    a3aa:	e000      	b.n	a3ae <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    a3ac:	2300      	movs	r3, #0
}
    a3ae:	4618      	mov	r0, r3
    a3b0:	3718      	adds	r7, #24
    a3b2:	46bd      	mov	sp, r7
    a3b4:	bd80      	pop	{r7, pc}
    a3b6:	bf00      	nop
    a3b8:	00020c78 	.word	0x00020c78
    a3bc:	00008145 	.word	0x00008145
    a3c0:	0000a271 	.word	0x0000a271
    a3c4:	0000a255 	.word	0x0000a255
    a3c8:	0000a3cd 	.word	0x0000a3cd

0000a3cc <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    a3cc:	b580      	push	{r7, lr}
    a3ce:	b084      	sub	sp, #16
    a3d0:	af00      	add	r7, sp, #0
    a3d2:	6078      	str	r0, [r7, #4]
    a3d4:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    a3d6:	687b      	ldr	r3, [r7, #4]
    a3d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    a3dc:	bf8c      	ite	hi
    a3de:	2301      	movhi	r3, #1
    a3e0:	2300      	movls	r3, #0
    a3e2:	b2db      	uxtb	r3, r3
    a3e4:	226d      	movs	r2, #109	; 0x6d
    a3e6:	4931      	ldr	r1, [pc, #196]	; (a4ac <_periph_get_lock_state+0xe0>)
    a3e8:	4618      	mov	r0, r3
    a3ea:	4b31      	ldr	r3, [pc, #196]	; (a4b0 <_periph_get_lock_state+0xe4>)
    a3ec:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    a3ee:	6878      	ldr	r0, [r7, #4]
    a3f0:	4b30      	ldr	r3, [pc, #192]	; (a4b4 <_periph_get_lock_state+0xe8>)
    a3f2:	4798      	blx	r3
    a3f4:	4603      	mov	r3, r0
    a3f6:	f003 031f 	and.w	r3, r3, #31
    a3fa:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    a3fc:	687b      	ldr	r3, [r7, #4]
    a3fe:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    a402:	d211      	bcs.n	a428 <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    a404:	2201      	movs	r2, #1
    a406:	68fb      	ldr	r3, [r7, #12]
    a408:	fa02 f303 	lsl.w	r3, r2, r3
    a40c:	4619      	mov	r1, r3
    a40e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a412:	4b29      	ldr	r3, [pc, #164]	; (a4b8 <_periph_get_lock_state+0xec>)
    a414:	4798      	blx	r3
    a416:	4603      	mov	r3, r0
    a418:	2b00      	cmp	r3, #0
    a41a:	bf14      	ite	ne
    a41c:	2301      	movne	r3, #1
    a41e:	2300      	moveq	r3, #0
    a420:	b2da      	uxtb	r2, r3
    a422:	683b      	ldr	r3, [r7, #0]
    a424:	701a      	strb	r2, [r3, #0]
    a426:	e03c      	b.n	a4a2 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    a428:	687b      	ldr	r3, [r7, #4]
    a42a:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    a42e:	d211      	bcs.n	a454 <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    a430:	2201      	movs	r2, #1
    a432:	68fb      	ldr	r3, [r7, #12]
    a434:	fa02 f303 	lsl.w	r3, r2, r3
    a438:	4619      	mov	r1, r3
    a43a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a43e:	4b1f      	ldr	r3, [pc, #124]	; (a4bc <_periph_get_lock_state+0xf0>)
    a440:	4798      	blx	r3
    a442:	4603      	mov	r3, r0
    a444:	2b00      	cmp	r3, #0
    a446:	bf14      	ite	ne
    a448:	2301      	movne	r3, #1
    a44a:	2300      	moveq	r3, #0
    a44c:	b2da      	uxtb	r2, r3
    a44e:	683b      	ldr	r3, [r7, #0]
    a450:	701a      	strb	r2, [r3, #0]
    a452:	e026      	b.n	a4a2 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    a454:	687b      	ldr	r3, [r7, #4]
    a456:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    a45a:	d211      	bcs.n	a480 <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    a45c:	2201      	movs	r2, #1
    a45e:	68fb      	ldr	r3, [r7, #12]
    a460:	fa02 f303 	lsl.w	r3, r2, r3
    a464:	4619      	mov	r1, r3
    a466:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a46a:	4b15      	ldr	r3, [pc, #84]	; (a4c0 <_periph_get_lock_state+0xf4>)
    a46c:	4798      	blx	r3
    a46e:	4603      	mov	r3, r0
    a470:	2b00      	cmp	r3, #0
    a472:	bf14      	ite	ne
    a474:	2301      	movne	r3, #1
    a476:	2300      	moveq	r3, #0
    a478:	b2da      	uxtb	r2, r3
    a47a:	683b      	ldr	r3, [r7, #0]
    a47c:	701a      	strb	r2, [r3, #0]
    a47e:	e010      	b.n	a4a2 <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    a480:	2201      	movs	r2, #1
    a482:	68fb      	ldr	r3, [r7, #12]
    a484:	fa02 f303 	lsl.w	r3, r2, r3
    a488:	4619      	mov	r1, r3
    a48a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    a48e:	4b0d      	ldr	r3, [pc, #52]	; (a4c4 <_periph_get_lock_state+0xf8>)
    a490:	4798      	blx	r3
    a492:	4603      	mov	r3, r0
    a494:	2b00      	cmp	r3, #0
    a496:	bf14      	ite	ne
    a498:	2301      	movne	r3, #1
    a49a:	2300      	moveq	r3, #0
    a49c:	b2da      	uxtb	r2, r3
    a49e:	683b      	ldr	r3, [r7, #0]
    a4a0:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    a4a2:	2300      	movs	r3, #0
}
    a4a4:	4618      	mov	r0, r3
    a4a6:	3710      	adds	r7, #16
    a4a8:	46bd      	mov	sp, r7
    a4aa:	bd80      	pop	{r7, pc}
    a4ac:	00020c78 	.word	0x00020c78
    a4b0:	00008145 	.word	0x00008145
    a4b4:	0000a271 	.word	0x0000a271
    a4b8:	0000a1bd 	.word	0x0000a1bd
    a4bc:	0000a1e3 	.word	0x0000a1e3
    a4c0:	0000a209 	.word	0x0000a209
    a4c4:	0000a22f 	.word	0x0000a22f

0000a4c8 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    a4c8:	b480      	push	{r7}
    a4ca:	b083      	sub	sp, #12
    a4cc:	af00      	add	r7, sp, #0
    a4ce:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    a4d0:	687b      	ldr	r3, [r7, #4]
    a4d2:	69db      	ldr	r3, [r3, #28]
    a4d4:	0a9b      	lsrs	r3, r3, #10
    a4d6:	f003 0301 	and.w	r3, r3, #1
    a4da:	2b00      	cmp	r3, #0
    a4dc:	bf14      	ite	ne
    a4de:	2301      	movne	r3, #1
    a4e0:	2300      	moveq	r3, #0
    a4e2:	b2db      	uxtb	r3, r3
}
    a4e4:	4618      	mov	r0, r3
    a4e6:	370c      	adds	r7, #12
    a4e8:	46bd      	mov	sp, r7
    a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4ee:	4770      	bx	lr

0000a4f0 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    a4f0:	b480      	push	{r7}
    a4f2:	b083      	sub	sp, #12
    a4f4:	af00      	add	r7, sp, #0
    a4f6:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    a4f8:	687b      	ldr	r3, [r7, #4]
    a4fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a4fe:	61da      	str	r2, [r3, #28]
}
    a500:	bf00      	nop
    a502:	370c      	adds	r7, #12
    a504:	46bd      	mov	sp, r7
    a506:	f85d 7b04 	ldr.w	r7, [sp], #4
    a50a:	4770      	bx	lr

0000a50c <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    a50c:	b480      	push	{r7}
    a50e:	b083      	sub	sp, #12
    a510:	af00      	add	r7, sp, #0
    a512:	6078      	str	r0, [r7, #4]
    a514:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    a516:	687b      	ldr	r3, [r7, #4]
    a518:	683a      	ldr	r2, [r7, #0]
    a51a:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a51c:	bf00      	nop
    a51e:	370c      	adds	r7, #12
    a520:	46bd      	mov	sp, r7
    a522:	f85d 7b04 	ldr.w	r7, [sp], #4
    a526:	4770      	bx	lr

0000a528 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    a528:	b480      	push	{r7}
    a52a:	b083      	sub	sp, #12
    a52c:	af00      	add	r7, sp, #0
    a52e:	6078      	str	r0, [r7, #4]
    a530:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    a532:	687b      	ldr	r3, [r7, #4]
    a534:	683a      	ldr	r2, [r7, #0]
    a536:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a538:	bf00      	nop
    a53a:	370c      	adds	r7, #12
    a53c:	46bd      	mov	sp, r7
    a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a542:	4770      	bx	lr

0000a544 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    a544:	b480      	push	{r7}
    a546:	b083      	sub	sp, #12
    a548:	af00      	add	r7, sp, #0
    a54a:	6078      	str	r0, [r7, #4]
    a54c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    a54e:	687b      	ldr	r3, [r7, #4]
    a550:	683a      	ldr	r2, [r7, #0]
    a552:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a554:	bf00      	nop
    a556:	370c      	adds	r7, #12
    a558:	46bd      	mov	sp, r7
    a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a55e:	4770      	bx	lr

0000a560 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    a560:	b480      	push	{r7}
    a562:	b083      	sub	sp, #12
    a564:	af00      	add	r7, sp, #0
    a566:	6078      	str	r0, [r7, #4]
    a568:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    a56a:	687b      	ldr	r3, [r7, #4]
    a56c:	683a      	ldr	r2, [r7, #0]
    a56e:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a570:	bf00      	nop
    a572:	370c      	adds	r7, #12
    a574:	46bd      	mov	sp, r7
    a576:	f85d 7b04 	ldr.w	r7, [sp], #4
    a57a:	4770      	bx	lr

0000a57c <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    a57c:	b480      	push	{r7}
    a57e:	b085      	sub	sp, #20
    a580:	af00      	add	r7, sp, #0
    a582:	6078      	str	r0, [r7, #4]
    a584:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    a586:	687b      	ldr	r3, [r7, #4]
    a588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a58a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    a58c:	68fb      	ldr	r3, [r7, #12]
    a58e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a592:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    a594:	683b      	ldr	r3, [r7, #0]
    a596:	b2db      	uxtb	r3, r3
    a598:	68fa      	ldr	r2, [r7, #12]
    a59a:	4313      	orrs	r3, r2
    a59c:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    a59e:	687b      	ldr	r3, [r7, #4]
    a5a0:	68fa      	ldr	r2, [r7, #12]
    a5a2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a5a4:	bf00      	nop
    a5a6:	3714      	adds	r7, #20
    a5a8:	46bd      	mov	sp, r7
    a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5ae:	4770      	bx	lr

0000a5b0 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    a5b0:	b480      	push	{r7}
    a5b2:	b085      	sub	sp, #20
    a5b4:	af00      	add	r7, sp, #0
    a5b6:	6078      	str	r0, [r7, #4]
    a5b8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    a5ba:	687b      	ldr	r3, [r7, #4]
    a5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a5be:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    a5c0:	68fb      	ldr	r3, [r7, #12]
    a5c2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    a5c6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    a5c8:	683b      	ldr	r3, [r7, #0]
    a5ca:	041b      	lsls	r3, r3, #16
    a5cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a5d0:	68fa      	ldr	r2, [r7, #12]
    a5d2:	4313      	orrs	r3, r2
    a5d4:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    a5d6:	687b      	ldr	r3, [r7, #4]
    a5d8:	68fa      	ldr	r2, [r7, #12]
    a5da:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a5dc:	bf00      	nop
    a5de:	3714      	adds	r7, #20
    a5e0:	46bd      	mov	sp, r7
    a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5e6:	4770      	bx	lr

0000a5e8 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    a5e8:	b480      	push	{r7}
    a5ea:	b083      	sub	sp, #12
    a5ec:	af00      	add	r7, sp, #0
    a5ee:	6078      	str	r0, [r7, #4]
    a5f0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    a5f2:	687b      	ldr	r3, [r7, #4]
    a5f4:	683a      	ldr	r2, [r7, #0]
    a5f6:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    a5f8:	bf00      	nop
    a5fa:	370c      	adds	r7, #12
    a5fc:	46bd      	mov	sp, r7
    a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a602:	4770      	bx	lr

0000a604 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    a604:	b480      	push	{r7}
    a606:	b083      	sub	sp, #12
    a608:	af00      	add	r7, sp, #0
    a60a:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    a60c:	687b      	ldr	r3, [r7, #4]
    a60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    a610:	4618      	mov	r0, r3
    a612:	370c      	adds	r7, #12
    a614:	46bd      	mov	sp, r7
    a616:	f85d 7b04 	ldr.w	r7, [sp], #4
    a61a:	4770      	bx	lr

0000a61c <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    a61c:	b480      	push	{r7}
    a61e:	b085      	sub	sp, #20
    a620:	af00      	add	r7, sp, #0
    a622:	60f8      	str	r0, [r7, #12]
    a624:	60b9      	str	r1, [r7, #8]
    a626:	607a      	str	r2, [r7, #4]
	while (count--) {
    a628:	e007      	b.n	a63a <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    a62a:	68fb      	ldr	r3, [r7, #12]
    a62c:	1c5a      	adds	r2, r3, #1
    a62e:	60fa      	str	r2, [r7, #12]
    a630:	68ba      	ldr	r2, [r7, #8]
    a632:	1c51      	adds	r1, r2, #1
    a634:	60b9      	str	r1, [r7, #8]
    a636:	7812      	ldrb	r2, [r2, #0]
    a638:	701a      	strb	r2, [r3, #0]
	while (count--) {
    a63a:	687b      	ldr	r3, [r7, #4]
    a63c:	1e5a      	subs	r2, r3, #1
    a63e:	607a      	str	r2, [r7, #4]
    a640:	2b00      	cmp	r3, #0
    a642:	d1f2      	bne.n	a62a <_qspi_memcpy+0xe>
	}
}
    a644:	bf00      	nop
    a646:	3714      	adds	r7, #20
    a648:	46bd      	mov	sp, r7
    a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a64e:	4770      	bx	lr

0000a650 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    a650:	b580      	push	{r7, lr}
    a652:	b082      	sub	sp, #8
    a654:	af00      	add	r7, sp, #0
    a656:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    a658:	4903      	ldr	r1, [pc, #12]	; (a668 <_qspi_end_transfer+0x18>)
    a65a:	6878      	ldr	r0, [r7, #4]
    a65c:	4b03      	ldr	r3, [pc, #12]	; (a66c <_qspi_end_transfer+0x1c>)
    a65e:	4798      	blx	r3
}
    a660:	bf00      	nop
    a662:	3708      	adds	r7, #8
    a664:	46bd      	mov	sp, r7
    a666:	bd80      	pop	{r7, pc}
    a668:	01000002 	.word	0x01000002
    a66c:	0000a50d 	.word	0x0000a50d

0000a670 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    a670:	b580      	push	{r7, lr}
    a672:	b082      	sub	sp, #8
    a674:	af00      	add	r7, sp, #0
    a676:	6078      	str	r0, [r7, #4]
    a678:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    a67a:	687b      	ldr	r3, [r7, #4]
    a67c:	2b00      	cmp	r3, #0
    a67e:	d004      	beq.n	a68a <_qspi_sync_init+0x1a>
    a680:	683b      	ldr	r3, [r7, #0]
    a682:	2b00      	cmp	r3, #0
    a684:	d001      	beq.n	a68a <_qspi_sync_init+0x1a>
    a686:	2301      	movs	r3, #1
    a688:	e000      	b.n	a68c <_qspi_sync_init+0x1c>
    a68a:	2300      	movs	r3, #0
    a68c:	f003 0301 	and.w	r3, r3, #1
    a690:	b2db      	uxtb	r3, r3
    a692:	2240      	movs	r2, #64	; 0x40
    a694:	490c      	ldr	r1, [pc, #48]	; (a6c8 <_qspi_sync_init+0x58>)
    a696:	4618      	mov	r0, r3
    a698:	4b0c      	ldr	r3, [pc, #48]	; (a6cc <_qspi_sync_init+0x5c>)
    a69a:	4798      	blx	r3
	dev->prvt = hw;
    a69c:	687b      	ldr	r3, [r7, #4]
    a69e:	683a      	ldr	r2, [r7, #0]
    a6a0:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    a6a2:	687b      	ldr	r3, [r7, #4]
    a6a4:	681b      	ldr	r3, [r3, #0]
    a6a6:	2101      	movs	r1, #1
    a6a8:	4618      	mov	r0, r3
    a6aa:	4b09      	ldr	r3, [pc, #36]	; (a6d0 <_qspi_sync_init+0x60>)
    a6ac:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    a6ae:	4909      	ldr	r1, [pc, #36]	; (a6d4 <_qspi_sync_init+0x64>)
    a6b0:	6838      	ldr	r0, [r7, #0]
    a6b2:	4b09      	ldr	r3, [pc, #36]	; (a6d8 <_qspi_sync_init+0x68>)
    a6b4:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    a6b6:	4909      	ldr	r1, [pc, #36]	; (a6dc <_qspi_sync_init+0x6c>)
    a6b8:	6838      	ldr	r0, [r7, #0]
    a6ba:	4b09      	ldr	r3, [pc, #36]	; (a6e0 <_qspi_sync_init+0x70>)
    a6bc:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    a6be:	2300      	movs	r3, #0
}
    a6c0:	4618      	mov	r0, r3
    a6c2:	3708      	adds	r7, #8
    a6c4:	46bd      	mov	sp, r7
    a6c6:	bd80      	pop	{r7, pc}
    a6c8:	00020c90 	.word	0x00020c90
    a6cc:	00008145 	.word	0x00008145
    a6d0:	0000a50d 	.word	0x0000a50d
    a6d4:	06000011 	.word	0x06000011
    a6d8:	0000a529 	.word	0x0000a529
    a6dc:	00241300 	.word	0x00241300
    a6e0:	0000a545 	.word	0x0000a545

0000a6e4 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    a6e4:	b580      	push	{r7, lr}
    a6e6:	b082      	sub	sp, #8
    a6e8:	af00      	add	r7, sp, #0
    a6ea:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    a6ec:	687b      	ldr	r3, [r7, #4]
    a6ee:	681b      	ldr	r3, [r3, #0]
    a6f0:	2102      	movs	r1, #2
    a6f2:	4618      	mov	r0, r3
    a6f4:	4b03      	ldr	r3, [pc, #12]	; (a704 <_qspi_sync_enable+0x20>)
    a6f6:	4798      	blx	r3
	return ERR_NONE;
    a6f8:	2300      	movs	r3, #0
}
    a6fa:	4618      	mov	r0, r3
    a6fc:	3708      	adds	r7, #8
    a6fe:	46bd      	mov	sp, r7
    a700:	bd80      	pop	{r7, pc}
    a702:	bf00      	nop
    a704:	0000a50d 	.word	0x0000a50d

0000a708 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    a708:	b580      	push	{r7, lr}
    a70a:	b082      	sub	sp, #8
    a70c:	af00      	add	r7, sp, #0
    a70e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    a710:	687b      	ldr	r3, [r7, #4]
    a712:	681b      	ldr	r3, [r3, #0]
    a714:	2100      	movs	r1, #0
    a716:	4618      	mov	r0, r3
    a718:	4b03      	ldr	r3, [pc, #12]	; (a728 <_qspi_sync_disable+0x20>)
    a71a:	4798      	blx	r3
	return ERR_NONE;
    a71c:	2300      	movs	r3, #0
}
    a71e:	4618      	mov	r0, r3
    a720:	3708      	adds	r7, #8
    a722:	46bd      	mov	sp, r7
    a724:	bd80      	pop	{r7, pc}
    a726:	bf00      	nop
    a728:	0000a50d 	.word	0x0000a50d

0000a72c <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a72c:	b580      	push	{r7, lr}
    a72e:	b084      	sub	sp, #16
    a730:	af00      	add	r7, sp, #0
    a732:	6078      	str	r0, [r7, #4]
    a734:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    a736:	687b      	ldr	r3, [r7, #4]
    a738:	681b      	ldr	r3, [r3, #0]
    a73a:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    a73c:	683b      	ldr	r3, [r7, #0]
    a73e:	781b      	ldrb	r3, [r3, #0]
    a740:	f003 0320 	and.w	r3, r3, #32
    a744:	b2db      	uxtb	r3, r3
    a746:	2b00      	cmp	r3, #0
    a748:	d005      	beq.n	a756 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    a74a:	683b      	ldr	r3, [r7, #0]
    a74c:	689b      	ldr	r3, [r3, #8]
    a74e:	4619      	mov	r1, r3
    a750:	68f8      	ldr	r0, [r7, #12]
    a752:	4b13      	ldr	r3, [pc, #76]	; (a7a0 <_qspi_sync_command_set_ifr+0x74>)
    a754:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    a756:	683b      	ldr	r3, [r7, #0]
    a758:	781b      	ldrb	r3, [r3, #0]
    a75a:	f003 0310 	and.w	r3, r3, #16
    a75e:	b2db      	uxtb	r3, r3
    a760:	2b00      	cmp	r3, #0
    a762:	d005      	beq.n	a770 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    a764:	683b      	ldr	r3, [r7, #0]
    a766:	791b      	ldrb	r3, [r3, #4]
    a768:	4619      	mov	r1, r3
    a76a:	68f8      	ldr	r0, [r7, #12]
    a76c:	4b0d      	ldr	r3, [pc, #52]	; (a7a4 <_qspi_sync_command_set_ifr+0x78>)
    a76e:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    a770:	683b      	ldr	r3, [r7, #0]
    a772:	781b      	ldrb	r3, [r3, #0]
    a774:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a778:	b2db      	uxtb	r3, r3
    a77a:	2b00      	cmp	r3, #0
    a77c:	d005      	beq.n	a78a <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    a77e:	683b      	ldr	r3, [r7, #0]
    a780:	795b      	ldrb	r3, [r3, #5]
    a782:	4619      	mov	r1, r3
    a784:	68f8      	ldr	r0, [r7, #12]
    a786:	4b08      	ldr	r3, [pc, #32]	; (a7a8 <_qspi_sync_command_set_ifr+0x7c>)
    a788:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    a78a:	683b      	ldr	r3, [r7, #0]
    a78c:	681b      	ldr	r3, [r3, #0]
    a78e:	4619      	mov	r1, r3
    a790:	68f8      	ldr	r0, [r7, #12]
    a792:	4b06      	ldr	r3, [pc, #24]	; (a7ac <_qspi_sync_command_set_ifr+0x80>)
    a794:	4798      	blx	r3
}
    a796:	bf00      	nop
    a798:	3710      	adds	r7, #16
    a79a:	46bd      	mov	sp, r7
    a79c:	bd80      	pop	{r7, pc}
    a79e:	bf00      	nop
    a7a0:	0000a561 	.word	0x0000a561
    a7a4:	0000a57d 	.word	0x0000a57d
    a7a8:	0000a5b1 	.word	0x0000a5b1
    a7ac:	0000a5e9 	.word	0x0000a5e9

0000a7b0 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a7b0:	b580      	push	{r7, lr}
    a7b2:	b084      	sub	sp, #16
    a7b4:	af00      	add	r7, sp, #0
    a7b6:	6078      	str	r0, [r7, #4]
    a7b8:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    a7ba:	687b      	ldr	r3, [r7, #4]
    a7bc:	681b      	ldr	r3, [r3, #0]
    a7be:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    a7c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a7c4:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    a7c6:	683b      	ldr	r3, [r7, #0]
    a7c8:	781b      	ldrb	r3, [r3, #0]
    a7ca:	f003 0320 	and.w	r3, r3, #32
    a7ce:	b2db      	uxtb	r3, r3
    a7d0:	2b00      	cmp	r3, #0
    a7d2:	d004      	beq.n	a7de <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    a7d4:	683b      	ldr	r3, [r7, #0]
    a7d6:	689b      	ldr	r3, [r3, #8]
    a7d8:	68fa      	ldr	r2, [r7, #12]
    a7da:	4413      	add	r3, r2
    a7dc:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    a7de:	68b8      	ldr	r0, [r7, #8]
    a7e0:	4b18      	ldr	r3, [pc, #96]	; (a844 <_qspi_sync_run_transfer+0x94>)
    a7e2:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    a7e4:	683b      	ldr	r3, [r7, #0]
    a7e6:	691b      	ldr	r3, [r3, #16]
    a7e8:	2b00      	cmp	r3, #0
    a7ea:	d103      	bne.n	a7f4 <_qspi_sync_run_transfer+0x44>
    a7ec:	683b      	ldr	r3, [r7, #0]
    a7ee:	695b      	ldr	r3, [r3, #20]
    a7f0:	2b00      	cmp	r3, #0
    a7f2:	d001      	beq.n	a7f8 <_qspi_sync_run_transfer+0x48>
    a7f4:	2301      	movs	r3, #1
    a7f6:	e000      	b.n	a7fa <_qspi_sync_run_transfer+0x4a>
    a7f8:	2300      	movs	r3, #0
    a7fa:	f003 0301 	and.w	r3, r3, #1
    a7fe:	b2db      	uxtb	r3, r3
    a800:	2282      	movs	r2, #130	; 0x82
    a802:	4911      	ldr	r1, [pc, #68]	; (a848 <_qspi_sync_run_transfer+0x98>)
    a804:	4618      	mov	r0, r3
    a806:	4b11      	ldr	r3, [pc, #68]	; (a84c <_qspi_sync_run_transfer+0x9c>)
    a808:	4798      	blx	r3

	if (cmd->tx_buf) {
    a80a:	683b      	ldr	r3, [r7, #0]
    a80c:	691b      	ldr	r3, [r3, #16]
    a80e:	2b00      	cmp	r3, #0
    a810:	d008      	beq.n	a824 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    a812:	683b      	ldr	r3, [r7, #0]
    a814:	6919      	ldr	r1, [r3, #16]
    a816:	683b      	ldr	r3, [r7, #0]
    a818:	68db      	ldr	r3, [r3, #12]
    a81a:	461a      	mov	r2, r3
    a81c:	68f8      	ldr	r0, [r7, #12]
    a81e:	4b0c      	ldr	r3, [pc, #48]	; (a850 <_qspi_sync_run_transfer+0xa0>)
    a820:	4798      	blx	r3
    a822:	e007      	b.n	a834 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    a824:	683b      	ldr	r3, [r7, #0]
    a826:	6958      	ldr	r0, [r3, #20]
    a828:	683b      	ldr	r3, [r7, #0]
    a82a:	68db      	ldr	r3, [r3, #12]
    a82c:	461a      	mov	r2, r3
    a82e:	68f9      	ldr	r1, [r7, #12]
    a830:	4b07      	ldr	r3, [pc, #28]	; (a850 <_qspi_sync_run_transfer+0xa0>)
    a832:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    a834:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a838:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    a83c:	bf00      	nop
    a83e:	3710      	adds	r7, #16
    a840:	46bd      	mov	sp, r7
    a842:	bd80      	pop	{r7, pc}
    a844:	0000a605 	.word	0x0000a605
    a848:	00020c90 	.word	0x00020c90
    a84c:	00008145 	.word	0x00008145
    a850:	0000a61d 	.word	0x0000a61d

0000a854 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a854:	b580      	push	{r7, lr}
    a856:	b082      	sub	sp, #8
    a858:	af00      	add	r7, sp, #0
    a85a:	6078      	str	r0, [r7, #4]
    a85c:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    a85e:	6839      	ldr	r1, [r7, #0]
    a860:	6878      	ldr	r0, [r7, #4]
    a862:	4b14      	ldr	r3, [pc, #80]	; (a8b4 <_qspi_sync_serial_run_command+0x60>)
    a864:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    a866:	683b      	ldr	r3, [r7, #0]
    a868:	781b      	ldrb	r3, [r3, #0]
    a86a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a86e:	b2db      	uxtb	r3, r3
    a870:	2b00      	cmp	r3, #0
    a872:	d003      	beq.n	a87c <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    a874:	6839      	ldr	r1, [r7, #0]
    a876:	6878      	ldr	r0, [r7, #4]
    a878:	4b0f      	ldr	r3, [pc, #60]	; (a8b8 <_qspi_sync_serial_run_command+0x64>)
    a87a:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    a87c:	687b      	ldr	r3, [r7, #4]
    a87e:	681b      	ldr	r3, [r3, #0]
    a880:	4618      	mov	r0, r3
    a882:	4b0e      	ldr	r3, [pc, #56]	; (a8bc <_qspi_sync_serial_run_command+0x68>)
    a884:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    a886:	bf00      	nop
    a888:	687b      	ldr	r3, [r7, #4]
    a88a:	681b      	ldr	r3, [r3, #0]
    a88c:	4618      	mov	r0, r3
    a88e:	4b0c      	ldr	r3, [pc, #48]	; (a8c0 <_qspi_sync_serial_run_command+0x6c>)
    a890:	4798      	blx	r3
    a892:	4603      	mov	r3, r0
    a894:	f083 0301 	eor.w	r3, r3, #1
    a898:	b2db      	uxtb	r3, r3
    a89a:	2b00      	cmp	r3, #0
    a89c:	d1f4      	bne.n	a888 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    a89e:	687b      	ldr	r3, [r7, #4]
    a8a0:	681b      	ldr	r3, [r3, #0]
    a8a2:	4618      	mov	r0, r3
    a8a4:	4b07      	ldr	r3, [pc, #28]	; (a8c4 <_qspi_sync_serial_run_command+0x70>)
    a8a6:	4798      	blx	r3
	return ERR_NONE;
    a8a8:	2300      	movs	r3, #0
}
    a8aa:	4618      	mov	r0, r3
    a8ac:	3708      	adds	r7, #8
    a8ae:	46bd      	mov	sp, r7
    a8b0:	bd80      	pop	{r7, pc}
    a8b2:	bf00      	nop
    a8b4:	0000a72d 	.word	0x0000a72d
    a8b8:	0000a7b1 	.word	0x0000a7b1
    a8bc:	0000a651 	.word	0x0000a651
    a8c0:	0000a4c9 	.word	0x0000a4c9
    a8c4:	0000a4f1 	.word	0x0000a4f1

0000a8c8 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    a8c8:	b480      	push	{r7}
    a8ca:	b083      	sub	sp, #12
    a8cc:	af00      	add	r7, sp, #0
    a8ce:	6078      	str	r0, [r7, #4]
    a8d0:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    a8d2:	bf00      	nop
    a8d4:	687b      	ldr	r3, [r7, #4]
    a8d6:	691a      	ldr	r2, [r3, #16]
    a8d8:	683b      	ldr	r3, [r7, #0]
    a8da:	4013      	ands	r3, r2
    a8dc:	2b00      	cmp	r3, #0
    a8de:	d1f9      	bne.n	a8d4 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    a8e0:	bf00      	nop
    a8e2:	370c      	adds	r7, #12
    a8e4:	46bd      	mov	sp, r7
    a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8ea:	4770      	bx	lr

0000a8ec <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    a8ec:	b480      	push	{r7}
    a8ee:	b083      	sub	sp, #12
    a8f0:	af00      	add	r7, sp, #0
    a8f2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    a8f4:	687b      	ldr	r3, [r7, #4]
    a8f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    a8fa:	819a      	strh	r2, [r3, #12]
}
    a8fc:	bf00      	nop
    a8fe:	370c      	adds	r7, #12
    a900:	46bd      	mov	sp, r7
    a902:	f85d 7b04 	ldr.w	r7, [sp], #4
    a906:	4770      	bx	lr

0000a908 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    a908:	b480      	push	{r7}
    a90a:	b083      	sub	sp, #12
    a90c:	af00      	add	r7, sp, #0
    a90e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    a910:	687b      	ldr	r3, [r7, #4]
    a912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a916:	819a      	strh	r2, [r3, #12]
}
    a918:	bf00      	nop
    a91a:	370c      	adds	r7, #12
    a91c:	46bd      	mov	sp, r7
    a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a922:	4770      	bx	lr

0000a924 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    a924:	b480      	push	{r7}
    a926:	b083      	sub	sp, #12
    a928:	af00      	add	r7, sp, #0
    a92a:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    a92c:	687b      	ldr	r3, [r7, #4]
    a92e:	899b      	ldrh	r3, [r3, #12]
    a930:	b29b      	uxth	r3, r3
}
    a932:	4618      	mov	r0, r3
    a934:	370c      	adds	r7, #12
    a936:	46bd      	mov	sp, r7
    a938:	f85d 7b04 	ldr.w	r7, [sp], #4
    a93c:	4770      	bx	lr

0000a93e <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    a93e:	b480      	push	{r7}
    a940:	b083      	sub	sp, #12
    a942:	af00      	add	r7, sp, #0
    a944:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    a946:	687b      	ldr	r3, [r7, #4]
    a948:	895b      	ldrh	r3, [r3, #10]
    a94a:	b29b      	uxth	r3, r3
}
    a94c:	4618      	mov	r0, r3
    a94e:	370c      	adds	r7, #12
    a950:	46bd      	mov	sp, r7
    a952:	f85d 7b04 	ldr.w	r7, [sp], #4
    a956:	4770      	bx	lr

0000a958 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    a958:	b580      	push	{r7, lr}
    a95a:	b082      	sub	sp, #8
    a95c:	af00      	add	r7, sp, #0
    a95e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    a960:	687b      	ldr	r3, [r7, #4]
    a962:	881b      	ldrh	r3, [r3, #0]
    a964:	b29b      	uxth	r3, r3
    a966:	f043 0301 	orr.w	r3, r3, #1
    a96a:	b29a      	uxth	r2, r3
    a96c:	687b      	ldr	r3, [r7, #4]
    a96e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    a970:	2101      	movs	r1, #1
    a972:	6878      	ldr	r0, [r7, #4]
    a974:	4b02      	ldr	r3, [pc, #8]	; (a980 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    a976:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a978:	bf00      	nop
    a97a:	3708      	adds	r7, #8
    a97c:	46bd      	mov	sp, r7
    a97e:	bd80      	pop	{r7, pc}
    a980:	0000a8c9 	.word	0x0000a8c9

0000a984 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a984:	b580      	push	{r7, lr}
    a986:	b082      	sub	sp, #8
    a988:	af00      	add	r7, sp, #0
    a98a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    a98c:	687b      	ldr	r3, [r7, #4]
    a98e:	881b      	ldrh	r3, [r3, #0]
    a990:	b29b      	uxth	r3, r3
    a992:	f043 0302 	orr.w	r3, r3, #2
    a996:	b29a      	uxth	r2, r3
    a998:	687b      	ldr	r3, [r7, #4]
    a99a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a99c:	f248 0103 	movw	r1, #32771	; 0x8003
    a9a0:	6878      	ldr	r0, [r7, #4]
    a9a2:	4b03      	ldr	r3, [pc, #12]	; (a9b0 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    a9a4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a9a6:	bf00      	nop
    a9a8:	3708      	adds	r7, #8
    a9aa:	46bd      	mov	sp, r7
    a9ac:	bd80      	pop	{r7, pc}
    a9ae:	bf00      	nop
    a9b0:	0000a8c9 	.word	0x0000a8c9

0000a9b4 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a9b4:	b580      	push	{r7, lr}
    a9b6:	b084      	sub	sp, #16
    a9b8:	af00      	add	r7, sp, #0
    a9ba:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a9bc:	f248 0103 	movw	r1, #32771	; 0x8003
    a9c0:	6878      	ldr	r0, [r7, #4]
    a9c2:	4b0a      	ldr	r3, [pc, #40]	; (a9ec <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    a9c4:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    a9c6:	687b      	ldr	r3, [r7, #4]
    a9c8:	881b      	ldrh	r3, [r3, #0]
    a9ca:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    a9cc:	89fb      	ldrh	r3, [r7, #14]
    a9ce:	085b      	lsrs	r3, r3, #1
    a9d0:	b29b      	uxth	r3, r3
    a9d2:	f003 0301 	and.w	r3, r3, #1
    a9d6:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    a9d8:	89fb      	ldrh	r3, [r7, #14]
    a9da:	2b00      	cmp	r3, #0
    a9dc:	bf14      	ite	ne
    a9de:	2301      	movne	r3, #1
    a9e0:	2300      	moveq	r3, #0
    a9e2:	b2db      	uxtb	r3, r3
}
    a9e4:	4618      	mov	r0, r3
    a9e6:	3710      	adds	r7, #16
    a9e8:	46bd      	mov	sp, r7
    a9ea:	bd80      	pop	{r7, pc}
    a9ec:	0000a8c9 	.word	0x0000a8c9

0000a9f0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a9f0:	b580      	push	{r7, lr}
    a9f2:	b082      	sub	sp, #8
    a9f4:	af00      	add	r7, sp, #0
    a9f6:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    a9f8:	687b      	ldr	r3, [r7, #4]
    a9fa:	881b      	ldrh	r3, [r3, #0]
    a9fc:	b29b      	uxth	r3, r3
    a9fe:	f023 0302 	bic.w	r3, r3, #2
    aa02:	b29a      	uxth	r2, r3
    aa04:	687b      	ldr	r3, [r7, #4]
    aa06:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    aa08:	f248 0103 	movw	r1, #32771	; 0x8003
    aa0c:	6878      	ldr	r0, [r7, #4]
    aa0e:	4b03      	ldr	r3, [pc, #12]	; (aa1c <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    aa10:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    aa12:	bf00      	nop
    aa14:	3708      	adds	r7, #8
    aa16:	46bd      	mov	sp, r7
    aa18:	bd80      	pop	{r7, pc}
    aa1a:	bf00      	nop
    aa1c:	0000a8c9 	.word	0x0000a8c9

0000aa20 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    aa20:	b580      	push	{r7, lr}
    aa22:	b082      	sub	sp, #8
    aa24:	af00      	add	r7, sp, #0
    aa26:	6078      	str	r0, [r7, #4]
    aa28:	460b      	mov	r3, r1
    aa2a:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    aa2c:	687b      	ldr	r3, [r7, #4]
    aa2e:	887a      	ldrh	r2, [r7, #2]
    aa30:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    aa32:	f248 0103 	movw	r1, #32771	; 0x8003
    aa36:	6878      	ldr	r0, [r7, #4]
    aa38:	4b02      	ldr	r3, [pc, #8]	; (aa44 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    aa3a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    aa3c:	bf00      	nop
    aa3e:	3708      	adds	r7, #8
    aa40:	46bd      	mov	sp, r7
    aa42:	bd80      	pop	{r7, pc}
    aa44:	0000a8c9 	.word	0x0000a8c9

0000aa48 <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    aa48:	b580      	push	{r7, lr}
    aa4a:	b082      	sub	sp, #8
    aa4c:	af00      	add	r7, sp, #0
    aa4e:	6078      	str	r0, [r7, #4]
    aa50:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    aa52:	687b      	ldr	r3, [r7, #4]
    aa54:	683a      	ldr	r2, [r7, #0]
    aa56:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    aa58:	2108      	movs	r1, #8
    aa5a:	6878      	ldr	r0, [r7, #4]
    aa5c:	4b02      	ldr	r3, [pc, #8]	; (aa68 <hri_rtcmode0_write_COUNT_reg+0x20>)
    aa5e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    aa60:	bf00      	nop
    aa62:	3708      	adds	r7, #8
    aa64:	46bd      	mov	sp, r7
    aa66:	bd80      	pop	{r7, pc}
    aa68:	0000a8c9 	.word	0x0000a8c9

0000aa6c <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    aa6c:	b580      	push	{r7, lr}
    aa6e:	b082      	sub	sp, #8
    aa70:	af00      	add	r7, sp, #0
    aa72:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    aa74:	2108      	movs	r1, #8
    aa76:	6878      	ldr	r0, [r7, #4]
    aa78:	4b03      	ldr	r3, [pc, #12]	; (aa88 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    aa7a:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    aa7c:	687b      	ldr	r3, [r7, #4]
    aa7e:	699b      	ldr	r3, [r3, #24]
}
    aa80:	4618      	mov	r0, r3
    aa82:	3708      	adds	r7, #8
    aa84:	46bd      	mov	sp, r7
    aa86:	bd80      	pop	{r7, pc}
    aa88:	0000a8c9 	.word	0x0000a8c9

0000aa8c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    aa8c:	b480      	push	{r7}
    aa8e:	b083      	sub	sp, #12
    aa90:	af00      	add	r7, sp, #0
    aa92:	6078      	str	r0, [r7, #4]
    aa94:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    aa96:	687b      	ldr	r3, [r7, #4]
    aa98:	683a      	ldr	r2, [r7, #0]
    aa9a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    aa9c:	bf00      	nop
    aa9e:	370c      	adds	r7, #12
    aaa0:	46bd      	mov	sp, r7
    aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaa6:	4770      	bx	lr

0000aaa8 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    aaa8:	b580      	push	{r7, lr}
    aaaa:	b082      	sub	sp, #8
    aaac:	af00      	add	r7, sp, #0
    aaae:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    aab0:	687b      	ldr	r3, [r7, #4]
    aab2:	2b00      	cmp	r3, #0
    aab4:	d005      	beq.n	aac2 <_calendar_init+0x1a>
    aab6:	687b      	ldr	r3, [r7, #4]
    aab8:	681b      	ldr	r3, [r3, #0]
    aaba:	2b00      	cmp	r3, #0
    aabc:	d001      	beq.n	aac2 <_calendar_init+0x1a>
    aabe:	2301      	movs	r3, #1
    aac0:	e000      	b.n	aac4 <_calendar_init+0x1c>
    aac2:	2300      	movs	r3, #0
    aac4:	f003 0301 	and.w	r3, r3, #1
    aac8:	b2db      	uxtb	r3, r3
    aaca:	222f      	movs	r2, #47	; 0x2f
    aacc:	491b      	ldr	r1, [pc, #108]	; (ab3c <_calendar_init+0x94>)
    aace:	4618      	mov	r0, r3
    aad0:	4b1b      	ldr	r3, [pc, #108]	; (ab40 <_calendar_init+0x98>)
    aad2:	4798      	blx	r3

	_rtc_dev = dev;
    aad4:	4a1b      	ldr	r2, [pc, #108]	; (ab44 <_calendar_init+0x9c>)
    aad6:	687b      	ldr	r3, [r7, #4]
    aad8:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    aada:	687b      	ldr	r3, [r7, #4]
    aadc:	681b      	ldr	r3, [r3, #0]
    aade:	4618      	mov	r0, r3
    aae0:	4b19      	ldr	r3, [pc, #100]	; (ab48 <_calendar_init+0xa0>)
    aae2:	4798      	blx	r3
    aae4:	4603      	mov	r3, r0
    aae6:	2b00      	cmp	r3, #0
    aae8:	d00a      	beq.n	ab00 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    aaea:	687b      	ldr	r3, [r7, #4]
    aaec:	681b      	ldr	r3, [r3, #0]
    aaee:	4618      	mov	r0, r3
    aaf0:	4b16      	ldr	r3, [pc, #88]	; (ab4c <_calendar_init+0xa4>)
    aaf2:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    aaf4:	687b      	ldr	r3, [r7, #4]
    aaf6:	681b      	ldr	r3, [r3, #0]
    aaf8:	2102      	movs	r1, #2
    aafa:	4618      	mov	r0, r3
    aafc:	4b14      	ldr	r3, [pc, #80]	; (ab50 <_calendar_init+0xa8>)
    aafe:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    ab00:	687b      	ldr	r3, [r7, #4]
    ab02:	681b      	ldr	r3, [r3, #0]
    ab04:	4618      	mov	r0, r3
    ab06:	4b13      	ldr	r3, [pc, #76]	; (ab54 <_calendar_init+0xac>)
    ab08:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    ab0a:	687b      	ldr	r3, [r7, #4]
    ab0c:	681b      	ldr	r3, [r3, #0]
    ab0e:	2101      	movs	r1, #1
    ab10:	4618      	mov	r0, r3
    ab12:	4b0f      	ldr	r3, [pc, #60]	; (ab50 <_calendar_init+0xa8>)
    ab14:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    ab16:	687b      	ldr	r3, [r7, #4]
    ab18:	681b      	ldr	r3, [r3, #0]
    ab1a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    ab1e:	4618      	mov	r0, r3
    ab20:	4b0d      	ldr	r3, [pc, #52]	; (ab58 <_calendar_init+0xb0>)
    ab22:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    ab24:	687b      	ldr	r3, [r7, #4]
    ab26:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    ab28:	2100      	movs	r1, #0
    ab2a:	4618      	mov	r0, r3
    ab2c:	4b0b      	ldr	r3, [pc, #44]	; (ab5c <_calendar_init+0xb4>)
    ab2e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    ab30:	2300      	movs	r3, #0
}
    ab32:	4618      	mov	r0, r3
    ab34:	3708      	adds	r7, #8
    ab36:	46bd      	mov	sp, r7
    ab38:	bd80      	pop	{r7, pc}
    ab3a:	bf00      	nop
    ab3c:	00020ca8 	.word	0x00020ca8
    ab40:	00008145 	.word	0x00008145
    ab44:	200089c0 	.word	0x200089c0
    ab48:	0000a9b5 	.word	0x0000a9b5
    ab4c:	0000a9f1 	.word	0x0000a9f1
    ab50:	0000a8c9 	.word	0x0000a8c9
    ab54:	0000a959 	.word	0x0000a959
    ab58:	0000aa21 	.word	0x0000aa21
    ab5c:	0000aa8d 	.word	0x0000aa8d

0000ab60 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    ab60:	b580      	push	{r7, lr}
    ab62:	b082      	sub	sp, #8
    ab64:	af00      	add	r7, sp, #0
    ab66:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    ab68:	687b      	ldr	r3, [r7, #4]
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	d005      	beq.n	ab7a <_calendar_enable+0x1a>
    ab6e:	687b      	ldr	r3, [r7, #4]
    ab70:	681b      	ldr	r3, [r3, #0]
    ab72:	2b00      	cmp	r3, #0
    ab74:	d001      	beq.n	ab7a <_calendar_enable+0x1a>
    ab76:	2301      	movs	r3, #1
    ab78:	e000      	b.n	ab7c <_calendar_enable+0x1c>
    ab7a:	2300      	movs	r3, #0
    ab7c:	f003 0301 	and.w	r3, r3, #1
    ab80:	b2db      	uxtb	r3, r3
    ab82:	2275      	movs	r2, #117	; 0x75
    ab84:	4906      	ldr	r1, [pc, #24]	; (aba0 <_calendar_enable+0x40>)
    ab86:	4618      	mov	r0, r3
    ab88:	4b06      	ldr	r3, [pc, #24]	; (aba4 <_calendar_enable+0x44>)
    ab8a:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    ab8c:	687b      	ldr	r3, [r7, #4]
    ab8e:	681b      	ldr	r3, [r3, #0]
    ab90:	4618      	mov	r0, r3
    ab92:	4b05      	ldr	r3, [pc, #20]	; (aba8 <_calendar_enable+0x48>)
    ab94:	4798      	blx	r3

	return ERR_NONE;
    ab96:	2300      	movs	r3, #0
}
    ab98:	4618      	mov	r0, r3
    ab9a:	3708      	adds	r7, #8
    ab9c:	46bd      	mov	sp, r7
    ab9e:	bd80      	pop	{r7, pc}
    aba0:	00020ca8 	.word	0x00020ca8
    aba4:	00008145 	.word	0x00008145
    aba8:	0000a985 	.word	0x0000a985

0000abac <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    abac:	b580      	push	{r7, lr}
    abae:	b082      	sub	sp, #8
    abb0:	af00      	add	r7, sp, #0
    abb2:	6078      	str	r0, [r7, #4]
    abb4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    abb6:	687b      	ldr	r3, [r7, #4]
    abb8:	2b00      	cmp	r3, #0
    abba:	d005      	beq.n	abc8 <_calendar_set_counter+0x1c>
    abbc:	687b      	ldr	r3, [r7, #4]
    abbe:	681b      	ldr	r3, [r3, #0]
    abc0:	2b00      	cmp	r3, #0
    abc2:	d001      	beq.n	abc8 <_calendar_set_counter+0x1c>
    abc4:	2301      	movs	r3, #1
    abc6:	e000      	b.n	abca <_calendar_set_counter+0x1e>
    abc8:	2300      	movs	r3, #0
    abca:	f003 0301 	and.w	r3, r3, #1
    abce:	b2db      	uxtb	r3, r3
    abd0:	228d      	movs	r2, #141	; 0x8d
    abd2:	4907      	ldr	r1, [pc, #28]	; (abf0 <_calendar_set_counter+0x44>)
    abd4:	4618      	mov	r0, r3
    abd6:	4b07      	ldr	r3, [pc, #28]	; (abf4 <_calendar_set_counter+0x48>)
    abd8:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    abda:	687b      	ldr	r3, [r7, #4]
    abdc:	681b      	ldr	r3, [r3, #0]
    abde:	6839      	ldr	r1, [r7, #0]
    abe0:	4618      	mov	r0, r3
    abe2:	4b05      	ldr	r3, [pc, #20]	; (abf8 <_calendar_set_counter+0x4c>)
    abe4:	4798      	blx	r3

	return ERR_NONE;
    abe6:	2300      	movs	r3, #0
}
    abe8:	4618      	mov	r0, r3
    abea:	3708      	adds	r7, #8
    abec:	46bd      	mov	sp, r7
    abee:	bd80      	pop	{r7, pc}
    abf0:	00020ca8 	.word	0x00020ca8
    abf4:	00008145 	.word	0x00008145
    abf8:	0000aa49 	.word	0x0000aa49

0000abfc <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    abfc:	b580      	push	{r7, lr}
    abfe:	b082      	sub	sp, #8
    ac00:	af00      	add	r7, sp, #0
    ac02:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    ac04:	687b      	ldr	r3, [r7, #4]
    ac06:	2b00      	cmp	r3, #0
    ac08:	d005      	beq.n	ac16 <_calendar_get_counter+0x1a>
    ac0a:	687b      	ldr	r3, [r7, #4]
    ac0c:	681b      	ldr	r3, [r3, #0]
    ac0e:	2b00      	cmp	r3, #0
    ac10:	d001      	beq.n	ac16 <_calendar_get_counter+0x1a>
    ac12:	2301      	movs	r3, #1
    ac14:	e000      	b.n	ac18 <_calendar_get_counter+0x1c>
    ac16:	2300      	movs	r3, #0
    ac18:	f003 0301 	and.w	r3, r3, #1
    ac1c:	b2db      	uxtb	r3, r3
    ac1e:	2299      	movs	r2, #153	; 0x99
    ac20:	4906      	ldr	r1, [pc, #24]	; (ac3c <_calendar_get_counter+0x40>)
    ac22:	4618      	mov	r0, r3
    ac24:	4b06      	ldr	r3, [pc, #24]	; (ac40 <_calendar_get_counter+0x44>)
    ac26:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    ac28:	687b      	ldr	r3, [r7, #4]
    ac2a:	681b      	ldr	r3, [r3, #0]
    ac2c:	4618      	mov	r0, r3
    ac2e:	4b05      	ldr	r3, [pc, #20]	; (ac44 <_calendar_get_counter+0x48>)
    ac30:	4798      	blx	r3
    ac32:	4603      	mov	r3, r0
}
    ac34:	4618      	mov	r0, r3
    ac36:	3708      	adds	r7, #8
    ac38:	46bd      	mov	sp, r7
    ac3a:	bd80      	pop	{r7, pc}
    ac3c:	00020ca8 	.word	0x00020ca8
    ac40:	00008145 	.word	0x00008145
    ac44:	0000aa6d 	.word	0x0000aa6d

0000ac48 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    ac48:	b580      	push	{r7, lr}
    ac4a:	b084      	sub	sp, #16
    ac4c:	af00      	add	r7, sp, #0
    ac4e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    ac50:	687b      	ldr	r3, [r7, #4]
    ac52:	681b      	ldr	r3, [r3, #0]
    ac54:	4618      	mov	r0, r3
    ac56:	4b19      	ldr	r3, [pc, #100]	; (acbc <_rtc_interrupt_handler+0x74>)
    ac58:	4798      	blx	r3
    ac5a:	4603      	mov	r3, r0
    ac5c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    ac5e:	687b      	ldr	r3, [r7, #4]
    ac60:	681b      	ldr	r3, [r3, #0]
    ac62:	4618      	mov	r0, r3
    ac64:	4b16      	ldr	r3, [pc, #88]	; (acc0 <_rtc_interrupt_handler+0x78>)
    ac66:	4798      	blx	r3
    ac68:	4603      	mov	r3, r0
    ac6a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    ac6c:	89fa      	ldrh	r2, [r7, #14]
    ac6e:	89bb      	ldrh	r3, [r7, #12]
    ac70:	4013      	ands	r3, r2
    ac72:	b29b      	uxth	r3, r3
    ac74:	f403 7380 	and.w	r3, r3, #256	; 0x100
    ac78:	2b00      	cmp	r3, #0
    ac7a:	d009      	beq.n	ac90 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    ac7c:	687b      	ldr	r3, [r7, #4]
    ac7e:	685b      	ldr	r3, [r3, #4]
    ac80:	6878      	ldr	r0, [r7, #4]
    ac82:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	681b      	ldr	r3, [r3, #0]
    ac88:	4618      	mov	r0, r3
    ac8a:	4b0e      	ldr	r3, [pc, #56]	; (acc4 <_rtc_interrupt_handler+0x7c>)
    ac8c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    ac8e:	e010      	b.n	acb2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    ac90:	89fa      	ldrh	r2, [r7, #14]
    ac92:	89bb      	ldrh	r3, [r7, #12]
    ac94:	4013      	ands	r3, r2
    ac96:	b29b      	uxth	r3, r3
    ac98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    ac9c:	2b00      	cmp	r3, #0
    ac9e:	d008      	beq.n	acb2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    aca0:	687b      	ldr	r3, [r7, #4]
    aca2:	689b      	ldr	r3, [r3, #8]
    aca4:	6878      	ldr	r0, [r7, #4]
    aca6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    aca8:	687b      	ldr	r3, [r7, #4]
    acaa:	681b      	ldr	r3, [r3, #0]
    acac:	4618      	mov	r0, r3
    acae:	4b06      	ldr	r3, [pc, #24]	; (acc8 <_rtc_interrupt_handler+0x80>)
    acb0:	4798      	blx	r3
}
    acb2:	bf00      	nop
    acb4:	3710      	adds	r7, #16
    acb6:	46bd      	mov	sp, r7
    acb8:	bd80      	pop	{r7, pc}
    acba:	bf00      	nop
    acbc:	0000a925 	.word	0x0000a925
    acc0:	0000a93f 	.word	0x0000a93f
    acc4:	0000a8ed 	.word	0x0000a8ed
    acc8:	0000a909 	.word	0x0000a909

0000accc <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    accc:	b580      	push	{r7, lr}
    acce:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    acd0:	4b03      	ldr	r3, [pc, #12]	; (ace0 <RTC_Handler+0x14>)
    acd2:	681b      	ldr	r3, [r3, #0]
    acd4:	4618      	mov	r0, r3
    acd6:	4b03      	ldr	r3, [pc, #12]	; (ace4 <RTC_Handler+0x18>)
    acd8:	4798      	blx	r3
}
    acda:	bf00      	nop
    acdc:	bd80      	pop	{r7, pc}
    acde:	bf00      	nop
    ace0:	200089c0 	.word	0x200089c0
    ace4:	0000ac49 	.word	0x0000ac49

0000ace8 <__NVIC_EnableIRQ>:
{
    ace8:	b480      	push	{r7}
    acea:	b083      	sub	sp, #12
    acec:	af00      	add	r7, sp, #0
    acee:	4603      	mov	r3, r0
    acf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    acf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    acf6:	2b00      	cmp	r3, #0
    acf8:	db0b      	blt.n	ad12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    acfa:	4909      	ldr	r1, [pc, #36]	; (ad20 <__NVIC_EnableIRQ+0x38>)
    acfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad00:	095b      	lsrs	r3, r3, #5
    ad02:	88fa      	ldrh	r2, [r7, #6]
    ad04:	f002 021f 	and.w	r2, r2, #31
    ad08:	2001      	movs	r0, #1
    ad0a:	fa00 f202 	lsl.w	r2, r0, r2
    ad0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad12:	bf00      	nop
    ad14:	370c      	adds	r7, #12
    ad16:	46bd      	mov	sp, r7
    ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad1c:	4770      	bx	lr
    ad1e:	bf00      	nop
    ad20:	e000e100 	.word	0xe000e100

0000ad24 <__NVIC_DisableIRQ>:
{
    ad24:	b480      	push	{r7}
    ad26:	b083      	sub	sp, #12
    ad28:	af00      	add	r7, sp, #0
    ad2a:	4603      	mov	r3, r0
    ad2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ad2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad32:	2b00      	cmp	r3, #0
    ad34:	db10      	blt.n	ad58 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ad36:	490b      	ldr	r1, [pc, #44]	; (ad64 <__NVIC_DisableIRQ+0x40>)
    ad38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad3c:	095b      	lsrs	r3, r3, #5
    ad3e:	88fa      	ldrh	r2, [r7, #6]
    ad40:	f002 021f 	and.w	r2, r2, #31
    ad44:	2001      	movs	r0, #1
    ad46:	fa00 f202 	lsl.w	r2, r0, r2
    ad4a:	3320      	adds	r3, #32
    ad4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    ad50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ad54:	f3bf 8f6f 	isb	sy
}
    ad58:	bf00      	nop
    ad5a:	370c      	adds	r7, #12
    ad5c:	46bd      	mov	sp, r7
    ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad62:	4770      	bx	lr
    ad64:	e000e100 	.word	0xe000e100

0000ad68 <__NVIC_ClearPendingIRQ>:
{
    ad68:	b480      	push	{r7}
    ad6a:	b083      	sub	sp, #12
    ad6c:	af00      	add	r7, sp, #0
    ad6e:	4603      	mov	r3, r0
    ad70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ad72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad76:	2b00      	cmp	r3, #0
    ad78:	db0c      	blt.n	ad94 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ad7a:	4909      	ldr	r1, [pc, #36]	; (ada0 <__NVIC_ClearPendingIRQ+0x38>)
    ad7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ad80:	095b      	lsrs	r3, r3, #5
    ad82:	88fa      	ldrh	r2, [r7, #6]
    ad84:	f002 021f 	and.w	r2, r2, #31
    ad88:	2001      	movs	r0, #1
    ad8a:	fa00 f202 	lsl.w	r2, r0, r2
    ad8e:	3360      	adds	r3, #96	; 0x60
    ad90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad94:	bf00      	nop
    ad96:	370c      	adds	r7, #12
    ad98:	46bd      	mov	sp, r7
    ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad9e:	4770      	bx	lr
    ada0:	e000e100 	.word	0xe000e100

0000ada4 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    ada4:	b480      	push	{r7}
    ada6:	b083      	sub	sp, #12
    ada8:	af00      	add	r7, sp, #0
    adaa:	6078      	str	r0, [r7, #4]
    adac:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    adae:	bf00      	nop
    adb0:	687b      	ldr	r3, [r7, #4]
    adb2:	69da      	ldr	r2, [r3, #28]
    adb4:	683b      	ldr	r3, [r7, #0]
    adb6:	4013      	ands	r3, r2
    adb8:	2b00      	cmp	r3, #0
    adba:	d1f9      	bne.n	adb0 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    adbc:	bf00      	nop
    adbe:	370c      	adds	r7, #12
    adc0:	46bd      	mov	sp, r7
    adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    adc6:	4770      	bx	lr

0000adc8 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    adc8:	b480      	push	{r7}
    adca:	b083      	sub	sp, #12
    adcc:	af00      	add	r7, sp, #0
    adce:	6078      	str	r0, [r7, #4]
    add0:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    add2:	687b      	ldr	r3, [r7, #4]
    add4:	69da      	ldr	r2, [r3, #28]
    add6:	683b      	ldr	r3, [r7, #0]
    add8:	4013      	ands	r3, r2
    adda:	2b00      	cmp	r3, #0
    addc:	bf14      	ite	ne
    adde:	2301      	movne	r3, #1
    ade0:	2300      	moveq	r3, #0
    ade2:	b2db      	uxtb	r3, r3
}
    ade4:	4618      	mov	r0, r3
    ade6:	370c      	adds	r7, #12
    ade8:	46bd      	mov	sp, r7
    adea:	f85d 7b04 	ldr.w	r7, [sp], #4
    adee:	4770      	bx	lr

0000adf0 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    adf0:	b480      	push	{r7}
    adf2:	b083      	sub	sp, #12
    adf4:	af00      	add	r7, sp, #0
    adf6:	6078      	str	r0, [r7, #4]
    adf8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    adfa:	bf00      	nop
    adfc:	687b      	ldr	r3, [r7, #4]
    adfe:	69da      	ldr	r2, [r3, #28]
    ae00:	683b      	ldr	r3, [r7, #0]
    ae02:	4013      	ands	r3, r2
    ae04:	2b00      	cmp	r3, #0
    ae06:	d1f9      	bne.n	adfc <hri_sercomspi_wait_for_sync+0xc>
	};
}
    ae08:	bf00      	nop
    ae0a:	370c      	adds	r7, #12
    ae0c:	46bd      	mov	sp, r7
    ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae12:	4770      	bx	lr

0000ae14 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    ae14:	b480      	push	{r7}
    ae16:	b083      	sub	sp, #12
    ae18:	af00      	add	r7, sp, #0
    ae1a:	6078      	str	r0, [r7, #4]
    ae1c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    ae1e:	687b      	ldr	r3, [r7, #4]
    ae20:	69da      	ldr	r2, [r3, #28]
    ae22:	683b      	ldr	r3, [r7, #0]
    ae24:	4013      	ands	r3, r2
    ae26:	2b00      	cmp	r3, #0
    ae28:	bf14      	ite	ne
    ae2a:	2301      	movne	r3, #1
    ae2c:	2300      	moveq	r3, #0
    ae2e:	b2db      	uxtb	r3, r3
}
    ae30:	4618      	mov	r0, r3
    ae32:	370c      	adds	r7, #12
    ae34:	46bd      	mov	sp, r7
    ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae3a:	4770      	bx	lr

0000ae3c <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    ae3c:	b480      	push	{r7}
    ae3e:	b083      	sub	sp, #12
    ae40:	af00      	add	r7, sp, #0
    ae42:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    ae44:	687b      	ldr	r3, [r7, #4]
    ae46:	2201      	movs	r2, #1
    ae48:	761a      	strb	r2, [r3, #24]
}
    ae4a:	bf00      	nop
    ae4c:	370c      	adds	r7, #12
    ae4e:	46bd      	mov	sp, r7
    ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae54:	4770      	bx	lr

0000ae56 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    ae56:	b480      	push	{r7}
    ae58:	b083      	sub	sp, #12
    ae5a:	af00      	add	r7, sp, #0
    ae5c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    ae5e:	687b      	ldr	r3, [r7, #4]
    ae60:	2202      	movs	r2, #2
    ae62:	761a      	strb	r2, [r3, #24]
}
    ae64:	bf00      	nop
    ae66:	370c      	adds	r7, #12
    ae68:	46bd      	mov	sp, r7
    ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae6e:	4770      	bx	lr

0000ae70 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    ae70:	b480      	push	{r7}
    ae72:	b083      	sub	sp, #12
    ae74:	af00      	add	r7, sp, #0
    ae76:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    ae78:	687b      	ldr	r3, [r7, #4]
    ae7a:	7e1b      	ldrb	r3, [r3, #24]
    ae7c:	b2db      	uxtb	r3, r3
}
    ae7e:	4618      	mov	r0, r3
    ae80:	370c      	adds	r7, #12
    ae82:	46bd      	mov	sp, r7
    ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae88:	4770      	bx	lr

0000ae8a <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    ae8a:	b480      	push	{r7}
    ae8c:	b083      	sub	sp, #12
    ae8e:	af00      	add	r7, sp, #0
    ae90:	6078      	str	r0, [r7, #4]
    ae92:	460b      	mov	r3, r1
    ae94:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    ae96:	687b      	ldr	r3, [r7, #4]
    ae98:	78fa      	ldrb	r2, [r7, #3]
    ae9a:	761a      	strb	r2, [r3, #24]
}
    ae9c:	bf00      	nop
    ae9e:	370c      	adds	r7, #12
    aea0:	46bd      	mov	sp, r7
    aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aea6:	4770      	bx	lr

0000aea8 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    aea8:	b480      	push	{r7}
    aeaa:	b085      	sub	sp, #20
    aeac:	af00      	add	r7, sp, #0
    aeae:	6078      	str	r0, [r7, #4]
    aeb0:	460b      	mov	r3, r1
    aeb2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    aeb4:	687b      	ldr	r3, [r7, #4]
    aeb6:	7e1b      	ldrb	r3, [r3, #24]
    aeb8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    aeba:	7bfa      	ldrb	r2, [r7, #15]
    aebc:	78fb      	ldrb	r3, [r7, #3]
    aebe:	4013      	ands	r3, r2
    aec0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    aec2:	7bfb      	ldrb	r3, [r7, #15]
}
    aec4:	4618      	mov	r0, r3
    aec6:	3714      	adds	r7, #20
    aec8:	46bd      	mov	sp, r7
    aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
    aece:	4770      	bx	lr

0000aed0 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    aed0:	b480      	push	{r7}
    aed2:	b083      	sub	sp, #12
    aed4:	af00      	add	r7, sp, #0
    aed6:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    aed8:	687b      	ldr	r3, [r7, #4]
    aeda:	7e1b      	ldrb	r3, [r3, #24]
    aedc:	b2db      	uxtb	r3, r3
}
    aede:	4618      	mov	r0, r3
    aee0:	370c      	adds	r7, #12
    aee2:	46bd      	mov	sp, r7
    aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
    aee8:	4770      	bx	lr

0000aeea <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    aeea:	b480      	push	{r7}
    aeec:	b083      	sub	sp, #12
    aeee:	af00      	add	r7, sp, #0
    aef0:	6078      	str	r0, [r7, #4]
    aef2:	460b      	mov	r3, r1
    aef4:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    aef6:	687b      	ldr	r3, [r7, #4]
    aef8:	78fa      	ldrb	r2, [r7, #3]
    aefa:	761a      	strb	r2, [r3, #24]
}
    aefc:	bf00      	nop
    aefe:	370c      	adds	r7, #12
    af00:	46bd      	mov	sp, r7
    af02:	f85d 7b04 	ldr.w	r7, [sp], #4
    af06:	4770      	bx	lr

0000af08 <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    af08:	b480      	push	{r7}
    af0a:	b083      	sub	sp, #12
    af0c:	af00      	add	r7, sp, #0
    af0e:	6078      	str	r0, [r7, #4]
    af10:	460b      	mov	r3, r1
    af12:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    af14:	78fb      	ldrb	r3, [r7, #3]
    af16:	f083 0301 	eor.w	r3, r3, #1
    af1a:	b2db      	uxtb	r3, r3
    af1c:	2b00      	cmp	r3, #0
    af1e:	d003      	beq.n	af28 <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    af20:	687b      	ldr	r3, [r7, #4]
    af22:	2201      	movs	r2, #1
    af24:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    af26:	e002      	b.n	af2e <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    af28:	687b      	ldr	r3, [r7, #4]
    af2a:	2201      	movs	r2, #1
    af2c:	759a      	strb	r2, [r3, #22]
}
    af2e:	bf00      	nop
    af30:	370c      	adds	r7, #12
    af32:	46bd      	mov	sp, r7
    af34:	f85d 7b04 	ldr.w	r7, [sp], #4
    af38:	4770      	bx	lr

0000af3a <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    af3a:	b480      	push	{r7}
    af3c:	b083      	sub	sp, #12
    af3e:	af00      	add	r7, sp, #0
    af40:	6078      	str	r0, [r7, #4]
    af42:	460b      	mov	r3, r1
    af44:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    af46:	78fb      	ldrb	r3, [r7, #3]
    af48:	f083 0301 	eor.w	r3, r3, #1
    af4c:	b2db      	uxtb	r3, r3
    af4e:	2b00      	cmp	r3, #0
    af50:	d003      	beq.n	af5a <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    af52:	687b      	ldr	r3, [r7, #4]
    af54:	2202      	movs	r2, #2
    af56:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    af58:	e002      	b.n	af60 <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    af5a:	687b      	ldr	r3, [r7, #4]
    af5c:	2202      	movs	r2, #2
    af5e:	759a      	strb	r2, [r3, #22]
}
    af60:	bf00      	nop
    af62:	370c      	adds	r7, #12
    af64:	46bd      	mov	sp, r7
    af66:	f85d 7b04 	ldr.w	r7, [sp], #4
    af6a:	4770      	bx	lr

0000af6c <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    af6c:	b480      	push	{r7}
    af6e:	b083      	sub	sp, #12
    af70:	af00      	add	r7, sp, #0
    af72:	6078      	str	r0, [r7, #4]
    af74:	460b      	mov	r3, r1
    af76:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    af78:	78fb      	ldrb	r3, [r7, #3]
    af7a:	f083 0301 	eor.w	r3, r3, #1
    af7e:	b2db      	uxtb	r3, r3
    af80:	2b00      	cmp	r3, #0
    af82:	d003      	beq.n	af8c <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    af84:	687b      	ldr	r3, [r7, #4]
    af86:	2280      	movs	r2, #128	; 0x80
    af88:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    af8a:	e002      	b.n	af92 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    af8c:	687b      	ldr	r3, [r7, #4]
    af8e:	2280      	movs	r2, #128	; 0x80
    af90:	759a      	strb	r2, [r3, #22]
}
    af92:	bf00      	nop
    af94:	370c      	adds	r7, #12
    af96:	46bd      	mov	sp, r7
    af98:	f85d 7b04 	ldr.w	r7, [sp], #4
    af9c:	4770      	bx	lr
	...

0000afa0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    afa0:	b580      	push	{r7, lr}
    afa2:	b082      	sub	sp, #8
    afa4:	af00      	add	r7, sp, #0
    afa6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    afa8:	687b      	ldr	r3, [r7, #4]
    afaa:	681b      	ldr	r3, [r3, #0]
    afac:	f043 0202 	orr.w	r2, r3, #2
    afb0:	687b      	ldr	r3, [r7, #4]
    afb2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    afb4:	2103      	movs	r1, #3
    afb6:	6878      	ldr	r0, [r7, #4]
    afb8:	4b02      	ldr	r3, [pc, #8]	; (afc4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    afba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    afbc:	bf00      	nop
    afbe:	3708      	adds	r7, #8
    afc0:	46bd      	mov	sp, r7
    afc2:	bd80      	pop	{r7, pc}
    afc4:	0000ada5 	.word	0x0000ada5

0000afc8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    afc8:	b580      	push	{r7, lr}
    afca:	b082      	sub	sp, #8
    afcc:	af00      	add	r7, sp, #0
    afce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    afd0:	687b      	ldr	r3, [r7, #4]
    afd2:	681b      	ldr	r3, [r3, #0]
    afd4:	f023 0202 	bic.w	r2, r3, #2
    afd8:	687b      	ldr	r3, [r7, #4]
    afda:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    afdc:	2103      	movs	r1, #3
    afde:	6878      	ldr	r0, [r7, #4]
    afe0:	4b02      	ldr	r3, [pc, #8]	; (afec <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    afe2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    afe4:	bf00      	nop
    afe6:	3708      	adds	r7, #8
    afe8:	46bd      	mov	sp, r7
    afea:	bd80      	pop	{r7, pc}
    afec:	0000ada5 	.word	0x0000ada5

0000aff0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    aff0:	b480      	push	{r7}
    aff2:	b085      	sub	sp, #20
    aff4:	af00      	add	r7, sp, #0
    aff6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    aff8:	687b      	ldr	r3, [r7, #4]
    affa:	681b      	ldr	r3, [r3, #0]
    affc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    affe:	68fb      	ldr	r3, [r7, #12]
    b000:	0edb      	lsrs	r3, r3, #27
    b002:	f003 0301 	and.w	r3, r3, #1
    b006:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    b008:	68fb      	ldr	r3, [r7, #12]
    b00a:	2b00      	cmp	r3, #0
    b00c:	bf14      	ite	ne
    b00e:	2301      	movne	r3, #1
    b010:	2300      	moveq	r3, #0
    b012:	b2db      	uxtb	r3, r3
}
    b014:	4618      	mov	r0, r3
    b016:	3714      	adds	r7, #20
    b018:	46bd      	mov	sp, r7
    b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b01e:	4770      	bx	lr

0000b020 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    b020:	b580      	push	{r7, lr}
    b022:	b084      	sub	sp, #16
    b024:	af00      	add	r7, sp, #0
    b026:	6078      	str	r0, [r7, #4]
    b028:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    b02a:	2103      	movs	r1, #3
    b02c:	6878      	ldr	r0, [r7, #4]
    b02e:	4b07      	ldr	r3, [pc, #28]	; (b04c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    b030:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    b032:	687b      	ldr	r3, [r7, #4]
    b034:	681b      	ldr	r3, [r3, #0]
    b036:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b038:	68fa      	ldr	r2, [r7, #12]
    b03a:	683b      	ldr	r3, [r7, #0]
    b03c:	4013      	ands	r3, r2
    b03e:	60fb      	str	r3, [r7, #12]
	return tmp;
    b040:	68fb      	ldr	r3, [r7, #12]
}
    b042:	4618      	mov	r0, r3
    b044:	3710      	adds	r7, #16
    b046:	46bd      	mov	sp, r7
    b048:	bd80      	pop	{r7, pc}
    b04a:	bf00      	nop
    b04c:	0000ada5 	.word	0x0000ada5

0000b050 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    b050:	b580      	push	{r7, lr}
    b052:	b082      	sub	sp, #8
    b054:	af00      	add	r7, sp, #0
    b056:	6078      	str	r0, [r7, #4]
    b058:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    b05a:	687b      	ldr	r3, [r7, #4]
    b05c:	683a      	ldr	r2, [r7, #0]
    b05e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    b060:	2103      	movs	r1, #3
    b062:	6878      	ldr	r0, [r7, #4]
    b064:	4b02      	ldr	r3, [pc, #8]	; (b070 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    b066:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b068:	bf00      	nop
    b06a:	3708      	adds	r7, #8
    b06c:	46bd      	mov	sp, r7
    b06e:	bd80      	pop	{r7, pc}
    b070:	0000ada5 	.word	0x0000ada5

0000b074 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    b074:	b580      	push	{r7, lr}
    b076:	b082      	sub	sp, #8
    b078:	af00      	add	r7, sp, #0
    b07a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    b07c:	687b      	ldr	r3, [r7, #4]
    b07e:	681b      	ldr	r3, [r3, #0]
    b080:	f043 0202 	orr.w	r2, r3, #2
    b084:	687b      	ldr	r3, [r7, #4]
    b086:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    b088:	2103      	movs	r1, #3
    b08a:	6878      	ldr	r0, [r7, #4]
    b08c:	4b02      	ldr	r3, [pc, #8]	; (b098 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    b08e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b090:	bf00      	nop
    b092:	3708      	adds	r7, #8
    b094:	46bd      	mov	sp, r7
    b096:	bd80      	pop	{r7, pc}
    b098:	0000adf1 	.word	0x0000adf1

0000b09c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b09c:	b580      	push	{r7, lr}
    b09e:	b084      	sub	sp, #16
    b0a0:	af00      	add	r7, sp, #0
    b0a2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    b0a4:	2103      	movs	r1, #3
    b0a6:	6878      	ldr	r0, [r7, #4]
    b0a8:	4b09      	ldr	r3, [pc, #36]	; (b0d0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    b0aa:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    b0ac:	687b      	ldr	r3, [r7, #4]
    b0ae:	681b      	ldr	r3, [r3, #0]
    b0b0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    b0b2:	68fb      	ldr	r3, [r7, #12]
    b0b4:	085b      	lsrs	r3, r3, #1
    b0b6:	f003 0301 	and.w	r3, r3, #1
    b0ba:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    b0bc:	68fb      	ldr	r3, [r7, #12]
    b0be:	2b00      	cmp	r3, #0
    b0c0:	bf14      	ite	ne
    b0c2:	2301      	movne	r3, #1
    b0c4:	2300      	moveq	r3, #0
    b0c6:	b2db      	uxtb	r3, r3
}
    b0c8:	4618      	mov	r0, r3
    b0ca:	3710      	adds	r7, #16
    b0cc:	46bd      	mov	sp, r7
    b0ce:	bd80      	pop	{r7, pc}
    b0d0:	0000adf1 	.word	0x0000adf1

0000b0d4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    b0d4:	b580      	push	{r7, lr}
    b0d6:	b082      	sub	sp, #8
    b0d8:	af00      	add	r7, sp, #0
    b0da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    b0dc:	687b      	ldr	r3, [r7, #4]
    b0de:	681b      	ldr	r3, [r3, #0]
    b0e0:	f023 0202 	bic.w	r2, r3, #2
    b0e4:	687b      	ldr	r3, [r7, #4]
    b0e6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    b0e8:	2103      	movs	r1, #3
    b0ea:	6878      	ldr	r0, [r7, #4]
    b0ec:	4b02      	ldr	r3, [pc, #8]	; (b0f8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    b0ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b0f0:	bf00      	nop
    b0f2:	3708      	adds	r7, #8
    b0f4:	46bd      	mov	sp, r7
    b0f6:	bd80      	pop	{r7, pc}
    b0f8:	0000adf1 	.word	0x0000adf1

0000b0fc <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    b0fc:	b580      	push	{r7, lr}
    b0fe:	b084      	sub	sp, #16
    b100:	af00      	add	r7, sp, #0
    b102:	6078      	str	r0, [r7, #4]
    b104:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    b106:	2103      	movs	r1, #3
    b108:	6878      	ldr	r0, [r7, #4]
    b10a:	4b07      	ldr	r3, [pc, #28]	; (b128 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    b10c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    b10e:	687b      	ldr	r3, [r7, #4]
    b110:	681b      	ldr	r3, [r3, #0]
    b112:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    b114:	68fa      	ldr	r2, [r7, #12]
    b116:	683b      	ldr	r3, [r7, #0]
    b118:	4013      	ands	r3, r2
    b11a:	60fb      	str	r3, [r7, #12]
	return tmp;
    b11c:	68fb      	ldr	r3, [r7, #12]
}
    b11e:	4618      	mov	r0, r3
    b120:	3710      	adds	r7, #16
    b122:	46bd      	mov	sp, r7
    b124:	bd80      	pop	{r7, pc}
    b126:	bf00      	nop
    b128:	0000adf1 	.word	0x0000adf1

0000b12c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    b12c:	b580      	push	{r7, lr}
    b12e:	b082      	sub	sp, #8
    b130:	af00      	add	r7, sp, #0
    b132:	6078      	str	r0, [r7, #4]
    b134:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    b136:	687b      	ldr	r3, [r7, #4]
    b138:	683a      	ldr	r2, [r7, #0]
    b13a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    b13c:	2103      	movs	r1, #3
    b13e:	6878      	ldr	r0, [r7, #4]
    b140:	4b02      	ldr	r3, [pc, #8]	; (b14c <hri_sercomspi_write_CTRLA_reg+0x20>)
    b142:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b144:	bf00      	nop
    b146:	3708      	adds	r7, #8
    b148:	46bd      	mov	sp, r7
    b14a:	bd80      	pop	{r7, pc}
    b14c:	0000adf1 	.word	0x0000adf1

0000b150 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    b150:	b580      	push	{r7, lr}
    b152:	b082      	sub	sp, #8
    b154:	af00      	add	r7, sp, #0
    b156:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    b158:	687b      	ldr	r3, [r7, #4]
    b15a:	685b      	ldr	r3, [r3, #4]
    b15c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    b160:	687b      	ldr	r3, [r7, #4]
    b162:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b164:	2104      	movs	r1, #4
    b166:	6878      	ldr	r0, [r7, #4]
    b168:	4b02      	ldr	r3, [pc, #8]	; (b174 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    b16a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b16c:	bf00      	nop
    b16e:	3708      	adds	r7, #8
    b170:	46bd      	mov	sp, r7
    b172:	bd80      	pop	{r7, pc}
    b174:	0000ada5 	.word	0x0000ada5

0000b178 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    b178:	b580      	push	{r7, lr}
    b17a:	b082      	sub	sp, #8
    b17c:	af00      	add	r7, sp, #0
    b17e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    b180:	687b      	ldr	r3, [r7, #4]
    b182:	685b      	ldr	r3, [r3, #4]
    b184:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    b188:	687b      	ldr	r3, [r7, #4]
    b18a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b18c:	2104      	movs	r1, #4
    b18e:	6878      	ldr	r0, [r7, #4]
    b190:	4b02      	ldr	r3, [pc, #8]	; (b19c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    b192:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b194:	bf00      	nop
    b196:	3708      	adds	r7, #8
    b198:	46bd      	mov	sp, r7
    b19a:	bd80      	pop	{r7, pc}
    b19c:	0000ada5 	.word	0x0000ada5

0000b1a0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    b1a0:	b580      	push	{r7, lr}
    b1a2:	b082      	sub	sp, #8
    b1a4:	af00      	add	r7, sp, #0
    b1a6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    b1a8:	687b      	ldr	r3, [r7, #4]
    b1aa:	685b      	ldr	r3, [r3, #4]
    b1ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    b1b0:	687b      	ldr	r3, [r7, #4]
    b1b2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b1b4:	2104      	movs	r1, #4
    b1b6:	6878      	ldr	r0, [r7, #4]
    b1b8:	4b02      	ldr	r3, [pc, #8]	; (b1c4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    b1ba:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b1bc:	bf00      	nop
    b1be:	3708      	adds	r7, #8
    b1c0:	46bd      	mov	sp, r7
    b1c2:	bd80      	pop	{r7, pc}
    b1c4:	0000ada5 	.word	0x0000ada5

0000b1c8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    b1c8:	b580      	push	{r7, lr}
    b1ca:	b082      	sub	sp, #8
    b1cc:	af00      	add	r7, sp, #0
    b1ce:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    b1d0:	687b      	ldr	r3, [r7, #4]
    b1d2:	685b      	ldr	r3, [r3, #4]
    b1d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    b1d8:	687b      	ldr	r3, [r7, #4]
    b1da:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b1dc:	2104      	movs	r1, #4
    b1de:	6878      	ldr	r0, [r7, #4]
    b1e0:	4b02      	ldr	r3, [pc, #8]	; (b1ec <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    b1e2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b1e4:	bf00      	nop
    b1e6:	3708      	adds	r7, #8
    b1e8:	46bd      	mov	sp, r7
    b1ea:	bd80      	pop	{r7, pc}
    b1ec:	0000ada5 	.word	0x0000ada5

0000b1f0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    b1f0:	b580      	push	{r7, lr}
    b1f2:	b082      	sub	sp, #8
    b1f4:	af00      	add	r7, sp, #0
    b1f6:	6078      	str	r0, [r7, #4]
    b1f8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    b1fa:	687b      	ldr	r3, [r7, #4]
    b1fc:	685a      	ldr	r2, [r3, #4]
    b1fe:	683b      	ldr	r3, [r7, #0]
    b200:	041b      	lsls	r3, r3, #16
    b202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    b206:	431a      	orrs	r2, r3
    b208:	687b      	ldr	r3, [r7, #4]
    b20a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b20c:	2104      	movs	r1, #4
    b20e:	6878      	ldr	r0, [r7, #4]
    b210:	4b02      	ldr	r3, [pc, #8]	; (b21c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    b212:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b214:	bf00      	nop
    b216:	3708      	adds	r7, #8
    b218:	46bd      	mov	sp, r7
    b21a:	bd80      	pop	{r7, pc}
    b21c:	0000ada5 	.word	0x0000ada5

0000b220 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    b220:	b580      	push	{r7, lr}
    b222:	b082      	sub	sp, #8
    b224:	af00      	add	r7, sp, #0
    b226:	6078      	str	r0, [r7, #4]
    b228:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    b22a:	687b      	ldr	r3, [r7, #4]
    b22c:	683a      	ldr	r2, [r7, #0]
    b22e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b230:	2104      	movs	r1, #4
    b232:	6878      	ldr	r0, [r7, #4]
    b234:	4b02      	ldr	r3, [pc, #8]	; (b240 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    b236:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b238:	bf00      	nop
    b23a:	3708      	adds	r7, #8
    b23c:	46bd      	mov	sp, r7
    b23e:	bd80      	pop	{r7, pc}
    b240:	0000ada5 	.word	0x0000ada5

0000b244 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    b244:	b580      	push	{r7, lr}
    b246:	b082      	sub	sp, #8
    b248:	af00      	add	r7, sp, #0
    b24a:	6078      	str	r0, [r7, #4]
    b24c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    b24e:	687b      	ldr	r3, [r7, #4]
    b250:	683a      	ldr	r2, [r7, #0]
    b252:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    b254:	2117      	movs	r1, #23
    b256:	6878      	ldr	r0, [r7, #4]
    b258:	4b02      	ldr	r3, [pc, #8]	; (b264 <hri_sercomspi_write_CTRLB_reg+0x20>)
    b25a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b25c:	bf00      	nop
    b25e:	3708      	adds	r7, #8
    b260:	46bd      	mov	sp, r7
    b262:	bd80      	pop	{r7, pc}
    b264:	0000adf1 	.word	0x0000adf1

0000b268 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    b268:	b480      	push	{r7}
    b26a:	b083      	sub	sp, #12
    b26c:	af00      	add	r7, sp, #0
    b26e:	6078      	str	r0, [r7, #4]
    b270:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    b272:	687b      	ldr	r3, [r7, #4]
    b274:	683a      	ldr	r2, [r7, #0]
    b276:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b278:	bf00      	nop
    b27a:	370c      	adds	r7, #12
    b27c:	46bd      	mov	sp, r7
    b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b282:	4770      	bx	lr

0000b284 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    b284:	b480      	push	{r7}
    b286:	b083      	sub	sp, #12
    b288:	af00      	add	r7, sp, #0
    b28a:	6078      	str	r0, [r7, #4]
    b28c:	460b      	mov	r3, r1
    b28e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    b290:	687b      	ldr	r3, [r7, #4]
    b292:	78fa      	ldrb	r2, [r7, #3]
    b294:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b296:	bf00      	nop
    b298:	370c      	adds	r7, #12
    b29a:	46bd      	mov	sp, r7
    b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2a0:	4770      	bx	lr
	...

0000b2a4 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    b2a4:	b580      	push	{r7, lr}
    b2a6:	b084      	sub	sp, #16
    b2a8:	af00      	add	r7, sp, #0
    b2aa:	6078      	str	r0, [r7, #4]
    b2ac:	460b      	mov	r3, r1
    b2ae:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    b2b0:	687b      	ldr	r3, [r7, #4]
    b2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b2b4:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    b2b6:	68fb      	ldr	r3, [r7, #12]
    b2b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    b2bc:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    b2be:	78fb      	ldrb	r3, [r7, #3]
    b2c0:	039b      	lsls	r3, r3, #14
    b2c2:	461a      	mov	r2, r3
    b2c4:	68fb      	ldr	r3, [r7, #12]
    b2c6:	4313      	orrs	r3, r2
    b2c8:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    b2ca:	687b      	ldr	r3, [r7, #4]
    b2cc:	68fa      	ldr	r2, [r7, #12]
    b2ce:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b2d0:	2104      	movs	r1, #4
    b2d2:	6878      	ldr	r0, [r7, #4]
    b2d4:	4b02      	ldr	r3, [pc, #8]	; (b2e0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    b2d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b2d8:	bf00      	nop
    b2da:	3710      	adds	r7, #16
    b2dc:	46bd      	mov	sp, r7
    b2de:	bd80      	pop	{r7, pc}
    b2e0:	0000ada5 	.word	0x0000ada5

0000b2e4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    b2e4:	b580      	push	{r7, lr}
    b2e6:	b082      	sub	sp, #8
    b2e8:	af00      	add	r7, sp, #0
    b2ea:	6078      	str	r0, [r7, #4]
    b2ec:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    b2ee:	687b      	ldr	r3, [r7, #4]
    b2f0:	683a      	ldr	r2, [r7, #0]
    b2f2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b2f4:	2104      	movs	r1, #4
    b2f6:	6878      	ldr	r0, [r7, #4]
    b2f8:	4b02      	ldr	r3, [pc, #8]	; (b304 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    b2fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b2fc:	bf00      	nop
    b2fe:	3708      	adds	r7, #8
    b300:	46bd      	mov	sp, r7
    b302:	bd80      	pop	{r7, pc}
    b304:	0000ada5 	.word	0x0000ada5

0000b308 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    b308:	b580      	push	{r7, lr}
    b30a:	b082      	sub	sp, #8
    b30c:	af00      	add	r7, sp, #0
    b30e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b310:	2104      	movs	r1, #4
    b312:	6878      	ldr	r0, [r7, #4]
    b314:	4b03      	ldr	r3, [pc, #12]	; (b324 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    b316:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    b318:	687b      	ldr	r3, [r7, #4]
    b31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    b31c:	4618      	mov	r0, r3
    b31e:	3708      	adds	r7, #8
    b320:	46bd      	mov	sp, r7
    b322:	bd80      	pop	{r7, pc}
    b324:	0000ada5 	.word	0x0000ada5

0000b328 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    b328:	b480      	push	{r7}
    b32a:	b083      	sub	sp, #12
    b32c:	af00      	add	r7, sp, #0
    b32e:	6078      	str	r0, [r7, #4]
    b330:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    b332:	687b      	ldr	r3, [r7, #4]
    b334:	683a      	ldr	r2, [r7, #0]
    b336:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b338:	bf00      	nop
    b33a:	370c      	adds	r7, #12
    b33c:	46bd      	mov	sp, r7
    b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b342:	4770      	bx	lr

0000b344 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    b344:	b580      	push	{r7, lr}
    b346:	b082      	sub	sp, #8
    b348:	af00      	add	r7, sp, #0
    b34a:	6078      	str	r0, [r7, #4]
    b34c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    b34e:	687b      	ldr	r3, [r7, #4]
    b350:	683a      	ldr	r2, [r7, #0]
    b352:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b354:	2104      	movs	r1, #4
    b356:	6878      	ldr	r0, [r7, #4]
    b358:	4b02      	ldr	r3, [pc, #8]	; (b364 <hri_sercomi2cm_write_DATA_reg+0x20>)
    b35a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b35c:	bf00      	nop
    b35e:	3708      	adds	r7, #8
    b360:	46bd      	mov	sp, r7
    b362:	bd80      	pop	{r7, pc}
    b364:	0000ada5 	.word	0x0000ada5

0000b368 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    b368:	b580      	push	{r7, lr}
    b36a:	b082      	sub	sp, #8
    b36c:	af00      	add	r7, sp, #0
    b36e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b370:	2104      	movs	r1, #4
    b372:	6878      	ldr	r0, [r7, #4]
    b374:	4b03      	ldr	r3, [pc, #12]	; (b384 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    b376:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    b378:	687b      	ldr	r3, [r7, #4]
    b37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    b37c:	4618      	mov	r0, r3
    b37e:	3708      	adds	r7, #8
    b380:	46bd      	mov	sp, r7
    b382:	bd80      	pop	{r7, pc}
    b384:	0000ada5 	.word	0x0000ada5

0000b388 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    b388:	b480      	push	{r7}
    b38a:	b083      	sub	sp, #12
    b38c:	af00      	add	r7, sp, #0
    b38e:	6078      	str	r0, [r7, #4]
    b390:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    b392:	687b      	ldr	r3, [r7, #4]
    b394:	683a      	ldr	r2, [r7, #0]
    b396:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b398:	bf00      	nop
    b39a:	370c      	adds	r7, #12
    b39c:	46bd      	mov	sp, r7
    b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3a2:	4770      	bx	lr

0000b3a4 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    b3a4:	b480      	push	{r7}
    b3a6:	b083      	sub	sp, #12
    b3a8:	af00      	add	r7, sp, #0
    b3aa:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    b3ac:	687b      	ldr	r3, [r7, #4]
    b3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    b3b0:	4618      	mov	r0, r3
    b3b2:	370c      	adds	r7, #12
    b3b4:	46bd      	mov	sp, r7
    b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3ba:	4770      	bx	lr

0000b3bc <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    b3bc:	b480      	push	{r7}
    b3be:	b083      	sub	sp, #12
    b3c0:	af00      	add	r7, sp, #0
    b3c2:	6078      	str	r0, [r7, #4]
    b3c4:	460b      	mov	r3, r1
    b3c6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    b3c8:	687b      	ldr	r3, [r7, #4]
    b3ca:	78fa      	ldrb	r2, [r7, #3]
    b3cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b3d0:	bf00      	nop
    b3d2:	370c      	adds	r7, #12
    b3d4:	46bd      	mov	sp, r7
    b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3da:	4770      	bx	lr

0000b3dc <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    b3dc:	b480      	push	{r7}
    b3de:	b083      	sub	sp, #12
    b3e0:	af00      	add	r7, sp, #0
    b3e2:	6078      	str	r0, [r7, #4]
    b3e4:	460b      	mov	r3, r1
    b3e6:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    b3e8:	687b      	ldr	r3, [r7, #4]
    b3ea:	887a      	ldrh	r2, [r7, #2]
    b3ec:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b3ee:	bf00      	nop
    b3f0:	370c      	adds	r7, #12
    b3f2:	46bd      	mov	sp, r7
    b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3f8:	4770      	bx	lr
	...

0000b3fc <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    b3fc:	b580      	push	{r7, lr}
    b3fe:	b082      	sub	sp, #8
    b400:	af00      	add	r7, sp, #0
    b402:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b404:	2104      	movs	r1, #4
    b406:	6878      	ldr	r0, [r7, #4]
    b408:	4b06      	ldr	r3, [pc, #24]	; (b424 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    b40a:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    b40c:	687b      	ldr	r3, [r7, #4]
    b40e:	8b5b      	ldrh	r3, [r3, #26]
    b410:	b29b      	uxth	r3, r3
    b412:	091b      	lsrs	r3, r3, #4
    b414:	b29b      	uxth	r3, r3
    b416:	f003 0303 	and.w	r3, r3, #3
    b41a:	b29b      	uxth	r3, r3
}
    b41c:	4618      	mov	r0, r3
    b41e:	3708      	adds	r7, #8
    b420:	46bd      	mov	sp, r7
    b422:	bd80      	pop	{r7, pc}
    b424:	0000ada5 	.word	0x0000ada5

0000b428 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    b428:	b580      	push	{r7, lr}
    b42a:	b082      	sub	sp, #8
    b42c:	af00      	add	r7, sp, #0
    b42e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b430:	2104      	movs	r1, #4
    b432:	6878      	ldr	r0, [r7, #4]
    b434:	4b04      	ldr	r3, [pc, #16]	; (b448 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    b436:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    b438:	687b      	ldr	r3, [r7, #4]
    b43a:	8b5b      	ldrh	r3, [r3, #26]
    b43c:	b29b      	uxth	r3, r3
}
    b43e:	4618      	mov	r0, r3
    b440:	3708      	adds	r7, #8
    b442:	46bd      	mov	sp, r7
    b444:	bd80      	pop	{r7, pc}
    b446:	bf00      	nop
    b448:	0000ada5 	.word	0x0000ada5

0000b44c <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    b44c:	b580      	push	{r7, lr}
    b44e:	b082      	sub	sp, #8
    b450:	af00      	add	r7, sp, #0
    b452:	6078      	str	r0, [r7, #4]
    b454:	460b      	mov	r3, r1
    b456:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    b458:	687b      	ldr	r3, [r7, #4]
    b45a:	887a      	ldrh	r2, [r7, #2]
    b45c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    b45e:	2104      	movs	r1, #4
    b460:	6878      	ldr	r0, [r7, #4]
    b462:	4b03      	ldr	r3, [pc, #12]	; (b470 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    b464:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    b466:	bf00      	nop
    b468:	3708      	adds	r7, #8
    b46a:	46bd      	mov	sp, r7
    b46c:	bd80      	pop	{r7, pc}
    b46e:	bf00      	nop
    b470:	0000ada5 	.word	0x0000ada5

0000b474 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    b474:	b4b0      	push	{r4, r5, r7}
    b476:	b08d      	sub	sp, #52	; 0x34
    b478:	af00      	add	r7, sp, #0
    b47a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    b47c:	4b13      	ldr	r3, [pc, #76]	; (b4cc <_sercom_get_hardware_index+0x58>)
    b47e:	f107 040c 	add.w	r4, r7, #12
    b482:	461d      	mov	r5, r3
    b484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b488:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b48c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b490:	2300      	movs	r3, #0
    b492:	62fb      	str	r3, [r7, #44]	; 0x2c
    b494:	e010      	b.n	b4b8 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    b496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b498:	009b      	lsls	r3, r3, #2
    b49a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b49e:	4413      	add	r3, r2
    b4a0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    b4a4:	461a      	mov	r2, r3
    b4a6:	687b      	ldr	r3, [r7, #4]
    b4a8:	429a      	cmp	r2, r3
    b4aa:	d102      	bne.n	b4b2 <_sercom_get_hardware_index+0x3e>
			return i;
    b4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b4ae:	b2db      	uxtb	r3, r3
    b4b0:	e006      	b.n	b4c0 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    b4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b4b4:	3301      	adds	r3, #1
    b4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    b4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b4ba:	2b07      	cmp	r3, #7
    b4bc:	d9eb      	bls.n	b496 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    b4be:	2300      	movs	r3, #0
}
    b4c0:	4618      	mov	r0, r3
    b4c2:	3734      	adds	r7, #52	; 0x34
    b4c4:	46bd      	mov	sp, r7
    b4c6:	bcb0      	pop	{r4, r5, r7}
    b4c8:	4770      	bx	lr
    b4ca:	bf00      	nop
    b4cc:	00020cdc 	.word	0x00020cdc

0000b4d0 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    b4d0:	b480      	push	{r7}
    b4d2:	b083      	sub	sp, #12
    b4d4:	af00      	add	r7, sp, #0
    b4d6:	6078      	str	r0, [r7, #4]
    b4d8:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM7) {
    b4da:	687b      	ldr	r3, [r7, #4]
    b4dc:	4a05      	ldr	r2, [pc, #20]	; (b4f4 <_sercom_init_irq_param+0x24>)
    b4de:	4293      	cmp	r3, r2
    b4e0:	d102      	bne.n	b4e8 <_sercom_init_irq_param+0x18>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    b4e2:	4a05      	ldr	r2, [pc, #20]	; (b4f8 <_sercom_init_irq_param+0x28>)
    b4e4:	683b      	ldr	r3, [r7, #0]
    b4e6:	6013      	str	r3, [r2, #0]
	}
}
    b4e8:	bf00      	nop
    b4ea:	370c      	adds	r7, #12
    b4ec:	46bd      	mov	sp, r7
    b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4f2:	4770      	bx	lr
    b4f4:	43000c00 	.word	0x43000c00
    b4f8:	200089dc 	.word	0x200089dc

0000b4fc <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    b4fc:	b580      	push	{r7, lr}
    b4fe:	b084      	sub	sp, #16
    b500:	af00      	add	r7, sp, #0
    b502:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    b504:	6878      	ldr	r0, [r7, #4]
    b506:	4b13      	ldr	r3, [pc, #76]	; (b554 <_get_i2cm_index+0x58>)
    b508:	4798      	blx	r3
    b50a:	4603      	mov	r3, r0
    b50c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    b50e:	2300      	movs	r3, #0
    b510:	73fb      	strb	r3, [r7, #15]
    b512:	e010      	b.n	b536 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    b514:	7bfa      	ldrb	r2, [r7, #15]
    b516:	4910      	ldr	r1, [pc, #64]	; (b558 <_get_i2cm_index+0x5c>)
    b518:	4613      	mov	r3, r2
    b51a:	005b      	lsls	r3, r3, #1
    b51c:	4413      	add	r3, r2
    b51e:	00db      	lsls	r3, r3, #3
    b520:	440b      	add	r3, r1
    b522:	781b      	ldrb	r3, [r3, #0]
    b524:	7bba      	ldrb	r2, [r7, #14]
    b526:	429a      	cmp	r2, r3
    b528:	d102      	bne.n	b530 <_get_i2cm_index+0x34>
			return i;
    b52a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b52e:	e00d      	b.n	b54c <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    b530:	7bfb      	ldrb	r3, [r7, #15]
    b532:	3301      	adds	r3, #1
    b534:	73fb      	strb	r3, [r7, #15]
    b536:	7bfb      	ldrb	r3, [r7, #15]
    b538:	2b02      	cmp	r3, #2
    b53a:	d9eb      	bls.n	b514 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    b53c:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    b540:	4906      	ldr	r1, [pc, #24]	; (b55c <_get_i2cm_index+0x60>)
    b542:	2000      	movs	r0, #0
    b544:	4b06      	ldr	r3, [pc, #24]	; (b560 <_get_i2cm_index+0x64>)
    b546:	4798      	blx	r3
	return -1;
    b548:	f04f 33ff 	mov.w	r3, #4294967295
}
    b54c:	4618      	mov	r0, r3
    b54e:	3710      	adds	r7, #16
    b550:	46bd      	mov	sp, r7
    b552:	bd80      	pop	{r7, pc}
    b554:	0000b475 	.word	0x0000b475
    b558:	2000007c 	.word	0x2000007c
    b55c:	00020cc0 	.word	0x00020cc0
    b560:	00008145 	.word	0x00008145

0000b564 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    b564:	b580      	push	{r7, lr}
    b566:	b082      	sub	sp, #8
    b568:	af00      	add	r7, sp, #0
    b56a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    b56c:	2103      	movs	r1, #3
    b56e:	6878      	ldr	r0, [r7, #4]
    b570:	4b02      	ldr	r3, [pc, #8]	; (b57c <_sercom_i2c_send_stop+0x18>)
    b572:	4798      	blx	r3
}
    b574:	bf00      	nop
    b576:	3708      	adds	r7, #8
    b578:	46bd      	mov	sp, r7
    b57a:	bd80      	pop	{r7, pc}
    b57c:	0000b1f1 	.word	0x0000b1f1

0000b580 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    b580:	b590      	push	{r4, r7, lr}
    b582:	b087      	sub	sp, #28
    b584:	af00      	add	r7, sp, #0
    b586:	60f8      	str	r0, [r7, #12]
    b588:	60b9      	str	r1, [r7, #8]
    b58a:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b58c:	68f8      	ldr	r0, [r7, #12]
    b58e:	4b7d      	ldr	r3, [pc, #500]	; (b784 <_sercom_i2c_sync_analyse_flags+0x204>)
    b590:	4798      	blx	r3
    b592:	4603      	mov	r3, r0
    b594:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    b596:	68f8      	ldr	r0, [r7, #12]
    b598:	4b7b      	ldr	r3, [pc, #492]	; (b788 <_sercom_i2c_sync_analyse_flags+0x208>)
    b59a:	4798      	blx	r3
    b59c:	4603      	mov	r3, r0
    b59e:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    b5a0:	68bb      	ldr	r3, [r7, #8]
    b5a2:	f003 0301 	and.w	r3, r3, #1
    b5a6:	2b00      	cmp	r3, #0
    b5a8:	f000 8095 	beq.w	b6d6 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    b5ac:	8a7b      	ldrh	r3, [r7, #18]
    b5ae:	f003 0302 	and.w	r3, r3, #2
    b5b2:	2b00      	cmp	r3, #0
    b5b4:	d01d      	beq.n	b5f2 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    b5b6:	68f8      	ldr	r0, [r7, #12]
    b5b8:	4b74      	ldr	r3, [pc, #464]	; (b78c <_sercom_i2c_sync_analyse_flags+0x20c>)
    b5ba:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    b5bc:	687b      	ldr	r3, [r7, #4]
    b5be:	885b      	ldrh	r3, [r3, #2]
    b5c0:	b29b      	uxth	r3, r3
    b5c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    b5c6:	b29a      	uxth	r2, r3
    b5c8:	687b      	ldr	r3, [r7, #4]
    b5ca:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    b5cc:	687b      	ldr	r3, [r7, #4]
    b5ce:	885b      	ldrh	r3, [r3, #2]
    b5d0:	b29b      	uxth	r3, r3
    b5d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b5d6:	b29a      	uxth	r2, r3
    b5d8:	687b      	ldr	r3, [r7, #4]
    b5da:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    b5dc:	8a7b      	ldrh	r3, [r7, #18]
    b5de:	f003 0301 	and.w	r3, r3, #1
    b5e2:	2b00      	cmp	r3, #0
    b5e4:	d002      	beq.n	b5ec <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    b5e6:	f06f 0304 	mvn.w	r3, #4
    b5ea:	e0c6      	b.n	b77a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    b5ec:	f06f 0303 	mvn.w	r3, #3
    b5f0:	e0c3      	b.n	b77a <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    b5f2:	8a7b      	ldrh	r3, [r7, #18]
    b5f4:	f003 0304 	and.w	r3, r3, #4
    b5f8:	2b00      	cmp	r3, #0
    b5fa:	d01f      	beq.n	b63c <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    b5fc:	687b      	ldr	r3, [r7, #4]
    b5fe:	685b      	ldr	r3, [r3, #4]
    b600:	2b00      	cmp	r3, #0
    b602:	dd07      	ble.n	b614 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    b604:	687b      	ldr	r3, [r7, #4]
    b606:	885b      	ldrh	r3, [r3, #2]
    b608:	b29b      	uxth	r3, r3
    b60a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    b60e:	b29a      	uxth	r2, r3
    b610:	687b      	ldr	r3, [r7, #4]
    b612:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    b614:	687b      	ldr	r3, [r7, #4]
    b616:	885b      	ldrh	r3, [r3, #2]
    b618:	b29b      	uxth	r3, r3
    b61a:	b21b      	sxth	r3, r3
    b61c:	2b00      	cmp	r3, #0
    b61e:	da02      	bge.n	b626 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    b620:	68f8      	ldr	r0, [r7, #12]
    b622:	4b5b      	ldr	r3, [pc, #364]	; (b790 <_sercom_i2c_sync_analyse_flags+0x210>)
    b624:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b626:	687b      	ldr	r3, [r7, #4]
    b628:	885b      	ldrh	r3, [r3, #2]
    b62a:	b29b      	uxth	r3, r3
    b62c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b630:	b29a      	uxth	r2, r3
    b632:	687b      	ldr	r3, [r7, #4]
    b634:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    b636:	f06f 0301 	mvn.w	r3, #1
    b63a:	e09e      	b.n	b77a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    b63c:	687b      	ldr	r3, [r7, #4]
    b63e:	885b      	ldrh	r3, [r3, #2]
    b640:	b29b      	uxth	r3, r3
    b642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b646:	2b00      	cmp	r3, #0
    b648:	d01c      	beq.n	b684 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    b64a:	687b      	ldr	r3, [r7, #4]
    b64c:	881b      	ldrh	r3, [r3, #0]
    b64e:	121b      	asrs	r3, r3, #8
    b650:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b652:	f003 0406 	and.w	r4, r3, #6
    b656:	68f8      	ldr	r0, [r7, #12]
    b658:	4b4e      	ldr	r3, [pc, #312]	; (b794 <_sercom_i2c_sync_analyse_flags+0x214>)
    b65a:	4798      	blx	r3
    b65c:	4603      	mov	r3, r0
    b65e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b662:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    b664:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    b668:	4619      	mov	r1, r3
    b66a:	68f8      	ldr	r0, [r7, #12]
    b66c:	4b4a      	ldr	r3, [pc, #296]	; (b798 <_sercom_i2c_sync_analyse_flags+0x218>)
    b66e:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    b670:	687b      	ldr	r3, [r7, #4]
    b672:	885b      	ldrh	r3, [r3, #2]
    b674:	b29b      	uxth	r3, r3
    b676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    b67a:	b29a      	uxth	r2, r3
    b67c:	687b      	ldr	r3, [r7, #4]
    b67e:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    b680:	2300      	movs	r3, #0
    b682:	e07a      	b.n	b77a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    b684:	687b      	ldr	r3, [r7, #4]
    b686:	685b      	ldr	r3, [r3, #4]
    b688:	2b00      	cmp	r3, #0
    b68a:	d111      	bne.n	b6b0 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    b68c:	687b      	ldr	r3, [r7, #4]
    b68e:	885b      	ldrh	r3, [r3, #2]
    b690:	b29b      	uxth	r3, r3
    b692:	b21b      	sxth	r3, r3
    b694:	2b00      	cmp	r3, #0
    b696:	da02      	bge.n	b69e <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    b698:	68f8      	ldr	r0, [r7, #12]
    b69a:	4b3d      	ldr	r3, [pc, #244]	; (b790 <_sercom_i2c_sync_analyse_flags+0x210>)
    b69c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b69e:	687b      	ldr	r3, [r7, #4]
    b6a0:	885b      	ldrh	r3, [r3, #2]
    b6a2:	b29b      	uxth	r3, r3
    b6a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b6a8:	b29a      	uxth	r2, r3
    b6aa:	687b      	ldr	r3, [r7, #4]
    b6ac:	805a      	strh	r2, [r3, #2]
    b6ae:	e010      	b.n	b6d2 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    b6b0:	687b      	ldr	r3, [r7, #4]
    b6b2:	689b      	ldr	r3, [r3, #8]
    b6b4:	781b      	ldrb	r3, [r3, #0]
    b6b6:	4619      	mov	r1, r3
    b6b8:	68f8      	ldr	r0, [r7, #12]
    b6ba:	4b38      	ldr	r3, [pc, #224]	; (b79c <_sercom_i2c_sync_analyse_flags+0x21c>)
    b6bc:	4798      	blx	r3
				msg->buffer++;
    b6be:	687b      	ldr	r3, [r7, #4]
    b6c0:	689b      	ldr	r3, [r3, #8]
    b6c2:	1c5a      	adds	r2, r3, #1
    b6c4:	687b      	ldr	r3, [r7, #4]
    b6c6:	609a      	str	r2, [r3, #8]
				msg->len--;
    b6c8:	687b      	ldr	r3, [r7, #4]
    b6ca:	685b      	ldr	r3, [r3, #4]
    b6cc:	1e5a      	subs	r2, r3, #1
    b6ce:	687b      	ldr	r3, [r7, #4]
    b6d0:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    b6d2:	2300      	movs	r3, #0
    b6d4:	e051      	b.n	b77a <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    b6d6:	68bb      	ldr	r3, [r7, #8]
    b6d8:	f003 0302 	and.w	r3, r3, #2
    b6dc:	2b00      	cmp	r3, #0
    b6de:	d04b      	beq.n	b778 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    b6e0:	687b      	ldr	r3, [r7, #4]
    b6e2:	685b      	ldr	r3, [r3, #4]
    b6e4:	2b00      	cmp	r3, #0
    b6e6:	d041      	beq.n	b76c <_sercom_i2c_sync_analyse_flags+0x1ec>
    b6e8:	8a7b      	ldrh	r3, [r7, #18]
    b6ea:	f003 0304 	and.w	r3, r3, #4
    b6ee:	2b00      	cmp	r3, #0
    b6f0:	d13c      	bne.n	b76c <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    b6f2:	687b      	ldr	r3, [r7, #4]
    b6f4:	685b      	ldr	r3, [r3, #4]
    b6f6:	1e5a      	subs	r2, r3, #1
    b6f8:	687b      	ldr	r3, [r7, #4]
    b6fa:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    b6fc:	687b      	ldr	r3, [r7, #4]
    b6fe:	685b      	ldr	r3, [r3, #4]
    b700:	2b00      	cmp	r3, #0
    b702:	d102      	bne.n	b70a <_sercom_i2c_sync_analyse_flags+0x18a>
    b704:	697b      	ldr	r3, [r7, #20]
    b706:	2b00      	cmp	r3, #0
    b708:	d006      	beq.n	b718 <_sercom_i2c_sync_analyse_flags+0x198>
    b70a:	687b      	ldr	r3, [r7, #4]
    b70c:	685b      	ldr	r3, [r3, #4]
    b70e:	2b01      	cmp	r3, #1
    b710:	d105      	bne.n	b71e <_sercom_i2c_sync_analyse_flags+0x19e>
    b712:	697b      	ldr	r3, [r7, #20]
    b714:	2b00      	cmp	r3, #0
    b716:	d002      	beq.n	b71e <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    b718:	68f8      	ldr	r0, [r7, #12]
    b71a:	4b21      	ldr	r3, [pc, #132]	; (b7a0 <_sercom_i2c_sync_analyse_flags+0x220>)
    b71c:	4798      	blx	r3
			}

			if (msg->len == 0) {
    b71e:	687b      	ldr	r3, [r7, #4]
    b720:	685b      	ldr	r3, [r3, #4]
    b722:	2b00      	cmp	r3, #0
    b724:	d113      	bne.n	b74e <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    b726:	687b      	ldr	r3, [r7, #4]
    b728:	885b      	ldrh	r3, [r3, #2]
    b72a:	b29b      	uxth	r3, r3
    b72c:	b21b      	sxth	r3, r3
    b72e:	2b00      	cmp	r3, #0
    b730:	da05      	bge.n	b73e <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    b732:	68f8      	ldr	r0, [r7, #12]
    b734:	4b1b      	ldr	r3, [pc, #108]	; (b7a4 <_sercom_i2c_sync_analyse_flags+0x224>)
    b736:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    b738:	68f8      	ldr	r0, [r7, #12]
    b73a:	4b15      	ldr	r3, [pc, #84]	; (b790 <_sercom_i2c_sync_analyse_flags+0x210>)
    b73c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    b73e:	687b      	ldr	r3, [r7, #4]
    b740:	885b      	ldrh	r3, [r3, #2]
    b742:	b29b      	uxth	r3, r3
    b744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b748:	b29a      	uxth	r2, r3
    b74a:	687b      	ldr	r3, [r7, #4]
    b74c:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    b74e:	687b      	ldr	r3, [r7, #4]
    b750:	689c      	ldr	r4, [r3, #8]
    b752:	1c62      	adds	r2, r4, #1
    b754:	687b      	ldr	r3, [r7, #4]
    b756:	609a      	str	r2, [r3, #8]
    b758:	68f8      	ldr	r0, [r7, #12]
    b75a:	4b13      	ldr	r3, [pc, #76]	; (b7a8 <_sercom_i2c_sync_analyse_flags+0x228>)
    b75c:	4798      	blx	r3
    b75e:	4603      	mov	r3, r0
    b760:	b2db      	uxtb	r3, r3
    b762:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    b764:	68f8      	ldr	r0, [r7, #12]
    b766:	4b11      	ldr	r3, [pc, #68]	; (b7ac <_sercom_i2c_sync_analyse_flags+0x22c>)
    b768:	4798      	blx	r3
    b76a:	e005      	b.n	b778 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    b76c:	68f8      	ldr	r0, [r7, #12]
    b76e:	4b0f      	ldr	r3, [pc, #60]	; (b7ac <_sercom_i2c_sync_analyse_flags+0x22c>)
    b770:	4798      	blx	r3
			return I2C_NACK;
    b772:	f06f 0301 	mvn.w	r3, #1
    b776:	e000      	b.n	b77a <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    b778:	2300      	movs	r3, #0
}
    b77a:	4618      	mov	r0, r3
    b77c:	371c      	adds	r7, #28
    b77e:	46bd      	mov	sp, r7
    b780:	bd90      	pop	{r4, r7, pc}
    b782:	bf00      	nop
    b784:	0000aff1 	.word	0x0000aff1
    b788:	0000b429 	.word	0x0000b429
    b78c:	0000ae3d 	.word	0x0000ae3d
    b790:	0000b565 	.word	0x0000b565
    b794:	0000b309 	.word	0x0000b309
    b798:	0000b2e5 	.word	0x0000b2e5
    b79c:	0000b345 	.word	0x0000b345
    b7a0:	0000b1a1 	.word	0x0000b1a1
    b7a4:	0000b179 	.word	0x0000b179
    b7a8:	0000b369 	.word	0x0000b369
    b7ac:	0000ae57 	.word	0x0000ae57

0000b7b0 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    b7b0:	b580      	push	{r7, lr}
    b7b2:	b086      	sub	sp, #24
    b7b4:	af00      	add	r7, sp, #0
    b7b6:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    b7b8:	687b      	ldr	r3, [r7, #4]
    b7ba:	691b      	ldr	r3, [r3, #16]
    b7bc:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    b7be:	6938      	ldr	r0, [r7, #16]
    b7c0:	4b37      	ldr	r3, [pc, #220]	; (b8a0 <_sercom_i2c_m_irq_handler+0xf0>)
    b7c2:	4798      	blx	r3
    b7c4:	4603      	mov	r3, r0
    b7c6:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    b7c8:	2300      	movs	r3, #0
    b7ca:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    b7cc:	687b      	ldr	r3, [r7, #4]
    b7ce:	2b00      	cmp	r3, #0
    b7d0:	bf14      	ite	ne
    b7d2:	2301      	movne	r3, #1
    b7d4:	2300      	moveq	r3, #0
    b7d6:	b2db      	uxtb	r3, r3
    b7d8:	f240 421e 	movw	r2, #1054	; 0x41e
    b7dc:	4931      	ldr	r1, [pc, #196]	; (b8a4 <_sercom_i2c_m_irq_handler+0xf4>)
    b7de:	4618      	mov	r0, r3
    b7e0:	4b31      	ldr	r3, [pc, #196]	; (b8a8 <_sercom_i2c_m_irq_handler+0xf8>)
    b7e2:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    b7e4:	687b      	ldr	r3, [r7, #4]
    b7e6:	691b      	ldr	r3, [r3, #16]
    b7e8:	2b00      	cmp	r3, #0
    b7ea:	bf14      	ite	ne
    b7ec:	2301      	movne	r3, #1
    b7ee:	2300      	moveq	r3, #0
    b7f0:	b2db      	uxtb	r3, r3
    b7f2:	f240 421f 	movw	r2, #1055	; 0x41f
    b7f6:	492b      	ldr	r1, [pc, #172]	; (b8a4 <_sercom_i2c_m_irq_handler+0xf4>)
    b7f8:	4618      	mov	r0, r3
    b7fa:	4b2b      	ldr	r3, [pc, #172]	; (b8a8 <_sercom_i2c_m_irq_handler+0xf8>)
    b7fc:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    b7fe:	bf00      	nop
    b800:	68fb      	ldr	r3, [r7, #12]
    b802:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b806:	2b00      	cmp	r3, #0
    b808:	d126      	bne.n	b858 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    b80a:	687b      	ldr	r3, [r7, #4]
    b80c:	461a      	mov	r2, r3
    b80e:	68f9      	ldr	r1, [r7, #12]
    b810:	6938      	ldr	r0, [r7, #16]
    b812:	4b26      	ldr	r3, [pc, #152]	; (b8ac <_sercom_i2c_m_irq_handler+0xfc>)
    b814:	4798      	blx	r3
    b816:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    b818:	697b      	ldr	r3, [r7, #20]
    b81a:	2b00      	cmp	r3, #0
    b81c:	d11b      	bne.n	b856 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    b81e:	68fb      	ldr	r3, [r7, #12]
    b820:	f003 0301 	and.w	r3, r3, #1
    b824:	2b00      	cmp	r3, #0
    b826:	d008      	beq.n	b83a <_sercom_i2c_m_irq_handler+0x8a>
    b828:	687b      	ldr	r3, [r7, #4]
    b82a:	699b      	ldr	r3, [r3, #24]
    b82c:	2b00      	cmp	r3, #0
    b82e:	d004      	beq.n	b83a <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    b830:	687b      	ldr	r3, [r7, #4]
    b832:	699b      	ldr	r3, [r3, #24]
    b834:	6878      	ldr	r0, [r7, #4]
    b836:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    b838:	e02e      	b.n	b898 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    b83a:	68fb      	ldr	r3, [r7, #12]
    b83c:	f003 0302 	and.w	r3, r3, #2
    b840:	2b00      	cmp	r3, #0
    b842:	d029      	beq.n	b898 <_sercom_i2c_m_irq_handler+0xe8>
    b844:	687b      	ldr	r3, [r7, #4]
    b846:	69db      	ldr	r3, [r3, #28]
    b848:	2b00      	cmp	r3, #0
    b84a:	d025      	beq.n	b898 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    b84c:	687b      	ldr	r3, [r7, #4]
    b84e:	69db      	ldr	r3, [r3, #28]
    b850:	6878      	ldr	r0, [r7, #4]
    b852:	4798      	blx	r3
		return;
    b854:	e020      	b.n	b898 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    b856:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b858:	687b      	ldr	r3, [r7, #4]
    b85a:	885b      	ldrh	r3, [r3, #2]
    b85c:	b29b      	uxth	r3, r3
    b85e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b862:	b29a      	uxth	r2, r3
    b864:	687b      	ldr	r3, [r7, #4]
    b866:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    b868:	687b      	ldr	r3, [r7, #4]
    b86a:	695b      	ldr	r3, [r3, #20]
    b86c:	2b00      	cmp	r3, #0
    b86e:	d014      	beq.n	b89a <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    b870:	697b      	ldr	r3, [r7, #20]
    b872:	2b00      	cmp	r3, #0
    b874:	d005      	beq.n	b882 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    b876:	687b      	ldr	r3, [r7, #4]
    b878:	695b      	ldr	r3, [r3, #20]
    b87a:	6979      	ldr	r1, [r7, #20]
    b87c:	6878      	ldr	r0, [r7, #4]
    b87e:	4798      	blx	r3
    b880:	e005      	b.n	b88e <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    b882:	687b      	ldr	r3, [r7, #4]
    b884:	695b      	ldr	r3, [r3, #20]
    b886:	f06f 0104 	mvn.w	r1, #4
    b88a:	6878      	ldr	r0, [r7, #4]
    b88c:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    b88e:	2180      	movs	r1, #128	; 0x80
    b890:	6938      	ldr	r0, [r7, #16]
    b892:	4b07      	ldr	r3, [pc, #28]	; (b8b0 <_sercom_i2c_m_irq_handler+0x100>)
    b894:	4798      	blx	r3
    b896:	e000      	b.n	b89a <_sercom_i2c_m_irq_handler+0xea>
		return;
    b898:	bf00      	nop
	}
}
    b89a:	3718      	adds	r7, #24
    b89c:	46bd      	mov	sp, r7
    b89e:	bd80      	pop	{r7, pc}
    b8a0:	0000ae71 	.word	0x0000ae71
    b8a4:	00020cc0 	.word	0x00020cc0
    b8a8:	00008145 	.word	0x00008145
    b8ac:	0000b581 	.word	0x0000b581
    b8b0:	0000ae8b 	.word	0x0000ae8b

0000b8b4 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    b8b4:	b580      	push	{r7, lr}
    b8b6:	b082      	sub	sp, #8
    b8b8:	af00      	add	r7, sp, #0
    b8ba:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    b8bc:	687b      	ldr	r3, [r7, #4]
    b8be:	2b00      	cmp	r3, #0
    b8c0:	bf14      	ite	ne
    b8c2:	2301      	movne	r3, #1
    b8c4:	2300      	moveq	r3, #0
    b8c6:	b2db      	uxtb	r3, r3
    b8c8:	f240 4244 	movw	r2, #1092	; 0x444
    b8cc:	4906      	ldr	r1, [pc, #24]	; (b8e8 <_i2c_m_async_enable+0x34>)
    b8ce:	4618      	mov	r0, r3
    b8d0:	4b06      	ldr	r3, [pc, #24]	; (b8ec <_i2c_m_async_enable+0x38>)
    b8d2:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    b8d4:	687b      	ldr	r3, [r7, #4]
    b8d6:	691b      	ldr	r3, [r3, #16]
    b8d8:	4618      	mov	r0, r3
    b8da:	4b05      	ldr	r3, [pc, #20]	; (b8f0 <_i2c_m_async_enable+0x3c>)
    b8dc:	4798      	blx	r3
    b8de:	4603      	mov	r3, r0
}
    b8e0:	4618      	mov	r0, r3
    b8e2:	3708      	adds	r7, #8
    b8e4:	46bd      	mov	sp, r7
    b8e6:	bd80      	pop	{r7, pc}
    b8e8:	00020cc0 	.word	0x00020cc0
    b8ec:	00008145 	.word	0x00008145
    b8f0:	0000bf75 	.word	0x0000bf75

0000b8f4 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    b8f4:	b580      	push	{r7, lr}
    b8f6:	b082      	sub	sp, #8
    b8f8:	af00      	add	r7, sp, #0
    b8fa:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    b8fc:	6878      	ldr	r0, [r7, #4]
    b8fe:	4b05      	ldr	r3, [pc, #20]	; (b914 <_sercom_get_irq_num+0x20>)
    b900:	4798      	blx	r3
    b902:	4603      	mov	r3, r0
    b904:	009b      	lsls	r3, r3, #2
    b906:	b2db      	uxtb	r3, r3
    b908:	332e      	adds	r3, #46	; 0x2e
    b90a:	b2db      	uxtb	r3, r3
}
    b90c:	4618      	mov	r0, r3
    b90e:	3708      	adds	r7, #8
    b910:	46bd      	mov	sp, r7
    b912:	bd80      	pop	{r7, pc}
    b914:	0000b475 	.word	0x0000b475

0000b918 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    b918:	b580      	push	{r7, lr}
    b91a:	b086      	sub	sp, #24
    b91c:	af00      	add	r7, sp, #0
    b91e:	6078      	str	r0, [r7, #4]
    b920:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    b922:	687b      	ldr	r3, [r7, #4]
    b924:	2b00      	cmp	r3, #0
    b926:	bf14      	ite	ne
    b928:	2301      	movne	r3, #1
    b92a:	2300      	moveq	r3, #0
    b92c:	b2db      	uxtb	r3, r3
    b92e:	f240 4292 	movw	r2, #1170	; 0x492
    b932:	491d      	ldr	r1, [pc, #116]	; (b9a8 <_i2c_m_async_init+0x90>)
    b934:	4618      	mov	r0, r3
    b936:	4b1d      	ldr	r3, [pc, #116]	; (b9ac <_i2c_m_async_init+0x94>)
    b938:	4798      	blx	r3

	i2c_dev->hw = hw;
    b93a:	687b      	ldr	r3, [r7, #4]
    b93c:	683a      	ldr	r2, [r7, #0]
    b93e:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    b940:	687b      	ldr	r3, [r7, #4]
    b942:	6839      	ldr	r1, [r7, #0]
    b944:	4618      	mov	r0, r3
    b946:	4b1a      	ldr	r3, [pc, #104]	; (b9b0 <_i2c_m_async_init+0x98>)
    b948:	4798      	blx	r3
    b94a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    b94c:	68fb      	ldr	r3, [r7, #12]
    b94e:	2b00      	cmp	r3, #0
    b950:	d001      	beq.n	b956 <_i2c_m_async_init+0x3e>
		return init_status;
    b952:	68fb      	ldr	r3, [r7, #12]
    b954:	e024      	b.n	b9a0 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    b956:	6879      	ldr	r1, [r7, #4]
    b958:	6838      	ldr	r0, [r7, #0]
    b95a:	4b16      	ldr	r3, [pc, #88]	; (b9b4 <_i2c_m_async_init+0x9c>)
    b95c:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    b95e:	6838      	ldr	r0, [r7, #0]
    b960:	4b15      	ldr	r3, [pc, #84]	; (b9b8 <_i2c_m_async_init+0xa0>)
    b962:	4798      	blx	r3
    b964:	4603      	mov	r3, r0
    b966:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    b968:	2300      	movs	r3, #0
    b96a:	613b      	str	r3, [r7, #16]
    b96c:	e014      	b.n	b998 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    b96e:	7dfb      	ldrb	r3, [r7, #23]
    b970:	b21b      	sxth	r3, r3
    b972:	4618      	mov	r0, r3
    b974:	4b11      	ldr	r3, [pc, #68]	; (b9bc <_i2c_m_async_init+0xa4>)
    b976:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    b978:	7dfb      	ldrb	r3, [r7, #23]
    b97a:	b21b      	sxth	r3, r3
    b97c:	4618      	mov	r0, r3
    b97e:	4b10      	ldr	r3, [pc, #64]	; (b9c0 <_i2c_m_async_init+0xa8>)
    b980:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    b982:	7dfb      	ldrb	r3, [r7, #23]
    b984:	b21b      	sxth	r3, r3
    b986:	4618      	mov	r0, r3
    b988:	4b0e      	ldr	r3, [pc, #56]	; (b9c4 <_i2c_m_async_init+0xac>)
    b98a:	4798      	blx	r3
		irq++;
    b98c:	7dfb      	ldrb	r3, [r7, #23]
    b98e:	3301      	adds	r3, #1
    b990:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    b992:	693b      	ldr	r3, [r7, #16]
    b994:	3301      	adds	r3, #1
    b996:	613b      	str	r3, [r7, #16]
    b998:	693b      	ldr	r3, [r7, #16]
    b99a:	2b03      	cmp	r3, #3
    b99c:	d9e7      	bls.n	b96e <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    b99e:	2300      	movs	r3, #0
}
    b9a0:	4618      	mov	r0, r3
    b9a2:	3718      	adds	r7, #24
    b9a4:	46bd      	mov	sp, r7
    b9a6:	bd80      	pop	{r7, pc}
    b9a8:	00020cc0 	.word	0x00020cc0
    b9ac:	00008145 	.word	0x00008145
    b9b0:	0000c001 	.word	0x0000c001
    b9b4:	0000b4d1 	.word	0x0000b4d1
    b9b8:	0000b8f5 	.word	0x0000b8f5
    b9bc:	0000ad25 	.word	0x0000ad25
    b9c0:	0000ad69 	.word	0x0000ad69
    b9c4:	0000ace9 	.word	0x0000ace9

0000b9c8 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    b9c8:	b590      	push	{r4, r7, lr}
    b9ca:	b087      	sub	sp, #28
    b9cc:	af00      	add	r7, sp, #0
    b9ce:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    b9d0:	687b      	ldr	r3, [r7, #4]
    b9d2:	691b      	ldr	r3, [r3, #16]
    b9d4:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    b9d6:	687b      	ldr	r3, [r7, #4]
    b9d8:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b9da:	6978      	ldr	r0, [r7, #20]
    b9dc:	4b33      	ldr	r3, [pc, #204]	; (baac <_sercom_i2c_send_address+0xe4>)
    b9de:	4798      	blx	r3
    b9e0:	4603      	mov	r3, r0
    b9e2:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    b9e4:	687b      	ldr	r3, [r7, #4]
    b9e6:	2b00      	cmp	r3, #0
    b9e8:	bf14      	ite	ne
    b9ea:	2301      	movne	r3, #1
    b9ec:	2300      	moveq	r3, #0
    b9ee:	b2db      	uxtb	r3, r3
    b9f0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
    b9f4:	492e      	ldr	r1, [pc, #184]	; (bab0 <_sercom_i2c_send_address+0xe8>)
    b9f6:	4618      	mov	r0, r3
    b9f8:	4b2e      	ldr	r3, [pc, #184]	; (bab4 <_sercom_i2c_send_address+0xec>)
    b9fa:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    b9fc:	693b      	ldr	r3, [r7, #16]
    b9fe:	685b      	ldr	r3, [r3, #4]
    ba00:	2b01      	cmp	r3, #1
    ba02:	d106      	bne.n	ba12 <_sercom_i2c_send_address+0x4a>
    ba04:	68fb      	ldr	r3, [r7, #12]
    ba06:	2b00      	cmp	r3, #0
    ba08:	d003      	beq.n	ba12 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    ba0a:	6978      	ldr	r0, [r7, #20]
    ba0c:	4b2a      	ldr	r3, [pc, #168]	; (bab8 <_sercom_i2c_send_address+0xf0>)
    ba0e:	4798      	blx	r3
    ba10:	e002      	b.n	ba18 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    ba12:	6978      	ldr	r0, [r7, #20]
    ba14:	4b29      	ldr	r3, [pc, #164]	; (babc <_sercom_i2c_send_address+0xf4>)
    ba16:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    ba18:	693b      	ldr	r3, [r7, #16]
    ba1a:	881b      	ldrh	r3, [r3, #0]
    ba1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ba20:	2b00      	cmp	r3, #0
    ba22:	d022      	beq.n	ba6a <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    ba24:	693b      	ldr	r3, [r7, #16]
    ba26:	885b      	ldrh	r3, [r3, #2]
    ba28:	b29b      	uxth	r3, r3
    ba2a:	f003 0301 	and.w	r3, r3, #1
    ba2e:	2b00      	cmp	r3, #0
    ba30:	d007      	beq.n	ba42 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    ba32:	693b      	ldr	r3, [r7, #16]
    ba34:	885b      	ldrh	r3, [r3, #2]
    ba36:	b29b      	uxth	r3, r3
    ba38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ba3c:	b29a      	uxth	r2, r3
    ba3e:	693b      	ldr	r3, [r7, #16]
    ba40:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    ba42:	693b      	ldr	r3, [r7, #16]
    ba44:	881b      	ldrh	r3, [r3, #0]
    ba46:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    ba48:	f240 74fe 	movw	r4, #2046	; 0x7fe
    ba4c:	401c      	ands	r4, r3
    ba4e:	6978      	ldr	r0, [r7, #20]
    ba50:	4b1b      	ldr	r3, [pc, #108]	; (bac0 <_sercom_i2c_send_address+0xf8>)
    ba52:	4798      	blx	r3
    ba54:	4603      	mov	r3, r0
    ba56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    ba5a:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    ba5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ba60:	4619      	mov	r1, r3
    ba62:	6978      	ldr	r0, [r7, #20]
    ba64:	4b17      	ldr	r3, [pc, #92]	; (bac4 <_sercom_i2c_send_address+0xfc>)
    ba66:	4798      	blx	r3
    ba68:	e01a      	b.n	baa0 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    ba6a:	693b      	ldr	r3, [r7, #16]
    ba6c:	881b      	ldrh	r3, [r3, #0]
    ba6e:	005b      	lsls	r3, r3, #1
    ba70:	b2db      	uxtb	r3, r3
    ba72:	693a      	ldr	r2, [r7, #16]
    ba74:	8852      	ldrh	r2, [r2, #2]
    ba76:	b292      	uxth	r2, r2
    ba78:	f002 0201 	and.w	r2, r2, #1
    ba7c:	2a00      	cmp	r2, #0
    ba7e:	bf14      	ite	ne
    ba80:	2201      	movne	r2, #1
    ba82:	2200      	moveq	r2, #0
    ba84:	b2d2      	uxtb	r2, r2
    ba86:	4313      	orrs	r3, r2
    ba88:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    ba8a:	6978      	ldr	r0, [r7, #20]
    ba8c:	4b0c      	ldr	r3, [pc, #48]	; (bac0 <_sercom_i2c_send_address+0xf8>)
    ba8e:	4798      	blx	r3
    ba90:	4603      	mov	r3, r0
    ba92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    ba96:	4323      	orrs	r3, r4
    ba98:	4619      	mov	r1, r3
    ba9a:	6978      	ldr	r0, [r7, #20]
    ba9c:	4b09      	ldr	r3, [pc, #36]	; (bac4 <_sercom_i2c_send_address+0xfc>)
    ba9e:	4798      	blx	r3
	}

	return ERR_NONE;
    baa0:	2300      	movs	r3, #0
}
    baa2:	4618      	mov	r0, r3
    baa4:	371c      	adds	r7, #28
    baa6:	46bd      	mov	sp, r7
    baa8:	bd90      	pop	{r4, r7, pc}
    baaa:	bf00      	nop
    baac:	0000aff1 	.word	0x0000aff1
    bab0:	00020cc0 	.word	0x00020cc0
    bab4:	00008145 	.word	0x00008145
    bab8:	0000b1a1 	.word	0x0000b1a1
    babc:	0000b1c9 	.word	0x0000b1c9
    bac0:	0000b309 	.word	0x0000b309
    bac4:	0000b2e5 	.word	0x0000b2e5

0000bac8 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    bac8:	b580      	push	{r7, lr}
    baca:	b084      	sub	sp, #16
    bacc:	af00      	add	r7, sp, #0
    bace:	6078      	str	r0, [r7, #4]
    bad0:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    bad2:	687b      	ldr	r3, [r7, #4]
    bad4:	2b00      	cmp	r3, #0
    bad6:	bf14      	ite	ne
    bad8:	2301      	movne	r3, #1
    bada:	2300      	moveq	r3, #0
    badc:	b2db      	uxtb	r3, r3
    bade:	f44f 629d 	mov.w	r2, #1256	; 0x4e8
    bae2:	492a      	ldr	r1, [pc, #168]	; (bb8c <_i2c_m_async_transfer+0xc4>)
    bae4:	4618      	mov	r0, r3
    bae6:	4b2a      	ldr	r3, [pc, #168]	; (bb90 <_i2c_m_async_transfer+0xc8>)
    bae8:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    baea:	687b      	ldr	r3, [r7, #4]
    baec:	691b      	ldr	r3, [r3, #16]
    baee:	2b00      	cmp	r3, #0
    baf0:	bf14      	ite	ne
    baf2:	2301      	movne	r3, #1
    baf4:	2300      	moveq	r3, #0
    baf6:	b2db      	uxtb	r3, r3
    baf8:	f240 42e9 	movw	r2, #1257	; 0x4e9
    bafc:	4923      	ldr	r1, [pc, #140]	; (bb8c <_i2c_m_async_transfer+0xc4>)
    bafe:	4618      	mov	r0, r3
    bb00:	4b23      	ldr	r3, [pc, #140]	; (bb90 <_i2c_m_async_transfer+0xc8>)
    bb02:	4798      	blx	r3
	ASSERT(msg);
    bb04:	683b      	ldr	r3, [r7, #0]
    bb06:	2b00      	cmp	r3, #0
    bb08:	bf14      	ite	ne
    bb0a:	2301      	movne	r3, #1
    bb0c:	2300      	moveq	r3, #0
    bb0e:	b2db      	uxtb	r3, r3
    bb10:	f240 42ea 	movw	r2, #1258	; 0x4ea
    bb14:	491d      	ldr	r1, [pc, #116]	; (bb8c <_i2c_m_async_transfer+0xc4>)
    bb16:	4618      	mov	r0, r3
    bb18:	4b1d      	ldr	r3, [pc, #116]	; (bb90 <_i2c_m_async_transfer+0xc8>)
    bb1a:	4798      	blx	r3

	if (msg->len == 0) {
    bb1c:	683b      	ldr	r3, [r7, #0]
    bb1e:	685b      	ldr	r3, [r3, #4]
    bb20:	2b00      	cmp	r3, #0
    bb22:	d101      	bne.n	bb28 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    bb24:	2300      	movs	r3, #0
    bb26:	e02d      	b.n	bb84 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    bb28:	687b      	ldr	r3, [r7, #4]
    bb2a:	885b      	ldrh	r3, [r3, #2]
    bb2c:	b29b      	uxth	r3, r3
    bb2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    bb32:	2b00      	cmp	r3, #0
    bb34:	d002      	beq.n	bb3c <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    bb36:	f06f 0303 	mvn.w	r3, #3
    bb3a:	e023      	b.n	bb84 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    bb3c:	683b      	ldr	r3, [r7, #0]
    bb3e:	885b      	ldrh	r3, [r3, #2]
    bb40:	b29b      	uxth	r3, r3
    bb42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bb46:	b29a      	uxth	r2, r3
    bb48:	683b      	ldr	r3, [r7, #0]
    bb4a:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    bb4c:	687b      	ldr	r3, [r7, #4]
    bb4e:	683a      	ldr	r2, [r7, #0]
    bb50:	ca07      	ldmia	r2, {r0, r1, r2}
    bb52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    bb56:	687b      	ldr	r3, [r7, #4]
    bb58:	691b      	ldr	r3, [r3, #16]
    bb5a:	4618      	mov	r0, r3
    bb5c:	4b0d      	ldr	r3, [pc, #52]	; (bb94 <_i2c_m_async_transfer+0xcc>)
    bb5e:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    bb60:	6878      	ldr	r0, [r7, #4]
    bb62:	4b0d      	ldr	r3, [pc, #52]	; (bb98 <_i2c_m_async_transfer+0xd0>)
    bb64:	4798      	blx	r3
    bb66:	60f8      	str	r0, [r7, #12]

	if (ret) {
    bb68:	68fb      	ldr	r3, [r7, #12]
    bb6a:	2b00      	cmp	r3, #0
    bb6c:	d009      	beq.n	bb82 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    bb6e:	687b      	ldr	r3, [r7, #4]
    bb70:	885b      	ldrh	r3, [r3, #2]
    bb72:	b29b      	uxth	r3, r3
    bb74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bb78:	b29a      	uxth	r2, r3
    bb7a:	687b      	ldr	r3, [r7, #4]
    bb7c:	805a      	strh	r2, [r3, #2]

		return ret;
    bb7e:	68fb      	ldr	r3, [r7, #12]
    bb80:	e000      	b.n	bb84 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    bb82:	2300      	movs	r3, #0
}
    bb84:	4618      	mov	r0, r3
    bb86:	3710      	adds	r7, #16
    bb88:	46bd      	mov	sp, r7
    bb8a:	bd80      	pop	{r7, pc}
    bb8c:	00020cc0 	.word	0x00020cc0
    bb90:	00008145 	.word	0x00008145
    bb94:	0000b151 	.word	0x0000b151
    bb98:	0000b9c9 	.word	0x0000b9c9

0000bb9c <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    bb9c:	b480      	push	{r7}
    bb9e:	b085      	sub	sp, #20
    bba0:	af00      	add	r7, sp, #0
    bba2:	60f8      	str	r0, [r7, #12]
    bba4:	460b      	mov	r3, r1
    bba6:	607a      	str	r2, [r7, #4]
    bba8:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    bbaa:	7afb      	ldrb	r3, [r7, #11]
    bbac:	2b01      	cmp	r3, #1
    bbae:	d008      	beq.n	bbc2 <_i2c_m_async_register_callback+0x26>
    bbb0:	2b02      	cmp	r3, #2
    bbb2:	d00a      	beq.n	bbca <_i2c_m_async_register_callback+0x2e>
    bbb4:	2b00      	cmp	r3, #0
    bbb6:	d000      	beq.n	bbba <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    bbb8:	e00b      	b.n	bbd2 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    bbba:	68fb      	ldr	r3, [r7, #12]
    bbbc:	687a      	ldr	r2, [r7, #4]
    bbbe:	615a      	str	r2, [r3, #20]
		break;
    bbc0:	e007      	b.n	bbd2 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    bbc2:	68fb      	ldr	r3, [r7, #12]
    bbc4:	687a      	ldr	r2, [r7, #4]
    bbc6:	619a      	str	r2, [r3, #24]
		break;
    bbc8:	e003      	b.n	bbd2 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    bbca:	68fb      	ldr	r3, [r7, #12]
    bbcc:	687a      	ldr	r2, [r7, #4]
    bbce:	61da      	str	r2, [r3, #28]
		break;
    bbd0:	bf00      	nop
	}

	return ERR_NONE;
    bbd2:	2300      	movs	r3, #0
}
    bbd4:	4618      	mov	r0, r3
    bbd6:	3714      	adds	r7, #20
    bbd8:	46bd      	mov	sp, r7
    bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbde:	4770      	bx	lr

0000bbe0 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    bbe0:	b580      	push	{r7, lr}
    bbe2:	b082      	sub	sp, #8
    bbe4:	af00      	add	r7, sp, #0
    bbe6:	6078      	str	r0, [r7, #4]
    bbe8:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    bbea:	687b      	ldr	r3, [r7, #4]
    bbec:	2b00      	cmp	r3, #0
    bbee:	bf14      	ite	ne
    bbf0:	2301      	movne	r3, #1
    bbf2:	2300      	moveq	r3, #0
    bbf4:	b2db      	uxtb	r3, r3
    bbf6:	f44f 62a9 	mov.w	r2, #1352	; 0x548
    bbfa:	4908      	ldr	r1, [pc, #32]	; (bc1c <_i2c_m_sync_init+0x3c>)
    bbfc:	4618      	mov	r0, r3
    bbfe:	4b08      	ldr	r3, [pc, #32]	; (bc20 <_i2c_m_sync_init+0x40>)
    bc00:	4798      	blx	r3

	i2c_dev->hw = hw;
    bc02:	687b      	ldr	r3, [r7, #4]
    bc04:	683a      	ldr	r2, [r7, #0]
    bc06:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    bc08:	687b      	ldr	r3, [r7, #4]
    bc0a:	6839      	ldr	r1, [r7, #0]
    bc0c:	4618      	mov	r0, r3
    bc0e:	4b05      	ldr	r3, [pc, #20]	; (bc24 <_i2c_m_sync_init+0x44>)
    bc10:	4798      	blx	r3
    bc12:	4603      	mov	r3, r0
}
    bc14:	4618      	mov	r0, r3
    bc16:	3708      	adds	r7, #8
    bc18:	46bd      	mov	sp, r7
    bc1a:	bd80      	pop	{r7, pc}
    bc1c:	00020cc0 	.word	0x00020cc0
    bc20:	00008145 	.word	0x00008145
    bc24:	0000c001 	.word	0x0000c001

0000bc28 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    bc28:	b580      	push	{r7, lr}
    bc2a:	b082      	sub	sp, #8
    bc2c:	af00      	add	r7, sp, #0
    bc2e:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    bc30:	687b      	ldr	r3, [r7, #4]
    bc32:	2b00      	cmp	r3, #0
    bc34:	bf14      	ite	ne
    bc36:	2301      	movne	r3, #1
    bc38:	2300      	moveq	r3, #0
    bc3a:	b2db      	uxtb	r3, r3
    bc3c:	f240 5265 	movw	r2, #1381	; 0x565
    bc40:	4906      	ldr	r1, [pc, #24]	; (bc5c <_i2c_m_sync_enable+0x34>)
    bc42:	4618      	mov	r0, r3
    bc44:	4b06      	ldr	r3, [pc, #24]	; (bc60 <_i2c_m_sync_enable+0x38>)
    bc46:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    bc48:	687b      	ldr	r3, [r7, #4]
    bc4a:	691b      	ldr	r3, [r3, #16]
    bc4c:	4618      	mov	r0, r3
    bc4e:	4b05      	ldr	r3, [pc, #20]	; (bc64 <_i2c_m_sync_enable+0x3c>)
    bc50:	4798      	blx	r3
    bc52:	4603      	mov	r3, r0
}
    bc54:	4618      	mov	r0, r3
    bc56:	3708      	adds	r7, #8
    bc58:	46bd      	mov	sp, r7
    bc5a:	bd80      	pop	{r7, pc}
    bc5c:	00020cc0 	.word	0x00020cc0
    bc60:	00008145 	.word	0x00008145
    bc64:	0000bf75 	.word	0x0000bf75

0000bc68 <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    bc68:	b580      	push	{r7, lr}
    bc6a:	b082      	sub	sp, #8
    bc6c:	af00      	add	r7, sp, #0
    bc6e:	6078      	str	r0, [r7, #4]
    bc70:	460b      	mov	r3, r1
    bc72:	70fb      	strb	r3, [r7, #3]
    bc74:	4613      	mov	r3, r2
    bc76:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    bc78:	78fb      	ldrb	r3, [r7, #3]
    bc7a:	2b01      	cmp	r3, #1
    bc7c:	d002      	beq.n	bc84 <_i2c_m_async_set_irq_state+0x1c>
    bc7e:	78fb      	ldrb	r3, [r7, #3]
    bc80:	2b02      	cmp	r3, #2
    bc82:	d10e      	bne.n	bca2 <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    bc84:	687b      	ldr	r3, [r7, #4]
    bc86:	691b      	ldr	r3, [r3, #16]
    bc88:	78ba      	ldrb	r2, [r7, #2]
    bc8a:	4611      	mov	r1, r2
    bc8c:	4618      	mov	r0, r3
    bc8e:	4b0c      	ldr	r3, [pc, #48]	; (bcc0 <_i2c_m_async_set_irq_state+0x58>)
    bc90:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    bc92:	687b      	ldr	r3, [r7, #4]
    bc94:	691b      	ldr	r3, [r3, #16]
    bc96:	78ba      	ldrb	r2, [r7, #2]
    bc98:	4611      	mov	r1, r2
    bc9a:	4618      	mov	r0, r3
    bc9c:	4b09      	ldr	r3, [pc, #36]	; (bcc4 <_i2c_m_async_set_irq_state+0x5c>)
    bc9e:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    bca0:	e009      	b.n	bcb6 <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    bca2:	78fb      	ldrb	r3, [r7, #3]
    bca4:	2b00      	cmp	r3, #0
    bca6:	d106      	bne.n	bcb6 <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    bca8:	687b      	ldr	r3, [r7, #4]
    bcaa:	691b      	ldr	r3, [r3, #16]
    bcac:	78ba      	ldrb	r2, [r7, #2]
    bcae:	4611      	mov	r1, r2
    bcb0:	4618      	mov	r0, r3
    bcb2:	4b05      	ldr	r3, [pc, #20]	; (bcc8 <_i2c_m_async_set_irq_state+0x60>)
    bcb4:	4798      	blx	r3
}
    bcb6:	bf00      	nop
    bcb8:	3708      	adds	r7, #8
    bcba:	46bd      	mov	sp, r7
    bcbc:	bd80      	pop	{r7, pc}
    bcbe:	bf00      	nop
    bcc0:	0000af3b 	.word	0x0000af3b
    bcc4:	0000af09 	.word	0x0000af09
    bcc8:	0000af6d 	.word	0x0000af6d

0000bccc <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    bccc:	b580      	push	{r7, lr}
    bcce:	b084      	sub	sp, #16
    bcd0:	af00      	add	r7, sp, #0
    bcd2:	6078      	str	r0, [r7, #4]
    bcd4:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    bcd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bcda:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    bcdc:	687b      	ldr	r3, [r7, #4]
    bcde:	691b      	ldr	r3, [r3, #16]
    bce0:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    bce2:	68b8      	ldr	r0, [r7, #8]
    bce4:	4b0f      	ldr	r3, [pc, #60]	; (bd24 <_sercom_i2c_sync_wait_bus+0x58>)
    bce6:	4798      	blx	r3
    bce8:	4603      	mov	r3, r0
    bcea:	461a      	mov	r2, r3
    bcec:	683b      	ldr	r3, [r7, #0]
    bcee:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    bcf0:	68fb      	ldr	r3, [r7, #12]
    bcf2:	1e5a      	subs	r2, r3, #1
    bcf4:	60fa      	str	r2, [r7, #12]
    bcf6:	2b00      	cmp	r3, #0
    bcf8:	d102      	bne.n	bd00 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    bcfa:	f06f 0304 	mvn.w	r3, #4
    bcfe:	e00c      	b.n	bd1a <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    bd00:	683b      	ldr	r3, [r7, #0]
    bd02:	681b      	ldr	r3, [r3, #0]
    bd04:	f003 0301 	and.w	r3, r3, #1
    bd08:	2b00      	cmp	r3, #0
    bd0a:	d105      	bne.n	bd18 <_sercom_i2c_sync_wait_bus+0x4c>
    bd0c:	683b      	ldr	r3, [r7, #0]
    bd0e:	681b      	ldr	r3, [r3, #0]
    bd10:	f003 0302 	and.w	r3, r3, #2
    bd14:	2b00      	cmp	r3, #0
    bd16:	d0e4      	beq.n	bce2 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    bd18:	2300      	movs	r3, #0
}
    bd1a:	4618      	mov	r0, r3
    bd1c:	3710      	adds	r7, #16
    bd1e:	46bd      	mov	sp, r7
    bd20:	bd80      	pop	{r7, pc}
    bd22:	bf00      	nop
    bd24:	0000ae71 	.word	0x0000ae71

0000bd28 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    bd28:	b590      	push	{r4, r7, lr}
    bd2a:	b087      	sub	sp, #28
    bd2c:	af00      	add	r7, sp, #0
    bd2e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    bd30:	687b      	ldr	r3, [r7, #4]
    bd32:	691b      	ldr	r3, [r3, #16]
    bd34:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    bd36:	687b      	ldr	r3, [r7, #4]
    bd38:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    bd3a:	6978      	ldr	r0, [r7, #20]
    bd3c:	4b39      	ldr	r3, [pc, #228]	; (be24 <_sercom_i2c_sync_send_address+0xfc>)
    bd3e:	4798      	blx	r3
    bd40:	4603      	mov	r3, r0
    bd42:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    bd44:	687b      	ldr	r3, [r7, #4]
    bd46:	2b00      	cmp	r3, #0
    bd48:	bf14      	ite	ne
    bd4a:	2301      	movne	r3, #1
    bd4c:	2300      	moveq	r3, #0
    bd4e:	b2db      	uxtb	r3, r3
    bd50:	f240 52d5 	movw	r2, #1493	; 0x5d5
    bd54:	4934      	ldr	r1, [pc, #208]	; (be28 <_sercom_i2c_sync_send_address+0x100>)
    bd56:	4618      	mov	r0, r3
    bd58:	4b34      	ldr	r3, [pc, #208]	; (be2c <_sercom_i2c_sync_send_address+0x104>)
    bd5a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    bd5c:	693b      	ldr	r3, [r7, #16]
    bd5e:	685b      	ldr	r3, [r3, #4]
    bd60:	2b01      	cmp	r3, #1
    bd62:	d106      	bne.n	bd72 <_sercom_i2c_sync_send_address+0x4a>
    bd64:	68fb      	ldr	r3, [r7, #12]
    bd66:	2b00      	cmp	r3, #0
    bd68:	d003      	beq.n	bd72 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    bd6a:	6978      	ldr	r0, [r7, #20]
    bd6c:	4b30      	ldr	r3, [pc, #192]	; (be30 <_sercom_i2c_sync_send_address+0x108>)
    bd6e:	4798      	blx	r3
    bd70:	e002      	b.n	bd78 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    bd72:	6978      	ldr	r0, [r7, #20]
    bd74:	4b2f      	ldr	r3, [pc, #188]	; (be34 <_sercom_i2c_sync_send_address+0x10c>)
    bd76:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    bd78:	693b      	ldr	r3, [r7, #16]
    bd7a:	881b      	ldrh	r3, [r3, #0]
    bd7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    bd80:	2b00      	cmp	r3, #0
    bd82:	d022      	beq.n	bdca <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    bd84:	693b      	ldr	r3, [r7, #16]
    bd86:	885b      	ldrh	r3, [r3, #2]
    bd88:	b29b      	uxth	r3, r3
    bd8a:	f003 0301 	and.w	r3, r3, #1
    bd8e:	2b00      	cmp	r3, #0
    bd90:	d007      	beq.n	bda2 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    bd92:	693b      	ldr	r3, [r7, #16]
    bd94:	885b      	ldrh	r3, [r3, #2]
    bd96:	b29b      	uxth	r3, r3
    bd98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    bd9c:	b29a      	uxth	r2, r3
    bd9e:	693b      	ldr	r3, [r7, #16]
    bda0:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    bda2:	693b      	ldr	r3, [r7, #16]
    bda4:	881b      	ldrh	r3, [r3, #0]
    bda6:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    bda8:	f240 74fe 	movw	r4, #2046	; 0x7fe
    bdac:	401c      	ands	r4, r3
    bdae:	6978      	ldr	r0, [r7, #20]
    bdb0:	4b21      	ldr	r3, [pc, #132]	; (be38 <_sercom_i2c_sync_send_address+0x110>)
    bdb2:	4798      	blx	r3
    bdb4:	4603      	mov	r3, r0
    bdb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    bdba:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    bdbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    bdc0:	4619      	mov	r1, r3
    bdc2:	6978      	ldr	r0, [r7, #20]
    bdc4:	4b1d      	ldr	r3, [pc, #116]	; (be3c <_sercom_i2c_sync_send_address+0x114>)
    bdc6:	4798      	blx	r3
    bdc8:	e01a      	b.n	be00 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    bdca:	693b      	ldr	r3, [r7, #16]
    bdcc:	881b      	ldrh	r3, [r3, #0]
    bdce:	005b      	lsls	r3, r3, #1
    bdd0:	b2db      	uxtb	r3, r3
    bdd2:	693a      	ldr	r2, [r7, #16]
    bdd4:	8852      	ldrh	r2, [r2, #2]
    bdd6:	b292      	uxth	r2, r2
    bdd8:	f002 0201 	and.w	r2, r2, #1
    bddc:	2a00      	cmp	r2, #0
    bdde:	bf14      	ite	ne
    bde0:	2201      	movne	r2, #1
    bde2:	2200      	moveq	r2, #0
    bde4:	b2d2      	uxtb	r2, r2
    bde6:	4313      	orrs	r3, r2
    bde8:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    bdea:	6978      	ldr	r0, [r7, #20]
    bdec:	4b12      	ldr	r3, [pc, #72]	; (be38 <_sercom_i2c_sync_send_address+0x110>)
    bdee:	4798      	blx	r3
    bdf0:	4603      	mov	r3, r0
    bdf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    bdf6:	4323      	orrs	r3, r4
    bdf8:	4619      	mov	r1, r3
    bdfa:	6978      	ldr	r0, [r7, #20]
    bdfc:	4b0f      	ldr	r3, [pc, #60]	; (be3c <_sercom_i2c_sync_send_address+0x114>)
    bdfe:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    be00:	f107 0308 	add.w	r3, r7, #8
    be04:	4619      	mov	r1, r3
    be06:	6878      	ldr	r0, [r7, #4]
    be08:	4b0d      	ldr	r3, [pc, #52]	; (be40 <_sercom_i2c_sync_send_address+0x118>)
    be0a:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    be0c:	68bb      	ldr	r3, [r7, #8]
    be0e:	693a      	ldr	r2, [r7, #16]
    be10:	4619      	mov	r1, r3
    be12:	6978      	ldr	r0, [r7, #20]
    be14:	4b0b      	ldr	r3, [pc, #44]	; (be44 <_sercom_i2c_sync_send_address+0x11c>)
    be16:	4798      	blx	r3
    be18:	4603      	mov	r3, r0
}
    be1a:	4618      	mov	r0, r3
    be1c:	371c      	adds	r7, #28
    be1e:	46bd      	mov	sp, r7
    be20:	bd90      	pop	{r4, r7, pc}
    be22:	bf00      	nop
    be24:	0000aff1 	.word	0x0000aff1
    be28:	00020cc0 	.word	0x00020cc0
    be2c:	00008145 	.word	0x00008145
    be30:	0000b1a1 	.word	0x0000b1a1
    be34:	0000b1c9 	.word	0x0000b1c9
    be38:	0000b309 	.word	0x0000b309
    be3c:	0000b2e5 	.word	0x0000b2e5
    be40:	0000bccd 	.word	0x0000bccd
    be44:	0000b581 	.word	0x0000b581

0000be48 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    be48:	b580      	push	{r7, lr}
    be4a:	b086      	sub	sp, #24
    be4c:	af00      	add	r7, sp, #0
    be4e:	6078      	str	r0, [r7, #4]
    be50:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    be52:	687b      	ldr	r3, [r7, #4]
    be54:	691b      	ldr	r3, [r3, #16]
    be56:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    be58:	687b      	ldr	r3, [r7, #4]
    be5a:	2b00      	cmp	r3, #0
    be5c:	bf14      	ite	ne
    be5e:	2301      	movne	r3, #1
    be60:	2300      	moveq	r3, #0
    be62:	b2db      	uxtb	r3, r3
    be64:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    be68:	493b      	ldr	r1, [pc, #236]	; (bf58 <_i2c_m_sync_transfer+0x110>)
    be6a:	4618      	mov	r0, r3
    be6c:	4b3b      	ldr	r3, [pc, #236]	; (bf5c <_i2c_m_sync_transfer+0x114>)
    be6e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    be70:	687b      	ldr	r3, [r7, #4]
    be72:	691b      	ldr	r3, [r3, #16]
    be74:	2b00      	cmp	r3, #0
    be76:	bf14      	ite	ne
    be78:	2301      	movne	r3, #1
    be7a:	2300      	moveq	r3, #0
    be7c:	b2db      	uxtb	r3, r3
    be7e:	f240 6201 	movw	r2, #1537	; 0x601
    be82:	4935      	ldr	r1, [pc, #212]	; (bf58 <_i2c_m_sync_transfer+0x110>)
    be84:	4618      	mov	r0, r3
    be86:	4b35      	ldr	r3, [pc, #212]	; (bf5c <_i2c_m_sync_transfer+0x114>)
    be88:	4798      	blx	r3
	ASSERT(msg);
    be8a:	683b      	ldr	r3, [r7, #0]
    be8c:	2b00      	cmp	r3, #0
    be8e:	bf14      	ite	ne
    be90:	2301      	movne	r3, #1
    be92:	2300      	moveq	r3, #0
    be94:	b2db      	uxtb	r3, r3
    be96:	f240 6202 	movw	r2, #1538	; 0x602
    be9a:	492f      	ldr	r1, [pc, #188]	; (bf58 <_i2c_m_sync_transfer+0x110>)
    be9c:	4618      	mov	r0, r3
    be9e:	4b2f      	ldr	r3, [pc, #188]	; (bf5c <_i2c_m_sync_transfer+0x114>)
    bea0:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    bea2:	687b      	ldr	r3, [r7, #4]
    bea4:	885b      	ldrh	r3, [r3, #2]
    bea6:	b29b      	uxth	r3, r3
    bea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    beac:	2b00      	cmp	r3, #0
    beae:	d002      	beq.n	beb6 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    beb0:	f06f 0305 	mvn.w	r3, #5
    beb4:	e04c      	b.n	bf50 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    beb6:	683b      	ldr	r3, [r7, #0]
    beb8:	885b      	ldrh	r3, [r3, #2]
    beba:	b29b      	uxth	r3, r3
    bebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bec0:	b29a      	uxth	r2, r3
    bec2:	683b      	ldr	r3, [r7, #0]
    bec4:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    bec6:	687b      	ldr	r3, [r7, #4]
    bec8:	683a      	ldr	r2, [r7, #0]
    beca:	ca07      	ldmia	r2, {r0, r1, r2}
    becc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    bed0:	6938      	ldr	r0, [r7, #16]
    bed2:	4b23      	ldr	r3, [pc, #140]	; (bf60 <_i2c_m_sync_transfer+0x118>)
    bed4:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    bed6:	6878      	ldr	r0, [r7, #4]
    bed8:	4b22      	ldr	r3, [pc, #136]	; (bf64 <_i2c_m_sync_transfer+0x11c>)
    beda:	4798      	blx	r3
    bedc:	6178      	str	r0, [r7, #20]

	if (ret) {
    bede:	697b      	ldr	r3, [r7, #20]
    bee0:	2b00      	cmp	r3, #0
    bee2:	d02d      	beq.n	bf40 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    bee4:	687b      	ldr	r3, [r7, #4]
    bee6:	885b      	ldrh	r3, [r3, #2]
    bee8:	b29b      	uxth	r3, r3
    beea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    beee:	b29a      	uxth	r2, r3
    bef0:	687b      	ldr	r3, [r7, #4]
    bef2:	805a      	strh	r2, [r3, #2]

		return ret;
    bef4:	697b      	ldr	r3, [r7, #20]
    bef6:	e02b      	b.n	bf50 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    bef8:	f107 030c 	add.w	r3, r7, #12
    befc:	4619      	mov	r1, r3
    befe:	6878      	ldr	r0, [r7, #4]
    bf00:	4b19      	ldr	r3, [pc, #100]	; (bf68 <_i2c_m_sync_transfer+0x120>)
    bf02:	4798      	blx	r3
    bf04:	6178      	str	r0, [r7, #20]

		if (ret) {
    bf06:	697b      	ldr	r3, [r7, #20]
    bf08:	2b00      	cmp	r3, #0
    bf0a:	d012      	beq.n	bf32 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    bf0c:	683b      	ldr	r3, [r7, #0]
    bf0e:	885b      	ldrh	r3, [r3, #2]
    bf10:	b29b      	uxth	r3, r3
    bf12:	b21b      	sxth	r3, r3
    bf14:	2b00      	cmp	r3, #0
    bf16:	da02      	bge.n	bf1e <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    bf18:	6938      	ldr	r0, [r7, #16]
    bf1a:	4b14      	ldr	r3, [pc, #80]	; (bf6c <_i2c_m_sync_transfer+0x124>)
    bf1c:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    bf1e:	687b      	ldr	r3, [r7, #4]
    bf20:	885b      	ldrh	r3, [r3, #2]
    bf22:	b29b      	uxth	r3, r3
    bf24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bf28:	b29a      	uxth	r2, r3
    bf2a:	687b      	ldr	r3, [r7, #4]
    bf2c:	805a      	strh	r2, [r3, #2]

			return ret;
    bf2e:	697b      	ldr	r3, [r7, #20]
    bf30:	e00e      	b.n	bf50 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    bf32:	68fb      	ldr	r3, [r7, #12]
    bf34:	687a      	ldr	r2, [r7, #4]
    bf36:	4619      	mov	r1, r3
    bf38:	6938      	ldr	r0, [r7, #16]
    bf3a:	4b0d      	ldr	r3, [pc, #52]	; (bf70 <_i2c_m_sync_transfer+0x128>)
    bf3c:	4798      	blx	r3
    bf3e:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    bf40:	687b      	ldr	r3, [r7, #4]
    bf42:	885b      	ldrh	r3, [r3, #2]
    bf44:	b29b      	uxth	r3, r3
    bf46:	f403 7380 	and.w	r3, r3, #256	; 0x100
    bf4a:	2b00      	cmp	r3, #0
    bf4c:	d1d4      	bne.n	bef8 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    bf4e:	697b      	ldr	r3, [r7, #20]
}
    bf50:	4618      	mov	r0, r3
    bf52:	3718      	adds	r7, #24
    bf54:	46bd      	mov	sp, r7
    bf56:	bd80      	pop	{r7, pc}
    bf58:	00020cc0 	.word	0x00020cc0
    bf5c:	00008145 	.word	0x00008145
    bf60:	0000b151 	.word	0x0000b151
    bf64:	0000bd29 	.word	0x0000bd29
    bf68:	0000bccd 	.word	0x0000bccd
    bf6c:	0000b565 	.word	0x0000b565
    bf70:	0000b581 	.word	0x0000b581

0000bf74 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    bf74:	b580      	push	{r7, lr}
    bf76:	b084      	sub	sp, #16
    bf78:	af00      	add	r7, sp, #0
    bf7a:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    bf7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bf80:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    bf82:	2304      	movs	r3, #4
    bf84:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    bf86:	687b      	ldr	r3, [r7, #4]
    bf88:	2b00      	cmp	r3, #0
    bf8a:	bf14      	ite	ne
    bf8c:	2301      	movne	r3, #1
    bf8e:	2300      	moveq	r3, #0
    bf90:	b2db      	uxtb	r3, r3
    bf92:	f240 6235 	movw	r2, #1589	; 0x635
    bf96:	4915      	ldr	r1, [pc, #84]	; (bfec <_i2c_m_enable_implementation+0x78>)
    bf98:	4618      	mov	r0, r3
    bf9a:	4b15      	ldr	r3, [pc, #84]	; (bff0 <_i2c_m_enable_implementation+0x7c>)
    bf9c:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    bf9e:	6878      	ldr	r0, [r7, #4]
    bfa0:	4b14      	ldr	r3, [pc, #80]	; (bff4 <_i2c_m_enable_implementation+0x80>)
    bfa2:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    bfa4:	e016      	b.n	bfd4 <_i2c_m_enable_implementation+0x60>
		timeout--;
    bfa6:	68fb      	ldr	r3, [r7, #12]
    bfa8:	3b01      	subs	r3, #1
    bfaa:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    bfac:	68fb      	ldr	r3, [r7, #12]
    bfae:	2b00      	cmp	r3, #0
    bfb0:	dc10      	bgt.n	bfd4 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    bfb2:	68bb      	ldr	r3, [r7, #8]
    bfb4:	3b01      	subs	r3, #1
    bfb6:	60bb      	str	r3, [r7, #8]
    bfb8:	68bb      	ldr	r3, [r7, #8]
    bfba:	2b00      	cmp	r3, #0
    bfbc:	d007      	beq.n	bfce <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    bfbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bfc2:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    bfc4:	2110      	movs	r1, #16
    bfc6:	6878      	ldr	r0, [r7, #4]
    bfc8:	4b0b      	ldr	r3, [pc, #44]	; (bff8 <_i2c_m_enable_implementation+0x84>)
    bfca:	4798      	blx	r3
    bfcc:	e002      	b.n	bfd4 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    bfce:	f06f 0305 	mvn.w	r3, #5
    bfd2:	e006      	b.n	bfe2 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    bfd4:	6878      	ldr	r0, [r7, #4]
    bfd6:	4b09      	ldr	r3, [pc, #36]	; (bffc <_i2c_m_enable_implementation+0x88>)
    bfd8:	4798      	blx	r3
    bfda:	4603      	mov	r3, r0
    bfdc:	2b01      	cmp	r3, #1
    bfde:	d1e2      	bne.n	bfa6 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    bfe0:	2300      	movs	r3, #0
}
    bfe2:	4618      	mov	r0, r3
    bfe4:	3710      	adds	r7, #16
    bfe6:	46bd      	mov	sp, r7
    bfe8:	bd80      	pop	{r7, pc}
    bfea:	bf00      	nop
    bfec:	00020cc0 	.word	0x00020cc0
    bff0:	00008145 	.word	0x00008145
    bff4:	0000afa1 	.word	0x0000afa1
    bff8:	0000b44d 	.word	0x0000b44d
    bffc:	0000b3fd 	.word	0x0000b3fd

0000c000 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    c000:	b580      	push	{r7, lr}
    c002:	b084      	sub	sp, #16
    c004:	af00      	add	r7, sp, #0
    c006:	6078      	str	r0, [r7, #4]
    c008:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    c00a:	6838      	ldr	r0, [r7, #0]
    c00c:	4b42      	ldr	r3, [pc, #264]	; (c118 <_i2c_m_sync_init_impl+0x118>)
    c00e:	4798      	blx	r3
    c010:	4603      	mov	r3, r0
    c012:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    c014:	2101      	movs	r1, #1
    c016:	6838      	ldr	r0, [r7, #0]
    c018:	4b40      	ldr	r3, [pc, #256]	; (c11c <_i2c_m_sync_init_impl+0x11c>)
    c01a:	4798      	blx	r3
    c01c:	4603      	mov	r3, r0
    c01e:	f083 0301 	eor.w	r3, r3, #1
    c022:	b2db      	uxtb	r3, r3
    c024:	2b00      	cmp	r3, #0
    c026:	d020      	beq.n	c06a <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    c028:	7bfa      	ldrb	r2, [r7, #15]
    c02a:	493d      	ldr	r1, [pc, #244]	; (c120 <_i2c_m_sync_init_impl+0x120>)
    c02c:	4613      	mov	r3, r2
    c02e:	005b      	lsls	r3, r3, #1
    c030:	4413      	add	r3, r2
    c032:	00db      	lsls	r3, r3, #3
    c034:	440b      	add	r3, r1
    c036:	3304      	adds	r3, #4
    c038:	681b      	ldr	r3, [r3, #0]
    c03a:	f003 031c 	and.w	r3, r3, #28
    c03e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    c040:	2102      	movs	r1, #2
    c042:	6838      	ldr	r0, [r7, #0]
    c044:	4b37      	ldr	r3, [pc, #220]	; (c124 <_i2c_m_sync_init_impl+0x124>)
    c046:	4798      	blx	r3
    c048:	4603      	mov	r3, r0
    c04a:	2b00      	cmp	r3, #0
    c04c:	d006      	beq.n	c05c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    c04e:	6838      	ldr	r0, [r7, #0]
    c050:	4b35      	ldr	r3, [pc, #212]	; (c128 <_i2c_m_sync_init_impl+0x128>)
    c052:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    c054:	2102      	movs	r1, #2
    c056:	6838      	ldr	r0, [r7, #0]
    c058:	4b34      	ldr	r3, [pc, #208]	; (c12c <_i2c_m_sync_init_impl+0x12c>)
    c05a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    c05c:	68bb      	ldr	r3, [r7, #8]
    c05e:	f043 0301 	orr.w	r3, r3, #1
    c062:	4619      	mov	r1, r3
    c064:	6838      	ldr	r0, [r7, #0]
    c066:	4b32      	ldr	r3, [pc, #200]	; (c130 <_i2c_m_sync_init_impl+0x130>)
    c068:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    c06a:	2101      	movs	r1, #1
    c06c:	6838      	ldr	r0, [r7, #0]
    c06e:	4b2f      	ldr	r3, [pc, #188]	; (c12c <_i2c_m_sync_init_impl+0x12c>)
    c070:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    c072:	7bfa      	ldrb	r2, [r7, #15]
    c074:	492a      	ldr	r1, [pc, #168]	; (c120 <_i2c_m_sync_init_impl+0x120>)
    c076:	4613      	mov	r3, r2
    c078:	005b      	lsls	r3, r3, #1
    c07a:	4413      	add	r3, r2
    c07c:	00db      	lsls	r3, r3, #3
    c07e:	440b      	add	r3, r1
    c080:	3304      	adds	r3, #4
    c082:	681b      	ldr	r3, [r3, #0]
    c084:	4619      	mov	r1, r3
    c086:	6838      	ldr	r0, [r7, #0]
    c088:	4b29      	ldr	r3, [pc, #164]	; (c130 <_i2c_m_sync_init_impl+0x130>)
    c08a:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    c08c:	7bfa      	ldrb	r2, [r7, #15]
    c08e:	4924      	ldr	r1, [pc, #144]	; (c120 <_i2c_m_sync_init_impl+0x120>)
    c090:	4613      	mov	r3, r2
    c092:	005b      	lsls	r3, r3, #1
    c094:	4413      	add	r3, r2
    c096:	00db      	lsls	r3, r3, #3
    c098:	440b      	add	r3, r1
    c09a:	3308      	adds	r3, #8
    c09c:	681b      	ldr	r3, [r3, #0]
    c09e:	4619      	mov	r1, r3
    c0a0:	6838      	ldr	r0, [r7, #0]
    c0a2:	4b24      	ldr	r3, [pc, #144]	; (c134 <_i2c_m_sync_init_impl+0x134>)
    c0a4:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    c0a6:	7bfa      	ldrb	r2, [r7, #15]
    c0a8:	491d      	ldr	r1, [pc, #116]	; (c120 <_i2c_m_sync_init_impl+0x120>)
    c0aa:	4613      	mov	r3, r2
    c0ac:	005b      	lsls	r3, r3, #1
    c0ae:	4413      	add	r3, r2
    c0b0:	00db      	lsls	r3, r3, #3
    c0b2:	440b      	add	r3, r1
    c0b4:	330c      	adds	r3, #12
    c0b6:	681b      	ldr	r3, [r3, #0]
    c0b8:	4619      	mov	r1, r3
    c0ba:	6838      	ldr	r0, [r7, #0]
    c0bc:	4b1e      	ldr	r3, [pc, #120]	; (c138 <_i2c_m_sync_init_impl+0x138>)
    c0be:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    c0c0:	7bfa      	ldrb	r2, [r7, #15]
    c0c2:	4917      	ldr	r1, [pc, #92]	; (c120 <_i2c_m_sync_init_impl+0x120>)
    c0c4:	4613      	mov	r3, r2
    c0c6:	005b      	lsls	r3, r3, #1
    c0c8:	4413      	add	r3, r2
    c0ca:	00db      	lsls	r3, r3, #3
    c0cc:	440b      	add	r3, r1
    c0ce:	3304      	adds	r3, #4
    c0d0:	681b      	ldr	r3, [r3, #0]
    c0d2:	0e1b      	lsrs	r3, r3, #24
    c0d4:	b29b      	uxth	r3, r3
    c0d6:	f003 0303 	and.w	r3, r3, #3
    c0da:	b29a      	uxth	r2, r3
    c0dc:	687b      	ldr	r3, [r7, #4]
    c0de:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    c0e0:	687b      	ldr	r3, [r7, #4]
    c0e2:	899b      	ldrh	r3, [r3, #12]
    c0e4:	2b01      	cmp	r3, #1
    c0e6:	bf8c      	ite	hi
    c0e8:	2301      	movhi	r3, #1
    c0ea:	2300      	movls	r3, #0
    c0ec:	b2db      	uxtb	r3, r3
    c0ee:	4619      	mov	r1, r3
    c0f0:	6838      	ldr	r0, [r7, #0]
    c0f2:	4b12      	ldr	r3, [pc, #72]	; (c13c <_i2c_m_sync_init_impl+0x13c>)
    c0f4:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    c0f6:	7bfa      	ldrb	r2, [r7, #15]
    c0f8:	4909      	ldr	r1, [pc, #36]	; (c120 <_i2c_m_sync_init_impl+0x120>)
    c0fa:	4613      	mov	r3, r2
    c0fc:	005b      	lsls	r3, r3, #1
    c0fe:	4413      	add	r3, r2
    c100:	00db      	lsls	r3, r3, #3
    c102:	440b      	add	r3, r1
    c104:	3312      	adds	r3, #18
    c106:	881a      	ldrh	r2, [r3, #0]
    c108:	687b      	ldr	r3, [r7, #4]
    c10a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    c10c:	2300      	movs	r3, #0
}
    c10e:	4618      	mov	r0, r3
    c110:	3710      	adds	r7, #16
    c112:	46bd      	mov	sp, r7
    c114:	bd80      	pop	{r7, pc}
    c116:	bf00      	nop
    c118:	0000b4fd 	.word	0x0000b4fd
    c11c:	0000adc9 	.word	0x0000adc9
    c120:	2000007c 	.word	0x2000007c
    c124:	0000b021 	.word	0x0000b021
    c128:	0000afc9 	.word	0x0000afc9
    c12c:	0000ada5 	.word	0x0000ada5
    c130:	0000b051 	.word	0x0000b051
    c134:	0000b221 	.word	0x0000b221
    c138:	0000b269 	.word	0x0000b269
    c13c:	0000b2a5 	.word	0x0000b2a5

0000c140 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    c140:	b580      	push	{r7, lr}
    c142:	b082      	sub	sp, #8
    c144:	af00      	add	r7, sp, #0
    c146:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    c148:	2101      	movs	r1, #1
    c14a:	6878      	ldr	r0, [r7, #4]
    c14c:	4b07      	ldr	r3, [pc, #28]	; (c16c <_spi_sync_enable+0x2c>)
    c14e:	4798      	blx	r3
    c150:	4603      	mov	r3, r0
    c152:	2b00      	cmp	r3, #0
    c154:	d002      	beq.n	c15c <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    c156:	f06f 0303 	mvn.w	r3, #3
    c15a:	e003      	b.n	c164 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    c15c:	6878      	ldr	r0, [r7, #4]
    c15e:	4b04      	ldr	r3, [pc, #16]	; (c170 <_spi_sync_enable+0x30>)
    c160:	4798      	blx	r3

	return ERR_NONE;
    c162:	2300      	movs	r3, #0
}
    c164:	4618      	mov	r0, r3
    c166:	3708      	adds	r7, #8
    c168:	46bd      	mov	sp, r7
    c16a:	bd80      	pop	{r7, pc}
    c16c:	0000ae15 	.word	0x0000ae15
    c170:	0000b075 	.word	0x0000b075

0000c174 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    c174:	b580      	push	{r7, lr}
    c176:	b082      	sub	sp, #8
    c178:	af00      	add	r7, sp, #0
    c17a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    c17c:	2101      	movs	r1, #1
    c17e:	6878      	ldr	r0, [r7, #4]
    c180:	4b07      	ldr	r3, [pc, #28]	; (c1a0 <_spi_sync_disable+0x2c>)
    c182:	4798      	blx	r3
    c184:	4603      	mov	r3, r0
    c186:	2b00      	cmp	r3, #0
    c188:	d002      	beq.n	c190 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    c18a:	f06f 0303 	mvn.w	r3, #3
    c18e:	e003      	b.n	c198 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    c190:	6878      	ldr	r0, [r7, #4]
    c192:	4b04      	ldr	r3, [pc, #16]	; (c1a4 <_spi_sync_disable+0x30>)
    c194:	4798      	blx	r3

	return ERR_NONE;
    c196:	2300      	movs	r3, #0
}
    c198:	4618      	mov	r0, r3
    c19a:	3708      	adds	r7, #8
    c19c:	46bd      	mov	sp, r7
    c19e:	bd80      	pop	{r7, pc}
    c1a0:	0000ae15 	.word	0x0000ae15
    c1a4:	0000b0d5 	.word	0x0000b0d5

0000c1a8 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    c1a8:	b580      	push	{r7, lr}
    c1aa:	b082      	sub	sp, #8
    c1ac:	af00      	add	r7, sp, #0
    c1ae:	6078      	str	r0, [r7, #4]
    c1b0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    c1b2:	687b      	ldr	r3, [r7, #4]
    c1b4:	2b00      	cmp	r3, #0
    c1b6:	d004      	beq.n	c1c2 <_spi_load_regs_master+0x1a>
    c1b8:	683b      	ldr	r3, [r7, #0]
    c1ba:	2b00      	cmp	r3, #0
    c1bc:	d001      	beq.n	c1c2 <_spi_load_regs_master+0x1a>
    c1be:	2301      	movs	r3, #1
    c1c0:	e000      	b.n	c1c4 <_spi_load_regs_master+0x1c>
    c1c2:	2300      	movs	r3, #0
    c1c4:	f003 0301 	and.w	r3, r3, #1
    c1c8:	b2db      	uxtb	r3, r3
    c1ca:	f640 1239 	movw	r2, #2361	; 0x939
    c1ce:	4915      	ldr	r1, [pc, #84]	; (c224 <_spi_load_regs_master+0x7c>)
    c1d0:	4618      	mov	r0, r3
    c1d2:	4b15      	ldr	r3, [pc, #84]	; (c228 <_spi_load_regs_master+0x80>)
    c1d4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    c1d6:	683b      	ldr	r3, [r7, #0]
    c1d8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    c1da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    c1de:	f023 0301 	bic.w	r3, r3, #1
    c1e2:	4619      	mov	r1, r3
    c1e4:	6878      	ldr	r0, [r7, #4]
    c1e6:	4b11      	ldr	r3, [pc, #68]	; (c22c <_spi_load_regs_master+0x84>)
    c1e8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    c1ea:	683b      	ldr	r3, [r7, #0]
    c1ec:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    c1ee:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    c1f2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    c1f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    c1fa:	4619      	mov	r1, r3
    c1fc:	6878      	ldr	r0, [r7, #4]
    c1fe:	4b0c      	ldr	r3, [pc, #48]	; (c230 <_spi_load_regs_master+0x88>)
    c200:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    c202:	683b      	ldr	r3, [r7, #0]
    c204:	7b1b      	ldrb	r3, [r3, #12]
    c206:	4619      	mov	r1, r3
    c208:	6878      	ldr	r0, [r7, #4]
    c20a:	4b0a      	ldr	r3, [pc, #40]	; (c234 <_spi_load_regs_master+0x8c>)
    c20c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    c20e:	683b      	ldr	r3, [r7, #0]
    c210:	7b5b      	ldrb	r3, [r3, #13]
    c212:	4619      	mov	r1, r3
    c214:	6878      	ldr	r0, [r7, #4]
    c216:	4b08      	ldr	r3, [pc, #32]	; (c238 <_spi_load_regs_master+0x90>)
    c218:	4798      	blx	r3
}
    c21a:	bf00      	nop
    c21c:	3708      	adds	r7, #8
    c21e:	46bd      	mov	sp, r7
    c220:	bd80      	pop	{r7, pc}
    c222:	bf00      	nop
    c224:	00020cc0 	.word	0x00020cc0
    c228:	00008145 	.word	0x00008145
    c22c:	0000b12d 	.word	0x0000b12d
    c230:	0000b245 	.word	0x0000b245
    c234:	0000b285 	.word	0x0000b285
    c238:	0000b3bd 	.word	0x0000b3bd

0000c23c <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    c23c:	b580      	push	{r7, lr}
    c23e:	b082      	sub	sp, #8
    c240:	af00      	add	r7, sp, #0
    c242:	6078      	str	r0, [r7, #4]
    c244:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    c246:	687b      	ldr	r3, [r7, #4]
    c248:	2b00      	cmp	r3, #0
    c24a:	d004      	beq.n	c256 <_spi_load_regs_slave+0x1a>
    c24c:	683b      	ldr	r3, [r7, #0]
    c24e:	2b00      	cmp	r3, #0
    c250:	d001      	beq.n	c256 <_spi_load_regs_slave+0x1a>
    c252:	2301      	movs	r3, #1
    c254:	e000      	b.n	c258 <_spi_load_regs_slave+0x1c>
    c256:	2300      	movs	r3, #0
    c258:	f003 0301 	and.w	r3, r3, #1
    c25c:	b2db      	uxtb	r3, r3
    c25e:	f640 124d 	movw	r2, #2381	; 0x94d
    c262:	491a      	ldr	r1, [pc, #104]	; (c2cc <_spi_load_regs_slave+0x90>)
    c264:	4618      	mov	r0, r3
    c266:	4b1a      	ldr	r3, [pc, #104]	; (c2d0 <_spi_load_regs_slave+0x94>)
    c268:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    c26a:	683b      	ldr	r3, [r7, #0]
    c26c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    c26e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    c272:	f023 0301 	bic.w	r3, r3, #1
    c276:	4619      	mov	r1, r3
    c278:	6878      	ldr	r0, [r7, #4]
    c27a:	4b16      	ldr	r3, [pc, #88]	; (c2d4 <_spi_load_regs_slave+0x98>)
    c27c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    c27e:	683b      	ldr	r3, [r7, #0]
    c280:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    c282:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    c286:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    c28a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    c28e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    c292:	4619      	mov	r1, r3
    c294:	6878      	ldr	r0, [r7, #4]
    c296:	4b10      	ldr	r3, [pc, #64]	; (c2d8 <_spi_load_regs_slave+0x9c>)
    c298:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    c29a:	683b      	ldr	r3, [r7, #0]
    c29c:	689b      	ldr	r3, [r3, #8]
    c29e:	4619      	mov	r1, r3
    c2a0:	6878      	ldr	r0, [r7, #4]
    c2a2:	4b0e      	ldr	r3, [pc, #56]	; (c2dc <_spi_load_regs_slave+0xa0>)
    c2a4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    c2a6:	683b      	ldr	r3, [r7, #0]
    c2a8:	7b5b      	ldrb	r3, [r3, #13]
    c2aa:	4619      	mov	r1, r3
    c2ac:	6878      	ldr	r0, [r7, #4]
    c2ae:	4b0c      	ldr	r3, [pc, #48]	; (c2e0 <_spi_load_regs_slave+0xa4>)
    c2b0:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    c2b2:	bf00      	nop
    c2b4:	f04f 31ff 	mov.w	r1, #4294967295
    c2b8:	6878      	ldr	r0, [r7, #4]
    c2ba:	4b0a      	ldr	r3, [pc, #40]	; (c2e4 <_spi_load_regs_slave+0xa8>)
    c2bc:	4798      	blx	r3
    c2be:	4603      	mov	r3, r0
    c2c0:	2b00      	cmp	r3, #0
    c2c2:	d1f7      	bne.n	c2b4 <_spi_load_regs_slave+0x78>
		;
}
    c2c4:	bf00      	nop
    c2c6:	3708      	adds	r7, #8
    c2c8:	46bd      	mov	sp, r7
    c2ca:	bd80      	pop	{r7, pc}
    c2cc:	00020cc0 	.word	0x00020cc0
    c2d0:	00008145 	.word	0x00008145
    c2d4:	0000b12d 	.word	0x0000b12d
    c2d8:	0000b245 	.word	0x0000b245
    c2dc:	0000b329 	.word	0x0000b329
    c2e0:	0000b3bd 	.word	0x0000b3bd
    c2e4:	0000ae15 	.word	0x0000ae15

0000c2e8 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    c2e8:	b580      	push	{r7, lr}
    c2ea:	b084      	sub	sp, #16
    c2ec:	af00      	add	r7, sp, #0
    c2ee:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    c2f0:	687b      	ldr	r3, [r7, #4]
    c2f2:	4618      	mov	r0, r3
    c2f4:	4b11      	ldr	r3, [pc, #68]	; (c33c <_spi_get_regs+0x54>)
    c2f6:	4798      	blx	r3
    c2f8:	4603      	mov	r3, r0
    c2fa:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    c2fc:	2300      	movs	r3, #0
    c2fe:	73fb      	strb	r3, [r7, #15]
    c300:	e014      	b.n	c32c <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    c302:	7bfa      	ldrb	r2, [r7, #15]
    c304:	490e      	ldr	r1, [pc, #56]	; (c340 <_spi_get_regs+0x58>)
    c306:	4613      	mov	r3, r2
    c308:	011b      	lsls	r3, r3, #4
    c30a:	4413      	add	r3, r2
    c30c:	440b      	add	r3, r1
    c30e:	3310      	adds	r3, #16
    c310:	781b      	ldrb	r3, [r3, #0]
    c312:	7bba      	ldrb	r2, [r7, #14]
    c314:	429a      	cmp	r2, r3
    c316:	d106      	bne.n	c326 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    c318:	7bfa      	ldrb	r2, [r7, #15]
    c31a:	4613      	mov	r3, r2
    c31c:	011b      	lsls	r3, r3, #4
    c31e:	4413      	add	r3, r2
    c320:	4a07      	ldr	r2, [pc, #28]	; (c340 <_spi_get_regs+0x58>)
    c322:	4413      	add	r3, r2
    c324:	e006      	b.n	c334 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    c326:	7bfb      	ldrb	r3, [r7, #15]
    c328:	3301      	adds	r3, #1
    c32a:	73fb      	strb	r3, [r7, #15]
    c32c:	7bfb      	ldrb	r3, [r7, #15]
    c32e:	2b01      	cmp	r3, #1
    c330:	d9e7      	bls.n	c302 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    c332:	2300      	movs	r3, #0
}
    c334:	4618      	mov	r0, r3
    c336:	3710      	adds	r7, #16
    c338:	46bd      	mov	sp, r7
    c33a:	bd80      	pop	{r7, pc}
    c33c:	0000b475 	.word	0x0000b475
    c340:	00020cfc 	.word	0x00020cfc

0000c344 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    c344:	b580      	push	{r7, lr}
    c346:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c348:	4b03      	ldr	r3, [pc, #12]	; (c358 <SERCOM7_0_Handler+0x14>)
    c34a:	681b      	ldr	r3, [r3, #0]
    c34c:	4618      	mov	r0, r3
    c34e:	4b03      	ldr	r3, [pc, #12]	; (c35c <SERCOM7_0_Handler+0x18>)
    c350:	4798      	blx	r3
}
    c352:	bf00      	nop
    c354:	bd80      	pop	{r7, pc}
    c356:	bf00      	nop
    c358:	200089dc 	.word	0x200089dc
    c35c:	0000b7b1 	.word	0x0000b7b1

0000c360 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    c360:	b580      	push	{r7, lr}
    c362:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c364:	4b03      	ldr	r3, [pc, #12]	; (c374 <SERCOM7_1_Handler+0x14>)
    c366:	681b      	ldr	r3, [r3, #0]
    c368:	4618      	mov	r0, r3
    c36a:	4b03      	ldr	r3, [pc, #12]	; (c378 <SERCOM7_1_Handler+0x18>)
    c36c:	4798      	blx	r3
}
    c36e:	bf00      	nop
    c370:	bd80      	pop	{r7, pc}
    c372:	bf00      	nop
    c374:	200089dc 	.word	0x200089dc
    c378:	0000b7b1 	.word	0x0000b7b1

0000c37c <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    c37c:	b580      	push	{r7, lr}
    c37e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c380:	4b03      	ldr	r3, [pc, #12]	; (c390 <SERCOM7_2_Handler+0x14>)
    c382:	681b      	ldr	r3, [r3, #0]
    c384:	4618      	mov	r0, r3
    c386:	4b03      	ldr	r3, [pc, #12]	; (c394 <SERCOM7_2_Handler+0x18>)
    c388:	4798      	blx	r3
}
    c38a:	bf00      	nop
    c38c:	bd80      	pop	{r7, pc}
    c38e:	bf00      	nop
    c390:	200089dc 	.word	0x200089dc
    c394:	0000b7b1 	.word	0x0000b7b1

0000c398 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    c398:	b580      	push	{r7, lr}
    c39a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    c39c:	4b03      	ldr	r3, [pc, #12]	; (c3ac <SERCOM7_3_Handler+0x14>)
    c39e:	681b      	ldr	r3, [r3, #0]
    c3a0:	4618      	mov	r0, r3
    c3a2:	4b03      	ldr	r3, [pc, #12]	; (c3b0 <SERCOM7_3_Handler+0x18>)
    c3a4:	4798      	blx	r3
}
    c3a6:	bf00      	nop
    c3a8:	bd80      	pop	{r7, pc}
    c3aa:	bf00      	nop
    c3ac:	200089dc 	.word	0x200089dc
    c3b0:	0000b7b1 	.word	0x0000b7b1

0000c3b4 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    c3b4:	b580      	push	{r7, lr}
    c3b6:	b084      	sub	sp, #16
    c3b8:	af00      	add	r7, sp, #0
    c3ba:	6078      	str	r0, [r7, #4]
    c3bc:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    c3be:	683b      	ldr	r3, [r7, #0]
    c3c0:	4618      	mov	r0, r3
    c3c2:	4b35      	ldr	r3, [pc, #212]	; (c498 <_spi_m_sync_init+0xe4>)
    c3c4:	4798      	blx	r3
    c3c6:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    c3c8:	687b      	ldr	r3, [r7, #4]
    c3ca:	2b00      	cmp	r3, #0
    c3cc:	d004      	beq.n	c3d8 <_spi_m_sync_init+0x24>
    c3ce:	683b      	ldr	r3, [r7, #0]
    c3d0:	2b00      	cmp	r3, #0
    c3d2:	d001      	beq.n	c3d8 <_spi_m_sync_init+0x24>
    c3d4:	2301      	movs	r3, #1
    c3d6:	e000      	b.n	c3da <_spi_m_sync_init+0x26>
    c3d8:	2300      	movs	r3, #0
    c3da:	f003 0301 	and.w	r3, r3, #1
    c3de:	b2db      	uxtb	r3, r3
    c3e0:	f640 128c 	movw	r2, #2444	; 0x98c
    c3e4:	492d      	ldr	r1, [pc, #180]	; (c49c <_spi_m_sync_init+0xe8>)
    c3e6:	4618      	mov	r0, r3
    c3e8:	4b2d      	ldr	r3, [pc, #180]	; (c4a0 <_spi_m_sync_init+0xec>)
    c3ea:	4798      	blx	r3

	if (regs == NULL) {
    c3ec:	68fb      	ldr	r3, [r7, #12]
    c3ee:	2b00      	cmp	r3, #0
    c3f0:	d102      	bne.n	c3f8 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    c3f2:	f06f 030c 	mvn.w	r3, #12
    c3f6:	e04a      	b.n	c48e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    c3f8:	2101      	movs	r1, #1
    c3fa:	6838      	ldr	r0, [r7, #0]
    c3fc:	4b29      	ldr	r3, [pc, #164]	; (c4a4 <_spi_m_sync_init+0xf0>)
    c3fe:	4798      	blx	r3
    c400:	4603      	mov	r3, r0
    c402:	f083 0301 	eor.w	r3, r3, #1
    c406:	b2db      	uxtb	r3, r3
    c408:	2b00      	cmp	r3, #0
    c40a:	d019      	beq.n	c440 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    c40c:	68fb      	ldr	r3, [r7, #12]
    c40e:	681b      	ldr	r3, [r3, #0]
    c410:	f003 031c 	and.w	r3, r3, #28
    c414:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    c416:	2102      	movs	r1, #2
    c418:	6838      	ldr	r0, [r7, #0]
    c41a:	4b23      	ldr	r3, [pc, #140]	; (c4a8 <_spi_m_sync_init+0xf4>)
    c41c:	4798      	blx	r3
    c41e:	4603      	mov	r3, r0
    c420:	2b00      	cmp	r3, #0
    c422:	d006      	beq.n	c432 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    c424:	6838      	ldr	r0, [r7, #0]
    c426:	4b21      	ldr	r3, [pc, #132]	; (c4ac <_spi_m_sync_init+0xf8>)
    c428:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    c42a:	2102      	movs	r1, #2
    c42c:	6838      	ldr	r0, [r7, #0]
    c42e:	4b20      	ldr	r3, [pc, #128]	; (c4b0 <_spi_m_sync_init+0xfc>)
    c430:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    c432:	68bb      	ldr	r3, [r7, #8]
    c434:	f043 0301 	orr.w	r3, r3, #1
    c438:	4619      	mov	r1, r3
    c43a:	6838      	ldr	r0, [r7, #0]
    c43c:	4b1d      	ldr	r3, [pc, #116]	; (c4b4 <_spi_m_sync_init+0x100>)
    c43e:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    c440:	2101      	movs	r1, #1
    c442:	6838      	ldr	r0, [r7, #0]
    c444:	4b1a      	ldr	r3, [pc, #104]	; (c4b0 <_spi_m_sync_init+0xfc>)
    c446:	4798      	blx	r3

	dev->prvt = hw;
    c448:	687b      	ldr	r3, [r7, #4]
    c44a:	683a      	ldr	r2, [r7, #0]
    c44c:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    c44e:	68fb      	ldr	r3, [r7, #12]
    c450:	681b      	ldr	r3, [r3, #0]
    c452:	f003 031c 	and.w	r3, r3, #28
    c456:	2b08      	cmp	r3, #8
    c458:	d104      	bne.n	c464 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    c45a:	68f9      	ldr	r1, [r7, #12]
    c45c:	6838      	ldr	r0, [r7, #0]
    c45e:	4b16      	ldr	r3, [pc, #88]	; (c4b8 <_spi_m_sync_init+0x104>)
    c460:	4798      	blx	r3
    c462:	e003      	b.n	c46c <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    c464:	68f9      	ldr	r1, [r7, #12]
    c466:	6838      	ldr	r0, [r7, #0]
    c468:	4b14      	ldr	r3, [pc, #80]	; (c4bc <_spi_m_sync_init+0x108>)
    c46a:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    c46c:	68fb      	ldr	r3, [r7, #12]
    c46e:	685b      	ldr	r3, [r3, #4]
    c470:	f003 0307 	and.w	r3, r3, #7
    c474:	2b00      	cmp	r3, #0
    c476:	d101      	bne.n	c47c <_spi_m_sync_init+0xc8>
    c478:	2201      	movs	r2, #1
    c47a:	e000      	b.n	c47e <_spi_m_sync_init+0xca>
    c47c:	2202      	movs	r2, #2
    c47e:	687b      	ldr	r3, [r7, #4]
    c480:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    c482:	68fb      	ldr	r3, [r7, #12]
    c484:	89db      	ldrh	r3, [r3, #14]
    c486:	b29a      	uxth	r2, r3
    c488:	687b      	ldr	r3, [r7, #4]
    c48a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    c48c:	2300      	movs	r3, #0
}
    c48e:	4618      	mov	r0, r3
    c490:	3710      	adds	r7, #16
    c492:	46bd      	mov	sp, r7
    c494:	bd80      	pop	{r7, pc}
    c496:	bf00      	nop
    c498:	0000c2e9 	.word	0x0000c2e9
    c49c:	00020cc0 	.word	0x00020cc0
    c4a0:	00008145 	.word	0x00008145
    c4a4:	0000ae15 	.word	0x0000ae15
    c4a8:	0000b0fd 	.word	0x0000b0fd
    c4ac:	0000b0d5 	.word	0x0000b0d5
    c4b0:	0000adf1 	.word	0x0000adf1
    c4b4:	0000b12d 	.word	0x0000b12d
    c4b8:	0000c23d 	.word	0x0000c23d
    c4bc:	0000c1a9 	.word	0x0000c1a9

0000c4c0 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    c4c0:	b580      	push	{r7, lr}
    c4c2:	b082      	sub	sp, #8
    c4c4:	af00      	add	r7, sp, #0
    c4c6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c4c8:	687b      	ldr	r3, [r7, #4]
    c4ca:	2b00      	cmp	r3, #0
    c4cc:	d005      	beq.n	c4da <_spi_m_sync_enable+0x1a>
    c4ce:	687b      	ldr	r3, [r7, #4]
    c4d0:	681b      	ldr	r3, [r3, #0]
    c4d2:	2b00      	cmp	r3, #0
    c4d4:	d001      	beq.n	c4da <_spi_m_sync_enable+0x1a>
    c4d6:	2301      	movs	r3, #1
    c4d8:	e000      	b.n	c4dc <_spi_m_sync_enable+0x1c>
    c4da:	2300      	movs	r3, #0
    c4dc:	f003 0301 	and.w	r3, r3, #1
    c4e0:	b2db      	uxtb	r3, r3
    c4e2:	f640 12eb 	movw	r2, #2539	; 0x9eb
    c4e6:	4907      	ldr	r1, [pc, #28]	; (c504 <_spi_m_sync_enable+0x44>)
    c4e8:	4618      	mov	r0, r3
    c4ea:	4b07      	ldr	r3, [pc, #28]	; (c508 <_spi_m_sync_enable+0x48>)
    c4ec:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    c4ee:	687b      	ldr	r3, [r7, #4]
    c4f0:	681b      	ldr	r3, [r3, #0]
    c4f2:	4618      	mov	r0, r3
    c4f4:	4b05      	ldr	r3, [pc, #20]	; (c50c <_spi_m_sync_enable+0x4c>)
    c4f6:	4798      	blx	r3
    c4f8:	4603      	mov	r3, r0
}
    c4fa:	4618      	mov	r0, r3
    c4fc:	3708      	adds	r7, #8
    c4fe:	46bd      	mov	sp, r7
    c500:	bd80      	pop	{r7, pc}
    c502:	bf00      	nop
    c504:	00020cc0 	.word	0x00020cc0
    c508:	00008145 	.word	0x00008145
    c50c:	0000c141 	.word	0x0000c141

0000c510 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    c510:	b580      	push	{r7, lr}
    c512:	b082      	sub	sp, #8
    c514:	af00      	add	r7, sp, #0
    c516:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    c518:	687b      	ldr	r3, [r7, #4]
    c51a:	2b00      	cmp	r3, #0
    c51c:	d005      	beq.n	c52a <_spi_m_sync_disable+0x1a>
    c51e:	687b      	ldr	r3, [r7, #4]
    c520:	681b      	ldr	r3, [r3, #0]
    c522:	2b00      	cmp	r3, #0
    c524:	d001      	beq.n	c52a <_spi_m_sync_disable+0x1a>
    c526:	2301      	movs	r3, #1
    c528:	e000      	b.n	c52c <_spi_m_sync_disable+0x1c>
    c52a:	2300      	movs	r3, #0
    c52c:	f003 0301 	and.w	r3, r3, #1
    c530:	b2db      	uxtb	r3, r3
    c532:	f640 2207 	movw	r2, #2567	; 0xa07
    c536:	4907      	ldr	r1, [pc, #28]	; (c554 <_spi_m_sync_disable+0x44>)
    c538:	4618      	mov	r0, r3
    c53a:	4b07      	ldr	r3, [pc, #28]	; (c558 <_spi_m_sync_disable+0x48>)
    c53c:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    c53e:	687b      	ldr	r3, [r7, #4]
    c540:	681b      	ldr	r3, [r3, #0]
    c542:	4618      	mov	r0, r3
    c544:	4b05      	ldr	r3, [pc, #20]	; (c55c <_spi_m_sync_disable+0x4c>)
    c546:	4798      	blx	r3
    c548:	4603      	mov	r3, r0
}
    c54a:	4618      	mov	r0, r3
    c54c:	3708      	adds	r7, #8
    c54e:	46bd      	mov	sp, r7
    c550:	bd80      	pop	{r7, pc}
    c552:	bf00      	nop
    c554:	00020cc0 	.word	0x00020cc0
    c558:	00008145 	.word	0x00008145
    c55c:	0000c175 	.word	0x0000c175

0000c560 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    c560:	b580      	push	{r7, lr}
    c562:	b082      	sub	sp, #8
    c564:	af00      	add	r7, sp, #0
    c566:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    c568:	bf00      	nop
    c56a:	2103      	movs	r1, #3
    c56c:	6878      	ldr	r0, [r7, #4]
    c56e:	4b06      	ldr	r3, [pc, #24]	; (c588 <_spi_wait_bus_idle+0x28>)
    c570:	4798      	blx	r3
    c572:	4603      	mov	r3, r0
    c574:	2b00      	cmp	r3, #0
    c576:	d0f8      	beq.n	c56a <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    c578:	2103      	movs	r1, #3
    c57a:	6878      	ldr	r0, [r7, #4]
    c57c:	4b03      	ldr	r3, [pc, #12]	; (c58c <_spi_wait_bus_idle+0x2c>)
    c57e:	4798      	blx	r3
}
    c580:	bf00      	nop
    c582:	3708      	adds	r7, #8
    c584:	46bd      	mov	sp, r7
    c586:	bd80      	pop	{r7, pc}
    c588:	0000aea9 	.word	0x0000aea9
    c58c:	0000aeeb 	.word	0x0000aeeb

0000c590 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    c590:	b580      	push	{r7, lr}
    c592:	b086      	sub	sp, #24
    c594:	af00      	add	r7, sp, #0
    c596:	60f8      	str	r0, [r7, #12]
    c598:	60b9      	str	r1, [r7, #8]
    c59a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    c59c:	68bb      	ldr	r3, [r7, #8]
    c59e:	f003 0304 	and.w	r3, r3, #4
    c5a2:	2b00      	cmp	r3, #0
    c5a4:	d101      	bne.n	c5aa <_spi_rx_check_and_receive+0x1a>
		return false;
    c5a6:	2300      	movs	r3, #0
    c5a8:	e022      	b.n	c5f0 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    c5aa:	68f8      	ldr	r0, [r7, #12]
    c5ac:	4b12      	ldr	r3, [pc, #72]	; (c5f8 <_spi_rx_check_and_receive+0x68>)
    c5ae:	4798      	blx	r3
    c5b0:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    c5b2:	687b      	ldr	r3, [r7, #4]
    c5b4:	685b      	ldr	r3, [r3, #4]
    c5b6:	2b00      	cmp	r3, #0
    c5b8:	d014      	beq.n	c5e4 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    c5ba:	687b      	ldr	r3, [r7, #4]
    c5bc:	685b      	ldr	r3, [r3, #4]
    c5be:	1c59      	adds	r1, r3, #1
    c5c0:	687a      	ldr	r2, [r7, #4]
    c5c2:	6051      	str	r1, [r2, #4]
    c5c4:	697a      	ldr	r2, [r7, #20]
    c5c6:	b2d2      	uxtb	r2, r2
    c5c8:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    c5ca:	687b      	ldr	r3, [r7, #4]
    c5cc:	7c1b      	ldrb	r3, [r3, #16]
    c5ce:	2b01      	cmp	r3, #1
    c5d0:	d908      	bls.n	c5e4 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    c5d2:	687b      	ldr	r3, [r7, #4]
    c5d4:	685b      	ldr	r3, [r3, #4]
    c5d6:	1c59      	adds	r1, r3, #1
    c5d8:	687a      	ldr	r2, [r7, #4]
    c5da:	6051      	str	r1, [r2, #4]
    c5dc:	697a      	ldr	r2, [r7, #20]
    c5de:	0a12      	lsrs	r2, r2, #8
    c5e0:	b2d2      	uxtb	r2, r2
    c5e2:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    c5e4:	687b      	ldr	r3, [r7, #4]
    c5e6:	68db      	ldr	r3, [r3, #12]
    c5e8:	1c5a      	adds	r2, r3, #1
    c5ea:	687b      	ldr	r3, [r7, #4]
    c5ec:	60da      	str	r2, [r3, #12]

	return true;
    c5ee:	2301      	movs	r3, #1
}
    c5f0:	4618      	mov	r0, r3
    c5f2:	3718      	adds	r7, #24
    c5f4:	46bd      	mov	sp, r7
    c5f6:	bd80      	pop	{r7, pc}
    c5f8:	0000b3a5 	.word	0x0000b3a5

0000c5fc <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    c5fc:	b580      	push	{r7, lr}
    c5fe:	b086      	sub	sp, #24
    c600:	af00      	add	r7, sp, #0
    c602:	60f8      	str	r0, [r7, #12]
    c604:	60b9      	str	r1, [r7, #8]
    c606:	607a      	str	r2, [r7, #4]
    c608:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    c60a:	68bb      	ldr	r3, [r7, #8]
    c60c:	f003 0301 	and.w	r3, r3, #1
    c610:	2b00      	cmp	r3, #0
    c612:	d028      	beq.n	c666 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    c614:	687b      	ldr	r3, [r7, #4]
    c616:	681b      	ldr	r3, [r3, #0]
    c618:	2b00      	cmp	r3, #0
    c61a:	d018      	beq.n	c64e <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    c61c:	687b      	ldr	r3, [r7, #4]
    c61e:	681b      	ldr	r3, [r3, #0]
    c620:	1c59      	adds	r1, r3, #1
    c622:	687a      	ldr	r2, [r7, #4]
    c624:	6011      	str	r1, [r2, #0]
    c626:	781b      	ldrb	r3, [r3, #0]
    c628:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    c62a:	687b      	ldr	r3, [r7, #4]
    c62c:	7c1b      	ldrb	r3, [r3, #16]
    c62e:	2b01      	cmp	r3, #1
    c630:	d90f      	bls.n	c652 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    c632:	687b      	ldr	r3, [r7, #4]
    c634:	681b      	ldr	r3, [r3, #0]
    c636:	781b      	ldrb	r3, [r3, #0]
    c638:	021b      	lsls	r3, r3, #8
    c63a:	461a      	mov	r2, r3
    c63c:	697b      	ldr	r3, [r7, #20]
    c63e:	4313      	orrs	r3, r2
    c640:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    c642:	687b      	ldr	r3, [r7, #4]
    c644:	681b      	ldr	r3, [r3, #0]
    c646:	1c5a      	adds	r2, r3, #1
    c648:	687b      	ldr	r3, [r7, #4]
    c64a:	601a      	str	r2, [r3, #0]
    c64c:	e001      	b.n	c652 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    c64e:	887b      	ldrh	r3, [r7, #2]
    c650:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    c652:	687b      	ldr	r3, [r7, #4]
    c654:	689b      	ldr	r3, [r3, #8]
    c656:	1c5a      	adds	r2, r3, #1
    c658:	687b      	ldr	r3, [r7, #4]
    c65a:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    c65c:	6979      	ldr	r1, [r7, #20]
    c65e:	68f8      	ldr	r0, [r7, #12]
    c660:	4b03      	ldr	r3, [pc, #12]	; (c670 <_spi_tx_check_and_send+0x74>)
    c662:	4798      	blx	r3
    c664:	e000      	b.n	c668 <_spi_tx_check_and_send+0x6c>
		return;
    c666:	bf00      	nop
}
    c668:	3718      	adds	r7, #24
    c66a:	46bd      	mov	sp, r7
    c66c:	bd80      	pop	{r7, pc}
    c66e:	bf00      	nop
    c670:	0000b389 	.word	0x0000b389

0000c674 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    c674:	b580      	push	{r7, lr}
    c676:	b082      	sub	sp, #8
    c678:	af00      	add	r7, sp, #0
    c67a:	6078      	str	r0, [r7, #4]
    c67c:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    c67e:	687b      	ldr	r3, [r7, #4]
    c680:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c684:	2b00      	cmp	r3, #0
    c686:	d00b      	beq.n	c6a0 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    c688:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c68c:	6838      	ldr	r0, [r7, #0]
    c68e:	4b07      	ldr	r3, [pc, #28]	; (c6ac <_spi_err_check+0x38>)
    c690:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    c692:	2180      	movs	r1, #128	; 0x80
    c694:	6838      	ldr	r0, [r7, #0]
    c696:	4b06      	ldr	r3, [pc, #24]	; (c6b0 <_spi_err_check+0x3c>)
    c698:	4798      	blx	r3
		return ERR_OVERFLOW;
    c69a:	f06f 0312 	mvn.w	r3, #18
    c69e:	e000      	b.n	c6a2 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    c6a0:	2300      	movs	r3, #0
}
    c6a2:	4618      	mov	r0, r3
    c6a4:	3708      	adds	r7, #8
    c6a6:	46bd      	mov	sp, r7
    c6a8:	bd80      	pop	{r7, pc}
    c6aa:	bf00      	nop
    c6ac:	0000b3dd 	.word	0x0000b3dd
    c6b0:	0000aeeb 	.word	0x0000aeeb

0000c6b4 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    c6b4:	b590      	push	{r4, r7, lr}
    c6b6:	b08b      	sub	sp, #44	; 0x2c
    c6b8:	af00      	add	r7, sp, #0
    c6ba:	6078      	str	r0, [r7, #4]
    c6bc:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    c6be:	687b      	ldr	r3, [r7, #4]
    c6c0:	681b      	ldr	r3, [r3, #0]
    c6c2:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    c6c4:	2300      	movs	r3, #0
    c6c6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    c6c8:	683b      	ldr	r3, [r7, #0]
    c6ca:	681b      	ldr	r3, [r3, #0]
    c6cc:	60bb      	str	r3, [r7, #8]
    c6ce:	683b      	ldr	r3, [r7, #0]
    c6d0:	685b      	ldr	r3, [r3, #4]
    c6d2:	60fb      	str	r3, [r7, #12]
    c6d4:	2300      	movs	r3, #0
    c6d6:	613b      	str	r3, [r7, #16]
    c6d8:	2300      	movs	r3, #0
    c6da:	617b      	str	r3, [r7, #20]
    c6dc:	687b      	ldr	r3, [r7, #4]
    c6de:	791b      	ldrb	r3, [r3, #4]
    c6e0:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    c6e2:	687b      	ldr	r3, [r7, #4]
    c6e4:	2b00      	cmp	r3, #0
    c6e6:	d004      	beq.n	c6f2 <_spi_m_sync_trans+0x3e>
    c6e8:	6a3b      	ldr	r3, [r7, #32]
    c6ea:	2b00      	cmp	r3, #0
    c6ec:	d001      	beq.n	c6f2 <_spi_m_sync_trans+0x3e>
    c6ee:	2301      	movs	r3, #1
    c6f0:	e000      	b.n	c6f4 <_spi_m_sync_trans+0x40>
    c6f2:	2300      	movs	r3, #0
    c6f4:	f003 0301 	and.w	r3, r3, #1
    c6f8:	b2db      	uxtb	r3, r3
    c6fa:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
    c6fe:	492b      	ldr	r1, [pc, #172]	; (c7ac <_spi_m_sync_trans+0xf8>)
    c700:	4618      	mov	r0, r3
    c702:	4b2b      	ldr	r3, [pc, #172]	; (c7b0 <_spi_m_sync_trans+0xfc>)
    c704:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    c706:	2107      	movs	r1, #7
    c708:	6a38      	ldr	r0, [r7, #32]
    c70a:	4b2a      	ldr	r3, [pc, #168]	; (c7b4 <_spi_m_sync_trans+0x100>)
    c70c:	4798      	blx	r3
    c70e:	4603      	mov	r3, r0
    c710:	2b00      	cmp	r3, #0
    c712:	d002      	beq.n	c71a <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    c714:	f06f 0303 	mvn.w	r3, #3
    c718:	e043      	b.n	c7a2 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    c71a:	6a38      	ldr	r0, [r7, #32]
    c71c:	4b26      	ldr	r3, [pc, #152]	; (c7b8 <_spi_m_sync_trans+0x104>)
    c71e:	4798      	blx	r3
    c720:	4603      	mov	r3, r0
    c722:	f083 0301 	eor.w	r3, r3, #1
    c726:	b2db      	uxtb	r3, r3
    c728:	2b00      	cmp	r3, #0
    c72a:	d002      	beq.n	c732 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    c72c:	f06f 0313 	mvn.w	r3, #19
    c730:	e037      	b.n	c7a2 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    c732:	6a38      	ldr	r0, [r7, #32]
    c734:	4b21      	ldr	r3, [pc, #132]	; (c7bc <_spi_m_sync_trans+0x108>)
    c736:	4798      	blx	r3
    c738:	4603      	mov	r3, r0
    c73a:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    c73c:	f107 0308 	add.w	r3, r7, #8
    c740:	461a      	mov	r2, r3
    c742:	69f9      	ldr	r1, [r7, #28]
    c744:	6a38      	ldr	r0, [r7, #32]
    c746:	4b1e      	ldr	r3, [pc, #120]	; (c7c0 <_spi_m_sync_trans+0x10c>)
    c748:	4798      	blx	r3
    c74a:	4603      	mov	r3, r0
    c74c:	f083 0301 	eor.w	r3, r3, #1
    c750:	b2db      	uxtb	r3, r3
    c752:	2b00      	cmp	r3, #0
    c754:	d00b      	beq.n	c76e <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    c756:	697a      	ldr	r2, [r7, #20]
    c758:	693b      	ldr	r3, [r7, #16]
    c75a:	429a      	cmp	r2, r3
    c75c:	d307      	bcc.n	c76e <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    c75e:	687b      	ldr	r3, [r7, #4]
    c760:	88db      	ldrh	r3, [r3, #6]
    c762:	f107 0208 	add.w	r2, r7, #8
    c766:	69f9      	ldr	r1, [r7, #28]
    c768:	6a38      	ldr	r0, [r7, #32]
    c76a:	4c16      	ldr	r4, [pc, #88]	; (c7c4 <_spi_m_sync_trans+0x110>)
    c76c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    c76e:	6a39      	ldr	r1, [r7, #32]
    c770:	69f8      	ldr	r0, [r7, #28]
    c772:	4b15      	ldr	r3, [pc, #84]	; (c7c8 <_spi_m_sync_trans+0x114>)
    c774:	4798      	blx	r3
    c776:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    c778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c77a:	2b00      	cmp	r3, #0
    c77c:	db0c      	blt.n	c798 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    c77e:	693a      	ldr	r2, [r7, #16]
    c780:	683b      	ldr	r3, [r7, #0]
    c782:	689b      	ldr	r3, [r3, #8]
    c784:	429a      	cmp	r2, r3
    c786:	d3d4      	bcc.n	c732 <_spi_m_sync_trans+0x7e>
    c788:	697a      	ldr	r2, [r7, #20]
    c78a:	683b      	ldr	r3, [r7, #0]
    c78c:	689b      	ldr	r3, [r3, #8]
    c78e:	429a      	cmp	r2, r3
    c790:	d3cf      	bcc.n	c732 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    c792:	693b      	ldr	r3, [r7, #16]
    c794:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    c796:	e000      	b.n	c79a <_spi_m_sync_trans+0xe6>
			break;
    c798:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    c79a:	6a38      	ldr	r0, [r7, #32]
    c79c:	4b0b      	ldr	r3, [pc, #44]	; (c7cc <_spi_m_sync_trans+0x118>)
    c79e:	4798      	blx	r3

	return rc;
    c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c7a2:	4618      	mov	r0, r3
    c7a4:	372c      	adds	r7, #44	; 0x2c
    c7a6:	46bd      	mov	sp, r7
    c7a8:	bd90      	pop	{r4, r7, pc}
    c7aa:	bf00      	nop
    c7ac:	00020cc0 	.word	0x00020cc0
    c7b0:	00008145 	.word	0x00008145
    c7b4:	0000ae15 	.word	0x0000ae15
    c7b8:	0000b09d 	.word	0x0000b09d
    c7bc:	0000aed1 	.word	0x0000aed1
    c7c0:	0000c591 	.word	0x0000c591
    c7c4:	0000c5fd 	.word	0x0000c5fd
    c7c8:	0000c675 	.word	0x0000c675
    c7cc:	0000c561 	.word	0x0000c561

0000c7d0 <__NVIC_EnableIRQ>:
{
    c7d0:	b480      	push	{r7}
    c7d2:	b083      	sub	sp, #12
    c7d4:	af00      	add	r7, sp, #0
    c7d6:	4603      	mov	r3, r0
    c7d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c7da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c7de:	2b00      	cmp	r3, #0
    c7e0:	db0b      	blt.n	c7fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c7e2:	4909      	ldr	r1, [pc, #36]	; (c808 <__NVIC_EnableIRQ+0x38>)
    c7e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c7e8:	095b      	lsrs	r3, r3, #5
    c7ea:	88fa      	ldrh	r2, [r7, #6]
    c7ec:	f002 021f 	and.w	r2, r2, #31
    c7f0:	2001      	movs	r0, #1
    c7f2:	fa00 f202 	lsl.w	r2, r0, r2
    c7f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c7fa:	bf00      	nop
    c7fc:	370c      	adds	r7, #12
    c7fe:	46bd      	mov	sp, r7
    c800:	f85d 7b04 	ldr.w	r7, [sp], #4
    c804:	4770      	bx	lr
    c806:	bf00      	nop
    c808:	e000e100 	.word	0xe000e100

0000c80c <__NVIC_DisableIRQ>:
{
    c80c:	b480      	push	{r7}
    c80e:	b083      	sub	sp, #12
    c810:	af00      	add	r7, sp, #0
    c812:	4603      	mov	r3, r0
    c814:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c81a:	2b00      	cmp	r3, #0
    c81c:	db10      	blt.n	c840 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c81e:	490b      	ldr	r1, [pc, #44]	; (c84c <__NVIC_DisableIRQ+0x40>)
    c820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c824:	095b      	lsrs	r3, r3, #5
    c826:	88fa      	ldrh	r2, [r7, #6]
    c828:	f002 021f 	and.w	r2, r2, #31
    c82c:	2001      	movs	r0, #1
    c82e:	fa00 f202 	lsl.w	r2, r0, r2
    c832:	3320      	adds	r3, #32
    c834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    c838:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c83c:	f3bf 8f6f 	isb	sy
}
    c840:	bf00      	nop
    c842:	370c      	adds	r7, #12
    c844:	46bd      	mov	sp, r7
    c846:	f85d 7b04 	ldr.w	r7, [sp], #4
    c84a:	4770      	bx	lr
    c84c:	e000e100 	.word	0xe000e100

0000c850 <__NVIC_ClearPendingIRQ>:
{
    c850:	b480      	push	{r7}
    c852:	b083      	sub	sp, #12
    c854:	af00      	add	r7, sp, #0
    c856:	4603      	mov	r3, r0
    c858:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c85a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c85e:	2b00      	cmp	r3, #0
    c860:	db0c      	blt.n	c87c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c862:	4909      	ldr	r1, [pc, #36]	; (c888 <__NVIC_ClearPendingIRQ+0x38>)
    c864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c868:	095b      	lsrs	r3, r3, #5
    c86a:	88fa      	ldrh	r2, [r7, #6]
    c86c:	f002 021f 	and.w	r2, r2, #31
    c870:	2001      	movs	r0, #1
    c872:	fa00 f202 	lsl.w	r2, r0, r2
    c876:	3360      	adds	r3, #96	; 0x60
    c878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c87c:	bf00      	nop
    c87e:	370c      	adds	r7, #12
    c880:	46bd      	mov	sp, r7
    c882:	f85d 7b04 	ldr.w	r7, [sp], #4
    c886:	4770      	bx	lr
    c888:	e000e100 	.word	0xe000e100

0000c88c <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    c88c:	b480      	push	{r7}
    c88e:	b083      	sub	sp, #12
    c890:	af00      	add	r7, sp, #0
    c892:	6078      	str	r0, [r7, #4]
    c894:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    c896:	bf00      	nop
    c898:	687b      	ldr	r3, [r7, #4]
    c89a:	689a      	ldr	r2, [r3, #8]
    c89c:	683b      	ldr	r3, [r7, #0]
    c89e:	4013      	ands	r3, r2
    c8a0:	2b00      	cmp	r3, #0
    c8a2:	d1f9      	bne.n	c898 <hri_tcc_wait_for_sync+0xc>
	};
}
    c8a4:	bf00      	nop
    c8a6:	370c      	adds	r7, #12
    c8a8:	46bd      	mov	sp, r7
    c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8ae:	4770      	bx	lr

0000c8b0 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    c8b0:	b480      	push	{r7}
    c8b2:	b083      	sub	sp, #12
    c8b4:	af00      	add	r7, sp, #0
    c8b6:	6078      	str	r0, [r7, #4]
    c8b8:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    c8ba:	687b      	ldr	r3, [r7, #4]
    c8bc:	689a      	ldr	r2, [r3, #8]
    c8be:	683b      	ldr	r3, [r7, #0]
    c8c0:	4013      	ands	r3, r2
    c8c2:	2b00      	cmp	r3, #0
    c8c4:	bf14      	ite	ne
    c8c6:	2301      	movne	r3, #1
    c8c8:	2300      	moveq	r3, #0
    c8ca:	b2db      	uxtb	r3, r3
}
    c8cc:	4618      	mov	r0, r3
    c8ce:	370c      	adds	r7, #12
    c8d0:	46bd      	mov	sp, r7
    c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8d6:	4770      	bx	lr

0000c8d8 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    c8d8:	b480      	push	{r7}
    c8da:	b083      	sub	sp, #12
    c8dc:	af00      	add	r7, sp, #0
    c8de:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    c8e0:	687b      	ldr	r3, [r7, #4]
    c8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c8e4:	f003 0301 	and.w	r3, r3, #1
    c8e8:	2b00      	cmp	r3, #0
    c8ea:	bf14      	ite	ne
    c8ec:	2301      	movne	r3, #1
    c8ee:	2300      	moveq	r3, #0
    c8f0:	b2db      	uxtb	r3, r3
}
    c8f2:	4618      	mov	r0, r3
    c8f4:	370c      	adds	r7, #12
    c8f6:	46bd      	mov	sp, r7
    c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8fc:	4770      	bx	lr

0000c8fe <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    c8fe:	b480      	push	{r7}
    c900:	b083      	sub	sp, #12
    c902:	af00      	add	r7, sp, #0
    c904:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    c906:	687b      	ldr	r3, [r7, #4]
    c908:	2201      	movs	r2, #1
    c90a:	62da      	str	r2, [r3, #44]	; 0x2c
}
    c90c:	bf00      	nop
    c90e:	370c      	adds	r7, #12
    c910:	46bd      	mov	sp, r7
    c912:	f85d 7b04 	ldr.w	r7, [sp], #4
    c916:	4770      	bx	lr

0000c918 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    c918:	b480      	push	{r7}
    c91a:	b083      	sub	sp, #12
    c91c:	af00      	add	r7, sp, #0
    c91e:	6078      	str	r0, [r7, #4]
    c920:	460b      	mov	r3, r1
    c922:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    c924:	687b      	ldr	r3, [r7, #4]
    c926:	78fa      	ldrb	r2, [r7, #3]
    c928:	715a      	strb	r2, [r3, #5]
}
    c92a:	bf00      	nop
    c92c:	370c      	adds	r7, #12
    c92e:	46bd      	mov	sp, r7
    c930:	f85d 7b04 	ldr.w	r7, [sp], #4
    c934:	4770      	bx	lr

0000c936 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    c936:	b480      	push	{r7}
    c938:	b083      	sub	sp, #12
    c93a:	af00      	add	r7, sp, #0
    c93c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    c93e:	687b      	ldr	r3, [r7, #4]
    c940:	2201      	movs	r2, #1
    c942:	629a      	str	r2, [r3, #40]	; 0x28
}
    c944:	bf00      	nop
    c946:	370c      	adds	r7, #12
    c948:	46bd      	mov	sp, r7
    c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c94e:	4770      	bx	lr

0000c950 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    c950:	b580      	push	{r7, lr}
    c952:	b082      	sub	sp, #8
    c954:	af00      	add	r7, sp, #0
    c956:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    c958:	687b      	ldr	r3, [r7, #4]
    c95a:	681b      	ldr	r3, [r3, #0]
    c95c:	f043 0201 	orr.w	r2, r3, #1
    c960:	687b      	ldr	r3, [r7, #4]
    c962:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    c964:	2101      	movs	r1, #1
    c966:	6878      	ldr	r0, [r7, #4]
    c968:	4b02      	ldr	r3, [pc, #8]	; (c974 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    c96a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c96c:	bf00      	nop
    c96e:	3708      	adds	r7, #8
    c970:	46bd      	mov	sp, r7
    c972:	bd80      	pop	{r7, pc}
    c974:	0000c88d 	.word	0x0000c88d

0000c978 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    c978:	b580      	push	{r7, lr}
    c97a:	b082      	sub	sp, #8
    c97c:	af00      	add	r7, sp, #0
    c97e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    c980:	687b      	ldr	r3, [r7, #4]
    c982:	681b      	ldr	r3, [r3, #0]
    c984:	f043 0202 	orr.w	r2, r3, #2
    c988:	687b      	ldr	r3, [r7, #4]
    c98a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c98c:	2103      	movs	r1, #3
    c98e:	6878      	ldr	r0, [r7, #4]
    c990:	4b02      	ldr	r3, [pc, #8]	; (c99c <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    c992:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c994:	bf00      	nop
    c996:	3708      	adds	r7, #8
    c998:	46bd      	mov	sp, r7
    c99a:	bd80      	pop	{r7, pc}
    c99c:	0000c88d 	.word	0x0000c88d

0000c9a0 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c9a0:	b580      	push	{r7, lr}
    c9a2:	b084      	sub	sp, #16
    c9a4:	af00      	add	r7, sp, #0
    c9a6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c9a8:	2103      	movs	r1, #3
    c9aa:	6878      	ldr	r0, [r7, #4]
    c9ac:	4b09      	ldr	r3, [pc, #36]	; (c9d4 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    c9ae:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    c9b0:	687b      	ldr	r3, [r7, #4]
    c9b2:	681b      	ldr	r3, [r3, #0]
    c9b4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    c9b6:	68fb      	ldr	r3, [r7, #12]
    c9b8:	085b      	lsrs	r3, r3, #1
    c9ba:	f003 0301 	and.w	r3, r3, #1
    c9be:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    c9c0:	68fb      	ldr	r3, [r7, #12]
    c9c2:	2b00      	cmp	r3, #0
    c9c4:	bf14      	ite	ne
    c9c6:	2301      	movne	r3, #1
    c9c8:	2300      	moveq	r3, #0
    c9ca:	b2db      	uxtb	r3, r3
}
    c9cc:	4618      	mov	r0, r3
    c9ce:	3710      	adds	r7, #16
    c9d0:	46bd      	mov	sp, r7
    c9d2:	bd80      	pop	{r7, pc}
    c9d4:	0000c88d 	.word	0x0000c88d

0000c9d8 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c9d8:	b580      	push	{r7, lr}
    c9da:	b082      	sub	sp, #8
    c9dc:	af00      	add	r7, sp, #0
    c9de:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    c9e0:	687b      	ldr	r3, [r7, #4]
    c9e2:	681b      	ldr	r3, [r3, #0]
    c9e4:	f023 0202 	bic.w	r2, r3, #2
    c9e8:	687b      	ldr	r3, [r7, #4]
    c9ea:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c9ec:	2103      	movs	r1, #3
    c9ee:	6878      	ldr	r0, [r7, #4]
    c9f0:	4b02      	ldr	r3, [pc, #8]	; (c9fc <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    c9f2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c9f4:	bf00      	nop
    c9f6:	3708      	adds	r7, #8
    c9f8:	46bd      	mov	sp, r7
    c9fa:	bd80      	pop	{r7, pc}
    c9fc:	0000c88d 	.word	0x0000c88d

0000ca00 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    ca00:	b580      	push	{r7, lr}
    ca02:	b084      	sub	sp, #16
    ca04:	af00      	add	r7, sp, #0
    ca06:	6078      	str	r0, [r7, #4]
    ca08:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    ca0a:	2103      	movs	r1, #3
    ca0c:	6878      	ldr	r0, [r7, #4]
    ca0e:	4b07      	ldr	r3, [pc, #28]	; (ca2c <hri_tcc_get_CTRLA_reg+0x2c>)
    ca10:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    ca12:	687b      	ldr	r3, [r7, #4]
    ca14:	681b      	ldr	r3, [r3, #0]
    ca16:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    ca18:	68fa      	ldr	r2, [r7, #12]
    ca1a:	683b      	ldr	r3, [r7, #0]
    ca1c:	4013      	ands	r3, r2
    ca1e:	60fb      	str	r3, [r7, #12]
	return tmp;
    ca20:	68fb      	ldr	r3, [r7, #12]
}
    ca22:	4618      	mov	r0, r3
    ca24:	3710      	adds	r7, #16
    ca26:	46bd      	mov	sp, r7
    ca28:	bd80      	pop	{r7, pc}
    ca2a:	bf00      	nop
    ca2c:	0000c88d 	.word	0x0000c88d

0000ca30 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    ca30:	b580      	push	{r7, lr}
    ca32:	b082      	sub	sp, #8
    ca34:	af00      	add	r7, sp, #0
    ca36:	6078      	str	r0, [r7, #4]
    ca38:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    ca3a:	687b      	ldr	r3, [r7, #4]
    ca3c:	683a      	ldr	r2, [r7, #0]
    ca3e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    ca40:	2103      	movs	r1, #3
    ca42:	6878      	ldr	r0, [r7, #4]
    ca44:	4b02      	ldr	r3, [pc, #8]	; (ca50 <hri_tcc_write_CTRLA_reg+0x20>)
    ca46:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    ca48:	bf00      	nop
    ca4a:	3708      	adds	r7, #8
    ca4c:	46bd      	mov	sp, r7
    ca4e:	bd80      	pop	{r7, pc}
    ca50:	0000c88d 	.word	0x0000c88d

0000ca54 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    ca54:	b480      	push	{r7}
    ca56:	b083      	sub	sp, #12
    ca58:	af00      	add	r7, sp, #0
    ca5a:	6078      	str	r0, [r7, #4]
    ca5c:	460b      	mov	r3, r1
    ca5e:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    ca60:	687b      	ldr	r3, [r7, #4]
    ca62:	78fa      	ldrb	r2, [r7, #3]
    ca64:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    ca66:	bf00      	nop
    ca68:	370c      	adds	r7, #12
    ca6a:	46bd      	mov	sp, r7
    ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca70:	4770      	bx	lr

0000ca72 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    ca72:	b480      	push	{r7}
    ca74:	b083      	sub	sp, #12
    ca76:	af00      	add	r7, sp, #0
    ca78:	6078      	str	r0, [r7, #4]
    ca7a:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    ca7c:	687b      	ldr	r3, [r7, #4]
    ca7e:	683a      	ldr	r2, [r7, #0]
    ca80:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    ca82:	bf00      	nop
    ca84:	370c      	adds	r7, #12
    ca86:	46bd      	mov	sp, r7
    ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca8c:	4770      	bx	lr
	...

0000ca90 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    ca90:	b580      	push	{r7, lr}
    ca92:	b082      	sub	sp, #8
    ca94:	af00      	add	r7, sp, #0
    ca96:	6078      	str	r0, [r7, #4]
    ca98:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    ca9a:	687b      	ldr	r3, [r7, #4]
    ca9c:	683a      	ldr	r2, [r7, #0]
    ca9e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    caa0:	2180      	movs	r1, #128	; 0x80
    caa2:	6878      	ldr	r0, [r7, #4]
    caa4:	4b02      	ldr	r3, [pc, #8]	; (cab0 <hri_tcc_write_PER_reg+0x20>)
    caa6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    caa8:	bf00      	nop
    caaa:	3708      	adds	r7, #8
    caac:	46bd      	mov	sp, r7
    caae:	bd80      	pop	{r7, pc}
    cab0:	0000c88d 	.word	0x0000c88d

0000cab4 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    cab4:	b580      	push	{r7, lr}
    cab6:	b082      	sub	sp, #8
    cab8:	af00      	add	r7, sp, #0
    caba:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    cabc:	2180      	movs	r1, #128	; 0x80
    cabe:	6878      	ldr	r0, [r7, #4]
    cac0:	4b03      	ldr	r3, [pc, #12]	; (cad0 <hri_tcc_read_PER_reg+0x1c>)
    cac2:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    cac4:	687b      	ldr	r3, [r7, #4]
    cac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    cac8:	4618      	mov	r0, r3
    caca:	3708      	adds	r7, #8
    cacc:	46bd      	mov	sp, r7
    cace:	bd80      	pop	{r7, pc}
    cad0:	0000c88d 	.word	0x0000c88d

0000cad4 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    cad4:	b480      	push	{r7}
    cad6:	b083      	sub	sp, #12
    cad8:	af00      	add	r7, sp, #0
    cada:	6078      	str	r0, [r7, #4]
    cadc:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    cade:	687b      	ldr	r3, [r7, #4]
    cae0:	4a09      	ldr	r2, [pc, #36]	; (cb08 <_tcc_init_irq_param+0x34>)
    cae2:	4293      	cmp	r3, r2
    cae4:	d102      	bne.n	caec <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    cae6:	4a09      	ldr	r2, [pc, #36]	; (cb0c <_tcc_init_irq_param+0x38>)
    cae8:	683b      	ldr	r3, [r7, #0]
    caea:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    caec:	687b      	ldr	r3, [r7, #4]
    caee:	4a08      	ldr	r2, [pc, #32]	; (cb10 <_tcc_init_irq_param+0x3c>)
    caf0:	4293      	cmp	r3, r2
    caf2:	d102      	bne.n	cafa <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    caf4:	4a07      	ldr	r2, [pc, #28]	; (cb14 <_tcc_init_irq_param+0x40>)
    caf6:	683b      	ldr	r3, [r7, #0]
    caf8:	6013      	str	r3, [r2, #0]
	}
}
    cafa:	bf00      	nop
    cafc:	370c      	adds	r7, #12
    cafe:	46bd      	mov	sp, r7
    cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb04:	4770      	bx	lr
    cb06:	bf00      	nop
    cb08:	41016000 	.word	0x41016000
    cb0c:	200089f0 	.word	0x200089f0
    cb10:	41018000 	.word	0x41018000
    cb14:	200089f4 	.word	0x200089f4

0000cb18 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    cb18:	b580      	push	{r7, lr}
    cb1a:	b084      	sub	sp, #16
    cb1c:	af00      	add	r7, sp, #0
    cb1e:	6078      	str	r0, [r7, #4]
    cb20:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    cb22:	6838      	ldr	r0, [r7, #0]
    cb24:	4b33      	ldr	r3, [pc, #204]	; (cbf4 <_tcc_timer_init+0xdc>)
    cb26:	4798      	blx	r3
    cb28:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    cb2a:	68fb      	ldr	r3, [r7, #12]
    cb2c:	2b00      	cmp	r3, #0
    cb2e:	d102      	bne.n	cb36 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    cb30:	f06f 0309 	mvn.w	r3, #9
    cb34:	e05a      	b.n	cbec <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    cb36:	687b      	ldr	r3, [r7, #4]
    cb38:	683a      	ldr	r2, [r7, #0]
    cb3a:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    cb3c:	2101      	movs	r1, #1
    cb3e:	6838      	ldr	r0, [r7, #0]
    cb40:	4b2d      	ldr	r3, [pc, #180]	; (cbf8 <_tcc_timer_init+0xe0>)
    cb42:	4798      	blx	r3
    cb44:	4603      	mov	r3, r0
    cb46:	f083 0301 	eor.w	r3, r3, #1
    cb4a:	b2db      	uxtb	r3, r3
    cb4c:	2b00      	cmp	r3, #0
    cb4e:	d011      	beq.n	cb74 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    cb50:	2102      	movs	r1, #2
    cb52:	6838      	ldr	r0, [r7, #0]
    cb54:	4b29      	ldr	r3, [pc, #164]	; (cbfc <_tcc_timer_init+0xe4>)
    cb56:	4798      	blx	r3
    cb58:	4603      	mov	r3, r0
    cb5a:	2b00      	cmp	r3, #0
    cb5c:	d006      	beq.n	cb6c <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    cb5e:	6838      	ldr	r0, [r7, #0]
    cb60:	4b27      	ldr	r3, [pc, #156]	; (cc00 <_tcc_timer_init+0xe8>)
    cb62:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    cb64:	2102      	movs	r1, #2
    cb66:	6838      	ldr	r0, [r7, #0]
    cb68:	4b26      	ldr	r3, [pc, #152]	; (cc04 <_tcc_timer_init+0xec>)
    cb6a:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    cb6c:	2101      	movs	r1, #1
    cb6e:	6838      	ldr	r0, [r7, #0]
    cb70:	4b25      	ldr	r3, [pc, #148]	; (cc08 <_tcc_timer_init+0xf0>)
    cb72:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    cb74:	2101      	movs	r1, #1
    cb76:	6838      	ldr	r0, [r7, #0]
    cb78:	4b22      	ldr	r3, [pc, #136]	; (cc04 <_tcc_timer_init+0xec>)
    cb7a:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    cb7c:	68fb      	ldr	r3, [r7, #12]
    cb7e:	689b      	ldr	r3, [r3, #8]
    cb80:	4619      	mov	r1, r3
    cb82:	6838      	ldr	r0, [r7, #0]
    cb84:	4b20      	ldr	r3, [pc, #128]	; (cc08 <_tcc_timer_init+0xf0>)
    cb86:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    cb88:	68fb      	ldr	r3, [r7, #12]
    cb8a:	7b1b      	ldrb	r3, [r3, #12]
    cb8c:	4619      	mov	r1, r3
    cb8e:	6838      	ldr	r0, [r7, #0]
    cb90:	4b1e      	ldr	r3, [pc, #120]	; (cc0c <_tcc_timer_init+0xf4>)
    cb92:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    cb94:	68fb      	ldr	r3, [r7, #12]
    cb96:	7b5b      	ldrb	r3, [r3, #13]
    cb98:	4619      	mov	r1, r3
    cb9a:	6838      	ldr	r0, [r7, #0]
    cb9c:	4b1c      	ldr	r3, [pc, #112]	; (cc10 <_tcc_timer_init+0xf8>)
    cb9e:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    cba0:	68fb      	ldr	r3, [r7, #12]
    cba2:	691b      	ldr	r3, [r3, #16]
    cba4:	4619      	mov	r1, r3
    cba6:	6838      	ldr	r0, [r7, #0]
    cba8:	4b1a      	ldr	r3, [pc, #104]	; (cc14 <_tcc_timer_init+0xfc>)
    cbaa:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    cbac:	68fb      	ldr	r3, [r7, #12]
    cbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    cbb0:	4619      	mov	r1, r3
    cbb2:	6838      	ldr	r0, [r7, #0]
    cbb4:	4b18      	ldr	r3, [pc, #96]	; (cc18 <_tcc_timer_init+0x100>)
    cbb6:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    cbb8:	6838      	ldr	r0, [r7, #0]
    cbba:	4b18      	ldr	r3, [pc, #96]	; (cc1c <_tcc_timer_init+0x104>)
    cbbc:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    cbbe:	6879      	ldr	r1, [r7, #4]
    cbc0:	6838      	ldr	r0, [r7, #0]
    cbc2:	4b17      	ldr	r3, [pc, #92]	; (cc20 <_tcc_timer_init+0x108>)
    cbc4:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    cbc6:	68fb      	ldr	r3, [r7, #12]
    cbc8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cbcc:	4618      	mov	r0, r3
    cbce:	4b15      	ldr	r3, [pc, #84]	; (cc24 <_tcc_timer_init+0x10c>)
    cbd0:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    cbd2:	68fb      	ldr	r3, [r7, #12]
    cbd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cbd8:	4618      	mov	r0, r3
    cbda:	4b13      	ldr	r3, [pc, #76]	; (cc28 <_tcc_timer_init+0x110>)
    cbdc:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    cbde:	68fb      	ldr	r3, [r7, #12]
    cbe0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cbe4:	4618      	mov	r0, r3
    cbe6:	4b11      	ldr	r3, [pc, #68]	; (cc2c <_tcc_timer_init+0x114>)
    cbe8:	4798      	blx	r3

	return ERR_NONE;
    cbea:	2300      	movs	r3, #0
}
    cbec:	4618      	mov	r0, r3
    cbee:	3710      	adds	r7, #16
    cbf0:	46bd      	mov	sp, r7
    cbf2:	bd80      	pop	{r7, pc}
    cbf4:	0000cde1 	.word	0x0000cde1
    cbf8:	0000c8b1 	.word	0x0000c8b1
    cbfc:	0000ca01 	.word	0x0000ca01
    cc00:	0000c9d9 	.word	0x0000c9d9
    cc04:	0000c88d 	.word	0x0000c88d
    cc08:	0000ca31 	.word	0x0000ca31
    cc0c:	0000c919 	.word	0x0000c919
    cc10:	0000ca55 	.word	0x0000ca55
    cc14:	0000ca73 	.word	0x0000ca73
    cc18:	0000ca91 	.word	0x0000ca91
    cc1c:	0000c937 	.word	0x0000c937
    cc20:	0000cad5 	.word	0x0000cad5
    cc24:	0000c80d 	.word	0x0000c80d
    cc28:	0000c851 	.word	0x0000c851
    cc2c:	0000c7d1 	.word	0x0000c7d1

0000cc30 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    cc30:	b580      	push	{r7, lr}
    cc32:	b084      	sub	sp, #16
    cc34:	af00      	add	r7, sp, #0
    cc36:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    cc38:	687b      	ldr	r3, [r7, #4]
    cc3a:	68db      	ldr	r3, [r3, #12]
    cc3c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    cc3e:	68f8      	ldr	r0, [r7, #12]
    cc40:	4b0a      	ldr	r3, [pc, #40]	; (cc6c <_tcc_timer_deinit+0x3c>)
    cc42:	4798      	blx	r3
    cc44:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    cc46:	68bb      	ldr	r3, [r7, #8]
    cc48:	2b00      	cmp	r3, #0
    cc4a:	d00b      	beq.n	cc64 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    cc4c:	68bb      	ldr	r3, [r7, #8]
    cc4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cc52:	4618      	mov	r0, r3
    cc54:	4b06      	ldr	r3, [pc, #24]	; (cc70 <_tcc_timer_deinit+0x40>)
    cc56:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    cc58:	68f8      	ldr	r0, [r7, #12]
    cc5a:	4b06      	ldr	r3, [pc, #24]	; (cc74 <_tcc_timer_deinit+0x44>)
    cc5c:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    cc5e:	68f8      	ldr	r0, [r7, #12]
    cc60:	4b05      	ldr	r3, [pc, #20]	; (cc78 <_tcc_timer_deinit+0x48>)
    cc62:	4798      	blx	r3
	}
}
    cc64:	bf00      	nop
    cc66:	3710      	adds	r7, #16
    cc68:	46bd      	mov	sp, r7
    cc6a:	bd80      	pop	{r7, pc}
    cc6c:	0000cde1 	.word	0x0000cde1
    cc70:	0000c80d 	.word	0x0000c80d
    cc74:	0000c9d9 	.word	0x0000c9d9
    cc78:	0000c951 	.word	0x0000c951

0000cc7c <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    cc7c:	b580      	push	{r7, lr}
    cc7e:	b082      	sub	sp, #8
    cc80:	af00      	add	r7, sp, #0
    cc82:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    cc84:	687b      	ldr	r3, [r7, #4]
    cc86:	68db      	ldr	r3, [r3, #12]
    cc88:	4618      	mov	r0, r3
    cc8a:	4b03      	ldr	r3, [pc, #12]	; (cc98 <_tcc_timer_start+0x1c>)
    cc8c:	4798      	blx	r3
}
    cc8e:	bf00      	nop
    cc90:	3708      	adds	r7, #8
    cc92:	46bd      	mov	sp, r7
    cc94:	bd80      	pop	{r7, pc}
    cc96:	bf00      	nop
    cc98:	0000c979 	.word	0x0000c979

0000cc9c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    cc9c:	b580      	push	{r7, lr}
    cc9e:	b082      	sub	sp, #8
    cca0:	af00      	add	r7, sp, #0
    cca2:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    cca4:	687b      	ldr	r3, [r7, #4]
    cca6:	68db      	ldr	r3, [r3, #12]
    cca8:	4618      	mov	r0, r3
    ccaa:	4b03      	ldr	r3, [pc, #12]	; (ccb8 <_tcc_timer_stop+0x1c>)
    ccac:	4798      	blx	r3
}
    ccae:	bf00      	nop
    ccb0:	3708      	adds	r7, #8
    ccb2:	46bd      	mov	sp, r7
    ccb4:	bd80      	pop	{r7, pc}
    ccb6:	bf00      	nop
    ccb8:	0000c9d9 	.word	0x0000c9d9

0000ccbc <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    ccbc:	b580      	push	{r7, lr}
    ccbe:	b082      	sub	sp, #8
    ccc0:	af00      	add	r7, sp, #0
    ccc2:	6078      	str	r0, [r7, #4]
    ccc4:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    ccc6:	687b      	ldr	r3, [r7, #4]
    ccc8:	68db      	ldr	r3, [r3, #12]
    ccca:	6839      	ldr	r1, [r7, #0]
    cccc:	4618      	mov	r0, r3
    ccce:	4b03      	ldr	r3, [pc, #12]	; (ccdc <_tcc_timer_set_period+0x20>)
    ccd0:	4798      	blx	r3
}
    ccd2:	bf00      	nop
    ccd4:	3708      	adds	r7, #8
    ccd6:	46bd      	mov	sp, r7
    ccd8:	bd80      	pop	{r7, pc}
    ccda:	bf00      	nop
    ccdc:	0000ca91 	.word	0x0000ca91

0000cce0 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    cce0:	b580      	push	{r7, lr}
    cce2:	b082      	sub	sp, #8
    cce4:	af00      	add	r7, sp, #0
    cce6:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    cce8:	687b      	ldr	r3, [r7, #4]
    ccea:	68db      	ldr	r3, [r3, #12]
    ccec:	4618      	mov	r0, r3
    ccee:	4b03      	ldr	r3, [pc, #12]	; (ccfc <_tcc_timer_get_period+0x1c>)
    ccf0:	4798      	blx	r3
    ccf2:	4603      	mov	r3, r0
}
    ccf4:	4618      	mov	r0, r3
    ccf6:	3708      	adds	r7, #8
    ccf8:	46bd      	mov	sp, r7
    ccfa:	bd80      	pop	{r7, pc}
    ccfc:	0000cab5 	.word	0x0000cab5

0000cd00 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    cd00:	b580      	push	{r7, lr}
    cd02:	b082      	sub	sp, #8
    cd04:	af00      	add	r7, sp, #0
    cd06:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    cd08:	687b      	ldr	r3, [r7, #4]
    cd0a:	68db      	ldr	r3, [r3, #12]
    cd0c:	4618      	mov	r0, r3
    cd0e:	4b03      	ldr	r3, [pc, #12]	; (cd1c <_tcc_timer_is_started+0x1c>)
    cd10:	4798      	blx	r3
    cd12:	4603      	mov	r3, r0
}
    cd14:	4618      	mov	r0, r3
    cd16:	3708      	adds	r7, #8
    cd18:	46bd      	mov	sp, r7
    cd1a:	bd80      	pop	{r7, pc}
    cd1c:	0000c9a1 	.word	0x0000c9a1

0000cd20 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    cd20:	b480      	push	{r7}
    cd22:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    cd24:	4b02      	ldr	r3, [pc, #8]	; (cd30 <_tcc_get_timer+0x10>)
}
    cd26:	4618      	mov	r0, r3
    cd28:	46bd      	mov	sp, r7
    cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd2e:	4770      	bx	lr
    cd30:	20000124 	.word	0x20000124

0000cd34 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    cd34:	b580      	push	{r7, lr}
    cd36:	b084      	sub	sp, #16
    cd38:	af00      	add	r7, sp, #0
    cd3a:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    cd3c:	687b      	ldr	r3, [r7, #4]
    cd3e:	68db      	ldr	r3, [r3, #12]
    cd40:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    cd42:	68f8      	ldr	r0, [r7, #12]
    cd44:	4b08      	ldr	r3, [pc, #32]	; (cd68 <_tcc_timer_set_irq+0x34>)
    cd46:	4798      	blx	r3
    cd48:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    cd4a:	68bb      	ldr	r3, [r7, #8]
    cd4c:	2b00      	cmp	r3, #0
    cd4e:	d006      	beq.n	cd5e <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    cd50:	68bb      	ldr	r3, [r7, #8]
    cd52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cd56:	b2db      	uxtb	r3, r3
    cd58:	4618      	mov	r0, r3
    cd5a:	4b04      	ldr	r3, [pc, #16]	; (cd6c <_tcc_timer_set_irq+0x38>)
    cd5c:	4798      	blx	r3
	}
}
    cd5e:	bf00      	nop
    cd60:	3710      	adds	r7, #16
    cd62:	46bd      	mov	sp, r7
    cd64:	bd80      	pop	{r7, pc}
    cd66:	bf00      	nop
    cd68:	0000cde1 	.word	0x0000cde1
    cd6c:	00008991 	.word	0x00008991

0000cd70 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    cd70:	b580      	push	{r7, lr}
    cd72:	b084      	sub	sp, #16
    cd74:	af00      	add	r7, sp, #0
    cd76:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    cd78:	687b      	ldr	r3, [r7, #4]
    cd7a:	68db      	ldr	r3, [r3, #12]
    cd7c:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    cd7e:	68f8      	ldr	r0, [r7, #12]
    cd80:	4b07      	ldr	r3, [pc, #28]	; (cda0 <tcc_interrupt_handler+0x30>)
    cd82:	4798      	blx	r3
    cd84:	4603      	mov	r3, r0
    cd86:	2b00      	cmp	r3, #0
    cd88:	d006      	beq.n	cd98 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    cd8a:	68f8      	ldr	r0, [r7, #12]
    cd8c:	4b05      	ldr	r3, [pc, #20]	; (cda4 <tcc_interrupt_handler+0x34>)
    cd8e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    cd90:	687b      	ldr	r3, [r7, #4]
    cd92:	681b      	ldr	r3, [r3, #0]
    cd94:	6878      	ldr	r0, [r7, #4]
    cd96:	4798      	blx	r3
	}
}
    cd98:	bf00      	nop
    cd9a:	3710      	adds	r7, #16
    cd9c:	46bd      	mov	sp, r7
    cd9e:	bd80      	pop	{r7, pc}
    cda0:	0000c8d9 	.word	0x0000c8d9
    cda4:	0000c8ff 	.word	0x0000c8ff

0000cda8 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    cda8:	b580      	push	{r7, lr}
    cdaa:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    cdac:	4b03      	ldr	r3, [pc, #12]	; (cdbc <TCC0_0_Handler+0x14>)
    cdae:	681b      	ldr	r3, [r3, #0]
    cdb0:	4618      	mov	r0, r3
    cdb2:	4b03      	ldr	r3, [pc, #12]	; (cdc0 <TCC0_0_Handler+0x18>)
    cdb4:	4798      	blx	r3
}
    cdb6:	bf00      	nop
    cdb8:	bd80      	pop	{r7, pc}
    cdba:	bf00      	nop
    cdbc:	200089f0 	.word	0x200089f0
    cdc0:	0000cd71 	.word	0x0000cd71

0000cdc4 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    cdc4:	b580      	push	{r7, lr}
    cdc6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    cdc8:	4b03      	ldr	r3, [pc, #12]	; (cdd8 <TCC1_0_Handler+0x14>)
    cdca:	681b      	ldr	r3, [r3, #0]
    cdcc:	4618      	mov	r0, r3
    cdce:	4b03      	ldr	r3, [pc, #12]	; (cddc <TCC1_0_Handler+0x18>)
    cdd0:	4798      	blx	r3
}
    cdd2:	bf00      	nop
    cdd4:	bd80      	pop	{r7, pc}
    cdd6:	bf00      	nop
    cdd8:	200089f4 	.word	0x200089f4
    cddc:	0000cd71 	.word	0x0000cd71

0000cde0 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    cde0:	b480      	push	{r7}
    cde2:	b085      	sub	sp, #20
    cde4:	af00      	add	r7, sp, #0
    cde6:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    cde8:	2300      	movs	r3, #0
    cdea:	73fb      	strb	r3, [r7, #15]
    cdec:	e015      	b.n	ce1a <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    cdee:	7bfa      	ldrb	r2, [r7, #15]
    cdf0:	490f      	ldr	r1, [pc, #60]	; (ce30 <_get_tcc_cfg+0x50>)
    cdf2:	4613      	mov	r3, r2
    cdf4:	005b      	lsls	r3, r3, #1
    cdf6:	4413      	add	r3, r2
    cdf8:	011b      	lsls	r3, r3, #4
    cdfa:	440b      	add	r3, r1
    cdfc:	681a      	ldr	r2, [r3, #0]
    cdfe:	687b      	ldr	r3, [r7, #4]
    ce00:	429a      	cmp	r2, r3
    ce02:	d107      	bne.n	ce14 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    ce04:	7bfa      	ldrb	r2, [r7, #15]
    ce06:	4613      	mov	r3, r2
    ce08:	005b      	lsls	r3, r3, #1
    ce0a:	4413      	add	r3, r2
    ce0c:	011b      	lsls	r3, r3, #4
    ce0e:	4a08      	ldr	r2, [pc, #32]	; (ce30 <_get_tcc_cfg+0x50>)
    ce10:	4413      	add	r3, r2
    ce12:	e006      	b.n	ce22 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    ce14:	7bfb      	ldrb	r3, [r7, #15]
    ce16:	3301      	adds	r3, #1
    ce18:	73fb      	strb	r3, [r7, #15]
    ce1a:	7bfb      	ldrb	r3, [r7, #15]
    ce1c:	2b01      	cmp	r3, #1
    ce1e:	d9e6      	bls.n	cdee <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    ce20:	2300      	movs	r3, #0
}
    ce22:	4618      	mov	r0, r3
    ce24:	3714      	adds	r7, #20
    ce26:	46bd      	mov	sp, r7
    ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce2c:	4770      	bx	lr
    ce2e:	bf00      	nop
    ce30:	200000c4 	.word	0x200000c4

0000ce34 <__NVIC_EnableIRQ>:
{
    ce34:	b480      	push	{r7}
    ce36:	b083      	sub	sp, #12
    ce38:	af00      	add	r7, sp, #0
    ce3a:	4603      	mov	r3, r0
    ce3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ce3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ce42:	2b00      	cmp	r3, #0
    ce44:	db0b      	blt.n	ce5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ce46:	4909      	ldr	r1, [pc, #36]	; (ce6c <__NVIC_EnableIRQ+0x38>)
    ce48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ce4c:	095b      	lsrs	r3, r3, #5
    ce4e:	88fa      	ldrh	r2, [r7, #6]
    ce50:	f002 021f 	and.w	r2, r2, #31
    ce54:	2001      	movs	r0, #1
    ce56:	fa00 f202 	lsl.w	r2, r0, r2
    ce5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce5e:	bf00      	nop
    ce60:	370c      	adds	r7, #12
    ce62:	46bd      	mov	sp, r7
    ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
    ce68:	4770      	bx	lr
    ce6a:	bf00      	nop
    ce6c:	e000e100 	.word	0xe000e100

0000ce70 <__NVIC_DisableIRQ>:
{
    ce70:	b480      	push	{r7}
    ce72:	b083      	sub	sp, #12
    ce74:	af00      	add	r7, sp, #0
    ce76:	4603      	mov	r3, r0
    ce78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    ce7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ce7e:	2b00      	cmp	r3, #0
    ce80:	db10      	blt.n	cea4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ce82:	490b      	ldr	r1, [pc, #44]	; (ceb0 <__NVIC_DisableIRQ+0x40>)
    ce84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    ce88:	095b      	lsrs	r3, r3, #5
    ce8a:	88fa      	ldrh	r2, [r7, #6]
    ce8c:	f002 021f 	and.w	r2, r2, #31
    ce90:	2001      	movs	r0, #1
    ce92:	fa00 f202 	lsl.w	r2, r0, r2
    ce96:	3320      	adds	r3, #32
    ce98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    ce9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cea0:	f3bf 8f6f 	isb	sy
}
    cea4:	bf00      	nop
    cea6:	370c      	adds	r7, #12
    cea8:	46bd      	mov	sp, r7
    ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    ceae:	4770      	bx	lr
    ceb0:	e000e100 	.word	0xe000e100

0000ceb4 <__NVIC_ClearPendingIRQ>:
{
    ceb4:	b480      	push	{r7}
    ceb6:	b083      	sub	sp, #12
    ceb8:	af00      	add	r7, sp, #0
    ceba:	4603      	mov	r3, r0
    cebc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    cebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cec2:	2b00      	cmp	r3, #0
    cec4:	db0c      	blt.n	cee0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cec6:	4909      	ldr	r1, [pc, #36]	; (ceec <__NVIC_ClearPendingIRQ+0x38>)
    cec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    cecc:	095b      	lsrs	r3, r3, #5
    cece:	88fa      	ldrh	r2, [r7, #6]
    ced0:	f002 021f 	and.w	r2, r2, #31
    ced4:	2001      	movs	r0, #1
    ced6:	fa00 f202 	lsl.w	r2, r0, r2
    ceda:	3360      	adds	r3, #96	; 0x60
    cedc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cee0:	bf00      	nop
    cee2:	370c      	adds	r7, #12
    cee4:	46bd      	mov	sp, r7
    cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
    ceea:	4770      	bx	lr
    ceec:	e000e100 	.word	0xe000e100

0000cef0 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    cef0:	b480      	push	{r7}
    cef2:	b083      	sub	sp, #12
    cef4:	af00      	add	r7, sp, #0
    cef6:	6078      	str	r0, [r7, #4]
    cef8:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    cefa:	bf00      	nop
    cefc:	687b      	ldr	r3, [r7, #4]
    cefe:	691a      	ldr	r2, [r3, #16]
    cf00:	683b      	ldr	r3, [r7, #0]
    cf02:	4013      	ands	r3, r2
    cf04:	2b00      	cmp	r3, #0
    cf06:	d1f9      	bne.n	cefc <hri_tc_wait_for_sync+0xc>
	};
}
    cf08:	bf00      	nop
    cf0a:	370c      	adds	r7, #12
    cf0c:	46bd      	mov	sp, r7
    cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf12:	4770      	bx	lr

0000cf14 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    cf14:	b480      	push	{r7}
    cf16:	b083      	sub	sp, #12
    cf18:	af00      	add	r7, sp, #0
    cf1a:	6078      	str	r0, [r7, #4]
    cf1c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    cf1e:	687b      	ldr	r3, [r7, #4]
    cf20:	691a      	ldr	r2, [r3, #16]
    cf22:	683b      	ldr	r3, [r7, #0]
    cf24:	4013      	ands	r3, r2
    cf26:	2b00      	cmp	r3, #0
    cf28:	bf14      	ite	ne
    cf2a:	2301      	movne	r3, #1
    cf2c:	2300      	moveq	r3, #0
    cf2e:	b2db      	uxtb	r3, r3
}
    cf30:	4618      	mov	r0, r3
    cf32:	370c      	adds	r7, #12
    cf34:	46bd      	mov	sp, r7
    cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf3a:	4770      	bx	lr

0000cf3c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    cf3c:	b480      	push	{r7}
    cf3e:	b083      	sub	sp, #12
    cf40:	af00      	add	r7, sp, #0
    cf42:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    cf44:	687b      	ldr	r3, [r7, #4]
    cf46:	7a9b      	ldrb	r3, [r3, #10]
    cf48:	b2db      	uxtb	r3, r3
    cf4a:	f003 0301 	and.w	r3, r3, #1
    cf4e:	2b00      	cmp	r3, #0
    cf50:	bf14      	ite	ne
    cf52:	2301      	movne	r3, #1
    cf54:	2300      	moveq	r3, #0
    cf56:	b2db      	uxtb	r3, r3
}
    cf58:	4618      	mov	r0, r3
    cf5a:	370c      	adds	r7, #12
    cf5c:	46bd      	mov	sp, r7
    cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf62:	4770      	bx	lr

0000cf64 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    cf64:	b480      	push	{r7}
    cf66:	b083      	sub	sp, #12
    cf68:	af00      	add	r7, sp, #0
    cf6a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    cf6c:	687b      	ldr	r3, [r7, #4]
    cf6e:	2201      	movs	r2, #1
    cf70:	729a      	strb	r2, [r3, #10]
}
    cf72:	bf00      	nop
    cf74:	370c      	adds	r7, #12
    cf76:	46bd      	mov	sp, r7
    cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf7c:	4770      	bx	lr

0000cf7e <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    cf7e:	b480      	push	{r7}
    cf80:	b083      	sub	sp, #12
    cf82:	af00      	add	r7, sp, #0
    cf84:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    cf86:	687b      	ldr	r3, [r7, #4]
    cf88:	2202      	movs	r2, #2
    cf8a:	729a      	strb	r2, [r3, #10]
}
    cf8c:	bf00      	nop
    cf8e:	370c      	adds	r7, #12
    cf90:	46bd      	mov	sp, r7
    cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf96:	4770      	bx	lr

0000cf98 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    cf98:	b480      	push	{r7}
    cf9a:	b083      	sub	sp, #12
    cf9c:	af00      	add	r7, sp, #0
    cf9e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    cfa0:	687b      	ldr	r3, [r7, #4]
    cfa2:	2201      	movs	r2, #1
    cfa4:	725a      	strb	r2, [r3, #9]
}
    cfa6:	bf00      	nop
    cfa8:	370c      	adds	r7, #12
    cfaa:	46bd      	mov	sp, r7
    cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfb0:	4770      	bx	lr

0000cfb2 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    cfb2:	b480      	push	{r7}
    cfb4:	b083      	sub	sp, #12
    cfb6:	af00      	add	r7, sp, #0
    cfb8:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    cfba:	687b      	ldr	r3, [r7, #4]
    cfbc:	7a5b      	ldrb	r3, [r3, #9]
    cfbe:	b2db      	uxtb	r3, r3
    cfc0:	085b      	lsrs	r3, r3, #1
    cfc2:	f003 0301 	and.w	r3, r3, #1
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	bf14      	ite	ne
    cfca:	2301      	movne	r3, #1
    cfcc:	2300      	moveq	r3, #0
    cfce:	b2db      	uxtb	r3, r3
}
    cfd0:	4618      	mov	r0, r3
    cfd2:	370c      	adds	r7, #12
    cfd4:	46bd      	mov	sp, r7
    cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfda:	4770      	bx	lr

0000cfdc <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    cfdc:	b580      	push	{r7, lr}
    cfde:	b082      	sub	sp, #8
    cfe0:	af00      	add	r7, sp, #0
    cfe2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    cfe4:	687b      	ldr	r3, [r7, #4]
    cfe6:	681b      	ldr	r3, [r3, #0]
    cfe8:	f043 0201 	orr.w	r2, r3, #1
    cfec:	687b      	ldr	r3, [r7, #4]
    cfee:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    cff0:	2101      	movs	r1, #1
    cff2:	6878      	ldr	r0, [r7, #4]
    cff4:	4b02      	ldr	r3, [pc, #8]	; (d000 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    cff6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cff8:	bf00      	nop
    cffa:	3708      	adds	r7, #8
    cffc:	46bd      	mov	sp, r7
    cffe:	bd80      	pop	{r7, pc}
    d000:	0000cef1 	.word	0x0000cef1

0000d004 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    d004:	b580      	push	{r7, lr}
    d006:	b082      	sub	sp, #8
    d008:	af00      	add	r7, sp, #0
    d00a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    d00c:	687b      	ldr	r3, [r7, #4]
    d00e:	681b      	ldr	r3, [r3, #0]
    d010:	f043 0202 	orr.w	r2, r3, #2
    d014:	687b      	ldr	r3, [r7, #4]
    d016:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d018:	2103      	movs	r1, #3
    d01a:	6878      	ldr	r0, [r7, #4]
    d01c:	4b02      	ldr	r3, [pc, #8]	; (d028 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    d01e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d020:	bf00      	nop
    d022:	3708      	adds	r7, #8
    d024:	46bd      	mov	sp, r7
    d026:	bd80      	pop	{r7, pc}
    d028:	0000cef1 	.word	0x0000cef1

0000d02c <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    d02c:	b580      	push	{r7, lr}
    d02e:	b084      	sub	sp, #16
    d030:	af00      	add	r7, sp, #0
    d032:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d034:	2103      	movs	r1, #3
    d036:	6878      	ldr	r0, [r7, #4]
    d038:	4b09      	ldr	r3, [pc, #36]	; (d060 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    d03a:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    d03c:	687b      	ldr	r3, [r7, #4]
    d03e:	681b      	ldr	r3, [r3, #0]
    d040:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    d042:	68fb      	ldr	r3, [r7, #12]
    d044:	085b      	lsrs	r3, r3, #1
    d046:	f003 0301 	and.w	r3, r3, #1
    d04a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    d04c:	68fb      	ldr	r3, [r7, #12]
    d04e:	2b00      	cmp	r3, #0
    d050:	bf14      	ite	ne
    d052:	2301      	movne	r3, #1
    d054:	2300      	moveq	r3, #0
    d056:	b2db      	uxtb	r3, r3
}
    d058:	4618      	mov	r0, r3
    d05a:	3710      	adds	r7, #16
    d05c:	46bd      	mov	sp, r7
    d05e:	bd80      	pop	{r7, pc}
    d060:	0000cef1 	.word	0x0000cef1

0000d064 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    d064:	b580      	push	{r7, lr}
    d066:	b082      	sub	sp, #8
    d068:	af00      	add	r7, sp, #0
    d06a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    d06c:	687b      	ldr	r3, [r7, #4]
    d06e:	681b      	ldr	r3, [r3, #0]
    d070:	f023 0202 	bic.w	r2, r3, #2
    d074:	687b      	ldr	r3, [r7, #4]
    d076:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d078:	2103      	movs	r1, #3
    d07a:	6878      	ldr	r0, [r7, #4]
    d07c:	4b02      	ldr	r3, [pc, #8]	; (d088 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    d07e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d080:	bf00      	nop
    d082:	3708      	adds	r7, #8
    d084:	46bd      	mov	sp, r7
    d086:	bd80      	pop	{r7, pc}
    d088:	0000cef1 	.word	0x0000cef1

0000d08c <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    d08c:	b480      	push	{r7}
    d08e:	b085      	sub	sp, #20
    d090:	af00      	add	r7, sp, #0
    d092:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    d094:	687b      	ldr	r3, [r7, #4]
    d096:	681b      	ldr	r3, [r3, #0]
    d098:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    d09a:	68fb      	ldr	r3, [r7, #12]
    d09c:	089b      	lsrs	r3, r3, #2
    d09e:	f003 0303 	and.w	r3, r3, #3
    d0a2:	60fb      	str	r3, [r7, #12]
	return tmp;
    d0a4:	68fb      	ldr	r3, [r7, #12]
}
    d0a6:	4618      	mov	r0, r3
    d0a8:	3714      	adds	r7, #20
    d0aa:	46bd      	mov	sp, r7
    d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0b0:	4770      	bx	lr
	...

0000d0b4 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    d0b4:	b580      	push	{r7, lr}
    d0b6:	b084      	sub	sp, #16
    d0b8:	af00      	add	r7, sp, #0
    d0ba:	6078      	str	r0, [r7, #4]
    d0bc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d0be:	2103      	movs	r1, #3
    d0c0:	6878      	ldr	r0, [r7, #4]
    d0c2:	4b07      	ldr	r3, [pc, #28]	; (d0e0 <hri_tc_get_CTRLA_reg+0x2c>)
    d0c4:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    d0c6:	687b      	ldr	r3, [r7, #4]
    d0c8:	681b      	ldr	r3, [r3, #0]
    d0ca:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    d0cc:	68fa      	ldr	r2, [r7, #12]
    d0ce:	683b      	ldr	r3, [r7, #0]
    d0d0:	4013      	ands	r3, r2
    d0d2:	60fb      	str	r3, [r7, #12]
	return tmp;
    d0d4:	68fb      	ldr	r3, [r7, #12]
}
    d0d6:	4618      	mov	r0, r3
    d0d8:	3710      	adds	r7, #16
    d0da:	46bd      	mov	sp, r7
    d0dc:	bd80      	pop	{r7, pc}
    d0de:	bf00      	nop
    d0e0:	0000cef1 	.word	0x0000cef1

0000d0e4 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    d0e4:	b580      	push	{r7, lr}
    d0e6:	b082      	sub	sp, #8
    d0e8:	af00      	add	r7, sp, #0
    d0ea:	6078      	str	r0, [r7, #4]
    d0ec:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    d0ee:	687b      	ldr	r3, [r7, #4]
    d0f0:	683a      	ldr	r2, [r7, #0]
    d0f2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    d0f4:	2103      	movs	r1, #3
    d0f6:	6878      	ldr	r0, [r7, #4]
    d0f8:	4b02      	ldr	r3, [pc, #8]	; (d104 <hri_tc_write_CTRLA_reg+0x20>)
    d0fa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d0fc:	bf00      	nop
    d0fe:	3708      	adds	r7, #8
    d100:	46bd      	mov	sp, r7
    d102:	bd80      	pop	{r7, pc}
    d104:	0000cef1 	.word	0x0000cef1

0000d108 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    d108:	b480      	push	{r7}
    d10a:	b083      	sub	sp, #12
    d10c:	af00      	add	r7, sp, #0
    d10e:	6078      	str	r0, [r7, #4]
    d110:	460b      	mov	r3, r1
    d112:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    d114:	687b      	ldr	r3, [r7, #4]
    d116:	887a      	ldrh	r2, [r7, #2]
    d118:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    d11a:	bf00      	nop
    d11c:	370c      	adds	r7, #12
    d11e:	46bd      	mov	sp, r7
    d120:	f85d 7b04 	ldr.w	r7, [sp], #4
    d124:	4770      	bx	lr

0000d126 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    d126:	b480      	push	{r7}
    d128:	b083      	sub	sp, #12
    d12a:	af00      	add	r7, sp, #0
    d12c:	6078      	str	r0, [r7, #4]
    d12e:	460b      	mov	r3, r1
    d130:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    d132:	687b      	ldr	r3, [r7, #4]
    d134:	78fa      	ldrb	r2, [r7, #3]
    d136:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    d138:	bf00      	nop
    d13a:	370c      	adds	r7, #12
    d13c:	46bd      	mov	sp, r7
    d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d142:	4770      	bx	lr

0000d144 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    d144:	b480      	push	{r7}
    d146:	b083      	sub	sp, #12
    d148:	af00      	add	r7, sp, #0
    d14a:	6078      	str	r0, [r7, #4]
    d14c:	460b      	mov	r3, r1
    d14e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    d150:	687b      	ldr	r3, [r7, #4]
    d152:	78fa      	ldrb	r2, [r7, #3]
    d154:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    d156:	bf00      	nop
    d158:	370c      	adds	r7, #12
    d15a:	46bd      	mov	sp, r7
    d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d160:	4770      	bx	lr
	...

0000d164 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    d164:	b580      	push	{r7, lr}
    d166:	b082      	sub	sp, #8
    d168:	af00      	add	r7, sp, #0
    d16a:	6078      	str	r0, [r7, #4]
    d16c:	460b      	mov	r3, r1
    d16e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    d170:	687b      	ldr	r3, [r7, #4]
    d172:	78fa      	ldrb	r2, [r7, #3]
    d174:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    d176:	2120      	movs	r1, #32
    d178:	6878      	ldr	r0, [r7, #4]
    d17a:	4b03      	ldr	r3, [pc, #12]	; (d188 <hri_tccount8_write_PER_reg+0x24>)
    d17c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d17e:	bf00      	nop
    d180:	3708      	adds	r7, #8
    d182:	46bd      	mov	sp, r7
    d184:	bd80      	pop	{r7, pc}
    d186:	bf00      	nop
    d188:	0000cef1 	.word	0x0000cef1

0000d18c <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    d18c:	b580      	push	{r7, lr}
    d18e:	b082      	sub	sp, #8
    d190:	af00      	add	r7, sp, #0
    d192:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    d194:	2120      	movs	r1, #32
    d196:	6878      	ldr	r0, [r7, #4]
    d198:	4b04      	ldr	r3, [pc, #16]	; (d1ac <hri_tccount8_read_PER_reg+0x20>)
    d19a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    d19c:	687b      	ldr	r3, [r7, #4]
    d19e:	7edb      	ldrb	r3, [r3, #27]
    d1a0:	b2db      	uxtb	r3, r3
}
    d1a2:	4618      	mov	r0, r3
    d1a4:	3708      	adds	r7, #8
    d1a6:	46bd      	mov	sp, r7
    d1a8:	bd80      	pop	{r7, pc}
    d1aa:	bf00      	nop
    d1ac:	0000cef1 	.word	0x0000cef1

0000d1b0 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    d1b0:	b580      	push	{r7, lr}
    d1b2:	b082      	sub	sp, #8
    d1b4:	af00      	add	r7, sp, #0
    d1b6:	6078      	str	r0, [r7, #4]
    d1b8:	460b      	mov	r3, r1
    d1ba:	70fb      	strb	r3, [r7, #3]
    d1bc:	4613      	mov	r3, r2
    d1be:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    d1c0:	78fb      	ldrb	r3, [r7, #3]
    d1c2:	687a      	ldr	r2, [r7, #4]
    d1c4:	4413      	add	r3, r2
    d1c6:	78ba      	ldrb	r2, [r7, #2]
    d1c8:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d1ca:	21c0      	movs	r1, #192	; 0xc0
    d1cc:	6878      	ldr	r0, [r7, #4]
    d1ce:	4b03      	ldr	r3, [pc, #12]	; (d1dc <hri_tccount8_write_CC_reg+0x2c>)
    d1d0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d1d2:	bf00      	nop
    d1d4:	3708      	adds	r7, #8
    d1d6:	46bd      	mov	sp, r7
    d1d8:	bd80      	pop	{r7, pc}
    d1da:	bf00      	nop
    d1dc:	0000cef1 	.word	0x0000cef1

0000d1e0 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    d1e0:	b580      	push	{r7, lr}
    d1e2:	b082      	sub	sp, #8
    d1e4:	af00      	add	r7, sp, #0
    d1e6:	6078      	str	r0, [r7, #4]
    d1e8:	460b      	mov	r3, r1
    d1ea:	70fb      	strb	r3, [r7, #3]
    d1ec:	4613      	mov	r3, r2
    d1ee:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    d1f0:	78fb      	ldrb	r3, [r7, #3]
    d1f2:	687a      	ldr	r2, [r7, #4]
    d1f4:	330c      	adds	r3, #12
    d1f6:	005b      	lsls	r3, r3, #1
    d1f8:	4413      	add	r3, r2
    d1fa:	883a      	ldrh	r2, [r7, #0]
    d1fc:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d1fe:	21c0      	movs	r1, #192	; 0xc0
    d200:	6878      	ldr	r0, [r7, #4]
    d202:	4b03      	ldr	r3, [pc, #12]	; (d210 <hri_tccount16_write_CC_reg+0x30>)
    d204:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d206:	bf00      	nop
    d208:	3708      	adds	r7, #8
    d20a:	46bd      	mov	sp, r7
    d20c:	bd80      	pop	{r7, pc}
    d20e:	bf00      	nop
    d210:	0000cef1 	.word	0x0000cef1

0000d214 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    d214:	b580      	push	{r7, lr}
    d216:	b082      	sub	sp, #8
    d218:	af00      	add	r7, sp, #0
    d21a:	6078      	str	r0, [r7, #4]
    d21c:	460b      	mov	r3, r1
    d21e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d220:	21c0      	movs	r1, #192	; 0xc0
    d222:	6878      	ldr	r0, [r7, #4]
    d224:	4b06      	ldr	r3, [pc, #24]	; (d240 <hri_tccount16_read_CC_reg+0x2c>)
    d226:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    d228:	78fb      	ldrb	r3, [r7, #3]
    d22a:	687a      	ldr	r2, [r7, #4]
    d22c:	330c      	adds	r3, #12
    d22e:	005b      	lsls	r3, r3, #1
    d230:	4413      	add	r3, r2
    d232:	889b      	ldrh	r3, [r3, #4]
    d234:	b29b      	uxth	r3, r3
}
    d236:	4618      	mov	r0, r3
    d238:	3708      	adds	r7, #8
    d23a:	46bd      	mov	sp, r7
    d23c:	bd80      	pop	{r7, pc}
    d23e:	bf00      	nop
    d240:	0000cef1 	.word	0x0000cef1

0000d244 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    d244:	b580      	push	{r7, lr}
    d246:	b084      	sub	sp, #16
    d248:	af00      	add	r7, sp, #0
    d24a:	60f8      	str	r0, [r7, #12]
    d24c:	460b      	mov	r3, r1
    d24e:	607a      	str	r2, [r7, #4]
    d250:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    d252:	7afb      	ldrb	r3, [r7, #11]
    d254:	68fa      	ldr	r2, [r7, #12]
    d256:	3306      	adds	r3, #6
    d258:	009b      	lsls	r3, r3, #2
    d25a:	4413      	add	r3, r2
    d25c:	687a      	ldr	r2, [r7, #4]
    d25e:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d260:	21c0      	movs	r1, #192	; 0xc0
    d262:	68f8      	ldr	r0, [r7, #12]
    d264:	4b02      	ldr	r3, [pc, #8]	; (d270 <hri_tccount32_write_CC_reg+0x2c>)
    d266:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    d268:	bf00      	nop
    d26a:	3710      	adds	r7, #16
    d26c:	46bd      	mov	sp, r7
    d26e:	bd80      	pop	{r7, pc}
    d270:	0000cef1 	.word	0x0000cef1

0000d274 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    d274:	b580      	push	{r7, lr}
    d276:	b082      	sub	sp, #8
    d278:	af00      	add	r7, sp, #0
    d27a:	6078      	str	r0, [r7, #4]
    d27c:	460b      	mov	r3, r1
    d27e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    d280:	21c0      	movs	r1, #192	; 0xc0
    d282:	6878      	ldr	r0, [r7, #4]
    d284:	4b05      	ldr	r3, [pc, #20]	; (d29c <hri_tccount32_read_CC_reg+0x28>)
    d286:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    d288:	78fb      	ldrb	r3, [r7, #3]
    d28a:	687a      	ldr	r2, [r7, #4]
    d28c:	3306      	adds	r3, #6
    d28e:	009b      	lsls	r3, r3, #2
    d290:	4413      	add	r3, r2
    d292:	685b      	ldr	r3, [r3, #4]
}
    d294:	4618      	mov	r0, r3
    d296:	3708      	adds	r7, #8
    d298:	46bd      	mov	sp, r7
    d29a:	bd80      	pop	{r7, pc}
    d29c:	0000cef1 	.word	0x0000cef1

0000d2a0 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    d2a0:	b580      	push	{r7, lr}
    d2a2:	b084      	sub	sp, #16
    d2a4:	af00      	add	r7, sp, #0
    d2a6:	6078      	str	r0, [r7, #4]
    d2a8:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    d2aa:	6838      	ldr	r0, [r7, #0]
    d2ac:	4b93      	ldr	r3, [pc, #588]	; (d4fc <_tc_timer_init+0x25c>)
    d2ae:	4798      	blx	r3
    d2b0:	4603      	mov	r3, r0
    d2b2:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    d2b4:	687b      	ldr	r3, [r7, #4]
    d2b6:	683a      	ldr	r2, [r7, #0]
    d2b8:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    d2ba:	22a4      	movs	r2, #164	; 0xa4
    d2bc:	4990      	ldr	r1, [pc, #576]	; (d500 <_tc_timer_init+0x260>)
    d2be:	2001      	movs	r0, #1
    d2c0:	4b90      	ldr	r3, [pc, #576]	; (d504 <_tc_timer_init+0x264>)
    d2c2:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    d2c4:	2101      	movs	r1, #1
    d2c6:	6838      	ldr	r0, [r7, #0]
    d2c8:	4b8f      	ldr	r3, [pc, #572]	; (d508 <_tc_timer_init+0x268>)
    d2ca:	4798      	blx	r3
    d2cc:	4603      	mov	r3, r0
    d2ce:	f083 0301 	eor.w	r3, r3, #1
    d2d2:	b2db      	uxtb	r3, r3
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d011      	beq.n	d2fc <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    d2d8:	2102      	movs	r1, #2
    d2da:	6838      	ldr	r0, [r7, #0]
    d2dc:	4b8b      	ldr	r3, [pc, #556]	; (d50c <_tc_timer_init+0x26c>)
    d2de:	4798      	blx	r3
    d2e0:	4603      	mov	r3, r0
    d2e2:	2b00      	cmp	r3, #0
    d2e4:	d006      	beq.n	d2f4 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d2e6:	6838      	ldr	r0, [r7, #0]
    d2e8:	4b89      	ldr	r3, [pc, #548]	; (d510 <_tc_timer_init+0x270>)
    d2ea:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    d2ec:	2102      	movs	r1, #2
    d2ee:	6838      	ldr	r0, [r7, #0]
    d2f0:	4b88      	ldr	r3, [pc, #544]	; (d514 <_tc_timer_init+0x274>)
    d2f2:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    d2f4:	2101      	movs	r1, #1
    d2f6:	6838      	ldr	r0, [r7, #0]
    d2f8:	4b87      	ldr	r3, [pc, #540]	; (d518 <_tc_timer_init+0x278>)
    d2fa:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    d2fc:	2101      	movs	r1, #1
    d2fe:	6838      	ldr	r0, [r7, #0]
    d300:	4b84      	ldr	r3, [pc, #528]	; (d514 <_tc_timer_init+0x274>)
    d302:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    d304:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d308:	4984      	ldr	r1, [pc, #528]	; (d51c <_tc_timer_init+0x27c>)
    d30a:	4613      	mov	r3, r2
    d30c:	009b      	lsls	r3, r3, #2
    d30e:	4413      	add	r3, r2
    d310:	009b      	lsls	r3, r3, #2
    d312:	440b      	add	r3, r1
    d314:	3304      	adds	r3, #4
    d316:	681b      	ldr	r3, [r3, #0]
    d318:	4619      	mov	r1, r3
    d31a:	6838      	ldr	r0, [r7, #0]
    d31c:	4b7e      	ldr	r3, [pc, #504]	; (d518 <_tc_timer_init+0x278>)
    d31e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    d320:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d324:	497d      	ldr	r1, [pc, #500]	; (d51c <_tc_timer_init+0x27c>)
    d326:	4613      	mov	r3, r2
    d328:	009b      	lsls	r3, r3, #2
    d32a:	4413      	add	r3, r2
    d32c:	009b      	lsls	r3, r3, #2
    d32e:	440b      	add	r3, r1
    d330:	330a      	adds	r3, #10
    d332:	781b      	ldrb	r3, [r3, #0]
    d334:	4619      	mov	r1, r3
    d336:	6838      	ldr	r0, [r7, #0]
    d338:	4b79      	ldr	r3, [pc, #484]	; (d520 <_tc_timer_init+0x280>)
    d33a:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    d33c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d340:	4976      	ldr	r1, [pc, #472]	; (d51c <_tc_timer_init+0x27c>)
    d342:	4613      	mov	r3, r2
    d344:	009b      	lsls	r3, r3, #2
    d346:	4413      	add	r3, r2
    d348:	009b      	lsls	r3, r3, #2
    d34a:	440b      	add	r3, r1
    d34c:	3308      	adds	r3, #8
    d34e:	881b      	ldrh	r3, [r3, #0]
    d350:	4619      	mov	r1, r3
    d352:	6838      	ldr	r0, [r7, #0]
    d354:	4b73      	ldr	r3, [pc, #460]	; (d524 <_tc_timer_init+0x284>)
    d356:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    d358:	2101      	movs	r1, #1
    d35a:	6838      	ldr	r0, [r7, #0]
    d35c:	4b72      	ldr	r3, [pc, #456]	; (d528 <_tc_timer_init+0x288>)
    d35e:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    d360:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d364:	496d      	ldr	r1, [pc, #436]	; (d51c <_tc_timer_init+0x27c>)
    d366:	4613      	mov	r3, r2
    d368:	009b      	lsls	r3, r3, #2
    d36a:	4413      	add	r3, r2
    d36c:	009b      	lsls	r3, r3, #2
    d36e:	440b      	add	r3, r1
    d370:	3304      	adds	r3, #4
    d372:	681b      	ldr	r3, [r3, #0]
    d374:	f003 030c 	and.w	r3, r3, #12
    d378:	2b08      	cmp	r3, #8
    d37a:	d11e      	bne.n	d3ba <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    d37c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d380:	4966      	ldr	r1, [pc, #408]	; (d51c <_tc_timer_init+0x27c>)
    d382:	4613      	mov	r3, r2
    d384:	009b      	lsls	r3, r3, #2
    d386:	4413      	add	r3, r2
    d388:	009b      	lsls	r3, r3, #2
    d38a:	440b      	add	r3, r1
    d38c:	330c      	adds	r3, #12
    d38e:	681b      	ldr	r3, [r3, #0]
    d390:	461a      	mov	r2, r3
    d392:	2100      	movs	r1, #0
    d394:	6838      	ldr	r0, [r7, #0]
    d396:	4b65      	ldr	r3, [pc, #404]	; (d52c <_tc_timer_init+0x28c>)
    d398:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    d39a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d39e:	495f      	ldr	r1, [pc, #380]	; (d51c <_tc_timer_init+0x27c>)
    d3a0:	4613      	mov	r3, r2
    d3a2:	009b      	lsls	r3, r3, #2
    d3a4:	4413      	add	r3, r2
    d3a6:	009b      	lsls	r3, r3, #2
    d3a8:	440b      	add	r3, r1
    d3aa:	3310      	adds	r3, #16
    d3ac:	681b      	ldr	r3, [r3, #0]
    d3ae:	461a      	mov	r2, r3
    d3b0:	2101      	movs	r1, #1
    d3b2:	6838      	ldr	r0, [r7, #0]
    d3b4:	4b5d      	ldr	r3, [pc, #372]	; (d52c <_tc_timer_init+0x28c>)
    d3b6:	4798      	blx	r3
    d3b8:	e06a      	b.n	d490 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    d3ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d3be:	4957      	ldr	r1, [pc, #348]	; (d51c <_tc_timer_init+0x27c>)
    d3c0:	4613      	mov	r3, r2
    d3c2:	009b      	lsls	r3, r3, #2
    d3c4:	4413      	add	r3, r2
    d3c6:	009b      	lsls	r3, r3, #2
    d3c8:	440b      	add	r3, r1
    d3ca:	3304      	adds	r3, #4
    d3cc:	681b      	ldr	r3, [r3, #0]
    d3ce:	f003 030c 	and.w	r3, r3, #12
    d3d2:	2b00      	cmp	r3, #0
    d3d4:	d120      	bne.n	d418 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    d3d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d3da:	4950      	ldr	r1, [pc, #320]	; (d51c <_tc_timer_init+0x27c>)
    d3dc:	4613      	mov	r3, r2
    d3de:	009b      	lsls	r3, r3, #2
    d3e0:	4413      	add	r3, r2
    d3e2:	009b      	lsls	r3, r3, #2
    d3e4:	440b      	add	r3, r1
    d3e6:	330c      	adds	r3, #12
    d3e8:	681b      	ldr	r3, [r3, #0]
    d3ea:	b29b      	uxth	r3, r3
    d3ec:	461a      	mov	r2, r3
    d3ee:	2100      	movs	r1, #0
    d3f0:	6838      	ldr	r0, [r7, #0]
    d3f2:	4b4f      	ldr	r3, [pc, #316]	; (d530 <_tc_timer_init+0x290>)
    d3f4:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    d3f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d3fa:	4948      	ldr	r1, [pc, #288]	; (d51c <_tc_timer_init+0x27c>)
    d3fc:	4613      	mov	r3, r2
    d3fe:	009b      	lsls	r3, r3, #2
    d400:	4413      	add	r3, r2
    d402:	009b      	lsls	r3, r3, #2
    d404:	440b      	add	r3, r1
    d406:	3310      	adds	r3, #16
    d408:	681b      	ldr	r3, [r3, #0]
    d40a:	b29b      	uxth	r3, r3
    d40c:	461a      	mov	r2, r3
    d40e:	2101      	movs	r1, #1
    d410:	6838      	ldr	r0, [r7, #0]
    d412:	4b47      	ldr	r3, [pc, #284]	; (d530 <_tc_timer_init+0x290>)
    d414:	4798      	blx	r3
    d416:	e03b      	b.n	d490 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    d418:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d41c:	493f      	ldr	r1, [pc, #252]	; (d51c <_tc_timer_init+0x27c>)
    d41e:	4613      	mov	r3, r2
    d420:	009b      	lsls	r3, r3, #2
    d422:	4413      	add	r3, r2
    d424:	009b      	lsls	r3, r3, #2
    d426:	440b      	add	r3, r1
    d428:	3304      	adds	r3, #4
    d42a:	681b      	ldr	r3, [r3, #0]
    d42c:	f003 030c 	and.w	r3, r3, #12
    d430:	2b04      	cmp	r3, #4
    d432:	d12d      	bne.n	d490 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    d434:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d438:	4938      	ldr	r1, [pc, #224]	; (d51c <_tc_timer_init+0x27c>)
    d43a:	4613      	mov	r3, r2
    d43c:	009b      	lsls	r3, r3, #2
    d43e:	4413      	add	r3, r2
    d440:	009b      	lsls	r3, r3, #2
    d442:	440b      	add	r3, r1
    d444:	330c      	adds	r3, #12
    d446:	681b      	ldr	r3, [r3, #0]
    d448:	b2db      	uxtb	r3, r3
    d44a:	461a      	mov	r2, r3
    d44c:	2100      	movs	r1, #0
    d44e:	6838      	ldr	r0, [r7, #0]
    d450:	4b38      	ldr	r3, [pc, #224]	; (d534 <_tc_timer_init+0x294>)
    d452:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    d454:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d458:	4930      	ldr	r1, [pc, #192]	; (d51c <_tc_timer_init+0x27c>)
    d45a:	4613      	mov	r3, r2
    d45c:	009b      	lsls	r3, r3, #2
    d45e:	4413      	add	r3, r2
    d460:	009b      	lsls	r3, r3, #2
    d462:	440b      	add	r3, r1
    d464:	3310      	adds	r3, #16
    d466:	681b      	ldr	r3, [r3, #0]
    d468:	b2db      	uxtb	r3, r3
    d46a:	461a      	mov	r2, r3
    d46c:	2101      	movs	r1, #1
    d46e:	6838      	ldr	r0, [r7, #0]
    d470:	4b30      	ldr	r3, [pc, #192]	; (d534 <_tc_timer_init+0x294>)
    d472:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    d474:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d478:	4928      	ldr	r1, [pc, #160]	; (d51c <_tc_timer_init+0x27c>)
    d47a:	4613      	mov	r3, r2
    d47c:	009b      	lsls	r3, r3, #2
    d47e:	4413      	add	r3, r2
    d480:	009b      	lsls	r3, r3, #2
    d482:	440b      	add	r3, r1
    d484:	330b      	adds	r3, #11
    d486:	781b      	ldrb	r3, [r3, #0]
    d488:	4619      	mov	r1, r3
    d48a:	6838      	ldr	r0, [r7, #0]
    d48c:	4b2a      	ldr	r3, [pc, #168]	; (d538 <_tc_timer_init+0x298>)
    d48e:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    d490:	6838      	ldr	r0, [r7, #0]
    d492:	4b2a      	ldr	r3, [pc, #168]	; (d53c <_tc_timer_init+0x29c>)
    d494:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    d496:	6879      	ldr	r1, [r7, #4]
    d498:	6838      	ldr	r0, [r7, #0]
    d49a:	4b29      	ldr	r3, [pc, #164]	; (d540 <_tc_timer_init+0x2a0>)
    d49c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    d49e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d4a2:	491e      	ldr	r1, [pc, #120]	; (d51c <_tc_timer_init+0x27c>)
    d4a4:	4613      	mov	r3, r2
    d4a6:	009b      	lsls	r3, r3, #2
    d4a8:	4413      	add	r3, r2
    d4aa:	009b      	lsls	r3, r3, #2
    d4ac:	440b      	add	r3, r1
    d4ae:	3302      	adds	r3, #2
    d4b0:	f9b3 3000 	ldrsh.w	r3, [r3]
    d4b4:	4618      	mov	r0, r3
    d4b6:	4b23      	ldr	r3, [pc, #140]	; (d544 <_tc_timer_init+0x2a4>)
    d4b8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    d4ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d4be:	4917      	ldr	r1, [pc, #92]	; (d51c <_tc_timer_init+0x27c>)
    d4c0:	4613      	mov	r3, r2
    d4c2:	009b      	lsls	r3, r3, #2
    d4c4:	4413      	add	r3, r2
    d4c6:	009b      	lsls	r3, r3, #2
    d4c8:	440b      	add	r3, r1
    d4ca:	3302      	adds	r3, #2
    d4cc:	f9b3 3000 	ldrsh.w	r3, [r3]
    d4d0:	4618      	mov	r0, r3
    d4d2:	4b1d      	ldr	r3, [pc, #116]	; (d548 <_tc_timer_init+0x2a8>)
    d4d4:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    d4d6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d4da:	4910      	ldr	r1, [pc, #64]	; (d51c <_tc_timer_init+0x27c>)
    d4dc:	4613      	mov	r3, r2
    d4de:	009b      	lsls	r3, r3, #2
    d4e0:	4413      	add	r3, r2
    d4e2:	009b      	lsls	r3, r3, #2
    d4e4:	440b      	add	r3, r1
    d4e6:	3302      	adds	r3, #2
    d4e8:	f9b3 3000 	ldrsh.w	r3, [r3]
    d4ec:	4618      	mov	r0, r3
    d4ee:	4b17      	ldr	r3, [pc, #92]	; (d54c <_tc_timer_init+0x2ac>)
    d4f0:	4798      	blx	r3

	return ERR_NONE;
    d4f2:	2300      	movs	r3, #0
}
    d4f4:	4618      	mov	r0, r3
    d4f6:	3710      	adds	r7, #16
    d4f8:	46bd      	mov	sp, r7
    d4fa:	bd80      	pop	{r7, pc}
    d4fc:	0000db31 	.word	0x0000db31
    d500:	00020d20 	.word	0x00020d20
    d504:	00008145 	.word	0x00008145
    d508:	0000cf15 	.word	0x0000cf15
    d50c:	0000d0b5 	.word	0x0000d0b5
    d510:	0000d065 	.word	0x0000d065
    d514:	0000cef1 	.word	0x0000cef1
    d518:	0000d0e5 	.word	0x0000d0e5
    d51c:	20000144 	.word	0x20000144
    d520:	0000d145 	.word	0x0000d145
    d524:	0000d109 	.word	0x0000d109
    d528:	0000d127 	.word	0x0000d127
    d52c:	0000d245 	.word	0x0000d245
    d530:	0000d1e1 	.word	0x0000d1e1
    d534:	0000d1b1 	.word	0x0000d1b1
    d538:	0000d165 	.word	0x0000d165
    d53c:	0000cf99 	.word	0x0000cf99
    d540:	0000db99 	.word	0x0000db99
    d544:	0000ce71 	.word	0x0000ce71
    d548:	0000ceb5 	.word	0x0000ceb5
    d54c:	0000ce35 	.word	0x0000ce35

0000d550 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    d550:	b580      	push	{r7, lr}
    d552:	b084      	sub	sp, #16
    d554:	af00      	add	r7, sp, #0
    d556:	6078      	str	r0, [r7, #4]
    d558:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    d55a:	6838      	ldr	r0, [r7, #0]
    d55c:	4b73      	ldr	r3, [pc, #460]	; (d72c <_pwm_init+0x1dc>)
    d55e:	4798      	blx	r3
    d560:	4603      	mov	r3, r0
    d562:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    d564:	687b      	ldr	r3, [r7, #4]
    d566:	683a      	ldr	r2, [r7, #0]
    d568:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    d56a:	2101      	movs	r1, #1
    d56c:	6838      	ldr	r0, [r7, #0]
    d56e:	4b70      	ldr	r3, [pc, #448]	; (d730 <_pwm_init+0x1e0>)
    d570:	4798      	blx	r3
    d572:	4603      	mov	r3, r0
    d574:	f083 0301 	eor.w	r3, r3, #1
    d578:	b2db      	uxtb	r3, r3
    d57a:	2b00      	cmp	r3, #0
    d57c:	d011      	beq.n	d5a2 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    d57e:	2102      	movs	r1, #2
    d580:	6838      	ldr	r0, [r7, #0]
    d582:	4b6c      	ldr	r3, [pc, #432]	; (d734 <_pwm_init+0x1e4>)
    d584:	4798      	blx	r3
    d586:	4603      	mov	r3, r0
    d588:	2b00      	cmp	r3, #0
    d58a:	d006      	beq.n	d59a <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d58c:	6838      	ldr	r0, [r7, #0]
    d58e:	4b6a      	ldr	r3, [pc, #424]	; (d738 <_pwm_init+0x1e8>)
    d590:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    d592:	2102      	movs	r1, #2
    d594:	6838      	ldr	r0, [r7, #0]
    d596:	4b69      	ldr	r3, [pc, #420]	; (d73c <_pwm_init+0x1ec>)
    d598:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    d59a:	2101      	movs	r1, #1
    d59c:	6838      	ldr	r0, [r7, #0]
    d59e:	4b68      	ldr	r3, [pc, #416]	; (d740 <_pwm_init+0x1f0>)
    d5a0:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    d5a2:	2101      	movs	r1, #1
    d5a4:	6838      	ldr	r0, [r7, #0]
    d5a6:	4b65      	ldr	r3, [pc, #404]	; (d73c <_pwm_init+0x1ec>)
    d5a8:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    d5aa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d5ae:	4965      	ldr	r1, [pc, #404]	; (d744 <_pwm_init+0x1f4>)
    d5b0:	4613      	mov	r3, r2
    d5b2:	009b      	lsls	r3, r3, #2
    d5b4:	4413      	add	r3, r2
    d5b6:	009b      	lsls	r3, r3, #2
    d5b8:	440b      	add	r3, r1
    d5ba:	3304      	adds	r3, #4
    d5bc:	681b      	ldr	r3, [r3, #0]
    d5be:	4619      	mov	r1, r3
    d5c0:	6838      	ldr	r0, [r7, #0]
    d5c2:	4b5f      	ldr	r3, [pc, #380]	; (d740 <_pwm_init+0x1f0>)
    d5c4:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    d5c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d5ca:	495e      	ldr	r1, [pc, #376]	; (d744 <_pwm_init+0x1f4>)
    d5cc:	4613      	mov	r3, r2
    d5ce:	009b      	lsls	r3, r3, #2
    d5d0:	4413      	add	r3, r2
    d5d2:	009b      	lsls	r3, r3, #2
    d5d4:	440b      	add	r3, r1
    d5d6:	330a      	adds	r3, #10
    d5d8:	781b      	ldrb	r3, [r3, #0]
    d5da:	4619      	mov	r1, r3
    d5dc:	6838      	ldr	r0, [r7, #0]
    d5de:	4b5a      	ldr	r3, [pc, #360]	; (d748 <_pwm_init+0x1f8>)
    d5e0:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    d5e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d5e6:	4957      	ldr	r1, [pc, #348]	; (d744 <_pwm_init+0x1f4>)
    d5e8:	4613      	mov	r3, r2
    d5ea:	009b      	lsls	r3, r3, #2
    d5ec:	4413      	add	r3, r2
    d5ee:	009b      	lsls	r3, r3, #2
    d5f0:	440b      	add	r3, r1
    d5f2:	3308      	adds	r3, #8
    d5f4:	881b      	ldrh	r3, [r3, #0]
    d5f6:	4619      	mov	r1, r3
    d5f8:	6838      	ldr	r0, [r7, #0]
    d5fa:	4b54      	ldr	r3, [pc, #336]	; (d74c <_pwm_init+0x1fc>)
    d5fc:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    d5fe:	2103      	movs	r1, #3
    d600:	6838      	ldr	r0, [r7, #0]
    d602:	4b53      	ldr	r3, [pc, #332]	; (d750 <_pwm_init+0x200>)
    d604:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    d606:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d60a:	494e      	ldr	r1, [pc, #312]	; (d744 <_pwm_init+0x1f4>)
    d60c:	4613      	mov	r3, r2
    d60e:	009b      	lsls	r3, r3, #2
    d610:	4413      	add	r3, r2
    d612:	009b      	lsls	r3, r3, #2
    d614:	440b      	add	r3, r1
    d616:	3304      	adds	r3, #4
    d618:	681b      	ldr	r3, [r3, #0]
    d61a:	f003 030c 	and.w	r3, r3, #12
    d61e:	2b08      	cmp	r3, #8
    d620:	d11e      	bne.n	d660 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    d622:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d626:	4947      	ldr	r1, [pc, #284]	; (d744 <_pwm_init+0x1f4>)
    d628:	4613      	mov	r3, r2
    d62a:	009b      	lsls	r3, r3, #2
    d62c:	4413      	add	r3, r2
    d62e:	009b      	lsls	r3, r3, #2
    d630:	440b      	add	r3, r1
    d632:	330c      	adds	r3, #12
    d634:	681b      	ldr	r3, [r3, #0]
    d636:	461a      	mov	r2, r3
    d638:	2100      	movs	r1, #0
    d63a:	6838      	ldr	r0, [r7, #0]
    d63c:	4b45      	ldr	r3, [pc, #276]	; (d754 <_pwm_init+0x204>)
    d63e:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    d640:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d644:	493f      	ldr	r1, [pc, #252]	; (d744 <_pwm_init+0x1f4>)
    d646:	4613      	mov	r3, r2
    d648:	009b      	lsls	r3, r3, #2
    d64a:	4413      	add	r3, r2
    d64c:	009b      	lsls	r3, r3, #2
    d64e:	440b      	add	r3, r1
    d650:	3310      	adds	r3, #16
    d652:	681b      	ldr	r3, [r3, #0]
    d654:	461a      	mov	r2, r3
    d656:	2101      	movs	r1, #1
    d658:	6838      	ldr	r0, [r7, #0]
    d65a:	4b3e      	ldr	r3, [pc, #248]	; (d754 <_pwm_init+0x204>)
    d65c:	4798      	blx	r3
    d65e:	e031      	b.n	d6c4 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    d660:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d664:	4937      	ldr	r1, [pc, #220]	; (d744 <_pwm_init+0x1f4>)
    d666:	4613      	mov	r3, r2
    d668:	009b      	lsls	r3, r3, #2
    d66a:	4413      	add	r3, r2
    d66c:	009b      	lsls	r3, r3, #2
    d66e:	440b      	add	r3, r1
    d670:	3304      	adds	r3, #4
    d672:	681b      	ldr	r3, [r3, #0]
    d674:	f003 030c 	and.w	r3, r3, #12
    d678:	2b00      	cmp	r3, #0
    d67a:	d120      	bne.n	d6be <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    d67c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d680:	4930      	ldr	r1, [pc, #192]	; (d744 <_pwm_init+0x1f4>)
    d682:	4613      	mov	r3, r2
    d684:	009b      	lsls	r3, r3, #2
    d686:	4413      	add	r3, r2
    d688:	009b      	lsls	r3, r3, #2
    d68a:	440b      	add	r3, r1
    d68c:	330c      	adds	r3, #12
    d68e:	681b      	ldr	r3, [r3, #0]
    d690:	b29b      	uxth	r3, r3
    d692:	461a      	mov	r2, r3
    d694:	2100      	movs	r1, #0
    d696:	6838      	ldr	r0, [r7, #0]
    d698:	4b2f      	ldr	r3, [pc, #188]	; (d758 <_pwm_init+0x208>)
    d69a:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    d69c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d6a0:	4928      	ldr	r1, [pc, #160]	; (d744 <_pwm_init+0x1f4>)
    d6a2:	4613      	mov	r3, r2
    d6a4:	009b      	lsls	r3, r3, #2
    d6a6:	4413      	add	r3, r2
    d6a8:	009b      	lsls	r3, r3, #2
    d6aa:	440b      	add	r3, r1
    d6ac:	3310      	adds	r3, #16
    d6ae:	681b      	ldr	r3, [r3, #0]
    d6b0:	b29b      	uxth	r3, r3
    d6b2:	461a      	mov	r2, r3
    d6b4:	2101      	movs	r1, #1
    d6b6:	6838      	ldr	r0, [r7, #0]
    d6b8:	4b27      	ldr	r3, [pc, #156]	; (d758 <_pwm_init+0x208>)
    d6ba:	4798      	blx	r3
    d6bc:	e002      	b.n	d6c4 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    d6be:	f04f 33ff 	mov.w	r3, #4294967295
    d6c2:	e02e      	b.n	d722 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    d6c4:	6879      	ldr	r1, [r7, #4]
    d6c6:	6838      	ldr	r0, [r7, #0]
    d6c8:	4b24      	ldr	r3, [pc, #144]	; (d75c <_pwm_init+0x20c>)
    d6ca:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    d6cc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d6d0:	491c      	ldr	r1, [pc, #112]	; (d744 <_pwm_init+0x1f4>)
    d6d2:	4613      	mov	r3, r2
    d6d4:	009b      	lsls	r3, r3, #2
    d6d6:	4413      	add	r3, r2
    d6d8:	009b      	lsls	r3, r3, #2
    d6da:	440b      	add	r3, r1
    d6dc:	3302      	adds	r3, #2
    d6de:	f9b3 3000 	ldrsh.w	r3, [r3]
    d6e2:	4618      	mov	r0, r3
    d6e4:	4b1e      	ldr	r3, [pc, #120]	; (d760 <_pwm_init+0x210>)
    d6e6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    d6e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d6ec:	4915      	ldr	r1, [pc, #84]	; (d744 <_pwm_init+0x1f4>)
    d6ee:	4613      	mov	r3, r2
    d6f0:	009b      	lsls	r3, r3, #2
    d6f2:	4413      	add	r3, r2
    d6f4:	009b      	lsls	r3, r3, #2
    d6f6:	440b      	add	r3, r1
    d6f8:	3302      	adds	r3, #2
    d6fa:	f9b3 3000 	ldrsh.w	r3, [r3]
    d6fe:	4618      	mov	r0, r3
    d700:	4b18      	ldr	r3, [pc, #96]	; (d764 <_pwm_init+0x214>)
    d702:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    d704:	f997 200f 	ldrsb.w	r2, [r7, #15]
    d708:	490e      	ldr	r1, [pc, #56]	; (d744 <_pwm_init+0x1f4>)
    d70a:	4613      	mov	r3, r2
    d70c:	009b      	lsls	r3, r3, #2
    d70e:	4413      	add	r3, r2
    d710:	009b      	lsls	r3, r3, #2
    d712:	440b      	add	r3, r1
    d714:	3302      	adds	r3, #2
    d716:	f9b3 3000 	ldrsh.w	r3, [r3]
    d71a:	4618      	mov	r0, r3
    d71c:	4b12      	ldr	r3, [pc, #72]	; (d768 <_pwm_init+0x218>)
    d71e:	4798      	blx	r3

	return 0;
    d720:	2300      	movs	r3, #0
}
    d722:	4618      	mov	r0, r3
    d724:	3710      	adds	r7, #16
    d726:	46bd      	mov	sp, r7
    d728:	bd80      	pop	{r7, pc}
    d72a:	bf00      	nop
    d72c:	0000db31 	.word	0x0000db31
    d730:	0000cf15 	.word	0x0000cf15
    d734:	0000d0b5 	.word	0x0000d0b5
    d738:	0000d065 	.word	0x0000d065
    d73c:	0000cef1 	.word	0x0000cef1
    d740:	0000d0e5 	.word	0x0000d0e5
    d744:	20000144 	.word	0x20000144
    d748:	0000d145 	.word	0x0000d145
    d74c:	0000d109 	.word	0x0000d109
    d750:	0000d127 	.word	0x0000d127
    d754:	0000d245 	.word	0x0000d245
    d758:	0000d1e1 	.word	0x0000d1e1
    d75c:	0000db99 	.word	0x0000db99
    d760:	0000ce71 	.word	0x0000ce71
    d764:	0000ceb5 	.word	0x0000ceb5
    d768:	0000ce35 	.word	0x0000ce35

0000d76c <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    d76c:	b580      	push	{r7, lr}
    d76e:	b084      	sub	sp, #16
    d770:	af00      	add	r7, sp, #0
    d772:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d774:	687b      	ldr	r3, [r7, #4]
    d776:	68db      	ldr	r3, [r3, #12]
    d778:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    d77a:	68f8      	ldr	r0, [r7, #12]
    d77c:	4b10      	ldr	r3, [pc, #64]	; (d7c0 <_tc_timer_deinit+0x54>)
    d77e:	4798      	blx	r3
    d780:	4603      	mov	r3, r0
    d782:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    d784:	22f9      	movs	r2, #249	; 0xf9
    d786:	490f      	ldr	r1, [pc, #60]	; (d7c4 <_tc_timer_deinit+0x58>)
    d788:	2001      	movs	r0, #1
    d78a:	4b0f      	ldr	r3, [pc, #60]	; (d7c8 <_tc_timer_deinit+0x5c>)
    d78c:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    d78e:	f997 200b 	ldrsb.w	r2, [r7, #11]
    d792:	490e      	ldr	r1, [pc, #56]	; (d7cc <_tc_timer_deinit+0x60>)
    d794:	4613      	mov	r3, r2
    d796:	009b      	lsls	r3, r3, #2
    d798:	4413      	add	r3, r2
    d79a:	009b      	lsls	r3, r3, #2
    d79c:	440b      	add	r3, r1
    d79e:	3302      	adds	r3, #2
    d7a0:	f9b3 3000 	ldrsh.w	r3, [r3]
    d7a4:	4618      	mov	r0, r3
    d7a6:	4b0a      	ldr	r3, [pc, #40]	; (d7d0 <_tc_timer_deinit+0x64>)
    d7a8:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d7aa:	68f8      	ldr	r0, [r7, #12]
    d7ac:	4b09      	ldr	r3, [pc, #36]	; (d7d4 <_tc_timer_deinit+0x68>)
    d7ae:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    d7b0:	68f8      	ldr	r0, [r7, #12]
    d7b2:	4b09      	ldr	r3, [pc, #36]	; (d7d8 <_tc_timer_deinit+0x6c>)
    d7b4:	4798      	blx	r3
}
    d7b6:	bf00      	nop
    d7b8:	3710      	adds	r7, #16
    d7ba:	46bd      	mov	sp, r7
    d7bc:	bd80      	pop	{r7, pc}
    d7be:	bf00      	nop
    d7c0:	0000db31 	.word	0x0000db31
    d7c4:	00020d20 	.word	0x00020d20
    d7c8:	00008145 	.word	0x00008145
    d7cc:	20000144 	.word	0x20000144
    d7d0:	0000ce71 	.word	0x0000ce71
    d7d4:	0000d065 	.word	0x0000d065
    d7d8:	0000cfdd 	.word	0x0000cfdd

0000d7dc <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    d7dc:	b580      	push	{r7, lr}
    d7de:	b082      	sub	sp, #8
    d7e0:	af00      	add	r7, sp, #0
    d7e2:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    d7e4:	687b      	ldr	r3, [r7, #4]
    d7e6:	68db      	ldr	r3, [r3, #12]
    d7e8:	4618      	mov	r0, r3
    d7ea:	4b03      	ldr	r3, [pc, #12]	; (d7f8 <_tc_timer_start+0x1c>)
    d7ec:	4798      	blx	r3
}
    d7ee:	bf00      	nop
    d7f0:	3708      	adds	r7, #8
    d7f2:	46bd      	mov	sp, r7
    d7f4:	bd80      	pop	{r7, pc}
    d7f6:	bf00      	nop
    d7f8:	0000d005 	.word	0x0000d005

0000d7fc <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    d7fc:	b580      	push	{r7, lr}
    d7fe:	b082      	sub	sp, #8
    d800:	af00      	add	r7, sp, #0
    d802:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    d804:	687b      	ldr	r3, [r7, #4]
    d806:	691b      	ldr	r3, [r3, #16]
    d808:	4618      	mov	r0, r3
    d80a:	4b03      	ldr	r3, [pc, #12]	; (d818 <_pwm_enable+0x1c>)
    d80c:	4798      	blx	r3
}
    d80e:	bf00      	nop
    d810:	3708      	adds	r7, #8
    d812:	46bd      	mov	sp, r7
    d814:	bd80      	pop	{r7, pc}
    d816:	bf00      	nop
    d818:	0000d005 	.word	0x0000d005

0000d81c <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    d81c:	b580      	push	{r7, lr}
    d81e:	b082      	sub	sp, #8
    d820:	af00      	add	r7, sp, #0
    d822:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    d824:	687b      	ldr	r3, [r7, #4]
    d826:	68db      	ldr	r3, [r3, #12]
    d828:	4618      	mov	r0, r3
    d82a:	4b03      	ldr	r3, [pc, #12]	; (d838 <_tc_timer_stop+0x1c>)
    d82c:	4798      	blx	r3
}
    d82e:	bf00      	nop
    d830:	3708      	adds	r7, #8
    d832:	46bd      	mov	sp, r7
    d834:	bd80      	pop	{r7, pc}
    d836:	bf00      	nop
    d838:	0000d065 	.word	0x0000d065

0000d83c <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    d83c:	b580      	push	{r7, lr}
    d83e:	b084      	sub	sp, #16
    d840:	af00      	add	r7, sp, #0
    d842:	6078      	str	r0, [r7, #4]
    d844:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    d846:	687b      	ldr	r3, [r7, #4]
    d848:	68db      	ldr	r3, [r3, #12]
    d84a:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d84c:	68f8      	ldr	r0, [r7, #12]
    d84e:	4b14      	ldr	r3, [pc, #80]	; (d8a0 <_tc_timer_set_period+0x64>)
    d850:	4798      	blx	r3
    d852:	4603      	mov	r3, r0
    d854:	2b02      	cmp	r3, #2
    d856:	d105      	bne.n	d864 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    d858:	683a      	ldr	r2, [r7, #0]
    d85a:	2100      	movs	r1, #0
    d85c:	68f8      	ldr	r0, [r7, #12]
    d85e:	4b11      	ldr	r3, [pc, #68]	; (d8a4 <_tc_timer_set_period+0x68>)
    d860:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    d862:	e019      	b.n	d898 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d864:	68f8      	ldr	r0, [r7, #12]
    d866:	4b0e      	ldr	r3, [pc, #56]	; (d8a0 <_tc_timer_set_period+0x64>)
    d868:	4798      	blx	r3
    d86a:	4603      	mov	r3, r0
    d86c:	2b00      	cmp	r3, #0
    d86e:	d107      	bne.n	d880 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    d870:	683b      	ldr	r3, [r7, #0]
    d872:	b29b      	uxth	r3, r3
    d874:	461a      	mov	r2, r3
    d876:	2100      	movs	r1, #0
    d878:	68f8      	ldr	r0, [r7, #12]
    d87a:	4b0b      	ldr	r3, [pc, #44]	; (d8a8 <_tc_timer_set_period+0x6c>)
    d87c:	4798      	blx	r3
}
    d87e:	e00b      	b.n	d898 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d880:	68f8      	ldr	r0, [r7, #12]
    d882:	4b07      	ldr	r3, [pc, #28]	; (d8a0 <_tc_timer_set_period+0x64>)
    d884:	4798      	blx	r3
    d886:	4603      	mov	r3, r0
    d888:	2b01      	cmp	r3, #1
    d88a:	d105      	bne.n	d898 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    d88c:	683b      	ldr	r3, [r7, #0]
    d88e:	b2db      	uxtb	r3, r3
    d890:	4619      	mov	r1, r3
    d892:	68f8      	ldr	r0, [r7, #12]
    d894:	4b05      	ldr	r3, [pc, #20]	; (d8ac <_tc_timer_set_period+0x70>)
    d896:	4798      	blx	r3
}
    d898:	bf00      	nop
    d89a:	3710      	adds	r7, #16
    d89c:	46bd      	mov	sp, r7
    d89e:	bd80      	pop	{r7, pc}
    d8a0:	0000d08d 	.word	0x0000d08d
    d8a4:	0000d245 	.word	0x0000d245
    d8a8:	0000d1e1 	.word	0x0000d1e1
    d8ac:	0000d165 	.word	0x0000d165

0000d8b0 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    d8b0:	b580      	push	{r7, lr}
    d8b2:	b084      	sub	sp, #16
    d8b4:	af00      	add	r7, sp, #0
    d8b6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d8b8:	687b      	ldr	r3, [r7, #4]
    d8ba:	68db      	ldr	r3, [r3, #12]
    d8bc:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d8be:	68f8      	ldr	r0, [r7, #12]
    d8c0:	4b13      	ldr	r3, [pc, #76]	; (d910 <_tc_timer_get_period+0x60>)
    d8c2:	4798      	blx	r3
    d8c4:	4603      	mov	r3, r0
    d8c6:	2b02      	cmp	r3, #2
    d8c8:	d105      	bne.n	d8d6 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    d8ca:	2100      	movs	r1, #0
    d8cc:	68f8      	ldr	r0, [r7, #12]
    d8ce:	4b11      	ldr	r3, [pc, #68]	; (d914 <_tc_timer_get_period+0x64>)
    d8d0:	4798      	blx	r3
    d8d2:	4603      	mov	r3, r0
    d8d4:	e017      	b.n	d906 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d8d6:	68f8      	ldr	r0, [r7, #12]
    d8d8:	4b0d      	ldr	r3, [pc, #52]	; (d910 <_tc_timer_get_period+0x60>)
    d8da:	4798      	blx	r3
    d8dc:	4603      	mov	r3, r0
    d8de:	2b00      	cmp	r3, #0
    d8e0:	d105      	bne.n	d8ee <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    d8e2:	2100      	movs	r1, #0
    d8e4:	68f8      	ldr	r0, [r7, #12]
    d8e6:	4b0c      	ldr	r3, [pc, #48]	; (d918 <_tc_timer_get_period+0x68>)
    d8e8:	4798      	blx	r3
    d8ea:	4603      	mov	r3, r0
    d8ec:	e00b      	b.n	d906 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d8ee:	68f8      	ldr	r0, [r7, #12]
    d8f0:	4b07      	ldr	r3, [pc, #28]	; (d910 <_tc_timer_get_period+0x60>)
    d8f2:	4798      	blx	r3
    d8f4:	4603      	mov	r3, r0
    d8f6:	2b01      	cmp	r3, #1
    d8f8:	d104      	bne.n	d904 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    d8fa:	68f8      	ldr	r0, [r7, #12]
    d8fc:	4b07      	ldr	r3, [pc, #28]	; (d91c <_tc_timer_get_period+0x6c>)
    d8fe:	4798      	blx	r3
    d900:	4603      	mov	r3, r0
    d902:	e000      	b.n	d906 <_tc_timer_get_period+0x56>
	}

	return 0;
    d904:	2300      	movs	r3, #0
}
    d906:	4618      	mov	r0, r3
    d908:	3710      	adds	r7, #16
    d90a:	46bd      	mov	sp, r7
    d90c:	bd80      	pop	{r7, pc}
    d90e:	bf00      	nop
    d910:	0000d08d 	.word	0x0000d08d
    d914:	0000d275 	.word	0x0000d275
    d918:	0000d215 	.word	0x0000d215
    d91c:	0000d18d 	.word	0x0000d18d

0000d920 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    d920:	b580      	push	{r7, lr}
    d922:	b082      	sub	sp, #8
    d924:	af00      	add	r7, sp, #0
    d926:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    d928:	687b      	ldr	r3, [r7, #4]
    d92a:	68db      	ldr	r3, [r3, #12]
    d92c:	4618      	mov	r0, r3
    d92e:	4b03      	ldr	r3, [pc, #12]	; (d93c <_tc_timer_is_started+0x1c>)
    d930:	4798      	blx	r3
    d932:	4603      	mov	r3, r0
}
    d934:	4618      	mov	r0, r3
    d936:	3708      	adds	r7, #8
    d938:	46bd      	mov	sp, r7
    d93a:	bd80      	pop	{r7, pc}
    d93c:	0000d02d 	.word	0x0000d02d

0000d940 <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    d940:	b580      	push	{r7, lr}
    d942:	b082      	sub	sp, #8
    d944:	af00      	add	r7, sp, #0
    d946:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    d948:	687b      	ldr	r3, [r7, #4]
    d94a:	691b      	ldr	r3, [r3, #16]
    d94c:	4618      	mov	r0, r3
    d94e:	4b03      	ldr	r3, [pc, #12]	; (d95c <_pwm_is_enabled+0x1c>)
    d950:	4798      	blx	r3
    d952:	4603      	mov	r3, r0
}
    d954:	4618      	mov	r0, r3
    d956:	3708      	adds	r7, #8
    d958:	46bd      	mov	sp, r7
    d95a:	bd80      	pop	{r7, pc}
    d95c:	0000d02d 	.word	0x0000d02d

0000d960 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    d960:	b480      	push	{r7}
    d962:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    d964:	4b02      	ldr	r3, [pc, #8]	; (d970 <_tc_get_timer+0x10>)
}
    d966:	4618      	mov	r0, r3
    d968:	46bd      	mov	sp, r7
    d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d96e:	4770      	bx	lr
    d970:	200001bc 	.word	0x200001bc

0000d974 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    d974:	b480      	push	{r7}
    d976:	af00      	add	r7, sp, #0
	return NULL;
    d978:	2300      	movs	r3, #0
}
    d97a:	4618      	mov	r0, r3
    d97c:	46bd      	mov	sp, r7
    d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d982:	4770      	bx	lr

0000d984 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    d984:	b580      	push	{r7, lr}
    d986:	b084      	sub	sp, #16
    d988:	af00      	add	r7, sp, #0
    d98a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d98c:	687b      	ldr	r3, [r7, #4]
    d98e:	68db      	ldr	r3, [r3, #12]
    d990:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    d992:	68f8      	ldr	r0, [r7, #12]
    d994:	4b0e      	ldr	r3, [pc, #56]	; (d9d0 <_tc_timer_set_irq+0x4c>)
    d996:	4798      	blx	r3
    d998:	4603      	mov	r3, r0
    d99a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    d99c:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    d9a0:	490c      	ldr	r1, [pc, #48]	; (d9d4 <_tc_timer_set_irq+0x50>)
    d9a2:	2001      	movs	r0, #1
    d9a4:	4b0c      	ldr	r3, [pc, #48]	; (d9d8 <_tc_timer_set_irq+0x54>)
    d9a6:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    d9a8:	f997 200b 	ldrsb.w	r2, [r7, #11]
    d9ac:	490b      	ldr	r1, [pc, #44]	; (d9dc <_tc_timer_set_irq+0x58>)
    d9ae:	4613      	mov	r3, r2
    d9b0:	009b      	lsls	r3, r3, #2
    d9b2:	4413      	add	r3, r2
    d9b4:	009b      	lsls	r3, r3, #2
    d9b6:	440b      	add	r3, r1
    d9b8:	3302      	adds	r3, #2
    d9ba:	f9b3 3000 	ldrsh.w	r3, [r3]
    d9be:	b2db      	uxtb	r3, r3
    d9c0:	4618      	mov	r0, r3
    d9c2:	4b07      	ldr	r3, [pc, #28]	; (d9e0 <_tc_timer_set_irq+0x5c>)
    d9c4:	4798      	blx	r3
}
    d9c6:	bf00      	nop
    d9c8:	3710      	adds	r7, #16
    d9ca:	46bd      	mov	sp, r7
    d9cc:	bd80      	pop	{r7, pc}
    d9ce:	bf00      	nop
    d9d0:	0000db31 	.word	0x0000db31
    d9d4:	00020d20 	.word	0x00020d20
    d9d8:	00008145 	.word	0x00008145
    d9dc:	20000144 	.word	0x20000144
    d9e0:	00008991 	.word	0x00008991

0000d9e4 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    d9e4:	b580      	push	{r7, lr}
    d9e6:	b084      	sub	sp, #16
    d9e8:	af00      	add	r7, sp, #0
    d9ea:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d9ec:	687b      	ldr	r3, [r7, #4]
    d9ee:	68db      	ldr	r3, [r3, #12]
    d9f0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    d9f2:	68f8      	ldr	r0, [r7, #12]
    d9f4:	4b07      	ldr	r3, [pc, #28]	; (da14 <tc_interrupt_handler+0x30>)
    d9f6:	4798      	blx	r3
    d9f8:	4603      	mov	r3, r0
    d9fa:	2b00      	cmp	r3, #0
    d9fc:	d006      	beq.n	da0c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    d9fe:	68f8      	ldr	r0, [r7, #12]
    da00:	4b05      	ldr	r3, [pc, #20]	; (da18 <tc_interrupt_handler+0x34>)
    da02:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    da04:	687b      	ldr	r3, [r7, #4]
    da06:	681b      	ldr	r3, [r3, #0]
    da08:	6878      	ldr	r0, [r7, #4]
    da0a:	4798      	blx	r3
	}
}
    da0c:	bf00      	nop
    da0e:	3710      	adds	r7, #16
    da10:	46bd      	mov	sp, r7
    da12:	bd80      	pop	{r7, pc}
    da14:	0000cf3d 	.word	0x0000cf3d
    da18:	0000cf65 	.word	0x0000cf65

0000da1c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    da1c:	b580      	push	{r7, lr}
    da1e:	b084      	sub	sp, #16
    da20:	af00      	add	r7, sp, #0
    da22:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    da24:	687b      	ldr	r3, [r7, #4]
    da26:	691b      	ldr	r3, [r3, #16]
    da28:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    da2a:	68f8      	ldr	r0, [r7, #12]
    da2c:	4b12      	ldr	r3, [pc, #72]	; (da78 <tc_pwm_interrupt_handler+0x5c>)
    da2e:	4798      	blx	r3
    da30:	4603      	mov	r3, r0
    da32:	2b00      	cmp	r3, #0
    da34:	d00a      	beq.n	da4c <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    da36:	68f8      	ldr	r0, [r7, #12]
    da38:	4b10      	ldr	r3, [pc, #64]	; (da7c <tc_pwm_interrupt_handler+0x60>)
    da3a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    da3c:	687b      	ldr	r3, [r7, #4]
    da3e:	681b      	ldr	r3, [r3, #0]
    da40:	2b00      	cmp	r3, #0
    da42:	d003      	beq.n	da4c <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    da44:	687b      	ldr	r3, [r7, #4]
    da46:	681b      	ldr	r3, [r3, #0]
    da48:	6878      	ldr	r0, [r7, #4]
    da4a:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    da4c:	68f8      	ldr	r0, [r7, #12]
    da4e:	4b0c      	ldr	r3, [pc, #48]	; (da80 <tc_pwm_interrupt_handler+0x64>)
    da50:	4798      	blx	r3
    da52:	4603      	mov	r3, r0
    da54:	2b00      	cmp	r3, #0
    da56:	d00a      	beq.n	da6e <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    da58:	68f8      	ldr	r0, [r7, #12]
    da5a:	4b0a      	ldr	r3, [pc, #40]	; (da84 <tc_pwm_interrupt_handler+0x68>)
    da5c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    da5e:	687b      	ldr	r3, [r7, #4]
    da60:	685b      	ldr	r3, [r3, #4]
    da62:	2b00      	cmp	r3, #0
    da64:	d003      	beq.n	da6e <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    da66:	687b      	ldr	r3, [r7, #4]
    da68:	685b      	ldr	r3, [r3, #4]
    da6a:	6878      	ldr	r0, [r7, #4]
    da6c:	4798      	blx	r3
		}
	}
}
    da6e:	bf00      	nop
    da70:	3710      	adds	r7, #16
    da72:	46bd      	mov	sp, r7
    da74:	bd80      	pop	{r7, pc}
    da76:	bf00      	nop
    da78:	0000cf3d 	.word	0x0000cf3d
    da7c:	0000cf65 	.word	0x0000cf65
    da80:	0000cfb3 	.word	0x0000cfb3
    da84:	0000cf7f 	.word	0x0000cf7f

0000da88 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    da88:	b580      	push	{r7, lr}
    da8a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    da8c:	4b03      	ldr	r3, [pc, #12]	; (da9c <TC0_Handler+0x14>)
    da8e:	681b      	ldr	r3, [r3, #0]
    da90:	4618      	mov	r0, r3
    da92:	4b03      	ldr	r3, [pc, #12]	; (daa0 <TC0_Handler+0x18>)
    da94:	4798      	blx	r3
}
    da96:	bf00      	nop
    da98:	bd80      	pop	{r7, pc}
    da9a:	bf00      	nop
    da9c:	200089f8 	.word	0x200089f8
    daa0:	0000d9e5 	.word	0x0000d9e5

0000daa4 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    daa4:	b580      	push	{r7, lr}
    daa6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    daa8:	4b03      	ldr	r3, [pc, #12]	; (dab8 <TC2_Handler+0x14>)
    daaa:	681b      	ldr	r3, [r3, #0]
    daac:	4618      	mov	r0, r3
    daae:	4b03      	ldr	r3, [pc, #12]	; (dabc <TC2_Handler+0x18>)
    dab0:	4798      	blx	r3
}
    dab2:	bf00      	nop
    dab4:	bd80      	pop	{r7, pc}
    dab6:	bf00      	nop
    dab8:	200089fc 	.word	0x200089fc
    dabc:	0000d9e5 	.word	0x0000d9e5

0000dac0 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    dac0:	b580      	push	{r7, lr}
    dac2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    dac4:	4b03      	ldr	r3, [pc, #12]	; (dad4 <TC4_Handler+0x14>)
    dac6:	681b      	ldr	r3, [r3, #0]
    dac8:	4618      	mov	r0, r3
    daca:	4b03      	ldr	r3, [pc, #12]	; (dad8 <TC4_Handler+0x18>)
    dacc:	4798      	blx	r3
}
    dace:	bf00      	nop
    dad0:	bd80      	pop	{r7, pc}
    dad2:	bf00      	nop
    dad4:	20008a00 	.word	0x20008a00
    dad8:	0000d9e5 	.word	0x0000d9e5

0000dadc <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    dadc:	b580      	push	{r7, lr}
    dade:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    dae0:	4b03      	ldr	r3, [pc, #12]	; (daf0 <TC5_Handler+0x14>)
    dae2:	681b      	ldr	r3, [r3, #0]
    dae4:	4618      	mov	r0, r3
    dae6:	4b03      	ldr	r3, [pc, #12]	; (daf4 <TC5_Handler+0x18>)
    dae8:	4798      	blx	r3
}
    daea:	bf00      	nop
    daec:	bd80      	pop	{r7, pc}
    daee:	bf00      	nop
    daf0:	20008a04 	.word	0x20008a04
    daf4:	0000d9e5 	.word	0x0000d9e5

0000daf8 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    daf8:	b580      	push	{r7, lr}
    dafa:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    dafc:	4b03      	ldr	r3, [pc, #12]	; (db0c <TC6_Handler+0x14>)
    dafe:	681b      	ldr	r3, [r3, #0]
    db00:	4618      	mov	r0, r3
    db02:	4b03      	ldr	r3, [pc, #12]	; (db10 <TC6_Handler+0x18>)
    db04:	4798      	blx	r3
}
    db06:	bf00      	nop
    db08:	bd80      	pop	{r7, pc}
    db0a:	bf00      	nop
    db0c:	20008a08 	.word	0x20008a08
    db10:	0000d9e5 	.word	0x0000d9e5

0000db14 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    db14:	b580      	push	{r7, lr}
    db16:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    db18:	4b03      	ldr	r3, [pc, #12]	; (db28 <TC7_Handler+0x14>)
    db1a:	681b      	ldr	r3, [r3, #0]
    db1c:	4618      	mov	r0, r3
    db1e:	4b03      	ldr	r3, [pc, #12]	; (db2c <TC7_Handler+0x18>)
    db20:	4798      	blx	r3
}
    db22:	bf00      	nop
    db24:	bd80      	pop	{r7, pc}
    db26:	bf00      	nop
    db28:	20008a0c 	.word	0x20008a0c
    db2c:	0000da1d 	.word	0x0000da1d

0000db30 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    db30:	b580      	push	{r7, lr}
    db32:	b084      	sub	sp, #16
    db34:	af00      	add	r7, sp, #0
    db36:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    db38:	6878      	ldr	r0, [r7, #4]
    db3a:	4b13      	ldr	r3, [pc, #76]	; (db88 <get_tc_index+0x58>)
    db3c:	4798      	blx	r3
    db3e:	4603      	mov	r3, r0
    db40:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    db42:	2300      	movs	r3, #0
    db44:	73fb      	strb	r3, [r7, #15]
    db46:	e010      	b.n	db6a <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    db48:	7bfa      	ldrb	r2, [r7, #15]
    db4a:	4910      	ldr	r1, [pc, #64]	; (db8c <get_tc_index+0x5c>)
    db4c:	4613      	mov	r3, r2
    db4e:	009b      	lsls	r3, r3, #2
    db50:	4413      	add	r3, r2
    db52:	009b      	lsls	r3, r3, #2
    db54:	440b      	add	r3, r1
    db56:	781b      	ldrb	r3, [r3, #0]
    db58:	7bba      	ldrb	r2, [r7, #14]
    db5a:	429a      	cmp	r2, r3
    db5c:	d102      	bne.n	db64 <get_tc_index+0x34>
			return i;
    db5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    db62:	e00d      	b.n	db80 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    db64:	7bfb      	ldrb	r3, [r7, #15]
    db66:	3301      	adds	r3, #1
    db68:	73fb      	strb	r3, [r7, #15]
    db6a:	7bfb      	ldrb	r3, [r7, #15]
    db6c:	2b05      	cmp	r3, #5
    db6e:	d9eb      	bls.n	db48 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    db70:	f240 221d 	movw	r2, #541	; 0x21d
    db74:	4906      	ldr	r1, [pc, #24]	; (db90 <get_tc_index+0x60>)
    db76:	2000      	movs	r0, #0
    db78:	4b06      	ldr	r3, [pc, #24]	; (db94 <get_tc_index+0x64>)
    db7a:	4798      	blx	r3
	return -1;
    db7c:	f04f 33ff 	mov.w	r3, #4294967295
}
    db80:	4618      	mov	r0, r3
    db82:	3710      	adds	r7, #16
    db84:	46bd      	mov	sp, r7
    db86:	bd80      	pop	{r7, pc}
    db88:	0000dc35 	.word	0x0000dc35
    db8c:	20000144 	.word	0x20000144
    db90:	00020d20 	.word	0x00020d20
    db94:	00008145 	.word	0x00008145

0000db98 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    db98:	b480      	push	{r7}
    db9a:	b083      	sub	sp, #12
    db9c:	af00      	add	r7, sp, #0
    db9e:	6078      	str	r0, [r7, #4]
    dba0:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    dba2:	687b      	ldr	r3, [r7, #4]
    dba4:	4a17      	ldr	r2, [pc, #92]	; (dc04 <_tc_init_irq_param+0x6c>)
    dba6:	4293      	cmp	r3, r2
    dba8:	d102      	bne.n	dbb0 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    dbaa:	4a17      	ldr	r2, [pc, #92]	; (dc08 <_tc_init_irq_param+0x70>)
    dbac:	683b      	ldr	r3, [r7, #0]
    dbae:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    dbb0:	687b      	ldr	r3, [r7, #4]
    dbb2:	4a16      	ldr	r2, [pc, #88]	; (dc0c <_tc_init_irq_param+0x74>)
    dbb4:	4293      	cmp	r3, r2
    dbb6:	d102      	bne.n	dbbe <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    dbb8:	4a15      	ldr	r2, [pc, #84]	; (dc10 <_tc_init_irq_param+0x78>)
    dbba:	683b      	ldr	r3, [r7, #0]
    dbbc:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    dbbe:	687b      	ldr	r3, [r7, #4]
    dbc0:	4a14      	ldr	r2, [pc, #80]	; (dc14 <_tc_init_irq_param+0x7c>)
    dbc2:	4293      	cmp	r3, r2
    dbc4:	d102      	bne.n	dbcc <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    dbc6:	4a14      	ldr	r2, [pc, #80]	; (dc18 <_tc_init_irq_param+0x80>)
    dbc8:	683b      	ldr	r3, [r7, #0]
    dbca:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    dbcc:	687b      	ldr	r3, [r7, #4]
    dbce:	4a13      	ldr	r2, [pc, #76]	; (dc1c <_tc_init_irq_param+0x84>)
    dbd0:	4293      	cmp	r3, r2
    dbd2:	d102      	bne.n	dbda <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    dbd4:	4a12      	ldr	r2, [pc, #72]	; (dc20 <_tc_init_irq_param+0x88>)
    dbd6:	683b      	ldr	r3, [r7, #0]
    dbd8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    dbda:	687b      	ldr	r3, [r7, #4]
    dbdc:	4a11      	ldr	r2, [pc, #68]	; (dc24 <_tc_init_irq_param+0x8c>)
    dbde:	4293      	cmp	r3, r2
    dbe0:	d102      	bne.n	dbe8 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    dbe2:	4a11      	ldr	r2, [pc, #68]	; (dc28 <_tc_init_irq_param+0x90>)
    dbe4:	683b      	ldr	r3, [r7, #0]
    dbe6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    dbe8:	687b      	ldr	r3, [r7, #4]
    dbea:	4a10      	ldr	r2, [pc, #64]	; (dc2c <_tc_init_irq_param+0x94>)
    dbec:	4293      	cmp	r3, r2
    dbee:	d102      	bne.n	dbf6 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    dbf0:	4a0f      	ldr	r2, [pc, #60]	; (dc30 <_tc_init_irq_param+0x98>)
    dbf2:	683b      	ldr	r3, [r7, #0]
    dbf4:	6013      	str	r3, [r2, #0]
	}
}
    dbf6:	bf00      	nop
    dbf8:	370c      	adds	r7, #12
    dbfa:	46bd      	mov	sp, r7
    dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc00:	4770      	bx	lr
    dc02:	bf00      	nop
    dc04:	40003800 	.word	0x40003800
    dc08:	200089f8 	.word	0x200089f8
    dc0c:	4101a000 	.word	0x4101a000
    dc10:	200089fc 	.word	0x200089fc
    dc14:	42001400 	.word	0x42001400
    dc18:	20008a00 	.word	0x20008a00
    dc1c:	42001800 	.word	0x42001800
    dc20:	20008a04 	.word	0x20008a04
    dc24:	43001400 	.word	0x43001400
    dc28:	20008a08 	.word	0x20008a08
    dc2c:	43001800 	.word	0x43001800
    dc30:	20008a0c 	.word	0x20008a0c

0000dc34 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    dc34:	b4b0      	push	{r4, r5, r7}
    dc36:	b08d      	sub	sp, #52	; 0x34
    dc38:	af00      	add	r7, sp, #0
    dc3a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    dc3c:	4b13      	ldr	r3, [pc, #76]	; (dc8c <_get_hardware_offset+0x58>)
    dc3e:	f107 040c 	add.w	r4, r7, #12
    dc42:	461d      	mov	r5, r3
    dc44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dc46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dc48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    dc4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    dc50:	2300      	movs	r3, #0
    dc52:	62fb      	str	r3, [r7, #44]	; 0x2c
    dc54:	e010      	b.n	dc78 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    dc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc58:	009b      	lsls	r3, r3, #2
    dc5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    dc5e:	4413      	add	r3, r2
    dc60:	f853 3c24 	ldr.w	r3, [r3, #-36]
    dc64:	461a      	mov	r2, r3
    dc66:	687b      	ldr	r3, [r7, #4]
    dc68:	429a      	cmp	r2, r3
    dc6a:	d102      	bne.n	dc72 <_get_hardware_offset+0x3e>
			return i;
    dc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc6e:	b2db      	uxtb	r3, r3
    dc70:	e006      	b.n	dc80 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    dc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc74:	3301      	adds	r3, #1
    dc76:	62fb      	str	r3, [r7, #44]	; 0x2c
    dc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc7a:	2b07      	cmp	r3, #7
    dc7c:	d9eb      	bls.n	dc56 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    dc7e:	2300      	movs	r3, #0
}
    dc80:	4618      	mov	r0, r3
    dc82:	3734      	adds	r7, #52	; 0x34
    dc84:	46bd      	mov	sp, r7
    dc86:	bcb0      	pop	{r4, r5, r7}
    dc88:	4770      	bx	lr
    dc8a:	bf00      	nop
    dc8c:	00020d34 	.word	0x00020d34

0000dc90 <__NVIC_EnableIRQ>:
{
    dc90:	b480      	push	{r7}
    dc92:	b083      	sub	sp, #12
    dc94:	af00      	add	r7, sp, #0
    dc96:	4603      	mov	r3, r0
    dc98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    dc9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    dc9e:	2b00      	cmp	r3, #0
    dca0:	db0b      	blt.n	dcba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dca2:	4909      	ldr	r1, [pc, #36]	; (dcc8 <__NVIC_EnableIRQ+0x38>)
    dca4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    dca8:	095b      	lsrs	r3, r3, #5
    dcaa:	88fa      	ldrh	r2, [r7, #6]
    dcac:	f002 021f 	and.w	r2, r2, #31
    dcb0:	2001      	movs	r0, #1
    dcb2:	fa00 f202 	lsl.w	r2, r0, r2
    dcb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dcba:	bf00      	nop
    dcbc:	370c      	adds	r7, #12
    dcbe:	46bd      	mov	sp, r7
    dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    dcc4:	4770      	bx	lr
    dcc6:	bf00      	nop
    dcc8:	e000e100 	.word	0xe000e100

0000dccc <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    dccc:	b480      	push	{r7}
    dcce:	b087      	sub	sp, #28
    dcd0:	af00      	add	r7, sp, #0
    dcd2:	60f8      	str	r0, [r7, #12]
    dcd4:	460b      	mov	r3, r1
    dcd6:	607a      	str	r2, [r7, #4]
    dcd8:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    dcda:	7afa      	ldrb	r2, [r7, #11]
    dcdc:	68f9      	ldr	r1, [r7, #12]
    dcde:	4613      	mov	r3, r2
    dce0:	009b      	lsls	r3, r3, #2
    dce2:	4413      	add	r3, r2
    dce4:	009b      	lsls	r3, r3, #2
    dce6:	440b      	add	r3, r1
    dce8:	3340      	adds	r3, #64	; 0x40
    dcea:	681b      	ldr	r3, [r3, #0]
    dcec:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    dcee:	697a      	ldr	r2, [r7, #20]
    dcf0:	687b      	ldr	r3, [r7, #4]
    dcf2:	4013      	ands	r3, r2
    dcf4:	617b      	str	r3, [r7, #20]
	return tmp;
    dcf6:	697b      	ldr	r3, [r7, #20]
}
    dcf8:	4618      	mov	r0, r3
    dcfa:	371c      	adds	r7, #28
    dcfc:	46bd      	mov	sp, r7
    dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd02:	4770      	bx	lr

0000dd04 <hri_oscctrl_get_STATUS_reg>:
{
    dd04:	b480      	push	{r7}
    dd06:	b085      	sub	sp, #20
    dd08:	af00      	add	r7, sp, #0
    dd0a:	6078      	str	r0, [r7, #4]
    dd0c:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    dd0e:	687b      	ldr	r3, [r7, #4]
    dd10:	691b      	ldr	r3, [r3, #16]
    dd12:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    dd14:	68fa      	ldr	r2, [r7, #12]
    dd16:	683b      	ldr	r3, [r7, #0]
    dd18:	4013      	ands	r3, r2
    dd1a:	60fb      	str	r3, [r7, #12]
	return tmp;
    dd1c:	68fb      	ldr	r3, [r7, #12]
}
    dd1e:	4618      	mov	r0, r3
    dd20:	3714      	adds	r7, #20
    dd22:	46bd      	mov	sp, r7
    dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd28:	4770      	bx	lr

0000dd2a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    dd2a:	b480      	push	{r7}
    dd2c:	b085      	sub	sp, #20
    dd2e:	af00      	add	r7, sp, #0
    dd30:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    dd32:	687b      	ldr	r3, [r7, #4]
    dd34:	f893 3020 	ldrb.w	r3, [r3, #32]
    dd38:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    dd3a:	7bfb      	ldrb	r3, [r7, #15]
    dd3c:	f003 0301 	and.w	r3, r3, #1
    dd40:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    dd42:	7bfb      	ldrb	r3, [r7, #15]
    dd44:	2b00      	cmp	r3, #0
    dd46:	bf14      	ite	ne
    dd48:	2301      	movne	r3, #1
    dd4a:	2300      	moveq	r3, #0
    dd4c:	b2db      	uxtb	r3, r3
}
    dd4e:	4618      	mov	r0, r3
    dd50:	3714      	adds	r7, #20
    dd52:	46bd      	mov	sp, r7
    dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd58:	4770      	bx	lr

0000dd5a <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    dd5a:	b480      	push	{r7}
    dd5c:	b083      	sub	sp, #12
    dd5e:	af00      	add	r7, sp, #0
    dd60:	6078      	str	r0, [r7, #4]
    dd62:	460b      	mov	r3, r1
    dd64:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    dd66:	bf00      	nop
    dd68:	687b      	ldr	r3, [r7, #4]
    dd6a:	789b      	ldrb	r3, [r3, #2]
    dd6c:	b2da      	uxtb	r2, r3
    dd6e:	78fb      	ldrb	r3, [r7, #3]
    dd70:	4013      	ands	r3, r2
    dd72:	b2db      	uxtb	r3, r3
    dd74:	2b00      	cmp	r3, #0
    dd76:	d1f7      	bne.n	dd68 <hri_usb_wait_for_sync+0xe>
	};
}
    dd78:	bf00      	nop
    dd7a:	370c      	adds	r7, #12
    dd7c:	46bd      	mov	sp, r7
    dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd82:	4770      	bx	lr

0000dd84 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    dd84:	b480      	push	{r7}
    dd86:	b083      	sub	sp, #12
    dd88:	af00      	add	r7, sp, #0
    dd8a:	6078      	str	r0, [r7, #4]
    dd8c:	460b      	mov	r3, r1
    dd8e:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    dd90:	687b      	ldr	r3, [r7, #4]
    dd92:	789b      	ldrb	r3, [r3, #2]
    dd94:	b2da      	uxtb	r2, r3
    dd96:	78fb      	ldrb	r3, [r7, #3]
    dd98:	4013      	ands	r3, r2
    dd9a:	b2db      	uxtb	r3, r3
    dd9c:	2b00      	cmp	r3, #0
    dd9e:	bf14      	ite	ne
    dda0:	2301      	movne	r3, #1
    dda2:	2300      	moveq	r3, #0
    dda4:	b2db      	uxtb	r3, r3
}
    dda6:	4618      	mov	r0, r3
    dda8:	370c      	adds	r7, #12
    ddaa:	46bd      	mov	sp, r7
    ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
    ddb0:	4770      	bx	lr

0000ddb2 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    ddb2:	b480      	push	{r7}
    ddb4:	b085      	sub	sp, #20
    ddb6:	af00      	add	r7, sp, #0
    ddb8:	6078      	str	r0, [r7, #4]
    ddba:	460b      	mov	r3, r1
    ddbc:	70fb      	strb	r3, [r7, #3]
    ddbe:	4613      	mov	r3, r2
    ddc0:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    ddc2:	78fb      	ldrb	r3, [r7, #3]
    ddc4:	687a      	ldr	r2, [r7, #4]
    ddc6:	3308      	adds	r3, #8
    ddc8:	015b      	lsls	r3, r3, #5
    ddca:	4413      	add	r3, r2
    ddcc:	3307      	adds	r3, #7
    ddce:	781b      	ldrb	r3, [r3, #0]
    ddd0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    ddd2:	7bfa      	ldrb	r2, [r7, #15]
    ddd4:	78bb      	ldrb	r3, [r7, #2]
    ddd6:	4013      	ands	r3, r2
    ddd8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    ddda:	7bfb      	ldrb	r3, [r7, #15]
}
    dddc:	4618      	mov	r0, r3
    ddde:	3714      	adds	r7, #20
    dde0:	46bd      	mov	sp, r7
    dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
    dde6:	4770      	bx	lr

0000dde8 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    dde8:	b480      	push	{r7}
    ddea:	b083      	sub	sp, #12
    ddec:	af00      	add	r7, sp, #0
    ddee:	6078      	str	r0, [r7, #4]
    ddf0:	460b      	mov	r3, r1
    ddf2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    ddf4:	78fb      	ldrb	r3, [r7, #3]
    ddf6:	687a      	ldr	r2, [r7, #4]
    ddf8:	3308      	adds	r3, #8
    ddfa:	015b      	lsls	r3, r3, #5
    ddfc:	4413      	add	r3, r2
    ddfe:	3307      	adds	r3, #7
    de00:	781b      	ldrb	r3, [r3, #0]
    de02:	b2db      	uxtb	r3, r3
}
    de04:	4618      	mov	r0, r3
    de06:	370c      	adds	r7, #12
    de08:	46bd      	mov	sp, r7
    de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    de0e:	4770      	bx	lr

0000de10 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    de10:	b480      	push	{r7}
    de12:	b083      	sub	sp, #12
    de14:	af00      	add	r7, sp, #0
    de16:	6078      	str	r0, [r7, #4]
    de18:	460b      	mov	r3, r1
    de1a:	70fb      	strb	r3, [r7, #3]
    de1c:	4613      	mov	r3, r2
    de1e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    de20:	78fb      	ldrb	r3, [r7, #3]
    de22:	687a      	ldr	r2, [r7, #4]
    de24:	3308      	adds	r3, #8
    de26:	015b      	lsls	r3, r3, #5
    de28:	4413      	add	r3, r2
    de2a:	3307      	adds	r3, #7
    de2c:	78ba      	ldrb	r2, [r7, #2]
    de2e:	701a      	strb	r2, [r3, #0]
}
    de30:	bf00      	nop
    de32:	370c      	adds	r7, #12
    de34:	46bd      	mov	sp, r7
    de36:	f85d 7b04 	ldr.w	r7, [sp], #4
    de3a:	4770      	bx	lr

0000de3c <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    de3c:	b480      	push	{r7}
    de3e:	b083      	sub	sp, #12
    de40:	af00      	add	r7, sp, #0
    de42:	6078      	str	r0, [r7, #4]
    de44:	460b      	mov	r3, r1
    de46:	70fb      	strb	r3, [r7, #3]
    de48:	4613      	mov	r3, r2
    de4a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    de4c:	78fb      	ldrb	r3, [r7, #3]
    de4e:	687a      	ldr	r2, [r7, #4]
    de50:	3308      	adds	r3, #8
    de52:	015b      	lsls	r3, r3, #5
    de54:	4413      	add	r3, r2
    de56:	3305      	adds	r3, #5
    de58:	78ba      	ldrb	r2, [r7, #2]
    de5a:	701a      	strb	r2, [r3, #0]
}
    de5c:	bf00      	nop
    de5e:	370c      	adds	r7, #12
    de60:	46bd      	mov	sp, r7
    de62:	f85d 7b04 	ldr.w	r7, [sp], #4
    de66:	4770      	bx	lr

0000de68 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    de68:	b480      	push	{r7}
    de6a:	b083      	sub	sp, #12
    de6c:	af00      	add	r7, sp, #0
    de6e:	6078      	str	r0, [r7, #4]
    de70:	460b      	mov	r3, r1
    de72:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    de74:	78fb      	ldrb	r3, [r7, #3]
    de76:	687a      	ldr	r2, [r7, #4]
    de78:	3308      	adds	r3, #8
    de7a:	015b      	lsls	r3, r3, #5
    de7c:	4413      	add	r3, r2
    de7e:	3306      	adds	r3, #6
    de80:	781b      	ldrb	r3, [r3, #0]
    de82:	b2db      	uxtb	r3, r3
}
    de84:	4618      	mov	r0, r3
    de86:	370c      	adds	r7, #12
    de88:	46bd      	mov	sp, r7
    de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    de8e:	4770      	bx	lr

0000de90 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    de90:	b480      	push	{r7}
    de92:	b083      	sub	sp, #12
    de94:	af00      	add	r7, sp, #0
    de96:	6078      	str	r0, [r7, #4]
    de98:	460b      	mov	r3, r1
    de9a:	70fb      	strb	r3, [r7, #3]
    de9c:	4613      	mov	r3, r2
    de9e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    dea0:	78fb      	ldrb	r3, [r7, #3]
    dea2:	687a      	ldr	r2, [r7, #4]
    dea4:	3308      	adds	r3, #8
    dea6:	015b      	lsls	r3, r3, #5
    dea8:	4413      	add	r3, r2
    deaa:	3304      	adds	r3, #4
    deac:	78ba      	ldrb	r2, [r7, #2]
    deae:	701a      	strb	r2, [r3, #0]
}
    deb0:	bf00      	nop
    deb2:	370c      	adds	r7, #12
    deb4:	46bd      	mov	sp, r7
    deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    deba:	4770      	bx	lr

0000debc <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    debc:	b480      	push	{r7}
    debe:	b083      	sub	sp, #12
    dec0:	af00      	add	r7, sp, #0
    dec2:	6078      	str	r0, [r7, #4]
    dec4:	460b      	mov	r3, r1
    dec6:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    dec8:	78fb      	ldrb	r3, [r7, #3]
    deca:	687a      	ldr	r2, [r7, #4]
    decc:	015b      	lsls	r3, r3, #5
    dece:	4413      	add	r3, r2
    ded0:	f503 7384 	add.w	r3, r3, #264	; 0x108
    ded4:	2210      	movs	r2, #16
    ded6:	701a      	strb	r2, [r3, #0]
}
    ded8:	bf00      	nop
    deda:	370c      	adds	r7, #12
    dedc:	46bd      	mov	sp, r7
    dede:	f85d 7b04 	ldr.w	r7, [sp], #4
    dee2:	4770      	bx	lr

0000dee4 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    dee4:	b480      	push	{r7}
    dee6:	b083      	sub	sp, #12
    dee8:	af00      	add	r7, sp, #0
    deea:	6078      	str	r0, [r7, #4]
    deec:	460b      	mov	r3, r1
    deee:	70fb      	strb	r3, [r7, #3]
    def0:	4613      	mov	r3, r2
    def2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    def4:	78fb      	ldrb	r3, [r7, #3]
    def6:	687a      	ldr	r2, [r7, #4]
    def8:	015b      	lsls	r3, r3, #5
    defa:	4413      	add	r3, r2
    defc:	f203 1309 	addw	r3, r3, #265	; 0x109
    df00:	78ba      	ldrb	r2, [r7, #2]
    df02:	701a      	strb	r2, [r3, #0]
}
    df04:	bf00      	nop
    df06:	370c      	adds	r7, #12
    df08:	46bd      	mov	sp, r7
    df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    df0e:	4770      	bx	lr

0000df10 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    df10:	b480      	push	{r7}
    df12:	b083      	sub	sp, #12
    df14:	af00      	add	r7, sp, #0
    df16:	6078      	str	r0, [r7, #4]
    df18:	460b      	mov	r3, r1
    df1a:	70fb      	strb	r3, [r7, #3]
    df1c:	4613      	mov	r3, r2
    df1e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    df20:	78fb      	ldrb	r3, [r7, #3]
    df22:	687a      	ldr	r2, [r7, #4]
    df24:	015b      	lsls	r3, r3, #5
    df26:	4413      	add	r3, r2
    df28:	f503 7384 	add.w	r3, r3, #264	; 0x108
    df2c:	78ba      	ldrb	r2, [r7, #2]
    df2e:	701a      	strb	r2, [r3, #0]
}
    df30:	bf00      	nop
    df32:	370c      	adds	r7, #12
    df34:	46bd      	mov	sp, r7
    df36:	f85d 7b04 	ldr.w	r7, [sp], #4
    df3a:	4770      	bx	lr

0000df3c <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    df3c:	b480      	push	{r7}
    df3e:	b085      	sub	sp, #20
    df40:	af00      	add	r7, sp, #0
    df42:	6078      	str	r0, [r7, #4]
    df44:	460b      	mov	r3, r1
    df46:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    df48:	78fb      	ldrb	r3, [r7, #3]
    df4a:	687a      	ldr	r2, [r7, #4]
    df4c:	3308      	adds	r3, #8
    df4e:	015b      	lsls	r3, r3, #5
    df50:	4413      	add	r3, r2
    df52:	781b      	ldrb	r3, [r3, #0]
    df54:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    df56:	7bfb      	ldrb	r3, [r7, #15]
    df58:	f003 0307 	and.w	r3, r3, #7
    df5c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    df5e:	7bfb      	ldrb	r3, [r7, #15]
}
    df60:	4618      	mov	r0, r3
    df62:	3714      	adds	r7, #20
    df64:	46bd      	mov	sp, r7
    df66:	f85d 7b04 	ldr.w	r7, [sp], #4
    df6a:	4770      	bx	lr

0000df6c <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    df6c:	b480      	push	{r7}
    df6e:	b085      	sub	sp, #20
    df70:	af00      	add	r7, sp, #0
    df72:	6078      	str	r0, [r7, #4]
    df74:	460b      	mov	r3, r1
    df76:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    df78:	78fb      	ldrb	r3, [r7, #3]
    df7a:	687a      	ldr	r2, [r7, #4]
    df7c:	3308      	adds	r3, #8
    df7e:	015b      	lsls	r3, r3, #5
    df80:	4413      	add	r3, r2
    df82:	781b      	ldrb	r3, [r3, #0]
    df84:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    df86:	7bfb      	ldrb	r3, [r7, #15]
    df88:	091b      	lsrs	r3, r3, #4
    df8a:	b2db      	uxtb	r3, r3
    df8c:	f003 0307 	and.w	r3, r3, #7
    df90:	73fb      	strb	r3, [r7, #15]
	return tmp;
    df92:	7bfb      	ldrb	r3, [r7, #15]
}
    df94:	4618      	mov	r0, r3
    df96:	3714      	adds	r7, #20
    df98:	46bd      	mov	sp, r7
    df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    df9e:	4770      	bx	lr

0000dfa0 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    dfa0:	b480      	push	{r7}
    dfa2:	b083      	sub	sp, #12
    dfa4:	af00      	add	r7, sp, #0
    dfa6:	6078      	str	r0, [r7, #4]
    dfa8:	460b      	mov	r3, r1
    dfaa:	70fb      	strb	r3, [r7, #3]
    dfac:	4613      	mov	r3, r2
    dfae:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    dfb0:	78fb      	ldrb	r3, [r7, #3]
    dfb2:	687a      	ldr	r2, [r7, #4]
    dfb4:	3308      	adds	r3, #8
    dfb6:	015b      	lsls	r3, r3, #5
    dfb8:	4413      	add	r3, r2
    dfba:	78ba      	ldrb	r2, [r7, #2]
    dfbc:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    dfbe:	bf00      	nop
    dfc0:	370c      	adds	r7, #12
    dfc2:	46bd      	mov	sp, r7
    dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfc8:	4770      	bx	lr

0000dfca <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    dfca:	b480      	push	{r7}
    dfcc:	b083      	sub	sp, #12
    dfce:	af00      	add	r7, sp, #0
    dfd0:	6078      	str	r0, [r7, #4]
    dfd2:	460b      	mov	r3, r1
    dfd4:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    dfd6:	78fb      	ldrb	r3, [r7, #3]
    dfd8:	687a      	ldr	r2, [r7, #4]
    dfda:	3308      	adds	r3, #8
    dfdc:	015b      	lsls	r3, r3, #5
    dfde:	4413      	add	r3, r2
    dfe0:	781b      	ldrb	r3, [r3, #0]
    dfe2:	b2db      	uxtb	r3, r3
}
    dfe4:	4618      	mov	r0, r3
    dfe6:	370c      	adds	r7, #12
    dfe8:	46bd      	mov	sp, r7
    dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfee:	4770      	bx	lr

0000dff0 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    dff0:	b480      	push	{r7}
    dff2:	b083      	sub	sp, #12
    dff4:	af00      	add	r7, sp, #0
    dff6:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    dff8:	687b      	ldr	r3, [r7, #4]
    dffa:	8b9b      	ldrh	r3, [r3, #28]
    dffc:	b29b      	uxth	r3, r3
}
    dffe:	4618      	mov	r0, r3
    e000:	370c      	adds	r7, #12
    e002:	46bd      	mov	sp, r7
    e004:	f85d 7b04 	ldr.w	r7, [sp], #4
    e008:	4770      	bx	lr

0000e00a <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    e00a:	b480      	push	{r7}
    e00c:	b083      	sub	sp, #12
    e00e:	af00      	add	r7, sp, #0
    e010:	6078      	str	r0, [r7, #4]
    e012:	460b      	mov	r3, r1
    e014:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    e016:	687b      	ldr	r3, [r7, #4]
    e018:	887a      	ldrh	r2, [r7, #2]
    e01a:	839a      	strh	r2, [r3, #28]
}
    e01c:	bf00      	nop
    e01e:	370c      	adds	r7, #12
    e020:	46bd      	mov	sp, r7
    e022:	f85d 7b04 	ldr.w	r7, [sp], #4
    e026:	4770      	bx	lr

0000e028 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    e028:	b480      	push	{r7}
    e02a:	b083      	sub	sp, #12
    e02c:	af00      	add	r7, sp, #0
    e02e:	6078      	str	r0, [r7, #4]
    e030:	460b      	mov	r3, r1
    e032:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    e034:	687b      	ldr	r3, [r7, #4]
    e036:	887a      	ldrh	r2, [r7, #2]
    e038:	831a      	strh	r2, [r3, #24]
}
    e03a:	bf00      	nop
    e03c:	370c      	adds	r7, #12
    e03e:	46bd      	mov	sp, r7
    e040:	f85d 7b04 	ldr.w	r7, [sp], #4
    e044:	4770      	bx	lr

0000e046 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    e046:	b480      	push	{r7}
    e048:	b083      	sub	sp, #12
    e04a:	af00      	add	r7, sp, #0
    e04c:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    e04e:	687b      	ldr	r3, [r7, #4]
    e050:	8b1b      	ldrh	r3, [r3, #24]
    e052:	b29b      	uxth	r3, r3
}
    e054:	4618      	mov	r0, r3
    e056:	370c      	adds	r7, #12
    e058:	46bd      	mov	sp, r7
    e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e05e:	4770      	bx	lr

0000e060 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    e060:	b480      	push	{r7}
    e062:	b083      	sub	sp, #12
    e064:	af00      	add	r7, sp, #0
    e066:	6078      	str	r0, [r7, #4]
    e068:	460b      	mov	r3, r1
    e06a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    e06c:	687b      	ldr	r3, [r7, #4]
    e06e:	887a      	ldrh	r2, [r7, #2]
    e070:	829a      	strh	r2, [r3, #20]
}
    e072:	bf00      	nop
    e074:	370c      	adds	r7, #12
    e076:	46bd      	mov	sp, r7
    e078:	f85d 7b04 	ldr.w	r7, [sp], #4
    e07c:	4770      	bx	lr

0000e07e <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    e07e:	b480      	push	{r7}
    e080:	b085      	sub	sp, #20
    e082:	af00      	add	r7, sp, #0
    e084:	6078      	str	r0, [r7, #4]
    e086:	460b      	mov	r3, r1
    e088:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    e08a:	687b      	ldr	r3, [r7, #4]
    e08c:	789b      	ldrb	r3, [r3, #2]
    e08e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    e090:	7bfa      	ldrb	r2, [r7, #15]
    e092:	78fb      	ldrb	r3, [r7, #3]
    e094:	4013      	ands	r3, r2
    e096:	73fb      	strb	r3, [r7, #15]
	return tmp;
    e098:	7bfb      	ldrb	r3, [r7, #15]
}
    e09a:	4618      	mov	r0, r3
    e09c:	3714      	adds	r7, #20
    e09e:	46bd      	mov	sp, r7
    e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0a4:	4770      	bx	lr
	...

0000e0a8 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    e0a8:	b580      	push	{r7, lr}
    e0aa:	b082      	sub	sp, #8
    e0ac:	af00      	add	r7, sp, #0
    e0ae:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    e0b0:	687b      	ldr	r3, [r7, #4]
    e0b2:	781b      	ldrb	r3, [r3, #0]
    e0b4:	b2db      	uxtb	r3, r3
    e0b6:	f023 0302 	bic.w	r3, r3, #2
    e0ba:	b2da      	uxtb	r2, r3
    e0bc:	687b      	ldr	r3, [r7, #4]
    e0be:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    e0c0:	2103      	movs	r1, #3
    e0c2:	6878      	ldr	r0, [r7, #4]
    e0c4:	4b02      	ldr	r3, [pc, #8]	; (e0d0 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    e0c6:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    e0c8:	bf00      	nop
    e0ca:	3708      	adds	r7, #8
    e0cc:	46bd      	mov	sp, r7
    e0ce:	bd80      	pop	{r7, pc}
    e0d0:	0000dd5b 	.word	0x0000dd5b

0000e0d4 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    e0d4:	b580      	push	{r7, lr}
    e0d6:	b084      	sub	sp, #16
    e0d8:	af00      	add	r7, sp, #0
    e0da:	6078      	str	r0, [r7, #4]
    e0dc:	460b      	mov	r3, r1
    e0de:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    e0e0:	2103      	movs	r1, #3
    e0e2:	6878      	ldr	r0, [r7, #4]
    e0e4:	4b06      	ldr	r3, [pc, #24]	; (e100 <hri_usb_get_CTRLA_reg+0x2c>)
    e0e6:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    e0e8:	687b      	ldr	r3, [r7, #4]
    e0ea:	781b      	ldrb	r3, [r3, #0]
    e0ec:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    e0ee:	7bfa      	ldrb	r2, [r7, #15]
    e0f0:	78fb      	ldrb	r3, [r7, #3]
    e0f2:	4013      	ands	r3, r2
    e0f4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    e0f6:	7bfb      	ldrb	r3, [r7, #15]
}
    e0f8:	4618      	mov	r0, r3
    e0fa:	3710      	adds	r7, #16
    e0fc:	46bd      	mov	sp, r7
    e0fe:	bd80      	pop	{r7, pc}
    e100:	0000dd5b 	.word	0x0000dd5b

0000e104 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    e104:	b580      	push	{r7, lr}
    e106:	b082      	sub	sp, #8
    e108:	af00      	add	r7, sp, #0
    e10a:	6078      	str	r0, [r7, #4]
    e10c:	460b      	mov	r3, r1
    e10e:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    e110:	687b      	ldr	r3, [r7, #4]
    e112:	78fa      	ldrb	r2, [r7, #3]
    e114:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    e116:	2103      	movs	r1, #3
    e118:	6878      	ldr	r0, [r7, #4]
    e11a:	4b03      	ldr	r3, [pc, #12]	; (e128 <hri_usb_write_CTRLA_reg+0x24>)
    e11c:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    e11e:	bf00      	nop
    e120:	3708      	adds	r7, #8
    e122:	46bd      	mov	sp, r7
    e124:	bd80      	pop	{r7, pc}
    e126:	bf00      	nop
    e128:	0000dd5b 	.word	0x0000dd5b

0000e12c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    e12c:	b580      	push	{r7, lr}
    e12e:	b082      	sub	sp, #8
    e130:	af00      	add	r7, sp, #0
    e132:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    e134:	2103      	movs	r1, #3
    e136:	6878      	ldr	r0, [r7, #4]
    e138:	4b04      	ldr	r3, [pc, #16]	; (e14c <hri_usb_read_CTRLA_reg+0x20>)
    e13a:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    e13c:	687b      	ldr	r3, [r7, #4]
    e13e:	781b      	ldrb	r3, [r3, #0]
    e140:	b2db      	uxtb	r3, r3
}
    e142:	4618      	mov	r0, r3
    e144:	3708      	adds	r7, #8
    e146:	46bd      	mov	sp, r7
    e148:	bd80      	pop	{r7, pc}
    e14a:	bf00      	nop
    e14c:	0000dd5b 	.word	0x0000dd5b

0000e150 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    e150:	b480      	push	{r7}
    e152:	b083      	sub	sp, #12
    e154:	af00      	add	r7, sp, #0
    e156:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    e158:	687b      	ldr	r3, [r7, #4]
    e15a:	891b      	ldrh	r3, [r3, #8]
    e15c:	b29b      	uxth	r3, r3
    e15e:	f023 0301 	bic.w	r3, r3, #1
    e162:	b29a      	uxth	r2, r3
    e164:	687b      	ldr	r3, [r7, #4]
    e166:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    e168:	bf00      	nop
    e16a:	370c      	adds	r7, #12
    e16c:	46bd      	mov	sp, r7
    e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e172:	4770      	bx	lr

0000e174 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    e174:	b480      	push	{r7}
    e176:	b083      	sub	sp, #12
    e178:	af00      	add	r7, sp, #0
    e17a:	6078      	str	r0, [r7, #4]
    e17c:	460b      	mov	r3, r1
    e17e:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    e180:	687b      	ldr	r3, [r7, #4]
    e182:	887a      	ldrh	r2, [r7, #2]
    e184:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    e186:	bf00      	nop
    e188:	370c      	adds	r7, #12
    e18a:	46bd      	mov	sp, r7
    e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e190:	4770      	bx	lr

0000e192 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    e192:	b480      	push	{r7}
    e194:	b083      	sub	sp, #12
    e196:	af00      	add	r7, sp, #0
    e198:	6078      	str	r0, [r7, #4]
    e19a:	460b      	mov	r3, r1
    e19c:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    e19e:	687b      	ldr	r3, [r7, #4]
    e1a0:	78fa      	ldrb	r2, [r7, #3]
    e1a2:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    e1a4:	bf00      	nop
    e1a6:	370c      	adds	r7, #12
    e1a8:	46bd      	mov	sp, r7
    e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1ae:	4770      	bx	lr

0000e1b0 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    e1b0:	b480      	push	{r7}
    e1b2:	b083      	sub	sp, #12
    e1b4:	af00      	add	r7, sp, #0
    e1b6:	6078      	str	r0, [r7, #4]
    e1b8:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    e1ba:	687b      	ldr	r3, [r7, #4]
    e1bc:	683a      	ldr	r2, [r7, #0]
    e1be:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    e1c0:	bf00      	nop
    e1c2:	370c      	adds	r7, #12
    e1c4:	46bd      	mov	sp, r7
    e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1ca:	4770      	bx	lr

0000e1cc <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    e1cc:	b480      	push	{r7}
    e1ce:	b083      	sub	sp, #12
    e1d0:	af00      	add	r7, sp, #0
    e1d2:	6078      	str	r0, [r7, #4]
    e1d4:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    e1d6:	2300      	movs	r3, #0
}
    e1d8:	4618      	mov	r0, r3
    e1da:	370c      	adds	r7, #12
    e1dc:	46bd      	mov	sp, r7
    e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1e2:	4770      	bx	lr

0000e1e4 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    e1e4:	b480      	push	{r7}
    e1e6:	b085      	sub	sp, #20
    e1e8:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    e1ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e1ee:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    e1f0:	4b28      	ldr	r3, [pc, #160]	; (e294 <_usb_load_calib+0xb0>)
    e1f2:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    e1f4:	f003 031f 	and.w	r3, r3, #31
    e1f8:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    e1fa:	4b26      	ldr	r3, [pc, #152]	; (e294 <_usb_load_calib+0xb0>)
    e1fc:	681b      	ldr	r3, [r3, #0]
    e1fe:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    e200:	f003 031f 	and.w	r3, r3, #31
    e204:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    e206:	4b23      	ldr	r3, [pc, #140]	; (e294 <_usb_load_calib+0xb0>)
    e208:	681b      	ldr	r3, [r3, #0]
    e20a:	0a9b      	lsrs	r3, r3, #10
    e20c:	f003 0307 	and.w	r3, r3, #7
    e210:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    e212:	68fb      	ldr	r3, [r7, #12]
    e214:	2b00      	cmp	r3, #0
    e216:	d002      	beq.n	e21e <_usb_load_calib+0x3a>
    e218:	68fb      	ldr	r3, [r7, #12]
    e21a:	2b1f      	cmp	r3, #31
    e21c:	d101      	bne.n	e222 <_usb_load_calib+0x3e>
		pad_transn = 9;
    e21e:	2309      	movs	r3, #9
    e220:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    e222:	68bb      	ldr	r3, [r7, #8]
    e224:	2b00      	cmp	r3, #0
    e226:	d002      	beq.n	e22e <_usb_load_calib+0x4a>
    e228:	68bb      	ldr	r3, [r7, #8]
    e22a:	2b1f      	cmp	r3, #31
    e22c:	d101      	bne.n	e232 <_usb_load_calib+0x4e>
		pad_transp = 25;
    e22e:	2319      	movs	r3, #25
    e230:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    e232:	687b      	ldr	r3, [r7, #4]
    e234:	2b00      	cmp	r3, #0
    e236:	d002      	beq.n	e23e <_usb_load_calib+0x5a>
    e238:	687b      	ldr	r3, [r7, #4]
    e23a:	2b07      	cmp	r3, #7
    e23c:	d101      	bne.n	e242 <_usb_load_calib+0x5e>
		pad_trim = 6;
    e23e:	2306      	movs	r3, #6
    e240:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    e242:	68fb      	ldr	r3, [r7, #12]
    e244:	b29b      	uxth	r3, r3
    e246:	019b      	lsls	r3, r3, #6
    e248:	b29b      	uxth	r3, r3
    e24a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    e24e:	b29a      	uxth	r2, r3
    e250:	68bb      	ldr	r3, [r7, #8]
    e252:	b29b      	uxth	r3, r3
    e254:	f003 031f 	and.w	r3, r3, #31
    e258:	b29b      	uxth	r3, r3
    e25a:	4313      	orrs	r3, r2
    e25c:	b29a      	uxth	r2, r3
    e25e:	687b      	ldr	r3, [r7, #4]
    e260:	b29b      	uxth	r3, r3
    e262:	031b      	lsls	r3, r3, #12
    e264:	b29b      	uxth	r3, r3
    e266:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    e26a:	b29b      	uxth	r3, r3
    e26c:	4313      	orrs	r3, r2
    e26e:	b29a      	uxth	r2, r3
    e270:	683b      	ldr	r3, [r7, #0]
    e272:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    e274:	683a      	ldr	r2, [r7, #0]
    e276:	78d3      	ldrb	r3, [r2, #3]
    e278:	f043 0303 	orr.w	r3, r3, #3
    e27c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    e27e:	683a      	ldr	r2, [r7, #0]
    e280:	78d3      	ldrb	r3, [r2, #3]
    e282:	f043 030c 	orr.w	r3, r3, #12
    e286:	70d3      	strb	r3, [r2, #3]
}
    e288:	bf00      	nop
    e28a:	3714      	adds	r7, #20
    e28c:	46bd      	mov	sp, r7
    e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e292:	4770      	bx	lr
    e294:	00800084 	.word	0x00800084

0000e298 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    e298:	b580      	push	{r7, lr}
    e29a:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    e29c:	bf00      	nop
    e29e:	2203      	movs	r2, #3
    e2a0:	2100      	movs	r1, #0
    e2a2:	4804      	ldr	r0, [pc, #16]	; (e2b4 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    e2a4:	4b04      	ldr	r3, [pc, #16]	; (e2b8 <_usb_d_dev_wait_dpll_rdy+0x20>)
    e2a6:	4798      	blx	r3
    e2a8:	4603      	mov	r3, r0
    e2aa:	2b03      	cmp	r3, #3
    e2ac:	d1f7      	bne.n	e29e <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    e2ae:	bf00      	nop
    e2b0:	bd80      	pop	{r7, pc}
    e2b2:	bf00      	nop
    e2b4:	40001000 	.word	0x40001000
    e2b8:	0000dccd 	.word	0x0000dccd

0000e2bc <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    e2bc:	b580      	push	{r7, lr}
    e2be:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    e2c0:	480e      	ldr	r0, [pc, #56]	; (e2fc <_usb_d_dev_wait_dfll_rdy+0x40>)
    e2c2:	4b0f      	ldr	r3, [pc, #60]	; (e300 <_usb_d_dev_wait_dfll_rdy+0x44>)
    e2c4:	4798      	blx	r3
    e2c6:	4603      	mov	r3, r0
    e2c8:	2b00      	cmp	r3, #0
    e2ca:	d00a      	beq.n	e2e2 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    e2cc:	bf00      	nop
    e2ce:	f44f 6110 	mov.w	r1, #2304	; 0x900
    e2d2:	480a      	ldr	r0, [pc, #40]	; (e2fc <_usb_d_dev_wait_dfll_rdy+0x40>)
    e2d4:	4b0b      	ldr	r3, [pc, #44]	; (e304 <_usb_d_dev_wait_dfll_rdy+0x48>)
    e2d6:	4798      	blx	r3
    e2d8:	4603      	mov	r3, r0
    e2da:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    e2de:	d1f6      	bne.n	e2ce <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    e2e0:	e009      	b.n	e2f6 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    e2e2:	bf00      	nop
    e2e4:	f44f 7180 	mov.w	r1, #256	; 0x100
    e2e8:	4804      	ldr	r0, [pc, #16]	; (e2fc <_usb_d_dev_wait_dfll_rdy+0x40>)
    e2ea:	4b06      	ldr	r3, [pc, #24]	; (e304 <_usb_d_dev_wait_dfll_rdy+0x48>)
    e2ec:	4798      	blx	r3
    e2ee:	4603      	mov	r3, r0
    e2f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e2f4:	d1f6      	bne.n	e2e4 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    e2f6:	bf00      	nop
    e2f8:	bd80      	pop	{r7, pc}
    e2fa:	bf00      	nop
    e2fc:	40001000 	.word	0x40001000
    e300:	0000dd2b 	.word	0x0000dd2b
    e304:	0000dd05 	.word	0x0000dd05

0000e308 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    e308:	b580      	push	{r7, lr}
    e30a:	b082      	sub	sp, #8
    e30c:	af00      	add	r7, sp, #0
    e30e:	4603      	mov	r3, r0
    e310:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    e312:	79fb      	ldrb	r3, [r7, #7]
    e314:	2b00      	cmp	r3, #0
    e316:	d102      	bne.n	e31e <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    e318:	4b05      	ldr	r3, [pc, #20]	; (e330 <_usb_d_dev_wait_clk_rdy+0x28>)
    e31a:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    e31c:	e004      	b.n	e328 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    e31e:	79fb      	ldrb	r3, [r7, #7]
    e320:	2b01      	cmp	r3, #1
    e322:	d101      	bne.n	e328 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    e324:	4b03      	ldr	r3, [pc, #12]	; (e334 <_usb_d_dev_wait_clk_rdy+0x2c>)
    e326:	4798      	blx	r3
}
    e328:	bf00      	nop
    e32a:	3708      	adds	r7, #8
    e32c:	46bd      	mov	sp, r7
    e32e:	bd80      	pop	{r7, pc}
    e330:	0000e2bd 	.word	0x0000e2bd
    e334:	0000e299 	.word	0x0000e299

0000e338 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    e338:	b580      	push	{r7, lr}
    e33a:	b082      	sub	sp, #8
    e33c:	af00      	add	r7, sp, #0
    e33e:	4603      	mov	r3, r0
    e340:	6039      	str	r1, [r7, #0]
    e342:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    e344:	683b      	ldr	r3, [r7, #0]
    e346:	b2da      	uxtb	r2, r3
    e348:	79fb      	ldrb	r3, [r7, #7]
    e34a:	4619      	mov	r1, r3
    e34c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e350:	4b02      	ldr	r3, [pc, #8]	; (e35c <_usbd_ep_int_ack+0x24>)
    e352:	4798      	blx	r3
}
    e354:	bf00      	nop
    e356:	3708      	adds	r7, #8
    e358:	46bd      	mov	sp, r7
    e35a:	bd80      	pop	{r7, pc}
    e35c:	0000de11 	.word	0x0000de11

0000e360 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    e360:	b580      	push	{r7, lr}
    e362:	b082      	sub	sp, #8
    e364:	af00      	add	r7, sp, #0
    e366:	4603      	mov	r3, r0
    e368:	6039      	str	r1, [r7, #0]
    e36a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    e36c:	683b      	ldr	r3, [r7, #0]
    e36e:	b2da      	uxtb	r2, r3
    e370:	79fb      	ldrb	r3, [r7, #7]
    e372:	4619      	mov	r1, r3
    e374:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e378:	4b02      	ldr	r3, [pc, #8]	; (e384 <_usbd_ep_int_en+0x24>)
    e37a:	4798      	blx	r3
}
    e37c:	bf00      	nop
    e37e:	3708      	adds	r7, #8
    e380:	46bd      	mov	sp, r7
    e382:	bd80      	pop	{r7, pc}
    e384:	0000dee5 	.word	0x0000dee5

0000e388 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    e388:	b580      	push	{r7, lr}
    e38a:	b082      	sub	sp, #8
    e38c:	af00      	add	r7, sp, #0
    e38e:	4603      	mov	r3, r0
    e390:	6039      	str	r1, [r7, #0]
    e392:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    e394:	683b      	ldr	r3, [r7, #0]
    e396:	b2da      	uxtb	r2, r3
    e398:	79fb      	ldrb	r3, [r7, #7]
    e39a:	4619      	mov	r1, r3
    e39c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e3a0:	4b02      	ldr	r3, [pc, #8]	; (e3ac <_usbd_ep_int_dis+0x24>)
    e3a2:	4798      	blx	r3
}
    e3a4:	bf00      	nop
    e3a6:	3708      	adds	r7, #8
    e3a8:	46bd      	mov	sp, r7
    e3aa:	bd80      	pop	{r7, pc}
    e3ac:	0000df11 	.word	0x0000df11

0000e3b0 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    e3b0:	b580      	push	{r7, lr}
    e3b2:	b082      	sub	sp, #8
    e3b4:	af00      	add	r7, sp, #0
    e3b6:	4603      	mov	r3, r0
    e3b8:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    e3ba:	79fb      	ldrb	r3, [r7, #7]
    e3bc:	4619      	mov	r1, r3
    e3be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e3c2:	4b06      	ldr	r3, [pc, #24]	; (e3dc <_usbd_ep_is_ctrl+0x2c>)
    e3c4:	4798      	blx	r3
    e3c6:	4603      	mov	r3, r0
    e3c8:	2b11      	cmp	r3, #17
    e3ca:	bf0c      	ite	eq
    e3cc:	2301      	moveq	r3, #1
    e3ce:	2300      	movne	r3, #0
    e3d0:	b2db      	uxtb	r3, r3
}
    e3d2:	4618      	mov	r0, r3
    e3d4:	3708      	adds	r7, #8
    e3d6:	46bd      	mov	sp, r7
    e3d8:	bd80      	pop	{r7, pc}
    e3da:	bf00      	nop
    e3dc:	0000dfcb 	.word	0x0000dfcb

0000e3e0 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    e3e0:	b580      	push	{r7, lr}
    e3e2:	b082      	sub	sp, #8
    e3e4:	af00      	add	r7, sp, #0
    e3e6:	4603      	mov	r3, r0
    e3e8:	71fb      	strb	r3, [r7, #7]
    e3ea:	460b      	mov	r3, r1
    e3ec:	71bb      	strb	r3, [r7, #6]
    e3ee:	4613      	mov	r3, r2
    e3f0:	717b      	strb	r3, [r7, #5]
	if (st) {
    e3f2:	797b      	ldrb	r3, [r7, #5]
    e3f4:	2b00      	cmp	r3, #0
    e3f6:	d00b      	beq.n	e410 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e3f8:	79bb      	ldrb	r3, [r7, #6]
    e3fa:	2210      	movs	r2, #16
    e3fc:	fa02 f303 	lsl.w	r3, r2, r3
    e400:	b2da      	uxtb	r2, r3
    e402:	79fb      	ldrb	r3, [r7, #7]
    e404:	4619      	mov	r1, r3
    e406:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e40a:	4b09      	ldr	r3, [pc, #36]	; (e430 <_usbd_ep_set_stall+0x50>)
    e40c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    e40e:	e00a      	b.n	e426 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e410:	79bb      	ldrb	r3, [r7, #6]
    e412:	2210      	movs	r2, #16
    e414:	fa02 f303 	lsl.w	r3, r2, r3
    e418:	b2da      	uxtb	r2, r3
    e41a:	79fb      	ldrb	r3, [r7, #7]
    e41c:	4619      	mov	r1, r3
    e41e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e422:	4b04      	ldr	r3, [pc, #16]	; (e434 <_usbd_ep_set_stall+0x54>)
    e424:	4798      	blx	r3
}
    e426:	bf00      	nop
    e428:	3708      	adds	r7, #8
    e42a:	46bd      	mov	sp, r7
    e42c:	bd80      	pop	{r7, pc}
    e42e:	bf00      	nop
    e430:	0000de3d 	.word	0x0000de3d
    e434:	0000de91 	.word	0x0000de91

0000e438 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    e438:	b580      	push	{r7, lr}
    e43a:	b084      	sub	sp, #16
    e43c:	af00      	add	r7, sp, #0
    e43e:	4603      	mov	r3, r0
    e440:	460a      	mov	r2, r1
    e442:	71fb      	strb	r3, [r7, #7]
    e444:	4613      	mov	r3, r2
    e446:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    e448:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e44c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    e44e:	79fb      	ldrb	r3, [r7, #7]
    e450:	4619      	mov	r1, r3
    e452:	68f8      	ldr	r0, [r7, #12]
    e454:	4b08      	ldr	r3, [pc, #32]	; (e478 <_usbd_ep_is_stalled+0x40>)
    e456:	4798      	blx	r3
    e458:	4603      	mov	r3, r0
    e45a:	4619      	mov	r1, r3
    e45c:	79bb      	ldrb	r3, [r7, #6]
    e45e:	2210      	movs	r2, #16
    e460:	fa02 f303 	lsl.w	r3, r2, r3
    e464:	400b      	ands	r3, r1
    e466:	2b00      	cmp	r3, #0
    e468:	bf14      	ite	ne
    e46a:	2301      	movne	r3, #1
    e46c:	2300      	moveq	r3, #0
    e46e:	b2db      	uxtb	r3, r3
}
    e470:	4618      	mov	r0, r3
    e472:	3710      	adds	r7, #16
    e474:	46bd      	mov	sp, r7
    e476:	bd80      	pop	{r7, pc}
    e478:	0000de69 	.word	0x0000de69

0000e47c <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    e47c:	b580      	push	{r7, lr}
    e47e:	b084      	sub	sp, #16
    e480:	af00      	add	r7, sp, #0
    e482:	4603      	mov	r3, r0
    e484:	460a      	mov	r2, r1
    e486:	71fb      	strb	r3, [r7, #7]
    e488:	4613      	mov	r3, r2
    e48a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    e48c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e490:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    e492:	79fb      	ldrb	r3, [r7, #7]
    e494:	4619      	mov	r1, r3
    e496:	68f8      	ldr	r0, [r7, #12]
    e498:	4b08      	ldr	r3, [pc, #32]	; (e4bc <_usbd_ep_is_stall_sent+0x40>)
    e49a:	4798      	blx	r3
    e49c:	4603      	mov	r3, r0
    e49e:	4619      	mov	r1, r3
    e4a0:	79bb      	ldrb	r3, [r7, #6]
    e4a2:	2220      	movs	r2, #32
    e4a4:	fa02 f303 	lsl.w	r3, r2, r3
    e4a8:	400b      	ands	r3, r1
    e4aa:	2b00      	cmp	r3, #0
    e4ac:	bf14      	ite	ne
    e4ae:	2301      	movne	r3, #1
    e4b0:	2300      	moveq	r3, #0
    e4b2:	b2db      	uxtb	r3, r3
}
    e4b4:	4618      	mov	r0, r3
    e4b6:	3710      	adds	r7, #16
    e4b8:	46bd      	mov	sp, r7
    e4ba:	bd80      	pop	{r7, pc}
    e4bc:	0000dde9 	.word	0x0000dde9

0000e4c0 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    e4c0:	b580      	push	{r7, lr}
    e4c2:	b082      	sub	sp, #8
    e4c4:	af00      	add	r7, sp, #0
    e4c6:	4603      	mov	r3, r0
    e4c8:	460a      	mov	r2, r1
    e4ca:	71fb      	strb	r3, [r7, #7]
    e4cc:	4613      	mov	r3, r2
    e4ce:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    e4d0:	79bb      	ldrb	r3, [r7, #6]
    e4d2:	2220      	movs	r2, #32
    e4d4:	409a      	lsls	r2, r3
    e4d6:	79fb      	ldrb	r3, [r7, #7]
    e4d8:	4611      	mov	r1, r2
    e4da:	4618      	mov	r0, r3
    e4dc:	4b02      	ldr	r3, [pc, #8]	; (e4e8 <_usbd_ep_ack_stall+0x28>)
    e4de:	4798      	blx	r3
}
    e4e0:	bf00      	nop
    e4e2:	3708      	adds	r7, #8
    e4e4:	46bd      	mov	sp, r7
    e4e6:	bd80      	pop	{r7, pc}
    e4e8:	0000e339 	.word	0x0000e339

0000e4ec <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    e4ec:	b580      	push	{r7, lr}
    e4ee:	b082      	sub	sp, #8
    e4f0:	af00      	add	r7, sp, #0
    e4f2:	4603      	mov	r3, r0
    e4f4:	71fb      	strb	r3, [r7, #7]
    e4f6:	460b      	mov	r3, r1
    e4f8:	71bb      	strb	r3, [r7, #6]
    e4fa:	4613      	mov	r3, r2
    e4fc:	717b      	strb	r3, [r7, #5]
	if (en) {
    e4fe:	797b      	ldrb	r3, [r7, #5]
    e500:	2b00      	cmp	r3, #0
    e502:	d008      	beq.n	e516 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    e504:	79bb      	ldrb	r3, [r7, #6]
    e506:	2220      	movs	r2, #32
    e508:	409a      	lsls	r2, r3
    e50a:	79fb      	ldrb	r3, [r7, #7]
    e50c:	4611      	mov	r1, r2
    e50e:	4618      	mov	r0, r3
    e510:	4b07      	ldr	r3, [pc, #28]	; (e530 <_usbd_ep_int_stall_en+0x44>)
    e512:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    e514:	e007      	b.n	e526 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    e516:	79bb      	ldrb	r3, [r7, #6]
    e518:	2220      	movs	r2, #32
    e51a:	409a      	lsls	r2, r3
    e51c:	79fb      	ldrb	r3, [r7, #7]
    e51e:	4611      	mov	r1, r2
    e520:	4618      	mov	r0, r3
    e522:	4b04      	ldr	r3, [pc, #16]	; (e534 <_usbd_ep_int_stall_en+0x48>)
    e524:	4798      	blx	r3
}
    e526:	bf00      	nop
    e528:	3708      	adds	r7, #8
    e52a:	46bd      	mov	sp, r7
    e52c:	bd80      	pop	{r7, pc}
    e52e:	bf00      	nop
    e530:	0000e361 	.word	0x0000e361
    e534:	0000e389 	.word	0x0000e389

0000e538 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    e538:	b580      	push	{r7, lr}
    e53a:	b082      	sub	sp, #8
    e53c:	af00      	add	r7, sp, #0
    e53e:	4603      	mov	r3, r0
    e540:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    e542:	79fb      	ldrb	r3, [r7, #7]
    e544:	4619      	mov	r1, r3
    e546:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e54a:	4b03      	ldr	r3, [pc, #12]	; (e558 <_usbd_ep_stop_setup+0x20>)
    e54c:	4798      	blx	r3
}
    e54e:	bf00      	nop
    e550:	3708      	adds	r7, #8
    e552:	46bd      	mov	sp, r7
    e554:	bd80      	pop	{r7, pc}
    e556:	bf00      	nop
    e558:	0000debd 	.word	0x0000debd

0000e55c <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    e55c:	b580      	push	{r7, lr}
    e55e:	b082      	sub	sp, #8
    e560:	af00      	add	r7, sp, #0
    e562:	4603      	mov	r3, r0
    e564:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    e566:	79fb      	ldrb	r3, [r7, #7]
    e568:	2210      	movs	r2, #16
    e56a:	4619      	mov	r1, r3
    e56c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e570:	4b05      	ldr	r3, [pc, #20]	; (e588 <_usbd_ep_is_setup+0x2c>)
    e572:	4798      	blx	r3
    e574:	4603      	mov	r3, r0
    e576:	2b00      	cmp	r3, #0
    e578:	bf14      	ite	ne
    e57a:	2301      	movne	r3, #1
    e57c:	2300      	moveq	r3, #0
    e57e:	b2db      	uxtb	r3, r3
}
    e580:	4618      	mov	r0, r3
    e582:	3708      	adds	r7, #8
    e584:	46bd      	mov	sp, r7
    e586:	bd80      	pop	{r7, pc}
    e588:	0000ddb3 	.word	0x0000ddb3

0000e58c <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    e58c:	b580      	push	{r7, lr}
    e58e:	b082      	sub	sp, #8
    e590:	af00      	add	r7, sp, #0
    e592:	4603      	mov	r3, r0
    e594:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    e596:	79fb      	ldrb	r3, [r7, #7]
    e598:	2110      	movs	r1, #16
    e59a:	4618      	mov	r0, r3
    e59c:	4b02      	ldr	r3, [pc, #8]	; (e5a8 <_usbd_ep_ack_setup+0x1c>)
    e59e:	4798      	blx	r3
}
    e5a0:	bf00      	nop
    e5a2:	3708      	adds	r7, #8
    e5a4:	46bd      	mov	sp, r7
    e5a6:	bd80      	pop	{r7, pc}
    e5a8:	0000e339 	.word	0x0000e339

0000e5ac <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    e5ac:	b580      	push	{r7, lr}
    e5ae:	b082      	sub	sp, #8
    e5b0:	af00      	add	r7, sp, #0
    e5b2:	4603      	mov	r3, r0
    e5b4:	71fb      	strb	r3, [r7, #7]
    e5b6:	460b      	mov	r3, r1
    e5b8:	71bb      	strb	r3, [r7, #6]
    e5ba:	4613      	mov	r3, r2
    e5bc:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    e5be:	797b      	ldrb	r3, [r7, #5]
    e5c0:	2b00      	cmp	r3, #0
    e5c2:	d00b      	beq.n	e5dc <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    e5c4:	79bb      	ldrb	r3, [r7, #6]
    e5c6:	2201      	movs	r2, #1
    e5c8:	fa02 f303 	lsl.w	r3, r2, r3
    e5cc:	b2da      	uxtb	r2, r3
    e5ce:	79fb      	ldrb	r3, [r7, #7]
    e5d0:	4619      	mov	r1, r3
    e5d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e5d6:	4b09      	ldr	r3, [pc, #36]	; (e5fc <_usbd_ep_set_toggle+0x50>)
    e5d8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    e5da:	e00a      	b.n	e5f2 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    e5dc:	79bb      	ldrb	r3, [r7, #6]
    e5de:	2201      	movs	r2, #1
    e5e0:	fa02 f303 	lsl.w	r3, r2, r3
    e5e4:	b2da      	uxtb	r2, r3
    e5e6:	79fb      	ldrb	r3, [r7, #7]
    e5e8:	4619      	mov	r1, r3
    e5ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e5ee:	4b04      	ldr	r3, [pc, #16]	; (e600 <_usbd_ep_set_toggle+0x54>)
    e5f0:	4798      	blx	r3
}
    e5f2:	bf00      	nop
    e5f4:	3708      	adds	r7, #8
    e5f6:	46bd      	mov	sp, r7
    e5f8:	bd80      	pop	{r7, pc}
    e5fa:	bf00      	nop
    e5fc:	0000de3d 	.word	0x0000de3d
    e600:	0000de91 	.word	0x0000de91

0000e604 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    e604:	b580      	push	{r7, lr}
    e606:	b082      	sub	sp, #8
    e608:	af00      	add	r7, sp, #0
    e60a:	4603      	mov	r3, r0
    e60c:	460a      	mov	r2, r1
    e60e:	71fb      	strb	r3, [r7, #7]
    e610:	4613      	mov	r3, r2
    e612:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    e614:	79bb      	ldrb	r3, [r7, #6]
    e616:	2201      	movs	r2, #1
    e618:	409a      	lsls	r2, r3
    e61a:	79fb      	ldrb	r3, [r7, #7]
    e61c:	4611      	mov	r1, r2
    e61e:	4618      	mov	r0, r3
    e620:	4b02      	ldr	r3, [pc, #8]	; (e62c <_usbd_ep_ack_io_cpt+0x28>)
    e622:	4798      	blx	r3
}
    e624:	bf00      	nop
    e626:	3708      	adds	r7, #8
    e628:	46bd      	mov	sp, r7
    e62a:	bd80      	pop	{r7, pc}
    e62c:	0000e339 	.word	0x0000e339

0000e630 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    e630:	b480      	push	{r7}
    e632:	b085      	sub	sp, #20
    e634:	af00      	add	r7, sp, #0
    e636:	4603      	mov	r3, r0
    e638:	603a      	str	r2, [r7, #0]
    e63a:	71fb      	strb	r3, [r7, #7]
    e63c:	460b      	mov	r3, r1
    e63e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e640:	79fa      	ldrb	r2, [r7, #7]
    e642:	79bb      	ldrb	r3, [r7, #6]
    e644:	0052      	lsls	r2, r2, #1
    e646:	4413      	add	r3, r2
    e648:	011b      	lsls	r3, r3, #4
    e64a:	4a06      	ldr	r2, [pc, #24]	; (e664 <_usbd_ep_set_buf+0x34>)
    e64c:	4413      	add	r3, r2
    e64e:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    e650:	68fb      	ldr	r3, [r7, #12]
    e652:	683a      	ldr	r2, [r7, #0]
    e654:	601a      	str	r2, [r3, #0]
}
    e656:	bf00      	nop
    e658:	3714      	adds	r7, #20
    e65a:	46bd      	mov	sp, r7
    e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e660:	4770      	bx	lr
    e662:	bf00      	nop
    e664:	20008d18 	.word	0x20008d18

0000e668 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    e668:	b480      	push	{r7}
    e66a:	b085      	sub	sp, #20
    e66c:	af00      	add	r7, sp, #0
    e66e:	4603      	mov	r3, r0
    e670:	71fb      	strb	r3, [r7, #7]
    e672:	460b      	mov	r3, r1
    e674:	71bb      	strb	r3, [r7, #6]
    e676:	4613      	mov	r3, r2
    e678:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e67a:	79fa      	ldrb	r2, [r7, #7]
    e67c:	79bb      	ldrb	r3, [r7, #6]
    e67e:	0052      	lsls	r2, r2, #1
    e680:	4413      	add	r3, r2
    e682:	011b      	lsls	r3, r3, #4
    e684:	4a08      	ldr	r2, [pc, #32]	; (e6a8 <_usbd_ep_set_in_count+0x40>)
    e686:	4413      	add	r3, r2
    e688:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    e68a:	88bb      	ldrh	r3, [r7, #4]
    e68c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e690:	b299      	uxth	r1, r3
    e692:	68fa      	ldr	r2, [r7, #12]
    e694:	6853      	ldr	r3, [r2, #4]
    e696:	f361 339b 	bfi	r3, r1, #14, #14
    e69a:	6053      	str	r3, [r2, #4]
}
    e69c:	bf00      	nop
    e69e:	3714      	adds	r7, #20
    e6a0:	46bd      	mov	sp, r7
    e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e6a6:	4770      	bx	lr
    e6a8:	20008d18 	.word	0x20008d18

0000e6ac <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    e6ac:	b480      	push	{r7}
    e6ae:	b085      	sub	sp, #20
    e6b0:	af00      	add	r7, sp, #0
    e6b2:	4603      	mov	r3, r0
    e6b4:	71fb      	strb	r3, [r7, #7]
    e6b6:	460b      	mov	r3, r1
    e6b8:	71bb      	strb	r3, [r7, #6]
    e6ba:	4613      	mov	r3, r2
    e6bc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e6be:	79fa      	ldrb	r2, [r7, #7]
    e6c0:	79bb      	ldrb	r3, [r7, #6]
    e6c2:	0052      	lsls	r2, r2, #1
    e6c4:	4413      	add	r3, r2
    e6c6:	011b      	lsls	r3, r3, #4
    e6c8:	4a08      	ldr	r2, [pc, #32]	; (e6ec <_usbd_ep_set_in_size+0x40>)
    e6ca:	4413      	add	r3, r2
    e6cc:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    e6ce:	88bb      	ldrh	r3, [r7, #4]
    e6d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e6d4:	b299      	uxth	r1, r3
    e6d6:	68fa      	ldr	r2, [r7, #12]
    e6d8:	6853      	ldr	r3, [r2, #4]
    e6da:	f361 030d 	bfi	r3, r1, #0, #14
    e6de:	6053      	str	r3, [r2, #4]
}
    e6e0:	bf00      	nop
    e6e2:	3714      	adds	r7, #20
    e6e4:	46bd      	mov	sp, r7
    e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e6ea:	4770      	bx	lr
    e6ec:	20008d18 	.word	0x20008d18

0000e6f0 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    e6f0:	b480      	push	{r7}
    e6f2:	b085      	sub	sp, #20
    e6f4:	af00      	add	r7, sp, #0
    e6f6:	4603      	mov	r3, r0
    e6f8:	71fb      	strb	r3, [r7, #7]
    e6fa:	460b      	mov	r3, r1
    e6fc:	71bb      	strb	r3, [r7, #6]
    e6fe:	4613      	mov	r3, r2
    e700:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e702:	79fa      	ldrb	r2, [r7, #7]
    e704:	79bb      	ldrb	r3, [r7, #6]
    e706:	0052      	lsls	r2, r2, #1
    e708:	4413      	add	r3, r2
    e70a:	011b      	lsls	r3, r3, #4
    e70c:	4a08      	ldr	r2, [pc, #32]	; (e730 <_usbd_ep_set_out_count+0x40>)
    e70e:	4413      	add	r3, r2
    e710:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    e712:	88bb      	ldrh	r3, [r7, #4]
    e714:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e718:	b299      	uxth	r1, r3
    e71a:	68fa      	ldr	r2, [r7, #12]
    e71c:	6853      	ldr	r3, [r2, #4]
    e71e:	f361 030d 	bfi	r3, r1, #0, #14
    e722:	6053      	str	r3, [r2, #4]
}
    e724:	bf00      	nop
    e726:	3714      	adds	r7, #20
    e728:	46bd      	mov	sp, r7
    e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e72e:	4770      	bx	lr
    e730:	20008d18 	.word	0x20008d18

0000e734 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    e734:	b480      	push	{r7}
    e736:	b085      	sub	sp, #20
    e738:	af00      	add	r7, sp, #0
    e73a:	4603      	mov	r3, r0
    e73c:	71fb      	strb	r3, [r7, #7]
    e73e:	460b      	mov	r3, r1
    e740:	71bb      	strb	r3, [r7, #6]
    e742:	4613      	mov	r3, r2
    e744:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e746:	79fa      	ldrb	r2, [r7, #7]
    e748:	79bb      	ldrb	r3, [r7, #6]
    e74a:	0052      	lsls	r2, r2, #1
    e74c:	4413      	add	r3, r2
    e74e:	011b      	lsls	r3, r3, #4
    e750:	4a08      	ldr	r2, [pc, #32]	; (e774 <_usbd_ep_set_out_size+0x40>)
    e752:	4413      	add	r3, r2
    e754:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    e756:	88bb      	ldrh	r3, [r7, #4]
    e758:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e75c:	b299      	uxth	r1, r3
    e75e:	68fa      	ldr	r2, [r7, #12]
    e760:	6853      	ldr	r3, [r2, #4]
    e762:	f361 339b 	bfi	r3, r1, #14, #14
    e766:	6053      	str	r3, [r2, #4]
}
    e768:	bf00      	nop
    e76a:	3714      	adds	r7, #20
    e76c:	46bd      	mov	sp, r7
    e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e772:	4770      	bx	lr
    e774:	20008d18 	.word	0x20008d18

0000e778 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    e778:	b580      	push	{r7, lr}
    e77a:	b084      	sub	sp, #16
    e77c:	af00      	add	r7, sp, #0
    e77e:	60ba      	str	r2, [r7, #8]
    e780:	607b      	str	r3, [r7, #4]
    e782:	4603      	mov	r3, r0
    e784:	73fb      	strb	r3, [r7, #15]
    e786:	460b      	mov	r3, r1
    e788:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    e78a:	68bb      	ldr	r3, [r7, #8]
    e78c:	b29a      	uxth	r2, r3
    e78e:	7bb9      	ldrb	r1, [r7, #14]
    e790:	7bfb      	ldrb	r3, [r7, #15]
    e792:	4618      	mov	r0, r3
    e794:	4b06      	ldr	r3, [pc, #24]	; (e7b0 <_usbd_ep_set_in_trans+0x38>)
    e796:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    e798:	687b      	ldr	r3, [r7, #4]
    e79a:	b29a      	uxth	r2, r3
    e79c:	7bb9      	ldrb	r1, [r7, #14]
    e79e:	7bfb      	ldrb	r3, [r7, #15]
    e7a0:	4618      	mov	r0, r3
    e7a2:	4b04      	ldr	r3, [pc, #16]	; (e7b4 <_usbd_ep_set_in_trans+0x3c>)
    e7a4:	4798      	blx	r3
}
    e7a6:	bf00      	nop
    e7a8:	3710      	adds	r7, #16
    e7aa:	46bd      	mov	sp, r7
    e7ac:	bd80      	pop	{r7, pc}
    e7ae:	bf00      	nop
    e7b0:	0000e6ad 	.word	0x0000e6ad
    e7b4:	0000e669 	.word	0x0000e669

0000e7b8 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    e7b8:	b580      	push	{r7, lr}
    e7ba:	b084      	sub	sp, #16
    e7bc:	af00      	add	r7, sp, #0
    e7be:	60ba      	str	r2, [r7, #8]
    e7c0:	607b      	str	r3, [r7, #4]
    e7c2:	4603      	mov	r3, r0
    e7c4:	73fb      	strb	r3, [r7, #15]
    e7c6:	460b      	mov	r3, r1
    e7c8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    e7ca:	68bb      	ldr	r3, [r7, #8]
    e7cc:	b29a      	uxth	r2, r3
    e7ce:	7bb9      	ldrb	r1, [r7, #14]
    e7d0:	7bfb      	ldrb	r3, [r7, #15]
    e7d2:	4618      	mov	r0, r3
    e7d4:	4b06      	ldr	r3, [pc, #24]	; (e7f0 <_usbd_ep_set_out_trans+0x38>)
    e7d6:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    e7d8:	687b      	ldr	r3, [r7, #4]
    e7da:	b29a      	uxth	r2, r3
    e7dc:	7bb9      	ldrb	r1, [r7, #14]
    e7de:	7bfb      	ldrb	r3, [r7, #15]
    e7e0:	4618      	mov	r0, r3
    e7e2:	4b04      	ldr	r3, [pc, #16]	; (e7f4 <_usbd_ep_set_out_trans+0x3c>)
    e7e4:	4798      	blx	r3
}
    e7e6:	bf00      	nop
    e7e8:	3710      	adds	r7, #16
    e7ea:	46bd      	mov	sp, r7
    e7ec:	bd80      	pop	{r7, pc}
    e7ee:	bf00      	nop
    e7f0:	0000e735 	.word	0x0000e735
    e7f4:	0000e6f1 	.word	0x0000e6f1

0000e7f8 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    e7f8:	b480      	push	{r7}
    e7fa:	b085      	sub	sp, #20
    e7fc:	af00      	add	r7, sp, #0
    e7fe:	4603      	mov	r3, r0
    e800:	460a      	mov	r2, r1
    e802:	71fb      	strb	r3, [r7, #7]
    e804:	4613      	mov	r3, r2
    e806:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e808:	79fa      	ldrb	r2, [r7, #7]
    e80a:	79bb      	ldrb	r3, [r7, #6]
    e80c:	0052      	lsls	r2, r2, #1
    e80e:	4413      	add	r3, r2
    e810:	011b      	lsls	r3, r3, #4
    e812:	4a06      	ldr	r2, [pc, #24]	; (e82c <_usbd_ep_clear_bank_status+0x34>)
    e814:	4413      	add	r3, r2
    e816:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    e818:	68fb      	ldr	r3, [r7, #12]
    e81a:	2200      	movs	r2, #0
    e81c:	729a      	strb	r2, [r3, #10]
}
    e81e:	bf00      	nop
    e820:	3714      	adds	r7, #20
    e822:	46bd      	mov	sp, r7
    e824:	f85d 7b04 	ldr.w	r7, [sp], #4
    e828:	4770      	bx	lr
    e82a:	bf00      	nop
    e82c:	20008d18 	.word	0x20008d18

0000e830 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    e830:	b580      	push	{r7, lr}
    e832:	b082      	sub	sp, #8
    e834:	af00      	add	r7, sp, #0
    e836:	4603      	mov	r3, r0
    e838:	71fb      	strb	r3, [r7, #7]
    e83a:	460b      	mov	r3, r1
    e83c:	71bb      	strb	r3, [r7, #6]
    e83e:	4613      	mov	r3, r2
    e840:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    e842:	797b      	ldrb	r3, [r7, #5]
    e844:	2b00      	cmp	r3, #0
    e846:	d00b      	beq.n	e860 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e848:	79bb      	ldrb	r3, [r7, #6]
    e84a:	2240      	movs	r2, #64	; 0x40
    e84c:	fa02 f303 	lsl.w	r3, r2, r3
    e850:	b2da      	uxtb	r2, r3
    e852:	79fb      	ldrb	r3, [r7, #7]
    e854:	4619      	mov	r1, r3
    e856:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e85a:	4b09      	ldr	r3, [pc, #36]	; (e880 <_usbd_ep_set_in_rdy+0x50>)
    e85c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    e85e:	e00a      	b.n	e876 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e860:	79bb      	ldrb	r3, [r7, #6]
    e862:	2240      	movs	r2, #64	; 0x40
    e864:	fa02 f303 	lsl.w	r3, r2, r3
    e868:	b2da      	uxtb	r2, r3
    e86a:	79fb      	ldrb	r3, [r7, #7]
    e86c:	4619      	mov	r1, r3
    e86e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e872:	4b04      	ldr	r3, [pc, #16]	; (e884 <_usbd_ep_set_in_rdy+0x54>)
    e874:	4798      	blx	r3
}
    e876:	bf00      	nop
    e878:	3708      	adds	r7, #8
    e87a:	46bd      	mov	sp, r7
    e87c:	bd80      	pop	{r7, pc}
    e87e:	bf00      	nop
    e880:	0000de3d 	.word	0x0000de3d
    e884:	0000de91 	.word	0x0000de91

0000e888 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    e888:	b580      	push	{r7, lr}
    e88a:	b082      	sub	sp, #8
    e88c:	af00      	add	r7, sp, #0
    e88e:	4603      	mov	r3, r0
    e890:	71fb      	strb	r3, [r7, #7]
    e892:	460b      	mov	r3, r1
    e894:	71bb      	strb	r3, [r7, #6]
    e896:	4613      	mov	r3, r2
    e898:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    e89a:	797b      	ldrb	r3, [r7, #5]
    e89c:	2b00      	cmp	r3, #0
    e89e:	d00b      	beq.n	e8b8 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e8a0:	79bb      	ldrb	r3, [r7, #6]
    e8a2:	2240      	movs	r2, #64	; 0x40
    e8a4:	fa02 f303 	lsl.w	r3, r2, r3
    e8a8:	b2da      	uxtb	r2, r3
    e8aa:	79fb      	ldrb	r3, [r7, #7]
    e8ac:	4619      	mov	r1, r3
    e8ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e8b2:	4b09      	ldr	r3, [pc, #36]	; (e8d8 <_usbd_ep_set_out_rdy+0x50>)
    e8b4:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    e8b6:	e00a      	b.n	e8ce <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e8b8:	79bb      	ldrb	r3, [r7, #6]
    e8ba:	2240      	movs	r2, #64	; 0x40
    e8bc:	fa02 f303 	lsl.w	r3, r2, r3
    e8c0:	b2da      	uxtb	r2, r3
    e8c2:	79fb      	ldrb	r3, [r7, #7]
    e8c4:	4619      	mov	r1, r3
    e8c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e8ca:	4b04      	ldr	r3, [pc, #16]	; (e8dc <_usbd_ep_set_out_rdy+0x54>)
    e8cc:	4798      	blx	r3
}
    e8ce:	bf00      	nop
    e8d0:	3708      	adds	r7, #8
    e8d2:	46bd      	mov	sp, r7
    e8d4:	bd80      	pop	{r7, pc}
    e8d6:	bf00      	nop
    e8d8:	0000de91 	.word	0x0000de91
    e8dc:	0000de3d 	.word	0x0000de3d

0000e8e0 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    e8e0:	b480      	push	{r7}
    e8e2:	b083      	sub	sp, #12
    e8e4:	af00      	add	r7, sp, #0
    e8e6:	4603      	mov	r3, r0
    e8e8:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    e8ea:	88fb      	ldrh	r3, [r7, #6]
    e8ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e8f0:	d820      	bhi.n	e934 <_usbd_ep_pcksize_size+0x54>
    e8f2:	88fb      	ldrh	r3, [r7, #6]
    e8f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e8f8:	d81a      	bhi.n	e930 <_usbd_ep_pcksize_size+0x50>
    e8fa:	88fb      	ldrh	r3, [r7, #6]
    e8fc:	2b80      	cmp	r3, #128	; 0x80
    e8fe:	d815      	bhi.n	e92c <_usbd_ep_pcksize_size+0x4c>
    e900:	88fb      	ldrh	r3, [r7, #6]
    e902:	2b40      	cmp	r3, #64	; 0x40
    e904:	d810      	bhi.n	e928 <_usbd_ep_pcksize_size+0x48>
    e906:	88fb      	ldrh	r3, [r7, #6]
    e908:	2b20      	cmp	r3, #32
    e90a:	d80b      	bhi.n	e924 <_usbd_ep_pcksize_size+0x44>
    e90c:	88fb      	ldrh	r3, [r7, #6]
    e90e:	2b10      	cmp	r3, #16
    e910:	d806      	bhi.n	e920 <_usbd_ep_pcksize_size+0x40>
    e912:	88fb      	ldrh	r3, [r7, #6]
    e914:	2b08      	cmp	r3, #8
    e916:	bf8c      	ite	hi
    e918:	2301      	movhi	r3, #1
    e91a:	2300      	movls	r3, #0
    e91c:	b2db      	uxtb	r3, r3
    e91e:	e00a      	b.n	e936 <_usbd_ep_pcksize_size+0x56>
    e920:	2302      	movs	r3, #2
    e922:	e008      	b.n	e936 <_usbd_ep_pcksize_size+0x56>
    e924:	2303      	movs	r3, #3
    e926:	e006      	b.n	e936 <_usbd_ep_pcksize_size+0x56>
    e928:	2304      	movs	r3, #4
    e92a:	e004      	b.n	e936 <_usbd_ep_pcksize_size+0x56>
    e92c:	2305      	movs	r3, #5
    e92e:	e002      	b.n	e936 <_usbd_ep_pcksize_size+0x56>
    e930:	2306      	movs	r3, #6
    e932:	e000      	b.n	e936 <_usbd_ep_pcksize_size+0x56>
    e934:	2307      	movs	r3, #7
}
    e936:	4618      	mov	r0, r3
    e938:	370c      	adds	r7, #12
    e93a:	46bd      	mov	sp, r7
    e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e940:	4770      	bx	lr
	...

0000e944 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    e944:	b480      	push	{r7}
    e946:	b085      	sub	sp, #20
    e948:	af00      	add	r7, sp, #0
    e94a:	4603      	mov	r3, r0
    e94c:	460a      	mov	r2, r1
    e94e:	71fb      	strb	r3, [r7, #7]
    e950:	4613      	mov	r3, r2
    e952:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    e954:	79fb      	ldrb	r3, [r7, #7]
    e956:	2b00      	cmp	r3, #0
    e958:	d008      	beq.n	e96c <_usb_d_dev_ept+0x28>
    e95a:	79bb      	ldrb	r3, [r7, #6]
    e95c:	2b00      	cmp	r3, #0
    e95e:	d003      	beq.n	e968 <_usb_d_dev_ept+0x24>
    e960:	79fb      	ldrb	r3, [r7, #7]
    e962:	3304      	adds	r3, #4
    e964:	b2db      	uxtb	r3, r3
    e966:	e002      	b.n	e96e <_usb_d_dev_ept+0x2a>
    e968:	79fb      	ldrb	r3, [r7, #7]
    e96a:	e000      	b.n	e96e <_usb_d_dev_ept+0x2a>
    e96c:	2300      	movs	r3, #0
    e96e:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    e970:	7bfa      	ldrb	r2, [r7, #15]
    e972:	4613      	mov	r3, r2
    e974:	009b      	lsls	r3, r3, #2
    e976:	4413      	add	r3, r2
    e978:	009b      	lsls	r3, r3, #2
    e97a:	3310      	adds	r3, #16
    e97c:	4a04      	ldr	r2, [pc, #16]	; (e990 <_usb_d_dev_ept+0x4c>)
    e97e:	4413      	add	r3, r2
    e980:	3304      	adds	r3, #4
}
    e982:	4618      	mov	r0, r3
    e984:	3714      	adds	r7, #20
    e986:	46bd      	mov	sp, r7
    e988:	f85d 7b04 	ldr.w	r7, [sp], #4
    e98c:	4770      	bx	lr
    e98e:	bf00      	nop
    e990:	20008c50 	.word	0x20008c50

0000e994 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    e994:	b580      	push	{r7, lr}
    e996:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    e998:	2104      	movs	r1, #4
    e99a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e99e:	4b03      	ldr	r3, [pc, #12]	; (e9ac <_usb_d_dev_sof+0x18>)
    e9a0:	4798      	blx	r3
	dev_inst.callbacks.sof();
    e9a2:	4b03      	ldr	r3, [pc, #12]	; (e9b0 <_usb_d_dev_sof+0x1c>)
    e9a4:	681b      	ldr	r3, [r3, #0]
    e9a6:	4798      	blx	r3
}
    e9a8:	bf00      	nop
    e9aa:	bd80      	pop	{r7, pc}
    e9ac:	0000e00b 	.word	0x0000e00b
    e9b0:	20008c50 	.word	0x20008c50

0000e9b4 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    e9b4:	b580      	push	{r7, lr}
    e9b6:	b084      	sub	sp, #16
    e9b8:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    e9ba:	2300      	movs	r3, #0
    e9bc:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e9be:	f240 2101 	movw	r1, #513	; 0x201
    e9c2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e9c6:	4b1a      	ldr	r3, [pc, #104]	; (ea30 <_usb_d_dev_lpmsusp+0x7c>)
    e9c8:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e9ca:	f240 2101 	movw	r1, #513	; 0x201
    e9ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e9d2:	4b18      	ldr	r3, [pc, #96]	; (ea34 <_usb_d_dev_lpmsusp+0x80>)
    e9d4:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e9d6:	2170      	movs	r1, #112	; 0x70
    e9d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e9dc:	4b16      	ldr	r3, [pc, #88]	; (ea38 <_usb_d_dev_lpmsusp+0x84>)
    e9de:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    e9e0:	2300      	movs	r3, #0
    e9e2:	73fb      	strb	r3, [r7, #15]
    e9e4:	e018      	b.n	ea18 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    e9e6:	7bfb      	ldrb	r3, [r7, #15]
    e9e8:	015b      	lsls	r3, r3, #5
    e9ea:	4a14      	ldr	r2, [pc, #80]	; (ea3c <_usb_d_dev_lpmsusp+0x88>)
    e9ec:	4413      	add	r3, r2
    e9ee:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    e9f0:	687b      	ldr	r3, [r7, #4]
    e9f2:	891b      	ldrh	r3, [r3, #8]
    e9f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    e9f8:	b2db      	uxtb	r3, r3
    e9fa:	2b03      	cmp	r3, #3
    e9fc:	d109      	bne.n	ea12 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    e9fe:	687b      	ldr	r3, [r7, #4]
    ea00:	891b      	ldrh	r3, [r3, #8]
    ea02:	f3c3 130a 	ubfx	r3, r3, #4, #11
    ea06:	b29b      	uxth	r3, r3
    ea08:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    ea0a:	687b      	ldr	r3, [r7, #4]
    ea0c:	2200      	movs	r2, #0
    ea0e:	811a      	strh	r2, [r3, #8]
			break;
    ea10:	e005      	b.n	ea1e <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    ea12:	7bfb      	ldrb	r3, [r7, #15]
    ea14:	3301      	adds	r3, #1
    ea16:	73fb      	strb	r3, [r7, #15]
    ea18:	7bfb      	ldrb	r3, [r7, #15]
    ea1a:	2b03      	cmp	r3, #3
    ea1c:	d9e3      	bls.n	e9e6 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    ea1e:	4b08      	ldr	r3, [pc, #32]	; (ea40 <_usb_d_dev_lpmsusp+0x8c>)
    ea20:	685b      	ldr	r3, [r3, #4]
    ea22:	68b9      	ldr	r1, [r7, #8]
    ea24:	2003      	movs	r0, #3
    ea26:	4798      	blx	r3
}
    ea28:	bf00      	nop
    ea2a:	3710      	adds	r7, #16
    ea2c:	46bd      	mov	sp, r7
    ea2e:	bd80      	pop	{r7, pc}
    ea30:	0000e00b 	.word	0x0000e00b
    ea34:	0000e061 	.word	0x0000e061
    ea38:	0000e029 	.word	0x0000e029
    ea3c:	20008d18 	.word	0x20008d18
    ea40:	20008c50 	.word	0x20008c50

0000ea44 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    ea44:	b580      	push	{r7, lr}
    ea46:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    ea48:	2180      	movs	r1, #128	; 0x80
    ea4a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea4e:	4b04      	ldr	r3, [pc, #16]	; (ea60 <_usb_d_dev_ramerr+0x1c>)
    ea50:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    ea52:	4b04      	ldr	r3, [pc, #16]	; (ea64 <_usb_d_dev_ramerr+0x20>)
    ea54:	685b      	ldr	r3, [r3, #4]
    ea56:	2100      	movs	r1, #0
    ea58:	2005      	movs	r0, #5
    ea5a:	4798      	blx	r3
}
    ea5c:	bf00      	nop
    ea5e:	bd80      	pop	{r7, pc}
    ea60:	0000e00b 	.word	0x0000e00b
    ea64:	20008c50 	.word	0x20008c50

0000ea68 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    ea68:	b580      	push	{r7, lr}
    ea6a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ea6c:	2170      	movs	r1, #112	; 0x70
    ea6e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea72:	4b0b      	ldr	r3, [pc, #44]	; (eaa0 <_usb_d_dev_wakeup+0x38>)
    ea74:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    ea76:	2170      	movs	r1, #112	; 0x70
    ea78:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea7c:	4b09      	ldr	r3, [pc, #36]	; (eaa4 <_usb_d_dev_wakeup+0x3c>)
    ea7e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ea80:	f240 2101 	movw	r1, #513	; 0x201
    ea84:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ea88:	4b07      	ldr	r3, [pc, #28]	; (eaa8 <_usb_d_dev_wakeup+0x40>)
    ea8a:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    ea8c:	2000      	movs	r0, #0
    ea8e:	4b07      	ldr	r3, [pc, #28]	; (eaac <_usb_d_dev_wakeup+0x44>)
    ea90:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    ea92:	4b07      	ldr	r3, [pc, #28]	; (eab0 <_usb_d_dev_wakeup+0x48>)
    ea94:	685b      	ldr	r3, [r3, #4]
    ea96:	2100      	movs	r1, #0
    ea98:	2002      	movs	r0, #2
    ea9a:	4798      	blx	r3
}
    ea9c:	bf00      	nop
    ea9e:	bd80      	pop	{r7, pc}
    eaa0:	0000e00b 	.word	0x0000e00b
    eaa4:	0000e061 	.word	0x0000e061
    eaa8:	0000e029 	.word	0x0000e029
    eaac:	0000e309 	.word	0x0000e309
    eab0:	20008c50 	.word	0x20008c50

0000eab4 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    eab4:	b580      	push	{r7, lr}
    eab6:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    eab8:	2200      	movs	r2, #0
    eaba:	2100      	movs	r1, #0
    eabc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eac0:	4b0d      	ldr	r3, [pc, #52]	; (eaf8 <_usb_d_dev_reset+0x44>)
    eac2:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    eac4:	2108      	movs	r1, #8
    eac6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eaca:	4b0c      	ldr	r3, [pc, #48]	; (eafc <_usb_d_dev_reset+0x48>)
    eacc:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    eace:	2170      	movs	r1, #112	; 0x70
    ead0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ead4:	4b0a      	ldr	r3, [pc, #40]	; (eb00 <_usb_d_dev_reset+0x4c>)
    ead6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    ead8:	f240 2101 	movw	r1, #513	; 0x201
    eadc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eae0:	4b08      	ldr	r3, [pc, #32]	; (eb04 <_usb_d_dev_reset+0x50>)
    eae2:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    eae4:	4b08      	ldr	r3, [pc, #32]	; (eb08 <_usb_d_dev_reset+0x54>)
    eae6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    eae8:	4b08      	ldr	r3, [pc, #32]	; (eb0c <_usb_d_dev_reset+0x58>)
    eaea:	685b      	ldr	r3, [r3, #4]
    eaec:	2100      	movs	r1, #0
    eaee:	2001      	movs	r0, #1
    eaf0:	4798      	blx	r3
}
    eaf2:	bf00      	nop
    eaf4:	bd80      	pop	{r7, pc}
    eaf6:	bf00      	nop
    eaf8:	0000dfa1 	.word	0x0000dfa1
    eafc:	0000e00b 	.word	0x0000e00b
    eb00:	0000e061 	.word	0x0000e061
    eb04:	0000e029 	.word	0x0000e029
    eb08:	0000f671 	.word	0x0000f671
    eb0c:	20008c50 	.word	0x20008c50

0000eb10 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    eb10:	b580      	push	{r7, lr}
    eb12:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    eb14:	f240 2101 	movw	r1, #513	; 0x201
    eb18:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eb1c:	4b09      	ldr	r3, [pc, #36]	; (eb44 <_usb_d_dev_suspend+0x34>)
    eb1e:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    eb20:	f240 2101 	movw	r1, #513	; 0x201
    eb24:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eb28:	4b07      	ldr	r3, [pc, #28]	; (eb48 <_usb_d_dev_suspend+0x38>)
    eb2a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    eb2c:	2170      	movs	r1, #112	; 0x70
    eb2e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eb32:	4b06      	ldr	r3, [pc, #24]	; (eb4c <_usb_d_dev_suspend+0x3c>)
    eb34:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    eb36:	4b06      	ldr	r3, [pc, #24]	; (eb50 <_usb_d_dev_suspend+0x40>)
    eb38:	685b      	ldr	r3, [r3, #4]
    eb3a:	2100      	movs	r1, #0
    eb3c:	2004      	movs	r0, #4
    eb3e:	4798      	blx	r3
}
    eb40:	bf00      	nop
    eb42:	bd80      	pop	{r7, pc}
    eb44:	0000e00b 	.word	0x0000e00b
    eb48:	0000e061 	.word	0x0000e061
    eb4c:	0000e029 	.word	0x0000e029
    eb50:	20008c50 	.word	0x20008c50

0000eb54 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    eb54:	b580      	push	{r7, lr}
    eb56:	b082      	sub	sp, #8
    eb58:	af00      	add	r7, sp, #0
	bool     rc    = true;
    eb5a:	2301      	movs	r3, #1
    eb5c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    eb5e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eb62:	4b22      	ldr	r3, [pc, #136]	; (ebec <_usb_d_dev_handle_nep+0x98>)
    eb64:	4798      	blx	r3
    eb66:	4603      	mov	r3, r0
    eb68:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    eb6a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    eb6e:	4b20      	ldr	r3, [pc, #128]	; (ebf0 <_usb_d_dev_handle_nep+0x9c>)
    eb70:	4798      	blx	r3
    eb72:	4603      	mov	r3, r0
    eb74:	461a      	mov	r2, r3
    eb76:	88bb      	ldrh	r3, [r7, #4]
    eb78:	4013      	ands	r3, r2
    eb7a:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    eb7c:	88bb      	ldrh	r3, [r7, #4]
    eb7e:	f003 0304 	and.w	r3, r3, #4
    eb82:	2b00      	cmp	r3, #0
    eb84:	d003      	beq.n	eb8e <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    eb86:	4b1b      	ldr	r3, [pc, #108]	; (ebf4 <_usb_d_dev_handle_nep+0xa0>)
    eb88:	4798      	blx	r3
		return true;
    eb8a:	2301      	movs	r3, #1
    eb8c:	e02a      	b.n	ebe4 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    eb8e:	88bb      	ldrh	r3, [r7, #4]
    eb90:	f403 7300 	and.w	r3, r3, #512	; 0x200
    eb94:	2b00      	cmp	r3, #0
    eb96:	d002      	beq.n	eb9e <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    eb98:	4b17      	ldr	r3, [pc, #92]	; (ebf8 <_usb_d_dev_handle_nep+0xa4>)
    eb9a:	4798      	blx	r3
    eb9c:	e021      	b.n	ebe2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    eb9e:	88bb      	ldrh	r3, [r7, #4]
    eba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    eba4:	2b00      	cmp	r3, #0
    eba6:	d002      	beq.n	ebae <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    eba8:	4b14      	ldr	r3, [pc, #80]	; (ebfc <_usb_d_dev_handle_nep+0xa8>)
    ebaa:	4798      	blx	r3
    ebac:	e019      	b.n	ebe2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    ebae:	88bb      	ldrh	r3, [r7, #4]
    ebb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ebb4:	2b00      	cmp	r3, #0
    ebb6:	d002      	beq.n	ebbe <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    ebb8:	4b11      	ldr	r3, [pc, #68]	; (ec00 <_usb_d_dev_handle_nep+0xac>)
    ebba:	4798      	blx	r3
    ebbc:	e011      	b.n	ebe2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    ebbe:	88bb      	ldrh	r3, [r7, #4]
    ebc0:	f003 0308 	and.w	r3, r3, #8
    ebc4:	2b00      	cmp	r3, #0
    ebc6:	d002      	beq.n	ebce <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    ebc8:	4b0e      	ldr	r3, [pc, #56]	; (ec04 <_usb_d_dev_handle_nep+0xb0>)
    ebca:	4798      	blx	r3
    ebcc:	e009      	b.n	ebe2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    ebce:	88bb      	ldrh	r3, [r7, #4]
    ebd0:	f003 0301 	and.w	r3, r3, #1
    ebd4:	2b00      	cmp	r3, #0
    ebd6:	d002      	beq.n	ebde <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    ebd8:	4b0b      	ldr	r3, [pc, #44]	; (ec08 <_usb_d_dev_handle_nep+0xb4>)
    ebda:	4798      	blx	r3
    ebdc:	e001      	b.n	ebe2 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    ebde:	2300      	movs	r3, #0
    ebe0:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    ebe2:	79fb      	ldrb	r3, [r7, #7]
}
    ebe4:	4618      	mov	r0, r3
    ebe6:	3708      	adds	r7, #8
    ebe8:	46bd      	mov	sp, r7
    ebea:	bd80      	pop	{r7, pc}
    ebec:	0000dff1 	.word	0x0000dff1
    ebf0:	0000e047 	.word	0x0000e047
    ebf4:	0000e995 	.word	0x0000e995
    ebf8:	0000e9b5 	.word	0x0000e9b5
    ebfc:	0000ea45 	.word	0x0000ea45
    ec00:	0000ea69 	.word	0x0000ea69
    ec04:	0000eab5 	.word	0x0000eab5
    ec08:	0000eb11 	.word	0x0000eb11

0000ec0c <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    ec0c:	b590      	push	{r4, r7, lr}
    ec0e:	b089      	sub	sp, #36	; 0x24
    ec10:	af00      	add	r7, sp, #0
    ec12:	6078      	str	r0, [r7, #4]
    ec14:	460b      	mov	r3, r1
    ec16:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    ec18:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ec1c:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    ec1e:	687b      	ldr	r3, [r7, #4]
    ec20:	7c9b      	ldrb	r3, [r3, #18]
    ec22:	f003 030f 	and.w	r3, r3, #15
    ec26:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    ec28:	7dfb      	ldrb	r3, [r7, #23]
    ec2a:	015b      	lsls	r3, r3, #5
    ec2c:	4a73      	ldr	r2, [pc, #460]	; (edfc <_usb_d_dev_in_next+0x1f0>)
    ec2e:	4413      	add	r3, r2
    ec30:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    ec32:	78fb      	ldrb	r3, [r7, #3]
    ec34:	2b00      	cmp	r3, #0
    ec36:	d006      	beq.n	ec46 <_usb_d_dev_in_next+0x3a>
    ec38:	693b      	ldr	r3, [r7, #16]
    ec3a:	3310      	adds	r3, #16
    ec3c:	685b      	ldr	r3, [r3, #4]
    ec3e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ec42:	b29b      	uxth	r3, r3
    ec44:	e000      	b.n	ec48 <_usb_d_dev_in_next+0x3c>
    ec46:	2300      	movs	r3, #0
    ec48:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    ec4a:	687b      	ldr	r3, [r7, #4]
    ec4c:	8a1b      	ldrh	r3, [r3, #16]
    ec4e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ec52:	4293      	cmp	r3, r2
    ec54:	d103      	bne.n	ec5e <_usb_d_dev_in_next+0x52>
    ec56:	687b      	ldr	r3, [r7, #4]
    ec58:	8a1b      	ldrh	r3, [r3, #16]
    ec5a:	b21b      	sxth	r3, r3
    ec5c:	e004      	b.n	ec68 <_usb_d_dev_in_next+0x5c>
    ec5e:	687b      	ldr	r3, [r7, #4]
    ec60:	8a1b      	ldrh	r3, [r3, #16]
    ec62:	3b01      	subs	r3, #1
    ec64:	b29b      	uxth	r3, r3
    ec66:	b21b      	sxth	r3, r3
    ec68:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    ec6c:	4013      	ands	r3, r2
    ec6e:	b21b      	sxth	r3, r3
    ec70:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    ec72:	2300      	movs	r3, #0
    ec74:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    ec76:	687b      	ldr	r3, [r7, #4]
    ec78:	7cdb      	ldrb	r3, [r3, #19]
    ec7a:	f003 0307 	and.w	r3, r3, #7
    ec7e:	b2db      	uxtb	r3, r3
    ec80:	2b01      	cmp	r3, #1
    ec82:	bf0c      	ite	eq
    ec84:	2301      	moveq	r3, #1
    ec86:	2300      	movne	r3, #0
    ec88:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    ec8a:	78fb      	ldrb	r3, [r7, #3]
    ec8c:	2b00      	cmp	r3, #0
    ec8e:	d004      	beq.n	ec9a <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    ec90:	7dfb      	ldrb	r3, [r7, #23]
    ec92:	2101      	movs	r1, #1
    ec94:	4618      	mov	r0, r3
    ec96:	4b5a      	ldr	r3, [pc, #360]	; (ee00 <_usb_d_dev_in_next+0x1f4>)
    ec98:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    ec9a:	687b      	ldr	r3, [r7, #4]
    ec9c:	689a      	ldr	r2, [r3, #8]
    ec9e:	89fb      	ldrh	r3, [r7, #14]
    eca0:	441a      	add	r2, r3
    eca2:	687b      	ldr	r3, [r7, #4]
    eca4:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    eca6:	687b      	ldr	r3, [r7, #4]
    eca8:	689a      	ldr	r2, [r3, #8]
    ecaa:	687b      	ldr	r3, [r7, #4]
    ecac:	685b      	ldr	r3, [r3, #4]
    ecae:	429a      	cmp	r2, r3
    ecb0:	d243      	bcs.n	ed3a <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    ecb2:	687b      	ldr	r3, [r7, #4]
    ecb4:	685b      	ldr	r3, [r3, #4]
    ecb6:	b29a      	uxth	r2, r3
    ecb8:	687b      	ldr	r3, [r7, #4]
    ecba:	689b      	ldr	r3, [r3, #8]
    ecbc:	b29b      	uxth	r3, r3
    ecbe:	1ad3      	subs	r3, r2, r3
    ecc0:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    ecc2:	687b      	ldr	r3, [r7, #4]
    ecc4:	7cdb      	ldrb	r3, [r3, #19]
    ecc6:	f003 0320 	and.w	r3, r3, #32
    ecca:	b2db      	uxtb	r3, r3
    eccc:	2b00      	cmp	r3, #0
    ecce:	d01b      	beq.n	ed08 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    ecd0:	687b      	ldr	r3, [r7, #4]
    ecd2:	8a1b      	ldrh	r3, [r3, #16]
    ecd4:	8bfa      	ldrh	r2, [r7, #30]
    ecd6:	429a      	cmp	r2, r3
    ecd8:	d902      	bls.n	ece0 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    ecda:	687b      	ldr	r3, [r7, #4]
    ecdc:	8a1b      	ldrh	r3, [r3, #16]
    ecde:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    ece0:	687b      	ldr	r3, [r7, #4]
    ece2:	68d8      	ldr	r0, [r3, #12]
    ece4:	687b      	ldr	r3, [r7, #4]
    ece6:	681a      	ldr	r2, [r3, #0]
    ece8:	687b      	ldr	r3, [r7, #4]
    ecea:	689b      	ldr	r3, [r3, #8]
    ecec:	4413      	add	r3, r2
    ecee:	8bfa      	ldrh	r2, [r7, #30]
    ecf0:	4619      	mov	r1, r3
    ecf2:	4b44      	ldr	r3, [pc, #272]	; (ee04 <_usb_d_dev_in_next+0x1f8>)
    ecf4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    ecf6:	687b      	ldr	r3, [r7, #4]
    ecf8:	68db      	ldr	r3, [r3, #12]
    ecfa:	461a      	mov	r2, r3
    ecfc:	7dfb      	ldrb	r3, [r7, #23]
    ecfe:	2101      	movs	r1, #1
    ed00:	4618      	mov	r0, r3
    ed02:	4b41      	ldr	r3, [pc, #260]	; (ee08 <_usb_d_dev_in_next+0x1fc>)
    ed04:	4798      	blx	r3
    ed06:	e011      	b.n	ed2c <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    ed08:	8bfb      	ldrh	r3, [r7, #30]
    ed0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    ed0e:	d902      	bls.n	ed16 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    ed10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ed14:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    ed16:	687b      	ldr	r3, [r7, #4]
    ed18:	681a      	ldr	r2, [r3, #0]
    ed1a:	687b      	ldr	r3, [r7, #4]
    ed1c:	689b      	ldr	r3, [r3, #8]
    ed1e:	4413      	add	r3, r2
    ed20:	461a      	mov	r2, r3
    ed22:	7dfb      	ldrb	r3, [r7, #23]
    ed24:	2101      	movs	r1, #1
    ed26:	4618      	mov	r0, r3
    ed28:	4b37      	ldr	r3, [pc, #220]	; (ee08 <_usb_d_dev_in_next+0x1fc>)
    ed2a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    ed2c:	8bfa      	ldrh	r2, [r7, #30]
    ed2e:	7df8      	ldrb	r0, [r7, #23]
    ed30:	2300      	movs	r3, #0
    ed32:	2101      	movs	r1, #1
    ed34:	4c35      	ldr	r4, [pc, #212]	; (ee0c <_usb_d_dev_in_next+0x200>)
    ed36:	47a0      	blx	r4
		goto _in_tx_exec;
    ed38:	e041      	b.n	edbe <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    ed3a:	687b      	ldr	r3, [r7, #4]
    ed3c:	7cdb      	ldrb	r3, [r3, #19]
    ed3e:	f003 0310 	and.w	r3, r3, #16
    ed42:	b2db      	uxtb	r3, r3
    ed44:	2b00      	cmp	r3, #0
    ed46:	d00b      	beq.n	ed60 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    ed48:	687a      	ldr	r2, [r7, #4]
    ed4a:	7cd3      	ldrb	r3, [r2, #19]
    ed4c:	f36f 1304 	bfc	r3, #4, #1
    ed50:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    ed52:	7df8      	ldrb	r0, [r7, #23]
    ed54:	2300      	movs	r3, #0
    ed56:	2200      	movs	r2, #0
    ed58:	2101      	movs	r1, #1
    ed5a:	4c2c      	ldr	r4, [pc, #176]	; (ee0c <_usb_d_dev_in_next+0x200>)
    ed5c:	47a0      	blx	r4
		goto _in_tx_exec;
    ed5e:	e02e      	b.n	edbe <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    ed60:	7afb      	ldrb	r3, [r7, #11]
    ed62:	2b00      	cmp	r3, #0
    ed64:	d006      	beq.n	ed74 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    ed66:	7dfb      	ldrb	r3, [r7, #23]
    ed68:	224b      	movs	r2, #75	; 0x4b
    ed6a:	4619      	mov	r1, r3
    ed6c:	69b8      	ldr	r0, [r7, #24]
    ed6e:	4b28      	ldr	r3, [pc, #160]	; (ee10 <_usb_d_dev_in_next+0x204>)
    ed70:	4798      	blx	r3
    ed72:	e005      	b.n	ed80 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    ed74:	7dfb      	ldrb	r3, [r7, #23]
    ed76:	224a      	movs	r2, #74	; 0x4a
    ed78:	4619      	mov	r1, r3
    ed7a:	69b8      	ldr	r0, [r7, #24]
    ed7c:	4b24      	ldr	r3, [pc, #144]	; (ee10 <_usb_d_dev_in_next+0x204>)
    ed7e:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    ed80:	687b      	ldr	r3, [r7, #4]
    ed82:	8a1b      	ldrh	r3, [r3, #16]
    ed84:	89ba      	ldrh	r2, [r7, #12]
    ed86:	429a      	cmp	r2, r3
    ed88:	d114      	bne.n	edb4 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    ed8a:	687a      	ldr	r2, [r7, #4]
    ed8c:	7cd3      	ldrb	r3, [r2, #19]
    ed8e:	f36f 1386 	bfc	r3, #6, #1
    ed92:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    ed94:	4b1f      	ldr	r3, [pc, #124]	; (ee14 <_usb_d_dev_in_next+0x208>)
    ed96:	68db      	ldr	r3, [r3, #12]
    ed98:	687a      	ldr	r2, [r7, #4]
    ed9a:	7c90      	ldrb	r0, [r2, #18]
    ed9c:	687a      	ldr	r2, [r7, #4]
    ed9e:	6892      	ldr	r2, [r2, #8]
    eda0:	4611      	mov	r1, r2
    eda2:	4798      	blx	r3
    eda4:	4603      	mov	r3, r0
    eda6:	2b00      	cmp	r3, #0
    eda8:	d124      	bne.n	edf4 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    edaa:	687a      	ldr	r2, [r7, #4]
    edac:	7cd3      	ldrb	r3, [r2, #19]
    edae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    edb2:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    edb4:	2100      	movs	r1, #0
    edb6:	6878      	ldr	r0, [r7, #4]
    edb8:	4b17      	ldr	r3, [pc, #92]	; (ee18 <_usb_d_dev_in_next+0x20c>)
    edba:	4798      	blx	r3
	return;
    edbc:	e01b      	b.n	edf6 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    edbe:	78fb      	ldrb	r3, [r7, #3]
    edc0:	f083 0301 	eor.w	r3, r3, #1
    edc4:	b2db      	uxtb	r3, r3
    edc6:	2b00      	cmp	r3, #0
    edc8:	d00d      	beq.n	ede6 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    edca:	7afb      	ldrb	r3, [r7, #11]
    edcc:	2b00      	cmp	r3, #0
    edce:	d002      	beq.n	edd6 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    edd0:	234e      	movs	r3, #78	; 0x4e
    edd2:	777b      	strb	r3, [r7, #29]
    edd4:	e001      	b.n	edda <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    edd6:	234a      	movs	r3, #74	; 0x4a
    edd8:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    edda:	7f7a      	ldrb	r2, [r7, #29]
    eddc:	7dfb      	ldrb	r3, [r7, #23]
    edde:	4619      	mov	r1, r3
    ede0:	69b8      	ldr	r0, [r7, #24]
    ede2:	4b0e      	ldr	r3, [pc, #56]	; (ee1c <_usb_d_dev_in_next+0x210>)
    ede4:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    ede6:	7dfb      	ldrb	r3, [r7, #23]
    ede8:	2201      	movs	r2, #1
    edea:	2101      	movs	r1, #1
    edec:	4618      	mov	r0, r3
    edee:	4b0c      	ldr	r3, [pc, #48]	; (ee20 <_usb_d_dev_in_next+0x214>)
    edf0:	4798      	blx	r3
    edf2:	e000      	b.n	edf6 <_usb_d_dev_in_next+0x1ea>
			return;
    edf4:	bf00      	nop
}
    edf6:	3724      	adds	r7, #36	; 0x24
    edf8:	46bd      	mov	sp, r7
    edfa:	bd90      	pop	{r4, r7, pc}
    edfc:	20008d18 	.word	0x20008d18
    ee00:	0000e605 	.word	0x0000e605
    ee04:	0001c485 	.word	0x0001c485
    ee08:	0000e631 	.word	0x0000e631
    ee0c:	0000e779 	.word	0x0000e779
    ee10:	0000df11 	.word	0x0000df11
    ee14:	20008c50 	.word	0x20008c50
    ee18:	0000ff35 	.word	0x0000ff35
    ee1c:	0000dee5 	.word	0x0000dee5
    ee20:	0000e831 	.word	0x0000e831

0000ee24 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    ee24:	b590      	push	{r4, r7, lr}
    ee26:	b08b      	sub	sp, #44	; 0x2c
    ee28:	af00      	add	r7, sp, #0
    ee2a:	6078      	str	r0, [r7, #4]
    ee2c:	460b      	mov	r3, r1
    ee2e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    ee30:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ee34:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    ee36:	687b      	ldr	r3, [r7, #4]
    ee38:	7c9b      	ldrb	r3, [r3, #18]
    ee3a:	f003 030f 	and.w	r3, r3, #15
    ee3e:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    ee40:	7ffb      	ldrb	r3, [r7, #31]
    ee42:	015b      	lsls	r3, r3, #5
    ee44:	4a94      	ldr	r2, [pc, #592]	; (f098 <_usb_d_dev_out_next+0x274>)
    ee46:	4413      	add	r3, r2
    ee48:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    ee4a:	78fb      	ldrb	r3, [r7, #3]
    ee4c:	2b00      	cmp	r3, #0
    ee4e:	d005      	beq.n	ee5c <_usb_d_dev_out_next+0x38>
    ee50:	69bb      	ldr	r3, [r7, #24]
    ee52:	685b      	ldr	r3, [r3, #4]
    ee54:	f3c3 338d 	ubfx	r3, r3, #14, #14
    ee58:	b29b      	uxth	r3, r3
    ee5a:	e000      	b.n	ee5e <_usb_d_dev_out_next+0x3a>
    ee5c:	2300      	movs	r3, #0
    ee5e:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    ee60:	78fb      	ldrb	r3, [r7, #3]
    ee62:	2b00      	cmp	r3, #0
    ee64:	d005      	beq.n	ee72 <_usb_d_dev_out_next+0x4e>
    ee66:	69bb      	ldr	r3, [r7, #24]
    ee68:	685b      	ldr	r3, [r3, #4]
    ee6a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ee6e:	b29b      	uxth	r3, r3
    ee70:	e000      	b.n	ee74 <_usb_d_dev_out_next+0x50>
    ee72:	2300      	movs	r3, #0
    ee74:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ee76:	687b      	ldr	r3, [r7, #4]
    ee78:	8a1b      	ldrh	r3, [r3, #16]
    ee7a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    ee7e:	4293      	cmp	r3, r2
    ee80:	d004      	beq.n	ee8c <_usb_d_dev_out_next+0x68>
    ee82:	687b      	ldr	r3, [r7, #4]
    ee84:	8a1b      	ldrh	r3, [r3, #16]
    ee86:	3b01      	subs	r3, #1
    ee88:	b29b      	uxth	r3, r3
    ee8a:	e001      	b.n	ee90 <_usb_d_dev_out_next+0x6c>
    ee8c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ee90:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    ee92:	8aba      	ldrh	r2, [r7, #20]
    ee94:	8a7b      	ldrh	r3, [r7, #18]
    ee96:	4013      	ands	r3, r2
    ee98:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    ee9a:	687b      	ldr	r3, [r7, #4]
    ee9c:	7cdb      	ldrb	r3, [r3, #19]
    ee9e:	f003 0307 	and.w	r3, r3, #7
    eea2:	b2db      	uxtb	r3, r3
    eea4:	2b01      	cmp	r3, #1
    eea6:	bf0c      	ite	eq
    eea8:	2301      	moveq	r3, #1
    eeaa:	2300      	movne	r3, #0
    eeac:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    eeae:	78fb      	ldrb	r3, [r7, #3]
    eeb0:	2b00      	cmp	r3, #0
    eeb2:	d004      	beq.n	eebe <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    eeb4:	7ffb      	ldrb	r3, [r7, #31]
    eeb6:	2100      	movs	r1, #0
    eeb8:	4618      	mov	r0, r3
    eeba:	4b78      	ldr	r3, [pc, #480]	; (f09c <_usb_d_dev_out_next+0x278>)
    eebc:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    eebe:	687b      	ldr	r3, [r7, #4]
    eec0:	7cdb      	ldrb	r3, [r3, #19]
    eec2:	f003 0320 	and.w	r3, r3, #32
    eec6:	b2db      	uxtb	r3, r3
    eec8:	2b00      	cmp	r3, #0
    eeca:	d01c      	beq.n	ef06 <_usb_d_dev_out_next+0xe2>
    eecc:	687b      	ldr	r3, [r7, #4]
    eece:	685b      	ldr	r3, [r3, #4]
    eed0:	2b00      	cmp	r3, #0
    eed2:	d018      	beq.n	ef06 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    eed4:	687b      	ldr	r3, [r7, #4]
    eed6:	685b      	ldr	r3, [r3, #4]
    eed8:	b29a      	uxth	r2, r3
    eeda:	687b      	ldr	r3, [r7, #4]
    eedc:	689b      	ldr	r3, [r3, #8]
    eede:	b29b      	uxth	r3, r3
    eee0:	1ad3      	subs	r3, r2, r3
    eee2:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    eee4:	687b      	ldr	r3, [r7, #4]
    eee6:	681a      	ldr	r2, [r3, #0]
    eee8:	687b      	ldr	r3, [r7, #4]
    eeea:	689b      	ldr	r3, [r3, #8]
    eeec:	18d0      	adds	r0, r2, r3
    eeee:	687b      	ldr	r3, [r7, #4]
    eef0:	68d9      	ldr	r1, [r3, #12]
    eef2:	89ba      	ldrh	r2, [r7, #12]
    eef4:	8a3b      	ldrh	r3, [r7, #16]
    eef6:	429a      	cmp	r2, r3
    eef8:	d901      	bls.n	eefe <_usb_d_dev_out_next+0xda>
    eefa:	8a3b      	ldrh	r3, [r7, #16]
    eefc:	e000      	b.n	ef00 <_usb_d_dev_out_next+0xdc>
    eefe:	89bb      	ldrh	r3, [r7, #12]
    ef00:	461a      	mov	r2, r3
    ef02:	4b67      	ldr	r3, [pc, #412]	; (f0a0 <_usb_d_dev_out_next+0x27c>)
    ef04:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    ef06:	687b      	ldr	r3, [r7, #4]
    ef08:	685b      	ldr	r3, [r3, #4]
    ef0a:	2b00      	cmp	r3, #0
    ef0c:	d121      	bne.n	ef52 <_usb_d_dev_out_next+0x12e>
    ef0e:	687b      	ldr	r3, [r7, #4]
    ef10:	7cdb      	ldrb	r3, [r3, #19]
    ef12:	f003 0310 	and.w	r3, r3, #16
    ef16:	b2db      	uxtb	r3, r3
    ef18:	2b00      	cmp	r3, #0
    ef1a:	d01a      	beq.n	ef52 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    ef1c:	687a      	ldr	r2, [r7, #4]
    ef1e:	7cd3      	ldrb	r3, [r2, #19]
    ef20:	f36f 1304 	bfc	r3, #4, #1
    ef24:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    ef26:	687a      	ldr	r2, [r7, #4]
    ef28:	7cd3      	ldrb	r3, [r2, #19]
    ef2a:	f043 0320 	orr.w	r3, r3, #32
    ef2e:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    ef30:	687b      	ldr	r3, [r7, #4]
    ef32:	68db      	ldr	r3, [r3, #12]
    ef34:	461a      	mov	r2, r3
    ef36:	7ffb      	ldrb	r3, [r7, #31]
    ef38:	2100      	movs	r1, #0
    ef3a:	4618      	mov	r0, r3
    ef3c:	4b59      	ldr	r3, [pc, #356]	; (f0a4 <_usb_d_dev_out_next+0x280>)
    ef3e:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    ef40:	687b      	ldr	r3, [r7, #4]
    ef42:	8a1b      	ldrh	r3, [r3, #16]
    ef44:	461a      	mov	r2, r3
    ef46:	7ff8      	ldrb	r0, [r7, #31]
    ef48:	2300      	movs	r3, #0
    ef4a:	2100      	movs	r1, #0
    ef4c:	4c56      	ldr	r4, [pc, #344]	; (f0a8 <_usb_d_dev_out_next+0x284>)
    ef4e:	47a0      	blx	r4
		goto _out_rx_exec;
    ef50:	e090      	b.n	f074 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    ef52:	78fb      	ldrb	r3, [r7, #3]
    ef54:	2b00      	cmp	r3, #0
    ef56:	d010      	beq.n	ef7a <_usb_d_dev_out_next+0x156>
    ef58:	687b      	ldr	r3, [r7, #4]
    ef5a:	8a1b      	ldrh	r3, [r3, #16]
    ef5c:	8a3a      	ldrh	r2, [r7, #16]
    ef5e:	429a      	cmp	r2, r3
    ef60:	d20b      	bcs.n	ef7a <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    ef62:	687a      	ldr	r2, [r7, #4]
    ef64:	7cd3      	ldrb	r3, [r2, #19]
    ef66:	f36f 1304 	bfc	r3, #4, #1
    ef6a:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    ef6c:	687b      	ldr	r3, [r7, #4]
    ef6e:	689a      	ldr	r2, [r3, #8]
    ef70:	8abb      	ldrh	r3, [r7, #20]
    ef72:	441a      	add	r2, r3
    ef74:	687b      	ldr	r3, [r7, #4]
    ef76:	609a      	str	r2, [r3, #8]
    ef78:	e05c      	b.n	f034 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    ef7a:	687b      	ldr	r3, [r7, #4]
    ef7c:	689a      	ldr	r2, [r3, #8]
    ef7e:	8afb      	ldrh	r3, [r7, #22]
    ef80:	441a      	add	r2, r3
    ef82:	687b      	ldr	r3, [r7, #4]
    ef84:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    ef86:	687b      	ldr	r3, [r7, #4]
    ef88:	689a      	ldr	r2, [r3, #8]
    ef8a:	687b      	ldr	r3, [r7, #4]
    ef8c:	685b      	ldr	r3, [r3, #4]
    ef8e:	429a      	cmp	r2, r3
    ef90:	d250      	bcs.n	f034 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    ef92:	687b      	ldr	r3, [r7, #4]
    ef94:	685b      	ldr	r3, [r3, #4]
    ef96:	b29a      	uxth	r2, r3
    ef98:	687b      	ldr	r3, [r7, #4]
    ef9a:	689b      	ldr	r3, [r3, #8]
    ef9c:	b29b      	uxth	r3, r3
    ef9e:	1ad3      	subs	r3, r2, r3
    efa0:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    efa2:	687b      	ldr	r3, [r7, #4]
    efa4:	7cdb      	ldrb	r3, [r3, #19]
    efa6:	f003 0320 	and.w	r3, r3, #32
    efaa:	b2db      	uxtb	r3, r3
    efac:	2b00      	cmp	r3, #0
    efae:	d010      	beq.n	efd2 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    efb0:	687b      	ldr	r3, [r7, #4]
    efb2:	8a1b      	ldrh	r3, [r3, #16]
    efb4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    efb6:	429a      	cmp	r2, r3
    efb8:	d902      	bls.n	efc0 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    efba:	687b      	ldr	r3, [r7, #4]
    efbc:	8a1b      	ldrh	r3, [r3, #16]
    efbe:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    efc0:	687b      	ldr	r3, [r7, #4]
    efc2:	68db      	ldr	r3, [r3, #12]
    efc4:	461a      	mov	r2, r3
    efc6:	7ffb      	ldrb	r3, [r7, #31]
    efc8:	2100      	movs	r1, #0
    efca:	4618      	mov	r0, r3
    efcc:	4b35      	ldr	r3, [pc, #212]	; (f0a4 <_usb_d_dev_out_next+0x280>)
    efce:	4798      	blx	r3
    efd0:	e029      	b.n	f026 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    efd2:	687b      	ldr	r3, [r7, #4]
    efd4:	8a1b      	ldrh	r3, [r3, #16]
    efd6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    efd8:	429a      	cmp	r2, r3
    efda:	d90f      	bls.n	effc <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    efdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    efde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    efe2:	d903      	bls.n	efec <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    efe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    efe8:	84fb      	strh	r3, [r7, #38]	; 0x26
    efea:	e011      	b.n	f010 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    efec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    efee:	8a7b      	ldrh	r3, [r7, #18]
    eff0:	4013      	ands	r3, r2
    eff2:	b29b      	uxth	r3, r3
    eff4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    eff6:	1ad3      	subs	r3, r2, r3
    eff8:	84fb      	strh	r3, [r7, #38]	; 0x26
    effa:	e009      	b.n	f010 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    effc:	687b      	ldr	r3, [r7, #4]
    effe:	8a1b      	ldrh	r3, [r3, #16]
    f000:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f002:	429a      	cmp	r2, r3
    f004:	d204      	bcs.n	f010 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    f006:	687a      	ldr	r2, [r7, #4]
    f008:	7cd3      	ldrb	r3, [r2, #19]
    f00a:	f043 0320 	orr.w	r3, r3, #32
    f00e:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    f010:	687b      	ldr	r3, [r7, #4]
    f012:	681a      	ldr	r2, [r3, #0]
    f014:	687b      	ldr	r3, [r7, #4]
    f016:	689b      	ldr	r3, [r3, #8]
    f018:	4413      	add	r3, r2
    f01a:	461a      	mov	r2, r3
    f01c:	7ffb      	ldrb	r3, [r7, #31]
    f01e:	2100      	movs	r1, #0
    f020:	4618      	mov	r0, r3
    f022:	4b20      	ldr	r3, [pc, #128]	; (f0a4 <_usb_d_dev_out_next+0x280>)
    f024:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    f026:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    f028:	7ff8      	ldrb	r0, [r7, #31]
    f02a:	2300      	movs	r3, #0
    f02c:	2100      	movs	r1, #0
    f02e:	4c1e      	ldr	r4, [pc, #120]	; (f0a8 <_usb_d_dev_out_next+0x284>)
    f030:	47a0      	blx	r4
			goto _out_rx_exec;
    f032:	e01f      	b.n	f074 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    f034:	7bfb      	ldrb	r3, [r7, #15]
    f036:	2b00      	cmp	r3, #0
    f038:	d006      	beq.n	f048 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    f03a:	7ffb      	ldrb	r3, [r7, #31]
    f03c:	222d      	movs	r2, #45	; 0x2d
    f03e:	4619      	mov	r1, r3
    f040:	6a38      	ldr	r0, [r7, #32]
    f042:	4b1a      	ldr	r3, [pc, #104]	; (f0ac <_usb_d_dev_out_next+0x288>)
    f044:	4798      	blx	r3
    f046:	e005      	b.n	f054 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    f048:	7ffb      	ldrb	r3, [r7, #31]
    f04a:	2225      	movs	r2, #37	; 0x25
    f04c:	4619      	mov	r1, r3
    f04e:	6a38      	ldr	r0, [r7, #32]
    f050:	4b16      	ldr	r3, [pc, #88]	; (f0ac <_usb_d_dev_out_next+0x288>)
    f052:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    f054:	7ffb      	ldrb	r3, [r7, #31]
    f056:	2b00      	cmp	r3, #0
    f058:	d107      	bne.n	f06a <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    f05a:	687b      	ldr	r3, [r7, #4]
    f05c:	68db      	ldr	r3, [r3, #12]
    f05e:	461a      	mov	r2, r3
    f060:	7ffb      	ldrb	r3, [r7, #31]
    f062:	2100      	movs	r1, #0
    f064:	4618      	mov	r0, r3
    f066:	4b0f      	ldr	r3, [pc, #60]	; (f0a4 <_usb_d_dev_out_next+0x280>)
    f068:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    f06a:	2100      	movs	r1, #0
    f06c:	6878      	ldr	r0, [r7, #4]
    f06e:	4b10      	ldr	r3, [pc, #64]	; (f0b0 <_usb_d_dev_out_next+0x28c>)
    f070:	4798      	blx	r3
	return;
    f072:	e031      	b.n	f0d8 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    f074:	78fb      	ldrb	r3, [r7, #3]
    f076:	f083 0301 	eor.w	r3, r3, #1
    f07a:	b2db      	uxtb	r3, r3
    f07c:	2b00      	cmp	r3, #0
    f07e:	d025      	beq.n	f0cc <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    f080:	7bfb      	ldrb	r3, [r7, #15]
    f082:	2b00      	cmp	r3, #0
    f084:	d018      	beq.n	f0b8 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    f086:	7ffb      	ldrb	r3, [r7, #31]
    f088:	2101      	movs	r1, #1
    f08a:	4618      	mov	r0, r3
    f08c:	4b09      	ldr	r3, [pc, #36]	; (f0b4 <_usb_d_dev_out_next+0x290>)
    f08e:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    f090:	232d      	movs	r3, #45	; 0x2d
    f092:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    f096:	e012      	b.n	f0be <_usb_d_dev_out_next+0x29a>
    f098:	20008d18 	.word	0x20008d18
    f09c:	0000e605 	.word	0x0000e605
    f0a0:	0001c485 	.word	0x0001c485
    f0a4:	0000e631 	.word	0x0000e631
    f0a8:	0000e7b9 	.word	0x0000e7b9
    f0ac:	0000df11 	.word	0x0000df11
    f0b0:	0000ff35 	.word	0x0000ff35
    f0b4:	0000e7f9 	.word	0x0000e7f9
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    f0b8:	2325      	movs	r3, #37	; 0x25
    f0ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    f0be:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    f0c2:	7ffb      	ldrb	r3, [r7, #31]
    f0c4:	4619      	mov	r1, r3
    f0c6:	6a38      	ldr	r0, [r7, #32]
    f0c8:	4b05      	ldr	r3, [pc, #20]	; (f0e0 <_usb_d_dev_out_next+0x2bc>)
    f0ca:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    f0cc:	7ffb      	ldrb	r3, [r7, #31]
    f0ce:	2201      	movs	r2, #1
    f0d0:	2100      	movs	r1, #0
    f0d2:	4618      	mov	r0, r3
    f0d4:	4b03      	ldr	r3, [pc, #12]	; (f0e4 <_usb_d_dev_out_next+0x2c0>)
    f0d6:	4798      	blx	r3
}
    f0d8:	372c      	adds	r7, #44	; 0x2c
    f0da:	46bd      	mov	sp, r7
    f0dc:	bd90      	pop	{r4, r7, pc}
    f0de:	bf00      	nop
    f0e0:	0000dee5 	.word	0x0000dee5
    f0e4:	0000e889 	.word	0x0000e889

0000f0e8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    f0e8:	b580      	push	{r7, lr}
    f0ea:	b084      	sub	sp, #16
    f0ec:	af00      	add	r7, sp, #0
    f0ee:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    f0f0:	687b      	ldr	r3, [r7, #4]
    f0f2:	7c9b      	ldrb	r3, [r3, #18]
    f0f4:	f003 030f 	and.w	r3, r3, #15
    f0f8:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    f0fa:	687b      	ldr	r3, [r7, #4]
    f0fc:	7cdb      	ldrb	r3, [r3, #19]
    f0fe:	f003 0307 	and.w	r3, r3, #7
    f102:	b2db      	uxtb	r3, r3
    f104:	2b01      	cmp	r3, #1
    f106:	bf0c      	ite	eq
    f108:	2301      	moveq	r3, #1
    f10a:	2300      	movne	r3, #0
    f10c:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    f10e:	7bbb      	ldrb	r3, [r7, #14]
    f110:	f083 0301 	eor.w	r3, r3, #1
    f114:	b2db      	uxtb	r3, r3
    f116:	2b00      	cmp	r3, #0
    f118:	d008      	beq.n	f12c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    f11a:	7bfb      	ldrb	r3, [r7, #15]
    f11c:	4618      	mov	r0, r3
    f11e:	4b20      	ldr	r3, [pc, #128]	; (f1a0 <_usb_d_dev_handle_setup+0xb8>)
    f120:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    f122:	7bfb      	ldrb	r3, [r7, #15]
    f124:	4618      	mov	r0, r3
    f126:	4b1f      	ldr	r3, [pc, #124]	; (f1a4 <_usb_d_dev_handle_setup+0xbc>)
    f128:	4798      	blx	r3
		return;
    f12a:	e036      	b.n	f19a <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    f12c:	687b      	ldr	r3, [r7, #4]
    f12e:	7cdb      	ldrb	r3, [r3, #19]
    f130:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f134:	b2db      	uxtb	r3, r3
    f136:	2b00      	cmp	r3, #0
    f138:	d010      	beq.n	f15c <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    f13a:	687a      	ldr	r2, [r7, #4]
    f13c:	7cd3      	ldrb	r3, [r2, #19]
    f13e:	f36f 1386 	bfc	r3, #6, #1
    f142:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    f144:	7bfb      	ldrb	r3, [r7, #15]
    f146:	2200      	movs	r2, #0
    f148:	2101      	movs	r1, #1
    f14a:	4618      	mov	r0, r3
    f14c:	4b16      	ldr	r3, [pc, #88]	; (f1a8 <_usb_d_dev_handle_setup+0xc0>)
    f14e:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    f150:	7bfb      	ldrb	r3, [r7, #15]
    f152:	2200      	movs	r2, #0
    f154:	2100      	movs	r1, #0
    f156:	4618      	mov	r0, r3
    f158:	4b14      	ldr	r3, [pc, #80]	; (f1ac <_usb_d_dev_handle_setup+0xc4>)
    f15a:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    f15c:	687a      	ldr	r2, [r7, #4]
    f15e:	7cd3      	ldrb	r3, [r2, #19]
    f160:	f36f 03c3 	bfc	r3, #3, #1
    f164:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    f166:	7bfb      	ldrb	r3, [r7, #15]
    f168:	2100      	movs	r1, #0
    f16a:	4618      	mov	r0, r3
    f16c:	4b10      	ldr	r3, [pc, #64]	; (f1b0 <_usb_d_dev_handle_setup+0xc8>)
    f16e:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    f170:	7bfb      	ldrb	r3, [r7, #15]
    f172:	2101      	movs	r1, #1
    f174:	4618      	mov	r0, r3
    f176:	4b0e      	ldr	r3, [pc, #56]	; (f1b0 <_usb_d_dev_handle_setup+0xc8>)
    f178:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    f17a:	7bfb      	ldrb	r3, [r7, #15]
    f17c:	216f      	movs	r1, #111	; 0x6f
    f17e:	4618      	mov	r0, r3
    f180:	4b0c      	ldr	r3, [pc, #48]	; (f1b4 <_usb_d_dev_handle_setup+0xcc>)
    f182:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    f184:	7bfb      	ldrb	r3, [r7, #15]
    f186:	216f      	movs	r1, #111	; 0x6f
    f188:	4618      	mov	r0, r3
    f18a:	4b0b      	ldr	r3, [pc, #44]	; (f1b8 <_usb_d_dev_handle_setup+0xd0>)
    f18c:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    f18e:	4b0b      	ldr	r3, [pc, #44]	; (f1bc <_usb_d_dev_handle_setup+0xd4>)
    f190:	689b      	ldr	r3, [r3, #8]
    f192:	687a      	ldr	r2, [r7, #4]
    f194:	7c92      	ldrb	r2, [r2, #18]
    f196:	4610      	mov	r0, r2
    f198:	4798      	blx	r3
}
    f19a:	3710      	adds	r7, #16
    f19c:	46bd      	mov	sp, r7
    f19e:	bd80      	pop	{r7, pc}
    f1a0:	0000e58d 	.word	0x0000e58d
    f1a4:	0000e539 	.word	0x0000e539
    f1a8:	0000e831 	.word	0x0000e831
    f1ac:	0000e889 	.word	0x0000e889
    f1b0:	0000e7f9 	.word	0x0000e7f9
    f1b4:	0000e339 	.word	0x0000e339
    f1b8:	0000e389 	.word	0x0000e389
    f1bc:	20008c50 	.word	0x20008c50

0000f1c0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    f1c0:	b580      	push	{r7, lr}
    f1c2:	b084      	sub	sp, #16
    f1c4:	af00      	add	r7, sp, #0
    f1c6:	6078      	str	r0, [r7, #4]
    f1c8:	460b      	mov	r3, r1
    f1ca:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f1cc:	687b      	ldr	r3, [r7, #4]
    f1ce:	7c9b      	ldrb	r3, [r3, #18]
    f1d0:	f003 030f 	and.w	r3, r3, #15
    f1d4:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    f1d6:	78f9      	ldrb	r1, [r7, #3]
    f1d8:	7bfb      	ldrb	r3, [r7, #15]
    f1da:	2200      	movs	r2, #0
    f1dc:	4618      	mov	r0, r3
    f1de:	4b07      	ldr	r3, [pc, #28]	; (f1fc <_usb_d_dev_handle_stall+0x3c>)
    f1e0:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    f1e2:	4b07      	ldr	r3, [pc, #28]	; (f200 <_usb_d_dev_handle_stall+0x40>)
    f1e4:	691b      	ldr	r3, [r3, #16]
    f1e6:	687a      	ldr	r2, [r7, #4]
    f1e8:	7c90      	ldrb	r0, [r2, #18]
    f1ea:	687a      	ldr	r2, [r7, #4]
    f1ec:	6892      	ldr	r2, [r2, #8]
    f1ee:	2101      	movs	r1, #1
    f1f0:	4798      	blx	r3
}
    f1f2:	bf00      	nop
    f1f4:	3710      	adds	r7, #16
    f1f6:	46bd      	mov	sp, r7
    f1f8:	bd80      	pop	{r7, pc}
    f1fa:	bf00      	nop
    f1fc:	0000e4ed 	.word	0x0000e4ed
    f200:	20008c50 	.word	0x20008c50

0000f204 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    f204:	b580      	push	{r7, lr}
    f206:	b088      	sub	sp, #32
    f208:	af00      	add	r7, sp, #0
    f20a:	6078      	str	r0, [r7, #4]
    f20c:	460b      	mov	r3, r1
    f20e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    f210:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f214:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    f216:	687b      	ldr	r3, [r7, #4]
    f218:	7c9b      	ldrb	r3, [r3, #18]
    f21a:	f003 030f 	and.w	r3, r3, #15
    f21e:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    f220:	4b61      	ldr	r3, [pc, #388]	; (f3a8 <_usb_d_dev_handle_trfail+0x1a4>)
    f222:	881b      	ldrh	r3, [r3, #0]
    f224:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    f226:	7efb      	ldrb	r3, [r7, #27]
    f228:	015b      	lsls	r3, r3, #5
    f22a:	4a60      	ldr	r2, [pc, #384]	; (f3ac <_usb_d_dev_handle_trfail+0x1a8>)
    f22c:	4413      	add	r3, r2
    f22e:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    f230:	78fb      	ldrb	r3, [r7, #3]
    f232:	2b00      	cmp	r3, #0
    f234:	d006      	beq.n	f244 <_usb_d_dev_handle_trfail+0x40>
    f236:	7efb      	ldrb	r3, [r7, #27]
    f238:	4619      	mov	r1, r3
    f23a:	69f8      	ldr	r0, [r7, #28]
    f23c:	4b5c      	ldr	r3, [pc, #368]	; (f3b0 <_usb_d_dev_handle_trfail+0x1ac>)
    f23e:	4798      	blx	r3
    f240:	4603      	mov	r3, r0
    f242:	e005      	b.n	f250 <_usb_d_dev_handle_trfail+0x4c>
    f244:	7efb      	ldrb	r3, [r7, #27]
    f246:	4619      	mov	r1, r3
    f248:	69f8      	ldr	r0, [r7, #28]
    f24a:	4b5a      	ldr	r3, [pc, #360]	; (f3b4 <_usb_d_dev_handle_trfail+0x1b0>)
    f24c:	4798      	blx	r3
    f24e:	4603      	mov	r3, r0
    f250:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    f252:	687b      	ldr	r3, [r7, #4]
    f254:	7cdb      	ldrb	r3, [r3, #19]
    f256:	f003 0307 	and.w	r3, r3, #7
    f25a:	b2db      	uxtb	r3, r3
    f25c:	2b01      	cmp	r3, #1
    f25e:	bf0c      	ite	eq
    f260:	2301      	moveq	r3, #1
    f262:	2300      	movne	r3, #0
    f264:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    f266:	78fb      	ldrb	r3, [r7, #3]
    f268:	011b      	lsls	r3, r3, #4
    f26a:	697a      	ldr	r2, [r7, #20]
    f26c:	4413      	add	r3, r2
    f26e:	7a9b      	ldrb	r3, [r3, #10]
    f270:	b2db      	uxtb	r3, r3
    f272:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    f274:	7cfb      	ldrb	r3, [r7, #19]
    f276:	2b02      	cmp	r3, #2
    f278:	d12f      	bne.n	f2da <_usb_d_dev_handle_trfail+0xd6>
    f27a:	7b3b      	ldrb	r3, [r7, #12]
    f27c:	f003 0301 	and.w	r3, r3, #1
    f280:	b2db      	uxtb	r3, r3
    f282:	2b00      	cmp	r3, #0
    f284:	d029      	beq.n	f2da <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    f286:	78fb      	ldrb	r3, [r7, #3]
    f288:	011b      	lsls	r3, r3, #4
    f28a:	697a      	ldr	r2, [r7, #20]
    f28c:	441a      	add	r2, r3
    f28e:	7a93      	ldrb	r3, [r2, #10]
    f290:	f36f 0300 	bfc	r3, #0, #1
    f294:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f296:	78fb      	ldrb	r3, [r7, #3]
    f298:	f107 0220 	add.w	r2, r7, #32
    f29c:	4413      	add	r3, r2
    f29e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f2a2:	7efb      	ldrb	r3, [r7, #27]
    f2a4:	4619      	mov	r1, r3
    f2a6:	69f8      	ldr	r0, [r7, #28]
    f2a8:	4b43      	ldr	r3, [pc, #268]	; (f3b8 <_usb_d_dev_handle_trfail+0x1b4>)
    f2aa:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f2ac:	78fb      	ldrb	r3, [r7, #3]
    f2ae:	f107 0220 	add.w	r2, r7, #32
    f2b2:	4413      	add	r3, r2
    f2b4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f2b8:	7efb      	ldrb	r3, [r7, #27]
    f2ba:	4619      	mov	r1, r3
    f2bc:	69f8      	ldr	r0, [r7, #28]
    f2be:	4b3f      	ldr	r3, [pc, #252]	; (f3bc <_usb_d_dev_handle_trfail+0x1b8>)
    f2c0:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    f2c2:	78fb      	ldrb	r3, [r7, #3]
    f2c4:	2b00      	cmp	r3, #0
    f2c6:	bf14      	ite	ne
    f2c8:	2301      	movne	r3, #1
    f2ca:	2300      	moveq	r3, #0
    f2cc:	b2db      	uxtb	r3, r3
    f2ce:	2204      	movs	r2, #4
    f2d0:	4619      	mov	r1, r3
    f2d2:	6878      	ldr	r0, [r7, #4]
    f2d4:	4b3a      	ldr	r3, [pc, #232]	; (f3c0 <_usb_d_dev_handle_trfail+0x1bc>)
    f2d6:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    f2d8:	e062      	b.n	f3a0 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    f2da:	7b3b      	ldrb	r3, [r7, #12]
    f2dc:	f003 0302 	and.w	r3, r3, #2
    f2e0:	b2db      	uxtb	r3, r3
    f2e2:	2b00      	cmp	r3, #0
    f2e4:	d040      	beq.n	f368 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    f2e6:	78fb      	ldrb	r3, [r7, #3]
    f2e8:	011b      	lsls	r3, r3, #4
    f2ea:	697a      	ldr	r2, [r7, #20]
    f2ec:	441a      	add	r2, r3
    f2ee:	7a93      	ldrb	r3, [r2, #10]
    f2f0:	f36f 0341 	bfc	r3, #1, #1
    f2f4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f2f6:	78fb      	ldrb	r3, [r7, #3]
    f2f8:	f107 0220 	add.w	r2, r7, #32
    f2fc:	4413      	add	r3, r2
    f2fe:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f302:	7efb      	ldrb	r3, [r7, #27]
    f304:	4619      	mov	r1, r3
    f306:	69f8      	ldr	r0, [r7, #28]
    f308:	4b2b      	ldr	r3, [pc, #172]	; (f3b8 <_usb_d_dev_handle_trfail+0x1b4>)
    f30a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f30c:	78fb      	ldrb	r3, [r7, #3]
    f30e:	f107 0220 	add.w	r2, r7, #32
    f312:	4413      	add	r3, r2
    f314:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f318:	7efb      	ldrb	r3, [r7, #27]
    f31a:	4619      	mov	r1, r3
    f31c:	69f8      	ldr	r0, [r7, #28]
    f31e:	4b27      	ldr	r3, [pc, #156]	; (f3bc <_usb_d_dev_handle_trfail+0x1b8>)
    f320:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    f322:	7cbb      	ldrb	r3, [r7, #18]
    f324:	2b00      	cmp	r3, #0
    f326:	d03b      	beq.n	f3a0 <_usb_d_dev_handle_trfail+0x19c>
    f328:	687b      	ldr	r3, [r7, #4]
    f32a:	7cdb      	ldrb	r3, [r3, #19]
    f32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f330:	b2db      	uxtb	r3, r3
    f332:	2b00      	cmp	r3, #0
    f334:	d034      	beq.n	f3a0 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    f336:	687b      	ldr	r3, [r7, #4]
    f338:	7cdb      	ldrb	r3, [r3, #19]
    f33a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    f33e:	b2db      	uxtb	r3, r3
    f340:	461a      	mov	r2, r3
    f342:	78fb      	ldrb	r3, [r7, #3]
    f344:	4293      	cmp	r3, r2
    f346:	d02b      	beq.n	f3a0 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    f348:	687b      	ldr	r3, [r7, #4]
    f34a:	7cdb      	ldrb	r3, [r3, #19]
    f34c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    f350:	b2db      	uxtb	r3, r3
    f352:	2b00      	cmp	r3, #0
    f354:	bf14      	ite	ne
    f356:	2301      	movne	r3, #1
    f358:	2300      	moveq	r3, #0
    f35a:	b2db      	uxtb	r3, r3
    f35c:	2200      	movs	r2, #0
    f35e:	4619      	mov	r1, r3
    f360:	6878      	ldr	r0, [r7, #4]
    f362:	4b17      	ldr	r3, [pc, #92]	; (f3c0 <_usb_d_dev_handle_trfail+0x1bc>)
    f364:	4798      	blx	r3
}
    f366:	e01b      	b.n	f3a0 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    f368:	78fa      	ldrb	r2, [r7, #3]
    f36a:	7efb      	ldrb	r3, [r7, #27]
    f36c:	4611      	mov	r1, r2
    f36e:	4618      	mov	r0, r3
    f370:	4b14      	ldr	r3, [pc, #80]	; (f3c4 <_usb_d_dev_handle_trfail+0x1c0>)
    f372:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    f374:	78fb      	ldrb	r3, [r7, #3]
    f376:	f107 0220 	add.w	r2, r7, #32
    f37a:	4413      	add	r3, r2
    f37c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f380:	7efb      	ldrb	r3, [r7, #27]
    f382:	4619      	mov	r1, r3
    f384:	69f8      	ldr	r0, [r7, #28]
    f386:	4b0c      	ldr	r3, [pc, #48]	; (f3b8 <_usb_d_dev_handle_trfail+0x1b4>)
    f388:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    f38a:	78fb      	ldrb	r3, [r7, #3]
    f38c:	f107 0220 	add.w	r2, r7, #32
    f390:	4413      	add	r3, r2
    f392:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    f396:	7efb      	ldrb	r3, [r7, #27]
    f398:	4619      	mov	r1, r3
    f39a:	69f8      	ldr	r0, [r7, #28]
    f39c:	4b07      	ldr	r3, [pc, #28]	; (f3bc <_usb_d_dev_handle_trfail+0x1b8>)
    f39e:	4798      	blx	r3
}
    f3a0:	bf00      	nop
    f3a2:	3720      	adds	r7, #32
    f3a4:	46bd      	mov	sp, r7
    f3a6:	bd80      	pop	{r7, pc}
    f3a8:	00020d90 	.word	0x00020d90
    f3ac:	20008d18 	.word	0x20008d18
    f3b0:	0000df6d 	.word	0x0000df6d
    f3b4:	0000df3d 	.word	0x0000df3d
    f3b8:	0000de11 	.word	0x0000de11
    f3bc:	0000df11 	.word	0x0000df11
    f3c0:	0000ff7d 	.word	0x0000ff7d
    f3c4:	0000e7f9 	.word	0x0000e7f9

0000f3c8 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f3c8:	b580      	push	{r7, lr}
    f3ca:	b082      	sub	sp, #8
    f3cc:	af00      	add	r7, sp, #0
    f3ce:	6078      	str	r0, [r7, #4]
    f3d0:	460b      	mov	r3, r1
    f3d2:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f3d4:	78fb      	ldrb	r3, [r7, #3]
    f3d6:	f003 0310 	and.w	r3, r3, #16
    f3da:	2b00      	cmp	r3, #0
    f3dc:	d003      	beq.n	f3e6 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    f3de:	6878      	ldr	r0, [r7, #4]
    f3e0:	4b0c      	ldr	r3, [pc, #48]	; (f414 <_usb_d_dev_trans_setup_isr+0x4c>)
    f3e2:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    f3e4:	e012      	b.n	f40c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    f3e6:	78fb      	ldrb	r3, [r7, #3]
    f3e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f3ec:	2b00      	cmp	r3, #0
    f3ee:	d004      	beq.n	f3fa <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    f3f0:	2101      	movs	r1, #1
    f3f2:	6878      	ldr	r0, [r7, #4]
    f3f4:	4b08      	ldr	r3, [pc, #32]	; (f418 <_usb_d_dev_trans_setup_isr+0x50>)
    f3f6:	4798      	blx	r3
}
    f3f8:	e008      	b.n	f40c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    f3fa:	78fb      	ldrb	r3, [r7, #3]
    f3fc:	f003 0320 	and.w	r3, r3, #32
    f400:	2b00      	cmp	r3, #0
    f402:	d003      	beq.n	f40c <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    f404:	2100      	movs	r1, #0
    f406:	6878      	ldr	r0, [r7, #4]
    f408:	4b03      	ldr	r3, [pc, #12]	; (f418 <_usb_d_dev_trans_setup_isr+0x50>)
    f40a:	4798      	blx	r3
}
    f40c:	bf00      	nop
    f40e:	3708      	adds	r7, #8
    f410:	46bd      	mov	sp, r7
    f412:	bd80      	pop	{r7, pc}
    f414:	0000f0e9 	.word	0x0000f0e9
    f418:	0000f1c1 	.word	0x0000f1c1

0000f41c <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f41c:	b580      	push	{r7, lr}
    f41e:	b082      	sub	sp, #8
    f420:	af00      	add	r7, sp, #0
    f422:	6078      	str	r0, [r7, #4]
    f424:	460b      	mov	r3, r1
    f426:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    f428:	78fb      	ldrb	r3, [r7, #3]
    f42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f42e:	2b00      	cmp	r3, #0
    f430:	d004      	beq.n	f43c <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    f432:	2101      	movs	r1, #1
    f434:	6878      	ldr	r0, [r7, #4]
    f436:	4b1a      	ldr	r3, [pc, #104]	; (f4a0 <_usb_d_dev_trans_in_isr+0x84>)
    f438:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    f43a:	e02c      	b.n	f496 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    f43c:	78fb      	ldrb	r3, [r7, #3]
    f43e:	f003 0308 	and.w	r3, r3, #8
    f442:	2b00      	cmp	r3, #0
    f444:	d004      	beq.n	f450 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    f446:	2101      	movs	r1, #1
    f448:	6878      	ldr	r0, [r7, #4]
    f44a:	4b16      	ldr	r3, [pc, #88]	; (f4a4 <_usb_d_dev_trans_in_isr+0x88>)
    f44c:	4798      	blx	r3
}
    f44e:	e022      	b.n	f496 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    f450:	78fb      	ldrb	r3, [r7, #3]
    f452:	f003 0302 	and.w	r3, r3, #2
    f456:	2b00      	cmp	r3, #0
    f458:	d004      	beq.n	f464 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    f45a:	2101      	movs	r1, #1
    f45c:	6878      	ldr	r0, [r7, #4]
    f45e:	4b12      	ldr	r3, [pc, #72]	; (f4a8 <_usb_d_dev_trans_in_isr+0x8c>)
    f460:	4798      	blx	r3
}
    f462:	e018      	b.n	f496 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    f464:	687b      	ldr	r3, [r7, #4]
    f466:	7cdb      	ldrb	r3, [r3, #19]
    f468:	f003 0307 	and.w	r3, r3, #7
    f46c:	b2db      	uxtb	r3, r3
    f46e:	2b01      	cmp	r3, #1
    f470:	d111      	bne.n	f496 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    f472:	78fb      	ldrb	r3, [r7, #3]
    f474:	f003 0304 	and.w	r3, r3, #4
    f478:	2b00      	cmp	r3, #0
    f47a:	d004      	beq.n	f486 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    f47c:	2100      	movs	r1, #0
    f47e:	6878      	ldr	r0, [r7, #4]
    f480:	4b08      	ldr	r3, [pc, #32]	; (f4a4 <_usb_d_dev_trans_in_isr+0x88>)
    f482:	4798      	blx	r3
}
    f484:	e007      	b.n	f496 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f486:	78fb      	ldrb	r3, [r7, #3]
    f488:	f003 0310 	and.w	r3, r3, #16
    f48c:	2b00      	cmp	r3, #0
    f48e:	d002      	beq.n	f496 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    f490:	6878      	ldr	r0, [r7, #4]
    f492:	4b06      	ldr	r3, [pc, #24]	; (f4ac <_usb_d_dev_trans_in_isr+0x90>)
    f494:	4798      	blx	r3
}
    f496:	bf00      	nop
    f498:	3708      	adds	r7, #8
    f49a:	46bd      	mov	sp, r7
    f49c:	bd80      	pop	{r7, pc}
    f49e:	bf00      	nop
    f4a0:	0000f1c1 	.word	0x0000f1c1
    f4a4:	0000f205 	.word	0x0000f205
    f4a8:	0000ec0d 	.word	0x0000ec0d
    f4ac:	0000f0e9 	.word	0x0000f0e9

0000f4b0 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    f4b0:	b580      	push	{r7, lr}
    f4b2:	b082      	sub	sp, #8
    f4b4:	af00      	add	r7, sp, #0
    f4b6:	6078      	str	r0, [r7, #4]
    f4b8:	460b      	mov	r3, r1
    f4ba:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    f4bc:	78fb      	ldrb	r3, [r7, #3]
    f4be:	f003 0320 	and.w	r3, r3, #32
    f4c2:	2b00      	cmp	r3, #0
    f4c4:	d004      	beq.n	f4d0 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    f4c6:	2100      	movs	r1, #0
    f4c8:	6878      	ldr	r0, [r7, #4]
    f4ca:	4b1a      	ldr	r3, [pc, #104]	; (f534 <_usb_d_dev_trans_out_isr+0x84>)
    f4cc:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    f4ce:	e02c      	b.n	f52a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    f4d0:	78fb      	ldrb	r3, [r7, #3]
    f4d2:	f003 0304 	and.w	r3, r3, #4
    f4d6:	2b00      	cmp	r3, #0
    f4d8:	d004      	beq.n	f4e4 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    f4da:	2100      	movs	r1, #0
    f4dc:	6878      	ldr	r0, [r7, #4]
    f4de:	4b16      	ldr	r3, [pc, #88]	; (f538 <_usb_d_dev_trans_out_isr+0x88>)
    f4e0:	4798      	blx	r3
}
    f4e2:	e022      	b.n	f52a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    f4e4:	78fb      	ldrb	r3, [r7, #3]
    f4e6:	f003 0301 	and.w	r3, r3, #1
    f4ea:	2b00      	cmp	r3, #0
    f4ec:	d004      	beq.n	f4f8 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    f4ee:	2101      	movs	r1, #1
    f4f0:	6878      	ldr	r0, [r7, #4]
    f4f2:	4b12      	ldr	r3, [pc, #72]	; (f53c <_usb_d_dev_trans_out_isr+0x8c>)
    f4f4:	4798      	blx	r3
}
    f4f6:	e018      	b.n	f52a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    f4f8:	687b      	ldr	r3, [r7, #4]
    f4fa:	7cdb      	ldrb	r3, [r3, #19]
    f4fc:	f003 0307 	and.w	r3, r3, #7
    f500:	b2db      	uxtb	r3, r3
    f502:	2b01      	cmp	r3, #1
    f504:	d111      	bne.n	f52a <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    f506:	78fb      	ldrb	r3, [r7, #3]
    f508:	f003 0308 	and.w	r3, r3, #8
    f50c:	2b00      	cmp	r3, #0
    f50e:	d004      	beq.n	f51a <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    f510:	2101      	movs	r1, #1
    f512:	6878      	ldr	r0, [r7, #4]
    f514:	4b08      	ldr	r3, [pc, #32]	; (f538 <_usb_d_dev_trans_out_isr+0x88>)
    f516:	4798      	blx	r3
}
    f518:	e007      	b.n	f52a <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    f51a:	78fb      	ldrb	r3, [r7, #3]
    f51c:	f003 0310 	and.w	r3, r3, #16
    f520:	2b00      	cmp	r3, #0
    f522:	d002      	beq.n	f52a <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    f524:	6878      	ldr	r0, [r7, #4]
    f526:	4b06      	ldr	r3, [pc, #24]	; (f540 <_usb_d_dev_trans_out_isr+0x90>)
    f528:	4798      	blx	r3
}
    f52a:	bf00      	nop
    f52c:	3708      	adds	r7, #8
    f52e:	46bd      	mov	sp, r7
    f530:	bd80      	pop	{r7, pc}
    f532:	bf00      	nop
    f534:	0000f1c1 	.word	0x0000f1c1
    f538:	0000f205 	.word	0x0000f205
    f53c:	0000ee25 	.word	0x0000ee25
    f540:	0000f0e9 	.word	0x0000f0e9

0000f544 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    f544:	b580      	push	{r7, lr}
    f546:	b084      	sub	sp, #16
    f548:	af00      	add	r7, sp, #0
    f54a:	6078      	str	r0, [r7, #4]
    f54c:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    f54e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f552:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f554:	683b      	ldr	r3, [r7, #0]
    f556:	7c9b      	ldrb	r3, [r3, #18]
    f558:	f003 030f 	and.w	r3, r3, #15
    f55c:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    f55e:	7afb      	ldrb	r3, [r7, #11]
    f560:	2201      	movs	r2, #1
    f562:	409a      	lsls	r2, r3
    f564:	687b      	ldr	r3, [r7, #4]
    f566:	4013      	ands	r3, r2
    f568:	2b00      	cmp	r3, #0
    f56a:	d03d      	beq.n	f5e8 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    f56c:	7afb      	ldrb	r3, [r7, #11]
    f56e:	68fa      	ldr	r2, [r7, #12]
    f570:	3308      	adds	r3, #8
    f572:	015b      	lsls	r3, r3, #5
    f574:	4413      	add	r3, r2
    f576:	3307      	adds	r3, #7
    f578:	781b      	ldrb	r3, [r3, #0]
    f57a:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    f57c:	7afb      	ldrb	r3, [r7, #11]
    f57e:	68fa      	ldr	r2, [r7, #12]
    f580:	015b      	lsls	r3, r3, #5
    f582:	4413      	add	r3, r2
    f584:	f203 1309 	addw	r3, r3, #265	; 0x109
    f588:	781b      	ldrb	r3, [r3, #0]
    f58a:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    f58c:	7aba      	ldrb	r2, [r7, #10]
    f58e:	7a7b      	ldrb	r3, [r7, #9]
    f590:	4013      	ands	r3, r2
    f592:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    f594:	7abb      	ldrb	r3, [r7, #10]
    f596:	2b00      	cmp	r3, #0
    f598:	d027      	beq.n	f5ea <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    f59a:	683b      	ldr	r3, [r7, #0]
    f59c:	7cdb      	ldrb	r3, [r3, #19]
    f59e:	f003 0307 	and.w	r3, r3, #7
    f5a2:	b2db      	uxtb	r3, r3
    f5a4:	2b01      	cmp	r3, #1
    f5a6:	d10c      	bne.n	f5c2 <_usb_d_dev_handle_eps+0x7e>
    f5a8:	683b      	ldr	r3, [r7, #0]
    f5aa:	7cdb      	ldrb	r3, [r3, #19]
    f5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f5b0:	b2db      	uxtb	r3, r3
    f5b2:	2b00      	cmp	r3, #0
    f5b4:	d105      	bne.n	f5c2 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    f5b6:	7abb      	ldrb	r3, [r7, #10]
    f5b8:	4619      	mov	r1, r3
    f5ba:	6838      	ldr	r0, [r7, #0]
    f5bc:	4b0c      	ldr	r3, [pc, #48]	; (f5f0 <_usb_d_dev_handle_eps+0xac>)
    f5be:	4798      	blx	r3
    f5c0:	e013      	b.n	f5ea <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    f5c2:	683b      	ldr	r3, [r7, #0]
    f5c4:	7cdb      	ldrb	r3, [r3, #19]
    f5c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    f5ca:	b2db      	uxtb	r3, r3
    f5cc:	2b00      	cmp	r3, #0
    f5ce:	d005      	beq.n	f5dc <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    f5d0:	7abb      	ldrb	r3, [r7, #10]
    f5d2:	4619      	mov	r1, r3
    f5d4:	6838      	ldr	r0, [r7, #0]
    f5d6:	4b07      	ldr	r3, [pc, #28]	; (f5f4 <_usb_d_dev_handle_eps+0xb0>)
    f5d8:	4798      	blx	r3
    f5da:	e006      	b.n	f5ea <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    f5dc:	7abb      	ldrb	r3, [r7, #10]
    f5de:	4619      	mov	r1, r3
    f5e0:	6838      	ldr	r0, [r7, #0]
    f5e2:	4b05      	ldr	r3, [pc, #20]	; (f5f8 <_usb_d_dev_handle_eps+0xb4>)
    f5e4:	4798      	blx	r3
    f5e6:	e000      	b.n	f5ea <_usb_d_dev_handle_eps+0xa6>
		return;
    f5e8:	bf00      	nop
		}
	}
}
    f5ea:	3710      	adds	r7, #16
    f5ec:	46bd      	mov	sp, r7
    f5ee:	bd80      	pop	{r7, pc}
    f5f0:	0000f3c9 	.word	0x0000f3c9
    f5f4:	0000f41d 	.word	0x0000f41d
    f5f8:	0000f4b1 	.word	0x0000f4b1

0000f5fc <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    f5fc:	b580      	push	{r7, lr}
    f5fe:	b084      	sub	sp, #16
    f600:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    f602:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f606:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    f608:	68bb      	ldr	r3, [r7, #8]
    f60a:	8c1b      	ldrh	r3, [r3, #32]
    f60c:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    f60e:	88fb      	ldrh	r3, [r7, #6]
    f610:	2b00      	cmp	r3, #0
    f612:	d104      	bne.n	f61e <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    f614:	4b13      	ldr	r3, [pc, #76]	; (f664 <_usb_d_dev_handler+0x68>)
    f616:	4798      	blx	r3
    f618:	4603      	mov	r3, r0
    f61a:	2b00      	cmp	r3, #0
    f61c:	d11e      	bne.n	f65c <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    f61e:	2300      	movs	r3, #0
    f620:	73fb      	strb	r3, [r7, #15]
    f622:	e017      	b.n	f654 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    f624:	7bfa      	ldrb	r2, [r7, #15]
    f626:	4613      	mov	r3, r2
    f628:	009b      	lsls	r3, r3, #2
    f62a:	4413      	add	r3, r2
    f62c:	009b      	lsls	r3, r3, #2
    f62e:	3310      	adds	r3, #16
    f630:	4a0d      	ldr	r2, [pc, #52]	; (f668 <_usb_d_dev_handler+0x6c>)
    f632:	4413      	add	r3, r2
    f634:	3304      	adds	r3, #4
    f636:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    f638:	683b      	ldr	r3, [r7, #0]
    f63a:	7c9b      	ldrb	r3, [r3, #18]
    f63c:	2bff      	cmp	r3, #255	; 0xff
    f63e:	d005      	beq.n	f64c <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    f640:	88fb      	ldrh	r3, [r7, #6]
    f642:	6839      	ldr	r1, [r7, #0]
    f644:	4618      	mov	r0, r3
    f646:	4b09      	ldr	r3, [pc, #36]	; (f66c <_usb_d_dev_handler+0x70>)
    f648:	4798      	blx	r3
    f64a:	e000      	b.n	f64e <_usb_d_dev_handler+0x52>
			continue;
    f64c:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    f64e:	7bfb      	ldrb	r3, [r7, #15]
    f650:	3301      	adds	r3, #1
    f652:	73fb      	strb	r3, [r7, #15]
    f654:	7bfb      	ldrb	r3, [r7, #15]
    f656:	2b08      	cmp	r3, #8
    f658:	d9e4      	bls.n	f624 <_usb_d_dev_handler+0x28>
    f65a:	e000      	b.n	f65e <_usb_d_dev_handler+0x62>
			return;
    f65c:	bf00      	nop
	}
}
    f65e:	3710      	adds	r7, #16
    f660:	46bd      	mov	sp, r7
    f662:	bd80      	pop	{r7, pc}
    f664:	0000eb55 	.word	0x0000eb55
    f668:	20008c50 	.word	0x20008c50
    f66c:	0000f545 	.word	0x0000f545

0000f670 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    f670:	b580      	push	{r7, lr}
    f672:	b082      	sub	sp, #8
    f674:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    f676:	2300      	movs	r3, #0
    f678:	71fb      	strb	r3, [r7, #7]
    f67a:	e023      	b.n	f6c4 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    f67c:	79fa      	ldrb	r2, [r7, #7]
    f67e:	4613      	mov	r3, r2
    f680:	009b      	lsls	r3, r3, #2
    f682:	4413      	add	r3, r2
    f684:	009b      	lsls	r3, r3, #2
    f686:	3310      	adds	r3, #16
    f688:	4a14      	ldr	r2, [pc, #80]	; (f6dc <_usb_d_dev_reset_epts+0x6c>)
    f68a:	4413      	add	r3, r2
    f68c:	3304      	adds	r3, #4
    f68e:	2103      	movs	r1, #3
    f690:	4618      	mov	r0, r3
    f692:	4b13      	ldr	r3, [pc, #76]	; (f6e0 <_usb_d_dev_reset_epts+0x70>)
    f694:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    f696:	79fa      	ldrb	r2, [r7, #7]
    f698:	4910      	ldr	r1, [pc, #64]	; (f6dc <_usb_d_dev_reset_epts+0x6c>)
    f69a:	4613      	mov	r3, r2
    f69c:	009b      	lsls	r3, r3, #2
    f69e:	4413      	add	r3, r2
    f6a0:	009b      	lsls	r3, r3, #2
    f6a2:	440b      	add	r3, r1
    f6a4:	3326      	adds	r3, #38	; 0x26
    f6a6:	22ff      	movs	r2, #255	; 0xff
    f6a8:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    f6aa:	79fa      	ldrb	r2, [r7, #7]
    f6ac:	490b      	ldr	r1, [pc, #44]	; (f6dc <_usb_d_dev_reset_epts+0x6c>)
    f6ae:	4613      	mov	r3, r2
    f6b0:	009b      	lsls	r3, r3, #2
    f6b2:	4413      	add	r3, r2
    f6b4:	009b      	lsls	r3, r3, #2
    f6b6:	440b      	add	r3, r1
    f6b8:	3327      	adds	r3, #39	; 0x27
    f6ba:	2200      	movs	r2, #0
    f6bc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    f6be:	79fb      	ldrb	r3, [r7, #7]
    f6c0:	3301      	adds	r3, #1
    f6c2:	71fb      	strb	r3, [r7, #7]
    f6c4:	79fb      	ldrb	r3, [r7, #7]
    f6c6:	2b08      	cmp	r3, #8
    f6c8:	d9d8      	bls.n	f67c <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    f6ca:	22a0      	movs	r2, #160	; 0xa0
    f6cc:	2100      	movs	r1, #0
    f6ce:	4805      	ldr	r0, [pc, #20]	; (f6e4 <_usb_d_dev_reset_epts+0x74>)
    f6d0:	4b05      	ldr	r3, [pc, #20]	; (f6e8 <_usb_d_dev_reset_epts+0x78>)
    f6d2:	4798      	blx	r3
}
    f6d4:	bf00      	nop
    f6d6:	3708      	adds	r7, #8
    f6d8:	46bd      	mov	sp, r7
    f6da:	bd80      	pop	{r7, pc}
    f6dc:	20008c50 	.word	0x20008c50
    f6e0:	0000ff35 	.word	0x0000ff35
    f6e4:	20008d18 	.word	0x20008d18
    f6e8:	0001c5b9 	.word	0x0001c5b9

0000f6ec <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    f6ec:	b580      	push	{r7, lr}
    f6ee:	b084      	sub	sp, #16
    f6f0:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    f6f2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f6f6:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    f6f8:	2301      	movs	r3, #1
    f6fa:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    f6fc:	2304      	movs	r3, #4
    f6fe:	713b      	strb	r3, [r7, #4]
    f700:	2300      	movs	r3, #0
    f702:	717b      	strb	r3, [r7, #5]
    f704:	2300      	movs	r3, #0
    f706:	71bb      	strb	r3, [r7, #6]
    f708:	2300      	movs	r3, #0
    f70a:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    f70c:	2101      	movs	r1, #1
    f70e:	68f8      	ldr	r0, [r7, #12]
    f710:	4b26      	ldr	r3, [pc, #152]	; (f7ac <_usb_d_dev_init+0xc0>)
    f712:	4798      	blx	r3
    f714:	4603      	mov	r3, r0
    f716:	f083 0301 	eor.w	r3, r3, #1
    f71a:	b2db      	uxtb	r3, r3
    f71c:	2b00      	cmp	r3, #0
    f71e:	d011      	beq.n	f744 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    f720:	2102      	movs	r1, #2
    f722:	68f8      	ldr	r0, [r7, #12]
    f724:	4b22      	ldr	r3, [pc, #136]	; (f7b0 <_usb_d_dev_init+0xc4>)
    f726:	4798      	blx	r3
    f728:	4603      	mov	r3, r0
    f72a:	2b00      	cmp	r3, #0
    f72c:	d006      	beq.n	f73c <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    f72e:	68f8      	ldr	r0, [r7, #12]
    f730:	4b20      	ldr	r3, [pc, #128]	; (f7b4 <_usb_d_dev_init+0xc8>)
    f732:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    f734:	2102      	movs	r1, #2
    f736:	68f8      	ldr	r0, [r7, #12]
    f738:	4b1f      	ldr	r3, [pc, #124]	; (f7b8 <_usb_d_dev_init+0xcc>)
    f73a:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    f73c:	2101      	movs	r1, #1
    f73e:	68f8      	ldr	r0, [r7, #12]
    f740:	4b1e      	ldr	r3, [pc, #120]	; (f7bc <_usb_d_dev_init+0xd0>)
    f742:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    f744:	2101      	movs	r1, #1
    f746:	68f8      	ldr	r0, [r7, #12]
    f748:	4b1b      	ldr	r3, [pc, #108]	; (f7b8 <_usb_d_dev_init+0xcc>)
    f74a:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    f74c:	4b1c      	ldr	r3, [pc, #112]	; (f7c0 <_usb_d_dev_init+0xd4>)
    f74e:	4a1d      	ldr	r2, [pc, #116]	; (f7c4 <_usb_d_dev_init+0xd8>)
    f750:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    f752:	4b1b      	ldr	r3, [pc, #108]	; (f7c0 <_usb_d_dev_init+0xd4>)
    f754:	4a1b      	ldr	r2, [pc, #108]	; (f7c4 <_usb_d_dev_init+0xd8>)
    f756:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    f758:	4b19      	ldr	r3, [pc, #100]	; (f7c0 <_usb_d_dev_init+0xd4>)
    f75a:	4a1a      	ldr	r2, [pc, #104]	; (f7c4 <_usb_d_dev_init+0xd8>)
    f75c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    f75e:	4b18      	ldr	r3, [pc, #96]	; (f7c0 <_usb_d_dev_init+0xd4>)
    f760:	4a18      	ldr	r2, [pc, #96]	; (f7c4 <_usb_d_dev_init+0xd8>)
    f762:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    f764:	4b16      	ldr	r3, [pc, #88]	; (f7c0 <_usb_d_dev_init+0xd4>)
    f766:	4a17      	ldr	r2, [pc, #92]	; (f7c4 <_usb_d_dev_init+0xd8>)
    f768:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    f76a:	4b17      	ldr	r3, [pc, #92]	; (f7c8 <_usb_d_dev_init+0xdc>)
    f76c:	4798      	blx	r3

	_usb_load_calib();
    f76e:	4b17      	ldr	r3, [pc, #92]	; (f7cc <_usb_d_dev_init+0xe0>)
    f770:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    f772:	2104      	movs	r1, #4
    f774:	68f8      	ldr	r0, [r7, #12]
    f776:	4b11      	ldr	r3, [pc, #68]	; (f7bc <_usb_d_dev_init+0xd0>)
    f778:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    f77a:	4b15      	ldr	r3, [pc, #84]	; (f7d0 <_usb_d_dev_init+0xe4>)
    f77c:	4619      	mov	r1, r3
    f77e:	68f8      	ldr	r0, [r7, #12]
    f780:	4b14      	ldr	r3, [pc, #80]	; (f7d4 <_usb_d_dev_init+0xe8>)
    f782:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    f784:	7afb      	ldrb	r3, [r7, #11]
    f786:	f107 0210 	add.w	r2, r7, #16
    f78a:	4413      	add	r3, r2
    f78c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    f790:	f043 0301 	orr.w	r3, r3, #1
    f794:	b2db      	uxtb	r3, r3
    f796:	b29b      	uxth	r3, r3
    f798:	4619      	mov	r1, r3
    f79a:	68f8      	ldr	r0, [r7, #12]
    f79c:	4b0e      	ldr	r3, [pc, #56]	; (f7d8 <_usb_d_dev_init+0xec>)
    f79e:	4798      	blx	r3

	return ERR_NONE;
    f7a0:	2300      	movs	r3, #0
}
    f7a2:	4618      	mov	r0, r3
    f7a4:	3710      	adds	r7, #16
    f7a6:	46bd      	mov	sp, r7
    f7a8:	bd80      	pop	{r7, pc}
    f7aa:	bf00      	nop
    f7ac:	0000dd85 	.word	0x0000dd85
    f7b0:	0000e0d5 	.word	0x0000e0d5
    f7b4:	0000e0a9 	.word	0x0000e0a9
    f7b8:	0000dd5b 	.word	0x0000dd5b
    f7bc:	0000e105 	.word	0x0000e105
    f7c0:	20008c50 	.word	0x20008c50
    f7c4:	0000e1cd 	.word	0x0000e1cd
    f7c8:	0000f671 	.word	0x0000f671
    f7cc:	0000e1e5 	.word	0x0000e1e5
    f7d0:	20008d18 	.word	0x20008d18
    f7d4:	0000e1b1 	.word	0x0000e1b1
    f7d8:	0000e175 	.word	0x0000e175

0000f7dc <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    f7dc:	b580      	push	{r7, lr}
    f7de:	b082      	sub	sp, #8
    f7e0:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    f7e2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f7e6:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    f7e8:	2103      	movs	r1, #3
    f7ea:	6878      	ldr	r0, [r7, #4]
    f7ec:	4b17      	ldr	r3, [pc, #92]	; (f84c <_usb_d_dev_enable+0x70>)
    f7ee:	4798      	blx	r3
    f7f0:	4603      	mov	r3, r0
    f7f2:	2b00      	cmp	r3, #0
    f7f4:	d002      	beq.n	f7fc <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    f7f6:	f06f 0310 	mvn.w	r3, #16
    f7fa:	e023      	b.n	f844 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    f7fc:	6878      	ldr	r0, [r7, #4]
    f7fe:	4b14      	ldr	r3, [pc, #80]	; (f850 <_usb_d_dev_enable+0x74>)
    f800:	4798      	blx	r3
    f802:	4603      	mov	r3, r0
    f804:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    f806:	78fb      	ldrb	r3, [r7, #3]
    f808:	f003 0302 	and.w	r3, r3, #2
    f80c:	2b00      	cmp	r3, #0
    f80e:	d107      	bne.n	f820 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    f810:	78fb      	ldrb	r3, [r7, #3]
    f812:	f043 0302 	orr.w	r3, r3, #2
    f816:	b2db      	uxtb	r3, r3
    f818:	4619      	mov	r1, r3
    f81a:	6878      	ldr	r0, [r7, #4]
    f81c:	4b0d      	ldr	r3, [pc, #52]	; (f854 <_usb_d_dev_enable+0x78>)
    f81e:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    f820:	2050      	movs	r0, #80	; 0x50
    f822:	4b0d      	ldr	r3, [pc, #52]	; (f858 <_usb_d_dev_enable+0x7c>)
    f824:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    f826:	2051      	movs	r0, #81	; 0x51
    f828:	4b0b      	ldr	r3, [pc, #44]	; (f858 <_usb_d_dev_enable+0x7c>)
    f82a:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    f82c:	2052      	movs	r0, #82	; 0x52
    f82e:	4b0a      	ldr	r3, [pc, #40]	; (f858 <_usb_d_dev_enable+0x7c>)
    f830:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    f832:	2053      	movs	r0, #83	; 0x53
    f834:	4b08      	ldr	r3, [pc, #32]	; (f858 <_usb_d_dev_enable+0x7c>)
    f836:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    f838:	f240 218d 	movw	r1, #653	; 0x28d
    f83c:	6878      	ldr	r0, [r7, #4]
    f83e:	4b07      	ldr	r3, [pc, #28]	; (f85c <_usb_d_dev_enable+0x80>)
    f840:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    f842:	2300      	movs	r3, #0
}
    f844:	4618      	mov	r0, r3
    f846:	3708      	adds	r7, #8
    f848:	46bd      	mov	sp, r7
    f84a:	bd80      	pop	{r7, pc}
    f84c:	0000e07f 	.word	0x0000e07f
    f850:	0000e12d 	.word	0x0000e12d
    f854:	0000e105 	.word	0x0000e105
    f858:	0000dc91 	.word	0x0000dc91
    f85c:	0000e029 	.word	0x0000e029

0000f860 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    f860:	b580      	push	{r7, lr}
    f862:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    f864:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f868:	4b01      	ldr	r3, [pc, #4]	; (f870 <_usb_d_dev_attach+0x10>)
    f86a:	4798      	blx	r3
}
    f86c:	bf00      	nop
    f86e:	bd80      	pop	{r7, pc}
    f870:	0000e151 	.word	0x0000e151

0000f874 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    f874:	b580      	push	{r7, lr}
    f876:	b082      	sub	sp, #8
    f878:	af00      	add	r7, sp, #0
    f87a:	4603      	mov	r3, r0
    f87c:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    f87e:	79fb      	ldrb	r3, [r7, #7]
    f880:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f884:	b2db      	uxtb	r3, r3
    f886:	4619      	mov	r1, r3
    f888:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f88c:	4b02      	ldr	r3, [pc, #8]	; (f898 <_usb_d_dev_set_address+0x24>)
    f88e:	4798      	blx	r3
}
    f890:	bf00      	nop
    f892:	3708      	adds	r7, #8
    f894:	46bd      	mov	sp, r7
    f896:	bd80      	pop	{r7, pc}
    f898:	0000e193 	.word	0x0000e193

0000f89c <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    f89c:	b590      	push	{r4, r7, lr}
    f89e:	b085      	sub	sp, #20
    f8a0:	af00      	add	r7, sp, #0
    f8a2:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    f8a4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f8a8:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f8aa:	687b      	ldr	r3, [r7, #4]
    f8ac:	7c9b      	ldrb	r3, [r3, #18]
    f8ae:	f003 030f 	and.w	r3, r3, #15
    f8b2:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    f8b4:	687b      	ldr	r3, [r7, #4]
    f8b6:	68db      	ldr	r3, [r3, #12]
    f8b8:	461a      	mov	r2, r3
    f8ba:	7afb      	ldrb	r3, [r7, #11]
    f8bc:	2100      	movs	r1, #0
    f8be:	4618      	mov	r0, r3
    f8c0:	4b0f      	ldr	r3, [pc, #60]	; (f900 <_usb_d_dev_trans_setup+0x64>)
    f8c2:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    f8c4:	687b      	ldr	r3, [r7, #4]
    f8c6:	8a1b      	ldrh	r3, [r3, #16]
    f8c8:	461a      	mov	r2, r3
    f8ca:	7af8      	ldrb	r0, [r7, #11]
    f8cc:	2300      	movs	r3, #0
    f8ce:	2100      	movs	r1, #0
    f8d0:	4c0c      	ldr	r4, [pc, #48]	; (f904 <_usb_d_dev_trans_setup+0x68>)
    f8d2:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    f8d4:	7afb      	ldrb	r3, [r7, #11]
    f8d6:	22b0      	movs	r2, #176	; 0xb0
    f8d8:	4619      	mov	r1, r3
    f8da:	68f8      	ldr	r0, [r7, #12]
    f8dc:	4b0a      	ldr	r3, [pc, #40]	; (f908 <_usb_d_dev_trans_setup+0x6c>)
    f8de:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    f8e0:	7afb      	ldrb	r3, [r7, #11]
    f8e2:	2200      	movs	r2, #0
    f8e4:	2100      	movs	r1, #0
    f8e6:	4618      	mov	r0, r3
    f8e8:	4b08      	ldr	r3, [pc, #32]	; (f90c <_usb_d_dev_trans_setup+0x70>)
    f8ea:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    f8ec:	7afb      	ldrb	r3, [r7, #11]
    f8ee:	2210      	movs	r2, #16
    f8f0:	4619      	mov	r1, r3
    f8f2:	68f8      	ldr	r0, [r7, #12]
    f8f4:	4b06      	ldr	r3, [pc, #24]	; (f910 <_usb_d_dev_trans_setup+0x74>)
    f8f6:	4798      	blx	r3
}
    f8f8:	bf00      	nop
    f8fa:	3714      	adds	r7, #20
    f8fc:	46bd      	mov	sp, r7
    f8fe:	bd90      	pop	{r4, r7, pc}
    f900:	0000e631 	.word	0x0000e631
    f904:	0000e7b9 	.word	0x0000e7b9
    f908:	0000de91 	.word	0x0000de91
    f90c:	0000e889 	.word	0x0000e889
    f910:	0000dee5 	.word	0x0000dee5

0000f914 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    f914:	b580      	push	{r7, lr}
    f916:	b088      	sub	sp, #32
    f918:	af00      	add	r7, sp, #0
    f91a:	4603      	mov	r3, r0
    f91c:	71fb      	strb	r3, [r7, #7]
    f91e:	460b      	mov	r3, r1
    f920:	71bb      	strb	r3, [r7, #6]
    f922:	4613      	mov	r3, r2
    f924:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    f926:	79fb      	ldrb	r3, [r7, #7]
    f928:	f003 030f 	and.w	r3, r3, #15
    f92c:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    f92e:	79fb      	ldrb	r3, [r7, #7]
    f930:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f934:	2b00      	cmp	r3, #0
    f936:	bf14      	ite	ne
    f938:	2301      	movne	r3, #1
    f93a:	2300      	moveq	r3, #0
    f93c:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f93e:	7fba      	ldrb	r2, [r7, #30]
    f940:	7ffb      	ldrb	r3, [r7, #31]
    f942:	4611      	mov	r1, r2
    f944:	4618      	mov	r0, r3
    f946:	4b3e      	ldr	r3, [pc, #248]	; (fa40 <_usb_d_dev_ep_init+0x12c>)
    f948:	4798      	blx	r3
    f94a:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    f94c:	79bb      	ldrb	r3, [r7, #6]
    f94e:	f003 0303 	and.w	r3, r3, #3
    f952:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    f954:	7ffa      	ldrb	r2, [r7, #31]
    f956:	4613      	mov	r3, r2
    f958:	005b      	lsls	r3, r3, #1
    f95a:	4413      	add	r3, r2
    f95c:	009b      	lsls	r3, r3, #2
    f95e:	4a39      	ldr	r2, [pc, #228]	; (fa44 <_usb_d_dev_ep_init+0x130>)
    f960:	4413      	add	r3, r2
    f962:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    f964:	7ffb      	ldrb	r3, [r7, #31]
    f966:	2b04      	cmp	r3, #4
    f968:	d902      	bls.n	f970 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    f96a:	f06f 0311 	mvn.w	r3, #17
    f96e:	e063      	b.n	fa38 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    f970:	69bb      	ldr	r3, [r7, #24]
    f972:	7c9b      	ldrb	r3, [r3, #18]
    f974:	2bff      	cmp	r3, #255	; 0xff
    f976:	d002      	beq.n	f97e <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    f978:	f06f 0313 	mvn.w	r3, #19
    f97c:	e05c      	b.n	fa38 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    f97e:	7dfb      	ldrb	r3, [r7, #23]
    f980:	2b00      	cmp	r3, #0
    f982:	d11f      	bne.n	f9c4 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    f984:	7fbb      	ldrb	r3, [r7, #30]
    f986:	2b00      	cmp	r3, #0
    f988:	bf14      	ite	ne
    f98a:	2301      	movne	r3, #1
    f98c:	2300      	moveq	r3, #0
    f98e:	b2db      	uxtb	r3, r3
    f990:	f083 0301 	eor.w	r3, r3, #1
    f994:	b2db      	uxtb	r3, r3
    f996:	f003 0301 	and.w	r3, r3, #1
    f99a:	b2da      	uxtb	r2, r3
    f99c:	7ffb      	ldrb	r3, [r7, #31]
    f99e:	4611      	mov	r1, r2
    f9a0:	4618      	mov	r0, r3
    f9a2:	4b27      	ldr	r3, [pc, #156]	; (fa40 <_usb_d_dev_ep_init+0x12c>)
    f9a4:	4798      	blx	r3
    f9a6:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    f9a8:	68fb      	ldr	r3, [r7, #12]
    f9aa:	7c9b      	ldrb	r3, [r3, #18]
    f9ac:	2bff      	cmp	r3, #255	; 0xff
    f9ae:	d002      	beq.n	f9b6 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    f9b0:	f06f 0313 	mvn.w	r3, #19
    f9b4:	e040      	b.n	fa38 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    f9b6:	693b      	ldr	r3, [r7, #16]
    f9b8:	681b      	ldr	r3, [r3, #0]
    f9ba:	2b00      	cmp	r3, #0
    f9bc:	d102      	bne.n	f9c4 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    f9be:	f06f 0312 	mvn.w	r3, #18
    f9c2:	e039      	b.n	fa38 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    f9c4:	7fbb      	ldrb	r3, [r7, #30]
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	d007      	beq.n	f9da <_usb_d_dev_ep_init+0xc6>
    f9ca:	693b      	ldr	r3, [r7, #16]
    f9cc:	685b      	ldr	r3, [r3, #4]
    f9ce:	2b00      	cmp	r3, #0
    f9d0:	bf14      	ite	ne
    f9d2:	2301      	movne	r3, #1
    f9d4:	2300      	moveq	r3, #0
    f9d6:	b2db      	uxtb	r3, r3
    f9d8:	e006      	b.n	f9e8 <_usb_d_dev_ep_init+0xd4>
    f9da:	693b      	ldr	r3, [r7, #16]
    f9dc:	681b      	ldr	r3, [r3, #0]
    f9de:	2b00      	cmp	r3, #0
    f9e0:	bf14      	ite	ne
    f9e2:	2301      	movne	r3, #1
    f9e4:	2300      	moveq	r3, #0
    f9e6:	b2db      	uxtb	r3, r3
    f9e8:	2b00      	cmp	r3, #0
    f9ea:	d00f      	beq.n	fa0c <_usb_d_dev_ep_init+0xf8>
    f9ec:	7fbb      	ldrb	r3, [r7, #30]
    f9ee:	2b00      	cmp	r3, #0
    f9f0:	d003      	beq.n	f9fa <_usb_d_dev_ep_init+0xe6>
    f9f2:	693b      	ldr	r3, [r7, #16]
    f9f4:	895b      	ldrh	r3, [r3, #10]
    f9f6:	461a      	mov	r2, r3
    f9f8:	e002      	b.n	fa00 <_usb_d_dev_ep_init+0xec>
    f9fa:	693b      	ldr	r3, [r7, #16]
    f9fc:	891b      	ldrh	r3, [r3, #8]
    f9fe:	461a      	mov	r2, r3
    fa00:	88bb      	ldrh	r3, [r7, #4]
    fa02:	429a      	cmp	r2, r3
    fa04:	da02      	bge.n	fa0c <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    fa06:	f06f 0312 	mvn.w	r3, #18
    fa0a:	e015      	b.n	fa38 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    fa0c:	7fbb      	ldrb	r3, [r7, #30]
    fa0e:	2b00      	cmp	r3, #0
    fa10:	d002      	beq.n	fa18 <_usb_d_dev_ep_init+0x104>
    fa12:	693b      	ldr	r3, [r7, #16]
    fa14:	685b      	ldr	r3, [r3, #4]
    fa16:	e001      	b.n	fa1c <_usb_d_dev_ep_init+0x108>
    fa18:	693b      	ldr	r3, [r7, #16]
    fa1a:	681b      	ldr	r3, [r3, #0]
    fa1c:	69ba      	ldr	r2, [r7, #24]
    fa1e:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    fa20:	69bb      	ldr	r3, [r7, #24]
    fa22:	88ba      	ldrh	r2, [r7, #4]
    fa24:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    fa26:	7dfb      	ldrb	r3, [r7, #23]
    fa28:	3301      	adds	r3, #1
    fa2a:	b2da      	uxtb	r2, r3
    fa2c:	69bb      	ldr	r3, [r7, #24]
    fa2e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    fa30:	69bb      	ldr	r3, [r7, #24]
    fa32:	79fa      	ldrb	r2, [r7, #7]
    fa34:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    fa36:	2300      	movs	r3, #0
}
    fa38:	4618      	mov	r0, r3
    fa3a:	3720      	adds	r7, #32
    fa3c:	46bd      	mov	sp, r7
    fa3e:	bd80      	pop	{r7, pc}
    fa40:	0000e945 	.word	0x0000e945
    fa44:	00020d54 	.word	0x00020d54

0000fa48 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    fa48:	b580      	push	{r7, lr}
    fa4a:	b086      	sub	sp, #24
    fa4c:	af00      	add	r7, sp, #0
    fa4e:	4603      	mov	r3, r0
    fa50:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    fa52:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    fa56:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    fa58:	79fb      	ldrb	r3, [r7, #7]
    fa5a:	f003 030f 	and.w	r3, r3, #15
    fa5e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    fa60:	79fb      	ldrb	r3, [r7, #7]
    fa62:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fa66:	2b00      	cmp	r3, #0
    fa68:	bf14      	ite	ne
    fa6a:	2301      	movne	r3, #1
    fa6c:	2300      	moveq	r3, #0
    fa6e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    fa70:	7cba      	ldrb	r2, [r7, #18]
    fa72:	7cfb      	ldrb	r3, [r7, #19]
    fa74:	4611      	mov	r1, r2
    fa76:	4618      	mov	r0, r3
    fa78:	4b2a      	ldr	r3, [pc, #168]	; (fb24 <_usb_d_dev_ep_deinit+0xdc>)
    fa7a:	4798      	blx	r3
    fa7c:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    fa7e:	7cfb      	ldrb	r3, [r7, #19]
    fa80:	2b04      	cmp	r3, #4
    fa82:	d84a      	bhi.n	fb1a <_usb_d_dev_ep_deinit+0xd2>
    fa84:	68fb      	ldr	r3, [r7, #12]
    fa86:	7c9b      	ldrb	r3, [r3, #18]
    fa88:	2bff      	cmp	r3, #255	; 0xff
    fa8a:	d046      	beq.n	fb1a <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    fa8c:	7cbb      	ldrb	r3, [r7, #18]
    fa8e:	2203      	movs	r2, #3
    fa90:	4619      	mov	r1, r3
    fa92:	68f8      	ldr	r0, [r7, #12]
    fa94:	4b24      	ldr	r3, [pc, #144]	; (fb28 <_usb_d_dev_ep_deinit+0xe0>)
    fa96:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    fa98:	68fb      	ldr	r3, [r7, #12]
    fa9a:	7cdb      	ldrb	r3, [r3, #19]
    fa9c:	f003 0307 	and.w	r3, r3, #7
    faa0:	b2db      	uxtb	r3, r3
    faa2:	2b01      	cmp	r3, #1
    faa4:	d107      	bne.n	fab6 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    faa6:	79fb      	ldrb	r3, [r7, #7]
    faa8:	697a      	ldr	r2, [r7, #20]
    faaa:	3308      	adds	r3, #8
    faac:	015b      	lsls	r3, r3, #5
    faae:	4413      	add	r3, r2
    fab0:	2200      	movs	r2, #0
    fab2:	701a      	strb	r2, [r3, #0]
    fab4:	e02a      	b.n	fb0c <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    fab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    faba:	2b00      	cmp	r3, #0
    fabc:	da15      	bge.n	faea <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    fabe:	79fb      	ldrb	r3, [r7, #7]
    fac0:	f003 030f 	and.w	r3, r3, #15
    fac4:	79fa      	ldrb	r2, [r7, #7]
    fac6:	f002 020f 	and.w	r2, r2, #15
    faca:	6979      	ldr	r1, [r7, #20]
    facc:	3208      	adds	r2, #8
    face:	0152      	lsls	r2, r2, #5
    fad0:	440a      	add	r2, r1
    fad2:	7812      	ldrb	r2, [r2, #0]
    fad4:	b2d2      	uxtb	r2, r2
    fad6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    fada:	b2d1      	uxtb	r1, r2
    fadc:	697a      	ldr	r2, [r7, #20]
    fade:	3308      	adds	r3, #8
    fae0:	015b      	lsls	r3, r3, #5
    fae2:	4413      	add	r3, r2
    fae4:	460a      	mov	r2, r1
    fae6:	701a      	strb	r2, [r3, #0]
    fae8:	e010      	b.n	fb0c <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    faea:	79fb      	ldrb	r3, [r7, #7]
    faec:	79fa      	ldrb	r2, [r7, #7]
    faee:	6979      	ldr	r1, [r7, #20]
    faf0:	3208      	adds	r2, #8
    faf2:	0152      	lsls	r2, r2, #5
    faf4:	440a      	add	r2, r1
    faf6:	7812      	ldrb	r2, [r2, #0]
    faf8:	b2d2      	uxtb	r2, r2
    fafa:	f022 0207 	bic.w	r2, r2, #7
    fafe:	b2d1      	uxtb	r1, r2
    fb00:	697a      	ldr	r2, [r7, #20]
    fb02:	3308      	adds	r3, #8
    fb04:	015b      	lsls	r3, r3, #5
    fb06:	4413      	add	r3, r2
    fb08:	460a      	mov	r2, r1
    fb0a:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    fb0c:	68fb      	ldr	r3, [r7, #12]
    fb0e:	2200      	movs	r2, #0
    fb10:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    fb12:	68fb      	ldr	r3, [r7, #12]
    fb14:	22ff      	movs	r2, #255	; 0xff
    fb16:	749a      	strb	r2, [r3, #18]
    fb18:	e000      	b.n	fb1c <_usb_d_dev_ep_deinit+0xd4>
		return;
    fb1a:	bf00      	nop
}
    fb1c:	3718      	adds	r7, #24
    fb1e:	46bd      	mov	sp, r7
    fb20:	bd80      	pop	{r7, pc}
    fb22:	bf00      	nop
    fb24:	0000e945 	.word	0x0000e945
    fb28:	0000ff7d 	.word	0x0000ff7d

0000fb2c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    fb2c:	b5b0      	push	{r4, r5, r7, lr}
    fb2e:	b088      	sub	sp, #32
    fb30:	af00      	add	r7, sp, #0
    fb32:	4603      	mov	r3, r0
    fb34:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    fb36:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    fb3a:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    fb3c:	79fb      	ldrb	r3, [r7, #7]
    fb3e:	f003 030f 	and.w	r3, r3, #15
    fb42:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    fb44:	79fb      	ldrb	r3, [r7, #7]
    fb46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fb4a:	2b00      	cmp	r3, #0
    fb4c:	bf14      	ite	ne
    fb4e:	2301      	movne	r3, #1
    fb50:	2300      	moveq	r3, #0
    fb52:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    fb54:	7eba      	ldrb	r2, [r7, #26]
    fb56:	7efb      	ldrb	r3, [r7, #27]
    fb58:	4611      	mov	r1, r2
    fb5a:	4618      	mov	r0, r3
    fb5c:	4b70      	ldr	r3, [pc, #448]	; (fd20 <_usb_d_dev_ep_enable+0x1f4>)
    fb5e:	4798      	blx	r3
    fb60:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    fb62:	7efb      	ldrb	r3, [r7, #27]
    fb64:	4619      	mov	r1, r3
    fb66:	69f8      	ldr	r0, [r7, #28]
    fb68:	4b6e      	ldr	r3, [pc, #440]	; (fd24 <_usb_d_dev_ep_enable+0x1f8>)
    fb6a:	4798      	blx	r3
    fb6c:	4603      	mov	r3, r0
    fb6e:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    fb70:	7efb      	ldrb	r3, [r7, #27]
    fb72:	2b04      	cmp	r3, #4
    fb74:	d803      	bhi.n	fb7e <_usb_d_dev_ep_enable+0x52>
    fb76:	697b      	ldr	r3, [r7, #20]
    fb78:	7c9b      	ldrb	r3, [r3, #18]
    fb7a:	2bff      	cmp	r3, #255	; 0xff
    fb7c:	d102      	bne.n	fb84 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    fb7e:	f06f 0311 	mvn.w	r3, #17
    fb82:	e0c8      	b.n	fd16 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    fb84:	7efb      	ldrb	r3, [r7, #27]
    fb86:	015b      	lsls	r3, r3, #5
    fb88:	4a67      	ldr	r2, [pc, #412]	; (fd28 <_usb_d_dev_ep_enable+0x1fc>)
    fb8a:	4413      	add	r3, r2
    fb8c:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    fb8e:	697b      	ldr	r3, [r7, #20]
    fb90:	7cdb      	ldrb	r3, [r3, #19]
    fb92:	f003 0307 	and.w	r3, r3, #7
    fb96:	b2db      	uxtb	r3, r3
    fb98:	2b01      	cmp	r3, #1
    fb9a:	d14b      	bne.n	fc34 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    fb9c:	7cfb      	ldrb	r3, [r7, #19]
    fb9e:	f003 0377 	and.w	r3, r3, #119	; 0x77
    fba2:	2b00      	cmp	r3, #0
    fba4:	d002      	beq.n	fbac <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    fba6:	f06f 0313 	mvn.w	r3, #19
    fbaa:	e0b4      	b.n	fd16 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    fbac:	7efb      	ldrb	r3, [r7, #27]
    fbae:	2211      	movs	r2, #17
    fbb0:	4619      	mov	r1, r3
    fbb2:	69f8      	ldr	r0, [r7, #28]
    fbb4:	4b5d      	ldr	r3, [pc, #372]	; (fd2c <_usb_d_dev_ep_enable+0x200>)
    fbb6:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    fbb8:	697b      	ldr	r3, [r7, #20]
    fbba:	8a1b      	ldrh	r3, [r3, #16]
    fbbc:	039b      	lsls	r3, r3, #14
    fbbe:	4c5c      	ldr	r4, [pc, #368]	; (fd30 <_usb_d_dev_ep_enable+0x204>)
    fbc0:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    fbc2:	697b      	ldr	r3, [r7, #20]
    fbc4:	8a1b      	ldrh	r3, [r3, #16]
    fbc6:	4618      	mov	r0, r3
    fbc8:	4b5a      	ldr	r3, [pc, #360]	; (fd34 <_usb_d_dev_ep_enable+0x208>)
    fbca:	4798      	blx	r3
    fbcc:	4603      	mov	r3, r0
    fbce:	071b      	lsls	r3, r3, #28
    fbd0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    fbd4:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    fbd8:	68fb      	ldr	r3, [r7, #12]
    fbda:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    fbdc:	68fb      	ldr	r3, [r7, #12]
    fbde:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    fbe2:	697b      	ldr	r3, [r7, #20]
    fbe4:	8a1b      	ldrh	r3, [r3, #16]
    fbe6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    fbea:	697b      	ldr	r3, [r7, #20]
    fbec:	8a1b      	ldrh	r3, [r3, #16]
    fbee:	4618      	mov	r0, r3
    fbf0:	4b50      	ldr	r3, [pc, #320]	; (fd34 <_usb_d_dev_ep_enable+0x208>)
    fbf2:	4798      	blx	r3
    fbf4:	4603      	mov	r3, r0
    fbf6:	071b      	lsls	r3, r3, #28
    fbf8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    fbfc:	432b      	orrs	r3, r5
    fbfe:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    fc00:	7efb      	ldrb	r3, [r7, #27]
    fc02:	2200      	movs	r2, #0
    fc04:	2100      	movs	r1, #0
    fc06:	4618      	mov	r0, r3
    fc08:	4b4b      	ldr	r3, [pc, #300]	; (fd38 <_usb_d_dev_ep_enable+0x20c>)
    fc0a:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    fc0c:	7efb      	ldrb	r3, [r7, #27]
    fc0e:	2200      	movs	r2, #0
    fc10:	2101      	movs	r1, #1
    fc12:	4618      	mov	r0, r3
    fc14:	4b49      	ldr	r3, [pc, #292]	; (fd3c <_usb_d_dev_ep_enable+0x210>)
    fc16:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    fc18:	7efb      	ldrb	r3, [r7, #27]
    fc1a:	2100      	movs	r1, #0
    fc1c:	4618      	mov	r0, r3
    fc1e:	4b48      	ldr	r3, [pc, #288]	; (fd40 <_usb_d_dev_ep_enable+0x214>)
    fc20:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    fc22:	7efb      	ldrb	r3, [r7, #27]
    fc24:	2101      	movs	r1, #1
    fc26:	4618      	mov	r0, r3
    fc28:	4b45      	ldr	r3, [pc, #276]	; (fd40 <_usb_d_dev_ep_enable+0x214>)
    fc2a:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    fc2c:	6978      	ldr	r0, [r7, #20]
    fc2e:	4b45      	ldr	r3, [pc, #276]	; (fd44 <_usb_d_dev_ep_enable+0x218>)
    fc30:	4798      	blx	r3
    fc32:	e06f      	b.n	fd14 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    fc34:	7ebb      	ldrb	r3, [r7, #26]
    fc36:	2b00      	cmp	r3, #0
    fc38:	d038      	beq.n	fcac <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    fc3a:	7cfb      	ldrb	r3, [r7, #19]
    fc3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    fc40:	2b00      	cmp	r3, #0
    fc42:	d002      	beq.n	fc4a <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    fc44:	f06f 0313 	mvn.w	r3, #19
    fc48:	e065      	b.n	fd16 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    fc4a:	697b      	ldr	r3, [r7, #20]
    fc4c:	7cdb      	ldrb	r3, [r3, #19]
    fc4e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fc52:	b2db      	uxtb	r3, r3
    fc54:	011b      	lsls	r3, r3, #4
    fc56:	b2db      	uxtb	r3, r3
    fc58:	f003 0370 	and.w	r3, r3, #112	; 0x70
    fc5c:	b2da      	uxtb	r2, r3
    fc5e:	7cfb      	ldrb	r3, [r7, #19]
    fc60:	4313      	orrs	r3, r2
    fc62:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    fc64:	7cfa      	ldrb	r2, [r7, #19]
    fc66:	7efb      	ldrb	r3, [r7, #27]
    fc68:	4619      	mov	r1, r3
    fc6a:	69f8      	ldr	r0, [r7, #28]
    fc6c:	4b2f      	ldr	r3, [pc, #188]	; (fd2c <_usb_d_dev_ep_enable+0x200>)
    fc6e:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    fc70:	68fb      	ldr	r3, [r7, #12]
    fc72:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    fc76:	697b      	ldr	r3, [r7, #20]
    fc78:	8a1b      	ldrh	r3, [r3, #16]
    fc7a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    fc7e:	697b      	ldr	r3, [r7, #20]
    fc80:	8a1b      	ldrh	r3, [r3, #16]
    fc82:	4618      	mov	r0, r3
    fc84:	4b2b      	ldr	r3, [pc, #172]	; (fd34 <_usb_d_dev_ep_enable+0x208>)
    fc86:	4798      	blx	r3
    fc88:	4603      	mov	r3, r0
    fc8a:	071b      	lsls	r3, r3, #28
    fc8c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    fc90:	432b      	orrs	r3, r5
    fc92:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    fc94:	7efb      	ldrb	r3, [r7, #27]
    fc96:	2200      	movs	r2, #0
    fc98:	2101      	movs	r1, #1
    fc9a:	4618      	mov	r0, r3
    fc9c:	4b27      	ldr	r3, [pc, #156]	; (fd3c <_usb_d_dev_ep_enable+0x210>)
    fc9e:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    fca0:	7efb      	ldrb	r3, [r7, #27]
    fca2:	2101      	movs	r1, #1
    fca4:	4618      	mov	r0, r3
    fca6:	4b26      	ldr	r3, [pc, #152]	; (fd40 <_usb_d_dev_ep_enable+0x214>)
    fca8:	4798      	blx	r3
    fcaa:	e033      	b.n	fd14 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    fcac:	7cfb      	ldrb	r3, [r7, #19]
    fcae:	f003 0307 	and.w	r3, r3, #7
    fcb2:	2b00      	cmp	r3, #0
    fcb4:	d002      	beq.n	fcbc <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    fcb6:	f06f 0313 	mvn.w	r3, #19
    fcba:	e02c      	b.n	fd16 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    fcbc:	697b      	ldr	r3, [r7, #20]
    fcbe:	7cdb      	ldrb	r3, [r3, #19]
    fcc0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fcc4:	b2db      	uxtb	r3, r3
    fcc6:	461a      	mov	r2, r3
    fcc8:	7cfb      	ldrb	r3, [r7, #19]
    fcca:	4313      	orrs	r3, r2
    fccc:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    fcce:	7cfa      	ldrb	r2, [r7, #19]
    fcd0:	7efb      	ldrb	r3, [r7, #27]
    fcd2:	4619      	mov	r1, r3
    fcd4:	69f8      	ldr	r0, [r7, #28]
    fcd6:	4b15      	ldr	r3, [pc, #84]	; (fd2c <_usb_d_dev_ep_enable+0x200>)
    fcd8:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    fcda:	697b      	ldr	r3, [r7, #20]
    fcdc:	8a1b      	ldrh	r3, [r3, #16]
    fcde:	039b      	lsls	r3, r3, #14
    fce0:	4c13      	ldr	r4, [pc, #76]	; (fd30 <_usb_d_dev_ep_enable+0x204>)
    fce2:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    fce4:	697b      	ldr	r3, [r7, #20]
    fce6:	8a1b      	ldrh	r3, [r3, #16]
    fce8:	4618      	mov	r0, r3
    fcea:	4b12      	ldr	r3, [pc, #72]	; (fd34 <_usb_d_dev_ep_enable+0x208>)
    fcec:	4798      	blx	r3
    fcee:	4603      	mov	r3, r0
    fcf0:	071b      	lsls	r3, r3, #28
    fcf2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    fcf6:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    fcfa:	68fb      	ldr	r3, [r7, #12]
    fcfc:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    fcfe:	7efb      	ldrb	r3, [r7, #27]
    fd00:	2200      	movs	r2, #0
    fd02:	2100      	movs	r1, #0
    fd04:	4618      	mov	r0, r3
    fd06:	4b0c      	ldr	r3, [pc, #48]	; (fd38 <_usb_d_dev_ep_enable+0x20c>)
    fd08:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    fd0a:	7efb      	ldrb	r3, [r7, #27]
    fd0c:	2100      	movs	r1, #0
    fd0e:	4618      	mov	r0, r3
    fd10:	4b0b      	ldr	r3, [pc, #44]	; (fd40 <_usb_d_dev_ep_enable+0x214>)
    fd12:	4798      	blx	r3
	}

	return USB_OK;
    fd14:	2300      	movs	r3, #0
}
    fd16:	4618      	mov	r0, r3
    fd18:	3720      	adds	r7, #32
    fd1a:	46bd      	mov	sp, r7
    fd1c:	bdb0      	pop	{r4, r5, r7, pc}
    fd1e:	bf00      	nop
    fd20:	0000e945 	.word	0x0000e945
    fd24:	0000dfcb 	.word	0x0000dfcb
    fd28:	20008d18 	.word	0x20008d18
    fd2c:	0000dfa1 	.word	0x0000dfa1
    fd30:	0fffc000 	.word	0x0fffc000
    fd34:	0000e8e1 	.word	0x0000e8e1
    fd38:	0000e889 	.word	0x0000e889
    fd3c:	0000e831 	.word	0x0000e831
    fd40:	0000e7f9 	.word	0x0000e7f9
    fd44:	0000f89d 	.word	0x0000f89d

0000fd48 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    fd48:	b580      	push	{r7, lr}
    fd4a:	b084      	sub	sp, #16
    fd4c:	af00      	add	r7, sp, #0
    fd4e:	6078      	str	r0, [r7, #4]
    fd50:	460b      	mov	r3, r1
    fd52:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    fd54:	687b      	ldr	r3, [r7, #4]
    fd56:	7c9b      	ldrb	r3, [r3, #18]
    fd58:	f003 030f 	and.w	r3, r3, #15
    fd5c:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    fd5e:	78fa      	ldrb	r2, [r7, #3]
    fd60:	7bfb      	ldrb	r3, [r7, #15]
    fd62:	4611      	mov	r1, r2
    fd64:	4618      	mov	r0, r3
    fd66:	4b03      	ldr	r3, [pc, #12]	; (fd74 <_usb_d_dev_ep_stall_get+0x2c>)
    fd68:	4798      	blx	r3
    fd6a:	4603      	mov	r3, r0
}
    fd6c:	4618      	mov	r0, r3
    fd6e:	3710      	adds	r7, #16
    fd70:	46bd      	mov	sp, r7
    fd72:	bd80      	pop	{r7, pc}
    fd74:	0000e439 	.word	0x0000e439

0000fd78 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    fd78:	b580      	push	{r7, lr}
    fd7a:	b084      	sub	sp, #16
    fd7c:	af00      	add	r7, sp, #0
    fd7e:	6078      	str	r0, [r7, #4]
    fd80:	460b      	mov	r3, r1
    fd82:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    fd84:	687b      	ldr	r3, [r7, #4]
    fd86:	7c9b      	ldrb	r3, [r3, #18]
    fd88:	f003 030f 	and.w	r3, r3, #15
    fd8c:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    fd8e:	78f9      	ldrb	r1, [r7, #3]
    fd90:	7bfb      	ldrb	r3, [r7, #15]
    fd92:	2201      	movs	r2, #1
    fd94:	4618      	mov	r0, r3
    fd96:	4b0a      	ldr	r3, [pc, #40]	; (fdc0 <_usb_d_dev_ep_stall_set+0x48>)
    fd98:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    fd9a:	78fb      	ldrb	r3, [r7, #3]
    fd9c:	2220      	movs	r2, #32
    fd9e:	409a      	lsls	r2, r3
    fda0:	7bfb      	ldrb	r3, [r7, #15]
    fda2:	4611      	mov	r1, r2
    fda4:	4618      	mov	r0, r3
    fda6:	4b07      	ldr	r3, [pc, #28]	; (fdc4 <_usb_d_dev_ep_stall_set+0x4c>)
    fda8:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    fdaa:	687a      	ldr	r2, [r7, #4]
    fdac:	7cd3      	ldrb	r3, [r2, #19]
    fdae:	f043 0308 	orr.w	r3, r3, #8
    fdb2:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    fdb4:	2300      	movs	r3, #0
}
    fdb6:	4618      	mov	r0, r3
    fdb8:	3710      	adds	r7, #16
    fdba:	46bd      	mov	sp, r7
    fdbc:	bd80      	pop	{r7, pc}
    fdbe:	bf00      	nop
    fdc0:	0000e3e1 	.word	0x0000e3e1
    fdc4:	0000e361 	.word	0x0000e361

0000fdc8 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    fdc8:	b580      	push	{r7, lr}
    fdca:	b084      	sub	sp, #16
    fdcc:	af00      	add	r7, sp, #0
    fdce:	6078      	str	r0, [r7, #4]
    fdd0:	460b      	mov	r3, r1
    fdd2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    fdd4:	687b      	ldr	r3, [r7, #4]
    fdd6:	7c9b      	ldrb	r3, [r3, #18]
    fdd8:	f003 030f 	and.w	r3, r3, #15
    fddc:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    fdde:	78fa      	ldrb	r2, [r7, #3]
    fde0:	7bfb      	ldrb	r3, [r7, #15]
    fde2:	4611      	mov	r1, r2
    fde4:	4618      	mov	r0, r3
    fde6:	4b28      	ldr	r3, [pc, #160]	; (fe88 <_usb_d_dev_ep_stall_clr+0xc0>)
    fde8:	4798      	blx	r3
    fdea:	4603      	mov	r3, r0
    fdec:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    fdee:	7bbb      	ldrb	r3, [r7, #14]
    fdf0:	f083 0301 	eor.w	r3, r3, #1
    fdf4:	b2db      	uxtb	r3, r3
    fdf6:	2b00      	cmp	r3, #0
    fdf8:	d001      	beq.n	fdfe <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    fdfa:	2300      	movs	r3, #0
    fdfc:	e040      	b.n	fe80 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    fdfe:	78f9      	ldrb	r1, [r7, #3]
    fe00:	7bfb      	ldrb	r3, [r7, #15]
    fe02:	2200      	movs	r2, #0
    fe04:	4618      	mov	r0, r3
    fe06:	4b21      	ldr	r3, [pc, #132]	; (fe8c <_usb_d_dev_ep_stall_clr+0xc4>)
    fe08:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    fe0a:	78fb      	ldrb	r3, [r7, #3]
    fe0c:	2220      	movs	r2, #32
    fe0e:	409a      	lsls	r2, r3
    fe10:	7bfb      	ldrb	r3, [r7, #15]
    fe12:	4611      	mov	r1, r2
    fe14:	4618      	mov	r0, r3
    fe16:	4b1e      	ldr	r3, [pc, #120]	; (fe90 <_usb_d_dev_ep_stall_clr+0xc8>)
    fe18:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    fe1a:	78fa      	ldrb	r2, [r7, #3]
    fe1c:	7bfb      	ldrb	r3, [r7, #15]
    fe1e:	4611      	mov	r1, r2
    fe20:	4618      	mov	r0, r3
    fe22:	4b1c      	ldr	r3, [pc, #112]	; (fe94 <_usb_d_dev_ep_stall_clr+0xcc>)
    fe24:	4798      	blx	r3
    fe26:	4603      	mov	r3, r0
    fe28:	2b00      	cmp	r3, #0
    fe2a:	d00b      	beq.n	fe44 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    fe2c:	78fa      	ldrb	r2, [r7, #3]
    fe2e:	7bfb      	ldrb	r3, [r7, #15]
    fe30:	4611      	mov	r1, r2
    fe32:	4618      	mov	r0, r3
    fe34:	4b18      	ldr	r3, [pc, #96]	; (fe98 <_usb_d_dev_ep_stall_clr+0xd0>)
    fe36:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    fe38:	78f9      	ldrb	r1, [r7, #3]
    fe3a:	7bfb      	ldrb	r3, [r7, #15]
    fe3c:	2200      	movs	r2, #0
    fe3e:	4618      	mov	r0, r3
    fe40:	4b16      	ldr	r3, [pc, #88]	; (fe9c <_usb_d_dev_ep_stall_clr+0xd4>)
    fe42:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    fe44:	687b      	ldr	r3, [r7, #4]
    fe46:	7cdb      	ldrb	r3, [r3, #19]
    fe48:	f003 0307 	and.w	r3, r3, #7
    fe4c:	b2db      	uxtb	r3, r3
    fe4e:	2b01      	cmp	r3, #1
    fe50:	d110      	bne.n	fe74 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    fe52:	7bfb      	ldrb	r3, [r7, #15]
    fe54:	4619      	mov	r1, r3
    fe56:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    fe5a:	4b11      	ldr	r3, [pc, #68]	; (fea0 <_usb_d_dev_ep_stall_clr+0xd8>)
    fe5c:	4798      	blx	r3
    fe5e:	4603      	mov	r3, r0
    fe60:	f003 0330 	and.w	r3, r3, #48	; 0x30
    fe64:	2b00      	cmp	r3, #0
    fe66:	d10a      	bne.n	fe7e <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    fe68:	687a      	ldr	r2, [r7, #4]
    fe6a:	7cd3      	ldrb	r3, [r2, #19]
    fe6c:	f36f 03c3 	bfc	r3, #3, #1
    fe70:	74d3      	strb	r3, [r2, #19]
    fe72:	e004      	b.n	fe7e <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    fe74:	687a      	ldr	r2, [r7, #4]
    fe76:	7cd3      	ldrb	r3, [r2, #19]
    fe78:	f36f 03c3 	bfc	r3, #3, #1
    fe7c:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    fe7e:	2300      	movs	r3, #0
}
    fe80:	4618      	mov	r0, r3
    fe82:	3710      	adds	r7, #16
    fe84:	46bd      	mov	sp, r7
    fe86:	bd80      	pop	{r7, pc}
    fe88:	0000e439 	.word	0x0000e439
    fe8c:	0000e3e1 	.word	0x0000e3e1
    fe90:	0000e389 	.word	0x0000e389
    fe94:	0000e47d 	.word	0x0000e47d
    fe98:	0000e4c1 	.word	0x0000e4c1
    fe9c:	0000e5ad 	.word	0x0000e5ad
    fea0:	0000de69 	.word	0x0000de69

0000fea4 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    fea4:	b580      	push	{r7, lr}
    fea6:	b086      	sub	sp, #24
    fea8:	af00      	add	r7, sp, #0
    feaa:	4603      	mov	r3, r0
    feac:	460a      	mov	r2, r1
    feae:	71fb      	strb	r3, [r7, #7]
    feb0:	4613      	mov	r3, r2
    feb2:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    feb4:	79fb      	ldrb	r3, [r7, #7]
    feb6:	f003 030f 	and.w	r3, r3, #15
    feba:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    febc:	79fb      	ldrb	r3, [r7, #7]
    febe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fec2:	2b00      	cmp	r3, #0
    fec4:	bf14      	ite	ne
    fec6:	2301      	movne	r3, #1
    fec8:	2300      	moveq	r3, #0
    feca:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    fecc:	7cba      	ldrb	r2, [r7, #18]
    fece:	7cfb      	ldrb	r3, [r7, #19]
    fed0:	4611      	mov	r1, r2
    fed2:	4618      	mov	r0, r3
    fed4:	4b13      	ldr	r3, [pc, #76]	; (ff24 <_usb_d_dev_ep_stall+0x80>)
    fed6:	4798      	blx	r3
    fed8:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    feda:	7cfb      	ldrb	r3, [r7, #19]
    fedc:	2b04      	cmp	r3, #4
    fede:	d902      	bls.n	fee6 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    fee0:	f06f 0311 	mvn.w	r3, #17
    fee4:	e01a      	b.n	ff1c <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    fee6:	79bb      	ldrb	r3, [r7, #6]
    fee8:	2b01      	cmp	r3, #1
    feea:	d106      	bne.n	fefa <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    feec:	7cbb      	ldrb	r3, [r7, #18]
    feee:	4619      	mov	r1, r3
    fef0:	68f8      	ldr	r0, [r7, #12]
    fef2:	4b0d      	ldr	r3, [pc, #52]	; (ff28 <_usb_d_dev_ep_stall+0x84>)
    fef4:	4798      	blx	r3
    fef6:	6178      	str	r0, [r7, #20]
    fef8:	e00f      	b.n	ff1a <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    fefa:	79bb      	ldrb	r3, [r7, #6]
    fefc:	2b00      	cmp	r3, #0
    fefe:	d106      	bne.n	ff0e <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    ff00:	7cbb      	ldrb	r3, [r7, #18]
    ff02:	4619      	mov	r1, r3
    ff04:	68f8      	ldr	r0, [r7, #12]
    ff06:	4b09      	ldr	r3, [pc, #36]	; (ff2c <_usb_d_dev_ep_stall+0x88>)
    ff08:	4798      	blx	r3
    ff0a:	6178      	str	r0, [r7, #20]
    ff0c:	e005      	b.n	ff1a <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    ff0e:	7cbb      	ldrb	r3, [r7, #18]
    ff10:	4619      	mov	r1, r3
    ff12:	68f8      	ldr	r0, [r7, #12]
    ff14:	4b06      	ldr	r3, [pc, #24]	; (ff30 <_usb_d_dev_ep_stall+0x8c>)
    ff16:	4798      	blx	r3
    ff18:	6178      	str	r0, [r7, #20]
	}
	return rc;
    ff1a:	697b      	ldr	r3, [r7, #20]
}
    ff1c:	4618      	mov	r0, r3
    ff1e:	3718      	adds	r7, #24
    ff20:	46bd      	mov	sp, r7
    ff22:	bd80      	pop	{r7, pc}
    ff24:	0000e945 	.word	0x0000e945
    ff28:	0000fd79 	.word	0x0000fd79
    ff2c:	0000fdc9 	.word	0x0000fdc9
    ff30:	0000fd49 	.word	0x0000fd49

0000ff34 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    ff34:	b580      	push	{r7, lr}
    ff36:	b082      	sub	sp, #8
    ff38:	af00      	add	r7, sp, #0
    ff3a:	6078      	str	r0, [r7, #4]
    ff3c:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    ff3e:	687b      	ldr	r3, [r7, #4]
    ff40:	7c9b      	ldrb	r3, [r3, #18]
    ff42:	2bff      	cmp	r3, #255	; 0xff
    ff44:	d014      	beq.n	ff70 <_usb_d_dev_trans_done+0x3c>
    ff46:	687b      	ldr	r3, [r7, #4]
    ff48:	7cdb      	ldrb	r3, [r3, #19]
    ff4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ff4e:	b2db      	uxtb	r3, r3
    ff50:	2b00      	cmp	r3, #0
    ff52:	d00d      	beq.n	ff70 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    ff54:	687a      	ldr	r2, [r7, #4]
    ff56:	7cd3      	ldrb	r3, [r2, #19]
    ff58:	f36f 1386 	bfc	r3, #6, #1
    ff5c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    ff5e:	4b06      	ldr	r3, [pc, #24]	; (ff78 <_usb_d_dev_trans_done+0x44>)
    ff60:	691b      	ldr	r3, [r3, #16]
    ff62:	687a      	ldr	r2, [r7, #4]
    ff64:	7c90      	ldrb	r0, [r2, #18]
    ff66:	687a      	ldr	r2, [r7, #4]
    ff68:	6892      	ldr	r2, [r2, #8]
    ff6a:	6839      	ldr	r1, [r7, #0]
    ff6c:	4798      	blx	r3
    ff6e:	e000      	b.n	ff72 <_usb_d_dev_trans_done+0x3e>
		return;
    ff70:	bf00      	nop
}
    ff72:	3708      	adds	r7, #8
    ff74:	46bd      	mov	sp, r7
    ff76:	bd80      	pop	{r7, pc}
    ff78:	20008c50 	.word	0x20008c50

0000ff7c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    ff7c:	b580      	push	{r7, lr}
    ff7e:	b086      	sub	sp, #24
    ff80:	af00      	add	r7, sp, #0
    ff82:	60f8      	str	r0, [r7, #12]
    ff84:	460b      	mov	r3, r1
    ff86:	607a      	str	r2, [r7, #4]
    ff88:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ff8a:	68fb      	ldr	r3, [r7, #12]
    ff8c:	7c9b      	ldrb	r3, [r3, #18]
    ff8e:	f003 030f 	and.w	r3, r3, #15
    ff92:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    ff94:	4b1f      	ldr	r3, [pc, #124]	; (10014 <STACK_SIZE+0x14>)
    ff96:	881b      	ldrh	r3, [r3, #0]
    ff98:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    ff9a:	68fb      	ldr	r3, [r7, #12]
    ff9c:	7c9b      	ldrb	r3, [r3, #18]
    ff9e:	2bff      	cmp	r3, #255	; 0xff
    ffa0:	d033      	beq.n	1000a <STACK_SIZE+0xa>
    ffa2:	68fb      	ldr	r3, [r7, #12]
    ffa4:	7cdb      	ldrb	r3, [r3, #19]
    ffa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ffaa:	b2db      	uxtb	r3, r3
    ffac:	2b00      	cmp	r3, #0
    ffae:	d02c      	beq.n	1000a <STACK_SIZE+0xa>
		return;
	}
	/* Stop transfer */
	if (dir) {
    ffb0:	7afb      	ldrb	r3, [r7, #11]
    ffb2:	2b00      	cmp	r3, #0
    ffb4:	d006      	beq.n	ffc4 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    ffb6:	7dfb      	ldrb	r3, [r7, #23]
    ffb8:	2200      	movs	r2, #0
    ffba:	2101      	movs	r1, #1
    ffbc:	4618      	mov	r0, r3
    ffbe:	4b16      	ldr	r3, [pc, #88]	; (10018 <STACK_SIZE+0x18>)
    ffc0:	4798      	blx	r3
    ffc2:	e005      	b.n	ffd0 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ffc4:	7dfb      	ldrb	r3, [r7, #23]
    ffc6:	2200      	movs	r2, #0
    ffc8:	2100      	movs	r1, #0
    ffca:	4618      	mov	r0, r3
    ffcc:	4b13      	ldr	r3, [pc, #76]	; (1001c <STACK_SIZE+0x1c>)
    ffce:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    ffd0:	7afb      	ldrb	r3, [r7, #11]
    ffd2:	f107 0218 	add.w	r2, r7, #24
    ffd6:	4413      	add	r3, r2
    ffd8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    ffdc:	461a      	mov	r2, r3
    ffde:	7dfb      	ldrb	r3, [r7, #23]
    ffe0:	4611      	mov	r1, r2
    ffe2:	4618      	mov	r0, r3
    ffe4:	4b0e      	ldr	r3, [pc, #56]	; (10020 <STACK_SIZE+0x20>)
    ffe6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    ffe8:	7afb      	ldrb	r3, [r7, #11]
    ffea:	f107 0218 	add.w	r2, r7, #24
    ffee:	4413      	add	r3, r2
    fff0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    fff4:	461a      	mov	r2, r3
    fff6:	7dfb      	ldrb	r3, [r7, #23]
    fff8:	4611      	mov	r1, r2
    fffa:	4618      	mov	r0, r3
    fffc:	4b09      	ldr	r3, [pc, #36]	; (10024 <STACK_SIZE+0x24>)
    fffe:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
   10000:	6879      	ldr	r1, [r7, #4]
   10002:	68f8      	ldr	r0, [r7, #12]
   10004:	4b08      	ldr	r3, [pc, #32]	; (10028 <STACK_SIZE+0x28>)
   10006:	4798      	blx	r3
   10008:	e000      	b.n	1000c <STACK_SIZE+0xc>
		return;
   1000a:	bf00      	nop
}
   1000c:	3718      	adds	r7, #24
   1000e:	46bd      	mov	sp, r7
   10010:	bd80      	pop	{r7, pc}
   10012:	bf00      	nop
   10014:	00020d94 	.word	0x00020d94
   10018:	0000e831 	.word	0x0000e831
   1001c:	0000e889 	.word	0x0000e889
   10020:	0000e339 	.word	0x0000e339
   10024:	0000e389 	.word	0x0000e389
   10028:	0000ff35 	.word	0x0000ff35

0001002c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
   1002c:	b580      	push	{r7, lr}
   1002e:	b086      	sub	sp, #24
   10030:	af00      	add	r7, sp, #0
   10032:	4603      	mov	r3, r0
   10034:	6039      	str	r1, [r7, #0]
   10036:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
   10038:	79fb      	ldrb	r3, [r7, #7]
   1003a:	f003 030f 	and.w	r3, r3, #15
   1003e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
   10040:	7dfb      	ldrb	r3, [r7, #23]
   10042:	015b      	lsls	r3, r3, #5
   10044:	4a1e      	ldr	r2, [pc, #120]	; (100c0 <_usb_d_dev_ep_read_req+0x94>)
   10046:	4413      	add	r3, r2
   10048:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
   1004a:	693b      	ldr	r3, [r7, #16]
   1004c:	681b      	ldr	r3, [r3, #0]
   1004e:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
   10050:	693b      	ldr	r3, [r7, #16]
   10052:	685b      	ldr	r3, [r3, #4]
   10054:	f3c3 030d 	ubfx	r3, r3, #0, #14
   10058:	b29b      	uxth	r3, r3
   1005a:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
   1005c:	7dfb      	ldrb	r3, [r7, #23]
   1005e:	2b04      	cmp	r3, #4
   10060:	d802      	bhi.n	10068 <_usb_d_dev_ep_read_req+0x3c>
   10062:	683b      	ldr	r3, [r7, #0]
   10064:	2b00      	cmp	r3, #0
   10066:	d102      	bne.n	1006e <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
   10068:	f06f 0311 	mvn.w	r3, #17
   1006c:	e023      	b.n	100b6 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
   1006e:	7dfb      	ldrb	r3, [r7, #23]
   10070:	4618      	mov	r0, r3
   10072:	4b14      	ldr	r3, [pc, #80]	; (100c4 <_usb_d_dev_ep_read_req+0x98>)
   10074:	4798      	blx	r3
   10076:	4603      	mov	r3, r0
   10078:	f083 0301 	eor.w	r3, r3, #1
   1007c:	b2db      	uxtb	r3, r3
   1007e:	2b00      	cmp	r3, #0
   10080:	d002      	beq.n	10088 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
   10082:	f06f 0312 	mvn.w	r3, #18
   10086:	e016      	b.n	100b6 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
   10088:	7dfb      	ldrb	r3, [r7, #23]
   1008a:	4618      	mov	r0, r3
   1008c:	4b0e      	ldr	r3, [pc, #56]	; (100c8 <_usb_d_dev_ep_read_req+0x9c>)
   1008e:	4798      	blx	r3
   10090:	4603      	mov	r3, r0
   10092:	f083 0301 	eor.w	r3, r3, #1
   10096:	b2db      	uxtb	r3, r3
   10098:	2b00      	cmp	r3, #0
   1009a:	d001      	beq.n	100a0 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
   1009c:	2300      	movs	r3, #0
   1009e:	e00a      	b.n	100b6 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
   100a0:	68fb      	ldr	r3, [r7, #12]
   100a2:	2208      	movs	r2, #8
   100a4:	4619      	mov	r1, r3
   100a6:	6838      	ldr	r0, [r7, #0]
   100a8:	4b08      	ldr	r3, [pc, #32]	; (100cc <_usb_d_dev_ep_read_req+0xa0>)
   100aa:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
   100ac:	7dfb      	ldrb	r3, [r7, #23]
   100ae:	4618      	mov	r0, r3
   100b0:	4b07      	ldr	r3, [pc, #28]	; (100d0 <_usb_d_dev_ep_read_req+0xa4>)
   100b2:	4798      	blx	r3

	return bytes;
   100b4:	897b      	ldrh	r3, [r7, #10]
}
   100b6:	4618      	mov	r0, r3
   100b8:	3718      	adds	r7, #24
   100ba:	46bd      	mov	sp, r7
   100bc:	bd80      	pop	{r7, pc}
   100be:	bf00      	nop
   100c0:	20008d18 	.word	0x20008d18
   100c4:	0000e3b1 	.word	0x0000e3b1
   100c8:	0000e55d 	.word	0x0000e55d
   100cc:	0001c485 	.word	0x0001c485
   100d0:	0000e58d 	.word	0x0000e58d

000100d4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
   100d4:	b580      	push	{r7, lr}
   100d6:	b086      	sub	sp, #24
   100d8:	af00      	add	r7, sp, #0
   100da:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
   100dc:	687b      	ldr	r3, [r7, #4]
   100de:	7a1b      	ldrb	r3, [r3, #8]
   100e0:	f003 030f 	and.w	r3, r3, #15
   100e4:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
   100e6:	687b      	ldr	r3, [r7, #4]
   100e8:	7a1b      	ldrb	r3, [r3, #8]
   100ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
   100ee:	2b00      	cmp	r3, #0
   100f0:	bf14      	ite	ne
   100f2:	2301      	movne	r3, #1
   100f4:	2300      	moveq	r3, #0
   100f6:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   100f8:	7d7a      	ldrb	r2, [r7, #21]
   100fa:	7dbb      	ldrb	r3, [r7, #22]
   100fc:	4611      	mov	r1, r2
   100fe:	4618      	mov	r0, r3
   10100:	4b5f      	ldr	r3, [pc, #380]	; (10280 <_usb_d_dev_ep_trans+0x1ac>)
   10102:	4798      	blx	r3
   10104:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
   10106:	693b      	ldr	r3, [r7, #16]
   10108:	8a1b      	ldrh	r3, [r3, #16]
   1010a:	f240 32ff 	movw	r2, #1023	; 0x3ff
   1010e:	4293      	cmp	r3, r2
   10110:	d004      	beq.n	1011c <_usb_d_dev_ep_trans+0x48>
   10112:	693b      	ldr	r3, [r7, #16]
   10114:	8a1b      	ldrh	r3, [r3, #16]
   10116:	3b01      	subs	r3, #1
   10118:	b29b      	uxth	r3, r3
   1011a:	e001      	b.n	10120 <_usb_d_dev_ep_trans+0x4c>
   1011c:	f240 33ff 	movw	r3, #1023	; 0x3ff
   10120:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
   10122:	687b      	ldr	r3, [r7, #4]
   10124:	685a      	ldr	r2, [r3, #4]
   10126:	89fb      	ldrh	r3, [r7, #14]
   10128:	4013      	ands	r3, r2
   1012a:	2b00      	cmp	r3, #0
   1012c:	bf14      	ite	ne
   1012e:	2301      	movne	r3, #1
   10130:	2300      	moveq	r3, #0
   10132:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
   10134:	2300      	movs	r3, #0
   10136:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
   10138:	7dbb      	ldrb	r3, [r7, #22]
   1013a:	2b04      	cmp	r3, #4
   1013c:	d902      	bls.n	10144 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
   1013e:	f06f 0311 	mvn.w	r3, #17
   10142:	e098      	b.n	10276 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
   10144:	687b      	ldr	r3, [r7, #4]
   10146:	681b      	ldr	r3, [r3, #0]
   10148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1014c:	d31a      	bcc.n	10184 <_usb_d_dev_ep_trans+0xb0>
   1014e:	687b      	ldr	r3, [r7, #4]
   10150:	681b      	ldr	r3, [r3, #0]
   10152:	461a      	mov	r2, r3
   10154:	687b      	ldr	r3, [r7, #4]
   10156:	685b      	ldr	r3, [r3, #4]
   10158:	4413      	add	r3, r2
   1015a:	4a4a      	ldr	r2, [pc, #296]	; (10284 <_usb_d_dev_ep_trans+0x1b0>)
   1015c:	4293      	cmp	r3, r2
   1015e:	d811      	bhi.n	10184 <_usb_d_dev_ep_trans+0xb0>
   10160:	687b      	ldr	r3, [r7, #4]
   10162:	681b      	ldr	r3, [r3, #0]
   10164:	f003 0303 	and.w	r3, r3, #3
   10168:	2b00      	cmp	r3, #0
   1016a:	d10b      	bne.n	10184 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
   1016c:	7d7b      	ldrb	r3, [r7, #21]
   1016e:	f083 0301 	eor.w	r3, r3, #1
   10172:	b2db      	uxtb	r3, r3
   10174:	2b00      	cmp	r3, #0
   10176:	d00e      	beq.n	10196 <_usb_d_dev_ep_trans+0xc2>
   10178:	687b      	ldr	r3, [r7, #4]
   1017a:	685b      	ldr	r3, [r3, #4]
   1017c:	693a      	ldr	r2, [r7, #16]
   1017e:	8a12      	ldrh	r2, [r2, #16]
   10180:	4293      	cmp	r3, r2
   10182:	d208      	bcs.n	10196 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
   10184:	693b      	ldr	r3, [r7, #16]
   10186:	68db      	ldr	r3, [r3, #12]
   10188:	2b00      	cmp	r3, #0
   1018a:	d102      	bne.n	10192 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
   1018c:	f06f 0312 	mvn.w	r3, #18
   10190:	e071      	b.n	10276 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
   10192:	2301      	movs	r3, #1
   10194:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
   10196:	7d7b      	ldrb	r3, [r7, #21]
   10198:	f083 0301 	eor.w	r3, r3, #1
   1019c:	b2db      	uxtb	r3, r3
   1019e:	2b00      	cmp	r3, #0
   101a0:	d009      	beq.n	101b6 <_usb_d_dev_ep_trans+0xe2>
   101a2:	7b7b      	ldrb	r3, [r7, #13]
   101a4:	2b00      	cmp	r3, #0
   101a6:	d006      	beq.n	101b6 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
   101a8:	693b      	ldr	r3, [r7, #16]
   101aa:	68db      	ldr	r3, [r3, #12]
   101ac:	2b00      	cmp	r3, #0
   101ae:	d102      	bne.n	101b6 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
   101b0:	f06f 0311 	mvn.w	r3, #17
   101b4:	e05f      	b.n	10276 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
   101b6:	693b      	ldr	r3, [r7, #16]
   101b8:	7cdb      	ldrb	r3, [r3, #19]
   101ba:	f003 0308 	and.w	r3, r3, #8
   101be:	b2db      	uxtb	r3, r3
   101c0:	2b00      	cmp	r3, #0
   101c2:	d001      	beq.n	101c8 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
   101c4:	2302      	movs	r3, #2
   101c6:	e056      	b.n	10276 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
   101c8:	f107 0308 	add.w	r3, r7, #8
   101cc:	4618      	mov	r0, r3
   101ce:	4b2e      	ldr	r3, [pc, #184]	; (10288 <_usb_d_dev_ep_trans+0x1b4>)
   101d0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
   101d2:	693b      	ldr	r3, [r7, #16]
   101d4:	7cdb      	ldrb	r3, [r3, #19]
   101d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   101da:	b2db      	uxtb	r3, r3
   101dc:	2b00      	cmp	r3, #0
   101de:	d006      	beq.n	101ee <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
   101e0:	f107 0308 	add.w	r3, r7, #8
   101e4:	4618      	mov	r0, r3
   101e6:	4b29      	ldr	r3, [pc, #164]	; (1028c <_usb_d_dev_ep_trans+0x1b8>)
   101e8:	4798      	blx	r3
		return USB_BUSY;
   101ea:	2301      	movs	r3, #1
   101ec:	e043      	b.n	10276 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
   101ee:	693a      	ldr	r2, [r7, #16]
   101f0:	7cd3      	ldrb	r3, [r2, #19]
   101f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   101f6:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
   101f8:	f107 0308 	add.w	r3, r7, #8
   101fc:	4618      	mov	r0, r3
   101fe:	4b23      	ldr	r3, [pc, #140]	; (1028c <_usb_d_dev_ep_trans+0x1b8>)
   10200:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
   10202:	687b      	ldr	r3, [r7, #4]
   10204:	681a      	ldr	r2, [r3, #0]
   10206:	693b      	ldr	r3, [r7, #16]
   10208:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
   1020a:	687b      	ldr	r3, [r7, #4]
   1020c:	685a      	ldr	r2, [r3, #4]
   1020e:	693b      	ldr	r3, [r7, #16]
   10210:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
   10212:	693b      	ldr	r3, [r7, #16]
   10214:	2200      	movs	r2, #0
   10216:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
   10218:	693a      	ldr	r2, [r7, #16]
   1021a:	7cd3      	ldrb	r3, [r2, #19]
   1021c:	7d79      	ldrb	r1, [r7, #21]
   1021e:	f361 13c7 	bfi	r3, r1, #7, #1
   10222:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
   10224:	693a      	ldr	r2, [r7, #16]
   10226:	7cd3      	ldrb	r3, [r2, #19]
   10228:	7df9      	ldrb	r1, [r7, #23]
   1022a:	f361 1345 	bfi	r3, r1, #5, #1
   1022e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
   10230:	687b      	ldr	r3, [r7, #4]
   10232:	7a5b      	ldrb	r3, [r3, #9]
   10234:	2b00      	cmp	r3, #0
   10236:	d007      	beq.n	10248 <_usb_d_dev_ep_trans+0x174>
   10238:	7b7b      	ldrb	r3, [r7, #13]
   1023a:	f083 0301 	eor.w	r3, r3, #1
   1023e:	b2db      	uxtb	r3, r3
   10240:	2b00      	cmp	r3, #0
   10242:	d001      	beq.n	10248 <_usb_d_dev_ep_trans+0x174>
   10244:	2301      	movs	r3, #1
   10246:	e000      	b.n	1024a <_usb_d_dev_ep_trans+0x176>
   10248:	2300      	movs	r3, #0
   1024a:	b2db      	uxtb	r3, r3
   1024c:	f003 0301 	and.w	r3, r3, #1
   10250:	b2d9      	uxtb	r1, r3
   10252:	693a      	ldr	r2, [r7, #16]
   10254:	7cd3      	ldrb	r3, [r2, #19]
   10256:	f361 1304 	bfi	r3, r1, #4, #1
   1025a:	74d3      	strb	r3, [r2, #19]

	if (dir) {
   1025c:	7d7b      	ldrb	r3, [r7, #21]
   1025e:	2b00      	cmp	r3, #0
   10260:	d004      	beq.n	1026c <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
   10262:	2100      	movs	r1, #0
   10264:	6938      	ldr	r0, [r7, #16]
   10266:	4b0a      	ldr	r3, [pc, #40]	; (10290 <_usb_d_dev_ep_trans+0x1bc>)
   10268:	4798      	blx	r3
   1026a:	e003      	b.n	10274 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
   1026c:	2100      	movs	r1, #0
   1026e:	6938      	ldr	r0, [r7, #16]
   10270:	4b08      	ldr	r3, [pc, #32]	; (10294 <_usb_d_dev_ep_trans+0x1c0>)
   10272:	4798      	blx	r3
	}

	return ERR_NONE;
   10274:	2300      	movs	r3, #0
}
   10276:	4618      	mov	r0, r3
   10278:	3718      	adds	r7, #24
   1027a:	46bd      	mov	sp, r7
   1027c:	bd80      	pop	{r7, pc}
   1027e:	bf00      	nop
   10280:	0000e945 	.word	0x0000e945
   10284:	20041fff 	.word	0x20041fff
   10288:	00010d21 	.word	0x00010d21
   1028c:	00010d47 	.word	0x00010d47
   10290:	0000ec0d 	.word	0x0000ec0d
   10294:	0000ee25 	.word	0x0000ee25

00010298 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
   10298:	b580      	push	{r7, lr}
   1029a:	b084      	sub	sp, #16
   1029c:	af00      	add	r7, sp, #0
   1029e:	4603      	mov	r3, r0
   102a0:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
   102a2:	79fb      	ldrb	r3, [r7, #7]
   102a4:	f003 030f 	and.w	r3, r3, #15
   102a8:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
   102aa:	79fb      	ldrb	r3, [r7, #7]
   102ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
   102b0:	2b00      	cmp	r3, #0
   102b2:	bf14      	ite	ne
   102b4:	2301      	movne	r3, #1
   102b6:	2300      	moveq	r3, #0
   102b8:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
   102ba:	7bba      	ldrb	r2, [r7, #14]
   102bc:	7bfb      	ldrb	r3, [r7, #15]
   102be:	4611      	mov	r1, r2
   102c0:	4618      	mov	r0, r3
   102c2:	4b08      	ldr	r3, [pc, #32]	; (102e4 <_usb_d_dev_ep_abort+0x4c>)
   102c4:	4798      	blx	r3
   102c6:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
   102c8:	7bfb      	ldrb	r3, [r7, #15]
   102ca:	2b04      	cmp	r3, #4
   102cc:	d806      	bhi.n	102dc <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
   102ce:	7bbb      	ldrb	r3, [r7, #14]
   102d0:	2202      	movs	r2, #2
   102d2:	4619      	mov	r1, r3
   102d4:	68b8      	ldr	r0, [r7, #8]
   102d6:	4b04      	ldr	r3, [pc, #16]	; (102e8 <_usb_d_dev_ep_abort+0x50>)
   102d8:	4798      	blx	r3
   102da:	e000      	b.n	102de <_usb_d_dev_ep_abort+0x46>
		return;
   102dc:	bf00      	nop
}
   102de:	3710      	adds	r7, #16
   102e0:	46bd      	mov	sp, r7
   102e2:	bd80      	pop	{r7, pc}
   102e4:	0000e945 	.word	0x0000e945
   102e8:	0000ff7d 	.word	0x0000ff7d

000102ec <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
   102ec:	b480      	push	{r7}
   102ee:	b085      	sub	sp, #20
   102f0:	af00      	add	r7, sp, #0
   102f2:	4603      	mov	r3, r0
   102f4:	6039      	str	r1, [r7, #0]
   102f6:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   102f8:	683b      	ldr	r3, [r7, #0]
   102fa:	2b00      	cmp	r3, #0
   102fc:	d001      	beq.n	10302 <_usb_d_dev_register_callback+0x16>
   102fe:	683b      	ldr	r3, [r7, #0]
   10300:	e000      	b.n	10304 <_usb_d_dev_register_callback+0x18>
   10302:	4b0a      	ldr	r3, [pc, #40]	; (1032c <_usb_d_dev_register_callback+0x40>)
   10304:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
   10306:	79fb      	ldrb	r3, [r7, #7]
   10308:	2b01      	cmp	r3, #1
   1030a:	d103      	bne.n	10314 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
   1030c:	4a08      	ldr	r2, [pc, #32]	; (10330 <_usb_d_dev_register_callback+0x44>)
   1030e:	68fb      	ldr	r3, [r7, #12]
   10310:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
   10312:	e005      	b.n	10320 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
   10314:	79fb      	ldrb	r3, [r7, #7]
   10316:	2b00      	cmp	r3, #0
   10318:	d102      	bne.n	10320 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
   1031a:	4a05      	ldr	r2, [pc, #20]	; (10330 <_usb_d_dev_register_callback+0x44>)
   1031c:	68fb      	ldr	r3, [r7, #12]
   1031e:	6013      	str	r3, [r2, #0]
}
   10320:	bf00      	nop
   10322:	3714      	adds	r7, #20
   10324:	46bd      	mov	sp, r7
   10326:	f85d 7b04 	ldr.w	r7, [sp], #4
   1032a:	4770      	bx	lr
   1032c:	0000e1cd 	.word	0x0000e1cd
   10330:	20008c50 	.word	0x20008c50

00010334 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
   10334:	b480      	push	{r7}
   10336:	b085      	sub	sp, #20
   10338:	af00      	add	r7, sp, #0
   1033a:	4603      	mov	r3, r0
   1033c:	6039      	str	r1, [r7, #0]
   1033e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
   10340:	683b      	ldr	r3, [r7, #0]
   10342:	2b00      	cmp	r3, #0
   10344:	d001      	beq.n	1034a <_usb_d_dev_register_ep_callback+0x16>
   10346:	683b      	ldr	r3, [r7, #0]
   10348:	e000      	b.n	1034c <_usb_d_dev_register_ep_callback+0x18>
   1034a:	4b0e      	ldr	r3, [pc, #56]	; (10384 <_usb_d_dev_register_ep_callback+0x50>)
   1034c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
   1034e:	79fb      	ldrb	r3, [r7, #7]
   10350:	2b00      	cmp	r3, #0
   10352:	d103      	bne.n	1035c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
   10354:	4a0c      	ldr	r2, [pc, #48]	; (10388 <_usb_d_dev_register_ep_callback+0x54>)
   10356:	68fb      	ldr	r3, [r7, #12]
   10358:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
   1035a:	e00c      	b.n	10376 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
   1035c:	79fb      	ldrb	r3, [r7, #7]
   1035e:	2b01      	cmp	r3, #1
   10360:	d103      	bne.n	1036a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
   10362:	4a09      	ldr	r2, [pc, #36]	; (10388 <_usb_d_dev_register_ep_callback+0x54>)
   10364:	68fb      	ldr	r3, [r7, #12]
   10366:	60d3      	str	r3, [r2, #12]
}
   10368:	e005      	b.n	10376 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
   1036a:	79fb      	ldrb	r3, [r7, #7]
   1036c:	2b02      	cmp	r3, #2
   1036e:	d102      	bne.n	10376 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
   10370:	4a05      	ldr	r2, [pc, #20]	; (10388 <_usb_d_dev_register_ep_callback+0x54>)
   10372:	68fb      	ldr	r3, [r7, #12]
   10374:	6113      	str	r3, [r2, #16]
}
   10376:	bf00      	nop
   10378:	3714      	adds	r7, #20
   1037a:	46bd      	mov	sp, r7
   1037c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10380:	4770      	bx	lr
   10382:	bf00      	nop
   10384:	0000e1cd 	.word	0x0000e1cd
   10388:	20008c50 	.word	0x20008c50

0001038c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
   1038c:	b580      	push	{r7, lr}
   1038e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   10390:	4b01      	ldr	r3, [pc, #4]	; (10398 <USB_0_Handler+0xc>)
   10392:	4798      	blx	r3
}
   10394:	bf00      	nop
   10396:	bd80      	pop	{r7, pc}
   10398:	0000f5fd 	.word	0x0000f5fd

0001039c <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
   1039c:	b580      	push	{r7, lr}
   1039e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   103a0:	4b01      	ldr	r3, [pc, #4]	; (103a8 <USB_1_Handler+0xc>)
   103a2:	4798      	blx	r3
}
   103a4:	bf00      	nop
   103a6:	bd80      	pop	{r7, pc}
   103a8:	0000f5fd 	.word	0x0000f5fd

000103ac <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
   103ac:	b580      	push	{r7, lr}
   103ae:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   103b0:	4b01      	ldr	r3, [pc, #4]	; (103b8 <USB_2_Handler+0xc>)
   103b2:	4798      	blx	r3
}
   103b4:	bf00      	nop
   103b6:	bd80      	pop	{r7, pc}
   103b8:	0000f5fd 	.word	0x0000f5fd

000103bc <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
   103bc:	b580      	push	{r7, lr}
   103be:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
   103c0:	4b01      	ldr	r3, [pc, #4]	; (103c8 <USB_3_Handler+0xc>)
   103c2:	4798      	blx	r3
}
   103c4:	bf00      	nop
   103c6:	bd80      	pop	{r7, pc}
   103c8:	0000f5fd 	.word	0x0000f5fd

000103cc <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
   103cc:	b480      	push	{r7}
   103ce:	b083      	sub	sp, #12
   103d0:	af00      	add	r7, sp, #0
   103d2:	6078      	str	r0, [r7, #4]
   103d4:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
   103d6:	bf00      	nop
   103d8:	687b      	ldr	r3, [r7, #4]
   103da:	689a      	ldr	r2, [r3, #8]
   103dc:	683b      	ldr	r3, [r7, #0]
   103de:	4013      	ands	r3, r2
   103e0:	2b00      	cmp	r3, #0
   103e2:	d1f9      	bne.n	103d8 <hri_wdt_wait_for_sync+0xc>
	};
}
   103e4:	bf00      	nop
   103e6:	370c      	adds	r7, #12
   103e8:	46bd      	mov	sp, r7
   103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   103ee:	4770      	bx	lr

000103f0 <hri_wdt_set_CTRLA_ENABLE_bit>:
{
	return ((Wdt *)hw)->SYNCBUSY.reg;
}

static inline void hri_wdt_set_CTRLA_ENABLE_bit(const void *const hw)
{
   103f0:	b580      	push	{r7, lr}
   103f2:	b082      	sub	sp, #8
   103f4:	af00      	add	r7, sp, #0
   103f6:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
   103f8:	687b      	ldr	r3, [r7, #4]
   103fa:	781b      	ldrb	r3, [r3, #0]
   103fc:	b2db      	uxtb	r3, r3
   103fe:	f043 0302 	orr.w	r3, r3, #2
   10402:	b2da      	uxtb	r2, r3
   10404:	687b      	ldr	r3, [r7, #4]
   10406:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   10408:	210e      	movs	r1, #14
   1040a:	6878      	ldr	r0, [r7, #4]
   1040c:	4b02      	ldr	r3, [pc, #8]	; (10418 <hri_wdt_set_CTRLA_ENABLE_bit+0x28>)
   1040e:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
   10410:	bf00      	nop
   10412:	3708      	adds	r7, #8
   10414:	46bd      	mov	sp, r7
   10416:	bd80      	pop	{r7, pc}
   10418:	000103cd 	.word	0x000103cd

0001041c <hri_wdt_get_CTRLA_ENABLE_bit>:

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
   1041c:	b580      	push	{r7, lr}
   1041e:	b084      	sub	sp, #16
   10420:	af00      	add	r7, sp, #0
   10422:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   10424:	210e      	movs	r1, #14
   10426:	6878      	ldr	r0, [r7, #4]
   10428:	4b0a      	ldr	r3, [pc, #40]	; (10454 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
   1042a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
   1042c:	687b      	ldr	r3, [r7, #4]
   1042e:	781b      	ldrb	r3, [r3, #0]
   10430:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
   10432:	7bfb      	ldrb	r3, [r7, #15]
   10434:	085b      	lsrs	r3, r3, #1
   10436:	b2db      	uxtb	r3, r3
   10438:	f003 0301 	and.w	r3, r3, #1
   1043c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
   1043e:	7bfb      	ldrb	r3, [r7, #15]
   10440:	2b00      	cmp	r3, #0
   10442:	bf14      	ite	ne
   10444:	2301      	movne	r3, #1
   10446:	2300      	moveq	r3, #0
   10448:	b2db      	uxtb	r3, r3
}
   1044a:	4618      	mov	r0, r3
   1044c:	3710      	adds	r7, #16
   1044e:	46bd      	mov	sp, r7
   10450:	bd80      	pop	{r7, pc}
   10452:	bf00      	nop
   10454:	000103cd 	.word	0x000103cd

00010458 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
   10458:	b580      	push	{r7, lr}
   1045a:	b082      	sub	sp, #8
   1045c:	af00      	add	r7, sp, #0
   1045e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
   10460:	687b      	ldr	r3, [r7, #4]
   10462:	781b      	ldrb	r3, [r3, #0]
   10464:	b2db      	uxtb	r3, r3
   10466:	f023 0304 	bic.w	r3, r3, #4
   1046a:	b2da      	uxtb	r2, r3
   1046c:	687b      	ldr	r3, [r7, #4]
   1046e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   10470:	210e      	movs	r1, #14
   10472:	6878      	ldr	r0, [r7, #4]
   10474:	4b02      	ldr	r3, [pc, #8]	; (10480 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
   10476:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
   10478:	bf00      	nop
   1047a:	3708      	adds	r7, #8
   1047c:	46bd      	mov	sp, r7
   1047e:	bd80      	pop	{r7, pc}
   10480:	000103cd 	.word	0x000103cd

00010484 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
   10484:	b580      	push	{r7, lr}
   10486:	b084      	sub	sp, #16
   10488:	af00      	add	r7, sp, #0
   1048a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
   1048c:	210e      	movs	r1, #14
   1048e:	6878      	ldr	r0, [r7, #4]
   10490:	4b08      	ldr	r3, [pc, #32]	; (104b4 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
   10492:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
   10494:	687b      	ldr	r3, [r7, #4]
   10496:	781b      	ldrb	r3, [r3, #0]
   10498:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
   1049a:	7bfb      	ldrb	r3, [r7, #15]
   1049c:	09db      	lsrs	r3, r3, #7
   1049e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
   104a0:	7bfb      	ldrb	r3, [r7, #15]
   104a2:	2b00      	cmp	r3, #0
   104a4:	bf14      	ite	ne
   104a6:	2301      	movne	r3, #1
   104a8:	2300      	moveq	r3, #0
   104aa:	b2db      	uxtb	r3, r3
}
   104ac:	4618      	mov	r0, r3
   104ae:	3710      	adds	r7, #16
   104b0:	46bd      	mov	sp, r7
   104b2:	bd80      	pop	{r7, pc}
   104b4:	000103cd 	.word	0x000103cd

000104b8 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
   104b8:	b480      	push	{r7}
   104ba:	b085      	sub	sp, #20
   104bc:	af00      	add	r7, sp, #0
   104be:	6078      	str	r0, [r7, #4]
   104c0:	460b      	mov	r3, r1
   104c2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
   104c4:	687b      	ldr	r3, [r7, #4]
   104c6:	785b      	ldrb	r3, [r3, #1]
   104c8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
   104ca:	7bfb      	ldrb	r3, [r7, #15]
   104cc:	f023 030f 	bic.w	r3, r3, #15
   104d0:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
   104d2:	78fb      	ldrb	r3, [r7, #3]
   104d4:	f003 030f 	and.w	r3, r3, #15
   104d8:	b2da      	uxtb	r2, r3
   104da:	7bfb      	ldrb	r3, [r7, #15]
   104dc:	4313      	orrs	r3, r2
   104de:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
   104e0:	687b      	ldr	r3, [r7, #4]
   104e2:	7bfa      	ldrb	r2, [r7, #15]
   104e4:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
   104e6:	bf00      	nop
   104e8:	3714      	adds	r7, #20
   104ea:	46bd      	mov	sp, r7
   104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   104f0:	4770      	bx	lr
	...

000104f4 <hri_wdt_write_CLEAR_reg>:
{
	return ((Wdt *)hw)->EWCTRL.reg;
}

static inline void hri_wdt_write_CLEAR_reg(const void *const hw, hri_wdt_clear_reg_t data)
{
   104f4:	b580      	push	{r7, lr}
   104f6:	b082      	sub	sp, #8
   104f8:	af00      	add	r7, sp, #0
   104fa:	6078      	str	r0, [r7, #4]
   104fc:	460b      	mov	r3, r1
   104fe:	70fb      	strb	r3, [r7, #3]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CLEAR.reg = data;
   10500:	687b      	ldr	r3, [r7, #4]
   10502:	78fa      	ldrb	r2, [r7, #3]
   10504:	731a      	strb	r2, [r3, #12]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_CLEAR);
   10506:	2110      	movs	r1, #16
   10508:	6878      	ldr	r0, [r7, #4]
   1050a:	4b03      	ldr	r3, [pc, #12]	; (10518 <hri_wdt_write_CLEAR_reg+0x24>)
   1050c:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
   1050e:	bf00      	nop
   10510:	3708      	adds	r7, #8
   10512:	46bd      	mov	sp, r7
   10514:	bd80      	pop	{r7, pc}
   10516:	bf00      	nop
   10518:	000103cd 	.word	0x000103cd

0001051c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
   1051c:	b580      	push	{r7, lr}
   1051e:	b082      	sub	sp, #8
   10520:	af00      	add	r7, sp, #0
   10522:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   10524:	687b      	ldr	r3, [r7, #4]
   10526:	2b00      	cmp	r3, #0
   10528:	d005      	beq.n	10536 <_wdt_init+0x1a>
   1052a:	687b      	ldr	r3, [r7, #4]
   1052c:	681b      	ldr	r3, [r3, #0]
   1052e:	2b00      	cmp	r3, #0
   10530:	d001      	beq.n	10536 <_wdt_init+0x1a>
   10532:	2301      	movs	r3, #1
   10534:	e000      	b.n	10538 <_wdt_init+0x1c>
   10536:	2300      	movs	r3, #0
   10538:	f003 0301 	and.w	r3, r3, #1
   1053c:	b2db      	uxtb	r3, r3
   1053e:	2250      	movs	r2, #80	; 0x50
   10540:	4913      	ldr	r1, [pc, #76]	; (10590 <_wdt_init+0x74>)
   10542:	4618      	mov	r0, r3
   10544:	4b13      	ldr	r3, [pc, #76]	; (10594 <_wdt_init+0x78>)
   10546:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
   10548:	687b      	ldr	r3, [r7, #4]
   1054a:	681b      	ldr	r3, [r3, #0]
   1054c:	4618      	mov	r0, r3
   1054e:	4b12      	ldr	r3, [pc, #72]	; (10598 <_wdt_init+0x7c>)
   10550:	4798      	blx	r3
   10552:	4603      	mov	r3, r0
   10554:	2b00      	cmp	r3, #0
   10556:	d107      	bne.n	10568 <_wdt_init+0x4c>
   10558:	687b      	ldr	r3, [r7, #4]
   1055a:	681b      	ldr	r3, [r3, #0]
   1055c:	4618      	mov	r0, r3
   1055e:	4b0f      	ldr	r3, [pc, #60]	; (1059c <_wdt_init+0x80>)
   10560:	4798      	blx	r3
   10562:	4603      	mov	r3, r0
   10564:	2b00      	cmp	r3, #0
   10566:	d002      	beq.n	1056e <_wdt_init+0x52>
		return ERR_DENIED;
   10568:	f06f 0310 	mvn.w	r3, #16
   1056c:	e00b      	b.n	10586 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
   1056e:	687b      	ldr	r3, [r7, #4]
   10570:	681b      	ldr	r3, [r3, #0]
   10572:	4618      	mov	r0, r3
   10574:	4b0a      	ldr	r3, [pc, #40]	; (105a0 <_wdt_init+0x84>)
   10576:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
   10578:	687b      	ldr	r3, [r7, #4]
   1057a:	681b      	ldr	r3, [r3, #0]
   1057c:	210b      	movs	r1, #11
   1057e:	4618      	mov	r0, r3
   10580:	4b08      	ldr	r3, [pc, #32]	; (105a4 <_wdt_init+0x88>)
   10582:	4798      	blx	r3
	}

	return ERR_NONE;
   10584:	2300      	movs	r3, #0
}
   10586:	4618      	mov	r0, r3
   10588:	3708      	adds	r7, #8
   1058a:	46bd      	mov	sp, r7
   1058c:	bd80      	pop	{r7, pc}
   1058e:	bf00      	nop
   10590:	00020d98 	.word	0x00020d98
   10594:	00008145 	.word	0x00008145
   10598:	00010485 	.word	0x00010485
   1059c:	0001041d 	.word	0x0001041d
   105a0:	00010459 	.word	0x00010459
   105a4:	000104b9 	.word	0x000104b9

000105a8 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
   105a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   105aa:	b08b      	sub	sp, #44	; 0x2c
   105ac:	af00      	add	r7, sp, #0
   105ae:	60f8      	str	r0, [r7, #12]
   105b0:	60b9      	str	r1, [r7, #8]
   105b2:	4613      	mov	r3, r2
   105b4:	80fb      	strh	r3, [r7, #6]
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   105b6:	68fb      	ldr	r3, [r7, #12]
   105b8:	2b00      	cmp	r3, #0
   105ba:	d005      	beq.n	105c8 <_wdt_set_timeout_period+0x20>
   105bc:	68fb      	ldr	r3, [r7, #12]
   105be:	681b      	ldr	r3, [r3, #0]
   105c0:	2b00      	cmp	r3, #0
   105c2:	d001      	beq.n	105c8 <_wdt_set_timeout_period+0x20>
   105c4:	2301      	movs	r3, #1
   105c6:	e000      	b.n	105ca <_wdt_set_timeout_period+0x22>
   105c8:	2300      	movs	r3, #0
   105ca:	f003 0301 	and.w	r3, r3, #1
   105ce:	b2db      	uxtb	r3, r3
   105d0:	227a      	movs	r2, #122	; 0x7a
   105d2:	4954      	ldr	r1, [pc, #336]	; (10724 <_wdt_set_timeout_period+0x17c>)
   105d4:	4618      	mov	r0, r3
   105d6:	4b54      	ldr	r3, [pc, #336]	; (10728 <_wdt_set_timeout_period+0x180>)
   105d8:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
   105da:	68fb      	ldr	r3, [r7, #12]
   105dc:	681b      	ldr	r3, [r3, #0]
   105de:	4618      	mov	r0, r3
   105e0:	4b52      	ldr	r3, [pc, #328]	; (1072c <_wdt_set_timeout_period+0x184>)
   105e2:	4798      	blx	r3
   105e4:	4603      	mov	r3, r0
   105e6:	2b00      	cmp	r3, #0
   105e8:	d107      	bne.n	105fa <_wdt_set_timeout_period+0x52>
   105ea:	68fb      	ldr	r3, [r7, #12]
   105ec:	681b      	ldr	r3, [r3, #0]
   105ee:	4618      	mov	r0, r3
   105f0:	4b4f      	ldr	r3, [pc, #316]	; (10730 <_wdt_set_timeout_period+0x188>)
   105f2:	4798      	blx	r3
   105f4:	4603      	mov	r3, r0
   105f6:	2b00      	cmp	r3, #0
   105f8:	d002      	beq.n	10600 <_wdt_set_timeout_period+0x58>
		return ERR_DENIED;
   105fa:	f06f 0310 	mvn.w	r3, #16
   105fe:	e08c      	b.n	1071a <_wdt_set_timeout_period+0x172>
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
   10600:	88f9      	ldrh	r1, [r7, #6]
   10602:	f04f 0200 	mov.w	r2, #0
   10606:	68bb      	ldr	r3, [r7, #8]
   10608:	f04f 0400 	mov.w	r4, #0
   1060c:	fb03 fe02 	mul.w	lr, r3, r2
   10610:	fb01 f004 	mul.w	r0, r1, r4
   10614:	4470      	add	r0, lr
   10616:	fba1 3403 	umull	r3, r4, r1, r3
   1061a:	1902      	adds	r2, r0, r4
   1061c:	4614      	mov	r4, r2
   1061e:	e9c7 3406 	strd	r3, r4, [r7, #24]
   10622:	e9c7 3406 	strd	r3, r4, [r7, #24]

		/* check whether overflow*/
		if (tmp >> 32) {
   10626:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   1062a:	0025      	movs	r5, r4
   1062c:	2600      	movs	r6, #0
   1062e:	ea55 0306 	orrs.w	r3, r5, r6
   10632:	d002      	beq.n	1063a <_wdt_set_timeout_period+0x92>
			return ERR_INVALID_ARG;
   10634:	f06f 030c 	mvn.w	r3, #12
   10638:	e06f      	b.n	1071a <_wdt_set_timeout_period+0x172>
		}

		period_cycles = (uint32_t)tmp;
   1063a:	69bb      	ldr	r3, [r7, #24]
   1063c:	617b      	str	r3, [r7, #20]
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
   1063e:	697b      	ldr	r3, [r7, #20]
   10640:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
   10644:	d041      	beq.n	106ca <_wdt_set_timeout_period+0x122>
   10646:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
   1064a:	d813      	bhi.n	10674 <_wdt_set_timeout_period+0xcc>
   1064c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   10650:	d02f      	beq.n	106b2 <_wdt_set_timeout_period+0x10a>
   10652:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   10656:	d806      	bhi.n	10666 <_wdt_set_timeout_period+0xbe>
   10658:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1065c:	d021      	beq.n	106a2 <_wdt_set_timeout_period+0xfa>
   1065e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   10662:	d022      	beq.n	106aa <_wdt_set_timeout_period+0x102>
   10664:	e04d      	b.n	10702 <_wdt_set_timeout_period+0x15a>
   10666:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
   1066a:	d026      	beq.n	106ba <_wdt_set_timeout_period+0x112>
   1066c:	f5b3 3ffa 	cmp.w	r3, #128000	; 0x1f400
   10670:	d027      	beq.n	106c2 <_wdt_set_timeout_period+0x11a>
   10672:	e046      	b.n	10702 <_wdt_set_timeout_period+0x15a>
   10674:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
   10678:	d033      	beq.n	106e2 <_wdt_set_timeout_period+0x13a>
   1067a:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
   1067e:	d806      	bhi.n	1068e <_wdt_set_timeout_period+0xe6>
   10680:	f5b3 2ffa 	cmp.w	r3, #512000	; 0x7d000
   10684:	d025      	beq.n	106d2 <_wdt_set_timeout_period+0x12a>
   10686:	f5b3 2f7a 	cmp.w	r3, #1024000	; 0xfa000
   1068a:	d026      	beq.n	106da <_wdt_set_timeout_period+0x132>
   1068c:	e039      	b.n	10702 <_wdt_set_timeout_period+0x15a>
   1068e:	f5b3 0ffa 	cmp.w	r3, #8192000	; 0x7d0000
   10692:	d02e      	beq.n	106f2 <_wdt_set_timeout_period+0x14a>
   10694:	f5b3 0f7a 	cmp.w	r3, #16384000	; 0xfa0000
   10698:	d02f      	beq.n	106fa <_wdt_set_timeout_period+0x152>
   1069a:	f5b3 1f7a 	cmp.w	r3, #4096000	; 0x3e8000
   1069e:	d024      	beq.n	106ea <_wdt_set_timeout_period+0x142>
   106a0:	e02f      	b.n	10702 <_wdt_set_timeout_period+0x15a>
		case WDT_CLK_8CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_8CYCLE;
   106a2:	2300      	movs	r3, #0
   106a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   106a8:	e02e      	b.n	10708 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_16CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16CYCLE;
   106aa:	2301      	movs	r3, #1
   106ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   106b0:	e02a      	b.n	10708 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_32CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_32CYCLE;
   106b2:	2302      	movs	r3, #2
   106b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   106b8:	e026      	b.n	10708 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_64CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_64CYCLE;
   106ba:	2303      	movs	r3, #3
   106bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   106c0:	e022      	b.n	10708 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_128CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_128CYCLE;
   106c2:	2304      	movs	r3, #4
   106c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   106c8:	e01e      	b.n	10708 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_256CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_256CYCLE;
   106ca:	2305      	movs	r3, #5
   106cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   106d0:	e01a      	b.n	10708 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_512CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_512CYCLE;
   106d2:	2306      	movs	r3, #6
   106d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   106d8:	e016      	b.n	10708 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_1024CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
   106da:	2307      	movs	r3, #7
   106dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   106e0:	e012      	b.n	10708 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_2048CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
   106e2:	2308      	movs	r3, #8
   106e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   106e8:	e00e      	b.n	10708 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_4096CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
   106ea:	2309      	movs	r3, #9
   106ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   106f0:	e00a      	b.n	10708 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_8192CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
   106f2:	230a      	movs	r3, #10
   106f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   106f8:	e006      	b.n	10708 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
   106fa:	230b      	movs	r3, #11
   106fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   10700:	e002      	b.n	10708 <_wdt_set_timeout_period+0x160>
		default:
			return ERR_INVALID_ARG;
   10702:	f06f 030c 	mvn.w	r3, #12
   10706:	e008      	b.n	1071a <_wdt_set_timeout_period+0x172>
		}
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);
   10708:	68fb      	ldr	r3, [r7, #12]
   1070a:	681b      	ldr	r3, [r3, #0]
   1070c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   10710:	4611      	mov	r1, r2
   10712:	4618      	mov	r0, r3
   10714:	4b07      	ldr	r3, [pc, #28]	; (10734 <_wdt_set_timeout_period+0x18c>)
   10716:	4798      	blx	r3

	return ERR_NONE;
   10718:	2300      	movs	r3, #0
}
   1071a:	4618      	mov	r0, r3
   1071c:	372c      	adds	r7, #44	; 0x2c
   1071e:	46bd      	mov	sp, r7
   10720:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10722:	bf00      	nop
   10724:	00020d98 	.word	0x00020d98
   10728:	00008145 	.word	0x00008145
   1072c:	00010485 	.word	0x00010485
   10730:	0001041d 	.word	0x0001041d
   10734:	000104b9 	.word	0x000104b9

00010738 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
   10738:	b580      	push	{r7, lr}
   1073a:	b082      	sub	sp, #8
   1073c:	af00      	add	r7, sp, #0
   1073e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   10740:	687b      	ldr	r3, [r7, #4]
   10742:	2b00      	cmp	r3, #0
   10744:	d005      	beq.n	10752 <_wdt_enable+0x1a>
   10746:	687b      	ldr	r3, [r7, #4]
   10748:	681b      	ldr	r3, [r3, #0]
   1074a:	2b00      	cmp	r3, #0
   1074c:	d001      	beq.n	10752 <_wdt_enable+0x1a>
   1074e:	2301      	movs	r3, #1
   10750:	e000      	b.n	10754 <_wdt_enable+0x1c>
   10752:	2300      	movs	r3, #0
   10754:	f003 0301 	and.w	r3, r3, #1
   10758:	b2db      	uxtb	r3, r3
   1075a:	22fb      	movs	r2, #251	; 0xfb
   1075c:	4906      	ldr	r1, [pc, #24]	; (10778 <_wdt_enable+0x40>)
   1075e:	4618      	mov	r0, r3
   10760:	4b06      	ldr	r3, [pc, #24]	; (1077c <_wdt_enable+0x44>)
   10762:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
   10764:	687b      	ldr	r3, [r7, #4]
   10766:	681b      	ldr	r3, [r3, #0]
   10768:	4618      	mov	r0, r3
   1076a:	4b05      	ldr	r3, [pc, #20]	; (10780 <_wdt_enable+0x48>)
   1076c:	4798      	blx	r3

	return ERR_NONE;
   1076e:	2300      	movs	r3, #0
}
   10770:	4618      	mov	r0, r3
   10772:	3708      	adds	r7, #8
   10774:	46bd      	mov	sp, r7
   10776:	bd80      	pop	{r7, pc}
   10778:	00020d98 	.word	0x00020d98
   1077c:	00008145 	.word	0x00008145
   10780:	000103f1 	.word	0x000103f1

00010784 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
   10784:	b580      	push	{r7, lr}
   10786:	b082      	sub	sp, #8
   10788:	af00      	add	r7, sp, #0
   1078a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   1078c:	687b      	ldr	r3, [r7, #4]
   1078e:	2b00      	cmp	r3, #0
   10790:	d005      	beq.n	1079e <_wdt_feed+0x1a>
   10792:	687b      	ldr	r3, [r7, #4]
   10794:	681b      	ldr	r3, [r3, #0]
   10796:	2b00      	cmp	r3, #0
   10798:	d001      	beq.n	1079e <_wdt_feed+0x1a>
   1079a:	2301      	movs	r3, #1
   1079c:	e000      	b.n	107a0 <_wdt_feed+0x1c>
   1079e:	2300      	movs	r3, #0
   107a0:	f003 0301 	and.w	r3, r3, #1
   107a4:	b2db      	uxtb	r3, r3
   107a6:	f240 1219 	movw	r2, #281	; 0x119
   107aa:	4907      	ldr	r1, [pc, #28]	; (107c8 <_wdt_feed+0x44>)
   107ac:	4618      	mov	r0, r3
   107ae:	4b07      	ldr	r3, [pc, #28]	; (107cc <_wdt_feed+0x48>)
   107b0:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
   107b2:	687b      	ldr	r3, [r7, #4]
   107b4:	681b      	ldr	r3, [r3, #0]
   107b6:	21a5      	movs	r1, #165	; 0xa5
   107b8:	4618      	mov	r0, r3
   107ba:	4b05      	ldr	r3, [pc, #20]	; (107d0 <_wdt_feed+0x4c>)
   107bc:	4798      	blx	r3

	return ERR_NONE;
   107be:	2300      	movs	r3, #0
}
   107c0:	4618      	mov	r0, r3
   107c2:	3708      	adds	r7, #8
   107c4:	46bd      	mov	sp, r7
   107c6:	bd80      	pop	{r7, pc}
   107c8:	00020d98 	.word	0x00020d98
   107cc:	00008145 	.word	0x00008145
   107d0:	000104f5 	.word	0x000104f5

000107d4 <hri_port_set_DIR_reg>:
{
   107d4:	b480      	push	{r7}
   107d6:	b085      	sub	sp, #20
   107d8:	af00      	add	r7, sp, #0
   107da:	60f8      	str	r0, [r7, #12]
   107dc:	460b      	mov	r3, r1
   107de:	607a      	str	r2, [r7, #4]
   107e0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   107e2:	7afb      	ldrb	r3, [r7, #11]
   107e4:	68fa      	ldr	r2, [r7, #12]
   107e6:	01db      	lsls	r3, r3, #7
   107e8:	4413      	add	r3, r2
   107ea:	3308      	adds	r3, #8
   107ec:	687a      	ldr	r2, [r7, #4]
   107ee:	601a      	str	r2, [r3, #0]
}
   107f0:	bf00      	nop
   107f2:	3714      	adds	r7, #20
   107f4:	46bd      	mov	sp, r7
   107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   107fa:	4770      	bx	lr

000107fc <hri_port_clear_DIR_reg>:
{
   107fc:	b480      	push	{r7}
   107fe:	b085      	sub	sp, #20
   10800:	af00      	add	r7, sp, #0
   10802:	60f8      	str	r0, [r7, #12]
   10804:	460b      	mov	r3, r1
   10806:	607a      	str	r2, [r7, #4]
   10808:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   1080a:	7afb      	ldrb	r3, [r7, #11]
   1080c:	68fa      	ldr	r2, [r7, #12]
   1080e:	01db      	lsls	r3, r3, #7
   10810:	4413      	add	r3, r2
   10812:	3304      	adds	r3, #4
   10814:	687a      	ldr	r2, [r7, #4]
   10816:	601a      	str	r2, [r3, #0]
}
   10818:	bf00      	nop
   1081a:	3714      	adds	r7, #20
   1081c:	46bd      	mov	sp, r7
   1081e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10822:	4770      	bx	lr

00010824 <hri_port_set_OUT_reg>:
{
   10824:	b480      	push	{r7}
   10826:	b085      	sub	sp, #20
   10828:	af00      	add	r7, sp, #0
   1082a:	60f8      	str	r0, [r7, #12]
   1082c:	460b      	mov	r3, r1
   1082e:	607a      	str	r2, [r7, #4]
   10830:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   10832:	7afb      	ldrb	r3, [r7, #11]
   10834:	68fa      	ldr	r2, [r7, #12]
   10836:	01db      	lsls	r3, r3, #7
   10838:	4413      	add	r3, r2
   1083a:	3318      	adds	r3, #24
   1083c:	687a      	ldr	r2, [r7, #4]
   1083e:	601a      	str	r2, [r3, #0]
}
   10840:	bf00      	nop
   10842:	3714      	adds	r7, #20
   10844:	46bd      	mov	sp, r7
   10846:	f85d 7b04 	ldr.w	r7, [sp], #4
   1084a:	4770      	bx	lr

0001084c <hri_port_clear_OUT_reg>:
{
   1084c:	b480      	push	{r7}
   1084e:	b085      	sub	sp, #20
   10850:	af00      	add	r7, sp, #0
   10852:	60f8      	str	r0, [r7, #12]
   10854:	460b      	mov	r3, r1
   10856:	607a      	str	r2, [r7, #4]
   10858:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   1085a:	7afb      	ldrb	r3, [r7, #11]
   1085c:	68fa      	ldr	r2, [r7, #12]
   1085e:	01db      	lsls	r3, r3, #7
   10860:	4413      	add	r3, r2
   10862:	3314      	adds	r3, #20
   10864:	687a      	ldr	r2, [r7, #4]
   10866:	601a      	str	r2, [r3, #0]
}
   10868:	bf00      	nop
   1086a:	3714      	adds	r7, #20
   1086c:	46bd      	mov	sp, r7
   1086e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10872:	4770      	bx	lr

00010874 <hri_port_write_PMUX_PMUXE_bf>:
{
   10874:	b480      	push	{r7}
   10876:	b085      	sub	sp, #20
   10878:	af00      	add	r7, sp, #0
   1087a:	6078      	str	r0, [r7, #4]
   1087c:	4608      	mov	r0, r1
   1087e:	4611      	mov	r1, r2
   10880:	461a      	mov	r2, r3
   10882:	4603      	mov	r3, r0
   10884:	70fb      	strb	r3, [r7, #3]
   10886:	460b      	mov	r3, r1
   10888:	70bb      	strb	r3, [r7, #2]
   1088a:	4613      	mov	r3, r2
   1088c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1088e:	78fa      	ldrb	r2, [r7, #3]
   10890:	78bb      	ldrb	r3, [r7, #2]
   10892:	6879      	ldr	r1, [r7, #4]
   10894:	01d2      	lsls	r2, r2, #7
   10896:	440a      	add	r2, r1
   10898:	4413      	add	r3, r2
   1089a:	3330      	adds	r3, #48	; 0x30
   1089c:	781b      	ldrb	r3, [r3, #0]
   1089e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   108a0:	7bfb      	ldrb	r3, [r7, #15]
   108a2:	f023 030f 	bic.w	r3, r3, #15
   108a6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   108a8:	787b      	ldrb	r3, [r7, #1]
   108aa:	f003 030f 	and.w	r3, r3, #15
   108ae:	b2da      	uxtb	r2, r3
   108b0:	7bfb      	ldrb	r3, [r7, #15]
   108b2:	4313      	orrs	r3, r2
   108b4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   108b6:	78fa      	ldrb	r2, [r7, #3]
   108b8:	78bb      	ldrb	r3, [r7, #2]
   108ba:	6879      	ldr	r1, [r7, #4]
   108bc:	01d2      	lsls	r2, r2, #7
   108be:	440a      	add	r2, r1
   108c0:	4413      	add	r3, r2
   108c2:	3330      	adds	r3, #48	; 0x30
   108c4:	7bfa      	ldrb	r2, [r7, #15]
   108c6:	701a      	strb	r2, [r3, #0]
}
   108c8:	bf00      	nop
   108ca:	3714      	adds	r7, #20
   108cc:	46bd      	mov	sp, r7
   108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   108d2:	4770      	bx	lr

000108d4 <hri_port_write_PMUX_PMUXO_bf>:
{
   108d4:	b480      	push	{r7}
   108d6:	b085      	sub	sp, #20
   108d8:	af00      	add	r7, sp, #0
   108da:	6078      	str	r0, [r7, #4]
   108dc:	4608      	mov	r0, r1
   108de:	4611      	mov	r1, r2
   108e0:	461a      	mov	r2, r3
   108e2:	4603      	mov	r3, r0
   108e4:	70fb      	strb	r3, [r7, #3]
   108e6:	460b      	mov	r3, r1
   108e8:	70bb      	strb	r3, [r7, #2]
   108ea:	4613      	mov	r3, r2
   108ec:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   108ee:	78fa      	ldrb	r2, [r7, #3]
   108f0:	78bb      	ldrb	r3, [r7, #2]
   108f2:	6879      	ldr	r1, [r7, #4]
   108f4:	01d2      	lsls	r2, r2, #7
   108f6:	440a      	add	r2, r1
   108f8:	4413      	add	r3, r2
   108fa:	3330      	adds	r3, #48	; 0x30
   108fc:	781b      	ldrb	r3, [r3, #0]
   108fe:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   10900:	7bfb      	ldrb	r3, [r7, #15]
   10902:	f003 030f 	and.w	r3, r3, #15
   10906:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   10908:	787b      	ldrb	r3, [r7, #1]
   1090a:	011b      	lsls	r3, r3, #4
   1090c:	b2da      	uxtb	r2, r3
   1090e:	7bfb      	ldrb	r3, [r7, #15]
   10910:	4313      	orrs	r3, r2
   10912:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   10914:	78fa      	ldrb	r2, [r7, #3]
   10916:	78bb      	ldrb	r3, [r7, #2]
   10918:	6879      	ldr	r1, [r7, #4]
   1091a:	01d2      	lsls	r2, r2, #7
   1091c:	440a      	add	r2, r1
   1091e:	4413      	add	r3, r2
   10920:	3330      	adds	r3, #48	; 0x30
   10922:	7bfa      	ldrb	r2, [r7, #15]
   10924:	701a      	strb	r2, [r3, #0]
}
   10926:	bf00      	nop
   10928:	3714      	adds	r7, #20
   1092a:	46bd      	mov	sp, r7
   1092c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10930:	4770      	bx	lr

00010932 <hri_port_write_PINCFG_PMUXEN_bit>:
{
   10932:	b480      	push	{r7}
   10934:	b085      	sub	sp, #20
   10936:	af00      	add	r7, sp, #0
   10938:	6078      	str	r0, [r7, #4]
   1093a:	4608      	mov	r0, r1
   1093c:	4611      	mov	r1, r2
   1093e:	461a      	mov	r2, r3
   10940:	4603      	mov	r3, r0
   10942:	70fb      	strb	r3, [r7, #3]
   10944:	460b      	mov	r3, r1
   10946:	70bb      	strb	r3, [r7, #2]
   10948:	4613      	mov	r3, r2
   1094a:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   1094c:	78fa      	ldrb	r2, [r7, #3]
   1094e:	78bb      	ldrb	r3, [r7, #2]
   10950:	6879      	ldr	r1, [r7, #4]
   10952:	01d2      	lsls	r2, r2, #7
   10954:	440a      	add	r2, r1
   10956:	4413      	add	r3, r2
   10958:	3340      	adds	r3, #64	; 0x40
   1095a:	781b      	ldrb	r3, [r3, #0]
   1095c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   1095e:	7bfb      	ldrb	r3, [r7, #15]
   10960:	f023 0301 	bic.w	r3, r3, #1
   10964:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   10966:	787a      	ldrb	r2, [r7, #1]
   10968:	7bfb      	ldrb	r3, [r7, #15]
   1096a:	4313      	orrs	r3, r2
   1096c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   1096e:	78fa      	ldrb	r2, [r7, #3]
   10970:	78bb      	ldrb	r3, [r7, #2]
   10972:	6879      	ldr	r1, [r7, #4]
   10974:	01d2      	lsls	r2, r2, #7
   10976:	440a      	add	r2, r1
   10978:	4413      	add	r3, r2
   1097a:	3340      	adds	r3, #64	; 0x40
   1097c:	7bfa      	ldrb	r2, [r7, #15]
   1097e:	701a      	strb	r2, [r3, #0]
}
   10980:	bf00      	nop
   10982:	3714      	adds	r7, #20
   10984:	46bd      	mov	sp, r7
   10986:	f85d 7b04 	ldr.w	r7, [sp], #4
   1098a:	4770      	bx	lr

0001098c <hri_port_write_WRCONFIG_reg>:
{
   1098c:	b480      	push	{r7}
   1098e:	b085      	sub	sp, #20
   10990:	af00      	add	r7, sp, #0
   10992:	60f8      	str	r0, [r7, #12]
   10994:	460b      	mov	r3, r1
   10996:	607a      	str	r2, [r7, #4]
   10998:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   1099a:	7afb      	ldrb	r3, [r7, #11]
   1099c:	68fa      	ldr	r2, [r7, #12]
   1099e:	01db      	lsls	r3, r3, #7
   109a0:	4413      	add	r3, r2
   109a2:	3328      	adds	r3, #40	; 0x28
   109a4:	687a      	ldr	r2, [r7, #4]
   109a6:	601a      	str	r2, [r3, #0]
}
   109a8:	bf00      	nop
   109aa:	3714      	adds	r7, #20
   109ac:	46bd      	mov	sp, r7
   109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   109b2:	4770      	bx	lr

000109b4 <_gpio_set_direction>:
{
   109b4:	b580      	push	{r7, lr}
   109b6:	b082      	sub	sp, #8
   109b8:	af00      	add	r7, sp, #0
   109ba:	4603      	mov	r3, r0
   109bc:	6039      	str	r1, [r7, #0]
   109be:	71fb      	strb	r3, [r7, #7]
   109c0:	4613      	mov	r3, r2
   109c2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   109c4:	79bb      	ldrb	r3, [r7, #6]
   109c6:	2b01      	cmp	r3, #1
   109c8:	d01c      	beq.n	10a04 <_gpio_set_direction+0x50>
   109ca:	2b02      	cmp	r3, #2
   109cc:	d037      	beq.n	10a3e <_gpio_set_direction+0x8a>
   109ce:	2b00      	cmp	r3, #0
   109d0:	d14e      	bne.n	10a70 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   109d2:	79fb      	ldrb	r3, [r7, #7]
   109d4:	683a      	ldr	r2, [r7, #0]
   109d6:	4619      	mov	r1, r3
   109d8:	482a      	ldr	r0, [pc, #168]	; (10a84 <_gpio_set_direction+0xd0>)
   109da:	4b2b      	ldr	r3, [pc, #172]	; (10a88 <_gpio_set_direction+0xd4>)
   109dc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   109de:	683b      	ldr	r3, [r7, #0]
   109e0:	b29b      	uxth	r3, r3
   109e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   109e6:	79fb      	ldrb	r3, [r7, #7]
   109e8:	4619      	mov	r1, r3
   109ea:	4826      	ldr	r0, [pc, #152]	; (10a84 <_gpio_set_direction+0xd0>)
   109ec:	4b27      	ldr	r3, [pc, #156]	; (10a8c <_gpio_set_direction+0xd8>)
   109ee:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   109f0:	683b      	ldr	r3, [r7, #0]
   109f2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   109f4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   109f8:	79fb      	ldrb	r3, [r7, #7]
   109fa:	4619      	mov	r1, r3
   109fc:	4821      	ldr	r0, [pc, #132]	; (10a84 <_gpio_set_direction+0xd0>)
   109fe:	4b23      	ldr	r3, [pc, #140]	; (10a8c <_gpio_set_direction+0xd8>)
   10a00:	4798      	blx	r3
		break;
   10a02:	e03a      	b.n	10a7a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10a04:	79fb      	ldrb	r3, [r7, #7]
   10a06:	683a      	ldr	r2, [r7, #0]
   10a08:	4619      	mov	r1, r3
   10a0a:	481e      	ldr	r0, [pc, #120]	; (10a84 <_gpio_set_direction+0xd0>)
   10a0c:	4b1e      	ldr	r3, [pc, #120]	; (10a88 <_gpio_set_direction+0xd4>)
   10a0e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   10a10:	683b      	ldr	r3, [r7, #0]
   10a12:	b29b      	uxth	r3, r3
   10a14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10a1c:	79f9      	ldrb	r1, [r7, #7]
   10a1e:	461a      	mov	r2, r3
   10a20:	4818      	ldr	r0, [pc, #96]	; (10a84 <_gpio_set_direction+0xd0>)
   10a22:	4b1a      	ldr	r3, [pc, #104]	; (10a8c <_gpio_set_direction+0xd8>)
   10a24:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   10a26:	683b      	ldr	r3, [r7, #0]
   10a28:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   10a2a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   10a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10a32:	79f9      	ldrb	r1, [r7, #7]
   10a34:	461a      	mov	r2, r3
   10a36:	4813      	ldr	r0, [pc, #76]	; (10a84 <_gpio_set_direction+0xd0>)
   10a38:	4b14      	ldr	r3, [pc, #80]	; (10a8c <_gpio_set_direction+0xd8>)
   10a3a:	4798      	blx	r3
		break;
   10a3c:	e01d      	b.n	10a7a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   10a3e:	79fb      	ldrb	r3, [r7, #7]
   10a40:	683a      	ldr	r2, [r7, #0]
   10a42:	4619      	mov	r1, r3
   10a44:	480f      	ldr	r0, [pc, #60]	; (10a84 <_gpio_set_direction+0xd0>)
   10a46:	4b12      	ldr	r3, [pc, #72]	; (10a90 <_gpio_set_direction+0xdc>)
   10a48:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   10a4a:	683b      	ldr	r3, [r7, #0]
   10a4c:	b29b      	uxth	r3, r3
   10a4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   10a52:	79fb      	ldrb	r3, [r7, #7]
   10a54:	4619      	mov	r1, r3
   10a56:	480b      	ldr	r0, [pc, #44]	; (10a84 <_gpio_set_direction+0xd0>)
   10a58:	4b0c      	ldr	r3, [pc, #48]	; (10a8c <_gpio_set_direction+0xd8>)
   10a5a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   10a5c:	683b      	ldr	r3, [r7, #0]
   10a5e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10a60:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   10a64:	79fb      	ldrb	r3, [r7, #7]
   10a66:	4619      	mov	r1, r3
   10a68:	4806      	ldr	r0, [pc, #24]	; (10a84 <_gpio_set_direction+0xd0>)
   10a6a:	4b08      	ldr	r3, [pc, #32]	; (10a8c <_gpio_set_direction+0xd8>)
   10a6c:	4798      	blx	r3
		break;
   10a6e:	e004      	b.n	10a7a <_gpio_set_direction+0xc6>
		ASSERT(false);
   10a70:	2246      	movs	r2, #70	; 0x46
   10a72:	4908      	ldr	r1, [pc, #32]	; (10a94 <_gpio_set_direction+0xe0>)
   10a74:	2000      	movs	r0, #0
   10a76:	4b08      	ldr	r3, [pc, #32]	; (10a98 <_gpio_set_direction+0xe4>)
   10a78:	4798      	blx	r3
}
   10a7a:	bf00      	nop
   10a7c:	3708      	adds	r7, #8
   10a7e:	46bd      	mov	sp, r7
   10a80:	bd80      	pop	{r7, pc}
   10a82:	bf00      	nop
   10a84:	41008000 	.word	0x41008000
   10a88:	000107fd 	.word	0x000107fd
   10a8c:	0001098d 	.word	0x0001098d
   10a90:	000107d5 	.word	0x000107d5
   10a94:	00020db0 	.word	0x00020db0
   10a98:	00008145 	.word	0x00008145

00010a9c <_gpio_set_level>:
{
   10a9c:	b580      	push	{r7, lr}
   10a9e:	b082      	sub	sp, #8
   10aa0:	af00      	add	r7, sp, #0
   10aa2:	4603      	mov	r3, r0
   10aa4:	6039      	str	r1, [r7, #0]
   10aa6:	71fb      	strb	r3, [r7, #7]
   10aa8:	4613      	mov	r3, r2
   10aaa:	71bb      	strb	r3, [r7, #6]
	if (level) {
   10aac:	79bb      	ldrb	r3, [r7, #6]
   10aae:	2b00      	cmp	r3, #0
   10ab0:	d006      	beq.n	10ac0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   10ab2:	79fb      	ldrb	r3, [r7, #7]
   10ab4:	683a      	ldr	r2, [r7, #0]
   10ab6:	4619      	mov	r1, r3
   10ab8:	4806      	ldr	r0, [pc, #24]	; (10ad4 <_gpio_set_level+0x38>)
   10aba:	4b07      	ldr	r3, [pc, #28]	; (10ad8 <_gpio_set_level+0x3c>)
   10abc:	4798      	blx	r3
}
   10abe:	e005      	b.n	10acc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   10ac0:	79fb      	ldrb	r3, [r7, #7]
   10ac2:	683a      	ldr	r2, [r7, #0]
   10ac4:	4619      	mov	r1, r3
   10ac6:	4803      	ldr	r0, [pc, #12]	; (10ad4 <_gpio_set_level+0x38>)
   10ac8:	4b04      	ldr	r3, [pc, #16]	; (10adc <_gpio_set_level+0x40>)
   10aca:	4798      	blx	r3
}
   10acc:	bf00      	nop
   10ace:	3708      	adds	r7, #8
   10ad0:	46bd      	mov	sp, r7
   10ad2:	bd80      	pop	{r7, pc}
   10ad4:	41008000 	.word	0x41008000
   10ad8:	00010825 	.word	0x00010825
   10adc:	0001084d 	.word	0x0001084d

00010ae0 <_gpio_set_pin_function>:
{
   10ae0:	b590      	push	{r4, r7, lr}
   10ae2:	b085      	sub	sp, #20
   10ae4:	af00      	add	r7, sp, #0
   10ae6:	6078      	str	r0, [r7, #4]
   10ae8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   10aea:	687b      	ldr	r3, [r7, #4]
   10aec:	095b      	lsrs	r3, r3, #5
   10aee:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   10af0:	687b      	ldr	r3, [r7, #4]
   10af2:	b2db      	uxtb	r3, r3
   10af4:	f003 031f 	and.w	r3, r3, #31
   10af8:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
   10afa:	683b      	ldr	r3, [r7, #0]
   10afc:	f1b3 3fff 	cmp.w	r3, #4294967295
   10b00:	d106      	bne.n	10b10 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   10b02:	7bba      	ldrb	r2, [r7, #14]
   10b04:	7bf9      	ldrb	r1, [r7, #15]
   10b06:	2300      	movs	r3, #0
   10b08:	4812      	ldr	r0, [pc, #72]	; (10b54 <_gpio_set_pin_function+0x74>)
   10b0a:	4c13      	ldr	r4, [pc, #76]	; (10b58 <_gpio_set_pin_function+0x78>)
   10b0c:	47a0      	blx	r4
}
   10b0e:	e01d      	b.n	10b4c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   10b10:	7bba      	ldrb	r2, [r7, #14]
   10b12:	7bf9      	ldrb	r1, [r7, #15]
   10b14:	2301      	movs	r3, #1
   10b16:	480f      	ldr	r0, [pc, #60]	; (10b54 <_gpio_set_pin_function+0x74>)
   10b18:	4c0f      	ldr	r4, [pc, #60]	; (10b58 <_gpio_set_pin_function+0x78>)
   10b1a:	47a0      	blx	r4
		if (pin & 1) {
   10b1c:	7bbb      	ldrb	r3, [r7, #14]
   10b1e:	f003 0301 	and.w	r3, r3, #1
   10b22:	2b00      	cmp	r3, #0
   10b24:	d009      	beq.n	10b3a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   10b26:	7bbb      	ldrb	r3, [r7, #14]
   10b28:	085b      	lsrs	r3, r3, #1
   10b2a:	b2da      	uxtb	r2, r3
   10b2c:	683b      	ldr	r3, [r7, #0]
   10b2e:	b2db      	uxtb	r3, r3
   10b30:	7bf9      	ldrb	r1, [r7, #15]
   10b32:	4808      	ldr	r0, [pc, #32]	; (10b54 <_gpio_set_pin_function+0x74>)
   10b34:	4c09      	ldr	r4, [pc, #36]	; (10b5c <_gpio_set_pin_function+0x7c>)
   10b36:	47a0      	blx	r4
}
   10b38:	e008      	b.n	10b4c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   10b3a:	7bbb      	ldrb	r3, [r7, #14]
   10b3c:	085b      	lsrs	r3, r3, #1
   10b3e:	b2da      	uxtb	r2, r3
   10b40:	683b      	ldr	r3, [r7, #0]
   10b42:	b2db      	uxtb	r3, r3
   10b44:	7bf9      	ldrb	r1, [r7, #15]
   10b46:	4803      	ldr	r0, [pc, #12]	; (10b54 <_gpio_set_pin_function+0x74>)
   10b48:	4c05      	ldr	r4, [pc, #20]	; (10b60 <_gpio_set_pin_function+0x80>)
   10b4a:	47a0      	blx	r4
}
   10b4c:	bf00      	nop
   10b4e:	3714      	adds	r7, #20
   10b50:	46bd      	mov	sp, r7
   10b52:	bd90      	pop	{r4, r7, pc}
   10b54:	41008000 	.word	0x41008000
   10b58:	00010933 	.word	0x00010933
   10b5c:	000108d5 	.word	0x000108d5
   10b60:	00010875 	.word	0x00010875

00010b64 <gpio_set_pin_function>:
{
   10b64:	b580      	push	{r7, lr}
   10b66:	b082      	sub	sp, #8
   10b68:	af00      	add	r7, sp, #0
   10b6a:	6078      	str	r0, [r7, #4]
   10b6c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   10b6e:	6839      	ldr	r1, [r7, #0]
   10b70:	6878      	ldr	r0, [r7, #4]
   10b72:	4b03      	ldr	r3, [pc, #12]	; (10b80 <gpio_set_pin_function+0x1c>)
   10b74:	4798      	blx	r3
}
   10b76:	bf00      	nop
   10b78:	3708      	adds	r7, #8
   10b7a:	46bd      	mov	sp, r7
   10b7c:	bd80      	pop	{r7, pc}
   10b7e:	bf00      	nop
   10b80:	00010ae1 	.word	0x00010ae1

00010b84 <gpio_set_pin_direction>:
{
   10b84:	b580      	push	{r7, lr}
   10b86:	b082      	sub	sp, #8
   10b88:	af00      	add	r7, sp, #0
   10b8a:	4603      	mov	r3, r0
   10b8c:	460a      	mov	r2, r1
   10b8e:	71fb      	strb	r3, [r7, #7]
   10b90:	4613      	mov	r3, r2
   10b92:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   10b94:	79fb      	ldrb	r3, [r7, #7]
   10b96:	095b      	lsrs	r3, r3, #5
   10b98:	b2d8      	uxtb	r0, r3
   10b9a:	79fb      	ldrb	r3, [r7, #7]
   10b9c:	f003 031f 	and.w	r3, r3, #31
   10ba0:	2201      	movs	r2, #1
   10ba2:	fa02 f303 	lsl.w	r3, r2, r3
   10ba6:	79ba      	ldrb	r2, [r7, #6]
   10ba8:	4619      	mov	r1, r3
   10baa:	4b03      	ldr	r3, [pc, #12]	; (10bb8 <gpio_set_pin_direction+0x34>)
   10bac:	4798      	blx	r3
}
   10bae:	bf00      	nop
   10bb0:	3708      	adds	r7, #8
   10bb2:	46bd      	mov	sp, r7
   10bb4:	bd80      	pop	{r7, pc}
   10bb6:	bf00      	nop
   10bb8:	000109b5 	.word	0x000109b5

00010bbc <gpio_set_pin_level>:
{
   10bbc:	b580      	push	{r7, lr}
   10bbe:	b082      	sub	sp, #8
   10bc0:	af00      	add	r7, sp, #0
   10bc2:	4603      	mov	r3, r0
   10bc4:	460a      	mov	r2, r1
   10bc6:	71fb      	strb	r3, [r7, #7]
   10bc8:	4613      	mov	r3, r2
   10bca:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   10bcc:	79fb      	ldrb	r3, [r7, #7]
   10bce:	095b      	lsrs	r3, r3, #5
   10bd0:	b2d8      	uxtb	r0, r3
   10bd2:	79fb      	ldrb	r3, [r7, #7]
   10bd4:	f003 031f 	and.w	r3, r3, #31
   10bd8:	2201      	movs	r2, #1
   10bda:	fa02 f303 	lsl.w	r3, r2, r3
   10bde:	79ba      	ldrb	r2, [r7, #6]
   10be0:	4619      	mov	r1, r3
   10be2:	4b03      	ldr	r3, [pc, #12]	; (10bf0 <gpio_set_pin_level+0x34>)
   10be4:	4798      	blx	r3
}
   10be6:	bf00      	nop
   10be8:	3708      	adds	r7, #8
   10bea:	46bd      	mov	sp, r7
   10bec:	bd80      	pop	{r7, pc}
   10bee:	bf00      	nop
   10bf0:	00010a9d 	.word	0x00010a9d

00010bf4 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
   10bf4:	b580      	push	{r7, lr}
   10bf6:	b082      	sub	sp, #8
   10bf8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   10bfa:	2100      	movs	r1, #0
   10bfc:	2008      	movs	r0, #8
   10bfe:	4b24      	ldr	r3, [pc, #144]	; (10c90 <QSPI_N25Q256_exit_xip+0x9c>)
   10c00:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   10c02:	2100      	movs	r1, #0
   10c04:	202b      	movs	r0, #43	; 0x2b
   10c06:	4b22      	ldr	r3, [pc, #136]	; (10c90 <QSPI_N25Q256_exit_xip+0x9c>)
   10c08:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   10c0a:	2100      	movs	r1, #0
   10c0c:	202a      	movs	r0, #42	; 0x2a
   10c0e:	4b20      	ldr	r3, [pc, #128]	; (10c90 <QSPI_N25Q256_exit_xip+0x9c>)
   10c10:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   10c12:	2102      	movs	r1, #2
   10c14:	2008      	movs	r0, #8
   10c16:	4b1f      	ldr	r3, [pc, #124]	; (10c94 <QSPI_N25Q256_exit_xip+0xa0>)
   10c18:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   10c1a:	2102      	movs	r1, #2
   10c1c:	202b      	movs	r0, #43	; 0x2b
   10c1e:	4b1d      	ldr	r3, [pc, #116]	; (10c94 <QSPI_N25Q256_exit_xip+0xa0>)
   10c20:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   10c22:	2102      	movs	r1, #2
   10c24:	202a      	movs	r0, #42	; 0x2a
   10c26:	4b1b      	ldr	r3, [pc, #108]	; (10c94 <QSPI_N25Q256_exit_xip+0xa0>)
   10c28:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   10c2a:	2101      	movs	r1, #1
   10c2c:	2008      	movs	r0, #8
   10c2e:	4b1a      	ldr	r3, [pc, #104]	; (10c98 <QSPI_N25Q256_exit_xip+0xa4>)
   10c30:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   10c32:	2100      	movs	r1, #0
   10c34:	202b      	movs	r0, #43	; 0x2b
   10c36:	4b18      	ldr	r3, [pc, #96]	; (10c98 <QSPI_N25Q256_exit_xip+0xa4>)
   10c38:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   10c3a:	2100      	movs	r1, #0
   10c3c:	202a      	movs	r0, #42	; 0x2a
   10c3e:	4b16      	ldr	r3, [pc, #88]	; (10c98 <QSPI_N25Q256_exit_xip+0xa4>)
   10c40:	4798      	blx	r3

	delay_us(1);
   10c42:	2001      	movs	r0, #1
   10c44:	4b15      	ldr	r3, [pc, #84]	; (10c9c <QSPI_N25Q256_exit_xip+0xa8>)
   10c46:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   10c48:	2300      	movs	r3, #0
   10c4a:	607b      	str	r3, [r7, #4]
   10c4c:	e010      	b.n	10c70 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
   10c4e:	2101      	movs	r1, #1
   10c50:	202a      	movs	r0, #42	; 0x2a
   10c52:	4b11      	ldr	r3, [pc, #68]	; (10c98 <QSPI_N25Q256_exit_xip+0xa4>)
   10c54:	4798      	blx	r3
		delay_us(1);
   10c56:	2001      	movs	r0, #1
   10c58:	4b10      	ldr	r3, [pc, #64]	; (10c9c <QSPI_N25Q256_exit_xip+0xa8>)
   10c5a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   10c5c:	2100      	movs	r1, #0
   10c5e:	202a      	movs	r0, #42	; 0x2a
   10c60:	4b0d      	ldr	r3, [pc, #52]	; (10c98 <QSPI_N25Q256_exit_xip+0xa4>)
   10c62:	4798      	blx	r3
		delay_us(1);
   10c64:	2001      	movs	r0, #1
   10c66:	4b0d      	ldr	r3, [pc, #52]	; (10c9c <QSPI_N25Q256_exit_xip+0xa8>)
   10c68:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   10c6a:	687b      	ldr	r3, [r7, #4]
   10c6c:	3301      	adds	r3, #1
   10c6e:	607b      	str	r3, [r7, #4]
   10c70:	687b      	ldr	r3, [r7, #4]
   10c72:	2b06      	cmp	r3, #6
   10c74:	ddeb      	ble.n	10c4e <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
   10c76:	2101      	movs	r1, #1
   10c78:	202b      	movs	r0, #43	; 0x2b
   10c7a:	4b07      	ldr	r3, [pc, #28]	; (10c98 <QSPI_N25Q256_exit_xip+0xa4>)
   10c7c:	4798      	blx	r3
	delay_us(1);
   10c7e:	2001      	movs	r0, #1
   10c80:	4b06      	ldr	r3, [pc, #24]	; (10c9c <QSPI_N25Q256_exit_xip+0xa8>)
   10c82:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   10c84:	4b06      	ldr	r3, [pc, #24]	; (10ca0 <QSPI_N25Q256_exit_xip+0xac>)
   10c86:	4798      	blx	r3
}
   10c88:	bf00      	nop
   10c8a:	3708      	adds	r7, #8
   10c8c:	46bd      	mov	sp, r7
   10c8e:	bd80      	pop	{r7, pc}
   10c90:	00010b65 	.word	0x00010b65
   10c94:	00010b85 	.word	0x00010b85
   10c98:	00010bbd 	.word	0x00010bbd
   10c9c:	000067a1 	.word	0x000067a1
   10ca0:	000055f1 	.word	0x000055f1

00010ca4 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
   10ca4:	b598      	push	{r3, r4, r7, lr}
   10ca6:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
   10ca8:	4806      	ldr	r0, [pc, #24]	; (10cc4 <spi_nor_flash_init+0x20>)
   10caa:	4b07      	ldr	r3, [pc, #28]	; (10cc8 <spi_nor_flash_init+0x24>)
   10cac:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
   10cae:	2300      	movs	r3, #0
   10cb0:	4a06      	ldr	r2, [pc, #24]	; (10ccc <spi_nor_flash_init+0x28>)
   10cb2:	4904      	ldr	r1, [pc, #16]	; (10cc4 <spi_nor_flash_init+0x20>)
   10cb4:	4806      	ldr	r0, [pc, #24]	; (10cd0 <spi_nor_flash_init+0x2c>)
   10cb6:	4c07      	ldr	r4, [pc, #28]	; (10cd4 <spi_nor_flash_init+0x30>)
   10cb8:	47a0      	blx	r4
   10cba:	4602      	mov	r2, r0
   10cbc:	4b06      	ldr	r3, [pc, #24]	; (10cd8 <spi_nor_flash_init+0x34>)
   10cbe:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
   10cc0:	bf00      	nop
   10cc2:	bd98      	pop	{r3, r4, r7, pc}
   10cc4:	2000a7c0 	.word	0x2000a7c0
   10cc8:	00006fed 	.word	0x00006fed
   10ccc:	00010bf5 	.word	0x00010bf5
   10cd0:	20008db8 	.word	0x20008db8
   10cd4:	00011111 	.word	0x00011111
   10cd8:	2000a9e0 	.word	0x2000a9e0

00010cdc <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
   10cdc:	b580      	push	{r7, lr}
   10cde:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
   10ce0:	4805      	ldr	r0, [pc, #20]	; (10cf8 <cdc_device_acm_init+0x1c>)
   10ce2:	4b06      	ldr	r3, [pc, #24]	; (10cfc <cdc_device_acm_init+0x20>)
   10ce4:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
   10ce6:	4b06      	ldr	r3, [pc, #24]	; (10d00 <cdc_device_acm_init+0x24>)
   10ce8:	4798      	blx	r3

	usbdc_start(single_desc);
   10cea:	4806      	ldr	r0, [pc, #24]	; (10d04 <cdc_device_acm_init+0x28>)
   10cec:	4b06      	ldr	r3, [pc, #24]	; (10d08 <cdc_device_acm_init+0x2c>)
   10cee:	4798      	blx	r3
	usbdc_attach();
   10cf0:	4b06      	ldr	r3, [pc, #24]	; (10d0c <cdc_device_acm_init+0x30>)
   10cf2:	4798      	blx	r3
}
   10cf4:	bf00      	nop
   10cf6:	bd80      	pop	{r7, pc}
   10cf8:	20008e08 	.word	0x20008e08
   10cfc:	00012839 	.word	0x00012839
   10d00:	00011ab1 	.word	0x00011ab1
   10d04:	20000234 	.word	0x20000234
   10d08:	000128d5 	.word	0x000128d5
   10d0c:	00012925 	.word	0x00012925

00010d10 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
   10d10:	b580      	push	{r7, lr}
   10d12:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
   10d14:	4b01      	ldr	r3, [pc, #4]	; (10d1c <usb_init+0xc>)
   10d16:	4798      	blx	r3
}
   10d18:	bf00      	nop
   10d1a:	bd80      	pop	{r7, pc}
   10d1c:	00010cdd 	.word	0x00010cdd

00010d20 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
   10d20:	b480      	push	{r7}
   10d22:	b085      	sub	sp, #20
   10d24:	af00      	add	r7, sp, #0
   10d26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   10d28:	f3ef 8310 	mrs	r3, PRIMASK
   10d2c:	60fb      	str	r3, [r7, #12]
  return(result);
   10d2e:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
   10d30:	687b      	ldr	r3, [r7, #4]
   10d32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   10d34:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   10d36:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
   10d3a:	bf00      	nop
   10d3c:	3714      	adds	r7, #20
   10d3e:	46bd      	mov	sp, r7
   10d40:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d44:	4770      	bx	lr

00010d46 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
   10d46:	b480      	push	{r7}
   10d48:	b085      	sub	sp, #20
   10d4a:	af00      	add	r7, sp, #0
   10d4c:	6078      	str	r0, [r7, #4]
   10d4e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
   10d52:	687b      	ldr	r3, [r7, #4]
   10d54:	681b      	ldr	r3, [r3, #0]
   10d56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   10d58:	68fb      	ldr	r3, [r7, #12]
   10d5a:	f383 8810 	msr	PRIMASK, r3
}
   10d5e:	bf00      	nop
   10d60:	3714      	adds	r7, #20
   10d62:	46bd      	mov	sp, r7
   10d64:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d68:	4770      	bx	lr
	...

00010d6c <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
   10d6c:	b580      	push	{r7, lr}
   10d6e:	b08c      	sub	sp, #48	; 0x30
   10d70:	af00      	add	r7, sp, #0
   10d72:	6078      	str	r0, [r7, #4]
   10d74:	460b      	mov	r3, r1
   10d76:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10d78:	687b      	ldr	r3, [r7, #4]
   10d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10d7c:	687b      	ldr	r3, [r7, #4]
   10d7e:	681b      	ldr	r3, [r3, #0]
   10d80:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
   10d82:	f107 030c 	add.w	r3, r7, #12
   10d86:	2200      	movs	r2, #0
   10d88:	601a      	str	r2, [r3, #0]
   10d8a:	605a      	str	r2, [r3, #4]
   10d8c:	609a      	str	r2, [r3, #8]
   10d8e:	60da      	str	r2, [r3, #12]
   10d90:	611a      	str	r2, [r3, #16]
   10d92:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   10d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10d96:	7b1b      	ldrb	r3, [r3, #12]
   10d98:	2b00      	cmp	r3, #0
   10d9a:	d001      	beq.n	10da0 <n25q256a_xip_confirm+0x34>
   10d9c:	2206      	movs	r2, #6
   10d9e:	e000      	b.n	10da2 <n25q256a_xip_confirm+0x36>
   10da0:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   10da2:	7b3b      	ldrb	r3, [r7, #12]
   10da4:	f362 0302 	bfi	r3, r2, #0, #3
   10da8:	733b      	strb	r3, [r7, #12]
   10daa:	7b3b      	ldrb	r3, [r7, #12]
   10dac:	f043 0310 	orr.w	r3, r3, #16
   10db0:	733b      	strb	r3, [r7, #12]
   10db2:	7b3b      	ldrb	r3, [r7, #12]
   10db4:	f043 0320 	orr.w	r3, r3, #32
   10db8:	733b      	strb	r3, [r7, #12]
   10dba:	7b3b      	ldrb	r3, [r7, #12]
   10dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10dc0:	733b      	strb	r3, [r7, #12]
   10dc2:	7b3b      	ldrb	r3, [r7, #12]
   10dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10dc8:	733b      	strb	r3, [r7, #12]
   10dca:	7b7b      	ldrb	r3, [r7, #13]
   10dcc:	f043 0303 	orr.w	r3, r3, #3
   10dd0:	737b      	strb	r3, [r7, #13]
   10dd2:	7b7b      	ldrb	r3, [r7, #13]
   10dd4:	2201      	movs	r2, #1
   10dd6:	f362 1305 	bfi	r3, r2, #4, #2
   10dda:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
   10ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10dde:	7b1b      	ldrb	r3, [r3, #12]
   10de0:	2b00      	cmp	r3, #0
   10de2:	d001      	beq.n	10de8 <n25q256a_xip_confirm+0x7c>
   10de4:	2208      	movs	r2, #8
   10de6:	e000      	b.n	10dea <n25q256a_xip_confirm+0x7e>
   10de8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   10dea:	7bbb      	ldrb	r3, [r7, #14]
   10dec:	f362 0304 	bfi	r3, r2, #0, #5
   10df0:	73bb      	strb	r3, [r7, #14]
   10df2:	230b      	movs	r3, #11
   10df4:	743b      	strb	r3, [r7, #16]
   10df6:	78fb      	ldrb	r3, [r7, #3]
   10df8:	2b00      	cmp	r3, #0
   10dfa:	d001      	beq.n	10e00 <n25q256a_xip_confirm+0x94>
   10dfc:	2300      	movs	r3, #0
   10dfe:	e000      	b.n	10e02 <n25q256a_xip_confirm+0x96>
   10e00:	23ff      	movs	r3, #255	; 0xff
   10e02:	747b      	strb	r3, [r7, #17]
   10e04:	2301      	movs	r3, #1
   10e06:	61bb      	str	r3, [r7, #24]
   10e08:	f107 0327 	add.w	r3, r7, #39	; 0x27
   10e0c:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
   10e0e:	f107 030c 	add.w	r3, r7, #12
   10e12:	4619      	mov	r1, r3
   10e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10e16:	4b07      	ldr	r3, [pc, #28]	; (10e34 <n25q256a_xip_confirm+0xc8>)
   10e18:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
   10e1a:	78fb      	ldrb	r3, [r7, #3]
   10e1c:	2b00      	cmp	r3, #0
   10e1e:	d001      	beq.n	10e24 <n25q256a_xip_confirm+0xb8>
   10e20:	2202      	movs	r2, #2
   10e22:	e000      	b.n	10e26 <n25q256a_xip_confirm+0xba>
   10e24:	2201      	movs	r2, #1
   10e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e28:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   10e2a:	2300      	movs	r3, #0
}
   10e2c:	4618      	mov	r0, r3
   10e2e:	3730      	adds	r7, #48	; 0x30
   10e30:	46bd      	mov	sp, r7
   10e32:	bd80      	pop	{r7, pc}
   10e34:	00007065 	.word	0x00007065

00010e38 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
   10e38:	b580      	push	{r7, lr}
   10e3a:	b08c      	sub	sp, #48	; 0x30
   10e3c:	af00      	add	r7, sp, #0
   10e3e:	6078      	str	r0, [r7, #4]
   10e40:	460b      	mov	r3, r1
   10e42:	70fb      	strb	r3, [r7, #3]
   10e44:	4613      	mov	r3, r2
   10e46:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
   10e48:	2300      	movs	r3, #0
   10e4a:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
   10e4c:	687b      	ldr	r3, [r7, #4]
   10e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
   10e50:	687b      	ldr	r3, [r7, #4]
   10e52:	681b      	ldr	r3, [r3, #0]
   10e54:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
   10e56:	f107 030c 	add.w	r3, r7, #12
   10e5a:	2200      	movs	r2, #0
   10e5c:	601a      	str	r2, [r3, #0]
   10e5e:	605a      	str	r2, [r3, #4]
   10e60:	609a      	str	r2, [r3, #8]
   10e62:	60da      	str	r2, [r3, #12]
   10e64:	611a      	str	r2, [r3, #16]
   10e66:	615a      	str	r2, [r3, #20]
   10e68:	78fb      	ldrb	r3, [r7, #3]
   10e6a:	f003 0307 	and.w	r3, r3, #7
   10e6e:	b2da      	uxtb	r2, r3
   10e70:	7b3b      	ldrb	r3, [r7, #12]
   10e72:	f362 0302 	bfi	r3, r2, #0, #3
   10e76:	733b      	strb	r3, [r7, #12]
   10e78:	7b3b      	ldrb	r3, [r7, #12]
   10e7a:	f043 0310 	orr.w	r3, r3, #16
   10e7e:	733b      	strb	r3, [r7, #12]
   10e80:	7b3b      	ldrb	r3, [r7, #12]
   10e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10e86:	733b      	strb	r3, [r7, #12]
   10e88:	78bb      	ldrb	r3, [r7, #2]
   10e8a:	743b      	strb	r3, [r7, #16]
   10e8c:	2301      	movs	r3, #1
   10e8e:	61bb      	str	r3, [r7, #24]
   10e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
   10e94:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
   10e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e98:	7b5b      	ldrb	r3, [r3, #13]
   10e9a:	2b00      	cmp	r3, #0
   10e9c:	d003      	beq.n	10ea6 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
   10e9e:	2100      	movs	r1, #0
   10ea0:	6878      	ldr	r0, [r7, #4]
   10ea2:	4b0a      	ldr	r3, [pc, #40]	; (10ecc <n25q256a_read_reg+0x94>)
   10ea4:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   10ea6:	f107 030c 	add.w	r3, r7, #12
   10eaa:	4619      	mov	r1, r3
   10eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10eae:	4b08      	ldr	r3, [pc, #32]	; (10ed0 <n25q256a_read_reg+0x98>)
   10eb0:	4798      	blx	r3
	if (n25q->xip_mode) {
   10eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10eb4:	7b5b      	ldrb	r3, [r3, #13]
   10eb6:	2b00      	cmp	r3, #0
   10eb8:	d003      	beq.n	10ec2 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
   10eba:	2101      	movs	r1, #1
   10ebc:	6878      	ldr	r0, [r7, #4]
   10ebe:	4b03      	ldr	r3, [pc, #12]	; (10ecc <n25q256a_read_reg+0x94>)
   10ec0:	4798      	blx	r3
	}
	return status;
   10ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   10ec4:	4618      	mov	r0, r3
   10ec6:	3730      	adds	r7, #48	; 0x30
   10ec8:	46bd      	mov	sp, r7
   10eca:	bd80      	pop	{r7, pc}
   10ecc:	00010d6d 	.word	0x00010d6d
   10ed0:	00007065 	.word	0x00007065

00010ed4 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
   10ed4:	b580      	push	{r7, lr}
   10ed6:	b08c      	sub	sp, #48	; 0x30
   10ed8:	af00      	add	r7, sp, #0
   10eda:	60f8      	str	r0, [r7, #12]
   10edc:	607b      	str	r3, [r7, #4]
   10ede:	460b      	mov	r3, r1
   10ee0:	72fb      	strb	r3, [r7, #11]
   10ee2:	4613      	mov	r3, r2
   10ee4:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10ee6:	68fb      	ldr	r3, [r7, #12]
   10ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10eea:	68fb      	ldr	r3, [r7, #12]
   10eec:	681b      	ldr	r3, [r3, #0]
   10eee:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
   10ef0:	f107 0310 	add.w	r3, r7, #16
   10ef4:	2200      	movs	r2, #0
   10ef6:	601a      	str	r2, [r3, #0]
   10ef8:	605a      	str	r2, [r3, #4]
   10efa:	609a      	str	r2, [r3, #8]
   10efc:	60da      	str	r2, [r3, #12]
   10efe:	611a      	str	r2, [r3, #16]
   10f00:	615a      	str	r2, [r3, #20]
   10f02:	7afb      	ldrb	r3, [r7, #11]
   10f04:	f003 0307 	and.w	r3, r3, #7
   10f08:	b2da      	uxtb	r2, r3
   10f0a:	7c3b      	ldrb	r3, [r7, #16]
   10f0c:	f362 0302 	bfi	r3, r2, #0, #3
   10f10:	743b      	strb	r3, [r7, #16]
   10f12:	7c3b      	ldrb	r3, [r7, #16]
   10f14:	f043 0310 	orr.w	r3, r3, #16
   10f18:	743b      	strb	r3, [r7, #16]
   10f1a:	7c3b      	ldrb	r3, [r7, #16]
   10f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10f20:	743b      	strb	r3, [r7, #16]
   10f22:	7c7b      	ldrb	r3, [r7, #17]
   10f24:	2202      	movs	r2, #2
   10f26:	f362 1305 	bfi	r3, r2, #4, #2
   10f2a:	747b      	strb	r3, [r7, #17]
   10f2c:	7abb      	ldrb	r3, [r7, #10]
   10f2e:	753b      	strb	r3, [r7, #20]
   10f30:	2301      	movs	r3, #1
   10f32:	61fb      	str	r3, [r7, #28]
   10f34:	1d3b      	adds	r3, r7, #4
   10f36:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
   10f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f3a:	7b5b      	ldrb	r3, [r3, #13]
   10f3c:	2b00      	cmp	r3, #0
   10f3e:	d003      	beq.n	10f48 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
   10f40:	2100      	movs	r1, #0
   10f42:	68f8      	ldr	r0, [r7, #12]
   10f44:	4b09      	ldr	r3, [pc, #36]	; (10f6c <n25q256a_write_reg+0x98>)
   10f46:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   10f48:	f107 0310 	add.w	r3, r7, #16
   10f4c:	4619      	mov	r1, r3
   10f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10f50:	4b07      	ldr	r3, [pc, #28]	; (10f70 <n25q256a_write_reg+0x9c>)
   10f52:	4798      	blx	r3
	if (n25q->xip_mode) {
   10f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f56:	7b5b      	ldrb	r3, [r3, #13]
   10f58:	2b00      	cmp	r3, #0
   10f5a:	d003      	beq.n	10f64 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
   10f5c:	2101      	movs	r1, #1
   10f5e:	68f8      	ldr	r0, [r7, #12]
   10f60:	4b02      	ldr	r3, [pc, #8]	; (10f6c <n25q256a_write_reg+0x98>)
   10f62:	4798      	blx	r3
	}
}
   10f64:	bf00      	nop
   10f66:	3730      	adds	r7, #48	; 0x30
   10f68:	46bd      	mov	sp, r7
   10f6a:	bd80      	pop	{r7, pc}
   10f6c:	00010d6d 	.word	0x00010d6d
   10f70:	00007065 	.word	0x00007065

00010f74 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
   10f74:	b580      	push	{r7, lr}
   10f76:	b090      	sub	sp, #64	; 0x40
   10f78:	af00      	add	r7, sp, #0
   10f7a:	6078      	str	r0, [r7, #4]
   10f7c:	460b      	mov	r3, r1
   10f7e:	70fb      	strb	r3, [r7, #3]
   10f80:	4613      	mov	r3, r2
   10f82:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10f84:	687b      	ldr	r3, [r7, #4]
   10f86:	681b      	ldr	r3, [r3, #0]
   10f88:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
   10f8a:	78bb      	ldrb	r3, [r7, #2]
   10f8c:	2b00      	cmp	r3, #0
   10f8e:	d001      	beq.n	10f94 <n25q256a_write_enable+0x20>
   10f90:	2306      	movs	r3, #6
   10f92:	e000      	b.n	10f96 <n25q256a_write_enable+0x22>
   10f94:	2304      	movs	r3, #4
   10f96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
   10f9a:	f107 0320 	add.w	r3, r7, #32
   10f9e:	2200      	movs	r2, #0
   10fa0:	601a      	str	r2, [r3, #0]
   10fa2:	605a      	str	r2, [r3, #4]
   10fa4:	609a      	str	r2, [r3, #8]
   10fa6:	60da      	str	r2, [r3, #12]
   10fa8:	611a      	str	r2, [r3, #16]
   10faa:	615a      	str	r2, [r3, #20]
   10fac:	78fb      	ldrb	r3, [r7, #3]
   10fae:	f003 0307 	and.w	r3, r3, #7
   10fb2:	b2da      	uxtb	r2, r3
   10fb4:	f897 3020 	ldrb.w	r3, [r7, #32]
   10fb8:	f362 0302 	bfi	r3, r2, #0, #3
   10fbc:	f887 3020 	strb.w	r3, [r7, #32]
   10fc0:	f897 3020 	ldrb.w	r3, [r7, #32]
   10fc4:	f043 0310 	orr.w	r3, r3, #16
   10fc8:	f887 3020 	strb.w	r3, [r7, #32]
   10fcc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   10fd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
   10fd4:	f107 0308 	add.w	r3, r7, #8
   10fd8:	2200      	movs	r2, #0
   10fda:	601a      	str	r2, [r3, #0]
   10fdc:	605a      	str	r2, [r3, #4]
   10fde:	609a      	str	r2, [r3, #8]
   10fe0:	60da      	str	r2, [r3, #12]
   10fe2:	611a      	str	r2, [r3, #16]
   10fe4:	615a      	str	r2, [r3, #20]
   10fe6:	78fb      	ldrb	r3, [r7, #3]
   10fe8:	f003 0307 	and.w	r3, r3, #7
   10fec:	b2da      	uxtb	r2, r3
   10fee:	7a3b      	ldrb	r3, [r7, #8]
   10ff0:	f362 0302 	bfi	r3, r2, #0, #3
   10ff4:	723b      	strb	r3, [r7, #8]
   10ff6:	7a3b      	ldrb	r3, [r7, #8]
   10ff8:	f043 0310 	orr.w	r3, r3, #16
   10ffc:	723b      	strb	r3, [r7, #8]
   10ffe:	7a3b      	ldrb	r3, [r7, #8]
   11000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11004:	723b      	strb	r3, [r7, #8]
   11006:	2305      	movs	r3, #5
   11008:	733b      	strb	r3, [r7, #12]
   1100a:	2301      	movs	r3, #1
   1100c:	617b      	str	r3, [r7, #20]
   1100e:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   11012:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
   11014:	f107 0320 	add.w	r3, r7, #32
   11018:	4619      	mov	r1, r3
   1101a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1101c:	4b08      	ldr	r3, [pc, #32]	; (11040 <n25q256a_write_enable+0xcc>)
   1101e:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
   11020:	f107 0308 	add.w	r3, r7, #8
   11024:	4619      	mov	r1, r3
   11026:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   11028:	4b05      	ldr	r3, [pc, #20]	; (11040 <n25q256a_write_enable+0xcc>)
   1102a:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
   1102c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   11030:	f003 0302 	and.w	r3, r3, #2
   11034:	2b00      	cmp	r3, #0
   11036:	d0ed      	beq.n	11014 <n25q256a_write_enable+0xa0>
}
   11038:	bf00      	nop
   1103a:	3740      	adds	r7, #64	; 0x40
   1103c:	46bd      	mov	sp, r7
   1103e:	bd80      	pop	{r7, pc}
   11040:	00007065 	.word	0x00007065

00011044 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
   11044:	b590      	push	{r4, r7, lr}
   11046:	b087      	sub	sp, #28
   11048:	af00      	add	r7, sp, #0
   1104a:	6078      	str	r0, [r7, #4]
   1104c:	460b      	mov	r3, r1
   1104e:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
   11050:	687b      	ldr	r3, [r7, #4]
   11052:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   11054:	68fb      	ldr	r3, [r7, #12]
   11056:	7b1b      	ldrb	r3, [r3, #12]
   11058:	2b00      	cmp	r3, #0
   1105a:	d001      	beq.n	11060 <n25q256a_switch_mode+0x1c>
   1105c:	2306      	movs	r3, #6
   1105e:	e000      	b.n	11062 <n25q256a_switch_mode+0x1e>
   11060:	2300      	movs	r3, #0
   11062:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   11064:	7afb      	ldrb	r3, [r7, #11]
   11066:	2265      	movs	r2, #101	; 0x65
   11068:	4619      	mov	r1, r3
   1106a:	6878      	ldr	r0, [r7, #4]
   1106c:	4b25      	ldr	r3, [pc, #148]	; (11104 <n25q256a_switch_mode+0xc0>)
   1106e:	4798      	blx	r3
   11070:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
   11072:	2300      	movs	r3, #0
   11074:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
   11076:	68fb      	ldr	r3, [r7, #12]
   11078:	7b1b      	ldrb	r3, [r3, #12]
   1107a:	78fa      	ldrb	r2, [r7, #3]
   1107c:	429a      	cmp	r2, r3
   1107e:	d03d      	beq.n	110fc <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
   11080:	78fb      	ldrb	r3, [r7, #3]
   11082:	2b00      	cmp	r3, #0
   11084:	d00b      	beq.n	1109e <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
   11086:	697b      	ldr	r3, [r7, #20]
   11088:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1108c:	2b00      	cmp	r3, #0
   1108e:	d011      	beq.n	110b4 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
   11090:	697b      	ldr	r3, [r7, #20]
   11092:	f003 031f 	and.w	r3, r3, #31
   11096:	617b      	str	r3, [r7, #20]
			modify = 1;
   11098:	2301      	movs	r3, #1
   1109a:	74fb      	strb	r3, [r7, #19]
   1109c:	e00a      	b.n	110b4 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
   1109e:	697b      	ldr	r3, [r7, #20]
   110a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   110a4:	2b00      	cmp	r3, #0
   110a6:	d105      	bne.n	110b4 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
   110a8:	697b      	ldr	r3, [r7, #20]
   110aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   110ae:	617b      	str	r3, [r7, #20]
			modify = 1;
   110b0:	2301      	movs	r3, #1
   110b2:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
   110b4:	7cfb      	ldrb	r3, [r7, #19]
   110b6:	2b00      	cmp	r3, #0
   110b8:	d021      	beq.n	110fe <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
   110ba:	68fb      	ldr	r3, [r7, #12]
   110bc:	78fa      	ldrb	r2, [r7, #3]
   110be:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
   110c0:	7afb      	ldrb	r3, [r7, #11]
   110c2:	2201      	movs	r2, #1
   110c4:	4619      	mov	r1, r3
   110c6:	6878      	ldr	r0, [r7, #4]
   110c8:	4b0f      	ldr	r3, [pc, #60]	; (11108 <n25q256a_switch_mode+0xc4>)
   110ca:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
   110cc:	7af9      	ldrb	r1, [r7, #11]
   110ce:	697b      	ldr	r3, [r7, #20]
   110d0:	2261      	movs	r2, #97	; 0x61
   110d2:	6878      	ldr	r0, [r7, #4]
   110d4:	4c0d      	ldr	r4, [pc, #52]	; (1110c <n25q256a_switch_mode+0xc8>)
   110d6:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   110d8:	78fb      	ldrb	r3, [r7, #3]
   110da:	2b00      	cmp	r3, #0
   110dc:	d001      	beq.n	110e2 <n25q256a_switch_mode+0x9e>
   110de:	2306      	movs	r3, #6
   110e0:	e000      	b.n	110e4 <n25q256a_switch_mode+0xa0>
   110e2:	2300      	movs	r3, #0
   110e4:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   110e6:	7afb      	ldrb	r3, [r7, #11]
   110e8:	2265      	movs	r2, #101	; 0x65
   110ea:	4619      	mov	r1, r3
   110ec:	6878      	ldr	r0, [r7, #4]
   110ee:	4b05      	ldr	r3, [pc, #20]	; (11104 <n25q256a_switch_mode+0xc0>)
   110f0:	4798      	blx	r3
   110f2:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
   110f4:	68fb      	ldr	r3, [r7, #12]
   110f6:	78fa      	ldrb	r2, [r7, #3]
   110f8:	731a      	strb	r2, [r3, #12]
   110fa:	e000      	b.n	110fe <n25q256a_switch_mode+0xba>
		return;
   110fc:	bf00      	nop
	}
}
   110fe:	371c      	adds	r7, #28
   11100:	46bd      	mov	sp, r7
   11102:	bd90      	pop	{r4, r7, pc}
   11104:	00010e39 	.word	0x00010e39
   11108:	00010f75 	.word	0x00010f75
   1110c:	00010ed5 	.word	0x00010ed5

00011110 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
   11110:	b580      	push	{r7, lr}
   11112:	b086      	sub	sp, #24
   11114:	af00      	add	r7, sp, #0
   11116:	60f8      	str	r0, [r7, #12]
   11118:	60b9      	str	r1, [r7, #8]
   1111a:	607a      	str	r2, [r7, #4]
   1111c:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
   1111e:	68fb      	ldr	r3, [r7, #12]
   11120:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
   11122:	4a0c      	ldr	r2, [pc, #48]	; (11154 <n25q256a_construct+0x44>)
   11124:	68b9      	ldr	r1, [r7, #8]
   11126:	68f8      	ldr	r0, [r7, #12]
   11128:	4b0b      	ldr	r3, [pc, #44]	; (11158 <n25q256a_construct+0x48>)
   1112a:	4798      	blx	r3
	n25q->quad_mode    = 0;
   1112c:	697b      	ldr	r3, [r7, #20]
   1112e:	2200      	movs	r2, #0
   11130:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
   11132:	697b      	ldr	r3, [r7, #20]
   11134:	2200      	movs	r2, #0
   11136:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
   11138:	697b      	ldr	r3, [r7, #20]
   1113a:	687a      	ldr	r2, [r7, #4]
   1113c:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
   1113e:	78fb      	ldrb	r3, [r7, #3]
   11140:	4619      	mov	r1, r3
   11142:	68f8      	ldr	r0, [r7, #12]
   11144:	4b05      	ldr	r3, [pc, #20]	; (1115c <n25q256a_construct+0x4c>)
   11146:	4798      	blx	r3
	return me;
   11148:	68fb      	ldr	r3, [r7, #12]
}
   1114a:	4618      	mov	r0, r3
   1114c:	3718      	adds	r7, #24
   1114e:	46bd      	mov	sp, r7
   11150:	bd80      	pop	{r7, pc}
   11152:	bf00      	nop
   11154:	00020dcc 	.word	0x00020dcc
   11158:	000115ed 	.word	0x000115ed
   1115c:	00011045 	.word	0x00011045

00011160 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   11160:	b580      	push	{r7, lr}
   11162:	b08c      	sub	sp, #48	; 0x30
   11164:	af00      	add	r7, sp, #0
   11166:	60f8      	str	r0, [r7, #12]
   11168:	60b9      	str	r1, [r7, #8]
   1116a:	607a      	str	r2, [r7, #4]
   1116c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   1116e:	68fb      	ldr	r3, [r7, #12]
   11170:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   11172:	68fb      	ldr	r3, [r7, #12]
   11174:	681b      	ldr	r3, [r3, #0]
   11176:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
   11178:	f107 0310 	add.w	r3, r7, #16
   1117c:	2200      	movs	r2, #0
   1117e:	601a      	str	r2, [r3, #0]
   11180:	605a      	str	r2, [r3, #4]
   11182:	609a      	str	r2, [r3, #8]
   11184:	60da      	str	r2, [r3, #12]
   11186:	611a      	str	r2, [r3, #16]
   11188:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   1118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1118c:	7b1b      	ldrb	r3, [r3, #12]
   1118e:	2b00      	cmp	r3, #0
   11190:	d001      	beq.n	11196 <n25q256a_read+0x36>
   11192:	2206      	movs	r2, #6
   11194:	e000      	b.n	11198 <n25q256a_read+0x38>
   11196:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
   11198:	7c3b      	ldrb	r3, [r7, #16]
   1119a:	f362 0302 	bfi	r3, r2, #0, #3
   1119e:	743b      	strb	r3, [r7, #16]
   111a0:	7c3b      	ldrb	r3, [r7, #16]
   111a2:	f043 0310 	orr.w	r3, r3, #16
   111a6:	743b      	strb	r3, [r7, #16]
   111a8:	7c3b      	ldrb	r3, [r7, #16]
   111aa:	f043 0320 	orr.w	r3, r3, #32
   111ae:	743b      	strb	r3, [r7, #16]
   111b0:	7c3b      	ldrb	r3, [r7, #16]
   111b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   111b6:	743b      	strb	r3, [r7, #16]
   111b8:	7c7b      	ldrb	r3, [r7, #17]
   111ba:	2201      	movs	r2, #1
   111bc:	f362 1305 	bfi	r3, r2, #4, #2
   111c0:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
   111c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   111c4:	7b1b      	ldrb	r3, [r3, #12]
   111c6:	2b00      	cmp	r3, #0
   111c8:	d001      	beq.n	111ce <n25q256a_read+0x6e>
   111ca:	220a      	movs	r2, #10
   111cc:	e000      	b.n	111d0 <n25q256a_read+0x70>
   111ce:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
   111d0:	7cbb      	ldrb	r3, [r7, #18]
   111d2:	f362 0304 	bfi	r3, r2, #0, #5
   111d6:	74bb      	strb	r3, [r7, #18]
   111d8:	230b      	movs	r3, #11
   111da:	753b      	strb	r3, [r7, #20]
   111dc:	687b      	ldr	r3, [r7, #4]
   111de:	61bb      	str	r3, [r7, #24]
   111e0:	683b      	ldr	r3, [r7, #0]
   111e2:	61fb      	str	r3, [r7, #28]
   111e4:	68bb      	ldr	r3, [r7, #8]
   111e6:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
   111e8:	f107 0310 	add.w	r3, r7, #16
   111ec:	4619      	mov	r1, r3
   111ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   111f0:	4b03      	ldr	r3, [pc, #12]	; (11200 <n25q256a_read+0xa0>)
   111f2:	4798      	blx	r3
	return ERR_NONE;
   111f4:	2300      	movs	r3, #0
}
   111f6:	4618      	mov	r0, r3
   111f8:	3730      	adds	r7, #48	; 0x30
   111fa:	46bd      	mov	sp, r7
   111fc:	bd80      	pop	{r7, pc}
   111fe:	bf00      	nop
   11200:	00007065 	.word	0x00007065

00011204 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   11204:	b580      	push	{r7, lr}
   11206:	b08c      	sub	sp, #48	; 0x30
   11208:	af00      	add	r7, sp, #0
   1120a:	60f8      	str	r0, [r7, #12]
   1120c:	60b9      	str	r1, [r7, #8]
   1120e:	607a      	str	r2, [r7, #4]
   11210:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   11212:	68fb      	ldr	r3, [r7, #12]
   11214:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   11216:	68fb      	ldr	r3, [r7, #12]
   11218:	681b      	ldr	r3, [r3, #0]
   1121a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
   1121c:	f107 0310 	add.w	r3, r7, #16
   11220:	2200      	movs	r2, #0
   11222:	601a      	str	r2, [r3, #0]
   11224:	605a      	str	r2, [r3, #4]
   11226:	609a      	str	r2, [r3, #8]
   11228:	60da      	str	r2, [r3, #12]
   1122a:	611a      	str	r2, [r3, #16]
   1122c:	615a      	str	r2, [r3, #20]
   1122e:	7c3b      	ldrb	r3, [r7, #16]
   11230:	f043 0310 	orr.w	r3, r3, #16
   11234:	743b      	strb	r3, [r7, #16]
   11236:	7c3b      	ldrb	r3, [r7, #16]
   11238:	f043 0320 	orr.w	r3, r3, #32
   1123c:	743b      	strb	r3, [r7, #16]
   1123e:	7c3b      	ldrb	r3, [r7, #16]
   11240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11244:	743b      	strb	r3, [r7, #16]
   11246:	7c7b      	ldrb	r3, [r7, #17]
   11248:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1124c:	747b      	strb	r3, [r7, #17]
   1124e:	2302      	movs	r3, #2
   11250:	753b      	strb	r3, [r7, #20]
   11252:	687b      	ldr	r3, [r7, #4]
   11254:	61bb      	str	r3, [r7, #24]
   11256:	683b      	ldr	r3, [r7, #0]
   11258:	61fb      	str	r3, [r7, #28]
   1125a:	68bb      	ldr	r3, [r7, #8]
   1125c:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   1125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11260:	7b1b      	ldrb	r3, [r3, #12]
   11262:	2b00      	cmp	r3, #0
   11264:	d001      	beq.n	1126a <n25q256a_write+0x66>
   11266:	2206      	movs	r2, #6
   11268:	e000      	b.n	1126c <n25q256a_write+0x68>
   1126a:	2200      	movs	r2, #0
   1126c:	7c3b      	ldrb	r3, [r7, #16]
   1126e:	f362 0302 	bfi	r3, r2, #0, #3
   11272:	743b      	strb	r3, [r7, #16]
	while (length) {
   11274:	e035      	b.n	112e2 <n25q256a_write+0xde>
		cmd.address = address;
   11276:	687b      	ldr	r3, [r7, #4]
   11278:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
   1127a:	683b      	ldr	r3, [r7, #0]
   1127c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   11280:	d802      	bhi.n	11288 <n25q256a_write+0x84>
			cmd.buf_len = length;
   11282:	683b      	ldr	r3, [r7, #0]
   11284:	61fb      	str	r3, [r7, #28]
   11286:	e002      	b.n	1128e <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
   11288:	f44f 7380 	mov.w	r3, #256	; 0x100
   1128c:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   1128e:	7c3b      	ldrb	r3, [r7, #16]
   11290:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11294:	b2db      	uxtb	r3, r3
   11296:	2201      	movs	r2, #1
   11298:	4619      	mov	r1, r3
   1129a:	68f8      	ldr	r0, [r7, #12]
   1129c:	4b19      	ldr	r3, [pc, #100]	; (11304 <n25q256a_write+0x100>)
   1129e:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
   112a0:	f107 0310 	add.w	r3, r7, #16
   112a4:	4619      	mov	r1, r3
   112a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   112a8:	4b17      	ldr	r3, [pc, #92]	; (11308 <n25q256a_write+0x104>)
   112aa:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   112ac:	bf00      	nop
   112ae:	7c3b      	ldrb	r3, [r7, #16]
   112b0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   112b4:	b2db      	uxtb	r3, r3
   112b6:	2270      	movs	r2, #112	; 0x70
   112b8:	4619      	mov	r1, r3
   112ba:	68f8      	ldr	r0, [r7, #12]
   112bc:	4b13      	ldr	r3, [pc, #76]	; (1130c <n25q256a_write+0x108>)
   112be:	4798      	blx	r3
   112c0:	4603      	mov	r3, r0
   112c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   112c6:	2b00      	cmp	r3, #0
   112c8:	d0f1      	beq.n	112ae <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
   112ca:	6a3a      	ldr	r2, [r7, #32]
   112cc:	69fb      	ldr	r3, [r7, #28]
   112ce:	4413      	add	r3, r2
   112d0:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
   112d2:	69fb      	ldr	r3, [r7, #28]
   112d4:	683a      	ldr	r2, [r7, #0]
   112d6:	1ad3      	subs	r3, r2, r3
   112d8:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
   112da:	69fb      	ldr	r3, [r7, #28]
   112dc:	687a      	ldr	r2, [r7, #4]
   112de:	4413      	add	r3, r2
   112e0:	607b      	str	r3, [r7, #4]
	while (length) {
   112e2:	683b      	ldr	r3, [r7, #0]
   112e4:	2b00      	cmp	r3, #0
   112e6:	d1c6      	bne.n	11276 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
   112e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   112ea:	7b5b      	ldrb	r3, [r3, #13]
   112ec:	2b00      	cmp	r3, #0
   112ee:	d003      	beq.n	112f8 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
   112f0:	2101      	movs	r1, #1
   112f2:	68f8      	ldr	r0, [r7, #12]
   112f4:	4b06      	ldr	r3, [pc, #24]	; (11310 <n25q256a_write+0x10c>)
   112f6:	4798      	blx	r3
	}
	return ERR_NONE;
   112f8:	2300      	movs	r3, #0
}
   112fa:	4618      	mov	r0, r3
   112fc:	3730      	adds	r7, #48	; 0x30
   112fe:	46bd      	mov	sp, r7
   11300:	bd80      	pop	{r7, pc}
   11302:	bf00      	nop
   11304:	00010f75 	.word	0x00010f75
   11308:	00007065 	.word	0x00007065
   1130c:	00010e39 	.word	0x00010e39
   11310:	00010d6d 	.word	0x00010d6d

00011314 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
   11314:	b580      	push	{r7, lr}
   11316:	b090      	sub	sp, #64	; 0x40
   11318:	af00      	add	r7, sp, #0
   1131a:	60f8      	str	r0, [r7, #12]
   1131c:	60b9      	str	r1, [r7, #8]
   1131e:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   11320:	68fb      	ldr	r3, [r7, #12]
   11322:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   11324:	68fb      	ldr	r3, [r7, #12]
   11326:	681b      	ldr	r3, [r3, #0]
   11328:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
   1132a:	f107 0314 	add.w	r3, r7, #20
   1132e:	2200      	movs	r2, #0
   11330:	601a      	str	r2, [r3, #0]
   11332:	605a      	str	r2, [r3, #4]
   11334:	609a      	str	r2, [r3, #8]
   11336:	60da      	str	r2, [r3, #12]
   11338:	611a      	str	r2, [r3, #16]
   1133a:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   1133c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1133e:	7b1b      	ldrb	r3, [r3, #12]
   11340:	2b00      	cmp	r3, #0
   11342:	d001      	beq.n	11348 <n25q256a_erase+0x34>
   11344:	2206      	movs	r2, #6
   11346:	e000      	b.n	1134a <n25q256a_erase+0x36>
   11348:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
   1134a:	7d3b      	ldrb	r3, [r7, #20]
   1134c:	f362 0302 	bfi	r3, r2, #0, #3
   11350:	753b      	strb	r3, [r7, #20]
   11352:	7d3b      	ldrb	r3, [r7, #20]
   11354:	f043 0310 	orr.w	r3, r3, #16
   11358:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
   1135a:	687b      	ldr	r3, [r7, #4]
   1135c:	4a56      	ldr	r2, [pc, #344]	; (114b8 <n25q256a_erase+0x1a4>)
   1135e:	4293      	cmp	r3, r2
   11360:	bf94      	ite	ls
   11362:	2301      	movls	r3, #1
   11364:	2300      	movhi	r3, #0
   11366:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
   11368:	7d3b      	ldrb	r3, [r7, #20]
   1136a:	f362 1345 	bfi	r3, r2, #5, #1
   1136e:	753b      	strb	r3, [r7, #20]
   11370:	7d7b      	ldrb	r3, [r7, #21]
   11372:	2202      	movs	r2, #2
   11374:	f362 1305 	bfi	r3, r2, #4, #2
   11378:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
   1137a:	68bb      	ldr	r3, [r7, #8]
   1137c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
   1137e:	687b      	ldr	r3, [r7, #4]
   11380:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
   11382:	2300      	movs	r3, #0
   11384:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
   11386:	687b      	ldr	r3, [r7, #4]
   11388:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1138c:	2b00      	cmp	r3, #0
   1138e:	d104      	bne.n	1139a <n25q256a_erase+0x86>
   11390:	68bb      	ldr	r3, [r7, #8]
   11392:	f3c3 030b 	ubfx	r3, r3, #0, #12
   11396:	2b00      	cmp	r3, #0
   11398:	d002      	beq.n	113a0 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
   1139a:	f06f 030c 	mvn.w	r3, #12
   1139e:	e087      	b.n	114b0 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
   113a0:	687b      	ldr	r3, [r7, #4]
   113a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   113a6:	d368      	bcc.n	1147a <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
   113a8:	23c7      	movs	r3, #199	; 0xc7
   113aa:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   113ac:	7d3b      	ldrb	r3, [r7, #20]
   113ae:	f3c3 0302 	ubfx	r3, r3, #0, #3
   113b2:	b2db      	uxtb	r3, r3
   113b4:	2201      	movs	r2, #1
   113b6:	4619      	mov	r1, r3
   113b8:	68f8      	ldr	r0, [r7, #12]
   113ba:	4b40      	ldr	r3, [pc, #256]	; (114bc <n25q256a_erase+0x1a8>)
   113bc:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
   113be:	f107 0314 	add.w	r3, r7, #20
   113c2:	4619      	mov	r1, r3
   113c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   113c6:	4b3e      	ldr	r3, [pc, #248]	; (114c0 <n25q256a_erase+0x1ac>)
   113c8:	4798      	blx	r3
   113ca:	e059      	b.n	11480 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
   113cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   113ce:	b29b      	uxth	r3, r3
   113d0:	2b00      	cmp	r3, #0
   113d2:	d11f      	bne.n	11414 <n25q256a_erase+0x100>
   113d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   113d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   113da:	d31b      	bcc.n	11414 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
   113dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   113de:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
   113e0:	23d8      	movs	r3, #216	; 0xd8
   113e2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   113e4:	7d3b      	ldrb	r3, [r7, #20]
   113e6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   113ea:	b2db      	uxtb	r3, r3
   113ec:	2201      	movs	r2, #1
   113ee:	4619      	mov	r1, r3
   113f0:	68f8      	ldr	r0, [r7, #12]
   113f2:	4b32      	ldr	r3, [pc, #200]	; (114bc <n25q256a_erase+0x1a8>)
   113f4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   113f6:	f107 0314 	add.w	r3, r7, #20
   113fa:	4619      	mov	r1, r3
   113fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   113fe:	4b30      	ldr	r3, [pc, #192]	; (114c0 <n25q256a_erase+0x1ac>)
   11400:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
   11402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11404:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   11408:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
   1140a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1140c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   11410:	63bb      	str	r3, [r7, #56]	; 0x38
   11412:	e023      	b.n	1145c <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
   11414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1141a:	d31b      	bcc.n	11454 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
   1141c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1141e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
   11420:	2320      	movs	r3, #32
   11422:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   11424:	7d3b      	ldrb	r3, [r7, #20]
   11426:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1142a:	b2db      	uxtb	r3, r3
   1142c:	2201      	movs	r2, #1
   1142e:	4619      	mov	r1, r3
   11430:	68f8      	ldr	r0, [r7, #12]
   11432:	4b22      	ldr	r3, [pc, #136]	; (114bc <n25q256a_erase+0x1a8>)
   11434:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   11436:	f107 0314 	add.w	r3, r7, #20
   1143a:	4619      	mov	r1, r3
   1143c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1143e:	4b20      	ldr	r3, [pc, #128]	; (114c0 <n25q256a_erase+0x1ac>)
   11440:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
   11442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   11448:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
   1144a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1144c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   11450:	63bb      	str	r3, [r7, #56]	; 0x38
   11452:	e003      	b.n	1145c <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
   11454:	f06f 030c 	mvn.w	r3, #12
   11458:	637b      	str	r3, [r7, #52]	; 0x34
				break;
   1145a:	e011      	b.n	11480 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   1145c:	bf00      	nop
   1145e:	7d3b      	ldrb	r3, [r7, #20]
   11460:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11464:	b2db      	uxtb	r3, r3
   11466:	2270      	movs	r2, #112	; 0x70
   11468:	4619      	mov	r1, r3
   1146a:	68f8      	ldr	r0, [r7, #12]
   1146c:	4b15      	ldr	r3, [pc, #84]	; (114c4 <n25q256a_erase+0x1b0>)
   1146e:	4798      	blx	r3
   11470:	4603      	mov	r3, r0
   11472:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11476:	2b00      	cmp	r3, #0
   11478:	d0f1      	beq.n	1145e <n25q256a_erase+0x14a>
		while (temp_len > 0) {
   1147a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1147c:	2b00      	cmp	r3, #0
   1147e:	d1a5      	bne.n	113cc <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   11480:	bf00      	nop
   11482:	7d3b      	ldrb	r3, [r7, #20]
   11484:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11488:	b2db      	uxtb	r3, r3
   1148a:	2270      	movs	r2, #112	; 0x70
   1148c:	4619      	mov	r1, r3
   1148e:	68f8      	ldr	r0, [r7, #12]
   11490:	4b0c      	ldr	r3, [pc, #48]	; (114c4 <n25q256a_erase+0x1b0>)
   11492:	4798      	blx	r3
   11494:	4603      	mov	r3, r0
   11496:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1149a:	2b00      	cmp	r3, #0
   1149c:	d0f1      	beq.n	11482 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
   1149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   114a0:	7b5b      	ldrb	r3, [r3, #13]
   114a2:	2b00      	cmp	r3, #0
   114a4:	d003      	beq.n	114ae <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
   114a6:	2101      	movs	r1, #1
   114a8:	68f8      	ldr	r0, [r7, #12]
   114aa:	4b07      	ldr	r3, [pc, #28]	; (114c8 <n25q256a_erase+0x1b4>)
   114ac:	4798      	blx	r3
	}
	return rc;
   114ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   114b0:	4618      	mov	r0, r3
   114b2:	3740      	adds	r7, #64	; 0x40
   114b4:	46bd      	mov	sp, r7
   114b6:	bd80      	pop	{r7, pc}
   114b8:	001fffff 	.word	0x001fffff
   114bc:	00010f75 	.word	0x00010f75
   114c0:	00007065 	.word	0x00007065
   114c4:	00010e39 	.word	0x00010e39
   114c8:	00010d6d 	.word	0x00010d6d

000114cc <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
   114cc:	b590      	push	{r4, r7, lr}
   114ce:	b085      	sub	sp, #20
   114d0:	af00      	add	r7, sp, #0
   114d2:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
   114d4:	687b      	ldr	r3, [r7, #4]
   114d6:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   114d8:	68fb      	ldr	r3, [r7, #12]
   114da:	7b1b      	ldrb	r3, [r3, #12]
   114dc:	2b00      	cmp	r3, #0
   114de:	d001      	beq.n	114e4 <n25q256a_enable_xip+0x18>
   114e0:	2306      	movs	r3, #6
   114e2:	e000      	b.n	114e6 <n25q256a_enable_xip+0x1a>
   114e4:	2300      	movs	r3, #0
   114e6:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
   114e8:	68fb      	ldr	r3, [r7, #12]
   114ea:	7b5b      	ldrb	r3, [r3, #13]
   114ec:	2b00      	cmp	r3, #0
   114ee:	d129      	bne.n	11544 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   114f0:	7afb      	ldrb	r3, [r7, #11]
   114f2:	2285      	movs	r2, #133	; 0x85
   114f4:	4619      	mov	r1, r3
   114f6:	6878      	ldr	r0, [r7, #4]
   114f8:	4b15      	ldr	r3, [pc, #84]	; (11550 <n25q256a_enable_xip+0x84>)
   114fa:	4798      	blx	r3
   114fc:	4603      	mov	r3, r0
   114fe:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
   11500:	7abb      	ldrb	r3, [r7, #10]
   11502:	f003 0308 	and.w	r3, r3, #8
   11506:	2b00      	cmp	r3, #0
   11508:	d015      	beq.n	11536 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
   1150a:	7abb      	ldrb	r3, [r7, #10]
   1150c:	f023 0308 	bic.w	r3, r3, #8
   11510:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
   11512:	7abb      	ldrb	r3, [r7, #10]
   11514:	7af9      	ldrb	r1, [r7, #11]
   11516:	2281      	movs	r2, #129	; 0x81
   11518:	6878      	ldr	r0, [r7, #4]
   1151a:	4c0e      	ldr	r4, [pc, #56]	; (11554 <n25q256a_enable_xip+0x88>)
   1151c:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   1151e:	bf00      	nop
   11520:	7afb      	ldrb	r3, [r7, #11]
   11522:	2270      	movs	r2, #112	; 0x70
   11524:	4619      	mov	r1, r3
   11526:	6878      	ldr	r0, [r7, #4]
   11528:	4b09      	ldr	r3, [pc, #36]	; (11550 <n25q256a_enable_xip+0x84>)
   1152a:	4798      	blx	r3
   1152c:	4603      	mov	r3, r0
   1152e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11532:	2b00      	cmp	r3, #0
   11534:	d0f4      	beq.n	11520 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
   11536:	68fb      	ldr	r3, [r7, #12]
   11538:	2201      	movs	r2, #1
   1153a:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
   1153c:	2101      	movs	r1, #1
   1153e:	6878      	ldr	r0, [r7, #4]
   11540:	4b05      	ldr	r3, [pc, #20]	; (11558 <n25q256a_enable_xip+0x8c>)
   11542:	4798      	blx	r3
	}
	return ERR_NONE;
   11544:	2300      	movs	r3, #0
}
   11546:	4618      	mov	r0, r3
   11548:	3714      	adds	r7, #20
   1154a:	46bd      	mov	sp, r7
   1154c:	bd90      	pop	{r4, r7, pc}
   1154e:	bf00      	nop
   11550:	00010e39 	.word	0x00010e39
   11554:	00010ed5 	.word	0x00010ed5
   11558:	00010d6d 	.word	0x00010d6d

0001155c <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
   1155c:	b580      	push	{r7, lr}
   1155e:	b086      	sub	sp, #24
   11560:	af00      	add	r7, sp, #0
   11562:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   11564:	687b      	ldr	r3, [r7, #4]
   11566:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   11568:	687b      	ldr	r3, [r7, #4]
   1156a:	681b      	ldr	r3, [r3, #0]
   1156c:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   1156e:	697b      	ldr	r3, [r7, #20]
   11570:	7b1b      	ldrb	r3, [r3, #12]
   11572:	2b00      	cmp	r3, #0
   11574:	d001      	beq.n	1157a <n25q256a_disable_xip+0x1e>
   11576:	2306      	movs	r3, #6
   11578:	e000      	b.n	1157c <n25q256a_disable_xip+0x20>
   1157a:	2300      	movs	r3, #0
   1157c:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
   1157e:	2100      	movs	r1, #0
   11580:	6878      	ldr	r0, [r7, #4]
   11582:	4b15      	ldr	r3, [pc, #84]	; (115d8 <n25q256a_disable_xip+0x7c>)
   11584:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   11586:	7bfb      	ldrb	r3, [r7, #15]
   11588:	2285      	movs	r2, #133	; 0x85
   1158a:	4619      	mov	r1, r3
   1158c:	6878      	ldr	r0, [r7, #4]
   1158e:	4b13      	ldr	r3, [pc, #76]	; (115dc <n25q256a_disable_xip+0x80>)
   11590:	4798      	blx	r3
   11592:	4603      	mov	r3, r0
   11594:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
   11596:	7bbb      	ldrb	r3, [r7, #14]
   11598:	f003 0308 	and.w	r3, r3, #8
   1159c:	2b00      	cmp	r3, #0
   1159e:	d113      	bne.n	115c8 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
   115a0:	697b      	ldr	r3, [r7, #20]
   115a2:	689b      	ldr	r3, [r3, #8]
   115a4:	2b00      	cmp	r3, #0
   115a6:	d00f      	beq.n	115c8 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
   115a8:	693b      	ldr	r3, [r7, #16]
   115aa:	681b      	ldr	r3, [r3, #0]
   115ac:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
   115ae:	6938      	ldr	r0, [r7, #16]
   115b0:	4b0b      	ldr	r3, [pc, #44]	; (115e0 <n25q256a_disable_xip+0x84>)
   115b2:	4798      	blx	r3
			n25q->pin_exit_xip();
   115b4:	697b      	ldr	r3, [r7, #20]
   115b6:	689b      	ldr	r3, [r3, #8]
   115b8:	4798      	blx	r3

			qspi_sync_init(descr, hw);
   115ba:	68b9      	ldr	r1, [r7, #8]
   115bc:	6938      	ldr	r0, [r7, #16]
   115be:	4b09      	ldr	r3, [pc, #36]	; (115e4 <n25q256a_disable_xip+0x88>)
   115c0:	4798      	blx	r3
			qspi_sync_enable(descr);
   115c2:	6938      	ldr	r0, [r7, #16]
   115c4:	4b08      	ldr	r3, [pc, #32]	; (115e8 <n25q256a_disable_xip+0x8c>)
   115c6:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
   115c8:	697b      	ldr	r3, [r7, #20]
   115ca:	2200      	movs	r2, #0
   115cc:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   115ce:	2300      	movs	r3, #0
}
   115d0:	4618      	mov	r0, r3
   115d2:	3718      	adds	r7, #24
   115d4:	46bd      	mov	sp, r7
   115d6:	bd80      	pop	{r7, pc}
   115d8:	00010d6d 	.word	0x00010d6d
   115dc:	00010e39 	.word	0x00010e39
   115e0:	00007029 	.word	0x00007029
   115e4:	00006fa1 	.word	0x00006fa1
   115e8:	00006fed 	.word	0x00006fed

000115ec <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
   115ec:	b480      	push	{r7}
   115ee:	b085      	sub	sp, #20
   115f0:	af00      	add	r7, sp, #0
   115f2:	60f8      	str	r0, [r7, #12]
   115f4:	60b9      	str	r1, [r7, #8]
   115f6:	607a      	str	r2, [r7, #4]
	me->io        = io;
   115f8:	68fb      	ldr	r3, [r7, #12]
   115fa:	68ba      	ldr	r2, [r7, #8]
   115fc:	601a      	str	r2, [r3, #0]
	me->interface = interface;
   115fe:	68fb      	ldr	r3, [r7, #12]
   11600:	687a      	ldr	r2, [r7, #4]
   11602:	605a      	str	r2, [r3, #4]

	return me;
   11604:	68fb      	ldr	r3, [r7, #12]
}
   11606:	4618      	mov	r0, r3
   11608:	3714      	adds	r7, #20
   1160a:	46bd      	mov	sp, r7
   1160c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11610:	4770      	bx	lr

00011612 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
   11612:	b480      	push	{r7}
   11614:	b083      	sub	sp, #12
   11616:	af00      	add	r7, sp, #0
   11618:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   1161a:	687b      	ldr	r3, [r7, #4]
   1161c:	781b      	ldrb	r3, [r3, #0]
   1161e:	b29a      	uxth	r2, r3
   11620:	687b      	ldr	r3, [r7, #4]
   11622:	3301      	adds	r3, #1
   11624:	781b      	ldrb	r3, [r3, #0]
   11626:	b29b      	uxth	r3, r3
   11628:	021b      	lsls	r3, r3, #8
   1162a:	b29b      	uxth	r3, r3
   1162c:	4413      	add	r3, r2
   1162e:	b29b      	uxth	r3, r3
}
   11630:	4618      	mov	r0, r3
   11632:	370c      	adds	r7, #12
   11634:	46bd      	mov	sp, r7
   11636:	f85d 7b04 	ldr.w	r7, [sp], #4
   1163a:	4770      	bx	lr

0001163c <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
   1163c:	b480      	push	{r7}
   1163e:	b083      	sub	sp, #12
   11640:	af00      	add	r7, sp, #0
   11642:	6078      	str	r0, [r7, #4]
	return desc[0];
   11644:	687b      	ldr	r3, [r7, #4]
   11646:	781b      	ldrb	r3, [r3, #0]
}
   11648:	4618      	mov	r0, r3
   1164a:	370c      	adds	r7, #12
   1164c:	46bd      	mov	sp, r7
   1164e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11652:	4770      	bx	lr

00011654 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
   11654:	b580      	push	{r7, lr}
   11656:	b082      	sub	sp, #8
   11658:	af00      	add	r7, sp, #0
   1165a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   1165c:	6878      	ldr	r0, [r7, #4]
   1165e:	4b05      	ldr	r3, [pc, #20]	; (11674 <usb_desc_next+0x20>)
   11660:	4798      	blx	r3
   11662:	4603      	mov	r3, r0
   11664:	461a      	mov	r2, r3
   11666:	687b      	ldr	r3, [r7, #4]
   11668:	4413      	add	r3, r2
}
   1166a:	4618      	mov	r0, r3
   1166c:	3708      	adds	r7, #8
   1166e:	46bd      	mov	sp, r7
   11670:	bd80      	pop	{r7, pc}
   11672:	bf00      	nop
   11674:	0001163d 	.word	0x0001163d

00011678 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   11678:	b580      	push	{r7, lr}
   1167a:	b08c      	sub	sp, #48	; 0x30
   1167c:	af00      	add	r7, sp, #0
   1167e:	6078      	str	r0, [r7, #4]
   11680:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   11682:	687b      	ldr	r3, [r7, #4]
   11684:	689b      	ldr	r3, [r3, #8]
   11686:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
   11688:	683b      	ldr	r3, [r7, #0]
   1168a:	681b      	ldr	r3, [r3, #0]
   1168c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   1168e:	2300      	movs	r3, #0
   11690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   11694:	e08f      	b.n	117b6 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
   11696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11698:	2b00      	cmp	r3, #0
   1169a:	d102      	bne.n	116a2 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
   1169c:	f06f 0309 	mvn.w	r3, #9
   116a0:	e092      	b.n	117c8 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
   116a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   116a4:	789b      	ldrb	r3, [r3, #2]
   116a6:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
   116a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   116aa:	795b      	ldrb	r3, [r3, #5]
   116ac:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
   116ae:	7c7b      	ldrb	r3, [r7, #17]
   116b0:	2b02      	cmp	r3, #2
   116b2:	d002      	beq.n	116ba <cdcdf_acm_enable+0x42>
   116b4:	7c7b      	ldrb	r3, [r7, #17]
   116b6:	2b0a      	cmp	r3, #10
   116b8:	d121      	bne.n	116fe <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   116ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   116be:	6a3a      	ldr	r2, [r7, #32]
   116c0:	5cd2      	ldrb	r2, [r2, r3]
   116c2:	7bbb      	ldrb	r3, [r7, #14]
   116c4:	429a      	cmp	r2, r3
   116c6:	d102      	bne.n	116ce <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
   116c8:	f06f 0311 	mvn.w	r3, #17
   116cc:	e07c      	b.n	117c8 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
   116ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   116d2:	6a3a      	ldr	r2, [r7, #32]
   116d4:	5cd3      	ldrb	r3, [r2, r3]
   116d6:	2bff      	cmp	r3, #255	; 0xff
   116d8:	d002      	beq.n	116e0 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
   116da:	f06f 031b 	mvn.w	r3, #27
   116de:	e073      	b.n	117c8 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
   116e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   116e4:	7bb9      	ldrb	r1, [r7, #14]
   116e6:	6a3a      	ldr	r2, [r7, #32]
   116e8:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   116ea:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
   116ec:	683b      	ldr	r3, [r7, #0]
   116ee:	685b      	ldr	r3, [r3, #4]
   116f0:	2205      	movs	r2, #5
   116f2:	4619      	mov	r1, r3
   116f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   116f6:	4b36      	ldr	r3, [pc, #216]	; (117d0 <cdcdf_acm_enable+0x158>)
   116f8:	4798      	blx	r3
   116fa:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   116fc:	e047      	b.n	1178e <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
   116fe:	f06f 0309 	mvn.w	r3, #9
   11702:	e061      	b.n	117c8 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
   11704:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11706:	789b      	ldrb	r3, [r3, #2]
   11708:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
   1170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1170c:	78db      	ldrb	r3, [r3, #3]
   1170e:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
   11710:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11712:	3304      	adds	r3, #4
   11714:	4618      	mov	r0, r3
   11716:	4b2f      	ldr	r3, [pc, #188]	; (117d4 <cdcdf_acm_enable+0x15c>)
   11718:	4798      	blx	r3
   1171a:	4603      	mov	r3, r0
   1171c:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
   1171e:	7ebb      	ldrb	r3, [r7, #26]
   11720:	7ef9      	ldrb	r1, [r7, #27]
   11722:	8bba      	ldrh	r2, [r7, #28]
   11724:	4618      	mov	r0, r3
   11726:	4b2c      	ldr	r3, [pc, #176]	; (117d8 <cdcdf_acm_enable+0x160>)
   11728:	4798      	blx	r3
   1172a:	4603      	mov	r3, r0
   1172c:	2b00      	cmp	r3, #0
   1172e:	d002      	beq.n	11736 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
   11730:	f06f 0313 	mvn.w	r3, #19
   11734:	e048      	b.n	117c8 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
   11736:	7ebb      	ldrb	r3, [r7, #26]
   11738:	b25b      	sxtb	r3, r3
   1173a:	2b00      	cmp	r3, #0
   1173c:	da0f      	bge.n	1175e <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
   1173e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11742:	7eb9      	ldrb	r1, [r7, #26]
   11744:	6a3a      	ldr	r2, [r7, #32]
   11746:	4413      	add	r3, r2
   11748:	460a      	mov	r2, r1
   1174a:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
   1174c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11750:	6a3a      	ldr	r2, [r7, #32]
   11752:	4413      	add	r3, r2
   11754:	789b      	ldrb	r3, [r3, #2]
   11756:	4618      	mov	r0, r3
   11758:	4b20      	ldr	r3, [pc, #128]	; (117dc <cdcdf_acm_enable+0x164>)
   1175a:	4798      	blx	r3
   1175c:	e007      	b.n	1176e <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
   1175e:	7eba      	ldrb	r2, [r7, #26]
   11760:	6a3b      	ldr	r3, [r7, #32]
   11762:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
   11764:	6a3b      	ldr	r3, [r7, #32]
   11766:	791b      	ldrb	r3, [r3, #4]
   11768:	4618      	mov	r0, r3
   1176a:	4b1c      	ldr	r3, [pc, #112]	; (117dc <cdcdf_acm_enable+0x164>)
   1176c:	4798      	blx	r3
			}
			desc->sod = ep;
   1176e:	683b      	ldr	r3, [r7, #0]
   11770:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11772:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
   11774:	683b      	ldr	r3, [r7, #0]
   11776:	681b      	ldr	r3, [r3, #0]
   11778:	4618      	mov	r0, r3
   1177a:	4b19      	ldr	r3, [pc, #100]	; (117e0 <cdcdf_acm_enable+0x168>)
   1177c:	4798      	blx	r3
   1177e:	4602      	mov	r2, r0
   11780:	683b      	ldr	r3, [r7, #0]
   11782:	685b      	ldr	r3, [r3, #4]
   11784:	4619      	mov	r1, r3
   11786:	4610      	mov	r0, r2
   11788:	4b16      	ldr	r3, [pc, #88]	; (117e4 <cdcdf_acm_enable+0x16c>)
   1178a:	4798      	blx	r3
   1178c:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   1178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11790:	2b00      	cmp	r3, #0
   11792:	d1b7      	bne.n	11704 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
   11794:	683b      	ldr	r3, [r7, #0]
   11796:	681b      	ldr	r3, [r3, #0]
   11798:	4618      	mov	r0, r3
   1179a:	4b11      	ldr	r3, [pc, #68]	; (117e0 <cdcdf_acm_enable+0x168>)
   1179c:	4798      	blx	r3
   1179e:	683b      	ldr	r3, [r7, #0]
   117a0:	685b      	ldr	r3, [r3, #4]
   117a2:	2204      	movs	r2, #4
   117a4:	4619      	mov	r1, r3
   117a6:	4b0a      	ldr	r3, [pc, #40]	; (117d0 <cdcdf_acm_enable+0x158>)
   117a8:	4798      	blx	r3
   117aa:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   117ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   117b0:	3301      	adds	r3, #1
   117b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   117b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   117ba:	2b01      	cmp	r3, #1
   117bc:	f67f af6b 	bls.w	11696 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
   117c0:	4b09      	ldr	r3, [pc, #36]	; (117e8 <cdcdf_acm_enable+0x170>)
   117c2:	2201      	movs	r2, #1
   117c4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   117c6:	2300      	movs	r3, #0
}
   117c8:	4618      	mov	r0, r3
   117ca:	3730      	adds	r7, #48	; 0x30
   117cc:	46bd      	mov	sp, r7
   117ce:	bd80      	pop	{r7, pc}
   117d0:	00012a39 	.word	0x00012a39
   117d4:	00011613 	.word	0x00011613
   117d8:	00007cd9 	.word	0x00007cd9
   117dc:	00007dc5 	.word	0x00007dc5
   117e0:	00011655 	.word	0x00011655
   117e4:	00012a95 	.word	0x00012a95
   117e8:	20008e54 	.word	0x20008e54

000117ec <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   117ec:	b580      	push	{r7, lr}
   117ee:	b088      	sub	sp, #32
   117f0:	af00      	add	r7, sp, #0
   117f2:	6078      	str	r0, [r7, #4]
   117f4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   117f6:	687b      	ldr	r3, [r7, #4]
   117f8:	689b      	ldr	r3, [r3, #8]
   117fa:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
   117fc:	683b      	ldr	r3, [r7, #0]
   117fe:	2b00      	cmp	r3, #0
   11800:	d00c      	beq.n	1181c <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
   11802:	683b      	ldr	r3, [r7, #0]
   11804:	681b      	ldr	r3, [r3, #0]
   11806:	795b      	ldrb	r3, [r3, #5]
   11808:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
   1180a:	7c7b      	ldrb	r3, [r7, #17]
   1180c:	2b02      	cmp	r3, #2
   1180e:	d005      	beq.n	1181c <cdcdf_acm_disable+0x30>
   11810:	7c7b      	ldrb	r3, [r7, #17]
   11812:	2b0a      	cmp	r3, #10
   11814:	d002      	beq.n	1181c <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
   11816:	f06f 0309 	mvn.w	r3, #9
   1181a:	e035      	b.n	11888 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
   1181c:	2300      	movs	r3, #0
   1181e:	77fb      	strb	r3, [r7, #31]
   11820:	e01f      	b.n	11862 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
   11822:	7ffb      	ldrb	r3, [r7, #31]
   11824:	69ba      	ldr	r2, [r7, #24]
   11826:	5cd3      	ldrb	r3, [r2, r3]
   11828:	2bff      	cmp	r3, #255	; 0xff
   1182a:	d016      	beq.n	1185a <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
   1182c:	7ffb      	ldrb	r3, [r7, #31]
   1182e:	69ba      	ldr	r2, [r7, #24]
   11830:	21ff      	movs	r1, #255	; 0xff
   11832:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
   11834:	7ffb      	ldrb	r3, [r7, #31]
   11836:	69ba      	ldr	r2, [r7, #24]
   11838:	4413      	add	r3, r2
   1183a:	789b      	ldrb	r3, [r3, #2]
   1183c:	2bff      	cmp	r3, #255	; 0xff
   1183e:	d00d      	beq.n	1185c <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
   11840:	7ffb      	ldrb	r3, [r7, #31]
   11842:	69ba      	ldr	r2, [r7, #24]
   11844:	4413      	add	r3, r2
   11846:	789b      	ldrb	r3, [r3, #2]
   11848:	4618      	mov	r0, r3
   1184a:	4b11      	ldr	r3, [pc, #68]	; (11890 <cdcdf_acm_disable+0xa4>)
   1184c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
   1184e:	7ffb      	ldrb	r3, [r7, #31]
   11850:	69ba      	ldr	r2, [r7, #24]
   11852:	4413      	add	r3, r2
   11854:	22ff      	movs	r2, #255	; 0xff
   11856:	709a      	strb	r2, [r3, #2]
   11858:	e000      	b.n	1185c <cdcdf_acm_disable+0x70>
			continue;
   1185a:	bf00      	nop
	for (i = 0; i < 2; i++) {
   1185c:	7ffb      	ldrb	r3, [r7, #31]
   1185e:	3301      	adds	r3, #1
   11860:	77fb      	strb	r3, [r7, #31]
   11862:	7ffb      	ldrb	r3, [r7, #31]
   11864:	2b01      	cmp	r3, #1
   11866:	d9dc      	bls.n	11822 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
   11868:	69bb      	ldr	r3, [r7, #24]
   1186a:	791b      	ldrb	r3, [r3, #4]
   1186c:	2bff      	cmp	r3, #255	; 0xff
   1186e:	d007      	beq.n	11880 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
   11870:	69bb      	ldr	r3, [r7, #24]
   11872:	791b      	ldrb	r3, [r3, #4]
   11874:	4618      	mov	r0, r3
   11876:	4b06      	ldr	r3, [pc, #24]	; (11890 <cdcdf_acm_disable+0xa4>)
   11878:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
   1187a:	69bb      	ldr	r3, [r7, #24]
   1187c:	22ff      	movs	r2, #255	; 0xff
   1187e:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
   11880:	4b04      	ldr	r3, [pc, #16]	; (11894 <cdcdf_acm_disable+0xa8>)
   11882:	2200      	movs	r2, #0
   11884:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   11886:	2300      	movs	r3, #0
}
   11888:	4618      	mov	r0, r3
   1188a:	3720      	adds	r7, #32
   1188c:	46bd      	mov	sp, r7
   1188e:	bd80      	pop	{r7, pc}
   11890:	00007d75 	.word	0x00007d75
   11894:	20008e54 	.word	0x20008e54

00011898 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
   11898:	b580      	push	{r7, lr}
   1189a:	b084      	sub	sp, #16
   1189c:	af00      	add	r7, sp, #0
   1189e:	60f8      	str	r0, [r7, #12]
   118a0:	460b      	mov	r3, r1
   118a2:	607a      	str	r2, [r7, #4]
   118a4:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
   118a6:	7afb      	ldrb	r3, [r7, #11]
   118a8:	2b01      	cmp	r3, #1
   118aa:	d009      	beq.n	118c0 <cdcdf_acm_ctrl+0x28>
   118ac:	2b02      	cmp	r3, #2
   118ae:	d00d      	beq.n	118cc <cdcdf_acm_ctrl+0x34>
   118b0:	2b00      	cmp	r3, #0
   118b2:	d10e      	bne.n	118d2 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
   118b4:	6879      	ldr	r1, [r7, #4]
   118b6:	68f8      	ldr	r0, [r7, #12]
   118b8:	4b09      	ldr	r3, [pc, #36]	; (118e0 <cdcdf_acm_ctrl+0x48>)
   118ba:	4798      	blx	r3
   118bc:	4603      	mov	r3, r0
   118be:	e00a      	b.n	118d6 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
   118c0:	6879      	ldr	r1, [r7, #4]
   118c2:	68f8      	ldr	r0, [r7, #12]
   118c4:	4b07      	ldr	r3, [pc, #28]	; (118e4 <cdcdf_acm_ctrl+0x4c>)
   118c6:	4798      	blx	r3
   118c8:	4603      	mov	r3, r0
   118ca:	e004      	b.n	118d6 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
   118cc:	f06f 031a 	mvn.w	r3, #26
   118d0:	e001      	b.n	118d6 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
   118d2:	f06f 030c 	mvn.w	r3, #12
	}
}
   118d6:	4618      	mov	r0, r3
   118d8:	3710      	adds	r7, #16
   118da:	46bd      	mov	sp, r7
   118dc:	bd80      	pop	{r7, pc}
   118de:	bf00      	nop
   118e0:	00011679 	.word	0x00011679
   118e4:	000117ed 	.word	0x000117ed

000118e8 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   118e8:	b590      	push	{r4, r7, lr}
   118ea:	b087      	sub	sp, #28
   118ec:	af00      	add	r7, sp, #0
   118ee:	4603      	mov	r3, r0
   118f0:	6039      	str	r1, [r7, #0]
   118f2:	71fb      	strb	r3, [r7, #7]
   118f4:	4613      	mov	r3, r2
   118f6:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
   118f8:	683b      	ldr	r3, [r7, #0]
   118fa:	799a      	ldrb	r2, [r3, #6]
   118fc:	79db      	ldrb	r3, [r3, #7]
   118fe:	021b      	lsls	r3, r3, #8
   11900:	4313      	orrs	r3, r2
   11902:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
   11904:	4b2b      	ldr	r3, [pc, #172]	; (119b4 <cdcdf_acm_set_req+0xcc>)
   11906:	4798      	blx	r3
   11908:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
   1190a:	683b      	ldr	r3, [r7, #0]
   1190c:	785b      	ldrb	r3, [r3, #1]
   1190e:	2b20      	cmp	r3, #32
   11910:	d002      	beq.n	11918 <cdcdf_acm_set_req+0x30>
   11912:	2b22      	cmp	r3, #34	; 0x22
   11914:	d034      	beq.n	11980 <cdcdf_acm_set_req+0x98>
   11916:	e046      	b.n	119a6 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   11918:	8afb      	ldrh	r3, [r7, #22]
   1191a:	2b07      	cmp	r3, #7
   1191c:	d002      	beq.n	11924 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
   1191e:	f04f 33ff 	mov.w	r3, #4294967295
   11922:	e042      	b.n	119aa <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
   11924:	79bb      	ldrb	r3, [r7, #6]
   11926:	2b00      	cmp	r3, #0
   11928:	d107      	bne.n	1193a <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
   1192a:	8afa      	ldrh	r2, [r7, #22]
   1192c:	79f8      	ldrb	r0, [r7, #7]
   1192e:	2300      	movs	r3, #0
   11930:	6939      	ldr	r1, [r7, #16]
   11932:	4c21      	ldr	r4, [pc, #132]	; (119b8 <cdcdf_acm_set_req+0xd0>)
   11934:	47a0      	blx	r4
   11936:	4603      	mov	r3, r0
   11938:	e037      	b.n	119aa <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
   1193a:	693a      	ldr	r2, [r7, #16]
   1193c:	f107 0308 	add.w	r3, r7, #8
   11940:	6810      	ldr	r0, [r2, #0]
   11942:	6018      	str	r0, [r3, #0]
   11944:	8891      	ldrh	r1, [r2, #4]
   11946:	7992      	ldrb	r2, [r2, #6]
   11948:	8099      	strh	r1, [r3, #4]
   1194a:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
   1194c:	4b1b      	ldr	r3, [pc, #108]	; (119bc <cdcdf_acm_set_req+0xd4>)
   1194e:	681b      	ldr	r3, [r3, #0]
   11950:	2b00      	cmp	r3, #0
   11952:	d008      	beq.n	11966 <cdcdf_acm_set_req+0x7e>
   11954:	4b19      	ldr	r3, [pc, #100]	; (119bc <cdcdf_acm_set_req+0xd4>)
   11956:	681b      	ldr	r3, [r3, #0]
   11958:	f107 0208 	add.w	r2, r7, #8
   1195c:	4610      	mov	r0, r2
   1195e:	4798      	blx	r3
   11960:	4603      	mov	r3, r0
   11962:	2b00      	cmp	r3, #0
   11964:	d00a      	beq.n	1197c <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
   11966:	4b16      	ldr	r3, [pc, #88]	; (119c0 <cdcdf_acm_set_req+0xd8>)
   11968:	f107 0208 	add.w	r2, r7, #8
   1196c:	e892 0003 	ldmia.w	r2, {r0, r1}
   11970:	6018      	str	r0, [r3, #0]
   11972:	3304      	adds	r3, #4
   11974:	8019      	strh	r1, [r3, #0]
   11976:	3302      	adds	r3, #2
   11978:	0c0a      	lsrs	r2, r1, #16
   1197a:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
   1197c:	2300      	movs	r3, #0
   1197e:	e014      	b.n	119aa <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
   11980:	2300      	movs	r3, #0
   11982:	2200      	movs	r2, #0
   11984:	2100      	movs	r1, #0
   11986:	2000      	movs	r0, #0
   11988:	4c0b      	ldr	r4, [pc, #44]	; (119b8 <cdcdf_acm_set_req+0xd0>)
   1198a:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
   1198c:	4b0d      	ldr	r3, [pc, #52]	; (119c4 <cdcdf_acm_set_req+0xdc>)
   1198e:	681b      	ldr	r3, [r3, #0]
   11990:	2b00      	cmp	r3, #0
   11992:	d006      	beq.n	119a2 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
   11994:	4b0b      	ldr	r3, [pc, #44]	; (119c4 <cdcdf_acm_set_req+0xdc>)
   11996:	681b      	ldr	r3, [r3, #0]
   11998:	683a      	ldr	r2, [r7, #0]
   1199a:	8852      	ldrh	r2, [r2, #2]
   1199c:	b292      	uxth	r2, r2
   1199e:	4610      	mov	r0, r2
   119a0:	4798      	blx	r3
		}
		return ERR_NONE;
   119a2:	2300      	movs	r3, #0
   119a4:	e001      	b.n	119aa <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
   119a6:	f06f 030c 	mvn.w	r3, #12
	}
}
   119aa:	4618      	mov	r0, r3
   119ac:	371c      	adds	r7, #28
   119ae:	46bd      	mov	sp, r7
   119b0:	bd90      	pop	{r4, r7, pc}
   119b2:	bf00      	nop
   119b4:	00012935 	.word	0x00012935
   119b8:	000127a9 	.word	0x000127a9
   119bc:	20008e68 	.word	0x20008e68
   119c0:	20008e5c 	.word	0x20008e5c
   119c4:	20008e64 	.word	0x20008e64

000119c8 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   119c8:	b590      	push	{r4, r7, lr}
   119ca:	b085      	sub	sp, #20
   119cc:	af00      	add	r7, sp, #0
   119ce:	4603      	mov	r3, r0
   119d0:	6039      	str	r1, [r7, #0]
   119d2:	71fb      	strb	r3, [r7, #7]
   119d4:	4613      	mov	r3, r2
   119d6:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
   119d8:	683b      	ldr	r3, [r7, #0]
   119da:	799a      	ldrb	r2, [r3, #6]
   119dc:	79db      	ldrb	r3, [r3, #7]
   119de:	021b      	lsls	r3, r3, #8
   119e0:	4313      	orrs	r3, r2
   119e2:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
   119e4:	79bb      	ldrb	r3, [r7, #6]
   119e6:	2b01      	cmp	r3, #1
   119e8:	d101      	bne.n	119ee <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
   119ea:	2300      	movs	r3, #0
   119ec:	e013      	b.n	11a16 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
   119ee:	683b      	ldr	r3, [r7, #0]
   119f0:	785b      	ldrb	r3, [r3, #1]
   119f2:	2b21      	cmp	r3, #33	; 0x21
   119f4:	d10d      	bne.n	11a12 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   119f6:	89fb      	ldrh	r3, [r7, #14]
   119f8:	2b07      	cmp	r3, #7
   119fa:	d002      	beq.n	11a02 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
   119fc:	f04f 33ff 	mov.w	r3, #4294967295
   11a00:	e009      	b.n	11a16 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
   11a02:	89fa      	ldrh	r2, [r7, #14]
   11a04:	79f8      	ldrb	r0, [r7, #7]
   11a06:	2300      	movs	r3, #0
   11a08:	4905      	ldr	r1, [pc, #20]	; (11a20 <cdcdf_acm_get_req+0x58>)
   11a0a:	4c06      	ldr	r4, [pc, #24]	; (11a24 <cdcdf_acm_get_req+0x5c>)
   11a0c:	47a0      	blx	r4
   11a0e:	4603      	mov	r3, r0
   11a10:	e001      	b.n	11a16 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
   11a12:	f06f 030c 	mvn.w	r3, #12
	}
}
   11a16:	4618      	mov	r0, r3
   11a18:	3714      	adds	r7, #20
   11a1a:	46bd      	mov	sp, r7
   11a1c:	bd90      	pop	{r4, r7, pc}
   11a1e:	bf00      	nop
   11a20:	20008e5c 	.word	0x20008e5c
   11a24:	000127a9 	.word	0x000127a9

00011a28 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11a28:	b580      	push	{r7, lr}
   11a2a:	b082      	sub	sp, #8
   11a2c:	af00      	add	r7, sp, #0
   11a2e:	4603      	mov	r3, r0
   11a30:	6039      	str	r1, [r7, #0]
   11a32:	71fb      	strb	r3, [r7, #7]
   11a34:	4613      	mov	r3, r2
   11a36:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
   11a38:	683b      	ldr	r3, [r7, #0]
   11a3a:	781b      	ldrb	r3, [r3, #0]
   11a3c:	095b      	lsrs	r3, r3, #5
   11a3e:	b2db      	uxtb	r3, r3
   11a40:	f003 0303 	and.w	r3, r3, #3
   11a44:	2b01      	cmp	r3, #1
   11a46:	d002      	beq.n	11a4e <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
   11a48:	f06f 0309 	mvn.w	r3, #9
   11a4c:	e026      	b.n	11a9c <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
   11a4e:	683b      	ldr	r3, [r7, #0]
   11a50:	889b      	ldrh	r3, [r3, #4]
   11a52:	b29a      	uxth	r2, r3
   11a54:	4b13      	ldr	r3, [pc, #76]	; (11aa4 <cdcdf_acm_req+0x7c>)
   11a56:	781b      	ldrb	r3, [r3, #0]
   11a58:	b29b      	uxth	r3, r3
   11a5a:	429a      	cmp	r2, r3
   11a5c:	d007      	beq.n	11a6e <cdcdf_acm_req+0x46>
   11a5e:	683b      	ldr	r3, [r7, #0]
   11a60:	889b      	ldrh	r3, [r3, #4]
   11a62:	b29a      	uxth	r2, r3
   11a64:	4b0f      	ldr	r3, [pc, #60]	; (11aa4 <cdcdf_acm_req+0x7c>)
   11a66:	785b      	ldrb	r3, [r3, #1]
   11a68:	b29b      	uxth	r3, r3
   11a6a:	429a      	cmp	r2, r3
   11a6c:	d114      	bne.n	11a98 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
   11a6e:	683b      	ldr	r3, [r7, #0]
   11a70:	781b      	ldrb	r3, [r3, #0]
   11a72:	b25b      	sxtb	r3, r3
   11a74:	2b00      	cmp	r3, #0
   11a76:	da07      	bge.n	11a88 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
   11a78:	79ba      	ldrb	r2, [r7, #6]
   11a7a:	79fb      	ldrb	r3, [r7, #7]
   11a7c:	6839      	ldr	r1, [r7, #0]
   11a7e:	4618      	mov	r0, r3
   11a80:	4b09      	ldr	r3, [pc, #36]	; (11aa8 <cdcdf_acm_req+0x80>)
   11a82:	4798      	blx	r3
   11a84:	4603      	mov	r3, r0
   11a86:	e009      	b.n	11a9c <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
   11a88:	79ba      	ldrb	r2, [r7, #6]
   11a8a:	79fb      	ldrb	r3, [r7, #7]
   11a8c:	6839      	ldr	r1, [r7, #0]
   11a8e:	4618      	mov	r0, r3
   11a90:	4b06      	ldr	r3, [pc, #24]	; (11aac <cdcdf_acm_req+0x84>)
   11a92:	4798      	blx	r3
   11a94:	4603      	mov	r3, r0
   11a96:	e001      	b.n	11a9c <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
   11a98:	f06f 0309 	mvn.w	r3, #9
	}
}
   11a9c:	4618      	mov	r0, r3
   11a9e:	3708      	adds	r7, #8
   11aa0:	46bd      	mov	sp, r7
   11aa2:	bd80      	pop	{r7, pc}
   11aa4:	20008e54 	.word	0x20008e54
   11aa8:	000119c9 	.word	0x000119c9
   11aac:	000118e9 	.word	0x000118e9

00011ab0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
   11ab0:	b580      	push	{r7, lr}
   11ab2:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
   11ab4:	4b0b      	ldr	r3, [pc, #44]	; (11ae4 <cdcdf_acm_init+0x34>)
   11ab6:	4798      	blx	r3
   11ab8:	4603      	mov	r3, r0
   11aba:	2b01      	cmp	r3, #1
   11abc:	d902      	bls.n	11ac4 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
   11abe:	f06f 0310 	mvn.w	r3, #16
   11ac2:	e00d      	b.n	11ae0 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
   11ac4:	4b08      	ldr	r3, [pc, #32]	; (11ae8 <cdcdf_acm_init+0x38>)
   11ac6:	4a09      	ldr	r2, [pc, #36]	; (11aec <cdcdf_acm_init+0x3c>)
   11ac8:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
   11aca:	4b07      	ldr	r3, [pc, #28]	; (11ae8 <cdcdf_acm_init+0x38>)
   11acc:	4a08      	ldr	r2, [pc, #32]	; (11af0 <cdcdf_acm_init+0x40>)
   11ace:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
   11ad0:	4805      	ldr	r0, [pc, #20]	; (11ae8 <cdcdf_acm_init+0x38>)
   11ad2:	4b08      	ldr	r3, [pc, #32]	; (11af4 <cdcdf_acm_init+0x44>)
   11ad4:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
   11ad6:	4908      	ldr	r1, [pc, #32]	; (11af8 <cdcdf_acm_init+0x48>)
   11ad8:	2001      	movs	r0, #1
   11ada:	4b08      	ldr	r3, [pc, #32]	; (11afc <cdcdf_acm_init+0x4c>)
   11adc:	4798      	blx	r3
	return ERR_NONE;
   11ade:	2300      	movs	r3, #0
}
   11ae0:	4618      	mov	r0, r3
   11ae2:	bd80      	pop	{r7, pc}
   11ae4:	0001294d 	.word	0x0001294d
   11ae8:	20008e48 	.word	0x20008e48
   11aec:	00011899 	.word	0x00011899
   11af0:	20008e54 	.word	0x20008e54
   11af4:	000128b5 	.word	0x000128b5
   11af8:	2000023c 	.word	0x2000023c
   11afc:	000127e5 	.word	0x000127e5

00011b00 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
   11b00:	b590      	push	{r4, r7, lr}
   11b02:	b083      	sub	sp, #12
   11b04:	af00      	add	r7, sp, #0
   11b06:	6078      	str	r0, [r7, #4]
   11b08:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   11b0a:	4b0b      	ldr	r3, [pc, #44]	; (11b38 <cdcdf_acm_read+0x38>)
   11b0c:	4798      	blx	r3
   11b0e:	4603      	mov	r3, r0
   11b10:	f083 0301 	eor.w	r3, r3, #1
   11b14:	b2db      	uxtb	r3, r3
   11b16:	2b00      	cmp	r3, #0
   11b18:	d002      	beq.n	11b20 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
   11b1a:	f06f 0310 	mvn.w	r3, #16
   11b1e:	e007      	b.n	11b30 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
   11b20:	4b06      	ldr	r3, [pc, #24]	; (11b3c <cdcdf_acm_read+0x3c>)
   11b22:	7918      	ldrb	r0, [r3, #4]
   11b24:	2300      	movs	r3, #0
   11b26:	683a      	ldr	r2, [r7, #0]
   11b28:	6879      	ldr	r1, [r7, #4]
   11b2a:	4c05      	ldr	r4, [pc, #20]	; (11b40 <cdcdf_acm_read+0x40>)
   11b2c:	47a0      	blx	r4
   11b2e:	4603      	mov	r3, r0
}
   11b30:	4618      	mov	r0, r3
   11b32:	370c      	adds	r7, #12
   11b34:	46bd      	mov	sp, r7
   11b36:	bd90      	pop	{r4, r7, pc}
   11b38:	00011c25 	.word	0x00011c25
   11b3c:	20008e54 	.word	0x20008e54
   11b40:	000127a9 	.word	0x000127a9

00011b44 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
   11b44:	b590      	push	{r4, r7, lr}
   11b46:	b083      	sub	sp, #12
   11b48:	af00      	add	r7, sp, #0
   11b4a:	6078      	str	r0, [r7, #4]
   11b4c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   11b4e:	4b0b      	ldr	r3, [pc, #44]	; (11b7c <cdcdf_acm_write+0x38>)
   11b50:	4798      	blx	r3
   11b52:	4603      	mov	r3, r0
   11b54:	f083 0301 	eor.w	r3, r3, #1
   11b58:	b2db      	uxtb	r3, r3
   11b5a:	2b00      	cmp	r3, #0
   11b5c:	d002      	beq.n	11b64 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
   11b5e:	f06f 0310 	mvn.w	r3, #16
   11b62:	e007      	b.n	11b74 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
   11b64:	4b06      	ldr	r3, [pc, #24]	; (11b80 <cdcdf_acm_write+0x3c>)
   11b66:	78d8      	ldrb	r0, [r3, #3]
   11b68:	2301      	movs	r3, #1
   11b6a:	683a      	ldr	r2, [r7, #0]
   11b6c:	6879      	ldr	r1, [r7, #4]
   11b6e:	4c05      	ldr	r4, [pc, #20]	; (11b84 <cdcdf_acm_write+0x40>)
   11b70:	47a0      	blx	r4
   11b72:	4603      	mov	r3, r0
}
   11b74:	4618      	mov	r0, r3
   11b76:	370c      	adds	r7, #12
   11b78:	46bd      	mov	sp, r7
   11b7a:	bd90      	pop	{r4, r7, pc}
   11b7c:	00011c25 	.word	0x00011c25
   11b80:	20008e54 	.word	0x20008e54
   11b84:	000127a9 	.word	0x000127a9

00011b88 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
   11b88:	b580      	push	{r7, lr}
   11b8a:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
   11b8c:	4b05      	ldr	r3, [pc, #20]	; (11ba4 <cdcdf_acm_stop_xfer+0x1c>)
   11b8e:	78db      	ldrb	r3, [r3, #3]
   11b90:	4618      	mov	r0, r3
   11b92:	4b05      	ldr	r3, [pc, #20]	; (11ba8 <cdcdf_acm_stop_xfer+0x20>)
   11b94:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
   11b96:	4b03      	ldr	r3, [pc, #12]	; (11ba4 <cdcdf_acm_stop_xfer+0x1c>)
   11b98:	791b      	ldrb	r3, [r3, #4]
   11b9a:	4618      	mov	r0, r3
   11b9c:	4b02      	ldr	r3, [pc, #8]	; (11ba8 <cdcdf_acm_stop_xfer+0x20>)
   11b9e:	4798      	blx	r3
}
   11ba0:	bf00      	nop
   11ba2:	bd80      	pop	{r7, pc}
   11ba4:	20008e54 	.word	0x20008e54
   11ba8:	00007f9d 	.word	0x00007f9d

00011bac <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
   11bac:	b580      	push	{r7, lr}
   11bae:	b082      	sub	sp, #8
   11bb0:	af00      	add	r7, sp, #0
   11bb2:	4603      	mov	r3, r0
   11bb4:	6039      	str	r1, [r7, #0]
   11bb6:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
   11bb8:	79fb      	ldrb	r3, [r7, #7]
   11bba:	2b03      	cmp	r3, #3
   11bbc:	d822      	bhi.n	11c04 <cdcdf_acm_register_callback+0x58>
   11bbe:	a201      	add	r2, pc, #4	; (adr r2, 11bc4 <cdcdf_acm_register_callback+0x18>)
   11bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11bc4:	00011bd5 	.word	0x00011bd5
   11bc8:	00011be5 	.word	0x00011be5
   11bcc:	00011bf5 	.word	0x00011bf5
   11bd0:	00011bfd 	.word	0x00011bfd
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
   11bd4:	4b0f      	ldr	r3, [pc, #60]	; (11c14 <cdcdf_acm_register_callback+0x68>)
   11bd6:	791b      	ldrb	r3, [r3, #4]
   11bd8:	683a      	ldr	r2, [r7, #0]
   11bda:	2102      	movs	r1, #2
   11bdc:	4618      	mov	r0, r3
   11bde:	4b0e      	ldr	r3, [pc, #56]	; (11c18 <cdcdf_acm_register_callback+0x6c>)
   11be0:	4798      	blx	r3
		break;
   11be2:	e012      	b.n	11c0a <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
   11be4:	4b0b      	ldr	r3, [pc, #44]	; (11c14 <cdcdf_acm_register_callback+0x68>)
   11be6:	78db      	ldrb	r3, [r3, #3]
   11be8:	683a      	ldr	r2, [r7, #0]
   11bea:	2102      	movs	r1, #2
   11bec:	4618      	mov	r0, r3
   11bee:	4b0a      	ldr	r3, [pc, #40]	; (11c18 <cdcdf_acm_register_callback+0x6c>)
   11bf0:	4798      	blx	r3
		break;
   11bf2:	e00a      	b.n	11c0a <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
   11bf4:	4a09      	ldr	r2, [pc, #36]	; (11c1c <cdcdf_acm_register_callback+0x70>)
   11bf6:	683b      	ldr	r3, [r7, #0]
   11bf8:	6013      	str	r3, [r2, #0]
		break;
   11bfa:	e006      	b.n	11c0a <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
   11bfc:	4a08      	ldr	r2, [pc, #32]	; (11c20 <cdcdf_acm_register_callback+0x74>)
   11bfe:	683b      	ldr	r3, [r7, #0]
   11c00:	6013      	str	r3, [r2, #0]
		break;
   11c02:	e002      	b.n	11c0a <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
   11c04:	f06f 030c 	mvn.w	r3, #12
   11c08:	e000      	b.n	11c0c <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
   11c0a:	2300      	movs	r3, #0
}
   11c0c:	4618      	mov	r0, r3
   11c0e:	3708      	adds	r7, #8
   11c10:	46bd      	mov	sp, r7
   11c12:	bd80      	pop	{r7, pc}
   11c14:	20008e54 	.word	0x20008e54
   11c18:	000080c9 	.word	0x000080c9
   11c1c:	20008e68 	.word	0x20008e68
   11c20:	20008e64 	.word	0x20008e64

00011c24 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
   11c24:	b480      	push	{r7}
   11c26:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
   11c28:	4b03      	ldr	r3, [pc, #12]	; (11c38 <cdcdf_acm_is_enabled+0x14>)
   11c2a:	795b      	ldrb	r3, [r3, #5]
}
   11c2c:	4618      	mov	r0, r3
   11c2e:	46bd      	mov	sp, r7
   11c30:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c34:	4770      	bx	lr
   11c36:	bf00      	nop
   11c38:	20008e54 	.word	0x20008e54

00011c3c <usb_get_u16>:
{
   11c3c:	b480      	push	{r7}
   11c3e:	b083      	sub	sp, #12
   11c40:	af00      	add	r7, sp, #0
   11c42:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   11c44:	687b      	ldr	r3, [r7, #4]
   11c46:	781b      	ldrb	r3, [r3, #0]
   11c48:	b29a      	uxth	r2, r3
   11c4a:	687b      	ldr	r3, [r7, #4]
   11c4c:	3301      	adds	r3, #1
   11c4e:	781b      	ldrb	r3, [r3, #0]
   11c50:	b29b      	uxth	r3, r3
   11c52:	021b      	lsls	r3, r3, #8
   11c54:	b29b      	uxth	r3, r3
   11c56:	4413      	add	r3, r2
   11c58:	b29b      	uxth	r3, r3
}
   11c5a:	4618      	mov	r0, r3
   11c5c:	370c      	adds	r7, #12
   11c5e:	46bd      	mov	sp, r7
   11c60:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c64:	4770      	bx	lr

00011c66 <usb_desc_len>:
{
   11c66:	b480      	push	{r7}
   11c68:	b083      	sub	sp, #12
   11c6a:	af00      	add	r7, sp, #0
   11c6c:	6078      	str	r0, [r7, #4]
	return desc[0];
   11c6e:	687b      	ldr	r3, [r7, #4]
   11c70:	781b      	ldrb	r3, [r3, #0]
}
   11c72:	4618      	mov	r0, r3
   11c74:	370c      	adds	r7, #12
   11c76:	46bd      	mov	sp, r7
   11c78:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c7c:	4770      	bx	lr
	...

00011c80 <usb_desc_next>:
{
   11c80:	b580      	push	{r7, lr}
   11c82:	b082      	sub	sp, #8
   11c84:	af00      	add	r7, sp, #0
   11c86:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   11c88:	6878      	ldr	r0, [r7, #4]
   11c8a:	4b05      	ldr	r3, [pc, #20]	; (11ca0 <usb_desc_next+0x20>)
   11c8c:	4798      	blx	r3
   11c8e:	4603      	mov	r3, r0
   11c90:	461a      	mov	r2, r3
   11c92:	687b      	ldr	r3, [r7, #4]
   11c94:	4413      	add	r3, r2
}
   11c96:	4618      	mov	r0, r3
   11c98:	3708      	adds	r7, #8
   11c9a:	46bd      	mov	sp, r7
   11c9c:	bd80      	pop	{r7, pc}
   11c9e:	bf00      	nop
   11ca0:	00011c67 	.word	0x00011c67

00011ca4 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
   11ca4:	b580      	push	{r7, lr}
   11ca6:	b082      	sub	sp, #8
   11ca8:	af00      	add	r7, sp, #0
   11caa:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   11cac:	687b      	ldr	r3, [r7, #4]
   11cae:	3302      	adds	r3, #2
   11cb0:	4618      	mov	r0, r3
   11cb2:	4b03      	ldr	r3, [pc, #12]	; (11cc0 <usb_cfg_desc_total_len+0x1c>)
   11cb4:	4798      	blx	r3
   11cb6:	4603      	mov	r3, r0
}
   11cb8:	4618      	mov	r0, r3
   11cba:	3708      	adds	r7, #8
   11cbc:	46bd      	mov	sp, r7
   11cbe:	bd80      	pop	{r7, pc}
   11cc0:	00011c3d 	.word	0x00011c3d

00011cc4 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
   11cc4:	b590      	push	{r4, r7, lr}
   11cc6:	b085      	sub	sp, #20
   11cc8:	af00      	add	r7, sp, #0
   11cca:	4603      	mov	r3, r0
   11ccc:	6039      	str	r1, [r7, #0]
   11cce:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
   11cd0:	2300      	movs	r3, #0
   11cd2:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
   11cd4:	683b      	ldr	r3, [r7, #0]
   11cd6:	799a      	ldrb	r2, [r3, #6]
   11cd8:	79db      	ldrb	r3, [r3, #7]
   11cda:	021b      	lsls	r3, r3, #8
   11cdc:	4313      	orrs	r3, r2
   11cde:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
   11ce0:	897b      	ldrh	r3, [r7, #10]
   11ce2:	2b12      	cmp	r3, #18
   11ce4:	d901      	bls.n	11cea <usbdc_get_dev_desc+0x26>
		length = 0x12;
   11ce6:	2312      	movs	r3, #18
   11ce8:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
   11cea:	68fb      	ldr	r3, [r7, #12]
   11cec:	2b00      	cmp	r3, #0
   11cee:	d10a      	bne.n	11d06 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   11cf0:	4b0f      	ldr	r3, [pc, #60]	; (11d30 <usbdc_get_dev_desc+0x6c>)
   11cf2:	681b      	ldr	r3, [r3, #0]
   11cf4:	6818      	ldr	r0, [r3, #0]
   11cf6:	4b0e      	ldr	r3, [pc, #56]	; (11d30 <usbdc_get_dev_desc+0x6c>)
   11cf8:	681b      	ldr	r3, [r3, #0]
   11cfa:	685b      	ldr	r3, [r3, #4]
   11cfc:	2201      	movs	r2, #1
   11cfe:	4619      	mov	r1, r3
   11d00:	4b0c      	ldr	r3, [pc, #48]	; (11d34 <usbdc_get_dev_desc+0x70>)
   11d02:	4798      	blx	r3
   11d04:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
   11d06:	68fb      	ldr	r3, [r7, #12]
   11d08:	2b00      	cmp	r3, #0
   11d0a:	d101      	bne.n	11d10 <usbdc_get_dev_desc+0x4c>
		return false;
   11d0c:	2300      	movs	r3, #0
   11d0e:	e00b      	b.n	11d28 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   11d10:	897a      	ldrh	r2, [r7, #10]
   11d12:	79f8      	ldrb	r0, [r7, #7]
   11d14:	2300      	movs	r3, #0
   11d16:	68f9      	ldr	r1, [r7, #12]
   11d18:	4c07      	ldr	r4, [pc, #28]	; (11d38 <usbdc_get_dev_desc+0x74>)
   11d1a:	47a0      	blx	r4
   11d1c:	4603      	mov	r3, r0
   11d1e:	2b00      	cmp	r3, #0
   11d20:	d001      	beq.n	11d26 <usbdc_get_dev_desc+0x62>
		return false;
   11d22:	2300      	movs	r3, #0
   11d24:	e000      	b.n	11d28 <usbdc_get_dev_desc+0x64>
	}
	return true;
   11d26:	2301      	movs	r3, #1
}
   11d28:	4618      	mov	r0, r3
   11d2a:	3714      	adds	r7, #20
   11d2c:	46bd      	mov	sp, r7
   11d2e:	bd90      	pop	{r4, r7, pc}
   11d30:	20008e6c 	.word	0x20008e6c
   11d34:	00012a39 	.word	0x00012a39
   11d38:	000127a9 	.word	0x000127a9

00011d3c <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
   11d3c:	b590      	push	{r4, r7, lr}
   11d3e:	b087      	sub	sp, #28
   11d40:	af00      	add	r7, sp, #0
   11d42:	4603      	mov	r3, r0
   11d44:	6039      	str	r1, [r7, #0]
   11d46:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
   11d48:	2300      	movs	r3, #0
   11d4a:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
   11d4c:	683b      	ldr	r3, [r7, #0]
   11d4e:	799a      	ldrb	r2, [r3, #6]
   11d50:	79db      	ldrb	r3, [r3, #7]
   11d52:	021b      	lsls	r3, r3, #8
   11d54:	4313      	orrs	r3, r2
   11d56:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
   11d58:	683b      	ldr	r3, [r7, #0]
   11d5a:	885b      	ldrh	r3, [r3, #2]
   11d5c:	b29b      	uxth	r3, r3
   11d5e:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11d60:	8a7a      	ldrh	r2, [r7, #18]
   11d62:	4b1e      	ldr	r3, [pc, #120]	; (11ddc <usbdc_get_cfg_desc+0xa0>)
   11d64:	7f1b      	ldrb	r3, [r3, #28]
   11d66:	3b01      	subs	r3, #1
   11d68:	4013      	ands	r3, r2
   11d6a:	2b00      	cmp	r3, #0
   11d6c:	bf0c      	ite	eq
   11d6e:	2301      	moveq	r3, #1
   11d70:	2300      	movne	r3, #0
   11d72:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   11d74:	697b      	ldr	r3, [r7, #20]
   11d76:	2b00      	cmp	r3, #0
   11d78:	d10c      	bne.n	11d94 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   11d7a:	4b18      	ldr	r3, [pc, #96]	; (11ddc <usbdc_get_cfg_desc+0xa0>)
   11d7c:	681b      	ldr	r3, [r3, #0]
   11d7e:	6818      	ldr	r0, [r3, #0]
   11d80:	4b16      	ldr	r3, [pc, #88]	; (11ddc <usbdc_get_cfg_desc+0xa0>)
   11d82:	681b      	ldr	r3, [r3, #0]
   11d84:	6859      	ldr	r1, [r3, #4]
   11d86:	7c3b      	ldrb	r3, [r7, #16]
   11d88:	3301      	adds	r3, #1
   11d8a:	b2db      	uxtb	r3, r3
   11d8c:	461a      	mov	r2, r3
   11d8e:	4b14      	ldr	r3, [pc, #80]	; (11de0 <usbdc_get_cfg_desc+0xa4>)
   11d90:	4798      	blx	r3
   11d92:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
   11d94:	697b      	ldr	r3, [r7, #20]
   11d96:	2b00      	cmp	r3, #0
   11d98:	d101      	bne.n	11d9e <usbdc_get_cfg_desc+0x62>
		return false;
   11d9a:	2300      	movs	r3, #0
   11d9c:	e019      	b.n	11dd2 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
   11d9e:	6978      	ldr	r0, [r7, #20]
   11da0:	4b10      	ldr	r3, [pc, #64]	; (11de4 <usbdc_get_cfg_desc+0xa8>)
   11da2:	4798      	blx	r3
   11da4:	4603      	mov	r3, r0
   11da6:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
   11da8:	8a7a      	ldrh	r2, [r7, #18]
   11daa:	89fb      	ldrh	r3, [r7, #14]
   11dac:	429a      	cmp	r2, r3
   11dae:	d802      	bhi.n	11db6 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
   11db0:	2300      	movs	r3, #0
   11db2:	747b      	strb	r3, [r7, #17]
   11db4:	e001      	b.n	11dba <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
   11db6:	89fb      	ldrh	r3, [r7, #14]
   11db8:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
   11dba:	8a7a      	ldrh	r2, [r7, #18]
   11dbc:	7c7b      	ldrb	r3, [r7, #17]
   11dbe:	79f8      	ldrb	r0, [r7, #7]
   11dc0:	6979      	ldr	r1, [r7, #20]
   11dc2:	4c09      	ldr	r4, [pc, #36]	; (11de8 <usbdc_get_cfg_desc+0xac>)
   11dc4:	47a0      	blx	r4
   11dc6:	4603      	mov	r3, r0
   11dc8:	2b00      	cmp	r3, #0
   11dca:	d001      	beq.n	11dd0 <usbdc_get_cfg_desc+0x94>
		return false;
   11dcc:	2300      	movs	r3, #0
   11dce:	e000      	b.n	11dd2 <usbdc_get_cfg_desc+0x96>
	}
	return true;
   11dd0:	2301      	movs	r3, #1
}
   11dd2:	4618      	mov	r0, r3
   11dd4:	371c      	adds	r7, #28
   11dd6:	46bd      	mov	sp, r7
   11dd8:	bd90      	pop	{r4, r7, pc}
   11dda:	bf00      	nop
   11ddc:	20008e6c 	.word	0x20008e6c
   11de0:	00012af9 	.word	0x00012af9
   11de4:	00011ca5 	.word	0x00011ca5
   11de8:	000127a9 	.word	0x000127a9

00011dec <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
   11dec:	b590      	push	{r4, r7, lr}
   11dee:	b085      	sub	sp, #20
   11df0:	af00      	add	r7, sp, #0
   11df2:	4603      	mov	r3, r0
   11df4:	6039      	str	r1, [r7, #0]
   11df6:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
   11df8:	683b      	ldr	r3, [r7, #0]
   11dfa:	799a      	ldrb	r2, [r3, #6]
   11dfc:	79db      	ldrb	r3, [r3, #7]
   11dfe:	021b      	lsls	r3, r3, #8
   11e00:	4313      	orrs	r3, r2
   11e02:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
   11e04:	683b      	ldr	r3, [r7, #0]
   11e06:	885b      	ldrh	r3, [r3, #2]
   11e08:	b29b      	uxth	r3, r3
   11e0a:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11e0c:	89fa      	ldrh	r2, [r7, #14]
   11e0e:	4b1a      	ldr	r3, [pc, #104]	; (11e78 <usbdc_get_str_desc+0x8c>)
   11e10:	7f1b      	ldrb	r3, [r3, #28]
   11e12:	3b01      	subs	r3, #1
   11e14:	4013      	ands	r3, r2
   11e16:	2b00      	cmp	r3, #0
   11e18:	bf0c      	ite	eq
   11e1a:	2301      	moveq	r3, #1
   11e1c:	2300      	movne	r3, #0
   11e1e:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   11e20:	4b15      	ldr	r3, [pc, #84]	; (11e78 <usbdc_get_str_desc+0x8c>)
   11e22:	681b      	ldr	r3, [r3, #0]
   11e24:	6818      	ldr	r0, [r3, #0]
   11e26:	4b14      	ldr	r3, [pc, #80]	; (11e78 <usbdc_get_str_desc+0x8c>)
   11e28:	681b      	ldr	r3, [r3, #0]
   11e2a:	685b      	ldr	r3, [r3, #4]
   11e2c:	7b3a      	ldrb	r2, [r7, #12]
   11e2e:	4619      	mov	r1, r3
   11e30:	4b12      	ldr	r3, [pc, #72]	; (11e7c <usbdc_get_str_desc+0x90>)
   11e32:	4798      	blx	r3
   11e34:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
   11e36:	68bb      	ldr	r3, [r7, #8]
   11e38:	2b00      	cmp	r3, #0
   11e3a:	d101      	bne.n	11e40 <usbdc_get_str_desc+0x54>
		return false;
   11e3c:	2300      	movs	r3, #0
   11e3e:	e017      	b.n	11e70 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
   11e40:	68bb      	ldr	r3, [r7, #8]
   11e42:	781b      	ldrb	r3, [r3, #0]
   11e44:	b29b      	uxth	r3, r3
   11e46:	89fa      	ldrh	r2, [r7, #14]
   11e48:	429a      	cmp	r2, r3
   11e4a:	d802      	bhi.n	11e52 <usbdc_get_str_desc+0x66>
		need_zlp = false;
   11e4c:	2300      	movs	r3, #0
   11e4e:	737b      	strb	r3, [r7, #13]
   11e50:	e002      	b.n	11e58 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
   11e52:	68bb      	ldr	r3, [r7, #8]
   11e54:	781b      	ldrb	r3, [r3, #0]
   11e56:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   11e58:	89fa      	ldrh	r2, [r7, #14]
   11e5a:	7b7b      	ldrb	r3, [r7, #13]
   11e5c:	79f8      	ldrb	r0, [r7, #7]
   11e5e:	68b9      	ldr	r1, [r7, #8]
   11e60:	4c07      	ldr	r4, [pc, #28]	; (11e80 <usbdc_get_str_desc+0x94>)
   11e62:	47a0      	blx	r4
   11e64:	4603      	mov	r3, r0
   11e66:	2b00      	cmp	r3, #0
   11e68:	d001      	beq.n	11e6e <usbdc_get_str_desc+0x82>
		return false;
   11e6a:	2300      	movs	r3, #0
   11e6c:	e000      	b.n	11e70 <usbdc_get_str_desc+0x84>
	}
	return true;
   11e6e:	2301      	movs	r3, #1
}
   11e70:	4618      	mov	r0, r3
   11e72:	3714      	adds	r7, #20
   11e74:	46bd      	mov	sp, r7
   11e76:	bd90      	pop	{r4, r7, pc}
   11e78:	20008e6c 	.word	0x20008e6c
   11e7c:	00012b71 	.word	0x00012b71
   11e80:	000127a9 	.word	0x000127a9

00011e84 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
   11e84:	b580      	push	{r7, lr}
   11e86:	b084      	sub	sp, #16
   11e88:	af00      	add	r7, sp, #0
   11e8a:	4603      	mov	r3, r0
   11e8c:	6039      	str	r1, [r7, #0]
   11e8e:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
   11e90:	683b      	ldr	r3, [r7, #0]
   11e92:	885b      	ldrh	r3, [r3, #2]
   11e94:	b29b      	uxth	r3, r3
   11e96:	0a1b      	lsrs	r3, r3, #8
   11e98:	b29b      	uxth	r3, r3
   11e9a:	73fb      	strb	r3, [r7, #15]
	switch (type) {
   11e9c:	7bfb      	ldrb	r3, [r7, #15]
   11e9e:	2b02      	cmp	r3, #2
   11ea0:	d00d      	beq.n	11ebe <usbdc_get_desc_req+0x3a>
   11ea2:	2b03      	cmp	r3, #3
   11ea4:	d012      	beq.n	11ecc <usbdc_get_desc_req+0x48>
   11ea6:	2b01      	cmp	r3, #1
   11ea8:	d002      	beq.n	11eb0 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
   11eaa:	bf00      	nop
	}
	return false;
   11eac:	2300      	movs	r3, #0
   11eae:	e013      	b.n	11ed8 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
   11eb0:	79fb      	ldrb	r3, [r7, #7]
   11eb2:	6839      	ldr	r1, [r7, #0]
   11eb4:	4618      	mov	r0, r3
   11eb6:	4b0a      	ldr	r3, [pc, #40]	; (11ee0 <usbdc_get_desc_req+0x5c>)
   11eb8:	4798      	blx	r3
   11eba:	4603      	mov	r3, r0
   11ebc:	e00c      	b.n	11ed8 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
   11ebe:	79fb      	ldrb	r3, [r7, #7]
   11ec0:	6839      	ldr	r1, [r7, #0]
   11ec2:	4618      	mov	r0, r3
   11ec4:	4b07      	ldr	r3, [pc, #28]	; (11ee4 <usbdc_get_desc_req+0x60>)
   11ec6:	4798      	blx	r3
   11ec8:	4603      	mov	r3, r0
   11eca:	e005      	b.n	11ed8 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
   11ecc:	79fb      	ldrb	r3, [r7, #7]
   11ece:	6839      	ldr	r1, [r7, #0]
   11ed0:	4618      	mov	r0, r3
   11ed2:	4b05      	ldr	r3, [pc, #20]	; (11ee8 <usbdc_get_desc_req+0x64>)
   11ed4:	4798      	blx	r3
   11ed6:	4603      	mov	r3, r0
}
   11ed8:	4618      	mov	r0, r3
   11eda:	3710      	adds	r7, #16
   11edc:	46bd      	mov	sp, r7
   11ede:	bd80      	pop	{r7, pc}
   11ee0:	00011cc5 	.word	0x00011cc5
   11ee4:	00011d3d 	.word	0x00011d3d
   11ee8:	00011ded 	.word	0x00011ded

00011eec <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
   11eec:	b590      	push	{r4, r7, lr}
   11eee:	b085      	sub	sp, #20
   11ef0:	af00      	add	r7, sp, #0
   11ef2:	4603      	mov	r3, r0
   11ef4:	6039      	str	r1, [r7, #0]
   11ef6:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11ef8:	683b      	ldr	r3, [r7, #0]
   11efa:	781b      	ldrb	r3, [r3, #0]
   11efc:	f003 031f 	and.w	r3, r3, #31
   11f00:	2b00      	cmp	r3, #0
   11f02:	db1b      	blt.n	11f3c <usbdc_get_status_req+0x50>
   11f04:	2b01      	cmp	r3, #1
   11f06:	dd02      	ble.n	11f0e <usbdc_get_status_req+0x22>
   11f08:	2b02      	cmp	r3, #2
   11f0a:	d003      	beq.n	11f14 <usbdc_get_status_req+0x28>
   11f0c:	e016      	b.n	11f3c <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
   11f0e:	2300      	movs	r3, #0
   11f10:	60fb      	str	r3, [r7, #12]
		break;
   11f12:	e015      	b.n	11f40 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   11f14:	683b      	ldr	r3, [r7, #0]
   11f16:	889b      	ldrh	r3, [r3, #4]
   11f18:	b29b      	uxth	r3, r3
   11f1a:	b2db      	uxtb	r3, r3
   11f1c:	2102      	movs	r1, #2
   11f1e:	4618      	mov	r0, r3
   11f20:	4b0f      	ldr	r3, [pc, #60]	; (11f60 <usbdc_get_status_req+0x74>)
   11f22:	4798      	blx	r3
   11f24:	4603      	mov	r3, r0
   11f26:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
   11f28:	68fb      	ldr	r3, [r7, #12]
   11f2a:	2b00      	cmp	r3, #0
   11f2c:	da01      	bge.n	11f32 <usbdc_get_status_req+0x46>
			return false;
   11f2e:	2300      	movs	r3, #0
   11f30:	e012      	b.n	11f58 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
   11f32:	68fb      	ldr	r3, [r7, #12]
   11f34:	f003 0301 	and.w	r3, r3, #1
   11f38:	60fb      	str	r3, [r7, #12]
		break;
   11f3a:	e001      	b.n	11f40 <usbdc_get_status_req+0x54>
	default:
		return false;
   11f3c:	2300      	movs	r3, #0
   11f3e:	e00b      	b.n	11f58 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
   11f40:	4b08      	ldr	r3, [pc, #32]	; (11f64 <usbdc_get_status_req+0x78>)
   11f42:	695b      	ldr	r3, [r3, #20]
   11f44:	89ba      	ldrh	r2, [r7, #12]
   11f46:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   11f48:	4b06      	ldr	r3, [pc, #24]	; (11f64 <usbdc_get_status_req+0x78>)
   11f4a:	6959      	ldr	r1, [r3, #20]
   11f4c:	79f8      	ldrb	r0, [r7, #7]
   11f4e:	2300      	movs	r3, #0
   11f50:	2202      	movs	r2, #2
   11f52:	4c05      	ldr	r4, [pc, #20]	; (11f68 <usbdc_get_status_req+0x7c>)
   11f54:	47a0      	blx	r4
	return true;
   11f56:	2301      	movs	r3, #1
}
   11f58:	4618      	mov	r0, r3
   11f5a:	3714      	adds	r7, #20
   11f5c:	46bd      	mov	sp, r7
   11f5e:	bd90      	pop	{r4, r7, pc}
   11f60:	00008075 	.word	0x00008075
   11f64:	20008e6c 	.word	0x20008e6c
   11f68:	000127a9 	.word	0x000127a9

00011f6c <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
   11f6c:	b590      	push	{r4, r7, lr}
   11f6e:	b085      	sub	sp, #20
   11f70:	af00      	add	r7, sp, #0
   11f72:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   11f74:	4b1f      	ldr	r3, [pc, #124]	; (11ff4 <usbdc_get_interface+0x88>)
   11f76:	691b      	ldr	r3, [r3, #16]
   11f78:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   11f7a:	4b1e      	ldr	r3, [pc, #120]	; (11ff4 <usbdc_get_interface+0x88>)
   11f7c:	7f5b      	ldrb	r3, [r3, #29]
   11f7e:	461a      	mov	r2, r3
   11f80:	687b      	ldr	r3, [r7, #4]
   11f82:	889b      	ldrh	r3, [r3, #4]
   11f84:	b29b      	uxth	r3, r3
   11f86:	fa42 f303 	asr.w	r3, r2, r3
   11f8a:	f003 0301 	and.w	r3, r3, #1
   11f8e:	2b00      	cmp	r3, #0
   11f90:	d128      	bne.n	11fe4 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
   11f92:	4b18      	ldr	r3, [pc, #96]	; (11ff4 <usbdc_get_interface+0x88>)
   11f94:	695b      	ldr	r3, [r3, #20]
   11f96:	2200      	movs	r2, #0
   11f98:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11f9a:	4b16      	ldr	r3, [pc, #88]	; (11ff4 <usbdc_get_interface+0x88>)
   11f9c:	6959      	ldr	r1, [r3, #20]
   11f9e:	2300      	movs	r3, #0
   11fa0:	2201      	movs	r2, #1
   11fa2:	2000      	movs	r0, #0
   11fa4:	4c14      	ldr	r4, [pc, #80]	; (11ff8 <usbdc_get_interface+0x8c>)
   11fa6:	47a0      	blx	r4
		return true;
   11fa8:	2301      	movs	r3, #1
   11faa:	e01f      	b.n	11fec <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   11fac:	68fb      	ldr	r3, [r7, #12]
   11fae:	685b      	ldr	r3, [r3, #4]
   11fb0:	687a      	ldr	r2, [r7, #4]
   11fb2:	2102      	movs	r1, #2
   11fb4:	68f8      	ldr	r0, [r7, #12]
   11fb6:	4798      	blx	r3
   11fb8:	60b8      	str	r0, [r7, #8]
   11fba:	68bb      	ldr	r3, [r7, #8]
   11fbc:	2b00      	cmp	r3, #0
   11fbe:	da03      	bge.n	11fc8 <usbdc_get_interface+0x5c>
			func = func->next;
   11fc0:	68fb      	ldr	r3, [r7, #12]
   11fc2:	681b      	ldr	r3, [r3, #0]
   11fc4:	60fb      	str	r3, [r7, #12]
   11fc6:	e00d      	b.n	11fe4 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   11fc8:	4b0a      	ldr	r3, [pc, #40]	; (11ff4 <usbdc_get_interface+0x88>)
   11fca:	695b      	ldr	r3, [r3, #20]
   11fcc:	68ba      	ldr	r2, [r7, #8]
   11fce:	b2d2      	uxtb	r2, r2
   11fd0:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11fd2:	4b08      	ldr	r3, [pc, #32]	; (11ff4 <usbdc_get_interface+0x88>)
   11fd4:	6959      	ldr	r1, [r3, #20]
   11fd6:	2300      	movs	r3, #0
   11fd8:	2201      	movs	r2, #1
   11fda:	2000      	movs	r0, #0
   11fdc:	4c06      	ldr	r4, [pc, #24]	; (11ff8 <usbdc_get_interface+0x8c>)
   11fde:	47a0      	blx	r4
			return true;
   11fe0:	2301      	movs	r3, #1
   11fe2:	e003      	b.n	11fec <usbdc_get_interface+0x80>
	while (NULL != func) {
   11fe4:	68fb      	ldr	r3, [r7, #12]
   11fe6:	2b00      	cmp	r3, #0
   11fe8:	d1e0      	bne.n	11fac <usbdc_get_interface+0x40>
		}
	}
	return false;
   11fea:	2300      	movs	r3, #0
}
   11fec:	4618      	mov	r0, r3
   11fee:	3714      	adds	r7, #20
   11ff0:	46bd      	mov	sp, r7
   11ff2:	bd90      	pop	{r4, r7, pc}
   11ff4:	20008e6c 	.word	0x20008e6c
   11ff8:	000127a9 	.word	0x000127a9

00011ffc <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
   11ffc:	b590      	push	{r4, r7, lr}
   11ffe:	b083      	sub	sp, #12
   12000:	af00      	add	r7, sp, #0
   12002:	4603      	mov	r3, r0
   12004:	6039      	str	r1, [r7, #0]
   12006:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   12008:	683b      	ldr	r3, [r7, #0]
   1200a:	785b      	ldrb	r3, [r3, #1]
   1200c:	2b0a      	cmp	r3, #10
   1200e:	d83a      	bhi.n	12086 <usbdc_get_req+0x8a>
   12010:	a201      	add	r2, pc, #4	; (adr r2, 12018 <usbdc_get_req+0x1c>)
   12012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12016:	bf00      	nop
   12018:	0001206f 	.word	0x0001206f
   1201c:	00012087 	.word	0x00012087
   12020:	00012087 	.word	0x00012087
   12024:	00012087 	.word	0x00012087
   12028:	00012087 	.word	0x00012087
   1202c:	00012087 	.word	0x00012087
   12030:	00012045 	.word	0x00012045
   12034:	00012087 	.word	0x00012087
   12038:	00012053 	.word	0x00012053
   1203c:	00012087 	.word	0x00012087
   12040:	0001207d 	.word	0x0001207d
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
   12044:	79fb      	ldrb	r3, [r7, #7]
   12046:	6839      	ldr	r1, [r7, #0]
   12048:	4618      	mov	r0, r3
   1204a:	4b11      	ldr	r3, [pc, #68]	; (12090 <usbdc_get_req+0x94>)
   1204c:	4798      	blx	r3
   1204e:	4603      	mov	r3, r0
   12050:	e01a      	b.n	12088 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   12052:	4b10      	ldr	r3, [pc, #64]	; (12094 <usbdc_get_req+0x98>)
   12054:	695b      	ldr	r3, [r3, #20]
   12056:	4a0f      	ldr	r2, [pc, #60]	; (12094 <usbdc_get_req+0x98>)
   12058:	7ed2      	ldrb	r2, [r2, #27]
   1205a:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   1205c:	4b0d      	ldr	r3, [pc, #52]	; (12094 <usbdc_get_req+0x98>)
   1205e:	6959      	ldr	r1, [r3, #20]
   12060:	79f8      	ldrb	r0, [r7, #7]
   12062:	2300      	movs	r3, #0
   12064:	2201      	movs	r2, #1
   12066:	4c0c      	ldr	r4, [pc, #48]	; (12098 <usbdc_get_req+0x9c>)
   12068:	47a0      	blx	r4
		return true;
   1206a:	2301      	movs	r3, #1
   1206c:	e00c      	b.n	12088 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
   1206e:	79fb      	ldrb	r3, [r7, #7]
   12070:	6839      	ldr	r1, [r7, #0]
   12072:	4618      	mov	r0, r3
   12074:	4b09      	ldr	r3, [pc, #36]	; (1209c <usbdc_get_req+0xa0>)
   12076:	4798      	blx	r3
   12078:	4603      	mov	r3, r0
   1207a:	e005      	b.n	12088 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
   1207c:	6838      	ldr	r0, [r7, #0]
   1207e:	4b08      	ldr	r3, [pc, #32]	; (120a0 <usbdc_get_req+0xa4>)
   12080:	4798      	blx	r3
   12082:	4603      	mov	r3, r0
   12084:	e000      	b.n	12088 <usbdc_get_req+0x8c>
	default:
		return false;
   12086:	2300      	movs	r3, #0
	}
}
   12088:	4618      	mov	r0, r3
   1208a:	370c      	adds	r7, #12
   1208c:	46bd      	mov	sp, r7
   1208e:	bd90      	pop	{r4, r7, pc}
   12090:	00011e85 	.word	0x00011e85
   12094:	20008e6c 	.word	0x20008e6c
   12098:	000127a9 	.word	0x000127a9
   1209c:	00011eed 	.word	0x00011eed
   120a0:	00011f6d 	.word	0x00011f6d

000120a4 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   120a4:	b590      	push	{r4, r7, lr}
   120a6:	b083      	sub	sp, #12
   120a8:	af00      	add	r7, sp, #0
   120aa:	4603      	mov	r3, r0
   120ac:	6039      	str	r1, [r7, #0]
   120ae:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   120b0:	683b      	ldr	r3, [r7, #0]
   120b2:	781b      	ldrb	r3, [r3, #0]
   120b4:	f003 031f 	and.w	r3, r3, #31
   120b8:	2b02      	cmp	r3, #2
   120ba:	d116      	bne.n	120ea <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   120bc:	683b      	ldr	r3, [r7, #0]
   120be:	88db      	ldrh	r3, [r3, #6]
   120c0:	b29b      	uxth	r3, r3
   120c2:	2b00      	cmp	r3, #0
   120c4:	d001      	beq.n	120ca <usbdc_clear_ftr_req+0x26>
			return false;
   120c6:	2300      	movs	r3, #0
   120c8:	e010      	b.n	120ec <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   120ca:	683b      	ldr	r3, [r7, #0]
   120cc:	889b      	ldrh	r3, [r3, #4]
   120ce:	b29b      	uxth	r3, r3
   120d0:	b2db      	uxtb	r3, r3
   120d2:	2100      	movs	r1, #0
   120d4:	4618      	mov	r0, r3
   120d6:	4b07      	ldr	r3, [pc, #28]	; (120f4 <usbdc_clear_ftr_req+0x50>)
   120d8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   120da:	79f8      	ldrb	r0, [r7, #7]
   120dc:	2301      	movs	r3, #1
   120de:	2200      	movs	r2, #0
   120e0:	2100      	movs	r1, #0
   120e2:	4c05      	ldr	r4, [pc, #20]	; (120f8 <usbdc_clear_ftr_req+0x54>)
   120e4:	47a0      	blx	r4
		return true;
   120e6:	2301      	movs	r3, #1
   120e8:	e000      	b.n	120ec <usbdc_clear_ftr_req+0x48>
	default:
		return false;
   120ea:	2300      	movs	r3, #0
	}
}
   120ec:	4618      	mov	r0, r3
   120ee:	370c      	adds	r7, #12
   120f0:	46bd      	mov	sp, r7
   120f2:	bd90      	pop	{r4, r7, pc}
   120f4:	00008075 	.word	0x00008075
   120f8:	000127a9 	.word	0x000127a9

000120fc <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   120fc:	b590      	push	{r4, r7, lr}
   120fe:	b083      	sub	sp, #12
   12100:	af00      	add	r7, sp, #0
   12102:	4603      	mov	r3, r0
   12104:	6039      	str	r1, [r7, #0]
   12106:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   12108:	683b      	ldr	r3, [r7, #0]
   1210a:	781b      	ldrb	r3, [r3, #0]
   1210c:	f003 031f 	and.w	r3, r3, #31
   12110:	2b02      	cmp	r3, #2
   12112:	d116      	bne.n	12142 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   12114:	683b      	ldr	r3, [r7, #0]
   12116:	88db      	ldrh	r3, [r3, #6]
   12118:	b29b      	uxth	r3, r3
   1211a:	2b00      	cmp	r3, #0
   1211c:	d001      	beq.n	12122 <usbdc_set_ftr_req+0x26>
			return false;
   1211e:	2300      	movs	r3, #0
   12120:	e010      	b.n	12144 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   12122:	683b      	ldr	r3, [r7, #0]
   12124:	889b      	ldrh	r3, [r3, #4]
   12126:	b29b      	uxth	r3, r3
   12128:	b2db      	uxtb	r3, r3
   1212a:	2101      	movs	r1, #1
   1212c:	4618      	mov	r0, r3
   1212e:	4b07      	ldr	r3, [pc, #28]	; (1214c <usbdc_set_ftr_req+0x50>)
   12130:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   12132:	79f8      	ldrb	r0, [r7, #7]
   12134:	2301      	movs	r3, #1
   12136:	2200      	movs	r2, #0
   12138:	2100      	movs	r1, #0
   1213a:	4c05      	ldr	r4, [pc, #20]	; (12150 <usbdc_set_ftr_req+0x54>)
   1213c:	47a0      	blx	r4
		return true;
   1213e:	2301      	movs	r3, #1
   12140:	e000      	b.n	12144 <usbdc_set_ftr_req+0x48>
	default:
		return false;
   12142:	2300      	movs	r3, #0
	}
}
   12144:	4618      	mov	r0, r3
   12146:	370c      	adds	r7, #12
   12148:	46bd      	mov	sp, r7
   1214a:	bd90      	pop	{r4, r7, pc}
   1214c:	00008075 	.word	0x00008075
   12150:	000127a9 	.word	0x000127a9

00012154 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
   12154:	b580      	push	{r7, lr}
   12156:	b082      	sub	sp, #8
   12158:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   1215a:	4b0a      	ldr	r3, [pc, #40]	; (12184 <usbdc_unconfig+0x30>)
   1215c:	691b      	ldr	r3, [r3, #16]
   1215e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   12160:	e008      	b.n	12174 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
   12162:	687b      	ldr	r3, [r7, #4]
   12164:	685b      	ldr	r3, [r3, #4]
   12166:	2200      	movs	r2, #0
   12168:	2101      	movs	r1, #1
   1216a:	6878      	ldr	r0, [r7, #4]
   1216c:	4798      	blx	r3
		func = func->next;
   1216e:	687b      	ldr	r3, [r7, #4]
   12170:	681b      	ldr	r3, [r3, #0]
   12172:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   12174:	687b      	ldr	r3, [r7, #4]
   12176:	2b00      	cmp	r3, #0
   12178:	d1f3      	bne.n	12162 <usbdc_unconfig+0xe>
	}
}
   1217a:	bf00      	nop
   1217c:	3708      	adds	r7, #8
   1217e:	46bd      	mov	sp, r7
   12180:	bd80      	pop	{r7, pc}
   12182:	bf00      	nop
   12184:	20008e6c 	.word	0x20008e6c

00012188 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
   12188:	b580      	push	{r7, lr}
   1218a:	b088      	sub	sp, #32
   1218c:	af00      	add	r7, sp, #0
   1218e:	4603      	mov	r3, r0
   12190:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
   12192:	2300      	movs	r3, #0
   12194:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
   12196:	23ff      	movs	r3, #255	; 0xff
   12198:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
   1219a:	79fb      	ldrb	r3, [r7, #7]
   1219c:	2b00      	cmp	r3, #0
   1219e:	d103      	bne.n	121a8 <usbdc_set_config+0x20>
		usbdc_unconfig();
   121a0:	4b2e      	ldr	r3, [pc, #184]	; (1225c <usbdc_set_config+0xd4>)
   121a2:	4798      	blx	r3
		return true;
   121a4:	2301      	movs	r3, #1
   121a6:	e055      	b.n	12254 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   121a8:	69bb      	ldr	r3, [r7, #24]
   121aa:	2b00      	cmp	r3, #0
   121ac:	d10a      	bne.n	121c4 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   121ae:	4b2c      	ldr	r3, [pc, #176]	; (12260 <usbdc_set_config+0xd8>)
   121b0:	681b      	ldr	r3, [r3, #0]
   121b2:	6818      	ldr	r0, [r3, #0]
   121b4:	4b2a      	ldr	r3, [pc, #168]	; (12260 <usbdc_set_config+0xd8>)
   121b6:	681b      	ldr	r3, [r3, #0]
   121b8:	685b      	ldr	r3, [r3, #4]
   121ba:	79fa      	ldrb	r2, [r7, #7]
   121bc:	4619      	mov	r1, r3
   121be:	4b29      	ldr	r3, [pc, #164]	; (12264 <usbdc_set_config+0xdc>)
   121c0:	4798      	blx	r3
   121c2:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
   121c4:	69bb      	ldr	r3, [r7, #24]
   121c6:	2b00      	cmp	r3, #0
   121c8:	d101      	bne.n	121ce <usbdc_set_config+0x46>
		return false;
   121ca:	2300      	movs	r3, #0
   121cc:	e042      	b.n	12254 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
   121ce:	69b8      	ldr	r0, [r7, #24]
   121d0:	4b25      	ldr	r3, [pc, #148]	; (12268 <usbdc_set_config+0xe0>)
   121d2:	4798      	blx	r3
   121d4:	4603      	mov	r3, r0
   121d6:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
   121d8:	8abb      	ldrh	r3, [r7, #20]
   121da:	69ba      	ldr	r2, [r7, #24]
   121dc:	4413      	add	r3, r2
   121de:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   121e0:	693b      	ldr	r3, [r7, #16]
   121e2:	2204      	movs	r2, #4
   121e4:	4619      	mov	r1, r3
   121e6:	69b8      	ldr	r0, [r7, #24]
   121e8:	4b20      	ldr	r3, [pc, #128]	; (1226c <usbdc_set_config+0xe4>)
   121ea:	4798      	blx	r3
   121ec:	4603      	mov	r3, r0
   121ee:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
   121f0:	e02c      	b.n	1224c <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   121f2:	68fb      	ldr	r3, [r7, #12]
   121f4:	3302      	adds	r3, #2
   121f6:	781b      	ldrb	r3, [r3, #0]
   121f8:	7dfa      	ldrb	r2, [r7, #23]
   121fa:	429a      	cmp	r2, r3
   121fc:	d018      	beq.n	12230 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
   121fe:	68fb      	ldr	r3, [r7, #12]
   12200:	789b      	ldrb	r3, [r3, #2]
   12202:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   12204:	4b16      	ldr	r3, [pc, #88]	; (12260 <usbdc_set_config+0xd8>)
   12206:	691b      	ldr	r3, [r3, #16]
   12208:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   1220a:	e00c      	b.n	12226 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   1220c:	69fb      	ldr	r3, [r7, #28]
   1220e:	685b      	ldr	r3, [r3, #4]
   12210:	f107 020c 	add.w	r2, r7, #12
   12214:	2100      	movs	r1, #0
   12216:	69f8      	ldr	r0, [r7, #28]
   12218:	4798      	blx	r3
   1221a:	4603      	mov	r3, r0
   1221c:	2b00      	cmp	r3, #0
   1221e:	d006      	beq.n	1222e <usbdc_set_config+0xa6>
					func = func->next;
   12220:	69fb      	ldr	r3, [r7, #28]
   12222:	681b      	ldr	r3, [r3, #0]
   12224:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   12226:	69fb      	ldr	r3, [r7, #28]
   12228:	2b00      	cmp	r3, #0
   1222a:	d1ef      	bne.n	1220c <usbdc_set_config+0x84>
   1222c:	e000      	b.n	12230 <usbdc_set_config+0xa8>
				} else {
					break;
   1222e:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
   12230:	68fb      	ldr	r3, [r7, #12]
   12232:	4618      	mov	r0, r3
   12234:	4b0e      	ldr	r3, [pc, #56]	; (12270 <usbdc_set_config+0xe8>)
   12236:	4798      	blx	r3
   12238:	4603      	mov	r3, r0
   1223a:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   1223c:	68fb      	ldr	r3, [r7, #12]
   1223e:	6939      	ldr	r1, [r7, #16]
   12240:	2204      	movs	r2, #4
   12242:	4618      	mov	r0, r3
   12244:	4b09      	ldr	r3, [pc, #36]	; (1226c <usbdc_set_config+0xe4>)
   12246:	4798      	blx	r3
   12248:	4603      	mov	r3, r0
   1224a:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
   1224c:	68fb      	ldr	r3, [r7, #12]
   1224e:	2b00      	cmp	r3, #0
   12250:	d1cf      	bne.n	121f2 <usbdc_set_config+0x6a>
	}
	return true;
   12252:	2301      	movs	r3, #1
}
   12254:	4618      	mov	r0, r3
   12256:	3720      	adds	r7, #32
   12258:	46bd      	mov	sp, r7
   1225a:	bd80      	pop	{r7, pc}
   1225c:	00012155 	.word	0x00012155
   12260:	20008e6c 	.word	0x20008e6c
   12264:	00012af9 	.word	0x00012af9
   12268:	00011ca5 	.word	0x00011ca5
   1226c:	00012a39 	.word	0x00012a39
   12270:	00011c81 	.word	0x00011c81

00012274 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
   12274:	b580      	push	{r7, lr}
   12276:	b082      	sub	sp, #8
   12278:	af00      	add	r7, sp, #0
   1227a:	4603      	mov	r3, r0
   1227c:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
   1227e:	79fb      	ldrb	r3, [r7, #7]
   12280:	4618      	mov	r0, r3
   12282:	4b03      	ldr	r3, [pc, #12]	; (12290 <usbdc_set_address+0x1c>)
   12284:	4798      	blx	r3
}
   12286:	bf00      	nop
   12288:	3708      	adds	r7, #8
   1228a:	46bd      	mov	sp, r7
   1228c:	bd80      	pop	{r7, pc}
   1228e:	bf00      	nop
   12290:	00007c91 	.word	0x00007c91

00012294 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
   12294:	b590      	push	{r4, r7, lr}
   12296:	b087      	sub	sp, #28
   12298:	af00      	add	r7, sp, #0
   1229a:	4603      	mov	r3, r0
   1229c:	460a      	mov	r2, r1
   1229e:	80fb      	strh	r3, [r7, #6]
   122a0:	4613      	mov	r3, r2
   122a2:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
   122a4:	2300      	movs	r3, #0
   122a6:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
   122a8:	693b      	ldr	r3, [r7, #16]
   122aa:	2b00      	cmp	r3, #0
   122ac:	d10b      	bne.n	122c6 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   122ae:	4b43      	ldr	r3, [pc, #268]	; (123bc <usbdc_set_interface+0x128>)
   122b0:	681b      	ldr	r3, [r3, #0]
   122b2:	6818      	ldr	r0, [r3, #0]
   122b4:	4b41      	ldr	r3, [pc, #260]	; (123bc <usbdc_set_interface+0x128>)
   122b6:	681b      	ldr	r3, [r3, #0]
   122b8:	6859      	ldr	r1, [r3, #4]
   122ba:	4b40      	ldr	r3, [pc, #256]	; (123bc <usbdc_set_interface+0x128>)
   122bc:	7edb      	ldrb	r3, [r3, #27]
   122be:	461a      	mov	r2, r3
   122c0:	4b3f      	ldr	r3, [pc, #252]	; (123c0 <usbdc_set_interface+0x12c>)
   122c2:	4798      	blx	r3
   122c4:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
   122c6:	693b      	ldr	r3, [r7, #16]
   122c8:	2b00      	cmp	r3, #0
   122ca:	d101      	bne.n	122d0 <usbdc_set_interface+0x3c>
		return false;
   122cc:	2300      	movs	r3, #0
   122ce:	e071      	b.n	123b4 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
   122d0:	693b      	ldr	r3, [r7, #16]
   122d2:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   122d4:	6938      	ldr	r0, [r7, #16]
   122d6:	4b3b      	ldr	r3, [pc, #236]	; (123c4 <usbdc_set_interface+0x130>)
   122d8:	4798      	blx	r3
   122da:	4603      	mov	r3, r0
   122dc:	461a      	mov	r2, r3
   122de:	693b      	ldr	r3, [r7, #16]
   122e0:	4413      	add	r3, r2
   122e2:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   122e4:	68bb      	ldr	r3, [r7, #8]
   122e6:	68f9      	ldr	r1, [r7, #12]
   122e8:	2204      	movs	r2, #4
   122ea:	4618      	mov	r0, r3
   122ec:	4b36      	ldr	r3, [pc, #216]	; (123c8 <usbdc_set_interface+0x134>)
   122ee:	4798      	blx	r3
   122f0:	6138      	str	r0, [r7, #16]
   122f2:	693b      	ldr	r3, [r7, #16]
   122f4:	2b00      	cmp	r3, #0
   122f6:	d113      	bne.n	12320 <usbdc_set_interface+0x8c>
		return false;
   122f8:	2300      	movs	r3, #0
   122fa:	e05b      	b.n	123b4 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
   122fc:	68bb      	ldr	r3, [r7, #8]
   122fe:	4618      	mov	r0, r3
   12300:	4b32      	ldr	r3, [pc, #200]	; (123cc <usbdc_set_interface+0x138>)
   12302:	4798      	blx	r3
   12304:	4603      	mov	r3, r0
   12306:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   12308:	68bb      	ldr	r3, [r7, #8]
   1230a:	68f9      	ldr	r1, [r7, #12]
   1230c:	2204      	movs	r2, #4
   1230e:	4618      	mov	r0, r3
   12310:	4b2d      	ldr	r3, [pc, #180]	; (123c8 <usbdc_set_interface+0x134>)
   12312:	4798      	blx	r3
   12314:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
   12316:	693b      	ldr	r3, [r7, #16]
   12318:	2b00      	cmp	r3, #0
   1231a:	d101      	bne.n	12320 <usbdc_set_interface+0x8c>
			return false;
   1231c:	2300      	movs	r3, #0
   1231e:	e049      	b.n	123b4 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   12320:	693b      	ldr	r3, [r7, #16]
   12322:	3302      	adds	r3, #2
   12324:	781b      	ldrb	r3, [r3, #0]
   12326:	b29b      	uxth	r3, r3
   12328:	88ba      	ldrh	r2, [r7, #4]
   1232a:	429a      	cmp	r2, r3
   1232c:	d1e6      	bne.n	122fc <usbdc_set_interface+0x68>
   1232e:	693b      	ldr	r3, [r7, #16]
   12330:	3303      	adds	r3, #3
   12332:	781b      	ldrb	r3, [r3, #0]
   12334:	b29b      	uxth	r3, r3
   12336:	88fa      	ldrh	r2, [r7, #6]
   12338:	429a      	cmp	r2, r3
   1233a:	d1df      	bne.n	122fc <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
   1233c:	693b      	ldr	r3, [r7, #16]
   1233e:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   12340:	4b1e      	ldr	r3, [pc, #120]	; (123bc <usbdc_set_interface+0x128>)
   12342:	691b      	ldr	r3, [r3, #16]
   12344:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
   12346:	e031      	b.n	123ac <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   12348:	697b      	ldr	r3, [r7, #20]
   1234a:	685b      	ldr	r3, [r3, #4]
   1234c:	f107 0208 	add.w	r2, r7, #8
   12350:	2101      	movs	r1, #1
   12352:	6978      	ldr	r0, [r7, #20]
   12354:	4798      	blx	r3
   12356:	4603      	mov	r3, r0
   12358:	2b00      	cmp	r3, #0
   1235a:	d003      	beq.n	12364 <usbdc_set_interface+0xd0>
			func = func->next;
   1235c:	697b      	ldr	r3, [r7, #20]
   1235e:	681b      	ldr	r3, [r3, #0]
   12360:	617b      	str	r3, [r7, #20]
   12362:	e023      	b.n	123ac <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   12364:	697b      	ldr	r3, [r7, #20]
   12366:	685b      	ldr	r3, [r3, #4]
   12368:	f107 0208 	add.w	r2, r7, #8
   1236c:	2100      	movs	r1, #0
   1236e:	6978      	ldr	r0, [r7, #20]
   12370:	4798      	blx	r3
   12372:	4603      	mov	r3, r0
   12374:	2b00      	cmp	r3, #0
   12376:	d117      	bne.n	123a8 <usbdc_set_interface+0x114>
			if (alt_set) {
   12378:	88fb      	ldrh	r3, [r7, #6]
   1237a:	2b00      	cmp	r3, #0
   1237c:	d00c      	beq.n	12398 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
   1237e:	4b0f      	ldr	r3, [pc, #60]	; (123bc <usbdc_set_interface+0x128>)
   12380:	7f5b      	ldrb	r3, [r3, #29]
   12382:	b25a      	sxtb	r2, r3
   12384:	88bb      	ldrh	r3, [r7, #4]
   12386:	2101      	movs	r1, #1
   12388:	fa01 f303 	lsl.w	r3, r1, r3
   1238c:	b25b      	sxtb	r3, r3
   1238e:	4313      	orrs	r3, r2
   12390:	b25b      	sxtb	r3, r3
   12392:	b2da      	uxtb	r2, r3
   12394:	4b09      	ldr	r3, [pc, #36]	; (123bc <usbdc_set_interface+0x128>)
   12396:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
   12398:	2300      	movs	r3, #0
   1239a:	2200      	movs	r2, #0
   1239c:	2100      	movs	r1, #0
   1239e:	2000      	movs	r0, #0
   123a0:	4c0b      	ldr	r4, [pc, #44]	; (123d0 <usbdc_set_interface+0x13c>)
   123a2:	47a0      	blx	r4
			return true;
   123a4:	2301      	movs	r3, #1
   123a6:	e005      	b.n	123b4 <usbdc_set_interface+0x120>
		} else {
			return false;
   123a8:	2300      	movs	r3, #0
   123aa:	e003      	b.n	123b4 <usbdc_set_interface+0x120>
	while (NULL != func) {
   123ac:	697b      	ldr	r3, [r7, #20]
   123ae:	2b00      	cmp	r3, #0
   123b0:	d1ca      	bne.n	12348 <usbdc_set_interface+0xb4>
		}
	}

	return false;
   123b2:	2300      	movs	r3, #0
}
   123b4:	4618      	mov	r0, r3
   123b6:	371c      	adds	r7, #28
   123b8:	46bd      	mov	sp, r7
   123ba:	bd90      	pop	{r4, r7, pc}
   123bc:	20008e6c 	.word	0x20008e6c
   123c0:	00012af9 	.word	0x00012af9
   123c4:	00011ca5 	.word	0x00011ca5
   123c8:	00012a39 	.word	0x00012a39
   123cc:	00011c81 	.word	0x00011c81
   123d0:	000127a9 	.word	0x000127a9

000123d4 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
   123d4:	b590      	push	{r4, r7, lr}
   123d6:	b083      	sub	sp, #12
   123d8:	af00      	add	r7, sp, #0
   123da:	4603      	mov	r3, r0
   123dc:	6039      	str	r1, [r7, #0]
   123de:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   123e0:	683b      	ldr	r3, [r7, #0]
   123e2:	785b      	ldrb	r3, [r3, #1]
   123e4:	3b01      	subs	r3, #1
   123e6:	2b0a      	cmp	r3, #10
   123e8:	d85b      	bhi.n	124a2 <usbdc_set_req+0xce>
   123ea:	a201      	add	r2, pc, #4	; (adr r2, 123f0 <usbdc_set_req+0x1c>)
   123ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   123f0:	0001246f 	.word	0x0001246f
   123f4:	000124a3 	.word	0x000124a3
   123f8:	0001247d 	.word	0x0001247d
   123fc:	000124a3 	.word	0x000124a3
   12400:	0001241d 	.word	0x0001241d
   12404:	000124a3 	.word	0x000124a3
   12408:	000124a3 	.word	0x000124a3
   1240c:	000124a3 	.word	0x000124a3
   12410:	00012437 	.word	0x00012437
   12414:	000124a3 	.word	0x000124a3
   12418:	0001248b 	.word	0x0001248b
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   1241c:	79f8      	ldrb	r0, [r7, #7]
   1241e:	2301      	movs	r3, #1
   12420:	2200      	movs	r2, #0
   12422:	2100      	movs	r1, #0
   12424:	4c21      	ldr	r4, [pc, #132]	; (124ac <usbdc_set_req+0xd8>)
   12426:	47a0      	blx	r4
   12428:	4603      	mov	r3, r0
   1242a:	2b00      	cmp	r3, #0
   1242c:	bf0c      	ite	eq
   1242e:	2301      	moveq	r3, #1
   12430:	2300      	movne	r3, #0
   12432:	b2db      	uxtb	r3, r3
   12434:	e036      	b.n	124a4 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
   12436:	683b      	ldr	r3, [r7, #0]
   12438:	885b      	ldrh	r3, [r3, #2]
   1243a:	b29b      	uxth	r3, r3
   1243c:	b2db      	uxtb	r3, r3
   1243e:	4618      	mov	r0, r3
   12440:	4b1b      	ldr	r3, [pc, #108]	; (124b0 <usbdc_set_req+0xdc>)
   12442:	4798      	blx	r3
   12444:	4603      	mov	r3, r0
   12446:	f083 0301 	eor.w	r3, r3, #1
   1244a:	b2db      	uxtb	r3, r3
   1244c:	2b00      	cmp	r3, #0
   1244e:	d001      	beq.n	12454 <usbdc_set_req+0x80>
			return false;
   12450:	2300      	movs	r3, #0
   12452:	e027      	b.n	124a4 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   12454:	79f8      	ldrb	r0, [r7, #7]
   12456:	2301      	movs	r3, #1
   12458:	2200      	movs	r2, #0
   1245a:	2100      	movs	r1, #0
   1245c:	4c13      	ldr	r4, [pc, #76]	; (124ac <usbdc_set_req+0xd8>)
   1245e:	47a0      	blx	r4
   12460:	4603      	mov	r3, r0
   12462:	2b00      	cmp	r3, #0
   12464:	bf0c      	ite	eq
   12466:	2301      	moveq	r3, #1
   12468:	2300      	movne	r3, #0
   1246a:	b2db      	uxtb	r3, r3
   1246c:	e01a      	b.n	124a4 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
   1246e:	79fb      	ldrb	r3, [r7, #7]
   12470:	6839      	ldr	r1, [r7, #0]
   12472:	4618      	mov	r0, r3
   12474:	4b0f      	ldr	r3, [pc, #60]	; (124b4 <usbdc_set_req+0xe0>)
   12476:	4798      	blx	r3
   12478:	4603      	mov	r3, r0
   1247a:	e013      	b.n	124a4 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
   1247c:	79fb      	ldrb	r3, [r7, #7]
   1247e:	6839      	ldr	r1, [r7, #0]
   12480:	4618      	mov	r0, r3
   12482:	4b0d      	ldr	r3, [pc, #52]	; (124b8 <usbdc_set_req+0xe4>)
   12484:	4798      	blx	r3
   12486:	4603      	mov	r3, r0
   12488:	e00c      	b.n	124a4 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
   1248a:	683b      	ldr	r3, [r7, #0]
   1248c:	885b      	ldrh	r3, [r3, #2]
   1248e:	b29a      	uxth	r2, r3
   12490:	683b      	ldr	r3, [r7, #0]
   12492:	889b      	ldrh	r3, [r3, #4]
   12494:	b29b      	uxth	r3, r3
   12496:	4619      	mov	r1, r3
   12498:	4610      	mov	r0, r2
   1249a:	4b08      	ldr	r3, [pc, #32]	; (124bc <usbdc_set_req+0xe8>)
   1249c:	4798      	blx	r3
   1249e:	4603      	mov	r3, r0
   124a0:	e000      	b.n	124a4 <usbdc_set_req+0xd0>
	default:
		return false;
   124a2:	2300      	movs	r3, #0
	}
}
   124a4:	4618      	mov	r0, r3
   124a6:	370c      	adds	r7, #12
   124a8:	46bd      	mov	sp, r7
   124aa:	bd90      	pop	{r4, r7, pc}
   124ac:	000127a9 	.word	0x000127a9
   124b0:	00012189 	.word	0x00012189
   124b4:	000120a5 	.word	0x000120a5
   124b8:	000120fd 	.word	0x000120fd
   124bc:	00012295 	.word	0x00012295

000124c0 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   124c0:	b580      	push	{r7, lr}
   124c2:	b082      	sub	sp, #8
   124c4:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   124c6:	4b0a      	ldr	r3, [pc, #40]	; (124f0 <usbdc_sof_notify+0x30>)
   124c8:	685b      	ldr	r3, [r3, #4]
   124ca:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   124cc:	e009      	b.n	124e2 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   124ce:	687b      	ldr	r3, [r7, #4]
   124d0:	685b      	ldr	r3, [r3, #4]
   124d2:	2b00      	cmp	r3, #0
   124d4:	d002      	beq.n	124dc <usbdc_sof_notify+0x1c>
			sof->cb();
   124d6:	687b      	ldr	r3, [r7, #4]
   124d8:	685b      	ldr	r3, [r3, #4]
   124da:	4798      	blx	r3
		}
		sof = sof->next;
   124dc:	687b      	ldr	r3, [r7, #4]
   124de:	681b      	ldr	r3, [r3, #0]
   124e0:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   124e2:	687b      	ldr	r3, [r7, #4]
   124e4:	2b00      	cmp	r3, #0
   124e6:	d1f2      	bne.n	124ce <usbdc_sof_notify+0xe>
	}
}
   124e8:	bf00      	nop
   124ea:	3708      	adds	r7, #8
   124ec:	46bd      	mov	sp, r7
   124ee:	bd80      	pop	{r7, pc}
   124f0:	20008e6c 	.word	0x20008e6c

000124f4 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   124f4:	b580      	push	{r7, lr}
   124f6:	b084      	sub	sp, #16
   124f8:	af00      	add	r7, sp, #0
   124fa:	4603      	mov	r3, r0
   124fc:	6039      	str	r1, [r7, #0]
   124fe:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   12500:	4b0b      	ldr	r3, [pc, #44]	; (12530 <usbdc_change_notify+0x3c>)
   12502:	68db      	ldr	r3, [r3, #12]
   12504:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   12506:	e00c      	b.n	12522 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   12508:	68fb      	ldr	r3, [r7, #12]
   1250a:	685b      	ldr	r3, [r3, #4]
   1250c:	2b00      	cmp	r3, #0
   1250e:	d005      	beq.n	1251c <usbdc_change_notify+0x28>
			cg->cb(change, value);
   12510:	68fb      	ldr	r3, [r7, #12]
   12512:	685b      	ldr	r3, [r3, #4]
   12514:	79fa      	ldrb	r2, [r7, #7]
   12516:	6839      	ldr	r1, [r7, #0]
   12518:	4610      	mov	r0, r2
   1251a:	4798      	blx	r3
		}
		cg = cg->next;
   1251c:	68fb      	ldr	r3, [r7, #12]
   1251e:	681b      	ldr	r3, [r3, #0]
   12520:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   12522:	68fb      	ldr	r3, [r7, #12]
   12524:	2b00      	cmp	r3, #0
   12526:	d1ef      	bne.n	12508 <usbdc_change_notify+0x14>
	}
}
   12528:	bf00      	nop
   1252a:	3710      	adds	r7, #16
   1252c:	46bd      	mov	sp, r7
   1252e:	bd80      	pop	{r7, pc}
   12530:	20008e6c 	.word	0x20008e6c

00012534 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   12534:	b580      	push	{r7, lr}
   12536:	b084      	sub	sp, #16
   12538:	af00      	add	r7, sp, #0
   1253a:	4603      	mov	r3, r0
   1253c:	6039      	str	r1, [r7, #0]
   1253e:	71fb      	strb	r3, [r7, #7]
   12540:	4613      	mov	r3, r2
   12542:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   12544:	4b12      	ldr	r3, [pc, #72]	; (12590 <usbdc_request_handler+0x5c>)
   12546:	689b      	ldr	r3, [r3, #8]
   12548:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   1254a:	e019      	b.n	12580 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   1254c:	68fb      	ldr	r3, [r7, #12]
   1254e:	685b      	ldr	r3, [r3, #4]
   12550:	2b00      	cmp	r3, #0
   12552:	d012      	beq.n	1257a <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   12554:	68fb      	ldr	r3, [r7, #12]
   12556:	685b      	ldr	r3, [r3, #4]
   12558:	79ba      	ldrb	r2, [r7, #6]
   1255a:	79f8      	ldrb	r0, [r7, #7]
   1255c:	6839      	ldr	r1, [r7, #0]
   1255e:	4798      	blx	r3
   12560:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   12562:	68bb      	ldr	r3, [r7, #8]
   12564:	2b00      	cmp	r3, #0
   12566:	d101      	bne.n	1256c <usbdc_request_handler+0x38>
				return true;
   12568:	2301      	movs	r3, #1
   1256a:	e00d      	b.n	12588 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   1256c:	68bb      	ldr	r3, [r7, #8]
   1256e:	f113 0f0a 	cmn.w	r3, #10
   12572:	d002      	beq.n	1257a <usbdc_request_handler+0x46>
				return -1;
   12574:	f04f 33ff 	mov.w	r3, #4294967295
   12578:	e006      	b.n	12588 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   1257a:	68fb      	ldr	r3, [r7, #12]
   1257c:	681b      	ldr	r3, [r3, #0]
   1257e:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   12580:	68fb      	ldr	r3, [r7, #12]
   12582:	2b00      	cmp	r3, #0
   12584:	d1e2      	bne.n	1254c <usbdc_request_handler+0x18>
	}
	return false;
   12586:	2300      	movs	r3, #0
}
   12588:	4618      	mov	r0, r3
   1258a:	3710      	adds	r7, #16
   1258c:	46bd      	mov	sp, r7
   1258e:	bd80      	pop	{r7, pc}
   12590:	20008e6c 	.word	0x20008e6c

00012594 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   12594:	b580      	push	{r7, lr}
   12596:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   12598:	4b01      	ldr	r3, [pc, #4]	; (125a0 <usbd_sof_cb+0xc>)
   1259a:	4798      	blx	r3
}
   1259c:	bf00      	nop
   1259e:	bd80      	pop	{r7, pc}
   125a0:	000124c1 	.word	0x000124c1

000125a4 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
   125aa:	4603      	mov	r3, r0
   125ac:	6039      	str	r1, [r7, #0]
   125ae:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   125b0:	79fb      	ldrb	r3, [r7, #7]
   125b2:	2200      	movs	r2, #0
   125b4:	6839      	ldr	r1, [r7, #0]
   125b6:	4618      	mov	r0, r3
   125b8:	4b14      	ldr	r3, [pc, #80]	; (1260c <usbdc_cb_ctl_req+0x68>)
   125ba:	4798      	blx	r3
   125bc:	4603      	mov	r3, r0
   125be:	f1b3 3fff 	cmp.w	r3, #4294967295
   125c2:	d00b      	beq.n	125dc <usbdc_cb_ctl_req+0x38>
   125c4:	2b01      	cmp	r3, #1
   125c6:	d007      	beq.n	125d8 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   125c8:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	781b      	ldrb	r3, [r3, #0]
   125ce:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   125d2:	2b00      	cmp	r3, #0
   125d4:	d007      	beq.n	125e6 <usbdc_cb_ctl_req+0x42>
   125d6:	e003      	b.n	125e0 <usbdc_cb_ctl_req+0x3c>
		return true;
   125d8:	2301      	movs	r3, #1
   125da:	e013      	b.n	12604 <usbdc_cb_ctl_req+0x60>
		return false;
   125dc:	2300      	movs	r3, #0
   125de:	e011      	b.n	12604 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   125e0:	2b80      	cmp	r3, #128	; 0x80
   125e2:	d007      	beq.n	125f4 <usbdc_cb_ctl_req+0x50>
   125e4:	e00d      	b.n	12602 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   125e6:	79fb      	ldrb	r3, [r7, #7]
   125e8:	6839      	ldr	r1, [r7, #0]
   125ea:	4618      	mov	r0, r3
   125ec:	4b08      	ldr	r3, [pc, #32]	; (12610 <usbdc_cb_ctl_req+0x6c>)
   125ee:	4798      	blx	r3
   125f0:	4603      	mov	r3, r0
   125f2:	e007      	b.n	12604 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   125f4:	79fb      	ldrb	r3, [r7, #7]
   125f6:	6839      	ldr	r1, [r7, #0]
   125f8:	4618      	mov	r0, r3
   125fa:	4b06      	ldr	r3, [pc, #24]	; (12614 <usbdc_cb_ctl_req+0x70>)
   125fc:	4798      	blx	r3
   125fe:	4603      	mov	r3, r0
   12600:	e000      	b.n	12604 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   12602:	2300      	movs	r3, #0
	}
}
   12604:	4618      	mov	r0, r3
   12606:	3708      	adds	r7, #8
   12608:	46bd      	mov	sp, r7
   1260a:	bd80      	pop	{r7, pc}
   1260c:	00012535 	.word	0x00012535
   12610:	000123d5 	.word	0x000123d5
   12614:	00011ffd 	.word	0x00011ffd

00012618 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   12618:	b580      	push	{r7, lr}
   1261a:	b082      	sub	sp, #8
   1261c:	af00      	add	r7, sp, #0
   1261e:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   12620:	687b      	ldr	r3, [r7, #4]
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	2b00      	cmp	r3, #0
   12626:	d135      	bne.n	12694 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   12628:	687b      	ldr	r3, [r7, #4]
   1262a:	785b      	ldrb	r3, [r3, #1]
   1262c:	2b05      	cmp	r3, #5
   1262e:	d019      	beq.n	12664 <usbdc_ctrl_status_end+0x4c>
   12630:	2b09      	cmp	r3, #9
   12632:	d000      	beq.n	12636 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   12634:	e02f      	b.n	12696 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   12636:	687b      	ldr	r3, [r7, #4]
   12638:	885b      	ldrh	r3, [r3, #2]
   1263a:	b29b      	uxth	r3, r3
   1263c:	b2da      	uxtb	r2, r3
   1263e:	4b17      	ldr	r3, [pc, #92]	; (1269c <usbdc_ctrl_status_end+0x84>)
   12640:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   12642:	687b      	ldr	r3, [r7, #4]
   12644:	885b      	ldrh	r3, [r3, #2]
   12646:	b29b      	uxth	r3, r3
   12648:	2b00      	cmp	r3, #0
   1264a:	d001      	beq.n	12650 <usbdc_ctrl_status_end+0x38>
   1264c:	2204      	movs	r2, #4
   1264e:	e000      	b.n	12652 <usbdc_ctrl_status_end+0x3a>
   12650:	2203      	movs	r2, #3
   12652:	4b12      	ldr	r3, [pc, #72]	; (1269c <usbdc_ctrl_status_end+0x84>)
   12654:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   12656:	4b11      	ldr	r3, [pc, #68]	; (1269c <usbdc_ctrl_status_end+0x84>)
   12658:	7e9b      	ldrb	r3, [r3, #26]
   1265a:	4619      	mov	r1, r3
   1265c:	2001      	movs	r0, #1
   1265e:	4b10      	ldr	r3, [pc, #64]	; (126a0 <usbdc_ctrl_status_end+0x88>)
   12660:	4798      	blx	r3
		break;
   12662:	e018      	b.n	12696 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   12664:	687b      	ldr	r3, [r7, #4]
   12666:	885b      	ldrh	r3, [r3, #2]
   12668:	b29b      	uxth	r3, r3
   1266a:	b2db      	uxtb	r3, r3
   1266c:	4618      	mov	r0, r3
   1266e:	4b0d      	ldr	r3, [pc, #52]	; (126a4 <usbdc_ctrl_status_end+0x8c>)
   12670:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   12672:	687b      	ldr	r3, [r7, #4]
   12674:	885b      	ldrh	r3, [r3, #2]
   12676:	b29b      	uxth	r3, r3
   12678:	2b00      	cmp	r3, #0
   1267a:	d001      	beq.n	12680 <usbdc_ctrl_status_end+0x68>
   1267c:	2203      	movs	r2, #3
   1267e:	e000      	b.n	12682 <usbdc_ctrl_status_end+0x6a>
   12680:	2202      	movs	r2, #2
   12682:	4b06      	ldr	r3, [pc, #24]	; (1269c <usbdc_ctrl_status_end+0x84>)
   12684:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   12686:	4b05      	ldr	r3, [pc, #20]	; (1269c <usbdc_ctrl_status_end+0x84>)
   12688:	7e9b      	ldrb	r3, [r3, #26]
   1268a:	4619      	mov	r1, r3
   1268c:	2001      	movs	r0, #1
   1268e:	4b04      	ldr	r3, [pc, #16]	; (126a0 <usbdc_ctrl_status_end+0x88>)
   12690:	4798      	blx	r3
		break;
   12692:	e000      	b.n	12696 <usbdc_ctrl_status_end+0x7e>
		return;
   12694:	bf00      	nop
	}
}
   12696:	3708      	adds	r7, #8
   12698:	46bd      	mov	sp, r7
   1269a:	bd80      	pop	{r7, pc}
   1269c:	20008e6c 	.word	0x20008e6c
   126a0:	000124f5 	.word	0x000124f5
   126a4:	00012275 	.word	0x00012275

000126a8 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   126a8:	b580      	push	{r7, lr}
   126aa:	b082      	sub	sp, #8
   126ac:	af00      	add	r7, sp, #0
   126ae:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   126b0:	2201      	movs	r2, #1
   126b2:	6879      	ldr	r1, [r7, #4]
   126b4:	2000      	movs	r0, #0
   126b6:	4b03      	ldr	r3, [pc, #12]	; (126c4 <usbdc_ctrl_data_end+0x1c>)
   126b8:	4798      	blx	r3
	return false;
   126ba:	2300      	movs	r3, #0
}
   126bc:	4618      	mov	r0, r3
   126be:	3708      	adds	r7, #8
   126c0:	46bd      	mov	sp, r7
   126c2:	bd80      	pop	{r7, pc}
   126c4:	00012535 	.word	0x00012535

000126c8 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   126c8:	b580      	push	{r7, lr}
   126ca:	b082      	sub	sp, #8
   126cc:	af00      	add	r7, sp, #0
   126ce:	4603      	mov	r3, r0
   126d0:	603a      	str	r2, [r7, #0]
   126d2:	71fb      	strb	r3, [r7, #7]
   126d4:	460b      	mov	r3, r1
   126d6:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   126d8:	79bb      	ldrb	r3, [r7, #6]
   126da:	2b00      	cmp	r3, #0
   126dc:	d002      	beq.n	126e4 <usbdc_cb_ctl_done+0x1c>
   126de:	2b01      	cmp	r3, #1
   126e0:	d004      	beq.n	126ec <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   126e2:	e008      	b.n	126f6 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   126e4:	6838      	ldr	r0, [r7, #0]
   126e6:	4b06      	ldr	r3, [pc, #24]	; (12700 <usbdc_cb_ctl_done+0x38>)
   126e8:	4798      	blx	r3
		break;
   126ea:	e004      	b.n	126f6 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   126ec:	6838      	ldr	r0, [r7, #0]
   126ee:	4b05      	ldr	r3, [pc, #20]	; (12704 <usbdc_cb_ctl_done+0x3c>)
   126f0:	4798      	blx	r3
   126f2:	4603      	mov	r3, r0
   126f4:	e000      	b.n	126f8 <usbdc_cb_ctl_done+0x30>
	}
	return false;
   126f6:	2300      	movs	r3, #0
}
   126f8:	4618      	mov	r0, r3
   126fa:	3708      	adds	r7, #8
   126fc:	46bd      	mov	sp, r7
   126fe:	bd80      	pop	{r7, pc}
   12700:	00012619 	.word	0x00012619
   12704:	000126a9 	.word	0x000126a9

00012708 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   12708:	b580      	push	{r7, lr}
   1270a:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   1270c:	4b10      	ldr	r3, [pc, #64]	; (12750 <usbdc_reset+0x48>)
   1270e:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   12710:	4b10      	ldr	r3, [pc, #64]	; (12754 <usbdc_reset+0x4c>)
   12712:	2202      	movs	r2, #2
   12714:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   12716:	4b0f      	ldr	r3, [pc, #60]	; (12754 <usbdc_reset+0x4c>)
   12718:	2200      	movs	r2, #0
   1271a:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   1271c:	4b0d      	ldr	r3, [pc, #52]	; (12754 <usbdc_reset+0x4c>)
   1271e:	2200      	movs	r2, #0
   12720:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   12722:	2000      	movs	r0, #0
   12724:	4b0c      	ldr	r3, [pc, #48]	; (12758 <usbdc_reset+0x50>)
   12726:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   12728:	4b0a      	ldr	r3, [pc, #40]	; (12754 <usbdc_reset+0x4c>)
   1272a:	7f1b      	ldrb	r3, [r3, #28]
   1272c:	4618      	mov	r0, r3
   1272e:	4b0b      	ldr	r3, [pc, #44]	; (1275c <usbdc_reset+0x54>)
   12730:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   12732:	4a0b      	ldr	r2, [pc, #44]	; (12760 <usbdc_reset+0x58>)
   12734:	2100      	movs	r1, #0
   12736:	2000      	movs	r0, #0
   12738:	4b0a      	ldr	r3, [pc, #40]	; (12764 <usbdc_reset+0x5c>)
   1273a:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   1273c:	4a0a      	ldr	r2, [pc, #40]	; (12768 <usbdc_reset+0x60>)
   1273e:	2102      	movs	r1, #2
   12740:	2000      	movs	r0, #0
   12742:	4b08      	ldr	r3, [pc, #32]	; (12764 <usbdc_reset+0x5c>)
   12744:	4798      	blx	r3
	usb_d_ep_enable(0);
   12746:	2000      	movs	r0, #0
   12748:	4b08      	ldr	r3, [pc, #32]	; (1276c <usbdc_reset+0x64>)
   1274a:	4798      	blx	r3
}
   1274c:	bf00      	nop
   1274e:	bd80      	pop	{r7, pc}
   12750:	00012155 	.word	0x00012155
   12754:	20008e6c 	.word	0x20008e6c
   12758:	00007d75 	.word	0x00007d75
   1275c:	00007cb1 	.word	0x00007cb1
   12760:	000125a5 	.word	0x000125a5
   12764:	000080c9 	.word	0x000080c9
   12768:	000126c9 	.word	0x000126c9
   1276c:	00007dc5 	.word	0x00007dc5

00012770 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   12770:	b580      	push	{r7, lr}
   12772:	b082      	sub	sp, #8
   12774:	af00      	add	r7, sp, #0
   12776:	4603      	mov	r3, r0
   12778:	6039      	str	r1, [r7, #0]
   1277a:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   1277c:	79fb      	ldrb	r3, [r7, #7]
   1277e:	2b00      	cmp	r3, #0
   12780:	d002      	beq.n	12788 <usbd_event_cb+0x18>
   12782:	2b01      	cmp	r3, #1
   12784:	d005      	beq.n	12792 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   12786:	e007      	b.n	12798 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   12788:	6839      	ldr	r1, [r7, #0]
   1278a:	2000      	movs	r0, #0
   1278c:	4b04      	ldr	r3, [pc, #16]	; (127a0 <usbd_event_cb+0x30>)
   1278e:	4798      	blx	r3
		break;
   12790:	e002      	b.n	12798 <usbd_event_cb+0x28>
		usbdc_reset();
   12792:	4b04      	ldr	r3, [pc, #16]	; (127a4 <usbd_event_cb+0x34>)
   12794:	4798      	blx	r3
		break;
   12796:	bf00      	nop
	}
}
   12798:	bf00      	nop
   1279a:	3708      	adds	r7, #8
   1279c:	46bd      	mov	sp, r7
   1279e:	bd80      	pop	{r7, pc}
   127a0:	000124f5 	.word	0x000124f5
   127a4:	00012709 	.word	0x00012709

000127a8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   127a8:	b580      	push	{r7, lr}
   127aa:	b088      	sub	sp, #32
   127ac:	af00      	add	r7, sp, #0
   127ae:	60b9      	str	r1, [r7, #8]
   127b0:	607a      	str	r2, [r7, #4]
   127b2:	461a      	mov	r2, r3
   127b4:	4603      	mov	r3, r0
   127b6:	73fb      	strb	r3, [r7, #15]
   127b8:	4613      	mov	r3, r2
   127ba:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   127bc:	68bb      	ldr	r3, [r7, #8]
   127be:	617b      	str	r3, [r7, #20]
   127c0:	687b      	ldr	r3, [r7, #4]
   127c2:	61bb      	str	r3, [r7, #24]
   127c4:	7bfb      	ldrb	r3, [r7, #15]
   127c6:	773b      	strb	r3, [r7, #28]
   127c8:	7bbb      	ldrb	r3, [r7, #14]
   127ca:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   127cc:	f107 0314 	add.w	r3, r7, #20
   127d0:	4618      	mov	r0, r3
   127d2:	4b03      	ldr	r3, [pc, #12]	; (127e0 <usbdc_xfer+0x38>)
   127d4:	4798      	blx	r3
   127d6:	4603      	mov	r3, r0
}
   127d8:	4618      	mov	r0, r3
   127da:	3720      	adds	r7, #32
   127dc:	46bd      	mov	sp, r7
   127de:	bd80      	pop	{r7, pc}
   127e0:	00007e35 	.word	0x00007e35

000127e4 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   127e4:	b580      	push	{r7, lr}
   127e6:	b082      	sub	sp, #8
   127e8:	af00      	add	r7, sp, #0
   127ea:	4603      	mov	r3, r0
   127ec:	6039      	str	r1, [r7, #0]
   127ee:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   127f0:	79fb      	ldrb	r3, [r7, #7]
   127f2:	2b01      	cmp	r3, #1
   127f4:	d009      	beq.n	1280a <usbdc_register_handler+0x26>
   127f6:	2b02      	cmp	r3, #2
   127f8:	d00c      	beq.n	12814 <usbdc_register_handler+0x30>
   127fa:	2b00      	cmp	r3, #0
   127fc:	d000      	beq.n	12800 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   127fe:	e00e      	b.n	1281e <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   12800:	6839      	ldr	r1, [r7, #0]
   12802:	4809      	ldr	r0, [pc, #36]	; (12828 <usbdc_register_handler+0x44>)
   12804:	4b09      	ldr	r3, [pc, #36]	; (1282c <usbdc_register_handler+0x48>)
   12806:	4798      	blx	r3
		break;
   12808:	e009      	b.n	1281e <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   1280a:	6839      	ldr	r1, [r7, #0]
   1280c:	4808      	ldr	r0, [pc, #32]	; (12830 <usbdc_register_handler+0x4c>)
   1280e:	4b07      	ldr	r3, [pc, #28]	; (1282c <usbdc_register_handler+0x48>)
   12810:	4798      	blx	r3
		break;
   12812:	e004      	b.n	1281e <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   12814:	6839      	ldr	r1, [r7, #0]
   12816:	4807      	ldr	r0, [pc, #28]	; (12834 <usbdc_register_handler+0x50>)
   12818:	4b04      	ldr	r3, [pc, #16]	; (1282c <usbdc_register_handler+0x48>)
   1281a:	4798      	blx	r3
		break;
   1281c:	bf00      	nop
	}
}
   1281e:	bf00      	nop
   12820:	3708      	adds	r7, #8
   12822:	46bd      	mov	sp, r7
   12824:	bd80      	pop	{r7, pc}
   12826:	bf00      	nop
   12828:	20008e70 	.word	0x20008e70
   1282c:	00008221 	.word	0x00008221
   12830:	20008e74 	.word	0x20008e74
   12834:	20008e78 	.word	0x20008e78

00012838 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   12838:	b580      	push	{r7, lr}
   1283a:	b084      	sub	sp, #16
   1283c:	af00      	add	r7, sp, #0
   1283e:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   12840:	687b      	ldr	r3, [r7, #4]
   12842:	2b00      	cmp	r3, #0
   12844:	bf14      	ite	ne
   12846:	2301      	movne	r3, #1
   12848:	2300      	moveq	r3, #0
   1284a:	b2db      	uxtb	r3, r3
   1284c:	f240 3255 	movw	r2, #853	; 0x355
   12850:	4910      	ldr	r1, [pc, #64]	; (12894 <usbdc_init+0x5c>)
   12852:	4618      	mov	r0, r3
   12854:	4b10      	ldr	r3, [pc, #64]	; (12898 <usbdc_init+0x60>)
   12856:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   12858:	4b10      	ldr	r3, [pc, #64]	; (1289c <usbdc_init+0x64>)
   1285a:	4798      	blx	r3
   1285c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   1285e:	68fb      	ldr	r3, [r7, #12]
   12860:	2b00      	cmp	r3, #0
   12862:	da01      	bge.n	12868 <usbdc_init+0x30>
		return rc;
   12864:	68fb      	ldr	r3, [r7, #12]
   12866:	e010      	b.n	1288a <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   12868:	2220      	movs	r2, #32
   1286a:	2100      	movs	r1, #0
   1286c:	480c      	ldr	r0, [pc, #48]	; (128a0 <usbdc_init+0x68>)
   1286e:	4b0d      	ldr	r3, [pc, #52]	; (128a4 <usbdc_init+0x6c>)
   12870:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   12872:	4a0b      	ldr	r2, [pc, #44]	; (128a0 <usbdc_init+0x68>)
   12874:	687b      	ldr	r3, [r7, #4]
   12876:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   12878:	490b      	ldr	r1, [pc, #44]	; (128a8 <usbdc_init+0x70>)
   1287a:	2000      	movs	r0, #0
   1287c:	4b0b      	ldr	r3, [pc, #44]	; (128ac <usbdc_init+0x74>)
   1287e:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   12880:	490b      	ldr	r1, [pc, #44]	; (128b0 <usbdc_init+0x78>)
   12882:	2001      	movs	r0, #1
   12884:	4b09      	ldr	r3, [pc, #36]	; (128ac <usbdc_init+0x74>)
   12886:	4798      	blx	r3

	return 0;
   12888:	2300      	movs	r3, #0
}
   1288a:	4618      	mov	r0, r3
   1288c:	3710      	adds	r7, #16
   1288e:	46bd      	mov	sp, r7
   12890:	bd80      	pop	{r7, pc}
   12892:	bf00      	nop
   12894:	00020de0 	.word	0x00020de0
   12898:	00008145 	.word	0x00008145
   1289c:	00007b9d 	.word	0x00007b9d
   128a0:	20008e6c 	.word	0x20008e6c
   128a4:	0001c5b9 	.word	0x0001c5b9
   128a8:	00012595 	.word	0x00012595
   128ac:	00007c49 	.word	0x00007c49
   128b0:	00012771 	.word	0x00012771

000128b4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   128b4:	b580      	push	{r7, lr}
   128b6:	b082      	sub	sp, #8
   128b8:	af00      	add	r7, sp, #0
   128ba:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   128bc:	6879      	ldr	r1, [r7, #4]
   128be:	4803      	ldr	r0, [pc, #12]	; (128cc <usbdc_register_function+0x18>)
   128c0:	4b03      	ldr	r3, [pc, #12]	; (128d0 <usbdc_register_function+0x1c>)
   128c2:	4798      	blx	r3
}
   128c4:	bf00      	nop
   128c6:	3708      	adds	r7, #8
   128c8:	46bd      	mov	sp, r7
   128ca:	bd80      	pop	{r7, pc}
   128cc:	20008e7c 	.word	0x20008e7c
   128d0:	00008221 	.word	0x00008221

000128d4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   128d4:	b580      	push	{r7, lr}
   128d6:	b082      	sub	sp, #8
   128d8:	af00      	add	r7, sp, #0
   128da:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   128dc:	4b0f      	ldr	r3, [pc, #60]	; (1291c <usbdc_start+0x48>)
   128de:	7e9b      	ldrb	r3, [r3, #26]
   128e0:	2b00      	cmp	r3, #0
   128e2:	d002      	beq.n	128ea <usbdc_start+0x16>
		return ERR_BUSY;
   128e4:	f06f 0303 	mvn.w	r3, #3
   128e8:	e013      	b.n	12912 <usbdc_start+0x3e>
	}

	if (desces) {
   128ea:	687b      	ldr	r3, [r7, #4]
   128ec:	2b00      	cmp	r3, #0
   128ee:	d00e      	beq.n	1290e <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   128f0:	4a0a      	ldr	r2, [pc, #40]	; (1291c <usbdc_start+0x48>)
   128f2:	687b      	ldr	r3, [r7, #4]
   128f4:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   128f6:	687b      	ldr	r3, [r7, #4]
   128f8:	681b      	ldr	r3, [r3, #0]
   128fa:	79da      	ldrb	r2, [r3, #7]
   128fc:	4b07      	ldr	r3, [pc, #28]	; (1291c <usbdc_start+0x48>)
   128fe:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   12900:	4b06      	ldr	r3, [pc, #24]	; (1291c <usbdc_start+0x48>)
   12902:	2201      	movs	r2, #1
   12904:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   12906:	4b06      	ldr	r3, [pc, #24]	; (12920 <usbdc_start+0x4c>)
   12908:	4798      	blx	r3
	return ERR_NONE;
   1290a:	2300      	movs	r3, #0
   1290c:	e001      	b.n	12912 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   1290e:	f06f 0308 	mvn.w	r3, #8
}
   12912:	4618      	mov	r0, r3
   12914:	3708      	adds	r7, #8
   12916:	46bd      	mov	sp, r7
   12918:	bd80      	pop	{r7, pc}
   1291a:	bf00      	nop
   1291c:	20008e6c 	.word	0x20008e6c
   12920:	00007c6d 	.word	0x00007c6d

00012924 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   12924:	b580      	push	{r7, lr}
   12926:	af00      	add	r7, sp, #0
	usb_d_attach();
   12928:	4b01      	ldr	r3, [pc, #4]	; (12930 <usbdc_attach+0xc>)
   1292a:	4798      	blx	r3
}
   1292c:	bf00      	nop
   1292e:	bd80      	pop	{r7, pc}
   12930:	00007c81 	.word	0x00007c81

00012934 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   12934:	b480      	push	{r7}
   12936:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   12938:	4b03      	ldr	r3, [pc, #12]	; (12948 <usbdc_get_ctrl_buffer+0x14>)
   1293a:	695b      	ldr	r3, [r3, #20]
}
   1293c:	4618      	mov	r0, r3
   1293e:	46bd      	mov	sp, r7
   12940:	f85d 7b04 	ldr.w	r7, [sp], #4
   12944:	4770      	bx	lr
   12946:	bf00      	nop
   12948:	20008e6c 	.word	0x20008e6c

0001294c <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   1294c:	b480      	push	{r7}
   1294e:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   12950:	4b07      	ldr	r3, [pc, #28]	; (12970 <usbdc_get_state+0x24>)
   12952:	7e9b      	ldrb	r3, [r3, #26]
   12954:	f003 0310 	and.w	r3, r3, #16
   12958:	2b00      	cmp	r3, #0
   1295a:	d001      	beq.n	12960 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   1295c:	2310      	movs	r3, #16
   1295e:	e001      	b.n	12964 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   12960:	4b03      	ldr	r3, [pc, #12]	; (12970 <usbdc_get_state+0x24>)
   12962:	7e9b      	ldrb	r3, [r3, #26]
}
   12964:	4618      	mov	r0, r3
   12966:	46bd      	mov	sp, r7
   12968:	f85d 7b04 	ldr.w	r7, [sp], #4
   1296c:	4770      	bx	lr
   1296e:	bf00      	nop
   12970:	20008e6c 	.word	0x20008e6c

00012974 <usb_get_u16>:
{
   12974:	b480      	push	{r7}
   12976:	b083      	sub	sp, #12
   12978:	af00      	add	r7, sp, #0
   1297a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   1297c:	687b      	ldr	r3, [r7, #4]
   1297e:	781b      	ldrb	r3, [r3, #0]
   12980:	b29a      	uxth	r2, r3
   12982:	687b      	ldr	r3, [r7, #4]
   12984:	3301      	adds	r3, #1
   12986:	781b      	ldrb	r3, [r3, #0]
   12988:	b29b      	uxth	r3, r3
   1298a:	021b      	lsls	r3, r3, #8
   1298c:	b29b      	uxth	r3, r3
   1298e:	4413      	add	r3, r2
   12990:	b29b      	uxth	r3, r3
}
   12992:	4618      	mov	r0, r3
   12994:	370c      	adds	r7, #12
   12996:	46bd      	mov	sp, r7
   12998:	f85d 7b04 	ldr.w	r7, [sp], #4
   1299c:	4770      	bx	lr

0001299e <usb_desc_len>:
{
   1299e:	b480      	push	{r7}
   129a0:	b083      	sub	sp, #12
   129a2:	af00      	add	r7, sp, #0
   129a4:	6078      	str	r0, [r7, #4]
	return desc[0];
   129a6:	687b      	ldr	r3, [r7, #4]
   129a8:	781b      	ldrb	r3, [r3, #0]
}
   129aa:	4618      	mov	r0, r3
   129ac:	370c      	adds	r7, #12
   129ae:	46bd      	mov	sp, r7
   129b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   129b4:	4770      	bx	lr

000129b6 <usb_desc_type>:
{
   129b6:	b480      	push	{r7}
   129b8:	b083      	sub	sp, #12
   129ba:	af00      	add	r7, sp, #0
   129bc:	6078      	str	r0, [r7, #4]
	return desc[1];
   129be:	687b      	ldr	r3, [r7, #4]
   129c0:	3301      	adds	r3, #1
   129c2:	781b      	ldrb	r3, [r3, #0]
}
   129c4:	4618      	mov	r0, r3
   129c6:	370c      	adds	r7, #12
   129c8:	46bd      	mov	sp, r7
   129ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   129ce:	4770      	bx	lr

000129d0 <usb_desc_next>:
{
   129d0:	b580      	push	{r7, lr}
   129d2:	b082      	sub	sp, #8
   129d4:	af00      	add	r7, sp, #0
   129d6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   129d8:	6878      	ldr	r0, [r7, #4]
   129da:	4b05      	ldr	r3, [pc, #20]	; (129f0 <usb_desc_next+0x20>)
   129dc:	4798      	blx	r3
   129de:	4603      	mov	r3, r0
   129e0:	461a      	mov	r2, r3
   129e2:	687b      	ldr	r3, [r7, #4]
   129e4:	4413      	add	r3, r2
}
   129e6:	4618      	mov	r0, r3
   129e8:	3708      	adds	r7, #8
   129ea:	46bd      	mov	sp, r7
   129ec:	bd80      	pop	{r7, pc}
   129ee:	bf00      	nop
   129f0:	0001299f 	.word	0x0001299f

000129f4 <usb_cfg_desc_total_len>:
{
   129f4:	b580      	push	{r7, lr}
   129f6:	b082      	sub	sp, #8
   129f8:	af00      	add	r7, sp, #0
   129fa:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   129fc:	687b      	ldr	r3, [r7, #4]
   129fe:	3302      	adds	r3, #2
   12a00:	4618      	mov	r0, r3
   12a02:	4b03      	ldr	r3, [pc, #12]	; (12a10 <usb_cfg_desc_total_len+0x1c>)
   12a04:	4798      	blx	r3
   12a06:	4603      	mov	r3, r0
}
   12a08:	4618      	mov	r0, r3
   12a0a:	3708      	adds	r7, #8
   12a0c:	46bd      	mov	sp, r7
   12a0e:	bd80      	pop	{r7, pc}
   12a10:	00012975 	.word	0x00012975

00012a14 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   12a14:	b580      	push	{r7, lr}
   12a16:	b082      	sub	sp, #8
   12a18:	af00      	add	r7, sp, #0
   12a1a:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   12a1c:	6878      	ldr	r0, [r7, #4]
   12a1e:	4b05      	ldr	r3, [pc, #20]	; (12a34 <usb_cfg_desc_next+0x20>)
   12a20:	4798      	blx	r3
   12a22:	4603      	mov	r3, r0
   12a24:	461a      	mov	r2, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	4413      	add	r3, r2
}
   12a2a:	4618      	mov	r0, r3
   12a2c:	3708      	adds	r7, #8
   12a2e:	46bd      	mov	sp, r7
   12a30:	bd80      	pop	{r7, pc}
   12a32:	bf00      	nop
   12a34:	000129f5 	.word	0x000129f5

00012a38 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   12a38:	b580      	push	{r7, lr}
   12a3a:	b084      	sub	sp, #16
   12a3c:	af00      	add	r7, sp, #0
   12a3e:	60f8      	str	r0, [r7, #12]
   12a40:	60b9      	str	r1, [r7, #8]
   12a42:	4613      	mov	r3, r2
   12a44:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   12a46:	e015      	b.n	12a74 <usb_find_desc+0x3c>
		_desc_len_check();
   12a48:	68f8      	ldr	r0, [r7, #12]
   12a4a:	4b0f      	ldr	r3, [pc, #60]	; (12a88 <usb_find_desc+0x50>)
   12a4c:	4798      	blx	r3
   12a4e:	4603      	mov	r3, r0
   12a50:	2b01      	cmp	r3, #1
   12a52:	d801      	bhi.n	12a58 <usb_find_desc+0x20>
   12a54:	2300      	movs	r3, #0
   12a56:	e012      	b.n	12a7e <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   12a58:	68f8      	ldr	r0, [r7, #12]
   12a5a:	4b0c      	ldr	r3, [pc, #48]	; (12a8c <usb_find_desc+0x54>)
   12a5c:	4798      	blx	r3
   12a5e:	4603      	mov	r3, r0
   12a60:	461a      	mov	r2, r3
   12a62:	79fb      	ldrb	r3, [r7, #7]
   12a64:	4293      	cmp	r3, r2
   12a66:	d101      	bne.n	12a6c <usb_find_desc+0x34>
			return desc;
   12a68:	68fb      	ldr	r3, [r7, #12]
   12a6a:	e008      	b.n	12a7e <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   12a6c:	68f8      	ldr	r0, [r7, #12]
   12a6e:	4b08      	ldr	r3, [pc, #32]	; (12a90 <usb_find_desc+0x58>)
   12a70:	4798      	blx	r3
   12a72:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   12a74:	68fa      	ldr	r2, [r7, #12]
   12a76:	68bb      	ldr	r3, [r7, #8]
   12a78:	429a      	cmp	r2, r3
   12a7a:	d3e5      	bcc.n	12a48 <usb_find_desc+0x10>
	}
	return NULL;
   12a7c:	2300      	movs	r3, #0
}
   12a7e:	4618      	mov	r0, r3
   12a80:	3710      	adds	r7, #16
   12a82:	46bd      	mov	sp, r7
   12a84:	bd80      	pop	{r7, pc}
   12a86:	bf00      	nop
   12a88:	0001299f 	.word	0x0001299f
   12a8c:	000129b7 	.word	0x000129b7
   12a90:	000129d1 	.word	0x000129d1

00012a94 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   12a94:	b580      	push	{r7, lr}
   12a96:	b082      	sub	sp, #8
   12a98:	af00      	add	r7, sp, #0
   12a9a:	6078      	str	r0, [r7, #4]
   12a9c:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   12a9e:	e019      	b.n	12ad4 <usb_find_ep_desc+0x40>
		_desc_len_check();
   12aa0:	6878      	ldr	r0, [r7, #4]
   12aa2:	4b12      	ldr	r3, [pc, #72]	; (12aec <usb_find_ep_desc+0x58>)
   12aa4:	4798      	blx	r3
   12aa6:	4603      	mov	r3, r0
   12aa8:	2b01      	cmp	r3, #1
   12aaa:	d801      	bhi.n	12ab0 <usb_find_ep_desc+0x1c>
   12aac:	2300      	movs	r3, #0
   12aae:	e018      	b.n	12ae2 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   12ab0:	6878      	ldr	r0, [r7, #4]
   12ab2:	4b0f      	ldr	r3, [pc, #60]	; (12af0 <usb_find_ep_desc+0x5c>)
   12ab4:	4798      	blx	r3
   12ab6:	4603      	mov	r3, r0
   12ab8:	2b04      	cmp	r3, #4
   12aba:	d010      	beq.n	12ade <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   12abc:	6878      	ldr	r0, [r7, #4]
   12abe:	4b0c      	ldr	r3, [pc, #48]	; (12af0 <usb_find_ep_desc+0x5c>)
   12ac0:	4798      	blx	r3
   12ac2:	4603      	mov	r3, r0
   12ac4:	2b05      	cmp	r3, #5
   12ac6:	d101      	bne.n	12acc <usb_find_ep_desc+0x38>
			return desc;
   12ac8:	687b      	ldr	r3, [r7, #4]
   12aca:	e00a      	b.n	12ae2 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   12acc:	6878      	ldr	r0, [r7, #4]
   12ace:	4b09      	ldr	r3, [pc, #36]	; (12af4 <usb_find_ep_desc+0x60>)
   12ad0:	4798      	blx	r3
   12ad2:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   12ad4:	687a      	ldr	r2, [r7, #4]
   12ad6:	683b      	ldr	r3, [r7, #0]
   12ad8:	429a      	cmp	r2, r3
   12ada:	d3e1      	bcc.n	12aa0 <usb_find_ep_desc+0xc>
   12adc:	e000      	b.n	12ae0 <usb_find_ep_desc+0x4c>
			break;
   12ade:	bf00      	nop
	}
	return NULL;
   12ae0:	2300      	movs	r3, #0
}
   12ae2:	4618      	mov	r0, r3
   12ae4:	3708      	adds	r7, #8
   12ae6:	46bd      	mov	sp, r7
   12ae8:	bd80      	pop	{r7, pc}
   12aea:	bf00      	nop
   12aec:	0001299f 	.word	0x0001299f
   12af0:	000129b7 	.word	0x000129b7
   12af4:	000129d1 	.word	0x000129d1

00012af8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   12af8:	b580      	push	{r7, lr}
   12afa:	b084      	sub	sp, #16
   12afc:	af00      	add	r7, sp, #0
   12afe:	60f8      	str	r0, [r7, #12]
   12b00:	60b9      	str	r1, [r7, #8]
   12b02:	4613      	mov	r3, r2
   12b04:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   12b06:	2202      	movs	r2, #2
   12b08:	68b9      	ldr	r1, [r7, #8]
   12b0a:	68f8      	ldr	r0, [r7, #12]
   12b0c:	4b15      	ldr	r3, [pc, #84]	; (12b64 <usb_find_cfg_desc+0x6c>)
   12b0e:	4798      	blx	r3
   12b10:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   12b12:	68fb      	ldr	r3, [r7, #12]
   12b14:	2b00      	cmp	r3, #0
   12b16:	d11a      	bne.n	12b4e <usb_find_cfg_desc+0x56>
		return NULL;
   12b18:	2300      	movs	r3, #0
   12b1a:	e01f      	b.n	12b5c <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   12b1c:	68f8      	ldr	r0, [r7, #12]
   12b1e:	4b12      	ldr	r3, [pc, #72]	; (12b68 <usb_find_cfg_desc+0x70>)
   12b20:	4798      	blx	r3
   12b22:	4603      	mov	r3, r0
   12b24:	2b01      	cmp	r3, #1
   12b26:	d801      	bhi.n	12b2c <usb_find_cfg_desc+0x34>
   12b28:	2300      	movs	r3, #0
   12b2a:	e017      	b.n	12b5c <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   12b2c:	68fb      	ldr	r3, [r7, #12]
   12b2e:	3301      	adds	r3, #1
   12b30:	781b      	ldrb	r3, [r3, #0]
   12b32:	2b02      	cmp	r3, #2
   12b34:	d110      	bne.n	12b58 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   12b36:	68fb      	ldr	r3, [r7, #12]
   12b38:	3305      	adds	r3, #5
   12b3a:	781b      	ldrb	r3, [r3, #0]
   12b3c:	79fa      	ldrb	r2, [r7, #7]
   12b3e:	429a      	cmp	r2, r3
   12b40:	d101      	bne.n	12b46 <usb_find_cfg_desc+0x4e>
			return desc;
   12b42:	68fb      	ldr	r3, [r7, #12]
   12b44:	e00a      	b.n	12b5c <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   12b46:	68f8      	ldr	r0, [r7, #12]
   12b48:	4b08      	ldr	r3, [pc, #32]	; (12b6c <usb_find_cfg_desc+0x74>)
   12b4a:	4798      	blx	r3
   12b4c:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   12b4e:	68fa      	ldr	r2, [r7, #12]
   12b50:	68bb      	ldr	r3, [r7, #8]
   12b52:	429a      	cmp	r2, r3
   12b54:	d3e2      	bcc.n	12b1c <usb_find_cfg_desc+0x24>
   12b56:	e000      	b.n	12b5a <usb_find_cfg_desc+0x62>
			break;
   12b58:	bf00      	nop
	}
	return NULL;
   12b5a:	2300      	movs	r3, #0
}
   12b5c:	4618      	mov	r0, r3
   12b5e:	3710      	adds	r7, #16
   12b60:	46bd      	mov	sp, r7
   12b62:	bd80      	pop	{r7, pc}
   12b64:	00012a39 	.word	0x00012a39
   12b68:	0001299f 	.word	0x0001299f
   12b6c:	00012a15 	.word	0x00012a15

00012b70 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   12b70:	b580      	push	{r7, lr}
   12b72:	b086      	sub	sp, #24
   12b74:	af00      	add	r7, sp, #0
   12b76:	60f8      	str	r0, [r7, #12]
   12b78:	60b9      	str	r1, [r7, #8]
   12b7a:	4613      	mov	r3, r2
   12b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   12b7e:	2300      	movs	r3, #0
   12b80:	75fb      	strb	r3, [r7, #23]
   12b82:	e020      	b.n	12bc6 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   12b84:	2203      	movs	r2, #3
   12b86:	68b9      	ldr	r1, [r7, #8]
   12b88:	68f8      	ldr	r0, [r7, #12]
   12b8a:	4b13      	ldr	r3, [pc, #76]	; (12bd8 <usb_find_str_desc+0x68>)
   12b8c:	4798      	blx	r3
   12b8e:	60f8      	str	r0, [r7, #12]
		if (desc) {
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	2b00      	cmp	r3, #0
   12b94:	d015      	beq.n	12bc2 <usb_find_str_desc+0x52>
			_desc_len_check();
   12b96:	68f8      	ldr	r0, [r7, #12]
   12b98:	4b10      	ldr	r3, [pc, #64]	; (12bdc <usb_find_str_desc+0x6c>)
   12b9a:	4798      	blx	r3
   12b9c:	4603      	mov	r3, r0
   12b9e:	2b01      	cmp	r3, #1
   12ba0:	d801      	bhi.n	12ba6 <usb_find_str_desc+0x36>
   12ba2:	2300      	movs	r3, #0
   12ba4:	e014      	b.n	12bd0 <usb_find_str_desc+0x60>
			if (i == str_index) {
   12ba6:	7dfa      	ldrb	r2, [r7, #23]
   12ba8:	79fb      	ldrb	r3, [r7, #7]
   12baa:	429a      	cmp	r2, r3
   12bac:	d101      	bne.n	12bb2 <usb_find_str_desc+0x42>
				return desc;
   12bae:	68fb      	ldr	r3, [r7, #12]
   12bb0:	e00e      	b.n	12bd0 <usb_find_str_desc+0x60>
			}
			i++;
   12bb2:	7dfb      	ldrb	r3, [r7, #23]
   12bb4:	3301      	adds	r3, #1
   12bb6:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   12bb8:	68f8      	ldr	r0, [r7, #12]
   12bba:	4b09      	ldr	r3, [pc, #36]	; (12be0 <usb_find_str_desc+0x70>)
   12bbc:	4798      	blx	r3
   12bbe:	60f8      	str	r0, [r7, #12]
   12bc0:	e001      	b.n	12bc6 <usb_find_str_desc+0x56>
		} else {
			return NULL;
   12bc2:	2300      	movs	r3, #0
   12bc4:	e004      	b.n	12bd0 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   12bc6:	68fa      	ldr	r2, [r7, #12]
   12bc8:	68bb      	ldr	r3, [r7, #8]
   12bca:	429a      	cmp	r2, r3
   12bcc:	d3da      	bcc.n	12b84 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   12bce:	2300      	movs	r3, #0
}
   12bd0:	4618      	mov	r0, r3
   12bd2:	3718      	adds	r7, #24
   12bd4:	46bd      	mov	sp, r7
   12bd6:	bd80      	pop	{r7, pc}
   12bd8:	00012a39 	.word	0x00012a39
   12bdc:	0001299f 	.word	0x0001299f
   12be0:	000129d1 	.word	0x000129d1

00012be4 <_ZN18ARINC_Buffer_ClassC2Ev>:
static 	uint8_t bufferReceiverBuffer[RX_LABELS_NUMBER][4];             // [# of buffers][16 bytes]
static	uint8_t	bufferTransmitBuffer[TX_LABELS_NUMBER][4];


// default constructor
ARINC_Buffer_Class::ARINC_Buffer_Class()
   12be4:	b480      	push	{r7}
   12be6:	b083      	sub	sp, #12
   12be8:	af00      	add	r7, sp, #0
   12bea:	6078      	str	r0, [r7, #4]
   12bec:	6039      	str	r1, [r7, #0]
   12bee:	683b      	ldr	r3, [r7, #0]
   12bf0:	681a      	ldr	r2, [r3, #0]
   12bf2:	687b      	ldr	r3, [r7, #4]
   12bf4:	601a      	str	r2, [r3, #0]
   12bf6:	687b      	ldr	r3, [r7, #4]
   12bf8:	681b      	ldr	r3, [r3, #0]
   12bfa:	3b0c      	subs	r3, #12
   12bfc:	681b      	ldr	r3, [r3, #0]
   12bfe:	461a      	mov	r2, r3
   12c00:	687b      	ldr	r3, [r7, #4]
   12c02:	4413      	add	r3, r2
   12c04:	683a      	ldr	r2, [r7, #0]
   12c06:	6852      	ldr	r2, [r2, #4]
   12c08:	601a      	str	r2, [r3, #0]
   12c0a:	687b      	ldr	r3, [r7, #4]
   12c0c:	681b      	ldr	r3, [r3, #0]
   12c0e:	3b10      	subs	r3, #16
   12c10:	681b      	ldr	r3, [r3, #0]
   12c12:	461a      	mov	r2, r3
   12c14:	687b      	ldr	r3, [r7, #4]
   12c16:	4413      	add	r3, r2
   12c18:	683a      	ldr	r2, [r7, #0]
   12c1a:	6892      	ldr	r2, [r2, #8]
   12c1c:	601a      	str	r2, [r3, #0]
{
	

	//receiverBuffer=            // [# of buffers][16 bytes]
	//transmitBuffer=&bufferTransmitBuffer[0];
} //ARINC_Buffer_Class
   12c1e:	687b      	ldr	r3, [r7, #4]
   12c20:	4618      	mov	r0, r3
   12c22:	370c      	adds	r7, #12
   12c24:	46bd      	mov	sp, r7
   12c26:	bc80      	pop	{r7}
   12c28:	4770      	bx	lr

00012c2a <_ZN18ARINC_Buffer_ClassD2Ev>:

// default destructor
ARINC_Buffer_Class::~ARINC_Buffer_Class()
   12c2a:	b480      	push	{r7}
   12c2c:	b083      	sub	sp, #12
   12c2e:	af00      	add	r7, sp, #0
   12c30:	6078      	str	r0, [r7, #4]
   12c32:	6039      	str	r1, [r7, #0]
   12c34:	683b      	ldr	r3, [r7, #0]
   12c36:	681a      	ldr	r2, [r3, #0]
   12c38:	687b      	ldr	r3, [r7, #4]
   12c3a:	601a      	str	r2, [r3, #0]
   12c3c:	687b      	ldr	r3, [r7, #4]
   12c3e:	681b      	ldr	r3, [r3, #0]
   12c40:	3b0c      	subs	r3, #12
   12c42:	681b      	ldr	r3, [r3, #0]
   12c44:	461a      	mov	r2, r3
   12c46:	687b      	ldr	r3, [r7, #4]
   12c48:	4413      	add	r3, r2
   12c4a:	683a      	ldr	r2, [r7, #0]
   12c4c:	6852      	ldr	r2, [r2, #4]
   12c4e:	601a      	str	r2, [r3, #0]
   12c50:	687b      	ldr	r3, [r7, #4]
   12c52:	681b      	ldr	r3, [r3, #0]
   12c54:	3b10      	subs	r3, #16
   12c56:	681b      	ldr	r3, [r3, #0]
   12c58:	461a      	mov	r2, r3
   12c5a:	687b      	ldr	r3, [r7, #4]
   12c5c:	4413      	add	r3, r2
   12c5e:	683a      	ldr	r2, [r7, #0]
   12c60:	6892      	ldr	r2, [r2, #8]
   12c62:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Buffer_Class
   12c64:	687b      	ldr	r3, [r7, #4]
   12c66:	4618      	mov	r0, r3
   12c68:	370c      	adds	r7, #12
   12c6a:	46bd      	mov	sp, r7
   12c6c:	bc80      	pop	{r7}
   12c6e:	4770      	bx	lr

00012c70 <_ZN18ARINC_Buffer_Class10InitBufferEv>:

void	ARINC_Buffer_Class::InitBuffer(void){
   12c70:	b480      	push	{r7}
   12c72:	b085      	sub	sp, #20
   12c74:	af00      	add	r7, sp, #0
   12c76:	6078      	str	r0, [r7, #4]
	LabelsArrayTX=&bufferLabelsArrayTX[0];
   12c78:	687b      	ldr	r3, [r7, #4]
   12c7a:	4a1a      	ldr	r2, [pc, #104]	; (12ce4 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x74>)
   12c7c:	605a      	str	r2, [r3, #4]
	LabelsArrayRX1=&bufferLabelsArrayRX1[0];
   12c7e:	687b      	ldr	r3, [r7, #4]
   12c80:	4a19      	ldr	r2, [pc, #100]	; (12ce8 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x78>)
   12c82:	609a      	str	r2, [r3, #8]
	LabelsArrayRX2=&bufferLabelsArrayRX2[0];
   12c84:	687b      	ldr	r3, [r7, #4]
   12c86:	4a19      	ldr	r2, [pc, #100]	; (12cec <_ZN18ARINC_Buffer_Class10InitBufferEv+0x7c>)
   12c88:	60da      	str	r2, [r3, #12]
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
   12c8a:	2300      	movs	r3, #0
   12c8c:	73fb      	strb	r3, [r7, #15]
   12c8e:	7bfb      	ldrb	r3, [r7, #15]
   12c90:	2b1f      	cmp	r3, #31
   12c92:	dc17      	bgt.n	12cc4 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x54>
		{
			pointerArrayRX[i]=bufferReceiverBuffer[i];
   12c94:	7bfb      	ldrb	r3, [r7, #15]
   12c96:	7bfa      	ldrb	r2, [r7, #15]
   12c98:	0092      	lsls	r2, r2, #2
   12c9a:	4915      	ldr	r1, [pc, #84]	; (12cf0 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x80>)
   12c9c:	440a      	add	r2, r1
   12c9e:	6879      	ldr	r1, [r7, #4]
   12ca0:	3328      	adds	r3, #40	; 0x28
   12ca2:	009b      	lsls	r3, r3, #2
   12ca4:	440b      	add	r3, r1
   12ca6:	605a      	str	r2, [r3, #4]
			pointerArrayTX[i]=bufferTransmitBuffer[i];
   12ca8:	7bfb      	ldrb	r3, [r7, #15]
   12caa:	7bfa      	ldrb	r2, [r7, #15]
   12cac:	0092      	lsls	r2, r2, #2
   12cae:	4911      	ldr	r1, [pc, #68]	; (12cf4 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x84>)
   12cb0:	440a      	add	r2, r1
   12cb2:	6879      	ldr	r1, [r7, #4]
   12cb4:	3308      	adds	r3, #8
   12cb6:	009b      	lsls	r3, r3, #2
   12cb8:	440b      	add	r3, r1
   12cba:	605a      	str	r2, [r3, #4]
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
   12cbc:	7bfb      	ldrb	r3, [r7, #15]
   12cbe:	3301      	adds	r3, #1
   12cc0:	73fb      	strb	r3, [r7, #15]
   12cc2:	e7e4      	b.n	12c8e <_ZN18ARINC_Buffer_Class10InitBufferEv+0x1e>
		}
		receiverBuffer=pointerArrayRX;
   12cc4:	687b      	ldr	r3, [r7, #4]
   12cc6:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
   12cca:	687b      	ldr	r3, [r7, #4]
   12ccc:	611a      	str	r2, [r3, #16]
		transmitBuffer=pointerArrayTX;
   12cce:	687b      	ldr	r3, [r7, #4]
   12cd0:	f103 0224 	add.w	r2, r3, #36	; 0x24
   12cd4:	687b      	ldr	r3, [r7, #4]
   12cd6:	615a      	str	r2, [r3, #20]
}
   12cd8:	bf00      	nop
   12cda:	3714      	adds	r7, #20
   12cdc:	46bd      	mov	sp, r7
   12cde:	bc80      	pop	{r7}
   12ce0:	4770      	bx	lr
   12ce2:	bf00      	nop
   12ce4:	20008e8c 	.word	0x20008e8c
   12ce8:	20008eac 	.word	0x20008eac
   12cec:	20008ecc 	.word	0x20008ecc
   12cf0:	20008eec 	.word	0x20008eec
   12cf4:	20008f6c 	.word	0x20008f6c

00012cf8 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv>:

void ARINC_Buffer_Class::SaveFlapperValveAngle(void){
   12cf8:	b580      	push	{r7, lr}
   12cfa:	b084      	sub	sp, #16
   12cfc:	af00      	add	r7, sp, #0
   12cfe:	6078      	str	r0, [r7, #4]
	octalLabel=Label2Byte(FlapperValveAngle);
   12d00:	687b      	ldr	r3, [r7, #4]
   12d02:	681b      	ldr	r3, [r3, #0]
   12d04:	3b0c      	subs	r3, #12
   12d06:	681b      	ldr	r3, [r3, #0]
   12d08:	461a      	mov	r2, r3
   12d0a:	687b      	ldr	r3, [r7, #4]
   12d0c:	4413      	add	r3, r2
   12d0e:	681b      	ldr	r3, [r3, #0]
   12d10:	3304      	adds	r3, #4
   12d12:	681b      	ldr	r3, [r3, #0]
   12d14:	687a      	ldr	r2, [r7, #4]
   12d16:	6812      	ldr	r2, [r2, #0]
   12d18:	3a0c      	subs	r2, #12
   12d1a:	6812      	ldr	r2, [r2, #0]
   12d1c:	4611      	mov	r1, r2
   12d1e:	687a      	ldr	r2, [r7, #4]
   12d20:	440a      	add	r2, r1
   12d22:	f240 1113 	movw	r1, #275	; 0x113
   12d26:	4610      	mov	r0, r2
   12d28:	4798      	blx	r3
   12d2a:	4603      	mov	r3, r0
   12d2c:	461a      	mov	r2, r3
   12d2e:	687b      	ldr	r3, [r7, #4]
   12d30:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   12d32:	687b      	ldr	r3, [r7, #4]
   12d34:	681b      	ldr	r3, [r3, #0]
   12d36:	3b0c      	subs	r3, #12
   12d38:	681b      	ldr	r3, [r3, #0]
   12d3a:	461a      	mov	r2, r3
   12d3c:	687b      	ldr	r3, [r7, #4]
   12d3e:	1898      	adds	r0, r3, r2
   12d40:	687b      	ldr	r3, [r7, #4]
   12d42:	7e59      	ldrb	r1, [r3, #25]
   12d44:	687b      	ldr	r3, [r7, #4]
   12d46:	685b      	ldr	r3, [r3, #4]
   12d48:	461a      	mov	r2, r3
   12d4a:	4b1b      	ldr	r3, [pc, #108]	; (12db8 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xc0>)
   12d4c:	4798      	blx	r3
   12d4e:	4603      	mov	r3, r0
   12d50:	461a      	mov	r2, r3
   12d52:	687b      	ldr	r3, [r7, #4]
   12d54:	761a      	strb	r2, [r3, #24]
	uint8_t angle=fv1.GetCurrentAngle();
   12d56:	4819      	ldr	r0, [pc, #100]	; (12dbc <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xc4>)
   12d58:	4b19      	ldr	r3, [pc, #100]	; (12dc0 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xc8>)
   12d5a:	4798      	blx	r3
   12d5c:	4603      	mov	r3, r0
   12d5e:	73fb      	strb	r3, [r7, #15]
	data=MakeTXLabel275(angle);
   12d60:	687b      	ldr	r3, [r7, #4]
   12d62:	681b      	ldr	r3, [r3, #0]
   12d64:	3b10      	subs	r3, #16
   12d66:	681b      	ldr	r3, [r3, #0]
   12d68:	461a      	mov	r2, r3
   12d6a:	687b      	ldr	r3, [r7, #4]
   12d6c:	4413      	add	r3, r2
   12d6e:	7bfa      	ldrb	r2, [r7, #15]
   12d70:	4611      	mov	r1, r2
   12d72:	4618      	mov	r0, r3
   12d74:	4b13      	ldr	r3, [pc, #76]	; (12dc4 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xcc>)
   12d76:	4798      	blx	r3
   12d78:	4602      	mov	r2, r0
   12d7a:	687b      	ldr	r3, [r7, #4]
   12d7c:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   12d7e:	687b      	ldr	r3, [r7, #4]
   12d80:	681b      	ldr	r3, [r3, #0]
   12d82:	3b0c      	subs	r3, #12
   12d84:	681b      	ldr	r3, [r3, #0]
   12d86:	461a      	mov	r2, r3
   12d88:	687b      	ldr	r3, [r7, #4]
   12d8a:	1898      	adds	r0, r3, r2
   12d8c:	687b      	ldr	r3, [r7, #4]
   12d8e:	69d9      	ldr	r1, [r3, #28]
   12d90:	687b      	ldr	r3, [r7, #4]
   12d92:	3320      	adds	r3, #32
   12d94:	461a      	mov	r2, r3
   12d96:	4b0c      	ldr	r3, [pc, #48]	; (12dc8 <_ZN18ARINC_Buffer_Class21SaveFlapperValveAngleEv+0xd0>)
   12d98:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   12d9a:	687b      	ldr	r3, [r7, #4]
   12d9c:	695a      	ldr	r2, [r3, #20]
   12d9e:	687b      	ldr	r3, [r7, #4]
   12da0:	7e1b      	ldrb	r3, [r3, #24]
   12da2:	009b      	lsls	r3, r3, #2
   12da4:	4413      	add	r3, r2
   12da6:	681b      	ldr	r3, [r3, #0]
   12da8:	687a      	ldr	r2, [r7, #4]
   12daa:	3220      	adds	r2, #32
   12dac:	6812      	ldr	r2, [r2, #0]
   12dae:	601a      	str	r2, [r3, #0]
}
   12db0:	bf00      	nop
   12db2:	3710      	adds	r7, #16
   12db4:	46bd      	mov	sp, r7
   12db6:	bd80      	pop	{r7, pc}
   12db8:	000131d3 	.word	0x000131d3
   12dbc:	20009c38 	.word	0x20009c38
   12dc0:	00015651 	.word	0x00015651
   12dc4:	000147b9 	.word	0x000147b9
   12dc8:	00013261 	.word	0x00013261

00012dcc <_ZN18ARINC_Buffer_Class15SaveTemperatureEv>:

void ARINC_Buffer_Class::SaveTemperature(void){
   12dcc:	b590      	push	{r4, r7, lr}
   12dce:	b085      	sub	sp, #20
   12dd0:	af00      	add	r7, sp, #0
   12dd2:	6078      	str	r0, [r7, #4]
	octalLabel=Label2Byte(COCKPITS_TEMPERATURE);
   12dd4:	687b      	ldr	r3, [r7, #4]
   12dd6:	681b      	ldr	r3, [r3, #0]
   12dd8:	3b0c      	subs	r3, #12
   12dda:	681b      	ldr	r3, [r3, #0]
   12ddc:	461a      	mov	r2, r3
   12dde:	687b      	ldr	r3, [r7, #4]
   12de0:	4413      	add	r3, r2
   12de2:	681b      	ldr	r3, [r3, #0]
   12de4:	3304      	adds	r3, #4
   12de6:	681b      	ldr	r3, [r3, #0]
   12de8:	687a      	ldr	r2, [r7, #4]
   12dea:	6812      	ldr	r2, [r2, #0]
   12dec:	3a0c      	subs	r2, #12
   12dee:	6812      	ldr	r2, [r2, #0]
   12df0:	4611      	mov	r1, r2
   12df2:	687a      	ldr	r2, [r7, #4]
   12df4:	440a      	add	r2, r1
   12df6:	f44f 71bb 	mov.w	r1, #374	; 0x176
   12dfa:	4610      	mov	r0, r2
   12dfc:	4798      	blx	r3
   12dfe:	4603      	mov	r3, r0
   12e00:	461a      	mov	r2, r3
   12e02:	687b      	ldr	r3, [r7, #4]
   12e04:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   12e06:	687b      	ldr	r3, [r7, #4]
   12e08:	681b      	ldr	r3, [r3, #0]
   12e0a:	3b0c      	subs	r3, #12
   12e0c:	681b      	ldr	r3, [r3, #0]
   12e0e:	461a      	mov	r2, r3
   12e10:	687b      	ldr	r3, [r7, #4]
   12e12:	1898      	adds	r0, r3, r2
   12e14:	687b      	ldr	r3, [r7, #4]
   12e16:	7e59      	ldrb	r1, [r3, #25]
   12e18:	687b      	ldr	r3, [r7, #4]
   12e1a:	685b      	ldr	r3, [r3, #4]
   12e1c:	461a      	mov	r2, r3
   12e1e:	4b21      	ldr	r3, [pc, #132]	; (12ea4 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xd8>)
   12e20:	4798      	blx	r3
   12e22:	4603      	mov	r3, r0
   12e24:	461a      	mov	r2, r3
   12e26:	687b      	ldr	r3, [r7, #4]
   12e28:	761a      	strb	r2, [r3, #24]
	float temperature=temperatures.values[0][1];
   12e2a:	4b1f      	ldr	r3, [pc, #124]	; (12ea8 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xdc>)
   12e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12e2e:	60fb      	str	r3, [r7, #12]
	data=MakeLabel374(FloatTwoComplement(temperature,15),temperature);
   12e30:	687b      	ldr	r3, [r7, #4]
   12e32:	681b      	ldr	r3, [r3, #0]
   12e34:	3b10      	subs	r3, #16
   12e36:	681b      	ldr	r3, [r3, #0]
   12e38:	461a      	mov	r2, r3
   12e3a:	687b      	ldr	r3, [r7, #4]
   12e3c:	189c      	adds	r4, r3, r2
   12e3e:	687b      	ldr	r3, [r7, #4]
   12e40:	681b      	ldr	r3, [r3, #0]
   12e42:	3b0c      	subs	r3, #12
   12e44:	681b      	ldr	r3, [r3, #0]
   12e46:	461a      	mov	r2, r3
   12e48:	687b      	ldr	r3, [r7, #4]
   12e4a:	4413      	add	r3, r2
   12e4c:	220f      	movs	r2, #15
   12e4e:	68f9      	ldr	r1, [r7, #12]
   12e50:	4618      	mov	r0, r3
   12e52:	4b16      	ldr	r3, [pc, #88]	; (12eac <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xe0>)
   12e54:	4798      	blx	r3
   12e56:	4603      	mov	r3, r0
   12e58:	68fa      	ldr	r2, [r7, #12]
   12e5a:	4619      	mov	r1, r3
   12e5c:	4620      	mov	r0, r4
   12e5e:	4b14      	ldr	r3, [pc, #80]	; (12eb0 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xe4>)
   12e60:	4798      	blx	r3
   12e62:	4602      	mov	r2, r0
   12e64:	687b      	ldr	r3, [r7, #4]
   12e66:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   12e68:	687b      	ldr	r3, [r7, #4]
   12e6a:	681b      	ldr	r3, [r3, #0]
   12e6c:	3b0c      	subs	r3, #12
   12e6e:	681b      	ldr	r3, [r3, #0]
   12e70:	461a      	mov	r2, r3
   12e72:	687b      	ldr	r3, [r7, #4]
   12e74:	1898      	adds	r0, r3, r2
   12e76:	687b      	ldr	r3, [r7, #4]
   12e78:	69d9      	ldr	r1, [r3, #28]
   12e7a:	687b      	ldr	r3, [r7, #4]
   12e7c:	3320      	adds	r3, #32
   12e7e:	461a      	mov	r2, r3
   12e80:	4b0c      	ldr	r3, [pc, #48]	; (12eb4 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xe8>)
   12e82:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   12e84:	687b      	ldr	r3, [r7, #4]
   12e86:	695a      	ldr	r2, [r3, #20]
   12e88:	687b      	ldr	r3, [r7, #4]
   12e8a:	7e1b      	ldrb	r3, [r3, #24]
   12e8c:	009b      	lsls	r3, r3, #2
   12e8e:	4413      	add	r3, r2
   12e90:	681b      	ldr	r3, [r3, #0]
   12e92:	687a      	ldr	r2, [r7, #4]
   12e94:	3220      	adds	r2, #32
   12e96:	6812      	ldr	r2, [r2, #0]
   12e98:	601a      	str	r2, [r3, #0]
}
   12e9a:	bf00      	nop
   12e9c:	3714      	adds	r7, #20
   12e9e:	46bd      	mov	sp, r7
   12ea0:	bd90      	pop	{r4, r7, pc}
   12ea2:	bf00      	nop
   12ea4:	000131d3 	.word	0x000131d3
   12ea8:	20009d9c 	.word	0x20009d9c
   12eac:	000132a5 	.word	0x000132a5
   12eb0:	00014721 	.word	0x00014721
   12eb4:	00013261 	.word	0x00013261

00012eb8 <_ZN18ARINC_Buffer_Class10SaveStatusEm>:

void ARINC_Buffer_Class::SaveStatus(uint32_t st){
   12eb8:	b580      	push	{r7, lr}
   12eba:	b082      	sub	sp, #8
   12ebc:	af00      	add	r7, sp, #0
   12ebe:	6078      	str	r0, [r7, #4]
   12ec0:	6039      	str	r1, [r7, #0]
	octalLabel=Label2Byte(ECS_COMMAND_ACKNOWLEDGE);
   12ec2:	687b      	ldr	r3, [r7, #4]
   12ec4:	681b      	ldr	r3, [r3, #0]
   12ec6:	3b0c      	subs	r3, #12
   12ec8:	681b      	ldr	r3, [r3, #0]
   12eca:	461a      	mov	r2, r3
   12ecc:	687b      	ldr	r3, [r7, #4]
   12ece:	4413      	add	r3, r2
   12ed0:	681b      	ldr	r3, [r3, #0]
   12ed2:	3304      	adds	r3, #4
   12ed4:	681b      	ldr	r3, [r3, #0]
   12ed6:	687a      	ldr	r2, [r7, #4]
   12ed8:	6812      	ldr	r2, [r2, #0]
   12eda:	3a0c      	subs	r2, #12
   12edc:	6812      	ldr	r2, [r2, #0]
   12ede:	4611      	mov	r1, r2
   12ee0:	687a      	ldr	r2, [r7, #4]
   12ee2:	440a      	add	r2, r1
   12ee4:	f44f 7187 	mov.w	r1, #270	; 0x10e
   12ee8:	4610      	mov	r0, r2
   12eea:	4798      	blx	r3
   12eec:	4603      	mov	r3, r0
   12eee:	461a      	mov	r2, r3
   12ef0:	687b      	ldr	r3, [r7, #4]
   12ef2:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   12ef4:	687b      	ldr	r3, [r7, #4]
   12ef6:	681b      	ldr	r3, [r3, #0]
   12ef8:	3b0c      	subs	r3, #12
   12efa:	681b      	ldr	r3, [r3, #0]
   12efc:	461a      	mov	r2, r3
   12efe:	687b      	ldr	r3, [r7, #4]
   12f00:	1898      	adds	r0, r3, r2
   12f02:	687b      	ldr	r3, [r7, #4]
   12f04:	7e59      	ldrb	r1, [r3, #25]
   12f06:	687b      	ldr	r3, [r7, #4]
   12f08:	685b      	ldr	r3, [r3, #4]
   12f0a:	461a      	mov	r2, r3
   12f0c:	4b18      	ldr	r3, [pc, #96]	; (12f70 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xb8>)
   12f0e:	4798      	blx	r3
   12f10:	4603      	mov	r3, r0
   12f12:	461a      	mov	r2, r3
   12f14:	687b      	ldr	r3, [r7, #4]
   12f16:	761a      	strb	r2, [r3, #24]
	data=MakeLabel270(st);
   12f18:	687b      	ldr	r3, [r7, #4]
   12f1a:	681b      	ldr	r3, [r3, #0]
   12f1c:	3b10      	subs	r3, #16
   12f1e:	681b      	ldr	r3, [r3, #0]
   12f20:	461a      	mov	r2, r3
   12f22:	687b      	ldr	r3, [r7, #4]
   12f24:	4413      	add	r3, r2
   12f26:	6839      	ldr	r1, [r7, #0]
   12f28:	4618      	mov	r0, r3
   12f2a:	4b12      	ldr	r3, [pc, #72]	; (12f74 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xbc>)
   12f2c:	4798      	blx	r3
   12f2e:	4602      	mov	r2, r0
   12f30:	687b      	ldr	r3, [r7, #4]
   12f32:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   12f34:	687b      	ldr	r3, [r7, #4]
   12f36:	681b      	ldr	r3, [r3, #0]
   12f38:	3b0c      	subs	r3, #12
   12f3a:	681b      	ldr	r3, [r3, #0]
   12f3c:	461a      	mov	r2, r3
   12f3e:	687b      	ldr	r3, [r7, #4]
   12f40:	1898      	adds	r0, r3, r2
   12f42:	687b      	ldr	r3, [r7, #4]
   12f44:	69d9      	ldr	r1, [r3, #28]
   12f46:	687b      	ldr	r3, [r7, #4]
   12f48:	3320      	adds	r3, #32
   12f4a:	461a      	mov	r2, r3
   12f4c:	4b0a      	ldr	r3, [pc, #40]	; (12f78 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xc0>)
   12f4e:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   12f50:	687b      	ldr	r3, [r7, #4]
   12f52:	695a      	ldr	r2, [r3, #20]
   12f54:	687b      	ldr	r3, [r7, #4]
   12f56:	7e1b      	ldrb	r3, [r3, #24]
   12f58:	009b      	lsls	r3, r3, #2
   12f5a:	4413      	add	r3, r2
   12f5c:	681b      	ldr	r3, [r3, #0]
   12f5e:	687a      	ldr	r2, [r7, #4]
   12f60:	3220      	adds	r2, #32
   12f62:	6812      	ldr	r2, [r2, #0]
   12f64:	601a      	str	r2, [r3, #0]
}
   12f66:	bf00      	nop
   12f68:	3708      	adds	r7, #8
   12f6a:	46bd      	mov	sp, r7
   12f6c:	bd80      	pop	{r7, pc}
   12f6e:	bf00      	nop
   12f70:	000131d3 	.word	0x000131d3
   12f74:	00014831 	.word	0x00014831
   12f78:	00013261 	.word	0x00013261

00012f7c <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh>:

void ARINC_Buffer_Class::SortReceivedData(uint8_t* receiver){
   12f7c:	b480      	push	{r7}
   12f7e:	b085      	sub	sp, #20
   12f80:	af00      	add	r7, sp, #0
   12f82:	6078      	str	r0, [r7, #4]
   12f84:	6039      	str	r1, [r7, #0]
		uint8_t i;
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
   12f86:	2300      	movs	r3, #0
   12f88:	73fb      	strb	r3, [r7, #15]
   12f8a:	7bfb      	ldrb	r3, [r7, #15]
   12f8c:	2b1f      	cmp	r3, #31
   12f8e:	dc1d      	bgt.n	12fcc <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x50>
		{
			if (LabelsArrayRX1[i]>0)
   12f90:	687b      	ldr	r3, [r7, #4]
   12f92:	689a      	ldr	r2, [r3, #8]
   12f94:	7bfb      	ldrb	r3, [r7, #15]
   12f96:	4413      	add	r3, r2
   12f98:	781b      	ldrb	r3, [r3, #0]
   12f9a:	2b00      	cmp	r3, #0
   12f9c:	dd12      	ble.n	12fc4 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x48>
			{
			
					if (receiver[3]==LabelsArrayRX1[i])
   12f9e:	683b      	ldr	r3, [r7, #0]
   12fa0:	3303      	adds	r3, #3
   12fa2:	781a      	ldrb	r2, [r3, #0]
   12fa4:	687b      	ldr	r3, [r7, #4]
   12fa6:	6899      	ldr	r1, [r3, #8]
   12fa8:	7bfb      	ldrb	r3, [r7, #15]
   12faa:	440b      	add	r3, r1
   12fac:	781b      	ldrb	r3, [r3, #0]
   12fae:	429a      	cmp	r2, r3
   12fb0:	d108      	bne.n	12fc4 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x48>
					{
						memcpy(receiverBuffer[i],receiver,4);
   12fb2:	687b      	ldr	r3, [r7, #4]
   12fb4:	691a      	ldr	r2, [r3, #16]
   12fb6:	7bfb      	ldrb	r3, [r7, #15]
   12fb8:	009b      	lsls	r3, r3, #2
   12fba:	4413      	add	r3, r2
   12fbc:	681b      	ldr	r3, [r3, #0]
   12fbe:	683a      	ldr	r2, [r7, #0]
   12fc0:	6812      	ldr	r2, [r2, #0]
   12fc2:	601a      	str	r2, [r3, #0]
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
   12fc4:	7bfb      	ldrb	r3, [r7, #15]
   12fc6:	3301      	adds	r3, #1
   12fc8:	73fb      	strb	r3, [r7, #15]
   12fca:	e7de      	b.n	12f8a <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0xe>
					}
			
	
			}
		}
   12fcc:	bf00      	nop
   12fce:	3714      	adds	r7, #20
   12fd0:	46bd      	mov	sp, r7
   12fd2:	bc80      	pop	{r7}
   12fd4:	4770      	bx	lr
	...

00012fd8 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
   12fd8:	b480      	push	{r7}
   12fda:	b083      	sub	sp, #12
   12fdc:	af00      	add	r7, sp, #0
   12fde:	6078      	str	r0, [r7, #4]
   12fe0:	4a04      	ldr	r2, [pc, #16]	; (12ff4 <_ZN17ARINC_ConversionsC1Ev+0x1c>)
   12fe2:	687b      	ldr	r3, [r7, #4]
   12fe4:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
   12fe6:	687b      	ldr	r3, [r7, #4]
   12fe8:	4618      	mov	r0, r3
   12fea:	370c      	adds	r7, #12
   12fec:	46bd      	mov	sp, r7
   12fee:	bc80      	pop	{r7}
   12ff0:	4770      	bx	lr
   12ff2:	bf00      	nop
   12ff4:	00020e00 	.word	0x00020e00

00012ff8 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
   12ff8:	b480      	push	{r7}
   12ffa:	b083      	sub	sp, #12
   12ffc:	af00      	add	r7, sp, #0
   12ffe:	6078      	str	r0, [r7, #4]
   13000:	4a04      	ldr	r2, [pc, #16]	; (13014 <_ZN17ARINC_ConversionsD1Ev+0x1c>)
   13002:	687b      	ldr	r3, [r7, #4]
   13004:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
   13006:	687b      	ldr	r3, [r7, #4]
   13008:	4618      	mov	r0, r3
   1300a:	370c      	adds	r7, #12
   1300c:	46bd      	mov	sp, r7
   1300e:	bc80      	pop	{r7}
   13010:	4770      	bx	lr
   13012:	bf00      	nop
   13014:	00020e00 	.word	0x00020e00

00013018 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   13018:	b5b0      	push	{r4, r5, r7, lr}
   1301a:	b082      	sub	sp, #8
   1301c:	af00      	add	r7, sp, #0
   1301e:	6078      	str	r0, [r7, #4]
   13020:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   13022:	4b0a      	ldr	r3, [pc, #40]	; (1304c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   13024:	6878      	ldr	r0, [r7, #4]
   13026:	4798      	blx	r3
   13028:	4604      	mov	r4, r0
   1302a:	460d      	mov	r5, r1
   1302c:	4b07      	ldr	r3, [pc, #28]	; (1304c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   1302e:	6838      	ldr	r0, [r7, #0]
   13030:	4798      	blx	r3
   13032:	4602      	mov	r2, r0
   13034:	460b      	mov	r3, r1
   13036:	4620      	mov	r0, r4
   13038:	4629      	mov	r1, r5
   1303a:	4c05      	ldr	r4, [pc, #20]	; (13050 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
   1303c:	47a0      	blx	r4
   1303e:	4603      	mov	r3, r0
   13040:	460c      	mov	r4, r1
    }
   13042:	4618      	mov	r0, r3
   13044:	4621      	mov	r1, r4
   13046:	3708      	adds	r7, #8
   13048:	46bd      	mov	sp, r7
   1304a:	bdb0      	pop	{r4, r5, r7, pc}
   1304c:	0001b239 	.word	0x0001b239
   13050:	00019e49 	.word	0x00019e49

00013054 <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
   13054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13058:	b085      	sub	sp, #20
   1305a:	af00      	add	r7, sp, #0
   1305c:	6078      	str	r0, [r7, #4]
   1305e:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
   13060:	2300      	movs	r3, #0
   13062:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   13064:	2300      	movs	r3, #0
   13066:	73bb      	strb	r3, [r7, #14]
   13068:	7bbb      	ldrb	r3, [r7, #14]
   1306a:	2b02      	cmp	r3, #2
   1306c:	d86d      	bhi.n	1314a <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
   1306e:	7bbb      	ldrb	r3, [r7, #14]
   13070:	f1c3 0402 	rsb	r4, r3, #2
   13074:	4b3c      	ldr	r3, [pc, #240]	; (13168 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   13076:	6838      	ldr	r0, [r7, #0]
   13078:	4798      	blx	r3
   1307a:	4680      	mov	r8, r0
   1307c:	4689      	mov	r9, r1
   1307e:	7bbb      	ldrb	r3, [r7, #14]
   13080:	f1c3 0302 	rsb	r3, r3, #2
   13084:	4619      	mov	r1, r3
   13086:	200a      	movs	r0, #10
   13088:	4b38      	ldr	r3, [pc, #224]	; (1316c <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   1308a:	4798      	blx	r3
   1308c:	4602      	mov	r2, r0
   1308e:	460b      	mov	r3, r1
   13090:	4d37      	ldr	r5, [pc, #220]	; (13170 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
   13092:	4640      	mov	r0, r8
   13094:	4649      	mov	r1, r9
   13096:	47a8      	blx	r5
   13098:	4602      	mov	r2, r0
   1309a:	460b      	mov	r3, r1
   1309c:	4611      	mov	r1, r2
   1309e:	461a      	mov	r2, r3
   130a0:	4b34      	ldr	r3, [pc, #208]	; (13174 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   130a2:	4608      	mov	r0, r1
   130a4:	4611      	mov	r1, r2
   130a6:	4798      	blx	r3
   130a8:	4603      	mov	r3, r0
   130aa:	b2da      	uxtb	r2, r3
   130ac:	f107 0310 	add.w	r3, r7, #16
   130b0:	4423      	add	r3, r4
   130b2:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
   130b6:	7bbb      	ldrb	r3, [r7, #14]
   130b8:	f1c3 0302 	rsb	r3, r3, #2
   130bc:	f107 0210 	add.w	r2, r7, #16
   130c0:	4413      	add	r3, r2
   130c2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   130c6:	461a      	mov	r2, r3
   130c8:	4b2b      	ldr	r3, [pc, #172]	; (13178 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
   130ca:	4610      	mov	r0, r2
   130cc:	4798      	blx	r3
   130ce:	4605      	mov	r5, r0
   130d0:	460e      	mov	r6, r1
   130d2:	7bbb      	ldrb	r3, [r7, #14]
   130d4:	f1c3 0302 	rsb	r3, r3, #2
   130d8:	4619      	mov	r1, r3
   130da:	200a      	movs	r0, #10
   130dc:	4b23      	ldr	r3, [pc, #140]	; (1316c <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   130de:	4798      	blx	r3
   130e0:	4602      	mov	r2, r0
   130e2:	460b      	mov	r3, r1
   130e4:	4c25      	ldr	r4, [pc, #148]	; (1317c <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
   130e6:	4628      	mov	r0, r5
   130e8:	4631      	mov	r1, r6
   130ea:	47a0      	blx	r4
   130ec:	4603      	mov	r3, r0
   130ee:	460c      	mov	r4, r1
   130f0:	461d      	mov	r5, r3
   130f2:	4626      	mov	r6, r4
   130f4:	4b1c      	ldr	r3, [pc, #112]	; (13168 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   130f6:	6838      	ldr	r0, [r7, #0]
   130f8:	4798      	blx	r3
   130fa:	4c21      	ldr	r4, [pc, #132]	; (13180 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
   130fc:	462a      	mov	r2, r5
   130fe:	4633      	mov	r3, r6
   13100:	47a0      	blx	r4
   13102:	4603      	mov	r3, r0
   13104:	460c      	mov	r4, r1
   13106:	4619      	mov	r1, r3
   13108:	4622      	mov	r2, r4
   1310a:	4b1a      	ldr	r3, [pc, #104]	; (13174 <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   1310c:	4608      	mov	r0, r1
   1310e:	4611      	mov	r1, r2
   13110:	4798      	blx	r3
   13112:	4603      	mov	r3, r0
   13114:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
   13116:	7bbb      	ldrb	r3, [r7, #14]
   13118:	f1c3 0302 	rsb	r3, r3, #2
   1311c:	f107 0210 	add.w	r2, r7, #16
   13120:	4413      	add	r3, r2
   13122:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   13126:	461a      	mov	r2, r3
   13128:	7bbb      	ldrb	r3, [r7, #14]
   1312a:	4619      	mov	r1, r3
   1312c:	009b      	lsls	r3, r3, #2
   1312e:	1acb      	subs	r3, r1, r3
   13130:	3306      	adds	r3, #6
   13132:	fa02 f303 	lsl.w	r3, r2, r3
   13136:	b25a      	sxtb	r2, r3
   13138:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1313c:	4313      	orrs	r3, r2
   1313e:	b25b      	sxtb	r3, r3
   13140:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   13142:	7bbb      	ldrb	r3, [r7, #14]
   13144:	3301      	adds	r3, #1
   13146:	73bb      	strb	r3, [r7, #14]
   13148:	e78e      	b.n	13068 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
   1314a:	687b      	ldr	r3, [r7, #4]
   1314c:	681b      	ldr	r3, [r3, #0]
   1314e:	681b      	ldr	r3, [r3, #0]
   13150:	7bfa      	ldrb	r2, [r7, #15]
   13152:	4611      	mov	r1, r2
   13154:	6878      	ldr	r0, [r7, #4]
   13156:	4798      	blx	r3
   13158:	4603      	mov	r3, r0
   1315a:	73fb      	strb	r3, [r7, #15]
	return result;
   1315c:	7bfb      	ldrb	r3, [r7, #15]
	
}
   1315e:	4618      	mov	r0, r3
   13160:	3714      	adds	r7, #20
   13162:	46bd      	mov	sp, r7
   13164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13168:	0001b219 	.word	0x0001b219
   1316c:	00013019 	.word	0x00013019
   13170:	0001b559 	.word	0x0001b559
   13174:	0001b865 	.word	0x0001b865
   13178:	0001b239 	.word	0x0001b239
   1317c:	0001b305 	.word	0x0001b305
   13180:	0001af9d 	.word	0x0001af9d

00013184 <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
   13184:	b480      	push	{r7}
   13186:	b085      	sub	sp, #20
   13188:	af00      	add	r7, sp, #0
   1318a:	6078      	str	r0, [r7, #4]
   1318c:	460b      	mov	r3, r1
   1318e:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
   13190:	2300      	movs	r3, #0
   13192:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   13194:	2300      	movs	r3, #0
   13196:	60bb      	str	r3, [r7, #8]
   13198:	68bb      	ldr	r3, [r7, #8]
   1319a:	2b07      	cmp	r3, #7
   1319c:	dc13      	bgt.n	131c6 <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
   1319e:	7bfb      	ldrb	r3, [r7, #15]
   131a0:	005b      	lsls	r3, r3, #1
   131a2:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   131a4:	78fa      	ldrb	r2, [r7, #3]
   131a6:	68bb      	ldr	r3, [r7, #8]
   131a8:	fa42 f303 	asr.w	r3, r2, r3
   131ac:	b25b      	sxtb	r3, r3
   131ae:	f003 0301 	and.w	r3, r3, #1
   131b2:	b25a      	sxtb	r2, r3
   131b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   131b8:	4313      	orrs	r3, r2
   131ba:	b25b      	sxtb	r3, r3
   131bc:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   131be:	68bb      	ldr	r3, [r7, #8]
   131c0:	3301      	adds	r3, #1
   131c2:	60bb      	str	r3, [r7, #8]
   131c4:	e7e8      	b.n	13198 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
   131c6:	7bfb      	ldrb	r3, [r7, #15]
}
   131c8:	4618      	mov	r0, r3
   131ca:	3714      	adds	r7, #20
   131cc:	46bd      	mov	sp, r7
   131ce:	bc80      	pop	{r7}
   131d0:	4770      	bx	lr

000131d2 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh>:
uint8_t ARINC_Conversions::GetIndexTXLabelarray(uint8_t l, uint8_t* arr){
   131d2:	b480      	push	{r7}
   131d4:	b087      	sub	sp, #28
   131d6:	af00      	add	r7, sp, #0
   131d8:	60f8      	str	r0, [r7, #12]
   131da:	460b      	mov	r3, r1
   131dc:	607a      	str	r2, [r7, #4]
   131de:	72fb      	strb	r3, [r7, #11]
	for (uint8_t ii = 0; ii < 32; ii++)
   131e0:	2300      	movs	r3, #0
   131e2:	75fb      	strb	r3, [r7, #23]
   131e4:	7dfb      	ldrb	r3, [r7, #23]
   131e6:	2b1f      	cmp	r3, #31
   131e8:	dc0c      	bgt.n	13204 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x32>
	{
		if (arr[ii]==l)
   131ea:	7dfb      	ldrb	r3, [r7, #23]
   131ec:	687a      	ldr	r2, [r7, #4]
   131ee:	4413      	add	r3, r2
   131f0:	781b      	ldrb	r3, [r3, #0]
   131f2:	7afa      	ldrb	r2, [r7, #11]
   131f4:	429a      	cmp	r2, r3
   131f6:	d101      	bne.n	131fc <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x2a>
		{
			return ii;
   131f8:	7dfb      	ldrb	r3, [r7, #23]
   131fa:	e004      	b.n	13206 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x34>
	for (uint8_t ii = 0; ii < 32; ii++)
   131fc:	7dfb      	ldrb	r3, [r7, #23]
   131fe:	3301      	adds	r3, #1
   13200:	75fb      	strb	r3, [r7, #23]
   13202:	e7ef      	b.n	131e4 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x12>
		}
		
	}
	return 32;
   13204:	2320      	movs	r3, #32
}
   13206:	4618      	mov	r0, r3
   13208:	371c      	adds	r7, #28
   1320a:	46bd      	mov	sp, r7
   1320c:	bc80      	pop	{r7}
   1320e:	4770      	bx	lr

00013210 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh>:
		
	}


}
uint32_t	ARINC_Conversions::FourBytesArray2Uint32(uint8_t* arr){
   13210:	b480      	push	{r7}
   13212:	b085      	sub	sp, #20
   13214:	af00      	add	r7, sp, #0
   13216:	6078      	str	r0, [r7, #4]
   13218:	6039      	str	r1, [r7, #0]

		result=0;
   1321a:	687b      	ldr	r3, [r7, #4]
   1321c:	2200      	movs	r2, #0
   1321e:	609a      	str	r2, [r3, #8]
		for (uint8_t ii = 0; ii < 4; ii++)
   13220:	2300      	movs	r3, #0
   13222:	73fb      	strb	r3, [r7, #15]
   13224:	7bfb      	ldrb	r3, [r7, #15]
   13226:	2b03      	cmp	r3, #3
   13228:	dc13      	bgt.n	13252 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x42>
		{
			result|=((uint32_t)arr[ii])<<(24-ii*8);
   1322a:	687b      	ldr	r3, [r7, #4]
   1322c:	689a      	ldr	r2, [r3, #8]
   1322e:	7bfb      	ldrb	r3, [r7, #15]
   13230:	6839      	ldr	r1, [r7, #0]
   13232:	440b      	add	r3, r1
   13234:	781b      	ldrb	r3, [r3, #0]
   13236:	4619      	mov	r1, r3
   13238:	7bfb      	ldrb	r3, [r7, #15]
   1323a:	f1c3 0303 	rsb	r3, r3, #3
   1323e:	00db      	lsls	r3, r3, #3
   13240:	fa01 f303 	lsl.w	r3, r1, r3
   13244:	431a      	orrs	r2, r3
   13246:	687b      	ldr	r3, [r7, #4]
   13248:	609a      	str	r2, [r3, #8]
		for (uint8_t ii = 0; ii < 4; ii++)
   1324a:	7bfb      	ldrb	r3, [r7, #15]
   1324c:	3301      	adds	r3, #1
   1324e:	73fb      	strb	r3, [r7, #15]
   13250:	e7e8      	b.n	13224 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x14>

		}
		return result;
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	689b      	ldr	r3, [r3, #8]
}
   13256:	4618      	mov	r0, r3
   13258:	3714      	adds	r7, #20
   1325a:	46bd      	mov	sp, r7
   1325c:	bc80      	pop	{r7}
   1325e:	4770      	bx	lr

00013260 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh>:
void	ARINC_Conversions::Uint32FourBytesArray(uint32_t data,uint8_t *dest){
   13260:	b480      	push	{r7}
   13262:	b087      	sub	sp, #28
   13264:	af00      	add	r7, sp, #0
   13266:	60f8      	str	r0, [r7, #12]
   13268:	60b9      	str	r1, [r7, #8]
   1326a:	607a      	str	r2, [r7, #4]

	uint8_t d;
	for (uint8_t ii = 0; ii < 4; ii++)
   1326c:	2300      	movs	r3, #0
   1326e:	75fb      	strb	r3, [r7, #23]
   13270:	7dfb      	ldrb	r3, [r7, #23]
   13272:	2b03      	cmp	r3, #3
   13274:	dc10      	bgt.n	13298 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh+0x38>
	{
		d=(uint8_t)((data>>(24-ii*8))&(0xff));
   13276:	7dfb      	ldrb	r3, [r7, #23]
   13278:	f1c3 0303 	rsb	r3, r3, #3
   1327c:	00db      	lsls	r3, r3, #3
   1327e:	68ba      	ldr	r2, [r7, #8]
   13280:	fa22 f303 	lsr.w	r3, r2, r3
   13284:	75bb      	strb	r3, [r7, #22]
		dest[ii]=d;
   13286:	7dfb      	ldrb	r3, [r7, #23]
   13288:	687a      	ldr	r2, [r7, #4]
   1328a:	4413      	add	r3, r2
   1328c:	7dba      	ldrb	r2, [r7, #22]
   1328e:	701a      	strb	r2, [r3, #0]
	for (uint8_t ii = 0; ii < 4; ii++)
   13290:	7dfb      	ldrb	r3, [r7, #23]
   13292:	3301      	adds	r3, #1
   13294:	75fb      	strb	r3, [r7, #23]
   13296:	e7eb      	b.n	13270 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh+0x10>

	}

}
   13298:	bf00      	nop
   1329a:	371c      	adds	r7, #28
   1329c:	46bd      	mov	sp, r7
   1329e:	bc80      	pop	{r7}
   132a0:	4770      	bx	lr
	...

000132a4 <_ZN17ARINC_Conversions18FloatTwoComplementEfh>:
uint32_t	ARINC_Conversions::FloatTwoComplement(float f, uint8_t size){
   132a4:	b580      	push	{r7, lr}
   132a6:	b084      	sub	sp, #16
   132a8:	af00      	add	r7, sp, #0
   132aa:	60f8      	str	r0, [r7, #12]
   132ac:	60b9      	str	r1, [r7, #8]
   132ae:	4613      	mov	r3, r2
   132b0:	71fb      	strb	r3, [r7, #7]
	
	if (f>=0)
   132b2:	4b17      	ldr	r3, [pc, #92]	; (13310 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x6c>)
   132b4:	f04f 0100 	mov.w	r1, #0
   132b8:	68b8      	ldr	r0, [r7, #8]
   132ba:	4798      	blx	r3
   132bc:	4603      	mov	r3, r0
   132be:	2b00      	cmp	r3, #0
   132c0:	d006      	beq.n	132d0 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x2c>
	{
		value=(uint32_t)f;
   132c2:	4b14      	ldr	r3, [pc, #80]	; (13314 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x70>)
   132c4:	68b8      	ldr	r0, [r7, #8]
   132c6:	4798      	blx	r3
   132c8:	4602      	mov	r2, r0
   132ca:	68fb      	ldr	r3, [r7, #12]
   132cc:	60da      	str	r2, [r3, #12]
   132ce:	e018      	b.n	13302 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x5e>
	} 
	else
	{
		value=(uint32_t)(-1*f);
   132d0:	68bb      	ldr	r3, [r7, #8]
   132d2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   132d6:	4b0f      	ldr	r3, [pc, #60]	; (13314 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x70>)
   132d8:	4610      	mov	r0, r2
   132da:	4798      	blx	r3
   132dc:	4602      	mov	r2, r0
   132de:	68fb      	ldr	r3, [r7, #12]
   132e0:	60da      	str	r2, [r3, #12]
		value=(~value)&((1<<(size))-1);
   132e2:	68fb      	ldr	r3, [r7, #12]
   132e4:	68db      	ldr	r3, [r3, #12]
   132e6:	43db      	mvns	r3, r3
   132e8:	79fa      	ldrb	r2, [r7, #7]
   132ea:	4611      	mov	r1, r2
   132ec:	2201      	movs	r2, #1
   132ee:	408a      	lsls	r2, r1
   132f0:	3a01      	subs	r2, #1
   132f2:	401a      	ands	r2, r3
   132f4:	68fb      	ldr	r3, [r7, #12]
   132f6:	60da      	str	r2, [r3, #12]
		value+=1;
   132f8:	68fb      	ldr	r3, [r7, #12]
   132fa:	68db      	ldr	r3, [r3, #12]
   132fc:	1c5a      	adds	r2, r3, #1
   132fe:	68fb      	ldr	r3, [r7, #12]
   13300:	60da      	str	r2, [r3, #12]
	}
	return value;
   13302:	68fb      	ldr	r3, [r7, #12]
   13304:	68db      	ldr	r3, [r3, #12]
}
   13306:	4618      	mov	r0, r3
   13308:	3710      	adds	r7, #16
   1330a:	46bd      	mov	sp, r7
   1330c:	bd80      	pop	{r7, pc}
   1330e:	bf00      	nop
   13310:	0001be25 	.word	0x0001be25
   13314:	0001be4d 	.word	0x0001be4d

00013318 <_ZN17ARINC_Conversions10FindParityEm>:


// Function to find the parity
bool ARINC_Conversions::FindParity(uint32_t x)
{
   13318:	b480      	push	{r7}
   1331a:	b085      	sub	sp, #20
   1331c:	af00      	add	r7, sp, #0
   1331e:	6078      	str	r0, [r7, #4]
   13320:	6039      	str	r1, [r7, #0]
	uint32_t y = x ^ (x >> 1);
   13322:	683b      	ldr	r3, [r7, #0]
   13324:	085a      	lsrs	r2, r3, #1
   13326:	683b      	ldr	r3, [r7, #0]
   13328:	4053      	eors	r3, r2
   1332a:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 2);
   1332c:	68fb      	ldr	r3, [r7, #12]
   1332e:	089b      	lsrs	r3, r3, #2
   13330:	68fa      	ldr	r2, [r7, #12]
   13332:	4053      	eors	r3, r2
   13334:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 4);
   13336:	68fb      	ldr	r3, [r7, #12]
   13338:	091b      	lsrs	r3, r3, #4
   1333a:	68fa      	ldr	r2, [r7, #12]
   1333c:	4053      	eors	r3, r2
   1333e:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 8);
   13340:	68fb      	ldr	r3, [r7, #12]
   13342:	0a1b      	lsrs	r3, r3, #8
   13344:	68fa      	ldr	r2, [r7, #12]
   13346:	4053      	eors	r3, r2
   13348:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 16);
   1334a:	68fb      	ldr	r3, [r7, #12]
   1334c:	0c1b      	lsrs	r3, r3, #16
   1334e:	68fa      	ldr	r2, [r7, #12]
   13350:	4053      	eors	r3, r2
   13352:	60fb      	str	r3, [r7, #12]

	// Rightmost bit of y holds the parity value
	// if (y&1) is 1 then parity is odd else even
	if (y & 1){
   13354:	68fb      	ldr	r3, [r7, #12]
   13356:	f003 0301 	and.w	r3, r3, #1
   1335a:	2b00      	cmp	r3, #0
   1335c:	d001      	beq.n	13362 <_ZN17ARINC_Conversions10FindParityEm+0x4a>
			return 1;
   1335e:	2301      	movs	r3, #1
   13360:	e000      	b.n	13364 <_ZN17ARINC_Conversions10FindParityEm+0x4c>
	}

	return 0;
   13362:	2300      	movs	r3, #0
}
   13364:	4618      	mov	r0, r3
   13366:	3714      	adds	r7, #20
   13368:	46bd      	mov	sp, r7
   1336a:	bc80      	pop	{r7}
   1336c:	4770      	bx	lr

0001336e <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   1336e:	b480      	push	{r7}
   13370:	b085      	sub	sp, #20
   13372:	af00      	add	r7, sp, #0
   13374:	60f8      	str	r0, [r7, #12]
   13376:	460b      	mov	r3, r1
   13378:	607a      	str	r2, [r7, #4]
   1337a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   1337c:	7afb      	ldrb	r3, [r7, #11]
   1337e:	68fa      	ldr	r2, [r7, #12]
   13380:	01db      	lsls	r3, r3, #7
   13382:	4413      	add	r3, r2
   13384:	3318      	adds	r3, #24
   13386:	687a      	ldr	r2, [r7, #4]
   13388:	601a      	str	r2, [r3, #0]
}
   1338a:	bf00      	nop
   1338c:	3714      	adds	r7, #20
   1338e:	46bd      	mov	sp, r7
   13390:	bc80      	pop	{r7}
   13392:	4770      	bx	lr

00013394 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   13394:	b480      	push	{r7}
   13396:	b085      	sub	sp, #20
   13398:	af00      	add	r7, sp, #0
   1339a:	60f8      	str	r0, [r7, #12]
   1339c:	460b      	mov	r3, r1
   1339e:	607a      	str	r2, [r7, #4]
   133a0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   133a2:	7afb      	ldrb	r3, [r7, #11]
   133a4:	68fa      	ldr	r2, [r7, #12]
   133a6:	01db      	lsls	r3, r3, #7
   133a8:	4413      	add	r3, r2
   133aa:	3314      	adds	r3, #20
   133ac:	687a      	ldr	r2, [r7, #4]
   133ae:	601a      	str	r2, [r3, #0]
}
   133b0:	bf00      	nop
   133b2:	3714      	adds	r7, #20
   133b4:	46bd      	mov	sp, r7
   133b6:	bc80      	pop	{r7}
   133b8:	4770      	bx	lr
	...

000133bc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   133bc:	b580      	push	{r7, lr}
   133be:	b082      	sub	sp, #8
   133c0:	af00      	add	r7, sp, #0
   133c2:	4603      	mov	r3, r0
   133c4:	6039      	str	r1, [r7, #0]
   133c6:	71fb      	strb	r3, [r7, #7]
   133c8:	4613      	mov	r3, r2
   133ca:	71bb      	strb	r3, [r7, #6]
	if (level) {
   133cc:	79bb      	ldrb	r3, [r7, #6]
   133ce:	2b00      	cmp	r3, #0
   133d0:	d006      	beq.n	133e0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   133d2:	79fb      	ldrb	r3, [r7, #7]
   133d4:	683a      	ldr	r2, [r7, #0]
   133d6:	4619      	mov	r1, r3
   133d8:	4806      	ldr	r0, [pc, #24]	; (133f4 <_gpio_set_level+0x38>)
   133da:	4b07      	ldr	r3, [pc, #28]	; (133f8 <_gpio_set_level+0x3c>)
   133dc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   133de:	e005      	b.n	133ec <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   133e0:	79fb      	ldrb	r3, [r7, #7]
   133e2:	683a      	ldr	r2, [r7, #0]
   133e4:	4619      	mov	r1, r3
   133e6:	4803      	ldr	r0, [pc, #12]	; (133f4 <_gpio_set_level+0x38>)
   133e8:	4b04      	ldr	r3, [pc, #16]	; (133fc <_gpio_set_level+0x40>)
   133ea:	4798      	blx	r3
}
   133ec:	bf00      	nop
   133ee:	3708      	adds	r7, #8
   133f0:	46bd      	mov	sp, r7
   133f2:	bd80      	pop	{r7, pc}
   133f4:	41008000 	.word	0x41008000
   133f8:	0001336f 	.word	0x0001336f
   133fc:	00013395 	.word	0x00013395

00013400 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   13400:	b580      	push	{r7, lr}
   13402:	b082      	sub	sp, #8
   13404:	af00      	add	r7, sp, #0
   13406:	4603      	mov	r3, r0
   13408:	460a      	mov	r2, r1
   1340a:	71fb      	strb	r3, [r7, #7]
   1340c:	4613      	mov	r3, r2
   1340e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   13410:	79fb      	ldrb	r3, [r7, #7]
   13412:	115b      	asrs	r3, r3, #5
   13414:	b2d8      	uxtb	r0, r3
   13416:	79fb      	ldrb	r3, [r7, #7]
   13418:	f003 031f 	and.w	r3, r3, #31
   1341c:	2201      	movs	r2, #1
   1341e:	fa02 f303 	lsl.w	r3, r2, r3
   13422:	79ba      	ldrb	r2, [r7, #6]
   13424:	4619      	mov	r1, r3
   13426:	4b03      	ldr	r3, [pc, #12]	; (13434 <gpio_set_pin_level+0x34>)
   13428:	4798      	blx	r3
}
   1342a:	bf00      	nop
   1342c:	3708      	adds	r7, #8
   1342e:	46bd      	mov	sp, r7
   13430:	bd80      	pop	{r7, pc}
   13432:	bf00      	nop
   13434:	000133bd 	.word	0x000133bd

00013438 <_ZL10blink_LED0PK10timer_task>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(const struct timer_task *const timer_task){
   13438:	b480      	push	{r7}
   1343a:	b083      	sub	sp, #12
   1343c:	af00      	add	r7, sp, #0
   1343e:	6078      	str	r0, [r7, #4]
	//gpio_toggle_pin_level(LED0);
}
   13440:	bf00      	nop
   13442:	370c      	adds	r7, #12
   13444:	46bd      	mov	sp, r7
   13446:	bc80      	pop	{r7}
   13448:	4770      	bx	lr
	...

0001344c <_ZL9TxTimeoutPK10timer_task>:
static void TxTimeout(const struct timer_task *const timer_task){
   1344c:	b480      	push	{r7}
   1344e:	b083      	sub	sp, #12
   13450:	af00      	add	r7, sp, #0
   13452:	6078      	str	r0, [r7, #4]
	ptrARINCInterface->txTimeout=true;
   13454:	4b04      	ldr	r3, [pc, #16]	; (13468 <_ZL9TxTimeoutPK10timer_task+0x1c>)
   13456:	681b      	ldr	r3, [r3, #0]
   13458:	2201      	movs	r2, #1
   1345a:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
}
   1345e:	bf00      	nop
   13460:	370c      	adds	r7, #12
   13462:	46bd      	mov	sp, r7
   13464:	bc80      	pop	{r7}
   13466:	4770      	bx	lr
   13468:	20008fec 	.word	0x20008fec

0001346c <_ZL12Receiver1Intv>:

static void Receiver1Int(void){
   1346c:	b480      	push	{r7}
   1346e:	af00      	add	r7, sp, #0
	ptrARINCInterface->newMessageR1=true;
   13470:	4b04      	ldr	r3, [pc, #16]	; (13484 <_ZL12Receiver1Intv+0x18>)
   13472:	681b      	ldr	r3, [r3, #0]
   13474:	2201      	movs	r2, #1
   13476:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
}
   1347a:	bf00      	nop
   1347c:	46bd      	mov	sp, r7
   1347e:	bc80      	pop	{r7}
   13480:	4770      	bx	lr
   13482:	bf00      	nop
   13484:	20008fec 	.word	0x20008fec

00013488 <_ZN15ARINC_InterfaceC2Ev>:

// default constructor
ARINC_Interface::ARINC_Interface()
   13488:	b580      	push	{r7, lr}
   1348a:	b082      	sub	sp, #8
   1348c:	af00      	add	r7, sp, #0
   1348e:	6078      	str	r0, [r7, #4]
   13490:	6039      	str	r1, [r7, #0]
   13492:	687a      	ldr	r2, [r7, #4]
   13494:	683b      	ldr	r3, [r7, #0]
   13496:	3304      	adds	r3, #4
   13498:	4619      	mov	r1, r3
   1349a:	4610      	mov	r0, r2
   1349c:	4b13      	ldr	r3, [pc, #76]	; (134ec <_ZN15ARINC_InterfaceC2Ev+0x64>)
   1349e:	4798      	blx	r3
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	681a      	ldr	r2, [r3, #0]
   134a4:	687b      	ldr	r3, [r7, #4]
   134a6:	601a      	str	r2, [r3, #0]
   134a8:	687b      	ldr	r3, [r7, #4]
   134aa:	681b      	ldr	r3, [r3, #0]
   134ac:	3b0c      	subs	r3, #12
   134ae:	681b      	ldr	r3, [r3, #0]
   134b0:	461a      	mov	r2, r3
   134b2:	687b      	ldr	r3, [r7, #4]
   134b4:	4413      	add	r3, r2
   134b6:	683a      	ldr	r2, [r7, #0]
   134b8:	6912      	ldr	r2, [r2, #16]
   134ba:	601a      	str	r2, [r3, #0]
   134bc:	687b      	ldr	r3, [r7, #4]
   134be:	681b      	ldr	r3, [r3, #0]
   134c0:	3b10      	subs	r3, #16
   134c2:	681b      	ldr	r3, [r3, #0]
   134c4:	461a      	mov	r2, r3
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	4413      	add	r3, r2
   134ca:	683a      	ldr	r2, [r7, #0]
   134cc:	6952      	ldr	r2, [r2, #20]
   134ce:	601a      	str	r2, [r3, #0]
   134d0:	687b      	ldr	r3, [r7, #4]
   134d2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   134d6:	4618      	mov	r0, r3
   134d8:	4b05      	ldr	r3, [pc, #20]	; (134f0 <_ZN15ARINC_InterfaceC2Ev+0x68>)
   134da:	4798      	blx	r3
{
	ptrARINCInterface=this;
   134dc:	4a05      	ldr	r2, [pc, #20]	; (134f4 <_ZN15ARINC_InterfaceC2Ev+0x6c>)
   134de:	687b      	ldr	r3, [r7, #4]
   134e0:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
   134e2:	687b      	ldr	r3, [r7, #4]
   134e4:	4618      	mov	r0, r3
   134e6:	3708      	adds	r7, #8
   134e8:	46bd      	mov	sp, r7
   134ea:	bd80      	pop	{r7, pc}
   134ec:	00012be5 	.word	0x00012be5
   134f0:	00013f8d 	.word	0x00013f8d
   134f4:	20008fec 	.word	0x20008fec

000134f8 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
   134f8:	b580      	push	{r7, lr}
   134fa:	b082      	sub	sp, #8
   134fc:	af00      	add	r7, sp, #0
   134fe:	6078      	str	r0, [r7, #4]
   13500:	687b      	ldr	r3, [r7, #4]
   13502:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
   13506:	4618      	mov	r0, r3
   13508:	4b15      	ldr	r3, [pc, #84]	; (13560 <_ZN15ARINC_InterfaceC1Ev+0x68>)
   1350a:	4798      	blx	r3
   1350c:	687b      	ldr	r3, [r7, #4]
   1350e:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   13512:	4a14      	ldr	r2, [pc, #80]	; (13564 <_ZN15ARINC_InterfaceC1Ev+0x6c>)
   13514:	4611      	mov	r1, r2
   13516:	4618      	mov	r0, r3
   13518:	4b13      	ldr	r3, [pc, #76]	; (13568 <_ZN15ARINC_InterfaceC1Ev+0x70>)
   1351a:	4798      	blx	r3
   1351c:	687b      	ldr	r3, [r7, #4]
   1351e:	4a13      	ldr	r2, [pc, #76]	; (1356c <_ZN15ARINC_InterfaceC1Ev+0x74>)
   13520:	4611      	mov	r1, r2
   13522:	4618      	mov	r0, r3
   13524:	4b12      	ldr	r3, [pc, #72]	; (13570 <_ZN15ARINC_InterfaceC1Ev+0x78>)
   13526:	4798      	blx	r3
   13528:	4a12      	ldr	r2, [pc, #72]	; (13574 <_ZN15ARINC_InterfaceC1Ev+0x7c>)
   1352a:	687b      	ldr	r3, [r7, #4]
   1352c:	601a      	str	r2, [r3, #0]
   1352e:	687b      	ldr	r3, [r7, #4]
   13530:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
   13534:	4a10      	ldr	r2, [pc, #64]	; (13578 <_ZN15ARINC_InterfaceC1Ev+0x80>)
   13536:	601a      	str	r2, [r3, #0]
   13538:	687b      	ldr	r3, [r7, #4]
   1353a:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   1353e:	4a0f      	ldr	r2, [pc, #60]	; (1357c <_ZN15ARINC_InterfaceC1Ev+0x84>)
   13540:	601a      	str	r2, [r3, #0]
   13542:	687b      	ldr	r3, [r7, #4]
   13544:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   13548:	4618      	mov	r0, r3
   1354a:	4b0d      	ldr	r3, [pc, #52]	; (13580 <_ZN15ARINC_InterfaceC1Ev+0x88>)
   1354c:	4798      	blx	r3
	ptrARINCInterface=this;
   1354e:	4a0d      	ldr	r2, [pc, #52]	; (13584 <_ZN15ARINC_InterfaceC1Ev+0x8c>)
   13550:	687b      	ldr	r3, [r7, #4]
   13552:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
   13554:	687b      	ldr	r3, [r7, #4]
   13556:	4618      	mov	r0, r3
   13558:	3708      	adds	r7, #8
   1355a:	46bd      	mov	sp, r7
   1355c:	bd80      	pop	{r7, pc}
   1355e:	bf00      	nop
   13560:	00012fd9 	.word	0x00012fd9
   13564:	000218c4 	.word	0x000218c4
   13568:	00000d6d 	.word	0x00000d6d
   1356c:	000218b0 	.word	0x000218b0
   13570:	00012be5 	.word	0x00012be5
   13574:	00021868 	.word	0x00021868
   13578:	00021884 	.word	0x00021884
   1357c:	000218a0 	.word	0x000218a0
   13580:	00013f8d 	.word	0x00013f8d
   13584:	20008fec 	.word	0x20008fec

00013588 <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
   13588:	b580      	push	{r7, lr}
   1358a:	b082      	sub	sp, #8
   1358c:	af00      	add	r7, sp, #0
   1358e:	6078      	str	r0, [r7, #4]
   13590:	6039      	str	r1, [r7, #0]
   13592:	683b      	ldr	r3, [r7, #0]
   13594:	681a      	ldr	r2, [r3, #0]
   13596:	687b      	ldr	r3, [r7, #4]
   13598:	601a      	str	r2, [r3, #0]
   1359a:	687b      	ldr	r3, [r7, #4]
   1359c:	681b      	ldr	r3, [r3, #0]
   1359e:	3b0c      	subs	r3, #12
   135a0:	681b      	ldr	r3, [r3, #0]
   135a2:	461a      	mov	r2, r3
   135a4:	687b      	ldr	r3, [r7, #4]
   135a6:	4413      	add	r3, r2
   135a8:	683a      	ldr	r2, [r7, #0]
   135aa:	6912      	ldr	r2, [r2, #16]
   135ac:	601a      	str	r2, [r3, #0]
   135ae:	687b      	ldr	r3, [r7, #4]
   135b0:	681b      	ldr	r3, [r3, #0]
   135b2:	3b10      	subs	r3, #16
   135b4:	681b      	ldr	r3, [r3, #0]
   135b6:	461a      	mov	r2, r3
   135b8:	687b      	ldr	r3, [r7, #4]
   135ba:	4413      	add	r3, r2
   135bc:	683a      	ldr	r2, [r7, #0]
   135be:	6952      	ldr	r2, [r2, #20]
   135c0:	601a      	str	r2, [r3, #0]
   135c2:	687b      	ldr	r3, [r7, #4]
   135c4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   135c8:	4618      	mov	r0, r3
   135ca:	4b07      	ldr	r3, [pc, #28]	; (135e8 <_ZN15ARINC_InterfaceD2Ev+0x60>)
   135cc:	4798      	blx	r3
   135ce:	687a      	ldr	r2, [r7, #4]
   135d0:	683b      	ldr	r3, [r7, #0]
   135d2:	3304      	adds	r3, #4
   135d4:	4619      	mov	r1, r3
   135d6:	4610      	mov	r0, r2
   135d8:	4b04      	ldr	r3, [pc, #16]	; (135ec <_ZN15ARINC_InterfaceD2Ev+0x64>)
   135da:	4798      	blx	r3
{
} //~ARINC_Interface
   135dc:	687b      	ldr	r3, [r7, #4]
   135de:	4618      	mov	r0, r3
   135e0:	3708      	adds	r7, #8
   135e2:	46bd      	mov	sp, r7
   135e4:	bd80      	pop	{r7, pc}
   135e6:	bf00      	nop
   135e8:	00013fad 	.word	0x00013fad
   135ec:	00012c2b 	.word	0x00012c2b

000135f0 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
   135f0:	b580      	push	{r7, lr}
   135f2:	b082      	sub	sp, #8
   135f4:	af00      	add	r7, sp, #0
   135f6:	6078      	str	r0, [r7, #4]
   135f8:	4a15      	ldr	r2, [pc, #84]	; (13650 <_ZN15ARINC_InterfaceD1Ev+0x60>)
   135fa:	687b      	ldr	r3, [r7, #4]
   135fc:	601a      	str	r2, [r3, #0]
   135fe:	687b      	ldr	r3, [r7, #4]
   13600:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
   13604:	4a13      	ldr	r2, [pc, #76]	; (13654 <_ZN15ARINC_InterfaceD1Ev+0x64>)
   13606:	601a      	str	r2, [r3, #0]
   13608:	687b      	ldr	r3, [r7, #4]
   1360a:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   1360e:	4a12      	ldr	r2, [pc, #72]	; (13658 <_ZN15ARINC_InterfaceD1Ev+0x68>)
   13610:	601a      	str	r2, [r3, #0]
   13612:	687b      	ldr	r3, [r7, #4]
   13614:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   13618:	4618      	mov	r0, r3
   1361a:	4b10      	ldr	r3, [pc, #64]	; (1365c <_ZN15ARINC_InterfaceD1Ev+0x6c>)
   1361c:	4798      	blx	r3
   1361e:	687b      	ldr	r3, [r7, #4]
   13620:	4a0f      	ldr	r2, [pc, #60]	; (13660 <_ZN15ARINC_InterfaceD1Ev+0x70>)
   13622:	4611      	mov	r1, r2
   13624:	4618      	mov	r0, r3
   13626:	4b0f      	ldr	r3, [pc, #60]	; (13664 <_ZN15ARINC_InterfaceD1Ev+0x74>)
   13628:	4798      	blx	r3
   1362a:	687b      	ldr	r3, [r7, #4]
   1362c:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   13630:	4a0d      	ldr	r2, [pc, #52]	; (13668 <_ZN15ARINC_InterfaceD1Ev+0x78>)
   13632:	4611      	mov	r1, r2
   13634:	4618      	mov	r0, r3
   13636:	4b0d      	ldr	r3, [pc, #52]	; (1366c <_ZN15ARINC_InterfaceD1Ev+0x7c>)
   13638:	4798      	blx	r3
   1363a:	687b      	ldr	r3, [r7, #4]
   1363c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
   13640:	4618      	mov	r0, r3
   13642:	4b0b      	ldr	r3, [pc, #44]	; (13670 <_ZN15ARINC_InterfaceD1Ev+0x80>)
   13644:	4798      	blx	r3
} //~ARINC_Interface
   13646:	687b      	ldr	r3, [r7, #4]
   13648:	4618      	mov	r0, r3
   1364a:	3708      	adds	r7, #8
   1364c:	46bd      	mov	sp, r7
   1364e:	bd80      	pop	{r7, pc}
   13650:	00021868 	.word	0x00021868
   13654:	00021884 	.word	0x00021884
   13658:	000218a0 	.word	0x000218a0
   1365c:	00013fad 	.word	0x00013fad
   13660:	000218b0 	.word	0x000218b0
   13664:	00012c2b 	.word	0x00012c2b
   13668:	000218c4 	.word	0x000218c4
   1366c:	00014695 	.word	0x00014695
   13670:	00012ff9 	.word	0x00012ff9

00013674 <_ZTv0_n16_N15ARINC_InterfaceD1Ev>:
   13674:	b580      	push	{r7, lr}
   13676:	b082      	sub	sp, #8
   13678:	af00      	add	r7, sp, #0
   1367a:	6078      	str	r0, [r7, #4]
   1367c:	687b      	ldr	r3, [r7, #4]
   1367e:	681b      	ldr	r3, [r3, #0]
   13680:	3b10      	subs	r3, #16
   13682:	681b      	ldr	r3, [r3, #0]
   13684:	461a      	mov	r2, r3
   13686:	687b      	ldr	r3, [r7, #4]
   13688:	4413      	add	r3, r2
   1368a:	4618      	mov	r0, r3
   1368c:	4b03      	ldr	r3, [pc, #12]	; (1369c <_ZTv0_n16_N15ARINC_InterfaceD1Ev+0x28>)
   1368e:	4798      	blx	r3
   13690:	4603      	mov	r3, r0
   13692:	4618      	mov	r0, r3
   13694:	3708      	adds	r7, #8
   13696:	46bd      	mov	sp, r7
   13698:	bd80      	pop	{r7, pc}
   1369a:	bf00      	nop
   1369c:	000135f1 	.word	0x000135f1

000136a0 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
   136a0:	b580      	push	{r7, lr}
   136a2:	b082      	sub	sp, #8
   136a4:	af00      	add	r7, sp, #0
   136a6:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
   136a8:	6878      	ldr	r0, [r7, #4]
   136aa:	4b06      	ldr	r3, [pc, #24]	; (136c4 <_ZN15ARINC_InterfaceD0Ev+0x24>)
   136ac:	4798      	blx	r3
   136ae:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   136b2:	6878      	ldr	r0, [r7, #4]
   136b4:	4b04      	ldr	r3, [pc, #16]	; (136c8 <_ZN15ARINC_InterfaceD0Ev+0x28>)
   136b6:	4798      	blx	r3
   136b8:	687b      	ldr	r3, [r7, #4]
   136ba:	4618      	mov	r0, r3
   136bc:	3708      	adds	r7, #8
   136be:	46bd      	mov	sp, r7
   136c0:	bd80      	pop	{r7, pc}
   136c2:	bf00      	nop
   136c4:	000135f1 	.word	0x000135f1
   136c8:	00019d29 	.word	0x00019d29

000136cc <_ZTv0_n16_N15ARINC_InterfaceD0Ev>:
   136cc:	b580      	push	{r7, lr}
   136ce:	b082      	sub	sp, #8
   136d0:	af00      	add	r7, sp, #0
   136d2:	6078      	str	r0, [r7, #4]
   136d4:	687b      	ldr	r3, [r7, #4]
   136d6:	681b      	ldr	r3, [r3, #0]
   136d8:	3b10      	subs	r3, #16
   136da:	681b      	ldr	r3, [r3, #0]
   136dc:	461a      	mov	r2, r3
   136de:	687b      	ldr	r3, [r7, #4]
   136e0:	4413      	add	r3, r2
   136e2:	4618      	mov	r0, r3
   136e4:	4b03      	ldr	r3, [pc, #12]	; (136f4 <_ZTv0_n16_N15ARINC_InterfaceD0Ev+0x28>)
   136e6:	4798      	blx	r3
   136e8:	4603      	mov	r3, r0
   136ea:	4618      	mov	r0, r3
   136ec:	3708      	adds	r7, #8
   136ee:	46bd      	mov	sp, r7
   136f0:	bd80      	pop	{r7, pc}
   136f2:	bf00      	nop
   136f4:	000136a1 	.word	0x000136a1

000136f8 <_ZN15ARINC_Interface4InitEv>:




bool	ARINC_Interface::Init(void){
   136f8:	b580      	push	{r7, lr}
   136fa:	b082      	sub	sp, #8
   136fc:	af00      	add	r7, sp, #0
   136fe:	6078      	str	r0, [r7, #4]
	MessageCount=0; MessageCount1=0; MessageCount2=0;
   13700:	687b      	ldr	r3, [r7, #4]
   13702:	2200      	movs	r2, #0
   13704:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
   13708:	687b      	ldr	r3, [r7, #4]
   1370a:	2200      	movs	r2, #0
   1370c:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
   13710:	687b      	ldr	r3, [r7, #4]
   13712:	2200      	movs	r2, #0
   13714:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	BITRATE0=false;
   13718:	687b      	ldr	r3, [r7, #4]
   1371a:	2200      	movs	r2, #0
   1371c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	BITRATE1=false;
   13720:	687b      	ldr	r3, [r7, #4]
   13722:	2200      	movs	r2, #0
   13724:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	BITRATE2=false;
   13728:	687b      	ldr	r3, [r7, #4]
   1372a:	2200      	movs	r2, #0
   1372c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a

	PARITY=false;
   13730:	687b      	ldr	r3, [r7, #4]
   13732:	2200      	movs	r2, #0
   13734:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	HW_RESET();
   13738:	6878      	ldr	r0, [r7, #4]
   1373a:	4b3d      	ldr	r3, [pc, #244]	; (13830 <_ZN15ARINC_Interface4InitEv+0x138>)
   1373c:	4798      	blx	r3
	InitBuffer();
   1373e:	687b      	ldr	r3, [r7, #4]
   13740:	4618      	mov	r0, r3
   13742:	4b3c      	ldr	r3, [pc, #240]	; (13834 <_ZN15ARINC_Interface4InitEv+0x13c>)
   13744:	4798      	blx	r3
	statusHolt=HI3593.Init();
   13746:	687b      	ldr	r3, [r7, #4]
   13748:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   1374c:	4618      	mov	r0, r3
   1374e:	4b3a      	ldr	r3, [pc, #232]	; (13838 <_ZN15ARINC_Interface4InitEv+0x140>)
   13750:	4798      	blx	r3
   13752:	4603      	mov	r3, r0
   13754:	461a      	mov	r2, r3
   13756:	687b      	ldr	r3, [r7, #4]
   13758:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
	if (statusHolt!=TSR_Default){
   1375c:	687b      	ldr	r3, [r7, #4]
   1375e:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
   13762:	2b01      	cmp	r3, #1
   13764:	d008      	beq.n	13778 <_ZN15ARINC_Interface4InitEv+0x80>
		usb.println("\n\rHI-3593 failed to Initilize\n\r");
   13766:	4935      	ldr	r1, [pc, #212]	; (1383c <_ZN15ARINC_Interface4InitEv+0x144>)
   13768:	4835      	ldr	r0, [pc, #212]	; (13840 <_ZN15ARINC_Interface4InitEv+0x148>)
   1376a:	4b36      	ldr	r3, [pc, #216]	; (13844 <_ZN15ARINC_Interface4InitEv+0x14c>)
   1376c:	4798      	blx	r3
		isOK=false;
   1376e:	687b      	ldr	r3, [r7, #4]
   13770:	2200      	movs	r2, #0
   13772:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
   13776:	e03d      	b.n	137f4 <_ZN15ARINC_Interface4InitEv+0xfc>
	}else{
		isOK=true;
   13778:	687b      	ldr	r3, [r7, #4]
   1377a:	2201      	movs	r2, #1
   1377c:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
		newMessageR1=false;
   13780:	687b      	ldr	r3, [r7, #4]
   13782:	2200      	movs	r2, #0
   13784:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		newMessageR2=false;
   13788:	687b      	ldr	r3, [r7, #4]
   1378a:	2200      	movs	r2, #0
   1378c:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
		BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   13790:	687b      	ldr	r3, [r7, #4]
   13792:	2200      	movs	r2, #0
   13794:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		MessageCount=0;
   13798:	687b      	ldr	r3, [r7, #4]
   1379a:	2200      	movs	r2, #0
   1379c:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
		octalLabel = 0x1D;         // Write ARINC Label
   137a0:	687b      	ldr	r3, [r7, #4]
   137a2:	221d      	movs	r2, #29
   137a4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		Arate=0;
   137a8:	687b      	ldr	r3, [r7, #4]
   137aa:	2200      	movs	r2, #0
   137ac:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
		
		(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   137b0:	687b      	ldr	r3, [r7, #4]
   137b2:	f203 1327 	addw	r3, r3, #295	; 0x127
   137b6:	2210      	movs	r2, #16
   137b8:	2100      	movs	r1, #0
   137ba:	4618      	mov	r0, r3
   137bc:	4b22      	ldr	r3, [pc, #136]	; (13848 <_ZN15ARINC_Interface4InitEv+0x150>)
   137be:	4798      	blx	r3
			
		// Setup the Labels
		HI3593.InitReceiver1Labels();     // initial Rec1 labels
   137c0:	687b      	ldr	r3, [r7, #4]
   137c2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   137c6:	4618      	mov	r0, r3
   137c8:	4b20      	ldr	r3, [pc, #128]	; (1384c <_ZN15ARINC_Interface4InitEv+0x154>)
   137ca:	4798      	blx	r3
		HI3593.initReceiver2Labels();     // initial Rec2 labels
   137cc:	687b      	ldr	r3, [r7, #4]
   137ce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   137d2:	4618      	mov	r0, r3
   137d4:	4b1e      	ldr	r3, [pc, #120]	; (13850 <_ZN15ARINC_Interface4InitEv+0x158>)
   137d6:	4798      	blx	r3
		HI3593.InitPriorityLabels();
   137d8:	687b      	ldr	r3, [r7, #4]
   137da:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   137de:	4618      	mov	r0, r3
   137e0:	4b1c      	ldr	r3, [pc, #112]	; (13854 <_ZN15ARINC_Interface4InitEv+0x15c>)
   137e2:	4798      	blx	r3
		//HI3593.MultiByteRead(REC1MEMORY, 32, LabelsArrayRX1); // read in all Rec-1 labels into the passed array
		//HI3593.MultiByteRead(REC2MEMORY, 32, LabelsArrayRX2); // read in all Rec-2 labels into the passed array

		Rec1Parity =0;
   137e4:	687b      	ldr	r3, [r7, #4]
   137e6:	2200      	movs	r2, #0
   137e8:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
		Rec2Parity =0;
   137ec:	687b      	ldr	r3, [r7, #4]
   137ee:	2200      	movs	r2, #0
   137f0:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b

		//HI3593.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
		//HI3593.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
	}
	
	arincTimer.Init();
   137f4:	4818      	ldr	r0, [pc, #96]	; (13858 <_ZN15ARINC_Interface4InitEv+0x160>)
   137f6:	4b19      	ldr	r3, [pc, #100]	; (1385c <_ZN15ARINC_Interface4InitEv+0x164>)
   137f8:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(blink_LED0),1000);
   137fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   137fe:	4918      	ldr	r1, [pc, #96]	; (13860 <_ZN15ARINC_Interface4InitEv+0x168>)
   13800:	4815      	ldr	r0, [pc, #84]	; (13858 <_ZN15ARINC_Interface4InitEv+0x160>)
   13802:	4b18      	ldr	r3, [pc, #96]	; (13864 <_ZN15ARINC_Interface4InitEv+0x16c>)
   13804:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(TxTimeout),500);
   13806:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1380a:	4917      	ldr	r1, [pc, #92]	; (13868 <_ZN15ARINC_Interface4InitEv+0x170>)
   1380c:	4812      	ldr	r0, [pc, #72]	; (13858 <_ZN15ARINC_Interface4InitEv+0x160>)
   1380e:	4b15      	ldr	r3, [pc, #84]	; (13864 <_ZN15ARINC_Interface4InitEv+0x16c>)
   13810:	4798      	blx	r3
	ext_irq_register(ARINCR1Int, Receiver1Int);
   13812:	4916      	ldr	r1, [pc, #88]	; (1386c <_ZN15ARINC_Interface4InitEv+0x174>)
   13814:	2057      	movs	r0, #87	; 0x57
   13816:	4b16      	ldr	r3, [pc, #88]	; (13870 <_ZN15ARINC_Interface4InitEv+0x178>)
   13818:	4798      	blx	r3
	arincTimer.start();
   1381a:	480f      	ldr	r0, [pc, #60]	; (13858 <_ZN15ARINC_Interface4InitEv+0x160>)
   1381c:	4b15      	ldr	r3, [pc, #84]	; (13874 <_ZN15ARINC_Interface4InitEv+0x17c>)
   1381e:	4798      	blx	r3
	//HI3893.InitPriorityLabels();
	return isOK;
   13820:	687b      	ldr	r3, [r7, #4]
   13822:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
}
   13826:	4618      	mov	r0, r3
   13828:	3708      	adds	r7, #8
   1382a:	46bd      	mov	sp, r7
   1382c:	bd80      	pop	{r7, pc}
   1382e:	bf00      	nop
   13830:	00013e4d 	.word	0x00013e4d
   13834:	00012c71 	.word	0x00012c71
   13838:	00013fcd 	.word	0x00013fcd
   1383c:	00020e40 	.word	0x00020e40
   13840:	2000a4d0 	.word	0x2000a4d0
   13844:	000186c9 	.word	0x000186c9
   13848:	0001c5b9 	.word	0x0001c5b9
   1384c:	000141dd 	.word	0x000141dd
   13850:	00014369 	.word	0x00014369
   13854:	00014249 	.word	0x00014249
   13858:	2000a4b0 	.word	0x2000a4b0
   1385c:	00017bd9 	.word	0x00017bd9
   13860:	00013439 	.word	0x00013439
   13864:	00017ce9 	.word	0x00017ce9
   13868:	0001344d 	.word	0x0001344d
   1386c:	0001346d 	.word	0x0001346d
   13870:	00006869 	.word	0x00006869
   13874:	00017c29 	.word	0x00017c29

00013878 <_ZN15ARINC_Interface12ReadRXBufferEh>:
	else
	{
		return false;
	}
}
uint32_t ARINC_Interface::ReadRXBuffer(uint8_t n){
   13878:	b580      	push	{r7, lr}
   1387a:	b0c4      	sub	sp, #272	; 0x110
   1387c:	af00      	add	r7, sp, #0
   1387e:	1d3b      	adds	r3, r7, #4
   13880:	6018      	str	r0, [r3, #0]
   13882:	460a      	mov	r2, r1
   13884:	1cfb      	adds	r3, r7, #3
   13886:	701a      	strb	r2, [r3, #0]
	
	usb.println("r\n---!got message!----");
   13888:	4949      	ldr	r1, [pc, #292]	; (139b0 <_ZN15ARINC_Interface12ReadRXBufferEh+0x138>)
   1388a:	484a      	ldr	r0, [pc, #296]	; (139b4 <_ZN15ARINC_Interface12ReadRXBufferEh+0x13c>)
   1388c:	4b4a      	ldr	r3, [pc, #296]	; (139b8 <_ZN15ARINC_Interface12ReadRXBufferEh+0x140>)
   1388e:	4798      	blx	r3
	uint8_t receiver[2*RX_LABELS_NUMBER][4];
	uint8_t	messagesCounter=0;
   13890:	2300      	movs	r3, #0
   13892:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	cpu_irq_disable();
   13896:	1d3b      	adds	r3, r7, #4
   13898:	6818      	ldr	r0, [r3, #0]
   1389a:	4b48      	ldr	r3, [pc, #288]	; (139bc <_ZN15ARINC_Interface12ReadRXBufferEh+0x144>)
   1389c:	4798      	blx	r3
	                     // Poll Receiver1 status register
	
	for (uint8_t ii = 0; ii <2*RX_LABELS_NUMBER ; ii++)
   1389e:	2300      	movs	r3, #0
   138a0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
   138a4:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
   138a8:	2b3f      	cmp	r3, #63	; 0x3f
   138aa:	dc46      	bgt.n	1393a <_ZN15ARINC_Interface12ReadRXBufferEh+0xc2>
	{
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
   138ac:	1d3b      	adds	r3, r7, #4
   138ae:	681b      	ldr	r3, [r3, #0]
   138b0:	f503 72c8 	add.w	r2, r3, #400	; 0x190
   138b4:	1cfb      	adds	r3, r7, #3
   138b6:	781b      	ldrb	r3, [r3, #0]
   138b8:	3b01      	subs	r3, #1
   138ba:	b2db      	uxtb	r3, r3
   138bc:	015b      	lsls	r3, r3, #5
   138be:	b2db      	uxtb	r3, r3
   138c0:	3b70      	subs	r3, #112	; 0x70
   138c2:	b2db      	uxtb	r3, r3
   138c4:	4619      	mov	r1, r3
   138c6:	4610      	mov	r0, r2
   138c8:	4b3d      	ldr	r3, [pc, #244]	; (139c0 <_ZN15ARINC_Interface12ReadRXBufferEh+0x148>)
   138ca:	4798      	blx	r3
   138cc:	4603      	mov	r3, r0
   138ce:	461a      	mov	r2, r3
   138d0:	1d3b      	adds	r3, r7, #4
   138d2:	681b      	ldr	r3, [r3, #0]
   138d4:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
		if(((statusRegister & FFEMPTY) == 0))
   138d8:	1d3b      	adds	r3, r7, #4
   138da:	681b      	ldr	r3, [r3, #0]
   138dc:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   138e0:	f003 0301 	and.w	r3, r3, #1
   138e4:	2b00      	cmp	r3, #0
   138e6:	d127      	bne.n	13938 <_ZN15ARINC_Interface12ReadRXBufferEh+0xc0>
		{
				
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
   138e8:	1d3b      	adds	r3, r7, #4
   138ea:	681b      	ldr	r3, [r3, #0]
   138ec:	f503 70c8 	add.w	r0, r3, #400	; 0x190
   138f0:	1cfb      	adds	r3, r7, #3
   138f2:	781b      	ldrb	r3, [r3, #0]
   138f4:	3304      	adds	r3, #4
   138f6:	b2db      	uxtb	r3, r3
   138f8:	015b      	lsls	r3, r3, #5
   138fa:	b2d9      	uxtb	r1, r3
   138fc:	1d3b      	adds	r3, r7, #4
   138fe:	681b      	ldr	r3, [r3, #0]
   13900:	f503 73b2 	add.w	r3, r3, #356	; 0x164
   13904:	461a      	mov	r2, r3
   13906:	4b2f      	ldr	r3, [pc, #188]	; (139c4 <_ZN15ARINC_Interface12ReadRXBufferEh+0x14c>)
   13908:	4798      	blx	r3
				
			memcpy(receiver[messagesCounter],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
   1390a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
   1390e:	f107 020c 	add.w	r2, r7, #12
   13912:	009b      	lsls	r3, r3, #2
   13914:	4413      	add	r3, r2
   13916:	1d3a      	adds	r2, r7, #4
   13918:	6812      	ldr	r2, [r2, #0]
   1391a:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   1391e:	6812      	ldr	r2, [r2, #0]
   13920:	601a      	str	r2, [r3, #0]
				
			//		printARINCData(REC1_HEADER,RXBuffer);
		//	CheckMessageCountMax();
			messagesCounter++;
   13922:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
   13926:	3301      	adds	r3, #1
   13928:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	for (uint8_t ii = 0; ii <2*RX_LABELS_NUMBER ; ii++)
   1392c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
   13930:	3301      	adds	r3, #1
   13932:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
   13936:	e7b5      	b.n	138a4 <_ZN15ARINC_Interface12ReadRXBufferEh+0x2c>
				
		}else{
			break;
   13938:	bf00      	nop
		}
	}

	cpu_irq_enable();
   1393a:	1d3b      	adds	r3, r7, #4
   1393c:	6818      	ldr	r0, [r3, #0]
   1393e:	4b22      	ldr	r3, [pc, #136]	; (139c8 <_ZN15ARINC_Interface12ReadRXBufferEh+0x150>)
   13940:	4798      	blx	r3

		if ((n==1))
   13942:	1cfb      	adds	r3, r7, #3
   13944:	781b      	ldrb	r3, [r3, #0]
   13946:	2b01      	cmp	r3, #1
   13948:	d105      	bne.n	13956 <_ZN15ARINC_Interface12ReadRXBufferEh+0xde>
		{
			newMessageR1=false;
   1394a:	1d3b      	adds	r3, r7, #4
   1394c:	681b      	ldr	r3, [r3, #0]
   1394e:	2200      	movs	r2, #0
   13950:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
   13954:	e008      	b.n	13968 <_ZN15ARINC_Interface12ReadRXBufferEh+0xf0>
		}
		else if (n==2)
   13956:	1cfb      	adds	r3, r7, #3
   13958:	781b      	ldrb	r3, [r3, #0]
   1395a:	2b02      	cmp	r3, #2
   1395c:	d104      	bne.n	13968 <_ZN15ARINC_Interface12ReadRXBufferEh+0xf0>
		{
			newMessageR2=false;
   1395e:	1d3b      	adds	r3, r7, #4
   13960:	681b      	ldr	r3, [r3, #0]
   13962:	2200      	movs	r2, #0
   13964:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
		}
	for (uint8_t i = 0; i < messagesCounter; i++)
   13968:	2300      	movs	r3, #0
   1396a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
   1396e:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
   13972:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
   13976:	429a      	cmp	r2, r3
   13978:	da10      	bge.n	1399c <_ZN15ARINC_Interface12ReadRXBufferEh+0x124>
	{
		SortReceivedData(receiver[i]);
   1397a:	1d3b      	adds	r3, r7, #4
   1397c:	6818      	ldr	r0, [r3, #0]
   1397e:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
   13982:	f107 020c 	add.w	r2, r7, #12
   13986:	009b      	lsls	r3, r3, #2
   13988:	4413      	add	r3, r2
   1398a:	4619      	mov	r1, r3
   1398c:	4b0f      	ldr	r3, [pc, #60]	; (139cc <_ZN15ARINC_Interface12ReadRXBufferEh+0x154>)
   1398e:	4798      	blx	r3
	for (uint8_t i = 0; i < messagesCounter; i++)
   13990:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
   13994:	3301      	adds	r3, #1
   13996:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
   1399a:	e7e8      	b.n	1396e <_ZN15ARINC_Interface12ReadRXBufferEh+0xf6>
	}
	
	return statusRegister;	
   1399c:	1d3b      	adds	r3, r7, #4
   1399e:	681b      	ldr	r3, [r3, #0]
   139a0:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
}
   139a4:	4618      	mov	r0, r3
   139a6:	f507 7788 	add.w	r7, r7, #272	; 0x110
   139aa:	46bd      	mov	sp, r7
   139ac:	bd80      	pop	{r7, pc}
   139ae:	bf00      	nop
   139b0:	00020e84 	.word	0x00020e84
   139b4:	2000a4d0 	.word	0x2000a4d0
   139b8:	000186c9 	.word	0x000186c9
   139bc:	00013d89 	.word	0x00013d89
   139c0:	00014615 	.word	0x00014615
   139c4:	000143d5 	.word	0x000143d5
   139c8:	00013d71 	.word	0x00013d71
   139cc:	00012f7d 	.word	0x00012f7d

000139d0 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
   139d0:	b580      	push	{r7, lr}
   139d2:	b084      	sub	sp, #16
   139d4:	af00      	add	r7, sp, #0
   139d6:	6078      	str	r0, [r7, #4]
   139d8:	460b      	mov	r3, r1
   139da:	70fb      	strb	r3, [r7, #3]
	uint32_t data;

	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   139dc:	2300      	movs	r3, #0
   139de:	73fb      	strb	r3, [r7, #15]
   139e0:	7bfb      	ldrb	r3, [r7, #15]
   139e2:	2b1f      	cmp	r3, #31
   139e4:	dc21      	bgt.n	13a2a <_ZN15ARINC_Interface15ReadBufferLabelEh+0x5a>
		if (receiverBuffer[i][3]==label)
   139e6:	687b      	ldr	r3, [r7, #4]
   139e8:	691a      	ldr	r2, [r3, #16]
   139ea:	7bfb      	ldrb	r3, [r7, #15]
   139ec:	009b      	lsls	r3, r3, #2
   139ee:	4413      	add	r3, r2
   139f0:	681b      	ldr	r3, [r3, #0]
   139f2:	3303      	adds	r3, #3
   139f4:	781b      	ldrb	r3, [r3, #0]
   139f6:	78fa      	ldrb	r2, [r7, #3]
   139f8:	429a      	cmp	r2, r3
   139fa:	d112      	bne.n	13a22 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x52>
		{
			data=FourBytesArray2Uint32(receiverBuffer[i]);
   139fc:	687b      	ldr	r3, [r7, #4]
   139fe:	681b      	ldr	r3, [r3, #0]
   13a00:	3b0c      	subs	r3, #12
   13a02:	681b      	ldr	r3, [r3, #0]
   13a04:	461a      	mov	r2, r3
   13a06:	687b      	ldr	r3, [r7, #4]
   13a08:	1898      	adds	r0, r3, r2
   13a0a:	687b      	ldr	r3, [r7, #4]
   13a0c:	691a      	ldr	r2, [r3, #16]
   13a0e:	7bfb      	ldrb	r3, [r7, #15]
   13a10:	009b      	lsls	r3, r3, #2
   13a12:	4413      	add	r3, r2
   13a14:	681b      	ldr	r3, [r3, #0]
   13a16:	4619      	mov	r1, r3
   13a18:	4b06      	ldr	r3, [pc, #24]	; (13a34 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x64>)
   13a1a:	4798      	blx	r3
   13a1c:	60b8      	str	r0, [r7, #8]
			return data;
   13a1e:	68bb      	ldr	r3, [r7, #8]
   13a20:	e004      	b.n	13a2c <_ZN15ARINC_Interface15ReadBufferLabelEh+0x5c>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   13a22:	7bfb      	ldrb	r3, [r7, #15]
   13a24:	3301      	adds	r3, #1
   13a26:	73fb      	strb	r3, [r7, #15]
   13a28:	e7da      	b.n	139e0 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
   13a2a:	2300      	movs	r3, #0
}
   13a2c:	4618      	mov	r0, r3
   13a2e:	3710      	adds	r7, #16
   13a30:	46bd      	mov	sp, r7
   13a32:	bd80      	pop	{r7, pc}
   13a34:	00013211 	.word	0x00013211

00013a38 <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh>:
   13a38:	b580      	push	{r7, lr}
   13a3a:	b082      	sub	sp, #8
   13a3c:	af00      	add	r7, sp, #0
   13a3e:	6078      	str	r0, [r7, #4]
   13a40:	460b      	mov	r3, r1
   13a42:	70fb      	strb	r3, [r7, #3]
   13a44:	687b      	ldr	r3, [r7, #4]
   13a46:	681b      	ldr	r3, [r3, #0]
   13a48:	3b14      	subs	r3, #20
   13a4a:	681b      	ldr	r3, [r3, #0]
   13a4c:	461a      	mov	r2, r3
   13a4e:	687b      	ldr	r3, [r7, #4]
   13a50:	4413      	add	r3, r2
   13a52:	78fa      	ldrb	r2, [r7, #3]
   13a54:	4611      	mov	r1, r2
   13a56:	4618      	mov	r0, r3
   13a58:	4b03      	ldr	r3, [pc, #12]	; (13a68 <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh+0x30>)
   13a5a:	4798      	blx	r3
   13a5c:	4603      	mov	r3, r0
   13a5e:	4618      	mov	r0, r3
   13a60:	3708      	adds	r7, #8
   13a62:	46bd      	mov	sp, r7
   13a64:	bd80      	pop	{r7, pc}
   13a66:	bf00      	nop
   13a68:	000139d1 	.word	0x000139d1

00013a6c <_ZN15ARINC_Interface15ReadBufferLabelEm>:
uint32_t ARINC_Interface::ReadBufferLabel(uint32_t label){
   13a6c:	b580      	push	{r7, lr}
   13a6e:	b084      	sub	sp, #16
   13a70:	af00      	add	r7, sp, #0
   13a72:	6078      	str	r0, [r7, #4]
   13a74:	6039      	str	r1, [r7, #0]
	uint8_t	l=Label2Byte((uint32_t)label);
   13a76:	687b      	ldr	r3, [r7, #4]
   13a78:	681b      	ldr	r3, [r3, #0]
   13a7a:	3b0c      	subs	r3, #12
   13a7c:	681b      	ldr	r3, [r3, #0]
   13a7e:	461a      	mov	r2, r3
   13a80:	687b      	ldr	r3, [r7, #4]
   13a82:	4413      	add	r3, r2
   13a84:	681b      	ldr	r3, [r3, #0]
   13a86:	3304      	adds	r3, #4
   13a88:	681b      	ldr	r3, [r3, #0]
   13a8a:	687a      	ldr	r2, [r7, #4]
   13a8c:	6812      	ldr	r2, [r2, #0]
   13a8e:	3a0c      	subs	r2, #12
   13a90:	6812      	ldr	r2, [r2, #0]
   13a92:	4611      	mov	r1, r2
   13a94:	687a      	ldr	r2, [r7, #4]
   13a96:	440a      	add	r2, r1
   13a98:	6839      	ldr	r1, [r7, #0]
   13a9a:	4610      	mov	r0, r2
   13a9c:	4798      	blx	r3
   13a9e:	4603      	mov	r3, r0
   13aa0:	73fb      	strb	r3, [r7, #15]
	return (uint32_t)ReadBufferLabel(l);
   13aa2:	687b      	ldr	r3, [r7, #4]
   13aa4:	681b      	ldr	r3, [r3, #0]
   13aa6:	3308      	adds	r3, #8
   13aa8:	681b      	ldr	r3, [r3, #0]
   13aaa:	7bfa      	ldrb	r2, [r7, #15]
   13aac:	4611      	mov	r1, r2
   13aae:	6878      	ldr	r0, [r7, #4]
   13ab0:	4798      	blx	r3
   13ab2:	4603      	mov	r3, r0
}
   13ab4:	4618      	mov	r0, r3
   13ab6:	3710      	adds	r7, #16
   13ab8:	46bd      	mov	sp, r7
   13aba:	bd80      	pop	{r7, pc}

00013abc <_ZN15ARINC_Interface18TrasmitSingleLabelEv>:
uint32_t ARINC_Interface::TrasmitSingleLabel(void){
   13abc:	b580      	push	{r7, lr}
   13abe:	b082      	sub	sp, #8
   13ac0:	af00      	add	r7, sp, #0
   13ac2:	6078      	str	r0, [r7, #4]
	return	TrasmitSingleLabel((uint32_t)DEFAULT_LABEL);
   13ac4:	f44f 7187 	mov.w	r1, #270	; 0x10e
   13ac8:	6878      	ldr	r0, [r7, #4]
   13aca:	4b03      	ldr	r3, [pc, #12]	; (13ad8 <_ZN15ARINC_Interface18TrasmitSingleLabelEv+0x1c>)
   13acc:	4798      	blx	r3
   13ace:	4603      	mov	r3, r0
}
   13ad0:	4618      	mov	r0, r3
   13ad2:	3708      	adds	r7, #8
   13ad4:	46bd      	mov	sp, r7
   13ad6:	bd80      	pop	{r7, pc}
   13ad8:	00013add 	.word	0x00013add

00013adc <_ZN15ARINC_Interface18TrasmitSingleLabelEm>:

uint32_t ARINC_Interface::TrasmitSingleLabel(uint32_t l){
   13adc:	b590      	push	{r4, r7, lr}
   13ade:	b085      	sub	sp, #20
   13ae0:	af00      	add	r7, sp, #0
   13ae2:	6078      	str	r0, [r7, #4]
   13ae4:	6039      	str	r1, [r7, #0]
	gpio_set_pin_level(LED0,false);
   13ae6:	2100      	movs	r1, #0
   13ae8:	2052      	movs	r0, #82	; 0x52
   13aea:	4b45      	ldr	r3, [pc, #276]	; (13c00 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   13aec:	4798      	blx	r3
	octalLabel=Label2Byte(l);
   13aee:	687b      	ldr	r3, [r7, #4]
   13af0:	681b      	ldr	r3, [r3, #0]
   13af2:	3b0c      	subs	r3, #12
   13af4:	681b      	ldr	r3, [r3, #0]
   13af6:	461a      	mov	r2, r3
   13af8:	687b      	ldr	r3, [r7, #4]
   13afa:	4413      	add	r3, r2
   13afc:	681b      	ldr	r3, [r3, #0]
   13afe:	3304      	adds	r3, #4
   13b00:	681b      	ldr	r3, [r3, #0]
   13b02:	687a      	ldr	r2, [r7, #4]
   13b04:	6812      	ldr	r2, [r2, #0]
   13b06:	3a0c      	subs	r2, #12
   13b08:	6812      	ldr	r2, [r2, #0]
   13b0a:	4611      	mov	r1, r2
   13b0c:	687a      	ldr	r2, [r7, #4]
   13b0e:	440a      	add	r2, r1
   13b10:	6839      	ldr	r1, [r7, #0]
   13b12:	4610      	mov	r0, r2
   13b14:	4798      	blx	r3
   13b16:	4603      	mov	r3, r0
   13b18:	461a      	mov	r2, r3
   13b1a:	687b      	ldr	r3, [r7, #4]
   13b1c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	index=GetIndexTXLabelarray(FlipByte(octalLabel),LabelsArrayTX);
   13b20:	687b      	ldr	r3, [r7, #4]
   13b22:	681b      	ldr	r3, [r3, #0]
   13b24:	3b0c      	subs	r3, #12
   13b26:	681b      	ldr	r3, [r3, #0]
   13b28:	461a      	mov	r2, r3
   13b2a:	687b      	ldr	r3, [r7, #4]
   13b2c:	189c      	adds	r4, r3, r2
   13b2e:	687b      	ldr	r3, [r7, #4]
   13b30:	681b      	ldr	r3, [r3, #0]
   13b32:	3b0c      	subs	r3, #12
   13b34:	681b      	ldr	r3, [r3, #0]
   13b36:	461a      	mov	r2, r3
   13b38:	687b      	ldr	r3, [r7, #4]
   13b3a:	4413      	add	r3, r2
   13b3c:	681b      	ldr	r3, [r3, #0]
   13b3e:	681b      	ldr	r3, [r3, #0]
   13b40:	687a      	ldr	r2, [r7, #4]
   13b42:	6812      	ldr	r2, [r2, #0]
   13b44:	3a0c      	subs	r2, #12
   13b46:	6812      	ldr	r2, [r2, #0]
   13b48:	4611      	mov	r1, r2
   13b4a:	687a      	ldr	r2, [r7, #4]
   13b4c:	1850      	adds	r0, r2, r1
   13b4e:	687a      	ldr	r2, [r7, #4]
   13b50:	f892 2188 	ldrb.w	r2, [r2, #392]	; 0x188
   13b54:	4611      	mov	r1, r2
   13b56:	4798      	blx	r3
   13b58:	4603      	mov	r3, r0
   13b5a:	4619      	mov	r1, r3
   13b5c:	687b      	ldr	r3, [r7, #4]
   13b5e:	685b      	ldr	r3, [r3, #4]
   13b60:	461a      	mov	r2, r3
   13b62:	4620      	mov	r0, r4
   13b64:	4b27      	ldr	r3, [pc, #156]	; (13c04 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x128>)
   13b66:	4798      	blx	r3
   13b68:	4603      	mov	r3, r0
   13b6a:	461a      	mov	r2, r3
   13b6c:	687b      	ldr	r3, [r7, #4]
   13b6e:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
	uint8_t localBuffer[4];
//	memcpy(localBuffer,LabelsArrayTX,4);
	memcpy(localBuffer,transmitBuffer[index],4);
   13b72:	687b      	ldr	r3, [r7, #4]
   13b74:	695a      	ldr	r2, [r3, #20]
   13b76:	687b      	ldr	r3, [r7, #4]
   13b78:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
   13b7c:	009b      	lsls	r3, r3, #2
   13b7e:	4413      	add	r3, r2
   13b80:	681b      	ldr	r3, [r3, #0]
   13b82:	681b      	ldr	r3, [r3, #0]
   13b84:	60fb      	str	r3, [r7, #12]
//	Uint32FourBytesArray(0x1234561d,localBuffer);
//	PrepareSingleTXBuffer(TXBuffer,LabelsArrayTX);
	usb.println(" transmitting...");
   13b86:	4920      	ldr	r1, [pc, #128]	; (13c08 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x12c>)
   13b88:	4820      	ldr	r0, [pc, #128]	; (13c0c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   13b8a:	4b21      	ldr	r3, [pc, #132]	; (13c10 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   13b8c:	4798      	blx	r3
	cpu_irq_disable();
   13b8e:	6878      	ldr	r0, [r7, #4]
   13b90:	4b20      	ldr	r3, [pc, #128]	; (13c14 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x138>)
   13b92:	4798      	blx	r3
	HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   13b94:	687b      	ldr	r3, [r7, #4]
   13b96:	f503 73c8 	add.w	r3, r3, #400	; 0x190
   13b9a:	f107 020c 	add.w	r2, r7, #12
   13b9e:	210c      	movs	r1, #12
   13ba0:	4618      	mov	r0, r3
   13ba2:	4b1d      	ldr	r3, [pc, #116]	; (13c18 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x13c>)
   13ba4:	4798      	blx	r3
	cpu_irq_enable();
   13ba6:	6878      	ldr	r0, [r7, #4]
   13ba8:	4b1c      	ldr	r3, [pc, #112]	; (13c1c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x140>)
   13baa:	4798      	blx	r3
	usb.println(" Transmitted!");
   13bac:	491c      	ldr	r1, [pc, #112]	; (13c20 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x144>)
   13bae:	4817      	ldr	r0, [pc, #92]	; (13c0c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   13bb0:	4b17      	ldr	r3, [pc, #92]	; (13c10 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   13bb2:	4798      	blx	r3
	usb.println(">");
   13bb4:	491b      	ldr	r1, [pc, #108]	; (13c24 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x148>)
   13bb6:	4815      	ldr	r0, [pc, #84]	; (13c0c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   13bb8:	4b15      	ldr	r3, [pc, #84]	; (13c10 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   13bba:	4798      	blx	r3
	printARINCTXData(TXBuffer);
   13bbc:	687b      	ldr	r3, [r7, #4]
   13bbe:	f203 1327 	addw	r3, r3, #295	; 0x127
   13bc2:	4619      	mov	r1, r3
   13bc4:	6878      	ldr	r0, [r7, #4]
   13bc6:	4b18      	ldr	r3, [pc, #96]	; (13c28 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x14c>)
   13bc8:	4798      	blx	r3
	txTimeout=false;
   13bca:	687b      	ldr	r3, [r7, #4]
   13bcc:	2200      	movs	r2, #0
   13bce:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	gpio_set_pin_level(LED0,true);
   13bd2:	2101      	movs	r1, #1
   13bd4:	2052      	movs	r0, #82	; 0x52
   13bd6:	4b0a      	ldr	r3, [pc, #40]	; (13c00 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   13bd8:	4798      	blx	r3
	return FourBytesArray2Uint32(TXBuffer);
   13bda:	687b      	ldr	r3, [r7, #4]
   13bdc:	681b      	ldr	r3, [r3, #0]
   13bde:	3b0c      	subs	r3, #12
   13be0:	681b      	ldr	r3, [r3, #0]
   13be2:	461a      	mov	r2, r3
   13be4:	687b      	ldr	r3, [r7, #4]
   13be6:	441a      	add	r2, r3
   13be8:	687b      	ldr	r3, [r7, #4]
   13bea:	f203 1327 	addw	r3, r3, #295	; 0x127
   13bee:	4619      	mov	r1, r3
   13bf0:	4610      	mov	r0, r2
   13bf2:	4b0e      	ldr	r3, [pc, #56]	; (13c2c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x150>)
   13bf4:	4798      	blx	r3
   13bf6:	4603      	mov	r3, r0
}
   13bf8:	4618      	mov	r0, r3
   13bfa:	3714      	adds	r7, #20
   13bfc:	46bd      	mov	sp, r7
   13bfe:	bd90      	pop	{r4, r7, pc}
   13c00:	00013401 	.word	0x00013401
   13c04:	000131d3 	.word	0x000131d3
   13c08:	00020e9c 	.word	0x00020e9c
   13c0c:	2000a4d0 	.word	0x2000a4d0
   13c10:	000186c9 	.word	0x000186c9
   13c14:	00013d89 	.word	0x00013d89
   13c18:	000144a1 	.word	0x000144a1
   13c1c:	00013d71 	.word	0x00013d71
   13c20:	00020eb0 	.word	0x00020eb0
   13c24:	00020ec0 	.word	0x00020ec0
   13c28:	00013dd9 	.word	0x00013dd9
   13c2c:	00013211 	.word	0x00013211

00013c30 <_ZN15ARINC_Interface18TrasmitSingleLabelEh>:

uint8_t ARINC_Interface::TrasmitSingleLabel(uint8_t l){
   13c30:	b580      	push	{r7, lr}
   13c32:	b082      	sub	sp, #8
   13c34:	af00      	add	r7, sp, #0
   13c36:	6078      	str	r0, [r7, #4]
   13c38:	460b      	mov	r3, r1
   13c3a:	70fb      	strb	r3, [r7, #3]
	
	index=GetIndexTXLabelarray(l,LabelsArrayTX);
   13c3c:	687b      	ldr	r3, [r7, #4]
   13c3e:	681b      	ldr	r3, [r3, #0]
   13c40:	3b0c      	subs	r3, #12
   13c42:	681b      	ldr	r3, [r3, #0]
   13c44:	461a      	mov	r2, r3
   13c46:	687b      	ldr	r3, [r7, #4]
   13c48:	1898      	adds	r0, r3, r2
   13c4a:	687b      	ldr	r3, [r7, #4]
   13c4c:	685a      	ldr	r2, [r3, #4]
   13c4e:	78fb      	ldrb	r3, [r7, #3]
   13c50:	4619      	mov	r1, r3
   13c52:	4b29      	ldr	r3, [pc, #164]	; (13cf8 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0xc8>)
   13c54:	4798      	blx	r3
   13c56:	4603      	mov	r3, r0
   13c58:	461a      	mov	r2, r3
   13c5a:	687b      	ldr	r3, [r7, #4]
   13c5c:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
	
	if (transmitBuffer[index][3]|transmitBuffer[index][2]|transmitBuffer[index][1]>0)
   13c60:	687b      	ldr	r3, [r7, #4]
   13c62:	695a      	ldr	r2, [r3, #20]
   13c64:	687b      	ldr	r3, [r7, #4]
   13c66:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
   13c6a:	009b      	lsls	r3, r3, #2
   13c6c:	4413      	add	r3, r2
   13c6e:	681b      	ldr	r3, [r3, #0]
   13c70:	3303      	adds	r3, #3
   13c72:	781a      	ldrb	r2, [r3, #0]
   13c74:	687b      	ldr	r3, [r7, #4]
   13c76:	6959      	ldr	r1, [r3, #20]
   13c78:	687b      	ldr	r3, [r7, #4]
   13c7a:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
   13c7e:	009b      	lsls	r3, r3, #2
   13c80:	440b      	add	r3, r1
   13c82:	681b      	ldr	r3, [r3, #0]
   13c84:	3302      	adds	r3, #2
   13c86:	781b      	ldrb	r3, [r3, #0]
   13c88:	4313      	orrs	r3, r2
   13c8a:	b2db      	uxtb	r3, r3
   13c8c:	4619      	mov	r1, r3
   13c8e:	687b      	ldr	r3, [r7, #4]
   13c90:	695a      	ldr	r2, [r3, #20]
   13c92:	687b      	ldr	r3, [r7, #4]
   13c94:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
   13c98:	009b      	lsls	r3, r3, #2
   13c9a:	4413      	add	r3, r2
   13c9c:	681b      	ldr	r3, [r3, #0]
   13c9e:	3301      	adds	r3, #1
   13ca0:	781b      	ldrb	r3, [r3, #0]
   13ca2:	2b00      	cmp	r3, #0
   13ca4:	bfcc      	ite	gt
   13ca6:	2301      	movgt	r3, #1
   13ca8:	2300      	movle	r3, #0
   13caa:	b2db      	uxtb	r3, r3
   13cac:	430b      	orrs	r3, r1
   13cae:	2b00      	cmp	r3, #0
   13cb0:	d01c      	beq.n	13cec <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0xbc>
	{

			memcpy(localBuffer,transmitBuffer[index],4);
   13cb2:	687b      	ldr	r3, [r7, #4]
   13cb4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   13cb8:	687a      	ldr	r2, [r7, #4]
   13cba:	6951      	ldr	r1, [r2, #20]
   13cbc:	687a      	ldr	r2, [r7, #4]
   13cbe:	f892 218c 	ldrb.w	r2, [r2, #396]	; 0x18c
   13cc2:	0092      	lsls	r2, r2, #2
   13cc4:	440a      	add	r2, r1
   13cc6:	6812      	ldr	r2, [r2, #0]
   13cc8:	6812      	ldr	r2, [r2, #0]
   13cca:	601a      	str	r2, [r3, #0]

			cpu_irq_disable();
   13ccc:	6878      	ldr	r0, [r7, #4]
   13cce:	4b0b      	ldr	r3, [pc, #44]	; (13cfc <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0xcc>)
   13cd0:	4798      	blx	r3
			HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   13cd2:	687b      	ldr	r3, [r7, #4]
   13cd4:	f503 70c8 	add.w	r0, r3, #400	; 0x190
   13cd8:	687b      	ldr	r3, [r7, #4]
   13cda:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   13cde:	461a      	mov	r2, r3
   13ce0:	210c      	movs	r1, #12
   13ce2:	4b07      	ldr	r3, [pc, #28]	; (13d00 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0xd0>)
   13ce4:	4798      	blx	r3
			cpu_irq_enable();
   13ce6:	6878      	ldr	r0, [r7, #4]
   13ce8:	4b06      	ldr	r3, [pc, #24]	; (13d04 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0xd4>)
   13cea:	4798      	blx	r3
	}



	return l;
   13cec:	78fb      	ldrb	r3, [r7, #3]
}
   13cee:	4618      	mov	r0, r3
   13cf0:	3708      	adds	r7, #8
   13cf2:	46bd      	mov	sp, r7
   13cf4:	bd80      	pop	{r7, pc}
   13cf6:	bf00      	nop
   13cf8:	000131d3 	.word	0x000131d3
   13cfc:	00013d89 	.word	0x00013d89
   13d00:	000144a1 	.word	0x000144a1
   13d04:	00013d71 	.word	0x00013d71

00013d08 <_ZN15ARINC_Interface16TransmitTXBufferEv>:

void	ARINC_Interface::TransmitTXBuffer(void){
   13d08:	b580      	push	{r7, lr}
   13d0a:	b084      	sub	sp, #16
   13d0c:	af00      	add	r7, sp, #0
   13d0e:	6078      	str	r0, [r7, #4]
	uint8_t i,l;
	gpio_set_pin_level(LED0,false);
   13d10:	2100      	movs	r1, #0
   13d12:	2052      	movs	r0, #82	; 0x52
   13d14:	4b14      	ldr	r3, [pc, #80]	; (13d68 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x60>)
   13d16:	4798      	blx	r3
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
   13d18:	2300      	movs	r3, #0
   13d1a:	73fb      	strb	r3, [r7, #15]
   13d1c:	7bfb      	ldrb	r3, [r7, #15]
   13d1e:	2b1f      	cmp	r3, #31
   13d20:	dc15      	bgt.n	13d4e <_ZN15ARINC_Interface16TransmitTXBufferEv+0x46>
	{
		if (LabelsArrayTX[i]>0)
   13d22:	687b      	ldr	r3, [r7, #4]
   13d24:	685a      	ldr	r2, [r3, #4]
   13d26:	7bfb      	ldrb	r3, [r7, #15]
   13d28:	4413      	add	r3, r2
   13d2a:	781b      	ldrb	r3, [r3, #0]
   13d2c:	2b00      	cmp	r3, #0
   13d2e:	dd0a      	ble.n	13d46 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x3e>
		{
			l=LabelsArrayTX[i];
   13d30:	687b      	ldr	r3, [r7, #4]
   13d32:	685a      	ldr	r2, [r3, #4]
   13d34:	7bfb      	ldrb	r3, [r7, #15]
   13d36:	4413      	add	r3, r2
   13d38:	781b      	ldrb	r3, [r3, #0]
   13d3a:	73bb      	strb	r3, [r7, #14]
			TrasmitSingleLabel(l);
   13d3c:	7bbb      	ldrb	r3, [r7, #14]
   13d3e:	4619      	mov	r1, r3
   13d40:	6878      	ldr	r0, [r7, #4]
   13d42:	4b0a      	ldr	r3, [pc, #40]	; (13d6c <_ZN15ARINC_Interface16TransmitTXBufferEv+0x64>)
   13d44:	4798      	blx	r3
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
   13d46:	7bfb      	ldrb	r3, [r7, #15]
   13d48:	3301      	adds	r3, #1
   13d4a:	73fb      	strb	r3, [r7, #15]
   13d4c:	e7e6      	b.n	13d1c <_ZN15ARINC_Interface16TransmitTXBufferEv+0x14>
		}
	}
	txTimeout=false;
   13d4e:	687b      	ldr	r3, [r7, #4]
   13d50:	2200      	movs	r2, #0
   13d52:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	gpio_set_pin_level(LED0,true);
   13d56:	2101      	movs	r1, #1
   13d58:	2052      	movs	r0, #82	; 0x52
   13d5a:	4b03      	ldr	r3, [pc, #12]	; (13d68 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x60>)
   13d5c:	4798      	blx	r3
}
   13d5e:	bf00      	nop
   13d60:	3710      	adds	r7, #16
   13d62:	46bd      	mov	sp, r7
   13d64:	bd80      	pop	{r7, pc}
   13d66:	bf00      	nop
   13d68:	00013401 	.word	0x00013401
   13d6c:	00013c31 	.word	0x00013c31

00013d70 <_ZN15ARINC_Interface14cpu_irq_enableEv>:
	usb.println("  I = Increment Message and Transmit. Explorer Mode  - ONLY!");
	usb.println("  M = Enter Custom Message. Explorer Mode  - ONLY!");
	usb.println("  ENTER= Transmit next message. Explorer Mode  - ONLY!");
}

void	ARINC_Interface::cpu_irq_enable(void){
   13d70:	b480      	push	{r7}
   13d72:	b083      	sub	sp, #12
   13d74:	af00      	add	r7, sp, #0
   13d76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   13d78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   13d7c:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
   13d7e:	bf00      	nop
   13d80:	370c      	adds	r7, #12
   13d82:	46bd      	mov	sp, r7
   13d84:	bc80      	pop	{r7}
   13d86:	4770      	bx	lr

00013d88 <_ZN15ARINC_Interface15cpu_irq_disableEv>:
void	ARINC_Interface::cpu_irq_disable(void){
   13d88:	b480      	push	{r7}
   13d8a:	b083      	sub	sp, #12
   13d8c:	af00      	add	r7, sp, #0
   13d8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   13d90:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   13d94:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
   13d96:	bf00      	nop
   13d98:	370c      	adds	r7, #12
   13d9a:	46bd      	mov	sp, r7
   13d9c:	bc80      	pop	{r7}
   13d9e:	4770      	bx	lr

00013da0 <_ZN15ARINC_Interface12PrintHexByteEh>:
	usb.write(&p,1);
	p=0x0D;
	usb.write(&p,1);
}
void ARINC_Interface::PrintHexByte(uint8_t c)
{
   13da0:	b580      	push	{r7, lr}
   13da2:	b082      	sub	sp, #8
   13da4:	af00      	add	r7, sp, #0
   13da6:	6078      	str	r0, [r7, #4]
   13da8:	460b      	mov	r3, r1
   13daa:	70fb      	strb	r3, [r7, #3]
	usb<<"0x ";
   13dac:	4906      	ldr	r1, [pc, #24]	; (13dc8 <_ZN15ARINC_Interface12PrintHexByteEh+0x28>)
   13dae:	4807      	ldr	r0, [pc, #28]	; (13dcc <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   13db0:	4b07      	ldr	r3, [pc, #28]	; (13dd0 <_ZN15ARINC_Interface12PrintHexByteEh+0x30>)
   13db2:	4798      	blx	r3
	usb.println(c,HEX);
   13db4:	78fb      	ldrb	r3, [r7, #3]
   13db6:	2210      	movs	r2, #16
   13db8:	4619      	mov	r1, r3
   13dba:	4804      	ldr	r0, [pc, #16]	; (13dcc <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   13dbc:	4b05      	ldr	r3, [pc, #20]	; (13dd4 <_ZN15ARINC_Interface12PrintHexByteEh+0x34>)
   13dbe:	4798      	blx	r3
	
}
   13dc0:	bf00      	nop
   13dc2:	3708      	adds	r7, #8
   13dc4:	46bd      	mov	sp, r7
   13dc6:	bd80      	pop	{r7, pc}
   13dc8:	00021360 	.word	0x00021360
   13dcc:	2000a4d0 	.word	0x2000a4d0
   13dd0:	00001485 	.word	0x00001485
   13dd4:	000186fd 	.word	0x000186fd

00013dd8 <_ZN15ARINC_Interface16printARINCTXDataEPh>:
		usb.println("\n\rLabels 192-255:  ");
	}
	
}

void ARINC_Interface::printARINCTXData(unsigned char *array) {
   13dd8:	b580      	push	{r7, lr}
   13dda:	b084      	sub	sp, #16
   13ddc:	af00      	add	r7, sp, #0
   13dde:	6078      	str	r0, [r7, #4]
   13de0:	6039      	str	r1, [r7, #0]
	unsigned char i;
	
	usb.println("\n\r>TX    Data:");
   13de2:	4914      	ldr	r1, [pc, #80]	; (13e34 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x5c>)
   13de4:	4814      	ldr	r0, [pc, #80]	; (13e38 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13de6:	4b15      	ldr	r3, [pc, #84]	; (13e3c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13de8:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   13dea:	2300      	movs	r3, #0
   13dec:	73fb      	strb	r3, [r7, #15]
   13dee:	7bfb      	ldrb	r3, [r7, #15]
   13df0:	2b02      	cmp	r3, #2
   13df2:	dc0b      	bgt.n	13e0c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x34>
		PrintHexByte(array[i]);          // Output the data
   13df4:	7bfb      	ldrb	r3, [r7, #15]
   13df6:	683a      	ldr	r2, [r7, #0]
   13df8:	4413      	add	r3, r2
   13dfa:	781b      	ldrb	r3, [r3, #0]
   13dfc:	4619      	mov	r1, r3
   13dfe:	6878      	ldr	r0, [r7, #4]
   13e00:	4b0f      	ldr	r3, [pc, #60]	; (13e40 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   13e02:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   13e04:	7bfb      	ldrb	r3, [r7, #15]
   13e06:	3301      	adds	r3, #1
   13e08:	73fb      	strb	r3, [r7, #15]
   13e0a:	e7f0      	b.n	13dee <_ZN15ARINC_Interface16printARINCTXDataEPh+0x16>
	}
	usb.println("Label:");
   13e0c:	490d      	ldr	r1, [pc, #52]	; (13e44 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x6c>)
   13e0e:	480a      	ldr	r0, [pc, #40]	; (13e38 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13e10:	4b0a      	ldr	r3, [pc, #40]	; (13e3c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13e12:	4798      	blx	r3
	PrintHexByte(array[3]);             // Output the label data
   13e14:	683b      	ldr	r3, [r7, #0]
   13e16:	3303      	adds	r3, #3
   13e18:	781b      	ldrb	r3, [r3, #0]
   13e1a:	4619      	mov	r1, r3
   13e1c:	6878      	ldr	r0, [r7, #4]
   13e1e:	4b08      	ldr	r3, [pc, #32]	; (13e40 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   13e20:	4798      	blx	r3
	
	//crlf();
	usb.println(">");
   13e22:	4909      	ldr	r1, [pc, #36]	; (13e48 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x70>)
   13e24:	4804      	ldr	r0, [pc, #16]	; (13e38 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13e26:	4b05      	ldr	r3, [pc, #20]	; (13e3c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13e28:	4798      	blx	r3
}
   13e2a:	bf00      	nop
   13e2c:	3710      	adds	r7, #16
   13e2e:	46bd      	mov	sp, r7
   13e30:	bd80      	pop	{r7, pc}
   13e32:	bf00      	nop
   13e34:	00021530 	.word	0x00021530
   13e38:	2000a4d0 	.word	0x2000a4d0
   13e3c:	000186c9 	.word	0x000186c9
   13e40:	00013da1 	.word	0x00013da1
   13e44:	00021540 	.word	0x00021540
   13e48:	00020ec0 	.word	0x00020ec0

00013e4c <_ZN15ARINC_Interface8HW_RESETEv>:
	//crlf();
	usb.println("\n\r");
	usb.println(">");
}

void ARINC_Interface::HW_RESET(void){
   13e4c:	b580      	push	{r7, lr}
   13e4e:	b082      	sub	sp, #8
   13e50:	af00      	add	r7, sp, #0
   13e52:	6078      	str	r0, [r7, #4]
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
   13e54:	2001      	movs	r0, #1
   13e56:	4b03      	ldr	r3, [pc, #12]	; (13e64 <_ZN15ARINC_Interface8HW_RESETEv+0x18>)
   13e58:	4798      	blx	r3
	//gpio_set_pin_level(MR,false);
}
   13e5a:	bf00      	nop
   13e5c:	3708      	adds	r7, #8
   13e5e:	46bd      	mov	sp, r7
   13e60:	bd80      	pop	{r7, pc}
   13e62:	bf00      	nop
   13e64:	000067a1 	.word	0x000067a1

00013e68 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

 ARINC_Interface	arinc;
   13e68:	b580      	push	{r7, lr}
   13e6a:	b082      	sub	sp, #8
   13e6c:	af00      	add	r7, sp, #0
   13e6e:	6078      	str	r0, [r7, #4]
   13e70:	6039      	str	r1, [r7, #0]
   13e72:	687b      	ldr	r3, [r7, #4]
   13e74:	2b01      	cmp	r3, #1
   13e76:	d10c      	bne.n	13e92 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13e78:	683b      	ldr	r3, [r7, #0]
   13e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13e7e:	4293      	cmp	r3, r2
   13e80:	d107      	bne.n	13e92 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13e82:	4806      	ldr	r0, [pc, #24]	; (13e9c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13e84:	4b06      	ldr	r3, [pc, #24]	; (13ea0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13e86:	4798      	blx	r3
   13e88:	4a06      	ldr	r2, [pc, #24]	; (13ea4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13e8a:	4907      	ldr	r1, [pc, #28]	; (13ea8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13e8c:	4803      	ldr	r0, [pc, #12]	; (13e9c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13e8e:	4b07      	ldr	r3, [pc, #28]	; (13eac <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13e90:	4798      	blx	r3
   13e92:	bf00      	nop
   13e94:	3708      	adds	r7, #8
   13e96:	46bd      	mov	sp, r7
   13e98:	bd80      	pop	{r7, pc}
   13e9a:	bf00      	nop
   13e9c:	20008ff0 	.word	0x20008ff0
   13ea0:	000134f9 	.word	0x000134f9
   13ea4:	20000000 	.word	0x20000000
   13ea8:	000135f1 	.word	0x000135f1
   13eac:	00019d1d 	.word	0x00019d1d

00013eb0 <_GLOBAL__sub_I_HexSymbols>:
   13eb0:	b580      	push	{r7, lr}
   13eb2:	af00      	add	r7, sp, #0
   13eb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13eb8:	2001      	movs	r0, #1
   13eba:	4b01      	ldr	r3, [pc, #4]	; (13ec0 <_GLOBAL__sub_I_HexSymbols+0x10>)
   13ebc:	4798      	blx	r3
   13ebe:	bd80      	pop	{r7, pc}
   13ec0:	00013e69 	.word	0x00013e69

00013ec4 <hri_port_set_OUT_reg>:
{
   13ec4:	b480      	push	{r7}
   13ec6:	b085      	sub	sp, #20
   13ec8:	af00      	add	r7, sp, #0
   13eca:	60f8      	str	r0, [r7, #12]
   13ecc:	460b      	mov	r3, r1
   13ece:	607a      	str	r2, [r7, #4]
   13ed0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   13ed2:	7afb      	ldrb	r3, [r7, #11]
   13ed4:	68fa      	ldr	r2, [r7, #12]
   13ed6:	01db      	lsls	r3, r3, #7
   13ed8:	4413      	add	r3, r2
   13eda:	3318      	adds	r3, #24
   13edc:	687a      	ldr	r2, [r7, #4]
   13ede:	601a      	str	r2, [r3, #0]
}
   13ee0:	bf00      	nop
   13ee2:	3714      	adds	r7, #20
   13ee4:	46bd      	mov	sp, r7
   13ee6:	bc80      	pop	{r7}
   13ee8:	4770      	bx	lr

00013eea <hri_port_clear_OUT_reg>:
{
   13eea:	b480      	push	{r7}
   13eec:	b085      	sub	sp, #20
   13eee:	af00      	add	r7, sp, #0
   13ef0:	60f8      	str	r0, [r7, #12]
   13ef2:	460b      	mov	r3, r1
   13ef4:	607a      	str	r2, [r7, #4]
   13ef6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   13ef8:	7afb      	ldrb	r3, [r7, #11]
   13efa:	68fa      	ldr	r2, [r7, #12]
   13efc:	01db      	lsls	r3, r3, #7
   13efe:	4413      	add	r3, r2
   13f00:	3314      	adds	r3, #20
   13f02:	687a      	ldr	r2, [r7, #4]
   13f04:	601a      	str	r2, [r3, #0]
}
   13f06:	bf00      	nop
   13f08:	3714      	adds	r7, #20
   13f0a:	46bd      	mov	sp, r7
   13f0c:	bc80      	pop	{r7}
   13f0e:	4770      	bx	lr

00013f10 <_gpio_set_level>:
{
   13f10:	b580      	push	{r7, lr}
   13f12:	b082      	sub	sp, #8
   13f14:	af00      	add	r7, sp, #0
   13f16:	4603      	mov	r3, r0
   13f18:	6039      	str	r1, [r7, #0]
   13f1a:	71fb      	strb	r3, [r7, #7]
   13f1c:	4613      	mov	r3, r2
   13f1e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   13f20:	79bb      	ldrb	r3, [r7, #6]
   13f22:	2b00      	cmp	r3, #0
   13f24:	d006      	beq.n	13f34 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   13f26:	79fb      	ldrb	r3, [r7, #7]
   13f28:	683a      	ldr	r2, [r7, #0]
   13f2a:	4619      	mov	r1, r3
   13f2c:	4806      	ldr	r0, [pc, #24]	; (13f48 <_gpio_set_level+0x38>)
   13f2e:	4b07      	ldr	r3, [pc, #28]	; (13f4c <_gpio_set_level+0x3c>)
   13f30:	4798      	blx	r3
}
   13f32:	e005      	b.n	13f40 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   13f34:	79fb      	ldrb	r3, [r7, #7]
   13f36:	683a      	ldr	r2, [r7, #0]
   13f38:	4619      	mov	r1, r3
   13f3a:	4803      	ldr	r0, [pc, #12]	; (13f48 <_gpio_set_level+0x38>)
   13f3c:	4b04      	ldr	r3, [pc, #16]	; (13f50 <_gpio_set_level+0x40>)
   13f3e:	4798      	blx	r3
}
   13f40:	bf00      	nop
   13f42:	3708      	adds	r7, #8
   13f44:	46bd      	mov	sp, r7
   13f46:	bd80      	pop	{r7, pc}
   13f48:	41008000 	.word	0x41008000
   13f4c:	00013ec5 	.word	0x00013ec5
   13f50:	00013eeb 	.word	0x00013eeb

00013f54 <gpio_set_pin_level>:
{
   13f54:	b580      	push	{r7, lr}
   13f56:	b082      	sub	sp, #8
   13f58:	af00      	add	r7, sp, #0
   13f5a:	4603      	mov	r3, r0
   13f5c:	460a      	mov	r2, r1
   13f5e:	71fb      	strb	r3, [r7, #7]
   13f60:	4613      	mov	r3, r2
   13f62:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   13f64:	79fb      	ldrb	r3, [r7, #7]
   13f66:	115b      	asrs	r3, r3, #5
   13f68:	b2d8      	uxtb	r0, r3
   13f6a:	79fb      	ldrb	r3, [r7, #7]
   13f6c:	f003 031f 	and.w	r3, r3, #31
   13f70:	2201      	movs	r2, #1
   13f72:	fa02 f303 	lsl.w	r3, r2, r3
   13f76:	79ba      	ldrb	r2, [r7, #6]
   13f78:	4619      	mov	r1, r3
   13f7a:	4b03      	ldr	r3, [pc, #12]	; (13f88 <gpio_set_pin_level+0x34>)
   13f7c:	4798      	blx	r3
}
   13f7e:	bf00      	nop
   13f80:	3708      	adds	r7, #8
   13f82:	46bd      	mov	sp, r7
   13f84:	bd80      	pop	{r7, pc}
   13f86:	bf00      	nop
   13f88:	00013f11 	.word	0x00013f11

00013f8c <_ZN15Holt_3593_ClassC1Ev>:
#include "Holt_3593_Class.h"
#include "ARINC_Interface.h"
#include "string.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
   13f8c:	b580      	push	{r7, lr}
   13f8e:	b082      	sub	sp, #8
   13f90:	af00      	add	r7, sp, #0
   13f92:	6078      	str	r0, [r7, #4]
   13f94:	687b      	ldr	r3, [r7, #4]
   13f96:	4618      	mov	r0, r3
   13f98:	4b03      	ldr	r3, [pc, #12]	; (13fa8 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
   13f9a:	4798      	blx	r3
{
} //Holt_3593_Class
   13f9c:	687b      	ldr	r3, [r7, #4]
   13f9e:	4618      	mov	r0, r3
   13fa0:	3708      	adds	r7, #8
   13fa2:	46bd      	mov	sp, r7
   13fa4:	bd80      	pop	{r7, pc}
   13fa6:	bf00      	nop
   13fa8:	0001608d 	.word	0x0001608d

00013fac <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
   13fac:	b580      	push	{r7, lr}
   13fae:	b082      	sub	sp, #8
   13fb0:	af00      	add	r7, sp, #0
   13fb2:	6078      	str	r0, [r7, #4]
   13fb4:	687b      	ldr	r3, [r7, #4]
   13fb6:	4618      	mov	r0, r3
   13fb8:	4b03      	ldr	r3, [pc, #12]	; (13fc8 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
   13fba:	4798      	blx	r3
{
} //~Holt_3593_Class
   13fbc:	687b      	ldr	r3, [r7, #4]
   13fbe:	4618      	mov	r0, r3
   13fc0:	3708      	adds	r7, #8
   13fc2:	46bd      	mov	sp, r7
   13fc4:	bd80      	pop	{r7, pc}
   13fc6:	bf00      	nop
   13fc8:	000160ad 	.word	0x000160ad

00013fcc <_ZN15Holt_3593_Class4InitEv>:

// Priority Label-1 Table     
unsigned char LabelPriority2 [3];

  
 uint8_t	Holt_3593_Class::Init(void){
   13fcc:	b590      	push	{r4, r7, lr}
   13fce:	b089      	sub	sp, #36	; 0x24
   13fd0:	af02      	add	r7, sp, #8
   13fd2:	6078      	str	r0, [r7, #4]
	 
	 spi.SetDescriptor(&SPI_HI3593);
   13fd4:	687b      	ldr	r3, [r7, #4]
   13fd6:	492c      	ldr	r1, [pc, #176]	; (14088 <_ZN15Holt_3593_Class4InitEv+0xbc>)
   13fd8:	4618      	mov	r0, r3
   13fda:	4b2c      	ldr	r3, [pc, #176]	; (1408c <_ZN15Holt_3593_Class4InitEv+0xc0>)
   13fdc:	4798      	blx	r3
	  spi.init();
   13fde:	687b      	ldr	r3, [r7, #4]
   13fe0:	4618      	mov	r0, r3
   13fe2:	4b2b      	ldr	r3, [pc, #172]	; (14090 <_ZN15Holt_3593_Class4InitEv+0xc4>)
   13fe4:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 BITRATE,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
   13fe6:	2340      	movs	r3, #64	; 0x40
   13fe8:	9301      	str	r3, [sp, #4]
   13fea:	2300      	movs	r3, #0
   13fec:	9300      	str	r3, [sp, #0]
   13fee:	2300      	movs	r3, #0
   13ff0:	2201      	movs	r2, #1
   13ff2:	2104      	movs	r1, #4
   13ff4:	6878      	ldr	r0, [r7, #4]
   13ff6:	4c27      	ldr	r4, [pc, #156]	; (14094 <_ZN15Holt_3593_Class4InitEv+0xc8>)
   13ff8:	47a0      	blx	r4
   13ffa:	4603      	mov	r3, r0
   13ffc:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<32;i++)
   13ffe:	2300      	movs	r3, #0
   14000:	617b      	str	r3, [r7, #20]
   14002:	697b      	ldr	r3, [r7, #20]
   14004:	2b1f      	cmp	r3, #31
   14006:	dc27      	bgt.n	14058 <_ZN15Holt_3593_Class4InitEv+0x8c>
	{
// 		LabelArray_2[i]=FlipByte(LabelArray_1[i]);
// 		LabelArray_1[i]=LabelArray_2[i];
		LabelArray_2[i]=LabelArray_1[i];
   14008:	4a23      	ldr	r2, [pc, #140]	; (14098 <_ZN15Holt_3593_Class4InitEv+0xcc>)
   1400a:	697b      	ldr	r3, [r7, #20]
   1400c:	4413      	add	r3, r2
   1400e:	7819      	ldrb	r1, [r3, #0]
   14010:	4a22      	ldr	r2, [pc, #136]	; (1409c <_ZN15Holt_3593_Class4InitEv+0xd0>)
   14012:	697b      	ldr	r3, [r7, #20]
   14014:	4413      	add	r3, r2
   14016:	460a      	mov	r2, r1
   14018:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX1[i]=LabelArray_2[i];
   1401a:	4b21      	ldr	r3, [pc, #132]	; (140a0 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   1401c:	689a      	ldr	r2, [r3, #8]
   1401e:	697b      	ldr	r3, [r7, #20]
   14020:	4413      	add	r3, r2
   14022:	491e      	ldr	r1, [pc, #120]	; (1409c <_ZN15Holt_3593_Class4InitEv+0xd0>)
   14024:	697a      	ldr	r2, [r7, #20]
   14026:	440a      	add	r2, r1
   14028:	7812      	ldrb	r2, [r2, #0]
   1402a:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX2[i]=LabelArray_2[i];
   1402c:	4b1c      	ldr	r3, [pc, #112]	; (140a0 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   1402e:	68da      	ldr	r2, [r3, #12]
   14030:	697b      	ldr	r3, [r7, #20]
   14032:	4413      	add	r3, r2
   14034:	4919      	ldr	r1, [pc, #100]	; (1409c <_ZN15Holt_3593_Class4InitEv+0xd0>)
   14036:	697a      	ldr	r2, [r7, #20]
   14038:	440a      	add	r2, r1
   1403a:	7812      	ldrb	r2, [r2, #0]
   1403c:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayTX[i]=LabelArray_2[i];
   1403e:	4b18      	ldr	r3, [pc, #96]	; (140a0 <_ZN15Holt_3593_Class4InitEv+0xd4>)
   14040:	685a      	ldr	r2, [r3, #4]
   14042:	697b      	ldr	r3, [r7, #20]
   14044:	4413      	add	r3, r2
   14046:	4915      	ldr	r1, [pc, #84]	; (1409c <_ZN15Holt_3593_Class4InitEv+0xd0>)
   14048:	697a      	ldr	r2, [r7, #20]
   1404a:	440a      	add	r2, r1
   1404c:	7812      	ldrb	r2, [r2, #0]
   1404e:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<32;i++)
   14050:	697b      	ldr	r3, [r7, #20]
   14052:	3301      	adds	r3, #1
   14054:	617b      	str	r3, [r7, #20]
   14056:	e7d4      	b.n	14002 <_ZN15Holt_3593_Class4InitEv+0x36>
	}
	for (int i=0;i<3;i++)
   14058:	2300      	movs	r3, #0
   1405a:	613b      	str	r3, [r7, #16]
   1405c:	693b      	ldr	r3, [r7, #16]
   1405e:	2b02      	cmp	r3, #2
   14060:	dc0c      	bgt.n	1407c <_ZN15Holt_3593_Class4InitEv+0xb0>
	{
		//LabelPriority2[i]=FlipByte(LabelPriority1[i]);
		LabelPriority2[i]=LabelPriority1[i];
   14062:	4a10      	ldr	r2, [pc, #64]	; (140a4 <_ZN15Holt_3593_Class4InitEv+0xd8>)
   14064:	693b      	ldr	r3, [r7, #16]
   14066:	4413      	add	r3, r2
   14068:	7819      	ldrb	r1, [r3, #0]
   1406a:	4a0f      	ldr	r2, [pc, #60]	; (140a8 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   1406c:	693b      	ldr	r3, [r7, #16]
   1406e:	4413      	add	r3, r2
   14070:	460a      	mov	r2, r1
   14072:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
   14074:	693b      	ldr	r3, [r7, #16]
   14076:	3301      	adds	r3, #1
   14078:	613b      	str	r3, [r7, #16]
   1407a:	e7ef      	b.n	1405c <_ZN15Holt_3593_Class4InitEv+0x90>
	}
	//memcpy(arinc.LabelsArrayRX1,LabelArray_1,LABEL_ARRAY_SIZE);	
//	memcpy(arinc.LabelsArrayRX2,LabelArray_2,LABEL_ARRAY_SIZE);	
	//memcpy(arinc.LabelsArrayTX,LabelArray_2,LABEL_ARRAY_SIZE);		
	return	status;
   1407c:	7bfb      	ldrb	r3, [r7, #15]
 } 
   1407e:	4618      	mov	r0, r3
   14080:	371c      	adds	r7, #28
   14082:	46bd      	mov	sp, r7
   14084:	bd90      	pop	{r4, r7, pc}
   14086:	bf00      	nop
   14088:	2000a770 	.word	0x2000a770
   1408c:	00016109 	.word	0x00016109
   14090:	000160c1 	.word	0x000160c1
   14094:	000140ad 	.word	0x000140ad
   14098:	0002194c 	.word	0x0002194c
   1409c:	200092e0 	.word	0x200092e0
   140a0:	20008ff0 	.word	0x20008ff0
   140a4:	20000244 	.word	0x20000244
   140a8:	20009300 	.word	0x20009300

000140ac <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
   140ac:	b580      	push	{r7, lr}
   140ae:	b084      	sub	sp, #16
   140b0:	af00      	add	r7, sp, #0
   140b2:	6078      	str	r0, [r7, #4]
   140b4:	4608      	mov	r0, r1
   140b6:	4611      	mov	r1, r2
   140b8:	461a      	mov	r2, r3
   140ba:	4603      	mov	r3, r0
   140bc:	70fb      	strb	r3, [r7, #3]
   140be:	460b      	mov	r3, r1
   140c0:	70bb      	strb	r3, [r7, #2]
   140c2:	4613      	mov	r3, r2
   140c4:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
   140c6:	2300      	movs	r3, #0
   140c8:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
   140ca:	2104      	movs	r1, #4
   140cc:	6878      	ldr	r0, [r7, #4]
   140ce:	4b18      	ldr	r3, [pc, #96]	; (14130 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
   140d0:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   140d2:	78fb      	ldrb	r3, [r7, #3]
   140d4:	461a      	mov	r2, r3
   140d6:	2138      	movs	r1, #56	; 0x38
   140d8:	6878      	ldr	r0, [r7, #4]
   140da:	4b16      	ldr	r3, [pc, #88]	; (14134 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   140dc:	4798      	blx	r3
	 cmd =  arate;
   140de:	7e3b      	ldrb	r3, [r7, #24]
   140e0:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
   140e2:	787b      	ldrb	r3, [r7, #1]
   140e4:	011b      	lsls	r3, r3, #4
   140e6:	b25a      	sxtb	r2, r3
   140e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
   140ec:	4313      	orrs	r3, r2
   140ee:	b25b      	sxtb	r3, r3
   140f0:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
   140f2:	78bb      	ldrb	r3, [r7, #2]
   140f4:	015b      	lsls	r3, r3, #5
   140f6:	b25a      	sxtb	r2, r3
   140f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
   140fc:	4313      	orrs	r3, r2
   140fe:	b25b      	sxtb	r3, r3
   14100:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
   14102:	7f3b      	ldrb	r3, [r7, #28]
   14104:	019b      	lsls	r3, r3, #6
   14106:	b25a      	sxtb	r2, r3
   14108:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1410c:	4313      	orrs	r3, r2
   1410e:	b25b      	sxtb	r3, r3
   14110:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   14112:	7bfb      	ldrb	r3, [r7, #15]
   14114:	461a      	mov	r2, r3
   14116:	2108      	movs	r1, #8
   14118:	6878      	ldr	r0, [r7, #4]
   1411a:	4b06      	ldr	r3, [pc, #24]	; (14134 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   1411c:	4798      	blx	r3
	 return R_Register (R_TSR);
   1411e:	2180      	movs	r1, #128	; 0x80
   14120:	6878      	ldr	r0, [r7, #4]
   14122:	4b05      	ldr	r3, [pc, #20]	; (14138 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
   14124:	4798      	blx	r3
   14126:	4603      	mov	r3, r0
	 
	 
 }
   14128:	4618      	mov	r0, r3
   1412a:	3710      	adds	r7, #16
   1412c:	46bd      	mov	sp, r7
   1412e:	bd80      	pop	{r7, pc}
   14130:	0001454d 	.word	0x0001454d
   14134:	000145a1 	.word	0x000145a1
   14138:	00014615 	.word	0x00014615

0001413c <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
   1413c:	b580      	push	{r7, lr}
   1413e:	b082      	sub	sp, #8
   14140:	af00      	add	r7, sp, #0
   14142:	6078      	str	r0, [r7, #4]
	 	spi.Enable();
   14144:	687b      	ldr	r3, [r7, #4]
   14146:	4618      	mov	r0, r3
   14148:	4b04      	ldr	r3, [pc, #16]	; (1415c <_ZN15Holt_3593_Class4openEv+0x20>)
   1414a:	4798      	blx	r3
		 SS_Low();
   1414c:	6878      	ldr	r0, [r7, #4]
   1414e:	4b04      	ldr	r3, [pc, #16]	; (14160 <_ZN15Holt_3593_Class4openEv+0x24>)
   14150:	4798      	blx	r3
 }
   14152:	bf00      	nop
   14154:	3708      	adds	r7, #8
   14156:	46bd      	mov	sp, r7
   14158:	bd80      	pop	{r7, pc}
   1415a:	bf00      	nop
   1415c:	0001612d 	.word	0x0001612d
   14160:	0001465d 	.word	0x0001465d

00014164 <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
   14164:	b580      	push	{r7, lr}
   14166:	b082      	sub	sp, #8
   14168:	af00      	add	r7, sp, #0
   1416a:	6078      	str	r0, [r7, #4]
	    SS_High();
   1416c:	6878      	ldr	r0, [r7, #4]
   1416e:	4b05      	ldr	r3, [pc, #20]	; (14184 <_ZN15Holt_3593_Class5closeEv+0x20>)
   14170:	4798      	blx	r3
	  spi.Disable();
   14172:	687b      	ldr	r3, [r7, #4]
   14174:	4618      	mov	r0, r3
   14176:	4b04      	ldr	r3, [pc, #16]	; (14188 <_ZN15Holt_3593_Class5closeEv+0x24>)
   14178:	4798      	blx	r3
	
  }
   1417a:	bf00      	nop
   1417c:	3708      	adds	r7, #8
   1417e:	46bd      	mov	sp, r7
   14180:	bd80      	pop	{r7, pc}
   14182:	bf00      	nop
   14184:	00014679 	.word	0x00014679
   14188:	000161f1 	.word	0x000161f1

0001418c <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   1418c:	b580      	push	{r7, lr}
   1418e:	b084      	sub	sp, #16
   14190:	af00      	add	r7, sp, #0
   14192:	6078      	str	r0, [r7, #4]
   14194:	460b      	mov	r3, r1
   14196:	70fb      	strb	r3, [r7, #3]
   14198:	4613      	mov	r3, r2
   1419a:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
   1419c:	78fb      	ldrb	r3, [r7, #3]
   1419e:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   141a0:	7bfb      	ldrb	r3, [r7, #15]
   141a2:	4619      	mov	r1, r3
   141a4:	6878      	ldr	r0, [r7, #4]
   141a6:	4b0b      	ldr	r3, [pc, #44]	; (141d4 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
   141a8:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
   141aa:	78bb      	ldrb	r3, [r7, #2]
   141ac:	2b00      	cmp	r3, #0
   141ae:	d00a      	beq.n	141c6 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.IsSPIReady());     
   141b0:	687b      	ldr	r3, [r7, #4]
   141b2:	4618      	mov	r0, r3
   141b4:	4b08      	ldr	r3, [pc, #32]	; (141d8 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
   141b6:	4798      	blx	r3
   141b8:	4603      	mov	r3, r0
   141ba:	f083 0301 	eor.w	r3, r3, #1
   141be:	b2db      	uxtb	r3, r3
   141c0:	2b00      	cmp	r3, #0
   141c2:	d000      	beq.n	141c6 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
   141c4:	e7f4      	b.n	141b0 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
   141c6:	78fb      	ldrb	r3, [r7, #3]
   141c8:	73bb      	strb	r3, [r7, #14]
   141ca:	7bbb      	ldrb	r3, [r7, #14]
  
}
   141cc:	4618      	mov	r0, r3
   141ce:	3710      	adds	r7, #16
   141d0:	46bd      	mov	sp, r7
   141d2:	bd80      	pop	{r7, pc}
   141d4:	000142bd 	.word	0x000142bd
   141d8:	00016211 	.word	0x00016211

000141dc <_ZN15Holt_3593_Class19InitReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::InitReceiver1Labels(void)
{
   141dc:	b580      	push	{r7, lr}
   141de:	b084      	sub	sp, #16
   141e0:	af00      	add	r7, sp, #0
   141e2:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
   141e4:	6878      	ldr	r0, [r7, #4]
   141e6:	4b14      	ldr	r3, [pc, #80]	; (14238 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x5c>)
   141e8:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
   141ea:	2201      	movs	r2, #1
   141ec:	2114      	movs	r1, #20
   141ee:	6878      	ldr	r0, [r7, #4]
   141f0:	4b12      	ldr	r3, [pc, #72]	; (1423c <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x60>)
   141f2:	4798      	blx	r3
   141f4:	4603      	mov	r3, r0
   141f6:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   141f8:	231f      	movs	r3, #31
   141fa:	73fb      	strb	r3, [r7, #15]
   141fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
   14200:	2b00      	cmp	r3, #0
   14202:	db11      	blt.n	14228 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   14204:	f997 300f 	ldrsb.w	r3, [r7, #15]
   14208:	4a0d      	ldr	r2, [pc, #52]	; (14240 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x64>)
   1420a:	5cd3      	ldrb	r3, [r2, r3]
   1420c:	2201      	movs	r2, #1
   1420e:	4619      	mov	r1, r3
   14210:	6878      	ldr	r0, [r7, #4]
   14212:	4b0a      	ldr	r3, [pc, #40]	; (1423c <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x60>)
   14214:	4798      	blx	r3
   14216:	4603      	mov	r3, r0
   14218:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   1421a:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1421e:	b2db      	uxtb	r3, r3
   14220:	3b01      	subs	r3, #1
   14222:	b2db      	uxtb	r3, r3
   14224:	73fb      	strb	r3, [r7, #15]
   14226:	e7e9      	b.n	141fc <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x20>
  }    
 	  
	close();
   14228:	6878      	ldr	r0, [r7, #4]
   1422a:	4b06      	ldr	r3, [pc, #24]	; (14244 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x68>)
   1422c:	4798      	blx	r3
}
   1422e:	bf00      	nop
   14230:	3710      	adds	r7, #16
   14232:	46bd      	mov	sp, r7
   14234:	bd80      	pop	{r7, pc}
   14236:	bf00      	nop
   14238:	0001413d 	.word	0x0001413d
   1423c:	0001418d 	.word	0x0001418d
   14240:	0002194c 	.word	0x0002194c
   14244:	00014165 	.word	0x00014165

00014248 <_ZN15Holt_3593_Class18InitPriorityLabelsEv>:
void Holt_3593_Class::InitPriorityLabels(void)
{
   14248:	b580      	push	{r7, lr}
   1424a:	b082      	sub	sp, #8
   1424c:	af00      	add	r7, sp, #0
   1424e:	6078      	str	r0, [r7, #4]
	
	// Priorty Labels
	TXBuffer[0] =  LabelPriority1[0];   // filter 3
   14250:	4b17      	ldr	r3, [pc, #92]	; (142b0 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x68>)
   14252:	781a      	ldrb	r2, [r3, #0]
   14254:	687b      	ldr	r3, [r7, #4]
   14256:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	TXBuffer[1] =  LabelPriority1[1];   // filter 2
   1425a:	4b15      	ldr	r3, [pc, #84]	; (142b0 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x68>)
   1425c:	785a      	ldrb	r2, [r3, #1]
   1425e:	687b      	ldr	r3, [r7, #4]
   14260:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	TXBuffer[2] =  LabelPriority1[2];   // filter 1
   14264:	4b12      	ldr	r3, [pc, #72]	; (142b0 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x68>)
   14266:	789a      	ldrb	r2, [r3, #2]
   14268:	687b      	ldr	r3, [r7, #4]
   1426a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	TransmitCommandAndData(W_PL1Match,TXBuffer);  // initialize the Receiver1 PL match registers
   1426e:	687b      	ldr	r3, [r7, #4]
   14270:	3321      	adds	r3, #33	; 0x21
   14272:	461a      	mov	r2, r3
   14274:	2118      	movs	r1, #24
   14276:	6878      	ldr	r0, [r7, #4]
   14278:	4b0e      	ldr	r3, [pc, #56]	; (142b4 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x6c>)
   1427a:	4798      	blx	r3
	
	TXBuffer[0] =  LabelPriority2[0];   // filter 3
   1427c:	4b0e      	ldr	r3, [pc, #56]	; (142b8 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x70>)
   1427e:	781a      	ldrb	r2, [r3, #0]
   14280:	687b      	ldr	r3, [r7, #4]
   14282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
   14286:	4b0c      	ldr	r3, [pc, #48]	; (142b8 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x70>)
   14288:	785a      	ldrb	r2, [r3, #1]
   1428a:	687b      	ldr	r3, [r7, #4]
   1428c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
   14290:	4b09      	ldr	r3, [pc, #36]	; (142b8 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x70>)
   14292:	789a      	ldrb	r2, [r3, #2]
   14294:	687b      	ldr	r3, [r7, #4]
   14296:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
   1429a:	687b      	ldr	r3, [r7, #4]
   1429c:	3321      	adds	r3, #33	; 0x21
   1429e:	461a      	mov	r2, r3
   142a0:	212c      	movs	r1, #44	; 0x2c
   142a2:	6878      	ldr	r0, [r7, #4]
   142a4:	4b03      	ldr	r3, [pc, #12]	; (142b4 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x6c>)
   142a6:	4798      	blx	r3
}
   142a8:	bf00      	nop
   142aa:	3708      	adds	r7, #8
   142ac:	46bd      	mov	sp, r7
   142ae:	bd80      	pop	{r7, pc}
   142b0:	20000244 	.word	0x20000244
   142b4:	000144a1 	.word	0x000144a1
   142b8:	20009300 	.word	0x20009300

000142bc <_ZN15Holt_3593_Class9Send_ByteEh>:
	}
	return rev;
}

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   142bc:	b580      	push	{r7, lr}
   142be:	b082      	sub	sp, #8
   142c0:	af00      	add	r7, sp, #0
   142c2:	6078      	str	r0, [r7, #4]
   142c4:	460b      	mov	r3, r1
   142c6:	70fb      	strb	r3, [r7, #3]
	while (!spi.IsSPIReady()); 
   142c8:	687b      	ldr	r3, [r7, #4]
   142ca:	4618      	mov	r0, r3
   142cc:	4b0f      	ldr	r3, [pc, #60]	; (1430c <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   142ce:	4798      	blx	r3
   142d0:	4603      	mov	r3, r0
   142d2:	f083 0301 	eor.w	r3, r3, #1
   142d6:	b2db      	uxtb	r3, r3
   142d8:	2b00      	cmp	r3, #0
   142da:	d000      	beq.n	142de <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
   142dc:	e7f4      	b.n	142c8 <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.Write(&byte,1);
   142de:	687b      	ldr	r3, [r7, #4]
   142e0:	1cf9      	adds	r1, r7, #3
   142e2:	2201      	movs	r2, #1
   142e4:	4618      	mov	r0, r3
   142e6:	4b0a      	ldr	r3, [pc, #40]	; (14310 <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
   142e8:	4798      	blx	r3
	while (!spi.IsSPIReady());  
   142ea:	687b      	ldr	r3, [r7, #4]
   142ec:	4618      	mov	r0, r3
   142ee:	4b07      	ldr	r3, [pc, #28]	; (1430c <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   142f0:	4798      	blx	r3
   142f2:	4603      	mov	r3, r0
   142f4:	f083 0301 	eor.w	r3, r3, #1
   142f8:	b2db      	uxtb	r3, r3
   142fa:	2b00      	cmp	r3, #0
   142fc:	d000      	beq.n	14300 <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
   142fe:	e7f4      	b.n	142ea <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
   14300:	78fb      	ldrb	r3, [r7, #3]
}
   14302:	4618      	mov	r0, r3
   14304:	3708      	adds	r7, #8
   14306:	46bd      	mov	sp, r7
   14308:	bd80      	pop	{r7, pc}
   1430a:	bf00      	nop
   1430c:	00016211 	.word	0x00016211
   14310:	00016169 	.word	0x00016169

00014314 <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   14314:	b580      	push	{r7, lr}
   14316:	b084      	sub	sp, #16
   14318:	af00      	add	r7, sp, #0
   1431a:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.IsSPIReady());
   1431c:	687b      	ldr	r3, [r7, #4]
   1431e:	4618      	mov	r0, r3
   14320:	4b0f      	ldr	r3, [pc, #60]	; (14360 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   14322:	4798      	blx	r3
   14324:	4603      	mov	r3, r0
   14326:	f083 0301 	eor.w	r3, r3, #1
   1432a:	b2db      	uxtb	r3, r3
   1432c:	2b00      	cmp	r3, #0
   1432e:	d000      	beq.n	14332 <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
   14330:	e7f4      	b.n	1431c <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.Read(&byte,1);
   14332:	687b      	ldr	r3, [r7, #4]
   14334:	f107 010f 	add.w	r1, r7, #15
   14338:	2201      	movs	r2, #1
   1433a:	4618      	mov	r0, r3
   1433c:	4b09      	ldr	r3, [pc, #36]	; (14364 <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
   1433e:	4798      	blx	r3
	while (!spi.IsSPIReady());
   14340:	687b      	ldr	r3, [r7, #4]
   14342:	4618      	mov	r0, r3
   14344:	4b06      	ldr	r3, [pc, #24]	; (14360 <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   14346:	4798      	blx	r3
   14348:	4603      	mov	r3, r0
   1434a:	f083 0301 	eor.w	r3, r3, #1
   1434e:	b2db      	uxtb	r3, r3
   14350:	2b00      	cmp	r3, #0
   14352:	d000      	beq.n	14356 <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
   14354:	e7f4      	b.n	14340 <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
   14356:	7bfb      	ldrb	r3, [r7, #15]
}	
   14358:	4618      	mov	r0, r3
   1435a:	3710      	adds	r7, #16
   1435c:	46bd      	mov	sp, r7
   1435e:	bd80      	pop	{r7, pc}
   14360:	00016211 	.word	0x00016211
   14364:	000161ad 	.word	0x000161ad

00014368 <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   14368:	b580      	push	{r7, lr}
   1436a:	b084      	sub	sp, #16
   1436c:	af00      	add	r7, sp, #0
   1436e:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   14370:	6878      	ldr	r0, [r7, #4]
   14372:	4b14      	ldr	r3, [pc, #80]	; (143c4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
   14374:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   14376:	2201      	movs	r2, #1
   14378:	2128      	movs	r1, #40	; 0x28
   1437a:	6878      	ldr	r0, [r7, #4]
   1437c:	4b12      	ldr	r3, [pc, #72]	; (143c8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   1437e:	4798      	blx	r3
   14380:	4603      	mov	r3, r0
   14382:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   14384:	231f      	movs	r3, #31
   14386:	73fb      	strb	r3, [r7, #15]
   14388:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1438c:	2b00      	cmp	r3, #0
   1438e:	db11      	blt.n	143b4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   14390:	f997 300f 	ldrsb.w	r3, [r7, #15]
   14394:	4a0d      	ldr	r2, [pc, #52]	; (143cc <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
   14396:	5cd3      	ldrb	r3, [r2, r3]
   14398:	2201      	movs	r2, #1
   1439a:	4619      	mov	r1, r3
   1439c:	6878      	ldr	r0, [r7, #4]
   1439e:	4b0a      	ldr	r3, [pc, #40]	; (143c8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   143a0:	4798      	blx	r3
   143a2:	4603      	mov	r3, r0
   143a4:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   143a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
   143aa:	b2db      	uxtb	r3, r3
   143ac:	3b01      	subs	r3, #1
   143ae:	b2db      	uxtb	r3, r3
   143b0:	73fb      	strb	r3, [r7, #15]
   143b2:	e7e9      	b.n	14388 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
   143b4:	6878      	ldr	r0, [r7, #4]
   143b6:	4b06      	ldr	r3, [pc, #24]	; (143d0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
   143b8:	4798      	blx	r3
}
   143ba:	bf00      	nop
   143bc:	3710      	adds	r7, #16
   143be:	46bd      	mov	sp, r7
   143c0:	bd80      	pop	{r7, pc}
   143c2:	bf00      	nop
   143c4:	0001413d 	.word	0x0001413d
   143c8:	0001418d 	.word	0x0001418d
   143cc:	200092e0 	.word	0x200092e0
   143d0:	00014165 	.word	0x00014165

000143d4 <_ZN15Holt_3593_Class9ArincReadEhPh>:
// ------------------------------------------------------
// Fetch the FIFO ARINC data from the desired receiver channel 
//
// ------------------------------------------------------
void Holt_3593_Class::ArincRead(uint8_t source, unsigned char *passedArray)
{
   143d4:	b580      	push	{r7, lr}
   143d6:	b086      	sub	sp, #24
   143d8:	af00      	add	r7, sp, #0
   143da:	60f8      	str	r0, [r7, #12]
   143dc:	460b      	mov	r3, r1
   143de:	607a      	str	r2, [r7, #4]
   143e0:	72fb      	strb	r3, [r7, #11]
   uint8_t dummy, ByteCount, count;
   
   count = 3;                // assume it's a Priority Label Word?
   143e2:	2303      	movs	r3, #3
   143e4:	75bb      	strb	r3, [r7, #22]
   if(source==0xA0 || source == 0xC0){  // is it a normal Word?
   143e6:	7afb      	ldrb	r3, [r7, #11]
   143e8:	2ba0      	cmp	r3, #160	; 0xa0
   143ea:	d002      	beq.n	143f2 <_ZN15Holt_3593_Class9ArincReadEhPh+0x1e>
   143ec:	7afb      	ldrb	r3, [r7, #11]
   143ee:	2bc0      	cmp	r3, #192	; 0xc0
   143f0:	d102      	bne.n	143f8 <_ZN15Holt_3593_Class9ArincReadEhPh+0x24>
       count++;								 // then it has 4 bytes.
   143f2:	7dbb      	ldrb	r3, [r7, #22]
   143f4:	3301      	adds	r3, #1
   143f6:	75bb      	strb	r3, [r7, #22]
	   }                        
  open();
   143f8:	68f8      	ldr	r0, [r7, #12]
   143fa:	4b11      	ldr	r3, [pc, #68]	; (14440 <_ZN15Holt_3593_Class9ArincReadEhPh+0x6c>)
   143fc:	4798      	blx	r3
  // dummy = Get_Byte();                   // clear SPI status register    
   Send_Byte(source) ;                  // source command to read FIFO data
   143fe:	7afb      	ldrb	r3, [r7, #11]
   14400:	4619      	mov	r1, r3
   14402:	68f8      	ldr	r0, [r7, #12]
   14404:	4b0f      	ldr	r3, [pc, #60]	; (14444 <_ZN15Holt_3593_Class9ArincReadEhPh+0x70>)
   14406:	4798      	blx	r3
   
 //  dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   14408:	2300      	movs	r3, #0
   1440a:	75fb      	strb	r3, [r7, #23]
   1440c:	7dfa      	ldrb	r2, [r7, #23]
   1440e:	7dbb      	ldrb	r3, [r7, #22]
   14410:	429a      	cmp	r2, r3
   14412:	da0d      	bge.n	14430 <_ZN15Holt_3593_Class9ArincReadEhPh+0x5c>
      dummy = Get_Byte(); 
   14414:	68f8      	ldr	r0, [r7, #12]
   14416:	4b0c      	ldr	r3, [pc, #48]	; (14448 <_ZN15Holt_3593_Class9ArincReadEhPh+0x74>)
   14418:	4798      	blx	r3
   1441a:	4603      	mov	r3, r0
   1441c:	757b      	strb	r3, [r7, #21]
      passedArray[ByteCount] = dummy; 
   1441e:	7dfb      	ldrb	r3, [r7, #23]
   14420:	687a      	ldr	r2, [r7, #4]
   14422:	4413      	add	r3, r2
   14424:	7d7a      	ldrb	r2, [r7, #21]
   14426:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   14428:	7dfb      	ldrb	r3, [r7, #23]
   1442a:	3301      	adds	r3, #1
   1442c:	75fb      	strb	r3, [r7, #23]
   1442e:	e7ed      	b.n	1440c <_ZN15Holt_3593_Class9ArincReadEhPh+0x38>
     }

  close();
   14430:	68f8      	ldr	r0, [r7, #12]
   14432:	4b06      	ldr	r3, [pc, #24]	; (1444c <_ZN15Holt_3593_Class9ArincReadEhPh+0x78>)
   14434:	4798      	blx	r3
  
}
   14436:	bf00      	nop
   14438:	3718      	adds	r7, #24
   1443a:	46bd      	mov	sp, r7
   1443c:	bd80      	pop	{r7, pc}
   1443e:	bf00      	nop
   14440:	0001413d 	.word	0x0001413d
   14444:	000142bd 	.word	0x000142bd
   14448:	00014315 	.word	0x00014315
   1444c:	00014165 	.word	0x00014165

00014450 <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   14450:	b580      	push	{r7, lr}
   14452:	b084      	sub	sp, #16
   14454:	af00      	add	r7, sp, #0
   14456:	6078      	str	r0, [r7, #4]
   14458:	460b      	mov	r3, r1
   1445a:	70fb      	strb	r3, [r7, #3]
   1445c:	4613      	mov	r3, r2
   1445e:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   14460:	78fb      	ldrb	r3, [r7, #3]
   14462:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   14464:	7bfb      	ldrb	r3, [r7, #15]
   14466:	4619      	mov	r1, r3
   14468:	6878      	ldr	r0, [r7, #4]
   1446a:	4b0b      	ldr	r3, [pc, #44]	; (14498 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
   1446c:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   1446e:	78bb      	ldrb	r3, [r7, #2]
   14470:	2b00      	cmp	r3, #0
   14472:	d00a      	beq.n	1448a <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.IsSPIReady());      
   14474:	687b      	ldr	r3, [r7, #4]
   14476:	4618      	mov	r0, r3
   14478:	4b08      	ldr	r3, [pc, #32]	; (1449c <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
   1447a:	4798      	blx	r3
   1447c:	4603      	mov	r3, r0
   1447e:	f083 0301 	eor.w	r3, r3, #1
   14482:	b2db      	uxtb	r3, r3
   14484:	2b00      	cmp	r3, #0
   14486:	d000      	beq.n	1448a <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
   14488:	e7f4      	b.n	14474 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
   1448a:	78fb      	ldrb	r3, [r7, #3]
   1448c:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
   1448e:	7bbb      	ldrb	r3, [r7, #14]
  
 }
   14490:	4618      	mov	r0, r3
   14492:	3710      	adds	r7, #16
   14494:	46bd      	mov	sp, r7
   14496:	bd80      	pop	{r7, pc}
   14498:	000142bd 	.word	0x000142bd
   1449c:	00016211 	.word	0x00016211

000144a0 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
   144a0:	b580      	push	{r7, lr}
   144a2:	b084      	sub	sp, #16
   144a4:	af00      	add	r7, sp, #0
   144a6:	60f8      	str	r0, [r7, #12]
   144a8:	460b      	mov	r3, r1
   144aa:	607a      	str	r2, [r7, #4]
   144ac:	72fb      	strb	r3, [r7, #11]
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
   144ae:	68f8      	ldr	r0, [r7, #12]
   144b0:	4b20      	ldr	r3, [pc, #128]	; (14534 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x94>)
   144b2:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
   144b4:	4b20      	ldr	r3, [pc, #128]	; (14538 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   144b6:	2204      	movs	r2, #4
   144b8:	701a      	strb	r2, [r3, #0]
   if(cmd==W_PL1Match || cmd==W_PL2Match){       // if writing PL Match registers send only 3 bytes
   144ba:	7afb      	ldrb	r3, [r7, #11]
   144bc:	2b18      	cmp	r3, #24
   144be:	d002      	beq.n	144c6 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x26>
   144c0:	7afb      	ldrb	r3, [r7, #11]
   144c2:	2b2c      	cmp	r3, #44	; 0x2c
   144c4:	d105      	bne.n	144d2 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x32>
      transmitCount--;
   144c6:	4b1c      	ldr	r3, [pc, #112]	; (14538 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   144c8:	781b      	ldrb	r3, [r3, #0]
   144ca:	3b01      	subs	r3, #1
   144cc:	b2da      	uxtb	r2, r3
   144ce:	4b1a      	ldr	r3, [pc, #104]	; (14538 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   144d0:	701a      	strb	r2, [r3, #0]
   }
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
   144d2:	7afb      	ldrb	r3, [r7, #11]
   144d4:	2201      	movs	r2, #1
   144d6:	4619      	mov	r1, r3
   144d8:	68f8      	ldr	r0, [r7, #12]
   144da:	4b18      	ldr	r3, [pc, #96]	; (1453c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   144dc:	4798      	blx	r3
   144de:	4603      	mov	r3, r0
   144e0:	461a      	mov	r2, r3
   144e2:	4b17      	ldr	r3, [pc, #92]	; (14540 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   144e4:	701a      	strb	r2, [r3, #0]

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   144e6:	4b17      	ldr	r3, [pc, #92]	; (14544 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   144e8:	2200      	movs	r2, #0
   144ea:	701a      	strb	r2, [r3, #0]
   144ec:	4b15      	ldr	r3, [pc, #84]	; (14544 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   144ee:	781b      	ldrb	r3, [r3, #0]
   144f0:	461a      	mov	r2, r3
   144f2:	4b11      	ldr	r3, [pc, #68]	; (14538 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   144f4:	781b      	ldrb	r3, [r3, #0]
   144f6:	429a      	cmp	r2, r3
   144f8:	da15      	bge.n	14526 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x86>
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
   144fa:	4b12      	ldr	r3, [pc, #72]	; (14544 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   144fc:	781b      	ldrb	r3, [r3, #0]
   144fe:	461a      	mov	r2, r3
   14500:	687b      	ldr	r3, [r7, #4]
   14502:	4413      	add	r3, r2
   14504:	781b      	ldrb	r3, [r3, #0]
   14506:	2201      	movs	r2, #1
   14508:	4619      	mov	r1, r3
   1450a:	68f8      	ldr	r0, [r7, #12]
   1450c:	4b0b      	ldr	r3, [pc, #44]	; (1453c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   1450e:	4798      	blx	r3
   14510:	4603      	mov	r3, r0
   14512:	461a      	mov	r2, r3
   14514:	4b0a      	ldr	r3, [pc, #40]	; (14540 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   14516:	701a      	strb	r2, [r3, #0]
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   14518:	4b0a      	ldr	r3, [pc, #40]	; (14544 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   1451a:	781b      	ldrb	r3, [r3, #0]
   1451c:	3301      	adds	r3, #1
   1451e:	b2da      	uxtb	r2, r3
   14520:	4b08      	ldr	r3, [pc, #32]	; (14544 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   14522:	701a      	strb	r2, [r3, #0]
   14524:	e7e2      	b.n	144ec <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x4c>
      }   
 close();
   14526:	68f8      	ldr	r0, [r7, #12]
   14528:	4b07      	ldr	r3, [pc, #28]	; (14548 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa8>)
   1452a:	4798      	blx	r3
}
   1452c:	bf00      	nop
   1452e:	3710      	adds	r7, #16
   14530:	46bd      	mov	sp, r7
   14532:	bd80      	pop	{r7, pc}
   14534:	0001413d 	.word	0x0001413d
   14538:	20009305 	.word	0x20009305
   1453c:	00014451 	.word	0x00014451
   14540:	20009304 	.word	0x20009304
   14544:	20009303 	.word	0x20009303
   14548:	00014165 	.word	0x00014165

0001454c <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   1454c:	b580      	push	{r7, lr}
   1454e:	b084      	sub	sp, #16
   14550:	af00      	add	r7, sp, #0
   14552:	6078      	str	r0, [r7, #4]
   14554:	460b      	mov	r3, r1
   14556:	70fb      	strb	r3, [r7, #3]

 	  uint8_t p(cmd); 
   14558:	78fb      	ldrb	r3, [r7, #3]
   1455a:	73fb      	strb	r3, [r7, #15]
  open();
   1455c:	6878      	ldr	r0, [r7, #4]
   1455e:	4b0c      	ldr	r3, [pc, #48]	; (14590 <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
   14560:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   14562:	7bfb      	ldrb	r3, [r7, #15]
   14564:	4619      	mov	r1, r3
   14566:	6878      	ldr	r0, [r7, #4]
   14568:	4b0a      	ldr	r3, [pc, #40]	; (14594 <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
   1456a:	4798      	blx	r3
  while (!spi.IsSPIReady()) {;}      // Wait for data to come back in.
   1456c:	687b      	ldr	r3, [r7, #4]
   1456e:	4618      	mov	r0, r3
   14570:	4b09      	ldr	r3, [pc, #36]	; (14598 <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
   14572:	4798      	blx	r3
   14574:	4603      	mov	r3, r0
   14576:	f083 0301 	eor.w	r3, r3, #1
   1457a:	b2db      	uxtb	r3, r3
   1457c:	2b00      	cmp	r3, #0
   1457e:	d000      	beq.n	14582 <_ZN15Holt_3593_Class9W_CommandEc+0x36>
   14580:	e7f4      	b.n	1456c <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   14582:	6878      	ldr	r0, [r7, #4]
   14584:	4b05      	ldr	r3, [pc, #20]	; (1459c <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
   14586:	4798      	blx	r3
}
   14588:	bf00      	nop
   1458a:	3710      	adds	r7, #16
   1458c:	46bd      	mov	sp, r7
   1458e:	bd80      	pop	{r7, pc}
   14590:	0001413d 	.word	0x0001413d
   14594:	000142bd 	.word	0x000142bd
   14598:	00016211 	.word	0x00016211
   1459c:	00014165 	.word	0x00014165

000145a0 <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   145a0:	b580      	push	{r7, lr}
   145a2:	b082      	sub	sp, #8
   145a4:	af00      	add	r7, sp, #0
   145a6:	6078      	str	r0, [r7, #4]
   145a8:	460b      	mov	r3, r1
   145aa:	70fb      	strb	r3, [r7, #3]
   145ac:	4613      	mov	r3, r2
   145ae:	70bb      	strb	r3, [r7, #2]

  	
  open();                             // assert the SPI0 /SS strobe
   145b0:	6878      	ldr	r0, [r7, #4]
   145b2:	4b14      	ldr	r3, [pc, #80]	; (14604 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
   145b4:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   145b6:	78fb      	ldrb	r3, [r7, #3]
   145b8:	4619      	mov	r1, r3
   145ba:	6878      	ldr	r0, [r7, #4]
   145bc:	4b12      	ldr	r3, [pc, #72]	; (14608 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   145be:	4798      	blx	r3
  while (!spi.IsSPIReady());    
   145c0:	687b      	ldr	r3, [r7, #4]
   145c2:	4618      	mov	r0, r3
   145c4:	4b11      	ldr	r3, [pc, #68]	; (1460c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   145c6:	4798      	blx	r3
   145c8:	4603      	mov	r3, r0
   145ca:	f083 0301 	eor.w	r3, r3, #1
   145ce:	b2db      	uxtb	r3, r3
   145d0:	2b00      	cmp	r3, #0
   145d2:	d000      	beq.n	145d6 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
   145d4:	e7f4      	b.n	145c0 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   145d6:	78bb      	ldrb	r3, [r7, #2]
   145d8:	4619      	mov	r1, r3
   145da:	6878      	ldr	r0, [r7, #4]
   145dc:	4b0a      	ldr	r3, [pc, #40]	; (14608 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   145de:	4798      	blx	r3
  while (!spi.IsSPIReady());    
   145e0:	687b      	ldr	r3, [r7, #4]
   145e2:	4618      	mov	r0, r3
   145e4:	4b09      	ldr	r3, [pc, #36]	; (1460c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   145e6:	4798      	blx	r3
   145e8:	4603      	mov	r3, r0
   145ea:	f083 0301 	eor.w	r3, r3, #1
   145ee:	b2db      	uxtb	r3, r3
   145f0:	2b00      	cmp	r3, #0
   145f2:	d000      	beq.n	145f6 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
   145f4:	e7f4      	b.n	145e0 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   145f6:	6878      	ldr	r0, [r7, #4]
   145f8:	4b05      	ldr	r3, [pc, #20]	; (14610 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
   145fa:	4798      	blx	r3
}
   145fc:	bf00      	nop
   145fe:	3708      	adds	r7, #8
   14600:	46bd      	mov	sp, r7
   14602:	bd80      	pop	{r7, pc}
   14604:	0001413d 	.word	0x0001413d
   14608:	000142bd 	.word	0x000142bd
   1460c:	00016211 	.word	0x00016211
   14610:	00014165 	.word	0x00014165

00014614 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   14614:	b580      	push	{r7, lr}
   14616:	b084      	sub	sp, #16
   14618:	af00      	add	r7, sp, #0
   1461a:	6078      	str	r0, [r7, #4]
   1461c:	460b      	mov	r3, r1
   1461e:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
   14620:	6878      	ldr	r0, [r7, #4]
   14622:	4b0a      	ldr	r3, [pc, #40]	; (1464c <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
   14624:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   14626:	78fb      	ldrb	r3, [r7, #3]
   14628:	2201      	movs	r2, #1
   1462a:	4619      	mov	r1, r3
   1462c:	6878      	ldr	r0, [r7, #4]
   1462e:	4b08      	ldr	r3, [pc, #32]	; (14650 <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
   14630:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   14632:	6878      	ldr	r0, [r7, #4]
   14634:	4b07      	ldr	r3, [pc, #28]	; (14654 <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
   14636:	4798      	blx	r3
   14638:	4603      	mov	r3, r0
   1463a:	73fb      	strb	r3, [r7, #15]
         
  close();
   1463c:	6878      	ldr	r0, [r7, #4]
   1463e:	4b06      	ldr	r3, [pc, #24]	; (14658 <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
   14640:	4798      	blx	r3
  return R_Reg;
   14642:	7bfb      	ldrb	r3, [r7, #15]
}
   14644:	4618      	mov	r0, r3
   14646:	3710      	adds	r7, #16
   14648:	46bd      	mov	sp, r7
   1464a:	bd80      	pop	{r7, pc}
   1464c:	0001413d 	.word	0x0001413d
   14650:	00014451 	.word	0x00014451
   14654:	00014315 	.word	0x00014315
   14658:	00014165 	.word	0x00014165

0001465c <_ZN15Holt_3593_Class6SS_LowEv>:
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
  } 

void Holt_3593_Class::SS_Low(void)
{
   1465c:	b580      	push	{r7, lr}
   1465e:	b082      	sub	sp, #8
   14660:	af00      	add	r7, sp, #0
   14662:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
   14664:	2100      	movs	r1, #0
   14666:	204e      	movs	r0, #78	; 0x4e
   14668:	4b02      	ldr	r3, [pc, #8]	; (14674 <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
   1466a:	4798      	blx	r3
}
   1466c:	bf00      	nop
   1466e:	3708      	adds	r7, #8
   14670:	46bd      	mov	sp, r7
   14672:	bd80      	pop	{r7, pc}
   14674:	00013f55 	.word	0x00013f55

00014678 <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
   14678:	b580      	push	{r7, lr}
   1467a:	b082      	sub	sp, #8
   1467c:	af00      	add	r7, sp, #0
   1467e:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
   14680:	2101      	movs	r1, #1
   14682:	204e      	movs	r0, #78	; 0x4e
   14684:	4b02      	ldr	r3, [pc, #8]	; (14690 <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
   14686:	4798      	blx	r3
}
   14688:	bf00      	nop
   1468a:	3708      	adds	r7, #8
   1468c:	46bd      	mov	sp, r7
   1468e:	bd80      	pop	{r7, pc}
   14690:	00013f55 	.word	0x00013f55

00014694 <_ZN14Protocol_ClassD2Ev>:
#include "Protocol_Class.h"
#include "stdlib.h"
#include "math.h"

// virtual destructor
Protocol_Class::~Protocol_Class()
   14694:	b480      	push	{r7}
   14696:	b083      	sub	sp, #12
   14698:	af00      	add	r7, sp, #0
   1469a:	6078      	str	r0, [r7, #4]
   1469c:	6039      	str	r1, [r7, #0]
   1469e:	683b      	ldr	r3, [r7, #0]
   146a0:	681a      	ldr	r2, [r3, #0]
   146a2:	687b      	ldr	r3, [r7, #4]
   146a4:	601a      	str	r2, [r3, #0]
   146a6:	687b      	ldr	r3, [r7, #4]
   146a8:	681b      	ldr	r3, [r3, #0]
   146aa:	3b0c      	subs	r3, #12
   146ac:	681b      	ldr	r3, [r3, #0]
   146ae:	461a      	mov	r2, r3
   146b0:	687b      	ldr	r3, [r7, #4]
   146b2:	4413      	add	r3, r2
   146b4:	683a      	ldr	r2, [r7, #0]
   146b6:	6852      	ldr	r2, [r2, #4]
   146b8:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
   146ba:	687b      	ldr	r3, [r7, #4]
   146bc:	4618      	mov	r0, r3
   146be:	370c      	adds	r7, #12
   146c0:	46bd      	mov	sp, r7
   146c2:	bc80      	pop	{r7}
   146c4:	4770      	bx	lr

000146c6 <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   146c6:	b590      	push	{r4, r7, lr}
   146c8:	b085      	sub	sp, #20
   146ca:	af00      	add	r7, sp, #0
   146cc:	6078      	str	r0, [r7, #4]
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   146ce:	687b      	ldr	r3, [r7, #4]
   146d0:	681b      	ldr	r3, [r3, #0]
   146d2:	3308      	adds	r3, #8
   146d4:	681c      	ldr	r4, [r3, #0]
   146d6:	687b      	ldr	r3, [r7, #4]
   146d8:	681b      	ldr	r3, [r3, #0]
   146da:	3b0c      	subs	r3, #12
   146dc:	681b      	ldr	r3, [r3, #0]
   146de:	461a      	mov	r2, r3
   146e0:	687b      	ldr	r3, [r7, #4]
   146e2:	4413      	add	r3, r2
   146e4:	681b      	ldr	r3, [r3, #0]
   146e6:	3304      	adds	r3, #4
   146e8:	681b      	ldr	r3, [r3, #0]
   146ea:	687a      	ldr	r2, [r7, #4]
   146ec:	6812      	ldr	r2, [r2, #0]
   146ee:	3a0c      	subs	r2, #12
   146f0:	6812      	ldr	r2, [r2, #0]
   146f2:	4611      	mov	r1, r2
   146f4:	687a      	ldr	r2, [r7, #4]
   146f6:	440a      	add	r2, r1
   146f8:	f44f 7187 	mov.w	r1, #270	; 0x10e
   146fc:	4610      	mov	r0, r2
   146fe:	4798      	blx	r3
   14700:	4603      	mov	r3, r0
   14702:	4619      	mov	r1, r3
   14704:	6878      	ldr	r0, [r7, #4]
   14706:	47a0      	blx	r4
   14708:	60f8      	str	r0, [r7, #12]
	uint8_t	key=uint8_t((data&0xc0000)>>18);
   1470a:	68fb      	ldr	r3, [r7, #12]
   1470c:	0c9b      	lsrs	r3, r3, #18
   1470e:	b2db      	uxtb	r3, r3
   14710:	f003 0303 	and.w	r3, r3, #3
   14714:	72fb      	strb	r3, [r7, #11]

	return key;
   14716:	7afb      	ldrb	r3, [r7, #11]
}
   14718:	4618      	mov	r0, r3
   1471a:	3714      	adds	r7, #20
   1471c:	46bd      	mov	sp, r7
   1471e:	bd90      	pop	{r4, r7, pc}

00014720 <_ZN14Protocol_Class12MakeLabel374Emf>:
	data=(0x1ffffc00&d)>>10;
	datagram.bit.dataField=data;

	return	data;
}
uint32_t Protocol_Class::MakeLabel374(uint32_t d,float v){
   14720:	b580      	push	{r7, lr}
   14722:	b084      	sub	sp, #16
   14724:	af00      	add	r7, sp, #0
   14726:	60f8      	str	r0, [r7, #12]
   14728:	60b9      	str	r1, [r7, #8]
   1472a:	607a      	str	r2, [r7, #4]
	value=d<<12;
   1472c:	68bb      	ldr	r3, [r7, #8]
   1472e:	031a      	lsls	r2, r3, #12
   14730:	68fb      	ldr	r3, [r7, #12]
   14732:	60da      	str	r2, [r3, #12]
	label=Label2Byte(374);
   14734:	68fb      	ldr	r3, [r7, #12]
   14736:	681b      	ldr	r3, [r3, #0]
   14738:	3b0c      	subs	r3, #12
   1473a:	681b      	ldr	r3, [r3, #0]
   1473c:	461a      	mov	r2, r3
   1473e:	68fb      	ldr	r3, [r7, #12]
   14740:	4413      	add	r3, r2
   14742:	681b      	ldr	r3, [r3, #0]
   14744:	3304      	adds	r3, #4
   14746:	681b      	ldr	r3, [r3, #0]
   14748:	68fa      	ldr	r2, [r7, #12]
   1474a:	6812      	ldr	r2, [r2, #0]
   1474c:	3a0c      	subs	r2, #12
   1474e:	6812      	ldr	r2, [r2, #0]
   14750:	4611      	mov	r1, r2
   14752:	68fa      	ldr	r2, [r7, #12]
   14754:	440a      	add	r2, r1
   14756:	f44f 71bb 	mov.w	r1, #374	; 0x176
   1475a:	4610      	mov	r0, r2
   1475c:	4798      	blx	r3
   1475e:	4603      	mov	r3, r0
   14760:	461a      	mov	r2, r3
   14762:	68fb      	ldr	r3, [r7, #12]
   14764:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   14766:	68fb      	ldr	r3, [r7, #12]
   14768:	68db      	ldr	r3, [r3, #12]
   1476a:	68fa      	ldr	r2, [r7, #12]
   1476c:	7c12      	ldrb	r2, [r2, #16]
   1476e:	431a      	orrs	r2, r3
   14770:	68fb      	ldr	r3, [r7, #12]
   14772:	60da      	str	r2, [r3, #12]
	if (v<0)
   14774:	4b0e      	ldr	r3, [pc, #56]	; (147b0 <_ZN14Protocol_Class12MakeLabel374Emf+0x90>)
   14776:	f04f 0100 	mov.w	r1, #0
   1477a:	6878      	ldr	r0, [r7, #4]
   1477c:	4798      	blx	r3
   1477e:	4603      	mov	r3, r0
   14780:	2b00      	cmp	r3, #0
   14782:	d005      	beq.n	14790 <_ZN14Protocol_Class12MakeLabel374Emf+0x70>
	{
		value|=0x1<<28;
   14784:	68fb      	ldr	r3, [r7, #12]
   14786:	68db      	ldr	r3, [r3, #12]
   14788:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
   1478c:	68fb      	ldr	r3, [r7, #12]
   1478e:	60da      	str	r2, [r3, #12]
	}
	value=MakeEvenParity(value);
   14790:	68fb      	ldr	r3, [r7, #12]
   14792:	68db      	ldr	r3, [r3, #12]
   14794:	4619      	mov	r1, r3
   14796:	68f8      	ldr	r0, [r7, #12]
   14798:	4b06      	ldr	r3, [pc, #24]	; (147b4 <_ZN14Protocol_Class12MakeLabel374Emf+0x94>)
   1479a:	4798      	blx	r3
   1479c:	4602      	mov	r2, r0
   1479e:	68fb      	ldr	r3, [r7, #12]
   147a0:	60da      	str	r2, [r3, #12]
	return value;
   147a2:	68fb      	ldr	r3, [r7, #12]
   147a4:	68db      	ldr	r3, [r3, #12]
	
}
   147a6:	4618      	mov	r0, r3
   147a8:	3710      	adds	r7, #16
   147aa:	46bd      	mov	sp, r7
   147ac:	bd80      	pop	{r7, pc}
   147ae:	bf00      	nop
   147b0:	0001bdfd 	.word	0x0001bdfd
   147b4:	000148a5 	.word	0x000148a5

000147b8 <_ZN14Protocol_Class14MakeTXLabel275Eh>:
uint32_t Protocol_Class::MakeTXLabel275(uint8_t d){
   147b8:	b580      	push	{r7, lr}
   147ba:	b082      	sub	sp, #8
   147bc:	af00      	add	r7, sp, #0
   147be:	6078      	str	r0, [r7, #4]
   147c0:	460b      	mov	r3, r1
   147c2:	70fb      	strb	r3, [r7, #3]
	value=((uint32_t)d)<<10;
   147c4:	78fb      	ldrb	r3, [r7, #3]
   147c6:	029a      	lsls	r2, r3, #10
   147c8:	687b      	ldr	r3, [r7, #4]
   147ca:	60da      	str	r2, [r3, #12]
	label=Label2Byte(275);
   147cc:	687b      	ldr	r3, [r7, #4]
   147ce:	681b      	ldr	r3, [r3, #0]
   147d0:	3b0c      	subs	r3, #12
   147d2:	681b      	ldr	r3, [r3, #0]
   147d4:	461a      	mov	r2, r3
   147d6:	687b      	ldr	r3, [r7, #4]
   147d8:	4413      	add	r3, r2
   147da:	681b      	ldr	r3, [r3, #0]
   147dc:	3304      	adds	r3, #4
   147de:	681b      	ldr	r3, [r3, #0]
   147e0:	687a      	ldr	r2, [r7, #4]
   147e2:	6812      	ldr	r2, [r2, #0]
   147e4:	3a0c      	subs	r2, #12
   147e6:	6812      	ldr	r2, [r2, #0]
   147e8:	4611      	mov	r1, r2
   147ea:	687a      	ldr	r2, [r7, #4]
   147ec:	440a      	add	r2, r1
   147ee:	f240 1113 	movw	r1, #275	; 0x113
   147f2:	4610      	mov	r0, r2
   147f4:	4798      	blx	r3
   147f6:	4603      	mov	r3, r0
   147f8:	461a      	mov	r2, r3
   147fa:	687b      	ldr	r3, [r7, #4]
   147fc:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   147fe:	687b      	ldr	r3, [r7, #4]
   14800:	68db      	ldr	r3, [r3, #12]
   14802:	687a      	ldr	r2, [r7, #4]
   14804:	7c12      	ldrb	r2, [r2, #16]
   14806:	431a      	orrs	r2, r3
   14808:	687b      	ldr	r3, [r7, #4]
   1480a:	60da      	str	r2, [r3, #12]

	value=MakeEvenParity(value);
   1480c:	687b      	ldr	r3, [r7, #4]
   1480e:	68db      	ldr	r3, [r3, #12]
   14810:	4619      	mov	r1, r3
   14812:	6878      	ldr	r0, [r7, #4]
   14814:	4b05      	ldr	r3, [pc, #20]	; (1482c <_ZN14Protocol_Class14MakeTXLabel275Eh+0x74>)
   14816:	4798      	blx	r3
   14818:	4602      	mov	r2, r0
   1481a:	687b      	ldr	r3, [r7, #4]
   1481c:	60da      	str	r2, [r3, #12]
	return value;
   1481e:	687b      	ldr	r3, [r7, #4]
   14820:	68db      	ldr	r3, [r3, #12]
	
}
   14822:	4618      	mov	r0, r3
   14824:	3708      	adds	r7, #8
   14826:	46bd      	mov	sp, r7
   14828:	bd80      	pop	{r7, pc}
   1482a:	bf00      	nop
   1482c:	000148a5 	.word	0x000148a5

00014830 <_ZN14Protocol_Class12MakeLabel270Em>:
uint32_t Protocol_Class::MakeLabel270(uint32_t d){
   14830:	b580      	push	{r7, lr}
   14832:	b082      	sub	sp, #8
   14834:	af00      	add	r7, sp, #0
   14836:	6078      	str	r0, [r7, #4]
   14838:	6039      	str	r1, [r7, #0]
	
	value=d<<10;
   1483a:	683b      	ldr	r3, [r7, #0]
   1483c:	029a      	lsls	r2, r3, #10
   1483e:	687b      	ldr	r3, [r7, #4]
   14840:	60da      	str	r2, [r3, #12]
	label=Label2Byte(270);
   14842:	687b      	ldr	r3, [r7, #4]
   14844:	681b      	ldr	r3, [r3, #0]
   14846:	3b0c      	subs	r3, #12
   14848:	681b      	ldr	r3, [r3, #0]
   1484a:	461a      	mov	r2, r3
   1484c:	687b      	ldr	r3, [r7, #4]
   1484e:	4413      	add	r3, r2
   14850:	681b      	ldr	r3, [r3, #0]
   14852:	3304      	adds	r3, #4
   14854:	681b      	ldr	r3, [r3, #0]
   14856:	687a      	ldr	r2, [r7, #4]
   14858:	6812      	ldr	r2, [r2, #0]
   1485a:	3a0c      	subs	r2, #12
   1485c:	6812      	ldr	r2, [r2, #0]
   1485e:	4611      	mov	r1, r2
   14860:	687a      	ldr	r2, [r7, #4]
   14862:	440a      	add	r2, r1
   14864:	f44f 7187 	mov.w	r1, #270	; 0x10e
   14868:	4610      	mov	r0, r2
   1486a:	4798      	blx	r3
   1486c:	4603      	mov	r3, r0
   1486e:	461a      	mov	r2, r3
   14870:	687b      	ldr	r3, [r7, #4]
   14872:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   14874:	687b      	ldr	r3, [r7, #4]
   14876:	68db      	ldr	r3, [r3, #12]
   14878:	687a      	ldr	r2, [r7, #4]
   1487a:	7c12      	ldrb	r2, [r2, #16]
   1487c:	431a      	orrs	r2, r3
   1487e:	687b      	ldr	r3, [r7, #4]
   14880:	60da      	str	r2, [r3, #12]
//	value|=(uint32_t)(((uint8_t)WavingValue()))<<19;
	value=MakeEvenParity(value);
   14882:	687b      	ldr	r3, [r7, #4]
   14884:	68db      	ldr	r3, [r3, #12]
   14886:	4619      	mov	r1, r3
   14888:	6878      	ldr	r0, [r7, #4]
   1488a:	4b05      	ldr	r3, [pc, #20]	; (148a0 <_ZN14Protocol_Class12MakeLabel270Em+0x70>)
   1488c:	4798      	blx	r3
   1488e:	4602      	mov	r2, r0
   14890:	687b      	ldr	r3, [r7, #4]
   14892:	60da      	str	r2, [r3, #12]
	return value;
   14894:	687b      	ldr	r3, [r7, #4]
   14896:	68db      	ldr	r3, [r3, #12]
	
}
   14898:	4618      	mov	r0, r3
   1489a:	3708      	adds	r7, #8
   1489c:	46bd      	mov	sp, r7
   1489e:	bd80      	pop	{r7, pc}
   148a0:	000148a5 	.word	0x000148a5

000148a4 <_ZN14Protocol_Class14MakeEvenParityEm>:
uint32_t Protocol_Class::MakeEvenParity(uint32_t data){
   148a4:	b580      	push	{r7, lr}
   148a6:	b082      	sub	sp, #8
   148a8:	af00      	add	r7, sp, #0
   148aa:	6078      	str	r0, [r7, #4]
   148ac:	6039      	str	r1, [r7, #0]
	if (FindParity(data))
   148ae:	687b      	ldr	r3, [r7, #4]
   148b0:	681b      	ldr	r3, [r3, #0]
   148b2:	3b0c      	subs	r3, #12
   148b4:	681b      	ldr	r3, [r3, #0]
   148b6:	461a      	mov	r2, r3
   148b8:	687b      	ldr	r3, [r7, #4]
   148ba:	4413      	add	r3, r2
   148bc:	6839      	ldr	r1, [r7, #0]
   148be:	4618      	mov	r0, r3
   148c0:	4b06      	ldr	r3, [pc, #24]	; (148dc <_ZN14Protocol_Class14MakeEvenParityEm+0x38>)
   148c2:	4798      	blx	r3
   148c4:	4603      	mov	r3, r0
   148c6:	2b00      	cmp	r3, #0
   148c8:	d003      	beq.n	148d2 <_ZN14Protocol_Class14MakeEvenParityEm+0x2e>
	{
		data|=0x01<<31;
   148ca:	683b      	ldr	r3, [r7, #0]
   148cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   148d0:	603b      	str	r3, [r7, #0]
	} 
	else
	{
		
	}
	return data;
   148d2:	683b      	ldr	r3, [r7, #0]
}
   148d4:	4618      	mov	r0, r3
   148d6:	3708      	adds	r7, #8
   148d8:	46bd      	mov	sp, r7
   148da:	bd80      	pop	{r7, pc}
   148dc:	00013319 	.word	0x00013319

000148e0 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   148e0:	b480      	push	{r7}
   148e2:	b083      	sub	sp, #12
   148e4:	af00      	add	r7, sp, #0
   148e6:	6078      	str	r0, [r7, #4]
    return (void *)0;
   148e8:	2300      	movs	r3, #0
	}
   148ea:	4618      	mov	r0, r3
   148ec:	370c      	adds	r7, #12
   148ee:	46bd      	mov	sp, r7
   148f0:	bc80      	pop	{r7}
   148f2:	4770      	bx	lr

000148f4 <free>:
//............................................................................
extern "C" void free(void *)
	{
   148f4:	b480      	push	{r7}
   148f6:	b083      	sub	sp, #12
   148f8:	af00      	add	r7, sp, #0
   148fa:	6078      	str	r0, [r7, #4]
	}
   148fc:	bf00      	nop
   148fe:	370c      	adds	r7, #12
   14900:	46bd      	mov	sp, r7
   14902:	bc80      	pop	{r7}
   14904:	4770      	bx	lr

00014906 <_sbrk>:

extern "C" void *_sbrk (ptrdiff_t)
	{
   14906:	b480      	push	{r7}
   14908:	b083      	sub	sp, #12
   1490a:	af00      	add	r7, sp, #0
   1490c:	6078      	str	r0, [r7, #4]
    return (void *)0;
   1490e:	2300      	movs	r3, #0
	}
   14910:	4618      	mov	r0, r3
   14912:	370c      	adds	r7, #12
   14914:	46bd      	mov	sp, r7
   14916:	bc80      	pop	{r7}
   14918:	4770      	bx	lr

0001491a <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   1491a:	b480      	push	{r7}
   1491c:	af00      	add	r7, sp, #0
		}
   1491e:	bf00      	nop
   14920:	46bd      	mov	sp, r7
   14922:	bc80      	pop	{r7}
   14924:	4770      	bx	lr
	...

00014928 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   14928:	b580      	push	{r7, lr}
   1492a:	b082      	sub	sp, #8
   1492c:	af00      	add	r7, sp, #0
   1492e:	6078      	str	r0, [r7, #4]
	free(p);
   14930:	6878      	ldr	r0, [r7, #4]
   14932:	4b03      	ldr	r3, [pc, #12]	; (14940 <_ZdlPv+0x18>)
   14934:	4798      	blx	r3
	}
   14936:	bf00      	nop
   14938:	3708      	adds	r7, #8
   1493a:	46bd      	mov	sp, r7
   1493c:	bd80      	pop	{r7, pc}
   1493e:	bf00      	nop
   14940:	000148f5 	.word	0x000148f5

00014944 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
   14944:	b480      	push	{r7}
   14946:	b083      	sub	sp, #12
   14948:	af00      	add	r7, sp, #0
   1494a:	6078      	str	r0, [r7, #4]
   1494c:	687b      	ldr	r3, [r7, #4]
   1494e:	4618      	mov	r0, r3
   14950:	370c      	adds	r7, #12
   14952:	46bd      	mov	sp, r7
   14954:	bc80      	pop	{r7}
   14956:	4770      	bx	lr

00014958 <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
   14958:	b480      	push	{r7}
   1495a:	b083      	sub	sp, #12
   1495c:	af00      	add	r7, sp, #0
   1495e:	6078      	str	r0, [r7, #4]
   14960:	687b      	ldr	r3, [r7, #4]
   14962:	4618      	mov	r0, r3
   14964:	370c      	adds	r7, #12
   14966:	46bd      	mov	sp, r7
   14968:	bc80      	pop	{r7}
   1496a:	4770      	bx	lr

0001496c <_ZN11Diagnostics12troubleshootEhb>:
#include "diagnostics.h"
#include "CDC_Class.h"


//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
   1496c:	b580      	push	{r7, lr}
   1496e:	b084      	sub	sp, #16
   14970:	af00      	add	r7, sp, #0
   14972:	6078      	str	r0, [r7, #4]
   14974:	460b      	mov	r3, r1
   14976:	70fb      	strb	r3, [r7, #3]
   14978:	4613      	mov	r3, r2
   1497a:	70bb      	strb	r3, [r7, #2]
  bool _printoverride;
  errorcode = _code;
   1497c:	687b      	ldr	r3, [r7, #4]
   1497e:	78fa      	ldrb	r2, [r7, #3]
   14980:	701a      	strb	r2, [r3, #0]
  _printoverride = true;
#elif defined (RUNDIAGNOSTIC) && defined (ARDUINO_ARCH_AVR)
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
   14982:	78bb      	ldrb	r3, [r7, #2]
   14984:	73fb      	strb	r3, [r7, #15]
#endif
  if (_printoverride) {
   14986:	7bfb      	ldrb	r3, [r7, #15]
   14988:	2b00      	cmp	r3, #0
   1498a:	f000 80ba 	beq.w	14b02 <_ZN11Diagnostics12troubleshootEhb+0x196>
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
   1498e:	78fb      	ldrb	r3, [r7, #3]
   14990:	2b14      	cmp	r3, #20
   14992:	f200 80a2 	bhi.w	14ada <_ZN11Diagnostics12troubleshootEhb+0x16e>
   14996:	a201      	add	r2, pc, #4	; (adr r2, 1499c <_ZN11Diagnostics12troubleshootEhb+0x30>)
   14998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1499c:	000149f1 	.word	0x000149f1
   149a0:	00014a05 	.word	0x00014a05
   149a4:	00014a0f 	.word	0x00014a0f
   149a8:	00014a19 	.word	0x00014a19
   149ac:	00014a23 	.word	0x00014a23
   149b0:	00014a35 	.word	0x00014a35
   149b4:	00014a3f 	.word	0x00014a3f
   149b8:	00014a51 	.word	0x00014a51
   149bc:	00014a63 	.word	0x00014a63
   149c0:	00014a77 	.word	0x00014a77
   149c4:	00014a81 	.word	0x00014a81
   149c8:	000149fb 	.word	0x000149fb
   149cc:	00014a6d 	.word	0x00014a6d
   149d0:	00014a8b 	.word	0x00014a8b
   149d4:	00014a95 	.word	0x00014a95
   149d8:	00014a9f 	.word	0x00014a9f
   149dc:	00014aa9 	.word	0x00014aa9
   149e0:	00014ab3 	.word	0x00014ab3
   149e4:	00014abd 	.word	0x00014abd
   149e8:	00014ac7 	.word	0x00014ac7
   149ec:	00014ad1 	.word	0x00014ad1
      case SUCCESS:
      usb.println(F("Function executed successfully"));
   149f0:	4946      	ldr	r1, [pc, #280]	; (14b0c <_ZN11Diagnostics12troubleshootEhb+0x1a0>)
   149f2:	4847      	ldr	r0, [pc, #284]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   149f4:	4b47      	ldr	r3, [pc, #284]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   149f6:	4798      	blx	r3
      break;
   149f8:	e074      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NORESPONSE:
      usb.println(F("Check your wiring. Flash chip is non-responsive."));
   149fa:	4947      	ldr	r1, [pc, #284]	; (14b18 <_ZN11Diagnostics12troubleshootEhb+0x1ac>)
   149fc:	4844      	ldr	r0, [pc, #272]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   149fe:	4b45      	ldr	r3, [pc, #276]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a00:	4798      	blx	r3
      break;
   14a02:	e06f      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CALLBEGIN:
      usb.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
   14a04:	4945      	ldr	r1, [pc, #276]	; (14b1c <_ZN11Diagnostics12troubleshootEhb+0x1b0>)
   14a06:	4842      	ldr	r0, [pc, #264]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a08:	4b42      	ldr	r3, [pc, #264]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a0a:	4798      	blx	r3
      break;
   14a0c:	e06a      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCHIP:
      usb.println(F("Unable to identify chip. Are you sure this chip is supported?"));
   14a0e:	4944      	ldr	r1, [pc, #272]	; (14b20 <_ZN11Diagnostics12troubleshootEhb+0x1b4>)
   14a10:	483f      	ldr	r0, [pc, #252]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a12:	4b40      	ldr	r3, [pc, #256]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a14:	4798      	blx	r3
      //usb.println(F("Chip details:"));
      //TODO: Insert a diagnostics subroutine here.
      break;
   14a16:	e065      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCAP:
      usb.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
   14a18:	4942      	ldr	r1, [pc, #264]	; (14b24 <_ZN11Diagnostics12troubleshootEhb+0x1b8>)
   14a1a:	483d      	ldr	r0, [pc, #244]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a1c:	4b3d      	ldr	r3, [pc, #244]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a1e:	4798      	blx	r3
      break;
   14a20:	e060      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPBUSY:
      usb.println(F("Chip is busy."));
   14a22:	4941      	ldr	r1, [pc, #260]	; (14b28 <_ZN11Diagnostics12troubleshootEhb+0x1bc>)
   14a24:	483a      	ldr	r0, [pc, #232]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a26:	4b3b      	ldr	r3, [pc, #236]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a28:	4798      	blx	r3
      usb.println(F("Make sure all pins have been connected properly"));
   14a2a:	4940      	ldr	r1, [pc, #256]	; (14b2c <_ZN11Diagnostics12troubleshootEhb+0x1c0>)
   14a2c:	4838      	ldr	r0, [pc, #224]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a2e:	4b39      	ldr	r3, [pc, #228]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a30:	4798      	blx	r3
      break;
   14a32:	e057      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case OUTOFBOUNDS:
      usb.println(F("Page overflow has been disabled and the address called exceeds the memory"));
   14a34:	493e      	ldr	r1, [pc, #248]	; (14b30 <_ZN11Diagnostics12troubleshootEhb+0x1c4>)
   14a36:	4836      	ldr	r0, [pc, #216]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a38:	4b36      	ldr	r3, [pc, #216]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a3a:	4798      	blx	r3
      break;
   14a3c:	e052      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CANTENWRITE:
      usb.println(F("Unable to Enable Writing to chip."));
   14a3e:	493d      	ldr	r1, [pc, #244]	; (14b34 <_ZN11Diagnostics12troubleshootEhb+0x1c8>)
   14a40:	4833      	ldr	r0, [pc, #204]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a42:	4b34      	ldr	r3, [pc, #208]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a44:	4798      	blx	r3
      usb.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
   14a46:	493c      	ldr	r1, [pc, #240]	; (14b38 <_ZN11Diagnostics12troubleshootEhb+0x1cc>)
   14a48:	4831      	ldr	r0, [pc, #196]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a4a:	4b32      	ldr	r3, [pc, #200]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a4c:	4798      	blx	r3
      break;
   14a4e:	e049      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case PREVWRITTEN:
      usb.println(F("This sector already contains data."));
   14a50:	493a      	ldr	r1, [pc, #232]	; (14b3c <_ZN11Diagnostics12troubleshootEhb+0x1d0>)
   14a52:	482f      	ldr	r0, [pc, #188]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a54:	4b2f      	ldr	r3, [pc, #188]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a56:	4798      	blx	r3
      usb.println(F("Please make sure the sectors being written to are erased."));
   14a58:	4939      	ldr	r1, [pc, #228]	; (14b40 <_ZN11Diagnostics12troubleshootEhb+0x1d4>)
   14a5a:	482d      	ldr	r0, [pc, #180]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a5c:	4b2d      	ldr	r3, [pc, #180]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a5e:	4798      	blx	r3
      break;
   14a60:	e040      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case LOWRAM:
      usb.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
   14a62:	4938      	ldr	r1, [pc, #224]	; (14b44 <_ZN11Diagnostics12troubleshootEhb+0x1d8>)
   14a64:	482a      	ldr	r0, [pc, #168]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a66:	4b2b      	ldr	r3, [pc, #172]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a68:	4798      	blx	r3
      /*#if defined (ARDUINO_ARCH_SAM)
        usb.print(F("Current Free SRAM: "));
        usb.println(freeRAM());
      #endif*/
      break;
   14a6a:	e03b      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNSUPPORTEDFUNC:
      usb.println(F("This function is not supported by the flash memory hardware."));
   14a6c:	4936      	ldr	r1, [pc, #216]	; (14b48 <_ZN11Diagnostics12troubleshootEhb+0x1dc>)
   14a6e:	4828      	ldr	r0, [pc, #160]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a70:	4b28      	ldr	r3, [pc, #160]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a72:	4798      	blx	r3
      break;
   14a74:	e036      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case SYSSUSPEND:
      usb.println(F("Unable to suspend/resume operation."));
   14a76:	4935      	ldr	r1, [pc, #212]	; (14b4c <_ZN11Diagnostics12troubleshootEhb+0x1e0>)
   14a78:	4825      	ldr	r0, [pc, #148]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a7a:	4b26      	ldr	r3, [pc, #152]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a7c:	4798      	blx	r3
      break;
   14a7e:	e031      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case ERRORCHKFAIL:
      usb.println(F("Write Function has failed errorcheck."));
   14a80:	4933      	ldr	r1, [pc, #204]	; (14b50 <_ZN11Diagnostics12troubleshootEhb+0x1e4>)
   14a82:	4823      	ldr	r0, [pc, #140]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a84:	4b23      	ldr	r3, [pc, #140]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a86:	4798      	blx	r3
      break;
   14a88:	e02c      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO4BYTE:
      usb.println(F("Unable to enable 4-byte addressing."));
   14a8a:	4932      	ldr	r1, [pc, #200]	; (14b54 <_ZN11Diagnostics12troubleshootEhb+0x1e8>)
   14a8c:	4820      	ldr	r0, [pc, #128]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a8e:	4b21      	ldr	r3, [pc, #132]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a90:	4798      	blx	r3
      break;
   14a92:	e027      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO3BYTE:
      usb.println(F("Unable to disable 4-byte addressing."));
   14a94:	4930      	ldr	r1, [pc, #192]	; (14b58 <_ZN11Diagnostics12troubleshootEhb+0x1ec>)
   14a96:	481e      	ldr	r0, [pc, #120]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14a98:	4b1e      	ldr	r3, [pc, #120]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14a9a:	4798      	blx	r3
      break;
   14a9c:	e022      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPISPOWEREDDOWN:
      usb.println(F("The chip is currently powered down."));
   14a9e:	492f      	ldr	r1, [pc, #188]	; (14b5c <_ZN11Diagnostics12troubleshootEhb+0x1f0>)
   14aa0:	481b      	ldr	r0, [pc, #108]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14aa2:	4b1c      	ldr	r3, [pc, #112]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14aa4:	4798      	blx	r3
      break;
   14aa6:	e01d      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDP:
      usb.println(F("The Flash chip does not support SFDP."));
   14aa8:	492d      	ldr	r1, [pc, #180]	; (14b60 <_ZN11Diagnostics12troubleshootEhb+0x1f4>)
   14aaa:	4819      	ldr	r0, [pc, #100]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14aac:	4b19      	ldr	r3, [pc, #100]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14aae:	4798      	blx	r3
      break;
   14ab0:	e018      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASEPARAM:
      usb.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
   14ab2:	492c      	ldr	r1, [pc, #176]	; (14b64 <_ZN11Diagnostics12troubleshootEhb+0x1f8>)
   14ab4:	4816      	ldr	r0, [pc, #88]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14ab6:	4b17      	ldr	r3, [pc, #92]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14ab8:	4798      	blx	r3
      break;
   14aba:	e013      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASETIME:
      usb.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
   14abc:	492a      	ldr	r1, [pc, #168]	; (14b68 <_ZN11Diagnostics12troubleshootEhb+0x1fc>)
   14abe:	4814      	ldr	r0, [pc, #80]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14ac0:	4b14      	ldr	r3, [pc, #80]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14ac2:	4798      	blx	r3
      break;
   14ac4:	e00e      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPPROGRAMTIMEPARAM:
      usb.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
   14ac6:	4929      	ldr	r1, [pc, #164]	; (14b6c <_ZN11Diagnostics12troubleshootEhb+0x200>)
   14ac8:	4811      	ldr	r0, [pc, #68]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14aca:	4b12      	ldr	r3, [pc, #72]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14acc:	4798      	blx	r3
      break;
   14ace:	e009      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOCHIPSELECTDECLARED:
      usb.println(F("No Chip Select pin defined in the custom SPI Array."));
   14ad0:	4927      	ldr	r1, [pc, #156]	; (14b70 <_ZN11Diagnostics12troubleshootEhb+0x204>)
   14ad2:	480f      	ldr	r0, [pc, #60]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14ad4:	4b0f      	ldr	r3, [pc, #60]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14ad6:	4798      	blx	r3
      break;
   14ad8:	e004      	b.n	14ae4 <_ZN11Diagnostics12troubleshootEhb+0x178>

      default:
      usb.println(F("Unknown error"));
   14ada:	4926      	ldr	r1, [pc, #152]	; (14b74 <_ZN11Diagnostics12troubleshootEhb+0x208>)
   14adc:	480c      	ldr	r0, [pc, #48]	; (14b10 <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14ade:	4b0d      	ldr	r3, [pc, #52]	; (14b14 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14ae0:	4798      	blx	r3
      break;
   14ae2:	bf00      	nop
    }
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
   14ae4:	78fb      	ldrb	r3, [r7, #3]
   14ae6:	2b0a      	cmp	r3, #10
   14ae8:	d008      	beq.n	14afc <_ZN11Diagnostics12troubleshootEhb+0x190>
   14aea:	78fb      	ldrb	r3, [r7, #3]
   14aec:	2b06      	cmp	r3, #6
   14aee:	d005      	beq.n	14afc <_ZN11Diagnostics12troubleshootEhb+0x190>
   14af0:	78fb      	ldrb	r3, [r7, #3]
   14af2:	2b02      	cmp	r3, #2
   14af4:	d002      	beq.n	14afc <_ZN11Diagnostics12troubleshootEhb+0x190>
   14af6:	78fb      	ldrb	r3, [r7, #3]
   14af8:	2b0b      	cmp	r3, #11
   14afa:	d102      	bne.n	14b02 <_ZN11Diagnostics12troubleshootEhb+0x196>
      _printSupportLink();
   14afc:	6878      	ldr	r0, [r7, #4]
   14afe:	4b1e      	ldr	r3, [pc, #120]	; (14b78 <_ZN11Diagnostics12troubleshootEhb+0x20c>)
   14b00:	4798      	blx	r3
    }
  #endif
  }
}
   14b02:	bf00      	nop
   14b04:	3710      	adds	r7, #16
   14b06:	46bd      	mov	sp, r7
   14b08:	bd80      	pop	{r7, pc}
   14b0a:	bf00      	nop
   14b0c:	0002196c 	.word	0x0002196c
   14b10:	2000a4d0 	.word	0x2000a4d0
   14b14:	00018671 	.word	0x00018671
   14b18:	0002198c 	.word	0x0002198c
   14b1c:	000219c0 	.word	0x000219c0
   14b20:	00021a00 	.word	0x00021a00
   14b24:	00021a40 	.word	0x00021a40
   14b28:	00021ad8 	.word	0x00021ad8
   14b2c:	00021ae8 	.word	0x00021ae8
   14b30:	00021b18 	.word	0x00021b18
   14b34:	00021b64 	.word	0x00021b64
   14b38:	00021b88 	.word	0x00021b88
   14b3c:	00021bcc 	.word	0x00021bcc
   14b40:	00021bf0 	.word	0x00021bf0
   14b44:	00021c2c 	.word	0x00021c2c
   14b48:	00021c7c 	.word	0x00021c7c
   14b4c:	00021cbc 	.word	0x00021cbc
   14b50:	00021ce0 	.word	0x00021ce0
   14b54:	00021d08 	.word	0x00021d08
   14b58:	00021d2c 	.word	0x00021d2c
   14b5c:	00021d54 	.word	0x00021d54
   14b60:	00021d78 	.word	0x00021d78
   14b64:	00021da0 	.word	0x00021da0
   14b68:	00021dec 	.word	0x00021dec
   14b6c:	00021e3c 	.word	0x00021e3c
   14b70:	00021e8c 	.word	0x00021e8c
   14b74:	00021ec0 	.word	0x00021ec0
   14b78:	00014b7d 	.word	0x00014b7d

00014b7c <_ZN11Diagnostics17_printSupportLinkEv>:
		usb.print(F("0"));
	}
	usb.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
   14b7c:	b580      	push	{r7, lr}
   14b7e:	b082      	sub	sp, #8
   14b80:	af00      	add	r7, sp, #0
   14b82:	6078      	str	r0, [r7, #4]
	usb.print(F("If this does not help resolve/clarify this issue, "));
   14b84:	4905      	ldr	r1, [pc, #20]	; (14b9c <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
   14b86:	4806      	ldr	r0, [pc, #24]	; (14ba0 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   14b88:	4b06      	ldr	r3, [pc, #24]	; (14ba4 <_ZN11Diagnostics17_printSupportLinkEv+0x28>)
   14b8a:	4798      	blx	r3
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
   14b8c:	4906      	ldr	r1, [pc, #24]	; (14ba8 <_ZN11Diagnostics17_printSupportLinkEv+0x2c>)
   14b8e:	4804      	ldr	r0, [pc, #16]	; (14ba0 <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   14b90:	4b06      	ldr	r3, [pc, #24]	; (14bac <_ZN11Diagnostics17_printSupportLinkEv+0x30>)
   14b92:	4798      	blx	r3
}
   14b94:	bf00      	nop
   14b96:	3708      	adds	r7, #8
   14b98:	46bd      	mov	sp, r7
   14b9a:	bd80      	pop	{r7, pc}
   14b9c:	00021ee4 	.word	0x00021ee4
   14ba0:	2000a4d0 	.word	0x2000a4d0
   14ba4:	000185c5 	.word	0x000185c5
   14ba8:	00021f18 	.word	0x00021f18
   14bac:	00018671 	.word	0x00018671

00014bb0 <_Z41__static_initialization_and_destruction_0ii>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
   14bb0:	b580      	push	{r7, lr}
   14bb2:	b082      	sub	sp, #8
   14bb4:	af00      	add	r7, sp, #0
   14bb6:	6078      	str	r0, [r7, #4]
   14bb8:	6039      	str	r1, [r7, #0]
   14bba:	687b      	ldr	r3, [r7, #4]
   14bbc:	2b01      	cmp	r3, #1
   14bbe:	d10c      	bne.n	14bda <_Z41__static_initialization_and_destruction_0ii+0x2a>
   14bc0:	683b      	ldr	r3, [r7, #0]
   14bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14bc6:	4293      	cmp	r3, r2
   14bc8:	d107      	bne.n	14bda <_Z41__static_initialization_and_destruction_0ii+0x2a>
   14bca:	4806      	ldr	r0, [pc, #24]	; (14be4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14bcc:	4b06      	ldr	r3, [pc, #24]	; (14be8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   14bce:	4798      	blx	r3
   14bd0:	4a06      	ldr	r2, [pc, #24]	; (14bec <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   14bd2:	4907      	ldr	r1, [pc, #28]	; (14bf0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   14bd4:	4803      	ldr	r0, [pc, #12]	; (14be4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14bd6:	4b07      	ldr	r3, [pc, #28]	; (14bf4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   14bd8:	4798      	blx	r3
   14bda:	bf00      	nop
   14bdc:	3708      	adds	r7, #8
   14bde:	46bd      	mov	sp, r7
   14be0:	bd80      	pop	{r7, pc}
   14be2:	bf00      	nop
   14be4:	20009308 	.word	0x20009308
   14be8:	00014945 	.word	0x00014945
   14bec:	20000000 	.word	0x20000000
   14bf0:	00014959 	.word	0x00014959
   14bf4:	00019d1d 	.word	0x00019d1d

00014bf8 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
   14bf8:	b580      	push	{r7, lr}
   14bfa:	af00      	add	r7, sp, #0
   14bfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14c00:	2001      	movs	r0, #1
   14c02:	4b01      	ldr	r3, [pc, #4]	; (14c08 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
   14c04:	4798      	blx	r3
   14c06:	bd80      	pop	{r7, pc}
   14c08:	00014bb1 	.word	0x00014bb1

00014c0c <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   14c0c:	b480      	push	{r7}
   14c0e:	b083      	sub	sp, #12
   14c10:	af00      	add	r7, sp, #0
   14c12:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   14c14:	4b04      	ldr	r3, [pc, #16]	; (14c28 <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   14c16:	681b      	ldr	r3, [r3, #0]
   14c18:	2201      	movs	r2, #1
   14c1a:	741a      	strb	r2, [r3, #16]
}
   14c1c:	bf00      	nop
   14c1e:	370c      	adds	r7, #12
   14c20:	46bd      	mov	sp, r7
   14c22:	bc80      	pop	{r7}
   14c24:	4770      	bx	lr
   14c26:	bf00      	nop
   14c28:	20009b10 	.word	0x20009b10

00014c2c <_ZL15EventTimerTicksPK10timer_task>:

static void EventTimerTicks(const struct timer_task *const timer_task)
{
   14c2c:	b480      	push	{r7}
   14c2e:	b083      	sub	sp, #12
   14c30:	af00      	add	r7, sp, #0
   14c32:	6078      	str	r0, [r7, #4]
	eventTimer.ticks++;
   14c34:	4b04      	ldr	r3, [pc, #16]	; (14c48 <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   14c36:	689b      	ldr	r3, [r3, #8]
   14c38:	3301      	adds	r3, #1
   14c3a:	4a03      	ldr	r2, [pc, #12]	; (14c48 <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   14c3c:	6093      	str	r3, [r2, #8]
}
   14c3e:	bf00      	nop
   14c40:	370c      	adds	r7, #12
   14c42:	46bd      	mov	sp, r7
   14c44:	bc80      	pop	{r7}
   14c46:	4770      	bx	lr
   14c48:	2000a45c 	.word	0x2000a45c

00014c4c <_ZN18EventHandler_ClassC1Ev>:

// default constructor
EventHandler_Class::EventHandler_Class()
   14c4c:	b580      	push	{r7, lr}
   14c4e:	b082      	sub	sp, #8
   14c50:	af00      	add	r7, sp, #0
   14c52:	6078      	str	r0, [r7, #4]
   14c54:	687b      	ldr	r3, [r7, #4]
   14c56:	4618      	mov	r0, r3
   14c58:	4b06      	ldr	r3, [pc, #24]	; (14c74 <_ZN18EventHandler_ClassC1Ev+0x28>)
   14c5a:	4798      	blx	r3
{
	ptrEventHandlerClass=this;
   14c5c:	4a06      	ldr	r2, [pc, #24]	; (14c78 <_ZN18EventHandler_ClassC1Ev+0x2c>)
   14c5e:	687b      	ldr	r3, [r7, #4]
   14c60:	6013      	str	r3, [r2, #0]
	eventQueue = eventStorage;
   14c62:	687b      	ldr	r3, [r7, #4]
   14c64:	4a05      	ldr	r2, [pc, #20]	; (14c7c <_ZN18EventHandler_ClassC1Ev+0x30>)
   14c66:	631a      	str	r2, [r3, #48]	; 0x30
} //EventHandler_Class
   14c68:	687b      	ldr	r3, [r7, #4]
   14c6a:	4618      	mov	r0, r3
   14c6c:	3708      	adds	r7, #8
   14c6e:	46bd      	mov	sp, r7
   14c70:	bd80      	pop	{r7, pc}
   14c72:	bf00      	nop
   14c74:	000003c5 	.word	0x000003c5
   14c78:	20009b10 	.word	0x20009b10
   14c7c:	2000930c 	.word	0x2000930c

00014c80 <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   14c80:	b480      	push	{r7}
   14c82:	b083      	sub	sp, #12
   14c84:	af00      	add	r7, sp, #0
   14c86:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   14c88:	4a04      	ldr	r2, [pc, #16]	; (14c9c <_ZN18EventHandler_ClassD1Ev+0x1c>)
   14c8a:	687b      	ldr	r3, [r7, #4]
   14c8c:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   14c8e:	687b      	ldr	r3, [r7, #4]
   14c90:	4618      	mov	r0, r3
   14c92:	370c      	adds	r7, #12
   14c94:	46bd      	mov	sp, r7
   14c96:	bc80      	pop	{r7}
   14c98:	4770      	bx	lr
   14c9a:	bf00      	nop
   14c9c:	20009b10 	.word	0x20009b10

00014ca0 <_ZN18EventHandler_Class4InitEv>:



bool EventHandler_Class::Init(void)
{
   14ca0:	b580      	push	{r7, lr}
   14ca2:	b084      	sub	sp, #16
   14ca4:	af00      	add	r7, sp, #0
   14ca6:	6078      	str	r0, [r7, #4]
	int16	i;
	eventTimeout=false;
   14ca8:	687b      	ldr	r3, [r7, #4]
   14caa:	2200      	movs	r2, #0
   14cac:	741a      	strb	r2, [r3, #16]
	eventsInUse=0;
   14cae:	687b      	ldr	r3, [r7, #4]
   14cb0:	2200      	movs	r2, #0
   14cb2:	61da      	str	r2, [r3, #28]
	eventsInUsePeak=0;
   14cb4:	687b      	ldr	r3, [r7, #4]
   14cb6:	2200      	movs	r2, #0
   14cb8:	621a      	str	r2, [r3, #32]
	eventCollisions=0;
   14cba:	687b      	ldr	r3, [r7, #4]
   14cbc:	2200      	movs	r2, #0
   14cbe:	625a      	str	r2, [r3, #36]	; 0x24
	eventEvalCollisions=0;
   14cc0:	687b      	ldr	r3, [r7, #4]
   14cc2:	2200      	movs	r2, #0
   14cc4:	629a      	str	r2, [r3, #40]	; 0x28
	eventQueueUnderflow=0;
   14cc6:	687b      	ldr	r3, [r7, #4]
   14cc8:	2200      	movs	r2, #0
   14cca:	62da      	str	r2, [r3, #44]	; 0x2c

	usb << "initializeEvents\r";

	#endif

	for (i=1; i<sizeOfEventQueue; i++)
   14ccc:	2301      	movs	r3, #1
   14cce:	81fb      	strh	r3, [r7, #14]
   14cd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14cd4:	2b7f      	cmp	r3, #127	; 0x7f
   14cd6:	dc1b      	bgt.n	14d10 <_ZN18EventHandler_Class4InitEv+0x70>
	{
		eventStorage[i].next = (event*)NULL;
   14cd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14cdc:	4a15      	ldr	r2, [pc, #84]	; (14d34 <_ZN18EventHandler_Class4InitEv+0x94>)
   14cde:	011b      	lsls	r3, r3, #4
   14ce0:	4413      	add	r3, r2
   14ce2:	330c      	adds	r3, #12
   14ce4:	2200      	movs	r2, #0
   14ce6:	601a      	str	r2, [r3, #0]
		eventStorage[i-1].next = &eventStorage[i];
   14ce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14cec:	3b01      	subs	r3, #1
   14cee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
   14cf2:	0112      	lsls	r2, r2, #4
   14cf4:	490f      	ldr	r1, [pc, #60]	; (14d34 <_ZN18EventHandler_Class4InitEv+0x94>)
   14cf6:	440a      	add	r2, r1
   14cf8:	490e      	ldr	r1, [pc, #56]	; (14d34 <_ZN18EventHandler_Class4InitEv+0x94>)
   14cfa:	011b      	lsls	r3, r3, #4
   14cfc:	440b      	add	r3, r1
   14cfe:	330c      	adds	r3, #12
   14d00:	601a      	str	r2, [r3, #0]
	for (i=1; i<sizeOfEventQueue; i++)
   14d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14d06:	b29b      	uxth	r3, r3
   14d08:	3301      	adds	r3, #1
   14d0a:	b29b      	uxth	r3, r3
   14d0c:	81fb      	strh	r3, [r7, #14]
   14d0e:	e7df      	b.n	14cd0 <_ZN18EventHandler_Class4InitEv+0x30>
	}
	isOK=eventTimer.Init();
   14d10:	4809      	ldr	r0, [pc, #36]	; (14d38 <_ZN18EventHandler_Class4InitEv+0x98>)
   14d12:	4b0a      	ldr	r3, [pc, #40]	; (14d3c <_ZN18EventHandler_Class4InitEv+0x9c>)
   14d14:	4798      	blx	r3
   14d16:	4603      	mov	r3, r0
   14d18:	461a      	mov	r2, r3
   14d1a:	687b      	ldr	r3, [r7, #4]
   14d1c:	761a      	strb	r2, [r3, #24]
	eventTimer.Start_periodic_task(FUNC_PTR(EventTimerTicks),1);
   14d1e:	2201      	movs	r2, #1
   14d20:	4907      	ldr	r1, [pc, #28]	; (14d40 <_ZN18EventHandler_Class4InitEv+0xa0>)
   14d22:	4805      	ldr	r0, [pc, #20]	; (14d38 <_ZN18EventHandler_Class4InitEv+0x98>)
   14d24:	4b07      	ldr	r3, [pc, #28]	; (14d44 <_ZN18EventHandler_Class4InitEv+0xa4>)
   14d26:	4798      	blx	r3
	{
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
	return (bool)&eventStorage[0];
   14d28:	2301      	movs	r3, #1
}
   14d2a:	4618      	mov	r0, r3
   14d2c:	3710      	adds	r7, #16
   14d2e:	46bd      	mov	sp, r7
   14d30:	bd80      	pop	{r7, pc}
   14d32:	bf00      	nop
   14d34:	2000930c 	.word	0x2000930c
   14d38:	2000a45c 	.word	0x2000a45c
   14d3c:	00017bd9 	.word	0x00017bd9
   14d40:	00014c2d 	.word	0x00014c2d
   14d44:	00017c9d 	.word	0x00017c9d

00014d48 <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   14d48:	b590      	push	{r4, r7, lr}
   14d4a:	b087      	sub	sp, #28
   14d4c:	af02      	add	r7, sp, #8
   14d4e:	60f8      	str	r0, [r7, #12]
   14d50:	60b9      	str	r1, [r7, #8]
   14d52:	4611      	mov	r1, r2
   14d54:	461a      	mov	r2, r3
   14d56:	460b      	mov	r3, r1
   14d58:	80fb      	strh	r3, [r7, #6]
   14d5a:	4613      	mov	r3, r2
   14d5c:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   14d5e:	88b9      	ldrh	r1, [r7, #4]
   14d60:	88fa      	ldrh	r2, [r7, #6]
   14d62:	6a3b      	ldr	r3, [r7, #32]
   14d64:	9300      	str	r3, [sp, #0]
   14d66:	460b      	mov	r3, r1
   14d68:	68b9      	ldr	r1, [r7, #8]
   14d6a:	68f8      	ldr	r0, [r7, #12]
   14d6c:	4c03      	ldr	r4, [pc, #12]	; (14d7c <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   14d6e:	47a0      	blx	r4
   14d70:	4603      	mov	r3, r0
}
   14d72:	4618      	mov	r0, r3
   14d74:	3714      	adds	r7, #20
   14d76:	46bd      	mov	sp, r7
   14d78:	bd90      	pop	{r4, r7, pc}
   14d7a:	bf00      	nop
   14d7c:	00014d81 	.word	0x00014d81

00014d80 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   14d80:	b590      	push	{r4, r7, lr}
   14d82:	b089      	sub	sp, #36	; 0x24
   14d84:	af00      	add	r7, sp, #0
   14d86:	60f8      	str	r0, [r7, #12]
   14d88:	60b9      	str	r1, [r7, #8]
   14d8a:	4611      	mov	r1, r2
   14d8c:	461a      	mov	r2, r3
   14d8e:	460b      	mov	r3, r1
   14d90:	80fb      	strh	r3, [r7, #6]
   14d92:	4613      	mov	r3, r2
   14d94:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   14d96:	2300      	movs	r3, #0
   14d98:	77fb      	strb	r3, [r7, #31]
	event*	queue;
	event*	queuePrev(NULL);
   14d9a:	2300      	movs	r3, #0
   14d9c:	617b      	str	r3, [r7, #20]
	eventTimeout=false;
   14d9e:	68fb      	ldr	r3, [r7, #12]
   14da0:	2200      	movs	r2, #0
   14da2:	741a      	strb	r2, [r3, #16]

	
	e.eventClass = eventClass;
   14da4:	68bb      	ldr	r3, [r7, #8]
   14da6:	88fa      	ldrh	r2, [r7, #6]
   14da8:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   14daa:	68bb      	ldr	r3, [r7, #8]
   14dac:	88ba      	ldrh	r2, [r7, #4]
   14dae:	805a      	strh	r2, [r3, #2]

	
	if (timeout != forever){
   14db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14db2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   14db6:	4293      	cmp	r3, r2
   14db8:	d006      	beq.n	14dc8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x48>
		eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,(uint32_t)timeout);
   14dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14dbc:	461a      	mov	r2, r3
   14dbe:	493a      	ldr	r1, [pc, #232]	; (14ea8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14dc0:	483a      	ldr	r0, [pc, #232]	; (14eac <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14dc2:	4b3b      	ldr	r3, [pc, #236]	; (14eb0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   14dc4:	4798      	blx	r3
   14dc6:	e004      	b.n	14dd2 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>

	}else{
		
			eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   14dc8:	2232      	movs	r2, #50	; 0x32
   14dca:	4937      	ldr	r1, [pc, #220]	; (14ea8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14dcc:	4837      	ldr	r0, [pc, #220]	; (14eac <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14dce:	4b38      	ldr	r3, [pc, #224]	; (14eb0 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   14dd0:	4798      	blx	r3
	}

	while (!result && (!eventTimeout))
   14dd2:	7ffb      	ldrb	r3, [r7, #31]
   14dd4:	f083 0301 	eor.w	r3, r3, #1
   14dd8:	b2db      	uxtb	r3, r3
   14dda:	2b00      	cmp	r3, #0
   14ddc:	d009      	beq.n	14df2 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x72>
   14dde:	68fb      	ldr	r3, [r7, #12]
   14de0:	7c1b      	ldrb	r3, [r3, #16]
   14de2:	b2db      	uxtb	r3, r3
   14de4:	f083 0301 	eor.w	r3, r3, #1
   14de8:	b2db      	uxtb	r3, r3
   14dea:	2b00      	cmp	r3, #0
   14dec:	d001      	beq.n	14df2 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x72>
   14dee:	2301      	movs	r3, #1
   14df0:	e000      	b.n	14df4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x74>
   14df2:	2300      	movs	r3, #0
   14df4:	2b00      	cmp	r3, #0
   14df6:	d04d      	beq.n	14e94 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x114>
	{
		if (eventHandler)
   14df8:	68fb      	ldr	r3, [r7, #12]
   14dfa:	695b      	ldr	r3, [r3, #20]
   14dfc:	2b00      	cmp	r3, #0
   14dfe:	d002      	beq.n	14e06 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x86>
		{
			eventHandler();
   14e00:	68fb      	ldr	r3, [r7, #12]
   14e02:	695b      	ldr	r3, [r3, #20]
   14e04:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   14e06:	4b2b      	ldr	r3, [pc, #172]	; (14eb4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   14e08:	681b      	ldr	r3, [r3, #0]
   14e0a:	61bb      	str	r3, [r7, #24]

		while (queue)
   14e0c:	69bb      	ldr	r3, [r7, #24]
   14e0e:	2b00      	cmp	r3, #0
   14e10:	d0df      	beq.n	14dd2 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
		
			#endif
			if (((e.eventClass == kAnyEventClass) ||(queue->eventClass == e.eventClass))
   14e12:	68bb      	ldr	r3, [r7, #8]
   14e14:	881b      	ldrh	r3, [r3, #0]
   14e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14e1a:	4293      	cmp	r3, r2
   14e1c:	d005      	beq.n	14e2a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xaa>
   14e1e:	69bb      	ldr	r3, [r7, #24]
   14e20:	881a      	ldrh	r2, [r3, #0]
   14e22:	68bb      	ldr	r3, [r7, #8]
   14e24:	881b      	ldrh	r3, [r3, #0]
   14e26:	429a      	cmp	r2, r3
   14e28:	d12e      	bne.n	14e88 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x108>
			&& ((e.eventType == kAnyEventType) ||	(queue->eventType == e.eventType)))
   14e2a:	68bb      	ldr	r3, [r7, #8]
   14e2c:	885b      	ldrh	r3, [r3, #2]
   14e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14e32:	4293      	cmp	r3, r2
   14e34:	d005      	beq.n	14e42 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xc2>
   14e36:	69bb      	ldr	r3, [r7, #24]
   14e38:	885a      	ldrh	r2, [r3, #2]
   14e3a:	68bb      	ldr	r3, [r7, #8]
   14e3c:	885b      	ldrh	r3, [r3, #2]
   14e3e:	429a      	cmp	r2, r3
   14e40:	d122      	bne.n	14e88 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x108>
			{
				if (queuePrev)
   14e42:	697b      	ldr	r3, [r7, #20]
   14e44:	2b00      	cmp	r3, #0
   14e46:	d004      	beq.n	14e52 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xd2>
				{
					queuePrev->next = queue->next;
   14e48:	69bb      	ldr	r3, [r7, #24]
   14e4a:	68da      	ldr	r2, [r3, #12]
   14e4c:	697b      	ldr	r3, [r7, #20]
   14e4e:	60da      	str	r2, [r3, #12]
   14e50:	e003      	b.n	14e5a <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xda>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   14e52:	69bb      	ldr	r3, [r7, #24]
   14e54:	68db      	ldr	r3, [r3, #12]
   14e56:	4a17      	ldr	r2, [pc, #92]	; (14eb4 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   14e58:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   14e5a:	68ba      	ldr	r2, [r7, #8]
   14e5c:	69bb      	ldr	r3, [r7, #24]
   14e5e:	4614      	mov	r4, r2
   14e60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14e62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   14e66:	68fb      	ldr	r3, [r7, #12]
   14e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   14e6a:	69bb      	ldr	r3, [r7, #24]
   14e6c:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   14e6e:	68fb      	ldr	r3, [r7, #12]
   14e70:	69ba      	ldr	r2, [r7, #24]
   14e72:	631a      	str	r2, [r3, #48]	; 0x30
				
				eventsInUse--;
   14e74:	68fb      	ldr	r3, [r7, #12]
   14e76:	69db      	ldr	r3, [r3, #28]
   14e78:	1e5a      	subs	r2, r3, #1
   14e7a:	68fb      	ldr	r3, [r7, #12]
   14e7c:	61da      	str	r2, [r3, #28]

				queue = NULL;
   14e7e:	2300      	movs	r3, #0
   14e80:	61bb      	str	r3, [r7, #24]
				result = true;
   14e82:	2301      	movs	r3, #1
   14e84:	77fb      	strb	r3, [r7, #31]
   14e86:	e004      	b.n	14e92 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x112>
			}
			else
			{
				queuePrev = queue;
   14e88:	69bb      	ldr	r3, [r7, #24]
   14e8a:	617b      	str	r3, [r7, #20]
				queue = queue->next;
   14e8c:	69bb      	ldr	r3, [r7, #24]
   14e8e:	68db      	ldr	r3, [r3, #12]
   14e90:	61bb      	str	r3, [r7, #24]
		while (queue)
   14e92:	e7bb      	b.n	14e0c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x8c>
			//while (!eventTimeout);
		
		}
		
	}
	eventTimer.Remove_task(FUNC_PTR(EventTimerTask));
   14e94:	4904      	ldr	r1, [pc, #16]	; (14ea8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14e96:	4805      	ldr	r0, [pc, #20]	; (14eac <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14e98:	4b07      	ldr	r3, [pc, #28]	; (14eb8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x138>)
   14e9a:	4798      	blx	r3
	//eventTimer.stop();
	return result;
   14e9c:	7ffb      	ldrb	r3, [r7, #31]
}
   14e9e:	4618      	mov	r0, r3
   14ea0:	3724      	adds	r7, #36	; 0x24
   14ea2:	46bd      	mov	sp, r7
   14ea4:	bd90      	pop	{r4, r7, pc}
   14ea6:	bf00      	nop
   14ea8:	00014c0d 	.word	0x00014c0d
   14eac:	2000a45c 	.word	0x2000a45c
   14eb0:	00017d81 	.word	0x00017d81
   14eb4:	20009b0c 	.word	0x20009b0c
   14eb8:	00017d11 	.word	0x00017d11

00014ebc <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass>:

bool	EventHandler_Class::IsEventListed(EventType eventType, EventClass eventClass)
{
   14ebc:	b480      	push	{r7}
   14ebe:	b087      	sub	sp, #28
   14ec0:	af00      	add	r7, sp, #0
   14ec2:	6078      	str	r0, [r7, #4]
   14ec4:	460b      	mov	r3, r1
   14ec6:	807b      	strh	r3, [r7, #2]
   14ec8:	4613      	mov	r3, r2
   14eca:	803b      	strh	r3, [r7, #0]
	bool	result(false);
   14ecc:	2300      	movs	r3, #0
   14ece:	75fb      	strb	r3, [r7, #23]
	event*	queue;
	event*	queuePrev(NULL);
   14ed0:	2300      	movs	r3, #0
   14ed2:	60fb      	str	r3, [r7, #12]

	if ((eventsInUse==0))
   14ed4:	687b      	ldr	r3, [r7, #4]
   14ed6:	69db      	ldr	r3, [r3, #28]
   14ed8:	2b00      	cmp	r3, #0
   14eda:	d102      	bne.n	14ee2 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x26>
	{
		result = false;
   14edc:	2300      	movs	r3, #0
   14ede:	75fb      	strb	r3, [r7, #23]
   14ee0:	e027      	b.n	14f32 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
	}
	else
	{
		queue = (event*)mainThreadEventQueue;
   14ee2:	4b17      	ldr	r3, [pc, #92]	; (14f40 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x84>)
   14ee4:	681b      	ldr	r3, [r3, #0]
   14ee6:	613b      	str	r3, [r7, #16]
		while (queue)
   14ee8:	693b      	ldr	r3, [r7, #16]
   14eea:	2b00      	cmp	r3, #0
   14eec:	d021      	beq.n	14f32 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
			
			#endif
			if (((eventClass == kAnyEventClass)|(queue->eventClass == eventClass)) && (queue->eventType == eventType))
   14eee:	883b      	ldrh	r3, [r7, #0]
   14ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14ef4:	4293      	cmp	r3, r2
   14ef6:	bf0c      	ite	eq
   14ef8:	2301      	moveq	r3, #1
   14efa:	2300      	movne	r3, #0
   14efc:	b2da      	uxtb	r2, r3
   14efe:	693b      	ldr	r3, [r7, #16]
   14f00:	881b      	ldrh	r3, [r3, #0]
   14f02:	8839      	ldrh	r1, [r7, #0]
   14f04:	4299      	cmp	r1, r3
   14f06:	bf0c      	ite	eq
   14f08:	2301      	moveq	r3, #1
   14f0a:	2300      	movne	r3, #0
   14f0c:	b2db      	uxtb	r3, r3
   14f0e:	4313      	orrs	r3, r2
   14f10:	b2db      	uxtb	r3, r3
   14f12:	2b00      	cmp	r3, #0
   14f14:	d007      	beq.n	14f26 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x6a>
   14f16:	693b      	ldr	r3, [r7, #16]
   14f18:	885b      	ldrh	r3, [r3, #2]
   14f1a:	887a      	ldrh	r2, [r7, #2]
   14f1c:	429a      	cmp	r2, r3
   14f1e:	d102      	bne.n	14f26 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x6a>
			{

				result = true;
   14f20:	2301      	movs	r3, #1
   14f22:	75fb      	strb	r3, [r7, #23]
				break;
   14f24:	e005      	b.n	14f32 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
			}
			else
			{
				queuePrev = queue;
   14f26:	693b      	ldr	r3, [r7, #16]
   14f28:	60fb      	str	r3, [r7, #12]
				queue = queue->next;
   14f2a:	693b      	ldr	r3, [r7, #16]
   14f2c:	68db      	ldr	r3, [r3, #12]
   14f2e:	613b      	str	r3, [r7, #16]
		while (queue)
   14f30:	e7da      	b.n	14ee8 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x2c>
		
	}

	
	//eventTimer.stop();
	return result;
   14f32:	7dfb      	ldrb	r3, [r7, #23]
}
   14f34:	4618      	mov	r0, r3
   14f36:	371c      	adds	r7, #28
   14f38:	46bd      	mov	sp, r7
   14f3a:	bc80      	pop	{r7}
   14f3c:	4770      	bx	lr
   14f3e:	bf00      	nop
   14f40:	20009b0c 	.word	0x20009b0c

00014f44 <_ZN18EventHandler_Class13SendEventSelfERK5event>:
}



void EventHandler_Class::SendEventSelf(const event& e)
{
   14f44:	b580      	push	{r7, lr}
   14f46:	b084      	sub	sp, #16
   14f48:	af00      	add	r7, sp, #0
   14f4a:	6078      	str	r0, [r7, #4]
   14f4c:	6039      	str	r1, [r7, #0]
	if (IsEventListed(e.eventType,e.eventClass))
   14f4e:	683b      	ldr	r3, [r7, #0]
   14f50:	8859      	ldrh	r1, [r3, #2]
   14f52:	683b      	ldr	r3, [r7, #0]
   14f54:	881b      	ldrh	r3, [r3, #0]
   14f56:	461a      	mov	r2, r3
   14f58:	6878      	ldr	r0, [r7, #4]
   14f5a:	4b25      	ldr	r3, [pc, #148]	; (14ff0 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xac>)
   14f5c:	4798      	blx	r3
   14f5e:	4603      	mov	r3, r0
   14f60:	2b00      	cmp	r3, #0
   14f62:	d140      	bne.n	14fe6 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa2>
	{
		
	} 
	else
	{
		event*	theEvent(eventQueue);
   14f64:	687b      	ldr	r3, [r7, #4]
   14f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14f68:	60bb      	str	r3, [r7, #8]
		
		if (theEvent)
   14f6a:	68bb      	ldr	r3, [r7, #8]
   14f6c:	2b00      	cmp	r3, #0
   14f6e:	d035      	beq.n	14fdc <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>
		{
			eventQueue = eventQueue->next;
   14f70:	687b      	ldr	r3, [r7, #4]
   14f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14f74:	68da      	ldr	r2, [r3, #12]
   14f76:	687b      	ldr	r3, [r7, #4]
   14f78:	631a      	str	r2, [r3, #48]	; 0x30
			theEvent->next = NULL;
   14f7a:	68bb      	ldr	r3, [r7, #8]
   14f7c:	2200      	movs	r2, #0
   14f7e:	60da      	str	r2, [r3, #12]
			eventsInUse++;
   14f80:	687b      	ldr	r3, [r7, #4]
   14f82:	69db      	ldr	r3, [r3, #28]
   14f84:	1c5a      	adds	r2, r3, #1
   14f86:	687b      	ldr	r3, [r7, #4]
   14f88:	61da      	str	r2, [r3, #28]

			event*	threadQueue((event*)mainThreadEventQueue);
   14f8a:	4b1a      	ldr	r3, [pc, #104]	; (14ff4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb0>)
   14f8c:	681b      	ldr	r3, [r3, #0]
   14f8e:	60fb      	str	r3, [r7, #12]
			if (threadQueue == NULL)
   14f90:	68fb      	ldr	r3, [r7, #12]
   14f92:	2b00      	cmp	r3, #0
   14f94:	d103      	bne.n	14f9e <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
			mainThreadEventQueue = theEvent;
   14f96:	4a17      	ldr	r2, [pc, #92]	; (14ff4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb0>)
   14f98:	68bb      	ldr	r3, [r7, #8]
   14f9a:	6013      	str	r3, [r2, #0]
   14f9c:	e00a      	b.n	14fb4 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x70>
			else
			{
				while (threadQueue->next)
   14f9e:	68fb      	ldr	r3, [r7, #12]
   14fa0:	68db      	ldr	r3, [r3, #12]
   14fa2:	2b00      	cmp	r3, #0
   14fa4:	d003      	beq.n	14fae <_ZN18EventHandler_Class13SendEventSelfERK5event+0x6a>
				threadQueue = threadQueue->next;
   14fa6:	68fb      	ldr	r3, [r7, #12]
   14fa8:	68db      	ldr	r3, [r3, #12]
   14faa:	60fb      	str	r3, [r7, #12]
				while (threadQueue->next)
   14fac:	e7f7      	b.n	14f9e <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
				threadQueue->next = theEvent;
   14fae:	68fb      	ldr	r3, [r7, #12]
   14fb0:	68ba      	ldr	r2, [r7, #8]
   14fb2:	60da      	str	r2, [r3, #12]
				usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
				
			}
			#endif

			(*theEvent).eventClass = e.eventClass;
   14fb4:	683b      	ldr	r3, [r7, #0]
   14fb6:	881a      	ldrh	r2, [r3, #0]
   14fb8:	68bb      	ldr	r3, [r7, #8]
   14fba:	801a      	strh	r2, [r3, #0]
			(*theEvent).eventType = e.eventType;
   14fbc:	683b      	ldr	r3, [r7, #0]
   14fbe:	885a      	ldrh	r2, [r3, #2]
   14fc0:	68bb      	ldr	r3, [r7, #8]
   14fc2:	805a      	strh	r2, [r3, #2]
			(*theEvent).data = e.data;
   14fc4:	68bb      	ldr	r3, [r7, #8]
   14fc6:	683a      	ldr	r2, [r7, #0]
   14fc8:	6892      	ldr	r2, [r2, #8]
   14fca:	609a      	str	r2, [r3, #8]
			(*theEvent).timestamp = eventTimer.Get_ticks();
   14fcc:	480a      	ldr	r0, [pc, #40]	; (14ff8 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb4>)
   14fce:	4b0b      	ldr	r3, [pc, #44]	; (14ffc <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb8>)
   14fd0:	4798      	blx	r3
   14fd2:	4603      	mov	r3, r0
   14fd4:	461a      	mov	r2, r3
   14fd6:	68bb      	ldr	r3, [r7, #8]
   14fd8:	605a      	str	r2, [r3, #4]
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	
}
   14fda:	e004      	b.n	14fe6 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa2>
			eventQueueUnderflow++;
   14fdc:	687b      	ldr	r3, [r7, #4]
   14fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14fe0:	1c5a      	adds	r2, r3, #1
   14fe2:	687b      	ldr	r3, [r7, #4]
   14fe4:	62da      	str	r2, [r3, #44]	; 0x2c
}
   14fe6:	bf00      	nop
   14fe8:	3710      	adds	r7, #16
   14fea:	46bd      	mov	sp, r7
   14fec:	bd80      	pop	{r7, pc}
   14fee:	bf00      	nop
   14ff0:	00014ebd 	.word	0x00014ebd
   14ff4:	20009b0c 	.word	0x20009b0c
   14ff8:	2000a45c 	.word	0x2000a45c
   14ffc:	00017d69 	.word	0x00017d69

00015000 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendEventSelf(EventClass eventClass, EventType eventType, const eventData& data)
{
   15000:	b580      	push	{r7, lr}
   15002:	b088      	sub	sp, #32
   15004:	af00      	add	r7, sp, #0
   15006:	60f8      	str	r0, [r7, #12]
   15008:	607b      	str	r3, [r7, #4]
   1500a:	460b      	mov	r3, r1
   1500c:	817b      	strh	r3, [r7, #10]
   1500e:	4613      	mov	r3, r2
   15010:	813b      	strh	r3, [r7, #8]
	event		theEvent;
   15012:	f107 0310 	add.w	r3, r7, #16
   15016:	4618      	mov	r0, r3
   15018:	4b09      	ldr	r3, [pc, #36]	; (15040 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData+0x40>)
   1501a:	4798      	blx	r3

	theEvent.eventClass = eventClass;
   1501c:	897b      	ldrh	r3, [r7, #10]
   1501e:	823b      	strh	r3, [r7, #16]
	theEvent.eventType = eventType;
   15020:	893b      	ldrh	r3, [r7, #8]
   15022:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   15024:	687b      	ldr	r3, [r7, #4]
   15026:	681b      	ldr	r3, [r3, #0]
   15028:	61bb      	str	r3, [r7, #24]
	
	SendEventSelf(theEvent);
   1502a:	f107 0310 	add.w	r3, r7, #16
   1502e:	4619      	mov	r1, r3
   15030:	68f8      	ldr	r0, [r7, #12]
   15032:	4b04      	ldr	r3, [pc, #16]	; (15044 <_ZN18EventHandler_Class13SendEventSelfE10EventClass9EventTypeRK9eventData+0x44>)
   15034:	4798      	blx	r3
}
   15036:	bf00      	nop
   15038:	3720      	adds	r7, #32
   1503a:	46bd      	mov	sp, r7
   1503c:	bd80      	pop	{r7, pc}
   1503e:	bf00      	nop
   15040:	000003c5 	.word	0x000003c5
   15044:	00014f45 	.word	0x00014f45

00015048 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData>:

void EventHandler_Class::SendErrorSelf(uint16_t et,const eventData& data)
{
   15048:	b580      	push	{r7, lr}
   1504a:	b088      	sub	sp, #32
   1504c:	af00      	add	r7, sp, #0
   1504e:	60f8      	str	r0, [r7, #12]
   15050:	460b      	mov	r3, r1
   15052:	607a      	str	r2, [r7, #4]
   15054:	817b      	strh	r3, [r7, #10]
	event		theEvent;
   15056:	f107 0310 	add.w	r3, r7, #16
   1505a:	4618      	mov	r0, r3
   1505c:	4b09      	ldr	r3, [pc, #36]	; (15084 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x3c>)
   1505e:	4798      	blx	r3
	theEvent.eventClass = kErrorEventClass;
   15060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   15064:	823b      	strh	r3, [r7, #16]
	theEvent.eventType =(EventType)et ;
   15066:	897b      	ldrh	r3, [r7, #10]
   15068:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   1506a:	687b      	ldr	r3, [r7, #4]
   1506c:	681b      	ldr	r3, [r3, #0]
   1506e:	61bb      	str	r3, [r7, #24]
	SendEventSelf(theEvent);
   15070:	f107 0310 	add.w	r3, r7, #16
   15074:	4619      	mov	r1, r3
   15076:	68f8      	ldr	r0, [r7, #12]
   15078:	4b03      	ldr	r3, [pc, #12]	; (15088 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x40>)
   1507a:	4798      	blx	r3
}
   1507c:	bf00      	nop
   1507e:	3720      	adds	r7, #32
   15080:	46bd      	mov	sp, r7
   15082:	bd80      	pop	{r7, pc}
   15084:	000003c5 	.word	0x000003c5
   15088:	00014f45 	.word	0x00014f45

0001508c <_ZN18EventHandler_Class10CheckEventEv>:
uint32_t EventHandler_Class::CheckEvent(void)
{
   1508c:	b580      	push	{r7, lr}
   1508e:	b08a      	sub	sp, #40	; 0x28
   15090:	af00      	add	r7, sp, #0
   15092:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   15094:	f04f 0300 	mov.w	r3, #0
   15098:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   1509a:	f04f 0300 	mov.w	r3, #0
   1509e:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   150a0:	f04f 0300 	mov.w	r3, #0
   150a4:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   150a6:	f107 030c 	add.w	r3, r7, #12
   150aa:	4618      	mov	r0, r3
   150ac:	4b03      	ldr	r3, [pc, #12]	; (150bc <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   150ae:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   150b0:	687b      	ldr	r3, [r7, #4]
   150b2:	69db      	ldr	r3, [r3, #28]
	
}
   150b4:	4618      	mov	r0, r3
   150b6:	3728      	adds	r7, #40	; 0x28
   150b8:	46bd      	mov	sp, r7
   150ba:	bd80      	pop	{r7, pc}
   150bc:	000003c5 	.word	0x000003c5

000150c0 <_Z41__static_initialization_and_destruction_0ii>:

	EventHandler_Class	listener;
   150c0:	b5b0      	push	{r4, r5, r7, lr}
   150c2:	b082      	sub	sp, #8
   150c4:	af00      	add	r7, sp, #0
   150c6:	6078      	str	r0, [r7, #4]
   150c8:	6039      	str	r1, [r7, #0]
   150ca:	687b      	ldr	r3, [r7, #4]
   150cc:	2b01      	cmp	r3, #1
   150ce:	d117      	bne.n	15100 <_Z41__static_initialization_and_destruction_0ii+0x40>
   150d0:	683b      	ldr	r3, [r7, #0]
   150d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   150d6:	4293      	cmp	r3, r2
   150d8:	d112      	bne.n	15100 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
   150da:	4b0b      	ldr	r3, [pc, #44]	; (15108 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   150dc:	247f      	movs	r4, #127	; 0x7f
   150de:	461d      	mov	r5, r3
   150e0:	2c00      	cmp	r4, #0
   150e2:	db05      	blt.n	150f0 <_Z41__static_initialization_and_destruction_0ii+0x30>
   150e4:	4628      	mov	r0, r5
   150e6:	4b09      	ldr	r3, [pc, #36]	; (1510c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   150e8:	4798      	blx	r3
   150ea:	3510      	adds	r5, #16
   150ec:	3c01      	subs	r4, #1
   150ee:	e7f7      	b.n	150e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
	EventHandler_Class	listener;
   150f0:	4807      	ldr	r0, [pc, #28]	; (15110 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   150f2:	4b08      	ldr	r3, [pc, #32]	; (15114 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   150f4:	4798      	blx	r3
   150f6:	4a08      	ldr	r2, [pc, #32]	; (15118 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   150f8:	4908      	ldr	r1, [pc, #32]	; (1511c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   150fa:	4805      	ldr	r0, [pc, #20]	; (15110 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   150fc:	4b08      	ldr	r3, [pc, #32]	; (15120 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   150fe:	4798      	blx	r3
   15100:	bf00      	nop
   15102:	3708      	adds	r7, #8
   15104:	46bd      	mov	sp, r7
   15106:	bdb0      	pop	{r4, r5, r7, pc}
   15108:	2000930c 	.word	0x2000930c
   1510c:	000003c5 	.word	0x000003c5
   15110:	20009b20 	.word	0x20009b20
   15114:	00014c4d 	.word	0x00014c4d
   15118:	20000000 	.word	0x20000000
   1511c:	00014c81 	.word	0x00014c81
   15120:	00019d1d 	.word	0x00019d1d

00015124 <_GLOBAL__sub_I_maxEventCount>:
   15124:	b580      	push	{r7, lr}
   15126:	af00      	add	r7, sp, #0
   15128:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1512c:	2001      	movs	r0, #1
   1512e:	4b01      	ldr	r3, [pc, #4]	; (15134 <_GLOBAL__sub_I_maxEventCount+0x10>)
   15130:	4798      	blx	r3
   15132:	bd80      	pop	{r7, pc}
   15134:	000150c1 	.word	0x000150c1

00015138 <_ZN14I2C_Sync_ClassC1Ev>:
#include "I2C_Sync_Class.h"
static	uint8_t	txI2CStaticBuffer[I2C_SYN_BUFFER_SIZE];
static	uint8_t	rxI2CStaticBuffer[I2C_SYN_BUFFER_SIZE];

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
   15138:	b480      	push	{r7}
   1513a:	b083      	sub	sp, #12
   1513c:	af00      	add	r7, sp, #0
   1513e:	6078      	str	r0, [r7, #4]
{
} //I2C_Sync_Class
   15140:	687b      	ldr	r3, [r7, #4]
   15142:	4618      	mov	r0, r3
   15144:	370c      	adds	r7, #12
   15146:	46bd      	mov	sp, r7
   15148:	bc80      	pop	{r7}
   1514a:	4770      	bx	lr

0001514c <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
   1514c:	b480      	push	{r7}
   1514e:	b083      	sub	sp, #12
   15150:	af00      	add	r7, sp, #0
   15152:	6078      	str	r0, [r7, #4]
   15154:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
   15156:	687b      	ldr	r3, [r7, #4]
   15158:	683a      	ldr	r2, [r7, #0]
   1515a:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
   1515c:	687b      	ldr	r3, [r7, #4]
   1515e:	4618      	mov	r0, r3
   15160:	370c      	adds	r7, #12
   15162:	46bd      	mov	sp, r7
   15164:	bc80      	pop	{r7}
   15166:	4770      	bx	lr

00015168 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
   15168:	b480      	push	{r7}
   1516a:	b083      	sub	sp, #12
   1516c:	af00      	add	r7, sp, #0
   1516e:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
   15170:	687b      	ldr	r3, [r7, #4]
   15172:	4618      	mov	r0, r3
   15174:	370c      	adds	r7, #12
   15176:	46bd      	mov	sp, r7
   15178:	bc80      	pop	{r7}
   1517a:	4770      	bx	lr

0001517c <_ZN14I2C_Sync_Class13SetDescriptorEP15i2c_m_sync_desc>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
   1517c:	b480      	push	{r7}
   1517e:	b083      	sub	sp, #12
   15180:	af00      	add	r7, sp, #0
   15182:	6078      	str	r0, [r7, #4]
   15184:	6039      	str	r1, [r7, #0]
	ptrI2CDescr=i2c_a;
   15186:	687b      	ldr	r3, [r7, #4]
   15188:	683a      	ldr	r2, [r7, #0]
   1518a:	611a      	str	r2, [r3, #16]
	asm("nop");
   1518c:	bf00      	nop

}
   1518e:	bf00      	nop
   15190:	370c      	adds	r7, #12
   15192:	46bd      	mov	sp, r7
   15194:	bc80      	pop	{r7}
   15196:	4770      	bx	lr

00015198 <_ZN14I2C_Sync_Class4InitEv>:
bool	I2C_Sync_Class::Init(void){
   15198:	b580      	push	{r7, lr}
   1519a:	b084      	sub	sp, #16
   1519c:	af00      	add	r7, sp, #0
   1519e:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
   151a0:	687b      	ldr	r3, [r7, #4]
   151a2:	4a14      	ldr	r2, [pc, #80]	; (151f4 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   151a4:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
   151a6:	687b      	ldr	r3, [r7, #4]
   151a8:	4a12      	ldr	r2, [pc, #72]	; (151f4 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   151aa:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
   151ac:	687b      	ldr	r3, [r7, #4]
   151ae:	691a      	ldr	r2, [r3, #16]
   151b0:	687b      	ldr	r3, [r7, #4]
   151b2:	330c      	adds	r3, #12
   151b4:	4619      	mov	r1, r3
   151b6:	4610      	mov	r0, r2
   151b8:	4b0f      	ldr	r3, [pc, #60]	; (151f8 <_ZN14I2C_Sync_Class4InitEv+0x60>)
   151ba:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   151bc:	687b      	ldr	r3, [r7, #4]
   151be:	691b      	ldr	r3, [r3, #16]
   151c0:	4618      	mov	r0, r3
   151c2:	4b0e      	ldr	r3, [pc, #56]	; (151fc <_ZN14I2C_Sync_Class4InitEv+0x64>)
   151c4:	4798      	blx	r3
   151c6:	4603      	mov	r3, r0
   151c8:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
   151ca:	7bfb      	ldrb	r3, [r7, #15]
   151cc:	2b00      	cmp	r3, #0
   151ce:	bf0c      	ite	eq
   151d0:	2301      	moveq	r3, #1
   151d2:	2300      	movne	r3, #0
   151d4:	b2da      	uxtb	r2, r3
   151d6:	687b      	ldr	r3, [r7, #4]
   151d8:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
   151da:	687b      	ldr	r3, [r7, #4]
   151dc:	7a5b      	ldrb	r3, [r3, #9]
   151de:	b2da      	uxtb	r2, r3
   151e0:	687b      	ldr	r3, [r7, #4]
   151e2:	721a      	strb	r2, [r3, #8]
	return isOK;
   151e4:	687b      	ldr	r3, [r7, #4]
   151e6:	7a5b      	ldrb	r3, [r3, #9]
   151e8:	b2db      	uxtb	r3, r3
	
}
   151ea:	4618      	mov	r0, r3
   151ec:	3710      	adds	r7, #16
   151ee:	46bd      	mov	sp, r7
   151f0:	bd80      	pop	{r7, pc}
   151f2:	bf00      	nop
   151f4:	20009b54 	.word	0x20009b54
   151f8:	00006e7f 	.word	0x00006e7f
   151fc:	00006e25 	.word	0x00006e25

00015200 <_ZN14I2C_Sync_Class4InitEh>:

bool	I2C_Sync_Class::Init(uint8_t add){
   15200:	b580      	push	{r7, lr}
   15202:	b082      	sub	sp, #8
   15204:	af00      	add	r7, sp, #0
   15206:	6078      	str	r0, [r7, #4]
   15208:	460b      	mov	r3, r1
   1520a:	70fb      	strb	r3, [r7, #3]
	isOK=Init();
   1520c:	6878      	ldr	r0, [r7, #4]
   1520e:	4b0b      	ldr	r3, [pc, #44]	; (1523c <_ZN14I2C_Sync_Class4InitEh+0x3c>)
   15210:	4798      	blx	r3
   15212:	4603      	mov	r3, r0
   15214:	461a      	mov	r2, r3
   15216:	687b      	ldr	r3, [r7, #4]
   15218:	725a      	strb	r2, [r3, #9]
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
   1521a:	687b      	ldr	r3, [r7, #4]
   1521c:	691b      	ldr	r3, [r3, #16]
   1521e:	78fa      	ldrb	r2, [r7, #3]
   15220:	b211      	sxth	r1, r2
   15222:	f44f 6200 	mov.w	r2, #2048	; 0x800
   15226:	4618      	mov	r0, r3
   15228:	4b05      	ldr	r3, [pc, #20]	; (15240 <_ZN14I2C_Sync_Class4InitEh+0x40>)
   1522a:	4798      	blx	r3

	return isOK;
   1522c:	687b      	ldr	r3, [r7, #4]
   1522e:	7a5b      	ldrb	r3, [r3, #9]
   15230:	b2db      	uxtb	r3, r3
}
   15232:	4618      	mov	r0, r3
   15234:	3708      	adds	r7, #8
   15236:	46bd      	mov	sp, r7
   15238:	bd80      	pop	{r7, pc}
   1523a:	bf00      	nop
   1523c:	00015199 	.word	0x00015199
   15240:	00006e45 	.word	0x00006e45

00015244 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
}

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
   15244:	b580      	push	{r7, lr}
   15246:	b086      	sub	sp, #24
   15248:	af00      	add	r7, sp, #0
   1524a:	60f8      	str	r0, [r7, #12]
   1524c:	60b9      	str	r1, [r7, #8]
   1524e:	4613      	mov	r3, r2
   15250:	80fb      	strh	r3, [r7, #6]
	//Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
   15252:	68fb      	ldr	r3, [r7, #12]
   15254:	68db      	ldr	r3, [r3, #12]
   15256:	88fa      	ldrh	r2, [r7, #6]
   15258:	68b9      	ldr	r1, [r7, #8]
   1525a:	4618      	mov	r0, r3
   1525c:	4b03      	ldr	r3, [pc, #12]	; (1526c <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
   1525e:	4798      	blx	r3
   15260:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
   15262:	697b      	ldr	r3, [r7, #20]
}
   15264:	4618      	mov	r0, r3
   15266:	3718      	adds	r7, #24
   15268:	46bd      	mov	sp, r7
   1526a:	bd80      	pop	{r7, pc}
   1526c:	00019c7d 	.word	0x00019c7d

00015270 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
   15270:	b580      	push	{r7, lr}
   15272:	b086      	sub	sp, #24
   15274:	af00      	add	r7, sp, #0
   15276:	60f8      	str	r0, [r7, #12]
   15278:	60b9      	str	r1, [r7, #8]
   1527a:	4613      	mov	r3, r2
   1527c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
   1527e:	68fb      	ldr	r3, [r7, #12]
   15280:	68db      	ldr	r3, [r3, #12]
   15282:	88fa      	ldrh	r2, [r7, #6]
   15284:	68b9      	ldr	r1, [r7, #8]
   15286:	4618      	mov	r0, r3
   15288:	4b03      	ldr	r3, [pc, #12]	; (15298 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
   1528a:	4798      	blx	r3
   1528c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
   1528e:	697b      	ldr	r3, [r7, #20]
}
   15290:	4618      	mov	r0, r3
   15292:	3718      	adds	r7, #24
   15294:	46bd      	mov	sp, r7
   15296:	bd80      	pop	{r7, pc}
   15298:	00019ccd 	.word	0x00019ccd

0001529c <_ZL16Fv1StatusChangedv>:
#include "ARINC_Interface.h"
FlapperValve_Class	*ptrFlapperValveClass;
//I2C_Asyn_Class		i2cFVs(&I2C_EXPANDER);
static MCP23017_Class staticExpander(&I2C_EXPANDER);

static void	Fv1StatusChanged(void){
   1529c:	b480      	push	{r7}
   1529e:	af00      	add	r7, sp, #0
	
	ptrFlapperValveClass->fv1StatusChanged=true;
   152a0:	4b03      	ldr	r3, [pc, #12]	; (152b0 <_ZL16Fv1StatusChangedv+0x14>)
   152a2:	681b      	ldr	r3, [r3, #0]
   152a4:	2201      	movs	r2, #1
   152a6:	77da      	strb	r2, [r3, #31]

}
   152a8:	bf00      	nop
   152aa:	46bd      	mov	sp, r7
   152ac:	bc80      	pop	{r7}
   152ae:	4770      	bx	lr
   152b0:	20009bd4 	.word	0x20009bd4

000152b4 <_ZL16Fv2StatusChangedv>:
static void	Fv2StatusChanged(void){
   152b4:	b480      	push	{r7}
   152b6:	af00      	add	r7, sp, #0
	
	ptrFlapperValveClass->fv2StatusChanged=true;
   152b8:	4b04      	ldr	r3, [pc, #16]	; (152cc <_ZL16Fv2StatusChangedv+0x18>)
   152ba:	681b      	ldr	r3, [r3, #0]
   152bc:	2201      	movs	r2, #1
   152be:	f883 2020 	strb.w	r2, [r3, #32]

}
   152c2:	bf00      	nop
   152c4:	46bd      	mov	sp, r7
   152c6:	bc80      	pop	{r7}
   152c8:	4770      	bx	lr
   152ca:	bf00      	nop
   152cc:	20009bd4 	.word	0x20009bd4

000152d0 <_ZL16RegulatorTimeoutPK10timer_task>:

static bool	I2CFlapperValvesInit(void){
	 bool ok= i2cFVs.Init();
	 //ptrFlapperValveClass->isOK=ok;
}
static void	RegulatorTimeout(const struct timer_task *const timer_task){
   152d0:	b480      	push	{r7}
   152d2:	b083      	sub	sp, #12
   152d4:	af00      	add	r7, sp, #0
   152d6:	6078      	str	r0, [r7, #4]
	ptrFlapperValveClass->regulatorTimeout=true;
   152d8:	4b05      	ldr	r3, [pc, #20]	; (152f0 <_ZL16RegulatorTimeoutPK10timer_task+0x20>)
   152da:	681b      	ldr	r3, [r3, #0]
   152dc:	2201      	movs	r2, #1
   152de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	asm("nop");
   152e2:	bf00      	nop
}
   152e4:	bf00      	nop
   152e6:	370c      	adds	r7, #12
   152e8:	46bd      	mov	sp, r7
   152ea:	bc80      	pop	{r7}
   152ec:	4770      	bx	lr
   152ee:	bf00      	nop
   152f0:	20009bd4 	.word	0x20009bd4

000152f4 <_ZN18FlapperValve_ClassC1Eh>:

FlapperValve_Class::FlapperValve_Class(uint8_t id)
   152f4:	b5b0      	push	{r4, r5, r7, lr}
   152f6:	b082      	sub	sp, #8
   152f8:	af00      	add	r7, sp, #0
   152fa:	6078      	str	r0, [r7, #4]
   152fc:	460b      	mov	r3, r1
   152fe:	70fb      	strb	r3, [r7, #3]
   15300:	687b      	ldr	r3, [r7, #4]
   15302:	4618      	mov	r0, r3
   15304:	4b10      	ldr	r3, [pc, #64]	; (15348 <_ZN18FlapperValve_ClassC1Eh+0x54>)
   15306:	4798      	blx	r3
   15308:	687b      	ldr	r3, [r7, #4]
   1530a:	3344      	adds	r3, #68	; 0x44
   1530c:	2403      	movs	r4, #3
   1530e:	461d      	mov	r5, r3
   15310:	2c00      	cmp	r4, #0
   15312:	db05      	blt.n	15320 <_ZN18FlapperValve_ClassC1Eh+0x2c>
   15314:	4628      	mov	r0, r5
   15316:	4b0d      	ldr	r3, [pc, #52]	; (1534c <_ZN18FlapperValve_ClassC1Eh+0x58>)
   15318:	4798      	blx	r3
   1531a:	351c      	adds	r5, #28
   1531c:	3c01      	subs	r4, #1
   1531e:	e7f7      	b.n	15310 <_ZN18FlapperValve_ClassC1Eh+0x1c>
{	
	valveID=id;
   15320:	687b      	ldr	r3, [r7, #4]
   15322:	78fa      	ldrb	r2, [r7, #3]
   15324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	//i2cDescr=&I2C_EXPANDER;
	simpleExpander=&staticExpander;
   15328:	687b      	ldr	r3, [r7, #4]
   1532a:	4a09      	ldr	r2, [pc, #36]	; (15350 <_ZN18FlapperValve_ClassC1Eh+0x5c>)
   1532c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptrFlapperValveClass=this;
   15330:	4a08      	ldr	r2, [pc, #32]	; (15354 <_ZN18FlapperValve_ClassC1Eh+0x60>)
   15332:	687b      	ldr	r3, [r7, #4]
   15334:	6013      	str	r3, [r2, #0]
	isOK=false;
   15336:	687b      	ldr	r3, [r7, #4]
   15338:	2200      	movs	r2, #0
   1533a:	779a      	strb	r2, [r3, #30]
} //FlapperValve_Class
   1533c:	687b      	ldr	r3, [r7, #4]
   1533e:	4618      	mov	r0, r3
   15340:	3708      	adds	r7, #8
   15342:	46bd      	mov	sp, r7
   15344:	bdb0      	pop	{r4, r5, r7, pc}
   15346:	bf00      	nop
   15348:	00019219 	.word	0x00019219
   1534c:	00015805 	.word	0x00015805
   15350:	20009bd8 	.word	0x20009bd8
   15354:	20009bd4 	.word	0x20009bd4

00015358 <_ZN18FlapperValve_ClassD1Ev>:
	//i2cDescr=&I2C_EXPANDER;
	ptrFlapperValveClass=this;
} //FlapperValve_Class

// default destructor
FlapperValve_Class::~FlapperValve_Class()
   15358:	b590      	push	{r4, r7, lr}
   1535a:	b083      	sub	sp, #12
   1535c:	af00      	add	r7, sp, #0
   1535e:	6078      	str	r0, [r7, #4]
   15360:	687b      	ldr	r3, [r7, #4]
   15362:	3344      	adds	r3, #68	; 0x44
   15364:	2b00      	cmp	r3, #0
   15366:	d00c      	beq.n	15382 <_ZN18FlapperValve_ClassD1Ev+0x2a>
   15368:	687b      	ldr	r3, [r7, #4]
   1536a:	3344      	adds	r3, #68	; 0x44
   1536c:	f103 0470 	add.w	r4, r3, #112	; 0x70
   15370:	687b      	ldr	r3, [r7, #4]
   15372:	3344      	adds	r3, #68	; 0x44
   15374:	42a3      	cmp	r3, r4
   15376:	d004      	beq.n	15382 <_ZN18FlapperValve_ClassD1Ev+0x2a>
   15378:	3c1c      	subs	r4, #28
   1537a:	4620      	mov	r0, r4
   1537c:	4b05      	ldr	r3, [pc, #20]	; (15394 <_ZN18FlapperValve_ClassD1Ev+0x3c>)
   1537e:	4798      	blx	r3
   15380:	e7f6      	b.n	15370 <_ZN18FlapperValve_ClassD1Ev+0x18>
   15382:	687b      	ldr	r3, [r7, #4]
   15384:	4618      	mov	r0, r3
   15386:	4b04      	ldr	r3, [pc, #16]	; (15398 <_ZN18FlapperValve_ClassD1Ev+0x40>)
   15388:	4798      	blx	r3
{
} //~FlapperValve_Class
   1538a:	687b      	ldr	r3, [r7, #4]
   1538c:	4618      	mov	r0, r3
   1538e:	370c      	adds	r7, #12
   15390:	46bd      	mov	sp, r7
   15392:	bd90      	pop	{r4, r7, pc}
   15394:	00015819 	.word	0x00015819
   15398:	0001922d 	.word	0x0001922d

0001539c <_ZN18FlapperValve_Class4InitEv>:


bool	FlapperValve_Class::Init(void){
   1539c:	b580      	push	{r7, lr}
   1539e:	b084      	sub	sp, #16
   153a0:	af00      	add	r7, sp, #0
   153a2:	6078      	str	r0, [r7, #4]
	ptrFlapperValveClass=this;
   153a4:	4a26      	ldr	r2, [pc, #152]	; (15440 <_ZN18FlapperValve_Class4InitEv+0xa4>)
   153a6:	687b      	ldr	r3, [r7, #4]
   153a8:	6013      	str	r3, [r2, #0]
		UserParameters up=defaultParameters;
   153aa:	4b26      	ldr	r3, [pc, #152]	; (15444 <_ZN18FlapperValve_Class4InitEv+0xa8>)
   153ac:	781b      	ldrb	r3, [r3, #0]
   153ae:	733b      	strb	r3, [r7, #12]
		offset=up.flapperValveOffset;
   153b0:	7b3a      	ldrb	r2, [r7, #12]
   153b2:	687b      	ldr	r3, [r7, #4]
   153b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
// 		else
// 		{
// 		}
// 		return isOK;
	
		if (simpleExpander->isReady==false)
   153b8:	687b      	ldr	r3, [r7, #4]
   153ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   153be:	781b      	ldrb	r3, [r3, #0]
   153c0:	b2db      	uxtb	r3, r3
   153c2:	f083 0301 	eor.w	r3, r3, #1
   153c6:	b2db      	uxtb	r3, r3
   153c8:	2b00      	cmp	r3, #0
   153ca:	d011      	beq.n	153f0 <_ZN18FlapperValve_Class4InitEv+0x54>
		{
				simpleExpander->Init();
   153cc:	687b      	ldr	r3, [r7, #4]
   153ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   153d2:	4618      	mov	r0, r3
   153d4:	4b1c      	ldr	r3, [pc, #112]	; (15448 <_ZN18FlapperValve_Class4InitEv+0xac>)
   153d6:	4798      	blx	r3
				simpleExpander->SetPortAInput();
   153d8:	687b      	ldr	r3, [r7, #4]
   153da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   153de:	4618      	mov	r0, r3
   153e0:	4b1a      	ldr	r3, [pc, #104]	; (1544c <_ZN18FlapperValve_Class4InitEv+0xb0>)
   153e2:	4798      	blx	r3
				simpleExpander->SetPortBOutput();
   153e4:	687b      	ldr	r3, [r7, #4]
   153e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   153ea:	4618      	mov	r0, r3
   153ec:	4b18      	ldr	r3, [pc, #96]	; (15450 <_ZN18FlapperValve_Class4InitEv+0xb4>)
   153ee:	4798      	blx	r3
		}

		if (simpleExpander->isReady)
   153f0:	687b      	ldr	r3, [r7, #4]
   153f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   153f6:	781b      	ldrb	r3, [r3, #0]
   153f8:	b2db      	uxtb	r3, r3
   153fa:	2b00      	cmp	r3, #0
   153fc:	d01a      	beq.n	15434 <_ZN18FlapperValve_Class4InitEv+0x98>
		{
			if (valveID==1)
   153fe:	687b      	ldr	r3, [r7, #4]
   15400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   15404:	2b01      	cmp	r3, #1
   15406:	d104      	bne.n	15412 <_ZN18FlapperValve_Class4InitEv+0x76>
			{
				ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
   15408:	4912      	ldr	r1, [pc, #72]	; (15454 <_ZN18FlapperValve_Class4InitEv+0xb8>)
   1540a:	2004      	movs	r0, #4
   1540c:	4b12      	ldr	r3, [pc, #72]	; (15458 <_ZN18FlapperValve_Class4InitEv+0xbc>)
   1540e:	4798      	blx	r3
   15410:	e008      	b.n	15424 <_ZN18FlapperValve_Class4InitEv+0x88>
			}
			else if  (valveID==2)
   15412:	687b      	ldr	r3, [r7, #4]
   15414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   15418:	2b02      	cmp	r3, #2
   1541a:	d103      	bne.n	15424 <_ZN18FlapperValve_Class4InitEv+0x88>
			{
				ext_irq_register(PIN_PA05,FUNC_PTR(Fv2StatusChanged));
   1541c:	490f      	ldr	r1, [pc, #60]	; (1545c <_ZN18FlapperValve_Class4InitEv+0xc0>)
   1541e:	2005      	movs	r0, #5
   15420:	4b0d      	ldr	r3, [pc, #52]	; (15458 <_ZN18FlapperValve_Class4InitEv+0xbc>)
   15422:	4798      	blx	r3
			}
		//	InitExpanderArray(valveID);
			isOK=Selftest();
   15424:	6878      	ldr	r0, [r7, #4]
   15426:	4b0e      	ldr	r3, [pc, #56]	; (15460 <_ZN18FlapperValve_Class4InitEv+0xc4>)
   15428:	4798      	blx	r3
   1542a:	4603      	mov	r3, r0
   1542c:	461a      	mov	r2, r3
   1542e:	687b      	ldr	r3, [r7, #4]
   15430:	779a      	strb	r2, [r3, #30]
   15432:	e000      	b.n	15436 <_ZN18FlapperValve_Class4InitEv+0x9a>
		}
		else
		{
			asm("nop");
   15434:	bf00      	nop
		}
// 		return isOK;	


}
   15436:	bf00      	nop
   15438:	4618      	mov	r0, r3
   1543a:	3710      	adds	r7, #16
   1543c:	46bd      	mov	sp, r7
   1543e:	bd80      	pop	{r7, pc}
   15440:	20009bd4 	.word	0x20009bd4
   15444:	00021fe8 	.word	0x00021fe8
   15448:	00015909 	.word	0x00015909
   1544c:	00015a31 	.word	0x00015a31
   15450:	00015a75 	.word	0x00015a75
   15454:	0001529d 	.word	0x0001529d
   15458:	00006869 	.word	0x00006869
   1545c:	000152b5 	.word	0x000152b5
   15460:	00015711 	.word	0x00015711

00015464 <_ZN18FlapperValve_Class13WriteSetpointEh>:
StatusInputs FlapperValve_Class::ReadStatusInputs(void){
	value=expanders[1].ReadGPIORegister();
	statusInputs=FillStatusInputs(value);
	return statusInputs;
}
uint8_t FlapperValve_Class::WriteSetpoint(uint8_t sp){
   15464:	b580      	push	{r7, lr}
   15466:	b082      	sub	sp, #8
   15468:	af00      	add	r7, sp, #0
   1546a:	6078      	str	r0, [r7, #4]
   1546c:	460b      	mov	r3, r1
   1546e:	70fb      	strb	r3, [r7, #3]
	//setpointPosition= expanders[2].WriteGPIORegister(sp);
	setpointPosition= simpleExpander->WriteRegisterB(sp) ;
   15470:	687b      	ldr	r3, [r7, #4]
   15472:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   15476:	78fa      	ldrb	r2, [r7, #3]
   15478:	4611      	mov	r1, r2
   1547a:	4618      	mov	r0, r3
   1547c:	4b06      	ldr	r3, [pc, #24]	; (15498 <_ZN18FlapperValve_Class13WriteSetpointEh+0x34>)
   1547e:	4798      	blx	r3
   15480:	4603      	mov	r3, r0
   15482:	461a      	mov	r2, r3
   15484:	687b      	ldr	r3, [r7, #4]
   15486:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	return setpointPosition;
   1548a:	687b      	ldr	r3, [r7, #4]
   1548c:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
}
   15490:	4618      	mov	r0, r3
   15492:	3708      	adds	r7, #8
   15494:	46bd      	mov	sp, r7
   15496:	bd80      	pop	{r7, pc}
   15498:	00015a09 	.word	0x00015a09

0001549c <_ZN18FlapperValve_Class17SetOffsetPositionEv>:
uint8_t FlapperValve_Class::SetOffsetPosition(void){
   1549c:	b590      	push	{r4, r7, lr}
   1549e:	b083      	sub	sp, #12
   154a0:	af00      	add	r7, sp, #0
   154a2:	6078      	str	r0, [r7, #4]
		WriteSetpoint(offset);
   154a4:	687b      	ldr	r3, [r7, #4]
   154a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   154aa:	4619      	mov	r1, r3
   154ac:	6878      	ldr	r0, [r7, #4]
   154ae:	4b27      	ldr	r3, [pc, #156]	; (1554c <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb0>)
   154b0:	4798      	blx	r3
		regulatorTimeout=false;
   154b2:	687b      	ldr	r3, [r7, #4]
   154b4:	2200      	movs	r2, #0
   154b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		hvacTimer.Start_oneShot_task(FUNC_PTR(RegulatorTimeout),1000*60*1);
   154ba:	f64e 2260 	movw	r2, #60000	; 0xea60
   154be:	4924      	ldr	r1, [pc, #144]	; (15550 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb4>)
   154c0:	4824      	ldr	r0, [pc, #144]	; (15554 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb8>)
   154c2:	4b25      	ldr	r3, [pc, #148]	; (15558 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xbc>)
   154c4:	4798      	blx	r3
		while ((!regulatorTimeout)&&(abs(ReadActualPosition()-setpointPosition)>3)){
   154c6:	687b      	ldr	r3, [r7, #4]
   154c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   154cc:	b2db      	uxtb	r3, r3
   154ce:	f083 0301 	eor.w	r3, r3, #1
   154d2:	b2db      	uxtb	r3, r3
   154d4:	2b00      	cmp	r3, #0
   154d6:	d021      	beq.n	1551c <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x80>
   154d8:	6878      	ldr	r0, [r7, #4]
   154da:	4b20      	ldr	r3, [pc, #128]	; (1555c <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc0>)
   154dc:	4798      	blx	r3
   154de:	4603      	mov	r3, r0
   154e0:	461a      	mov	r2, r3
   154e2:	687b      	ldr	r3, [r7, #4]
   154e4:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   154e8:	1ad3      	subs	r3, r2, r3
   154ea:	2b00      	cmp	r3, #0
   154ec:	dd09      	ble.n	15502 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x66>
   154ee:	6878      	ldr	r0, [r7, #4]
   154f0:	4b1a      	ldr	r3, [pc, #104]	; (1555c <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc0>)
   154f2:	4798      	blx	r3
   154f4:	4603      	mov	r3, r0
   154f6:	461a      	mov	r2, r3
   154f8:	687b      	ldr	r3, [r7, #4]
   154fa:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   154fe:	1ad3      	subs	r3, r2, r3
   15500:	e008      	b.n	15514 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x78>
   15502:	687b      	ldr	r3, [r7, #4]
   15504:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   15508:	461c      	mov	r4, r3
   1550a:	6878      	ldr	r0, [r7, #4]
   1550c:	4b13      	ldr	r3, [pc, #76]	; (1555c <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc0>)
   1550e:	4798      	blx	r3
   15510:	4603      	mov	r3, r0
   15512:	1ae3      	subs	r3, r4, r3
   15514:	2b03      	cmp	r3, #3
   15516:	dd01      	ble.n	1551c <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x80>
   15518:	2301      	movs	r3, #1
   1551a:	e000      	b.n	1551e <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x82>
   1551c:	2300      	movs	r3, #0
   1551e:	2b00      	cmp	r3, #0
   15520:	d009      	beq.n	15536 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x9a>
			arinc.SaveFlapperValveAngle();
   15522:	480f      	ldr	r0, [pc, #60]	; (15560 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc4>)
   15524:	4b0f      	ldr	r3, [pc, #60]	; (15564 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc8>)
   15526:	4798      	blx	r3
			delay_ms(50);
   15528:	2032      	movs	r0, #50	; 0x32
   1552a:	4b0f      	ldr	r3, [pc, #60]	; (15568 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xcc>)
   1552c:	4798      	blx	r3
			arinc.TransmitTXBuffer();
   1552e:	480c      	ldr	r0, [pc, #48]	; (15560 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xc4>)
   15530:	4b0e      	ldr	r3, [pc, #56]	; (1556c <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xd0>)
   15532:	4798      	blx	r3
		while ((!regulatorTimeout)&&(abs(ReadActualPosition()-setpointPosition)>3)){
   15534:	e7c7      	b.n	154c6 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0x2a>
			
		}
		hvacTimer.Remove_task(FUNC_PTR(RegulatorTimeout));
   15536:	4906      	ldr	r1, [pc, #24]	; (15550 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb4>)
   15538:	4806      	ldr	r0, [pc, #24]	; (15554 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xb8>)
   1553a:	4b0d      	ldr	r3, [pc, #52]	; (15570 <_ZN18FlapperValve_Class17SetOffsetPositionEv+0xd4>)
   1553c:	4798      	blx	r3
		return actualPosition;
   1553e:	687b      	ldr	r3, [r7, #4]
   15540:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
		
}
   15544:	4618      	mov	r0, r3
   15546:	370c      	adds	r7, #12
   15548:	46bd      	mov	sp, r7
   1554a:	bd90      	pop	{r4, r7, pc}
   1554c:	00015465 	.word	0x00015465
   15550:	000152d1 	.word	0x000152d1
   15554:	2000a478 	.word	0x2000a478
   15558:	00017d81 	.word	0x00017d81
   1555c:	00015669 	.word	0x00015669
   15560:	20008ff0 	.word	0x20008ff0
   15564:	00012cf9 	.word	0x00012cf9
   15568:	000067d5 	.word	0x000067d5
   1556c:	00013d09 	.word	0x00013d09
   15570:	00017d11 	.word	0x00017d11

00015574 <_ZN18FlapperValve_Class20SetVentilatePositionEv>:
uint8_t FlapperValve_Class::SetVentilatePosition(void){
   15574:	b590      	push	{r4, r7, lr}
   15576:	b083      	sub	sp, #12
   15578:	af00      	add	r7, sp, #0
   1557a:	6078      	str	r0, [r7, #4]
	WriteSetpoint(0xff-offset);
   1557c:	687b      	ldr	r3, [r7, #4]
   1557e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   15582:	43db      	mvns	r3, r3
   15584:	b2db      	uxtb	r3, r3
   15586:	4619      	mov	r1, r3
   15588:	6878      	ldr	r0, [r7, #4]
   1558a:	4b27      	ldr	r3, [pc, #156]	; (15628 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xb4>)
   1558c:	4798      	blx	r3
	regulatorTimeout=false;
   1558e:	687b      	ldr	r3, [r7, #4]
   15590:	2200      	movs	r2, #0
   15592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	hvacTimer.Start_oneShot_task(FUNC_PTR(RegulatorTimeout),1000*60);
   15596:	f64e 2260 	movw	r2, #60000	; 0xea60
   1559a:	4924      	ldr	r1, [pc, #144]	; (1562c <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xb8>)
   1559c:	4824      	ldr	r0, [pc, #144]	; (15630 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xbc>)
   1559e:	4b25      	ldr	r3, [pc, #148]	; (15634 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xc0>)
   155a0:	4798      	blx	r3
	while ((!regulatorTimeout)&&(abs(ReadActualPosition()-setpointPosition)>3)){
   155a2:	687b      	ldr	r3, [r7, #4]
   155a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   155a8:	b2db      	uxtb	r3, r3
   155aa:	f083 0301 	eor.w	r3, r3, #1
   155ae:	b2db      	uxtb	r3, r3
   155b0:	2b00      	cmp	r3, #0
   155b2:	d021      	beq.n	155f8 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x84>
   155b4:	6878      	ldr	r0, [r7, #4]
   155b6:	4b20      	ldr	r3, [pc, #128]	; (15638 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xc4>)
   155b8:	4798      	blx	r3
   155ba:	4603      	mov	r3, r0
   155bc:	461a      	mov	r2, r3
   155be:	687b      	ldr	r3, [r7, #4]
   155c0:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   155c4:	1ad3      	subs	r3, r2, r3
   155c6:	2b00      	cmp	r3, #0
   155c8:	dd09      	ble.n	155de <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x6a>
   155ca:	6878      	ldr	r0, [r7, #4]
   155cc:	4b1a      	ldr	r3, [pc, #104]	; (15638 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xc4>)
   155ce:	4798      	blx	r3
   155d0:	4603      	mov	r3, r0
   155d2:	461a      	mov	r2, r3
   155d4:	687b      	ldr	r3, [r7, #4]
   155d6:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   155da:	1ad3      	subs	r3, r2, r3
   155dc:	e008      	b.n	155f0 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x7c>
   155de:	687b      	ldr	r3, [r7, #4]
   155e0:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   155e4:	461c      	mov	r4, r3
   155e6:	6878      	ldr	r0, [r7, #4]
   155e8:	4b13      	ldr	r3, [pc, #76]	; (15638 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xc4>)
   155ea:	4798      	blx	r3
   155ec:	4603      	mov	r3, r0
   155ee:	1ae3      	subs	r3, r4, r3
   155f0:	2b03      	cmp	r3, #3
   155f2:	dd01      	ble.n	155f8 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x84>
   155f4:	2301      	movs	r3, #1
   155f6:	e000      	b.n	155fa <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x86>
   155f8:	2300      	movs	r3, #0
   155fa:	2b00      	cmp	r3, #0
   155fc:	d009      	beq.n	15612 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x9e>
			arinc.SaveFlapperValveAngle();
   155fe:	480f      	ldr	r0, [pc, #60]	; (1563c <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xc8>)
   15600:	4b0f      	ldr	r3, [pc, #60]	; (15640 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xcc>)
   15602:	4798      	blx	r3
			delay_ms(50);
   15604:	2032      	movs	r0, #50	; 0x32
   15606:	4b0f      	ldr	r3, [pc, #60]	; (15644 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xd0>)
   15608:	4798      	blx	r3
			arinc.TransmitTXBuffer();
   1560a:	480c      	ldr	r0, [pc, #48]	; (1563c <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xc8>)
   1560c:	4b0e      	ldr	r3, [pc, #56]	; (15648 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xd4>)
   1560e:	4798      	blx	r3
	while ((!regulatorTimeout)&&(abs(ReadActualPosition()-setpointPosition)>3)){
   15610:	e7c7      	b.n	155a2 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0x2e>
	}
	hvacTimer.Remove_task(FUNC_PTR(RegulatorTimeout));
   15612:	4906      	ldr	r1, [pc, #24]	; (1562c <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xb8>)
   15614:	4806      	ldr	r0, [pc, #24]	; (15630 <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xbc>)
   15616:	4b0d      	ldr	r3, [pc, #52]	; (1564c <_ZN18FlapperValve_Class20SetVentilatePositionEv+0xd8>)
   15618:	4798      	blx	r3
	return actualPosition;
   1561a:	687b      	ldr	r3, [r7, #4]
   1561c:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
	
}
   15620:	4618      	mov	r0, r3
   15622:	370c      	adds	r7, #12
   15624:	46bd      	mov	sp, r7
   15626:	bd90      	pop	{r4, r7, pc}
   15628:	00015465 	.word	0x00015465
   1562c:	000152d1 	.word	0x000152d1
   15630:	2000a478 	.word	0x2000a478
   15634:	00017d81 	.word	0x00017d81
   15638:	00015669 	.word	0x00015669
   1563c:	20008ff0 	.word	0x20008ff0
   15640:	00012cf9 	.word	0x00012cf9
   15644:	000067d5 	.word	0x000067d5
   15648:	00013d09 	.word	0x00013d09
   1564c:	00017d11 	.word	0x00017d11

00015650 <_ZN18FlapperValve_Class15GetCurrentAngleEv>:
uint8_t FlapperValve_Class::ReadSetpoint(){
	setpointPosition= expanders[2].ReadGPIORegister();
	return setpointPosition;
}
uint8_t FlapperValve_Class::GetCurrentAngle(void){
   15650:	b480      	push	{r7}
   15652:	b083      	sub	sp, #12
   15654:	af00      	add	r7, sp, #0
   15656:	6078      	str	r0, [r7, #4]
	return actualPosition;
   15658:	687b      	ldr	r3, [r7, #4]
   1565a:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
}
   1565e:	4618      	mov	r0, r3
   15660:	370c      	adds	r7, #12
   15662:	46bd      	mov	sp, r7
   15664:	bc80      	pop	{r7}
   15666:	4770      	bx	lr

00015668 <_ZN18FlapperValve_Class18ReadActualPositionEv>:
uint8_t FlapperValve_Class::ReadActualPosition(void){
   15668:	b580      	push	{r7, lr}
   1566a:	b082      	sub	sp, #8
   1566c:	af00      	add	r7, sp, #0
   1566e:	6078      	str	r0, [r7, #4]
/*	actualPosition= expanders[3].ReadGPIORegister();*/
	lastPosition=actualPosition;
   15670:	687b      	ldr	r3, [r7, #4]
   15672:	f893 20cf 	ldrb.w	r2, [r3, #207]	; 0xcf
   15676:	687b      	ldr	r3, [r7, #4]
   15678:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
   1567c:	687b      	ldr	r3, [r7, #4]
   1567e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   15682:	2112      	movs	r1, #18
   15684:	4618      	mov	r0, r3
   15686:	4b13      	ldr	r3, [pc, #76]	; (156d4 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x6c>)
   15688:	4798      	blx	r3
   1568a:	4603      	mov	r3, r0
   1568c:	461a      	mov	r2, r3
   1568e:	687b      	ldr	r3, [r7, #4]
   15690:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
	if (actualPosition>200)
   15694:	687b      	ldr	r3, [r7, #4]
   15696:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   1569a:	2bc8      	cmp	r3, #200	; 0xc8
   1569c:	dd04      	ble.n	156a8 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x40>
	{
		statusFlapperValve=RECYCLE;
   1569e:	687b      	ldr	r3, [r7, #4]
   156a0:	2202      	movs	r2, #2
   156a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   156a6:	e00d      	b.n	156c4 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x5c>
	}else if (actualPosition>100)
   156a8:	687b      	ldr	r3, [r7, #4]
   156aa:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
   156ae:	2b64      	cmp	r3, #100	; 0x64
   156b0:	dd04      	ble.n	156bc <_ZN18FlapperValve_Class18ReadActualPositionEv+0x54>
	{
		statusFlapperValve=INTERM;
   156b2:	687b      	ldr	r3, [r7, #4]
   156b4:	2201      	movs	r2, #1
   156b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   156ba:	e003      	b.n	156c4 <_ZN18FlapperValve_Class18ReadActualPositionEv+0x5c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR;
   156bc:	687b      	ldr	r3, [r7, #4]
   156be:	2200      	movs	r2, #0
   156c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	}
	return actualPosition;
   156c4:	687b      	ldr	r3, [r7, #4]
   156c6:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
}
   156ca:	4618      	mov	r0, r3
   156cc:	3708      	adds	r7, #8
   156ce:	46bd      	mov	sp, r7
   156d0:	bd80      	pop	{r7, pc}
   156d2:	bf00      	nop
   156d4:	00015995 	.word	0x00015995

000156d8 <_ZN18FlapperValve_Class17IsPositionChangedEv>:
void FlapperValve_Class::UpdateFlapperValveData(){
	fvData.controlStatus=ReadControlStatus();
	fvData.statusInputs=ReadStatusInputs();
	fvData.actualPosition=ReadActualPosition();
}
bool FlapperValve_Class::IsPositionChanged(void){
   156d8:	b590      	push	{r4, r7, lr}
   156da:	b083      	sub	sp, #12
   156dc:	af00      	add	r7, sp, #0
   156de:	6078      	str	r0, [r7, #4]
	if (lastPosition==ReadActualPosition())
   156e0:	687b      	ldr	r3, [r7, #4]
   156e2:	f893 40d0 	ldrb.w	r4, [r3, #208]	; 0xd0
   156e6:	6878      	ldr	r0, [r7, #4]
   156e8:	4b08      	ldr	r3, [pc, #32]	; (1570c <_ZN18FlapperValve_Class17IsPositionChangedEv+0x34>)
   156ea:	4798      	blx	r3
   156ec:	4603      	mov	r3, r0
   156ee:	429c      	cmp	r4, r3
   156f0:	bf0c      	ite	eq
   156f2:	2301      	moveq	r3, #1
   156f4:	2300      	movne	r3, #0
   156f6:	b2db      	uxtb	r3, r3
   156f8:	2b00      	cmp	r3, #0
   156fa:	d001      	beq.n	15700 <_ZN18FlapperValve_Class17IsPositionChangedEv+0x28>
	{
		return false;
   156fc:	2300      	movs	r3, #0
   156fe:	e000      	b.n	15702 <_ZN18FlapperValve_Class17IsPositionChangedEv+0x2a>
	} 
	else
	{
		return true;
   15700:	2301      	movs	r3, #1
	}
	return true;
}
   15702:	4618      	mov	r0, r3
   15704:	370c      	adds	r7, #12
   15706:	46bd      	mov	sp, r7
   15708:	bd90      	pop	{r4, r7, pc}
   1570a:	bf00      	nop
   1570c:	00015669 	.word	0x00015669

00015710 <_ZN18FlapperValve_Class8SelftestEv>:
bool FlapperValve_Class::Selftest(void){
   15710:	b590      	push	{r4, r7, lr}
   15712:	b083      	sub	sp, #12
   15714:	af00      	add	r7, sp, #0
   15716:	6078      	str	r0, [r7, #4]

	SetOffsetPosition();
   15718:	6878      	ldr	r0, [r7, #4]
   1571a:	4b18      	ldr	r3, [pc, #96]	; (1577c <_ZN18FlapperValve_Class8SelftestEv+0x6c>)
   1571c:	4798      	blx	r3
	//UpdateFlapperValveData();
	isOK=abs(ReadActualPosition()-setpointPosition)<4;
   1571e:	6878      	ldr	r0, [r7, #4]
   15720:	4b17      	ldr	r3, [pc, #92]	; (15780 <_ZN18FlapperValve_Class8SelftestEv+0x70>)
   15722:	4798      	blx	r3
   15724:	4603      	mov	r3, r0
   15726:	461a      	mov	r2, r3
   15728:	687b      	ldr	r3, [r7, #4]
   1572a:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   1572e:	1ad3      	subs	r3, r2, r3
   15730:	2b00      	cmp	r3, #0
   15732:	dd0e      	ble.n	15752 <_ZN18FlapperValve_Class8SelftestEv+0x42>
   15734:	6878      	ldr	r0, [r7, #4]
   15736:	4b12      	ldr	r3, [pc, #72]	; (15780 <_ZN18FlapperValve_Class8SelftestEv+0x70>)
   15738:	4798      	blx	r3
   1573a:	4603      	mov	r3, r0
   1573c:	461a      	mov	r2, r3
   1573e:	687b      	ldr	r3, [r7, #4]
   15740:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   15744:	1ad3      	subs	r3, r2, r3
   15746:	2b03      	cmp	r3, #3
   15748:	bfd4      	ite	le
   1574a:	2301      	movle	r3, #1
   1574c:	2300      	movgt	r3, #0
   1574e:	b2db      	uxtb	r3, r3
   15750:	e00d      	b.n	1576e <_ZN18FlapperValve_Class8SelftestEv+0x5e>
   15752:	687b      	ldr	r3, [r7, #4]
   15754:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   15758:	461c      	mov	r4, r3
   1575a:	6878      	ldr	r0, [r7, #4]
   1575c:	4b08      	ldr	r3, [pc, #32]	; (15780 <_ZN18FlapperValve_Class8SelftestEv+0x70>)
   1575e:	4798      	blx	r3
   15760:	4603      	mov	r3, r0
   15762:	1ae3      	subs	r3, r4, r3
   15764:	2b03      	cmp	r3, #3
   15766:	bfd4      	ite	le
   15768:	2301      	movle	r3, #1
   1576a:	2300      	movgt	r3, #0
   1576c:	b2db      	uxtb	r3, r3
   1576e:	687a      	ldr	r2, [r7, #4]
   15770:	7793      	strb	r3, [r2, #30]
	//return isOK;
	return true;
   15772:	2301      	movs	r3, #1
}
   15774:	4618      	mov	r0, r3
   15776:	370c      	adds	r7, #12
   15778:	46bd      	mov	sp, r7
   1577a:	bd90      	pop	{r4, r7, pc}
   1577c:	0001549d 	.word	0x0001549d
   15780:	00015669 	.word	0x00015669

00015784 <_Z41__static_initialization_and_destruction_0ii>:

FlapperValve_Class::operator bool(){
	return	isOK;
}

   15784:	b580      	push	{r7, lr}
   15786:	b082      	sub	sp, #8
   15788:	af00      	add	r7, sp, #0
   1578a:	6078      	str	r0, [r7, #4]
   1578c:	6039      	str	r1, [r7, #0]
   1578e:	687b      	ldr	r3, [r7, #4]
   15790:	2b01      	cmp	r3, #1
   15792:	d116      	bne.n	157c2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
   15794:	683b      	ldr	r3, [r7, #0]
   15796:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1579a:	4293      	cmp	r3, r2
   1579c:	d111      	bne.n	157c2 <_Z41__static_initialization_and_destruction_0ii+0x3e>
static MCP23017_Class staticExpander(&I2C_EXPANDER);
   1579e:	490b      	ldr	r1, [pc, #44]	; (157cc <_Z41__static_initialization_and_destruction_0ii+0x48>)
   157a0:	480b      	ldr	r0, [pc, #44]	; (157d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   157a2:	4b0c      	ldr	r3, [pc, #48]	; (157d4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   157a4:	4798      	blx	r3
   157a6:	4a0c      	ldr	r2, [pc, #48]	; (157d8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   157a8:	490c      	ldr	r1, [pc, #48]	; (157dc <_Z41__static_initialization_and_destruction_0ii+0x58>)
   157aa:	4809      	ldr	r0, [pc, #36]	; (157d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   157ac:	4b0c      	ldr	r3, [pc, #48]	; (157e0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   157ae:	4798      	blx	r3
   157b0:	2101      	movs	r1, #1
   157b2:	480c      	ldr	r0, [pc, #48]	; (157e4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   157b4:	4b0c      	ldr	r3, [pc, #48]	; (157e8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   157b6:	4798      	blx	r3
   157b8:	4a07      	ldr	r2, [pc, #28]	; (157d8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   157ba:	490c      	ldr	r1, [pc, #48]	; (157ec <_Z41__static_initialization_and_destruction_0ii+0x68>)
   157bc:	4809      	ldr	r0, [pc, #36]	; (157e4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   157be:	4b08      	ldr	r3, [pc, #32]	; (157e0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   157c0:	4798      	blx	r3
   157c2:	bf00      	nop
   157c4:	3708      	adds	r7, #8
   157c6:	46bd      	mov	sp, r7
   157c8:	bd80      	pop	{r7, pc}
   157ca:	bf00      	nop
   157cc:	2000a888 	.word	0x2000a888
   157d0:	20009bd8 	.word	0x20009bd8
   157d4:	00015845 	.word	0x00015845
   157d8:	20000000 	.word	0x20000000
   157dc:	00015889 	.word	0x00015889
   157e0:	00019d1d 	.word	0x00019d1d
   157e4:	20009c38 	.word	0x20009c38
   157e8:	000152f5 	.word	0x000152f5
   157ec:	00015359 	.word	0x00015359

000157f0 <_GLOBAL__sub_I_ptrFlapperValveClass>:
   157f0:	b580      	push	{r7, lr}
   157f2:	af00      	add	r7, sp, #0
   157f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   157f8:	2001      	movs	r0, #1
   157fa:	4b01      	ldr	r3, [pc, #4]	; (15800 <_GLOBAL__sub_I_ptrFlapperValveClass+0x10>)
   157fc:	4798      	blx	r3
   157fe:	bd80      	pop	{r7, pc}
   15800:	00015785 	.word	0x00015785

00015804 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   15804:	b480      	push	{r7}
   15806:	b083      	sub	sp, #12
   15808:	af00      	add	r7, sp, #0
   1580a:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   1580c:	687b      	ldr	r3, [r7, #4]
   1580e:	4618      	mov	r0, r3
   15810:	370c      	adds	r7, #12
   15812:	46bd      	mov	sp, r7
   15814:	bc80      	pop	{r7}
   15816:	4770      	bx	lr

00015818 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   15818:	b480      	push	{r7}
   1581a:	b083      	sub	sp, #12
   1581c:	af00      	add	r7, sp, #0
   1581e:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   15820:	687b      	ldr	r3, [r7, #4]
   15822:	4618      	mov	r0, r3
   15824:	370c      	adds	r7, #12
   15826:	46bd      	mov	sp, r7
   15828:	bc80      	pop	{r7}
   1582a:	4770      	bx	lr

0001582c <_ZL13MCPHadChangedv>:


MCP23017_Class	*ptrMCP23017Class;
static I2C_Sync_Class  i2cStatic;

static void	MCPHadChanged(void){
   1582c:	b480      	push	{r7}
   1582e:	af00      	add	r7, sp, #0
	
			ptrMCP23017Class->hasChanged=true;
   15830:	4b03      	ldr	r3, [pc, #12]	; (15840 <_ZL13MCPHadChangedv+0x14>)
   15832:	681b      	ldr	r3, [r3, #0]
   15834:	2201      	movs	r2, #1
   15836:	705a      	strb	r2, [r3, #1]

}
   15838:	bf00      	nop
   1583a:	46bd      	mov	sp, r7
   1583c:	bc80      	pop	{r7}
   1583e:	4770      	bx	lr
   15840:	20009d0c 	.word	0x20009d0c

00015844 <_ZN14MCP23017_ClassC1EP15i2c_m_sync_desc>:
{
	ptrI2CAsynDescr=i2cDes;
	ptrMCP23017Class=this;
} //AT24MAC_Class

MCP23017_Class::MCP23017_Class(i2c_m_sync_desc *i2cDes)
   15844:	b580      	push	{r7, lr}
   15846:	b082      	sub	sp, #8
   15848:	af00      	add	r7, sp, #0
   1584a:	6078      	str	r0, [r7, #4]
   1584c:	6039      	str	r1, [r7, #0]
   1584e:	687b      	ldr	r3, [r7, #4]
   15850:	3304      	adds	r3, #4
   15852:	4618      	mov	r0, r3
   15854:	4b09      	ldr	r3, [pc, #36]	; (1587c <_ZN14MCP23017_ClassC1EP15i2c_m_sync_desc+0x38>)
   15856:	4798      	blx	r3
{
	ptrI2CDescr=i2cDes;
   15858:	687b      	ldr	r3, [r7, #4]
   1585a:	683a      	ldr	r2, [r7, #0]
   1585c:	64da      	str	r2, [r3, #76]	; 0x4c
	ptrMCP23017Class=this;
   1585e:	4a08      	ldr	r2, [pc, #32]	; (15880 <_ZN14MCP23017_ClassC1EP15i2c_m_sync_desc+0x3c>)
   15860:	687b      	ldr	r3, [r7, #4]
   15862:	6013      	str	r3, [r2, #0]
	isReady=false;
   15864:	687b      	ldr	r3, [r7, #4]
   15866:	2200      	movs	r2, #0
   15868:	701a      	strb	r2, [r3, #0]
	i2c=&i2cStatic;
   1586a:	687b      	ldr	r3, [r7, #4]
   1586c:	4a05      	ldr	r2, [pc, #20]	; (15884 <_ZN14MCP23017_ClassC1EP15i2c_m_sync_desc+0x40>)
   1586e:	651a      	str	r2, [r3, #80]	; 0x50
} //AT24MAC_Class
   15870:	687b      	ldr	r3, [r7, #4]
   15872:	4618      	mov	r0, r3
   15874:	3708      	adds	r7, #8
   15876:	46bd      	mov	sp, r7
   15878:	bd80      	pop	{r7, pc}
   1587a:	bf00      	nop
   1587c:	00018e89 	.word	0x00018e89
   15880:	20009d0c 	.word	0x20009d0c
   15884:	20009d10 	.word	0x20009d10

00015888 <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
   15888:	b580      	push	{r7, lr}
   1588a:	b082      	sub	sp, #8
   1588c:	af00      	add	r7, sp, #0
   1588e:	6078      	str	r0, [r7, #4]
   15890:	687b      	ldr	r3, [r7, #4]
   15892:	3304      	adds	r3, #4
   15894:	4618      	mov	r0, r3
   15896:	4b03      	ldr	r3, [pc, #12]	; (158a4 <_ZN14MCP23017_ClassD1Ev+0x1c>)
   15898:	4798      	blx	r3
{
} //~AT24MAC_Class
   1589a:	687b      	ldr	r3, [r7, #4]
   1589c:	4618      	mov	r0, r3
   1589e:	3708      	adds	r7, #8
   158a0:	46bd      	mov	sp, r7
   158a2:	bd80      	pop	{r7, pc}
   158a4:	00018eb9 	.word	0x00018eb9

000158a8 <_ZN14MCP23017_Class4InitEh>:

void MCP23017_Class::Init(uint8_t addr) {
   158a8:	b580      	push	{r7, lr}
   158aa:	b082      	sub	sp, #8
   158ac:	af00      	add	r7, sp, #0
   158ae:	6078      	str	r0, [r7, #4]
   158b0:	460b      	mov	r3, r1
   158b2:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   158b4:	687b      	ldr	r3, [r7, #4]
   158b6:	78fa      	ldrb	r2, [r7, #3]
   158b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	i2c->SetDescriptor(ptrI2CDescr);
   158bc:	687b      	ldr	r3, [r7, #4]
   158be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   158c0:	687b      	ldr	r3, [r7, #4]
   158c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   158c4:	4619      	mov	r1, r3
   158c6:	4610      	mov	r0, r2
   158c8:	4b0b      	ldr	r3, [pc, #44]	; (158f8 <_ZN14MCP23017_Class4InitEh+0x50>)
   158ca:	4798      	blx	r3
	isReady=i2c->Init(addr)==0;
   158cc:	687b      	ldr	r3, [r7, #4]
   158ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   158d0:	78fa      	ldrb	r2, [r7, #3]
   158d2:	4611      	mov	r1, r2
   158d4:	4618      	mov	r0, r3
   158d6:	4b09      	ldr	r3, [pc, #36]	; (158fc <_ZN14MCP23017_Class4InitEh+0x54>)
   158d8:	4798      	blx	r3
   158da:	4603      	mov	r3, r0
   158dc:	f083 0301 	eor.w	r3, r3, #1
   158e0:	b2da      	uxtb	r2, r3
   158e2:	687b      	ldr	r3, [r7, #4]
   158e4:	701a      	strb	r2, [r3, #0]
	ext_irq_register(PIN_PA04,FUNC_PTR(MCPHadChanged));
   158e6:	4906      	ldr	r1, [pc, #24]	; (15900 <_ZN14MCP23017_Class4InitEh+0x58>)
   158e8:	2004      	movs	r0, #4
   158ea:	4b06      	ldr	r3, [pc, #24]	; (15904 <_ZN14MCP23017_Class4InitEh+0x5c>)
   158ec:	4798      	blx	r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   158ee:	bf00      	nop
   158f0:	3708      	adds	r7, #8
   158f2:	46bd      	mov	sp, r7
   158f4:	bd80      	pop	{r7, pc}
   158f6:	bf00      	nop
   158f8:	0001517d 	.word	0x0001517d
   158fc:	00015201 	.word	0x00015201
   15900:	0001582d 	.word	0x0001582d
   15904:	00006869 	.word	0x00006869

00015908 <_ZN14MCP23017_Class4InitEv>:


/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
bool MCP23017_Class::Init(void) {
   15908:	b580      	push	{r7, lr}
   1590a:	b082      	sub	sp, #8
   1590c:	af00      	add	r7, sp, #0
   1590e:	6078      	str	r0, [r7, #4]
    Init((uint8_t)MCP23017_ADDRESS);
   15910:	2127      	movs	r1, #39	; 0x27
   15912:	6878      	ldr	r0, [r7, #4]
   15914:	4b0a      	ldr	r3, [pc, #40]	; (15940 <_ZN14MCP23017_Class4InitEv+0x38>)
   15916:	4798      	blx	r3
	isOK=i2c->isOK;
   15918:	687b      	ldr	r3, [r7, #4]
   1591a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1591c:	7a5b      	ldrb	r3, [r3, #9]
   1591e:	b2da      	uxtb	r2, r3
   15920:	687b      	ldr	r3, [r7, #4]
   15922:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	isReady=isOK;
   15926:	687b      	ldr	r3, [r7, #4]
   15928:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
   1592c:	687b      	ldr	r3, [r7, #4]
   1592e:	701a      	strb	r2, [r3, #0]
	return	isOK;	
   15930:	687b      	ldr	r3, [r7, #4]
   15932:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
}
   15936:	4618      	mov	r0, r3
   15938:	3708      	adds	r7, #8
   1593a:	46bd      	mov	sp, r7
   1593c:	bd80      	pop	{r7, pc}
   1593e:	bf00      	nop
   15940:	000158a9 	.word	0x000158a9

00015944 <_ZN14MCP23017_Class9bitForPinEh>:
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23017_Class::bitForPin(uint8_t pin){
   15944:	b480      	push	{r7}
   15946:	b083      	sub	sp, #12
   15948:	af00      	add	r7, sp, #0
   1594a:	6078      	str	r0, [r7, #4]
   1594c:	460b      	mov	r3, r1
   1594e:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   15950:	78fb      	ldrb	r3, [r7, #3]
   15952:	f003 0307 	and.w	r3, r3, #7
   15956:	b2db      	uxtb	r3, r3
}
   15958:	4618      	mov	r0, r3
   1595a:	370c      	adds	r7, #12
   1595c:	46bd      	mov	sp, r7
   1595e:	bc80      	pop	{r7}
   15960:	4770      	bx	lr

00015962 <_ZN14MCP23017_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23017_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   15962:	b480      	push	{r7}
   15964:	b083      	sub	sp, #12
   15966:	af00      	add	r7, sp, #0
   15968:	6078      	str	r0, [r7, #4]
   1596a:	4608      	mov	r0, r1
   1596c:	4611      	mov	r1, r2
   1596e:	461a      	mov	r2, r3
   15970:	4603      	mov	r3, r0
   15972:	70fb      	strb	r3, [r7, #3]
   15974:	460b      	mov	r3, r1
   15976:	70bb      	strb	r3, [r7, #2]
   15978:	4613      	mov	r3, r2
   1597a:	707b      	strb	r3, [r7, #1]
    return(pin<8) ?portAaddr:portBaddr;
   1597c:	78fb      	ldrb	r3, [r7, #3]
   1597e:	2b07      	cmp	r3, #7
   15980:	dc01      	bgt.n	15986 <_ZN14MCP23017_Class9regForPinEhhh+0x24>
   15982:	78bb      	ldrb	r3, [r7, #2]
   15984:	e000      	b.n	15988 <_ZN14MCP23017_Class9regForPinEhhh+0x26>
   15986:	787b      	ldrb	r3, [r7, #1]
}
   15988:	4618      	mov	r0, r3
   1598a:	370c      	adds	r7, #12
   1598c:	46bd      	mov	sp, r7
   1598e:	bc80      	pop	{r7}
   15990:	4770      	bx	lr
	...

00015994 <_ZN14MCP23017_Class12ReadRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23017_Class::ReadRegister(uint8_t addr){
   15994:	b580      	push	{r7, lr}
   15996:	b082      	sub	sp, #8
   15998:	af00      	add	r7, sp, #0
   1599a:	6078      	str	r0, [r7, #4]
   1599c:	460b      	mov	r3, r1
   1599e:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);

	//i2c->ReadCommand(addr,&registerValue,1);
	i2c->Write(&addr,1);
   159a0:	687b      	ldr	r3, [r7, #4]
   159a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   159a4:	1cf9      	adds	r1, r7, #3
   159a6:	2201      	movs	r2, #1
   159a8:	4618      	mov	r0, r3
   159aa:	4b08      	ldr	r3, [pc, #32]	; (159cc <_ZN14MCP23017_Class12ReadRegisterEh+0x38>)
   159ac:	4798      	blx	r3
	i2c->Read(&registerValue,1);
   159ae:	687b      	ldr	r3, [r7, #4]
   159b0:	6d18      	ldr	r0, [r3, #80]	; 0x50
   159b2:	687b      	ldr	r3, [r7, #4]
   159b4:	3355      	adds	r3, #85	; 0x55
   159b6:	2201      	movs	r2, #1
   159b8:	4619      	mov	r1, r3
   159ba:	4b05      	ldr	r3, [pc, #20]	; (159d0 <_ZN14MCP23017_Class12ReadRegisterEh+0x3c>)
   159bc:	4798      	blx	r3
	return registerValue;
   159be:	687b      	ldr	r3, [r7, #4]
   159c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
}
   159c4:	4618      	mov	r0, r3
   159c6:	3708      	adds	r7, #8
   159c8:	46bd      	mov	sp, r7
   159ca:	bd80      	pop	{r7, pc}
   159cc:	00015245 	.word	0x00015245
   159d0:	00015271 	.word	0x00015271

000159d4 <_ZN14MCP23017_Class13WriteRegisterEhh>:


/**
 * Writes a given register
 */
void MCP23017_Class::WriteRegister(uint8_t addr, uint8_t value){
   159d4:	b580      	push	{r7, lr}
   159d6:	b084      	sub	sp, #16
   159d8:	af00      	add	r7, sp, #0
   159da:	6078      	str	r0, [r7, #4]
   159dc:	460b      	mov	r3, r1
   159de:	70fb      	strb	r3, [r7, #3]
   159e0:	4613      	mov	r3, r2
   159e2:	70bb      	strb	r3, [r7, #2]
	// Write the register
	//isReady=false;
	uint8_t array[2];
	array[0]=addr;
   159e4:	78fb      	ldrb	r3, [r7, #3]
   159e6:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   159e8:	78bb      	ldrb	r3, [r7, #2]
   159ea:	737b      	strb	r3, [r7, #13]
	i2c->Write(array,2);
   159ec:	687b      	ldr	r3, [r7, #4]
   159ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   159f0:	f107 010c 	add.w	r1, r7, #12
   159f4:	2202      	movs	r2, #2
   159f6:	4618      	mov	r0, r3
   159f8:	4b02      	ldr	r3, [pc, #8]	; (15a04 <_ZN14MCP23017_Class13WriteRegisterEhh+0x30>)
   159fa:	4798      	blx	r3
	//while(!i2ca.txReady);
}
   159fc:	bf00      	nop
   159fe:	3710      	adds	r7, #16
   15a00:	46bd      	mov	sp, r7
   15a02:	bd80      	pop	{r7, pc}
   15a04:	00015245 	.word	0x00015245

00015a08 <_ZN14MCP23017_Class14WriteRegisterBEh>:
uint8_t MCP23017_Class::WriteRegisterB(uint8_t value){
   15a08:	b580      	push	{r7, lr}
   15a0a:	b082      	sub	sp, #8
   15a0c:	af00      	add	r7, sp, #0
   15a0e:	6078      	str	r0, [r7, #4]
   15a10:	460b      	mov	r3, r1
   15a12:	70fb      	strb	r3, [r7, #3]
	WriteRegister(MCP23017_GPIOB,value);
   15a14:	78fb      	ldrb	r3, [r7, #3]
   15a16:	461a      	mov	r2, r3
   15a18:	2113      	movs	r1, #19
   15a1a:	6878      	ldr	r0, [r7, #4]
   15a1c:	4b03      	ldr	r3, [pc, #12]	; (15a2c <_ZN14MCP23017_Class14WriteRegisterBEh+0x24>)
   15a1e:	4798      	blx	r3
	return value;
   15a20:	78fb      	ldrb	r3, [r7, #3]
}
   15a22:	4618      	mov	r0, r3
   15a24:	3708      	adds	r7, #8
   15a26:	46bd      	mov	sp, r7
   15a28:	bd80      	pop	{r7, pc}
   15a2a:	bf00      	nop
   15a2c:	000159d5 	.word	0x000159d5

00015a30 <_ZN14MCP23017_Class13SetPortAInputEv>:

void	MCP23017_Class::SetPortAInput(void){
   15a30:	b580      	push	{r7, lr}
   15a32:	b084      	sub	sp, #16
   15a34:	af00      	add	r7, sp, #0
   15a36:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   15a38:	2300      	movs	r3, #0
   15a3a:	73fb      	strb	r3, [r7, #15]
   15a3c:	7bfb      	ldrb	r3, [r7, #15]
   15a3e:	2b07      	cmp	r3, #7
   15a40:	dc0f      	bgt.n	15a62 <_ZN14MCP23017_Class13SetPortAInputEv+0x32>
	{
		pinMode(i,INPUT);
   15a42:	7bfb      	ldrb	r3, [r7, #15]
   15a44:	2200      	movs	r2, #0
   15a46:	4619      	mov	r1, r3
   15a48:	6878      	ldr	r0, [r7, #4]
   15a4a:	4b08      	ldr	r3, [pc, #32]	; (15a6c <_ZN14MCP23017_Class13SetPortAInputEv+0x3c>)
   15a4c:	4798      	blx	r3
		pullUp(i,HIGH);
   15a4e:	7bfb      	ldrb	r3, [r7, #15]
   15a50:	2201      	movs	r2, #1
   15a52:	4619      	mov	r1, r3
   15a54:	6878      	ldr	r0, [r7, #4]
   15a56:	4b06      	ldr	r3, [pc, #24]	; (15a70 <_ZN14MCP23017_Class13SetPortAInputEv+0x40>)
   15a58:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   15a5a:	7bfb      	ldrb	r3, [r7, #15]
   15a5c:	3301      	adds	r3, #1
   15a5e:	73fb      	strb	r3, [r7, #15]
   15a60:	e7ec      	b.n	15a3c <_ZN14MCP23017_Class13SetPortAInputEv+0xc>
	}
}
   15a62:	bf00      	nop
   15a64:	3710      	adds	r7, #16
   15a66:	46bd      	mov	sp, r7
   15a68:	bd80      	pop	{r7, pc}
   15a6a:	bf00      	nop
   15a6c:	00015b45 	.word	0x00015b45
   15a70:	00015b7d 	.word	0x00015b7d

00015a74 <_ZN14MCP23017_Class14SetPortBOutputEv>:
void	MCP23017_Class::SetPortBOutput(void){
   15a74:	b580      	push	{r7, lr}
   15a76:	b084      	sub	sp, #16
   15a78:	af00      	add	r7, sp, #0
   15a7a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=8;i<16;i++)
   15a7c:	2308      	movs	r3, #8
   15a7e:	73fb      	strb	r3, [r7, #15]
   15a80:	7bfb      	ldrb	r3, [r7, #15]
   15a82:	2b0f      	cmp	r3, #15
   15a84:	dc09      	bgt.n	15a9a <_ZN14MCP23017_Class14SetPortBOutputEv+0x26>
	{
		pinMode(i,OUTPUT);
   15a86:	7bfb      	ldrb	r3, [r7, #15]
   15a88:	2201      	movs	r2, #1
   15a8a:	4619      	mov	r1, r3
   15a8c:	6878      	ldr	r0, [r7, #4]
   15a8e:	4b05      	ldr	r3, [pc, #20]	; (15aa4 <_ZN14MCP23017_Class14SetPortBOutputEv+0x30>)
   15a90:	4798      	blx	r3
	for (uint8_t i=8;i<16;i++)
   15a92:	7bfb      	ldrb	r3, [r7, #15]
   15a94:	3301      	adds	r3, #1
   15a96:	73fb      	strb	r3, [r7, #15]
   15a98:	e7f2      	b.n	15a80 <_ZN14MCP23017_Class14SetPortBOutputEv+0xc>
	}
}
   15a9a:	bf00      	nop
   15a9c:	3710      	adds	r7, #16
   15a9e:	46bd      	mov	sp, r7
   15aa0:	bd80      	pop	{r7, pc}
   15aa2:	bf00      	nop
   15aa4:	00015b45 	.word	0x00015b45

00015aa8 <_ZN14MCP23017_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23017_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   15aa8:	b590      	push	{r4, r7, lr}
   15aaa:	b085      	sub	sp, #20
   15aac:	af00      	add	r7, sp, #0
   15aae:	6078      	str	r0, [r7, #4]
   15ab0:	4608      	mov	r0, r1
   15ab2:	4611      	mov	r1, r2
   15ab4:	461a      	mov	r2, r3
   15ab6:	4603      	mov	r3, r0
   15ab8:	70fb      	strb	r3, [r7, #3]
   15aba:	460b      	mov	r3, r1
   15abc:	70bb      	strb	r3, [r7, #2]
   15abe:	4613      	mov	r3, r2
   15ac0:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
   15ac2:	f897 3020 	ldrb.w	r3, [r7, #32]
   15ac6:	787a      	ldrb	r2, [r7, #1]
   15ac8:	78f9      	ldrb	r1, [r7, #3]
   15aca:	6878      	ldr	r0, [r7, #4]
   15acc:	4c19      	ldr	r4, [pc, #100]	; (15b34 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x8c>)
   15ace:	47a0      	blx	r4
   15ad0:	4603      	mov	r3, r0
   15ad2:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   15ad4:	78fb      	ldrb	r3, [r7, #3]
   15ad6:	4619      	mov	r1, r3
   15ad8:	6878      	ldr	r0, [r7, #4]
   15ada:	4b17      	ldr	r3, [pc, #92]	; (15b38 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x90>)
   15adc:	4798      	blx	r3
   15ade:	4603      	mov	r3, r0
   15ae0:	737b      	strb	r3, [r7, #13]
	regValue = ReadRegister(regAddr);
   15ae2:	7bfb      	ldrb	r3, [r7, #15]
   15ae4:	4619      	mov	r1, r3
   15ae6:	6878      	ldr	r0, [r7, #4]
   15ae8:	4b14      	ldr	r3, [pc, #80]	; (15b3c <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x94>)
   15aea:	4798      	blx	r3
   15aec:	4603      	mov	r3, r0
   15aee:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   15af0:	78bb      	ldrb	r3, [r7, #2]
   15af2:	2b00      	cmp	r3, #0
   15af4:	d009      	beq.n	15b0a <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x62>
   15af6:	7bba      	ldrb	r2, [r7, #14]
   15af8:	7b7b      	ldrb	r3, [r7, #13]
   15afa:	4619      	mov	r1, r3
   15afc:	2301      	movs	r3, #1
   15afe:	408b      	lsls	r3, r1
   15b00:	b2db      	uxtb	r3, r3
   15b02:	4313      	orrs	r3, r2
   15b04:	b2db      	uxtb	r3, r3
   15b06:	73bb      	strb	r3, [r7, #14]
   15b08:	e00a      	b.n	15b20 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x78>
   15b0a:	7bba      	ldrb	r2, [r7, #14]
   15b0c:	7b7b      	ldrb	r3, [r7, #13]
   15b0e:	4619      	mov	r1, r3
   15b10:	2301      	movs	r3, #1
   15b12:	408b      	lsls	r3, r1
   15b14:	b2db      	uxtb	r3, r3
   15b16:	43db      	mvns	r3, r3
   15b18:	b2db      	uxtb	r3, r3
   15b1a:	4013      	ands	r3, r2
   15b1c:	b2db      	uxtb	r3, r3
   15b1e:	73bb      	strb	r3, [r7, #14]

	WriteRegister(regAddr,regValue);
   15b20:	7bba      	ldrb	r2, [r7, #14]
   15b22:	7bfb      	ldrb	r3, [r7, #15]
   15b24:	4619      	mov	r1, r3
   15b26:	6878      	ldr	r0, [r7, #4]
   15b28:	4b05      	ldr	r3, [pc, #20]	; (15b40 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x98>)
   15b2a:	4798      	blx	r3
}
   15b2c:	bf00      	nop
   15b2e:	3714      	adds	r7, #20
   15b30:	46bd      	mov	sp, r7
   15b32:	bd90      	pop	{r4, r7, pc}
   15b34:	00015963 	.word	0x00015963
   15b38:	00015945 	.word	0x00015945
   15b3c:	00015995 	.word	0x00015995
   15b40:	000159d5 	.word	0x000159d5

00015b44 <_ZN14MCP23017_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23017_Class::pinMode(uint8_t p, uint8_t d) {
   15b44:	b590      	push	{r4, r7, lr}
   15b46:	b085      	sub	sp, #20
   15b48:	af02      	add	r7, sp, #8
   15b4a:	6078      	str	r0, [r7, #4]
   15b4c:	460b      	mov	r3, r1
   15b4e:	70fb      	strb	r3, [r7, #3]
   15b50:	4613      	mov	r3, r2
   15b52:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
   15b54:	78bb      	ldrb	r3, [r7, #2]
   15b56:	2b00      	cmp	r3, #0
   15b58:	bf0c      	ite	eq
   15b5a:	2301      	moveq	r3, #1
   15b5c:	2300      	movne	r3, #0
   15b5e:	b2db      	uxtb	r3, r3
   15b60:	461a      	mov	r2, r3
   15b62:	78f9      	ldrb	r1, [r7, #3]
   15b64:	2301      	movs	r3, #1
   15b66:	9300      	str	r3, [sp, #0]
   15b68:	2300      	movs	r3, #0
   15b6a:	6878      	ldr	r0, [r7, #4]
   15b6c:	4c02      	ldr	r4, [pc, #8]	; (15b78 <_ZN14MCP23017_Class7pinModeEhh+0x34>)
   15b6e:	47a0      	blx	r4
}
   15b70:	bf00      	nop
   15b72:	370c      	adds	r7, #12
   15b74:	46bd      	mov	sp, r7
   15b76:	bd90      	pop	{r4, r7, pc}
   15b78:	00015aa9 	.word	0x00015aa9

00015b7c <_ZN14MCP23017_Class6pullUpEhh>:
	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
	WriteRegister(regAddr,gpio);
}

void MCP23017_Class::pullUp(uint8_t p, uint8_t d) {
   15b7c:	b590      	push	{r4, r7, lr}
   15b7e:	b085      	sub	sp, #20
   15b80:	af02      	add	r7, sp, #8
   15b82:	6078      	str	r0, [r7, #4]
   15b84:	460b      	mov	r3, r1
   15b86:	70fb      	strb	r3, [r7, #3]
   15b88:	4613      	mov	r3, r2
   15b8a:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
   15b8c:	78ba      	ldrb	r2, [r7, #2]
   15b8e:	78f9      	ldrb	r1, [r7, #3]
   15b90:	230d      	movs	r3, #13
   15b92:	9300      	str	r3, [sp, #0]
   15b94:	230c      	movs	r3, #12
   15b96:	6878      	ldr	r0, [r7, #4]
   15b98:	4c02      	ldr	r4, [pc, #8]	; (15ba4 <_ZN14MCP23017_Class6pullUpEhh+0x28>)
   15b9a:	47a0      	blx	r4
}
   15b9c:	bf00      	nop
   15b9e:	370c      	adds	r7, #12
   15ba0:	46bd      	mov	sp, r7
   15ba2:	bd90      	pop	{r4, r7, pc}
   15ba4:	00015aa9 	.word	0x00015aa9

00015ba8 <_Z41__static_initialization_and_destruction_0ii>:
	{
		isOK=false;
	}
	return isOK;
}
   15ba8:	b580      	push	{r7, lr}
   15baa:	b082      	sub	sp, #8
   15bac:	af00      	add	r7, sp, #0
   15bae:	6078      	str	r0, [r7, #4]
   15bb0:	6039      	str	r1, [r7, #0]
   15bb2:	687b      	ldr	r3, [r7, #4]
   15bb4:	2b01      	cmp	r3, #1
   15bb6:	d115      	bne.n	15be4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   15bb8:	683b      	ldr	r3, [r7, #0]
   15bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15bbe:	4293      	cmp	r3, r2
   15bc0:	d110      	bne.n	15be4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static I2C_Sync_Class  i2cStatic;
   15bc2:	480a      	ldr	r0, [pc, #40]	; (15bec <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15bc4:	4b0a      	ldr	r3, [pc, #40]	; (15bf0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   15bc6:	4798      	blx	r3
   15bc8:	4a0a      	ldr	r2, [pc, #40]	; (15bf4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15bca:	490b      	ldr	r1, [pc, #44]	; (15bf8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15bcc:	4807      	ldr	r0, [pc, #28]	; (15bec <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15bce:	4b0b      	ldr	r3, [pc, #44]	; (15bfc <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15bd0:	4798      	blx	r3
   15bd2:	490b      	ldr	r1, [pc, #44]	; (15c00 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   15bd4:	480b      	ldr	r0, [pc, #44]	; (15c04 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15bd6:	4b0c      	ldr	r3, [pc, #48]	; (15c08 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   15bd8:	4798      	blx	r3
   15bda:	4a06      	ldr	r2, [pc, #24]	; (15bf4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15bdc:	490b      	ldr	r1, [pc, #44]	; (15c0c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   15bde:	4809      	ldr	r0, [pc, #36]	; (15c04 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15be0:	4b06      	ldr	r3, [pc, #24]	; (15bfc <_Z41__static_initialization_and_destruction_0ii+0x54>)
   15be2:	4798      	blx	r3
   15be4:	bf00      	nop
   15be6:	3708      	adds	r7, #8
   15be8:	46bd      	mov	sp, r7
   15bea:	bd80      	pop	{r7, pc}
   15bec:	20009d10 	.word	0x20009d10
   15bf0:	00015139 	.word	0x00015139
   15bf4:	20000000 	.word	0x20000000
   15bf8:	00015169 	.word	0x00015169
   15bfc:	00019d1d 	.word	0x00019d1d
   15c00:	2000a888 	.word	0x2000a888
   15c04:	20009d24 	.word	0x20009d24
   15c08:	00015845 	.word	0x00015845
   15c0c:	00015889 	.word	0x00015889

00015c10 <_GLOBAL__sub_I_ptrMCP23017Class>:
   15c10:	b580      	push	{r7, lr}
   15c12:	af00      	add	r7, sp, #0
   15c14:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15c18:	2001      	movs	r0, #1
   15c1a:	4b01      	ldr	r3, [pc, #4]	; (15c20 <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
   15c1c:	4798      	blx	r3
   15c1e:	bd80      	pop	{r7, pc}
   15c20:	00015ba9 	.word	0x00015ba9

00015c24 <_ZL15Converter1Readyv>:


#include "TemperatureSensors_Class.h"
static TemperatureSensors_Class	*ptrTemperaturesClass;

static void Converter1Ready(void){
   15c24:	b580      	push	{r7, lr}
   15c26:	af00      	add	r7, sp, #0
	ptrTemperaturesClass->converterReady[0]=true;
   15c28:	4b08      	ldr	r3, [pc, #32]	; (15c4c <_ZL15Converter1Readyv+0x28>)
   15c2a:	681b      	ldr	r3, [r3, #0]
   15c2c:	2201      	movs	r2, #1
   15c2e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	ptrTemperaturesClass->SetModuleReady(0);
   15c32:	4b06      	ldr	r3, [pc, #24]	; (15c4c <_ZL15Converter1Readyv+0x28>)
   15c34:	681b      	ldr	r3, [r3, #0]
   15c36:	2100      	movs	r1, #0
   15c38:	4618      	mov	r0, r3
   15c3a:	4b05      	ldr	r3, [pc, #20]	; (15c50 <_ZL15Converter1Readyv+0x2c>)
   15c3c:	4798      	blx	r3
	ptrTemperaturesClass->converterTimeout=false;
   15c3e:	4b03      	ldr	r3, [pc, #12]	; (15c4c <_ZL15Converter1Readyv+0x28>)
   15c40:	681b      	ldr	r3, [r3, #0]
   15c42:	2200      	movs	r2, #0
   15c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
   15c48:	bf00      	nop
   15c4a:	bd80      	pop	{r7, pc}
   15c4c:	20009d84 	.word	0x20009d84
   15c50:	00015fd5 	.word	0x00015fd5

00015c54 <_ZL15Converter2Readyv>:
static void Converter2Ready(void){
   15c54:	b580      	push	{r7, lr}
   15c56:	af00      	add	r7, sp, #0
	ptrTemperaturesClass->converterReady[1]=true;
   15c58:	4b08      	ldr	r3, [pc, #32]	; (15c7c <_ZL15Converter2Readyv+0x28>)
   15c5a:	681b      	ldr	r3, [r3, #0]
   15c5c:	2201      	movs	r2, #1
   15c5e:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	ptrTemperaturesClass->SetModuleReady(1);
   15c62:	4b06      	ldr	r3, [pc, #24]	; (15c7c <_ZL15Converter2Readyv+0x28>)
   15c64:	681b      	ldr	r3, [r3, #0]
   15c66:	2101      	movs	r1, #1
   15c68:	4618      	mov	r0, r3
   15c6a:	4b05      	ldr	r3, [pc, #20]	; (15c80 <_ZL15Converter2Readyv+0x2c>)
   15c6c:	4798      	blx	r3
	ptrTemperaturesClass->converterTimeout=false;
   15c6e:	4b03      	ldr	r3, [pc, #12]	; (15c7c <_ZL15Converter2Readyv+0x28>)
   15c70:	681b      	ldr	r3, [r3, #0]
   15c72:	2200      	movs	r2, #0
   15c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
   15c78:	bf00      	nop
   15c7a:	bd80      	pop	{r7, pc}
   15c7c:	20009d84 	.word	0x20009d84
   15c80:	00015fd5 	.word	0x00015fd5

00015c84 <_ZL17ConversionTimeoutPK10timer_task>:
static void	ConversionTimeout(const struct timer_task *const timer_task){
   15c84:	b480      	push	{r7}
   15c86:	b083      	sub	sp, #12
   15c88:	af00      	add	r7, sp, #0
   15c8a:	6078      	str	r0, [r7, #4]
	ptrTemperaturesClass->converterTimeout=true;
   15c8c:	4b05      	ldr	r3, [pc, #20]	; (15ca4 <_ZL17ConversionTimeoutPK10timer_task+0x20>)
   15c8e:	681b      	ldr	r3, [r3, #0]
   15c90:	2201      	movs	r2, #1
   15c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	asm("nop");
   15c96:	bf00      	nop
}
   15c98:	bf00      	nop
   15c9a:	370c      	adds	r7, #12
   15c9c:	46bd      	mov	sp, r7
   15c9e:	bc80      	pop	{r7}
   15ca0:	4770      	bx	lr
   15ca2:	bf00      	nop
   15ca4:	20009d84 	.word	0x20009d84

00015ca8 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
static LT_SPI	ltSPI;
// default constructor
TemperatureSensors_Class::TemperatureSensors_Class()
{
} //TemperatureSensors_Class
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   15ca8:	b5b0      	push	{r4, r5, r7, lr}
   15caa:	b082      	sub	sp, #8
   15cac:	af00      	add	r7, sp, #0
   15cae:	6078      	str	r0, [r7, #4]
   15cb0:	6039      	str	r1, [r7, #0]
   15cb2:	687b      	ldr	r3, [r7, #4]
   15cb4:	4618      	mov	r0, r3
   15cb6:	4b0f      	ldr	r3, [pc, #60]	; (15cf4 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x4c>)
   15cb8:	4798      	blx	r3
   15cba:	687b      	ldr	r3, [r7, #4]
   15cbc:	3384      	adds	r3, #132	; 0x84
   15cbe:	2401      	movs	r4, #1
   15cc0:	461d      	mov	r5, r3
   15cc2:	2c00      	cmp	r4, #0
   15cc4:	db05      	blt.n	15cd2 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x2a>
   15cc6:	4628      	mov	r0, r5
   15cc8:	4b0b      	ldr	r3, [pc, #44]	; (15cf8 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x50>)
   15cca:	4798      	blx	r3
   15ccc:	355c      	adds	r5, #92	; 0x5c
   15cce:	3c01      	subs	r4, #1
   15cd0:	e7f7      	b.n	15cc2 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x1a>
{
		spiLite=&ltSPI;
   15cd2:	687b      	ldr	r3, [r7, #4]
   15cd4:	4a09      	ldr	r2, [pc, #36]	; (15cfc <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x54>)
   15cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		ptrTemperaturesClass=this;
   15cda:	4a09      	ldr	r2, [pc, #36]	; (15d00 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x58>)
   15cdc:	687b      	ldr	r3, [r7, #4]
   15cde:	6013      	str	r3, [r2, #0]
		SPIA=SPI_LTC;
   15ce0:	687b      	ldr	r3, [r7, #4]
   15ce2:	683a      	ldr	r2, [r7, #0]
   15ce4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		
} //TemperatureSensors_Class
   15ce8:	687b      	ldr	r3, [r7, #4]
   15cea:	4618      	mov	r0, r3
   15cec:	3708      	adds	r7, #8
   15cee:	46bd      	mov	sp, r7
   15cf0:	bdb0      	pop	{r4, r5, r7, pc}
   15cf2:	bf00      	nop
   15cf4:	00019261 	.word	0x00019261
   15cf8:	00019261 	.word	0x00019261
   15cfc:	20009d88 	.word	0x20009d88
   15d00:	20009d84 	.word	0x20009d84

00015d04 <_ZN24TemperatureSensors_ClassD1Ev>:

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   15d04:	b590      	push	{r4, r7, lr}
   15d06:	b083      	sub	sp, #12
   15d08:	af00      	add	r7, sp, #0
   15d0a:	6078      	str	r0, [r7, #4]
   15d0c:	687b      	ldr	r3, [r7, #4]
   15d0e:	3384      	adds	r3, #132	; 0x84
   15d10:	2b00      	cmp	r3, #0
   15d12:	d00c      	beq.n	15d2e <_ZN24TemperatureSensors_ClassD1Ev+0x2a>
   15d14:	687b      	ldr	r3, [r7, #4]
   15d16:	3384      	adds	r3, #132	; 0x84
   15d18:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
   15d1c:	687b      	ldr	r3, [r7, #4]
   15d1e:	3384      	adds	r3, #132	; 0x84
   15d20:	42a3      	cmp	r3, r4
   15d22:	d004      	beq.n	15d2e <_ZN24TemperatureSensors_ClassD1Ev+0x2a>
   15d24:	3c5c      	subs	r4, #92	; 0x5c
   15d26:	4620      	mov	r0, r4
   15d28:	4b05      	ldr	r3, [pc, #20]	; (15d40 <_ZN24TemperatureSensors_ClassD1Ev+0x3c>)
   15d2a:	4798      	blx	r3
   15d2c:	e7f6      	b.n	15d1c <_ZN24TemperatureSensors_ClassD1Ev+0x18>
   15d2e:	687b      	ldr	r3, [r7, #4]
   15d30:	4618      	mov	r0, r3
   15d32:	4b04      	ldr	r3, [pc, #16]	; (15d44 <_ZN24TemperatureSensors_ClassD1Ev+0x40>)
   15d34:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   15d36:	687b      	ldr	r3, [r7, #4]
   15d38:	4618      	mov	r0, r3
   15d3a:	370c      	adds	r7, #12
   15d3c:	46bd      	mov	sp, r7
   15d3e:	bd90      	pop	{r4, r7, pc}
   15d40:	00019275 	.word	0x00019275
   15d44:	00019275 	.word	0x00019275

00015d48 <_ZN24TemperatureSensors_Class4InitEv>:

bool	TemperatureSensors_Class::Init(void){
   15d48:	b580      	push	{r7, lr}
   15d4a:	b082      	sub	sp, #8
   15d4c:	af00      	add	r7, sp, #0
   15d4e:	6078      	str	r0, [r7, #4]
	spiLite->set_descriptor(SPIA);
   15d50:	687b      	ldr	r3, [r7, #4]
   15d52:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   15d56:	687b      	ldr	r3, [r7, #4]
   15d58:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   15d5c:	4619      	mov	r1, r3
   15d5e:	4610      	mov	r0, r2
   15d60:	4b1a      	ldr	r3, [pc, #104]	; (15dcc <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   15d62:	4798      	blx	r3
	spiLite->init();
   15d64:	687b      	ldr	r3, [r7, #4]
   15d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   15d6a:	4618      	mov	r0, r3
   15d6c:	4b18      	ldr	r3, [pc, #96]	; (15dd0 <_ZN24TemperatureSensors_Class4InitEv+0x88>)
   15d6e:	4798      	blx	r3
	ptrTemperaturesClass=this;
   15d70:	4a18      	ldr	r2, [pc, #96]	; (15dd4 <_ZN24TemperatureSensors_Class4InitEv+0x8c>)
   15d72:	687b      	ldr	r3, [r7, #4]
   15d74:	6013      	str	r3, [r2, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   15d76:	4918      	ldr	r1, [pc, #96]	; (15dd8 <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   15d78:	2028      	movs	r0, #40	; 0x28
   15d7a:	4b18      	ldr	r3, [pc, #96]	; (15ddc <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   15d7c:	4798      	blx	r3
	ext_irq_register(PIN_PB09, Converter2Ready);
   15d7e:	4918      	ldr	r1, [pc, #96]	; (15de0 <_ZN24TemperatureSensors_Class4InitEv+0x98>)
   15d80:	2029      	movs	r0, #41	; 0x29
   15d82:	4b16      	ldr	r3, [pc, #88]	; (15ddc <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   15d84:	4798      	blx	r3
	InitModules();
   15d86:	6878      	ldr	r0, [r7, #4]
   15d88:	4b16      	ldr	r3, [pc, #88]	; (15de4 <_ZN24TemperatureSensors_Class4InitEv+0x9c>)
   15d8a:	4798      	blx	r3
	currentModule=0; currentChannelIndex=0;
   15d8c:	687b      	ldr	r3, [r7, #4]
   15d8e:	2200      	movs	r2, #0
   15d90:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
   15d94:	687b      	ldr	r3, [r7, #4]
   15d96:	2200      	movs	r2, #0
   15d98:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	isOK=(module[0].isOK)&(module[1].isOK);
   15d9c:	687b      	ldr	r3, [r7, #4]
   15d9e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   15da2:	461a      	mov	r2, r3
   15da4:	687b      	ldr	r3, [r7, #4]
   15da6:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
   15daa:	4013      	ands	r3, r2
   15dac:	2b00      	cmp	r3, #0
   15dae:	bf14      	ite	ne
   15db0:	2301      	movne	r3, #1
   15db2:	2300      	moveq	r3, #0
   15db4:	b2da      	uxtb	r2, r3
   15db6:	687b      	ldr	r3, [r7, #4]
   15db8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return isOK;
   15dbc:	687b      	ldr	r3, [r7, #4]
   15dbe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   15dc2:	b2db      	uxtb	r3, r3
}
   15dc4:	4618      	mov	r0, r3
   15dc6:	3708      	adds	r7, #8
   15dc8:	46bd      	mov	sp, r7
   15dca:	bd80      	pop	{r7, pc}
   15dcc:	00019aad 	.word	0x00019aad
   15dd0:	00019a51 	.word	0x00019a51
   15dd4:	20009d84 	.word	0x20009d84
   15dd8:	00015c25 	.word	0x00015c25
   15ddc:	00006869 	.word	0x00006869
   15de0:	00015c55 	.word	0x00015c55
   15de4:	00015de9 	.word	0x00015de9

00015de8 <_ZN24TemperatureSensors_Class11InitModulesEv>:

bool TemperatureSensors_Class::InitModules(void){
   15de8:	b580      	push	{r7, lr}
   15dea:	b084      	sub	sp, #16
   15dec:	af00      	add	r7, sp, #0
   15dee:	6078      	str	r0, [r7, #4]
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2;
   15df0:	687b      	ldr	r3, [r7, #4]
   15df2:	223d      	movs	r2, #61	; 0x3d
   15df4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   15df8:	687b      	ldr	r3, [r7, #4]
   15dfa:	221b      	movs	r2, #27
   15dfc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   15e00:	2300      	movs	r3, #0
   15e02:	73fb      	strb	r3, [r7, #15]
   15e04:	7bfb      	ldrb	r3, [r7, #15]
   15e06:	2b01      	cmp	r3, #1
   15e08:	dc17      	bgt.n	15e3a <_ZN24TemperatureSensors_Class11InitModulesEv+0x52>
	{
		module[ii].Init(csPins[ii],spiLite);
   15e0a:	7bfb      	ldrb	r3, [r7, #15]
   15e0c:	225c      	movs	r2, #92	; 0x5c
   15e0e:	fb02 f303 	mul.w	r3, r2, r3
   15e12:	3380      	adds	r3, #128	; 0x80
   15e14:	687a      	ldr	r2, [r7, #4]
   15e16:	4413      	add	r3, r2
   15e18:	1d18      	adds	r0, r3, #4
   15e1a:	7bfb      	ldrb	r3, [r7, #15]
   15e1c:	687a      	ldr	r2, [r7, #4]
   15e1e:	334e      	adds	r3, #78	; 0x4e
   15e20:	009b      	lsls	r3, r3, #2
   15e22:	4413      	add	r3, r2
   15e24:	6859      	ldr	r1, [r3, #4]
   15e26:	687b      	ldr	r3, [r7, #4]
   15e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   15e2c:	461a      	mov	r2, r3
   15e2e:	4b05      	ldr	r3, [pc, #20]	; (15e44 <_ZN24TemperatureSensors_Class11InitModulesEv+0x5c>)
   15e30:	4798      	blx	r3
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   15e32:	7bfb      	ldrb	r3, [r7, #15]
   15e34:	3301      	adds	r3, #1
   15e36:	73fb      	strb	r3, [r7, #15]
   15e38:	e7e4      	b.n	15e04 <_ZN24TemperatureSensors_Class11InitModulesEv+0x1c>
	}

}
   15e3a:	bf00      	nop
   15e3c:	4618      	mov	r0, r3
   15e3e:	3710      	adds	r7, #16
   15e40:	46bd      	mov	sp, r7
   15e42:	bd80      	pop	{r7, pc}
   15e44:	00019289 	.word	0x00019289

00015e48 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   15e48:	b580      	push	{r7, lr}
   15e4a:	b082      	sub	sp, #8
   15e4c:	af00      	add	r7, sp, #0
   15e4e:	6078      	str	r0, [r7, #4]
	converterTimeout=false;
   15e50:	687b      	ldr	r3, [r7, #4]
   15e52:	2200      	movs	r2, #0
   15e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	converterReady[currentModule]=false;
   15e58:	687b      	ldr	r3, [r7, #4]
   15e5a:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15e5e:	461a      	mov	r2, r3
   15e60:	687b      	ldr	r3, [r7, #4]
   15e62:	4413      	add	r3, r2
   15e64:	2200      	movs	r2, #0
   15e66:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   15e6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15e6e:	490d      	ldr	r1, [pc, #52]	; (15ea4 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x5c>)
   15e70:	480d      	ldr	r0, [pc, #52]	; (15ea8 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x60>)
   15e72:	4b0e      	ldr	r3, [pc, #56]	; (15eac <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x64>)
   15e74:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   15e76:	687b      	ldr	r3, [r7, #4]
   15e78:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15e7c:	461a      	mov	r2, r3
   15e7e:	235c      	movs	r3, #92	; 0x5c
   15e80:	fb03 f302 	mul.w	r3, r3, r2
   15e84:	3380      	adds	r3, #128	; 0x80
   15e86:	687a      	ldr	r2, [r7, #4]
   15e88:	4413      	add	r3, r2
   15e8a:	1d1a      	adds	r2, r3, #4
   15e8c:	687b      	ldr	r3, [r7, #4]
   15e8e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15e92:	4619      	mov	r1, r3
   15e94:	4610      	mov	r0, r2
   15e96:	4b06      	ldr	r3, [pc, #24]	; (15eb0 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x68>)
   15e98:	4798      	blx	r3
	
}
   15e9a:	bf00      	nop
   15e9c:	3708      	adds	r7, #8
   15e9e:	46bd      	mov	sp, r7
   15ea0:	bd80      	pop	{r7, pc}
   15ea2:	bf00      	nop
   15ea4:	00015c85 	.word	0x00015c85
   15ea8:	2000a440 	.word	0x2000a440
   15eac:	00017d81 	.word	0x00017d81
   15eb0:	00019375 	.word	0x00019375

00015eb4 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   15eb4:	b590      	push	{r4, r7, lr}
   15eb6:	b083      	sub	sp, #12
   15eb8:	af00      	add	r7, sp, #0
   15eba:	6078      	str	r0, [r7, #4]
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   15ebc:	4934      	ldr	r1, [pc, #208]	; (15f90 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xdc>)
   15ebe:	4835      	ldr	r0, [pc, #212]	; (15f94 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe0>)
   15ec0:	4b35      	ldr	r3, [pc, #212]	; (15f98 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe4>)
   15ec2:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   15ec4:	687b      	ldr	r3, [r7, #4]
   15ec6:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15eca:	461a      	mov	r2, r3
   15ecc:	235c      	movs	r3, #92	; 0x5c
   15ece:	fb03 f302 	mul.w	r3, r3, r2
   15ed2:	3380      	adds	r3, #128	; 0x80
   15ed4:	687a      	ldr	r2, [r7, #4]
   15ed6:	4413      	add	r3, r2
   15ed8:	1d1a      	adds	r2, r3, #4
   15eda:	687b      	ldr	r3, [r7, #4]
   15edc:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15ee0:	4619      	mov	r1, r3
   15ee2:	4610      	mov	r0, r2
   15ee4:	4b2d      	ldr	r3, [pc, #180]	; (15f9c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe8>)
   15ee6:	4798      	blx	r3
   15ee8:	4602      	mov	r2, r0
   15eea:	687b      	ldr	r3, [r7, #4]
   15eec:	67da      	str	r2, [r3, #124]	; 0x7c
	faultData=module[currentModule].fault_data;
   15eee:	687b      	ldr	r3, [r7, #4]
   15ef0:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15ef4:	4619      	mov	r1, r3
   15ef6:	687a      	ldr	r2, [r7, #4]
   15ef8:	235c      	movs	r3, #92	; 0x5c
   15efa:	fb03 f301 	mul.w	r3, r3, r1
   15efe:	4413      	add	r3, r2
   15f00:	338a      	adds	r3, #138	; 0x8a
   15f02:	781a      	ldrb	r2, [r3, #0]
   15f04:	687b      	ldr	r3, [r7, #4]
   15f06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		if (faultData==VALID_TEMPERATURE)
   15f0a:	687b      	ldr	r3, [r7, #4]
   15f0c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   15f10:	2b01      	cmp	r3, #1
   15f12:	d112      	bne.n	15f3a <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x86>
		{
			values[currentModule][currentChannelIndex]=lastValue;
   15f14:	687b      	ldr	r3, [r7, #4]
   15f16:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15f1a:	4618      	mov	r0, r3
   15f1c:	687b      	ldr	r3, [r7, #4]
   15f1e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15f22:	461c      	mov	r4, r3
   15f24:	687b      	ldr	r3, [r7, #4]
   15f26:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
   15f28:	687a      	ldr	r2, [r7, #4]
   15f2a:	4603      	mov	r3, r0
   15f2c:	005b      	lsls	r3, r3, #1
   15f2e:	4403      	add	r3, r0
   15f30:	4423      	add	r3, r4
   15f32:	3318      	adds	r3, #24
   15f34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   15f38:	e002      	b.n	15f40 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>
		}
		else
		{
			lastValue=-999;
   15f3a:	687b      	ldr	r3, [r7, #4]
   15f3c:	4a18      	ldr	r2, [pc, #96]	; (15fa0 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xec>)
   15f3e:	67da      	str	r2, [r3, #124]	; 0x7c
		}
	
	currentChannelIndex++;
   15f40:	687b      	ldr	r3, [r7, #4]
   15f42:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15f46:	3301      	adds	r3, #1
   15f48:	b2da      	uxtb	r2, r3
   15f4a:	687b      	ldr	r3, [r7, #4]
   15f4c:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   15f50:	687b      	ldr	r3, [r7, #4]
   15f52:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15f56:	2b03      	cmp	r3, #3
   15f58:	d114      	bne.n	15f84 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xd0>
	{
		currentChannelIndex=0;
   15f5a:	687b      	ldr	r3, [r7, #4]
   15f5c:	2200      	movs	r2, #0
   15f5e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
		currentModule++;
   15f62:	687b      	ldr	r3, [r7, #4]
   15f64:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15f68:	3301      	adds	r3, #1
   15f6a:	b2da      	uxtb	r2, r3
   15f6c:	687b      	ldr	r3, [r7, #4]
   15f6e:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
		if (currentModule==NUMBER_LTC2983_MODULES)
   15f72:	687b      	ldr	r3, [r7, #4]
   15f74:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15f78:	2b02      	cmp	r3, #2
   15f7a:	d103      	bne.n	15f84 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xd0>
		{
			currentModule=0;
   15f7c:	687b      	ldr	r3, [r7, #4]
   15f7e:	2200      	movs	r2, #0
   15f80:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
		}
	} 
	else
	{
	}
	return lastValue;
   15f84:	687b      	ldr	r3, [r7, #4]
   15f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
   15f88:	4618      	mov	r0, r3
   15f8a:	370c      	adds	r7, #12
   15f8c:	46bd      	mov	sp, r7
   15f8e:	bd90      	pop	{r4, r7, pc}
   15f90:	00015c85 	.word	0x00015c85
   15f94:	2000a440 	.word	0x2000a440
   15f98:	00017d11 	.word	0x00017d11
   15f9c:	000194bd 	.word	0x000194bd
   15fa0:	c479c000 	.word	0xc479c000

00015fa4 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
bool	TemperatureSensors_Class::IsConversionFinished(){
   15fa4:	b480      	push	{r7}
   15fa6:	b083      	sub	sp, #12
   15fa8:	af00      	add	r7, sp, #0
   15faa:	6078      	str	r0, [r7, #4]
	return converterReady[0]&converterReady[1];
   15fac:	687b      	ldr	r3, [r7, #4]
   15fae:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
   15fb2:	b2db      	uxtb	r3, r3
   15fb4:	461a      	mov	r2, r3
   15fb6:	687b      	ldr	r3, [r7, #4]
   15fb8:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
   15fbc:	b2db      	uxtb	r3, r3
   15fbe:	4013      	ands	r3, r2
   15fc0:	2b00      	cmp	r3, #0
   15fc2:	bf14      	ite	ne
   15fc4:	2301      	movne	r3, #1
   15fc6:	2300      	moveq	r3, #0
   15fc8:	b2db      	uxtb	r3, r3
}
   15fca:	4618      	mov	r0, r3
   15fcc:	370c      	adds	r7, #12
   15fce:	46bd      	mov	sp, r7
   15fd0:	bc80      	pop	{r7}
   15fd2:	4770      	bx	lr

00015fd4 <_ZN24TemperatureSensors_Class14SetModuleReadyEh>:
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
   15fd4:	b480      	push	{r7}
   15fd6:	b083      	sub	sp, #12
   15fd8:	af00      	add	r7, sp, #0
   15fda:	6078      	str	r0, [r7, #4]
   15fdc:	460b      	mov	r3, r1
   15fde:	70fb      	strb	r3, [r7, #3]
	module[m].ready=true;
   15fe0:	78fb      	ldrb	r3, [r7, #3]
   15fe2:	687a      	ldr	r2, [r7, #4]
   15fe4:	215c      	movs	r1, #92	; 0x5c
   15fe6:	fb01 f303 	mul.w	r3, r1, r3
   15fea:	4413      	add	r3, r2
   15fec:	3384      	adds	r3, #132	; 0x84
   15fee:	2201      	movs	r2, #1
   15ff0:	701a      	strb	r2, [r3, #0]
	return module[m].ready;
   15ff2:	78fb      	ldrb	r3, [r7, #3]
   15ff4:	687a      	ldr	r2, [r7, #4]
   15ff6:	215c      	movs	r1, #92	; 0x5c
   15ff8:	fb01 f303 	mul.w	r3, r1, r3
   15ffc:	4413      	add	r3, r2
   15ffe:	3384      	adds	r3, #132	; 0x84
   16000:	781b      	ldrb	r3, [r3, #0]
   16002:	b2db      	uxtb	r3, r3
}
   16004:	4618      	mov	r0, r3
   16006:	370c      	adds	r7, #12
   16008:	46bd      	mov	sp, r7
   1600a:	bc80      	pop	{r7}
   1600c:	4770      	bx	lr
	...

00016010 <_Z41__static_initialization_and_destruction_0ii>:

TemperatureSensors_Class temperatures(&SPI_TEMP);
   16010:	b580      	push	{r7, lr}
   16012:	b082      	sub	sp, #8
   16014:	af00      	add	r7, sp, #0
   16016:	6078      	str	r0, [r7, #4]
   16018:	6039      	str	r1, [r7, #0]
   1601a:	687b      	ldr	r3, [r7, #4]
   1601c:	2b01      	cmp	r3, #1
   1601e:	d115      	bne.n	1604c <_Z41__static_initialization_and_destruction_0ii+0x3c>
   16020:	683b      	ldr	r3, [r7, #0]
   16022:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16026:	4293      	cmp	r3, r2
   16028:	d110      	bne.n	1604c <_Z41__static_initialization_and_destruction_0ii+0x3c>
static LT_SPI	ltSPI;
   1602a:	480a      	ldr	r0, [pc, #40]	; (16054 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1602c:	4b0a      	ldr	r3, [pc, #40]	; (16058 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1602e:	4798      	blx	r3
   16030:	4a0a      	ldr	r2, [pc, #40]	; (1605c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   16032:	490b      	ldr	r1, [pc, #44]	; (16060 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   16034:	4807      	ldr	r0, [pc, #28]	; (16054 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   16036:	4b0b      	ldr	r3, [pc, #44]	; (16064 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   16038:	4798      	blx	r3
TemperatureSensors_Class temperatures(&SPI_TEMP);
   1603a:	490b      	ldr	r1, [pc, #44]	; (16068 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   1603c:	480b      	ldr	r0, [pc, #44]	; (1606c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1603e:	4b0c      	ldr	r3, [pc, #48]	; (16070 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   16040:	4798      	blx	r3
   16042:	4a06      	ldr	r2, [pc, #24]	; (1605c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   16044:	490b      	ldr	r1, [pc, #44]	; (16074 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   16046:	4809      	ldr	r0, [pc, #36]	; (1606c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   16048:	4b06      	ldr	r3, [pc, #24]	; (16064 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1604a:	4798      	blx	r3
   1604c:	bf00      	nop
   1604e:	3708      	adds	r7, #8
   16050:	46bd      	mov	sp, r7
   16052:	bd80      	pop	{r7, pc}
   16054:	20009d88 	.word	0x20009d88
   16058:	00019a15 	.word	0x00019a15
   1605c:	20000000 	.word	0x20000000
   16060:	00019a3d 	.word	0x00019a3d
   16064:	00019d1d 	.word	0x00019d1d
   16068:	2000a788 	.word	0x2000a788
   1606c:	20009d9c 	.word	0x20009d9c
   16070:	00015ca9 	.word	0x00015ca9
   16074:	00015d05 	.word	0x00015d05

00016078 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
   16078:	b580      	push	{r7, lr}
   1607a:	af00      	add	r7, sp, #0
   1607c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16080:	2001      	movs	r0, #1
   16082:	4b01      	ldr	r3, [pc, #4]	; (16088 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x10>)
   16084:	4798      	blx	r3
   16086:	bd80      	pop	{r7, pc}
   16088:	00016011 	.word	0x00016011

0001608c <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   1608c:	b480      	push	{r7}
   1608e:	b083      	sub	sp, #12
   16090:	af00      	add	r7, sp, #0
   16092:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   16094:	4a04      	ldr	r2, [pc, #16]	; (160a8 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   16096:	687b      	ldr	r3, [r7, #4]
   16098:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   1609a:	687b      	ldr	r3, [r7, #4]
   1609c:	4618      	mov	r0, r3
   1609e:	370c      	adds	r7, #12
   160a0:	46bd      	mov	sp, r7
   160a2:	bc80      	pop	{r7}
   160a4:	4770      	bx	lr
   160a6:	bf00      	nop
   160a8:	20009eec 	.word	0x20009eec

000160ac <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   160ac:	b480      	push	{r7}
   160ae:	b083      	sub	sp, #12
   160b0:	af00      	add	r7, sp, #0
   160b2:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   160b4:	687b      	ldr	r3, [r7, #4]
   160b6:	4618      	mov	r0, r3
   160b8:	370c      	adds	r7, #12
   160ba:	46bd      	mov	sp, r7
   160bc:	bc80      	pop	{r7}
   160be:	4770      	bx	lr

000160c0 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   160c0:	b580      	push	{r7, lr}
   160c2:	b082      	sub	sp, #8
   160c4:	af00      	add	r7, sp, #0
   160c6:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   160c8:	687b      	ldr	r3, [r7, #4]
   160ca:	68da      	ldr	r2, [r3, #12]
   160cc:	687b      	ldr	r3, [r7, #4]
   160ce:	3310      	adds	r3, #16
   160d0:	4619      	mov	r1, r3
   160d2:	4610      	mov	r0, r2
   160d4:	4b09      	ldr	r3, [pc, #36]	; (160fc <_ZN13SPI_Syn_Class4initEv+0x3c>)
   160d6:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   160d8:	687b      	ldr	r3, [r7, #4]
   160da:	68db      	ldr	r3, [r3, #12]
   160dc:	4618      	mov	r0, r3
   160de:	4b08      	ldr	r3, [pc, #32]	; (16100 <_ZN13SPI_Syn_Class4initEv+0x40>)
   160e0:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   160e2:	687b      	ldr	r3, [r7, #4]
   160e4:	4a07      	ldr	r2, [pc, #28]	; (16104 <_ZN13SPI_Syn_Class4initEv+0x44>)
   160e6:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   160e8:	687b      	ldr	r3, [r7, #4]
   160ea:	4a06      	ldr	r2, [pc, #24]	; (16104 <_ZN13SPI_Syn_Class4initEv+0x44>)
   160ec:	609a      	str	r2, [r3, #8]
	ready=true;
   160ee:	687b      	ldr	r3, [r7, #4]
   160f0:	2201      	movs	r2, #1
   160f2:	701a      	strb	r2, [r3, #0]
	
}
   160f4:	bf00      	nop
   160f6:	3708      	adds	r7, #8
   160f8:	46bd      	mov	sp, r7
   160fa:	bd80      	pop	{r7, pc}
   160fc:	000072bd 	.word	0x000072bd
   16100:	00007131 	.word	0x00007131
   16104:	20009ef0 	.word	0x20009ef0

00016108 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   16108:	b480      	push	{r7}
   1610a:	b083      	sub	sp, #12
   1610c:	af00      	add	r7, sp, #0
   1610e:	6078      	str	r0, [r7, #4]
   16110:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   16112:	4a05      	ldr	r2, [pc, #20]	; (16128 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   16114:	687b      	ldr	r3, [r7, #4]
   16116:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   16118:	687b      	ldr	r3, [r7, #4]
   1611a:	683a      	ldr	r2, [r7, #0]
   1611c:	60da      	str	r2, [r3, #12]
}
   1611e:	bf00      	nop
   16120:	370c      	adds	r7, #12
   16122:	46bd      	mov	sp, r7
   16124:	bc80      	pop	{r7}
   16126:	4770      	bx	lr
   16128:	20009eec 	.word	0x20009eec

0001612c <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   1612c:	b580      	push	{r7, lr}
   1612e:	b082      	sub	sp, #8
   16130:	af00      	add	r7, sp, #0
   16132:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   16134:	687b      	ldr	r3, [r7, #4]
   16136:	68da      	ldr	r2, [r3, #12]
   16138:	687b      	ldr	r3, [r7, #4]
   1613a:	3310      	adds	r3, #16
   1613c:	4619      	mov	r1, r3
   1613e:	4610      	mov	r0, r2
   16140:	4b07      	ldr	r3, [pc, #28]	; (16160 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   16142:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   16144:	687b      	ldr	r3, [r7, #4]
   16146:	68db      	ldr	r3, [r3, #12]
   16148:	4618      	mov	r0, r3
   1614a:	4b06      	ldr	r3, [pc, #24]	; (16164 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   1614c:	4798      	blx	r3
	ready=true;
   1614e:	687b      	ldr	r3, [r7, #4]
   16150:	2201      	movs	r2, #1
   16152:	701a      	strb	r2, [r3, #0]
	return 0;
   16154:	2300      	movs	r3, #0
}
   16156:	4618      	mov	r0, r3
   16158:	3708      	adds	r7, #8
   1615a:	46bd      	mov	sp, r7
   1615c:	bd80      	pop	{r7, pc}
   1615e:	bf00      	nop
   16160:	000072bd 	.word	0x000072bd
   16164:	00007131 	.word	0x00007131

00016168 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   16168:	b580      	push	{r7, lr}
   1616a:	b086      	sub	sp, #24
   1616c:	af00      	add	r7, sp, #0
   1616e:	60f8      	str	r0, [r7, #12]
   16170:	60b9      	str	r1, [r7, #8]
   16172:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   16174:	68fb      	ldr	r3, [r7, #12]
   16176:	2201      	movs	r2, #1
   16178:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   1617a:	68fb      	ldr	r3, [r7, #12]
   1617c:	691b      	ldr	r3, [r3, #16]
   1617e:	687a      	ldr	r2, [r7, #4]
   16180:	b292      	uxth	r2, r2
   16182:	68b9      	ldr	r1, [r7, #8]
   16184:	4618      	mov	r0, r3
   16186:	4b08      	ldr	r3, [pc, #32]	; (161a8 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   16188:	4798      	blx	r3
   1618a:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   1618c:	697b      	ldr	r3, [r7, #20]
   1618e:	2b00      	cmp	r3, #0
   16190:	bf14      	ite	ne
   16192:	2301      	movne	r3, #1
   16194:	2300      	moveq	r3, #0
   16196:	b2da      	uxtb	r2, r3
   16198:	68fb      	ldr	r3, [r7, #12]
   1619a:	761a      	strb	r2, [r3, #24]
	 return w;
   1619c:	697b      	ldr	r3, [r7, #20]
	
}
   1619e:	4618      	mov	r0, r3
   161a0:	3718      	adds	r7, #24
   161a2:	46bd      	mov	sp, r7
   161a4:	bd80      	pop	{r7, pc}
   161a6:	bf00      	nop
   161a8:	00019c7d 	.word	0x00019c7d

000161ac <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   161ac:	b580      	push	{r7, lr}
   161ae:	b086      	sub	sp, #24
   161b0:	af00      	add	r7, sp, #0
   161b2:	60f8      	str	r0, [r7, #12]
   161b4:	60b9      	str	r1, [r7, #8]
   161b6:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   161b8:	68fb      	ldr	r3, [r7, #12]
   161ba:	2201      	movs	r2, #1
   161bc:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   161be:	68fb      	ldr	r3, [r7, #12]
   161c0:	691b      	ldr	r3, [r3, #16]
   161c2:	687a      	ldr	r2, [r7, #4]
   161c4:	b292      	uxth	r2, r2
   161c6:	68b9      	ldr	r1, [r7, #8]
   161c8:	4618      	mov	r0, r3
   161ca:	4b08      	ldr	r3, [pc, #32]	; (161ec <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   161cc:	4798      	blx	r3
   161ce:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   161d0:	697b      	ldr	r3, [r7, #20]
   161d2:	2b00      	cmp	r3, #0
   161d4:	bf14      	ite	ne
   161d6:	2301      	movne	r3, #1
   161d8:	2300      	moveq	r3, #0
   161da:	b2da      	uxtb	r2, r3
   161dc:	68fb      	ldr	r3, [r7, #12]
   161de:	765a      	strb	r2, [r3, #25]
	return  r;
   161e0:	697b      	ldr	r3, [r7, #20]
}
   161e2:	4618      	mov	r0, r3
   161e4:	3718      	adds	r7, #24
   161e6:	46bd      	mov	sp, r7
   161e8:	bd80      	pop	{r7, pc}
   161ea:	bf00      	nop
   161ec:	00019ccd 	.word	0x00019ccd

000161f0 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   161f0:	b580      	push	{r7, lr}
   161f2:	b082      	sub	sp, #8
   161f4:	af00      	add	r7, sp, #0
   161f6:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   161f8:	687b      	ldr	r3, [r7, #4]
   161fa:	68db      	ldr	r3, [r3, #12]
   161fc:	4618      	mov	r0, r3
   161fe:	4b03      	ldr	r3, [pc, #12]	; (1620c <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   16200:	4798      	blx	r3
	
}
   16202:	bf00      	nop
   16204:	3708      	adds	r7, #8
   16206:	46bd      	mov	sp, r7
   16208:	bd80      	pop	{r7, pc}
   1620a:	bf00      	nop
   1620c:	0000716d 	.word	0x0000716d

00016210 <_ZN13SPI_Syn_Class10IsSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::IsSPIReady(void){
   16210:	b480      	push	{r7}
   16212:	b083      	sub	sp, #12
   16214:	af00      	add	r7, sp, #0
   16216:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   16218:	687b      	ldr	r3, [r7, #4]
   1621a:	2201      	movs	r2, #1
   1621c:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   1621e:	687b      	ldr	r3, [r7, #4]
   16220:	781b      	ldrb	r3, [r3, #0]
   16222:	b2db      	uxtb	r3, r3
   16224:	2b00      	cmp	r3, #0
   16226:	d001      	beq.n	1622c <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1c>
	{
		
		return true;
   16228:	2301      	movs	r3, #1
   1622a:	e000      	b.n	1622e <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1e>
	} 
	else
	{
		return false;
   1622c:	2300      	movs	r3, #0
	}
	return ready;
	
}
   1622e:	4618      	mov	r0, r3
   16230:	370c      	adds	r7, #12
   16232:	46bd      	mov	sp, r7
   16234:	bc80      	pop	{r7}
   16236:	4770      	bx	lr

00016238 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
   16238:	b480      	push	{r7}
   1623a:	b083      	sub	sp, #12
   1623c:	af00      	add	r7, sp, #0
   1623e:	6078      	str	r0, [r7, #4]
   16240:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=i2c;
   16242:	687b      	ldr	r3, [r7, #4]
   16244:	683a      	ldr	r2, [r7, #0]
   16246:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
   16248:	4a05      	ldr	r2, [pc, #20]	; (16260 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x28>)
   1624a:	687b      	ldr	r3, [r7, #4]
   1624c:	6013      	str	r3, [r2, #0]
	i2ca=&i2cAsync;
   1624e:	687b      	ldr	r3, [r7, #4]
   16250:	4a04      	ldr	r2, [pc, #16]	; (16264 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
   16252:	609a      	str	r2, [r3, #8]
} //AT24MAC_Class
   16254:	687b      	ldr	r3, [r7, #4]
   16256:	4618      	mov	r0, r3
   16258:	370c      	adds	r7, #12
   1625a:	46bd      	mov	sp, r7
   1625c:	bc80      	pop	{r7}
   1625e:	4770      	bx	lr
   16260:	20009f30 	.word	0x20009f30
   16264:	20009f38 	.word	0x20009f38

00016268 <_ZN13AT24MAC_ClassD1Ev>:


// default destructor
AT24MAC_Class::~AT24MAC_Class()
   16268:	b480      	push	{r7}
   1626a:	b083      	sub	sp, #12
   1626c:	af00      	add	r7, sp, #0
   1626e:	6078      	str	r0, [r7, #4]
{
} //~AT24MAC_Class
   16270:	687b      	ldr	r3, [r7, #4]
   16272:	4618      	mov	r0, r3
   16274:	370c      	adds	r7, #12
   16276:	46bd      	mov	sp, r7
   16278:	bc80      	pop	{r7}
   1627a:	4770      	bx	lr

0001627c <_ZN13AT24MAC_Class4InitEv>:



bool AT24MAC_Class::Init(void){
   1627c:	b580      	push	{r7, lr}
   1627e:	b082      	sub	sp, #8
   16280:	af00      	add	r7, sp, #0
   16282:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
   16284:	2156      	movs	r1, #86	; 0x56
   16286:	6878      	ldr	r0, [r7, #4]
   16288:	4b04      	ldr	r3, [pc, #16]	; (1629c <_ZN13AT24MAC_Class4InitEv+0x20>)
   1628a:	4798      	blx	r3
	return SelfTest();
   1628c:	6878      	ldr	r0, [r7, #4]
   1628e:	4b04      	ldr	r3, [pc, #16]	; (162a0 <_ZN13AT24MAC_Class4InitEv+0x24>)
   16290:	4798      	blx	r3
   16292:	4603      	mov	r3, r0
}
   16294:	4618      	mov	r0, r3
   16296:	3708      	adds	r7, #8
   16298:	46bd      	mov	sp, r7
   1629a:	bd80      	pop	{r7, pc}
   1629c:	000162a5 	.word	0x000162a5
   162a0:	00016555 	.word	0x00016555

000162a4 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
   162a4:	b580      	push	{r7, lr}
   162a6:	b082      	sub	sp, #8
   162a8:	af00      	add	r7, sp, #0
   162aa:	6078      	str	r0, [r7, #4]
   162ac:	460b      	mov	r3, r1
   162ae:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   162b0:	687b      	ldr	r3, [r7, #4]
   162b2:	78fa      	ldrb	r2, [r7, #3]
   162b4:	731a      	strb	r2, [r3, #12]
	i2ca->Set_descriptor(ptrI2CDescr);
   162b6:	687b      	ldr	r3, [r7, #4]
   162b8:	689a      	ldr	r2, [r3, #8]
   162ba:	687b      	ldr	r3, [r7, #4]
   162bc:	685b      	ldr	r3, [r3, #4]
   162be:	4619      	mov	r1, r3
   162c0:	4610      	mov	r0, r2
   162c2:	4b09      	ldr	r3, [pc, #36]	; (162e8 <_ZN13AT24MAC_Class4InitEh+0x44>)
   162c4:	4798      	blx	r3
	isReady=i2ca->Init(addr)==0;
   162c6:	687b      	ldr	r3, [r7, #4]
   162c8:	689b      	ldr	r3, [r3, #8]
   162ca:	78fa      	ldrb	r2, [r7, #3]
   162cc:	4611      	mov	r1, r2
   162ce:	4618      	mov	r0, r3
   162d0:	4b06      	ldr	r3, [pc, #24]	; (162ec <_ZN13AT24MAC_Class4InitEh+0x48>)
   162d2:	4798      	blx	r3
   162d4:	4603      	mov	r3, r0
   162d6:	f083 0301 	eor.w	r3, r3, #1
   162da:	b2da      	uxtb	r2, r3
   162dc:	687b      	ldr	r3, [r7, #4]
   162de:	701a      	strb	r2, [r3, #0]
}
   162e0:	bf00      	nop
   162e2:	3708      	adds	r7, #8
   162e4:	46bd      	mov	sp, r7
   162e6:	bd80      	pop	{r7, pc}
   162e8:	00018ed9 	.word	0x00018ed9
   162ec:	00018fe1 	.word	0x00018fe1

000162f0 <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
	array[1]=value;
	uint32_t w= i2ca->Write(array,2);
	while(!i2ca->txReady);
	return	w;
}
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
   162f0:	b580      	push	{r7, lr}
   162f2:	b08c      	sub	sp, #48	; 0x30
   162f4:	af00      	add	r7, sp, #0
   162f6:	60f8      	str	r0, [r7, #12]
   162f8:	60b9      	str	r1, [r7, #8]
   162fa:	4611      	mov	r1, r2
   162fc:	461a      	mov	r2, r3
   162fe:	460b      	mov	r3, r1
   16300:	71fb      	strb	r3, [r7, #7]
   16302:	4613      	mov	r3, r2
   16304:	71bb      	strb	r3, [r7, #6]
	uint32_t w;
	uint8_t i;
	uint8_t	*ptr=p;
   16306:	68bb      	ldr	r3, [r7, #8]
   16308:	627b      	str	r3, [r7, #36]	; 0x24
// 		delay_us(1500);
// 		p++;
// 	
// 		while(!AcknolledgePolling());
// 	}
	isReady=false;
   1630a:	68fb      	ldr	r3, [r7, #12]
   1630c:	2200      	movs	r2, #0
   1630e:	701a      	strb	r2, [r3, #0]
	uint8_t array[1+AT24MAC_BUFFER_SIZE],value,size0,addr0=addr;
   16310:	79fb      	ldrb	r3, [r7, #7]
   16312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if ( size>AT24MAC_BUFFER_SIZE)
   16316:	79bb      	ldrb	r3, [r7, #6]
   16318:	2b10      	cmp	r3, #16
   1631a:	dd6e      	ble.n	163fa <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x10a>
	{
		array[0]=addr0;
   1631c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   16320:	743b      	strb	r3, [r7, #16]
		size0=AT24MAC_BUFFER_SIZE-addr%(AT24MAC_BUFFER_SIZE);
   16322:	79fb      	ldrb	r3, [r7, #7]
   16324:	f003 030f 	and.w	r3, r3, #15
   16328:	b2db      	uxtb	r3, r3
   1632a:	f1c3 0310 	rsb	r3, r3, #16
   1632e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		memcpy((void*)&array[1],ptr,size0);
   16332:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
   16336:	f107 0310 	add.w	r3, r7, #16
   1633a:	3301      	adds	r3, #1
   1633c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1633e:	4618      	mov	r0, r3
   16340:	4b41      	ldr	r3, [pc, #260]	; (16448 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   16342:	4798      	blx	r3
		w= i2ca->Write(array,1+size0);
   16344:	68fb      	ldr	r3, [r7, #12]
   16346:	6898      	ldr	r0, [r3, #8]
   16348:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   1634c:	b29b      	uxth	r3, r3
   1634e:	3301      	adds	r3, #1
   16350:	b29a      	uxth	r2, r3
   16352:	f107 0310 	add.w	r3, r7, #16
   16356:	4619      	mov	r1, r3
   16358:	4b3c      	ldr	r3, [pc, #240]	; (1644c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   1635a:	4798      	blx	r3
   1635c:	4603      	mov	r3, r0
   1635e:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(!i2ca->txReady);
   16360:	68fb      	ldr	r3, [r7, #12]
   16362:	689b      	ldr	r3, [r3, #8]
   16364:	7d1b      	ldrb	r3, [r3, #20]
   16366:	b2db      	uxtb	r3, r3
   16368:	f083 0301 	eor.w	r3, r3, #1
   1636c:	b2db      	uxtb	r3, r3
   1636e:	2b00      	cmp	r3, #0
   16370:	d000      	beq.n	16374 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x84>
   16372:	e7f5      	b.n	16360 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x70>
		ptr+=size0;
   16374:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   16378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1637a:	4413      	add	r3, r2
   1637c:	627b      	str	r3, [r7, #36]	; 0x24
		addr0+=size0;
   1637e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   16382:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   16386:	4413      	add	r3, r2
   16388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for (i = size0; i <size+1; i+=AT24MAC_BUFFER_SIZE)
   1638c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   16390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   16394:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   16398:	79bb      	ldrb	r3, [r7, #6]
   1639a:	3301      	adds	r3, #1
   1639c:	429a      	cmp	r2, r3
   1639e:	da4d      	bge.n	1643c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x14c>
		{
			array[0]=addr0;
   163a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   163a4:	743b      	strb	r3, [r7, #16]
			memcpy((void*)&array[1],ptr,AT24MAC_BUFFER_SIZE);
   163a6:	f107 0310 	add.w	r3, r7, #16
   163aa:	3301      	adds	r3, #1
   163ac:	2210      	movs	r2, #16
   163ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
   163b0:	4618      	mov	r0, r3
   163b2:	4b25      	ldr	r3, [pc, #148]	; (16448 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   163b4:	4798      	blx	r3
			w= i2ca->Write(array,1+AT24MAC_BUFFER_SIZE);
   163b6:	68fb      	ldr	r3, [r7, #12]
   163b8:	689b      	ldr	r3, [r3, #8]
   163ba:	f107 0110 	add.w	r1, r7, #16
   163be:	2211      	movs	r2, #17
   163c0:	4618      	mov	r0, r3
   163c2:	4b22      	ldr	r3, [pc, #136]	; (1644c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   163c4:	4798      	blx	r3
   163c6:	4603      	mov	r3, r0
   163c8:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(!i2ca->txReady);
   163ca:	68fb      	ldr	r3, [r7, #12]
   163cc:	689b      	ldr	r3, [r3, #8]
   163ce:	7d1b      	ldrb	r3, [r3, #20]
   163d0:	b2db      	uxtb	r3, r3
   163d2:	f083 0301 	eor.w	r3, r3, #1
   163d6:	b2db      	uxtb	r3, r3
   163d8:	2b00      	cmp	r3, #0
   163da:	d000      	beq.n	163de <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xee>
   163dc:	e7f5      	b.n	163ca <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xda>
			ptr+=AT24MAC_BUFFER_SIZE;
   163de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   163e0:	3310      	adds	r3, #16
   163e2:	627b      	str	r3, [r7, #36]	; 0x24
			addr0+=AT24MAC_BUFFER_SIZE;
   163e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   163e8:	3310      	adds	r3, #16
   163ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for (i = size0; i <size+1; i+=AT24MAC_BUFFER_SIZE)
   163ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   163f2:	3310      	adds	r3, #16
   163f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   163f8:	e7cc      	b.n	16394 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xa4>
		}
		
	} 
	else
	{
		array[0]=addr;
   163fa:	79fb      	ldrb	r3, [r7, #7]
   163fc:	743b      	strb	r3, [r7, #16]
		memcpy((void*)&array[1],p,size);
   163fe:	79ba      	ldrb	r2, [r7, #6]
   16400:	f107 0310 	add.w	r3, r7, #16
   16404:	3301      	adds	r3, #1
   16406:	68b9      	ldr	r1, [r7, #8]
   16408:	4618      	mov	r0, r3
   1640a:	4b0f      	ldr	r3, [pc, #60]	; (16448 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   1640c:	4798      	blx	r3
		w= i2ca->Write(array,1+size);
   1640e:	68fb      	ldr	r3, [r7, #12]
   16410:	6898      	ldr	r0, [r3, #8]
   16412:	79bb      	ldrb	r3, [r7, #6]
   16414:	b29b      	uxth	r3, r3
   16416:	3301      	adds	r3, #1
   16418:	b29a      	uxth	r2, r3
   1641a:	f107 0310 	add.w	r3, r7, #16
   1641e:	4619      	mov	r1, r3
   16420:	4b0a      	ldr	r3, [pc, #40]	; (1644c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   16422:	4798      	blx	r3
   16424:	4603      	mov	r3, r0
   16426:	62fb      	str	r3, [r7, #44]	; 0x2c
		//AcknolledgePolling();
		while(!i2ca->txReady);
   16428:	68fb      	ldr	r3, [r7, #12]
   1642a:	689b      	ldr	r3, [r3, #8]
   1642c:	7d1b      	ldrb	r3, [r3, #20]
   1642e:	b2db      	uxtb	r3, r3
   16430:	f083 0301 	eor.w	r3, r3, #1
   16434:	b2db      	uxtb	r3, r3
   16436:	2b00      	cmp	r3, #0
   16438:	d000      	beq.n	1643c <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x14c>
   1643a:	e7f5      	b.n	16428 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x138>
	}
	
	
	
	return	w;
   1643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1643e:	4618      	mov	r0, r3
   16440:	3730      	adds	r7, #48	; 0x30
   16442:	46bd      	mov	sp, r7
   16444:	bd80      	pop	{r7, pc}
   16446:	bf00      	nop
   16448:	0001c485 	.word	0x0001c485
   1644c:	00019031 	.word	0x00019031

00016450 <_ZN13AT24MAC_Class12WriteAddressEPhth>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint16_t addr, uint8_t size){
   16450:	b590      	push	{r4, r7, lr}
   16452:	b087      	sub	sp, #28
   16454:	af00      	add	r7, sp, #0
   16456:	60f8      	str	r0, [r7, #12]
   16458:	60b9      	str	r1, [r7, #8]
   1645a:	4611      	mov	r1, r2
   1645c:	461a      	mov	r2, r3
   1645e:	460b      	mov	r3, r1
   16460:	80fb      	strh	r3, [r7, #6]
   16462:	4613      	mov	r3, r2
   16464:	717b      	strb	r3, [r7, #5]
	

	uint8_t add=(uint8_t)(0xff&addr);
   16466:	88fb      	ldrh	r3, [r7, #6]
   16468:	75fb      	strb	r3, [r7, #23]
	return	WriteAddress(p,add,size);
   1646a:	797b      	ldrb	r3, [r7, #5]
   1646c:	7dfa      	ldrb	r2, [r7, #23]
   1646e:	68b9      	ldr	r1, [r7, #8]
   16470:	68f8      	ldr	r0, [r7, #12]
   16472:	4c03      	ldr	r4, [pc, #12]	; (16480 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x30>)
   16474:	47a0      	blx	r4
   16476:	4603      	mov	r3, r0
}
   16478:	4618      	mov	r0, r3
   1647a:	371c      	adds	r7, #28
   1647c:	46bd      	mov	sp, r7
   1647e:	bd90      	pop	{r4, r7, pc}
   16480:	000162f1 	.word	0x000162f1

00016484 <_ZN13AT24MAC_Class11ReadAddressEPhhh>:
	i2ca->Read(&value,1);
	
	return value;
}

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
   16484:	b580      	push	{r7, lr}
   16486:	b086      	sub	sp, #24
   16488:	af00      	add	r7, sp, #0
   1648a:	60f8      	str	r0, [r7, #12]
   1648c:	60b9      	str	r1, [r7, #8]
   1648e:	4611      	mov	r1, r2
   16490:	461a      	mov	r2, r3
   16492:	460b      	mov	r3, r1
   16494:	71fb      	strb	r3, [r7, #7]
   16496:	4613      	mov	r3, r2
   16498:	71bb      	strb	r3, [r7, #6]
	
	uint32_t r;
	uint8_t	value;
	while(!i2ca->rxReady);
   1649a:	68fb      	ldr	r3, [r7, #12]
   1649c:	689b      	ldr	r3, [r3, #8]
   1649e:	7d5b      	ldrb	r3, [r3, #21]
   164a0:	b2db      	uxtb	r3, r3
   164a2:	f083 0301 	eor.w	r3, r3, #1
   164a6:	b2db      	uxtb	r3, r3
   164a8:	2b00      	cmp	r3, #0
   164aa:	d000      	beq.n	164ae <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x2a>
   164ac:	e7f5      	b.n	1649a <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x16>
	i2ca->Write(&addr,1);
   164ae:	68fb      	ldr	r3, [r7, #12]
   164b0:	689b      	ldr	r3, [r3, #8]
   164b2:	1df9      	adds	r1, r7, #7
   164b4:	2201      	movs	r2, #1
   164b6:	4618      	mov	r0, r3
   164b8:	4b12      	ldr	r3, [pc, #72]	; (16504 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x80>)
   164ba:	4798      	blx	r3
	while(!i2ca->txReady);
   164bc:	68fb      	ldr	r3, [r7, #12]
   164be:	689b      	ldr	r3, [r3, #8]
   164c0:	7d1b      	ldrb	r3, [r3, #20]
   164c2:	b2db      	uxtb	r3, r3
   164c4:	f083 0301 	eor.w	r3, r3, #1
   164c8:	b2db      	uxtb	r3, r3
   164ca:	2b00      	cmp	r3, #0
   164cc:	d000      	beq.n	164d0 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4c>
   164ce:	e7f5      	b.n	164bc <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x38>
	r= i2ca->Read(p,size);
   164d0:	68fb      	ldr	r3, [r7, #12]
   164d2:	689b      	ldr	r3, [r3, #8]
   164d4:	79ba      	ldrb	r2, [r7, #6]
   164d6:	b292      	uxth	r2, r2
   164d8:	68b9      	ldr	r1, [r7, #8]
   164da:	4618      	mov	r0, r3
   164dc:	4b0a      	ldr	r3, [pc, #40]	; (16508 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x84>)
   164de:	4798      	blx	r3
   164e0:	4603      	mov	r3, r0
   164e2:	617b      	str	r3, [r7, #20]
	while(!i2ca->rxReady);
   164e4:	68fb      	ldr	r3, [r7, #12]
   164e6:	689b      	ldr	r3, [r3, #8]
   164e8:	7d5b      	ldrb	r3, [r3, #21]
   164ea:	b2db      	uxtb	r3, r3
   164ec:	f083 0301 	eor.w	r3, r3, #1
   164f0:	b2db      	uxtb	r3, r3
   164f2:	2b00      	cmp	r3, #0
   164f4:	d000      	beq.n	164f8 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x74>
   164f6:	e7f5      	b.n	164e4 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x60>
			localAddress+=localSize;
		}
	}
	*/
	
	return r;
   164f8:	697b      	ldr	r3, [r7, #20]
}
   164fa:	4618      	mov	r0, r3
   164fc:	3718      	adds	r7, #24
   164fe:	46bd      	mov	sp, r7
   16500:	bd80      	pop	{r7, pc}
   16502:	bf00      	nop
   16504:	00019031 	.word	0x00019031
   16508:	00019075 	.word	0x00019075

0001650c <_ZN13AT24MAC_Class11ReadAddressEPhth>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
   1650c:	b590      	push	{r4, r7, lr}
   1650e:	b087      	sub	sp, #28
   16510:	af00      	add	r7, sp, #0
   16512:	60f8      	str	r0, [r7, #12]
   16514:	60b9      	str	r1, [r7, #8]
   16516:	4611      	mov	r1, r2
   16518:	461a      	mov	r2, r3
   1651a:	460b      	mov	r3, r1
   1651c:	80fb      	strh	r3, [r7, #6]
   1651e:	4613      	mov	r3, r2
   16520:	717b      	strb	r3, [r7, #5]
	uint8_t add=(uint8_t)(0xff&addr);
   16522:	88fb      	ldrh	r3, [r7, #6]
   16524:	75fb      	strb	r3, [r7, #23]
	while(!i2ca->rxReady);
   16526:	68fb      	ldr	r3, [r7, #12]
   16528:	689b      	ldr	r3, [r3, #8]
   1652a:	7d5b      	ldrb	r3, [r3, #21]
   1652c:	b2db      	uxtb	r3, r3
   1652e:	f083 0301 	eor.w	r3, r3, #1
   16532:	b2db      	uxtb	r3, r3
   16534:	2b00      	cmp	r3, #0
   16536:	d000      	beq.n	1653a <_ZN13AT24MAC_Class11ReadAddressEPhth+0x2e>
   16538:	e7f5      	b.n	16526 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x1a>
	return ReadAddress(p,add,size);
   1653a:	797b      	ldrb	r3, [r7, #5]
   1653c:	7dfa      	ldrb	r2, [r7, #23]
   1653e:	68b9      	ldr	r1, [r7, #8]
   16540:	68f8      	ldr	r0, [r7, #12]
   16542:	4c03      	ldr	r4, [pc, #12]	; (16550 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x44>)
   16544:	47a0      	blx	r4
   16546:	4603      	mov	r3, r0
}
   16548:	4618      	mov	r0, r3
   1654a:	371c      	adds	r7, #28
   1654c:	46bd      	mov	sp, r7
   1654e:	bd90      	pop	{r4, r7, pc}
   16550:	00016485 	.word	0x00016485

00016554 <_ZN13AT24MAC_Class8SelfTestEv>:
		GetAcknowledge();
	} while (!IsReady());
	return isReady;
}

bool	AT24MAC_Class::SelfTest(void){
   16554:	b590      	push	{r4, r7, lr}
   16556:	b085      	sub	sp, #20
   16558:	af00      	add	r7, sp, #0
   1655a:	6078      	str	r0, [r7, #4]
	currentAddress=AT24MAC_MEMORY_SIZE-AT24MAC_BUFFER_SIZE*2;
   1655c:	687b      	ldr	r3, [r7, #4]
   1655e:	22e0      	movs	r2, #224	; 0xe0
   16560:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   16564:	2300      	movs	r3, #0
   16566:	60fb      	str	r3, [r7, #12]
   16568:	68fb      	ldr	r3, [r7, #12]
   1656a:	2b0f      	cmp	r3, #15
   1656c:	dc18      	bgt.n	165a0 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
		tx_buffer[i] = (uint8_t)rand();
   1656e:	4b33      	ldr	r3, [pc, #204]	; (1663c <_ZN13AT24MAC_Class8SelfTestEv+0xe8>)
   16570:	4798      	blx	r3
   16572:	4603      	mov	r3, r0
   16574:	b2d9      	uxtb	r1, r3
   16576:	687a      	ldr	r2, [r7, #4]
   16578:	68fb      	ldr	r3, [r7, #12]
   1657a:	4413      	add	r3, r2
   1657c:	330e      	adds	r3, #14
   1657e:	460a      	mov	r2, r1
   16580:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
   16582:	68fb      	ldr	r3, [r7, #12]
   16584:	b2db      	uxtb	r3, r3
   16586:	f1c3 0310 	rsb	r3, r3, #16
   1658a:	b2d9      	uxtb	r1, r3
   1658c:	687a      	ldr	r2, [r7, #4]
   1658e:	68fb      	ldr	r3, [r7, #12]
   16590:	4413      	add	r3, r2
   16592:	331e      	adds	r3, #30
   16594:	460a      	mov	r2, r1
   16596:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   16598:	68fb      	ldr	r3, [r7, #12]
   1659a:	3301      	adds	r3, #1
   1659c:	60fb      	str	r3, [r7, #12]
   1659e:	e7e3      	b.n	16568 <_ZN13AT24MAC_Class8SelfTestEv+0x14>
	}

	while(!IsReady());
   165a0:	6878      	ldr	r0, [r7, #4]
   165a2:	4b27      	ldr	r3, [pc, #156]	; (16640 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   165a4:	4798      	blx	r3
   165a6:	4603      	mov	r3, r0
   165a8:	f083 0301 	eor.w	r3, r3, #1
   165ac:	b2db      	uxtb	r3, r3
   165ae:	2b00      	cmp	r3, #0
   165b0:	d000      	beq.n	165b4 <_ZN13AT24MAC_Class8SelfTestEv+0x60>
   165b2:	e7f5      	b.n	165a0 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
	WriteAddress(tx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   165b4:	687b      	ldr	r3, [r7, #4]
   165b6:	f103 010e 	add.w	r1, r3, #14
   165ba:	687b      	ldr	r3, [r7, #4]
   165bc:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   165c0:	2310      	movs	r3, #16
   165c2:	6878      	ldr	r0, [r7, #4]
   165c4:	4c1f      	ldr	r4, [pc, #124]	; (16644 <_ZN13AT24MAC_Class8SelfTestEv+0xf0>)
   165c6:	47a0      	blx	r4
	while(!IsReady());
   165c8:	6878      	ldr	r0, [r7, #4]
   165ca:	4b1d      	ldr	r3, [pc, #116]	; (16640 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   165cc:	4798      	blx	r3
   165ce:	4603      	mov	r3, r0
   165d0:	f083 0301 	eor.w	r3, r3, #1
   165d4:	b2db      	uxtb	r3, r3
   165d6:	2b00      	cmp	r3, #0
   165d8:	d000      	beq.n	165dc <_ZN13AT24MAC_Class8SelfTestEv+0x88>
   165da:	e7f5      	b.n	165c8 <_ZN13AT24MAC_Class8SelfTestEv+0x74>
	ReadAddress(rx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   165dc:	687b      	ldr	r3, [r7, #4]
   165de:	f103 011e 	add.w	r1, r3, #30
   165e2:	687b      	ldr	r3, [r7, #4]
   165e4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   165e8:	2310      	movs	r3, #16
   165ea:	6878      	ldr	r0, [r7, #4]
   165ec:	4c16      	ldr	r4, [pc, #88]	; (16648 <_ZN13AT24MAC_Class8SelfTestEv+0xf4>)
   165ee:	47a0      	blx	r4
	isOK = true;
   165f0:	687b      	ldr	r3, [r7, #4]
   165f2:	2201      	movs	r2, #1
   165f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   165f8:	2300      	movs	r3, #0
   165fa:	60bb      	str	r3, [r7, #8]
   165fc:	68bb      	ldr	r3, [r7, #8]
   165fe:	2b0f      	cmp	r3, #15
   16600:	dc14      	bgt.n	1662c <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
		if (tx_buffer[i] != rx_buffer[i]) {
   16602:	687a      	ldr	r2, [r7, #4]
   16604:	68bb      	ldr	r3, [r7, #8]
   16606:	4413      	add	r3, r2
   16608:	330e      	adds	r3, #14
   1660a:	781a      	ldrb	r2, [r3, #0]
   1660c:	6879      	ldr	r1, [r7, #4]
   1660e:	68bb      	ldr	r3, [r7, #8]
   16610:	440b      	add	r3, r1
   16612:	331e      	adds	r3, #30
   16614:	781b      	ldrb	r3, [r3, #0]
   16616:	429a      	cmp	r2, r3
   16618:	d004      	beq.n	16624 <_ZN13AT24MAC_Class8SelfTestEv+0xd0>
			isOK = false;
   1661a:	687b      	ldr	r3, [r7, #4]
   1661c:	2200      	movs	r2, #0
   1661e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
// 			usb.print("EEPROM verification failed. Address: ");
// 			usb.print(addr,HEX);
// 			usb<<" bit :"<<i<<NEWLINE;
			//flashAddress=0;
			
			break;
   16622:	e003      	b.n	1662c <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   16624:	68bb      	ldr	r3, [r7, #8]
   16626:	3301      	adds	r3, #1
   16628:	60bb      	str	r3, [r7, #8]
   1662a:	e7e7      	b.n	165fc <_ZN13AT24MAC_Class8SelfTestEv+0xa8>
		}
		
	}
	return isOK;
   1662c:	687b      	ldr	r3, [r7, #4]
   1662e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
   16632:	4618      	mov	r0, r3
   16634:	3714      	adds	r7, #20
   16636:	46bd      	mov	sp, r7
   16638:	bd90      	pop	{r4, r7, pc}
   1663a:	bf00      	nop
   1663c:	0001c655 	.word	0x0001c655
   16640:	0001664d 	.word	0x0001664d
   16644:	000162f1 	.word	0x000162f1
   16648:	00016485 	.word	0x00016485

0001664c <_ZN13AT24MAC_Class7IsReadyEv>:


bool AT24MAC_Class::IsReady(void){
   1664c:	b480      	push	{r7}
   1664e:	b083      	sub	sp, #12
   16650:	af00      	add	r7, sp, #0
   16652:	6078      	str	r0, [r7, #4]

	if (i2ca->txReady && i2ca->rxReady)
   16654:	687b      	ldr	r3, [r7, #4]
   16656:	689b      	ldr	r3, [r3, #8]
   16658:	7d1b      	ldrb	r3, [r3, #20]
   1665a:	b2db      	uxtb	r3, r3
   1665c:	2b00      	cmp	r3, #0
   1665e:	d007      	beq.n	16670 <_ZN13AT24MAC_Class7IsReadyEv+0x24>
   16660:	687b      	ldr	r3, [r7, #4]
   16662:	689b      	ldr	r3, [r3, #8]
   16664:	7d5b      	ldrb	r3, [r3, #21]
   16666:	b2db      	uxtb	r3, r3
   16668:	2b00      	cmp	r3, #0
   1666a:	d001      	beq.n	16670 <_ZN13AT24MAC_Class7IsReadyEv+0x24>
   1666c:	2301      	movs	r3, #1
   1666e:	e000      	b.n	16672 <_ZN13AT24MAC_Class7IsReadyEv+0x26>
   16670:	2300      	movs	r3, #0
   16672:	2b00      	cmp	r3, #0
   16674:	d003      	beq.n	1667e <_ZN13AT24MAC_Class7IsReadyEv+0x32>
	{
		isReady=true;
   16676:	687b      	ldr	r3, [r7, #4]
   16678:	2201      	movs	r2, #1
   1667a:	701a      	strb	r2, [r3, #0]
   1667c:	e002      	b.n	16684 <_ZN13AT24MAC_Class7IsReadyEv+0x38>
	}
	else
	{
		isReady=false;
   1667e:	687b      	ldr	r3, [r7, #4]
   16680:	2200      	movs	r2, #0
   16682:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
   16684:	687b      	ldr	r3, [r7, #4]
   16686:	781b      	ldrb	r3, [r3, #0]
   16688:	b2db      	uxtb	r3, r3
}
   1668a:	4618      	mov	r0, r3
   1668c:	370c      	adds	r7, #12
   1668e:	46bd      	mov	sp, r7
   16690:	bc80      	pop	{r7}
   16692:	4770      	bx	lr

00016694 <_Z41__static_initialization_and_destruction_0ii>:

   16694:	b580      	push	{r7, lr}
   16696:	b082      	sub	sp, #8
   16698:	af00      	add	r7, sp, #0
   1669a:	6078      	str	r0, [r7, #4]
   1669c:	6039      	str	r1, [r7, #0]
   1669e:	687b      	ldr	r3, [r7, #4]
   166a0:	2b01      	cmp	r3, #1
   166a2:	d115      	bne.n	166d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   166a4:	683b      	ldr	r3, [r7, #0]
   166a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   166aa:	4293      	cmp	r3, r2
   166ac:	d110      	bne.n	166d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static  I2C_Asyn_Class	i2cAsync;
   166ae:	480a      	ldr	r0, [pc, #40]	; (166d8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   166b0:	4b0a      	ldr	r3, [pc, #40]	; (166dc <_Z41__static_initialization_and_destruction_0ii+0x48>)
   166b2:	4798      	blx	r3
   166b4:	4a0a      	ldr	r2, [pc, #40]	; (166e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   166b6:	490b      	ldr	r1, [pc, #44]	; (166e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   166b8:	4807      	ldr	r0, [pc, #28]	; (166d8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   166ba:	4b0b      	ldr	r3, [pc, #44]	; (166e8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   166bc:	4798      	blx	r3
   166be:	490b      	ldr	r1, [pc, #44]	; (166ec <_Z41__static_initialization_and_destruction_0ii+0x58>)
   166c0:	480b      	ldr	r0, [pc, #44]	; (166f0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   166c2:	4b0c      	ldr	r3, [pc, #48]	; (166f4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   166c4:	4798      	blx	r3
   166c6:	4a06      	ldr	r2, [pc, #24]	; (166e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   166c8:	490b      	ldr	r1, [pc, #44]	; (166f8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   166ca:	4809      	ldr	r0, [pc, #36]	; (166f0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   166cc:	4b06      	ldr	r3, [pc, #24]	; (166e8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   166ce:	4798      	blx	r3
   166d0:	bf00      	nop
   166d2:	3708      	adds	r7, #8
   166d4:	46bd      	mov	sp, r7
   166d6:	bd80      	pop	{r7, pc}
   166d8:	20009f38 	.word	0x20009f38
   166dc:	00018e89 	.word	0x00018e89
   166e0:	20000000 	.word	0x20000000
   166e4:	00018eb9 	.word	0x00018eb9
   166e8:	00019d1d 	.word	0x00019d1d
   166ec:	2000a8e8 	.word	0x2000a8e8
   166f0:	20009f7c 	.word	0x20009f7c
   166f4:	00016239 	.word	0x00016239
   166f8:	00016269 	.word	0x00016269

000166fc <_GLOBAL__sub_I_ptrAT24MACClass>:
   166fc:	b580      	push	{r7, lr}
   166fe:	af00      	add	r7, sp, #0
   16700:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16704:	2001      	movs	r0, #1
   16706:	4b01      	ldr	r3, [pc, #4]	; (1670c <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
   16708:	4798      	blx	r3
   1670a:	bd80      	pop	{r7, pc}
   1670c:	00016695 	.word	0x00016695

00016710 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
{
		appParameters=defaultParameters;
		spiPort=0;
		memoryMap=flashLayout;
} //FlashMemoryClass
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
   16710:	b580      	push	{r7, lr}
   16712:	b082      	sub	sp, #8
   16714:	af00      	add	r7, sp, #0
   16716:	6078      	str	r0, [r7, #4]
   16718:	6039      	str	r1, [r7, #0]
   1671a:	687b      	ldr	r3, [r7, #4]
   1671c:	3318      	adds	r3, #24
   1671e:	4618      	mov	r0, r3
   16720:	4b08      	ldr	r3, [pc, #32]	; (16744 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x34>)
   16722:	4798      	blx	r3
{
	appParameters=defaultParameters;
   16724:	687b      	ldr	r3, [r7, #4]
   16726:	4a08      	ldr	r2, [pc, #32]	; (16748 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x38>)
   16728:	7812      	ldrb	r2, [r2, #0]
   1672a:	711a      	strb	r2, [r3, #4]
	spi_descriptor=spi_des;
   1672c:	687b      	ldr	r3, [r7, #4]
   1672e:	683a      	ldr	r2, [r7, #0]
   16730:	615a      	str	r2, [r3, #20]
	memoryMap=flashLayout;
   16732:	4b06      	ldr	r3, [pc, #24]	; (1674c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x3c>)
   16734:	681a      	ldr	r2, [r3, #0]
   16736:	687b      	ldr	r3, [r7, #4]
   16738:	601a      	str	r2, [r3, #0]
} //FlashMemoryClass
   1673a:	687b      	ldr	r3, [r7, #4]
   1673c:	4618      	mov	r0, r3
   1673e:	3708      	adds	r7, #8
   16740:	46bd      	mov	sp, r7
   16742:	bd80      	pop	{r7, pc}
   16744:	0001608d 	.word	0x0001608d
   16748:	00021fe8 	.word	0x00021fe8
   1674c:	20009fb0 	.word	0x20009fb0

00016750 <_ZN16FlashMemoryClassD1Ev>:

// default destructor
FlashMemoryClass::~FlashMemoryClass()
   16750:	b580      	push	{r7, lr}
   16752:	b082      	sub	sp, #8
   16754:	af00      	add	r7, sp, #0
   16756:	6078      	str	r0, [r7, #4]
   16758:	687b      	ldr	r3, [r7, #4]
   1675a:	3318      	adds	r3, #24
   1675c:	4618      	mov	r0, r3
   1675e:	4b03      	ldr	r3, [pc, #12]	; (1676c <_ZN16FlashMemoryClassD1Ev+0x1c>)
   16760:	4798      	blx	r3
{
} //~FlashMemoryClass
   16762:	687b      	ldr	r3, [r7, #4]
   16764:	4618      	mov	r0, r3
   16766:	3708      	adds	r7, #8
   16768:	46bd      	mov	sp, r7
   1676a:	bd80      	pop	{r7, pc}
   1676c:	000160ad 	.word	0x000160ad

00016770 <_Z41__static_initialization_and_destruction_0ii>:
	flashClose();
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
   16770:	b580      	push	{r7, lr}
   16772:	b082      	sub	sp, #8
   16774:	af00      	add	r7, sp, #0
   16776:	6078      	str	r0, [r7, #4]
   16778:	6039      	str	r1, [r7, #0]
   1677a:	687b      	ldr	r3, [r7, #4]
   1677c:	2b01      	cmp	r3, #1
   1677e:	d10d      	bne.n	1679c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   16780:	683b      	ldr	r3, [r7, #0]
   16782:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16786:	4293      	cmp	r3, r2
   16788:	d108      	bne.n	1679c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1678a:	4906      	ldr	r1, [pc, #24]	; (167a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1678c:	4806      	ldr	r0, [pc, #24]	; (167a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1678e:	4b07      	ldr	r3, [pc, #28]	; (167ac <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   16790:	4798      	blx	r3
   16792:	4a07      	ldr	r2, [pc, #28]	; (167b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   16794:	4907      	ldr	r1, [pc, #28]	; (167b4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   16796:	4804      	ldr	r0, [pc, #16]	; (167a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   16798:	4b07      	ldr	r3, [pc, #28]	; (167b8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1679a:	4798      	blx	r3
   1679c:	bf00      	nop
   1679e:	3708      	adds	r7, #8
   167a0:	46bd      	mov	sp, r7
   167a2:	bd80      	pop	{r7, pc}
   167a4:	2000a770 	.word	0x2000a770
   167a8:	20009fb4 	.word	0x20009fb4
   167ac:	00016711 	.word	0x00016711
   167b0:	20000000 	.word	0x20000000
   167b4:	00016751 	.word	0x00016751
   167b8:	00019d1d 	.word	0x00019d1d

000167bc <_GLOBAL__sub_I_flashLayout>:
   167bc:	b580      	push	{r7, lr}
   167be:	af00      	add	r7, sp, #0
   167c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   167c4:	2001      	movs	r0, #1
   167c6:	4b01      	ldr	r3, [pc, #4]	; (167cc <_GLOBAL__sub_I_flashLayout+0x10>)
   167c8:	4798      	blx	r3
   167ca:	bd80      	pop	{r7, pc}
   167cc:	00016771 	.word	0x00016771

000167d0 <hri_port_set_DIR_reg>:
{
   167d0:	b480      	push	{r7}
   167d2:	b085      	sub	sp, #20
   167d4:	af00      	add	r7, sp, #0
   167d6:	60f8      	str	r0, [r7, #12]
   167d8:	460b      	mov	r3, r1
   167da:	607a      	str	r2, [r7, #4]
   167dc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   167de:	7afb      	ldrb	r3, [r7, #11]
   167e0:	68fa      	ldr	r2, [r7, #12]
   167e2:	01db      	lsls	r3, r3, #7
   167e4:	4413      	add	r3, r2
   167e6:	3308      	adds	r3, #8
   167e8:	687a      	ldr	r2, [r7, #4]
   167ea:	601a      	str	r2, [r3, #0]
}
   167ec:	bf00      	nop
   167ee:	3714      	adds	r7, #20
   167f0:	46bd      	mov	sp, r7
   167f2:	bc80      	pop	{r7}
   167f4:	4770      	bx	lr

000167f6 <hri_port_clear_DIR_reg>:
{
   167f6:	b480      	push	{r7}
   167f8:	b085      	sub	sp, #20
   167fa:	af00      	add	r7, sp, #0
   167fc:	60f8      	str	r0, [r7, #12]
   167fe:	460b      	mov	r3, r1
   16800:	607a      	str	r2, [r7, #4]
   16802:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   16804:	7afb      	ldrb	r3, [r7, #11]
   16806:	68fa      	ldr	r2, [r7, #12]
   16808:	01db      	lsls	r3, r3, #7
   1680a:	4413      	add	r3, r2
   1680c:	3304      	adds	r3, #4
   1680e:	687a      	ldr	r2, [r7, #4]
   16810:	601a      	str	r2, [r3, #0]
}
   16812:	bf00      	nop
   16814:	3714      	adds	r7, #20
   16816:	46bd      	mov	sp, r7
   16818:	bc80      	pop	{r7}
   1681a:	4770      	bx	lr

0001681c <hri_port_set_OUT_reg>:
{
   1681c:	b480      	push	{r7}
   1681e:	b085      	sub	sp, #20
   16820:	af00      	add	r7, sp, #0
   16822:	60f8      	str	r0, [r7, #12]
   16824:	460b      	mov	r3, r1
   16826:	607a      	str	r2, [r7, #4]
   16828:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   1682a:	7afb      	ldrb	r3, [r7, #11]
   1682c:	68fa      	ldr	r2, [r7, #12]
   1682e:	01db      	lsls	r3, r3, #7
   16830:	4413      	add	r3, r2
   16832:	3318      	adds	r3, #24
   16834:	687a      	ldr	r2, [r7, #4]
   16836:	601a      	str	r2, [r3, #0]
}
   16838:	bf00      	nop
   1683a:	3714      	adds	r7, #20
   1683c:	46bd      	mov	sp, r7
   1683e:	bc80      	pop	{r7}
   16840:	4770      	bx	lr

00016842 <hri_port_clear_OUT_reg>:
{
   16842:	b480      	push	{r7}
   16844:	b085      	sub	sp, #20
   16846:	af00      	add	r7, sp, #0
   16848:	60f8      	str	r0, [r7, #12]
   1684a:	460b      	mov	r3, r1
   1684c:	607a      	str	r2, [r7, #4]
   1684e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   16850:	7afb      	ldrb	r3, [r7, #11]
   16852:	68fa      	ldr	r2, [r7, #12]
   16854:	01db      	lsls	r3, r3, #7
   16856:	4413      	add	r3, r2
   16858:	3314      	adds	r3, #20
   1685a:	687a      	ldr	r2, [r7, #4]
   1685c:	601a      	str	r2, [r3, #0]
}
   1685e:	bf00      	nop
   16860:	3714      	adds	r7, #20
   16862:	46bd      	mov	sp, r7
   16864:	bc80      	pop	{r7}
   16866:	4770      	bx	lr

00016868 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   16868:	b480      	push	{r7}
   1686a:	b085      	sub	sp, #20
   1686c:	af00      	add	r7, sp, #0
   1686e:	6078      	str	r0, [r7, #4]
   16870:	4608      	mov	r0, r1
   16872:	4611      	mov	r1, r2
   16874:	461a      	mov	r2, r3
   16876:	4603      	mov	r3, r0
   16878:	70fb      	strb	r3, [r7, #3]
   1687a:	460b      	mov	r3, r1
   1687c:	70bb      	strb	r3, [r7, #2]
   1687e:	4613      	mov	r3, r2
   16880:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   16882:	78fa      	ldrb	r2, [r7, #3]
   16884:	78bb      	ldrb	r3, [r7, #2]
   16886:	6879      	ldr	r1, [r7, #4]
   16888:	01d2      	lsls	r2, r2, #7
   1688a:	440a      	add	r2, r1
   1688c:	4413      	add	r3, r2
   1688e:	3330      	adds	r3, #48	; 0x30
   16890:	781b      	ldrb	r3, [r3, #0]
   16892:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   16894:	7bfb      	ldrb	r3, [r7, #15]
   16896:	f023 030f 	bic.w	r3, r3, #15
   1689a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   1689c:	787b      	ldrb	r3, [r7, #1]
   1689e:	f003 030f 	and.w	r3, r3, #15
   168a2:	b2da      	uxtb	r2, r3
   168a4:	7bfb      	ldrb	r3, [r7, #15]
   168a6:	4313      	orrs	r3, r2
   168a8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   168aa:	78fa      	ldrb	r2, [r7, #3]
   168ac:	78bb      	ldrb	r3, [r7, #2]
   168ae:	6879      	ldr	r1, [r7, #4]
   168b0:	01d2      	lsls	r2, r2, #7
   168b2:	440a      	add	r2, r1
   168b4:	4413      	add	r3, r2
   168b6:	3330      	adds	r3, #48	; 0x30
   168b8:	7bfa      	ldrb	r2, [r7, #15]
   168ba:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   168bc:	bf00      	nop
   168be:	3714      	adds	r7, #20
   168c0:	46bd      	mov	sp, r7
   168c2:	bc80      	pop	{r7}
   168c4:	4770      	bx	lr

000168c6 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   168c6:	b480      	push	{r7}
   168c8:	b085      	sub	sp, #20
   168ca:	af00      	add	r7, sp, #0
   168cc:	6078      	str	r0, [r7, #4]
   168ce:	4608      	mov	r0, r1
   168d0:	4611      	mov	r1, r2
   168d2:	461a      	mov	r2, r3
   168d4:	4603      	mov	r3, r0
   168d6:	70fb      	strb	r3, [r7, #3]
   168d8:	460b      	mov	r3, r1
   168da:	70bb      	strb	r3, [r7, #2]
   168dc:	4613      	mov	r3, r2
   168de:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   168e0:	78fa      	ldrb	r2, [r7, #3]
   168e2:	78bb      	ldrb	r3, [r7, #2]
   168e4:	6879      	ldr	r1, [r7, #4]
   168e6:	01d2      	lsls	r2, r2, #7
   168e8:	440a      	add	r2, r1
   168ea:	4413      	add	r3, r2
   168ec:	3330      	adds	r3, #48	; 0x30
   168ee:	781b      	ldrb	r3, [r3, #0]
   168f0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   168f2:	7bfb      	ldrb	r3, [r7, #15]
   168f4:	f003 030f 	and.w	r3, r3, #15
   168f8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   168fa:	787b      	ldrb	r3, [r7, #1]
   168fc:	011b      	lsls	r3, r3, #4
   168fe:	b2da      	uxtb	r2, r3
   16900:	7bfb      	ldrb	r3, [r7, #15]
   16902:	4313      	orrs	r3, r2
   16904:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   16906:	78fa      	ldrb	r2, [r7, #3]
   16908:	78bb      	ldrb	r3, [r7, #2]
   1690a:	6879      	ldr	r1, [r7, #4]
   1690c:	01d2      	lsls	r2, r2, #7
   1690e:	440a      	add	r2, r1
   16910:	4413      	add	r3, r2
   16912:	3330      	adds	r3, #48	; 0x30
   16914:	7bfa      	ldrb	r2, [r7, #15]
   16916:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   16918:	bf00      	nop
   1691a:	3714      	adds	r7, #20
   1691c:	46bd      	mov	sp, r7
   1691e:	bc80      	pop	{r7}
   16920:	4770      	bx	lr

00016922 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   16922:	b480      	push	{r7}
   16924:	b085      	sub	sp, #20
   16926:	af00      	add	r7, sp, #0
   16928:	6078      	str	r0, [r7, #4]
   1692a:	4608      	mov	r0, r1
   1692c:	4611      	mov	r1, r2
   1692e:	461a      	mov	r2, r3
   16930:	4603      	mov	r3, r0
   16932:	70fb      	strb	r3, [r7, #3]
   16934:	460b      	mov	r3, r1
   16936:	70bb      	strb	r3, [r7, #2]
   16938:	4613      	mov	r3, r2
   1693a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   1693c:	78fa      	ldrb	r2, [r7, #3]
   1693e:	78bb      	ldrb	r3, [r7, #2]
   16940:	6879      	ldr	r1, [r7, #4]
   16942:	01d2      	lsls	r2, r2, #7
   16944:	440a      	add	r2, r1
   16946:	4413      	add	r3, r2
   16948:	3340      	adds	r3, #64	; 0x40
   1694a:	781b      	ldrb	r3, [r3, #0]
   1694c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   1694e:	7bfb      	ldrb	r3, [r7, #15]
   16950:	f023 0301 	bic.w	r3, r3, #1
   16954:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   16956:	787a      	ldrb	r2, [r7, #1]
   16958:	7bfb      	ldrb	r3, [r7, #15]
   1695a:	4313      	orrs	r3, r2
   1695c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   1695e:	78fa      	ldrb	r2, [r7, #3]
   16960:	78bb      	ldrb	r3, [r7, #2]
   16962:	6879      	ldr	r1, [r7, #4]
   16964:	01d2      	lsls	r2, r2, #7
   16966:	440a      	add	r2, r1
   16968:	4413      	add	r3, r2
   1696a:	3340      	adds	r3, #64	; 0x40
   1696c:	7bfa      	ldrb	r2, [r7, #15]
   1696e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   16970:	bf00      	nop
   16972:	3714      	adds	r7, #20
   16974:	46bd      	mov	sp, r7
   16976:	bc80      	pop	{r7}
   16978:	4770      	bx	lr

0001697a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   1697a:	b480      	push	{r7}
   1697c:	b085      	sub	sp, #20
   1697e:	af00      	add	r7, sp, #0
   16980:	60f8      	str	r0, [r7, #12]
   16982:	460b      	mov	r3, r1
   16984:	607a      	str	r2, [r7, #4]
   16986:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   16988:	7afb      	ldrb	r3, [r7, #11]
   1698a:	68fa      	ldr	r2, [r7, #12]
   1698c:	01db      	lsls	r3, r3, #7
   1698e:	4413      	add	r3, r2
   16990:	3328      	adds	r3, #40	; 0x28
   16992:	687a      	ldr	r2, [r7, #4]
   16994:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   16996:	bf00      	nop
   16998:	3714      	adds	r7, #20
   1699a:	46bd      	mov	sp, r7
   1699c:	bc80      	pop	{r7}
   1699e:	4770      	bx	lr

000169a0 <_gpio_set_direction>:
{
   169a0:	b580      	push	{r7, lr}
   169a2:	b082      	sub	sp, #8
   169a4:	af00      	add	r7, sp, #0
   169a6:	4603      	mov	r3, r0
   169a8:	6039      	str	r1, [r7, #0]
   169aa:	71fb      	strb	r3, [r7, #7]
   169ac:	4613      	mov	r3, r2
   169ae:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   169b0:	79bb      	ldrb	r3, [r7, #6]
   169b2:	2b01      	cmp	r3, #1
   169b4:	d01c      	beq.n	169f0 <_gpio_set_direction+0x50>
   169b6:	2b02      	cmp	r3, #2
   169b8:	d037      	beq.n	16a2a <_gpio_set_direction+0x8a>
   169ba:	2b00      	cmp	r3, #0
   169bc:	d14e      	bne.n	16a5c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   169be:	79fb      	ldrb	r3, [r7, #7]
   169c0:	683a      	ldr	r2, [r7, #0]
   169c2:	4619      	mov	r1, r3
   169c4:	482a      	ldr	r0, [pc, #168]	; (16a70 <_gpio_set_direction+0xd0>)
   169c6:	4b2b      	ldr	r3, [pc, #172]	; (16a74 <_gpio_set_direction+0xd4>)
   169c8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   169ca:	683b      	ldr	r3, [r7, #0]
   169cc:	b29b      	uxth	r3, r3
   169ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   169d2:	79fb      	ldrb	r3, [r7, #7]
   169d4:	4619      	mov	r1, r3
   169d6:	4826      	ldr	r0, [pc, #152]	; (16a70 <_gpio_set_direction+0xd0>)
   169d8:	4b27      	ldr	r3, [pc, #156]	; (16a78 <_gpio_set_direction+0xd8>)
   169da:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   169dc:	683b      	ldr	r3, [r7, #0]
   169de:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   169e0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   169e4:	79fb      	ldrb	r3, [r7, #7]
   169e6:	4619      	mov	r1, r3
   169e8:	4821      	ldr	r0, [pc, #132]	; (16a70 <_gpio_set_direction+0xd0>)
   169ea:	4b23      	ldr	r3, [pc, #140]	; (16a78 <_gpio_set_direction+0xd8>)
   169ec:	4798      	blx	r3
		break;
   169ee:	e03a      	b.n	16a66 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   169f0:	79fb      	ldrb	r3, [r7, #7]
   169f2:	683a      	ldr	r2, [r7, #0]
   169f4:	4619      	mov	r1, r3
   169f6:	481e      	ldr	r0, [pc, #120]	; (16a70 <_gpio_set_direction+0xd0>)
   169f8:	4b1e      	ldr	r3, [pc, #120]	; (16a74 <_gpio_set_direction+0xd4>)
   169fa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   169fc:	683b      	ldr	r3, [r7, #0]
   169fe:	b29b      	uxth	r3, r3
   16a00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   16a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   16a08:	79f9      	ldrb	r1, [r7, #7]
   16a0a:	461a      	mov	r2, r3
   16a0c:	4818      	ldr	r0, [pc, #96]	; (16a70 <_gpio_set_direction+0xd0>)
   16a0e:	4b1a      	ldr	r3, [pc, #104]	; (16a78 <_gpio_set_direction+0xd8>)
   16a10:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   16a12:	683b      	ldr	r3, [r7, #0]
   16a14:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   16a16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   16a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   16a1e:	79f9      	ldrb	r1, [r7, #7]
   16a20:	461a      	mov	r2, r3
   16a22:	4813      	ldr	r0, [pc, #76]	; (16a70 <_gpio_set_direction+0xd0>)
   16a24:	4b14      	ldr	r3, [pc, #80]	; (16a78 <_gpio_set_direction+0xd8>)
   16a26:	4798      	blx	r3
		break;
   16a28:	e01d      	b.n	16a66 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   16a2a:	79fb      	ldrb	r3, [r7, #7]
   16a2c:	683a      	ldr	r2, [r7, #0]
   16a2e:	4619      	mov	r1, r3
   16a30:	480f      	ldr	r0, [pc, #60]	; (16a70 <_gpio_set_direction+0xd0>)
   16a32:	4b12      	ldr	r3, [pc, #72]	; (16a7c <_gpio_set_direction+0xdc>)
   16a34:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   16a36:	683b      	ldr	r3, [r7, #0]
   16a38:	b29b      	uxth	r3, r3
   16a3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   16a3e:	79fb      	ldrb	r3, [r7, #7]
   16a40:	4619      	mov	r1, r3
   16a42:	480b      	ldr	r0, [pc, #44]	; (16a70 <_gpio_set_direction+0xd0>)
   16a44:	4b0c      	ldr	r3, [pc, #48]	; (16a78 <_gpio_set_direction+0xd8>)
   16a46:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   16a48:	683b      	ldr	r3, [r7, #0]
   16a4a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   16a4c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   16a50:	79fb      	ldrb	r3, [r7, #7]
   16a52:	4619      	mov	r1, r3
   16a54:	4806      	ldr	r0, [pc, #24]	; (16a70 <_gpio_set_direction+0xd0>)
   16a56:	4b08      	ldr	r3, [pc, #32]	; (16a78 <_gpio_set_direction+0xd8>)
   16a58:	4798      	blx	r3
		break;
   16a5a:	e004      	b.n	16a66 <_gpio_set_direction+0xc6>
		ASSERT(false);
   16a5c:	2246      	movs	r2, #70	; 0x46
   16a5e:	4908      	ldr	r1, [pc, #32]	; (16a80 <_gpio_set_direction+0xe0>)
   16a60:	2000      	movs	r0, #0
   16a62:	4b08      	ldr	r3, [pc, #32]	; (16a84 <_gpio_set_direction+0xe4>)
   16a64:	4798      	blx	r3
}
   16a66:	bf00      	nop
   16a68:	3708      	adds	r7, #8
   16a6a:	46bd      	mov	sp, r7
   16a6c:	bd80      	pop	{r7, pc}
   16a6e:	bf00      	nop
   16a70:	41008000 	.word	0x41008000
   16a74:	000167f7 	.word	0x000167f7
   16a78:	0001697b 	.word	0x0001697b
   16a7c:	000167d1 	.word	0x000167d1
   16a80:	00021fb0 	.word	0x00021fb0
   16a84:	00008145 	.word	0x00008145

00016a88 <_gpio_set_level>:
{
   16a88:	b580      	push	{r7, lr}
   16a8a:	b082      	sub	sp, #8
   16a8c:	af00      	add	r7, sp, #0
   16a8e:	4603      	mov	r3, r0
   16a90:	6039      	str	r1, [r7, #0]
   16a92:	71fb      	strb	r3, [r7, #7]
   16a94:	4613      	mov	r3, r2
   16a96:	71bb      	strb	r3, [r7, #6]
	if (level) {
   16a98:	79bb      	ldrb	r3, [r7, #6]
   16a9a:	2b00      	cmp	r3, #0
   16a9c:	d006      	beq.n	16aac <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   16a9e:	79fb      	ldrb	r3, [r7, #7]
   16aa0:	683a      	ldr	r2, [r7, #0]
   16aa2:	4619      	mov	r1, r3
   16aa4:	4806      	ldr	r0, [pc, #24]	; (16ac0 <_gpio_set_level+0x38>)
   16aa6:	4b07      	ldr	r3, [pc, #28]	; (16ac4 <_gpio_set_level+0x3c>)
   16aa8:	4798      	blx	r3
}
   16aaa:	e005      	b.n	16ab8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   16aac:	79fb      	ldrb	r3, [r7, #7]
   16aae:	683a      	ldr	r2, [r7, #0]
   16ab0:	4619      	mov	r1, r3
   16ab2:	4803      	ldr	r0, [pc, #12]	; (16ac0 <_gpio_set_level+0x38>)
   16ab4:	4b04      	ldr	r3, [pc, #16]	; (16ac8 <_gpio_set_level+0x40>)
   16ab6:	4798      	blx	r3
}
   16ab8:	bf00      	nop
   16aba:	3708      	adds	r7, #8
   16abc:	46bd      	mov	sp, r7
   16abe:	bd80      	pop	{r7, pc}
   16ac0:	41008000 	.word	0x41008000
   16ac4:	0001681d 	.word	0x0001681d
   16ac8:	00016843 	.word	0x00016843

00016acc <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   16acc:	b590      	push	{r4, r7, lr}
   16ace:	b085      	sub	sp, #20
   16ad0:	af00      	add	r7, sp, #0
   16ad2:	6078      	str	r0, [r7, #4]
   16ad4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   16ad6:	687b      	ldr	r3, [r7, #4]
   16ad8:	095b      	lsrs	r3, r3, #5
   16ada:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   16adc:	687b      	ldr	r3, [r7, #4]
   16ade:	b2db      	uxtb	r3, r3
   16ae0:	f003 031f 	and.w	r3, r3, #31
   16ae4:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   16ae6:	683b      	ldr	r3, [r7, #0]
   16ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
   16aec:	d106      	bne.n	16afc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   16aee:	7bba      	ldrb	r2, [r7, #14]
   16af0:	7bf9      	ldrb	r1, [r7, #15]
   16af2:	2300      	movs	r3, #0
   16af4:	4812      	ldr	r0, [pc, #72]	; (16b40 <_gpio_set_pin_function+0x74>)
   16af6:	4c13      	ldr	r4, [pc, #76]	; (16b44 <_gpio_set_pin_function+0x78>)
   16af8:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   16afa:	e01d      	b.n	16b38 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   16afc:	7bba      	ldrb	r2, [r7, #14]
   16afe:	7bf9      	ldrb	r1, [r7, #15]
   16b00:	2301      	movs	r3, #1
   16b02:	480f      	ldr	r0, [pc, #60]	; (16b40 <_gpio_set_pin_function+0x74>)
   16b04:	4c0f      	ldr	r4, [pc, #60]	; (16b44 <_gpio_set_pin_function+0x78>)
   16b06:	47a0      	blx	r4
		if (pin & 1) {
   16b08:	7bbb      	ldrb	r3, [r7, #14]
   16b0a:	f003 0301 	and.w	r3, r3, #1
   16b0e:	2b00      	cmp	r3, #0
   16b10:	d009      	beq.n	16b26 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   16b12:	7bbb      	ldrb	r3, [r7, #14]
   16b14:	105b      	asrs	r3, r3, #1
   16b16:	b2da      	uxtb	r2, r3
   16b18:	683b      	ldr	r3, [r7, #0]
   16b1a:	b2db      	uxtb	r3, r3
   16b1c:	7bf9      	ldrb	r1, [r7, #15]
   16b1e:	4808      	ldr	r0, [pc, #32]	; (16b40 <_gpio_set_pin_function+0x74>)
   16b20:	4c09      	ldr	r4, [pc, #36]	; (16b48 <_gpio_set_pin_function+0x7c>)
   16b22:	47a0      	blx	r4
}
   16b24:	e008      	b.n	16b38 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   16b26:	7bbb      	ldrb	r3, [r7, #14]
   16b28:	105b      	asrs	r3, r3, #1
   16b2a:	b2da      	uxtb	r2, r3
   16b2c:	683b      	ldr	r3, [r7, #0]
   16b2e:	b2db      	uxtb	r3, r3
   16b30:	7bf9      	ldrb	r1, [r7, #15]
   16b32:	4803      	ldr	r0, [pc, #12]	; (16b40 <_gpio_set_pin_function+0x74>)
   16b34:	4c05      	ldr	r4, [pc, #20]	; (16b4c <_gpio_set_pin_function+0x80>)
   16b36:	47a0      	blx	r4
}
   16b38:	bf00      	nop
   16b3a:	3714      	adds	r7, #20
   16b3c:	46bd      	mov	sp, r7
   16b3e:	bd90      	pop	{r4, r7, pc}
   16b40:	41008000 	.word	0x41008000
   16b44:	00016923 	.word	0x00016923
   16b48:	000168c7 	.word	0x000168c7
   16b4c:	00016869 	.word	0x00016869

00016b50 <gpio_set_pin_function>:
{
   16b50:	b580      	push	{r7, lr}
   16b52:	b082      	sub	sp, #8
   16b54:	af00      	add	r7, sp, #0
   16b56:	6078      	str	r0, [r7, #4]
   16b58:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   16b5a:	6839      	ldr	r1, [r7, #0]
   16b5c:	6878      	ldr	r0, [r7, #4]
   16b5e:	4b03      	ldr	r3, [pc, #12]	; (16b6c <gpio_set_pin_function+0x1c>)
   16b60:	4798      	blx	r3
}
   16b62:	bf00      	nop
   16b64:	3708      	adds	r7, #8
   16b66:	46bd      	mov	sp, r7
   16b68:	bd80      	pop	{r7, pc}
   16b6a:	bf00      	nop
   16b6c:	00016acd 	.word	0x00016acd

00016b70 <gpio_set_pin_direction>:
{
   16b70:	b580      	push	{r7, lr}
   16b72:	b082      	sub	sp, #8
   16b74:	af00      	add	r7, sp, #0
   16b76:	4603      	mov	r3, r0
   16b78:	460a      	mov	r2, r1
   16b7a:	71fb      	strb	r3, [r7, #7]
   16b7c:	4613      	mov	r3, r2
   16b7e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   16b80:	79fb      	ldrb	r3, [r7, #7]
   16b82:	115b      	asrs	r3, r3, #5
   16b84:	b2d8      	uxtb	r0, r3
   16b86:	79fb      	ldrb	r3, [r7, #7]
   16b88:	f003 031f 	and.w	r3, r3, #31
   16b8c:	2201      	movs	r2, #1
   16b8e:	fa02 f303 	lsl.w	r3, r2, r3
   16b92:	79ba      	ldrb	r2, [r7, #6]
   16b94:	4619      	mov	r1, r3
   16b96:	4b03      	ldr	r3, [pc, #12]	; (16ba4 <gpio_set_pin_direction+0x34>)
   16b98:	4798      	blx	r3
}
   16b9a:	bf00      	nop
   16b9c:	3708      	adds	r7, #8
   16b9e:	46bd      	mov	sp, r7
   16ba0:	bd80      	pop	{r7, pc}
   16ba2:	bf00      	nop
   16ba4:	000169a1 	.word	0x000169a1

00016ba8 <gpio_set_pin_level>:
{
   16ba8:	b580      	push	{r7, lr}
   16baa:	b082      	sub	sp, #8
   16bac:	af00      	add	r7, sp, #0
   16bae:	4603      	mov	r3, r0
   16bb0:	460a      	mov	r2, r1
   16bb2:	71fb      	strb	r3, [r7, #7]
   16bb4:	4613      	mov	r3, r2
   16bb6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   16bb8:	79fb      	ldrb	r3, [r7, #7]
   16bba:	115b      	asrs	r3, r3, #5
   16bbc:	b2d8      	uxtb	r0, r3
   16bbe:	79fb      	ldrb	r3, [r7, #7]
   16bc0:	f003 031f 	and.w	r3, r3, #31
   16bc4:	2201      	movs	r2, #1
   16bc6:	fa02 f303 	lsl.w	r3, r2, r3
   16bca:	79ba      	ldrb	r2, [r7, #6]
   16bcc:	4619      	mov	r1, r3
   16bce:	4b03      	ldr	r3, [pc, #12]	; (16bdc <gpio_set_pin_level+0x34>)
   16bd0:	4798      	blx	r3
}
   16bd2:	bf00      	nop
   16bd4:	3708      	adds	r7, #8
   16bd6:	46bd      	mov	sp, r7
   16bd8:	bd80      	pop	{r7, pc}
   16bda:	bf00      	nop
   16bdc:	00016a89 	.word	0x00016a89

00016be0 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   16be0:	b580      	push	{r7, lr}
   16be2:	b082      	sub	sp, #8
   16be4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   16be6:	2100      	movs	r1, #0
   16be8:	2008      	movs	r0, #8
   16bea:	4b24      	ldr	r3, [pc, #144]	; (16c7c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   16bec:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   16bee:	2100      	movs	r1, #0
   16bf0:	202b      	movs	r0, #43	; 0x2b
   16bf2:	4b22      	ldr	r3, [pc, #136]	; (16c7c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   16bf4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   16bf6:	2100      	movs	r1, #0
   16bf8:	202a      	movs	r0, #42	; 0x2a
   16bfa:	4b20      	ldr	r3, [pc, #128]	; (16c7c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   16bfc:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   16bfe:	2102      	movs	r1, #2
   16c00:	2008      	movs	r0, #8
   16c02:	4b1f      	ldr	r3, [pc, #124]	; (16c80 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   16c04:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   16c06:	2102      	movs	r1, #2
   16c08:	202b      	movs	r0, #43	; 0x2b
   16c0a:	4b1d      	ldr	r3, [pc, #116]	; (16c80 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   16c0c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   16c0e:	2102      	movs	r1, #2
   16c10:	202a      	movs	r0, #42	; 0x2a
   16c12:	4b1b      	ldr	r3, [pc, #108]	; (16c80 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   16c14:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   16c16:	2101      	movs	r1, #1
   16c18:	2008      	movs	r0, #8
   16c1a:	4b1a      	ldr	r3, [pc, #104]	; (16c84 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16c1c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   16c1e:	2100      	movs	r1, #0
   16c20:	202b      	movs	r0, #43	; 0x2b
   16c22:	4b18      	ldr	r3, [pc, #96]	; (16c84 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16c24:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   16c26:	2100      	movs	r1, #0
   16c28:	202a      	movs	r0, #42	; 0x2a
   16c2a:	4b16      	ldr	r3, [pc, #88]	; (16c84 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16c2c:	4798      	blx	r3

	delay_us(1);
   16c2e:	2001      	movs	r0, #1
   16c30:	4b15      	ldr	r3, [pc, #84]	; (16c88 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16c32:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   16c34:	2300      	movs	r3, #0
   16c36:	607b      	str	r3, [r7, #4]
   16c38:	687b      	ldr	r3, [r7, #4]
   16c3a:	2b06      	cmp	r3, #6
   16c3c:	dc11      	bgt.n	16c62 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   16c3e:	2101      	movs	r1, #1
   16c40:	202a      	movs	r0, #42	; 0x2a
   16c42:	4b10      	ldr	r3, [pc, #64]	; (16c84 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16c44:	4798      	blx	r3
		delay_us(1);
   16c46:	2001      	movs	r0, #1
   16c48:	4b0f      	ldr	r3, [pc, #60]	; (16c88 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16c4a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   16c4c:	2100      	movs	r1, #0
   16c4e:	202a      	movs	r0, #42	; 0x2a
   16c50:	4b0c      	ldr	r3, [pc, #48]	; (16c84 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16c52:	4798      	blx	r3
		delay_us(1);
   16c54:	2001      	movs	r0, #1
   16c56:	4b0c      	ldr	r3, [pc, #48]	; (16c88 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16c58:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   16c5a:	687b      	ldr	r3, [r7, #4]
   16c5c:	3301      	adds	r3, #1
   16c5e:	607b      	str	r3, [r7, #4]
   16c60:	e7ea      	b.n	16c38 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   16c62:	2101      	movs	r1, #1
   16c64:	202b      	movs	r0, #43	; 0x2b
   16c66:	4b07      	ldr	r3, [pc, #28]	; (16c84 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   16c68:	4798      	blx	r3
	delay_us(1);
   16c6a:	2001      	movs	r0, #1
   16c6c:	4b06      	ldr	r3, [pc, #24]	; (16c88 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   16c6e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   16c70:	4b06      	ldr	r3, [pc, #24]	; (16c8c <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   16c72:	4798      	blx	r3
}
   16c74:	bf00      	nop
   16c76:	3708      	adds	r7, #8
   16c78:	46bd      	mov	sp, r7
   16c7a:	bd80      	pop	{r7, pc}
   16c7c:	00016b51 	.word	0x00016b51
   16c80:	00016b71 	.word	0x00016b71
   16c84:	00016ba9 	.word	0x00016ba9
   16c88:	000067a1 	.word	0x000067a1
   16c8c:	000055f1 	.word	0x000055f1

00016c90 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   16c90:	b480      	push	{r7}
   16c92:	b083      	sub	sp, #12
   16c94:	af00      	add	r7, sp, #0
   16c96:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   16c98:	687b      	ldr	r3, [r7, #4]
   16c9a:	4618      	mov	r0, r3
   16c9c:	370c      	adds	r7, #12
   16c9e:	46bd      	mov	sp, r7
   16ca0:	bc80      	pop	{r7}
   16ca2:	4770      	bx	lr

00016ca4 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   16ca4:	b480      	push	{r7}
   16ca6:	b083      	sub	sp, #12
   16ca8:	af00      	add	r7, sp, #0
   16caa:	6078      	str	r0, [r7, #4]
   16cac:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   16cae:	687b      	ldr	r3, [r7, #4]
   16cb0:	683a      	ldr	r2, [r7, #0]
   16cb2:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   16cb4:	687b      	ldr	r3, [r7, #4]
   16cb6:	4a04      	ldr	r2, [pc, #16]	; (16cc8 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   16cb8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   16cbc:	687b      	ldr	r3, [r7, #4]
   16cbe:	4618      	mov	r0, r3
   16cc0:	370c      	adds	r7, #12
   16cc2:	46bd      	mov	sp, r7
   16cc4:	bc80      	pop	{r7}
   16cc6:	4770      	bx	lr
   16cc8:	001fff00 	.word	0x001fff00

00016ccc <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   16ccc:	b480      	push	{r7}
   16cce:	b083      	sub	sp, #12
   16cd0:	af00      	add	r7, sp, #0
   16cd2:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   16cd4:	687b      	ldr	r3, [r7, #4]
   16cd6:	4618      	mov	r0, r3
   16cd8:	370c      	adds	r7, #12
   16cda:	46bd      	mov	sp, r7
   16cdc:	bc80      	pop	{r7}
   16cde:	4770      	bx	lr

00016ce0 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   16ce0:	b580      	push	{r7, lr}
   16ce2:	b082      	sub	sp, #8
   16ce4:	af00      	add	r7, sp, #0
   16ce6:	6078      	str	r0, [r7, #4]
	xferDone=false;
   16ce8:	687b      	ldr	r3, [r7, #4]
   16cea:	2200      	movs	r2, #0
   16cec:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   16cee:	6878      	ldr	r0, [r7, #4]
   16cf0:	4b04      	ldr	r3, [pc, #16]	; (16d04 <_ZN13N25Q256_Class4InitEv+0x24>)
   16cf2:	4798      	blx	r3
	return SelfTest();
   16cf4:	6878      	ldr	r0, [r7, #4]
   16cf6:	4b04      	ldr	r3, [pc, #16]	; (16d08 <_ZN13N25Q256_Class4InitEv+0x28>)
   16cf8:	4798      	blx	r3
   16cfa:	4603      	mov	r3, r0
}
   16cfc:	4618      	mov	r0, r3
   16cfe:	3708      	adds	r7, #8
   16d00:	46bd      	mov	sp, r7
   16d02:	bd80      	pop	{r7, pc}
   16d04:	00016d0d 	.word	0x00016d0d
   16d08:	00016ec1 	.word	0x00016ec1

00016d0c <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   16d0c:	b590      	push	{r4, r7, lr}
   16d0e:	b083      	sub	sp, #12
   16d10:	af00      	add	r7, sp, #0
   16d12:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   16d14:	687b      	ldr	r3, [r7, #4]
   16d16:	685b      	ldr	r3, [r3, #4]
   16d18:	4618      	mov	r0, r3
   16d1a:	4b08      	ldr	r3, [pc, #32]	; (16d3c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   16d1c:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   16d1e:	687b      	ldr	r3, [r7, #4]
   16d20:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   16d22:	2300      	movs	r3, #0
   16d24:	4a06      	ldr	r2, [pc, #24]	; (16d40 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   16d26:	4807      	ldr	r0, [pc, #28]	; (16d44 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   16d28:	4c07      	ldr	r4, [pc, #28]	; (16d48 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   16d2a:	47a0      	blx	r4
   16d2c:	4602      	mov	r2, r0
   16d2e:	687b      	ldr	r3, [r7, #4]
   16d30:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   16d34:	bf00      	nop
   16d36:	370c      	adds	r7, #12
   16d38:	46bd      	mov	sp, r7
   16d3a:	bd90      	pop	{r4, r7, pc}
   16d3c:	00006fed 	.word	0x00006fed
   16d40:	00016be1 	.word	0x00016be1
   16d44:	2000a008 	.word	0x2000a008
   16d48:	00011111 	.word	0x00011111

00016d4c <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   16d4c:	b580      	push	{r7, lr}
   16d4e:	b084      	sub	sp, #16
   16d50:	af00      	add	r7, sp, #0
   16d52:	6078      	str	r0, [r7, #4]
   16d54:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   16d56:	687b      	ldr	r3, [r7, #4]
   16d58:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   16d5c:	685b      	ldr	r3, [r3, #4]
   16d5e:	689b      	ldr	r3, [r3, #8]
   16d60:	687a      	ldr	r2, [r7, #4]
   16d62:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   16d66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   16d6a:	6839      	ldr	r1, [r7, #0]
   16d6c:	4798      	blx	r3
   16d6e:	4603      	mov	r3, r0
   16d70:	60fb      	str	r3, [r7, #12]
	return	e;
   16d72:	68fb      	ldr	r3, [r7, #12]
}
   16d74:	4618      	mov	r0, r3
   16d76:	3710      	adds	r7, #16
   16d78:	46bd      	mov	sp, r7
   16d7a:	bd80      	pop	{r7, pc}

00016d7c <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   16d7c:	b590      	push	{r4, r7, lr}
   16d7e:	b087      	sub	sp, #28
   16d80:	af00      	add	r7, sp, #0
   16d82:	60f8      	str	r0, [r7, #12]
   16d84:	60b9      	str	r1, [r7, #8]
   16d86:	607a      	str	r2, [r7, #4]
   16d88:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   16d8a:	68fb      	ldr	r3, [r7, #12]
   16d8c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   16d90:	685b      	ldr	r3, [r3, #4]
   16d92:	685c      	ldr	r4, [r3, #4]
   16d94:	68fb      	ldr	r3, [r7, #12]
   16d96:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   16d9a:	683b      	ldr	r3, [r7, #0]
   16d9c:	687a      	ldr	r2, [r7, #4]
   16d9e:	68b9      	ldr	r1, [r7, #8]
   16da0:	47a0      	blx	r4
   16da2:	4603      	mov	r3, r0
   16da4:	617b      	str	r3, [r7, #20]
	return	w;
   16da6:	697b      	ldr	r3, [r7, #20]
}
   16da8:	4618      	mov	r0, r3
   16daa:	371c      	adds	r7, #28
   16dac:	46bd      	mov	sp, r7
   16dae:	bd90      	pop	{r4, r7, pc}

00016db0 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   16db0:	b590      	push	{r4, r7, lr}
   16db2:	b087      	sub	sp, #28
   16db4:	af00      	add	r7, sp, #0
   16db6:	60f8      	str	r0, [r7, #12]
   16db8:	60b9      	str	r1, [r7, #8]
   16dba:	607a      	str	r2, [r7, #4]
   16dbc:	603b      	str	r3, [r7, #0]
	xferDone=false;
   16dbe:	68fb      	ldr	r3, [r7, #12]
   16dc0:	2200      	movs	r2, #0
   16dc2:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   16dc4:	68fb      	ldr	r3, [r7, #12]
   16dc6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   16dca:	685b      	ldr	r3, [r3, #4]
   16dcc:	681c      	ldr	r4, [r3, #0]
   16dce:	68fb      	ldr	r3, [r7, #12]
   16dd0:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   16dd4:	683b      	ldr	r3, [r7, #0]
   16dd6:	687a      	ldr	r2, [r7, #4]
   16dd8:	68b9      	ldr	r1, [r7, #8]
   16dda:	47a0      	blx	r4
   16ddc:	4603      	mov	r3, r0
   16dde:	617b      	str	r3, [r7, #20]
	return	r;
   16de0:	697b      	ldr	r3, [r7, #20]
}
   16de2:	4618      	mov	r0, r3
   16de4:	371c      	adds	r7, #28
   16de6:	46bd      	mov	sp, r7
   16de8:	bd90      	pop	{r4, r7, pc}
	...

00016dec <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   16dec:	b580      	push	{r7, lr}
   16dee:	b082      	sub	sp, #8
   16df0:	af00      	add	r7, sp, #0
   16df2:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   16df4:	687a      	ldr	r2, [r7, #4]
   16df6:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   16dfa:	f043 0310 	orr.w	r3, r3, #16
   16dfe:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   16e02:	687a      	ldr	r2, [r7, #4]
   16e04:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   16e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16e0c:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   16e10:	687a      	ldr	r2, [r7, #4]
   16e12:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   16e16:	f36f 1305 	bfc	r3, #4, #2
   16e1a:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   16e1e:	687b      	ldr	r3, [r7, #4]
   16e20:	2205      	movs	r2, #5
   16e22:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   16e26:	687b      	ldr	r3, [r7, #4]
   16e28:	2201      	movs	r2, #1
   16e2a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   16e2e:	687b      	ldr	r3, [r7, #4]
   16e30:	f203 2212 	addw	r2, r3, #530	; 0x212
   16e34:	687b      	ldr	r3, [r7, #4]
   16e36:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   16e3a:	687b      	ldr	r3, [r7, #4]
   16e3c:	685a      	ldr	r2, [r3, #4]
   16e3e:	687b      	ldr	r3, [r7, #4]
   16e40:	f503 7305 	add.w	r3, r3, #532	; 0x214
   16e44:	4619      	mov	r1, r3
   16e46:	4610      	mov	r0, r2
   16e48:	4b04      	ldr	r3, [pc, #16]	; (16e5c <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   16e4a:	4798      	blx	r3
		return status;
   16e4c:	687b      	ldr	r3, [r7, #4]
   16e4e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   16e52:	4618      	mov	r0, r3
   16e54:	3708      	adds	r7, #8
   16e56:	46bd      	mov	sp, r7
   16e58:	bd80      	pop	{r7, pc}
   16e5a:	bf00      	nop
   16e5c:	00007065 	.word	0x00007065

00016e60 <_ZN13N25Q256_Class17GetMemoryCapacityEv>:
uint32_t	N25Q256_Class::GetMemoryCapacity(){
   16e60:	b480      	push	{r7}
   16e62:	b083      	sub	sp, #12
   16e64:	af00      	add	r7, sp, #0
   16e66:	6078      	str	r0, [r7, #4]
	return	memoryCapacity;
   16e68:	687b      	ldr	r3, [r7, #4]
   16e6a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
}
   16e6e:	4618      	mov	r0, r3
   16e70:	370c      	adds	r7, #12
   16e72:	46bd      	mov	sp, r7
   16e74:	bc80      	pop	{r7}
   16e76:	4770      	bx	lr

00016e78 <_ZN13N25Q256_Class10WaitOnBusyEv>:
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   16e78:	b580      	push	{r7, lr}
   16e7a:	b082      	sub	sp, #8
   16e7c:	af00      	add	r7, sp, #0
   16e7e:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   16e80:	6878      	ldr	r0, [r7, #4]
   16e82:	4b0e      	ldr	r3, [pc, #56]	; (16ebc <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   16e84:	4798      	blx	r3
   16e86:	4603      	mov	r3, r0
   16e88:	461a      	mov	r2, r3
   16e8a:	687b      	ldr	r3, [r7, #4]
   16e8c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   16e90:	687b      	ldr	r3, [r7, #4]
   16e92:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   16e96:	f003 0301 	and.w	r3, r3, #1
   16e9a:	2b00      	cmp	r3, #0
   16e9c:	d000      	beq.n	16ea0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   16e9e:	e7ef      	b.n	16e80 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   16ea0:	687b      	ldr	r3, [r7, #4]
   16ea2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   16ea6:	f003 0301 	and.w	r3, r3, #1
   16eaa:	2b00      	cmp	r3, #0
   16eac:	bf0c      	ite	eq
   16eae:	2301      	moveq	r3, #1
   16eb0:	2300      	movne	r3, #0
   16eb2:	b2db      	uxtb	r3, r3
}
   16eb4:	4618      	mov	r0, r3
   16eb6:	3708      	adds	r7, #8
   16eb8:	46bd      	mov	sp, r7
   16eba:	bd80      	pop	{r7, pc}
   16ebc:	00016ded 	.word	0x00016ded

00016ec0 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   16ec0:	b590      	push	{r4, r7, lr}
   16ec2:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   16ec6:	b085      	sub	sp, #20
   16ec8:	af00      	add	r7, sp, #0
   16eca:	f107 0310 	add.w	r3, r7, #16
   16ece:	3b0c      	subs	r3, #12
   16ed0:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   16ed2:	f107 0310 	add.w	r3, r7, #16
   16ed6:	3b0c      	subs	r3, #12
   16ed8:	681b      	ldr	r3, [r3, #0]
   16eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16ede:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   16ee2:	f107 0310 	add.w	r3, r7, #16
   16ee6:	3b0c      	subs	r3, #12
   16ee8:	681b      	ldr	r3, [r3, #0]
   16eea:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16eee:	f107 0110 	add.w	r1, r7, #16
   16ef2:	3904      	subs	r1, #4
   16ef4:	f107 0010 	add.w	r0, r7, #16
   16ef8:	380c      	subs	r0, #12
   16efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16efe:	6800      	ldr	r0, [r0, #0]
   16f00:	4c4b      	ldr	r4, [pc, #300]	; (17030 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   16f02:	47a0      	blx	r4
	WaitOnBusy();
   16f04:	f107 0310 	add.w	r3, r7, #16
   16f08:	3b0c      	subs	r3, #12
   16f0a:	6818      	ldr	r0, [r3, #0]
   16f0c:	4b49      	ldr	r3, [pc, #292]	; (17034 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16f0e:	4798      	blx	r3
	Erase(currentAddress);
   16f10:	f107 0310 	add.w	r3, r7, #16
   16f14:	3b0c      	subs	r3, #12
   16f16:	681b      	ldr	r3, [r3, #0]
   16f18:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16f1c:	f107 0310 	add.w	r3, r7, #16
   16f20:	3b0c      	subs	r3, #12
   16f22:	4611      	mov	r1, r2
   16f24:	6818      	ldr	r0, [r3, #0]
   16f26:	4b44      	ldr	r3, [pc, #272]	; (17038 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   16f28:	4798      	blx	r3
	WaitOnBusy();
   16f2a:	f107 0310 	add.w	r3, r7, #16
   16f2e:	3b0c      	subs	r3, #12
   16f30:	6818      	ldr	r0, [r3, #0]
   16f32:	4b40      	ldr	r3, [pc, #256]	; (17034 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16f34:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   16f36:	f107 0310 	add.w	r3, r7, #16
   16f3a:	3b0c      	subs	r3, #12
   16f3c:	681b      	ldr	r3, [r3, #0]
   16f3e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16f42:	f107 0110 	add.w	r1, r7, #16
   16f46:	3904      	subs	r1, #4
   16f48:	f107 0010 	add.w	r0, r7, #16
   16f4c:	380c      	subs	r0, #12
   16f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16f52:	6800      	ldr	r0, [r0, #0]
   16f54:	4c39      	ldr	r4, [pc, #228]	; (1703c <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   16f56:	47a0      	blx	r4
	WaitOnBusy();
   16f58:	f107 0310 	add.w	r3, r7, #16
   16f5c:	3b0c      	subs	r3, #12
   16f5e:	6818      	ldr	r0, [r3, #0]
   16f60:	4b34      	ldr	r3, [pc, #208]	; (17034 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16f62:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   16f64:	f107 0310 	add.w	r3, r7, #16
   16f68:	3b0c      	subs	r3, #12
   16f6a:	681b      	ldr	r3, [r3, #0]
   16f6c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16f70:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   16f74:	f101 0110 	add.w	r1, r1, #16
   16f78:	3904      	subs	r1, #4
   16f7a:	f107 0010 	add.w	r0, r7, #16
   16f7e:	380c      	subs	r0, #12
   16f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16f84:	6800      	ldr	r0, [r0, #0]
   16f86:	4c2a      	ldr	r4, [pc, #168]	; (17030 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   16f88:	47a0      	blx	r4
	WaitOnBusy();
   16f8a:	f107 0310 	add.w	r3, r7, #16
   16f8e:	3b0c      	subs	r3, #12
   16f90:	6818      	ldr	r0, [r3, #0]
   16f92:	4b28      	ldr	r3, [pc, #160]	; (17034 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16f94:	4798      	blx	r3
	isOK	 = true;
   16f96:	f107 0310 	add.w	r3, r7, #16
   16f9a:	3b0c      	subs	r3, #12
   16f9c:	681b      	ldr	r3, [r3, #0]
   16f9e:	2201      	movs	r2, #1
   16fa0:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   16fa4:	2300      	movs	r3, #0
   16fa6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   16faa:	f102 020c 	add.w	r2, r2, #12
   16fae:	6013      	str	r3, [r2, #0]
   16fb0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   16fb4:	f103 030c 	add.w	r3, r3, #12
   16fb8:	681b      	ldr	r3, [r3, #0]
   16fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   16fbe:	da2b      	bge.n	17018 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   16fc0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   16fc4:	f103 0310 	add.w	r3, r3, #16
   16fc8:	3b04      	subs	r3, #4
   16fca:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   16fce:	f102 020c 	add.w	r2, r2, #12
   16fd2:	6812      	ldr	r2, [r2, #0]
   16fd4:	4413      	add	r3, r2
   16fd6:	781a      	ldrb	r2, [r3, #0]
   16fd8:	f107 0310 	add.w	r3, r7, #16
   16fdc:	3b04      	subs	r3, #4
   16fde:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   16fe2:	f101 010c 	add.w	r1, r1, #12
   16fe6:	6809      	ldr	r1, [r1, #0]
   16fe8:	440b      	add	r3, r1
   16fea:	781b      	ldrb	r3, [r3, #0]
   16fec:	429a      	cmp	r2, r3
   16fee:	d007      	beq.n	17000 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   16ff0:	f107 0310 	add.w	r3, r7, #16
   16ff4:	3b0c      	subs	r3, #12
   16ff6:	681b      	ldr	r3, [r3, #0]
   16ff8:	2200      	movs	r2, #0
   16ffa:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   16ffe:	e00b      	b.n	17018 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   17000:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   17004:	f103 030c 	add.w	r3, r3, #12
   17008:	681b      	ldr	r3, [r3, #0]
   1700a:	3301      	adds	r3, #1
   1700c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   17010:	f102 020c 	add.w	r2, r2, #12
   17014:	6013      	str	r3, [r2, #0]
   17016:	e7cb      	b.n	16fb0 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   17018:	f107 0310 	add.w	r3, r7, #16
   1701c:	3b0c      	subs	r3, #12
   1701e:	681b      	ldr	r3, [r3, #0]
   17020:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   17024:	4618      	mov	r0, r3
   17026:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   1702a:	3714      	adds	r7, #20
   1702c:	46bd      	mov	sp, r7
   1702e:	bd90      	pop	{r4, r7, pc}
   17030:	00016db1 	.word	0x00016db1
   17034:	00016e79 	.word	0x00016e79
   17038:	00016d4d 	.word	0x00016d4d
   1703c:	00016d7d 	.word	0x00016d7d

00017040 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   17040:	b580      	push	{r7, lr}
   17042:	b082      	sub	sp, #8
   17044:	af00      	add	r7, sp, #0
   17046:	6078      	str	r0, [r7, #4]
   17048:	6039      	str	r1, [r7, #0]
   1704a:	687b      	ldr	r3, [r7, #4]
   1704c:	2b01      	cmp	r3, #1
   1704e:	d10d      	bne.n	1706c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   17050:	683b      	ldr	r3, [r7, #0]
   17052:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17056:	4293      	cmp	r3, r2
   17058:	d108      	bne.n	1706c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1705a:	4906      	ldr	r1, [pc, #24]	; (17074 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1705c:	4806      	ldr	r0, [pc, #24]	; (17078 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1705e:	4b07      	ldr	r3, [pc, #28]	; (1707c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   17060:	4798      	blx	r3
   17062:	4a07      	ldr	r2, [pc, #28]	; (17080 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   17064:	4907      	ldr	r1, [pc, #28]	; (17084 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   17066:	4804      	ldr	r0, [pc, #16]	; (17078 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   17068:	4b07      	ldr	r3, [pc, #28]	; (17088 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1706a:	4798      	blx	r3
   1706c:	bf00      	nop
   1706e:	3708      	adds	r7, #8
   17070:	46bd      	mov	sp, r7
   17072:	bd80      	pop	{r7, pc}
   17074:	2000a7c0 	.word	0x2000a7c0
   17078:	2000a018 	.word	0x2000a018
   1707c:	00016ca5 	.word	0x00016ca5
   17080:	20000000 	.word	0x20000000
   17084:	00016ccd 	.word	0x00016ccd
   17088:	00019d1d 	.word	0x00019d1d

0001708c <_GLOBAL__sub_I_ptrN25Q256Class>:
   1708c:	b580      	push	{r7, lr}
   1708e:	af00      	add	r7, sp, #0
   17090:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17094:	2001      	movs	r0, #1
   17096:	4b01      	ldr	r3, [pc, #4]	; (1709c <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   17098:	4798      	blx	r3
   1709a:	bd80      	pop	{r7, pc}
   1709c:	00017041 	.word	0x00017041

000170a0 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   170a0:	b580      	push	{r7, lr}
   170a2:	b082      	sub	sp, #8
   170a4:	af00      	add	r7, sp, #0
   170a6:	6078      	str	r0, [r7, #4]
   170a8:	687b      	ldr	r3, [r7, #4]
   170aa:	4618      	mov	r0, r3
   170ac:	4b06      	ldr	r3, [pc, #24]	; (170c8 <_ZN14Calendar_ClassC1Ev+0x28>)
   170ae:	4798      	blx	r3
   170b0:	4a06      	ldr	r2, [pc, #24]	; (170cc <_ZN14Calendar_ClassC1Ev+0x2c>)
   170b2:	687b      	ldr	r3, [r7, #4]
   170b4:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   170b6:	4a06      	ldr	r2, [pc, #24]	; (170d0 <_ZN14Calendar_ClassC1Ev+0x30>)
   170b8:	687b      	ldr	r3, [r7, #4]
   170ba:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   170bc:	687b      	ldr	r3, [r7, #4]
   170be:	4618      	mov	r0, r3
   170c0:	3708      	adds	r7, #8
   170c2:	46bd      	mov	sp, r7
   170c4:	bd80      	pop	{r7, pc}
   170c6:	bf00      	nop
   170c8:	000177ed 	.word	0x000177ed
   170cc:	00021ffc 	.word	0x00021ffc
   170d0:	2000a248 	.word	0x2000a248

000170d4 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   170d4:	b580      	push	{r7, lr}
   170d6:	b082      	sub	sp, #8
   170d8:	af00      	add	r7, sp, #0
   170da:	6078      	str	r0, [r7, #4]
   170dc:	6039      	str	r1, [r7, #0]
   170de:	687b      	ldr	r3, [r7, #4]
   170e0:	4618      	mov	r0, r3
   170e2:	4b08      	ldr	r3, [pc, #32]	; (17104 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   170e4:	4798      	blx	r3
   170e6:	4a08      	ldr	r2, [pc, #32]	; (17108 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   170e8:	687b      	ldr	r3, [r7, #4]
   170ea:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   170ec:	687b      	ldr	r3, [r7, #4]
   170ee:	683a      	ldr	r2, [r7, #0]
   170f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
   170f4:	4a05      	ldr	r2, [pc, #20]	; (1710c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   170f6:	687b      	ldr	r3, [r7, #4]
   170f8:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   170fa:	687b      	ldr	r3, [r7, #4]
   170fc:	4618      	mov	r0, r3
   170fe:	3708      	adds	r7, #8
   17100:	46bd      	mov	sp, r7
   17102:	bd80      	pop	{r7, pc}
   17104:	000177ed 	.word	0x000177ed
   17108:	00021ffc 	.word	0x00021ffc
   1710c:	2000a248 	.word	0x2000a248

00017110 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   17110:	b580      	push	{r7, lr}
   17112:	b082      	sub	sp, #8
   17114:	af00      	add	r7, sp, #0
   17116:	6078      	str	r0, [r7, #4]
   17118:	4a05      	ldr	r2, [pc, #20]	; (17130 <_ZN14Calendar_ClassD1Ev+0x20>)
   1711a:	687b      	ldr	r3, [r7, #4]
   1711c:	601a      	str	r2, [r3, #0]
   1711e:	687b      	ldr	r3, [r7, #4]
   17120:	4618      	mov	r0, r3
   17122:	4b04      	ldr	r3, [pc, #16]	; (17134 <_ZN14Calendar_ClassD1Ev+0x24>)
   17124:	4798      	blx	r3
{
} //~Calendar_Class
   17126:	687b      	ldr	r3, [r7, #4]
   17128:	4618      	mov	r0, r3
   1712a:	3708      	adds	r7, #8
   1712c:	46bd      	mov	sp, r7
   1712e:	bd80      	pop	{r7, pc}
   17130:	00021ffc 	.word	0x00021ffc
   17134:	0001780d 	.word	0x0001780d

00017138 <_ZN14Calendar_Class4InitEv>:

void	Calendar_Class::Init(void){
   17138:	b580      	push	{r7, lr}
   1713a:	b082      	sub	sp, #8
   1713c:	af00      	add	r7, sp, #0
   1713e:	6078      	str	r0, [r7, #4]
	ptrMemory=&eeprom;
   17140:	687b      	ldr	r3, [r7, #4]
   17142:	4a50      	ldr	r2, [pc, #320]	; (17284 <_ZN14Calendar_Class4InitEv+0x14c>)
   17144:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	calendar_enable(ptrCalendar);
   17148:	687b      	ldr	r3, [r7, #4]
   1714a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1714e:	4618      	mov	r0, r3
   17150:	4b4d      	ldr	r3, [pc, #308]	; (17288 <_ZN14Calendar_Class4InitEv+0x150>)
   17152:	4798      	blx	r3
	
	InitMaxDate();
   17154:	6878      	ldr	r0, [r7, #4]
   17156:	4b4d      	ldr	r3, [pc, #308]	; (1728c <_ZN14Calendar_Class4InitEv+0x154>)
   17158:	4798      	blx	r3
	
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	ReadLastDateTime();
   1715a:	687b      	ldr	r3, [r7, #4]
   1715c:	4618      	mov	r0, r3
   1715e:	4b4c      	ldr	r3, [pc, #304]	; (17290 <_ZN14Calendar_Class4InitEv+0x158>)
   17160:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   17162:	687b      	ldr	r3, [r7, #4]
   17164:	681b      	ldr	r3, [r3, #0]
   17166:	3304      	adds	r3, #4
   17168:	681b      	ldr	r3, [r3, #0]
   1716a:	687a      	ldr	r2, [r7, #4]
   1716c:	3260      	adds	r2, #96	; 0x60
   1716e:	4611      	mov	r1, r2
   17170:	6878      	ldr	r0, [r7, #4]
   17172:	4798      	blx	r3
   17174:	4602      	mov	r2, r0
   17176:	687b      	ldr	r3, [r7, #4]
   17178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   1717c:	687b      	ldr	r3, [r7, #4]
   1717e:	681b      	ldr	r3, [r3, #0]
   17180:	3304      	adds	r3, #4
   17182:	681b      	ldr	r3, [r3, #0]
   17184:	687a      	ldr	r2, [r7, #4]
   17186:	326c      	adds	r2, #108	; 0x6c
   17188:	4611      	mov	r1, r2
   1718a:	6878      	ldr	r0, [r7, #4]
   1718c:	4798      	blx	r3
   1718e:	4602      	mov	r2, r0
   17190:	687b      	ldr	r3, [r7, #4]
   17192:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   17196:	687b      	ldr	r3, [r7, #4]
   17198:	681b      	ldr	r3, [r3, #0]
   1719a:	3304      	adds	r3, #4
   1719c:	681b      	ldr	r3, [r3, #0]
   1719e:	687a      	ldr	r2, [r7, #4]
   171a0:	327c      	adds	r2, #124	; 0x7c
   171a2:	4611      	mov	r1, r2
   171a4:	6878      	ldr	r0, [r7, #4]
   171a6:	4798      	blx	r3
   171a8:	4602      	mov	r2, r0
   171aa:	687b      	ldr	r3, [r7, #4]
   171ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   171b0:	687b      	ldr	r3, [r7, #4]
   171b2:	681b      	ldr	r3, [r3, #0]
   171b4:	3304      	adds	r3, #4
   171b6:	681b      	ldr	r3, [r3, #0]
   171b8:	687a      	ldr	r2, [r7, #4]
   171ba:	3284      	adds	r2, #132	; 0x84
   171bc:	4611      	mov	r1, r2
   171be:	6878      	ldr	r0, [r7, #4]
   171c0:	4798      	blx	r3
   171c2:	4602      	mov	r2, r0
   171c4:	687b      	ldr	r3, [r7, #4]
   171c6:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   171c8:	6878      	ldr	r0, [r7, #4]
   171ca:	4b32      	ldr	r3, [pc, #200]	; (17294 <_ZN14Calendar_Class4InitEv+0x15c>)
   171cc:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   171ce:	687b      	ldr	r3, [r7, #4]
   171d0:	681b      	ldr	r3, [r3, #0]
   171d2:	3304      	adds	r3, #4
   171d4:	681b      	ldr	r3, [r3, #0]
   171d6:	687a      	ldr	r2, [r7, #4]
   171d8:	3274      	adds	r2, #116	; 0x74
   171da:	4611      	mov	r1, r2
   171dc:	6878      	ldr	r0, [r7, #4]
   171de:	4798      	blx	r3
   171e0:	4602      	mov	r2, r0
   171e2:	687b      	ldr	r3, [r7, #4]
   171e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   171e8:	687b      	ldr	r3, [r7, #4]
   171ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   171ee:	687b      	ldr	r3, [r7, #4]
   171f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   171f4:	429a      	cmp	r2, r3
   171f6:	d80e      	bhi.n	17216 <_ZN14Calendar_Class4InitEv+0xde>
   171f8:	687b      	ldr	r3, [r7, #4]
   171fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   171fe:	687b      	ldr	r3, [r7, #4]
   17200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   17204:	429a      	cmp	r2, r3
   17206:	d006      	beq.n	17216 <_ZN14Calendar_Class4InitEv+0xde>
   17208:	687b      	ldr	r3, [r7, #4]
   1720a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1720e:	687b      	ldr	r3, [r7, #4]
   17210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   17212:	429a      	cmp	r2, r3
   17214:	d106      	bne.n	17224 <_ZN14Calendar_Class4InitEv+0xec>
	{
		SetDateTime(&compilationDateTime);
   17216:	687b      	ldr	r3, [r7, #4]
   17218:	3374      	adds	r3, #116	; 0x74
   1721a:	4619      	mov	r1, r3
   1721c:	6878      	ldr	r0, [r7, #4]
   1721e:	4b1e      	ldr	r3, [pc, #120]	; (17298 <_ZN14Calendar_Class4InitEv+0x160>)
   17220:	4798      	blx	r3
   17222:	e022      	b.n	1726a <_ZN14Calendar_Class4InitEv+0x132>
	}
	else
	{
		if (lastTimestamp<currentTimestamp)
   17224:	687b      	ldr	r3, [r7, #4]
   17226:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1722a:	687b      	ldr	r3, [r7, #4]
   1722c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   17230:	429a      	cmp	r2, r3
   17232:	d206      	bcs.n	17242 <_ZN14Calendar_Class4InitEv+0x10a>
		{
			SetDateTime(&compilationDateTime);
   17234:	687b      	ldr	r3, [r7, #4]
   17236:	3374      	adds	r3, #116	; 0x74
   17238:	4619      	mov	r1, r3
   1723a:	6878      	ldr	r0, [r7, #4]
   1723c:	4b16      	ldr	r3, [pc, #88]	; (17298 <_ZN14Calendar_Class4InitEv+0x160>)
   1723e:	4798      	blx	r3
   17240:	e013      	b.n	1726a <_ZN14Calendar_Class4InitEv+0x132>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   17242:	687b      	ldr	r3, [r7, #4]
   17244:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   17248:	687b      	ldr	r3, [r7, #4]
   1724a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1724c:	429a      	cmp	r2, r3
   1724e:	d106      	bne.n	1725e <_ZN14Calendar_Class4InitEv+0x126>
			{
				SetDateTime(&compilationDateTime);
   17250:	687b      	ldr	r3, [r7, #4]
   17252:	3374      	adds	r3, #116	; 0x74
   17254:	4619      	mov	r1, r3
   17256:	6878      	ldr	r0, [r7, #4]
   17258:	4b0f      	ldr	r3, [pc, #60]	; (17298 <_ZN14Calendar_Class4InitEv+0x160>)
   1725a:	4798      	blx	r3
   1725c:	e005      	b.n	1726a <_ZN14Calendar_Class4InitEv+0x132>
			} 
			else
			{
				SetDateTime(&lastDateTime);
   1725e:	687b      	ldr	r3, [r7, #4]
   17260:	3360      	adds	r3, #96	; 0x60
   17262:	4619      	mov	r1, r3
   17264:	6878      	ldr	r0, [r7, #4]
   17266:	4b0c      	ldr	r3, [pc, #48]	; (17298 <_ZN14Calendar_Class4InitEv+0x160>)
   17268:	4798      	blx	r3
			}
		
		}
	}
	enlapsedTime=false;
   1726a:	687b      	ldr	r3, [r7, #4]
   1726c:	2200      	movs	r2, #0
   1726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SaveCurrentDateTime();
   17272:	687b      	ldr	r3, [r7, #4]
   17274:	4618      	mov	r0, r3
   17276:	4b09      	ldr	r3, [pc, #36]	; (1729c <_ZN14Calendar_Class4InitEv+0x164>)
   17278:	4798      	blx	r3
	
}
   1727a:	bf00      	nop
   1727c:	3708      	adds	r7, #8
   1727e:	46bd      	mov	sp, r7
   17280:	bd80      	pop	{r7, pc}
   17282:	bf00      	nop
   17284:	20009f7c 	.word	0x20009f7c
   17288:	0000642d 	.word	0x0000642d
   1728c:	000172a1 	.word	0x000172a1
   17290:	00017ac1 	.word	0x00017ac1
   17294:	00017347 	.word	0x00017347
   17298:	0001753d 	.word	0x0001753d
   1729c:	00017a51 	.word	0x00017a51

000172a0 <_ZN14Calendar_Class11InitMaxDateEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitMaxDate(void){
   172a0:	b480      	push	{r7}
   172a2:	b083      	sub	sp, #12
   172a4:	af00      	add	r7, sp, #0
   172a6:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   172a8:	687b      	ldr	r3, [r7, #4]
   172aa:	f640 0202 	movw	r2, #2050	; 0x802
   172ae:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   172b2:	687b      	ldr	r3, [r7, #4]
   172b4:	220c      	movs	r2, #12
   172b6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   172ba:	687b      	ldr	r3, [r7, #4]
   172bc:	221f      	movs	r2, #31
   172be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   172c2:	687b      	ldr	r3, [r7, #4]
   172c4:	220c      	movs	r2, #12
   172c6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   172ca:	687b      	ldr	r3, [r7, #4]
   172cc:	223b      	movs	r2, #59	; 0x3b
   172ce:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   172d2:	687b      	ldr	r3, [r7, #4]
   172d4:	223b      	movs	r2, #59	; 0x3b
   172d6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   172da:	687b      	ldr	r3, [r7, #4]
   172dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   172e0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   172e4:	687b      	ldr	r3, [r7, #4]
   172e6:	22ff      	movs	r2, #255	; 0xff
   172e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   172ec:	687b      	ldr	r3, [r7, #4]
   172ee:	22ff      	movs	r2, #255	; 0xff
   172f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   172f4:	687b      	ldr	r3, [r7, #4]
   172f6:	22ff      	movs	r2, #255	; 0xff
   172f8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   172fc:	687b      	ldr	r3, [r7, #4]
   172fe:	22ff      	movs	r2, #255	; 0xff
   17300:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   17304:	687b      	ldr	r3, [r7, #4]
   17306:	22ff      	movs	r2, #255	; 0xff
   17308:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   1730c:	687b      	ldr	r3, [r7, #4]
   1730e:	2200      	movs	r2, #0
   17310:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   17314:	687b      	ldr	r3, [r7, #4]
   17316:	2200      	movs	r2, #0
   17318:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   1731c:	687b      	ldr	r3, [r7, #4]
   1731e:	2200      	movs	r2, #0
   17320:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   17324:	687b      	ldr	r3, [r7, #4]
   17326:	2200      	movs	r2, #0
   17328:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   1732c:	687b      	ldr	r3, [r7, #4]
   1732e:	2200      	movs	r2, #0
   17330:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   17334:	687b      	ldr	r3, [r7, #4]
   17336:	2200      	movs	r2, #0
   17338:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   1733c:	bf00      	nop
   1733e:	370c      	adds	r7, #12
   17340:	46bd      	mov	sp, r7
   17342:	bc80      	pop	{r7}
   17344:	4770      	bx	lr

00017346 <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   17346:	b480      	push	{r7}
   17348:	b083      	sub	sp, #12
   1734a:	af00      	add	r7, sp, #0
   1734c:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   1734e:	2332      	movs	r3, #50	; 0x32
   17350:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   17354:	4613      	mov	r3, r2
   17356:	009b      	lsls	r3, r3, #2
   17358:	4413      	add	r3, r2
   1735a:	005b      	lsls	r3, r3, #1
   1735c:	461a      	mov	r2, r3
   1735e:	2330      	movs	r3, #48	; 0x30
   17360:	3b30      	subs	r3, #48	; 0x30
   17362:	441a      	add	r2, r3
   17364:	4613      	mov	r3, r2
   17366:	009b      	lsls	r3, r3, #2
   17368:	4413      	add	r3, r2
   1736a:	005b      	lsls	r3, r3, #1
   1736c:	461a      	mov	r2, r3
   1736e:	2332      	movs	r3, #50	; 0x32
   17370:	3b30      	subs	r3, #48	; 0x30
   17372:	4413      	add	r3, r2
   17374:	b29b      	uxth	r3, r3
   17376:	461a      	mov	r2, r3
   17378:	0092      	lsls	r2, r2, #2
   1737a:	4413      	add	r3, r2
   1737c:	005b      	lsls	r3, r3, #1
   1737e:	b29a      	uxth	r2, r3
   17380:	2330      	movs	r3, #48	; 0x30
   17382:	b29b      	uxth	r3, r3
   17384:	4413      	add	r3, r2
   17386:	b29b      	uxth	r3, r3
   17388:	3b30      	subs	r3, #48	; 0x30
   1738a:	b29a      	uxth	r2, r3
   1738c:	687b      	ldr	r3, [r7, #4]
   1738e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   17392:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   17394:	2b6e      	cmp	r3, #110	; 0x6e
   17396:	d106      	bne.n	173a6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   17398:	2363      	movs	r3, #99	; 0x63
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1739a:	2b61      	cmp	r3, #97	; 0x61
   1739c:	d101      	bne.n	173a2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   1739e:	2301      	movs	r3, #1
   173a0:	e02f      	b.n	17402 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   173a2:	2306      	movs	r3, #6
   173a4:	e02d      	b.n	17402 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   173a6:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   173a8:	2b62      	cmp	r3, #98	; 0x62
   173aa:	d029      	beq.n	17400 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   173ac:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   173ae:	2b72      	cmp	r3, #114	; 0x72
   173b0:	d106      	bne.n	173c0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   173b2:	234f      	movs	r3, #79	; 0x4f
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   173b4:	2b4d      	cmp	r3, #77	; 0x4d
   173b6:	d101      	bne.n	173bc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   173b8:	2303      	movs	r3, #3
   173ba:	e022      	b.n	17402 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   173bc:	2304      	movs	r3, #4
   173be:	e020      	b.n	17402 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   173c0:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   173c2:	2b79      	cmp	r3, #121	; 0x79
   173c4:	d01a      	beq.n	173fc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   173c6:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   173c8:	2b6c      	cmp	r3, #108	; 0x6c
   173ca:	d015      	beq.n	173f8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   173cc:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   173ce:	2b67      	cmp	r3, #103	; 0x67
   173d0:	d010      	beq.n	173f4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   173d2:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   173d4:	2b70      	cmp	r3, #112	; 0x70
   173d6:	d00b      	beq.n	173f0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   173d8:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   173da:	2b74      	cmp	r3, #116	; 0x74
   173dc:	d006      	beq.n	173ec <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   173de:	2374      	movs	r3, #116	; 0x74
   173e0:	2b76      	cmp	r3, #118	; 0x76
   173e2:	d101      	bne.n	173e8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   173e4:	230b      	movs	r3, #11
   173e6:	e00c      	b.n	17402 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   173e8:	230c      	movs	r3, #12
   173ea:	e00a      	b.n	17402 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   173ec:	230a      	movs	r3, #10
   173ee:	e008      	b.n	17402 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   173f0:	2309      	movs	r3, #9
   173f2:	e006      	b.n	17402 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   173f4:	2308      	movs	r3, #8
   173f6:	e004      	b.n	17402 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   173f8:	2307      	movs	r3, #7
   173fa:	e002      	b.n	17402 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   173fc:	2305      	movs	r3, #5
   173fe:	e000      	b.n	17402 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   17400:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   17402:	687a      	ldr	r2, [r7, #4]
   17404:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   17408:	2332      	movs	r3, #50	; 0x32
   1740a:	2b20      	cmp	r3, #32
   1740c:	d008      	beq.n	17420 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   1740e:	2332      	movs	r3, #50	; 0x32
   17410:	3b30      	subs	r3, #48	; 0x30
   17412:	b2db      	uxtb	r3, r3
   17414:	461a      	mov	r2, r3
   17416:	0092      	lsls	r2, r2, #2
   17418:	4413      	add	r3, r2
   1741a:	005b      	lsls	r3, r3, #1
   1741c:	b2db      	uxtb	r3, r3
   1741e:	e000      	b.n	17422 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   17420:	2300      	movs	r3, #0
   17422:	2238      	movs	r2, #56	; 0x38
   17424:	4413      	add	r3, r2
   17426:	b2db      	uxtb	r3, r3
   17428:	3b30      	subs	r3, #48	; 0x30
   1742a:	b2da      	uxtb	r2, r3
   1742c:	687b      	ldr	r3, [r7, #4]
   1742e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   17432:	2331      	movs	r3, #49	; 0x31
   17434:	3b30      	subs	r3, #48	; 0x30
   17436:	b2db      	uxtb	r3, r3
   17438:	461a      	mov	r2, r3
   1743a:	0092      	lsls	r2, r2, #2
   1743c:	4413      	add	r3, r2
   1743e:	005b      	lsls	r3, r3, #1
   17440:	b2db      	uxtb	r3, r3
   17442:	2234      	movs	r2, #52	; 0x34
   17444:	4413      	add	r3, r2
   17446:	b2db      	uxtb	r3, r3
   17448:	3b30      	subs	r3, #48	; 0x30
   1744a:	b2da      	uxtb	r2, r3
   1744c:	687b      	ldr	r3, [r7, #4]
   1744e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   17452:	2330      	movs	r3, #48	; 0x30
   17454:	3b30      	subs	r3, #48	; 0x30
   17456:	b2db      	uxtb	r3, r3
   17458:	461a      	mov	r2, r3
   1745a:	0092      	lsls	r2, r2, #2
   1745c:	4413      	add	r3, r2
   1745e:	005b      	lsls	r3, r3, #1
   17460:	b2db      	uxtb	r3, r3
   17462:	2239      	movs	r2, #57	; 0x39
   17464:	4413      	add	r3, r2
   17466:	b2db      	uxtb	r3, r3
   17468:	3b30      	subs	r3, #48	; 0x30
   1746a:	b2da      	uxtb	r2, r3
   1746c:	687b      	ldr	r3, [r7, #4]
   1746e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   17472:	2334      	movs	r3, #52	; 0x34
   17474:	3b30      	subs	r3, #48	; 0x30
   17476:	b2db      	uxtb	r3, r3
   17478:	461a      	mov	r2, r3
   1747a:	0092      	lsls	r2, r2, #2
   1747c:	4413      	add	r3, r2
   1747e:	005b      	lsls	r3, r3, #1
   17480:	b2db      	uxtb	r3, r3
   17482:	2230      	movs	r2, #48	; 0x30
   17484:	4413      	add	r3, r2
   17486:	b2db      	uxtb	r3, r3
   17488:	3b30      	subs	r3, #48	; 0x30
   1748a:	b2da      	uxtb	r2, r3
   1748c:	687b      	ldr	r3, [r7, #4]
   1748e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
   17492:	bf00      	nop
   17494:	370c      	adds	r7, #12
   17496:	46bd      	mov	sp, r7
   17498:	bc80      	pop	{r7}
   1749a:	4770      	bx	lr

0001749c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   1749c:	b580      	push	{r7, lr}
   1749e:	b082      	sub	sp, #8
   174a0:	af00      	add	r7, sp, #0
   174a2:	6078      	str	r0, [r7, #4]
   174a4:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   174a6:	687b      	ldr	r3, [r7, #4]
   174a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   174ac:	6839      	ldr	r1, [r7, #0]
   174ae:	4618      	mov	r0, r3
   174b0:	4b03      	ldr	r3, [pc, #12]	; (174c0 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   174b2:	4798      	blx	r3
   174b4:	4603      	mov	r3, r0
}
   174b6:	4618      	mov	r0, r3
   174b8:	3708      	adds	r7, #8
   174ba:	46bd      	mov	sp, r7
   174bc:	bd80      	pop	{r7, pc}
   174be:	bf00      	nop
   174c0:	0000657d 	.word	0x0000657d

000174c4 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   174c4:	b480      	push	{r7}
   174c6:	b083      	sub	sp, #12
   174c8:	af00      	add	r7, sp, #0
   174ca:	6078      	str	r0, [r7, #4]
   174cc:	460b      	mov	r3, r1
   174ce:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   174d0:	887b      	ldrh	r3, [r7, #2]
   174d2:	f003 0303 	and.w	r3, r3, #3
   174d6:	2b00      	cmp	r3, #0
   174d8:	d001      	beq.n	174de <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   174da:	2300      	movs	r3, #0
   174dc:	e000      	b.n	174e0 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   174de:	2301      	movs	r3, #1
	}
}
   174e0:	4618      	mov	r0, r3
   174e2:	370c      	adds	r7, #12
   174e4:	46bd      	mov	sp, r7
   174e6:	bc80      	pop	{r7}
   174e8:	4770      	bx	lr
	...

000174ec <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   174ec:	b580      	push	{r7, lr}
   174ee:	b082      	sub	sp, #8
   174f0:	af00      	add	r7, sp, #0
   174f2:	6078      	str	r0, [r7, #4]
   174f4:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   174f6:	687b      	ldr	r3, [r7, #4]
   174f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   174fc:	6839      	ldr	r1, [r7, #0]
   174fe:	4618      	mov	r0, r3
   17500:	4b03      	ldr	r3, [pc, #12]	; (17510 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   17502:	4798      	blx	r3
   17504:	4603      	mov	r3, r0
}
   17506:	4618      	mov	r0, r3
   17508:	3708      	adds	r7, #8
   1750a:	46bd      	mov	sp, r7
   1750c:	bd80      	pop	{r7, pc}
   1750e:	bf00      	nop
   17510:	0000646d 	.word	0x0000646d

00017514 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   17514:	b580      	push	{r7, lr}
   17516:	b082      	sub	sp, #8
   17518:	af00      	add	r7, sp, #0
   1751a:	6078      	str	r0, [r7, #4]
   1751c:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   1751e:	687b      	ldr	r3, [r7, #4]
   17520:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   17524:	6839      	ldr	r1, [r7, #0]
   17526:	4618      	mov	r0, r3
   17528:	4b03      	ldr	r3, [pc, #12]	; (17538 <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   1752a:	4798      	blx	r3
   1752c:	4603      	mov	r3, r0
}
   1752e:	4618      	mov	r0, r3
   17530:	3708      	adds	r7, #8
   17532:	46bd      	mov	sp, r7
   17534:	bd80      	pop	{r7, pc}
   17536:	bf00      	nop
   17538:	000064f5 	.word	0x000064f5

0001753c <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   1753c:	b580      	push	{r7, lr}
   1753e:	b084      	sub	sp, #16
   17540:	af00      	add	r7, sp, #0
   17542:	6078      	str	r0, [r7, #4]
   17544:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   17546:	683a      	ldr	r2, [r7, #0]
   17548:	f107 030c 	add.w	r3, r7, #12
   1754c:	3204      	adds	r2, #4
   1754e:	6810      	ldr	r0, [r2, #0]
   17550:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   17552:	f107 030c 	add.w	r3, r7, #12
   17556:	4619      	mov	r1, r3
   17558:	6878      	ldr	r0, [r7, #4]
   1755a:	4b0a      	ldr	r3, [pc, #40]	; (17584 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   1755c:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   1755e:	683a      	ldr	r2, [r7, #0]
   17560:	f107 0308 	add.w	r3, r7, #8
   17564:	8811      	ldrh	r1, [r2, #0]
   17566:	7892      	ldrb	r2, [r2, #2]
   17568:	8019      	strh	r1, [r3, #0]
   1756a:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   1756c:	f107 0308 	add.w	r3, r7, #8
   17570:	4619      	mov	r1, r3
   17572:	6878      	ldr	r0, [r7, #4]
   17574:	4b04      	ldr	r3, [pc, #16]	; (17588 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   17576:	4798      	blx	r3
   17578:	4603      	mov	r3, r0
			
}
   1757a:	4618      	mov	r0, r3
   1757c:	3710      	adds	r7, #16
   1757e:	46bd      	mov	sp, r7
   17580:	bd80      	pop	{r7, pc}
   17582:	bf00      	nop
   17584:	00017515 	.word	0x00017515
   17588:	000174ed 	.word	0x000174ed

0001758c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   1758c:	b580      	push	{r7, lr}
   1758e:	b086      	sub	sp, #24
   17590:	af00      	add	r7, sp, #0
   17592:	6078      	str	r0, [r7, #4]
   17594:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   17596:	2300      	movs	r3, #0
   17598:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   1759a:	2300      	movs	r3, #0
   1759c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   1759e:	683b      	ldr	r3, [r7, #0]
   175a0:	88db      	ldrh	r3, [r3, #6]
   175a2:	b2da      	uxtb	r2, r3
   175a4:	687b      	ldr	r3, [r7, #4]
   175a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   175aa:	699b      	ldr	r3, [r3, #24]
   175ac:	b2db      	uxtb	r3, r3
   175ae:	1ad3      	subs	r3, r2, r3
   175b0:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   175b2:	683b      	ldr	r3, [r7, #0]
   175b4:	795b      	ldrb	r3, [r3, #5]
   175b6:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   175b8:	683b      	ldr	r3, [r7, #0]
   175ba:	791b      	ldrb	r3, [r3, #4]
   175bc:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   175be:	683b      	ldr	r3, [r7, #0]
   175c0:	789b      	ldrb	r3, [r3, #2]
   175c2:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   175c4:	683b      	ldr	r3, [r7, #0]
   175c6:	785b      	ldrb	r3, [r3, #1]
   175c8:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   175ca:	683b      	ldr	r3, [r7, #0]
   175cc:	781b      	ldrb	r3, [r3, #0]
   175ce:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   175d0:	2300      	movs	r3, #0
   175d2:	613b      	str	r3, [r7, #16]
   175d4:	7bfa      	ldrb	r2, [r7, #15]
   175d6:	693b      	ldr	r3, [r7, #16]
   175d8:	429a      	cmp	r2, r3
   175da:	d91e      	bls.n	1761a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   175dc:	687b      	ldr	r3, [r7, #4]
   175de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   175e2:	699b      	ldr	r3, [r3, #24]
   175e4:	b29a      	uxth	r2, r3
   175e6:	693b      	ldr	r3, [r7, #16]
   175e8:	b29b      	uxth	r3, r3
   175ea:	4413      	add	r3, r2
   175ec:	b29b      	uxth	r3, r3
   175ee:	4619      	mov	r1, r3
   175f0:	6878      	ldr	r0, [r7, #4]
   175f2:	4b27      	ldr	r3, [pc, #156]	; (17690 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   175f4:	4798      	blx	r3
   175f6:	4603      	mov	r3, r0
   175f8:	2b00      	cmp	r3, #0
   175fa:	d006      	beq.n	1760a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   175fc:	697b      	ldr	r3, [r7, #20]
   175fe:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   17602:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   17606:	617b      	str	r3, [r7, #20]
   17608:	e003      	b.n	17612 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   1760a:	697a      	ldr	r2, [r7, #20]
   1760c:	4b21      	ldr	r3, [pc, #132]	; (17694 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   1760e:	4413      	add	r3, r2
   17610:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   17612:	693b      	ldr	r3, [r7, #16]
   17614:	3301      	adds	r3, #1
   17616:	613b      	str	r3, [r7, #16]
   17618:	e7dc      	b.n	175d4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   1761a:	2301      	movs	r3, #1
   1761c:	613b      	str	r3, [r7, #16]
   1761e:	7bba      	ldrb	r2, [r7, #14]
   17620:	693b      	ldr	r3, [r7, #16]
   17622:	429a      	cmp	r2, r3
   17624:	d910      	bls.n	17648 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   17626:	683b      	ldr	r3, [r7, #0]
   17628:	88db      	ldrh	r3, [r3, #6]
   1762a:	4619      	mov	r1, r3
   1762c:	693b      	ldr	r3, [r7, #16]
   1762e:	b2db      	uxtb	r3, r3
   17630:	461a      	mov	r2, r3
   17632:	6878      	ldr	r0, [r7, #4]
   17634:	4b18      	ldr	r3, [pc, #96]	; (17698 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   17636:	4798      	blx	r3
   17638:	4602      	mov	r2, r0
   1763a:	697b      	ldr	r3, [r7, #20]
   1763c:	4413      	add	r3, r2
   1763e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   17640:	693b      	ldr	r3, [r7, #16]
   17642:	3301      	adds	r3, #1
   17644:	613b      	str	r3, [r7, #16]
   17646:	e7ea      	b.n	1761e <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   17648:	7b7b      	ldrb	r3, [r7, #13]
   1764a:	3b01      	subs	r3, #1
   1764c:	4a13      	ldr	r2, [pc, #76]	; (1769c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   1764e:	fb02 f303 	mul.w	r3, r2, r3
   17652:	461a      	mov	r2, r3
   17654:	697b      	ldr	r3, [r7, #20]
   17656:	4413      	add	r3, r2
   17658:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   1765a:	7b3b      	ldrb	r3, [r7, #12]
   1765c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   17660:	fb02 f303 	mul.w	r3, r2, r3
   17664:	461a      	mov	r2, r3
   17666:	697b      	ldr	r3, [r7, #20]
   17668:	4413      	add	r3, r2
   1766a:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   1766c:	7afa      	ldrb	r2, [r7, #11]
   1766e:	4613      	mov	r3, r2
   17670:	011b      	lsls	r3, r3, #4
   17672:	1a9b      	subs	r3, r3, r2
   17674:	009b      	lsls	r3, r3, #2
   17676:	461a      	mov	r2, r3
   17678:	697b      	ldr	r3, [r7, #20]
   1767a:	4413      	add	r3, r2
   1767c:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   1767e:	7abb      	ldrb	r3, [r7, #10]
   17680:	697a      	ldr	r2, [r7, #20]
   17682:	4413      	add	r3, r2
   17684:	617b      	str	r3, [r7, #20]

	return tmp;
   17686:	697b      	ldr	r3, [r7, #20]
}
   17688:	4618      	mov	r0, r3
   1768a:	3718      	adds	r7, #24
   1768c:	46bd      	mov	sp, r7
   1768e:	bd80      	pop	{r7, pc}
   17690:	000174c5 	.word	0x000174c5
   17694:	01e13380 	.word	0x01e13380
   17698:	000176a1 	.word	0x000176a1
   1769c:	00015180 	.word	0x00015180

000176a0 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   176a0:	b580      	push	{r7, lr}
   176a2:	b086      	sub	sp, #24
   176a4:	af00      	add	r7, sp, #0
   176a6:	60f8      	str	r0, [r7, #12]
   176a8:	60b9      	str	r1, [r7, #8]
   176aa:	4613      	mov	r3, r2
   176ac:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   176ae:	2300      	movs	r3, #0
   176b0:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   176b2:	68bb      	ldr	r3, [r7, #8]
   176b4:	b29b      	uxth	r3, r3
   176b6:	4619      	mov	r1, r3
   176b8:	68f8      	ldr	r0, [r7, #12]
   176ba:	4b2f      	ldr	r3, [pc, #188]	; (17778 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   176bc:	4798      	blx	r3
   176be:	4603      	mov	r3, r0
   176c0:	2b00      	cmp	r3, #0
   176c2:	d028      	beq.n	17716 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   176c4:	79fb      	ldrb	r3, [r7, #7]
   176c6:	3b01      	subs	r3, #1
   176c8:	2b0b      	cmp	r3, #11
   176ca:	d84c      	bhi.n	17766 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   176cc:	a201      	add	r2, pc, #4	; (adr r2, 176d4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   176ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   176d2:	bf00      	nop
   176d4:	00017705 	.word	0x00017705
   176d8:	0001770b 	.word	0x0001770b
   176dc:	00017705 	.word	0x00017705
   176e0:	00017711 	.word	0x00017711
   176e4:	00017705 	.word	0x00017705
   176e8:	00017711 	.word	0x00017711
   176ec:	00017705 	.word	0x00017705
   176f0:	00017705 	.word	0x00017705
   176f4:	00017711 	.word	0x00017711
   176f8:	00017705 	.word	0x00017705
   176fc:	00017711 	.word	0x00017711
   17700:	00017705 	.word	0x00017705
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   17704:	4b1d      	ldr	r3, [pc, #116]	; (1777c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   17706:	617b      	str	r3, [r7, #20]
			break;
   17708:	e030      	b.n	1776c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   1770a:	4b1d      	ldr	r3, [pc, #116]	; (17780 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   1770c:	617b      	str	r3, [r7, #20]
			break;
   1770e:	e02d      	b.n	1776c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   17710:	4b1c      	ldr	r3, [pc, #112]	; (17784 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   17712:	617b      	str	r3, [r7, #20]
			break;
   17714:	e02a      	b.n	1776c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   17716:	79fb      	ldrb	r3, [r7, #7]
   17718:	3b01      	subs	r3, #1
   1771a:	2b0b      	cmp	r3, #11
   1771c:	d825      	bhi.n	1776a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   1771e:	a201      	add	r2, pc, #4	; (adr r2, 17724 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   17720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17724:	00017755 	.word	0x00017755
   17728:	0001775b 	.word	0x0001775b
   1772c:	00017755 	.word	0x00017755
   17730:	00017761 	.word	0x00017761
   17734:	00017755 	.word	0x00017755
   17738:	00017761 	.word	0x00017761
   1773c:	00017755 	.word	0x00017755
   17740:	00017755 	.word	0x00017755
   17744:	00017761 	.word	0x00017761
   17748:	00017755 	.word	0x00017755
   1774c:	00017761 	.word	0x00017761
   17750:	00017755 	.word	0x00017755
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   17754:	4b09      	ldr	r3, [pc, #36]	; (1777c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   17756:	617b      	str	r3, [r7, #20]
			break;
   17758:	e008      	b.n	1776c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   1775a:	4b0b      	ldr	r3, [pc, #44]	; (17788 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   1775c:	617b      	str	r3, [r7, #20]
			break;
   1775e:	e005      	b.n	1776c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   17760:	4b08      	ldr	r3, [pc, #32]	; (17784 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   17762:	617b      	str	r3, [r7, #20]
			break;
   17764:	e002      	b.n	1776c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   17766:	bf00      	nop
   17768:	e000      	b.n	1776c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   1776a:	bf00      	nop
		}
	}

	return sec_in_month;
   1776c:	697b      	ldr	r3, [r7, #20]
}
   1776e:	4618      	mov	r0, r3
   17770:	3718      	adds	r7, #24
   17772:	46bd      	mov	sp, r7
   17774:	bd80      	pop	{r7, pc}
   17776:	bf00      	nop
   17778:	000174c5 	.word	0x000174c5
   1777c:	0028de80 	.word	0x0028de80
   17780:	00263b80 	.word	0x00263b80
   17784:	00278d00 	.word	0x00278d00
   17788:	0024ea00 	.word	0x0024ea00

0001778c <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   1778c:	b580      	push	{r7, lr}
   1778e:	b082      	sub	sp, #8
   17790:	af00      	add	r7, sp, #0
   17792:	6078      	str	r0, [r7, #4]
   17794:	6039      	str	r1, [r7, #0]
   17796:	687b      	ldr	r3, [r7, #4]
   17798:	2b01      	cmp	r3, #1
   1779a:	d10d      	bne.n	177b8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1779c:	683b      	ldr	r3, [r7, #0]
   1779e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   177a2:	4293      	cmp	r3, r2
   177a4:	d108      	bne.n	177b8 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   177a6:	4906      	ldr	r1, [pc, #24]	; (177c0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   177a8:	4806      	ldr	r0, [pc, #24]	; (177c4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   177aa:	4b07      	ldr	r3, [pc, #28]	; (177c8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   177ac:	4798      	blx	r3
   177ae:	4a07      	ldr	r2, [pc, #28]	; (177cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
   177b0:	4907      	ldr	r1, [pc, #28]	; (177d0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   177b2:	4804      	ldr	r0, [pc, #16]	; (177c4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   177b4:	4b07      	ldr	r3, [pc, #28]	; (177d4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   177b6:	4798      	blx	r3
   177b8:	bf00      	nop
   177ba:	3708      	adds	r7, #8
   177bc:	46bd      	mov	sp, r7
   177be:	bd80      	pop	{r7, pc}
   177c0:	2000a928 	.word	0x2000a928
   177c4:	2000a250 	.word	0x2000a250
   177c8:	000170d5 	.word	0x000170d5
   177cc:	20000000 	.word	0x20000000
   177d0:	00017111 	.word	0x00017111
   177d4:	00019d1d 	.word	0x00019d1d

000177d8 <_GLOBAL__sub_I_ptrCalendarClass>:
   177d8:	b580      	push	{r7, lr}
   177da:	af00      	add	r7, sp, #0
   177dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   177e0:	2001      	movs	r0, #1
   177e2:	4b01      	ldr	r3, [pc, #4]	; (177e8 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   177e4:	4798      	blx	r3
   177e6:	bd80      	pop	{r7, pc}
   177e8:	0001778d 	.word	0x0001778d

000177ec <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   177ec:	b480      	push	{r7}
   177ee:	b083      	sub	sp, #12
   177f0:	af00      	add	r7, sp, #0
   177f2:	6078      	str	r0, [r7, #4]
   177f4:	4a04      	ldr	r2, [pc, #16]	; (17808 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   177f6:	687b      	ldr	r3, [r7, #4]
   177f8:	601a      	str	r2, [r3, #0]
{
} //~D
   177fa:	687b      	ldr	r3, [r7, #4]
   177fc:	4618      	mov	r0, r3
   177fe:	370c      	adds	r7, #12
   17800:	46bd      	mov	sp, r7
   17802:	bc80      	pop	{r7}
   17804:	4770      	bx	lr
   17806:	bf00      	nop
   17808:	0002200c 	.word	0x0002200c

0001780c <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   1780c:	b480      	push	{r7}
   1780e:	b083      	sub	sp, #12
   17810:	af00      	add	r7, sp, #0
   17812:	6078      	str	r0, [r7, #4]
   17814:	4a04      	ldr	r2, [pc, #16]	; (17828 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   17816:	687b      	ldr	r3, [r7, #4]
   17818:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   1781a:	687b      	ldr	r3, [r7, #4]
   1781c:	4618      	mov	r0, r3
   1781e:	370c      	adds	r7, #12
   17820:	46bd      	mov	sp, r7
   17822:	bc80      	pop	{r7}
   17824:	4770      	bx	lr
   17826:	bf00      	nop
   17828:	0002200c 	.word	0x0002200c

0001782c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv>:

tick_t	DateTimeLog_Class::GetPowerInterrupTime(void){
   1782c:	b590      	push	{r4, r7, lr}
   1782e:	b085      	sub	sp, #20
   17830:	af00      	add	r7, sp, #0
   17832:	6078      	str	r0, [r7, #4]

	GetDateTime(&dateTime);
   17834:	687b      	ldr	r3, [r7, #4]
   17836:	681b      	ldr	r3, [r3, #0]
   17838:	681b      	ldr	r3, [r3, #0]
   1783a:	687a      	ldr	r2, [r7, #4]
   1783c:	3226      	adds	r2, #38	; 0x26
   1783e:	4611      	mov	r1, r2
   17840:	6878      	ldr	r0, [r7, #4]
   17842:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&dateTime);
   17844:	687b      	ldr	r3, [r7, #4]
   17846:	681b      	ldr	r3, [r3, #0]
   17848:	3304      	adds	r3, #4
   1784a:	681b      	ldr	r3, [r3, #0]
   1784c:	687a      	ldr	r2, [r7, #4]
   1784e:	3226      	adds	r2, #38	; 0x26
   17850:	4611      	mov	r1, r2
   17852:	6878      	ldr	r0, [r7, #4]
   17854:	4798      	blx	r3
   17856:	4602      	mov	r2, r0
   17858:	687b      	ldr	r3, [r7, #4]
   1785a:	609a      	str	r2, [r3, #8]
	ReadLastDateTime();
   1785c:	6878      	ldr	r0, [r7, #4]
   1785e:	4b1a      	ldr	r3, [pc, #104]	; (178c8 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x9c>)
   17860:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   17862:	687b      	ldr	r3, [r7, #4]
   17864:	681b      	ldr	r3, [r3, #0]
   17866:	3304      	adds	r3, #4
   17868:	681b      	ldr	r3, [r3, #0]
   1786a:	687a      	ldr	r2, [r7, #4]
   1786c:	322e      	adds	r2, #46	; 0x2e
   1786e:	4611      	mov	r1, r2
   17870:	6878      	ldr	r0, [r7, #4]
   17872:	4798      	blx	r3
   17874:	4602      	mov	r2, r0
   17876:	687b      	ldr	r3, [r7, #4]
   17878:	60da      	str	r2, [r3, #12]
	tick_t diferencia;
	if (lastTimestamp==calendar.nullTimestamp)
   1787a:	687b      	ldr	r3, [r7, #4]
   1787c:	68da      	ldr	r2, [r3, #12]
   1787e:	4b13      	ldr	r3, [pc, #76]	; (178cc <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa0>)
   17880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   17882:	429a      	cmp	r2, r3
   17884:	d103      	bne.n	1788e <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x62>
	{
		diferencia=UPDATE_TIME_MAX*2;
   17886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1788a:	60fb      	str	r3, [r7, #12]
   1788c:	e016      	b.n	178bc <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x90>
	} 
	else
	{
		timeDifference=difftime((time_t)currentTimestamp,(time_t)lastTimestamp);
   1788e:	687b      	ldr	r3, [r7, #4]
   17890:	689b      	ldr	r3, [r3, #8]
   17892:	461a      	mov	r2, r3
   17894:	687b      	ldr	r3, [r7, #4]
   17896:	68db      	ldr	r3, [r3, #12]
   17898:	4619      	mov	r1, r3
   1789a:	4610      	mov	r0, r2
   1789c:	4b0c      	ldr	r3, [pc, #48]	; (178d0 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa4>)
   1789e:	4798      	blx	r3
   178a0:	4603      	mov	r3, r0
   178a2:	460c      	mov	r4, r1
   178a4:	687a      	ldr	r2, [r7, #4]
   178a6:	e9c2 3406 	strd	r3, r4, [r2, #24]
		diferencia=(uint32_t)timeDifference;
   178aa:	687b      	ldr	r3, [r7, #4]
   178ac:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
   178b0:	4a08      	ldr	r2, [pc, #32]	; (178d4 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa8>)
   178b2:	4618      	mov	r0, r3
   178b4:	4621      	mov	r1, r4
   178b6:	4790      	blx	r2
   178b8:	4603      	mov	r3, r0
   178ba:	60fb      	str	r3, [r7, #12]
	}

	return	diferencia;
   178bc:	68fb      	ldr	r3, [r7, #12]
}
   178be:	4618      	mov	r0, r3
   178c0:	3714      	adds	r7, #20
   178c2:	46bd      	mov	sp, r7
   178c4:	bd90      	pop	{r4, r7, pc}
   178c6:	bf00      	nop
   178c8:	00017ac1 	.word	0x00017ac1
   178cc:	2000a250 	.word	0x2000a250
   178d0:	0001c1b9 	.word	0x0001c1b9
   178d4:	0001b865 	.word	0x0001b865

000178d8 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
   178d8:	b5b0      	push	{r4, r5, r7, lr}
   178da:	b082      	sub	sp, #8
   178dc:	af00      	add	r7, sp, #0
   178de:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
   178e0:	4b07      	ldr	r3, [pc, #28]	; (17900 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
   178e2:	6878      	ldr	r0, [r7, #4]
   178e4:	4798      	blx	r3
   178e6:	4602      	mov	r2, r0
   178e8:	460b      	mov	r3, r1
   178ea:	4614      	mov	r4, r2
   178ec:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   178f0:	4623      	mov	r3, r4
   178f2:	462c      	mov	r4, r5
   178f4:	4618      	mov	r0, r3
   178f6:	4621      	mov	r1, r4
   178f8:	3708      	adds	r7, #8
   178fa:	46bd      	mov	sp, r7
   178fc:	bdb0      	pop	{r4, r5, r7, pc}
   178fe:	bf00      	nop
   17900:	0001b239 	.word	0x0001b239

00017904 <_ZN17DateTimeLog_Class14WasInterruptedEv>:

bool	DateTimeLog_Class::WasInterrupted(void){
   17904:	b5b0      	push	{r4, r5, r7, lr}
   17906:	b082      	sub	sp, #8
   17908:	af00      	add	r7, sp, #0
   1790a:	6078      	str	r0, [r7, #4]
	
	if (abs(GetPowerInterrupTime()-UPDATE_TIME_MAX)>UPDATE_ERROR)
   1790c:	6878      	ldr	r0, [r7, #4]
   1790e:	4b12      	ldr	r3, [pc, #72]	; (17958 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x54>)
   17910:	4798      	blx	r3
   17912:	4603      	mov	r3, r0
   17914:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   17918:	4618      	mov	r0, r3
   1791a:	4b10      	ldr	r3, [pc, #64]	; (1795c <_ZN17DateTimeLog_Class14WasInterruptedEv+0x58>)
   1791c:	4798      	blx	r3
   1791e:	2301      	movs	r3, #1
   17920:	461d      	mov	r5, r3
   17922:	4c0f      	ldr	r4, [pc, #60]	; (17960 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x5c>)
   17924:	f04f 0200 	mov.w	r2, #0
   17928:	4b0e      	ldr	r3, [pc, #56]	; (17964 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x60>)
   1792a:	47a0      	blx	r4
   1792c:	4603      	mov	r3, r0
   1792e:	2b00      	cmp	r3, #0
   17930:	d101      	bne.n	17936 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x32>
   17932:	2300      	movs	r3, #0
   17934:	461d      	mov	r5, r3
   17936:	b2eb      	uxtb	r3, r5
   17938:	2b00      	cmp	r3, #0
   1793a:	d003      	beq.n	17944 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x40>
	{
		powerInterrupt=true;
   1793c:	687b      	ldr	r3, [r7, #4]
   1793e:	2201      	movs	r2, #1
   17940:	711a      	strb	r2, [r3, #4]
   17942:	e002      	b.n	1794a <_ZN17DateTimeLog_Class14WasInterruptedEv+0x46>
	} 
	else
	{
		powerInterrupt=false;
   17944:	687b      	ldr	r3, [r7, #4]
   17946:	2200      	movs	r2, #0
   17948:	711a      	strb	r2, [r3, #4]
	}
	return	powerInterrupt;
   1794a:	687b      	ldr	r3, [r7, #4]
   1794c:	791b      	ldrb	r3, [r3, #4]
   1794e:	b2db      	uxtb	r3, r3
}
   17950:	4618      	mov	r0, r3
   17952:	3708      	adds	r7, #8
   17954:	46bd      	mov	sp, r7
   17956:	bdb0      	pop	{r4, r5, r7, pc}
   17958:	0001782d 	.word	0x0001782d
   1795c:	000178d9 	.word	0x000178d9
   17960:	0001b825 	.word	0x0001b825
   17964:	40490000 	.word	0x40490000

00017968 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv>:

uint32_t	DateTimeLog_Class::IncrementMemoryStack(){
   17968:	b590      	push	{r4, r7, lr}
   1796a:	b085      	sub	sp, #20
   1796c:	af00      	add	r7, sp, #0
   1796e:	6078      	str	r0, [r7, #4]
	
	uint32_t r=	eeprom.ReadAddress((uint8_t*)&stackValue,stackAdress,1);
   17970:	687b      	ldr	r3, [r7, #4]
   17972:	f103 0122 	add.w	r1, r3, #34	; 0x22
   17976:	687b      	ldr	r3, [r7, #4]
   17978:	8c1a      	ldrh	r2, [r3, #32]
   1797a:	2301      	movs	r3, #1
   1797c:	480c      	ldr	r0, [pc, #48]	; (179b0 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   1797e:	4c0d      	ldr	r4, [pc, #52]	; (179b4 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x4c>)
   17980:	47a0      	blx	r4
   17982:	60f8      	str	r0, [r7, #12]
	stackValue=(uint16_t)RollStack();
   17984:	6878      	ldr	r0, [r7, #4]
   17986:	4b0c      	ldr	r3, [pc, #48]	; (179b8 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x50>)
   17988:	4798      	blx	r3
   1798a:	4603      	mov	r3, r0
   1798c:	b29a      	uxth	r2, r3
   1798e:	687b      	ldr	r3, [r7, #4]
   17990:	845a      	strh	r2, [r3, #34]	; 0x22
	r=	eeprom.WriteAddress((uint8_t*)&stackValue,stackAdress,1);
   17992:	687b      	ldr	r3, [r7, #4]
   17994:	f103 0122 	add.w	r1, r3, #34	; 0x22
   17998:	687b      	ldr	r3, [r7, #4]
   1799a:	8c1a      	ldrh	r2, [r3, #32]
   1799c:	2301      	movs	r3, #1
   1799e:	4804      	ldr	r0, [pc, #16]	; (179b0 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   179a0:	4c06      	ldr	r4, [pc, #24]	; (179bc <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x54>)
   179a2:	47a0      	blx	r4
   179a4:	60f8      	str	r0, [r7, #12]
	return r;
   179a6:	68fb      	ldr	r3, [r7, #12]
}
   179a8:	4618      	mov	r0, r3
   179aa:	3714      	adds	r7, #20
   179ac:	46bd      	mov	sp, r7
   179ae:	bd90      	pop	{r4, r7, pc}
   179b0:	20009f7c 	.word	0x20009f7c
   179b4:	0001650d 	.word	0x0001650d
   179b8:	000179c1 	.word	0x000179c1
   179bc:	00016451 	.word	0x00016451

000179c0 <_ZN17DateTimeLog_Class9RollStackEv>:
 uint8_t DateTimeLog_Class::RollStack(void)
 {
   179c0:	b480      	push	{r7}
   179c2:	b083      	sub	sp, #12
   179c4:	af00      	add	r7, sp, #0
   179c6:	6078      	str	r0, [r7, #4]
	 return (uint8_t)(stackValue +1 ) % AT24MAC_BUFFER_SIZE;
   179c8:	687b      	ldr	r3, [r7, #4]
   179ca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   179cc:	b2db      	uxtb	r3, r3
   179ce:	3301      	adds	r3, #1
   179d0:	b2db      	uxtb	r3, r3
   179d2:	f003 030f 	and.w	r3, r3, #15
   179d6:	b2db      	uxtb	r3, r3
 }
   179d8:	4618      	mov	r0, r3
   179da:	370c      	adds	r7, #12
   179dc:	46bd      	mov	sp, r7
   179de:	bc80      	pop	{r7}
   179e0:	4770      	bx	lr
	...

000179e4 <_ZN17DateTimeLog_Class14ReadStackValueEv>:
 
 uint8_t	DateTimeLog_Class::ReadStackValue(void){
   179e4:	b590      	push	{r4, r7, lr}
   179e6:	b085      	sub	sp, #20
   179e8:	af00      	add	r7, sp, #0
   179ea:	6078      	str	r0, [r7, #4]
	 uint8_t s;
	eeprom.ReadAddress(&s,stackAdress,1);
   179ec:	687b      	ldr	r3, [r7, #4]
   179ee:	8c1a      	ldrh	r2, [r3, #32]
   179f0:	f107 010f 	add.w	r1, r7, #15
   179f4:	2301      	movs	r3, #1
   179f6:	4804      	ldr	r0, [pc, #16]	; (17a08 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x24>)
   179f8:	4c04      	ldr	r4, [pc, #16]	; (17a0c <_ZN17DateTimeLog_Class14ReadStackValueEv+0x28>)
   179fa:	47a0      	blx	r4
	 return	s;
   179fc:	7bfb      	ldrb	r3, [r7, #15]
 }
   179fe:	4618      	mov	r0, r3
   17a00:	3714      	adds	r7, #20
   17a02:	46bd      	mov	sp, r7
   17a04:	bd90      	pop	{r4, r7, pc}
   17a06:	bf00      	nop
   17a08:	20009f7c 	.word	0x20009f7c
   17a0c:	0001650d 	.word	0x0001650d

00017a10 <_ZN17DateTimeLog_Class23SetCalendarStackAddressEm>:
 
 uint16_t	DateTimeLog_Class::SetCalendarStackAddress(uint32_t add){
   17a10:	b480      	push	{r7}
   17a12:	b083      	sub	sp, #12
   17a14:	af00      	add	r7, sp, #0
   17a16:	6078      	str	r0, [r7, #4]
   17a18:	6039      	str	r1, [r7, #0]
	 stackAdress=(uint16_t)(add&0xffff);
   17a1a:	683b      	ldr	r3, [r7, #0]
   17a1c:	b29a      	uxth	r2, r3
   17a1e:	687b      	ldr	r3, [r7, #4]
   17a20:	841a      	strh	r2, [r3, #32]
	 return	stackAdress;
   17a22:	687b      	ldr	r3, [r7, #4]
   17a24:	8c1b      	ldrh	r3, [r3, #32]
 }
   17a26:	4618      	mov	r0, r3
   17a28:	370c      	adds	r7, #12
   17a2a:	46bd      	mov	sp, r7
   17a2c:	bc80      	pop	{r7}
   17a2e:	4770      	bx	lr

00017a30 <_ZN17DateTimeLog_Class18SetCalendarAddressEm>:
uint16_t	DateTimeLog_Class::SetCalendarAddress(uint32_t add){
   17a30:	b480      	push	{r7}
   17a32:	b083      	sub	sp, #12
   17a34:	af00      	add	r7, sp, #0
   17a36:	6078      	str	r0, [r7, #4]
   17a38:	6039      	str	r1, [r7, #0]
	dataTimeLogsAddress=(uint16_t)(add&0xffff);
   17a3a:	683b      	ldr	r3, [r7, #0]
   17a3c:	b29a      	uxth	r2, r3
   17a3e:	687b      	ldr	r3, [r7, #4]
   17a40:	849a      	strh	r2, [r3, #36]	; 0x24
	return	dataTimeLogsAddress;
   17a42:	687b      	ldr	r3, [r7, #4]
   17a44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
   17a46:	4618      	mov	r0, r3
   17a48:	370c      	adds	r7, #12
   17a4a:	46bd      	mov	sp, r7
   17a4c:	bc80      	pop	{r7}
   17a4e:	4770      	bx	lr

00017a50 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv>:
uint32_t	DateTimeLog_Class::SaveCurrentDateTime(void){
   17a50:	b590      	push	{r4, r7, lr}
   17a52:	b085      	sub	sp, #20
   17a54:	af00      	add	r7, sp, #0
   17a56:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   17a58:	6878      	ldr	r0, [r7, #4]
   17a5a:	4b15      	ldr	r3, [pc, #84]	; (17ab0 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x60>)
   17a5c:	4798      	blx	r3
   17a5e:	4603      	mov	r3, r0
   17a60:	b29a      	uxth	r2, r3
   17a62:	687b      	ldr	r3, [r7, #4]
   17a64:	845a      	strh	r2, [r3, #34]	; 0x22
	GetDateTime(&dateTime);
   17a66:	687b      	ldr	r3, [r7, #4]
   17a68:	681b      	ldr	r3, [r3, #0]
   17a6a:	681b      	ldr	r3, [r3, #0]
   17a6c:	687a      	ldr	r2, [r7, #4]
   17a6e:	3226      	adds	r2, #38	; 0x26
   17a70:	4611      	mov	r1, r2
   17a72:	6878      	ldr	r0, [r7, #4]
   17a74:	4798      	blx	r3
	handler=(PTR_DATE_TIME)(&dateTime);
   17a76:	687b      	ldr	r3, [r7, #4]
   17a78:	3326      	adds	r3, #38	; 0x26
   17a7a:	461a      	mov	r2, r3
   17a7c:	687b      	ldr	r3, [r7, #4]
   17a7e:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t	w= eeprom.WriteAddress((uint8_t*)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   17a80:	687b      	ldr	r3, [r7, #4]
   17a82:	6b99      	ldr	r1, [r3, #56]	; 0x38
   17a84:	687b      	ldr	r3, [r7, #4]
   17a86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   17a88:	b2da      	uxtb	r2, r3
   17a8a:	687b      	ldr	r3, [r7, #4]
   17a8c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   17a8e:	b2db      	uxtb	r3, r3
   17a90:	4413      	add	r3, r2
   17a92:	b2da      	uxtb	r2, r3
   17a94:	2308      	movs	r3, #8
   17a96:	4807      	ldr	r0, [pc, #28]	; (17ab4 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x64>)
   17a98:	4c07      	ldr	r4, [pc, #28]	; (17ab8 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x68>)
   17a9a:	47a0      	blx	r4
   17a9c:	60f8      	str	r0, [r7, #12]
	IncrementMemoryStack();
   17a9e:	6878      	ldr	r0, [r7, #4]
   17aa0:	4b06      	ldr	r3, [pc, #24]	; (17abc <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x6c>)
   17aa2:	4798      	blx	r3
	return	w;
   17aa4:	68fb      	ldr	r3, [r7, #12]
}
   17aa6:	4618      	mov	r0, r3
   17aa8:	3714      	adds	r7, #20
   17aaa:	46bd      	mov	sp, r7
   17aac:	bd90      	pop	{r4, r7, pc}
   17aae:	bf00      	nop
   17ab0:	000179e5 	.word	0x000179e5
   17ab4:	20009f7c 	.word	0x20009f7c
   17ab8:	000162f1 	.word	0x000162f1
   17abc:	00017969 	.word	0x00017969

00017ac0 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv>:

uint32_t	DateTimeLog_Class::ReadLastDateTime(void){
   17ac0:	b590      	push	{r4, r7, lr}
   17ac2:	b085      	sub	sp, #20
   17ac4:	af00      	add	r7, sp, #0
   17ac6:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   17ac8:	6878      	ldr	r0, [r7, #4]
   17aca:	4b0f      	ldr	r3, [pc, #60]	; (17b08 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x48>)
   17acc:	4798      	blx	r3
   17ace:	4603      	mov	r3, r0
   17ad0:	b29a      	uxth	r2, r3
   17ad2:	687b      	ldr	r3, [r7, #4]
   17ad4:	845a      	strh	r2, [r3, #34]	; 0x22
	handler=(PTR_DATE_TIME)(&lastDateTime);
   17ad6:	687b      	ldr	r3, [r7, #4]
   17ad8:	332e      	adds	r3, #46	; 0x2e
   17ada:	461a      	mov	r2, r3
   17adc:	687b      	ldr	r3, [r7, #4]
   17ade:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t r=	eeprom.ReadAddress((uint8_t *)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   17ae0:	687b      	ldr	r3, [r7, #4]
   17ae2:	6b99      	ldr	r1, [r3, #56]	; 0x38
   17ae4:	687b      	ldr	r3, [r7, #4]
   17ae6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   17ae8:	b2da      	uxtb	r2, r3
   17aea:	687b      	ldr	r3, [r7, #4]
   17aec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   17aee:	b2db      	uxtb	r3, r3
   17af0:	4413      	add	r3, r2
   17af2:	b2da      	uxtb	r2, r3
   17af4:	2308      	movs	r3, #8
   17af6:	4805      	ldr	r0, [pc, #20]	; (17b0c <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x4c>)
   17af8:	4c05      	ldr	r4, [pc, #20]	; (17b10 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x50>)
   17afa:	47a0      	blx	r4
   17afc:	60f8      	str	r0, [r7, #12]
	return	r;
   17afe:	68fb      	ldr	r3, [r7, #12]
}
   17b00:	4618      	mov	r0, r3
   17b02:	3714      	adds	r7, #20
   17b04:	46bd      	mov	sp, r7
   17b06:	bd90      	pop	{r4, r7, pc}
   17b08:	000179e5 	.word	0x000179e5
   17b0c:	20009f7c 	.word	0x20009f7c
   17b10:	00016485 	.word	0x00016485

00017b14 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   17b14:	b480      	push	{r7}
   17b16:	b083      	sub	sp, #12
   17b18:	af00      	add	r7, sp, #0
   17b1a:	6078      	str	r0, [r7, #4]
   17b1c:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   17b1e:	687b      	ldr	r3, [r7, #4]
   17b20:	683a      	ldr	r2, [r7, #0]
   17b22:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
   17b24:	4a06      	ldr	r2, [pc, #24]	; (17b40 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
   17b26:	687b      	ldr	r3, [r7, #4]
   17b28:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   17b2a:	687b      	ldr	r3, [r7, #4]
   17b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17b30:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   17b32:	687b      	ldr	r3, [r7, #4]
   17b34:	4618      	mov	r0, r3
   17b36:	370c      	adds	r7, #12
   17b38:	46bd      	mov	sp, r7
   17b3a:	bc80      	pop	{r7}
   17b3c:	4770      	bx	lr
   17b3e:	bf00      	nop
   17b40:	2000a2f8 	.word	0x2000a2f8

00017b44 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   17b44:	b480      	push	{r7}
   17b46:	b083      	sub	sp, #12
   17b48:	af00      	add	r7, sp, #0
   17b4a:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   17b4c:	687b      	ldr	r3, [r7, #4]
   17b4e:	2200      	movs	r2, #0
   17b50:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   17b52:	687b      	ldr	r3, [r7, #4]
   17b54:	4618      	mov	r0, r3
   17b56:	370c      	adds	r7, #12
   17b58:	46bd      	mov	sp, r7
   17b5a:	bc80      	pop	{r7}
   17b5c:	4770      	bx	lr
	...

00017b60 <_ZL9InitArrayv>:


static void InitArray(){
   17b60:	b480      	push	{r7}
   17b62:	b083      	sub	sp, #12
   17b64:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
   17b66:	2301      	movs	r3, #1
   17b68:	607b      	str	r3, [r7, #4]
   17b6a:	687b      	ldr	r3, [r7, #4]
   17b6c:	2b0f      	cmp	r3, #15
   17b6e:	dc26      	bgt.n	17bbe <_ZL9InitArrayv+0x5e>
	{
		taskArray[i].elem.next = (list_element*)NULL;
   17b70:	4917      	ldr	r1, [pc, #92]	; (17bd0 <_ZL9InitArrayv+0x70>)
   17b72:	687a      	ldr	r2, [r7, #4]
   17b74:	4613      	mov	r3, r2
   17b76:	009b      	lsls	r3, r3, #2
   17b78:	4413      	add	r3, r2
   17b7a:	009b      	lsls	r3, r3, #2
   17b7c:	440b      	add	r3, r1
   17b7e:	2200      	movs	r2, #0
   17b80:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
   17b82:	4913      	ldr	r1, [pc, #76]	; (17bd0 <_ZL9InitArrayv+0x70>)
   17b84:	687a      	ldr	r2, [r7, #4]
   17b86:	4613      	mov	r3, r2
   17b88:	009b      	lsls	r3, r3, #2
   17b8a:	4413      	add	r3, r2
   17b8c:	009b      	lsls	r3, r3, #2
   17b8e:	440b      	add	r3, r1
   17b90:	330c      	adds	r3, #12
   17b92:	2200      	movs	r2, #0
   17b94:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
   17b96:	687b      	ldr	r3, [r7, #4]
   17b98:	1e5a      	subs	r2, r3, #1
   17b9a:	6879      	ldr	r1, [r7, #4]
   17b9c:	460b      	mov	r3, r1
   17b9e:	009b      	lsls	r3, r3, #2
   17ba0:	440b      	add	r3, r1
   17ba2:	009b      	lsls	r3, r3, #2
   17ba4:	490a      	ldr	r1, [pc, #40]	; (17bd0 <_ZL9InitArrayv+0x70>)
   17ba6:	4419      	add	r1, r3
   17ba8:	4809      	ldr	r0, [pc, #36]	; (17bd0 <_ZL9InitArrayv+0x70>)
   17baa:	4613      	mov	r3, r2
   17bac:	009b      	lsls	r3, r3, #2
   17bae:	4413      	add	r3, r2
   17bb0:	009b      	lsls	r3, r3, #2
   17bb2:	4403      	add	r3, r0
   17bb4:	6019      	str	r1, [r3, #0]
	for (int i=1; i<TASK_NUMBER	; i++)
   17bb6:	687b      	ldr	r3, [r7, #4]
   17bb8:	3301      	adds	r3, #1
   17bba:	607b      	str	r3, [r7, #4]
   17bbc:	e7d5      	b.n	17b6a <_ZL9InitArrayv+0xa>
	}
	arrayInitiated=true;
   17bbe:	4b05      	ldr	r3, [pc, #20]	; (17bd4 <_ZL9InitArrayv+0x74>)
   17bc0:	2201      	movs	r2, #1
   17bc2:	701a      	strb	r2, [r3, #0]
		
}
   17bc4:	bf00      	nop
   17bc6:	370c      	adds	r7, #12
   17bc8:	46bd      	mov	sp, r7
   17bca:	bc80      	pop	{r7}
   17bcc:	4770      	bx	lr
   17bce:	bf00      	nop
   17bd0:	2000a2fc 	.word	0x2000a2fc
   17bd4:	2000a43c 	.word	0x2000a43c

00017bd8 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
   17bd8:	b580      	push	{r7, lr}
   17bda:	b082      	sub	sp, #8
   17bdc:	af00      	add	r7, sp, #0
   17bde:	6078      	str	r0, [r7, #4]
	ticks=0;
   17be0:	687b      	ldr	r3, [r7, #4]
   17be2:	2200      	movs	r2, #0
   17be4:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
   17be6:	4b0d      	ldr	r3, [pc, #52]	; (17c1c <_ZN11Timer_Class4InitEv+0x44>)
   17be8:	781b      	ldrb	r3, [r3, #0]
   17bea:	f083 0301 	eor.w	r3, r3, #1
   17bee:	b2db      	uxtb	r3, r3
   17bf0:	2b00      	cmp	r3, #0
   17bf2:	d001      	beq.n	17bf8 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
   17bf4:	4b0a      	ldr	r3, [pc, #40]	; (17c20 <_ZN11Timer_Class4InitEv+0x48>)
   17bf6:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=start()==ERR_NONE;
   17bf8:	6878      	ldr	r0, [r7, #4]
   17bfa:	4b0a      	ldr	r3, [pc, #40]	; (17c24 <_ZN11Timer_Class4InitEv+0x4c>)
   17bfc:	4798      	blx	r3
   17bfe:	4603      	mov	r3, r0
   17c00:	2b00      	cmp	r3, #0
   17c02:	bf0c      	ite	eq
   17c04:	2301      	moveq	r3, #1
   17c06:	2300      	movne	r3, #0
   17c08:	b2da      	uxtb	r2, r3
   17c0a:	687b      	ldr	r3, [r7, #4]
   17c0c:	709a      	strb	r2, [r3, #2]
	return isOK;
   17c0e:	687b      	ldr	r3, [r7, #4]
   17c10:	789b      	ldrb	r3, [r3, #2]
   17c12:	b2db      	uxtb	r3, r3
}
   17c14:	4618      	mov	r0, r3
   17c16:	3708      	adds	r7, #8
   17c18:	46bd      	mov	sp, r7
   17c1a:	bd80      	pop	{r7, pc}
   17c1c:	2000a43c 	.word	0x2000a43c
   17c20:	00017b61 	.word	0x00017b61
   17c24:	00017c29 	.word	0x00017c29

00017c28 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
   17c28:	b580      	push	{r7, lr}
   17c2a:	b084      	sub	sp, #16
   17c2c:	af00      	add	r7, sp, #0
   17c2e:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   17c30:	687b      	ldr	r3, [r7, #4]
   17c32:	68db      	ldr	r3, [r3, #12]
   17c34:	4618      	mov	r0, r3
   17c36:	4b04      	ldr	r3, [pc, #16]	; (17c48 <_ZN11Timer_Class5startEv+0x20>)
   17c38:	4798      	blx	r3
   17c3a:	60f8      	str	r0, [r7, #12]
	return status;
   17c3c:	68fb      	ldr	r3, [r7, #12]
	
}
   17c3e:	4618      	mov	r0, r3
   17c40:	3710      	adds	r7, #16
   17c42:	46bd      	mov	sp, r7
   17c44:	bd80      	pop	{r7, pc}
   17c46:	bf00      	nop
   17c48:	000073ad 	.word	0x000073ad

00017c4c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   17c4c:	b580      	push	{r7, lr}
   17c4e:	b086      	sub	sp, #24
   17c50:	af00      	add	r7, sp, #0
   17c52:	60f8      	str	r0, [r7, #12]
   17c54:	60b9      	str	r1, [r7, #8]
   17c56:	607a      	str	r2, [r7, #4]
   17c58:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   17c5a:	68f8      	ldr	r0, [r7, #12]
   17c5c:	4b0d      	ldr	r3, [pc, #52]	; (17c94 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   17c5e:	4798      	blx	r3
	task->interval = interval;
   17c60:	68fb      	ldr	r3, [r7, #12]
   17c62:	699b      	ldr	r3, [r3, #24]
   17c64:	687a      	ldr	r2, [r7, #4]
   17c66:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   17c68:	68fb      	ldr	r3, [r7, #12]
   17c6a:	699b      	ldr	r3, [r3, #24]
   17c6c:	68ba      	ldr	r2, [r7, #8]
   17c6e:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   17c70:	68fb      	ldr	r3, [r7, #12]
   17c72:	699b      	ldr	r3, [r3, #24]
   17c74:	78fa      	ldrb	r2, [r7, #3]
   17c76:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   17c78:	68fb      	ldr	r3, [r7, #12]
   17c7a:	68da      	ldr	r2, [r3, #12]
   17c7c:	68fb      	ldr	r3, [r7, #12]
   17c7e:	699b      	ldr	r3, [r3, #24]
   17c80:	4619      	mov	r1, r3
   17c82:	4610      	mov	r0, r2
   17c84:	4b04      	ldr	r3, [pc, #16]	; (17c98 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   17c86:	4798      	blx	r3
   17c88:	6178      	str	r0, [r7, #20]
	
	return status;
   17c8a:	697b      	ldr	r3, [r7, #20]
}
   17c8c:	4618      	mov	r0, r3
   17c8e:	3718      	adds	r7, #24
   17c90:	46bd      	mov	sp, r7
   17c92:	bd80      	pop	{r7, pc}
   17c94:	00017dd1 	.word	0x00017dd1
   17c98:	00007481 	.word	0x00007481

00017c9c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   17c9c:	b580      	push	{r7, lr}
   17c9e:	b086      	sub	sp, #24
   17ca0:	af00      	add	r7, sp, #0
   17ca2:	60f8      	str	r0, [r7, #12]
   17ca4:	60b9      	str	r1, [r7, #8]
   17ca6:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
   17ca8:	687a      	ldr	r2, [r7, #4]
   17caa:	68b9      	ldr	r1, [r7, #8]
   17cac:	68f8      	ldr	r0, [r7, #12]
   17cae:	4b0c      	ldr	r3, [pc, #48]	; (17ce0 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
   17cb0:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
   17cb2:	68fb      	ldr	r3, [r7, #12]
   17cb4:	68db      	ldr	r3, [r3, #12]
   17cb6:	681b      	ldr	r3, [r3, #0]
   17cb8:	699b      	ldr	r3, [r3, #24]
   17cba:	68fa      	ldr	r2, [r7, #12]
   17cbc:	68d2      	ldr	r2, [r2, #12]
   17cbe:	3204      	adds	r2, #4
   17cc0:	4610      	mov	r0, r2
   17cc2:	4798      	blx	r3
   17cc4:	4603      	mov	r3, r0
   17cc6:	2b00      	cmp	r3, #0
   17cc8:	d105      	bne.n	17cd6 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
   17cca:	68fb      	ldr	r3, [r7, #12]
   17ccc:	68db      	ldr	r3, [r3, #12]
   17cce:	4618      	mov	r0, r3
   17cd0:	4b04      	ldr	r3, [pc, #16]	; (17ce4 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
   17cd2:	4798      	blx	r3
   17cd4:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
   17cd6:	697b      	ldr	r3, [r7, #20]
}
   17cd8:	4618      	mov	r0, r3
   17cda:	3718      	adds	r7, #24
   17cdc:	46bd      	mov	sp, r7
   17cde:	bd80      	pop	{r7, pc}
   17ce0:	00017ce9 	.word	0x00017ce9
   17ce4:	000073ad 	.word	0x000073ad

00017ce8 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   17ce8:	b590      	push	{r4, r7, lr}
   17cea:	b087      	sub	sp, #28
   17cec:	af00      	add	r7, sp, #0
   17cee:	60f8      	str	r0, [r7, #12]
   17cf0:	60b9      	str	r1, [r7, #8]
   17cf2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   17cf4:	2301      	movs	r3, #1
   17cf6:	687a      	ldr	r2, [r7, #4]
   17cf8:	68b9      	ldr	r1, [r7, #8]
   17cfa:	68f8      	ldr	r0, [r7, #12]
   17cfc:	4c03      	ldr	r4, [pc, #12]	; (17d0c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
   17cfe:	47a0      	blx	r4
   17d00:	6178      	str	r0, [r7, #20]
		return status;
   17d02:	697b      	ldr	r3, [r7, #20]
}
   17d04:	4618      	mov	r0, r3
   17d06:	371c      	adds	r7, #28
   17d08:	46bd      	mov	sp, r7
   17d0a:	bd90      	pop	{r4, r7, pc}
   17d0c:	00017c4d 	.word	0x00017c4d

00017d10 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
   17d10:	b580      	push	{r7, lr}
   17d12:	b082      	sub	sp, #8
   17d14:	af00      	add	r7, sp, #0
   17d16:	6078      	str	r0, [r7, #4]
   17d18:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   17d1a:	6839      	ldr	r1, [r7, #0]
   17d1c:	6878      	ldr	r0, [r7, #4]
   17d1e:	4b0f      	ldr	r3, [pc, #60]	; (17d5c <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   17d20:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   17d22:	687b      	ldr	r3, [r7, #4]
   17d24:	68db      	ldr	r3, [r3, #12]
   17d26:	f103 0218 	add.w	r2, r3, #24
   17d2a:	687b      	ldr	r3, [r7, #4]
   17d2c:	699b      	ldr	r3, [r3, #24]
   17d2e:	4619      	mov	r1, r3
   17d30:	4610      	mov	r0, r2
   17d32:	4b0b      	ldr	r3, [pc, #44]	; (17d60 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   17d34:	4798      	blx	r3
   17d36:	4603      	mov	r3, r0
   17d38:	2b00      	cmp	r3, #0
   17d3a:	d007      	beq.n	17d4c <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   17d3c:	687b      	ldr	r3, [r7, #4]
   17d3e:	68da      	ldr	r2, [r3, #12]
   17d40:	687b      	ldr	r3, [r7, #4]
   17d42:	699b      	ldr	r3, [r3, #24]
   17d44:	4619      	mov	r1, r3
   17d46:	4610      	mov	r0, r2
   17d48:	4b06      	ldr	r3, [pc, #24]	; (17d64 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   17d4a:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   17d4c:	687b      	ldr	r3, [r7, #4]
   17d4e:	699b      	ldr	r3, [r3, #24]
   17d50:	2200      	movs	r2, #0
   17d52:	60da      	str	r2, [r3, #12]
}
   17d54:	bf00      	nop
   17d56:	3708      	adds	r7, #8
   17d58:	46bd      	mov	sp, r7
   17d5a:	bd80      	pop	{r7, pc}
   17d5c:	00017e31 	.word	0x00017e31
   17d60:	0000816d 	.word	0x0000816d
   17d64:	00007585 	.word	0x00007585

00017d68 <_ZN11Timer_Class9Get_ticksEv>:



uint32_t	Timer_Class::Get_ticks(void){
   17d68:	b480      	push	{r7}
   17d6a:	b083      	sub	sp, #12
   17d6c:	af00      	add	r7, sp, #0
   17d6e:	6078      	str	r0, [r7, #4]
	
		return ticks;
   17d70:	687b      	ldr	r3, [r7, #4]
   17d72:	689b      	ldr	r3, [r3, #8]
}
   17d74:	4618      	mov	r0, r3
   17d76:	370c      	adds	r7, #12
   17d78:	46bd      	mov	sp, r7
   17d7a:	bc80      	pop	{r7}
   17d7c:	4770      	bx	lr
	...

00017d80 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   17d80:	b590      	push	{r4, r7, lr}
   17d82:	b087      	sub	sp, #28
   17d84:	af00      	add	r7, sp, #0
   17d86:	60f8      	str	r0, [r7, #12]
   17d88:	60b9      	str	r1, [r7, #8]
   17d8a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   17d8c:	2300      	movs	r3, #0
   17d8e:	687a      	ldr	r2, [r7, #4]
   17d90:	68b9      	ldr	r1, [r7, #8]
   17d92:	68f8      	ldr	r0, [r7, #12]
   17d94:	4c0c      	ldr	r4, [pc, #48]	; (17dc8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   17d96:	47a0      	blx	r4
   17d98:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   17d9a:	68fb      	ldr	r3, [r7, #12]
   17d9c:	68db      	ldr	r3, [r3, #12]
   17d9e:	681b      	ldr	r3, [r3, #0]
   17da0:	699b      	ldr	r3, [r3, #24]
   17da2:	68fa      	ldr	r2, [r7, #12]
   17da4:	68d2      	ldr	r2, [r2, #12]
   17da6:	3204      	adds	r2, #4
   17da8:	4610      	mov	r0, r2
   17daa:	4798      	blx	r3
   17dac:	4603      	mov	r3, r0
   17dae:	2b00      	cmp	r3, #0
   17db0:	d105      	bne.n	17dbe <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   17db2:	68fb      	ldr	r3, [r7, #12]
   17db4:	68db      	ldr	r3, [r3, #12]
   17db6:	4618      	mov	r0, r3
   17db8:	4b04      	ldr	r3, [pc, #16]	; (17dcc <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   17dba:	4798      	blx	r3
   17dbc:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   17dbe:	697b      	ldr	r3, [r7, #20]
}
   17dc0:	4618      	mov	r0, r3
   17dc2:	371c      	adds	r7, #28
   17dc4:	46bd      	mov	sp, r7
   17dc6:	bd90      	pop	{r4, r7, pc}
   17dc8:	00017c4d 	.word	0x00017c4d
   17dcc:	000073ad 	.word	0x000073ad

00017dd0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   17dd0:	b480      	push	{r7}
   17dd2:	b085      	sub	sp, #20
   17dd4:	af00      	add	r7, sp, #0
   17dd6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   17dd8:	2300      	movs	r3, #0
   17dda:	73fb      	strb	r3, [r7, #15]
   17ddc:	7bfb      	ldrb	r3, [r7, #15]
   17dde:	2b0f      	cmp	r3, #15
   17de0:	dc1c      	bgt.n	17e1c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
   17de2:	7bfb      	ldrb	r3, [r7, #15]
   17de4:	f003 030f 	and.w	r3, r3, #15
   17de8:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   17dea:	7bba      	ldrb	r2, [r7, #14]
   17dec:	490f      	ldr	r1, [pc, #60]	; (17e2c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   17dee:	4613      	mov	r3, r2
   17df0:	009b      	lsls	r3, r3, #2
   17df2:	4413      	add	r3, r2
   17df4:	009b      	lsls	r3, r3, #2
   17df6:	440b      	add	r3, r1
   17df8:	330c      	adds	r3, #12
   17dfa:	681b      	ldr	r3, [r3, #0]
   17dfc:	2b00      	cmp	r3, #0
   17dfe:	d109      	bne.n	17e14 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
   17e00:	7bba      	ldrb	r2, [r7, #14]
   17e02:	4613      	mov	r3, r2
   17e04:	009b      	lsls	r3, r3, #2
   17e06:	4413      	add	r3, r2
   17e08:	009b      	lsls	r3, r3, #2
   17e0a:	4a08      	ldr	r2, [pc, #32]	; (17e2c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   17e0c:	441a      	add	r2, r3
   17e0e:	687b      	ldr	r3, [r7, #4]
   17e10:	619a      	str	r2, [r3, #24]
			return;
   17e12:	e006      	b.n	17e22 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   17e14:	7bfb      	ldrb	r3, [r7, #15]
   17e16:	3301      	adds	r3, #1
   17e18:	73fb      	strb	r3, [r7, #15]
   17e1a:	e7df      	b.n	17ddc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   17e1c:	687b      	ldr	r3, [r7, #4]
   17e1e:	4a03      	ldr	r2, [pc, #12]	; (17e2c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   17e20:	619a      	str	r2, [r3, #24]

}
   17e22:	3714      	adds	r7, #20
   17e24:	46bd      	mov	sp, r7
   17e26:	bc80      	pop	{r7}
   17e28:	4770      	bx	lr
   17e2a:	bf00      	nop
   17e2c:	2000a2fc 	.word	0x2000a2fc

00017e30 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   17e30:	b480      	push	{r7}
   17e32:	b085      	sub	sp, #20
   17e34:	af00      	add	r7, sp, #0
   17e36:	6078      	str	r0, [r7, #4]
   17e38:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   17e3a:	2300      	movs	r3, #0
   17e3c:	73fb      	strb	r3, [r7, #15]
   17e3e:	7bfb      	ldrb	r3, [r7, #15]
   17e40:	2b0f      	cmp	r3, #15
   17e42:	dc19      	bgt.n	17e78 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   17e44:	7bfa      	ldrb	r2, [r7, #15]
   17e46:	490f      	ldr	r1, [pc, #60]	; (17e84 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   17e48:	4613      	mov	r3, r2
   17e4a:	009b      	lsls	r3, r3, #2
   17e4c:	4413      	add	r3, r2
   17e4e:	009b      	lsls	r3, r3, #2
   17e50:	440b      	add	r3, r1
   17e52:	330c      	adds	r3, #12
   17e54:	681a      	ldr	r2, [r3, #0]
   17e56:	683b      	ldr	r3, [r7, #0]
   17e58:	429a      	cmp	r2, r3
   17e5a:	d109      	bne.n	17e70 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   17e5c:	7bfa      	ldrb	r2, [r7, #15]
   17e5e:	4613      	mov	r3, r2
   17e60:	009b      	lsls	r3, r3, #2
   17e62:	4413      	add	r3, r2
   17e64:	009b      	lsls	r3, r3, #2
   17e66:	4a07      	ldr	r2, [pc, #28]	; (17e84 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   17e68:	441a      	add	r2, r3
   17e6a:	687b      	ldr	r3, [r7, #4]
   17e6c:	619a      	str	r2, [r3, #24]
			return;
   17e6e:	e004      	b.n	17e7a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   17e70:	7bfb      	ldrb	r3, [r7, #15]
   17e72:	3301      	adds	r3, #1
   17e74:	73fb      	strb	r3, [r7, #15]
   17e76:	e7e2      	b.n	17e3e <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   17e78:	bf00      	nop
}
   17e7a:	3714      	adds	r7, #20
   17e7c:	46bd      	mov	sp, r7
   17e7e:	bc80      	pop	{r7}
   17e80:	4770      	bx	lr
   17e82:	bf00      	nop
   17e84:	2000a2fc 	.word	0x2000a2fc

00017e88 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
   17e88:	b580      	push	{r7, lr}
   17e8a:	b082      	sub	sp, #8
   17e8c:	af00      	add	r7, sp, #0
   17e8e:	6078      	str	r0, [r7, #4]
   17e90:	6039      	str	r1, [r7, #0]
   17e92:	687b      	ldr	r3, [r7, #4]
   17e94:	2b01      	cmp	r3, #1
   17e96:	d131      	bne.n	17efc <_Z41__static_initialization_and_destruction_0ii+0x74>
   17e98:	683b      	ldr	r3, [r7, #0]
   17e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17e9e:	4293      	cmp	r3, r2
   17ea0:	d12c      	bne.n	17efc <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   17ea2:	4918      	ldr	r1, [pc, #96]	; (17f04 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   17ea4:	4818      	ldr	r0, [pc, #96]	; (17f08 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   17ea6:	4b19      	ldr	r3, [pc, #100]	; (17f0c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17ea8:	4798      	blx	r3
   17eaa:	4a19      	ldr	r2, [pc, #100]	; (17f10 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17eac:	4919      	ldr	r1, [pc, #100]	; (17f14 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17eae:	4816      	ldr	r0, [pc, #88]	; (17f08 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   17eb0:	4b19      	ldr	r3, [pc, #100]	; (17f18 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17eb2:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
   17eb4:	4919      	ldr	r1, [pc, #100]	; (17f1c <_Z41__static_initialization_and_destruction_0ii+0x94>)
   17eb6:	481a      	ldr	r0, [pc, #104]	; (17f20 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   17eb8:	4b14      	ldr	r3, [pc, #80]	; (17f0c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17eba:	4798      	blx	r3
   17ebc:	4a14      	ldr	r2, [pc, #80]	; (17f10 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17ebe:	4915      	ldr	r1, [pc, #84]	; (17f14 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17ec0:	4817      	ldr	r0, [pc, #92]	; (17f20 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   17ec2:	4b15      	ldr	r3, [pc, #84]	; (17f18 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17ec4:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
   17ec6:	4917      	ldr	r1, [pc, #92]	; (17f24 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
   17ec8:	4817      	ldr	r0, [pc, #92]	; (17f28 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   17eca:	4b10      	ldr	r3, [pc, #64]	; (17f0c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17ecc:	4798      	blx	r3
   17ece:	4a10      	ldr	r2, [pc, #64]	; (17f10 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17ed0:	4910      	ldr	r1, [pc, #64]	; (17f14 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17ed2:	4815      	ldr	r0, [pc, #84]	; (17f28 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   17ed4:	4b10      	ldr	r3, [pc, #64]	; (17f18 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17ed6:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
   17ed8:	4914      	ldr	r1, [pc, #80]	; (17f2c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
   17eda:	4815      	ldr	r0, [pc, #84]	; (17f30 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   17edc:	4b0b      	ldr	r3, [pc, #44]	; (17f0c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17ede:	4798      	blx	r3
   17ee0:	4a0b      	ldr	r2, [pc, #44]	; (17f10 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17ee2:	490c      	ldr	r1, [pc, #48]	; (17f14 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17ee4:	4812      	ldr	r0, [pc, #72]	; (17f30 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   17ee6:	4b0c      	ldr	r3, [pc, #48]	; (17f18 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17ee8:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
   17eea:	4912      	ldr	r1, [pc, #72]	; (17f34 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   17eec:	4812      	ldr	r0, [pc, #72]	; (17f38 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   17eee:	4b07      	ldr	r3, [pc, #28]	; (17f0c <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17ef0:	4798      	blx	r3
   17ef2:	4a07      	ldr	r2, [pc, #28]	; (17f10 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   17ef4:	4907      	ldr	r1, [pc, #28]	; (17f14 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17ef6:	4810      	ldr	r0, [pc, #64]	; (17f38 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   17ef8:	4b07      	ldr	r3, [pc, #28]	; (17f18 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17efa:	4798      	blx	r3
   17efc:	bf00      	nop
   17efe:	3708      	adds	r7, #8
   17f00:	46bd      	mov	sp, r7
   17f02:	bd80      	pop	{r7, pc}
   17f04:	2000a750 	.word	0x2000a750
   17f08:	2000a440 	.word	0x2000a440
   17f0c:	00017b15 	.word	0x00017b15
   17f10:	20000000 	.word	0x20000000
   17f14:	00017b45 	.word	0x00017b45
   17f18:	00019d1d 	.word	0x00019d1d
   17f1c:	2000a7c4 	.word	0x2000a7c4
   17f20:	2000a45c 	.word	0x2000a45c
   17f24:	2000a8c8 	.word	0x2000a8c8
   17f28:	2000a478 	.word	0x2000a478
   17f2c:	2000a7e4 	.word	0x2000a7e4
   17f30:	2000a494 	.word	0x2000a494
   17f34:	2000a848 	.word	0x2000a848
   17f38:	2000a4b0 	.word	0x2000a4b0

00017f3c <_GLOBAL__sub_I_ptrTimerClass>:
   17f3c:	b580      	push	{r7, lr}
   17f3e:	af00      	add	r7, sp, #0
   17f40:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17f44:	2001      	movs	r0, #1
   17f46:	4b01      	ldr	r3, [pc, #4]	; (17f4c <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   17f48:	4798      	blx	r3
   17f4a:	bd80      	pop	{r7, pc}
   17f4c:	00017e89 	.word	0x00017e89

00017f50 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   17f50:	b480      	push	{r7}
   17f52:	b083      	sub	sp, #12
   17f54:	af00      	add	r7, sp, #0
   17f56:	6078      	str	r0, [r7, #4]
   17f58:	4a05      	ldr	r2, [pc, #20]	; (17f70 <_ZN5PrintC1Ev+0x20>)
   17f5a:	687b      	ldr	r3, [r7, #4]
   17f5c:	601a      	str	r2, [r3, #0]
   17f5e:	687b      	ldr	r3, [r7, #4]
   17f60:	2200      	movs	r2, #0
   17f62:	605a      	str	r2, [r3, #4]
   17f64:	687b      	ldr	r3, [r7, #4]
   17f66:	4618      	mov	r0, r3
   17f68:	370c      	adds	r7, #12
   17f6a:	46bd      	mov	sp, r7
   17f6c:	bc80      	pop	{r7}
   17f6e:	4770      	bx	lr
   17f70:	00022088 	.word	0x00022088

00017f74 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   17f74:	b480      	push	{r7}
   17f76:	b083      	sub	sp, #12
   17f78:	af00      	add	r7, sp, #0
   17f7a:	6078      	str	r0, [r7, #4]
   17f7c:	2300      	movs	r3, #0
   17f7e:	4618      	mov	r0, r3
   17f80:	370c      	adds	r7, #12
   17f82:	46bd      	mov	sp, r7
   17f84:	bc80      	pop	{r7}
   17f86:	4770      	bx	lr

00017f88 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   17f88:	b480      	push	{r7}
   17f8a:	b083      	sub	sp, #12
   17f8c:	af00      	add	r7, sp, #0
   17f8e:	6078      	str	r0, [r7, #4]
   17f90:	bf00      	nop
   17f92:	370c      	adds	r7, #12
   17f94:	46bd      	mov	sp, r7
   17f96:	bc80      	pop	{r7}
   17f98:	4770      	bx	lr
	...

00017f9c <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   17f9c:	b580      	push	{r7, lr}
   17f9e:	b082      	sub	sp, #8
   17fa0:	af00      	add	r7, sp, #0
   17fa2:	6078      	str	r0, [r7, #4]
   17fa4:	687b      	ldr	r3, [r7, #4]
   17fa6:	4618      	mov	r0, r3
   17fa8:	4b06      	ldr	r3, [pc, #24]	; (17fc4 <_ZN6StreamC1Ev+0x28>)
   17faa:	4798      	blx	r3
   17fac:	4a06      	ldr	r2, [pc, #24]	; (17fc8 <_ZN6StreamC1Ev+0x2c>)
   17fae:	687b      	ldr	r3, [r7, #4]
   17fb0:	601a      	str	r2, [r3, #0]
   17fb2:	687b      	ldr	r3, [r7, #4]
   17fb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17fb8:	609a      	str	r2, [r3, #8]
   17fba:	687b      	ldr	r3, [r7, #4]
   17fbc:	4618      	mov	r0, r3
   17fbe:	3708      	adds	r7, #8
   17fc0:	46bd      	mov	sp, r7
   17fc2:	bd80      	pop	{r7, pc}
   17fc4:	00017f51 	.word	0x00017f51
   17fc8:	0002204c 	.word	0x0002204c

00017fcc <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   17fcc:	b480      	push	{r7}
   17fce:	b083      	sub	sp, #12
   17fd0:	af00      	add	r7, sp, #0
   17fd2:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   17fd4:	4b06      	ldr	r3, [pc, #24]	; (17ff0 <_ZL10USBTimeoutPK10timer_task+0x24>)
   17fd6:	681b      	ldr	r3, [r3, #0]
   17fd8:	2201      	movs	r2, #1
   17fda:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   17fdc:	4b04      	ldr	r3, [pc, #16]	; (17ff0 <_ZL10USBTimeoutPK10timer_task+0x24>)
   17fde:	681b      	ldr	r3, [r3, #0]
   17fe0:	2200      	movs	r2, #0
   17fe2:	741a      	strb	r2, [r3, #16]
	
}
   17fe4:	bf00      	nop
   17fe6:	370c      	adds	r7, #12
   17fe8:	46bd      	mov	sp, r7
   17fea:	bc80      	pop	{r7}
   17fec:	4770      	bx	lr
   17fee:	bf00      	nop
   17ff0:	2000a4cc 	.word	0x2000a4cc

00017ff4 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   17ff4:	b480      	push	{r7}
   17ff6:	b083      	sub	sp, #12
   17ff8:	af00      	add	r7, sp, #0
   17ffa:	4603      	mov	r3, r0
   17ffc:	603a      	str	r2, [r7, #0]
   17ffe:	71fb      	strb	r3, [r7, #7]
   18000:	460b      	mov	r3, r1
   18002:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   18004:	4b08      	ldr	r3, [pc, #32]	; (18028 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   18006:	681b      	ldr	r3, [r3, #0]
   18008:	2201      	movs	r2, #1
   1800a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   1800c:	4b06      	ldr	r3, [pc, #24]	; (18028 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   1800e:	681b      	ldr	r3, [r3, #0]
   18010:	2201      	movs	r2, #1
   18012:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   18014:	4b04      	ldr	r3, [pc, #16]	; (18028 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   18016:	681b      	ldr	r3, [r3, #0]
   18018:	2201      	movs	r2, #1
   1801a:	741a      	strb	r2, [r3, #16]


	return false;
   1801c:	2300      	movs	r3, #0
}
   1801e:	4618      	mov	r0, r3
   18020:	370c      	adds	r7, #12
   18022:	46bd      	mov	sp, r7
   18024:	bc80      	pop	{r7}
   18026:	4770      	bx	lr
   18028:	2000a4cc 	.word	0x2000a4cc

0001802c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   1802c:	b480      	push	{r7}
   1802e:	b083      	sub	sp, #12
   18030:	af00      	add	r7, sp, #0
   18032:	4603      	mov	r3, r0
   18034:	603a      	str	r2, [r7, #0]
   18036:	71fb      	strb	r3, [r7, #7]
   18038:	460b      	mov	r3, r1
   1803a:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   1803c:	4b08      	ldr	r3, [pc, #32]	; (18060 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1803e:	681b      	ldr	r3, [r3, #0]
   18040:	2201      	movs	r2, #1
   18042:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   18044:	4b06      	ldr	r3, [pc, #24]	; (18060 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   18046:	681b      	ldr	r3, [r3, #0]
   18048:	2201      	movs	r2, #1
   1804a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   1804c:	4b04      	ldr	r3, [pc, #16]	; (18060 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1804e:	681b      	ldr	r3, [r3, #0]
   18050:	2201      	movs	r2, #1
   18052:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   18054:	2300      	movs	r3, #0
}
   18056:	4618      	mov	r0, r3
   18058:	370c      	adds	r7, #12
   1805a:	46bd      	mov	sp, r7
   1805c:	bc80      	pop	{r7}
   1805e:	4770      	bx	lr
   18060:	2000a4cc 	.word	0x2000a4cc

00018064 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   18064:	b580      	push	{r7, lr}
   18066:	b082      	sub	sp, #8
   18068:	af00      	add	r7, sp, #0
   1806a:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   1806c:	793b      	ldrb	r3, [r7, #4]
   1806e:	f003 0301 	and.w	r3, r3, #1
   18072:	b2db      	uxtb	r3, r3
   18074:	2b00      	cmp	r3, #0
   18076:	d013      	beq.n	180a0 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   18078:	490c      	ldr	r1, [pc, #48]	; (180ac <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   1807a:	2000      	movs	r0, #0
   1807c:	4b0c      	ldr	r3, [pc, #48]	; (180b0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   1807e:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   18080:	490c      	ldr	r1, [pc, #48]	; (180b4 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   18082:	2001      	movs	r0, #1
   18084:	4b0a      	ldr	r3, [pc, #40]	; (180b0 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   18086:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   18088:	4b0b      	ldr	r3, [pc, #44]	; (180b8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   1808a:	681b      	ldr	r3, [r3, #0]
   1808c:	2201      	movs	r2, #1
   1808e:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   18090:	4b09      	ldr	r3, [pc, #36]	; (180b8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   18092:	681b      	ldr	r3, [r3, #0]
   18094:	2201      	movs	r2, #1
   18096:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   18098:	4b07      	ldr	r3, [pc, #28]	; (180b8 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   1809a:	681b      	ldr	r3, [r3, #0]
   1809c:	2201      	movs	r2, #1
   1809e:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   180a0:	2300      	movs	r3, #0
}
   180a2:	4618      	mov	r0, r3
   180a4:	3708      	adds	r7, #8
   180a6:	46bd      	mov	sp, r7
   180a8:	bd80      	pop	{r7, pc}
   180aa:	bf00      	nop
   180ac:	00017ff5 	.word	0x00017ff5
   180b0:	00011bad 	.word	0x00011bad
   180b4:	0001802d 	.word	0x0001802d
   180b8:	2000a4cc 	.word	0x2000a4cc

000180bc <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   180bc:	b580      	push	{r7, lr}
   180be:	b082      	sub	sp, #8
   180c0:	af00      	add	r7, sp, #0
   180c2:	6078      	str	r0, [r7, #4]
   180c4:	687b      	ldr	r3, [r7, #4]
   180c6:	4618      	mov	r0, r3
   180c8:	4b0a      	ldr	r3, [pc, #40]	; (180f4 <_ZN9CDC_ClassC1Ev+0x38>)
   180ca:	4798      	blx	r3
   180cc:	687b      	ldr	r3, [r7, #4]
   180ce:	3310      	adds	r3, #16
   180d0:	4618      	mov	r0, r3
   180d2:	4b09      	ldr	r3, [pc, #36]	; (180f8 <_ZN9CDC_ClassC1Ev+0x3c>)
   180d4:	4798      	blx	r3
   180d6:	4a09      	ldr	r2, [pc, #36]	; (180fc <_ZN9CDC_ClassC1Ev+0x40>)
   180d8:	687b      	ldr	r3, [r7, #4]
   180da:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   180dc:	687b      	ldr	r3, [r7, #4]
   180de:	f04f 32ff 	mov.w	r2, #4294967295
   180e2:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   180e4:	4a06      	ldr	r2, [pc, #24]	; (18100 <_ZN9CDC_ClassC1Ev+0x44>)
   180e6:	687b      	ldr	r3, [r7, #4]
   180e8:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   180ea:	687b      	ldr	r3, [r7, #4]
   180ec:	4618      	mov	r0, r3
   180ee:	3708      	adds	r7, #8
   180f0:	46bd      	mov	sp, r7
   180f2:	bd80      	pop	{r7, pc}
   180f4:	00017f9d 	.word	0x00017f9d
   180f8:	0001896d 	.word	0x0001896d
   180fc:	0002201c 	.word	0x0002201c
   18100:	2000a4cc 	.word	0x2000a4cc

00018104 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   18104:	b580      	push	{r7, lr}
   18106:	b082      	sub	sp, #8
   18108:	af00      	add	r7, sp, #0
   1810a:	6078      	str	r0, [r7, #4]
   1810c:	4a06      	ldr	r2, [pc, #24]	; (18128 <_ZN9CDC_ClassD1Ev+0x24>)
   1810e:	687b      	ldr	r3, [r7, #4]
   18110:	601a      	str	r2, [r3, #0]
   18112:	687b      	ldr	r3, [r7, #4]
   18114:	3310      	adds	r3, #16
   18116:	4618      	mov	r0, r3
   18118:	4b04      	ldr	r3, [pc, #16]	; (1812c <_ZN9CDC_ClassD1Ev+0x28>)
   1811a:	4798      	blx	r3
{
} //~CDC_Class
   1811c:	687b      	ldr	r3, [r7, #4]
   1811e:	4618      	mov	r0, r3
   18120:	3708      	adds	r7, #8
   18122:	46bd      	mov	sp, r7
   18124:	bd80      	pop	{r7, pc}
   18126:	bf00      	nop
   18128:	0002201c 	.word	0x0002201c
   1812c:	0001898d 	.word	0x0001898d

00018130 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   18130:	b580      	push	{r7, lr}
   18132:	b082      	sub	sp, #8
   18134:	af00      	add	r7, sp, #0
   18136:	6078      	str	r0, [r7, #4]
	
	OnInit();
   18138:	687b      	ldr	r3, [r7, #4]
   1813a:	3310      	adds	r3, #16
   1813c:	4618      	mov	r0, r3
   1813e:	4b09      	ldr	r3, [pc, #36]	; (18164 <_ZN9CDC_Class4InitEv+0x34>)
   18140:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   18142:	4909      	ldr	r1, [pc, #36]	; (18168 <_ZN9CDC_Class4InitEv+0x38>)
   18144:	2003      	movs	r0, #3
   18146:	4b09      	ldr	r3, [pc, #36]	; (1816c <_ZN9CDC_Class4InitEv+0x3c>)
   18148:	4798      	blx	r3
	delay_ms(100);
   1814a:	2064      	movs	r0, #100	; 0x64
   1814c:	4b08      	ldr	r3, [pc, #32]	; (18170 <_ZN9CDC_Class4InitEv+0x40>)
   1814e:	4798      	blx	r3
		
	if (connected)
   18150:	687b      	ldr	r3, [r7, #4]
   18152:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
   18154:	2064      	movs	r0, #100	; 0x64
   18156:	4b06      	ldr	r3, [pc, #24]	; (18170 <_ZN9CDC_Class4InitEv+0x40>)
   18158:	4798      	blx	r3

	

}
   1815a:	bf00      	nop
   1815c:	3708      	adds	r7, #8
   1815e:	46bd      	mov	sp, r7
   18160:	bd80      	pop	{r7, pc}
   18162:	bf00      	nop
   18164:	000189a1 	.word	0x000189a1
   18168:	00018065 	.word	0x00018065
   1816c:	00011bad 	.word	0x00011bad
   18170:	000067d5 	.word	0x000067d5

00018174 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   18174:	b580      	push	{r7, lr}
   18176:	b082      	sub	sp, #8
   18178:	af00      	add	r7, sp, #0
   1817a:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   1817c:	4b03      	ldr	r3, [pc, #12]	; (1818c <_ZN9CDC_Class9IsEnabledEv+0x18>)
   1817e:	4798      	blx	r3
   18180:	4603      	mov	r3, r0
	
}
   18182:	4618      	mov	r0, r3
   18184:	3708      	adds	r7, #8
   18186:	46bd      	mov	sp, r7
   18188:	bd80      	pop	{r7, pc}
   1818a:	bf00      	nop
   1818c:	00011c25 	.word	0x00011c25

00018190 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   18190:	b580      	push	{r7, lr}
   18192:	b084      	sub	sp, #16
   18194:	af00      	add	r7, sp, #0
   18196:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   18198:	687b      	ldr	r3, [r7, #4]
   1819a:	699b      	ldr	r3, [r3, #24]
   1819c:	f1b3 3fff 	cmp.w	r3, #4294967295
   181a0:	bf14      	ite	ne
   181a2:	2301      	movne	r3, #1
   181a4:	2300      	moveq	r3, #0
   181a6:	b2db      	uxtb	r3, r3
   181a8:	2b00      	cmp	r3, #0
   181aa:	d002      	beq.n	181b2 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   181ac:	687b      	ldr	r3, [r7, #4]
   181ae:	699b      	ldr	r3, [r3, #24]
   181b0:	e011      	b.n	181d6 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   181b2:	687b      	ldr	r3, [r7, #4]
   181b4:	681b      	ldr	r3, [r3, #0]
   181b6:	331c      	adds	r3, #28
   181b8:	681b      	ldr	r3, [r3, #0]
   181ba:	f107 010f 	add.w	r1, r7, #15
   181be:	2201      	movs	r2, #1
   181c0:	6878      	ldr	r0, [r7, #4]
   181c2:	4798      	blx	r3
   181c4:	4602      	mov	r2, r0
   181c6:	687b      	ldr	r3, [r7, #4]
   181c8:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   181ca:	7bfb      	ldrb	r3, [r7, #15]
   181cc:	461a      	mov	r2, r3
   181ce:	687b      	ldr	r3, [r7, #4]
   181d0:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   181d2:	687b      	ldr	r3, [r7, #4]
   181d4:	699b      	ldr	r3, [r3, #24]
}
   181d6:	4618      	mov	r0, r3
   181d8:	3710      	adds	r7, #16
   181da:	46bd      	mov	sp, r7
   181dc:	bd80      	pop	{r7, pc}
	...

000181e0 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   181e0:	b580      	push	{r7, lr}
   181e2:	b086      	sub	sp, #24
   181e4:	af00      	add	r7, sp, #0
   181e6:	60f8      	str	r0, [r7, #12]
   181e8:	60b9      	str	r1, [r7, #8]
   181ea:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   181ec:	68fb      	ldr	r3, [r7, #12]
   181ee:	7c1b      	ldrb	r3, [r3, #16]
   181f0:	b2db      	uxtb	r3, r3
   181f2:	2b00      	cmp	r3, #0
   181f4:	d02e      	beq.n	18254 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   181f6:	687a      	ldr	r2, [r7, #4]
   181f8:	4613      	mov	r3, r2
   181fa:	009b      	lsls	r3, r3, #2
   181fc:	4413      	add	r3, r2
   181fe:	005b      	lsls	r3, r3, #1
   18200:	461a      	mov	r2, r3
   18202:	4918      	ldr	r1, [pc, #96]	; (18264 <_ZN9CDC_Class8readDataEPvl+0x84>)
   18204:	4818      	ldr	r0, [pc, #96]	; (18268 <_ZN9CDC_Class8readDataEPvl+0x88>)
   18206:	4b19      	ldr	r3, [pc, #100]	; (1826c <_ZN9CDC_Class8readDataEPvl+0x8c>)
   18208:	4798      	blx	r3
		rxReady=false;
   1820a:	68fb      	ldr	r3, [r7, #12]
   1820c:	2200      	movs	r2, #0
   1820e:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   18210:	687b      	ldr	r3, [r7, #4]
   18212:	4619      	mov	r1, r3
   18214:	68b8      	ldr	r0, [r7, #8]
   18216:	4b16      	ldr	r3, [pc, #88]	; (18270 <_ZN9CDC_Class8readDataEPvl+0x90>)
   18218:	4798      	blx	r3
   1821a:	4603      	mov	r3, r0
   1821c:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   1821e:	68fb      	ldr	r3, [r7, #12]
   18220:	7d5b      	ldrb	r3, [r3, #21]
   18222:	b2db      	uxtb	r3, r3
   18224:	f083 0301 	eor.w	r3, r3, #1
   18228:	b2db      	uxtb	r3, r3
   1822a:	2b00      	cmp	r3, #0
   1822c:	d006      	beq.n	1823c <_ZN9CDC_Class8readDataEPvl+0x5c>
   1822e:	68fb      	ldr	r3, [r7, #12]
   18230:	7c1b      	ldrb	r3, [r3, #16]
   18232:	b2db      	uxtb	r3, r3
   18234:	2b00      	cmp	r3, #0
   18236:	d001      	beq.n	1823c <_ZN9CDC_Class8readDataEPvl+0x5c>
   18238:	2301      	movs	r3, #1
   1823a:	e000      	b.n	1823e <_ZN9CDC_Class8readDataEPvl+0x5e>
   1823c:	2300      	movs	r3, #0
   1823e:	2b00      	cmp	r3, #0
   18240:	d000      	beq.n	18244 <_ZN9CDC_Class8readDataEPvl+0x64>
   18242:	e7ec      	b.n	1821e <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   18244:	4808      	ldr	r0, [pc, #32]	; (18268 <_ZN9CDC_Class8readDataEPvl+0x88>)
   18246:	4b0b      	ldr	r3, [pc, #44]	; (18274 <_ZN9CDC_Class8readDataEPvl+0x94>)
   18248:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   1824a:	4906      	ldr	r1, [pc, #24]	; (18264 <_ZN9CDC_Class8readDataEPvl+0x84>)
   1824c:	4806      	ldr	r0, [pc, #24]	; (18268 <_ZN9CDC_Class8readDataEPvl+0x88>)
   1824e:	4b0a      	ldr	r3, [pc, #40]	; (18278 <_ZN9CDC_Class8readDataEPvl+0x98>)
   18250:	4798      	blx	r3
   18252:	e001      	b.n	18258 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   18254:	2300      	movs	r3, #0
   18256:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   18258:	7dfb      	ldrb	r3, [r7, #23]
}
   1825a:	4618      	mov	r0, r3
   1825c:	3718      	adds	r7, #24
   1825e:	46bd      	mov	sp, r7
   18260:	bd80      	pop	{r7, pc}
   18262:	bf00      	nop
   18264:	00017fcd 	.word	0x00017fcd
   18268:	2000a588 	.word	0x2000a588
   1826c:	00018be5 	.word	0x00018be5
   18270:	00011b01 	.word	0x00011b01
   18274:	00018b2d 	.word	0x00018b2d
   18278:	00018c49 	.word	0x00018c49

0001827c <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   1827c:	b580      	push	{r7, lr}
   1827e:	b086      	sub	sp, #24
   18280:	af00      	add	r7, sp, #0
   18282:	60f8      	str	r0, [r7, #12]
   18284:	60b9      	str	r1, [r7, #8]
   18286:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   18288:	68fb      	ldr	r3, [r7, #12]
   1828a:	2200      	movs	r2, #0
   1828c:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   1828e:	687b      	ldr	r3, [r7, #4]
   18290:	4619      	mov	r1, r3
   18292:	68b8      	ldr	r0, [r7, #8]
   18294:	4b04      	ldr	r3, [pc, #16]	; (182a8 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   18296:	4798      	blx	r3
   18298:	4603      	mov	r3, r0
   1829a:	617b      	str	r3, [r7, #20]
	return r;
   1829c:	697b      	ldr	r3, [r7, #20]
}
   1829e:	4618      	mov	r0, r3
   182a0:	3718      	adds	r7, #24
   182a2:	46bd      	mov	sp, r7
   182a4:	bd80      	pop	{r7, pc}
   182a6:	bf00      	nop
   182a8:	00011b01 	.word	0x00011b01

000182ac <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   182ac:	b580      	push	{r7, lr}
   182ae:	b084      	sub	sp, #16
   182b0:	af00      	add	r7, sp, #0
   182b2:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   182b4:	687b      	ldr	r3, [r7, #4]
   182b6:	2200      	movs	r2, #0
   182b8:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   182ba:	f107 030f 	add.w	r3, r7, #15
   182be:	2101      	movs	r1, #1
   182c0:	4618      	mov	r0, r3
   182c2:	4b08      	ldr	r3, [pc, #32]	; (182e4 <_ZN9CDC_Class4readEv+0x38>)
   182c4:	4798      	blx	r3
	while(!rxReady);
   182c6:	687b      	ldr	r3, [r7, #4]
   182c8:	7d5b      	ldrb	r3, [r3, #21]
   182ca:	b2db      	uxtb	r3, r3
   182cc:	f083 0301 	eor.w	r3, r3, #1
   182d0:	b2db      	uxtb	r3, r3
   182d2:	2b00      	cmp	r3, #0
   182d4:	d000      	beq.n	182d8 <_ZN9CDC_Class4readEv+0x2c>
   182d6:	e7f6      	b.n	182c6 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   182d8:	7bfb      	ldrb	r3, [r7, #15]
}
   182da:	4618      	mov	r0, r3
   182dc:	3710      	adds	r7, #16
   182de:	46bd      	mov	sp, r7
   182e0:	bd80      	pop	{r7, pc}
   182e2:	bf00      	nop
   182e4:	00011b01 	.word	0x00011b01

000182e8 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   182e8:	b580      	push	{r7, lr}
   182ea:	b082      	sub	sp, #8
   182ec:	af00      	add	r7, sp, #0
   182ee:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   182f0:	687b      	ldr	r3, [r7, #4]
   182f2:	331c      	adds	r3, #28
   182f4:	2140      	movs	r1, #64	; 0x40
   182f6:	4618      	mov	r0, r3
   182f8:	4b02      	ldr	r3, [pc, #8]	; (18304 <_ZN9CDC_Class5flushEv+0x1c>)
   182fa:	4798      	blx	r3
}
   182fc:	bf00      	nop
   182fe:	3708      	adds	r7, #8
   18300:	46bd      	mov	sp, r7
   18302:	bd80      	pop	{r7, pc}
   18304:	00011b45 	.word	0x00011b45

00018308 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   18308:	b580      	push	{r7, lr}
   1830a:	b082      	sub	sp, #8
   1830c:	af00      	add	r7, sp, #0
   1830e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   18310:	4b02      	ldr	r3, [pc, #8]	; (1831c <_ZN9CDC_Class5clearEv+0x14>)
   18312:	4798      	blx	r3
}
   18314:	bf00      	nop
   18316:	3708      	adds	r7, #8
   18318:	46bd      	mov	sp, r7
   1831a:	bd80      	pop	{r7, pc}
   1831c:	00011b89 	.word	0x00011b89

00018320 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   18320:	b580      	push	{r7, lr}
   18322:	b082      	sub	sp, #8
   18324:	af00      	add	r7, sp, #0
   18326:	6078      	str	r0, [r7, #4]
   18328:	460b      	mov	r3, r1
   1832a:	70fb      	strb	r3, [r7, #3]
	if (connected){
   1832c:	687b      	ldr	r3, [r7, #4]
   1832e:	7c1b      	ldrb	r3, [r3, #16]
   18330:	b2db      	uxtb	r3, r3
   18332:	2b00      	cmp	r3, #0
   18334:	d012      	beq.n	1835c <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
   18336:	687b      	ldr	r3, [r7, #4]
   18338:	7d1b      	ldrb	r3, [r3, #20]
   1833a:	b2db      	uxtb	r3, r3
   1833c:	f083 0301 	eor.w	r3, r3, #1
   18340:	b2db      	uxtb	r3, r3
   18342:	2b00      	cmp	r3, #0
   18344:	d000      	beq.n	18348 <_ZN9CDC_Class5writeEh+0x28>
   18346:	e7f6      	b.n	18336 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
   18348:	687b      	ldr	r3, [r7, #4]
   1834a:	681b      	ldr	r3, [r3, #0]
   1834c:	3324      	adds	r3, #36	; 0x24
   1834e:	681b      	ldr	r3, [r3, #0]
   18350:	1cf9      	adds	r1, r7, #3
   18352:	2201      	movs	r2, #1
   18354:	6878      	ldr	r0, [r7, #4]
   18356:	4798      	blx	r3
   18358:	4603      	mov	r3, r0
   1835a:	e000      	b.n	1835e <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
   1835c:	2300      	movs	r3, #0
	}
		
}
   1835e:	4618      	mov	r0, r3
   18360:	3708      	adds	r7, #8
   18362:	46bd      	mov	sp, r7
   18364:	bd80      	pop	{r7, pc}
	...

00018368 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   18368:	b580      	push	{r7, lr}
   1836a:	b086      	sub	sp, #24
   1836c:	af00      	add	r7, sp, #0
   1836e:	60f8      	str	r0, [r7, #12]
   18370:	60b9      	str	r1, [r7, #8]
   18372:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   18374:	68fb      	ldr	r3, [r7, #12]
   18376:	7c1b      	ldrb	r3, [r3, #16]
   18378:	b2db      	uxtb	r3, r3
   1837a:	2b00      	cmp	r3, #0
   1837c:	d02f      	beq.n	183de <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   1837e:	687a      	ldr	r2, [r7, #4]
   18380:	4613      	mov	r3, r2
   18382:	009b      	lsls	r3, r3, #2
   18384:	4413      	add	r3, r2
   18386:	005b      	lsls	r3, r3, #1
   18388:	461a      	mov	r2, r3
   1838a:	4917      	ldr	r1, [pc, #92]	; (183e8 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   1838c:	4817      	ldr	r0, [pc, #92]	; (183ec <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   1838e:	4b18      	ldr	r3, [pc, #96]	; (183f0 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   18390:	4798      	blx	r3
		txReady=false;
   18392:	68fb      	ldr	r3, [r7, #12]
   18394:	2200      	movs	r2, #0
   18396:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   18398:	687b      	ldr	r3, [r7, #4]
   1839a:	4619      	mov	r1, r3
   1839c:	68b8      	ldr	r0, [r7, #8]
   1839e:	4b15      	ldr	r3, [pc, #84]	; (183f4 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   183a0:	4798      	blx	r3
   183a2:	4603      	mov	r3, r0
   183a4:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   183a6:	68fb      	ldr	r3, [r7, #12]
   183a8:	7d1b      	ldrb	r3, [r3, #20]
   183aa:	b2db      	uxtb	r3, r3
   183ac:	f083 0301 	eor.w	r3, r3, #1
   183b0:	b2db      	uxtb	r3, r3
   183b2:	2b00      	cmp	r3, #0
   183b4:	d006      	beq.n	183c4 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   183b6:	68fb      	ldr	r3, [r7, #12]
   183b8:	7c1b      	ldrb	r3, [r3, #16]
   183ba:	b2db      	uxtb	r3, r3
   183bc:	2b00      	cmp	r3, #0
   183be:	d001      	beq.n	183c4 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   183c0:	2301      	movs	r3, #1
   183c2:	e000      	b.n	183c6 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   183c4:	2300      	movs	r3, #0
   183c6:	2b00      	cmp	r3, #0
   183c8:	d000      	beq.n	183cc <_ZN9CDC_Class9writeDataEPKvl+0x64>
   183ca:	e7ec      	b.n	183a6 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   183cc:	4807      	ldr	r0, [pc, #28]	; (183ec <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   183ce:	4b0a      	ldr	r3, [pc, #40]	; (183f8 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   183d0:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   183d2:	4905      	ldr	r1, [pc, #20]	; (183e8 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   183d4:	4805      	ldr	r0, [pc, #20]	; (183ec <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   183d6:	4b09      	ldr	r3, [pc, #36]	; (183fc <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   183d8:	4798      	blx	r3
		return r;
   183da:	697b      	ldr	r3, [r7, #20]
   183dc:	e000      	b.n	183e0 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   183de:	2300      	movs	r3, #0
	}
	

}
   183e0:	4618      	mov	r0, r3
   183e2:	3718      	adds	r7, #24
   183e4:	46bd      	mov	sp, r7
   183e6:	bd80      	pop	{r7, pc}
   183e8:	00017fcd 	.word	0x00017fcd
   183ec:	2000a588 	.word	0x2000a588
   183f0:	00018be5 	.word	0x00018be5
   183f4:	00011b45 	.word	0x00011b45
   183f8:	00018b2d 	.word	0x00018b2d
   183fc:	00018c49 	.word	0x00018c49

00018400 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   18400:	b580      	push	{r7, lr}
   18402:	b086      	sub	sp, #24
   18404:	af00      	add	r7, sp, #0
   18406:	60f8      	str	r0, [r7, #12]
   18408:	60b9      	str	r1, [r7, #8]
   1840a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   1840c:	68fb      	ldr	r3, [r7, #12]
   1840e:	2200      	movs	r2, #0
   18410:	751a      	strb	r2, [r3, #20]

 	if (connected){
   18412:	68fb      	ldr	r3, [r7, #12]
   18414:	7c1b      	ldrb	r3, [r3, #16]
   18416:	b2db      	uxtb	r3, r3
   18418:	2b00      	cmp	r3, #0
   1841a:	d02a      	beq.n	18472 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   1841c:	687a      	ldr	r2, [r7, #4]
   1841e:	4613      	mov	r3, r2
   18420:	009b      	lsls	r3, r3, #2
   18422:	4413      	add	r3, r2
   18424:	005b      	lsls	r3, r3, #1
   18426:	461a      	mov	r2, r3
   18428:	4915      	ldr	r1, [pc, #84]	; (18480 <_ZN9CDC_Class5writeEPKhj+0x80>)
   1842a:	4816      	ldr	r0, [pc, #88]	; (18484 <_ZN9CDC_Class5writeEPKhj+0x84>)
   1842c:	4b16      	ldr	r3, [pc, #88]	; (18488 <_ZN9CDC_Class5writeEPKhj+0x88>)
   1842e:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   18430:	6879      	ldr	r1, [r7, #4]
   18432:	68b8      	ldr	r0, [r7, #8]
   18434:	4b15      	ldr	r3, [pc, #84]	; (1848c <_ZN9CDC_Class5writeEPKhj+0x8c>)
   18436:	4798      	blx	r3
   18438:	4603      	mov	r3, r0
   1843a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   1843c:	68fb      	ldr	r3, [r7, #12]
   1843e:	7d1b      	ldrb	r3, [r3, #20]
   18440:	b2db      	uxtb	r3, r3
   18442:	f083 0301 	eor.w	r3, r3, #1
   18446:	b2db      	uxtb	r3, r3
   18448:	2b00      	cmp	r3, #0
   1844a:	d006      	beq.n	1845a <_ZN9CDC_Class5writeEPKhj+0x5a>
   1844c:	68fb      	ldr	r3, [r7, #12]
   1844e:	7c1b      	ldrb	r3, [r3, #16]
   18450:	b2db      	uxtb	r3, r3
   18452:	2b00      	cmp	r3, #0
   18454:	d001      	beq.n	1845a <_ZN9CDC_Class5writeEPKhj+0x5a>
   18456:	2301      	movs	r3, #1
   18458:	e000      	b.n	1845c <_ZN9CDC_Class5writeEPKhj+0x5c>
   1845a:	2300      	movs	r3, #0
   1845c:	2b00      	cmp	r3, #0
   1845e:	d000      	beq.n	18462 <_ZN9CDC_Class5writeEPKhj+0x62>
   18460:	e7ec      	b.n	1843c <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   18462:	4808      	ldr	r0, [pc, #32]	; (18484 <_ZN9CDC_Class5writeEPKhj+0x84>)
   18464:	4b0a      	ldr	r3, [pc, #40]	; (18490 <_ZN9CDC_Class5writeEPKhj+0x90>)
   18466:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   18468:	4905      	ldr	r1, [pc, #20]	; (18480 <_ZN9CDC_Class5writeEPKhj+0x80>)
   1846a:	4806      	ldr	r0, [pc, #24]	; (18484 <_ZN9CDC_Class5writeEPKhj+0x84>)
   1846c:	4b09      	ldr	r3, [pc, #36]	; (18494 <_ZN9CDC_Class5writeEPKhj+0x94>)
   1846e:	4798      	blx	r3
   18470:	e001      	b.n	18476 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   18472:	2300      	movs	r3, #0
   18474:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   18476:	697b      	ldr	r3, [r7, #20]
}
   18478:	4618      	mov	r0, r3
   1847a:	3718      	adds	r7, #24
   1847c:	46bd      	mov	sp, r7
   1847e:	bd80      	pop	{r7, pc}
   18480:	00017fcd 	.word	0x00017fcd
   18484:	2000a588 	.word	0x2000a588
   18488:	00018be5 	.word	0x00018be5
   1848c:	00011b45 	.word	0x00011b45
   18490:	00018b2d 	.word	0x00018b2d
   18494:	00018c49 	.word	0x00018c49

00018498 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   18498:	b480      	push	{r7}
   1849a:	b083      	sub	sp, #12
   1849c:	af00      	add	r7, sp, #0
   1849e:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   184a0:	687b      	ldr	r3, [r7, #4]
   184a2:	7d5b      	ldrb	r3, [r3, #21]
   184a4:	b2db      	uxtb	r3, r3
   184a6:	2b00      	cmp	r3, #0
   184a8:	d006      	beq.n	184b8 <_ZN9CDC_Class9availableEv+0x20>
   184aa:	687b      	ldr	r3, [r7, #4]
   184ac:	7d1b      	ldrb	r3, [r3, #20]
   184ae:	b2db      	uxtb	r3, r3
   184b0:	2b00      	cmp	r3, #0
   184b2:	d001      	beq.n	184b8 <_ZN9CDC_Class9availableEv+0x20>
   184b4:	2301      	movs	r3, #1
   184b6:	e000      	b.n	184ba <_ZN9CDC_Class9availableEv+0x22>
   184b8:	2300      	movs	r3, #0
   184ba:	2b00      	cmp	r3, #0
   184bc:	d001      	beq.n	184c2 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   184be:	2301      	movs	r3, #1
   184c0:	e000      	b.n	184c4 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   184c2:	2300      	movs	r3, #0
	}
	
}
   184c4:	4618      	mov	r0, r3
   184c6:	370c      	adds	r7, #12
   184c8:	46bd      	mov	sp, r7
   184ca:	bc80      	pop	{r7}
   184cc:	4770      	bx	lr
	...

000184d0 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   184d0:	b580      	push	{r7, lr}
   184d2:	b082      	sub	sp, #8
   184d4:	af00      	add	r7, sp, #0
   184d6:	6078      	str	r0, [r7, #4]
   184d8:	6039      	str	r1, [r7, #0]
   184da:	687b      	ldr	r3, [r7, #4]
   184dc:	2b01      	cmp	r3, #1
   184de:	d10c      	bne.n	184fa <_Z41__static_initialization_and_destruction_0ii+0x2a>
   184e0:	683b      	ldr	r3, [r7, #0]
   184e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   184e6:	4293      	cmp	r3, r2
   184e8:	d107      	bne.n	184fa <_Z41__static_initialization_and_destruction_0ii+0x2a>
   184ea:	4806      	ldr	r0, [pc, #24]	; (18504 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   184ec:	4b06      	ldr	r3, [pc, #24]	; (18508 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   184ee:	4798      	blx	r3
   184f0:	4a06      	ldr	r2, [pc, #24]	; (1850c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   184f2:	4907      	ldr	r1, [pc, #28]	; (18510 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   184f4:	4803      	ldr	r0, [pc, #12]	; (18504 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   184f6:	4b07      	ldr	r3, [pc, #28]	; (18514 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   184f8:	4798      	blx	r3
   184fa:	bf00      	nop
   184fc:	3708      	adds	r7, #8
   184fe:	46bd      	mov	sp, r7
   18500:	bd80      	pop	{r7, pc}
   18502:	bf00      	nop
   18504:	2000a4d0 	.word	0x2000a4d0
   18508:	000180bd 	.word	0x000180bd
   1850c:	20000000 	.word	0x20000000
   18510:	00018105 	.word	0x00018105
   18514:	00019d1d 	.word	0x00019d1d

00018518 <_GLOBAL__sub_I_ptrCDCClass>:
   18518:	b580      	push	{r7, lr}
   1851a:	af00      	add	r7, sp, #0
   1851c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18520:	2001      	movs	r0, #1
   18522:	4b01      	ldr	r3, [pc, #4]	; (18528 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   18524:	4798      	blx	r3
   18526:	bd80      	pop	{r7, pc}
   18528:	000184d1 	.word	0x000184d1

0001852c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   1852c:	b590      	push	{r4, r7, lr}
   1852e:	b083      	sub	sp, #12
   18530:	af00      	add	r7, sp, #0
   18532:	6078      	str	r0, [r7, #4]
   18534:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
   18536:	683b      	ldr	r3, [r7, #0]
   18538:	2b00      	cmp	r3, #0
   1853a:	d101      	bne.n	18540 <_ZN5Print5writeEPKc+0x14>
   1853c:	2300      	movs	r3, #0
   1853e:	e00c      	b.n	1855a <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
   18540:	687b      	ldr	r3, [r7, #4]
   18542:	681b      	ldr	r3, [r3, #0]
   18544:	3304      	adds	r3, #4
   18546:	681c      	ldr	r4, [r3, #0]
   18548:	6838      	ldr	r0, [r7, #0]
   1854a:	4b06      	ldr	r3, [pc, #24]	; (18564 <_ZN5Print5writeEPKc+0x38>)
   1854c:	4798      	blx	r3
   1854e:	4603      	mov	r3, r0
   18550:	461a      	mov	r2, r3
   18552:	6839      	ldr	r1, [r7, #0]
   18554:	6878      	ldr	r0, [r7, #4]
   18556:	47a0      	blx	r4
   18558:	4603      	mov	r3, r0
    }
   1855a:	4618      	mov	r0, r3
   1855c:	370c      	adds	r7, #12
   1855e:	46bd      	mov	sp, r7
   18560:	bd90      	pop	{r4, r7, pc}
   18562:	bf00      	nop
   18564:	0001c6c1 	.word	0x0001c6c1

00018568 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   18568:	b580      	push	{r7, lr}
   1856a:	b086      	sub	sp, #24
   1856c:	af00      	add	r7, sp, #0
   1856e:	60f8      	str	r0, [r7, #12]
   18570:	60b9      	str	r1, [r7, #8]
   18572:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   18574:	2300      	movs	r3, #0
   18576:	617b      	str	r3, [r7, #20]
  while (size--) {
   18578:	687b      	ldr	r3, [r7, #4]
   1857a:	1e5a      	subs	r2, r3, #1
   1857c:	607a      	str	r2, [r7, #4]
   1857e:	2b00      	cmp	r3, #0
   18580:	bf14      	ite	ne
   18582:	2301      	movne	r3, #1
   18584:	2300      	moveq	r3, #0
   18586:	b2db      	uxtb	r3, r3
   18588:	2b00      	cmp	r3, #0
   1858a:	d016      	beq.n	185ba <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   1858c:	68fb      	ldr	r3, [r7, #12]
   1858e:	681b      	ldr	r3, [r3, #0]
   18590:	681a      	ldr	r2, [r3, #0]
   18592:	68bb      	ldr	r3, [r7, #8]
   18594:	1c59      	adds	r1, r3, #1
   18596:	60b9      	str	r1, [r7, #8]
   18598:	781b      	ldrb	r3, [r3, #0]
   1859a:	4619      	mov	r1, r3
   1859c:	68f8      	ldr	r0, [r7, #12]
   1859e:	4790      	blx	r2
   185a0:	4603      	mov	r3, r0
   185a2:	2b00      	cmp	r3, #0
   185a4:	bf14      	ite	ne
   185a6:	2301      	movne	r3, #1
   185a8:	2300      	moveq	r3, #0
   185aa:	b2db      	uxtb	r3, r3
   185ac:	2b00      	cmp	r3, #0
   185ae:	d003      	beq.n	185b8 <_ZN5Print5writeEPKhj+0x50>
   185b0:	697b      	ldr	r3, [r7, #20]
   185b2:	3301      	adds	r3, #1
   185b4:	617b      	str	r3, [r7, #20]
  while (size--) {
   185b6:	e7df      	b.n	18578 <_ZN5Print5writeEPKhj+0x10>
    else break;
   185b8:	bf00      	nop
  }
  return n;
   185ba:	697b      	ldr	r3, [r7, #20]
}
   185bc:	4618      	mov	r0, r3
   185be:	3718      	adds	r7, #24
   185c0:	46bd      	mov	sp, r7
   185c2:	bd80      	pop	{r7, pc}

000185c4 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
   185c4:	b580      	push	{r7, lr}
   185c6:	b082      	sub	sp, #8
   185c8:	af00      	add	r7, sp, #0
   185ca:	6078      	str	r0, [r7, #4]
   185cc:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
   185ce:	6839      	ldr	r1, [r7, #0]
   185d0:	6878      	ldr	r0, [r7, #4]
   185d2:	4b03      	ldr	r3, [pc, #12]	; (185e0 <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
   185d4:	4798      	blx	r3
   185d6:	4603      	mov	r3, r0
}
   185d8:	4618      	mov	r0, r3
   185da:	3708      	adds	r7, #8
   185dc:	46bd      	mov	sp, r7
   185de:	bd80      	pop	{r7, pc}
   185e0:	000185e5 	.word	0x000185e5

000185e4 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   185e4:	b580      	push	{r7, lr}
   185e6:	b082      	sub	sp, #8
   185e8:	af00      	add	r7, sp, #0
   185ea:	6078      	str	r0, [r7, #4]
   185ec:	6039      	str	r1, [r7, #0]
  return write(str);
   185ee:	6839      	ldr	r1, [r7, #0]
   185f0:	6878      	ldr	r0, [r7, #4]
   185f2:	4b03      	ldr	r3, [pc, #12]	; (18600 <_ZN5Print5printEPKc+0x1c>)
   185f4:	4798      	blx	r3
   185f6:	4603      	mov	r3, r0
}
   185f8:	4618      	mov	r0, r3
   185fa:	3708      	adds	r7, #8
   185fc:	46bd      	mov	sp, r7
   185fe:	bd80      	pop	{r7, pc}
   18600:	0001852d 	.word	0x0001852d

00018604 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   18604:	b580      	push	{r7, lr}
   18606:	b084      	sub	sp, #16
   18608:	af00      	add	r7, sp, #0
   1860a:	60f8      	str	r0, [r7, #12]
   1860c:	460b      	mov	r3, r1
   1860e:	607a      	str	r2, [r7, #4]
   18610:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   18612:	7afb      	ldrb	r3, [r7, #11]
   18614:	687a      	ldr	r2, [r7, #4]
   18616:	4619      	mov	r1, r3
   18618:	68f8      	ldr	r0, [r7, #12]
   1861a:	4b03      	ldr	r3, [pc, #12]	; (18628 <_ZN5Print5printEhi+0x24>)
   1861c:	4798      	blx	r3
   1861e:	4603      	mov	r3, r0
}
   18620:	4618      	mov	r0, r3
   18622:	3710      	adds	r7, #16
   18624:	46bd      	mov	sp, r7
   18626:	bd80      	pop	{r7, pc}
   18628:	0001862d 	.word	0x0001862d

0001862c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   1862c:	b580      	push	{r7, lr}
   1862e:	b084      	sub	sp, #16
   18630:	af00      	add	r7, sp, #0
   18632:	60f8      	str	r0, [r7, #12]
   18634:	60b9      	str	r1, [r7, #8]
   18636:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   18638:	687b      	ldr	r3, [r7, #4]
   1863a:	2b00      	cmp	r3, #0
   1863c:	d109      	bne.n	18652 <_ZN5Print5printEmi+0x26>
   1863e:	68fb      	ldr	r3, [r7, #12]
   18640:	681b      	ldr	r3, [r3, #0]
   18642:	681b      	ldr	r3, [r3, #0]
   18644:	68ba      	ldr	r2, [r7, #8]
   18646:	b2d2      	uxtb	r2, r2
   18648:	4611      	mov	r1, r2
   1864a:	68f8      	ldr	r0, [r7, #12]
   1864c:	4798      	blx	r3
   1864e:	4603      	mov	r3, r0
   18650:	e007      	b.n	18662 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   18652:	687b      	ldr	r3, [r7, #4]
   18654:	b2db      	uxtb	r3, r3
   18656:	461a      	mov	r2, r3
   18658:	68b9      	ldr	r1, [r7, #8]
   1865a:	68f8      	ldr	r0, [r7, #12]
   1865c:	4b03      	ldr	r3, [pc, #12]	; (1866c <_ZN5Print5printEmi+0x40>)
   1865e:	4798      	blx	r3
   18660:	4603      	mov	r3, r0
}
   18662:	4618      	mov	r0, r3
   18664:	3710      	adds	r7, #16
   18666:	46bd      	mov	sp, r7
   18668:	bd80      	pop	{r7, pc}
   1866a:	bf00      	nop
   1866c:	00018771 	.word	0x00018771

00018670 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
   18670:	b580      	push	{r7, lr}
   18672:	b084      	sub	sp, #16
   18674:	af00      	add	r7, sp, #0
   18676:	6078      	str	r0, [r7, #4]
   18678:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
   1867a:	6839      	ldr	r1, [r7, #0]
   1867c:	6878      	ldr	r0, [r7, #4]
   1867e:	4b07      	ldr	r3, [pc, #28]	; (1869c <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
   18680:	4798      	blx	r3
   18682:	60f8      	str	r0, [r7, #12]
  n += println();
   18684:	6878      	ldr	r0, [r7, #4]
   18686:	4b06      	ldr	r3, [pc, #24]	; (186a0 <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
   18688:	4798      	blx	r3
   1868a:	4602      	mov	r2, r0
   1868c:	68fb      	ldr	r3, [r7, #12]
   1868e:	4413      	add	r3, r2
   18690:	60fb      	str	r3, [r7, #12]
  return n;
   18692:	68fb      	ldr	r3, [r7, #12]
}
   18694:	4618      	mov	r0, r3
   18696:	3710      	adds	r7, #16
   18698:	46bd      	mov	sp, r7
   1869a:	bd80      	pop	{r7, pc}
   1869c:	000185c5 	.word	0x000185c5
   186a0:	000186a5 	.word	0x000186a5

000186a4 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   186a4:	b580      	push	{r7, lr}
   186a6:	b082      	sub	sp, #8
   186a8:	af00      	add	r7, sp, #0
   186aa:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   186ac:	4904      	ldr	r1, [pc, #16]	; (186c0 <_ZN5Print7printlnEv+0x1c>)
   186ae:	6878      	ldr	r0, [r7, #4]
   186b0:	4b04      	ldr	r3, [pc, #16]	; (186c4 <_ZN5Print7printlnEv+0x20>)
   186b2:	4798      	blx	r3
   186b4:	4603      	mov	r3, r0
}
   186b6:	4618      	mov	r0, r3
   186b8:	3708      	adds	r7, #8
   186ba:	46bd      	mov	sp, r7
   186bc:	bd80      	pop	{r7, pc}
   186be:	bf00      	nop
   186c0:	00022070 	.word	0x00022070
   186c4:	0001852d 	.word	0x0001852d

000186c8 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   186c8:	b580      	push	{r7, lr}
   186ca:	b084      	sub	sp, #16
   186cc:	af00      	add	r7, sp, #0
   186ce:	6078      	str	r0, [r7, #4]
   186d0:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   186d2:	6839      	ldr	r1, [r7, #0]
   186d4:	6878      	ldr	r0, [r7, #4]
   186d6:	4b07      	ldr	r3, [pc, #28]	; (186f4 <_ZN5Print7printlnEPKc+0x2c>)
   186d8:	4798      	blx	r3
   186da:	60f8      	str	r0, [r7, #12]
  n += println();
   186dc:	6878      	ldr	r0, [r7, #4]
   186de:	4b06      	ldr	r3, [pc, #24]	; (186f8 <_ZN5Print7printlnEPKc+0x30>)
   186e0:	4798      	blx	r3
   186e2:	4602      	mov	r2, r0
   186e4:	68fb      	ldr	r3, [r7, #12]
   186e6:	4413      	add	r3, r2
   186e8:	60fb      	str	r3, [r7, #12]
  return n;
   186ea:	68fb      	ldr	r3, [r7, #12]
}
   186ec:	4618      	mov	r0, r3
   186ee:	3710      	adds	r7, #16
   186f0:	46bd      	mov	sp, r7
   186f2:	bd80      	pop	{r7, pc}
   186f4:	000185e5 	.word	0x000185e5
   186f8:	000186a5 	.word	0x000186a5

000186fc <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   186fc:	b580      	push	{r7, lr}
   186fe:	b086      	sub	sp, #24
   18700:	af00      	add	r7, sp, #0
   18702:	60f8      	str	r0, [r7, #12]
   18704:	460b      	mov	r3, r1
   18706:	607a      	str	r2, [r7, #4]
   18708:	72fb      	strb	r3, [r7, #11]
  size_t n = print(b, base);
   1870a:	7afb      	ldrb	r3, [r7, #11]
   1870c:	687a      	ldr	r2, [r7, #4]
   1870e:	4619      	mov	r1, r3
   18710:	68f8      	ldr	r0, [r7, #12]
   18712:	4b07      	ldr	r3, [pc, #28]	; (18730 <_ZN5Print7printlnEhi+0x34>)
   18714:	4798      	blx	r3
   18716:	6178      	str	r0, [r7, #20]
  n += println();
   18718:	68f8      	ldr	r0, [r7, #12]
   1871a:	4b06      	ldr	r3, [pc, #24]	; (18734 <_ZN5Print7printlnEhi+0x38>)
   1871c:	4798      	blx	r3
   1871e:	4602      	mov	r2, r0
   18720:	697b      	ldr	r3, [r7, #20]
   18722:	4413      	add	r3, r2
   18724:	617b      	str	r3, [r7, #20]
  return n;
   18726:	697b      	ldr	r3, [r7, #20]
}
   18728:	4618      	mov	r0, r3
   1872a:	3718      	adds	r7, #24
   1872c:	46bd      	mov	sp, r7
   1872e:	bd80      	pop	{r7, pc}
   18730:	00018605 	.word	0x00018605
   18734:	000186a5 	.word	0x000186a5

00018738 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   18738:	b580      	push	{r7, lr}
   1873a:	b086      	sub	sp, #24
   1873c:	af00      	add	r7, sp, #0
   1873e:	60f8      	str	r0, [r7, #12]
   18740:	60b9      	str	r1, [r7, #8]
   18742:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
   18744:	687a      	ldr	r2, [r7, #4]
   18746:	68b9      	ldr	r1, [r7, #8]
   18748:	68f8      	ldr	r0, [r7, #12]
   1874a:	4b07      	ldr	r3, [pc, #28]	; (18768 <_ZN5Print7printlnEmi+0x30>)
   1874c:	4798      	blx	r3
   1874e:	6178      	str	r0, [r7, #20]
  n += println();
   18750:	68f8      	ldr	r0, [r7, #12]
   18752:	4b06      	ldr	r3, [pc, #24]	; (1876c <_ZN5Print7printlnEmi+0x34>)
   18754:	4798      	blx	r3
   18756:	4602      	mov	r2, r0
   18758:	697b      	ldr	r3, [r7, #20]
   1875a:	4413      	add	r3, r2
   1875c:	617b      	str	r3, [r7, #20]
  return n;
   1875e:	697b      	ldr	r3, [r7, #20]
}
   18760:	4618      	mov	r0, r3
   18762:	3718      	adds	r7, #24
   18764:	46bd      	mov	sp, r7
   18766:	bd80      	pop	{r7, pc}
   18768:	0001862d 	.word	0x0001862d
   1876c:	000186a5 	.word	0x000186a5

00018770 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   18770:	b580      	push	{r7, lr}
   18772:	b08e      	sub	sp, #56	; 0x38
   18774:	af00      	add	r7, sp, #0
   18776:	60f8      	str	r0, [r7, #12]
   18778:	60b9      	str	r1, [r7, #8]
   1877a:	4613      	mov	r3, r2
   1877c:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   1877e:	f107 0310 	add.w	r3, r7, #16
   18782:	3320      	adds	r3, #32
   18784:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   18786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18788:	2200      	movs	r2, #0
   1878a:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   1878c:	79fb      	ldrb	r3, [r7, #7]
   1878e:	2b01      	cmp	r3, #1
   18790:	dc01      	bgt.n	18796 <_ZN5Print11printNumberEmh+0x26>
   18792:	230a      	movs	r3, #10
   18794:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   18796:	79fa      	ldrb	r2, [r7, #7]
   18798:	68bb      	ldr	r3, [r7, #8]
   1879a:	fbb3 f1f2 	udiv	r1, r3, r2
   1879e:	fb02 f201 	mul.w	r2, r2, r1
   187a2:	1a9b      	subs	r3, r3, r2
   187a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   187a8:	79fb      	ldrb	r3, [r7, #7]
   187aa:	68ba      	ldr	r2, [r7, #8]
   187ac:	fbb2 f3f3 	udiv	r3, r2, r3
   187b0:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   187b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   187b4:	3b01      	subs	r3, #1
   187b6:	637b      	str	r3, [r7, #52]	; 0x34
   187b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   187bc:	2b09      	cmp	r3, #9
   187be:	dc04      	bgt.n	187ca <_ZN5Print11printNumberEmh+0x5a>
   187c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   187c4:	3330      	adds	r3, #48	; 0x30
   187c6:	b2db      	uxtb	r3, r3
   187c8:	e003      	b.n	187d2 <_ZN5Print11printNumberEmh+0x62>
   187ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   187ce:	3337      	adds	r3, #55	; 0x37
   187d0:	b2db      	uxtb	r3, r3
   187d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   187d4:	7013      	strb	r3, [r2, #0]
  } while(n);
   187d6:	68bb      	ldr	r3, [r7, #8]
   187d8:	2b00      	cmp	r3, #0
   187da:	d000      	beq.n	187de <_ZN5Print11printNumberEmh+0x6e>
  do {
   187dc:	e7db      	b.n	18796 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   187de:	6b79      	ldr	r1, [r7, #52]	; 0x34
   187e0:	68f8      	ldr	r0, [r7, #12]
   187e2:	4b03      	ldr	r3, [pc, #12]	; (187f0 <_ZN5Print11printNumberEmh+0x80>)
   187e4:	4798      	blx	r3
   187e6:	4603      	mov	r3, r0
}
   187e8:	4618      	mov	r0, r3
   187ea:	3738      	adds	r7, #56	; 0x38
   187ec:	46bd      	mov	sp, r7
   187ee:	bd80      	pop	{r7, pc}
   187f0:	0001852d 	.word	0x0001852d

000187f4 <hri_port_read_DIR_reg>:
{
   187f4:	b480      	push	{r7}
   187f6:	b083      	sub	sp, #12
   187f8:	af00      	add	r7, sp, #0
   187fa:	6078      	str	r0, [r7, #4]
   187fc:	460b      	mov	r3, r1
   187fe:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   18800:	78fb      	ldrb	r3, [r7, #3]
   18802:	687a      	ldr	r2, [r7, #4]
   18804:	01db      	lsls	r3, r3, #7
   18806:	4413      	add	r3, r2
   18808:	681b      	ldr	r3, [r3, #0]
}
   1880a:	4618      	mov	r0, r3
   1880c:	370c      	adds	r7, #12
   1880e:	46bd      	mov	sp, r7
   18810:	bc80      	pop	{r7}
   18812:	4770      	bx	lr

00018814 <hri_port_read_OUT_reg>:
{
   18814:	b480      	push	{r7}
   18816:	b083      	sub	sp, #12
   18818:	af00      	add	r7, sp, #0
   1881a:	6078      	str	r0, [r7, #4]
   1881c:	460b      	mov	r3, r1
   1881e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   18820:	78fb      	ldrb	r3, [r7, #3]
   18822:	687a      	ldr	r2, [r7, #4]
   18824:	01db      	lsls	r3, r3, #7
   18826:	4413      	add	r3, r2
   18828:	3310      	adds	r3, #16
   1882a:	681b      	ldr	r3, [r3, #0]
}
   1882c:	4618      	mov	r0, r3
   1882e:	370c      	adds	r7, #12
   18830:	46bd      	mov	sp, r7
   18832:	bc80      	pop	{r7}
   18834:	4770      	bx	lr

00018836 <hri_port_read_IN_reg>:
{
   18836:	b480      	push	{r7}
   18838:	b083      	sub	sp, #12
   1883a:	af00      	add	r7, sp, #0
   1883c:	6078      	str	r0, [r7, #4]
   1883e:	460b      	mov	r3, r1
   18840:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   18842:	78fb      	ldrb	r3, [r7, #3]
   18844:	687a      	ldr	r2, [r7, #4]
   18846:	01db      	lsls	r3, r3, #7
   18848:	4413      	add	r3, r2
   1884a:	3320      	adds	r3, #32
   1884c:	681b      	ldr	r3, [r3, #0]
}
   1884e:	4618      	mov	r0, r3
   18850:	370c      	adds	r7, #12
   18852:	46bd      	mov	sp, r7
   18854:	bc80      	pop	{r7}
   18856:	4770      	bx	lr

00018858 <_gpio_get_level>:
{
   18858:	b580      	push	{r7, lr}
   1885a:	b086      	sub	sp, #24
   1885c:	af00      	add	r7, sp, #0
   1885e:	4603      	mov	r3, r0
   18860:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
   18862:	f107 030c 	add.w	r3, r7, #12
   18866:	4618      	mov	r0, r3
   18868:	4b13      	ldr	r3, [pc, #76]	; (188b8 <_gpio_get_level+0x60>)
   1886a:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   1886c:	79fb      	ldrb	r3, [r7, #7]
   1886e:	4619      	mov	r1, r3
   18870:	4812      	ldr	r0, [pc, #72]	; (188bc <_gpio_get_level+0x64>)
   18872:	4b13      	ldr	r3, [pc, #76]	; (188c0 <_gpio_get_level+0x68>)
   18874:	4798      	blx	r3
   18876:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   18878:	79fb      	ldrb	r3, [r7, #7]
   1887a:	4619      	mov	r1, r3
   1887c:	480f      	ldr	r0, [pc, #60]	; (188bc <_gpio_get_level+0x64>)
   1887e:	4b11      	ldr	r3, [pc, #68]	; (188c4 <_gpio_get_level+0x6c>)
   18880:	4798      	blx	r3
   18882:	4602      	mov	r2, r0
   18884:	697b      	ldr	r3, [r7, #20]
   18886:	43db      	mvns	r3, r3
   18888:	4013      	ands	r3, r2
   1888a:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   1888c:	79fb      	ldrb	r3, [r7, #7]
   1888e:	4619      	mov	r1, r3
   18890:	480a      	ldr	r0, [pc, #40]	; (188bc <_gpio_get_level+0x64>)
   18892:	4b0d      	ldr	r3, [pc, #52]	; (188c8 <_gpio_get_level+0x70>)
   18894:	4798      	blx	r3
   18896:	4602      	mov	r2, r0
   18898:	697b      	ldr	r3, [r7, #20]
   1889a:	4013      	ands	r3, r2
   1889c:	693a      	ldr	r2, [r7, #16]
   1889e:	4313      	orrs	r3, r2
   188a0:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
   188a2:	f107 030c 	add.w	r3, r7, #12
   188a6:	4618      	mov	r0, r3
   188a8:	4b08      	ldr	r3, [pc, #32]	; (188cc <_gpio_get_level+0x74>)
   188aa:	4798      	blx	r3
	return tmp;
   188ac:	693b      	ldr	r3, [r7, #16]
}
   188ae:	4618      	mov	r0, r3
   188b0:	3718      	adds	r7, #24
   188b2:	46bd      	mov	sp, r7
   188b4:	bd80      	pop	{r7, pc}
   188b6:	bf00      	nop
   188b8:	00010d21 	.word	0x00010d21
   188bc:	41008000 	.word	0x41008000
   188c0:	000187f5 	.word	0x000187f5
   188c4:	00018837 	.word	0x00018837
   188c8:	00018815 	.word	0x00018815
   188cc:	00010d47 	.word	0x00010d47

000188d0 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   188d0:	b580      	push	{r7, lr}
   188d2:	b082      	sub	sp, #8
   188d4:	af00      	add	r7, sp, #0
   188d6:	4603      	mov	r3, r0
   188d8:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   188da:	79fb      	ldrb	r3, [r7, #7]
   188dc:	115b      	asrs	r3, r3, #5
   188de:	b2db      	uxtb	r3, r3
   188e0:	4618      	mov	r0, r3
   188e2:	4b09      	ldr	r3, [pc, #36]	; (18908 <gpio_get_pin_level+0x38>)
   188e4:	4798      	blx	r3
   188e6:	4601      	mov	r1, r0
   188e8:	79fb      	ldrb	r3, [r7, #7]
   188ea:	f003 031f 	and.w	r3, r3, #31
   188ee:	2201      	movs	r2, #1
   188f0:	fa02 f303 	lsl.w	r3, r2, r3
   188f4:	400b      	ands	r3, r1
   188f6:	2b00      	cmp	r3, #0
   188f8:	bf14      	ite	ne
   188fa:	2301      	movne	r3, #1
   188fc:	2300      	moveq	r3, #0
   188fe:	b2db      	uxtb	r3, r3
}
   18900:	4618      	mov	r0, r3
   18902:	3708      	adds	r7, #8
   18904:	46bd      	mov	sp, r7
   18906:	bd80      	pop	{r7, pc}
   18908:	00018859 	.word	0x00018859

0001890c <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   1890c:	b480      	push	{r7}
   1890e:	b083      	sub	sp, #12
   18910:	af00      	add	r7, sp, #0
   18912:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   18914:	4b06      	ldr	r3, [pc, #24]	; (18930 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   18916:	681b      	ldr	r3, [r3, #0]
   18918:	2201      	movs	r2, #1
   1891a:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   1891c:	4b04      	ldr	r3, [pc, #16]	; (18930 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   1891e:	681b      	ldr	r3, [r3, #0]
   18920:	2200      	movs	r2, #0
   18922:	705a      	strb	r2, [r3, #1]
}
   18924:	bf00      	nop
   18926:	370c      	adds	r7, #12
   18928:	46bd      	mov	sp, r7
   1892a:	bc80      	pop	{r7}
   1892c:	4770      	bx	lr
   1892e:	bf00      	nop
   18930:	2000a530 	.word	0x2000a530

00018934 <_ZL10USBPluggedv>:

static void USBPlugged(void){
   18934:	b580      	push	{r7, lr}
   18936:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   18938:	2040      	movs	r0, #64	; 0x40
   1893a:	4b0a      	ldr	r3, [pc, #40]	; (18964 <_ZL10USBPluggedv+0x30>)
   1893c:	4798      	blx	r3
   1893e:	4603      	mov	r3, r0
   18940:	2b00      	cmp	r3, #0
   18942:	d004      	beq.n	1894e <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   18944:	4b08      	ldr	r3, [pc, #32]	; (18968 <_ZL10USBPluggedv+0x34>)
   18946:	681b      	ldr	r3, [r3, #0]
   18948:	2201      	movs	r2, #1
   1894a:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   1894c:	e007      	b.n	1895e <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   1894e:	4b06      	ldr	r3, [pc, #24]	; (18968 <_ZL10USBPluggedv+0x34>)
   18950:	681b      	ldr	r3, [r3, #0]
   18952:	2200      	movs	r2, #0
   18954:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   18956:	4b04      	ldr	r3, [pc, #16]	; (18968 <_ZL10USBPluggedv+0x34>)
   18958:	681b      	ldr	r3, [r3, #0]
   1895a:	2200      	movs	r2, #0
   1895c:	701a      	strb	r2, [r3, #0]
}
   1895e:	bf00      	nop
   18960:	bd80      	pop	{r7, pc}
   18962:	bf00      	nop
   18964:	000188d1 	.word	0x000188d1
   18968:	2000a530 	.word	0x2000a530

0001896c <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   1896c:	b480      	push	{r7}
   1896e:	b083      	sub	sp, #12
   18970:	af00      	add	r7, sp, #0
   18972:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   18974:	4a04      	ldr	r2, [pc, #16]	; (18988 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   18976:	687b      	ldr	r3, [r7, #4]
   18978:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   1897a:	687b      	ldr	r3, [r7, #4]
   1897c:	4618      	mov	r0, r3
   1897e:	370c      	adds	r7, #12
   18980:	46bd      	mov	sp, r7
   18982:	bc80      	pop	{r7}
   18984:	4770      	bx	lr
   18986:	bf00      	nop
   18988:	2000a530 	.word	0x2000a530

0001898c <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   1898c:	b480      	push	{r7}
   1898e:	b083      	sub	sp, #12
   18990:	af00      	add	r7, sp, #0
   18992:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   18994:	687b      	ldr	r3, [r7, #4]
   18996:	4618      	mov	r0, r3
   18998:	370c      	adds	r7, #12
   1899a:	46bd      	mov	sp, r7
   1899c:	bc80      	pop	{r7}
   1899e:	4770      	bx	lr

000189a0 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   189a0:	b580      	push	{r7, lr}
   189a2:	b082      	sub	sp, #8
   189a4:	af00      	add	r7, sp, #0
   189a6:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   189a8:	491f      	ldr	r1, [pc, #124]	; (18a28 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   189aa:	2040      	movs	r0, #64	; 0x40
   189ac:	4b1f      	ldr	r3, [pc, #124]	; (18a2c <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   189ae:	4798      	blx	r3
		if (usbTerminalTimer.Init())
   189b0:	481f      	ldr	r0, [pc, #124]	; (18a30 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   189b2:	4b20      	ldr	r3, [pc, #128]	; (18a34 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   189b4:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   189b6:	2040      	movs	r0, #64	; 0x40
   189b8:	4b1f      	ldr	r3, [pc, #124]	; (18a38 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   189ba:	4798      	blx	r3
   189bc:	4603      	mov	r3, r0
   189be:	461a      	mov	r2, r3
   189c0:	687b      	ldr	r3, [r7, #4]
   189c2:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   189c4:	687b      	ldr	r3, [r7, #4]
   189c6:	78db      	ldrb	r3, [r3, #3]
   189c8:	2b00      	cmp	r3, #0
   189ca:	d024      	beq.n	18a16 <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
   189cc:	687b      	ldr	r3, [r7, #4]
   189ce:	2200      	movs	r2, #0
   189d0:	709a      	strb	r2, [r3, #2]
			plugged=true;
   189d2:	687b      	ldr	r3, [r7, #4]
   189d4:	2201      	movs	r2, #1
   189d6:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   189d8:	f44f 7216 	mov.w	r2, #600	; 0x258
   189dc:	4917      	ldr	r1, [pc, #92]	; (18a3c <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   189de:	4814      	ldr	r0, [pc, #80]	; (18a30 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   189e0:	4b17      	ldr	r3, [pc, #92]	; (18a40 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   189e2:	4798      	blx	r3
			usbTerminalTimer.Start();
   189e4:	4812      	ldr	r0, [pc, #72]	; (18a30 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   189e6:	4b17      	ldr	r3, [pc, #92]	; (18a44 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   189e8:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   189ea:	4817      	ldr	r0, [pc, #92]	; (18a48 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   189ec:	4b17      	ldr	r3, [pc, #92]	; (18a4c <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
   189ee:	4798      	blx	r3
   189f0:	4603      	mov	r3, r0
   189f2:	f083 0301 	eor.w	r3, r3, #1
   189f6:	b2db      	uxtb	r3, r3
   189f8:	2b00      	cmp	r3, #0
   189fa:	d008      	beq.n	18a0e <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
   189fc:	687b      	ldr	r3, [r7, #4]
   189fe:	789b      	ldrb	r3, [r3, #2]
   18a00:	b2db      	uxtb	r3, r3
   18a02:	2b00      	cmp	r3, #0
   18a04:	d0f1      	beq.n	189ea <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
   18a06:	687b      	ldr	r3, [r7, #4]
   18a08:	2200      	movs	r2, #0
   18a0a:	701a      	strb	r2, [r3, #0]
					return;
   18a0c:	e009      	b.n	18a22 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   18a0e:	4808      	ldr	r0, [pc, #32]	; (18a30 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   18a10:	4b0f      	ldr	r3, [pc, #60]	; (18a50 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
   18a12:	4798      	blx	r3
   18a14:	e005      	b.n	18a22 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
   18a16:	687b      	ldr	r3, [r7, #4]
   18a18:	2200      	movs	r2, #0
   18a1a:	701a      	strb	r2, [r3, #0]
			plugged=false;
   18a1c:	687b      	ldr	r3, [r7, #4]
   18a1e:	2200      	movs	r2, #0
   18a20:	705a      	strb	r2, [r3, #1]
		}
		
}
   18a22:	3708      	adds	r7, #8
   18a24:	46bd      	mov	sp, r7
   18a26:	bd80      	pop	{r7, pc}
   18a28:	00018935 	.word	0x00018935
   18a2c:	00006869 	.word	0x00006869
   18a30:	2000a588 	.word	0x2000a588
   18a34:	00018ad1 	.word	0x00018ad1
   18a38:	000188d1 	.word	0x000188d1
   18a3c:	0001890d 	.word	0x0001890d
   18a40:	00018bbd 	.word	0x00018bbd
   18a44:	00018b09 	.word	0x00018b09
   18a48:	2000a4d0 	.word	0x2000a4d0
   18a4c:	00018175 	.word	0x00018175
   18a50:	00018b2d 	.word	0x00018b2d

00018a54 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   18a54:	b580      	push	{r7, lr}
   18a56:	b082      	sub	sp, #8
   18a58:	af00      	add	r7, sp, #0
   18a5a:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
   18a5c:	4b04      	ldr	r3, [pc, #16]	; (18a70 <_ZL7task_cbPK10timer_task+0x1c>)
   18a5e:	681b      	ldr	r3, [r3, #0]
   18a60:	4618      	mov	r0, r3
   18a62:	4b04      	ldr	r3, [pc, #16]	; (18a74 <_ZL7task_cbPK10timer_task+0x20>)
   18a64:	4798      	blx	r3
}
   18a66:	bf00      	nop
   18a68:	3708      	adds	r7, #8
   18a6a:	46bd      	mov	sp, r7
   18a6c:	bd80      	pop	{r7, pc}
   18a6e:	bf00      	nop
   18a70:	2000a534 	.word	0x2000a534
   18a74:	00018b55 	.word	0x00018b55

00018a78 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
   18a78:	b480      	push	{r7}
   18a7a:	b083      	sub	sp, #12
   18a7c:	af00      	add	r7, sp, #0
   18a7e:	6078      	str	r0, [r7, #4]
   18a80:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   18a82:	687b      	ldr	r3, [r7, #4]
   18a84:	683a      	ldr	r2, [r7, #0]
   18a86:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
   18a88:	4a08      	ldr	r2, [pc, #32]	; (18aac <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
   18a8a:	687b      	ldr	r3, [r7, #4]
   18a8c:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   18a8e:	687b      	ldr	r3, [r7, #4]
   18a90:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18a94:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
   18a96:	687b      	ldr	r3, [r7, #4]
   18a98:	689b      	ldr	r3, [r3, #8]
   18a9a:	4a05      	ldr	r2, [pc, #20]	; (18ab0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
   18a9c:	60da      	str	r2, [r3, #12]
} //Timer_Class
   18a9e:	687b      	ldr	r3, [r7, #4]
   18aa0:	4618      	mov	r0, r3
   18aa2:	370c      	adds	r7, #12
   18aa4:	46bd      	mov	sp, r7
   18aa6:	bc80      	pop	{r7}
   18aa8:	4770      	bx	lr
   18aaa:	bf00      	nop
   18aac:	2000a534 	.word	0x2000a534
   18ab0:	00018a55 	.word	0x00018a55

00018ab4 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
   18ab4:	b480      	push	{r7}
   18ab6:	b083      	sub	sp, #12
   18ab8:	af00      	add	r7, sp, #0
   18aba:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   18abc:	687b      	ldr	r3, [r7, #4]
   18abe:	2200      	movs	r2, #0
   18ac0:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   18ac2:	687b      	ldr	r3, [r7, #4]
   18ac4:	4618      	mov	r0, r3
   18ac6:	370c      	adds	r7, #12
   18ac8:	46bd      	mov	sp, r7
   18aca:	bc80      	pop	{r7}
   18acc:	4770      	bx	lr
	...

00018ad0 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
   18ad0:	b580      	push	{r7, lr}
   18ad2:	b082      	sub	sp, #8
   18ad4:	af00      	add	r7, sp, #0
   18ad6:	6078      	str	r0, [r7, #4]
	
	ticks=0;
   18ad8:	687b      	ldr	r3, [r7, #4]
   18ada:	2200      	movs	r2, #0
   18adc:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
   18ade:	6878      	ldr	r0, [r7, #4]
   18ae0:	4b08      	ldr	r3, [pc, #32]	; (18b04 <_ZN17TimerSerial_Class4InitEv+0x34>)
   18ae2:	4798      	blx	r3
   18ae4:	4603      	mov	r3, r0
   18ae6:	2b00      	cmp	r3, #0
   18ae8:	bf0c      	ite	eq
   18aea:	2301      	moveq	r3, #1
   18aec:	2300      	movne	r3, #0
   18aee:	b2da      	uxtb	r2, r3
   18af0:	687b      	ldr	r3, [r7, #4]
   18af2:	709a      	strb	r2, [r3, #2]
	return isOK;
   18af4:	687b      	ldr	r3, [r7, #4]
   18af6:	789b      	ldrb	r3, [r3, #2]
   18af8:	b2db      	uxtb	r3, r3
}
   18afa:	4618      	mov	r0, r3
   18afc:	3708      	adds	r7, #8
   18afe:	46bd      	mov	sp, r7
   18b00:	bd80      	pop	{r7, pc}
   18b02:	bf00      	nop
   18b04:	00018b09 	.word	0x00018b09

00018b08 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
   18b08:	b580      	push	{r7, lr}
   18b0a:	b084      	sub	sp, #16
   18b0c:	af00      	add	r7, sp, #0
   18b0e:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   18b10:	687b      	ldr	r3, [r7, #4]
   18b12:	691b      	ldr	r3, [r3, #16]
   18b14:	4618      	mov	r0, r3
   18b16:	4b04      	ldr	r3, [pc, #16]	; (18b28 <_ZN17TimerSerial_Class5StartEv+0x20>)
   18b18:	4798      	blx	r3
   18b1a:	60f8      	str	r0, [r7, #12]
	return status;
   18b1c:	68fb      	ldr	r3, [r7, #12]
	
}
   18b1e:	4618      	mov	r0, r3
   18b20:	3710      	adds	r7, #16
   18b22:	46bd      	mov	sp, r7
   18b24:	bd80      	pop	{r7, pc}
   18b26:	bf00      	nop
   18b28:	000073ad 	.word	0x000073ad

00018b2c <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
   18b2c:	b580      	push	{r7, lr}
   18b2e:	b084      	sub	sp, #16
   18b30:	af00      	add	r7, sp, #0
   18b32:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   18b34:	687b      	ldr	r3, [r7, #4]
   18b36:	691b      	ldr	r3, [r3, #16]
   18b38:	4618      	mov	r0, r3
   18b3a:	4b05      	ldr	r3, [pc, #20]	; (18b50 <_ZN17TimerSerial_Class4StopEv+0x24>)
   18b3c:	4798      	blx	r3
   18b3e:	60f8      	str	r0, [r7, #12]
	timeout=0;
   18b40:	687b      	ldr	r3, [r7, #4]
   18b42:	2200      	movs	r2, #0
   18b44:	705a      	strb	r2, [r3, #1]
	return status;
   18b46:	68fb      	ldr	r3, [r7, #12]
}
   18b48:	4618      	mov	r0, r3
   18b4a:	3710      	adds	r7, #16
   18b4c:	46bd      	mov	sp, r7
   18b4e:	bd80      	pop	{r7, pc}
   18b50:	00007415 	.word	0x00007415

00018b54 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
   18b54:	b480      	push	{r7}
   18b56:	b083      	sub	sp, #12
   18b58:	af00      	add	r7, sp, #0
   18b5a:	6078      	str	r0, [r7, #4]
	timeout=1;
   18b5c:	687b      	ldr	r3, [r7, #4]
   18b5e:	2201      	movs	r2, #1
   18b60:	705a      	strb	r2, [r3, #1]
}
   18b62:	bf00      	nop
   18b64:	370c      	adds	r7, #12
   18b66:	46bd      	mov	sp, r7
   18b68:	bc80      	pop	{r7}
   18b6a:	4770      	bx	lr

00018b6c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   18b6c:	b580      	push	{r7, lr}
   18b6e:	b086      	sub	sp, #24
   18b70:	af00      	add	r7, sp, #0
   18b72:	60f8      	str	r0, [r7, #12]
   18b74:	60b9      	str	r1, [r7, #8]
   18b76:	607a      	str	r2, [r7, #4]
   18b78:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   18b7a:	68f8      	ldr	r0, [r7, #12]
   18b7c:	4b0d      	ldr	r3, [pc, #52]	; (18bb4 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   18b7e:	4798      	blx	r3
	task->interval = interval;
   18b80:	68fb      	ldr	r3, [r7, #12]
   18b82:	689b      	ldr	r3, [r3, #8]
   18b84:	687a      	ldr	r2, [r7, #4]
   18b86:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   18b88:	68fb      	ldr	r3, [r7, #12]
   18b8a:	689b      	ldr	r3, [r3, #8]
   18b8c:	68ba      	ldr	r2, [r7, #8]
   18b8e:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   18b90:	68fb      	ldr	r3, [r7, #12]
   18b92:	689b      	ldr	r3, [r3, #8]
   18b94:	78fa      	ldrb	r2, [r7, #3]
   18b96:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   18b98:	68fb      	ldr	r3, [r7, #12]
   18b9a:	691a      	ldr	r2, [r3, #16]
   18b9c:	68fb      	ldr	r3, [r7, #12]
   18b9e:	689b      	ldr	r3, [r3, #8]
   18ba0:	4619      	mov	r1, r3
   18ba2:	4610      	mov	r0, r2
   18ba4:	4b04      	ldr	r3, [pc, #16]	; (18bb8 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   18ba6:	4798      	blx	r3
   18ba8:	6178      	str	r0, [r7, #20]
	
	return status;
   18baa:	697b      	ldr	r3, [r7, #20]
}
   18bac:	4618      	mov	r0, r3
   18bae:	3718      	adds	r7, #24
   18bb0:	46bd      	mov	sp, r7
   18bb2:	bd80      	pop	{r7, pc}
   18bb4:	00018ca1 	.word	0x00018ca1
   18bb8:	00007481 	.word	0x00007481

00018bbc <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
		return status;
}
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
   18bbc:	b590      	push	{r4, r7, lr}
   18bbe:	b087      	sub	sp, #28
   18bc0:	af00      	add	r7, sp, #0
   18bc2:	60f8      	str	r0, [r7, #12]
   18bc4:	60b9      	str	r1, [r7, #8]
   18bc6:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   18bc8:	2300      	movs	r3, #0
   18bca:	687a      	ldr	r2, [r7, #4]
   18bcc:	68b9      	ldr	r1, [r7, #8]
   18bce:	68f8      	ldr	r0, [r7, #12]
   18bd0:	4c03      	ldr	r4, [pc, #12]	; (18be0 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
   18bd2:	47a0      	blx	r4
   18bd4:	6178      	str	r0, [r7, #20]
	return status;
   18bd6:	697b      	ldr	r3, [r7, #20]
}
   18bd8:	4618      	mov	r0, r3
   18bda:	371c      	adds	r7, #28
   18bdc:	46bd      	mov	sp, r7
   18bde:	bd90      	pop	{r4, r7, pc}
   18be0:	00018b6d 	.word	0x00018b6d

00018be4 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   18be4:	b590      	push	{r4, r7, lr}
   18be6:	b087      	sub	sp, #28
   18be8:	af00      	add	r7, sp, #0
   18bea:	60f8      	str	r0, [r7, #12]
   18bec:	60b9      	str	r1, [r7, #8]
   18bee:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   18bf0:	2300      	movs	r3, #0
   18bf2:	687a      	ldr	r2, [r7, #4]
   18bf4:	68b9      	ldr	r1, [r7, #8]
   18bf6:	68f8      	ldr	r0, [r7, #12]
   18bf8:	4c06      	ldr	r4, [pc, #24]	; (18c14 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
   18bfa:	47a0      	blx	r4
   18bfc:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   18bfe:	68fb      	ldr	r3, [r7, #12]
   18c00:	691b      	ldr	r3, [r3, #16]
   18c02:	4618      	mov	r0, r3
   18c04:	4b04      	ldr	r3, [pc, #16]	; (18c18 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
   18c06:	4798      	blx	r3
   18c08:	6178      	str	r0, [r7, #20]
	return status;
   18c0a:	697b      	ldr	r3, [r7, #20]
}
   18c0c:	4618      	mov	r0, r3
   18c0e:	371c      	adds	r7, #28
   18c10:	46bd      	mov	sp, r7
   18c12:	bd90      	pop	{r4, r7, pc}
   18c14:	00018b6d 	.word	0x00018b6d
   18c18:	000073ad 	.word	0x000073ad

00018c1c <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
   18c1c:	b580      	push	{r7, lr}
   18c1e:	b082      	sub	sp, #8
   18c20:	af00      	add	r7, sp, #0
   18c22:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   18c24:	687b      	ldr	r3, [r7, #4]
   18c26:	691a      	ldr	r2, [r3, #16]
   18c28:	687b      	ldr	r3, [r7, #4]
   18c2a:	689b      	ldr	r3, [r3, #8]
   18c2c:	4619      	mov	r1, r3
   18c2e:	4610      	mov	r0, r2
   18c30:	4b04      	ldr	r3, [pc, #16]	; (18c44 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
   18c32:	4798      	blx	r3
	task->cb=NULL;
   18c34:	687b      	ldr	r3, [r7, #4]
   18c36:	689b      	ldr	r3, [r3, #8]
   18c38:	2200      	movs	r2, #0
   18c3a:	60da      	str	r2, [r3, #12]
}
   18c3c:	bf00      	nop
   18c3e:	3708      	adds	r7, #8
   18c40:	46bd      	mov	sp, r7
   18c42:	bd80      	pop	{r7, pc}
   18c44:	00007585 	.word	0x00007585

00018c48 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
   18c48:	b580      	push	{r7, lr}
   18c4a:	b082      	sub	sp, #8
   18c4c:	af00      	add	r7, sp, #0
   18c4e:	6078      	str	r0, [r7, #4]
   18c50:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   18c52:	6839      	ldr	r1, [r7, #0]
   18c54:	6878      	ldr	r0, [r7, #4]
   18c56:	4b0f      	ldr	r3, [pc, #60]	; (18c94 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
   18c58:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   18c5a:	687b      	ldr	r3, [r7, #4]
   18c5c:	691b      	ldr	r3, [r3, #16]
   18c5e:	f103 0218 	add.w	r2, r3, #24
   18c62:	687b      	ldr	r3, [r7, #4]
   18c64:	689b      	ldr	r3, [r3, #8]
   18c66:	4619      	mov	r1, r3
   18c68:	4610      	mov	r0, r2
   18c6a:	4b0b      	ldr	r3, [pc, #44]	; (18c98 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
   18c6c:	4798      	blx	r3
   18c6e:	4603      	mov	r3, r0
   18c70:	2b00      	cmp	r3, #0
   18c72:	d007      	beq.n	18c84 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   18c74:	687b      	ldr	r3, [r7, #4]
   18c76:	691a      	ldr	r2, [r3, #16]
   18c78:	687b      	ldr	r3, [r7, #4]
   18c7a:	689b      	ldr	r3, [r3, #8]
   18c7c:	4619      	mov	r1, r3
   18c7e:	4610      	mov	r0, r2
   18c80:	4b06      	ldr	r3, [pc, #24]	; (18c9c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
   18c82:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   18c84:	687b      	ldr	r3, [r7, #4]
   18c86:	689b      	ldr	r3, [r3, #8]
   18c88:	2200      	movs	r2, #0
   18c8a:	60da      	str	r2, [r3, #12]
}
   18c8c:	bf00      	nop
   18c8e:	3708      	adds	r7, #8
   18c90:	46bd      	mov	sp, r7
   18c92:	bd80      	pop	{r7, pc}
   18c94:	00018cf9 	.word	0x00018cf9
   18c98:	0000816d 	.word	0x0000816d
   18c9c:	00007585 	.word	0x00007585

00018ca0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
   18ca0:	b480      	push	{r7}
   18ca2:	b085      	sub	sp, #20
   18ca4:	af00      	add	r7, sp, #0
   18ca6:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   18ca8:	2300      	movs	r3, #0
   18caa:	73fb      	strb	r3, [r7, #15]
   18cac:	7bfb      	ldrb	r3, [r7, #15]
   18cae:	2b03      	cmp	r3, #3
   18cb0:	dc18      	bgt.n	18ce4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
   18cb2:	7bfa      	ldrb	r2, [r7, #15]
   18cb4:	490f      	ldr	r1, [pc, #60]	; (18cf4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   18cb6:	4613      	mov	r3, r2
   18cb8:	009b      	lsls	r3, r3, #2
   18cba:	4413      	add	r3, r2
   18cbc:	009b      	lsls	r3, r3, #2
   18cbe:	440b      	add	r3, r1
   18cc0:	330c      	adds	r3, #12
   18cc2:	681b      	ldr	r3, [r3, #0]
   18cc4:	2b00      	cmp	r3, #0
   18cc6:	d109      	bne.n	18cdc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
   18cc8:	7bfa      	ldrb	r2, [r7, #15]
   18cca:	4613      	mov	r3, r2
   18ccc:	009b      	lsls	r3, r3, #2
   18cce:	4413      	add	r3, r2
   18cd0:	009b      	lsls	r3, r3, #2
   18cd2:	4a08      	ldr	r2, [pc, #32]	; (18cf4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   18cd4:	441a      	add	r2, r3
   18cd6:	687b      	ldr	r3, [r7, #4]
   18cd8:	609a      	str	r2, [r3, #8]
			return;
   18cda:	e006      	b.n	18cea <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   18cdc:	7bfb      	ldrb	r3, [r7, #15]
   18cde:	3301      	adds	r3, #1
   18ce0:	73fb      	strb	r3, [r7, #15]
   18ce2:	e7e3      	b.n	18cac <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
   18ce4:	687b      	ldr	r3, [r7, #4]
   18ce6:	4a03      	ldr	r2, [pc, #12]	; (18cf4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   18ce8:	609a      	str	r2, [r3, #8]

}
   18cea:	3714      	adds	r7, #20
   18cec:	46bd      	mov	sp, r7
   18cee:	bc80      	pop	{r7}
   18cf0:	4770      	bx	lr
   18cf2:	bf00      	nop
   18cf4:	2000a538 	.word	0x2000a538

00018cf8 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
   18cf8:	b480      	push	{r7}
   18cfa:	b085      	sub	sp, #20
   18cfc:	af00      	add	r7, sp, #0
   18cfe:	6078      	str	r0, [r7, #4]
   18d00:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   18d02:	2300      	movs	r3, #0
   18d04:	73fb      	strb	r3, [r7, #15]
   18d06:	7bfb      	ldrb	r3, [r7, #15]
   18d08:	2b03      	cmp	r3, #3
   18d0a:	dc19      	bgt.n	18d40 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   18d0c:	7bfa      	ldrb	r2, [r7, #15]
   18d0e:	490e      	ldr	r1, [pc, #56]	; (18d48 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
   18d10:	4613      	mov	r3, r2
   18d12:	009b      	lsls	r3, r3, #2
   18d14:	4413      	add	r3, r2
   18d16:	009b      	lsls	r3, r3, #2
   18d18:	440b      	add	r3, r1
   18d1a:	330c      	adds	r3, #12
   18d1c:	681a      	ldr	r2, [r3, #0]
   18d1e:	683b      	ldr	r3, [r7, #0]
   18d20:	429a      	cmp	r2, r3
   18d22:	d109      	bne.n	18d38 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   18d24:	7bfa      	ldrb	r2, [r7, #15]
   18d26:	4613      	mov	r3, r2
   18d28:	009b      	lsls	r3, r3, #2
   18d2a:	4413      	add	r3, r2
   18d2c:	009b      	lsls	r3, r3, #2
   18d2e:	4a06      	ldr	r2, [pc, #24]	; (18d48 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
   18d30:	441a      	add	r2, r3
   18d32:	687b      	ldr	r3, [r7, #4]
   18d34:	609a      	str	r2, [r3, #8]
			return;
   18d36:	e003      	b.n	18d40 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   18d38:	7bfb      	ldrb	r3, [r7, #15]
   18d3a:	3301      	adds	r3, #1
   18d3c:	73fb      	strb	r3, [r7, #15]
   18d3e:	e7e2      	b.n	18d06 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
   18d40:	3714      	adds	r7, #20
   18d42:	46bd      	mov	sp, r7
   18d44:	bc80      	pop	{r7}
   18d46:	4770      	bx	lr
   18d48:	2000a538 	.word	0x2000a538

00018d4c <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   18d4c:	b580      	push	{r7, lr}
   18d4e:	b082      	sub	sp, #8
   18d50:	af00      	add	r7, sp, #0
   18d52:	6078      	str	r0, [r7, #4]
   18d54:	6039      	str	r1, [r7, #0]
   18d56:	687b      	ldr	r3, [r7, #4]
   18d58:	2b01      	cmp	r3, #1
   18d5a:	d116      	bne.n	18d8a <_Z41__static_initialization_and_destruction_0ii+0x3e>
   18d5c:	683b      	ldr	r3, [r7, #0]
   18d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18d62:	4293      	cmp	r3, r2
   18d64:	d111      	bne.n	18d8a <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
   18d66:	490b      	ldr	r1, [pc, #44]	; (18d94 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   18d68:	480b      	ldr	r0, [pc, #44]	; (18d98 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   18d6a:	4b0c      	ldr	r3, [pc, #48]	; (18d9c <_Z41__static_initialization_and_destruction_0ii+0x50>)
   18d6c:	4798      	blx	r3
   18d6e:	4a0c      	ldr	r2, [pc, #48]	; (18da0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   18d70:	490c      	ldr	r1, [pc, #48]	; (18da4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   18d72:	4809      	ldr	r0, [pc, #36]	; (18d98 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   18d74:	4b0c      	ldr	r3, [pc, #48]	; (18da8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   18d76:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   18d78:	490c      	ldr	r1, [pc, #48]	; (18dac <_Z41__static_initialization_and_destruction_0ii+0x60>)
   18d7a:	480d      	ldr	r0, [pc, #52]	; (18db0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   18d7c:	4b07      	ldr	r3, [pc, #28]	; (18d9c <_Z41__static_initialization_and_destruction_0ii+0x50>)
   18d7e:	4798      	blx	r3
   18d80:	4a07      	ldr	r2, [pc, #28]	; (18da0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   18d82:	4908      	ldr	r1, [pc, #32]	; (18da4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   18d84:	480a      	ldr	r0, [pc, #40]	; (18db0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   18d86:	4b08      	ldr	r3, [pc, #32]	; (18da8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   18d88:	4798      	blx	r3
   18d8a:	bf00      	nop
   18d8c:	3708      	adds	r7, #8
   18d8e:	46bd      	mov	sp, r7
   18d90:	bd80      	pop	{r7, pc}
   18d92:	bf00      	nop
   18d94:	2000a868 	.word	0x2000a868
   18d98:	2000a588 	.word	0x2000a588
   18d9c:	00018a79 	.word	0x00018a79
   18da0:	20000000 	.word	0x20000000
   18da4:	00018ab5 	.word	0x00018ab5
   18da8:	00019d1d 	.word	0x00019d1d
   18dac:	2000a7a0 	.word	0x2000a7a0
   18db0:	2000a5a8 	.word	0x2000a5a8

00018db4 <_GLOBAL__sub_I_ptrTimerSerialClass>:
   18db4:	b580      	push	{r7, lr}
   18db6:	af00      	add	r7, sp, #0
   18db8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18dbc:	2001      	movs	r0, #1
   18dbe:	4b01      	ldr	r3, [pc, #4]	; (18dc4 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
   18dc0:	4798      	blx	r3
   18dc2:	bd80      	pop	{r7, pc}
   18dc4:	00018d4d 	.word	0x00018d4d

00018dc8 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc>:

I2C_Asyn_Class	*ptrI2C_Asyn_Class;
//static list_descriptor i2cList=NULL;
//i2cList=NULL;
list_descriptor i2cList;
static void GetRelativeClassPointer(i2c_m_async_desc*  i2c){
   18dc8:	b580      	push	{r7, lr}
   18dca:	b084      	sub	sp, #16
   18dcc:	af00      	add	r7, sp, #0
   18dce:	6078      	str	r0, [r7, #4]
	uint32_t  *ptr=(uint32_t*)ptrI2C_Asyn_Class->GetClassPointer(i2c);;
   18dd0:	4b08      	ldr	r3, [pc, #32]	; (18df4 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   18dd2:	681b      	ldr	r3, [r3, #0]
   18dd4:	6879      	ldr	r1, [r7, #4]
   18dd6:	4618      	mov	r0, r3
   18dd8:	4b07      	ldr	r3, [pc, #28]	; (18df8 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x30>)
   18dda:	4798      	blx	r3
   18ddc:	4603      	mov	r3, r0
   18dde:	60fb      	str	r3, [r7, #12]
	I2C_Asyn_Class	*ptrClass=(I2C_Asyn_Class*)ptr;
   18de0:	68fb      	ldr	r3, [r7, #12]
   18de2:	60bb      	str	r3, [r7, #8]
	ptrI2C_Asyn_Class=ptrClass;
   18de4:	4a03      	ldr	r2, [pc, #12]	; (18df4 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   18de6:	68bb      	ldr	r3, [r7, #8]
   18de8:	6013      	str	r3, [r2, #0]
}
   18dea:	bf00      	nop
   18dec:	3710      	adds	r7, #16
   18dee:	46bd      	mov	sp, r7
   18df0:	bd80      	pop	{r7, pc}
   18df2:	bf00      	nop
   18df4:	2000a6c8 	.word	0x2000a6c8
   18df8:	000191d5 	.word	0x000191d5

00018dfc <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
   18dfc:	b580      	push	{r7, lr}
   18dfe:	b082      	sub	sp, #8
   18e00:	af00      	add	r7, sp, #0
   18e02:	6078      	str	r0, [r7, #4]
	
	GetRelativeClassPointer(i2c);
   18e04:	6878      	ldr	r0, [r7, #4]
   18e06:	4b05      	ldr	r3, [pc, #20]	; (18e1c <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x20>)
   18e08:	4798      	blx	r3
	ptrI2C_Asyn_Class->txReady=true;
   18e0a:	4b05      	ldr	r3, [pc, #20]	; (18e20 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x24>)
   18e0c:	681b      	ldr	r3, [r3, #0]
   18e0e:	2201      	movs	r2, #1
   18e10:	751a      	strb	r2, [r3, #20]


}
   18e12:	bf00      	nop
   18e14:	3708      	adds	r7, #8
   18e16:	46bd      	mov	sp, r7
   18e18:	bd80      	pop	{r7, pc}
   18e1a:	bf00      	nop
   18e1c:	00018dc9 	.word	0x00018dc9
   18e20:	2000a6c8 	.word	0x2000a6c8

00018e24 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
   18e24:	b580      	push	{r7, lr}
   18e26:	b082      	sub	sp, #8
   18e28:	af00      	add	r7, sp, #0
   18e2a:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   18e2c:	6878      	ldr	r0, [r7, #4]
   18e2e:	4b05      	ldr	r3, [pc, #20]	; (18e44 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x20>)
   18e30:	4798      	blx	r3
	ptrI2C_Asyn_Class->rxReady=true;
   18e32:	4b05      	ldr	r3, [pc, #20]	; (18e48 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x24>)
   18e34:	681b      	ldr	r3, [r3, #0]
   18e36:	2201      	movs	r2, #1
   18e38:	755a      	strb	r2, [r3, #21]
}
   18e3a:	bf00      	nop
   18e3c:	3708      	adds	r7, #8
   18e3e:	46bd      	mov	sp, r7
   18e40:	bd80      	pop	{r7, pc}
   18e42:	bf00      	nop
   18e44:	00018dc9 	.word	0x00018dc9
   18e48:	2000a6c8 	.word	0x2000a6c8

00018e4c <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
   18e4c:	b580      	push	{r7, lr}
   18e4e:	b082      	sub	sp, #8
   18e50:	af00      	add	r7, sp, #0
   18e52:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   18e54:	6878      	ldr	r0, [r7, #4]
   18e56:	4b09      	ldr	r3, [pc, #36]	; (18e7c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
   18e58:	4798      	blx	r3
		ptrI2C_Asyn_Class->Clear_ack();
   18e5a:	4b09      	ldr	r3, [pc, #36]	; (18e80 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   18e5c:	681b      	ldr	r3, [r3, #0]
   18e5e:	4618      	mov	r0, r3
   18e60:	4b08      	ldr	r3, [pc, #32]	; (18e84 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x38>)
   18e62:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
   18e64:	4b06      	ldr	r3, [pc, #24]	; (18e80 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   18e66:	681b      	ldr	r3, [r3, #0]
   18e68:	2201      	movs	r2, #1
   18e6a:	751a      	strb	r2, [r3, #20]
		ptrI2C_Asyn_Class->rxReady=true;
   18e6c:	4b04      	ldr	r3, [pc, #16]	; (18e80 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   18e6e:	681b      	ldr	r3, [r3, #0]
   18e70:	2201      	movs	r2, #1
   18e72:	755a      	strb	r2, [r3, #21]
 }
   18e74:	bf00      	nop
   18e76:	3708      	adds	r7, #8
   18e78:	46bd      	mov	sp, r7
   18e7a:	bd80      	pop	{r7, pc}
   18e7c:	00018dc9 	.word	0x00018dc9
   18e80:	2000a6c8 	.word	0x2000a6c8
   18e84:	000190b9 	.word	0x000190b9

00018e88 <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
   18e88:	b580      	push	{r7, lr}
   18e8a:	b082      	sub	sp, #8
   18e8c:	af00      	add	r7, sp, #0
   18e8e:	6078      	str	r0, [r7, #4]
   18e90:	687b      	ldr	r3, [r7, #4]
   18e92:	4618      	mov	r0, r3
   18e94:	4b06      	ldr	r3, [pc, #24]	; (18eb0 <_ZN14I2C_Asyn_ClassC1Ev+0x28>)
   18e96:	4798      	blx	r3
{
	//ptrI2CAsynDescr=&I2C_EXPANDER;
	ptrClass=this;
   18e98:	687b      	ldr	r3, [r7, #4]
   18e9a:	687a      	ldr	r2, [r7, #4]
   18e9c:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   18e9e:	4a05      	ldr	r2, [pc, #20]	; (18eb4 <_ZN14I2C_Asyn_ClassC1Ev+0x2c>)
   18ea0:	687b      	ldr	r3, [r7, #4]
   18ea2:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
   18ea4:	687b      	ldr	r3, [r7, #4]
   18ea6:	4618      	mov	r0, r3
   18ea8:	3708      	adds	r7, #8
   18eaa:	46bd      	mov	sp, r7
   18eac:	bd80      	pop	{r7, pc}
   18eae:	bf00      	nop
   18eb0:	000190ed 	.word	0x000190ed
   18eb4:	2000a6c8 	.word	0x2000a6c8

00018eb8 <_ZN14I2C_Asyn_ClassD1Ev>:
	isOK=false;
	initiated=false;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
   18eb8:	b580      	push	{r7, lr}
   18eba:	b082      	sub	sp, #8
   18ebc:	af00      	add	r7, sp, #0
   18ebe:	6078      	str	r0, [r7, #4]
   18ec0:	687b      	ldr	r3, [r7, #4]
   18ec2:	4618      	mov	r0, r3
   18ec4:	4b03      	ldr	r3, [pc, #12]	; (18ed4 <_ZN14I2C_Asyn_ClassD1Ev+0x1c>)
   18ec6:	4798      	blx	r3
{

} //~I2C_Asyn_Class
   18ec8:	687b      	ldr	r3, [r7, #4]
   18eca:	4618      	mov	r0, r3
   18ecc:	3708      	adds	r7, #8
   18ece:	46bd      	mov	sp, r7
   18ed0:	bd80      	pop	{r7, pc}
   18ed2:	bf00      	nop
   18ed4:	0001910d 	.word	0x0001910d

00018ed8 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
   18ed8:	b480      	push	{r7}
   18eda:	b083      	sub	sp, #12
   18edc:	af00      	add	r7, sp, #0
   18ede:	6078      	str	r0, [r7, #4]
   18ee0:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
   18ee2:	687b      	ldr	r3, [r7, #4]
   18ee4:	683a      	ldr	r2, [r7, #0]
   18ee6:	62da      	str	r2, [r3, #44]	; 0x2c
	ptrClass=this;
   18ee8:	687b      	ldr	r3, [r7, #4]
   18eea:	687a      	ldr	r2, [r7, #4]
   18eec:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   18eee:	4a04      	ldr	r2, [pc, #16]	; (18f00 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x28>)
   18ef0:	687b      	ldr	r3, [r7, #4]
   18ef2:	6013      	str	r3, [r2, #0]
}
   18ef4:	bf00      	nop
   18ef6:	370c      	adds	r7, #12
   18ef8:	46bd      	mov	sp, r7
   18efa:	bc80      	pop	{r7}
   18efc:	4770      	bx	lr
   18efe:	bf00      	nop
   18f00:	2000a6c8 	.word	0x2000a6c8

00018f04 <_ZN14I2C_Asyn_Class4InitEv>:

bool	I2C_Asyn_Class::Init(void){
   18f04:	b580      	push	{r7, lr}
   18f06:	b084      	sub	sp, #16
   18f08:	af00      	add	r7, sp, #0
   18f0a:	6078      	str	r0, [r7, #4]
	txBuffer=txStaticBuffer;
   18f0c:	687b      	ldr	r3, [r7, #4]
   18f0e:	4a2c      	ldr	r2, [pc, #176]	; (18fc0 <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   18f10:	621a      	str	r2, [r3, #32]
	rxBuffer=txStaticBuffer;
   18f12:	687b      	ldr	r3, [r7, #4]
   18f14:	4a2a      	ldr	r2, [pc, #168]	; (18fc0 <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   18f16:	625a      	str	r2, [r3, #36]	; 0x24

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
   18f18:	687b      	ldr	r3, [r7, #4]
   18f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18f1c:	687b      	ldr	r3, [r7, #4]
   18f1e:	3328      	adds	r3, #40	; 0x28
   18f20:	4619      	mov	r1, r3
   18f22:	4610      	mov	r0, r2
   18f24:	4b27      	ldr	r3, [pc, #156]	; (18fc4 <_ZN14I2C_Asyn_Class4InitEv+0xc0>)
   18f26:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
   18f28:	687b      	ldr	r3, [r7, #4]
   18f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18f2c:	4618      	mov	r0, r3
   18f2e:	4b26      	ldr	r3, [pc, #152]	; (18fc8 <_ZN14I2C_Asyn_Class4InitEv+0xc4>)
   18f30:	4798      	blx	r3
   18f32:	4603      	mov	r3, r0
   18f34:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
   18f36:	687b      	ldr	r3, [r7, #4]
   18f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18f3a:	4a24      	ldr	r2, [pc, #144]	; (18fcc <_ZN14I2C_Asyn_Class4InitEv+0xc8>)
   18f3c:	2101      	movs	r1, #1
   18f3e:	4618      	mov	r0, r3
   18f40:	4b23      	ldr	r3, [pc, #140]	; (18fd0 <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   18f42:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
   18f44:	687b      	ldr	r3, [r7, #4]
   18f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18f48:	4a22      	ldr	r2, [pc, #136]	; (18fd4 <_ZN14I2C_Asyn_Class4InitEv+0xd0>)
   18f4a:	2102      	movs	r1, #2
   18f4c:	4618      	mov	r0, r3
   18f4e:	4b20      	ldr	r3, [pc, #128]	; (18fd0 <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   18f50:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
   18f52:	687b      	ldr	r3, [r7, #4]
   18f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18f56:	4a20      	ldr	r2, [pc, #128]	; (18fd8 <_ZN14I2C_Asyn_Class4InitEv+0xd4>)
   18f58:	2100      	movs	r1, #0
   18f5a:	4618      	mov	r0, r3
   18f5c:	4b1c      	ldr	r3, [pc, #112]	; (18fd0 <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   18f5e:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	coupleKey.ptrI2CAsynClass=(uint32_t)ptrClass;
   18f60:	687b      	ldr	r3, [r7, #4]
   18f62:	69db      	ldr	r3, [r3, #28]
   18f64:	461a      	mov	r2, r3
   18f66:	687b      	ldr	r3, [r7, #4]
   18f68:	641a      	str	r2, [r3, #64]	; 0x40
	coupleKey.i2cDescr=ptrI2CAsynDescr;
   18f6a:	687b      	ldr	r3, [r7, #4]
   18f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18f6e:	687b      	ldr	r3, [r7, #4]
   18f70:	63da      	str	r2, [r3, #60]	; 0x3c
	coupleKey.dummy=(uint32_t)ptrClass;
   18f72:	687b      	ldr	r3, [r7, #4]
   18f74:	69db      	ldr	r3, [r3, #28]
   18f76:	461a      	mov	r2, r3
   18f78:	687b      	ldr	r3, [r7, #4]
   18f7a:	639a      	str	r2, [r3, #56]	; 0x38
	AddI2CObject(coupleKey);
   18f7c:	687a      	ldr	r2, [r7, #4]
   18f7e:	687b      	ldr	r3, [r7, #4]
   18f80:	3334      	adds	r3, #52	; 0x34
   18f82:	4619      	mov	r1, r3
   18f84:	4610      	mov	r0, r2
   18f86:	4b15      	ldr	r3, [pc, #84]	; (18fdc <_ZN14I2C_Asyn_Class4InitEv+0xd8>)
   18f88:	4798      	blx	r3
	txReady=true;
   18f8a:	687b      	ldr	r3, [r7, #4]
   18f8c:	2201      	movs	r2, #1
   18f8e:	751a      	strb	r2, [r3, #20]
	rxReady=true;
   18f90:	687b      	ldr	r3, [r7, #4]
   18f92:	2201      	movs	r2, #1
   18f94:	755a      	strb	r2, [r3, #21]
	isOK=ena==0;
   18f96:	7bfb      	ldrb	r3, [r7, #15]
   18f98:	2b00      	cmp	r3, #0
   18f9a:	bf0c      	ite	eq
   18f9c:	2301      	moveq	r3, #1
   18f9e:	2300      	movne	r3, #0
   18fa0:	b2da      	uxtb	r2, r3
   18fa2:	687b      	ldr	r3, [r7, #4]
   18fa4:	761a      	strb	r2, [r3, #24]
	initiated=isOK;
   18fa6:	687b      	ldr	r3, [r7, #4]
   18fa8:	7e1b      	ldrb	r3, [r3, #24]
   18faa:	b2da      	uxtb	r2, r3
   18fac:	687b      	ldr	r3, [r7, #4]
   18fae:	759a      	strb	r2, [r3, #22]
	return isOK;
   18fb0:	687b      	ldr	r3, [r7, #4]
   18fb2:	7e1b      	ldrb	r3, [r3, #24]
   18fb4:	b2db      	uxtb	r3, r3
	
}
   18fb6:	4618      	mov	r0, r3
   18fb8:	3710      	adds	r7, #16
   18fba:	46bd      	mov	sp, r7
   18fbc:	bd80      	pop	{r7, pc}
   18fbe:	bf00      	nop
   18fc0:	2000a5c8 	.word	0x2000a5c8
   18fc4:	00006d03 	.word	0x00006d03
   18fc8:	00006c15 	.word	0x00006c15
   18fcc:	00018dfd 	.word	0x00018dfd
   18fd0:	00006cbb 	.word	0x00006cbb
   18fd4:	00018e25 	.word	0x00018e25
   18fd8:	00018e4d 	.word	0x00018e4d
   18fdc:	00019121 	.word	0x00019121

00018fe0 <_ZN14I2C_Asyn_Class4InitEh>:
bool	I2C_Asyn_Class::Init(uint8_t add){
   18fe0:	b580      	push	{r7, lr}
   18fe2:	b082      	sub	sp, #8
   18fe4:	af00      	add	r7, sp, #0
   18fe6:	6078      	str	r0, [r7, #4]
   18fe8:	460b      	mov	r3, r1
   18fea:	70fb      	strb	r3, [r7, #3]
	isOK=Init();
   18fec:	6878      	ldr	r0, [r7, #4]
   18fee:	4b0e      	ldr	r3, [pc, #56]	; (19028 <_ZN14I2C_Asyn_Class4InitEh+0x48>)
   18ff0:	4798      	blx	r3
   18ff2:	4603      	mov	r3, r0
   18ff4:	461a      	mov	r2, r3
   18ff6:	687b      	ldr	r3, [r7, #4]
   18ff8:	761a      	strb	r2, [r3, #24]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
   18ffa:	687b      	ldr	r3, [r7, #4]
   18ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18ffe:	78fa      	ldrb	r2, [r7, #3]
   19000:	b211      	sxth	r1, r2
   19002:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19006:	4618      	mov	r0, r3
   19008:	4b08      	ldr	r3, [pc, #32]	; (1902c <_ZN14I2C_Asyn_Class4InitEh+0x4c>)
   1900a:	4798      	blx	r3
	txReady=true;
   1900c:	687b      	ldr	r3, [r7, #4]
   1900e:	2201      	movs	r2, #1
   19010:	751a      	strb	r2, [r3, #20]
	rxReady=true;
   19012:	687b      	ldr	r3, [r7, #4]
   19014:	2201      	movs	r2, #1
   19016:	755a      	strb	r2, [r3, #21]
	return isOK;
   19018:	687b      	ldr	r3, [r7, #4]
   1901a:	7e1b      	ldrb	r3, [r3, #24]
   1901c:	b2db      	uxtb	r3, r3
}
   1901e:	4618      	mov	r0, r3
   19020:	3708      	adds	r7, #8
   19022:	46bd      	mov	sp, r7
   19024:	bd80      	pop	{r7, pc}
   19026:	bf00      	nop
   19028:	00018f05 	.word	0x00018f05
   1902c:	00006c81 	.word	0x00006c81

00019030 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
   19030:	b580      	push	{r7, lr}
   19032:	b084      	sub	sp, #16
   19034:	af00      	add	r7, sp, #0
   19036:	60f8      	str	r0, [r7, #12]
   19038:	60b9      	str	r1, [r7, #8]
   1903a:	4613      	mov	r3, r2
   1903c:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
   1903e:	68fb      	ldr	r3, [r7, #12]
   19040:	7d1b      	ldrb	r3, [r3, #20]
   19042:	b2db      	uxtb	r3, r3
   19044:	f083 0301 	eor.w	r3, r3, #1
   19048:	b2db      	uxtb	r3, r3
   1904a:	2b00      	cmp	r3, #0
   1904c:	d000      	beq.n	19050 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
   1904e:	e7f6      	b.n	1903e <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
   19050:	68fb      	ldr	r3, [r7, #12]
   19052:	2200      	movs	r2, #0
   19054:	751a      	strb	r2, [r3, #20]
	return io_write(I2C_io, buffer, lenght);
   19056:	68fb      	ldr	r3, [r7, #12]
   19058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1905a:	88fa      	ldrh	r2, [r7, #6]
   1905c:	68b9      	ldr	r1, [r7, #8]
   1905e:	4618      	mov	r0, r3
   19060:	4b03      	ldr	r3, [pc, #12]	; (19070 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
   19062:	4798      	blx	r3
   19064:	4603      	mov	r3, r0
}
   19066:	4618      	mov	r0, r3
   19068:	3710      	adds	r7, #16
   1906a:	46bd      	mov	sp, r7
   1906c:	bd80      	pop	{r7, pc}
   1906e:	bf00      	nop
   19070:	00019c7d 	.word	0x00019c7d

00019074 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
   19074:	b580      	push	{r7, lr}
   19076:	b084      	sub	sp, #16
   19078:	af00      	add	r7, sp, #0
   1907a:	60f8      	str	r0, [r7, #12]
   1907c:	60b9      	str	r1, [r7, #8]
   1907e:	4613      	mov	r3, r2
   19080:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
   19082:	68fb      	ldr	r3, [r7, #12]
   19084:	7d5b      	ldrb	r3, [r3, #21]
   19086:	b2db      	uxtb	r3, r3
   19088:	f083 0301 	eor.w	r3, r3, #1
   1908c:	b2db      	uxtb	r3, r3
   1908e:	2b00      	cmp	r3, #0
   19090:	d000      	beq.n	19094 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
   19092:	e7f6      	b.n	19082 <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
   19094:	68fb      	ldr	r3, [r7, #12]
   19096:	2200      	movs	r2, #0
   19098:	755a      	strb	r2, [r3, #21]
		return io_read(I2C_io, buffer, lenght);
   1909a:	68fb      	ldr	r3, [r7, #12]
   1909c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1909e:	88fa      	ldrh	r2, [r7, #6]
   190a0:	68b9      	ldr	r1, [r7, #8]
   190a2:	4618      	mov	r0, r3
   190a4:	4b03      	ldr	r3, [pc, #12]	; (190b4 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
   190a6:	4798      	blx	r3
   190a8:	4603      	mov	r3, r0
}
   190aa:	4618      	mov	r0, r3
   190ac:	3710      	adds	r7, #16
   190ae:	46bd      	mov	sp, r7
   190b0:	bd80      	pop	{r7, pc}
   190b2:	bf00      	nop
   190b4:	00019ccd 	.word	0x00019ccd

000190b8 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
   190b8:	b480      	push	{r7}
   190ba:	b083      	sub	sp, #12
   190bc:	af00      	add	r7, sp, #0
   190be:	6078      	str	r0, [r7, #4]
	 ack=false;
   190c0:	687b      	ldr	r3, [r7, #4]
   190c2:	2200      	movs	r2, #0
   190c4:	75da      	strb	r2, [r3, #23]
	 return ack;
   190c6:	687b      	ldr	r3, [r7, #4]
   190c8:	7ddb      	ldrb	r3, [r3, #23]
   190ca:	b2db      	uxtb	r3, r3
 }
   190cc:	4618      	mov	r0, r3
   190ce:	370c      	adds	r7, #12
   190d0:	46bd      	mov	sp, r7
   190d2:	bc80      	pop	{r7}
   190d4:	4770      	bx	lr

000190d6 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
   190d6:	b480      	push	{r7}
   190d8:	b083      	sub	sp, #12
   190da:	af00      	add	r7, sp, #0
   190dc:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
   190de:	687b      	ldr	r3, [r7, #4]
   190e0:	681b      	ldr	r3, [r3, #0]
}
   190e2:	4618      	mov	r0, r3
   190e4:	370c      	adds	r7, #12
   190e6:	46bd      	mov	sp, r7
   190e8:	bc80      	pop	{r7}
   190ea:	4770      	bx	lr

000190ec <_ZN14I2C_ObjectListC1Ev>:

#include "I2C_ObjectList.h"
#include "I2C_Asyn_Class.h"

// default constructor
I2C_ObjectList::I2C_ObjectList()
   190ec:	b480      	push	{r7}
   190ee:	b083      	sub	sp, #12
   190f0:	af00      	add	r7, sp, #0
   190f2:	6078      	str	r0, [r7, #4]
{
	objList=&i2cList;
   190f4:	687b      	ldr	r3, [r7, #4]
   190f6:	4a04      	ldr	r2, [pc, #16]	; (19108 <_ZN14I2C_ObjectListC1Ev+0x1c>)
   190f8:	611a      	str	r2, [r3, #16]
} //I2C_ObjectList
   190fa:	687b      	ldr	r3, [r7, #4]
   190fc:	4618      	mov	r0, r3
   190fe:	370c      	adds	r7, #12
   19100:	46bd      	mov	sp, r7
   19102:	bc80      	pop	{r7}
   19104:	4770      	bx	lr
   19106:	bf00      	nop
   19108:	2000a6cc 	.word	0x2000a6cc

0001910c <_ZN14I2C_ObjectListD1Ev>:

// default destructor
I2C_ObjectList::~I2C_ObjectList()
   1910c:	b480      	push	{r7}
   1910e:	b083      	sub	sp, #12
   19110:	af00      	add	r7, sp, #0
   19112:	6078      	str	r0, [r7, #4]
{
} //~I2C_ObjectList
   19114:	687b      	ldr	r3, [r7, #4]
   19116:	4618      	mov	r0, r3
   19118:	370c      	adds	r7, #12
   1911a:	46bd      	mov	sp, r7
   1911c:	bc80      	pop	{r7}
   1911e:	4770      	bx	lr

00019120 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor>:

int I2C_ObjectList::AddI2CObject(I2CPointerAndDescriptor& ck ){
   19120:	b580      	push	{r7, lr}
   19122:	b082      	sub	sp, #8
   19124:	af00      	add	r7, sp, #0
   19126:	6078      	str	r0, [r7, #4]
   19128:	6039      	str	r1, [r7, #0]
	
		ASSERT((objList)&&(&ck));
   1912a:	687b      	ldr	r3, [r7, #4]
   1912c:	691b      	ldr	r3, [r3, #16]
   1912e:	2b00      	cmp	r3, #0
   19130:	d004      	beq.n	1913c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   19132:	683b      	ldr	r3, [r7, #0]
   19134:	2b00      	cmp	r3, #0
   19136:	d001      	beq.n	1913c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   19138:	2301      	movs	r3, #1
   1913a:	e000      	b.n	1913e <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1e>
   1913c:	2300      	movs	r3, #0
   1913e:	2219      	movs	r2, #25
   19140:	4910      	ldr	r1, [pc, #64]	; (19184 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   19142:	4618      	mov	r0, r3
   19144:	4b10      	ldr	r3, [pc, #64]	; (19188 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   19146:	4798      	blx	r3
		if (is_list_element(objList,&ck)) {
   19148:	687b      	ldr	r3, [r7, #4]
   1914a:	691b      	ldr	r3, [r3, #16]
   1914c:	6839      	ldr	r1, [r7, #0]
   1914e:	4618      	mov	r0, r3
   19150:	4b0e      	ldr	r3, [pc, #56]	; (1918c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x6c>)
   19152:	4798      	blx	r3
   19154:	4603      	mov	r3, r0
   19156:	2b00      	cmp	r3, #0
   19158:	d007      	beq.n	1916a <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x4a>

			ASSERT(false);
   1915a:	221c      	movs	r2, #28
   1915c:	4909      	ldr	r1, [pc, #36]	; (19184 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   1915e:	2000      	movs	r0, #0
   19160:	4b09      	ldr	r3, [pc, #36]	; (19188 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   19162:	4798      	blx	r3
			return ERR_ALREADY_INITIALIZED;
   19164:	f06f 0311 	mvn.w	r3, #17
   19168:	e007      	b.n	1917a <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x5a>
		}
		AddObject(objList,&ck);
   1916a:	687b      	ldr	r3, [r7, #4]
   1916c:	691b      	ldr	r3, [r3, #16]
   1916e:	683a      	ldr	r2, [r7, #0]
   19170:	4619      	mov	r1, r3
   19172:	6878      	ldr	r0, [r7, #4]
   19174:	4b06      	ldr	r3, [pc, #24]	; (19190 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x70>)
   19176:	4798      	blx	r3
		return ERR_NONE;
   19178:	2300      	movs	r3, #0
}
   1917a:	4618      	mov	r0, r3
   1917c:	3708      	adds	r7, #8
   1917e:	46bd      	mov	sp, r7
   19180:	bd80      	pop	{r7, pc}
   19182:	bf00      	nop
   19184:	00022098 	.word	0x00022098
   19188:	00008145 	.word	0x00008145
   1918c:	0000816d 	.word	0x0000816d
   19190:	00019195 	.word	0x00019195

00019194 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor>:
		coupleKey.i2cDescr=ptrI2C;
		ck=coupleKey;
			
}

void I2C_ObjectList::AddObject(list_descriptor *list,I2CPointerAndDescriptor* nck){
   19194:	b580      	push	{r7, lr}
   19196:	b086      	sub	sp, #24
   19198:	af00      	add	r7, sp, #0
   1919a:	60f8      	str	r0, [r7, #12]
   1919c:	60b9      	str	r1, [r7, #8]
   1919e:	607a      	str	r2, [r7, #4]
		I2CPointerAndDescriptor *it, *head = (I2CPointerAndDescriptor *)list_get_head(list);
   191a0:	68b8      	ldr	r0, [r7, #8]
   191a2:	4b09      	ldr	r3, [pc, #36]	; (191c8 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x34>)
   191a4:	4798      	blx	r3
   191a6:	6178      	str	r0, [r7, #20]

		if (!head) {
   191a8:	697b      	ldr	r3, [r7, #20]
   191aa:	2b00      	cmp	r3, #0
   191ac:	d104      	bne.n	191b8 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x24>
			list_insert_as_head(list, nck);
   191ae:	6879      	ldr	r1, [r7, #4]
   191b0:	68b8      	ldr	r0, [r7, #8]
   191b2:	4b06      	ldr	r3, [pc, #24]	; (191cc <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x38>)
   191b4:	4798      	blx	r3
			return;
   191b6:	e003      	b.n	191c0 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x2c>
		}else{
			list_insert_at_end(list,nck);
   191b8:	6879      	ldr	r1, [r7, #4]
   191ba:	68b8      	ldr	r0, [r7, #8]
   191bc:	4b04      	ldr	r3, [pc, #16]	; (191d0 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x3c>)
   191be:	4798      	blx	r3
		}
}
   191c0:	3718      	adds	r7, #24
   191c2:	46bd      	mov	sp, r7
   191c4:	bd80      	pop	{r7, pc}
   191c6:	bf00      	nop
   191c8:	000190d7 	.word	0x000190d7
   191cc:	000081a5 	.word	0x000081a5
   191d0:	00008221 	.word	0x00008221

000191d4 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc>:

uint32_t I2C_ObjectList::GetClassPointer(i2c_m_async_desc*	i2cDescr){
   191d4:	b480      	push	{r7}
   191d6:	b087      	sub	sp, #28
   191d8:	af00      	add	r7, sp, #0
   191da:	6078      	str	r0, [r7, #4]
   191dc:	6039      	str	r1, [r7, #0]
		struct list_element *it;
		//I2CPointerAndDescriptor *it;
		I2CPointerAndDescriptor *k;
		uint32_t ptr;
		for (it = objList->head; it; it = it->next) {
   191de:	687b      	ldr	r3, [r7, #4]
   191e0:	691b      	ldr	r3, [r3, #16]
   191e2:	681b      	ldr	r3, [r3, #0]
   191e4:	617b      	str	r3, [r7, #20]
   191e6:	697b      	ldr	r3, [r7, #20]
   191e8:	2b00      	cmp	r3, #0
   191ea:	d00f      	beq.n	1920c <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x38>
			k=(I2CPointerAndDescriptor*)it;
   191ec:	697b      	ldr	r3, [r7, #20]
   191ee:	613b      	str	r3, [r7, #16]
			
			if (k->i2cDescr== i2cDescr){
   191f0:	693b      	ldr	r3, [r7, #16]
   191f2:	689a      	ldr	r2, [r3, #8]
   191f4:	683b      	ldr	r3, [r7, #0]
   191f6:	429a      	cmp	r2, r3
   191f8:	d104      	bne.n	19204 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x30>
				ptr=k->ptrI2CAsynClass;
   191fa:	693b      	ldr	r3, [r7, #16]
   191fc:	68db      	ldr	r3, [r3, #12]
   191fe:	60fb      	str	r3, [r7, #12]
				return ptr;
   19200:	68fb      	ldr	r3, [r7, #12]
   19202:	e004      	b.n	1920e <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x3a>
		for (it = objList->head; it; it = it->next) {
   19204:	697b      	ldr	r3, [r7, #20]
   19206:	681b      	ldr	r3, [r3, #0]
   19208:	617b      	str	r3, [r7, #20]
   1920a:	e7ec      	b.n	191e6 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x12>
			}
		}

		return 0;
   1920c:	2300      	movs	r3, #0
   1920e:	4618      	mov	r0, r3
   19210:	371c      	adds	r7, #28
   19212:	46bd      	mov	sp, r7
   19214:	bc80      	pop	{r7}
   19216:	4770      	bx	lr

00019218 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   19218:	b480      	push	{r7}
   1921a:	b083      	sub	sp, #12
   1921c:	af00      	add	r7, sp, #0
   1921e:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   19220:	687b      	ldr	r3, [r7, #4]
   19222:	4618      	mov	r0, r3
   19224:	370c      	adds	r7, #12
   19226:	46bd      	mov	sp, r7
   19228:	bc80      	pop	{r7}
   1922a:	4770      	bx	lr

0001922c <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   1922c:	b480      	push	{r7}
   1922e:	b083      	sub	sp, #12
   19230:	af00      	add	r7, sp, #0
   19232:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   19234:	687b      	ldr	r3, [r7, #4]
   19236:	4618      	mov	r0, r3
   19238:	370c      	adds	r7, #12
   1923a:	46bd      	mov	sp, r7
   1923c:	bc80      	pop	{r7}
   1923e:	4770      	bx	lr

00019240 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   19240:	b480      	push	{r7}
   19242:	b083      	sub	sp, #12
   19244:	af00      	add	r7, sp, #0
   19246:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   19248:	4b04      	ldr	r3, [pc, #16]	; (1925c <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   1924a:	681b      	ldr	r3, [r3, #0]
   1924c:	2201      	movs	r2, #1
   1924e:	709a      	strb	r2, [r3, #2]
	asm("nop");
   19250:	bf00      	nop
}
   19252:	bf00      	nop
   19254:	370c      	adds	r7, #12
   19256:	46bd      	mov	sp, r7
   19258:	bc80      	pop	{r7}
   1925a:	4770      	bx	lr
   1925c:	2000a6d0 	.word	0x2000a6d0

00019260 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   19260:	b480      	push	{r7}
   19262:	b083      	sub	sp, #12
   19264:	af00      	add	r7, sp, #0
   19266:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   19268:	687b      	ldr	r3, [r7, #4]
   1926a:	4618      	mov	r0, r3
   1926c:	370c      	adds	r7, #12
   1926e:	46bd      	mov	sp, r7
   19270:	bc80      	pop	{r7}
   19272:	4770      	bx	lr

00019274 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   19274:	b480      	push	{r7}
   19276:	b083      	sub	sp, #12
   19278:	af00      	add	r7, sp, #0
   1927a:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   1927c:	687b      	ldr	r3, [r7, #4]
   1927e:	4618      	mov	r0, r3
   19280:	370c      	adds	r7, #12
   19282:	46bd      	mov	sp, r7
   19284:	bc80      	pop	{r7}
   19286:	4770      	bx	lr

00019288 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   19288:	b580      	push	{r7, lr}
   1928a:	b084      	sub	sp, #16
   1928c:	af00      	add	r7, sp, #0
   1928e:	60f8      	str	r0, [r7, #12]
   19290:	60b9      	str	r1, [r7, #8]
   19292:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   19294:	4a1a      	ldr	r2, [pc, #104]	; (19300 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x78>)
   19296:	68fb      	ldr	r3, [r7, #12]
   19298:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   1929a:	68fb      	ldr	r3, [r7, #12]
   1929c:	68ba      	ldr	r2, [r7, #8]
   1929e:	64da      	str	r2, [r3, #76]	; 0x4c
	spiLT=spiLite;
   192a0:	68fb      	ldr	r3, [r7, #12]
   192a2:	687a      	ldr	r2, [r7, #4]
   192a4:	619a      	str	r2, [r3, #24]
	rx=spiLT->rxLiteBuffer;
   192a6:	68fb      	ldr	r3, [r7, #12]
   192a8:	699b      	ldr	r3, [r3, #24]
   192aa:	68da      	ldr	r2, [r3, #12]
   192ac:	68fb      	ldr	r3, [r7, #12]
   192ae:	625a      	str	r2, [r3, #36]	; 0x24
	tx=spiLT->txLiteBuffer;
   192b0:	68fb      	ldr	r3, [r7, #12]
   192b2:	699b      	ldr	r3, [r3, #24]
   192b4:	689a      	ldr	r2, [r3, #8]
   192b6:	68fb      	ldr	r3, [r7, #12]
   192b8:	621a      	str	r2, [r3, #32]
	auxTimer=&hvacTimer;
   192ba:	68fb      	ldr	r3, [r7, #12]
   192bc:	4a11      	ldr	r2, [pc, #68]	; (19304 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x7c>)
   192be:	629a      	str	r2, [r3, #40]	; 0x28
	activeChannels[0]=4;
   192c0:	68fb      	ldr	r3, [r7, #12]
   192c2:	2204      	movs	r2, #4
   192c4:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=8;
   192c6:	68fb      	ldr	r3, [r7, #12]
   192c8:	2208      	movs	r2, #8
   192ca:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=15;
   192cc:	68fb      	ldr	r3, [r7, #12]
   192ce:	220f      	movs	r2, #15
   192d0:	715a      	strb	r2, [r3, #5]
	delay_ms(200);
   192d2:	20c8      	movs	r0, #200	; 0xc8
   192d4:	4b0c      	ldr	r3, [pc, #48]	; (19308 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   192d6:	4798      	blx	r3
	temperatureTimer.Init();
   192d8:	480c      	ldr	r0, [pc, #48]	; (1930c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   192da:	4b0d      	ldr	r3, [pc, #52]	; (19310 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   192dc:	4798      	blx	r3
	configure_channels();
   192de:	68f8      	ldr	r0, [r7, #12]
   192e0:	4b0c      	ldr	r3, [pc, #48]	; (19314 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   192e2:	4798      	blx	r3
	configure_global_parameters();
   192e4:	68f8      	ldr	r0, [r7, #12]
   192e6:	4b0c      	ldr	r3, [pc, #48]	; (19318 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   192e8:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   192ea:	68fb      	ldr	r3, [r7, #12]
   192ec:	2201      	movs	r2, #1
   192ee:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   192f0:	68f8      	ldr	r0, [r7, #12]
   192f2:	4b0a      	ldr	r3, [pc, #40]	; (1931c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   192f4:	4798      	blx	r3
   192f6:	4603      	mov	r3, r0
}
   192f8:	4618      	mov	r0, r3
   192fa:	3710      	adds	r7, #16
   192fc:	46bd      	mov	sp, r7
   192fe:	bd80      	pop	{r7, pc}
   19300:	2000a6d0 	.word	0x2000a6d0
   19304:	2000a478 	.word	0x2000a478
   19308:	000067d5 	.word	0x000067d5
   1930c:	2000a440 	.word	0x2000a440
   19310:	00017bd9 	.word	0x00017bd9
   19314:	00019769 	.word	0x00019769
   19318:	000197f9 	.word	0x000197f9
   1931c:	00019831 	.word	0x00019831

00019320 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   19320:	b590      	push	{r4, r7, lr}
   19322:	b089      	sub	sp, #36	; 0x24
   19324:	af02      	add	r7, sp, #8
   19326:	60f8      	str	r0, [r7, #12]
   19328:	60b9      	str	r1, [r7, #8]
   1932a:	603b      	str	r3, [r7, #0]
   1932c:	4613      	mov	r3, r2
   1932e:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   19330:	79fb      	ldrb	r3, [r7, #7]
   19332:	461a      	mov	r2, r3
   19334:	f44f 7100 	mov.w	r1, #512	; 0x200
   19338:	68f8      	ldr	r0, [r7, #12]
   1933a:	4b0b      	ldr	r3, [pc, #44]	; (19368 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   1933c:	4798      	blx	r3
   1933e:	4603      	mov	r3, r0
   19340:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   19342:	8afa      	ldrh	r2, [r7, #22]
   19344:	683b      	ldr	r3, [r7, #0]
   19346:	9300      	str	r3, [sp, #0]
   19348:	4613      	mov	r3, r2
   1934a:	2202      	movs	r2, #2
   1934c:	68b9      	ldr	r1, [r7, #8]
   1934e:	68f8      	ldr	r0, [r7, #12]
   19350:	4c06      	ldr	r4, [pc, #24]	; (1936c <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   19352:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   19354:	8afb      	ldrh	r3, [r7, #22]
   19356:	79fa      	ldrb	r2, [r7, #7]
   19358:	68b9      	ldr	r1, [r7, #8]
   1935a:	68f8      	ldr	r0, [r7, #12]
   1935c:	4c04      	ldr	r4, [pc, #16]	; (19370 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   1935e:	47a0      	blx	r4
}
   19360:	bf00      	nop
   19362:	371c      	adds	r7, #28
   19364:	46bd      	mov	sp, r7
   19366:	bd90      	pop	{r4, r7, pc}
   19368:	0001973d 	.word	0x0001973d
   1936c:	000195fd 	.word	0x000195fd
   19370:	000193c1 	.word	0x000193c1

00019374 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   19374:	b590      	push	{r4, r7, lr}
   19376:	b087      	sub	sp, #28
   19378:	af02      	add	r7, sp, #8
   1937a:	6078      	str	r0, [r7, #4]
   1937c:	460b      	mov	r3, r1
   1937e:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   19380:	78fb      	ldrb	r3, [r7, #3]
   19382:	687a      	ldr	r2, [r7, #4]
   19384:	4413      	add	r3, r2
   19386:	78db      	ldrb	r3, [r3, #3]
   19388:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   1938a:	687b      	ldr	r3, [r7, #4]
   1938c:	2200      	movs	r2, #0
   1938e:	705a      	strb	r2, [r3, #1]
	ready=false;
   19390:	687b      	ldr	r3, [r7, #4]
   19392:	2200      	movs	r2, #0
   19394:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   19396:	687b      	ldr	r3, [r7, #4]
   19398:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1939a:	7bfb      	ldrb	r3, [r7, #15]
   1939c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   193a0:	b2db      	uxtb	r3, r3
   193a2:	9300      	str	r3, [sp, #0]
   193a4:	2300      	movs	r3, #0
   193a6:	2202      	movs	r2, #2
   193a8:	6878      	ldr	r0, [r7, #4]
   193aa:	4c04      	ldr	r4, [pc, #16]	; (193bc <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   193ac:	47a0      	blx	r4
	channelOnProcess=channel_number;
   193ae:	687b      	ldr	r3, [r7, #4]
   193b0:	7bfa      	ldrb	r2, [r7, #15]
   193b2:	71da      	strb	r2, [r3, #7]
	//wait_for_process_to_finish(chip_select);
}
   193b4:	bf00      	nop
   193b6:	3714      	adds	r7, #20
   193b8:	46bd      	mov	sp, r7
   193ba:	bd90      	pop	{r4, r7, pc}
   193bc:	000196cd 	.word	0x000196cd

000193c0 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   193c0:	b590      	push	{r4, r7, lr}
   193c2:	b089      	sub	sp, #36	; 0x24
   193c4:	af02      	add	r7, sp, #8
   193c6:	60f8      	str	r0, [r7, #12]
   193c8:	60b9      	str	r1, [r7, #8]
   193ca:	4611      	mov	r1, r2
   193cc:	461a      	mov	r2, r3
   193ce:	460b      	mov	r3, r1
   193d0:	71fb      	strb	r3, [r7, #7]
   193d2:	4613      	mov	r3, r2
   193d4:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   193d6:	88ba      	ldrh	r2, [r7, #4]
   193d8:	2300      	movs	r3, #0
   193da:	9300      	str	r3, [sp, #0]
   193dc:	4613      	mov	r3, r2
   193de:	2203      	movs	r2, #3
   193e0:	68b9      	ldr	r1, [r7, #8]
   193e2:	68f8      	ldr	r0, [r7, #12]
   193e4:	4c0c      	ldr	r4, [pc, #48]	; (19418 <_ZN13LTC2983_Class20print_config_channelEmht+0x58>)
   193e6:	47a0      	blx	r4
   193e8:	6178      	str	r0, [r7, #20]

	usb.print(F("\nChannel Config "));
   193ea:	490c      	ldr	r1, [pc, #48]	; (1941c <_ZN13LTC2983_Class20print_config_channelEmht+0x5c>)
   193ec:	480c      	ldr	r0, [pc, #48]	; (19420 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   193ee:	4b0d      	ldr	r3, [pc, #52]	; (19424 <_ZN13LTC2983_Class20print_config_channelEmht+0x64>)
   193f0:	4798      	blx	r3
	usb.println(channel_number);
   193f2:	79fb      	ldrb	r3, [r7, #7]
   193f4:	220a      	movs	r2, #10
   193f6:	4619      	mov	r1, r3
   193f8:	4809      	ldr	r0, [pc, #36]	; (19420 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   193fa:	4b0b      	ldr	r3, [pc, #44]	; (19428 <_ZN13LTC2983_Class20print_config_channelEmht+0x68>)
   193fc:	4798      	blx	r3

	// 24 LSB's are conversion result
	
	usb<<"register value: ";
   193fe:	490b      	ldr	r1, [pc, #44]	; (1942c <_ZN13LTC2983_Class20print_config_channelEmht+0x6c>)
   19400:	4807      	ldr	r0, [pc, #28]	; (19420 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   19402:	4b0b      	ldr	r3, [pc, #44]	; (19430 <_ZN13LTC2983_Class20print_config_channelEmht+0x70>)
   19404:	4798      	blx	r3
	usb.println(raw_data,HEX);
   19406:	2210      	movs	r2, #16
   19408:	6979      	ldr	r1, [r7, #20]
   1940a:	4805      	ldr	r0, [pc, #20]	; (19420 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   1940c:	4b09      	ldr	r3, [pc, #36]	; (19434 <_ZN13LTC2983_Class20print_config_channelEmht+0x74>)
   1940e:	4798      	blx	r3
	
}
   19410:	bf00      	nop
   19412:	371c      	adds	r7, #28
   19414:	46bd      	mov	sp, r7
   19416:	bd90      	pop	{r4, r7, pc}
   19418:	000195fd 	.word	0x000195fd
   1941c:	0002228c 	.word	0x0002228c
   19420:	2000a4d0 	.word	0x2000a4d0
   19424:	000185c5 	.word	0x000185c5
   19428:	000186fd 	.word	0x000186fd
   1942c:	000222a0 	.word	0x000222a0
   19430:	0001992d 	.word	0x0001992d
   19434:	00018739 	.word	0x00018739

00019438 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   19438:	b590      	push	{r4, r7, lr}
   1943a:	b085      	sub	sp, #20
   1943c:	af02      	add	r7, sp, #8
   1943e:	6078      	str	r0, [r7, #4]
   19440:	460b      	mov	r3, r1
   19442:	70fb      	strb	r3, [r7, #3]
   19444:	4613      	mov	r3, r2
   19446:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   19448:	78fb      	ldrb	r3, [r7, #3]
   1944a:	461a      	mov	r2, r3
   1944c:	2110      	movs	r1, #16
   1944e:	6878      	ldr	r0, [r7, #4]
   19450:	4b17      	ldr	r3, [pc, #92]	; (194b0 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   19452:	4798      	blx	r3
   19454:	4603      	mov	r3, r0
   19456:	461a      	mov	r2, r3
   19458:	687b      	ldr	r3, [r7, #4]
   1945a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   1945e:	687b      	ldr	r3, [r7, #4]
   19460:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   19462:	687b      	ldr	r3, [r7, #4]
   19464:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
   19468:	2300      	movs	r3, #0
   1946a:	9300      	str	r3, [sp, #0]
   1946c:	4613      	mov	r3, r2
   1946e:	2203      	movs	r2, #3
   19470:	6878      	ldr	r0, [r7, #4]
   19472:	4c10      	ldr	r4, [pc, #64]	; (194b4 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   19474:	47a0      	blx	r4
   19476:	4602      	mov	r2, r0
   19478:	687b      	ldr	r3, [r7, #4]
   1947a:	649a      	str	r2, [r3, #72]	; 0x48


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   1947c:	687b      	ldr	r3, [r7, #4]
   1947e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19480:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   19484:	687b      	ldr	r3, [r7, #4]
   19486:	645a      	str	r2, [r3, #68]	; 0x44
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   19488:	687b      	ldr	r3, [r7, #4]
   1948a:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1948c:	78bb      	ldrb	r3, [r7, #2]
   1948e:	78fa      	ldrb	r2, [r7, #3]
   19490:	6878      	ldr	r0, [r7, #4]
   19492:	4c09      	ldr	r4, [pc, #36]	; (194b8 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   19494:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   19496:	687b      	ldr	r3, [r7, #4]
   19498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1949a:	0e1b      	lsrs	r3, r3, #24
   1949c:	b2da      	uxtb	r2, r3
   1949e:	687b      	ldr	r3, [r7, #4]
   194a0:	719a      	strb	r2, [r3, #6]
	return scaled_result;
   194a2:	687b      	ldr	r3, [r7, #4]
   194a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
   194a6:	4618      	mov	r0, r3
   194a8:	370c      	adds	r7, #12
   194aa:	46bd      	mov	sp, r7
   194ac:	bd90      	pop	{r4, r7, pc}
   194ae:	bf00      	nop
   194b0:	0001973d 	.word	0x0001973d
   194b4:	000195fd 	.word	0x000195fd
   194b8:	00019511 	.word	0x00019511

000194bc <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   194bc:	b580      	push	{r7, lr}
   194be:	b082      	sub	sp, #8
   194c0:	af00      	add	r7, sp, #0
   194c2:	6078      	str	r0, [r7, #4]
   194c4:	460b      	mov	r3, r1
   194c6:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   194c8:	78fb      	ldrb	r3, [r7, #3]
   194ca:	687a      	ldr	r2, [r7, #4]
   194cc:	4413      	add	r3, r2
   194ce:	78db      	ldrb	r3, [r3, #3]
   194d0:	4619      	mov	r1, r3
   194d2:	6878      	ldr	r0, [r7, #4]
   194d4:	4b03      	ldr	r3, [pc, #12]	; (194e4 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   194d6:	4798      	blx	r3
   194d8:	4603      	mov	r3, r0
}
   194da:	4618      	mov	r0, r3
   194dc:	3708      	adds	r7, #8
   194de:	46bd      	mov	sp, r7
   194e0:	bd80      	pop	{r7, pc}
   194e2:	bf00      	nop
   194e4:	000194e9 	.word	0x000194e9

000194e8 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   194e8:	b580      	push	{r7, lr}
   194ea:	b082      	sub	sp, #8
   194ec:	af00      	add	r7, sp, #0
   194ee:	6078      	str	r0, [r7, #4]
   194f0:	460b      	mov	r3, r1
   194f2:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   194f4:	78fb      	ldrb	r3, [r7, #3]
   194f6:	2202      	movs	r2, #2
   194f8:	4619      	mov	r1, r3
   194fa:	6878      	ldr	r0, [r7, #4]
   194fc:	4b03      	ldr	r3, [pc, #12]	; (1950c <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   194fe:	4798      	blx	r3
   19500:	4603      	mov	r3, r0
}
   19502:	4618      	mov	r0, r3
   19504:	3708      	adds	r7, #8
   19506:	46bd      	mov	sp, r7
   19508:	bd80      	pop	{r7, pc}
   1950a:	bf00      	nop
   1950c:	00019439 	.word	0x00019439

00019510 <_ZN13LTC2983_Class13ConvertResultEmhh>:
		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   19510:	b580      	push	{r7, lr}
   19512:	b084      	sub	sp, #16
   19514:	af00      	add	r7, sp, #0
   19516:	60f8      	str	r0, [r7, #12]
   19518:	60b9      	str	r1, [r7, #8]
   1951a:	4611      	mov	r1, r2
   1951c:	461a      	mov	r2, r3
   1951e:	460b      	mov	r3, r1
   19520:	71fb      	strb	r3, [r7, #7]
   19522:	4613      	mov	r3, r2
   19524:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   19526:	68ba      	ldr	r2, [r7, #8]
   19528:	68fb      	ldr	r3, [r7, #12]
   1952a:	655a      	str	r2, [r3, #84]	; 0x54
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   1952c:	68fb      	ldr	r3, [r7, #12]
   1952e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   19530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   19534:	2b00      	cmp	r3, #0
   19536:	d006      	beq.n	19546 <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   19538:	68fb      	ldr	r3, [r7, #12]
   1953a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1953c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   19540:	461a      	mov	r2, r3
   19542:	68fb      	ldr	r3, [r7, #12]
   19544:	655a      	str	r2, [r3, #84]	; 0x54

	// Translate and print result
	if (channel_output == TEMPERATURE)
   19546:	79bb      	ldrb	r3, [r7, #6]
   19548:	2b02      	cmp	r3, #2
   1954a:	d11c      	bne.n	19586 <_ZN13LTC2983_Class13ConvertResultEmhh+0x76>
	{
		scaled_result= float(signed_data) / 1024;
   1954c:	68fb      	ldr	r3, [r7, #12]
   1954e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   19550:	4b18      	ldr	r3, [pc, #96]	; (195b4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   19552:	4610      	mov	r0, r2
   19554:	4798      	blx	r3
   19556:	4602      	mov	r2, r0
   19558:	4b17      	ldr	r3, [pc, #92]	; (195b8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1955a:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   1955e:	4610      	mov	r0, r2
   19560:	4798      	blx	r3
   19562:	4603      	mov	r3, r0
   19564:	461a      	mov	r2, r3
   19566:	68fb      	ldr	r3, [r7, #12]
   19568:	651a      	str	r2, [r3, #80]	; 0x50
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   1956a:	79fb      	ldrb	r3, [r7, #7]
   1956c:	4619      	mov	r1, r3
   1956e:	68f8      	ldr	r0, [r7, #12]
   19570:	4b12      	ldr	r3, [pc, #72]	; (195bc <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   19572:	4798      	blx	r3
   19574:	4603      	mov	r3, r0
   19576:	461a      	mov	r2, r3
   19578:	68fb      	ldr	r3, [r7, #12]
   1957a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   1957c:	68fb      	ldr	r3, [r7, #12]
   1957e:	3202      	adds	r2, #2
   19580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   19584:	e011      	b.n	195aa <_ZN13LTC2983_Class13ConvertResultEmhh+0x9a>
	else if (channel_output == VOLTAGE)
   19586:	79bb      	ldrb	r3, [r7, #6]
   19588:	2b01      	cmp	r3, #1
   1958a:	d10e      	bne.n	195aa <_ZN13LTC2983_Class13ConvertResultEmhh+0x9a>
		scaled_result = float(signed_data) / 2097152;
   1958c:	68fb      	ldr	r3, [r7, #12]
   1958e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   19590:	4b08      	ldr	r3, [pc, #32]	; (195b4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   19592:	4610      	mov	r0, r2
   19594:	4798      	blx	r3
   19596:	4602      	mov	r2, r0
   19598:	4b07      	ldr	r3, [pc, #28]	; (195b8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1959a:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   1959e:	4610      	mov	r0, r2
   195a0:	4798      	blx	r3
   195a2:	4603      	mov	r3, r0
   195a4:	461a      	mov	r2, r3
   195a6:	68fb      	ldr	r3, [r7, #12]
   195a8:	651a      	str	r2, [r3, #80]	; 0x50
}
   195aa:	bf00      	nop
   195ac:	3710      	adds	r7, #16
   195ae:	46bd      	mov	sp, r7
   195b0:	bd80      	pop	{r7, pc}
   195b2:	bf00      	nop
   195b4:	0001ba19 	.word	0x0001ba19
   195b8:	0001bc29 	.word	0x0001bc29
   195bc:	000195c1 	.word	0x000195c1

000195c0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   195c0:	b480      	push	{r7}
   195c2:	b085      	sub	sp, #20
   195c4:	af00      	add	r7, sp, #0
   195c6:	6078      	str	r0, [r7, #4]
   195c8:	460b      	mov	r3, r1
   195ca:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   195cc:	2300      	movs	r3, #0
   195ce:	73fb      	strb	r3, [r7, #15]
   195d0:	7bfb      	ldrb	r3, [r7, #15]
   195d2:	2b02      	cmp	r3, #2
   195d4:	dc0c      	bgt.n	195f0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   195d6:	7bfb      	ldrb	r3, [r7, #15]
   195d8:	687a      	ldr	r2, [r7, #4]
   195da:	4413      	add	r3, r2
   195dc:	78db      	ldrb	r3, [r3, #3]
   195de:	78fa      	ldrb	r2, [r7, #3]
   195e0:	429a      	cmp	r2, r3
   195e2:	d101      	bne.n	195e8 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   195e4:	7bfb      	ldrb	r3, [r7, #15]
   195e6:	e004      	b.n	195f2 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   195e8:	7bfb      	ldrb	r3, [r7, #15]
   195ea:	3301      	adds	r3, #1
   195ec:	73fb      	strb	r3, [r7, #15]
   195ee:	e7ef      	b.n	195d0 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   195f0:	2300      	movs	r3, #0
}
   195f2:	4618      	mov	r0, r3
   195f4:	3714      	adds	r7, #20
   195f6:	46bd      	mov	sp, r7
   195f8:	bc80      	pop	{r7}
   195fa:	4770      	bx	lr

000195fc <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   195fc:	b590      	push	{r4, r7, lr}
   195fe:	b089      	sub	sp, #36	; 0x24
   19600:	af02      	add	r7, sp, #8
   19602:	60f8      	str	r0, [r7, #12]
   19604:	60b9      	str	r1, [r7, #8]
   19606:	4611      	mov	r1, r2
   19608:	461a      	mov	r2, r3
   1960a:	460b      	mov	r3, r1
   1960c:	71fb      	strb	r3, [r7, #7]
   1960e:	4613      	mov	r3, r2
   19610:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   19612:	2300      	movs	r3, #0
   19614:	75fb      	strb	r3, [r7, #23]
   19616:	7dfb      	ldrb	r3, [r7, #23]
   19618:	2b06      	cmp	r3, #6
   1961a:	dc09      	bgt.n	19630 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   1961c:	68fb      	ldr	r3, [r7, #12]
   1961e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19620:	7dfb      	ldrb	r3, [r7, #23]
   19622:	4413      	add	r3, r2
   19624:	2200      	movs	r2, #0
   19626:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   19628:	7dfb      	ldrb	r3, [r7, #23]
   1962a:	3301      	adds	r3, #1
   1962c:	75fb      	strb	r3, [r7, #23]
   1962e:	e7f2      	b.n	19616 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   19630:	68fb      	ldr	r3, [r7, #12]
   19632:	6a1b      	ldr	r3, [r3, #32]
   19634:	79fa      	ldrb	r2, [r7, #7]
   19636:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   19638:	68fb      	ldr	r3, [r7, #12]
   1963a:	6a1b      	ldr	r3, [r3, #32]
   1963c:	3301      	adds	r3, #1
   1963e:	88ba      	ldrh	r2, [r7, #4]
   19640:	1212      	asrs	r2, r2, #8
   19642:	b2d2      	uxtb	r2, r2
   19644:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   19646:	68fb      	ldr	r3, [r7, #12]
   19648:	6a1b      	ldr	r3, [r3, #32]
   1964a:	3302      	adds	r3, #2
   1964c:	88ba      	ldrh	r2, [r7, #4]
   1964e:	b2d2      	uxtb	r2, r2
   19650:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   19652:	68fb      	ldr	r3, [r7, #12]
   19654:	6a1b      	ldr	r3, [r3, #32]
   19656:	3303      	adds	r3, #3
   19658:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1965a:	0e12      	lsrs	r2, r2, #24
   1965c:	b2d2      	uxtb	r2, r2
   1965e:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   19660:	68fb      	ldr	r3, [r7, #12]
   19662:	6a1b      	ldr	r3, [r3, #32]
   19664:	3304      	adds	r3, #4
   19666:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19668:	0c12      	lsrs	r2, r2, #16
   1966a:	b2d2      	uxtb	r2, r2
   1966c:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   1966e:	68fb      	ldr	r3, [r7, #12]
   19670:	6a1b      	ldr	r3, [r3, #32]
   19672:	3305      	adds	r3, #5
   19674:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19676:	0a12      	lsrs	r2, r2, #8
   19678:	b2d2      	uxtb	r2, r2
   1967a:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   1967c:	68fb      	ldr	r3, [r7, #12]
   1967e:	6a1b      	ldr	r3, [r3, #32]
   19680:	3306      	adds	r3, #6
   19682:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19684:	b2d2      	uxtb	r2, r2
   19686:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   19688:	68fb      	ldr	r3, [r7, #12]
   1968a:	6998      	ldr	r0, [r3, #24]
   1968c:	68fb      	ldr	r3, [r7, #12]
   1968e:	6a1a      	ldr	r2, [r3, #32]
   19690:	f107 0110 	add.w	r1, r7, #16
   19694:	2307      	movs	r3, #7
   19696:	9300      	str	r3, [sp, #0]
   19698:	460b      	mov	r3, r1
   1969a:	68b9      	ldr	r1, [r7, #8]
   1969c:	4c0a      	ldr	r4, [pc, #40]	; (196c8 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   1969e:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   196a0:	7c3b      	ldrb	r3, [r7, #16]
   196a2:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   196a4:	7c7b      	ldrb	r3, [r7, #17]
   196a6:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   196a8:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   196aa:	7cbb      	ldrb	r3, [r7, #18]
   196ac:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   196ae:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   196b0:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   196b2:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   196b4:	68fb      	ldr	r3, [r7, #12]
   196b6:	61da      	str	r2, [r3, #28]
	asm("nop");
   196b8:	bf00      	nop
	return output_data;
   196ba:	68fb      	ldr	r3, [r7, #12]
   196bc:	69db      	ldr	r3, [r3, #28]
}
   196be:	4618      	mov	r0, r3
   196c0:	371c      	adds	r7, #28
   196c2:	46bd      	mov	sp, r7
   196c4:	bd90      	pop	{r4, r7, pc}
   196c6:	bf00      	nop
   196c8:	00019ad1 	.word	0x00019ad1

000196cc <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   196cc:	b590      	push	{r4, r7, lr}
   196ce:	b087      	sub	sp, #28
   196d0:	af02      	add	r7, sp, #8
   196d2:	60f8      	str	r0, [r7, #12]
   196d4:	60b9      	str	r1, [r7, #8]
   196d6:	4611      	mov	r1, r2
   196d8:	461a      	mov	r2, r3
   196da:	460b      	mov	r3, r1
   196dc:	71fb      	strb	r3, [r7, #7]
   196de:	4613      	mov	r3, r2
   196e0:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   196e2:	68fb      	ldr	r3, [r7, #12]
   196e4:	6a1b      	ldr	r3, [r3, #32]
   196e6:	79fa      	ldrb	r2, [r7, #7]
   196e8:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   196ea:	68fb      	ldr	r3, [r7, #12]
   196ec:	6a1b      	ldr	r3, [r3, #32]
   196ee:	3301      	adds	r3, #1
   196f0:	88ba      	ldrh	r2, [r7, #4]
   196f2:	1212      	asrs	r2, r2, #8
   196f4:	b2d2      	uxtb	r2, r2
   196f6:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   196f8:	68fb      	ldr	r3, [r7, #12]
   196fa:	6a1b      	ldr	r3, [r3, #32]
   196fc:	3302      	adds	r3, #2
   196fe:	88ba      	ldrh	r2, [r7, #4]
   19700:	b2d2      	uxtb	r2, r2
   19702:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   19704:	68fb      	ldr	r3, [r7, #12]
   19706:	6a1b      	ldr	r3, [r3, #32]
   19708:	3303      	adds	r3, #3
   1970a:	f897 2020 	ldrb.w	r2, [r7, #32]
   1970e:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   19710:	68fb      	ldr	r3, [r7, #12]
   19712:	6998      	ldr	r0, [r3, #24]
   19714:	68fb      	ldr	r3, [r7, #12]
   19716:	6a1a      	ldr	r2, [r3, #32]
   19718:	68fb      	ldr	r3, [r7, #12]
   1971a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1971c:	2304      	movs	r3, #4
   1971e:	9300      	str	r3, [sp, #0]
   19720:	460b      	mov	r3, r1
   19722:	68b9      	ldr	r1, [r7, #8]
   19724:	4c04      	ldr	r4, [pc, #16]	; (19738 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   19726:	47a0      	blx	r4
	return rx[0];
   19728:	68fb      	ldr	r3, [r7, #12]
   1972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1972c:	781b      	ldrb	r3, [r3, #0]
}
   1972e:	4618      	mov	r0, r3
   19730:	3714      	adds	r7, #20
   19732:	46bd      	mov	sp, r7
   19734:	bd90      	pop	{r4, r7, pc}
   19736:	bf00      	nop
   19738:	00019ad1 	.word	0x00019ad1

0001973c <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   1973c:	b480      	push	{r7}
   1973e:	b083      	sub	sp, #12
   19740:	af00      	add	r7, sp, #0
   19742:	6078      	str	r0, [r7, #4]
   19744:	460b      	mov	r3, r1
   19746:	807b      	strh	r3, [r7, #2]
   19748:	4613      	mov	r3, r2
   1974a:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   1974c:	787b      	ldrb	r3, [r7, #1]
   1974e:	3b01      	subs	r3, #1
   19750:	b29b      	uxth	r3, r3
   19752:	009b      	lsls	r3, r3, #2
   19754:	b29a      	uxth	r2, r3
   19756:	887b      	ldrh	r3, [r7, #2]
   19758:	4413      	add	r3, r2
   1975a:	b29b      	uxth	r3, r3
}
   1975c:	4618      	mov	r0, r3
   1975e:	370c      	adds	r7, #12
   19760:	46bd      	mov	sp, r7
   19762:	bc80      	pop	{r7}
   19764:	4770      	bx	lr
	...

00019768 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   19768:	b590      	push	{r4, r7, lr}
   1976a:	b085      	sub	sp, #20
   1976c:	af00      	add	r7, sp, #0
   1976e:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	// ----- Channel 2: Assign Sense Resistor -----
	channel_assignment_data =
   19770:	4b1c      	ldr	r3, [pc, #112]	; (197e4 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   19772:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 2, channel_assignment_data);
   19774:	687b      	ldr	r3, [r7, #4]
   19776:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   19778:	68fb      	ldr	r3, [r7, #12]
   1977a:	2202      	movs	r2, #2
   1977c:	6878      	ldr	r0, [r7, #4]
   1977e:	4c1a      	ldr	r4, [pc, #104]	; (197e8 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   19780:	47a0      	blx	r4
	// ----- Channel 4: Assign RTD PT-100 -----
	channel_assignment_data =
   19782:	4b1a      	ldr	r3, [pc, #104]	; (197ec <_ZN13LTC2983_Class18configure_channelsEv+0x84>)
   19784:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__2 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 4, channel_assignment_data);
   19786:	687b      	ldr	r3, [r7, #4]
   19788:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1978a:	68fb      	ldr	r3, [r7, #12]
   1978c:	2204      	movs	r2, #4
   1978e:	6878      	ldr	r0, [r7, #4]
   19790:	4c15      	ldr	r4, [pc, #84]	; (197e8 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   19792:	47a0      	blx	r4
	// ----- Channel 6: Assign Sense Resistor -----
	channel_assignment_data =
   19794:	4b13      	ldr	r3, [pc, #76]	; (197e4 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   19796:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 6, channel_assignment_data);
   19798:	687b      	ldr	r3, [r7, #4]
   1979a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1979c:	68fb      	ldr	r3, [r7, #12]
   1979e:	2206      	movs	r2, #6
   197a0:	6878      	ldr	r0, [r7, #4]
   197a2:	4c11      	ldr	r4, [pc, #68]	; (197e8 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   197a4:	47a0      	blx	r4
	// ----- Channel 8: Assign RTD PT-100 -----
	channel_assignment_data =
   197a6:	4b12      	ldr	r3, [pc, #72]	; (197f0 <_ZN13LTC2983_Class18configure_channelsEv+0x88>)
   197a8:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__6 |
	RTD_NUM_WIRES__4_WIRE |
	RTD_EXCITATION_MODE__ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 8, channel_assignment_data);
   197aa:	687b      	ldr	r3, [r7, #4]
   197ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   197ae:	68fb      	ldr	r3, [r7, #12]
   197b0:	2208      	movs	r2, #8
   197b2:	6878      	ldr	r0, [r7, #4]
   197b4:	4c0c      	ldr	r4, [pc, #48]	; (197e8 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   197b6:	47a0      	blx	r4
	// ----- Channel 13: Assign Sense Resistor -----
	channel_assignment_data =
   197b8:	4b0a      	ldr	r3, [pc, #40]	; (197e4 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   197ba:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 13, channel_assignment_data);
   197bc:	687b      	ldr	r3, [r7, #4]
   197be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   197c0:	68fb      	ldr	r3, [r7, #12]
   197c2:	220d      	movs	r2, #13
   197c4:	6878      	ldr	r0, [r7, #4]
   197c6:	4c08      	ldr	r4, [pc, #32]	; (197e8 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   197c8:	47a0      	blx	r4
	// ----- Channel 15: Assign RTD PT-100 -----
	channel_assignment_data =
   197ca:	4b0a      	ldr	r3, [pc, #40]	; (197f4 <_ZN13LTC2983_Class18configure_channelsEv+0x8c>)
   197cc:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__13 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 15, channel_assignment_data);
   197ce:	687b      	ldr	r3, [r7, #4]
   197d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   197d2:	68fb      	ldr	r3, [r7, #12]
   197d4:	220f      	movs	r2, #15
   197d6:	6878      	ldr	r0, [r7, #4]
   197d8:	4c03      	ldr	r4, [pc, #12]	; (197e8 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   197da:	47a0      	blx	r4

}
   197dc:	bf00      	nop
   197de:	3714      	adds	r7, #20
   197e0:	46bd      	mov	sp, r7
   197e2:	bd90      	pop	{r4, r7, pc}
   197e4:	e89c4000 	.word	0xe89c4000
   197e8:	00019321 	.word	0x00019321
   197ec:	60851000 	.word	0x60851000
   197f0:	61a91000 	.word	0x61a91000
   197f4:	63451000 	.word	0x63451000

000197f8 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   197f8:	b590      	push	{r4, r7, lr}
   197fa:	b085      	sub	sp, #20
   197fc:	af02      	add	r7, sp, #8
   197fe:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   19800:	687b      	ldr	r3, [r7, #4]
   19802:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
	REJECTION__50_60_HZ);
   19804:	2300      	movs	r3, #0
   19806:	9300      	str	r3, [sp, #0]
   19808:	23f0      	movs	r3, #240	; 0xf0
   1980a:	2202      	movs	r2, #2
   1980c:	6878      	ldr	r0, [r7, #4]
   1980e:	4c07      	ldr	r4, [pc, #28]	; (1982c <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   19810:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   19812:	687b      	ldr	r3, [r7, #4]
   19814:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   19816:	2300      	movs	r3, #0
   19818:	9300      	str	r3, [sp, #0]
   1981a:	23ff      	movs	r3, #255	; 0xff
   1981c:	2202      	movs	r2, #2
   1981e:	6878      	ldr	r0, [r7, #4]
   19820:	4c02      	ldr	r4, [pc, #8]	; (1982c <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   19822:	47a0      	blx	r4
}
   19824:	bf00      	nop
   19826:	370c      	adds	r7, #12
   19828:	46bd      	mov	sp, r7
   1982a:	bd90      	pop	{r4, r7, pc}
   1982c:	000196cd 	.word	0x000196cd

00019830 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   19830:	b580      	push	{r7, lr}
   19832:	b082      	sub	sp, #8
   19834:	af00      	add	r7, sp, #0
   19836:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   19838:	687b      	ldr	r3, [r7, #4]
   1983a:	2200      	movs	r2, #0
   1983c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	meassureTimeout=false;
   19840:	687b      	ldr	r3, [r7, #4]
   19842:	2200      	movs	r2, #0
   19844:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   19846:	4a31      	ldr	r2, [pc, #196]	; (1990c <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   19848:	687b      	ldr	r3, [r7, #4]
   1984a:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   1984c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19850:	492f      	ldr	r1, [pc, #188]	; (19910 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   19852:	4830      	ldr	r0, [pc, #192]	; (19914 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   19854:	4b30      	ldr	r3, [pc, #192]	; (19918 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   19856:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   19858:	687b      	ldr	r3, [r7, #4]
   1985a:	799b      	ldrb	r3, [r3, #6]
   1985c:	2b01      	cmp	r3, #1
   1985e:	d009      	beq.n	19874 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   19860:	687b      	ldr	r3, [r7, #4]
   19862:	789b      	ldrb	r3, [r3, #2]
   19864:	b2db      	uxtb	r3, r3
   19866:	f083 0301 	eor.w	r3, r3, #1
   1986a:	b2db      	uxtb	r3, r3
   1986c:	2b00      	cmp	r3, #0
   1986e:	d001      	beq.n	19874 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   19870:	2301      	movs	r3, #1
   19872:	e000      	b.n	19876 <_ZN13LTC2983_Class8SelfTestEv+0x46>
   19874:	2300      	movs	r3, #0
   19876:	2b00      	cmp	r3, #0
   19878:	d034      	beq.n	198e4 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   1987a:	2100      	movs	r1, #0
   1987c:	6878      	ldr	r0, [r7, #4]
   1987e:	4b27      	ldr	r3, [pc, #156]	; (1991c <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   19880:	4798      	blx	r3
		delay_ms(1);
   19882:	2001      	movs	r0, #1
   19884:	4b26      	ldr	r3, [pc, #152]	; (19920 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   19886:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   19888:	687b      	ldr	r3, [r7, #4]
   1988a:	781b      	ldrb	r3, [r3, #0]
   1988c:	b2db      	uxtb	r3, r3
   1988e:	f083 0301 	eor.w	r3, r3, #1
   19892:	b2db      	uxtb	r3, r3
   19894:	2b00      	cmp	r3, #0
   19896:	d009      	beq.n	198ac <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   19898:	687b      	ldr	r3, [r7, #4]
   1989a:	789b      	ldrb	r3, [r3, #2]
   1989c:	b2db      	uxtb	r3, r3
   1989e:	f083 0301 	eor.w	r3, r3, #1
   198a2:	b2db      	uxtb	r3, r3
   198a4:	2b00      	cmp	r3, #0
   198a6:	d001      	beq.n	198ac <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   198a8:	2301      	movs	r3, #1
   198aa:	e000      	b.n	198ae <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   198ac:	2300      	movs	r3, #0
   198ae:	2b00      	cmp	r3, #0
   198b0:	d000      	beq.n	198b4 <_ZN13LTC2983_Class8SelfTestEv+0x84>
   198b2:	e7e9      	b.n	19888 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   198b4:	687b      	ldr	r3, [r7, #4]
   198b6:	789b      	ldrb	r3, [r3, #2]
   198b8:	b2db      	uxtb	r3, r3
   198ba:	f083 0301 	eor.w	r3, r3, #1
   198be:	b2db      	uxtb	r3, r3
   198c0:	2b00      	cmp	r3, #0
   198c2:	d0c9      	beq.n	19858 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   198c4:	687b      	ldr	r3, [r7, #4]
   198c6:	781b      	ldrb	r3, [r3, #0]
   198c8:	b2db      	uxtb	r3, r3
   198ca:	2b00      	cmp	r3, #0
   198cc:	d006      	beq.n	198dc <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   198ce:	687b      	ldr	r3, [r7, #4]
   198d0:	78db      	ldrb	r3, [r3, #3]
   198d2:	4619      	mov	r1, r3
   198d4:	6878      	ldr	r0, [r7, #4]
   198d6:	4b13      	ldr	r3, [pc, #76]	; (19924 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   198d8:	4798      	blx	r3
   198da:	e7bd      	b.n	19858 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   198dc:	2001      	movs	r0, #1
   198de:	4b10      	ldr	r3, [pc, #64]	; (19920 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   198e0:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   198e2:	e7b9      	b.n	19858 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   198e4:	490a      	ldr	r1, [pc, #40]	; (19910 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   198e6:	480b      	ldr	r0, [pc, #44]	; (19914 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   198e8:	4b0f      	ldr	r3, [pc, #60]	; (19928 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   198ea:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   198ec:	687b      	ldr	r3, [r7, #4]
   198ee:	799b      	ldrb	r3, [r3, #6]
   198f0:	2b01      	cmp	r3, #1
   198f2:	bf0c      	ite	eq
   198f4:	2301      	moveq	r3, #1
   198f6:	2300      	movne	r3, #0
   198f8:	b2da      	uxtb	r2, r3
   198fa:	687b      	ldr	r3, [r7, #4]
   198fc:	751a      	strb	r2, [r3, #20]
	return	isOK;
   198fe:	687b      	ldr	r3, [r7, #4]
   19900:	7d1b      	ldrb	r3, [r3, #20]
	}
   19902:	4618      	mov	r0, r3
   19904:	3708      	adds	r7, #8
   19906:	46bd      	mov	sp, r7
   19908:	bd80      	pop	{r7, pc}
   1990a:	bf00      	nop
   1990c:	2000a6d0 	.word	0x2000a6d0
   19910:	00019241 	.word	0x00019241
   19914:	2000a440 	.word	0x2000a440
   19918:	00017d81 	.word	0x00017d81
   1991c:	00019375 	.word	0x00019375
   19920:	000067d5 	.word	0x000067d5
   19924:	000194e9 	.word	0x000194e9
   19928:	00017d11 	.word	0x00017d11

0001992c <_ZlsIA17_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
   1992c:	b580      	push	{r7, lr}
   1992e:	b082      	sub	sp, #8
   19930:	af00      	add	r7, sp, #0
   19932:	6078      	str	r0, [r7, #4]
   19934:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
   19936:	6839      	ldr	r1, [r7, #0]
   19938:	6878      	ldr	r0, [r7, #4]
   1993a:	4b03      	ldr	r3, [pc, #12]	; (19948 <_ZlsIA17_cER5PrintS2_RKT_+0x1c>)
   1993c:	4798      	blx	r3
   1993e:	687b      	ldr	r3, [r7, #4]
   19940:	4618      	mov	r0, r3
   19942:	3708      	adds	r7, #8
   19944:	46bd      	mov	sp, r7
   19946:	bd80      	pop	{r7, pc}
   19948:	000185e5 	.word	0x000185e5

0001994c <hri_port_set_OUT_reg>:
{
   1994c:	b480      	push	{r7}
   1994e:	b085      	sub	sp, #20
   19950:	af00      	add	r7, sp, #0
   19952:	60f8      	str	r0, [r7, #12]
   19954:	460b      	mov	r3, r1
   19956:	607a      	str	r2, [r7, #4]
   19958:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   1995a:	7afb      	ldrb	r3, [r7, #11]
   1995c:	68fa      	ldr	r2, [r7, #12]
   1995e:	01db      	lsls	r3, r3, #7
   19960:	4413      	add	r3, r2
   19962:	3318      	adds	r3, #24
   19964:	687a      	ldr	r2, [r7, #4]
   19966:	601a      	str	r2, [r3, #0]
}
   19968:	bf00      	nop
   1996a:	3714      	adds	r7, #20
   1996c:	46bd      	mov	sp, r7
   1996e:	bc80      	pop	{r7}
   19970:	4770      	bx	lr

00019972 <hri_port_clear_OUT_reg>:
{
   19972:	b480      	push	{r7}
   19974:	b085      	sub	sp, #20
   19976:	af00      	add	r7, sp, #0
   19978:	60f8      	str	r0, [r7, #12]
   1997a:	460b      	mov	r3, r1
   1997c:	607a      	str	r2, [r7, #4]
   1997e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   19980:	7afb      	ldrb	r3, [r7, #11]
   19982:	68fa      	ldr	r2, [r7, #12]
   19984:	01db      	lsls	r3, r3, #7
   19986:	4413      	add	r3, r2
   19988:	3314      	adds	r3, #20
   1998a:	687a      	ldr	r2, [r7, #4]
   1998c:	601a      	str	r2, [r3, #0]
}
   1998e:	bf00      	nop
   19990:	3714      	adds	r7, #20
   19992:	46bd      	mov	sp, r7
   19994:	bc80      	pop	{r7}
   19996:	4770      	bx	lr

00019998 <_gpio_set_level>:
{
   19998:	b580      	push	{r7, lr}
   1999a:	b082      	sub	sp, #8
   1999c:	af00      	add	r7, sp, #0
   1999e:	4603      	mov	r3, r0
   199a0:	6039      	str	r1, [r7, #0]
   199a2:	71fb      	strb	r3, [r7, #7]
   199a4:	4613      	mov	r3, r2
   199a6:	71bb      	strb	r3, [r7, #6]
	if (level) {
   199a8:	79bb      	ldrb	r3, [r7, #6]
   199aa:	2b00      	cmp	r3, #0
   199ac:	d006      	beq.n	199bc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   199ae:	79fb      	ldrb	r3, [r7, #7]
   199b0:	683a      	ldr	r2, [r7, #0]
   199b2:	4619      	mov	r1, r3
   199b4:	4806      	ldr	r0, [pc, #24]	; (199d0 <_gpio_set_level+0x38>)
   199b6:	4b07      	ldr	r3, [pc, #28]	; (199d4 <_gpio_set_level+0x3c>)
   199b8:	4798      	blx	r3
}
   199ba:	e005      	b.n	199c8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   199bc:	79fb      	ldrb	r3, [r7, #7]
   199be:	683a      	ldr	r2, [r7, #0]
   199c0:	4619      	mov	r1, r3
   199c2:	4803      	ldr	r0, [pc, #12]	; (199d0 <_gpio_set_level+0x38>)
   199c4:	4b04      	ldr	r3, [pc, #16]	; (199d8 <_gpio_set_level+0x40>)
   199c6:	4798      	blx	r3
}
   199c8:	bf00      	nop
   199ca:	3708      	adds	r7, #8
   199cc:	46bd      	mov	sp, r7
   199ce:	bd80      	pop	{r7, pc}
   199d0:	41008000 	.word	0x41008000
   199d4:	0001994d 	.word	0x0001994d
   199d8:	00019973 	.word	0x00019973

000199dc <gpio_set_pin_level>:
{
   199dc:	b580      	push	{r7, lr}
   199de:	b082      	sub	sp, #8
   199e0:	af00      	add	r7, sp, #0
   199e2:	4603      	mov	r3, r0
   199e4:	460a      	mov	r2, r1
   199e6:	71fb      	strb	r3, [r7, #7]
   199e8:	4613      	mov	r3, r2
   199ea:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   199ec:	79fb      	ldrb	r3, [r7, #7]
   199ee:	115b      	asrs	r3, r3, #5
   199f0:	b2d8      	uxtb	r0, r3
   199f2:	79fb      	ldrb	r3, [r7, #7]
   199f4:	f003 031f 	and.w	r3, r3, #31
   199f8:	2201      	movs	r2, #1
   199fa:	fa02 f303 	lsl.w	r3, r2, r3
   199fe:	79ba      	ldrb	r2, [r7, #6]
   19a00:	4619      	mov	r1, r3
   19a02:	4b03      	ldr	r3, [pc, #12]	; (19a10 <gpio_set_pin_level+0x34>)
   19a04:	4798      	blx	r3
}
   19a06:	bf00      	nop
   19a08:	3708      	adds	r7, #8
   19a0a:	46bd      	mov	sp, r7
   19a0c:	bd80      	pop	{r7, pc}
   19a0e:	bf00      	nop
   19a10:	00019999 	.word	0x00019999

00019a14 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   19a14:	b480      	push	{r7}
   19a16:	b083      	sub	sp, #12
   19a18:	af00      	add	r7, sp, #0
   19a1a:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   19a1c:	4a05      	ldr	r2, [pc, #20]	; (19a34 <_ZN6LT_SPIC1Ev+0x20>)
   19a1e:	687b      	ldr	r3, [r7, #4]
   19a20:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   19a22:	687b      	ldr	r3, [r7, #4]
   19a24:	4a04      	ldr	r2, [pc, #16]	; (19a38 <_ZN6LT_SPIC1Ev+0x24>)
   19a26:	605a      	str	r2, [r3, #4]
} //LT_SPI
   19a28:	687b      	ldr	r3, [r7, #4]
   19a2a:	4618      	mov	r0, r3
   19a2c:	370c      	adds	r7, #12
   19a2e:	46bd      	mov	sp, r7
   19a30:	bc80      	pop	{r7}
   19a32:	4770      	bx	lr
   19a34:	2000a6d4 	.word	0x2000a6d4
   19a38:	2000a6d8 	.word	0x2000a6d8

00019a3c <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   19a3c:	b480      	push	{r7}
   19a3e:	b083      	sub	sp, #12
   19a40:	af00      	add	r7, sp, #0
   19a42:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   19a44:	687b      	ldr	r3, [r7, #4]
   19a46:	4618      	mov	r0, r3
   19a48:	370c      	adds	r7, #12
   19a4a:	46bd      	mov	sp, r7
   19a4c:	bc80      	pop	{r7}
   19a4e:	4770      	bx	lr

00019a50 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   19a50:	b580      	push	{r7, lr}
   19a52:	b082      	sub	sp, #8
   19a54:	af00      	add	r7, sp, #0
   19a56:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   19a58:	687b      	ldr	r3, [r7, #4]
   19a5a:	685a      	ldr	r2, [r3, #4]
   19a5c:	687b      	ldr	r3, [r7, #4]
   19a5e:	691b      	ldr	r3, [r3, #16]
   19a60:	4619      	mov	r1, r3
   19a62:	4610      	mov	r0, r2
   19a64:	4b0e      	ldr	r3, [pc, #56]	; (19aa0 <_ZN6LT_SPI4initEv+0x50>)
   19a66:	4798      	blx	r3
	spiTemp->init();
   19a68:	687b      	ldr	r3, [r7, #4]
   19a6a:	685b      	ldr	r3, [r3, #4]
   19a6c:	4618      	mov	r0, r3
   19a6e:	4b0d      	ldr	r3, [pc, #52]	; (19aa4 <_ZN6LT_SPI4initEv+0x54>)
   19a70:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   19a72:	687b      	ldr	r3, [r7, #4]
   19a74:	685b      	ldr	r3, [r3, #4]
   19a76:	685a      	ldr	r2, [r3, #4]
   19a78:	687b      	ldr	r3, [r7, #4]
   19a7a:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   19a7c:	687b      	ldr	r3, [r7, #4]
   19a7e:	685b      	ldr	r3, [r3, #4]
   19a80:	689a      	ldr	r2, [r3, #8]
   19a82:	687b      	ldr	r3, [r7, #4]
   19a84:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   19a86:	687b      	ldr	r3, [r7, #4]
   19a88:	685b      	ldr	r3, [r3, #4]
   19a8a:	4618      	mov	r0, r3
   19a8c:	4b06      	ldr	r3, [pc, #24]	; (19aa8 <_ZN6LT_SPI4initEv+0x58>)
   19a8e:	4798      	blx	r3
	ready=true;
   19a90:	687b      	ldr	r3, [r7, #4]
   19a92:	2201      	movs	r2, #1
   19a94:	701a      	strb	r2, [r3, #0]
}
   19a96:	bf00      	nop
   19a98:	3708      	adds	r7, #8
   19a9a:	46bd      	mov	sp, r7
   19a9c:	bd80      	pop	{r7, pc}
   19a9e:	bf00      	nop
   19aa0:	00016109 	.word	0x00016109
   19aa4:	000160c1 	.word	0x000160c1
   19aa8:	0001612d 	.word	0x0001612d

00019aac <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   19aac:	b480      	push	{r7}
   19aae:	b083      	sub	sp, #12
   19ab0:	af00      	add	r7, sp, #0
   19ab2:	6078      	str	r0, [r7, #4]
   19ab4:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   19ab6:	687b      	ldr	r3, [r7, #4]
   19ab8:	683a      	ldr	r2, [r7, #0]
   19aba:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   19abc:	4a03      	ldr	r2, [pc, #12]	; (19acc <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   19abe:	687b      	ldr	r3, [r7, #4]
   19ac0:	6013      	str	r3, [r2, #0]
}
   19ac2:	bf00      	nop
   19ac4:	370c      	adds	r7, #12
   19ac6:	46bd      	mov	sp, r7
   19ac8:	bc80      	pop	{r7}
   19aca:	4770      	bx	lr
   19acc:	2000a6d4 	.word	0x2000a6d4

00019ad0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   19ad0:	b580      	push	{r7, lr}
   19ad2:	b086      	sub	sp, #24
   19ad4:	af00      	add	r7, sp, #0
   19ad6:	60f8      	str	r0, [r7, #12]
   19ad8:	60b9      	str	r1, [r7, #8]
   19ada:	607a      	str	r2, [r7, #4]
   19adc:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   19ade:	687b      	ldr	r3, [r7, #4]
   19ae0:	781b      	ldrb	r3, [r3, #0]
   19ae2:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   19ae4:	68b9      	ldr	r1, [r7, #8]
   19ae6:	68f8      	ldr	r0, [r7, #12]
   19ae8:	4b25      	ldr	r3, [pc, #148]	; (19b80 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   19aea:	4798      	blx	r3
	
	switch(rOrw){
   19aec:	7dfb      	ldrb	r3, [r7, #23]
   19aee:	2b02      	cmp	r3, #2
   19af0:	d002      	beq.n	19af8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   19af2:	2b03      	cmp	r3, #3
   19af4:	d009      	beq.n	19b0a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   19af6:	e028      	b.n	19b4a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   19af8:	68fb      	ldr	r3, [r7, #12]
   19afa:	685b      	ldr	r3, [r3, #4]
   19afc:	f897 2020 	ldrb.w	r2, [r7, #32]
   19b00:	6879      	ldr	r1, [r7, #4]
   19b02:	4618      	mov	r0, r3
   19b04:	4b1f      	ldr	r3, [pc, #124]	; (19b84 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   19b06:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   19b08:	e031      	b.n	19b6e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   19b0a:	68fb      	ldr	r3, [r7, #12]
   19b0c:	685b      	ldr	r3, [r3, #4]
   19b0e:	2203      	movs	r2, #3
   19b10:	6879      	ldr	r1, [r7, #4]
   19b12:	4618      	mov	r0, r3
   19b14:	4b1b      	ldr	r3, [pc, #108]	; (19b84 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   19b16:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   19b18:	f897 3020 	ldrb.w	r3, [r7, #32]
   19b1c:	2b04      	cmp	r3, #4
   19b1e:	dd0b      	ble.n	19b38 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   19b20:	68fb      	ldr	r3, [r7, #12]
   19b22:	6858      	ldr	r0, [r3, #4]
   19b24:	f897 3020 	ldrb.w	r3, [r7, #32]
   19b28:	3b03      	subs	r3, #3
   19b2a:	461a      	mov	r2, r3
   19b2c:	6839      	ldr	r1, [r7, #0]
   19b2e:	4b16      	ldr	r3, [pc, #88]	; (19b88 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   19b30:	4798      	blx	r3
					asm("nop");
   19b32:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   19b34:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   19b36:	e01a      	b.n	19b6e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   19b38:	68fb      	ldr	r3, [r7, #12]
   19b3a:	685b      	ldr	r3, [r3, #4]
   19b3c:	2201      	movs	r2, #1
   19b3e:	6839      	ldr	r1, [r7, #0]
   19b40:	4618      	mov	r0, r3
   19b42:	4b11      	ldr	r3, [pc, #68]	; (19b88 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   19b44:	4798      	blx	r3
				asm("nop");
   19b46:	bf00      	nop
			break;
   19b48:	e011      	b.n	19b6e <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   19b4a:	68fb      	ldr	r3, [r7, #12]
   19b4c:	685b      	ldr	r3, [r3, #4]
   19b4e:	f897 2020 	ldrb.w	r2, [r7, #32]
   19b52:	6879      	ldr	r1, [r7, #4]
   19b54:	4618      	mov	r0, r3
   19b56:	4b0b      	ldr	r3, [pc, #44]	; (19b84 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   19b58:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   19b5a:	68fb      	ldr	r3, [r7, #12]
   19b5c:	6858      	ldr	r0, [r3, #4]
   19b5e:	f897 3020 	ldrb.w	r3, [r7, #32]
   19b62:	3b03      	subs	r3, #3
   19b64:	461a      	mov	r2, r3
   19b66:	6839      	ldr	r1, [r7, #0]
   19b68:	4b07      	ldr	r3, [pc, #28]	; (19b88 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   19b6a:	4798      	blx	r3
			break;
   19b6c:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   19b6e:	68b9      	ldr	r1, [r7, #8]
   19b70:	68f8      	ldr	r0, [r7, #12]
   19b72:	4b06      	ldr	r3, [pc, #24]	; (19b8c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   19b74:	4798      	blx	r3
	asm("nop");
   19b76:	bf00      	nop
	
}
   19b78:	bf00      	nop
   19b7a:	3718      	adds	r7, #24
   19b7c:	46bd      	mov	sp, r7
   19b7e:	bd80      	pop	{r7, pc}
   19b80:	00019b91 	.word	0x00019b91
   19b84:	00016169 	.word	0x00016169
   19b88:	000161ad 	.word	0x000161ad
   19b8c:	00019bd9 	.word	0x00019bd9

00019b90 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   19b90:	b580      	push	{r7, lr}
   19b92:	b082      	sub	sp, #8
   19b94:	af00      	add	r7, sp, #0
   19b96:	6078      	str	r0, [r7, #4]
   19b98:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   19b9a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   19b9e:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   19ba0:	683b      	ldr	r3, [r7, #0]
   19ba2:	b2db      	uxtb	r3, r3
   19ba4:	2100      	movs	r1, #0
   19ba6:	4618      	mov	r0, r3
   19ba8:	4b08      	ldr	r3, [pc, #32]	; (19bcc <_ZN6LT_SPI4OpenEm+0x3c>)
   19baa:	4798      	blx	r3
	 delay_us(10);
   19bac:	200a      	movs	r0, #10
   19bae:	4b08      	ldr	r3, [pc, #32]	; (19bd0 <_ZN6LT_SPI4OpenEm+0x40>)
   19bb0:	4798      	blx	r3
	spiTemp->Enable();
   19bb2:	687b      	ldr	r3, [r7, #4]
   19bb4:	685b      	ldr	r3, [r3, #4]
   19bb6:	4618      	mov	r0, r3
   19bb8:	4b06      	ldr	r3, [pc, #24]	; (19bd4 <_ZN6LT_SPI4OpenEm+0x44>)
   19bba:	4798      	blx	r3
	 delay_us(10);
   19bbc:	200a      	movs	r0, #10
   19bbe:	4b04      	ldr	r3, [pc, #16]	; (19bd0 <_ZN6LT_SPI4OpenEm+0x40>)
   19bc0:	4798      	blx	r3
 }
   19bc2:	bf00      	nop
   19bc4:	3708      	adds	r7, #8
   19bc6:	46bd      	mov	sp, r7
   19bc8:	bd80      	pop	{r7, pc}
   19bca:	bf00      	nop
   19bcc:	000199dd 	.word	0x000199dd
   19bd0:	000067a1 	.word	0x000067a1
   19bd4:	0001612d 	.word	0x0001612d

00019bd8 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   19bd8:	b580      	push	{r7, lr}
   19bda:	b082      	sub	sp, #8
   19bdc:	af00      	add	r7, sp, #0
   19bde:	6078      	str	r0, [r7, #4]
   19be0:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   19be2:	200a      	movs	r0, #10
   19be4:	4b0b      	ldr	r3, [pc, #44]	; (19c14 <_ZN6LT_SPI5CloseEm+0x3c>)
   19be6:	4798      	blx	r3
	 spiTemp->Disable();
   19be8:	687b      	ldr	r3, [r7, #4]
   19bea:	685b      	ldr	r3, [r3, #4]
   19bec:	4618      	mov	r0, r3
   19bee:	4b0a      	ldr	r3, [pc, #40]	; (19c18 <_ZN6LT_SPI5CloseEm+0x40>)
   19bf0:	4798      	blx	r3
	delay_us(10);
   19bf2:	200a      	movs	r0, #10
   19bf4:	4b07      	ldr	r3, [pc, #28]	; (19c14 <_ZN6LT_SPI5CloseEm+0x3c>)
   19bf6:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   19bf8:	683b      	ldr	r3, [r7, #0]
   19bfa:	b2db      	uxtb	r3, r3
   19bfc:	2101      	movs	r1, #1
   19bfe:	4618      	mov	r0, r3
   19c00:	4b06      	ldr	r3, [pc, #24]	; (19c1c <_ZN6LT_SPI5CloseEm+0x44>)
   19c02:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   19c04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   19c08:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   19c0a:	bf00      	nop
   19c0c:	3708      	adds	r7, #8
   19c0e:	46bd      	mov	sp, r7
   19c10:	bd80      	pop	{r7, pc}
   19c12:	bf00      	nop
   19c14:	000067a1 	.word	0x000067a1
   19c18:	000161f1 	.word	0x000161f1
   19c1c:	000199dd 	.word	0x000199dd

00019c20 <_Z41__static_initialization_and_destruction_0ii>:
   19c20:	b580      	push	{r7, lr}
   19c22:	b082      	sub	sp, #8
   19c24:	af00      	add	r7, sp, #0
   19c26:	6078      	str	r0, [r7, #4]
   19c28:	6039      	str	r1, [r7, #0]
   19c2a:	687b      	ldr	r3, [r7, #4]
   19c2c:	2b01      	cmp	r3, #1
   19c2e:	d10c      	bne.n	19c4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
   19c30:	683b      	ldr	r3, [r7, #0]
   19c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19c36:	4293      	cmp	r3, r2
   19c38:	d107      	bne.n	19c4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   19c3a:	4806      	ldr	r0, [pc, #24]	; (19c54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   19c3c:	4b06      	ldr	r3, [pc, #24]	; (19c58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   19c3e:	4798      	blx	r3
   19c40:	4a06      	ldr	r2, [pc, #24]	; (19c5c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   19c42:	4907      	ldr	r1, [pc, #28]	; (19c60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   19c44:	4803      	ldr	r0, [pc, #12]	; (19c54 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   19c46:	4b07      	ldr	r3, [pc, #28]	; (19c64 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   19c48:	4798      	blx	r3
   19c4a:	bf00      	nop
   19c4c:	3708      	adds	r7, #8
   19c4e:	46bd      	mov	sp, r7
   19c50:	bd80      	pop	{r7, pc}
   19c52:	bf00      	nop
   19c54:	2000a6d8 	.word	0x2000a6d8
   19c58:	0001608d 	.word	0x0001608d
   19c5c:	20000000 	.word	0x20000000
   19c60:	000160ad 	.word	0x000160ad
   19c64:	00019d1d 	.word	0x00019d1d

00019c68 <_GLOBAL__sub_I_ptrLTSPIClass>:
   19c68:	b580      	push	{r7, lr}
   19c6a:	af00      	add	r7, sp, #0
   19c6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19c70:	2001      	movs	r0, #1
   19c72:	4b01      	ldr	r3, [pc, #4]	; (19c78 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   19c74:	4798      	blx	r3
   19c76:	bd80      	pop	{r7, pc}
   19c78:	00019c21 	.word	0x00019c21

00019c7c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   19c7c:	b580      	push	{r7, lr}
   19c7e:	b084      	sub	sp, #16
   19c80:	af00      	add	r7, sp, #0
   19c82:	60f8      	str	r0, [r7, #12]
   19c84:	60b9      	str	r1, [r7, #8]
   19c86:	4613      	mov	r3, r2
   19c88:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   19c8a:	68fb      	ldr	r3, [r7, #12]
   19c8c:	2b00      	cmp	r3, #0
   19c8e:	d004      	beq.n	19c9a <io_write+0x1e>
   19c90:	68bb      	ldr	r3, [r7, #8]
   19c92:	2b00      	cmp	r3, #0
   19c94:	d001      	beq.n	19c9a <io_write+0x1e>
   19c96:	2301      	movs	r3, #1
   19c98:	e000      	b.n	19c9c <io_write+0x20>
   19c9a:	2300      	movs	r3, #0
   19c9c:	f003 0301 	and.w	r3, r3, #1
   19ca0:	b2db      	uxtb	r3, r3
   19ca2:	2234      	movs	r2, #52	; 0x34
   19ca4:	4907      	ldr	r1, [pc, #28]	; (19cc4 <io_write+0x48>)
   19ca6:	4618      	mov	r0, r3
   19ca8:	4b07      	ldr	r3, [pc, #28]	; (19cc8 <io_write+0x4c>)
   19caa:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   19cac:	68fb      	ldr	r3, [r7, #12]
   19cae:	681b      	ldr	r3, [r3, #0]
   19cb0:	88fa      	ldrh	r2, [r7, #6]
   19cb2:	68b9      	ldr	r1, [r7, #8]
   19cb4:	68f8      	ldr	r0, [r7, #12]
   19cb6:	4798      	blx	r3
   19cb8:	4603      	mov	r3, r0
}
   19cba:	4618      	mov	r0, r3
   19cbc:	3710      	adds	r7, #16
   19cbe:	46bd      	mov	sp, r7
   19cc0:	bd80      	pop	{r7, pc}
   19cc2:	bf00      	nop
   19cc4:	000223e8 	.word	0x000223e8
   19cc8:	00008145 	.word	0x00008145

00019ccc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   19ccc:	b580      	push	{r7, lr}
   19cce:	b084      	sub	sp, #16
   19cd0:	af00      	add	r7, sp, #0
   19cd2:	60f8      	str	r0, [r7, #12]
   19cd4:	60b9      	str	r1, [r7, #8]
   19cd6:	4613      	mov	r3, r2
   19cd8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   19cda:	68fb      	ldr	r3, [r7, #12]
   19cdc:	2b00      	cmp	r3, #0
   19cde:	d004      	beq.n	19cea <io_read+0x1e>
   19ce0:	68bb      	ldr	r3, [r7, #8]
   19ce2:	2b00      	cmp	r3, #0
   19ce4:	d001      	beq.n	19cea <io_read+0x1e>
   19ce6:	2301      	movs	r3, #1
   19ce8:	e000      	b.n	19cec <io_read+0x20>
   19cea:	2300      	movs	r3, #0
   19cec:	f003 0301 	and.w	r3, r3, #1
   19cf0:	b2db      	uxtb	r3, r3
   19cf2:	223d      	movs	r2, #61	; 0x3d
   19cf4:	4907      	ldr	r1, [pc, #28]	; (19d14 <io_read+0x48>)
   19cf6:	4618      	mov	r0, r3
   19cf8:	4b07      	ldr	r3, [pc, #28]	; (19d18 <io_read+0x4c>)
   19cfa:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   19cfc:	68fb      	ldr	r3, [r7, #12]
   19cfe:	685b      	ldr	r3, [r3, #4]
   19d00:	88fa      	ldrh	r2, [r7, #6]
   19d02:	68b9      	ldr	r1, [r7, #8]
   19d04:	68f8      	ldr	r0, [r7, #12]
   19d06:	4798      	blx	r3
   19d08:	4603      	mov	r3, r0
}
   19d0a:	4618      	mov	r0, r3
   19d0c:	3710      	adds	r7, #16
   19d0e:	46bd      	mov	sp, r7
   19d10:	bd80      	pop	{r7, pc}
   19d12:	bf00      	nop
   19d14:	000223e8 	.word	0x000223e8
   19d18:	00008145 	.word	0x00008145

00019d1c <__aeabi_atexit>:
   19d1c:	460b      	mov	r3, r1
   19d1e:	4601      	mov	r1, r0
   19d20:	4618      	mov	r0, r3
   19d22:	f002 ba43 	b.w	1c1ac <__cxa_atexit>
   19d26:	bf00      	nop

00019d28 <_ZdlPvj>:
   19d28:	f7fa bdfe 	b.w	14928 <_ZdlPv>
   19d2c:	0000      	movs	r0, r0
	...

00019d30 <floor>:
   19d30:	f3c1 520a 	ubfx	r2, r1, #20, #11
   19d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d38:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   19d3c:	2e13      	cmp	r6, #19
   19d3e:	460b      	mov	r3, r1
   19d40:	460d      	mov	r5, r1
   19d42:	4604      	mov	r4, r0
   19d44:	4688      	mov	r8, r1
   19d46:	4607      	mov	r7, r0
   19d48:	dc1d      	bgt.n	19d86 <floor+0x56>
   19d4a:	2e00      	cmp	r6, #0
   19d4c:	db40      	blt.n	19dd0 <floor+0xa0>
   19d4e:	4a3c      	ldr	r2, [pc, #240]	; (19e40 <floor+0x110>)
   19d50:	fa42 f906 	asr.w	r9, r2, r6
   19d54:	ea01 0209 	and.w	r2, r1, r9
   19d58:	4302      	orrs	r2, r0
   19d5a:	4686      	mov	lr, r0
   19d5c:	d018      	beq.n	19d90 <floor+0x60>
   19d5e:	a336      	add	r3, pc, #216	; (adr r3, 19e38 <floor+0x108>)
   19d60:	e9d3 2300 	ldrd	r2, r3, [r3]
   19d64:	f001 f91c 	bl	1afa0 <__adddf3>
   19d68:	2200      	movs	r2, #0
   19d6a:	2300      	movs	r3, #0
   19d6c:	f001 fd5a 	bl	1b824 <__aeabi_dcmpgt>
   19d70:	b120      	cbz	r0, 19d7c <floor+0x4c>
   19d72:	2d00      	cmp	r5, #0
   19d74:	db42      	blt.n	19dfc <floor+0xcc>
   19d76:	ea28 0509 	bic.w	r5, r8, r9
   19d7a:	2700      	movs	r7, #0
   19d7c:	463c      	mov	r4, r7
   19d7e:	4629      	mov	r1, r5
   19d80:	4620      	mov	r0, r4
   19d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19d86:	2e33      	cmp	r6, #51	; 0x33
   19d88:	dd06      	ble.n	19d98 <floor+0x68>
   19d8a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   19d8e:	d02f      	beq.n	19df0 <floor+0xc0>
   19d90:	4619      	mov	r1, r3
   19d92:	4620      	mov	r0, r4
   19d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19d98:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   19d9c:	f04f 39ff 	mov.w	r9, #4294967295
   19da0:	fa29 f902 	lsr.w	r9, r9, r2
   19da4:	ea10 0f09 	tst.w	r0, r9
   19da8:	d0f2      	beq.n	19d90 <floor+0x60>
   19daa:	a323      	add	r3, pc, #140	; (adr r3, 19e38 <floor+0x108>)
   19dac:	e9d3 2300 	ldrd	r2, r3, [r3]
   19db0:	f001 f8f6 	bl	1afa0 <__adddf3>
   19db4:	2200      	movs	r2, #0
   19db6:	2300      	movs	r3, #0
   19db8:	f001 fd34 	bl	1b824 <__aeabi_dcmpgt>
   19dbc:	2800      	cmp	r0, #0
   19dbe:	d0dd      	beq.n	19d7c <floor+0x4c>
   19dc0:	2d00      	cmp	r5, #0
   19dc2:	db21      	blt.n	19e08 <floor+0xd8>
   19dc4:	4645      	mov	r5, r8
   19dc6:	ea27 0709 	bic.w	r7, r7, r9
   19dca:	463c      	mov	r4, r7
   19dcc:	4629      	mov	r1, r5
   19dce:	e7d7      	b.n	19d80 <floor+0x50>
   19dd0:	a319      	add	r3, pc, #100	; (adr r3, 19e38 <floor+0x108>)
   19dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   19dd6:	f001 f8e3 	bl	1afa0 <__adddf3>
   19dda:	2200      	movs	r2, #0
   19ddc:	2300      	movs	r3, #0
   19dde:	f001 fd21 	bl	1b824 <__aeabi_dcmpgt>
   19de2:	2800      	cmp	r0, #0
   19de4:	d0ca      	beq.n	19d7c <floor+0x4c>
   19de6:	2d00      	cmp	r5, #0
   19de8:	db19      	blt.n	19e1e <floor+0xee>
   19dea:	2700      	movs	r7, #0
   19dec:	463d      	mov	r5, r7
   19dee:	e7c5      	b.n	19d7c <floor+0x4c>
   19df0:	4602      	mov	r2, r0
   19df2:	460b      	mov	r3, r1
   19df4:	f001 f8d4 	bl	1afa0 <__adddf3>
   19df8:	4604      	mov	r4, r0
   19dfa:	e7ca      	b.n	19d92 <floor+0x62>
   19dfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   19e00:	fa43 f606 	asr.w	r6, r3, r6
   19e04:	44b0      	add	r8, r6
   19e06:	e7b6      	b.n	19d76 <floor+0x46>
   19e08:	2e14      	cmp	r6, #20
   19e0a:	d010      	beq.n	19e2e <floor+0xfe>
   19e0c:	2301      	movs	r3, #1
   19e0e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   19e12:	fa03 f606 	lsl.w	r6, r3, r6
   19e16:	1937      	adds	r7, r6, r4
   19e18:	bf28      	it	cs
   19e1a:	4498      	addcs	r8, r3
   19e1c:	e7d2      	b.n	19dc4 <floor+0x94>
   19e1e:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   19e22:	4b08      	ldr	r3, [pc, #32]	; (19e44 <floor+0x114>)
   19e24:	4322      	orrs	r2, r4
   19e26:	bf18      	it	ne
   19e28:	461d      	movne	r5, r3
   19e2a:	2700      	movs	r7, #0
   19e2c:	e7a6      	b.n	19d7c <floor+0x4c>
   19e2e:	f105 0801 	add.w	r8, r5, #1
   19e32:	e7c7      	b.n	19dc4 <floor+0x94>
   19e34:	f3af 8000 	nop.w
   19e38:	8800759c 	.word	0x8800759c
   19e3c:	7e37e43c 	.word	0x7e37e43c
   19e40:	000fffff 	.word	0x000fffff
   19e44:	bff00000 	.word	0xbff00000

00019e48 <pow>:
   19e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e4c:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 1a140 <pow+0x2f8>
   19e50:	b08d      	sub	sp, #52	; 0x34
   19e52:	4606      	mov	r6, r0
   19e54:	460f      	mov	r7, r1
   19e56:	4614      	mov	r4, r2
   19e58:	461d      	mov	r5, r3
   19e5a:	f000 f975 	bl	1a148 <__ieee754_pow>
   19e5e:	f999 8000 	ldrsb.w	r8, [r9]
   19e62:	f1b8 3fff 	cmp.w	r8, #4294967295
   19e66:	e9cd 0100 	strd	r0, r1, [sp]
   19e6a:	d036      	beq.n	19eda <pow+0x92>
   19e6c:	4622      	mov	r2, r4
   19e6e:	462b      	mov	r3, r5
   19e70:	4620      	mov	r0, r4
   19e72:	4629      	mov	r1, r5
   19e74:	f001 fce0 	bl	1b838 <__aeabi_dcmpun>
   19e78:	4683      	mov	fp, r0
   19e7a:	bb70      	cbnz	r0, 19eda <pow+0x92>
   19e7c:	4632      	mov	r2, r6
   19e7e:	463b      	mov	r3, r7
   19e80:	4630      	mov	r0, r6
   19e82:	4639      	mov	r1, r7
   19e84:	f001 fcd8 	bl	1b838 <__aeabi_dcmpun>
   19e88:	2200      	movs	r2, #0
   19e8a:	4682      	mov	sl, r0
   19e8c:	2300      	movs	r3, #0
   19e8e:	2800      	cmp	r0, #0
   19e90:	f040 80a0 	bne.w	19fd4 <pow+0x18c>
   19e94:	4630      	mov	r0, r6
   19e96:	4639      	mov	r1, r7
   19e98:	f001 fc9c 	bl	1b7d4 <__aeabi_dcmpeq>
   19e9c:	b310      	cbz	r0, 19ee4 <pow+0x9c>
   19e9e:	2200      	movs	r2, #0
   19ea0:	2300      	movs	r3, #0
   19ea2:	4620      	mov	r0, r4
   19ea4:	4629      	mov	r1, r5
   19ea6:	f001 fc95 	bl	1b7d4 <__aeabi_dcmpeq>
   19eaa:	4683      	mov	fp, r0
   19eac:	2800      	cmp	r0, #0
   19eae:	d06a      	beq.n	19f86 <pow+0x13e>
   19eb0:	2201      	movs	r2, #1
   19eb2:	4b9c      	ldr	r3, [pc, #624]	; (1a124 <pow+0x2dc>)
   19eb4:	9202      	str	r2, [sp, #8]
   19eb6:	2100      	movs	r1, #0
   19eb8:	2200      	movs	r2, #0
   19eba:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   19ebe:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19ec2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19ec6:	e9cd 1208 	strd	r1, r2, [sp, #32]
   19eca:	9303      	str	r3, [sp, #12]
   19ecc:	f1b8 0f00 	cmp.w	r8, #0
   19ed0:	d045      	beq.n	19f5e <pow+0x116>
   19ed2:	4c95      	ldr	r4, [pc, #596]	; (1a128 <pow+0x2e0>)
   19ed4:	2300      	movs	r3, #0
   19ed6:	e9cd 3400 	strd	r3, r4, [sp]
   19eda:	e9dd 0100 	ldrd	r0, r1, [sp]
   19ede:	b00d      	add	sp, #52	; 0x34
   19ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
   19ee8:	f000 ff34 	bl	1ad54 <finite>
   19eec:	4680      	mov	r8, r0
   19eee:	2800      	cmp	r0, #0
   19ef0:	f000 808b 	beq.w	1a00a <pow+0x1c2>
   19ef4:	f04f 0a00 	mov.w	sl, #0
   19ef8:	f04f 0b00 	mov.w	fp, #0
   19efc:	4652      	mov	r2, sl
   19efe:	465b      	mov	r3, fp
   19f00:	e9dd 0100 	ldrd	r0, r1, [sp]
   19f04:	f001 fc66 	bl	1b7d4 <__aeabi_dcmpeq>
   19f08:	2800      	cmp	r0, #0
   19f0a:	d0e6      	beq.n	19eda <pow+0x92>
   19f0c:	4630      	mov	r0, r6
   19f0e:	4639      	mov	r1, r7
   19f10:	f000 ff20 	bl	1ad54 <finite>
   19f14:	2800      	cmp	r0, #0
   19f16:	d0e0      	beq.n	19eda <pow+0x92>
   19f18:	4620      	mov	r0, r4
   19f1a:	4629      	mov	r1, r5
   19f1c:	f000 ff1a 	bl	1ad54 <finite>
   19f20:	2800      	cmp	r0, #0
   19f22:	d0da      	beq.n	19eda <pow+0x92>
   19f24:	f999 3000 	ldrsb.w	r3, [r9]
   19f28:	4a7e      	ldr	r2, [pc, #504]	; (1a124 <pow+0x2dc>)
   19f2a:	9203      	str	r2, [sp, #12]
   19f2c:	2104      	movs	r1, #4
   19f2e:	2200      	movs	r2, #0
   19f30:	2b02      	cmp	r3, #2
   19f32:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19f36:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19f3a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   19f3e:	9102      	str	r1, [sp, #8]
   19f40:	920a      	str	r2, [sp, #40]	; 0x28
   19f42:	d003      	beq.n	19f4c <pow+0x104>
   19f44:	a802      	add	r0, sp, #8
   19f46:	f000 ff0b 	bl	1ad60 <matherr>
   19f4a:	b968      	cbnz	r0, 19f68 <pow+0x120>
   19f4c:	f002 f93a 	bl	1c1c4 <__errno>
   19f50:	2322      	movs	r3, #34	; 0x22
   19f52:	6003      	str	r3, [r0, #0]
   19f54:	e008      	b.n	19f68 <pow+0x120>
   19f56:	2300      	movs	r3, #0
   19f58:	2400      	movs	r4, #0
   19f5a:	e9cd 3408 	strd	r3, r4, [sp, #32]
   19f5e:	a802      	add	r0, sp, #8
   19f60:	f000 fefe 	bl	1ad60 <matherr>
   19f64:	2800      	cmp	r0, #0
   19f66:	d030      	beq.n	19fca <pow+0x182>
   19f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19f6a:	b11b      	cbz	r3, 19f74 <pow+0x12c>
   19f6c:	f002 f92a 	bl	1c1c4 <__errno>
   19f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19f72:	6003      	str	r3, [r0, #0]
   19f74:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   19f78:	e9cd 3400 	strd	r3, r4, [sp]
   19f7c:	e9dd 0100 	ldrd	r0, r1, [sp]
   19f80:	b00d      	add	sp, #52	; 0x34
   19f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f86:	4620      	mov	r0, r4
   19f88:	4629      	mov	r1, r5
   19f8a:	f000 fee3 	bl	1ad54 <finite>
   19f8e:	2800      	cmp	r0, #0
   19f90:	d0a3      	beq.n	19eda <pow+0x92>
   19f92:	2200      	movs	r2, #0
   19f94:	2300      	movs	r3, #0
   19f96:	4620      	mov	r0, r4
   19f98:	4629      	mov	r1, r5
   19f9a:	f001 fc25 	bl	1b7e8 <__aeabi_dcmplt>
   19f9e:	2800      	cmp	r0, #0
   19fa0:	d09b      	beq.n	19eda <pow+0x92>
   19fa2:	f999 3000 	ldrsb.w	r3, [r9]
   19fa6:	4a5f      	ldr	r2, [pc, #380]	; (1a124 <pow+0x2dc>)
   19fa8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   19fac:	2101      	movs	r1, #1
   19fae:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19fb2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19fb6:	9102      	str	r1, [sp, #8]
   19fb8:	9203      	str	r2, [sp, #12]
   19fba:	2b00      	cmp	r3, #0
   19fbc:	d0cb      	beq.n	19f56 <pow+0x10e>
   19fbe:	495b      	ldr	r1, [pc, #364]	; (1a12c <pow+0x2e4>)
   19fc0:	2000      	movs	r0, #0
   19fc2:	2b02      	cmp	r3, #2
   19fc4:	e9cd 0108 	strd	r0, r1, [sp, #32]
   19fc8:	d1c9      	bne.n	19f5e <pow+0x116>
   19fca:	f002 f8fb 	bl	1c1c4 <__errno>
   19fce:	2321      	movs	r3, #33	; 0x21
   19fd0:	6003      	str	r3, [r0, #0]
   19fd2:	e7c9      	b.n	19f68 <pow+0x120>
   19fd4:	4620      	mov	r0, r4
   19fd6:	4629      	mov	r1, r5
   19fd8:	f001 fbfc 	bl	1b7d4 <__aeabi_dcmpeq>
   19fdc:	2800      	cmp	r0, #0
   19fde:	f43f af7c 	beq.w	19eda <pow+0x92>
   19fe2:	4b51      	ldr	r3, [pc, #324]	; (1a128 <pow+0x2e0>)
   19fe4:	494f      	ldr	r1, [pc, #316]	; (1a124 <pow+0x2dc>)
   19fe6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   19fea:	2001      	movs	r0, #1
   19fec:	2200      	movs	r2, #0
   19fee:	f1b8 0f02 	cmp.w	r8, #2
   19ff2:	e9cd 6704 	strd	r6, r7, [sp, #16]
   19ff6:	e9cd 4506 	strd	r4, r5, [sp, #24]
   19ffa:	9002      	str	r0, [sp, #8]
   19ffc:	9103      	str	r1, [sp, #12]
   19ffe:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a002:	d1ac      	bne.n	19f5e <pow+0x116>
   1a004:	e9cd 2300 	strd	r2, r3, [sp]
   1a008:	e767      	b.n	19eda <pow+0x92>
   1a00a:	4630      	mov	r0, r6
   1a00c:	4639      	mov	r1, r7
   1a00e:	f000 fea1 	bl	1ad54 <finite>
   1a012:	2800      	cmp	r0, #0
   1a014:	f43f af6e 	beq.w	19ef4 <pow+0xac>
   1a018:	4620      	mov	r0, r4
   1a01a:	4629      	mov	r1, r5
   1a01c:	f000 fe9a 	bl	1ad54 <finite>
   1a020:	2800      	cmp	r0, #0
   1a022:	f43f af67 	beq.w	19ef4 <pow+0xac>
   1a026:	e9dd 2300 	ldrd	r2, r3, [sp]
   1a02a:	4610      	mov	r0, r2
   1a02c:	4619      	mov	r1, r3
   1a02e:	f001 fc03 	bl	1b838 <__aeabi_dcmpun>
   1a032:	2800      	cmp	r0, #0
   1a034:	d158      	bne.n	1a0e8 <pow+0x2a0>
   1a036:	2303      	movs	r3, #3
   1a038:	f999 8000 	ldrsb.w	r8, [r9]
   1a03c:	9302      	str	r3, [sp, #8]
   1a03e:	4b39      	ldr	r3, [pc, #228]	; (1a124 <pow+0x2dc>)
   1a040:	900a      	str	r0, [sp, #40]	; 0x28
   1a042:	9303      	str	r3, [sp, #12]
   1a044:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1a048:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1a04c:	2200      	movs	r2, #0
   1a04e:	2300      	movs	r3, #0
   1a050:	4630      	mov	r0, r6
   1a052:	4639      	mov	r1, r7
   1a054:	f1b8 0f00 	cmp.w	r8, #0
   1a058:	d126      	bne.n	1a0a8 <pow+0x260>
   1a05a:	4f35      	ldr	r7, [pc, #212]	; (1a130 <pow+0x2e8>)
   1a05c:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   1a060:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1a064:	f001 fbc0 	bl	1b7e8 <__aeabi_dcmplt>
   1a068:	2800      	cmp	r0, #0
   1a06a:	f43f af6b 	beq.w	19f44 <pow+0xfc>
   1a06e:	2200      	movs	r2, #0
   1a070:	4b30      	ldr	r3, [pc, #192]	; (1a134 <pow+0x2ec>)
   1a072:	4620      	mov	r0, r4
   1a074:	4629      	mov	r1, r5
   1a076:	f001 f945 	bl	1b304 <__aeabi_dmul>
   1a07a:	4604      	mov	r4, r0
   1a07c:	460d      	mov	r5, r1
   1a07e:	f000 fe77 	bl	1ad70 <rint>
   1a082:	4602      	mov	r2, r0
   1a084:	460b      	mov	r3, r1
   1a086:	4620      	mov	r0, r4
   1a088:	4629      	mov	r1, r5
   1a08a:	f001 fba3 	bl	1b7d4 <__aeabi_dcmpeq>
   1a08e:	bb40      	cbnz	r0, 1a0e2 <pow+0x29a>
   1a090:	4b29      	ldr	r3, [pc, #164]	; (1a138 <pow+0x2f0>)
   1a092:	f999 8000 	ldrsb.w	r8, [r9]
   1a096:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1a09a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a09e:	f1b8 0f02 	cmp.w	r8, #2
   1a0a2:	f47f af4f 	bne.w	19f44 <pow+0xfc>
   1a0a6:	e751      	b.n	19f4c <pow+0x104>
   1a0a8:	4f24      	ldr	r7, [pc, #144]	; (1a13c <pow+0x2f4>)
   1a0aa:	2600      	movs	r6, #0
   1a0ac:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1a0b0:	f001 fb9a 	bl	1b7e8 <__aeabi_dcmplt>
   1a0b4:	2800      	cmp	r0, #0
   1a0b6:	d0f2      	beq.n	1a09e <pow+0x256>
   1a0b8:	2200      	movs	r2, #0
   1a0ba:	4b1e      	ldr	r3, [pc, #120]	; (1a134 <pow+0x2ec>)
   1a0bc:	4620      	mov	r0, r4
   1a0be:	4629      	mov	r1, r5
   1a0c0:	f001 f920 	bl	1b304 <__aeabi_dmul>
   1a0c4:	4604      	mov	r4, r0
   1a0c6:	460d      	mov	r5, r1
   1a0c8:	f000 fe52 	bl	1ad70 <rint>
   1a0cc:	4602      	mov	r2, r0
   1a0ce:	460b      	mov	r3, r1
   1a0d0:	4620      	mov	r0, r4
   1a0d2:	4629      	mov	r1, r5
   1a0d4:	f001 fb7e 	bl	1b7d4 <__aeabi_dcmpeq>
   1a0d8:	b918      	cbnz	r0, 1a0e2 <pow+0x29a>
   1a0da:	4b14      	ldr	r3, [pc, #80]	; (1a12c <pow+0x2e4>)
   1a0dc:	2200      	movs	r2, #0
   1a0de:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a0e2:	f999 8000 	ldrsb.w	r8, [r9]
   1a0e6:	e7da      	b.n	1a09e <pow+0x256>
   1a0e8:	f999 9000 	ldrsb.w	r9, [r9]
   1a0ec:	4b0d      	ldr	r3, [pc, #52]	; (1a124 <pow+0x2dc>)
   1a0ee:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1a0f2:	2201      	movs	r2, #1
   1a0f4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1a0f8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1a0fc:	9202      	str	r2, [sp, #8]
   1a0fe:	9303      	str	r3, [sp, #12]
   1a100:	f1b9 0f00 	cmp.w	r9, #0
   1a104:	f43f af27 	beq.w	19f56 <pow+0x10e>
   1a108:	2200      	movs	r2, #0
   1a10a:	2300      	movs	r3, #0
   1a10c:	4610      	mov	r0, r2
   1a10e:	4619      	mov	r1, r3
   1a110:	f001 fa22 	bl	1b558 <__aeabi_ddiv>
   1a114:	f1b9 0f02 	cmp.w	r9, #2
   1a118:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1a11c:	f43f af55 	beq.w	19fca <pow+0x182>
   1a120:	e71d      	b.n	19f5e <pow+0x116>
   1a122:	bf00      	nop
   1a124:	000223fc 	.word	0x000223fc
   1a128:	3ff00000 	.word	0x3ff00000
   1a12c:	fff00000 	.word	0xfff00000
   1a130:	47efffff 	.word	0x47efffff
   1a134:	3fe00000 	.word	0x3fe00000
   1a138:	c7efffff 	.word	0xc7efffff
   1a13c:	7ff00000 	.word	0x7ff00000
   1a140:	20000247 	.word	0x20000247
   1a144:	00000000 	.word	0x00000000

0001a148 <__ieee754_pow>:
   1a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a14c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1a150:	ea57 0402 	orrs.w	r4, r7, r2
   1a154:	b093      	sub	sp, #76	; 0x4c
   1a156:	d037      	beq.n	1a1c8 <__ieee754_pow+0x80>
   1a158:	4c67      	ldr	r4, [pc, #412]	; (1a2f8 <__ieee754_pow+0x1b0>)
   1a15a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   1a15e:	42a6      	cmp	r6, r4
   1a160:	4683      	mov	fp, r0
   1a162:	460d      	mov	r5, r1
   1a164:	dc29      	bgt.n	1a1ba <__ieee754_pow+0x72>
   1a166:	469a      	mov	sl, r3
   1a168:	4696      	mov	lr, r2
   1a16a:	d025      	beq.n	1a1b8 <__ieee754_pow+0x70>
   1a16c:	42a7      	cmp	r7, r4
   1a16e:	dc24      	bgt.n	1a1ba <__ieee754_pow+0x72>
   1a170:	4c61      	ldr	r4, [pc, #388]	; (1a2f8 <__ieee754_pow+0x1b0>)
   1a172:	42a7      	cmp	r7, r4
   1a174:	d079      	beq.n	1a26a <__ieee754_pow+0x122>
   1a176:	2d00      	cmp	r5, #0
   1a178:	4689      	mov	r9, r1
   1a17a:	4680      	mov	r8, r0
   1a17c:	e9cd 2300 	strd	r2, r3, [sp]
   1a180:	db77      	blt.n	1a272 <__ieee754_pow+0x12a>
   1a182:	2400      	movs	r4, #0
   1a184:	f1be 0f00 	cmp.w	lr, #0
   1a188:	d12c      	bne.n	1a1e4 <__ieee754_pow+0x9c>
   1a18a:	4b5b      	ldr	r3, [pc, #364]	; (1a2f8 <__ieee754_pow+0x1b0>)
   1a18c:	429f      	cmp	r7, r3
   1a18e:	f000 808b 	beq.w	1a2a8 <__ieee754_pow+0x160>
   1a192:	4b5a      	ldr	r3, [pc, #360]	; (1a2fc <__ieee754_pow+0x1b4>)
   1a194:	429f      	cmp	r7, r3
   1a196:	d061      	beq.n	1a25c <__ieee754_pow+0x114>
   1a198:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   1a19c:	f000 83ba 	beq.w	1a914 <__ieee754_pow+0x7cc>
   1a1a0:	4b57      	ldr	r3, [pc, #348]	; (1a300 <__ieee754_pow+0x1b8>)
   1a1a2:	459a      	cmp	sl, r3
   1a1a4:	d11e      	bne.n	1a1e4 <__ieee754_pow+0x9c>
   1a1a6:	2d00      	cmp	r5, #0
   1a1a8:	db1c      	blt.n	1a1e4 <__ieee754_pow+0x9c>
   1a1aa:	4640      	mov	r0, r8
   1a1ac:	4649      	mov	r1, r9
   1a1ae:	b013      	add	sp, #76	; 0x4c
   1a1b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1b4:	f000 bd0e 	b.w	1abd4 <__ieee754_sqrt>
   1a1b8:	b158      	cbz	r0, 1a1d2 <__ieee754_pow+0x8a>
   1a1ba:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   1a1be:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   1a1c2:	ea56 030b 	orrs.w	r3, r6, fp
   1a1c6:	d106      	bne.n	1a1d6 <__ieee754_pow+0x8e>
   1a1c8:	494c      	ldr	r1, [pc, #304]	; (1a2fc <__ieee754_pow+0x1b4>)
   1a1ca:	2000      	movs	r0, #0
   1a1cc:	b013      	add	sp, #76	; 0x4c
   1a1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1d2:	42b7      	cmp	r7, r6
   1a1d4:	ddcc      	ble.n	1a170 <__ieee754_pow+0x28>
   1a1d6:	484b      	ldr	r0, [pc, #300]	; (1a304 <__ieee754_pow+0x1bc>)
   1a1d8:	b013      	add	sp, #76	; 0x4c
   1a1da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1de:	f000 bdc1 	b.w	1ad64 <nan>
   1a1e2:	2400      	movs	r4, #0
   1a1e4:	4640      	mov	r0, r8
   1a1e6:	4649      	mov	r1, r9
   1a1e8:	f000 fdb0 	bl	1ad4c <fabs>
   1a1ec:	f1bb 0f00 	cmp.w	fp, #0
   1a1f0:	d119      	bne.n	1a226 <__ieee754_pow+0xde>
   1a1f2:	b126      	cbz	r6, 1a1fe <__ieee754_pow+0xb6>
   1a1f4:	4b41      	ldr	r3, [pc, #260]	; (1a2fc <__ieee754_pow+0x1b4>)
   1a1f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   1a1fa:	429a      	cmp	r2, r3
   1a1fc:	d113      	bne.n	1a226 <__ieee754_pow+0xde>
   1a1fe:	f1ba 0f00 	cmp.w	sl, #0
   1a202:	f2c0 83bc 	blt.w	1a97e <__ieee754_pow+0x836>
   1a206:	2d00      	cmp	r5, #0
   1a208:	dae0      	bge.n	1a1cc <__ieee754_pow+0x84>
   1a20a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   1a20e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   1a212:	ea56 0304 	orrs.w	r3, r6, r4
   1a216:	f000 848f 	beq.w	1ab38 <__ieee754_pow+0x9f0>
   1a21a:	2c01      	cmp	r4, #1
   1a21c:	d1d6      	bne.n	1a1cc <__ieee754_pow+0x84>
   1a21e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1a222:	4619      	mov	r1, r3
   1a224:	e7d2      	b.n	1a1cc <__ieee754_pow+0x84>
   1a226:	0fed      	lsrs	r5, r5, #31
   1a228:	3d01      	subs	r5, #1
   1a22a:	ea54 0305 	orrs.w	r3, r4, r5
   1a22e:	d04e      	beq.n	1a2ce <__ieee754_pow+0x186>
   1a230:	4b35      	ldr	r3, [pc, #212]	; (1a308 <__ieee754_pow+0x1c0>)
   1a232:	429f      	cmp	r7, r3
   1a234:	dd6e      	ble.n	1a314 <__ieee754_pow+0x1cc>
   1a236:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   1a23a:	429f      	cmp	r7, r3
   1a23c:	f340 83e8 	ble.w	1aa10 <__ieee754_pow+0x8c8>
   1a240:	4b32      	ldr	r3, [pc, #200]	; (1a30c <__ieee754_pow+0x1c4>)
   1a242:	429e      	cmp	r6, r3
   1a244:	dd4e      	ble.n	1a2e4 <__ieee754_pow+0x19c>
   1a246:	f1ba 0f00 	cmp.w	sl, #0
   1a24a:	dd4e      	ble.n	1a2ea <__ieee754_pow+0x1a2>
   1a24c:	a328      	add	r3, pc, #160	; (adr r3, 1a2f0 <__ieee754_pow+0x1a8>)
   1a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a252:	4610      	mov	r0, r2
   1a254:	4619      	mov	r1, r3
   1a256:	f001 f855 	bl	1b304 <__aeabi_dmul>
   1a25a:	e7b7      	b.n	1a1cc <__ieee754_pow+0x84>
   1a25c:	f1ba 0f00 	cmp.w	sl, #0
   1a260:	f2c0 843c 	blt.w	1aadc <__ieee754_pow+0x994>
   1a264:	4640      	mov	r0, r8
   1a266:	4649      	mov	r1, r9
   1a268:	e7b0      	b.n	1a1cc <__ieee754_pow+0x84>
   1a26a:	f1be 0f00 	cmp.w	lr, #0
   1a26e:	d082      	beq.n	1a176 <__ieee754_pow+0x2e>
   1a270:	e7a3      	b.n	1a1ba <__ieee754_pow+0x72>
   1a272:	4b27      	ldr	r3, [pc, #156]	; (1a310 <__ieee754_pow+0x1c8>)
   1a274:	429f      	cmp	r7, r3
   1a276:	dc28      	bgt.n	1a2ca <__ieee754_pow+0x182>
   1a278:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   1a27c:	429f      	cmp	r7, r3
   1a27e:	dd80      	ble.n	1a182 <__ieee754_pow+0x3a>
   1a280:	153b      	asrs	r3, r7, #20
   1a282:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1a286:	2b14      	cmp	r3, #20
   1a288:	f340 843e 	ble.w	1ab08 <__ieee754_pow+0x9c0>
   1a28c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   1a290:	fa2e f203 	lsr.w	r2, lr, r3
   1a294:	fa02 f303 	lsl.w	r3, r2, r3
   1a298:	459e      	cmp	lr, r3
   1a29a:	f47f af72 	bne.w	1a182 <__ieee754_pow+0x3a>
   1a29e:	f002 0201 	and.w	r2, r2, #1
   1a2a2:	f1c2 0402 	rsb	r4, r2, #2
   1a2a6:	e76d      	b.n	1a184 <__ieee754_pow+0x3c>
   1a2a8:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   1a2ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1a2b0:	ea53 030b 	orrs.w	r3, r3, fp
   1a2b4:	d088      	beq.n	1a1c8 <__ieee754_pow+0x80>
   1a2b6:	4b15      	ldr	r3, [pc, #84]	; (1a30c <__ieee754_pow+0x1c4>)
   1a2b8:	429e      	cmp	r6, r3
   1a2ba:	f340 8332 	ble.w	1a922 <__ieee754_pow+0x7da>
   1a2be:	f1ba 0f00 	cmp.w	sl, #0
   1a2c2:	db12      	blt.n	1a2ea <__ieee754_pow+0x1a2>
   1a2c4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a2c8:	e780      	b.n	1a1cc <__ieee754_pow+0x84>
   1a2ca:	2402      	movs	r4, #2
   1a2cc:	e75a      	b.n	1a184 <__ieee754_pow+0x3c>
   1a2ce:	4642      	mov	r2, r8
   1a2d0:	464b      	mov	r3, r9
   1a2d2:	4640      	mov	r0, r8
   1a2d4:	4649      	mov	r1, r9
   1a2d6:	f000 fe61 	bl	1af9c <__aeabi_dsub>
   1a2da:	4602      	mov	r2, r0
   1a2dc:	460b      	mov	r3, r1
   1a2de:	f001 f93b 	bl	1b558 <__aeabi_ddiv>
   1a2e2:	e773      	b.n	1a1cc <__ieee754_pow+0x84>
   1a2e4:	f1ba 0f00 	cmp.w	sl, #0
   1a2e8:	dbb0      	blt.n	1a24c <__ieee754_pow+0x104>
   1a2ea:	2000      	movs	r0, #0
   1a2ec:	2100      	movs	r1, #0
   1a2ee:	e76d      	b.n	1a1cc <__ieee754_pow+0x84>
   1a2f0:	8800759c 	.word	0x8800759c
   1a2f4:	7e37e43c 	.word	0x7e37e43c
   1a2f8:	7ff00000 	.word	0x7ff00000
   1a2fc:	3ff00000 	.word	0x3ff00000
   1a300:	3fe00000 	.word	0x3fe00000
   1a304:	00022534 	.word	0x00022534
   1a308:	41e00000 	.word	0x41e00000
   1a30c:	3fefffff 	.word	0x3fefffff
   1a310:	433fffff 	.word	0x433fffff
   1a314:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   1a318:	f04f 0200 	mov.w	r2, #0
   1a31c:	da05      	bge.n	1a32a <__ieee754_pow+0x1e2>
   1a31e:	4bd4      	ldr	r3, [pc, #848]	; (1a670 <__ieee754_pow+0x528>)
   1a320:	f000 fff0 	bl	1b304 <__aeabi_dmul>
   1a324:	f06f 0234 	mvn.w	r2, #52	; 0x34
   1a328:	460e      	mov	r6, r1
   1a32a:	1533      	asrs	r3, r6, #20
   1a32c:	4fd1      	ldr	r7, [pc, #836]	; (1a674 <__ieee754_pow+0x52c>)
   1a32e:	f3c6 0613 	ubfx	r6, r6, #0, #20
   1a332:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1a336:	4413      	add	r3, r2
   1a338:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   1a33c:	42be      	cmp	r6, r7
   1a33e:	461a      	mov	r2, r3
   1a340:	930d      	str	r3, [sp, #52]	; 0x34
   1a342:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   1a346:	f340 8321 	ble.w	1a98c <__ieee754_pow+0x844>
   1a34a:	4bcb      	ldr	r3, [pc, #812]	; (1a678 <__ieee754_pow+0x530>)
   1a34c:	429e      	cmp	r6, r3
   1a34e:	f340 83fd 	ble.w	1ab4c <__ieee754_pow+0xa04>
   1a352:	4613      	mov	r3, r2
   1a354:	3301      	adds	r3, #1
   1a356:	930d      	str	r3, [sp, #52]	; 0x34
   1a358:	4bc8      	ldr	r3, [pc, #800]	; (1a67c <__ieee754_pow+0x534>)
   1a35a:	2200      	movs	r2, #0
   1a35c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a360:	2700      	movs	r7, #0
   1a362:	2600      	movs	r6, #0
   1a364:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1a368:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   1a36c:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   1a370:	2700      	movs	r7, #0
   1a372:	4602      	mov	r2, r0
   1a374:	4653      	mov	r3, sl
   1a376:	4651      	mov	r1, sl
   1a378:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1a37c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a380:	f000 fe0c 	bl	1af9c <__aeabi_dsub>
   1a384:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a388:	4680      	mov	r8, r0
   1a38a:	4689      	mov	r9, r1
   1a38c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1a390:	f000 fe06 	bl	1afa0 <__adddf3>
   1a394:	4602      	mov	r2, r0
   1a396:	460b      	mov	r3, r1
   1a398:	2000      	movs	r0, #0
   1a39a:	49b8      	ldr	r1, [pc, #736]	; (1a67c <__ieee754_pow+0x534>)
   1a39c:	f001 f8dc 	bl	1b558 <__aeabi_ddiv>
   1a3a0:	460a      	mov	r2, r1
   1a3a2:	4601      	mov	r1, r0
   1a3a4:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   1a3a8:	4613      	mov	r3, r2
   1a3aa:	4649      	mov	r1, r9
   1a3ac:	4602      	mov	r2, r0
   1a3ae:	4640      	mov	r0, r8
   1a3b0:	f000 ffa8 	bl	1b304 <__aeabi_dmul>
   1a3b4:	ea4f 036a 	mov.w	r3, sl, asr #1
   1a3b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1a3bc:	468c      	mov	ip, r1
   1a3be:	4683      	mov	fp, r0
   1a3c0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   1a3c4:	e9cd bc04 	strd	fp, ip, [sp, #16]
   1a3c8:	46da      	mov	sl, fp
   1a3ca:	468b      	mov	fp, r1
   1a3cc:	19d9      	adds	r1, r3, r7
   1a3ce:	2300      	movs	r3, #0
   1a3d0:	e9cd ab02 	strd	sl, fp, [sp, #8]
   1a3d4:	9302      	str	r3, [sp, #8]
   1a3d6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1a3da:	2000      	movs	r0, #0
   1a3dc:	4606      	mov	r6, r0
   1a3de:	460f      	mov	r7, r1
   1a3e0:	4602      	mov	r2, r0
   1a3e2:	460b      	mov	r3, r1
   1a3e4:	4650      	mov	r0, sl
   1a3e6:	4659      	mov	r1, fp
   1a3e8:	f000 ff8c 	bl	1b304 <__aeabi_dmul>
   1a3ec:	4602      	mov	r2, r0
   1a3ee:	460b      	mov	r3, r1
   1a3f0:	4640      	mov	r0, r8
   1a3f2:	4649      	mov	r1, r9
   1a3f4:	f000 fdd2 	bl	1af9c <__aeabi_dsub>
   1a3f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a3fc:	4680      	mov	r8, r0
   1a3fe:	4689      	mov	r9, r1
   1a400:	4630      	mov	r0, r6
   1a402:	4639      	mov	r1, r7
   1a404:	f000 fdca 	bl	1af9c <__aeabi_dsub>
   1a408:	4602      	mov	r2, r0
   1a40a:	460b      	mov	r3, r1
   1a40c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1a410:	f000 fdc4 	bl	1af9c <__aeabi_dsub>
   1a414:	4652      	mov	r2, sl
   1a416:	465b      	mov	r3, fp
   1a418:	f000 ff74 	bl	1b304 <__aeabi_dmul>
   1a41c:	4602      	mov	r2, r0
   1a41e:	460b      	mov	r3, r1
   1a420:	4640      	mov	r0, r8
   1a422:	4649      	mov	r1, r9
   1a424:	f000 fdba 	bl	1af9c <__aeabi_dsub>
   1a428:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1a42c:	f000 ff6a 	bl	1b304 <__aeabi_dmul>
   1a430:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   1a434:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1a438:	4632      	mov	r2, r6
   1a43a:	463b      	mov	r3, r7
   1a43c:	4630      	mov	r0, r6
   1a43e:	4639      	mov	r1, r7
   1a440:	f000 ff60 	bl	1b304 <__aeabi_dmul>
   1a444:	a378      	add	r3, pc, #480	; (adr r3, 1a628 <__ieee754_pow+0x4e0>)
   1a446:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a44a:	4606      	mov	r6, r0
   1a44c:	460f      	mov	r7, r1
   1a44e:	f000 ff59 	bl	1b304 <__aeabi_dmul>
   1a452:	a377      	add	r3, pc, #476	; (adr r3, 1a630 <__ieee754_pow+0x4e8>)
   1a454:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a458:	f000 fda2 	bl	1afa0 <__adddf3>
   1a45c:	4632      	mov	r2, r6
   1a45e:	463b      	mov	r3, r7
   1a460:	f000 ff50 	bl	1b304 <__aeabi_dmul>
   1a464:	a374      	add	r3, pc, #464	; (adr r3, 1a638 <__ieee754_pow+0x4f0>)
   1a466:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a46a:	f000 fd99 	bl	1afa0 <__adddf3>
   1a46e:	4632      	mov	r2, r6
   1a470:	463b      	mov	r3, r7
   1a472:	f000 ff47 	bl	1b304 <__aeabi_dmul>
   1a476:	a372      	add	r3, pc, #456	; (adr r3, 1a640 <__ieee754_pow+0x4f8>)
   1a478:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a47c:	f000 fd90 	bl	1afa0 <__adddf3>
   1a480:	4632      	mov	r2, r6
   1a482:	463b      	mov	r3, r7
   1a484:	f000 ff3e 	bl	1b304 <__aeabi_dmul>
   1a488:	a36f      	add	r3, pc, #444	; (adr r3, 1a648 <__ieee754_pow+0x500>)
   1a48a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a48e:	f000 fd87 	bl	1afa0 <__adddf3>
   1a492:	4632      	mov	r2, r6
   1a494:	463b      	mov	r3, r7
   1a496:	f000 ff35 	bl	1b304 <__aeabi_dmul>
   1a49a:	a36d      	add	r3, pc, #436	; (adr r3, 1a650 <__ieee754_pow+0x508>)
   1a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a4a0:	f000 fd7e 	bl	1afa0 <__adddf3>
   1a4a4:	4632      	mov	r2, r6
   1a4a6:	4680      	mov	r8, r0
   1a4a8:	4689      	mov	r9, r1
   1a4aa:	463b      	mov	r3, r7
   1a4ac:	4630      	mov	r0, r6
   1a4ae:	4639      	mov	r1, r7
   1a4b0:	f000 ff28 	bl	1b304 <__aeabi_dmul>
   1a4b4:	4602      	mov	r2, r0
   1a4b6:	460b      	mov	r3, r1
   1a4b8:	4640      	mov	r0, r8
   1a4ba:	4649      	mov	r1, r9
   1a4bc:	f000 ff22 	bl	1b304 <__aeabi_dmul>
   1a4c0:	4652      	mov	r2, sl
   1a4c2:	4606      	mov	r6, r0
   1a4c4:	460f      	mov	r7, r1
   1a4c6:	465b      	mov	r3, fp
   1a4c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a4cc:	f000 fd68 	bl	1afa0 <__adddf3>
   1a4d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1a4d4:	f000 ff16 	bl	1b304 <__aeabi_dmul>
   1a4d8:	4632      	mov	r2, r6
   1a4da:	463b      	mov	r3, r7
   1a4dc:	f000 fd60 	bl	1afa0 <__adddf3>
   1a4e0:	4652      	mov	r2, sl
   1a4e2:	4680      	mov	r8, r0
   1a4e4:	4689      	mov	r9, r1
   1a4e6:	465b      	mov	r3, fp
   1a4e8:	4650      	mov	r0, sl
   1a4ea:	4659      	mov	r1, fp
   1a4ec:	f000 ff0a 	bl	1b304 <__aeabi_dmul>
   1a4f0:	2200      	movs	r2, #0
   1a4f2:	4b63      	ldr	r3, [pc, #396]	; (1a680 <__ieee754_pow+0x538>)
   1a4f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1a4f8:	f000 fd52 	bl	1afa0 <__adddf3>
   1a4fc:	4642      	mov	r2, r8
   1a4fe:	464b      	mov	r3, r9
   1a500:	f000 fd4e 	bl	1afa0 <__adddf3>
   1a504:	9802      	ldr	r0, [sp, #8]
   1a506:	460f      	mov	r7, r1
   1a508:	4606      	mov	r6, r0
   1a50a:	4632      	mov	r2, r6
   1a50c:	463b      	mov	r3, r7
   1a50e:	4650      	mov	r0, sl
   1a510:	4659      	mov	r1, fp
   1a512:	f000 fef7 	bl	1b304 <__aeabi_dmul>
   1a516:	2200      	movs	r2, #0
   1a518:	4682      	mov	sl, r0
   1a51a:	468b      	mov	fp, r1
   1a51c:	4b58      	ldr	r3, [pc, #352]	; (1a680 <__ieee754_pow+0x538>)
   1a51e:	4630      	mov	r0, r6
   1a520:	4639      	mov	r1, r7
   1a522:	f000 fd3b 	bl	1af9c <__aeabi_dsub>
   1a526:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1a52a:	f000 fd37 	bl	1af9c <__aeabi_dsub>
   1a52e:	4602      	mov	r2, r0
   1a530:	460b      	mov	r3, r1
   1a532:	4640      	mov	r0, r8
   1a534:	4649      	mov	r1, r9
   1a536:	f000 fd31 	bl	1af9c <__aeabi_dsub>
   1a53a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a53e:	f000 fee1 	bl	1b304 <__aeabi_dmul>
   1a542:	4632      	mov	r2, r6
   1a544:	4680      	mov	r8, r0
   1a546:	4689      	mov	r9, r1
   1a548:	463b      	mov	r3, r7
   1a54a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1a54e:	f000 fed9 	bl	1b304 <__aeabi_dmul>
   1a552:	4602      	mov	r2, r0
   1a554:	460b      	mov	r3, r1
   1a556:	4640      	mov	r0, r8
   1a558:	4649      	mov	r1, r9
   1a55a:	f000 fd21 	bl	1afa0 <__adddf3>
   1a55e:	4680      	mov	r8, r0
   1a560:	4689      	mov	r9, r1
   1a562:	4602      	mov	r2, r0
   1a564:	460b      	mov	r3, r1
   1a566:	4650      	mov	r0, sl
   1a568:	4659      	mov	r1, fp
   1a56a:	e9cd ab04 	strd	sl, fp, [sp, #16]
   1a56e:	f000 fd17 	bl	1afa0 <__adddf3>
   1a572:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1a576:	a338      	add	r3, pc, #224	; (adr r3, 1a658 <__ieee754_pow+0x510>)
   1a578:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a57c:	4650      	mov	r0, sl
   1a57e:	460f      	mov	r7, r1
   1a580:	f000 fec0 	bl	1b304 <__aeabi_dmul>
   1a584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a588:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1a58c:	4639      	mov	r1, r7
   1a58e:	4650      	mov	r0, sl
   1a590:	f000 fd04 	bl	1af9c <__aeabi_dsub>
   1a594:	4602      	mov	r2, r0
   1a596:	460b      	mov	r3, r1
   1a598:	4640      	mov	r0, r8
   1a59a:	4649      	mov	r1, r9
   1a59c:	f000 fcfe 	bl	1af9c <__aeabi_dsub>
   1a5a0:	a32f      	add	r3, pc, #188	; (adr r3, 1a660 <__ieee754_pow+0x518>)
   1a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a5a6:	f000 fead 	bl	1b304 <__aeabi_dmul>
   1a5aa:	a32f      	add	r3, pc, #188	; (adr r3, 1a668 <__ieee754_pow+0x520>)
   1a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a5b0:	4680      	mov	r8, r0
   1a5b2:	4689      	mov	r9, r1
   1a5b4:	4650      	mov	r0, sl
   1a5b6:	4639      	mov	r1, r7
   1a5b8:	f000 fea4 	bl	1b304 <__aeabi_dmul>
   1a5bc:	4602      	mov	r2, r0
   1a5be:	460b      	mov	r3, r1
   1a5c0:	4640      	mov	r0, r8
   1a5c2:	4649      	mov	r1, r9
   1a5c4:	f000 fcec 	bl	1afa0 <__adddf3>
   1a5c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1a5cc:	f000 fce8 	bl	1afa0 <__adddf3>
   1a5d0:	4680      	mov	r8, r0
   1a5d2:	980d      	ldr	r0, [sp, #52]	; 0x34
   1a5d4:	4689      	mov	r9, r1
   1a5d6:	f000 fe2f 	bl	1b238 <__aeabi_i2d>
   1a5da:	4642      	mov	r2, r8
   1a5dc:	4606      	mov	r6, r0
   1a5de:	460f      	mov	r7, r1
   1a5e0:	464b      	mov	r3, r9
   1a5e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1a5e6:	f000 fcdb 	bl	1afa0 <__adddf3>
   1a5ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1a5ee:	f000 fcd7 	bl	1afa0 <__adddf3>
   1a5f2:	4632      	mov	r2, r6
   1a5f4:	463b      	mov	r3, r7
   1a5f6:	f000 fcd3 	bl	1afa0 <__adddf3>
   1a5fa:	4632      	mov	r2, r6
   1a5fc:	463b      	mov	r3, r7
   1a5fe:	4650      	mov	r0, sl
   1a600:	468b      	mov	fp, r1
   1a602:	f000 fccb 	bl	1af9c <__aeabi_dsub>
   1a606:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1a60a:	f000 fcc7 	bl	1af9c <__aeabi_dsub>
   1a60e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a612:	f000 fcc3 	bl	1af9c <__aeabi_dsub>
   1a616:	4602      	mov	r2, r0
   1a618:	460b      	mov	r3, r1
   1a61a:	4640      	mov	r0, r8
   1a61c:	4649      	mov	r1, r9
   1a61e:	f000 fcbd 	bl	1af9c <__aeabi_dsub>
   1a622:	4680      	mov	r8, r0
   1a624:	e02e      	b.n	1a684 <__ieee754_pow+0x53c>
   1a626:	bf00      	nop
   1a628:	4a454eef 	.word	0x4a454eef
   1a62c:	3fca7e28 	.word	0x3fca7e28
   1a630:	93c9db65 	.word	0x93c9db65
   1a634:	3fcd864a 	.word	0x3fcd864a
   1a638:	a91d4101 	.word	0xa91d4101
   1a63c:	3fd17460 	.word	0x3fd17460
   1a640:	518f264d 	.word	0x518f264d
   1a644:	3fd55555 	.word	0x3fd55555
   1a648:	db6fabff 	.word	0xdb6fabff
   1a64c:	3fdb6db6 	.word	0x3fdb6db6
   1a650:	33333303 	.word	0x33333303
   1a654:	3fe33333 	.word	0x3fe33333
   1a658:	e0000000 	.word	0xe0000000
   1a65c:	3feec709 	.word	0x3feec709
   1a660:	dc3a03fd 	.word	0xdc3a03fd
   1a664:	3feec709 	.word	0x3feec709
   1a668:	145b01f5 	.word	0x145b01f5
   1a66c:	be3e2fe0 	.word	0xbe3e2fe0
   1a670:	43400000 	.word	0x43400000
   1a674:	0003988e 	.word	0x0003988e
   1a678:	000bb679 	.word	0x000bb679
   1a67c:	3ff00000 	.word	0x3ff00000
   1a680:	40080000 	.word	0x40080000
   1a684:	4689      	mov	r9, r1
   1a686:	3c01      	subs	r4, #1
   1a688:	ea54 0305 	orrs.w	r3, r4, r5
   1a68c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a690:	bf14      	ite	ne
   1a692:	4cd9      	ldrne	r4, [pc, #868]	; (1a9f8 <__ieee754_pow+0x8b0>)
   1a694:	4cd9      	ldreq	r4, [pc, #868]	; (1a9fc <__ieee754_pow+0x8b4>)
   1a696:	2300      	movs	r3, #0
   1a698:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1a69c:	4603      	mov	r3, r0
   1a69e:	460c      	mov	r4, r1
   1a6a0:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1a6a4:	2300      	movs	r3, #0
   1a6a6:	9302      	str	r3, [sp, #8]
   1a6a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   1a6ac:	4622      	mov	r2, r4
   1a6ae:	462b      	mov	r3, r5
   1a6b0:	f000 fc74 	bl	1af9c <__aeabi_dsub>
   1a6b4:	4652      	mov	r2, sl
   1a6b6:	465b      	mov	r3, fp
   1a6b8:	f000 fe24 	bl	1b304 <__aeabi_dmul>
   1a6bc:	e9dd 2300 	ldrd	r2, r3, [sp]
   1a6c0:	4606      	mov	r6, r0
   1a6c2:	460f      	mov	r7, r1
   1a6c4:	4640      	mov	r0, r8
   1a6c6:	4649      	mov	r1, r9
   1a6c8:	f000 fe1c 	bl	1b304 <__aeabi_dmul>
   1a6cc:	4602      	mov	r2, r0
   1a6ce:	460b      	mov	r3, r1
   1a6d0:	4630      	mov	r0, r6
   1a6d2:	4639      	mov	r1, r7
   1a6d4:	f000 fc64 	bl	1afa0 <__adddf3>
   1a6d8:	4622      	mov	r2, r4
   1a6da:	4680      	mov	r8, r0
   1a6dc:	4689      	mov	r9, r1
   1a6de:	462b      	mov	r3, r5
   1a6e0:	4650      	mov	r0, sl
   1a6e2:	4659      	mov	r1, fp
   1a6e4:	e9cd 8900 	strd	r8, r9, [sp]
   1a6e8:	f000 fe0c 	bl	1b304 <__aeabi_dmul>
   1a6ec:	460b      	mov	r3, r1
   1a6ee:	4602      	mov	r2, r0
   1a6f0:	4606      	mov	r6, r0
   1a6f2:	460f      	mov	r7, r1
   1a6f4:	4640      	mov	r0, r8
   1a6f6:	4649      	mov	r1, r9
   1a6f8:	f000 fc52 	bl	1afa0 <__adddf3>
   1a6fc:	4bc0      	ldr	r3, [pc, #768]	; (1aa00 <__ieee754_pow+0x8b8>)
   1a6fe:	4299      	cmp	r1, r3
   1a700:	4604      	mov	r4, r0
   1a702:	460d      	mov	r5, r1
   1a704:	468a      	mov	sl, r1
   1a706:	f340 8116 	ble.w	1a936 <__ieee754_pow+0x7ee>
   1a70a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   1a70e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   1a712:	4303      	orrs	r3, r0
   1a714:	f040 81ea 	bne.w	1aaec <__ieee754_pow+0x9a4>
   1a718:	a3a3      	add	r3, pc, #652	; (adr r3, 1a9a8 <__ieee754_pow+0x860>)
   1a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a71e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a722:	f000 fc3d 	bl	1afa0 <__adddf3>
   1a726:	4632      	mov	r2, r6
   1a728:	4680      	mov	r8, r0
   1a72a:	4689      	mov	r9, r1
   1a72c:	463b      	mov	r3, r7
   1a72e:	4620      	mov	r0, r4
   1a730:	4629      	mov	r1, r5
   1a732:	f000 fc33 	bl	1af9c <__aeabi_dsub>
   1a736:	4602      	mov	r2, r0
   1a738:	460b      	mov	r3, r1
   1a73a:	4640      	mov	r0, r8
   1a73c:	4649      	mov	r1, r9
   1a73e:	f001 f871 	bl	1b824 <__aeabi_dcmpgt>
   1a742:	2800      	cmp	r0, #0
   1a744:	f040 81d2 	bne.w	1aaec <__ieee754_pow+0x9a4>
   1a748:	46a8      	mov	r8, r5
   1a74a:	ea4f 5328 	mov.w	r3, r8, asr #20
   1a74e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1a752:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1a756:	fa42 f303 	asr.w	r3, r2, r3
   1a75a:	4453      	add	r3, sl
   1a75c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   1a760:	4da8      	ldr	r5, [pc, #672]	; (1aa04 <__ieee754_pow+0x8bc>)
   1a762:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   1a766:	4115      	asrs	r5, r2
   1a768:	f3c3 0413 	ubfx	r4, r3, #0, #20
   1a76c:	ea23 0105 	bic.w	r1, r3, r5
   1a770:	2000      	movs	r0, #0
   1a772:	f1c2 0b14 	rsb	fp, r2, #20
   1a776:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   1a77a:	f1ba 0f00 	cmp.w	sl, #0
   1a77e:	4602      	mov	r2, r0
   1a780:	460b      	mov	r3, r1
   1a782:	fa44 fb0b 	asr.w	fp, r4, fp
   1a786:	4630      	mov	r0, r6
   1a788:	4639      	mov	r1, r7
   1a78a:	bfb8      	it	lt
   1a78c:	f1cb 0b00 	rsblt	fp, fp, #0
   1a790:	f000 fc04 	bl	1af9c <__aeabi_dsub>
   1a794:	4602      	mov	r2, r0
   1a796:	460b      	mov	r3, r1
   1a798:	4606      	mov	r6, r0
   1a79a:	460f      	mov	r7, r1
   1a79c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a7a0:	f000 fbfe 	bl	1afa0 <__adddf3>
   1a7a4:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   1a7a8:	460d      	mov	r5, r1
   1a7aa:	2400      	movs	r4, #0
   1a7ac:	a380      	add	r3, pc, #512	; (adr r3, 1a9b0 <__ieee754_pow+0x868>)
   1a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a7b2:	4620      	mov	r0, r4
   1a7b4:	4629      	mov	r1, r5
   1a7b6:	f000 fda5 	bl	1b304 <__aeabi_dmul>
   1a7ba:	4632      	mov	r2, r6
   1a7bc:	4680      	mov	r8, r0
   1a7be:	4689      	mov	r9, r1
   1a7c0:	463b      	mov	r3, r7
   1a7c2:	4620      	mov	r0, r4
   1a7c4:	4629      	mov	r1, r5
   1a7c6:	f000 fbe9 	bl	1af9c <__aeabi_dsub>
   1a7ca:	4602      	mov	r2, r0
   1a7cc:	460b      	mov	r3, r1
   1a7ce:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a7d2:	f000 fbe3 	bl	1af9c <__aeabi_dsub>
   1a7d6:	a378      	add	r3, pc, #480	; (adr r3, 1a9b8 <__ieee754_pow+0x870>)
   1a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a7dc:	f000 fd92 	bl	1b304 <__aeabi_dmul>
   1a7e0:	a377      	add	r3, pc, #476	; (adr r3, 1a9c0 <__ieee754_pow+0x878>)
   1a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a7e6:	4606      	mov	r6, r0
   1a7e8:	460f      	mov	r7, r1
   1a7ea:	4620      	mov	r0, r4
   1a7ec:	4629      	mov	r1, r5
   1a7ee:	f000 fd89 	bl	1b304 <__aeabi_dmul>
   1a7f2:	4602      	mov	r2, r0
   1a7f4:	460b      	mov	r3, r1
   1a7f6:	4630      	mov	r0, r6
   1a7f8:	4639      	mov	r1, r7
   1a7fa:	f000 fbd1 	bl	1afa0 <__adddf3>
   1a7fe:	4606      	mov	r6, r0
   1a800:	460f      	mov	r7, r1
   1a802:	4602      	mov	r2, r0
   1a804:	460b      	mov	r3, r1
   1a806:	4640      	mov	r0, r8
   1a808:	4649      	mov	r1, r9
   1a80a:	f000 fbc9 	bl	1afa0 <__adddf3>
   1a80e:	4642      	mov	r2, r8
   1a810:	464b      	mov	r3, r9
   1a812:	4604      	mov	r4, r0
   1a814:	460d      	mov	r5, r1
   1a816:	f000 fbc1 	bl	1af9c <__aeabi_dsub>
   1a81a:	4602      	mov	r2, r0
   1a81c:	460b      	mov	r3, r1
   1a81e:	4630      	mov	r0, r6
   1a820:	4639      	mov	r1, r7
   1a822:	f000 fbbb 	bl	1af9c <__aeabi_dsub>
   1a826:	4622      	mov	r2, r4
   1a828:	4680      	mov	r8, r0
   1a82a:	4689      	mov	r9, r1
   1a82c:	462b      	mov	r3, r5
   1a82e:	4620      	mov	r0, r4
   1a830:	4629      	mov	r1, r5
   1a832:	f000 fd67 	bl	1b304 <__aeabi_dmul>
   1a836:	a364      	add	r3, pc, #400	; (adr r3, 1a9c8 <__ieee754_pow+0x880>)
   1a838:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a83c:	4606      	mov	r6, r0
   1a83e:	460f      	mov	r7, r1
   1a840:	f000 fd60 	bl	1b304 <__aeabi_dmul>
   1a844:	a362      	add	r3, pc, #392	; (adr r3, 1a9d0 <__ieee754_pow+0x888>)
   1a846:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a84a:	f000 fba7 	bl	1af9c <__aeabi_dsub>
   1a84e:	4632      	mov	r2, r6
   1a850:	463b      	mov	r3, r7
   1a852:	f000 fd57 	bl	1b304 <__aeabi_dmul>
   1a856:	a360      	add	r3, pc, #384	; (adr r3, 1a9d8 <__ieee754_pow+0x890>)
   1a858:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a85c:	f000 fba0 	bl	1afa0 <__adddf3>
   1a860:	4632      	mov	r2, r6
   1a862:	463b      	mov	r3, r7
   1a864:	f000 fd4e 	bl	1b304 <__aeabi_dmul>
   1a868:	a35d      	add	r3, pc, #372	; (adr r3, 1a9e0 <__ieee754_pow+0x898>)
   1a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a86e:	f000 fb95 	bl	1af9c <__aeabi_dsub>
   1a872:	4632      	mov	r2, r6
   1a874:	463b      	mov	r3, r7
   1a876:	f000 fd45 	bl	1b304 <__aeabi_dmul>
   1a87a:	a35b      	add	r3, pc, #364	; (adr r3, 1a9e8 <__ieee754_pow+0x8a0>)
   1a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a880:	f000 fb8e 	bl	1afa0 <__adddf3>
   1a884:	4632      	mov	r2, r6
   1a886:	463b      	mov	r3, r7
   1a888:	f000 fd3c 	bl	1b304 <__aeabi_dmul>
   1a88c:	4602      	mov	r2, r0
   1a88e:	460b      	mov	r3, r1
   1a890:	4620      	mov	r0, r4
   1a892:	4629      	mov	r1, r5
   1a894:	f000 fb82 	bl	1af9c <__aeabi_dsub>
   1a898:	4606      	mov	r6, r0
   1a89a:	460f      	mov	r7, r1
   1a89c:	4602      	mov	r2, r0
   1a89e:	460b      	mov	r3, r1
   1a8a0:	4620      	mov	r0, r4
   1a8a2:	4629      	mov	r1, r5
   1a8a4:	f000 fd2e 	bl	1b304 <__aeabi_dmul>
   1a8a8:	2200      	movs	r2, #0
   1a8aa:	e9cd 0100 	strd	r0, r1, [sp]
   1a8ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a8b2:	4630      	mov	r0, r6
   1a8b4:	4639      	mov	r1, r7
   1a8b6:	f000 fb71 	bl	1af9c <__aeabi_dsub>
   1a8ba:	4602      	mov	r2, r0
   1a8bc:	460b      	mov	r3, r1
   1a8be:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a8c2:	f000 fe49 	bl	1b558 <__aeabi_ddiv>
   1a8c6:	4642      	mov	r2, r8
   1a8c8:	4606      	mov	r6, r0
   1a8ca:	460f      	mov	r7, r1
   1a8cc:	464b      	mov	r3, r9
   1a8ce:	4620      	mov	r0, r4
   1a8d0:	4629      	mov	r1, r5
   1a8d2:	f000 fd17 	bl	1b304 <__aeabi_dmul>
   1a8d6:	4642      	mov	r2, r8
   1a8d8:	464b      	mov	r3, r9
   1a8da:	f000 fb61 	bl	1afa0 <__adddf3>
   1a8de:	4602      	mov	r2, r0
   1a8e0:	460b      	mov	r3, r1
   1a8e2:	4630      	mov	r0, r6
   1a8e4:	4639      	mov	r1, r7
   1a8e6:	f000 fb59 	bl	1af9c <__aeabi_dsub>
   1a8ea:	4622      	mov	r2, r4
   1a8ec:	462b      	mov	r3, r5
   1a8ee:	f000 fb55 	bl	1af9c <__aeabi_dsub>
   1a8f2:	4602      	mov	r2, r0
   1a8f4:	460b      	mov	r3, r1
   1a8f6:	2000      	movs	r0, #0
   1a8f8:	493f      	ldr	r1, [pc, #252]	; (1a9f8 <__ieee754_pow+0x8b0>)
   1a8fa:	f000 fb4f 	bl	1af9c <__aeabi_dsub>
   1a8fe:	448a      	add	sl, r1
   1a900:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   1a904:	f2c0 8133 	blt.w	1ab6e <__ieee754_pow+0xa26>
   1a908:	4651      	mov	r1, sl
   1a90a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a90e:	f000 fcf9 	bl	1b304 <__aeabi_dmul>
   1a912:	e45b      	b.n	1a1cc <__ieee754_pow+0x84>
   1a914:	4642      	mov	r2, r8
   1a916:	4640      	mov	r0, r8
   1a918:	464b      	mov	r3, r9
   1a91a:	4649      	mov	r1, r9
   1a91c:	f000 fcf2 	bl	1b304 <__aeabi_dmul>
   1a920:	e454      	b.n	1a1cc <__ieee754_pow+0x84>
   1a922:	f1ba 0f00 	cmp.w	sl, #0
   1a926:	f6bf ace0 	bge.w	1a2ea <__ieee754_pow+0x1a2>
   1a92a:	e9dd 3400 	ldrd	r3, r4, [sp]
   1a92e:	4618      	mov	r0, r3
   1a930:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1a934:	e44a      	b.n	1a1cc <__ieee754_pow+0x84>
   1a936:	4b34      	ldr	r3, [pc, #208]	; (1aa08 <__ieee754_pow+0x8c0>)
   1a938:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   1a93c:	4598      	cmp	r8, r3
   1a93e:	f340 80f2 	ble.w	1ab26 <__ieee754_pow+0x9de>
   1a942:	4b32      	ldr	r3, [pc, #200]	; (1aa0c <__ieee754_pow+0x8c4>)
   1a944:	440b      	add	r3, r1
   1a946:	4303      	orrs	r3, r0
   1a948:	d10c      	bne.n	1a964 <__ieee754_pow+0x81c>
   1a94a:	4632      	mov	r2, r6
   1a94c:	463b      	mov	r3, r7
   1a94e:	f000 fb25 	bl	1af9c <__aeabi_dsub>
   1a952:	4602      	mov	r2, r0
   1a954:	460b      	mov	r3, r1
   1a956:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a95a:	f000 ff4f 	bl	1b7fc <__aeabi_dcmple>
   1a95e:	2800      	cmp	r0, #0
   1a960:	f43f aef3 	beq.w	1a74a <__ieee754_pow+0x602>
   1a964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a968:	a321      	add	r3, pc, #132	; (adr r3, 1a9f0 <__ieee754_pow+0x8a8>)
   1a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a96e:	f000 fcc9 	bl	1b304 <__aeabi_dmul>
   1a972:	a31f      	add	r3, pc, #124	; (adr r3, 1a9f0 <__ieee754_pow+0x8a8>)
   1a974:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a978:	f000 fcc4 	bl	1b304 <__aeabi_dmul>
   1a97c:	e426      	b.n	1a1cc <__ieee754_pow+0x84>
   1a97e:	4602      	mov	r2, r0
   1a980:	460b      	mov	r3, r1
   1a982:	2000      	movs	r0, #0
   1a984:	491c      	ldr	r1, [pc, #112]	; (1a9f8 <__ieee754_pow+0x8b0>)
   1a986:	f000 fde7 	bl	1b558 <__aeabi_ddiv>
   1a98a:	e43c      	b.n	1a206 <__ieee754_pow+0xbe>
   1a98c:	2200      	movs	r2, #0
   1a98e:	2300      	movs	r3, #0
   1a990:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1a994:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1a998:	4b17      	ldr	r3, [pc, #92]	; (1a9f8 <__ieee754_pow+0x8b0>)
   1a99a:	2200      	movs	r2, #0
   1a99c:	2700      	movs	r7, #0
   1a99e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a9a2:	e4e6      	b.n	1a372 <__ieee754_pow+0x22a>
   1a9a4:	f3af 8000 	nop.w
   1a9a8:	652b82fe 	.word	0x652b82fe
   1a9ac:	3c971547 	.word	0x3c971547
   1a9b0:	00000000 	.word	0x00000000
   1a9b4:	3fe62e43 	.word	0x3fe62e43
   1a9b8:	fefa39ef 	.word	0xfefa39ef
   1a9bc:	3fe62e42 	.word	0x3fe62e42
   1a9c0:	0ca86c39 	.word	0x0ca86c39
   1a9c4:	be205c61 	.word	0xbe205c61
   1a9c8:	72bea4d0 	.word	0x72bea4d0
   1a9cc:	3e663769 	.word	0x3e663769
   1a9d0:	c5d26bf1 	.word	0xc5d26bf1
   1a9d4:	3ebbbd41 	.word	0x3ebbbd41
   1a9d8:	af25de2c 	.word	0xaf25de2c
   1a9dc:	3f11566a 	.word	0x3f11566a
   1a9e0:	16bebd93 	.word	0x16bebd93
   1a9e4:	3f66c16c 	.word	0x3f66c16c
   1a9e8:	5555553e 	.word	0x5555553e
   1a9ec:	3fc55555 	.word	0x3fc55555
   1a9f0:	c2f8f359 	.word	0xc2f8f359
   1a9f4:	01a56e1f 	.word	0x01a56e1f
   1a9f8:	3ff00000 	.word	0x3ff00000
   1a9fc:	bff00000 	.word	0xbff00000
   1aa00:	408fffff 	.word	0x408fffff
   1aa04:	000fffff 	.word	0x000fffff
   1aa08:	4090cbff 	.word	0x4090cbff
   1aa0c:	3f6f3400 	.word	0x3f6f3400
   1aa10:	4b6b      	ldr	r3, [pc, #428]	; (1abc0 <__ieee754_pow+0xa78>)
   1aa12:	429e      	cmp	r6, r3
   1aa14:	f77f ac66 	ble.w	1a2e4 <__ieee754_pow+0x19c>
   1aa18:	4b6a      	ldr	r3, [pc, #424]	; (1abc4 <__ieee754_pow+0xa7c>)
   1aa1a:	429e      	cmp	r6, r3
   1aa1c:	f73f ac13 	bgt.w	1a246 <__ieee754_pow+0xfe>
   1aa20:	2200      	movs	r2, #0
   1aa22:	4b68      	ldr	r3, [pc, #416]	; (1abc4 <__ieee754_pow+0xa7c>)
   1aa24:	f000 faba 	bl	1af9c <__aeabi_dsub>
   1aa28:	a357      	add	r3, pc, #348	; (adr r3, 1ab88 <__ieee754_pow+0xa40>)
   1aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa2e:	4606      	mov	r6, r0
   1aa30:	460f      	mov	r7, r1
   1aa32:	f000 fc67 	bl	1b304 <__aeabi_dmul>
   1aa36:	a356      	add	r3, pc, #344	; (adr r3, 1ab90 <__ieee754_pow+0xa48>)
   1aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa3c:	4680      	mov	r8, r0
   1aa3e:	4689      	mov	r9, r1
   1aa40:	4630      	mov	r0, r6
   1aa42:	4639      	mov	r1, r7
   1aa44:	f000 fc5e 	bl	1b304 <__aeabi_dmul>
   1aa48:	2200      	movs	r2, #0
   1aa4a:	4682      	mov	sl, r0
   1aa4c:	468b      	mov	fp, r1
   1aa4e:	4b5e      	ldr	r3, [pc, #376]	; (1abc8 <__ieee754_pow+0xa80>)
   1aa50:	4630      	mov	r0, r6
   1aa52:	4639      	mov	r1, r7
   1aa54:	f000 fc56 	bl	1b304 <__aeabi_dmul>
   1aa58:	4602      	mov	r2, r0
   1aa5a:	460b      	mov	r3, r1
   1aa5c:	a14e      	add	r1, pc, #312	; (adr r1, 1ab98 <__ieee754_pow+0xa50>)
   1aa5e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1aa62:	f000 fa9b 	bl	1af9c <__aeabi_dsub>
   1aa66:	4632      	mov	r2, r6
   1aa68:	463b      	mov	r3, r7
   1aa6a:	f000 fc4b 	bl	1b304 <__aeabi_dmul>
   1aa6e:	4602      	mov	r2, r0
   1aa70:	460b      	mov	r3, r1
   1aa72:	2000      	movs	r0, #0
   1aa74:	4955      	ldr	r1, [pc, #340]	; (1abcc <__ieee754_pow+0xa84>)
   1aa76:	f000 fa91 	bl	1af9c <__aeabi_dsub>
   1aa7a:	4632      	mov	r2, r6
   1aa7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1aa80:	463b      	mov	r3, r7
   1aa82:	4630      	mov	r0, r6
   1aa84:	4639      	mov	r1, r7
   1aa86:	f000 fc3d 	bl	1b304 <__aeabi_dmul>
   1aa8a:	4602      	mov	r2, r0
   1aa8c:	460b      	mov	r3, r1
   1aa8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1aa92:	f000 fc37 	bl	1b304 <__aeabi_dmul>
   1aa96:	a342      	add	r3, pc, #264	; (adr r3, 1aba0 <__ieee754_pow+0xa58>)
   1aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa9c:	f000 fc32 	bl	1b304 <__aeabi_dmul>
   1aaa0:	4602      	mov	r2, r0
   1aaa2:	460b      	mov	r3, r1
   1aaa4:	4650      	mov	r0, sl
   1aaa6:	4659      	mov	r1, fp
   1aaa8:	f000 fa78 	bl	1af9c <__aeabi_dsub>
   1aaac:	4602      	mov	r2, r0
   1aaae:	460b      	mov	r3, r1
   1aab0:	4606      	mov	r6, r0
   1aab2:	460f      	mov	r7, r1
   1aab4:	4640      	mov	r0, r8
   1aab6:	4649      	mov	r1, r9
   1aab8:	f000 fa72 	bl	1afa0 <__adddf3>
   1aabc:	4642      	mov	r2, r8
   1aabe:	464b      	mov	r3, r9
   1aac0:	2000      	movs	r0, #0
   1aac2:	4682      	mov	sl, r0
   1aac4:	468b      	mov	fp, r1
   1aac6:	f000 fa69 	bl	1af9c <__aeabi_dsub>
   1aaca:	4602      	mov	r2, r0
   1aacc:	460b      	mov	r3, r1
   1aace:	4630      	mov	r0, r6
   1aad0:	4639      	mov	r1, r7
   1aad2:	f000 fa63 	bl	1af9c <__aeabi_dsub>
   1aad6:	4680      	mov	r8, r0
   1aad8:	4689      	mov	r9, r1
   1aada:	e5d4      	b.n	1a686 <__ieee754_pow+0x53e>
   1aadc:	4642      	mov	r2, r8
   1aade:	464b      	mov	r3, r9
   1aae0:	2000      	movs	r0, #0
   1aae2:	4938      	ldr	r1, [pc, #224]	; (1abc4 <__ieee754_pow+0xa7c>)
   1aae4:	f000 fd38 	bl	1b558 <__aeabi_ddiv>
   1aae8:	f7ff bb70 	b.w	1a1cc <__ieee754_pow+0x84>
   1aaec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1aaf0:	a32d      	add	r3, pc, #180	; (adr r3, 1aba8 <__ieee754_pow+0xa60>)
   1aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aaf6:	f000 fc05 	bl	1b304 <__aeabi_dmul>
   1aafa:	a32b      	add	r3, pc, #172	; (adr r3, 1aba8 <__ieee754_pow+0xa60>)
   1aafc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab00:	f000 fc00 	bl	1b304 <__aeabi_dmul>
   1ab04:	f7ff bb62 	b.w	1a1cc <__ieee754_pow+0x84>
   1ab08:	f1be 0f00 	cmp.w	lr, #0
   1ab0c:	f47f ab69 	bne.w	1a1e2 <__ieee754_pow+0x9a>
   1ab10:	f1c3 0314 	rsb	r3, r3, #20
   1ab14:	fa47 f203 	asr.w	r2, r7, r3
   1ab18:	fa02 f303 	lsl.w	r3, r2, r3
   1ab1c:	429f      	cmp	r7, r3
   1ab1e:	d02a      	beq.n	1ab76 <__ieee754_pow+0xa2e>
   1ab20:	4674      	mov	r4, lr
   1ab22:	f7ff bb36 	b.w	1a192 <__ieee754_pow+0x4a>
   1ab26:	4b29      	ldr	r3, [pc, #164]	; (1abcc <__ieee754_pow+0xa84>)
   1ab28:	4598      	cmp	r8, r3
   1ab2a:	f73f ae0e 	bgt.w	1a74a <__ieee754_pow+0x602>
   1ab2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ab32:	4692      	mov	sl, r2
   1ab34:	4693      	mov	fp, r2
   1ab36:	e638      	b.n	1a7aa <__ieee754_pow+0x662>
   1ab38:	4602      	mov	r2, r0
   1ab3a:	460b      	mov	r3, r1
   1ab3c:	f000 fa2e 	bl	1af9c <__aeabi_dsub>
   1ab40:	4602      	mov	r2, r0
   1ab42:	460b      	mov	r3, r1
   1ab44:	f000 fd08 	bl	1b558 <__aeabi_ddiv>
   1ab48:	f7ff bb40 	b.w	1a1cc <__ieee754_pow+0x84>
   1ab4c:	a318      	add	r3, pc, #96	; (adr r3, 1abb0 <__ieee754_pow+0xa68>)
   1ab4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab52:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1ab56:	a318      	add	r3, pc, #96	; (adr r3, 1abb8 <__ieee754_pow+0xa70>)
   1ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab5c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1ab60:	4b1b      	ldr	r3, [pc, #108]	; (1abd0 <__ieee754_pow+0xa88>)
   1ab62:	2200      	movs	r2, #0
   1ab64:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   1ab68:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ab6c:	e401      	b.n	1a372 <__ieee754_pow+0x22a>
   1ab6e:	465a      	mov	r2, fp
   1ab70:	f000 f98a 	bl	1ae88 <scalbn>
   1ab74:	e6c9      	b.n	1a90a <__ieee754_pow+0x7c2>
   1ab76:	f002 0201 	and.w	r2, r2, #1
   1ab7a:	f1c2 0402 	rsb	r4, r2, #2
   1ab7e:	f7ff bb08 	b.w	1a192 <__ieee754_pow+0x4a>
   1ab82:	bf00      	nop
   1ab84:	f3af 8000 	nop.w
   1ab88:	60000000 	.word	0x60000000
   1ab8c:	3ff71547 	.word	0x3ff71547
   1ab90:	f85ddf44 	.word	0xf85ddf44
   1ab94:	3e54ae0b 	.word	0x3e54ae0b
   1ab98:	55555555 	.word	0x55555555
   1ab9c:	3fd55555 	.word	0x3fd55555
   1aba0:	652b82fe 	.word	0x652b82fe
   1aba4:	3ff71547 	.word	0x3ff71547
   1aba8:	8800759c 	.word	0x8800759c
   1abac:	7e37e43c 	.word	0x7e37e43c
   1abb0:	40000000 	.word	0x40000000
   1abb4:	3fe2b803 	.word	0x3fe2b803
   1abb8:	43cfd006 	.word	0x43cfd006
   1abbc:	3e4cfdeb 	.word	0x3e4cfdeb
   1abc0:	3feffffe 	.word	0x3feffffe
   1abc4:	3ff00000 	.word	0x3ff00000
   1abc8:	3fd00000 	.word	0x3fd00000
   1abcc:	3fe00000 	.word	0x3fe00000
   1abd0:	3ff80000 	.word	0x3ff80000

0001abd4 <__ieee754_sqrt>:
   1abd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1abd8:	4f5b      	ldr	r7, [pc, #364]	; (1ad48 <__ieee754_sqrt+0x174>)
   1abda:	438f      	bics	r7, r1
   1abdc:	4605      	mov	r5, r0
   1abde:	460c      	mov	r4, r1
   1abe0:	f000 8092 	beq.w	1ad08 <__ieee754_sqrt+0x134>
   1abe4:	2900      	cmp	r1, #0
   1abe6:	460b      	mov	r3, r1
   1abe8:	4602      	mov	r2, r0
   1abea:	dd6f      	ble.n	1accc <__ieee754_sqrt+0xf8>
   1abec:	150f      	asrs	r7, r1, #20
   1abee:	d07b      	beq.n	1ace8 <__ieee754_sqrt+0x114>
   1abf0:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   1abf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1abf8:	07f8      	lsls	r0, r7, #31
   1abfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1abfe:	d45c      	bmi.n	1acba <__ieee754_sqrt+0xe6>
   1ac00:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   1ac04:	2600      	movs	r6, #0
   1ac06:	440b      	add	r3, r1
   1ac08:	107f      	asrs	r7, r7, #1
   1ac0a:	0052      	lsls	r2, r2, #1
   1ac0c:	46b6      	mov	lr, r6
   1ac0e:	2016      	movs	r0, #22
   1ac10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   1ac14:	eb0e 0401 	add.w	r4, lr, r1
   1ac18:	429c      	cmp	r4, r3
   1ac1a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   1ac1e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1ac22:	dc03      	bgt.n	1ac2c <__ieee754_sqrt+0x58>
   1ac24:	1b1b      	subs	r3, r3, r4
   1ac26:	eb04 0e01 	add.w	lr, r4, r1
   1ac2a:	440e      	add	r6, r1
   1ac2c:	3801      	subs	r0, #1
   1ac2e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1ac32:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1ac36:	d1ed      	bne.n	1ac14 <__ieee754_sqrt+0x40>
   1ac38:	4684      	mov	ip, r0
   1ac3a:	2420      	movs	r4, #32
   1ac3c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1ac40:	e009      	b.n	1ac56 <__ieee754_sqrt+0x82>
   1ac42:	d020      	beq.n	1ac86 <__ieee754_sqrt+0xb2>
   1ac44:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   1ac48:	3c01      	subs	r4, #1
   1ac4a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   1ac4e:	442b      	add	r3, r5
   1ac50:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1ac54:	d020      	beq.n	1ac98 <__ieee754_sqrt+0xc4>
   1ac56:	4573      	cmp	r3, lr
   1ac58:	eb01 050c 	add.w	r5, r1, ip
   1ac5c:	ddf1      	ble.n	1ac42 <__ieee754_sqrt+0x6e>
   1ac5e:	2d00      	cmp	r5, #0
   1ac60:	eb05 0c01 	add.w	ip, r5, r1
   1ac64:	db09      	blt.n	1ac7a <__ieee754_sqrt+0xa6>
   1ac66:	46f0      	mov	r8, lr
   1ac68:	4295      	cmp	r5, r2
   1ac6a:	eba3 030e 	sub.w	r3, r3, lr
   1ac6e:	d900      	bls.n	1ac72 <__ieee754_sqrt+0x9e>
   1ac70:	3b01      	subs	r3, #1
   1ac72:	1b52      	subs	r2, r2, r5
   1ac74:	4408      	add	r0, r1
   1ac76:	46c6      	mov	lr, r8
   1ac78:	e7e4      	b.n	1ac44 <__ieee754_sqrt+0x70>
   1ac7a:	f1bc 0f00 	cmp.w	ip, #0
   1ac7e:	dbf2      	blt.n	1ac66 <__ieee754_sqrt+0x92>
   1ac80:	f10e 0801 	add.w	r8, lr, #1
   1ac84:	e7f0      	b.n	1ac68 <__ieee754_sqrt+0x94>
   1ac86:	4295      	cmp	r5, r2
   1ac88:	d8dc      	bhi.n	1ac44 <__ieee754_sqrt+0x70>
   1ac8a:	2d00      	cmp	r5, #0
   1ac8c:	eb05 0c01 	add.w	ip, r5, r1
   1ac90:	db44      	blt.n	1ad1c <__ieee754_sqrt+0x148>
   1ac92:	4698      	mov	r8, r3
   1ac94:	2300      	movs	r3, #0
   1ac96:	e7ec      	b.n	1ac72 <__ieee754_sqrt+0x9e>
   1ac98:	4313      	orrs	r3, r2
   1ac9a:	d113      	bne.n	1acc4 <__ieee754_sqrt+0xf0>
   1ac9c:	0840      	lsrs	r0, r0, #1
   1ac9e:	1073      	asrs	r3, r6, #1
   1aca0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   1aca4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   1aca8:	07f2      	lsls	r2, r6, #31
   1acaa:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   1acae:	bf48      	it	mi
   1acb0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   1acb4:	4649      	mov	r1, r9
   1acb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1acba:	005b      	lsls	r3, r3, #1
   1acbc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   1acc0:	0052      	lsls	r2, r2, #1
   1acc2:	e79d      	b.n	1ac00 <__ieee754_sqrt+0x2c>
   1acc4:	1c41      	adds	r1, r0, #1
   1acc6:	d02d      	beq.n	1ad24 <__ieee754_sqrt+0x150>
   1acc8:	3001      	adds	r0, #1
   1acca:	e7e7      	b.n	1ac9c <__ieee754_sqrt+0xc8>
   1accc:	4606      	mov	r6, r0
   1acce:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   1acd2:	433e      	orrs	r6, r7
   1acd4:	d0ef      	beq.n	1acb6 <__ieee754_sqrt+0xe2>
   1acd6:	bb69      	cbnz	r1, 1ad34 <__ieee754_sqrt+0x160>
   1acd8:	460f      	mov	r7, r1
   1acda:	0ad3      	lsrs	r3, r2, #11
   1acdc:	3f15      	subs	r7, #21
   1acde:	0552      	lsls	r2, r2, #21
   1ace0:	2b00      	cmp	r3, #0
   1ace2:	d0fa      	beq.n	1acda <__ieee754_sqrt+0x106>
   1ace4:	02de      	lsls	r6, r3, #11
   1ace6:	d420      	bmi.n	1ad2a <__ieee754_sqrt+0x156>
   1ace8:	2400      	movs	r4, #0
   1acea:	e000      	b.n	1acee <__ieee754_sqrt+0x11a>
   1acec:	4604      	mov	r4, r0
   1acee:	005b      	lsls	r3, r3, #1
   1acf0:	02dd      	lsls	r5, r3, #11
   1acf2:	f104 0001 	add.w	r0, r4, #1
   1acf6:	d5f9      	bpl.n	1acec <__ieee754_sqrt+0x118>
   1acf8:	f1c0 0120 	rsb	r1, r0, #32
   1acfc:	fa22 f101 	lsr.w	r1, r2, r1
   1ad00:	430b      	orrs	r3, r1
   1ad02:	1b3f      	subs	r7, r7, r4
   1ad04:	4082      	lsls	r2, r0
   1ad06:	e773      	b.n	1abf0 <__ieee754_sqrt+0x1c>
   1ad08:	4602      	mov	r2, r0
   1ad0a:	460b      	mov	r3, r1
   1ad0c:	f000 fafa 	bl	1b304 <__aeabi_dmul>
   1ad10:	462a      	mov	r2, r5
   1ad12:	4623      	mov	r3, r4
   1ad14:	f000 f944 	bl	1afa0 <__adddf3>
   1ad18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ad1c:	f1bc 0f00 	cmp.w	ip, #0
   1ad20:	daae      	bge.n	1ac80 <__ieee754_sqrt+0xac>
   1ad22:	e7b6      	b.n	1ac92 <__ieee754_sqrt+0xbe>
   1ad24:	3601      	adds	r6, #1
   1ad26:	4620      	mov	r0, r4
   1ad28:	e7b9      	b.n	1ac9e <__ieee754_sqrt+0xca>
   1ad2a:	2000      	movs	r0, #0
   1ad2c:	2120      	movs	r1, #32
   1ad2e:	f04f 34ff 	mov.w	r4, #4294967295
   1ad32:	e7e3      	b.n	1acfc <__ieee754_sqrt+0x128>
   1ad34:	4602      	mov	r2, r0
   1ad36:	460b      	mov	r3, r1
   1ad38:	f000 f930 	bl	1af9c <__aeabi_dsub>
   1ad3c:	4602      	mov	r2, r0
   1ad3e:	460b      	mov	r3, r1
   1ad40:	f000 fc0a 	bl	1b558 <__aeabi_ddiv>
   1ad44:	e7b7      	b.n	1acb6 <__ieee754_sqrt+0xe2>
   1ad46:	bf00      	nop
   1ad48:	7ff00000 	.word	0x7ff00000

0001ad4c <fabs>:
   1ad4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1ad50:	4770      	bx	lr
   1ad52:	bf00      	nop

0001ad54 <finite>:
   1ad54:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   1ad58:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   1ad5c:	0fc0      	lsrs	r0, r0, #31
   1ad5e:	4770      	bx	lr

0001ad60 <matherr>:
   1ad60:	2000      	movs	r0, #0
   1ad62:	4770      	bx	lr

0001ad64 <nan>:
   1ad64:	2000      	movs	r0, #0
   1ad66:	4901      	ldr	r1, [pc, #4]	; (1ad6c <nan+0x8>)
   1ad68:	4770      	bx	lr
   1ad6a:	bf00      	nop
   1ad6c:	7ff80000 	.word	0x7ff80000

0001ad70 <rint>:
   1ad70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad72:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   1ad76:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   1ad7a:	2e13      	cmp	r6, #19
   1ad7c:	b083      	sub	sp, #12
   1ad7e:	4602      	mov	r2, r0
   1ad80:	460b      	mov	r3, r1
   1ad82:	460c      	mov	r4, r1
   1ad84:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   1ad88:	4607      	mov	r7, r0
   1ad8a:	dc2e      	bgt.n	1adea <rint+0x7a>
   1ad8c:	2e00      	cmp	r6, #0
   1ad8e:	db49      	blt.n	1ae24 <rint+0xb4>
   1ad90:	493a      	ldr	r1, [pc, #232]	; (1ae7c <rint+0x10c>)
   1ad92:	4131      	asrs	r1, r6
   1ad94:	ea03 0001 	and.w	r0, r3, r1
   1ad98:	4310      	orrs	r0, r2
   1ad9a:	d02b      	beq.n	1adf4 <rint+0x84>
   1ad9c:	0849      	lsrs	r1, r1, #1
   1ad9e:	400b      	ands	r3, r1
   1ada0:	ea53 0702 	orrs.w	r7, r3, r2
   1ada4:	d00c      	beq.n	1adc0 <rint+0x50>
   1ada6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1adaa:	2e13      	cmp	r6, #19
   1adac:	ea24 0101 	bic.w	r1, r4, r1
   1adb0:	fa43 f406 	asr.w	r4, r3, r6
   1adb4:	ea44 0401 	orr.w	r4, r4, r1
   1adb8:	bf0c      	ite	eq
   1adba:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   1adbe:	2700      	movne	r7, #0
   1adc0:	4b2f      	ldr	r3, [pc, #188]	; (1ae80 <rint+0x110>)
   1adc2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1adc6:	4621      	mov	r1, r4
   1adc8:	e9d5 4500 	ldrd	r4, r5, [r5]
   1adcc:	4638      	mov	r0, r7
   1adce:	4622      	mov	r2, r4
   1add0:	462b      	mov	r3, r5
   1add2:	f000 f8e5 	bl	1afa0 <__adddf3>
   1add6:	e9cd 0100 	strd	r0, r1, [sp]
   1adda:	4622      	mov	r2, r4
   1addc:	462b      	mov	r3, r5
   1adde:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ade2:	f000 f8db 	bl	1af9c <__aeabi_dsub>
   1ade6:	b003      	add	sp, #12
   1ade8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1adea:	2e33      	cmp	r6, #51	; 0x33
   1adec:	dd06      	ble.n	1adfc <rint+0x8c>
   1adee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1adf2:	d040      	beq.n	1ae76 <rint+0x106>
   1adf4:	4610      	mov	r0, r2
   1adf6:	4619      	mov	r1, r3
   1adf8:	b003      	add	sp, #12
   1adfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1adfc:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   1ae00:	f04f 31ff 	mov.w	r1, #4294967295
   1ae04:	fa21 f10e 	lsr.w	r1, r1, lr
   1ae08:	4208      	tst	r0, r1
   1ae0a:	d0f3      	beq.n	1adf4 <rint+0x84>
   1ae0c:	0849      	lsrs	r1, r1, #1
   1ae0e:	4208      	tst	r0, r1
   1ae10:	d0d6      	beq.n	1adc0 <rint+0x50>
   1ae12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ae16:	ea20 0101 	bic.w	r1, r0, r1
   1ae1a:	fa43 fe0e 	asr.w	lr, r3, lr
   1ae1e:	ea4e 0701 	orr.w	r7, lr, r1
   1ae22:	e7cd      	b.n	1adc0 <rint+0x50>
   1ae24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1ae28:	4301      	orrs	r1, r0
   1ae2a:	d0e3      	beq.n	1adf4 <rint+0x84>
   1ae2c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   1ae30:	4e13      	ldr	r6, [pc, #76]	; (1ae80 <rint+0x110>)
   1ae32:	4301      	orrs	r1, r0
   1ae34:	f1c1 0c00 	rsb	ip, r1, #0
   1ae38:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   1ae3c:	e9d6 6700 	ldrd	r6, r7, [r6]
   1ae40:	ea4c 0c01 	orr.w	ip, ip, r1
   1ae44:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   1ae48:	0c5c      	lsrs	r4, r3, #17
   1ae4a:	0464      	lsls	r4, r4, #17
   1ae4c:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   1ae50:	ea43 0104 	orr.w	r1, r3, r4
   1ae54:	4632      	mov	r2, r6
   1ae56:	463b      	mov	r3, r7
   1ae58:	f000 f8a2 	bl	1afa0 <__adddf3>
   1ae5c:	e9cd 0100 	strd	r0, r1, [sp]
   1ae60:	4632      	mov	r2, r6
   1ae62:	463b      	mov	r3, r7
   1ae64:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ae68:	f000 f898 	bl	1af9c <__aeabi_dsub>
   1ae6c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1ae70:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   1ae74:	e7c0      	b.n	1adf8 <rint+0x88>
   1ae76:	f000 f893 	bl	1afa0 <__adddf3>
   1ae7a:	e7bd      	b.n	1adf8 <rint+0x88>
   1ae7c:	000fffff 	.word	0x000fffff
   1ae80:	00022400 	.word	0x00022400
   1ae84:	00000000 	.word	0x00000000

0001ae88 <scalbn>:
   1ae88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae8a:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1ae8e:	4604      	mov	r4, r0
   1ae90:	460d      	mov	r5, r1
   1ae92:	460b      	mov	r3, r1
   1ae94:	4617      	mov	r7, r2
   1ae96:	bb0e      	cbnz	r6, 1aedc <scalbn+0x54>
   1ae98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1ae9c:	4303      	orrs	r3, r0
   1ae9e:	4686      	mov	lr, r0
   1aea0:	d025      	beq.n	1aeee <scalbn+0x66>
   1aea2:	2200      	movs	r2, #0
   1aea4:	4b34      	ldr	r3, [pc, #208]	; (1af78 <scalbn+0xf0>)
   1aea6:	f000 fa2d 	bl	1b304 <__aeabi_dmul>
   1aeaa:	4a34      	ldr	r2, [pc, #208]	; (1af7c <scalbn+0xf4>)
   1aeac:	4297      	cmp	r7, r2
   1aeae:	4604      	mov	r4, r0
   1aeb0:	460d      	mov	r5, r1
   1aeb2:	460b      	mov	r3, r1
   1aeb4:	db2a      	blt.n	1af0c <scalbn+0x84>
   1aeb6:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1aeba:	3e36      	subs	r6, #54	; 0x36
   1aebc:	443e      	add	r6, r7
   1aebe:	f240 72fe 	movw	r2, #2046	; 0x7fe
   1aec2:	4296      	cmp	r6, r2
   1aec4:	dc28      	bgt.n	1af18 <scalbn+0x90>
   1aec6:	2e00      	cmp	r6, #0
   1aec8:	dd12      	ble.n	1aef0 <scalbn+0x68>
   1aeca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1aece:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1aed2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1aed6:	4620      	mov	r0, r4
   1aed8:	4629      	mov	r1, r5
   1aeda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aedc:	f240 72ff 	movw	r2, #2047	; 0x7ff
   1aee0:	4296      	cmp	r6, r2
   1aee2:	d1eb      	bne.n	1aebc <scalbn+0x34>
   1aee4:	4602      	mov	r2, r0
   1aee6:	460b      	mov	r3, r1
   1aee8:	f000 f85a 	bl	1afa0 <__adddf3>
   1aeec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aeee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aef0:	f116 0f35 	cmn.w	r6, #53	; 0x35
   1aef4:	da1d      	bge.n	1af32 <scalbn+0xaa>
   1aef6:	f24c 3350 	movw	r3, #50000	; 0xc350
   1aefa:	429f      	cmp	r7, r3
   1aefc:	4622      	mov	r2, r4
   1aefe:	462b      	mov	r3, r5
   1af00:	dc25      	bgt.n	1af4e <scalbn+0xc6>
   1af02:	a119      	add	r1, pc, #100	; (adr r1, 1af68 <scalbn+0xe0>)
   1af04:	e9d1 0100 	ldrd	r0, r1, [r1]
   1af08:	f000 f83c 	bl	1af84 <copysign>
   1af0c:	a316      	add	r3, pc, #88	; (adr r3, 1af68 <scalbn+0xe0>)
   1af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af12:	f000 f9f7 	bl	1b304 <__aeabi_dmul>
   1af16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af18:	4622      	mov	r2, r4
   1af1a:	462b      	mov	r3, r5
   1af1c:	a114      	add	r1, pc, #80	; (adr r1, 1af70 <scalbn+0xe8>)
   1af1e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1af22:	f000 f82f 	bl	1af84 <copysign>
   1af26:	a312      	add	r3, pc, #72	; (adr r3, 1af70 <scalbn+0xe8>)
   1af28:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af2c:	f000 f9ea 	bl	1b304 <__aeabi_dmul>
   1af30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   1af36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1af3a:	3636      	adds	r6, #54	; 0x36
   1af3c:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   1af40:	4620      	mov	r0, r4
   1af42:	4629      	mov	r1, r5
   1af44:	2200      	movs	r2, #0
   1af46:	4b0e      	ldr	r3, [pc, #56]	; (1af80 <scalbn+0xf8>)
   1af48:	f000 f9dc 	bl	1b304 <__aeabi_dmul>
   1af4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af4e:	a108      	add	r1, pc, #32	; (adr r1, 1af70 <scalbn+0xe8>)
   1af50:	e9d1 0100 	ldrd	r0, r1, [r1]
   1af54:	f000 f816 	bl	1af84 <copysign>
   1af58:	a305      	add	r3, pc, #20	; (adr r3, 1af70 <scalbn+0xe8>)
   1af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af5e:	f000 f9d1 	bl	1b304 <__aeabi_dmul>
   1af62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af64:	f3af 8000 	nop.w
   1af68:	c2f8f359 	.word	0xc2f8f359
   1af6c:	01a56e1f 	.word	0x01a56e1f
   1af70:	8800759c 	.word	0x8800759c
   1af74:	7e37e43c 	.word	0x7e37e43c
   1af78:	43500000 	.word	0x43500000
   1af7c:	ffff3cb0 	.word	0xffff3cb0
   1af80:	3c900000 	.word	0x3c900000

0001af84 <copysign>:
   1af84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   1af88:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1af8c:	ea42 0103 	orr.w	r1, r2, r3
   1af90:	4770      	bx	lr
   1af92:	bf00      	nop

0001af94 <__aeabi_drsub>:
   1af94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1af98:	e002      	b.n	1afa0 <__adddf3>
   1af9a:	bf00      	nop

0001af9c <__aeabi_dsub>:
   1af9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001afa0 <__adddf3>:
   1afa0:	b530      	push	{r4, r5, lr}
   1afa2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1afa6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1afaa:	ea94 0f05 	teq	r4, r5
   1afae:	bf08      	it	eq
   1afb0:	ea90 0f02 	teqeq	r0, r2
   1afb4:	bf1f      	itttt	ne
   1afb6:	ea54 0c00 	orrsne.w	ip, r4, r0
   1afba:	ea55 0c02 	orrsne.w	ip, r5, r2
   1afbe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1afc2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1afc6:	f000 80e2 	beq.w	1b18e <__adddf3+0x1ee>
   1afca:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1afce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1afd2:	bfb8      	it	lt
   1afd4:	426d      	neglt	r5, r5
   1afd6:	dd0c      	ble.n	1aff2 <__adddf3+0x52>
   1afd8:	442c      	add	r4, r5
   1afda:	ea80 0202 	eor.w	r2, r0, r2
   1afde:	ea81 0303 	eor.w	r3, r1, r3
   1afe2:	ea82 0000 	eor.w	r0, r2, r0
   1afe6:	ea83 0101 	eor.w	r1, r3, r1
   1afea:	ea80 0202 	eor.w	r2, r0, r2
   1afee:	ea81 0303 	eor.w	r3, r1, r3
   1aff2:	2d36      	cmp	r5, #54	; 0x36
   1aff4:	bf88      	it	hi
   1aff6:	bd30      	pophi	{r4, r5, pc}
   1aff8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1affc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b000:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1b004:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1b008:	d002      	beq.n	1b010 <__adddf3+0x70>
   1b00a:	4240      	negs	r0, r0
   1b00c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b010:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1b014:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b018:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1b01c:	d002      	beq.n	1b024 <__adddf3+0x84>
   1b01e:	4252      	negs	r2, r2
   1b020:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1b024:	ea94 0f05 	teq	r4, r5
   1b028:	f000 80a7 	beq.w	1b17a <__adddf3+0x1da>
   1b02c:	f1a4 0401 	sub.w	r4, r4, #1
   1b030:	f1d5 0e20 	rsbs	lr, r5, #32
   1b034:	db0d      	blt.n	1b052 <__adddf3+0xb2>
   1b036:	fa02 fc0e 	lsl.w	ip, r2, lr
   1b03a:	fa22 f205 	lsr.w	r2, r2, r5
   1b03e:	1880      	adds	r0, r0, r2
   1b040:	f141 0100 	adc.w	r1, r1, #0
   1b044:	fa03 f20e 	lsl.w	r2, r3, lr
   1b048:	1880      	adds	r0, r0, r2
   1b04a:	fa43 f305 	asr.w	r3, r3, r5
   1b04e:	4159      	adcs	r1, r3
   1b050:	e00e      	b.n	1b070 <__adddf3+0xd0>
   1b052:	f1a5 0520 	sub.w	r5, r5, #32
   1b056:	f10e 0e20 	add.w	lr, lr, #32
   1b05a:	2a01      	cmp	r2, #1
   1b05c:	fa03 fc0e 	lsl.w	ip, r3, lr
   1b060:	bf28      	it	cs
   1b062:	f04c 0c02 	orrcs.w	ip, ip, #2
   1b066:	fa43 f305 	asr.w	r3, r3, r5
   1b06a:	18c0      	adds	r0, r0, r3
   1b06c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1b070:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b074:	d507      	bpl.n	1b086 <__adddf3+0xe6>
   1b076:	f04f 0e00 	mov.w	lr, #0
   1b07a:	f1dc 0c00 	rsbs	ip, ip, #0
   1b07e:	eb7e 0000 	sbcs.w	r0, lr, r0
   1b082:	eb6e 0101 	sbc.w	r1, lr, r1
   1b086:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1b08a:	d31b      	bcc.n	1b0c4 <__adddf3+0x124>
   1b08c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1b090:	d30c      	bcc.n	1b0ac <__adddf3+0x10c>
   1b092:	0849      	lsrs	r1, r1, #1
   1b094:	ea5f 0030 	movs.w	r0, r0, rrx
   1b098:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1b09c:	f104 0401 	add.w	r4, r4, #1
   1b0a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1b0a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1b0a8:	f080 809a 	bcs.w	1b1e0 <__adddf3+0x240>
   1b0ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b0b0:	bf08      	it	eq
   1b0b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b0b6:	f150 0000 	adcs.w	r0, r0, #0
   1b0ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b0be:	ea41 0105 	orr.w	r1, r1, r5
   1b0c2:	bd30      	pop	{r4, r5, pc}
   1b0c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1b0c8:	4140      	adcs	r0, r0
   1b0ca:	eb41 0101 	adc.w	r1, r1, r1
   1b0ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b0d2:	f1a4 0401 	sub.w	r4, r4, #1
   1b0d6:	d1e9      	bne.n	1b0ac <__adddf3+0x10c>
   1b0d8:	f091 0f00 	teq	r1, #0
   1b0dc:	bf04      	itt	eq
   1b0de:	4601      	moveq	r1, r0
   1b0e0:	2000      	moveq	r0, #0
   1b0e2:	fab1 f381 	clz	r3, r1
   1b0e6:	bf08      	it	eq
   1b0e8:	3320      	addeq	r3, #32
   1b0ea:	f1a3 030b 	sub.w	r3, r3, #11
   1b0ee:	f1b3 0220 	subs.w	r2, r3, #32
   1b0f2:	da0c      	bge.n	1b10e <__adddf3+0x16e>
   1b0f4:	320c      	adds	r2, #12
   1b0f6:	dd08      	ble.n	1b10a <__adddf3+0x16a>
   1b0f8:	f102 0c14 	add.w	ip, r2, #20
   1b0fc:	f1c2 020c 	rsb	r2, r2, #12
   1b100:	fa01 f00c 	lsl.w	r0, r1, ip
   1b104:	fa21 f102 	lsr.w	r1, r1, r2
   1b108:	e00c      	b.n	1b124 <__adddf3+0x184>
   1b10a:	f102 0214 	add.w	r2, r2, #20
   1b10e:	bfd8      	it	le
   1b110:	f1c2 0c20 	rsble	ip, r2, #32
   1b114:	fa01 f102 	lsl.w	r1, r1, r2
   1b118:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b11c:	bfdc      	itt	le
   1b11e:	ea41 010c 	orrle.w	r1, r1, ip
   1b122:	4090      	lslle	r0, r2
   1b124:	1ae4      	subs	r4, r4, r3
   1b126:	bfa2      	ittt	ge
   1b128:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1b12c:	4329      	orrge	r1, r5
   1b12e:	bd30      	popge	{r4, r5, pc}
   1b130:	ea6f 0404 	mvn.w	r4, r4
   1b134:	3c1f      	subs	r4, #31
   1b136:	da1c      	bge.n	1b172 <__adddf3+0x1d2>
   1b138:	340c      	adds	r4, #12
   1b13a:	dc0e      	bgt.n	1b15a <__adddf3+0x1ba>
   1b13c:	f104 0414 	add.w	r4, r4, #20
   1b140:	f1c4 0220 	rsb	r2, r4, #32
   1b144:	fa20 f004 	lsr.w	r0, r0, r4
   1b148:	fa01 f302 	lsl.w	r3, r1, r2
   1b14c:	ea40 0003 	orr.w	r0, r0, r3
   1b150:	fa21 f304 	lsr.w	r3, r1, r4
   1b154:	ea45 0103 	orr.w	r1, r5, r3
   1b158:	bd30      	pop	{r4, r5, pc}
   1b15a:	f1c4 040c 	rsb	r4, r4, #12
   1b15e:	f1c4 0220 	rsb	r2, r4, #32
   1b162:	fa20 f002 	lsr.w	r0, r0, r2
   1b166:	fa01 f304 	lsl.w	r3, r1, r4
   1b16a:	ea40 0003 	orr.w	r0, r0, r3
   1b16e:	4629      	mov	r1, r5
   1b170:	bd30      	pop	{r4, r5, pc}
   1b172:	fa21 f004 	lsr.w	r0, r1, r4
   1b176:	4629      	mov	r1, r5
   1b178:	bd30      	pop	{r4, r5, pc}
   1b17a:	f094 0f00 	teq	r4, #0
   1b17e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1b182:	bf06      	itte	eq
   1b184:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1b188:	3401      	addeq	r4, #1
   1b18a:	3d01      	subne	r5, #1
   1b18c:	e74e      	b.n	1b02c <__adddf3+0x8c>
   1b18e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b192:	bf18      	it	ne
   1b194:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b198:	d029      	beq.n	1b1ee <__adddf3+0x24e>
   1b19a:	ea94 0f05 	teq	r4, r5
   1b19e:	bf08      	it	eq
   1b1a0:	ea90 0f02 	teqeq	r0, r2
   1b1a4:	d005      	beq.n	1b1b2 <__adddf3+0x212>
   1b1a6:	ea54 0c00 	orrs.w	ip, r4, r0
   1b1aa:	bf04      	itt	eq
   1b1ac:	4619      	moveq	r1, r3
   1b1ae:	4610      	moveq	r0, r2
   1b1b0:	bd30      	pop	{r4, r5, pc}
   1b1b2:	ea91 0f03 	teq	r1, r3
   1b1b6:	bf1e      	ittt	ne
   1b1b8:	2100      	movne	r1, #0
   1b1ba:	2000      	movne	r0, #0
   1b1bc:	bd30      	popne	{r4, r5, pc}
   1b1be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1b1c2:	d105      	bne.n	1b1d0 <__adddf3+0x230>
   1b1c4:	0040      	lsls	r0, r0, #1
   1b1c6:	4149      	adcs	r1, r1
   1b1c8:	bf28      	it	cs
   1b1ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1b1ce:	bd30      	pop	{r4, r5, pc}
   1b1d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1b1d4:	bf3c      	itt	cc
   1b1d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1b1da:	bd30      	popcc	{r4, r5, pc}
   1b1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b1e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1b1e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b1e8:	f04f 0000 	mov.w	r0, #0
   1b1ec:	bd30      	pop	{r4, r5, pc}
   1b1ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b1f2:	bf1a      	itte	ne
   1b1f4:	4619      	movne	r1, r3
   1b1f6:	4610      	movne	r0, r2
   1b1f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1b1fc:	bf1c      	itt	ne
   1b1fe:	460b      	movne	r3, r1
   1b200:	4602      	movne	r2, r0
   1b202:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1b206:	bf06      	itte	eq
   1b208:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1b20c:	ea91 0f03 	teqeq	r1, r3
   1b210:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1b214:	bd30      	pop	{r4, r5, pc}
   1b216:	bf00      	nop

0001b218 <__aeabi_ui2d>:
   1b218:	f090 0f00 	teq	r0, #0
   1b21c:	bf04      	itt	eq
   1b21e:	2100      	moveq	r1, #0
   1b220:	4770      	bxeq	lr
   1b222:	b530      	push	{r4, r5, lr}
   1b224:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b228:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b22c:	f04f 0500 	mov.w	r5, #0
   1b230:	f04f 0100 	mov.w	r1, #0
   1b234:	e750      	b.n	1b0d8 <__adddf3+0x138>
   1b236:	bf00      	nop

0001b238 <__aeabi_i2d>:
   1b238:	f090 0f00 	teq	r0, #0
   1b23c:	bf04      	itt	eq
   1b23e:	2100      	moveq	r1, #0
   1b240:	4770      	bxeq	lr
   1b242:	b530      	push	{r4, r5, lr}
   1b244:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b248:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b24c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1b250:	bf48      	it	mi
   1b252:	4240      	negmi	r0, r0
   1b254:	f04f 0100 	mov.w	r1, #0
   1b258:	e73e      	b.n	1b0d8 <__adddf3+0x138>
   1b25a:	bf00      	nop

0001b25c <__aeabi_f2d>:
   1b25c:	0042      	lsls	r2, r0, #1
   1b25e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1b262:	ea4f 0131 	mov.w	r1, r1, rrx
   1b266:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1b26a:	bf1f      	itttt	ne
   1b26c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1b270:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b274:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1b278:	4770      	bxne	lr
   1b27a:	f092 0f00 	teq	r2, #0
   1b27e:	bf14      	ite	ne
   1b280:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b284:	4770      	bxeq	lr
   1b286:	b530      	push	{r4, r5, lr}
   1b288:	f44f 7460 	mov.w	r4, #896	; 0x380
   1b28c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b290:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1b294:	e720      	b.n	1b0d8 <__adddf3+0x138>
   1b296:	bf00      	nop

0001b298 <__aeabi_ul2d>:
   1b298:	ea50 0201 	orrs.w	r2, r0, r1
   1b29c:	bf08      	it	eq
   1b29e:	4770      	bxeq	lr
   1b2a0:	b530      	push	{r4, r5, lr}
   1b2a2:	f04f 0500 	mov.w	r5, #0
   1b2a6:	e00a      	b.n	1b2be <__aeabi_l2d+0x16>

0001b2a8 <__aeabi_l2d>:
   1b2a8:	ea50 0201 	orrs.w	r2, r0, r1
   1b2ac:	bf08      	it	eq
   1b2ae:	4770      	bxeq	lr
   1b2b0:	b530      	push	{r4, r5, lr}
   1b2b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1b2b6:	d502      	bpl.n	1b2be <__aeabi_l2d+0x16>
   1b2b8:	4240      	negs	r0, r0
   1b2ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b2be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b2c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b2c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1b2ca:	f43f aedc 	beq.w	1b086 <__adddf3+0xe6>
   1b2ce:	f04f 0203 	mov.w	r2, #3
   1b2d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b2d6:	bf18      	it	ne
   1b2d8:	3203      	addne	r2, #3
   1b2da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b2de:	bf18      	it	ne
   1b2e0:	3203      	addne	r2, #3
   1b2e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1b2e6:	f1c2 0320 	rsb	r3, r2, #32
   1b2ea:	fa00 fc03 	lsl.w	ip, r0, r3
   1b2ee:	fa20 f002 	lsr.w	r0, r0, r2
   1b2f2:	fa01 fe03 	lsl.w	lr, r1, r3
   1b2f6:	ea40 000e 	orr.w	r0, r0, lr
   1b2fa:	fa21 f102 	lsr.w	r1, r1, r2
   1b2fe:	4414      	add	r4, r2
   1b300:	e6c1      	b.n	1b086 <__adddf3+0xe6>
   1b302:	bf00      	nop

0001b304 <__aeabi_dmul>:
   1b304:	b570      	push	{r4, r5, r6, lr}
   1b306:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1b30a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1b30e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1b312:	bf1d      	ittte	ne
   1b314:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1b318:	ea94 0f0c 	teqne	r4, ip
   1b31c:	ea95 0f0c 	teqne	r5, ip
   1b320:	f000 f8de 	bleq	1b4e0 <__aeabi_dmul+0x1dc>
   1b324:	442c      	add	r4, r5
   1b326:	ea81 0603 	eor.w	r6, r1, r3
   1b32a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1b32e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1b332:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1b336:	bf18      	it	ne
   1b338:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1b33c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b344:	d038      	beq.n	1b3b8 <__aeabi_dmul+0xb4>
   1b346:	fba0 ce02 	umull	ip, lr, r0, r2
   1b34a:	f04f 0500 	mov.w	r5, #0
   1b34e:	fbe1 e502 	umlal	lr, r5, r1, r2
   1b352:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1b356:	fbe0 e503 	umlal	lr, r5, r0, r3
   1b35a:	f04f 0600 	mov.w	r6, #0
   1b35e:	fbe1 5603 	umlal	r5, r6, r1, r3
   1b362:	f09c 0f00 	teq	ip, #0
   1b366:	bf18      	it	ne
   1b368:	f04e 0e01 	orrne.w	lr, lr, #1
   1b36c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1b370:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1b374:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1b378:	d204      	bcs.n	1b384 <__aeabi_dmul+0x80>
   1b37a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1b37e:	416d      	adcs	r5, r5
   1b380:	eb46 0606 	adc.w	r6, r6, r6
   1b384:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1b388:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1b38c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1b390:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1b394:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1b398:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1b39c:	bf88      	it	hi
   1b39e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1b3a2:	d81e      	bhi.n	1b3e2 <__aeabi_dmul+0xde>
   1b3a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1b3a8:	bf08      	it	eq
   1b3aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1b3ae:	f150 0000 	adcs.w	r0, r0, #0
   1b3b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b3b6:	bd70      	pop	{r4, r5, r6, pc}
   1b3b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1b3bc:	ea46 0101 	orr.w	r1, r6, r1
   1b3c0:	ea40 0002 	orr.w	r0, r0, r2
   1b3c4:	ea81 0103 	eor.w	r1, r1, r3
   1b3c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1b3cc:	bfc2      	ittt	gt
   1b3ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   1b3d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1b3d6:	bd70      	popgt	{r4, r5, r6, pc}
   1b3d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b3dc:	f04f 0e00 	mov.w	lr, #0
   1b3e0:	3c01      	subs	r4, #1
   1b3e2:	f300 80ab 	bgt.w	1b53c <__aeabi_dmul+0x238>
   1b3e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1b3ea:	bfde      	ittt	le
   1b3ec:	2000      	movle	r0, #0
   1b3ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1b3f2:	bd70      	pople	{r4, r5, r6, pc}
   1b3f4:	f1c4 0400 	rsb	r4, r4, #0
   1b3f8:	3c20      	subs	r4, #32
   1b3fa:	da35      	bge.n	1b468 <__aeabi_dmul+0x164>
   1b3fc:	340c      	adds	r4, #12
   1b3fe:	dc1b      	bgt.n	1b438 <__aeabi_dmul+0x134>
   1b400:	f104 0414 	add.w	r4, r4, #20
   1b404:	f1c4 0520 	rsb	r5, r4, #32
   1b408:	fa00 f305 	lsl.w	r3, r0, r5
   1b40c:	fa20 f004 	lsr.w	r0, r0, r4
   1b410:	fa01 f205 	lsl.w	r2, r1, r5
   1b414:	ea40 0002 	orr.w	r0, r0, r2
   1b418:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1b41c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1b420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1b424:	fa21 f604 	lsr.w	r6, r1, r4
   1b428:	eb42 0106 	adc.w	r1, r2, r6
   1b42c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1b430:	bf08      	it	eq
   1b432:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1b436:	bd70      	pop	{r4, r5, r6, pc}
   1b438:	f1c4 040c 	rsb	r4, r4, #12
   1b43c:	f1c4 0520 	rsb	r5, r4, #32
   1b440:	fa00 f304 	lsl.w	r3, r0, r4
   1b444:	fa20 f005 	lsr.w	r0, r0, r5
   1b448:	fa01 f204 	lsl.w	r2, r1, r4
   1b44c:	ea40 0002 	orr.w	r0, r0, r2
   1b450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1b454:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1b458:	f141 0100 	adc.w	r1, r1, #0
   1b45c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1b460:	bf08      	it	eq
   1b462:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1b466:	bd70      	pop	{r4, r5, r6, pc}
   1b468:	f1c4 0520 	rsb	r5, r4, #32
   1b46c:	fa00 f205 	lsl.w	r2, r0, r5
   1b470:	ea4e 0e02 	orr.w	lr, lr, r2
   1b474:	fa20 f304 	lsr.w	r3, r0, r4
   1b478:	fa01 f205 	lsl.w	r2, r1, r5
   1b47c:	ea43 0302 	orr.w	r3, r3, r2
   1b480:	fa21 f004 	lsr.w	r0, r1, r4
   1b484:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1b488:	fa21 f204 	lsr.w	r2, r1, r4
   1b48c:	ea20 0002 	bic.w	r0, r0, r2
   1b490:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1b494:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1b498:	bf08      	it	eq
   1b49a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1b49e:	bd70      	pop	{r4, r5, r6, pc}
   1b4a0:	f094 0f00 	teq	r4, #0
   1b4a4:	d10f      	bne.n	1b4c6 <__aeabi_dmul+0x1c2>
   1b4a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1b4aa:	0040      	lsls	r0, r0, #1
   1b4ac:	eb41 0101 	adc.w	r1, r1, r1
   1b4b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b4b4:	bf08      	it	eq
   1b4b6:	3c01      	subeq	r4, #1
   1b4b8:	d0f7      	beq.n	1b4aa <__aeabi_dmul+0x1a6>
   1b4ba:	ea41 0106 	orr.w	r1, r1, r6
   1b4be:	f095 0f00 	teq	r5, #0
   1b4c2:	bf18      	it	ne
   1b4c4:	4770      	bxne	lr
   1b4c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1b4ca:	0052      	lsls	r2, r2, #1
   1b4cc:	eb43 0303 	adc.w	r3, r3, r3
   1b4d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1b4d4:	bf08      	it	eq
   1b4d6:	3d01      	subeq	r5, #1
   1b4d8:	d0f7      	beq.n	1b4ca <__aeabi_dmul+0x1c6>
   1b4da:	ea43 0306 	orr.w	r3, r3, r6
   1b4de:	4770      	bx	lr
   1b4e0:	ea94 0f0c 	teq	r4, ip
   1b4e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1b4e8:	bf18      	it	ne
   1b4ea:	ea95 0f0c 	teqne	r5, ip
   1b4ee:	d00c      	beq.n	1b50a <__aeabi_dmul+0x206>
   1b4f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1b4f4:	bf18      	it	ne
   1b4f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1b4fa:	d1d1      	bne.n	1b4a0 <__aeabi_dmul+0x19c>
   1b4fc:	ea81 0103 	eor.w	r1, r1, r3
   1b500:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1b504:	f04f 0000 	mov.w	r0, #0
   1b508:	bd70      	pop	{r4, r5, r6, pc}
   1b50a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1b50e:	bf06      	itte	eq
   1b510:	4610      	moveq	r0, r2
   1b512:	4619      	moveq	r1, r3
   1b514:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1b518:	d019      	beq.n	1b54e <__aeabi_dmul+0x24a>
   1b51a:	ea94 0f0c 	teq	r4, ip
   1b51e:	d102      	bne.n	1b526 <__aeabi_dmul+0x222>
   1b520:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1b524:	d113      	bne.n	1b54e <__aeabi_dmul+0x24a>
   1b526:	ea95 0f0c 	teq	r5, ip
   1b52a:	d105      	bne.n	1b538 <__aeabi_dmul+0x234>
   1b52c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1b530:	bf1c      	itt	ne
   1b532:	4610      	movne	r0, r2
   1b534:	4619      	movne	r1, r3
   1b536:	d10a      	bne.n	1b54e <__aeabi_dmul+0x24a>
   1b538:	ea81 0103 	eor.w	r1, r1, r3
   1b53c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1b540:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1b544:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b548:	f04f 0000 	mov.w	r0, #0
   1b54c:	bd70      	pop	{r4, r5, r6, pc}
   1b54e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1b552:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1b556:	bd70      	pop	{r4, r5, r6, pc}

0001b558 <__aeabi_ddiv>:
   1b558:	b570      	push	{r4, r5, r6, lr}
   1b55a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1b55e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1b562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1b566:	bf1d      	ittte	ne
   1b568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1b56c:	ea94 0f0c 	teqne	r4, ip
   1b570:	ea95 0f0c 	teqne	r5, ip
   1b574:	f000 f8a7 	bleq	1b6c6 <__aeabi_ddiv+0x16e>
   1b578:	eba4 0405 	sub.w	r4, r4, r5
   1b57c:	ea81 0e03 	eor.w	lr, r1, r3
   1b580:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1b584:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1b588:	f000 8088 	beq.w	1b69c <__aeabi_ddiv+0x144>
   1b58c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1b590:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1b594:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1b598:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1b59c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1b5a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1b5a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1b5a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1b5ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1b5b0:	429d      	cmp	r5, r3
   1b5b2:	bf08      	it	eq
   1b5b4:	4296      	cmpeq	r6, r2
   1b5b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1b5ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1b5be:	d202      	bcs.n	1b5c6 <__aeabi_ddiv+0x6e>
   1b5c0:	085b      	lsrs	r3, r3, #1
   1b5c2:	ea4f 0232 	mov.w	r2, r2, rrx
   1b5c6:	1ab6      	subs	r6, r6, r2
   1b5c8:	eb65 0503 	sbc.w	r5, r5, r3
   1b5cc:	085b      	lsrs	r3, r3, #1
   1b5ce:	ea4f 0232 	mov.w	r2, r2, rrx
   1b5d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1b5d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1b5da:	ebb6 0e02 	subs.w	lr, r6, r2
   1b5de:	eb75 0e03 	sbcs.w	lr, r5, r3
   1b5e2:	bf22      	ittt	cs
   1b5e4:	1ab6      	subcs	r6, r6, r2
   1b5e6:	4675      	movcs	r5, lr
   1b5e8:	ea40 000c 	orrcs.w	r0, r0, ip
   1b5ec:	085b      	lsrs	r3, r3, #1
   1b5ee:	ea4f 0232 	mov.w	r2, r2, rrx
   1b5f2:	ebb6 0e02 	subs.w	lr, r6, r2
   1b5f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1b5fa:	bf22      	ittt	cs
   1b5fc:	1ab6      	subcs	r6, r6, r2
   1b5fe:	4675      	movcs	r5, lr
   1b600:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1b604:	085b      	lsrs	r3, r3, #1
   1b606:	ea4f 0232 	mov.w	r2, r2, rrx
   1b60a:	ebb6 0e02 	subs.w	lr, r6, r2
   1b60e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1b612:	bf22      	ittt	cs
   1b614:	1ab6      	subcs	r6, r6, r2
   1b616:	4675      	movcs	r5, lr
   1b618:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1b61c:	085b      	lsrs	r3, r3, #1
   1b61e:	ea4f 0232 	mov.w	r2, r2, rrx
   1b622:	ebb6 0e02 	subs.w	lr, r6, r2
   1b626:	eb75 0e03 	sbcs.w	lr, r5, r3
   1b62a:	bf22      	ittt	cs
   1b62c:	1ab6      	subcs	r6, r6, r2
   1b62e:	4675      	movcs	r5, lr
   1b630:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1b634:	ea55 0e06 	orrs.w	lr, r5, r6
   1b638:	d018      	beq.n	1b66c <__aeabi_ddiv+0x114>
   1b63a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1b63e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1b642:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1b646:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1b64a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1b64e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1b652:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1b656:	d1c0      	bne.n	1b5da <__aeabi_ddiv+0x82>
   1b658:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b65c:	d10b      	bne.n	1b676 <__aeabi_ddiv+0x11e>
   1b65e:	ea41 0100 	orr.w	r1, r1, r0
   1b662:	f04f 0000 	mov.w	r0, #0
   1b666:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1b66a:	e7b6      	b.n	1b5da <__aeabi_ddiv+0x82>
   1b66c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1b670:	bf04      	itt	eq
   1b672:	4301      	orreq	r1, r0
   1b674:	2000      	moveq	r0, #0
   1b676:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1b67a:	bf88      	it	hi
   1b67c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1b680:	f63f aeaf 	bhi.w	1b3e2 <__aeabi_dmul+0xde>
   1b684:	ebb5 0c03 	subs.w	ip, r5, r3
   1b688:	bf04      	itt	eq
   1b68a:	ebb6 0c02 	subseq.w	ip, r6, r2
   1b68e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b692:	f150 0000 	adcs.w	r0, r0, #0
   1b696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b69a:	bd70      	pop	{r4, r5, r6, pc}
   1b69c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1b6a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1b6a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1b6a8:	bfc2      	ittt	gt
   1b6aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   1b6ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1b6b2:	bd70      	popgt	{r4, r5, r6, pc}
   1b6b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b6b8:	f04f 0e00 	mov.w	lr, #0
   1b6bc:	3c01      	subs	r4, #1
   1b6be:	e690      	b.n	1b3e2 <__aeabi_dmul+0xde>
   1b6c0:	ea45 0e06 	orr.w	lr, r5, r6
   1b6c4:	e68d      	b.n	1b3e2 <__aeabi_dmul+0xde>
   1b6c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1b6ca:	ea94 0f0c 	teq	r4, ip
   1b6ce:	bf08      	it	eq
   1b6d0:	ea95 0f0c 	teqeq	r5, ip
   1b6d4:	f43f af3b 	beq.w	1b54e <__aeabi_dmul+0x24a>
   1b6d8:	ea94 0f0c 	teq	r4, ip
   1b6dc:	d10a      	bne.n	1b6f4 <__aeabi_ddiv+0x19c>
   1b6de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1b6e2:	f47f af34 	bne.w	1b54e <__aeabi_dmul+0x24a>
   1b6e6:	ea95 0f0c 	teq	r5, ip
   1b6ea:	f47f af25 	bne.w	1b538 <__aeabi_dmul+0x234>
   1b6ee:	4610      	mov	r0, r2
   1b6f0:	4619      	mov	r1, r3
   1b6f2:	e72c      	b.n	1b54e <__aeabi_dmul+0x24a>
   1b6f4:	ea95 0f0c 	teq	r5, ip
   1b6f8:	d106      	bne.n	1b708 <__aeabi_ddiv+0x1b0>
   1b6fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1b6fe:	f43f aefd 	beq.w	1b4fc <__aeabi_dmul+0x1f8>
   1b702:	4610      	mov	r0, r2
   1b704:	4619      	mov	r1, r3
   1b706:	e722      	b.n	1b54e <__aeabi_dmul+0x24a>
   1b708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1b70c:	bf18      	it	ne
   1b70e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1b712:	f47f aec5 	bne.w	1b4a0 <__aeabi_dmul+0x19c>
   1b716:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1b71a:	f47f af0d 	bne.w	1b538 <__aeabi_dmul+0x234>
   1b71e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1b722:	f47f aeeb 	bne.w	1b4fc <__aeabi_dmul+0x1f8>
   1b726:	e712      	b.n	1b54e <__aeabi_dmul+0x24a>

0001b728 <__gedf2>:
   1b728:	f04f 3cff 	mov.w	ip, #4294967295
   1b72c:	e006      	b.n	1b73c <__cmpdf2+0x4>
   1b72e:	bf00      	nop

0001b730 <__ledf2>:
   1b730:	f04f 0c01 	mov.w	ip, #1
   1b734:	e002      	b.n	1b73c <__cmpdf2+0x4>
   1b736:	bf00      	nop

0001b738 <__cmpdf2>:
   1b738:	f04f 0c01 	mov.w	ip, #1
   1b73c:	f84d cd04 	str.w	ip, [sp, #-4]!
   1b740:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1b744:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1b748:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1b74c:	bf18      	it	ne
   1b74e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1b752:	d01b      	beq.n	1b78c <__cmpdf2+0x54>
   1b754:	b001      	add	sp, #4
   1b756:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1b75a:	bf0c      	ite	eq
   1b75c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1b760:	ea91 0f03 	teqne	r1, r3
   1b764:	bf02      	ittt	eq
   1b766:	ea90 0f02 	teqeq	r0, r2
   1b76a:	2000      	moveq	r0, #0
   1b76c:	4770      	bxeq	lr
   1b76e:	f110 0f00 	cmn.w	r0, #0
   1b772:	ea91 0f03 	teq	r1, r3
   1b776:	bf58      	it	pl
   1b778:	4299      	cmppl	r1, r3
   1b77a:	bf08      	it	eq
   1b77c:	4290      	cmpeq	r0, r2
   1b77e:	bf2c      	ite	cs
   1b780:	17d8      	asrcs	r0, r3, #31
   1b782:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1b786:	f040 0001 	orr.w	r0, r0, #1
   1b78a:	4770      	bx	lr
   1b78c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1b790:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1b794:	d102      	bne.n	1b79c <__cmpdf2+0x64>
   1b796:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1b79a:	d107      	bne.n	1b7ac <__cmpdf2+0x74>
   1b79c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1b7a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1b7a4:	d1d6      	bne.n	1b754 <__cmpdf2+0x1c>
   1b7a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1b7aa:	d0d3      	beq.n	1b754 <__cmpdf2+0x1c>
   1b7ac:	f85d 0b04 	ldr.w	r0, [sp], #4
   1b7b0:	4770      	bx	lr
   1b7b2:	bf00      	nop

0001b7b4 <__aeabi_cdrcmple>:
   1b7b4:	4684      	mov	ip, r0
   1b7b6:	4610      	mov	r0, r2
   1b7b8:	4662      	mov	r2, ip
   1b7ba:	468c      	mov	ip, r1
   1b7bc:	4619      	mov	r1, r3
   1b7be:	4663      	mov	r3, ip
   1b7c0:	e000      	b.n	1b7c4 <__aeabi_cdcmpeq>
   1b7c2:	bf00      	nop

0001b7c4 <__aeabi_cdcmpeq>:
   1b7c4:	b501      	push	{r0, lr}
   1b7c6:	f7ff ffb7 	bl	1b738 <__cmpdf2>
   1b7ca:	2800      	cmp	r0, #0
   1b7cc:	bf48      	it	mi
   1b7ce:	f110 0f00 	cmnmi.w	r0, #0
   1b7d2:	bd01      	pop	{r0, pc}

0001b7d4 <__aeabi_dcmpeq>:
   1b7d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b7d8:	f7ff fff4 	bl	1b7c4 <__aeabi_cdcmpeq>
   1b7dc:	bf0c      	ite	eq
   1b7de:	2001      	moveq	r0, #1
   1b7e0:	2000      	movne	r0, #0
   1b7e2:	f85d fb08 	ldr.w	pc, [sp], #8
   1b7e6:	bf00      	nop

0001b7e8 <__aeabi_dcmplt>:
   1b7e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b7ec:	f7ff ffea 	bl	1b7c4 <__aeabi_cdcmpeq>
   1b7f0:	bf34      	ite	cc
   1b7f2:	2001      	movcc	r0, #1
   1b7f4:	2000      	movcs	r0, #0
   1b7f6:	f85d fb08 	ldr.w	pc, [sp], #8
   1b7fa:	bf00      	nop

0001b7fc <__aeabi_dcmple>:
   1b7fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b800:	f7ff ffe0 	bl	1b7c4 <__aeabi_cdcmpeq>
   1b804:	bf94      	ite	ls
   1b806:	2001      	movls	r0, #1
   1b808:	2000      	movhi	r0, #0
   1b80a:	f85d fb08 	ldr.w	pc, [sp], #8
   1b80e:	bf00      	nop

0001b810 <__aeabi_dcmpge>:
   1b810:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b814:	f7ff ffce 	bl	1b7b4 <__aeabi_cdrcmple>
   1b818:	bf94      	ite	ls
   1b81a:	2001      	movls	r0, #1
   1b81c:	2000      	movhi	r0, #0
   1b81e:	f85d fb08 	ldr.w	pc, [sp], #8
   1b822:	bf00      	nop

0001b824 <__aeabi_dcmpgt>:
   1b824:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b828:	f7ff ffc4 	bl	1b7b4 <__aeabi_cdrcmple>
   1b82c:	bf34      	ite	cc
   1b82e:	2001      	movcc	r0, #1
   1b830:	2000      	movcs	r0, #0
   1b832:	f85d fb08 	ldr.w	pc, [sp], #8
   1b836:	bf00      	nop

0001b838 <__aeabi_dcmpun>:
   1b838:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1b83c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1b840:	d102      	bne.n	1b848 <__aeabi_dcmpun+0x10>
   1b842:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1b846:	d10a      	bne.n	1b85e <__aeabi_dcmpun+0x26>
   1b848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1b84c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1b850:	d102      	bne.n	1b858 <__aeabi_dcmpun+0x20>
   1b852:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1b856:	d102      	bne.n	1b85e <__aeabi_dcmpun+0x26>
   1b858:	f04f 0000 	mov.w	r0, #0
   1b85c:	4770      	bx	lr
   1b85e:	f04f 0001 	mov.w	r0, #1
   1b862:	4770      	bx	lr

0001b864 <__aeabi_d2uiz>:
   1b864:	004a      	lsls	r2, r1, #1
   1b866:	d211      	bcs.n	1b88c <__aeabi_d2uiz+0x28>
   1b868:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1b86c:	d211      	bcs.n	1b892 <__aeabi_d2uiz+0x2e>
   1b86e:	d50d      	bpl.n	1b88c <__aeabi_d2uiz+0x28>
   1b870:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1b874:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1b878:	d40e      	bmi.n	1b898 <__aeabi_d2uiz+0x34>
   1b87a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1b87e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b882:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1b886:	fa23 f002 	lsr.w	r0, r3, r2
   1b88a:	4770      	bx	lr
   1b88c:	f04f 0000 	mov.w	r0, #0
   1b890:	4770      	bx	lr
   1b892:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1b896:	d102      	bne.n	1b89e <__aeabi_d2uiz+0x3a>
   1b898:	f04f 30ff 	mov.w	r0, #4294967295
   1b89c:	4770      	bx	lr
   1b89e:	f04f 0000 	mov.w	r0, #0
   1b8a2:	4770      	bx	lr

0001b8a4 <__aeabi_frsub>:
   1b8a4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1b8a8:	e002      	b.n	1b8b0 <__addsf3>
   1b8aa:	bf00      	nop

0001b8ac <__aeabi_fsub>:
   1b8ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001b8b0 <__addsf3>:
   1b8b0:	0042      	lsls	r2, r0, #1
   1b8b2:	bf1f      	itttt	ne
   1b8b4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1b8b8:	ea92 0f03 	teqne	r2, r3
   1b8bc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1b8c0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1b8c4:	d06a      	beq.n	1b99c <__addsf3+0xec>
   1b8c6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1b8ca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1b8ce:	bfc1      	itttt	gt
   1b8d0:	18d2      	addgt	r2, r2, r3
   1b8d2:	4041      	eorgt	r1, r0
   1b8d4:	4048      	eorgt	r0, r1
   1b8d6:	4041      	eorgt	r1, r0
   1b8d8:	bfb8      	it	lt
   1b8da:	425b      	neglt	r3, r3
   1b8dc:	2b19      	cmp	r3, #25
   1b8de:	bf88      	it	hi
   1b8e0:	4770      	bxhi	lr
   1b8e2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1b8e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b8ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1b8ee:	bf18      	it	ne
   1b8f0:	4240      	negne	r0, r0
   1b8f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b8f6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1b8fa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1b8fe:	bf18      	it	ne
   1b900:	4249      	negne	r1, r1
   1b902:	ea92 0f03 	teq	r2, r3
   1b906:	d03f      	beq.n	1b988 <__addsf3+0xd8>
   1b908:	f1a2 0201 	sub.w	r2, r2, #1
   1b90c:	fa41 fc03 	asr.w	ip, r1, r3
   1b910:	eb10 000c 	adds.w	r0, r0, ip
   1b914:	f1c3 0320 	rsb	r3, r3, #32
   1b918:	fa01 f103 	lsl.w	r1, r1, r3
   1b91c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1b920:	d502      	bpl.n	1b928 <__addsf3+0x78>
   1b922:	4249      	negs	r1, r1
   1b924:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1b928:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1b92c:	d313      	bcc.n	1b956 <__addsf3+0xa6>
   1b92e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1b932:	d306      	bcc.n	1b942 <__addsf3+0x92>
   1b934:	0840      	lsrs	r0, r0, #1
   1b936:	ea4f 0131 	mov.w	r1, r1, rrx
   1b93a:	f102 0201 	add.w	r2, r2, #1
   1b93e:	2afe      	cmp	r2, #254	; 0xfe
   1b940:	d251      	bcs.n	1b9e6 <__addsf3+0x136>
   1b942:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1b946:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1b94a:	bf08      	it	eq
   1b94c:	f020 0001 	biceq.w	r0, r0, #1
   1b950:	ea40 0003 	orr.w	r0, r0, r3
   1b954:	4770      	bx	lr
   1b956:	0049      	lsls	r1, r1, #1
   1b958:	eb40 0000 	adc.w	r0, r0, r0
   1b95c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1b960:	f1a2 0201 	sub.w	r2, r2, #1
   1b964:	d1ed      	bne.n	1b942 <__addsf3+0x92>
   1b966:	fab0 fc80 	clz	ip, r0
   1b96a:	f1ac 0c08 	sub.w	ip, ip, #8
   1b96e:	ebb2 020c 	subs.w	r2, r2, ip
   1b972:	fa00 f00c 	lsl.w	r0, r0, ip
   1b976:	bfaa      	itet	ge
   1b978:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1b97c:	4252      	neglt	r2, r2
   1b97e:	4318      	orrge	r0, r3
   1b980:	bfbc      	itt	lt
   1b982:	40d0      	lsrlt	r0, r2
   1b984:	4318      	orrlt	r0, r3
   1b986:	4770      	bx	lr
   1b988:	f092 0f00 	teq	r2, #0
   1b98c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1b990:	bf06      	itte	eq
   1b992:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1b996:	3201      	addeq	r2, #1
   1b998:	3b01      	subne	r3, #1
   1b99a:	e7b5      	b.n	1b908 <__addsf3+0x58>
   1b99c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1b9a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1b9a4:	bf18      	it	ne
   1b9a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1b9aa:	d021      	beq.n	1b9f0 <__addsf3+0x140>
   1b9ac:	ea92 0f03 	teq	r2, r3
   1b9b0:	d004      	beq.n	1b9bc <__addsf3+0x10c>
   1b9b2:	f092 0f00 	teq	r2, #0
   1b9b6:	bf08      	it	eq
   1b9b8:	4608      	moveq	r0, r1
   1b9ba:	4770      	bx	lr
   1b9bc:	ea90 0f01 	teq	r0, r1
   1b9c0:	bf1c      	itt	ne
   1b9c2:	2000      	movne	r0, #0
   1b9c4:	4770      	bxne	lr
   1b9c6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1b9ca:	d104      	bne.n	1b9d6 <__addsf3+0x126>
   1b9cc:	0040      	lsls	r0, r0, #1
   1b9ce:	bf28      	it	cs
   1b9d0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1b9d4:	4770      	bx	lr
   1b9d6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1b9da:	bf3c      	itt	cc
   1b9dc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1b9e0:	4770      	bxcc	lr
   1b9e2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1b9e6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1b9ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b9ee:	4770      	bx	lr
   1b9f0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1b9f4:	bf16      	itet	ne
   1b9f6:	4608      	movne	r0, r1
   1b9f8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1b9fc:	4601      	movne	r1, r0
   1b9fe:	0242      	lsls	r2, r0, #9
   1ba00:	bf06      	itte	eq
   1ba02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1ba06:	ea90 0f01 	teqeq	r0, r1
   1ba0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1ba0e:	4770      	bx	lr

0001ba10 <__aeabi_ui2f>:
   1ba10:	f04f 0300 	mov.w	r3, #0
   1ba14:	e004      	b.n	1ba20 <__aeabi_i2f+0x8>
   1ba16:	bf00      	nop

0001ba18 <__aeabi_i2f>:
   1ba18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1ba1c:	bf48      	it	mi
   1ba1e:	4240      	negmi	r0, r0
   1ba20:	ea5f 0c00 	movs.w	ip, r0
   1ba24:	bf08      	it	eq
   1ba26:	4770      	bxeq	lr
   1ba28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1ba2c:	4601      	mov	r1, r0
   1ba2e:	f04f 0000 	mov.w	r0, #0
   1ba32:	e01c      	b.n	1ba6e <__aeabi_l2f+0x2a>

0001ba34 <__aeabi_ul2f>:
   1ba34:	ea50 0201 	orrs.w	r2, r0, r1
   1ba38:	bf08      	it	eq
   1ba3a:	4770      	bxeq	lr
   1ba3c:	f04f 0300 	mov.w	r3, #0
   1ba40:	e00a      	b.n	1ba58 <__aeabi_l2f+0x14>
   1ba42:	bf00      	nop

0001ba44 <__aeabi_l2f>:
   1ba44:	ea50 0201 	orrs.w	r2, r0, r1
   1ba48:	bf08      	it	eq
   1ba4a:	4770      	bxeq	lr
   1ba4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1ba50:	d502      	bpl.n	1ba58 <__aeabi_l2f+0x14>
   1ba52:	4240      	negs	r0, r0
   1ba54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ba58:	ea5f 0c01 	movs.w	ip, r1
   1ba5c:	bf02      	ittt	eq
   1ba5e:	4684      	moveq	ip, r0
   1ba60:	4601      	moveq	r1, r0
   1ba62:	2000      	moveq	r0, #0
   1ba64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1ba68:	bf08      	it	eq
   1ba6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1ba6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1ba72:	fabc f28c 	clz	r2, ip
   1ba76:	3a08      	subs	r2, #8
   1ba78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1ba7c:	db10      	blt.n	1baa0 <__aeabi_l2f+0x5c>
   1ba7e:	fa01 fc02 	lsl.w	ip, r1, r2
   1ba82:	4463      	add	r3, ip
   1ba84:	fa00 fc02 	lsl.w	ip, r0, r2
   1ba88:	f1c2 0220 	rsb	r2, r2, #32
   1ba8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1ba90:	fa20 f202 	lsr.w	r2, r0, r2
   1ba94:	eb43 0002 	adc.w	r0, r3, r2
   1ba98:	bf08      	it	eq
   1ba9a:	f020 0001 	biceq.w	r0, r0, #1
   1ba9e:	4770      	bx	lr
   1baa0:	f102 0220 	add.w	r2, r2, #32
   1baa4:	fa01 fc02 	lsl.w	ip, r1, r2
   1baa8:	f1c2 0220 	rsb	r2, r2, #32
   1baac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1bab0:	fa21 f202 	lsr.w	r2, r1, r2
   1bab4:	eb43 0002 	adc.w	r0, r3, r2
   1bab8:	bf08      	it	eq
   1baba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1babe:	4770      	bx	lr

0001bac0 <__aeabi_fmul>:
   1bac0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bac4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1bac8:	bf1e      	ittt	ne
   1baca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1bace:	ea92 0f0c 	teqne	r2, ip
   1bad2:	ea93 0f0c 	teqne	r3, ip
   1bad6:	d06f      	beq.n	1bbb8 <__aeabi_fmul+0xf8>
   1bad8:	441a      	add	r2, r3
   1bada:	ea80 0c01 	eor.w	ip, r0, r1
   1bade:	0240      	lsls	r0, r0, #9
   1bae0:	bf18      	it	ne
   1bae2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1bae6:	d01e      	beq.n	1bb26 <__aeabi_fmul+0x66>
   1bae8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1baec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1baf0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1baf4:	fba0 3101 	umull	r3, r1, r0, r1
   1baf8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1bafc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1bb00:	bf3e      	ittt	cc
   1bb02:	0049      	lslcc	r1, r1, #1
   1bb04:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1bb08:	005b      	lslcc	r3, r3, #1
   1bb0a:	ea40 0001 	orr.w	r0, r0, r1
   1bb0e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1bb12:	2afd      	cmp	r2, #253	; 0xfd
   1bb14:	d81d      	bhi.n	1bb52 <__aeabi_fmul+0x92>
   1bb16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1bb1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1bb1e:	bf08      	it	eq
   1bb20:	f020 0001 	biceq.w	r0, r0, #1
   1bb24:	4770      	bx	lr
   1bb26:	f090 0f00 	teq	r0, #0
   1bb2a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1bb2e:	bf08      	it	eq
   1bb30:	0249      	lsleq	r1, r1, #9
   1bb32:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1bb36:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1bb3a:	3a7f      	subs	r2, #127	; 0x7f
   1bb3c:	bfc2      	ittt	gt
   1bb3e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1bb42:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1bb46:	4770      	bxgt	lr
   1bb48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1bb4c:	f04f 0300 	mov.w	r3, #0
   1bb50:	3a01      	subs	r2, #1
   1bb52:	dc5d      	bgt.n	1bc10 <__aeabi_fmul+0x150>
   1bb54:	f112 0f19 	cmn.w	r2, #25
   1bb58:	bfdc      	itt	le
   1bb5a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1bb5e:	4770      	bxle	lr
   1bb60:	f1c2 0200 	rsb	r2, r2, #0
   1bb64:	0041      	lsls	r1, r0, #1
   1bb66:	fa21 f102 	lsr.w	r1, r1, r2
   1bb6a:	f1c2 0220 	rsb	r2, r2, #32
   1bb6e:	fa00 fc02 	lsl.w	ip, r0, r2
   1bb72:	ea5f 0031 	movs.w	r0, r1, rrx
   1bb76:	f140 0000 	adc.w	r0, r0, #0
   1bb7a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1bb7e:	bf08      	it	eq
   1bb80:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1bb84:	4770      	bx	lr
   1bb86:	f092 0f00 	teq	r2, #0
   1bb8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1bb8e:	bf02      	ittt	eq
   1bb90:	0040      	lsleq	r0, r0, #1
   1bb92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1bb96:	3a01      	subeq	r2, #1
   1bb98:	d0f9      	beq.n	1bb8e <__aeabi_fmul+0xce>
   1bb9a:	ea40 000c 	orr.w	r0, r0, ip
   1bb9e:	f093 0f00 	teq	r3, #0
   1bba2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1bba6:	bf02      	ittt	eq
   1bba8:	0049      	lsleq	r1, r1, #1
   1bbaa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1bbae:	3b01      	subeq	r3, #1
   1bbb0:	d0f9      	beq.n	1bba6 <__aeabi_fmul+0xe6>
   1bbb2:	ea41 010c 	orr.w	r1, r1, ip
   1bbb6:	e78f      	b.n	1bad8 <__aeabi_fmul+0x18>
   1bbb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1bbbc:	ea92 0f0c 	teq	r2, ip
   1bbc0:	bf18      	it	ne
   1bbc2:	ea93 0f0c 	teqne	r3, ip
   1bbc6:	d00a      	beq.n	1bbde <__aeabi_fmul+0x11e>
   1bbc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1bbcc:	bf18      	it	ne
   1bbce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1bbd2:	d1d8      	bne.n	1bb86 <__aeabi_fmul+0xc6>
   1bbd4:	ea80 0001 	eor.w	r0, r0, r1
   1bbd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1bbdc:	4770      	bx	lr
   1bbde:	f090 0f00 	teq	r0, #0
   1bbe2:	bf17      	itett	ne
   1bbe4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1bbe8:	4608      	moveq	r0, r1
   1bbea:	f091 0f00 	teqne	r1, #0
   1bbee:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1bbf2:	d014      	beq.n	1bc1e <__aeabi_fmul+0x15e>
   1bbf4:	ea92 0f0c 	teq	r2, ip
   1bbf8:	d101      	bne.n	1bbfe <__aeabi_fmul+0x13e>
   1bbfa:	0242      	lsls	r2, r0, #9
   1bbfc:	d10f      	bne.n	1bc1e <__aeabi_fmul+0x15e>
   1bbfe:	ea93 0f0c 	teq	r3, ip
   1bc02:	d103      	bne.n	1bc0c <__aeabi_fmul+0x14c>
   1bc04:	024b      	lsls	r3, r1, #9
   1bc06:	bf18      	it	ne
   1bc08:	4608      	movne	r0, r1
   1bc0a:	d108      	bne.n	1bc1e <__aeabi_fmul+0x15e>
   1bc0c:	ea80 0001 	eor.w	r0, r0, r1
   1bc10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1bc14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1bc18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1bc1c:	4770      	bx	lr
   1bc1e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1bc22:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1bc26:	4770      	bx	lr

0001bc28 <__aeabi_fdiv>:
   1bc28:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bc2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1bc30:	bf1e      	ittt	ne
   1bc32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1bc36:	ea92 0f0c 	teqne	r2, ip
   1bc3a:	ea93 0f0c 	teqne	r3, ip
   1bc3e:	d069      	beq.n	1bd14 <__aeabi_fdiv+0xec>
   1bc40:	eba2 0203 	sub.w	r2, r2, r3
   1bc44:	ea80 0c01 	eor.w	ip, r0, r1
   1bc48:	0249      	lsls	r1, r1, #9
   1bc4a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1bc4e:	d037      	beq.n	1bcc0 <__aeabi_fdiv+0x98>
   1bc50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1bc54:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1bc58:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1bc5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1bc60:	428b      	cmp	r3, r1
   1bc62:	bf38      	it	cc
   1bc64:	005b      	lslcc	r3, r3, #1
   1bc66:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1bc6a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1bc6e:	428b      	cmp	r3, r1
   1bc70:	bf24      	itt	cs
   1bc72:	1a5b      	subcs	r3, r3, r1
   1bc74:	ea40 000c 	orrcs.w	r0, r0, ip
   1bc78:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1bc7c:	bf24      	itt	cs
   1bc7e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1bc82:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1bc86:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1bc8a:	bf24      	itt	cs
   1bc8c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1bc90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1bc94:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1bc98:	bf24      	itt	cs
   1bc9a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1bc9e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1bca2:	011b      	lsls	r3, r3, #4
   1bca4:	bf18      	it	ne
   1bca6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1bcaa:	d1e0      	bne.n	1bc6e <__aeabi_fdiv+0x46>
   1bcac:	2afd      	cmp	r2, #253	; 0xfd
   1bcae:	f63f af50 	bhi.w	1bb52 <__aeabi_fmul+0x92>
   1bcb2:	428b      	cmp	r3, r1
   1bcb4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1bcb8:	bf08      	it	eq
   1bcba:	f020 0001 	biceq.w	r0, r0, #1
   1bcbe:	4770      	bx	lr
   1bcc0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1bcc4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1bcc8:	327f      	adds	r2, #127	; 0x7f
   1bcca:	bfc2      	ittt	gt
   1bccc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1bcd0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1bcd4:	4770      	bxgt	lr
   1bcd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1bcda:	f04f 0300 	mov.w	r3, #0
   1bcde:	3a01      	subs	r2, #1
   1bce0:	e737      	b.n	1bb52 <__aeabi_fmul+0x92>
   1bce2:	f092 0f00 	teq	r2, #0
   1bce6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1bcea:	bf02      	ittt	eq
   1bcec:	0040      	lsleq	r0, r0, #1
   1bcee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1bcf2:	3a01      	subeq	r2, #1
   1bcf4:	d0f9      	beq.n	1bcea <__aeabi_fdiv+0xc2>
   1bcf6:	ea40 000c 	orr.w	r0, r0, ip
   1bcfa:	f093 0f00 	teq	r3, #0
   1bcfe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1bd02:	bf02      	ittt	eq
   1bd04:	0049      	lsleq	r1, r1, #1
   1bd06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1bd0a:	3b01      	subeq	r3, #1
   1bd0c:	d0f9      	beq.n	1bd02 <__aeabi_fdiv+0xda>
   1bd0e:	ea41 010c 	orr.w	r1, r1, ip
   1bd12:	e795      	b.n	1bc40 <__aeabi_fdiv+0x18>
   1bd14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1bd18:	ea92 0f0c 	teq	r2, ip
   1bd1c:	d108      	bne.n	1bd30 <__aeabi_fdiv+0x108>
   1bd1e:	0242      	lsls	r2, r0, #9
   1bd20:	f47f af7d 	bne.w	1bc1e <__aeabi_fmul+0x15e>
   1bd24:	ea93 0f0c 	teq	r3, ip
   1bd28:	f47f af70 	bne.w	1bc0c <__aeabi_fmul+0x14c>
   1bd2c:	4608      	mov	r0, r1
   1bd2e:	e776      	b.n	1bc1e <__aeabi_fmul+0x15e>
   1bd30:	ea93 0f0c 	teq	r3, ip
   1bd34:	d104      	bne.n	1bd40 <__aeabi_fdiv+0x118>
   1bd36:	024b      	lsls	r3, r1, #9
   1bd38:	f43f af4c 	beq.w	1bbd4 <__aeabi_fmul+0x114>
   1bd3c:	4608      	mov	r0, r1
   1bd3e:	e76e      	b.n	1bc1e <__aeabi_fmul+0x15e>
   1bd40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1bd44:	bf18      	it	ne
   1bd46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1bd4a:	d1ca      	bne.n	1bce2 <__aeabi_fdiv+0xba>
   1bd4c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1bd50:	f47f af5c 	bne.w	1bc0c <__aeabi_fmul+0x14c>
   1bd54:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1bd58:	f47f af3c 	bne.w	1bbd4 <__aeabi_fmul+0x114>
   1bd5c:	e75f      	b.n	1bc1e <__aeabi_fmul+0x15e>
   1bd5e:	bf00      	nop

0001bd60 <__gesf2>:
   1bd60:	f04f 3cff 	mov.w	ip, #4294967295
   1bd64:	e006      	b.n	1bd74 <__cmpsf2+0x4>
   1bd66:	bf00      	nop

0001bd68 <__lesf2>:
   1bd68:	f04f 0c01 	mov.w	ip, #1
   1bd6c:	e002      	b.n	1bd74 <__cmpsf2+0x4>
   1bd6e:	bf00      	nop

0001bd70 <__cmpsf2>:
   1bd70:	f04f 0c01 	mov.w	ip, #1
   1bd74:	f84d cd04 	str.w	ip, [sp, #-4]!
   1bd78:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1bd7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1bd80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1bd84:	bf18      	it	ne
   1bd86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1bd8a:	d011      	beq.n	1bdb0 <__cmpsf2+0x40>
   1bd8c:	b001      	add	sp, #4
   1bd8e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1bd92:	bf18      	it	ne
   1bd94:	ea90 0f01 	teqne	r0, r1
   1bd98:	bf58      	it	pl
   1bd9a:	ebb2 0003 	subspl.w	r0, r2, r3
   1bd9e:	bf88      	it	hi
   1bda0:	17c8      	asrhi	r0, r1, #31
   1bda2:	bf38      	it	cc
   1bda4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1bda8:	bf18      	it	ne
   1bdaa:	f040 0001 	orrne.w	r0, r0, #1
   1bdae:	4770      	bx	lr
   1bdb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1bdb4:	d102      	bne.n	1bdbc <__cmpsf2+0x4c>
   1bdb6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1bdba:	d105      	bne.n	1bdc8 <__cmpsf2+0x58>
   1bdbc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1bdc0:	d1e4      	bne.n	1bd8c <__cmpsf2+0x1c>
   1bdc2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1bdc6:	d0e1      	beq.n	1bd8c <__cmpsf2+0x1c>
   1bdc8:	f85d 0b04 	ldr.w	r0, [sp], #4
   1bdcc:	4770      	bx	lr
   1bdce:	bf00      	nop

0001bdd0 <__aeabi_cfrcmple>:
   1bdd0:	4684      	mov	ip, r0
   1bdd2:	4608      	mov	r0, r1
   1bdd4:	4661      	mov	r1, ip
   1bdd6:	e7ff      	b.n	1bdd8 <__aeabi_cfcmpeq>

0001bdd8 <__aeabi_cfcmpeq>:
   1bdd8:	b50f      	push	{r0, r1, r2, r3, lr}
   1bdda:	f7ff ffc9 	bl	1bd70 <__cmpsf2>
   1bdde:	2800      	cmp	r0, #0
   1bde0:	bf48      	it	mi
   1bde2:	f110 0f00 	cmnmi.w	r0, #0
   1bde6:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001bde8 <__aeabi_fcmpeq>:
   1bde8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1bdec:	f7ff fff4 	bl	1bdd8 <__aeabi_cfcmpeq>
   1bdf0:	bf0c      	ite	eq
   1bdf2:	2001      	moveq	r0, #1
   1bdf4:	2000      	movne	r0, #0
   1bdf6:	f85d fb08 	ldr.w	pc, [sp], #8
   1bdfa:	bf00      	nop

0001bdfc <__aeabi_fcmplt>:
   1bdfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be00:	f7ff ffea 	bl	1bdd8 <__aeabi_cfcmpeq>
   1be04:	bf34      	ite	cc
   1be06:	2001      	movcc	r0, #1
   1be08:	2000      	movcs	r0, #0
   1be0a:	f85d fb08 	ldr.w	pc, [sp], #8
   1be0e:	bf00      	nop

0001be10 <__aeabi_fcmple>:
   1be10:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be14:	f7ff ffe0 	bl	1bdd8 <__aeabi_cfcmpeq>
   1be18:	bf94      	ite	ls
   1be1a:	2001      	movls	r0, #1
   1be1c:	2000      	movhi	r0, #0
   1be1e:	f85d fb08 	ldr.w	pc, [sp], #8
   1be22:	bf00      	nop

0001be24 <__aeabi_fcmpge>:
   1be24:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be28:	f7ff ffd2 	bl	1bdd0 <__aeabi_cfrcmple>
   1be2c:	bf94      	ite	ls
   1be2e:	2001      	movls	r0, #1
   1be30:	2000      	movhi	r0, #0
   1be32:	f85d fb08 	ldr.w	pc, [sp], #8
   1be36:	bf00      	nop

0001be38 <__aeabi_fcmpgt>:
   1be38:	f84d ed08 	str.w	lr, [sp, #-8]!
   1be3c:	f7ff ffc8 	bl	1bdd0 <__aeabi_cfrcmple>
   1be40:	bf34      	ite	cc
   1be42:	2001      	movcc	r0, #1
   1be44:	2000      	movcs	r0, #0
   1be46:	f85d fb08 	ldr.w	pc, [sp], #8
   1be4a:	bf00      	nop

0001be4c <__aeabi_f2uiz>:
   1be4c:	0042      	lsls	r2, r0, #1
   1be4e:	d20e      	bcs.n	1be6e <__aeabi_f2uiz+0x22>
   1be50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1be54:	d30b      	bcc.n	1be6e <__aeabi_f2uiz+0x22>
   1be56:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1be5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1be5e:	d409      	bmi.n	1be74 <__aeabi_f2uiz+0x28>
   1be60:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1be64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1be68:	fa23 f002 	lsr.w	r0, r3, r2
   1be6c:	4770      	bx	lr
   1be6e:	f04f 0000 	mov.w	r0, #0
   1be72:	4770      	bx	lr
   1be74:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1be78:	d101      	bne.n	1be7e <__aeabi_f2uiz+0x32>
   1be7a:	0242      	lsls	r2, r0, #9
   1be7c:	d102      	bne.n	1be84 <__aeabi_f2uiz+0x38>
   1be7e:	f04f 30ff 	mov.w	r0, #4294967295
   1be82:	4770      	bx	lr
   1be84:	f04f 0000 	mov.w	r0, #0
   1be88:	4770      	bx	lr
   1be8a:	bf00      	nop

0001be8c <__aeabi_uldivmod>:
   1be8c:	b953      	cbnz	r3, 1bea4 <__aeabi_uldivmod+0x18>
   1be8e:	b94a      	cbnz	r2, 1bea4 <__aeabi_uldivmod+0x18>
   1be90:	2900      	cmp	r1, #0
   1be92:	bf08      	it	eq
   1be94:	2800      	cmpeq	r0, #0
   1be96:	bf1c      	itt	ne
   1be98:	f04f 31ff 	movne.w	r1, #4294967295
   1be9c:	f04f 30ff 	movne.w	r0, #4294967295
   1bea0:	f000 b97a 	b.w	1c198 <__aeabi_idiv0>
   1bea4:	f1ad 0c08 	sub.w	ip, sp, #8
   1bea8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1beac:	f000 f806 	bl	1bebc <__udivmoddi4>
   1beb0:	f8dd e004 	ldr.w	lr, [sp, #4]
   1beb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1beb8:	b004      	add	sp, #16
   1beba:	4770      	bx	lr

0001bebc <__udivmoddi4>:
   1bebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bec0:	468c      	mov	ip, r1
   1bec2:	460d      	mov	r5, r1
   1bec4:	4604      	mov	r4, r0
   1bec6:	9e08      	ldr	r6, [sp, #32]
   1bec8:	2b00      	cmp	r3, #0
   1beca:	d151      	bne.n	1bf70 <__udivmoddi4+0xb4>
   1becc:	428a      	cmp	r2, r1
   1bece:	4617      	mov	r7, r2
   1bed0:	d96d      	bls.n	1bfae <__udivmoddi4+0xf2>
   1bed2:	fab2 fe82 	clz	lr, r2
   1bed6:	f1be 0f00 	cmp.w	lr, #0
   1beda:	d00b      	beq.n	1bef4 <__udivmoddi4+0x38>
   1bedc:	f1ce 0c20 	rsb	ip, lr, #32
   1bee0:	fa01 f50e 	lsl.w	r5, r1, lr
   1bee4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1bee8:	fa02 f70e 	lsl.w	r7, r2, lr
   1beec:	ea4c 0c05 	orr.w	ip, ip, r5
   1bef0:	fa00 f40e 	lsl.w	r4, r0, lr
   1bef4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1bef8:	0c25      	lsrs	r5, r4, #16
   1befa:	fbbc f8fa 	udiv	r8, ip, sl
   1befe:	fa1f f987 	uxth.w	r9, r7
   1bf02:	fb0a cc18 	mls	ip, sl, r8, ip
   1bf06:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1bf0a:	fb08 f309 	mul.w	r3, r8, r9
   1bf0e:	42ab      	cmp	r3, r5
   1bf10:	d90a      	bls.n	1bf28 <__udivmoddi4+0x6c>
   1bf12:	19ed      	adds	r5, r5, r7
   1bf14:	f108 32ff 	add.w	r2, r8, #4294967295
   1bf18:	f080 8123 	bcs.w	1c162 <__udivmoddi4+0x2a6>
   1bf1c:	42ab      	cmp	r3, r5
   1bf1e:	f240 8120 	bls.w	1c162 <__udivmoddi4+0x2a6>
   1bf22:	f1a8 0802 	sub.w	r8, r8, #2
   1bf26:	443d      	add	r5, r7
   1bf28:	1aed      	subs	r5, r5, r3
   1bf2a:	b2a4      	uxth	r4, r4
   1bf2c:	fbb5 f0fa 	udiv	r0, r5, sl
   1bf30:	fb0a 5510 	mls	r5, sl, r0, r5
   1bf34:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1bf38:	fb00 f909 	mul.w	r9, r0, r9
   1bf3c:	45a1      	cmp	r9, r4
   1bf3e:	d909      	bls.n	1bf54 <__udivmoddi4+0x98>
   1bf40:	19e4      	adds	r4, r4, r7
   1bf42:	f100 33ff 	add.w	r3, r0, #4294967295
   1bf46:	f080 810a 	bcs.w	1c15e <__udivmoddi4+0x2a2>
   1bf4a:	45a1      	cmp	r9, r4
   1bf4c:	f240 8107 	bls.w	1c15e <__udivmoddi4+0x2a2>
   1bf50:	3802      	subs	r0, #2
   1bf52:	443c      	add	r4, r7
   1bf54:	eba4 0409 	sub.w	r4, r4, r9
   1bf58:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1bf5c:	2100      	movs	r1, #0
   1bf5e:	2e00      	cmp	r6, #0
   1bf60:	d061      	beq.n	1c026 <__udivmoddi4+0x16a>
   1bf62:	fa24 f40e 	lsr.w	r4, r4, lr
   1bf66:	2300      	movs	r3, #0
   1bf68:	6034      	str	r4, [r6, #0]
   1bf6a:	6073      	str	r3, [r6, #4]
   1bf6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bf70:	428b      	cmp	r3, r1
   1bf72:	d907      	bls.n	1bf84 <__udivmoddi4+0xc8>
   1bf74:	2e00      	cmp	r6, #0
   1bf76:	d054      	beq.n	1c022 <__udivmoddi4+0x166>
   1bf78:	2100      	movs	r1, #0
   1bf7a:	e886 0021 	stmia.w	r6, {r0, r5}
   1bf7e:	4608      	mov	r0, r1
   1bf80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bf84:	fab3 f183 	clz	r1, r3
   1bf88:	2900      	cmp	r1, #0
   1bf8a:	f040 808e 	bne.w	1c0aa <__udivmoddi4+0x1ee>
   1bf8e:	42ab      	cmp	r3, r5
   1bf90:	d302      	bcc.n	1bf98 <__udivmoddi4+0xdc>
   1bf92:	4282      	cmp	r2, r0
   1bf94:	f200 80fa 	bhi.w	1c18c <__udivmoddi4+0x2d0>
   1bf98:	1a84      	subs	r4, r0, r2
   1bf9a:	eb65 0503 	sbc.w	r5, r5, r3
   1bf9e:	2001      	movs	r0, #1
   1bfa0:	46ac      	mov	ip, r5
   1bfa2:	2e00      	cmp	r6, #0
   1bfa4:	d03f      	beq.n	1c026 <__udivmoddi4+0x16a>
   1bfa6:	e886 1010 	stmia.w	r6, {r4, ip}
   1bfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bfae:	b912      	cbnz	r2, 1bfb6 <__udivmoddi4+0xfa>
   1bfb0:	2701      	movs	r7, #1
   1bfb2:	fbb7 f7f2 	udiv	r7, r7, r2
   1bfb6:	fab7 fe87 	clz	lr, r7
   1bfba:	f1be 0f00 	cmp.w	lr, #0
   1bfbe:	d134      	bne.n	1c02a <__udivmoddi4+0x16e>
   1bfc0:	1beb      	subs	r3, r5, r7
   1bfc2:	0c3a      	lsrs	r2, r7, #16
   1bfc4:	fa1f fc87 	uxth.w	ip, r7
   1bfc8:	2101      	movs	r1, #1
   1bfca:	fbb3 f8f2 	udiv	r8, r3, r2
   1bfce:	0c25      	lsrs	r5, r4, #16
   1bfd0:	fb02 3318 	mls	r3, r2, r8, r3
   1bfd4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1bfd8:	fb0c f308 	mul.w	r3, ip, r8
   1bfdc:	42ab      	cmp	r3, r5
   1bfde:	d907      	bls.n	1bff0 <__udivmoddi4+0x134>
   1bfe0:	19ed      	adds	r5, r5, r7
   1bfe2:	f108 30ff 	add.w	r0, r8, #4294967295
   1bfe6:	d202      	bcs.n	1bfee <__udivmoddi4+0x132>
   1bfe8:	42ab      	cmp	r3, r5
   1bfea:	f200 80d1 	bhi.w	1c190 <__udivmoddi4+0x2d4>
   1bfee:	4680      	mov	r8, r0
   1bff0:	1aed      	subs	r5, r5, r3
   1bff2:	b2a3      	uxth	r3, r4
   1bff4:	fbb5 f0f2 	udiv	r0, r5, r2
   1bff8:	fb02 5510 	mls	r5, r2, r0, r5
   1bffc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1c000:	fb0c fc00 	mul.w	ip, ip, r0
   1c004:	45a4      	cmp	ip, r4
   1c006:	d907      	bls.n	1c018 <__udivmoddi4+0x15c>
   1c008:	19e4      	adds	r4, r4, r7
   1c00a:	f100 33ff 	add.w	r3, r0, #4294967295
   1c00e:	d202      	bcs.n	1c016 <__udivmoddi4+0x15a>
   1c010:	45a4      	cmp	ip, r4
   1c012:	f200 80b8 	bhi.w	1c186 <__udivmoddi4+0x2ca>
   1c016:	4618      	mov	r0, r3
   1c018:	eba4 040c 	sub.w	r4, r4, ip
   1c01c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1c020:	e79d      	b.n	1bf5e <__udivmoddi4+0xa2>
   1c022:	4631      	mov	r1, r6
   1c024:	4630      	mov	r0, r6
   1c026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c02a:	f1ce 0420 	rsb	r4, lr, #32
   1c02e:	fa05 f30e 	lsl.w	r3, r5, lr
   1c032:	fa07 f70e 	lsl.w	r7, r7, lr
   1c036:	fa20 f804 	lsr.w	r8, r0, r4
   1c03a:	0c3a      	lsrs	r2, r7, #16
   1c03c:	fa25 f404 	lsr.w	r4, r5, r4
   1c040:	ea48 0803 	orr.w	r8, r8, r3
   1c044:	fbb4 f1f2 	udiv	r1, r4, r2
   1c048:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1c04c:	fb02 4411 	mls	r4, r2, r1, r4
   1c050:	fa1f fc87 	uxth.w	ip, r7
   1c054:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1c058:	fb01 f30c 	mul.w	r3, r1, ip
   1c05c:	42ab      	cmp	r3, r5
   1c05e:	fa00 f40e 	lsl.w	r4, r0, lr
   1c062:	d909      	bls.n	1c078 <__udivmoddi4+0x1bc>
   1c064:	19ed      	adds	r5, r5, r7
   1c066:	f101 30ff 	add.w	r0, r1, #4294967295
   1c06a:	f080 808a 	bcs.w	1c182 <__udivmoddi4+0x2c6>
   1c06e:	42ab      	cmp	r3, r5
   1c070:	f240 8087 	bls.w	1c182 <__udivmoddi4+0x2c6>
   1c074:	3902      	subs	r1, #2
   1c076:	443d      	add	r5, r7
   1c078:	1aeb      	subs	r3, r5, r3
   1c07a:	fa1f f588 	uxth.w	r5, r8
   1c07e:	fbb3 f0f2 	udiv	r0, r3, r2
   1c082:	fb02 3310 	mls	r3, r2, r0, r3
   1c086:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1c08a:	fb00 f30c 	mul.w	r3, r0, ip
   1c08e:	42ab      	cmp	r3, r5
   1c090:	d907      	bls.n	1c0a2 <__udivmoddi4+0x1e6>
   1c092:	19ed      	adds	r5, r5, r7
   1c094:	f100 38ff 	add.w	r8, r0, #4294967295
   1c098:	d26f      	bcs.n	1c17a <__udivmoddi4+0x2be>
   1c09a:	42ab      	cmp	r3, r5
   1c09c:	d96d      	bls.n	1c17a <__udivmoddi4+0x2be>
   1c09e:	3802      	subs	r0, #2
   1c0a0:	443d      	add	r5, r7
   1c0a2:	1aeb      	subs	r3, r5, r3
   1c0a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1c0a8:	e78f      	b.n	1bfca <__udivmoddi4+0x10e>
   1c0aa:	f1c1 0720 	rsb	r7, r1, #32
   1c0ae:	fa22 f807 	lsr.w	r8, r2, r7
   1c0b2:	408b      	lsls	r3, r1
   1c0b4:	fa05 f401 	lsl.w	r4, r5, r1
   1c0b8:	ea48 0303 	orr.w	r3, r8, r3
   1c0bc:	fa20 fe07 	lsr.w	lr, r0, r7
   1c0c0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1c0c4:	40fd      	lsrs	r5, r7
   1c0c6:	ea4e 0e04 	orr.w	lr, lr, r4
   1c0ca:	fbb5 f9fc 	udiv	r9, r5, ip
   1c0ce:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1c0d2:	fb0c 5519 	mls	r5, ip, r9, r5
   1c0d6:	fa1f f883 	uxth.w	r8, r3
   1c0da:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1c0de:	fb09 f408 	mul.w	r4, r9, r8
   1c0e2:	42ac      	cmp	r4, r5
   1c0e4:	fa02 f201 	lsl.w	r2, r2, r1
   1c0e8:	fa00 fa01 	lsl.w	sl, r0, r1
   1c0ec:	d908      	bls.n	1c100 <__udivmoddi4+0x244>
   1c0ee:	18ed      	adds	r5, r5, r3
   1c0f0:	f109 30ff 	add.w	r0, r9, #4294967295
   1c0f4:	d243      	bcs.n	1c17e <__udivmoddi4+0x2c2>
   1c0f6:	42ac      	cmp	r4, r5
   1c0f8:	d941      	bls.n	1c17e <__udivmoddi4+0x2c2>
   1c0fa:	f1a9 0902 	sub.w	r9, r9, #2
   1c0fe:	441d      	add	r5, r3
   1c100:	1b2d      	subs	r5, r5, r4
   1c102:	fa1f fe8e 	uxth.w	lr, lr
   1c106:	fbb5 f0fc 	udiv	r0, r5, ip
   1c10a:	fb0c 5510 	mls	r5, ip, r0, r5
   1c10e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1c112:	fb00 f808 	mul.w	r8, r0, r8
   1c116:	45a0      	cmp	r8, r4
   1c118:	d907      	bls.n	1c12a <__udivmoddi4+0x26e>
   1c11a:	18e4      	adds	r4, r4, r3
   1c11c:	f100 35ff 	add.w	r5, r0, #4294967295
   1c120:	d229      	bcs.n	1c176 <__udivmoddi4+0x2ba>
   1c122:	45a0      	cmp	r8, r4
   1c124:	d927      	bls.n	1c176 <__udivmoddi4+0x2ba>
   1c126:	3802      	subs	r0, #2
   1c128:	441c      	add	r4, r3
   1c12a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1c12e:	eba4 0408 	sub.w	r4, r4, r8
   1c132:	fba0 8902 	umull	r8, r9, r0, r2
   1c136:	454c      	cmp	r4, r9
   1c138:	46c6      	mov	lr, r8
   1c13a:	464d      	mov	r5, r9
   1c13c:	d315      	bcc.n	1c16a <__udivmoddi4+0x2ae>
   1c13e:	d012      	beq.n	1c166 <__udivmoddi4+0x2aa>
   1c140:	b156      	cbz	r6, 1c158 <__udivmoddi4+0x29c>
   1c142:	ebba 030e 	subs.w	r3, sl, lr
   1c146:	eb64 0405 	sbc.w	r4, r4, r5
   1c14a:	fa04 f707 	lsl.w	r7, r4, r7
   1c14e:	40cb      	lsrs	r3, r1
   1c150:	431f      	orrs	r7, r3
   1c152:	40cc      	lsrs	r4, r1
   1c154:	6037      	str	r7, [r6, #0]
   1c156:	6074      	str	r4, [r6, #4]
   1c158:	2100      	movs	r1, #0
   1c15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c15e:	4618      	mov	r0, r3
   1c160:	e6f8      	b.n	1bf54 <__udivmoddi4+0x98>
   1c162:	4690      	mov	r8, r2
   1c164:	e6e0      	b.n	1bf28 <__udivmoddi4+0x6c>
   1c166:	45c2      	cmp	sl, r8
   1c168:	d2ea      	bcs.n	1c140 <__udivmoddi4+0x284>
   1c16a:	ebb8 0e02 	subs.w	lr, r8, r2
   1c16e:	eb69 0503 	sbc.w	r5, r9, r3
   1c172:	3801      	subs	r0, #1
   1c174:	e7e4      	b.n	1c140 <__udivmoddi4+0x284>
   1c176:	4628      	mov	r0, r5
   1c178:	e7d7      	b.n	1c12a <__udivmoddi4+0x26e>
   1c17a:	4640      	mov	r0, r8
   1c17c:	e791      	b.n	1c0a2 <__udivmoddi4+0x1e6>
   1c17e:	4681      	mov	r9, r0
   1c180:	e7be      	b.n	1c100 <__udivmoddi4+0x244>
   1c182:	4601      	mov	r1, r0
   1c184:	e778      	b.n	1c078 <__udivmoddi4+0x1bc>
   1c186:	3802      	subs	r0, #2
   1c188:	443c      	add	r4, r7
   1c18a:	e745      	b.n	1c018 <__udivmoddi4+0x15c>
   1c18c:	4608      	mov	r0, r1
   1c18e:	e708      	b.n	1bfa2 <__udivmoddi4+0xe6>
   1c190:	f1a8 0802 	sub.w	r8, r8, #2
   1c194:	443d      	add	r5, r7
   1c196:	e72b      	b.n	1bff0 <__udivmoddi4+0x134>

0001c198 <__aeabi_idiv0>:
   1c198:	4770      	bx	lr
   1c19a:	bf00      	nop

0001c19c <ctime>:
   1c19c:	b508      	push	{r3, lr}
   1c19e:	f000 f84d 	bl	1c23c <localtime>
   1c1a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c1a6:	f000 bdcf 	b.w	1cd48 <asctime>
   1c1aa:	bf00      	nop

0001c1ac <__cxa_atexit>:
   1c1ac:	4613      	mov	r3, r2
   1c1ae:	460a      	mov	r2, r1
   1c1b0:	4601      	mov	r1, r0
   1c1b2:	2002      	movs	r0, #2
   1c1b4:	f000 bd5c 	b.w	1cc70 <__register_exitproc>

0001c1b8 <difftime>:
   1c1b8:	b508      	push	{r3, lr}
   1c1ba:	1a40      	subs	r0, r0, r1
   1c1bc:	f7ff f83c 	bl	1b238 <__aeabi_i2d>
   1c1c0:	bd08      	pop	{r3, pc}
   1c1c2:	bf00      	nop

0001c1c4 <__errno>:
   1c1c4:	4b01      	ldr	r3, [pc, #4]	; (1c1cc <__errno+0x8>)
   1c1c6:	6818      	ldr	r0, [r3, #0]
   1c1c8:	4770      	bx	lr
   1c1ca:	bf00      	nop
   1c1cc:	20000248 	.word	0x20000248

0001c1d0 <ffs>:
   1c1d0:	b140      	cbz	r0, 1c1e4 <ffs+0x14>
   1c1d2:	2300      	movs	r3, #0
   1c1d4:	fa40 f103 	asr.w	r1, r0, r3
   1c1d8:	1c5a      	adds	r2, r3, #1
   1c1da:	07c9      	lsls	r1, r1, #31
   1c1dc:	4613      	mov	r3, r2
   1c1de:	d5f9      	bpl.n	1c1d4 <ffs+0x4>
   1c1e0:	4610      	mov	r0, r2
   1c1e2:	4770      	bx	lr
   1c1e4:	4602      	mov	r2, r0
   1c1e6:	4610      	mov	r0, r2
   1c1e8:	4770      	bx	lr
   1c1ea:	bf00      	nop

0001c1ec <__libc_init_array>:
   1c1ec:	b570      	push	{r4, r5, r6, lr}
   1c1ee:	4e0f      	ldr	r6, [pc, #60]	; (1c22c <__libc_init_array+0x40>)
   1c1f0:	4d0f      	ldr	r5, [pc, #60]	; (1c230 <__libc_init_array+0x44>)
   1c1f2:	1b76      	subs	r6, r6, r5
   1c1f4:	10b6      	asrs	r6, r6, #2
   1c1f6:	bf18      	it	ne
   1c1f8:	2400      	movne	r4, #0
   1c1fa:	d005      	beq.n	1c208 <__libc_init_array+0x1c>
   1c1fc:	3401      	adds	r4, #1
   1c1fe:	f855 3b04 	ldr.w	r3, [r5], #4
   1c202:	4798      	blx	r3
   1c204:	42a6      	cmp	r6, r4
   1c206:	d1f9      	bne.n	1c1fc <__libc_init_array+0x10>
   1c208:	4e0a      	ldr	r6, [pc, #40]	; (1c234 <__libc_init_array+0x48>)
   1c20a:	4d0b      	ldr	r5, [pc, #44]	; (1c238 <__libc_init_array+0x4c>)
   1c20c:	1b76      	subs	r6, r6, r5
   1c20e:	f006 fa4d 	bl	226ac <_init>
   1c212:	10b6      	asrs	r6, r6, #2
   1c214:	bf18      	it	ne
   1c216:	2400      	movne	r4, #0
   1c218:	d006      	beq.n	1c228 <__libc_init_array+0x3c>
   1c21a:	3401      	adds	r4, #1
   1c21c:	f855 3b04 	ldr.w	r3, [r5], #4
   1c220:	4798      	blx	r3
   1c222:	42a6      	cmp	r6, r4
   1c224:	d1f9      	bne.n	1c21a <__libc_init_array+0x2e>
   1c226:	bd70      	pop	{r4, r5, r6, pc}
   1c228:	bd70      	pop	{r4, r5, r6, pc}
   1c22a:	bf00      	nop
   1c22c:	000226b8 	.word	0x000226b8
   1c230:	000226b8 	.word	0x000226b8
   1c234:	00022724 	.word	0x00022724
   1c238:	000226b8 	.word	0x000226b8

0001c23c <localtime>:
   1c23c:	4b02      	ldr	r3, [pc, #8]	; (1c248 <localtime+0xc>)
   1c23e:	6819      	ldr	r1, [r3, #0]
   1c240:	317c      	adds	r1, #124	; 0x7c
   1c242:	f000 b803 	b.w	1c24c <localtime_r>
   1c246:	bf00      	nop
   1c248:	20000248 	.word	0x20000248

0001c24c <localtime_r>:
   1c24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c250:	460c      	mov	r4, r1
   1c252:	4607      	mov	r7, r0
   1c254:	f000 fe0c 	bl	1ce70 <__gettzinfo>
   1c258:	4621      	mov	r1, r4
   1c25a:	4680      	mov	r8, r0
   1c25c:	4638      	mov	r0, r7
   1c25e:	f000 fe0b 	bl	1ce78 <gmtime_r>
   1c262:	6946      	ldr	r6, [r0, #20]
   1c264:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1c268:	07b1      	lsls	r1, r6, #30
   1c26a:	4604      	mov	r4, r0
   1c26c:	f000 80b9 	beq.w	1c3e2 <localtime_r+0x196>
   1c270:	17f5      	asrs	r5, r6, #31
   1c272:	4b7f      	ldr	r3, [pc, #508]	; (1c470 <localtime_r+0x224>)
   1c274:	fb83 2306 	smull	r2, r3, r3, r6
   1c278:	ebc5 15e3 	rsb	r5, r5, r3, asr #7
   1c27c:	f44f 73c8 	mov.w	r3, #400	; 0x190
   1c280:	fb03 6515 	mls	r5, r3, r5, r6
   1c284:	2d00      	cmp	r5, #0
   1c286:	bf0c      	ite	eq
   1c288:	2530      	moveq	r5, #48	; 0x30
   1c28a:	2500      	movne	r5, #0
   1c28c:	4b79      	ldr	r3, [pc, #484]	; (1c474 <localtime_r+0x228>)
   1c28e:	441d      	add	r5, r3
   1c290:	f000 fb46 	bl	1c920 <__tz_lock>
   1c294:	f000 fb50 	bl	1c938 <_tzset_unlocked>
   1c298:	4b77      	ldr	r3, [pc, #476]	; (1c478 <localtime_r+0x22c>)
   1c29a:	681b      	ldr	r3, [r3, #0]
   1c29c:	b343      	cbz	r3, 1c2f0 <localtime_r+0xa4>
   1c29e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c2a2:	429e      	cmp	r6, r3
   1c2a4:	d005      	beq.n	1c2b2 <localtime_r+0x66>
   1c2a6:	4630      	mov	r0, r6
   1c2a8:	f000 fa78 	bl	1c79c <__tzcalc_limits>
   1c2ac:	2800      	cmp	r0, #0
   1c2ae:	f000 80a6 	beq.w	1c3fe <localtime_r+0x1b2>
   1c2b2:	f8d8 3000 	ldr.w	r3, [r8]
   1c2b6:	b983      	cbnz	r3, 1c2da <localtime_r+0x8e>
   1c2b8:	683b      	ldr	r3, [r7, #0]
   1c2ba:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1c2be:	4293      	cmp	r3, r2
   1c2c0:	f280 80a1 	bge.w	1c406 <localtime_r+0x1ba>
   1c2c4:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1c2c8:	4293      	cmp	r3, r2
   1c2ca:	bfb4      	ite	lt
   1c2cc:	2301      	movlt	r3, #1
   1c2ce:	2300      	movge	r3, #0
   1c2d0:	6223      	str	r3, [r4, #32]
   1c2d2:	da0e      	bge.n	1c2f2 <localtime_r+0xa6>
   1c2d4:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
   1c2d8:	e00d      	b.n	1c2f6 <localtime_r+0xaa>
   1c2da:	683b      	ldr	r3, [r7, #0]
   1c2dc:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1c2e0:	4293      	cmp	r3, r2
   1c2e2:	db04      	blt.n	1c2ee <localtime_r+0xa2>
   1c2e4:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1c2e8:	4293      	cmp	r3, r2
   1c2ea:	f2c0 808c 	blt.w	1c406 <localtime_r+0x1ba>
   1c2ee:	2300      	movs	r3, #0
   1c2f0:	6223      	str	r3, [r4, #32]
   1c2f2:	f8d8 6020 	ldr.w	r6, [r8, #32]
   1c2f6:	4a61      	ldr	r2, [pc, #388]	; (1c47c <localtime_r+0x230>)
   1c2f8:	4f61      	ldr	r7, [pc, #388]	; (1c480 <localtime_r+0x234>)
   1c2fa:	68a1      	ldr	r1, [r4, #8]
   1c2fc:	fb82 3206 	smull	r3, r2, r2, r6
   1c300:	4432      	add	r2, r6
   1c302:	17f3      	asrs	r3, r6, #31
   1c304:	12d2      	asrs	r2, r2, #11
   1c306:	1ad0      	subs	r0, r2, r3
   1c308:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1c30c:	fb0e 6010 	mls	r0, lr, r0, r6
   1c310:	fb87 6700 	smull	r6, r7, r7, r0
   1c314:	183e      	adds	r6, r7, r0
   1c316:	17c7      	asrs	r7, r0, #31
   1c318:	ebc7 1766 	rsb	r7, r7, r6, asr #5
   1c31c:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
   1c320:	6826      	ldr	r6, [r4, #0]
   1c322:	1ad3      	subs	r3, r2, r3
   1c324:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
   1c328:	6862      	ldr	r2, [r4, #4]
   1c32a:	1a30      	subs	r0, r6, r0
   1c32c:	1acb      	subs	r3, r1, r3
   1c32e:	1bd2      	subs	r2, r2, r7
   1c330:	283b      	cmp	r0, #59	; 0x3b
   1c332:	e884 000d 	stmia.w	r4, {r0, r2, r3}
   1c336:	dd4d      	ble.n	1c3d4 <localtime_r+0x188>
   1c338:	3201      	adds	r2, #1
   1c33a:	383c      	subs	r0, #60	; 0x3c
   1c33c:	e884 0005 	stmia.w	r4, {r0, r2}
   1c340:	2a3b      	cmp	r2, #59	; 0x3b
   1c342:	dd40      	ble.n	1c3c6 <localtime_r+0x17a>
   1c344:	3301      	adds	r3, #1
   1c346:	3a3c      	subs	r2, #60	; 0x3c
   1c348:	60a3      	str	r3, [r4, #8]
   1c34a:	6062      	str	r2, [r4, #4]
   1c34c:	2b17      	cmp	r3, #23
   1c34e:	dd1d      	ble.n	1c38c <localtime_r+0x140>
   1c350:	69a2      	ldr	r2, [r4, #24]
   1c352:	69e1      	ldr	r1, [r4, #28]
   1c354:	3201      	adds	r2, #1
   1c356:	2a06      	cmp	r2, #6
   1c358:	bfc8      	it	gt
   1c35a:	2200      	movgt	r2, #0
   1c35c:	61a2      	str	r2, [r4, #24]
   1c35e:	68e2      	ldr	r2, [r4, #12]
   1c360:	3101      	adds	r1, #1
   1c362:	61e1      	str	r1, [r4, #28]
   1c364:	3b18      	subs	r3, #24
   1c366:	3201      	adds	r2, #1
   1c368:	6921      	ldr	r1, [r4, #16]
   1c36a:	60a3      	str	r3, [r4, #8]
   1c36c:	60e2      	str	r2, [r4, #12]
   1c36e:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1c372:	429a      	cmp	r2, r3
   1c374:	dd05      	ble.n	1c382 <localtime_r+0x136>
   1c376:	3101      	adds	r1, #1
   1c378:	1ad2      	subs	r2, r2, r3
   1c37a:	290c      	cmp	r1, #12
   1c37c:	60e2      	str	r2, [r4, #12]
   1c37e:	d045      	beq.n	1c40c <localtime_r+0x1c0>
   1c380:	6121      	str	r1, [r4, #16]
   1c382:	f000 fad3 	bl	1c92c <__tz_unlock>
   1c386:	4620      	mov	r0, r4
   1c388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c38c:	2b00      	cmp	r3, #0
   1c38e:	daf8      	bge.n	1c382 <localtime_r+0x136>
   1c390:	69a2      	ldr	r2, [r4, #24]
   1c392:	69e1      	ldr	r1, [r4, #28]
   1c394:	3a01      	subs	r2, #1
   1c396:	bf48      	it	mi
   1c398:	2206      	movmi	r2, #6
   1c39a:	61a2      	str	r2, [r4, #24]
   1c39c:	68e2      	ldr	r2, [r4, #12]
   1c39e:	3901      	subs	r1, #1
   1c3a0:	3318      	adds	r3, #24
   1c3a2:	3a01      	subs	r2, #1
   1c3a4:	61e1      	str	r1, [r4, #28]
   1c3a6:	60a3      	str	r3, [r4, #8]
   1c3a8:	60e2      	str	r2, [r4, #12]
   1c3aa:	2a00      	cmp	r2, #0
   1c3ac:	d1e9      	bne.n	1c382 <localtime_r+0x136>
   1c3ae:	6923      	ldr	r3, [r4, #16]
   1c3b0:	3b01      	subs	r3, #1
   1c3b2:	d432      	bmi.n	1c41a <localtime_r+0x1ce>
   1c3b4:	6123      	str	r3, [r4, #16]
   1c3b6:	009b      	lsls	r3, r3, #2
   1c3b8:	58eb      	ldr	r3, [r5, r3]
   1c3ba:	60e3      	str	r3, [r4, #12]
   1c3bc:	f000 fab6 	bl	1c92c <__tz_unlock>
   1c3c0:	4620      	mov	r0, r4
   1c3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c3c6:	2a00      	cmp	r2, #0
   1c3c8:	dac0      	bge.n	1c34c <localtime_r+0x100>
   1c3ca:	3b01      	subs	r3, #1
   1c3cc:	323c      	adds	r2, #60	; 0x3c
   1c3ce:	60a3      	str	r3, [r4, #8]
   1c3d0:	6062      	str	r2, [r4, #4]
   1c3d2:	e7bb      	b.n	1c34c <localtime_r+0x100>
   1c3d4:	2800      	cmp	r0, #0
   1c3d6:	dab3      	bge.n	1c340 <localtime_r+0xf4>
   1c3d8:	3a01      	subs	r2, #1
   1c3da:	303c      	adds	r0, #60	; 0x3c
   1c3dc:	e884 0005 	stmia.w	r4, {r0, r2}
   1c3e0:	e7ae      	b.n	1c340 <localtime_r+0xf4>
   1c3e2:	4b23      	ldr	r3, [pc, #140]	; (1c470 <localtime_r+0x224>)
   1c3e4:	17f5      	asrs	r5, r6, #31
   1c3e6:	fb83 2306 	smull	r2, r3, r3, r6
   1c3ea:	ebc5 1363 	rsb	r3, r5, r3, asr #5
   1c3ee:	2264      	movs	r2, #100	; 0x64
   1c3f0:	fb02 6313 	mls	r3, r2, r3, r6
   1c3f4:	2b00      	cmp	r3, #0
   1c3f6:	f43f af3c 	beq.w	1c272 <localtime_r+0x26>
   1c3fa:	2530      	movs	r5, #48	; 0x30
   1c3fc:	e746      	b.n	1c28c <localtime_r+0x40>
   1c3fe:	f04f 33ff 	mov.w	r3, #4294967295
   1c402:	6223      	str	r3, [r4, #32]
   1c404:	e775      	b.n	1c2f2 <localtime_r+0xa6>
   1c406:	2301      	movs	r3, #1
   1c408:	6223      	str	r3, [r4, #32]
   1c40a:	e763      	b.n	1c2d4 <localtime_r+0x88>
   1c40c:	6963      	ldr	r3, [r4, #20]
   1c40e:	2200      	movs	r2, #0
   1c410:	3301      	adds	r3, #1
   1c412:	6163      	str	r3, [r4, #20]
   1c414:	6122      	str	r2, [r4, #16]
   1c416:	61e2      	str	r2, [r4, #28]
   1c418:	e7b3      	b.n	1c382 <localtime_r+0x136>
   1c41a:	6963      	ldr	r3, [r4, #20]
   1c41c:	1e5a      	subs	r2, r3, #1
   1c41e:	210b      	movs	r1, #11
   1c420:	6162      	str	r2, [r4, #20]
   1c422:	0792      	lsls	r2, r2, #30
   1c424:	6121      	str	r1, [r4, #16]
   1c426:	d013      	beq.n	1c450 <localtime_r+0x204>
   1c428:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   1c42c:	17d3      	asrs	r3, r2, #31
   1c42e:	4910      	ldr	r1, [pc, #64]	; (1c470 <localtime_r+0x224>)
   1c430:	fb81 0102 	smull	r0, r1, r1, r2
   1c434:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
   1c438:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1c43c:	fb01 2313 	mls	r3, r1, r3, r2
   1c440:	fab3 f383 	clz	r3, r3
   1c444:	095b      	lsrs	r3, r3, #5
   1c446:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   1c44a:	61e3      	str	r3, [r4, #28]
   1c44c:	232c      	movs	r3, #44	; 0x2c
   1c44e:	e7b3      	b.n	1c3b8 <localtime_r+0x16c>
   1c450:	4907      	ldr	r1, [pc, #28]	; (1c470 <localtime_r+0x224>)
   1c452:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   1c456:	fb81 3102 	smull	r3, r1, r1, r2
   1c45a:	17d3      	asrs	r3, r2, #31
   1c45c:	ebc3 1161 	rsb	r1, r3, r1, asr #5
   1c460:	2064      	movs	r0, #100	; 0x64
   1c462:	fb00 2111 	mls	r1, r0, r1, r2
   1c466:	2900      	cmp	r1, #0
   1c468:	d0e1      	beq.n	1c42e <localtime_r+0x1e2>
   1c46a:	f240 136d 	movw	r3, #365	; 0x16d
   1c46e:	e7ec      	b.n	1c44a <localtime_r+0x1fe>
   1c470:	51eb851f 	.word	0x51eb851f
   1c474:	00022414 	.word	0x00022414
   1c478:	2000a710 	.word	0x2000a710
   1c47c:	91a2b3c5 	.word	0x91a2b3c5
   1c480:	88888889 	.word	0x88888889

0001c484 <memcpy>:
   1c484:	4684      	mov	ip, r0
   1c486:	ea41 0300 	orr.w	r3, r1, r0
   1c48a:	f013 0303 	ands.w	r3, r3, #3
   1c48e:	d16d      	bne.n	1c56c <memcpy+0xe8>
   1c490:	3a40      	subs	r2, #64	; 0x40
   1c492:	d341      	bcc.n	1c518 <memcpy+0x94>
   1c494:	f851 3b04 	ldr.w	r3, [r1], #4
   1c498:	f840 3b04 	str.w	r3, [r0], #4
   1c49c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4a0:	f840 3b04 	str.w	r3, [r0], #4
   1c4a4:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4a8:	f840 3b04 	str.w	r3, [r0], #4
   1c4ac:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4b0:	f840 3b04 	str.w	r3, [r0], #4
   1c4b4:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4b8:	f840 3b04 	str.w	r3, [r0], #4
   1c4bc:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4c0:	f840 3b04 	str.w	r3, [r0], #4
   1c4c4:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4c8:	f840 3b04 	str.w	r3, [r0], #4
   1c4cc:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4d0:	f840 3b04 	str.w	r3, [r0], #4
   1c4d4:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4d8:	f840 3b04 	str.w	r3, [r0], #4
   1c4dc:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4e0:	f840 3b04 	str.w	r3, [r0], #4
   1c4e4:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4e8:	f840 3b04 	str.w	r3, [r0], #4
   1c4ec:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4f0:	f840 3b04 	str.w	r3, [r0], #4
   1c4f4:	f851 3b04 	ldr.w	r3, [r1], #4
   1c4f8:	f840 3b04 	str.w	r3, [r0], #4
   1c4fc:	f851 3b04 	ldr.w	r3, [r1], #4
   1c500:	f840 3b04 	str.w	r3, [r0], #4
   1c504:	f851 3b04 	ldr.w	r3, [r1], #4
   1c508:	f840 3b04 	str.w	r3, [r0], #4
   1c50c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c510:	f840 3b04 	str.w	r3, [r0], #4
   1c514:	3a40      	subs	r2, #64	; 0x40
   1c516:	d2bd      	bcs.n	1c494 <memcpy+0x10>
   1c518:	3230      	adds	r2, #48	; 0x30
   1c51a:	d311      	bcc.n	1c540 <memcpy+0xbc>
   1c51c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c520:	f840 3b04 	str.w	r3, [r0], #4
   1c524:	f851 3b04 	ldr.w	r3, [r1], #4
   1c528:	f840 3b04 	str.w	r3, [r0], #4
   1c52c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c530:	f840 3b04 	str.w	r3, [r0], #4
   1c534:	f851 3b04 	ldr.w	r3, [r1], #4
   1c538:	f840 3b04 	str.w	r3, [r0], #4
   1c53c:	3a10      	subs	r2, #16
   1c53e:	d2ed      	bcs.n	1c51c <memcpy+0x98>
   1c540:	320c      	adds	r2, #12
   1c542:	d305      	bcc.n	1c550 <memcpy+0xcc>
   1c544:	f851 3b04 	ldr.w	r3, [r1], #4
   1c548:	f840 3b04 	str.w	r3, [r0], #4
   1c54c:	3a04      	subs	r2, #4
   1c54e:	d2f9      	bcs.n	1c544 <memcpy+0xc0>
   1c550:	3204      	adds	r2, #4
   1c552:	d008      	beq.n	1c566 <memcpy+0xe2>
   1c554:	07d2      	lsls	r2, r2, #31
   1c556:	bf1c      	itt	ne
   1c558:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1c55c:	f800 3b01 	strbne.w	r3, [r0], #1
   1c560:	d301      	bcc.n	1c566 <memcpy+0xe2>
   1c562:	880b      	ldrh	r3, [r1, #0]
   1c564:	8003      	strh	r3, [r0, #0]
   1c566:	4660      	mov	r0, ip
   1c568:	4770      	bx	lr
   1c56a:	bf00      	nop
   1c56c:	2a08      	cmp	r2, #8
   1c56e:	d313      	bcc.n	1c598 <memcpy+0x114>
   1c570:	078b      	lsls	r3, r1, #30
   1c572:	d08d      	beq.n	1c490 <memcpy+0xc>
   1c574:	f010 0303 	ands.w	r3, r0, #3
   1c578:	d08a      	beq.n	1c490 <memcpy+0xc>
   1c57a:	f1c3 0304 	rsb	r3, r3, #4
   1c57e:	1ad2      	subs	r2, r2, r3
   1c580:	07db      	lsls	r3, r3, #31
   1c582:	bf1c      	itt	ne
   1c584:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1c588:	f800 3b01 	strbne.w	r3, [r0], #1
   1c58c:	d380      	bcc.n	1c490 <memcpy+0xc>
   1c58e:	f831 3b02 	ldrh.w	r3, [r1], #2
   1c592:	f820 3b02 	strh.w	r3, [r0], #2
   1c596:	e77b      	b.n	1c490 <memcpy+0xc>
   1c598:	3a04      	subs	r2, #4
   1c59a:	d3d9      	bcc.n	1c550 <memcpy+0xcc>
   1c59c:	3a01      	subs	r2, #1
   1c59e:	f811 3b01 	ldrb.w	r3, [r1], #1
   1c5a2:	f800 3b01 	strb.w	r3, [r0], #1
   1c5a6:	d2f9      	bcs.n	1c59c <memcpy+0x118>
   1c5a8:	780b      	ldrb	r3, [r1, #0]
   1c5aa:	7003      	strb	r3, [r0, #0]
   1c5ac:	784b      	ldrb	r3, [r1, #1]
   1c5ae:	7043      	strb	r3, [r0, #1]
   1c5b0:	788b      	ldrb	r3, [r1, #2]
   1c5b2:	7083      	strb	r3, [r0, #2]
   1c5b4:	4660      	mov	r0, ip
   1c5b6:	4770      	bx	lr

0001c5b8 <memset>:
   1c5b8:	b470      	push	{r4, r5, r6}
   1c5ba:	0786      	lsls	r6, r0, #30
   1c5bc:	d046      	beq.n	1c64c <memset+0x94>
   1c5be:	1e54      	subs	r4, r2, #1
   1c5c0:	2a00      	cmp	r2, #0
   1c5c2:	d041      	beq.n	1c648 <memset+0x90>
   1c5c4:	b2ca      	uxtb	r2, r1
   1c5c6:	4603      	mov	r3, r0
   1c5c8:	e002      	b.n	1c5d0 <memset+0x18>
   1c5ca:	f114 34ff 	adds.w	r4, r4, #4294967295
   1c5ce:	d33b      	bcc.n	1c648 <memset+0x90>
   1c5d0:	f803 2b01 	strb.w	r2, [r3], #1
   1c5d4:	079d      	lsls	r5, r3, #30
   1c5d6:	d1f8      	bne.n	1c5ca <memset+0x12>
   1c5d8:	2c03      	cmp	r4, #3
   1c5da:	d92e      	bls.n	1c63a <memset+0x82>
   1c5dc:	b2cd      	uxtb	r5, r1
   1c5de:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1c5e2:	2c0f      	cmp	r4, #15
   1c5e4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1c5e8:	d919      	bls.n	1c61e <memset+0x66>
   1c5ea:	f103 0210 	add.w	r2, r3, #16
   1c5ee:	4626      	mov	r6, r4
   1c5f0:	3e10      	subs	r6, #16
   1c5f2:	2e0f      	cmp	r6, #15
   1c5f4:	f842 5c10 	str.w	r5, [r2, #-16]
   1c5f8:	f842 5c0c 	str.w	r5, [r2, #-12]
   1c5fc:	f842 5c08 	str.w	r5, [r2, #-8]
   1c600:	f842 5c04 	str.w	r5, [r2, #-4]
   1c604:	f102 0210 	add.w	r2, r2, #16
   1c608:	d8f2      	bhi.n	1c5f0 <memset+0x38>
   1c60a:	f1a4 0210 	sub.w	r2, r4, #16
   1c60e:	f022 020f 	bic.w	r2, r2, #15
   1c612:	f004 040f 	and.w	r4, r4, #15
   1c616:	3210      	adds	r2, #16
   1c618:	2c03      	cmp	r4, #3
   1c61a:	4413      	add	r3, r2
   1c61c:	d90d      	bls.n	1c63a <memset+0x82>
   1c61e:	461e      	mov	r6, r3
   1c620:	4622      	mov	r2, r4
   1c622:	3a04      	subs	r2, #4
   1c624:	2a03      	cmp	r2, #3
   1c626:	f846 5b04 	str.w	r5, [r6], #4
   1c62a:	d8fa      	bhi.n	1c622 <memset+0x6a>
   1c62c:	1f22      	subs	r2, r4, #4
   1c62e:	f022 0203 	bic.w	r2, r2, #3
   1c632:	3204      	adds	r2, #4
   1c634:	4413      	add	r3, r2
   1c636:	f004 0403 	and.w	r4, r4, #3
   1c63a:	b12c      	cbz	r4, 1c648 <memset+0x90>
   1c63c:	b2c9      	uxtb	r1, r1
   1c63e:	441c      	add	r4, r3
   1c640:	f803 1b01 	strb.w	r1, [r3], #1
   1c644:	429c      	cmp	r4, r3
   1c646:	d1fb      	bne.n	1c640 <memset+0x88>
   1c648:	bc70      	pop	{r4, r5, r6}
   1c64a:	4770      	bx	lr
   1c64c:	4614      	mov	r4, r2
   1c64e:	4603      	mov	r3, r0
   1c650:	e7c2      	b.n	1c5d8 <memset+0x20>
   1c652:	bf00      	nop

0001c654 <rand>:
   1c654:	b410      	push	{r4}
   1c656:	4b0c      	ldr	r3, [pc, #48]	; (1c688 <rand+0x34>)
   1c658:	480c      	ldr	r0, [pc, #48]	; (1c68c <rand+0x38>)
   1c65a:	6819      	ldr	r1, [r3, #0]
   1c65c:	4c0c      	ldr	r4, [pc, #48]	; (1c690 <rand+0x3c>)
   1c65e:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   1c662:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   1c666:	fb00 f002 	mul.w	r0, r0, r2
   1c66a:	fb04 0003 	mla	r0, r4, r3, r0
   1c66e:	fba2 2304 	umull	r2, r3, r2, r4
   1c672:	4403      	add	r3, r0
   1c674:	3201      	adds	r2, #1
   1c676:	f143 0300 	adc.w	r3, r3, #0
   1c67a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   1c67e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1c682:	bc10      	pop	{r4}
   1c684:	4770      	bx	lr
   1c686:	bf00      	nop
   1c688:	20000248 	.word	0x20000248
   1c68c:	5851f42d 	.word	0x5851f42d
   1c690:	4c957f2d 	.word	0x4c957f2d
	...

0001c6c0 <strlen>:
   1c6c0:	f890 f000 	pld	[r0]
   1c6c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1c6c8:	f020 0107 	bic.w	r1, r0, #7
   1c6cc:	f06f 0c00 	mvn.w	ip, #0
   1c6d0:	f010 0407 	ands.w	r4, r0, #7
   1c6d4:	f891 f020 	pld	[r1, #32]
   1c6d8:	f040 8049 	bne.w	1c76e <strlen+0xae>
   1c6dc:	f04f 0400 	mov.w	r4, #0
   1c6e0:	f06f 0007 	mvn.w	r0, #7
   1c6e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c6e8:	f891 f040 	pld	[r1, #64]	; 0x40
   1c6ec:	f100 0008 	add.w	r0, r0, #8
   1c6f0:	fa82 f24c 	uadd8	r2, r2, ip
   1c6f4:	faa4 f28c 	sel	r2, r4, ip
   1c6f8:	fa83 f34c 	uadd8	r3, r3, ip
   1c6fc:	faa2 f38c 	sel	r3, r2, ip
   1c700:	bb4b      	cbnz	r3, 1c756 <strlen+0x96>
   1c702:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1c706:	fa82 f24c 	uadd8	r2, r2, ip
   1c70a:	f100 0008 	add.w	r0, r0, #8
   1c70e:	faa4 f28c 	sel	r2, r4, ip
   1c712:	fa83 f34c 	uadd8	r3, r3, ip
   1c716:	faa2 f38c 	sel	r3, r2, ip
   1c71a:	b9e3      	cbnz	r3, 1c756 <strlen+0x96>
   1c71c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1c720:	fa82 f24c 	uadd8	r2, r2, ip
   1c724:	f100 0008 	add.w	r0, r0, #8
   1c728:	faa4 f28c 	sel	r2, r4, ip
   1c72c:	fa83 f34c 	uadd8	r3, r3, ip
   1c730:	faa2 f38c 	sel	r3, r2, ip
   1c734:	b97b      	cbnz	r3, 1c756 <strlen+0x96>
   1c736:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1c73a:	f101 0120 	add.w	r1, r1, #32
   1c73e:	fa82 f24c 	uadd8	r2, r2, ip
   1c742:	f100 0008 	add.w	r0, r0, #8
   1c746:	faa4 f28c 	sel	r2, r4, ip
   1c74a:	fa83 f34c 	uadd8	r3, r3, ip
   1c74e:	faa2 f38c 	sel	r3, r2, ip
   1c752:	2b00      	cmp	r3, #0
   1c754:	d0c6      	beq.n	1c6e4 <strlen+0x24>
   1c756:	2a00      	cmp	r2, #0
   1c758:	bf04      	itt	eq
   1c75a:	3004      	addeq	r0, #4
   1c75c:	461a      	moveq	r2, r3
   1c75e:	ba12      	rev	r2, r2
   1c760:	fab2 f282 	clz	r2, r2
   1c764:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1c768:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1c76c:	4770      	bx	lr
   1c76e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c772:	f004 0503 	and.w	r5, r4, #3
   1c776:	f1c4 0000 	rsb	r0, r4, #0
   1c77a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1c77e:	f014 0f04 	tst.w	r4, #4
   1c782:	f891 f040 	pld	[r1, #64]	; 0x40
   1c786:	fa0c f505 	lsl.w	r5, ip, r5
   1c78a:	ea62 0205 	orn	r2, r2, r5
   1c78e:	bf1c      	itt	ne
   1c790:	ea63 0305 	ornne	r3, r3, r5
   1c794:	4662      	movne	r2, ip
   1c796:	f04f 0400 	mov.w	r4, #0
   1c79a:	e7a9      	b.n	1c6f0 <strlen+0x30>

0001c79c <__tzcalc_limits>:
   1c79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7a0:	b083      	sub	sp, #12
   1c7a2:	4605      	mov	r5, r0
   1c7a4:	f000 fb64 	bl	1ce70 <__gettzinfo>
   1c7a8:	f240 73b1 	movw	r3, #1969	; 0x7b1
   1c7ac:	429d      	cmp	r5, r3
   1c7ae:	f340 8093 	ble.w	1c8d8 <__tzcalc_limits+0x13c>
   1c7b2:	4c57      	ldr	r4, [pc, #348]	; (1c910 <__tzcalc_limits+0x174>)
   1c7b4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1c91c <__tzcalc_limits+0x180>
   1c7b8:	6045      	str	r5, [r0, #4]
   1c7ba:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   1c7be:	18ee      	adds	r6, r5, r3
   1c7c0:	f2a5 726d 	subw	r2, r5, #1901	; 0x76d
   1c7c4:	fb84 3102 	smull	r3, r1, r4, r2
   1c7c8:	10b7      	asrs	r7, r6, #2
   1c7ca:	f240 1e6d 	movw	lr, #365	; 0x16d
   1c7ce:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   1c7d2:	f2a5 76b2 	subw	r6, r5, #1970	; 0x7b2
   1c7d6:	17d2      	asrs	r2, r2, #31
   1c7d8:	eb05 030c 	add.w	r3, r5, ip
   1c7dc:	fb0e 7606 	mla	r6, lr, r6, r7
   1c7e0:	eba2 1261 	sub.w	r2, r2, r1, asr #5
   1c7e4:	17ef      	asrs	r7, r5, #31
   1c7e6:	fb84 c105 	smull	ip, r1, r4, r5
   1c7ea:	4416      	add	r6, r2
   1c7ec:	fb84 e403 	smull	lr, r4, r4, r3
   1c7f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1c7f4:	ebc7 1ee1 	rsb	lr, r7, r1, asr #7
   1c7f8:	17db      	asrs	r3, r3, #31
   1c7fa:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
   1c7fe:	fb02 5e1e 	mls	lr, r2, lr, r5
   1c802:	ebc7 1761 	rsb	r7, r7, r1, asr #5
   1c806:	2264      	movs	r2, #100	; 0x64
   1c808:	441e      	add	r6, r3
   1c80a:	f1be 0f00 	cmp.w	lr, #0
   1c80e:	bf0c      	ite	eq
   1c810:	2330      	moveq	r3, #48	; 0x30
   1c812:	2300      	movne	r3, #0
   1c814:	fb02 5717 	mls	r7, r2, r7, r5
   1c818:	9301      	str	r3, [sp, #4]
   1c81a:	f005 0503 	and.w	r5, r5, #3
   1c81e:	4604      	mov	r4, r0
   1c820:	f100 0c38 	add.w	ip, r0, #56	; 0x38
   1c824:	7a23      	ldrb	r3, [r4, #8]
   1c826:	2b4a      	cmp	r3, #74	; 0x4a
   1c828:	d05a      	beq.n	1c8e0 <__tzcalc_limits+0x144>
   1c82a:	2b44      	cmp	r3, #68	; 0x44
   1c82c:	d068      	beq.n	1c900 <__tzcalc_limits+0x164>
   1c82e:	2d00      	cmp	r5, #0
   1c830:	d04b      	beq.n	1c8ca <__tzcalc_limits+0x12e>
   1c832:	f8dd 9004 	ldr.w	r9, [sp, #4]
   1c836:	68e3      	ldr	r3, [r4, #12]
   1c838:	4a36      	ldr	r2, [pc, #216]	; (1c914 <__tzcalc_limits+0x178>)
   1c83a:	2b01      	cmp	r3, #1
   1c83c:	4491      	add	r9, r2
   1c83e:	dd62      	ble.n	1c906 <__tzcalc_limits+0x16a>
   1c840:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
   1c844:	f1ab 0b02 	sub.w	fp, fp, #2
   1c848:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   1c84c:	eb09 0a0b 	add.w	sl, r9, fp
   1c850:	f1a9 0304 	sub.w	r3, r9, #4
   1c854:	4632      	mov	r2, r6
   1c856:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1c85a:	459a      	cmp	sl, r3
   1c85c:	440a      	add	r2, r1
   1c85e:	d1fa      	bne.n	1c856 <__tzcalc_limits+0xba>
   1c860:	f10b 0b04 	add.w	fp, fp, #4
   1c864:	4b2c      	ldr	r3, [pc, #176]	; (1c918 <__tzcalc_limits+0x17c>)
   1c866:	f859 900b 	ldr.w	r9, [r9, fp]
   1c86a:	1d11      	adds	r1, r2, #4
   1c86c:	fb83 a301 	smull	sl, r3, r3, r1
   1c870:	440b      	add	r3, r1
   1c872:	ea4f 7ae1 	mov.w	sl, r1, asr #31
   1c876:	ebca 0aa3 	rsb	sl, sl, r3, asr #2
   1c87a:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
   1c87e:	6963      	ldr	r3, [r4, #20]
   1c880:	eba1 010a 	sub.w	r1, r1, sl
   1c884:	1a59      	subs	r1, r3, r1
   1c886:	6923      	ldr	r3, [r4, #16]
   1c888:	f103 33ff 	add.w	r3, r3, #4294967295
   1c88c:	bf48      	it	mi
   1c88e:	3107      	addmi	r1, #7
   1c890:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1c894:	440b      	add	r3, r1
   1c896:	454b      	cmp	r3, r9
   1c898:	db02      	blt.n	1c8a0 <__tzcalc_limits+0x104>
   1c89a:	3b07      	subs	r3, #7
   1c89c:	454b      	cmp	r3, r9
   1c89e:	dafc      	bge.n	1c89a <__tzcalc_limits+0xfe>
   1c8a0:	441a      	add	r2, r3
   1c8a2:	69a1      	ldr	r1, [r4, #24]
   1c8a4:	6a23      	ldr	r3, [r4, #32]
   1c8a6:	fb08 1102 	mla	r1, r8, r2, r1
   1c8aa:	440b      	add	r3, r1
   1c8ac:	f844 3f1c 	str.w	r3, [r4, #28]!
   1c8b0:	45a4      	cmp	ip, r4
   1c8b2:	d1b7      	bne.n	1c824 <__tzcalc_limits+0x88>
   1c8b4:	69c3      	ldr	r3, [r0, #28]
   1c8b6:	6b82      	ldr	r2, [r0, #56]	; 0x38
   1c8b8:	4293      	cmp	r3, r2
   1c8ba:	bfac      	ite	ge
   1c8bc:	2300      	movge	r3, #0
   1c8be:	2301      	movlt	r3, #1
   1c8c0:	6003      	str	r3, [r0, #0]
   1c8c2:	2001      	movs	r0, #1
   1c8c4:	b003      	add	sp, #12
   1c8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8ca:	9b01      	ldr	r3, [sp, #4]
   1c8cc:	2f00      	cmp	r7, #0
   1c8ce:	bf0c      	ite	eq
   1c8d0:	4699      	moveq	r9, r3
   1c8d2:	f04f 0930 	movne.w	r9, #48	; 0x30
   1c8d6:	e7ae      	b.n	1c836 <__tzcalc_limits+0x9a>
   1c8d8:	2000      	movs	r0, #0
   1c8da:	b003      	add	sp, #12
   1c8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8e0:	6962      	ldr	r2, [r4, #20]
   1c8e2:	18b1      	adds	r1, r6, r2
   1c8e4:	b93d      	cbnz	r5, 1c8f6 <__tzcalc_limits+0x15a>
   1c8e6:	b137      	cbz	r7, 1c8f6 <__tzcalc_limits+0x15a>
   1c8e8:	2a3b      	cmp	r2, #59	; 0x3b
   1c8ea:	bfd4      	ite	le
   1c8ec:	2200      	movle	r2, #0
   1c8ee:	2201      	movgt	r2, #1
   1c8f0:	440a      	add	r2, r1
   1c8f2:	3a01      	subs	r2, #1
   1c8f4:	e7d5      	b.n	1c8a2 <__tzcalc_limits+0x106>
   1c8f6:	f1be 0f00 	cmp.w	lr, #0
   1c8fa:	d0f5      	beq.n	1c8e8 <__tzcalc_limits+0x14c>
   1c8fc:	2200      	movs	r2, #0
   1c8fe:	e7f7      	b.n	1c8f0 <__tzcalc_limits+0x154>
   1c900:	6962      	ldr	r2, [r4, #20]
   1c902:	4432      	add	r2, r6
   1c904:	e7cd      	b.n	1c8a2 <__tzcalc_limits+0x106>
   1c906:	4632      	mov	r2, r6
   1c908:	f04f 0b00 	mov.w	fp, #0
   1c90c:	e7aa      	b.n	1c864 <__tzcalc_limits+0xc8>
   1c90e:	bf00      	nop
   1c910:	51eb851f 	.word	0x51eb851f
   1c914:	00022414 	.word	0x00022414
   1c918:	92492493 	.word	0x92492493
   1c91c:	00015180 	.word	0x00015180

0001c920 <__tz_lock>:
   1c920:	4801      	ldr	r0, [pc, #4]	; (1c928 <__tz_lock+0x8>)
   1c922:	f000 bb93 	b.w	1d04c <__retarget_lock_acquire>
   1c926:	bf00      	nop
   1c928:	2000aa00 	.word	0x2000aa00

0001c92c <__tz_unlock>:
   1c92c:	4801      	ldr	r0, [pc, #4]	; (1c934 <__tz_unlock+0x8>)
   1c92e:	f000 bb91 	b.w	1d054 <__retarget_lock_release>
   1c932:	bf00      	nop
   1c934:	2000aa00 	.word	0x2000aa00

0001c938 <_tzset_unlocked>:
   1c938:	4b01      	ldr	r3, [pc, #4]	; (1c940 <_tzset_unlocked+0x8>)
   1c93a:	6818      	ldr	r0, [r3, #0]
   1c93c:	f000 b802 	b.w	1c944 <_tzset_unlocked_r>
   1c940:	20000248 	.word	0x20000248

0001c944 <_tzset_unlocked_r>:
   1c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c948:	b08b      	sub	sp, #44	; 0x2c
   1c94a:	4607      	mov	r7, r0
   1c94c:	f000 fa90 	bl	1ce70 <__gettzinfo>
   1c950:	49bb      	ldr	r1, [pc, #748]	; (1cc40 <_tzset_unlocked_r+0x2fc>)
   1c952:	4dbc      	ldr	r5, [pc, #752]	; (1cc44 <_tzset_unlocked_r+0x300>)
   1c954:	4606      	mov	r6, r0
   1c956:	4638      	mov	r0, r7
   1c958:	f000 fa82 	bl	1ce60 <_getenv_r>
   1c95c:	4604      	mov	r4, r0
   1c95e:	2800      	cmp	r0, #0
   1c960:	f000 80f7 	beq.w	1cb52 <_tzset_unlocked_r+0x20e>
   1c964:	6829      	ldr	r1, [r5, #0]
   1c966:	b131      	cbz	r1, 1c976 <_tzset_unlocked_r+0x32>
   1c968:	f000 fefe 	bl	1d768 <strcmp>
   1c96c:	b910      	cbnz	r0, 1c974 <_tzset_unlocked_r+0x30>
   1c96e:	b00b      	add	sp, #44	; 0x2c
   1c970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c974:	6829      	ldr	r1, [r5, #0]
   1c976:	4608      	mov	r0, r1
   1c978:	f7f7 ffbc 	bl	148f4 <free>
   1c97c:	4620      	mov	r0, r4
   1c97e:	f7ff fe9f 	bl	1c6c0 <strlen>
   1c982:	1c41      	adds	r1, r0, #1
   1c984:	4638      	mov	r0, r7
   1c986:	f000 fb69 	bl	1d05c <_malloc_r>
   1c98a:	6028      	str	r0, [r5, #0]
   1c98c:	b110      	cbz	r0, 1c994 <_tzset_unlocked_r+0x50>
   1c98e:	4621      	mov	r1, r4
   1c990:	f001 f854 	bl	1da3c <strcpy>
   1c994:	7823      	ldrb	r3, [r4, #0]
   1c996:	4aac      	ldr	r2, [pc, #688]	; (1cc48 <_tzset_unlocked_r+0x304>)
   1c998:	49ac      	ldr	r1, [pc, #688]	; (1cc4c <_tzset_unlocked_r+0x308>)
   1c99a:	2b3a      	cmp	r3, #58	; 0x3a
   1c99c:	bf08      	it	eq
   1c99e:	3401      	addeq	r4, #1
   1c9a0:	ad08      	add	r5, sp, #32
   1c9a2:	462b      	mov	r3, r5
   1c9a4:	4620      	mov	r0, r4
   1c9a6:	f000 fe9f 	bl	1d6e8 <siscanf>
   1c9aa:	2800      	cmp	r0, #0
   1c9ac:	dddf      	ble.n	1c96e <_tzset_unlocked_r+0x2a>
   1c9ae:	9b08      	ldr	r3, [sp, #32]
   1c9b0:	5ce2      	ldrb	r2, [r4, r3]
   1c9b2:	2a2d      	cmp	r2, #45	; 0x2d
   1c9b4:	441c      	add	r4, r3
   1c9b6:	f000 80c8 	beq.w	1cb4a <_tzset_unlocked_r+0x206>
   1c9ba:	2a2b      	cmp	r2, #43	; 0x2b
   1c9bc:	bf08      	it	eq
   1c9be:	3401      	addeq	r4, #1
   1c9c0:	f04f 0801 	mov.w	r8, #1
   1c9c4:	ab06      	add	r3, sp, #24
   1c9c6:	9302      	str	r3, [sp, #8]
   1c9c8:	f10d 0316 	add.w	r3, sp, #22
   1c9cc:	2700      	movs	r7, #0
   1c9ce:	9300      	str	r3, [sp, #0]
   1c9d0:	9503      	str	r5, [sp, #12]
   1c9d2:	9501      	str	r5, [sp, #4]
   1c9d4:	aa05      	add	r2, sp, #20
   1c9d6:	462b      	mov	r3, r5
   1c9d8:	499d      	ldr	r1, [pc, #628]	; (1cc50 <_tzset_unlocked_r+0x30c>)
   1c9da:	f8ad 7016 	strh.w	r7, [sp, #22]
   1c9de:	4620      	mov	r0, r4
   1c9e0:	f8ad 7018 	strh.w	r7, [sp, #24]
   1c9e4:	f000 fe80 	bl	1d6e8 <siscanf>
   1c9e8:	42b8      	cmp	r0, r7
   1c9ea:	ddc0      	ble.n	1c96e <_tzset_unlocked_r+0x2a>
   1c9ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1c9f0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1c9f4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1c9f8:	9808      	ldr	r0, [sp, #32]
   1c9fa:	f8df a26c 	ldr.w	sl, [pc, #620]	; 1cc68 <_tzset_unlocked_r+0x324>
   1c9fe:	f8df 925c 	ldr.w	r9, [pc, #604]	; 1cc5c <_tzset_unlocked_r+0x318>
   1ca02:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1ca06:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1ca0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1ca0e:	fb01 3302 	mla	r3, r1, r2, r3
   1ca12:	fb08 f303 	mul.w	r3, r8, r3
   1ca16:	6233      	str	r3, [r6, #32]
   1ca18:	4404      	add	r4, r0
   1ca1a:	4b8b      	ldr	r3, [pc, #556]	; (1cc48 <_tzset_unlocked_r+0x304>)
   1ca1c:	f8c9 3000 	str.w	r3, [r9]
   1ca20:	4620      	mov	r0, r4
   1ca22:	4652      	mov	r2, sl
   1ca24:	4989      	ldr	r1, [pc, #548]	; (1cc4c <_tzset_unlocked_r+0x308>)
   1ca26:	462b      	mov	r3, r5
   1ca28:	f000 fe5e 	bl	1d6e8 <siscanf>
   1ca2c:	42b8      	cmp	r0, r7
   1ca2e:	f340 8082 	ble.w	1cb36 <_tzset_unlocked_r+0x1f2>
   1ca32:	9808      	ldr	r0, [sp, #32]
   1ca34:	f8c9 a004 	str.w	sl, [r9, #4]
   1ca38:	5c23      	ldrb	r3, [r4, r0]
   1ca3a:	2b2d      	cmp	r3, #45	; 0x2d
   1ca3c:	4404      	add	r4, r0
   1ca3e:	f000 8095 	beq.w	1cb6c <_tzset_unlocked_r+0x228>
   1ca42:	2b2b      	cmp	r3, #43	; 0x2b
   1ca44:	bf08      	it	eq
   1ca46:	3401      	addeq	r4, #1
   1ca48:	f04f 0801 	mov.w	r8, #1
   1ca4c:	ab06      	add	r3, sp, #24
   1ca4e:	9302      	str	r3, [sp, #8]
   1ca50:	f10d 0316 	add.w	r3, sp, #22
   1ca54:	2700      	movs	r7, #0
   1ca56:	9300      	str	r3, [sp, #0]
   1ca58:	9503      	str	r5, [sp, #12]
   1ca5a:	9501      	str	r5, [sp, #4]
   1ca5c:	462b      	mov	r3, r5
   1ca5e:	aa05      	add	r2, sp, #20
   1ca60:	497b      	ldr	r1, [pc, #492]	; (1cc50 <_tzset_unlocked_r+0x30c>)
   1ca62:	f8ad 7014 	strh.w	r7, [sp, #20]
   1ca66:	4620      	mov	r0, r4
   1ca68:	f8ad 7016 	strh.w	r7, [sp, #22]
   1ca6c:	f8ad 7018 	strh.w	r7, [sp, #24]
   1ca70:	9708      	str	r7, [sp, #32]
   1ca72:	f000 fe39 	bl	1d6e8 <siscanf>
   1ca76:	42b8      	cmp	r0, r7
   1ca78:	dd7c      	ble.n	1cb74 <_tzset_unlocked_r+0x230>
   1ca7a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1ca7e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1ca82:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1ca86:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1ca8a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1ca8e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1ca92:	fb01 3302 	mla	r3, r1, r2, r3
   1ca96:	fb08 f303 	mul.w	r3, r8, r3
   1ca9a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1ca9c:	9b08      	ldr	r3, [sp, #32]
   1ca9e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 1cc6c <_tzset_unlocked_r+0x328>
   1caa2:	441c      	add	r4, r3
   1caa4:	46b0      	mov	r8, r6
   1caa6:	f04f 0a00 	mov.w	sl, #0
   1caaa:	7827      	ldrb	r7, [r4, #0]
   1caac:	2f2c      	cmp	r7, #44	; 0x2c
   1caae:	bf04      	itt	eq
   1cab0:	7867      	ldrbeq	r7, [r4, #1]
   1cab2:	3401      	addeq	r4, #1
   1cab4:	2f4d      	cmp	r7, #77	; 0x4d
   1cab6:	d062      	beq.n	1cb7e <_tzset_unlocked_r+0x23a>
   1cab8:	2f4a      	cmp	r7, #74	; 0x4a
   1caba:	bf08      	it	eq
   1cabc:	3401      	addeq	r4, #1
   1cabe:	f04f 020a 	mov.w	r2, #10
   1cac2:	a909      	add	r1, sp, #36	; 0x24
   1cac4:	4620      	mov	r0, r4
   1cac6:	bf18      	it	ne
   1cac8:	2744      	movne	r7, #68	; 0x44
   1caca:	f001 f91d 	bl	1dd08 <strtoul>
   1cace:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1cad2:	f8ad 001e 	strh.w	r0, [sp, #30]
   1cad6:	454c      	cmp	r4, r9
   1cad8:	f000 809c 	beq.w	1cc14 <_tzset_unlocked_r+0x2d0>
   1cadc:	b280      	uxth	r0, r0
   1cade:	f8c8 0014 	str.w	r0, [r8, #20]
   1cae2:	f888 7008 	strb.w	r7, [r8, #8]
   1cae6:	2400      	movs	r4, #0
   1cae8:	2302      	movs	r3, #2
   1caea:	f8ad 3014 	strh.w	r3, [sp, #20]
   1caee:	f8ad 4016 	strh.w	r4, [sp, #22]
   1caf2:	f8ad 4018 	strh.w	r4, [sp, #24]
   1caf6:	9408      	str	r4, [sp, #32]
   1caf8:	f899 3000 	ldrb.w	r3, [r9]
   1cafc:	2b2f      	cmp	r3, #47	; 0x2f
   1cafe:	d06c      	beq.n	1cbda <_tzset_unlocked_r+0x296>
   1cb00:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   1cb04:	f10a 0a01 	add.w	sl, sl, #1
   1cb08:	f1ba 0f02 	cmp.w	sl, #2
   1cb0c:	f8c8 3018 	str.w	r3, [r8, #24]
   1cb10:	444c      	add	r4, r9
   1cb12:	f108 081c 	add.w	r8, r8, #28
   1cb16:	d1c8      	bne.n	1caaa <_tzset_unlocked_r+0x166>
   1cb18:	6870      	ldr	r0, [r6, #4]
   1cb1a:	f7ff fe3f 	bl	1c79c <__tzcalc_limits>
   1cb1e:	6a32      	ldr	r2, [r6, #32]
   1cb20:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1cb22:	484c      	ldr	r0, [pc, #304]	; (1cc54 <_tzset_unlocked_r+0x310>)
   1cb24:	494c      	ldr	r1, [pc, #304]	; (1cc58 <_tzset_unlocked_r+0x314>)
   1cb26:	1a9b      	subs	r3, r3, r2
   1cb28:	bf18      	it	ne
   1cb2a:	2301      	movne	r3, #1
   1cb2c:	6003      	str	r3, [r0, #0]
   1cb2e:	600a      	str	r2, [r1, #0]
   1cb30:	b00b      	add	sp, #44	; 0x2c
   1cb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb36:	4948      	ldr	r1, [pc, #288]	; (1cc58 <_tzset_unlocked_r+0x314>)
   1cb38:	4a46      	ldr	r2, [pc, #280]	; (1cc54 <_tzset_unlocked_r+0x310>)
   1cb3a:	6a30      	ldr	r0, [r6, #32]
   1cb3c:	f8d9 3000 	ldr.w	r3, [r9]
   1cb40:	6008      	str	r0, [r1, #0]
   1cb42:	6017      	str	r7, [r2, #0]
   1cb44:	f8c9 3004 	str.w	r3, [r9, #4]
   1cb48:	e711      	b.n	1c96e <_tzset_unlocked_r+0x2a>
   1cb4a:	3401      	adds	r4, #1
   1cb4c:	f04f 38ff 	mov.w	r8, #4294967295
   1cb50:	e738      	b.n	1c9c4 <_tzset_unlocked_r+0x80>
   1cb52:	4b42      	ldr	r3, [pc, #264]	; (1cc5c <_tzset_unlocked_r+0x318>)
   1cb54:	493f      	ldr	r1, [pc, #252]	; (1cc54 <_tzset_unlocked_r+0x310>)
   1cb56:	4e40      	ldr	r6, [pc, #256]	; (1cc58 <_tzset_unlocked_r+0x314>)
   1cb58:	4a41      	ldr	r2, [pc, #260]	; (1cc60 <_tzset_unlocked_r+0x31c>)
   1cb5a:	6828      	ldr	r0, [r5, #0]
   1cb5c:	6034      	str	r4, [r6, #0]
   1cb5e:	600c      	str	r4, [r1, #0]
   1cb60:	601a      	str	r2, [r3, #0]
   1cb62:	605a      	str	r2, [r3, #4]
   1cb64:	f7f7 fec6 	bl	148f4 <free>
   1cb68:	602c      	str	r4, [r5, #0]
   1cb6a:	e700      	b.n	1c96e <_tzset_unlocked_r+0x2a>
   1cb6c:	3401      	adds	r4, #1
   1cb6e:	f04f 38ff 	mov.w	r8, #4294967295
   1cb72:	e76b      	b.n	1ca4c <_tzset_unlocked_r+0x108>
   1cb74:	6a33      	ldr	r3, [r6, #32]
   1cb76:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   1cb7a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1cb7c:	e78e      	b.n	1ca9c <_tzset_unlocked_r+0x158>
   1cb7e:	f10d 021e 	add.w	r2, sp, #30
   1cb82:	ab07      	add	r3, sp, #28
   1cb84:	9202      	str	r2, [sp, #8]
   1cb86:	9300      	str	r3, [sp, #0]
   1cb88:	9503      	str	r5, [sp, #12]
   1cb8a:	9501      	str	r5, [sp, #4]
   1cb8c:	462b      	mov	r3, r5
   1cb8e:	f10d 021a 	add.w	r2, sp, #26
   1cb92:	4659      	mov	r1, fp
   1cb94:	4620      	mov	r0, r4
   1cb96:	f000 fda7 	bl	1d6e8 <siscanf>
   1cb9a:	2803      	cmp	r0, #3
   1cb9c:	f47f aee7 	bne.w	1c96e <_tzset_unlocked_r+0x2a>
   1cba0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1cba4:	1e5a      	subs	r2, r3, #1
   1cba6:	2a0b      	cmp	r2, #11
   1cba8:	f63f aee1 	bhi.w	1c96e <_tzset_unlocked_r+0x2a>
   1cbac:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1cbb0:	1e51      	subs	r1, r2, #1
   1cbb2:	2904      	cmp	r1, #4
   1cbb4:	f63f aedb 	bhi.w	1c96e <_tzset_unlocked_r+0x2a>
   1cbb8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   1cbbc:	2906      	cmp	r1, #6
   1cbbe:	f63f aed6 	bhi.w	1c96e <_tzset_unlocked_r+0x2a>
   1cbc2:	f888 7008 	strb.w	r7, [r8, #8]
   1cbc6:	f8c8 300c 	str.w	r3, [r8, #12]
   1cbca:	f8c8 2010 	str.w	r2, [r8, #16]
   1cbce:	f8c8 1014 	str.w	r1, [r8, #20]
   1cbd2:	9b08      	ldr	r3, [sp, #32]
   1cbd4:	eb04 0903 	add.w	r9, r4, r3
   1cbd8:	e785      	b.n	1cae6 <_tzset_unlocked_r+0x1a2>
   1cbda:	ab06      	add	r3, sp, #24
   1cbdc:	9302      	str	r3, [sp, #8]
   1cbde:	f10d 0316 	add.w	r3, sp, #22
   1cbe2:	9300      	str	r3, [sp, #0]
   1cbe4:	aa05      	add	r2, sp, #20
   1cbe6:	462b      	mov	r3, r5
   1cbe8:	491e      	ldr	r1, [pc, #120]	; (1cc64 <_tzset_unlocked_r+0x320>)
   1cbea:	9503      	str	r5, [sp, #12]
   1cbec:	9501      	str	r5, [sp, #4]
   1cbee:	4648      	mov	r0, r9
   1cbf0:	f000 fd7a 	bl	1d6e8 <siscanf>
   1cbf4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1cbf8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1cbfc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1cc00:	9c08      	ldr	r4, [sp, #32]
   1cc02:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   1cc06:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1cc0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1cc0e:	fb01 2303 	mla	r3, r1, r3, r2
   1cc12:	e777      	b.n	1cb04 <_tzset_unlocked_r+0x1c0>
   1cc14:	f1ba 0f00 	cmp.w	sl, #0
   1cc18:	d009      	beq.n	1cc2e <_tzset_unlocked_r+0x2ea>
   1cc1a:	224d      	movs	r2, #77	; 0x4d
   1cc1c:	230b      	movs	r3, #11
   1cc1e:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
   1cc22:	62b3      	str	r3, [r6, #40]	; 0x28
   1cc24:	2201      	movs	r2, #1
   1cc26:	2300      	movs	r3, #0
   1cc28:	62f2      	str	r2, [r6, #44]	; 0x2c
   1cc2a:	6333      	str	r3, [r6, #48]	; 0x30
   1cc2c:	e75b      	b.n	1cae6 <_tzset_unlocked_r+0x1a2>
   1cc2e:	234d      	movs	r3, #77	; 0x4d
   1cc30:	2203      	movs	r2, #3
   1cc32:	7233      	strb	r3, [r6, #8]
   1cc34:	2302      	movs	r3, #2
   1cc36:	f8c6 a014 	str.w	sl, [r6, #20]
   1cc3a:	60f2      	str	r2, [r6, #12]
   1cc3c:	6133      	str	r3, [r6, #16]
   1cc3e:	e752      	b.n	1cae6 <_tzset_unlocked_r+0x1a2>
   1cc40:	00022474 	.word	0x00022474
   1cc44:	2000a70c 	.word	0x2000a70c
   1cc48:	2000a700 	.word	0x2000a700
   1cc4c:	0002247c 	.word	0x0002247c
   1cc50:	0002248c 	.word	0x0002248c
   1cc54:	2000a710 	.word	0x2000a710
   1cc58:	2000a714 	.word	0x2000a714
   1cc5c:	20000678 	.word	0x20000678
   1cc60:	00022478 	.word	0x00022478
   1cc64:	000224b4 	.word	0x000224b4
   1cc68:	2000a6f4 	.word	0x2000a6f4
   1cc6c:	000224a0 	.word	0x000224a0

0001cc70 <__register_exitproc>:
   1cc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cc74:	4d2c      	ldr	r5, [pc, #176]	; (1cd28 <__register_exitproc+0xb8>)
   1cc76:	4606      	mov	r6, r0
   1cc78:	6828      	ldr	r0, [r5, #0]
   1cc7a:	4698      	mov	r8, r3
   1cc7c:	460f      	mov	r7, r1
   1cc7e:	4691      	mov	r9, r2
   1cc80:	f000 f9e6 	bl	1d050 <__retarget_lock_acquire_recursive>
   1cc84:	4b29      	ldr	r3, [pc, #164]	; (1cd2c <__register_exitproc+0xbc>)
   1cc86:	681c      	ldr	r4, [r3, #0]
   1cc88:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1cc8c:	2b00      	cmp	r3, #0
   1cc8e:	d03e      	beq.n	1cd0e <__register_exitproc+0x9e>
   1cc90:	685a      	ldr	r2, [r3, #4]
   1cc92:	2a1f      	cmp	r2, #31
   1cc94:	dc1c      	bgt.n	1ccd0 <__register_exitproc+0x60>
   1cc96:	f102 0e01 	add.w	lr, r2, #1
   1cc9a:	b176      	cbz	r6, 1ccba <__register_exitproc+0x4a>
   1cc9c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1cca0:	2401      	movs	r4, #1
   1cca2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1cca6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1ccaa:	4094      	lsls	r4, r2
   1ccac:	4320      	orrs	r0, r4
   1ccae:	2e02      	cmp	r6, #2
   1ccb0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1ccb4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1ccb8:	d023      	beq.n	1cd02 <__register_exitproc+0x92>
   1ccba:	3202      	adds	r2, #2
   1ccbc:	f8c3 e004 	str.w	lr, [r3, #4]
   1ccc0:	6828      	ldr	r0, [r5, #0]
   1ccc2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1ccc6:	f000 f9c7 	bl	1d058 <__retarget_lock_release_recursive>
   1ccca:	2000      	movs	r0, #0
   1cccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ccd0:	4b17      	ldr	r3, [pc, #92]	; (1cd30 <__register_exitproc+0xc0>)
   1ccd2:	b30b      	cbz	r3, 1cd18 <__register_exitproc+0xa8>
   1ccd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1ccd8:	f7f7 fe02 	bl	148e0 <malloc>
   1ccdc:	4603      	mov	r3, r0
   1ccde:	b1d8      	cbz	r0, 1cd18 <__register_exitproc+0xa8>
   1cce0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1cce4:	6002      	str	r2, [r0, #0]
   1cce6:	2100      	movs	r1, #0
   1cce8:	6041      	str	r1, [r0, #4]
   1ccea:	460a      	mov	r2, r1
   1ccec:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1ccf0:	f04f 0e01 	mov.w	lr, #1
   1ccf4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1ccf8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1ccfc:	2e00      	cmp	r6, #0
   1ccfe:	d0dc      	beq.n	1ccba <__register_exitproc+0x4a>
   1cd00:	e7cc      	b.n	1cc9c <__register_exitproc+0x2c>
   1cd02:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1cd06:	430c      	orrs	r4, r1
   1cd08:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1cd0c:	e7d5      	b.n	1ccba <__register_exitproc+0x4a>
   1cd0e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1cd12:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1cd16:	e7bb      	b.n	1cc90 <__register_exitproc+0x20>
   1cd18:	6828      	ldr	r0, [r5, #0]
   1cd1a:	f000 f99d 	bl	1d058 <__retarget_lock_release_recursive>
   1cd1e:	f04f 30ff 	mov.w	r0, #4294967295
   1cd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cd26:	bf00      	nop
   1cd28:	20000680 	.word	0x20000680
   1cd2c:	00022410 	.word	0x00022410
   1cd30:	000148e1 	.word	0x000148e1

0001cd34 <register_fini>:
   1cd34:	4b02      	ldr	r3, [pc, #8]	; (1cd40 <register_fini+0xc>)
   1cd36:	b113      	cbz	r3, 1cd3e <register_fini+0xa>
   1cd38:	4802      	ldr	r0, [pc, #8]	; (1cd44 <register_fini+0x10>)
   1cd3a:	f000 b833 	b.w	1cda4 <atexit>
   1cd3e:	4770      	bx	lr
   1cd40:	00000000 	.word	0x00000000
   1cd44:	0001cdb1 	.word	0x0001cdb1

0001cd48 <asctime>:
   1cd48:	4b02      	ldr	r3, [pc, #8]	; (1cd54 <asctime+0xc>)
   1cd4a:	6819      	ldr	r1, [r3, #0]
   1cd4c:	3160      	adds	r1, #96	; 0x60
   1cd4e:	f000 b803 	b.w	1cd58 <asctime_r>
   1cd52:	bf00      	nop
   1cd54:	20000248 	.word	0x20000248

0001cd58 <asctime_r>:
   1cd58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd5a:	6946      	ldr	r6, [r0, #20]
   1cd5c:	6807      	ldr	r7, [r0, #0]
   1cd5e:	6905      	ldr	r5, [r0, #16]
   1cd60:	6984      	ldr	r4, [r0, #24]
   1cd62:	4b0d      	ldr	r3, [pc, #52]	; (1cd98 <asctime_r+0x40>)
   1cd64:	4a0d      	ldr	r2, [pc, #52]	; (1cd9c <asctime_r+0x44>)
   1cd66:	b087      	sub	sp, #28
   1cd68:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1cd6c:	9703      	str	r7, [sp, #12]
   1cd6e:	460f      	mov	r7, r1
   1cd70:	6841      	ldr	r1, [r0, #4]
   1cd72:	9604      	str	r6, [sp, #16]
   1cd74:	6886      	ldr	r6, [r0, #8]
   1cd76:	68c0      	ldr	r0, [r0, #12]
   1cd78:	9102      	str	r1, [sp, #8]
   1cd7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1cd7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1cd82:	e88d 0041 	stmia.w	sp, {r0, r6}
   1cd86:	442b      	add	r3, r5
   1cd88:	4422      	add	r2, r4
   1cd8a:	4638      	mov	r0, r7
   1cd8c:	4904      	ldr	r1, [pc, #16]	; (1cda0 <asctime_r+0x48>)
   1cd8e:	f000 fc85 	bl	1d69c <siprintf>
   1cd92:	4638      	mov	r0, r7
   1cd94:	b007      	add	sp, #28
   1cd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cd98:	00022500 	.word	0x00022500
   1cd9c:	000224e8 	.word	0x000224e8
   1cda0:	000224c8 	.word	0x000224c8

0001cda4 <atexit>:
   1cda4:	2300      	movs	r3, #0
   1cda6:	4601      	mov	r1, r0
   1cda8:	461a      	mov	r2, r3
   1cdaa:	4618      	mov	r0, r3
   1cdac:	f7ff bf60 	b.w	1cc70 <__register_exitproc>

0001cdb0 <__libc_fini_array>:
   1cdb0:	b538      	push	{r3, r4, r5, lr}
   1cdb2:	4c0a      	ldr	r4, [pc, #40]	; (1cddc <__libc_fini_array+0x2c>)
   1cdb4:	4d0a      	ldr	r5, [pc, #40]	; (1cde0 <__libc_fini_array+0x30>)
   1cdb6:	1b64      	subs	r4, r4, r5
   1cdb8:	10a4      	asrs	r4, r4, #2
   1cdba:	d00a      	beq.n	1cdd2 <__libc_fini_array+0x22>
   1cdbc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1cdc0:	3b01      	subs	r3, #1
   1cdc2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1cdc6:	3c01      	subs	r4, #1
   1cdc8:	f855 3904 	ldr.w	r3, [r5], #-4
   1cdcc:	4798      	blx	r3
   1cdce:	2c00      	cmp	r4, #0
   1cdd0:	d1f9      	bne.n	1cdc6 <__libc_fini_array+0x16>
   1cdd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cdd6:	f005 bca5 	b.w	22724 <_fini>
   1cdda:	bf00      	nop
   1cddc:	00022734 	.word	0x00022734
   1cde0:	00022730 	.word	0x00022730

0001cde4 <_findenv_r>:
   1cde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cde8:	4f1c      	ldr	r7, [pc, #112]	; (1ce5c <_findenv_r+0x78>)
   1cdea:	460e      	mov	r6, r1
   1cdec:	4691      	mov	r9, r2
   1cdee:	4680      	mov	r8, r0
   1cdf0:	f002 faf2 	bl	1f3d8 <__env_lock>
   1cdf4:	683d      	ldr	r5, [r7, #0]
   1cdf6:	b1f5      	cbz	r5, 1ce36 <_findenv_r+0x52>
   1cdf8:	7834      	ldrb	r4, [r6, #0]
   1cdfa:	b15c      	cbz	r4, 1ce14 <_findenv_r+0x30>
   1cdfc:	2c3d      	cmp	r4, #61	; 0x3d
   1cdfe:	bf18      	it	ne
   1ce00:	4634      	movne	r4, r6
   1ce02:	d102      	bne.n	1ce0a <_findenv_r+0x26>
   1ce04:	e017      	b.n	1ce36 <_findenv_r+0x52>
   1ce06:	2b3d      	cmp	r3, #61	; 0x3d
   1ce08:	d015      	beq.n	1ce36 <_findenv_r+0x52>
   1ce0a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1ce0e:	2b00      	cmp	r3, #0
   1ce10:	d1f9      	bne.n	1ce06 <_findenv_r+0x22>
   1ce12:	1ba4      	subs	r4, r4, r6
   1ce14:	6828      	ldr	r0, [r5, #0]
   1ce16:	b170      	cbz	r0, 1ce36 <_findenv_r+0x52>
   1ce18:	4622      	mov	r2, r4
   1ce1a:	4631      	mov	r1, r6
   1ce1c:	f000 fe6c 	bl	1daf8 <strncmp>
   1ce20:	b928      	cbnz	r0, 1ce2e <_findenv_r+0x4a>
   1ce22:	6828      	ldr	r0, [r5, #0]
   1ce24:	5d03      	ldrb	r3, [r0, r4]
   1ce26:	2b3d      	cmp	r3, #61	; 0x3d
   1ce28:	eb00 0a04 	add.w	sl, r0, r4
   1ce2c:	d009      	beq.n	1ce42 <_findenv_r+0x5e>
   1ce2e:	f855 0f04 	ldr.w	r0, [r5, #4]!
   1ce32:	2800      	cmp	r0, #0
   1ce34:	d1f0      	bne.n	1ce18 <_findenv_r+0x34>
   1ce36:	4640      	mov	r0, r8
   1ce38:	f002 fad4 	bl	1f3e4 <__env_unlock>
   1ce3c:	2000      	movs	r0, #0
   1ce3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ce42:	683b      	ldr	r3, [r7, #0]
   1ce44:	1aed      	subs	r5, r5, r3
   1ce46:	10ad      	asrs	r5, r5, #2
   1ce48:	4640      	mov	r0, r8
   1ce4a:	f8c9 5000 	str.w	r5, [r9]
   1ce4e:	f002 fac9 	bl	1f3e4 <__env_unlock>
   1ce52:	f10a 0001 	add.w	r0, sl, #1
   1ce56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ce5a:	bf00      	nop
   1ce5c:	20000ad4 	.word	0x20000ad4

0001ce60 <_getenv_r>:
   1ce60:	b500      	push	{lr}
   1ce62:	b083      	sub	sp, #12
   1ce64:	aa01      	add	r2, sp, #4
   1ce66:	f7ff ffbd 	bl	1cde4 <_findenv_r>
   1ce6a:	b003      	add	sp, #12
   1ce6c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ce70 <__gettzinfo>:
   1ce70:	4800      	ldr	r0, [pc, #0]	; (1ce74 <__gettzinfo+0x4>)
   1ce72:	4770      	bx	lr
   1ce74:	20000684 	.word	0x20000684

0001ce78 <gmtime_r>:
   1ce78:	6800      	ldr	r0, [r0, #0]
   1ce7a:	4b65      	ldr	r3, [pc, #404]	; (1d010 <gmtime_r+0x198>)
   1ce7c:	fb83 2300 	smull	r2, r3, r3, r0
   1ce80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ce84:	4403      	add	r3, r0
   1ce86:	4d63      	ldr	r5, [pc, #396]	; (1d014 <gmtime_r+0x19c>)
   1ce88:	17c2      	asrs	r2, r0, #31
   1ce8a:	ebc2 4323 	rsb	r3, r2, r3, asr #16
   1ce8e:	fb05 0513 	mls	r5, r5, r3, r0
   1ce92:	2d00      	cmp	r5, #0
   1ce94:	f2c0 80b3 	blt.w	1cffe <gmtime_r+0x186>
   1ce98:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1ce9c:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
   1cea0:	4e5d      	ldr	r6, [pc, #372]	; (1d018 <gmtime_r+0x1a0>)
   1cea2:	485e      	ldr	r0, [pc, #376]	; (1d01c <gmtime_r+0x1a4>)
   1cea4:	4a5e      	ldr	r2, [pc, #376]	; (1d020 <gmtime_r+0x1a8>)
   1cea6:	4c5f      	ldr	r4, [pc, #380]	; (1d024 <gmtime_r+0x1ac>)
   1cea8:	f8df c18c 	ldr.w	ip, [pc, #396]	; 1d038 <gmtime_r+0x1c0>
   1ceac:	f8df e18c 	ldr.w	lr, [pc, #396]	; 1d03c <gmtime_r+0x1c4>
   1ceb0:	fb86 7603 	smull	r7, r6, r6, r3
   1ceb4:	17df      	asrs	r7, r3, #31
   1ceb6:	ebc7 36e6 	rsb	r6, r7, r6, asr #15
   1ceba:	fb00 3006 	mla	r0, r0, r6, r3
   1cebe:	0887      	lsrs	r7, r0, #2
   1cec0:	fba2 8207 	umull	r8, r2, r2, r7
   1cec4:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
   1cec8:	fba4 8707 	umull	r8, r7, r4, r7
   1cecc:	ea4f 1810 	mov.w	r8, r0, lsr #4
   1ced0:	eba2 12d7 	sub.w	r2, r2, r7, lsr #7
   1ced4:	fbac c708 	umull	ip, r7, ip, r8
   1ced8:	eba2 1217 	sub.w	r2, r2, r7, lsr #4
   1cedc:	f8df c160 	ldr.w	ip, [pc, #352]	; 1d040 <gmtime_r+0x1c8>
   1cee0:	4f51      	ldr	r7, [pc, #324]	; (1d028 <gmtime_r+0x1b0>)
   1cee2:	fbae 8e02 	umull	r8, lr, lr, r2
   1cee6:	fbac 9c02 	umull	r9, ip, ip, r2
   1ceea:	eba2 080e 	sub.w	r8, r2, lr
   1ceee:	0892      	lsrs	r2, r2, #2
   1cef0:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
   1cef4:	eb00 30dc 	add.w	r0, r0, ip, lsr #15
   1cef8:	fba4 4202 	umull	r4, r2, r4, r2
   1cefc:	eba0 12d2 	sub.w	r2, r0, r2, lsr #7
   1cf00:	ea4f 241e 	mov.w	r4, lr, lsr #8
   1cf04:	f240 106d 	movw	r0, #365	; 0x16d
   1cf08:	fb00 2214 	mls	r2, r0, r4, r2
   1cf0c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1d044 <gmtime_r+0x1cc>
   1cf10:	fb87 0e05 	smull	r0, lr, r7, r5
   1cf14:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1cf18:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1cf1c:	44ae      	add	lr, r5
   1cf1e:	3002      	adds	r0, #2
   1cf20:	ebcc 2eee 	rsb	lr, ip, lr, asr #11
   1cf24:	4f41      	ldr	r7, [pc, #260]	; (1d02c <gmtime_r+0x1b4>)
   1cf26:	f8c1 e008 	str.w	lr, [r1, #8]
   1cf2a:	f103 0c03 	add.w	ip, r3, #3
   1cf2e:	fba8 3000 	umull	r3, r0, r8, r0
   1cf32:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   1cf36:	fb03 551e 	mls	r5, r3, lr, r5
   1cf3a:	4b3d      	ldr	r3, [pc, #244]	; (1d030 <gmtime_r+0x1b8>)
   1cf3c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1d048 <gmtime_r+0x1d0>
   1cf40:	fb87 e705 	smull	lr, r7, r7, r5
   1cf44:	fb83 390c 	smull	r3, r9, r3, ip
   1cf48:	197b      	adds	r3, r7, r5
   1cf4a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   1cf4e:	fb07 4606 	mla	r6, r7, r6, r4
   1cf52:	17ef      	asrs	r7, r5, #31
   1cf54:	44e1      	add	r9, ip
   1cf56:	ebc7 1363 	rsb	r3, r7, r3, asr #5
   1cf5a:	ea4f 77ec 	mov.w	r7, ip, asr #31
   1cf5e:	09c0      	lsrs	r0, r0, #7
   1cf60:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
   1cf64:	2809      	cmp	r0, #9
   1cf66:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
   1cf6a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
   1cf6e:	ebac 0707 	sub.w	r7, ip, r7
   1cf72:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
   1cf76:	bf8c      	ite	hi
   1cf78:	f06f 0c09 	mvnhi.w	ip, #9
   1cf7c:	f04f 0c02 	movls.w	ip, #2
   1cf80:	4460      	add	r0, ip
   1cf82:	f10e 0e02 	add.w	lr, lr, #2
   1cf86:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
   1cf8a:	fba8 8e0e 	umull	r8, lr, r8, lr
   1cf8e:	eba5 058c 	sub.w	r5, r5, ip, lsl #2
   1cf92:	f102 0801 	add.w	r8, r2, #1
   1cf96:	2801      	cmp	r0, #1
   1cf98:	bf98      	it	ls
   1cf9a:	3601      	addls	r6, #1
   1cf9c:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
   1cfa0:	eba8 0e9e 	sub.w	lr, r8, lr, lsr #2
   1cfa4:	604b      	str	r3, [r1, #4]
   1cfa6:	600d      	str	r5, [r1, #0]
   1cfa8:	618f      	str	r7, [r1, #24]
   1cfaa:	d225      	bcs.n	1cff8 <gmtime_r+0x180>
   1cfac:	07a3      	lsls	r3, r4, #30
   1cfae:	d018      	beq.n	1cfe2 <gmtime_r+0x16a>
   1cfb0:	4b20      	ldr	r3, [pc, #128]	; (1d034 <gmtime_r+0x1bc>)
   1cfb2:	fba3 5304 	umull	r5, r3, r3, r4
   1cfb6:	09db      	lsrs	r3, r3, #7
   1cfb8:	f44f 75c8 	mov.w	r5, #400	; 0x190
   1cfbc:	fb05 4413 	mls	r4, r5, r3, r4
   1cfc0:	fab4 f484 	clz	r4, r4
   1cfc4:	0964      	lsrs	r4, r4, #5
   1cfc6:	323b      	adds	r2, #59	; 0x3b
   1cfc8:	4422      	add	r2, r4
   1cfca:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   1cfce:	2300      	movs	r3, #0
   1cfd0:	6108      	str	r0, [r1, #16]
   1cfd2:	614e      	str	r6, [r1, #20]
   1cfd4:	61ca      	str	r2, [r1, #28]
   1cfd6:	f8c1 e00c 	str.w	lr, [r1, #12]
   1cfda:	620b      	str	r3, [r1, #32]
   1cfdc:	4608      	mov	r0, r1
   1cfde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cfe2:	4b14      	ldr	r3, [pc, #80]	; (1d034 <gmtime_r+0x1bc>)
   1cfe4:	fba3 5304 	umull	r5, r3, r3, r4
   1cfe8:	095b      	lsrs	r3, r3, #5
   1cfea:	2564      	movs	r5, #100	; 0x64
   1cfec:	fb05 4313 	mls	r3, r5, r3, r4
   1cff0:	2b00      	cmp	r3, #0
   1cff2:	d0dd      	beq.n	1cfb0 <gmtime_r+0x138>
   1cff4:	2401      	movs	r4, #1
   1cff6:	e7e6      	b.n	1cfc6 <gmtime_r+0x14e>
   1cff8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
   1cffc:	e7e5      	b.n	1cfca <gmtime_r+0x152>
   1cffe:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
   1d002:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1d006:	f505 75c0 	add.w	r5, r5, #384	; 0x180
   1d00a:	f603 236b 	addw	r3, r3, #2667	; 0xa6b
   1d00e:	e747      	b.n	1cea0 <gmtime_r+0x28>
   1d010:	c22e4507 	.word	0xc22e4507
   1d014:	00015180 	.word	0x00015180
   1d018:	396b06bd 	.word	0x396b06bd
   1d01c:	fffdc54f 	.word	0xfffdc54f
   1d020:	396b207f 	.word	0x396b207f
   1d024:	59c67cd9 	.word	0x59c67cd9
   1d028:	91a2b3c5 	.word	0x91a2b3c5
   1d02c:	88888889 	.word	0x88888889
   1d030:	92492493 	.word	0x92492493
   1d034:	51eb851f 	.word	0x51eb851f
   1d038:	0072d641 	.word	0x0072d641
   1d03c:	6719f361 	.word	0x6719f361
   1d040:	e5d32b1f 	.word	0xe5d32b1f
   1d044:	d62b80d7 	.word	0xd62b80d7
   1d048:	cccccccd 	.word	0xcccccccd

0001d04c <__retarget_lock_acquire>:
   1d04c:	4770      	bx	lr
   1d04e:	bf00      	nop

0001d050 <__retarget_lock_acquire_recursive>:
   1d050:	4770      	bx	lr
   1d052:	bf00      	nop

0001d054 <__retarget_lock_release>:
   1d054:	4770      	bx	lr
   1d056:	bf00      	nop

0001d058 <__retarget_lock_release_recursive>:
   1d058:	4770      	bx	lr
   1d05a:	bf00      	nop

0001d05c <_malloc_r>:
   1d05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d060:	f101 060b 	add.w	r6, r1, #11
   1d064:	2e16      	cmp	r6, #22
   1d066:	b083      	sub	sp, #12
   1d068:	4605      	mov	r5, r0
   1d06a:	f240 809e 	bls.w	1d1aa <_malloc_r+0x14e>
   1d06e:	f036 0607 	bics.w	r6, r6, #7
   1d072:	f100 80bd 	bmi.w	1d1f0 <_malloc_r+0x194>
   1d076:	42b1      	cmp	r1, r6
   1d078:	f200 80ba 	bhi.w	1d1f0 <_malloc_r+0x194>
   1d07c:	f000 faf0 	bl	1d660 <__malloc_lock>
   1d080:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1d084:	f0c0 8293 	bcc.w	1d5ae <_malloc_r+0x552>
   1d088:	0a73      	lsrs	r3, r6, #9
   1d08a:	f000 80b8 	beq.w	1d1fe <_malloc_r+0x1a2>
   1d08e:	2b04      	cmp	r3, #4
   1d090:	f200 8179 	bhi.w	1d386 <_malloc_r+0x32a>
   1d094:	09b3      	lsrs	r3, r6, #6
   1d096:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1d09a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1d09e:	00c3      	lsls	r3, r0, #3
   1d0a0:	4fbf      	ldr	r7, [pc, #764]	; (1d3a0 <_malloc_r+0x344>)
   1d0a2:	443b      	add	r3, r7
   1d0a4:	f1a3 0108 	sub.w	r1, r3, #8
   1d0a8:	685c      	ldr	r4, [r3, #4]
   1d0aa:	42a1      	cmp	r1, r4
   1d0ac:	d106      	bne.n	1d0bc <_malloc_r+0x60>
   1d0ae:	e00c      	b.n	1d0ca <_malloc_r+0x6e>
   1d0b0:	2a00      	cmp	r2, #0
   1d0b2:	f280 80aa 	bge.w	1d20a <_malloc_r+0x1ae>
   1d0b6:	68e4      	ldr	r4, [r4, #12]
   1d0b8:	42a1      	cmp	r1, r4
   1d0ba:	d006      	beq.n	1d0ca <_malloc_r+0x6e>
   1d0bc:	6863      	ldr	r3, [r4, #4]
   1d0be:	f023 0303 	bic.w	r3, r3, #3
   1d0c2:	1b9a      	subs	r2, r3, r6
   1d0c4:	2a0f      	cmp	r2, #15
   1d0c6:	ddf3      	ble.n	1d0b0 <_malloc_r+0x54>
   1d0c8:	4670      	mov	r0, lr
   1d0ca:	693c      	ldr	r4, [r7, #16]
   1d0cc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1d3b4 <_malloc_r+0x358>
   1d0d0:	4574      	cmp	r4, lr
   1d0d2:	f000 81ab 	beq.w	1d42c <_malloc_r+0x3d0>
   1d0d6:	6863      	ldr	r3, [r4, #4]
   1d0d8:	f023 0303 	bic.w	r3, r3, #3
   1d0dc:	1b9a      	subs	r2, r3, r6
   1d0de:	2a0f      	cmp	r2, #15
   1d0e0:	f300 8190 	bgt.w	1d404 <_malloc_r+0x3a8>
   1d0e4:	2a00      	cmp	r2, #0
   1d0e6:	f8c7 e014 	str.w	lr, [r7, #20]
   1d0ea:	f8c7 e010 	str.w	lr, [r7, #16]
   1d0ee:	f280 809d 	bge.w	1d22c <_malloc_r+0x1d0>
   1d0f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1d0f6:	f080 8161 	bcs.w	1d3bc <_malloc_r+0x360>
   1d0fa:	08db      	lsrs	r3, r3, #3
   1d0fc:	f103 0c01 	add.w	ip, r3, #1
   1d100:	1099      	asrs	r1, r3, #2
   1d102:	687a      	ldr	r2, [r7, #4]
   1d104:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1d108:	f8c4 8008 	str.w	r8, [r4, #8]
   1d10c:	2301      	movs	r3, #1
   1d10e:	408b      	lsls	r3, r1
   1d110:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1d114:	4313      	orrs	r3, r2
   1d116:	3908      	subs	r1, #8
   1d118:	60e1      	str	r1, [r4, #12]
   1d11a:	607b      	str	r3, [r7, #4]
   1d11c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1d120:	f8c8 400c 	str.w	r4, [r8, #12]
   1d124:	1082      	asrs	r2, r0, #2
   1d126:	2401      	movs	r4, #1
   1d128:	4094      	lsls	r4, r2
   1d12a:	429c      	cmp	r4, r3
   1d12c:	f200 808b 	bhi.w	1d246 <_malloc_r+0x1ea>
   1d130:	421c      	tst	r4, r3
   1d132:	d106      	bne.n	1d142 <_malloc_r+0xe6>
   1d134:	f020 0003 	bic.w	r0, r0, #3
   1d138:	0064      	lsls	r4, r4, #1
   1d13a:	421c      	tst	r4, r3
   1d13c:	f100 0004 	add.w	r0, r0, #4
   1d140:	d0fa      	beq.n	1d138 <_malloc_r+0xdc>
   1d142:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1d146:	46cc      	mov	ip, r9
   1d148:	4680      	mov	r8, r0
   1d14a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1d14e:	459c      	cmp	ip, r3
   1d150:	d107      	bne.n	1d162 <_malloc_r+0x106>
   1d152:	e16d      	b.n	1d430 <_malloc_r+0x3d4>
   1d154:	2a00      	cmp	r2, #0
   1d156:	f280 817b 	bge.w	1d450 <_malloc_r+0x3f4>
   1d15a:	68db      	ldr	r3, [r3, #12]
   1d15c:	459c      	cmp	ip, r3
   1d15e:	f000 8167 	beq.w	1d430 <_malloc_r+0x3d4>
   1d162:	6859      	ldr	r1, [r3, #4]
   1d164:	f021 0103 	bic.w	r1, r1, #3
   1d168:	1b8a      	subs	r2, r1, r6
   1d16a:	2a0f      	cmp	r2, #15
   1d16c:	ddf2      	ble.n	1d154 <_malloc_r+0xf8>
   1d16e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1d172:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1d176:	9300      	str	r3, [sp, #0]
   1d178:	199c      	adds	r4, r3, r6
   1d17a:	4628      	mov	r0, r5
   1d17c:	f046 0601 	orr.w	r6, r6, #1
   1d180:	f042 0501 	orr.w	r5, r2, #1
   1d184:	605e      	str	r6, [r3, #4]
   1d186:	f8c8 c00c 	str.w	ip, [r8, #12]
   1d18a:	f8cc 8008 	str.w	r8, [ip, #8]
   1d18e:	617c      	str	r4, [r7, #20]
   1d190:	613c      	str	r4, [r7, #16]
   1d192:	f8c4 e00c 	str.w	lr, [r4, #12]
   1d196:	f8c4 e008 	str.w	lr, [r4, #8]
   1d19a:	6065      	str	r5, [r4, #4]
   1d19c:	505a      	str	r2, [r3, r1]
   1d19e:	f000 fa65 	bl	1d66c <__malloc_unlock>
   1d1a2:	9b00      	ldr	r3, [sp, #0]
   1d1a4:	f103 0408 	add.w	r4, r3, #8
   1d1a8:	e01e      	b.n	1d1e8 <_malloc_r+0x18c>
   1d1aa:	2910      	cmp	r1, #16
   1d1ac:	d820      	bhi.n	1d1f0 <_malloc_r+0x194>
   1d1ae:	f000 fa57 	bl	1d660 <__malloc_lock>
   1d1b2:	2610      	movs	r6, #16
   1d1b4:	2318      	movs	r3, #24
   1d1b6:	2002      	movs	r0, #2
   1d1b8:	4f79      	ldr	r7, [pc, #484]	; (1d3a0 <_malloc_r+0x344>)
   1d1ba:	443b      	add	r3, r7
   1d1bc:	f1a3 0208 	sub.w	r2, r3, #8
   1d1c0:	685c      	ldr	r4, [r3, #4]
   1d1c2:	4294      	cmp	r4, r2
   1d1c4:	f000 813d 	beq.w	1d442 <_malloc_r+0x3e6>
   1d1c8:	6863      	ldr	r3, [r4, #4]
   1d1ca:	68e1      	ldr	r1, [r4, #12]
   1d1cc:	68a6      	ldr	r6, [r4, #8]
   1d1ce:	f023 0303 	bic.w	r3, r3, #3
   1d1d2:	4423      	add	r3, r4
   1d1d4:	4628      	mov	r0, r5
   1d1d6:	685a      	ldr	r2, [r3, #4]
   1d1d8:	60f1      	str	r1, [r6, #12]
   1d1da:	f042 0201 	orr.w	r2, r2, #1
   1d1de:	608e      	str	r6, [r1, #8]
   1d1e0:	605a      	str	r2, [r3, #4]
   1d1e2:	f000 fa43 	bl	1d66c <__malloc_unlock>
   1d1e6:	3408      	adds	r4, #8
   1d1e8:	4620      	mov	r0, r4
   1d1ea:	b003      	add	sp, #12
   1d1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1f0:	2400      	movs	r4, #0
   1d1f2:	230c      	movs	r3, #12
   1d1f4:	4620      	mov	r0, r4
   1d1f6:	602b      	str	r3, [r5, #0]
   1d1f8:	b003      	add	sp, #12
   1d1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1fe:	2040      	movs	r0, #64	; 0x40
   1d200:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d204:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1d208:	e74a      	b.n	1d0a0 <_malloc_r+0x44>
   1d20a:	4423      	add	r3, r4
   1d20c:	68e1      	ldr	r1, [r4, #12]
   1d20e:	685a      	ldr	r2, [r3, #4]
   1d210:	68a6      	ldr	r6, [r4, #8]
   1d212:	f042 0201 	orr.w	r2, r2, #1
   1d216:	60f1      	str	r1, [r6, #12]
   1d218:	4628      	mov	r0, r5
   1d21a:	608e      	str	r6, [r1, #8]
   1d21c:	605a      	str	r2, [r3, #4]
   1d21e:	f000 fa25 	bl	1d66c <__malloc_unlock>
   1d222:	3408      	adds	r4, #8
   1d224:	4620      	mov	r0, r4
   1d226:	b003      	add	sp, #12
   1d228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d22c:	4423      	add	r3, r4
   1d22e:	4628      	mov	r0, r5
   1d230:	685a      	ldr	r2, [r3, #4]
   1d232:	f042 0201 	orr.w	r2, r2, #1
   1d236:	605a      	str	r2, [r3, #4]
   1d238:	f000 fa18 	bl	1d66c <__malloc_unlock>
   1d23c:	3408      	adds	r4, #8
   1d23e:	4620      	mov	r0, r4
   1d240:	b003      	add	sp, #12
   1d242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d246:	68bc      	ldr	r4, [r7, #8]
   1d248:	6863      	ldr	r3, [r4, #4]
   1d24a:	f023 0803 	bic.w	r8, r3, #3
   1d24e:	45b0      	cmp	r8, r6
   1d250:	d304      	bcc.n	1d25c <_malloc_r+0x200>
   1d252:	eba8 0306 	sub.w	r3, r8, r6
   1d256:	2b0f      	cmp	r3, #15
   1d258:	f300 8085 	bgt.w	1d366 <_malloc_r+0x30a>
   1d25c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1d3b8 <_malloc_r+0x35c>
   1d260:	4b50      	ldr	r3, [pc, #320]	; (1d3a4 <_malloc_r+0x348>)
   1d262:	f8d9 2000 	ldr.w	r2, [r9]
   1d266:	681b      	ldr	r3, [r3, #0]
   1d268:	3201      	adds	r2, #1
   1d26a:	4433      	add	r3, r6
   1d26c:	eb04 0a08 	add.w	sl, r4, r8
   1d270:	f000 8155 	beq.w	1d51e <_malloc_r+0x4c2>
   1d274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1d278:	330f      	adds	r3, #15
   1d27a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1d27e:	f02b 0b0f 	bic.w	fp, fp, #15
   1d282:	4659      	mov	r1, fp
   1d284:	4628      	mov	r0, r5
   1d286:	f000 f9f7 	bl	1d678 <_sbrk_r>
   1d28a:	1c41      	adds	r1, r0, #1
   1d28c:	4602      	mov	r2, r0
   1d28e:	f000 80fc 	beq.w	1d48a <_malloc_r+0x42e>
   1d292:	4582      	cmp	sl, r0
   1d294:	f200 80f7 	bhi.w	1d486 <_malloc_r+0x42a>
   1d298:	4b43      	ldr	r3, [pc, #268]	; (1d3a8 <_malloc_r+0x34c>)
   1d29a:	6819      	ldr	r1, [r3, #0]
   1d29c:	4459      	add	r1, fp
   1d29e:	6019      	str	r1, [r3, #0]
   1d2a0:	f000 814d 	beq.w	1d53e <_malloc_r+0x4e2>
   1d2a4:	f8d9 0000 	ldr.w	r0, [r9]
   1d2a8:	3001      	adds	r0, #1
   1d2aa:	bf1b      	ittet	ne
   1d2ac:	eba2 0a0a 	subne.w	sl, r2, sl
   1d2b0:	4451      	addne	r1, sl
   1d2b2:	f8c9 2000 	streq.w	r2, [r9]
   1d2b6:	6019      	strne	r1, [r3, #0]
   1d2b8:	f012 0107 	ands.w	r1, r2, #7
   1d2bc:	f000 8115 	beq.w	1d4ea <_malloc_r+0x48e>
   1d2c0:	f1c1 0008 	rsb	r0, r1, #8
   1d2c4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1d2c8:	4402      	add	r2, r0
   1d2ca:	3108      	adds	r1, #8
   1d2cc:	eb02 090b 	add.w	r9, r2, fp
   1d2d0:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1d2d4:	eba1 0909 	sub.w	r9, r1, r9
   1d2d8:	4649      	mov	r1, r9
   1d2da:	4628      	mov	r0, r5
   1d2dc:	9301      	str	r3, [sp, #4]
   1d2de:	9200      	str	r2, [sp, #0]
   1d2e0:	f000 f9ca 	bl	1d678 <_sbrk_r>
   1d2e4:	1c43      	adds	r3, r0, #1
   1d2e6:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1d2ea:	f000 8143 	beq.w	1d574 <_malloc_r+0x518>
   1d2ee:	1a80      	subs	r0, r0, r2
   1d2f0:	4448      	add	r0, r9
   1d2f2:	f040 0001 	orr.w	r0, r0, #1
   1d2f6:	6819      	ldr	r1, [r3, #0]
   1d2f8:	60ba      	str	r2, [r7, #8]
   1d2fa:	4449      	add	r1, r9
   1d2fc:	42bc      	cmp	r4, r7
   1d2fe:	6050      	str	r0, [r2, #4]
   1d300:	6019      	str	r1, [r3, #0]
   1d302:	d017      	beq.n	1d334 <_malloc_r+0x2d8>
   1d304:	f1b8 0f0f 	cmp.w	r8, #15
   1d308:	f240 80fb 	bls.w	1d502 <_malloc_r+0x4a6>
   1d30c:	6860      	ldr	r0, [r4, #4]
   1d30e:	f1a8 020c 	sub.w	r2, r8, #12
   1d312:	f022 0207 	bic.w	r2, r2, #7
   1d316:	eb04 0e02 	add.w	lr, r4, r2
   1d31a:	f000 0001 	and.w	r0, r0, #1
   1d31e:	f04f 0c05 	mov.w	ip, #5
   1d322:	4310      	orrs	r0, r2
   1d324:	2a0f      	cmp	r2, #15
   1d326:	6060      	str	r0, [r4, #4]
   1d328:	f8ce c004 	str.w	ip, [lr, #4]
   1d32c:	f8ce c008 	str.w	ip, [lr, #8]
   1d330:	f200 8117 	bhi.w	1d562 <_malloc_r+0x506>
   1d334:	4b1d      	ldr	r3, [pc, #116]	; (1d3ac <_malloc_r+0x350>)
   1d336:	68bc      	ldr	r4, [r7, #8]
   1d338:	681a      	ldr	r2, [r3, #0]
   1d33a:	4291      	cmp	r1, r2
   1d33c:	bf88      	it	hi
   1d33e:	6019      	strhi	r1, [r3, #0]
   1d340:	4b1b      	ldr	r3, [pc, #108]	; (1d3b0 <_malloc_r+0x354>)
   1d342:	681a      	ldr	r2, [r3, #0]
   1d344:	4291      	cmp	r1, r2
   1d346:	6862      	ldr	r2, [r4, #4]
   1d348:	bf88      	it	hi
   1d34a:	6019      	strhi	r1, [r3, #0]
   1d34c:	f022 0203 	bic.w	r2, r2, #3
   1d350:	4296      	cmp	r6, r2
   1d352:	eba2 0306 	sub.w	r3, r2, r6
   1d356:	d801      	bhi.n	1d35c <_malloc_r+0x300>
   1d358:	2b0f      	cmp	r3, #15
   1d35a:	dc04      	bgt.n	1d366 <_malloc_r+0x30a>
   1d35c:	4628      	mov	r0, r5
   1d35e:	f000 f985 	bl	1d66c <__malloc_unlock>
   1d362:	2400      	movs	r4, #0
   1d364:	e740      	b.n	1d1e8 <_malloc_r+0x18c>
   1d366:	19a2      	adds	r2, r4, r6
   1d368:	f043 0301 	orr.w	r3, r3, #1
   1d36c:	f046 0601 	orr.w	r6, r6, #1
   1d370:	6066      	str	r6, [r4, #4]
   1d372:	4628      	mov	r0, r5
   1d374:	60ba      	str	r2, [r7, #8]
   1d376:	6053      	str	r3, [r2, #4]
   1d378:	f000 f978 	bl	1d66c <__malloc_unlock>
   1d37c:	3408      	adds	r4, #8
   1d37e:	4620      	mov	r0, r4
   1d380:	b003      	add	sp, #12
   1d382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d386:	2b14      	cmp	r3, #20
   1d388:	d971      	bls.n	1d46e <_malloc_r+0x412>
   1d38a:	2b54      	cmp	r3, #84	; 0x54
   1d38c:	f200 80a3 	bhi.w	1d4d6 <_malloc_r+0x47a>
   1d390:	0b33      	lsrs	r3, r6, #12
   1d392:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1d396:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1d39a:	00c3      	lsls	r3, r0, #3
   1d39c:	e680      	b.n	1d0a0 <_malloc_r+0x44>
   1d39e:	bf00      	nop
   1d3a0:	200006c4 	.word	0x200006c4
   1d3a4:	2000a748 	.word	0x2000a748
   1d3a8:	2000a718 	.word	0x2000a718
   1d3ac:	2000a740 	.word	0x2000a740
   1d3b0:	2000a744 	.word	0x2000a744
   1d3b4:	200006cc 	.word	0x200006cc
   1d3b8:	20000acc 	.word	0x20000acc
   1d3bc:	0a5a      	lsrs	r2, r3, #9
   1d3be:	2a04      	cmp	r2, #4
   1d3c0:	d95b      	bls.n	1d47a <_malloc_r+0x41e>
   1d3c2:	2a14      	cmp	r2, #20
   1d3c4:	f200 80ae 	bhi.w	1d524 <_malloc_r+0x4c8>
   1d3c8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1d3cc:	00c9      	lsls	r1, r1, #3
   1d3ce:	325b      	adds	r2, #91	; 0x5b
   1d3d0:	eb07 0c01 	add.w	ip, r7, r1
   1d3d4:	5879      	ldr	r1, [r7, r1]
   1d3d6:	f1ac 0c08 	sub.w	ip, ip, #8
   1d3da:	458c      	cmp	ip, r1
   1d3dc:	f000 8088 	beq.w	1d4f0 <_malloc_r+0x494>
   1d3e0:	684a      	ldr	r2, [r1, #4]
   1d3e2:	f022 0203 	bic.w	r2, r2, #3
   1d3e6:	4293      	cmp	r3, r2
   1d3e8:	d273      	bcs.n	1d4d2 <_malloc_r+0x476>
   1d3ea:	6889      	ldr	r1, [r1, #8]
   1d3ec:	458c      	cmp	ip, r1
   1d3ee:	d1f7      	bne.n	1d3e0 <_malloc_r+0x384>
   1d3f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1d3f4:	687b      	ldr	r3, [r7, #4]
   1d3f6:	60e2      	str	r2, [r4, #12]
   1d3f8:	f8c4 c008 	str.w	ip, [r4, #8]
   1d3fc:	6094      	str	r4, [r2, #8]
   1d3fe:	f8cc 400c 	str.w	r4, [ip, #12]
   1d402:	e68f      	b.n	1d124 <_malloc_r+0xc8>
   1d404:	19a1      	adds	r1, r4, r6
   1d406:	f046 0c01 	orr.w	ip, r6, #1
   1d40a:	f042 0601 	orr.w	r6, r2, #1
   1d40e:	f8c4 c004 	str.w	ip, [r4, #4]
   1d412:	4628      	mov	r0, r5
   1d414:	6179      	str	r1, [r7, #20]
   1d416:	6139      	str	r1, [r7, #16]
   1d418:	f8c1 e00c 	str.w	lr, [r1, #12]
   1d41c:	f8c1 e008 	str.w	lr, [r1, #8]
   1d420:	604e      	str	r6, [r1, #4]
   1d422:	50e2      	str	r2, [r4, r3]
   1d424:	f000 f922 	bl	1d66c <__malloc_unlock>
   1d428:	3408      	adds	r4, #8
   1d42a:	e6dd      	b.n	1d1e8 <_malloc_r+0x18c>
   1d42c:	687b      	ldr	r3, [r7, #4]
   1d42e:	e679      	b.n	1d124 <_malloc_r+0xc8>
   1d430:	f108 0801 	add.w	r8, r8, #1
   1d434:	f018 0f03 	tst.w	r8, #3
   1d438:	f10c 0c08 	add.w	ip, ip, #8
   1d43c:	f47f ae85 	bne.w	1d14a <_malloc_r+0xee>
   1d440:	e02d      	b.n	1d49e <_malloc_r+0x442>
   1d442:	68dc      	ldr	r4, [r3, #12]
   1d444:	42a3      	cmp	r3, r4
   1d446:	bf08      	it	eq
   1d448:	3002      	addeq	r0, #2
   1d44a:	f43f ae3e 	beq.w	1d0ca <_malloc_r+0x6e>
   1d44e:	e6bb      	b.n	1d1c8 <_malloc_r+0x16c>
   1d450:	4419      	add	r1, r3
   1d452:	461c      	mov	r4, r3
   1d454:	684a      	ldr	r2, [r1, #4]
   1d456:	68db      	ldr	r3, [r3, #12]
   1d458:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1d45c:	f042 0201 	orr.w	r2, r2, #1
   1d460:	604a      	str	r2, [r1, #4]
   1d462:	4628      	mov	r0, r5
   1d464:	60f3      	str	r3, [r6, #12]
   1d466:	609e      	str	r6, [r3, #8]
   1d468:	f000 f900 	bl	1d66c <__malloc_unlock>
   1d46c:	e6bc      	b.n	1d1e8 <_malloc_r+0x18c>
   1d46e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1d472:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1d476:	00c3      	lsls	r3, r0, #3
   1d478:	e612      	b.n	1d0a0 <_malloc_r+0x44>
   1d47a:	099a      	lsrs	r2, r3, #6
   1d47c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1d480:	00c9      	lsls	r1, r1, #3
   1d482:	3238      	adds	r2, #56	; 0x38
   1d484:	e7a4      	b.n	1d3d0 <_malloc_r+0x374>
   1d486:	42bc      	cmp	r4, r7
   1d488:	d054      	beq.n	1d534 <_malloc_r+0x4d8>
   1d48a:	68bc      	ldr	r4, [r7, #8]
   1d48c:	6862      	ldr	r2, [r4, #4]
   1d48e:	f022 0203 	bic.w	r2, r2, #3
   1d492:	e75d      	b.n	1d350 <_malloc_r+0x2f4>
   1d494:	f859 3908 	ldr.w	r3, [r9], #-8
   1d498:	4599      	cmp	r9, r3
   1d49a:	f040 8086 	bne.w	1d5aa <_malloc_r+0x54e>
   1d49e:	f010 0f03 	tst.w	r0, #3
   1d4a2:	f100 30ff 	add.w	r0, r0, #4294967295
   1d4a6:	d1f5      	bne.n	1d494 <_malloc_r+0x438>
   1d4a8:	687b      	ldr	r3, [r7, #4]
   1d4aa:	ea23 0304 	bic.w	r3, r3, r4
   1d4ae:	607b      	str	r3, [r7, #4]
   1d4b0:	0064      	lsls	r4, r4, #1
   1d4b2:	429c      	cmp	r4, r3
   1d4b4:	f63f aec7 	bhi.w	1d246 <_malloc_r+0x1ea>
   1d4b8:	2c00      	cmp	r4, #0
   1d4ba:	f43f aec4 	beq.w	1d246 <_malloc_r+0x1ea>
   1d4be:	421c      	tst	r4, r3
   1d4c0:	4640      	mov	r0, r8
   1d4c2:	f47f ae3e 	bne.w	1d142 <_malloc_r+0xe6>
   1d4c6:	0064      	lsls	r4, r4, #1
   1d4c8:	421c      	tst	r4, r3
   1d4ca:	f100 0004 	add.w	r0, r0, #4
   1d4ce:	d0fa      	beq.n	1d4c6 <_malloc_r+0x46a>
   1d4d0:	e637      	b.n	1d142 <_malloc_r+0xe6>
   1d4d2:	468c      	mov	ip, r1
   1d4d4:	e78c      	b.n	1d3f0 <_malloc_r+0x394>
   1d4d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1d4da:	d815      	bhi.n	1d508 <_malloc_r+0x4ac>
   1d4dc:	0bf3      	lsrs	r3, r6, #15
   1d4de:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1d4e2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1d4e6:	00c3      	lsls	r3, r0, #3
   1d4e8:	e5da      	b.n	1d0a0 <_malloc_r+0x44>
   1d4ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1d4ee:	e6ed      	b.n	1d2cc <_malloc_r+0x270>
   1d4f0:	687b      	ldr	r3, [r7, #4]
   1d4f2:	1092      	asrs	r2, r2, #2
   1d4f4:	2101      	movs	r1, #1
   1d4f6:	fa01 f202 	lsl.w	r2, r1, r2
   1d4fa:	4313      	orrs	r3, r2
   1d4fc:	607b      	str	r3, [r7, #4]
   1d4fe:	4662      	mov	r2, ip
   1d500:	e779      	b.n	1d3f6 <_malloc_r+0x39a>
   1d502:	2301      	movs	r3, #1
   1d504:	6053      	str	r3, [r2, #4]
   1d506:	e729      	b.n	1d35c <_malloc_r+0x300>
   1d508:	f240 5254 	movw	r2, #1364	; 0x554
   1d50c:	4293      	cmp	r3, r2
   1d50e:	d822      	bhi.n	1d556 <_malloc_r+0x4fa>
   1d510:	0cb3      	lsrs	r3, r6, #18
   1d512:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1d516:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1d51a:	00c3      	lsls	r3, r0, #3
   1d51c:	e5c0      	b.n	1d0a0 <_malloc_r+0x44>
   1d51e:	f103 0b10 	add.w	fp, r3, #16
   1d522:	e6ae      	b.n	1d282 <_malloc_r+0x226>
   1d524:	2a54      	cmp	r2, #84	; 0x54
   1d526:	d829      	bhi.n	1d57c <_malloc_r+0x520>
   1d528:	0b1a      	lsrs	r2, r3, #12
   1d52a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1d52e:	00c9      	lsls	r1, r1, #3
   1d530:	326e      	adds	r2, #110	; 0x6e
   1d532:	e74d      	b.n	1d3d0 <_malloc_r+0x374>
   1d534:	4b20      	ldr	r3, [pc, #128]	; (1d5b8 <_malloc_r+0x55c>)
   1d536:	6819      	ldr	r1, [r3, #0]
   1d538:	4459      	add	r1, fp
   1d53a:	6019      	str	r1, [r3, #0]
   1d53c:	e6b2      	b.n	1d2a4 <_malloc_r+0x248>
   1d53e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1d542:	2800      	cmp	r0, #0
   1d544:	f47f aeae 	bne.w	1d2a4 <_malloc_r+0x248>
   1d548:	eb08 030b 	add.w	r3, r8, fp
   1d54c:	68ba      	ldr	r2, [r7, #8]
   1d54e:	f043 0301 	orr.w	r3, r3, #1
   1d552:	6053      	str	r3, [r2, #4]
   1d554:	e6ee      	b.n	1d334 <_malloc_r+0x2d8>
   1d556:	207f      	movs	r0, #127	; 0x7f
   1d558:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1d55c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1d560:	e59e      	b.n	1d0a0 <_malloc_r+0x44>
   1d562:	f104 0108 	add.w	r1, r4, #8
   1d566:	4628      	mov	r0, r5
   1d568:	9300      	str	r3, [sp, #0]
   1d56a:	f001 ff91 	bl	1f490 <_free_r>
   1d56e:	9b00      	ldr	r3, [sp, #0]
   1d570:	6819      	ldr	r1, [r3, #0]
   1d572:	e6df      	b.n	1d334 <_malloc_r+0x2d8>
   1d574:	2001      	movs	r0, #1
   1d576:	f04f 0900 	mov.w	r9, #0
   1d57a:	e6bc      	b.n	1d2f6 <_malloc_r+0x29a>
   1d57c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1d580:	d805      	bhi.n	1d58e <_malloc_r+0x532>
   1d582:	0bda      	lsrs	r2, r3, #15
   1d584:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1d588:	00c9      	lsls	r1, r1, #3
   1d58a:	3277      	adds	r2, #119	; 0x77
   1d58c:	e720      	b.n	1d3d0 <_malloc_r+0x374>
   1d58e:	f240 5154 	movw	r1, #1364	; 0x554
   1d592:	428a      	cmp	r2, r1
   1d594:	d805      	bhi.n	1d5a2 <_malloc_r+0x546>
   1d596:	0c9a      	lsrs	r2, r3, #18
   1d598:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1d59c:	00c9      	lsls	r1, r1, #3
   1d59e:	327c      	adds	r2, #124	; 0x7c
   1d5a0:	e716      	b.n	1d3d0 <_malloc_r+0x374>
   1d5a2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1d5a6:	227e      	movs	r2, #126	; 0x7e
   1d5a8:	e712      	b.n	1d3d0 <_malloc_r+0x374>
   1d5aa:	687b      	ldr	r3, [r7, #4]
   1d5ac:	e780      	b.n	1d4b0 <_malloc_r+0x454>
   1d5ae:	08f0      	lsrs	r0, r6, #3
   1d5b0:	f106 0308 	add.w	r3, r6, #8
   1d5b4:	e600      	b.n	1d1b8 <_malloc_r+0x15c>
   1d5b6:	bf00      	nop
   1d5b8:	2000a718 	.word	0x2000a718
   1d5bc:	00000000 	.word	0x00000000

0001d5c0 <memchr>:
   1d5c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d5c4:	2a10      	cmp	r2, #16
   1d5c6:	db2b      	blt.n	1d620 <memchr+0x60>
   1d5c8:	f010 0f07 	tst.w	r0, #7
   1d5cc:	d008      	beq.n	1d5e0 <memchr+0x20>
   1d5ce:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d5d2:	3a01      	subs	r2, #1
   1d5d4:	428b      	cmp	r3, r1
   1d5d6:	d02d      	beq.n	1d634 <memchr+0x74>
   1d5d8:	f010 0f07 	tst.w	r0, #7
   1d5dc:	b342      	cbz	r2, 1d630 <memchr+0x70>
   1d5de:	d1f6      	bne.n	1d5ce <memchr+0xe>
   1d5e0:	b4f0      	push	{r4, r5, r6, r7}
   1d5e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1d5e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1d5ea:	f022 0407 	bic.w	r4, r2, #7
   1d5ee:	f07f 0700 	mvns.w	r7, #0
   1d5f2:	2300      	movs	r3, #0
   1d5f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1d5f8:	3c08      	subs	r4, #8
   1d5fa:	ea85 0501 	eor.w	r5, r5, r1
   1d5fe:	ea86 0601 	eor.w	r6, r6, r1
   1d602:	fa85 f547 	uadd8	r5, r5, r7
   1d606:	faa3 f587 	sel	r5, r3, r7
   1d60a:	fa86 f647 	uadd8	r6, r6, r7
   1d60e:	faa5 f687 	sel	r6, r5, r7
   1d612:	b98e      	cbnz	r6, 1d638 <memchr+0x78>
   1d614:	d1ee      	bne.n	1d5f4 <memchr+0x34>
   1d616:	bcf0      	pop	{r4, r5, r6, r7}
   1d618:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d61c:	f002 0207 	and.w	r2, r2, #7
   1d620:	b132      	cbz	r2, 1d630 <memchr+0x70>
   1d622:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d626:	3a01      	subs	r2, #1
   1d628:	ea83 0301 	eor.w	r3, r3, r1
   1d62c:	b113      	cbz	r3, 1d634 <memchr+0x74>
   1d62e:	d1f8      	bne.n	1d622 <memchr+0x62>
   1d630:	2000      	movs	r0, #0
   1d632:	4770      	bx	lr
   1d634:	3801      	subs	r0, #1
   1d636:	4770      	bx	lr
   1d638:	2d00      	cmp	r5, #0
   1d63a:	bf06      	itte	eq
   1d63c:	4635      	moveq	r5, r6
   1d63e:	3803      	subeq	r0, #3
   1d640:	3807      	subne	r0, #7
   1d642:	f015 0f01 	tst.w	r5, #1
   1d646:	d107      	bne.n	1d658 <memchr+0x98>
   1d648:	3001      	adds	r0, #1
   1d64a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1d64e:	bf02      	ittt	eq
   1d650:	3001      	addeq	r0, #1
   1d652:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1d656:	3001      	addeq	r0, #1
   1d658:	bcf0      	pop	{r4, r5, r6, r7}
   1d65a:	3801      	subs	r0, #1
   1d65c:	4770      	bx	lr
   1d65e:	bf00      	nop

0001d660 <__malloc_lock>:
   1d660:	4801      	ldr	r0, [pc, #4]	; (1d668 <__malloc_lock+0x8>)
   1d662:	f7ff bcf5 	b.w	1d050 <__retarget_lock_acquire_recursive>
   1d666:	bf00      	nop
   1d668:	2000a9f4 	.word	0x2000a9f4

0001d66c <__malloc_unlock>:
   1d66c:	4801      	ldr	r0, [pc, #4]	; (1d674 <__malloc_unlock+0x8>)
   1d66e:	f7ff bcf3 	b.w	1d058 <__retarget_lock_release_recursive>
   1d672:	bf00      	nop
   1d674:	2000a9f4 	.word	0x2000a9f4

0001d678 <_sbrk_r>:
   1d678:	b538      	push	{r3, r4, r5, lr}
   1d67a:	4c07      	ldr	r4, [pc, #28]	; (1d698 <_sbrk_r+0x20>)
   1d67c:	2300      	movs	r3, #0
   1d67e:	4605      	mov	r5, r0
   1d680:	4608      	mov	r0, r1
   1d682:	6023      	str	r3, [r4, #0]
   1d684:	f7f7 f93f 	bl	14906 <_sbrk>
   1d688:	1c43      	adds	r3, r0, #1
   1d68a:	d000      	beq.n	1d68e <_sbrk_r+0x16>
   1d68c:	bd38      	pop	{r3, r4, r5, pc}
   1d68e:	6823      	ldr	r3, [r4, #0]
   1d690:	2b00      	cmp	r3, #0
   1d692:	d0fb      	beq.n	1d68c <_sbrk_r+0x14>
   1d694:	602b      	str	r3, [r5, #0]
   1d696:	bd38      	pop	{r3, r4, r5, pc}
   1d698:	2000aa08 	.word	0x2000aa08

0001d69c <siprintf>:
   1d69c:	b40e      	push	{r1, r2, r3}
   1d69e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6a0:	b09c      	sub	sp, #112	; 0x70
   1d6a2:	ab21      	add	r3, sp, #132	; 0x84
   1d6a4:	490f      	ldr	r1, [pc, #60]	; (1d6e4 <siprintf+0x48>)
   1d6a6:	f853 2b04 	ldr.w	r2, [r3], #4
   1d6aa:	9301      	str	r3, [sp, #4]
   1d6ac:	4605      	mov	r5, r0
   1d6ae:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1d6b2:	6808      	ldr	r0, [r1, #0]
   1d6b4:	9502      	str	r5, [sp, #8]
   1d6b6:	f44f 7702 	mov.w	r7, #520	; 0x208
   1d6ba:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1d6be:	a902      	add	r1, sp, #8
   1d6c0:	9506      	str	r5, [sp, #24]
   1d6c2:	f8ad 7014 	strh.w	r7, [sp, #20]
   1d6c6:	9404      	str	r4, [sp, #16]
   1d6c8:	9407      	str	r4, [sp, #28]
   1d6ca:	f8ad 6016 	strh.w	r6, [sp, #22]
   1d6ce:	f000 fbaf 	bl	1de30 <_svfiprintf_r>
   1d6d2:	9b02      	ldr	r3, [sp, #8]
   1d6d4:	2200      	movs	r2, #0
   1d6d6:	701a      	strb	r2, [r3, #0]
   1d6d8:	b01c      	add	sp, #112	; 0x70
   1d6da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d6de:	b003      	add	sp, #12
   1d6e0:	4770      	bx	lr
   1d6e2:	bf00      	nop
   1d6e4:	20000248 	.word	0x20000248

0001d6e8 <siscanf>:
   1d6e8:	b40e      	push	{r1, r2, r3}
   1d6ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6ec:	b09c      	sub	sp, #112	; 0x70
   1d6ee:	ac21      	add	r4, sp, #132	; 0x84
   1d6f0:	f44f 7201 	mov.w	r2, #516	; 0x204
   1d6f4:	f854 6b04 	ldr.w	r6, [r4], #4
   1d6f8:	f8ad 2014 	strh.w	r2, [sp, #20]
   1d6fc:	9002      	str	r0, [sp, #8]
   1d6fe:	9006      	str	r0, [sp, #24]
   1d700:	f7fe ffde 	bl	1c6c0 <strlen>
   1d704:	4b0c      	ldr	r3, [pc, #48]	; (1d738 <siscanf+0x50>)
   1d706:	9401      	str	r4, [sp, #4]
   1d708:	4605      	mov	r5, r0
   1d70a:	4632      	mov	r2, r6
   1d70c:	4f0b      	ldr	r7, [pc, #44]	; (1d73c <siscanf+0x54>)
   1d70e:	6818      	ldr	r0, [r3, #0]
   1d710:	9503      	str	r5, [sp, #12]
   1d712:	4623      	mov	r3, r4
   1d714:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1d718:	2400      	movs	r4, #0
   1d71a:	a902      	add	r1, sp, #8
   1d71c:	9507      	str	r5, [sp, #28]
   1d71e:	970a      	str	r7, [sp, #40]	; 0x28
   1d720:	940e      	str	r4, [sp, #56]	; 0x38
   1d722:	9413      	str	r4, [sp, #76]	; 0x4c
   1d724:	f8ad 6016 	strh.w	r6, [sp, #22]
   1d728:	f001 f94a 	bl	1e9c0 <__ssvfiscanf_r>
   1d72c:	b01c      	add	sp, #112	; 0x70
   1d72e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d732:	b003      	add	sp, #12
   1d734:	4770      	bx	lr
   1d736:	bf00      	nop
   1d738:	20000248 	.word	0x20000248
   1d73c:	0001d741 	.word	0x0001d741

0001d740 <__seofread>:
   1d740:	2000      	movs	r0, #0
   1d742:	4770      	bx	lr
	...
   1d760:	eba2 0003 	sub.w	r0, r2, r3
   1d764:	4770      	bx	lr
   1d766:	bf00      	nop

0001d768 <strcmp>:
   1d768:	7802      	ldrb	r2, [r0, #0]
   1d76a:	780b      	ldrb	r3, [r1, #0]
   1d76c:	2a01      	cmp	r2, #1
   1d76e:	bf28      	it	cs
   1d770:	429a      	cmpcs	r2, r3
   1d772:	d1f5      	bne.n	1d760 <__seofread+0x20>
   1d774:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1d778:	ea40 0401 	orr.w	r4, r0, r1
   1d77c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1d780:	f06f 0c00 	mvn.w	ip, #0
   1d784:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1d788:	b312      	cbz	r2, 1d7d0 <strcmp+0x68>
   1d78a:	ea80 0401 	eor.w	r4, r0, r1
   1d78e:	f014 0f07 	tst.w	r4, #7
   1d792:	d16a      	bne.n	1d86a <strcmp+0x102>
   1d794:	f000 0407 	and.w	r4, r0, #7
   1d798:	f020 0007 	bic.w	r0, r0, #7
   1d79c:	f004 0503 	and.w	r5, r4, #3
   1d7a0:	f021 0107 	bic.w	r1, r1, #7
   1d7a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1d7a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1d7ac:	f014 0f04 	tst.w	r4, #4
   1d7b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1d7b4:	fa0c f405 	lsl.w	r4, ip, r5
   1d7b8:	ea62 0204 	orn	r2, r2, r4
   1d7bc:	ea66 0604 	orn	r6, r6, r4
   1d7c0:	d00a      	beq.n	1d7d8 <strcmp+0x70>
   1d7c2:	ea63 0304 	orn	r3, r3, r4
   1d7c6:	4662      	mov	r2, ip
   1d7c8:	ea67 0704 	orn	r7, r7, r4
   1d7cc:	4666      	mov	r6, ip
   1d7ce:	e003      	b.n	1d7d8 <strcmp+0x70>
   1d7d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1d7d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1d7d8:	fa82 f54c 	uadd8	r5, r2, ip
   1d7dc:	ea82 0406 	eor.w	r4, r2, r6
   1d7e0:	faa4 f48c 	sel	r4, r4, ip
   1d7e4:	bb6c      	cbnz	r4, 1d842 <strcmp+0xda>
   1d7e6:	fa83 f54c 	uadd8	r5, r3, ip
   1d7ea:	ea83 0507 	eor.w	r5, r3, r7
   1d7ee:	faa5 f58c 	sel	r5, r5, ip
   1d7f2:	b995      	cbnz	r5, 1d81a <strcmp+0xb2>
   1d7f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1d7f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1d7fc:	fa82 f54c 	uadd8	r5, r2, ip
   1d800:	ea82 0406 	eor.w	r4, r2, r6
   1d804:	faa4 f48c 	sel	r4, r4, ip
   1d808:	fa83 f54c 	uadd8	r5, r3, ip
   1d80c:	ea83 0507 	eor.w	r5, r3, r7
   1d810:	faa5 f58c 	sel	r5, r5, ip
   1d814:	4325      	orrs	r5, r4
   1d816:	d0db      	beq.n	1d7d0 <strcmp+0x68>
   1d818:	b99c      	cbnz	r4, 1d842 <strcmp+0xda>
   1d81a:	ba2d      	rev	r5, r5
   1d81c:	fab5 f485 	clz	r4, r5
   1d820:	f024 0407 	bic.w	r4, r4, #7
   1d824:	fa27 f104 	lsr.w	r1, r7, r4
   1d828:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1d82c:	fa23 f304 	lsr.w	r3, r3, r4
   1d830:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1d834:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d838:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d83c:	eba0 0001 	sub.w	r0, r0, r1
   1d840:	4770      	bx	lr
   1d842:	ba24      	rev	r4, r4
   1d844:	fab4 f484 	clz	r4, r4
   1d848:	f024 0407 	bic.w	r4, r4, #7
   1d84c:	fa26 f104 	lsr.w	r1, r6, r4
   1d850:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1d854:	fa22 f204 	lsr.w	r2, r2, r4
   1d858:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1d85c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d860:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d864:	eba0 0001 	sub.w	r0, r0, r1
   1d868:	4770      	bx	lr
   1d86a:	f014 0f03 	tst.w	r4, #3
   1d86e:	d13c      	bne.n	1d8ea <strcmp+0x182>
   1d870:	f010 0403 	ands.w	r4, r0, #3
   1d874:	d128      	bne.n	1d8c8 <strcmp+0x160>
   1d876:	f850 2b08 	ldr.w	r2, [r0], #8
   1d87a:	f851 3b08 	ldr.w	r3, [r1], #8
   1d87e:	fa82 f54c 	uadd8	r5, r2, ip
   1d882:	ea82 0503 	eor.w	r5, r2, r3
   1d886:	faa5 f58c 	sel	r5, r5, ip
   1d88a:	b95d      	cbnz	r5, 1d8a4 <strcmp+0x13c>
   1d88c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1d890:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1d894:	fa82 f54c 	uadd8	r5, r2, ip
   1d898:	ea82 0503 	eor.w	r5, r2, r3
   1d89c:	faa5 f58c 	sel	r5, r5, ip
   1d8a0:	2d00      	cmp	r5, #0
   1d8a2:	d0e8      	beq.n	1d876 <strcmp+0x10e>
   1d8a4:	ba2d      	rev	r5, r5
   1d8a6:	fab5 f485 	clz	r4, r5
   1d8aa:	f024 0407 	bic.w	r4, r4, #7
   1d8ae:	fa23 f104 	lsr.w	r1, r3, r4
   1d8b2:	fa22 f204 	lsr.w	r2, r2, r4
   1d8b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1d8ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1d8be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d8c2:	eba0 0001 	sub.w	r0, r0, r1
   1d8c6:	4770      	bx	lr
   1d8c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1d8cc:	f020 0003 	bic.w	r0, r0, #3
   1d8d0:	f850 2b08 	ldr.w	r2, [r0], #8
   1d8d4:	f021 0103 	bic.w	r1, r1, #3
   1d8d8:	f851 3b08 	ldr.w	r3, [r1], #8
   1d8dc:	fa0c f404 	lsl.w	r4, ip, r4
   1d8e0:	ea62 0204 	orn	r2, r2, r4
   1d8e4:	ea63 0304 	orn	r3, r3, r4
   1d8e8:	e7c9      	b.n	1d87e <strcmp+0x116>
   1d8ea:	f010 0403 	ands.w	r4, r0, #3
   1d8ee:	d01a      	beq.n	1d926 <strcmp+0x1be>
   1d8f0:	eba1 0104 	sub.w	r1, r1, r4
   1d8f4:	f020 0003 	bic.w	r0, r0, #3
   1d8f8:	07e4      	lsls	r4, r4, #31
   1d8fa:	f850 2b04 	ldr.w	r2, [r0], #4
   1d8fe:	d006      	beq.n	1d90e <strcmp+0x1a6>
   1d900:	d20f      	bcs.n	1d922 <strcmp+0x1ba>
   1d902:	788b      	ldrb	r3, [r1, #2]
   1d904:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1d908:	1ae4      	subs	r4, r4, r3
   1d90a:	d106      	bne.n	1d91a <strcmp+0x1b2>
   1d90c:	b12b      	cbz	r3, 1d91a <strcmp+0x1b2>
   1d90e:	78cb      	ldrb	r3, [r1, #3]
   1d910:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1d914:	1ae4      	subs	r4, r4, r3
   1d916:	d100      	bne.n	1d91a <strcmp+0x1b2>
   1d918:	b91b      	cbnz	r3, 1d922 <strcmp+0x1ba>
   1d91a:	4620      	mov	r0, r4
   1d91c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1d920:	4770      	bx	lr
   1d922:	f101 0104 	add.w	r1, r1, #4
   1d926:	f850 2b04 	ldr.w	r2, [r0], #4
   1d92a:	07cc      	lsls	r4, r1, #31
   1d92c:	f021 0103 	bic.w	r1, r1, #3
   1d930:	f851 3b04 	ldr.w	r3, [r1], #4
   1d934:	d848      	bhi.n	1d9c8 <strcmp+0x260>
   1d936:	d224      	bcs.n	1d982 <strcmp+0x21a>
   1d938:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1d93c:	fa82 f54c 	uadd8	r5, r2, ip
   1d940:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1d944:	faa5 f58c 	sel	r5, r5, ip
   1d948:	d10a      	bne.n	1d960 <strcmp+0x1f8>
   1d94a:	b965      	cbnz	r5, 1d966 <strcmp+0x1fe>
   1d94c:	f851 3b04 	ldr.w	r3, [r1], #4
   1d950:	ea84 0402 	eor.w	r4, r4, r2
   1d954:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1d958:	d10e      	bne.n	1d978 <strcmp+0x210>
   1d95a:	f850 2b04 	ldr.w	r2, [r0], #4
   1d95e:	e7eb      	b.n	1d938 <strcmp+0x1d0>
   1d960:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1d964:	e055      	b.n	1da12 <strcmp+0x2aa>
   1d966:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1d96a:	d14d      	bne.n	1da08 <strcmp+0x2a0>
   1d96c:	7808      	ldrb	r0, [r1, #0]
   1d96e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1d972:	f1c0 0000 	rsb	r0, r0, #0
   1d976:	4770      	bx	lr
   1d978:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1d97c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1d980:	e047      	b.n	1da12 <strcmp+0x2aa>
   1d982:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1d986:	fa82 f54c 	uadd8	r5, r2, ip
   1d98a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1d98e:	faa5 f58c 	sel	r5, r5, ip
   1d992:	d10a      	bne.n	1d9aa <strcmp+0x242>
   1d994:	b965      	cbnz	r5, 1d9b0 <strcmp+0x248>
   1d996:	f851 3b04 	ldr.w	r3, [r1], #4
   1d99a:	ea84 0402 	eor.w	r4, r4, r2
   1d99e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1d9a2:	d10c      	bne.n	1d9be <strcmp+0x256>
   1d9a4:	f850 2b04 	ldr.w	r2, [r0], #4
   1d9a8:	e7eb      	b.n	1d982 <strcmp+0x21a>
   1d9aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1d9ae:	e030      	b.n	1da12 <strcmp+0x2aa>
   1d9b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1d9b4:	d128      	bne.n	1da08 <strcmp+0x2a0>
   1d9b6:	880b      	ldrh	r3, [r1, #0]
   1d9b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1d9bc:	e029      	b.n	1da12 <strcmp+0x2aa>
   1d9be:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1d9c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1d9c6:	e024      	b.n	1da12 <strcmp+0x2aa>
   1d9c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1d9cc:	fa82 f54c 	uadd8	r5, r2, ip
   1d9d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1d9d4:	faa5 f58c 	sel	r5, r5, ip
   1d9d8:	d10a      	bne.n	1d9f0 <strcmp+0x288>
   1d9da:	b965      	cbnz	r5, 1d9f6 <strcmp+0x28e>
   1d9dc:	f851 3b04 	ldr.w	r3, [r1], #4
   1d9e0:	ea84 0402 	eor.w	r4, r4, r2
   1d9e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1d9e8:	d109      	bne.n	1d9fe <strcmp+0x296>
   1d9ea:	f850 2b04 	ldr.w	r2, [r0], #4
   1d9ee:	e7eb      	b.n	1d9c8 <strcmp+0x260>
   1d9f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1d9f4:	e00d      	b.n	1da12 <strcmp+0x2aa>
   1d9f6:	f015 0fff 	tst.w	r5, #255	; 0xff
   1d9fa:	d105      	bne.n	1da08 <strcmp+0x2a0>
   1d9fc:	680b      	ldr	r3, [r1, #0]
   1d9fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1da02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1da06:	e004      	b.n	1da12 <strcmp+0x2aa>
   1da08:	f04f 0000 	mov.w	r0, #0
   1da0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1da10:	4770      	bx	lr
   1da12:	ba12      	rev	r2, r2
   1da14:	ba1b      	rev	r3, r3
   1da16:	fa82 f44c 	uadd8	r4, r2, ip
   1da1a:	ea82 0403 	eor.w	r4, r2, r3
   1da1e:	faa4 f58c 	sel	r5, r4, ip
   1da22:	fab5 f485 	clz	r4, r5
   1da26:	fa02 f204 	lsl.w	r2, r2, r4
   1da2a:	fa03 f304 	lsl.w	r3, r3, r4
   1da2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1da32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1da36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1da3a:	4770      	bx	lr

0001da3c <strcpy>:
   1da3c:	ea80 0201 	eor.w	r2, r0, r1
   1da40:	4684      	mov	ip, r0
   1da42:	f012 0f03 	tst.w	r2, #3
   1da46:	d14f      	bne.n	1dae8 <strcpy+0xac>
   1da48:	f011 0f03 	tst.w	r1, #3
   1da4c:	d132      	bne.n	1dab4 <strcpy+0x78>
   1da4e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1da52:	f011 0f04 	tst.w	r1, #4
   1da56:	f851 3b04 	ldr.w	r3, [r1], #4
   1da5a:	d00b      	beq.n	1da74 <strcpy+0x38>
   1da5c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1da60:	439a      	bics	r2, r3
   1da62:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1da66:	bf04      	itt	eq
   1da68:	f84c 3b04 	streq.w	r3, [ip], #4
   1da6c:	f851 3b04 	ldreq.w	r3, [r1], #4
   1da70:	d116      	bne.n	1daa0 <strcpy+0x64>
   1da72:	bf00      	nop
   1da74:	f851 4b04 	ldr.w	r4, [r1], #4
   1da78:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1da7c:	439a      	bics	r2, r3
   1da7e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1da82:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1da86:	d10b      	bne.n	1daa0 <strcpy+0x64>
   1da88:	f84c 3b04 	str.w	r3, [ip], #4
   1da8c:	43a2      	bics	r2, r4
   1da8e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1da92:	bf04      	itt	eq
   1da94:	f851 3b04 	ldreq.w	r3, [r1], #4
   1da98:	f84c 4b04 	streq.w	r4, [ip], #4
   1da9c:	d0ea      	beq.n	1da74 <strcpy+0x38>
   1da9e:	4623      	mov	r3, r4
   1daa0:	f80c 3b01 	strb.w	r3, [ip], #1
   1daa4:	f013 0fff 	tst.w	r3, #255	; 0xff
   1daa8:	ea4f 2333 	mov.w	r3, r3, ror #8
   1daac:	d1f8      	bne.n	1daa0 <strcpy+0x64>
   1daae:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dab2:	4770      	bx	lr
   1dab4:	f011 0f01 	tst.w	r1, #1
   1dab8:	d006      	beq.n	1dac8 <strcpy+0x8c>
   1daba:	f811 2b01 	ldrb.w	r2, [r1], #1
   1dabe:	f80c 2b01 	strb.w	r2, [ip], #1
   1dac2:	2a00      	cmp	r2, #0
   1dac4:	bf08      	it	eq
   1dac6:	4770      	bxeq	lr
   1dac8:	f011 0f02 	tst.w	r1, #2
   1dacc:	d0bf      	beq.n	1da4e <strcpy+0x12>
   1dace:	f831 2b02 	ldrh.w	r2, [r1], #2
   1dad2:	f012 0fff 	tst.w	r2, #255	; 0xff
   1dad6:	bf16      	itet	ne
   1dad8:	f82c 2b02 	strhne.w	r2, [ip], #2
   1dadc:	f88c 2000 	strbeq.w	r2, [ip]
   1dae0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1dae4:	d1b3      	bne.n	1da4e <strcpy+0x12>
   1dae6:	4770      	bx	lr
   1dae8:	f811 2b01 	ldrb.w	r2, [r1], #1
   1daec:	f80c 2b01 	strb.w	r2, [ip], #1
   1daf0:	2a00      	cmp	r2, #0
   1daf2:	d1f9      	bne.n	1dae8 <strcpy+0xac>
   1daf4:	4770      	bx	lr
   1daf6:	bf00      	nop

0001daf8 <strncmp>:
   1daf8:	2a00      	cmp	r2, #0
   1dafa:	d041      	beq.n	1db80 <strncmp+0x88>
   1dafc:	ea40 0301 	orr.w	r3, r0, r1
   1db00:	f013 0303 	ands.w	r3, r3, #3
   1db04:	b4f0      	push	{r4, r5, r6, r7}
   1db06:	d125      	bne.n	1db54 <strncmp+0x5c>
   1db08:	2a03      	cmp	r2, #3
   1db0a:	d923      	bls.n	1db54 <strncmp+0x5c>
   1db0c:	6804      	ldr	r4, [r0, #0]
   1db0e:	680d      	ldr	r5, [r1, #0]
   1db10:	42ac      	cmp	r4, r5
   1db12:	d11f      	bne.n	1db54 <strncmp+0x5c>
   1db14:	3a04      	subs	r2, #4
   1db16:	d038      	beq.n	1db8a <strncmp+0x92>
   1db18:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1db1c:	ea25 0404 	bic.w	r4, r5, r4
   1db20:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1db24:	d12e      	bne.n	1db84 <strncmp+0x8c>
   1db26:	3004      	adds	r0, #4
   1db28:	3104      	adds	r1, #4
   1db2a:	e00f      	b.n	1db4c <strncmp+0x54>
   1db2c:	f850 3b04 	ldr.w	r3, [r0], #4
   1db30:	680e      	ldr	r6, [r1, #0]
   1db32:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1db36:	42b3      	cmp	r3, r6
   1db38:	ea24 0403 	bic.w	r4, r4, r3
   1db3c:	f101 0104 	add.w	r1, r1, #4
   1db40:	d126      	bne.n	1db90 <strncmp+0x98>
   1db42:	3a04      	subs	r2, #4
   1db44:	d021      	beq.n	1db8a <strncmp+0x92>
   1db46:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1db4a:	d11b      	bne.n	1db84 <strncmp+0x8c>
   1db4c:	2a03      	cmp	r2, #3
   1db4e:	4607      	mov	r7, r0
   1db50:	460d      	mov	r5, r1
   1db52:	d8eb      	bhi.n	1db2c <strncmp+0x34>
   1db54:	7805      	ldrb	r5, [r0, #0]
   1db56:	780c      	ldrb	r4, [r1, #0]
   1db58:	42ac      	cmp	r4, r5
   1db5a:	f102 33ff 	add.w	r3, r2, #4294967295
   1db5e:	d11a      	bne.n	1db96 <strncmp+0x9e>
   1db60:	b183      	cbz	r3, 1db84 <strncmp+0x8c>
   1db62:	b914      	cbnz	r4, 1db6a <strncmp+0x72>
   1db64:	e00e      	b.n	1db84 <strncmp+0x8c>
   1db66:	b16b      	cbz	r3, 1db84 <strncmp+0x8c>
   1db68:	b17a      	cbz	r2, 1db8a <strncmp+0x92>
   1db6a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1db6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1db72:	42a2      	cmp	r2, r4
   1db74:	f103 33ff 	add.w	r3, r3, #4294967295
   1db78:	d0f5      	beq.n	1db66 <strncmp+0x6e>
   1db7a:	1b10      	subs	r0, r2, r4
   1db7c:	bcf0      	pop	{r4, r5, r6, r7}
   1db7e:	4770      	bx	lr
   1db80:	4610      	mov	r0, r2
   1db82:	4770      	bx	lr
   1db84:	2000      	movs	r0, #0
   1db86:	bcf0      	pop	{r4, r5, r6, r7}
   1db88:	4770      	bx	lr
   1db8a:	4610      	mov	r0, r2
   1db8c:	bcf0      	pop	{r4, r5, r6, r7}
   1db8e:	4770      	bx	lr
   1db90:	4629      	mov	r1, r5
   1db92:	4638      	mov	r0, r7
   1db94:	e7de      	b.n	1db54 <strncmp+0x5c>
   1db96:	462a      	mov	r2, r5
   1db98:	e7ef      	b.n	1db7a <strncmp+0x82>
   1db9a:	bf00      	nop

0001db9c <_strtoul_l.isra.0>:
   1db9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dba0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1dba4:	460e      	mov	r6, r1
   1dba6:	4607      	mov	r7, r0
   1dba8:	4615      	mov	r5, r2
   1dbaa:	4698      	mov	r8, r3
   1dbac:	468a      	mov	sl, r1
   1dbae:	e000      	b.n	1dbb2 <_strtoul_l.isra.0+0x16>
   1dbb0:	46a2      	mov	sl, r4
   1dbb2:	4654      	mov	r4, sl
   1dbb4:	4648      	mov	r0, r9
   1dbb6:	f814 bb01 	ldrb.w	fp, [r4], #1
   1dbba:	f001 fd6b 	bl	1f694 <__locale_ctype_ptr_l>
   1dbbe:	4458      	add	r0, fp
   1dbc0:	7840      	ldrb	r0, [r0, #1]
   1dbc2:	f010 0008 	ands.w	r0, r0, #8
   1dbc6:	d1f3      	bne.n	1dbb0 <_strtoul_l.isra.0+0x14>
   1dbc8:	4659      	mov	r1, fp
   1dbca:	292d      	cmp	r1, #45	; 0x2d
   1dbcc:	d059      	beq.n	1dc82 <_strtoul_l.isra.0+0xe6>
   1dbce:	292b      	cmp	r1, #43	; 0x2b
   1dbd0:	bf04      	itt	eq
   1dbd2:	7821      	ldrbeq	r1, [r4, #0]
   1dbd4:	f10a 0402 	addeq.w	r4, sl, #2
   1dbd8:	f1b8 0f00 	cmp.w	r8, #0
   1dbdc:	d00c      	beq.n	1dbf8 <_strtoul_l.isra.0+0x5c>
   1dbde:	f1b8 0f10 	cmp.w	r8, #16
   1dbe2:	d053      	beq.n	1dc8c <_strtoul_l.isra.0+0xf0>
   1dbe4:	f04f 3cff 	mov.w	ip, #4294967295
   1dbe8:	fbbc fcf8 	udiv	ip, ip, r8
   1dbec:	fb08 fa0c 	mul.w	sl, r8, ip
   1dbf0:	ea6f 0a0a 	mvn.w	sl, sl
   1dbf4:	46c1      	mov	r9, r8
   1dbf6:	e008      	b.n	1dc0a <_strtoul_l.isra.0+0x6e>
   1dbf8:	2930      	cmp	r1, #48	; 0x30
   1dbfa:	d058      	beq.n	1dcae <_strtoul_l.isra.0+0x112>
   1dbfc:	f04f 080a 	mov.w	r8, #10
   1dc00:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 1dce0 <_strtoul_l.isra.0+0x144>
   1dc04:	46c1      	mov	r9, r8
   1dc06:	f04f 0a05 	mov.w	sl, #5
   1dc0a:	2300      	movs	r3, #0
   1dc0c:	469e      	mov	lr, r3
   1dc0e:	e005      	b.n	1dc1c <_strtoul_l.isra.0+0x80>
   1dc10:	d02a      	beq.n	1dc68 <_strtoul_l.isra.0+0xcc>
   1dc12:	fb09 2e0e 	mla	lr, r9, lr, r2
   1dc16:	2301      	movs	r3, #1
   1dc18:	f814 1b01 	ldrb.w	r1, [r4], #1
   1dc1c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1dc20:	2a09      	cmp	r2, #9
   1dc22:	d905      	bls.n	1dc30 <_strtoul_l.isra.0+0x94>
   1dc24:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1dc28:	2a19      	cmp	r2, #25
   1dc2a:	d80a      	bhi.n	1dc42 <_strtoul_l.isra.0+0xa6>
   1dc2c:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   1dc30:	4590      	cmp	r8, r2
   1dc32:	dd0e      	ble.n	1dc52 <_strtoul_l.isra.0+0xb6>
   1dc34:	2b00      	cmp	r3, #0
   1dc36:	db01      	blt.n	1dc3c <_strtoul_l.isra.0+0xa0>
   1dc38:	45e6      	cmp	lr, ip
   1dc3a:	d9e9      	bls.n	1dc10 <_strtoul_l.isra.0+0x74>
   1dc3c:	f04f 33ff 	mov.w	r3, #4294967295
   1dc40:	e7ea      	b.n	1dc18 <_strtoul_l.isra.0+0x7c>
   1dc42:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1dc46:	2a19      	cmp	r2, #25
   1dc48:	d803      	bhi.n	1dc52 <_strtoul_l.isra.0+0xb6>
   1dc4a:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   1dc4e:	4590      	cmp	r8, r2
   1dc50:	dcf0      	bgt.n	1dc34 <_strtoul_l.isra.0+0x98>
   1dc52:	2b00      	cmp	r3, #0
   1dc54:	db0d      	blt.n	1dc72 <_strtoul_l.isra.0+0xd6>
   1dc56:	b108      	cbz	r0, 1dc5c <_strtoul_l.isra.0+0xc0>
   1dc58:	f1ce 0e00 	rsb	lr, lr, #0
   1dc5c:	b10d      	cbz	r5, 1dc62 <_strtoul_l.isra.0+0xc6>
   1dc5e:	b973      	cbnz	r3, 1dc7e <_strtoul_l.isra.0+0xe2>
   1dc60:	602e      	str	r6, [r5, #0]
   1dc62:	4670      	mov	r0, lr
   1dc64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc68:	4552      	cmp	r2, sl
   1dc6a:	ddd2      	ble.n	1dc12 <_strtoul_l.isra.0+0x76>
   1dc6c:	f04f 33ff 	mov.w	r3, #4294967295
   1dc70:	e7d2      	b.n	1dc18 <_strtoul_l.isra.0+0x7c>
   1dc72:	2322      	movs	r3, #34	; 0x22
   1dc74:	603b      	str	r3, [r7, #0]
   1dc76:	f04f 3eff 	mov.w	lr, #4294967295
   1dc7a:	2d00      	cmp	r5, #0
   1dc7c:	d0f1      	beq.n	1dc62 <_strtoul_l.isra.0+0xc6>
   1dc7e:	1e66      	subs	r6, r4, #1
   1dc80:	e7ee      	b.n	1dc60 <_strtoul_l.isra.0+0xc4>
   1dc82:	7821      	ldrb	r1, [r4, #0]
   1dc84:	2001      	movs	r0, #1
   1dc86:	f10a 0402 	add.w	r4, sl, #2
   1dc8a:	e7a5      	b.n	1dbd8 <_strtoul_l.isra.0+0x3c>
   1dc8c:	2930      	cmp	r1, #48	; 0x30
   1dc8e:	d11b      	bne.n	1dcc8 <_strtoul_l.isra.0+0x12c>
   1dc90:	7823      	ldrb	r3, [r4, #0]
   1dc92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1dc96:	2b58      	cmp	r3, #88	; 0x58
   1dc98:	d11c      	bne.n	1dcd4 <_strtoul_l.isra.0+0x138>
   1dc9a:	f04f 0910 	mov.w	r9, #16
   1dc9e:	7861      	ldrb	r1, [r4, #1]
   1dca0:	46c8      	mov	r8, r9
   1dca2:	f04f 0a0f 	mov.w	sl, #15
   1dca6:	3402      	adds	r4, #2
   1dca8:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1dcac:	e7ad      	b.n	1dc0a <_strtoul_l.isra.0+0x6e>
   1dcae:	7823      	ldrb	r3, [r4, #0]
   1dcb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1dcb4:	2b58      	cmp	r3, #88	; 0x58
   1dcb6:	d0f0      	beq.n	1dc9a <_strtoul_l.isra.0+0xfe>
   1dcb8:	f04f 0808 	mov.w	r8, #8
   1dcbc:	46c1      	mov	r9, r8
   1dcbe:	f04f 0a07 	mov.w	sl, #7
   1dcc2:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   1dcc6:	e7a0      	b.n	1dc0a <_strtoul_l.isra.0+0x6e>
   1dcc8:	f04f 0a0f 	mov.w	sl, #15
   1dccc:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1dcd0:	46c1      	mov	r9, r8
   1dcd2:	e79a      	b.n	1dc0a <_strtoul_l.isra.0+0x6e>
   1dcd4:	46c1      	mov	r9, r8
   1dcd6:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1dcda:	f04f 0a0f 	mov.w	sl, #15
   1dcde:	e794      	b.n	1dc0a <_strtoul_l.isra.0+0x6e>
   1dce0:	19999999 	.word	0x19999999

0001dce4 <_strtoul_r>:
   1dce4:	b530      	push	{r4, r5, lr}
   1dce6:	4c06      	ldr	r4, [pc, #24]	; (1dd00 <_strtoul_r+0x1c>)
   1dce8:	4d06      	ldr	r5, [pc, #24]	; (1dd04 <_strtoul_r+0x20>)
   1dcea:	6824      	ldr	r4, [r4, #0]
   1dcec:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1dcee:	b083      	sub	sp, #12
   1dcf0:	2c00      	cmp	r4, #0
   1dcf2:	bf08      	it	eq
   1dcf4:	462c      	moveq	r4, r5
   1dcf6:	9400      	str	r4, [sp, #0]
   1dcf8:	f7ff ff50 	bl	1db9c <_strtoul_l.isra.0>
   1dcfc:	b003      	add	sp, #12
   1dcfe:	bd30      	pop	{r4, r5, pc}
   1dd00:	20000248 	.word	0x20000248
   1dd04:	20000ad8 	.word	0x20000ad8

0001dd08 <strtoul>:
   1dd08:	b530      	push	{r4, r5, lr}
   1dd0a:	4c08      	ldr	r4, [pc, #32]	; (1dd2c <strtoul+0x24>)
   1dd0c:	4b08      	ldr	r3, [pc, #32]	; (1dd30 <strtoul+0x28>)
   1dd0e:	6825      	ldr	r5, [r4, #0]
   1dd10:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   1dd12:	b083      	sub	sp, #12
   1dd14:	2c00      	cmp	r4, #0
   1dd16:	bf08      	it	eq
   1dd18:	461c      	moveq	r4, r3
   1dd1a:	9400      	str	r4, [sp, #0]
   1dd1c:	4613      	mov	r3, r2
   1dd1e:	460a      	mov	r2, r1
   1dd20:	4601      	mov	r1, r0
   1dd22:	4628      	mov	r0, r5
   1dd24:	f7ff ff3a 	bl	1db9c <_strtoul_l.isra.0>
   1dd28:	b003      	add	sp, #12
   1dd2a:	bd30      	pop	{r4, r5, pc}
   1dd2c:	20000248 	.word	0x20000248
   1dd30:	20000ad8 	.word	0x20000ad8

0001dd34 <__ssprint_r>:
   1dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd38:	6893      	ldr	r3, [r2, #8]
   1dd3a:	b083      	sub	sp, #12
   1dd3c:	4690      	mov	r8, r2
   1dd3e:	2b00      	cmp	r3, #0
   1dd40:	d070      	beq.n	1de24 <__ssprint_r+0xf0>
   1dd42:	4682      	mov	sl, r0
   1dd44:	460c      	mov	r4, r1
   1dd46:	6817      	ldr	r7, [r2, #0]
   1dd48:	688d      	ldr	r5, [r1, #8]
   1dd4a:	6808      	ldr	r0, [r1, #0]
   1dd4c:	e042      	b.n	1ddd4 <__ssprint_r+0xa0>
   1dd4e:	89a3      	ldrh	r3, [r4, #12]
   1dd50:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1dd54:	d02e      	beq.n	1ddb4 <__ssprint_r+0x80>
   1dd56:	6965      	ldr	r5, [r4, #20]
   1dd58:	6921      	ldr	r1, [r4, #16]
   1dd5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1dd5e:	eba0 0b01 	sub.w	fp, r0, r1
   1dd62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1dd66:	f10b 0001 	add.w	r0, fp, #1
   1dd6a:	106d      	asrs	r5, r5, #1
   1dd6c:	4430      	add	r0, r6
   1dd6e:	42a8      	cmp	r0, r5
   1dd70:	462a      	mov	r2, r5
   1dd72:	bf84      	itt	hi
   1dd74:	4605      	movhi	r5, r0
   1dd76:	462a      	movhi	r2, r5
   1dd78:	055b      	lsls	r3, r3, #21
   1dd7a:	d538      	bpl.n	1ddee <__ssprint_r+0xba>
   1dd7c:	4611      	mov	r1, r2
   1dd7e:	4650      	mov	r0, sl
   1dd80:	f7ff f96c 	bl	1d05c <_malloc_r>
   1dd84:	2800      	cmp	r0, #0
   1dd86:	d03c      	beq.n	1de02 <__ssprint_r+0xce>
   1dd88:	465a      	mov	r2, fp
   1dd8a:	6921      	ldr	r1, [r4, #16]
   1dd8c:	9001      	str	r0, [sp, #4]
   1dd8e:	f7fe fb79 	bl	1c484 <memcpy>
   1dd92:	89a2      	ldrh	r2, [r4, #12]
   1dd94:	9b01      	ldr	r3, [sp, #4]
   1dd96:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1dd9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1dd9e:	81a2      	strh	r2, [r4, #12]
   1dda0:	eba5 020b 	sub.w	r2, r5, fp
   1dda4:	eb03 000b 	add.w	r0, r3, fp
   1dda8:	6165      	str	r5, [r4, #20]
   1ddaa:	6123      	str	r3, [r4, #16]
   1ddac:	6020      	str	r0, [r4, #0]
   1ddae:	60a2      	str	r2, [r4, #8]
   1ddb0:	4635      	mov	r5, r6
   1ddb2:	46b3      	mov	fp, r6
   1ddb4:	465a      	mov	r2, fp
   1ddb6:	4649      	mov	r1, r9
   1ddb8:	f001 fcc2 	bl	1f740 <memmove>
   1ddbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1ddc0:	68a2      	ldr	r2, [r4, #8]
   1ddc2:	6820      	ldr	r0, [r4, #0]
   1ddc4:	1b55      	subs	r5, r2, r5
   1ddc6:	4458      	add	r0, fp
   1ddc8:	1b9e      	subs	r6, r3, r6
   1ddca:	60a5      	str	r5, [r4, #8]
   1ddcc:	6020      	str	r0, [r4, #0]
   1ddce:	f8c8 6008 	str.w	r6, [r8, #8]
   1ddd2:	b33e      	cbz	r6, 1de24 <__ssprint_r+0xf0>
   1ddd4:	687e      	ldr	r6, [r7, #4]
   1ddd6:	463b      	mov	r3, r7
   1ddd8:	3708      	adds	r7, #8
   1ddda:	2e00      	cmp	r6, #0
   1dddc:	d0fa      	beq.n	1ddd4 <__ssprint_r+0xa0>
   1ddde:	42ae      	cmp	r6, r5
   1dde0:	f8d3 9000 	ldr.w	r9, [r3]
   1dde4:	46ab      	mov	fp, r5
   1dde6:	d2b2      	bcs.n	1dd4e <__ssprint_r+0x1a>
   1dde8:	4635      	mov	r5, r6
   1ddea:	46b3      	mov	fp, r6
   1ddec:	e7e2      	b.n	1ddb4 <__ssprint_r+0x80>
   1ddee:	4650      	mov	r0, sl
   1ddf0:	f001 fd0a 	bl	1f808 <_realloc_r>
   1ddf4:	4603      	mov	r3, r0
   1ddf6:	2800      	cmp	r0, #0
   1ddf8:	d1d2      	bne.n	1dda0 <__ssprint_r+0x6c>
   1ddfa:	6921      	ldr	r1, [r4, #16]
   1ddfc:	4650      	mov	r0, sl
   1ddfe:	f001 fb47 	bl	1f490 <_free_r>
   1de02:	230c      	movs	r3, #12
   1de04:	f8ca 3000 	str.w	r3, [sl]
   1de08:	89a3      	ldrh	r3, [r4, #12]
   1de0a:	2200      	movs	r2, #0
   1de0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1de10:	f04f 30ff 	mov.w	r0, #4294967295
   1de14:	81a3      	strh	r3, [r4, #12]
   1de16:	f8c8 2008 	str.w	r2, [r8, #8]
   1de1a:	f8c8 2004 	str.w	r2, [r8, #4]
   1de1e:	b003      	add	sp, #12
   1de20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de24:	2000      	movs	r0, #0
   1de26:	f8c8 0004 	str.w	r0, [r8, #4]
   1de2a:	b003      	add	sp, #12
   1de2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001de30 <_svfiprintf_r>:
   1de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de34:	b0ad      	sub	sp, #180	; 0xb4
   1de36:	460c      	mov	r4, r1
   1de38:	9105      	str	r1, [sp, #20]
   1de3a:	8989      	ldrh	r1, [r1, #12]
   1de3c:	9307      	str	r3, [sp, #28]
   1de3e:	060d      	lsls	r5, r1, #24
   1de40:	900a      	str	r0, [sp, #40]	; 0x28
   1de42:	d503      	bpl.n	1de4c <_svfiprintf_r+0x1c>
   1de44:	6923      	ldr	r3, [r4, #16]
   1de46:	2b00      	cmp	r3, #0
   1de48:	f000 84d6 	beq.w	1e7f8 <_svfiprintf_r+0x9c8>
   1de4c:	2300      	movs	r3, #0
   1de4e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   1de52:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1de54:	930b      	str	r3, [sp, #44]	; 0x2c
   1de56:	4693      	mov	fp, r2
   1de58:	9311      	str	r3, [sp, #68]	; 0x44
   1de5a:	9310      	str	r3, [sp, #64]	; 0x40
   1de5c:	9302      	str	r3, [sp, #8]
   1de5e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   1de62:	46d1      	mov	r9, sl
   1de64:	f89b 3000 	ldrb.w	r3, [fp]
   1de68:	465c      	mov	r4, fp
   1de6a:	b1eb      	cbz	r3, 1dea8 <_svfiprintf_r+0x78>
   1de6c:	2b25      	cmp	r3, #37	; 0x25
   1de6e:	d102      	bne.n	1de76 <_svfiprintf_r+0x46>
   1de70:	e01a      	b.n	1dea8 <_svfiprintf_r+0x78>
   1de72:	2b25      	cmp	r3, #37	; 0x25
   1de74:	d003      	beq.n	1de7e <_svfiprintf_r+0x4e>
   1de76:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1de7a:	2b00      	cmp	r3, #0
   1de7c:	d1f9      	bne.n	1de72 <_svfiprintf_r+0x42>
   1de7e:	eba4 050b 	sub.w	r5, r4, fp
   1de82:	b18d      	cbz	r5, 1dea8 <_svfiprintf_r+0x78>
   1de84:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1de86:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1de88:	f8c9 b000 	str.w	fp, [r9]
   1de8c:	3301      	adds	r3, #1
   1de8e:	442a      	add	r2, r5
   1de90:	2b07      	cmp	r3, #7
   1de92:	f8c9 5004 	str.w	r5, [r9, #4]
   1de96:	9211      	str	r2, [sp, #68]	; 0x44
   1de98:	9310      	str	r3, [sp, #64]	; 0x40
   1de9a:	f300 83c3 	bgt.w	1e624 <_svfiprintf_r+0x7f4>
   1de9e:	f109 0908 	add.w	r9, r9, #8
   1dea2:	9b02      	ldr	r3, [sp, #8]
   1dea4:	442b      	add	r3, r5
   1dea6:	9302      	str	r3, [sp, #8]
   1dea8:	7823      	ldrb	r3, [r4, #0]
   1deaa:	2b00      	cmp	r3, #0
   1deac:	f000 834b 	beq.w	1e546 <_svfiprintf_r+0x716>
   1deb0:	2000      	movs	r0, #0
   1deb2:	f04f 0300 	mov.w	r3, #0
   1deb6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1deba:	f104 0b01 	add.w	fp, r4, #1
   1debe:	7862      	ldrb	r2, [r4, #1]
   1dec0:	4605      	mov	r5, r0
   1dec2:	4603      	mov	r3, r0
   1dec4:	f04f 38ff 	mov.w	r8, #4294967295
   1dec8:	4604      	mov	r4, r0
   1deca:	f10b 0b01 	add.w	fp, fp, #1
   1dece:	f1a2 0120 	sub.w	r1, r2, #32
   1ded2:	2958      	cmp	r1, #88	; 0x58
   1ded4:	f200 826b 	bhi.w	1e3ae <_svfiprintf_r+0x57e>
   1ded8:	e8df f011 	tbh	[pc, r1, lsl #1]
   1dedc:	026900bd 	.word	0x026900bd
   1dee0:	00b80269 	.word	0x00b80269
   1dee4:	02690269 	.word	0x02690269
   1dee8:	02690269 	.word	0x02690269
   1deec:	02690269 	.word	0x02690269
   1def0:	00b30059 	.word	0x00b30059
   1def4:	00630269 	.word	0x00630269
   1def8:	026901c0 	.word	0x026901c0
   1defc:	01ad01bb 	.word	0x01ad01bb
   1df00:	01ad01ad 	.word	0x01ad01ad
   1df04:	01ad01ad 	.word	0x01ad01ad
   1df08:	01ad01ad 	.word	0x01ad01ad
   1df0c:	01ad01ad 	.word	0x01ad01ad
   1df10:	02690269 	.word	0x02690269
   1df14:	02690269 	.word	0x02690269
   1df18:	02690269 	.word	0x02690269
   1df1c:	02690269 	.word	0x02690269
   1df20:	02690269 	.word	0x02690269
   1df24:	0269015f 	.word	0x0269015f
   1df28:	02690269 	.word	0x02690269
   1df2c:	02690269 	.word	0x02690269
   1df30:	02690269 	.word	0x02690269
   1df34:	02690269 	.word	0x02690269
   1df38:	014d0269 	.word	0x014d0269
   1df3c:	02690269 	.word	0x02690269
   1df40:	02690269 	.word	0x02690269
   1df44:	013c0269 	.word	0x013c0269
   1df48:	02690269 	.word	0x02690269
   1df4c:	02690125 	.word	0x02690125
   1df50:	02690269 	.word	0x02690269
   1df54:	02690269 	.word	0x02690269
   1df58:	02690269 	.word	0x02690269
   1df5c:	02690269 	.word	0x02690269
   1df60:	00c50269 	.word	0x00c50269
   1df64:	02690200 	.word	0x02690200
   1df68:	02690269 	.word	0x02690269
   1df6c:	020001fb 	.word	0x020001fb
   1df70:	02690269 	.word	0x02690269
   1df74:	026901ee 	.word	0x026901ee
   1df78:	007a01da 	.word	0x007a01da
   1df7c:	02310236 	.word	0x02310236
   1df80:	020e0269 	.word	0x020e0269
   1df84:	00680269 	.word	0x00680269
   1df88:	02690269 	.word	0x02690269
   1df8c:	008f      	.short	0x008f
   1df8e:	9907      	ldr	r1, [sp, #28]
   1df90:	680c      	ldr	r4, [r1, #0]
   1df92:	460a      	mov	r2, r1
   1df94:	2c00      	cmp	r4, #0
   1df96:	f102 0204 	add.w	r2, r2, #4
   1df9a:	f280 83c9 	bge.w	1e730 <_svfiprintf_r+0x900>
   1df9e:	4264      	negs	r4, r4
   1dfa0:	9207      	str	r2, [sp, #28]
   1dfa2:	f043 0304 	orr.w	r3, r3, #4
   1dfa6:	f89b 2000 	ldrb.w	r2, [fp]
   1dfaa:	e78e      	b.n	1deca <_svfiprintf_r+0x9a>
   1dfac:	9406      	str	r4, [sp, #24]
   1dfae:	069c      	lsls	r4, r3, #26
   1dfb0:	f100 80d6 	bmi.w	1e160 <_svfiprintf_r+0x330>
   1dfb4:	9907      	ldr	r1, [sp, #28]
   1dfb6:	06d8      	lsls	r0, r3, #27
   1dfb8:	460a      	mov	r2, r1
   1dfba:	f100 820a 	bmi.w	1e3d2 <_svfiprintf_r+0x5a2>
   1dfbe:	065e      	lsls	r6, r3, #25
   1dfc0:	f140 8207 	bpl.w	1e3d2 <_svfiprintf_r+0x5a2>
   1dfc4:	880c      	ldrh	r4, [r1, #0]
   1dfc6:	3104      	adds	r1, #4
   1dfc8:	2500      	movs	r5, #0
   1dfca:	2201      	movs	r2, #1
   1dfcc:	9107      	str	r1, [sp, #28]
   1dfce:	e1cc      	b.n	1e36a <_svfiprintf_r+0x53a>
   1dfd0:	f013 0220 	ands.w	r2, r3, #32
   1dfd4:	9406      	str	r4, [sp, #24]
   1dfd6:	f040 80d5 	bne.w	1e184 <_svfiprintf_r+0x354>
   1dfda:	f013 0110 	ands.w	r1, r3, #16
   1dfde:	f040 81fe 	bne.w	1e3de <_svfiprintf_r+0x5ae>
   1dfe2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   1dfe6:	f000 81fa 	beq.w	1e3de <_svfiprintf_r+0x5ae>
   1dfea:	9807      	ldr	r0, [sp, #28]
   1dfec:	460a      	mov	r2, r1
   1dfee:	4601      	mov	r1, r0
   1dff0:	3104      	adds	r1, #4
   1dff2:	8804      	ldrh	r4, [r0, #0]
   1dff4:	9107      	str	r1, [sp, #28]
   1dff6:	2500      	movs	r5, #0
   1dff8:	e1b7      	b.n	1e36a <_svfiprintf_r+0x53a>
   1dffa:	9406      	str	r4, [sp, #24]
   1dffc:	2800      	cmp	r0, #0
   1dffe:	f040 8431 	bne.w	1e864 <_svfiprintf_r+0xa34>
   1e002:	49ba      	ldr	r1, [pc, #744]	; (1e2ec <_svfiprintf_r+0x4bc>)
   1e004:	910b      	str	r1, [sp, #44]	; 0x2c
   1e006:	069d      	lsls	r5, r3, #26
   1e008:	f100 8096 	bmi.w	1e138 <_svfiprintf_r+0x308>
   1e00c:	9807      	ldr	r0, [sp, #28]
   1e00e:	06dc      	lsls	r4, r3, #27
   1e010:	4601      	mov	r1, r0
   1e012:	d402      	bmi.n	1e01a <_svfiprintf_r+0x1ea>
   1e014:	0658      	lsls	r0, r3, #25
   1e016:	f100 83a9 	bmi.w	1e76c <_svfiprintf_r+0x93c>
   1e01a:	680c      	ldr	r4, [r1, #0]
   1e01c:	3104      	adds	r1, #4
   1e01e:	9107      	str	r1, [sp, #28]
   1e020:	2500      	movs	r5, #0
   1e022:	07d9      	lsls	r1, r3, #31
   1e024:	f140 8094 	bpl.w	1e150 <_svfiprintf_r+0x320>
   1e028:	ea54 0105 	orrs.w	r1, r4, r5
   1e02c:	f000 8090 	beq.w	1e150 <_svfiprintf_r+0x320>
   1e030:	2130      	movs	r1, #48	; 0x30
   1e032:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1e036:	f043 0302 	orr.w	r3, r3, #2
   1e03a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1e03e:	2202      	movs	r2, #2
   1e040:	e193      	b.n	1e36a <_svfiprintf_r+0x53a>
   1e042:	f89b 2000 	ldrb.w	r2, [fp]
   1e046:	2001      	movs	r0, #1
   1e048:	252b      	movs	r5, #43	; 0x2b
   1e04a:	e73e      	b.n	1deca <_svfiprintf_r+0x9a>
   1e04c:	f043 0301 	orr.w	r3, r3, #1
   1e050:	f89b 2000 	ldrb.w	r2, [fp]
   1e054:	e739      	b.n	1deca <_svfiprintf_r+0x9a>
   1e056:	f89b 2000 	ldrb.w	r2, [fp]
   1e05a:	2d00      	cmp	r5, #0
   1e05c:	f47f af35 	bne.w	1deca <_svfiprintf_r+0x9a>
   1e060:	2001      	movs	r0, #1
   1e062:	2520      	movs	r5, #32
   1e064:	e731      	b.n	1deca <_svfiprintf_r+0x9a>
   1e066:	9907      	ldr	r1, [sp, #28]
   1e068:	9406      	str	r4, [sp, #24]
   1e06a:	680a      	ldr	r2, [r1, #0]
   1e06c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1e070:	f04f 0000 	mov.w	r0, #0
   1e074:	460a      	mov	r2, r1
   1e076:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1e07a:	3204      	adds	r2, #4
   1e07c:	2001      	movs	r0, #1
   1e07e:	9000      	str	r0, [sp, #0]
   1e080:	9207      	str	r2, [sp, #28]
   1e082:	9004      	str	r0, [sp, #16]
   1e084:	ae12      	add	r6, sp, #72	; 0x48
   1e086:	9301      	str	r3, [sp, #4]
   1e088:	f04f 0800 	mov.w	r8, #0
   1e08c:	9b01      	ldr	r3, [sp, #4]
   1e08e:	f013 0302 	ands.w	r3, r3, #2
   1e092:	9308      	str	r3, [sp, #32]
   1e094:	d002      	beq.n	1e09c <_svfiprintf_r+0x26c>
   1e096:	9b00      	ldr	r3, [sp, #0]
   1e098:	3302      	adds	r3, #2
   1e09a:	9300      	str	r3, [sp, #0]
   1e09c:	9b01      	ldr	r3, [sp, #4]
   1e09e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   1e0a2:	9309      	str	r3, [sp, #36]	; 0x24
   1e0a4:	f040 81a2 	bne.w	1e3ec <_svfiprintf_r+0x5bc>
   1e0a8:	9b06      	ldr	r3, [sp, #24]
   1e0aa:	9a00      	ldr	r2, [sp, #0]
   1e0ac:	1a9c      	subs	r4, r3, r2
   1e0ae:	2c00      	cmp	r4, #0
   1e0b0:	f340 819c 	ble.w	1e3ec <_svfiprintf_r+0x5bc>
   1e0b4:	2c10      	cmp	r4, #16
   1e0b6:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e0b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e0ba:	4d8d      	ldr	r5, [pc, #564]	; (1e2f0 <_svfiprintf_r+0x4c0>)
   1e0bc:	dd25      	ble.n	1e10a <_svfiprintf_r+0x2da>
   1e0be:	4648      	mov	r0, r9
   1e0c0:	2310      	movs	r3, #16
   1e0c2:	46c1      	mov	r9, r8
   1e0c4:	46b0      	mov	r8, r6
   1e0c6:	9e05      	ldr	r6, [sp, #20]
   1e0c8:	e004      	b.n	1e0d4 <_svfiprintf_r+0x2a4>
   1e0ca:	3c10      	subs	r4, #16
   1e0cc:	2c10      	cmp	r4, #16
   1e0ce:	f100 0008 	add.w	r0, r0, #8
   1e0d2:	dd17      	ble.n	1e104 <_svfiprintf_r+0x2d4>
   1e0d4:	3201      	adds	r2, #1
   1e0d6:	3110      	adds	r1, #16
   1e0d8:	2a07      	cmp	r2, #7
   1e0da:	9111      	str	r1, [sp, #68]	; 0x44
   1e0dc:	9210      	str	r2, [sp, #64]	; 0x40
   1e0de:	6005      	str	r5, [r0, #0]
   1e0e0:	6043      	str	r3, [r0, #4]
   1e0e2:	ddf2      	ble.n	1e0ca <_svfiprintf_r+0x29a>
   1e0e4:	aa0f      	add	r2, sp, #60	; 0x3c
   1e0e6:	4631      	mov	r1, r6
   1e0e8:	4638      	mov	r0, r7
   1e0ea:	9303      	str	r3, [sp, #12]
   1e0ec:	f7ff fe22 	bl	1dd34 <__ssprint_r>
   1e0f0:	2800      	cmp	r0, #0
   1e0f2:	f040 822f 	bne.w	1e554 <_svfiprintf_r+0x724>
   1e0f6:	3c10      	subs	r4, #16
   1e0f8:	2c10      	cmp	r4, #16
   1e0fa:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e0fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1e0fe:	9b03      	ldr	r3, [sp, #12]
   1e100:	4650      	mov	r0, sl
   1e102:	dce7      	bgt.n	1e0d4 <_svfiprintf_r+0x2a4>
   1e104:	4646      	mov	r6, r8
   1e106:	46c8      	mov	r8, r9
   1e108:	4681      	mov	r9, r0
   1e10a:	1c53      	adds	r3, r2, #1
   1e10c:	4421      	add	r1, r4
   1e10e:	2b07      	cmp	r3, #7
   1e110:	9111      	str	r1, [sp, #68]	; 0x44
   1e112:	9310      	str	r3, [sp, #64]	; 0x40
   1e114:	f8c9 5000 	str.w	r5, [r9]
   1e118:	f8c9 4004 	str.w	r4, [r9, #4]
   1e11c:	f300 82f2 	bgt.w	1e704 <_svfiprintf_r+0x8d4>
   1e120:	f109 0908 	add.w	r9, r9, #8
   1e124:	e164      	b.n	1e3f0 <_svfiprintf_r+0x5c0>
   1e126:	9406      	str	r4, [sp, #24]
   1e128:	2800      	cmp	r0, #0
   1e12a:	f040 83a5 	bne.w	1e878 <_svfiprintf_r+0xa48>
   1e12e:	4971      	ldr	r1, [pc, #452]	; (1e2f4 <_svfiprintf_r+0x4c4>)
   1e130:	910b      	str	r1, [sp, #44]	; 0x2c
   1e132:	069d      	lsls	r5, r3, #26
   1e134:	f57f af6a 	bpl.w	1e00c <_svfiprintf_r+0x1dc>
   1e138:	9c07      	ldr	r4, [sp, #28]
   1e13a:	3407      	adds	r4, #7
   1e13c:	f024 0107 	bic.w	r1, r4, #7
   1e140:	f101 0008 	add.w	r0, r1, #8
   1e144:	e9d1 4500 	ldrd	r4, r5, [r1]
   1e148:	07d9      	lsls	r1, r3, #31
   1e14a:	9007      	str	r0, [sp, #28]
   1e14c:	f53f af6c 	bmi.w	1e028 <_svfiprintf_r+0x1f8>
   1e150:	2202      	movs	r2, #2
   1e152:	e10a      	b.n	1e36a <_svfiprintf_r+0x53a>
   1e154:	f043 0310 	orr.w	r3, r3, #16
   1e158:	9406      	str	r4, [sp, #24]
   1e15a:	069c      	lsls	r4, r3, #26
   1e15c:	f57f af2a 	bpl.w	1dfb4 <_svfiprintf_r+0x184>
   1e160:	9c07      	ldr	r4, [sp, #28]
   1e162:	3407      	adds	r4, #7
   1e164:	f024 0207 	bic.w	r2, r4, #7
   1e168:	f102 0108 	add.w	r1, r2, #8
   1e16c:	e9d2 4500 	ldrd	r4, r5, [r2]
   1e170:	9107      	str	r1, [sp, #28]
   1e172:	2201      	movs	r2, #1
   1e174:	e0f9      	b.n	1e36a <_svfiprintf_r+0x53a>
   1e176:	f043 0310 	orr.w	r3, r3, #16
   1e17a:	f013 0220 	ands.w	r2, r3, #32
   1e17e:	9406      	str	r4, [sp, #24]
   1e180:	f43f af2b 	beq.w	1dfda <_svfiprintf_r+0x1aa>
   1e184:	9c07      	ldr	r4, [sp, #28]
   1e186:	3407      	adds	r4, #7
   1e188:	f024 0207 	bic.w	r2, r4, #7
   1e18c:	f102 0108 	add.w	r1, r2, #8
   1e190:	e9d2 4500 	ldrd	r4, r5, [r2]
   1e194:	9107      	str	r1, [sp, #28]
   1e196:	2200      	movs	r2, #0
   1e198:	e0e7      	b.n	1e36a <_svfiprintf_r+0x53a>
   1e19a:	9406      	str	r4, [sp, #24]
   1e19c:	2800      	cmp	r0, #0
   1e19e:	f040 8365 	bne.w	1e86c <_svfiprintf_r+0xa3c>
   1e1a2:	f043 0310 	orr.w	r3, r3, #16
   1e1a6:	069c      	lsls	r4, r3, #26
   1e1a8:	f100 82fa 	bmi.w	1e7a0 <_svfiprintf_r+0x970>
   1e1ac:	06d8      	lsls	r0, r3, #27
   1e1ae:	d402      	bmi.n	1e1b6 <_svfiprintf_r+0x386>
   1e1b0:	0659      	lsls	r1, r3, #25
   1e1b2:	f100 82c4 	bmi.w	1e73e <_svfiprintf_r+0x90e>
   1e1b6:	9907      	ldr	r1, [sp, #28]
   1e1b8:	680c      	ldr	r4, [r1, #0]
   1e1ba:	460a      	mov	r2, r1
   1e1bc:	17e5      	asrs	r5, r4, #31
   1e1be:	3204      	adds	r2, #4
   1e1c0:	9207      	str	r2, [sp, #28]
   1e1c2:	4620      	mov	r0, r4
   1e1c4:	4629      	mov	r1, r5
   1e1c6:	2800      	cmp	r0, #0
   1e1c8:	f171 0200 	sbcs.w	r2, r1, #0
   1e1cc:	f2c0 82c5 	blt.w	1e75a <_svfiprintf_r+0x92a>
   1e1d0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1e1d4:	9203      	str	r2, [sp, #12]
   1e1d6:	f1b8 3fff 	cmp.w	r8, #4294967295
   1e1da:	f04f 0201 	mov.w	r2, #1
   1e1de:	f040 80ce 	bne.w	1e37e <_svfiprintf_r+0x54e>
   1e1e2:	ea54 0105 	orrs.w	r1, r4, r5
   1e1e6:	f000 820d 	beq.w	1e604 <_svfiprintf_r+0x7d4>
   1e1ea:	9301      	str	r3, [sp, #4]
   1e1ec:	2a01      	cmp	r2, #1
   1e1ee:	f000 826b 	beq.w	1e6c8 <_svfiprintf_r+0x898>
   1e1f2:	2a02      	cmp	r2, #2
   1e1f4:	f040 822d 	bne.w	1e652 <_svfiprintf_r+0x822>
   1e1f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1e1fa:	4656      	mov	r6, sl
   1e1fc:	0923      	lsrs	r3, r4, #4
   1e1fe:	f004 010f 	and.w	r1, r4, #15
   1e202:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1e206:	092a      	lsrs	r2, r5, #4
   1e208:	461c      	mov	r4, r3
   1e20a:	4615      	mov	r5, r2
   1e20c:	5c43      	ldrb	r3, [r0, r1]
   1e20e:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1e212:	ea54 0305 	orrs.w	r3, r4, r5
   1e216:	d1f1      	bne.n	1e1fc <_svfiprintf_r+0x3cc>
   1e218:	ebaa 0306 	sub.w	r3, sl, r6
   1e21c:	9304      	str	r3, [sp, #16]
   1e21e:	9b04      	ldr	r3, [sp, #16]
   1e220:	9a03      	ldr	r2, [sp, #12]
   1e222:	4543      	cmp	r3, r8
   1e224:	bfb8      	it	lt
   1e226:	4643      	movlt	r3, r8
   1e228:	9300      	str	r3, [sp, #0]
   1e22a:	2a00      	cmp	r2, #0
   1e22c:	f43f af2e 	beq.w	1e08c <_svfiprintf_r+0x25c>
   1e230:	3301      	adds	r3, #1
   1e232:	9300      	str	r3, [sp, #0]
   1e234:	e72a      	b.n	1e08c <_svfiprintf_r+0x25c>
   1e236:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1e23a:	2400      	movs	r4, #0
   1e23c:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1e240:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1e244:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   1e248:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1e24c:	2909      	cmp	r1, #9
   1e24e:	d9f5      	bls.n	1e23c <_svfiprintf_r+0x40c>
   1e250:	e63d      	b.n	1dece <_svfiprintf_r+0x9e>
   1e252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e256:	f89b 2000 	ldrb.w	r2, [fp]
   1e25a:	e636      	b.n	1deca <_svfiprintf_r+0x9a>
   1e25c:	f89b 2000 	ldrb.w	r2, [fp]
   1e260:	2a2a      	cmp	r2, #42	; 0x2a
   1e262:	f10b 0601 	add.w	r6, fp, #1
   1e266:	f000 82e7 	beq.w	1e838 <_svfiprintf_r+0xa08>
   1e26a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1e26e:	2909      	cmp	r1, #9
   1e270:	46b3      	mov	fp, r6
   1e272:	f04f 0800 	mov.w	r8, #0
   1e276:	f63f ae2a 	bhi.w	1dece <_svfiprintf_r+0x9e>
   1e27a:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1e27e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1e282:	eb01 0848 	add.w	r8, r1, r8, lsl #1
   1e286:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1e28a:	2909      	cmp	r1, #9
   1e28c:	d9f5      	bls.n	1e27a <_svfiprintf_r+0x44a>
   1e28e:	e61e      	b.n	1dece <_svfiprintf_r+0x9e>
   1e290:	2800      	cmp	r0, #0
   1e292:	f040 82dd 	bne.w	1e850 <_svfiprintf_r+0xa20>
   1e296:	069a      	lsls	r2, r3, #26
   1e298:	f100 8276 	bmi.w	1e788 <_svfiprintf_r+0x958>
   1e29c:	06de      	lsls	r6, r3, #27
   1e29e:	f100 8297 	bmi.w	1e7d0 <_svfiprintf_r+0x9a0>
   1e2a2:	065d      	lsls	r5, r3, #25
   1e2a4:	f140 8294 	bpl.w	1e7d0 <_svfiprintf_r+0x9a0>
   1e2a8:	9a07      	ldr	r2, [sp, #28]
   1e2aa:	6813      	ldr	r3, [r2, #0]
   1e2ac:	3204      	adds	r2, #4
   1e2ae:	9207      	str	r2, [sp, #28]
   1e2b0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1e2b4:	801a      	strh	r2, [r3, #0]
   1e2b6:	e5d5      	b.n	1de64 <_svfiprintf_r+0x34>
   1e2b8:	f89b 2000 	ldrb.w	r2, [fp]
   1e2bc:	2a6c      	cmp	r2, #108	; 0x6c
   1e2be:	bf03      	ittte	eq
   1e2c0:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
   1e2c4:	f043 0320 	orreq.w	r3, r3, #32
   1e2c8:	f10b 0b01 	addeq.w	fp, fp, #1
   1e2cc:	f043 0310 	orrne.w	r3, r3, #16
   1e2d0:	e5fb      	b.n	1deca <_svfiprintf_r+0x9a>
   1e2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e2d6:	f89b 2000 	ldrb.w	r2, [fp]
   1e2da:	e5f6      	b.n	1deca <_svfiprintf_r+0x9a>
   1e2dc:	9406      	str	r4, [sp, #24]
   1e2de:	2800      	cmp	r0, #0
   1e2e0:	f43f af61 	beq.w	1e1a6 <_svfiprintf_r+0x376>
   1e2e4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e2e8:	e75d      	b.n	1e1a6 <_svfiprintf_r+0x376>
   1e2ea:	bf00      	nop
   1e2ec:	00022538 	.word	0x00022538
   1e2f0:	00022554 	.word	0x00022554
   1e2f4:	00022524 	.word	0x00022524
   1e2f8:	9907      	ldr	r1, [sp, #28]
   1e2fa:	9406      	str	r4, [sp, #24]
   1e2fc:	680e      	ldr	r6, [r1, #0]
   1e2fe:	f04f 0200 	mov.w	r2, #0
   1e302:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1e306:	1d0c      	adds	r4, r1, #4
   1e308:	2e00      	cmp	r6, #0
   1e30a:	f000 8283 	beq.w	1e814 <_svfiprintf_r+0x9e4>
   1e30e:	f1b8 3fff 	cmp.w	r8, #4294967295
   1e312:	f000 8265 	beq.w	1e7e0 <_svfiprintf_r+0x9b0>
   1e316:	4642      	mov	r2, r8
   1e318:	2100      	movs	r1, #0
   1e31a:	4630      	mov	r0, r6
   1e31c:	9300      	str	r3, [sp, #0]
   1e31e:	f7ff f94f 	bl	1d5c0 <memchr>
   1e322:	9b00      	ldr	r3, [sp, #0]
   1e324:	2800      	cmp	r0, #0
   1e326:	f000 827e 	beq.w	1e826 <_svfiprintf_r+0x9f6>
   1e32a:	1b82      	subs	r2, r0, r6
   1e32c:	9301      	str	r3, [sp, #4]
   1e32e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1e332:	9204      	str	r2, [sp, #16]
   1e334:	9407      	str	r4, [sp, #28]
   1e336:	9303      	str	r3, [sp, #12]
   1e338:	f04f 0800 	mov.w	r8, #0
   1e33c:	e76f      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e33e:	f043 0320 	orr.w	r3, r3, #32
   1e342:	f89b 2000 	ldrb.w	r2, [fp]
   1e346:	e5c0      	b.n	1deca <_svfiprintf_r+0x9a>
   1e348:	9807      	ldr	r0, [sp, #28]
   1e34a:	4ab3      	ldr	r2, [pc, #716]	; (1e618 <_svfiprintf_r+0x7e8>)
   1e34c:	9406      	str	r4, [sp, #24]
   1e34e:	920b      	str	r2, [sp, #44]	; 0x2c
   1e350:	6804      	ldr	r4, [r0, #0]
   1e352:	2278      	movs	r2, #120	; 0x78
   1e354:	2130      	movs	r1, #48	; 0x30
   1e356:	3004      	adds	r0, #4
   1e358:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1e35c:	f043 0302 	orr.w	r3, r3, #2
   1e360:	9007      	str	r0, [sp, #28]
   1e362:	2500      	movs	r5, #0
   1e364:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1e368:	2202      	movs	r2, #2
   1e36a:	f04f 0100 	mov.w	r1, #0
   1e36e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   1e372:	2100      	movs	r1, #0
   1e374:	9103      	str	r1, [sp, #12]
   1e376:	f1b8 3fff 	cmp.w	r8, #4294967295
   1e37a:	f43f af32 	beq.w	1e1e2 <_svfiprintf_r+0x3b2>
   1e37e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   1e382:	9101      	str	r1, [sp, #4]
   1e384:	ea54 0105 	orrs.w	r1, r4, r5
   1e388:	f47f af30 	bne.w	1e1ec <_svfiprintf_r+0x3bc>
   1e38c:	f1b8 0f00 	cmp.w	r8, #0
   1e390:	f040 8137 	bne.w	1e602 <_svfiprintf_r+0x7d2>
   1e394:	2a00      	cmp	r2, #0
   1e396:	f040 81b1 	bne.w	1e6fc <_svfiprintf_r+0x8cc>
   1e39a:	f013 0301 	ands.w	r3, r3, #1
   1e39e:	9304      	str	r3, [sp, #16]
   1e3a0:	f000 81cb 	beq.w	1e73a <_svfiprintf_r+0x90a>
   1e3a4:	ae2c      	add	r6, sp, #176	; 0xb0
   1e3a6:	2330      	movs	r3, #48	; 0x30
   1e3a8:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1e3ac:	e737      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e3ae:	9406      	str	r4, [sp, #24]
   1e3b0:	2800      	cmp	r0, #0
   1e3b2:	f040 825e 	bne.w	1e872 <_svfiprintf_r+0xa42>
   1e3b6:	2a00      	cmp	r2, #0
   1e3b8:	f000 80c5 	beq.w	1e546 <_svfiprintf_r+0x716>
   1e3bc:	2101      	movs	r1, #1
   1e3be:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1e3c2:	f04f 0200 	mov.w	r2, #0
   1e3c6:	9100      	str	r1, [sp, #0]
   1e3c8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1e3cc:	9104      	str	r1, [sp, #16]
   1e3ce:	ae12      	add	r6, sp, #72	; 0x48
   1e3d0:	e659      	b.n	1e086 <_svfiprintf_r+0x256>
   1e3d2:	3104      	adds	r1, #4
   1e3d4:	6814      	ldr	r4, [r2, #0]
   1e3d6:	9107      	str	r1, [sp, #28]
   1e3d8:	2201      	movs	r2, #1
   1e3da:	2500      	movs	r5, #0
   1e3dc:	e7c5      	b.n	1e36a <_svfiprintf_r+0x53a>
   1e3de:	9807      	ldr	r0, [sp, #28]
   1e3e0:	4601      	mov	r1, r0
   1e3e2:	3104      	adds	r1, #4
   1e3e4:	6804      	ldr	r4, [r0, #0]
   1e3e6:	9107      	str	r1, [sp, #28]
   1e3e8:	2500      	movs	r5, #0
   1e3ea:	e7be      	b.n	1e36a <_svfiprintf_r+0x53a>
   1e3ec:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e3ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e3f0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1e3f4:	b16a      	cbz	r2, 1e412 <_svfiprintf_r+0x5e2>
   1e3f6:	3301      	adds	r3, #1
   1e3f8:	3101      	adds	r1, #1
   1e3fa:	f10d 0037 	add.w	r0, sp, #55	; 0x37
   1e3fe:	2201      	movs	r2, #1
   1e400:	2b07      	cmp	r3, #7
   1e402:	9111      	str	r1, [sp, #68]	; 0x44
   1e404:	9310      	str	r3, [sp, #64]	; 0x40
   1e406:	e889 0005 	stmia.w	r9, {r0, r2}
   1e40a:	f300 8145 	bgt.w	1e698 <_svfiprintf_r+0x868>
   1e40e:	f109 0908 	add.w	r9, r9, #8
   1e412:	9a08      	ldr	r2, [sp, #32]
   1e414:	b162      	cbz	r2, 1e430 <_svfiprintf_r+0x600>
   1e416:	3301      	adds	r3, #1
   1e418:	3102      	adds	r1, #2
   1e41a:	a80e      	add	r0, sp, #56	; 0x38
   1e41c:	2202      	movs	r2, #2
   1e41e:	2b07      	cmp	r3, #7
   1e420:	9111      	str	r1, [sp, #68]	; 0x44
   1e422:	9310      	str	r3, [sp, #64]	; 0x40
   1e424:	e889 0005 	stmia.w	r9, {r0, r2}
   1e428:	f300 8142 	bgt.w	1e6b0 <_svfiprintf_r+0x880>
   1e42c:	f109 0908 	add.w	r9, r9, #8
   1e430:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e432:	2a80      	cmp	r2, #128	; 0x80
   1e434:	f000 809b 	beq.w	1e56e <_svfiprintf_r+0x73e>
   1e438:	9a04      	ldr	r2, [sp, #16]
   1e43a:	eba8 0502 	sub.w	r5, r8, r2
   1e43e:	2d00      	cmp	r5, #0
   1e440:	dd31      	ble.n	1e4a6 <_svfiprintf_r+0x676>
   1e442:	2d10      	cmp	r5, #16
   1e444:	4c75      	ldr	r4, [pc, #468]	; (1e61c <_svfiprintf_r+0x7ec>)
   1e446:	dd23      	ble.n	1e490 <_svfiprintf_r+0x660>
   1e448:	464a      	mov	r2, r9
   1e44a:	f04f 0810 	mov.w	r8, #16
   1e44e:	46b1      	mov	r9, r6
   1e450:	4626      	mov	r6, r4
   1e452:	9c05      	ldr	r4, [sp, #20]
   1e454:	e004      	b.n	1e460 <_svfiprintf_r+0x630>
   1e456:	3d10      	subs	r5, #16
   1e458:	2d10      	cmp	r5, #16
   1e45a:	f102 0208 	add.w	r2, r2, #8
   1e45e:	dd14      	ble.n	1e48a <_svfiprintf_r+0x65a>
   1e460:	3301      	adds	r3, #1
   1e462:	3110      	adds	r1, #16
   1e464:	2b07      	cmp	r3, #7
   1e466:	9111      	str	r1, [sp, #68]	; 0x44
   1e468:	9310      	str	r3, [sp, #64]	; 0x40
   1e46a:	e882 0140 	stmia.w	r2, {r6, r8}
   1e46e:	ddf2      	ble.n	1e456 <_svfiprintf_r+0x626>
   1e470:	aa0f      	add	r2, sp, #60	; 0x3c
   1e472:	4621      	mov	r1, r4
   1e474:	4638      	mov	r0, r7
   1e476:	f7ff fc5d 	bl	1dd34 <__ssprint_r>
   1e47a:	2800      	cmp	r0, #0
   1e47c:	d16a      	bne.n	1e554 <_svfiprintf_r+0x724>
   1e47e:	3d10      	subs	r5, #16
   1e480:	2d10      	cmp	r5, #16
   1e482:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e484:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e486:	4652      	mov	r2, sl
   1e488:	dcea      	bgt.n	1e460 <_svfiprintf_r+0x630>
   1e48a:	4634      	mov	r4, r6
   1e48c:	464e      	mov	r6, r9
   1e48e:	4691      	mov	r9, r2
   1e490:	3301      	adds	r3, #1
   1e492:	4429      	add	r1, r5
   1e494:	2b07      	cmp	r3, #7
   1e496:	9111      	str	r1, [sp, #68]	; 0x44
   1e498:	9310      	str	r3, [sp, #64]	; 0x40
   1e49a:	e889 0030 	stmia.w	r9, {r4, r5}
   1e49e:	f300 80ca 	bgt.w	1e636 <_svfiprintf_r+0x806>
   1e4a2:	f109 0908 	add.w	r9, r9, #8
   1e4a6:	9804      	ldr	r0, [sp, #16]
   1e4a8:	f8c9 6000 	str.w	r6, [r9]
   1e4ac:	3301      	adds	r3, #1
   1e4ae:	4401      	add	r1, r0
   1e4b0:	2b07      	cmp	r3, #7
   1e4b2:	9111      	str	r1, [sp, #68]	; 0x44
   1e4b4:	9310      	str	r3, [sp, #64]	; 0x40
   1e4b6:	f8c9 0004 	str.w	r0, [r9, #4]
   1e4ba:	f300 8090 	bgt.w	1e5de <_svfiprintf_r+0x7ae>
   1e4be:	f109 0908 	add.w	r9, r9, #8
   1e4c2:	9b01      	ldr	r3, [sp, #4]
   1e4c4:	075b      	lsls	r3, r3, #29
   1e4c6:	d530      	bpl.n	1e52a <_svfiprintf_r+0x6fa>
   1e4c8:	9b06      	ldr	r3, [sp, #24]
   1e4ca:	9a00      	ldr	r2, [sp, #0]
   1e4cc:	1a9c      	subs	r4, r3, r2
   1e4ce:	2c00      	cmp	r4, #0
   1e4d0:	dd2b      	ble.n	1e52a <_svfiprintf_r+0x6fa>
   1e4d2:	2c10      	cmp	r4, #16
   1e4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e4d6:	4d52      	ldr	r5, [pc, #328]	; (1e620 <_svfiprintf_r+0x7f0>)
   1e4d8:	dd1c      	ble.n	1e514 <_svfiprintf_r+0x6e4>
   1e4da:	2610      	movs	r6, #16
   1e4dc:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1e4e0:	e004      	b.n	1e4ec <_svfiprintf_r+0x6bc>
   1e4e2:	3c10      	subs	r4, #16
   1e4e4:	2c10      	cmp	r4, #16
   1e4e6:	f109 0908 	add.w	r9, r9, #8
   1e4ea:	dd13      	ble.n	1e514 <_svfiprintf_r+0x6e4>
   1e4ec:	3301      	adds	r3, #1
   1e4ee:	3110      	adds	r1, #16
   1e4f0:	2b07      	cmp	r3, #7
   1e4f2:	9111      	str	r1, [sp, #68]	; 0x44
   1e4f4:	9310      	str	r3, [sp, #64]	; 0x40
   1e4f6:	e889 0060 	stmia.w	r9, {r5, r6}
   1e4fa:	ddf2      	ble.n	1e4e2 <_svfiprintf_r+0x6b2>
   1e4fc:	aa0f      	add	r2, sp, #60	; 0x3c
   1e4fe:	4641      	mov	r1, r8
   1e500:	4638      	mov	r0, r7
   1e502:	f7ff fc17 	bl	1dd34 <__ssprint_r>
   1e506:	bb28      	cbnz	r0, 1e554 <_svfiprintf_r+0x724>
   1e508:	3c10      	subs	r4, #16
   1e50a:	2c10      	cmp	r4, #16
   1e50c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e50e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e510:	46d1      	mov	r9, sl
   1e512:	dceb      	bgt.n	1e4ec <_svfiprintf_r+0x6bc>
   1e514:	3301      	adds	r3, #1
   1e516:	4421      	add	r1, r4
   1e518:	2b07      	cmp	r3, #7
   1e51a:	9111      	str	r1, [sp, #68]	; 0x44
   1e51c:	9310      	str	r3, [sp, #64]	; 0x40
   1e51e:	f8c9 5000 	str.w	r5, [r9]
   1e522:	f8c9 4004 	str.w	r4, [r9, #4]
   1e526:	f300 80f9 	bgt.w	1e71c <_svfiprintf_r+0x8ec>
   1e52a:	9b02      	ldr	r3, [sp, #8]
   1e52c:	9a06      	ldr	r2, [sp, #24]
   1e52e:	9800      	ldr	r0, [sp, #0]
   1e530:	4282      	cmp	r2, r0
   1e532:	bfac      	ite	ge
   1e534:	189b      	addge	r3, r3, r2
   1e536:	181b      	addlt	r3, r3, r0
   1e538:	9302      	str	r3, [sp, #8]
   1e53a:	2900      	cmp	r1, #0
   1e53c:	d159      	bne.n	1e5f2 <_svfiprintf_r+0x7c2>
   1e53e:	2300      	movs	r3, #0
   1e540:	9310      	str	r3, [sp, #64]	; 0x40
   1e542:	46d1      	mov	r9, sl
   1e544:	e48e      	b.n	1de64 <_svfiprintf_r+0x34>
   1e546:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e548:	b123      	cbz	r3, 1e554 <_svfiprintf_r+0x724>
   1e54a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e54c:	9905      	ldr	r1, [sp, #20]
   1e54e:	aa0f      	add	r2, sp, #60	; 0x3c
   1e550:	f7ff fbf0 	bl	1dd34 <__ssprint_r>
   1e554:	9b05      	ldr	r3, [sp, #20]
   1e556:	899b      	ldrh	r3, [r3, #12]
   1e558:	f013 0f40 	tst.w	r3, #64	; 0x40
   1e55c:	9b02      	ldr	r3, [sp, #8]
   1e55e:	bf18      	it	ne
   1e560:	f04f 33ff 	movne.w	r3, #4294967295
   1e564:	9302      	str	r3, [sp, #8]
   1e566:	9802      	ldr	r0, [sp, #8]
   1e568:	b02d      	add	sp, #180	; 0xb4
   1e56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e56e:	9a06      	ldr	r2, [sp, #24]
   1e570:	9800      	ldr	r0, [sp, #0]
   1e572:	1a15      	subs	r5, r2, r0
   1e574:	2d00      	cmp	r5, #0
   1e576:	f77f af5f 	ble.w	1e438 <_svfiprintf_r+0x608>
   1e57a:	2d10      	cmp	r5, #16
   1e57c:	4c27      	ldr	r4, [pc, #156]	; (1e61c <_svfiprintf_r+0x7ec>)
   1e57e:	dd22      	ble.n	1e5c6 <_svfiprintf_r+0x796>
   1e580:	464a      	mov	r2, r9
   1e582:	46b1      	mov	r9, r6
   1e584:	4626      	mov	r6, r4
   1e586:	9c05      	ldr	r4, [sp, #20]
   1e588:	e004      	b.n	1e594 <_svfiprintf_r+0x764>
   1e58a:	3d10      	subs	r5, #16
   1e58c:	2d10      	cmp	r5, #16
   1e58e:	f102 0208 	add.w	r2, r2, #8
   1e592:	dd15      	ble.n	1e5c0 <_svfiprintf_r+0x790>
   1e594:	3301      	adds	r3, #1
   1e596:	3110      	adds	r1, #16
   1e598:	2010      	movs	r0, #16
   1e59a:	2b07      	cmp	r3, #7
   1e59c:	9111      	str	r1, [sp, #68]	; 0x44
   1e59e:	9310      	str	r3, [sp, #64]	; 0x40
   1e5a0:	6016      	str	r6, [r2, #0]
   1e5a2:	6050      	str	r0, [r2, #4]
   1e5a4:	ddf1      	ble.n	1e58a <_svfiprintf_r+0x75a>
   1e5a6:	aa0f      	add	r2, sp, #60	; 0x3c
   1e5a8:	4621      	mov	r1, r4
   1e5aa:	4638      	mov	r0, r7
   1e5ac:	f7ff fbc2 	bl	1dd34 <__ssprint_r>
   1e5b0:	2800      	cmp	r0, #0
   1e5b2:	d1cf      	bne.n	1e554 <_svfiprintf_r+0x724>
   1e5b4:	3d10      	subs	r5, #16
   1e5b6:	2d10      	cmp	r5, #16
   1e5b8:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e5ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e5bc:	4652      	mov	r2, sl
   1e5be:	dce9      	bgt.n	1e594 <_svfiprintf_r+0x764>
   1e5c0:	4634      	mov	r4, r6
   1e5c2:	464e      	mov	r6, r9
   1e5c4:	4691      	mov	r9, r2
   1e5c6:	3301      	adds	r3, #1
   1e5c8:	4429      	add	r1, r5
   1e5ca:	2b07      	cmp	r3, #7
   1e5cc:	9111      	str	r1, [sp, #68]	; 0x44
   1e5ce:	9310      	str	r3, [sp, #64]	; 0x40
   1e5d0:	e889 0030 	stmia.w	r9, {r4, r5}
   1e5d4:	f300 80f0 	bgt.w	1e7b8 <_svfiprintf_r+0x988>
   1e5d8:	f109 0908 	add.w	r9, r9, #8
   1e5dc:	e72c      	b.n	1e438 <_svfiprintf_r+0x608>
   1e5de:	aa0f      	add	r2, sp, #60	; 0x3c
   1e5e0:	9905      	ldr	r1, [sp, #20]
   1e5e2:	4638      	mov	r0, r7
   1e5e4:	f7ff fba6 	bl	1dd34 <__ssprint_r>
   1e5e8:	2800      	cmp	r0, #0
   1e5ea:	d1b3      	bne.n	1e554 <_svfiprintf_r+0x724>
   1e5ec:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e5ee:	46d1      	mov	r9, sl
   1e5f0:	e767      	b.n	1e4c2 <_svfiprintf_r+0x692>
   1e5f2:	aa0f      	add	r2, sp, #60	; 0x3c
   1e5f4:	9905      	ldr	r1, [sp, #20]
   1e5f6:	4638      	mov	r0, r7
   1e5f8:	f7ff fb9c 	bl	1dd34 <__ssprint_r>
   1e5fc:	2800      	cmp	r0, #0
   1e5fe:	d09e      	beq.n	1e53e <_svfiprintf_r+0x70e>
   1e600:	e7a8      	b.n	1e554 <_svfiprintf_r+0x724>
   1e602:	9b01      	ldr	r3, [sp, #4]
   1e604:	2a01      	cmp	r2, #1
   1e606:	f000 80b7 	beq.w	1e778 <_svfiprintf_r+0x948>
   1e60a:	2a02      	cmp	r2, #2
   1e60c:	d11e      	bne.n	1e64c <_svfiprintf_r+0x81c>
   1e60e:	9301      	str	r3, [sp, #4]
   1e610:	2400      	movs	r4, #0
   1e612:	2500      	movs	r5, #0
   1e614:	e5f0      	b.n	1e1f8 <_svfiprintf_r+0x3c8>
   1e616:	bf00      	nop
   1e618:	00022538 	.word	0x00022538
   1e61c:	00022564 	.word	0x00022564
   1e620:	00022554 	.word	0x00022554
   1e624:	aa0f      	add	r2, sp, #60	; 0x3c
   1e626:	9905      	ldr	r1, [sp, #20]
   1e628:	4638      	mov	r0, r7
   1e62a:	f7ff fb83 	bl	1dd34 <__ssprint_r>
   1e62e:	2800      	cmp	r0, #0
   1e630:	d190      	bne.n	1e554 <_svfiprintf_r+0x724>
   1e632:	46d1      	mov	r9, sl
   1e634:	e435      	b.n	1dea2 <_svfiprintf_r+0x72>
   1e636:	aa0f      	add	r2, sp, #60	; 0x3c
   1e638:	9905      	ldr	r1, [sp, #20]
   1e63a:	4638      	mov	r0, r7
   1e63c:	f7ff fb7a 	bl	1dd34 <__ssprint_r>
   1e640:	2800      	cmp	r0, #0
   1e642:	d187      	bne.n	1e554 <_svfiprintf_r+0x724>
   1e644:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e646:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e648:	46d1      	mov	r9, sl
   1e64a:	e72c      	b.n	1e4a6 <_svfiprintf_r+0x676>
   1e64c:	9301      	str	r3, [sp, #4]
   1e64e:	2400      	movs	r4, #0
   1e650:	2500      	movs	r5, #0
   1e652:	4651      	mov	r1, sl
   1e654:	e000      	b.n	1e658 <_svfiprintf_r+0x828>
   1e656:	4631      	mov	r1, r6
   1e658:	08e2      	lsrs	r2, r4, #3
   1e65a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1e65e:	08e8      	lsrs	r0, r5, #3
   1e660:	f004 0307 	and.w	r3, r4, #7
   1e664:	4605      	mov	r5, r0
   1e666:	4614      	mov	r4, r2
   1e668:	3330      	adds	r3, #48	; 0x30
   1e66a:	ea54 0205 	orrs.w	r2, r4, r5
   1e66e:	f801 3c01 	strb.w	r3, [r1, #-1]
   1e672:	f101 36ff 	add.w	r6, r1, #4294967295
   1e676:	d1ee      	bne.n	1e656 <_svfiprintf_r+0x826>
   1e678:	9a01      	ldr	r2, [sp, #4]
   1e67a:	07d2      	lsls	r2, r2, #31
   1e67c:	f57f adcc 	bpl.w	1e218 <_svfiprintf_r+0x3e8>
   1e680:	2b30      	cmp	r3, #48	; 0x30
   1e682:	f43f adc9 	beq.w	1e218 <_svfiprintf_r+0x3e8>
   1e686:	3902      	subs	r1, #2
   1e688:	2330      	movs	r3, #48	; 0x30
   1e68a:	f806 3c01 	strb.w	r3, [r6, #-1]
   1e68e:	ebaa 0301 	sub.w	r3, sl, r1
   1e692:	9304      	str	r3, [sp, #16]
   1e694:	460e      	mov	r6, r1
   1e696:	e5c2      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e698:	aa0f      	add	r2, sp, #60	; 0x3c
   1e69a:	9905      	ldr	r1, [sp, #20]
   1e69c:	4638      	mov	r0, r7
   1e69e:	f7ff fb49 	bl	1dd34 <__ssprint_r>
   1e6a2:	2800      	cmp	r0, #0
   1e6a4:	f47f af56 	bne.w	1e554 <_svfiprintf_r+0x724>
   1e6a8:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e6aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e6ac:	46d1      	mov	r9, sl
   1e6ae:	e6b0      	b.n	1e412 <_svfiprintf_r+0x5e2>
   1e6b0:	aa0f      	add	r2, sp, #60	; 0x3c
   1e6b2:	9905      	ldr	r1, [sp, #20]
   1e6b4:	4638      	mov	r0, r7
   1e6b6:	f7ff fb3d 	bl	1dd34 <__ssprint_r>
   1e6ba:	2800      	cmp	r0, #0
   1e6bc:	f47f af4a 	bne.w	1e554 <_svfiprintf_r+0x724>
   1e6c0:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e6c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e6c4:	46d1      	mov	r9, sl
   1e6c6:	e6b3      	b.n	1e430 <_svfiprintf_r+0x600>
   1e6c8:	2d00      	cmp	r5, #0
   1e6ca:	bf08      	it	eq
   1e6cc:	2c0a      	cmpeq	r4, #10
   1e6ce:	d352      	bcc.n	1e776 <_svfiprintf_r+0x946>
   1e6d0:	4656      	mov	r6, sl
   1e6d2:	4620      	mov	r0, r4
   1e6d4:	4629      	mov	r1, r5
   1e6d6:	220a      	movs	r2, #10
   1e6d8:	2300      	movs	r3, #0
   1e6da:	f7fd fbd7 	bl	1be8c <__aeabi_uldivmod>
   1e6de:	3230      	adds	r2, #48	; 0x30
   1e6e0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1e6e4:	4620      	mov	r0, r4
   1e6e6:	4629      	mov	r1, r5
   1e6e8:	2300      	movs	r3, #0
   1e6ea:	220a      	movs	r2, #10
   1e6ec:	f7fd fbce 	bl	1be8c <__aeabi_uldivmod>
   1e6f0:	4604      	mov	r4, r0
   1e6f2:	460d      	mov	r5, r1
   1e6f4:	ea54 0305 	orrs.w	r3, r4, r5
   1e6f8:	d1eb      	bne.n	1e6d2 <_svfiprintf_r+0x8a2>
   1e6fa:	e58d      	b.n	1e218 <_svfiprintf_r+0x3e8>
   1e6fc:	f8cd 8010 	str.w	r8, [sp, #16]
   1e700:	4656      	mov	r6, sl
   1e702:	e58c      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e704:	aa0f      	add	r2, sp, #60	; 0x3c
   1e706:	9905      	ldr	r1, [sp, #20]
   1e708:	4638      	mov	r0, r7
   1e70a:	f7ff fb13 	bl	1dd34 <__ssprint_r>
   1e70e:	2800      	cmp	r0, #0
   1e710:	f47f af20 	bne.w	1e554 <_svfiprintf_r+0x724>
   1e714:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e716:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e718:	46d1      	mov	r9, sl
   1e71a:	e669      	b.n	1e3f0 <_svfiprintf_r+0x5c0>
   1e71c:	aa0f      	add	r2, sp, #60	; 0x3c
   1e71e:	9905      	ldr	r1, [sp, #20]
   1e720:	4638      	mov	r0, r7
   1e722:	f7ff fb07 	bl	1dd34 <__ssprint_r>
   1e726:	2800      	cmp	r0, #0
   1e728:	f47f af14 	bne.w	1e554 <_svfiprintf_r+0x724>
   1e72c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e72e:	e6fc      	b.n	1e52a <_svfiprintf_r+0x6fa>
   1e730:	9207      	str	r2, [sp, #28]
   1e732:	f89b 2000 	ldrb.w	r2, [fp]
   1e736:	f7ff bbc8 	b.w	1deca <_svfiprintf_r+0x9a>
   1e73a:	4656      	mov	r6, sl
   1e73c:	e56f      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e73e:	9e07      	ldr	r6, [sp, #28]
   1e740:	f9b6 4000 	ldrsh.w	r4, [r6]
   1e744:	4632      	mov	r2, r6
   1e746:	17e5      	asrs	r5, r4, #31
   1e748:	4620      	mov	r0, r4
   1e74a:	3204      	adds	r2, #4
   1e74c:	4629      	mov	r1, r5
   1e74e:	2800      	cmp	r0, #0
   1e750:	9207      	str	r2, [sp, #28]
   1e752:	f171 0200 	sbcs.w	r2, r1, #0
   1e756:	f6bf ad3b 	bge.w	1e1d0 <_svfiprintf_r+0x3a0>
   1e75a:	222d      	movs	r2, #45	; 0x2d
   1e75c:	4264      	negs	r4, r4
   1e75e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1e762:	9203      	str	r2, [sp, #12]
   1e764:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1e768:	2201      	movs	r2, #1
   1e76a:	e604      	b.n	1e376 <_svfiprintf_r+0x546>
   1e76c:	880c      	ldrh	r4, [r1, #0]
   1e76e:	3104      	adds	r1, #4
   1e770:	2500      	movs	r5, #0
   1e772:	9107      	str	r1, [sp, #28]
   1e774:	e455      	b.n	1e022 <_svfiprintf_r+0x1f2>
   1e776:	9b01      	ldr	r3, [sp, #4]
   1e778:	9301      	str	r3, [sp, #4]
   1e77a:	ae2c      	add	r6, sp, #176	; 0xb0
   1e77c:	3430      	adds	r4, #48	; 0x30
   1e77e:	2301      	movs	r3, #1
   1e780:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1e784:	9304      	str	r3, [sp, #16]
   1e786:	e54a      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e788:	9a07      	ldr	r2, [sp, #28]
   1e78a:	9902      	ldr	r1, [sp, #8]
   1e78c:	6813      	ldr	r3, [r2, #0]
   1e78e:	17cd      	asrs	r5, r1, #31
   1e790:	4608      	mov	r0, r1
   1e792:	3204      	adds	r2, #4
   1e794:	4629      	mov	r1, r5
   1e796:	9207      	str	r2, [sp, #28]
   1e798:	e9c3 0100 	strd	r0, r1, [r3]
   1e79c:	f7ff bb62 	b.w	1de64 <_svfiprintf_r+0x34>
   1e7a0:	9c07      	ldr	r4, [sp, #28]
   1e7a2:	3407      	adds	r4, #7
   1e7a4:	f024 0407 	bic.w	r4, r4, #7
   1e7a8:	e9d4 0100 	ldrd	r0, r1, [r4]
   1e7ac:	f104 0208 	add.w	r2, r4, #8
   1e7b0:	9207      	str	r2, [sp, #28]
   1e7b2:	4604      	mov	r4, r0
   1e7b4:	460d      	mov	r5, r1
   1e7b6:	e506      	b.n	1e1c6 <_svfiprintf_r+0x396>
   1e7b8:	aa0f      	add	r2, sp, #60	; 0x3c
   1e7ba:	9905      	ldr	r1, [sp, #20]
   1e7bc:	4638      	mov	r0, r7
   1e7be:	f7ff fab9 	bl	1dd34 <__ssprint_r>
   1e7c2:	2800      	cmp	r0, #0
   1e7c4:	f47f aec6 	bne.w	1e554 <_svfiprintf_r+0x724>
   1e7c8:	9911      	ldr	r1, [sp, #68]	; 0x44
   1e7ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e7cc:	46d1      	mov	r9, sl
   1e7ce:	e633      	b.n	1e438 <_svfiprintf_r+0x608>
   1e7d0:	9a07      	ldr	r2, [sp, #28]
   1e7d2:	6813      	ldr	r3, [r2, #0]
   1e7d4:	3204      	adds	r2, #4
   1e7d6:	9207      	str	r2, [sp, #28]
   1e7d8:	9a02      	ldr	r2, [sp, #8]
   1e7da:	601a      	str	r2, [r3, #0]
   1e7dc:	f7ff bb42 	b.w	1de64 <_svfiprintf_r+0x34>
   1e7e0:	4630      	mov	r0, r6
   1e7e2:	9301      	str	r3, [sp, #4]
   1e7e4:	9407      	str	r4, [sp, #28]
   1e7e6:	f7fd ff6b 	bl	1c6c0 <strlen>
   1e7ea:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1e7ee:	9004      	str	r0, [sp, #16]
   1e7f0:	9303      	str	r3, [sp, #12]
   1e7f2:	f04f 0800 	mov.w	r8, #0
   1e7f6:	e512      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e7f8:	2140      	movs	r1, #64	; 0x40
   1e7fa:	9200      	str	r2, [sp, #0]
   1e7fc:	f7fe fc2e 	bl	1d05c <_malloc_r>
   1e800:	9a05      	ldr	r2, [sp, #20]
   1e802:	6010      	str	r0, [r2, #0]
   1e804:	6110      	str	r0, [r2, #16]
   1e806:	9a00      	ldr	r2, [sp, #0]
   1e808:	b328      	cbz	r0, 1e856 <_svfiprintf_r+0xa26>
   1e80a:	9905      	ldr	r1, [sp, #20]
   1e80c:	2340      	movs	r3, #64	; 0x40
   1e80e:	614b      	str	r3, [r1, #20]
   1e810:	f7ff bb1c 	b.w	1de4c <_svfiprintf_r+0x1c>
   1e814:	4642      	mov	r2, r8
   1e816:	2a06      	cmp	r2, #6
   1e818:	bf28      	it	cs
   1e81a:	2206      	movcs	r2, #6
   1e81c:	9204      	str	r2, [sp, #16]
   1e81e:	9407      	str	r4, [sp, #28]
   1e820:	9200      	str	r2, [sp, #0]
   1e822:	4e17      	ldr	r6, [pc, #92]	; (1e880 <_svfiprintf_r+0xa50>)
   1e824:	e42f      	b.n	1e086 <_svfiprintf_r+0x256>
   1e826:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1e82a:	f8cd 8010 	str.w	r8, [sp, #16]
   1e82e:	9203      	str	r2, [sp, #12]
   1e830:	9407      	str	r4, [sp, #28]
   1e832:	9301      	str	r3, [sp, #4]
   1e834:	4680      	mov	r8, r0
   1e836:	e4f2      	b.n	1e21e <_svfiprintf_r+0x3ee>
   1e838:	9a07      	ldr	r2, [sp, #28]
   1e83a:	6811      	ldr	r1, [r2, #0]
   1e83c:	f89b 2001 	ldrb.w	r2, [fp, #1]
   1e840:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
   1e844:	9907      	ldr	r1, [sp, #28]
   1e846:	3104      	adds	r1, #4
   1e848:	46b3      	mov	fp, r6
   1e84a:	9107      	str	r1, [sp, #28]
   1e84c:	f7ff bb3d 	b.w	1deca <_svfiprintf_r+0x9a>
   1e850:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e854:	e51f      	b.n	1e296 <_svfiprintf_r+0x466>
   1e856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e858:	230c      	movs	r3, #12
   1e85a:	6013      	str	r3, [r2, #0]
   1e85c:	f04f 33ff 	mov.w	r3, #4294967295
   1e860:	9302      	str	r3, [sp, #8]
   1e862:	e680      	b.n	1e566 <_svfiprintf_r+0x736>
   1e864:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e868:	f7ff bbcb 	b.w	1e002 <_svfiprintf_r+0x1d2>
   1e86c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e870:	e497      	b.n	1e1a2 <_svfiprintf_r+0x372>
   1e872:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e876:	e59e      	b.n	1e3b6 <_svfiprintf_r+0x586>
   1e878:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1e87c:	e457      	b.n	1e12e <_svfiprintf_r+0x2fe>
   1e87e:	bf00      	nop
   1e880:	0002254c 	.word	0x0002254c

0001e884 <_sungetc_r>:
   1e884:	b538      	push	{r3, r4, r5, lr}
   1e886:	1c4b      	adds	r3, r1, #1
   1e888:	d01a      	beq.n	1e8c0 <_sungetc_r+0x3c>
   1e88a:	8993      	ldrh	r3, [r2, #12]
   1e88c:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1e88e:	f023 0320 	bic.w	r3, r3, #32
   1e892:	b2cd      	uxtb	r5, r1
   1e894:	8193      	strh	r3, [r2, #12]
   1e896:	b1b4      	cbz	r4, 1e8c6 <_sungetc_r+0x42>
   1e898:	4614      	mov	r4, r2
   1e89a:	6852      	ldr	r2, [r2, #4]
   1e89c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e89e:	429a      	cmp	r2, r3
   1e8a0:	da09      	bge.n	1e8b6 <_sungetc_r+0x32>
   1e8a2:	6823      	ldr	r3, [r4, #0]
   1e8a4:	1e5a      	subs	r2, r3, #1
   1e8a6:	6022      	str	r2, [r4, #0]
   1e8a8:	f803 5c01 	strb.w	r5, [r3, #-1]
   1e8ac:	6863      	ldr	r3, [r4, #4]
   1e8ae:	3301      	adds	r3, #1
   1e8b0:	6063      	str	r3, [r4, #4]
   1e8b2:	4628      	mov	r0, r5
   1e8b4:	bd38      	pop	{r3, r4, r5, pc}
   1e8b6:	4621      	mov	r1, r4
   1e8b8:	f000 fd52 	bl	1f360 <__submore>
   1e8bc:	2800      	cmp	r0, #0
   1e8be:	d0f0      	beq.n	1e8a2 <_sungetc_r+0x1e>
   1e8c0:	f04f 35ff 	mov.w	r5, #4294967295
   1e8c4:	e7f5      	b.n	1e8b2 <_sungetc_r+0x2e>
   1e8c6:	6911      	ldr	r1, [r2, #16]
   1e8c8:	6813      	ldr	r3, [r2, #0]
   1e8ca:	b129      	cbz	r1, 1e8d8 <_sungetc_r+0x54>
   1e8cc:	4299      	cmp	r1, r3
   1e8ce:	d203      	bcs.n	1e8d8 <_sungetc_r+0x54>
   1e8d0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   1e8d4:	428d      	cmp	r5, r1
   1e8d6:	d00f      	beq.n	1e8f8 <_sungetc_r+0x74>
   1e8d8:	6393      	str	r3, [r2, #56]	; 0x38
   1e8da:	4613      	mov	r3, r2
   1e8dc:	6854      	ldr	r4, [r2, #4]
   1e8de:	63d4      	str	r4, [r2, #60]	; 0x3c
   1e8e0:	f102 0040 	add.w	r0, r2, #64	; 0x40
   1e8e4:	2103      	movs	r1, #3
   1e8e6:	6310      	str	r0, [r2, #48]	; 0x30
   1e8e8:	6351      	str	r1, [r2, #52]	; 0x34
   1e8ea:	f803 5f42 	strb.w	r5, [r3, #66]!
   1e8ee:	2101      	movs	r1, #1
   1e8f0:	6013      	str	r3, [r2, #0]
   1e8f2:	6051      	str	r1, [r2, #4]
   1e8f4:	4628      	mov	r0, r5
   1e8f6:	bd38      	pop	{r3, r4, r5, pc}
   1e8f8:	6851      	ldr	r1, [r2, #4]
   1e8fa:	3b01      	subs	r3, #1
   1e8fc:	3101      	adds	r1, #1
   1e8fe:	6013      	str	r3, [r2, #0]
   1e900:	6051      	str	r1, [r2, #4]
   1e902:	e7d6      	b.n	1e8b2 <_sungetc_r+0x2e>

0001e904 <__ssrefill_r>:
   1e904:	b510      	push	{r4, lr}
   1e906:	460c      	mov	r4, r1
   1e908:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1e90a:	b169      	cbz	r1, 1e928 <__ssrefill_r+0x24>
   1e90c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1e910:	4299      	cmp	r1, r3
   1e912:	d001      	beq.n	1e918 <__ssrefill_r+0x14>
   1e914:	f000 fdbc 	bl	1f490 <_free_r>
   1e918:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e91a:	6063      	str	r3, [r4, #4]
   1e91c:	2000      	movs	r0, #0
   1e91e:	6320      	str	r0, [r4, #48]	; 0x30
   1e920:	b113      	cbz	r3, 1e928 <__ssrefill_r+0x24>
   1e922:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e924:	6023      	str	r3, [r4, #0]
   1e926:	bd10      	pop	{r4, pc}
   1e928:	89a3      	ldrh	r3, [r4, #12]
   1e92a:	6922      	ldr	r2, [r4, #16]
   1e92c:	6022      	str	r2, [r4, #0]
   1e92e:	f043 0320 	orr.w	r3, r3, #32
   1e932:	2200      	movs	r2, #0
   1e934:	81a3      	strh	r3, [r4, #12]
   1e936:	6062      	str	r2, [r4, #4]
   1e938:	f04f 30ff 	mov.w	r0, #4294967295
   1e93c:	bd10      	pop	{r4, pc}
   1e93e:	bf00      	nop

0001e940 <_sfread_r>:
   1e940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e944:	b083      	sub	sp, #12
   1e946:	fb02 f903 	mul.w	r9, r2, r3
   1e94a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1e94c:	f1b9 0f00 	cmp.w	r9, #0
   1e950:	d028      	beq.n	1e9a4 <_sfread_r+0x64>
   1e952:	4607      	mov	r7, r0
   1e954:	469a      	mov	sl, r3
   1e956:	9201      	str	r2, [sp, #4]
   1e958:	460d      	mov	r5, r1
   1e95a:	464e      	mov	r6, r9
   1e95c:	f04f 0800 	mov.w	r8, #0
   1e960:	e00f      	b.n	1e982 <_sfread_r+0x42>
   1e962:	6821      	ldr	r1, [r4, #0]
   1e964:	f7fd fd8e 	bl	1c484 <memcpy>
   1e968:	6822      	ldr	r2, [r4, #0]
   1e96a:	f8c4 8004 	str.w	r8, [r4, #4]
   1e96e:	445a      	add	r2, fp
   1e970:	6022      	str	r2, [r4, #0]
   1e972:	4621      	mov	r1, r4
   1e974:	4638      	mov	r0, r7
   1e976:	445d      	add	r5, fp
   1e978:	eba6 060b 	sub.w	r6, r6, fp
   1e97c:	f7ff ffc2 	bl	1e904 <__ssrefill_r>
   1e980:	b9a0      	cbnz	r0, 1e9ac <_sfread_r+0x6c>
   1e982:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1e986:	455e      	cmp	r6, fp
   1e988:	4628      	mov	r0, r5
   1e98a:	465a      	mov	r2, fp
   1e98c:	d8e9      	bhi.n	1e962 <_sfread_r+0x22>
   1e98e:	4632      	mov	r2, r6
   1e990:	6821      	ldr	r1, [r4, #0]
   1e992:	f7fd fd77 	bl	1c484 <memcpy>
   1e996:	6862      	ldr	r2, [r4, #4]
   1e998:	6823      	ldr	r3, [r4, #0]
   1e99a:	1b92      	subs	r2, r2, r6
   1e99c:	441e      	add	r6, r3
   1e99e:	46d1      	mov	r9, sl
   1e9a0:	6062      	str	r2, [r4, #4]
   1e9a2:	6026      	str	r6, [r4, #0]
   1e9a4:	4648      	mov	r0, r9
   1e9a6:	b003      	add	sp, #12
   1e9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9ac:	9b01      	ldr	r3, [sp, #4]
   1e9ae:	eba9 0906 	sub.w	r9, r9, r6
   1e9b2:	fbb9 f9f3 	udiv	r9, r9, r3
   1e9b6:	4648      	mov	r0, r9
   1e9b8:	b003      	add	sp, #12
   1e9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9be:	bf00      	nop

0001e9c0 <__ssvfiscanf_r>:
   1e9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9c4:	468b      	mov	fp, r1
   1e9c6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1e9ca:	b0d9      	sub	sp, #356	; 0x164
   1e9cc:	4607      	mov	r7, r0
   1e9ce:	0488      	lsls	r0, r1, #18
   1e9d0:	9306      	str	r3, [sp, #24]
   1e9d2:	d409      	bmi.n	1e9e8 <__ssvfiscanf_r+0x28>
   1e9d4:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1e9d8:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1e9dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1e9e0:	f8ab 100c 	strh.w	r1, [fp, #12]
   1e9e4:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   1e9e8:	4614      	mov	r4, r2
   1e9ea:	4626      	mov	r6, r4
   1e9ec:	2300      	movs	r3, #0
   1e9ee:	9307      	str	r3, [sp, #28]
   1e9f0:	9304      	str	r3, [sp, #16]
   1e9f2:	469a      	mov	sl, r3
   1e9f4:	9305      	str	r3, [sp, #20]
   1e9f6:	f816 3b01 	ldrb.w	r3, [r6], #1
   1e9fa:	930b      	str	r3, [sp, #44]	; 0x2c
   1e9fc:	b363      	cbz	r3, 1ea58 <__ssvfiscanf_r+0x98>
   1e9fe:	f000 fe4d 	bl	1f69c <__locale_ctype_ptr>
   1ea02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ea04:	4418      	add	r0, r3
   1ea06:	7845      	ldrb	r5, [r0, #1]
   1ea08:	f015 0508 	ands.w	r5, r5, #8
   1ea0c:	d028      	beq.n	1ea60 <__ssvfiscanf_r+0xa0>
   1ea0e:	f8db 2004 	ldr.w	r2, [fp, #4]
   1ea12:	e012      	b.n	1ea3a <__ssvfiscanf_r+0x7a>
   1ea14:	f000 fe42 	bl	1f69c <__locale_ctype_ptr>
   1ea18:	f8db 3000 	ldr.w	r3, [fp]
   1ea1c:	781a      	ldrb	r2, [r3, #0]
   1ea1e:	4410      	add	r0, r2
   1ea20:	3301      	adds	r3, #1
   1ea22:	7842      	ldrb	r2, [r0, #1]
   1ea24:	0712      	lsls	r2, r2, #28
   1ea26:	d510      	bpl.n	1ea4a <__ssvfiscanf_r+0x8a>
   1ea28:	f8db 2004 	ldr.w	r2, [fp, #4]
   1ea2c:	f8cb 3000 	str.w	r3, [fp]
   1ea30:	3a01      	subs	r2, #1
   1ea32:	f10a 0a01 	add.w	sl, sl, #1
   1ea36:	f8cb 2004 	str.w	r2, [fp, #4]
   1ea3a:	2a00      	cmp	r2, #0
   1ea3c:	dcea      	bgt.n	1ea14 <__ssvfiscanf_r+0x54>
   1ea3e:	4659      	mov	r1, fp
   1ea40:	4638      	mov	r0, r7
   1ea42:	f7ff ff5f 	bl	1e904 <__ssrefill_r>
   1ea46:	2800      	cmp	r0, #0
   1ea48:	d0e4      	beq.n	1ea14 <__ssvfiscanf_r+0x54>
   1ea4a:	4634      	mov	r4, r6
   1ea4c:	4626      	mov	r6, r4
   1ea4e:	f816 3b01 	ldrb.w	r3, [r6], #1
   1ea52:	930b      	str	r3, [sp, #44]	; 0x2c
   1ea54:	2b00      	cmp	r3, #0
   1ea56:	d1d2      	bne.n	1e9fe <__ssvfiscanf_r+0x3e>
   1ea58:	9805      	ldr	r0, [sp, #20]
   1ea5a:	b059      	add	sp, #356	; 0x164
   1ea5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea60:	2b25      	cmp	r3, #37	; 0x25
   1ea62:	f040 8084 	bne.w	1eb6e <__ssvfiscanf_r+0x1ae>
   1ea66:	f894 8001 	ldrb.w	r8, [r4, #1]
   1ea6a:	462c      	mov	r4, r5
   1ea6c:	1c73      	adds	r3, r6, #1
   1ea6e:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
   1ea72:	f200 8187 	bhi.w	1ed84 <__ssvfiscanf_r+0x3c4>
   1ea76:	e8df f018 	tbh	[pc, r8, lsl #1]
   1ea7a:	0093      	.short	0x0093
   1ea7c:	01850185 	.word	0x01850185
   1ea80:	01850185 	.word	0x01850185
   1ea84:	01850185 	.word	0x01850185
   1ea88:	01850185 	.word	0x01850185
   1ea8c:	01850185 	.word	0x01850185
   1ea90:	01850185 	.word	0x01850185
   1ea94:	01850185 	.word	0x01850185
   1ea98:	01850185 	.word	0x01850185
   1ea9c:	01850185 	.word	0x01850185
   1eaa0:	01850185 	.word	0x01850185
   1eaa4:	01850185 	.word	0x01850185
   1eaa8:	01850185 	.word	0x01850185
   1eaac:	01850185 	.word	0x01850185
   1eab0:	01850185 	.word	0x01850185
   1eab4:	01850185 	.word	0x01850185
   1eab8:	01850185 	.word	0x01850185
   1eabc:	01850185 	.word	0x01850185
   1eac0:	01850185 	.word	0x01850185
   1eac4:	01850079 	.word	0x01850079
   1eac8:	01850185 	.word	0x01850185
   1eacc:	017f0185 	.word	0x017f0185
   1ead0:	01850185 	.word	0x01850185
   1ead4:	01850185 	.word	0x01850185
   1ead8:	01760185 	.word	0x01760185
   1eadc:	01760176 	.word	0x01760176
   1eae0:	01760176 	.word	0x01760176
   1eae4:	01760176 	.word	0x01760176
   1eae8:	01760176 	.word	0x01760176
   1eaec:	01850176 	.word	0x01850176
   1eaf0:	01850185 	.word	0x01850185
   1eaf4:	01850185 	.word	0x01850185
   1eaf8:	01850185 	.word	0x01850185
   1eafc:	01850185 	.word	0x01850185
   1eb00:	01720185 	.word	0x01720185
   1eb04:	01850185 	.word	0x01850185
   1eb08:	01850185 	.word	0x01850185
   1eb0c:	01850185 	.word	0x01850185
   1eb10:	016c0185 	.word	0x016c0185
   1eb14:	01850185 	.word	0x01850185
   1eb18:	01850168 	.word	0x01850168
   1eb1c:	01850185 	.word	0x01850185
   1eb20:	01850185 	.word	0x01850185
   1eb24:	01850185 	.word	0x01850185
   1eb28:	01640185 	.word	0x01640185
   1eb2c:	01850185 	.word	0x01850185
   1eb30:	0185015b 	.word	0x0185015b
   1eb34:	01850185 	.word	0x01850185
   1eb38:	01850185 	.word	0x01850185
   1eb3c:	01850185 	.word	0x01850185
   1eb40:	01030115 	.word	0x01030115
   1eb44:	01850185 	.word	0x01850185
   1eb48:	011a0185 	.word	0x011a0185
   1eb4c:	0185009a 	.word	0x0185009a
   1eb50:	01510185 	.word	0x01510185
   1eb54:	013a0185 	.word	0x013a0185
   1eb58:	012a0133 	.word	0x012a0133
   1eb5c:	01850185 	.word	0x01850185
   1eb60:	01850127 	.word	0x01850127
   1eb64:	01850120 	.word	0x01850120
   1eb68:	01640185 	.word	0x01640185
   1eb6c:	461e      	mov	r6, r3
   1eb6e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1eb72:	2b00      	cmp	r3, #0
   1eb74:	f340 8375 	ble.w	1f262 <__ssvfiscanf_r+0x8a2>
   1eb78:	f8db 3000 	ldr.w	r3, [fp]
   1eb7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   1eb80:	7819      	ldrb	r1, [r3, #0]
   1eb82:	4291      	cmp	r1, r2
   1eb84:	f47f af68 	bne.w	1ea58 <__ssvfiscanf_r+0x98>
   1eb88:	f8db 2004 	ldr.w	r2, [fp, #4]
   1eb8c:	3301      	adds	r3, #1
   1eb8e:	3a01      	subs	r2, #1
   1eb90:	f8cb 3000 	str.w	r3, [fp]
   1eb94:	f10a 0a01 	add.w	sl, sl, #1
   1eb98:	f8cb 2004 	str.w	r2, [fp, #4]
   1eb9c:	4634      	mov	r4, r6
   1eb9e:	e755      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1eba0:	f04f 33ff 	mov.w	r3, #4294967295
   1eba4:	9305      	str	r3, [sp, #20]
   1eba6:	9805      	ldr	r0, [sp, #20]
   1eba8:	b059      	add	sp, #356	; 0x164
   1ebaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebae:	9303      	str	r3, [sp, #12]
   1ebb0:	4ba7      	ldr	r3, [pc, #668]	; (1ee50 <__ssvfiscanf_r+0x490>)
   1ebb2:	9307      	str	r3, [sp, #28]
   1ebb4:	2300      	movs	r3, #0
   1ebb6:	9304      	str	r3, [sp, #16]
   1ebb8:	2603      	movs	r6, #3
   1ebba:	f8db 3004 	ldr.w	r3, [fp, #4]
   1ebbe:	2b00      	cmp	r3, #0
   1ebc0:	dd69      	ble.n	1ec96 <__ssvfiscanf_r+0x2d6>
   1ebc2:	0669      	lsls	r1, r5, #25
   1ebc4:	d533      	bpl.n	1ec2e <__ssvfiscanf_r+0x26e>
   1ebc6:	2e02      	cmp	r6, #2
   1ebc8:	f000 81f7 	beq.w	1efba <__ssvfiscanf_r+0x5fa>
   1ebcc:	2e03      	cmp	r6, #3
   1ebce:	f000 8143 	beq.w	1ee58 <__ssvfiscanf_r+0x498>
   1ebd2:	2e01      	cmp	r6, #1
   1ebd4:	f000 810a 	beq.w	1edec <__ssvfiscanf_r+0x42c>
   1ebd8:	2c00      	cmp	r4, #0
   1ebda:	bf08      	it	eq
   1ebdc:	2401      	moveq	r4, #1
   1ebde:	f015 0301 	ands.w	r3, r5, #1
   1ebe2:	f040 8247 	bne.w	1f074 <__ssvfiscanf_r+0x6b4>
   1ebe6:	06ed      	lsls	r5, r5, #27
   1ebe8:	f140 831c 	bpl.w	1f224 <__ssvfiscanf_r+0x864>
   1ebec:	461d      	mov	r5, r3
   1ebee:	e009      	b.n	1ec04 <__ssvfiscanf_r+0x244>
   1ebf0:	4413      	add	r3, r2
   1ebf2:	f8cb 3000 	str.w	r3, [fp]
   1ebf6:	4415      	add	r5, r2
   1ebf8:	1aa4      	subs	r4, r4, r2
   1ebfa:	f7ff fe83 	bl	1e904 <__ssrefill_r>
   1ebfe:	2800      	cmp	r0, #0
   1ec00:	f040 82d6 	bne.w	1f1b0 <__ssvfiscanf_r+0x7f0>
   1ec04:	f8db 2004 	ldr.w	r2, [fp, #4]
   1ec08:	f8db 3000 	ldr.w	r3, [fp]
   1ec0c:	42a2      	cmp	r2, r4
   1ec0e:	4659      	mov	r1, fp
   1ec10:	4638      	mov	r0, r7
   1ec12:	dbed      	blt.n	1ebf0 <__ssvfiscanf_r+0x230>
   1ec14:	1b12      	subs	r2, r2, r4
   1ec16:	4423      	add	r3, r4
   1ec18:	f8cb 2004 	str.w	r2, [fp, #4]
   1ec1c:	4425      	add	r5, r4
   1ec1e:	f8cb 3000 	str.w	r3, [fp]
   1ec22:	9e03      	ldr	r6, [sp, #12]
   1ec24:	44aa      	add	sl, r5
   1ec26:	4634      	mov	r4, r6
   1ec28:	e710      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1ec2a:	f8cb 3000 	str.w	r3, [fp]
   1ec2e:	f000 fd35 	bl	1f69c <__locale_ctype_ptr>
   1ec32:	f8db 3000 	ldr.w	r3, [fp]
   1ec36:	781a      	ldrb	r2, [r3, #0]
   1ec38:	4410      	add	r0, r2
   1ec3a:	3301      	adds	r3, #1
   1ec3c:	7842      	ldrb	r2, [r0, #1]
   1ec3e:	0712      	lsls	r2, r2, #28
   1ec40:	d5c1      	bpl.n	1ebc6 <__ssvfiscanf_r+0x206>
   1ec42:	f8db 2004 	ldr.w	r2, [fp, #4]
   1ec46:	3a01      	subs	r2, #1
   1ec48:	2a00      	cmp	r2, #0
   1ec4a:	f10a 0a01 	add.w	sl, sl, #1
   1ec4e:	f8cb 2004 	str.w	r2, [fp, #4]
   1ec52:	dcea      	bgt.n	1ec2a <__ssvfiscanf_r+0x26a>
   1ec54:	4659      	mov	r1, fp
   1ec56:	4638      	mov	r0, r7
   1ec58:	f7ff fe54 	bl	1e904 <__ssrefill_r>
   1ec5c:	2800      	cmp	r0, #0
   1ec5e:	d0e6      	beq.n	1ec2e <__ssvfiscanf_r+0x26e>
   1ec60:	9a05      	ldr	r2, [sp, #20]
   1ec62:	2a00      	cmp	r2, #0
   1ec64:	d09c      	beq.n	1eba0 <__ssvfiscanf_r+0x1e0>
   1ec66:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1ec6a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ec6e:	4613      	mov	r3, r2
   1ec70:	bf18      	it	ne
   1ec72:	f04f 33ff 	movne.w	r3, #4294967295
   1ec76:	9305      	str	r3, [sp, #20]
   1ec78:	9805      	ldr	r0, [sp, #20]
   1ec7a:	b059      	add	sp, #356	; 0x164
   1ec7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec80:	9303      	str	r3, [sp, #12]
   1ec82:	4b73      	ldr	r3, [pc, #460]	; (1ee50 <__ssvfiscanf_r+0x490>)
   1ec84:	9307      	str	r3, [sp, #28]
   1ec86:	230a      	movs	r3, #10
   1ec88:	9304      	str	r3, [sp, #16]
   1ec8a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1ec8e:	2b00      	cmp	r3, #0
   1ec90:	f04f 0603 	mov.w	r6, #3
   1ec94:	dc95      	bgt.n	1ebc2 <__ssvfiscanf_r+0x202>
   1ec96:	4659      	mov	r1, fp
   1ec98:	4638      	mov	r0, r7
   1ec9a:	f7ff fe33 	bl	1e904 <__ssrefill_r>
   1ec9e:	2800      	cmp	r0, #0
   1eca0:	d08f      	beq.n	1ebc2 <__ssvfiscanf_r+0x202>
   1eca2:	e7dd      	b.n	1ec60 <__ssvfiscanf_r+0x2a0>
   1eca4:	9303      	str	r3, [sp, #12]
   1eca6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1ecaa:	2600      	movs	r6, #0
   1ecac:	e785      	b.n	1ebba <__ssvfiscanf_r+0x1fa>
   1ecae:	f896 8001 	ldrb.w	r8, [r6, #1]
   1ecb2:	f045 0504 	orr.w	r5, r5, #4
   1ecb6:	461e      	mov	r6, r3
   1ecb8:	e6d8      	b.n	1ea6c <__ssvfiscanf_r+0xac>
   1ecba:	9303      	str	r3, [sp, #12]
   1ecbc:	4b65      	ldr	r3, [pc, #404]	; (1ee54 <__ssvfiscanf_r+0x494>)
   1ecbe:	9307      	str	r3, [sp, #28]
   1ecc0:	230a      	movs	r3, #10
   1ecc2:	9304      	str	r3, [sp, #16]
   1ecc4:	2603      	movs	r6, #3
   1ecc6:	e778      	b.n	1ebba <__ssvfiscanf_r+0x1fa>
   1ecc8:	9303      	str	r3, [sp, #12]
   1ecca:	2602      	movs	r6, #2
   1eccc:	e775      	b.n	1ebba <__ssvfiscanf_r+0x1fa>
   1ecce:	9303      	str	r3, [sp, #12]
   1ecd0:	f445 7508 	orr.w	r5, r5, #544	; 0x220
   1ecd4:	4b5f      	ldr	r3, [pc, #380]	; (1ee54 <__ssvfiscanf_r+0x494>)
   1ecd6:	9307      	str	r3, [sp, #28]
   1ecd8:	2310      	movs	r3, #16
   1ecda:	9304      	str	r3, [sp, #16]
   1ecdc:	2603      	movs	r6, #3
   1ecde:	e76c      	b.n	1ebba <__ssvfiscanf_r+0x1fa>
   1ece0:	9303      	str	r3, [sp, #12]
   1ece2:	4b5c      	ldr	r3, [pc, #368]	; (1ee54 <__ssvfiscanf_r+0x494>)
   1ece4:	9307      	str	r3, [sp, #28]
   1ece6:	2308      	movs	r3, #8
   1ece8:	9304      	str	r3, [sp, #16]
   1ecea:	2603      	movs	r6, #3
   1ecec:	e765      	b.n	1ebba <__ssvfiscanf_r+0x1fa>
   1ecee:	9303      	str	r3, [sp, #12]
   1ecf0:	06eb      	lsls	r3, r5, #27
   1ecf2:	d478      	bmi.n	1ede6 <__ssvfiscanf_r+0x426>
   1ecf4:	076e      	lsls	r6, r5, #29
   1ecf6:	f100 82d4 	bmi.w	1f2a2 <__ssvfiscanf_r+0x8e2>
   1ecfa:	07ec      	lsls	r4, r5, #31
   1ecfc:	f100 82c0 	bmi.w	1f280 <__ssvfiscanf_r+0x8c0>
   1ed00:	07a8      	lsls	r0, r5, #30
   1ed02:	f140 82bd 	bpl.w	1f280 <__ssvfiscanf_r+0x8c0>
   1ed06:	9a06      	ldr	r2, [sp, #24]
   1ed08:	9e03      	ldr	r6, [sp, #12]
   1ed0a:	6813      	ldr	r3, [r2, #0]
   1ed0c:	4650      	mov	r0, sl
   1ed0e:	17c1      	asrs	r1, r0, #31
   1ed10:	3204      	adds	r2, #4
   1ed12:	9206      	str	r2, [sp, #24]
   1ed14:	e9c3 0100 	strd	r0, r1, [r3]
   1ed18:	4634      	mov	r4, r6
   1ed1a:	e697      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1ed1c:	f896 8001 	ldrb.w	r8, [r6, #1]
   1ed20:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1ed24:	f000 82a5 	beq.w	1f272 <__ssvfiscanf_r+0x8b2>
   1ed28:	f045 0501 	orr.w	r5, r5, #1
   1ed2c:	461e      	mov	r6, r3
   1ed2e:	e69d      	b.n	1ea6c <__ssvfiscanf_r+0xac>
   1ed30:	4619      	mov	r1, r3
   1ed32:	a818      	add	r0, sp, #96	; 0x60
   1ed34:	f000 ff0e 	bl	1fb54 <__sccl>
   1ed38:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1ed3c:	9003      	str	r0, [sp, #12]
   1ed3e:	2601      	movs	r6, #1
   1ed40:	e73b      	b.n	1ebba <__ssvfiscanf_r+0x1fa>
   1ed42:	9303      	str	r3, [sp, #12]
   1ed44:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1ed48:	e7c4      	b.n	1ecd4 <__ssvfiscanf_r+0x314>
   1ed4a:	9303      	str	r3, [sp, #12]
   1ed4c:	f045 0501 	orr.w	r5, r5, #1
   1ed50:	e7c7      	b.n	1ece2 <__ssvfiscanf_r+0x322>
   1ed52:	f896 8001 	ldrb.w	r8, [r6, #1]
   1ed56:	f045 0502 	orr.w	r5, r5, #2
   1ed5a:	461e      	mov	r6, r3
   1ed5c:	e686      	b.n	1ea6c <__ssvfiscanf_r+0xac>
   1ed5e:	9303      	str	r3, [sp, #12]
   1ed60:	f045 0501 	orr.w	r5, r5, #1
   1ed64:	e78d      	b.n	1ec82 <__ssvfiscanf_r+0x2c2>
   1ed66:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1ed6a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
   1ed6e:	3c30      	subs	r4, #48	; 0x30
   1ed70:	f896 8001 	ldrb.w	r8, [r6, #1]
   1ed74:	461e      	mov	r6, r3
   1ed76:	e679      	b.n	1ea6c <__ssvfiscanf_r+0xac>
   1ed78:	f896 8001 	ldrb.w	r8, [r6, #1]
   1ed7c:	f045 0510 	orr.w	r5, r5, #16
   1ed80:	461e      	mov	r6, r3
   1ed82:	e673      	b.n	1ea6c <__ssvfiscanf_r+0xac>
   1ed84:	9303      	str	r3, [sp, #12]
   1ed86:	f000 fc89 	bl	1f69c <__locale_ctype_ptr>
   1ed8a:	4440      	add	r0, r8
   1ed8c:	7843      	ldrb	r3, [r0, #1]
   1ed8e:	f003 0303 	and.w	r3, r3, #3
   1ed92:	2b01      	cmp	r3, #1
   1ed94:	f47f af75 	bne.w	1ec82 <__ssvfiscanf_r+0x2c2>
   1ed98:	f045 0501 	orr.w	r5, r5, #1
   1ed9c:	e771      	b.n	1ec82 <__ssvfiscanf_r+0x2c2>
   1ed9e:	ab0c      	add	r3, sp, #48	; 0x30
   1eda0:	4618      	mov	r0, r3
   1eda2:	2208      	movs	r2, #8
   1eda4:	2100      	movs	r1, #0
   1eda6:	9308      	str	r3, [sp, #32]
   1eda8:	f7fd fc06 	bl	1c5b8 <memset>
   1edac:	f015 0310 	ands.w	r3, r5, #16
   1edb0:	9309      	str	r3, [sp, #36]	; 0x24
   1edb2:	f000 81e1 	beq.w	1f178 <__ssvfiscanf_r+0x7b8>
   1edb6:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   1edba:	2600      	movs	r6, #0
   1edbc:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1edc0:	f000 fc6c 	bl	1f69c <__locale_ctype_ptr>
   1edc4:	f8db 3000 	ldr.w	r3, [fp]
   1edc8:	781b      	ldrb	r3, [r3, #0]
   1edca:	4403      	add	r3, r0
   1edcc:	785b      	ldrb	r3, [r3, #1]
   1edce:	071a      	lsls	r2, r3, #28
   1edd0:	d402      	bmi.n	1edd8 <__ssvfiscanf_r+0x418>
   1edd2:	2c00      	cmp	r4, #0
   1edd4:	f040 8270 	bne.w	1f2b8 <__ssvfiscanf_r+0x8f8>
   1edd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1edda:	b923      	cbnz	r3, 1ede6 <__ssvfiscanf_r+0x426>
   1eddc:	f8c9 3000 	str.w	r3, [r9]
   1ede0:	9b05      	ldr	r3, [sp, #20]
   1ede2:	3301      	adds	r3, #1
   1ede4:	9305      	str	r3, [sp, #20]
   1ede6:	9e03      	ldr	r6, [sp, #12]
   1ede8:	4634      	mov	r4, r6
   1edea:	e62f      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1edec:	2c00      	cmp	r4, #0
   1edee:	bf08      	it	eq
   1edf0:	f04f 34ff 	moveq.w	r4, #4294967295
   1edf4:	06e8      	lsls	r0, r5, #27
   1edf6:	f140 810b 	bpl.w	1f010 <__ssvfiscanf_r+0x650>
   1edfa:	f8db 2000 	ldr.w	r2, [fp]
   1edfe:	2500      	movs	r5, #0
   1ee00:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1ee04:	7813      	ldrb	r3, [r2, #0]
   1ee06:	f818 3003 	ldrb.w	r3, [r8, r3]
   1ee0a:	3201      	adds	r2, #1
   1ee0c:	b1db      	cbz	r3, 1ee46 <__ssvfiscanf_r+0x486>
   1ee0e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1ee12:	f8cb 2000 	str.w	r2, [fp]
   1ee16:	3501      	adds	r5, #1
   1ee18:	3b01      	subs	r3, #1
   1ee1a:	42ac      	cmp	r4, r5
   1ee1c:	f8cb 3004 	str.w	r3, [fp, #4]
   1ee20:	f43f aeff 	beq.w	1ec22 <__ssvfiscanf_r+0x262>
   1ee24:	2b00      	cmp	r3, #0
   1ee26:	dced      	bgt.n	1ee04 <__ssvfiscanf_r+0x444>
   1ee28:	4659      	mov	r1, fp
   1ee2a:	4638      	mov	r0, r7
   1ee2c:	f7ff fd6a 	bl	1e904 <__ssrefill_r>
   1ee30:	2800      	cmp	r0, #0
   1ee32:	f47f aef6 	bne.w	1ec22 <__ssvfiscanf_r+0x262>
   1ee36:	f8db 2000 	ldr.w	r2, [fp]
   1ee3a:	7813      	ldrb	r3, [r2, #0]
   1ee3c:	f818 3003 	ldrb.w	r3, [r8, r3]
   1ee40:	3201      	adds	r2, #1
   1ee42:	2b00      	cmp	r3, #0
   1ee44:	d1e3      	bne.n	1ee0e <__ssvfiscanf_r+0x44e>
   1ee46:	2d00      	cmp	r5, #0
   1ee48:	f47f aeeb 	bne.w	1ec22 <__ssvfiscanf_r+0x262>
   1ee4c:	e604      	b.n	1ea58 <__ssvfiscanf_r+0x98>
   1ee4e:	bf00      	nop
   1ee50:	0001fcf1 	.word	0x0001fcf1
   1ee54:	0001dce5 	.word	0x0001dce5
   1ee58:	1e63      	subs	r3, r4, #1
   1ee5a:	2b26      	cmp	r3, #38	; 0x26
   1ee5c:	bf8c      	ite	hi
   1ee5e:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
   1ee62:	2200      	movls	r2, #0
   1ee64:	f04f 0900 	mov.w	r9, #0
   1ee68:	4611      	mov	r1, r2
   1ee6a:	ae0e      	add	r6, sp, #56	; 0x38
   1ee6c:	464b      	mov	r3, r9
   1ee6e:	46b9      	mov	r9, r7
   1ee70:	9f04      	ldr	r7, [sp, #16]
   1ee72:	4652      	mov	r2, sl
   1ee74:	bf88      	it	hi
   1ee76:	2427      	movhi	r4, #39	; 0x27
   1ee78:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
   1ee7c:	46b0      	mov	r8, r6
   1ee7e:	468a      	mov	sl, r1
   1ee80:	f8db 0000 	ldr.w	r0, [fp]
   1ee84:	f890 e000 	ldrb.w	lr, [r0]
   1ee88:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
   1ee8c:	294d      	cmp	r1, #77	; 0x4d
   1ee8e:	d842      	bhi.n	1ef16 <__ssvfiscanf_r+0x556>
   1ee90:	e8df f001 	tbb	[pc, r1]
   1ee94:	418e418e 	.word	0x418e418e
   1ee98:	5d5d6341 	.word	0x5d5d6341
   1ee9c:	5d5d5d5d 	.word	0x5d5d5d5d
   1eea0:	4188885d 	.word	0x4188885d
   1eea4:	41414141 	.word	0x41414141
   1eea8:	58584141 	.word	0x58584141
   1eeac:	58585858 	.word	0x58585858
   1eeb0:	41414141 	.word	0x41414141
   1eeb4:	41414141 	.word	0x41414141
   1eeb8:	41414141 	.word	0x41414141
   1eebc:	41414141 	.word	0x41414141
   1eec0:	41412741 	.word	0x41412741
   1eec4:	41414141 	.word	0x41414141
   1eec8:	58584141 	.word	0x58584141
   1eecc:	58585858 	.word	0x58585858
   1eed0:	41414141 	.word	0x41414141
   1eed4:	41414141 	.word	0x41414141
   1eed8:	41414141 	.word	0x41414141
   1eedc:	41414141 	.word	0x41414141
   1eee0:	2741      	.short	0x2741
   1eee2:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
   1eee6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1eeea:	d114      	bne.n	1ef16 <__ssvfiscanf_r+0x556>
   1eeec:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   1eef0:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
   1eef4:	2710      	movs	r7, #16
   1eef6:	f8db 1004 	ldr.w	r1, [fp, #4]
   1eefa:	f888 e000 	strb.w	lr, [r8]
   1eefe:	3901      	subs	r1, #1
   1ef00:	2900      	cmp	r1, #0
   1ef02:	f108 0801 	add.w	r8, r8, #1
   1ef06:	f8cb 1004 	str.w	r1, [fp, #4]
   1ef0a:	dd40      	ble.n	1ef8e <__ssvfiscanf_r+0x5ce>
   1ef0c:	3001      	adds	r0, #1
   1ef0e:	f8cb 0000 	str.w	r0, [fp]
   1ef12:	3c01      	subs	r4, #1
   1ef14:	d1b4      	bne.n	1ee80 <__ssvfiscanf_r+0x4c0>
   1ef16:	05e8      	lsls	r0, r5, #23
   1ef18:	9704      	str	r7, [sp, #16]
   1ef1a:	4692      	mov	sl, r2
   1ef1c:	464f      	mov	r7, r9
   1ef1e:	4699      	mov	r9, r3
   1ef20:	d505      	bpl.n	1ef2e <__ssvfiscanf_r+0x56e>
   1ef22:	45b0      	cmp	r8, r6
   1ef24:	f200 8194 	bhi.w	1f250 <__ssvfiscanf_r+0x890>
   1ef28:	45b0      	cmp	r8, r6
   1ef2a:	f43f ad95 	beq.w	1ea58 <__ssvfiscanf_r+0x98>
   1ef2e:	f015 0410 	ands.w	r4, r5, #16
   1ef32:	f000 80e5 	beq.w	1f100 <__ssvfiscanf_r+0x740>
   1ef36:	eba8 0606 	sub.w	r6, r8, r6
   1ef3a:	44b1      	add	r9, r6
   1ef3c:	9e03      	ldr	r6, [sp, #12]
   1ef3e:	44ca      	add	sl, r9
   1ef40:	4634      	mov	r4, r6
   1ef42:	e583      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1ef44:	2f0a      	cmp	r7, #10
   1ef46:	dde6      	ble.n	1ef16 <__ssvfiscanf_r+0x556>
   1ef48:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1ef4c:	e7d3      	b.n	1eef6 <__ssvfiscanf_r+0x536>
   1ef4e:	49b3      	ldr	r1, [pc, #716]	; (1f21c <__ssvfiscanf_r+0x85c>)
   1ef50:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1ef54:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1ef58:	e7cd      	b.n	1eef6 <__ssvfiscanf_r+0x536>
   1ef5a:	0529      	lsls	r1, r5, #20
   1ef5c:	d5cb      	bpl.n	1eef6 <__ssvfiscanf_r+0x536>
   1ef5e:	b917      	cbnz	r7, 1ef66 <__ssvfiscanf_r+0x5a6>
   1ef60:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1ef64:	2708      	movs	r7, #8
   1ef66:	0569      	lsls	r1, r5, #21
   1ef68:	f100 80fa 	bmi.w	1f160 <__ssvfiscanf_r+0x7a0>
   1ef6c:	f425 7560 	bic.w	r5, r5, #896	; 0x380
   1ef70:	f1ba 0f00 	cmp.w	sl, #0
   1ef74:	d002      	beq.n	1ef7c <__ssvfiscanf_r+0x5bc>
   1ef76:	f10a 3aff 	add.w	sl, sl, #4294967295
   1ef7a:	3401      	adds	r4, #1
   1ef7c:	f8db 1004 	ldr.w	r1, [fp, #4]
   1ef80:	3901      	subs	r1, #1
   1ef82:	2900      	cmp	r1, #0
   1ef84:	f103 0301 	add.w	r3, r3, #1
   1ef88:	f8cb 1004 	str.w	r1, [fp, #4]
   1ef8c:	dcbe      	bgt.n	1ef0c <__ssvfiscanf_r+0x54c>
   1ef8e:	4659      	mov	r1, fp
   1ef90:	4648      	mov	r0, r9
   1ef92:	9308      	str	r3, [sp, #32]
   1ef94:	9204      	str	r2, [sp, #16]
   1ef96:	f7ff fcb5 	bl	1e904 <__ssrefill_r>
   1ef9a:	9a04      	ldr	r2, [sp, #16]
   1ef9c:	9b08      	ldr	r3, [sp, #32]
   1ef9e:	2800      	cmp	r0, #0
   1efa0:	d0b7      	beq.n	1ef12 <__ssvfiscanf_r+0x552>
   1efa2:	e7b8      	b.n	1ef16 <__ssvfiscanf_r+0x556>
   1efa4:	499d      	ldr	r1, [pc, #628]	; (1f21c <__ssvfiscanf_r+0x85c>)
   1efa6:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1efaa:	2f08      	cmp	r7, #8
   1efac:	dccc      	bgt.n	1ef48 <__ssvfiscanf_r+0x588>
   1efae:	e7b2      	b.n	1ef16 <__ssvfiscanf_r+0x556>
   1efb0:	0629      	lsls	r1, r5, #24
   1efb2:	d5b0      	bpl.n	1ef16 <__ssvfiscanf_r+0x556>
   1efb4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   1efb8:	e79d      	b.n	1eef6 <__ssvfiscanf_r+0x536>
   1efba:	2c00      	cmp	r4, #0
   1efbc:	bf08      	it	eq
   1efbe:	f04f 34ff 	moveq.w	r4, #4294967295
   1efc2:	f015 0601 	ands.w	r6, r5, #1
   1efc6:	f47f aeea 	bne.w	1ed9e <__ssvfiscanf_r+0x3de>
   1efca:	06eb      	lsls	r3, r5, #27
   1efcc:	f140 80f4 	bpl.w	1f1b8 <__ssvfiscanf_r+0x7f8>
   1efd0:	f000 fb64 	bl	1f69c <__locale_ctype_ptr>
   1efd4:	f8db 3000 	ldr.w	r3, [fp]
   1efd8:	781a      	ldrb	r2, [r3, #0]
   1efda:	4410      	add	r0, r2
   1efdc:	3301      	adds	r3, #1
   1efde:	7842      	ldrb	r2, [r0, #1]
   1efe0:	0715      	lsls	r5, r2, #28
   1efe2:	d411      	bmi.n	1f008 <__ssvfiscanf_r+0x648>
   1efe4:	f8db 2004 	ldr.w	r2, [fp, #4]
   1efe8:	f8cb 3000 	str.w	r3, [fp]
   1efec:	3601      	adds	r6, #1
   1efee:	3a01      	subs	r2, #1
   1eff0:	42b4      	cmp	r4, r6
   1eff2:	f8cb 2004 	str.w	r2, [fp, #4]
   1eff6:	d007      	beq.n	1f008 <__ssvfiscanf_r+0x648>
   1eff8:	2a00      	cmp	r2, #0
   1effa:	dce9      	bgt.n	1efd0 <__ssvfiscanf_r+0x610>
   1effc:	4659      	mov	r1, fp
   1effe:	4638      	mov	r0, r7
   1f000:	f7ff fc80 	bl	1e904 <__ssrefill_r>
   1f004:	2800      	cmp	r0, #0
   1f006:	d0e3      	beq.n	1efd0 <__ssvfiscanf_r+0x610>
   1f008:	44b2      	add	sl, r6
   1f00a:	9e03      	ldr	r6, [sp, #12]
   1f00c:	4634      	mov	r4, r6
   1f00e:	e51d      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1f010:	9a06      	ldr	r2, [sp, #24]
   1f012:	6815      	ldr	r5, [r2, #0]
   1f014:	1d16      	adds	r6, r2, #4
   1f016:	46a9      	mov	r9, r5
   1f018:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1f01c:	f8db 3000 	ldr.w	r3, [fp]
   1f020:	781a      	ldrb	r2, [r3, #0]
   1f022:	f818 2002 	ldrb.w	r2, [r8, r2]
   1f026:	1c59      	adds	r1, r3, #1
   1f028:	b1c2      	cbz	r2, 1f05c <__ssvfiscanf_r+0x69c>
   1f02a:	f8db 2004 	ldr.w	r2, [fp, #4]
   1f02e:	f8cb 1000 	str.w	r1, [fp]
   1f032:	3a01      	subs	r2, #1
   1f034:	f8cb 2004 	str.w	r2, [fp, #4]
   1f038:	781b      	ldrb	r3, [r3, #0]
   1f03a:	f809 3b01 	strb.w	r3, [r9], #1
   1f03e:	3c01      	subs	r4, #1
   1f040:	d00c      	beq.n	1f05c <__ssvfiscanf_r+0x69c>
   1f042:	f8db 3004 	ldr.w	r3, [fp, #4]
   1f046:	2b00      	cmp	r3, #0
   1f048:	dce8      	bgt.n	1f01c <__ssvfiscanf_r+0x65c>
   1f04a:	4659      	mov	r1, fp
   1f04c:	4638      	mov	r0, r7
   1f04e:	f7ff fc59 	bl	1e904 <__ssrefill_r>
   1f052:	2800      	cmp	r0, #0
   1f054:	d0e2      	beq.n	1f01c <__ssvfiscanf_r+0x65c>
   1f056:	454d      	cmp	r5, r9
   1f058:	f43f ae02 	beq.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f05c:	ebb9 0505 	subs.w	r5, r9, r5
   1f060:	f43f acfa 	beq.w	1ea58 <__ssvfiscanf_r+0x98>
   1f064:	9a05      	ldr	r2, [sp, #20]
   1f066:	9606      	str	r6, [sp, #24]
   1f068:	2300      	movs	r3, #0
   1f06a:	3201      	adds	r2, #1
   1f06c:	9205      	str	r2, [sp, #20]
   1f06e:	f889 3000 	strb.w	r3, [r9]
   1f072:	e5d6      	b.n	1ec22 <__ssvfiscanf_r+0x262>
   1f074:	ab0c      	add	r3, sp, #48	; 0x30
   1f076:	4618      	mov	r0, r3
   1f078:	2208      	movs	r2, #8
   1f07a:	2100      	movs	r1, #0
   1f07c:	9308      	str	r3, [sp, #32]
   1f07e:	f7fd fa9b 	bl	1c5b8 <memset>
   1f082:	f015 0310 	ands.w	r3, r5, #16
   1f086:	9309      	str	r3, [sp, #36]	; 0x24
   1f088:	d06d      	beq.n	1f166 <__ssvfiscanf_r+0x7a6>
   1f08a:	f04f 0900 	mov.w	r9, #0
   1f08e:	2c00      	cmp	r4, #0
   1f090:	f43f aea9 	beq.w	1ede6 <__ssvfiscanf_r+0x426>
   1f094:	2500      	movs	r5, #0
   1f096:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1f09a:	f000 faed 	bl	1f678 <__locale_mb_cur_max>
   1f09e:	4285      	cmp	r5, r0
   1f0a0:	f43f adde 	beq.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f0a4:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1f0a8:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f0ac:	f8cb 2000 	str.w	r2, [fp]
   1f0b0:	3b01      	subs	r3, #1
   1f0b2:	9a08      	ldr	r2, [sp, #32]
   1f0b4:	9200      	str	r2, [sp, #0]
   1f0b6:	1c6e      	adds	r6, r5, #1
   1f0b8:	f8cb 3004 	str.w	r3, [fp, #4]
   1f0bc:	f808 0005 	strb.w	r0, [r8, r5]
   1f0c0:	4633      	mov	r3, r6
   1f0c2:	4642      	mov	r2, r8
   1f0c4:	4649      	mov	r1, r9
   1f0c6:	4638      	mov	r0, r7
   1f0c8:	f000 faf6 	bl	1f6b8 <_mbrtowc_r>
   1f0cc:	1c43      	adds	r3, r0, #1
   1f0ce:	f43f adc7 	beq.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f0d2:	2800      	cmp	r0, #0
   1f0d4:	d15d      	bne.n	1f192 <__ssvfiscanf_r+0x7d2>
   1f0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f0d8:	2b00      	cmp	r3, #0
   1f0da:	d15e      	bne.n	1f19a <__ssvfiscanf_r+0x7da>
   1f0dc:	f8c9 3000 	str.w	r3, [r9]
   1f0e0:	44b2      	add	sl, r6
   1f0e2:	3c01      	subs	r4, #1
   1f0e4:	f109 0904 	add.w	r9, r9, #4
   1f0e8:	2500      	movs	r5, #0
   1f0ea:	f8db 3004 	ldr.w	r3, [fp, #4]
   1f0ee:	2b00      	cmp	r3, #0
   1f0f0:	dd2d      	ble.n	1f14e <__ssvfiscanf_r+0x78e>
   1f0f2:	2c00      	cmp	r4, #0
   1f0f4:	d1d1      	bne.n	1f09a <__ssvfiscanf_r+0x6da>
   1f0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f0f8:	2b00      	cmp	r3, #0
   1f0fa:	f43f ae71 	beq.w	1ede0 <__ssvfiscanf_r+0x420>
   1f0fe:	e672      	b.n	1ede6 <__ssvfiscanf_r+0x426>
   1f100:	4622      	mov	r2, r4
   1f102:	4631      	mov	r1, r6
   1f104:	f888 4000 	strb.w	r4, [r8]
   1f108:	9b04      	ldr	r3, [sp, #16]
   1f10a:	9c07      	ldr	r4, [sp, #28]
   1f10c:	4638      	mov	r0, r7
   1f10e:	47a0      	blx	r4
   1f110:	06a9      	lsls	r1, r5, #26
   1f112:	d438      	bmi.n	1f186 <__ssvfiscanf_r+0x7c6>
   1f114:	076a      	lsls	r2, r5, #29
   1f116:	f100 80be 	bmi.w	1f296 <__ssvfiscanf_r+0x8d6>
   1f11a:	f015 0201 	ands.w	r2, r5, #1
   1f11e:	d132      	bne.n	1f186 <__ssvfiscanf_r+0x7c6>
   1f120:	07ab      	lsls	r3, r5, #30
   1f122:	d530      	bpl.n	1f186 <__ssvfiscanf_r+0x7c6>
   1f124:	9b07      	ldr	r3, [sp, #28]
   1f126:	4619      	mov	r1, r3
   1f128:	4b3d      	ldr	r3, [pc, #244]	; (1f220 <__ssvfiscanf_r+0x860>)
   1f12a:	4299      	cmp	r1, r3
   1f12c:	4638      	mov	r0, r7
   1f12e:	9b04      	ldr	r3, [sp, #16]
   1f130:	4631      	mov	r1, r6
   1f132:	f000 8105 	beq.w	1f340 <__ssvfiscanf_r+0x980>
   1f136:	f000 febb 	bl	1feb0 <_strtoll_r>
   1f13a:	9a06      	ldr	r2, [sp, #24]
   1f13c:	6813      	ldr	r3, [r2, #0]
   1f13e:	e9c3 0100 	strd	r0, r1, [r3]
   1f142:	3204      	adds	r2, #4
   1f144:	9206      	str	r2, [sp, #24]
   1f146:	9b05      	ldr	r3, [sp, #20]
   1f148:	3301      	adds	r3, #1
   1f14a:	9305      	str	r3, [sp, #20]
   1f14c:	e6f3      	b.n	1ef36 <__ssvfiscanf_r+0x576>
   1f14e:	4659      	mov	r1, fp
   1f150:	4638      	mov	r0, r7
   1f152:	f7ff fbd7 	bl	1e904 <__ssrefill_r>
   1f156:	2800      	cmp	r0, #0
   1f158:	d0cb      	beq.n	1f0f2 <__ssvfiscanf_r+0x732>
   1f15a:	2d00      	cmp	r5, #0
   1f15c:	d0cb      	beq.n	1f0f6 <__ssvfiscanf_r+0x736>
   1f15e:	e57f      	b.n	1ec60 <__ssvfiscanf_r+0x2a0>
   1f160:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
   1f164:	e6c7      	b.n	1eef6 <__ssvfiscanf_r+0x536>
   1f166:	9a06      	ldr	r2, [sp, #24]
   1f168:	4613      	mov	r3, r2
   1f16a:	3304      	adds	r3, #4
   1f16c:	f8d2 9000 	ldr.w	r9, [r2]
   1f170:	9306      	str	r3, [sp, #24]
   1f172:	2c00      	cmp	r4, #0
   1f174:	d18e      	bne.n	1f094 <__ssvfiscanf_r+0x6d4>
   1f176:	e633      	b.n	1ede0 <__ssvfiscanf_r+0x420>
   1f178:	9a06      	ldr	r2, [sp, #24]
   1f17a:	4613      	mov	r3, r2
   1f17c:	3304      	adds	r3, #4
   1f17e:	f8d2 9000 	ldr.w	r9, [r2]
   1f182:	9306      	str	r3, [sp, #24]
   1f184:	e619      	b.n	1edba <__ssvfiscanf_r+0x3fa>
   1f186:	9a06      	ldr	r2, [sp, #24]
   1f188:	6813      	ldr	r3, [r2, #0]
   1f18a:	3204      	adds	r2, #4
   1f18c:	9206      	str	r2, [sp, #24]
   1f18e:	6018      	str	r0, [r3, #0]
   1f190:	e7d9      	b.n	1f146 <__ssvfiscanf_r+0x786>
   1f192:	3002      	adds	r0, #2
   1f194:	d105      	bne.n	1f1a2 <__ssvfiscanf_r+0x7e2>
   1f196:	4635      	mov	r5, r6
   1f198:	e7a7      	b.n	1f0ea <__ssvfiscanf_r+0x72a>
   1f19a:	44b2      	add	sl, r6
   1f19c:	3c01      	subs	r4, #1
   1f19e:	4605      	mov	r5, r0
   1f1a0:	e7a3      	b.n	1f0ea <__ssvfiscanf_r+0x72a>
   1f1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f1a4:	44b2      	add	sl, r6
   1f1a6:	3c01      	subs	r4, #1
   1f1a8:	2b00      	cmp	r3, #0
   1f1aa:	d09b      	beq.n	1f0e4 <__ssvfiscanf_r+0x724>
   1f1ac:	2500      	movs	r5, #0
   1f1ae:	e79c      	b.n	1f0ea <__ssvfiscanf_r+0x72a>
   1f1b0:	2d00      	cmp	r5, #0
   1f1b2:	f47f ad36 	bne.w	1ec22 <__ssvfiscanf_r+0x262>
   1f1b6:	e553      	b.n	1ec60 <__ssvfiscanf_r+0x2a0>
   1f1b8:	9a06      	ldr	r2, [sp, #24]
   1f1ba:	6816      	ldr	r6, [r2, #0]
   1f1bc:	f102 0804 	add.w	r8, r2, #4
   1f1c0:	4635      	mov	r5, r6
   1f1c2:	f000 fa6b 	bl	1f69c <__locale_ctype_ptr>
   1f1c6:	f8db 2000 	ldr.w	r2, [fp]
   1f1ca:	7813      	ldrb	r3, [r2, #0]
   1f1cc:	4418      	add	r0, r3
   1f1ce:	1c51      	adds	r1, r2, #1
   1f1d0:	7843      	ldrb	r3, [r0, #1]
   1f1d2:	0718      	lsls	r0, r3, #28
   1f1d4:	d415      	bmi.n	1f202 <__ssvfiscanf_r+0x842>
   1f1d6:	f8db 3004 	ldr.w	r3, [fp, #4]
   1f1da:	f8cb 1000 	str.w	r1, [fp]
   1f1de:	3b01      	subs	r3, #1
   1f1e0:	f8cb 3004 	str.w	r3, [fp, #4]
   1f1e4:	7813      	ldrb	r3, [r2, #0]
   1f1e6:	f805 3b01 	strb.w	r3, [r5], #1
   1f1ea:	3c01      	subs	r4, #1
   1f1ec:	d009      	beq.n	1f202 <__ssvfiscanf_r+0x842>
   1f1ee:	f8db 3004 	ldr.w	r3, [fp, #4]
   1f1f2:	2b00      	cmp	r3, #0
   1f1f4:	dce5      	bgt.n	1f1c2 <__ssvfiscanf_r+0x802>
   1f1f6:	4659      	mov	r1, fp
   1f1f8:	4638      	mov	r0, r7
   1f1fa:	f7ff fb83 	bl	1e904 <__ssrefill_r>
   1f1fe:	2800      	cmp	r0, #0
   1f200:	d0df      	beq.n	1f1c2 <__ssvfiscanf_r+0x802>
   1f202:	1bae      	subs	r6, r5, r6
   1f204:	9a05      	ldr	r2, [sp, #20]
   1f206:	f8cd 8018 	str.w	r8, [sp, #24]
   1f20a:	44b2      	add	sl, r6
   1f20c:	9e03      	ldr	r6, [sp, #12]
   1f20e:	2300      	movs	r3, #0
   1f210:	3201      	adds	r2, #1
   1f212:	9205      	str	r2, [sp, #20]
   1f214:	702b      	strb	r3, [r5, #0]
   1f216:	4634      	mov	r4, r6
   1f218:	e418      	b.n	1ea4c <__ssvfiscanf_r+0x8c>
   1f21a:	bf00      	nop
   1f21c:	00022574 	.word	0x00022574
   1f220:	0001dce5 	.word	0x0001dce5
   1f224:	9d06      	ldr	r5, [sp, #24]
   1f226:	4623      	mov	r3, r4
   1f228:	6829      	ldr	r1, [r5, #0]
   1f22a:	f8cd b000 	str.w	fp, [sp]
   1f22e:	2201      	movs	r2, #1
   1f230:	4638      	mov	r0, r7
   1f232:	f7ff fb85 	bl	1e940 <_sfread_r>
   1f236:	1d2e      	adds	r6, r5, #4
   1f238:	2800      	cmp	r0, #0
   1f23a:	f43f ad11 	beq.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f23e:	9b05      	ldr	r3, [sp, #20]
   1f240:	9606      	str	r6, [sp, #24]
   1f242:	9e03      	ldr	r6, [sp, #12]
   1f244:	3301      	adds	r3, #1
   1f246:	4482      	add	sl, r0
   1f248:	9305      	str	r3, [sp, #20]
   1f24a:	4634      	mov	r4, r6
   1f24c:	f7ff bbfe 	b.w	1ea4c <__ssvfiscanf_r+0x8c>
   1f250:	f818 1c01 	ldrb.w	r1, [r8, #-1]
   1f254:	465a      	mov	r2, fp
   1f256:	4638      	mov	r0, r7
   1f258:	f7ff fb14 	bl	1e884 <_sungetc_r>
   1f25c:	f108 38ff 	add.w	r8, r8, #4294967295
   1f260:	e662      	b.n	1ef28 <__ssvfiscanf_r+0x568>
   1f262:	4659      	mov	r1, fp
   1f264:	4638      	mov	r0, r7
   1f266:	f7ff fb4d 	bl	1e904 <__ssrefill_r>
   1f26a:	2800      	cmp	r0, #0
   1f26c:	f43f ac84 	beq.w	1eb78 <__ssvfiscanf_r+0x1b8>
   1f270:	e4f6      	b.n	1ec60 <__ssvfiscanf_r+0x2a0>
   1f272:	f896 8002 	ldrb.w	r8, [r6, #2]
   1f276:	f045 0502 	orr.w	r5, r5, #2
   1f27a:	3602      	adds	r6, #2
   1f27c:	f7ff bbf6 	b.w	1ea6c <__ssvfiscanf_r+0xac>
   1f280:	9a06      	ldr	r2, [sp, #24]
   1f282:	9e03      	ldr	r6, [sp, #12]
   1f284:	6813      	ldr	r3, [r2, #0]
   1f286:	f8c3 a000 	str.w	sl, [r3]
   1f28a:	4613      	mov	r3, r2
   1f28c:	3304      	adds	r3, #4
   1f28e:	9306      	str	r3, [sp, #24]
   1f290:	4634      	mov	r4, r6
   1f292:	f7ff bbdb 	b.w	1ea4c <__ssvfiscanf_r+0x8c>
   1f296:	9a06      	ldr	r2, [sp, #24]
   1f298:	6813      	ldr	r3, [r2, #0]
   1f29a:	3204      	adds	r2, #4
   1f29c:	9206      	str	r2, [sp, #24]
   1f29e:	8018      	strh	r0, [r3, #0]
   1f2a0:	e751      	b.n	1f146 <__ssvfiscanf_r+0x786>
   1f2a2:	9a06      	ldr	r2, [sp, #24]
   1f2a4:	9e03      	ldr	r6, [sp, #12]
   1f2a6:	6813      	ldr	r3, [r2, #0]
   1f2a8:	f8a3 a000 	strh.w	sl, [r3]
   1f2ac:	4613      	mov	r3, r2
   1f2ae:	3304      	adds	r3, #4
   1f2b0:	9306      	str	r3, [sp, #24]
   1f2b2:	4634      	mov	r4, r6
   1f2b4:	f7ff bbca 	b.w	1ea4c <__ssvfiscanf_r+0x8c>
   1f2b8:	f000 f9de 	bl	1f678 <__locale_mb_cur_max>
   1f2bc:	4286      	cmp	r6, r0
   1f2be:	f43f accf 	beq.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f2c2:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1f2c6:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f2ca:	f8cb 2000 	str.w	r2, [fp]
   1f2ce:	3b01      	subs	r3, #1
   1f2d0:	9a08      	ldr	r2, [sp, #32]
   1f2d2:	9200      	str	r2, [sp, #0]
   1f2d4:	1c75      	adds	r5, r6, #1
   1f2d6:	f8cb 3004 	str.w	r3, [fp, #4]
   1f2da:	4649      	mov	r1, r9
   1f2dc:	f808 0006 	strb.w	r0, [r8, r6]
   1f2e0:	462b      	mov	r3, r5
   1f2e2:	4642      	mov	r2, r8
   1f2e4:	4638      	mov	r0, r7
   1f2e6:	f000 f9e7 	bl	1f6b8 <_mbrtowc_r>
   1f2ea:	1c41      	adds	r1, r0, #1
   1f2ec:	f43f acb8 	beq.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f2f0:	b198      	cbz	r0, 1f31a <__ssvfiscanf_r+0x95a>
   1f2f2:	3002      	adds	r0, #2
   1f2f4:	bf08      	it	eq
   1f2f6:	462e      	moveq	r6, r5
   1f2f8:	d12e      	bne.n	1f358 <__ssvfiscanf_r+0x998>
   1f2fa:	f8db 3004 	ldr.w	r3, [fp, #4]
   1f2fe:	2b00      	cmp	r3, #0
   1f300:	f73f ad5e 	bgt.w	1edc0 <__ssvfiscanf_r+0x400>
   1f304:	4659      	mov	r1, fp
   1f306:	4638      	mov	r0, r7
   1f308:	f7ff fafc 	bl	1e904 <__ssrefill_r>
   1f30c:	2800      	cmp	r0, #0
   1f30e:	f43f ad57 	beq.w	1edc0 <__ssvfiscanf_r+0x400>
   1f312:	2e00      	cmp	r6, #0
   1f314:	f47f aca4 	bne.w	1ec60 <__ssvfiscanf_r+0x2a0>
   1f318:	e55e      	b.n	1edd8 <__ssvfiscanf_r+0x418>
   1f31a:	f8c9 0000 	str.w	r0, [r9]
   1f31e:	f000 f99d 	bl	1f65c <iswspace>
   1f322:	4606      	mov	r6, r0
   1f324:	b178      	cbz	r0, 1f346 <__ssvfiscanf_r+0x986>
   1f326:	2d00      	cmp	r5, #0
   1f328:	f43f ad56 	beq.w	1edd8 <__ssvfiscanf_r+0x418>
   1f32c:	4445      	add	r5, r8
   1f32e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1f332:	465a      	mov	r2, fp
   1f334:	4638      	mov	r0, r7
   1f336:	f7ff faa5 	bl	1e884 <_sungetc_r>
   1f33a:	4545      	cmp	r5, r8
   1f33c:	d1f7      	bne.n	1f32e <__ssvfiscanf_r+0x96e>
   1f33e:	e54b      	b.n	1edd8 <__ssvfiscanf_r+0x418>
   1f340:	f000 fea6 	bl	20090 <_strtoull_r>
   1f344:	e6f9      	b.n	1f13a <__ssvfiscanf_r+0x77a>
   1f346:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f348:	44aa      	add	sl, r5
   1f34a:	3c01      	subs	r4, #1
   1f34c:	2b00      	cmp	r3, #0
   1f34e:	d1d4      	bne.n	1f2fa <__ssvfiscanf_r+0x93a>
   1f350:	f109 0904 	add.w	r9, r9, #4
   1f354:	461e      	mov	r6, r3
   1f356:	e7d0      	b.n	1f2fa <__ssvfiscanf_r+0x93a>
   1f358:	f8d9 0000 	ldr.w	r0, [r9]
   1f35c:	e7df      	b.n	1f31e <__ssvfiscanf_r+0x95e>
   1f35e:	bf00      	nop

0001f360 <__submore>:
   1f360:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1f364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f368:	460c      	mov	r4, r1
   1f36a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1f36c:	4299      	cmp	r1, r3
   1f36e:	d014      	beq.n	1f39a <__submore+0x3a>
   1f370:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1f372:	0077      	lsls	r7, r6, #1
   1f374:	463a      	mov	r2, r7
   1f376:	f000 fa47 	bl	1f808 <_realloc_r>
   1f37a:	4605      	mov	r5, r0
   1f37c:	b340      	cbz	r0, 1f3d0 <__submore+0x70>
   1f37e:	eb00 0806 	add.w	r8, r0, r6
   1f382:	4632      	mov	r2, r6
   1f384:	4640      	mov	r0, r8
   1f386:	4629      	mov	r1, r5
   1f388:	f7fd f87c 	bl	1c484 <memcpy>
   1f38c:	f8c4 8000 	str.w	r8, [r4]
   1f390:	6325      	str	r5, [r4, #48]	; 0x30
   1f392:	6367      	str	r7, [r4, #52]	; 0x34
   1f394:	2000      	movs	r0, #0
   1f396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f39a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1f39e:	f7fd fe5d 	bl	1d05c <_malloc_r>
   1f3a2:	b1a8      	cbz	r0, 1f3d0 <__submore+0x70>
   1f3a4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1f3a8:	6320      	str	r0, [r4, #48]	; 0x30
   1f3aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f3ae:	6362      	str	r2, [r4, #52]	; 0x34
   1f3b0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1f3b4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1f3b8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1f3bc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1f3c0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   1f3c4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   1f3c8:	6020      	str	r0, [r4, #0]
   1f3ca:	2000      	movs	r0, #0
   1f3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f3d0:	f04f 30ff 	mov.w	r0, #4294967295
   1f3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f3d8 <__env_lock>:
   1f3d8:	4801      	ldr	r0, [pc, #4]	; (1f3e0 <__env_lock+0x8>)
   1f3da:	f7fd be39 	b.w	1d050 <__retarget_lock_acquire_recursive>
   1f3de:	bf00      	nop
   1f3e0:	2000a9ec 	.word	0x2000a9ec

0001f3e4 <__env_unlock>:
   1f3e4:	4801      	ldr	r0, [pc, #4]	; (1f3ec <__env_unlock+0x8>)
   1f3e6:	f7fd be37 	b.w	1d058 <__retarget_lock_release_recursive>
   1f3ea:	bf00      	nop
   1f3ec:	2000a9ec 	.word	0x2000a9ec

0001f3f0 <_malloc_trim_r>:
   1f3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3f2:	4f24      	ldr	r7, [pc, #144]	; (1f484 <_malloc_trim_r+0x94>)
   1f3f4:	460c      	mov	r4, r1
   1f3f6:	4606      	mov	r6, r0
   1f3f8:	f7fe f932 	bl	1d660 <__malloc_lock>
   1f3fc:	68bb      	ldr	r3, [r7, #8]
   1f3fe:	685d      	ldr	r5, [r3, #4]
   1f400:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   1f404:	310f      	adds	r1, #15
   1f406:	f025 0503 	bic.w	r5, r5, #3
   1f40a:	4429      	add	r1, r5
   1f40c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   1f410:	f021 010f 	bic.w	r1, r1, #15
   1f414:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   1f418:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1f41c:	db07      	blt.n	1f42e <_malloc_trim_r+0x3e>
   1f41e:	2100      	movs	r1, #0
   1f420:	4630      	mov	r0, r6
   1f422:	f7fe f929 	bl	1d678 <_sbrk_r>
   1f426:	68bb      	ldr	r3, [r7, #8]
   1f428:	442b      	add	r3, r5
   1f42a:	4298      	cmp	r0, r3
   1f42c:	d004      	beq.n	1f438 <_malloc_trim_r+0x48>
   1f42e:	4630      	mov	r0, r6
   1f430:	f7fe f91c 	bl	1d66c <__malloc_unlock>
   1f434:	2000      	movs	r0, #0
   1f436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f438:	4261      	negs	r1, r4
   1f43a:	4630      	mov	r0, r6
   1f43c:	f7fe f91c 	bl	1d678 <_sbrk_r>
   1f440:	3001      	adds	r0, #1
   1f442:	d00d      	beq.n	1f460 <_malloc_trim_r+0x70>
   1f444:	4b10      	ldr	r3, [pc, #64]	; (1f488 <_malloc_trim_r+0x98>)
   1f446:	68ba      	ldr	r2, [r7, #8]
   1f448:	6819      	ldr	r1, [r3, #0]
   1f44a:	1b2d      	subs	r5, r5, r4
   1f44c:	f045 0501 	orr.w	r5, r5, #1
   1f450:	4630      	mov	r0, r6
   1f452:	1b09      	subs	r1, r1, r4
   1f454:	6055      	str	r5, [r2, #4]
   1f456:	6019      	str	r1, [r3, #0]
   1f458:	f7fe f908 	bl	1d66c <__malloc_unlock>
   1f45c:	2001      	movs	r0, #1
   1f45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f460:	2100      	movs	r1, #0
   1f462:	4630      	mov	r0, r6
   1f464:	f7fe f908 	bl	1d678 <_sbrk_r>
   1f468:	68ba      	ldr	r2, [r7, #8]
   1f46a:	1a83      	subs	r3, r0, r2
   1f46c:	2b0f      	cmp	r3, #15
   1f46e:	ddde      	ble.n	1f42e <_malloc_trim_r+0x3e>
   1f470:	4c06      	ldr	r4, [pc, #24]	; (1f48c <_malloc_trim_r+0x9c>)
   1f472:	4905      	ldr	r1, [pc, #20]	; (1f488 <_malloc_trim_r+0x98>)
   1f474:	6824      	ldr	r4, [r4, #0]
   1f476:	f043 0301 	orr.w	r3, r3, #1
   1f47a:	1b00      	subs	r0, r0, r4
   1f47c:	6053      	str	r3, [r2, #4]
   1f47e:	6008      	str	r0, [r1, #0]
   1f480:	e7d5      	b.n	1f42e <_malloc_trim_r+0x3e>
   1f482:	bf00      	nop
   1f484:	200006c4 	.word	0x200006c4
   1f488:	2000a718 	.word	0x2000a718
   1f48c:	20000acc 	.word	0x20000acc

0001f490 <_free_r>:
   1f490:	2900      	cmp	r1, #0
   1f492:	d044      	beq.n	1f51e <_free_r+0x8e>
   1f494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f498:	460d      	mov	r5, r1
   1f49a:	4680      	mov	r8, r0
   1f49c:	f7fe f8e0 	bl	1d660 <__malloc_lock>
   1f4a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
   1f4a4:	4969      	ldr	r1, [pc, #420]	; (1f64c <_free_r+0x1bc>)
   1f4a6:	f027 0301 	bic.w	r3, r7, #1
   1f4aa:	f1a5 0408 	sub.w	r4, r5, #8
   1f4ae:	18e2      	adds	r2, r4, r3
   1f4b0:	688e      	ldr	r6, [r1, #8]
   1f4b2:	6850      	ldr	r0, [r2, #4]
   1f4b4:	42b2      	cmp	r2, r6
   1f4b6:	f020 0003 	bic.w	r0, r0, #3
   1f4ba:	d05e      	beq.n	1f57a <_free_r+0xea>
   1f4bc:	07fe      	lsls	r6, r7, #31
   1f4be:	6050      	str	r0, [r2, #4]
   1f4c0:	d40b      	bmi.n	1f4da <_free_r+0x4a>
   1f4c2:	f855 7c08 	ldr.w	r7, [r5, #-8]
   1f4c6:	1be4      	subs	r4, r4, r7
   1f4c8:	f101 0e08 	add.w	lr, r1, #8
   1f4cc:	68a5      	ldr	r5, [r4, #8]
   1f4ce:	4575      	cmp	r5, lr
   1f4d0:	443b      	add	r3, r7
   1f4d2:	d06d      	beq.n	1f5b0 <_free_r+0x120>
   1f4d4:	68e7      	ldr	r7, [r4, #12]
   1f4d6:	60ef      	str	r7, [r5, #12]
   1f4d8:	60bd      	str	r5, [r7, #8]
   1f4da:	1815      	adds	r5, r2, r0
   1f4dc:	686d      	ldr	r5, [r5, #4]
   1f4de:	07ed      	lsls	r5, r5, #31
   1f4e0:	d53e      	bpl.n	1f560 <_free_r+0xd0>
   1f4e2:	f043 0201 	orr.w	r2, r3, #1
   1f4e6:	6062      	str	r2, [r4, #4]
   1f4e8:	50e3      	str	r3, [r4, r3]
   1f4ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1f4ee:	d217      	bcs.n	1f520 <_free_r+0x90>
   1f4f0:	08db      	lsrs	r3, r3, #3
   1f4f2:	1c58      	adds	r0, r3, #1
   1f4f4:	109a      	asrs	r2, r3, #2
   1f4f6:	684d      	ldr	r5, [r1, #4]
   1f4f8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   1f4fc:	60a7      	str	r7, [r4, #8]
   1f4fe:	2301      	movs	r3, #1
   1f500:	4093      	lsls	r3, r2
   1f502:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   1f506:	432b      	orrs	r3, r5
   1f508:	3a08      	subs	r2, #8
   1f50a:	60e2      	str	r2, [r4, #12]
   1f50c:	604b      	str	r3, [r1, #4]
   1f50e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   1f512:	60fc      	str	r4, [r7, #12]
   1f514:	4640      	mov	r0, r8
   1f516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f51a:	f7fe b8a7 	b.w	1d66c <__malloc_unlock>
   1f51e:	4770      	bx	lr
   1f520:	0a5a      	lsrs	r2, r3, #9
   1f522:	2a04      	cmp	r2, #4
   1f524:	d852      	bhi.n	1f5cc <_free_r+0x13c>
   1f526:	099a      	lsrs	r2, r3, #6
   1f528:	f102 0739 	add.w	r7, r2, #57	; 0x39
   1f52c:	00ff      	lsls	r7, r7, #3
   1f52e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   1f532:	19c8      	adds	r0, r1, r7
   1f534:	59ca      	ldr	r2, [r1, r7]
   1f536:	3808      	subs	r0, #8
   1f538:	4290      	cmp	r0, r2
   1f53a:	d04f      	beq.n	1f5dc <_free_r+0x14c>
   1f53c:	6851      	ldr	r1, [r2, #4]
   1f53e:	f021 0103 	bic.w	r1, r1, #3
   1f542:	428b      	cmp	r3, r1
   1f544:	d232      	bcs.n	1f5ac <_free_r+0x11c>
   1f546:	6892      	ldr	r2, [r2, #8]
   1f548:	4290      	cmp	r0, r2
   1f54a:	d1f7      	bne.n	1f53c <_free_r+0xac>
   1f54c:	68c3      	ldr	r3, [r0, #12]
   1f54e:	60a0      	str	r0, [r4, #8]
   1f550:	60e3      	str	r3, [r4, #12]
   1f552:	609c      	str	r4, [r3, #8]
   1f554:	60c4      	str	r4, [r0, #12]
   1f556:	4640      	mov	r0, r8
   1f558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f55c:	f7fe b886 	b.w	1d66c <__malloc_unlock>
   1f560:	6895      	ldr	r5, [r2, #8]
   1f562:	4f3b      	ldr	r7, [pc, #236]	; (1f650 <_free_r+0x1c0>)
   1f564:	42bd      	cmp	r5, r7
   1f566:	4403      	add	r3, r0
   1f568:	d040      	beq.n	1f5ec <_free_r+0x15c>
   1f56a:	68d0      	ldr	r0, [r2, #12]
   1f56c:	60e8      	str	r0, [r5, #12]
   1f56e:	f043 0201 	orr.w	r2, r3, #1
   1f572:	6085      	str	r5, [r0, #8]
   1f574:	6062      	str	r2, [r4, #4]
   1f576:	50e3      	str	r3, [r4, r3]
   1f578:	e7b7      	b.n	1f4ea <_free_r+0x5a>
   1f57a:	07ff      	lsls	r7, r7, #31
   1f57c:	4403      	add	r3, r0
   1f57e:	d407      	bmi.n	1f590 <_free_r+0x100>
   1f580:	f855 2c08 	ldr.w	r2, [r5, #-8]
   1f584:	1aa4      	subs	r4, r4, r2
   1f586:	4413      	add	r3, r2
   1f588:	68a0      	ldr	r0, [r4, #8]
   1f58a:	68e2      	ldr	r2, [r4, #12]
   1f58c:	60c2      	str	r2, [r0, #12]
   1f58e:	6090      	str	r0, [r2, #8]
   1f590:	4a30      	ldr	r2, [pc, #192]	; (1f654 <_free_r+0x1c4>)
   1f592:	6812      	ldr	r2, [r2, #0]
   1f594:	f043 0001 	orr.w	r0, r3, #1
   1f598:	4293      	cmp	r3, r2
   1f59a:	6060      	str	r0, [r4, #4]
   1f59c:	608c      	str	r4, [r1, #8]
   1f59e:	d3b9      	bcc.n	1f514 <_free_r+0x84>
   1f5a0:	4b2d      	ldr	r3, [pc, #180]	; (1f658 <_free_r+0x1c8>)
   1f5a2:	4640      	mov	r0, r8
   1f5a4:	6819      	ldr	r1, [r3, #0]
   1f5a6:	f7ff ff23 	bl	1f3f0 <_malloc_trim_r>
   1f5aa:	e7b3      	b.n	1f514 <_free_r+0x84>
   1f5ac:	4610      	mov	r0, r2
   1f5ae:	e7cd      	b.n	1f54c <_free_r+0xbc>
   1f5b0:	1811      	adds	r1, r2, r0
   1f5b2:	6849      	ldr	r1, [r1, #4]
   1f5b4:	07c9      	lsls	r1, r1, #31
   1f5b6:	d444      	bmi.n	1f642 <_free_r+0x1b2>
   1f5b8:	6891      	ldr	r1, [r2, #8]
   1f5ba:	68d2      	ldr	r2, [r2, #12]
   1f5bc:	60ca      	str	r2, [r1, #12]
   1f5be:	4403      	add	r3, r0
   1f5c0:	f043 0001 	orr.w	r0, r3, #1
   1f5c4:	6091      	str	r1, [r2, #8]
   1f5c6:	6060      	str	r0, [r4, #4]
   1f5c8:	50e3      	str	r3, [r4, r3]
   1f5ca:	e7a3      	b.n	1f514 <_free_r+0x84>
   1f5cc:	2a14      	cmp	r2, #20
   1f5ce:	d816      	bhi.n	1f5fe <_free_r+0x16e>
   1f5d0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   1f5d4:	00ff      	lsls	r7, r7, #3
   1f5d6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   1f5da:	e7aa      	b.n	1f532 <_free_r+0xa2>
   1f5dc:	10aa      	asrs	r2, r5, #2
   1f5de:	2301      	movs	r3, #1
   1f5e0:	684d      	ldr	r5, [r1, #4]
   1f5e2:	4093      	lsls	r3, r2
   1f5e4:	432b      	orrs	r3, r5
   1f5e6:	604b      	str	r3, [r1, #4]
   1f5e8:	4603      	mov	r3, r0
   1f5ea:	e7b0      	b.n	1f54e <_free_r+0xbe>
   1f5ec:	f043 0201 	orr.w	r2, r3, #1
   1f5f0:	614c      	str	r4, [r1, #20]
   1f5f2:	610c      	str	r4, [r1, #16]
   1f5f4:	60e5      	str	r5, [r4, #12]
   1f5f6:	60a5      	str	r5, [r4, #8]
   1f5f8:	6062      	str	r2, [r4, #4]
   1f5fa:	50e3      	str	r3, [r4, r3]
   1f5fc:	e78a      	b.n	1f514 <_free_r+0x84>
   1f5fe:	2a54      	cmp	r2, #84	; 0x54
   1f600:	d806      	bhi.n	1f610 <_free_r+0x180>
   1f602:	0b1a      	lsrs	r2, r3, #12
   1f604:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   1f608:	00ff      	lsls	r7, r7, #3
   1f60a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   1f60e:	e790      	b.n	1f532 <_free_r+0xa2>
   1f610:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1f614:	d806      	bhi.n	1f624 <_free_r+0x194>
   1f616:	0bda      	lsrs	r2, r3, #15
   1f618:	f102 0778 	add.w	r7, r2, #120	; 0x78
   1f61c:	00ff      	lsls	r7, r7, #3
   1f61e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   1f622:	e786      	b.n	1f532 <_free_r+0xa2>
   1f624:	f240 5054 	movw	r0, #1364	; 0x554
   1f628:	4282      	cmp	r2, r0
   1f62a:	d806      	bhi.n	1f63a <_free_r+0x1aa>
   1f62c:	0c9a      	lsrs	r2, r3, #18
   1f62e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   1f632:	00ff      	lsls	r7, r7, #3
   1f634:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   1f638:	e77b      	b.n	1f532 <_free_r+0xa2>
   1f63a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   1f63e:	257e      	movs	r5, #126	; 0x7e
   1f640:	e777      	b.n	1f532 <_free_r+0xa2>
   1f642:	f043 0101 	orr.w	r1, r3, #1
   1f646:	6061      	str	r1, [r4, #4]
   1f648:	6013      	str	r3, [r2, #0]
   1f64a:	e763      	b.n	1f514 <_free_r+0x84>
   1f64c:	200006c4 	.word	0x200006c4
   1f650:	200006cc 	.word	0x200006cc
   1f654:	20000ad0 	.word	0x20000ad0
   1f658:	2000a748 	.word	0x2000a748

0001f65c <iswspace>:
   1f65c:	28ff      	cmp	r0, #255	; 0xff
   1f65e:	d901      	bls.n	1f664 <iswspace+0x8>
   1f660:	2000      	movs	r0, #0
   1f662:	4770      	bx	lr
   1f664:	b510      	push	{r4, lr}
   1f666:	4604      	mov	r4, r0
   1f668:	f000 f818 	bl	1f69c <__locale_ctype_ptr>
   1f66c:	4420      	add	r0, r4
   1f66e:	7840      	ldrb	r0, [r0, #1]
   1f670:	f000 0008 	and.w	r0, r0, #8
   1f674:	bd10      	pop	{r4, pc}
   1f676:	bf00      	nop

0001f678 <__locale_mb_cur_max>:
   1f678:	4b04      	ldr	r3, [pc, #16]	; (1f68c <__locale_mb_cur_max+0x14>)
   1f67a:	4a05      	ldr	r2, [pc, #20]	; (1f690 <__locale_mb_cur_max+0x18>)
   1f67c:	681b      	ldr	r3, [r3, #0]
   1f67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f680:	2b00      	cmp	r3, #0
   1f682:	bf08      	it	eq
   1f684:	4613      	moveq	r3, r2
   1f686:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1f68a:	4770      	bx	lr
   1f68c:	20000248 	.word	0x20000248
   1f690:	20000ad8 	.word	0x20000ad8

0001f694 <__locale_ctype_ptr_l>:
   1f694:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1f698:	4770      	bx	lr
   1f69a:	bf00      	nop

0001f69c <__locale_ctype_ptr>:
   1f69c:	4b04      	ldr	r3, [pc, #16]	; (1f6b0 <__locale_ctype_ptr+0x14>)
   1f69e:	4a05      	ldr	r2, [pc, #20]	; (1f6b4 <__locale_ctype_ptr+0x18>)
   1f6a0:	681b      	ldr	r3, [r3, #0]
   1f6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f6a4:	2b00      	cmp	r3, #0
   1f6a6:	bf08      	it	eq
   1f6a8:	4613      	moveq	r3, r2
   1f6aa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1f6ae:	4770      	bx	lr
   1f6b0:	20000248 	.word	0x20000248
   1f6b4:	20000ad8 	.word	0x20000ad8

0001f6b8 <_mbrtowc_r>:
   1f6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f6ba:	b083      	sub	sp, #12
   1f6bc:	4607      	mov	r7, r0
   1f6be:	9d08      	ldr	r5, [sp, #32]
   1f6c0:	b192      	cbz	r2, 1f6e8 <_mbrtowc_r+0x30>
   1f6c2:	4c11      	ldr	r4, [pc, #68]	; (1f708 <_mbrtowc_r+0x50>)
   1f6c4:	4e11      	ldr	r6, [pc, #68]	; (1f70c <_mbrtowc_r+0x54>)
   1f6c6:	6824      	ldr	r4, [r4, #0]
   1f6c8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1f6ca:	9500      	str	r5, [sp, #0]
   1f6cc:	2c00      	cmp	r4, #0
   1f6ce:	bf08      	it	eq
   1f6d0:	4634      	moveq	r4, r6
   1f6d2:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   1f6d6:	47a0      	blx	r4
   1f6d8:	1c43      	adds	r3, r0, #1
   1f6da:	d103      	bne.n	1f6e4 <_mbrtowc_r+0x2c>
   1f6dc:	2200      	movs	r2, #0
   1f6de:	238a      	movs	r3, #138	; 0x8a
   1f6e0:	602a      	str	r2, [r5, #0]
   1f6e2:	603b      	str	r3, [r7, #0]
   1f6e4:	b003      	add	sp, #12
   1f6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f6e8:	4b07      	ldr	r3, [pc, #28]	; (1f708 <_mbrtowc_r+0x50>)
   1f6ea:	4908      	ldr	r1, [pc, #32]	; (1f70c <_mbrtowc_r+0x54>)
   1f6ec:	681b      	ldr	r3, [r3, #0]
   1f6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f6f0:	9500      	str	r5, [sp, #0]
   1f6f2:	2b00      	cmp	r3, #0
   1f6f4:	bf08      	it	eq
   1f6f6:	460b      	moveq	r3, r1
   1f6f8:	4614      	mov	r4, r2
   1f6fa:	4621      	mov	r1, r4
   1f6fc:	4a04      	ldr	r2, [pc, #16]	; (1f710 <_mbrtowc_r+0x58>)
   1f6fe:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   1f702:	2301      	movs	r3, #1
   1f704:	47a0      	blx	r4
   1f706:	e7e7      	b.n	1f6d8 <_mbrtowc_r+0x20>
   1f708:	20000248 	.word	0x20000248
   1f70c:	20000ad8 	.word	0x20000ad8
   1f710:	00022534 	.word	0x00022534

0001f714 <__ascii_mbtowc>:
   1f714:	b082      	sub	sp, #8
   1f716:	b149      	cbz	r1, 1f72c <__ascii_mbtowc+0x18>
   1f718:	b15a      	cbz	r2, 1f732 <__ascii_mbtowc+0x1e>
   1f71a:	b16b      	cbz	r3, 1f738 <__ascii_mbtowc+0x24>
   1f71c:	7813      	ldrb	r3, [r2, #0]
   1f71e:	600b      	str	r3, [r1, #0]
   1f720:	7812      	ldrb	r2, [r2, #0]
   1f722:	1c10      	adds	r0, r2, #0
   1f724:	bf18      	it	ne
   1f726:	2001      	movne	r0, #1
   1f728:	b002      	add	sp, #8
   1f72a:	4770      	bx	lr
   1f72c:	a901      	add	r1, sp, #4
   1f72e:	2a00      	cmp	r2, #0
   1f730:	d1f3      	bne.n	1f71a <__ascii_mbtowc+0x6>
   1f732:	4610      	mov	r0, r2
   1f734:	b002      	add	sp, #8
   1f736:	4770      	bx	lr
   1f738:	f06f 0001 	mvn.w	r0, #1
   1f73c:	e7f4      	b.n	1f728 <__ascii_mbtowc+0x14>
   1f73e:	bf00      	nop

0001f740 <memmove>:
   1f740:	4288      	cmp	r0, r1
   1f742:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f744:	d90d      	bls.n	1f762 <memmove+0x22>
   1f746:	188b      	adds	r3, r1, r2
   1f748:	4298      	cmp	r0, r3
   1f74a:	d20a      	bcs.n	1f762 <memmove+0x22>
   1f74c:	1884      	adds	r4, r0, r2
   1f74e:	2a00      	cmp	r2, #0
   1f750:	d051      	beq.n	1f7f6 <memmove+0xb6>
   1f752:	4622      	mov	r2, r4
   1f754:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1f758:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1f75c:	4299      	cmp	r1, r3
   1f75e:	d1f9      	bne.n	1f754 <memmove+0x14>
   1f760:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f762:	2a0f      	cmp	r2, #15
   1f764:	d948      	bls.n	1f7f8 <memmove+0xb8>
   1f766:	ea41 0300 	orr.w	r3, r1, r0
   1f76a:	079b      	lsls	r3, r3, #30
   1f76c:	d146      	bne.n	1f7fc <memmove+0xbc>
   1f76e:	f100 0410 	add.w	r4, r0, #16
   1f772:	f101 0310 	add.w	r3, r1, #16
   1f776:	4615      	mov	r5, r2
   1f778:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1f77c:	f844 6c10 	str.w	r6, [r4, #-16]
   1f780:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1f784:	f844 6c0c 	str.w	r6, [r4, #-12]
   1f788:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1f78c:	f844 6c08 	str.w	r6, [r4, #-8]
   1f790:	3d10      	subs	r5, #16
   1f792:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1f796:	f844 6c04 	str.w	r6, [r4, #-4]
   1f79a:	2d0f      	cmp	r5, #15
   1f79c:	f103 0310 	add.w	r3, r3, #16
   1f7a0:	f104 0410 	add.w	r4, r4, #16
   1f7a4:	d8e8      	bhi.n	1f778 <memmove+0x38>
   1f7a6:	f1a2 0310 	sub.w	r3, r2, #16
   1f7aa:	f023 030f 	bic.w	r3, r3, #15
   1f7ae:	f002 0e0f 	and.w	lr, r2, #15
   1f7b2:	3310      	adds	r3, #16
   1f7b4:	f1be 0f03 	cmp.w	lr, #3
   1f7b8:	4419      	add	r1, r3
   1f7ba:	4403      	add	r3, r0
   1f7bc:	d921      	bls.n	1f802 <memmove+0xc2>
   1f7be:	1f1e      	subs	r6, r3, #4
   1f7c0:	460d      	mov	r5, r1
   1f7c2:	4674      	mov	r4, lr
   1f7c4:	3c04      	subs	r4, #4
   1f7c6:	f855 7b04 	ldr.w	r7, [r5], #4
   1f7ca:	f846 7f04 	str.w	r7, [r6, #4]!
   1f7ce:	2c03      	cmp	r4, #3
   1f7d0:	d8f8      	bhi.n	1f7c4 <memmove+0x84>
   1f7d2:	f1ae 0404 	sub.w	r4, lr, #4
   1f7d6:	f024 0403 	bic.w	r4, r4, #3
   1f7da:	3404      	adds	r4, #4
   1f7dc:	4421      	add	r1, r4
   1f7de:	4423      	add	r3, r4
   1f7e0:	f002 0203 	and.w	r2, r2, #3
   1f7e4:	b162      	cbz	r2, 1f800 <memmove+0xc0>
   1f7e6:	3b01      	subs	r3, #1
   1f7e8:	440a      	add	r2, r1
   1f7ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f7ee:	f803 4f01 	strb.w	r4, [r3, #1]!
   1f7f2:	428a      	cmp	r2, r1
   1f7f4:	d1f9      	bne.n	1f7ea <memmove+0xaa>
   1f7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f7f8:	4603      	mov	r3, r0
   1f7fa:	e7f3      	b.n	1f7e4 <memmove+0xa4>
   1f7fc:	4603      	mov	r3, r0
   1f7fe:	e7f2      	b.n	1f7e6 <memmove+0xa6>
   1f800:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f802:	4672      	mov	r2, lr
   1f804:	e7ee      	b.n	1f7e4 <memmove+0xa4>
   1f806:	bf00      	nop

0001f808 <_realloc_r>:
   1f808:	2900      	cmp	r1, #0
   1f80a:	f000 8095 	beq.w	1f938 <_realloc_r+0x130>
   1f80e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f812:	460d      	mov	r5, r1
   1f814:	4616      	mov	r6, r2
   1f816:	b083      	sub	sp, #12
   1f818:	4680      	mov	r8, r0
   1f81a:	f106 070b 	add.w	r7, r6, #11
   1f81e:	f7fd ff1f 	bl	1d660 <__malloc_lock>
   1f822:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1f826:	2f16      	cmp	r7, #22
   1f828:	f02e 0403 	bic.w	r4, lr, #3
   1f82c:	f1a5 0908 	sub.w	r9, r5, #8
   1f830:	d83c      	bhi.n	1f8ac <_realloc_r+0xa4>
   1f832:	2210      	movs	r2, #16
   1f834:	4617      	mov	r7, r2
   1f836:	42be      	cmp	r6, r7
   1f838:	d83d      	bhi.n	1f8b6 <_realloc_r+0xae>
   1f83a:	4294      	cmp	r4, r2
   1f83c:	da43      	bge.n	1f8c6 <_realloc_r+0xbe>
   1f83e:	4bc4      	ldr	r3, [pc, #784]	; (1fb50 <_realloc_r+0x348>)
   1f840:	6899      	ldr	r1, [r3, #8]
   1f842:	eb09 0004 	add.w	r0, r9, r4
   1f846:	4288      	cmp	r0, r1
   1f848:	f000 80b4 	beq.w	1f9b4 <_realloc_r+0x1ac>
   1f84c:	6843      	ldr	r3, [r0, #4]
   1f84e:	f023 0101 	bic.w	r1, r3, #1
   1f852:	4401      	add	r1, r0
   1f854:	6849      	ldr	r1, [r1, #4]
   1f856:	07c9      	lsls	r1, r1, #31
   1f858:	d54c      	bpl.n	1f8f4 <_realloc_r+0xec>
   1f85a:	f01e 0f01 	tst.w	lr, #1
   1f85e:	f000 809b 	beq.w	1f998 <_realloc_r+0x190>
   1f862:	4631      	mov	r1, r6
   1f864:	4640      	mov	r0, r8
   1f866:	f7fd fbf9 	bl	1d05c <_malloc_r>
   1f86a:	4606      	mov	r6, r0
   1f86c:	2800      	cmp	r0, #0
   1f86e:	d03a      	beq.n	1f8e6 <_realloc_r+0xde>
   1f870:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1f874:	f023 0301 	bic.w	r3, r3, #1
   1f878:	444b      	add	r3, r9
   1f87a:	f1a0 0208 	sub.w	r2, r0, #8
   1f87e:	429a      	cmp	r2, r3
   1f880:	f000 8121 	beq.w	1fac6 <_realloc_r+0x2be>
   1f884:	1f22      	subs	r2, r4, #4
   1f886:	2a24      	cmp	r2, #36	; 0x24
   1f888:	f200 8107 	bhi.w	1fa9a <_realloc_r+0x292>
   1f88c:	2a13      	cmp	r2, #19
   1f88e:	f200 80db 	bhi.w	1fa48 <_realloc_r+0x240>
   1f892:	4603      	mov	r3, r0
   1f894:	462a      	mov	r2, r5
   1f896:	6811      	ldr	r1, [r2, #0]
   1f898:	6019      	str	r1, [r3, #0]
   1f89a:	6851      	ldr	r1, [r2, #4]
   1f89c:	6059      	str	r1, [r3, #4]
   1f89e:	6892      	ldr	r2, [r2, #8]
   1f8a0:	609a      	str	r2, [r3, #8]
   1f8a2:	4629      	mov	r1, r5
   1f8a4:	4640      	mov	r0, r8
   1f8a6:	f7ff fdf3 	bl	1f490 <_free_r>
   1f8aa:	e01c      	b.n	1f8e6 <_realloc_r+0xde>
   1f8ac:	f027 0707 	bic.w	r7, r7, #7
   1f8b0:	2f00      	cmp	r7, #0
   1f8b2:	463a      	mov	r2, r7
   1f8b4:	dabf      	bge.n	1f836 <_realloc_r+0x2e>
   1f8b6:	2600      	movs	r6, #0
   1f8b8:	230c      	movs	r3, #12
   1f8ba:	4630      	mov	r0, r6
   1f8bc:	f8c8 3000 	str.w	r3, [r8]
   1f8c0:	b003      	add	sp, #12
   1f8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8c6:	462e      	mov	r6, r5
   1f8c8:	1be3      	subs	r3, r4, r7
   1f8ca:	2b0f      	cmp	r3, #15
   1f8cc:	d81e      	bhi.n	1f90c <_realloc_r+0x104>
   1f8ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f8d2:	f003 0301 	and.w	r3, r3, #1
   1f8d6:	4323      	orrs	r3, r4
   1f8d8:	444c      	add	r4, r9
   1f8da:	f8c9 3004 	str.w	r3, [r9, #4]
   1f8de:	6863      	ldr	r3, [r4, #4]
   1f8e0:	f043 0301 	orr.w	r3, r3, #1
   1f8e4:	6063      	str	r3, [r4, #4]
   1f8e6:	4640      	mov	r0, r8
   1f8e8:	f7fd fec0 	bl	1d66c <__malloc_unlock>
   1f8ec:	4630      	mov	r0, r6
   1f8ee:	b003      	add	sp, #12
   1f8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8f4:	f023 0303 	bic.w	r3, r3, #3
   1f8f8:	18e1      	adds	r1, r4, r3
   1f8fa:	4291      	cmp	r1, r2
   1f8fc:	db1f      	blt.n	1f93e <_realloc_r+0x136>
   1f8fe:	68c3      	ldr	r3, [r0, #12]
   1f900:	6882      	ldr	r2, [r0, #8]
   1f902:	462e      	mov	r6, r5
   1f904:	60d3      	str	r3, [r2, #12]
   1f906:	460c      	mov	r4, r1
   1f908:	609a      	str	r2, [r3, #8]
   1f90a:	e7dd      	b.n	1f8c8 <_realloc_r+0xc0>
   1f90c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1f910:	eb09 0107 	add.w	r1, r9, r7
   1f914:	f002 0201 	and.w	r2, r2, #1
   1f918:	444c      	add	r4, r9
   1f91a:	f043 0301 	orr.w	r3, r3, #1
   1f91e:	4317      	orrs	r7, r2
   1f920:	f8c9 7004 	str.w	r7, [r9, #4]
   1f924:	604b      	str	r3, [r1, #4]
   1f926:	6863      	ldr	r3, [r4, #4]
   1f928:	f043 0301 	orr.w	r3, r3, #1
   1f92c:	3108      	adds	r1, #8
   1f92e:	6063      	str	r3, [r4, #4]
   1f930:	4640      	mov	r0, r8
   1f932:	f7ff fdad 	bl	1f490 <_free_r>
   1f936:	e7d6      	b.n	1f8e6 <_realloc_r+0xde>
   1f938:	4611      	mov	r1, r2
   1f93a:	f7fd bb8f 	b.w	1d05c <_malloc_r>
   1f93e:	f01e 0f01 	tst.w	lr, #1
   1f942:	d18e      	bne.n	1f862 <_realloc_r+0x5a>
   1f944:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1f948:	eba9 0a01 	sub.w	sl, r9, r1
   1f94c:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f950:	f021 0103 	bic.w	r1, r1, #3
   1f954:	440b      	add	r3, r1
   1f956:	4423      	add	r3, r4
   1f958:	4293      	cmp	r3, r2
   1f95a:	db25      	blt.n	1f9a8 <_realloc_r+0x1a0>
   1f95c:	68c2      	ldr	r2, [r0, #12]
   1f95e:	6881      	ldr	r1, [r0, #8]
   1f960:	4656      	mov	r6, sl
   1f962:	60ca      	str	r2, [r1, #12]
   1f964:	6091      	str	r1, [r2, #8]
   1f966:	f8da 100c 	ldr.w	r1, [sl, #12]
   1f96a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1f96e:	1f22      	subs	r2, r4, #4
   1f970:	2a24      	cmp	r2, #36	; 0x24
   1f972:	60c1      	str	r1, [r0, #12]
   1f974:	6088      	str	r0, [r1, #8]
   1f976:	f200 8094 	bhi.w	1faa2 <_realloc_r+0x29a>
   1f97a:	2a13      	cmp	r2, #19
   1f97c:	d96f      	bls.n	1fa5e <_realloc_r+0x256>
   1f97e:	6829      	ldr	r1, [r5, #0]
   1f980:	f8ca 1008 	str.w	r1, [sl, #8]
   1f984:	6869      	ldr	r1, [r5, #4]
   1f986:	f8ca 100c 	str.w	r1, [sl, #12]
   1f98a:	2a1b      	cmp	r2, #27
   1f98c:	f200 80a2 	bhi.w	1fad4 <_realloc_r+0x2cc>
   1f990:	3508      	adds	r5, #8
   1f992:	f10a 0210 	add.w	r2, sl, #16
   1f996:	e063      	b.n	1fa60 <_realloc_r+0x258>
   1f998:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1f99c:	eba9 0a03 	sub.w	sl, r9, r3
   1f9a0:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f9a4:	f021 0103 	bic.w	r1, r1, #3
   1f9a8:	1863      	adds	r3, r4, r1
   1f9aa:	4293      	cmp	r3, r2
   1f9ac:	f6ff af59 	blt.w	1f862 <_realloc_r+0x5a>
   1f9b0:	4656      	mov	r6, sl
   1f9b2:	e7d8      	b.n	1f966 <_realloc_r+0x15e>
   1f9b4:	6841      	ldr	r1, [r0, #4]
   1f9b6:	f021 0b03 	bic.w	fp, r1, #3
   1f9ba:	44a3      	add	fp, r4
   1f9bc:	f107 0010 	add.w	r0, r7, #16
   1f9c0:	4583      	cmp	fp, r0
   1f9c2:	da56      	bge.n	1fa72 <_realloc_r+0x26a>
   1f9c4:	f01e 0f01 	tst.w	lr, #1
   1f9c8:	f47f af4b 	bne.w	1f862 <_realloc_r+0x5a>
   1f9cc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1f9d0:	eba9 0a01 	sub.w	sl, r9, r1
   1f9d4:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f9d8:	f021 0103 	bic.w	r1, r1, #3
   1f9dc:	448b      	add	fp, r1
   1f9de:	4558      	cmp	r0, fp
   1f9e0:	dce2      	bgt.n	1f9a8 <_realloc_r+0x1a0>
   1f9e2:	4656      	mov	r6, sl
   1f9e4:	f8da 100c 	ldr.w	r1, [sl, #12]
   1f9e8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1f9ec:	1f22      	subs	r2, r4, #4
   1f9ee:	2a24      	cmp	r2, #36	; 0x24
   1f9f0:	60c1      	str	r1, [r0, #12]
   1f9f2:	6088      	str	r0, [r1, #8]
   1f9f4:	f200 808f 	bhi.w	1fb16 <_realloc_r+0x30e>
   1f9f8:	2a13      	cmp	r2, #19
   1f9fa:	f240 808a 	bls.w	1fb12 <_realloc_r+0x30a>
   1f9fe:	6829      	ldr	r1, [r5, #0]
   1fa00:	f8ca 1008 	str.w	r1, [sl, #8]
   1fa04:	6869      	ldr	r1, [r5, #4]
   1fa06:	f8ca 100c 	str.w	r1, [sl, #12]
   1fa0a:	2a1b      	cmp	r2, #27
   1fa0c:	f200 808a 	bhi.w	1fb24 <_realloc_r+0x31c>
   1fa10:	3508      	adds	r5, #8
   1fa12:	f10a 0210 	add.w	r2, sl, #16
   1fa16:	6829      	ldr	r1, [r5, #0]
   1fa18:	6011      	str	r1, [r2, #0]
   1fa1a:	6869      	ldr	r1, [r5, #4]
   1fa1c:	6051      	str	r1, [r2, #4]
   1fa1e:	68a9      	ldr	r1, [r5, #8]
   1fa20:	6091      	str	r1, [r2, #8]
   1fa22:	eb0a 0107 	add.w	r1, sl, r7
   1fa26:	ebab 0207 	sub.w	r2, fp, r7
   1fa2a:	f042 0201 	orr.w	r2, r2, #1
   1fa2e:	6099      	str	r1, [r3, #8]
   1fa30:	604a      	str	r2, [r1, #4]
   1fa32:	f8da 3004 	ldr.w	r3, [sl, #4]
   1fa36:	f003 0301 	and.w	r3, r3, #1
   1fa3a:	431f      	orrs	r7, r3
   1fa3c:	4640      	mov	r0, r8
   1fa3e:	f8ca 7004 	str.w	r7, [sl, #4]
   1fa42:	f7fd fe13 	bl	1d66c <__malloc_unlock>
   1fa46:	e751      	b.n	1f8ec <_realloc_r+0xe4>
   1fa48:	682b      	ldr	r3, [r5, #0]
   1fa4a:	6003      	str	r3, [r0, #0]
   1fa4c:	686b      	ldr	r3, [r5, #4]
   1fa4e:	6043      	str	r3, [r0, #4]
   1fa50:	2a1b      	cmp	r2, #27
   1fa52:	d82d      	bhi.n	1fab0 <_realloc_r+0x2a8>
   1fa54:	f100 0308 	add.w	r3, r0, #8
   1fa58:	f105 0208 	add.w	r2, r5, #8
   1fa5c:	e71b      	b.n	1f896 <_realloc_r+0x8e>
   1fa5e:	4632      	mov	r2, r6
   1fa60:	6829      	ldr	r1, [r5, #0]
   1fa62:	6011      	str	r1, [r2, #0]
   1fa64:	6869      	ldr	r1, [r5, #4]
   1fa66:	6051      	str	r1, [r2, #4]
   1fa68:	68a9      	ldr	r1, [r5, #8]
   1fa6a:	6091      	str	r1, [r2, #8]
   1fa6c:	461c      	mov	r4, r3
   1fa6e:	46d1      	mov	r9, sl
   1fa70:	e72a      	b.n	1f8c8 <_realloc_r+0xc0>
   1fa72:	eb09 0107 	add.w	r1, r9, r7
   1fa76:	ebab 0b07 	sub.w	fp, fp, r7
   1fa7a:	f04b 0201 	orr.w	r2, fp, #1
   1fa7e:	6099      	str	r1, [r3, #8]
   1fa80:	604a      	str	r2, [r1, #4]
   1fa82:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1fa86:	f003 0301 	and.w	r3, r3, #1
   1fa8a:	431f      	orrs	r7, r3
   1fa8c:	4640      	mov	r0, r8
   1fa8e:	f845 7c04 	str.w	r7, [r5, #-4]
   1fa92:	f7fd fdeb 	bl	1d66c <__malloc_unlock>
   1fa96:	462e      	mov	r6, r5
   1fa98:	e728      	b.n	1f8ec <_realloc_r+0xe4>
   1fa9a:	4629      	mov	r1, r5
   1fa9c:	f7ff fe50 	bl	1f740 <memmove>
   1faa0:	e6ff      	b.n	1f8a2 <_realloc_r+0x9a>
   1faa2:	4629      	mov	r1, r5
   1faa4:	4630      	mov	r0, r6
   1faa6:	461c      	mov	r4, r3
   1faa8:	46d1      	mov	r9, sl
   1faaa:	f7ff fe49 	bl	1f740 <memmove>
   1faae:	e70b      	b.n	1f8c8 <_realloc_r+0xc0>
   1fab0:	68ab      	ldr	r3, [r5, #8]
   1fab2:	6083      	str	r3, [r0, #8]
   1fab4:	68eb      	ldr	r3, [r5, #12]
   1fab6:	60c3      	str	r3, [r0, #12]
   1fab8:	2a24      	cmp	r2, #36	; 0x24
   1faba:	d017      	beq.n	1faec <_realloc_r+0x2e4>
   1fabc:	f100 0310 	add.w	r3, r0, #16
   1fac0:	f105 0210 	add.w	r2, r5, #16
   1fac4:	e6e7      	b.n	1f896 <_realloc_r+0x8e>
   1fac6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1faca:	f023 0303 	bic.w	r3, r3, #3
   1face:	441c      	add	r4, r3
   1fad0:	462e      	mov	r6, r5
   1fad2:	e6f9      	b.n	1f8c8 <_realloc_r+0xc0>
   1fad4:	68a9      	ldr	r1, [r5, #8]
   1fad6:	f8ca 1010 	str.w	r1, [sl, #16]
   1fada:	68e9      	ldr	r1, [r5, #12]
   1fadc:	f8ca 1014 	str.w	r1, [sl, #20]
   1fae0:	2a24      	cmp	r2, #36	; 0x24
   1fae2:	d00c      	beq.n	1fafe <_realloc_r+0x2f6>
   1fae4:	3510      	adds	r5, #16
   1fae6:	f10a 0218 	add.w	r2, sl, #24
   1faea:	e7b9      	b.n	1fa60 <_realloc_r+0x258>
   1faec:	692b      	ldr	r3, [r5, #16]
   1faee:	6103      	str	r3, [r0, #16]
   1faf0:	696b      	ldr	r3, [r5, #20]
   1faf2:	6143      	str	r3, [r0, #20]
   1faf4:	f105 0218 	add.w	r2, r5, #24
   1faf8:	f100 0318 	add.w	r3, r0, #24
   1fafc:	e6cb      	b.n	1f896 <_realloc_r+0x8e>
   1fafe:	692a      	ldr	r2, [r5, #16]
   1fb00:	f8ca 2018 	str.w	r2, [sl, #24]
   1fb04:	696a      	ldr	r2, [r5, #20]
   1fb06:	f8ca 201c 	str.w	r2, [sl, #28]
   1fb0a:	3518      	adds	r5, #24
   1fb0c:	f10a 0220 	add.w	r2, sl, #32
   1fb10:	e7a6      	b.n	1fa60 <_realloc_r+0x258>
   1fb12:	4632      	mov	r2, r6
   1fb14:	e77f      	b.n	1fa16 <_realloc_r+0x20e>
   1fb16:	4629      	mov	r1, r5
   1fb18:	4630      	mov	r0, r6
   1fb1a:	9301      	str	r3, [sp, #4]
   1fb1c:	f7ff fe10 	bl	1f740 <memmove>
   1fb20:	9b01      	ldr	r3, [sp, #4]
   1fb22:	e77e      	b.n	1fa22 <_realloc_r+0x21a>
   1fb24:	68a9      	ldr	r1, [r5, #8]
   1fb26:	f8ca 1010 	str.w	r1, [sl, #16]
   1fb2a:	68e9      	ldr	r1, [r5, #12]
   1fb2c:	f8ca 1014 	str.w	r1, [sl, #20]
   1fb30:	2a24      	cmp	r2, #36	; 0x24
   1fb32:	d003      	beq.n	1fb3c <_realloc_r+0x334>
   1fb34:	3510      	adds	r5, #16
   1fb36:	f10a 0218 	add.w	r2, sl, #24
   1fb3a:	e76c      	b.n	1fa16 <_realloc_r+0x20e>
   1fb3c:	692a      	ldr	r2, [r5, #16]
   1fb3e:	f8ca 2018 	str.w	r2, [sl, #24]
   1fb42:	696a      	ldr	r2, [r5, #20]
   1fb44:	f8ca 201c 	str.w	r2, [sl, #28]
   1fb48:	3518      	adds	r5, #24
   1fb4a:	f10a 0220 	add.w	r2, sl, #32
   1fb4e:	e762      	b.n	1fa16 <_realloc_r+0x20e>
   1fb50:	200006c4 	.word	0x200006c4

0001fb54 <__sccl>:
   1fb54:	b470      	push	{r4, r5, r6}
   1fb56:	780c      	ldrb	r4, [r1, #0]
   1fb58:	2c5e      	cmp	r4, #94	; 0x5e
   1fb5a:	d02f      	beq.n	1fbbc <__sccl+0x68>
   1fb5c:	2200      	movs	r2, #0
   1fb5e:	1c4d      	adds	r5, r1, #1
   1fb60:	4616      	mov	r6, r2
   1fb62:	1e43      	subs	r3, r0, #1
   1fb64:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   1fb68:	f803 2f01 	strb.w	r2, [r3, #1]!
   1fb6c:	428b      	cmp	r3, r1
   1fb6e:	d1fb      	bne.n	1fb68 <__sccl+0x14>
   1fb70:	b174      	cbz	r4, 1fb90 <__sccl+0x3c>
   1fb72:	f086 0201 	eor.w	r2, r6, #1
   1fb76:	5502      	strb	r2, [r0, r4]
   1fb78:	1c6e      	adds	r6, r5, #1
   1fb7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1fb7e:	2b2d      	cmp	r3, #45	; 0x2d
   1fb80:	4631      	mov	r1, r6
   1fb82:	d00d      	beq.n	1fba0 <__sccl+0x4c>
   1fb84:	2b5d      	cmp	r3, #93	; 0x5d
   1fb86:	d004      	beq.n	1fb92 <__sccl+0x3e>
   1fb88:	b133      	cbz	r3, 1fb98 <__sccl+0x44>
   1fb8a:	461c      	mov	r4, r3
   1fb8c:	4635      	mov	r5, r6
   1fb8e:	e7f2      	b.n	1fb76 <__sccl+0x22>
   1fb90:	1e69      	subs	r1, r5, #1
   1fb92:	4608      	mov	r0, r1
   1fb94:	bc70      	pop	{r4, r5, r6}
   1fb96:	4770      	bx	lr
   1fb98:	4629      	mov	r1, r5
   1fb9a:	4608      	mov	r0, r1
   1fb9c:	bc70      	pop	{r4, r5, r6}
   1fb9e:	4770      	bx	lr
   1fba0:	7869      	ldrb	r1, [r5, #1]
   1fba2:	295d      	cmp	r1, #93	; 0x5d
   1fba4:	d0f1      	beq.n	1fb8a <__sccl+0x36>
   1fba6:	428c      	cmp	r4, r1
   1fba8:	dcef      	bgt.n	1fb8a <__sccl+0x36>
   1fbaa:	3502      	adds	r5, #2
   1fbac:	1903      	adds	r3, r0, r4
   1fbae:	3401      	adds	r4, #1
   1fbb0:	42a1      	cmp	r1, r4
   1fbb2:	f803 2f01 	strb.w	r2, [r3, #1]!
   1fbb6:	dcfa      	bgt.n	1fbae <__sccl+0x5a>
   1fbb8:	3602      	adds	r6, #2
   1fbba:	e7de      	b.n	1fb7a <__sccl+0x26>
   1fbbc:	2201      	movs	r2, #1
   1fbbe:	784c      	ldrb	r4, [r1, #1]
   1fbc0:	4616      	mov	r6, r2
   1fbc2:	1c8d      	adds	r5, r1, #2
   1fbc4:	e7cd      	b.n	1fb62 <__sccl+0xe>
   1fbc6:	bf00      	nop

0001fbc8 <_strtol_l.isra.0>:
   1fbc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbcc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1fbd0:	460f      	mov	r7, r1
   1fbd2:	4680      	mov	r8, r0
   1fbd4:	4616      	mov	r6, r2
   1fbd6:	461d      	mov	r5, r3
   1fbd8:	468a      	mov	sl, r1
   1fbda:	e000      	b.n	1fbde <_strtol_l.isra.0+0x16>
   1fbdc:	46a2      	mov	sl, r4
   1fbde:	4654      	mov	r4, sl
   1fbe0:	4648      	mov	r0, r9
   1fbe2:	f814 bb01 	ldrb.w	fp, [r4], #1
   1fbe6:	f7ff fd55 	bl	1f694 <__locale_ctype_ptr_l>
   1fbea:	4458      	add	r0, fp
   1fbec:	7842      	ldrb	r2, [r0, #1]
   1fbee:	f012 0208 	ands.w	r2, r2, #8
   1fbf2:	d1f3      	bne.n	1fbdc <_strtol_l.isra.0+0x14>
   1fbf4:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   1fbf8:	d04f      	beq.n	1fc9a <_strtol_l.isra.0+0xd2>
   1fbfa:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   1fbfe:	bf04      	itt	eq
   1fc00:	f894 b000 	ldrbeq.w	fp, [r4]
   1fc04:	f10a 0402 	addeq.w	r4, sl, #2
   1fc08:	b11d      	cbz	r5, 1fc12 <_strtol_l.isra.0+0x4a>
   1fc0a:	2d10      	cmp	r5, #16
   1fc0c:	d056      	beq.n	1fcbc <_strtol_l.isra.0+0xf4>
   1fc0e:	46ac      	mov	ip, r5
   1fc10:	e004      	b.n	1fc1c <_strtol_l.isra.0+0x54>
   1fc12:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1fc16:	d060      	beq.n	1fcda <_strtol_l.isra.0+0x112>
   1fc18:	250a      	movs	r5, #10
   1fc1a:	46ac      	mov	ip, r5
   1fc1c:	2a00      	cmp	r2, #0
   1fc1e:	bf0c      	ite	eq
   1fc20:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   1fc24:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   1fc28:	2100      	movs	r1, #0
   1fc2a:	fbb9 fefc 	udiv	lr, r9, ip
   1fc2e:	4608      	mov	r0, r1
   1fc30:	fb0c 9a1e 	mls	sl, ip, lr, r9
   1fc34:	e005      	b.n	1fc42 <_strtol_l.isra.0+0x7a>
   1fc36:	d029      	beq.n	1fc8c <_strtol_l.isra.0+0xc4>
   1fc38:	fb0c 3000 	mla	r0, ip, r0, r3
   1fc3c:	2101      	movs	r1, #1
   1fc3e:	f814 bb01 	ldrb.w	fp, [r4], #1
   1fc42:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   1fc46:	2b09      	cmp	r3, #9
   1fc48:	d905      	bls.n	1fc56 <_strtol_l.isra.0+0x8e>
   1fc4a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   1fc4e:	2b19      	cmp	r3, #25
   1fc50:	d80b      	bhi.n	1fc6a <_strtol_l.isra.0+0xa2>
   1fc52:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   1fc56:	429d      	cmp	r5, r3
   1fc58:	dd0f      	ble.n	1fc7a <_strtol_l.isra.0+0xb2>
   1fc5a:	f1b1 3fff 	cmp.w	r1, #4294967295
   1fc5e:	d0ee      	beq.n	1fc3e <_strtol_l.isra.0+0x76>
   1fc60:	4586      	cmp	lr, r0
   1fc62:	d2e8      	bcs.n	1fc36 <_strtol_l.isra.0+0x6e>
   1fc64:	f04f 31ff 	mov.w	r1, #4294967295
   1fc68:	e7e9      	b.n	1fc3e <_strtol_l.isra.0+0x76>
   1fc6a:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   1fc6e:	2b19      	cmp	r3, #25
   1fc70:	d803      	bhi.n	1fc7a <_strtol_l.isra.0+0xb2>
   1fc72:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   1fc76:	429d      	cmp	r5, r3
   1fc78:	dcef      	bgt.n	1fc5a <_strtol_l.isra.0+0x92>
   1fc7a:	1c4b      	adds	r3, r1, #1
   1fc7c:	d013      	beq.n	1fca6 <_strtol_l.isra.0+0xde>
   1fc7e:	b102      	cbz	r2, 1fc82 <_strtol_l.isra.0+0xba>
   1fc80:	4240      	negs	r0, r0
   1fc82:	b146      	cbz	r6, 1fc96 <_strtol_l.isra.0+0xce>
   1fc84:	b9c1      	cbnz	r1, 1fcb8 <_strtol_l.isra.0+0xf0>
   1fc86:	6037      	str	r7, [r6, #0]
   1fc88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc8c:	459a      	cmp	sl, r3
   1fc8e:	dad3      	bge.n	1fc38 <_strtol_l.isra.0+0x70>
   1fc90:	f04f 31ff 	mov.w	r1, #4294967295
   1fc94:	e7d3      	b.n	1fc3e <_strtol_l.isra.0+0x76>
   1fc96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc9a:	f894 b000 	ldrb.w	fp, [r4]
   1fc9e:	2201      	movs	r2, #1
   1fca0:	f10a 0402 	add.w	r4, sl, #2
   1fca4:	e7b0      	b.n	1fc08 <_strtol_l.isra.0+0x40>
   1fca6:	2322      	movs	r3, #34	; 0x22
   1fca8:	f8c8 3000 	str.w	r3, [r8]
   1fcac:	b1ee      	cbz	r6, 1fcea <_strtol_l.isra.0+0x122>
   1fcae:	1e67      	subs	r7, r4, #1
   1fcb0:	4648      	mov	r0, r9
   1fcb2:	6037      	str	r7, [r6, #0]
   1fcb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fcb8:	4681      	mov	r9, r0
   1fcba:	e7f8      	b.n	1fcae <_strtol_l.isra.0+0xe6>
   1fcbc:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1fcc0:	d1a5      	bne.n	1fc0e <_strtol_l.isra.0+0x46>
   1fcc2:	7823      	ldrb	r3, [r4, #0]
   1fcc4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1fcc8:	2b58      	cmp	r3, #88	; 0x58
   1fcca:	d1a0      	bne.n	1fc0e <_strtol_l.isra.0+0x46>
   1fccc:	f04f 0c10 	mov.w	ip, #16
   1fcd0:	f894 b001 	ldrb.w	fp, [r4, #1]
   1fcd4:	4665      	mov	r5, ip
   1fcd6:	3402      	adds	r4, #2
   1fcd8:	e7a0      	b.n	1fc1c <_strtol_l.isra.0+0x54>
   1fcda:	7823      	ldrb	r3, [r4, #0]
   1fcdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1fce0:	2b58      	cmp	r3, #88	; 0x58
   1fce2:	d0f3      	beq.n	1fccc <_strtol_l.isra.0+0x104>
   1fce4:	2508      	movs	r5, #8
   1fce6:	46ac      	mov	ip, r5
   1fce8:	e798      	b.n	1fc1c <_strtol_l.isra.0+0x54>
   1fcea:	4648      	mov	r0, r9
   1fcec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001fcf0 <_strtol_r>:
   1fcf0:	b530      	push	{r4, r5, lr}
   1fcf2:	4c06      	ldr	r4, [pc, #24]	; (1fd0c <_strtol_r+0x1c>)
   1fcf4:	4d06      	ldr	r5, [pc, #24]	; (1fd10 <_strtol_r+0x20>)
   1fcf6:	6824      	ldr	r4, [r4, #0]
   1fcf8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1fcfa:	b083      	sub	sp, #12
   1fcfc:	2c00      	cmp	r4, #0
   1fcfe:	bf08      	it	eq
   1fd00:	462c      	moveq	r4, r5
   1fd02:	9400      	str	r4, [sp, #0]
   1fd04:	f7ff ff60 	bl	1fbc8 <_strtol_l.isra.0>
   1fd08:	b003      	add	sp, #12
   1fd0a:	bd30      	pop	{r4, r5, pc}
   1fd0c:	20000248 	.word	0x20000248
   1fd10:	20000ad8 	.word	0x20000ad8

0001fd14 <_strtoll_l.isra.0>:
   1fd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd18:	b085      	sub	sp, #20
   1fd1a:	461e      	mov	r6, r3
   1fd1c:	9102      	str	r1, [sp, #8]
   1fd1e:	9003      	str	r0, [sp, #12]
   1fd20:	9200      	str	r2, [sp, #0]
   1fd22:	4688      	mov	r8, r1
   1fd24:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1fd26:	e000      	b.n	1fd2a <_strtoll_l.isra.0+0x16>
   1fd28:	46a8      	mov	r8, r5
   1fd2a:	4645      	mov	r5, r8
   1fd2c:	4638      	mov	r0, r7
   1fd2e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1fd32:	f7ff fcaf 	bl	1f694 <__locale_ctype_ptr_l>
   1fd36:	4420      	add	r0, r4
   1fd38:	7843      	ldrb	r3, [r0, #1]
   1fd3a:	f013 0308 	ands.w	r3, r3, #8
   1fd3e:	d1f3      	bne.n	1fd28 <_strtoll_l.isra.0+0x14>
   1fd40:	2c2d      	cmp	r4, #45	; 0x2d
   1fd42:	f000 8081 	beq.w	1fe48 <_strtoll_l.isra.0+0x134>
   1fd46:	2c2b      	cmp	r4, #43	; 0x2b
   1fd48:	bf03      	ittte	eq
   1fd4a:	782c      	ldrbeq	r4, [r5, #0]
   1fd4c:	9301      	streq	r3, [sp, #4]
   1fd4e:	f108 0502 	addeq.w	r5, r8, #2
   1fd52:	9301      	strne	r3, [sp, #4]
   1fd54:	b166      	cbz	r6, 1fd70 <_strtoll_l.isra.0+0x5c>
   1fd56:	2e10      	cmp	r6, #16
   1fd58:	f000 8088 	beq.w	1fe6c <_strtoll_l.isra.0+0x158>
   1fd5c:	9b01      	ldr	r3, [sp, #4]
   1fd5e:	46b0      	mov	r8, r6
   1fd60:	ea4f 79e6 	mov.w	r9, r6, asr #31
   1fd64:	b97b      	cbnz	r3, 1fd86 <_strtoll_l.isra.0+0x72>
   1fd66:	f04f 3aff 	mov.w	sl, #4294967295
   1fd6a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   1fd6e:	e00e      	b.n	1fd8e <_strtoll_l.isra.0+0x7a>
   1fd70:	2c30      	cmp	r4, #48	; 0x30
   1fd72:	f000 808a 	beq.w	1fe8a <_strtoll_l.isra.0+0x176>
   1fd76:	f04f 080a 	mov.w	r8, #10
   1fd7a:	f04f 0900 	mov.w	r9, #0
   1fd7e:	260a      	movs	r6, #10
   1fd80:	9b01      	ldr	r3, [sp, #4]
   1fd82:	2b00      	cmp	r3, #0
   1fd84:	d0ef      	beq.n	1fd66 <_strtoll_l.isra.0+0x52>
   1fd86:	f04f 0a00 	mov.w	sl, #0
   1fd8a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
   1fd8e:	4642      	mov	r2, r8
   1fd90:	464b      	mov	r3, r9
   1fd92:	4650      	mov	r0, sl
   1fd94:	4639      	mov	r1, r7
   1fd96:	f7fc f879 	bl	1be8c <__aeabi_uldivmod>
   1fd9a:	464b      	mov	r3, r9
   1fd9c:	4693      	mov	fp, r2
   1fd9e:	4650      	mov	r0, sl
   1fda0:	4642      	mov	r2, r8
   1fda2:	4639      	mov	r1, r7
   1fda4:	f7fc f872 	bl	1be8c <__aeabi_uldivmod>
   1fda8:	f04f 0e00 	mov.w	lr, #0
   1fdac:	2200      	movs	r2, #0
   1fdae:	2300      	movs	r3, #0
   1fdb0:	e00f      	b.n	1fdd2 <_strtoll_l.isra.0+0xbe>
   1fdb2:	d044      	beq.n	1fe3e <_strtoll_l.isra.0+0x12a>
   1fdb4:	fb02 f409 	mul.w	r4, r2, r9
   1fdb8:	fb08 4403 	mla	r4, r8, r3, r4
   1fdbc:	fba2 2308 	umull	r2, r3, r2, r8
   1fdc0:	4423      	add	r3, r4
   1fdc2:	eb12 020c 	adds.w	r2, r2, ip
   1fdc6:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
   1fdca:	f04f 0e01 	mov.w	lr, #1
   1fdce:	f815 4b01 	ldrb.w	r4, [r5], #1
   1fdd2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   1fdd6:	f1bc 0f09 	cmp.w	ip, #9
   1fdda:	d906      	bls.n	1fdea <_strtoll_l.isra.0+0xd6>
   1fddc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   1fde0:	f1bc 0f19 	cmp.w	ip, #25
   1fde4:	d80d      	bhi.n	1fe02 <_strtoll_l.isra.0+0xee>
   1fde6:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
   1fdea:	4566      	cmp	r6, ip
   1fdec:	dd12      	ble.n	1fe14 <_strtoll_l.isra.0+0x100>
   1fdee:	f1be 3fff 	cmp.w	lr, #4294967295
   1fdf2:	d0ec      	beq.n	1fdce <_strtoll_l.isra.0+0xba>
   1fdf4:	4299      	cmp	r1, r3
   1fdf6:	bf08      	it	eq
   1fdf8:	4290      	cmpeq	r0, r2
   1fdfa:	d2da      	bcs.n	1fdb2 <_strtoll_l.isra.0+0x9e>
   1fdfc:	f04f 3eff 	mov.w	lr, #4294967295
   1fe00:	e7e5      	b.n	1fdce <_strtoll_l.isra.0+0xba>
   1fe02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   1fe06:	f1bc 0f19 	cmp.w	ip, #25
   1fe0a:	d803      	bhi.n	1fe14 <_strtoll_l.isra.0+0x100>
   1fe0c:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
   1fe10:	4566      	cmp	r6, ip
   1fe12:	dcec      	bgt.n	1fdee <_strtoll_l.isra.0+0xda>
   1fe14:	f1be 3fff 	cmp.w	lr, #4294967295
   1fe18:	d01c      	beq.n	1fe54 <_strtoll_l.isra.0+0x140>
   1fe1a:	9901      	ldr	r1, [sp, #4]
   1fe1c:	b111      	cbz	r1, 1fe24 <_strtoll_l.isra.0+0x110>
   1fe1e:	4252      	negs	r2, r2
   1fe20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1fe24:	9900      	ldr	r1, [sp, #0]
   1fe26:	b129      	cbz	r1, 1fe34 <_strtoll_l.isra.0+0x120>
   1fe28:	f1be 0f00 	cmp.w	lr, #0
   1fe2c:	d11b      	bne.n	1fe66 <_strtoll_l.isra.0+0x152>
   1fe2e:	9d02      	ldr	r5, [sp, #8]
   1fe30:	9900      	ldr	r1, [sp, #0]
   1fe32:	600d      	str	r5, [r1, #0]
   1fe34:	4610      	mov	r0, r2
   1fe36:	4619      	mov	r1, r3
   1fe38:	b005      	add	sp, #20
   1fe3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe3e:	45e3      	cmp	fp, ip
   1fe40:	dab8      	bge.n	1fdb4 <_strtoll_l.isra.0+0xa0>
   1fe42:	f04f 3eff 	mov.w	lr, #4294967295
   1fe46:	e7c2      	b.n	1fdce <_strtoll_l.isra.0+0xba>
   1fe48:	2301      	movs	r3, #1
   1fe4a:	782c      	ldrb	r4, [r5, #0]
   1fe4c:	9301      	str	r3, [sp, #4]
   1fe4e:	f108 0502 	add.w	r5, r8, #2
   1fe52:	e77f      	b.n	1fd54 <_strtoll_l.isra.0+0x40>
   1fe54:	9a03      	ldr	r2, [sp, #12]
   1fe56:	2322      	movs	r3, #34	; 0x22
   1fe58:	6013      	str	r3, [r2, #0]
   1fe5a:	9b00      	ldr	r3, [sp, #0]
   1fe5c:	b32b      	cbz	r3, 1feaa <_strtoll_l.isra.0+0x196>
   1fe5e:	4652      	mov	r2, sl
   1fe60:	463b      	mov	r3, r7
   1fe62:	3d01      	subs	r5, #1
   1fe64:	e7e4      	b.n	1fe30 <_strtoll_l.isra.0+0x11c>
   1fe66:	4692      	mov	sl, r2
   1fe68:	461f      	mov	r7, r3
   1fe6a:	e7f8      	b.n	1fe5e <_strtoll_l.isra.0+0x14a>
   1fe6c:	2c30      	cmp	r4, #48	; 0x30
   1fe6e:	d117      	bne.n	1fea0 <_strtoll_l.isra.0+0x18c>
   1fe70:	782b      	ldrb	r3, [r5, #0]
   1fe72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1fe76:	2b58      	cmp	r3, #88	; 0x58
   1fe78:	d112      	bne.n	1fea0 <_strtoll_l.isra.0+0x18c>
   1fe7a:	786c      	ldrb	r4, [r5, #1]
   1fe7c:	f04f 0810 	mov.w	r8, #16
   1fe80:	f04f 0900 	mov.w	r9, #0
   1fe84:	3502      	adds	r5, #2
   1fe86:	2610      	movs	r6, #16
   1fe88:	e77a      	b.n	1fd80 <_strtoll_l.isra.0+0x6c>
   1fe8a:	782b      	ldrb	r3, [r5, #0]
   1fe8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1fe90:	2b58      	cmp	r3, #88	; 0x58
   1fe92:	d0f2      	beq.n	1fe7a <_strtoll_l.isra.0+0x166>
   1fe94:	f04f 0808 	mov.w	r8, #8
   1fe98:	f04f 0900 	mov.w	r9, #0
   1fe9c:	2608      	movs	r6, #8
   1fe9e:	e76f      	b.n	1fd80 <_strtoll_l.isra.0+0x6c>
   1fea0:	f04f 0810 	mov.w	r8, #16
   1fea4:	f04f 0900 	mov.w	r9, #0
   1fea8:	e76a      	b.n	1fd80 <_strtoll_l.isra.0+0x6c>
   1feaa:	4652      	mov	r2, sl
   1feac:	463b      	mov	r3, r7
   1feae:	e7c1      	b.n	1fe34 <_strtoll_l.isra.0+0x120>

0001feb0 <_strtoll_r>:
   1feb0:	b530      	push	{r4, r5, lr}
   1feb2:	4c06      	ldr	r4, [pc, #24]	; (1fecc <_strtoll_r+0x1c>)
   1feb4:	4d06      	ldr	r5, [pc, #24]	; (1fed0 <_strtoll_r+0x20>)
   1feb6:	6824      	ldr	r4, [r4, #0]
   1feb8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1feba:	b083      	sub	sp, #12
   1febc:	2c00      	cmp	r4, #0
   1febe:	bf08      	it	eq
   1fec0:	462c      	moveq	r4, r5
   1fec2:	9400      	str	r4, [sp, #0]
   1fec4:	f7ff ff26 	bl	1fd14 <_strtoll_l.isra.0>
   1fec8:	b003      	add	sp, #12
   1feca:	bd30      	pop	{r4, r5, pc}
   1fecc:	20000248 	.word	0x20000248
   1fed0:	20000ad8 	.word	0x20000ad8

0001fed4 <_strtoull_l.isra.0>:
   1fed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fed8:	b085      	sub	sp, #20
   1feda:	4693      	mov	fp, r2
   1fedc:	9102      	str	r1, [sp, #8]
   1fede:	9003      	str	r0, [sp, #12]
   1fee0:	469a      	mov	sl, r3
   1fee2:	460f      	mov	r7, r1
   1fee4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1fee6:	e000      	b.n	1feea <_strtoull_l.isra.0+0x16>
   1fee8:	462f      	mov	r7, r5
   1feea:	463d      	mov	r5, r7
   1feec:	4630      	mov	r0, r6
   1feee:	f815 4b01 	ldrb.w	r4, [r5], #1
   1fef2:	f7ff fbcf 	bl	1f694 <__locale_ctype_ptr_l>
   1fef6:	4420      	add	r0, r4
   1fef8:	7843      	ldrb	r3, [r0, #1]
   1fefa:	f013 0308 	ands.w	r3, r3, #8
   1fefe:	d1f3      	bne.n	1fee8 <_strtoull_l.isra.0+0x14>
   1ff00:	2c2d      	cmp	r4, #45	; 0x2d
   1ff02:	f000 8089 	beq.w	20018 <_strtoull_l.isra.0+0x144>
   1ff06:	2c2b      	cmp	r4, #43	; 0x2b
   1ff08:	bf03      	ittte	eq
   1ff0a:	782c      	ldrbeq	r4, [r5, #0]
   1ff0c:	9301      	streq	r3, [sp, #4]
   1ff0e:	1cbd      	addeq	r5, r7, #2
   1ff10:	9301      	strne	r3, [sp, #4]
   1ff12:	f1ba 0f00 	cmp.w	sl, #0
   1ff16:	d019      	beq.n	1ff4c <_strtoull_l.isra.0+0x78>
   1ff18:	f1ba 0f10 	cmp.w	sl, #16
   1ff1c:	f000 8081 	beq.w	20022 <_strtoull_l.isra.0+0x14e>
   1ff20:	46d0      	mov	r8, sl
   1ff22:	ea4f 79ea 	mov.w	r9, sl, asr #31
   1ff26:	4642      	mov	r2, r8
   1ff28:	464b      	mov	r3, r9
   1ff2a:	f04f 30ff 	mov.w	r0, #4294967295
   1ff2e:	f04f 31ff 	mov.w	r1, #4294967295
   1ff32:	f7fb ffab 	bl	1be8c <__aeabi_uldivmod>
   1ff36:	4642      	mov	r2, r8
   1ff38:	4606      	mov	r6, r0
   1ff3a:	460f      	mov	r7, r1
   1ff3c:	464b      	mov	r3, r9
   1ff3e:	f04f 30ff 	mov.w	r0, #4294967295
   1ff42:	f04f 31ff 	mov.w	r1, #4294967295
   1ff46:	f7fb ffa1 	bl	1be8c <__aeabi_uldivmod>
   1ff4a:	e00b      	b.n	1ff64 <_strtoull_l.isra.0+0x90>
   1ff4c:	2c30      	cmp	r4, #48	; 0x30
   1ff4e:	d07d      	beq.n	2004c <_strtoull_l.isra.0+0x178>
   1ff50:	4f4e      	ldr	r7, [pc, #312]	; (2008c <_strtoull_l.isra.0+0x1b8>)
   1ff52:	2205      	movs	r2, #5
   1ff54:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   1ff58:	f04f 080a 	mov.w	r8, #10
   1ff5c:	f04f 0900 	mov.w	r9, #0
   1ff60:	f04f 0a0a 	mov.w	sl, #10
   1ff64:	f04f 0e00 	mov.w	lr, #0
   1ff68:	2000      	movs	r0, #0
   1ff6a:	2100      	movs	r1, #0
   1ff6c:	e011      	b.n	1ff92 <_strtoull_l.isra.0+0xbe>
   1ff6e:	42b9      	cmp	r1, r7
   1ff70:	bf08      	it	eq
   1ff72:	42b0      	cmpeq	r0, r6
   1ff74:	d03f      	beq.n	1fff6 <_strtoull_l.isra.0+0x122>
   1ff76:	fb00 f409 	mul.w	r4, r0, r9
   1ff7a:	fb08 4401 	mla	r4, r8, r1, r4
   1ff7e:	fba0 0108 	umull	r0, r1, r0, r8
   1ff82:	4421      	add	r1, r4
   1ff84:	18c0      	adds	r0, r0, r3
   1ff86:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   1ff8a:	f04f 0e01 	mov.w	lr, #1
   1ff8e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ff92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1ff96:	2b09      	cmp	r3, #9
   1ff98:	d905      	bls.n	1ffa6 <_strtoull_l.isra.0+0xd2>
   1ff9a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   1ff9e:	2b19      	cmp	r3, #25
   1ffa0:	d80d      	bhi.n	1ffbe <_strtoull_l.isra.0+0xea>
   1ffa2:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1ffa6:	459a      	cmp	sl, r3
   1ffa8:	dd11      	ble.n	1ffce <_strtoull_l.isra.0+0xfa>
   1ffaa:	f1be 0f00 	cmp.w	lr, #0
   1ffae:	db03      	blt.n	1ffb8 <_strtoull_l.isra.0+0xe4>
   1ffb0:	428f      	cmp	r7, r1
   1ffb2:	bf08      	it	eq
   1ffb4:	4286      	cmpeq	r6, r0
   1ffb6:	d2da      	bcs.n	1ff6e <_strtoull_l.isra.0+0x9a>
   1ffb8:	f04f 3eff 	mov.w	lr, #4294967295
   1ffbc:	e7e7      	b.n	1ff8e <_strtoull_l.isra.0+0xba>
   1ffbe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1ffc2:	2b19      	cmp	r3, #25
   1ffc4:	d803      	bhi.n	1ffce <_strtoull_l.isra.0+0xfa>
   1ffc6:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   1ffca:	459a      	cmp	sl, r3
   1ffcc:	dced      	bgt.n	1ffaa <_strtoull_l.isra.0+0xd6>
   1ffce:	f1be 0f00 	cmp.w	lr, #0
   1ffd2:	db15      	blt.n	20000 <_strtoull_l.isra.0+0x12c>
   1ffd4:	9b01      	ldr	r3, [sp, #4]
   1ffd6:	b113      	cbz	r3, 1ffde <_strtoull_l.isra.0+0x10a>
   1ffd8:	4240      	negs	r0, r0
   1ffda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ffde:	f1bb 0f00 	cmp.w	fp, #0
   1ffe2:	d005      	beq.n	1fff0 <_strtoull_l.isra.0+0x11c>
   1ffe4:	f1be 0f00 	cmp.w	lr, #0
   1ffe8:	d114      	bne.n	20014 <_strtoull_l.isra.0+0x140>
   1ffea:	9d02      	ldr	r5, [sp, #8]
   1ffec:	f8cb 5000 	str.w	r5, [fp]
   1fff0:	b005      	add	sp, #20
   1fff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fff6:	4293      	cmp	r3, r2
   1fff8:	ddbd      	ble.n	1ff76 <_strtoull_l.isra.0+0xa2>
   1fffa:	f04f 3eff 	mov.w	lr, #4294967295
   1fffe:	e7c6      	b.n	1ff8e <_strtoull_l.isra.0+0xba>
   20000:	9a03      	ldr	r2, [sp, #12]
   20002:	2322      	movs	r3, #34	; 0x22
   20004:	6013      	str	r3, [r2, #0]
   20006:	f04f 30ff 	mov.w	r0, #4294967295
   2000a:	f04f 31ff 	mov.w	r1, #4294967295
   2000e:	f1bb 0f00 	cmp.w	fp, #0
   20012:	d0ed      	beq.n	1fff0 <_strtoull_l.isra.0+0x11c>
   20014:	3d01      	subs	r5, #1
   20016:	e7e9      	b.n	1ffec <_strtoull_l.isra.0+0x118>
   20018:	2301      	movs	r3, #1
   2001a:	782c      	ldrb	r4, [r5, #0]
   2001c:	9301      	str	r3, [sp, #4]
   2001e:	1cbd      	adds	r5, r7, #2
   20020:	e777      	b.n	1ff12 <_strtoull_l.isra.0+0x3e>
   20022:	2c30      	cmp	r4, #48	; 0x30
   20024:	d123      	bne.n	2006e <_strtoull_l.isra.0+0x19a>
   20026:	782b      	ldrb	r3, [r5, #0]
   20028:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2002c:	2b58      	cmp	r3, #88	; 0x58
   2002e:	d128      	bne.n	20082 <_strtoull_l.isra.0+0x1ae>
   20030:	786c      	ldrb	r4, [r5, #1]
   20032:	220f      	movs	r2, #15
   20034:	3502      	adds	r5, #2
   20036:	f04f 36ff 	mov.w	r6, #4294967295
   2003a:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   2003e:	f04f 0810 	mov.w	r8, #16
   20042:	f04f 0900 	mov.w	r9, #0
   20046:	f04f 0a10 	mov.w	sl, #16
   2004a:	e78b      	b.n	1ff64 <_strtoull_l.isra.0+0x90>
   2004c:	782b      	ldrb	r3, [r5, #0]
   2004e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20052:	2b58      	cmp	r3, #88	; 0x58
   20054:	d0ec      	beq.n	20030 <_strtoull_l.isra.0+0x15c>
   20056:	2207      	movs	r2, #7
   20058:	f04f 36ff 	mov.w	r6, #4294967295
   2005c:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   20060:	f04f 0808 	mov.w	r8, #8
   20064:	f04f 0900 	mov.w	r9, #0
   20068:	f04f 0a08 	mov.w	sl, #8
   2006c:	e77a      	b.n	1ff64 <_strtoull_l.isra.0+0x90>
   2006e:	220f      	movs	r2, #15
   20070:	f04f 36ff 	mov.w	r6, #4294967295
   20074:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   20078:	f04f 0810 	mov.w	r8, #16
   2007c:	f04f 0900 	mov.w	r9, #0
   20080:	e770      	b.n	1ff64 <_strtoull_l.isra.0+0x90>
   20082:	f04f 0810 	mov.w	r8, #16
   20086:	f04f 0900 	mov.w	r9, #0
   2008a:	e74c      	b.n	1ff26 <_strtoull_l.isra.0+0x52>
   2008c:	19999999 	.word	0x19999999

00020090 <_strtoull_r>:
   20090:	b530      	push	{r4, r5, lr}
   20092:	4c06      	ldr	r4, [pc, #24]	; (200ac <_strtoull_r+0x1c>)
   20094:	4d06      	ldr	r5, [pc, #24]	; (200b0 <_strtoull_r+0x20>)
   20096:	6824      	ldr	r4, [r4, #0]
   20098:	6b64      	ldr	r4, [r4, #52]	; 0x34
   2009a:	b083      	sub	sp, #12
   2009c:	2c00      	cmp	r4, #0
   2009e:	bf08      	it	eq
   200a0:	462c      	moveq	r4, r5
   200a2:	9400      	str	r4, [sp, #0]
   200a4:	f7ff ff16 	bl	1fed4 <_strtoull_l.isra.0>
   200a8:	b003      	add	sp, #12
   200aa:	bd30      	pop	{r4, r5, pc}
   200ac:	20000248 	.word	0x20000248
   200b0:	20000ad8 	.word	0x20000ad8

000200b4 <__ascii_wctomb>:
   200b4:	b121      	cbz	r1, 200c0 <__ascii_wctomb+0xc>
   200b6:	2aff      	cmp	r2, #255	; 0xff
   200b8:	d804      	bhi.n	200c4 <__ascii_wctomb+0x10>
   200ba:	700a      	strb	r2, [r1, #0]
   200bc:	2001      	movs	r0, #1
   200be:	4770      	bx	lr
   200c0:	4608      	mov	r0, r1
   200c2:	4770      	bx	lr
   200c4:	238a      	movs	r3, #138	; 0x8a
   200c6:	6003      	str	r3, [r0, #0]
   200c8:	f04f 30ff 	mov.w	r0, #4294967295
   200cc:	4770      	bx	lr
   200ce:	bf00      	nop
   200d0:	2e2f2e2e 	.word	0x2e2f2e2e
   200d4:	2e2e2f2e 	.word	0x2e2e2f2e
   200d8:	554c412f 	.word	0x554c412f
   200dc:	6972445f 	.word	0x6972445f
   200e0:	2f726576 	.word	0x2f726576
   200e4:	5f554c41 	.word	0x5f554c41
   200e8:	76697244 	.word	0x76697244
   200ec:	682f7265 	.word	0x682f7265
   200f0:	692f6c61 	.word	0x692f6c61
   200f4:	756c636e 	.word	0x756c636e
   200f8:	682f6564 	.word	0x682f6564
   200fc:	775f6c61 	.word	0x775f6c61
   20100:	682e7464 	.word	0x682e7464
   20104:	00000000 	.word	0x00000000
   20108:	656c6553 	.word	0x656c6553
   2010c:	64657463 	.word	0x64657463
   20110:	6e696c20 	.word	0x6e696c20
   20114:	00003a65 	.word	0x00003a65
   20118:	00000a0d 	.word	0x00000a0d
   2011c:	2a2a2a2a 	.word	0x2a2a2a2a
   20120:	66694c20 	.word	0x66694c20
   20124:	75502065 	.word	0x75502065
   20128:	2065736c 	.word	0x2065736c
   2012c:	69746341 	.word	0x69746341
   20130:	65746176 	.word	0x65746176
   20134:	2a2a2a64 	.word	0x2a2a2a64
   20138:	0000002a 	.word	0x0000002a

0002013c <_ZTV10AMMC_Class>:
   2013c:	000002d8 000002c8 00000000 00000000     ................
   2014c:	00000e15 00000eb5 000139d1 00000000     .........9......
   2015c:	00000000 fffffd38 00000000 00013185     ....8........1..
   2016c:	00013055 fffffd28 fffffd28 fffffff0     U0..(...(.......
   2017c:	fffffd28 00000000 00000e89 00000ee1     (...............
   2018c:	00013a39                                9:..

00020190 <_ZTT10AMMC_Class>:
   20190:	0002014c 000201cc 00020220 00020238     L....... ...8...
   201a0:	00020254 000201e8 00020204 00020168     T...........h...
   201b0:	00020184 0002026c 00020288              ....l.......

000201bc <_ZTC10AMMC_Class0_15ARINC_Interface>:
   201bc:	000002d8 000002c8 00000000 00000000     ................
	...
   201d4:	000139d1 00000000 00000000 fffffd38     .9..........8...
   201e4:	00000000 00013185 00013055 fffffd28     .....1..U0..(...
   201f4:	fffffd28 fffffff0 fffffd28 00000000     (.......(.......
	...
   2020c:	00013a39                                9:..

00020210 <_ZTC10AMMC_Class0_18ARINC_Buffer_Class>:
   20210:	000002d8 000002c8 00000000 00000000     ................
	...
   20230:	fffffd38 00000000 00013185 00013055     8........1..U0..
   20240:	00000000 fffffd28 fffffff0 fffffd28     ....(.......(...
	...
   2025c:	0001491b                                .I..

00020260 <_ZTC10AMMC_Class728_14Protocol_Class>:
   20260:	fffffff0 00000000 00000000 00000000     ................
   20270:	00000000 0001491b 00000000 00000000     .....I..........
   20280:	00000010 00000000 00013185 00013055     .........1..U0..

00020290 <factoryDefaultsConfiguration>:
   20290:	000000ac 00000004 0000070c 00000000     ................
   202a0:	00000000 00000001 000003e8 000003e8     ................
   202b0:	000003e8 00000000 00000000 00000000     ................
   202c0:	3e051eb8 c4128000 42aa0000 42700000     ...>.......B..pB
   202d0:	3e051eb8 c4128000 42960000 42480000     ...>.......B..HB
   202e0:	3de147ae 3e0f5c29 3e2e147b c3f68000     .G.=)\.>{..>....
   202f0:	c424c000 c444c000 43200000 42f00000     ..$...D... C...B
   20300:	425c0000 444f8000 428c0000 43200000     ..\B..OD...B.. C
   20310:	bc9ba5e3 41780000 3fbae148 42a00000     ......xAH..?...B
   20320:	41200000 41200000 00000014 00000078     .. A.. A....x...
   20330:	be23d70a 41d00000 00000078              ..#....Ax...

0002033c <factoryDefaultsCycles>:
   2033c:	000001c0 00000005 0000000c 00000024     ............$...
   2034c:	756e614d 00006c61 00000000 00000000     Manual..........
   2035c:	00000000 00000001 00000258 0000000f     ........X.......
   2036c:	000004b0 63697551 7453206b 00747261     ....Quick Start.
	...
   20384:	00000001 00000258 0000001e 0000012c     ....X.......,...
   20394:	2030332b 73636573 00000000 00000000     +30 secs........
   203a4:	00000000 00000001 000000f0 0000001e     ................
   203b4:	0000001e 73657250 31207465 00000000     ....Preset 1....
	...
   203dc:	73657250 32207465 00000000 00000000     Preset 2........
	...
   20400:	73657250 33207465 00000000 00000000     Preset 3........
	...
   20424:	73657250 34207465 00000000 00000000     Preset 4........
	...
   20448:	73657250 35207465 00000000 00000000     Preset 5........
	...
   2046c:	73657250 36207465 00000000 00000000     Preset 6........
	...
   20490:	73657250 37207465 00000000 00000000     Preset 7........
	...
   204b4:	73657250 38207465 00000000 00000000     Preset 8........
	...
   204d8:	73657250 39207465 00000000 00000000     Preset 9........
	...
   204fc:	65736552 00000074 74696e49 696c6169     Reset...Initiali
   2050c:	0000657a 75736552 0000656d 6e617453     ze..Resume..Stan
   2051c:	4f796264 00004646 70657250 53657261     dbyOFF..PrepareS
   2052c:	646e6174 4e4f7962 00000000 6e617453     tandbyON....Stan
   2053c:	4f796264 0000004e 6e617453 52796264     dbyON...StandbyR
   2054c:	79646165 00000000 616c6544 00646579     eady....Delayed.
   2055c:	65746e49 70757272 00646574 00004e4f     Interrupted.ON..
   2056c:	706f7453 50646570 65636f72 00007373     StoppedProcess..
   2057c:	61656c43 0070756e 696e6946 64656873     Cleanup.Finished
   2058c:	00000000 7065654b 00746f48 666c6553     ....KeepHot.Self
   2059c:	746f7250 00746365 6f727245 00000072     Protect.Error...
   205ac:	6e69614d 616e6574 0065636e 55494d48     Maintenance.HMIU
   205bc:	74616470 00000065 6d726946 65726177     pdate...Firmware
   205cc:	61647055 00006574 72727543 20746e65     Update..Current 
   205dc:	74617453 00000065 6c637943 75442065     State...Cycle Du
   205ec:	69746172 00006e6f 616d6552 6e696e69     ration..Remainin
   205fc:	69542067 0000656d 67726154 50207465     g Time..Target P
   2060c:	7265776f 00000000 00776f4e 6967614d     ower....Now.Magi
   2061c:	00000063                                c...

00020620 <defaultHVACState>:
   20620:	61626364 00000000 00000000 00000000     dcba............
	...
   20688:	00203a20 00007830 00000a0d               : .0x......

00020694 <_ZTV17ConfigState_Class>:
	...
   2069c:	0001491b                                .I..

000206a0 <_ZTV14DateTime_Class>:
	...
   206a8:	0001749d 0001758d 6e69614d 616e6574     .t...u..Maintena
   206b8:	2065636e 6c6f6f54 636f4c20 0064656b     nce Tool Locked.
   206c8:	00000a0d 6f6d6552 6f206574 61726570     ....Remote opera
   206d8:	6e6f6974 73694420 656c6261 00000064     tion Disabled...
   206e8:	49505351 6f725020 6d617267 61745320     QSPI Program Sta
   206f8:	64657472 00000d0a 73616c46 61642068     rted....Flash da
   20708:	76206174 66697265 74616369 206e6f69     ta verification 
   20718:	6c696166 0a2e6465 0000000d 74696220     failed...... bit
   20728:	00003a20 00000a0d 74697257 202d2065      :......Write - 
   20738:	64616552 20736920 63637573 66737365     Read is successf
   20748:	69206c75 5351206e 46204950 6873616c     ul in QSPI Flash
   20758:	6d656d20 2079726f 00000000 202a2a2a      memory ....*** 
   20768:	72617453 20705574 6f676c41 68746972     StartUp Algorith
   20778:	206e656d 74736554 2a2a2a20 00000000     men Test ***....
   20788:	202a2a2a 65746144 0020203a 2074634f     *** Date:  .Oct 
   20798:	32203832 00303230 6d695420 00203a65     28 2020. Time: .
   207a8:	323a3431 35313a31 00000000 202a2a2a     14:21:15....*** 
   207b8:	20554c41 74696e69 65746169 2a2a2064     ALU initiated **
   207c8:	0000002a 69746341 6c206576 3a656e69     *...Active line:
   207d8:	00000020 73616c46 654d2068 79726f6d      ...Flash Memory
   207e8:	6c655320 73655466 41502074 44455353      SelfTest PASSED
   207f8:	00000000 00000a0d 73616c46 654d2068     ........Flash Me
   20808:	79726f6d 6c655320 73655466 41462074     mory SelfTest FA
   20818:	44454c49 00000000 52504545 4d204d4f     ILED....EEPROM M
   20828:	726f6d65 65532079 6554666c 50207473     emory SelfTest P
   20838:	45535341 00000044 52504545 4d204d4f     ASSED...EEPROM M
   20848:	726f6d65 65532079 6554666c 46207473     emory SelfTest F
   20858:	454c4941 00000044 20726941 646e6f43     AILED...Air Cond
   20868:	6f697469 676e696e 73795320 206d6574     itioning System 
   20878:	7265704f 6e697461 00000067 00000a0d     Operating.......
   20888:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   20898:	73795320 206d6574 72617453 00646574      System Started.
   208a8:	646e6168 4147656c 76454e49 20746e65     handleGAINEvent 
   208b8:	65636572 64657669 7773203a 68637469     received: switch
   208c8:	20676e69 6d6f7266 00000020 206f7420     ing from ... to 
   208d8:	00000000 646e6168 7453656c 49657461     ....handleStateI
   208e8:	6974696e 7a696c61 66203a65 7367616c     nitialize: flags
   208f8:	203d3d20 00007830 646e6168 7453656c      == 0x..handleSt
   20908:	49657461 6974696e 7a696c61 00000065     ateInitialize...
   20918:	646e6168 7453656c 53657461 646e6174     handleStateStand
   20928:	464f7962 00000046 20726941 646e6f43     byOFF...Air Cond
   20938:	6f697469 676e696e 73795320 206d6574     itioning System 
   20948:	706f7453 00646570                       Stopped.

00020950 <_ZTV12States_Class>:
   20950:	000004b8 00000218 00000000 00000000     ................
   20960:	0000429d fffffde8 fffffde8 00000000     .B..............
   20970:	000042c9 fffffd60 fffffb48 00000000     .B..`...H.......

00020980 <_ZTT12States_Class>:
   20980:	00020960 00020970 00020980 000209a0     `...p...........
   20990:	000209ac                                ....

00020994 <_ZTC12States_Class1208_19HVAC_Commando_Class>:
   20994:	fffffd60 00000000 00000000 00000000     `...............
   209a4:	000002a0 00000000 0001491b 2e2f2e2e     .........I..../.
   209b4:	7361542f 6e61486b 72656c64 616c435f     /TaskHandler_Cla
   209c4:	632e7373 00007070 682f2e2e 702f6c70     ss.cpp..../hpl/p
   209d4:	2f74726f 5f6c7068 6f697067 7361625f     ort/hpl_gpio_bas
   209e4:	00682e65 682f2e2e 692f6c61 756c636e     e.h.../hal/inclu
   209f4:	682f6564 775f6c61 682e7464 00000000     de/hal_wdt.h....
   20a04:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   20a14:	6e656c61 2e726164 00000063 682f2e2e     alendar.c...../h
   20a24:	732f6c61 682f6372 635f6c61 615f6e61     al/src/hal_can_a
   20a34:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
   20a44:	682f6372 635f6c61 735f6372 2e636e79     rc/hal_crc_sync.
   20a54:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
   20a64:	695f6c61 6d5f6332 7973615f 632e636e     al_i2c_m_async.c
   20a74:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   20a84:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
   20a94:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
   20aa4:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
   20ab4:	682f6372 715f6c61 5f697073 636e7973     rc/hal_qspi_sync
   20ac4:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
   20ad4:	735f6c61 6d5f6970 6e79735f 00632e63     al_spi_m_sync.c.
   20ae4:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
   20af4:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
   20b04:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
   20b14:	2e747369 00000063                       ist.c...

00020b1c <_map>:
   20b1c:	00000000 00000040 00000003 00000003     ....@...........
   20b2c:	00000004 00000004 00000005 00000005     ................
   20b3c:	00000006 00000056 00000007 00000057     ....V.......W...
   20b4c:	00000008 00000028 00000009 00000029     ....(.......)...
   20b5c:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
   20b6c:	632e6369 00000000                       ic.c....

00020b74 <user_mux_confs>:
   20b74:	00020100 00000000 00000000 00000000     ................
	...

00020bb8 <channel_confs>:
   20bb8:	0660065f 00000000 00000000 00000000     _.`.............
	...

00020bf8 <interrupt_cfg>:
	...
   20c78:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   20c88:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   20c98:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   20ca8:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   20cb8:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   20cc8:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   20cd8:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   20ce8:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   20cf8:	43000c00                                ...C

00020cfc <sercomspi_regs>:
   20cfc:	0020000c 00020000 00000000 01ff0001     .. .............
   20d0c:	30000c04 02000000 00000000 ff00ef00     ...0............
   20d1c:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   20d2c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   20d3c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   20d4c:	43001400 43001800                       ...C...C

00020d54 <_usb_ep_cfgs>:
   20d54:	20008a10 00000000 00000040 20008a50     ... ....@...P.. 
   20d64:	20008a90 00400040 20008ad0 20008b10     ... @.@.... ... 
   20d74:	00400040 20008b50 20008b90 00400040     @.@.P.. ... @.@.
   20d84:	20008bd0 20008c10 00400040 00000804     ... ... @.@.....
   20d94:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   20da4:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   20db4:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   20dc4:	7361625f 00682e65                       _base.h.

00020dcc <n25q256a_interface>:
   20dcc:	00011161 00011205 00011315 000114cd     a...............
   20ddc:	0001155d 752f2e2e 642f6273 63697665     ]...../usb/devic
   20dec:	73752f65 2e636462 00000063              e/usbdc.c...

00020df8 <_ZTV17ARINC_Conversions>:
	...
   20e00:	00013185 00013055                       .1..U0..

00020e08 <_ZL5Mesg1>:
   20e08:	4e495241 614c2043 3a6c6562 00000020     ARINC Label: ...

00020e18 <_ZL5Mesg2>:
   20e18:	61746144 0000203a                       Data: ..

00020e20 <_ZL10HexToAscii>:
   20e20:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00020e30 <_ZL11HistoryMesg>:
   20e30:	74736948 2079726f 4f464946 0000203a     History FIFO: ..
   20e40:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
   20e50:	206f7420 74696e49 7a696c69 000d0a65      to Initilize...
   20e60:	2d0a0d0a 68202d2d 41203273 434e4952     ...--- hs2 ARINC
   20e70:	746e4920 61667265 20206563 2d2d2d2d      Interface  ----
   20e80:	00000d0a 2d2d0a72 6f67212d 656d2074     ....r.---!got me
   20e90:	67617373 2d2d2165 00002d2d 61727420     ssage!----.. tra
   20ea0:	696d736e 6e697474 2e2e2e67 00000000     nsmitting.......
   20eb0:	61725420 696d736e 64657474 00000021      Transmitted!...
   20ec0:	0000003e 72540d0a 6d736e61 26207469     >.....Transmit &
   20ed0:	63655220 65766965 74695720 614c2068      Receive With La
   20ee0:	736c6562 646f4d20 000d0a65 45530d0a     bels Mode.....SE
   20ef0:	542d464c 2c545345 746e4920 616e7265     LF-TEST, Interna
   20f00:	6944206c 61746967 6f4c206c 622d706f     l Digital Loop-b
   20f10:	2c6b6361 206f4e20 61746164 20736920     ack, No data is 
   20f20:	6e617274 74696d73 20646574 65747865     transmitted exte
   20f30:	6c616e72 0d0a796c 00000000 6f200d0a     rnally........ o
   20f40:	6154206e 20656c62 6562616c 6120736c     n Table labels a
   20f50:	45206572 6c62616e 00006465 500a0d0a     re Enabled.....P
   20f60:	73736572 2d575320 6f742031 61747320     ress SW-1 to sta
   20f70:	69207472 6974696e 796c6c61 000a0d0a     rt initially....
   20f80:	202d2d2d 74747542 43206e6f 616d6d6f     --- Button Comma
   20f90:	2073646e 0a2d2d2d 0000000d 70532020     nds ---.....  Sp
   20fa0:	20656361 20726142 44206f74 6c707369     ace Bar to Displ
   20fb0:	53207961 75746174 6e612073 6f432064     ay Status and Co
   20fc0:	6f72746e 6552206c 74736967 0a737265     ntrol Registers.
   20fd0:	0000000d 20702020 50206f74 65737561     ....  p to Pause
   20fe0:	00000d0a 206d2020 44206f74 6c707369     ....  m to Displ
   20ff0:	4c207961 6c656261 6d654d20 0079726f     ay Label Memory.
   21000:	003e0d0a 72540d0a 6d736e61 69747469     ..>...Transmitti
   21010:	0d0a676e 0000003e 49480d0a 3935332d     ng..>.....HI-359
   21020:	74532033 73757461 6f43202c 6f72746e     3 Status, Contro
   21030:	6552206c 74736967 0d737265 0000000a     l Registers.....
   21040:	20090d0a 2a2a2a20 50202a2a 73736572     ...  ***** Press
   21050:	70732020 62656361 74207261 6f63206f       spacebar to co
   21060:	6e69746e 2a206575 2a2a2a2a 0000002a     ntinue ******...
   21070:	540d0a0a 736e6172 2074696d 73756150     ...Transmit Paus
   21080:	0d0a6465 00000000 72500d0a 20737365     ed........Press 
   21090:	44454c4f 5455425f 2d4e4f54 6f742032     OLED_BUTTON-2 to
   210a0:	61727420 696d736e 6e6f2074 72662065      transmit one fr
   210b0:	20656d61 20646e61 73756170 000d0a65     ame and pause...
   210c0:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
   210d0:	2d4e4f54 6f742033 73655220 0a656d75     TON-3 to Resume.
   210e0:	0000000d 72540d0a 6d736e61 65747469     ......Transmitte
   210f0:	65522072 656d7573 2e2e2e64 00000d0a     r Resumed.......
   21100:	65520d0a 76696563 31207265 62614c20     ..Receiver 1 Lab
   21110:	0a736c65 0000000d 65520d0a 76696563     els.......Receiv
   21120:	32207265 62614c20 0a736c65 0000000d     er 2 Labels.....
   21130:	72540d0a 6d736e61 26207469 63655220     ..Transmit & Rec
   21140:	65766965 68634520 6f4d206f 0d0a6564     eive Echo Mode..
   21150:	00000000 6c530d0a 5320776f 64656570     ......Slow Speed
   21160:	00000000 61460d0a 53207473 64656570     ......Fast Speed
   21170:	00000000 72540d0a 6d736e61 65747469     ......Transmitte
   21180:	61502072 79746972 616e4520 64656c62     r Parity Enabled
   21190:	00000000 49480d0a 3935332d 61662033     ......HI-3593 fa
   211a0:	64656c69 206f7420 74696e69 7a696c69     iled to initiliz
   211b0:	000d0a65 61540d0a 20656c62 6562616c     e.....Table labe
   211c0:	6120736c 45206572 6c62616e 00006465     ls are Enabled..
   211d0:	2d0a0d0a 43202d2d 6f736e6f 4320656c     ...--- Console C
   211e0:	616d6d6f 2073646e 706c6548 2d2d2d20     ommands Help ---
   211f0:	00000000 20502020 6150203d 79746972     ....  P = Parity
   21200:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   21210:	20542020 4654203d 2050494c 676f5420       T = TFLIP  Tog
   21220:	20656c67 6f2f6e6f 00006666 20522020     gle on/off..  R 
   21230:	4652203d 2050494c 676f5420 20656c67     = RFLIP  Toggle 
   21240:	6f2f6e6f 00006666 20532020 4453203d     on/off..  S = SD
   21250:	202c4e4f 2c394453 31445320 6f542030     ON, SD9, SD10 To
   21260:	656c6767 2f6e6f20 0066666f 20482020     ggle on/off.  H 
   21270:	6854203d 48207369 20706c65 65676150     = This Help Page
   21280:	00000000 70532020 20656361 20726142     ....  Space Bar 
   21290:	6944203d 616c7073 74532079 73757461     = Display Status
   212a0:	646e6120 6e6f4320 6c6f7274 67657220      and Control reg
   212b0:	00000073 20492020 6e49203d 6d657263     s...  I = Increm
   212c0:	20746e65 7373654d 20656761 20646e61     ent Message and 
   212d0:	6e617254 74696d73 7845202e 726f6c70     Transmit. Explor
   212e0:	4d207265 2065646f 4f202d20 21594c4e     er Mode  - ONLY!
   212f0:	00000000 204d2020 6e45203d 20726574     ....  M = Enter 
   21300:	74737543 4d206d6f 61737365 202e6567     Custom Message. 
   21310:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   21320:	4c4e4f20 00002159 4e452020 3d524554      ONLY!..  ENTER=
   21330:	61725420 696d736e 656e2074 6d207478      Transmit next m
   21340:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   21350:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   21360:	00207830 30307826 00002030 50205854     0x .&x000 ..TX P
   21370:	74697261 52412079 5f434e49 0d0a4e4f     arity ARINC_ON..
   21380:	0000003e 50205854 74697261 52412079     >...TX Parity AR
   21390:	5f434e49 0a46464f 00003e0d 494c4654     INC_OFF..>..TFLI
   213a0:	65532050 3e0d0a74 00000000 494c4654     P Set..>....TFLI
   213b0:	6c432050 65726165 3e0d0a64 00000000     P Cleared..>....
   213c0:	2d434552 46522031 2050494c 0a746553     REC-1 RFLIP Set.
   213d0:	00003e0d 2d434552 46522031 2050494c     .>..REC-1 RFLIP 
   213e0:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   213f0:	46522032 2050494c 0a746553 00003e0d     2 RFLIP Set..>..
   21400:	2d434552 46522032 2050494c 61656c43     REC-2 RFLIP Clea
   21410:	0a646572 00003e0d 2d434552 44532031     red..>..REC-1 SD
   21420:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   21430:	0a746553 00003e0d 2d434552 44532031     Set..>..REC-1 SD
   21440:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   21450:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   21460:	44532032 532c4e4f 61203944 5320646e     2 SDON,SD9 and S
   21470:	20303144 0a746553 00003e0d 2d434552     D10 Set..>..REC-
   21480:	44532032 532c4e4f 61203944 5320646e     2 SDON,SD9 and S
   21490:	20303144 61656c43 0a646572 00003e0d     D10 Cleared..>..
   214a0:	500a0d0a 73736572 61705320 42206563     ...Press Space B
   214b0:	6f207261 57532072 7420342d 6572206f     ar or SW-4 to re
   214c0:	656d7573 00000000 6562614c 2020736c     sume....Labels  
   214d0:	202d2030 203a3336 00000020 00000020     0 - 63:  ... ...
   214e0:	614c0d0a 736c6562 34362020 3732312d     ..Labels  64-127
   214f0:	0020203a 614c0d0a 736c6562 38323120     :  ...Labels 128
   21500:	3139312d 0020203a 614c0d0a 736c6562     -191:  ...Labels
   21510:	32393120 3535322d 0020203a 614c0d0a      192-255:  ...La
   21520:	736c6562 20302020 3336202d 0020203a     bels  0 - 63:  .
   21530:	543e0d0a 20202058 74614420 00003a61     ..>TX    Data:..
   21540:	6562614c 00003a6c 2d636552 61442031     Label:..Rec-1 Da
   21550:	003a6174 2d314c50 61442031 003a6174     ta:.PL1-1 Data:.
   21560:	6374614d 00003a68 2d314c50 61442032     Match:..PL1-2 Da
   21570:	003a6174 2d314c50 61442033 003a6174     ta:.PL1-3 Data:.
   21580:	2d636552 61442032 003a6174 2d324c50     Rec-2 Data:.PL2-
   21590:	61442031 003a6174 2d324c50 61442032     1 Data:.PL2-2 Da
   215a0:	003a6174 2d324c50 61442033 003a6174     ta:.PL2-3 Data:.
   215b0:	00000d0a 78450d0a 726f6c70 4d207265     ......Explorer M
   215c0:	0a65646f 0000000d 6c200d0a 6c656261     ode....... label
   215d0:	61542073 20656c62 45207369 6c62616e     s Table is Enabl
   215e0:	00006465 2d0a0d0a 42202d2d 6f747475     ed.....--- Butto
   215f0:	6f43206e 6e616d6d 2d207364 00002d2d     n Commands ---..
   21600:	20200d0a 63617073 72616265 206f7420     ..  spacebar to 
   21610:	70736944 2079616c 74617453 61207375     Display Status a
   21620:	4320646e 72746e6f 52206c6f 73696765     nd Control Regis
   21630:	73726574 00000000 20200d0a 44454c4f     ters......  OLED
   21640:	5455422d 324e4f54 61727420 696d736e     -BUTTON2 transmi
   21650:	6e6f2074 656d2065 67617373 72662065     t one message fr
   21660:	74206d6f 736e6172 2074696d 66667562     om transmit buff
   21670:	00007265 20200d0a 6f74204c 69725020     er....  L to Pri
   21680:	4c20746e 6c656261 6d654d20 0a79726f     nt Label Memory.
   21690:	0000000d 72500d0a 20737365 45544e45     ......Press ENTE
   216a0:	6f742052 61725420 696d736e 726f2074     R to Transmit or
   216b0:	65737520 65687420 294d2820 6d6f6320      use the (M) com
   216c0:	646e616d 206f7420 65746e65 20612072     mand to enter a 
   216d0:	74737563 6d206d6f 61737365 00006567     custom message..
   216e0:	73657250 57532073 726f2034 61707320     Press SW4 or spa
   216f0:	61626563 6f742072 6e6f6320 756e6974     cebar to continu
   21700:	00000065 73657250 70732073 62656361     e...Press spaceb
   21710:	74207261 6f63206f 6e69746e 00006575     ar to continue..
   21720:	433e0d0a 616d6d6f 4d20646e 00000000     ..>Command M....
   21730:	6e450d0a 20726574 79622033 20736574     ..Enter 3 bytes 
   21740:	414c202b 204c4542 54206f74 736e6172     + LABEL to Trans
   21750:	2074696d 6c6c6f66 6465776f 20796220     mit followed by 
   21760:	45544e45 000d0a52 6f540d0a 61725420     ENTER.....To Tra
   21770:	696d736e 65202c74 7265746e 62203320     nsmit, enter 3 b
   21780:	73657479 6c6f6620 65776f6c 79622064     ytes followed by
   21790:	4c206120 6c656261 74796220 6f662065      a Label byte fo
   217a0:	776f6c6c 62206465 4e452079 0a524554     llowed by ENTER.
   217b0:	0000000d 6d726f46 203a7461 73746942     ....Format: Bits
   217c0:	322d3233 42202c35 32737469 37312d34     32-25, Bits24-17
   217d0:	6942202c 36317374 202c392d 4542414c     , Bits16-9, LABE
   217e0:	3a0d0a4c 00000000 6d617845 3a656c70     L..:....Example:
   217f0:	20313020 34203332 37362035 544e4520      01 23 45 67 ENT
   21800:	0d0a5245 0000003a 65725020 52207373     ER..:... Press R
   21810:	52555445 0000004e 61725420 696d736e     ETURN... Transmi
   21820:	676e6974 002e2e2e 61725420 696d736e     ting.... Transmi
   21830:	21646574 00000000 6d6d6f43 20646e61     ted!....Command 
   21840:	49203a49 6572636e 746e656d 74616420     I: Increment dat
   21850:	3e0d0a61 00000000                       a..>....

00021858 <_ZTV15ARINC_Interface>:
   21858:	000002d4 000002c4 00000000 00000000     ................
   21868:	000135f1 000136a1 000139d1 00000000     .5...6...9......
   21878:	00000000 fffffd3c 00000000 00013185     ....<........1..
   21888:	00013055 fffffd2c fffffd2c fffffff0     U0..,...,.......
   21898:	fffffd2c 00000000 00013675 000136cd     ,.......u6...6..
   218a8:	00013a39                                9:..

000218ac <_ZTT15ARINC_Interface>:
   218ac:	00021868 000218dc 000218f4 00021910     h...............
   218bc:	00021884 000218a0 00021928 00021944     ........(...D...

000218cc <_ZTC15ARINC_Interface0_18ARINC_Buffer_Class>:
   218cc:	000002d4 000002c4 00000000 00000000     ................
	...
   218ec:	fffffd3c 00000000 00013185 00013055     <........1..U0..
   218fc:	00000000 fffffd2c fffffff0 fffffd2c     ....,.......,...
	...
   21918:	0001491b                                .I..

0002191c <_ZTC15ARINC_Interface724_14Protocol_Class>:
   2191c:	fffffff0 00000000 00000000 00000000     ................
   2192c:	00000000 0001491b 00000000 00000000     .....I..........
   2193c:	00000010 00000000 00013185 00013055     .........1..U0..

0002194c <_ZL12LabelArray_1>:
   2194c:	c1215d1d 9616efdd 3f5f9f0d bd00ffdf     .]!......._?....
	...
   2196c:	636e7546 6e6f6974 65786520 65747563     Function execute
   2197c:	75732064 73656363 6c756673 0000796c     d successfully..
   2198c:	63656843 6f79206b 77207275 6e697269     Check your wirin
   2199c:	46202e67 6873616c 69686320 73692070     g. Flash chip is
   219ac:	6e6f6e20 7365722d 736e6f70 2e657669      non-responsive.
   219bc:	00000000 6e6f632a 75727473 726f7463     ....*constructor
   219cc:	5f666f5f 696f6863 2e2a6563 69676562     _of_choice*.begi
   219dc:	2029286e 20736177 20746f6e 6c6c6163     n() was not call
   219ec:	69206465 6f76206e 73206469 70757465     ed in void setup
   219fc:	00002928 62616e55 7420656c 6469206f     ()..Unable to id
   21a0c:	69746e65 63207966 2e706968 65724120     entify chip. Are
   21a1c:	756f7920 72757320 68742065 63207369      you sure this c
   21a2c:	20706968 73207369 6f707075 64657472     hip is supported
   21a3c:	0000003f 62616e55 7420656c 6469206f     ?...Unable to id
   21a4c:	69746e65 63207966 63617061 2e797469     entify capacity.
   21a5c:	20734920 73696874 69686320 666f2070      Is this chip of
   21a6c:	69636966 796c6c61 70757320 74726f70     ficially support
   21a7c:	203f6465 6e206649 202c746f 61656c70     ed? If not, plea
   21a8c:	64206573 6e696665 20612065 50414360     se define a `CAP
   21a9c:	54494341 63206059 74736e6f 20746e61     ACITY` constant 
   21aac:	20646e61 6c636e69 20656475 69207469     and include it i
   21abc:	6c66206e 2e687361 69676562 4143286e     n flash.begin(CA
   21acc:	49434150 2e295954 00000000 70696843     PACITY).....Chip
   21adc:	20736920 79737562 0000002e 656b614d      is busy....Make
   21aec:	72757320 6c612065 6970206c 6820736e      sure all pins h
   21afc:	20657661 6e656562 6e6f6320 7463656e     ave been connect
   21b0c:	70206465 65706f72 00796c72 65676150     ed properly.Page
   21b1c:	65766f20 6f6c6672 61682077 65622073      overflow has be
   21b2c:	64206e65 62617369 2064656c 20646e61     en disabled and 
   21b3c:	20656874 72646461 20737365 6c6c6163     the address call
   21b4c:	65206465 65656378 74207364 6d206568     ed exceeds the m
   21b5c:	726f6d65 00000079 62616e55 7420656c     emory...Unable t
   21b6c:	6e45206f 656c6261 69725720 676e6974     o Enable Writing
   21b7c:	206f7420 70696863 0000002e 61656c50      to chip....Plea
   21b8c:	6d206573 20656b61 65727573 65687420     se make sure the
   21b9c:	4c4f4820 20262044 54495257 4f525045      HOLD & WRITEPRO
   21bac:	54434554 6e697020 72612073 75702065     TECT pins are pu
   21bbc:	64656c6c 20707520 56206f74 00004343     lled up to VCC..
   21bcc:	73696854 63657320 20726f74 65726c61     This sector alre
   21bdc:	20796461 746e6f63 736e6961 74616420     ady contains dat
   21bec:	00002e61 61656c50 6d206573 20656b61     a...Please make 
   21bfc:	65727573 65687420 63657320 73726f74     sure the sectors
   21c0c:	69656220 7720676e 74746972 74206e65      being written t
   21c1c:	7261206f 72652065 64657361 0000002e     o are erased....
   21c2c:	20756f59 20657261 6e6e7572 20676e69     You are running 
   21c3c:	20776f6c 53206e6f 2e4d4152 656c5020     low on SRAM. Ple
   21c4c:	20657361 6974706f 6573696d 756f7920     ase optimise you
   21c5c:	72702072 6172676f 6f66206d 65622072     r program for be
   21c6c:	72657474 4d415220 61737520 00006567     tter RAM usage..
   21c7c:	73696854 6e756620 6f697463 7369206e     This function is
   21c8c:	746f6e20 70757320 74726f70 62206465      not supported b
   21c9c:	68742079 6c662065 20687361 6f6d656d     y the flash memo
   21cac:	68207972 77647261 2e657261 00000000     ry hardware.....
   21cbc:	62616e55 7420656c 7573206f 6e657073     Unable to suspen
   21ccc:	65722f64 656d7573 65706f20 69746172     d/resume operati
   21cdc:	002e6e6f 74697257 75462065 6974636e     on..Write Functi
   21cec:	68206e6f 66207361 656c6961 72652064     on has failed er
   21cfc:	63726f72 6b636568 0000002e 62616e55     rorcheck....Unab
   21d0c:	7420656c 6e65206f 656c6261 622d3420     le to enable 4-b
   21d1c:	20657479 72646461 69737365 002e676e     yte addressing..
   21d2c:	62616e55 7420656c 6964206f 6c626173     Unable to disabl
   21d3c:	2d342065 65747962 64646120 73736572     e 4-byte address
   21d4c:	2e676e69 00000000 20656854 70696863     ing.....The chip
   21d5c:	20736920 72727563 6c746e65 6f702079      is currently po
   21d6c:	65726577 6f642064 002e6e77 20656854     wered down..The 
   21d7c:	73616c46 68632068 64207069 2073656f     Flash chip does 
   21d8c:	20746f6e 70707573 2074726f 50444653     not support SFDP
   21d9c:	0000002e 62616e55 7420656c 6572206f     ....Unable to re
   21dac:	45206461 65736172 72615020 74656d61     ad Erase Paramet
   21dbc:	20737265 6d6f7266 69686320 52202e70     ers from chip. R
   21dcc:	72657665 676e6974 206f7420 7262696c     everting to libr
   21ddc:	20797261 61666564 73746c75 0000002e     ary defaults....
   21dec:	62616e55 7420656c 6572206f 65206461     Unable to read e
   21dfc:	65736172 6d697420 66207365 206d6f72     rase times from 
   21e0c:	73616c66 656d2068 79726f6d 6552202e     flash memory. Re
   21e1c:	74726576 20676e69 6c206f74 61726269     verting to libra
   21e2c:	64207972 75616665 2e73746c 00000000     ry defaults.....
   21e3c:	62616e55 7420656c 6572206f 70206461     Unable to read p
   21e4c:	72676f72 74206d61 73656d69 6f726620     rogram times fro
   21e5c:	6c66206d 20687361 6f6d656d 202e7972     m flash memory. 
   21e6c:	65766552 6e697472 6f742067 62696c20     Reverting to lib
   21e7c:	79726172 66656420 746c7561 00002e73     rary defaults...
   21e8c:	43206f4e 20706968 656c6553 70207463     No Chip Select p
   21e9c:	64206e69 6e696665 69206465 6874206e     in defined in th
   21eac:	75632065 6d6f7473 49505320 72724120     e custom SPI Arr
   21ebc:	002e7961 6e6b6e55 206e776f 6f727265     ay..Unknown erro
   21ecc:	00000072 6f727245 6f632072 203a6564     r...Error code: 
   21edc:	00007830 00000030 74206649 20736968     0x..0...If this 
   21eec:	73656f64 746f6e20 6c656820 65722070     does not help re
   21efc:	766c6f73 6c632f65 66697261 68742079     solve/clarify th
   21f0c:	69207369 65757373 0000202c 61656c70     is issue, ..plea
   21f1c:	72206573 65736961 206e6120 75737369     se raise an issu
   21f2c:	74612065 74746820 2f2f3a70 2e777777     e at http://www.
   21f3c:	2d327368 69676e65 7265656e 2e676e69     hs2-engineering.
   21f4c:	692f6564 7865646e 7068702e 6e6f632f     de/index.php/con
   21f5c:	74636174 6d74682e 6977206c 74206874     tact.html with t
   21f6c:	64206568 69617465 6f20736c 68772066     he details of wh
   21f7c:	79207461 2072756f 65726577 696f6420     at your were doi
   21f8c:	7720676e 206e6568 73696874 72726520     ng when this err
   21f9c:	6f20726f 72756363 00646572              or occurred.

00021fa8 <maxEventCount>:
   21fa8:	00800008                                         ..

00021faa <sizeOfEventQueue>:
   21faa:	ffff0080                                         ..

00021fac <forever>:
   21fac:	7fffffff 2e2f2e2e 2e2e2f2e 554c412f     ....../../../ALU
   21fbc:	6972445f 2f726576 5f554c41 76697244     _Driver/ALU_Driv
   21fcc:	682f7265 702f6c70 2f74726f 5f6c7068     er/hpl/port/hpl_
   21fdc:	6f697067 7361625f 00682e65              gpio_base.h.

00021fe8 <defaultParameters>:
   21fe8:	00000040                                @...

00021fec <defaultPreferences>:
   21fec:	000000fa 00000032                       ....2...

00021ff4 <_ZTV14Calendar_Class>:
	...
   21ffc:	0001749d 0001758d                       .t...u..

00022004 <_ZTV17DateTimeLog_Class>:
	...
   2200c:	0001491b 0001491b                       .I...I..

00022014 <_ZTV9CDC_Class>:
	...
   2201c:	00018321 00018401 00017f75 000182e9     !.......u.......
   2202c:	00018499 000182ad 00018191 000181e1     ................
   2203c:	00018309 00018369                       ....i...

00022044 <_ZTV6Stream>:
	...
   2204c:	0001491b 00018569 00017f75 00017f89     .I..i...u.......
   2205c:	0001491b 0001491b 0001491b 2e257830     .I...I...I..0x%.
   2206c:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   2207c:	0066766f                                ovf.

00022080 <_ZTV5Print>:
	...
   22088:	0001491b 00018569 00017f75 00017f89     .I..i...u.......
   22098:	492f2e2e 492f4332 4f5f4332 63656a62     ../I2C/I2C_Objec
   220a8:	73694c74 70632e74 00000070 2a2a2a0a     tList.cpp....***
   220b8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   220c8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   220d8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   220e8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0a2a2a2a     ***************.
   220f8:	0000000d 43544c20 33383932 6d654420     .... LTC2983 Dem
   22108:	74736e6f 69746172 50206e6f 72676f72     onstration Progr
   22118:	20206d61 20202020 20202020 20202020     am              
   22128:	20202020 20202020 00000d0a 20202020             ....    
   22138:	20202020 20202020 20202020 20202020                     
   22148:	20202020 20202020 20202020 20202020                     
   22158:	20202020 20202020 20202020 20202020                     
   22168:	20202020 20202020 20202020 00000d0a                 ....
   22178:	69685420 72702073 6172676f 6564206d      This program de
   22188:	736e6f6d 74617274 68207365 7420776f     monstrates how t
   22198:	6572206f 74206461 6d206568 69746c75     o read the multi
   221a8:	6e65732d 20726f73 20202020 20202020     -sensor         
   221b8:	00000d0a 6d657420 61726570 65727574     .... temperature
   221c8:	61656d20 65727573 746e656d 73797320      measurement sys
   221d8:	2e6d6574 20202020 20202020 20202020     tem.            
   221e8:	20202020 20202020 20202020 20202020                     
   221f8:	20202020 00000d0a 74655320 65687420         .... Set the
   22208:	75616220 61722064 74206574 3131206f      baud rate to 11
   22218:	30303235 646e6120 6c657320 20746365     5200 and select 
   22228:	20656874 6c77656e 20656e69 6d726574     the newline term
   22238:	74616e69 202e726f 00000d0a 2a2a2a2a     inator. ....****
   22248:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   22258:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   22268:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   22278:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0d0a2a2a     **************..
   22288:	00000000 6168430a 6c656e6e 6e6f4320     .....Channel Con
   22298:	20676966 00000000 69676572 72657473     fig ....register
   222a8:	6c617620 203a6575 00000000 6168430a      value: .....Cha
   222b8:	6c656e6e 00000020 65542020 7265706d     nnel ...  Temper
   222c8:	72757461 203d2065 00000000 69442020     ature = ....  Di
   222d8:	74636572 43444120 61657220 676e6964     rect ADC reading
   222e8:	206e6920 203d2056 00000000 6f562020      in V = ....  Vo
   222f8:	6761746c 726f2065 73657220 61747369     ltage or resista
   22308:	2065636e 0000203d 41462020 20544c55     nce = ..  FAULT 
   22318:	41544144 00203d20 202d2020 534e4553     DATA = .  - SENS
   22328:	4820524f 20445241 554c4146 00004552     OR HARD FALURE..
   22338:	202d2020 5f434441 44524148 4941465f       - ADC_HARD_FAI
   22348:	4552554c 00000000 202d2020 485f4a43     LURE....  - CJ_H
   22358:	5f445241 4c494146 00455255 202d2020     ARD_FAILURE.  - 
   22368:	535f4a43 5f54464f 4c494146 00455255     CJ_SOFT_FAILURE.
   22378:	202d2020 534e4553 415f524f 45564f42       - SENSOR_ABOVE
   22388:	00000000 202d2020 534e4553 425f524f     ....  - SENSOR_B
   22398:	574f4c45 00000000 202d2020 5f434441     ELOW....  - ADC_
   223a8:	474e4152 52455f45 00524f52 41564e49     RANGE_ERROR.INVA
   223b8:	2044494c 44414552 20474e49 21212121     LID READING !!!!
   223c8:	00002121 464e4f43 52554749 4f495441     !!..CONFIGURATIO
   223d8:	5245204e 20524f52 21212121 00002121     N ERROR !!!!!!..
   223e8:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
   223f8:	00632e6f 00776f70                       o.c.pow.

00022400 <TWO52>:
   22400:	00000000 43300000 00000000 c3300000     ......0C......0.

00022410 <_global_impure_ptr>:
   22410:	20000250                                P.. 

00022414 <__month_lengths>:
   22414:	0000001f 0000001c 0000001f 0000001e     ................
   22424:	0000001f 0000001e 0000001f 0000001f     ................
   22434:	0000001e 0000001f 0000001e 0000001f     ................
   22444:	0000001f 0000001d 0000001f 0000001e     ................
   22454:	0000001f 0000001e 0000001f 0000001f     ................
   22464:	0000001e 0000001f 0000001e 0000001f     ................
   22474:	00005a54 00544d47 5b303125 392d305e     TZ..GMT.%10[^0-9
   22484:	5d2d2b2c 00006e25 25756825 68253a6e     ,+-]%n..%hu%n:%h
   22494:	3a6e2575 25756825 0000006e 7568254d     u%n:%hu%n...M%hu
   224a4:	252e6e25 6e257568 7568252e 00006e25     %n.%hu%n.%hu%n..
   224b4:	7568252f 253a6e25 6e257568 7568253a     /%hu%n:%hu%n:%hu
   224c4:	00006e25 73332e25 332e2520 64332573     %n..%.3s %.3s%3d
   224d4:	322e2520 2e253a64 253a6432 2064322e      %.2d:%.2d:%.2d 
   224e4:	000a6425                                %d..

000224e8 <day_name.4727>:
   224e8:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   224f8:	61536972 00000074                       riSat...

00022500 <mon_name.4728>:
   22500:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   22510:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   22520:	63654476 33323130 37363534 42413938     vDec0123456789AB
   22530:	46454443 00000000 33323130 37363534     CDEF....01234567
   22540:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   22550:	0000296c                                l)..

00022554 <blanks.7203>:
   22554:	20202020 20202020 20202020 20202020                     

00022564 <zeroes.7204>:
   22564:	30303030 30303030 30303030 30303030     0000000000000000

00022574 <basefix.6796>:
   22574:	0001000a 00030002 00050004 00070006     ................
   22584:	00090008 000b000a 000d000c 000f000e     ................
   22594:	00000010 00000043 49534f50 00000058     ....C...POSIX...
   225a4:	0000002e                                ....

000225a8 <_ctype_>:
   225a8:	20202000 20202020 28282020 20282828     .         ((((( 
   225b8:	20202020 20202020 20202020 20202020                     
   225c8:	10108820 10101010 10101010 10101010      ...............
   225d8:	04040410 04040404 10040404 10101010     ................
   225e8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   225f8:	01010101 01010101 01010101 10101010     ................
   22608:	42421010 42424242 02020202 02020202     ..BBBBBB........
   22618:	02020202 02020202 02020202 10101010     ................
   22628:	00000020 00000000 00000000 00000000      ...............
	...

000226ac <_init>:
   226ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   226ae:	bf00      	nop
   226b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   226b2:	bc08      	pop	{r3}
   226b4:	469e      	mov	lr, r3
   226b6:	4770      	bx	lr

000226b8 <__init_array_start>:
   226b8:	0001cd35 	.word	0x0001cd35

000226bc <__frame_dummy_init_array_entry>:
   226bc:	00000289 00000d59 00000fa1 00001045     ....Y.......E...
   226cc:	00001771 000019bd 00002229 000024e5     q.......)"...$..
   226dc:	00002915 00002e11 0000464d 00004b0d     .)......MF...K..
   226ec:	00013eb1 00014bf9 00015125 000157f1     .>...K..%Q...W..
   226fc:	00015c11 00016079 000166fd 000167bd     .\..y`...f...g..
   2270c:	0001708d 000177d9 00017f3d 00018519     .p...w..=.......
   2271c:	00018db5 00019c69                       ....i...

00022724 <_fini>:
   22724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22726:	bf00      	nop
   22728:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2272a:	bc08      	pop	{r3}
   2272c:	469e      	mov	lr, r3
   2272e:	4770      	bx	lr

00022730 <__fini_array_start>:
   22730:	00000265 	.word	0x00000265
