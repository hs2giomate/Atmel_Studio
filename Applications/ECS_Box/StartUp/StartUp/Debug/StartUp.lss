
StartUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000215c4  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000215c4  000215c4  000315c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c44  20000000  000215cc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00040c44  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00040c44  2**0
                  CONTENTS
  5 .bss          00009ba0  20000c48  00022218  00040c48  2**3
                  ALLOC
  6 .stack        00010000  2000a7e8  0002bdb8  00040c48  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00040c44  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00040c72  2**0
                  CONTENTS, READONLY
  9 .debug_info   000f5290  00000000  00000000  00040ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001306c  00000000  00000000  00135f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00028f4b  00000000  00000000  00148fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004978  00000000  00000000  00171f12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004430  00000000  00000000  0017688a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00064d97  00000000  00000000  0017acba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006623b  00000000  00000000  001dfa51  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0014e6cb  00000000  00000000  00245c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00014584  00000000  00000000  00394358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 a7 01 20 e1 16 00 00 65 17 00 00 65 17 00 00     ... ....e...e...
      10:	65 17 00 00 65 17 00 00 65 17 00 00 00 00 00 00     e...e...e.......
	...
      2c:	65 17 00 00 65 17 00 00 00 00 00 00 65 17 00 00     e...e.......e...
      3c:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      4c:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      5c:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      6c:	01 a5 00 00 d5 8e 00 00 65 17 00 00 65 17 00 00     ........e...e...
      7c:	65 17 00 00 e5 8e 00 00 f5 8e 00 00 05 8f 00 00     e...............
      8c:	15 8f 00 00 25 8f 00 00 35 8f 00 00 65 17 00 00     ....%...5...e...
      9c:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      ac:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      bc:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      cc:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
      dc:	65 17 00 00 65 17 00 00 65 17 00 00 00 00 00 00     e...e...e.......
	...
      f4:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     104:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     114:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     124:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     134:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     144:	65 17 00 00 51 bb 00 00 6d bb 00 00 89 bb 00 00     e...Q...m.......
     154:	a5 bb 00 00 65 17 00 00 65 17 00 00 65 17 00 00     ....e...e...e...
     164:	65 17 00 00 c1 bb 00 00 dd bb 00 00 f9 bb 00 00     e...............
     174:	15 bc 00 00 65 17 00 00 e5 80 00 00 09 fc 00 00     ....e...........
     184:	19 fc 00 00 29 fc 00 00 39 fc 00 00 65 17 00 00     ....)...9...e...
     194:	25 c6 00 00 65 17 00 00 65 17 00 00 65 17 00 00     %...e...e...e...
     1a4:	65 17 00 00 65 17 00 00 65 17 00 00 41 c6 00 00     e...e...e...A...
     1b4:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     1c4:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     1d4:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     1e4:	65 17 00 00 65 17 00 00 05 d3 00 00 21 d3 00 00     e...e.......!...
     1f4:	3d d3 00 00 65 17 00 00 59 d3 00 00 75 d3 00 00     =...e...Y...u...
     204:	91 d3 00 00 65 17 00 00 65 17 00 00 65 17 00 00     ....e...e...e...
     214:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     224:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     234:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     244:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...
     254:	65 17 00 00 65 17 00 00 65 17 00 00 65 17 00 00     e...e...e...e...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000c48 	.word	0x20000c48
     280:	00000000 	.word	0x00000000
     284:	000215cc 	.word	0x000215cc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000215cc 	.word	0x000215cc
     2c4:	20000c4c 	.word	0x20000c4c
     2c8:	000215cc 	.word	0x000215cc
     2cc:	00000000 	.word	0x00000000

000002d0 <wdt_set_timeout_period>:
 * \retval -1 Always on or enabled, can't set again.
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	60f8      	str	r0, [r7, #12]
     2d8:	60b9      	str	r1, [r7, #8]
     2da:	4613      	mov	r3, r2
     2dc:	80fb      	strh	r3, [r7, #6]
	ASSERT(wdt && wdt->dev.hw);
     2de:	68fb      	ldr	r3, [r7, #12]
     2e0:	2b00      	cmp	r3, #0
     2e2:	d005      	beq.n	2f0 <wdt_set_timeout_period+0x20>
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	681b      	ldr	r3, [r3, #0]
     2e8:	2b00      	cmp	r3, #0
     2ea:	d001      	beq.n	2f0 <wdt_set_timeout_period+0x20>
     2ec:	2301      	movs	r3, #1
     2ee:	e000      	b.n	2f2 <wdt_set_timeout_period+0x22>
     2f0:	2300      	movs	r3, #0
     2f2:	226f      	movs	r2, #111	; 0x6f
     2f4:	4907      	ldr	r1, [pc, #28]	; (314 <wdt_set_timeout_period+0x44>)
     2f6:	4618      	mov	r0, r3
     2f8:	4b07      	ldr	r3, [pc, #28]	; (318 <wdt_set_timeout_period+0x48>)
     2fa:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
     2fc:	68fb      	ldr	r3, [r7, #12]
     2fe:	88fa      	ldrh	r2, [r7, #6]
     300:	68b9      	ldr	r1, [r7, #8]
     302:	4618      	mov	r0, r3
     304:	4b05      	ldr	r3, [pc, #20]	; (31c <wdt_set_timeout_period+0x4c>)
     306:	4798      	blx	r3
     308:	4603      	mov	r3, r0
}
     30a:	4618      	mov	r0, r3
     30c:	3710      	adds	r7, #16
     30e:	46bd      	mov	sp, r7
     310:	bd80      	pop	{r7, pc}
     312:	bf00      	nop
     314:	0001ef90 	.word	0x0001ef90
     318:	0000799d 	.word	0x0000799d
     31c:	0000fe25 	.word	0x0000fe25

00000320 <wdt_enable>:
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
     320:	b580      	push	{r7, lr}
     322:	b082      	sub	sp, #8
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
	ASSERT(wdt && wdt->dev.hw);
     328:	687b      	ldr	r3, [r7, #4]
     32a:	2b00      	cmp	r3, #0
     32c:	d005      	beq.n	33a <wdt_enable+0x1a>
     32e:	687b      	ldr	r3, [r7, #4]
     330:	681b      	ldr	r3, [r3, #0]
     332:	2b00      	cmp	r3, #0
     334:	d001      	beq.n	33a <wdt_enable+0x1a>
     336:	2301      	movs	r3, #1
     338:	e000      	b.n	33c <wdt_enable+0x1c>
     33a:	2300      	movs	r3, #0
     33c:	228c      	movs	r2, #140	; 0x8c
     33e:	4906      	ldr	r1, [pc, #24]	; (358 <wdt_enable+0x38>)
     340:	4618      	mov	r0, r3
     342:	4b06      	ldr	r3, [pc, #24]	; (35c <wdt_enable+0x3c>)
     344:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
     346:	687b      	ldr	r3, [r7, #4]
     348:	4618      	mov	r0, r3
     34a:	4b05      	ldr	r3, [pc, #20]	; (360 <wdt_enable+0x40>)
     34c:	4798      	blx	r3
     34e:	4603      	mov	r3, r0
}
     350:	4618      	mov	r0, r3
     352:	3708      	adds	r7, #8
     354:	46bd      	mov	sp, r7
     356:	bd80      	pop	{r7, pc}
     358:	0001ef90 	.word	0x0001ef90
     35c:	0000799d 	.word	0x0000799d
     360:	0000ffb5 	.word	0x0000ffb5

00000364 <wdt_feed>:
 * \param[in] wdt The pointer to the HAL WDT instance.
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
     364:	b580      	push	{r7, lr}
     366:	b082      	sub	sp, #8
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
	ASSERT(wdt && wdt->dev.hw);
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	2b00      	cmp	r3, #0
     370:	d005      	beq.n	37e <wdt_feed+0x1a>
     372:	687b      	ldr	r3, [r7, #4]
     374:	681b      	ldr	r3, [r3, #0]
     376:	2b00      	cmp	r3, #0
     378:	d001      	beq.n	37e <wdt_feed+0x1a>
     37a:	2301      	movs	r3, #1
     37c:	e000      	b.n	380 <wdt_feed+0x1c>
     37e:	2300      	movs	r3, #0
     380:	22a9      	movs	r2, #169	; 0xa9
     382:	4906      	ldr	r1, [pc, #24]	; (39c <wdt_feed+0x38>)
     384:	4618      	mov	r0, r3
     386:	4b06      	ldr	r3, [pc, #24]	; (3a0 <wdt_feed+0x3c>)
     388:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
     38a:	687b      	ldr	r3, [r7, #4]
     38c:	4618      	mov	r0, r3
     38e:	4b05      	ldr	r3, [pc, #20]	; (3a4 <wdt_feed+0x40>)
     390:	4798      	blx	r3
     392:	4603      	mov	r3, r0
}
     394:	4618      	mov	r0, r3
     396:	3708      	adds	r7, #8
     398:	46bd      	mov	sp, r7
     39a:	bd80      	pop	{r7, pc}
     39c:	0001ef90 	.word	0x0001ef90
     3a0:	0000799d 	.word	0x0000799d
     3a4:	00010001 	.word	0x00010001

000003a8 <_ZN9eventDataC1Em>:
	{
	int16Data[0] = v1;
	int16Data[1] = v2;
	};

inline eventData::eventData(uint32 v)
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
     3b0:	6039      	str	r1, [r7, #0]
	{
	data = v;
     3b2:	687b      	ldr	r3, [r7, #4]
     3b4:	683a      	ldr	r2, [r7, #0]
     3b6:	601a      	str	r2, [r3, #0]
	}
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	4618      	mov	r0, r3
     3bc:	370c      	adds	r7, #12
     3be:	46bd      	mov	sp, r7
     3c0:	bc80      	pop	{r7}
     3c2:	4770      	bx	lr

000003c4 <_ZN5eventC1Ev>:
	private:
		
		
	};

inline event::event()
     3c4:	b580      	push	{r7, lr}
     3c6:	b082      	sub	sp, #8
     3c8:	af00      	add	r7, sp, #0
     3ca:	6078      	str	r0, [r7, #4]
	:eventClass(kAnyEventClass), eventType(kAnyEventType), timestamp(0), data((uint32)0), next(NULL)
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3d2:	801a      	strh	r2, [r3, #0]
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3da:	805a      	strh	r2, [r3, #2]
     3dc:	687b      	ldr	r3, [r7, #4]
     3de:	2200      	movs	r2, #0
     3e0:	605a      	str	r2, [r3, #4]
     3e2:	687b      	ldr	r3, [r7, #4]
     3e4:	3308      	adds	r3, #8
     3e6:	2100      	movs	r1, #0
     3e8:	4618      	mov	r0, r3
     3ea:	4b05      	ldr	r3, [pc, #20]	; (400 <_ZN5eventC1Ev+0x3c>)
     3ec:	4798      	blx	r3
     3ee:	687b      	ldr	r3, [r7, #4]
     3f0:	2200      	movs	r2, #0
     3f2:	60da      	str	r2, [r3, #12]
	{
		
	}
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	4618      	mov	r0, r3
     3f8:	3708      	adds	r7, #8
     3fa:	46bd      	mov	sp, r7
     3fc:	bd80      	pop	{r7, pc}
     3fe:	bf00      	nop
     400:	000003a9 	.word	0x000003a9

00000404 <_ZL11ARINCTimeUpPK10timer_task>:
ALU_Class	*ptrALUClass;

//static TaskHandler_Class*	taskList(NULL);

static void CheckPeriodicTask(void);
static void ARINCTimeUp(const struct timer_task *const timer_task){
     404:	b480      	push	{r7}
     406:	b083      	sub	sp, #12
     408:	af00      	add	r7, sp, #0
     40a:	6078      	str	r0, [r7, #4]
	ptrALUClass->arincTXTimeUP=true;
     40c:	4b04      	ldr	r3, [pc, #16]	; (420 <_ZL11ARINCTimeUpPK10timer_task+0x1c>)
     40e:	681b      	ldr	r3, [r3, #0]
     410:	2201      	movs	r2, #1
     412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
     416:	bf00      	nop
     418:	370c      	adds	r7, #12
     41a:	46bd      	mov	sp, r7
     41c:	bc80      	pop	{r7}
     41e:	4770      	bx	lr
     420:	20000c84 	.word	0x20000c84

00000424 <_ZN9ALU_ClassC1Ev>:


// default constructor
ALU_Class::ALU_Class()
     424:	b580      	push	{r7, lr}
     426:	b082      	sub	sp, #8
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
     42c:	687b      	ldr	r3, [r7, #4]
     42e:	4618      	mov	r0, r3
     430:	4b09      	ldr	r3, [pc, #36]	; (458 <_ZN9ALU_ClassC1Ev+0x34>)
     432:	4798      	blx	r3
{
	
	//taskList=(list_descriptor*)taskStorage;
	ptrALUClass=this;
     434:	4a09      	ldr	r2, [pc, #36]	; (45c <_ZN9ALU_ClassC1Ev+0x38>)
     436:	687b      	ldr	r3, [r7, #4]
     438:	6013      	str	r3, [r2, #0]
	clk_rate       = 1000;
     43a:	687b      	ldr	r3, [r7, #4]
     43c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     440:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	timeout_period = 4096*256;
     444:	687b      	ldr	r3, [r7, #4]
     446:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
     44a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
} //ALU_Class
     44e:	687b      	ldr	r3, [r7, #4]
     450:	4618      	mov	r0, r3
     452:	3708      	adds	r7, #8
     454:	46bd      	mov	sp, r7
     456:	bd80      	pop	{r7, pc}
     458:	00003f9d 	.word	0x00003f9d
     45c:	20000c84 	.word	0x20000c84

00000460 <_ZN9ALU_ClassD1Ev>:

// default destructor
ALU_Class::~ALU_Class()
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	6078      	str	r0, [r7, #4]
     468:	687b      	ldr	r3, [r7, #4]
     46a:	4618      	mov	r0, r3
     46c:	4b03      	ldr	r3, [pc, #12]	; (47c <_ZN9ALU_ClassD1Ev+0x1c>)
     46e:	4798      	blx	r3
{
} //~ALU_Class
     470:	687b      	ldr	r3, [r7, #4]
     472:	4618      	mov	r0, r3
     474:	3708      	adds	r7, #8
     476:	46bd      	mov	sp, r7
     478:	bd80      	pop	{r7, pc}
     47a:	bf00      	nop
     47c:	00003fbd 	.word	0x00003fbd

00000480 <_ZN9ALU_Class4InitEv>:

uint32_t	ALU_Class::Init(void){
     480:	b580      	push	{r7, lr}
     482:	b08a      	sub	sp, #40	; 0x28
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
	uint32_t	s;
	event	e;
     488:	f107 030c 	add.w	r3, r7, #12
     48c:	4618      	mov	r0, r3
     48e:	4b39      	ldr	r3, [pc, #228]	; (574 <_ZN9ALU_Class4InitEv+0xf4>)
     490:	4798      	blx	r3
	ptrPbit=&pBit;
     492:	687b      	ldr	r3, [r7, #4]
     494:	4a38      	ldr	r2, [pc, #224]	; (578 <_ZN9ALU_Class4InitEv+0xf8>)
     496:	621a      	str	r2, [r3, #32]
	StartLivePulse();
     498:	6878      	ldr	r0, [r7, #4]
     49a:	4b38      	ldr	r3, [pc, #224]	; (57c <_ZN9ALU_Class4InitEv+0xfc>)
     49c:	4798      	blx	r3
	if (hvac.Init())
     49e:	4838      	ldr	r0, [pc, #224]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4a0:	4b38      	ldr	r3, [pc, #224]	; (584 <_ZN9ALU_Class4InitEv+0x104>)
     4a2:	4798      	blx	r3
     4a4:	4603      	mov	r3, r0
     4a6:	2b00      	cmp	r3, #0
     4a8:	d05f      	beq.n	56a <_ZN9ALU_Class4InitEv+0xea>
	{
		cBit.isOK=true;
     4aa:	4b37      	ldr	r3, [pc, #220]	; (588 <_ZN9ALU_Class4InitEv+0x108>)
     4ac:	2201      	movs	r2, #1
     4ae:	701a      	strb	r2, [r3, #0]
		hvac.SetCRCConfigData();
     4b0:	4833      	ldr	r0, [pc, #204]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4b2:	4b36      	ldr	r3, [pc, #216]	; (58c <_ZN9ALU_Class4InitEv+0x10c>)
     4b4:	4798      	blx	r3
		SetInitialConfiguration(configuration);
     4b6:	687b      	ldr	r3, [r7, #4]
     4b8:	332c      	adds	r3, #44	; 0x2c
     4ba:	4619      	mov	r1, r3
     4bc:	6878      	ldr	r0, [r7, #4]
     4be:	4b34      	ldr	r3, [pc, #208]	; (590 <_ZN9ALU_Class4InitEv+0x110>)
     4c0:	4798      	blx	r3
		memory.WriteDefaultState();
     4c2:	4834      	ldr	r0, [pc, #208]	; (594 <_ZN9ALU_Class4InitEv+0x114>)
     4c4:	4b34      	ldr	r3, [pc, #208]	; (598 <_ZN9ALU_Class4InitEv+0x118>)
     4c6:	4798      	blx	r3
		hvac.SetInitialState();
     4c8:	482d      	ldr	r0, [pc, #180]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4ca:	4b34      	ldr	r3, [pc, #208]	; (59c <_ZN9ALU_Class4InitEv+0x11c>)
     4cc:	4798      	blx	r3
		uhr.Init();
     4ce:	4834      	ldr	r0, [pc, #208]	; (5a0 <_ZN9ALU_Class4InitEv+0x120>)
     4d0:	4b34      	ldr	r3, [pc, #208]	; (5a4 <_ZN9ALU_Class4InitEv+0x124>)
     4d2:	4798      	blx	r3
		hvac.saveCurrentState();
     4d4:	482a      	ldr	r0, [pc, #168]	; (580 <_ZN9ALU_Class4InitEv+0x100>)
     4d6:	4b34      	ldr	r3, [pc, #208]	; (5a8 <_ZN9ALU_Class4InitEv+0x128>)
     4d8:	4798      	blx	r3
		listener.Init();
     4da:	4834      	ldr	r0, [pc, #208]	; (5ac <_ZN9ALU_Class4InitEv+0x12c>)
     4dc:	4b34      	ldr	r3, [pc, #208]	; (5b0 <_ZN9ALU_Class4InitEv+0x130>)
     4de:	4798      	blx	r3
		
		if (!(interfaces.Init()))
     4e0:	4834      	ldr	r0, [pc, #208]	; (5b4 <_ZN9ALU_Class4InitEv+0x134>)
     4e2:	4b35      	ldr	r3, [pc, #212]	; (5b8 <_ZN9ALU_Class4InitEv+0x138>)
     4e4:	4798      	blx	r3
     4e6:	4603      	mov	r3, r0
     4e8:	f083 0301 	eor.w	r3, r3, #1
     4ec:	b2db      	uxtb	r3, r3
     4ee:	2b00      	cmp	r3, #0
     4f0:	d00e      	beq.n	510 <_ZN9ALU_Class4InitEv+0x90>
		{
			NotifyError(kARINCINnterfaceError,s);
     4f2:	f107 031c 	add.w	r3, r7, #28
     4f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
     4f8:	4618      	mov	r0, r3
     4fa:	4b30      	ldr	r3, [pc, #192]	; (5bc <_ZN9ALU_Class4InitEv+0x13c>)
     4fc:	4798      	blx	r3
     4fe:	f107 031c 	add.w	r3, r7, #28
     502:	461a      	mov	r2, r3
     504:	2100      	movs	r1, #0
     506:	6878      	ldr	r0, [r7, #4]
     508:	4b2d      	ldr	r3, [pc, #180]	; (5c0 <_ZN9ALU_Class4InitEv+0x140>)
     50a:	4798      	blx	r3
			return s;
     50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     50e:	e02d      	b.n	56c <_ZN9ALU_Class4InitEv+0xec>
		}
		else
		{
			arincTimer.Start_periodic_task(FUNC_PTR(ARINCTimeUp),500);
     510:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     514:	492b      	ldr	r1, [pc, #172]	; (5c4 <_ZN9ALU_Class4InitEv+0x144>)
     516:	482c      	ldr	r0, [pc, #176]	; (5c8 <_ZN9ALU_Class4InitEv+0x148>)
     518:	4b2c      	ldr	r3, [pc, #176]	; (5cc <_ZN9ALU_Class4InitEv+0x14c>)
     51a:	4798      	blx	r3
			
			s=pBit.CheckCurrentStatus(status);
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
     522:	4619      	mov	r1, r3
     524:	4814      	ldr	r0, [pc, #80]	; (578 <_ZN9ALU_Class4InitEv+0xf8>)
     526:	4b2a      	ldr	r3, [pc, #168]	; (5d0 <_ZN9ALU_Class4InitEv+0x150>)
     528:	4798      	blx	r3
     52a:	6278      	str	r0, [r7, #36]	; 0x24
			if (s>0)
     52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     52e:	2b00      	cmp	r3, #0
     530:	d00e      	beq.n	550 <_ZN9ALU_Class4InitEv+0xd0>
			{
				NotifyError(kpBITError,s);
     532:	f107 0320 	add.w	r3, r7, #32
     536:	6a79      	ldr	r1, [r7, #36]	; 0x24
     538:	4618      	mov	r0, r3
     53a:	4b20      	ldr	r3, [pc, #128]	; (5bc <_ZN9ALU_Class4InitEv+0x13c>)
     53c:	4798      	blx	r3
     53e:	f107 0320 	add.w	r3, r7, #32
     542:	461a      	mov	r2, r3
     544:	2101      	movs	r1, #1
     546:	6878      	ldr	r0, [r7, #4]
     548:	4b1d      	ldr	r3, [pc, #116]	; (5c0 <_ZN9ALU_Class4InitEv+0x140>)
     54a:	4798      	blx	r3
				return s;
     54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     54e:	e00d      	b.n	56c <_ZN9ALU_Class4InitEv+0xec>
			}
			else
			{
				InitTaskArray();
     550:	687b      	ldr	r3, [r7, #4]
     552:	4618      	mov	r0, r3
     554:	4b1f      	ldr	r3, [pc, #124]	; (5d4 <_ZN9ALU_Class4InitEv+0x154>)
     556:	4798      	blx	r3
				EnableWatchDog();
     558:	6878      	ldr	r0, [r7, #4]
     55a:	4b1f      	ldr	r3, [pc, #124]	; (5d8 <_ZN9ALU_Class4InitEv+0x158>)
     55c:	4798      	blx	r3
				PrepareNewEvent(kALUEventSimpleStart);
     55e:	2200      	movs	r2, #0
     560:	f44f 7182 	mov.w	r1, #260	; 0x104
     564:	6878      	ldr	r0, [r7, #4]
     566:	4b1d      	ldr	r3, [pc, #116]	; (5dc <_ZN9ALU_Class4InitEv+0x15c>)
     568:	4798      	blx	r3
	//while(1);

	

	  
	return s;
     56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     56c:	4618      	mov	r0, r3
     56e:	3728      	adds	r7, #40	; 0x28
     570:	46bd      	mov	sp, r7
     572:	bd80      	pop	{r7, pc}
     574:	000003c5 	.word	0x000003c5
     578:	20000c64 	.word	0x20000c64
     57c:	00000829 	.word	0x00000829
     580:	200081ac 	.word	0x200081ac
     584:	00002f2d 	.word	0x00002f2d
     588:	20000c78 	.word	0x20000c78
     58c:	00003d1d 	.word	0x00003d1d
     590:	00000875 	.word	0x00000875
     594:	20002d4c 	.word	0x20002d4c
     598:	00002a51 	.word	0x00002a51
     59c:	00001111 	.word	0x00001111
     5a0:	20001408 	.word	0x20001408
     5a4:	00001639 	.word	0x00001639
     5a8:	00003bb9 	.word	0x00003bb9
     5ac:	200099c8 	.word	0x200099c8
     5b0:	0001433d 	.word	0x0001433d
     5b4:	2000160c 	.word	0x2000160c
     5b8:	00001c89 	.word	0x00001c89
     5bc:	000003a9 	.word	0x000003a9
     5c0:	000009cd 	.word	0x000009cd
     5c4:	00000405 	.word	0x00000405
     5c8:	2000a238 	.word	0x2000a238
     5cc:	00016e6d 	.word	0x00016e6d
     5d0:	00002c29 	.word	0x00002c29
     5d4:	00003fd1 	.word	0x00003fd1
     5d8:	000007cd 	.word	0x000007cd
     5dc:	00000a35 	.word	0x00000a35

000005e0 <_ZN9ALU_Class13RunControllerEv>:

uint32_t	ALU_Class::RunController(void){
     5e0:	b590      	push	{r4, r7, lr}
     5e2:	b089      	sub	sp, #36	; 0x24
     5e4:	af02      	add	r7, sp, #8
     5e6:	6078      	str	r0, [r7, #4]
	event e;
     5e8:	f107 0308 	add.w	r3, r7, #8
     5ec:	4618      	mov	r0, r3
     5ee:	4b22      	ldr	r3, [pc, #136]	; (678 <_ZN9ALU_Class13RunControllerEv+0x98>)
     5f0:	4798      	blx	r3
	
	
	   while (pBit)
     5f2:	4822      	ldr	r0, [pc, #136]	; (67c <_ZN9ALU_Class13RunControllerEv+0x9c>)
     5f4:	4b22      	ldr	r3, [pc, #136]	; (680 <_ZN9ALU_Class13RunControllerEv+0xa0>)
     5f6:	4798      	blx	r3
     5f8:	4603      	mov	r3, r0
     5fa:	2b00      	cmp	r3, #0
     5fc:	d036      	beq.n	66c <_ZN9ALU_Class13RunControllerEv+0x8c>
	   {
		   listener.eventHandler=&ALU_Class::CheckPeriodicTask;
     5fe:	4b21      	ldr	r3, [pc, #132]	; (684 <_ZN9ALU_Class13RunControllerEv+0xa4>)
     600:	4a21      	ldr	r2, [pc, #132]	; (688 <_ZN9ALU_Class13RunControllerEv+0xa8>)
     602:	615a      	str	r2, [r3, #20]
		   while (!arincTXTimeUP)
     604:	687b      	ldr	r3, [r7, #4]
     606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
     60a:	b2db      	uxtb	r3, r3
     60c:	f083 0301 	eor.w	r3, r3, #1
     610:	b2db      	uxtb	r3, r3
     612:	2b00      	cmp	r3, #0
     614:	d022      	beq.n	65c <_ZN9ALU_Class13RunControllerEv+0x7c>
		   	{
				   if (listener.WaitForEvent(e, kALUEventClass, kALUControllerEvent,8))
     616:	f107 0108 	add.w	r1, r7, #8
     61a:	2308      	movs	r3, #8
     61c:	9300      	str	r3, [sp, #0]
     61e:	2302      	movs	r3, #2
     620:	f44f 6280 	mov.w	r2, #1024	; 0x400
     624:	4817      	ldr	r0, [pc, #92]	; (684 <_ZN9ALU_Class13RunControllerEv+0xa4>)
     626:	4c19      	ldr	r4, [pc, #100]	; (68c <_ZN9ALU_Class13RunControllerEv+0xac>)
     628:	47a0      	blx	r4
     62a:	4603      	mov	r3, r0
     62c:	2b00      	cmp	r3, #0
     62e:	d006      	beq.n	63e <_ZN9ALU_Class13RunControllerEv+0x5e>
				   {
					   HandleControllerEvent(e);
     630:	f107 0308 	add.w	r3, r7, #8
     634:	4619      	mov	r1, r3
     636:	6878      	ldr	r0, [r7, #4]
     638:	4b15      	ldr	r3, [pc, #84]	; (690 <_ZN9ALU_Class13RunControllerEv+0xb0>)
     63a:	4798      	blx	r3
     63c:	e7e2      	b.n	604 <_ZN9ALU_Class13RunControllerEv+0x24>
					   
				   }else if (listener.WaitForEvent(e, kHVACEventClass, kHVACEventDoPendingTasks,8))
     63e:	f107 0108 	add.w	r1, r7, #8
     642:	2308      	movs	r3, #8
     644:	9300      	str	r3, [sp, #0]
     646:	2303      	movs	r3, #3
     648:	f44f 7200 	mov.w	r2, #512	; 0x200
     64c:	480d      	ldr	r0, [pc, #52]	; (684 <_ZN9ALU_Class13RunControllerEv+0xa4>)
     64e:	4c0f      	ldr	r4, [pc, #60]	; (68c <_ZN9ALU_Class13RunControllerEv+0xac>)
     650:	47a0      	blx	r4
     652:	4603      	mov	r3, r0
     654:	2b00      	cmp	r3, #0
     656:	d100      	bne.n	65a <_ZN9ALU_Class13RunControllerEv+0x7a>
		   while (!arincTXTimeUP)
     658:	e7d4      	b.n	604 <_ZN9ALU_Class13RunControllerEv+0x24>
				   {
					break;
     65a:	bf00      	nop
				   }
			 }
			//arinc.TrasmitSingleLabel();
			ExecutePendingTask();
     65c:	6878      	ldr	r0, [r7, #4]
     65e:	4b0d      	ldr	r3, [pc, #52]	; (694 <_ZN9ALU_Class13RunControllerEv+0xb4>)
     660:	4798      	blx	r3
			arincTXTimeUP=false;
     662:	687b      	ldr	r3, [r7, #4]
     664:	2200      	movs	r2, #0
     666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	   while (pBit)
     66a:	e7c2      	b.n	5f2 <_ZN9ALU_Class13RunControllerEv+0x12>
// 			
// 		}
// 		interfaces.CheckCommunication();
// 	}
	
}
     66c:	bf00      	nop
     66e:	4618      	mov	r0, r3
     670:	371c      	adds	r7, #28
     672:	46bd      	mov	sp, r7
     674:	bd90      	pop	{r4, r7, pc}
     676:	bf00      	nop
     678:	000003c5 	.word	0x000003c5
     67c:	20000c64 	.word	0x20000c64
     680:	00002c0f 	.word	0x00002c0f
     684:	200099c8 	.word	0x200099c8
     688:	00000c11 	.word	0x00000c11
     68c:	0001441d 	.word	0x0001441d
     690:	00000699 	.word	0x00000699
     694:	00000a81 	.word	0x00000a81

00000698 <_ZN9ALU_Class21HandleControllerEventER5event>:



void ALU_Class::HandleControllerEvent(event& e)
{
     698:	b580      	push	{r7, lr}
     69a:	b086      	sub	sp, #24
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
     6a0:	6039      	str	r1, [r7, #0]

	alu.callingTask = alu.currentTask;
     6a2:	4b28      	ldr	r3, [pc, #160]	; (744 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6a4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
     6a8:	4a26      	ldr	r2, [pc, #152]	; (744 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6aa:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	alu.currentTask = e.data.wordData[0];
     6ae:	683b      	ldr	r3, [r7, #0]
     6b0:	891b      	ldrh	r3, [r3, #8]
     6b2:	461a      	mov	r2, r3
     6b4:	4b23      	ldr	r3, [pc, #140]	; (744 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6b6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	alu.taskEntryTime= hvacTimer.Get_ticks();
     6ba:	4823      	ldr	r0, [pc, #140]	; (748 <_ZN9ALU_Class21HandleControllerEventER5event+0xb0>)
     6bc:	4b23      	ldr	r3, [pc, #140]	; (74c <_ZN9ALU_Class21HandleControllerEventER5event+0xb4>)
     6be:	4798      	blx	r3
     6c0:	4602      	mov	r2, r0
     6c2:	4b20      	ldr	r3, [pc, #128]	; (744 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6c4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164




	switch (alu.currentTask)
     6c8:	4b1e      	ldr	r3, [pc, #120]	; (744 <_ZN9ALU_Class21HandleControllerEventER5event+0xac>)
     6ca:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
     6ce:	f240 1205 	movw	r2, #261	; 0x105
     6d2:	4293      	cmp	r3, r2
     6d4:	d026      	beq.n	724 <_ZN9ALU_Class21HandleControllerEventER5event+0x8c>
     6d6:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     6da:	d205      	bcs.n	6e8 <_ZN9ALU_Class21HandleControllerEventER5event+0x50>
     6dc:	2b03      	cmp	r3, #3
     6de:	d01a      	beq.n	716 <_ZN9ALU_Class21HandleControllerEventER5event+0x7e>
     6e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
     6e4:	d008      	beq.n	6f8 <_ZN9ALU_Class21HandleControllerEventER5event+0x60>
     6e6:	e024      	b.n	732 <_ZN9ALU_Class21HandleControllerEventER5event+0x9a>
     6e8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
     6ec:	d00e      	beq.n	70c <_ZN9ALU_Class21HandleControllerEventER5event+0x74>
     6ee:	f240 1207 	movw	r2, #263	; 0x107
     6f2:	4293      	cmp	r3, r2
     6f4:	d005      	beq.n	702 <_ZN9ALU_Class21HandleControllerEventER5event+0x6a>
     6f6:	e01c      	b.n	732 <_ZN9ALU_Class21HandleControllerEventER5event+0x9a>
	{
		case kALUEventSimpleStart:
			hvac.Start(1);
     6f8:	2101      	movs	r1, #1
     6fa:	4815      	ldr	r0, [pc, #84]	; (750 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     6fc:	4b15      	ldr	r3, [pc, #84]	; (754 <_ZN9ALU_Class21HandleControllerEventER5event+0xbc>)
     6fe:	4798      	blx	r3
		break;
     700:	e01c      	b.n	73c <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		case kALUEventSimpleResume:
			hvac.ControllerResume(1);
     702:	2101      	movs	r1, #1
     704:	4812      	ldr	r0, [pc, #72]	; (750 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     706:	4b14      	ldr	r3, [pc, #80]	; (758 <_ZN9ALU_Class21HandleControllerEventER5event+0xc0>)
     708:	4798      	blx	r3
		break;
     70a:	e017      	b.n	73c <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		case kALUEventSimpleStop:
			hvac.Stop(0);
     70c:	2100      	movs	r1, #0
     70e:	4810      	ldr	r0, [pc, #64]	; (750 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     710:	4b12      	ldr	r3, [pc, #72]	; (75c <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     712:	4798      	blx	r3
		break;
     714:	e012      	b.n	73c <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     716:	f107 0308 	add.w	r3, r7, #8
     71a:	4911      	ldr	r1, [pc, #68]	; (760 <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     71c:	4618      	mov	r0, r3
     71e:	4b11      	ldr	r3, [pc, #68]	; (764 <_ZN9ALU_Class21HandleControllerEventER5event+0xcc>)
     720:	4798      	blx	r3
		break;
     722:	e00b      	b.n	73c <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>
		case kALUEventCheckPheripherals:
			interfaces.CheckCommunication();
     724:	f107 0310 	add.w	r3, r7, #16
     728:	490d      	ldr	r1, [pc, #52]	; (760 <_ZN9ALU_Class21HandleControllerEventER5event+0xc8>)
     72a:	4618      	mov	r0, r3
     72c:	4b0d      	ldr	r3, [pc, #52]	; (764 <_ZN9ALU_Class21HandleControllerEventER5event+0xcc>)
     72e:	4798      	blx	r3
		break;
     730:	e004      	b.n	73c <_ZN9ALU_Class21HandleControllerEventER5event+0xa4>

		default:
			hvac.Stop(0);
     732:	2100      	movs	r1, #0
     734:	4806      	ldr	r0, [pc, #24]	; (750 <_ZN9ALU_Class21HandleControllerEventER5event+0xb8>)
     736:	4b09      	ldr	r3, [pc, #36]	; (75c <_ZN9ALU_Class21HandleControllerEventER5event+0xc4>)
     738:	4798      	blx	r3
		break;
     73a:	bf00      	nop
	}
}
     73c:	bf00      	nop
     73e:	3718      	adds	r7, #24
     740:	46bd      	mov	sp, r7
     742:	bd80      	pop	{r7, pc}
     744:	20000c88 	.word	0x20000c88
     748:	2000a200 	.word	0x2000a200
     74c:	00016f39 	.word	0x00016f39
     750:	200081ac 	.word	0x200081ac
     754:	0000312d 	.word	0x0000312d
     758:	00002fad 	.word	0x00002fad
     75c:	00003c4d 	.word	0x00003c4d
     760:	2000160c 	.word	0x2000160c
     764:	00001d19 	.word	0x00001d19

00000768 <_ZN9ALU_Class15GetSelectedAMMCEv>:

uint8_t	ALU_Class::GetSelectedAMMC(void){
     768:	b580      	push	{r7, lr}
     76a:	b082      	sub	sp, #8
     76c:	af00      	add	r7, sp, #0
     76e:	6078      	str	r0, [r7, #4]
	activeLine=arinc.GetActiveLine();
     770:	4811      	ldr	r0, [pc, #68]	; (7b8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x50>)
     772:	4b12      	ldr	r3, [pc, #72]	; (7bc <_ZN9ALU_Class15GetSelectedAMMCEv+0x54>)
     774:	4798      	blx	r3
     776:	4603      	mov	r3, r0
     778:	461a      	mov	r2, r3
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
		switch (activeLine)
     780:	687b      	ldr	r3, [r7, #4]
     782:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
     786:	2b01      	cmp	r3, #1
     788:	d002      	beq.n	790 <_ZN9ALU_Class15GetSelectedAMMCEv+0x28>
     78a:	2b02      	cmp	r3, #2
     78c:	d004      	beq.n	798 <_ZN9ALU_Class15GetSelectedAMMCEv+0x30>
     78e:	e007      	b.n	7a0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x38>
		{
			case 1:
			ammc=&ammc1;
     790:	4b0b      	ldr	r3, [pc, #44]	; (7c0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     792:	4a0c      	ldr	r2, [pc, #48]	; (7c4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     794:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     796:	e007      	b.n	7a8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			
			case 2:
			ammc=&ammc2;
     798:	4b09      	ldr	r3, [pc, #36]	; (7c0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     79a:	4a0b      	ldr	r2, [pc, #44]	; (7c8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x60>)
     79c:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     79e:	e003      	b.n	7a8 <_ZN9ALU_Class15GetSelectedAMMCEv+0x40>
			default:
			ammc=&ammc1;
     7a0:	4b07      	ldr	r3, [pc, #28]	; (7c0 <_ZN9ALU_Class15GetSelectedAMMCEv+0x58>)
     7a2:	4a08      	ldr	r2, [pc, #32]	; (7c4 <_ZN9ALU_Class15GetSelectedAMMCEv+0x5c>)
     7a4:	601a      	str	r2, [r3, #0]
			/* Your code here */
			break;
     7a6:	bf00      	nop
		}
	return activeLine;	
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
}
     7ae:	4618      	mov	r0, r3
     7b0:	3708      	adds	r7, #8
     7b2:	46bd      	mov	sp, r7
     7b4:	bd80      	pop	{r7, pc}
     7b6:	bf00      	nop
     7b8:	20009174 	.word	0x20009174
     7bc:	00013dc3 	.word	0x00013dc3
     7c0:	200013f4 	.word	0x200013f4
     7c4:	20000e24 	.word	0x20000e24
     7c8:	2000110c 	.word	0x2000110c

000007cc <_ZN9ALU_Class14EnableWatchDogEv>:
	else
	{
	}
	return line;
}
int32_t	ALU_Class::EnableWatchDog(void){
     7cc:	b580      	push	{r7, lr}
     7ce:	b082      	sub	sp, #8
     7d0:	af00      	add	r7, sp, #0
     7d2:	6078      	str	r0, [r7, #4]

	wdt_set_timeout_period(&WATCHDOG, clk_rate, timeout_period);
     7d4:	687b      	ldr	r3, [r7, #4]
     7d6:	f8d3 1174 	ldr.w	r1, [r3, #372]	; 0x174
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
     7e0:	b29b      	uxth	r3, r3
     7e2:	461a      	mov	r2, r3
     7e4:	4805      	ldr	r0, [pc, #20]	; (7fc <_ZN9ALU_Class14EnableWatchDogEv+0x30>)
     7e6:	4b06      	ldr	r3, [pc, #24]	; (800 <_ZN9ALU_Class14EnableWatchDogEv+0x34>)
     7e8:	4798      	blx	r3
	return wdt_enable(&WATCHDOG);
     7ea:	4804      	ldr	r0, [pc, #16]	; (7fc <_ZN9ALU_Class14EnableWatchDogEv+0x30>)
     7ec:	4b05      	ldr	r3, [pc, #20]	; (804 <_ZN9ALU_Class14EnableWatchDogEv+0x38>)
     7ee:	4798      	blx	r3
     7f0:	4603      	mov	r3, r0

	
}
     7f2:	4618      	mov	r0, r3
     7f4:	3708      	adds	r7, #8
     7f6:	46bd      	mov	sp, r7
     7f8:	bd80      	pop	{r7, pc}
     7fa:	bf00      	nop
     7fc:	2000a724 	.word	0x2000a724
     800:	000002d1 	.word	0x000002d1
     804:	00000321 	.word	0x00000321

00000808 <_ZN9ALU_Class12FeedWatchDogEv>:
int32_t	ALU_Class::FeedWatchDog(void){
     808:	b580      	push	{r7, lr}
     80a:	b082      	sub	sp, #8
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
	return wdt_feed(&WATCHDOG);
     810:	4803      	ldr	r0, [pc, #12]	; (820 <_ZN9ALU_Class12FeedWatchDogEv+0x18>)
     812:	4b04      	ldr	r3, [pc, #16]	; (824 <_ZN9ALU_Class12FeedWatchDogEv+0x1c>)
     814:	4798      	blx	r3
     816:	4603      	mov	r3, r0
}
     818:	4618      	mov	r0, r3
     81a:	3708      	adds	r7, #8
     81c:	46bd      	mov	sp, r7
     81e:	bd80      	pop	{r7, pc}
     820:	2000a724 	.word	0x2000a724
     824:	00000365 	.word	0x00000365

00000828 <_ZN9ALU_Class14StartLivePulseEv>:
uint8_t	ALU_Class::StartLivePulse(void){
     828:	b580      	push	{r7, lr}
     82a:	b084      	sub	sp, #16
     82c:	af00      	add	r7, sp, #0
     82e:	6078      	str	r0, [r7, #4]
	usb<<"**** Life Pulse Activated****"<<NEWLINE;
     830:	4909      	ldr	r1, [pc, #36]	; (858 <_ZN9ALU_Class14StartLivePulseEv+0x30>)
     832:	480a      	ldr	r0, [pc, #40]	; (85c <_ZN9ALU_Class14StartLivePulseEv+0x34>)
     834:	4b0a      	ldr	r3, [pc, #40]	; (860 <_ZN9ALU_Class14StartLivePulseEv+0x38>)
     836:	4798      	blx	r3
     838:	4603      	mov	r3, r0
     83a:	490a      	ldr	r1, [pc, #40]	; (864 <_ZN9ALU_Class14StartLivePulseEv+0x3c>)
     83c:	4618      	mov	r0, r3
     83e:	4b0a      	ldr	r3, [pc, #40]	; (868 <_ZN9ALU_Class14StartLivePulseEv+0x40>)
     840:	4798      	blx	r3
	//pwm_set_parameters(&LIVE_PULSE, 1000000, 500);
	uint32_t p=pwm_enable(&LIVE_PULSE);
     842:	480a      	ldr	r0, [pc, #40]	; (86c <_ZN9ALU_Class14StartLivePulseEv+0x44>)
     844:	4b0a      	ldr	r3, [pc, #40]	; (870 <_ZN9ALU_Class14StartLivePulseEv+0x48>)
     846:	4798      	blx	r3
     848:	4603      	mov	r3, r0
     84a:	60fb      	str	r3, [r7, #12]
	return p;
     84c:	68fb      	ldr	r3, [r7, #12]
     84e:	b2db      	uxtb	r3, r3
}
     850:	4618      	mov	r0, r3
     852:	3710      	adds	r7, #16
     854:	46bd      	mov	sp, r7
     856:	bd80      	pop	{r7, pc}
     858:	0001efdc 	.word	0x0001efdc
     85c:	2000a258 	.word	0x2000a258
     860:	00000c95 	.word	0x00000c95
     864:	0001efd8 	.word	0x0001efd8
     868:	00000c75 	.word	0x00000c75
     86c:	2000a5c0 	.word	0x2000a5c0
     870:	0000675d 	.word	0x0000675d

00000874 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData>:
		nextUptimeUpdate = hvacTimer.Get_ticks()+ 1000;
	}
	
	return (alu.FeedWatchDog()>0);
}
uint32_t ALU_Class::SetInitialConfiguration(ConfigurationData& cd){
     874:	b580      	push	{r7, lr}
     876:	b088      	sub	sp, #32
     878:	af00      	add	r7, sp, #0
     87a:	6078      	str	r0, [r7, #4]
     87c:	6039      	str	r1, [r7, #0]
	uint32_t	w,crc,refCRC,e;
	w=0;
     87e:	2300      	movs	r3, #0
     880:	61bb      	str	r3, [r7, #24]
	uint32_t	r=memory.ReadLastConfigurationData(cd);
     882:	6839      	ldr	r1, [r7, #0]
     884:	483d      	ldr	r0, [pc, #244]	; (97c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     886:	4b3e      	ldr	r3, [pc, #248]	; (980 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x10c>)
     888:	4798      	blx	r3
     88a:	61f8      	str	r0, [r7, #28]
	if (memory.IsConfigurationDataUpdated())
     88c:	483d      	ldr	r0, [pc, #244]	; (984 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     88e:	4b3e      	ldr	r3, [pc, #248]	; (988 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x114>)
     890:	4798      	blx	r3
     892:	4603      	mov	r3, r0
     894:	2b00      	cmp	r3, #0
     896:	d007      	beq.n	8a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x34>
	{
		r=memory.ReadUpdatedConfigurationData(configuration);
     898:	687b      	ldr	r3, [r7, #4]
     89a:	332c      	adds	r3, #44	; 0x2c
     89c:	4619      	mov	r1, r3
     89e:	4837      	ldr	r0, [pc, #220]	; (97c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     8a0:	4b3a      	ldr	r3, [pc, #232]	; (98c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x118>)
     8a2:	4798      	blx	r3
     8a4:	61f8      	str	r0, [r7, #28]
     8a6:	e05e      	b.n	966 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
		
	}
	else
	{
		crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(configuration));
     8a8:	22ac      	movs	r2, #172	; 0xac
     8aa:	6839      	ldr	r1, [r7, #0]
     8ac:	4835      	ldr	r0, [pc, #212]	; (984 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     8ae:	4b38      	ldr	r3, [pc, #224]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     8b0:	4798      	blx	r3
     8b2:	6178      	str	r0, [r7, #20]
		refCRC=memory.ReadCRCConfigurationData();
     8b4:	4831      	ldr	r0, [pc, #196]	; (97c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     8b6:	4b37      	ldr	r3, [pc, #220]	; (994 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x120>)
     8b8:	4798      	blx	r3
     8ba:	6138      	str	r0, [r7, #16]
		if (crc==refCRC)
     8bc:	697a      	ldr	r2, [r7, #20]
     8be:	693b      	ldr	r3, [r7, #16]
     8c0:	429a      	cmp	r2, r3
     8c2:	d108      	bne.n	8d6 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x62>
		{
			configuration=cd;
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	683a      	ldr	r2, [r7, #0]
     8c8:	332c      	adds	r3, #44	; 0x2c
     8ca:	4611      	mov	r1, r2
     8cc:	22ac      	movs	r2, #172	; 0xac
     8ce:	4618      	mov	r0, r3
     8d0:	4b31      	ldr	r3, [pc, #196]	; (998 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     8d2:	4798      	blx	r3
     8d4:	e047      	b.n	966 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
		
		} 
		else
		{
		
			r=memory.ReadDefaultConfigurationData(configuration);
     8d6:	687b      	ldr	r3, [r7, #4]
     8d8:	332c      	adds	r3, #44	; 0x2c
     8da:	4619      	mov	r1, r3
     8dc:	4827      	ldr	r0, [pc, #156]	; (97c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     8de:	4b2f      	ldr	r3, [pc, #188]	; (99c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x128>)
     8e0:	4798      	blx	r3
     8e2:	61f8      	str	r0, [r7, #28]
			crc=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
     8e4:	687b      	ldr	r3, [r7, #4]
     8e6:	332c      	adds	r3, #44	; 0x2c
     8e8:	22ac      	movs	r2, #172	; 0xac
     8ea:	4619      	mov	r1, r3
     8ec:	4825      	ldr	r0, [pc, #148]	; (984 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x110>)
     8ee:	4b28      	ldr	r3, [pc, #160]	; (990 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x11c>)
     8f0:	4798      	blx	r3
     8f2:	6178      	str	r0, [r7, #20]
			if (crc==hvac.CRC32)
     8f4:	4b2a      	ldr	r3, [pc, #168]	; (9a0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     8f6:	f8d3 24d0 	ldr.w	r2, [r3, #1232]	; 0x4d0
     8fa:	697b      	ldr	r3, [r7, #20]
     8fc:	429a      	cmp	r2, r3
     8fe:	d105      	bne.n	90c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x98>
			{
				w=memory.WriteCRCConfigurationData(crc);
     900:	6979      	ldr	r1, [r7, #20]
     902:	481e      	ldr	r0, [pc, #120]	; (97c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     904:	4b27      	ldr	r3, [pc, #156]	; (9a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x130>)
     906:	4798      	blx	r3
     908:	61b8      	str	r0, [r7, #24]
     90a:	e02c      	b.n	966 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0xf2>
				
			}
			else
			{
							
				configuration=factoryDefaultsConfiguration;
     90c:	687b      	ldr	r3, [r7, #4]
     90e:	4a26      	ldr	r2, [pc, #152]	; (9a8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x134>)
     910:	332c      	adds	r3, #44	; 0x2c
     912:	4611      	mov	r1, r2
     914:	22ac      	movs	r2, #172	; 0xac
     916:	4618      	mov	r0, r3
     918:	4b1f      	ldr	r3, [pc, #124]	; (998 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x124>)
     91a:	4798      	blx	r3
				e=qspiFlash.Erase((uint32_t)&flashMap->configurationSector);
     91c:	4b23      	ldr	r3, [pc, #140]	; (9ac <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x138>)
     91e:	681b      	ldr	r3, [r3, #0]
     920:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     924:	4619      	mov	r1, r3
     926:	4822      	ldr	r0, [pc, #136]	; (9b0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x13c>)
     928:	4b22      	ldr	r3, [pc, #136]	; (9b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x140>)
     92a:	4798      	blx	r3
     92c:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultConfiguration();
     92e:	4813      	ldr	r0, [pc, #76]	; (97c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     930:	4b21      	ldr	r3, [pc, #132]	; (9b8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x144>)
     932:	4798      	blx	r3
     934:	61b8      	str	r0, [r7, #24]
				
				w=memory.WriteCRCConfigurationData(hvac.CRC32);
     936:	4b1a      	ldr	r3, [pc, #104]	; (9a0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     938:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
     93c:	4619      	mov	r1, r3
     93e:	480f      	ldr	r0, [pc, #60]	; (97c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     940:	4b18      	ldr	r3, [pc, #96]	; (9a4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x130>)
     942:	4798      	blx	r3
     944:	61b8      	str	r0, [r7, #24]
				
				e=qspiFlash.Erase((uint32_t)&flashMap->parametersSector);
     946:	4b19      	ldr	r3, [pc, #100]	; (9ac <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x138>)
     948:	681b      	ldr	r3, [r3, #0]
     94a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     94e:	4619      	mov	r1, r3
     950:	4817      	ldr	r0, [pc, #92]	; (9b0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x13c>)
     952:	4b18      	ldr	r3, [pc, #96]	; (9b4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x140>)
     954:	4798      	blx	r3
     956:	60f8      	str	r0, [r7, #12]
				w=memory.WriteDefaultParameters();
     958:	4808      	ldr	r0, [pc, #32]	; (97c <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x108>)
     95a:	4b18      	ldr	r3, [pc, #96]	; (9bc <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x148>)
     95c:	4798      	blx	r3
     95e:	61b8      	str	r0, [r7, #24]
				memory.WriteFastDefaultParameters();
     960:	4817      	ldr	r0, [pc, #92]	; (9c0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x14c>)
     962:	4b18      	ldr	r3, [pc, #96]	; (9c4 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x150>)
     964:	4798      	blx	r3
			
		}
		
		
	}
	hvac.SetConfigurationData(configuration);
     966:	687b      	ldr	r3, [r7, #4]
     968:	332c      	adds	r3, #44	; 0x2c
     96a:	4619      	mov	r1, r3
     96c:	480c      	ldr	r0, [pc, #48]	; (9a0 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x12c>)
     96e:	4b16      	ldr	r3, [pc, #88]	; (9c8 <_ZN9ALU_Class23SetInitialConfigurationER17ConfigurationData+0x154>)
     970:	4798      	blx	r3
	return r;
     972:	69fb      	ldr	r3, [r7, #28]
};
     974:	4618      	mov	r0, r3
     976:	3720      	adds	r7, #32
     978:	46bd      	mov	sp, r7
     97a:	bd80      	pop	{r7, pc}
     97c:	20002d4c 	.word	0x20002d4c
     980:	00002845 	.word	0x00002845
     984:	20002ba8 	.word	0x20002ba8
     988:	00002d3d 	.word	0x00002d3d
     98c:	00002879 	.word	0x00002879
     990:	000014ad 	.word	0x000014ad
     994:	000028e5 	.word	0x000028e5
     998:	0001b35d 	.word	0x0001b35d
     99c:	00002811 	.word	0x00002811
     9a0:	200081ac 	.word	0x200081ac
     9a4:	00002ad5 	.word	0x00002ad5
     9a8:	0001f150 	.word	0x0001f150
     9ac:	20008100 	.word	0x20008100
     9b0:	20009da0 	.word	0x20009da0
     9b4:	00015f1d 	.word	0x00015f1d
     9b8:	000029bd 	.word	0x000029bd
     9bc:	00002a11 	.word	0x00002a11
     9c0:	20002d3c 	.word	0x20002d3c
     9c4:	00001935 	.word	0x00001935
     9c8:	00003cc9 	.word	0x00003cc9

000009cc <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData>:

void ALU_Class::NotifyError(Internal_Fault_List ifl,const eventData& data)
{
     9cc:	b580      	push	{r7, lr}
     9ce:	b084      	sub	sp, #16
     9d0:	af00      	add	r7, sp, #0
     9d2:	60f8      	str	r0, [r7, #12]
     9d4:	460b      	mov	r3, r1
     9d6:	607a      	str	r2, [r7, #4]
     9d8:	72fb      	strb	r3, [r7, #11]
	listener.SendErrorSelf(uint16_t(ifl),data);
     9da:	7afb      	ldrb	r3, [r7, #11]
     9dc:	b29b      	uxth	r3, r3
     9de:	687a      	ldr	r2, [r7, #4]
     9e0:	4619      	mov	r1, r3
     9e2:	4803      	ldr	r0, [pc, #12]	; (9f0 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x24>)
     9e4:	4b03      	ldr	r3, [pc, #12]	; (9f4 <_ZN9ALU_Class11NotifyErrorE19Internal_Fault_ListRK9eventData+0x28>)
     9e6:	4798      	blx	r3
}
     9e8:	bf00      	nop
     9ea:	3710      	adds	r7, #16
     9ec:	46bd      	mov	sp, r7
     9ee:	bd80      	pop	{r7, pc}
     9f0:	200099c8 	.word	0x200099c8
     9f4:	0001469d 	.word	0x0001469d

000009f8 <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm>:
{
	listener.SendErrorSelf(uint16_t(fl),data);
}

void ALU_Class::PrepareNewTask(ALUTaskEnum newTask, uint32_t data)
{
     9f8:	b580      	push	{r7, lr}
     9fa:	b084      	sub	sp, #16
     9fc:	af00      	add	r7, sp, #0
     9fe:	60f8      	str	r0, [r7, #12]
     a00:	460b      	mov	r3, r1
     a02:	607a      	str	r2, [r7, #4]
     a04:	72fb      	strb	r3, [r7, #11]
	
	task.id=newTask;
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	7afa      	ldrb	r2, [r7, #11]
     a0a:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
	task.prio=(uint8_t)newTask;
     a0e:	68fb      	ldr	r3, [r7, #12]
     a10:	7afa      	ldrb	r2, [r7, #11]
     a12:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
	AddTask(task);
     a16:	68fa      	ldr	r2, [r7, #12]
     a18:	68fb      	ldr	r3, [r7, #12]
     a1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
     a1e:	4619      	mov	r1, r3
     a20:	4610      	mov	r0, r2
     a22:	4b03      	ldr	r3, [pc, #12]	; (a30 <_ZN9ALU_Class14PrepareNewTaskE11ALUTaskEnumm+0x38>)
     a24:	4798      	blx	r3

}
     a26:	bf00      	nop
     a28:	3710      	adds	r7, #16
     a2a:	46bd      	mov	sp, r7
     a2c:	bd80      	pop	{r7, pc}
     a2e:	bf00      	nop
     a30:	00004079 	.word	0x00004079

00000a34 <_ZN9ALU_Class15PrepareNewEventEtt>:

void ALU_Class::PrepareNewEvent( uint16 newState, uint16 data)
{
     a34:	b580      	push	{r7, lr}
     a36:	b086      	sub	sp, #24
     a38:	af00      	add	r7, sp, #0
     a3a:	6078      	str	r0, [r7, #4]
     a3c:	460b      	mov	r3, r1
     a3e:	807b      	strh	r3, [r7, #2]
     a40:	4613      	mov	r3, r2
     a42:	803b      	strh	r3, [r7, #0]
	event	e;
     a44:	f107 0308 	add.w	r3, r7, #8
     a48:	4618      	mov	r0, r3
     a4a:	4b0a      	ldr	r3, [pc, #40]	; (a74 <_ZN9ALU_Class15PrepareNewEventEtt+0x40>)
     a4c:	4798      	blx	r3
	e.eventClass =(EventClass)kALUEventClass;
     a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
     a52:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kALUControllerEvent;
     a54:	2302      	movs	r3, #2
     a56:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
     a58:	887b      	ldrh	r3, [r7, #2]
     a5a:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
     a5c:	883b      	ldrh	r3, [r7, #0]
     a5e:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
     a60:	f107 0308 	add.w	r3, r7, #8
     a64:	4619      	mov	r1, r3
     a66:	4804      	ldr	r0, [pc, #16]	; (a78 <_ZN9ALU_Class15PrepareNewEventEtt+0x44>)
     a68:	4b04      	ldr	r3, [pc, #16]	; (a7c <_ZN9ALU_Class15PrepareNewEventEtt+0x48>)
     a6a:	4798      	blx	r3

}
     a6c:	bf00      	nop
     a6e:	3718      	adds	r7, #24
     a70:	46bd      	mov	sp, r7
     a72:	bd80      	pop	{r7, pc}
     a74:	000003c5 	.word	0x000003c5
     a78:	200099c8 	.word	0x200099c8
     a7c:	000145e1 	.word	0x000145e1

00000a80 <_ZN9ALU_Class18ExecutePendingTaskEv>:

bool	ALU_Class::ExecutePendingTask(void){
     a80:	b580      	push	{r7, lr}
     a82:	b088      	sub	sp, #32
     a84:	af00      	add	r7, sp, #0
     a86:	60f8      	str	r0, [r7, #12]
	allTasksDone=false;
     a88:	68fb      	ldr	r3, [r7, #12]
     a8a:	2200      	movs	r2, #0
     a8c:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
	list_element *it;
	ControllerTask tk;
	uint8_t		highPrio=kALUNumberTasks;
     a90:	230b      	movs	r3, #11
     a92:	77fb      	strb	r3, [r7, #31]
	tk=GetHighPrioTask();
     a94:	68fa      	ldr	r2, [r7, #12]
     a96:	463b      	mov	r3, r7
     a98:	4611      	mov	r1, r2
     a9a:	4618      	mov	r0, r3
     a9c:	4b24      	ldr	r3, [pc, #144]	; (b30 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb0>)
     a9e:	4798      	blx	r3
     aa0:	f107 0314 	add.w	r3, r7, #20
     aa4:	463a      	mov	r2, r7
     aa6:	e892 0003 	ldmia.w	r2, {r0, r1}
     aaa:	e883 0003 	stmia.w	r3, {r0, r1}
	if (tk.id!=kALUTaskArincTXMessage)
     aae:	7e3b      	ldrb	r3, [r7, #24]
     ab0:	2b02      	cmp	r3, #2
     ab2:	d004      	beq.n	abe <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	{
		PrepareNewTask(kALUTaskArincTXMessage);
     ab4:	2200      	movs	r2, #0
     ab6:	2102      	movs	r1, #2
     ab8:	68f8      	ldr	r0, [r7, #12]
     aba:	4b1e      	ldr	r3, [pc, #120]	; (b34 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb4>)
     abc:	4798      	blx	r3
	}
	while (taskList->head){
     abe:	68fb      	ldr	r3, [r7, #12]
     ac0:	681b      	ldr	r3, [r3, #0]
     ac2:	681b      	ldr	r3, [r3, #0]
     ac4:	2b00      	cmp	r3, #0
     ac6:	d01a      	beq.n	afe <_ZN9ALU_Class18ExecutePendingTaskEv+0x7e>
		tk=GetHighPrioTask();
     ac8:	68fa      	ldr	r2, [r7, #12]
     aca:	463b      	mov	r3, r7
     acc:	4611      	mov	r1, r2
     ace:	4618      	mov	r0, r3
     ad0:	4b17      	ldr	r3, [pc, #92]	; (b30 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb0>)
     ad2:	4798      	blx	r3
     ad4:	f107 0314 	add.w	r3, r7, #20
     ad8:	463a      	mov	r2, r7
     ada:	e892 0003 	ldmia.w	r2, {r0, r1}
     ade:	e883 0003 	stmia.w	r3, {r0, r1}
		HandleTasks(tk);
     ae2:	f107 0314 	add.w	r3, r7, #20
     ae6:	4619      	mov	r1, r3
     ae8:	68f8      	ldr	r0, [r7, #12]
     aea:	4b13      	ldr	r3, [pc, #76]	; (b38 <_ZN9ALU_Class18ExecutePendingTaskEv+0xb8>)
     aec:	4798      	blx	r3
		RemoveTask(tk);
     aee:	68fb      	ldr	r3, [r7, #12]
     af0:	f107 0214 	add.w	r2, r7, #20
     af4:	4611      	mov	r1, r2
     af6:	4618      	mov	r0, r3
     af8:	4b10      	ldr	r3, [pc, #64]	; (b3c <_ZN9ALU_Class18ExecutePendingTaskEv+0xbc>)
     afa:	4798      	blx	r3
	while (taskList->head){
     afc:	e7df      	b.n	abe <_ZN9ALU_Class18ExecutePendingTaskEv+0x3e>
	
	}
	RunPeriodicTasks();
     afe:	68f8      	ldr	r0, [r7, #12]
     b00:	4b0f      	ldr	r3, [pc, #60]	; (b40 <_ZN9ALU_Class18ExecutePendingTaskEv+0xc0>)
     b02:	4798      	blx	r3
	allTasksDone=~((bool)taskList->head);
     b04:	68fb      	ldr	r3, [r7, #12]
     b06:	2201      	movs	r2, #1
     b08:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
	if (allTasksDone)
     b0c:	68fb      	ldr	r3, [r7, #12]
     b0e:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
     b12:	2b00      	cmp	r3, #0
     b14:	d005      	beq.n	b22 <_ZN9ALU_Class18ExecutePendingTaskEv+0xa2>
	{
		
		PrepareNewEvent(kALUEventSimpleResume);
     b16:	2200      	movs	r2, #0
     b18:	f240 1107 	movw	r1, #263	; 0x107
     b1c:	68f8      	ldr	r0, [r7, #12]
     b1e:	4b09      	ldr	r3, [pc, #36]	; (b44 <_ZN9ALU_Class18ExecutePendingTaskEv+0xc4>)
     b20:	4798      	blx	r3
	}
	return allTasksDone; 
     b22:	68fb      	ldr	r3, [r7, #12]
     b24:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
}
     b28:	4618      	mov	r0, r3
     b2a:	3720      	adds	r7, #32
     b2c:	46bd      	mov	sp, r7
     b2e:	bd80      	pop	{r7, pc}
     b30:	000041fd 	.word	0x000041fd
     b34:	000009f9 	.word	0x000009f9
     b38:	00000b49 	.word	0x00000b49
     b3c:	00004169 	.word	0x00004169
     b40:	00000c31 	.word	0x00000c31
     b44:	00000a35 	.word	0x00000a35

00000b48 <_ZN9ALU_Class11HandleTasksER14ControllerTask>:
void ALU_Class::HandleTasks(ControllerTask& ct)
{
     b48:	b580      	push	{r7, lr}
     b4a:	b084      	sub	sp, #16
     b4c:	af00      	add	r7, sp, #0
     b4e:	6078      	str	r0, [r7, #4]
     b50:	6039      	str	r1, [r7, #0]

	taskEntryTime= hvacTimer.Get_ticks();
     b52:	4824      	ldr	r0, [pc, #144]	; (be4 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x9c>)
     b54:	4b24      	ldr	r3, [pc, #144]	; (be8 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa0>)
     b56:	4798      	blx	r3
     b58:	4602      	mov	r2, r0
     b5a:	687b      	ldr	r3, [r7, #4]
     b5c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	switch (ct.id)
     b60:	683b      	ldr	r3, [r7, #0]
     b62:	791b      	ldrb	r3, [r3, #4]
     b64:	3b02      	subs	r3, #2
     b66:	2b08      	cmp	r3, #8
     b68:	d832      	bhi.n	bd0 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x88>
     b6a:	a201      	add	r2, pc, #4	; (adr r2, b70 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x28>)
     b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     b70:	00000bc1 	.word	0x00000bc1
     b74:	00000ba9 	.word	0x00000ba9
     b78:	00000bb7 	.word	0x00000bb7
     b7c:	00000bd1 	.word	0x00000bd1
     b80:	00000bd1 	.word	0x00000bd1
     b84:	00000bd1 	.word	0x00000bd1
     b88:	00000b9f 	.word	0x00000b9f
     b8c:	00000b95 	.word	0x00000b95
     b90:	00000bc9 	.word	0x00000bc9
	{
		case kALUEventSimpleStart:
			hvac.Start(0);
		break;
		case kALUSimpleResume:
			hvac.ControllerResume(0);
     b94:	2100      	movs	r1, #0
     b96:	4815      	ldr	r0, [pc, #84]	; (bec <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa4>)
     b98:	4b15      	ldr	r3, [pc, #84]	; (bf0 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa8>)
     b9a:	4798      	blx	r3
		break;
     b9c:	e01d      	b.n	bda <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x92>
		case kALUSimpleStop:
			hvac.Stop(0);
     b9e:	2100      	movs	r1, #0
     ba0:	4812      	ldr	r0, [pc, #72]	; (bec <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa4>)
     ba2:	4b14      	ldr	r3, [pc, #80]	; (bf4 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xac>)
     ba4:	4798      	blx	r3
		break;
     ba6:	e018      	b.n	bda <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x92>
		case kALUTaskCheckCommunication:
			interfaces.CheckCommunication();
     ba8:	f107 0308 	add.w	r3, r7, #8
     bac:	4912      	ldr	r1, [pc, #72]	; (bf8 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb0>)
     bae:	4618      	mov	r0, r3
     bb0:	4b12      	ldr	r3, [pc, #72]	; (bfc <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb4>)
     bb2:	4798      	blx	r3
		break;
     bb4:	e011      	b.n	bda <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x92>
		case kALUTaskReadARINCR1:
			arinc.ReadRXBuffer(1);			
     bb6:	2101      	movs	r1, #1
     bb8:	4811      	ldr	r0, [pc, #68]	; (c00 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     bba:	4b12      	ldr	r3, [pc, #72]	; (c04 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xbc>)
     bbc:	4798      	blx	r3
		break;
     bbe:	e00c      	b.n	bda <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x92>
		case kALUTaskArincTXMessage:
			arinc.TransmitTXBuffer();
     bc0:	480f      	ldr	r0, [pc, #60]	; (c00 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     bc2:	4b11      	ldr	r3, [pc, #68]	; (c08 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc0>)
     bc4:	4798      	blx	r3
		break;
     bc6:	e008      	b.n	bda <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x92>
		case kALUTaskUpdateTemperatures:
			arinc.SaveTemperature();		
     bc8:	480d      	ldr	r0, [pc, #52]	; (c00 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xb8>)
     bca:	4b10      	ldr	r3, [pc, #64]	; (c0c <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xc4>)
     bcc:	4798      	blx	r3
		break;
     bce:	e004      	b.n	bda <_ZN9ALU_Class11HandleTasksER14ControllerTask+0x92>

		default:
		hvac.Stop(0);
     bd0:	2100      	movs	r1, #0
     bd2:	4806      	ldr	r0, [pc, #24]	; (bec <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xa4>)
     bd4:	4b07      	ldr	r3, [pc, #28]	; (bf4 <_ZN9ALU_Class11HandleTasksER14ControllerTask+0xac>)
     bd6:	4798      	blx	r3
		break;
     bd8:	bf00      	nop
	}
}
     bda:	bf00      	nop
     bdc:	3710      	adds	r7, #16
     bde:	46bd      	mov	sp, r7
     be0:	bd80      	pop	{r7, pc}
     be2:	bf00      	nop
     be4:	2000a200 	.word	0x2000a200
     be8:	00016f39 	.word	0x00016f39
     bec:	200081ac 	.word	0x200081ac
     bf0:	00002fad 	.word	0x00002fad
     bf4:	00003c4d 	.word	0x00003c4d
     bf8:	2000160c 	.word	0x2000160c
     bfc:	00001d19 	.word	0x00001d19
     c00:	20008ea4 	.word	0x20008ea4
     c04:	00013021 	.word	0x00013021
     c08:	00013421 	.word	0x00013421
     c0c:	00012575 	.word	0x00012575

00000c10 <_ZN9ALU_Class17CheckPeriodicTaskEv>:

void ALU_Class::CheckPeriodicTask(void){
     c10:	b580      	push	{r7, lr}
     c12:	b082      	sub	sp, #8
     c14:	af00      	add	r7, sp, #0
	interfaces.CheckCommunication();
     c16:	463b      	mov	r3, r7
     c18:	4903      	ldr	r1, [pc, #12]	; (c28 <_ZN9ALU_Class17CheckPeriodicTaskEv+0x18>)
     c1a:	4618      	mov	r0, r3
     c1c:	4b03      	ldr	r3, [pc, #12]	; (c2c <_ZN9ALU_Class17CheckPeriodicTaskEv+0x1c>)
     c1e:	4798      	blx	r3
}
     c20:	bf00      	nop
     c22:	3708      	adds	r7, #8
     c24:	46bd      	mov	sp, r7
     c26:	bd80      	pop	{r7, pc}
     c28:	2000160c 	.word	0x2000160c
     c2c:	00001d19 	.word	0x00001d19

00000c30 <_ZN9ALU_Class16RunPeriodicTasksEv>:

void	ALU_Class::RunPeriodicTasks(void){
     c30:	b580      	push	{r7, lr}
     c32:	b082      	sub	sp, #8
     c34:	af00      	add	r7, sp, #0
     c36:	6078      	str	r0, [r7, #4]
	FeedWatchDog();
     c38:	6878      	ldr	r0, [r7, #4]
     c3a:	4b03      	ldr	r3, [pc, #12]	; (c48 <_ZN9ALU_Class16RunPeriodicTasksEv+0x18>)
     c3c:	4798      	blx	r3
}
     c3e:	bf00      	nop
     c40:	3708      	adds	r7, #8
     c42:	46bd      	mov	sp, r7
     c44:	bd80      	pop	{r7, pc}
     c46:	bf00      	nop
     c48:	00000809 	.word	0x00000809

00000c4c <_ZlsIhER5PrintS1_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
     c4c:	b580      	push	{r7, lr}
     c4e:	b082      	sub	sp, #8
     c50:	af00      	add	r7, sp, #0
     c52:	6078      	str	r0, [r7, #4]
     c54:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     c56:	683b      	ldr	r3, [r7, #0]
     c58:	781b      	ldrb	r3, [r3, #0]
     c5a:	220a      	movs	r2, #10
     c5c:	4619      	mov	r1, r3
     c5e:	6878      	ldr	r0, [r7, #4]
     c60:	4b03      	ldr	r3, [pc, #12]	; (c70 <_ZlsIhER5PrintS1_RKT_+0x24>)
     c62:	4798      	blx	r3
     c64:	687b      	ldr	r3, [r7, #4]
     c66:	4618      	mov	r0, r3
     c68:	3708      	adds	r7, #8
     c6a:	46bd      	mov	sp, r7
     c6c:	bd80      	pop	{r7, pc}
     c6e:	bf00      	nop
     c70:	000177d5 	.word	0x000177d5

00000c74 <_ZlsIA3_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     c74:	b580      	push	{r7, lr}
     c76:	b082      	sub	sp, #8
     c78:	af00      	add	r7, sp, #0
     c7a:	6078      	str	r0, [r7, #4]
     c7c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     c7e:	6839      	ldr	r1, [r7, #0]
     c80:	6878      	ldr	r0, [r7, #4]
     c82:	4b03      	ldr	r3, [pc, #12]	; (c90 <_ZlsIA3_cER5PrintS2_RKT_+0x1c>)
     c84:	4798      	blx	r3
     c86:	687b      	ldr	r3, [r7, #4]
     c88:	4618      	mov	r0, r3
     c8a:	3708      	adds	r7, #8
     c8c:	46bd      	mov	sp, r7
     c8e:	bd80      	pop	{r7, pc}
     c90:	000177b5 	.word	0x000177b5

00000c94 <_ZlsIA30_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
     c94:	b580      	push	{r7, lr}
     c96:	b082      	sub	sp, #8
     c98:	af00      	add	r7, sp, #0
     c9a:	6078      	str	r0, [r7, #4]
     c9c:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
     c9e:	6839      	ldr	r1, [r7, #0]
     ca0:	6878      	ldr	r0, [r7, #4]
     ca2:	4b03      	ldr	r3, [pc, #12]	; (cb0 <_ZlsIA30_cER5PrintS2_RKT_+0x1c>)
     ca4:	4798      	blx	r3
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	4618      	mov	r0, r3
     caa:	3708      	adds	r7, #8
     cac:	46bd      	mov	sp, r7
     cae:	bd80      	pop	{r7, pc}
     cb0:	000177b5 	.word	0x000177b5

00000cb4 <_Z41__static_initialization_and_destruction_0ii>:




     cb4:	b580      	push	{r7, lr}
     cb6:	b082      	sub	sp, #8
     cb8:	af00      	add	r7, sp, #0
     cba:	6078      	str	r0, [r7, #4]
     cbc:	6039      	str	r1, [r7, #0]
     cbe:	687b      	ldr	r3, [r7, #4]
     cc0:	2b01      	cmp	r3, #1
     cc2:	d11c      	bne.n	cfe <_Z41__static_initialization_and_destruction_0ii+0x4a>
     cc4:	683b      	ldr	r3, [r7, #0]
     cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     cca:	4293      	cmp	r3, r2
     ccc:	d117      	bne.n	cfe <_Z41__static_initialization_and_destruction_0ii+0x4a>
	PBIT_Class( const PBIT_Class &c );
	PBIT_Class& operator=( const PBIT_Class &c );

}; //PBIT_Class

static	PBIT_Class	pBit;
     cce:	480e      	ldr	r0, [pc, #56]	; (d08 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     cd0:	4b0e      	ldr	r3, [pc, #56]	; (d0c <_Z41__static_initialization_and_destruction_0ii+0x58>)
     cd2:	4798      	blx	r3
     cd4:	4a0e      	ldr	r2, [pc, #56]	; (d10 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     cd6:	490f      	ldr	r1, [pc, #60]	; (d14 <_Z41__static_initialization_and_destruction_0ii+0x60>)
     cd8:	480b      	ldr	r0, [pc, #44]	; (d08 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     cda:	4b0f      	ldr	r3, [pc, #60]	; (d18 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     cdc:	4798      	blx	r3
	CBIT_Class( const CBIT_Class &c );
	CBIT_Class& operator=( const CBIT_Class &c );

}; //CBIT_Class

static	CBIT_Class	cBit;
     cde:	480f      	ldr	r0, [pc, #60]	; (d1c <_Z41__static_initialization_and_destruction_0ii+0x68>)
     ce0:	4b0f      	ldr	r3, [pc, #60]	; (d20 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     ce2:	4798      	blx	r3
     ce4:	4a0a      	ldr	r2, [pc, #40]	; (d10 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     ce6:	490f      	ldr	r1, [pc, #60]	; (d24 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     ce8:	480c      	ldr	r0, [pc, #48]	; (d1c <_Z41__static_initialization_and_destruction_0ii+0x68>)
     cea:	4b0b      	ldr	r3, [pc, #44]	; (d18 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     cec:	4798      	blx	r3
     cee:	480e      	ldr	r0, [pc, #56]	; (d28 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     cf0:	4b0e      	ldr	r3, [pc, #56]	; (d2c <_Z41__static_initialization_and_destruction_0ii+0x78>)
     cf2:	4798      	blx	r3
     cf4:	4a06      	ldr	r2, [pc, #24]	; (d10 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
     cf6:	490e      	ldr	r1, [pc, #56]	; (d30 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     cf8:	480b      	ldr	r0, [pc, #44]	; (d28 <_Z41__static_initialization_and_destruction_0ii+0x74>)
     cfa:	4b07      	ldr	r3, [pc, #28]	; (d18 <_Z41__static_initialization_and_destruction_0ii+0x64>)
     cfc:	4798      	blx	r3
     cfe:	bf00      	nop
     d00:	3708      	adds	r7, #8
     d02:	46bd      	mov	sp, r7
     d04:	bd80      	pop	{r7, pc}
     d06:	bf00      	nop
     d08:	20000c64 	.word	0x20000c64
     d0c:	00002be1 	.word	0x00002be1
     d10:	20000000 	.word	0x20000000
     d14:	00002bfb 	.word	0x00002bfb
     d18:	00018bf5 	.word	0x00018bf5
     d1c:	20000c78 	.word	0x20000c78
     d20:	00000f91 	.word	0x00000f91
     d24:	00000fab 	.word	0x00000fab
     d28:	20000c88 	.word	0x20000c88
     d2c:	00000425 	.word	0x00000425
     d30:	00000461 	.word	0x00000461

00000d34 <_GLOBAL__sub_I_ptrALUClass>:
     d34:	b580      	push	{r7, lr}
     d36:	af00      	add	r7, sp, #0
     d38:	f64f 71ff 	movw	r1, #65535	; 0xffff
     d3c:	2001      	movs	r0, #1
     d3e:	4b01      	ldr	r3, [pc, #4]	; (d44 <_GLOBAL__sub_I_ptrALUClass+0x10>)
     d40:	4798      	blx	r3
     d42:	bd80      	pop	{r7, pc}
     d44:	00000cb5 	.word	0x00000cb5

00000d48 <_ZN14Protocol_ClassC2Ev>:
uint32_t	rawWord;
}Datagram;



class Protocol_Class: private virtual ARINC_Conversions
     d48:	b480      	push	{r7}
     d4a:	b083      	sub	sp, #12
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
     d50:	6039      	str	r1, [r7, #0]
     d52:	683b      	ldr	r3, [r7, #0]
     d54:	681a      	ldr	r2, [r3, #0]
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	601a      	str	r2, [r3, #0]
     d5a:	687b      	ldr	r3, [r7, #4]
     d5c:	681b      	ldr	r3, [r3, #0]
     d5e:	3b0c      	subs	r3, #12
     d60:	681b      	ldr	r3, [r3, #0]
     d62:	461a      	mov	r2, r3
     d64:	687b      	ldr	r3, [r7, #4]
     d66:	4413      	add	r3, r2
     d68:	683a      	ldr	r2, [r7, #0]
     d6a:	6852      	ldr	r2, [r2, #4]
     d6c:	601a      	str	r2, [r3, #0]
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	4618      	mov	r0, r3
     d72:	370c      	adds	r7, #12
     d74:	46bd      	mov	sp, r7
     d76:	bc80      	pop	{r7}
     d78:	4770      	bx	lr
	...

00000d7c <_ZN10AMMC_ClassC1Ev>:


#include "AMMC_Class.h"

// default constructor
AMMC_Class::AMMC_Class()
     d7c:	b580      	push	{r7, lr}
     d7e:	b082      	sub	sp, #8
     d80:	af00      	add	r7, sp, #0
     d82:	6078      	str	r0, [r7, #4]
     d84:	687b      	ldr	r3, [r7, #4]
     d86:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
     d8a:	4618      	mov	r0, r3
     d8c:	4b10      	ldr	r3, [pc, #64]	; (dd0 <_ZN10AMMC_ClassC1Ev+0x54>)
     d8e:	4798      	blx	r3
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
     d96:	4a0f      	ldr	r2, [pc, #60]	; (dd4 <_ZN10AMMC_ClassC1Ev+0x58>)
     d98:	4611      	mov	r1, r2
     d9a:	4618      	mov	r0, r3
     d9c:	4b0e      	ldr	r3, [pc, #56]	; (dd8 <_ZN10AMMC_ClassC1Ev+0x5c>)
     d9e:	4798      	blx	r3
     da0:	687b      	ldr	r3, [r7, #4]
     da2:	4a0e      	ldr	r2, [pc, #56]	; (ddc <_ZN10AMMC_ClassC1Ev+0x60>)
     da4:	4611      	mov	r1, r2
     da6:	4618      	mov	r0, r3
     da8:	4b0d      	ldr	r3, [pc, #52]	; (de0 <_ZN10AMMC_ClassC1Ev+0x64>)
     daa:	4798      	blx	r3
     dac:	4a0d      	ldr	r2, [pc, #52]	; (de4 <_ZN10AMMC_ClassC1Ev+0x68>)
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	601a      	str	r2, [r3, #0]
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
     db8:	4a0b      	ldr	r2, [pc, #44]	; (de8 <_ZN10AMMC_ClassC1Ev+0x6c>)
     dba:	601a      	str	r2, [r3, #0]
     dbc:	687b      	ldr	r3, [r7, #4]
     dbe:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
     dc2:	4a0a      	ldr	r2, [pc, #40]	; (dec <_ZN10AMMC_ClassC1Ev+0x70>)
     dc4:	601a      	str	r2, [r3, #0]
{
} //AMMC_Class
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	4618      	mov	r0, r3
     dca:	3708      	adds	r7, #8
     dcc:	46bd      	mov	sp, r7
     dce:	bd80      	pop	{r7, pc}
     dd0:	00012781 	.word	0x00012781
     dd4:	0001f074 	.word	0x0001f074
     dd8:	00000d49 	.word	0x00000d49
     ddc:	0001f054 	.word	0x0001f054
     de0:	00012c31 	.word	0x00012c31
     de4:	0001f00c 	.word	0x0001f00c
     de8:	0001f028 	.word	0x0001f028
     dec:	0001f044 	.word	0x0001f044

00000df0 <_ZN10AMMC_ClassD1Ev>:

// default destructor
AMMC_Class::~AMMC_Class()
     df0:	b580      	push	{r7, lr}
     df2:	b082      	sub	sp, #8
     df4:	af00      	add	r7, sp, #0
     df6:	6078      	str	r0, [r7, #4]
     df8:	4a12      	ldr	r2, [pc, #72]	; (e44 <_ZN10AMMC_ClassD1Ev+0x54>)
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	601a      	str	r2, [r3, #0]
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
     e04:	4a10      	ldr	r2, [pc, #64]	; (e48 <_ZN10AMMC_ClassD1Ev+0x58>)
     e06:	601a      	str	r2, [r3, #0]
     e08:	687b      	ldr	r3, [r7, #4]
     e0a:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
     e0e:	4a0f      	ldr	r2, [pc, #60]	; (e4c <_ZN10AMMC_ClassD1Ev+0x5c>)
     e10:	601a      	str	r2, [r3, #0]
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	4a0e      	ldr	r2, [pc, #56]	; (e50 <_ZN10AMMC_ClassD1Ev+0x60>)
     e16:	4611      	mov	r1, r2
     e18:	4618      	mov	r0, r3
     e1a:	4b0e      	ldr	r3, [pc, #56]	; (e54 <_ZN10AMMC_ClassD1Ev+0x64>)
     e1c:	4798      	blx	r3
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
     e24:	4a0c      	ldr	r2, [pc, #48]	; (e58 <_ZN10AMMC_ClassD1Ev+0x68>)
     e26:	4611      	mov	r1, r2
     e28:	4618      	mov	r0, r3
     e2a:	4b0c      	ldr	r3, [pc, #48]	; (e5c <_ZN10AMMC_ClassD1Ev+0x6c>)
     e2c:	4798      	blx	r3
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
     e34:	4618      	mov	r0, r3
     e36:	4b0a      	ldr	r3, [pc, #40]	; (e60 <_ZN10AMMC_ClassD1Ev+0x70>)
     e38:	4798      	blx	r3
{
} //~AMMC_Class
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	4618      	mov	r0, r3
     e3e:	3708      	adds	r7, #8
     e40:	46bd      	mov	sp, r7
     e42:	bd80      	pop	{r7, pc}
     e44:	0001f00c 	.word	0x0001f00c
     e48:	0001f028 	.word	0x0001f028
     e4c:	0001f044 	.word	0x0001f044
     e50:	0001f054 	.word	0x0001f054
     e54:	00012d31 	.word	0x00012d31
     e58:	0001f074 	.word	0x0001f074
     e5c:	00013d91 	.word	0x00013d91
     e60:	000127a1 	.word	0x000127a1

00000e64 <_ZTv0_n16_N10AMMC_ClassD1Ev>:
     e64:	b580      	push	{r7, lr}
     e66:	b082      	sub	sp, #8
     e68:	af00      	add	r7, sp, #0
     e6a:	6078      	str	r0, [r7, #4]
     e6c:	687b      	ldr	r3, [r7, #4]
     e6e:	681b      	ldr	r3, [r3, #0]
     e70:	3b10      	subs	r3, #16
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	461a      	mov	r2, r3
     e76:	687b      	ldr	r3, [r7, #4]
     e78:	4413      	add	r3, r2
     e7a:	4618      	mov	r0, r3
     e7c:	4b03      	ldr	r3, [pc, #12]	; (e8c <_ZTv0_n16_N10AMMC_ClassD1Ev+0x28>)
     e7e:	4798      	blx	r3
     e80:	4603      	mov	r3, r0
     e82:	4618      	mov	r0, r3
     e84:	3708      	adds	r7, #8
     e86:	46bd      	mov	sp, r7
     e88:	bd80      	pop	{r7, pc}
     e8a:	bf00      	nop
     e8c:	00000df1 	.word	0x00000df1

00000e90 <_ZN10AMMC_ClassD0Ev>:
AMMC_Class::~AMMC_Class()
     e90:	b580      	push	{r7, lr}
     e92:	b082      	sub	sp, #8
     e94:	af00      	add	r7, sp, #0
     e96:	6078      	str	r0, [r7, #4]
} //~AMMC_Class
     e98:	6878      	ldr	r0, [r7, #4]
     e9a:	4b06      	ldr	r3, [pc, #24]	; (eb4 <_ZN10AMMC_ClassD0Ev+0x24>)
     e9c:	4798      	blx	r3
     e9e:	f44f 713a 	mov.w	r1, #744	; 0x2e8
     ea2:	6878      	ldr	r0, [r7, #4]
     ea4:	4b04      	ldr	r3, [pc, #16]	; (eb8 <_ZN10AMMC_ClassD0Ev+0x28>)
     ea6:	4798      	blx	r3
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	4618      	mov	r0, r3
     eac:	3708      	adds	r7, #8
     eae:	46bd      	mov	sp, r7
     eb0:	bd80      	pop	{r7, pc}
     eb2:	bf00      	nop
     eb4:	00000df1 	.word	0x00000df1
     eb8:	00018c01 	.word	0x00018c01

00000ebc <_ZTv0_n16_N10AMMC_ClassD0Ev>:
     ebc:	b580      	push	{r7, lr}
     ebe:	b082      	sub	sp, #8
     ec0:	af00      	add	r7, sp, #0
     ec2:	6078      	str	r0, [r7, #4]
     ec4:	687b      	ldr	r3, [r7, #4]
     ec6:	681b      	ldr	r3, [r3, #0]
     ec8:	3b10      	subs	r3, #16
     eca:	681b      	ldr	r3, [r3, #0]
     ecc:	461a      	mov	r2, r3
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	4413      	add	r3, r2
     ed2:	4618      	mov	r0, r3
     ed4:	4b03      	ldr	r3, [pc, #12]	; (ee4 <_ZTv0_n16_N10AMMC_ClassD0Ev+0x28>)
     ed6:	4798      	blx	r3
     ed8:	4603      	mov	r3, r0
     eda:	4618      	mov	r0, r3
     edc:	3708      	adds	r7, #8
     ede:	46bd      	mov	sp, r7
     ee0:	bd80      	pop	{r7, pc}
     ee2:	bf00      	nop
     ee4:	00000e91 	.word	0x00000e91

00000ee8 <_Z41__static_initialization_and_destruction_0ii>:
	return	selected;
}

AMMC_Class	ammc1;
AMMC_Class	ammc2;
     ee8:	b580      	push	{r7, lr}
     eea:	b082      	sub	sp, #8
     eec:	af00      	add	r7, sp, #0
     eee:	6078      	str	r0, [r7, #4]
     ef0:	6039      	str	r1, [r7, #0]
     ef2:	687b      	ldr	r3, [r7, #4]
     ef4:	2b01      	cmp	r3, #1
     ef6:	d124      	bne.n	f42 <_Z41__static_initialization_and_destruction_0ii+0x5a>
     ef8:	683b      	ldr	r3, [r7, #0]
     efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
     efe:	4293      	cmp	r3, r2
     f00:	d11f      	bne.n	f42 <_Z41__static_initialization_and_destruction_0ii+0x5a>
     f02:	4812      	ldr	r0, [pc, #72]	; (f4c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     f04:	4b12      	ldr	r3, [pc, #72]	; (f50 <_Z41__static_initialization_and_destruction_0ii+0x68>)
     f06:	4798      	blx	r3
     f08:	4a12      	ldr	r2, [pc, #72]	; (f54 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f0a:	4913      	ldr	r1, [pc, #76]	; (f58 <_Z41__static_initialization_and_destruction_0ii+0x70>)
     f0c:	480f      	ldr	r0, [pc, #60]	; (f4c <_Z41__static_initialization_and_destruction_0ii+0x64>)
     f0e:	4b13      	ldr	r3, [pc, #76]	; (f5c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f10:	4798      	blx	r3
     f12:	4813      	ldr	r0, [pc, #76]	; (f60 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     f14:	4b13      	ldr	r3, [pc, #76]	; (f64 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
     f16:	4798      	blx	r3
     f18:	4a0e      	ldr	r2, [pc, #56]	; (f54 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f1a:	4913      	ldr	r1, [pc, #76]	; (f68 <_Z41__static_initialization_and_destruction_0ii+0x80>)
     f1c:	4810      	ldr	r0, [pc, #64]	; (f60 <_Z41__static_initialization_and_destruction_0ii+0x78>)
     f1e:	4b0f      	ldr	r3, [pc, #60]	; (f5c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f20:	4798      	blx	r3
AMMC_Class	ammc1;
     f22:	4812      	ldr	r0, [pc, #72]	; (f6c <_Z41__static_initialization_and_destruction_0ii+0x84>)
     f24:	4b12      	ldr	r3, [pc, #72]	; (f70 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     f26:	4798      	blx	r3
     f28:	4a0a      	ldr	r2, [pc, #40]	; (f54 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f2a:	4912      	ldr	r1, [pc, #72]	; (f74 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     f2c:	480f      	ldr	r0, [pc, #60]	; (f6c <_Z41__static_initialization_and_destruction_0ii+0x84>)
     f2e:	4b0b      	ldr	r3, [pc, #44]	; (f5c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f30:	4798      	blx	r3
AMMC_Class	ammc2;
     f32:	4811      	ldr	r0, [pc, #68]	; (f78 <_Z41__static_initialization_and_destruction_0ii+0x90>)
     f34:	4b0e      	ldr	r3, [pc, #56]	; (f70 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     f36:	4798      	blx	r3
     f38:	4a06      	ldr	r2, [pc, #24]	; (f54 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
     f3a:	490e      	ldr	r1, [pc, #56]	; (f74 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     f3c:	480e      	ldr	r0, [pc, #56]	; (f78 <_Z41__static_initialization_and_destruction_0ii+0x90>)
     f3e:	4b07      	ldr	r3, [pc, #28]	; (f5c <_Z41__static_initialization_and_destruction_0ii+0x74>)
     f40:	4798      	blx	r3
     f42:	bf00      	nop
     f44:	3708      	adds	r7, #8
     f46:	46bd      	mov	sp, r7
     f48:	bd80      	pop	{r7, pc}
     f4a:	bf00      	nop
     f4c:	20000e04 	.word	0x20000e04
     f50:	00002be1 	.word	0x00002be1
     f54:	20000000 	.word	0x20000000
     f58:	00002bfb 	.word	0x00002bfb
     f5c:	00018bf5 	.word	0x00018bf5
     f60:	20000e18 	.word	0x20000e18
     f64:	00000f91 	.word	0x00000f91
     f68:	00000fab 	.word	0x00000fab
     f6c:	20000e24 	.word	0x20000e24
     f70:	00000d7d 	.word	0x00000d7d
     f74:	00000df1 	.word	0x00000df1
     f78:	2000110c 	.word	0x2000110c

00000f7c <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev>:
     f7c:	b580      	push	{r7, lr}
     f7e:	af00      	add	r7, sp, #0
     f80:	f64f 71ff 	movw	r1, #65535	; 0xffff
     f84:	2001      	movs	r0, #1
     f86:	4b01      	ldr	r3, [pc, #4]	; (f8c <_GLOBAL__sub_I__ZN10AMMC_ClassC2Ev+0x10>)
     f88:	4798      	blx	r3
     f8a:	bd80      	pop	{r7, pc}
     f8c:	00000ee9 	.word	0x00000ee9

00000f90 <_ZN10CBIT_ClassC1Ev>:


#include "CBIT_Class.h"

// default constructor
CBIT_Class::CBIT_Class()
     f90:	b480      	push	{r7}
     f92:	b083      	sub	sp, #12
     f94:	af00      	add	r7, sp, #0
     f96:	6078      	str	r0, [r7, #4]
{
	isOK=true;
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	2201      	movs	r2, #1
     f9c:	701a      	strb	r2, [r3, #0]
} //CBIT_Class
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	4618      	mov	r0, r3
     fa2:	370c      	adds	r7, #12
     fa4:	46bd      	mov	sp, r7
     fa6:	bc80      	pop	{r7}
     fa8:	4770      	bx	lr

00000faa <_ZN10CBIT_ClassD1Ev>:

// default destructor
CBIT_Class::~CBIT_Class()
     faa:	b480      	push	{r7}
     fac:	b083      	sub	sp, #12
     fae:	af00      	add	r7, sp, #0
     fb0:	6078      	str	r0, [r7, #4]
{
} //~CBIT_Class
     fb2:	687b      	ldr	r3, [r7, #4]
     fb4:	4618      	mov	r0, r3
     fb6:	370c      	adds	r7, #12
     fb8:	46bd      	mov	sp, r7
     fba:	bc80      	pop	{r7}
     fbc:	4770      	bx	lr

00000fbe <_ZN10CBIT_Class4IsOKEv>:

bool	CBIT_Class::IsOK(void){
     fbe:	b480      	push	{r7}
     fc0:	b083      	sub	sp, #12
     fc2:	af00      	add	r7, sp, #0
     fc4:	6078      	str	r0, [r7, #4]
	return	isOK;
     fc6:	687b      	ldr	r3, [r7, #4]
     fc8:	781b      	ldrb	r3, [r3, #0]
     fca:	b2db      	uxtb	r3, r3
}
     fcc:	4618      	mov	r0, r3
     fce:	370c      	adds	r7, #12
     fd0:	46bd      	mov	sp, r7
     fd2:	bc80      	pop	{r7}
     fd4:	4770      	bx	lr
	...

00000fd8 <_Z41__static_initialization_and_destruction_0ii>:
CBIT_Class::operator bool(){
	return	isOK;
}
     fd8:	b580      	push	{r7, lr}
     fda:	b082      	sub	sp, #8
     fdc:	af00      	add	r7, sp, #0
     fde:	6078      	str	r0, [r7, #4]
     fe0:	6039      	str	r1, [r7, #0]
     fe2:	687b      	ldr	r3, [r7, #4]
     fe4:	2b01      	cmp	r3, #1
     fe6:	d10c      	bne.n	1002 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     fe8:	683b      	ldr	r3, [r7, #0]
     fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
     fee:	4293      	cmp	r3, r2
     ff0:	d107      	bne.n	1002 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     ff2:	4806      	ldr	r0, [pc, #24]	; (100c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     ff4:	4b06      	ldr	r3, [pc, #24]	; (1010 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     ff6:	4798      	blx	r3
     ff8:	4a06      	ldr	r2, [pc, #24]	; (1014 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     ffa:	4907      	ldr	r1, [pc, #28]	; (1018 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     ffc:	4803      	ldr	r0, [pc, #12]	; (100c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     ffe:	4b07      	ldr	r3, [pc, #28]	; (101c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    1000:	4798      	blx	r3
    1002:	bf00      	nop
    1004:	3708      	adds	r7, #8
    1006:	46bd      	mov	sp, r7
    1008:	bd80      	pop	{r7, pc}
    100a:	bf00      	nop
    100c:	200013f8 	.word	0x200013f8
    1010:	00000f91 	.word	0x00000f91
    1014:	20000000 	.word	0x20000000
    1018:	00000fab 	.word	0x00000fab
    101c:	00018bf5 	.word	0x00018bf5

00001020 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev>:
    1020:	b580      	push	{r7, lr}
    1022:	af00      	add	r7, sp, #0
    1024:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1028:	2001      	movs	r0, #1
    102a:	4b01      	ldr	r3, [pc, #4]	; (1030 <_GLOBAL__sub_I__ZN10CBIT_ClassC2Ev+0x10>)
    102c:	4798      	blx	r3
    102e:	bd80      	pop	{r7, pc}
    1030:	00000fd9 	.word	0x00000fd9

00001034 <_ZN17ConfigState_ClassC1Ev>:

} ;


// default constructor
ConfigState_Class::ConfigState_Class()
    1034:	b480      	push	{r7}
    1036:	b083      	sub	sp, #12
    1038:	af00      	add	r7, sp, #0
    103a:	6078      	str	r0, [r7, #4]
    103c:	4a13      	ldr	r2, [pc, #76]	; (108c <_ZN17ConfigState_ClassC1Ev+0x58>)
    103e:	687b      	ldr	r3, [r7, #4]
    1040:	601a      	str	r2, [r3, #0]
{
	defaultState.currentState = kHVACStateReset;
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	f240 122d 	movw	r2, #301	; 0x12d
    1048:	631a      	str	r2, [r3, #48]	; 0x30
	defaultState.callingState = kHVACStateReset;
    104a:	687b      	ldr	r3, [r7, #4]
    104c:	f240 122d 	movw	r2, #301	; 0x12d
    1050:	635a      	str	r2, [r3, #52]	; 0x34
	defaultState.internalCateringState = 0;
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	2200      	movs	r2, #0
    1056:	639a      	str	r2, [r3, #56]	; 0x38
	//defaultState.targetUDC = 0.0;
	defaultState.cycleDuration = 0;
    1058:	687b      	ldr	r3, [r7, #4]
    105a:	2200      	movs	r2, #0
    105c:	64da      	str	r2, [r3, #76]	; 0x4c
	defaultState.inStateTime = 0;
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	2200      	movs	r2, #0
    1062:	645a      	str	r2, [r3, #68]	; 0x44
	defaultState.remainingTime = 0;
    1064:	687b      	ldr	r3, [r7, #4]
    1066:	2200      	movs	r2, #0
    1068:	651a      	str	r2, [r3, #80]	; 0x50
	defaultState.waitingExceededTime = 0;
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	2200      	movs	r2, #0
    106e:	659a      	str	r2, [r3, #88]	; 0x58
	defaultState.fansOnAfterCateringCycleTime = forever;
    1070:	4b07      	ldr	r3, [pc, #28]	; (1090 <_ZN17ConfigState_ClassC1Ev+0x5c>)
    1072:	681a      	ldr	r2, [r3, #0]
    1074:	687b      	ldr	r3, [r7, #4]
    1076:	65da      	str	r2, [r3, #92]	; 0x5c
	defaultState.magic=0xCAFEBABE;
    1078:	687b      	ldr	r3, [r7, #4]
    107a:	4a06      	ldr	r2, [pc, #24]	; (1094 <_ZN17ConfigState_ClassC1Ev+0x60>)
    107c:	605a      	str	r2, [r3, #4]
} //ConfigState_Class
    107e:	687b      	ldr	r3, [r7, #4]
    1080:	4618      	mov	r0, r3
    1082:	370c      	adds	r7, #12
    1084:	46bd      	mov	sp, r7
    1086:	bc80      	pop	{r7}
    1088:	4770      	bx	lr
    108a:	bf00      	nop
    108c:	0001f564 	.word	0x0001f564
    1090:	00020e44 	.word	0x00020e44
    1094:	cafebabe 	.word	0xcafebabe

00001098 <_ZN17ConfigState_ClassD1Ev>:

// default destructor
ConfigState_Class::~ConfigState_Class()
    1098:	b480      	push	{r7}
    109a:	b083      	sub	sp, #12
    109c:	af00      	add	r7, sp, #0
    109e:	6078      	str	r0, [r7, #4]
    10a0:	4a04      	ldr	r2, [pc, #16]	; (10b4 <_ZN17ConfigState_ClassD1Ev+0x1c>)
    10a2:	687b      	ldr	r3, [r7, #4]
    10a4:	601a      	str	r2, [r3, #0]
{
} //~ConfigState_Class
    10a6:	687b      	ldr	r3, [r7, #4]
    10a8:	4618      	mov	r0, r3
    10aa:	370c      	adds	r7, #12
    10ac:	46bd      	mov	sp, r7
    10ae:	bc80      	pop	{r7}
    10b0:	4770      	bx	lr
    10b2:	bf00      	nop
    10b4:	0001f564 	.word	0x0001f564

000010b8 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb>:

void ConfigState_Class::SetFactoryDefaults(uint32_t subPartNumber, bool config, bool cycles)
{
    10b8:	b580      	push	{r7, lr}
    10ba:	b084      	sub	sp, #16
    10bc:	af00      	add	r7, sp, #0
    10be:	60f8      	str	r0, [r7, #12]
    10c0:	60b9      	str	r1, [r7, #8]
    10c2:	4611      	mov	r1, r2
    10c4:	461a      	mov	r2, r3
    10c6:	460b      	mov	r3, r1
    10c8:	71fb      	strb	r3, [r7, #7]
    10ca:	4613      	mov	r3, r2
    10cc:	71bb      	strb	r3, [r7, #6]
	
	if (config)
    10ce:	79fb      	ldrb	r3, [r7, #7]
    10d0:	2b00      	cmp	r3, #0
    10d2:	d010      	beq.n	10f6 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x3e>
	{
		memcpy(&configuration, &factoryDefaultsConfiguration, sizeof(configuration));
    10d4:	68fb      	ldr	r3, [r7, #12]
    10d6:	3374      	adds	r3, #116	; 0x74
    10d8:	22ac      	movs	r2, #172	; 0xac
    10da:	4909      	ldr	r1, [pc, #36]	; (1100 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x48>)
    10dc:	4618      	mov	r0, r3
    10de:	4b09      	ldr	r3, [pc, #36]	; (1104 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x4c>)
    10e0:	4798      	blx	r3
		configuration.commons.subPartNumber = subPartNumber;
    10e2:	68fb      	ldr	r3, [r7, #12]
    10e4:	68ba      	ldr	r2, [r7, #8]
    10e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		memory.writeConfigurationDataArea(configuration);
    10ea:	68fb      	ldr	r3, [r7, #12]
    10ec:	3374      	adds	r3, #116	; 0x74
    10ee:	4619      	mov	r1, r3
    10f0:	4805      	ldr	r0, [pc, #20]	; (1108 <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x50>)
    10f2:	4b06      	ldr	r3, [pc, #24]	; (110c <_ZN17ConfigState_Class18SetFactoryDefaultsEmbb+0x54>)
    10f4:	4798      	blx	r3
	}
	
	
}
    10f6:	bf00      	nop
    10f8:	3710      	adds	r7, #16
    10fa:	46bd      	mov	sp, r7
    10fc:	bd80      	pop	{r7, pc}
    10fe:	bf00      	nop
    1100:	0001f150 	.word	0x0001f150
    1104:	0001b35d 	.word	0x0001b35d
    1108:	20002ba8 	.word	0x20002ba8
    110c:	00002d0d 	.word	0x00002d0d

00001110 <_ZN17ConfigState_Class15SetInitialStateEv>:


uint32_t ConfigState_Class::SetInitialState(){
    1110:	b580      	push	{r7, lr}
    1112:	b084      	sub	sp, #16
    1114:	af00      	add	r7, sp, #0
    1116:	6078      	str	r0, [r7, #4]
		uint32_t	r;
		r=memory.ReadApplicationState(lastHVACState);
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
    111e:	4619      	mov	r1, r3
    1120:	4823      	ldr	r0, [pc, #140]	; (11b0 <_ZN17ConfigState_Class15SetInitialStateEv+0xa0>)
    1122:	4b24      	ldr	r3, [pc, #144]	; (11b4 <_ZN17ConfigState_Class15SetInitialStateEv+0xa4>)
    1124:	4798      	blx	r3
    1126:	60f8      	str	r0, [r7, #12]
		if (memory.IsStateDataValid(lastHVACState))
    1128:	687b      	ldr	r3, [r7, #4]
    112a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
    112e:	4619      	mov	r1, r3
    1130:	4821      	ldr	r0, [pc, #132]	; (11b8 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
    1132:	4b22      	ldr	r3, [pc, #136]	; (11bc <_ZN17ConfigState_Class15SetInitialStateEv+0xac>)
    1134:	4798      	blx	r3
    1136:	4603      	mov	r3, r0
    1138:	2b00      	cmp	r3, #0
    113a:	d007      	beq.n	114c <_ZN17ConfigState_Class15SetInitialStateEv+0x3c>
		{
				hvac.SetCurrentState(lastHVACState);
    113c:	687b      	ldr	r3, [r7, #4]
    113e:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
    1142:	4619      	mov	r1, r3
    1144:	481e      	ldr	r0, [pc, #120]	; (11c0 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
    1146:	4b1f      	ldr	r3, [pc, #124]	; (11c4 <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
    1148:	4798      	blx	r3
    114a:	e02b      	b.n	11a4 <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
		} 
		else
		{	
			r=memory.ReadFastApplicationState(lastHVACState);
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
    1152:	4619      	mov	r1, r3
    1154:	481c      	ldr	r0, [pc, #112]	; (11c8 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
    1156:	4b1d      	ldr	r3, [pc, #116]	; (11cc <_ZN17ConfigState_Class15SetInitialStateEv+0xbc>)
    1158:	4798      	blx	r3
    115a:	60f8      	str	r0, [r7, #12]
			if (memory.IsFastStateDataValid(lastHVACState))
    115c:	687b      	ldr	r3, [r7, #4]
    115e:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
    1162:	4619      	mov	r1, r3
    1164:	4814      	ldr	r0, [pc, #80]	; (11b8 <_ZN17ConfigState_Class15SetInitialStateEv+0xa8>)
    1166:	4b1a      	ldr	r3, [pc, #104]	; (11d0 <_ZN17ConfigState_Class15SetInitialStateEv+0xc0>)
    1168:	4798      	blx	r3
    116a:	4603      	mov	r3, r0
    116c:	2b00      	cmp	r3, #0
    116e:	d00e      	beq.n	118e <_ZN17ConfigState_Class15SetInitialStateEv+0x7e>
			{
				hvac.SetCurrentState(lastHVACState);
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
    1176:	4619      	mov	r1, r3
    1178:	4811      	ldr	r0, [pc, #68]	; (11c0 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
    117a:	4b12      	ldr	r3, [pc, #72]	; (11c4 <_ZN17ConfigState_Class15SetInitialStateEv+0xb4>)
    117c:	4798      	blx	r3
				memory.SaveApplicationState(lastHVACState);
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
    1184:	4619      	mov	r1, r3
    1186:	4813      	ldr	r0, [pc, #76]	; (11d4 <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
    1188:	4b13      	ldr	r3, [pc, #76]	; (11d8 <_ZN17ConfigState_Class15SetInitialStateEv+0xc8>)
    118a:	4798      	blx	r3
    118c:	e00a      	b.n	11a4 <_ZN17ConfigState_Class15SetInitialStateEv+0x94>
			} 
			else
			{
				hvac.SetDefaultState();
    118e:	480c      	ldr	r0, [pc, #48]	; (11c0 <_ZN17ConfigState_Class15SetInitialStateEv+0xb0>)
    1190:	4b12      	ldr	r3, [pc, #72]	; (11dc <_ZN17ConfigState_Class15SetInitialStateEv+0xcc>)
    1192:	4798      	blx	r3
				memory.WriteValidApplicationState(hvac.defaultState);
    1194:	4912      	ldr	r1, [pc, #72]	; (11e0 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
    1196:	480f      	ldr	r0, [pc, #60]	; (11d4 <_ZN17ConfigState_Class15SetInitialStateEv+0xc4>)
    1198:	4b12      	ldr	r3, [pc, #72]	; (11e4 <_ZN17ConfigState_Class15SetInitialStateEv+0xd4>)
    119a:	4798      	blx	r3
				memory.WriteFastCurrentState(hvac.defaultState);
    119c:	4910      	ldr	r1, [pc, #64]	; (11e0 <_ZN17ConfigState_Class15SetInitialStateEv+0xd0>)
    119e:	480a      	ldr	r0, [pc, #40]	; (11c8 <_ZN17ConfigState_Class15SetInitialStateEv+0xb8>)
    11a0:	4b11      	ldr	r3, [pc, #68]	; (11e8 <_ZN17ConfigState_Class15SetInitialStateEv+0xd8>)
    11a2:	4798      	blx	r3
			}
					
		
		}

		return r;
    11a4:	68fb      	ldr	r3, [r7, #12]
	};
    11a6:	4618      	mov	r0, r3
    11a8:	3710      	adds	r7, #16
    11aa:	46bd      	mov	sp, r7
    11ac:	bd80      	pop	{r7, pc}
    11ae:	bf00      	nop
    11b0:	20002d4c 	.word	0x20002d4c
    11b4:	00002b4d 	.word	0x00002b4d
    11b8:	20002ba8 	.word	0x20002ba8
    11bc:	00002db9 	.word	0x00002db9
    11c0:	200081ac 	.word	0x200081ac
    11c4:	00003cf1 	.word	0x00003cf1
    11c8:	20002d3c 	.word	0x20002d3c
    11cc:	000017d5 	.word	0x000017d5
    11d0:	00002dfd 	.word	0x00002dfd
    11d4:	200026bc 	.word	0x200026bc
    11d8:	000026e9 	.word	0x000026e9
    11dc:	00001399 	.word	0x00001399
    11e0:	200081b0 	.word	0x200081b0
    11e4:	000025fd 	.word	0x000025fd
    11e8:	0000185d 	.word	0x0000185d

000011ec <_ZN17ConfigState_Class23ConvertStatusArincLabelEv>:
	
uint32_t	ConfigState_Class::ConvertStatusArincLabel(void){
    11ec:	b480      	push	{r7}
    11ee:	b085      	sub	sp, #20
    11f0:	af00      	add	r7, sp, #0
    11f2:	6078      	str	r0, [r7, #4]
	uint32_t s=0;
    11f4:	2300      	movs	r3, #0
    11f6:	60fb      	str	r3, [r7, #12]
	AcknoledgeStatus as=hvac.hvacState->arincStatus;
    11f8:	4b14      	ldr	r3, [pc, #80]	; (124c <_ZN17ConfigState_Class23ConvertStatusArincLabelEv+0x60>)
    11fa:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    11fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1200:	60bb      	str	r3, [r7, #8]
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    1202:	7a3b      	ldrb	r3, [r7, #8]
    1204:	461a      	mov	r2, r3
    1206:	7a7b      	ldrb	r3, [r7, #9]
    1208:	f3c3 0300 	ubfx	r3, r3, #0, #1
    120c:	b2db      	uxtb	r3, r3
    120e:	009b      	lsls	r3, r3, #2
    1210:	431a      	orrs	r2, r3
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
    1212:	7a7b      	ldrb	r3, [r7, #9]
    1214:	f3c3 0340 	ubfx	r3, r3, #1, #1
    1218:	b2db      	uxtb	r3, r3
    121a:	00db      	lsls	r3, r3, #3
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    121c:	431a      	orrs	r2, r3
	(((uint32_t)as.PLT_AUTO_FAN)<<3)|(((uint32_t)as.CPG_AUTO_FAN)<<4)
    121e:	7a7b      	ldrb	r3, [r7, #9]
    1220:	f3c3 0380 	ubfx	r3, r3, #2, #1
    1224:	b2db      	uxtb	r3, r3
    1226:	011b      	lsls	r3, r3, #4
    1228:	431a      	orrs	r2, r3
	//|(((uint32_t)0x1d)<<9)
	|(((uint32_t)as.statusFV)<<5)|(((uint32_t)as.DEFOG)<<7);
    122a:	7abb      	ldrb	r3, [r7, #10]
    122c:	015b      	lsls	r3, r3, #5
    122e:	431a      	orrs	r2, r3
    1230:	7afb      	ldrb	r3, [r7, #11]
    1232:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1236:	b2db      	uxtb	r3, r3
    1238:	01db      	lsls	r3, r3, #7
	s=((uint32_t)as.statusArinc)|(((uint32_t)as.AC_CMD)<<2)|
    123a:	4313      	orrs	r3, r2
    123c:	60fb      	str	r3, [r7, #12]
	return s;
    123e:	68fb      	ldr	r3, [r7, #12]
}	
    1240:	4618      	mov	r0, r3
    1242:	3714      	adds	r7, #20
    1244:	46bd      	mov	sp, r7
    1246:	bc80      	pop	{r7}
    1248:	4770      	bx	lr
    124a:	bf00      	nop
    124c:	200081ac 	.word	0x200081ac

00001250 <_ZN17ConfigState_Class10PrintStateEv>:
		st=is;
	}
	s=uint32_t(st.rawStatus);
	return	s;
}
void	ConfigState_Class::PrintState(void){
    1250:	b580      	push	{r7, lr}
    1252:	b0a4      	sub	sp, #144	; 0x90
    1254:	af00      	add	r7, sp, #0
    1256:	6078      	str	r0, [r7, #4]
	HVACState	hs;
	bool	done=false;
    1258:	2300      	movs	r3, #0
    125a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	hvac.GetCurrentState(hs);
    125e:	f107 030c 	add.w	r3, r7, #12
    1262:	4619      	mov	r1, r3
    1264:	483e      	ldr	r0, [pc, #248]	; (1360 <_ZN17ConfigState_Class10PrintStateEv+0x110>)
    1266:	4b3f      	ldr	r3, [pc, #252]	; (1364 <_ZN17ConfigState_Class10PrintStateEv+0x114>)
    1268:	4798      	blx	r3
	uint32_t	nowTime=(uint32_t)hs.now;
    126a:	693b      	ldr	r3, [r7, #16]
    126c:	60bb      	str	r3, [r7, #8]
	char *act=ctime((time_t *)&nowTime);
    126e:	f107 0308 	add.w	r3, r7, #8
    1272:	4618      	mov	r0, r3
    1274:	4b3c      	ldr	r3, [pc, #240]	; (1368 <_ZN17ConfigState_Class10PrintStateEv+0x118>)
    1276:	4798      	blx	r3
    1278:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	k=sizeof(printableNamesHVACState)/(sizeof(char*));
    127c:	687b      	ldr	r3, [r7, #4]
    127e:	2206      	movs	r2, #6
    1280:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
	for (uint8_t ii = 0; ii < k; ii++)
    1284:	2300      	movs	r3, #0
    1286:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    128a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
    128e:	687a      	ldr	r2, [r7, #4]
    1290:	f892 22ae 	ldrb.w	r2, [r2, #686]	; 0x2ae
    1294:	4293      	cmp	r3, r2
    1296:	da5f      	bge.n	1358 <_ZN17ConfigState_Class10PrintStateEv+0x108>
	{
	
		usb<<printableNamesHVACState[ii]<<" : ";
    1298:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
    129c:	009b      	lsls	r3, r3, #2
    129e:	4a33      	ldr	r2, [pc, #204]	; (136c <_ZN17ConfigState_Class10PrintStateEv+0x11c>)
    12a0:	4413      	add	r3, r2
    12a2:	4619      	mov	r1, r3
    12a4:	4832      	ldr	r0, [pc, #200]	; (1370 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    12a6:	4b33      	ldr	r3, [pc, #204]	; (1374 <_ZN17ConfigState_Class10PrintStateEv+0x124>)
    12a8:	4798      	blx	r3
    12aa:	4603      	mov	r3, r0
    12ac:	4932      	ldr	r1, [pc, #200]	; (1378 <_ZN17ConfigState_Class10PrintStateEv+0x128>)
    12ae:	4618      	mov	r0, r3
    12b0:	4b32      	ldr	r3, [pc, #200]	; (137c <_ZN17ConfigState_Class10PrintStateEv+0x12c>)
    12b2:	4798      	blx	r3
	
		switch (ii)
    12b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
    12b8:	2b05      	cmp	r3, #5
    12ba:	d83d      	bhi.n	1338 <_ZN17ConfigState_Class10PrintStateEv+0xe8>
    12bc:	a201      	add	r2, pc, #4	; (adr r2, 12c4 <_ZN17ConfigState_Class10PrintStateEv+0x74>)
    12be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12c2:	bf00      	nop
    12c4:	000012dd 	.word	0x000012dd
    12c8:	000012ef 	.word	0x000012ef
    12cc:	00001303 	.word	0x00001303
    12d0:	00001343 	.word	0x00001343
    12d4:	00001317 	.word	0x00001317
    12d8:	00001323 	.word	0x00001323
		{
			case 0:
				usb<<(uint32_t)hs.currentState;
    12dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    12de:	67fb      	str	r3, [r7, #124]	; 0x7c
    12e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
    12e4:	4619      	mov	r1, r3
    12e6:	4822      	ldr	r0, [pc, #136]	; (1370 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    12e8:	4b25      	ldr	r3, [pc, #148]	; (1380 <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    12ea:	4798      	blx	r3
			/* Your code here */
			break;
    12ec:	e02a      	b.n	1344 <_ZN17ConfigState_Class10PrintStateEv+0xf4>
			case 1:
				usb<<(uint32_t)hs.cycleDuration;
    12ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    12f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    12f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
    12f8:	4619      	mov	r1, r3
    12fa:	481d      	ldr	r0, [pc, #116]	; (1370 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    12fc:	4b20      	ldr	r3, [pc, #128]	; (1380 <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    12fe:	4798      	blx	r3
			/* Your code here */
			break;
    1300:	e020      	b.n	1344 <_ZN17ConfigState_Class10PrintStateEv+0xf4>
			case 2:
				usb<<(uint32_t)hs.remainingTime;
    1302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    1308:	f107 0384 	add.w	r3, r7, #132	; 0x84
    130c:	4619      	mov	r1, r3
    130e:	4818      	ldr	r0, [pc, #96]	; (1370 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    1310:	4b1b      	ldr	r3, [pc, #108]	; (1380 <_ZN17ConfigState_Class10PrintStateEv+0x130>)
    1312:	4798      	blx	r3
			/* Your code here */
			break;
    1314:	e016      	b.n	1344 <_ZN17ConfigState_Class10PrintStateEv+0xf4>
				//usb<<(uint32_t)hs.targetPower;
			/* Your code here */
			break;
			case 4:
				
				usb.print(act);
    1316:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
    131a:	4815      	ldr	r0, [pc, #84]	; (1370 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    131c:	4b19      	ldr	r3, [pc, #100]	; (1384 <_ZN17ConfigState_Class10PrintStateEv+0x134>)
    131e:	4798      	blx	r3
			/* Your code here */
			break;
    1320:	e010      	b.n	1344 <_ZN17ConfigState_Class10PrintStateEv+0xf4>
			case 5:
				usb<<"0x";
    1322:	4919      	ldr	r1, [pc, #100]	; (1388 <_ZN17ConfigState_Class10PrintStateEv+0x138>)
    1324:	4812      	ldr	r0, [pc, #72]	; (1370 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    1326:	4b19      	ldr	r3, [pc, #100]	; (138c <_ZN17ConfigState_Class10PrintStateEv+0x13c>)
    1328:	4798      	blx	r3
				usb.print(hs.magic,HEX);
    132a:	68fb      	ldr	r3, [r7, #12]
    132c:	2210      	movs	r2, #16
    132e:	4619      	mov	r1, r3
    1330:	480f      	ldr	r0, [pc, #60]	; (1370 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    1332:	4b17      	ldr	r3, [pc, #92]	; (1390 <_ZN17ConfigState_Class10PrintStateEv+0x140>)
    1334:	4798      	blx	r3
			
				/* Your code here */
			break;
    1336:	e005      	b.n	1344 <_ZN17ConfigState_Class10PrintStateEv+0xf4>
			default:
				i=sizeof(printableNamesHVACState);
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	2218      	movs	r2, #24
    133c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
				
			/* Your code here */
			break;
    1340:	e000      	b.n	1344 <_ZN17ConfigState_Class10PrintStateEv+0xf4>
			break;
    1342:	bf00      	nop
		}
		usb<<NEWLINE;
    1344:	4913      	ldr	r1, [pc, #76]	; (1394 <_ZN17ConfigState_Class10PrintStateEv+0x144>)
    1346:	480a      	ldr	r0, [pc, #40]	; (1370 <_ZN17ConfigState_Class10PrintStateEv+0x120>)
    1348:	4b10      	ldr	r3, [pc, #64]	; (138c <_ZN17ConfigState_Class10PrintStateEv+0x13c>)
    134a:	4798      	blx	r3
	for (uint8_t ii = 0; ii < k; ii++)
    134c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
    1350:	3301      	adds	r3, #1
    1352:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    1356:	e798      	b.n	128a <_ZN17ConfigState_Class10PrintStateEv+0x3a>
			
	}
	
}
    1358:	bf00      	nop
    135a:	3790      	adds	r7, #144	; 0x90
    135c:	46bd      	mov	sp, r7
    135e:	bd80      	pop	{r7, pc}
    1360:	200081ac 	.word	0x200081ac
    1364:	00003c9d 	.word	0x00003c9d
    1368:	0001b075 	.word	0x0001b075
    136c:	20000050 	.word	0x20000050
    1370:	2000a258 	.word	0x2000a258
    1374:	000013bd 	.word	0x000013bd
    1378:	0001f550 	.word	0x0001f550
    137c:	000013e1 	.word	0x000013e1
    1380:	00001401 	.word	0x00001401
    1384:	000177b5 	.word	0x000177b5
    1388:	0001f554 	.word	0x0001f554
    138c:	00000c75 	.word	0x00000c75
    1390:	000177fd 	.word	0x000177fd
    1394:	0001f558 	.word	0x0001f558

00001398 <_ZN17ConfigState_Class15SetDefaultStateEv>:
void	ConfigState_Class::SetDefaultState(void){
    1398:	b580      	push	{r7, lr}
    139a:	b082      	sub	sp, #8
    139c:	af00      	add	r7, sp, #0
    139e:	6078      	str	r0, [r7, #4]
	hvac.SetCurrentState(defaultState);
    13a0:	687b      	ldr	r3, [r7, #4]
    13a2:	3304      	adds	r3, #4
    13a4:	4619      	mov	r1, r3
    13a6:	4803      	ldr	r0, [pc, #12]	; (13b4 <_ZN17ConfigState_Class15SetDefaultStateEv+0x1c>)
    13a8:	4b03      	ldr	r3, [pc, #12]	; (13b8 <_ZN17ConfigState_Class15SetDefaultStateEv+0x20>)
    13aa:	4798      	blx	r3

}
    13ac:	bf00      	nop
    13ae:	3708      	adds	r7, #8
    13b0:	46bd      	mov	sp, r7
    13b2:	bd80      	pop	{r7, pc}
    13b4:	200081ac 	.word	0x200081ac
    13b8:	00003cf1 	.word	0x00003cf1

000013bc <_ZlsIPKcER5PrintS3_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    13bc:	b580      	push	{r7, lr}
    13be:	b082      	sub	sp, #8
    13c0:	af00      	add	r7, sp, #0
    13c2:	6078      	str	r0, [r7, #4]
    13c4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    13c6:	683b      	ldr	r3, [r7, #0]
    13c8:	681b      	ldr	r3, [r3, #0]
    13ca:	4619      	mov	r1, r3
    13cc:	6878      	ldr	r0, [r7, #4]
    13ce:	4b03      	ldr	r3, [pc, #12]	; (13dc <_ZlsIPKcER5PrintS3_RKT_+0x20>)
    13d0:	4798      	blx	r3
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	4618      	mov	r0, r3
    13d6:	3708      	adds	r7, #8
    13d8:	46bd      	mov	sp, r7
    13da:	bd80      	pop	{r7, pc}
    13dc:	000177b5 	.word	0x000177b5

000013e0 <_ZlsIA4_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    13e0:	b580      	push	{r7, lr}
    13e2:	b082      	sub	sp, #8
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    13ea:	6839      	ldr	r1, [r7, #0]
    13ec:	6878      	ldr	r0, [r7, #4]
    13ee:	4b03      	ldr	r3, [pc, #12]	; (13fc <_ZlsIA4_cER5PrintS2_RKT_+0x1c>)
    13f0:	4798      	blx	r3
    13f2:	687b      	ldr	r3, [r7, #4]
    13f4:	4618      	mov	r0, r3
    13f6:	3708      	adds	r7, #8
    13f8:	46bd      	mov	sp, r7
    13fa:	bd80      	pop	{r7, pc}
    13fc:	000177b5 	.word	0x000177b5

00001400 <_ZlsImER5PrintS1_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    1400:	b580      	push	{r7, lr}
    1402:	b082      	sub	sp, #8
    1404:	af00      	add	r7, sp, #0
    1406:	6078      	str	r0, [r7, #4]
    1408:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    140a:	683b      	ldr	r3, [r7, #0]
    140c:	681b      	ldr	r3, [r3, #0]
    140e:	220a      	movs	r2, #10
    1410:	4619      	mov	r1, r3
    1412:	6878      	ldr	r0, [r7, #4]
    1414:	4b03      	ldr	r3, [pc, #12]	; (1424 <_ZlsImER5PrintS1_RKT_+0x24>)
    1416:	4798      	blx	r3
    1418:	687b      	ldr	r3, [r7, #4]
    141a:	4618      	mov	r0, r3
    141c:	3708      	adds	r7, #8
    141e:	46bd      	mov	sp, r7
    1420:	bd80      	pop	{r7, pc}
    1422:	bf00      	nop
    1424:	000177fd 	.word	0x000177fd

00001428 <_ZN11CRC32_ClassC1Ev>:

#include "CRC32_Class.h"
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
    1428:	b480      	push	{r7}
    142a:	b083      	sub	sp, #12
    142c:	af00      	add	r7, sp, #0
    142e:	6078      	str	r0, [r7, #4]
{
} //CRC32_Class
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	4618      	mov	r0, r3
    1434:	370c      	adds	r7, #12
    1436:	46bd      	mov	sp, r7
    1438:	bc80      	pop	{r7}
    143a:	4770      	bx	lr

0000143c <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
    143c:	b480      	push	{r7}
    143e:	b083      	sub	sp, #12
    1440:	af00      	add	r7, sp, #0
    1442:	6078      	str	r0, [r7, #4]
{
} //~CRC32_Class
    1444:	687b      	ldr	r3, [r7, #4]
    1446:	4618      	mov	r0, r3
    1448:	370c      	adds	r7, #12
    144a:	46bd      	mov	sp, r7
    144c:	bc80      	pop	{r7}
    144e:	4770      	bx	lr

00001450 <_ZN11CRC32_Class4InitEm>:

uint32_t	CRC32_Class::Init(uint32_t refCRC/* =0xFFFFFFFF */){
    1450:	b580      	push	{r7, lr}
    1452:	b082      	sub	sp, #8
    1454:	af00      	add	r7, sp, #0
    1456:	6078      	str	r0, [r7, #4]
    1458:	6039      	str	r1, [r7, #0]
	crc_sync_enable(&CRC_CALC);
    145a:	4806      	ldr	r0, [pc, #24]	; (1474 <_ZN11CRC32_Class4InitEm+0x24>)
    145c:	4b06      	ldr	r3, [pc, #24]	; (1478 <_ZN11CRC32_Class4InitEm+0x28>)
    145e:	4798      	blx	r3
	refCRC32=refCRC;
    1460:	687b      	ldr	r3, [r7, #4]
    1462:	683a      	ldr	r2, [r7, #0]
    1464:	601a      	str	r2, [r3, #0]
	return	refCRC32;
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	681b      	ldr	r3, [r3, #0]
}
    146a:	4618      	mov	r0, r3
    146c:	3708      	adds	r7, #8
    146e:	46bd      	mov	sp, r7
    1470:	bd80      	pop	{r7, pc}
    1472:	bf00      	nop
    1474:	2000a728 	.word	0x2000a728
    1478:	00005fd9 	.word	0x00005fd9

0000147c <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    147c:	b590      	push	{r4, r7, lr}
    147e:	b083      	sub	sp, #12
    1480:	af00      	add	r7, sp, #0
    1482:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
    1484:	4b07      	ldr	r3, [pc, #28]	; (14a4 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
    1486:	6878      	ldr	r0, [r7, #4]
    1488:	4798      	blx	r3
    148a:	4603      	mov	r3, r0
    148c:	460c      	mov	r4, r1
    148e:	4618      	mov	r0, r3
    1490:	4621      	mov	r1, r4
    1492:	4b05      	ldr	r3, [pc, #20]	; (14a8 <_ZSt5floorImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x2c>)
    1494:	4798      	blx	r3
    1496:	4603      	mov	r3, r0
    1498:	460c      	mov	r4, r1
    149a:	4618      	mov	r0, r3
    149c:	4621      	mov	r1, r4
    149e:	370c      	adds	r7, #12
    14a0:	46bd      	mov	sp, r7
    14a2:	bd90      	pop	{r4, r7, pc}
    14a4:	0001a0f1 	.word	0x0001a0f1
    14a8:	00018c09 	.word	0x00018c09

000014ac <_ZN11CRC32_Class12CalculateCRCEPmm>:
	uint32_t	lenght32=(uint32_t)floor(len/4);
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
	return (crc^0xFFFFFFFF);
}

uint32_t	CRC32_Class::CalculateCRC(uint32_t *const data, const uint32_t len){
    14ac:	b590      	push	{r4, r7, lr}
    14ae:	b087      	sub	sp, #28
    14b0:	af00      	add	r7, sp, #0
    14b2:	60f8      	str	r0, [r7, #12]
    14b4:	60b9      	str	r1, [r7, #8]
    14b6:	607a      	str	r2, [r7, #4]
	uint32_t	lenght32=(uint32_t)floor(len/4);
    14b8:	687b      	ldr	r3, [r7, #4]
    14ba:	089b      	lsrs	r3, r3, #2
    14bc:	4618      	mov	r0, r3
    14be:	4b0f      	ldr	r3, [pc, #60]	; (14fc <_ZN11CRC32_Class12CalculateCRCEPmm+0x50>)
    14c0:	4798      	blx	r3
    14c2:	460a      	mov	r2, r1
    14c4:	4601      	mov	r1, r0
    14c6:	4b0e      	ldr	r3, [pc, #56]	; (1500 <_ZN11CRC32_Class12CalculateCRCEPmm+0x54>)
    14c8:	4608      	mov	r0, r1
    14ca:	4611      	mov	r1, r2
    14cc:	4798      	blx	r3
    14ce:	4603      	mov	r3, r0
    14d0:	617b      	str	r3, [r7, #20]
	uint32_t crc=Init();
    14d2:	f04f 31ff 	mov.w	r1, #4294967295
    14d6:	68f8      	ldr	r0, [r7, #12]
    14d8:	4b0a      	ldr	r3, [pc, #40]	; (1504 <_ZN11CRC32_Class12CalculateCRCEPmm+0x58>)
    14da:	4798      	blx	r3
    14dc:	4603      	mov	r3, r0
    14de:	613b      	str	r3, [r7, #16]
	crc_sync_crc32(&CRC_CALC, data, lenght32, &crc);
    14e0:	f107 0310 	add.w	r3, r7, #16
    14e4:	697a      	ldr	r2, [r7, #20]
    14e6:	68b9      	ldr	r1, [r7, #8]
    14e8:	4807      	ldr	r0, [pc, #28]	; (1508 <_ZN11CRC32_Class12CalculateCRCEPmm+0x5c>)
    14ea:	4c08      	ldr	r4, [pc, #32]	; (150c <_ZN11CRC32_Class12CalculateCRCEPmm+0x60>)
    14ec:	47a0      	blx	r4
	return (crc^0xFFFFFFFF);
    14ee:	693b      	ldr	r3, [r7, #16]
    14f0:	43db      	mvns	r3, r3
    14f2:	4618      	mov	r0, r3
    14f4:	371c      	adds	r7, #28
    14f6:	46bd      	mov	sp, r7
    14f8:	bd90      	pop	{r4, r7, pc}
    14fa:	bf00      	nop
    14fc:	0000147d 	.word	0x0000147d
    1500:	0001a73d 	.word	0x0001a73d
    1504:	00001451 	.word	0x00001451
    1508:	2000a728 	.word	0x2000a728
    150c:	00006015 	.word	0x00006015

00001510 <_ZN15DataLoger_ClassC1Ev>:
#include "ConfigurationData.h"
#include "FlashHandler_Class.h"
#include "N25Q256_Class.h"

// default constructor
DataLoger_Class::DataLoger_Class()
    1510:	b580      	push	{r7, lr}
    1512:	b082      	sub	sp, #8
    1514:	af00      	add	r7, sp, #0
    1516:	6078      	str	r0, [r7, #4]
    1518:	687b      	ldr	r3, [r7, #4]
    151a:	4618      	mov	r0, r3
    151c:	4b06      	ldr	r3, [pc, #24]	; (1538 <_ZN15DataLoger_ClassC1Ev+0x28>)
    151e:	4798      	blx	r3
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
    1526:	4618      	mov	r0, r3
    1528:	4b04      	ldr	r3, [pc, #16]	; (153c <_ZN15DataLoger_ClassC1Ev+0x2c>)
    152a:	4798      	blx	r3
{
} //DataLoger_Class
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	4618      	mov	r0, r3
    1530:	3708      	adds	r7, #8
    1532:	46bd      	mov	sp, r7
    1534:	bd80      	pop	{r7, pc}
    1536:	bf00      	nop
    1538:	00015e61 	.word	0x00015e61
    153c:	00001575 	.word	0x00001575

00001540 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
    1540:	b580      	push	{r7, lr}
    1542:	b082      	sub	sp, #8
    1544:	af00      	add	r7, sp, #0
    1546:	6078      	str	r0, [r7, #4]
    1548:	687b      	ldr	r3, [r7, #4]
    154a:	4618      	mov	r0, r3
    154c:	4b03      	ldr	r3, [pc, #12]	; (155c <_ZN15DataLoger_ClassD1Ev+0x1c>)
    154e:	4798      	blx	r3
{
} //~DataLoger_Class
    1550:	687b      	ldr	r3, [r7, #4]
    1552:	4618      	mov	r0, r3
    1554:	3708      	adds	r7, #8
    1556:	46bd      	mov	sp, r7
    1558:	bd80      	pop	{r7, pc}
    155a:	bf00      	nop
    155c:	00015e9d 	.word	0x00015e9d

00001560 <_ZN15DataLoger_Class13LogResetEventEv>:
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)PTR_CONFIG_DATA(cd),add,sizeof(dataOnMemory));
	
	return	r;
}

uint32_t	DataLoger_Class::LogResetEvent(void){
    1560:	b480      	push	{r7}
    1562:	b083      	sub	sp, #12
    1564:	af00      	add	r7, sp, #0
    1566:	6078      	str	r0, [r7, #4]
	return 0;
    1568:	2300      	movs	r3, #0
    156a:	4618      	mov	r0, r3
    156c:	370c      	adds	r7, #12
    156e:	46bd      	mov	sp, r7
    1570:	bc80      	pop	{r7}
    1572:	4770      	bx	lr

00001574 <_ZN11RingBufferNILi512EEC1Ev>:

typedef RingBufferN<SERIAL_BUFFER_SIZE> RingBuffer;
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
    1574:	b580      	push	{r7, lr}
    1576:	b082      	sub	sp, #8
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, N ) ;
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	f44f 7200 	mov.w	r2, #512	; 0x200
    1582:	2100      	movs	r1, #0
    1584:	4618      	mov	r0, r3
    1586:	4b05      	ldr	r3, [pc, #20]	; (159c <_ZN11RingBufferNILi512EEC1Ev+0x28>)
    1588:	4798      	blx	r3
    clear();
    158a:	6878      	ldr	r0, [r7, #4]
    158c:	4b04      	ldr	r3, [pc, #16]	; (15a0 <_ZN11RingBufferNILi512EEC1Ev+0x2c>)
    158e:	4798      	blx	r3
}
    1590:	687b      	ldr	r3, [r7, #4]
    1592:	4618      	mov	r0, r3
    1594:	3708      	adds	r7, #8
    1596:	46bd      	mov	sp, r7
    1598:	bd80      	pop	{r7, pc}
    159a:	bf00      	nop
    159c:	0001b491 	.word	0x0001b491
    15a0:	000015a5 	.word	0x000015a5

000015a4 <_ZN11RingBufferNILi512EE5clearEv>:
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
    15a4:	b480      	push	{r7}
    15a6:	b083      	sub	sp, #12
    15a8:	af00      	add	r7, sp, #0
    15aa:	6078      	str	r0, [r7, #4]
{
  _iHead = 0;
    15ac:	687b      	ldr	r3, [r7, #4]
    15ae:	2200      	movs	r2, #0
    15b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  _iTail = 0;
    15b4:	687b      	ldr	r3, [r7, #4]
    15b6:	2200      	movs	r2, #0
    15b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
    15bc:	bf00      	nop
    15be:	370c      	adds	r7, #12
    15c0:	46bd      	mov	sp, r7
    15c2:	bc80      	pop	{r7}
    15c4:	4770      	bx	lr
	...

000015c8 <_ZN14DateTime_ClassC1Ev>:

#include "DateTime_Class.h"
#include "FastStorage_Class.h"

// default constructor
DateTime_Class::DateTime_Class()
    15c8:	b580      	push	{r7, lr}
    15ca:	b082      	sub	sp, #8
    15cc:	af00      	add	r7, sp, #0
    15ce:	6078      	str	r0, [r7, #4]
    15d0:	687b      	ldr	r3, [r7, #4]
    15d2:	33a8      	adds	r3, #168	; 0xa8
    15d4:	4618      	mov	r0, r3
    15d6:	4b07      	ldr	r3, [pc, #28]	; (15f4 <_ZN14DateTime_ClassC1Ev+0x2c>)
    15d8:	4798      	blx	r3
    15da:	687b      	ldr	r3, [r7, #4]
    15dc:	4618      	mov	r0, r3
    15de:	4b06      	ldr	r3, [pc, #24]	; (15f8 <_ZN14DateTime_ClassC1Ev+0x30>)
    15e0:	4798      	blx	r3
    15e2:	4a06      	ldr	r2, [pc, #24]	; (15fc <_ZN14DateTime_ClassC1Ev+0x34>)
    15e4:	687b      	ldr	r3, [r7, #4]
    15e6:	601a      	str	r2, [r3, #0]
{
} //DateTime_Class
    15e8:	687b      	ldr	r3, [r7, #4]
    15ea:	4618      	mov	r0, r3
    15ec:	3708      	adds	r7, #8
    15ee:	46bd      	mov	sp, r7
    15f0:	bd80      	pop	{r7, pc}
    15f2:	bf00      	nop
    15f4:	0000176b 	.word	0x0000176b
    15f8:	00016271 	.word	0x00016271
    15fc:	0001f570 	.word	0x0001f570

00001600 <_ZN14DateTime_ClassD1Ev>:

// default destructor
DateTime_Class::~DateTime_Class()
    1600:	b580      	push	{r7, lr}
    1602:	b082      	sub	sp, #8
    1604:	af00      	add	r7, sp, #0
    1606:	6078      	str	r0, [r7, #4]
    1608:	4a08      	ldr	r2, [pc, #32]	; (162c <_ZN14DateTime_ClassD1Ev+0x2c>)
    160a:	687b      	ldr	r3, [r7, #4]
    160c:	601a      	str	r2, [r3, #0]
    160e:	687b      	ldr	r3, [r7, #4]
    1610:	4618      	mov	r0, r3
    1612:	4b07      	ldr	r3, [pc, #28]	; (1630 <_ZN14DateTime_ClassD1Ev+0x30>)
    1614:	4798      	blx	r3
    1616:	687b      	ldr	r3, [r7, #4]
    1618:	33a8      	adds	r3, #168	; 0xa8
    161a:	4618      	mov	r0, r3
    161c:	4b05      	ldr	r3, [pc, #20]	; (1634 <_ZN14DateTime_ClassD1Ev+0x34>)
    161e:	4798      	blx	r3
{
} //~DateTime_Class
    1620:	687b      	ldr	r3, [r7, #4]
    1622:	4618      	mov	r0, r3
    1624:	3708      	adds	r7, #8
    1626:	46bd      	mov	sp, r7
    1628:	bd80      	pop	{r7, pc}
    162a:	bf00      	nop
    162c:	0001f570 	.word	0x0001f570
    1630:	000162e1 	.word	0x000162e1
    1634:	0000177f 	.word	0x0000177f

00001638 <_ZN14DateTime_Class4InitEv>:

void	DateTime_Class::Init(){
    1638:	b580      	push	{r7, lr}
    163a:	b084      	sub	sp, #16
    163c:	af00      	add	r7, sp, #0
    163e:	6078      	str	r0, [r7, #4]
	uint32_t	add=(uint32_t)&eepromMap->stack;
    1640:	4b0b      	ldr	r3, [pc, #44]	; (1670 <_ZN14DateTime_Class4InitEv+0x38>)
    1642:	681b      	ldr	r3, [r3, #0]
    1644:	3378      	adds	r3, #120	; 0x78
    1646:	60fb      	str	r3, [r7, #12]
	calendar.SetCalendarStackAddress(add);
    1648:	68f9      	ldr	r1, [r7, #12]
    164a:	480a      	ldr	r0, [pc, #40]	; (1674 <_ZN14DateTime_Class4InitEv+0x3c>)
    164c:	4b0a      	ldr	r3, [pc, #40]	; (1678 <_ZN14DateTime_Class4InitEv+0x40>)
    164e:	4798      	blx	r3
	uint32_t	addTimeLogs=(uint32_t)&eepromMap->timeLogs[0];
    1650:	4b07      	ldr	r3, [pc, #28]	; (1670 <_ZN14DateTime_Class4InitEv+0x38>)
    1652:	681b      	ldr	r3, [r3, #0]
    1654:	337c      	adds	r3, #124	; 0x7c
    1656:	60bb      	str	r3, [r7, #8]
	calendar.SetCalendarAddress(addTimeLogs);
    1658:	68b9      	ldr	r1, [r7, #8]
    165a:	4806      	ldr	r0, [pc, #24]	; (1674 <_ZN14DateTime_Class4InitEv+0x3c>)
    165c:	4b07      	ldr	r3, [pc, #28]	; (167c <_ZN14DateTime_Class4InitEv+0x44>)
    165e:	4798      	blx	r3
	calendar.Init();
    1660:	4804      	ldr	r0, [pc, #16]	; (1674 <_ZN14DateTime_Class4InitEv+0x3c>)
    1662:	4b07      	ldr	r3, [pc, #28]	; (1680 <_ZN14DateTime_Class4InitEv+0x48>)
    1664:	4798      	blx	r3
	
}
    1666:	bf00      	nop
    1668:	3710      	adds	r7, #16
    166a:	46bd      	mov	sp, r7
    166c:	bd80      	pop	{r7, pc}
    166e:	bf00      	nop
    1670:	200014c0 	.word	0x200014c0
    1674:	20009fd8 	.word	0x20009fd8
    1678:	00016be1 	.word	0x00016be1
    167c:	00016c01 	.word	0x00016c01
    1680:	00016309 	.word	0x00016309

00001684 <_Z41__static_initialization_and_destruction_0ii>:

    1684:	b580      	push	{r7, lr}
    1686:	b082      	sub	sp, #8
    1688:	af00      	add	r7, sp, #0
    168a:	6078      	str	r0, [r7, #4]
    168c:	6039      	str	r1, [r7, #0]
    168e:	687b      	ldr	r3, [r7, #4]
    1690:	2b01      	cmp	r3, #1
    1692:	d10c      	bne.n	16ae <_Z41__static_initialization_and_destruction_0ii+0x2a>
    1694:	683b      	ldr	r3, [r7, #0]
    1696:	f64f 72ff 	movw	r2, #65535	; 0xffff
    169a:	4293      	cmp	r3, r2
    169c:	d107      	bne.n	16ae <_Z41__static_initialization_and_destruction_0ii+0x2a>
    169e:	4806      	ldr	r0, [pc, #24]	; (16b8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    16a0:	4b06      	ldr	r3, [pc, #24]	; (16bc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    16a2:	4798      	blx	r3
    16a4:	4a06      	ldr	r2, [pc, #24]	; (16c0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    16a6:	4907      	ldr	r1, [pc, #28]	; (16c4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    16a8:	4803      	ldr	r0, [pc, #12]	; (16b8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    16aa:	4b07      	ldr	r3, [pc, #28]	; (16c8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    16ac:	4798      	blx	r3
    16ae:	bf00      	nop
    16b0:	3708      	adds	r7, #8
    16b2:	46bd      	mov	sp, r7
    16b4:	bd80      	pop	{r7, pc}
    16b6:	bf00      	nop
    16b8:	20001408 	.word	0x20001408
    16bc:	000015c9 	.word	0x000015c9
    16c0:	20000000 	.word	0x20000000
    16c4:	00001601 	.word	0x00001601
    16c8:	00018bf5 	.word	0x00018bf5

000016cc <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev>:
    16cc:	b580      	push	{r7, lr}
    16ce:	af00      	add	r7, sp, #0
    16d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    16d4:	2001      	movs	r0, #1
    16d6:	4b01      	ldr	r3, [pc, #4]	; (16dc <_GLOBAL__sub_I__ZN14DateTime_ClassC2Ev+0x10>)
    16d8:	4798      	blx	r3
    16da:	bd80      	pop	{r7, pc}
    16dc:	00001685 	.word	0x00001685

000016e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    16e0:	b580      	push	{r7, lr}
    16e2:	b082      	sub	sp, #8
    16e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    16e6:	4b16      	ldr	r3, [pc, #88]	; (1740 <Reset_Handler+0x60>)
    16e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    16ea:	4b16      	ldr	r3, [pc, #88]	; (1744 <Reset_Handler+0x64>)
    16ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    16ee:	687a      	ldr	r2, [r7, #4]
    16f0:	683b      	ldr	r3, [r7, #0]
    16f2:	429a      	cmp	r2, r3
    16f4:	d00c      	beq.n	1710 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    16f6:	e007      	b.n	1708 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    16f8:	683b      	ldr	r3, [r7, #0]
    16fa:	1d1a      	adds	r2, r3, #4
    16fc:	603a      	str	r2, [r7, #0]
    16fe:	687a      	ldr	r2, [r7, #4]
    1700:	1d11      	adds	r1, r2, #4
    1702:	6079      	str	r1, [r7, #4]
    1704:	6812      	ldr	r2, [r2, #0]
    1706:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    1708:	683b      	ldr	r3, [r7, #0]
    170a:	4a0f      	ldr	r2, [pc, #60]	; (1748 <Reset_Handler+0x68>)
    170c:	4293      	cmp	r3, r2
    170e:	d3f3      	bcc.n	16f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1710:	4b0e      	ldr	r3, [pc, #56]	; (174c <Reset_Handler+0x6c>)
    1712:	603b      	str	r3, [r7, #0]
    1714:	e004      	b.n	1720 <Reset_Handler+0x40>
                *pDest++ = 0;
    1716:	683b      	ldr	r3, [r7, #0]
    1718:	1d1a      	adds	r2, r3, #4
    171a:	603a      	str	r2, [r7, #0]
    171c:	2200      	movs	r2, #0
    171e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    1720:	683b      	ldr	r3, [r7, #0]
    1722:	4a0b      	ldr	r2, [pc, #44]	; (1750 <Reset_Handler+0x70>)
    1724:	4293      	cmp	r3, r2
    1726:	d3f6      	bcc.n	1716 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1728:	4b0a      	ldr	r3, [pc, #40]	; (1754 <Reset_Handler+0x74>)
    172a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    172c:	4a0a      	ldr	r2, [pc, #40]	; (1758 <Reset_Handler+0x78>)
    172e:	687b      	ldr	r3, [r7, #4]
    1730:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1734:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    1736:	4b09      	ldr	r3, [pc, #36]	; (175c <Reset_Handler+0x7c>)
    1738:	4798      	blx	r3

        /* Branch to main function */
        main();
    173a:	4b09      	ldr	r3, [pc, #36]	; (1760 <Reset_Handler+0x80>)
    173c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    173e:	e7fe      	b.n	173e <Reset_Handler+0x5e>
    1740:	000215cc 	.word	0x000215cc
    1744:	20000000 	.word	0x20000000
    1748:	20000c44 	.word	0x20000c44
    174c:	20000c48 	.word	0x20000c48
    1750:	2000a7e8 	.word	0x2000a7e8
    1754:	00000000 	.word	0x00000000
    1758:	e000ed00 	.word	0xe000ed00
    175c:	0001b0c5 	.word	0x0001b0c5
    1760:	000020fd 	.word	0x000020fd

00001764 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1764:	b480      	push	{r7}
    1766:	af00      	add	r7, sp, #0
        while (1) {
    1768:	e7fe      	b.n	1768 <Dummy_Handler+0x4>

0000176a <_ZN17FastStorage_ClassC1Ev>:
#include "MemoryManagment_Class.h"

EEPROMMemoryStruct		*eepromMap=NULL;

// default constructor
FastStorage_Class::FastStorage_Class()
    176a:	b480      	push	{r7}
    176c:	b083      	sub	sp, #12
    176e:	af00      	add	r7, sp, #0
    1770:	6078      	str	r0, [r7, #4]
{
} //FastStorage_Class
    1772:	687b      	ldr	r3, [r7, #4]
    1774:	4618      	mov	r0, r3
    1776:	370c      	adds	r7, #12
    1778:	46bd      	mov	sp, r7
    177a:	bc80      	pop	{r7}
    177c:	4770      	bx	lr

0000177e <_ZN17FastStorage_ClassD1Ev>:

// default destructor
FastStorage_Class::~FastStorage_Class()
    177e:	b480      	push	{r7}
    1780:	b083      	sub	sp, #12
    1782:	af00      	add	r7, sp, #0
    1784:	6078      	str	r0, [r7, #4]
{
} //~FastStorage_Class
    1786:	687b      	ldr	r3, [r7, #4]
    1788:	4618      	mov	r0, r3
    178a:	370c      	adds	r7, #12
    178c:	46bd      	mov	sp, r7
    178e:	bc80      	pop	{r7}
    1790:	4770      	bx	lr
	...

00001794 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv>:


uint32_t	FastStorage_Class::ReadFastCRCApplicationState(void){
    1794:	b590      	push	{r4, r7, lr}
    1796:	b087      	sub	sp, #28
    1798:	af00      	add	r7, sp, #0
    179a:	6078      	str	r0, [r7, #4]
	uint32_t	crc,add32;
	add32=(uint32_t)&eepromMap->crcAppState;
    179c:	4b0a      	ldr	r3, [pc, #40]	; (17c8 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x34>)
    179e:	681b      	ldr	r3, [r3, #0]
    17a0:	3304      	adds	r3, #4
    17a2:	617b      	str	r3, [r7, #20]
	eepromAddress=(uint16_t)(0xffff&add32);
    17a4:	697b      	ldr	r3, [r7, #20]
    17a6:	b29a      	uxth	r2, r3
    17a8:	687b      	ldr	r3, [r7, #4]
    17aa:	819a      	strh	r2, [r3, #12]
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(&crc),eepromAddress,sizeof(uint32_t));
    17ac:	687b      	ldr	r3, [r7, #4]
    17ae:	899a      	ldrh	r2, [r3, #12]
    17b0:	f107 010c 	add.w	r1, r7, #12
    17b4:	2304      	movs	r3, #4
    17b6:	4805      	ldr	r0, [pc, #20]	; (17cc <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x38>)
    17b8:	4c05      	ldr	r4, [pc, #20]	; (17d0 <_ZN17FastStorage_Class27ReadFastCRCApplicationStateEv+0x3c>)
    17ba:	47a0      	blx	r4
    17bc:	6138      	str	r0, [r7, #16]
	return	crc;
    17be:	68fb      	ldr	r3, [r7, #12]
}
    17c0:	4618      	mov	r0, r3
    17c2:	371c      	adds	r7, #28
    17c4:	46bd      	mov	sp, r7
    17c6:	bd90      	pop	{r4, r7, pc}
    17c8:	200014c0 	.word	0x200014c0
    17cc:	20009d58 	.word	0x20009d58
    17d0:	0001579d 	.word	0x0001579d

000017d4 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState>:
uint32_t	FastStorage_Class::ReadFastApplicationState(HVACState& hs){
    17d4:	b590      	push	{r4, r7, lr}
    17d6:	b085      	sub	sp, #20
    17d8:	af00      	add	r7, sp, #0
    17da:	6078      	str	r0, [r7, #4]
    17dc:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->appState;
    17de:	4b0c      	ldr	r3, [pc, #48]	; (1810 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x3c>)
    17e0:	681b      	ldr	r3, [r3, #0]
    17e2:	3308      	adds	r3, #8
    17e4:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    17e6:	68fb      	ldr	r3, [r7, #12]
    17e8:	b29a      	uxth	r2, r3
    17ea:	687b      	ldr	r3, [r7, #4]
    17ec:	819a      	strh	r2, [r3, #12]
	handlerAppState=PTR_HVAC_STATE(&hs);
    17ee:	683a      	ldr	r2, [r7, #0]
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	601a      	str	r2, [r3, #0]
	r=eeprom.ReadAddress((uint8_t*)handlerAppState,eepromAddress,sizeof(HVACState));
    17f4:	687b      	ldr	r3, [r7, #4]
    17f6:	6819      	ldr	r1, [r3, #0]
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899a      	ldrh	r2, [r3, #12]
    17fc:	2370      	movs	r3, #112	; 0x70
    17fe:	4805      	ldr	r0, [pc, #20]	; (1814 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x40>)
    1800:	4c05      	ldr	r4, [pc, #20]	; (1818 <_ZN17FastStorage_Class24ReadFastApplicationStateER9HVACState+0x44>)
    1802:	47a0      	blx	r4
    1804:	60b8      	str	r0, [r7, #8]
	return	r;
    1806:	68bb      	ldr	r3, [r7, #8]
}
    1808:	4618      	mov	r0, r3
    180a:	3714      	adds	r7, #20
    180c:	46bd      	mov	sp, r7
    180e:	bd90      	pop	{r4, r7, pc}
    1810:	200014c0 	.word	0x200014c0
    1814:	20009d58 	.word	0x20009d58
    1818:	0001579d 	.word	0x0001579d

0000181c <_ZN17FastStorage_Class18ReadFastParametersER14UserParameters>:
uint32_t	FastStorage_Class::ReadFastParameters(UserParameters& up){
    181c:	b590      	push	{r4, r7, lr}
    181e:	b085      	sub	sp, #20
    1820:	af00      	add	r7, sp, #0
    1822:	6078      	str	r0, [r7, #4]
    1824:	6039      	str	r1, [r7, #0]
	uint32_t	crc,add32,r;
	add32=(uint32_t)&eepromMap->parameters;
    1826:	4b0a      	ldr	r3, [pc, #40]	; (1850 <_ZN17FastStorage_Class18ReadFastParametersER14UserParameters+0x34>)
    1828:	681b      	ldr	r3, [r3, #0]
    182a:	3301      	adds	r3, #1
    182c:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    182e:	68fb      	ldr	r3, [r7, #12]
    1830:	b29a      	uxth	r2, r3
    1832:	687b      	ldr	r3, [r7, #4]
    1834:	819a      	strh	r2, [r3, #12]
	r=eeprom.ReadAddress((uint8_t*)&up,eepromAddress,sizeof(UserParameters));
    1836:	687b      	ldr	r3, [r7, #4]
    1838:	899a      	ldrh	r2, [r3, #12]
    183a:	2301      	movs	r3, #1
    183c:	6839      	ldr	r1, [r7, #0]
    183e:	4805      	ldr	r0, [pc, #20]	; (1854 <_ZN17FastStorage_Class18ReadFastParametersER14UserParameters+0x38>)
    1840:	4c05      	ldr	r4, [pc, #20]	; (1858 <_ZN17FastStorage_Class18ReadFastParametersER14UserParameters+0x3c>)
    1842:	47a0      	blx	r4
    1844:	60b8      	str	r0, [r7, #8]
	return	r;
    1846:	68bb      	ldr	r3, [r7, #8]
}
    1848:	4618      	mov	r0, r3
    184a:	3714      	adds	r7, #20
    184c:	46bd      	mov	sp, r7
    184e:	bd90      	pop	{r4, r7, pc}
    1850:	200014c0 	.word	0x200014c0
    1854:	20009d58 	.word	0x20009d58
    1858:	0001579d 	.word	0x0001579d

0000185c <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState>:
	eepromAddress=(uint16_t)(0xffff&add32);
	handlerCalendar=(PTR_DATE_TIME)(&cdt);
	uint32_t	r=eeprom.ReadAddress((uint8_t*)(handlerCalendar),(uint8_t)eepromAddress,sizeof(calendar_date_time)*AT24MAC_BUFFER_SIZE);
	return	r;
}
uint32_t	FastStorage_Class::WriteFastCurrentState(HVACState& hs){
    185c:	b580      	push	{r7, lr}
    185e:	b084      	sub	sp, #16
    1860:	af00      	add	r7, sp, #0
    1862:	6078      	str	r0, [r7, #4]
    1864:	6039      	str	r1, [r7, #0]
	uint32_t	add32=(uint32_t)&eepromMap->appState;
    1866:	4b12      	ldr	r3, [pc, #72]	; (18b0 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x54>)
    1868:	681b      	ldr	r3, [r3, #0]
    186a:	3308      	adds	r3, #8
    186c:	60fb      	str	r3, [r7, #12]
	eepromAddress=(uint16_t)(0xffff&add32);
    186e:	68fb      	ldr	r3, [r7, #12]
    1870:	b29a      	uxth	r2, r3
    1872:	687b      	ldr	r3, [r7, #4]
    1874:	819a      	strh	r2, [r3, #12]
	uint32_t	w=WriteFastAppState(hs,eepromAddress);
    1876:	687b      	ldr	r3, [r7, #4]
    1878:	899b      	ldrh	r3, [r3, #12]
    187a:	461a      	mov	r2, r3
    187c:	6839      	ldr	r1, [r7, #0]
    187e:	6878      	ldr	r0, [r7, #4]
    1880:	4b0c      	ldr	r3, [pc, #48]	; (18b4 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x58>)
    1882:	4798      	blx	r3
    1884:	60b8      	str	r0, [r7, #8]
	crc32=		memory.CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    1886:	2270      	movs	r2, #112	; 0x70
    1888:	6839      	ldr	r1, [r7, #0]
    188a:	480b      	ldr	r0, [pc, #44]	; (18b8 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x5c>)
    188c:	4b0b      	ldr	r3, [pc, #44]	; (18bc <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x60>)
    188e:	4798      	blx	r3
    1890:	4602      	mov	r2, r0
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	609a      	str	r2, [r3, #8]
	w=WriteFastCRCAppState(crc32);
    1896:	687b      	ldr	r3, [r7, #4]
    1898:	689b      	ldr	r3, [r3, #8]
    189a:	4619      	mov	r1, r3
    189c:	6878      	ldr	r0, [r7, #4]
    189e:	4b08      	ldr	r3, [pc, #32]	; (18c0 <_ZN17FastStorage_Class21WriteFastCurrentStateER9HVACState+0x64>)
    18a0:	4798      	blx	r3
    18a2:	60b8      	str	r0, [r7, #8]
	return	w;
    18a4:	68bb      	ldr	r3, [r7, #8]
}
    18a6:	4618      	mov	r0, r3
    18a8:	3710      	adds	r7, #16
    18aa:	46bd      	mov	sp, r7
    18ac:	bd80      	pop	{r7, pc}
    18ae:	bf00      	nop
    18b0:	200014c0 	.word	0x200014c0
    18b4:	000018c5 	.word	0x000018c5
    18b8:	20002ba8 	.word	0x20002ba8
    18bc:	000014ad 	.word	0x000014ad
    18c0:	000018fd 	.word	0x000018fd

000018c4 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem>:
uint32_t	FastStorage_Class::WriteFastAppState(HVACState& hs,uint32_t add){
    18c4:	b590      	push	{r4, r7, lr}
    18c6:	b087      	sub	sp, #28
    18c8:	af00      	add	r7, sp, #0
    18ca:	60f8      	str	r0, [r7, #12]
    18cc:	60b9      	str	r1, [r7, #8]
    18ce:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    18d0:	68ba      	ldr	r2, [r7, #8]
    18d2:	68fb      	ldr	r3, [r7, #12]
    18d4:	601a      	str	r2, [r3, #0]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)handlerAppState,(uint16_t)add,sizeof(HVACState));
    18d6:	68fb      	ldr	r3, [r7, #12]
    18d8:	6819      	ldr	r1, [r3, #0]
    18da:	687b      	ldr	r3, [r7, #4]
    18dc:	b29a      	uxth	r2, r3
    18de:	2370      	movs	r3, #112	; 0x70
    18e0:	4804      	ldr	r0, [pc, #16]	; (18f4 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x30>)
    18e2:	4c05      	ldr	r4, [pc, #20]	; (18f8 <_ZN17FastStorage_Class17WriteFastAppStateER9HVACStatem+0x34>)
    18e4:	47a0      	blx	r4
    18e6:	6178      	str	r0, [r7, #20]
	return	w;
    18e8:	697b      	ldr	r3, [r7, #20]
}
    18ea:	4618      	mov	r0, r3
    18ec:	371c      	adds	r7, #28
    18ee:	46bd      	mov	sp, r7
    18f0:	bd90      	pop	{r4, r7, pc}
    18f2:	bf00      	nop
    18f4:	20009d58 	.word	0x20009d58
    18f8:	000156e1 	.word	0x000156e1

000018fc <_ZN17FastStorage_Class20WriteFastCRCAppStateEm>:
uint32_t	FastStorage_Class::WriteFastCRCAppState(uint32_t crc){
    18fc:	b590      	push	{r4, r7, lr}
    18fe:	b085      	sub	sp, #20
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
    1904:	6039      	str	r1, [r7, #0]
	uint16_t	add=(uint32_t)&eepromMap->crcAppState;
    1906:	4b08      	ldr	r3, [pc, #32]	; (1928 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x2c>)
    1908:	681b      	ldr	r3, [r3, #0]
    190a:	3304      	adds	r3, #4
    190c:	81fb      	strh	r3, [r7, #14]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&crc),(uint16_t)add,sizeof(uint32_t));
    190e:	89fa      	ldrh	r2, [r7, #14]
    1910:	4639      	mov	r1, r7
    1912:	2304      	movs	r3, #4
    1914:	4805      	ldr	r0, [pc, #20]	; (192c <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x30>)
    1916:	4c06      	ldr	r4, [pc, #24]	; (1930 <_ZN17FastStorage_Class20WriteFastCRCAppStateEm+0x34>)
    1918:	47a0      	blx	r4
    191a:	60b8      	str	r0, [r7, #8]
	return	w;
    191c:	68bb      	ldr	r3, [r7, #8]
}
    191e:	4618      	mov	r0, r3
    1920:	3714      	adds	r7, #20
    1922:	46bd      	mov	sp, r7
    1924:	bd90      	pop	{r4, r7, pc}
    1926:	bf00      	nop
    1928:	200014c0 	.word	0x200014c0
    192c:	20009d58 	.word	0x20009d58
    1930:	000156e1 	.word	0x000156e1

00001934 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv>:
	uint32_t	add32=(uint32_t)&eepromMap->parameters;
	uint8_t		add8=(uint8_t)(0xff&&add32);
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&up),add8,sizeof(UserParameters));
	return	w;
}
uint32_t	FastStorage_Class::WriteFastDefaultParameters(void){
    1934:	b590      	push	{r4, r7, lr}
    1936:	b087      	sub	sp, #28
    1938:	af00      	add	r7, sp, #0
    193a:	6078      	str	r0, [r7, #4]
	UserParameters up=defaultParameters;
    193c:	4b0d      	ldr	r3, [pc, #52]	; (1974 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x40>)
    193e:	781b      	ldrb	r3, [r3, #0]
    1940:	723b      	strb	r3, [r7, #8]
	uint32_t	add32=(uint32_t)&eepromMap->parameters;
    1942:	4b0d      	ldr	r3, [pc, #52]	; (1978 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x44>)
    1944:	681b      	ldr	r3, [r3, #0]
    1946:	3301      	adds	r3, #1
    1948:	617b      	str	r3, [r7, #20]
	uint8_t		add8=(uint8_t)(0xff&&add32);
    194a:	697b      	ldr	r3, [r7, #20]
    194c:	2b00      	cmp	r3, #0
    194e:	bf14      	ite	ne
    1950:	2301      	movne	r3, #1
    1952:	2300      	moveq	r3, #0
    1954:	b2db      	uxtb	r3, r3
    1956:	74fb      	strb	r3, [r7, #19]
	uint32_t	w=eeprom.WriteAddress((uint8_t*)(&up),add8,sizeof(UserParameters));
    1958:	7cfa      	ldrb	r2, [r7, #19]
    195a:	f107 0108 	add.w	r1, r7, #8
    195e:	2301      	movs	r3, #1
    1960:	4806      	ldr	r0, [pc, #24]	; (197c <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x48>)
    1962:	4c07      	ldr	r4, [pc, #28]	; (1980 <_ZN17FastStorage_Class26WriteFastDefaultParametersEv+0x4c>)
    1964:	47a0      	blx	r4
    1966:	60f8      	str	r0, [r7, #12]
	return	w;
    1968:	68fb      	ldr	r3, [r7, #12]
    196a:	4618      	mov	r0, r3
    196c:	371c      	adds	r7, #28
    196e:	46bd      	mov	sp, r7
    1970:	bd90      	pop	{r4, r7, pc}
    1972:	bf00      	nop
    1974:	00020e9c 	.word	0x00020e9c
    1978:	200014c0 	.word	0x200014c0
    197c:	20009d58 	.word	0x20009d58
    1980:	00015581 	.word	0x00015581

00001984 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
    1984:	b480      	push	{r7}
    1986:	b083      	sub	sp, #12
    1988:	af00      	add	r7, sp, #0
    198a:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
    198c:	687b      	ldr	r3, [r7, #4]
    198e:	4618      	mov	r0, r3
    1990:	370c      	adds	r7, #12
    1992:	46bd      	mov	sp, r7
    1994:	bc80      	pop	{r7}
    1996:	4770      	bx	lr

00001998 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
    1998:	b480      	push	{r7}
    199a:	b083      	sub	sp, #12
    199c:	af00      	add	r7, sp, #0
    199e:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	4618      	mov	r0, r3
    19a4:	370c      	adds	r7, #12
    19a6:	46bd      	mov	sp, r7
    19a8:	bc80      	pop	{r7}
    19aa:	4770      	bx	lr

000019ac <_ZL16Fv1StatusChangedv>:
#include "I2C_Asyn_Class.h"
#include "MemoryManagment_Class.h"
FlapperValve_Class	*ptrFlapperValveClass;
I2C_Asyn_Class		i2cFVs(&I2C_EXPANDER);

static void	Fv1StatusChanged(void){
    19ac:	b480      	push	{r7}
    19ae:	af00      	add	r7, sp, #0
	
	ptrFlapperValveClass->fv1StatusChanged=true;
    19b0:	4b04      	ldr	r3, [pc, #16]	; (19c4 <_ZL16Fv1StatusChangedv+0x18>)
    19b2:	681b      	ldr	r3, [r3, #0]
    19b4:	2201      	movs	r2, #1
    19b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

}
    19ba:	bf00      	nop
    19bc:	46bd      	mov	sp, r7
    19be:	bc80      	pop	{r7}
    19c0:	4770      	bx	lr
    19c2:	bf00      	nop
    19c4:	200014c4 	.word	0x200014c4

000019c8 <_ZL16Fv2StatusChangedv>:
static void	Fv2StatusChanged(void){
    19c8:	b480      	push	{r7}
    19ca:	af00      	add	r7, sp, #0
	
	ptrFlapperValveClass->fv2StatusChanged=true;
    19cc:	4b04      	ldr	r3, [pc, #16]	; (19e0 <_ZL16Fv2StatusChangedv+0x18>)
    19ce:	681b      	ldr	r3, [r3, #0]
    19d0:	2201      	movs	r2, #1
    19d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

}
    19d6:	bf00      	nop
    19d8:	46bd      	mov	sp, r7
    19da:	bc80      	pop	{r7}
    19dc:	4770      	bx	lr
    19de:	bf00      	nop
    19e0:	200014c4 	.word	0x200014c4

000019e4 <_ZL20I2CFlapperValvesInitv>:

static bool	I2CFlapperValvesInit(void){
    19e4:	b580      	push	{r7, lr}
    19e6:	b082      	sub	sp, #8
    19e8:	af00      	add	r7, sp, #0
	 bool ok= i2cFVs.Init();
    19ea:	4805      	ldr	r0, [pc, #20]	; (1a00 <_ZL20I2CFlapperValvesInitv+0x1c>)
    19ec:	4b05      	ldr	r3, [pc, #20]	; (1a04 <_ZL20I2CFlapperValvesInitv+0x20>)
    19ee:	4798      	blx	r3
    19f0:	4603      	mov	r3, r0
    19f2:	71fb      	strb	r3, [r7, #7]
	 //ptrFlapperValveClass->isOK=ok;
}
    19f4:	bf00      	nop
    19f6:	4618      	mov	r0, r3
    19f8:	3708      	adds	r7, #8
    19fa:	46bd      	mov	sp, r7
    19fc:	bd80      	pop	{r7, pc}
    19fe:	bf00      	nop
    1a00:	200014c8 	.word	0x200014c8
    1a04:	00014915 	.word	0x00014915

00001a08 <_ZN18FlapperValve_ClassC1Eh>:

FlapperValve_Class::FlapperValve_Class(uint8_t id)
    1a08:	b5b0      	push	{r4, r5, r7, lr}
    1a0a:	b082      	sub	sp, #8
    1a0c:	af00      	add	r7, sp, #0
    1a0e:	6078      	str	r0, [r7, #4]
    1a10:	460b      	mov	r3, r1
    1a12:	70fb      	strb	r3, [r7, #3]
    1a14:	687b      	ldr	r3, [r7, #4]
    1a16:	4618      	mov	r0, r3
    1a18:	4b10      	ldr	r3, [pc, #64]	; (1a5c <_ZN18FlapperValve_ClassC1Eh+0x54>)
    1a1a:	4798      	blx	r3
    1a1c:	687b      	ldr	r3, [r7, #4]
    1a1e:	3340      	adds	r3, #64	; 0x40
    1a20:	2403      	movs	r4, #3
    1a22:	461d      	mov	r5, r3
    1a24:	2c00      	cmp	r4, #0
    1a26:	db05      	blt.n	1a34 <_ZN18FlapperValve_ClassC1Eh+0x2c>
    1a28:	4628      	mov	r0, r5
    1a2a:	4b0d      	ldr	r3, [pc, #52]	; (1a60 <_ZN18FlapperValve_ClassC1Eh+0x58>)
    1a2c:	4798      	blx	r3
    1a2e:	3520      	adds	r5, #32
    1a30:	3c01      	subs	r4, #1
    1a32:	e7f7      	b.n	1a24 <_ZN18FlapperValve_ClassC1Eh+0x1c>
{	
	valveID=id;
    1a34:	687b      	ldr	r3, [r7, #4]
    1a36:	78fa      	ldrb	r2, [r7, #3]
    1a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i2cDescr=&I2C_EXPANDER;
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	4a09      	ldr	r2, [pc, #36]	; (1a64 <_ZN18FlapperValve_ClassC1Eh+0x5c>)
    1a40:	639a      	str	r2, [r3, #56]	; 0x38
	ptrFlapperValveClass=this;
    1a42:	4a09      	ldr	r2, [pc, #36]	; (1a68 <_ZN18FlapperValve_ClassC1Eh+0x60>)
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	6013      	str	r3, [r2, #0]
	isOK=false;
    1a48:	687b      	ldr	r3, [r7, #4]
    1a4a:	2200      	movs	r2, #0
    1a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
} //FlapperValve_Class
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	4618      	mov	r0, r3
    1a54:	3708      	adds	r7, #8
    1a56:	46bd      	mov	sp, r7
    1a58:	bdb0      	pop	{r4, r5, r7, pc}
    1a5a:	bf00      	nop
    1a5c:	00001985 	.word	0x00001985
    1a60:	00014c29 	.word	0x00014c29
    1a64:	2000a644 	.word	0x2000a644
    1a68:	200014c4 	.word	0x200014c4

00001a6c <_ZN18FlapperValve_ClassD1Ev>:
	i2cDescr=&I2C_EXPANDER;
	ptrFlapperValveClass=this;
} //FlapperValve_Class

// default destructor
FlapperValve_Class::~FlapperValve_Class()
    1a6c:	b590      	push	{r4, r7, lr}
    1a6e:	b083      	sub	sp, #12
    1a70:	af00      	add	r7, sp, #0
    1a72:	6078      	str	r0, [r7, #4]
    1a74:	687b      	ldr	r3, [r7, #4]
    1a76:	3340      	adds	r3, #64	; 0x40
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d00c      	beq.n	1a96 <_ZN18FlapperValve_ClassD1Ev+0x2a>
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	3340      	adds	r3, #64	; 0x40
    1a80:	f103 0480 	add.w	r4, r3, #128	; 0x80
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	3340      	adds	r3, #64	; 0x40
    1a88:	42a3      	cmp	r3, r4
    1a8a:	d004      	beq.n	1a96 <_ZN18FlapperValve_ClassD1Ev+0x2a>
    1a8c:	3c20      	subs	r4, #32
    1a8e:	4620      	mov	r0, r4
    1a90:	4b05      	ldr	r3, [pc, #20]	; (1aa8 <_ZN18FlapperValve_ClassD1Ev+0x3c>)
    1a92:	4798      	blx	r3
    1a94:	e7f6      	b.n	1a84 <_ZN18FlapperValve_ClassD1Ev+0x18>
    1a96:	687b      	ldr	r3, [r7, #4]
    1a98:	4618      	mov	r0, r3
    1a9a:	4b04      	ldr	r3, [pc, #16]	; (1aac <_ZN18FlapperValve_ClassD1Ev+0x40>)
    1a9c:	4798      	blx	r3
{
} //~FlapperValve_Class
    1a9e:	687b      	ldr	r3, [r7, #4]
    1aa0:	4618      	mov	r0, r3
    1aa2:	370c      	adds	r7, #12
    1aa4:	46bd      	mov	sp, r7
    1aa6:	bd90      	pop	{r4, r7, pc}
    1aa8:	00014c3d 	.word	0x00014c3d
    1aac:	00001999 	.word	0x00001999

00001ab0 <_ZN18FlapperValve_Class4InitEv>:


bool	FlapperValve_Class::Init(void){
    1ab0:	b580      	push	{r7, lr}
    1ab2:	b082      	sub	sp, #8
    1ab4:	af00      	add	r7, sp, #0
    1ab6:	6078      	str	r0, [r7, #4]
	ptrFlapperValveClass=this;
    1ab8:	4a1f      	ldr	r2, [pc, #124]	; (1b38 <_ZN18FlapperValve_Class4InitEv+0x88>)
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	6013      	str	r3, [r2, #0]
		if (i2cFVs.initiated==false)
    1abe:	4b1f      	ldr	r3, [pc, #124]	; (1b3c <_ZN18FlapperValve_Class4InitEv+0x8c>)
    1ac0:	7d9b      	ldrb	r3, [r3, #22]
    1ac2:	f083 0301 	eor.w	r3, r3, #1
    1ac6:	b2db      	uxtb	r3, r3
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d006      	beq.n	1ada <_ZN18FlapperValve_Class4InitEv+0x2a>
		{
				isOK=I2CFlapperValvesInit();
    1acc:	4b1c      	ldr	r3, [pc, #112]	; (1b40 <_ZN18FlapperValve_Class4InitEv+0x90>)
    1ace:	4798      	blx	r3
    1ad0:	4603      	mov	r3, r0
    1ad2:	461a      	mov	r2, r3
    1ad4:	687b      	ldr	r3, [r7, #4]
    1ad6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}
	
		if (i2cFVs.isOK)
    1ada:	4b18      	ldr	r3, [pc, #96]	; (1b3c <_ZN18FlapperValve_Class4InitEv+0x8c>)
    1adc:	7e1b      	ldrb	r3, [r3, #24]
    1ade:	b2db      	uxtb	r3, r3
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d021      	beq.n	1b28 <_ZN18FlapperValve_Class4InitEv+0x78>
		{
			if (valveID==1)
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    1aea:	2b01      	cmp	r3, #1
    1aec:	d104      	bne.n	1af8 <_ZN18FlapperValve_Class4InitEv+0x48>
			{
				ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
    1aee:	4915      	ldr	r1, [pc, #84]	; (1b44 <_ZN18FlapperValve_Class4InitEv+0x94>)
    1af0:	2004      	movs	r0, #4
    1af2:	4b15      	ldr	r3, [pc, #84]	; (1b48 <_ZN18FlapperValve_Class4InitEv+0x98>)
    1af4:	4798      	blx	r3
    1af6:	e008      	b.n	1b0a <_ZN18FlapperValve_Class4InitEv+0x5a>
			} 
			else if  (valveID==2)
    1af8:	687b      	ldr	r3, [r7, #4]
    1afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    1afe:	2b02      	cmp	r3, #2
    1b00:	d103      	bne.n	1b0a <_ZN18FlapperValve_Class4InitEv+0x5a>
			{
				ext_irq_register(PIN_PA05,FUNC_PTR(Fv2StatusChanged));	
    1b02:	4912      	ldr	r1, [pc, #72]	; (1b4c <_ZN18FlapperValve_Class4InitEv+0x9c>)
    1b04:	2005      	movs	r0, #5
    1b06:	4b10      	ldr	r3, [pc, #64]	; (1b48 <_ZN18FlapperValve_Class4InitEv+0x98>)
    1b08:	4798      	blx	r3
			}
			InitExpanderArray(valveID);
    1b0a:	687b      	ldr	r3, [r7, #4]
    1b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    1b10:	4619      	mov	r1, r3
    1b12:	6878      	ldr	r0, [r7, #4]
    1b14:	4b0e      	ldr	r3, [pc, #56]	; (1b50 <_ZN18FlapperValve_Class4InitEv+0xa0>)
    1b16:	4798      	blx	r3
			isOK=Selftest();
    1b18:	6878      	ldr	r0, [r7, #4]
    1b1a:	4b0e      	ldr	r3, [pc, #56]	; (1b54 <_ZN18FlapperValve_Class4InitEv+0xa4>)
    1b1c:	4798      	blx	r3
    1b1e:	4603      	mov	r3, r0
    1b20:	461a      	mov	r2, r3
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		} 
		else
		{
		}
		return isOK;
    1b28:	687b      	ldr	r3, [r7, #4]
    1b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    1b2e:	b2db      	uxtb	r3, r3
}
    1b30:	4618      	mov	r0, r3
    1b32:	3708      	adds	r7, #8
    1b34:	46bd      	mov	sp, r7
    1b36:	bd80      	pop	{r7, pc}
    1b38:	200014c4 	.word	0x200014c4
    1b3c:	200014c8 	.word	0x200014c8
    1b40:	000019e5 	.word	0x000019e5
    1b44:	000019ad 	.word	0x000019ad
    1b48:	0000613d 	.word	0x0000613d
    1b4c:	000019c9 	.word	0x000019c9
    1b50:	00001b59 	.word	0x00001b59
    1b54:	00001bb9 	.word	0x00001bb9

00001b58 <_ZN18FlapperValve_Class17InitExpanderArrayEh>:
uint8_t FlapperValve_Class::InitExpanderArray(uint8_t fvID){
    1b58:	b580      	push	{r7, lr}
    1b5a:	b084      	sub	sp, #16
    1b5c:	af00      	add	r7, sp, #0
    1b5e:	6078      	str	r0, [r7, #4]
    1b60:	460b      	mov	r3, r1
    1b62:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    1b64:	2300      	movs	r3, #0
    1b66:	60fb      	str	r3, [r7, #12]
    1b68:	68fb      	ldr	r3, [r7, #12]
    1b6a:	2b03      	cmp	r3, #3
    1b6c:	dc1b      	bgt.n	1ba6 <_ZN18FlapperValve_Class17InitExpanderArrayEh+0x4e>
	{
		currentExpander=&(expanders[i]);
    1b6e:	68fb      	ldr	r3, [r7, #12]
    1b70:	3302      	adds	r3, #2
    1b72:	015b      	lsls	r3, r3, #5
    1b74:	687a      	ldr	r2, [r7, #4]
    1b76:	441a      	add	r2, r3
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		currentExpander->Init(i+(fvID-1)*FLAPPER_VALVE_EXPANDERS,&i2cFVs);
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
    1b84:	78fb      	ldrb	r3, [r7, #3]
    1b86:	3b01      	subs	r3, #1
    1b88:	b2db      	uxtb	r3, r3
    1b8a:	009b      	lsls	r3, r3, #2
    1b8c:	b2da      	uxtb	r2, r3
    1b8e:	68fb      	ldr	r3, [r7, #12]
    1b90:	b2db      	uxtb	r3, r3
    1b92:	4413      	add	r3, r2
    1b94:	b2db      	uxtb	r3, r3
    1b96:	4a06      	ldr	r2, [pc, #24]	; (1bb0 <_ZN18FlapperValve_Class17InitExpanderArrayEh+0x58>)
    1b98:	4619      	mov	r1, r3
    1b9a:	4b06      	ldr	r3, [pc, #24]	; (1bb4 <_ZN18FlapperValve_Class17InitExpanderArrayEh+0x5c>)
    1b9c:	4798      	blx	r3
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
    1b9e:	68fb      	ldr	r3, [r7, #12]
    1ba0:	3301      	adds	r3, #1
    1ba2:	60fb      	str	r3, [r7, #12]
    1ba4:	e7e0      	b.n	1b68 <_ZN18FlapperValve_Class17InitExpanderArrayEh+0x10>
	}
}
    1ba6:	bf00      	nop
    1ba8:	4618      	mov	r0, r3
    1baa:	3710      	adds	r7, #16
    1bac:	46bd      	mov	sp, r7
    1bae:	bd80      	pop	{r7, pc}
    1bb0:	200014c8 	.word	0x200014c8
    1bb4:	00014c51 	.word	0x00014c51

00001bb8 <_ZN18FlapperValve_Class8SelftestEv>:
void FlapperValve_Class::UpdateFlapperValveData(){
	fvData.controlStatus=ReadControlStatus();
	fvData.statusInputs=ReadStatusInputs();
	fvData.actualPosition=ReadActualPosition();
}
bool FlapperValve_Class::Selftest(void){
    1bb8:	b580      	push	{r7, lr}
    1bba:	b084      	sub	sp, #16
    1bbc:	af00      	add	r7, sp, #0
    1bbe:	6078      	str	r0, [r7, #4]
	UserParameters up;
	memory.ReadFastParameters(up);
    1bc0:	f107 030c 	add.w	r3, r7, #12
    1bc4:	4619      	mov	r1, r3
    1bc6:	4804      	ldr	r0, [pc, #16]	; (1bd8 <_ZN18FlapperValve_Class8SelftestEv+0x20>)
    1bc8:	4b04      	ldr	r3, [pc, #16]	; (1bdc <_ZN18FlapperValve_Class8SelftestEv+0x24>)
    1bca:	4798      	blx	r3
//	WriteSetpoint(up.flapperValveOffset);
	//UpdateFlapperValveData();
	//isOK=ReadSetpoint()==up.flapperValveOffset;
	//return isOK;
	return true;
    1bcc:	2301      	movs	r3, #1
}
    1bce:	4618      	mov	r0, r3
    1bd0:	3710      	adds	r7, #16
    1bd2:	46bd      	mov	sp, r7
    1bd4:	bd80      	pop	{r7, pc}
    1bd6:	bf00      	nop
    1bd8:	20002d3c 	.word	0x20002d3c
    1bdc:	0000181d 	.word	0x0000181d

00001be0 <_Z41__static_initialization_and_destruction_0ii>:

FlapperValve_Class::operator bool(){
	return	isOK;
}

    1be0:	b580      	push	{r7, lr}
    1be2:	b082      	sub	sp, #8
    1be4:	af00      	add	r7, sp, #0
    1be6:	6078      	str	r0, [r7, #4]
    1be8:	6039      	str	r1, [r7, #0]
    1bea:	687b      	ldr	r3, [r7, #4]
    1bec:	2b01      	cmp	r3, #1
    1bee:	d116      	bne.n	1c1e <_Z41__static_initialization_and_destruction_0ii+0x3e>
    1bf0:	683b      	ldr	r3, [r7, #0]
    1bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1bf6:	4293      	cmp	r3, r2
    1bf8:	d111      	bne.n	1c1e <_Z41__static_initialization_and_destruction_0ii+0x3e>
I2C_Asyn_Class		i2cFVs(&I2C_EXPANDER);
    1bfa:	490b      	ldr	r1, [pc, #44]	; (1c28 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    1bfc:	480b      	ldr	r0, [pc, #44]	; (1c2c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    1bfe:	4b0c      	ldr	r3, [pc, #48]	; (1c30 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    1c00:	4798      	blx	r3
    1c02:	4a0c      	ldr	r2, [pc, #48]	; (1c34 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    1c04:	490c      	ldr	r1, [pc, #48]	; (1c38 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    1c06:	4809      	ldr	r0, [pc, #36]	; (1c2c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    1c08:	4b0c      	ldr	r3, [pc, #48]	; (1c3c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1c0a:	4798      	blx	r3
    1c0c:	2101      	movs	r1, #1
    1c0e:	480c      	ldr	r0, [pc, #48]	; (1c40 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1c10:	4b0c      	ldr	r3, [pc, #48]	; (1c44 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    1c12:	4798      	blx	r3
    1c14:	4a07      	ldr	r2, [pc, #28]	; (1c34 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    1c16:	490c      	ldr	r1, [pc, #48]	; (1c48 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    1c18:	4809      	ldr	r0, [pc, #36]	; (1c40 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    1c1a:	4b08      	ldr	r3, [pc, #32]	; (1c3c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    1c1c:	4798      	blx	r3
    1c1e:	bf00      	nop
    1c20:	3708      	adds	r7, #8
    1c22:	46bd      	mov	sp, r7
    1c24:	bd80      	pop	{r7, pc}
    1c26:	bf00      	nop
    1c28:	2000a644 	.word	0x2000a644
    1c2c:	200014c8 	.word	0x200014c8
    1c30:	00014885 	.word	0x00014885
    1c34:	20000000 	.word	0x20000000
    1c38:	000148c9 	.word	0x000148c9
    1c3c:	00018bf5 	.word	0x00018bf5
    1c40:	2000150c 	.word	0x2000150c
    1c44:	00001a09 	.word	0x00001a09
    1c48:	00001a6d 	.word	0x00001a6d

00001c4c <_GLOBAL__sub_I_ptrFlapperValveClass>:
    1c4c:	b580      	push	{r7, lr}
    1c4e:	af00      	add	r7, sp, #0
    1c50:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1c54:	2001      	movs	r0, #1
    1c56:	4b01      	ldr	r3, [pc, #4]	; (1c5c <_GLOBAL__sub_I_ptrFlapperValveClass+0x10>)
    1c58:	4798      	blx	r3
    1c5a:	bd80      	pop	{r7, pc}
    1c5c:	00001be1 	.word	0x00001be1

00001c60 <_ZN16Interfaces_ClassC1Ev>:
#include "Error_Labelling_Class.h"
#include "Maintenance_Tool.h"


// default constructor
Interfaces_Class::Interfaces_Class()
    1c60:	b480      	push	{r7}
    1c62:	b083      	sub	sp, #12
    1c64:	af00      	add	r7, sp, #0
    1c66:	6078      	str	r0, [r7, #4]
{
	
} //Interfaces_Class
    1c68:	687b      	ldr	r3, [r7, #4]
    1c6a:	4618      	mov	r0, r3
    1c6c:	370c      	adds	r7, #12
    1c6e:	46bd      	mov	sp, r7
    1c70:	bc80      	pop	{r7}
    1c72:	4770      	bx	lr

00001c74 <_ZN16Interfaces_ClassD1Ev>:

// default destructor
Interfaces_Class::~Interfaces_Class()
    1c74:	b480      	push	{r7}
    1c76:	b083      	sub	sp, #12
    1c78:	af00      	add	r7, sp, #0
    1c7a:	6078      	str	r0, [r7, #4]
{
} //~Interfaces_Class
    1c7c:	687b      	ldr	r3, [r7, #4]
    1c7e:	4618      	mov	r0, r3
    1c80:	370c      	adds	r7, #12
    1c82:	46bd      	mov	sp, r7
    1c84:	bc80      	pop	{r7}
    1c86:	4770      	bx	lr

00001c88 <_ZN16Interfaces_Class4InitEv>:

CommunicationRequest	Interfaces_Class::request;

bool	Interfaces_Class::Init(){
    1c88:	b580      	push	{r7, lr}
    1c8a:	b084      	sub	sp, #16
    1c8c:	af00      	add	r7, sp, #0
    1c8e:	6078      	str	r0, [r7, #4]
	size=sizeof(CommunicationRequest);
    1c90:	687b      	ldr	r3, [r7, #4]
    1c92:	2205      	movs	r2, #5
    1c94:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	result=arinc.Init();
    1c98:	4817      	ldr	r0, [pc, #92]	; (1cf8 <_ZN16Interfaces_Class4InitEv+0x70>)
    1c9a:	4b18      	ldr	r3, [pc, #96]	; (1cfc <_ZN16Interfaces_Class4InitEv+0x74>)
    1c9c:	4798      	blx	r3
    1c9e:	4603      	mov	r3, r0
    1ca0:	461a      	mov	r2, r3
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if (result==0x01)
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1cae:	2b01      	cmp	r3, #1
    1cb0:	d106      	bne.n	1cc0 <_ZN16Interfaces_Class4InitEv+0x38>
	{
		arinc.TrasmitSingleLabel();
    1cb2:	4811      	ldr	r0, [pc, #68]	; (1cf8 <_ZN16Interfaces_Class4InitEv+0x70>)
    1cb4:	4b12      	ldr	r3, [pc, #72]	; (1d00 <_ZN16Interfaces_Class4InitEv+0x78>)
    1cb6:	4798      	blx	r3
		if (maintenance.IsAppConnected())
    1cb8:	4812      	ldr	r0, [pc, #72]	; (1d04 <_ZN16Interfaces_Class4InitEv+0x7c>)
    1cba:	4b13      	ldr	r3, [pc, #76]	; (1d08 <_ZN16Interfaces_Class4InitEv+0x80>)
    1cbc:	4798      	blx	r3
    1cbe:	e00f      	b.n	1ce0 <_ZN16Interfaces_Class4InitEv+0x58>
		{
		}
	} 
	else
	{
		alu.NotifyError(kARINCINnterfaceError,result);
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    1cc6:	f107 030c 	add.w	r3, r7, #12
    1cca:	4611      	mov	r1, r2
    1ccc:	4618      	mov	r0, r3
    1cce:	4b0f      	ldr	r3, [pc, #60]	; (1d0c <_ZN16Interfaces_Class4InitEv+0x84>)
    1cd0:	4798      	blx	r3
    1cd2:	f107 030c 	add.w	r3, r7, #12
    1cd6:	461a      	mov	r2, r3
    1cd8:	2100      	movs	r1, #0
    1cda:	480d      	ldr	r0, [pc, #52]	; (1d10 <_ZN16Interfaces_Class4InitEv+0x88>)
    1cdc:	4b0d      	ldr	r3, [pc, #52]	; (1d14 <_ZN16Interfaces_Class4InitEv+0x8c>)
    1cde:	4798      	blx	r3
	}
	return result;
    1ce0:	687b      	ldr	r3, [r7, #4]
    1ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	bf14      	ite	ne
    1cea:	2301      	movne	r3, #1
    1cec:	2300      	moveq	r3, #0
    1cee:	b2db      	uxtb	r3, r3
}
    1cf0:	4618      	mov	r0, r3
    1cf2:	3710      	adds	r7, #16
    1cf4:	46bd      	mov	sp, r7
    1cf6:	bd80      	pop	{r7, pc}
    1cf8:	20008ea4 	.word	0x20008ea4
    1cfc:	00012ea1 	.word	0x00012ea1
    1d00:	00013215 	.word	0x00013215
    1d04:	2000a378 	.word	0x2000a378
    1d08:	00018aa1 	.word	0x00018aa1
    1d0c:	000003a9 	.word	0x000003a9
    1d10:	20000c88 	.word	0x20000c88
    1d14:	000009cd 	.word	0x000009cd

00001d18 <_ZN16Interfaces_Class18CheckCommunicationEv>:

CommunicationRequest Interfaces_Class::CheckCommunication(void)
{
    1d18:	b580      	push	{r7, lr}
    1d1a:	b086      	sub	sp, #24
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	6078      	str	r0, [r7, #4]
    1d20:	6039      	str	r1, [r7, #0]
	event e;
    1d22:	f107 0308 	add.w	r3, r7, #8
    1d26:	4618      	mov	r0, r3
    1d28:	4b09      	ldr	r3, [pc, #36]	; (1d50 <_ZN16Interfaces_Class18CheckCommunicationEv+0x38>)
    1d2a:	4798      	blx	r3
	CommunicationRequest	r;
	CheckInternalCommunication();
    1d2c:	6838      	ldr	r0, [r7, #0]
    1d2e:	4b09      	ldr	r3, [pc, #36]	; (1d54 <_ZN16Interfaces_Class18CheckCommunicationEv+0x3c>)
    1d30:	4798      	blx	r3
	CheckExternalCommunication();
    1d32:	6838      	ldr	r0, [r7, #0]
    1d34:	4b08      	ldr	r3, [pc, #32]	; (1d58 <_ZN16Interfaces_Class18CheckCommunicationEv+0x40>)
    1d36:	4798      	blx	r3
	r=request;
    1d38:	687b      	ldr	r3, [r7, #4]
    1d3a:	4a08      	ldr	r2, [pc, #32]	; (1d5c <_ZN16Interfaces_Class18CheckCommunicationEv+0x44>)
    1d3c:	6810      	ldr	r0, [r2, #0]
    1d3e:	6018      	str	r0, [r3, #0]
    1d40:	7912      	ldrb	r2, [r2, #4]
    1d42:	711a      	strb	r2, [r3, #4]
	
	return	r;
    1d44:	bf00      	nop
}
    1d46:	6878      	ldr	r0, [r7, #4]
    1d48:	3718      	adds	r7, #24
    1d4a:	46bd      	mov	sp, r7
    1d4c:	bd80      	pop	{r7, pc}
    1d4e:	bf00      	nop
    1d50:	000003c5 	.word	0x000003c5
    1d54:	00001dd9 	.word	0x00001dd9
    1d58:	00001e19 	.word	0x00001e19
    1d5c:	20001604 	.word	0x20001604

00001d60 <_ZN16Interfaces_Class22IsCommunicationRequestEv>:

bool	Interfaces_Class::IsCommunicationRequest(void){
    1d60:	b580      	push	{r7, lr}
    1d62:	b086      	sub	sp, #24
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
	bool arr[sizeof(CommunicationRequest)];
	CommunicationRequest r=CheckCommunication();
    1d68:	f107 0308 	add.w	r3, r7, #8
    1d6c:	6879      	ldr	r1, [r7, #4]
    1d6e:	4618      	mov	r0, r3
    1d70:	4b17      	ldr	r3, [pc, #92]	; (1dd0 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x70>)
    1d72:	4798      	blx	r3
	uint8_t result=0;
    1d74:	2300      	movs	r3, #0
    1d76:	75fb      	strb	r3, [r7, #23]
	memcpy((void*)arr,(void*)&r,size);
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
    1d7e:	461a      	mov	r2, r3
    1d80:	f107 0108 	add.w	r1, r7, #8
    1d84:	f107 0310 	add.w	r3, r7, #16
    1d88:	4618      	mov	r0, r3
    1d8a:	4b12      	ldr	r3, [pc, #72]	; (1dd4 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x74>)
    1d8c:	4798      	blx	r3
	for (uint8_t ii = 0; ii < size; ii++)
    1d8e:	2300      	movs	r3, #0
    1d90:	75bb      	strb	r3, [r7, #22]
    1d92:	7dbb      	ldrb	r3, [r7, #22]
    1d94:	687a      	ldr	r2, [r7, #4]
    1d96:	f892 2088 	ldrb.w	r2, [r2, #136]	; 0x88
    1d9a:	4293      	cmp	r3, r2
    1d9c:	da0d      	bge.n	1dba <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x5a>
	{
		result|=arr[ii];
    1d9e:	7dbb      	ldrb	r3, [r7, #22]
    1da0:	f107 0218 	add.w	r2, r7, #24
    1da4:	4413      	add	r3, r2
    1da6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    1daa:	461a      	mov	r2, r3
    1dac:	7dfb      	ldrb	r3, [r7, #23]
    1dae:	4313      	orrs	r3, r2
    1db0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t ii = 0; ii < size; ii++)
    1db2:	7dbb      	ldrb	r3, [r7, #22]
    1db4:	3301      	adds	r3, #1
    1db6:	75bb      	strb	r3, [r7, #22]
    1db8:	e7eb      	b.n	1d92 <_ZN16Interfaces_Class22IsCommunicationRequestEv+0x32>
	}
	return	result>0;
    1dba:	7dfb      	ldrb	r3, [r7, #23]
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	bfcc      	ite	gt
    1dc0:	2301      	movgt	r3, #1
    1dc2:	2300      	movle	r3, #0
    1dc4:	b2db      	uxtb	r3, r3
}
    1dc6:	4618      	mov	r0, r3
    1dc8:	3718      	adds	r7, #24
    1dca:	46bd      	mov	sp, r7
    1dcc:	bd80      	pop	{r7, pc}
    1dce:	bf00      	nop
    1dd0:	00001d19 	.word	0x00001d19
    1dd4:	0001b35d 	.word	0x0001b35d

00001dd8 <_ZN16Interfaces_Class26CheckInternalCommunicationEv>:

uint32_t Interfaces_Class::CheckInternalCommunication(void)
{
    1dd8:	b580      	push	{r7, lr}
    1dda:	b084      	sub	sp, #16
    1ddc:	af00      	add	r7, sp, #0
    1dde:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1de0:	2300      	movs	r3, #0
    1de2:	60fb      	str	r3, [r7, #12]
	request.internRequest.I2CExpanderGotMessage=CheckI2CExpander(1);
    1de4:	2101      	movs	r1, #1
    1de6:	6878      	ldr	r0, [r7, #4]
    1de8:	4b08      	ldr	r3, [pc, #32]	; (1e0c <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x34>)
    1dea:	4798      	blx	r3
    1dec:	4603      	mov	r3, r0
    1dee:	461a      	mov	r2, r3
    1df0:	4b07      	ldr	r3, [pc, #28]	; (1e10 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    1df2:	705a      	strb	r2, [r3, #1]
	request.internRequest.LTC2983GotMessage=CheckTemperatures();
    1df4:	6878      	ldr	r0, [r7, #4]
    1df6:	4b07      	ldr	r3, [pc, #28]	; (1e14 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x3c>)
    1df8:	4798      	blx	r3
    1dfa:	4603      	mov	r3, r0
    1dfc:	461a      	mov	r2, r3
    1dfe:	4b04      	ldr	r3, [pc, #16]	; (1e10 <_ZN16Interfaces_Class26CheckInternalCommunicationEv+0x38>)
    1e00:	701a      	strb	r2, [r3, #0]
	return	0;
    1e02:	2300      	movs	r3, #0
}
    1e04:	4618      	mov	r0, r3
    1e06:	3710      	adds	r7, #16
    1e08:	46bd      	mov	sp, r7
    1e0a:	bd80      	pop	{r7, pc}
    1e0c:	00001e8d 	.word	0x00001e8d
    1e10:	20001604 	.word	0x20001604
    1e14:	00001f49 	.word	0x00001f49

00001e18 <_ZN16Interfaces_Class26CheckExternalCommunicationEv>:
uint32_t Interfaces_Class::CheckExternalCommunication(void)
{
    1e18:	b580      	push	{r7, lr}
    1e1a:	b084      	sub	sp, #16
    1e1c:	af00      	add	r7, sp, #0
    1e1e:	6078      	str	r0, [r7, #4]
	uint32_t	r=0;
    1e20:	2300      	movs	r3, #0
    1e22:	60fb      	str	r3, [r7, #12]


	if (arinc.newMessageR1)
    1e24:	4b14      	ldr	r3, [pc, #80]	; (1e78 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
    1e26:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d007      	beq.n	1e40 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x28>
	{
		request.externRequest.arinc1GotMessage=true;
    1e30:	4b12      	ldr	r3, [pc, #72]	; (1e7c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1e32:	2201      	movs	r2, #1
    1e34:	709a      	strb	r2, [r3, #2]
		alu.PrepareNewTask(kALUTaskReadARINCR1);
    1e36:	2200      	movs	r2, #0
    1e38:	2104      	movs	r1, #4
    1e3a:	4811      	ldr	r0, [pc, #68]	; (1e80 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x68>)
    1e3c:	4b11      	ldr	r3, [pc, #68]	; (1e84 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x6c>)
    1e3e:	4798      	blx	r3
	}
	if (arinc.newMessageR2)
    1e40:	4b0d      	ldr	r3, [pc, #52]	; (1e78 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x60>)
    1e42:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
    1e46:	b2db      	uxtb	r3, r3
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d007      	beq.n	1e5c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x44>
	{
		request.externRequest.arinc2GotMessage=true;
    1e4c:	4b0b      	ldr	r3, [pc, #44]	; (1e7c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1e4e:	2201      	movs	r2, #1
    1e50:	70da      	strb	r2, [r3, #3]
		alu.PrepareNewTask(kALUTaskReadARINCR2);
    1e52:	2200      	movs	r2, #0
    1e54:	2105      	movs	r1, #5
    1e56:	480a      	ldr	r0, [pc, #40]	; (1e80 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x68>)
    1e58:	4b0a      	ldr	r3, [pc, #40]	; (1e84 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x6c>)
    1e5a:	4798      	blx	r3
	}
	if (CheckUSBInterface())
    1e5c:	6878      	ldr	r0, [r7, #4]
    1e5e:	4b0a      	ldr	r3, [pc, #40]	; (1e88 <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x70>)
    1e60:	4798      	blx	r3
    1e62:	4603      	mov	r3, r0
    1e64:	2b00      	cmp	r3, #0
    1e66:	d002      	beq.n	1e6e <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x56>
	{
		request.externRequest.usbGotMessage=true;
    1e68:	4b04      	ldr	r3, [pc, #16]	; (1e7c <_ZN16Interfaces_Class26CheckExternalCommunicationEv+0x64>)
    1e6a:	2201      	movs	r2, #1
    1e6c:	711a      	strb	r2, [r3, #4]
		//alu.PrepareNewTask(kALUTaskReadARINCR2);
	}
	//request.externRequest.arinc1GotMessage=arinc.newMessageR2;
	
	return	0;
    1e6e:	2300      	movs	r3, #0
}
    1e70:	4618      	mov	r0, r3
    1e72:	3710      	adds	r7, #16
    1e74:	46bd      	mov	sp, r7
    1e76:	bd80      	pop	{r7, pc}
    1e78:	20008ea4 	.word	0x20008ea4
    1e7c:	20001604 	.word	0x20001604
    1e80:	20000c88 	.word	0x20000c88
    1e84:	000009f9 	.word	0x000009f9
    1e88:	00001ec5 	.word	0x00001ec5

00001e8c <_ZN16Interfaces_Class16CheckI2CExpanderEh>:
bool	Interfaces_Class::CheckI2CExpander(uint8_t add){
    1e8c:	b580      	push	{r7, lr}
    1e8e:	b082      	sub	sp, #8
    1e90:	af00      	add	r7, sp, #0
    1e92:	6078      	str	r0, [r7, #4]
    1e94:	460b      	mov	r3, r1
    1e96:	70fb      	strb	r3, [r7, #3]
		if (mcp.hasChanged)
    1e98:	4b08      	ldr	r3, [pc, #32]	; (1ebc <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1e9a:	785b      	ldrb	r3, [r3, #1]
    1e9c:	b2db      	uxtb	r3, r3
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d005      	beq.n	1eae <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x22>
		{
			mcp.SavePorts();
    1ea2:	4806      	ldr	r0, [pc, #24]	; (1ebc <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1ea4:	4b06      	ldr	r3, [pc, #24]	; (1ec0 <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x34>)
    1ea6:	4798      	blx	r3
			mcp.hasChanged=false;
    1ea8:	4b04      	ldr	r3, [pc, #16]	; (1ebc <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1eaa:	2200      	movs	r2, #0
    1eac:	705a      	strb	r2, [r3, #1]
		}
		return	mcp.hasChanged;
    1eae:	4b03      	ldr	r3, [pc, #12]	; (1ebc <_ZN16Interfaces_Class16CheckI2CExpanderEh+0x30>)
    1eb0:	785b      	ldrb	r3, [r3, #1]
    1eb2:	b2db      	uxtb	r3, r3
}
    1eb4:	4618      	mov	r0, r3
    1eb6:	3708      	adds	r7, #8
    1eb8:	46bd      	mov	sp, r7
    1eba:	bd80      	pop	{r7, pc}
    1ebc:	20009b08 	.word	0x20009b08
    1ec0:	00014ddd 	.word	0x00014ddd

00001ec4 <_ZN16Interfaces_Class17CheckUSBInterfaceEv>:
bool	Interfaces_Class::CheckUSBInterface(void){
    1ec4:	b580      	push	{r7, lr}
    1ec6:	b082      	sub	sp, #8
    1ec8:	af00      	add	r7, sp, #0
    1eca:	6078      	str	r0, [r7, #4]
		if (usb.connected)
    1ecc:	4b13      	ldr	r3, [pc, #76]	; (1f1c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1ece:	7c1b      	ldrb	r3, [r3, #16]
    1ed0:	b2db      	uxtb	r3, r3
    1ed2:	2b00      	cmp	r3, #0
    1ed4:	d01b      	beq.n	1f0e <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x4a>
		{
			if (maintenance.IsAppConnected())
    1ed6:	4812      	ldr	r0, [pc, #72]	; (1f20 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x5c>)
    1ed8:	4b12      	ldr	r3, [pc, #72]	; (1f24 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x60>)
    1eda:	4798      	blx	r3
    1edc:	4603      	mov	r3, r0
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d009      	beq.n	1ef6 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x32>
			{
				usb<<"Maintenance Tool Locked"<<NEWLINE;
    1ee2:	4911      	ldr	r1, [pc, #68]	; (1f28 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x64>)
    1ee4:	480d      	ldr	r0, [pc, #52]	; (1f1c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1ee6:	4b11      	ldr	r3, [pc, #68]	; (1f2c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x68>)
    1ee8:	4798      	blx	r3
    1eea:	4603      	mov	r3, r0
    1eec:	4910      	ldr	r1, [pc, #64]	; (1f30 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    1eee:	4618      	mov	r0, r3
    1ef0:	4b10      	ldr	r3, [pc, #64]	; (1f34 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    1ef2:	4798      	blx	r3
    1ef4:	e008      	b.n	1f08 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x44>
			} 
			else
			{
				usb<<"Remote operation Disabled"<<NEWLINE;
    1ef6:	4910      	ldr	r1, [pc, #64]	; (1f38 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x74>)
    1ef8:	4808      	ldr	r0, [pc, #32]	; (1f1c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1efa:	4b10      	ldr	r3, [pc, #64]	; (1f3c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x78>)
    1efc:	4798      	blx	r3
    1efe:	4603      	mov	r3, r0
    1f00:	490b      	ldr	r1, [pc, #44]	; (1f30 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x6c>)
    1f02:	4618      	mov	r0, r3
    1f04:	4b0b      	ldr	r3, [pc, #44]	; (1f34 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x70>)
    1f06:	4798      	blx	r3
			}
			hvac.PrintState();
    1f08:	480d      	ldr	r0, [pc, #52]	; (1f40 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x7c>)
    1f0a:	4b0e      	ldr	r3, [pc, #56]	; (1f44 <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x80>)
    1f0c:	4798      	blx	r3
		}else{
						
		}
		return	usb.rxReady;
    1f0e:	4b03      	ldr	r3, [pc, #12]	; (1f1c <_ZN16Interfaces_Class17CheckUSBInterfaceEv+0x58>)
    1f10:	7d5b      	ldrb	r3, [r3, #21]
    1f12:	b2db      	uxtb	r3, r3
}
    1f14:	4618      	mov	r0, r3
    1f16:	3708      	adds	r7, #8
    1f18:	46bd      	mov	sp, r7
    1f1a:	bd80      	pop	{r7, pc}
    1f1c:	2000a258 	.word	0x2000a258
    1f20:	2000a378 	.word	0x2000a378
    1f24:	00018aa1 	.word	0x00018aa1
    1f28:	0001f578 	.word	0x0001f578
    1f2c:	00002029 	.word	0x00002029
    1f30:	0001f590 	.word	0x0001f590
    1f34:	00000c75 	.word	0x00000c75
    1f38:	0001f594 	.word	0x0001f594
    1f3c:	00002049 	.word	0x00002049
    1f40:	200081ac 	.word	0x200081ac
    1f44:	00001251 	.word	0x00001251

00001f48 <_ZN16Interfaces_Class17CheckTemperaturesEv>:

bool	Interfaces_Class::CheckTemperatures(void){
    1f48:	b580      	push	{r7, lr}
    1f4a:	b084      	sub	sp, #16
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	6078      	str	r0, [r7, #4]
	bool result(false);
    1f50:	2300      	movs	r3, #0
    1f52:	73fb      	strb	r3, [r7, #15]
	if (temperatures.IsConversionFinished())
    1f54:	4816      	ldr	r0, [pc, #88]	; (1fb0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x68>)
    1f56:	4b17      	ldr	r3, [pc, #92]	; (1fb4 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x6c>)
    1f58:	4798      	blx	r3
    1f5a:	4603      	mov	r3, r0
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	d022      	beq.n	1fa6 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x5e>
	{
		
		temperatures.GetConversionResult();
    1f60:	4813      	ldr	r0, [pc, #76]	; (1fb0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x68>)
    1f62:	4b15      	ldr	r3, [pc, #84]	; (1fb8 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x70>)
    1f64:	4798      	blx	r3
		if (temperatures.faultData==VALID_TEMPERATURE)
    1f66:	4b12      	ldr	r3, [pc, #72]	; (1fb0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x68>)
    1f68:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    1f6c:	2b01      	cmp	r3, #1
    1f6e:	d116      	bne.n	1f9e <_ZN16Interfaces_Class17CheckTemperaturesEv+0x56>
		{
			if (lastTemperature!=temperatures.values[0][1])
    1f70:	687b      	ldr	r3, [r7, #4]
    1f72:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1f76:	4b0e      	ldr	r3, [pc, #56]	; (1fb0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x68>)
    1f78:	6e59      	ldr	r1, [r3, #100]	; 0x64
    1f7a:	4b10      	ldr	r3, [pc, #64]	; (1fbc <_ZN16Interfaces_Class17CheckTemperaturesEv+0x74>)
    1f7c:	4610      	mov	r0, r2
    1f7e:	4798      	blx	r3
    1f80:	4603      	mov	r3, r0
    1f82:	2b00      	cmp	r3, #0
    1f84:	d10b      	bne.n	1f9e <_ZN16Interfaces_Class17CheckTemperaturesEv+0x56>
			{
				lastTemperature=temperatures.values[0][1];
    1f86:	4b0a      	ldr	r3, [pc, #40]	; (1fb0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x68>)
    1f88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				alu.PrepareNewTask(kALUTaskUpdateTemperatures);
    1f90:	2200      	movs	r2, #0
    1f92:	210a      	movs	r1, #10
    1f94:	480a      	ldr	r0, [pc, #40]	; (1fc0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x78>)
    1f96:	4b0b      	ldr	r3, [pc, #44]	; (1fc4 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x7c>)
    1f98:	4798      	blx	r3
				result=true;
    1f9a:	2301      	movs	r3, #1
    1f9c:	73fb      	strb	r3, [r7, #15]
			}
				
		}
			temperatures.StartOneConversion();
    1f9e:	4804      	ldr	r0, [pc, #16]	; (1fb0 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x68>)
    1fa0:	4b09      	ldr	r3, [pc, #36]	; (1fc8 <_ZN16Interfaces_Class17CheckTemperaturesEv+0x80>)
    1fa2:	4798      	blx	r3
			asm("nop");
    1fa4:	bf00      	nop
	
	} 
	else
	{
	}
	return	result;
    1fa6:	7bfb      	ldrb	r3, [r7, #15]
}
    1fa8:	4618      	mov	r0, r3
    1faa:	3710      	adds	r7, #16
    1fac:	46bd      	mov	sp, r7
    1fae:	bd80      	pop	{r7, pc}
    1fb0:	20009b78 	.word	0x20009b78
    1fb4:	00015235 	.word	0x00015235
    1fb8:	00015145 	.word	0x00015145
    1fbc:	0001acc1 	.word	0x0001acc1
    1fc0:	20000c88 	.word	0x20000c88
    1fc4:	000009f9 	.word	0x000009f9
    1fc8:	000150d9 	.word	0x000150d9

00001fcc <_ZN16Interfaces_Class9GetStatusER10HVACStatus>:
	{
		
	}
	return	arinc.newMessageR1||arinc.newMessageR2;
}
uint32_t	Interfaces_Class::GetStatus(HVACStatus& s){
    1fcc:	b490      	push	{r4, r7}
    1fce:	b084      	sub	sp, #16
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	6078      	str	r0, [r7, #4]
    1fd4:	6039      	str	r1, [r7, #0]
	s=status;
    1fd6:	683a      	ldr	r2, [r7, #0]
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	4614      	mov	r4, r2
    1fdc:	3370      	adds	r3, #112	; 0x70
    1fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	*p=(uint32_t*)(&s.statusBits);
    1fe4:	683b      	ldr	r3, [r7, #0]
    1fe6:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    1fe8:	2300      	movs	r3, #0
    1fea:	60bb      	str	r3, [r7, #8]
    1fec:	68bb      	ldr	r3, [r7, #8]
    1fee:	2b08      	cmp	r3, #8
    1ff0:	d812      	bhi.n	2018 <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x4c>
	{
		s.rawStatus+=(*p)&(0x01<<i);
    1ff2:	683b      	ldr	r3, [r7, #0]
    1ff4:	68da      	ldr	r2, [r3, #12]
    1ff6:	68fb      	ldr	r3, [r7, #12]
    1ff8:	681b      	ldr	r3, [r3, #0]
    1ffa:	2001      	movs	r0, #1
    1ffc:	68b9      	ldr	r1, [r7, #8]
    1ffe:	fa00 f101 	lsl.w	r1, r0, r1
    2002:	400b      	ands	r3, r1
    2004:	441a      	add	r2, r3
    2006:	683b      	ldr	r3, [r7, #0]
    2008:	60da      	str	r2, [r3, #12]
		p++;
    200a:	68fb      	ldr	r3, [r7, #12]
    200c:	3304      	adds	r3, #4
    200e:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<sizeof(status.statusBits);i++)
    2010:	68bb      	ldr	r3, [r7, #8]
    2012:	3301      	adds	r3, #1
    2014:	60bb      	str	r3, [r7, #8]
    2016:	e7e9      	b.n	1fec <_ZN16Interfaces_Class9GetStatusER10HVACStatus+0x20>
	}
	return	status.rawStatus;
    2018:	687b      	ldr	r3, [r7, #4]
    201a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
    201c:	4618      	mov	r0, r3
    201e:	3710      	adds	r7, #16
    2020:	46bd      	mov	sp, r7
    2022:	bc90      	pop	{r4, r7}
    2024:	4770      	bx	lr
	...

00002028 <_ZlsIA24_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2028:	b580      	push	{r7, lr}
    202a:	b082      	sub	sp, #8
    202c:	af00      	add	r7, sp, #0
    202e:	6078      	str	r0, [r7, #4]
    2030:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2032:	6839      	ldr	r1, [r7, #0]
    2034:	6878      	ldr	r0, [r7, #4]
    2036:	4b03      	ldr	r3, [pc, #12]	; (2044 <_ZlsIA24_cER5PrintS2_RKT_+0x1c>)
    2038:	4798      	blx	r3
    203a:	687b      	ldr	r3, [r7, #4]
    203c:	4618      	mov	r0, r3
    203e:	3708      	adds	r7, #8
    2040:	46bd      	mov	sp, r7
    2042:	bd80      	pop	{r7, pc}
    2044:	000177b5 	.word	0x000177b5

00002048 <_ZlsIA26_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2048:	b580      	push	{r7, lr}
    204a:	b082      	sub	sp, #8
    204c:	af00      	add	r7, sp, #0
    204e:	6078      	str	r0, [r7, #4]
    2050:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2052:	6839      	ldr	r1, [r7, #0]
    2054:	6878      	ldr	r0, [r7, #4]
    2056:	4b03      	ldr	r3, [pc, #12]	; (2064 <_ZlsIA26_cER5PrintS2_RKT_+0x1c>)
    2058:	4798      	blx	r3
    205a:	687b      	ldr	r3, [r7, #4]
    205c:	4618      	mov	r0, r3
    205e:	3708      	adds	r7, #8
    2060:	46bd      	mov	sp, r7
    2062:	bd80      	pop	{r7, pc}
    2064:	000177b5 	.word	0x000177b5

00002068 <_Z41__static_initialization_and_destruction_0ii>:
Interfaces_Class	interfaces;
    2068:	b580      	push	{r7, lr}
    206a:	b082      	sub	sp, #8
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]
    2070:	6039      	str	r1, [r7, #0]
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	2b01      	cmp	r3, #1
    2076:	d11c      	bne.n	20b2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    2078:	683b      	ldr	r3, [r7, #0]
    207a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    207e:	4293      	cmp	r3, r2
    2080:	d117      	bne.n	20b2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
    2082:	480e      	ldr	r0, [pc, #56]	; (20bc <_Z41__static_initialization_and_destruction_0ii+0x54>)
    2084:	4b0e      	ldr	r3, [pc, #56]	; (20c0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    2086:	4798      	blx	r3
    2088:	4a0e      	ldr	r2, [pc, #56]	; (20c4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    208a:	490f      	ldr	r1, [pc, #60]	; (20c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    208c:	480b      	ldr	r0, [pc, #44]	; (20bc <_Z41__static_initialization_and_destruction_0ii+0x54>)
    208e:	4b0f      	ldr	r3, [pc, #60]	; (20cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
    2090:	4798      	blx	r3
    2092:	480f      	ldr	r0, [pc, #60]	; (20d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    2094:	4b0f      	ldr	r3, [pc, #60]	; (20d4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    2096:	4798      	blx	r3
    2098:	4a0a      	ldr	r2, [pc, #40]	; (20c4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    209a:	490f      	ldr	r1, [pc, #60]	; (20d8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    209c:	480c      	ldr	r0, [pc, #48]	; (20d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    209e:	4b0b      	ldr	r3, [pc, #44]	; (20cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
    20a0:	4798      	blx	r3
    20a2:	480e      	ldr	r0, [pc, #56]	; (20dc <_Z41__static_initialization_and_destruction_0ii+0x74>)
    20a4:	4b0e      	ldr	r3, [pc, #56]	; (20e0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    20a6:	4798      	blx	r3
    20a8:	4a06      	ldr	r2, [pc, #24]	; (20c4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    20aa:	490e      	ldr	r1, [pc, #56]	; (20e4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    20ac:	480b      	ldr	r0, [pc, #44]	; (20dc <_Z41__static_initialization_and_destruction_0ii+0x74>)
    20ae:	4b07      	ldr	r3, [pc, #28]	; (20cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
    20b0:	4798      	blx	r3
    20b2:	bf00      	nop
    20b4:	3708      	adds	r7, #8
    20b6:	46bd      	mov	sp, r7
    20b8:	bd80      	pop	{r7, pc}
    20ba:	bf00      	nop
    20bc:	200015e4 	.word	0x200015e4
    20c0:	00002be1 	.word	0x00002be1
    20c4:	20000000 	.word	0x20000000
    20c8:	00002bfb 	.word	0x00002bfb
    20cc:	00018bf5 	.word	0x00018bf5
    20d0:	200015f8 	.word	0x200015f8
    20d4:	00000f91 	.word	0x00000f91
    20d8:	00000fab 	.word	0x00000fab
    20dc:	2000160c 	.word	0x2000160c
    20e0:	00001c61 	.word	0x00001c61
    20e4:	00001c75 	.word	0x00001c75

000020e8 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev>:
    20e8:	b580      	push	{r7, lr}
    20ea:	af00      	add	r7, sp, #0
    20ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    20f0:	2001      	movs	r0, #1
    20f2:	4b01      	ldr	r3, [pc, #4]	; (20f8 <_GLOBAL__sub_I__ZN16Interfaces_ClassC2Ev+0x10>)
    20f4:	4798      	blx	r3
    20f6:	bd80      	pop	{r7, pc}
    20f8:	00002069 	.word	0x00002069

000020fc <main>:
		
	}
}

int main(void)
{
    20fc:	b580      	push	{r7, lr}
    20fe:	b082      	sub	sp, #8
    2100:	af00      	add	r7, sp, #0
	atmel_start_init();
    2102:	4b40      	ldr	r3, [pc, #256]	; (2204 <main+0x108>)
    2104:	4798      	blx	r3
//  	uint32_t p=pwm_enable(&LIVE_PULSE);
//  	while (1);

	usb.Init();
    2106:	4840      	ldr	r0, [pc, #256]	; (2208 <main+0x10c>)
    2108:	4b40      	ldr	r3, [pc, #256]	; (220c <main+0x110>)
    210a:	4798      	blx	r3
	delay_ms(100);
    210c:	2064      	movs	r0, #100	; 0x64
    210e:	4b40      	ldr	r3, [pc, #256]	; (2210 <main+0x114>)
    2110:	4798      	blx	r3
	usb<<NEWLINE<<NEWLINE<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    2112:	4940      	ldr	r1, [pc, #256]	; (2214 <main+0x118>)
    2114:	483c      	ldr	r0, [pc, #240]	; (2208 <main+0x10c>)
    2116:	4b40      	ldr	r3, [pc, #256]	; (2218 <main+0x11c>)
    2118:	4798      	blx	r3
    211a:	4603      	mov	r3, r0
    211c:	493d      	ldr	r1, [pc, #244]	; (2214 <main+0x118>)
    211e:	4618      	mov	r0, r3
    2120:	4b3d      	ldr	r3, [pc, #244]	; (2218 <main+0x11c>)
    2122:	4798      	blx	r3
    2124:	4603      	mov	r3, r0
    2126:	493d      	ldr	r1, [pc, #244]	; (221c <main+0x120>)
    2128:	4618      	mov	r0, r3
    212a:	4b3d      	ldr	r3, [pc, #244]	; (2220 <main+0x124>)
    212c:	4798      	blx	r3
    212e:	4603      	mov	r3, r0
    2130:	4938      	ldr	r1, [pc, #224]	; (2214 <main+0x118>)
    2132:	4618      	mov	r0, r3
    2134:	4b38      	ldr	r3, [pc, #224]	; (2218 <main+0x11c>)
    2136:	4798      	blx	r3
	usb<<"*** Date:  "<<__DATE__<<" Time: "<<__TIME__<<NEWLINE<<NEWLINE;
    2138:	493a      	ldr	r1, [pc, #232]	; (2224 <main+0x128>)
    213a:	4833      	ldr	r0, [pc, #204]	; (2208 <main+0x10c>)
    213c:	4b3a      	ldr	r3, [pc, #232]	; (2228 <main+0x12c>)
    213e:	4798      	blx	r3
    2140:	4603      	mov	r3, r0
    2142:	493a      	ldr	r1, [pc, #232]	; (222c <main+0x130>)
    2144:	4618      	mov	r0, r3
    2146:	4b38      	ldr	r3, [pc, #224]	; (2228 <main+0x12c>)
    2148:	4798      	blx	r3
    214a:	4603      	mov	r3, r0
    214c:	4938      	ldr	r1, [pc, #224]	; (2230 <main+0x134>)
    214e:	4618      	mov	r0, r3
    2150:	4b38      	ldr	r3, [pc, #224]	; (2234 <main+0x138>)
    2152:	4798      	blx	r3
    2154:	4603      	mov	r3, r0
    2156:	4938      	ldr	r1, [pc, #224]	; (2238 <main+0x13c>)
    2158:	4618      	mov	r0, r3
    215a:	4b38      	ldr	r3, [pc, #224]	; (223c <main+0x140>)
    215c:	4798      	blx	r3
    215e:	4603      	mov	r3, r0
    2160:	492c      	ldr	r1, [pc, #176]	; (2214 <main+0x118>)
    2162:	4618      	mov	r0, r3
    2164:	4b2c      	ldr	r3, [pc, #176]	; (2218 <main+0x11c>)
    2166:	4798      	blx	r3
    2168:	4603      	mov	r3, r0
    216a:	492a      	ldr	r1, [pc, #168]	; (2214 <main+0x118>)
    216c:	4618      	mov	r0, r3
    216e:	4b2a      	ldr	r3, [pc, #168]	; (2218 <main+0x11c>)
    2170:	4798      	blx	r3
	//QSPIDriverTest();
	memory.Init();
    2172:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    2176:	4832      	ldr	r0, [pc, #200]	; (2240 <main+0x144>)
    2178:	4b32      	ldr	r3, [pc, #200]	; (2244 <main+0x148>)
    217a:	4798      	blx	r3
	alu.Init();
    217c:	4832      	ldr	r0, [pc, #200]	; (2248 <main+0x14c>)
    217e:	4b33      	ldr	r3, [pc, #204]	; (224c <main+0x150>)
    2180:	4798      	blx	r3
	alu.RunController();
    2182:	4831      	ldr	r0, [pc, #196]	; (2248 <main+0x14c>)
    2184:	4b32      	ldr	r3, [pc, #200]	; (2250 <main+0x154>)
    2186:	4798      	blx	r3
	usb<<"*** ALU initiated ***"<<NEWLINE;
    2188:	4932      	ldr	r1, [pc, #200]	; (2254 <main+0x158>)
    218a:	481f      	ldr	r0, [pc, #124]	; (2208 <main+0x10c>)
    218c:	4b32      	ldr	r3, [pc, #200]	; (2258 <main+0x15c>)
    218e:	4798      	blx	r3
    2190:	4603      	mov	r3, r0
    2192:	4920      	ldr	r1, [pc, #128]	; (2214 <main+0x118>)
    2194:	4618      	mov	r0, r3
    2196:	4b20      	ldr	r3, [pc, #128]	; (2218 <main+0x11c>)
    2198:	4798      	blx	r3
	uint8_t	line= alu.GetSelectedAMMC();
    219a:	482b      	ldr	r0, [pc, #172]	; (2248 <main+0x14c>)
    219c:	4b2f      	ldr	r3, [pc, #188]	; (225c <main+0x160>)
    219e:	4798      	blx	r3
    21a0:	4603      	mov	r3, r0
    21a2:	71fb      	strb	r3, [r7, #7]
	usb<<"Active line: "<<line<<NEWLINE;
    21a4:	492e      	ldr	r1, [pc, #184]	; (2260 <main+0x164>)
    21a6:	4818      	ldr	r0, [pc, #96]	; (2208 <main+0x10c>)
    21a8:	4b2e      	ldr	r3, [pc, #184]	; (2264 <main+0x168>)
    21aa:	4798      	blx	r3
    21ac:	4602      	mov	r2, r0
    21ae:	1dfb      	adds	r3, r7, #7
    21b0:	4619      	mov	r1, r3
    21b2:	4610      	mov	r0, r2
    21b4:	4b2c      	ldr	r3, [pc, #176]	; (2268 <main+0x16c>)
    21b6:	4798      	blx	r3
    21b8:	4603      	mov	r3, r0
    21ba:	4916      	ldr	r1, [pc, #88]	; (2214 <main+0x118>)
    21bc:	4618      	mov	r0, r3
    21be:	4b16      	ldr	r3, [pc, #88]	; (2218 <main+0x11c>)
    21c0:	4798      	blx	r3
	if (!pBit)
    21c2:	482a      	ldr	r0, [pc, #168]	; (226c <main+0x170>)
    21c4:	4b2a      	ldr	r3, [pc, #168]	; (2270 <main+0x174>)
    21c6:	4798      	blx	r3
    21c8:	4603      	mov	r3, r0
    21ca:	f083 0301 	eor.w	r3, r3, #1
    21ce:	b2db      	uxtb	r3, r3
    21d0:	2b00      	cmp	r3, #0
    21d2:	d004      	beq.n	21de <main+0xe2>
	{
		hvac.Stop(0);
    21d4:	2100      	movs	r1, #0
    21d6:	4827      	ldr	r0, [pc, #156]	; (2274 <main+0x178>)
    21d8:	4b27      	ldr	r3, [pc, #156]	; (2278 <main+0x17c>)
    21da:	4798      	blx	r3
    21dc:	e003      	b.n	21e6 <main+0xea>
	} 
	else
	{
		hvac.Start(0);
    21de:	2100      	movs	r1, #0
    21e0:	4824      	ldr	r0, [pc, #144]	; (2274 <main+0x178>)
    21e2:	4b26      	ldr	r3, [pc, #152]	; (227c <main+0x180>)
    21e4:	4798      	blx	r3
	}
    /* Replace with your application code */
    while (1) 
    {
		delay_ms(1000);
    21e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    21ea:	4b09      	ldr	r3, [pc, #36]	; (2210 <main+0x114>)
    21ec:	4798      	blx	r3
		usb<<"*** StartUp Algorithmen Test ***"<<NEWLINE;
    21ee:	490b      	ldr	r1, [pc, #44]	; (221c <main+0x120>)
    21f0:	4805      	ldr	r0, [pc, #20]	; (2208 <main+0x10c>)
    21f2:	4b0b      	ldr	r3, [pc, #44]	; (2220 <main+0x124>)
    21f4:	4798      	blx	r3
    21f6:	4603      	mov	r3, r0
    21f8:	4906      	ldr	r1, [pc, #24]	; (2214 <main+0x118>)
    21fa:	4618      	mov	r0, r3
    21fc:	4b06      	ldr	r3, [pc, #24]	; (2218 <main+0x11c>)
    21fe:	4798      	blx	r3
		delay_ms(1000);
    2200:	e7f1      	b.n	21e6 <main+0xea>
    2202:	bf00      	nop
    2204:	00004355 	.word	0x00004355
    2208:	2000a258 	.word	0x2000a258
    220c:	00017301 	.word	0x00017301
    2210:	000060a9 	.word	0x000060a9
    2214:	0001f5f4 	.word	0x0001f5f4
    2218:	00000c75 	.word	0x00000c75
    221c:	0001f62c 	.word	0x0001f62c
    2220:	00002281 	.word	0x00002281
    2224:	0001f650 	.word	0x0001f650
    2228:	000022a1 	.word	0x000022a1
    222c:	0001f65c 	.word	0x0001f65c
    2230:	0001f668 	.word	0x0001f668
    2234:	000022c1 	.word	0x000022c1
    2238:	0001f670 	.word	0x0001f670
    223c:	000022e1 	.word	0x000022e1
    2240:	200026bc 	.word	0x200026bc
    2244:	000024b9 	.word	0x000024b9
    2248:	20000c88 	.word	0x20000c88
    224c:	00000481 	.word	0x00000481
    2250:	000005e1 	.word	0x000005e1
    2254:	0001f67c 	.word	0x0001f67c
    2258:	00002301 	.word	0x00002301
    225c:	00000769 	.word	0x00000769
    2260:	0001f694 	.word	0x0001f694
    2264:	00002321 	.word	0x00002321
    2268:	00000c4d 	.word	0x00000c4d
    226c:	2000169c 	.word	0x2000169c
    2270:	00002c0f 	.word	0x00002c0f
    2274:	200081ac 	.word	0x200081ac
    2278:	00003c4d 	.word	0x00003c4d
    227c:	0000312d 	.word	0x0000312d

00002280 <_ZlsIA33_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2280:	b580      	push	{r7, lr}
    2282:	b082      	sub	sp, #8
    2284:	af00      	add	r7, sp, #0
    2286:	6078      	str	r0, [r7, #4]
    2288:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    228a:	6839      	ldr	r1, [r7, #0]
    228c:	6878      	ldr	r0, [r7, #4]
    228e:	4b03      	ldr	r3, [pc, #12]	; (229c <_ZlsIA33_cER5PrintS2_RKT_+0x1c>)
    2290:	4798      	blx	r3
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	4618      	mov	r0, r3
    2296:	3708      	adds	r7, #8
    2298:	46bd      	mov	sp, r7
    229a:	bd80      	pop	{r7, pc}
    229c:	000177b5 	.word	0x000177b5

000022a0 <_ZlsIA12_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    22a0:	b580      	push	{r7, lr}
    22a2:	b082      	sub	sp, #8
    22a4:	af00      	add	r7, sp, #0
    22a6:	6078      	str	r0, [r7, #4]
    22a8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    22aa:	6839      	ldr	r1, [r7, #0]
    22ac:	6878      	ldr	r0, [r7, #4]
    22ae:	4b03      	ldr	r3, [pc, #12]	; (22bc <_ZlsIA12_cER5PrintS2_RKT_+0x1c>)
    22b0:	4798      	blx	r3
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	4618      	mov	r0, r3
    22b6:	3708      	adds	r7, #8
    22b8:	46bd      	mov	sp, r7
    22ba:	bd80      	pop	{r7, pc}
    22bc:	000177b5 	.word	0x000177b5

000022c0 <_ZlsIA8_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    22c0:	b580      	push	{r7, lr}
    22c2:	b082      	sub	sp, #8
    22c4:	af00      	add	r7, sp, #0
    22c6:	6078      	str	r0, [r7, #4]
    22c8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    22ca:	6839      	ldr	r1, [r7, #0]
    22cc:	6878      	ldr	r0, [r7, #4]
    22ce:	4b03      	ldr	r3, [pc, #12]	; (22dc <_ZlsIA8_cER5PrintS2_RKT_+0x1c>)
    22d0:	4798      	blx	r3
    22d2:	687b      	ldr	r3, [r7, #4]
    22d4:	4618      	mov	r0, r3
    22d6:	3708      	adds	r7, #8
    22d8:	46bd      	mov	sp, r7
    22da:	bd80      	pop	{r7, pc}
    22dc:	000177b5 	.word	0x000177b5

000022e0 <_ZlsIA9_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    22e0:	b580      	push	{r7, lr}
    22e2:	b082      	sub	sp, #8
    22e4:	af00      	add	r7, sp, #0
    22e6:	6078      	str	r0, [r7, #4]
    22e8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    22ea:	6839      	ldr	r1, [r7, #0]
    22ec:	6878      	ldr	r0, [r7, #4]
    22ee:	4b03      	ldr	r3, [pc, #12]	; (22fc <_ZlsIA9_cER5PrintS2_RKT_+0x1c>)
    22f0:	4798      	blx	r3
    22f2:	687b      	ldr	r3, [r7, #4]
    22f4:	4618      	mov	r0, r3
    22f6:	3708      	adds	r7, #8
    22f8:	46bd      	mov	sp, r7
    22fa:	bd80      	pop	{r7, pc}
    22fc:	000177b5 	.word	0x000177b5

00002300 <_ZlsIA22_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2300:	b580      	push	{r7, lr}
    2302:	b082      	sub	sp, #8
    2304:	af00      	add	r7, sp, #0
    2306:	6078      	str	r0, [r7, #4]
    2308:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    230a:	6839      	ldr	r1, [r7, #0]
    230c:	6878      	ldr	r0, [r7, #4]
    230e:	4b03      	ldr	r3, [pc, #12]	; (231c <_ZlsIA22_cER5PrintS2_RKT_+0x1c>)
    2310:	4798      	blx	r3
    2312:	687b      	ldr	r3, [r7, #4]
    2314:	4618      	mov	r0, r3
    2316:	3708      	adds	r7, #8
    2318:	46bd      	mov	sp, r7
    231a:	bd80      	pop	{r7, pc}
    231c:	000177b5 	.word	0x000177b5

00002320 <_ZlsIA14_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    2320:	b580      	push	{r7, lr}
    2322:	b082      	sub	sp, #8
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    232a:	6839      	ldr	r1, [r7, #0]
    232c:	6878      	ldr	r0, [r7, #4]
    232e:	4b03      	ldr	r3, [pc, #12]	; (233c <_ZlsIA14_cER5PrintS2_RKT_+0x1c>)
    2330:	4798      	blx	r3
    2332:	687b      	ldr	r3, [r7, #4]
    2334:	4618      	mov	r0, r3
    2336:	3708      	adds	r7, #8
    2338:	46bd      	mov	sp, r7
    233a:	bd80      	pop	{r7, pc}
    233c:	000177b5 	.word	0x000177b5

00002340 <_Z41__static_initialization_and_destruction_0ii>:
    }
}
    2340:	b580      	push	{r7, lr}
    2342:	b082      	sub	sp, #8
    2344:	af00      	add	r7, sp, #0
    2346:	6078      	str	r0, [r7, #4]
    2348:	6039      	str	r1, [r7, #0]
    234a:	687b      	ldr	r3, [r7, #4]
    234c:	2b01      	cmp	r3, #1
    234e:	d114      	bne.n	237a <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2350:	683b      	ldr	r3, [r7, #0]
    2352:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2356:	4293      	cmp	r3, r2
    2358:	d10f      	bne.n	237a <_Z41__static_initialization_and_destruction_0ii+0x3a>
    235a:	480a      	ldr	r0, [pc, #40]	; (2384 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    235c:	4b0a      	ldr	r3, [pc, #40]	; (2388 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    235e:	4798      	blx	r3
    2360:	4a0a      	ldr	r2, [pc, #40]	; (238c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    2362:	490b      	ldr	r1, [pc, #44]	; (2390 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    2364:	4807      	ldr	r0, [pc, #28]	; (2384 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2366:	4b0b      	ldr	r3, [pc, #44]	; (2394 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    2368:	4798      	blx	r3
    236a:	480b      	ldr	r0, [pc, #44]	; (2398 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    236c:	4b0b      	ldr	r3, [pc, #44]	; (239c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    236e:	4798      	blx	r3
    2370:	4a06      	ldr	r2, [pc, #24]	; (238c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    2372:	490b      	ldr	r1, [pc, #44]	; (23a0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    2374:	4808      	ldr	r0, [pc, #32]	; (2398 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    2376:	4b07      	ldr	r3, [pc, #28]	; (2394 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    2378:	4798      	blx	r3
    237a:	bf00      	nop
    237c:	3708      	adds	r7, #8
    237e:	46bd      	mov	sp, r7
    2380:	bd80      	pop	{r7, pc}
    2382:	bf00      	nop
    2384:	2000169c 	.word	0x2000169c
    2388:	00002be1 	.word	0x00002be1
    238c:	20000000 	.word	0x20000000
    2390:	00002bfb 	.word	0x00002bfb
    2394:	00018bf5 	.word	0x00018bf5
    2398:	200016b0 	.word	0x200016b0
    239c:	00000f91 	.word	0x00000f91
    23a0:	00000fab 	.word	0x00000fab

000023a4 <_GLOBAL__sub_I__Z14QSPIDriverTestv>:
    23a4:	b580      	push	{r7, lr}
    23a6:	af00      	add	r7, sp, #0
    23a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    23ac:	2001      	movs	r0, #1
    23ae:	4b01      	ldr	r3, [pc, #4]	; (23b4 <_GLOBAL__sub_I__Z14QSPIDriverTestv+0x10>)
    23b0:	4798      	blx	r3
    23b2:	bd80      	pop	{r7, pc}
    23b4:	00002341 	.word	0x00002341

000023b8 <_ZN19PersistenceServicesD1Ev>:

/*
 	Dient dem Zugriff auf software customization area, hardware description area,
	heating program area und dem persistentes Speichern von aktuellem Heizzustand.
*/
class PersistenceServices: public	CRC32_Class
    23b8:	b580      	push	{r7, lr}
    23ba:	b082      	sub	sp, #8
    23bc:	af00      	add	r7, sp, #0
    23be:	6078      	str	r0, [r7, #4]
    23c0:	687b      	ldr	r3, [r7, #4]
    23c2:	4618      	mov	r0, r3
    23c4:	4b03      	ldr	r3, [pc, #12]	; (23d4 <_ZN19PersistenceServicesD1Ev+0x1c>)
    23c6:	4798      	blx	r3
    23c8:	687b      	ldr	r3, [r7, #4]
    23ca:	4618      	mov	r0, r3
    23cc:	3708      	adds	r7, #8
    23ce:	46bd      	mov	sp, r7
    23d0:	bd80      	pop	{r7, pc}
    23d2:	bf00      	nop
    23d4:	0000143d 	.word	0x0000143d

000023d8 <_ZN21MemoryManagment_ClassC1Ev>:
#include "CDC_Class.h"

static	uint8_t	flashBufferStatic[QSPI_ERBLK/1];

// default constructor
MemoryManagment_Class::MemoryManagment_Class()
    23d8:	b580      	push	{r7, lr}
    23da:	b082      	sub	sp, #8
    23dc:	af00      	add	r7, sp, #0
    23de:	6078      	str	r0, [r7, #4]
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	4618      	mov	r0, r3
    23e4:	4b1a      	ldr	r3, [pc, #104]	; (2450 <_ZN21MemoryManagment_ClassC1Ev+0x78>)
    23e6:	4798      	blx	r3
    23e8:	687b      	ldr	r3, [r7, #4]
    23ea:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    23ee:	4618      	mov	r0, r3
    23f0:	4b18      	ldr	r3, [pc, #96]	; (2454 <_ZN21MemoryManagment_ClassC1Ev+0x7c>)
    23f2:	4798      	blx	r3
    23f4:	687b      	ldr	r3, [r7, #4]
    23f6:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    23fa:	4618      	mov	r0, r3
    23fc:	4b16      	ldr	r3, [pc, #88]	; (2458 <_ZN21MemoryManagment_ClassC1Ev+0x80>)
    23fe:	4798      	blx	r3
    2400:	687b      	ldr	r3, [r7, #4]
    2402:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
    2406:	4618      	mov	r0, r3
    2408:	4b14      	ldr	r3, [pc, #80]	; (245c <_ZN21MemoryManagment_ClassC1Ev+0x84>)
    240a:	4798      	blx	r3
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	f203 734c 	addw	r3, r3, #1868	; 0x74c
    2412:	4618      	mov	r0, r3
    2414:	4b12      	ldr	r3, [pc, #72]	; (2460 <_ZN21MemoryManagment_ClassC1Ev+0x88>)
    2416:	4798      	blx	r3
    2418:	687b      	ldr	r3, [r7, #4]
    241a:	2200      	movs	r2, #0
    241c:	f8c3 2980 	str.w	r2, [r3, #2432]	; 0x980
{
	_currentAddress=0;
    2420:	687b      	ldr	r3, [r7, #4]
    2422:	2200      	movs	r2, #0
    2424:	f8c3 296c 	str.w	r2, [r3, #2412]	; 0x96c
	head=512;
    2428:	687b      	ldr	r3, [r7, #4]
    242a:	f44f 7200 	mov.w	r2, #512	; 0x200
    242e:	f8c3 2984 	str.w	r2, [r3, #2436]	; 0x984
	tail=0;
    2432:	687b      	ldr	r3, [r7, #4]
    2434:	2200      	movs	r2, #0
    2436:	f8c3 2988 	str.w	r2, [r3, #2440]	; 0x988
	flashBuffer=&flashBufferStatic[0];
    243a:	687b      	ldr	r3, [r7, #4]
    243c:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2440:	3340      	adds	r3, #64	; 0x40
    2442:	4a08      	ldr	r2, [pc, #32]	; (2464 <_ZN21MemoryManagment_ClassC1Ev+0x8c>)
    2444:	601a      	str	r2, [r3, #0]
	
} //MemoryManagment_Class
    2446:	687b      	ldr	r3, [r7, #4]
    2448:	4618      	mov	r0, r3
    244a:	3708      	adds	r7, #8
    244c:	46bd      	mov	sp, r7
    244e:	bd80      	pop	{r7, pc}
    2450:	00001511 	.word	0x00001511
    2454:	00002ce5 	.word	0x00002ce5
    2458:	0000176b 	.word	0x0000176b
    245c:	000027e9 	.word	0x000027e9
    2460:	00001575 	.word	0x00001575
    2464:	200016bc 	.word	0x200016bc

00002468 <_ZN21MemoryManagment_ClassD1Ev>:



// default destructor
MemoryManagment_Class::~MemoryManagment_Class()
    2468:	b580      	push	{r7, lr}
    246a:	b082      	sub	sp, #8
    246c:	af00      	add	r7, sp, #0
    246e:	6078      	str	r0, [r7, #4]
    2470:	687b      	ldr	r3, [r7, #4]
    2472:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
    2476:	4618      	mov	r0, r3
    2478:	4b0b      	ldr	r3, [pc, #44]	; (24a8 <_ZN21MemoryManagment_ClassD1Ev+0x40>)
    247a:	4798      	blx	r3
    247c:	687b      	ldr	r3, [r7, #4]
    247e:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
    2482:	4618      	mov	r0, r3
    2484:	4b09      	ldr	r3, [pc, #36]	; (24ac <_ZN21MemoryManagment_ClassD1Ev+0x44>)
    2486:	4798      	blx	r3
    2488:	687b      	ldr	r3, [r7, #4]
    248a:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    248e:	4618      	mov	r0, r3
    2490:	4b07      	ldr	r3, [pc, #28]	; (24b0 <_ZN21MemoryManagment_ClassD1Ev+0x48>)
    2492:	4798      	blx	r3
    2494:	687b      	ldr	r3, [r7, #4]
    2496:	4618      	mov	r0, r3
    2498:	4b06      	ldr	r3, [pc, #24]	; (24b4 <_ZN21MemoryManagment_ClassD1Ev+0x4c>)
    249a:	4798      	blx	r3
{
} //~MemoryManagment_Class
    249c:	687b      	ldr	r3, [r7, #4]
    249e:	4618      	mov	r0, r3
    24a0:	3708      	adds	r7, #8
    24a2:	46bd      	mov	sp, r7
    24a4:	bd80      	pop	{r7, pc}
    24a6:	bf00      	nop
    24a8:	000027fd 	.word	0x000027fd
    24ac:	0000177f 	.word	0x0000177f
    24b0:	000023b9 	.word	0x000023b9
    24b4:	00001541 	.word	0x00001541

000024b8 <_ZN21MemoryManagment_Class4InitEm>:

bool	MemoryManagment_Class::Init(uint32_t flashChipSize){
    24b8:	b580      	push	{r7, lr}
    24ba:	b082      	sub	sp, #8
    24bc:	af00      	add	r7, sp, #0
    24be:	6078      	str	r0, [r7, #4]
    24c0:	6039      	str	r1, [r7, #0]
		if (qspiFlash.Init())
    24c2:	481d      	ldr	r0, [pc, #116]	; (2538 <_ZN21MemoryManagment_Class4InitEm+0x80>)
    24c4:	4b1d      	ldr	r3, [pc, #116]	; (253c <_ZN21MemoryManagment_Class4InitEm+0x84>)
    24c6:	4798      	blx	r3
    24c8:	4603      	mov	r3, r0
    24ca:	2b00      	cmp	r3, #0
    24cc:	d009      	beq.n	24e2 <_ZN21MemoryManagment_Class4InitEm+0x2a>
		{
			usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
    24ce:	491c      	ldr	r1, [pc, #112]	; (2540 <_ZN21MemoryManagment_Class4InitEm+0x88>)
    24d0:	481c      	ldr	r0, [pc, #112]	; (2544 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    24d2:	4b1d      	ldr	r3, [pc, #116]	; (2548 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    24d4:	4798      	blx	r3
    24d6:	4603      	mov	r3, r0
    24d8:	491c      	ldr	r1, [pc, #112]	; (254c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    24da:	4618      	mov	r0, r3
    24dc:	4b1c      	ldr	r3, [pc, #112]	; (2550 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    24de:	4798      	blx	r3
    24e0:	e008      	b.n	24f4 <_ZN21MemoryManagment_Class4InitEm+0x3c>
		} 
		else
		{
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
    24e2:	491c      	ldr	r1, [pc, #112]	; (2554 <_ZN21MemoryManagment_Class4InitEm+0x9c>)
    24e4:	4817      	ldr	r0, [pc, #92]	; (2544 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    24e6:	4b18      	ldr	r3, [pc, #96]	; (2548 <_ZN21MemoryManagment_Class4InitEm+0x90>)
    24e8:	4798      	blx	r3
    24ea:	4603      	mov	r3, r0
    24ec:	4917      	ldr	r1, [pc, #92]	; (254c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    24ee:	4618      	mov	r0, r3
    24f0:	4b17      	ldr	r3, [pc, #92]	; (2550 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    24f2:	4798      	blx	r3
		}
		if (eeprom.Init())
    24f4:	4818      	ldr	r0, [pc, #96]	; (2558 <_ZN21MemoryManagment_Class4InitEm+0xa0>)
    24f6:	4b19      	ldr	r3, [pc, #100]	; (255c <_ZN21MemoryManagment_Class4InitEm+0xa4>)
    24f8:	4798      	blx	r3
    24fa:	4603      	mov	r3, r0
    24fc:	2b00      	cmp	r3, #0
    24fe:	d009      	beq.n	2514 <_ZN21MemoryManagment_Class4InitEm+0x5c>
		{
			usb<<"EEPROM Memory SelfTest PASSED"<<NEWLINE;
    2500:	4917      	ldr	r1, [pc, #92]	; (2560 <_ZN21MemoryManagment_Class4InitEm+0xa8>)
    2502:	4810      	ldr	r0, [pc, #64]	; (2544 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    2504:	4b17      	ldr	r3, [pc, #92]	; (2564 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    2506:	4798      	blx	r3
    2508:	4603      	mov	r3, r0
    250a:	4910      	ldr	r1, [pc, #64]	; (254c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    250c:	4618      	mov	r0, r3
    250e:	4b10      	ldr	r3, [pc, #64]	; (2550 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    2510:	4798      	blx	r3
    2512:	e008      	b.n	2526 <_ZN21MemoryManagment_Class4InitEm+0x6e>
		
		} 
		else
		{
			usb<<"EEPROM Memory SelfTest FAILED"<<NEWLINE;
    2514:	4914      	ldr	r1, [pc, #80]	; (2568 <_ZN21MemoryManagment_Class4InitEm+0xb0>)
    2516:	480b      	ldr	r0, [pc, #44]	; (2544 <_ZN21MemoryManagment_Class4InitEm+0x8c>)
    2518:	4b12      	ldr	r3, [pc, #72]	; (2564 <_ZN21MemoryManagment_Class4InitEm+0xac>)
    251a:	4798      	blx	r3
    251c:	4603      	mov	r3, r0
    251e:	490b      	ldr	r1, [pc, #44]	; (254c <_ZN21MemoryManagment_Class4InitEm+0x94>)
    2520:	4618      	mov	r0, r3
    2522:	4b0b      	ldr	r3, [pc, #44]	; (2550 <_ZN21MemoryManagment_Class4InitEm+0x98>)
    2524:	4798      	blx	r3
		}
		
		SetChipID(flashChipSize);
    2526:	6839      	ldr	r1, [r7, #0]
    2528:	6878      	ldr	r0, [r7, #4]
    252a:	4b10      	ldr	r3, [pc, #64]	; (256c <_ZN21MemoryManagment_Class4InitEm+0xb4>)
    252c:	4798      	blx	r3
}
    252e:	bf00      	nop
    2530:	4618      	mov	r0, r3
    2532:	3708      	adds	r7, #8
    2534:	46bd      	mov	sp, r7
    2536:	bd80      	pop	{r7, pc}
    2538:	20009da0 	.word	0x20009da0
    253c:	00015eb1 	.word	0x00015eb1
    2540:	0001f6a4 	.word	0x0001f6a4
    2544:	2000a258 	.word	0x2000a258
    2548:	0000276d 	.word	0x0000276d
    254c:	0001f6c4 	.word	0x0001f6c4
    2550:	00000c75 	.word	0x00000c75
    2554:	0001f6c8 	.word	0x0001f6c8
    2558:	20009d58 	.word	0x20009d58
    255c:	0001550d 	.word	0x0001550d
    2560:	0001f6e8 	.word	0x0001f6e8
    2564:	00000c95 	.word	0x00000c95
    2568:	0001f708 	.word	0x0001f708
    256c:	0000259d 	.word	0x0000259d

00002570 <_ZN21MemoryManagment_Class13_troubleshootEhb>:
 uint8_t	MemoryManagment_Class::GetErrorCode(){
	 
	 // PLease don forget to do the real impelementation
	 return	0;
 }
  void MemoryManagment_Class::_troubleshoot(uint8_t _code, bool printoverride) {
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
    2576:	6078      	str	r0, [r7, #4]
    2578:	460b      	mov	r3, r1
    257a:	70fb      	strb	r3, [r7, #3]
    257c:	4613      	mov	r3, r2
    257e:	70bb      	strb	r3, [r7, #2]
	  diagnostics.troubleshoot(_code, printoverride);
    2580:	78ba      	ldrb	r2, [r7, #2]
    2582:	78fb      	ldrb	r3, [r7, #3]
    2584:	4619      	mov	r1, r3
    2586:	4803      	ldr	r0, [pc, #12]	; (2594 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x24>)
    2588:	4b03      	ldr	r3, [pc, #12]	; (2598 <_ZN21MemoryManagment_Class13_troubleshootEhb+0x28>)
    258a:	4798      	blx	r3
  }
    258c:	bf00      	nop
    258e:	3708      	adds	r7, #8
    2590:	46bd      	mov	sp, r7
    2592:	bd80      	pop	{r7, pc}
    2594:	200091b0 	.word	0x200091b0
    2598:	00014009 	.word	0x00014009

0000259c <_ZN21MemoryManagment_Class9SetChipIDEm>:

 bool MemoryManagment_Class::SetChipID(uint32_t flashChipSize) {
    259c:	b580      	push	{r7, lr}
    259e:	b082      	sub	sp, #8
    25a0:	af00      	add	r7, sp, #0
    25a2:	6078      	str	r0, [r7, #4]
    25a4:	6039      	str	r1, [r7, #0]
	 //set some default values

	 logArea.capacity =GetMemoryCapacity();
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	4618      	mov	r0, r3
    25aa:	4b12      	ldr	r3, [pc, #72]	; (25f4 <_ZN21MemoryManagment_Class9SetChipIDEm+0x58>)
    25ac:	4798      	blx	r3
    25ae:	4602      	mov	r2, r0
    25b0:	687b      	ldr	r3, [r7, #4]
    25b2:	f8c3 2978 	str.w	r2, [r3, #2424]	; 0x978


	 if (!logArea.capacity) {
    25b6:	687b      	ldr	r3, [r7, #4]
    25b8:	f8d3 3978 	ldr.w	r3, [r3, #2424]	; 0x978
    25bc:	2b00      	cmp	r3, #0
    25be:	d113      	bne.n	25e8 <_ZN21MemoryManagment_Class9SetChipIDEm+0x4c>
		 #ifdef RUNDIAGNOSTIC
		 usb.println(F("Chip capacity cannot be identified"));
		 #endif
		 if (flashChipSize) {
    25c0:	683b      	ldr	r3, [r7, #0]
    25c2:	2b00      	cmp	r3, #0
    25c4:	d009      	beq.n	25da <_ZN21MemoryManagment_Class9SetChipIDEm+0x3e>
			 // If a custom chip size is defined
			 #ifdef RUNDIAGNOSTIC
			 usb.println(F("Custom Chipsize defined"));
			 #endif
			 logArea.capacity = flashChipSize;
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	683a      	ldr	r2, [r7, #0]
    25ca:	f8c3 2978 	str.w	r2, [r3, #2424]	; 0x978
			 logArea.supported = false;
    25ce:	687b      	ldr	r3, [r7, #4]
    25d0:	2200      	movs	r2, #0
    25d2:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
			 return true;
    25d6:	2301      	movs	r3, #1
    25d8:	e007      	b.n	25ea <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

		 else {
			 _troubleshoot(UNKNOWNCAP);
    25da:	2200      	movs	r2, #0
    25dc:	2103      	movs	r1, #3
    25de:	6878      	ldr	r0, [r7, #4]
    25e0:	4b05      	ldr	r3, [pc, #20]	; (25f8 <_ZN21MemoryManagment_Class9SetChipIDEm+0x5c>)
    25e2:	4798      	blx	r3
			 return false;
    25e4:	2300      	movs	r3, #0
    25e6:	e000      	b.n	25ea <_ZN21MemoryManagment_Class9SetChipIDEm+0x4e>
		 }

	 }
	 return true;
    25e8:	2301      	movs	r3, #1
 }
    25ea:	4618      	mov	r0, r3
    25ec:	3708      	adds	r7, #8
    25ee:	46bd      	mov	sp, r7
    25f0:	bd80      	pop	{r7, pc}
    25f2:	bf00      	nop
    25f4:	00016031 	.word	0x00016031
    25f8:	00002571 	.word	0x00002571

000025fc <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState>:
	handlerAppState=PTR_HVAC_STATE(&as);
	uint32_t	add=(uint32_t )(&flashMap->hvacStateSector.hvacDefaultState);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
	return	r;
}
 uint32_t	MemoryManagment_Class::WriteValidApplicationState(HVACState& hs ){
    25fc:	b580      	push	{r7, lr}
    25fe:	b084      	sub	sp, #16
    2600:	af00      	add	r7, sp, #0
    2602:	6078      	str	r0, [r7, #4]
    2604:	6039      	str	r1, [r7, #0]
	uint32_t w=  WriteCurrentState(hs);
    2606:	687b      	ldr	r3, [r7, #4]
    2608:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
    260c:	6839      	ldr	r1, [r7, #0]
    260e:	4618      	mov	r0, r3
    2610:	4b11      	ldr	r3, [pc, #68]	; (2658 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x5c>)
    2612:	4798      	blx	r3
    2614:	60f8      	str	r0, [r7, #12]
	crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    2616:	687b      	ldr	r3, [r7, #4]
    2618:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    261c:	2270      	movs	r2, #112	; 0x70
    261e:	6839      	ldr	r1, [r7, #0]
    2620:	4618      	mov	r0, r3
    2622:	4b0e      	ldr	r3, [pc, #56]	; (265c <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x60>)
    2624:	4798      	blx	r3
    2626:	4602      	mov	r2, r0
    2628:	687b      	ldr	r3, [r7, #4]
    262a:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    262e:	333c      	adds	r3, #60	; 0x3c
    2630:	601a      	str	r2, [r3, #0]
	w=WriteCRCAppState(crc32);
    2632:	687b      	ldr	r3, [r7, #4]
    2634:	f503 62d2 	add.w	r2, r3, #1680	; 0x690
    2638:	687b      	ldr	r3, [r7, #4]
    263a:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    263e:	333c      	adds	r3, #60	; 0x3c
    2640:	681b      	ldr	r3, [r3, #0]
    2642:	4619      	mov	r1, r3
    2644:	4610      	mov	r0, r2
    2646:	4b06      	ldr	r3, [pc, #24]	; (2660 <_ZN21MemoryManagment_Class26WriteValidApplicationStateER9HVACState+0x64>)
    2648:	4798      	blx	r3
    264a:	60f8      	str	r0, [r7, #12]
	return	w;
    264c:	68fb      	ldr	r3, [r7, #12]
 }
    264e:	4618      	mov	r0, r3
    2650:	3710      	adds	r7, #16
    2652:	46bd      	mov	sp, r7
    2654:	bd80      	pop	{r7, pc}
    2656:	bf00      	nop
    2658:	00002aa1 	.word	0x00002aa1
    265c:	000014ad 	.word	0x000014ad
    2660:	00002b11 	.word	0x00002b11

00002664 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState>:
 uint32_t	MemoryManagment_Class::WriteValidConfigurationData(ConfigurationData& cd){
	 uint32_t	w=WriteCurrentConfigurationData(cd);
	 crc32=CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&cd),sizeof(ConfigurationData));
	 w=WriteCRCConfigurationData(crc32);
 };
 uint32_t	MemoryManagment_Class::SaveCurrentState(HVACState& hs){
    2664:	b590      	push	{r4, r7, lr}
    2666:	b087      	sub	sp, #28
    2668:	af00      	add	r7, sp, #0
    266a:	6078      	str	r0, [r7, #4]
    266c:	6039      	str	r1, [r7, #0]
	 uint32_t	add=(uint32_t)&flashMap->hvacStateSector;
    266e:	4b18      	ldr	r3, [pc, #96]	; (26d0 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x6c>)
    2670:	681b      	ldr	r3, [r3, #0]
    2672:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    2676:	332c      	adds	r3, #44	; 0x2c
    2678:	617b      	str	r3, [r7, #20]
	 HVACStateSector	*hss=(HVACStateSector*)&flashBuffer[0];
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2680:	3340      	adds	r3, #64	; 0x40
    2682:	681b      	ldr	r3, [r3, #0]
    2684:	613b      	str	r3, [r7, #16]
	 uint32_t r=qspiFlash.ReadAddress((uint8_t*)hss,add,QSPI_ERBLK);
    2686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    268a:	697a      	ldr	r2, [r7, #20]
    268c:	6939      	ldr	r1, [r7, #16]
    268e:	4811      	ldr	r0, [pc, #68]	; (26d4 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    2690:	4c11      	ldr	r4, [pc, #68]	; (26d8 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x74>)
    2692:	47a0      	blx	r4
    2694:	60f8      	str	r0, [r7, #12]
	 if (r==0)
    2696:	68fb      	ldr	r3, [r7, #12]
    2698:	2b00      	cmp	r3, #0
    269a:	d114      	bne.n	26c6 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x62>
	 {
		 memcpy((void*)&(hss->hvacState),(void*)&hs,sizeof(HVACState));
    269c:	693b      	ldr	r3, [r7, #16]
    269e:	3378      	adds	r3, #120	; 0x78
    26a0:	2270      	movs	r2, #112	; 0x70
    26a2:	6839      	ldr	r1, [r7, #0]
    26a4:	4618      	mov	r0, r3
    26a6:	4b0d      	ldr	r3, [pc, #52]	; (26dc <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x78>)
    26a8:	4798      	blx	r3
		 qspiFlash.Erase(add);
    26aa:	6979      	ldr	r1, [r7, #20]
    26ac:	4809      	ldr	r0, [pc, #36]	; (26d4 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    26ae:	4b0c      	ldr	r3, [pc, #48]	; (26e0 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x7c>)
    26b0:	4798      	blx	r3
		 uint32_t w=qspiFlash.WriteAddress((uint8_t*)hss,add,QSPI_ERBLK);
    26b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    26b6:	697a      	ldr	r2, [r7, #20]
    26b8:	6939      	ldr	r1, [r7, #16]
    26ba:	4806      	ldr	r0, [pc, #24]	; (26d4 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x70>)
    26bc:	4c09      	ldr	r4, [pc, #36]	; (26e4 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x80>)
    26be:	47a0      	blx	r4
    26c0:	60b8      	str	r0, [r7, #8]
		  return	w;
    26c2:	68bb      	ldr	r3, [r7, #8]
    26c4:	e000      	b.n	26c8 <_ZN21MemoryManagment_Class16SaveCurrentStateER9HVACState+0x64>
	 }

	 return	r;
    26c6:	68fb      	ldr	r3, [r7, #12]
 }
    26c8:	4618      	mov	r0, r3
    26ca:	371c      	adds	r7, #28
    26cc:	46bd      	mov	sp, r7
    26ce:	bd90      	pop	{r4, r7, pc}
    26d0:	20008100 	.word	0x20008100
    26d4:	20009da0 	.word	0x20009da0
    26d8:	00015f81 	.word	0x00015f81
    26dc:	0001b35d 	.word	0x0001b35d
    26e0:	00015f1d 	.word	0x00015f1d
    26e4:	00015f4d 	.word	0x00015f4d

000026e8 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState>:
uint32_t	MemoryManagment_Class::SaveApplicationState(HVACState& hs ){
    26e8:	b580      	push	{r7, lr}
    26ea:	b084      	sub	sp, #16
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
    26f0:	6039      	str	r1, [r7, #0]
	  uint32_t w=  SaveCurrentState(hs);
    26f2:	6839      	ldr	r1, [r7, #0]
    26f4:	6878      	ldr	r0, [r7, #4]
    26f6:	4b10      	ldr	r3, [pc, #64]	; (2738 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x50>)
    26f8:	4798      	blx	r3
    26fa:	60f8      	str	r0, [r7, #12]
	  crc32=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&hs),sizeof(HVACState));
    26fc:	687b      	ldr	r3, [r7, #4]
    26fe:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
    2702:	2270      	movs	r2, #112	; 0x70
    2704:	6839      	ldr	r1, [r7, #0]
    2706:	4618      	mov	r0, r3
    2708:	4b0c      	ldr	r3, [pc, #48]	; (273c <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x54>)
    270a:	4798      	blx	r3
    270c:	4602      	mov	r2, r0
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    2714:	333c      	adds	r3, #60	; 0x3c
    2716:	601a      	str	r2, [r3, #0]
	  w=SaveCRCAppState(crc32);
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
    271e:	333c      	adds	r3, #60	; 0x3c
    2720:	681b      	ldr	r3, [r3, #0]
    2722:	4619      	mov	r1, r3
    2724:	6878      	ldr	r0, [r7, #4]
    2726:	4b06      	ldr	r3, [pc, #24]	; (2740 <_ZN21MemoryManagment_Class20SaveApplicationStateER9HVACState+0x58>)
    2728:	4798      	blx	r3
    272a:	60f8      	str	r0, [r7, #12]
	  return	w;
    272c:	68fb      	ldr	r3, [r7, #12]
  }
    272e:	4618      	mov	r0, r3
    2730:	3710      	adds	r7, #16
    2732:	46bd      	mov	sp, r7
    2734:	bd80      	pop	{r7, pc}
    2736:	bf00      	nop
    2738:	00002665 	.word	0x00002665
    273c:	000014ad 	.word	0x000014ad
    2740:	00002745 	.word	0x00002745

00002744 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm>:
uint32_t	MemoryManagment_Class::SaveCRCAppState(uint32_t crc){
    2744:	b580      	push	{r7, lr}
    2746:	b082      	sub	sp, #8
    2748:	af00      	add	r7, sp, #0
    274a:	6078      	str	r0, [r7, #4]
    274c:	6039      	str	r1, [r7, #0]
// 	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
// 	uint32_t	bufferAddres=((uint32_t)&flashBuffer)+add;
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
    2754:	6839      	ldr	r1, [r7, #0]
    2756:	4618      	mov	r0, r3
    2758:	4b03      	ldr	r3, [pc, #12]	; (2768 <_ZN21MemoryManagment_Class15SaveCRCAppStateEm+0x24>)
    275a:	4798      	blx	r3
    275c:	4603      	mov	r3, r0
}
    275e:	4618      	mov	r0, r3
    2760:	3708      	adds	r7, #8
    2762:	46bd      	mov	sp, r7
    2764:	bd80      	pop	{r7, pc}
    2766:	bf00      	nop
    2768:	00002b11 	.word	0x00002b11

0000276c <_ZlsIA29_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    276c:	b580      	push	{r7, lr}
    276e:	b082      	sub	sp, #8
    2770:	af00      	add	r7, sp, #0
    2772:	6078      	str	r0, [r7, #4]
    2774:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    2776:	6839      	ldr	r1, [r7, #0]
    2778:	6878      	ldr	r0, [r7, #4]
    277a:	4b03      	ldr	r3, [pc, #12]	; (2788 <_ZlsIA29_cER5PrintS2_RKT_+0x1c>)
    277c:	4798      	blx	r3
    277e:	687b      	ldr	r3, [r7, #4]
    2780:	4618      	mov	r0, r3
    2782:	3708      	adds	r7, #8
    2784:	46bd      	mov	sp, r7
    2786:	bd80      	pop	{r7, pc}
    2788:	000177b5 	.word	0x000177b5

0000278c <_Z41__static_initialization_and_destruction_0ii>:
 
    278c:	b580      	push	{r7, lr}
    278e:	b082      	sub	sp, #8
    2790:	af00      	add	r7, sp, #0
    2792:	6078      	str	r0, [r7, #4]
    2794:	6039      	str	r1, [r7, #0]
    2796:	687b      	ldr	r3, [r7, #4]
    2798:	2b01      	cmp	r3, #1
    279a:	d10c      	bne.n	27b6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    279c:	683b      	ldr	r3, [r7, #0]
    279e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    27a2:	4293      	cmp	r3, r2
    27a4:	d107      	bne.n	27b6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    27a6:	4806      	ldr	r0, [pc, #24]	; (27c0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    27a8:	4b06      	ldr	r3, [pc, #24]	; (27c4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    27aa:	4798      	blx	r3
    27ac:	4a06      	ldr	r2, [pc, #24]	; (27c8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    27ae:	4907      	ldr	r1, [pc, #28]	; (27cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
    27b0:	4803      	ldr	r0, [pc, #12]	; (27c0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    27b2:	4b07      	ldr	r3, [pc, #28]	; (27d0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    27b4:	4798      	blx	r3
    27b6:	bf00      	nop
    27b8:	3708      	adds	r7, #8
    27ba:	46bd      	mov	sp, r7
    27bc:	bd80      	pop	{r7, pc}
    27be:	bf00      	nop
    27c0:	200026bc 	.word	0x200026bc
    27c4:	000023d9 	.word	0x000023d9
    27c8:	20000000 	.word	0x20000000
    27cc:	00002469 	.word	0x00002469
    27d0:	00018bf5 	.word	0x00018bf5

000027d4 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev>:
    27d4:	b580      	push	{r7, lr}
    27d6:	af00      	add	r7, sp, #0
    27d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    27dc:	2001      	movs	r0, #1
    27de:	4b01      	ldr	r3, [pc, #4]	; (27e4 <_GLOBAL__sub_I__ZN21MemoryManagment_ClassC2Ev+0x10>)
    27e0:	4798      	blx	r3
    27e2:	bd80      	pop	{r7, pc}
    27e4:	0000278d 	.word	0x0000278d

000027e8 <_ZN18FlashHandler_ClassC1Ev>:


MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
    27e8:	b480      	push	{r7}
    27ea:	b083      	sub	sp, #12
    27ec:	af00      	add	r7, sp, #0
    27ee:	6078      	str	r0, [r7, #4]
{
} //MemoryStruct_Class
    27f0:	687b      	ldr	r3, [r7, #4]
    27f2:	4618      	mov	r0, r3
    27f4:	370c      	adds	r7, #12
    27f6:	46bd      	mov	sp, r7
    27f8:	bc80      	pop	{r7}
    27fa:	4770      	bx	lr

000027fc <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
    27fc:	b480      	push	{r7}
    27fe:	b083      	sub	sp, #12
    2800:	af00      	add	r7, sp, #0
    2802:	6078      	str	r0, [r7, #4]
{
} //~MemoryStruct_Class
    2804:	687b      	ldr	r3, [r7, #4]
    2806:	4618      	mov	r0, r3
    2808:	370c      	adds	r7, #12
    280a:	46bd      	mov	sp, r7
    280c:	bc80      	pop	{r7}
    280e:	4770      	bx	lr

00002810 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData>:

uint32_t	FlashHandler_Class::ReadDefaultConfigurationData(ConfigurationData& cd){
    2810:	b580      	push	{r7, lr}
    2812:	b084      	sub	sp, #16
    2814:	af00      	add	r7, sp, #0
    2816:	6078      	str	r0, [r7, #4]
    2818:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
    281a:	4b08      	ldr	r3, [pc, #32]	; (283c <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x2c>)
    281c:	681b      	ldr	r3, [r3, #0]
    281e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    2822:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    2824:	68fa      	ldr	r2, [r7, #12]
    2826:	6839      	ldr	r1, [r7, #0]
    2828:	6878      	ldr	r0, [r7, #4]
    282a:	4b05      	ldr	r3, [pc, #20]	; (2840 <_ZN18FlashHandler_Class28ReadDefaultConfigurationDataER17ConfigurationData+0x30>)
    282c:	4798      	blx	r3
    282e:	60b8      	str	r0, [r7, #8]
	return	r;
    2830:	68bb      	ldr	r3, [r7, #8]
}
    2832:	4618      	mov	r0, r3
    2834:	3710      	adds	r7, #16
    2836:	46bd      	mov	sp, r7
    2838:	bd80      	pop	{r7, pc}
    283a:	bf00      	nop
    283c:	20008100 	.word	0x20008100
    2840:	000028ad 	.word	0x000028ad

00002844 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData>:
uint32_t	FlashHandler_Class::ReadDefaultParameters(UserParameters& up){
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
	uint32_t	r=ReadParameters(up,add);
	return	r;
}
uint32_t	FlashHandler_Class::ReadLastConfigurationData(ConfigurationData& cd){
    2844:	b580      	push	{r7, lr}
    2846:	b084      	sub	sp, #16
    2848:	af00      	add	r7, sp, #0
    284a:	6078      	str	r0, [r7, #4]
    284c:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.lastConfiguracion;
    284e:	4b08      	ldr	r3, [pc, #32]	; (2870 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData+0x2c>)
    2850:	681b      	ldr	r3, [r3, #0]
    2852:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
    2856:	332c      	adds	r3, #44	; 0x2c
    2858:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    285a:	68fa      	ldr	r2, [r7, #12]
    285c:	6839      	ldr	r1, [r7, #0]
    285e:	6878      	ldr	r0, [r7, #4]
    2860:	4b04      	ldr	r3, [pc, #16]	; (2874 <_ZN18FlashHandler_Class25ReadLastConfigurationDataER17ConfigurationData+0x30>)
    2862:	4798      	blx	r3
    2864:	60b8      	str	r0, [r7, #8]
	return	r;
    2866:	68bb      	ldr	r3, [r7, #8]
}
    2868:	4618      	mov	r0, r3
    286a:	3710      	adds	r7, #16
    286c:	46bd      	mov	sp, r7
    286e:	bd80      	pop	{r7, pc}
    2870:	20008100 	.word	0x20008100
    2874:	000028ad 	.word	0x000028ad

00002878 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData>:
uint32_t	FlashHandler_Class::ReadUpdatedConfigurationData(ConfigurationData& cd){
    2878:	b580      	push	{r7, lr}
    287a:	b084      	sub	sp, #16
    287c:	af00      	add	r7, sp, #0
    287e:	6078      	str	r0, [r7, #4]
    2880:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.updatedConfiguration;
    2882:	4b08      	ldr	r3, [pc, #32]	; (28a4 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x2c>)
    2884:	681b      	ldr	r3, [r3, #0]
    2886:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
    288a:	3304      	adds	r3, #4
    288c:	60fb      	str	r3, [r7, #12]
	uint32_t	r=ReadConfigurationData(cd,add);
    288e:	68fa      	ldr	r2, [r7, #12]
    2890:	6839      	ldr	r1, [r7, #0]
    2892:	6878      	ldr	r0, [r7, #4]
    2894:	4b04      	ldr	r3, [pc, #16]	; (28a8 <_ZN18FlashHandler_Class28ReadUpdatedConfigurationDataER17ConfigurationData+0x30>)
    2896:	4798      	blx	r3
    2898:	60b8      	str	r0, [r7, #8]
	return	r;
    289a:	68bb      	ldr	r3, [r7, #8]
}
    289c:	4618      	mov	r0, r3
    289e:	3710      	adds	r7, #16
    28a0:	46bd      	mov	sp, r7
    28a2:	bd80      	pop	{r7, pc}
    28a4:	20008100 	.word	0x20008100
    28a8:	000028ad 	.word	0x000028ad

000028ac <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam>:

uint32_t	FlashHandler_Class::ReadConfigurationData(ConfigurationData& cd,uint32_t add){
    28ac:	b590      	push	{r4, r7, lr}
    28ae:	b087      	sub	sp, #28
    28b0:	af00      	add	r7, sp, #0
    28b2:	60f8      	str	r0, [r7, #12]
    28b4:	60b9      	str	r1, [r7, #8]
    28b6:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    28b8:	68ba      	ldr	r2, [r7, #8]
    28ba:	68fb      	ldr	r3, [r7, #12]
    28bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    28c0:	68fb      	ldr	r3, [r7, #12]
    28c2:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    28c6:	23ac      	movs	r3, #172	; 0xac
    28c8:	687a      	ldr	r2, [r7, #4]
    28ca:	4804      	ldr	r0, [pc, #16]	; (28dc <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam+0x30>)
    28cc:	4c04      	ldr	r4, [pc, #16]	; (28e0 <_ZN18FlashHandler_Class21ReadConfigurationDataER17ConfigurationDatam+0x34>)
    28ce:	47a0      	blx	r4
    28d0:	6178      	str	r0, [r7, #20]
	return	r;
    28d2:	697b      	ldr	r3, [r7, #20]
}
    28d4:	4618      	mov	r0, r3
    28d6:	371c      	adds	r7, #28
    28d8:	46bd      	mov	sp, r7
    28da:	bd90      	pop	{r4, r7, pc}
    28dc:	20009da0 	.word	0x20009da0
    28e0:	00015f81 	.word	0x00015f81

000028e4 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
	return	r;
}
uint32_t	FlashHandler_Class::ReadCRCConfigurationData(void){
    28e4:	b590      	push	{r4, r7, lr}
    28e6:	b087      	sub	sp, #28
    28e8:	af00      	add	r7, sp, #0
    28ea:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
    28ec:	4b09      	ldr	r3, [pc, #36]	; (2914 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x30>)
    28ee:	681b      	ldr	r3, [r3, #0]
    28f0:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
    28f4:	3330      	adds	r3, #48	; 0x30
    28f6:	617b      	str	r3, [r7, #20]
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    28f8:	f107 010c 	add.w	r1, r7, #12
    28fc:	2304      	movs	r3, #4
    28fe:	697a      	ldr	r2, [r7, #20]
    2900:	4805      	ldr	r0, [pc, #20]	; (2918 <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x34>)
    2902:	4c06      	ldr	r4, [pc, #24]	; (291c <_ZN18FlashHandler_Class24ReadCRCConfigurationDataEv+0x38>)
    2904:	47a0      	blx	r4
    2906:	6138      	str	r0, [r7, #16]
	return	crc;
    2908:	68fb      	ldr	r3, [r7, #12]
}
    290a:	4618      	mov	r0, r3
    290c:	371c      	adds	r7, #28
    290e:	46bd      	mov	sp, r7
    2910:	bd90      	pop	{r4, r7, pc}
    2912:	bf00      	nop
    2914:	20008100 	.word	0x20008100
    2918:	20009da0 	.word	0x20009da0
    291c:	00015f81 	.word	0x00015f81

00002920 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
    2920:	b590      	push	{r4, r7, lr}
    2922:	b087      	sub	sp, #28
    2924:	af00      	add	r7, sp, #0
    2926:	60f8      	str	r0, [r7, #12]
    2928:	60b9      	str	r1, [r7, #8]
    292a:	607a      	str	r2, [r7, #4]
	handlerConfigData=PTR_CONFIG_DATA(&cd);
    292c:	68ba      	ldr	r2, [r7, #8]
    292e:	68fb      	ldr	r3, [r7, #12]
    2930:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
    2934:	68fb      	ldr	r3, [r7, #12]
    2936:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
    293a:	23ac      	movs	r3, #172	; 0xac
    293c:	687a      	ldr	r2, [r7, #4]
    293e:	4804      	ldr	r0, [pc, #16]	; (2950 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam+0x30>)
    2940:	4c04      	ldr	r4, [pc, #16]	; (2954 <_ZN18FlashHandler_Class22WriteConfigurationDataER17ConfigurationDatam+0x34>)
    2942:	47a0      	blx	r4
    2944:	6178      	str	r0, [r7, #20]
	return	w;
    2946:	697b      	ldr	r3, [r7, #20]
}
    2948:	4618      	mov	r0, r3
    294a:	371c      	adds	r7, #28
    294c:	46bd      	mov	sp, r7
    294e:	bd90      	pop	{r4, r7, pc}
    2950:	20009da0 	.word	0x20009da0
    2954:	00015f4d 	.word	0x00015f4d

00002958 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
    2958:	b590      	push	{r4, r7, lr}
    295a:	b087      	sub	sp, #28
    295c:	af00      	add	r7, sp, #0
    295e:	60f8      	str	r0, [r7, #12]
    2960:	60b9      	str	r1, [r7, #8]
    2962:	607a      	str	r2, [r7, #4]

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
    2964:	2301      	movs	r3, #1
    2966:	687a      	ldr	r2, [r7, #4]
    2968:	68b9      	ldr	r1, [r7, #8]
    296a:	4804      	ldr	r0, [pc, #16]	; (297c <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x24>)
    296c:	4c04      	ldr	r4, [pc, #16]	; (2980 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x28>)
    296e:	47a0      	blx	r4
    2970:	6178      	str	r0, [r7, #20]
	return	w;
    2972:	697b      	ldr	r3, [r7, #20]
}
    2974:	4618      	mov	r0, r3
    2976:	371c      	adds	r7, #28
    2978:	46bd      	mov	sp, r7
    297a:	bd90      	pop	{r4, r7, pc}
    297c:	20009da0 	.word	0x20009da0
    2980:	00015f4d 	.word	0x00015f4d

00002984 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem>:
uint32_t	FlashHandler_Class::WriteApplicationState(HVACState& hs,uint32_t add){
    2984:	b590      	push	{r4, r7, lr}
    2986:	b087      	sub	sp, #28
    2988:	af00      	add	r7, sp, #0
    298a:	60f8      	str	r0, [r7, #12]
    298c:	60b9      	str	r1, [r7, #8]
    298e:	607a      	str	r2, [r7, #4]
	handlerAppState=PTR_HVAC_STATE(&hs);
    2990:	68ba      	ldr	r2, [r7, #8]
    2992:	68fb      	ldr	r3, [r7, #12]
    2994:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerAppState,add,sizeof(HVACState));
    2998:	68fb      	ldr	r3, [r7, #12]
    299a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    299e:	2370      	movs	r3, #112	; 0x70
    29a0:	687a      	ldr	r2, [r7, #4]
    29a2:	4804      	ldr	r0, [pc, #16]	; (29b4 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem+0x30>)
    29a4:	4c04      	ldr	r4, [pc, #16]	; (29b8 <_ZN18FlashHandler_Class21WriteApplicationStateER9HVACStatem+0x34>)
    29a6:	47a0      	blx	r4
    29a8:	6178      	str	r0, [r7, #20]
	return	w;
    29aa:	697b      	ldr	r3, [r7, #20]
}
    29ac:	4618      	mov	r0, r3
    29ae:	371c      	adds	r7, #28
    29b0:	46bd      	mov	sp, r7
    29b2:	bd90      	pop	{r4, r7, pc}
    29b4:	20009da0 	.word	0x20009da0
    29b8:	00015f4d 	.word	0x00015f4d

000029bc <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv>:
uint32_t	FlashHandler_Class::WriteDefaultConfiguration(void){
    29bc:	b580      	push	{r7, lr}
    29be:	b0b0      	sub	sp, #192	; 0xc0
    29c0:	af00      	add	r7, sp, #0
    29c2:	6078      	str	r0, [r7, #4]
	ConfigurationData cd=factoryDefaultsConfiguration;
    29c4:	4a0e      	ldr	r2, [pc, #56]	; (2a00 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x44>)
    29c6:	f107 030c 	add.w	r3, r7, #12
    29ca:	4611      	mov	r1, r2
    29cc:	22ac      	movs	r2, #172	; 0xac
    29ce:	4618      	mov	r0, r3
    29d0:	4b0c      	ldr	r3, [pc, #48]	; (2a04 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x48>)
    29d2:	4798      	blx	r3
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
    29d4:	4b0c      	ldr	r3, [pc, #48]	; (2a08 <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x4c>)
    29d6:	681b      	ldr	r3, [r3, #0]
    29d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    29dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t	w=WriteConfigurationData(cd,add);
    29e0:	f107 030c 	add.w	r3, r7, #12
    29e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    29e8:	4619      	mov	r1, r3
    29ea:	6878      	ldr	r0, [r7, #4]
    29ec:	4b07      	ldr	r3, [pc, #28]	; (2a0c <_ZN18FlashHandler_Class25WriteDefaultConfigurationEv+0x50>)
    29ee:	4798      	blx	r3
    29f0:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	return	w;
    29f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
}
    29f8:	4618      	mov	r0, r3
    29fa:	37c0      	adds	r7, #192	; 0xc0
    29fc:	46bd      	mov	sp, r7
    29fe:	bd80      	pop	{r7, pc}
    2a00:	0001f150 	.word	0x0001f150
    2a04:	0001b35d 	.word	0x0001b35d
    2a08:	20008100 	.word	0x20008100
    2a0c:	00002921 	.word	0x00002921

00002a10 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
    2a10:	b580      	push	{r7, lr}
    2a12:	b086      	sub	sp, #24
    2a14:	af00      	add	r7, sp, #0
    2a16:	6078      	str	r0, [r7, #4]
	UserParameters up=defaultParameters;
    2a18:	4b0a      	ldr	r3, [pc, #40]	; (2a44 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x34>)
    2a1a:	781b      	ldrb	r3, [r3, #0]
    2a1c:	733b      	strb	r3, [r7, #12]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
    2a1e:	4b0a      	ldr	r3, [pc, #40]	; (2a48 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x38>)
    2a20:	681b      	ldr	r3, [r3, #0]
    2a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2a26:	3301      	adds	r3, #1
    2a28:	617b      	str	r3, [r7, #20]
	uint32_t	w=WriteParameters(up,add);
    2a2a:	f107 030c 	add.w	r3, r7, #12
    2a2e:	697a      	ldr	r2, [r7, #20]
    2a30:	4619      	mov	r1, r3
    2a32:	6878      	ldr	r0, [r7, #4]
    2a34:	4b05      	ldr	r3, [pc, #20]	; (2a4c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x3c>)
    2a36:	4798      	blx	r3
    2a38:	6138      	str	r0, [r7, #16]
	return	w;
    2a3a:	693b      	ldr	r3, [r7, #16]
}
    2a3c:	4618      	mov	r0, r3
    2a3e:	3718      	adds	r7, #24
    2a40:	46bd      	mov	sp, r7
    2a42:	bd80      	pop	{r7, pc}
    2a44:	00020e9c 	.word	0x00020e9c
    2a48:	20008100 	.word	0x20008100
    2a4c:	00002959 	.word	0x00002959

00002a50 <_ZN18FlashHandler_Class17WriteDefaultStateEv>:
uint32_t	FlashHandler_Class::WriteDefaultState(void){
    2a50:	b580      	push	{r7, lr}
    2a52:	b0a0      	sub	sp, #128	; 0x80
    2a54:	af00      	add	r7, sp, #0
    2a56:	6078      	str	r0, [r7, #4]
	HVACState hs=defaultHVACState;
    2a58:	4a0d      	ldr	r2, [pc, #52]	; (2a90 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x40>)
    2a5a:	f107 0308 	add.w	r3, r7, #8
    2a5e:	4611      	mov	r1, r2
    2a60:	2270      	movs	r2, #112	; 0x70
    2a62:	4618      	mov	r0, r3
    2a64:	4b0b      	ldr	r3, [pc, #44]	; (2a94 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x44>)
    2a66:	4798      	blx	r3
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.hvacDefaultState;
    2a68:	4b0b      	ldr	r3, [pc, #44]	; (2a98 <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x48>)
    2a6a:	681b      	ldr	r3, [r3, #0]
    2a6c:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    2a70:	3334      	adds	r3, #52	; 0x34
    2a72:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t	w=WriteApplicationState(hs,add);
    2a74:	f107 0308 	add.w	r3, r7, #8
    2a78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    2a7a:	4619      	mov	r1, r3
    2a7c:	6878      	ldr	r0, [r7, #4]
    2a7e:	4b07      	ldr	r3, [pc, #28]	; (2a9c <_ZN18FlashHandler_Class17WriteDefaultStateEv+0x4c>)
    2a80:	4798      	blx	r3
    2a82:	67b8      	str	r0, [r7, #120]	; 0x78
	return	w;
    2a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
    2a86:	4618      	mov	r0, r3
    2a88:	3780      	adds	r7, #128	; 0x80
    2a8a:	46bd      	mov	sp, r7
    2a8c:	bd80      	pop	{r7, pc}
    2a8e:	bf00      	nop
    2a90:	0001f4e0 	.word	0x0001f4e0
    2a94:	0001b35d 	.word	0x0001b35d
    2a98:	20008100 	.word	0x20008100
    2a9c:	00002985 	.word	0x00002985

00002aa0 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState>:

uint32_t	FlashHandler_Class::WriteCurrentState(HVACState& hs){
    2aa0:	b580      	push	{r7, lr}
    2aa2:	b084      	sub	sp, #16
    2aa4:	af00      	add	r7, sp, #0
    2aa6:	6078      	str	r0, [r7, #4]
    2aa8:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.hvacState;
    2aaa:	4b08      	ldr	r3, [pc, #32]	; (2acc <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState+0x2c>)
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
    2ab2:	3324      	adds	r3, #36	; 0x24
    2ab4:	60fb      	str	r3, [r7, #12]
	uint32_t	w=WriteApplicationState(hs,add);
    2ab6:	68fa      	ldr	r2, [r7, #12]
    2ab8:	6839      	ldr	r1, [r7, #0]
    2aba:	6878      	ldr	r0, [r7, #4]
    2abc:	4b04      	ldr	r3, [pc, #16]	; (2ad0 <_ZN18FlashHandler_Class17WriteCurrentStateER9HVACState+0x30>)
    2abe:	4798      	blx	r3
    2ac0:	60b8      	str	r0, [r7, #8]
	return	w;
    2ac2:	68bb      	ldr	r3, [r7, #8]
}
    2ac4:	4618      	mov	r0, r3
    2ac6:	3710      	adds	r7, #16
    2ac8:	46bd      	mov	sp, r7
    2aca:	bd80      	pop	{r7, pc}
    2acc:	20008100 	.word	0x20008100
    2ad0:	00002985 	.word	0x00002985

00002ad4 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm>:

uint32_t	FlashHandler_Class::WriteCRCConfigurationData(uint32_t crc){
    2ad4:	b590      	push	{r4, r7, lr}
    2ad6:	b085      	sub	sp, #20
    2ad8:	af00      	add	r7, sp, #0
    2ada:	6078      	str	r0, [r7, #4]
    2adc:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->configurationSector.crcConfigData;
    2ade:	4b09      	ldr	r3, [pc, #36]	; (2b04 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x30>)
    2ae0:	681b      	ldr	r3, [r3, #0]
    2ae2:	f503 530a 	add.w	r3, r3, #8832	; 0x2280
    2ae6:	3330      	adds	r3, #48	; 0x30
    2ae8:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2aea:	4639      	mov	r1, r7
    2aec:	2304      	movs	r3, #4
    2aee:	68fa      	ldr	r2, [r7, #12]
    2af0:	4805      	ldr	r0, [pc, #20]	; (2b08 <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x34>)
    2af2:	4c06      	ldr	r4, [pc, #24]	; (2b0c <_ZN18FlashHandler_Class25WriteCRCConfigurationDataEm+0x38>)
    2af4:	47a0      	blx	r4
    2af6:	60b8      	str	r0, [r7, #8]
	return	w;
    2af8:	68bb      	ldr	r3, [r7, #8]
}
    2afa:	4618      	mov	r0, r3
    2afc:	3714      	adds	r7, #20
    2afe:	46bd      	mov	sp, r7
    2b00:	bd90      	pop	{r4, r7, pc}
    2b02:	bf00      	nop
    2b04:	20008100 	.word	0x20008100
    2b08:	20009da0 	.word	0x20009da0
    2b0c:	00015f4d 	.word	0x00015f4d

00002b10 <_ZN18FlashHandler_Class16WriteCRCAppStateEm>:
uint32_t	FlashHandler_Class::WriteCRCAppState(uint32_t crc){
    2b10:	b590      	push	{r4, r7, lr}
    2b12:	b085      	sub	sp, #20
    2b14:	af00      	add	r7, sp, #0
    2b16:	6078      	str	r0, [r7, #4]
    2b18:	6039      	str	r1, [r7, #0]
	uint32_t	add=(uint32_t)&flashMap->hvacStateSector.crcAppState;
    2b1a:	4b09      	ldr	r3, [pc, #36]	; (2b40 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x30>)
    2b1c:	681b      	ldr	r3, [r3, #0]
    2b1e:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    2b22:	3314      	adds	r3, #20
    2b24:	60fb      	str	r3, [r7, #12]
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)(&crc),add,sizeof(uint32_t));
    2b26:	4639      	mov	r1, r7
    2b28:	2304      	movs	r3, #4
    2b2a:	68fa      	ldr	r2, [r7, #12]
    2b2c:	4805      	ldr	r0, [pc, #20]	; (2b44 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x34>)
    2b2e:	4c06      	ldr	r4, [pc, #24]	; (2b48 <_ZN18FlashHandler_Class16WriteCRCAppStateEm+0x38>)
    2b30:	47a0      	blx	r4
    2b32:	60b8      	str	r0, [r7, #8]
	return	w;
    2b34:	68bb      	ldr	r3, [r7, #8]
}
    2b36:	4618      	mov	r0, r3
    2b38:	3714      	adds	r7, #20
    2b3a:	46bd      	mov	sp, r7
    2b3c:	bd90      	pop	{r4, r7, pc}
    2b3e:	bf00      	nop
    2b40:	20008100 	.word	0x20008100
    2b44:	20009da0 	.word	0x20009da0
    2b48:	00015f4d 	.word	0x00015f4d

00002b4c <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState>:
uint32_t	FlashHandler_Class::WriteLastConfigurationData(ConfigurationData& cd){
	uint32_t	add=(uint32_t)&flashMap->configurationSector.lastConfiguracion;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::ReadApplicationState(HVACState& as){
    2b4c:	b590      	push	{r4, r7, lr}
    2b4e:	b085      	sub	sp, #20
    2b50:	af00      	add	r7, sp, #0
    2b52:	6078      	str	r0, [r7, #4]
    2b54:	6039      	str	r1, [r7, #0]
	flashAddress=(uint32_t)&flashMap->hvacStateSector.hvacState;
    2b56:	4b0e      	ldr	r3, [pc, #56]	; (2b90 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x44>)
    2b58:	681b      	ldr	r3, [r3, #0]
    2b5a:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
    2b5e:	3324      	adds	r3, #36	; 0x24
    2b60:	461a      	mov	r2, r3
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	handlerAppState=PTR_HVAC_STATE(&as);
    2b68:	683a      	ldr	r2, [r7, #0]
    2b6a:	687b      	ldr	r3, [r7, #4]
    2b6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerAppState,flashAddress,sizeof(HVACState));
    2b70:	687b      	ldr	r3, [r7, #4]
    2b72:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
    2b76:	687b      	ldr	r3, [r7, #4]
    2b78:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    2b7c:	2370      	movs	r3, #112	; 0x70
    2b7e:	4805      	ldr	r0, [pc, #20]	; (2b94 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x48>)
    2b80:	4c05      	ldr	r4, [pc, #20]	; (2b98 <_ZN18FlashHandler_Class20ReadApplicationStateER9HVACState+0x4c>)
    2b82:	47a0      	blx	r4
    2b84:	60f8      	str	r0, [r7, #12]
	return	r;
    2b86:	68fb      	ldr	r3, [r7, #12]
}
    2b88:	4618      	mov	r0, r3
    2b8a:	3714      	adds	r7, #20
    2b8c:	46bd      	mov	sp, r7
    2b8e:	bd90      	pop	{r4, r7, pc}
    2b90:	20008100 	.word	0x20008100
    2b94:	20009da0 	.word	0x20009da0
    2b98:	00015f81 	.word	0x00015f81

00002b9c <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv>:
uint32_t	FlashHandler_Class::ReadCRCApplicationState(void){
    2b9c:	b590      	push	{r4, r7, lr}
    2b9e:	b085      	sub	sp, #20
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	6078      	str	r0, [r7, #4]
	uint32_t	crc;
	flashAddress=(uint32_t)&flashMap->hvacStateSector.crcAppState;
    2ba4:	4b0b      	ldr	r3, [pc, #44]	; (2bd4 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x38>)
    2ba6:	681b      	ldr	r3, [r3, #0]
    2ba8:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
    2bac:	3314      	adds	r3, #20
    2bae:	461a      	mov	r2, r3
    2bb0:	687b      	ldr	r3, [r7, #4]
    2bb2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)(&crc),flashAddress,sizeof(uint32_t));
    2bb6:	687b      	ldr	r3, [r7, #4]
    2bb8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    2bbc:	f107 0108 	add.w	r1, r7, #8
    2bc0:	2304      	movs	r3, #4
    2bc2:	4805      	ldr	r0, [pc, #20]	; (2bd8 <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x3c>)
    2bc4:	4c05      	ldr	r4, [pc, #20]	; (2bdc <_ZN18FlashHandler_Class23ReadCRCApplicationStateEv+0x40>)
    2bc6:	47a0      	blx	r4
    2bc8:	60f8      	str	r0, [r7, #12]
	return	crc;
    2bca:	68bb      	ldr	r3, [r7, #8]
    2bcc:	4618      	mov	r0, r3
    2bce:	3714      	adds	r7, #20
    2bd0:	46bd      	mov	sp, r7
    2bd2:	bd90      	pop	{r4, r7, pc}
    2bd4:	20008100 	.word	0x20008100
    2bd8:	20009da0 	.word	0x20009da0
    2bdc:	00015f81 	.word	0x00015f81

00002be0 <_ZN10PBIT_ClassC1Ev>:

#include "PBIT_Class.h"
#include "Interfaces_Class.h"

// default constructor
PBIT_Class::PBIT_Class()
    2be0:	b480      	push	{r7}
    2be2:	b083      	sub	sp, #12
    2be4:	af00      	add	r7, sp, #0
    2be6:	6078      	str	r0, [r7, #4]
{
	isOK=true;
    2be8:	687b      	ldr	r3, [r7, #4]
    2bea:	2201      	movs	r2, #1
    2bec:	701a      	strb	r2, [r3, #0]
} //PBIT_Class
    2bee:	687b      	ldr	r3, [r7, #4]
    2bf0:	4618      	mov	r0, r3
    2bf2:	370c      	adds	r7, #12
    2bf4:	46bd      	mov	sp, r7
    2bf6:	bc80      	pop	{r7}
    2bf8:	4770      	bx	lr

00002bfa <_ZN10PBIT_ClassD1Ev>:

// default destructor
PBIT_Class::~PBIT_Class()
    2bfa:	b480      	push	{r7}
    2bfc:	b083      	sub	sp, #12
    2bfe:	af00      	add	r7, sp, #0
    2c00:	6078      	str	r0, [r7, #4]
{
} //~PBIT_Class
    2c02:	687b      	ldr	r3, [r7, #4]
    2c04:	4618      	mov	r0, r3
    2c06:	370c      	adds	r7, #12
    2c08:	46bd      	mov	sp, r7
    2c0a:	bc80      	pop	{r7}
    2c0c:	4770      	bx	lr

00002c0e <_ZN10PBIT_ClasscvbEv>:
		isOK=true;
	}
	return isOK;
}

PBIT_Class::operator bool(){
    2c0e:	b480      	push	{r7}
    2c10:	b083      	sub	sp, #12
    2c12:	af00      	add	r7, sp, #0
    2c14:	6078      	str	r0, [r7, #4]
	return	isOK;
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	781b      	ldrb	r3, [r3, #0]
    2c1a:	b2db      	uxtb	r3, r3
}
    2c1c:	4618      	mov	r0, r3
    2c1e:	370c      	adds	r7, #12
    2c20:	46bd      	mov	sp, r7
    2c22:	bc80      	pop	{r7}
    2c24:	4770      	bx	lr
	...

00002c28 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus>:

uint32_t  PBIT_Class::CheckCurrentStatus(HVACStatus& cs){
    2c28:	b580      	push	{r7, lr}
    2c2a:	b086      	sub	sp, #24
    2c2c:	af00      	add	r7, sp, #0
    2c2e:	6078      	str	r0, [r7, #4]
    2c30:	6039      	str	r1, [r7, #0]
	interfaces.GetStatus(cs);
    2c32:	6839      	ldr	r1, [r7, #0]
    2c34:	4812      	ldr	r0, [pc, #72]	; (2c80 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x58>)
    2c36:	4b13      	ldr	r3, [pc, #76]	; (2c84 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x5c>)
    2c38:	4798      	blx	r3
	uint32_t	*s=(uint32_t*)&cs.statusBits;
    2c3a:	683b      	ldr	r3, [r7, #0]
    2c3c:	613b      	str	r3, [r7, #16]
	uint32_t	v=*s;
    2c3e:	693b      	ldr	r3, [r7, #16]
    2c40:	681b      	ldr	r3, [r3, #0]
    2c42:	60fb      	str	r3, [r7, #12]

	for (int i=0;i<32;i++)
    2c44:	2300      	movs	r3, #0
    2c46:	617b      	str	r3, [r7, #20]
    2c48:	697b      	ldr	r3, [r7, #20]
    2c4a:	2b1f      	cmp	r3, #31
    2c4c:	dc0d      	bgt.n	2c6a <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x42>
	{
		v+=(0x01<<i)&(v);
    2c4e:	2201      	movs	r2, #1
    2c50:	697b      	ldr	r3, [r7, #20]
    2c52:	fa02 f303 	lsl.w	r3, r2, r3
    2c56:	461a      	mov	r2, r3
    2c58:	68fb      	ldr	r3, [r7, #12]
    2c5a:	401a      	ands	r2, r3
    2c5c:	68fb      	ldr	r3, [r7, #12]
    2c5e:	4413      	add	r3, r2
    2c60:	60fb      	str	r3, [r7, #12]
	for (int i=0;i<32;i++)
    2c62:	697b      	ldr	r3, [r7, #20]
    2c64:	3301      	adds	r3, #1
    2c66:	617b      	str	r3, [r7, #20]
    2c68:	e7ee      	b.n	2c48 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x20>
		
	}
	if (v==0)
    2c6a:	68fb      	ldr	r3, [r7, #12]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	d102      	bne.n	2c76 <_ZN10PBIT_Class18CheckCurrentStatusER10HVACStatus+0x4e>
	{
		isOK=true;
    2c70:	687b      	ldr	r3, [r7, #4]
    2c72:	2201      	movs	r2, #1
    2c74:	701a      	strb	r2, [r3, #0]
	}
	return	v;
    2c76:	68fb      	ldr	r3, [r7, #12]
}
    2c78:	4618      	mov	r0, r3
    2c7a:	3718      	adds	r7, #24
    2c7c:	46bd      	mov	sp, r7
    2c7e:	bd80      	pop	{r7, pc}
    2c80:	2000160c 	.word	0x2000160c
    2c84:	00001fcd 	.word	0x00001fcd

00002c88 <_Z41__static_initialization_and_destruction_0ii>:
    2c88:	b580      	push	{r7, lr}
    2c8a:	b082      	sub	sp, #8
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	6078      	str	r0, [r7, #4]
    2c90:	6039      	str	r1, [r7, #0]
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	2b01      	cmp	r3, #1
    2c96:	d10c      	bne.n	2cb2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2c98:	683b      	ldr	r3, [r7, #0]
    2c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2c9e:	4293      	cmp	r3, r2
    2ca0:	d107      	bne.n	2cb2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
    2ca2:	4806      	ldr	r0, [pc, #24]	; (2cbc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2ca4:	4b06      	ldr	r3, [pc, #24]	; (2cc0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    2ca6:	4798      	blx	r3
    2ca8:	4a06      	ldr	r2, [pc, #24]	; (2cc4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    2caa:	4907      	ldr	r1, [pc, #28]	; (2cc8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    2cac:	4803      	ldr	r0, [pc, #12]	; (2cbc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    2cae:	4b07      	ldr	r3, [pc, #28]	; (2ccc <_Z41__static_initialization_and_destruction_0ii+0x44>)
    2cb0:	4798      	blx	r3
    2cb2:	bf00      	nop
    2cb4:	3708      	adds	r7, #8
    2cb6:	46bd      	mov	sp, r7
    2cb8:	bd80      	pop	{r7, pc}
    2cba:	bf00      	nop
    2cbc:	20008104 	.word	0x20008104
    2cc0:	00002be1 	.word	0x00002be1
    2cc4:	20000000 	.word	0x20000000
    2cc8:	00002bfb 	.word	0x00002bfb
    2ccc:	00018bf5 	.word	0x00018bf5

00002cd0 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev>:
    2cd0:	b580      	push	{r7, lr}
    2cd2:	af00      	add	r7, sp, #0
    2cd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2cd8:	2001      	movs	r0, #1
    2cda:	4b01      	ldr	r3, [pc, #4]	; (2ce0 <_GLOBAL__sub_I__ZN10PBIT_ClassC2Ev+0x10>)
    2cdc:	4798      	blx	r3
    2cde:	bd80      	pop	{r7, pc}
    2ce0:	00002c89 	.word	0x00002c89

00002ce4 <_ZN19PersistenceServicesC1Ev>:
tick_t PersistenceServices::lastUpdate[kNumberOfUsageTimeCounters + kNumberOfCycleDescriptions];	




PersistenceServices::PersistenceServices(void)
    2ce4:	b580      	push	{r7, lr}
    2ce6:	b082      	sub	sp, #8
    2ce8:	af00      	add	r7, sp, #0
    2cea:	6078      	str	r0, [r7, #4]
	:lastValidSaveWorkingStateForGAINIndex(0)
    2cec:	687b      	ldr	r3, [r7, #4]
    2cee:	4618      	mov	r0, r3
    2cf0:	4b05      	ldr	r3, [pc, #20]	; (2d08 <_ZN19PersistenceServicesC1Ev+0x24>)
    2cf2:	4798      	blx	r3
    2cf4:	687b      	ldr	r3, [r7, #4]
    2cf6:	2200      	movs	r2, #0
    2cf8:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	{
	}
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	4618      	mov	r0, r3
    2d00:	3708      	adds	r7, #8
    2d02:	46bd      	mov	sp, r7
    2d04:	bd80      	pop	{r7, pc}
    2d06:	bf00      	nop
    2d08:	00001429 	.word	0x00001429

00002d0c <_ZN19PersistenceServices26writeConfigurationDataAreaER17ConfigurationData>:
	
	return result;
	}

bool PersistenceServices::writeConfigurationDataArea(ConfigurationData& data)
	{
    2d0c:	b480      	push	{r7}
    2d0e:	b085      	sub	sp, #20
    2d10:	af00      	add	r7, sp, #0
    2d12:	6078      	str	r0, [r7, #4]
    2d14:	6039      	str	r1, [r7, #0]
	bool	result(true);
    2d16:	2301      	movs	r3, #1
    2d18:	73fb      	strb	r3, [r7, #15]

	data.commons.version = kConfigurationDataVersion;
    2d1a:	683b      	ldr	r3, [r7, #0]
    2d1c:	2204      	movs	r2, #4
    2d1e:	605a      	str	r2, [r3, #4]
	data.commons.size = kConfigurationDataSize;
    2d20:	683b      	ldr	r3, [r7, #0]
    2d22:	22ac      	movs	r2, #172	; 0xac
    2d24:	601a      	str	r2, [r3, #0]
	data.commons.partNumber = PARTNUMBER;
    2d26:	683b      	ldr	r3, [r7, #0]
    2d28:	f240 720c 	movw	r2, #1804	; 0x70c
    2d2c:	609a      	str	r2, [r3, #8]



	

	return result;
    2d2e:	7bfb      	ldrb	r3, [r7, #15]
	}
    2d30:	4618      	mov	r0, r3
    2d32:	3714      	adds	r7, #20
    2d34:	46bd      	mov	sp, r7
    2d36:	bc80      	pop	{r7}
    2d38:	4770      	bx	lr
	...

00002d3c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv>:
	value += increment;

	}
	
bool PersistenceServices::IsConfigurationDataUpdated()
{
    2d3c:	b580      	push	{r7, lr}
    2d3e:	b086      	sub	sp, #24
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
	uint32_t	ver=factoryDefaultsConfiguration.commons.version;
    2d44:	4b17      	ldr	r3, [pc, #92]	; (2da4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x68>)
    2d46:	685b      	ldr	r3, [r3, #4]
    2d48:	617b      	str	r3, [r7, #20]
	uint32_t	verUp=memory.ReadUpdatedConfigurationData(configuration);
    2d4a:	687b      	ldr	r3, [r7, #4]
    2d4c:	33e4      	adds	r3, #228	; 0xe4
    2d4e:	4619      	mov	r1, r3
    2d50:	4815      	ldr	r0, [pc, #84]	; (2da8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    2d52:	4b16      	ldr	r3, [pc, #88]	; (2dac <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x70>)
    2d54:	4798      	blx	r3
    2d56:	6138      	str	r0, [r7, #16]

	if ((verUp>0))
    2d58:	693b      	ldr	r3, [r7, #16]
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	d001      	beq.n	2d62 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x26>
	{
		return false;
    2d5e:	2300      	movs	r3, #0
    2d60:	e01c      	b.n	2d9c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
	} 
	else
	{
		uint32_t	refCRC=memory.ReadCRCConfigurationData();
    2d62:	4811      	ldr	r0, [pc, #68]	; (2da8 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x6c>)
    2d64:	4b12      	ldr	r3, [pc, #72]	; (2db0 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x74>)
    2d66:	4798      	blx	r3
    2d68:	60f8      	str	r0, [r7, #12]
		uint32_t	crc=CalculateCRC((uint32_t *)PTR_CONFIG_DATA(&configuration),sizeof(configuration));
    2d6a:	6878      	ldr	r0, [r7, #4]
    2d6c:	687b      	ldr	r3, [r7, #4]
    2d6e:	33e4      	adds	r3, #228	; 0xe4
    2d70:	22ac      	movs	r2, #172	; 0xac
    2d72:	4619      	mov	r1, r3
    2d74:	4b0f      	ldr	r3, [pc, #60]	; (2db4 <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x78>)
    2d76:	4798      	blx	r3
    2d78:	60b8      	str	r0, [r7, #8]
		if (refCRC==crc)
    2d7a:	68fa      	ldr	r2, [r7, #12]
    2d7c:	68bb      	ldr	r3, [r7, #8]
    2d7e:	429a      	cmp	r2, r3
    2d80:	d10b      	bne.n	2d9a <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x5e>
		{
			verUp=configuration.commons.version;
    2d82:	687b      	ldr	r3, [r7, #4]
    2d84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    2d88:	613b      	str	r3, [r7, #16]
			return (verUp>ver);
    2d8a:	693a      	ldr	r2, [r7, #16]
    2d8c:	697b      	ldr	r3, [r7, #20]
    2d8e:	429a      	cmp	r2, r3
    2d90:	bf8c      	ite	hi
    2d92:	2301      	movhi	r3, #1
    2d94:	2300      	movls	r3, #0
    2d96:	b2db      	uxtb	r3, r3
    2d98:	e000      	b.n	2d9c <_ZN19PersistenceServices26IsConfigurationDataUpdatedEv+0x60>
		} 
		else
		{
			return	false;
    2d9a:	2300      	movs	r3, #0
		}
		
	}
	return	false;

}
    2d9c:	4618      	mov	r0, r3
    2d9e:	3718      	adds	r7, #24
    2da0:	46bd      	mov	sp, r7
    2da2:	bd80      	pop	{r7, pc}
    2da4:	0001f150 	.word	0x0001f150
    2da8:	20002d4c 	.word	0x20002d4c
    2dac:	00002879 	.word	0x00002879
    2db0:	000028e5 	.word	0x000028e5
    2db4:	000014ad 	.word	0x000014ad

00002db8 <_ZN19PersistenceServices16IsStateDataValidER9HVACState>:
	

	return result;
	}
bool PersistenceServices::IsStateDataValid(HVACState& as)
{
    2db8:	b580      	push	{r7, lr}
    2dba:	b084      	sub	sp, #16
    2dbc:	af00      	add	r7, sp, #0
    2dbe:	6078      	str	r0, [r7, #4]
    2dc0:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadCRCApplicationState();
    2dc2:	480b      	ldr	r0, [pc, #44]	; (2df0 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x38>)
    2dc4:	4b0b      	ldr	r3, [pc, #44]	; (2df4 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x3c>)
    2dc6:	4798      	blx	r3
    2dc8:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(lastState));
    2dca:	687b      	ldr	r3, [r7, #4]
    2dcc:	2270      	movs	r2, #112	; 0x70
    2dce:	6839      	ldr	r1, [r7, #0]
    2dd0:	4618      	mov	r0, r3
    2dd2:	4b09      	ldr	r3, [pc, #36]	; (2df8 <_ZN19PersistenceServices16IsStateDataValidER9HVACState+0x40>)
    2dd4:	4798      	blx	r3
    2dd6:	60b8      	str	r0, [r7, #8]
	return (refCRC==crc);
    2dd8:	68fa      	ldr	r2, [r7, #12]
    2dda:	68bb      	ldr	r3, [r7, #8]
    2ddc:	429a      	cmp	r2, r3
    2dde:	bf0c      	ite	eq
    2de0:	2301      	moveq	r3, #1
    2de2:	2300      	movne	r3, #0
    2de4:	b2db      	uxtb	r3, r3
}
    2de6:	4618      	mov	r0, r3
    2de8:	3710      	adds	r7, #16
    2dea:	46bd      	mov	sp, r7
    2dec:	bd80      	pop	{r7, pc}
    2dee:	bf00      	nop
    2df0:	20002d4c 	.word	0x20002d4c
    2df4:	00002b9d 	.word	0x00002b9d
    2df8:	000014ad 	.word	0x000014ad

00002dfc <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState>:
bool PersistenceServices::IsFastStateDataValid(HVACState& as)
{
    2dfc:	b580      	push	{r7, lr}
    2dfe:	b084      	sub	sp, #16
    2e00:	af00      	add	r7, sp, #0
    2e02:	6078      	str	r0, [r7, #4]
    2e04:	6039      	str	r1, [r7, #0]
	uint32_t	refCRC=memory.ReadFastCRCApplicationState();
    2e06:	480b      	ldr	r0, [pc, #44]	; (2e34 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x38>)
    2e08:	4b0b      	ldr	r3, [pc, #44]	; (2e38 <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x3c>)
    2e0a:	4798      	blx	r3
    2e0c:	60f8      	str	r0, [r7, #12]
	uint32_t	crc=CalculateCRC((uint32_t *)PTR_HVAC_STATE(&as),sizeof(HVACState));
    2e0e:	687b      	ldr	r3, [r7, #4]
    2e10:	2270      	movs	r2, #112	; 0x70
    2e12:	6839      	ldr	r1, [r7, #0]
    2e14:	4618      	mov	r0, r3
    2e16:	4b09      	ldr	r3, [pc, #36]	; (2e3c <_ZN19PersistenceServices20IsFastStateDataValidER9HVACState+0x40>)
    2e18:	4798      	blx	r3
    2e1a:	60b8      	str	r0, [r7, #8]
	
	return (refCRC==crc);
    2e1c:	68fa      	ldr	r2, [r7, #12]
    2e1e:	68bb      	ldr	r3, [r7, #8]
    2e20:	429a      	cmp	r2, r3
    2e22:	bf0c      	ite	eq
    2e24:	2301      	moveq	r3, #1
    2e26:	2300      	movne	r3, #0
    2e28:	b2db      	uxtb	r3, r3
}
    2e2a:	4618      	mov	r0, r3
    2e2c:	3710      	adds	r7, #16
    2e2e:	46bd      	mov	sp, r7
    2e30:	bd80      	pop	{r7, pc}
    2e32:	bf00      	nop
    2e34:	20002d3c 	.word	0x20002d3c
    2e38:	00001795 	.word	0x00001795
    2e3c:	000014ad 	.word	0x000014ad

00002e40 <_ZL24HVACOperationTimeElapsedPK10timer_task>:
#include "CBIT_Class.h"
#include "FlapperValve_Class.h"
#include "TemperatureSensors_Class.h"

States_Class*	ptrStatesClass;
static void  HVACOperationTimeElapsed(const struct timer_task *const timer_task){
    2e40:	b480      	push	{r7}
    2e42:	b083      	sub	sp, #12
    2e44:	af00      	add	r7, sp, #0
    2e46:	6078      	str	r0, [r7, #4]
	ptrStatesClass->timeElapsed=true;
    2e48:	4b04      	ldr	r3, [pc, #16]	; (2e5c <_ZL24HVACOperationTimeElapsedPK10timer_task+0x1c>)
    2e4a:	681b      	ldr	r3, [r3, #0]
    2e4c:	2201      	movs	r2, #1
    2e4e:	f883 239d 	strb.w	r2, [r3, #925]	; 0x39d
}
    2e52:	bf00      	nop
    2e54:	370c      	adds	r7, #12
    2e56:	46bd      	mov	sp, r7
    2e58:	bc80      	pop	{r7}
    2e5a:	4770      	bx	lr
    2e5c:	20008138 	.word	0x20008138

00002e60 <_ZL14HVACTimerTicksPK10timer_task>:
static void HVACTimerTicks(const struct timer_task *const timer_task)
{
    2e60:	b480      	push	{r7}
    2e62:	b083      	sub	sp, #12
    2e64:	af00      	add	r7, sp, #0
    2e66:	6078      	str	r0, [r7, #4]
	hvacTimer.ticks++;
    2e68:	4b04      	ldr	r3, [pc, #16]	; (2e7c <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2e6a:	689b      	ldr	r3, [r3, #8]
    2e6c:	3301      	adds	r3, #1
    2e6e:	4a03      	ldr	r2, [pc, #12]	; (2e7c <_ZL14HVACTimerTicksPK10timer_task+0x1c>)
    2e70:	6093      	str	r3, [r2, #8]
}
    2e72:	bf00      	nop
    2e74:	370c      	adds	r7, #12
    2e76:	46bd      	mov	sp, r7
    2e78:	bc80      	pop	{r7}
    2e7a:	4770      	bx	lr
    2e7c:	2000a200 	.word	0x2000a200

00002e80 <_ZN12States_ClassC1Ev>:

static HVACState staticCurrentState;
	// default constructor
States_Class::States_Class(void)
    2e80:	b580      	push	{r7, lr}
    2e82:	b082      	sub	sp, #8
    2e84:	af00      	add	r7, sp, #0
    2e86:	6078      	str	r0, [r7, #4]
    2e88:	687b      	ldr	r3, [r7, #4]
    2e8a:	4618      	mov	r0, r3
    2e8c:	4b12      	ldr	r3, [pc, #72]	; (2ed8 <_ZN12States_ClassC1Ev+0x58>)
    2e8e:	4798      	blx	r3
    2e90:	687b      	ldr	r3, [r7, #4]
    2e92:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
    2e96:	4618      	mov	r0, r3
    2e98:	4b10      	ldr	r3, [pc, #64]	; (2edc <_ZN12States_ClassC1Ev+0x5c>)
    2e9a:	4798      	blx	r3
    2e9c:	4a10      	ldr	r2, [pc, #64]	; (2ee0 <_ZN12States_ClassC1Ev+0x60>)
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	601a      	str	r2, [r3, #0]
{
	ptrStatesClass=this;
    2ea2:	4a10      	ldr	r2, [pc, #64]	; (2ee4 <_ZN12States_ClassC1Ev+0x64>)
    2ea4:	687b      	ldr	r3, [r7, #4]
    2ea6:	6013      	str	r3, [r2, #0]
	listener.eventHandler = NULL;
    2ea8:	4b0f      	ldr	r3, [pc, #60]	; (2ee8 <_ZN12States_ClassC1Ev+0x68>)
    2eaa:	2200      	movs	r2, #0
    2eac:	615a      	str	r2, [r3, #20]
	staticCurrentState=defaultState;
    2eae:	4a0f      	ldr	r2, [pc, #60]	; (2eec <_ZN12States_ClassC1Ev+0x6c>)
    2eb0:	687b      	ldr	r3, [r7, #4]
    2eb2:	4610      	mov	r0, r2
    2eb4:	3304      	adds	r3, #4
    2eb6:	2270      	movs	r2, #112	; 0x70
    2eb8:	4619      	mov	r1, r3
    2eba:	4b0d      	ldr	r3, [pc, #52]	; (2ef0 <_ZN12States_ClassC1Ev+0x70>)
    2ebc:	4798      	blx	r3
	isOK=false;
    2ebe:	687b      	ldr	r3, [r7, #4]
    2ec0:	2200      	movs	r2, #0
    2ec2:	f883 239c 	strb.w	r2, [r3, #924]	; 0x39c
	hvacState=&staticCurrentState;
    2ec6:	687b      	ldr	r3, [r7, #4]
    2ec8:	4a08      	ldr	r2, [pc, #32]	; (2eec <_ZN12States_ClassC1Ev+0x6c>)
    2eca:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
    2ece:	687b      	ldr	r3, [r7, #4]
    2ed0:	4618      	mov	r0, r3
    2ed2:	3708      	adds	r7, #8
    2ed4:	46bd      	mov	sp, r7
    2ed6:	bd80      	pop	{r7, pc}
    2ed8:	00001035 	.word	0x00001035
    2edc:	00001c61 	.word	0x00001c61
    2ee0:	0001f83c 	.word	0x0001f83c
    2ee4:	20008138 	.word	0x20008138
    2ee8:	200099c8 	.word	0x200099c8
    2eec:	2000813c 	.word	0x2000813c
    2ef0:	0001b35d 	.word	0x0001b35d

00002ef4 <_ZN12States_ClassD1Ev>:

// default destructor
States_Class::~States_Class()
    2ef4:	b580      	push	{r7, lr}
    2ef6:	b082      	sub	sp, #8
    2ef8:	af00      	add	r7, sp, #0
    2efa:	6078      	str	r0, [r7, #4]
    2efc:	4a08      	ldr	r2, [pc, #32]	; (2f20 <_ZN12States_ClassD1Ev+0x2c>)
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	601a      	str	r2, [r3, #0]
    2f02:	687b      	ldr	r3, [r7, #4]
    2f04:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
    2f08:	4618      	mov	r0, r3
    2f0a:	4b06      	ldr	r3, [pc, #24]	; (2f24 <_ZN12States_ClassD1Ev+0x30>)
    2f0c:	4798      	blx	r3
    2f0e:	687b      	ldr	r3, [r7, #4]
    2f10:	4618      	mov	r0, r3
    2f12:	4b05      	ldr	r3, [pc, #20]	; (2f28 <_ZN12States_ClassD1Ev+0x34>)
    2f14:	4798      	blx	r3
{
} //~States_Class
    2f16:	687b      	ldr	r3, [r7, #4]
    2f18:	4618      	mov	r0, r3
    2f1a:	3708      	adds	r7, #8
    2f1c:	46bd      	mov	sp, r7
    2f1e:	bd80      	pop	{r7, pc}
    2f20:	0001f83c 	.word	0x0001f83c
    2f24:	00001c75 	.word	0x00001c75
    2f28:	00001099 	.word	0x00001099

00002f2c <_ZN12States_Class4InitEv>:

bool States_Class::Init(void){
    2f2c:	b590      	push	{r4, r7, lr}
    2f2e:	b083      	sub	sp, #12
    2f30:	af00      	add	r7, sp, #0
    2f32:	6078      	str	r0, [r7, #4]
	if (hvacTimer.Init())
    2f34:	4814      	ldr	r0, [pc, #80]	; (2f88 <_ZN12States_Class4InitEv+0x5c>)
    2f36:	4b15      	ldr	r3, [pc, #84]	; (2f8c <_ZN12States_Class4InitEv+0x60>)
    2f38:	4798      	blx	r3
    2f3a:	4603      	mov	r3, r0
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	d004      	beq.n	2f4a <_ZN12States_Class4InitEv+0x1e>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACTimerTicks),1);
    2f40:	2201      	movs	r2, #1
    2f42:	4913      	ldr	r1, [pc, #76]	; (2f90 <_ZN12States_Class4InitEv+0x64>)
    2f44:	4810      	ldr	r0, [pc, #64]	; (2f88 <_ZN12States_Class4InitEv+0x5c>)
    2f46:	4b13      	ldr	r3, [pc, #76]	; (2f94 <_ZN12States_Class4InitEv+0x68>)
    2f48:	4798      	blx	r3
	}
	isOK=temperatures.Init();
    2f4a:	4813      	ldr	r0, [pc, #76]	; (2f98 <_ZN12States_Class4InitEv+0x6c>)
    2f4c:	4b13      	ldr	r3, [pc, #76]	; (2f9c <_ZN12States_Class4InitEv+0x70>)
    2f4e:	4798      	blx	r3
    2f50:	4603      	mov	r3, r0
    2f52:	461a      	mov	r2, r3
    2f54:	687b      	ldr	r3, [r7, #4]
    2f56:	f883 239c 	strb.w	r2, [r3, #924]	; 0x39c
	if (isOK)
    2f5a:	687b      	ldr	r3, [r7, #4]
    2f5c:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
    2f60:	b2db      	uxtb	r3, r3
    2f62:	2b00      	cmp	r3, #0
    2f64:	d002      	beq.n	2f6c <_ZN12States_Class4InitEv+0x40>
	{
		temperatures.StartOneConversion();
    2f66:	480c      	ldr	r0, [pc, #48]	; (2f98 <_ZN12States_Class4InitEv+0x6c>)
    2f68:	4b0d      	ldr	r3, [pc, #52]	; (2fa0 <_ZN12States_Class4InitEv+0x74>)
    2f6a:	4798      	blx	r3
	}
	hvacState->hvacStatus.statusBits.flapValve1=fv1.Init();
    2f6c:	687b      	ldr	r3, [r7, #4]
    2f6e:	f8d3 43a0 	ldr.w	r4, [r3, #928]	; 0x3a0
    2f72:	480c      	ldr	r0, [pc, #48]	; (2fa4 <_ZN12States_Class4InitEv+0x78>)
    2f74:	4b0c      	ldr	r3, [pc, #48]	; (2fa8 <_ZN12States_Class4InitEv+0x7c>)
    2f76:	4798      	blx	r3
    2f78:	4603      	mov	r3, r0
    2f7a:	75e3      	strb	r3, [r4, #23]
	hvacState->hvacStatus.statusBits.flapValve1;
	//return isOK;
	return true;
    2f7c:	2301      	movs	r3, #1
	
}
    2f7e:	4618      	mov	r0, r3
    2f80:	370c      	adds	r7, #12
    2f82:	46bd      	mov	sp, r7
    2f84:	bd90      	pop	{r4, r7, pc}
    2f86:	bf00      	nop
    2f88:	2000a200 	.word	0x2000a200
    2f8c:	00016da9 	.word	0x00016da9
    2f90:	00002e61 	.word	0x00002e61
    2f94:	00016e6d 	.word	0x00016e6d
    2f98:	20009b78 	.word	0x20009b78
    2f9c:	00014fd9 	.word	0x00014fd9
    2fa0:	000150d9 	.word	0x000150d9
    2fa4:	2000150c 	.word	0x2000150c
    2fa8:	00001ab1 	.word	0x00001ab1

00002fac <_ZN12States_Class16ControllerResumeEh>:
void States_Class::ControllerResume(uint8_t	operationMode){
    2fac:	b590      	push	{r4, r7, lr}
    2fae:	b08f      	sub	sp, #60	; 0x3c
    2fb0:	af02      	add	r7, sp, #8
    2fb2:	6078      	str	r0, [r7, #4]
    2fb4:	460b      	mov	r3, r1
    2fb6:	70fb      	strb	r3, [r7, #3]
	event e;
    2fb8:	f107 031c 	add.w	r3, r7, #28
    2fbc:	4618      	mov	r0, r3
    2fbe:	4b4a      	ldr	r3, [pc, #296]	; (30e8 <_ZN12States_Class16ControllerResumeEh+0x13c>)
    2fc0:	4798      	blx	r3
	bool done(false);
    2fc2:	2300      	movs	r3, #0
    2fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	
	
		if (operationMode==0)
    2fc8:	78fb      	ldrb	r3, [r7, #3]
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d115      	bne.n	2ffa <_ZN12States_Class16ControllerResumeEh+0x4e>
		{
			if (timeElapsed)
    2fce:	687b      	ldr	r3, [r7, #4]
    2fd0:	f893 339d 	ldrb.w	r3, [r3, #925]	; 0x39d
    2fd4:	b2db      	uxtb	r3, r3
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d00f      	beq.n	2ffa <_ZN12States_Class16ControllerResumeEh+0x4e>
			{
				usb<<"Air Conditioning System Operating"<<NEWLINE;
    2fda:	4944      	ldr	r1, [pc, #272]	; (30ec <_ZN12States_Class16ControllerResumeEh+0x140>)
    2fdc:	4844      	ldr	r0, [pc, #272]	; (30f0 <_ZN12States_Class16ControllerResumeEh+0x144>)
    2fde:	4b45      	ldr	r3, [pc, #276]	; (30f4 <_ZN12States_Class16ControllerResumeEh+0x148>)
    2fe0:	4798      	blx	r3
    2fe2:	4603      	mov	r3, r0
    2fe4:	4944      	ldr	r1, [pc, #272]	; (30f8 <_ZN12States_Class16ControllerResumeEh+0x14c>)
    2fe6:	4618      	mov	r0, r3
    2fe8:	4b44      	ldr	r3, [pc, #272]	; (30fc <_ZN12States_Class16ControllerResumeEh+0x150>)
    2fea:	4798      	blx	r3
				timeElapsed=false;
    2fec:	687b      	ldr	r3, [r7, #4]
    2fee:	2200      	movs	r2, #0
    2ff0:	f883 239d 	strb.w	r2, [r3, #925]	; 0x39d
				delay_ms(10);
    2ff4:	200a      	movs	r0, #10
    2ff6:	4b42      	ldr	r3, [pc, #264]	; (3100 <_ZN12States_Class16ControllerResumeEh+0x154>)
    2ff8:	4798      	blx	r3
				//alu.PrepareNewTask(kALUCheckCommunication);
				
			}
		}
		if (hvacState->currentState==kHVACStateLeaving)
    2ffa:	687b      	ldr	r3, [r7, #4]
    2ffc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3002:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    3006:	d10a      	bne.n	301e <_ZN12States_Class16ControllerResumeEh+0x72>
		{
			prepareStateChangeEvent(hvacState->lastState);
    3008:	687b      	ldr	r3, [r7, #4]
    300a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3010:	b29b      	uxth	r3, r3
    3012:	2200      	movs	r2, #0
    3014:	4619      	mov	r1, r3
    3016:	6878      	ldr	r0, [r7, #4]
    3018:	4b3a      	ldr	r3, [pc, #232]	; (3104 <_ZN12States_Class16ControllerResumeEh+0x158>)
    301a:	4798      	blx	r3
    301c:	e005      	b.n	302a <_ZN12States_Class16ControllerResumeEh+0x7e>
			
		} 
		else
		{
			prepareStateChangeEvent(kHVACStateInitialize);
    301e:	2200      	movs	r2, #0
    3020:	f44f 7197 	mov.w	r1, #302	; 0x12e
    3024:	6878      	ldr	r0, [r7, #4]
    3026:	4b37      	ldr	r3, [pc, #220]	; (3104 <_ZN12States_Class16ControllerResumeEh+0x158>)
    3028:	4798      	blx	r3
		}
		
		if (operationMode>0)
    302a:	78fb      	ldrb	r3, [r7, #3]
    302c:	2b00      	cmp	r3, #0
    302e:	dd50      	ble.n	30d2 <_ZN12States_Class16ControllerResumeEh+0x126>
		{
			
			event	e;
    3030:	f107 030c 	add.w	r3, r7, #12
    3034:	4618      	mov	r0, r3
    3036:	4b2c      	ldr	r3, [pc, #176]	; (30e8 <_ZN12States_Class16ControllerResumeEh+0x13c>)
    3038:	4798      	blx	r3
			listener.eventHandler=&States_Class::CheckEvents;
    303a:	4b33      	ldr	r3, [pc, #204]	; (3108 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    303c:	4a33      	ldr	r2, [pc, #204]	; (310c <_ZN12States_Class16ControllerResumeEh+0x160>)
    303e:	615a      	str	r2, [r3, #20]
			while ((cBit.IsOK())&&(!done))
    3040:	4833      	ldr	r0, [pc, #204]	; (3110 <_ZN12States_Class16ControllerResumeEh+0x164>)
    3042:	4b34      	ldr	r3, [pc, #208]	; (3114 <_ZN12States_Class16ControllerResumeEh+0x168>)
    3044:	4798      	blx	r3
    3046:	4603      	mov	r3, r0
    3048:	2b00      	cmp	r3, #0
    304a:	d008      	beq.n	305e <_ZN12States_Class16ControllerResumeEh+0xb2>
    304c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3050:	f083 0301 	eor.w	r3, r3, #1
    3054:	b2db      	uxtb	r3, r3
    3056:	2b00      	cmp	r3, #0
    3058:	d001      	beq.n	305e <_ZN12States_Class16ControllerResumeEh+0xb2>
    305a:	2301      	movs	r3, #1
    305c:	e000      	b.n	3060 <_ZN12States_Class16ControllerResumeEh+0xb4>
    305e:	2300      	movs	r3, #0
    3060:	2b00      	cmp	r3, #0
    3062:	d03d      	beq.n	30e0 <_ZN12States_Class16ControllerResumeEh+0x134>
			{
				if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent,8))
    3064:	f107 010c 	add.w	r1, r7, #12
    3068:	2308      	movs	r3, #8
    306a:	9300      	str	r3, [sp, #0]
    306c:	f44f 7300 	mov.w	r3, #512	; 0x200
    3070:	f44f 7200 	mov.w	r2, #512	; 0x200
    3074:	4824      	ldr	r0, [pc, #144]	; (3108 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    3076:	4c28      	ldr	r4, [pc, #160]	; (3118 <_ZN12States_Class16ControllerResumeEh+0x16c>)
    3078:	47a0      	blx	r4
    307a:	4603      	mov	r3, r0
    307c:	2b00      	cmp	r3, #0
    307e:	d010      	beq.n	30a2 <_ZN12States_Class16ControllerResumeEh+0xf6>
				{
					handleHVACEvent(e);
    3080:	f107 030c 	add.w	r3, r7, #12
    3084:	4619      	mov	r1, r3
    3086:	6878      	ldr	r0, [r7, #4]
    3088:	4b24      	ldr	r3, [pc, #144]	; (311c <_ZN12States_Class16ControllerResumeEh+0x170>)
    308a:	4798      	blx	r3
					if (hvacState->currentState==kHVACStateLeaving)
    308c:	687b      	ldr	r3, [r7, #4]
    308e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3094:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    3098:	d1d2      	bne.n	3040 <_ZN12States_Class16ControllerResumeEh+0x94>
					{
							done=true;
    309a:	2301      	movs	r3, #1
    309c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
    30a0:	e01e      	b.n	30e0 <_ZN12States_Class16ControllerResumeEh+0x134>
					} 
						
				}
				else if (listener.WaitForEvent(e, kALUEventClass, kAnyEventType,4)){
    30a2:	f107 010c 	add.w	r1, r7, #12
    30a6:	2304      	movs	r3, #4
    30a8:	9300      	str	r3, [sp, #0]
    30aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    30ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    30b2:	4815      	ldr	r0, [pc, #84]	; (3108 <_ZN12States_Class16ControllerResumeEh+0x15c>)
    30b4:	4c1a      	ldr	r4, [pc, #104]	; (3120 <_ZN12States_Class16ControllerResumeEh+0x174>)
    30b6:	47a0      	blx	r4
    30b8:	4603      	mov	r3, r0
    30ba:	2b00      	cmp	r3, #0
    30bc:	d0c0      	beq.n	3040 <_ZN12States_Class16ControllerResumeEh+0x94>
					alu.PrepareNewEvent(kALUEventCheckPheripherals);
    30be:	2200      	movs	r2, #0
    30c0:	f240 1105 	movw	r1, #261	; 0x105
    30c4:	4817      	ldr	r0, [pc, #92]	; (3124 <_ZN12States_Class16ControllerResumeEh+0x178>)
    30c6:	4b18      	ldr	r3, [pc, #96]	; (3128 <_ZN12States_Class16ControllerResumeEh+0x17c>)
    30c8:	4798      	blx	r3
					done=true;
    30ca:	2301      	movs	r3, #1
    30cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while ((cBit.IsOK())&&(!done))
    30d0:	e7b6      	b.n	3040 <_ZN12States_Class16ControllerResumeEh+0x94>
				}
			}
			
		}else{
			alu.PrepareNewEvent(kALUEventSimpleStart);
    30d2:	2200      	movs	r2, #0
    30d4:	f44f 7182 	mov.w	r1, #260	; 0x104
    30d8:	4812      	ldr	r0, [pc, #72]	; (3124 <_ZN12States_Class16ControllerResumeEh+0x178>)
    30da:	4b13      	ldr	r3, [pc, #76]	; (3128 <_ZN12States_Class16ControllerResumeEh+0x17c>)
    30dc:	4798      	blx	r3
			return;
    30de:	bf00      	nop
		}
		
}
    30e0:	3734      	adds	r7, #52	; 0x34
    30e2:	46bd      	mov	sp, r7
    30e4:	bd90      	pop	{r4, r7, pc}
    30e6:	bf00      	nop
    30e8:	000003c5 	.word	0x000003c5
    30ec:	0001f728 	.word	0x0001f728
    30f0:	2000a258 	.word	0x2000a258
    30f4:	00003e31 	.word	0x00003e31
    30f8:	0001f74c 	.word	0x0001f74c
    30fc:	00000c75 	.word	0x00000c75
    3100:	000060a9 	.word	0x000060a9
    3104:	00003b45 	.word	0x00003b45
    3108:	200099c8 	.word	0x200099c8
    310c:	00003d7d 	.word	0x00003d7d
    3110:	2000812c 	.word	0x2000812c
    3114:	00000fbf 	.word	0x00000fbf
    3118:	000143e5 	.word	0x000143e5
    311c:	0000334d 	.word	0x0000334d
    3120:	0001441d 	.word	0x0001441d
    3124:	20000c88 	.word	0x20000c88
    3128:	00000a35 	.word	0x00000a35

0000312c <_ZN12States_Class5StartEh>:

void States_Class::Start(uint8_t	operationMode)
	{
    312c:	b590      	push	{r4, r7, lr}
    312e:	b08d      	sub	sp, #52	; 0x34
    3130:	af02      	add	r7, sp, #8
    3132:	6078      	str	r0, [r7, #4]
    3134:	460b      	mov	r3, r1
    3136:	70fb      	strb	r3, [r7, #3]
	hvacState->currentState = kHVACStateStart;
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    313e:	f44f 7296 	mov.w	r2, #300	; 0x12c
    3142:	62da      	str	r2, [r3, #44]	; 0x2c
	bool done(false);
    3144:	2300      	movs	r3, #0
    3146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (operationMode==0)
    314a:	78fb      	ldrb	r3, [r7, #3]
    314c:	2b00      	cmp	r3, #0
    314e:	d113      	bne.n	3178 <_ZN12States_Class5StartEh+0x4c>
	{
		hvacTimer.Start_periodic_task(FUNC_PTR(HVACOperationTimeElapsed),100);
    3150:	2264      	movs	r2, #100	; 0x64
    3152:	495f      	ldr	r1, [pc, #380]	; (32d0 <_ZN12States_Class5StartEh+0x1a4>)
    3154:	485f      	ldr	r0, [pc, #380]	; (32d4 <_ZN12States_Class5StartEh+0x1a8>)
    3156:	4b60      	ldr	r3, [pc, #384]	; (32d8 <_ZN12States_Class5StartEh+0x1ac>)
    3158:	4798      	blx	r3
		usb<<"Air Conditioning System Started"<<NEWLINE;
    315a:	4960      	ldr	r1, [pc, #384]	; (32dc <_ZN12States_Class5StartEh+0x1b0>)
    315c:	4860      	ldr	r0, [pc, #384]	; (32e0 <_ZN12States_Class5StartEh+0x1b4>)
    315e:	4b61      	ldr	r3, [pc, #388]	; (32e4 <_ZN12States_Class5StartEh+0x1b8>)
    3160:	4798      	blx	r3
    3162:	4603      	mov	r3, r0
    3164:	4960      	ldr	r1, [pc, #384]	; (32e8 <_ZN12States_Class5StartEh+0x1bc>)
    3166:	4618      	mov	r0, r3
    3168:	4b60      	ldr	r3, [pc, #384]	; (32ec <_ZN12States_Class5StartEh+0x1c0>)
    316a:	4798      	blx	r3
		alu.PrepareNewTask(kALUTaskCheckCommunication);
    316c:	2200      	movs	r2, #0
    316e:	2103      	movs	r1, #3
    3170:	485f      	ldr	r0, [pc, #380]	; (32f0 <_ZN12States_Class5StartEh+0x1c4>)
    3172:	4b60      	ldr	r3, [pc, #384]	; (32f4 <_ZN12States_Class5StartEh+0x1c8>)
    3174:	4798      	blx	r3
	
		return;
    3176:	e0a7      	b.n	32c8 <_ZN12States_Class5StartEh+0x19c>
	}
		
		

    tick_t	timerValue = 0L;
    3178:	2300      	movs	r3, #0
    317a:	623b      	str	r3, [r7, #32]
    bool	isCurrentStateValid = false;
    317c:	2300      	movs	r3, #0
    317e:	77fb      	strb	r3, [r7, #31]
	memory.ReadFastApplicationState(lastHVACState);
    3180:	687b      	ldr	r3, [r7, #4]
    3182:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
    3186:	4619      	mov	r1, r3
    3188:	485b      	ldr	r0, [pc, #364]	; (32f8 <_ZN12States_Class5StartEh+0x1cc>)
    318a:	4b5c      	ldr	r3, [pc, #368]	; (32fc <_ZN12States_Class5StartEh+0x1d0>)
    318c:	4798      	blx	r3
	
	if (calendar.WasInterrupted())
    318e:	485c      	ldr	r0, [pc, #368]	; (3300 <_ZN12States_Class5StartEh+0x1d4>)
    3190:	4b5c      	ldr	r3, [pc, #368]	; (3304 <_ZN12States_Class5StartEh+0x1d8>)
    3192:	4798      	blx	r3
    3194:	4603      	mov	r3, r0
    3196:	2b00      	cmp	r3, #0
    3198:	d019      	beq.n	31ce <_ZN12States_Class5StartEh+0xa2>
	{
		powerInterruptDuration = calendar.GetPowerInterrupTime();
    319a:	4859      	ldr	r0, [pc, #356]	; (3300 <_ZN12States_Class5StartEh+0x1d4>)
    319c:	4b5a      	ldr	r3, [pc, #360]	; (3308 <_ZN12States_Class5StartEh+0x1dc>)
    319e:	4798      	blx	r3
    31a0:	4602      	mov	r2, r0
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
		#ifdef OFFLINE
		resumeLastStateValid = ((powerInterruptDuration > 0) && (powerInterruptDuration < 5000L));
		#else
		resumeLastStateValid = ((powerInterruptDuration >= 0) && (powerInterruptDuration < 5000L));
    31a8:	687b      	ldr	r3, [r7, #4]
    31aa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    31ae:	2b00      	cmp	r3, #0
    31b0:	db08      	blt.n	31c4 <_ZN12States_Class5StartEh+0x98>
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    31b8:	f241 3287 	movw	r2, #4999	; 0x1387
    31bc:	4293      	cmp	r3, r2
    31be:	dc01      	bgt.n	31c4 <_ZN12States_Class5StartEh+0x98>
    31c0:	2201      	movs	r2, #1
    31c2:	e000      	b.n	31c6 <_ZN12States_Class5StartEh+0x9a>
    31c4:	2200      	movs	r2, #0
    31c6:	687b      	ldr	r3, [r7, #4]
    31c8:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    31cc:	e002      	b.n	31d4 <_ZN12States_Class5StartEh+0xa8>

		usb << "powerInterruptDuration was " << powerInterruptDuration << (resumeLastStateValid?" 200msec":" power resume") << newline;
		
		#endif
	}else{
		memory.LogResetEvent();
    31ce:	484f      	ldr	r0, [pc, #316]	; (330c <_ZN12States_Class5StartEh+0x1e0>)
    31d0:	4b4f      	ldr	r3, [pc, #316]	; (3310 <_ZN12States_Class5StartEh+0x1e4>)
    31d2:	4798      	blx	r3
	//	SetDefaultState();
	//}



	readResult=memory.ReadLastConfigurationData(configuration);
    31d4:	687b      	ldr	r3, [r7, #4]
    31d6:	f203 4324 	addw	r3, r3, #1060	; 0x424
    31da:	4619      	mov	r1, r3
    31dc:	484d      	ldr	r0, [pc, #308]	; (3314 <_ZN12States_Class5StartEh+0x1e8>)
    31de:	4b4e      	ldr	r3, [pc, #312]	; (3318 <_ZN12States_Class5StartEh+0x1ec>)
    31e0:	4798      	blx	r3
    31e2:	4602      	mov	r2, r0
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4
	if (readResult>0)
    31ea:	687b      	ldr	r3, [r7, #4]
    31ec:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
    31f0:	2b00      	cmp	r3, #0
    31f2:	d005      	beq.n	3200 <_ZN12States_Class5StartEh+0xd4>
		{
		#if __DEBUG__ > 3
			usb << "readConfigurationDataArea failed!" << newline;
		#endif
		SetFactoryDefaults(0, true, false);
    31f4:	6878      	ldr	r0, [r7, #4]
    31f6:	2300      	movs	r3, #0
    31f8:	2201      	movs	r2, #1
    31fa:	2100      	movs	r1, #0
    31fc:	4c47      	ldr	r4, [pc, #284]	; (331c <_ZN12States_Class5StartEh+0x1f0>)
    31fe:	47a0      	blx	r4
// #endif
	

	//interfaces.CheckInternalCommunication();

	if (readResult==0)
    3200:	687b      	ldr	r3, [r7, #4]
    3202:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
    3206:	2b00      	cmp	r3, #0
    3208:	d157      	bne.n	32ba <_ZN12States_Class5StartEh+0x18e>
    {
		prepareStateChangeEvent(kHVACStateInitialize);
    320a:	2200      	movs	r2, #0
    320c:	f44f 7197 	mov.w	r1, #302	; 0x12e
    3210:	6878      	ldr	r0, [r7, #4]
    3212:	4b43      	ldr	r3, [pc, #268]	; (3320 <_ZN12States_Class5StartEh+0x1f4>)
    3214:	4798      	blx	r3
		event	e;
    3216:	f107 030c 	add.w	r3, r7, #12
    321a:	4618      	mov	r0, r3
    321c:	4b41      	ldr	r3, [pc, #260]	; (3324 <_ZN12States_Class5StartEh+0x1f8>)
    321e:	4798      	blx	r3
		listener.eventHandler=&States_Class::CheckEvents;
    3220:	4b41      	ldr	r3, [pc, #260]	; (3328 <_ZN12States_Class5StartEh+0x1fc>)
    3222:	4a42      	ldr	r2, [pc, #264]	; (332c <_ZN12States_Class5StartEh+0x200>)
    3224:	615a      	str	r2, [r3, #20]
		while ((cBit.IsOK())&&(!done))
    3226:	4842      	ldr	r0, [pc, #264]	; (3330 <_ZN12States_Class5StartEh+0x204>)
    3228:	4b42      	ldr	r3, [pc, #264]	; (3334 <_ZN12States_Class5StartEh+0x208>)
    322a:	4798      	blx	r3
    322c:	4603      	mov	r3, r0
    322e:	2b00      	cmp	r3, #0
    3230:	d008      	beq.n	3244 <_ZN12States_Class5StartEh+0x118>
    3232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3236:	f083 0301 	eor.w	r3, r3, #1
    323a:	b2db      	uxtb	r3, r3
    323c:	2b00      	cmp	r3, #0
    323e:	d001      	beq.n	3244 <_ZN12States_Class5StartEh+0x118>
    3240:	2301      	movs	r3, #1
    3242:	e000      	b.n	3246 <_ZN12States_Class5StartEh+0x11a>
    3244:	2300      	movs	r3, #0
    3246:	2b00      	cmp	r3, #0
    3248:	d03e      	beq.n	32c8 <_ZN12States_Class5StartEh+0x19c>
		{
			if (listener.WaitForEvent(e, kHVACEventClass, kHVACSwitchStateEvent))
    324a:	4b3b      	ldr	r3, [pc, #236]	; (3338 <_ZN12States_Class5StartEh+0x20c>)
    324c:	681b      	ldr	r3, [r3, #0]
    324e:	f107 010c 	add.w	r1, r7, #12
    3252:	9300      	str	r3, [sp, #0]
    3254:	f44f 7300 	mov.w	r3, #512	; 0x200
    3258:	f44f 7200 	mov.w	r2, #512	; 0x200
    325c:	4832      	ldr	r0, [pc, #200]	; (3328 <_ZN12States_Class5StartEh+0x1fc>)
    325e:	4c37      	ldr	r4, [pc, #220]	; (333c <_ZN12States_Class5StartEh+0x210>)
    3260:	47a0      	blx	r4
    3262:	4603      	mov	r3, r0
    3264:	2b00      	cmp	r3, #0
    3266:	d010      	beq.n	328a <_ZN12States_Class5StartEh+0x15e>
			{
		
				handleHVACEvent(e);
    3268:	f107 030c 	add.w	r3, r7, #12
    326c:	4619      	mov	r1, r3
    326e:	6878      	ldr	r0, [r7, #4]
    3270:	4b33      	ldr	r3, [pc, #204]	; (3340 <_ZN12States_Class5StartEh+0x214>)
    3272:	4798      	blx	r3
				if (hvacState->currentState==kHVACStateLeaving)
    3274:	687b      	ldr	r3, [r7, #4]
    3276:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    327c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    3280:	d1d1      	bne.n	3226 <_ZN12States_Class5StartEh+0xfa>
				{
						done=true;
    3282:	2301      	movs	r3, #1
    3284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
    3288:	e01e      	b.n	32c8 <_ZN12States_Class5StartEh+0x19c>
					
				}
			
			}
			else{
				if (listener.WaitForEvent(e, kALUEventClass, kHVACEventDoPendingTasks)){
    328a:	4b2b      	ldr	r3, [pc, #172]	; (3338 <_ZN12States_Class5StartEh+0x20c>)
    328c:	681b      	ldr	r3, [r3, #0]
    328e:	f107 010c 	add.w	r1, r7, #12
    3292:	9300      	str	r3, [sp, #0]
    3294:	2303      	movs	r3, #3
    3296:	f44f 6280 	mov.w	r2, #1024	; 0x400
    329a:	4823      	ldr	r0, [pc, #140]	; (3328 <_ZN12States_Class5StartEh+0x1fc>)
    329c:	4c29      	ldr	r4, [pc, #164]	; (3344 <_ZN12States_Class5StartEh+0x218>)
    329e:	47a0      	blx	r4
    32a0:	4603      	mov	r3, r0
    32a2:	2b00      	cmp	r3, #0
    32a4:	d0bf      	beq.n	3226 <_ZN12States_Class5StartEh+0xfa>
					alu.PrepareNewEvent(kALUEventSimpleStart);
    32a6:	2200      	movs	r2, #0
    32a8:	f44f 7182 	mov.w	r1, #260	; 0x104
    32ac:	4810      	ldr	r0, [pc, #64]	; (32f0 <_ZN12States_Class5StartEh+0x1c4>)
    32ae:	4b26      	ldr	r3, [pc, #152]	; (3348 <_ZN12States_Class5StartEh+0x21c>)
    32b0:	4798      	blx	r3
					done=true;
    32b2:	2301      	movs	r3, #1
    32b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
    32b8:	e006      	b.n	32c8 <_ZN12States_Class5StartEh+0x19c>

			}
		}
			
    }else{
		alu.PrepareNewEvent(kALUEventSimpleStart);
    32ba:	2200      	movs	r2, #0
    32bc:	f44f 7182 	mov.w	r1, #260	; 0x104
    32c0:	480b      	ldr	r0, [pc, #44]	; (32f0 <_ZN12States_Class5StartEh+0x1c4>)
    32c2:	4b21      	ldr	r3, [pc, #132]	; (3348 <_ZN12States_Class5StartEh+0x21c>)
    32c4:	4798      	blx	r3
		return;
    32c6:	bf00      	nop
    }



}
    32c8:	372c      	adds	r7, #44	; 0x2c
    32ca:	46bd      	mov	sp, r7
    32cc:	bd90      	pop	{r4, r7, pc}
    32ce:	bf00      	nop
    32d0:	00002e41 	.word	0x00002e41
    32d4:	2000a200 	.word	0x2000a200
    32d8:	00016e6d 	.word	0x00016e6d
    32dc:	0001f750 	.word	0x0001f750
    32e0:	2000a258 	.word	0x2000a258
    32e4:	00003e51 	.word	0x00003e51
    32e8:	0001f74c 	.word	0x0001f74c
    32ec:	00000c75 	.word	0x00000c75
    32f0:	20000c88 	.word	0x20000c88
    32f4:	000009f9 	.word	0x000009f9
    32f8:	20002d3c 	.word	0x20002d3c
    32fc:	000017d5 	.word	0x000017d5
    3300:	20009fd8 	.word	0x20009fd8
    3304:	00016ad5 	.word	0x00016ad5
    3308:	000169fd 	.word	0x000169fd
    330c:	200026bc 	.word	0x200026bc
    3310:	00001561 	.word	0x00001561
    3314:	20002d4c 	.word	0x20002d4c
    3318:	00002845 	.word	0x00002845
    331c:	000010b9 	.word	0x000010b9
    3320:	00003b45 	.word	0x00003b45
    3324:	000003c5 	.word	0x000003c5
    3328:	200099c8 	.word	0x200099c8
    332c:	00003d7d 	.word	0x00003d7d
    3330:	2000812c 	.word	0x2000812c
    3334:	00000fbf 	.word	0x00000fbf
    3338:	00020e44 	.word	0x00020e44
    333c:	000143e5 	.word	0x000143e5
    3340:	0000334d 	.word	0x0000334d
    3344:	0001441d 	.word	0x0001441d
    3348:	00000a35 	.word	0x00000a35

0000334c <_ZN12States_Class15handleHVACEventER5event>:
	return result;
	}


void States_Class::handleHVACEvent(event& e)
	{
    334c:	b590      	push	{r4, r7, lr}
    334e:	b083      	sub	sp, #12
    3350:	af00      	add	r7, sp, #0
    3352:	6078      	str	r0, [r7, #4]
    3354:	6039      	str	r1, [r7, #0]
		hvacState->callingState = hvacState->currentState;
    3356:	687b      	ldr	r3, [r7, #4]
    3358:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    335c:	687a      	ldr	r2, [r7, #4]
    335e:	f8d2 23a0 	ldr.w	r2, [r2, #928]	; 0x3a0
    3362:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3364:	631a      	str	r2, [r3, #48]	; 0x30
	if (hvacState->currentState != kHVACStateResume){
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    336e:	f240 122f 	movw	r2, #303	; 0x12f
    3372:	4293      	cmp	r3, r2
    3374:	d00c      	beq.n	3390 <_ZN12States_Class15handleHVACEventER5event+0x44>
		hvacState->currentState = e.data.wordData[0];
    3376:	687b      	ldr	r3, [r7, #4]
    3378:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    337c:	683a      	ldr	r2, [r7, #0]
    337e:	8912      	ldrh	r2, [r2, #8]
    3380:	62da      	str	r2, [r3, #44]	; 0x2c
		hvacState->stateFlags = e.data.wordData[1];
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3388:	683a      	ldr	r2, [r7, #0]
    338a:	8952      	ldrh	r2, [r2, #10]
    338c:	639a      	str	r2, [r3, #56]	; 0x38
    338e:	e007      	b.n	33a0 <_ZN12States_Class15handleHVACEventER5event+0x54>
		
	}else{
		hvacState->currentState=hvacState->lastState;
    3390:	687b      	ldr	r3, [r7, #4]
    3392:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3396:	687a      	ldr	r2, [r7, #4]
    3398:	f8d2 23a0 	ldr.w	r2, [r2, #928]	; 0x3a0
    339c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    339e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	hvacState->stateEntryTime = hvacTimer.Get_ticks();
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	f8d3 43a0 	ldr.w	r4, [r3, #928]	; 0x3a0
    33a6:	4860      	ldr	r0, [pc, #384]	; (3528 <_ZN12States_Class15handleHVACEventER5event+0x1dc>)
    33a8:	4b60      	ldr	r3, [pc, #384]	; (352c <_ZN12States_Class15handleHVACEventER5event+0x1e0>)
    33aa:	4798      	blx	r3
    33ac:	4603      	mov	r3, r0
    33ae:	63e3      	str	r3, [r4, #60]	; 0x3c

#if __DEBUG__ > 0
	
	usb << "handleGAINEvent received: switching from ";
    33b0:	495f      	ldr	r1, [pc, #380]	; (3530 <_ZN12States_Class15handleHVACEventER5event+0x1e4>)
    33b2:	4860      	ldr	r0, [pc, #384]	; (3534 <_ZN12States_Class15handleHVACEventER5event+0x1e8>)
    33b4:	4b60      	ldr	r3, [pc, #384]	; (3538 <_ZN12States_Class15handleHVACEventER5event+0x1ec>)
    33b6:	4798      	blx	r3
	//usb.write(gainStateDescription[hvacState->callingState]);
	usb << " to ";
    33b8:	4960      	ldr	r1, [pc, #384]	; (353c <_ZN12States_Class15handleHVACEventER5event+0x1f0>)
    33ba:	485e      	ldr	r0, [pc, #376]	; (3534 <_ZN12States_Class15handleHVACEventER5event+0x1e8>)
    33bc:	4b60      	ldr	r3, [pc, #384]	; (3540 <_ZN12States_Class15handleHVACEventER5event+0x1f4>)
    33be:	4798      	blx	r3
	//usb.write(gainStateDescription[hvacState->currentState]);
	//usb << " (flags == " << hvacState->stateFlags << ')' << NEWLINE;
	
#endif

	saveCurrentState();
    33c0:	6878      	ldr	r0, [r7, #4]
    33c2:	4b60      	ldr	r3, [pc, #384]	; (3544 <_ZN12States_Class15handleHVACEventER5event+0x1f8>)
    33c4:	4798      	blx	r3

	switch (hvacState->currentState)
    33c6:	687b      	ldr	r3, [r7, #4]
    33c8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    33cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    33ce:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
    33d2:	2b12      	cmp	r3, #18
    33d4:	f200 809f 	bhi.w	3516 <_ZN12States_Class15handleHVACEventER5event+0x1ca>
    33d8:	a201      	add	r2, pc, #4	; (adr r2, 33e0 <_ZN12States_Class15handleHVACEventER5event+0x94>)
    33da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    33de:	bf00      	nop
    33e0:	0000342d 	.word	0x0000342d
    33e4:	0000343f 	.word	0x0000343f
    33e8:	00003451 	.word	0x00003451
    33ec:	00003463 	.word	0x00003463
    33f0:	00003475 	.word	0x00003475
    33f4:	00003487 	.word	0x00003487
    33f8:	00003517 	.word	0x00003517
    33fc:	00003517 	.word	0x00003517
    3400:	00003499 	.word	0x00003499
    3404:	000034bd 	.word	0x000034bd
    3408:	00003517 	.word	0x00003517
    340c:	000034ab 	.word	0x000034ab
    3410:	00003517 	.word	0x00003517
    3414:	000034cf 	.word	0x000034cf
    3418:	000034e1 	.word	0x000034e1
    341c:	000034f3 	.word	0x000034f3
    3420:	00003517 	.word	0x00003517
    3424:	00003517 	.word	0x00003517
    3428:	00003505 	.word	0x00003505
		{
		case kHVACStateInitialize:
			StateInitialize(hvacState->stateFlags);
    342c:	687b      	ldr	r3, [r7, #4]
    342e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3434:	4619      	mov	r1, r3
    3436:	6878      	ldr	r0, [r7, #4]
    3438:	4b43      	ldr	r3, [pc, #268]	; (3548 <_ZN12States_Class15handleHVACEventER5event+0x1fc>)
    343a:	4798      	blx	r3
			break;
    343c:	e070      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateResume:
			StateResume(hvacState->stateFlags);
    343e:	687b      	ldr	r3, [r7, #4]
    3440:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3446:	4619      	mov	r1, r3
    3448:	6878      	ldr	r0, [r7, #4]
    344a:	4b40      	ldr	r3, [pc, #256]	; (354c <_ZN12States_Class15handleHVACEventER5event+0x200>)
    344c:	4798      	blx	r3
			break;
    344e:	e067      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateStandbyOFF:
			StateStandbyOFF(hvacState->stateFlags);
    3450:	687b      	ldr	r3, [r7, #4]
    3452:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3458:	4619      	mov	r1, r3
    345a:	6878      	ldr	r0, [r7, #4]
    345c:	4b3c      	ldr	r3, [pc, #240]	; (3550 <_ZN12States_Class15handleHVACEventER5event+0x204>)
    345e:	4798      	blx	r3
			break;
    3460:	e05e      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStatePrepareStandbyON:
			handleStatePrepareStandbyON(hvacState->stateFlags);
    3462:	687b      	ldr	r3, [r7, #4]
    3464:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    346a:	4619      	mov	r1, r3
    346c:	6878      	ldr	r0, [r7, #4]
    346e:	4b39      	ldr	r3, [pc, #228]	; (3554 <_ZN12States_Class15handleHVACEventER5event+0x208>)
    3470:	4798      	blx	r3
			break;
    3472:	e055      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateStandbyON:
			handleStateStandbyON(hvacState->stateFlags);
    3474:	687b      	ldr	r3, [r7, #4]
    3476:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    347c:	4619      	mov	r1, r3
    347e:	6878      	ldr	r0, [r7, #4]
    3480:	4b35      	ldr	r3, [pc, #212]	; (3558 <_ZN12States_Class15handleHVACEventER5event+0x20c>)
    3482:	4798      	blx	r3
			break;
    3484:	e04c      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateStandbyReady:
			handleStateStandbyReady(hvacState->stateFlags);
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    348e:	4619      	mov	r1, r3
    3490:	6878      	ldr	r0, [r7, #4]
    3492:	4b32      	ldr	r3, [pc, #200]	; (355c <_ZN12States_Class15handleHVACEventER5event+0x210>)
    3494:	4798      	blx	r3
			break;
    3496:	e043      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateON:
			handleStateON(hvacState->stateFlags);
    3498:	687b      	ldr	r3, [r7, #4]
    349a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    34a0:	4619      	mov	r1, r3
    34a2:	6878      	ldr	r0, [r7, #4]
    34a4:	4b2e      	ldr	r3, [pc, #184]	; (3560 <_ZN12States_Class15handleHVACEventER5event+0x214>)
    34a6:	4798      	blx	r3
			break;
    34a8:	e03a      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateFinished:
			handleStateFinished(hvacState->stateFlags);
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    34b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    34b2:	4619      	mov	r1, r3
    34b4:	6878      	ldr	r0, [r7, #4]
    34b6:	4b2b      	ldr	r3, [pc, #172]	; (3564 <_ZN12States_Class15handleHVACEventER5event+0x218>)
    34b8:	4798      	blx	r3
			break;
    34ba:	e031      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateStoppedProcess:
			StateStoppedProcess(hvacState->stateFlags);
    34bc:	687b      	ldr	r3, [r7, #4]
    34be:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    34c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    34c4:	4619      	mov	r1, r3
    34c6:	6878      	ldr	r0, [r7, #4]
    34c8:	4b27      	ldr	r3, [pc, #156]	; (3568 <_ZN12States_Class15handleHVACEventER5event+0x21c>)
    34ca:	4798      	blx	r3
			break;
    34cc:	e028      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateSelfProtect:
			handleStateSelfProtect(hvacState->stateFlags);
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    34d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    34d6:	4619      	mov	r1, r3
    34d8:	6878      	ldr	r0, [r7, #4]
    34da:	4b24      	ldr	r3, [pc, #144]	; (356c <_ZN12States_Class15handleHVACEventER5event+0x220>)
    34dc:	4798      	blx	r3
			break;
    34de:	e01f      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateError:
			handleStateError(hvacState->stateFlags);
    34e0:	687b      	ldr	r3, [r7, #4]
    34e2:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    34e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    34e8:	4619      	mov	r1, r3
    34ea:	6878      	ldr	r0, [r7, #4]
    34ec:	4b20      	ldr	r3, [pc, #128]	; (3570 <_ZN12States_Class15handleHVACEventER5event+0x224>)
    34ee:	4798      	blx	r3
			break;
    34f0:	e016      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		case kHVACStateMaintenance:
			handleStateMaintenance(hvacState->stateFlags);
    34f2:	687b      	ldr	r3, [r7, #4]
    34f4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    34f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    34fa:	4619      	mov	r1, r3
    34fc:	6878      	ldr	r0, [r7, #4]
    34fe:	4b1d      	ldr	r3, [pc, #116]	; (3574 <_ZN12States_Class15handleHVACEventER5event+0x228>)
    3500:	4798      	blx	r3
			break;
    3502:	e00d      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>
		case kHVACStateLeaving:
			StateLeaving(hvacState->stateFlags);
    3504:	687b      	ldr	r3, [r7, #4]
    3506:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    350c:	4619      	mov	r1, r3
    350e:	6878      	ldr	r0, [r7, #4]
    3510:	4b19      	ldr	r3, [pc, #100]	; (3578 <_ZN12States_Class15handleHVACEventER5event+0x22c>)
    3512:	4798      	blx	r3
		break;
    3514:	e004      	b.n	3520 <_ZN12States_Class15handleHVACEventER5event+0x1d4>

		default:
			handleStateError(kHVACErrorIllegalStateTransition);
    3516:	2102      	movs	r1, #2
    3518:	6878      	ldr	r0, [r7, #4]
    351a:	4b15      	ldr	r3, [pc, #84]	; (3570 <_ZN12States_Class15handleHVACEventER5event+0x224>)
    351c:	4798      	blx	r3
			break;
    351e:	bf00      	nop
		}
	}
    3520:	bf00      	nop
    3522:	370c      	adds	r7, #12
    3524:	46bd      	mov	sp, r7
    3526:	bd90      	pop	{r4, r7, pc}
    3528:	2000a200 	.word	0x2000a200
    352c:	00016f39 	.word	0x00016f39
    3530:	0001f770 	.word	0x0001f770
    3534:	2000a258 	.word	0x2000a258
    3538:	00003e71 	.word	0x00003e71
    353c:	0001f79c 	.word	0x0001f79c
    3540:	00003e91 	.word	0x00003e91
    3544:	00003bb9 	.word	0x00003bb9
    3548:	0000357d 	.word	0x0000357d
    354c:	0000363d 	.word	0x0000363d
    3550:	000036f1 	.word	0x000036f1
    3554:	00003851 	.word	0x00003851
    3558:	000038e5 	.word	0x000038e5
    355c:	00003959 	.word	0x00003959
    3560:	00003991 	.word	0x00003991
    3564:	000039dd 	.word	0x000039dd
    3568:	00003a5d 	.word	0x00003a5d
    356c:	00003a9d 	.word	0x00003a9d
    3570:	00003ad5 	.word	0x00003ad5
    3574:	00003b0d 	.word	0x00003b0d
    3578:	00003a15 	.word	0x00003a15

0000357c <_ZN12States_Class15StateInitializeEm>:


void States_Class::StateInitialize(uint32 flags)
	{
    357c:	b580      	push	{r7, lr}
    357e:	b088      	sub	sp, #32
    3580:	af00      	add	r7, sp, #0
    3582:	6078      	str	r0, [r7, #4]
    3584:	6039      	str	r1, [r7, #0]
	event	e;
    3586:	f107 030c 	add.w	r3, r7, #12
    358a:	4618      	mov	r0, r3
    358c:	4b1e      	ldr	r3, [pc, #120]	; (3608 <_ZN12States_Class15StateInitializeEm+0x8c>)
    358e:	4798      	blx	r3
	hvacState->currentState=kHVACStateInitialize;
    3590:	687b      	ldr	r3, [r7, #4]
    3592:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3596:	f44f 7297 	mov.w	r2, #302	; 0x12e
    359a:	62da      	str	r2, [r3, #44]	; 0x2c
   	uint16	selfTestResult(kHVACNoError);
    359c:	2300      	movs	r3, #0
    359e:	83fb      	strh	r3, [r7, #30]
	
#if __DEBUG__ > 0
	
	usb << "handleStateInitialize: flags == 0x" << flags << NEWLINE;
    35a0:	491a      	ldr	r1, [pc, #104]	; (360c <_ZN12States_Class15StateInitializeEm+0x90>)
    35a2:	481b      	ldr	r0, [pc, #108]	; (3610 <_ZN12States_Class15StateInitializeEm+0x94>)
    35a4:	4b1b      	ldr	r3, [pc, #108]	; (3614 <_ZN12States_Class15StateInitializeEm+0x98>)
    35a6:	4798      	blx	r3
    35a8:	4602      	mov	r2, r0
    35aa:	463b      	mov	r3, r7
    35ac:	4619      	mov	r1, r3
    35ae:	4610      	mov	r0, r2
    35b0:	4b19      	ldr	r3, [pc, #100]	; (3618 <_ZN12States_Class15StateInitializeEm+0x9c>)
    35b2:	4798      	blx	r3
    35b4:	4603      	mov	r3, r0
    35b6:	4919      	ldr	r1, [pc, #100]	; (361c <_ZN12States_Class15StateInitializeEm+0xa0>)
    35b8:	4618      	mov	r0, r3
    35ba:	4b19      	ldr	r3, [pc, #100]	; (3620 <_ZN12States_Class15StateInitializeEm+0xa4>)
    35bc:	4798      	blx	r3
		
#endif
	
	
	//listener.CheckEvent();
	if (pBit.isOK)
    35be:	4b19      	ldr	r3, [pc, #100]	; (3624 <_ZN12States_Class15StateInitializeEm+0xa8>)
    35c0:	781b      	ldrb	r3, [r3, #0]
    35c2:	b2db      	uxtb	r3, r3
    35c4:	2b00      	cmp	r3, #0
    35c6:	d017      	beq.n	35f8 <_ZN12States_Class15StateInitializeEm+0x7c>
	{
		#if __DEBUG__ > 0
		
		usb << "handleStateInitialize" << NEWLINE;
    35c8:	4917      	ldr	r1, [pc, #92]	; (3628 <_ZN12States_Class15StateInitializeEm+0xac>)
    35ca:	4811      	ldr	r0, [pc, #68]	; (3610 <_ZN12States_Class15StateInitializeEm+0x94>)
    35cc:	4b17      	ldr	r3, [pc, #92]	; (362c <_ZN12States_Class15StateInitializeEm+0xb0>)
    35ce:	4798      	blx	r3
    35d0:	4603      	mov	r3, r0
    35d2:	4912      	ldr	r1, [pc, #72]	; (361c <_ZN12States_Class15StateInitializeEm+0xa0>)
    35d4:	4618      	mov	r0, r3
    35d6:	4b12      	ldr	r3, [pc, #72]	; (3620 <_ZN12States_Class15StateInitializeEm+0xa4>)
    35d8:	4798      	blx	r3

		#ifdef _OFFLINE
			prepareStateChangeEvent( kHVACStateInterrupted);
			listener.SendEventSelf(e);
		#else
		selfTestResult = handlePowerOnSelftest();
    35da:	6878      	ldr	r0, [r7, #4]
    35dc:	4b14      	ldr	r3, [pc, #80]	; (3630 <_ZN12States_Class15StateInitializeEm+0xb4>)
    35de:	4798      	blx	r3
    35e0:	4603      	mov	r3, r0
    35e2:	83fb      	strh	r3, [r7, #30]
		if (selfTestResult == kHVACNoError)
    35e4:	8bfb      	ldrh	r3, [r7, #30]
    35e6:	2b00      	cmp	r3, #0
    35e8:	d10a      	bne.n	3600 <_ZN12States_Class15StateInitializeEm+0x84>
		{
			prepareStateChangeEvent( kHVACStateStandbyOFF);
    35ea:	2200      	movs	r2, #0
    35ec:	f44f 7198 	mov.w	r1, #304	; 0x130
    35f0:	6878      	ldr	r0, [r7, #4]
    35f2:	4b10      	ldr	r3, [pc, #64]	; (3634 <_ZN12States_Class15StateInitializeEm+0xb8>)
    35f4:	4798      	blx	r3
	}



	
	}
    35f6:	e003      	b.n	3600 <_ZN12States_Class15StateInitializeEm+0x84>
		Stop(0);
    35f8:	2100      	movs	r1, #0
    35fa:	6878      	ldr	r0, [r7, #4]
    35fc:	4b0e      	ldr	r3, [pc, #56]	; (3638 <_ZN12States_Class15StateInitializeEm+0xbc>)
    35fe:	4798      	blx	r3
	}
    3600:	bf00      	nop
    3602:	3720      	adds	r7, #32
    3604:	46bd      	mov	sp, r7
    3606:	bd80      	pop	{r7, pc}
    3608:	000003c5 	.word	0x000003c5
    360c:	0001f7a4 	.word	0x0001f7a4
    3610:	2000a258 	.word	0x2000a258
    3614:	00003eb1 	.word	0x00003eb1
    3618:	00001401 	.word	0x00001401
    361c:	0001f74c 	.word	0x0001f74c
    3620:	00000c75 	.word	0x00000c75
    3624:	20008118 	.word	0x20008118
    3628:	0001f7c8 	.word	0x0001f7c8
    362c:	00002301 	.word	0x00002301
    3630:	00003b95 	.word	0x00003b95
    3634:	00003b45 	.word	0x00003b45
    3638:	00003c4d 	.word	0x00003c4d

0000363c <_ZN12States_Class11StateResumeEm>:


void States_Class::StateResume(uint32 flags)
	{
    363c:	b580      	push	{r7, lr}
    363e:	b088      	sub	sp, #32
    3640:	af00      	add	r7, sp, #0
    3642:	6078      	str	r0, [r7, #4]
    3644:	6039      	str	r1, [r7, #0]
	event	e;
    3646:	f107 030c 	add.w	r3, r7, #12
    364a:	4618      	mov	r0, r3
    364c:	4b23      	ldr	r3, [pc, #140]	; (36dc <_ZN12States_Class11StateResumeEm+0xa0>)
    364e:	4798      	blx	r3
	uint8	currentState(hvacState->currentState);
    3650:	687b      	ldr	r3, [r7, #4]
    3652:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3658:	77fb      	strb	r3, [r7, #31]
    uint16	selfTestResult(kHVACNoError);
    365a:	2300      	movs	r3, #0
    365c:	83bb      	strh	r3, [r7, #28]
	usb << "state.currentState (after) " << hvacState->currentState << newline;
#endif


    //Switch into current state if no error occured
    if(selfTestResult == kHVACNoError)
    365e:	8bbb      	ldrh	r3, [r7, #28]
    3660:	2b00      	cmp	r3, #0
    3662:	d128      	bne.n	36b6 <_ZN12States_Class11StateResumeEm+0x7a>
    {
        switch (hvacState->currentState)
    3664:	687b      	ldr	r3, [r7, #4]
    3666:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    366c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
    3670:	d004      	beq.n	367c <_ZN12States_Class11StateResumeEm+0x40>
    3672:	f240 1237 	movw	r2, #311	; 0x137
    3676:	4293      	cmp	r3, r2
    3678:	d00b      	beq.n	3692 <_ZN12States_Class11StateResumeEm+0x56>
    367a:	e011      	b.n	36a0 <_ZN12States_Class11StateResumeEm+0x64>
        {
        case kHVACStateON:
            prepareStateChangeEvent( hvacState->currentState, true);
    367c:	687b      	ldr	r3, [r7, #4]
    367e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3684:	b29b      	uxth	r3, r3
    3686:	2201      	movs	r2, #1
    3688:	4619      	mov	r1, r3
    368a:	6878      	ldr	r0, [r7, #4]
    368c:	4b14      	ldr	r3, [pc, #80]	; (36e0 <_ZN12States_Class11StateResumeEm+0xa4>)
    368e:	4798      	blx	r3
            break;
    3690:	e011      	b.n	36b6 <_ZN12States_Class11StateResumeEm+0x7a>

        case kHVACStateStoppedProcess:
            prepareStateChangeEvent( kHVACStateStoppedProcess);
    3692:	2200      	movs	r2, #0
    3694:	f240 1137 	movw	r1, #311	; 0x137
    3698:	6878      	ldr	r0, [r7, #4]
    369a:	4b11      	ldr	r3, [pc, #68]	; (36e0 <_ZN12States_Class11StateResumeEm+0xa4>)
    369c:	4798      	blx	r3
            break;
    369e:	e00a      	b.n	36b6 <_ZN12States_Class11StateResumeEm+0x7a>

        default:
            prepareStateChangeEvent( hvacState->currentState);
    36a0:	687b      	ldr	r3, [r7, #4]
    36a2:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    36a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36a8:	b29b      	uxth	r3, r3
    36aa:	2200      	movs	r2, #0
    36ac:	4619      	mov	r1, r3
    36ae:	6878      	ldr	r0, [r7, #4]
    36b0:	4b0b      	ldr	r3, [pc, #44]	; (36e0 <_ZN12States_Class11StateResumeEm+0xa4>)
    36b2:	4798      	blx	r3
            break;
    36b4:	bf00      	nop
        }
    }

	hvacState->currentState = currentState;
    36b6:	687b      	ldr	r3, [r7, #4]
    36b8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    36bc:	7ffa      	ldrb	r2, [r7, #31]
    36be:	62da      	str	r2, [r3, #44]	; 0x2c

	listener.CheckEvent();
    36c0:	4808      	ldr	r0, [pc, #32]	; (36e4 <_ZN12States_Class11StateResumeEm+0xa8>)
    36c2:	4b09      	ldr	r3, [pc, #36]	; (36e8 <_ZN12States_Class11StateResumeEm+0xac>)
    36c4:	4798      	blx	r3
	listener.SendEventSelf(e);
    36c6:	f107 030c 	add.w	r3, r7, #12
    36ca:	4619      	mov	r1, r3
    36cc:	4805      	ldr	r0, [pc, #20]	; (36e4 <_ZN12States_Class11StateResumeEm+0xa8>)
    36ce:	4b07      	ldr	r3, [pc, #28]	; (36ec <_ZN12States_Class11StateResumeEm+0xb0>)
    36d0:	4798      	blx	r3
	}
    36d2:	bf00      	nop
    36d4:	3720      	adds	r7, #32
    36d6:	46bd      	mov	sp, r7
    36d8:	bd80      	pop	{r7, pc}
    36da:	bf00      	nop
    36dc:	000003c5 	.word	0x000003c5
    36e0:	00003b45 	.word	0x00003b45
    36e4:	200099c8 	.word	0x200099c8
    36e8:	000146e1 	.word	0x000146e1
    36ec:	000145e1 	.word	0x000145e1

000036f0 <_ZN12States_Class15StateStandbyOFFEm>:
				
void States_Class::StateStandbyOFF(uint32 flags)
	{
    36f0:	b590      	push	{r4, r7, lr}
    36f2:	b08b      	sub	sp, #44	; 0x2c
    36f4:	af02      	add	r7, sp, #8
    36f6:	6078      	str	r0, [r7, #4]
    36f8:	6039      	str	r1, [r7, #0]
	event	e;
    36fa:	f107 030c 	add.w	r3, r7, #12
    36fe:	4618      	mov	r0, r3
    3700:	4b48      	ldr	r3, [pc, #288]	; (3824 <_ZN12States_Class15StateStandbyOFFEm+0x134>)
    3702:	4798      	blx	r3
	hvacState->currentState=kHVACStateStandbyOFF;
    3704:	687b      	ldr	r3, [r7, #4]
    3706:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    370a:	f44f 7298 	mov.w	r2, #304	; 0x130
    370e:	62da      	str	r2, [r3, #44]	; 0x2c
	hvacState->arincStatus.statusArinc=OFF;
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3716:	2200      	movs	r2, #0
    3718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	bool	done(false);
    371c:	2300      	movs	r3, #0
    371e:	77fb      	strb	r3, [r7, #31]
	gotAluEvent=false;
    3720:	687b      	ldr	r3, [r7, #4]
    3722:	2200      	movs	r2, #0
    3724:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
	gotHVACEvent=false;
    3728:	687b      	ldr	r3, [r7, #4]
    372a:	2200      	movs	r2, #0
    372c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
   	
#ifdef __DEBUG__
	
	usb << "handleStateStandbyOFF" << NEWLINE;
    3730:	493d      	ldr	r1, [pc, #244]	; (3828 <_ZN12States_Class15StateStandbyOFFEm+0x138>)
    3732:	483e      	ldr	r0, [pc, #248]	; (382c <_ZN12States_Class15StateStandbyOFFEm+0x13c>)
    3734:	4b3e      	ldr	r3, [pc, #248]	; (3830 <_ZN12States_Class15StateStandbyOFFEm+0x140>)
    3736:	4798      	blx	r3
    3738:	4603      	mov	r3, r0
    373a:	493e      	ldr	r1, [pc, #248]	; (3834 <_ZN12States_Class15StateStandbyOFFEm+0x144>)
    373c:	4618      	mov	r0, r3
    373e:	4b3e      	ldr	r3, [pc, #248]	; (3838 <_ZN12States_Class15StateStandbyOFFEm+0x148>)
    3740:	4798      	blx	r3
		
#endif

	hvacState->smpsTemperatureOutOfRangeEventSent = false;
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
    3748:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
    374c:	f36f 0341 	bfc	r3, #1, #1
    3750:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
	hvacState->magnetronTemperatureOutOfRangeEventSent = false;
    3754:	687b      	ldr	r3, [r7, #4]
    3756:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
    375a:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
    375e:	f36f 03c3 	bfc	r3, #3, #1
    3762:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
	hvacState->exhaustTemperatureOutOfRangeEventSent = false;
    3766:	687b      	ldr	r3, [r7, #4]
    3768:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
    376c:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
    3770:	f36f 0382 	bfc	r3, #2, #1
    3774:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

	hvacState->magnetronFanFailureDetectionTime = forever;
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    377e:	4a2f      	ldr	r2, [pc, #188]	; (383c <_ZN12States_Class15StateStandbyOFFEm+0x14c>)
    3780:	6812      	ldr	r2, [r2, #0]
    3782:	665a      	str	r2, [r3, #100]	; 0x64
	listener.eventHandler=&States_Class::CheckEvents;
    3784:	4b2e      	ldr	r3, [pc, #184]	; (3840 <_ZN12States_Class15StateStandbyOFFEm+0x150>)
    3786:	4a2f      	ldr	r2, [pc, #188]	; (3844 <_ZN12States_Class15StateStandbyOFFEm+0x154>)
    3788:	615a      	str	r2, [r3, #20]
	while(!done){
    378a:	7ffb      	ldrb	r3, [r7, #31]
    378c:	2b00      	cmp	r3, #0
    378e:	d13e      	bne.n	380e <_ZN12States_Class15StateStandbyOFFEm+0x11e>
		gotAluEvent=listener.WaitForEvent(e, kALUEventClass, kAnyEventType,16);
    3790:	f107 010c 	add.w	r1, r7, #12
    3794:	2310      	movs	r3, #16
    3796:	9300      	str	r3, [sp, #0]
    3798:	f64f 73ff 	movw	r3, #65535	; 0xffff
    379c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    37a0:	4827      	ldr	r0, [pc, #156]	; (3840 <_ZN12States_Class15StateStandbyOFFEm+0x150>)
    37a2:	4c29      	ldr	r4, [pc, #164]	; (3848 <_ZN12States_Class15StateStandbyOFFEm+0x158>)
    37a4:	47a0      	blx	r4
    37a6:	4603      	mov	r3, r0
    37a8:	461a      	mov	r2, r3
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
		if (!gotAluEvent)
    37b0:	687b      	ldr	r3, [r7, #4]
    37b2:	f893 3421 	ldrb.w	r3, [r3, #1057]	; 0x421
    37b6:	f083 0301 	eor.w	r3, r3, #1
    37ba:	b2db      	uxtb	r3, r3
    37bc:	2b00      	cmp	r3, #0
    37be:	d021      	beq.n	3804 <_ZN12States_Class15StateStandbyOFFEm+0x114>
		{
			gotHVACEvent=listener.WaitForEvent(e, kHVACEventClass, kAnyEventType,8);
    37c0:	f107 010c 	add.w	r1, r7, #12
    37c4:	2308      	movs	r3, #8
    37c6:	9300      	str	r3, [sp, #0]
    37c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    37cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    37d0:	481b      	ldr	r0, [pc, #108]	; (3840 <_ZN12States_Class15StateStandbyOFFEm+0x150>)
    37d2:	4c1d      	ldr	r4, [pc, #116]	; (3848 <_ZN12States_Class15StateStandbyOFFEm+0x158>)
    37d4:	47a0      	blx	r4
    37d6:	4603      	mov	r3, r0
    37d8:	461a      	mov	r2, r3
    37da:	687b      	ldr	r3, [r7, #4]
    37dc:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
			if ((gotHVACEvent)|(e.eventType==kHVACEventDoPendingTasks))
    37e0:	687b      	ldr	r3, [r7, #4]
    37e2:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
    37e6:	461a      	mov	r2, r3
    37e8:	89fb      	ldrh	r3, [r7, #14]
    37ea:	2b03      	cmp	r3, #3
    37ec:	bf0c      	ite	eq
    37ee:	2301      	moveq	r3, #1
    37f0:	2300      	movne	r3, #0
    37f2:	b2db      	uxtb	r3, r3
    37f4:	4313      	orrs	r3, r2
    37f6:	2b00      	cmp	r3, #0
    37f8:	d0c7      	beq.n	378a <_ZN12States_Class15StateStandbyOFFEm+0x9a>
			{
				done=gotHVACEvent;
    37fa:	687b      	ldr	r3, [r7, #4]
    37fc:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
    3800:	77fb      	strb	r3, [r7, #31]
    3802:	e7c2      	b.n	378a <_ZN12States_Class15StateStandbyOFFEm+0x9a>
			
		} 
		else
		{
			
			done=gotAluEvent;
    3804:	687b      	ldr	r3, [r7, #4]
    3806:	f893 3421 	ldrb.w	r3, [r3, #1057]	; 0x421
    380a:	77fb      	strb	r3, [r7, #31]
	while(!done){
    380c:	e7bd      	b.n	378a <_ZN12States_Class15StateStandbyOFFEm+0x9a>
		}
	}

	prepareStateChangeEvent(kHVACStateLeaving);
    380e:	2200      	movs	r2, #0
    3810:	f44f 71a0 	mov.w	r1, #320	; 0x140
    3814:	6878      	ldr	r0, [r7, #4]
    3816:	4b0d      	ldr	r3, [pc, #52]	; (384c <_ZN12States_Class15StateStandbyOFFEm+0x15c>)
    3818:	4798      	blx	r3

	}
    381a:	bf00      	nop
    381c:	3724      	adds	r7, #36	; 0x24
    381e:	46bd      	mov	sp, r7
    3820:	bd90      	pop	{r4, r7, pc}
    3822:	bf00      	nop
    3824:	000003c5 	.word	0x000003c5
    3828:	0001f7e0 	.word	0x0001f7e0
    382c:	2000a258 	.word	0x2000a258
    3830:	00002301 	.word	0x00002301
    3834:	0001f74c 	.word	0x0001f74c
    3838:	00000c75 	.word	0x00000c75
    383c:	00020e44 	.word	0x00020e44
    3840:	200099c8 	.word	0x200099c8
    3844:	00003d7d 	.word	0x00003d7d
    3848:	0001441d 	.word	0x0001441d
    384c:	00003b45 	.word	0x00003b45

00003850 <_ZN12States_Class27handleStatePrepareStandbyONEm>:

void States_Class::handleStatePrepareStandbyON(uint32 flags)
	{
    3850:	b580      	push	{r7, lr}
    3852:	b08a      	sub	sp, #40	; 0x28
    3854:	af00      	add	r7, sp, #0
    3856:	6078      	str	r0, [r7, #4]
    3858:	6039      	str	r1, [r7, #0]
	event	e;
    385a:	f107 030c 	add.w	r3, r7, #12
    385e:	4618      	mov	r0, r3
    3860:	4b16      	ldr	r3, [pc, #88]	; (38bc <_ZN12States_Class27handleStatePrepareStandbyONEm+0x6c>)
    3862:	4798      	blx	r3
	bool	done(false);
    3864:	2300      	movs	r3, #0
    3866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32	connectFlags(hvacState->alarmState?kConnectFlagsAlarmOn:0);
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3870:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    3874:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3878:	b2db      	uxtb	r3, r3
    387a:	2b00      	cmp	r3, #0
    387c:	d001      	beq.n	3882 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x32>
    387e:	2301      	movs	r3, #1
    3880:	e000      	b.n	3884 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x34>
    3882:	2300      	movs	r3, #0
    3884:	623b      	str	r3, [r7, #32]
	   	
#ifdef __DEBUG__
	
	usb << "handleStatePrepareStandbyON" << NEWLINE;
    3886:	490e      	ldr	r1, [pc, #56]	; (38c0 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x70>)
    3888:	480e      	ldr	r0, [pc, #56]	; (38c4 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x74>)
    388a:	4b0f      	ldr	r3, [pc, #60]	; (38c8 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x78>)
    388c:	4798      	blx	r3
    388e:	4603      	mov	r3, r0
    3890:	490e      	ldr	r1, [pc, #56]	; (38cc <_ZN12States_Class27handleStatePrepareStandbyONEm+0x7c>)
    3892:	4618      	mov	r0, r3
    3894:	4b0e      	ldr	r3, [pc, #56]	; (38d0 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x80>)
    3896:	4798      	blx	r3
		
#endif

	tick_t	leaveDisplayTime = hvacTimer.Get_ticks() + 4000;
    3898:	480e      	ldr	r0, [pc, #56]	; (38d4 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x84>)
    389a:	4b0f      	ldr	r3, [pc, #60]	; (38d8 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x88>)
    389c:	4798      	blx	r3
    389e:	4603      	mov	r3, r0
    38a0:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
    38a4:	61fb      	str	r3, [r7, #28]

	listener.SendEventSelf(e);
    38a6:	f107 030c 	add.w	r3, r7, #12
    38aa:	4619      	mov	r1, r3
    38ac:	480b      	ldr	r0, [pc, #44]	; (38dc <_ZN12States_Class27handleStatePrepareStandbyONEm+0x8c>)
    38ae:	4b0c      	ldr	r3, [pc, #48]	; (38e0 <_ZN12States_Class27handleStatePrepareStandbyONEm+0x90>)
    38b0:	4798      	blx	r3
	}
    38b2:	bf00      	nop
    38b4:	3728      	adds	r7, #40	; 0x28
    38b6:	46bd      	mov	sp, r7
    38b8:	bd80      	pop	{r7, pc}
    38ba:	bf00      	nop
    38bc:	000003c5 	.word	0x000003c5
    38c0:	0001f7f8 	.word	0x0001f7f8
    38c4:	2000a258 	.word	0x2000a258
    38c8:	00003ed1 	.word	0x00003ed1
    38cc:	0001f74c 	.word	0x0001f74c
    38d0:	00000c75 	.word	0x00000c75
    38d4:	2000a200 	.word	0x2000a200
    38d8:	00016f39 	.word	0x00016f39
    38dc:	200099c8 	.word	0x200099c8
    38e0:	000145e1 	.word	0x000145e1

000038e4 <_ZN12States_Class20handleStateStandbyONEm>:

void States_Class::handleStateStandbyON(uint32 flags)
	{
    38e4:	b580      	push	{r7, lr}
    38e6:	b088      	sub	sp, #32
    38e8:	af00      	add	r7, sp, #0
    38ea:	6078      	str	r0, [r7, #4]
    38ec:	6039      	str	r1, [r7, #0]
	event	e;
    38ee:	f107 030c 	add.w	r3, r7, #12
    38f2:	4618      	mov	r0, r3
    38f4:	4b15      	ldr	r3, [pc, #84]	; (394c <_ZN12States_Class20handleStateStandbyONEm+0x68>)
    38f6:	4798      	blx	r3
	bool	done(false);
    38f8:	2300      	movs	r3, #0
    38fa:	77fb      	strb	r3, [r7, #31]
	
	usb << "handleStateStandbyON" << newline;
		
#endif

	hvacState->latchClosedConfirmPending = false;
    38fc:	687b      	ldr	r3, [r7, #4]
    38fe:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
    3902:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
    3906:	f36f 1345 	bfc	r3, #5, #1
    390a:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
    hvacState->remainingTime = (tick_t)persistentConfiguration.cycle.duration * 1000L;
    390e:	687b      	ldr	r3, [r7, #4]
    3910:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3914:	687a      	ldr	r2, [r7, #4]
    3916:	f8d2 2390 	ldr.w	r2, [r2, #912]	; 0x390
    391a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    391e:	fb01 f202 	mul.w	r2, r1, r2
    3922:	64da      	str	r2, [r3, #76]	; 0x4c

	
	hvacState->reedRelayOpen = false;
    3924:	687b      	ldr	r3, [r7, #4]
    3926:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
    392a:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
    392e:	f36f 1304 	bfc	r3, #4, #1
    3932:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c
	
	listener.SendEventSelf(e);
    3936:	f107 030c 	add.w	r3, r7, #12
    393a:	4619      	mov	r1, r3
    393c:	4804      	ldr	r0, [pc, #16]	; (3950 <_ZN12States_Class20handleStateStandbyONEm+0x6c>)
    393e:	4b05      	ldr	r3, [pc, #20]	; (3954 <_ZN12States_Class20handleStateStandbyONEm+0x70>)
    3940:	4798      	blx	r3
	}
    3942:	bf00      	nop
    3944:	3720      	adds	r7, #32
    3946:	46bd      	mov	sp, r7
    3948:	bd80      	pop	{r7, pc}
    394a:	bf00      	nop
    394c:	000003c5 	.word	0x000003c5
    3950:	200099c8 	.word	0x200099c8
    3954:	000145e1 	.word	0x000145e1

00003958 <_ZN12States_Class23handleStateStandbyReadyEm>:

void States_Class::handleStateStandbyReady(uint32 flags)
	{
    3958:	b580      	push	{r7, lr}
    395a:	b088      	sub	sp, #32
    395c:	af00      	add	r7, sp, #0
    395e:	6078      	str	r0, [r7, #4]
    3960:	6039      	str	r1, [r7, #0]
	event	e;
    3962:	f107 030c 	add.w	r3, r7, #12
    3966:	4618      	mov	r0, r3
    3968:	4b06      	ldr	r3, [pc, #24]	; (3984 <_ZN12States_Class23handleStateStandbyReadyEm+0x2c>)
    396a:	4798      	blx	r3
	bool	done(false);
    396c:	2300      	movs	r3, #0
    396e:	77fb      	strb	r3, [r7, #31]

	
	listener.SendEventSelf(e);
    3970:	f107 030c 	add.w	r3, r7, #12
    3974:	4619      	mov	r1, r3
    3976:	4804      	ldr	r0, [pc, #16]	; (3988 <_ZN12States_Class23handleStateStandbyReadyEm+0x30>)
    3978:	4b04      	ldr	r3, [pc, #16]	; (398c <_ZN12States_Class23handleStateStandbyReadyEm+0x34>)
    397a:	4798      	blx	r3
	}
    397c:	bf00      	nop
    397e:	3720      	adds	r7, #32
    3980:	46bd      	mov	sp, r7
    3982:	bd80      	pop	{r7, pc}
    3984:	000003c5 	.word	0x000003c5
    3988:	200099c8 	.word	0x200099c8
    398c:	000145e1 	.word	0x000145e1

00003990 <_ZN12States_Class13handleStateONEm>:

	listener.SendEventSelf(e);
	}

void States_Class::handleStateON(uint32 flags)
	{
    3990:	b580      	push	{r7, lr}
    3992:	b088      	sub	sp, #32
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
    3998:	6039      	str	r1, [r7, #0]
	event	e;
    399a:	f107 030c 	add.w	r3, r7, #12
    399e:	4618      	mov	r0, r3
    39a0:	4b0b      	ldr	r3, [pc, #44]	; (39d0 <_ZN12States_Class13handleStateONEm+0x40>)
    39a2:	4798      	blx	r3
	bool	done(false);
    39a4:	2300      	movs	r3, #0
    39a6:	77fb      	strb	r3, [r7, #31]
	bool	checkForEmptyCavity(true);
    39a8:	2301      	movs	r3, #1
    39aa:	77bb      	strb	r3, [r7, #30]
	bool	checkForSMPSTemperature(true);
    39ac:	2301      	movs	r3, #1
    39ae:	777b      	strb	r3, [r7, #29]
	bool	resume(flags != 0);		
    39b0:	683b      	ldr	r3, [r7, #0]
    39b2:	2b00      	cmp	r3, #0
    39b4:	bf14      	ite	ne
    39b6:	2301      	movne	r3, #1
    39b8:	2300      	moveq	r3, #0
    39ba:	773b      	strb	r3, [r7, #28]
	usb << "handleStateON: resume == " << (resume?"true":"false") << newline;
		
#endif


	listener.SendEventSelf(e);
    39bc:	f107 030c 	add.w	r3, r7, #12
    39c0:	4619      	mov	r1, r3
    39c2:	4804      	ldr	r0, [pc, #16]	; (39d4 <_ZN12States_Class13handleStateONEm+0x44>)
    39c4:	4b04      	ldr	r3, [pc, #16]	; (39d8 <_ZN12States_Class13handleStateONEm+0x48>)
    39c6:	4798      	blx	r3
	}
    39c8:	bf00      	nop
    39ca:	3720      	adds	r7, #32
    39cc:	46bd      	mov	sp, r7
    39ce:	bd80      	pop	{r7, pc}
    39d0:	000003c5 	.word	0x000003c5
    39d4:	200099c8 	.word	0x200099c8
    39d8:	000145e1 	.word	0x000145e1

000039dc <_ZN12States_Class19handleStateFinishedEm>:

void States_Class::handleStateFinished(uint32 flags)
	{
    39dc:	b580      	push	{r7, lr}
    39de:	b088      	sub	sp, #32
    39e0:	af00      	add	r7, sp, #0
    39e2:	6078      	str	r0, [r7, #4]
    39e4:	6039      	str	r1, [r7, #0]
	event	e;
    39e6:	f107 030c 	add.w	r3, r7, #12
    39ea:	4618      	mov	r0, r3
    39ec:	4b06      	ldr	r3, [pc, #24]	; (3a08 <_ZN12States_Class19handleStateFinishedEm+0x2c>)
    39ee:	4798      	blx	r3
	bool	done(false);
    39f0:	2300      	movs	r3, #0
    39f2:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    39f4:	f107 030c 	add.w	r3, r7, #12
    39f8:	4619      	mov	r1, r3
    39fa:	4804      	ldr	r0, [pc, #16]	; (3a0c <_ZN12States_Class19handleStateFinishedEm+0x30>)
    39fc:	4b04      	ldr	r3, [pc, #16]	; (3a10 <_ZN12States_Class19handleStateFinishedEm+0x34>)
    39fe:	4798      	blx	r3
	}
    3a00:	bf00      	nop
    3a02:	3720      	adds	r7, #32
    3a04:	46bd      	mov	sp, r7
    3a06:	bd80      	pop	{r7, pc}
    3a08:	000003c5 	.word	0x000003c5
    3a0c:	200099c8 	.word	0x200099c8
    3a10:	000145e1 	.word	0x000145e1

00003a14 <_ZN12States_Class12StateLeavingEm>:
void States_Class::StateLeaving(uint32 flags)
{
    3a14:	b580      	push	{r7, lr}
    3a16:	b086      	sub	sp, #24
    3a18:	af00      	add	r7, sp, #0
    3a1a:	6078      	str	r0, [r7, #4]
    3a1c:	6039      	str	r1, [r7, #0]
	event	e;
    3a1e:	f107 0308 	add.w	r3, r7, #8
    3a22:	4618      	mov	r0, r3
    3a24:	4b0b      	ldr	r3, [pc, #44]	; (3a54 <_ZN12States_Class12StateLeavingEm+0x40>)
    3a26:	4798      	blx	r3
	hvacState->lastState=hvacState->callingState;
    3a28:	687b      	ldr	r3, [r7, #4]
    3a2a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3a2e:	687a      	ldr	r2, [r7, #4]
    3a30:	f8d2 23a0 	ldr.w	r2, [r2, #928]	; 0x3a0
    3a34:	6b12      	ldr	r2, [r2, #48]	; 0x30
    3a36:	629a      	str	r2, [r3, #40]	; 0x28
	hvacState->currentState=kHVACStateLeaving;
    3a38:	687b      	ldr	r3, [r7, #4]
    3a3a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3a3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3a42:	62da      	str	r2, [r3, #44]	; 0x2c
	
	saveCurrentState();
    3a44:	6878      	ldr	r0, [r7, #4]
    3a46:	4b04      	ldr	r3, [pc, #16]	; (3a58 <_ZN12States_Class12StateLeavingEm+0x44>)
    3a48:	4798      	blx	r3
	//prepareStateChangeEvent(kHVACStateLeaving,(uint16)hvacState->lastState);
	//bool	done(false);
	//listener.SendEventSelf(e);
}
    3a4a:	bf00      	nop
    3a4c:	3718      	adds	r7, #24
    3a4e:	46bd      	mov	sp, r7
    3a50:	bd80      	pop	{r7, pc}
    3a52:	bf00      	nop
    3a54:	000003c5 	.word	0x000003c5
    3a58:	00003bb9 	.word	0x00003bb9

00003a5c <_ZN12States_Class19StateStoppedProcessEm>:

void States_Class::StateStoppedProcess(uint32 flags)
	{
    3a5c:	b580      	push	{r7, lr}
    3a5e:	b088      	sub	sp, #32
    3a60:	af00      	add	r7, sp, #0
    3a62:	6078      	str	r0, [r7, #4]
    3a64:	6039      	str	r1, [r7, #0]
	event	e;
    3a66:	f107 030c 	add.w	r3, r7, #12
    3a6a:	4618      	mov	r0, r3
    3a6c:	4b08      	ldr	r3, [pc, #32]	; (3a90 <_ZN12States_Class19StateStoppedProcessEm+0x34>)
    3a6e:	4798      	blx	r3
 	bool	done(false);
    3a70:	2300      	movs	r3, #0
    3a72:	77fb      	strb	r3, [r7, #31]
 	bool	abortCycle(true);
    3a74:	2301      	movs	r3, #1
    3a76:	77bb      	strb	r3, [r7, #30]
    uint16	resumeFlags(flags);
    3a78:	683b      	ldr	r3, [r7, #0]
    3a7a:	83bb      	strh	r3, [r7, #28]
	listener.SendEventSelf(e);
    3a7c:	f107 030c 	add.w	r3, r7, #12
    3a80:	4619      	mov	r1, r3
    3a82:	4804      	ldr	r0, [pc, #16]	; (3a94 <_ZN12States_Class19StateStoppedProcessEm+0x38>)
    3a84:	4b04      	ldr	r3, [pc, #16]	; (3a98 <_ZN12States_Class19StateStoppedProcessEm+0x3c>)
    3a86:	4798      	blx	r3
	}
    3a88:	bf00      	nop
    3a8a:	3720      	adds	r7, #32
    3a8c:	46bd      	mov	sp, r7
    3a8e:	bd80      	pop	{r7, pc}
    3a90:	000003c5 	.word	0x000003c5
    3a94:	200099c8 	.word	0x200099c8
    3a98:	000145e1 	.word	0x000145e1

00003a9c <_ZN12States_Class22handleStateSelfProtectEm>:

void States_Class::handleStateSelfProtect(uint32_t error)
	{
    3a9c:	b580      	push	{r7, lr}
    3a9e:	b088      	sub	sp, #32
    3aa0:	af00      	add	r7, sp, #0
    3aa2:	6078      	str	r0, [r7, #4]
    3aa4:	6039      	str	r1, [r7, #0]
	event	e;
    3aa6:	f107 030c 	add.w	r3, r7, #12
    3aaa:	4618      	mov	r0, r3
    3aac:	4b06      	ldr	r3, [pc, #24]	; (3ac8 <_ZN12States_Class22handleStateSelfProtectEm+0x2c>)
    3aae:	4798      	blx	r3
	bool	done(false);
    3ab0:	2300      	movs	r3, #0
    3ab2:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3ab4:	f107 030c 	add.w	r3, r7, #12
    3ab8:	4619      	mov	r1, r3
    3aba:	4804      	ldr	r0, [pc, #16]	; (3acc <_ZN12States_Class22handleStateSelfProtectEm+0x30>)
    3abc:	4b04      	ldr	r3, [pc, #16]	; (3ad0 <_ZN12States_Class22handleStateSelfProtectEm+0x34>)
    3abe:	4798      	blx	r3
	}
    3ac0:	bf00      	nop
    3ac2:	3720      	adds	r7, #32
    3ac4:	46bd      	mov	sp, r7
    3ac6:	bd80      	pop	{r7, pc}
    3ac8:	000003c5 	.word	0x000003c5
    3acc:	200099c8 	.word	0x200099c8
    3ad0:	000145e1 	.word	0x000145e1

00003ad4 <_ZN12States_Class16handleStateErrorEm>:

void States_Class::handleStateError(uint32_t error)
	{
    3ad4:	b580      	push	{r7, lr}
    3ad6:	b088      	sub	sp, #32
    3ad8:	af00      	add	r7, sp, #0
    3ada:	6078      	str	r0, [r7, #4]
    3adc:	6039      	str	r1, [r7, #0]
	event	e;
    3ade:	f107 030c 	add.w	r3, r7, #12
    3ae2:	4618      	mov	r0, r3
    3ae4:	4b06      	ldr	r3, [pc, #24]	; (3b00 <_ZN12States_Class16handleStateErrorEm+0x2c>)
    3ae6:	4798      	blx	r3
	bool	done(false);
    3ae8:	2300      	movs	r3, #0
    3aea:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3aec:	f107 030c 	add.w	r3, r7, #12
    3af0:	4619      	mov	r1, r3
    3af2:	4804      	ldr	r0, [pc, #16]	; (3b04 <_ZN12States_Class16handleStateErrorEm+0x30>)
    3af4:	4b04      	ldr	r3, [pc, #16]	; (3b08 <_ZN12States_Class16handleStateErrorEm+0x34>)
    3af6:	4798      	blx	r3
	}
    3af8:	bf00      	nop
    3afa:	3720      	adds	r7, #32
    3afc:	46bd      	mov	sp, r7
    3afe:	bd80      	pop	{r7, pc}
    3b00:	000003c5 	.word	0x000003c5
    3b04:	200099c8 	.word	0x200099c8
    3b08:	000145e1 	.word	0x000145e1

00003b0c <_ZN12States_Class22handleStateMaintenanceEm>:

void States_Class::handleStateMaintenance(uint32 flags)
	{
    3b0c:	b580      	push	{r7, lr}
    3b0e:	b088      	sub	sp, #32
    3b10:	af00      	add	r7, sp, #0
    3b12:	6078      	str	r0, [r7, #4]
    3b14:	6039      	str	r1, [r7, #0]
	event	e;
    3b16:	f107 030c 	add.w	r3, r7, #12
    3b1a:	4618      	mov	r0, r3
    3b1c:	4b06      	ldr	r3, [pc, #24]	; (3b38 <_ZN12States_Class22handleStateMaintenanceEm+0x2c>)
    3b1e:	4798      	blx	r3
	bool	done(false);
    3b20:	2300      	movs	r3, #0
    3b22:	77fb      	strb	r3, [r7, #31]
	listener.SendEventSelf(e);
    3b24:	f107 030c 	add.w	r3, r7, #12
    3b28:	4619      	mov	r1, r3
    3b2a:	4804      	ldr	r0, [pc, #16]	; (3b3c <_ZN12States_Class22handleStateMaintenanceEm+0x30>)
    3b2c:	4b04      	ldr	r3, [pc, #16]	; (3b40 <_ZN12States_Class22handleStateMaintenanceEm+0x34>)
    3b2e:	4798      	blx	r3
	}
    3b30:	bf00      	nop
    3b32:	3720      	adds	r7, #32
    3b34:	46bd      	mov	sp, r7
    3b36:	bd80      	pop	{r7, pc}
    3b38:	000003c5 	.word	0x000003c5
    3b3c:	200099c8 	.word	0x200099c8
    3b40:	000145e1 	.word	0x000145e1

00003b44 <_ZN12States_Class23prepareStateChangeEventEtt>:
	done = false;
	return result;
	}

void States_Class::prepareStateChangeEvent(uint16 newState, uint16 data)
	{
    3b44:	b580      	push	{r7, lr}
    3b46:	b086      	sub	sp, #24
    3b48:	af00      	add	r7, sp, #0
    3b4a:	6078      	str	r0, [r7, #4]
    3b4c:	460b      	mov	r3, r1
    3b4e:	807b      	strh	r3, [r7, #2]
    3b50:	4613      	mov	r3, r2
    3b52:	803b      	strh	r3, [r7, #0]
	event e;
    3b54:	f107 0308 	add.w	r3, r7, #8
    3b58:	4618      	mov	r0, r3
    3b5a:	4b0b      	ldr	r3, [pc, #44]	; (3b88 <_ZN12States_Class23prepareStateChangeEventEtt+0x44>)
    3b5c:	4798      	blx	r3
	e.eventClass =(EventClass)kHVACEventClass;
    3b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
    3b62:	813b      	strh	r3, [r7, #8]
	e.eventType = (EventType)kHVACSwitchStateEvent;
    3b64:	f44f 7300 	mov.w	r3, #512	; 0x200
    3b68:	817b      	strh	r3, [r7, #10]
	e.data.wordData[0] = newState;
    3b6a:	887b      	ldrh	r3, [r7, #2]
    3b6c:	823b      	strh	r3, [r7, #16]
	e.data.wordData[1] = data;
    3b6e:	883b      	ldrh	r3, [r7, #0]
    3b70:	827b      	strh	r3, [r7, #18]
	listener.SendEventSelf(e);
    3b72:	f107 0308 	add.w	r3, r7, #8
    3b76:	4619      	mov	r1, r3
    3b78:	4804      	ldr	r0, [pc, #16]	; (3b8c <_ZN12States_Class23prepareStateChangeEventEtt+0x48>)
    3b7a:	4b05      	ldr	r3, [pc, #20]	; (3b90 <_ZN12States_Class23prepareStateChangeEventEtt+0x4c>)
    3b7c:	4798      	blx	r3
	}
    3b7e:	bf00      	nop
    3b80:	3718      	adds	r7, #24
    3b82:	46bd      	mov	sp, r7
    3b84:	bd80      	pop	{r7, pc}
    3b86:	bf00      	nop
    3b88:	000003c5 	.word	0x000003c5
    3b8c:	200099c8 	.word	0x200099c8
    3b90:	000145e1 	.word	0x000145e1

00003b94 <_ZN12States_Class21handlePowerOnSelftestEv>:

uint32_t States_Class::handlePowerOnSelftest(void)
	{
    3b94:	b580      	push	{r7, lr}
    3b96:	b088      	sub	sp, #32
    3b98:	af00      	add	r7, sp, #0
    3b9a:	6078      	str	r0, [r7, #4]
	event	e;
    3b9c:	f107 030c 	add.w	r3, r7, #12
    3ba0:	4618      	mov	r0, r3
    3ba2:	4b04      	ldr	r3, [pc, #16]	; (3bb4 <_ZN12States_Class21handlePowerOnSelftestEv+0x20>)
    3ba4:	4798      	blx	r3
	uint16	selfTestResult(kHVACNoError);
    3ba6:	2300      	movs	r3, #0
    3ba8:	83fb      	strh	r3, [r7, #30]
	bool	moduleAvailable;
	int16	temperature;
		
	return selfTestResult;
    3baa:	8bfb      	ldrh	r3, [r7, #30]
	}
    3bac:	4618      	mov	r0, r3
    3bae:	3720      	adds	r7, #32
    3bb0:	46bd      	mov	sp, r7
    3bb2:	bd80      	pop	{r7, pc}
    3bb4:	000003c5 	.word	0x000003c5

00003bb8 <_ZN12States_Class16saveCurrentStateEv>:


void States_Class::saveCurrentState(void){
    3bb8:	b590      	push	{r4, r7, lr}
    3bba:	b085      	sub	sp, #20
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
		calendar_date_time	cdt;
		calendar.GetDateTime(&cdt);
    3bc0:	f107 0308 	add.w	r3, r7, #8
    3bc4:	4619      	mov	r1, r3
    3bc6:	4819      	ldr	r0, [pc, #100]	; (3c2c <_ZN12States_Class16saveCurrentStateEv+0x74>)
    3bc8:	4b19      	ldr	r3, [pc, #100]	; (3c30 <_ZN12States_Class16saveCurrentStateEv+0x78>)
    3bca:	4798      	blx	r3
		hvacState->dateTime=cdt;
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3bd2:	3308      	adds	r3, #8
    3bd4:	f107 0208 	add.w	r2, r7, #8
    3bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
    3bdc:	e883 0003 	stmia.w	r3, {r0, r1}
		hvacState->now = calendar.convert_datetime_to_timestamp(&cdt);
    3be0:	687b      	ldr	r3, [r7, #4]
    3be2:	f8d3 43a0 	ldr.w	r4, [r3, #928]	; 0x3a0
    3be6:	f107 0308 	add.w	r3, r7, #8
    3bea:	4619      	mov	r1, r3
    3bec:	480f      	ldr	r0, [pc, #60]	; (3c2c <_ZN12States_Class16saveCurrentStateEv+0x74>)
    3bee:	4b11      	ldr	r3, [pc, #68]	; (3c34 <_ZN12States_Class16saveCurrentStateEv+0x7c>)
    3bf0:	4798      	blx	r3
    3bf2:	4603      	mov	r3, r0
    3bf4:	6063      	str	r3, [r4, #4]
	if (hvacState->currentState!=kHVACStateMaintenance){
    3bf6:	687b      	ldr	r3, [r7, #4]
    3bf8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3bfe:	f240 123d 	movw	r2, #317	; 0x13d
    3c02:	4293      	cmp	r3, r2
    3c04:	d00d      	beq.n	3c22 <_ZN12States_Class16saveCurrentStateEv+0x6a>
		memory.WriteFastCurrentState(staticCurrentState);
    3c06:	490c      	ldr	r1, [pc, #48]	; (3c38 <_ZN12States_Class16saveCurrentStateEv+0x80>)
    3c08:	480c      	ldr	r0, [pc, #48]	; (3c3c <_ZN12States_Class16saveCurrentStateEv+0x84>)
    3c0a:	4b0d      	ldr	r3, [pc, #52]	; (3c40 <_ZN12States_Class16saveCurrentStateEv+0x88>)
    3c0c:	4798      	blx	r3
		//memory.ReadFastApplicationState(lastState);
		if (hvacState->currentState==0)
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c16:	2b00      	cmp	r3, #0
    3c18:	d103      	bne.n	3c22 <_ZN12States_Class16saveCurrentStateEv+0x6a>
		{
			memory.SaveApplicationState(staticCurrentState);
    3c1a:	4907      	ldr	r1, [pc, #28]	; (3c38 <_ZN12States_Class16saveCurrentStateEv+0x80>)
    3c1c:	4809      	ldr	r0, [pc, #36]	; (3c44 <_ZN12States_Class16saveCurrentStateEv+0x8c>)
    3c1e:	4b0a      	ldr	r3, [pc, #40]	; (3c48 <_ZN12States_Class16saveCurrentStateEv+0x90>)
    3c20:	4798      	blx	r3
// 		 if (state.currentState > kGAINStateResume){
// 			 
// 			memory.clearWorkingStateForGAIN();
// 		 }
	}
}
    3c22:	bf00      	nop
    3c24:	3714      	adds	r7, #20
    3c26:	46bd      	mov	sp, r7
    3c28:	bd90      	pop	{r4, r7, pc}
    3c2a:	bf00      	nop
    3c2c:	20009fd8 	.word	0x20009fd8
    3c30:	0001666d 	.word	0x0001666d
    3c34:	0001675d 	.word	0x0001675d
    3c38:	2000813c 	.word	0x2000813c
    3c3c:	20002d3c 	.word	0x20002d3c
    3c40:	0000185d 	.word	0x0000185d
    3c44:	200026bc 	.word	0x200026bc
    3c48:	000026e9 	.word	0x000026e9

00003c4c <_ZN12States_Class4StopEh>:


uint8_t	States_Class::Stop(uint8_t	layer){
    3c4c:	b580      	push	{r7, lr}
    3c4e:	b082      	sub	sp, #8
    3c50:	af00      	add	r7, sp, #0
    3c52:	6078      	str	r0, [r7, #4]
    3c54:	460b      	mov	r3, r1
    3c56:	70fb      	strb	r3, [r7, #3]
		if (layer==0)
    3c58:	78fb      	ldrb	r3, [r7, #3]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d10d      	bne.n	3c7a <_ZN12States_Class4StopEh+0x2e>
		{
			usb<<"Air Conditioning System Stopped"<<NEWLINE;
    3c5e:	4909      	ldr	r1, [pc, #36]	; (3c84 <_ZN12States_Class4StopEh+0x38>)
    3c60:	4809      	ldr	r0, [pc, #36]	; (3c88 <_ZN12States_Class4StopEh+0x3c>)
    3c62:	4b0a      	ldr	r3, [pc, #40]	; (3c8c <_ZN12States_Class4StopEh+0x40>)
    3c64:	4798      	blx	r3
    3c66:	4603      	mov	r3, r0
    3c68:	4909      	ldr	r1, [pc, #36]	; (3c90 <_ZN12States_Class4StopEh+0x44>)
    3c6a:	4618      	mov	r0, r3
    3c6c:	4b09      	ldr	r3, [pc, #36]	; (3c94 <_ZN12States_Class4StopEh+0x48>)
    3c6e:	4798      	blx	r3
			delay_ms(100);
    3c70:	2064      	movs	r0, #100	; 0x64
    3c72:	4b09      	ldr	r3, [pc, #36]	; (3c98 <_ZN12States_Class4StopEh+0x4c>)
    3c74:	4798      	blx	r3
			return layer;
    3c76:	78fb      	ldrb	r3, [r7, #3]
    3c78:	e000      	b.n	3c7c <_ZN12States_Class4StopEh+0x30>
		}
	return	layer;
    3c7a:	78fb      	ldrb	r3, [r7, #3]
}
    3c7c:	4618      	mov	r0, r3
    3c7e:	3708      	adds	r7, #8
    3c80:	46bd      	mov	sp, r7
    3c82:	bd80      	pop	{r7, pc}
    3c84:	0001f814 	.word	0x0001f814
    3c88:	2000a258 	.word	0x2000a258
    3c8c:	00003e51 	.word	0x00003e51
    3c90:	0001f74c 	.word	0x0001f74c
    3c94:	00000c75 	.word	0x00000c75
    3c98:	000060a9 	.word	0x000060a9

00003c9c <_ZN12States_Class15GetCurrentStateER9HVACState>:

void	States_Class::GetCurrentConfiguration(ConfigurationData *cd){
	cd=&configuration;
}
void	States_Class::GetCurrentState(HVACState& hs){
    3c9c:	b580      	push	{r7, lr}
    3c9e:	b082      	sub	sp, #8
    3ca0:	af00      	add	r7, sp, #0
    3ca2:	6078      	str	r0, [r7, #4]
    3ca4:	6039      	str	r1, [r7, #0]
	hs=*hvacState;
    3ca6:	687b      	ldr	r3, [r7, #4]
    3ca8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3cac:	683a      	ldr	r2, [r7, #0]
    3cae:	4610      	mov	r0, r2
    3cb0:	4619      	mov	r1, r3
    3cb2:	2370      	movs	r3, #112	; 0x70
    3cb4:	461a      	mov	r2, r3
    3cb6:	4b03      	ldr	r3, [pc, #12]	; (3cc4 <_ZN12States_Class15GetCurrentStateER9HVACState+0x28>)
    3cb8:	4798      	blx	r3
}
    3cba:	bf00      	nop
    3cbc:	3708      	adds	r7, #8
    3cbe:	46bd      	mov	sp, r7
    3cc0:	bd80      	pop	{r7, pc}
    3cc2:	bf00      	nop
    3cc4:	0001b35d 	.word	0x0001b35d

00003cc8 <_ZN12States_Class20SetConfigurationDataER17ConfigurationData>:
void	States_Class::SetConfigurationData(ConfigurationData& cd){
    3cc8:	b580      	push	{r7, lr}
    3cca:	b082      	sub	sp, #8
    3ccc:	af00      	add	r7, sp, #0
    3cce:	6078      	str	r0, [r7, #4]
    3cd0:	6039      	str	r1, [r7, #0]
	configuration=cd;
    3cd2:	687b      	ldr	r3, [r7, #4]
    3cd4:	683a      	ldr	r2, [r7, #0]
    3cd6:	f203 4324 	addw	r3, r3, #1060	; 0x424
    3cda:	4611      	mov	r1, r2
    3cdc:	22ac      	movs	r2, #172	; 0xac
    3cde:	4618      	mov	r0, r3
    3ce0:	4b02      	ldr	r3, [pc, #8]	; (3cec <_ZN12States_Class20SetConfigurationDataER17ConfigurationData+0x24>)
    3ce2:	4798      	blx	r3
}
    3ce4:	bf00      	nop
    3ce6:	3708      	adds	r7, #8
    3ce8:	46bd      	mov	sp, r7
    3cea:	bd80      	pop	{r7, pc}
    3cec:	0001b35d 	.word	0x0001b35d

00003cf0 <_ZN12States_Class15SetCurrentStateER9HVACState>:
void	States_Class::SetCurrentState(HVACState& hs){
    3cf0:	b580      	push	{r7, lr}
    3cf2:	b082      	sub	sp, #8
    3cf4:	af00      	add	r7, sp, #0
    3cf6:	6078      	str	r0, [r7, #4]
    3cf8:	6039      	str	r1, [r7, #0]
	staticCurrentState=hs;
    3cfa:	4a06      	ldr	r2, [pc, #24]	; (3d14 <_ZN12States_Class15SetCurrentStateER9HVACState+0x24>)
    3cfc:	683b      	ldr	r3, [r7, #0]
    3cfe:	4610      	mov	r0, r2
    3d00:	4619      	mov	r1, r3
    3d02:	2370      	movs	r3, #112	; 0x70
    3d04:	461a      	mov	r2, r3
    3d06:	4b04      	ldr	r3, [pc, #16]	; (3d18 <_ZN12States_Class15SetCurrentStateER9HVACState+0x28>)
    3d08:	4798      	blx	r3
}
    3d0a:	bf00      	nop
    3d0c:	3708      	adds	r7, #8
    3d0e:	46bd      	mov	sp, r7
    3d10:	bd80      	pop	{r7, pc}
    3d12:	bf00      	nop
    3d14:	2000813c 	.word	0x2000813c
    3d18:	0001b35d 	.word	0x0001b35d

00003d1c <_ZN12States_Class16SetCRCConfigDataEv>:
void	States_Class::SetCRCConfigData(void){
    3d1c:	b580      	push	{r7, lr}
    3d1e:	b082      	sub	sp, #8
    3d20:	af00      	add	r7, sp, #0
    3d22:	6078      	str	r0, [r7, #4]
	CRC32=memory.CalculateCRC((uint32_t*)PTR_CONFIG_DATA(&factoryDefaultsConfiguration),sizeof(factoryDefaultsConfiguration));
    3d24:	22ac      	movs	r2, #172	; 0xac
    3d26:	4906      	ldr	r1, [pc, #24]	; (3d40 <_ZN12States_Class16SetCRCConfigDataEv+0x24>)
    3d28:	4806      	ldr	r0, [pc, #24]	; (3d44 <_ZN12States_Class16SetCRCConfigDataEv+0x28>)
    3d2a:	4b07      	ldr	r3, [pc, #28]	; (3d48 <_ZN12States_Class16SetCRCConfigDataEv+0x2c>)
    3d2c:	4798      	blx	r3
    3d2e:	4602      	mov	r2, r0
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
}
    3d36:	bf00      	nop
    3d38:	3708      	adds	r7, #8
    3d3a:	46bd      	mov	sp, r7
    3d3c:	bd80      	pop	{r7, pc}
    3d3e:	bf00      	nop
    3d40:	0001f150 	.word	0x0001f150
    3d44:	20002ba8 	.word	0x20002ba8
    3d48:	000014ad 	.word	0x000014ad

00003d4c <_ZN12States_Class19ExecutePeriodicTaskEv>:
uint32_t	States_Class::GetStatus(HVACStatus& s){
	s=hvacState->hvacStatus;
	return	hvacState->hvacStatus.rawStatus;
}
void States_Class::ExecutePeriodicTask(void){
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b082      	sub	sp, #8
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
	arinc.SaveStatus(ConvertStatusArincLabel());
    3d54:	687b      	ldr	r3, [r7, #4]
    3d56:	4618      	mov	r0, r3
    3d58:	4b05      	ldr	r3, [pc, #20]	; (3d70 <_ZN12States_Class19ExecutePeriodicTaskEv+0x24>)
    3d5a:	4798      	blx	r3
    3d5c:	4603      	mov	r3, r0
    3d5e:	4619      	mov	r1, r3
    3d60:	4804      	ldr	r0, [pc, #16]	; (3d74 <_ZN12States_Class19ExecutePeriodicTaskEv+0x28>)
    3d62:	4b05      	ldr	r3, [pc, #20]	; (3d78 <_ZN12States_Class19ExecutePeriodicTaskEv+0x2c>)
    3d64:	4798      	blx	r3
}
    3d66:	bf00      	nop
    3d68:	3708      	adds	r7, #8
    3d6a:	46bd      	mov	sp, r7
    3d6c:	bd80      	pop	{r7, pc}
    3d6e:	bf00      	nop
    3d70:	000011ed 	.word	0x000011ed
    3d74:	20008ea4 	.word	0x20008ea4
    3d78:	00012661 	.word	0x00012661

00003d7c <_ZN12States_Class11CheckEventsEv>:

void States_Class::CheckEvents(void){
    3d7c:	b580      	push	{r7, lr}
    3d7e:	b084      	sub	sp, #16
    3d80:	af00      	add	r7, sp, #0
	event e;
    3d82:	463b      	mov	r3, r7
    3d84:	4618      	mov	r0, r3
    3d86:	4b20      	ldr	r3, [pc, #128]	; (3e08 <_ZN12States_Class11CheckEventsEv+0x8c>)
    3d88:	4798      	blx	r3
	hvac.ExecutePeriodicTask();
    3d8a:	4820      	ldr	r0, [pc, #128]	; (3e0c <_ZN12States_Class11CheckEventsEv+0x90>)
    3d8c:	4b20      	ldr	r3, [pc, #128]	; (3e10 <_ZN12States_Class11CheckEventsEv+0x94>)
    3d8e:	4798      	blx	r3
	if (interfaces.IsCommunicationRequest())
    3d90:	4820      	ldr	r0, [pc, #128]	; (3e14 <_ZN12States_Class11CheckEventsEv+0x98>)
    3d92:	4b21      	ldr	r3, [pc, #132]	; (3e18 <_ZN12States_Class11CheckEventsEv+0x9c>)
    3d94:	4798      	blx	r3
	{
		//e.eventClass=kALUEventClass;
	//	e.eventType=(EventType)kALUEventCheckCommunication;
		
	}
	if ((hvac.hvacState->currentState==kHVACStateStandbyOFF)&&(alu.taskList->head)){
    3d96:	4b1d      	ldr	r3, [pc, #116]	; (3e0c <_ZN12States_Class11CheckEventsEv+0x90>)
    3d98:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
    3d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3d9e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
    3da2:	d10e      	bne.n	3dc2 <_ZN12States_Class11CheckEventsEv+0x46>
    3da4:	4b1d      	ldr	r3, [pc, #116]	; (3e1c <_ZN12States_Class11CheckEventsEv+0xa0>)
    3da6:	681b      	ldr	r3, [r3, #0]
    3da8:	681b      	ldr	r3, [r3, #0]
    3daa:	2b00      	cmp	r3, #0
    3dac:	d009      	beq.n	3dc2 <_ZN12States_Class11CheckEventsEv+0x46>
		e.eventClass=kHVACEventClass;
    3dae:	f44f 7300 	mov.w	r3, #512	; 0x200
    3db2:	803b      	strh	r3, [r7, #0]
		e.eventType=kHVACEventDoPendingTasks;
    3db4:	2303      	movs	r3, #3
    3db6:	807b      	strh	r3, [r7, #2]
		listener.SendEventSelf(e);
    3db8:	463b      	mov	r3, r7
    3dba:	4619      	mov	r1, r3
    3dbc:	4818      	ldr	r0, [pc, #96]	; (3e20 <_ZN12States_Class11CheckEventsEv+0xa4>)
    3dbe:	4b19      	ldr	r3, [pc, #100]	; (3e24 <_ZN12States_Class11CheckEventsEv+0xa8>)
    3dc0:	4798      	blx	r3

	}
	if (alu.arincTXTimeUP){
    3dc2:	4b16      	ldr	r3, [pc, #88]	; (3e1c <_ZN12States_Class11CheckEventsEv+0xa0>)
    3dc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    3dc8:	b2db      	uxtb	r3, r3
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d018      	beq.n	3e00 <_ZN12States_Class11CheckEventsEv+0x84>
		if ((!alu.IsListedTask(kALUTaskArincTXMessage)))
    3dce:	2102      	movs	r1, #2
    3dd0:	4812      	ldr	r0, [pc, #72]	; (3e1c <_ZN12States_Class11CheckEventsEv+0xa0>)
    3dd2:	4b15      	ldr	r3, [pc, #84]	; (3e28 <_ZN12States_Class11CheckEventsEv+0xac>)
    3dd4:	4798      	blx	r3
    3dd6:	4603      	mov	r3, r0
    3dd8:	f083 0301 	eor.w	r3, r3, #1
    3ddc:	b2db      	uxtb	r3, r3
    3dde:	2b00      	cmp	r3, #0
    3de0:	d004      	beq.n	3dec <_ZN12States_Class11CheckEventsEv+0x70>
		{
			alu.PrepareNewTask(kALUTaskArincTXMessage);
    3de2:	2200      	movs	r2, #0
    3de4:	2102      	movs	r1, #2
    3de6:	480d      	ldr	r0, [pc, #52]	; (3e1c <_ZN12States_Class11CheckEventsEv+0xa0>)
    3de8:	4b10      	ldr	r3, [pc, #64]	; (3e2c <_ZN12States_Class11CheckEventsEv+0xb0>)
    3dea:	4798      	blx	r3
		else
		{
			
		}
		
		e.eventClass=kALUEventClass;
    3dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3df0:	803b      	strh	r3, [r7, #0]
		e.eventType=kHVACEventDoPendingTasks;
    3df2:	2303      	movs	r3, #3
    3df4:	807b      	strh	r3, [r7, #2]
		listener.SendEventSelf(e);
    3df6:	463b      	mov	r3, r7
    3df8:	4619      	mov	r1, r3
    3dfa:	4809      	ldr	r0, [pc, #36]	; (3e20 <_ZN12States_Class11CheckEventsEv+0xa4>)
    3dfc:	4b09      	ldr	r3, [pc, #36]	; (3e24 <_ZN12States_Class11CheckEventsEv+0xa8>)
    3dfe:	4798      	blx	r3
	}
		

}
    3e00:	bf00      	nop
    3e02:	3710      	adds	r7, #16
    3e04:	46bd      	mov	sp, r7
    3e06:	bd80      	pop	{r7, pc}
    3e08:	000003c5 	.word	0x000003c5
    3e0c:	200081ac 	.word	0x200081ac
    3e10:	00003d4d 	.word	0x00003d4d
    3e14:	2000160c 	.word	0x2000160c
    3e18:	00001d61 	.word	0x00001d61
    3e1c:	20000c88 	.word	0x20000c88
    3e20:	200099c8 	.word	0x200099c8
    3e24:	000145e1 	.word	0x000145e1
    3e28:	00004311 	.word	0x00004311
    3e2c:	000009f9 	.word	0x000009f9

00003e30 <_ZlsIA34_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3e30:	b580      	push	{r7, lr}
    3e32:	b082      	sub	sp, #8
    3e34:	af00      	add	r7, sp, #0
    3e36:	6078      	str	r0, [r7, #4]
    3e38:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3e3a:	6839      	ldr	r1, [r7, #0]
    3e3c:	6878      	ldr	r0, [r7, #4]
    3e3e:	4b03      	ldr	r3, [pc, #12]	; (3e4c <_ZlsIA34_cER5PrintS2_RKT_+0x1c>)
    3e40:	4798      	blx	r3
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	4618      	mov	r0, r3
    3e46:	3708      	adds	r7, #8
    3e48:	46bd      	mov	sp, r7
    3e4a:	bd80      	pop	{r7, pc}
    3e4c:	000177b5 	.word	0x000177b5

00003e50 <_ZlsIA32_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3e50:	b580      	push	{r7, lr}
    3e52:	b082      	sub	sp, #8
    3e54:	af00      	add	r7, sp, #0
    3e56:	6078      	str	r0, [r7, #4]
    3e58:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3e5a:	6839      	ldr	r1, [r7, #0]
    3e5c:	6878      	ldr	r0, [r7, #4]
    3e5e:	4b03      	ldr	r3, [pc, #12]	; (3e6c <_ZlsIA32_cER5PrintS2_RKT_+0x1c>)
    3e60:	4798      	blx	r3
    3e62:	687b      	ldr	r3, [r7, #4]
    3e64:	4618      	mov	r0, r3
    3e66:	3708      	adds	r7, #8
    3e68:	46bd      	mov	sp, r7
    3e6a:	bd80      	pop	{r7, pc}
    3e6c:	000177b5 	.word	0x000177b5

00003e70 <_ZlsIA42_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3e70:	b580      	push	{r7, lr}
    3e72:	b082      	sub	sp, #8
    3e74:	af00      	add	r7, sp, #0
    3e76:	6078      	str	r0, [r7, #4]
    3e78:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3e7a:	6839      	ldr	r1, [r7, #0]
    3e7c:	6878      	ldr	r0, [r7, #4]
    3e7e:	4b03      	ldr	r3, [pc, #12]	; (3e8c <_ZlsIA42_cER5PrintS2_RKT_+0x1c>)
    3e80:	4798      	blx	r3
    3e82:	687b      	ldr	r3, [r7, #4]
    3e84:	4618      	mov	r0, r3
    3e86:	3708      	adds	r7, #8
    3e88:	46bd      	mov	sp, r7
    3e8a:	bd80      	pop	{r7, pc}
    3e8c:	000177b5 	.word	0x000177b5

00003e90 <_ZlsIA5_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3e90:	b580      	push	{r7, lr}
    3e92:	b082      	sub	sp, #8
    3e94:	af00      	add	r7, sp, #0
    3e96:	6078      	str	r0, [r7, #4]
    3e98:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3e9a:	6839      	ldr	r1, [r7, #0]
    3e9c:	6878      	ldr	r0, [r7, #4]
    3e9e:	4b03      	ldr	r3, [pc, #12]	; (3eac <_ZlsIA5_cER5PrintS2_RKT_+0x1c>)
    3ea0:	4798      	blx	r3
    3ea2:	687b      	ldr	r3, [r7, #4]
    3ea4:	4618      	mov	r0, r3
    3ea6:	3708      	adds	r7, #8
    3ea8:	46bd      	mov	sp, r7
    3eaa:	bd80      	pop	{r7, pc}
    3eac:	000177b5 	.word	0x000177b5

00003eb0 <_ZlsIA35_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3eb0:	b580      	push	{r7, lr}
    3eb2:	b082      	sub	sp, #8
    3eb4:	af00      	add	r7, sp, #0
    3eb6:	6078      	str	r0, [r7, #4]
    3eb8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3eba:	6839      	ldr	r1, [r7, #0]
    3ebc:	6878      	ldr	r0, [r7, #4]
    3ebe:	4b03      	ldr	r3, [pc, #12]	; (3ecc <_ZlsIA35_cER5PrintS2_RKT_+0x1c>)
    3ec0:	4798      	blx	r3
    3ec2:	687b      	ldr	r3, [r7, #4]
    3ec4:	4618      	mov	r0, r3
    3ec6:	3708      	adds	r7, #8
    3ec8:	46bd      	mov	sp, r7
    3eca:	bd80      	pop	{r7, pc}
    3ecc:	000177b5 	.word	0x000177b5

00003ed0 <_ZlsIA28_cER5PrintS2_RKT_>:
inline Print &operator <<(Print &stream, const T &arg)
    3ed0:	b580      	push	{r7, lr}
    3ed2:	b082      	sub	sp, #8
    3ed4:	af00      	add	r7, sp, #0
    3ed6:	6078      	str	r0, [r7, #4]
    3ed8:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
    3eda:	6839      	ldr	r1, [r7, #0]
    3edc:	6878      	ldr	r0, [r7, #4]
    3ede:	4b03      	ldr	r3, [pc, #12]	; (3eec <_ZlsIA28_cER5PrintS2_RKT_+0x1c>)
    3ee0:	4798      	blx	r3
    3ee2:	687b      	ldr	r3, [r7, #4]
    3ee4:	4618      	mov	r0, r3
    3ee6:	3708      	adds	r7, #8
    3ee8:	46bd      	mov	sp, r7
    3eea:	bd80      	pop	{r7, pc}
    3eec:	000177b5 	.word	0x000177b5

00003ef0 <_Z41__static_initialization_and_destruction_0ii>:


    3ef0:	b580      	push	{r7, lr}
    3ef2:	b082      	sub	sp, #8
    3ef4:	af00      	add	r7, sp, #0
    3ef6:	6078      	str	r0, [r7, #4]
    3ef8:	6039      	str	r1, [r7, #0]
    3efa:	687b      	ldr	r3, [r7, #4]
    3efc:	2b01      	cmp	r3, #1
    3efe:	d11c      	bne.n	3f3a <_Z41__static_initialization_and_destruction_0ii+0x4a>
    3f00:	683b      	ldr	r3, [r7, #0]
    3f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3f06:	4293      	cmp	r3, r2
    3f08:	d117      	bne.n	3f3a <_Z41__static_initialization_and_destruction_0ii+0x4a>
    3f0a:	480e      	ldr	r0, [pc, #56]	; (3f44 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    3f0c:	4b0e      	ldr	r3, [pc, #56]	; (3f48 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    3f0e:	4798      	blx	r3
    3f10:	4a0e      	ldr	r2, [pc, #56]	; (3f4c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    3f12:	490f      	ldr	r1, [pc, #60]	; (3f50 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    3f14:	480b      	ldr	r0, [pc, #44]	; (3f44 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    3f16:	4b0f      	ldr	r3, [pc, #60]	; (3f54 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    3f18:	4798      	blx	r3
    3f1a:	480f      	ldr	r0, [pc, #60]	; (3f58 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    3f1c:	4b0f      	ldr	r3, [pc, #60]	; (3f5c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    3f1e:	4798      	blx	r3
    3f20:	4a0a      	ldr	r2, [pc, #40]	; (3f4c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    3f22:	490f      	ldr	r1, [pc, #60]	; (3f60 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    3f24:	480c      	ldr	r0, [pc, #48]	; (3f58 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    3f26:	4b0b      	ldr	r3, [pc, #44]	; (3f54 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    3f28:	4798      	blx	r3
    3f2a:	480e      	ldr	r0, [pc, #56]	; (3f64 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    3f2c:	4b0e      	ldr	r3, [pc, #56]	; (3f68 <_Z41__static_initialization_and_destruction_0ii+0x78>)
    3f2e:	4798      	blx	r3
    3f30:	4a06      	ldr	r2, [pc, #24]	; (3f4c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    3f32:	490e      	ldr	r1, [pc, #56]	; (3f6c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    3f34:	480b      	ldr	r0, [pc, #44]	; (3f64 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    3f36:	4b07      	ldr	r3, [pc, #28]	; (3f54 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    3f38:	4798      	blx	r3
    3f3a:	bf00      	nop
    3f3c:	3708      	adds	r7, #8
    3f3e:	46bd      	mov	sp, r7
    3f40:	bd80      	pop	{r7, pc}
    3f42:	bf00      	nop
    3f44:	20008118 	.word	0x20008118
    3f48:	00002be1 	.word	0x00002be1
    3f4c:	20000000 	.word	0x20000000
    3f50:	00002bfb 	.word	0x00002bfb
    3f54:	00018bf5 	.word	0x00018bf5
    3f58:	2000812c 	.word	0x2000812c
    3f5c:	00000f91 	.word	0x00000f91
    3f60:	00000fab 	.word	0x00000fab
    3f64:	200081ac 	.word	0x200081ac
    3f68:	00002e81 	.word	0x00002e81
    3f6c:	00002ef5 	.word	0x00002ef5

00003f70 <_GLOBAL__sub_I_ptrStatesClass>:
    3f70:	b580      	push	{r7, lr}
    3f72:	af00      	add	r7, sp, #0
    3f74:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3f78:	2001      	movs	r0, #1
    3f7a:	4b01      	ldr	r3, [pc, #4]	; (3f80 <_GLOBAL__sub_I_ptrStatesClass+0x10>)
    3f7c:	4798      	blx	r3
    3f7e:	bd80      	pop	{r7, pc}
    3f80:	00003ef1 	.word	0x00003ef1

00003f84 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    3f84:	b480      	push	{r7}
    3f86:	b083      	sub	sp, #12
    3f88:	af00      	add	r7, sp, #0
    3f8a:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    3f8c:	687b      	ldr	r3, [r7, #4]
    3f8e:	681b      	ldr	r3, [r3, #0]
}
    3f90:	4618      	mov	r0, r3
    3f92:	370c      	adds	r7, #12
    3f94:	46bd      	mov	sp, r7
    3f96:	bc80      	pop	{r7}
    3f98:	4770      	bx	lr
	...

00003f9c <_ZN17TaskHandler_ClassC1Ev>:
//static TaskHandler_Class	taskStorage[MAXIMUM_TASKS];
//list_descriptor		taskStorage;
static	ControllerTask	taskStorage[MAXIMUM_TASKS];
static	list_element	listElements[MAXIMUM_TASKS];
// default constructor
TaskHandler_Class::TaskHandler_Class()
    3f9c:	b480      	push	{r7}
    3f9e:	b083      	sub	sp, #12
    3fa0:	af00      	add	r7, sp, #0
    3fa2:	6078      	str	r0, [r7, #4]
{
	taskListPrivate=(list_descriptor*)listElements;
    3fa4:	687b      	ldr	r3, [r7, #4]
    3fa6:	4a04      	ldr	r2, [pc, #16]	; (3fb8 <_ZN17TaskHandler_ClassC1Ev+0x1c>)
    3fa8:	60da      	str	r2, [r3, #12]
	//taskList->head->next=NULL;
	
	//task->id=(ALUTaskEnum)0;


} //TaskHandler_Class
    3faa:	687b      	ldr	r3, [r7, #4]
    3fac:	4618      	mov	r0, r3
    3fae:	370c      	adds	r7, #12
    3fb0:	46bd      	mov	sp, r7
    3fb2:	bc80      	pop	{r7}
    3fb4:	4770      	bx	lr
    3fb6:	bf00      	nop
    3fb8:	200086e0 	.word	0x200086e0

00003fbc <_ZN17TaskHandler_ClassD1Ev>:

// default destructor
TaskHandler_Class::~TaskHandler_Class()
    3fbc:	b480      	push	{r7}
    3fbe:	b083      	sub	sp, #12
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	6078      	str	r0, [r7, #4]
{
} //~TaskHandler_Class
    3fc4:	687b      	ldr	r3, [r7, #4]
    3fc6:	4618      	mov	r0, r3
    3fc8:	370c      	adds	r7, #12
    3fca:	46bd      	mov	sp, r7
    3fcc:	bc80      	pop	{r7}
    3fce:	4770      	bx	lr

00003fd0 <_ZN17TaskHandler_Class13InitTaskArrayEv>:

void TaskHandler_Class::InitTaskArray(void){
    3fd0:	b480      	push	{r7}
    3fd2:	b083      	sub	sp, #12
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	6078      	str	r0, [r7, #4]
	for (i=1; i<MAXIMUM_TASKS; i++)
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	2201      	movs	r2, #1
    3fdc:	721a      	strb	r2, [r3, #8]
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	7a1b      	ldrb	r3, [r3, #8]
    3fe2:	2b0a      	cmp	r3, #10
    3fe4:	dc31      	bgt.n	404a <_ZN17TaskHandler_Class13InitTaskArrayEv+0x7a>
	{
		taskStorage[i].elem.next = (list_element*)NULL;
    3fe6:	687b      	ldr	r3, [r7, #4]
    3fe8:	7a1b      	ldrb	r3, [r3, #8]
    3fea:	4619      	mov	r1, r3
    3fec:	4b20      	ldr	r3, [pc, #128]	; (4070 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    3fee:	2200      	movs	r2, #0
    3ff0:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
		taskStorage[i].id=kALUNotTaskEvent;
    3ff4:	687b      	ldr	r3, [r7, #4]
    3ff6:	7a1b      	ldrb	r3, [r3, #8]
    3ff8:	4a1d      	ldr	r2, [pc, #116]	; (4070 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    3ffa:	00db      	lsls	r3, r3, #3
    3ffc:	4413      	add	r3, r2
    3ffe:	2200      	movs	r2, #0
    4000:	711a      	strb	r2, [r3, #4]
		taskStorage[i-1].elem.next = &taskStorage[i].elem;
    4002:	687b      	ldr	r3, [r7, #4]
    4004:	7a1b      	ldrb	r3, [r3, #8]
    4006:	3b01      	subs	r3, #1
    4008:	687a      	ldr	r2, [r7, #4]
    400a:	7a12      	ldrb	r2, [r2, #8]
    400c:	00d2      	lsls	r2, r2, #3
    400e:	4918      	ldr	r1, [pc, #96]	; (4070 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    4010:	440a      	add	r2, r1
    4012:	4917      	ldr	r1, [pc, #92]	; (4070 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa0>)
    4014:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		listElements[i].next = (list_element*)NULL;
    4018:	687b      	ldr	r3, [r7, #4]
    401a:	7a1b      	ldrb	r3, [r3, #8]
    401c:	4619      	mov	r1, r3
    401e:	4b15      	ldr	r3, [pc, #84]	; (4074 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    4020:	2200      	movs	r2, #0
    4022:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		listElements[i-1].next = &listElements[i];
    4026:	687b      	ldr	r3, [r7, #4]
    4028:	7a1b      	ldrb	r3, [r3, #8]
    402a:	3b01      	subs	r3, #1
    402c:	687a      	ldr	r2, [r7, #4]
    402e:	7a12      	ldrb	r2, [r2, #8]
    4030:	0092      	lsls	r2, r2, #2
    4032:	4910      	ldr	r1, [pc, #64]	; (4074 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    4034:	440a      	add	r2, r1
    4036:	490f      	ldr	r1, [pc, #60]	; (4074 <_ZN17TaskHandler_Class13InitTaskArrayEv+0xa4>)
    4038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=1; i<MAXIMUM_TASKS; i++)
    403c:	687b      	ldr	r3, [r7, #4]
    403e:	7a1b      	ldrb	r3, [r3, #8]
    4040:	3301      	adds	r3, #1
    4042:	b2da      	uxtb	r2, r3
    4044:	687b      	ldr	r3, [r7, #4]
    4046:	721a      	strb	r2, [r3, #8]
    4048:	e7c9      	b.n	3fde <_ZN17TaskHandler_Class13InitTaskArrayEv+0xe>
	}
	taskListPrivate->head->next=NULL;
    404a:	687b      	ldr	r3, [r7, #4]
    404c:	68db      	ldr	r3, [r3, #12]
    404e:	681b      	ldr	r3, [r3, #0]
    4050:	2200      	movs	r2, #0
    4052:	601a      	str	r2, [r3, #0]
	taskListPrivate->head=NULL;
    4054:	687b      	ldr	r3, [r7, #4]
    4056:	68db      	ldr	r3, [r3, #12]
    4058:	2200      	movs	r2, #0
    405a:	601a      	str	r2, [r3, #0]

		//taskList->head->next=NULL;
		taskList=taskListPrivate;
    405c:	687b      	ldr	r3, [r7, #4]
    405e:	68da      	ldr	r2, [r3, #12]
    4060:	687b      	ldr	r3, [r7, #4]
    4062:	601a      	str	r2, [r3, #0]
}
    4064:	bf00      	nop
    4066:	370c      	adds	r7, #12
    4068:	46bd      	mov	sp, r7
    406a:	bc80      	pop	{r7}
    406c:	4770      	bx	lr
    406e:	bf00      	nop
    4070:	20008688 	.word	0x20008688
    4074:	200086e0 	.word	0x200086e0

00004078 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask>:
		return ERR_ALREADY_INITIALIZED;
	}
	AddALUTask(taskListPrivate,task);
	return ERR_NONE;
}
int TaskHandler_Class::AddTask(ControllerTask& tk ){
    4078:	b580      	push	{r7, lr}
    407a:	b082      	sub	sp, #8
    407c:	af00      	add	r7, sp, #0
    407e:	6078      	str	r0, [r7, #4]
    4080:	6039      	str	r1, [r7, #0]
	if (IsNotDeclaredTask(tk))
    4082:	6839      	ldr	r1, [r7, #0]
    4084:	6878      	ldr	r0, [r7, #4]
    4086:	4b22      	ldr	r3, [pc, #136]	; (4110 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x98>)
    4088:	4798      	blx	r3
    408a:	4603      	mov	r3, r0
    408c:	2b00      	cmp	r3, #0
    408e:	d039      	beq.n	4104 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x8c>
	{
		ChooseAvailableTask();
    4090:	6878      	ldr	r0, [r7, #4]
    4092:	4b20      	ldr	r3, [pc, #128]	; (4114 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x9c>)
    4094:	4798      	blx	r3
		task->elem=tk.elem;
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	685b      	ldr	r3, [r3, #4]
    409a:	683a      	ldr	r2, [r7, #0]
    409c:	6812      	ldr	r2, [r2, #0]
    409e:	601a      	str	r2, [r3, #0]
		task->id=tk.id;
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	685b      	ldr	r3, [r3, #4]
    40a4:	683a      	ldr	r2, [r7, #0]
    40a6:	7912      	ldrb	r2, [r2, #4]
    40a8:	711a      	strb	r2, [r3, #4]
		task->prio=tk.prio;
    40aa:	687b      	ldr	r3, [r7, #4]
    40ac:	685b      	ldr	r3, [r3, #4]
    40ae:	683a      	ldr	r2, [r7, #0]
    40b0:	7952      	ldrb	r2, [r2, #5]
    40b2:	715a      	strb	r2, [r3, #5]
		ASSERT((taskListPrivate)&&(task));
    40b4:	687b      	ldr	r3, [r7, #4]
    40b6:	68db      	ldr	r3, [r3, #12]
    40b8:	2b00      	cmp	r3, #0
    40ba:	d005      	beq.n	40c8 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	685b      	ldr	r3, [r3, #4]
    40c0:	2b00      	cmp	r3, #0
    40c2:	d001      	beq.n	40c8 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x50>
    40c4:	2301      	movs	r3, #1
    40c6:	e000      	b.n	40ca <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x52>
    40c8:	2300      	movs	r3, #0
    40ca:	2242      	movs	r2, #66	; 0x42
    40cc:	4912      	ldr	r1, [pc, #72]	; (4118 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa0>)
    40ce:	4618      	mov	r0, r3
    40d0:	4b12      	ldr	r3, [pc, #72]	; (411c <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa4>)
    40d2:	4798      	blx	r3
		if (is_list_element(taskListPrivate,task)) {
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	68da      	ldr	r2, [r3, #12]
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	685b      	ldr	r3, [r3, #4]
    40dc:	4619      	mov	r1, r3
    40de:	4610      	mov	r0, r2
    40e0:	4b0f      	ldr	r3, [pc, #60]	; (4120 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xa8>)
    40e2:	4798      	blx	r3
    40e4:	4603      	mov	r3, r0
    40e6:	2b00      	cmp	r3, #0
    40e8:	d002      	beq.n	40f0 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x78>

			//ASSERT(false);
			return ERR_ALREADY_INITIALIZED;
    40ea:	f06f 0311 	mvn.w	r3, #17
    40ee:	e00b      	b.n	4108 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
		}
		AddALUTask(taskListPrivate,task);
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	68d9      	ldr	r1, [r3, #12]
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	685b      	ldr	r3, [r3, #4]
    40f8:	461a      	mov	r2, r3
    40fa:	6878      	ldr	r0, [r7, #4]
    40fc:	4b09      	ldr	r3, [pc, #36]	; (4124 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0xac>)
    40fe:	4798      	blx	r3
		return ERR_NONE;
    4100:	2300      	movs	r3, #0
    4102:	e001      	b.n	4108 <_ZN17TaskHandler_Class7AddTaskER14ControllerTask+0x90>
	}else{
		return ERR_ALREADY_INITIALIZED;
    4104:	f06f 0311 	mvn.w	r3, #17
	}
	
}
    4108:	4618      	mov	r0, r3
    410a:	3708      	adds	r7, #8
    410c:	46bd      	mov	sp, r7
    410e:	bd80      	pop	{r7, pc}
    4110:	000042c1 	.word	0x000042c1
    4114:	00004255 	.word	0x00004255
    4118:	0001f840 	.word	0x0001f840
    411c:	0000799d 	.word	0x0000799d
    4120:	000079c5 	.word	0x000079c5
    4124:	00004129 	.word	0x00004129

00004128 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask>:

void TaskHandler_Class::AddALUTask(list_descriptor *list,ControllerTask* pct){
    4128:	b580      	push	{r7, lr}
    412a:	b086      	sub	sp, #24
    412c:	af00      	add	r7, sp, #0
    412e:	60f8      	str	r0, [r7, #12]
    4130:	60b9      	str	r1, [r7, #8]
    4132:	607a      	str	r2, [r7, #4]
	ControllerTask *it, *head = (ControllerTask *)list_get_head(list);
    4134:	68b8      	ldr	r0, [r7, #8]
    4136:	4b09      	ldr	r3, [pc, #36]	; (415c <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x34>)
    4138:	4798      	blx	r3
    413a:	6178      	str	r0, [r7, #20]

	if (!head) {
    413c:	697b      	ldr	r3, [r7, #20]
    413e:	2b00      	cmp	r3, #0
    4140:	d104      	bne.n	414c <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x24>
		list_insert_as_head(list, pct);
    4142:	6879      	ldr	r1, [r7, #4]
    4144:	68b8      	ldr	r0, [r7, #8]
    4146:	4b06      	ldr	r3, [pc, #24]	; (4160 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x38>)
    4148:	4798      	blx	r3
		return;
    414a:	e003      	b.n	4154 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x2c>
		}else{
		list_insert_at_end(list,pct);
    414c:	6879      	ldr	r1, [r7, #4]
    414e:	68b8      	ldr	r0, [r7, #8]
    4150:	4b04      	ldr	r3, [pc, #16]	; (4164 <_ZN17TaskHandler_Class10AddALUTaskEP15list_descriptorP14ControllerTask+0x3c>)
    4152:	4798      	blx	r3
	}

		

}
    4154:	3718      	adds	r7, #24
    4156:	46bd      	mov	sp, r7
    4158:	bd80      	pop	{r7, pc}
    415a:	bf00      	nop
    415c:	00003f85 	.word	0x00003f85
    4160:	000079fd 	.word	0x000079fd
    4164:	00007a79 	.word	0x00007a79

00004168 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask>:
		}
		list_delete_element(taskListPrivate, task);

		return ERR_NONE;
}
int32_t TaskHandler_Class::RemoveTask(ControllerTask& tk){
    4168:	b580      	push	{r7, lr}
    416a:	b082      	sub	sp, #8
    416c:	af00      	add	r7, sp, #0
    416e:	6078      	str	r0, [r7, #4]
    4170:	6039      	str	r1, [r7, #0]


	ASSERT(taskListPrivate && (&tk));
    4172:	687b      	ldr	r3, [r7, #4]
    4174:	68db      	ldr	r3, [r3, #12]
    4176:	2b00      	cmp	r3, #0
    4178:	d004      	beq.n	4184 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    417a:	683b      	ldr	r3, [r7, #0]
    417c:	2b00      	cmp	r3, #0
    417e:	d001      	beq.n	4184 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1c>
    4180:	2301      	movs	r3, #1
    4182:	e000      	b.n	4186 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x1e>
    4184:	2300      	movs	r3, #0
    4186:	226f      	movs	r2, #111	; 0x6f
    4188:	4917      	ldr	r1, [pc, #92]	; (41e8 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x80>)
    418a:	4618      	mov	r0, r3
    418c:	4b17      	ldr	r3, [pc, #92]	; (41ec <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x84>)
    418e:	4798      	blx	r3
	if (IsNotDeclaredTask(tk))
    4190:	6839      	ldr	r1, [r7, #0]
    4192:	6878      	ldr	r0, [r7, #4]
    4194:	4b16      	ldr	r3, [pc, #88]	; (41f0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x88>)
    4196:	4798      	blx	r3
    4198:	4603      	mov	r3, r0
    419a:	2b00      	cmp	r3, #0
    419c:	d002      	beq.n	41a4 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x3c>
	{
			return ERR_NOT_FOUND;
    419e:	f06f 0309 	mvn.w	r3, #9
    41a2:	e01d      	b.n	41e0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
	} 
	else
	{
		
		if (!is_list_element(taskListPrivate, task)) {
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	68da      	ldr	r2, [r3, #12]
    41a8:	687b      	ldr	r3, [r7, #4]
    41aa:	685b      	ldr	r3, [r3, #4]
    41ac:	4619      	mov	r1, r3
    41ae:	4610      	mov	r0, r2
    41b0:	4b10      	ldr	r3, [pc, #64]	; (41f4 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x8c>)
    41b2:	4798      	blx	r3
    41b4:	4603      	mov	r3, r0
    41b6:	f083 0301 	eor.w	r3, r3, #1
    41ba:	b2db      	uxtb	r3, r3
    41bc:	2b00      	cmp	r3, #0
    41be:	d002      	beq.n	41c6 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x5e>
			//ASSERT(false);
			return ERR_NOT_FOUND;
    41c0:	f06f 0309 	mvn.w	r3, #9
    41c4:	e00c      	b.n	41e0 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x78>
		}
			
		list_delete_element(taskListPrivate, task);
    41c6:	687b      	ldr	r3, [r7, #4]
    41c8:	68da      	ldr	r2, [r3, #12]
    41ca:	687b      	ldr	r3, [r7, #4]
    41cc:	685b      	ldr	r3, [r3, #4]
    41ce:	4619      	mov	r1, r3
    41d0:	4610      	mov	r0, r2
    41d2:	4b09      	ldr	r3, [pc, #36]	; (41f8 <_ZN17TaskHandler_Class10RemoveTaskER14ControllerTask+0x90>)
    41d4:	4798      	blx	r3
		task->id=kALUNotTaskEvent;
    41d6:	687b      	ldr	r3, [r7, #4]
    41d8:	685b      	ldr	r3, [r3, #4]
    41da:	2200      	movs	r2, #0
    41dc:	711a      	strb	r2, [r3, #4]
		return ERR_NONE;
    41de:	2300      	movs	r3, #0
	}

	return ERR_NOT_FOUND;
}
    41e0:	4618      	mov	r0, r3
    41e2:	3708      	adds	r7, #8
    41e4:	46bd      	mov	sp, r7
    41e6:	bd80      	pop	{r7, pc}
    41e8:	0001f840 	.word	0x0001f840
    41ec:	0000799d 	.word	0x0000799d
    41f0:	000042c1 	.word	0x000042c1
    41f4:	000079c5 	.word	0x000079c5
    41f8:	00007b27 	.word	0x00007b27

000041fc <_ZN17TaskHandler_Class15GetHighPrioTaskEv>:

ControllerTask	TaskHandler_Class::GetHighPrioTask(void){
    41fc:	b480      	push	{r7}
    41fe:	b087      	sub	sp, #28
    4200:	af00      	add	r7, sp, #0
    4202:	6078      	str	r0, [r7, #4]
    4204:	6039      	str	r1, [r7, #0]
	list_element *it;
	ControllerTask* ct;
	uint8_t		highPrio=kALUNumberTasks;
    4206:	230b      	movs	r3, #11
    4208:	73fb      	strb	r3, [r7, #15]
		
	for (it = taskListPrivate->head; it; it = it->next) {
    420a:	683b      	ldr	r3, [r7, #0]
    420c:	68db      	ldr	r3, [r3, #12]
    420e:	681b      	ldr	r3, [r3, #0]
    4210:	617b      	str	r3, [r7, #20]
    4212:	697b      	ldr	r3, [r7, #20]
    4214:	2b00      	cmp	r3, #0
    4216:	d011      	beq.n	423c <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x40>
		ct=(ControllerTask*)it;
    4218:	697b      	ldr	r3, [r7, #20]
    421a:	613b      	str	r3, [r7, #16]
		if ((ct->prio)<(highPrio)) {
    421c:	693b      	ldr	r3, [r7, #16]
    421e:	795b      	ldrb	r3, [r3, #5]
    4220:	461a      	mov	r2, r3
    4222:	7bfb      	ldrb	r3, [r7, #15]
    4224:	429a      	cmp	r2, r3
    4226:	da05      	bge.n	4234 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x38>
			highPrio=ct->prio;
    4228:	693b      	ldr	r3, [r7, #16]
    422a:	795b      	ldrb	r3, [r3, #5]
    422c:	73fb      	strb	r3, [r7, #15]
			task=ct;
    422e:	683b      	ldr	r3, [r7, #0]
    4230:	693a      	ldr	r2, [r7, #16]
    4232:	605a      	str	r2, [r3, #4]
	for (it = taskListPrivate->head; it; it = it->next) {
    4234:	697b      	ldr	r3, [r7, #20]
    4236:	681b      	ldr	r3, [r3, #0]
    4238:	617b      	str	r3, [r7, #20]
    423a:	e7ea      	b.n	4212 <_ZN17TaskHandler_Class15GetHighPrioTaskEv+0x16>
			
		}
	}
	return (ControllerTask)(*task);
    423c:	683b      	ldr	r3, [r7, #0]
    423e:	685a      	ldr	r2, [r3, #4]
    4240:	687b      	ldr	r3, [r7, #4]
    4242:	e892 0003 	ldmia.w	r2, {r0, r1}
    4246:	e883 0003 	stmia.w	r3, {r0, r1}
}
    424a:	6878      	ldr	r0, [r7, #4]
    424c:	371c      	adds	r7, #28
    424e:	46bd      	mov	sp, r7
    4250:	bc80      	pop	{r7}
    4252:	4770      	bx	lr

00004254 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv>:

void	TaskHandler_Class::ChooseAvailableTask(void){
    4254:	b480      	push	{r7}
    4256:	b085      	sub	sp, #20
    4258:	af00      	add	r7, sp, #0
    425a:	6078      	str	r0, [r7, #4]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    425c:	2300      	movs	r3, #0
    425e:	73fb      	strb	r3, [r7, #15]
    4260:	7bfb      	ldrb	r3, [r7, #15]
    4262:	2b0a      	cmp	r3, #10
    4264:	dc21      	bgt.n	42aa <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x56>
	{
		j=ii%MAXIMUM_TASKS;
    4266:	7bf9      	ldrb	r1, [r7, #15]
    4268:	4b13      	ldr	r3, [pc, #76]	; (42b8 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x64>)
    426a:	fba3 2301 	umull	r2, r3, r3, r1
    426e:	08da      	lsrs	r2, r3, #3
    4270:	4613      	mov	r3, r2
    4272:	009b      	lsls	r3, r3, #2
    4274:	4413      	add	r3, r2
    4276:	005b      	lsls	r3, r3, #1
    4278:	4413      	add	r3, r2
    427a:	1acb      	subs	r3, r1, r3
    427c:	b2da      	uxtb	r2, r3
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	725a      	strb	r2, [r3, #9]
		if (taskStorage[j].id==kALUNotTaskEvent)
    4282:	687b      	ldr	r3, [r7, #4]
    4284:	7a5b      	ldrb	r3, [r3, #9]
    4286:	4a0d      	ldr	r2, [pc, #52]	; (42bc <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x68>)
    4288:	00db      	lsls	r3, r3, #3
    428a:	4413      	add	r3, r2
    428c:	791b      	ldrb	r3, [r3, #4]
    428e:	2b00      	cmp	r3, #0
    4290:	d107      	bne.n	42a2 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x4e>
		{			
			task=&taskStorage[j];
    4292:	687b      	ldr	r3, [r7, #4]
    4294:	7a5b      	ldrb	r3, [r3, #9]
    4296:	00db      	lsls	r3, r3, #3
    4298:	4a08      	ldr	r2, [pc, #32]	; (42bc <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x68>)
    429a:	441a      	add	r2, r3
    429c:	687b      	ldr	r3, [r7, #4]
    429e:	605a      	str	r2, [r3, #4]
			return;
    42a0:	e006      	b.n	42b0 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x5c>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    42a2:	7bfb      	ldrb	r3, [r7, #15]
    42a4:	3301      	adds	r3, #1
    42a6:	73fb      	strb	r3, [r7, #15]
    42a8:	e7da      	b.n	4260 <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0xc>
			
		}
	}
	task=&taskStorage[0];
    42aa:	687b      	ldr	r3, [r7, #4]
    42ac:	4a03      	ldr	r2, [pc, #12]	; (42bc <_ZN17TaskHandler_Class19ChooseAvailableTaskEv+0x68>)
    42ae:	605a      	str	r2, [r3, #4]

}
    42b0:	3714      	adds	r7, #20
    42b2:	46bd      	mov	sp, r7
    42b4:	bc80      	pop	{r7}
    42b6:	4770      	bx	lr
    42b8:	ba2e8ba3 	.word	0xba2e8ba3
    42bc:	20008688 	.word	0x20008688

000042c0 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask>:

bool	TaskHandler_Class::IsNotDeclaredTask(ControllerTask& tk){
    42c0:	b480      	push	{r7}
    42c2:	b085      	sub	sp, #20
    42c4:	af00      	add	r7, sp, #0
    42c6:	6078      	str	r0, [r7, #4]
    42c8:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    42ca:	2300      	movs	r3, #0
    42cc:	73fb      	strb	r3, [r7, #15]
    42ce:	7bfb      	ldrb	r3, [r7, #15]
    42d0:	2b0a      	cmp	r3, #10
    42d2:	dc14      	bgt.n	42fe <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x3e>
	{
		if (taskStorage[ii].id==tk.id)
    42d4:	7bfb      	ldrb	r3, [r7, #15]
    42d6:	4a0d      	ldr	r2, [pc, #52]	; (430c <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>)
    42d8:	00db      	lsls	r3, r3, #3
    42da:	4413      	add	r3, r2
    42dc:	791a      	ldrb	r2, [r3, #4]
    42de:	683b      	ldr	r3, [r7, #0]
    42e0:	791b      	ldrb	r3, [r3, #4]
    42e2:	429a      	cmp	r2, r3
    42e4:	d107      	bne.n	42f6 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x36>
		{
			task=&taskStorage[ii];
    42e6:	7bfb      	ldrb	r3, [r7, #15]
    42e8:	00db      	lsls	r3, r3, #3
    42ea:	4a08      	ldr	r2, [pc, #32]	; (430c <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x4c>)
    42ec:	441a      	add	r2, r3
    42ee:	687b      	ldr	r3, [r7, #4]
    42f0:	605a      	str	r2, [r3, #4]
			return false;
    42f2:	2300      	movs	r3, #0
    42f4:	e004      	b.n	4300 <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0x40>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    42f6:	7bfb      	ldrb	r3, [r7, #15]
    42f8:	3301      	adds	r3, #1
    42fa:	73fb      	strb	r3, [r7, #15]
    42fc:	e7e7      	b.n	42ce <_ZN17TaskHandler_Class17IsNotDeclaredTaskER14ControllerTask+0xe>
			
		}
	}
	return true;
    42fe:	2301      	movs	r3, #1


}
    4300:	4618      	mov	r0, r3
    4302:	3714      	adds	r7, #20
    4304:	46bd      	mov	sp, r7
    4306:	bc80      	pop	{r7}
    4308:	4770      	bx	lr
    430a:	bf00      	nop
    430c:	20008688 	.word	0x20008688

00004310 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum>:

bool	TaskHandler_Class::IsListedTask(ALUTaskEnum at){
    4310:	b480      	push	{r7}
    4312:	b085      	sub	sp, #20
    4314:	af00      	add	r7, sp, #0
    4316:	6078      	str	r0, [r7, #4]
    4318:	460b      	mov	r3, r1
    431a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    431c:	2300      	movs	r3, #0
    431e:	73fb      	strb	r3, [r7, #15]
    4320:	7bfb      	ldrb	r3, [r7, #15]
    4322:	2b0a      	cmp	r3, #10
    4324:	dc0d      	bgt.n	4342 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x32>
	{
		if (taskStorage[ii].id==at)
    4326:	7bfb      	ldrb	r3, [r7, #15]
    4328:	4a09      	ldr	r2, [pc, #36]	; (4350 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x40>)
    432a:	00db      	lsls	r3, r3, #3
    432c:	4413      	add	r3, r2
    432e:	791b      	ldrb	r3, [r3, #4]
    4330:	78fa      	ldrb	r2, [r7, #3]
    4332:	429a      	cmp	r2, r3
    4334:	d101      	bne.n	433a <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x2a>
		{
		//	task=&taskStorage[ii];
			return true;
    4336:	2301      	movs	r3, #1
    4338:	e004      	b.n	4344 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x34>
	for (uint8_t ii = 0; ii < MAXIMUM_TASKS; ii++)
    433a:	7bfb      	ldrb	r3, [r7, #15]
    433c:	3301      	adds	r3, #1
    433e:	73fb      	strb	r3, [r7, #15]
    4340:	e7ee      	b.n	4320 <_ZN17TaskHandler_Class12IsListedTaskE11ALUTaskEnum+0x10>
			
		}
	}
	return false;
    4342:	2300      	movs	r3, #0


    4344:	4618      	mov	r0, r3
    4346:	3714      	adds	r7, #20
    4348:	46bd      	mov	sp, r7
    434a:	bc80      	pop	{r7}
    434c:	4770      	bx	lr
    434e:	bf00      	nop
    4350:	20008688 	.word	0x20008688

00004354 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    4354:	b580      	push	{r7, lr}
    4356:	af00      	add	r7, sp, #0
	system_init();
    4358:	4b03      	ldr	r3, [pc, #12]	; (4368 <atmel_start_init+0x14>)
    435a:	4798      	blx	r3
	usb_init();
    435c:	4b03      	ldr	r3, [pc, #12]	; (436c <atmel_start_init+0x18>)
    435e:	4798      	blx	r3
	spi_nor_flash_init();
    4360:	4b03      	ldr	r3, [pc, #12]	; (4370 <atmel_start_init+0x1c>)
    4362:	4798      	blx	r3
}
    4364:	bf00      	nop
    4366:	bd80      	pop	{r7, pc}
    4368:	00005795 	.word	0x00005795
    436c:	0001058d 	.word	0x0001058d
    4370:	00010521 	.word	0x00010521

00004374 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    4374:	b480      	push	{r7}
    4376:	b085      	sub	sp, #20
    4378:	af00      	add	r7, sp, #0
    437a:	60f8      	str	r0, [r7, #12]
    437c:	460b      	mov	r3, r1
    437e:	607a      	str	r2, [r7, #4]
    4380:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4382:	7afa      	ldrb	r2, [r7, #11]
    4384:	68fb      	ldr	r3, [r7, #12]
    4386:	3220      	adds	r2, #32
    4388:	6879      	ldr	r1, [r7, #4]
    438a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    438e:	bf00      	nop
    4390:	3714      	adds	r7, #20
    4392:	46bd      	mov	sp, r7
    4394:	f85d 7b04 	ldr.w	r7, [sp], #4
    4398:	4770      	bx	lr

0000439a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    439a:	b480      	push	{r7}
    439c:	b083      	sub	sp, #12
    439e:	af00      	add	r7, sp, #0
    43a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    43a2:	687b      	ldr	r3, [r7, #4]
    43a4:	691b      	ldr	r3, [r3, #16]
    43a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    43aa:	687b      	ldr	r3, [r7, #4]
    43ac:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    43ae:	bf00      	nop
    43b0:	370c      	adds	r7, #12
    43b2:	46bd      	mov	sp, r7
    43b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    43b8:	4770      	bx	lr

000043ba <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    43ba:	b480      	push	{r7}
    43bc:	b083      	sub	sp, #12
    43be:	af00      	add	r7, sp, #0
    43c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    43c2:	687b      	ldr	r3, [r7, #4]
    43c4:	691b      	ldr	r3, [r3, #16]
    43c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    43ca:	687b      	ldr	r3, [r7, #4]
    43cc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    43ce:	bf00      	nop
    43d0:	370c      	adds	r7, #12
    43d2:	46bd      	mov	sp, r7
    43d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    43d8:	4770      	bx	lr

000043da <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    43da:	b480      	push	{r7}
    43dc:	b083      	sub	sp, #12
    43de:	af00      	add	r7, sp, #0
    43e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    43e2:	687b      	ldr	r3, [r7, #4]
    43e4:	691b      	ldr	r3, [r3, #16]
    43e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    43ea:	687b      	ldr	r3, [r7, #4]
    43ec:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    43ee:	bf00      	nop
    43f0:	370c      	adds	r7, #12
    43f2:	46bd      	mov	sp, r7
    43f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    43f8:	4770      	bx	lr

000043fa <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    43fa:	b480      	push	{r7}
    43fc:	b083      	sub	sp, #12
    43fe:	af00      	add	r7, sp, #0
    4400:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    4402:	687b      	ldr	r3, [r7, #4]
    4404:	691b      	ldr	r3, [r3, #16]
    4406:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    440e:	bf00      	nop
    4410:	370c      	adds	r7, #12
    4412:	46bd      	mov	sp, r7
    4414:	f85d 7b04 	ldr.w	r7, [sp], #4
    4418:	4770      	bx	lr

0000441a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    441a:	b480      	push	{r7}
    441c:	b083      	sub	sp, #12
    441e:	af00      	add	r7, sp, #0
    4420:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    4422:	687b      	ldr	r3, [r7, #4]
    4424:	695b      	ldr	r3, [r3, #20]
    4426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    442e:	bf00      	nop
    4430:	370c      	adds	r7, #12
    4432:	46bd      	mov	sp, r7
    4434:	f85d 7b04 	ldr.w	r7, [sp], #4
    4438:	4770      	bx	lr

0000443a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    443a:	b480      	push	{r7}
    443c:	b083      	sub	sp, #12
    443e:	af00      	add	r7, sp, #0
    4440:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	695b      	ldr	r3, [r3, #20]
    4446:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    444a:	687b      	ldr	r3, [r7, #4]
    444c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    444e:	bf00      	nop
    4450:	370c      	adds	r7, #12
    4452:	46bd      	mov	sp, r7
    4454:	f85d 7b04 	ldr.w	r7, [sp], #4
    4458:	4770      	bx	lr

0000445a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    445a:	b480      	push	{r7}
    445c:	b083      	sub	sp, #12
    445e:	af00      	add	r7, sp, #0
    4460:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    4462:	687b      	ldr	r3, [r7, #4]
    4464:	695b      	ldr	r3, [r3, #20]
    4466:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    446a:	687b      	ldr	r3, [r7, #4]
    446c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    446e:	bf00      	nop
    4470:	370c      	adds	r7, #12
    4472:	46bd      	mov	sp, r7
    4474:	f85d 7b04 	ldr.w	r7, [sp], #4
    4478:	4770      	bx	lr

0000447a <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    447a:	b480      	push	{r7}
    447c:	b083      	sub	sp, #12
    447e:	af00      	add	r7, sp, #0
    4480:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    4482:	687b      	ldr	r3, [r7, #4]
    4484:	695b      	ldr	r3, [r3, #20]
    4486:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    448e:	bf00      	nop
    4490:	370c      	adds	r7, #12
    4492:	46bd      	mov	sp, r7
    4494:	f85d 7b04 	ldr.w	r7, [sp], #4
    4498:	4770      	bx	lr

0000449a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    449a:	b480      	push	{r7}
    449c:	b083      	sub	sp, #12
    449e:	af00      	add	r7, sp, #0
    44a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	695b      	ldr	r3, [r3, #20]
    44a6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    44aa:	687b      	ldr	r3, [r7, #4]
    44ac:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    44ae:	bf00      	nop
    44b0:	370c      	adds	r7, #12
    44b2:	46bd      	mov	sp, r7
    44b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    44b8:	4770      	bx	lr

000044ba <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
    44ba:	b480      	push	{r7}
    44bc:	b083      	sub	sp, #12
    44be:	af00      	add	r7, sp, #0
    44c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    44c2:	687b      	ldr	r3, [r7, #4]
    44c4:	695b      	ldr	r3, [r3, #20]
    44c6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    44ca:	687b      	ldr	r3, [r7, #4]
    44cc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    44ce:	bf00      	nop
    44d0:	370c      	adds	r7, #12
    44d2:	46bd      	mov	sp, r7
    44d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    44d8:	4770      	bx	lr

000044da <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    44da:	b480      	push	{r7}
    44dc:	b083      	sub	sp, #12
    44de:	af00      	add	r7, sp, #0
    44e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    44e2:	687b      	ldr	r3, [r7, #4]
    44e4:	699b      	ldr	r3, [r3, #24]
    44e6:	f043 0201 	orr.w	r2, r3, #1
    44ea:	687b      	ldr	r3, [r7, #4]
    44ec:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    44ee:	bf00      	nop
    44f0:	370c      	adds	r7, #12
    44f2:	46bd      	mov	sp, r7
    44f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    44f8:	4770      	bx	lr

000044fa <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    44fa:	b480      	push	{r7}
    44fc:	b083      	sub	sp, #12
    44fe:	af00      	add	r7, sp, #0
    4500:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    4502:	687b      	ldr	r3, [r7, #4]
    4504:	699b      	ldr	r3, [r3, #24]
    4506:	f043 0202 	orr.w	r2, r3, #2
    450a:	687b      	ldr	r3, [r7, #4]
    450c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    450e:	bf00      	nop
    4510:	370c      	adds	r7, #12
    4512:	46bd      	mov	sp, r7
    4514:	f85d 7b04 	ldr.w	r7, [sp], #4
    4518:	4770      	bx	lr

0000451a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    451a:	b480      	push	{r7}
    451c:	b083      	sub	sp, #12
    451e:	af00      	add	r7, sp, #0
    4520:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    4522:	687b      	ldr	r3, [r7, #4]
    4524:	699b      	ldr	r3, [r3, #24]
    4526:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    452a:	687b      	ldr	r3, [r7, #4]
    452c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    452e:	bf00      	nop
    4530:	370c      	adds	r7, #12
    4532:	46bd      	mov	sp, r7
    4534:	f85d 7b04 	ldr.w	r7, [sp], #4
    4538:	4770      	bx	lr

0000453a <hri_mclk_set_APBBMASK_SERCOM2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_EVSYS;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
    453a:	b480      	push	{r7}
    453c:	b083      	sub	sp, #12
    453e:	af00      	add	r7, sp, #0
    4540:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    4542:	687b      	ldr	r3, [r7, #4]
    4544:	699b      	ldr	r3, [r3, #24]
    4546:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    454a:	687b      	ldr	r3, [r7, #4]
    454c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    454e:	bf00      	nop
    4550:	370c      	adds	r7, #12
    4552:	46bd      	mov	sp, r7
    4554:	f85d 7b04 	ldr.w	r7, [sp], #4
    4558:	4770      	bx	lr

0000455a <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    455a:	b480      	push	{r7}
    455c:	b083      	sub	sp, #12
    455e:	af00      	add	r7, sp, #0
    4560:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    4562:	687b      	ldr	r3, [r7, #4]
    4564:	699b      	ldr	r3, [r3, #24]
    4566:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    456a:	687b      	ldr	r3, [r7, #4]
    456c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    456e:	bf00      	nop
    4570:	370c      	adds	r7, #12
    4572:	46bd      	mov	sp, r7
    4574:	f85d 7b04 	ldr.w	r7, [sp], #4
    4578:	4770      	bx	lr

0000457a <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    457a:	b480      	push	{r7}
    457c:	b083      	sub	sp, #12
    457e:	af00      	add	r7, sp, #0
    4580:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    4582:	687b      	ldr	r3, [r7, #4]
    4584:	699b      	ldr	r3, [r3, #24]
    4586:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    458a:	687b      	ldr	r3, [r7, #4]
    458c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    458e:	bf00      	nop
    4590:	370c      	adds	r7, #12
    4592:	46bd      	mov	sp, r7
    4594:	f85d 7b04 	ldr.w	r7, [sp], #4
    4598:	4770      	bx	lr

0000459a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    459a:	b480      	push	{r7}
    459c:	b083      	sub	sp, #12
    459e:	af00      	add	r7, sp, #0
    45a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    45a2:	687b      	ldr	r3, [r7, #4]
    45a4:	699b      	ldr	r3, [r3, #24]
    45a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    45aa:	687b      	ldr	r3, [r7, #4]
    45ac:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    45ae:	bf00      	nop
    45b0:	370c      	adds	r7, #12
    45b2:	46bd      	mov	sp, r7
    45b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    45b8:	4770      	bx	lr

000045ba <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    45ba:	b480      	push	{r7}
    45bc:	b083      	sub	sp, #12
    45be:	af00      	add	r7, sp, #0
    45c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    45c2:	687b      	ldr	r3, [r7, #4]
    45c4:	69db      	ldr	r3, [r3, #28]
    45c6:	f043 0220 	orr.w	r2, r3, #32
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    45ce:	bf00      	nop
    45d0:	370c      	adds	r7, #12
    45d2:	46bd      	mov	sp, r7
    45d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    45d8:	4770      	bx	lr

000045da <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    45da:	b480      	push	{r7}
    45dc:	b083      	sub	sp, #12
    45de:	af00      	add	r7, sp, #0
    45e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	69db      	ldr	r3, [r3, #28]
    45e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    45ea:	687b      	ldr	r3, [r7, #4]
    45ec:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    45ee:	bf00      	nop
    45f0:	370c      	adds	r7, #12
    45f2:	46bd      	mov	sp, r7
    45f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    45f8:	4770      	bx	lr

000045fa <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    45fa:	b480      	push	{r7}
    45fc:	b083      	sub	sp, #12
    45fe:	af00      	add	r7, sp, #0
    4600:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	69db      	ldr	r3, [r3, #28]
    4606:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    460e:	bf00      	nop
    4610:	370c      	adds	r7, #12
    4612:	46bd      	mov	sp, r7
    4614:	f85d 7b04 	ldr.w	r7, [sp], #4
    4618:	4770      	bx	lr

0000461a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    461a:	b480      	push	{r7}
    461c:	b083      	sub	sp, #12
    461e:	af00      	add	r7, sp, #0
    4620:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    4622:	687b      	ldr	r3, [r7, #4]
    4624:	6a1b      	ldr	r3, [r3, #32]
    4626:	f043 0201 	orr.w	r2, r3, #1
    462a:	687b      	ldr	r3, [r7, #4]
    462c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    462e:	bf00      	nop
    4630:	370c      	adds	r7, #12
    4632:	46bd      	mov	sp, r7
    4634:	f85d 7b04 	ldr.w	r7, [sp], #4
    4638:	4770      	bx	lr

0000463a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    463a:	b480      	push	{r7}
    463c:	b083      	sub	sp, #12
    463e:	af00      	add	r7, sp, #0
    4640:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    4642:	687b      	ldr	r3, [r7, #4]
    4644:	6a1b      	ldr	r3, [r3, #32]
    4646:	f043 0202 	orr.w	r2, r3, #2
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    464e:	bf00      	nop
    4650:	370c      	adds	r7, #12
    4652:	46bd      	mov	sp, r7
    4654:	f85d 7b04 	ldr.w	r7, [sp], #4
    4658:	4770      	bx	lr

0000465a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    465a:	b480      	push	{r7}
    465c:	b083      	sub	sp, #12
    465e:	af00      	add	r7, sp, #0
    4660:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    4662:	687b      	ldr	r3, [r7, #4]
    4664:	6a1b      	ldr	r3, [r3, #32]
    4666:	f043 0204 	orr.w	r2, r3, #4
    466a:	687b      	ldr	r3, [r7, #4]
    466c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    466e:	bf00      	nop
    4670:	370c      	adds	r7, #12
    4672:	46bd      	mov	sp, r7
    4674:	f85d 7b04 	ldr.w	r7, [sp], #4
    4678:	4770      	bx	lr

0000467a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    467a:	b480      	push	{r7}
    467c:	b083      	sub	sp, #12
    467e:	af00      	add	r7, sp, #0
    4680:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	6a1b      	ldr	r3, [r3, #32]
    4686:	f043 0208 	orr.w	r2, r3, #8
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    468e:	bf00      	nop
    4690:	370c      	adds	r7, #12
    4692:	46bd      	mov	sp, r7
    4694:	f85d 7b04 	ldr.w	r7, [sp], #4
    4698:	4770      	bx	lr

0000469a <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    469a:	b480      	push	{r7}
    469c:	b083      	sub	sp, #12
    469e:	af00      	add	r7, sp, #0
    46a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    46a2:	687b      	ldr	r3, [r7, #4]
    46a4:	6a1b      	ldr	r3, [r3, #32]
    46a6:	f043 0220 	orr.w	r2, r3, #32
    46aa:	687b      	ldr	r3, [r7, #4]
    46ac:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    46ae:	bf00      	nop
    46b0:	370c      	adds	r7, #12
    46b2:	46bd      	mov	sp, r7
    46b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    46b8:	4770      	bx	lr

000046ba <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    46ba:	b480      	push	{r7}
    46bc:	b085      	sub	sp, #20
    46be:	af00      	add	r7, sp, #0
    46c0:	60f8      	str	r0, [r7, #12]
    46c2:	460b      	mov	r3, r1
    46c4:	607a      	str	r2, [r7, #4]
    46c6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    46c8:	7afb      	ldrb	r3, [r7, #11]
    46ca:	68fa      	ldr	r2, [r7, #12]
    46cc:	01db      	lsls	r3, r3, #7
    46ce:	4413      	add	r3, r2
    46d0:	3308      	adds	r3, #8
    46d2:	687a      	ldr	r2, [r7, #4]
    46d4:	601a      	str	r2, [r3, #0]
}
    46d6:	bf00      	nop
    46d8:	3714      	adds	r7, #20
    46da:	46bd      	mov	sp, r7
    46dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    46e0:	4770      	bx	lr

000046e2 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    46e2:	b480      	push	{r7}
    46e4:	b085      	sub	sp, #20
    46e6:	af00      	add	r7, sp, #0
    46e8:	60f8      	str	r0, [r7, #12]
    46ea:	460b      	mov	r3, r1
    46ec:	607a      	str	r2, [r7, #4]
    46ee:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    46f0:	7afb      	ldrb	r3, [r7, #11]
    46f2:	68fa      	ldr	r2, [r7, #12]
    46f4:	01db      	lsls	r3, r3, #7
    46f6:	4413      	add	r3, r2
    46f8:	3304      	adds	r3, #4
    46fa:	687a      	ldr	r2, [r7, #4]
    46fc:	601a      	str	r2, [r3, #0]
}
    46fe:	bf00      	nop
    4700:	3714      	adds	r7, #20
    4702:	46bd      	mov	sp, r7
    4704:	f85d 7b04 	ldr.w	r7, [sp], #4
    4708:	4770      	bx	lr

0000470a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    470a:	b480      	push	{r7}
    470c:	b085      	sub	sp, #20
    470e:	af00      	add	r7, sp, #0
    4710:	60f8      	str	r0, [r7, #12]
    4712:	460b      	mov	r3, r1
    4714:	607a      	str	r2, [r7, #4]
    4716:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4718:	7afb      	ldrb	r3, [r7, #11]
    471a:	68fa      	ldr	r2, [r7, #12]
    471c:	01db      	lsls	r3, r3, #7
    471e:	4413      	add	r3, r2
    4720:	3318      	adds	r3, #24
    4722:	687a      	ldr	r2, [r7, #4]
    4724:	601a      	str	r2, [r3, #0]
}
    4726:	bf00      	nop
    4728:	3714      	adds	r7, #20
    472a:	46bd      	mov	sp, r7
    472c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4730:	4770      	bx	lr

00004732 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    4732:	b480      	push	{r7}
    4734:	b085      	sub	sp, #20
    4736:	af00      	add	r7, sp, #0
    4738:	60f8      	str	r0, [r7, #12]
    473a:	460b      	mov	r3, r1
    473c:	607a      	str	r2, [r7, #4]
    473e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4740:	7afb      	ldrb	r3, [r7, #11]
    4742:	68fa      	ldr	r2, [r7, #12]
    4744:	01db      	lsls	r3, r3, #7
    4746:	4413      	add	r3, r2
    4748:	3314      	adds	r3, #20
    474a:	687a      	ldr	r2, [r7, #4]
    474c:	601a      	str	r2, [r3, #0]
}
    474e:	bf00      	nop
    4750:	3714      	adds	r7, #20
    4752:	46bd      	mov	sp, r7
    4754:	f85d 7b04 	ldr.w	r7, [sp], #4
    4758:	4770      	bx	lr

0000475a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    475a:	b480      	push	{r7}
    475c:	b085      	sub	sp, #20
    475e:	af00      	add	r7, sp, #0
    4760:	6078      	str	r0, [r7, #4]
    4762:	4608      	mov	r0, r1
    4764:	4611      	mov	r1, r2
    4766:	461a      	mov	r2, r3
    4768:	4603      	mov	r3, r0
    476a:	70fb      	strb	r3, [r7, #3]
    476c:	460b      	mov	r3, r1
    476e:	70bb      	strb	r3, [r7, #2]
    4770:	4613      	mov	r3, r2
    4772:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4774:	78fa      	ldrb	r2, [r7, #3]
    4776:	78bb      	ldrb	r3, [r7, #2]
    4778:	6879      	ldr	r1, [r7, #4]
    477a:	01d2      	lsls	r2, r2, #7
    477c:	440a      	add	r2, r1
    477e:	4413      	add	r3, r2
    4780:	3330      	adds	r3, #48	; 0x30
    4782:	781b      	ldrb	r3, [r3, #0]
    4784:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4786:	7bfb      	ldrb	r3, [r7, #15]
    4788:	f023 030f 	bic.w	r3, r3, #15
    478c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    478e:	787b      	ldrb	r3, [r7, #1]
    4790:	f003 030f 	and.w	r3, r3, #15
    4794:	b2da      	uxtb	r2, r3
    4796:	7bfb      	ldrb	r3, [r7, #15]
    4798:	4313      	orrs	r3, r2
    479a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    479c:	78fa      	ldrb	r2, [r7, #3]
    479e:	78bb      	ldrb	r3, [r7, #2]
    47a0:	6879      	ldr	r1, [r7, #4]
    47a2:	01d2      	lsls	r2, r2, #7
    47a4:	440a      	add	r2, r1
    47a6:	4413      	add	r3, r2
    47a8:	3330      	adds	r3, #48	; 0x30
    47aa:	7bfa      	ldrb	r2, [r7, #15]
    47ac:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    47ae:	bf00      	nop
    47b0:	3714      	adds	r7, #20
    47b2:	46bd      	mov	sp, r7
    47b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47b8:	4770      	bx	lr

000047ba <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    47ba:	b480      	push	{r7}
    47bc:	b085      	sub	sp, #20
    47be:	af00      	add	r7, sp, #0
    47c0:	6078      	str	r0, [r7, #4]
    47c2:	4608      	mov	r0, r1
    47c4:	4611      	mov	r1, r2
    47c6:	461a      	mov	r2, r3
    47c8:	4603      	mov	r3, r0
    47ca:	70fb      	strb	r3, [r7, #3]
    47cc:	460b      	mov	r3, r1
    47ce:	70bb      	strb	r3, [r7, #2]
    47d0:	4613      	mov	r3, r2
    47d2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    47d4:	78fa      	ldrb	r2, [r7, #3]
    47d6:	78bb      	ldrb	r3, [r7, #2]
    47d8:	6879      	ldr	r1, [r7, #4]
    47da:	01d2      	lsls	r2, r2, #7
    47dc:	440a      	add	r2, r1
    47de:	4413      	add	r3, r2
    47e0:	3330      	adds	r3, #48	; 0x30
    47e2:	781b      	ldrb	r3, [r3, #0]
    47e4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    47e6:	7bfb      	ldrb	r3, [r7, #15]
    47e8:	f003 030f 	and.w	r3, r3, #15
    47ec:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    47ee:	787b      	ldrb	r3, [r7, #1]
    47f0:	011b      	lsls	r3, r3, #4
    47f2:	b2da      	uxtb	r2, r3
    47f4:	7bfb      	ldrb	r3, [r7, #15]
    47f6:	4313      	orrs	r3, r2
    47f8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    47fa:	78fa      	ldrb	r2, [r7, #3]
    47fc:	78bb      	ldrb	r3, [r7, #2]
    47fe:	6879      	ldr	r1, [r7, #4]
    4800:	01d2      	lsls	r2, r2, #7
    4802:	440a      	add	r2, r1
    4804:	4413      	add	r3, r2
    4806:	3330      	adds	r3, #48	; 0x30
    4808:	7bfa      	ldrb	r2, [r7, #15]
    480a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    480c:	bf00      	nop
    480e:	3714      	adds	r7, #20
    4810:	46bd      	mov	sp, r7
    4812:	f85d 7b04 	ldr.w	r7, [sp], #4
    4816:	4770      	bx	lr

00004818 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    4818:	b480      	push	{r7}
    481a:	b085      	sub	sp, #20
    481c:	af00      	add	r7, sp, #0
    481e:	6078      	str	r0, [r7, #4]
    4820:	4608      	mov	r0, r1
    4822:	4611      	mov	r1, r2
    4824:	461a      	mov	r2, r3
    4826:	4603      	mov	r3, r0
    4828:	70fb      	strb	r3, [r7, #3]
    482a:	460b      	mov	r3, r1
    482c:	70bb      	strb	r3, [r7, #2]
    482e:	4613      	mov	r3, r2
    4830:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4832:	78fa      	ldrb	r2, [r7, #3]
    4834:	78bb      	ldrb	r3, [r7, #2]
    4836:	6879      	ldr	r1, [r7, #4]
    4838:	01d2      	lsls	r2, r2, #7
    483a:	440a      	add	r2, r1
    483c:	4413      	add	r3, r2
    483e:	3340      	adds	r3, #64	; 0x40
    4840:	781b      	ldrb	r3, [r3, #0]
    4842:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    4844:	7bfb      	ldrb	r3, [r7, #15]
    4846:	f023 0301 	bic.w	r3, r3, #1
    484a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    484c:	787a      	ldrb	r2, [r7, #1]
    484e:	7bfb      	ldrb	r3, [r7, #15]
    4850:	4313      	orrs	r3, r2
    4852:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4854:	78fa      	ldrb	r2, [r7, #3]
    4856:	78bb      	ldrb	r3, [r7, #2]
    4858:	6879      	ldr	r1, [r7, #4]
    485a:	01d2      	lsls	r2, r2, #7
    485c:	440a      	add	r2, r1
    485e:	4413      	add	r3, r2
    4860:	3340      	adds	r3, #64	; 0x40
    4862:	7bfa      	ldrb	r2, [r7, #15]
    4864:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4866:	bf00      	nop
    4868:	3714      	adds	r7, #20
    486a:	46bd      	mov	sp, r7
    486c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4870:	4770      	bx	lr

00004872 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    4872:	b490      	push	{r4, r7}
    4874:	b082      	sub	sp, #8
    4876:	af00      	add	r7, sp, #0
    4878:	6078      	str	r0, [r7, #4]
    487a:	460b      	mov	r3, r1
    487c:	70fb      	strb	r3, [r7, #3]
    487e:	4613      	mov	r3, r2
    4880:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4882:	78fa      	ldrb	r2, [r7, #3]
    4884:	78bb      	ldrb	r3, [r7, #2]
    4886:	78f8      	ldrb	r0, [r7, #3]
    4888:	78b9      	ldrb	r1, [r7, #2]
    488a:	687c      	ldr	r4, [r7, #4]
    488c:	01c0      	lsls	r0, r0, #7
    488e:	4420      	add	r0, r4
    4890:	4401      	add	r1, r0
    4892:	3140      	adds	r1, #64	; 0x40
    4894:	7809      	ldrb	r1, [r1, #0]
    4896:	b2c9      	uxtb	r1, r1
    4898:	f041 0104 	orr.w	r1, r1, #4
    489c:	b2c8      	uxtb	r0, r1
    489e:	6879      	ldr	r1, [r7, #4]
    48a0:	01d2      	lsls	r2, r2, #7
    48a2:	440a      	add	r2, r1
    48a4:	4413      	add	r3, r2
    48a6:	3340      	adds	r3, #64	; 0x40
    48a8:	4602      	mov	r2, r0
    48aa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    48ac:	bf00      	nop
    48ae:	3708      	adds	r7, #8
    48b0:	46bd      	mov	sp, r7
    48b2:	bc90      	pop	{r4, r7}
    48b4:	4770      	bx	lr

000048b6 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    48b6:	b490      	push	{r4, r7}
    48b8:	b082      	sub	sp, #8
    48ba:	af00      	add	r7, sp, #0
    48bc:	6078      	str	r0, [r7, #4]
    48be:	460b      	mov	r3, r1
    48c0:	70fb      	strb	r3, [r7, #3]
    48c2:	4613      	mov	r3, r2
    48c4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    48c6:	78fa      	ldrb	r2, [r7, #3]
    48c8:	78bb      	ldrb	r3, [r7, #2]
    48ca:	78f8      	ldrb	r0, [r7, #3]
    48cc:	78b9      	ldrb	r1, [r7, #2]
    48ce:	687c      	ldr	r4, [r7, #4]
    48d0:	01c0      	lsls	r0, r0, #7
    48d2:	4420      	add	r0, r4
    48d4:	4401      	add	r1, r0
    48d6:	3140      	adds	r1, #64	; 0x40
    48d8:	7809      	ldrb	r1, [r1, #0]
    48da:	b2c9      	uxtb	r1, r1
    48dc:	f021 0104 	bic.w	r1, r1, #4
    48e0:	b2c8      	uxtb	r0, r1
    48e2:	6879      	ldr	r1, [r7, #4]
    48e4:	01d2      	lsls	r2, r2, #7
    48e6:	440a      	add	r2, r1
    48e8:	4413      	add	r3, r2
    48ea:	3340      	adds	r3, #64	; 0x40
    48ec:	4602      	mov	r2, r0
    48ee:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    48f0:	bf00      	nop
    48f2:	3708      	adds	r7, #8
    48f4:	46bd      	mov	sp, r7
    48f6:	bc90      	pop	{r4, r7}
    48f8:	4770      	bx	lr

000048fa <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    48fa:	b480      	push	{r7}
    48fc:	b085      	sub	sp, #20
    48fe:	af00      	add	r7, sp, #0
    4900:	60f8      	str	r0, [r7, #12]
    4902:	460b      	mov	r3, r1
    4904:	607a      	str	r2, [r7, #4]
    4906:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4908:	7afb      	ldrb	r3, [r7, #11]
    490a:	68fa      	ldr	r2, [r7, #12]
    490c:	01db      	lsls	r3, r3, #7
    490e:	4413      	add	r3, r2
    4910:	3328      	adds	r3, #40	; 0x28
    4912:	687a      	ldr	r2, [r7, #4]
    4914:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    4916:	bf00      	nop
    4918:	3714      	adds	r7, #20
    491a:	46bd      	mov	sp, r7
    491c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4920:	4770      	bx	lr
	...

00004924 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    4924:	b580      	push	{r7, lr}
    4926:	b082      	sub	sp, #8
    4928:	af00      	add	r7, sp, #0
    492a:	4603      	mov	r3, r0
    492c:	6039      	str	r1, [r7, #0]
    492e:	71fb      	strb	r3, [r7, #7]
    4930:	4613      	mov	r3, r2
    4932:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    4934:	79bb      	ldrb	r3, [r7, #6]
    4936:	2b01      	cmp	r3, #1
    4938:	d01c      	beq.n	4974 <_gpio_set_direction+0x50>
    493a:	2b02      	cmp	r3, #2
    493c:	d037      	beq.n	49ae <_gpio_set_direction+0x8a>
    493e:	2b00      	cmp	r3, #0
    4940:	d14e      	bne.n	49e0 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    4942:	79fb      	ldrb	r3, [r7, #7]
    4944:	683a      	ldr	r2, [r7, #0]
    4946:	4619      	mov	r1, r3
    4948:	482a      	ldr	r0, [pc, #168]	; (49f4 <_gpio_set_direction+0xd0>)
    494a:	4b2b      	ldr	r3, [pc, #172]	; (49f8 <_gpio_set_direction+0xd4>)
    494c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    494e:	683b      	ldr	r3, [r7, #0]
    4950:	b29b      	uxth	r3, r3
    4952:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    4956:	79fb      	ldrb	r3, [r7, #7]
    4958:	4619      	mov	r1, r3
    495a:	4826      	ldr	r0, [pc, #152]	; (49f4 <_gpio_set_direction+0xd0>)
    495c:	4b27      	ldr	r3, [pc, #156]	; (49fc <_gpio_set_direction+0xd8>)
    495e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    4960:	683b      	ldr	r3, [r7, #0]
    4962:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    4964:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    4968:	79fb      	ldrb	r3, [r7, #7]
    496a:	4619      	mov	r1, r3
    496c:	4821      	ldr	r0, [pc, #132]	; (49f4 <_gpio_set_direction+0xd0>)
    496e:	4b23      	ldr	r3, [pc, #140]	; (49fc <_gpio_set_direction+0xd8>)
    4970:	4798      	blx	r3
		break;
    4972:	e03a      	b.n	49ea <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    4974:	79fb      	ldrb	r3, [r7, #7]
    4976:	683a      	ldr	r2, [r7, #0]
    4978:	4619      	mov	r1, r3
    497a:	481e      	ldr	r0, [pc, #120]	; (49f4 <_gpio_set_direction+0xd0>)
    497c:	4b1e      	ldr	r3, [pc, #120]	; (49f8 <_gpio_set_direction+0xd4>)
    497e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    4980:	683b      	ldr	r3, [r7, #0]
    4982:	b29b      	uxth	r3, r3
    4984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    4988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    498c:	79f9      	ldrb	r1, [r7, #7]
    498e:	461a      	mov	r2, r3
    4990:	4818      	ldr	r0, [pc, #96]	; (49f4 <_gpio_set_direction+0xd0>)
    4992:	4b1a      	ldr	r3, [pc, #104]	; (49fc <_gpio_set_direction+0xd8>)
    4994:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    4996:	683b      	ldr	r3, [r7, #0]
    4998:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    499a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    499e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    49a2:	79f9      	ldrb	r1, [r7, #7]
    49a4:	461a      	mov	r2, r3
    49a6:	4813      	ldr	r0, [pc, #76]	; (49f4 <_gpio_set_direction+0xd0>)
    49a8:	4b14      	ldr	r3, [pc, #80]	; (49fc <_gpio_set_direction+0xd8>)
    49aa:	4798      	blx	r3
		break;
    49ac:	e01d      	b.n	49ea <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    49ae:	79fb      	ldrb	r3, [r7, #7]
    49b0:	683a      	ldr	r2, [r7, #0]
    49b2:	4619      	mov	r1, r3
    49b4:	480f      	ldr	r0, [pc, #60]	; (49f4 <_gpio_set_direction+0xd0>)
    49b6:	4b12      	ldr	r3, [pc, #72]	; (4a00 <_gpio_set_direction+0xdc>)
    49b8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    49ba:	683b      	ldr	r3, [r7, #0]
    49bc:	b29b      	uxth	r3, r3
    49be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    49c2:	79fb      	ldrb	r3, [r7, #7]
    49c4:	4619      	mov	r1, r3
    49c6:	480b      	ldr	r0, [pc, #44]	; (49f4 <_gpio_set_direction+0xd0>)
    49c8:	4b0c      	ldr	r3, [pc, #48]	; (49fc <_gpio_set_direction+0xd8>)
    49ca:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    49cc:	683b      	ldr	r3, [r7, #0]
    49ce:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    49d0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    49d4:	79fb      	ldrb	r3, [r7, #7]
    49d6:	4619      	mov	r1, r3
    49d8:	4806      	ldr	r0, [pc, #24]	; (49f4 <_gpio_set_direction+0xd0>)
    49da:	4b08      	ldr	r3, [pc, #32]	; (49fc <_gpio_set_direction+0xd8>)
    49dc:	4798      	blx	r3
		break;
    49de:	e004      	b.n	49ea <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    49e0:	2246      	movs	r2, #70	; 0x46
    49e2:	4908      	ldr	r1, [pc, #32]	; (4a04 <_gpio_set_direction+0xe0>)
    49e4:	2000      	movs	r0, #0
    49e6:	4b08      	ldr	r3, [pc, #32]	; (4a08 <_gpio_set_direction+0xe4>)
    49e8:	4798      	blx	r3
	}
}
    49ea:	bf00      	nop
    49ec:	3708      	adds	r7, #8
    49ee:	46bd      	mov	sp, r7
    49f0:	bd80      	pop	{r7, pc}
    49f2:	bf00      	nop
    49f4:	41008000 	.word	0x41008000
    49f8:	000046e3 	.word	0x000046e3
    49fc:	000048fb 	.word	0x000048fb
    4a00:	000046bb 	.word	0x000046bb
    4a04:	0001f85c 	.word	0x0001f85c
    4a08:	0000799d 	.word	0x0000799d

00004a0c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    4a0c:	b580      	push	{r7, lr}
    4a0e:	b082      	sub	sp, #8
    4a10:	af00      	add	r7, sp, #0
    4a12:	4603      	mov	r3, r0
    4a14:	6039      	str	r1, [r7, #0]
    4a16:	71fb      	strb	r3, [r7, #7]
    4a18:	4613      	mov	r3, r2
    4a1a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    4a1c:	79bb      	ldrb	r3, [r7, #6]
    4a1e:	2b00      	cmp	r3, #0
    4a20:	d006      	beq.n	4a30 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    4a22:	79fb      	ldrb	r3, [r7, #7]
    4a24:	683a      	ldr	r2, [r7, #0]
    4a26:	4619      	mov	r1, r3
    4a28:	4806      	ldr	r0, [pc, #24]	; (4a44 <_gpio_set_level+0x38>)
    4a2a:	4b07      	ldr	r3, [pc, #28]	; (4a48 <_gpio_set_level+0x3c>)
    4a2c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    4a2e:	e005      	b.n	4a3c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    4a30:	79fb      	ldrb	r3, [r7, #7]
    4a32:	683a      	ldr	r2, [r7, #0]
    4a34:	4619      	mov	r1, r3
    4a36:	4803      	ldr	r0, [pc, #12]	; (4a44 <_gpio_set_level+0x38>)
    4a38:	4b04      	ldr	r3, [pc, #16]	; (4a4c <_gpio_set_level+0x40>)
    4a3a:	4798      	blx	r3
}
    4a3c:	bf00      	nop
    4a3e:	3708      	adds	r7, #8
    4a40:	46bd      	mov	sp, r7
    4a42:	bd80      	pop	{r7, pc}
    4a44:	41008000 	.word	0x41008000
    4a48:	0000470b 	.word	0x0000470b
    4a4c:	00004733 	.word	0x00004733

00004a50 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    4a50:	b580      	push	{r7, lr}
    4a52:	b082      	sub	sp, #8
    4a54:	af00      	add	r7, sp, #0
    4a56:	4603      	mov	r3, r0
    4a58:	71fb      	strb	r3, [r7, #7]
    4a5a:	460b      	mov	r3, r1
    4a5c:	71bb      	strb	r3, [r7, #6]
    4a5e:	4613      	mov	r3, r2
    4a60:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    4a62:	797b      	ldrb	r3, [r7, #5]
    4a64:	2b01      	cmp	r3, #1
    4a66:	d00a      	beq.n	4a7e <_gpio_set_pin_pull_mode+0x2e>
    4a68:	2b02      	cmp	r3, #2
    4a6a:	d01f      	beq.n	4aac <_gpio_set_pin_pull_mode+0x5c>
    4a6c:	2b00      	cmp	r3, #0
    4a6e:	d134      	bne.n	4ada <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    4a70:	79ba      	ldrb	r2, [r7, #6]
    4a72:	79fb      	ldrb	r3, [r7, #7]
    4a74:	4619      	mov	r1, r3
    4a76:	481e      	ldr	r0, [pc, #120]	; (4af0 <_gpio_set_pin_pull_mode+0xa0>)
    4a78:	4b1e      	ldr	r3, [pc, #120]	; (4af4 <_gpio_set_pin_pull_mode+0xa4>)
    4a7a:	4798      	blx	r3
		break;
    4a7c:	e033      	b.n	4ae6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    4a7e:	79bb      	ldrb	r3, [r7, #6]
    4a80:	2201      	movs	r2, #1
    4a82:	409a      	lsls	r2, r3
    4a84:	79fb      	ldrb	r3, [r7, #7]
    4a86:	4619      	mov	r1, r3
    4a88:	4819      	ldr	r0, [pc, #100]	; (4af0 <_gpio_set_pin_pull_mode+0xa0>)
    4a8a:	4b1b      	ldr	r3, [pc, #108]	; (4af8 <_gpio_set_pin_pull_mode+0xa8>)
    4a8c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4a8e:	79ba      	ldrb	r2, [r7, #6]
    4a90:	79fb      	ldrb	r3, [r7, #7]
    4a92:	4619      	mov	r1, r3
    4a94:	4816      	ldr	r0, [pc, #88]	; (4af0 <_gpio_set_pin_pull_mode+0xa0>)
    4a96:	4b19      	ldr	r3, [pc, #100]	; (4afc <_gpio_set_pin_pull_mode+0xac>)
    4a98:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    4a9a:	79bb      	ldrb	r3, [r7, #6]
    4a9c:	2201      	movs	r2, #1
    4a9e:	409a      	lsls	r2, r3
    4aa0:	79fb      	ldrb	r3, [r7, #7]
    4aa2:	4619      	mov	r1, r3
    4aa4:	4812      	ldr	r0, [pc, #72]	; (4af0 <_gpio_set_pin_pull_mode+0xa0>)
    4aa6:	4b16      	ldr	r3, [pc, #88]	; (4b00 <_gpio_set_pin_pull_mode+0xb0>)
    4aa8:	4798      	blx	r3
		break;
    4aaa:	e01c      	b.n	4ae6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    4aac:	79bb      	ldrb	r3, [r7, #6]
    4aae:	2201      	movs	r2, #1
    4ab0:	409a      	lsls	r2, r3
    4ab2:	79fb      	ldrb	r3, [r7, #7]
    4ab4:	4619      	mov	r1, r3
    4ab6:	480e      	ldr	r0, [pc, #56]	; (4af0 <_gpio_set_pin_pull_mode+0xa0>)
    4ab8:	4b0f      	ldr	r3, [pc, #60]	; (4af8 <_gpio_set_pin_pull_mode+0xa8>)
    4aba:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    4abc:	79ba      	ldrb	r2, [r7, #6]
    4abe:	79fb      	ldrb	r3, [r7, #7]
    4ac0:	4619      	mov	r1, r3
    4ac2:	480b      	ldr	r0, [pc, #44]	; (4af0 <_gpio_set_pin_pull_mode+0xa0>)
    4ac4:	4b0d      	ldr	r3, [pc, #52]	; (4afc <_gpio_set_pin_pull_mode+0xac>)
    4ac6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    4ac8:	79bb      	ldrb	r3, [r7, #6]
    4aca:	2201      	movs	r2, #1
    4acc:	409a      	lsls	r2, r3
    4ace:	79fb      	ldrb	r3, [r7, #7]
    4ad0:	4619      	mov	r1, r3
    4ad2:	4807      	ldr	r0, [pc, #28]	; (4af0 <_gpio_set_pin_pull_mode+0xa0>)
    4ad4:	4b0b      	ldr	r3, [pc, #44]	; (4b04 <_gpio_set_pin_pull_mode+0xb4>)
    4ad6:	4798      	blx	r3
		break;
    4ad8:	e005      	b.n	4ae6 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    4ada:	2289      	movs	r2, #137	; 0x89
    4adc:	490a      	ldr	r1, [pc, #40]	; (4b08 <_gpio_set_pin_pull_mode+0xb8>)
    4ade:	2000      	movs	r0, #0
    4ae0:	4b0a      	ldr	r3, [pc, #40]	; (4b0c <_gpio_set_pin_pull_mode+0xbc>)
    4ae2:	4798      	blx	r3
		break;
    4ae4:	bf00      	nop
	}
}
    4ae6:	bf00      	nop
    4ae8:	3708      	adds	r7, #8
    4aea:	46bd      	mov	sp, r7
    4aec:	bd80      	pop	{r7, pc}
    4aee:	bf00      	nop
    4af0:	41008000 	.word	0x41008000
    4af4:	000048b7 	.word	0x000048b7
    4af8:	000046e3 	.word	0x000046e3
    4afc:	00004873 	.word	0x00004873
    4b00:	0000470b 	.word	0x0000470b
    4b04:	00004733 	.word	0x00004733
    4b08:	0001f85c 	.word	0x0001f85c
    4b0c:	0000799d 	.word	0x0000799d

00004b10 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    4b10:	b590      	push	{r4, r7, lr}
    4b12:	b085      	sub	sp, #20
    4b14:	af00      	add	r7, sp, #0
    4b16:	6078      	str	r0, [r7, #4]
    4b18:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    4b1a:	687b      	ldr	r3, [r7, #4]
    4b1c:	095b      	lsrs	r3, r3, #5
    4b1e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    4b20:	687b      	ldr	r3, [r7, #4]
    4b22:	b2db      	uxtb	r3, r3
    4b24:	f003 031f 	and.w	r3, r3, #31
    4b28:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    4b2a:	683b      	ldr	r3, [r7, #0]
    4b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4b30:	d106      	bne.n	4b40 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    4b32:	7bba      	ldrb	r2, [r7, #14]
    4b34:	7bf9      	ldrb	r1, [r7, #15]
    4b36:	2300      	movs	r3, #0
    4b38:	4812      	ldr	r0, [pc, #72]	; (4b84 <_gpio_set_pin_function+0x74>)
    4b3a:	4c13      	ldr	r4, [pc, #76]	; (4b88 <_gpio_set_pin_function+0x78>)
    4b3c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    4b3e:	e01d      	b.n	4b7c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    4b40:	7bba      	ldrb	r2, [r7, #14]
    4b42:	7bf9      	ldrb	r1, [r7, #15]
    4b44:	2301      	movs	r3, #1
    4b46:	480f      	ldr	r0, [pc, #60]	; (4b84 <_gpio_set_pin_function+0x74>)
    4b48:	4c0f      	ldr	r4, [pc, #60]	; (4b88 <_gpio_set_pin_function+0x78>)
    4b4a:	47a0      	blx	r4
		if (pin & 1) {
    4b4c:	7bbb      	ldrb	r3, [r7, #14]
    4b4e:	f003 0301 	and.w	r3, r3, #1
    4b52:	2b00      	cmp	r3, #0
    4b54:	d009      	beq.n	4b6a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    4b56:	7bbb      	ldrb	r3, [r7, #14]
    4b58:	085b      	lsrs	r3, r3, #1
    4b5a:	b2da      	uxtb	r2, r3
    4b5c:	683b      	ldr	r3, [r7, #0]
    4b5e:	b2db      	uxtb	r3, r3
    4b60:	7bf9      	ldrb	r1, [r7, #15]
    4b62:	4808      	ldr	r0, [pc, #32]	; (4b84 <_gpio_set_pin_function+0x74>)
    4b64:	4c09      	ldr	r4, [pc, #36]	; (4b8c <_gpio_set_pin_function+0x7c>)
    4b66:	47a0      	blx	r4
}
    4b68:	e008      	b.n	4b7c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    4b6a:	7bbb      	ldrb	r3, [r7, #14]
    4b6c:	085b      	lsrs	r3, r3, #1
    4b6e:	b2da      	uxtb	r2, r3
    4b70:	683b      	ldr	r3, [r7, #0]
    4b72:	b2db      	uxtb	r3, r3
    4b74:	7bf9      	ldrb	r1, [r7, #15]
    4b76:	4803      	ldr	r0, [pc, #12]	; (4b84 <_gpio_set_pin_function+0x74>)
    4b78:	4c05      	ldr	r4, [pc, #20]	; (4b90 <_gpio_set_pin_function+0x80>)
    4b7a:	47a0      	blx	r4
}
    4b7c:	bf00      	nop
    4b7e:	3714      	adds	r7, #20
    4b80:	46bd      	mov	sp, r7
    4b82:	bd90      	pop	{r4, r7, pc}
    4b84:	41008000 	.word	0x41008000
    4b88:	00004819 	.word	0x00004819
    4b8c:	000047bb 	.word	0x000047bb
    4b90:	0000475b 	.word	0x0000475b

00004b94 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    4b94:	b580      	push	{r7, lr}
    4b96:	b082      	sub	sp, #8
    4b98:	af00      	add	r7, sp, #0
    4b9a:	4603      	mov	r3, r0
    4b9c:	460a      	mov	r2, r1
    4b9e:	71fb      	strb	r3, [r7, #7]
    4ba0:	4613      	mov	r3, r2
    4ba2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    4ba4:	79fb      	ldrb	r3, [r7, #7]
    4ba6:	095b      	lsrs	r3, r3, #5
    4ba8:	b2d8      	uxtb	r0, r3
    4baa:	79fb      	ldrb	r3, [r7, #7]
    4bac:	f003 031f 	and.w	r3, r3, #31
    4bb0:	b2db      	uxtb	r3, r3
    4bb2:	79ba      	ldrb	r2, [r7, #6]
    4bb4:	4619      	mov	r1, r3
    4bb6:	4b03      	ldr	r3, [pc, #12]	; (4bc4 <gpio_set_pin_pull_mode+0x30>)
    4bb8:	4798      	blx	r3
}
    4bba:	bf00      	nop
    4bbc:	3708      	adds	r7, #8
    4bbe:	46bd      	mov	sp, r7
    4bc0:	bd80      	pop	{r7, pc}
    4bc2:	bf00      	nop
    4bc4:	00004a51 	.word	0x00004a51

00004bc8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    4bc8:	b580      	push	{r7, lr}
    4bca:	b082      	sub	sp, #8
    4bcc:	af00      	add	r7, sp, #0
    4bce:	6078      	str	r0, [r7, #4]
    4bd0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    4bd2:	6839      	ldr	r1, [r7, #0]
    4bd4:	6878      	ldr	r0, [r7, #4]
    4bd6:	4b03      	ldr	r3, [pc, #12]	; (4be4 <gpio_set_pin_function+0x1c>)
    4bd8:	4798      	blx	r3
}
    4bda:	bf00      	nop
    4bdc:	3708      	adds	r7, #8
    4bde:	46bd      	mov	sp, r7
    4be0:	bd80      	pop	{r7, pc}
    4be2:	bf00      	nop
    4be4:	00004b11 	.word	0x00004b11

00004be8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    4be8:	b580      	push	{r7, lr}
    4bea:	b082      	sub	sp, #8
    4bec:	af00      	add	r7, sp, #0
    4bee:	4603      	mov	r3, r0
    4bf0:	460a      	mov	r2, r1
    4bf2:	71fb      	strb	r3, [r7, #7]
    4bf4:	4613      	mov	r3, r2
    4bf6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    4bf8:	79fb      	ldrb	r3, [r7, #7]
    4bfa:	095b      	lsrs	r3, r3, #5
    4bfc:	b2d8      	uxtb	r0, r3
    4bfe:	79fb      	ldrb	r3, [r7, #7]
    4c00:	f003 031f 	and.w	r3, r3, #31
    4c04:	2201      	movs	r2, #1
    4c06:	fa02 f303 	lsl.w	r3, r2, r3
    4c0a:	79ba      	ldrb	r2, [r7, #6]
    4c0c:	4619      	mov	r1, r3
    4c0e:	4b03      	ldr	r3, [pc, #12]	; (4c1c <gpio_set_pin_direction+0x34>)
    4c10:	4798      	blx	r3
}
    4c12:	bf00      	nop
    4c14:	3708      	adds	r7, #8
    4c16:	46bd      	mov	sp, r7
    4c18:	bd80      	pop	{r7, pc}
    4c1a:	bf00      	nop
    4c1c:	00004925 	.word	0x00004925

00004c20 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    4c20:	b580      	push	{r7, lr}
    4c22:	b082      	sub	sp, #8
    4c24:	af00      	add	r7, sp, #0
    4c26:	4603      	mov	r3, r0
    4c28:	460a      	mov	r2, r1
    4c2a:	71fb      	strb	r3, [r7, #7]
    4c2c:	4613      	mov	r3, r2
    4c2e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    4c30:	79fb      	ldrb	r3, [r7, #7]
    4c32:	095b      	lsrs	r3, r3, #5
    4c34:	b2d8      	uxtb	r0, r3
    4c36:	79fb      	ldrb	r3, [r7, #7]
    4c38:	f003 031f 	and.w	r3, r3, #31
    4c3c:	2201      	movs	r2, #1
    4c3e:	fa02 f303 	lsl.w	r3, r2, r3
    4c42:	79ba      	ldrb	r2, [r7, #6]
    4c44:	4619      	mov	r1, r3
    4c46:	4b03      	ldr	r3, [pc, #12]	; (4c54 <gpio_set_pin_level+0x34>)
    4c48:	4798      	blx	r3
}
    4c4a:	bf00      	nop
    4c4c:	3708      	adds	r7, #8
    4c4e:	46bd      	mov	sp, r7
    4c50:	bd80      	pop	{r7, pc}
    4c52:	bf00      	nop
    4c54:	00004a0d 	.word	0x00004a0d

00004c58 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    4c58:	b580      	push	{r7, lr}
    4c5a:	af00      	add	r7, sp, #0
	_init_chip();
    4c5c:	4b01      	ldr	r3, [pc, #4]	; (4c64 <init_mcu+0xc>)
    4c5e:	4798      	blx	r3
}
    4c60:	bf00      	nop
    4c62:	bd80      	pop	{r7, pc}
    4c64:	000085ad 	.word	0x000085ad

00004c68 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    4c68:	b580      	push	{r7, lr}
    4c6a:	b082      	sub	sp, #8
    4c6c:	af00      	add	r7, sp, #0
    4c6e:	6078      	str	r0, [r7, #4]
    4c70:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    4c72:	687b      	ldr	r3, [r7, #4]
    4c74:	2b00      	cmp	r3, #0
    4c76:	d004      	beq.n	4c82 <wdt_init+0x1a>
    4c78:	683b      	ldr	r3, [r7, #0]
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	d001      	beq.n	4c82 <wdt_init+0x1a>
    4c7e:	2301      	movs	r3, #1
    4c80:	e000      	b.n	4c84 <wdt_init+0x1c>
    4c82:	2300      	movs	r3, #0
    4c84:	f003 0301 	and.w	r3, r3, #1
    4c88:	b2db      	uxtb	r3, r3
    4c8a:	2248      	movs	r2, #72	; 0x48
    4c8c:	4907      	ldr	r1, [pc, #28]	; (4cac <wdt_init+0x44>)
    4c8e:	4618      	mov	r0, r3
    4c90:	4b07      	ldr	r3, [pc, #28]	; (4cb0 <wdt_init+0x48>)
    4c92:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    4c94:	687b      	ldr	r3, [r7, #4]
    4c96:	683a      	ldr	r2, [r7, #0]
    4c98:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	4618      	mov	r0, r3
    4c9e:	4b05      	ldr	r3, [pc, #20]	; (4cb4 <wdt_init+0x4c>)
    4ca0:	4798      	blx	r3
    4ca2:	4603      	mov	r3, r0
}
    4ca4:	4618      	mov	r0, r3
    4ca6:	3708      	adds	r7, #8
    4ca8:	46bd      	mov	sp, r7
    4caa:	bd80      	pop	{r7, pc}
    4cac:	0001f878 	.word	0x0001f878
    4cb0:	0000799d 	.word	0x0000799d
    4cb4:	0000fd99 	.word	0x0000fd99

00004cb8 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    4cb8:	b580      	push	{r7, lr}
    4cba:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    4cbc:	4804      	ldr	r0, [pc, #16]	; (4cd0 <CRC_CALC_init+0x18>)
    4cbe:	4b05      	ldr	r3, [pc, #20]	; (4cd4 <CRC_CALC_init+0x1c>)
    4cc0:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    4cc2:	4905      	ldr	r1, [pc, #20]	; (4cd8 <CRC_CALC_init+0x20>)
    4cc4:	4805      	ldr	r0, [pc, #20]	; (4cdc <CRC_CALC_init+0x24>)
    4cc6:	4b06      	ldr	r3, [pc, #24]	; (4ce0 <CRC_CALC_init+0x28>)
    4cc8:	4798      	blx	r3
}
    4cca:	bf00      	nop
    4ccc:	bd80      	pop	{r7, pc}
    4cce:	bf00      	nop
    4cd0:	40000800 	.word	0x40000800
    4cd4:	000044fb 	.word	0x000044fb
    4cd8:	41002000 	.word	0x41002000
    4cdc:	2000a728 	.word	0x2000a728
    4ce0:	00005f8d 	.word	0x00005f8d

00004ce4 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    4ce4:	b580      	push	{r7, lr}
    4ce6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4ce8:	2244      	movs	r2, #68	; 0x44
    4cea:	2104      	movs	r1, #4
    4cec:	4832      	ldr	r0, [pc, #200]	; (4db8 <EXTERNAL_IRQ_0_init+0xd4>)
    4cee:	4b33      	ldr	r3, [pc, #204]	; (4dbc <EXTERNAL_IRQ_0_init+0xd8>)
    4cf0:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    4cf2:	4833      	ldr	r0, [pc, #204]	; (4dc0 <EXTERNAL_IRQ_0_init+0xdc>)
    4cf4:	4b33      	ldr	r3, [pc, #204]	; (4dc4 <EXTERNAL_IRQ_0_init+0xe0>)
    4cf6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    4cf8:	2101      	movs	r1, #1
    4cfa:	2040      	movs	r0, #64	; 0x40
    4cfc:	4b32      	ldr	r3, [pc, #200]	; (4dc8 <EXTERNAL_IRQ_0_init+0xe4>)
    4cfe:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    4d00:	2100      	movs	r1, #0
    4d02:	2040      	movs	r0, #64	; 0x40
    4d04:	4b31      	ldr	r3, [pc, #196]	; (4dcc <EXTERNAL_IRQ_0_init+0xe8>)
    4d06:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    4d08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4d0c:	2040      	movs	r0, #64	; 0x40
    4d0e:	4b30      	ldr	r3, [pc, #192]	; (4dd0 <EXTERNAL_IRQ_0_init+0xec>)
    4d10:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    4d12:	2101      	movs	r1, #1
    4d14:	2004      	movs	r0, #4
    4d16:	4b2c      	ldr	r3, [pc, #176]	; (4dc8 <EXTERNAL_IRQ_0_init+0xe4>)
    4d18:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    4d1a:	2102      	movs	r1, #2
    4d1c:	2004      	movs	r0, #4
    4d1e:	4b2b      	ldr	r3, [pc, #172]	; (4dcc <EXTERNAL_IRQ_0_init+0xe8>)
    4d20:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    4d22:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    4d26:	2004      	movs	r0, #4
    4d28:	4b29      	ldr	r3, [pc, #164]	; (4dd0 <EXTERNAL_IRQ_0_init+0xec>)
    4d2a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    4d2c:	2101      	movs	r1, #1
    4d2e:	2005      	movs	r0, #5
    4d30:	4b25      	ldr	r3, [pc, #148]	; (4dc8 <EXTERNAL_IRQ_0_init+0xe4>)
    4d32:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    4d34:	2102      	movs	r1, #2
    4d36:	2005      	movs	r0, #5
    4d38:	4b24      	ldr	r3, [pc, #144]	; (4dcc <EXTERNAL_IRQ_0_init+0xe8>)
    4d3a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    4d3c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    4d40:	2005      	movs	r0, #5
    4d42:	4b23      	ldr	r3, [pc, #140]	; (4dd0 <EXTERNAL_IRQ_0_init+0xec>)
    4d44:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    4d46:	2101      	movs	r1, #1
    4d48:	2056      	movs	r0, #86	; 0x56
    4d4a:	4b1f      	ldr	r3, [pc, #124]	; (4dc8 <EXTERNAL_IRQ_0_init+0xe4>)
    4d4c:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    4d4e:	2102      	movs	r1, #2
    4d50:	2056      	movs	r0, #86	; 0x56
    4d52:	4b1e      	ldr	r3, [pc, #120]	; (4dcc <EXTERNAL_IRQ_0_init+0xe8>)
    4d54:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    4d56:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    4d5a:	2056      	movs	r0, #86	; 0x56
    4d5c:	4b1c      	ldr	r3, [pc, #112]	; (4dd0 <EXTERNAL_IRQ_0_init+0xec>)
    4d5e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    4d60:	2101      	movs	r1, #1
    4d62:	2057      	movs	r0, #87	; 0x57
    4d64:	4b18      	ldr	r3, [pc, #96]	; (4dc8 <EXTERNAL_IRQ_0_init+0xe4>)
    4d66:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    4d68:	2102      	movs	r1, #2
    4d6a:	2057      	movs	r0, #87	; 0x57
    4d6c:	4b17      	ldr	r3, [pc, #92]	; (4dcc <EXTERNAL_IRQ_0_init+0xe8>)
    4d6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    4d70:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    4d74:	2057      	movs	r0, #87	; 0x57
    4d76:	4b16      	ldr	r3, [pc, #88]	; (4dd0 <EXTERNAL_IRQ_0_init+0xec>)
    4d78:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    4d7a:	2101      	movs	r1, #1
    4d7c:	2028      	movs	r0, #40	; 0x28
    4d7e:	4b12      	ldr	r3, [pc, #72]	; (4dc8 <EXTERNAL_IRQ_0_init+0xe4>)
    4d80:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    4d82:	2100      	movs	r1, #0
    4d84:	2028      	movs	r0, #40	; 0x28
    4d86:	4b11      	ldr	r3, [pc, #68]	; (4dcc <EXTERNAL_IRQ_0_init+0xe8>)
    4d88:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    4d8a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    4d8e:	2028      	movs	r0, #40	; 0x28
    4d90:	4b0f      	ldr	r3, [pc, #60]	; (4dd0 <EXTERNAL_IRQ_0_init+0xec>)
    4d92:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    4d94:	2101      	movs	r1, #1
    4d96:	2029      	movs	r0, #41	; 0x29
    4d98:	4b0b      	ldr	r3, [pc, #44]	; (4dc8 <EXTERNAL_IRQ_0_init+0xe4>)
    4d9a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    4d9c:	2100      	movs	r1, #0
    4d9e:	2029      	movs	r0, #41	; 0x29
    4da0:	4b0a      	ldr	r3, [pc, #40]	; (4dcc <EXTERNAL_IRQ_0_init+0xe8>)
    4da2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    4da4:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    4da8:	2029      	movs	r0, #41	; 0x29
    4daa:	4b09      	ldr	r3, [pc, #36]	; (4dd0 <EXTERNAL_IRQ_0_init+0xec>)
    4dac:	4798      	blx	r3

	ext_irq_init();
    4dae:	4b09      	ldr	r3, [pc, #36]	; (4dd4 <EXTERNAL_IRQ_0_init+0xf0>)
    4db0:	4798      	blx	r3
}
    4db2:	bf00      	nop
    4db4:	bd80      	pop	{r7, pc}
    4db6:	bf00      	nop
    4db8:	40001c00 	.word	0x40001c00
    4dbc:	00004375 	.word	0x00004375
    4dc0:	40000800 	.word	0x40000800
    4dc4:	0000445b 	.word	0x0000445b
    4dc8:	00004be9 	.word	0x00004be9
    4dcc:	00004b95 	.word	0x00004b95
    4dd0:	00004bc9 	.word	0x00004bc9
    4dd4:	000060f1 	.word	0x000060f1

00004dd8 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    4dd8:	b580      	push	{r7, lr}
    4dda:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4ddc:	2244      	movs	r2, #68	; 0x44
    4dde:	210b      	movs	r1, #11
    4de0:	4807      	ldr	r0, [pc, #28]	; (4e00 <EVENT_SYSTEM_0_init+0x28>)
    4de2:	4b08      	ldr	r3, [pc, #32]	; (4e04 <EVENT_SYSTEM_0_init+0x2c>)
    4de4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4de6:	2244      	movs	r2, #68	; 0x44
    4de8:	210c      	movs	r1, #12
    4dea:	4805      	ldr	r0, [pc, #20]	; (4e00 <EVENT_SYSTEM_0_init+0x28>)
    4dec:	4b05      	ldr	r3, [pc, #20]	; (4e04 <EVENT_SYSTEM_0_init+0x2c>)
    4dee:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    4df0:	4805      	ldr	r0, [pc, #20]	; (4e08 <EVENT_SYSTEM_0_init+0x30>)
    4df2:	4b06      	ldr	r3, [pc, #24]	; (4e0c <EVENT_SYSTEM_0_init+0x34>)
    4df4:	4798      	blx	r3

	event_system_init();
    4df6:	4b06      	ldr	r3, [pc, #24]	; (4e10 <EVENT_SYSTEM_0_init+0x38>)
    4df8:	4798      	blx	r3
}
    4dfa:	bf00      	nop
    4dfc:	bd80      	pop	{r7, pc}
    4dfe:	bf00      	nop
    4e00:	40001c00 	.word	0x40001c00
    4e04:	00004375 	.word	0x00004375
    4e08:	40000800 	.word	0x40000800
    4e0c:	0000451b 	.word	0x0000451b
    4e10:	000060dd 	.word	0x000060dd

00004e14 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    4e14:	b580      	push	{r7, lr}
    4e16:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    4e18:	2101      	movs	r1, #1
    4e1a:	202b      	movs	r0, #43	; 0x2b
    4e1c:	4b2b      	ldr	r3, [pc, #172]	; (4ecc <QSPI_N25Q256_PORT_init+0xb8>)
    4e1e:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    4e20:	2100      	movs	r1, #0
    4e22:	202b      	movs	r0, #43	; 0x2b
    4e24:	4b2a      	ldr	r3, [pc, #168]	; (4ed0 <QSPI_N25Q256_PORT_init+0xbc>)
    4e26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    4e28:	492a      	ldr	r1, [pc, #168]	; (4ed4 <QSPI_N25Q256_PORT_init+0xc0>)
    4e2a:	202b      	movs	r0, #43	; 0x2b
    4e2c:	4b2a      	ldr	r3, [pc, #168]	; (4ed8 <QSPI_N25Q256_PORT_init+0xc4>)
    4e2e:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    4e30:	2102      	movs	r1, #2
    4e32:	2008      	movs	r0, #8
    4e34:	4b25      	ldr	r3, [pc, #148]	; (4ecc <QSPI_N25Q256_PORT_init+0xb8>)
    4e36:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    4e38:	2100      	movs	r1, #0
    4e3a:	2008      	movs	r0, #8
    4e3c:	4b27      	ldr	r3, [pc, #156]	; (4edc <QSPI_N25Q256_PORT_init+0xc8>)
    4e3e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    4e40:	2100      	movs	r1, #0
    4e42:	2008      	movs	r0, #8
    4e44:	4b22      	ldr	r3, [pc, #136]	; (4ed0 <QSPI_N25Q256_PORT_init+0xbc>)
    4e46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    4e48:	4925      	ldr	r1, [pc, #148]	; (4ee0 <QSPI_N25Q256_PORT_init+0xcc>)
    4e4a:	2008      	movs	r0, #8
    4e4c:	4b22      	ldr	r3, [pc, #136]	; (4ed8 <QSPI_N25Q256_PORT_init+0xc4>)
    4e4e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    4e50:	2102      	movs	r1, #2
    4e52:	2009      	movs	r0, #9
    4e54:	4b1d      	ldr	r3, [pc, #116]	; (4ecc <QSPI_N25Q256_PORT_init+0xb8>)
    4e56:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    4e58:	2100      	movs	r1, #0
    4e5a:	2009      	movs	r0, #9
    4e5c:	4b1f      	ldr	r3, [pc, #124]	; (4edc <QSPI_N25Q256_PORT_init+0xc8>)
    4e5e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    4e60:	2100      	movs	r1, #0
    4e62:	2009      	movs	r0, #9
    4e64:	4b1a      	ldr	r3, [pc, #104]	; (4ed0 <QSPI_N25Q256_PORT_init+0xbc>)
    4e66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    4e68:	491e      	ldr	r1, [pc, #120]	; (4ee4 <QSPI_N25Q256_PORT_init+0xd0>)
    4e6a:	2009      	movs	r0, #9
    4e6c:	4b1a      	ldr	r3, [pc, #104]	; (4ed8 <QSPI_N25Q256_PORT_init+0xc4>)
    4e6e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    4e70:	2102      	movs	r1, #2
    4e72:	200a      	movs	r0, #10
    4e74:	4b15      	ldr	r3, [pc, #84]	; (4ecc <QSPI_N25Q256_PORT_init+0xb8>)
    4e76:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    4e78:	2100      	movs	r1, #0
    4e7a:	200a      	movs	r0, #10
    4e7c:	4b17      	ldr	r3, [pc, #92]	; (4edc <QSPI_N25Q256_PORT_init+0xc8>)
    4e7e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    4e80:	2100      	movs	r1, #0
    4e82:	200a      	movs	r0, #10
    4e84:	4b12      	ldr	r3, [pc, #72]	; (4ed0 <QSPI_N25Q256_PORT_init+0xbc>)
    4e86:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    4e88:	4917      	ldr	r1, [pc, #92]	; (4ee8 <QSPI_N25Q256_PORT_init+0xd4>)
    4e8a:	200a      	movs	r0, #10
    4e8c:	4b12      	ldr	r3, [pc, #72]	; (4ed8 <QSPI_N25Q256_PORT_init+0xc4>)
    4e8e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    4e90:	2102      	movs	r1, #2
    4e92:	200b      	movs	r0, #11
    4e94:	4b0d      	ldr	r3, [pc, #52]	; (4ecc <QSPI_N25Q256_PORT_init+0xb8>)
    4e96:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    4e98:	2100      	movs	r1, #0
    4e9a:	200b      	movs	r0, #11
    4e9c:	4b0f      	ldr	r3, [pc, #60]	; (4edc <QSPI_N25Q256_PORT_init+0xc8>)
    4e9e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    4ea0:	2100      	movs	r1, #0
    4ea2:	200b      	movs	r0, #11
    4ea4:	4b0a      	ldr	r3, [pc, #40]	; (4ed0 <QSPI_N25Q256_PORT_init+0xbc>)
    4ea6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    4ea8:	4910      	ldr	r1, [pc, #64]	; (4eec <QSPI_N25Q256_PORT_init+0xd8>)
    4eaa:	200b      	movs	r0, #11
    4eac:	4b0a      	ldr	r3, [pc, #40]	; (4ed8 <QSPI_N25Q256_PORT_init+0xc4>)
    4eae:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    4eb0:	2101      	movs	r1, #1
    4eb2:	202a      	movs	r0, #42	; 0x2a
    4eb4:	4b05      	ldr	r3, [pc, #20]	; (4ecc <QSPI_N25Q256_PORT_init+0xb8>)
    4eb6:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    4eb8:	2100      	movs	r1, #0
    4eba:	202a      	movs	r0, #42	; 0x2a
    4ebc:	4b04      	ldr	r3, [pc, #16]	; (4ed0 <QSPI_N25Q256_PORT_init+0xbc>)
    4ebe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    4ec0:	490b      	ldr	r1, [pc, #44]	; (4ef0 <QSPI_N25Q256_PORT_init+0xdc>)
    4ec2:	202a      	movs	r0, #42	; 0x2a
    4ec4:	4b04      	ldr	r3, [pc, #16]	; (4ed8 <QSPI_N25Q256_PORT_init+0xc4>)
    4ec6:	4798      	blx	r3
}
    4ec8:	bf00      	nop
    4eca:	bd80      	pop	{r7, pc}
    4ecc:	00004be9 	.word	0x00004be9
    4ed0:	00004b95 	.word	0x00004b95
    4ed4:	002b0007 	.word	0x002b0007
    4ed8:	00004bc9 	.word	0x00004bc9
    4edc:	00004c21 	.word	0x00004c21
    4ee0:	00080007 	.word	0x00080007
    4ee4:	00090007 	.word	0x00090007
    4ee8:	000a0007 	.word	0x000a0007
    4eec:	000b0007 	.word	0x000b0007
    4ef0:	002a0007 	.word	0x002a0007

00004ef4 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    4ef4:	b580      	push	{r7, lr}
    4ef6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    4ef8:	4805      	ldr	r0, [pc, #20]	; (4f10 <QSPI_N25Q256_CLOCK_init+0x1c>)
    4efa:	4b06      	ldr	r3, [pc, #24]	; (4f14 <QSPI_N25Q256_CLOCK_init+0x20>)
    4efc:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    4efe:	4804      	ldr	r0, [pc, #16]	; (4f10 <QSPI_N25Q256_CLOCK_init+0x1c>)
    4f00:	4b05      	ldr	r3, [pc, #20]	; (4f18 <QSPI_N25Q256_CLOCK_init+0x24>)
    4f02:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    4f04:	4802      	ldr	r0, [pc, #8]	; (4f10 <QSPI_N25Q256_CLOCK_init+0x1c>)
    4f06:	4b05      	ldr	r3, [pc, #20]	; (4f1c <QSPI_N25Q256_CLOCK_init+0x28>)
    4f08:	4798      	blx	r3
}
    4f0a:	bf00      	nop
    4f0c:	bd80      	pop	{r7, pc}
    4f0e:	bf00      	nop
    4f10:	40000800 	.word	0x40000800
    4f14:	000043bb 	.word	0x000043bb
    4f18:	000043fb 	.word	0x000043fb
    4f1c:	000045fb 	.word	0x000045fb

00004f20 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    4f20:	b580      	push	{r7, lr}
    4f22:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    4f24:	4b04      	ldr	r3, [pc, #16]	; (4f38 <QSPI_N25Q256_init+0x18>)
    4f26:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    4f28:	4904      	ldr	r1, [pc, #16]	; (4f3c <QSPI_N25Q256_init+0x1c>)
    4f2a:	4805      	ldr	r0, [pc, #20]	; (4f40 <QSPI_N25Q256_init+0x20>)
    4f2c:	4b05      	ldr	r3, [pc, #20]	; (4f44 <QSPI_N25Q256_init+0x24>)
    4f2e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    4f30:	4b05      	ldr	r3, [pc, #20]	; (4f48 <QSPI_N25Q256_init+0x28>)
    4f32:	4798      	blx	r3
}
    4f34:	bf00      	nop
    4f36:	bd80      	pop	{r7, pc}
    4f38:	00004ef5 	.word	0x00004ef5
    4f3c:	42003400 	.word	0x42003400
    4f40:	2000a57c 	.word	0x2000a57c
    4f44:	000067f9 	.word	0x000067f9
    4f48:	00004e15 	.word	0x00004e15

00004f4c <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    4f4c:	b580      	push	{r7, lr}
    4f4e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    4f50:	4802      	ldr	r0, [pc, #8]	; (4f5c <DATETIME_CLOCK_CLOCK_init+0x10>)
    4f52:	4b03      	ldr	r3, [pc, #12]	; (4f60 <DATETIME_CLOCK_CLOCK_init+0x14>)
    4f54:	4798      	blx	r3
}
    4f56:	bf00      	nop
    4f58:	bd80      	pop	{r7, pc}
    4f5a:	bf00      	nop
    4f5c:	40000800 	.word	0x40000800
    4f60:	0000443b 	.word	0x0000443b

00004f64 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    4f64:	b580      	push	{r7, lr}
    4f66:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    4f68:	4b03      	ldr	r3, [pc, #12]	; (4f78 <DATETIME_CLOCK_init+0x14>)
    4f6a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    4f6c:	4903      	ldr	r1, [pc, #12]	; (4f7c <DATETIME_CLOCK_init+0x18>)
    4f6e:	4804      	ldr	r0, [pc, #16]	; (4f80 <DATETIME_CLOCK_init+0x1c>)
    4f70:	4b04      	ldr	r3, [pc, #16]	; (4f84 <DATETIME_CLOCK_init+0x20>)
    4f72:	4798      	blx	r3
}
    4f74:	bf00      	nop
    4f76:	bd80      	pop	{r7, pc}
    4f78:	00004f4d 	.word	0x00004f4d
    4f7c:	40002400 	.word	0x40002400
    4f80:	2000a704 	.word	0x2000a704
    4f84:	00005c91 	.word	0x00005c91

00004f88 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    4f88:	b580      	push	{r7, lr}
    4f8a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA16,
    4f8c:	2100      	movs	r1, #0
    4f8e:	2010      	movs	r0, #16
    4f90:	4b11      	ldr	r3, [pc, #68]	; (4fd8 <SPI_MEMORIES_PORT_init+0x50>)
    4f92:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
    4f94:	2102      	movs	r1, #2
    4f96:	2010      	movs	r0, #16
    4f98:	4b10      	ldr	r3, [pc, #64]	; (4fdc <SPI_MEMORIES_PORT_init+0x54>)
    4f9a:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    4f9c:	4910      	ldr	r1, [pc, #64]	; (4fe0 <SPI_MEMORIES_PORT_init+0x58>)
    4f9e:	2010      	movs	r0, #16
    4fa0:	4b10      	ldr	r3, [pc, #64]	; (4fe4 <SPI_MEMORIES_PORT_init+0x5c>)
    4fa2:	4798      	blx	r3

	gpio_set_pin_level(PA17,
    4fa4:	2100      	movs	r1, #0
    4fa6:	2011      	movs	r0, #17
    4fa8:	4b0b      	ldr	r3, [pc, #44]	; (4fd8 <SPI_MEMORIES_PORT_init+0x50>)
    4faa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA17, GPIO_DIRECTION_OUT);
    4fac:	2102      	movs	r1, #2
    4fae:	2011      	movs	r0, #17
    4fb0:	4b0a      	ldr	r3, [pc, #40]	; (4fdc <SPI_MEMORIES_PORT_init+0x54>)
    4fb2:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    4fb4:	490c      	ldr	r1, [pc, #48]	; (4fe8 <SPI_MEMORIES_PORT_init+0x60>)
    4fb6:	2011      	movs	r0, #17
    4fb8:	4b0a      	ldr	r3, [pc, #40]	; (4fe4 <SPI_MEMORIES_PORT_init+0x5c>)
    4fba:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    4fbc:	2101      	movs	r1, #1
    4fbe:	2012      	movs	r0, #18
    4fc0:	4b06      	ldr	r3, [pc, #24]	; (4fdc <SPI_MEMORIES_PORT_init+0x54>)
    4fc2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    4fc4:	2100      	movs	r1, #0
    4fc6:	2012      	movs	r0, #18
    4fc8:	4b08      	ldr	r3, [pc, #32]	; (4fec <SPI_MEMORIES_PORT_init+0x64>)
    4fca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    4fcc:	4908      	ldr	r1, [pc, #32]	; (4ff0 <SPI_MEMORIES_PORT_init+0x68>)
    4fce:	2012      	movs	r0, #18
    4fd0:	4b04      	ldr	r3, [pc, #16]	; (4fe4 <SPI_MEMORIES_PORT_init+0x5c>)
    4fd2:	4798      	blx	r3
}
    4fd4:	bf00      	nop
    4fd6:	bd80      	pop	{r7, pc}
    4fd8:	00004c21 	.word	0x00004c21
    4fdc:	00004be9 	.word	0x00004be9
    4fe0:	00100002 	.word	0x00100002
    4fe4:	00004bc9 	.word	0x00004bc9
    4fe8:	00110002 	.word	0x00110002
    4fec:	00004b95 	.word	0x00004b95
    4ff0:	00120002 	.word	0x00120002

00004ff4 <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    4ff4:	b580      	push	{r7, lr}
    4ff6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    4ff8:	2245      	movs	r2, #69	; 0x45
    4ffa:	2108      	movs	r1, #8
    4ffc:	4806      	ldr	r0, [pc, #24]	; (5018 <SPI_MEMORIES_CLOCK_init+0x24>)
    4ffe:	4b07      	ldr	r3, [pc, #28]	; (501c <SPI_MEMORIES_CLOCK_init+0x28>)
    5000:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5002:	224a      	movs	r2, #74	; 0x4a
    5004:	2103      	movs	r1, #3
    5006:	4804      	ldr	r0, [pc, #16]	; (5018 <SPI_MEMORIES_CLOCK_init+0x24>)
    5008:	4b04      	ldr	r3, [pc, #16]	; (501c <SPI_MEMORIES_CLOCK_init+0x28>)
    500a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    500c:	4804      	ldr	r0, [pc, #16]	; (5020 <SPI_MEMORIES_CLOCK_init+0x2c>)
    500e:	4b05      	ldr	r3, [pc, #20]	; (5024 <SPI_MEMORIES_CLOCK_init+0x30>)
    5010:	4798      	blx	r3
}
    5012:	bf00      	nop
    5014:	bd80      	pop	{r7, pc}
    5016:	bf00      	nop
    5018:	40001c00 	.word	0x40001c00
    501c:	00004375 	.word	0x00004375
    5020:	40000800 	.word	0x40000800
    5024:	0000447b 	.word	0x0000447b

00005028 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    5028:	b580      	push	{r7, lr}
    502a:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    502c:	4b04      	ldr	r3, [pc, #16]	; (5040 <SPI_MEMORIES_init+0x18>)
    502e:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM1);
    5030:	4904      	ldr	r1, [pc, #16]	; (5044 <SPI_MEMORIES_init+0x1c>)
    5032:	4805      	ldr	r0, [pc, #20]	; (5048 <SPI_MEMORIES_init+0x20>)
    5034:	4b05      	ldr	r3, [pc, #20]	; (504c <SPI_MEMORIES_init+0x24>)
    5036:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    5038:	4b05      	ldr	r3, [pc, #20]	; (5050 <SPI_MEMORIES_init+0x28>)
    503a:	4798      	blx	r3
}
    503c:	bf00      	nop
    503e:	bd80      	pop	{r7, pc}
    5040:	00004ff5 	.word	0x00004ff5
    5044:	40003400 	.word	0x40003400
    5048:	2000a514 	.word	0x2000a514
    504c:	00006909 	.word	0x00006909
    5050:	00004f89 	.word	0x00004f89

00005054 <I2C_SHARED_PORT_init>:

void I2C_SHARED_PORT_init(void)
{
    5054:	b580      	push	{r7, lr}
    5056:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA12,
    5058:	2100      	movs	r1, #0
    505a:	200c      	movs	r0, #12
    505c:	4b07      	ldr	r3, [pc, #28]	; (507c <I2C_SHARED_PORT_init+0x28>)
    505e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);
    5060:	4907      	ldr	r1, [pc, #28]	; (5080 <I2C_SHARED_PORT_init+0x2c>)
    5062:	200c      	movs	r0, #12
    5064:	4b07      	ldr	r3, [pc, #28]	; (5084 <I2C_SHARED_PORT_init+0x30>)
    5066:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA13,
    5068:	2100      	movs	r1, #0
    506a:	200d      	movs	r0, #13
    506c:	4b03      	ldr	r3, [pc, #12]	; (507c <I2C_SHARED_PORT_init+0x28>)
    506e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
    5070:	4905      	ldr	r1, [pc, #20]	; (5088 <I2C_SHARED_PORT_init+0x34>)
    5072:	200d      	movs	r0, #13
    5074:	4b03      	ldr	r3, [pc, #12]	; (5084 <I2C_SHARED_PORT_init+0x30>)
    5076:	4798      	blx	r3
}
    5078:	bf00      	nop
    507a:	bd80      	pop	{r7, pc}
    507c:	00004b95 	.word	0x00004b95
    5080:	000c0002 	.word	0x000c0002
    5084:	00004bc9 	.word	0x00004bc9
    5088:	000d0002 	.word	0x000d0002

0000508c <I2C_SHARED_CLOCK_init>:

void I2C_SHARED_CLOCK_init(void)
{
    508c:	b580      	push	{r7, lr}
    508e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5090:	2242      	movs	r2, #66	; 0x42
    5092:	2117      	movs	r1, #23
    5094:	4806      	ldr	r0, [pc, #24]	; (50b0 <I2C_SHARED_CLOCK_init+0x24>)
    5096:	4b07      	ldr	r3, [pc, #28]	; (50b4 <I2C_SHARED_CLOCK_init+0x28>)
    5098:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    509a:	224a      	movs	r2, #74	; 0x4a
    509c:	2103      	movs	r1, #3
    509e:	4804      	ldr	r0, [pc, #16]	; (50b0 <I2C_SHARED_CLOCK_init+0x24>)
    50a0:	4b04      	ldr	r3, [pc, #16]	; (50b4 <I2C_SHARED_CLOCK_init+0x28>)
    50a2:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
    50a4:	4804      	ldr	r0, [pc, #16]	; (50b8 <I2C_SHARED_CLOCK_init+0x2c>)
    50a6:	4b05      	ldr	r3, [pc, #20]	; (50bc <I2C_SHARED_CLOCK_init+0x30>)
    50a8:	4798      	blx	r3
}
    50aa:	bf00      	nop
    50ac:	bd80      	pop	{r7, pc}
    50ae:	bf00      	nop
    50b0:	40001c00 	.word	0x40001c00
    50b4:	00004375 	.word	0x00004375
    50b8:	40000800 	.word	0x40000800
    50bc:	0000453b 	.word	0x0000453b

000050c0 <I2C_SHARED_init>:

void I2C_SHARED_init(void)
{
    50c0:	b580      	push	{r7, lr}
    50c2:	af00      	add	r7, sp, #0
	I2C_SHARED_CLOCK_init();
    50c4:	4b04      	ldr	r3, [pc, #16]	; (50d8 <I2C_SHARED_init+0x18>)
    50c6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SHARED, SERCOM2);
    50c8:	4904      	ldr	r1, [pc, #16]	; (50dc <I2C_SHARED_init+0x1c>)
    50ca:	4805      	ldr	r0, [pc, #20]	; (50e0 <I2C_SHARED_init+0x20>)
    50cc:	4b05      	ldr	r3, [pc, #20]	; (50e4 <I2C_SHARED_init+0x24>)
    50ce:	4798      	blx	r3
	I2C_SHARED_PORT_init();
    50d0:	4b05      	ldr	r3, [pc, #20]	; (50e8 <I2C_SHARED_init+0x28>)
    50d2:	4798      	blx	r3
}
    50d4:	bf00      	nop
    50d6:	bd80      	pop	{r7, pc}
    50d8:	0000508d 	.word	0x0000508d
    50dc:	41012000 	.word	0x41012000
    50e0:	2000a684 	.word	0x2000a684
    50e4:	00006699 	.word	0x00006699
    50e8:	00005055 	.word	0x00005055

000050ec <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    50ec:	b580      	push	{r7, lr}
    50ee:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    50f0:	2100      	movs	r1, #0
    50f2:	203b      	movs	r0, #59	; 0x3b
    50f4:	4b11      	ldr	r3, [pc, #68]	; (513c <SPI_TEMP_PORT_init+0x50>)
    50f6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    50f8:	2102      	movs	r1, #2
    50fa:	203b      	movs	r0, #59	; 0x3b
    50fc:	4b10      	ldr	r3, [pc, #64]	; (5140 <SPI_TEMP_PORT_init+0x54>)
    50fe:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    5100:	4910      	ldr	r1, [pc, #64]	; (5144 <SPI_TEMP_PORT_init+0x58>)
    5102:	203b      	movs	r0, #59	; 0x3b
    5104:	4b10      	ldr	r3, [pc, #64]	; (5148 <SPI_TEMP_PORT_init+0x5c>)
    5106:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    5108:	2100      	movs	r1, #0
    510a:	203a      	movs	r0, #58	; 0x3a
    510c:	4b0b      	ldr	r3, [pc, #44]	; (513c <SPI_TEMP_PORT_init+0x50>)
    510e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    5110:	2102      	movs	r1, #2
    5112:	203a      	movs	r0, #58	; 0x3a
    5114:	4b0a      	ldr	r3, [pc, #40]	; (5140 <SPI_TEMP_PORT_init+0x54>)
    5116:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    5118:	490c      	ldr	r1, [pc, #48]	; (514c <SPI_TEMP_PORT_init+0x60>)
    511a:	203a      	movs	r0, #58	; 0x3a
    511c:	4b0a      	ldr	r3, [pc, #40]	; (5148 <SPI_TEMP_PORT_init+0x5c>)
    511e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    5120:	2101      	movs	r1, #1
    5122:	203c      	movs	r0, #60	; 0x3c
    5124:	4b06      	ldr	r3, [pc, #24]	; (5140 <SPI_TEMP_PORT_init+0x54>)
    5126:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    5128:	2100      	movs	r1, #0
    512a:	203c      	movs	r0, #60	; 0x3c
    512c:	4b08      	ldr	r3, [pc, #32]	; (5150 <SPI_TEMP_PORT_init+0x64>)
    512e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    5130:	4908      	ldr	r1, [pc, #32]	; (5154 <SPI_TEMP_PORT_init+0x68>)
    5132:	203c      	movs	r0, #60	; 0x3c
    5134:	4b04      	ldr	r3, [pc, #16]	; (5148 <SPI_TEMP_PORT_init+0x5c>)
    5136:	4798      	blx	r3
}
    5138:	bf00      	nop
    513a:	bd80      	pop	{r7, pc}
    513c:	00004c21 	.word	0x00004c21
    5140:	00004be9 	.word	0x00004be9
    5144:	003b0003 	.word	0x003b0003
    5148:	00004bc9 	.word	0x00004bc9
    514c:	003a0003 	.word	0x003a0003
    5150:	00004b95 	.word	0x00004b95
    5154:	003c0003 	.word	0x003c0003

00005158 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    5158:	b580      	push	{r7, lr}
    515a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    515c:	2245      	movs	r2, #69	; 0x45
    515e:	2122      	movs	r1, #34	; 0x22
    5160:	4806      	ldr	r0, [pc, #24]	; (517c <SPI_TEMP_CLOCK_init+0x24>)
    5162:	4b07      	ldr	r3, [pc, #28]	; (5180 <SPI_TEMP_CLOCK_init+0x28>)
    5164:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5166:	224a      	movs	r2, #74	; 0x4a
    5168:	2103      	movs	r1, #3
    516a:	4804      	ldr	r0, [pc, #16]	; (517c <SPI_TEMP_CLOCK_init+0x24>)
    516c:	4b04      	ldr	r3, [pc, #16]	; (5180 <SPI_TEMP_CLOCK_init+0x28>)
    516e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    5170:	4804      	ldr	r0, [pc, #16]	; (5184 <SPI_TEMP_CLOCK_init+0x2c>)
    5172:	4b05      	ldr	r3, [pc, #20]	; (5188 <SPI_TEMP_CLOCK_init+0x30>)
    5174:	4798      	blx	r3
}
    5176:	bf00      	nop
    5178:	bd80      	pop	{r7, pc}
    517a:	bf00      	nop
    517c:	40001c00 	.word	0x40001c00
    5180:	00004375 	.word	0x00004375
    5184:	40000800 	.word	0x40000800
    5188:	0000461b 	.word	0x0000461b

0000518c <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    518c:	b580      	push	{r7, lr}
    518e:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    5190:	4b05      	ldr	r3, [pc, #20]	; (51a8 <SPI_TEMP_init+0x1c>)
    5192:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    5194:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    5198:	4804      	ldr	r0, [pc, #16]	; (51ac <SPI_TEMP_init+0x20>)
    519a:	4b05      	ldr	r3, [pc, #20]	; (51b0 <SPI_TEMP_init+0x24>)
    519c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    519e:	4b05      	ldr	r3, [pc, #20]	; (51b4 <SPI_TEMP_init+0x28>)
    51a0:	4798      	blx	r3
}
    51a2:	bf00      	nop
    51a4:	bd80      	pop	{r7, pc}
    51a6:	bf00      	nop
    51a8:	00005159 	.word	0x00005159
    51ac:	2000a544 	.word	0x2000a544
    51b0:	00006909 	.word	0x00006909
    51b4:	000050ed 	.word	0x000050ed

000051b8 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    51b8:	b580      	push	{r7, lr}
    51ba:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    51bc:	2100      	movs	r1, #0
    51be:	2017      	movs	r0, #23
    51c0:	4b07      	ldr	r3, [pc, #28]	; (51e0 <I2C_EXPANDER_PORT_init+0x28>)
    51c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    51c4:	4907      	ldr	r1, [pc, #28]	; (51e4 <I2C_EXPANDER_PORT_init+0x2c>)
    51c6:	2017      	movs	r0, #23
    51c8:	4b07      	ldr	r3, [pc, #28]	; (51e8 <I2C_EXPANDER_PORT_init+0x30>)
    51ca:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    51cc:	2100      	movs	r1, #0
    51ce:	2016      	movs	r0, #22
    51d0:	4b03      	ldr	r3, [pc, #12]	; (51e0 <I2C_EXPANDER_PORT_init+0x28>)
    51d2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    51d4:	4905      	ldr	r1, [pc, #20]	; (51ec <I2C_EXPANDER_PORT_init+0x34>)
    51d6:	2016      	movs	r0, #22
    51d8:	4b03      	ldr	r3, [pc, #12]	; (51e8 <I2C_EXPANDER_PORT_init+0x30>)
    51da:	4798      	blx	r3
}
    51dc:	bf00      	nop
    51de:	bd80      	pop	{r7, pc}
    51e0:	00004b95 	.word	0x00004b95
    51e4:	00170003 	.word	0x00170003
    51e8:	00004bc9 	.word	0x00004bc9
    51ec:	00160003 	.word	0x00160003

000051f0 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    51f0:	b580      	push	{r7, lr}
    51f2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    51f4:	2242      	movs	r2, #66	; 0x42
    51f6:	2123      	movs	r1, #35	; 0x23
    51f8:	4806      	ldr	r0, [pc, #24]	; (5214 <I2C_EXPANDER_CLOCK_init+0x24>)
    51fa:	4b07      	ldr	r3, [pc, #28]	; (5218 <I2C_EXPANDER_CLOCK_init+0x28>)
    51fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    51fe:	2246      	movs	r2, #70	; 0x46
    5200:	2103      	movs	r1, #3
    5202:	4804      	ldr	r0, [pc, #16]	; (5214 <I2C_EXPANDER_CLOCK_init+0x24>)
    5204:	4b04      	ldr	r3, [pc, #16]	; (5218 <I2C_EXPANDER_CLOCK_init+0x28>)
    5206:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    5208:	4804      	ldr	r0, [pc, #16]	; (521c <I2C_EXPANDER_CLOCK_init+0x2c>)
    520a:	4b05      	ldr	r3, [pc, #20]	; (5220 <I2C_EXPANDER_CLOCK_init+0x30>)
    520c:	4798      	blx	r3
}
    520e:	bf00      	nop
    5210:	bd80      	pop	{r7, pc}
    5212:	bf00      	nop
    5214:	40001c00 	.word	0x40001c00
    5218:	00004375 	.word	0x00004375
    521c:	40000800 	.word	0x40000800
    5220:	0000463b 	.word	0x0000463b

00005224 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    5224:	b580      	push	{r7, lr}
    5226:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    5228:	4b04      	ldr	r3, [pc, #16]	; (523c <I2C_EXPANDER_init+0x18>)
    522a:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    522c:	4904      	ldr	r1, [pc, #16]	; (5240 <I2C_EXPANDER_init+0x1c>)
    522e:	4805      	ldr	r0, [pc, #20]	; (5244 <I2C_EXPANDER_init+0x20>)
    5230:	4b05      	ldr	r3, [pc, #20]	; (5248 <I2C_EXPANDER_init+0x24>)
    5232:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    5234:	4b05      	ldr	r3, [pc, #20]	; (524c <I2C_EXPANDER_init+0x28>)
    5236:	4798      	blx	r3
}
    5238:	bf00      	nop
    523a:	bd80      	pop	{r7, pc}
    523c:	000051f1 	.word	0x000051f1
    5240:	43000400 	.word	0x43000400
    5244:	2000a644 	.word	0x2000a644
    5248:	00006455 	.word	0x00006455
    524c:	000051b9 	.word	0x000051b9

00005250 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    5250:	b580      	push	{r7, lr}
    5252:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    5254:	2100      	movs	r1, #0
    5256:	2044      	movs	r0, #68	; 0x44
    5258:	4b11      	ldr	r3, [pc, #68]	; (52a0 <SPI_HI3593_PORT_init+0x50>)
    525a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    525c:	2102      	movs	r1, #2
    525e:	2044      	movs	r0, #68	; 0x44
    5260:	4b10      	ldr	r3, [pc, #64]	; (52a4 <SPI_HI3593_PORT_init+0x54>)
    5262:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    5264:	4910      	ldr	r1, [pc, #64]	; (52a8 <SPI_HI3593_PORT_init+0x58>)
    5266:	2044      	movs	r0, #68	; 0x44
    5268:	4b10      	ldr	r3, [pc, #64]	; (52ac <SPI_HI3593_PORT_init+0x5c>)
    526a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    526c:	2100      	movs	r1, #0
    526e:	2045      	movs	r0, #69	; 0x45
    5270:	4b0b      	ldr	r3, [pc, #44]	; (52a0 <SPI_HI3593_PORT_init+0x50>)
    5272:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    5274:	2102      	movs	r1, #2
    5276:	2045      	movs	r0, #69	; 0x45
    5278:	4b0a      	ldr	r3, [pc, #40]	; (52a4 <SPI_HI3593_PORT_init+0x54>)
    527a:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    527c:	490c      	ldr	r1, [pc, #48]	; (52b0 <SPI_HI3593_PORT_init+0x60>)
    527e:	2045      	movs	r0, #69	; 0x45
    5280:	4b0a      	ldr	r3, [pc, #40]	; (52ac <SPI_HI3593_PORT_init+0x5c>)
    5282:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    5284:	2101      	movs	r1, #1
    5286:	2047      	movs	r0, #71	; 0x47
    5288:	4b06      	ldr	r3, [pc, #24]	; (52a4 <SPI_HI3593_PORT_init+0x54>)
    528a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    528c:	2100      	movs	r1, #0
    528e:	2047      	movs	r0, #71	; 0x47
    5290:	4b08      	ldr	r3, [pc, #32]	; (52b4 <SPI_HI3593_PORT_init+0x64>)
    5292:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    5294:	4908      	ldr	r1, [pc, #32]	; (52b8 <SPI_HI3593_PORT_init+0x68>)
    5296:	2047      	movs	r0, #71	; 0x47
    5298:	4b04      	ldr	r3, [pc, #16]	; (52ac <SPI_HI3593_PORT_init+0x5c>)
    529a:	4798      	blx	r3
}
    529c:	bf00      	nop
    529e:	bd80      	pop	{r7, pc}
    52a0:	00004c21 	.word	0x00004c21
    52a4:	00004be9 	.word	0x00004be9
    52a8:	00440002 	.word	0x00440002
    52ac:	00004bc9 	.word	0x00004bc9
    52b0:	00450002 	.word	0x00450002
    52b4:	00004b95 	.word	0x00004b95
    52b8:	00470002 	.word	0x00470002

000052bc <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    52bc:	b580      	push	{r7, lr}
    52be:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    52c0:	2242      	movs	r2, #66	; 0x42
    52c2:	2124      	movs	r1, #36	; 0x24
    52c4:	4806      	ldr	r0, [pc, #24]	; (52e0 <SPI_HI3593_CLOCK_init+0x24>)
    52c6:	4b07      	ldr	r3, [pc, #28]	; (52e4 <SPI_HI3593_CLOCK_init+0x28>)
    52c8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    52ca:	224a      	movs	r2, #74	; 0x4a
    52cc:	2103      	movs	r1, #3
    52ce:	4804      	ldr	r0, [pc, #16]	; (52e0 <SPI_HI3593_CLOCK_init+0x24>)
    52d0:	4b04      	ldr	r3, [pc, #16]	; (52e4 <SPI_HI3593_CLOCK_init+0x28>)
    52d2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    52d4:	4804      	ldr	r0, [pc, #16]	; (52e8 <SPI_HI3593_CLOCK_init+0x2c>)
    52d6:	4b05      	ldr	r3, [pc, #20]	; (52ec <SPI_HI3593_CLOCK_init+0x30>)
    52d8:	4798      	blx	r3
}
    52da:	bf00      	nop
    52dc:	bd80      	pop	{r7, pc}
    52de:	bf00      	nop
    52e0:	40001c00 	.word	0x40001c00
    52e4:	00004375 	.word	0x00004375
    52e8:	40000800 	.word	0x40000800
    52ec:	0000465b 	.word	0x0000465b

000052f0 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    52f0:	b580      	push	{r7, lr}
    52f2:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    52f4:	4b04      	ldr	r3, [pc, #16]	; (5308 <SPI_HI3593_init+0x18>)
    52f6:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    52f8:	4904      	ldr	r1, [pc, #16]	; (530c <SPI_HI3593_init+0x1c>)
    52fa:	4805      	ldr	r0, [pc, #20]	; (5310 <SPI_HI3593_init+0x20>)
    52fc:	4b05      	ldr	r3, [pc, #20]	; (5314 <SPI_HI3593_init+0x24>)
    52fe:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    5300:	4b05      	ldr	r3, [pc, #20]	; (5318 <SPI_HI3593_init+0x28>)
    5302:	4798      	blx	r3
}
    5304:	bf00      	nop
    5306:	bd80      	pop	{r7, pc}
    5308:	000052bd 	.word	0x000052bd
    530c:	43000800 	.word	0x43000800
    5310:	2000a52c 	.word	0x2000a52c
    5314:	00006909 	.word	0x00006909
    5318:	00005251 	.word	0x00005251

0000531c <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    531c:	b580      	push	{r7, lr}
    531e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    5320:	2100      	movs	r1, #0
    5322:	2068      	movs	r0, #104	; 0x68
    5324:	4b07      	ldr	r3, [pc, #28]	; (5344 <I2C_EEPROM_PORT_init+0x28>)
    5326:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    5328:	4907      	ldr	r1, [pc, #28]	; (5348 <I2C_EEPROM_PORT_init+0x2c>)
    532a:	2068      	movs	r0, #104	; 0x68
    532c:	4b07      	ldr	r3, [pc, #28]	; (534c <I2C_EEPROM_PORT_init+0x30>)
    532e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    5330:	2100      	movs	r1, #0
    5332:	2069      	movs	r0, #105	; 0x69
    5334:	4b03      	ldr	r3, [pc, #12]	; (5344 <I2C_EEPROM_PORT_init+0x28>)
    5336:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    5338:	4905      	ldr	r1, [pc, #20]	; (5350 <I2C_EEPROM_PORT_init+0x34>)
    533a:	2069      	movs	r0, #105	; 0x69
    533c:	4b03      	ldr	r3, [pc, #12]	; (534c <I2C_EEPROM_PORT_init+0x30>)
    533e:	4798      	blx	r3
}
    5340:	bf00      	nop
    5342:	bd80      	pop	{r7, pc}
    5344:	00004b95 	.word	0x00004b95
    5348:	00680002 	.word	0x00680002
    534c:	00004bc9 	.word	0x00004bc9
    5350:	00690002 	.word	0x00690002

00005354 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    5354:	b580      	push	{r7, lr}
    5356:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5358:	2248      	movs	r2, #72	; 0x48
    535a:	2125      	movs	r1, #37	; 0x25
    535c:	4806      	ldr	r0, [pc, #24]	; (5378 <I2C_EEPROM_CLOCK_init+0x24>)
    535e:	4b07      	ldr	r3, [pc, #28]	; (537c <I2C_EEPROM_CLOCK_init+0x28>)
    5360:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5362:	224a      	movs	r2, #74	; 0x4a
    5364:	2103      	movs	r1, #3
    5366:	4804      	ldr	r0, [pc, #16]	; (5378 <I2C_EEPROM_CLOCK_init+0x24>)
    5368:	4b04      	ldr	r3, [pc, #16]	; (537c <I2C_EEPROM_CLOCK_init+0x28>)
    536a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    536c:	4804      	ldr	r0, [pc, #16]	; (5380 <I2C_EEPROM_CLOCK_init+0x2c>)
    536e:	4b05      	ldr	r3, [pc, #20]	; (5384 <I2C_EEPROM_CLOCK_init+0x30>)
    5370:	4798      	blx	r3
}
    5372:	bf00      	nop
    5374:	bd80      	pop	{r7, pc}
    5376:	bf00      	nop
    5378:	40001c00 	.word	0x40001c00
    537c:	00004375 	.word	0x00004375
    5380:	40000800 	.word	0x40000800
    5384:	0000467b 	.word	0x0000467b

00005388 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    5388:	b580      	push	{r7, lr}
    538a:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    538c:	4b04      	ldr	r3, [pc, #16]	; (53a0 <I2C_EEPROM_init+0x18>)
    538e:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    5390:	4904      	ldr	r1, [pc, #16]	; (53a4 <I2C_EEPROM_init+0x1c>)
    5392:	4805      	ldr	r0, [pc, #20]	; (53a8 <I2C_EEPROM_init+0x20>)
    5394:	4b05      	ldr	r3, [pc, #20]	; (53ac <I2C_EEPROM_init+0x24>)
    5396:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    5398:	4b05      	ldr	r3, [pc, #20]	; (53b0 <I2C_EEPROM_init+0x28>)
    539a:	4798      	blx	r3
}
    539c:	bf00      	nop
    539e:	bd80      	pop	{r7, pc}
    53a0:	00005355 	.word	0x00005355
    53a4:	43000c00 	.word	0x43000c00
    53a8:	2000a6c4 	.word	0x2000a6c4
    53ac:	00006455 	.word	0x00006455
    53b0:	0000531d 	.word	0x0000531d

000053b4 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    53b4:	b580      	push	{r7, lr}
    53b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    53b8:	4808      	ldr	r0, [pc, #32]	; (53dc <TIMER_USB_init+0x28>)
    53ba:	4b09      	ldr	r3, [pc, #36]	; (53e0 <TIMER_USB_init+0x2c>)
    53bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    53be:	2243      	movs	r2, #67	; 0x43
    53c0:	2109      	movs	r1, #9
    53c2:	4808      	ldr	r0, [pc, #32]	; (53e4 <TIMER_USB_init+0x30>)
    53c4:	4b08      	ldr	r3, [pc, #32]	; (53e8 <TIMER_USB_init+0x34>)
    53c6:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    53c8:	4b08      	ldr	r3, [pc, #32]	; (53ec <TIMER_USB_init+0x38>)
    53ca:	4798      	blx	r3
    53cc:	4603      	mov	r3, r0
    53ce:	461a      	mov	r2, r3
    53d0:	4907      	ldr	r1, [pc, #28]	; (53f0 <TIMER_USB_init+0x3c>)
    53d2:	4808      	ldr	r0, [pc, #32]	; (53f4 <TIMER_USB_init+0x40>)
    53d4:	4b08      	ldr	r3, [pc, #32]	; (53f8 <TIMER_USB_init+0x44>)
    53d6:	4798      	blx	r3
}
    53d8:	bf00      	nop
    53da:	bd80      	pop	{r7, pc}
    53dc:	40000800 	.word	0x40000800
    53e0:	0000449b 	.word	0x0000449b
    53e4:	40001c00 	.word	0x40001c00
    53e8:	00004375 	.word	0x00004375
    53ec:	0000d1dd 	.word	0x0000d1dd
    53f0:	40003800 	.word	0x40003800
    53f4:	2000a624 	.word	0x2000a624
    53f8:	00006b99 	.word	0x00006b99

000053fc <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    53fc:	b480      	push	{r7}
    53fe:	af00      	add	r7, sp, #0
}
    5400:	bf00      	nop
    5402:	46bd      	mov	sp, r7
    5404:	f85d 7b04 	ldr.w	r7, [sp], #4
    5408:	4770      	bx	lr
	...

0000540c <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    540c:	b580      	push	{r7, lr}
    540e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    5410:	4804      	ldr	r0, [pc, #16]	; (5424 <LIVE_PULSE_CLOCK_init+0x18>)
    5412:	4b05      	ldr	r3, [pc, #20]	; (5428 <LIVE_PULSE_CLOCK_init+0x1c>)
    5414:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5416:	2244      	movs	r2, #68	; 0x44
    5418:	2109      	movs	r1, #9
    541a:	4804      	ldr	r0, [pc, #16]	; (542c <LIVE_PULSE_CLOCK_init+0x20>)
    541c:	4b04      	ldr	r3, [pc, #16]	; (5430 <LIVE_PULSE_CLOCK_init+0x24>)
    541e:	4798      	blx	r3
}
    5420:	bf00      	nop
    5422:	bd80      	pop	{r7, pc}
    5424:	40000800 	.word	0x40000800
    5428:	000044bb 	.word	0x000044bb
    542c:	40001c00 	.word	0x40001c00
    5430:	00004375 	.word	0x00004375

00005434 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    5434:	b580      	push	{r7, lr}
    5436:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    5438:	4b06      	ldr	r3, [pc, #24]	; (5454 <LIVE_PULSE_init+0x20>)
    543a:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    543c:	4b06      	ldr	r3, [pc, #24]	; (5458 <LIVE_PULSE_init+0x24>)
    543e:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC1, _tc_get_pwm());
    5440:	4b06      	ldr	r3, [pc, #24]	; (545c <LIVE_PULSE_init+0x28>)
    5442:	4798      	blx	r3
    5444:	4603      	mov	r3, r0
    5446:	461a      	mov	r2, r3
    5448:	4905      	ldr	r1, [pc, #20]	; (5460 <LIVE_PULSE_init+0x2c>)
    544a:	4806      	ldr	r0, [pc, #24]	; (5464 <LIVE_PULSE_init+0x30>)
    544c:	4b06      	ldr	r3, [pc, #24]	; (5468 <LIVE_PULSE_init+0x34>)
    544e:	4798      	blx	r3
}
    5450:	bf00      	nop
    5452:	bd80      	pop	{r7, pc}
    5454:	0000540d 	.word	0x0000540d
    5458:	000053fd 	.word	0x000053fd
    545c:	0000d1f1 	.word	0x0000d1f1
    5460:	40003c00 	.word	0x40003c00
    5464:	2000a5c0 	.word	0x2000a5c0
    5468:	000066f9 	.word	0x000066f9

0000546c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    546c:	b580      	push	{r7, lr}
    546e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    5470:	4808      	ldr	r0, [pc, #32]	; (5494 <TIMER_ARINC_init+0x28>)
    5472:	4b09      	ldr	r3, [pc, #36]	; (5498 <TIMER_ARINC_init+0x2c>)
    5474:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5476:	2244      	movs	r2, #68	; 0x44
    5478:	211a      	movs	r1, #26
    547a:	4808      	ldr	r0, [pc, #32]	; (549c <TIMER_ARINC_init+0x30>)
    547c:	4b08      	ldr	r3, [pc, #32]	; (54a0 <TIMER_ARINC_init+0x34>)
    547e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    5480:	4b08      	ldr	r3, [pc, #32]	; (54a4 <TIMER_ARINC_init+0x38>)
    5482:	4798      	blx	r3
    5484:	4603      	mov	r3, r0
    5486:	461a      	mov	r2, r3
    5488:	4907      	ldr	r1, [pc, #28]	; (54a8 <TIMER_ARINC_init+0x3c>)
    548a:	4808      	ldr	r0, [pc, #32]	; (54ac <TIMER_ARINC_init+0x40>)
    548c:	4b08      	ldr	r3, [pc, #32]	; (54b0 <TIMER_ARINC_init+0x44>)
    548e:	4798      	blx	r3
}
    5490:	bf00      	nop
    5492:	bd80      	pop	{r7, pc}
    5494:	40000800 	.word	0x40000800
    5498:	0000459b 	.word	0x0000459b
    549c:	40001c00 	.word	0x40001c00
    54a0:	00004375 	.word	0x00004375
    54a4:	0000d1dd 	.word	0x0000d1dd
    54a8:	4101a000 	.word	0x4101a000
    54ac:	2000a604 	.word	0x2000a604
    54b0:	00006b99 	.word	0x00006b99

000054b4 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    54b4:	b580      	push	{r7, lr}
    54b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    54b8:	4808      	ldr	r0, [pc, #32]	; (54dc <TIMER_MAINTENANCE_init+0x28>)
    54ba:	4b09      	ldr	r3, [pc, #36]	; (54e0 <TIMER_MAINTENANCE_init+0x2c>)
    54bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    54be:	2246      	movs	r2, #70	; 0x46
    54c0:	211e      	movs	r1, #30
    54c2:	4808      	ldr	r0, [pc, #32]	; (54e4 <TIMER_MAINTENANCE_init+0x30>)
    54c4:	4b08      	ldr	r3, [pc, #32]	; (54e8 <TIMER_MAINTENANCE_init+0x34>)
    54c6:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    54c8:	4b08      	ldr	r3, [pc, #32]	; (54ec <TIMER_MAINTENANCE_init+0x38>)
    54ca:	4798      	blx	r3
    54cc:	4603      	mov	r3, r0
    54ce:	461a      	mov	r2, r3
    54d0:	4907      	ldr	r1, [pc, #28]	; (54f0 <TIMER_MAINTENANCE_init+0x3c>)
    54d2:	4808      	ldr	r0, [pc, #32]	; (54f4 <TIMER_MAINTENANCE_init+0x40>)
    54d4:	4b08      	ldr	r3, [pc, #32]	; (54f8 <TIMER_MAINTENANCE_init+0x44>)
    54d6:	4798      	blx	r3
}
    54d8:	bf00      	nop
    54da:	bd80      	pop	{r7, pc}
    54dc:	40000800 	.word	0x40000800
    54e0:	000045bb 	.word	0x000045bb
    54e4:	40001c00 	.word	0x40001c00
    54e8:	00004375 	.word	0x00004375
    54ec:	0000d1dd 	.word	0x0000d1dd
    54f0:	42001400 	.word	0x42001400
    54f4:	2000a55c 	.word	0x2000a55c
    54f8:	00006b99 	.word	0x00006b99

000054fc <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    54fc:	b580      	push	{r7, lr}
    54fe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    5500:	4808      	ldr	r0, [pc, #32]	; (5524 <TIMER_INTERFACE_init+0x28>)
    5502:	4b09      	ldr	r3, [pc, #36]	; (5528 <TIMER_INTERFACE_init+0x2c>)
    5504:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5506:	2246      	movs	r2, #70	; 0x46
    5508:	211e      	movs	r1, #30
    550a:	4808      	ldr	r0, [pc, #32]	; (552c <TIMER_INTERFACE_init+0x30>)
    550c:	4b08      	ldr	r3, [pc, #32]	; (5530 <TIMER_INTERFACE_init+0x34>)
    550e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    5510:	4b08      	ldr	r3, [pc, #32]	; (5534 <TIMER_INTERFACE_init+0x38>)
    5512:	4798      	blx	r3
    5514:	4603      	mov	r3, r0
    5516:	461a      	mov	r2, r3
    5518:	4907      	ldr	r1, [pc, #28]	; (5538 <TIMER_INTERFACE_init+0x3c>)
    551a:	4808      	ldr	r0, [pc, #32]	; (553c <TIMER_INTERFACE_init+0x40>)
    551c:	4b08      	ldr	r3, [pc, #32]	; (5540 <TIMER_INTERFACE_init+0x44>)
    551e:	4798      	blx	r3
}
    5520:	bf00      	nop
    5522:	bd80      	pop	{r7, pc}
    5524:	40000800 	.word	0x40000800
    5528:	000045db 	.word	0x000045db
    552c:	40001c00 	.word	0x40001c00
    5530:	00004375 	.word	0x00004375
    5534:	0000d1dd 	.word	0x0000d1dd
    5538:	42001800 	.word	0x42001800
    553c:	2000a5a0 	.word	0x2000a5a0
    5540:	00006b99 	.word	0x00006b99

00005544 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    5544:	b580      	push	{r7, lr}
    5546:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    5548:	4808      	ldr	r0, [pc, #32]	; (556c <TIMER_EVENT_init+0x28>)
    554a:	4b09      	ldr	r3, [pc, #36]	; (5570 <TIMER_EVENT_init+0x2c>)
    554c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    554e:	2246      	movs	r2, #70	; 0x46
    5550:	2127      	movs	r1, #39	; 0x27
    5552:	4808      	ldr	r0, [pc, #32]	; (5574 <TIMER_EVENT_init+0x30>)
    5554:	4b08      	ldr	r3, [pc, #32]	; (5578 <TIMER_EVENT_init+0x34>)
    5556:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    5558:	4b08      	ldr	r3, [pc, #32]	; (557c <TIMER_EVENT_init+0x38>)
    555a:	4798      	blx	r3
    555c:	4603      	mov	r3, r0
    555e:	461a      	mov	r2, r3
    5560:	4907      	ldr	r1, [pc, #28]	; (5580 <TIMER_EVENT_init+0x3c>)
    5562:	4808      	ldr	r0, [pc, #32]	; (5584 <TIMER_EVENT_init+0x40>)
    5564:	4b08      	ldr	r3, [pc, #32]	; (5588 <TIMER_EVENT_init+0x44>)
    5566:	4798      	blx	r3
}
    5568:	bf00      	nop
    556a:	bd80      	pop	{r7, pc}
    556c:	40000800 	.word	0x40000800
    5570:	0000469b 	.word	0x0000469b
    5574:	40001c00 	.word	0x40001c00
    5578:	00004375 	.word	0x00004375
    557c:	0000d1dd 	.word	0x0000d1dd
    5580:	43001400 	.word	0x43001400
    5584:	2000a580 	.word	0x2000a580
    5588:	00006b99 	.word	0x00006b99

0000558c <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    558c:	b580      	push	{r7, lr}
    558e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    5590:	4804      	ldr	r0, [pc, #16]	; (55a4 <TIMER_HVAC_CLOCK_init+0x18>)
    5592:	4b05      	ldr	r3, [pc, #20]	; (55a8 <TIMER_HVAC_CLOCK_init+0x1c>)
    5594:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    5596:	2244      	movs	r2, #68	; 0x44
    5598:	2119      	movs	r1, #25
    559a:	4804      	ldr	r0, [pc, #16]	; (55ac <TIMER_HVAC_CLOCK_init+0x20>)
    559c:	4b04      	ldr	r3, [pc, #16]	; (55b0 <TIMER_HVAC_CLOCK_init+0x24>)
    559e:	4798      	blx	r3
}
    55a0:	bf00      	nop
    55a2:	bd80      	pop	{r7, pc}
    55a4:	40000800 	.word	0x40000800
    55a8:	0000455b 	.word	0x0000455b
    55ac:	40001c00 	.word	0x40001c00
    55b0:	00004375 	.word	0x00004375

000055b4 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    55b4:	b580      	push	{r7, lr}
    55b6:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    55b8:	4b05      	ldr	r3, [pc, #20]	; (55d0 <TIMER_HVAC_init+0x1c>)
    55ba:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    55bc:	4b05      	ldr	r3, [pc, #20]	; (55d4 <TIMER_HVAC_init+0x20>)
    55be:	4798      	blx	r3
    55c0:	4603      	mov	r3, r0
    55c2:	461a      	mov	r2, r3
    55c4:	4904      	ldr	r1, [pc, #16]	; (55d8 <TIMER_HVAC_init+0x24>)
    55c6:	4805      	ldr	r0, [pc, #20]	; (55dc <TIMER_HVAC_init+0x28>)
    55c8:	4b05      	ldr	r3, [pc, #20]	; (55e0 <TIMER_HVAC_init+0x2c>)
    55ca:	4798      	blx	r3
}
    55cc:	bf00      	nop
    55ce:	bd80      	pop	{r7, pc}
    55d0:	0000558d 	.word	0x0000558d
    55d4:	0000c59d 	.word	0x0000c59d
    55d8:	41016000 	.word	0x41016000
    55dc:	2000a6a4 	.word	0x2000a6a4
    55e0:	00006b99 	.word	0x00006b99

000055e4 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    55e4:	b580      	push	{r7, lr}
    55e6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    55e8:	4804      	ldr	r0, [pc, #16]	; (55fc <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    55ea:	4b05      	ldr	r3, [pc, #20]	; (5600 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    55ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    55ee:	2244      	movs	r2, #68	; 0x44
    55f0:	2119      	movs	r1, #25
    55f2:	4804      	ldr	r0, [pc, #16]	; (5604 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    55f4:	4b04      	ldr	r3, [pc, #16]	; (5608 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    55f6:	4798      	blx	r3
}
    55f8:	bf00      	nop
    55fa:	bd80      	pop	{r7, pc}
    55fc:	40000800 	.word	0x40000800
    5600:	0000457b 	.word	0x0000457b
    5604:	40001c00 	.word	0x40001c00
    5608:	00004375 	.word	0x00004375

0000560c <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    560c:	b580      	push	{r7, lr}
    560e:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    5610:	4b05      	ldr	r3, [pc, #20]	; (5628 <TIMER_TEMPERATURES_init+0x1c>)
    5612:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    5614:	4b05      	ldr	r3, [pc, #20]	; (562c <TIMER_TEMPERATURES_init+0x20>)
    5616:	4798      	blx	r3
    5618:	4603      	mov	r3, r0
    561a:	461a      	mov	r2, r3
    561c:	4904      	ldr	r1, [pc, #16]	; (5630 <TIMER_TEMPERATURES_init+0x24>)
    561e:	4805      	ldr	r0, [pc, #20]	; (5634 <TIMER_TEMPERATURES_init+0x28>)
    5620:	4b05      	ldr	r3, [pc, #20]	; (5638 <TIMER_TEMPERATURES_init+0x2c>)
    5622:	4798      	blx	r3
}
    5624:	bf00      	nop
    5626:	bd80      	pop	{r7, pc}
    5628:	000055e5 	.word	0x000055e5
    562c:	0000c59d 	.word	0x0000c59d
    5630:	41018000 	.word	0x41018000
    5634:	2000a4f4 	.word	0x2000a4f4
    5638:	00006b99 	.word	0x00006b99

0000563c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    563c:	b580      	push	{r7, lr}
    563e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    5640:	2102      	movs	r1, #2
    5642:	2018      	movs	r0, #24
    5644:	4b0f      	ldr	r3, [pc, #60]	; (5684 <CDCUSB_PORT_init+0x48>)
    5646:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    5648:	2100      	movs	r1, #0
    564a:	2018      	movs	r0, #24
    564c:	4b0e      	ldr	r3, [pc, #56]	; (5688 <CDCUSB_PORT_init+0x4c>)
    564e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    5650:	2100      	movs	r1, #0
    5652:	2018      	movs	r0, #24
    5654:	4b0d      	ldr	r3, [pc, #52]	; (568c <CDCUSB_PORT_init+0x50>)
    5656:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    5658:	490d      	ldr	r1, [pc, #52]	; (5690 <CDCUSB_PORT_init+0x54>)
    565a:	2018      	movs	r0, #24
    565c:	4b0d      	ldr	r3, [pc, #52]	; (5694 <CDCUSB_PORT_init+0x58>)
    565e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    5660:	2102      	movs	r1, #2
    5662:	2019      	movs	r0, #25
    5664:	4b07      	ldr	r3, [pc, #28]	; (5684 <CDCUSB_PORT_init+0x48>)
    5666:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    5668:	2100      	movs	r1, #0
    566a:	2019      	movs	r0, #25
    566c:	4b06      	ldr	r3, [pc, #24]	; (5688 <CDCUSB_PORT_init+0x4c>)
    566e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    5670:	2100      	movs	r1, #0
    5672:	2019      	movs	r0, #25
    5674:	4b05      	ldr	r3, [pc, #20]	; (568c <CDCUSB_PORT_init+0x50>)
    5676:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    5678:	4907      	ldr	r1, [pc, #28]	; (5698 <CDCUSB_PORT_init+0x5c>)
    567a:	2019      	movs	r0, #25
    567c:	4b05      	ldr	r3, [pc, #20]	; (5694 <CDCUSB_PORT_init+0x58>)
    567e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    5680:	bf00      	nop
    5682:	bd80      	pop	{r7, pc}
    5684:	00004be9 	.word	0x00004be9
    5688:	00004c21 	.word	0x00004c21
    568c:	00004b95 	.word	0x00004b95
    5690:	00180007 	.word	0x00180007
    5694:	00004bc9 	.word	0x00004bc9
    5698:	00190007 	.word	0x00190007

0000569c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    569c:	b580      	push	{r7, lr}
    569e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    56a0:	2242      	movs	r2, #66	; 0x42
    56a2:	210a      	movs	r1, #10
    56a4:	4805      	ldr	r0, [pc, #20]	; (56bc <CDCUSB_CLOCK_init+0x20>)
    56a6:	4b06      	ldr	r3, [pc, #24]	; (56c0 <CDCUSB_CLOCK_init+0x24>)
    56a8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    56aa:	4806      	ldr	r0, [pc, #24]	; (56c4 <CDCUSB_CLOCK_init+0x28>)
    56ac:	4b06      	ldr	r3, [pc, #24]	; (56c8 <CDCUSB_CLOCK_init+0x2c>)
    56ae:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    56b0:	4804      	ldr	r0, [pc, #16]	; (56c4 <CDCUSB_CLOCK_init+0x28>)
    56b2:	4b06      	ldr	r3, [pc, #24]	; (56cc <CDCUSB_CLOCK_init+0x30>)
    56b4:	4798      	blx	r3
}
    56b6:	bf00      	nop
    56b8:	bd80      	pop	{r7, pc}
    56ba:	bf00      	nop
    56bc:	40001c00 	.word	0x40001c00
    56c0:	00004375 	.word	0x00004375
    56c4:	40000800 	.word	0x40000800
    56c8:	0000439b 	.word	0x0000439b
    56cc:	000044db 	.word	0x000044db

000056d0 <CDCUSB_init>:

void CDCUSB_init(void)
{
    56d0:	b580      	push	{r7, lr}
    56d2:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    56d4:	4b03      	ldr	r3, [pc, #12]	; (56e4 <CDCUSB_init+0x14>)
    56d6:	4798      	blx	r3
	usb_d_init();
    56d8:	4b03      	ldr	r3, [pc, #12]	; (56e8 <CDCUSB_init+0x18>)
    56da:	4798      	blx	r3
	CDCUSB_PORT_init();
    56dc:	4b03      	ldr	r3, [pc, #12]	; (56ec <CDCUSB_init+0x1c>)
    56de:	4798      	blx	r3
}
    56e0:	bf00      	nop
    56e2:	bd80      	pop	{r7, pc}
    56e4:	0000569d 	.word	0x0000569d
    56e8:	000073f5 	.word	0x000073f5
    56ec:	0000563d 	.word	0x0000563d

000056f0 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    56f0:	b580      	push	{r7, lr}
    56f2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    56f4:	4802      	ldr	r0, [pc, #8]	; (5700 <WATCHDOG_CLOCK_init+0x10>)
    56f6:	4b03      	ldr	r3, [pc, #12]	; (5704 <WATCHDOG_CLOCK_init+0x14>)
    56f8:	4798      	blx	r3
}
    56fa:	bf00      	nop
    56fc:	bd80      	pop	{r7, pc}
    56fe:	bf00      	nop
    5700:	40000800 	.word	0x40000800
    5704:	0000441b 	.word	0x0000441b

00005708 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    5708:	b580      	push	{r7, lr}
    570a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    570c:	4b03      	ldr	r3, [pc, #12]	; (571c <WATCHDOG_init+0x14>)
    570e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    5710:	4903      	ldr	r1, [pc, #12]	; (5720 <WATCHDOG_init+0x18>)
    5712:	4804      	ldr	r0, [pc, #16]	; (5724 <WATCHDOG_init+0x1c>)
    5714:	4b04      	ldr	r3, [pc, #16]	; (5728 <WATCHDOG_init+0x20>)
    5716:	4798      	blx	r3
}
    5718:	bf00      	nop
    571a:	bd80      	pop	{r7, pc}
    571c:	000056f1 	.word	0x000056f1
    5720:	40002000 	.word	0x40002000
    5724:	2000a724 	.word	0x2000a724
    5728:	00004c69 	.word	0x00004c69

0000572c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    572c:	b580      	push	{r7, lr}
    572e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    5730:	4904      	ldr	r1, [pc, #16]	; (5744 <CAN_CCU_PORT_init+0x18>)
    5732:	202d      	movs	r0, #45	; 0x2d
    5734:	4b04      	ldr	r3, [pc, #16]	; (5748 <CAN_CCU_PORT_init+0x1c>)
    5736:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    5738:	4904      	ldr	r1, [pc, #16]	; (574c <CAN_CCU_PORT_init+0x20>)
    573a:	202c      	movs	r0, #44	; 0x2c
    573c:	4b02      	ldr	r3, [pc, #8]	; (5748 <CAN_CCU_PORT_init+0x1c>)
    573e:	4798      	blx	r3
}
    5740:	bf00      	nop
    5742:	bd80      	pop	{r7, pc}
    5744:	002d0007 	.word	0x002d0007
    5748:	00004bc9 	.word	0x00004bc9
    574c:	002c0007 	.word	0x002c0007

00005750 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    5750:	b580      	push	{r7, lr}
    5752:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    5754:	4807      	ldr	r0, [pc, #28]	; (5774 <CAN_CCU_init+0x24>)
    5756:	4b08      	ldr	r3, [pc, #32]	; (5778 <CAN_CCU_init+0x28>)
    5758:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    575a:	2243      	movs	r2, #67	; 0x43
    575c:	211c      	movs	r1, #28
    575e:	4807      	ldr	r0, [pc, #28]	; (577c <CAN_CCU_init+0x2c>)
    5760:	4b07      	ldr	r3, [pc, #28]	; (5780 <CAN_CCU_init+0x30>)
    5762:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    5764:	4907      	ldr	r1, [pc, #28]	; (5784 <CAN_CCU_init+0x34>)
    5766:	4808      	ldr	r0, [pc, #32]	; (5788 <CAN_CCU_init+0x38>)
    5768:	4b08      	ldr	r3, [pc, #32]	; (578c <CAN_CCU_init+0x3c>)
    576a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    576c:	4b08      	ldr	r3, [pc, #32]	; (5790 <CAN_CCU_init+0x40>)
    576e:	4798      	blx	r3
}
    5770:	bf00      	nop
    5772:	bd80      	pop	{r7, pc}
    5774:	40000800 	.word	0x40000800
    5778:	000043db 	.word	0x000043db
    577c:	40001c00 	.word	0x40001c00
    5780:	00004375 	.word	0x00004375
    5784:	42000400 	.word	0x42000400
    5788:	2000a5dc 	.word	0x2000a5dc
    578c:	00005ea1 	.word	0x00005ea1
    5790:	0000572d 	.word	0x0000572d

00005794 <system_init>:

void system_init(void)
{
    5794:	b580      	push	{r7, lr}
    5796:	af00      	add	r7, sp, #0
	init_mcu();
    5798:	4b58      	ldr	r3, [pc, #352]	; (58fc <system_init+0x168>)
    579a:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    579c:	2101      	movs	r1, #1
    579e:	200f      	movs	r0, #15
    57a0:	4b57      	ldr	r3, [pc, #348]	; (5900 <system_init+0x16c>)
    57a2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    57a4:	2102      	movs	r1, #2
    57a6:	200f      	movs	r0, #15
    57a8:	4b56      	ldr	r3, [pc, #344]	; (5904 <system_init+0x170>)
    57aa:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    57ac:	f04f 31ff 	mov.w	r1, #4294967295
    57b0:	200f      	movs	r0, #15
    57b2:	4b55      	ldr	r3, [pc, #340]	; (5908 <system_init+0x174>)
    57b4:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    57b6:	2101      	movs	r1, #1
    57b8:	2013      	movs	r0, #19
    57ba:	4b51      	ldr	r3, [pc, #324]	; (5900 <system_init+0x16c>)
    57bc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    57be:	2102      	movs	r1, #2
    57c0:	2013      	movs	r0, #19
    57c2:	4b50      	ldr	r3, [pc, #320]	; (5904 <system_init+0x170>)
    57c4:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    57c6:	f04f 31ff 	mov.w	r1, #4294967295
    57ca:	2013      	movs	r0, #19
    57cc:	4b4e      	ldr	r3, [pc, #312]	; (5908 <system_init+0x174>)
    57ce:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    57d0:	2101      	movs	r1, #1
    57d2:	201b      	movs	r0, #27
    57d4:	4b4a      	ldr	r3, [pc, #296]	; (5900 <system_init+0x16c>)
    57d6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    57d8:	2102      	movs	r1, #2
    57da:	201b      	movs	r0, #27
    57dc:	4b49      	ldr	r3, [pc, #292]	; (5904 <system_init+0x170>)
    57de:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    57e0:	f04f 31ff 	mov.w	r1, #4294967295
    57e4:	201b      	movs	r0, #27
    57e6:	4b48      	ldr	r3, [pc, #288]	; (5908 <system_init+0x174>)
    57e8:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    57ea:	2101      	movs	r1, #1
    57ec:	2027      	movs	r0, #39	; 0x27
    57ee:	4b45      	ldr	r3, [pc, #276]	; (5904 <system_init+0x170>)
    57f0:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    57f2:	2102      	movs	r1, #2
    57f4:	2027      	movs	r0, #39	; 0x27
    57f6:	4b45      	ldr	r3, [pc, #276]	; (590c <system_init+0x178>)
    57f8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    57fa:	f04f 31ff 	mov.w	r1, #4294967295
    57fe:	2027      	movs	r0, #39	; 0x27
    5800:	4b41      	ldr	r3, [pc, #260]	; (5908 <system_init+0x174>)
    5802:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    5804:	2101      	movs	r1, #1
    5806:	203d      	movs	r0, #61	; 0x3d
    5808:	4b3d      	ldr	r3, [pc, #244]	; (5900 <system_init+0x16c>)
    580a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    580c:	2102      	movs	r1, #2
    580e:	203d      	movs	r0, #61	; 0x3d
    5810:	4b3c      	ldr	r3, [pc, #240]	; (5904 <system_init+0x170>)
    5812:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    5814:	f04f 31ff 	mov.w	r1, #4294967295
    5818:	203d      	movs	r0, #61	; 0x3d
    581a:	4b3b      	ldr	r3, [pc, #236]	; (5908 <system_init+0x174>)
    581c:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    581e:	2101      	movs	r1, #1
    5820:	203f      	movs	r0, #63	; 0x3f
    5822:	4b38      	ldr	r3, [pc, #224]	; (5904 <system_init+0x170>)
    5824:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    5826:	2101      	movs	r1, #1
    5828:	203f      	movs	r0, #63	; 0x3f
    582a:	4b38      	ldr	r3, [pc, #224]	; (590c <system_init+0x178>)
    582c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    582e:	f04f 31ff 	mov.w	r1, #4294967295
    5832:	203f      	movs	r0, #63	; 0x3f
    5834:	4b34      	ldr	r3, [pc, #208]	; (5908 <system_init+0x174>)
    5836:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    5838:	2100      	movs	r1, #0
    583a:	204d      	movs	r0, #77	; 0x4d
    583c:	4b30      	ldr	r3, [pc, #192]	; (5900 <system_init+0x16c>)
    583e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    5840:	2102      	movs	r1, #2
    5842:	204d      	movs	r0, #77	; 0x4d
    5844:	4b2f      	ldr	r3, [pc, #188]	; (5904 <system_init+0x170>)
    5846:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    5848:	f04f 31ff 	mov.w	r1, #4294967295
    584c:	204d      	movs	r0, #77	; 0x4d
    584e:	4b2e      	ldr	r3, [pc, #184]	; (5908 <system_init+0x174>)
    5850:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    5852:	2101      	movs	r1, #1
    5854:	204e      	movs	r0, #78	; 0x4e
    5856:	4b2a      	ldr	r3, [pc, #168]	; (5900 <system_init+0x16c>)
    5858:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    585a:	2102      	movs	r1, #2
    585c:	204e      	movs	r0, #78	; 0x4e
    585e:	4b29      	ldr	r3, [pc, #164]	; (5904 <system_init+0x170>)
    5860:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    5862:	f04f 31ff 	mov.w	r1, #4294967295
    5866:	204e      	movs	r0, #78	; 0x4e
    5868:	4b27      	ldr	r3, [pc, #156]	; (5908 <system_init+0x174>)
    586a:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    586c:	2100      	movs	r1, #0
    586e:	204f      	movs	r0, #79	; 0x4f
    5870:	4b23      	ldr	r3, [pc, #140]	; (5900 <system_init+0x16c>)
    5872:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    5874:	2102      	movs	r1, #2
    5876:	204f      	movs	r0, #79	; 0x4f
    5878:	4b22      	ldr	r3, [pc, #136]	; (5904 <system_init+0x170>)
    587a:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    587c:	f04f 31ff 	mov.w	r1, #4294967295
    5880:	204f      	movs	r0, #79	; 0x4f
    5882:	4b21      	ldr	r3, [pc, #132]	; (5908 <system_init+0x174>)
    5884:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    5886:	2100      	movs	r1, #0
    5888:	2052      	movs	r0, #82	; 0x52
    588a:	4b1d      	ldr	r3, [pc, #116]	; (5900 <system_init+0x16c>)
    588c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    588e:	2102      	movs	r1, #2
    5890:	2052      	movs	r0, #82	; 0x52
    5892:	4b1c      	ldr	r3, [pc, #112]	; (5904 <system_init+0x170>)
    5894:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    5896:	f04f 31ff 	mov.w	r1, #4294967295
    589a:	2052      	movs	r0, #82	; 0x52
    589c:	4b1a      	ldr	r3, [pc, #104]	; (5908 <system_init+0x174>)
    589e:	4798      	blx	r3

	CRC_CALC_init();
    58a0:	4b1b      	ldr	r3, [pc, #108]	; (5910 <system_init+0x17c>)
    58a2:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    58a4:	4b1b      	ldr	r3, [pc, #108]	; (5914 <system_init+0x180>)
    58a6:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    58a8:	4b1b      	ldr	r3, [pc, #108]	; (5918 <system_init+0x184>)
    58aa:	4798      	blx	r3

	QSPI_N25Q256_init();
    58ac:	4b1b      	ldr	r3, [pc, #108]	; (591c <system_init+0x188>)
    58ae:	4798      	blx	r3

	DATETIME_CLOCK_init();
    58b0:	4b1b      	ldr	r3, [pc, #108]	; (5920 <system_init+0x18c>)
    58b2:	4798      	blx	r3

	SPI_MEMORIES_init();
    58b4:	4b1b      	ldr	r3, [pc, #108]	; (5924 <system_init+0x190>)
    58b6:	4798      	blx	r3

	I2C_SHARED_init();
    58b8:	4b1b      	ldr	r3, [pc, #108]	; (5928 <system_init+0x194>)
    58ba:	4798      	blx	r3

	SPI_TEMP_init();
    58bc:	4b1b      	ldr	r3, [pc, #108]	; (592c <system_init+0x198>)
    58be:	4798      	blx	r3

	I2C_EXPANDER_init();
    58c0:	4b1b      	ldr	r3, [pc, #108]	; (5930 <system_init+0x19c>)
    58c2:	4798      	blx	r3

	SPI_HI3593_init();
    58c4:	4b1b      	ldr	r3, [pc, #108]	; (5934 <system_init+0x1a0>)
    58c6:	4798      	blx	r3

	I2C_EEPROM_init();
    58c8:	4b1b      	ldr	r3, [pc, #108]	; (5938 <system_init+0x1a4>)
    58ca:	4798      	blx	r3

	TIMER_USB_init();
    58cc:	4b1b      	ldr	r3, [pc, #108]	; (593c <system_init+0x1a8>)
    58ce:	4798      	blx	r3
	LIVE_PULSE_init();
    58d0:	4b1b      	ldr	r3, [pc, #108]	; (5940 <system_init+0x1ac>)
    58d2:	4798      	blx	r3

	TIMER_ARINC_init();
    58d4:	4b1b      	ldr	r3, [pc, #108]	; (5944 <system_init+0x1b0>)
    58d6:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    58d8:	4b1b      	ldr	r3, [pc, #108]	; (5948 <system_init+0x1b4>)
    58da:	4798      	blx	r3
	TIMER_INTERFACE_init();
    58dc:	4b1b      	ldr	r3, [pc, #108]	; (594c <system_init+0x1b8>)
    58de:	4798      	blx	r3
	TIMER_EVENT_init();
    58e0:	4b1b      	ldr	r3, [pc, #108]	; (5950 <system_init+0x1bc>)
    58e2:	4798      	blx	r3
	TIMER_HVAC_init();
    58e4:	4b1b      	ldr	r3, [pc, #108]	; (5954 <system_init+0x1c0>)
    58e6:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    58e8:	4b1b      	ldr	r3, [pc, #108]	; (5958 <system_init+0x1c4>)
    58ea:	4798      	blx	r3

	CDCUSB_init();
    58ec:	4b1b      	ldr	r3, [pc, #108]	; (595c <system_init+0x1c8>)
    58ee:	4798      	blx	r3

	WATCHDOG_init();
    58f0:	4b1b      	ldr	r3, [pc, #108]	; (5960 <system_init+0x1cc>)
    58f2:	4798      	blx	r3
	CAN_CCU_init();
    58f4:	4b1b      	ldr	r3, [pc, #108]	; (5964 <system_init+0x1d0>)
    58f6:	4798      	blx	r3
}
    58f8:	bf00      	nop
    58fa:	bd80      	pop	{r7, pc}
    58fc:	00004c59 	.word	0x00004c59
    5900:	00004c21 	.word	0x00004c21
    5904:	00004be9 	.word	0x00004be9
    5908:	00004bc9 	.word	0x00004bc9
    590c:	00004b95 	.word	0x00004b95
    5910:	00004cb9 	.word	0x00004cb9
    5914:	00004ce5 	.word	0x00004ce5
    5918:	00004dd9 	.word	0x00004dd9
    591c:	00004f21 	.word	0x00004f21
    5920:	00004f65 	.word	0x00004f65
    5924:	00005029 	.word	0x00005029
    5928:	000050c1 	.word	0x000050c1
    592c:	0000518d 	.word	0x0000518d
    5930:	00005225 	.word	0x00005225
    5934:	000052f1 	.word	0x000052f1
    5938:	00005389 	.word	0x00005389
    593c:	000053b5 	.word	0x000053b5
    5940:	00005435 	.word	0x00005435
    5944:	0000546d 	.word	0x0000546d
    5948:	000054b5 	.word	0x000054b5
    594c:	000054fd 	.word	0x000054fd
    5950:	00005545 	.word	0x00005545
    5954:	000055b5 	.word	0x000055b5
    5958:	0000560d 	.word	0x0000560d
    595c:	000056d1 	.word	0x000056d1
    5960:	00005709 	.word	0x00005709
    5964:	00005751 	.word	0x00005751

00005968 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    5968:	b480      	push	{r7}
    596a:	b083      	sub	sp, #12
    596c:	af00      	add	r7, sp, #0
    596e:	4603      	mov	r3, r0
    5970:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    5972:	88fb      	ldrh	r3, [r7, #6]
    5974:	f003 0303 	and.w	r3, r3, #3
    5978:	2b00      	cmp	r3, #0
    597a:	d001      	beq.n	5980 <leap_year+0x18>
		return false;
    597c:	2300      	movs	r3, #0
    597e:	e000      	b.n	5982 <leap_year+0x1a>
	} else {
		return true;
    5980:	2301      	movs	r3, #1
	}
}
    5982:	4618      	mov	r0, r3
    5984:	370c      	adds	r7, #12
    5986:	46bd      	mov	sp, r7
    5988:	f85d 7b04 	ldr.w	r7, [sp], #4
    598c:	4770      	bx	lr
	...

00005990 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    5990:	b580      	push	{r7, lr}
    5992:	b084      	sub	sp, #16
    5994:	af00      	add	r7, sp, #0
    5996:	6078      	str	r0, [r7, #4]
    5998:	460b      	mov	r3, r1
    599a:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    599c:	2300      	movs	r3, #0
    599e:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    59a0:	687b      	ldr	r3, [r7, #4]
    59a2:	b29b      	uxth	r3, r3
    59a4:	4618      	mov	r0, r3
    59a6:	4b2f      	ldr	r3, [pc, #188]	; (5a64 <get_secs_in_month+0xd4>)
    59a8:	4798      	blx	r3
    59aa:	4603      	mov	r3, r0
    59ac:	2b00      	cmp	r3, #0
    59ae:	d028      	beq.n	5a02 <get_secs_in_month+0x72>
		switch (month) {
    59b0:	78fb      	ldrb	r3, [r7, #3]
    59b2:	3b01      	subs	r3, #1
    59b4:	2b0b      	cmp	r3, #11
    59b6:	d84c      	bhi.n	5a52 <get_secs_in_month+0xc2>
    59b8:	a201      	add	r2, pc, #4	; (adr r2, 59c0 <get_secs_in_month+0x30>)
    59ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    59be:	bf00      	nop
    59c0:	000059f1 	.word	0x000059f1
    59c4:	000059f7 	.word	0x000059f7
    59c8:	000059f1 	.word	0x000059f1
    59cc:	000059fd 	.word	0x000059fd
    59d0:	000059f1 	.word	0x000059f1
    59d4:	000059fd 	.word	0x000059fd
    59d8:	000059f1 	.word	0x000059f1
    59dc:	000059f1 	.word	0x000059f1
    59e0:	000059fd 	.word	0x000059fd
    59e4:	000059f1 	.word	0x000059f1
    59e8:	000059fd 	.word	0x000059fd
    59ec:	000059f1 	.word	0x000059f1
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    59f0:	4b1d      	ldr	r3, [pc, #116]	; (5a68 <get_secs_in_month+0xd8>)
    59f2:	60fb      	str	r3, [r7, #12]
			break;
    59f4:	e030      	b.n	5a58 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    59f6:	4b1d      	ldr	r3, [pc, #116]	; (5a6c <get_secs_in_month+0xdc>)
    59f8:	60fb      	str	r3, [r7, #12]
			break;
    59fa:	e02d      	b.n	5a58 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    59fc:	4b1c      	ldr	r3, [pc, #112]	; (5a70 <get_secs_in_month+0xe0>)
    59fe:	60fb      	str	r3, [r7, #12]
			break;
    5a00:	e02a      	b.n	5a58 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    5a02:	78fb      	ldrb	r3, [r7, #3]
    5a04:	3b01      	subs	r3, #1
    5a06:	2b0b      	cmp	r3, #11
    5a08:	d825      	bhi.n	5a56 <get_secs_in_month+0xc6>
    5a0a:	a201      	add	r2, pc, #4	; (adr r2, 5a10 <get_secs_in_month+0x80>)
    5a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5a10:	00005a41 	.word	0x00005a41
    5a14:	00005a47 	.word	0x00005a47
    5a18:	00005a41 	.word	0x00005a41
    5a1c:	00005a4d 	.word	0x00005a4d
    5a20:	00005a41 	.word	0x00005a41
    5a24:	00005a4d 	.word	0x00005a4d
    5a28:	00005a41 	.word	0x00005a41
    5a2c:	00005a41 	.word	0x00005a41
    5a30:	00005a4d 	.word	0x00005a4d
    5a34:	00005a41 	.word	0x00005a41
    5a38:	00005a4d 	.word	0x00005a4d
    5a3c:	00005a41 	.word	0x00005a41
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    5a40:	4b09      	ldr	r3, [pc, #36]	; (5a68 <get_secs_in_month+0xd8>)
    5a42:	60fb      	str	r3, [r7, #12]
			break;
    5a44:	e008      	b.n	5a58 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    5a46:	4b0b      	ldr	r3, [pc, #44]	; (5a74 <get_secs_in_month+0xe4>)
    5a48:	60fb      	str	r3, [r7, #12]
			break;
    5a4a:	e005      	b.n	5a58 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    5a4c:	4b08      	ldr	r3, [pc, #32]	; (5a70 <get_secs_in_month+0xe0>)
    5a4e:	60fb      	str	r3, [r7, #12]
			break;
    5a50:	e002      	b.n	5a58 <get_secs_in_month+0xc8>
			break;
    5a52:	bf00      	nop
    5a54:	e000      	b.n	5a58 <get_secs_in_month+0xc8>
		default:
			break;
    5a56:	bf00      	nop
		}
	}

	return sec_in_month;
    5a58:	68fb      	ldr	r3, [r7, #12]
}
    5a5a:	4618      	mov	r0, r3
    5a5c:	3710      	adds	r7, #16
    5a5e:	46bd      	mov	sp, r7
    5a60:	bd80      	pop	{r7, pc}
    5a62:	bf00      	nop
    5a64:	00005969 	.word	0x00005969
    5a68:	0028de80 	.word	0x0028de80
    5a6c:	00263b80 	.word	0x00263b80
    5a70:	00278d00 	.word	0x00278d00
    5a74:	0024ea00 	.word	0x0024ea00

00005a78 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    5a78:	b580      	push	{r7, lr}
    5a7a:	b08a      	sub	sp, #40	; 0x28
    5a7c:	af00      	add	r7, sp, #0
    5a7e:	60f8      	str	r0, [r7, #12]
    5a80:	60b9      	str	r1, [r7, #8]
    5a82:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    5a84:	68fb      	ldr	r3, [r7, #12]
    5a86:	699b      	ldr	r3, [r3, #24]
    5a88:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    5a8a:	2301      	movs	r3, #1
    5a8c:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    5a8e:	2301      	movs	r3, #1
    5a90:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    5a92:	2300      	movs	r3, #0
    5a94:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    5a96:	2300      	movs	r3, #0
    5a98:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    5a9a:	68bb      	ldr	r3, [r7, #8]
    5a9c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    5a9e:	6a3b      	ldr	r3, [r7, #32]
    5aa0:	b29b      	uxth	r3, r3
    5aa2:	4618      	mov	r0, r3
    5aa4:	4b32      	ldr	r3, [pc, #200]	; (5b70 <convert_timestamp_to_datetime+0xf8>)
    5aa6:	4798      	blx	r3
    5aa8:	4603      	mov	r3, r0
    5aaa:	2b00      	cmp	r3, #0
    5aac:	d001      	beq.n	5ab2 <convert_timestamp_to_datetime+0x3a>
    5aae:	4b31      	ldr	r3, [pc, #196]	; (5b74 <convert_timestamp_to_datetime+0xfc>)
    5ab0:	e000      	b.n	5ab4 <convert_timestamp_to_datetime+0x3c>
    5ab2:	4b31      	ldr	r3, [pc, #196]	; (5b78 <convert_timestamp_to_datetime+0x100>)
    5ab4:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    5ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5ab8:	69bb      	ldr	r3, [r7, #24]
    5aba:	429a      	cmp	r2, r3
    5abc:	d307      	bcc.n	5ace <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    5abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5ac0:	69bb      	ldr	r3, [r7, #24]
    5ac2:	1ad3      	subs	r3, r2, r3
    5ac4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    5ac6:	6a3b      	ldr	r3, [r7, #32]
    5ac8:	3301      	adds	r3, #1
    5aca:	623b      	str	r3, [r7, #32]
    5acc:	e7e7      	b.n	5a9e <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    5ace:	7ffb      	ldrb	r3, [r7, #31]
    5ad0:	4619      	mov	r1, r3
    5ad2:	6a38      	ldr	r0, [r7, #32]
    5ad4:	4b29      	ldr	r3, [pc, #164]	; (5b7c <convert_timestamp_to_datetime+0x104>)
    5ad6:	4798      	blx	r3
    5ad8:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    5ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5adc:	697b      	ldr	r3, [r7, #20]
    5ade:	429a      	cmp	r2, r3
    5ae0:	d307      	bcc.n	5af2 <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    5ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5ae4:	697b      	ldr	r3, [r7, #20]
    5ae6:	1ad3      	subs	r3, r2, r3
    5ae8:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    5aea:	7ffb      	ldrb	r3, [r7, #31]
    5aec:	3301      	adds	r3, #1
    5aee:	77fb      	strb	r3, [r7, #31]
    5af0:	e7ed      	b.n	5ace <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    5af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5af4:	4a22      	ldr	r2, [pc, #136]	; (5b80 <convert_timestamp_to_datetime+0x108>)
    5af6:	4293      	cmp	r3, r2
    5af8:	d909      	bls.n	5b0e <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    5afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5afc:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    5b00:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    5b04:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    5b06:	7fbb      	ldrb	r3, [r7, #30]
    5b08:	3301      	adds	r3, #1
    5b0a:	77bb      	strb	r3, [r7, #30]
    5b0c:	e7f1      	b.n	5af2 <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    5b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b10:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    5b14:	d307      	bcc.n	5b26 <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    5b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b18:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    5b1c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    5b1e:	7f7b      	ldrb	r3, [r7, #29]
    5b20:	3301      	adds	r3, #1
    5b22:	777b      	strb	r3, [r7, #29]
    5b24:	e7f3      	b.n	5b0e <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    5b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b28:	2b3b      	cmp	r3, #59	; 0x3b
    5b2a:	d906      	bls.n	5b3a <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    5b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b2e:	3b3c      	subs	r3, #60	; 0x3c
    5b30:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    5b32:	7f3b      	ldrb	r3, [r7, #28]
    5b34:	3301      	adds	r3, #1
    5b36:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    5b38:	e7f5      	b.n	5b26 <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    5b3a:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    5b3c:	6a3b      	ldr	r3, [r7, #32]
    5b3e:	b29a      	uxth	r2, r3
    5b40:	687b      	ldr	r3, [r7, #4]
    5b42:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    5b44:	687b      	ldr	r3, [r7, #4]
    5b46:	7ffa      	ldrb	r2, [r7, #31]
    5b48:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    5b4a:	687b      	ldr	r3, [r7, #4]
    5b4c:	7fba      	ldrb	r2, [r7, #30]
    5b4e:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    5b50:	687b      	ldr	r3, [r7, #4]
    5b52:	7f7a      	ldrb	r2, [r7, #29]
    5b54:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	7f3a      	ldrb	r2, [r7, #28]
    5b5a:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    5b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b5e:	b2da      	uxtb	r2, r3
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    5b64:	2300      	movs	r3, #0
}
    5b66:	4618      	mov	r0, r3
    5b68:	3728      	adds	r7, #40	; 0x28
    5b6a:	46bd      	mov	sp, r7
    5b6c:	bd80      	pop	{r7, pc}
    5b6e:	bf00      	nop
    5b70:	00005969 	.word	0x00005969
    5b74:	01e28500 	.word	0x01e28500
    5b78:	01e13380 	.word	0x01e13380
    5b7c:	00005991 	.word	0x00005991
    5b80:	0001517f 	.word	0x0001517f

00005b84 <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    5b84:	b580      	push	{r7, lr}
    5b86:	b086      	sub	sp, #24
    5b88:	af00      	add	r7, sp, #0
    5b8a:	6078      	str	r0, [r7, #4]
    5b8c:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    5b8e:	2300      	movs	r3, #0
    5b90:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    5b92:	2300      	movs	r3, #0
    5b94:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    5b96:	683b      	ldr	r3, [r7, #0]
    5b98:	88db      	ldrh	r3, [r3, #6]
    5b9a:	b2da      	uxtb	r2, r3
    5b9c:	687b      	ldr	r3, [r7, #4]
    5b9e:	699b      	ldr	r3, [r3, #24]
    5ba0:	b2db      	uxtb	r3, r3
    5ba2:	1ad3      	subs	r3, r2, r3
    5ba4:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    5ba6:	683b      	ldr	r3, [r7, #0]
    5ba8:	795b      	ldrb	r3, [r3, #5]
    5baa:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    5bac:	683b      	ldr	r3, [r7, #0]
    5bae:	791b      	ldrb	r3, [r3, #4]
    5bb0:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    5bb2:	683b      	ldr	r3, [r7, #0]
    5bb4:	789b      	ldrb	r3, [r3, #2]
    5bb6:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    5bb8:	683b      	ldr	r3, [r7, #0]
    5bba:	785b      	ldrb	r3, [r3, #1]
    5bbc:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    5bbe:	683b      	ldr	r3, [r7, #0]
    5bc0:	781b      	ldrb	r3, [r3, #0]
    5bc2:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    5bc4:	2300      	movs	r3, #0
    5bc6:	613b      	str	r3, [r7, #16]
    5bc8:	e01a      	b.n	5c00 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    5bca:	687b      	ldr	r3, [r7, #4]
    5bcc:	699b      	ldr	r3, [r3, #24]
    5bce:	b29a      	uxth	r2, r3
    5bd0:	693b      	ldr	r3, [r7, #16]
    5bd2:	b29b      	uxth	r3, r3
    5bd4:	4413      	add	r3, r2
    5bd6:	b29b      	uxth	r3, r3
    5bd8:	4618      	mov	r0, r3
    5bda:	4b29      	ldr	r3, [pc, #164]	; (5c80 <convert_datetime_to_timestamp+0xfc>)
    5bdc:	4798      	blx	r3
    5bde:	4603      	mov	r3, r0
    5be0:	2b00      	cmp	r3, #0
    5be2:	d006      	beq.n	5bf2 <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    5be4:	697b      	ldr	r3, [r7, #20]
    5be6:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    5bea:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    5bee:	617b      	str	r3, [r7, #20]
    5bf0:	e003      	b.n	5bfa <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    5bf2:	697a      	ldr	r2, [r7, #20]
    5bf4:	4b23      	ldr	r3, [pc, #140]	; (5c84 <convert_datetime_to_timestamp+0x100>)
    5bf6:	4413      	add	r3, r2
    5bf8:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    5bfa:	693b      	ldr	r3, [r7, #16]
    5bfc:	3301      	adds	r3, #1
    5bfe:	613b      	str	r3, [r7, #16]
    5c00:	7bfa      	ldrb	r2, [r7, #15]
    5c02:	693b      	ldr	r3, [r7, #16]
    5c04:	429a      	cmp	r2, r3
    5c06:	d8e0      	bhi.n	5bca <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    5c08:	2301      	movs	r3, #1
    5c0a:	613b      	str	r3, [r7, #16]
    5c0c:	e00f      	b.n	5c2e <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    5c0e:	683b      	ldr	r3, [r7, #0]
    5c10:	88db      	ldrh	r3, [r3, #6]
    5c12:	461a      	mov	r2, r3
    5c14:	693b      	ldr	r3, [r7, #16]
    5c16:	b2db      	uxtb	r3, r3
    5c18:	4619      	mov	r1, r3
    5c1a:	4610      	mov	r0, r2
    5c1c:	4b1a      	ldr	r3, [pc, #104]	; (5c88 <convert_datetime_to_timestamp+0x104>)
    5c1e:	4798      	blx	r3
    5c20:	4602      	mov	r2, r0
    5c22:	697b      	ldr	r3, [r7, #20]
    5c24:	4413      	add	r3, r2
    5c26:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    5c28:	693b      	ldr	r3, [r7, #16]
    5c2a:	3301      	adds	r3, #1
    5c2c:	613b      	str	r3, [r7, #16]
    5c2e:	7bba      	ldrb	r2, [r7, #14]
    5c30:	693b      	ldr	r3, [r7, #16]
    5c32:	429a      	cmp	r2, r3
    5c34:	d8eb      	bhi.n	5c0e <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    5c36:	7b7b      	ldrb	r3, [r7, #13]
    5c38:	3b01      	subs	r3, #1
    5c3a:	4a14      	ldr	r2, [pc, #80]	; (5c8c <convert_datetime_to_timestamp+0x108>)
    5c3c:	fb02 f303 	mul.w	r3, r2, r3
    5c40:	461a      	mov	r2, r3
    5c42:	697b      	ldr	r3, [r7, #20]
    5c44:	4413      	add	r3, r2
    5c46:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    5c48:	7b3b      	ldrb	r3, [r7, #12]
    5c4a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    5c4e:	fb02 f303 	mul.w	r3, r2, r3
    5c52:	461a      	mov	r2, r3
    5c54:	697b      	ldr	r3, [r7, #20]
    5c56:	4413      	add	r3, r2
    5c58:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    5c5a:	7afa      	ldrb	r2, [r7, #11]
    5c5c:	4613      	mov	r3, r2
    5c5e:	011b      	lsls	r3, r3, #4
    5c60:	1a9b      	subs	r3, r3, r2
    5c62:	009b      	lsls	r3, r3, #2
    5c64:	461a      	mov	r2, r3
    5c66:	697b      	ldr	r3, [r7, #20]
    5c68:	4413      	add	r3, r2
    5c6a:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    5c6c:	7abb      	ldrb	r3, [r7, #10]
    5c6e:	697a      	ldr	r2, [r7, #20]
    5c70:	4413      	add	r3, r2
    5c72:	617b      	str	r3, [r7, #20]

	return tmp;
    5c74:	697b      	ldr	r3, [r7, #20]
}
    5c76:	4618      	mov	r0, r3
    5c78:	3718      	adds	r7, #24
    5c7a:	46bd      	mov	sp, r7
    5c7c:	bd80      	pop	{r7, pc}
    5c7e:	bf00      	nop
    5c80:	00005969 	.word	0x00005969
    5c84:	01e13380 	.word	0x01e13380
    5c88:	00005991 	.word	0x00005991
    5c8c:	00015180 	.word	0x00015180

00005c90 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    5c90:	b580      	push	{r7, lr}
    5c92:	b084      	sub	sp, #16
    5c94:	af00      	add	r7, sp, #0
    5c96:	6078      	str	r0, [r7, #4]
    5c98:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    5c9a:	2300      	movs	r3, #0
    5c9c:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    5c9e:	687b      	ldr	r3, [r7, #4]
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	bf14      	ite	ne
    5ca4:	2301      	movne	r3, #1
    5ca6:	2300      	moveq	r3, #0
    5ca8:	b2db      	uxtb	r3, r3
    5caa:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    5cae:	4911      	ldr	r1, [pc, #68]	; (5cf4 <calendar_init+0x64>)
    5cb0:	4618      	mov	r0, r3
    5cb2:	4b11      	ldr	r3, [pc, #68]	; (5cf8 <calendar_init+0x68>)
    5cb4:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    5cb6:	687b      	ldr	r3, [r7, #4]
    5cb8:	681a      	ldr	r2, [r3, #0]
    5cba:	683b      	ldr	r3, [r7, #0]
    5cbc:	429a      	cmp	r2, r3
    5cbe:	d101      	bne.n	5cc4 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    5cc0:	2300      	movs	r3, #0
    5cc2:	e013      	b.n	5cec <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    5cc4:	687b      	ldr	r3, [r7, #4]
    5cc6:	681b      	ldr	r3, [r3, #0]
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d002      	beq.n	5cd2 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    5ccc:	f06f 0311 	mvn.w	r3, #17
    5cd0:	e00c      	b.n	5cec <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    5cd2:	687b      	ldr	r3, [r7, #4]
    5cd4:	683a      	ldr	r2, [r7, #0]
    5cd6:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	4618      	mov	r0, r3
    5cdc:	4b07      	ldr	r3, [pc, #28]	; (5cfc <calendar_init+0x6c>)
    5cde:	4798      	blx	r3
    5ce0:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    5ce2:	687b      	ldr	r3, [r7, #4]
    5ce4:	f240 72b2 	movw	r2, #1970	; 0x7b2
    5ce8:	619a      	str	r2, [r3, #24]

	return ret;
    5cea:	68fb      	ldr	r3, [r7, #12]
}
    5cec:	4618      	mov	r0, r3
    5cee:	3710      	adds	r7, #16
    5cf0:	46bd      	mov	sp, r7
    5cf2:	bd80      	pop	{r7, pc}
    5cf4:	0001f894 	.word	0x0001f894
    5cf8:	0000799d 	.word	0x0000799d
    5cfc:	0000a2dd 	.word	0x0000a2dd

00005d00 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    5d00:	b580      	push	{r7, lr}
    5d02:	b082      	sub	sp, #8
    5d04:	af00      	add	r7, sp, #0
    5d06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    5d08:	687b      	ldr	r3, [r7, #4]
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	bf14      	ite	ne
    5d0e:	2301      	movne	r3, #1
    5d10:	2300      	moveq	r3, #0
    5d12:	b2db      	uxtb	r3, r3
    5d14:	f240 12e5 	movw	r2, #485	; 0x1e5
    5d18:	4906      	ldr	r1, [pc, #24]	; (5d34 <calendar_enable+0x34>)
    5d1a:	4618      	mov	r0, r3
    5d1c:	4b06      	ldr	r3, [pc, #24]	; (5d38 <calendar_enable+0x38>)
    5d1e:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    5d20:	687b      	ldr	r3, [r7, #4]
    5d22:	4618      	mov	r0, r3
    5d24:	4b05      	ldr	r3, [pc, #20]	; (5d3c <calendar_enable+0x3c>)
    5d26:	4798      	blx	r3

	return ERR_NONE;
    5d28:	2300      	movs	r3, #0
}
    5d2a:	4618      	mov	r0, r3
    5d2c:	3708      	adds	r7, #8
    5d2e:	46bd      	mov	sp, r7
    5d30:	bd80      	pop	{r7, pc}
    5d32:	bf00      	nop
    5d34:	0001f894 	.word	0x0001f894
    5d38:	0000799d 	.word	0x0000799d
    5d3c:	0000a395 	.word	0x0000a395

00005d40 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    5d40:	b580      	push	{r7, lr}
    5d42:	b086      	sub	sp, #24
    5d44:	af00      	add	r7, sp, #0
    5d46:	6078      	str	r0, [r7, #4]
    5d48:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    5d4a:	687b      	ldr	r3, [r7, #4]
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	bf14      	ite	ne
    5d50:	2301      	movne	r3, #1
    5d52:	2300      	moveq	r3, #0
    5d54:	b2db      	uxtb	r3, r3
    5d56:	f44f 7203 	mov.w	r2, #524	; 0x20c
    5d5a:	4915      	ldr	r1, [pc, #84]	; (5db0 <calendar_set_time+0x70>)
    5d5c:	4618      	mov	r0, r3
    5d5e:	4b15      	ldr	r3, [pc, #84]	; (5db4 <calendar_set_time+0x74>)
    5d60:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    5d62:	687b      	ldr	r3, [r7, #4]
    5d64:	4618      	mov	r0, r3
    5d66:	4b14      	ldr	r3, [pc, #80]	; (5db8 <calendar_set_time+0x78>)
    5d68:	4798      	blx	r3
    5d6a:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    5d6c:	f107 0308 	add.w	r3, r7, #8
    5d70:	461a      	mov	r2, r3
    5d72:	6979      	ldr	r1, [r7, #20]
    5d74:	6878      	ldr	r0, [r7, #4]
    5d76:	4b11      	ldr	r3, [pc, #68]	; (5dbc <calendar_set_time+0x7c>)
    5d78:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    5d7a:	683b      	ldr	r3, [r7, #0]
    5d7c:	781b      	ldrb	r3, [r3, #0]
    5d7e:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    5d80:	683b      	ldr	r3, [r7, #0]
    5d82:	785b      	ldrb	r3, [r3, #1]
    5d84:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    5d86:	683b      	ldr	r3, [r7, #0]
    5d88:	789b      	ldrb	r3, [r3, #2]
    5d8a:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    5d8c:	f107 0308 	add.w	r3, r7, #8
    5d90:	4619      	mov	r1, r3
    5d92:	6878      	ldr	r0, [r7, #4]
    5d94:	4b0a      	ldr	r3, [pc, #40]	; (5dc0 <calendar_set_time+0x80>)
    5d96:	4798      	blx	r3
    5d98:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    5d9a:	687b      	ldr	r3, [r7, #4]
    5d9c:	6939      	ldr	r1, [r7, #16]
    5d9e:	4618      	mov	r0, r3
    5da0:	4b08      	ldr	r3, [pc, #32]	; (5dc4 <calendar_set_time+0x84>)
    5da2:	4798      	blx	r3

	return ERR_NONE;
    5da4:	2300      	movs	r3, #0
}
    5da6:	4618      	mov	r0, r3
    5da8:	3718      	adds	r7, #24
    5daa:	46bd      	mov	sp, r7
    5dac:	bd80      	pop	{r7, pc}
    5dae:	bf00      	nop
    5db0:	0001f894 	.word	0x0001f894
    5db4:	0000799d 	.word	0x0000799d
    5db8:	0000a431 	.word	0x0000a431
    5dbc:	00005a79 	.word	0x00005a79
    5dc0:	00005b85 	.word	0x00005b85
    5dc4:	0000a3e1 	.word	0x0000a3e1

00005dc8 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    5dc8:	b580      	push	{r7, lr}
    5dca:	b086      	sub	sp, #24
    5dcc:	af00      	add	r7, sp, #0
    5dce:	6078      	str	r0, [r7, #4]
    5dd0:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    5dd2:	687b      	ldr	r3, [r7, #4]
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	bf14      	ite	ne
    5dd8:	2301      	movne	r3, #1
    5dda:	2300      	moveq	r3, #0
    5ddc:	b2db      	uxtb	r3, r3
    5dde:	f44f 7209 	mov.w	r2, #548	; 0x224
    5de2:	4915      	ldr	r1, [pc, #84]	; (5e38 <calendar_set_date+0x70>)
    5de4:	4618      	mov	r0, r3
    5de6:	4b15      	ldr	r3, [pc, #84]	; (5e3c <calendar_set_date+0x74>)
    5de8:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    5dea:	687b      	ldr	r3, [r7, #4]
    5dec:	4618      	mov	r0, r3
    5dee:	4b14      	ldr	r3, [pc, #80]	; (5e40 <calendar_set_date+0x78>)
    5df0:	4798      	blx	r3
    5df2:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    5df4:	f107 0308 	add.w	r3, r7, #8
    5df8:	461a      	mov	r2, r3
    5dfa:	6979      	ldr	r1, [r7, #20]
    5dfc:	6878      	ldr	r0, [r7, #4]
    5dfe:	4b11      	ldr	r3, [pc, #68]	; (5e44 <calendar_set_date+0x7c>)
    5e00:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    5e02:	683b      	ldr	r3, [r7, #0]
    5e04:	781b      	ldrb	r3, [r3, #0]
    5e06:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    5e08:	683b      	ldr	r3, [r7, #0]
    5e0a:	785b      	ldrb	r3, [r3, #1]
    5e0c:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    5e0e:	683b      	ldr	r3, [r7, #0]
    5e10:	885b      	ldrh	r3, [r3, #2]
    5e12:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    5e14:	f107 0308 	add.w	r3, r7, #8
    5e18:	4619      	mov	r1, r3
    5e1a:	6878      	ldr	r0, [r7, #4]
    5e1c:	4b0a      	ldr	r3, [pc, #40]	; (5e48 <calendar_set_date+0x80>)
    5e1e:	4798      	blx	r3
    5e20:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    5e22:	687b      	ldr	r3, [r7, #4]
    5e24:	6939      	ldr	r1, [r7, #16]
    5e26:	4618      	mov	r0, r3
    5e28:	4b08      	ldr	r3, [pc, #32]	; (5e4c <calendar_set_date+0x84>)
    5e2a:	4798      	blx	r3

	return ERR_NONE;
    5e2c:	2300      	movs	r3, #0
}
    5e2e:	4618      	mov	r0, r3
    5e30:	3718      	adds	r7, #24
    5e32:	46bd      	mov	sp, r7
    5e34:	bd80      	pop	{r7, pc}
    5e36:	bf00      	nop
    5e38:	0001f894 	.word	0x0001f894
    5e3c:	0000799d 	.word	0x0000799d
    5e40:	0000a431 	.word	0x0000a431
    5e44:	00005a79 	.word	0x00005a79
    5e48:	00005b85 	.word	0x00005b85
    5e4c:	0000a3e1 	.word	0x0000a3e1

00005e50 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    5e50:	b580      	push	{r7, lr}
    5e52:	b084      	sub	sp, #16
    5e54:	af00      	add	r7, sp, #0
    5e56:	6078      	str	r0, [r7, #4]
    5e58:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    5e5a:	687b      	ldr	r3, [r7, #4]
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	bf14      	ite	ne
    5e60:	2301      	movne	r3, #1
    5e62:	2300      	moveq	r3, #0
    5e64:	b2db      	uxtb	r3, r3
    5e66:	f240 223b 	movw	r2, #571	; 0x23b
    5e6a:	4909      	ldr	r1, [pc, #36]	; (5e90 <calendar_get_date_time+0x40>)
    5e6c:	4618      	mov	r0, r3
    5e6e:	4b09      	ldr	r3, [pc, #36]	; (5e94 <calendar_get_date_time+0x44>)
    5e70:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    5e72:	687b      	ldr	r3, [r7, #4]
    5e74:	4618      	mov	r0, r3
    5e76:	4b08      	ldr	r3, [pc, #32]	; (5e98 <calendar_get_date_time+0x48>)
    5e78:	4798      	blx	r3
    5e7a:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    5e7c:	683a      	ldr	r2, [r7, #0]
    5e7e:	68f9      	ldr	r1, [r7, #12]
    5e80:	6878      	ldr	r0, [r7, #4]
    5e82:	4b06      	ldr	r3, [pc, #24]	; (5e9c <calendar_get_date_time+0x4c>)
    5e84:	4798      	blx	r3

	return ERR_NONE;
    5e86:	2300      	movs	r3, #0
}
    5e88:	4618      	mov	r0, r3
    5e8a:	3710      	adds	r7, #16
    5e8c:	46bd      	mov	sp, r7
    5e8e:	bd80      	pop	{r7, pc}
    5e90:	0001f894 	.word	0x0001f894
    5e94:	0000799d 	.word	0x0000799d
    5e98:	0000a431 	.word	0x0000a431
    5e9c:	00005a79 	.word	0x00005a79

00005ea0 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    5ea0:	b580      	push	{r7, lr}
    5ea2:	b084      	sub	sp, #16
    5ea4:	af00      	add	r7, sp, #0
    5ea6:	6078      	str	r0, [r7, #4]
    5ea8:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    5eaa:	687b      	ldr	r3, [r7, #4]
    5eac:	2b00      	cmp	r3, #0
    5eae:	d004      	beq.n	5eba <can_async_init+0x1a>
    5eb0:	683b      	ldr	r3, [r7, #0]
    5eb2:	2b00      	cmp	r3, #0
    5eb4:	d001      	beq.n	5eba <can_async_init+0x1a>
    5eb6:	2301      	movs	r3, #1
    5eb8:	e000      	b.n	5ebc <can_async_init+0x1c>
    5eba:	2300      	movs	r3, #0
    5ebc:	f003 0301 	and.w	r3, r3, #1
    5ec0:	b2db      	uxtb	r3, r3
    5ec2:	2241      	movs	r2, #65	; 0x41
    5ec4:	490e      	ldr	r1, [pc, #56]	; (5f00 <can_async_init+0x60>)
    5ec6:	4618      	mov	r0, r3
    5ec8:	4b0e      	ldr	r3, [pc, #56]	; (5f04 <can_async_init+0x64>)
    5eca:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    5ecc:	687b      	ldr	r3, [r7, #4]
    5ece:	6839      	ldr	r1, [r7, #0]
    5ed0:	4618      	mov	r0, r3
    5ed2:	4b0d      	ldr	r3, [pc, #52]	; (5f08 <can_async_init+0x68>)
    5ed4:	4798      	blx	r3
    5ed6:	60f8      	str	r0, [r7, #12]
	if (rc) {
    5ed8:	68fb      	ldr	r3, [r7, #12]
    5eda:	2b00      	cmp	r3, #0
    5edc:	d001      	beq.n	5ee2 <can_async_init+0x42>
		return rc;
    5ede:	68fb      	ldr	r3, [r7, #12]
    5ee0:	e009      	b.n	5ef6 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    5ee2:	687b      	ldr	r3, [r7, #4]
    5ee4:	4a09      	ldr	r2, [pc, #36]	; (5f0c <can_async_init+0x6c>)
    5ee6:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    5ee8:	687b      	ldr	r3, [r7, #4]
    5eea:	4a09      	ldr	r2, [pc, #36]	; (5f10 <can_async_init+0x70>)
    5eec:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	4a08      	ldr	r2, [pc, #32]	; (5f14 <can_async_init+0x74>)
    5ef2:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    5ef4:	2300      	movs	r3, #0
}
    5ef6:	4618      	mov	r0, r3
    5ef8:	3710      	adds	r7, #16
    5efa:	46bd      	mov	sp, r7
    5efc:	bd80      	pop	{r7, pc}
    5efe:	bf00      	nop
    5f00:	0001f8b0 	.word	0x0001f8b0
    5f04:	0000799d 	.word	0x0000799d
    5f08:	00007ef9 	.word	0x00007ef9
    5f0c:	00005f19 	.word	0x00005f19
    5f10:	00005f3d 	.word	0x00005f3d
    5f14:	00005f61 	.word	0x00005f61

00005f18 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    5f18:	b580      	push	{r7, lr}
    5f1a:	b084      	sub	sp, #16
    5f1c:	af00      	add	r7, sp, #0
    5f1e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    5f24:	68fb      	ldr	r3, [r7, #12]
    5f26:	69db      	ldr	r3, [r3, #28]
    5f28:	2b00      	cmp	r3, #0
    5f2a:	d003      	beq.n	5f34 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    5f2c:	68fb      	ldr	r3, [r7, #12]
    5f2e:	69db      	ldr	r3, [r3, #28]
    5f30:	68f8      	ldr	r0, [r7, #12]
    5f32:	4798      	blx	r3
	}
}
    5f34:	bf00      	nop
    5f36:	3710      	adds	r7, #16
    5f38:	46bd      	mov	sp, r7
    5f3a:	bd80      	pop	{r7, pc}

00005f3c <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    5f3c:	b580      	push	{r7, lr}
    5f3e:	b084      	sub	sp, #16
    5f40:	af00      	add	r7, sp, #0
    5f42:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5f44:	687b      	ldr	r3, [r7, #4]
    5f46:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    5f48:	68fb      	ldr	r3, [r7, #12]
    5f4a:	6a1b      	ldr	r3, [r3, #32]
    5f4c:	2b00      	cmp	r3, #0
    5f4e:	d003      	beq.n	5f58 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    5f50:	68fb      	ldr	r3, [r7, #12]
    5f52:	6a1b      	ldr	r3, [r3, #32]
    5f54:	68f8      	ldr	r0, [r7, #12]
    5f56:	4798      	blx	r3
	}
}
    5f58:	bf00      	nop
    5f5a:	3710      	adds	r7, #16
    5f5c:	46bd      	mov	sp, r7
    5f5e:	bd80      	pop	{r7, pc}

00005f60 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    5f60:	b580      	push	{r7, lr}
    5f62:	b084      	sub	sp, #16
    5f64:	af00      	add	r7, sp, #0
    5f66:	6078      	str	r0, [r7, #4]
    5f68:	460b      	mov	r3, r1
    5f6a:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    5f6c:	687b      	ldr	r3, [r7, #4]
    5f6e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    5f70:	68fb      	ldr	r3, [r7, #12]
    5f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f74:	2b00      	cmp	r3, #0
    5f76:	d005      	beq.n	5f84 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    5f78:	68fb      	ldr	r3, [r7, #12]
    5f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f7c:	78fa      	ldrb	r2, [r7, #3]
    5f7e:	4611      	mov	r1, r2
    5f80:	68f8      	ldr	r0, [r7, #12]
    5f82:	4798      	blx	r3
	}
}
    5f84:	bf00      	nop
    5f86:	3710      	adds	r7, #16
    5f88:	46bd      	mov	sp, r7
    5f8a:	bd80      	pop	{r7, pc}

00005f8c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    5f8c:	b580      	push	{r7, lr}
    5f8e:	b082      	sub	sp, #8
    5f90:	af00      	add	r7, sp, #0
    5f92:	6078      	str	r0, [r7, #4]
    5f94:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    5f96:	687b      	ldr	r3, [r7, #4]
    5f98:	2b00      	cmp	r3, #0
    5f9a:	d004      	beq.n	5fa6 <crc_sync_init+0x1a>
    5f9c:	683b      	ldr	r3, [r7, #0]
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d001      	beq.n	5fa6 <crc_sync_init+0x1a>
    5fa2:	2301      	movs	r3, #1
    5fa4:	e000      	b.n	5fa8 <crc_sync_init+0x1c>
    5fa6:	2300      	movs	r3, #0
    5fa8:	f003 0301 	and.w	r3, r3, #1
    5fac:	b2db      	uxtb	r3, r3
    5fae:	222b      	movs	r2, #43	; 0x2b
    5fb0:	4906      	ldr	r1, [pc, #24]	; (5fcc <crc_sync_init+0x40>)
    5fb2:	4618      	mov	r0, r3
    5fb4:	4b06      	ldr	r3, [pc, #24]	; (5fd0 <crc_sync_init+0x44>)
    5fb6:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    5fb8:	687b      	ldr	r3, [r7, #4]
    5fba:	6839      	ldr	r1, [r7, #0]
    5fbc:	4618      	mov	r0, r3
    5fbe:	4b05      	ldr	r3, [pc, #20]	; (5fd4 <crc_sync_init+0x48>)
    5fc0:	4798      	blx	r3
    5fc2:	4603      	mov	r3, r0
}
    5fc4:	4618      	mov	r0, r3
    5fc6:	3708      	adds	r7, #8
    5fc8:	46bd      	mov	sp, r7
    5fca:	bd80      	pop	{r7, pc}
    5fcc:	0001f8cc 	.word	0x0001f8cc
    5fd0:	0000799d 	.word	0x0000799d
    5fd4:	00008729 	.word	0x00008729

00005fd8 <crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t crc_sync_enable(struct crc_sync_descriptor *const descr)
{
    5fd8:	b580      	push	{r7, lr}
    5fda:	b082      	sub	sp, #8
    5fdc:	af00      	add	r7, sp, #0
    5fde:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5fe0:	687b      	ldr	r3, [r7, #4]
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	bf14      	ite	ne
    5fe6:	2301      	movne	r3, #1
    5fe8:	2300      	moveq	r3, #0
    5fea:	b2db      	uxtb	r3, r3
    5fec:	223f      	movs	r2, #63	; 0x3f
    5fee:	4906      	ldr	r1, [pc, #24]	; (6008 <crc_sync_enable+0x30>)
    5ff0:	4618      	mov	r0, r3
    5ff2:	4b06      	ldr	r3, [pc, #24]	; (600c <crc_sync_enable+0x34>)
    5ff4:	4798      	blx	r3

	return _crc_sync_enable(&descr->dev);
    5ff6:	687b      	ldr	r3, [r7, #4]
    5ff8:	4618      	mov	r0, r3
    5ffa:	4b05      	ldr	r3, [pc, #20]	; (6010 <crc_sync_enable+0x38>)
    5ffc:	4798      	blx	r3
    5ffe:	4603      	mov	r3, r0
}
    6000:	4618      	mov	r0, r3
    6002:	3708      	adds	r7, #8
    6004:	46bd      	mov	sp, r7
    6006:	bd80      	pop	{r7, pc}
    6008:	0001f8cc 	.word	0x0001f8cc
    600c:	0000799d 	.word	0x0000799d
    6010:	00008747 	.word	0x00008747

00006014 <crc_sync_crc32>:
/**
 * \brief Calculate CRC32 value of the buffer
 */
int32_t crc_sync_crc32(struct crc_sync_descriptor *const descr, uint32_t *const data, const uint32_t len,
                       uint32_t *pcrc)
{
    6014:	b590      	push	{r4, r7, lr}
    6016:	b085      	sub	sp, #20
    6018:	af00      	add	r7, sp, #0
    601a:	60f8      	str	r0, [r7, #12]
    601c:	60b9      	str	r1, [r7, #8]
    601e:	607a      	str	r2, [r7, #4]
    6020:	603b      	str	r3, [r7, #0]
	ASSERT(descr && data && len && pcrc);
    6022:	68fb      	ldr	r3, [r7, #12]
    6024:	2b00      	cmp	r3, #0
    6026:	d00a      	beq.n	603e <crc_sync_crc32+0x2a>
    6028:	68bb      	ldr	r3, [r7, #8]
    602a:	2b00      	cmp	r3, #0
    602c:	d007      	beq.n	603e <crc_sync_crc32+0x2a>
    602e:	687b      	ldr	r3, [r7, #4]
    6030:	2b00      	cmp	r3, #0
    6032:	d004      	beq.n	603e <crc_sync_crc32+0x2a>
    6034:	683b      	ldr	r3, [r7, #0]
    6036:	2b00      	cmp	r3, #0
    6038:	d001      	beq.n	603e <crc_sync_crc32+0x2a>
    603a:	2301      	movs	r3, #1
    603c:	e000      	b.n	6040 <crc_sync_crc32+0x2c>
    603e:	2300      	movs	r3, #0
    6040:	f003 0301 	and.w	r3, r3, #1
    6044:	b2db      	uxtb	r3, r3
    6046:	2253      	movs	r2, #83	; 0x53
    6048:	4907      	ldr	r1, [pc, #28]	; (6068 <crc_sync_crc32+0x54>)
    604a:	4618      	mov	r0, r3
    604c:	4b07      	ldr	r3, [pc, #28]	; (606c <crc_sync_crc32+0x58>)
    604e:	4798      	blx	r3

	return _crc_sync_crc32(&descr->dev, data, len, pcrc);
    6050:	68f8      	ldr	r0, [r7, #12]
    6052:	683b      	ldr	r3, [r7, #0]
    6054:	687a      	ldr	r2, [r7, #4]
    6056:	68b9      	ldr	r1, [r7, #8]
    6058:	4c05      	ldr	r4, [pc, #20]	; (6070 <crc_sync_crc32+0x5c>)
    605a:	47a0      	blx	r4
    605c:	4603      	mov	r3, r0
}
    605e:	4618      	mov	r0, r3
    6060:	3714      	adds	r7, #20
    6062:	46bd      	mov	sp, r7
    6064:	bd90      	pop	{r4, r7, pc}
    6066:	bf00      	nop
    6068:	0001f8cc 	.word	0x0001f8cc
    606c:	0000799d 	.word	0x0000799d
    6070:	0000875d 	.word	0x0000875d

00006074 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    6074:	b590      	push	{r4, r7, lr}
    6076:	b083      	sub	sp, #12
    6078:	af00      	add	r7, sp, #0
    607a:	4603      	mov	r3, r0
    607c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    607e:	4b07      	ldr	r3, [pc, #28]	; (609c <delay_us+0x28>)
    6080:	681c      	ldr	r4, [r3, #0]
    6082:	88fb      	ldrh	r3, [r7, #6]
    6084:	4618      	mov	r0, r3
    6086:	4b06      	ldr	r3, [pc, #24]	; (60a0 <delay_us+0x2c>)
    6088:	4798      	blx	r3
    608a:	4603      	mov	r3, r0
    608c:	4619      	mov	r1, r3
    608e:	4620      	mov	r0, r4
    6090:	4b04      	ldr	r3, [pc, #16]	; (60a4 <delay_us+0x30>)
    6092:	4798      	blx	r3
}
    6094:	bf00      	nop
    6096:	370c      	adds	r7, #12
    6098:	46bd      	mov	sp, r7
    609a:	bd90      	pop	{r4, r7, pc}
    609c:	2000870c 	.word	0x2000870c
    60a0:	00008351 	.word	0x00008351
    60a4:	000084e9 	.word	0x000084e9

000060a8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    60a8:	b590      	push	{r4, r7, lr}
    60aa:	b083      	sub	sp, #12
    60ac:	af00      	add	r7, sp, #0
    60ae:	4603      	mov	r3, r0
    60b0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    60b2:	4b07      	ldr	r3, [pc, #28]	; (60d0 <delay_ms+0x28>)
    60b4:	681c      	ldr	r4, [r3, #0]
    60b6:	88fb      	ldrh	r3, [r7, #6]
    60b8:	4618      	mov	r0, r3
    60ba:	4b06      	ldr	r3, [pc, #24]	; (60d4 <delay_ms+0x2c>)
    60bc:	4798      	blx	r3
    60be:	4603      	mov	r3, r0
    60c0:	4619      	mov	r1, r3
    60c2:	4620      	mov	r0, r4
    60c4:	4b04      	ldr	r3, [pc, #16]	; (60d8 <delay_ms+0x30>)
    60c6:	4798      	blx	r3
}
    60c8:	bf00      	nop
    60ca:	370c      	adds	r7, #12
    60cc:	46bd      	mov	sp, r7
    60ce:	bd90      	pop	{r4, r7, pc}
    60d0:	2000870c 	.word	0x2000870c
    60d4:	000084bd 	.word	0x000084bd
    60d8:	000084e9 	.word	0x000084e9

000060dc <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    60dc:	b580      	push	{r7, lr}
    60de:	af00      	add	r7, sp, #0
	return _event_system_init();
    60e0:	4b02      	ldr	r3, [pc, #8]	; (60ec <event_system_init+0x10>)
    60e2:	4798      	blx	r3
    60e4:	4603      	mov	r3, r0
}
    60e6:	4618      	mov	r0, r3
    60e8:	bd80      	pop	{r7, pc}
    60ea:	bf00      	nop
    60ec:	00008fd1 	.word	0x00008fd1

000060f0 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    60f0:	b580      	push	{r7, lr}
    60f2:	b082      	sub	sp, #8
    60f4:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    60f6:	2300      	movs	r3, #0
    60f8:	80fb      	strh	r3, [r7, #6]
    60fa:	e00e      	b.n	611a <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    60fc:	88fb      	ldrh	r3, [r7, #6]
    60fe:	4a0c      	ldr	r2, [pc, #48]	; (6130 <ext_irq_init+0x40>)
    6100:	00db      	lsls	r3, r3, #3
    6102:	4413      	add	r3, r2
    6104:	f04f 32ff 	mov.w	r2, #4294967295
    6108:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    610a:	88fb      	ldrh	r3, [r7, #6]
    610c:	4a08      	ldr	r2, [pc, #32]	; (6130 <ext_irq_init+0x40>)
    610e:	2100      	movs	r1, #0
    6110:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    6114:	88fb      	ldrh	r3, [r7, #6]
    6116:	3301      	adds	r3, #1
    6118:	80fb      	strh	r3, [r7, #6]
    611a:	88fb      	ldrh	r3, [r7, #6]
    611c:	2b06      	cmp	r3, #6
    611e:	d9ed      	bls.n	60fc <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    6120:	4804      	ldr	r0, [pc, #16]	; (6134 <ext_irq_init+0x44>)
    6122:	4b05      	ldr	r3, [pc, #20]	; (6138 <ext_irq_init+0x48>)
    6124:	4798      	blx	r3
    6126:	4603      	mov	r3, r0
}
    6128:	4618      	mov	r0, r3
    612a:	3708      	adds	r7, #8
    612c:	46bd      	mov	sp, r7
    612e:	bd80      	pop	{r7, pc}
    6130:	20008710 	.word	0x20008710
    6134:	00006295 	.word	0x00006295
    6138:	00008b99 	.word	0x00008b99

0000613c <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    613c:	b580      	push	{r7, lr}
    613e:	b086      	sub	sp, #24
    6140:	af00      	add	r7, sp, #0
    6142:	6078      	str	r0, [r7, #4]
    6144:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    6146:	2300      	movs	r3, #0
    6148:	75fb      	strb	r3, [r7, #23]
    614a:	2300      	movs	r3, #0
    614c:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    614e:	2300      	movs	r3, #0
    6150:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    6152:	e012      	b.n	617a <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    6154:	7dfb      	ldrb	r3, [r7, #23]
    6156:	4a4d      	ldr	r2, [pc, #308]	; (628c <ext_irq_register+0x150>)
    6158:	00db      	lsls	r3, r3, #3
    615a:	4413      	add	r3, r2
    615c:	685a      	ldr	r2, [r3, #4]
    615e:	687b      	ldr	r3, [r7, #4]
    6160:	429a      	cmp	r2, r3
    6162:	d107      	bne.n	6174 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    6164:	7dfb      	ldrb	r3, [r7, #23]
    6166:	4949      	ldr	r1, [pc, #292]	; (628c <ext_irq_register+0x150>)
    6168:	683a      	ldr	r2, [r7, #0]
    616a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    616e:	2301      	movs	r3, #1
    6170:	757b      	strb	r3, [r7, #21]
			break;
    6172:	e005      	b.n	6180 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    6174:	7dfb      	ldrb	r3, [r7, #23]
    6176:	3301      	adds	r3, #1
    6178:	75fb      	strb	r3, [r7, #23]
    617a:	7dfb      	ldrb	r3, [r7, #23]
    617c:	2b06      	cmp	r3, #6
    617e:	d9e9      	bls.n	6154 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    6180:	683b      	ldr	r3, [r7, #0]
    6182:	2b00      	cmp	r3, #0
    6184:	d10e      	bne.n	61a4 <ext_irq_register+0x68>
		if (!found) {
    6186:	7d7b      	ldrb	r3, [r7, #21]
    6188:	f083 0301 	eor.w	r3, r3, #1
    618c:	b2db      	uxtb	r3, r3
    618e:	2b00      	cmp	r3, #0
    6190:	d002      	beq.n	6198 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    6192:	f06f 030c 	mvn.w	r3, #12
    6196:	e074      	b.n	6282 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    6198:	2100      	movs	r1, #0
    619a:	6878      	ldr	r0, [r7, #4]
    619c:	4b3c      	ldr	r3, [pc, #240]	; (6290 <ext_irq_register+0x154>)
    619e:	4798      	blx	r3
    61a0:	4603      	mov	r3, r0
    61a2:	e06e      	b.n	6282 <ext_irq_register+0x146>
	}

	if (!found) {
    61a4:	7d7b      	ldrb	r3, [r7, #21]
    61a6:	f083 0301 	eor.w	r3, r3, #1
    61aa:	b2db      	uxtb	r3, r3
    61ac:	2b00      	cmp	r3, #0
    61ae:	d05a      	beq.n	6266 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    61b0:	2300      	movs	r3, #0
    61b2:	75fb      	strb	r3, [r7, #23]
    61b4:	e016      	b.n	61e4 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    61b6:	7dfb      	ldrb	r3, [r7, #23]
    61b8:	4a34      	ldr	r2, [pc, #208]	; (628c <ext_irq_register+0x150>)
    61ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    61be:	2b00      	cmp	r3, #0
    61c0:	d10d      	bne.n	61de <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    61c2:	7dfb      	ldrb	r3, [r7, #23]
    61c4:	4931      	ldr	r1, [pc, #196]	; (628c <ext_irq_register+0x150>)
    61c6:	683a      	ldr	r2, [r7, #0]
    61c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    61cc:	7dfb      	ldrb	r3, [r7, #23]
    61ce:	4a2f      	ldr	r2, [pc, #188]	; (628c <ext_irq_register+0x150>)
    61d0:	00db      	lsls	r3, r3, #3
    61d2:	4413      	add	r3, r2
    61d4:	687a      	ldr	r2, [r7, #4]
    61d6:	605a      	str	r2, [r3, #4]
				found           = true;
    61d8:	2301      	movs	r3, #1
    61da:	757b      	strb	r3, [r7, #21]
				break;
    61dc:	e005      	b.n	61ea <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    61de:	7dfb      	ldrb	r3, [r7, #23]
    61e0:	3301      	adds	r3, #1
    61e2:	75fb      	strb	r3, [r7, #23]
    61e4:	7dfb      	ldrb	r3, [r7, #23]
    61e6:	2b06      	cmp	r3, #6
    61e8:	d9e5      	bls.n	61b6 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    61ea:	e036      	b.n	625a <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    61ec:	7dfb      	ldrb	r3, [r7, #23]
    61ee:	4a27      	ldr	r2, [pc, #156]	; (628c <ext_irq_register+0x150>)
    61f0:	00db      	lsls	r3, r3, #3
    61f2:	4413      	add	r3, r2
    61f4:	685a      	ldr	r2, [r3, #4]
    61f6:	7dbb      	ldrb	r3, [r7, #22]
    61f8:	4924      	ldr	r1, [pc, #144]	; (628c <ext_irq_register+0x150>)
    61fa:	00db      	lsls	r3, r3, #3
    61fc:	440b      	add	r3, r1
    61fe:	685b      	ldr	r3, [r3, #4]
    6200:	429a      	cmp	r2, r3
    6202:	d227      	bcs.n	6254 <ext_irq_register+0x118>
    6204:	7dbb      	ldrb	r3, [r7, #22]
    6206:	4a21      	ldr	r2, [pc, #132]	; (628c <ext_irq_register+0x150>)
    6208:	00db      	lsls	r3, r3, #3
    620a:	4413      	add	r3, r2
    620c:	685b      	ldr	r3, [r3, #4]
    620e:	f1b3 3fff 	cmp.w	r3, #4294967295
    6212:	d01f      	beq.n	6254 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    6214:	7dbb      	ldrb	r3, [r7, #22]
    6216:	491d      	ldr	r1, [pc, #116]	; (628c <ext_irq_register+0x150>)
    6218:	f107 020c 	add.w	r2, r7, #12
    621c:	00db      	lsls	r3, r3, #3
    621e:	440b      	add	r3, r1
    6220:	e893 0003 	ldmia.w	r3, {r0, r1}
    6224:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    6228:	7dbb      	ldrb	r3, [r7, #22]
    622a:	7dfa      	ldrb	r2, [r7, #23]
    622c:	4817      	ldr	r0, [pc, #92]	; (628c <ext_irq_register+0x150>)
    622e:	4917      	ldr	r1, [pc, #92]	; (628c <ext_irq_register+0x150>)
    6230:	00db      	lsls	r3, r3, #3
    6232:	4403      	add	r3, r0
    6234:	00d2      	lsls	r2, r2, #3
    6236:	440a      	add	r2, r1
    6238:	e892 0003 	ldmia.w	r2, {r0, r1}
    623c:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    6240:	7dfb      	ldrb	r3, [r7, #23]
    6242:	4a12      	ldr	r2, [pc, #72]	; (628c <ext_irq_register+0x150>)
    6244:	00db      	lsls	r3, r3, #3
    6246:	4413      	add	r3, r2
    6248:	f107 020c 	add.w	r2, r7, #12
    624c:	e892 0003 	ldmia.w	r2, {r0, r1}
    6250:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    6254:	7dbb      	ldrb	r3, [r7, #22]
    6256:	3301      	adds	r3, #1
    6258:	75bb      	strb	r3, [r7, #22]
    625a:	7dbb      	ldrb	r3, [r7, #22]
    625c:	2b06      	cmp	r3, #6
    625e:	d802      	bhi.n	6266 <ext_irq_register+0x12a>
    6260:	7dfb      	ldrb	r3, [r7, #23]
    6262:	2b06      	cmp	r3, #6
    6264:	d9c2      	bls.n	61ec <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    6266:	7d7b      	ldrb	r3, [r7, #21]
    6268:	f083 0301 	eor.w	r3, r3, #1
    626c:	b2db      	uxtb	r3, r3
    626e:	2b00      	cmp	r3, #0
    6270:	d002      	beq.n	6278 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    6272:	f06f 030c 	mvn.w	r3, #12
    6276:	e004      	b.n	6282 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    6278:	2101      	movs	r1, #1
    627a:	6878      	ldr	r0, [r7, #4]
    627c:	4b04      	ldr	r3, [pc, #16]	; (6290 <ext_irq_register+0x154>)
    627e:	4798      	blx	r3
    6280:	4603      	mov	r3, r0
}
    6282:	4618      	mov	r0, r3
    6284:	3718      	adds	r7, #24
    6286:	46bd      	mov	sp, r7
    6288:	bd80      	pop	{r7, pc}
    628a:	bf00      	nop
    628c:	20008710 	.word	0x20008710
    6290:	00008d09 	.word	0x00008d09

00006294 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    6294:	b580      	push	{r7, lr}
    6296:	b084      	sub	sp, #16
    6298:	af00      	add	r7, sp, #0
    629a:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    629c:	2300      	movs	r3, #0
    629e:	73fb      	strb	r3, [r7, #15]
    62a0:	2307      	movs	r3, #7
    62a2:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    62a4:	e02a      	b.n	62fc <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    62a6:	7bba      	ldrb	r2, [r7, #14]
    62a8:	7bfb      	ldrb	r3, [r7, #15]
    62aa:	4413      	add	r3, r2
    62ac:	105b      	asrs	r3, r3, #1
    62ae:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    62b0:	7b7b      	ldrb	r3, [r7, #13]
    62b2:	2b06      	cmp	r3, #6
    62b4:	d827      	bhi.n	6306 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    62b6:	7b7b      	ldrb	r3, [r7, #13]
    62b8:	4a16      	ldr	r2, [pc, #88]	; (6314 <process_ext_irq+0x80>)
    62ba:	00db      	lsls	r3, r3, #3
    62bc:	4413      	add	r3, r2
    62be:	685a      	ldr	r2, [r3, #4]
    62c0:	687b      	ldr	r3, [r7, #4]
    62c2:	429a      	cmp	r2, r3
    62c4:	d10b      	bne.n	62de <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    62c6:	7b7b      	ldrb	r3, [r7, #13]
    62c8:	4a12      	ldr	r2, [pc, #72]	; (6314 <process_ext_irq+0x80>)
    62ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    62ce:	2b00      	cmp	r3, #0
    62d0:	d01b      	beq.n	630a <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    62d2:	7b7b      	ldrb	r3, [r7, #13]
    62d4:	4a0f      	ldr	r2, [pc, #60]	; (6314 <process_ext_irq+0x80>)
    62d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    62da:	4798      	blx	r3
			}
			return;
    62dc:	e015      	b.n	630a <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    62de:	7b7b      	ldrb	r3, [r7, #13]
    62e0:	4a0c      	ldr	r2, [pc, #48]	; (6314 <process_ext_irq+0x80>)
    62e2:	00db      	lsls	r3, r3, #3
    62e4:	4413      	add	r3, r2
    62e6:	685a      	ldr	r2, [r3, #4]
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	429a      	cmp	r2, r3
    62ec:	d203      	bcs.n	62f6 <process_ext_irq+0x62>
			lower = middle + 1;
    62ee:	7b7b      	ldrb	r3, [r7, #13]
    62f0:	3301      	adds	r3, #1
    62f2:	73fb      	strb	r3, [r7, #15]
    62f4:	e002      	b.n	62fc <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    62f6:	7b7b      	ldrb	r3, [r7, #13]
    62f8:	3b01      	subs	r3, #1
    62fa:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    62fc:	7bba      	ldrb	r2, [r7, #14]
    62fe:	7bfb      	ldrb	r3, [r7, #15]
    6300:	429a      	cmp	r2, r3
    6302:	d2d0      	bcs.n	62a6 <process_ext_irq+0x12>
    6304:	e002      	b.n	630c <process_ext_irq+0x78>
			return;
    6306:	bf00      	nop
    6308:	e000      	b.n	630c <process_ext_irq+0x78>
			return;
    630a:	bf00      	nop
		}
	}
}
    630c:	3710      	adds	r7, #16
    630e:	46bd      	mov	sp, r7
    6310:	bd80      	pop	{r7, pc}
    6312:	bf00      	nop
    6314:	20008710 	.word	0x20008710

00006318 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    6318:	b580      	push	{r7, lr}
    631a:	b084      	sub	sp, #16
    631c:	af00      	add	r7, sp, #0
    631e:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    6320:	687b      	ldr	r3, [r7, #4]
    6322:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    6324:	687b      	ldr	r3, [r7, #4]
    6326:	885b      	ldrh	r3, [r3, #2]
    6328:	b29b      	uxth	r3, r3
    632a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    632e:	2b00      	cmp	r3, #0
    6330:	d107      	bne.n	6342 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    6332:	68fb      	ldr	r3, [r7, #12]
    6334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6336:	2b00      	cmp	r3, #0
    6338:	d003      	beq.n	6342 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    633a:	68fb      	ldr	r3, [r7, #12]
    633c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    633e:	68f8      	ldr	r0, [r7, #12]
    6340:	4798      	blx	r3
		}
	}
}
    6342:	bf00      	nop
    6344:	3710      	adds	r7, #16
    6346:	46bd      	mov	sp, r7
    6348:	bd80      	pop	{r7, pc}

0000634a <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    634a:	b580      	push	{r7, lr}
    634c:	b084      	sub	sp, #16
    634e:	af00      	add	r7, sp, #0
    6350:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    6352:	687b      	ldr	r3, [r7, #4]
    6354:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    6356:	687b      	ldr	r3, [r7, #4]
    6358:	885b      	ldrh	r3, [r3, #2]
    635a:	b29b      	uxth	r3, r3
    635c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6360:	2b00      	cmp	r3, #0
    6362:	d107      	bne.n	6374 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    6364:	68fb      	ldr	r3, [r7, #12]
    6366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6368:	2b00      	cmp	r3, #0
    636a:	d003      	beq.n	6374 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    636c:	68fb      	ldr	r3, [r7, #12]
    636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6370:	68f8      	ldr	r0, [r7, #12]
    6372:	4798      	blx	r3
		}
	}
}
    6374:	bf00      	nop
    6376:	3710      	adds	r7, #16
    6378:	46bd      	mov	sp, r7
    637a:	bd80      	pop	{r7, pc}

0000637c <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    637c:	b580      	push	{r7, lr}
    637e:	b084      	sub	sp, #16
    6380:	af00      	add	r7, sp, #0
    6382:	6078      	str	r0, [r7, #4]
    6384:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    6386:	687b      	ldr	r3, [r7, #4]
    6388:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    638a:	687b      	ldr	r3, [r7, #4]
    638c:	885b      	ldrh	r3, [r3, #2]
    638e:	b29b      	uxth	r3, r3
    6390:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6394:	2b00      	cmp	r3, #0
    6396:	d108      	bne.n	63aa <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    6398:	68fb      	ldr	r3, [r7, #12]
    639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    639c:	2b00      	cmp	r3, #0
    639e:	d004      	beq.n	63aa <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    63a0:	68fb      	ldr	r3, [r7, #12]
    63a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    63a4:	6839      	ldr	r1, [r7, #0]
    63a6:	68f8      	ldr	r0, [r7, #12]
    63a8:	4798      	blx	r3
		}
	}
}
    63aa:	bf00      	nop
    63ac:	3710      	adds	r7, #16
    63ae:	46bd      	mov	sp, r7
    63b0:	bd80      	pop	{r7, pc}
	...

000063b4 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    63b4:	b580      	push	{r7, lr}
    63b6:	b08a      	sub	sp, #40	; 0x28
    63b8:	af00      	add	r7, sp, #0
    63ba:	60f8      	str	r0, [r7, #12]
    63bc:	60b9      	str	r1, [r7, #8]
    63be:	4613      	mov	r3, r2
    63c0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    63c2:	68fb      	ldr	r3, [r7, #12]
    63c4:	3b28      	subs	r3, #40	; 0x28
    63c6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    63c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63ca:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    63cc:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    63ce:	88fb      	ldrh	r3, [r7, #6]
    63d0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    63d2:	f248 0301 	movw	r3, #32769	; 0x8001
    63d6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    63d8:	68bb      	ldr	r3, [r7, #8]
    63da:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    63dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63de:	f107 0214 	add.w	r2, r7, #20
    63e2:	4611      	mov	r1, r2
    63e4:	4618      	mov	r0, r3
    63e6:	4b06      	ldr	r3, [pc, #24]	; (6400 <i2c_m_async_read+0x4c>)
    63e8:	4798      	blx	r3
    63ea:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    63ec:	6a3b      	ldr	r3, [r7, #32]
    63ee:	2b00      	cmp	r3, #0
    63f0:	d001      	beq.n	63f6 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    63f2:	6a3b      	ldr	r3, [r7, #32]
    63f4:	e000      	b.n	63f8 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    63f6:	88fb      	ldrh	r3, [r7, #6]
}
    63f8:	4618      	mov	r0, r3
    63fa:	3728      	adds	r7, #40	; 0x28
    63fc:	46bd      	mov	sp, r7
    63fe:	bd80      	pop	{r7, pc}
    6400:	0000b315 	.word	0x0000b315

00006404 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    6404:	b580      	push	{r7, lr}
    6406:	b08a      	sub	sp, #40	; 0x28
    6408:	af00      	add	r7, sp, #0
    640a:	60f8      	str	r0, [r7, #12]
    640c:	60b9      	str	r1, [r7, #8]
    640e:	4613      	mov	r3, r2
    6410:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    6412:	68fb      	ldr	r3, [r7, #12]
    6414:	3b28      	subs	r3, #40	; 0x28
    6416:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    6418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    641a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    641c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    641e:	88fb      	ldrh	r3, [r7, #6]
    6420:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    6422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    6426:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    6428:	68bb      	ldr	r3, [r7, #8]
    642a:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    642e:	f107 0214 	add.w	r2, r7, #20
    6432:	4611      	mov	r1, r2
    6434:	4618      	mov	r0, r3
    6436:	4b06      	ldr	r3, [pc, #24]	; (6450 <i2c_m_async_write+0x4c>)
    6438:	4798      	blx	r3
    643a:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    643c:	6a3b      	ldr	r3, [r7, #32]
    643e:	2b00      	cmp	r3, #0
    6440:	d001      	beq.n	6446 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    6442:	6a3b      	ldr	r3, [r7, #32]
    6444:	e000      	b.n	6448 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    6446:	88fb      	ldrh	r3, [r7, #6]
}
    6448:	4618      	mov	r0, r3
    644a:	3728      	adds	r7, #40	; 0x28
    644c:	46bd      	mov	sp, r7
    644e:	bd80      	pop	{r7, pc}
    6450:	0000b315 	.word	0x0000b315

00006454 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    6454:	b580      	push	{r7, lr}
    6456:	b084      	sub	sp, #16
    6458:	af00      	add	r7, sp, #0
    645a:	6078      	str	r0, [r7, #4]
    645c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    645e:	687b      	ldr	r3, [r7, #4]
    6460:	2b00      	cmp	r3, #0
    6462:	bf14      	ite	ne
    6464:	2301      	movne	r3, #1
    6466:	2300      	moveq	r3, #0
    6468:	b2db      	uxtb	r3, r3
    646a:	2289      	movs	r2, #137	; 0x89
    646c:	4915      	ldr	r1, [pc, #84]	; (64c4 <i2c_m_async_init+0x70>)
    646e:	4618      	mov	r0, r3
    6470:	4b15      	ldr	r3, [pc, #84]	; (64c8 <i2c_m_async_init+0x74>)
    6472:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    6474:	687b      	ldr	r3, [r7, #4]
    6476:	6839      	ldr	r1, [r7, #0]
    6478:	4618      	mov	r0, r3
    647a:	4b14      	ldr	r3, [pc, #80]	; (64cc <i2c_m_async_init+0x78>)
    647c:	4798      	blx	r3
    647e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6480:	68fb      	ldr	r3, [r7, #12]
    6482:	2b00      	cmp	r3, #0
    6484:	d001      	beq.n	648a <i2c_m_async_init+0x36>
		return init_status;
    6486:	68fb      	ldr	r3, [r7, #12]
    6488:	e018      	b.n	64bc <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    648a:	687b      	ldr	r3, [r7, #4]
    648c:	4a10      	ldr	r2, [pc, #64]	; (64d0 <i2c_m_async_init+0x7c>)
    648e:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    6490:	687b      	ldr	r3, [r7, #4]
    6492:	4a10      	ldr	r2, [pc, #64]	; (64d4 <i2c_m_async_init+0x80>)
    6494:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    6496:	687b      	ldr	r3, [r7, #4]
    6498:	4a0f      	ldr	r2, [pc, #60]	; (64d8 <i2c_m_async_init+0x84>)
    649a:	2101      	movs	r1, #1
    649c:	4618      	mov	r0, r3
    649e:	4b0f      	ldr	r3, [pc, #60]	; (64dc <i2c_m_async_init+0x88>)
    64a0:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    64a2:	687b      	ldr	r3, [r7, #4]
    64a4:	4a0e      	ldr	r2, [pc, #56]	; (64e0 <i2c_m_async_init+0x8c>)
    64a6:	2102      	movs	r1, #2
    64a8:	4618      	mov	r0, r3
    64aa:	4b0c      	ldr	r3, [pc, #48]	; (64dc <i2c_m_async_init+0x88>)
    64ac:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    64ae:	687b      	ldr	r3, [r7, #4]
    64b0:	4a0c      	ldr	r2, [pc, #48]	; (64e4 <i2c_m_async_init+0x90>)
    64b2:	2100      	movs	r1, #0
    64b4:	4618      	mov	r0, r3
    64b6:	4b09      	ldr	r3, [pc, #36]	; (64dc <i2c_m_async_init+0x88>)
    64b8:	4798      	blx	r3

	return ERR_NONE;
    64ba:	2300      	movs	r3, #0
}
    64bc:	4618      	mov	r0, r3
    64be:	3710      	adds	r7, #16
    64c0:	46bd      	mov	sp, r7
    64c2:	bd80      	pop	{r7, pc}
    64c4:	0001f8e8 	.word	0x0001f8e8
    64c8:	0000799d 	.word	0x0000799d
    64cc:	0000b165 	.word	0x0000b165
    64d0:	000063b5 	.word	0x000063b5
    64d4:	00006405 	.word	0x00006405
    64d8:	00006319 	.word	0x00006319
    64dc:	0000b3e9 	.word	0x0000b3e9
    64e0:	0000634b 	.word	0x0000634b
    64e4:	0000637d 	.word	0x0000637d

000064e8 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    64e8:	b580      	push	{r7, lr}
    64ea:	b084      	sub	sp, #16
    64ec:	af00      	add	r7, sp, #0
    64ee:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    64f0:	687b      	ldr	r3, [r7, #4]
    64f2:	2b00      	cmp	r3, #0
    64f4:	bf14      	ite	ne
    64f6:	2301      	movne	r3, #1
    64f8:	2300      	moveq	r3, #0
    64fa:	b2db      	uxtb	r3, r3
    64fc:	22b9      	movs	r2, #185	; 0xb9
    64fe:	4911      	ldr	r1, [pc, #68]	; (6544 <i2c_m_async_enable+0x5c>)
    6500:	4618      	mov	r0, r3
    6502:	4b11      	ldr	r3, [pc, #68]	; (6548 <i2c_m_async_enable+0x60>)
    6504:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    6506:	687b      	ldr	r3, [r7, #4]
    6508:	4618      	mov	r0, r3
    650a:	4b10      	ldr	r3, [pc, #64]	; (654c <i2c_m_async_enable+0x64>)
    650c:	4798      	blx	r3
    650e:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    6510:	68fb      	ldr	r3, [r7, #12]
    6512:	2b00      	cmp	r3, #0
    6514:	d111      	bne.n	653a <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    6516:	687b      	ldr	r3, [r7, #4]
    6518:	2201      	movs	r2, #1
    651a:	2101      	movs	r1, #1
    651c:	4618      	mov	r0, r3
    651e:	4b0c      	ldr	r3, [pc, #48]	; (6550 <i2c_m_async_enable+0x68>)
    6520:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    6522:	687b      	ldr	r3, [r7, #4]
    6524:	2201      	movs	r2, #1
    6526:	2102      	movs	r1, #2
    6528:	4618      	mov	r0, r3
    652a:	4b09      	ldr	r3, [pc, #36]	; (6550 <i2c_m_async_enable+0x68>)
    652c:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    652e:	687b      	ldr	r3, [r7, #4]
    6530:	2201      	movs	r2, #1
    6532:	2100      	movs	r1, #0
    6534:	4618      	mov	r0, r3
    6536:	4b06      	ldr	r3, [pc, #24]	; (6550 <i2c_m_async_enable+0x68>)
    6538:	4798      	blx	r3
	}
	return rc;
    653a:	68fb      	ldr	r3, [r7, #12]
}
    653c:	4618      	mov	r0, r3
    653e:	3710      	adds	r7, #16
    6540:	46bd      	mov	sp, r7
    6542:	bd80      	pop	{r7, pc}
    6544:	0001f8e8 	.word	0x0001f8e8
    6548:	0000799d 	.word	0x0000799d
    654c:	0000b101 	.word	0x0000b101
    6550:	0000b475 	.word	0x0000b475

00006554 <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    6554:	b480      	push	{r7}
    6556:	b085      	sub	sp, #20
    6558:	af00      	add	r7, sp, #0
    655a:	60f8      	str	r0, [r7, #12]
    655c:	460b      	mov	r3, r1
    655e:	607a      	str	r2, [r7, #4]
    6560:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    6562:	897b      	ldrh	r3, [r7, #10]
    6564:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6568:	b21a      	sxth	r2, r3
    656a:	687b      	ldr	r3, [r7, #4]
    656c:	b21b      	sxth	r3, r3
    656e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6572:	b21b      	sxth	r3, r3
    6574:	4313      	orrs	r3, r2
    6576:	b21b      	sxth	r3, r3
    6578:	b29a      	uxth	r2, r3
    657a:	68fb      	ldr	r3, [r7, #12]
    657c:	879a      	strh	r2, [r3, #60]	; 0x3c
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    6582:	4618      	mov	r0, r3
    6584:	3714      	adds	r7, #20
    6586:	46bd      	mov	sp, r7
    6588:	f85d 7b04 	ldr.w	r7, [sp], #4
    658c:	4770      	bx	lr

0000658e <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    658e:	b480      	push	{r7}
    6590:	b085      	sub	sp, #20
    6592:	af00      	add	r7, sp, #0
    6594:	60f8      	str	r0, [r7, #12]
    6596:	460b      	mov	r3, r1
    6598:	607a      	str	r2, [r7, #4]
    659a:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    659c:	7afb      	ldrb	r3, [r7, #11]
    659e:	2b01      	cmp	r3, #1
    65a0:	d007      	beq.n	65b2 <i2c_m_async_register_callback+0x24>
    65a2:	2b02      	cmp	r3, #2
    65a4:	d009      	beq.n	65ba <i2c_m_async_register_callback+0x2c>
    65a6:	2b00      	cmp	r3, #0
    65a8:	d10b      	bne.n	65c2 <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    65aa:	68fb      	ldr	r3, [r7, #12]
    65ac:	687a      	ldr	r2, [r7, #4]
    65ae:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    65b0:	e00a      	b.n	65c8 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    65b2:	68fb      	ldr	r3, [r7, #12]
    65b4:	687a      	ldr	r2, [r7, #4]
    65b6:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    65b8:	e006      	b.n	65c8 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    65ba:	68fb      	ldr	r3, [r7, #12]
    65bc:	687a      	ldr	r2, [r7, #4]
    65be:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    65c0:	e002      	b.n	65c8 <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    65c2:	f06f 030c 	mvn.w	r3, #12
    65c6:	e000      	b.n	65ca <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    65c8:	2300      	movs	r3, #0
}
    65ca:	4618      	mov	r0, r3
    65cc:	3714      	adds	r7, #20
    65ce:	46bd      	mov	sp, r7
    65d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    65d4:	4770      	bx	lr

000065d6 <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    65d6:	b480      	push	{r7}
    65d8:	b083      	sub	sp, #12
    65da:	af00      	add	r7, sp, #0
    65dc:	6078      	str	r0, [r7, #4]
    65de:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    65e0:	687b      	ldr	r3, [r7, #4]
    65e2:	f103 0228 	add.w	r2, r3, #40	; 0x28
    65e6:	683b      	ldr	r3, [r7, #0]
    65e8:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    65ea:	2300      	movs	r3, #0
}
    65ec:	4618      	mov	r0, r3
    65ee:	370c      	adds	r7, #12
    65f0:	46bd      	mov	sp, r7
    65f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    65f6:	4770      	bx	lr

000065f8 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    65f8:	b580      	push	{r7, lr}
    65fa:	b08a      	sub	sp, #40	; 0x28
    65fc:	af00      	add	r7, sp, #0
    65fe:	60f8      	str	r0, [r7, #12]
    6600:	60b9      	str	r1, [r7, #8]
    6602:	4613      	mov	r3, r2
    6604:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    6606:	68fb      	ldr	r3, [r7, #12]
    6608:	3b14      	subs	r3, #20
    660a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    660e:	8b9b      	ldrh	r3, [r3, #28]
    6610:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6612:	88fb      	ldrh	r3, [r7, #6]
    6614:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    6616:	f248 0301 	movw	r3, #32769	; 0x8001
    661a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    661c:	68bb      	ldr	r3, [r7, #8]
    661e:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6622:	f107 0214 	add.w	r2, r7, #20
    6626:	4611      	mov	r1, r2
    6628:	4618      	mov	r0, r3
    662a:	4b06      	ldr	r3, [pc, #24]	; (6644 <i2c_m_sync_read+0x4c>)
    662c:	4798      	blx	r3
    662e:	6238      	str	r0, [r7, #32]

	if (ret) {
    6630:	6a3b      	ldr	r3, [r7, #32]
    6632:	2b00      	cmp	r3, #0
    6634:	d001      	beq.n	663a <i2c_m_sync_read+0x42>
		return ret;
    6636:	6a3b      	ldr	r3, [r7, #32]
    6638:	e000      	b.n	663c <i2c_m_sync_read+0x44>
	}

	return n;
    663a:	88fb      	ldrh	r3, [r7, #6]
}
    663c:	4618      	mov	r0, r3
    663e:	3728      	adds	r7, #40	; 0x28
    6640:	46bd      	mov	sp, r7
    6642:	bd80      	pop	{r7, pc}
    6644:	0000b655 	.word	0x0000b655

00006648 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    6648:	b580      	push	{r7, lr}
    664a:	b08a      	sub	sp, #40	; 0x28
    664c:	af00      	add	r7, sp, #0
    664e:	60f8      	str	r0, [r7, #12]
    6650:	60b9      	str	r1, [r7, #8]
    6652:	4613      	mov	r3, r2
    6654:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    6656:	68fb      	ldr	r3, [r7, #12]
    6658:	3b14      	subs	r3, #20
    665a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    665e:	8b9b      	ldrh	r3, [r3, #28]
    6660:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    6662:	88fb      	ldrh	r3, [r7, #6]
    6664:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    6666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    666a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    666c:	68bb      	ldr	r3, [r7, #8]
    666e:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    6670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6672:	f107 0214 	add.w	r2, r7, #20
    6676:	4611      	mov	r1, r2
    6678:	4618      	mov	r0, r3
    667a:	4b06      	ldr	r3, [pc, #24]	; (6694 <i2c_m_sync_write+0x4c>)
    667c:	4798      	blx	r3
    667e:	6238      	str	r0, [r7, #32]

	if (ret) {
    6680:	6a3b      	ldr	r3, [r7, #32]
    6682:	2b00      	cmp	r3, #0
    6684:	d001      	beq.n	668a <i2c_m_sync_write+0x42>
		return ret;
    6686:	6a3b      	ldr	r3, [r7, #32]
    6688:	e000      	b.n	668c <i2c_m_sync_write+0x44>
	}

	return n;
    668a:	88fb      	ldrh	r3, [r7, #6]
}
    668c:	4618      	mov	r0, r3
    668e:	3728      	adds	r7, #40	; 0x28
    6690:	46bd      	mov	sp, r7
    6692:	bd80      	pop	{r7, pc}
    6694:	0000b655 	.word	0x0000b655

00006698 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    6698:	b580      	push	{r7, lr}
    669a:	b084      	sub	sp, #16
    669c:	af00      	add	r7, sp, #0
    669e:	6078      	str	r0, [r7, #4]
    66a0:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    66a2:	687b      	ldr	r3, [r7, #4]
    66a4:	2b00      	cmp	r3, #0
    66a6:	bf14      	ite	ne
    66a8:	2301      	movne	r3, #1
    66aa:	2300      	moveq	r3, #0
    66ac:	b2db      	uxtb	r3, r3
    66ae:	225e      	movs	r2, #94	; 0x5e
    66b0:	490c      	ldr	r1, [pc, #48]	; (66e4 <i2c_m_sync_init+0x4c>)
    66b2:	4618      	mov	r0, r3
    66b4:	4b0c      	ldr	r3, [pc, #48]	; (66e8 <i2c_m_sync_init+0x50>)
    66b6:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    66b8:	687b      	ldr	r3, [r7, #4]
    66ba:	6839      	ldr	r1, [r7, #0]
    66bc:	4618      	mov	r0, r3
    66be:	4b0b      	ldr	r3, [pc, #44]	; (66ec <i2c_m_sync_init+0x54>)
    66c0:	4798      	blx	r3
    66c2:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    66c4:	68fb      	ldr	r3, [r7, #12]
    66c6:	2b00      	cmp	r3, #0
    66c8:	d001      	beq.n	66ce <i2c_m_sync_init+0x36>
		return init_status;
    66ca:	68fb      	ldr	r3, [r7, #12]
    66cc:	e006      	b.n	66dc <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    66ce:	687b      	ldr	r3, [r7, #4]
    66d0:	4a07      	ldr	r2, [pc, #28]	; (66f0 <i2c_m_sync_init+0x58>)
    66d2:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    66d4:	687b      	ldr	r3, [r7, #4]
    66d6:	4a07      	ldr	r2, [pc, #28]	; (66f4 <i2c_m_sync_init+0x5c>)
    66d8:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    66da:	2300      	movs	r3, #0
}
    66dc:	4618      	mov	r0, r3
    66de:	3710      	adds	r7, #16
    66e0:	46bd      	mov	sp, r7
    66e2:	bd80      	pop	{r7, pc}
    66e4:	0001f908 	.word	0x0001f908
    66e8:	0000799d 	.word	0x0000799d
    66ec:	0000b42d 	.word	0x0000b42d
    66f0:	000065f9 	.word	0x000065f9
    66f4:	00006649 	.word	0x00006649

000066f8 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    66f8:	b580      	push	{r7, lr}
    66fa:	b084      	sub	sp, #16
    66fc:	af00      	add	r7, sp, #0
    66fe:	60f8      	str	r0, [r7, #12]
    6700:	60b9      	str	r1, [r7, #8]
    6702:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    6704:	68fb      	ldr	r3, [r7, #12]
    6706:	2b00      	cmp	r3, #0
    6708:	d004      	beq.n	6714 <pwm_init+0x1c>
    670a:	68bb      	ldr	r3, [r7, #8]
    670c:	2b00      	cmp	r3, #0
    670e:	d001      	beq.n	6714 <pwm_init+0x1c>
    6710:	2301      	movs	r3, #1
    6712:	e000      	b.n	6716 <pwm_init+0x1e>
    6714:	2300      	movs	r3, #0
    6716:	f003 0301 	and.w	r3, r3, #1
    671a:	b2db      	uxtb	r3, r3
    671c:	2233      	movs	r2, #51	; 0x33
    671e:	490a      	ldr	r1, [pc, #40]	; (6748 <pwm_init+0x50>)
    6720:	4618      	mov	r0, r3
    6722:	4b0a      	ldr	r3, [pc, #40]	; (674c <pwm_init+0x54>)
    6724:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    6726:	68fb      	ldr	r3, [r7, #12]
    6728:	68b9      	ldr	r1, [r7, #8]
    672a:	4618      	mov	r0, r3
    672c:	4b08      	ldr	r3, [pc, #32]	; (6750 <pwm_init+0x58>)
    672e:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    6730:	68fb      	ldr	r3, [r7, #12]
    6732:	4a08      	ldr	r2, [pc, #32]	; (6754 <pwm_init+0x5c>)
    6734:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    6736:	68fb      	ldr	r3, [r7, #12]
    6738:	4a07      	ldr	r2, [pc, #28]	; (6758 <pwm_init+0x60>)
    673a:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    673c:	2300      	movs	r3, #0
}
    673e:	4618      	mov	r0, r3
    6740:	3710      	adds	r7, #16
    6742:	46bd      	mov	sp, r7
    6744:	bd80      	pop	{r7, pc}
    6746:	bf00      	nop
    6748:	0001f924 	.word	0x0001f924
    674c:	0000799d 	.word	0x0000799d
    6750:	0000cdcd 	.word	0x0000cdcd
    6754:	000067b1 	.word	0x000067b1
    6758:	000067d5 	.word	0x000067d5

0000675c <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    675c:	b580      	push	{r7, lr}
    675e:	b082      	sub	sp, #8
    6760:	af00      	add	r7, sp, #0
    6762:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    6764:	687b      	ldr	r3, [r7, #4]
    6766:	2b00      	cmp	r3, #0
    6768:	bf14      	ite	ne
    676a:	2301      	movne	r3, #1
    676c:	2300      	moveq	r3, #0
    676e:	b2db      	uxtb	r3, r3
    6770:	224a      	movs	r2, #74	; 0x4a
    6772:	490b      	ldr	r1, [pc, #44]	; (67a0 <pwm_enable+0x44>)
    6774:	4618      	mov	r0, r3
    6776:	4b0b      	ldr	r3, [pc, #44]	; (67a4 <pwm_enable+0x48>)
    6778:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    677a:	687b      	ldr	r3, [r7, #4]
    677c:	4618      	mov	r0, r3
    677e:	4b0a      	ldr	r3, [pc, #40]	; (67a8 <pwm_enable+0x4c>)
    6780:	4798      	blx	r3
    6782:	4603      	mov	r3, r0
    6784:	2b00      	cmp	r3, #0
    6786:	d002      	beq.n	678e <pwm_enable+0x32>
		return ERR_DENIED;
    6788:	f06f 0310 	mvn.w	r3, #16
    678c:	e004      	b.n	6798 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    678e:	687b      	ldr	r3, [r7, #4]
    6790:	4618      	mov	r0, r3
    6792:	4b06      	ldr	r3, [pc, #24]	; (67ac <pwm_enable+0x50>)
    6794:	4798      	blx	r3

	return ERR_NONE;
    6796:	2300      	movs	r3, #0
}
    6798:	4618      	mov	r0, r3
    679a:	3708      	adds	r7, #8
    679c:	46bd      	mov	sp, r7
    679e:	bd80      	pop	{r7, pc}
    67a0:	0001f924 	.word	0x0001f924
    67a4:	0000799d 	.word	0x0000799d
    67a8:	0000d1bd 	.word	0x0000d1bd
    67ac:	0000d079 	.word	0x0000d079

000067b0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    67b0:	b580      	push	{r7, lr}
    67b2:	b084      	sub	sp, #16
    67b4:	af00      	add	r7, sp, #0
    67b6:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    67bc:	68fb      	ldr	r3, [r7, #12]
    67be:	695b      	ldr	r3, [r3, #20]
    67c0:	2b00      	cmp	r3, #0
    67c2:	d003      	beq.n	67cc <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    67c4:	68fb      	ldr	r3, [r7, #12]
    67c6:	695b      	ldr	r3, [r3, #20]
    67c8:	68f8      	ldr	r0, [r7, #12]
    67ca:	4798      	blx	r3
	}
}
    67cc:	bf00      	nop
    67ce:	3710      	adds	r7, #16
    67d0:	46bd      	mov	sp, r7
    67d2:	bd80      	pop	{r7, pc}

000067d4 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    67d4:	b580      	push	{r7, lr}
    67d6:	b084      	sub	sp, #16
    67d8:	af00      	add	r7, sp, #0
    67da:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    67dc:	687b      	ldr	r3, [r7, #4]
    67de:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    67e0:	68fb      	ldr	r3, [r7, #12]
    67e2:	699b      	ldr	r3, [r3, #24]
    67e4:	2b00      	cmp	r3, #0
    67e6:	d003      	beq.n	67f0 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    67e8:	68fb      	ldr	r3, [r7, #12]
    67ea:	699b      	ldr	r3, [r3, #24]
    67ec:	68f8      	ldr	r0, [r7, #12]
    67ee:	4798      	blx	r3
	}
}
    67f0:	bf00      	nop
    67f2:	3710      	adds	r7, #16
    67f4:	46bd      	mov	sp, r7
    67f6:	bd80      	pop	{r7, pc}

000067f8 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    67f8:	b580      	push	{r7, lr}
    67fa:	b082      	sub	sp, #8
    67fc:	af00      	add	r7, sp, #0
    67fe:	6078      	str	r0, [r7, #4]
    6800:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    6802:	687b      	ldr	r3, [r7, #4]
    6804:	2b00      	cmp	r3, #0
    6806:	d004      	beq.n	6812 <qspi_sync_init+0x1a>
    6808:	683b      	ldr	r3, [r7, #0]
    680a:	2b00      	cmp	r3, #0
    680c:	d001      	beq.n	6812 <qspi_sync_init+0x1a>
    680e:	2301      	movs	r3, #1
    6810:	e000      	b.n	6814 <qspi_sync_init+0x1c>
    6812:	2300      	movs	r3, #0
    6814:	f003 0301 	and.w	r3, r3, #1
    6818:	b2db      	uxtb	r3, r3
    681a:	2231      	movs	r2, #49	; 0x31
    681c:	4906      	ldr	r1, [pc, #24]	; (6838 <qspi_sync_init+0x40>)
    681e:	4618      	mov	r0, r3
    6820:	4b06      	ldr	r3, [pc, #24]	; (683c <qspi_sync_init+0x44>)
    6822:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    6824:	687b      	ldr	r3, [r7, #4]
    6826:	6839      	ldr	r1, [r7, #0]
    6828:	4618      	mov	r0, r3
    682a:	4b05      	ldr	r3, [pc, #20]	; (6840 <qspi_sync_init+0x48>)
    682c:	4798      	blx	r3
    682e:	4603      	mov	r3, r0
}
    6830:	4618      	mov	r0, r3
    6832:	3708      	adds	r7, #8
    6834:	46bd      	mov	sp, r7
    6836:	bd80      	pop	{r7, pc}
    6838:	0001f93c 	.word	0x0001f93c
    683c:	0000799d 	.word	0x0000799d
    6840:	00009ea5 	.word	0x00009ea5

00006844 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    6844:	b580      	push	{r7, lr}
    6846:	b082      	sub	sp, #8
    6848:	af00      	add	r7, sp, #0
    684a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    684c:	687b      	ldr	r3, [r7, #4]
    684e:	2b00      	cmp	r3, #0
    6850:	bf14      	ite	ne
    6852:	2301      	movne	r3, #1
    6854:	2300      	moveq	r3, #0
    6856:	b2db      	uxtb	r3, r3
    6858:	223f      	movs	r2, #63	; 0x3f
    685a:	4906      	ldr	r1, [pc, #24]	; (6874 <qspi_sync_enable+0x30>)
    685c:	4618      	mov	r0, r3
    685e:	4b06      	ldr	r3, [pc, #24]	; (6878 <qspi_sync_enable+0x34>)
    6860:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    6862:	687b      	ldr	r3, [r7, #4]
    6864:	4618      	mov	r0, r3
    6866:	4b05      	ldr	r3, [pc, #20]	; (687c <qspi_sync_enable+0x38>)
    6868:	4798      	blx	r3
    686a:	4603      	mov	r3, r0
}
    686c:	4618      	mov	r0, r3
    686e:	3708      	adds	r7, #8
    6870:	46bd      	mov	sp, r7
    6872:	bd80      	pop	{r7, pc}
    6874:	0001f93c 	.word	0x0001f93c
    6878:	0000799d 	.word	0x0000799d
    687c:	00009f19 	.word	0x00009f19

00006880 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    6880:	b580      	push	{r7, lr}
    6882:	b082      	sub	sp, #8
    6884:	af00      	add	r7, sp, #0
    6886:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	2b00      	cmp	r3, #0
    688c:	bf14      	ite	ne
    688e:	2301      	movne	r3, #1
    6890:	2300      	moveq	r3, #0
    6892:	b2db      	uxtb	r3, r3
    6894:	2246      	movs	r2, #70	; 0x46
    6896:	4906      	ldr	r1, [pc, #24]	; (68b0 <qspi_sync_disable+0x30>)
    6898:	4618      	mov	r0, r3
    689a:	4b06      	ldr	r3, [pc, #24]	; (68b4 <qspi_sync_disable+0x34>)
    689c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    689e:	687b      	ldr	r3, [r7, #4]
    68a0:	4618      	mov	r0, r3
    68a2:	4b05      	ldr	r3, [pc, #20]	; (68b8 <qspi_sync_disable+0x38>)
    68a4:	4798      	blx	r3
    68a6:	4603      	mov	r3, r0
}
    68a8:	4618      	mov	r0, r3
    68aa:	3708      	adds	r7, #8
    68ac:	46bd      	mov	sp, r7
    68ae:	bd80      	pop	{r7, pc}
    68b0:	0001f93c 	.word	0x0001f93c
    68b4:	0000799d 	.word	0x0000799d
    68b8:	00009f3d 	.word	0x00009f3d

000068bc <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    68bc:	b580      	push	{r7, lr}
    68be:	b082      	sub	sp, #8
    68c0:	af00      	add	r7, sp, #0
    68c2:	6078      	str	r0, [r7, #4]
    68c4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    68c6:	687b      	ldr	r3, [r7, #4]
    68c8:	2b00      	cmp	r3, #0
    68ca:	d004      	beq.n	68d6 <qspi_sync_serial_run_command+0x1a>
    68cc:	683b      	ldr	r3, [r7, #0]
    68ce:	2b00      	cmp	r3, #0
    68d0:	d001      	beq.n	68d6 <qspi_sync_serial_run_command+0x1a>
    68d2:	2301      	movs	r3, #1
    68d4:	e000      	b.n	68d8 <qspi_sync_serial_run_command+0x1c>
    68d6:	2300      	movs	r3, #0
    68d8:	f003 0301 	and.w	r3, r3, #1
    68dc:	b2db      	uxtb	r3, r3
    68de:	224d      	movs	r2, #77	; 0x4d
    68e0:	4906      	ldr	r1, [pc, #24]	; (68fc <qspi_sync_serial_run_command+0x40>)
    68e2:	4618      	mov	r0, r3
    68e4:	4b06      	ldr	r3, [pc, #24]	; (6900 <qspi_sync_serial_run_command+0x44>)
    68e6:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    68e8:	687b      	ldr	r3, [r7, #4]
    68ea:	6839      	ldr	r1, [r7, #0]
    68ec:	4618      	mov	r0, r3
    68ee:	4b05      	ldr	r3, [pc, #20]	; (6904 <qspi_sync_serial_run_command+0x48>)
    68f0:	4798      	blx	r3
    68f2:	4603      	mov	r3, r0
}
    68f4:	4618      	mov	r0, r3
    68f6:	3708      	adds	r7, #8
    68f8:	46bd      	mov	sp, r7
    68fa:	bd80      	pop	{r7, pc}
    68fc:	0001f93c 	.word	0x0001f93c
    6900:	0000799d 	.word	0x0000799d
    6904:	0000a089 	.word	0x0000a089

00006908 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    6908:	b580      	push	{r7, lr}
    690a:	b084      	sub	sp, #16
    690c:	af00      	add	r7, sp, #0
    690e:	6078      	str	r0, [r7, #4]
    6910:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    6912:	2300      	movs	r3, #0
    6914:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    6916:	687b      	ldr	r3, [r7, #4]
    6918:	2b00      	cmp	r3, #0
    691a:	d004      	beq.n	6926 <spi_m_sync_init+0x1e>
    691c:	683b      	ldr	r3, [r7, #0]
    691e:	2b00      	cmp	r3, #0
    6920:	d001      	beq.n	6926 <spi_m_sync_init+0x1e>
    6922:	2301      	movs	r3, #1
    6924:	e000      	b.n	6928 <spi_m_sync_init+0x20>
    6926:	2300      	movs	r3, #0
    6928:	f003 0301 	and.w	r3, r3, #1
    692c:	b2db      	uxtb	r3, r3
    692e:	2240      	movs	r2, #64	; 0x40
    6930:	4910      	ldr	r1, [pc, #64]	; (6974 <spi_m_sync_init+0x6c>)
    6932:	4618      	mov	r0, r3
    6934:	4b10      	ldr	r3, [pc, #64]	; (6978 <spi_m_sync_init+0x70>)
    6936:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    6938:	687b      	ldr	r3, [r7, #4]
    693a:	683a      	ldr	r2, [r7, #0]
    693c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    693e:	687b      	ldr	r3, [r7, #4]
    6940:	3304      	adds	r3, #4
    6942:	6839      	ldr	r1, [r7, #0]
    6944:	4618      	mov	r0, r3
    6946:	4b0d      	ldr	r3, [pc, #52]	; (697c <spi_m_sync_init+0x74>)
    6948:	4798      	blx	r3
    694a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    694c:	68fb      	ldr	r3, [r7, #12]
    694e:	2b00      	cmp	r3, #0
    6950:	da01      	bge.n	6956 <spi_m_sync_init+0x4e>
		return rc;
    6952:	68fb      	ldr	r3, [r7, #12]
    6954:	e00a      	b.n	696c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    6956:	687b      	ldr	r3, [r7, #4]
    6958:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    695c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    695e:	687b      	ldr	r3, [r7, #4]
    6960:	4a07      	ldr	r2, [pc, #28]	; (6980 <spi_m_sync_init+0x78>)
    6962:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    6964:	687b      	ldr	r3, [r7, #4]
    6966:	4a07      	ldr	r2, [pc, #28]	; (6984 <spi_m_sync_init+0x7c>)
    6968:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    696a:	2300      	movs	r3, #0
}
    696c:	4618      	mov	r0, r3
    696e:	3710      	adds	r7, #16
    6970:	46bd      	mov	sp, r7
    6972:	bd80      	pop	{r7, pc}
    6974:	0001f958 	.word	0x0001f958
    6978:	0000799d 	.word	0x0000799d
    697c:	0000bc31 	.word	0x0000bc31
    6980:	00006a01 	.word	0x00006a01
    6984:	00006a59 	.word	0x00006a59

00006988 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    6988:	b580      	push	{r7, lr}
    698a:	b082      	sub	sp, #8
    698c:	af00      	add	r7, sp, #0
    698e:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    6990:	687b      	ldr	r3, [r7, #4]
    6992:	2b00      	cmp	r3, #0
    6994:	bf14      	ite	ne
    6996:	2301      	movne	r3, #1
    6998:	2300      	moveq	r3, #0
    699a:	b2db      	uxtb	r3, r3
    699c:	2257      	movs	r2, #87	; 0x57
    699e:	4906      	ldr	r1, [pc, #24]	; (69b8 <spi_m_sync_enable+0x30>)
    69a0:	4618      	mov	r0, r3
    69a2:	4b06      	ldr	r3, [pc, #24]	; (69bc <spi_m_sync_enable+0x34>)
    69a4:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    69a6:	687b      	ldr	r3, [r7, #4]
    69a8:	3304      	adds	r3, #4
    69aa:	4618      	mov	r0, r3
    69ac:	4b04      	ldr	r3, [pc, #16]	; (69c0 <spi_m_sync_enable+0x38>)
    69ae:	4798      	blx	r3
}
    69b0:	bf00      	nop
    69b2:	3708      	adds	r7, #8
    69b4:	46bd      	mov	sp, r7
    69b6:	bd80      	pop	{r7, pc}
    69b8:	0001f958 	.word	0x0001f958
    69bc:	0000799d 	.word	0x0000799d
    69c0:	0000bd3d 	.word	0x0000bd3d

000069c4 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    69c4:	b580      	push	{r7, lr}
    69c6:	b082      	sub	sp, #8
    69c8:	af00      	add	r7, sp, #0
    69ca:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    69cc:	687b      	ldr	r3, [r7, #4]
    69ce:	2b00      	cmp	r3, #0
    69d0:	bf14      	ite	ne
    69d2:	2301      	movne	r3, #1
    69d4:	2300      	moveq	r3, #0
    69d6:	b2db      	uxtb	r3, r3
    69d8:	225d      	movs	r2, #93	; 0x5d
    69da:	4906      	ldr	r1, [pc, #24]	; (69f4 <spi_m_sync_disable+0x30>)
    69dc:	4618      	mov	r0, r3
    69de:	4b06      	ldr	r3, [pc, #24]	; (69f8 <spi_m_sync_disable+0x34>)
    69e0:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    69e2:	687b      	ldr	r3, [r7, #4]
    69e4:	3304      	adds	r3, #4
    69e6:	4618      	mov	r0, r3
    69e8:	4b04      	ldr	r3, [pc, #16]	; (69fc <spi_m_sync_disable+0x38>)
    69ea:	4798      	blx	r3
}
    69ec:	bf00      	nop
    69ee:	3708      	adds	r7, #8
    69f0:	46bd      	mov	sp, r7
    69f2:	bd80      	pop	{r7, pc}
    69f4:	0001f958 	.word	0x0001f958
    69f8:	0000799d 	.word	0x0000799d
    69fc:	0000bd8d 	.word	0x0000bd8d

00006a00 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    6a00:	b580      	push	{r7, lr}
    6a02:	b088      	sub	sp, #32
    6a04:	af00      	add	r7, sp, #0
    6a06:	60f8      	str	r0, [r7, #12]
    6a08:	60b9      	str	r1, [r7, #8]
    6a0a:	4613      	mov	r3, r2
    6a0c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6a0e:	68fb      	ldr	r3, [r7, #12]
    6a10:	2b00      	cmp	r3, #0
    6a12:	bf14      	ite	ne
    6a14:	2301      	movne	r3, #1
    6a16:	2300      	moveq	r3, #0
    6a18:	b2db      	uxtb	r3, r3
    6a1a:	2287      	movs	r2, #135	; 0x87
    6a1c:	490b      	ldr	r1, [pc, #44]	; (6a4c <_spi_m_sync_io_read+0x4c>)
    6a1e:	4618      	mov	r0, r3
    6a20:	4b0b      	ldr	r3, [pc, #44]	; (6a50 <_spi_m_sync_io_read+0x50>)
    6a22:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    6a24:	68fb      	ldr	r3, [r7, #12]
    6a26:	3b0c      	subs	r3, #12
    6a28:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    6a2a:	68bb      	ldr	r3, [r7, #8]
    6a2c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    6a2e:	2300      	movs	r3, #0
    6a30:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    6a32:	88fb      	ldrh	r3, [r7, #6]
    6a34:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    6a36:	f107 0310 	add.w	r3, r7, #16
    6a3a:	4619      	mov	r1, r3
    6a3c:	69f8      	ldr	r0, [r7, #28]
    6a3e:	4b05      	ldr	r3, [pc, #20]	; (6a54 <_spi_m_sync_io_read+0x54>)
    6a40:	4798      	blx	r3
    6a42:	4603      	mov	r3, r0
}
    6a44:	4618      	mov	r0, r3
    6a46:	3720      	adds	r7, #32
    6a48:	46bd      	mov	sp, r7
    6a4a:	bd80      	pop	{r7, pc}
    6a4c:	0001f958 	.word	0x0001f958
    6a50:	0000799d 	.word	0x0000799d
    6a54:	00006ab1 	.word	0x00006ab1

00006a58 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    6a58:	b580      	push	{r7, lr}
    6a5a:	b088      	sub	sp, #32
    6a5c:	af00      	add	r7, sp, #0
    6a5e:	60f8      	str	r0, [r7, #12]
    6a60:	60b9      	str	r1, [r7, #8]
    6a62:	4613      	mov	r3, r2
    6a64:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    6a66:	68fb      	ldr	r3, [r7, #12]
    6a68:	2b00      	cmp	r3, #0
    6a6a:	bf14      	ite	ne
    6a6c:	2301      	movne	r3, #1
    6a6e:	2300      	moveq	r3, #0
    6a70:	b2db      	uxtb	r3, r3
    6a72:	22a3      	movs	r2, #163	; 0xa3
    6a74:	490b      	ldr	r1, [pc, #44]	; (6aa4 <_spi_m_sync_io_write+0x4c>)
    6a76:	4618      	mov	r0, r3
    6a78:	4b0b      	ldr	r3, [pc, #44]	; (6aa8 <_spi_m_sync_io_write+0x50>)
    6a7a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    6a7c:	68fb      	ldr	r3, [r7, #12]
    6a7e:	3b0c      	subs	r3, #12
    6a80:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    6a82:	2300      	movs	r3, #0
    6a84:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    6a86:	68bb      	ldr	r3, [r7, #8]
    6a88:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    6a8a:	88fb      	ldrh	r3, [r7, #6]
    6a8c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    6a8e:	f107 0310 	add.w	r3, r7, #16
    6a92:	4619      	mov	r1, r3
    6a94:	69f8      	ldr	r0, [r7, #28]
    6a96:	4b05      	ldr	r3, [pc, #20]	; (6aac <_spi_m_sync_io_write+0x54>)
    6a98:	4798      	blx	r3
    6a9a:	4603      	mov	r3, r0
}
    6a9c:	4618      	mov	r0, r3
    6a9e:	3720      	adds	r7, #32
    6aa0:	46bd      	mov	sp, r7
    6aa2:	bd80      	pop	{r7, pc}
    6aa4:	0001f958 	.word	0x0001f958
    6aa8:	0000799d 	.word	0x0000799d
    6aac:	00006ab1 	.word	0x00006ab1

00006ab0 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    6ab0:	b580      	push	{r7, lr}
    6ab2:	b086      	sub	sp, #24
    6ab4:	af00      	add	r7, sp, #0
    6ab6:	6078      	str	r0, [r7, #4]
    6ab8:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    6aba:	687b      	ldr	r3, [r7, #4]
    6abc:	2b00      	cmp	r3, #0
    6abe:	d004      	beq.n	6aca <spi_m_sync_transfer+0x1a>
    6ac0:	683b      	ldr	r3, [r7, #0]
    6ac2:	2b00      	cmp	r3, #0
    6ac4:	d001      	beq.n	6aca <spi_m_sync_transfer+0x1a>
    6ac6:	2301      	movs	r3, #1
    6ac8:	e000      	b.n	6acc <spi_m_sync_transfer+0x1c>
    6aca:	2300      	movs	r3, #0
    6acc:	f003 0301 	and.w	r3, r3, #1
    6ad0:	b2db      	uxtb	r3, r3
    6ad2:	22b3      	movs	r2, #179	; 0xb3
    6ad4:	490c      	ldr	r1, [pc, #48]	; (6b08 <spi_m_sync_transfer+0x58>)
    6ad6:	4618      	mov	r0, r3
    6ad8:	4b0c      	ldr	r3, [pc, #48]	; (6b0c <spi_m_sync_transfer+0x5c>)
    6ada:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    6adc:	683b      	ldr	r3, [r7, #0]
    6ade:	681b      	ldr	r3, [r3, #0]
    6ae0:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    6ae2:	683b      	ldr	r3, [r7, #0]
    6ae4:	685b      	ldr	r3, [r3, #4]
    6ae6:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    6ae8:	683b      	ldr	r3, [r7, #0]
    6aea:	689b      	ldr	r3, [r3, #8]
    6aec:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    6aee:	687b      	ldr	r3, [r7, #4]
    6af0:	3304      	adds	r3, #4
    6af2:	f107 020c 	add.w	r2, r7, #12
    6af6:	4611      	mov	r1, r2
    6af8:	4618      	mov	r0, r3
    6afa:	4b05      	ldr	r3, [pc, #20]	; (6b10 <spi_m_sync_transfer+0x60>)
    6afc:	4798      	blx	r3
    6afe:	4603      	mov	r3, r0
}
    6b00:	4618      	mov	r0, r3
    6b02:	3718      	adds	r7, #24
    6b04:	46bd      	mov	sp, r7
    6b06:	bd80      	pop	{r7, pc}
    6b08:	0001f958 	.word	0x0001f958
    6b0c:	0000799d 	.word	0x0000799d
    6b10:	0000bf31 	.word	0x0000bf31

00006b14 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    6b14:	b580      	push	{r7, lr}
    6b16:	b082      	sub	sp, #8
    6b18:	af00      	add	r7, sp, #0
    6b1a:	6078      	str	r0, [r7, #4]
    6b1c:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    6b1e:	687b      	ldr	r3, [r7, #4]
    6b20:	2b00      	cmp	r3, #0
    6b22:	d004      	beq.n	6b2e <spi_m_sync_get_io_descriptor+0x1a>
    6b24:	683b      	ldr	r3, [r7, #0]
    6b26:	2b00      	cmp	r3, #0
    6b28:	d001      	beq.n	6b2e <spi_m_sync_get_io_descriptor+0x1a>
    6b2a:	2301      	movs	r3, #1
    6b2c:	e000      	b.n	6b30 <spi_m_sync_get_io_descriptor+0x1c>
    6b2e:	2300      	movs	r3, #0
    6b30:	f003 0301 	and.w	r3, r3, #1
    6b34:	b2db      	uxtb	r3, r3
    6b36:	22bd      	movs	r2, #189	; 0xbd
    6b38:	4906      	ldr	r1, [pc, #24]	; (6b54 <spi_m_sync_get_io_descriptor+0x40>)
    6b3a:	4618      	mov	r0, r3
    6b3c:	4b06      	ldr	r3, [pc, #24]	; (6b58 <spi_m_sync_get_io_descriptor+0x44>)
    6b3e:	4798      	blx	r3
	*io = &spi->io;
    6b40:	687b      	ldr	r3, [r7, #4]
    6b42:	f103 020c 	add.w	r2, r3, #12
    6b46:	683b      	ldr	r3, [r7, #0]
    6b48:	601a      	str	r2, [r3, #0]
	return 0;
    6b4a:	2300      	movs	r3, #0
}
    6b4c:	4618      	mov	r0, r3
    6b4e:	3708      	adds	r7, #8
    6b50:	46bd      	mov	sp, r7
    6b52:	bd80      	pop	{r7, pc}
    6b54:	0001f958 	.word	0x0001f958
    6b58:	0000799d 	.word	0x0000799d

00006b5c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    6b5c:	b480      	push	{r7}
    6b5e:	b083      	sub	sp, #12
    6b60:	af00      	add	r7, sp, #0
    6b62:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    6b64:	687b      	ldr	r3, [r7, #4]
    6b66:	681b      	ldr	r3, [r3, #0]
}
    6b68:	4618      	mov	r0, r3
    6b6a:	370c      	adds	r7, #12
    6b6c:	46bd      	mov	sp, r7
    6b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b72:	4770      	bx	lr

00006b74 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    6b74:	b480      	push	{r7}
    6b76:	b083      	sub	sp, #12
    6b78:	af00      	add	r7, sp, #0
    6b7a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    6b7c:	687b      	ldr	r3, [r7, #4]
    6b7e:	2b00      	cmp	r3, #0
    6b80:	d002      	beq.n	6b88 <list_get_next_element+0x14>
    6b82:	687b      	ldr	r3, [r7, #4]
    6b84:	681b      	ldr	r3, [r3, #0]
    6b86:	e000      	b.n	6b8a <list_get_next_element+0x16>
    6b88:	2300      	movs	r3, #0
}
    6b8a:	4618      	mov	r0, r3
    6b8c:	370c      	adds	r7, #12
    6b8e:	46bd      	mov	sp, r7
    6b90:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b94:	4770      	bx	lr
	...

00006b98 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    6b98:	b580      	push	{r7, lr}
    6b9a:	b084      	sub	sp, #16
    6b9c:	af00      	add	r7, sp, #0
    6b9e:	60f8      	str	r0, [r7, #12]
    6ba0:	60b9      	str	r1, [r7, #8]
    6ba2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    6ba4:	68fb      	ldr	r3, [r7, #12]
    6ba6:	2b00      	cmp	r3, #0
    6ba8:	d007      	beq.n	6bba <timer_init+0x22>
    6baa:	68bb      	ldr	r3, [r7, #8]
    6bac:	2b00      	cmp	r3, #0
    6bae:	d004      	beq.n	6bba <timer_init+0x22>
    6bb0:	687b      	ldr	r3, [r7, #4]
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	d001      	beq.n	6bba <timer_init+0x22>
    6bb6:	2301      	movs	r3, #1
    6bb8:	e000      	b.n	6bbc <timer_init+0x24>
    6bba:	2300      	movs	r3, #0
    6bbc:	f003 0301 	and.w	r3, r3, #1
    6bc0:	b2db      	uxtb	r3, r3
    6bc2:	223b      	movs	r2, #59	; 0x3b
    6bc4:	490c      	ldr	r1, [pc, #48]	; (6bf8 <timer_init+0x60>)
    6bc6:	4618      	mov	r0, r3
    6bc8:	4b0c      	ldr	r3, [pc, #48]	; (6bfc <timer_init+0x64>)
    6bca:	4798      	blx	r3
	descr->func = func;
    6bcc:	68fb      	ldr	r3, [r7, #12]
    6bce:	687a      	ldr	r2, [r7, #4]
    6bd0:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    6bd2:	68fb      	ldr	r3, [r7, #12]
    6bd4:	681b      	ldr	r3, [r3, #0]
    6bd6:	681b      	ldr	r3, [r3, #0]
    6bd8:	68fa      	ldr	r2, [r7, #12]
    6bda:	3204      	adds	r2, #4
    6bdc:	68b9      	ldr	r1, [r7, #8]
    6bde:	4610      	mov	r0, r2
    6be0:	4798      	blx	r3
	descr->time                           = 0;
    6be2:	68fb      	ldr	r3, [r7, #12]
    6be4:	2200      	movs	r2, #0
    6be6:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    6be8:	68fb      	ldr	r3, [r7, #12]
    6bea:	4a05      	ldr	r2, [pc, #20]	; (6c00 <timer_init+0x68>)
    6bec:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    6bee:	2300      	movs	r3, #0
}
    6bf0:	4618      	mov	r0, r3
    6bf2:	3710      	adds	r7, #16
    6bf4:	46bd      	mov	sp, r7
    6bf6:	bd80      	pop	{r7, pc}
    6bf8:	0001f974 	.word	0x0001f974
    6bfc:	0000799d 	.word	0x0000799d
    6c00:	00006f89 	.word	0x00006f89

00006c04 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    6c04:	b580      	push	{r7, lr}
    6c06:	b082      	sub	sp, #8
    6c08:	af00      	add	r7, sp, #0
    6c0a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    6c0c:	687b      	ldr	r3, [r7, #4]
    6c0e:	2b00      	cmp	r3, #0
    6c10:	d005      	beq.n	6c1e <timer_start+0x1a>
    6c12:	687b      	ldr	r3, [r7, #4]
    6c14:	681b      	ldr	r3, [r3, #0]
    6c16:	2b00      	cmp	r3, #0
    6c18:	d001      	beq.n	6c1e <timer_start+0x1a>
    6c1a:	2301      	movs	r3, #1
    6c1c:	e000      	b.n	6c20 <timer_start+0x1c>
    6c1e:	2300      	movs	r3, #0
    6c20:	f003 0301 	and.w	r3, r3, #1
    6c24:	b2db      	uxtb	r3, r3
    6c26:	2254      	movs	r2, #84	; 0x54
    6c28:	490e      	ldr	r1, [pc, #56]	; (6c64 <timer_start+0x60>)
    6c2a:	4618      	mov	r0, r3
    6c2c:	4b0e      	ldr	r3, [pc, #56]	; (6c68 <timer_start+0x64>)
    6c2e:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    6c30:	687b      	ldr	r3, [r7, #4]
    6c32:	681b      	ldr	r3, [r3, #0]
    6c34:	699b      	ldr	r3, [r3, #24]
    6c36:	687a      	ldr	r2, [r7, #4]
    6c38:	3204      	adds	r2, #4
    6c3a:	4610      	mov	r0, r2
    6c3c:	4798      	blx	r3
    6c3e:	4603      	mov	r3, r0
    6c40:	2b00      	cmp	r3, #0
    6c42:	d002      	beq.n	6c4a <timer_start+0x46>
		return ERR_DENIED;
    6c44:	f06f 0310 	mvn.w	r3, #16
    6c48:	e007      	b.n	6c5a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    6c4a:	687b      	ldr	r3, [r7, #4]
    6c4c:	681b      	ldr	r3, [r3, #0]
    6c4e:	689b      	ldr	r3, [r3, #8]
    6c50:	687a      	ldr	r2, [r7, #4]
    6c52:	3204      	adds	r2, #4
    6c54:	4610      	mov	r0, r2
    6c56:	4798      	blx	r3

	return ERR_NONE;
    6c58:	2300      	movs	r3, #0
}
    6c5a:	4618      	mov	r0, r3
    6c5c:	3708      	adds	r7, #8
    6c5e:	46bd      	mov	sp, r7
    6c60:	bd80      	pop	{r7, pc}
    6c62:	bf00      	nop
    6c64:	0001f974 	.word	0x0001f974
    6c68:	0000799d 	.word	0x0000799d

00006c6c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    6c6c:	b580      	push	{r7, lr}
    6c6e:	b082      	sub	sp, #8
    6c70:	af00      	add	r7, sp, #0
    6c72:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    6c74:	687b      	ldr	r3, [r7, #4]
    6c76:	2b00      	cmp	r3, #0
    6c78:	d005      	beq.n	6c86 <timer_stop+0x1a>
    6c7a:	687b      	ldr	r3, [r7, #4]
    6c7c:	681b      	ldr	r3, [r3, #0]
    6c7e:	2b00      	cmp	r3, #0
    6c80:	d001      	beq.n	6c86 <timer_stop+0x1a>
    6c82:	2301      	movs	r3, #1
    6c84:	e000      	b.n	6c88 <timer_stop+0x1c>
    6c86:	2300      	movs	r3, #0
    6c88:	f003 0301 	and.w	r3, r3, #1
    6c8c:	b2db      	uxtb	r3, r3
    6c8e:	2262      	movs	r2, #98	; 0x62
    6c90:	490f      	ldr	r1, [pc, #60]	; (6cd0 <timer_stop+0x64>)
    6c92:	4618      	mov	r0, r3
    6c94:	4b0f      	ldr	r3, [pc, #60]	; (6cd4 <timer_stop+0x68>)
    6c96:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    6c98:	687b      	ldr	r3, [r7, #4]
    6c9a:	681b      	ldr	r3, [r3, #0]
    6c9c:	699b      	ldr	r3, [r3, #24]
    6c9e:	687a      	ldr	r2, [r7, #4]
    6ca0:	3204      	adds	r2, #4
    6ca2:	4610      	mov	r0, r2
    6ca4:	4798      	blx	r3
    6ca6:	4603      	mov	r3, r0
    6ca8:	f083 0301 	eor.w	r3, r3, #1
    6cac:	b2db      	uxtb	r3, r3
    6cae:	2b00      	cmp	r3, #0
    6cb0:	d002      	beq.n	6cb8 <timer_stop+0x4c>
		return ERR_DENIED;
    6cb2:	f06f 0310 	mvn.w	r3, #16
    6cb6:	e007      	b.n	6cc8 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    6cb8:	687b      	ldr	r3, [r7, #4]
    6cba:	681b      	ldr	r3, [r3, #0]
    6cbc:	68db      	ldr	r3, [r3, #12]
    6cbe:	687a      	ldr	r2, [r7, #4]
    6cc0:	3204      	adds	r2, #4
    6cc2:	4610      	mov	r0, r2
    6cc4:	4798      	blx	r3

	return ERR_NONE;
    6cc6:	2300      	movs	r3, #0
}
    6cc8:	4618      	mov	r0, r3
    6cca:	3708      	adds	r7, #8
    6ccc:	46bd      	mov	sp, r7
    6cce:	bd80      	pop	{r7, pc}
    6cd0:	0001f974 	.word	0x0001f974
    6cd4:	0000799d 	.word	0x0000799d

00006cd8 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    6cd8:	b580      	push	{r7, lr}
    6cda:	b084      	sub	sp, #16
    6cdc:	af00      	add	r7, sp, #0
    6cde:	6078      	str	r0, [r7, #4]
    6ce0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    6ce2:	687b      	ldr	r3, [r7, #4]
    6ce4:	2b00      	cmp	r3, #0
    6ce6:	d008      	beq.n	6cfa <timer_add_task+0x22>
    6ce8:	683b      	ldr	r3, [r7, #0]
    6cea:	2b00      	cmp	r3, #0
    6cec:	d005      	beq.n	6cfa <timer_add_task+0x22>
    6cee:	687b      	ldr	r3, [r7, #4]
    6cf0:	681b      	ldr	r3, [r3, #0]
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d001      	beq.n	6cfa <timer_add_task+0x22>
    6cf6:	2301      	movs	r3, #1
    6cf8:	e000      	b.n	6cfc <timer_add_task+0x24>
    6cfa:	2300      	movs	r3, #0
    6cfc:	f003 0301 	and.w	r3, r3, #1
    6d00:	b2db      	uxtb	r3, r3
    6d02:	227b      	movs	r2, #123	; 0x7b
    6d04:	492f      	ldr	r1, [pc, #188]	; (6dc4 <timer_add_task+0xec>)
    6d06:	4618      	mov	r0, r3
    6d08:	4b2f      	ldr	r3, [pc, #188]	; (6dc8 <timer_add_task+0xf0>)
    6d0a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    6d0c:	687b      	ldr	r3, [r7, #4]
    6d0e:	7f1b      	ldrb	r3, [r3, #28]
    6d10:	b2db      	uxtb	r3, r3
    6d12:	f043 0301 	orr.w	r3, r3, #1
    6d16:	b2da      	uxtb	r2, r3
    6d18:	687b      	ldr	r3, [r7, #4]
    6d1a:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    6d1c:	687b      	ldr	r3, [r7, #4]
    6d1e:	3318      	adds	r3, #24
    6d20:	6839      	ldr	r1, [r7, #0]
    6d22:	4618      	mov	r0, r3
    6d24:	4b29      	ldr	r3, [pc, #164]	; (6dcc <timer_add_task+0xf4>)
    6d26:	4798      	blx	r3
    6d28:	4603      	mov	r3, r0
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	d00f      	beq.n	6d4e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6d2e:	687b      	ldr	r3, [r7, #4]
    6d30:	7f1b      	ldrb	r3, [r3, #28]
    6d32:	b2db      	uxtb	r3, r3
    6d34:	f023 0301 	bic.w	r3, r3, #1
    6d38:	b2da      	uxtb	r2, r3
    6d3a:	687b      	ldr	r3, [r7, #4]
    6d3c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    6d3e:	2280      	movs	r2, #128	; 0x80
    6d40:	4920      	ldr	r1, [pc, #128]	; (6dc4 <timer_add_task+0xec>)
    6d42:	2000      	movs	r0, #0
    6d44:	4b20      	ldr	r3, [pc, #128]	; (6dc8 <timer_add_task+0xf0>)
    6d46:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    6d48:	f06f 0311 	mvn.w	r3, #17
    6d4c:	e035      	b.n	6dba <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    6d4e:	687b      	ldr	r3, [r7, #4]
    6d50:	695a      	ldr	r2, [r3, #20]
    6d52:	683b      	ldr	r3, [r7, #0]
    6d54:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    6d56:	687b      	ldr	r3, [r7, #4]
    6d58:	f103 0018 	add.w	r0, r3, #24
    6d5c:	687b      	ldr	r3, [r7, #4]
    6d5e:	695b      	ldr	r3, [r3, #20]
    6d60:	461a      	mov	r2, r3
    6d62:	6839      	ldr	r1, [r7, #0]
    6d64:	4b1a      	ldr	r3, [pc, #104]	; (6dd0 <timer_add_task+0xf8>)
    6d66:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6d68:	687b      	ldr	r3, [r7, #4]
    6d6a:	7f1b      	ldrb	r3, [r3, #28]
    6d6c:	b2db      	uxtb	r3, r3
    6d6e:	f023 0301 	bic.w	r3, r3, #1
    6d72:	b2da      	uxtb	r2, r3
    6d74:	687b      	ldr	r3, [r7, #4]
    6d76:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	7f1b      	ldrb	r3, [r3, #28]
    6d7c:	b2db      	uxtb	r3, r3
    6d7e:	f003 0302 	and.w	r3, r3, #2
    6d82:	2b00      	cmp	r3, #0
    6d84:	d018      	beq.n	6db8 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    6d86:	f107 030c 	add.w	r3, r7, #12
    6d8a:	4618      	mov	r0, r3
    6d8c:	4b11      	ldr	r3, [pc, #68]	; (6dd4 <timer_add_task+0xfc>)
    6d8e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    6d90:	687b      	ldr	r3, [r7, #4]
    6d92:	7f1b      	ldrb	r3, [r3, #28]
    6d94:	b2db      	uxtb	r3, r3
    6d96:	f023 0302 	bic.w	r3, r3, #2
    6d9a:	b2da      	uxtb	r2, r3
    6d9c:	687b      	ldr	r3, [r7, #4]
    6d9e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    6da0:	687b      	ldr	r3, [r7, #4]
    6da2:	681b      	ldr	r3, [r3, #0]
    6da4:	69db      	ldr	r3, [r3, #28]
    6da6:	687a      	ldr	r2, [r7, #4]
    6da8:	3204      	adds	r2, #4
    6daa:	4610      	mov	r0, r2
    6dac:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    6dae:	f107 030c 	add.w	r3, r7, #12
    6db2:	4618      	mov	r0, r3
    6db4:	4b08      	ldr	r3, [pc, #32]	; (6dd8 <timer_add_task+0x100>)
    6db6:	4798      	blx	r3
	}

	return ERR_NONE;
    6db8:	2300      	movs	r3, #0
}
    6dba:	4618      	mov	r0, r3
    6dbc:	3710      	adds	r7, #16
    6dbe:	46bd      	mov	sp, r7
    6dc0:	bd80      	pop	{r7, pc}
    6dc2:	bf00      	nop
    6dc4:	0001f974 	.word	0x0001f974
    6dc8:	0000799d 	.word	0x0000799d
    6dcc:	000079c5 	.word	0x000079c5
    6dd0:	00006ed9 	.word	0x00006ed9
    6dd4:	0001059d 	.word	0x0001059d
    6dd8:	000105c3 	.word	0x000105c3

00006ddc <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    6ddc:	b580      	push	{r7, lr}
    6dde:	b084      	sub	sp, #16
    6de0:	af00      	add	r7, sp, #0
    6de2:	6078      	str	r0, [r7, #4]
    6de4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    6de6:	687b      	ldr	r3, [r7, #4]
    6de8:	2b00      	cmp	r3, #0
    6dea:	d008      	beq.n	6dfe <timer_remove_task+0x22>
    6dec:	683b      	ldr	r3, [r7, #0]
    6dee:	2b00      	cmp	r3, #0
    6df0:	d005      	beq.n	6dfe <timer_remove_task+0x22>
    6df2:	687b      	ldr	r3, [r7, #4]
    6df4:	681b      	ldr	r3, [r3, #0]
    6df6:	2b00      	cmp	r3, #0
    6df8:	d001      	beq.n	6dfe <timer_remove_task+0x22>
    6dfa:	2301      	movs	r3, #1
    6dfc:	e000      	b.n	6e00 <timer_remove_task+0x24>
    6dfe:	2300      	movs	r3, #0
    6e00:	f003 0301 	and.w	r3, r3, #1
    6e04:	b2db      	uxtb	r3, r3
    6e06:	2296      	movs	r2, #150	; 0x96
    6e08:	492d      	ldr	r1, [pc, #180]	; (6ec0 <timer_remove_task+0xe4>)
    6e0a:	4618      	mov	r0, r3
    6e0c:	4b2d      	ldr	r3, [pc, #180]	; (6ec4 <timer_remove_task+0xe8>)
    6e0e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    6e10:	687b      	ldr	r3, [r7, #4]
    6e12:	7f1b      	ldrb	r3, [r3, #28]
    6e14:	b2db      	uxtb	r3, r3
    6e16:	f043 0301 	orr.w	r3, r3, #1
    6e1a:	b2da      	uxtb	r2, r3
    6e1c:	687b      	ldr	r3, [r7, #4]
    6e1e:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    6e20:	687b      	ldr	r3, [r7, #4]
    6e22:	3318      	adds	r3, #24
    6e24:	6839      	ldr	r1, [r7, #0]
    6e26:	4618      	mov	r0, r3
    6e28:	4b27      	ldr	r3, [pc, #156]	; (6ec8 <timer_remove_task+0xec>)
    6e2a:	4798      	blx	r3
    6e2c:	4603      	mov	r3, r0
    6e2e:	f083 0301 	eor.w	r3, r3, #1
    6e32:	b2db      	uxtb	r3, r3
    6e34:	2b00      	cmp	r3, #0
    6e36:	d00f      	beq.n	6e58 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6e38:	687b      	ldr	r3, [r7, #4]
    6e3a:	7f1b      	ldrb	r3, [r3, #28]
    6e3c:	b2db      	uxtb	r3, r3
    6e3e:	f023 0301 	bic.w	r3, r3, #1
    6e42:	b2da      	uxtb	r2, r3
    6e44:	687b      	ldr	r3, [r7, #4]
    6e46:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    6e48:	229b      	movs	r2, #155	; 0x9b
    6e4a:	491d      	ldr	r1, [pc, #116]	; (6ec0 <timer_remove_task+0xe4>)
    6e4c:	2000      	movs	r0, #0
    6e4e:	4b1d      	ldr	r3, [pc, #116]	; (6ec4 <timer_remove_task+0xe8>)
    6e50:	4798      	blx	r3
		return ERR_NOT_FOUND;
    6e52:	f06f 0309 	mvn.w	r3, #9
    6e56:	e02e      	b.n	6eb6 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    6e58:	687b      	ldr	r3, [r7, #4]
    6e5a:	3318      	adds	r3, #24
    6e5c:	6839      	ldr	r1, [r7, #0]
    6e5e:	4618      	mov	r0, r3
    6e60:	4b1a      	ldr	r3, [pc, #104]	; (6ecc <timer_remove_task+0xf0>)
    6e62:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    6e64:	687b      	ldr	r3, [r7, #4]
    6e66:	7f1b      	ldrb	r3, [r3, #28]
    6e68:	b2db      	uxtb	r3, r3
    6e6a:	f023 0301 	bic.w	r3, r3, #1
    6e6e:	b2da      	uxtb	r2, r3
    6e70:	687b      	ldr	r3, [r7, #4]
    6e72:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    6e74:	687b      	ldr	r3, [r7, #4]
    6e76:	7f1b      	ldrb	r3, [r3, #28]
    6e78:	b2db      	uxtb	r3, r3
    6e7a:	f003 0302 	and.w	r3, r3, #2
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d018      	beq.n	6eb4 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    6e82:	f107 030c 	add.w	r3, r7, #12
    6e86:	4618      	mov	r0, r3
    6e88:	4b11      	ldr	r3, [pc, #68]	; (6ed0 <timer_remove_task+0xf4>)
    6e8a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    6e8c:	687b      	ldr	r3, [r7, #4]
    6e8e:	7f1b      	ldrb	r3, [r3, #28]
    6e90:	b2db      	uxtb	r3, r3
    6e92:	f023 0302 	bic.w	r3, r3, #2
    6e96:	b2da      	uxtb	r2, r3
    6e98:	687b      	ldr	r3, [r7, #4]
    6e9a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    6e9c:	687b      	ldr	r3, [r7, #4]
    6e9e:	681b      	ldr	r3, [r3, #0]
    6ea0:	69db      	ldr	r3, [r3, #28]
    6ea2:	687a      	ldr	r2, [r7, #4]
    6ea4:	3204      	adds	r2, #4
    6ea6:	4610      	mov	r0, r2
    6ea8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    6eaa:	f107 030c 	add.w	r3, r7, #12
    6eae:	4618      	mov	r0, r3
    6eb0:	4b08      	ldr	r3, [pc, #32]	; (6ed4 <timer_remove_task+0xf8>)
    6eb2:	4798      	blx	r3
	}

	return ERR_NONE;
    6eb4:	2300      	movs	r3, #0
}
    6eb6:	4618      	mov	r0, r3
    6eb8:	3710      	adds	r7, #16
    6eba:	46bd      	mov	sp, r7
    6ebc:	bd80      	pop	{r7, pc}
    6ebe:	bf00      	nop
    6ec0:	0001f974 	.word	0x0001f974
    6ec4:	0000799d 	.word	0x0000799d
    6ec8:	000079c5 	.word	0x000079c5
    6ecc:	00007b27 	.word	0x00007b27
    6ed0:	0001059d 	.word	0x0001059d
    6ed4:	000105c3 	.word	0x000105c3

00006ed8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    6ed8:	b580      	push	{r7, lr}
    6eda:	b088      	sub	sp, #32
    6edc:	af00      	add	r7, sp, #0
    6ede:	60f8      	str	r0, [r7, #12]
    6ee0:	60b9      	str	r1, [r7, #8]
    6ee2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    6ee4:	2300      	movs	r3, #0
    6ee6:	61bb      	str	r3, [r7, #24]
    6ee8:	68f8      	ldr	r0, [r7, #12]
    6eea:	4b23      	ldr	r3, [pc, #140]	; (6f78 <timer_add_timer_task+0xa0>)
    6eec:	4798      	blx	r3
    6eee:	6138      	str	r0, [r7, #16]

	if (!head) {
    6ef0:	693b      	ldr	r3, [r7, #16]
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d104      	bne.n	6f00 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    6ef6:	68b9      	ldr	r1, [r7, #8]
    6ef8:	68f8      	ldr	r0, [r7, #12]
    6efa:	4b20      	ldr	r3, [pc, #128]	; (6f7c <timer_add_timer_task+0xa4>)
    6efc:	4798      	blx	r3
		return;
    6efe:	e037      	b.n	6f70 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    6f00:	693b      	ldr	r3, [r7, #16]
    6f02:	61fb      	str	r3, [r7, #28]
    6f04:	e022      	b.n	6f4c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    6f06:	69fb      	ldr	r3, [r7, #28]
    6f08:	685a      	ldr	r2, [r3, #4]
    6f0a:	687b      	ldr	r3, [r7, #4]
    6f0c:	429a      	cmp	r2, r3
    6f0e:	d808      	bhi.n	6f22 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    6f10:	69fb      	ldr	r3, [r7, #28]
    6f12:	689a      	ldr	r2, [r3, #8]
    6f14:	69fb      	ldr	r3, [r7, #28]
    6f16:	6859      	ldr	r1, [r3, #4]
    6f18:	687b      	ldr	r3, [r7, #4]
    6f1a:	1acb      	subs	r3, r1, r3
    6f1c:	4413      	add	r3, r2
    6f1e:	617b      	str	r3, [r7, #20]
    6f20:	e009      	b.n	6f36 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    6f22:	69fb      	ldr	r3, [r7, #28]
    6f24:	689a      	ldr	r2, [r3, #8]
    6f26:	69fb      	ldr	r3, [r7, #28]
    6f28:	685b      	ldr	r3, [r3, #4]
    6f2a:	441a      	add	r2, r3
    6f2c:	687b      	ldr	r3, [r7, #4]
    6f2e:	425b      	negs	r3, r3
    6f30:	4413      	add	r3, r2
    6f32:	3301      	adds	r3, #1
    6f34:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    6f36:	68bb      	ldr	r3, [r7, #8]
    6f38:	689a      	ldr	r2, [r3, #8]
    6f3a:	697b      	ldr	r3, [r7, #20]
    6f3c:	429a      	cmp	r2, r3
    6f3e:	d909      	bls.n	6f54 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    6f40:	69fb      	ldr	r3, [r7, #28]
    6f42:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    6f44:	69f8      	ldr	r0, [r7, #28]
    6f46:	4b0e      	ldr	r3, [pc, #56]	; (6f80 <timer_add_timer_task+0xa8>)
    6f48:	4798      	blx	r3
    6f4a:	61f8      	str	r0, [r7, #28]
    6f4c:	69fb      	ldr	r3, [r7, #28]
    6f4e:	2b00      	cmp	r3, #0
    6f50:	d1d9      	bne.n	6f06 <timer_add_timer_task+0x2e>
    6f52:	e000      	b.n	6f56 <timer_add_timer_task+0x7e>
			break;
    6f54:	bf00      	nop
	}

	if (it == head) {
    6f56:	69fa      	ldr	r2, [r7, #28]
    6f58:	693b      	ldr	r3, [r7, #16]
    6f5a:	429a      	cmp	r2, r3
    6f5c:	d104      	bne.n	6f68 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    6f5e:	68b9      	ldr	r1, [r7, #8]
    6f60:	68f8      	ldr	r0, [r7, #12]
    6f62:	4b06      	ldr	r3, [pc, #24]	; (6f7c <timer_add_timer_task+0xa4>)
    6f64:	4798      	blx	r3
    6f66:	e003      	b.n	6f70 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    6f68:	68b9      	ldr	r1, [r7, #8]
    6f6a:	69b8      	ldr	r0, [r7, #24]
    6f6c:	4b05      	ldr	r3, [pc, #20]	; (6f84 <timer_add_timer_task+0xac>)
    6f6e:	4798      	blx	r3
	}
}
    6f70:	3720      	adds	r7, #32
    6f72:	46bd      	mov	sp, r7
    6f74:	bd80      	pop	{r7, pc}
    6f76:	bf00      	nop
    6f78:	00006b5d 	.word	0x00006b5d
    6f7c:	000079fd 	.word	0x000079fd
    6f80:	00006b75 	.word	0x00006b75
    6f84:	00007a55 	.word	0x00007a55

00006f88 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    6f88:	b580      	push	{r7, lr}
    6f8a:	b086      	sub	sp, #24
    6f8c:	af00      	add	r7, sp, #0
    6f8e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    6f90:	687b      	ldr	r3, [r7, #4]
    6f92:	3b04      	subs	r3, #4
    6f94:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    6f96:	693b      	ldr	r3, [r7, #16]
    6f98:	3318      	adds	r3, #24
    6f9a:	4618      	mov	r0, r3
    6f9c:	4b27      	ldr	r3, [pc, #156]	; (703c <timer_process_counted+0xb4>)
    6f9e:	4798      	blx	r3
    6fa0:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    6fa2:	693b      	ldr	r3, [r7, #16]
    6fa4:	695b      	ldr	r3, [r3, #20]
    6fa6:	1c5a      	adds	r2, r3, #1
    6fa8:	693b      	ldr	r3, [r7, #16]
    6faa:	615a      	str	r2, [r3, #20]
    6fac:	693b      	ldr	r3, [r7, #16]
    6fae:	695b      	ldr	r3, [r3, #20]
    6fb0:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    6fb2:	693b      	ldr	r3, [r7, #16]
    6fb4:	7f1b      	ldrb	r3, [r3, #28]
    6fb6:	b2db      	uxtb	r3, r3
    6fb8:	f003 0301 	and.w	r3, r3, #1
    6fbc:	2b00      	cmp	r3, #0
    6fbe:	d106      	bne.n	6fce <timer_process_counted+0x46>
    6fc0:	693b      	ldr	r3, [r7, #16]
    6fc2:	7f1b      	ldrb	r3, [r3, #28]
    6fc4:	b2db      	uxtb	r3, r3
    6fc6:	f003 0302 	and.w	r3, r3, #2
    6fca:	2b00      	cmp	r3, #0
    6fcc:	d027      	beq.n	701e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    6fce:	693b      	ldr	r3, [r7, #16]
    6fd0:	7f1b      	ldrb	r3, [r3, #28]
    6fd2:	b2db      	uxtb	r3, r3
    6fd4:	f043 0302 	orr.w	r3, r3, #2
    6fd8:	b2da      	uxtb	r2, r3
    6fda:	693b      	ldr	r3, [r7, #16]
    6fdc:	771a      	strb	r2, [r3, #28]
		return;
    6fde:	e029      	b.n	7034 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    6fe0:	697b      	ldr	r3, [r7, #20]
    6fe2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    6fe4:	693b      	ldr	r3, [r7, #16]
    6fe6:	3318      	adds	r3, #24
    6fe8:	4618      	mov	r0, r3
    6fea:	4b15      	ldr	r3, [pc, #84]	; (7040 <timer_process_counted+0xb8>)
    6fec:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    6fee:	68bb      	ldr	r3, [r7, #8]
    6ff0:	7c1b      	ldrb	r3, [r3, #16]
    6ff2:	2b01      	cmp	r3, #1
    6ff4:	d109      	bne.n	700a <timer_process_counted+0x82>
			tmp->time_label = time;
    6ff6:	68bb      	ldr	r3, [r7, #8]
    6ff8:	68fa      	ldr	r2, [r7, #12]
    6ffa:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    6ffc:	693b      	ldr	r3, [r7, #16]
    6ffe:	3318      	adds	r3, #24
    7000:	68fa      	ldr	r2, [r7, #12]
    7002:	68b9      	ldr	r1, [r7, #8]
    7004:	4618      	mov	r0, r3
    7006:	4b0f      	ldr	r3, [pc, #60]	; (7044 <timer_process_counted+0xbc>)
    7008:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    700a:	693b      	ldr	r3, [r7, #16]
    700c:	3318      	adds	r3, #24
    700e:	4618      	mov	r0, r3
    7010:	4b0a      	ldr	r3, [pc, #40]	; (703c <timer_process_counted+0xb4>)
    7012:	4798      	blx	r3
    7014:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    7016:	68bb      	ldr	r3, [r7, #8]
    7018:	68db      	ldr	r3, [r3, #12]
    701a:	68b8      	ldr	r0, [r7, #8]
    701c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    701e:	697b      	ldr	r3, [r7, #20]
    7020:	2b00      	cmp	r3, #0
    7022:	d007      	beq.n	7034 <timer_process_counted+0xac>
    7024:	697b      	ldr	r3, [r7, #20]
    7026:	685b      	ldr	r3, [r3, #4]
    7028:	68fa      	ldr	r2, [r7, #12]
    702a:	1ad2      	subs	r2, r2, r3
    702c:	697b      	ldr	r3, [r7, #20]
    702e:	689b      	ldr	r3, [r3, #8]
    7030:	429a      	cmp	r2, r3
    7032:	d2d5      	bcs.n	6fe0 <timer_process_counted+0x58>
	}
}
    7034:	3718      	adds	r7, #24
    7036:	46bd      	mov	sp, r7
    7038:	bd80      	pop	{r7, pc}
    703a:	bf00      	nop
    703c:	00006b5d 	.word	0x00006b5d
    7040:	00007af5 	.word	0x00007af5
    7044:	00006ed9 	.word	0x00006ed9

00007048 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    7048:	b480      	push	{r7}
    704a:	b085      	sub	sp, #20
    704c:	af00      	add	r7, sp, #0
    704e:	4603      	mov	r3, r0
    7050:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7052:	2300      	movs	r3, #0
    7054:	73fb      	strb	r3, [r7, #15]
    7056:	e029      	b.n	70ac <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    7058:	f997 300f 	ldrsb.w	r3, [r7, #15]
    705c:	4a19      	ldr	r2, [pc, #100]	; (70c4 <_usb_d_find_ep+0x7c>)
    705e:	015b      	lsls	r3, r3, #5
    7060:	4413      	add	r3, r2
    7062:	3301      	adds	r3, #1
    7064:	781b      	ldrb	r3, [r3, #0]
    7066:	79fa      	ldrb	r2, [r7, #7]
    7068:	429a      	cmp	r2, r3
    706a:	d102      	bne.n	7072 <_usb_d_find_ep+0x2a>
			return i;
    706c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7070:	e022      	b.n	70b8 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    7072:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7076:	4a13      	ldr	r2, [pc, #76]	; (70c4 <_usb_d_find_ep+0x7c>)
    7078:	015b      	lsls	r3, r3, #5
    707a:	4413      	add	r3, r2
    707c:	781b      	ldrb	r3, [r3, #0]
    707e:	2b00      	cmp	r3, #0
    7080:	d10e      	bne.n	70a0 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    7082:	79fb      	ldrb	r3, [r7, #7]
    7084:	f003 030f 	and.w	r3, r3, #15
    7088:	f997 200f 	ldrsb.w	r2, [r7, #15]
    708c:	490d      	ldr	r1, [pc, #52]	; (70c4 <_usb_d_find_ep+0x7c>)
    708e:	0152      	lsls	r2, r2, #5
    7090:	440a      	add	r2, r1
    7092:	3201      	adds	r2, #1
    7094:	7812      	ldrb	r2, [r2, #0]
    7096:	4293      	cmp	r3, r2
    7098:	d102      	bne.n	70a0 <_usb_d_find_ep+0x58>
			return i;
    709a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    709e:	e00b      	b.n	70b8 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    70a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    70a4:	b2db      	uxtb	r3, r3
    70a6:	3301      	adds	r3, #1
    70a8:	b2db      	uxtb	r3, r3
    70aa:	73fb      	strb	r3, [r7, #15]
    70ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    70b0:	2b03      	cmp	r3, #3
    70b2:	ddd1      	ble.n	7058 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    70b4:	f04f 33ff 	mov.w	r3, #4294967295
}
    70b8:	4618      	mov	r0, r3
    70ba:	3714      	adds	r7, #20
    70bc:	46bd      	mov	sp, r7
    70be:	f85d 7b04 	ldr.w	r7, [sp], #4
    70c2:	4770      	bx	lr
    70c4:	20008748 	.word	0x20008748

000070c8 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    70c8:	b580      	push	{r7, lr}
    70ca:	b088      	sub	sp, #32
    70cc:	af00      	add	r7, sp, #0
    70ce:	60ba      	str	r2, [r7, #8]
    70d0:	607b      	str	r3, [r7, #4]
    70d2:	4603      	mov	r3, r0
    70d4:	73fb      	strb	r3, [r7, #15]
    70d6:	460b      	mov	r3, r1
    70d8:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    70da:	68bb      	ldr	r3, [r7, #8]
    70dc:	617b      	str	r3, [r7, #20]
    70de:	687b      	ldr	r3, [r7, #4]
    70e0:	61bb      	str	r3, [r7, #24]
    70e2:	7bbb      	ldrb	r3, [r7, #14]
    70e4:	2b00      	cmp	r3, #0
    70e6:	d004      	beq.n	70f2 <_usb_d_trans+0x2a>
    70e8:	7bfb      	ldrb	r3, [r7, #15]
    70ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    70ee:	b2db      	uxtb	r3, r3
    70f0:	e003      	b.n	70fa <_usb_d_trans+0x32>
    70f2:	7bfb      	ldrb	r3, [r7, #15]
    70f4:	f003 030f 	and.w	r3, r3, #15
    70f8:	b2db      	uxtb	r3, r3
    70fa:	773b      	strb	r3, [r7, #28]
    70fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    7100:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    7102:	f107 0314 	add.w	r3, r7, #20
    7106:	4618      	mov	r0, r3
    7108:	4b03      	ldr	r3, [pc, #12]	; (7118 <_usb_d_trans+0x50>)
    710a:	4798      	blx	r3
    710c:	4603      	mov	r3, r0
}
    710e:	4618      	mov	r0, r3
    7110:	3720      	adds	r7, #32
    7112:	46bd      	mov	sp, r7
    7114:	bd80      	pop	{r7, pc}
    7116:	bf00      	nop
    7118:	0000f951 	.word	0x0000f951

0000711c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    711c:	b480      	push	{r7}
    711e:	b085      	sub	sp, #20
    7120:	af00      	add	r7, sp, #0
    7122:	60f8      	str	r0, [r7, #12]
    7124:	60b9      	str	r1, [r7, #8]
    7126:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    7128:	2300      	movs	r3, #0
}
    712a:	4618      	mov	r0, r3
    712c:	3714      	adds	r7, #20
    712e:	46bd      	mov	sp, r7
    7130:	f85d 7b04 	ldr.w	r7, [sp], #4
    7134:	4770      	bx	lr
	...

00007138 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    7138:	b580      	push	{r7, lr}
    713a:	b086      	sub	sp, #24
    713c:	af00      	add	r7, sp, #0
    713e:	4603      	mov	r3, r0
    7140:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7142:	79fb      	ldrb	r3, [r7, #7]
    7144:	4618      	mov	r0, r3
    7146:	4b2a      	ldr	r3, [pc, #168]	; (71f0 <usb_d_cb_trans_setup+0xb8>)
    7148:	4798      	blx	r3
    714a:	4603      	mov	r3, r0
    714c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    714e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7152:	015b      	lsls	r3, r3, #5
    7154:	4a27      	ldr	r2, [pc, #156]	; (71f4 <usb_d_cb_trans_setup+0xbc>)
    7156:	4413      	add	r3, r2
    7158:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    715a:	693b      	ldr	r3, [r7, #16]
    715c:	330c      	adds	r3, #12
    715e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    7160:	79fb      	ldrb	r3, [r7, #7]
    7162:	68f9      	ldr	r1, [r7, #12]
    7164:	4618      	mov	r0, r3
    7166:	4b24      	ldr	r3, [pc, #144]	; (71f8 <usb_d_cb_trans_setup+0xc0>)
    7168:	4798      	blx	r3
    716a:	4603      	mov	r3, r0
    716c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    716e:	7afb      	ldrb	r3, [r7, #11]
    7170:	2b08      	cmp	r3, #8
    7172:	d00d      	beq.n	7190 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    7174:	79fb      	ldrb	r3, [r7, #7]
    7176:	2101      	movs	r1, #1
    7178:	4618      	mov	r0, r3
    717a:	4b20      	ldr	r3, [pc, #128]	; (71fc <usb_d_cb_trans_setup+0xc4>)
    717c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    717e:	79fb      	ldrb	r3, [r7, #7]
    7180:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7184:	b2db      	uxtb	r3, r3
    7186:	2101      	movs	r1, #1
    7188:	4618      	mov	r0, r3
    718a:	4b1c      	ldr	r3, [pc, #112]	; (71fc <usb_d_cb_trans_setup+0xc4>)
    718c:	4798      	blx	r3
		return;
    718e:	e02b      	b.n	71e8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7190:	79fb      	ldrb	r3, [r7, #7]
    7192:	2100      	movs	r1, #0
    7194:	4618      	mov	r0, r3
    7196:	4b19      	ldr	r3, [pc, #100]	; (71fc <usb_d_cb_trans_setup+0xc4>)
    7198:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    719a:	79fb      	ldrb	r3, [r7, #7]
    719c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    71a0:	b2db      	uxtb	r3, r3
    71a2:	2100      	movs	r1, #0
    71a4:	4618      	mov	r0, r3
    71a6:	4b15      	ldr	r3, [pc, #84]	; (71fc <usb_d_cb_trans_setup+0xc4>)
    71a8:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    71aa:	693b      	ldr	r3, [r7, #16]
    71ac:	2201      	movs	r2, #1
    71ae:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    71b0:	693b      	ldr	r3, [r7, #16]
    71b2:	695b      	ldr	r3, [r3, #20]
    71b4:	79fa      	ldrb	r2, [r7, #7]
    71b6:	68f9      	ldr	r1, [r7, #12]
    71b8:	4610      	mov	r0, r2
    71ba:	4798      	blx	r3
    71bc:	4603      	mov	r3, r0
    71be:	f083 0301 	eor.w	r3, r3, #1
    71c2:	b2db      	uxtb	r3, r3
    71c4:	2b00      	cmp	r3, #0
    71c6:	d00f      	beq.n	71e8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    71c8:	693b      	ldr	r3, [r7, #16]
    71ca:	2205      	movs	r2, #5
    71cc:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    71ce:	79fb      	ldrb	r3, [r7, #7]
    71d0:	2101      	movs	r1, #1
    71d2:	4618      	mov	r0, r3
    71d4:	4b09      	ldr	r3, [pc, #36]	; (71fc <usb_d_cb_trans_setup+0xc4>)
    71d6:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    71d8:	79fb      	ldrb	r3, [r7, #7]
    71da:	f063 037f 	orn	r3, r3, #127	; 0x7f
    71de:	b2db      	uxtb	r3, r3
    71e0:	2101      	movs	r1, #1
    71e2:	4618      	mov	r0, r3
    71e4:	4b05      	ldr	r3, [pc, #20]	; (71fc <usb_d_cb_trans_setup+0xc4>)
    71e6:	4798      	blx	r3
	}
}
    71e8:	3718      	adds	r7, #24
    71ea:	46bd      	mov	sp, r7
    71ec:	bd80      	pop	{r7, pc}
    71ee:	bf00      	nop
    71f0:	00007049 	.word	0x00007049
    71f4:	20008748 	.word	0x20008748
    71f8:	0000f8a9 	.word	0x0000f8a9
    71fc:	0000f721 	.word	0x0000f721

00007200 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    7200:	b580      	push	{r7, lr}
    7202:	b084      	sub	sp, #16
    7204:	af00      	add	r7, sp, #0
    7206:	4603      	mov	r3, r0
    7208:	6039      	str	r1, [r7, #0]
    720a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    720c:	79fb      	ldrb	r3, [r7, #7]
    720e:	4618      	mov	r0, r3
    7210:	4b0d      	ldr	r3, [pc, #52]	; (7248 <usb_d_cb_trans_more+0x48>)
    7212:	4798      	blx	r3
    7214:	4603      	mov	r3, r0
    7216:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7218:	f997 300f 	ldrsb.w	r3, [r7, #15]
    721c:	015b      	lsls	r3, r3, #5
    721e:	4a0b      	ldr	r2, [pc, #44]	; (724c <usb_d_cb_trans_more+0x4c>)
    7220:	4413      	add	r3, r2
    7222:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    7224:	68bb      	ldr	r3, [r7, #8]
    7226:	789b      	ldrb	r3, [r3, #2]
    7228:	2b03      	cmp	r3, #3
    722a:	d107      	bne.n	723c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    722c:	68bb      	ldr	r3, [r7, #8]
    722e:	699b      	ldr	r3, [r3, #24]
    7230:	79fa      	ldrb	r2, [r7, #7]
    7232:	6839      	ldr	r1, [r7, #0]
    7234:	4610      	mov	r0, r2
    7236:	4798      	blx	r3
    7238:	4603      	mov	r3, r0
    723a:	e000      	b.n	723e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    723c:	2300      	movs	r3, #0
}
    723e:	4618      	mov	r0, r3
    7240:	3710      	adds	r7, #16
    7242:	46bd      	mov	sp, r7
    7244:	bd80      	pop	{r7, pc}
    7246:	bf00      	nop
    7248:	00007049 	.word	0x00007049
    724c:	20008748 	.word	0x20008748

00007250 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    7250:	b590      	push	{r4, r7, lr}
    7252:	b087      	sub	sp, #28
    7254:	af02      	add	r7, sp, #8
    7256:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	789b      	ldrb	r3, [r3, #2]
    725c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	7b1b      	ldrb	r3, [r3, #12]
    7262:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7266:	2b00      	cmp	r3, #0
    7268:	bf14      	ite	ne
    726a:	2301      	movne	r3, #1
    726c:	2300      	moveq	r3, #0
    726e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    7270:	7bfb      	ldrb	r3, [r7, #15]
    7272:	2b03      	cmp	r3, #3
    7274:	d13a      	bne.n	72ec <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    7276:	687b      	ldr	r3, [r7, #4]
    7278:	69db      	ldr	r3, [r3, #28]
    727a:	687a      	ldr	r2, [r7, #4]
    727c:	7850      	ldrb	r0, [r2, #1]
    727e:	687a      	ldr	r2, [r7, #4]
    7280:	320c      	adds	r2, #12
    7282:	2101      	movs	r1, #1
    7284:	4798      	blx	r3
    7286:	4603      	mov	r3, r0
    7288:	737b      	strb	r3, [r7, #13]
		if (err) {
    728a:	7b7b      	ldrb	r3, [r7, #13]
    728c:	2b00      	cmp	r3, #0
    728e:	d015      	beq.n	72bc <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    7290:	687b      	ldr	r3, [r7, #4]
    7292:	2205      	movs	r2, #5
    7294:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    7296:	687b      	ldr	r3, [r7, #4]
    7298:	2202      	movs	r2, #2
    729a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    729c:	7bbb      	ldrb	r3, [r7, #14]
    729e:	2b00      	cmp	r3, #0
    72a0:	d002      	beq.n	72a8 <usb_d_ctrl_trans_done+0x58>
    72a2:	687b      	ldr	r3, [r7, #4]
    72a4:	785b      	ldrb	r3, [r3, #1]
    72a6:	e004      	b.n	72b2 <usb_d_ctrl_trans_done+0x62>
    72a8:	687b      	ldr	r3, [r7, #4]
    72aa:	785b      	ldrb	r3, [r3, #1]
    72ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    72b0:	b2db      	uxtb	r3, r3
    72b2:	2101      	movs	r1, #1
    72b4:	4618      	mov	r0, r3
    72b6:	4b15      	ldr	r3, [pc, #84]	; (730c <usb_d_ctrl_trans_done+0xbc>)
    72b8:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    72ba:	e022      	b.n	7302 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    72bc:	687b      	ldr	r3, [r7, #4]
    72be:	2204      	movs	r2, #4
    72c0:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    72c2:	687b      	ldr	r3, [r7, #4]
    72c4:	7858      	ldrb	r0, [r3, #1]
    72c6:	7bbb      	ldrb	r3, [r7, #14]
    72c8:	2b00      	cmp	r3, #0
    72ca:	bf14      	ite	ne
    72cc:	2301      	movne	r3, #1
    72ce:	2300      	moveq	r3, #0
    72d0:	b2db      	uxtb	r3, r3
    72d2:	f083 0301 	eor.w	r3, r3, #1
    72d6:	b2db      	uxtb	r3, r3
    72d8:	f003 0301 	and.w	r3, r3, #1
    72dc:	b2d9      	uxtb	r1, r3
    72de:	2301      	movs	r3, #1
    72e0:	9300      	str	r3, [sp, #0]
    72e2:	2300      	movs	r3, #0
    72e4:	2200      	movs	r2, #0
    72e6:	4c0a      	ldr	r4, [pc, #40]	; (7310 <usb_d_ctrl_trans_done+0xc0>)
    72e8:	47a0      	blx	r4
}
    72ea:	e00a      	b.n	7302 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    72ec:	687b      	ldr	r3, [r7, #4]
    72ee:	69db      	ldr	r3, [r3, #28]
    72f0:	687a      	ldr	r2, [r7, #4]
    72f2:	7850      	ldrb	r0, [r2, #1]
    72f4:	687a      	ldr	r2, [r7, #4]
    72f6:	320c      	adds	r2, #12
    72f8:	2100      	movs	r1, #0
    72fa:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    72fc:	687b      	ldr	r3, [r7, #4]
    72fe:	2202      	movs	r2, #2
    7300:	709a      	strb	r2, [r3, #2]
}
    7302:	bf00      	nop
    7304:	3714      	adds	r7, #20
    7306:	46bd      	mov	sp, r7
    7308:	bd90      	pop	{r4, r7, pc}
    730a:	bf00      	nop
    730c:	0000f721 	.word	0x0000f721
    7310:	000070c9 	.word	0x000070c9

00007314 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    7314:	b580      	push	{r7, lr}
    7316:	b086      	sub	sp, #24
    7318:	af00      	add	r7, sp, #0
    731a:	4603      	mov	r3, r0
    731c:	60b9      	str	r1, [r7, #8]
    731e:	607a      	str	r2, [r7, #4]
    7320:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7322:	7bfb      	ldrb	r3, [r7, #15]
    7324:	4618      	mov	r0, r3
    7326:	4b2f      	ldr	r3, [pc, #188]	; (73e4 <_usb_d_cb_trans_done+0xd0>)
    7328:	4798      	blx	r3
    732a:	4603      	mov	r3, r0
    732c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    732e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7332:	015b      	lsls	r3, r3, #5
    7334:	4a2c      	ldr	r2, [pc, #176]	; (73e8 <_usb_d_cb_trans_done+0xd4>)
    7336:	4413      	add	r3, r2
    7338:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    733a:	68bb      	ldr	r3, [r7, #8]
    733c:	2b00      	cmp	r3, #0
    733e:	d10e      	bne.n	735e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    7340:	693b      	ldr	r3, [r7, #16]
    7342:	2200      	movs	r2, #0
    7344:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7346:	693b      	ldr	r3, [r7, #16]
    7348:	781b      	ldrb	r3, [r3, #0]
    734a:	2b00      	cmp	r3, #0
    734c:	d103      	bne.n	7356 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    734e:	6938      	ldr	r0, [r7, #16]
    7350:	4b26      	ldr	r3, [pc, #152]	; (73ec <_usb_d_cb_trans_done+0xd8>)
    7352:	4798      	blx	r3
			return;
    7354:	e043      	b.n	73de <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    7356:	693b      	ldr	r3, [r7, #16]
    7358:	2201      	movs	r2, #1
    735a:	709a      	strb	r2, [r3, #2]
    735c:	e038      	b.n	73d0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    735e:	68bb      	ldr	r3, [r7, #8]
    7360:	2b01      	cmp	r3, #1
    7362:	d113      	bne.n	738c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    7364:	693b      	ldr	r3, [r7, #16]
    7366:	2202      	movs	r2, #2
    7368:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    736a:	693b      	ldr	r3, [r7, #16]
    736c:	781b      	ldrb	r3, [r3, #0]
    736e:	2b00      	cmp	r3, #0
    7370:	d108      	bne.n	7384 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    7372:	693b      	ldr	r3, [r7, #16]
    7374:	2202      	movs	r2, #2
    7376:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7378:	7bfb      	ldrb	r3, [r7, #15]
    737a:	2100      	movs	r1, #0
    737c:	4618      	mov	r0, r3
    737e:	4b1c      	ldr	r3, [pc, #112]	; (73f0 <_usb_d_cb_trans_done+0xdc>)
    7380:	4798      	blx	r3
    7382:	e025      	b.n	73d0 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    7384:	693b      	ldr	r3, [r7, #16]
    7386:	2205      	movs	r2, #5
    7388:	709a      	strb	r2, [r3, #2]
    738a:	e021      	b.n	73d0 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    738c:	68bb      	ldr	r3, [r7, #8]
    738e:	2b02      	cmp	r3, #2
    7390:	d10e      	bne.n	73b0 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    7392:	693b      	ldr	r3, [r7, #16]
    7394:	2204      	movs	r2, #4
    7396:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    7398:	693b      	ldr	r3, [r7, #16]
    739a:	781b      	ldrb	r3, [r3, #0]
    739c:	2b00      	cmp	r3, #0
    739e:	d103      	bne.n	73a8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    73a0:	693b      	ldr	r3, [r7, #16]
    73a2:	2202      	movs	r2, #2
    73a4:	709a      	strb	r2, [r3, #2]
			return;
    73a6:	e01a      	b.n	73de <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    73a8:	693b      	ldr	r3, [r7, #16]
    73aa:	2201      	movs	r2, #1
    73ac:	709a      	strb	r2, [r3, #2]
    73ae:	e00f      	b.n	73d0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    73b0:	68bb      	ldr	r3, [r7, #8]
    73b2:	2b03      	cmp	r3, #3
    73b4:	d106      	bne.n	73c4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    73b6:	693b      	ldr	r3, [r7, #16]
    73b8:	2200      	movs	r2, #0
    73ba:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    73bc:	693b      	ldr	r3, [r7, #16]
    73be:	2205      	movs	r2, #5
    73c0:	70da      	strb	r2, [r3, #3]
    73c2:	e005      	b.n	73d0 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    73c4:	693b      	ldr	r3, [r7, #16]
    73c6:	2206      	movs	r2, #6
    73c8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    73ca:	693b      	ldr	r3, [r7, #16]
    73cc:	2206      	movs	r2, #6
    73ce:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    73d0:	693b      	ldr	r3, [r7, #16]
    73d2:	69db      	ldr	r3, [r3, #28]
    73d4:	693a      	ldr	r2, [r7, #16]
    73d6:	78d1      	ldrb	r1, [r2, #3]
    73d8:	687a      	ldr	r2, [r7, #4]
    73da:	7bf8      	ldrb	r0, [r7, #15]
    73dc:	4798      	blx	r3
}
    73de:	3718      	adds	r7, #24
    73e0:	46bd      	mov	sp, r7
    73e2:	bd80      	pop	{r7, pc}
    73e4:	00007049 	.word	0x00007049
    73e8:	20008748 	.word	0x20008748
    73ec:	00007251 	.word	0x00007251
    73f0:	0000f721 	.word	0x0000f721

000073f4 <usb_d_init>:

int32_t usb_d_init(void)
{
    73f4:	b580      	push	{r7, lr}
    73f6:	b082      	sub	sp, #8
    73f8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    73fa:	4b21      	ldr	r3, [pc, #132]	; (7480 <usb_d_init+0x8c>)
    73fc:	4798      	blx	r3
    73fe:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    7400:	683b      	ldr	r3, [r7, #0]
    7402:	2b00      	cmp	r3, #0
    7404:	da01      	bge.n	740a <usb_d_init+0x16>
		return rc;
    7406:	683b      	ldr	r3, [r7, #0]
    7408:	e036      	b.n	7478 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    740a:	2280      	movs	r2, #128	; 0x80
    740c:	2100      	movs	r1, #0
    740e:	481d      	ldr	r0, [pc, #116]	; (7484 <usb_d_init+0x90>)
    7410:	4b1d      	ldr	r3, [pc, #116]	; (7488 <usb_d_init+0x94>)
    7412:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7414:	2300      	movs	r3, #0
    7416:	71fb      	strb	r3, [r7, #7]
    7418:	e01e      	b.n	7458 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    741a:	79fb      	ldrb	r3, [r7, #7]
    741c:	4a19      	ldr	r2, [pc, #100]	; (7484 <usb_d_init+0x90>)
    741e:	015b      	lsls	r3, r3, #5
    7420:	4413      	add	r3, r2
    7422:	3301      	adds	r3, #1
    7424:	22ff      	movs	r2, #255	; 0xff
    7426:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    7428:	79fb      	ldrb	r3, [r7, #7]
    742a:	4a16      	ldr	r2, [pc, #88]	; (7484 <usb_d_init+0x90>)
    742c:	015b      	lsls	r3, r3, #5
    742e:	4413      	add	r3, r2
    7430:	3314      	adds	r3, #20
    7432:	4a16      	ldr	r2, [pc, #88]	; (748c <usb_d_init+0x98>)
    7434:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    7436:	79fb      	ldrb	r3, [r7, #7]
    7438:	4a12      	ldr	r2, [pc, #72]	; (7484 <usb_d_init+0x90>)
    743a:	015b      	lsls	r3, r3, #5
    743c:	4413      	add	r3, r2
    743e:	3318      	adds	r3, #24
    7440:	4a12      	ldr	r2, [pc, #72]	; (748c <usb_d_init+0x98>)
    7442:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    7444:	79fb      	ldrb	r3, [r7, #7]
    7446:	4a0f      	ldr	r2, [pc, #60]	; (7484 <usb_d_init+0x90>)
    7448:	015b      	lsls	r3, r3, #5
    744a:	4413      	add	r3, r2
    744c:	331c      	adds	r3, #28
    744e:	4a0f      	ldr	r2, [pc, #60]	; (748c <usb_d_init+0x98>)
    7450:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    7452:	79fb      	ldrb	r3, [r7, #7]
    7454:	3301      	adds	r3, #1
    7456:	71fb      	strb	r3, [r7, #7]
    7458:	79fb      	ldrb	r3, [r7, #7]
    745a:	2b03      	cmp	r3, #3
    745c:	d9dd      	bls.n	741a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    745e:	490c      	ldr	r1, [pc, #48]	; (7490 <usb_d_init+0x9c>)
    7460:	2000      	movs	r0, #0
    7462:	4b0c      	ldr	r3, [pc, #48]	; (7494 <usb_d_init+0xa0>)
    7464:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    7466:	490c      	ldr	r1, [pc, #48]	; (7498 <usb_d_init+0xa4>)
    7468:	2001      	movs	r0, #1
    746a:	4b0a      	ldr	r3, [pc, #40]	; (7494 <usb_d_init+0xa0>)
    746c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    746e:	490b      	ldr	r1, [pc, #44]	; (749c <usb_d_init+0xa8>)
    7470:	2002      	movs	r0, #2
    7472:	4b08      	ldr	r3, [pc, #32]	; (7494 <usb_d_init+0xa0>)
    7474:	4798      	blx	r3
	return ERR_NONE;
    7476:	2300      	movs	r3, #0
}
    7478:	4618      	mov	r0, r3
    747a:	3708      	adds	r7, #8
    747c:	46bd      	mov	sp, r7
    747e:	bd80      	pop	{r7, pc}
    7480:	0000ef69 	.word	0x0000ef69
    7484:	20008748 	.word	0x20008748
    7488:	0001b491 	.word	0x0001b491
    748c:	0000711d 	.word	0x0000711d
    7490:	00007139 	.word	0x00007139
    7494:	0000fbb1 	.word	0x0000fbb1
    7498:	00007201 	.word	0x00007201
    749c:	00007315 	.word	0x00007315

000074a0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    74a0:	b580      	push	{r7, lr}
    74a2:	b082      	sub	sp, #8
    74a4:	af00      	add	r7, sp, #0
    74a6:	4603      	mov	r3, r0
    74a8:	6039      	str	r1, [r7, #0]
    74aa:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    74ac:	79fb      	ldrb	r3, [r7, #7]
    74ae:	6839      	ldr	r1, [r7, #0]
    74b0:	4618      	mov	r0, r3
    74b2:	4b03      	ldr	r3, [pc, #12]	; (74c0 <usb_d_register_callback+0x20>)
    74b4:	4798      	blx	r3
}
    74b6:	bf00      	nop
    74b8:	3708      	adds	r7, #8
    74ba:	46bd      	mov	sp, r7
    74bc:	bd80      	pop	{r7, pc}
    74be:	bf00      	nop
    74c0:	0000fb69 	.word	0x0000fb69

000074c4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    74c4:	b580      	push	{r7, lr}
    74c6:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    74c8:	4b02      	ldr	r3, [pc, #8]	; (74d4 <usb_d_enable+0x10>)
    74ca:	4798      	blx	r3
    74cc:	4603      	mov	r3, r0
}
    74ce:	4618      	mov	r0, r3
    74d0:	bd80      	pop	{r7, pc}
    74d2:	bf00      	nop
    74d4:	0000f059 	.word	0x0000f059

000074d8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    74d8:	b580      	push	{r7, lr}
    74da:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    74dc:	4b01      	ldr	r3, [pc, #4]	; (74e4 <usb_d_attach+0xc>)
    74de:	4798      	blx	r3
}
    74e0:	bf00      	nop
    74e2:	bd80      	pop	{r7, pc}
    74e4:	0000f0dd 	.word	0x0000f0dd

000074e8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    74e8:	b580      	push	{r7, lr}
    74ea:	b082      	sub	sp, #8
    74ec:	af00      	add	r7, sp, #0
    74ee:	4603      	mov	r3, r0
    74f0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    74f2:	79fb      	ldrb	r3, [r7, #7]
    74f4:	4618      	mov	r0, r3
    74f6:	4b03      	ldr	r3, [pc, #12]	; (7504 <usb_d_set_address+0x1c>)
    74f8:	4798      	blx	r3
}
    74fa:	bf00      	nop
    74fc:	3708      	adds	r7, #8
    74fe:	46bd      	mov	sp, r7
    7500:	bd80      	pop	{r7, pc}
    7502:	bf00      	nop
    7504:	0000f0f1 	.word	0x0000f0f1

00007508 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    7508:	b580      	push	{r7, lr}
    750a:	b082      	sub	sp, #8
    750c:	af00      	add	r7, sp, #0
    750e:	4603      	mov	r3, r0
    7510:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    7512:	79fb      	ldrb	r3, [r7, #7]
    7514:	b29b      	uxth	r3, r3
    7516:	461a      	mov	r2, r3
    7518:	2100      	movs	r1, #0
    751a:	2000      	movs	r0, #0
    751c:	4b03      	ldr	r3, [pc, #12]	; (752c <usb_d_ep0_init+0x24>)
    751e:	4798      	blx	r3
    7520:	4603      	mov	r3, r0
}
    7522:	4618      	mov	r0, r3
    7524:	3708      	adds	r7, #8
    7526:	46bd      	mov	sp, r7
    7528:	bd80      	pop	{r7, pc}
    752a:	bf00      	nop
    752c:	00007531 	.word	0x00007531

00007530 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    7530:	b580      	push	{r7, lr}
    7532:	b086      	sub	sp, #24
    7534:	af00      	add	r7, sp, #0
    7536:	4603      	mov	r3, r0
    7538:	71fb      	strb	r3, [r7, #7]
    753a:	460b      	mov	r3, r1
    753c:	71bb      	strb	r3, [r7, #6]
    753e:	4613      	mov	r3, r2
    7540:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    7542:	79fb      	ldrb	r3, [r7, #7]
    7544:	4618      	mov	r0, r3
    7546:	4b1e      	ldr	r3, [pc, #120]	; (75c0 <usb_d_ep_init+0x90>)
    7548:	4798      	blx	r3
    754a:	4603      	mov	r3, r0
    754c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    754e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7552:	015b      	lsls	r3, r3, #5
    7554:	4a1b      	ldr	r2, [pc, #108]	; (75c4 <usb_d_ep_init+0x94>)
    7556:	4413      	add	r3, r2
    7558:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    755a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    755e:	2b00      	cmp	r3, #0
    7560:	db02      	blt.n	7568 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    7562:	f06f 0313 	mvn.w	r3, #19
    7566:	e027      	b.n	75b8 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    7568:	20ff      	movs	r0, #255	; 0xff
    756a:	4b15      	ldr	r3, [pc, #84]	; (75c0 <usb_d_ep_init+0x90>)
    756c:	4798      	blx	r3
    756e:	4603      	mov	r3, r0
    7570:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    7572:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7576:	2b00      	cmp	r3, #0
    7578:	da02      	bge.n	7580 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    757a:	f06f 0314 	mvn.w	r3, #20
    757e:	e01b      	b.n	75b8 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    7580:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7584:	015b      	lsls	r3, r3, #5
    7586:	4a0f      	ldr	r2, [pc, #60]	; (75c4 <usb_d_ep_init+0x94>)
    7588:	4413      	add	r3, r2
    758a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    758c:	88ba      	ldrh	r2, [r7, #4]
    758e:	79b9      	ldrb	r1, [r7, #6]
    7590:	79fb      	ldrb	r3, [r7, #7]
    7592:	4618      	mov	r0, r3
    7594:	4b0c      	ldr	r3, [pc, #48]	; (75c8 <usb_d_ep_init+0x98>)
    7596:	4798      	blx	r3
    7598:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    759a:	68fb      	ldr	r3, [r7, #12]
    759c:	2b00      	cmp	r3, #0
    759e:	da01      	bge.n	75a4 <usb_d_ep_init+0x74>
		return rc;
    75a0:	68fb      	ldr	r3, [r7, #12]
    75a2:	e009      	b.n	75b8 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    75a4:	693b      	ldr	r3, [r7, #16]
    75a6:	79fa      	ldrb	r2, [r7, #7]
    75a8:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    75aa:	79bb      	ldrb	r3, [r7, #6]
    75ac:	f003 0303 	and.w	r3, r3, #3
    75b0:	b2da      	uxtb	r2, r3
    75b2:	693b      	ldr	r3, [r7, #16]
    75b4:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    75b6:	2300      	movs	r3, #0
}
    75b8:	4618      	mov	r0, r3
    75ba:	3718      	adds	r7, #24
    75bc:	46bd      	mov	sp, r7
    75be:	bd80      	pop	{r7, pc}
    75c0:	00007049 	.word	0x00007049
    75c4:	20008748 	.word	0x20008748
    75c8:	0000f191 	.word	0x0000f191

000075cc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    75cc:	b580      	push	{r7, lr}
    75ce:	b084      	sub	sp, #16
    75d0:	af00      	add	r7, sp, #0
    75d2:	4603      	mov	r3, r0
    75d4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    75d6:	79fb      	ldrb	r3, [r7, #7]
    75d8:	4618      	mov	r0, r3
    75da:	4b0d      	ldr	r3, [pc, #52]	; (7610 <usb_d_ep_deinit+0x44>)
    75dc:	4798      	blx	r3
    75de:	4603      	mov	r3, r0
    75e0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    75e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    75e6:	015b      	lsls	r3, r3, #5
    75e8:	4a0a      	ldr	r2, [pc, #40]	; (7614 <usb_d_ep_deinit+0x48>)
    75ea:	4413      	add	r3, r2
    75ec:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    75ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    75f2:	2b00      	cmp	r3, #0
    75f4:	db07      	blt.n	7606 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    75f6:	79fb      	ldrb	r3, [r7, #7]
    75f8:	4618      	mov	r0, r3
    75fa:	4b07      	ldr	r3, [pc, #28]	; (7618 <usb_d_ep_deinit+0x4c>)
    75fc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    75fe:	68bb      	ldr	r3, [r7, #8]
    7600:	22ff      	movs	r2, #255	; 0xff
    7602:	705a      	strb	r2, [r3, #1]
    7604:	e000      	b.n	7608 <usb_d_ep_deinit+0x3c>
		return;
    7606:	bf00      	nop
}
    7608:	3710      	adds	r7, #16
    760a:	46bd      	mov	sp, r7
    760c:	bd80      	pop	{r7, pc}
    760e:	bf00      	nop
    7610:	00007049 	.word	0x00007049
    7614:	20008748 	.word	0x20008748
    7618:	0000f2c5 	.word	0x0000f2c5

0000761c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    761c:	b580      	push	{r7, lr}
    761e:	b086      	sub	sp, #24
    7620:	af00      	add	r7, sp, #0
    7622:	4603      	mov	r3, r0
    7624:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7626:	79fb      	ldrb	r3, [r7, #7]
    7628:	4618      	mov	r0, r3
    762a:	4b15      	ldr	r3, [pc, #84]	; (7680 <usb_d_ep_enable+0x64>)
    762c:	4798      	blx	r3
    762e:	4603      	mov	r3, r0
    7630:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    7632:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7636:	015b      	lsls	r3, r3, #5
    7638:	4a12      	ldr	r2, [pc, #72]	; (7684 <usb_d_ep_enable+0x68>)
    763a:	4413      	add	r3, r2
    763c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    763e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7642:	2b00      	cmp	r3, #0
    7644:	da02      	bge.n	764c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    7646:	f06f 0311 	mvn.w	r3, #17
    764a:	e014      	b.n	7676 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    764c:	693b      	ldr	r3, [r7, #16]
    764e:	781b      	ldrb	r3, [r3, #0]
    7650:	2b00      	cmp	r3, #0
    7652:	d101      	bne.n	7658 <usb_d_ep_enable+0x3c>
    7654:	2202      	movs	r2, #2
    7656:	e000      	b.n	765a <usb_d_ep_enable+0x3e>
    7658:	2201      	movs	r2, #1
    765a:	693b      	ldr	r3, [r7, #16]
    765c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    765e:	79fb      	ldrb	r3, [r7, #7]
    7660:	4618      	mov	r0, r3
    7662:	4b09      	ldr	r3, [pc, #36]	; (7688 <usb_d_ep_enable+0x6c>)
    7664:	4798      	blx	r3
    7666:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    7668:	68fb      	ldr	r3, [r7, #12]
    766a:	2b00      	cmp	r3, #0
    766c:	da02      	bge.n	7674 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    766e:	693b      	ldr	r3, [r7, #16]
    7670:	2200      	movs	r2, #0
    7672:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    7674:	68fb      	ldr	r3, [r7, #12]
}
    7676:	4618      	mov	r0, r3
    7678:	3718      	adds	r7, #24
    767a:	46bd      	mov	sp, r7
    767c:	bd80      	pop	{r7, pc}
    767e:	bf00      	nop
    7680:	00007049 	.word	0x00007049
    7684:	20008748 	.word	0x20008748
    7688:	0000f3a9 	.word	0x0000f3a9

0000768c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    768c:	b590      	push	{r4, r7, lr}
    768e:	b08d      	sub	sp, #52	; 0x34
    7690:	af02      	add	r7, sp, #8
    7692:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    7694:	687b      	ldr	r3, [r7, #4]
    7696:	7a1b      	ldrb	r3, [r3, #8]
    7698:	4618      	mov	r0, r3
    769a:	4b51      	ldr	r3, [pc, #324]	; (77e0 <usb_d_ep_transfer+0x154>)
    769c:	4798      	blx	r3
    769e:	4603      	mov	r3, r0
    76a0:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    76a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
    76a6:	015b      	lsls	r3, r3, #5
    76a8:	4a4e      	ldr	r2, [pc, #312]	; (77e4 <usb_d_ep_transfer+0x158>)
    76aa:	4413      	add	r3, r2
    76ac:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	7a1b      	ldrb	r3, [r3, #8]
    76b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    76b6:	2b00      	cmp	r3, #0
    76b8:	bf14      	ite	ne
    76ba:	2301      	movne	r3, #1
    76bc:	2300      	moveq	r3, #0
    76be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    76c2:	687b      	ldr	r3, [r7, #4]
    76c4:	7a5b      	ldrb	r3, [r3, #9]
    76c6:	2b00      	cmp	r3, #0
    76c8:	bf14      	ite	ne
    76ca:	2301      	movne	r3, #1
    76cc:	2300      	moveq	r3, #0
    76ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    76d2:	687b      	ldr	r3, [r7, #4]
    76d4:	685b      	ldr	r3, [r3, #4]
    76d6:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    76d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    76dc:	2b00      	cmp	r3, #0
    76de:	da02      	bge.n	76e6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    76e0:	f06f 0311 	mvn.w	r3, #17
    76e4:	e077      	b.n	77d6 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    76e6:	f107 0308 	add.w	r3, r7, #8
    76ea:	4618      	mov	r0, r3
    76ec:	4b3e      	ldr	r3, [pc, #248]	; (77e8 <usb_d_ep_transfer+0x15c>)
    76ee:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    76f0:	69bb      	ldr	r3, [r7, #24]
    76f2:	789b      	ldrb	r3, [r3, #2]
    76f4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    76f6:	7bfb      	ldrb	r3, [r7, #15]
    76f8:	b2db      	uxtb	r3, r3
    76fa:	2b01      	cmp	r3, #1
    76fc:	d10c      	bne.n	7718 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    76fe:	69bb      	ldr	r3, [r7, #24]
    7700:	2203      	movs	r2, #3
    7702:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    7704:	f107 0308 	add.w	r3, r7, #8
    7708:	4618      	mov	r0, r3
    770a:	4b38      	ldr	r3, [pc, #224]	; (77ec <usb_d_ep_transfer+0x160>)
    770c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    770e:	69bb      	ldr	r3, [r7, #24]
    7710:	781b      	ldrb	r3, [r3, #0]
    7712:	2b00      	cmp	r3, #0
    7714:	d151      	bne.n	77ba <usb_d_ep_transfer+0x12e>
    7716:	e017      	b.n	7748 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    7718:	f107 0308 	add.w	r3, r7, #8
    771c:	4618      	mov	r0, r3
    771e:	4b33      	ldr	r3, [pc, #204]	; (77ec <usb_d_ep_transfer+0x160>)
    7720:	4798      	blx	r3
		switch (state) {
    7722:	7bfb      	ldrb	r3, [r7, #15]
    7724:	b2db      	uxtb	r3, r3
    7726:	2b05      	cmp	r3, #5
    7728:	d004      	beq.n	7734 <usb_d_ep_transfer+0xa8>
    772a:	2b06      	cmp	r3, #6
    772c:	d004      	beq.n	7738 <usb_d_ep_transfer+0xac>
    772e:	2b00      	cmp	r3, #0
    7730:	d005      	beq.n	773e <usb_d_ep_transfer+0xb2>
    7732:	e007      	b.n	7744 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    7734:	2302      	movs	r3, #2
    7736:	e04e      	b.n	77d6 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    7738:	f06f 030f 	mvn.w	r3, #15
    773c:	e04b      	b.n	77d6 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    773e:	f06f 0312 	mvn.w	r3, #18
    7742:	e048      	b.n	77d6 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    7744:	2301      	movs	r3, #1
    7746:	e046      	b.n	77d6 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    7748:	69bb      	ldr	r3, [r7, #24]
    774a:	7c9b      	ldrb	r3, [r3, #18]
    774c:	b29a      	uxth	r2, r3
    774e:	69bb      	ldr	r3, [r7, #24]
    7750:	7cdb      	ldrb	r3, [r3, #19]
    7752:	b29b      	uxth	r3, r3
    7754:	021b      	lsls	r3, r3, #8
    7756:	b29b      	uxth	r3, r3
    7758:	4413      	add	r3, r2
    775a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    775c:	8afb      	ldrh	r3, [r7, #22]
    775e:	2b00      	cmp	r3, #0
    7760:	d10b      	bne.n	777a <usb_d_ep_transfer+0xee>
			dir                 = true;
    7762:	2301      	movs	r3, #1
    7764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    7768:	2300      	movs	r3, #0
    776a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    776c:	2301      	movs	r3, #1
    776e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    7772:	69bb      	ldr	r3, [r7, #24]
    7774:	2204      	movs	r2, #4
    7776:	709a      	strb	r2, [r3, #2]
    7778:	e01f      	b.n	77ba <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    777a:	69bb      	ldr	r3, [r7, #24]
    777c:	7b1b      	ldrb	r3, [r3, #12]
    777e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7782:	2b00      	cmp	r3, #0
    7784:	bf14      	ite	ne
    7786:	2301      	movne	r3, #1
    7788:	2300      	moveq	r3, #0
    778a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    778e:	8afa      	ldrh	r2, [r7, #22]
    7790:	6a3b      	ldr	r3, [r7, #32]
    7792:	429a      	cmp	r2, r3
    7794:	d201      	bcs.n	779a <usb_d_ep_transfer+0x10e>
				len = req_len;
    7796:	8afb      	ldrh	r3, [r7, #22]
    7798:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    779a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    779e:	2b00      	cmp	r3, #0
    77a0:	d008      	beq.n	77b4 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    77a2:	8afa      	ldrh	r2, [r7, #22]
    77a4:	6a3b      	ldr	r3, [r7, #32]
    77a6:	429a      	cmp	r2, r3
    77a8:	bf8c      	ite	hi
    77aa:	2301      	movhi	r3, #1
    77ac:	2300      	movls	r3, #0
    77ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    77b2:	e002      	b.n	77ba <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    77b4:	2300      	movs	r3, #0
    77b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    77ba:	687b      	ldr	r3, [r7, #4]
    77bc:	7a18      	ldrb	r0, [r3, #8]
    77be:	687b      	ldr	r3, [r7, #4]
    77c0:	681a      	ldr	r2, [r3, #0]
    77c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    77c6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    77ca:	9300      	str	r3, [sp, #0]
    77cc:	6a3b      	ldr	r3, [r7, #32]
    77ce:	4c08      	ldr	r4, [pc, #32]	; (77f0 <usb_d_ep_transfer+0x164>)
    77d0:	47a0      	blx	r4
    77d2:	6138      	str	r0, [r7, #16]
	return rc;
    77d4:	693b      	ldr	r3, [r7, #16]
}
    77d6:	4618      	mov	r0, r3
    77d8:	372c      	adds	r7, #44	; 0x2c
    77da:	46bd      	mov	sp, r7
    77dc:	bd90      	pop	{r4, r7, pc}
    77de:	bf00      	nop
    77e0:	00007049 	.word	0x00007049
    77e4:	20008748 	.word	0x20008748
    77e8:	0001059d 	.word	0x0001059d
    77ec:	000105c3 	.word	0x000105c3
    77f0:	000070c9 	.word	0x000070c9

000077f4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    77f4:	b580      	push	{r7, lr}
    77f6:	b084      	sub	sp, #16
    77f8:	af00      	add	r7, sp, #0
    77fa:	4603      	mov	r3, r0
    77fc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    77fe:	79fb      	ldrb	r3, [r7, #7]
    7800:	4618      	mov	r0, r3
    7802:	4b0e      	ldr	r3, [pc, #56]	; (783c <usb_d_ep_abort+0x48>)
    7804:	4798      	blx	r3
    7806:	4603      	mov	r3, r0
    7808:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    780a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    780e:	015b      	lsls	r3, r3, #5
    7810:	4a0b      	ldr	r2, [pc, #44]	; (7840 <usb_d_ep_abort+0x4c>)
    7812:	4413      	add	r3, r2
    7814:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    7816:	f997 300f 	ldrsb.w	r3, [r7, #15]
    781a:	2b00      	cmp	r3, #0
    781c:	db0a      	blt.n	7834 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    781e:	79fb      	ldrb	r3, [r7, #7]
    7820:	4618      	mov	r0, r3
    7822:	4b08      	ldr	r3, [pc, #32]	; (7844 <usb_d_ep_abort+0x50>)
    7824:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    7826:	68bb      	ldr	r3, [r7, #8]
    7828:	2201      	movs	r2, #1
    782a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    782c:	68bb      	ldr	r3, [r7, #8]
    782e:	2204      	movs	r2, #4
    7830:	70da      	strb	r2, [r3, #3]
    7832:	e000      	b.n	7836 <usb_d_ep_abort+0x42>
		return;
    7834:	bf00      	nop
}
    7836:	3710      	adds	r7, #16
    7838:	46bd      	mov	sp, r7
    783a:	bd80      	pop	{r7, pc}
    783c:	00007049 	.word	0x00007049
    7840:	20008748 	.word	0x20008748
    7844:	0000fb15 	.word	0x0000fb15

00007848 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    7848:	b580      	push	{r7, lr}
    784a:	b086      	sub	sp, #24
    784c:	af00      	add	r7, sp, #0
    784e:	4603      	mov	r3, r0
    7850:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7852:	79fb      	ldrb	r3, [r7, #7]
    7854:	4618      	mov	r0, r3
    7856:	4b1a      	ldr	r3, [pc, #104]	; (78c0 <_usb_d_ep_halt_clr+0x78>)
    7858:	4798      	blx	r3
    785a:	4603      	mov	r3, r0
    785c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    785e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7862:	015b      	lsls	r3, r3, #5
    7864:	4a17      	ldr	r2, [pc, #92]	; (78c4 <_usb_d_ep_halt_clr+0x7c>)
    7866:	4413      	add	r3, r2
    7868:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    786a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    786e:	2b00      	cmp	r3, #0
    7870:	da02      	bge.n	7878 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    7872:	f06f 0311 	mvn.w	r3, #17
    7876:	e01f      	b.n	78b8 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    7878:	79fb      	ldrb	r3, [r7, #7]
    787a:	2102      	movs	r1, #2
    787c:	4618      	mov	r0, r3
    787e:	4b12      	ldr	r3, [pc, #72]	; (78c8 <_usb_d_ep_halt_clr+0x80>)
    7880:	4798      	blx	r3
    7882:	4603      	mov	r3, r0
    7884:	2b00      	cmp	r3, #0
    7886:	d016      	beq.n	78b6 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    7888:	79fb      	ldrb	r3, [r7, #7]
    788a:	2100      	movs	r1, #0
    788c:	4618      	mov	r0, r3
    788e:	4b0e      	ldr	r3, [pc, #56]	; (78c8 <_usb_d_ep_halt_clr+0x80>)
    7890:	4798      	blx	r3
    7892:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    7894:	68fb      	ldr	r3, [r7, #12]
    7896:	2b00      	cmp	r3, #0
    7898:	da01      	bge.n	789e <_usb_d_ep_halt_clr+0x56>
			return rc;
    789a:	68fb      	ldr	r3, [r7, #12]
    789c:	e00c      	b.n	78b8 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    789e:	693b      	ldr	r3, [r7, #16]
    78a0:	2201      	movs	r2, #1
    78a2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    78a4:	693b      	ldr	r3, [r7, #16]
    78a6:	2203      	movs	r2, #3
    78a8:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    78aa:	693b      	ldr	r3, [r7, #16]
    78ac:	69db      	ldr	r3, [r3, #28]
    78ae:	79f8      	ldrb	r0, [r7, #7]
    78b0:	2200      	movs	r2, #0
    78b2:	2103      	movs	r1, #3
    78b4:	4798      	blx	r3
	}
	return ERR_NONE;
    78b6:	2300      	movs	r3, #0
}
    78b8:	4618      	mov	r0, r3
    78ba:	3718      	adds	r7, #24
    78bc:	46bd      	mov	sp, r7
    78be:	bd80      	pop	{r7, pc}
    78c0:	00007049 	.word	0x00007049
    78c4:	20008748 	.word	0x20008748
    78c8:	0000f721 	.word	0x0000f721

000078cc <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    78cc:	b580      	push	{r7, lr}
    78ce:	b082      	sub	sp, #8
    78d0:	af00      	add	r7, sp, #0
    78d2:	4603      	mov	r3, r0
    78d4:	460a      	mov	r2, r1
    78d6:	71fb      	strb	r3, [r7, #7]
    78d8:	4613      	mov	r3, r2
    78da:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    78dc:	79bb      	ldrb	r3, [r7, #6]
    78de:	2b00      	cmp	r3, #0
    78e0:	d105      	bne.n	78ee <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    78e2:	79fb      	ldrb	r3, [r7, #7]
    78e4:	4618      	mov	r0, r3
    78e6:	4b0c      	ldr	r3, [pc, #48]	; (7918 <usb_d_ep_halt+0x4c>)
    78e8:	4798      	blx	r3
    78ea:	4603      	mov	r3, r0
    78ec:	e00f      	b.n	790e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    78ee:	79bb      	ldrb	r3, [r7, #6]
    78f0:	2b01      	cmp	r3, #1
    78f2:	d106      	bne.n	7902 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    78f4:	79fb      	ldrb	r3, [r7, #7]
    78f6:	2101      	movs	r1, #1
    78f8:	4618      	mov	r0, r3
    78fa:	4b08      	ldr	r3, [pc, #32]	; (791c <usb_d_ep_halt+0x50>)
    78fc:	4798      	blx	r3
    78fe:	4603      	mov	r3, r0
    7900:	e005      	b.n	790e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    7902:	79fb      	ldrb	r3, [r7, #7]
    7904:	2102      	movs	r1, #2
    7906:	4618      	mov	r0, r3
    7908:	4b04      	ldr	r3, [pc, #16]	; (791c <usb_d_ep_halt+0x50>)
    790a:	4798      	blx	r3
    790c:	4603      	mov	r3, r0
	}
}
    790e:	4618      	mov	r0, r3
    7910:	3708      	adds	r7, #8
    7912:	46bd      	mov	sp, r7
    7914:	bd80      	pop	{r7, pc}
    7916:	bf00      	nop
    7918:	00007849 	.word	0x00007849
    791c:	0000f721 	.word	0x0000f721

00007920 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    7920:	b580      	push	{r7, lr}
    7922:	b086      	sub	sp, #24
    7924:	af00      	add	r7, sp, #0
    7926:	4603      	mov	r3, r0
    7928:	603a      	str	r2, [r7, #0]
    792a:	71fb      	strb	r3, [r7, #7]
    792c:	460b      	mov	r3, r1
    792e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    7930:	79fb      	ldrb	r3, [r7, #7]
    7932:	4618      	mov	r0, r3
    7934:	4b16      	ldr	r3, [pc, #88]	; (7990 <usb_d_ep_register_callback+0x70>)
    7936:	4798      	blx	r3
    7938:	4603      	mov	r3, r0
    793a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    793c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    7940:	015b      	lsls	r3, r3, #5
    7942:	4a14      	ldr	r2, [pc, #80]	; (7994 <usb_d_ep_register_callback+0x74>)
    7944:	4413      	add	r3, r2
    7946:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    7948:	683b      	ldr	r3, [r7, #0]
    794a:	2b00      	cmp	r3, #0
    794c:	d001      	beq.n	7952 <usb_d_ep_register_callback+0x32>
    794e:	683b      	ldr	r3, [r7, #0]
    7950:	e000      	b.n	7954 <usb_d_ep_register_callback+0x34>
    7952:	4b11      	ldr	r3, [pc, #68]	; (7998 <usb_d_ep_register_callback+0x78>)
    7954:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    7956:	f997 3017 	ldrsb.w	r3, [r7, #23]
    795a:	2b00      	cmp	r3, #0
    795c:	db13      	blt.n	7986 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    795e:	79bb      	ldrb	r3, [r7, #6]
    7960:	2b01      	cmp	r3, #1
    7962:	d008      	beq.n	7976 <usb_d_ep_register_callback+0x56>
    7964:	2b02      	cmp	r3, #2
    7966:	d00a      	beq.n	797e <usb_d_ep_register_callback+0x5e>
    7968:	2b00      	cmp	r3, #0
    796a:	d000      	beq.n	796e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    796c:	e00c      	b.n	7988 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    796e:	693b      	ldr	r3, [r7, #16]
    7970:	68fa      	ldr	r2, [r7, #12]
    7972:	615a      	str	r2, [r3, #20]
		break;
    7974:	e008      	b.n	7988 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    7976:	693b      	ldr	r3, [r7, #16]
    7978:	68fa      	ldr	r2, [r7, #12]
    797a:	619a      	str	r2, [r3, #24]
		break;
    797c:	e004      	b.n	7988 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    797e:	693b      	ldr	r3, [r7, #16]
    7980:	68fa      	ldr	r2, [r7, #12]
    7982:	61da      	str	r2, [r3, #28]
		break;
    7984:	e000      	b.n	7988 <usb_d_ep_register_callback+0x68>
		return;
    7986:	bf00      	nop
	}
}
    7988:	3718      	adds	r7, #24
    798a:	46bd      	mov	sp, r7
    798c:	bd80      	pop	{r7, pc}
    798e:	bf00      	nop
    7990:	00007049 	.word	0x00007049
    7994:	20008748 	.word	0x20008748
    7998:	0000711d 	.word	0x0000711d

0000799c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    799c:	b480      	push	{r7}
    799e:	b085      	sub	sp, #20
    79a0:	af00      	add	r7, sp, #0
    79a2:	4603      	mov	r3, r0
    79a4:	60b9      	str	r1, [r7, #8]
    79a6:	607a      	str	r2, [r7, #4]
    79a8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    79aa:	7bfb      	ldrb	r3, [r7, #15]
    79ac:	f083 0301 	eor.w	r3, r3, #1
    79b0:	b2db      	uxtb	r3, r3
    79b2:	2b00      	cmp	r3, #0
    79b4:	d000      	beq.n	79b8 <assert+0x1c>
		__asm("BKPT #0");
    79b6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    79b8:	bf00      	nop
    79ba:	3714      	adds	r7, #20
    79bc:	46bd      	mov	sp, r7
    79be:	f85d 7b04 	ldr.w	r7, [sp], #4
    79c2:	4770      	bx	lr

000079c4 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    79c4:	b480      	push	{r7}
    79c6:	b085      	sub	sp, #20
    79c8:	af00      	add	r7, sp, #0
    79ca:	6078      	str	r0, [r7, #4]
    79cc:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    79ce:	687b      	ldr	r3, [r7, #4]
    79d0:	681b      	ldr	r3, [r3, #0]
    79d2:	60fb      	str	r3, [r7, #12]
    79d4:	e008      	b.n	79e8 <is_list_element+0x24>
		if (it == element) {
    79d6:	68fa      	ldr	r2, [r7, #12]
    79d8:	683b      	ldr	r3, [r7, #0]
    79da:	429a      	cmp	r2, r3
    79dc:	d101      	bne.n	79e2 <is_list_element+0x1e>
			return true;
    79de:	2301      	movs	r3, #1
    79e0:	e006      	b.n	79f0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    79e2:	68fb      	ldr	r3, [r7, #12]
    79e4:	681b      	ldr	r3, [r3, #0]
    79e6:	60fb      	str	r3, [r7, #12]
    79e8:	68fb      	ldr	r3, [r7, #12]
    79ea:	2b00      	cmp	r3, #0
    79ec:	d1f3      	bne.n	79d6 <is_list_element+0x12>
		}
	}

	return false;
    79ee:	2300      	movs	r3, #0
}
    79f0:	4618      	mov	r0, r3
    79f2:	3714      	adds	r7, #20
    79f4:	46bd      	mov	sp, r7
    79f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    79fa:	4770      	bx	lr

000079fc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    79fc:	b580      	push	{r7, lr}
    79fe:	b082      	sub	sp, #8
    7a00:	af00      	add	r7, sp, #0
    7a02:	6078      	str	r0, [r7, #4]
    7a04:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    7a06:	6839      	ldr	r1, [r7, #0]
    7a08:	6878      	ldr	r0, [r7, #4]
    7a0a:	4b0f      	ldr	r3, [pc, #60]	; (7a48 <list_insert_as_head+0x4c>)
    7a0c:	4798      	blx	r3
    7a0e:	4603      	mov	r3, r0
    7a10:	2b00      	cmp	r3, #0
    7a12:	bf14      	ite	ne
    7a14:	2301      	movne	r3, #1
    7a16:	2300      	moveq	r3, #0
    7a18:	b2db      	uxtb	r3, r3
    7a1a:	f083 0301 	eor.w	r3, r3, #1
    7a1e:	b2db      	uxtb	r3, r3
    7a20:	f003 0301 	and.w	r3, r3, #1
    7a24:	b2db      	uxtb	r3, r3
    7a26:	2239      	movs	r2, #57	; 0x39
    7a28:	4908      	ldr	r1, [pc, #32]	; (7a4c <list_insert_as_head+0x50>)
    7a2a:	4618      	mov	r0, r3
    7a2c:	4b08      	ldr	r3, [pc, #32]	; (7a50 <list_insert_as_head+0x54>)
    7a2e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    7a30:	687b      	ldr	r3, [r7, #4]
    7a32:	681a      	ldr	r2, [r3, #0]
    7a34:	683b      	ldr	r3, [r7, #0]
    7a36:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    7a38:	687b      	ldr	r3, [r7, #4]
    7a3a:	683a      	ldr	r2, [r7, #0]
    7a3c:	601a      	str	r2, [r3, #0]
}
    7a3e:	bf00      	nop
    7a40:	3708      	adds	r7, #8
    7a42:	46bd      	mov	sp, r7
    7a44:	bd80      	pop	{r7, pc}
    7a46:	bf00      	nop
    7a48:	000079c5 	.word	0x000079c5
    7a4c:	0001f98c 	.word	0x0001f98c
    7a50:	0000799d 	.word	0x0000799d

00007a54 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    7a54:	b480      	push	{r7}
    7a56:	b083      	sub	sp, #12
    7a58:	af00      	add	r7, sp, #0
    7a5a:	6078      	str	r0, [r7, #4]
    7a5c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    7a5e:	687b      	ldr	r3, [r7, #4]
    7a60:	681a      	ldr	r2, [r3, #0]
    7a62:	683b      	ldr	r3, [r7, #0]
    7a64:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    7a66:	687b      	ldr	r3, [r7, #4]
    7a68:	683a      	ldr	r2, [r7, #0]
    7a6a:	601a      	str	r2, [r3, #0]
}
    7a6c:	bf00      	nop
    7a6e:	370c      	adds	r7, #12
    7a70:	46bd      	mov	sp, r7
    7a72:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a76:	4770      	bx	lr

00007a78 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    7a78:	b580      	push	{r7, lr}
    7a7a:	b084      	sub	sp, #16
    7a7c:	af00      	add	r7, sp, #0
    7a7e:	6078      	str	r0, [r7, #4]
    7a80:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    7a82:	687b      	ldr	r3, [r7, #4]
    7a84:	681b      	ldr	r3, [r3, #0]
    7a86:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    7a88:	6839      	ldr	r1, [r7, #0]
    7a8a:	6878      	ldr	r0, [r7, #4]
    7a8c:	4b16      	ldr	r3, [pc, #88]	; (7ae8 <list_insert_at_end+0x70>)
    7a8e:	4798      	blx	r3
    7a90:	4603      	mov	r3, r0
    7a92:	2b00      	cmp	r3, #0
    7a94:	bf14      	ite	ne
    7a96:	2301      	movne	r3, #1
    7a98:	2300      	moveq	r3, #0
    7a9a:	b2db      	uxtb	r3, r3
    7a9c:	f083 0301 	eor.w	r3, r3, #1
    7aa0:	b2db      	uxtb	r3, r3
    7aa2:	f003 0301 	and.w	r3, r3, #1
    7aa6:	b2db      	uxtb	r3, r3
    7aa8:	224f      	movs	r2, #79	; 0x4f
    7aaa:	4910      	ldr	r1, [pc, #64]	; (7aec <list_insert_at_end+0x74>)
    7aac:	4618      	mov	r0, r3
    7aae:	4b10      	ldr	r3, [pc, #64]	; (7af0 <list_insert_at_end+0x78>)
    7ab0:	4798      	blx	r3

	if (!list->head) {
    7ab2:	687b      	ldr	r3, [r7, #4]
    7ab4:	681b      	ldr	r3, [r3, #0]
    7ab6:	2b00      	cmp	r3, #0
    7ab8:	d109      	bne.n	7ace <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    7aba:	687b      	ldr	r3, [r7, #4]
    7abc:	683a      	ldr	r2, [r7, #0]
    7abe:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    7ac0:	683b      	ldr	r3, [r7, #0]
    7ac2:	2200      	movs	r2, #0
    7ac4:	601a      	str	r2, [r3, #0]
		return;
    7ac6:	e00c      	b.n	7ae2 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    7ac8:	68fb      	ldr	r3, [r7, #12]
    7aca:	681b      	ldr	r3, [r3, #0]
    7acc:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    7ace:	68fb      	ldr	r3, [r7, #12]
    7ad0:	681b      	ldr	r3, [r3, #0]
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d1f8      	bne.n	7ac8 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    7ad6:	68fb      	ldr	r3, [r7, #12]
    7ad8:	683a      	ldr	r2, [r7, #0]
    7ada:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    7adc:	683b      	ldr	r3, [r7, #0]
    7ade:	2200      	movs	r2, #0
    7ae0:	601a      	str	r2, [r3, #0]
}
    7ae2:	3710      	adds	r7, #16
    7ae4:	46bd      	mov	sp, r7
    7ae6:	bd80      	pop	{r7, pc}
    7ae8:	000079c5 	.word	0x000079c5
    7aec:	0001f98c 	.word	0x0001f98c
    7af0:	0000799d 	.word	0x0000799d

00007af4 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    7af4:	b480      	push	{r7}
    7af6:	b085      	sub	sp, #20
    7af8:	af00      	add	r7, sp, #0
    7afa:	6078      	str	r0, [r7, #4]
	if (list->head) {
    7afc:	687b      	ldr	r3, [r7, #4]
    7afe:	681b      	ldr	r3, [r3, #0]
    7b00:	2b00      	cmp	r3, #0
    7b02:	d009      	beq.n	7b18 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    7b04:	687b      	ldr	r3, [r7, #4]
    7b06:	681b      	ldr	r3, [r3, #0]
    7b08:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    7b0a:	687b      	ldr	r3, [r7, #4]
    7b0c:	681b      	ldr	r3, [r3, #0]
    7b0e:	681a      	ldr	r2, [r3, #0]
    7b10:	687b      	ldr	r3, [r7, #4]
    7b12:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    7b14:	68fb      	ldr	r3, [r7, #12]
    7b16:	e000      	b.n	7b1a <list_remove_head+0x26>
	}

	return NULL;
    7b18:	2300      	movs	r3, #0
}
    7b1a:	4618      	mov	r0, r3
    7b1c:	3714      	adds	r7, #20
    7b1e:	46bd      	mov	sp, r7
    7b20:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b24:	4770      	bx	lr

00007b26 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    7b26:	b480      	push	{r7}
    7b28:	b085      	sub	sp, #20
    7b2a:	af00      	add	r7, sp, #0
    7b2c:	6078      	str	r0, [r7, #4]
    7b2e:	6039      	str	r1, [r7, #0]
	if (!element) {
    7b30:	683b      	ldr	r3, [r7, #0]
    7b32:	2b00      	cmp	r3, #0
    7b34:	d101      	bne.n	7b3a <list_delete_element+0x14>
		return false;
    7b36:	2300      	movs	r3, #0
    7b38:	e024      	b.n	7b84 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    7b3a:	687b      	ldr	r3, [r7, #4]
    7b3c:	681a      	ldr	r2, [r3, #0]
    7b3e:	683b      	ldr	r3, [r7, #0]
    7b40:	429a      	cmp	r2, r3
    7b42:	d106      	bne.n	7b52 <list_delete_element+0x2c>
		list->head = list->head->next;
    7b44:	687b      	ldr	r3, [r7, #4]
    7b46:	681b      	ldr	r3, [r3, #0]
    7b48:	681a      	ldr	r2, [r3, #0]
    7b4a:	687b      	ldr	r3, [r7, #4]
    7b4c:	601a      	str	r2, [r3, #0]
		return true;
    7b4e:	2301      	movs	r3, #1
    7b50:	e018      	b.n	7b84 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    7b52:	687b      	ldr	r3, [r7, #4]
    7b54:	681b      	ldr	r3, [r3, #0]
    7b56:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    7b58:	e002      	b.n	7b60 <list_delete_element+0x3a>
			it = it->next;
    7b5a:	68fb      	ldr	r3, [r7, #12]
    7b5c:	681b      	ldr	r3, [r3, #0]
    7b5e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    7b60:	68fb      	ldr	r3, [r7, #12]
    7b62:	2b00      	cmp	r3, #0
    7b64:	d004      	beq.n	7b70 <list_delete_element+0x4a>
    7b66:	68fb      	ldr	r3, [r7, #12]
    7b68:	681a      	ldr	r2, [r3, #0]
    7b6a:	683b      	ldr	r3, [r7, #0]
    7b6c:	429a      	cmp	r2, r3
    7b6e:	d1f4      	bne.n	7b5a <list_delete_element+0x34>
		}
		if (it) {
    7b70:	68fb      	ldr	r3, [r7, #12]
    7b72:	2b00      	cmp	r3, #0
    7b74:	d005      	beq.n	7b82 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    7b76:	683b      	ldr	r3, [r7, #0]
    7b78:	681a      	ldr	r2, [r3, #0]
    7b7a:	68fb      	ldr	r3, [r7, #12]
    7b7c:	601a      	str	r2, [r3, #0]
			return true;
    7b7e:	2301      	movs	r3, #1
    7b80:	e000      	b.n	7b84 <list_delete_element+0x5e>
		}
	}

	return false;
    7b82:	2300      	movs	r3, #0
}
    7b84:	4618      	mov	r0, r3
    7b86:	3714      	adds	r7, #20
    7b88:	46bd      	mov	sp, r7
    7b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b8e:	4770      	bx	lr

00007b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    7b90:	b480      	push	{r7}
    7b92:	b083      	sub	sp, #12
    7b94:	af00      	add	r7, sp, #0
    7b96:	4603      	mov	r3, r0
    7b98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7b9e:	2b00      	cmp	r3, #0
    7ba0:	db0b      	blt.n	7bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ba2:	4909      	ldr	r1, [pc, #36]	; (7bc8 <__NVIC_EnableIRQ+0x38>)
    7ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7ba8:	095b      	lsrs	r3, r3, #5
    7baa:	88fa      	ldrh	r2, [r7, #6]
    7bac:	f002 021f 	and.w	r2, r2, #31
    7bb0:	2001      	movs	r0, #1
    7bb2:	fa00 f202 	lsl.w	r2, r0, r2
    7bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    7bba:	bf00      	nop
    7bbc:	370c      	adds	r7, #12
    7bbe:	46bd      	mov	sp, r7
    7bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bc4:	4770      	bx	lr
    7bc6:	bf00      	nop
    7bc8:	e000e100 	.word	0xe000e100

00007bcc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    7bcc:	b480      	push	{r7}
    7bce:	b083      	sub	sp, #12
    7bd0:	af00      	add	r7, sp, #0
    7bd2:	4603      	mov	r3, r0
    7bd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bda:	2b00      	cmp	r3, #0
    7bdc:	db10      	blt.n	7c00 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7bde:	490b      	ldr	r1, [pc, #44]	; (7c0c <__NVIC_DisableIRQ+0x40>)
    7be0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7be4:	095b      	lsrs	r3, r3, #5
    7be6:	88fa      	ldrh	r2, [r7, #6]
    7be8:	f002 021f 	and.w	r2, r2, #31
    7bec:	2001      	movs	r0, #1
    7bee:	fa00 f202 	lsl.w	r2, r0, r2
    7bf2:	3320      	adds	r3, #32
    7bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7bf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7bfc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    7c00:	bf00      	nop
    7c02:	370c      	adds	r7, #12
    7c04:	46bd      	mov	sp, r7
    7c06:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c0a:	4770      	bx	lr
    7c0c:	e000e100 	.word	0xe000e100

00007c10 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    7c10:	b480      	push	{r7}
    7c12:	b083      	sub	sp, #12
    7c14:	af00      	add	r7, sp, #0
    7c16:	4603      	mov	r3, r0
    7c18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c1e:	2b00      	cmp	r3, #0
    7c20:	db0c      	blt.n	7c3c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7c22:	4909      	ldr	r1, [pc, #36]	; (7c48 <__NVIC_ClearPendingIRQ+0x38>)
    7c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7c28:	095b      	lsrs	r3, r3, #5
    7c2a:	88fa      	ldrh	r2, [r7, #6]
    7c2c:	f002 021f 	and.w	r2, r2, #31
    7c30:	2001      	movs	r0, #1
    7c32:	fa00 f202 	lsl.w	r2, r0, r2
    7c36:	3360      	adds	r3, #96	; 0x60
    7c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    7c3c:	bf00      	nop
    7c3e:	370c      	adds	r7, #12
    7c40:	46bd      	mov	sp, r7
    7c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c46:	4770      	bx	lr
    7c48:	e000e100 	.word	0xe000e100

00007c4c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    7c4c:	b480      	push	{r7}
    7c4e:	b083      	sub	sp, #12
    7c50:	af00      	add	r7, sp, #0
    7c52:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    7c54:	687b      	ldr	r3, [r7, #4]
    7c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7c58:	095b      	lsrs	r3, r3, #5
    7c5a:	f003 0301 	and.w	r3, r3, #1
    7c5e:	2b00      	cmp	r3, #0
    7c60:	bf14      	ite	ne
    7c62:	2301      	movne	r3, #1
    7c64:	2300      	moveq	r3, #0
    7c66:	b2db      	uxtb	r3, r3
}
    7c68:	4618      	mov	r0, r3
    7c6a:	370c      	adds	r7, #12
    7c6c:	46bd      	mov	sp, r7
    7c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c72:	4770      	bx	lr

00007c74 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    7c74:	b480      	push	{r7}
    7c76:	b083      	sub	sp, #12
    7c78:	af00      	add	r7, sp, #0
    7c7a:	6078      	str	r0, [r7, #4]
    7c7c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    7c7e:	687b      	ldr	r3, [r7, #4]
    7c80:	683a      	ldr	r2, [r7, #0]
    7c82:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7c84:	bf00      	nop
    7c86:	370c      	adds	r7, #12
    7c88:	46bd      	mov	sp, r7
    7c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c8e:	4770      	bx	lr

00007c90 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    7c90:	b480      	push	{r7}
    7c92:	b083      	sub	sp, #12
    7c94:	af00      	add	r7, sp, #0
    7c96:	6078      	str	r0, [r7, #4]
    7c98:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    7c9a:	687b      	ldr	r3, [r7, #4]
    7c9c:	683a      	ldr	r2, [r7, #0]
    7c9e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7ca0:	bf00      	nop
    7ca2:	370c      	adds	r7, #12
    7ca4:	46bd      	mov	sp, r7
    7ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7caa:	4770      	bx	lr

00007cac <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    7cac:	b480      	push	{r7}
    7cae:	b083      	sub	sp, #12
    7cb0:	af00      	add	r7, sp, #0
    7cb2:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    7cb4:	687b      	ldr	r3, [r7, #4]
    7cb6:	699b      	ldr	r3, [r3, #24]
    7cb8:	f043 0201 	orr.w	r2, r3, #1
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7cc0:	bf00      	nop
    7cc2:	370c      	adds	r7, #12
    7cc4:	46bd      	mov	sp, r7
    7cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cca:	4770      	bx	lr

00007ccc <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    7ccc:	b480      	push	{r7}
    7cce:	b085      	sub	sp, #20
    7cd0:	af00      	add	r7, sp, #0
    7cd2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    7cd4:	687b      	ldr	r3, [r7, #4]
    7cd6:	699b      	ldr	r3, [r3, #24]
    7cd8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    7cda:	68fb      	ldr	r3, [r7, #12]
    7cdc:	f003 0301 	and.w	r3, r3, #1
    7ce0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7ce2:	68fb      	ldr	r3, [r7, #12]
    7ce4:	2b00      	cmp	r3, #0
    7ce6:	bf14      	ite	ne
    7ce8:	2301      	movne	r3, #1
    7cea:	2300      	moveq	r3, #0
    7cec:	b2db      	uxtb	r3, r3
}
    7cee:	4618      	mov	r0, r3
    7cf0:	3714      	adds	r7, #20
    7cf2:	46bd      	mov	sp, r7
    7cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cf8:	4770      	bx	lr

00007cfa <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    7cfa:	b480      	push	{r7}
    7cfc:	b083      	sub	sp, #12
    7cfe:	af00      	add	r7, sp, #0
    7d00:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	699b      	ldr	r3, [r3, #24]
    7d06:	f023 0201 	bic.w	r2, r3, #1
    7d0a:	687b      	ldr	r3, [r7, #4]
    7d0c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7d0e:	bf00      	nop
    7d10:	370c      	adds	r7, #12
    7d12:	46bd      	mov	sp, r7
    7d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d18:	4770      	bx	lr

00007d1a <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    7d1a:	b480      	push	{r7}
    7d1c:	b083      	sub	sp, #12
    7d1e:	af00      	add	r7, sp, #0
    7d20:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    7d22:	687b      	ldr	r3, [r7, #4]
    7d24:	699b      	ldr	r3, [r3, #24]
    7d26:	f043 0202 	orr.w	r2, r3, #2
    7d2a:	687b      	ldr	r3, [r7, #4]
    7d2c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7d2e:	bf00      	nop
    7d30:	370c      	adds	r7, #12
    7d32:	46bd      	mov	sp, r7
    7d34:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d38:	4770      	bx	lr

00007d3a <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    7d3a:	b480      	push	{r7}
    7d3c:	b083      	sub	sp, #12
    7d3e:	af00      	add	r7, sp, #0
    7d40:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    7d42:	687b      	ldr	r3, [r7, #4]
    7d44:	699b      	ldr	r3, [r3, #24]
    7d46:	f023 0202 	bic.w	r2, r3, #2
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7d4e:	bf00      	nop
    7d50:	370c      	adds	r7, #12
    7d52:	46bd      	mov	sp, r7
    7d54:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d58:	4770      	bx	lr

00007d5a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    7d5a:	b480      	push	{r7}
    7d5c:	b083      	sub	sp, #12
    7d5e:	af00      	add	r7, sp, #0
    7d60:	6078      	str	r0, [r7, #4]
    7d62:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    7d64:	687b      	ldr	r3, [r7, #4]
    7d66:	699a      	ldr	r2, [r3, #24]
    7d68:	683b      	ldr	r3, [r7, #0]
    7d6a:	431a      	orrs	r2, r3
    7d6c:	687b      	ldr	r3, [r7, #4]
    7d6e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7d70:	bf00      	nop
    7d72:	370c      	adds	r7, #12
    7d74:	46bd      	mov	sp, r7
    7d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d7a:	4770      	bx	lr

00007d7c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    7d7c:	b480      	push	{r7}
    7d7e:	b083      	sub	sp, #12
    7d80:	af00      	add	r7, sp, #0
    7d82:	6078      	str	r0, [r7, #4]
    7d84:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    7d86:	687b      	ldr	r3, [r7, #4]
    7d88:	683a      	ldr	r2, [r7, #0]
    7d8a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    7d8c:	bf00      	nop
    7d8e:	370c      	adds	r7, #12
    7d90:	46bd      	mov	sp, r7
    7d92:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d96:	4770      	bx	lr

00007d98 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    7d98:	b480      	push	{r7}
    7d9a:	b083      	sub	sp, #12
    7d9c:	af00      	add	r7, sp, #0
    7d9e:	6078      	str	r0, [r7, #4]
    7da0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    7da2:	687b      	ldr	r3, [r7, #4]
    7da4:	683a      	ldr	r2, [r7, #0]
    7da6:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    7da8:	bf00      	nop
    7daa:	370c      	adds	r7, #12
    7dac:	46bd      	mov	sp, r7
    7dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    7db2:	4770      	bx	lr

00007db4 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    7db4:	b480      	push	{r7}
    7db6:	b083      	sub	sp, #12
    7db8:	af00      	add	r7, sp, #0
    7dba:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    7dbc:	687b      	ldr	r3, [r7, #4]
    7dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    7dc0:	4618      	mov	r0, r3
    7dc2:	370c      	adds	r7, #12
    7dc4:	46bd      	mov	sp, r7
    7dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dca:	4770      	bx	lr

00007dcc <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    7dcc:	b480      	push	{r7}
    7dce:	b083      	sub	sp, #12
    7dd0:	af00      	add	r7, sp, #0
    7dd2:	6078      	str	r0, [r7, #4]
    7dd4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    7dd6:	687b      	ldr	r3, [r7, #4]
    7dd8:	683a      	ldr	r2, [r7, #0]
    7dda:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    7ddc:	bf00      	nop
    7dde:	370c      	adds	r7, #12
    7de0:	46bd      	mov	sp, r7
    7de2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7de6:	4770      	bx	lr

00007de8 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    7de8:	b480      	push	{r7}
    7dea:	b083      	sub	sp, #12
    7dec:	af00      	add	r7, sp, #0
    7dee:	6078      	str	r0, [r7, #4]
    7df0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    7df2:	687b      	ldr	r3, [r7, #4]
    7df4:	683a      	ldr	r2, [r7, #0]
    7df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    7dfa:	bf00      	nop
    7dfc:	370c      	adds	r7, #12
    7dfe:	46bd      	mov	sp, r7
    7e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e04:	4770      	bx	lr

00007e06 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    7e06:	b480      	push	{r7}
    7e08:	b083      	sub	sp, #12
    7e0a:	af00      	add	r7, sp, #0
    7e0c:	6078      	str	r0, [r7, #4]
    7e0e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    7e10:	687b      	ldr	r3, [r7, #4]
    7e12:	683a      	ldr	r2, [r7, #0]
    7e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    7e18:	bf00      	nop
    7e1a:	370c      	adds	r7, #12
    7e1c:	46bd      	mov	sp, r7
    7e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e22:	4770      	bx	lr

00007e24 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    7e24:	b480      	push	{r7}
    7e26:	b083      	sub	sp, #12
    7e28:	af00      	add	r7, sp, #0
    7e2a:	6078      	str	r0, [r7, #4]
    7e2c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    7e2e:	687b      	ldr	r3, [r7, #4]
    7e30:	683a      	ldr	r2, [r7, #0]
    7e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    7e36:	bf00      	nop
    7e38:	370c      	adds	r7, #12
    7e3a:	46bd      	mov	sp, r7
    7e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e40:	4770      	bx	lr

00007e42 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    7e42:	b480      	push	{r7}
    7e44:	b083      	sub	sp, #12
    7e46:	af00      	add	r7, sp, #0
    7e48:	6078      	str	r0, [r7, #4]
    7e4a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    7e4c:	687b      	ldr	r3, [r7, #4]
    7e4e:	683a      	ldr	r2, [r7, #0]
    7e50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    7e54:	bf00      	nop
    7e56:	370c      	adds	r7, #12
    7e58:	46bd      	mov	sp, r7
    7e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e5e:	4770      	bx	lr

00007e60 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    7e60:	b480      	push	{r7}
    7e62:	b083      	sub	sp, #12
    7e64:	af00      	add	r7, sp, #0
    7e66:	6078      	str	r0, [r7, #4]
    7e68:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    7e6a:	687b      	ldr	r3, [r7, #4]
    7e6c:	683a      	ldr	r2, [r7, #0]
    7e6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    7e72:	bf00      	nop
    7e74:	370c      	adds	r7, #12
    7e76:	46bd      	mov	sp, r7
    7e78:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e7c:	4770      	bx	lr

00007e7e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    7e7e:	b480      	push	{r7}
    7e80:	b083      	sub	sp, #12
    7e82:	af00      	add	r7, sp, #0
    7e84:	6078      	str	r0, [r7, #4]
    7e86:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    7e88:	687b      	ldr	r3, [r7, #4]
    7e8a:	683a      	ldr	r2, [r7, #0]
    7e8c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    7e90:	bf00      	nop
    7e92:	370c      	adds	r7, #12
    7e94:	46bd      	mov	sp, r7
    7e96:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e9a:	4770      	bx	lr

00007e9c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    7e9c:	b480      	push	{r7}
    7e9e:	b083      	sub	sp, #12
    7ea0:	af00      	add	r7, sp, #0
    7ea2:	6078      	str	r0, [r7, #4]
    7ea4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    7ea6:	687b      	ldr	r3, [r7, #4]
    7ea8:	683a      	ldr	r2, [r7, #0]
    7eaa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    7eae:	bf00      	nop
    7eb0:	370c      	adds	r7, #12
    7eb2:	46bd      	mov	sp, r7
    7eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eb8:	4770      	bx	lr

00007eba <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    7eba:	b480      	push	{r7}
    7ebc:	b083      	sub	sp, #12
    7ebe:	af00      	add	r7, sp, #0
    7ec0:	6078      	str	r0, [r7, #4]
    7ec2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    7ec4:	687b      	ldr	r3, [r7, #4]
    7ec6:	683a      	ldr	r2, [r7, #0]
    7ec8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    7ecc:	bf00      	nop
    7ece:	370c      	adds	r7, #12
    7ed0:	46bd      	mov	sp, r7
    7ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ed6:	4770      	bx	lr

00007ed8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    7ed8:	b480      	push	{r7}
    7eda:	b083      	sub	sp, #12
    7edc:	af00      	add	r7, sp, #0
    7ede:	6078      	str	r0, [r7, #4]
    7ee0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    7ee2:	687b      	ldr	r3, [r7, #4]
    7ee4:	683a      	ldr	r2, [r7, #0]
    7ee6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    7eea:	bf00      	nop
    7eec:	370c      	adds	r7, #12
    7eee:	46bd      	mov	sp, r7
    7ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ef4:	4770      	bx	lr
	...

00007ef8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    7ef8:	b580      	push	{r7, lr}
    7efa:	b082      	sub	sp, #8
    7efc:	af00      	add	r7, sp, #0
    7efe:	6078      	str	r0, [r7, #4]
    7f00:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    7f02:	687b      	ldr	r3, [r7, #4]
    7f04:	683a      	ldr	r2, [r7, #0]
    7f06:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    7f08:	687b      	ldr	r3, [r7, #4]
    7f0a:	681b      	ldr	r3, [r3, #0]
    7f0c:	4618      	mov	r0, r3
    7f0e:	4b55      	ldr	r3, [pc, #340]	; (8064 <_can_async_init+0x16c>)
    7f10:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    7f12:	bf00      	nop
    7f14:	687b      	ldr	r3, [r7, #4]
    7f16:	681b      	ldr	r3, [r3, #0]
    7f18:	4618      	mov	r0, r3
    7f1a:	4b53      	ldr	r3, [pc, #332]	; (8068 <_can_async_init+0x170>)
    7f1c:	4798      	blx	r3
    7f1e:	4603      	mov	r3, r0
    7f20:	f083 0301 	eor.w	r3, r3, #1
    7f24:	b2db      	uxtb	r3, r3
    7f26:	2b00      	cmp	r3, #0
    7f28:	d1f4      	bne.n	7f14 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    7f2a:	687b      	ldr	r3, [r7, #4]
    7f2c:	681b      	ldr	r3, [r3, #0]
    7f2e:	4618      	mov	r0, r3
    7f30:	4b4e      	ldr	r3, [pc, #312]	; (806c <_can_async_init+0x174>)
    7f32:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    7f34:	683b      	ldr	r3, [r7, #0]
    7f36:	4a4e      	ldr	r2, [pc, #312]	; (8070 <_can_async_init+0x178>)
    7f38:	4293      	cmp	r3, r2
    7f3a:	d17a      	bne.n	8032 <_can_async_init+0x13a>
		_can1_dev    = dev;
    7f3c:	4a4d      	ldr	r2, [pc, #308]	; (8074 <_can_async_init+0x17c>)
    7f3e:	687b      	ldr	r3, [r7, #4]
    7f40:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    7f42:	687b      	ldr	r3, [r7, #4]
    7f44:	4a4c      	ldr	r2, [pc, #304]	; (8078 <_can_async_init+0x180>)
    7f46:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    7f48:	687b      	ldr	r3, [r7, #4]
    7f4a:	681b      	ldr	r3, [r3, #0]
    7f4c:	f44f 7140 	mov.w	r1, #768	; 0x300
    7f50:	4618      	mov	r0, r3
    7f52:	4b4a      	ldr	r3, [pc, #296]	; (807c <_can_async_init+0x184>)
    7f54:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    7f56:	687b      	ldr	r3, [r7, #4]
    7f58:	681b      	ldr	r3, [r3, #0]
    7f5a:	2102      	movs	r1, #2
    7f5c:	4618      	mov	r0, r3
    7f5e:	4b48      	ldr	r3, [pc, #288]	; (8080 <_can_async_init+0x188>)
    7f60:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    7f62:	687b      	ldr	r3, [r7, #4]
    7f64:	681b      	ldr	r3, [r3, #0]
    7f66:	4947      	ldr	r1, [pc, #284]	; (8084 <_can_async_init+0x18c>)
    7f68:	4618      	mov	r0, r3
    7f6a:	4b47      	ldr	r3, [pc, #284]	; (8088 <_can_async_init+0x190>)
    7f6c:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    7f6e:	687b      	ldr	r3, [r7, #4]
    7f70:	681b      	ldr	r3, [r3, #0]
    7f72:	4946      	ldr	r1, [pc, #280]	; (808c <_can_async_init+0x194>)
    7f74:	4618      	mov	r0, r3
    7f76:	4b46      	ldr	r3, [pc, #280]	; (8090 <_can_async_init+0x198>)
    7f78:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    7f7a:	687b      	ldr	r3, [r7, #4]
    7f7c:	681a      	ldr	r2, [r3, #0]
    7f7e:	4b45      	ldr	r3, [pc, #276]	; (8094 <_can_async_init+0x19c>)
    7f80:	b29b      	uxth	r3, r3
    7f82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    7f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7f8a:	4619      	mov	r1, r3
    7f8c:	4610      	mov	r0, r2
    7f8e:	4b42      	ldr	r3, [pc, #264]	; (8098 <_can_async_init+0x1a0>)
    7f90:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    7f92:	687b      	ldr	r3, [r7, #4]
    7f94:	681b      	ldr	r3, [r3, #0]
    7f96:	2107      	movs	r1, #7
    7f98:	4618      	mov	r0, r3
    7f9a:	4b40      	ldr	r3, [pc, #256]	; (809c <_can_async_init+0x1a4>)
    7f9c:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    7f9e:	687b      	ldr	r3, [r7, #4]
    7fa0:	681b      	ldr	r3, [r3, #0]
    7fa2:	2107      	movs	r1, #7
    7fa4:	4618      	mov	r0, r3
    7fa6:	4b3e      	ldr	r3, [pc, #248]	; (80a0 <_can_async_init+0x1a8>)
    7fa8:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    7faa:	687b      	ldr	r3, [r7, #4]
    7fac:	681a      	ldr	r2, [r3, #0]
    7fae:	4b3d      	ldr	r3, [pc, #244]	; (80a4 <_can_async_init+0x1ac>)
    7fb0:	b29b      	uxth	r3, r3
    7fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    7fb6:	4619      	mov	r1, r3
    7fb8:	4610      	mov	r0, r2
    7fba:	4b3b      	ldr	r3, [pc, #236]	; (80a8 <_can_async_init+0x1b0>)
    7fbc:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    7fbe:	687b      	ldr	r3, [r7, #4]
    7fc0:	681a      	ldr	r2, [r3, #0]
    7fc2:	4b3a      	ldr	r3, [pc, #232]	; (80ac <_can_async_init+0x1b4>)
    7fc4:	b29b      	uxth	r3, r3
    7fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7fca:	4619      	mov	r1, r3
    7fcc:	4610      	mov	r0, r2
    7fce:	4b38      	ldr	r3, [pc, #224]	; (80b0 <_can_async_init+0x1b8>)
    7fd0:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    7fd2:	687b      	ldr	r3, [r7, #4]
    7fd4:	681b      	ldr	r3, [r3, #0]
    7fd6:	2108      	movs	r1, #8
    7fd8:	4618      	mov	r0, r3
    7fda:	4b36      	ldr	r3, [pc, #216]	; (80b4 <_can_async_init+0x1bc>)
    7fdc:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    7fde:	687b      	ldr	r3, [r7, #4]
    7fe0:	681a      	ldr	r2, [r3, #0]
    7fe2:	4b35      	ldr	r3, [pc, #212]	; (80b8 <_can_async_init+0x1c0>)
    7fe4:	b29b      	uxth	r3, r3
    7fe6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    7fea:	4619      	mov	r1, r3
    7fec:	4610      	mov	r0, r2
    7fee:	4b33      	ldr	r3, [pc, #204]	; (80bc <_can_async_init+0x1c4>)
    7ff0:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    7ff2:	687b      	ldr	r3, [r7, #4]
    7ff4:	681a      	ldr	r2, [r3, #0]
    7ff6:	4b32      	ldr	r3, [pc, #200]	; (80c0 <_can_async_init+0x1c8>)
    7ff8:	b29b      	uxth	r3, r3
    7ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7ffe:	4619      	mov	r1, r3
    8000:	4610      	mov	r0, r2
    8002:	4b30      	ldr	r3, [pc, #192]	; (80c4 <_can_async_init+0x1cc>)
    8004:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    8006:	687b      	ldr	r3, [r7, #4]
    8008:	681b      	ldr	r3, [r3, #0]
    800a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    800e:	4618      	mov	r0, r3
    8010:	4b2d      	ldr	r3, [pc, #180]	; (80c8 <_can_async_init+0x1d0>)
    8012:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    8014:	204f      	movs	r0, #79	; 0x4f
    8016:	4b2d      	ldr	r3, [pc, #180]	; (80cc <_can_async_init+0x1d4>)
    8018:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    801a:	204f      	movs	r0, #79	; 0x4f
    801c:	4b2c      	ldr	r3, [pc, #176]	; (80d0 <_can_async_init+0x1d8>)
    801e:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    8020:	204f      	movs	r0, #79	; 0x4f
    8022:	4b2c      	ldr	r3, [pc, #176]	; (80d4 <_can_async_init+0x1dc>)
    8024:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    8026:	687b      	ldr	r3, [r7, #4]
    8028:	681b      	ldr	r3, [r3, #0]
    802a:	2101      	movs	r1, #1
    802c:	4618      	mov	r0, r3
    802e:	4b2a      	ldr	r3, [pc, #168]	; (80d8 <_can_async_init+0x1e0>)
    8030:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    8032:	687b      	ldr	r3, [r7, #4]
    8034:	681b      	ldr	r3, [r3, #0]
    8036:	4618      	mov	r0, r3
    8038:	4b28      	ldr	r3, [pc, #160]	; (80dc <_can_async_init+0x1e4>)
    803a:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    803c:	687b      	ldr	r3, [r7, #4]
    803e:	681b      	ldr	r3, [r3, #0]
    8040:	4618      	mov	r0, r3
    8042:	4b27      	ldr	r3, [pc, #156]	; (80e0 <_can_async_init+0x1e8>)
    8044:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    8046:	bf00      	nop
    8048:	687b      	ldr	r3, [r7, #4]
    804a:	681b      	ldr	r3, [r3, #0]
    804c:	4618      	mov	r0, r3
    804e:	4b06      	ldr	r3, [pc, #24]	; (8068 <_can_async_init+0x170>)
    8050:	4798      	blx	r3
    8052:	4603      	mov	r3, r0
    8054:	2b00      	cmp	r3, #0
    8056:	d1f7      	bne.n	8048 <_can_async_init+0x150>
	};

	return ERR_NONE;
    8058:	2300      	movs	r3, #0
}
    805a:	4618      	mov	r0, r3
    805c:	3708      	adds	r7, #8
    805e:	46bd      	mov	sp, r7
    8060:	bd80      	pop	{r7, pc}
    8062:	bf00      	nop
    8064:	00007cad 	.word	0x00007cad
    8068:	00007ccd 	.word	0x00007ccd
    806c:	00007d1b 	.word	0x00007d1b
    8070:	42000400 	.word	0x42000400
    8074:	20008868 	.word	0x20008868
    8078:	20000068 	.word	0x20000068
    807c:	00007d5b 	.word	0x00007d5b
    8080:	00007c75 	.word	0x00007c75
    8084:	00010c01 	.word	0x00010c01
    8088:	00007d7d 	.word	0x00007d7d
    808c:	00010c10 	.word	0x00010c10
    8090:	00007c91 	.word	0x00007c91
    8094:	2000a774 	.word	0x2000a774
    8098:	00007e61 	.word	0x00007e61
    809c:	00007e7f 	.word	0x00007e7f
    80a0:	00007ebb 	.word	0x00007ebb
    80a4:	2000a72c 	.word	0x2000a72c
    80a8:	00007e9d 	.word	0x00007e9d
    80ac:	200087c8 	.word	0x200087c8
    80b0:	00007ed9 	.word	0x00007ed9
    80b4:	00007de9 	.word	0x00007de9
    80b8:	200087d8 	.word	0x200087d8
    80bc:	00007e07 	.word	0x00007e07
    80c0:	20008858 	.word	0x20008858
    80c4:	00007e25 	.word	0x00007e25
    80c8:	00007e43 	.word	0x00007e43
    80cc:	00007bcd 	.word	0x00007bcd
    80d0:	00007c11 	.word	0x00007c11
    80d4:	00007b91 	.word	0x00007b91
    80d8:	00007dcd 	.word	0x00007dcd
    80dc:	00007d3b 	.word	0x00007d3b
    80e0:	00007cfb 	.word	0x00007cfb

000080e4 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    80e4:	b590      	push	{r4, r7, lr}
    80e6:	b083      	sub	sp, #12
    80e8:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    80ea:	4b2c      	ldr	r3, [pc, #176]	; (819c <CAN1_Handler+0xb8>)
    80ec:	681b      	ldr	r3, [r3, #0]
    80ee:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    80f0:	687b      	ldr	r3, [r7, #4]
    80f2:	681b      	ldr	r3, [r3, #0]
    80f4:	4618      	mov	r0, r3
    80f6:	4b2a      	ldr	r3, [pc, #168]	; (81a0 <CAN1_Handler+0xbc>)
    80f8:	4798      	blx	r3
    80fa:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    80fc:	683b      	ldr	r3, [r7, #0]
    80fe:	f003 0301 	and.w	r3, r3, #1
    8102:	2b00      	cmp	r3, #0
    8104:	d003      	beq.n	810e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    8106:	687b      	ldr	r3, [r7, #4]
    8108:	689b      	ldr	r3, [r3, #8]
    810a:	6878      	ldr	r0, [r7, #4]
    810c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    810e:	683b      	ldr	r3, [r7, #0]
    8110:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8114:	2b00      	cmp	r3, #0
    8116:	d003      	beq.n	8120 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    8118:	687b      	ldr	r3, [r7, #4]
    811a:	685b      	ldr	r3, [r3, #4]
    811c:	6878      	ldr	r0, [r7, #4]
    811e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    8120:	683b      	ldr	r3, [r7, #0]
    8122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    8126:	2b00      	cmp	r3, #0
    8128:	d004      	beq.n	8134 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    812a:	687b      	ldr	r3, [r7, #4]
    812c:	68db      	ldr	r3, [r3, #12]
    812e:	2103      	movs	r1, #3
    8130:	6878      	ldr	r0, [r7, #4]
    8132:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    8134:	683b      	ldr	r3, [r7, #0]
    8136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    813a:	2b00      	cmp	r3, #0
    813c:	d004      	beq.n	8148 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    813e:	687b      	ldr	r3, [r7, #4]
    8140:	68db      	ldr	r3, [r3, #12]
    8142:	2100      	movs	r1, #0
    8144:	6878      	ldr	r0, [r7, #4]
    8146:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    8148:	683b      	ldr	r3, [r7, #0]
    814a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    814e:	2b00      	cmp	r3, #0
    8150:	d00f      	beq.n	8172 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    8152:	687b      	ldr	r3, [r7, #4]
    8154:	68dc      	ldr	r4, [r3, #12]
    8156:	687b      	ldr	r3, [r7, #4]
    8158:	681b      	ldr	r3, [r3, #0]
    815a:	4618      	mov	r0, r3
    815c:	4b11      	ldr	r3, [pc, #68]	; (81a4 <CAN1_Handler+0xc0>)
    815e:	4798      	blx	r3
    8160:	4603      	mov	r3, r0
    8162:	2b00      	cmp	r3, #0
    8164:	d001      	beq.n	816a <CAN1_Handler+0x86>
    8166:	2302      	movs	r3, #2
    8168:	e000      	b.n	816c <CAN1_Handler+0x88>
    816a:	2301      	movs	r3, #1
    816c:	4619      	mov	r1, r3
    816e:	6878      	ldr	r0, [r7, #4]
    8170:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    8172:	683b      	ldr	r3, [r7, #0]
    8174:	f003 0308 	and.w	r3, r3, #8
    8178:	2b00      	cmp	r3, #0
    817a:	d004      	beq.n	8186 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    817c:	687b      	ldr	r3, [r7, #4]
    817e:	68db      	ldr	r3, [r3, #12]
    8180:	2104      	movs	r1, #4
    8182:	6878      	ldr	r0, [r7, #4]
    8184:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    8186:	687b      	ldr	r3, [r7, #4]
    8188:	681b      	ldr	r3, [r3, #0]
    818a:	6839      	ldr	r1, [r7, #0]
    818c:	4618      	mov	r0, r3
    818e:	4b06      	ldr	r3, [pc, #24]	; (81a8 <CAN1_Handler+0xc4>)
    8190:	4798      	blx	r3
}
    8192:	bf00      	nop
    8194:	370c      	adds	r7, #12
    8196:	46bd      	mov	sp, r7
    8198:	bd90      	pop	{r4, r7, pc}
    819a:	bf00      	nop
    819c:	20008868 	.word	0x20008868
    81a0:	00007db5 	.word	0x00007db5
    81a4:	00007c4d 	.word	0x00007c4d
    81a8:	00007d99 	.word	0x00007d99

000081ac <__NVIC_SetPendingIRQ>:
{
    81ac:	b480      	push	{r7}
    81ae:	b083      	sub	sp, #12
    81b0:	af00      	add	r7, sp, #0
    81b2:	4603      	mov	r3, r0
    81b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    81b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    81ba:	2b00      	cmp	r3, #0
    81bc:	db0c      	blt.n	81d8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    81be:	4909      	ldr	r1, [pc, #36]	; (81e4 <__NVIC_SetPendingIRQ+0x38>)
    81c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    81c4:	095b      	lsrs	r3, r3, #5
    81c6:	88fa      	ldrh	r2, [r7, #6]
    81c8:	f002 021f 	and.w	r2, r2, #31
    81cc:	2001      	movs	r0, #1
    81ce:	fa00 f202 	lsl.w	r2, r0, r2
    81d2:	3340      	adds	r3, #64	; 0x40
    81d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    81d8:	bf00      	nop
    81da:	370c      	adds	r7, #12
    81dc:	46bd      	mov	sp, r7
    81de:	f85d 7b04 	ldr.w	r7, [sp], #4
    81e2:	4770      	bx	lr
    81e4:	e000e100 	.word	0xe000e100

000081e8 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    81e8:	b580      	push	{r7, lr}
    81ea:	b082      	sub	sp, #8
    81ec:	af00      	add	r7, sp, #0
    81ee:	4603      	mov	r3, r0
    81f0:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    81f2:	79fb      	ldrb	r3, [r7, #7]
    81f4:	b21b      	sxth	r3, r3
    81f6:	4618      	mov	r0, r3
    81f8:	4b02      	ldr	r3, [pc, #8]	; (8204 <_irq_set+0x1c>)
    81fa:	4798      	blx	r3
}
    81fc:	bf00      	nop
    81fe:	3708      	adds	r7, #8
    8200:	46bd      	mov	sp, r7
    8202:	bd80      	pop	{r7, pc}
    8204:	000081ad 	.word	0x000081ad

00008208 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    8208:	b480      	push	{r7}
    820a:	b083      	sub	sp, #12
    820c:	af00      	add	r7, sp, #0
    820e:	4603      	mov	r3, r0
    8210:	6039      	str	r1, [r7, #0]
    8212:	80fb      	strh	r3, [r7, #6]
    8214:	4613      	mov	r3, r2
    8216:	717b      	strb	r3, [r7, #5]
	switch (power) {
    8218:	797b      	ldrb	r3, [r7, #5]
    821a:	3b04      	subs	r3, #4
    821c:	2b05      	cmp	r3, #5
    821e:	d86b      	bhi.n	82f8 <_get_cycles_for_us_internal+0xf0>
    8220:	a201      	add	r2, pc, #4	; (adr r2, 8228 <_get_cycles_for_us_internal+0x20>)
    8222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8226:	bf00      	nop
    8228:	000082d7 	.word	0x000082d7
    822c:	000082b7 	.word	0x000082b7
    8230:	00008299 	.word	0x00008299
    8234:	0000827b 	.word	0x0000827b
    8238:	0000825d 	.word	0x0000825d
    823c:	00008241 	.word	0x00008241
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    8240:	88fb      	ldrh	r3, [r7, #6]
    8242:	683a      	ldr	r2, [r7, #0]
    8244:	4935      	ldr	r1, [pc, #212]	; (831c <_get_cycles_for_us_internal+0x114>)
    8246:	fba1 1202 	umull	r1, r2, r1, r2
    824a:	0c92      	lsrs	r2, r2, #18
    824c:	fb02 f303 	mul.w	r3, r2, r3
    8250:	3302      	adds	r3, #2
    8252:	4a33      	ldr	r2, [pc, #204]	; (8320 <_get_cycles_for_us_internal+0x118>)
    8254:	fba2 2303 	umull	r2, r3, r2, r3
    8258:	085b      	lsrs	r3, r3, #1
    825a:	e059      	b.n	8310 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    825c:	88fb      	ldrh	r3, [r7, #6]
    825e:	683a      	ldr	r2, [r7, #0]
    8260:	0952      	lsrs	r2, r2, #5
    8262:	4930      	ldr	r1, [pc, #192]	; (8324 <_get_cycles_for_us_internal+0x11c>)
    8264:	fba1 1202 	umull	r1, r2, r1, r2
    8268:	09d2      	lsrs	r2, r2, #7
    826a:	fb02 f303 	mul.w	r3, r2, r3
    826e:	331d      	adds	r3, #29
    8270:	4a2d      	ldr	r2, [pc, #180]	; (8328 <_get_cycles_for_us_internal+0x120>)
    8272:	fba2 2303 	umull	r2, r3, r2, r3
    8276:	091b      	lsrs	r3, r3, #4
    8278:	e04a      	b.n	8310 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    827a:	88fb      	ldrh	r3, [r7, #6]
    827c:	683a      	ldr	r2, [r7, #0]
    827e:	492b      	ldr	r1, [pc, #172]	; (832c <_get_cycles_for_us_internal+0x124>)
    8280:	fba1 1202 	umull	r1, r2, r1, r2
    8284:	0b52      	lsrs	r2, r2, #13
    8286:	fb02 f303 	mul.w	r3, r2, r3
    828a:	f203 132b 	addw	r3, r3, #299	; 0x12b
    828e:	4a28      	ldr	r2, [pc, #160]	; (8330 <_get_cycles_for_us_internal+0x128>)
    8290:	fba2 2303 	umull	r2, r3, r2, r3
    8294:	095b      	lsrs	r3, r3, #5
    8296:	e03b      	b.n	8310 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    8298:	88fb      	ldrh	r3, [r7, #6]
    829a:	683a      	ldr	r2, [r7, #0]
    829c:	4925      	ldr	r1, [pc, #148]	; (8334 <_get_cycles_for_us_internal+0x12c>)
    829e:	fba1 1202 	umull	r1, r2, r1, r2
    82a2:	0992      	lsrs	r2, r2, #6
    82a4:	fb02 f303 	mul.w	r3, r2, r3
    82a8:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    82ac:	4a22      	ldr	r2, [pc, #136]	; (8338 <_get_cycles_for_us_internal+0x130>)
    82ae:	fba2 2303 	umull	r2, r3, r2, r3
    82b2:	099b      	lsrs	r3, r3, #6
    82b4:	e02c      	b.n	8310 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    82b6:	88fb      	ldrh	r3, [r7, #6]
    82b8:	683a      	ldr	r2, [r7, #0]
    82ba:	4920      	ldr	r1, [pc, #128]	; (833c <_get_cycles_for_us_internal+0x134>)
    82bc:	fba1 1202 	umull	r1, r2, r1, r2
    82c0:	0952      	lsrs	r2, r2, #5
    82c2:	fb02 f303 	mul.w	r3, r2, r3
    82c6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    82ca:	332f      	adds	r3, #47	; 0x2f
    82cc:	4a1c      	ldr	r2, [pc, #112]	; (8340 <_get_cycles_for_us_internal+0x138>)
    82ce:	fba2 2303 	umull	r2, r3, r2, r3
    82d2:	0b5b      	lsrs	r3, r3, #13
    82d4:	e01c      	b.n	8310 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    82d6:	88fb      	ldrh	r3, [r7, #6]
    82d8:	683a      	ldr	r2, [r7, #0]
    82da:	491a      	ldr	r1, [pc, #104]	; (8344 <_get_cycles_for_us_internal+0x13c>)
    82dc:	fba1 1202 	umull	r1, r2, r1, r2
    82e0:	08d2      	lsrs	r2, r2, #3
    82e2:	fb02 f303 	mul.w	r3, r2, r3
    82e6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    82ea:	f203 33df 	addw	r3, r3, #991	; 0x3df
    82ee:	4a16      	ldr	r2, [pc, #88]	; (8348 <_get_cycles_for_us_internal+0x140>)
    82f0:	fba2 2303 	umull	r2, r3, r2, r3
    82f4:	0c5b      	lsrs	r3, r3, #17
    82f6:	e00b      	b.n	8310 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    82f8:	88fb      	ldrh	r3, [r7, #6]
    82fa:	683a      	ldr	r2, [r7, #0]
    82fc:	fb02 f303 	mul.w	r3, r2, r3
    8300:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    8304:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    8308:	4a10      	ldr	r2, [pc, #64]	; (834c <_get_cycles_for_us_internal+0x144>)
    830a:	fba2 2303 	umull	r2, r3, r2, r3
    830e:	0c9b      	lsrs	r3, r3, #18
	}
}
    8310:	4618      	mov	r0, r3
    8312:	370c      	adds	r7, #12
    8314:	46bd      	mov	sp, r7
    8316:	f85d 7b04 	ldr.w	r7, [sp], #4
    831a:	4770      	bx	lr
    831c:	431bde83 	.word	0x431bde83
    8320:	aaaaaaab 	.word	0xaaaaaaab
    8324:	0a7c5ac5 	.word	0x0a7c5ac5
    8328:	88888889 	.word	0x88888889
    832c:	d1b71759 	.word	0xd1b71759
    8330:	1b4e81b5 	.word	0x1b4e81b5
    8334:	10624dd3 	.word	0x10624dd3
    8338:	057619f1 	.word	0x057619f1
    833c:	51eb851f 	.word	0x51eb851f
    8340:	45e7b273 	.word	0x45e7b273
    8344:	cccccccd 	.word	0xcccccccd
    8348:	6fd91d85 	.word	0x6fd91d85
    834c:	165e9f81 	.word	0x165e9f81

00008350 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    8350:	b580      	push	{r7, lr}
    8352:	b082      	sub	sp, #8
    8354:	af00      	add	r7, sp, #0
    8356:	4603      	mov	r3, r0
    8358:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    835a:	88fb      	ldrh	r3, [r7, #6]
    835c:	2209      	movs	r2, #9
    835e:	4904      	ldr	r1, [pc, #16]	; (8370 <_get_cycles_for_us+0x20>)
    8360:	4618      	mov	r0, r3
    8362:	4b04      	ldr	r3, [pc, #16]	; (8374 <_get_cycles_for_us+0x24>)
    8364:	4798      	blx	r3
    8366:	4603      	mov	r3, r0
}
    8368:	4618      	mov	r0, r3
    836a:	3708      	adds	r7, #8
    836c:	46bd      	mov	sp, r7
    836e:	bd80      	pop	{r7, pc}
    8370:	07270e00 	.word	0x07270e00
    8374:	00008209 	.word	0x00008209

00008378 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    8378:	b480      	push	{r7}
    837a:	b083      	sub	sp, #12
    837c:	af00      	add	r7, sp, #0
    837e:	4603      	mov	r3, r0
    8380:	6039      	str	r1, [r7, #0]
    8382:	80fb      	strh	r3, [r7, #6]
    8384:	4613      	mov	r3, r2
    8386:	717b      	strb	r3, [r7, #5]
	switch (power) {
    8388:	797b      	ldrb	r3, [r7, #5]
    838a:	3b04      	subs	r3, #4
    838c:	2b05      	cmp	r3, #5
    838e:	d870      	bhi.n	8472 <_get_cycles_for_ms_internal+0xfa>
    8390:	a201      	add	r2, pc, #4	; (adr r2, 8398 <_get_cycles_for_ms_internal+0x20>)
    8392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8396:	bf00      	nop
    8398:	00008455 	.word	0x00008455
    839c:	00008439 	.word	0x00008439
    83a0:	0000841d 	.word	0x0000841d
    83a4:	000083f9 	.word	0x000083f9
    83a8:	000083d5 	.word	0x000083d5
    83ac:	000083b1 	.word	0x000083b1
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    83b0:	88fb      	ldrh	r3, [r7, #6]
    83b2:	683a      	ldr	r2, [r7, #0]
    83b4:	4937      	ldr	r1, [pc, #220]	; (8494 <_get_cycles_for_ms_internal+0x11c>)
    83b6:	fba1 1202 	umull	r1, r2, r1, r2
    83ba:	0c92      	lsrs	r2, r2, #18
    83bc:	fb02 f303 	mul.w	r3, r2, r3
    83c0:	3302      	adds	r3, #2
    83c2:	4a35      	ldr	r2, [pc, #212]	; (8498 <_get_cycles_for_ms_internal+0x120>)
    83c4:	fba2 2303 	umull	r2, r3, r2, r3
    83c8:	085b      	lsrs	r3, r3, #1
    83ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    83ce:	fb02 f303 	mul.w	r3, r2, r3
    83d2:	e058      	b.n	8486 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    83d4:	88fb      	ldrh	r3, [r7, #6]
    83d6:	683a      	ldr	r2, [r7, #0]
    83d8:	0952      	lsrs	r2, r2, #5
    83da:	4930      	ldr	r1, [pc, #192]	; (849c <_get_cycles_for_ms_internal+0x124>)
    83dc:	fba1 1202 	umull	r1, r2, r1, r2
    83e0:	09d2      	lsrs	r2, r2, #7
    83e2:	fb02 f303 	mul.w	r3, r2, r3
    83e6:	3302      	adds	r3, #2
    83e8:	4a2b      	ldr	r2, [pc, #172]	; (8498 <_get_cycles_for_ms_internal+0x120>)
    83ea:	fba2 2303 	umull	r2, r3, r2, r3
    83ee:	085b      	lsrs	r3, r3, #1
    83f0:	2264      	movs	r2, #100	; 0x64
    83f2:	fb02 f303 	mul.w	r3, r2, r3
    83f6:	e046      	b.n	8486 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    83f8:	88fb      	ldrh	r3, [r7, #6]
    83fa:	683a      	ldr	r2, [r7, #0]
    83fc:	4928      	ldr	r1, [pc, #160]	; (84a0 <_get_cycles_for_ms_internal+0x128>)
    83fe:	fba1 1202 	umull	r1, r2, r1, r2
    8402:	0b52      	lsrs	r2, r2, #13
    8404:	fb02 f303 	mul.w	r3, r2, r3
    8408:	3302      	adds	r3, #2
    840a:	4a23      	ldr	r2, [pc, #140]	; (8498 <_get_cycles_for_ms_internal+0x120>)
    840c:	fba2 2303 	umull	r2, r3, r2, r3
    8410:	085a      	lsrs	r2, r3, #1
    8412:	4613      	mov	r3, r2
    8414:	009b      	lsls	r3, r3, #2
    8416:	4413      	add	r3, r2
    8418:	005b      	lsls	r3, r3, #1
    841a:	e034      	b.n	8486 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    841c:	88fb      	ldrh	r3, [r7, #6]
    841e:	683a      	ldr	r2, [r7, #0]
    8420:	4920      	ldr	r1, [pc, #128]	; (84a4 <_get_cycles_for_ms_internal+0x12c>)
    8422:	fba1 1202 	umull	r1, r2, r1, r2
    8426:	0992      	lsrs	r2, r2, #6
    8428:	fb02 f303 	mul.w	r3, r2, r3
    842c:	3302      	adds	r3, #2
    842e:	4a1a      	ldr	r2, [pc, #104]	; (8498 <_get_cycles_for_ms_internal+0x120>)
    8430:	fba2 2303 	umull	r2, r3, r2, r3
    8434:	085b      	lsrs	r3, r3, #1
    8436:	e026      	b.n	8486 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    8438:	88fb      	ldrh	r3, [r7, #6]
    843a:	683a      	ldr	r2, [r7, #0]
    843c:	491a      	ldr	r1, [pc, #104]	; (84a8 <_get_cycles_for_ms_internal+0x130>)
    843e:	fba1 1202 	umull	r1, r2, r1, r2
    8442:	0952      	lsrs	r2, r2, #5
    8444:	fb02 f303 	mul.w	r3, r2, r3
    8448:	331d      	adds	r3, #29
    844a:	4a18      	ldr	r2, [pc, #96]	; (84ac <_get_cycles_for_ms_internal+0x134>)
    844c:	fba2 2303 	umull	r2, r3, r2, r3
    8450:	091b      	lsrs	r3, r3, #4
    8452:	e018      	b.n	8486 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    8454:	88fb      	ldrh	r3, [r7, #6]
    8456:	683a      	ldr	r2, [r7, #0]
    8458:	4915      	ldr	r1, [pc, #84]	; (84b0 <_get_cycles_for_ms_internal+0x138>)
    845a:	fba1 1202 	umull	r1, r2, r1, r2
    845e:	08d2      	lsrs	r2, r2, #3
    8460:	fb02 f303 	mul.w	r3, r2, r3
    8464:	f203 132b 	addw	r3, r3, #299	; 0x12b
    8468:	4a12      	ldr	r2, [pc, #72]	; (84b4 <_get_cycles_for_ms_internal+0x13c>)
    846a:	fba2 2303 	umull	r2, r3, r2, r3
    846e:	095b      	lsrs	r3, r3, #5
    8470:	e009      	b.n	8486 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    8472:	88fb      	ldrh	r3, [r7, #6]
    8474:	683a      	ldr	r2, [r7, #0]
    8476:	fb02 f303 	mul.w	r3, r2, r3
    847a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    847e:	4a0e      	ldr	r2, [pc, #56]	; (84b8 <_get_cycles_for_ms_internal+0x140>)
    8480:	fba2 2303 	umull	r2, r3, r2, r3
    8484:	099b      	lsrs	r3, r3, #6
	}
}
    8486:	4618      	mov	r0, r3
    8488:	370c      	adds	r7, #12
    848a:	46bd      	mov	sp, r7
    848c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8490:	4770      	bx	lr
    8492:	bf00      	nop
    8494:	431bde83 	.word	0x431bde83
    8498:	aaaaaaab 	.word	0xaaaaaaab
    849c:	0a7c5ac5 	.word	0x0a7c5ac5
    84a0:	d1b71759 	.word	0xd1b71759
    84a4:	10624dd3 	.word	0x10624dd3
    84a8:	51eb851f 	.word	0x51eb851f
    84ac:	88888889 	.word	0x88888889
    84b0:	cccccccd 	.word	0xcccccccd
    84b4:	1b4e81b5 	.word	0x1b4e81b5
    84b8:	057619f1 	.word	0x057619f1

000084bc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    84bc:	b580      	push	{r7, lr}
    84be:	b082      	sub	sp, #8
    84c0:	af00      	add	r7, sp, #0
    84c2:	4603      	mov	r3, r0
    84c4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    84c6:	88fb      	ldrh	r3, [r7, #6]
    84c8:	2209      	movs	r2, #9
    84ca:	4904      	ldr	r1, [pc, #16]	; (84dc <_get_cycles_for_ms+0x20>)
    84cc:	4618      	mov	r0, r3
    84ce:	4b04      	ldr	r3, [pc, #16]	; (84e0 <_get_cycles_for_ms+0x24>)
    84d0:	4798      	blx	r3
    84d2:	4603      	mov	r3, r0
}
    84d4:	4618      	mov	r0, r3
    84d6:	3708      	adds	r7, #8
    84d8:	46bd      	mov	sp, r7
    84da:	bd80      	pop	{r7, pc}
    84dc:	07270e00 	.word	0x07270e00
    84e0:	00008379 	.word	0x00008379
    84e4:	00000000 	.word	0x00000000

000084e8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    84e8:	b480      	push	{r7}
    84ea:	b083      	sub	sp, #12
    84ec:	af00      	add	r7, sp, #0
    84ee:	6078      	str	r0, [r7, #4]
    84f0:	6039      	str	r1, [r7, #0]
    84f2:	bf00      	nop
    84f4:	f3af 8000 	nop.w

000084f8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    84f8:	3901      	subs	r1, #1
    84fa:	d8fd      	bhi.n	84f8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    84fc:	bf00      	nop
    84fe:	370c      	adds	r7, #12
    8500:	46bd      	mov	sp, r7
    8502:	f85d 7b04 	ldr.w	r7, [sp], #4
    8506:	4770      	bx	lr

00008508 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    8508:	b480      	push	{r7}
    850a:	b083      	sub	sp, #12
    850c:	af00      	add	r7, sp, #0
    850e:	6078      	str	r0, [r7, #4]
    8510:	460b      	mov	r3, r1
    8512:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    8514:	687b      	ldr	r3, [r7, #4]
    8516:	881b      	ldrh	r3, [r3, #0]
    8518:	b29a      	uxth	r2, r3
    851a:	887b      	ldrh	r3, [r7, #2]
    851c:	021b      	lsls	r3, r3, #8
    851e:	b29b      	uxth	r3, r3
    8520:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    8524:	b29b      	uxth	r3, r3
    8526:	4313      	orrs	r3, r2
    8528:	b29a      	uxth	r2, r3
    852a:	687b      	ldr	r3, [r7, #4]
    852c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    852e:	bf00      	nop
    8530:	370c      	adds	r7, #12
    8532:	46bd      	mov	sp, r7
    8534:	f85d 7b04 	ldr.w	r7, [sp], #4
    8538:	4770      	bx	lr

0000853a <hri_port_set_EVCTRL_reg>:
{
    853a:	b480      	push	{r7}
    853c:	b085      	sub	sp, #20
    853e:	af00      	add	r7, sp, #0
    8540:	60f8      	str	r0, [r7, #12]
    8542:	460b      	mov	r3, r1
    8544:	607a      	str	r2, [r7, #4]
    8546:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    8548:	7afb      	ldrb	r3, [r7, #11]
    854a:	7afa      	ldrb	r2, [r7, #11]
    854c:	68f9      	ldr	r1, [r7, #12]
    854e:	01d2      	lsls	r2, r2, #7
    8550:	440a      	add	r2, r1
    8552:	322c      	adds	r2, #44	; 0x2c
    8554:	6811      	ldr	r1, [r2, #0]
    8556:	687a      	ldr	r2, [r7, #4]
    8558:	430a      	orrs	r2, r1
    855a:	68f9      	ldr	r1, [r7, #12]
    855c:	01db      	lsls	r3, r3, #7
    855e:	440b      	add	r3, r1
    8560:	332c      	adds	r3, #44	; 0x2c
    8562:	601a      	str	r2, [r3, #0]
}
    8564:	bf00      	nop
    8566:	3714      	adds	r7, #20
    8568:	46bd      	mov	sp, r7
    856a:	f85d 7b04 	ldr.w	r7, [sp], #4
    856e:	4770      	bx	lr

00008570 <_port_event_init>:

static inline void _port_event_init()
{
    8570:	b580      	push	{r7, lr}
    8572:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    8574:	2200      	movs	r2, #0
    8576:	2100      	movs	r1, #0
    8578:	480a      	ldr	r0, [pc, #40]	; (85a4 <_port_event_init+0x34>)
    857a:	4b0b      	ldr	r3, [pc, #44]	; (85a8 <_port_event_init+0x38>)
    857c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    857e:	2200      	movs	r2, #0
    8580:	2101      	movs	r1, #1
    8582:	4808      	ldr	r0, [pc, #32]	; (85a4 <_port_event_init+0x34>)
    8584:	4b08      	ldr	r3, [pc, #32]	; (85a8 <_port_event_init+0x38>)
    8586:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    8588:	f64e 72ef 	movw	r2, #61423	; 0xefef
    858c:	2102      	movs	r1, #2
    858e:	4805      	ldr	r0, [pc, #20]	; (85a4 <_port_event_init+0x34>)
    8590:	4b05      	ldr	r3, [pc, #20]	; (85a8 <_port_event_init+0x38>)
    8592:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    8594:	2200      	movs	r2, #0
    8596:	2103      	movs	r1, #3
    8598:	4802      	ldr	r0, [pc, #8]	; (85a4 <_port_event_init+0x34>)
    859a:	4b03      	ldr	r3, [pc, #12]	; (85a8 <_port_event_init+0x38>)
    859c:	4798      	blx	r3
}
    859e:	bf00      	nop
    85a0:	bd80      	pop	{r7, pc}
    85a2:	bf00      	nop
    85a4:	41008000 	.word	0x41008000
    85a8:	0000853b 	.word	0x0000853b

000085ac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    85ac:	b580      	push	{r7, lr}
    85ae:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    85b0:	2104      	movs	r1, #4
    85b2:	480b      	ldr	r0, [pc, #44]	; (85e0 <_init_chip+0x34>)
    85b4:	4b0b      	ldr	r3, [pc, #44]	; (85e4 <_init_chip+0x38>)
    85b6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    85b8:	4b0b      	ldr	r3, [pc, #44]	; (85e8 <_init_chip+0x3c>)
    85ba:	4798      	blx	r3
	_oscctrl_init_sources();
    85bc:	4b0b      	ldr	r3, [pc, #44]	; (85ec <_init_chip+0x40>)
    85be:	4798      	blx	r3
	_mclk_init();
    85c0:	4b0b      	ldr	r3, [pc, #44]	; (85f0 <_init_chip+0x44>)
    85c2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    85c4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    85c8:	4b0a      	ldr	r3, [pc, #40]	; (85f4 <_init_chip+0x48>)
    85ca:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    85cc:	4b0a      	ldr	r3, [pc, #40]	; (85f8 <_init_chip+0x4c>)
    85ce:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    85d0:	f640 30df 	movw	r0, #3039	; 0xbdf
    85d4:	4b07      	ldr	r3, [pc, #28]	; (85f4 <_init_chip+0x48>)
    85d6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    85d8:	4b08      	ldr	r3, [pc, #32]	; (85fc <_init_chip+0x50>)
    85da:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    85dc:	bf00      	nop
    85de:	bd80      	pop	{r7, pc}
    85e0:	41004000 	.word	0x41004000
    85e4:	00008509 	.word	0x00008509
    85e8:	000092d1 	.word	0x000092d1
    85ec:	00009799 	.word	0x00009799
    85f0:	000091f1 	.word	0x000091f1
    85f4:	000090b1 	.word	0x000090b1
    85f8:	000097d9 	.word	0x000097d9
    85fc:	00008571 	.word	0x00008571

00008600 <hri_dsu_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_ADDR_reg(const void *const hw, hri_dsu_addr_reg_t data)
{
    8600:	b480      	push	{r7}
    8602:	b083      	sub	sp, #12
    8604:	af00      	add	r7, sp, #0
    8606:	6078      	str	r0, [r7, #4]
    8608:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->ADDR.reg = data;
    860a:	687b      	ldr	r3, [r7, #4]
    860c:	683a      	ldr	r2, [r7, #0]
    860e:	605a      	str	r2, [r3, #4]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8610:	bf00      	nop
    8612:	370c      	adds	r7, #12
    8614:	46bd      	mov	sp, r7
    8616:	f85d 7b04 	ldr.w	r7, [sp], #4
    861a:	4770      	bx	lr

0000861c <hri_dsu_write_LENGTH_LENGTH_bf>:
	tmp = (tmp & DSU_LENGTH_LENGTH(mask)) >> DSU_LENGTH_LENGTH_Pos;
	return tmp;
}

static inline void hri_dsu_write_LENGTH_LENGTH_bf(const void *const hw, hri_dsu_length_reg_t data)
{
    861c:	b480      	push	{r7}
    861e:	b085      	sub	sp, #20
    8620:	af00      	add	r7, sp, #0
    8622:	6078      	str	r0, [r7, #4]
    8624:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	DSU_CRITICAL_SECTION_ENTER();
	tmp = ((Dsu *)hw)->LENGTH.reg;
    8626:	687b      	ldr	r3, [r7, #4]
    8628:	689b      	ldr	r3, [r3, #8]
    862a:	60fb      	str	r3, [r7, #12]
	tmp &= ~DSU_LENGTH_LENGTH_Msk;
    862c:	68fb      	ldr	r3, [r7, #12]
    862e:	f003 0303 	and.w	r3, r3, #3
    8632:	60fb      	str	r3, [r7, #12]
	tmp |= DSU_LENGTH_LENGTH(data);
    8634:	683b      	ldr	r3, [r7, #0]
    8636:	009b      	lsls	r3, r3, #2
    8638:	68fa      	ldr	r2, [r7, #12]
    863a:	4313      	orrs	r3, r2
    863c:	60fb      	str	r3, [r7, #12]
	((Dsu *)hw)->LENGTH.reg = tmp;
    863e:	687b      	ldr	r3, [r7, #4]
    8640:	68fa      	ldr	r2, [r7, #12]
    8642:	609a      	str	r2, [r3, #8]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8644:	bf00      	nop
    8646:	3714      	adds	r7, #20
    8648:	46bd      	mov	sp, r7
    864a:	f85d 7b04 	ldr.w	r7, [sp], #4
    864e:	4770      	bx	lr

00008650 <hri_dsu_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dsu_write_DATA_reg(const void *const hw, hri_dsu_data_reg_t data)
{
    8650:	b480      	push	{r7}
    8652:	b083      	sub	sp, #12
    8654:	af00      	add	r7, sp, #0
    8656:	6078      	str	r0, [r7, #4]
    8658:	6039      	str	r1, [r7, #0]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->DATA.reg = data;
    865a:	687b      	ldr	r3, [r7, #4]
    865c:	683a      	ldr	r2, [r7, #0]
    865e:	60da      	str	r2, [r3, #12]
	DSU_CRITICAL_SECTION_LEAVE();
}
    8660:	bf00      	nop
    8662:	370c      	adds	r7, #12
    8664:	46bd      	mov	sp, r7
    8666:	f85d 7b04 	ldr.w	r7, [sp], #4
    866a:	4770      	bx	lr

0000866c <hri_dsu_read_DATA_reg>:
	((Dsu *)hw)->DATA.reg ^= mask;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline hri_dsu_data_reg_t hri_dsu_read_DATA_reg(const void *const hw)
{
    866c:	b480      	push	{r7}
    866e:	b083      	sub	sp, #12
    8670:	af00      	add	r7, sp, #0
    8672:	6078      	str	r0, [r7, #4]
	return ((Dsu *)hw)->DATA.reg;
    8674:	687b      	ldr	r3, [r7, #4]
    8676:	68db      	ldr	r3, [r3, #12]
}
    8678:	4618      	mov	r0, r3
    867a:	370c      	adds	r7, #12
    867c:	46bd      	mov	sp, r7
    867e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8682:	4770      	bx	lr

00008684 <hri_dsu_get_STATUSA_DONE_bit>:
{
	return ((Dsu *)hw)->CFG.reg;
}

static inline bool hri_dsu_get_STATUSA_DONE_bit(const void *const hw)
{
    8684:	b480      	push	{r7}
    8686:	b083      	sub	sp, #12
    8688:	af00      	add	r7, sp, #0
    868a:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_DONE) >> DSU_STATUSA_DONE_Pos;
    868c:	687b      	ldr	r3, [r7, #4]
    868e:	785b      	ldrb	r3, [r3, #1]
    8690:	b2db      	uxtb	r3, r3
    8692:	f003 0301 	and.w	r3, r3, #1
    8696:	2b00      	cmp	r3, #0
    8698:	bf14      	ite	ne
    869a:	2301      	movne	r3, #1
    869c:	2300      	moveq	r3, #0
    869e:	b2db      	uxtb	r3, r3
}
    86a0:	4618      	mov	r0, r3
    86a2:	370c      	adds	r7, #12
    86a4:	46bd      	mov	sp, r7
    86a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    86aa:	4770      	bx	lr

000086ac <hri_dsu_clear_STATUSA_DONE_bit>:

static inline void hri_dsu_clear_STATUSA_DONE_bit(const void *const hw)
{
    86ac:	b480      	push	{r7}
    86ae:	b083      	sub	sp, #12
    86b0:	af00      	add	r7, sp, #0
    86b2:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_DONE;
    86b4:	687b      	ldr	r3, [r7, #4]
    86b6:	2201      	movs	r2, #1
    86b8:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    86ba:	bf00      	nop
    86bc:	370c      	adds	r7, #12
    86be:	46bd      	mov	sp, r7
    86c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    86c4:	4770      	bx	lr

000086c6 <hri_dsu_get_STATUSA_BERR_bit>:
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_CRSTEXT;
	DSU_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dsu_get_STATUSA_BERR_bit(const void *const hw)
{
    86c6:	b480      	push	{r7}
    86c8:	b083      	sub	sp, #12
    86ca:	af00      	add	r7, sp, #0
    86cc:	6078      	str	r0, [r7, #4]
	return (((Dsu *)hw)->STATUSA.reg & DSU_STATUSA_BERR) >> DSU_STATUSA_BERR_Pos;
    86ce:	687b      	ldr	r3, [r7, #4]
    86d0:	785b      	ldrb	r3, [r3, #1]
    86d2:	b2db      	uxtb	r3, r3
    86d4:	089b      	lsrs	r3, r3, #2
    86d6:	f003 0301 	and.w	r3, r3, #1
    86da:	2b00      	cmp	r3, #0
    86dc:	bf14      	ite	ne
    86de:	2301      	movne	r3, #1
    86e0:	2300      	moveq	r3, #0
    86e2:	b2db      	uxtb	r3, r3
}
    86e4:	4618      	mov	r0, r3
    86e6:	370c      	adds	r7, #12
    86e8:	46bd      	mov	sp, r7
    86ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    86ee:	4770      	bx	lr

000086f0 <hri_dsu_clear_STATUSA_BERR_bit>:

static inline void hri_dsu_clear_STATUSA_BERR_bit(const void *const hw)
{
    86f0:	b480      	push	{r7}
    86f2:	b083      	sub	sp, #12
    86f4:	af00      	add	r7, sp, #0
    86f6:	6078      	str	r0, [r7, #4]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->STATUSA.reg = DSU_STATUSA_BERR;
    86f8:	687b      	ldr	r3, [r7, #4]
    86fa:	2204      	movs	r2, #4
    86fc:	705a      	strb	r2, [r3, #1]
	DSU_CRITICAL_SECTION_LEAVE();
}
    86fe:	bf00      	nop
    8700:	370c      	adds	r7, #12
    8702:	46bd      	mov	sp, r7
    8704:	f85d 7b04 	ldr.w	r7, [sp], #4
    8708:	4770      	bx	lr

0000870a <hri_dsu_write_CTRL_reg>:
{
	return ((Dsu *)hw)->STATUSA.reg;
}

static inline void hri_dsu_write_CTRL_reg(const void *const hw, hri_dsu_ctrl_reg_t data)
{
    870a:	b480      	push	{r7}
    870c:	b083      	sub	sp, #12
    870e:	af00      	add	r7, sp, #0
    8710:	6078      	str	r0, [r7, #4]
    8712:	460b      	mov	r3, r1
    8714:	70fb      	strb	r3, [r7, #3]
	DSU_CRITICAL_SECTION_ENTER();
	((Dsu *)hw)->CTRL.reg = data;
    8716:	687b      	ldr	r3, [r7, #4]
    8718:	78fa      	ldrb	r2, [r7, #3]
    871a:	701a      	strb	r2, [r3, #0]
	DSU_CRITICAL_SECTION_LEAVE();
}
    871c:	bf00      	nop
    871e:	370c      	adds	r7, #12
    8720:	46bd      	mov	sp, r7
    8722:	f85d 7b04 	ldr.w	r7, [sp], #4
    8726:	4770      	bx	lr

00008728 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    8728:	b480      	push	{r7}
    872a:	b083      	sub	sp, #12
    872c:	af00      	add	r7, sp, #0
    872e:	6078      	str	r0, [r7, #4]
    8730:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    8732:	687b      	ldr	r3, [r7, #4]
    8734:	683a      	ldr	r2, [r7, #0]
    8736:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    8738:	2300      	movs	r3, #0
}
    873a:	4618      	mov	r0, r3
    873c:	370c      	adds	r7, #12
    873e:	46bd      	mov	sp, r7
    8740:	f85d 7b04 	ldr.w	r7, [sp], #4
    8744:	4770      	bx	lr

00008746 <_crc_sync_enable>:

/**
 * \brief Enable CRC
 */
int32_t _crc_sync_enable(struct _crc_sync_device *const device)
{
    8746:	b480      	push	{r7}
    8748:	b083      	sub	sp, #12
    874a:	af00      	add	r7, sp, #0
    874c:	6078      	str	r0, [r7, #4]
	(void)device;

	return ERR_NONE;
    874e:	2300      	movs	r3, #0
}
    8750:	4618      	mov	r0, r3
    8752:	370c      	adds	r7, #12
    8754:	46bd      	mov	sp, r7
    8756:	f85d 7b04 	ldr.w	r7, [sp], #4
    875a:	4770      	bx	lr

0000875c <_crc_sync_crc32>:

/**
 * \brief Calculate CRC value of the buffer
 */
int32_t _crc_sync_crc32(struct _crc_sync_device *const device, uint32_t *const data, const uint32_t len, uint32_t *pcrc)
{
    875c:	b580      	push	{r7, lr}
    875e:	b086      	sub	sp, #24
    8760:	af00      	add	r7, sp, #0
    8762:	60f8      	str	r0, [r7, #12]
    8764:	60b9      	str	r1, [r7, #8]
    8766:	607a      	str	r2, [r7, #4]
    8768:	603b      	str	r3, [r7, #0]
	int32_t rc = ERR_NONE;
    876a:	2300      	movs	r3, #0
    876c:	617b      	str	r3, [r7, #20]
	if (((uint32_t)data) & 0x00000003) {
    876e:	68bb      	ldr	r3, [r7, #8]
    8770:	f003 0303 	and.w	r3, r3, #3
    8774:	2b00      	cmp	r3, #0
    8776:	d002      	beq.n	877e <_crc_sync_crc32+0x22>
		/* Address must be align with 4 bytes, refer to datasheet */
		return ERR_INVALID_ARG;
    8778:	f06f 030c 	mvn.w	r3, #12
    877c:	e05e      	b.n	883c <_crc_sync_crc32+0xe0>
	}

	CRITICAL_SECTION_ENTER()
    877e:	f107 0310 	add.w	r3, r7, #16
    8782:	4618      	mov	r0, r3
    8784:	4b2f      	ldr	r3, [pc, #188]	; (8844 <_crc_sync_crc32+0xe8>)
    8786:	4798      	blx	r3
	/* Disable write-protected by PAC1->DSU before write DSU registers */
	_periph_unlock(device->hw);
    8788:	68fb      	ldr	r3, [r7, #12]
    878a:	681b      	ldr	r3, [r3, #0]
    878c:	4618      	mov	r0, r3
    878e:	4b2e      	ldr	r3, [pc, #184]	; (8848 <_crc_sync_crc32+0xec>)
    8790:	4798      	blx	r3

	hri_dsu_write_ADDR_reg(device->hw, (uint32_t)data);
    8792:	68fb      	ldr	r3, [r7, #12]
    8794:	681b      	ldr	r3, [r3, #0]
    8796:	68ba      	ldr	r2, [r7, #8]
    8798:	4611      	mov	r1, r2
    879a:	4618      	mov	r0, r3
    879c:	4b2b      	ldr	r3, [pc, #172]	; (884c <_crc_sync_crc32+0xf0>)
    879e:	4798      	blx	r3
	hri_dsu_write_LENGTH_LENGTH_bf(device->hw, len);
    87a0:	68fb      	ldr	r3, [r7, #12]
    87a2:	681b      	ldr	r3, [r3, #0]
    87a4:	6879      	ldr	r1, [r7, #4]
    87a6:	4618      	mov	r0, r3
    87a8:	4b29      	ldr	r3, [pc, #164]	; (8850 <_crc_sync_crc32+0xf4>)
    87aa:	4798      	blx	r3
	hri_dsu_write_DATA_reg(device->hw, *pcrc);
    87ac:	68fb      	ldr	r3, [r7, #12]
    87ae:	681a      	ldr	r2, [r3, #0]
    87b0:	683b      	ldr	r3, [r7, #0]
    87b2:	681b      	ldr	r3, [r3, #0]
    87b4:	4619      	mov	r1, r3
    87b6:	4610      	mov	r0, r2
    87b8:	4b26      	ldr	r3, [pc, #152]	; (8854 <_crc_sync_crc32+0xf8>)
    87ba:	4798      	blx	r3
	hri_dsu_write_CTRL_reg(device->hw, DSU_CTRL_CRC);
    87bc:	68fb      	ldr	r3, [r7, #12]
    87be:	681b      	ldr	r3, [r3, #0]
    87c0:	2104      	movs	r1, #4
    87c2:	4618      	mov	r0, r3
    87c4:	4b24      	ldr	r3, [pc, #144]	; (8858 <_crc_sync_crc32+0xfc>)
    87c6:	4798      	blx	r3

	while (hri_dsu_get_STATUSA_DONE_bit(device->hw) == 0) {
    87c8:	bf00      	nop
    87ca:	68fb      	ldr	r3, [r7, #12]
    87cc:	681b      	ldr	r3, [r3, #0]
    87ce:	4618      	mov	r0, r3
    87d0:	4b22      	ldr	r3, [pc, #136]	; (885c <_crc_sync_crc32+0x100>)
    87d2:	4798      	blx	r3
    87d4:	4603      	mov	r3, r0
    87d6:	f083 0301 	eor.w	r3, r3, #1
    87da:	b2db      	uxtb	r3, r3
    87dc:	2b00      	cmp	r3, #0
    87de:	d1f4      	bne.n	87ca <_crc_sync_crc32+0x6e>
	}

	if (hri_dsu_get_STATUSA_BERR_bit(device->hw)) {
    87e0:	68fb      	ldr	r3, [r7, #12]
    87e2:	681b      	ldr	r3, [r3, #0]
    87e4:	4618      	mov	r0, r3
    87e6:	4b1e      	ldr	r3, [pc, #120]	; (8860 <_crc_sync_crc32+0x104>)
    87e8:	4798      	blx	r3
    87ea:	4603      	mov	r3, r0
    87ec:	2b00      	cmp	r3, #0
    87ee:	d00d      	beq.n	880c <_crc_sync_crc32+0xb0>
		hri_dsu_clear_STATUSA_BERR_bit(device->hw);
    87f0:	68fb      	ldr	r3, [r7, #12]
    87f2:	681b      	ldr	r3, [r3, #0]
    87f4:	4618      	mov	r0, r3
    87f6:	4b1b      	ldr	r3, [pc, #108]	; (8864 <_crc_sync_crc32+0x108>)
    87f8:	4798      	blx	r3
		hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    87fa:	68fb      	ldr	r3, [r7, #12]
    87fc:	681b      	ldr	r3, [r3, #0]
    87fe:	4618      	mov	r0, r3
    8800:	4b19      	ldr	r3, [pc, #100]	; (8868 <_crc_sync_crc32+0x10c>)
    8802:	4798      	blx	r3
		rc = ERR_IO;
    8804:	f06f 0305 	mvn.w	r3, #5
    8808:	617b      	str	r3, [r7, #20]
    880a:	e007      	b.n	881c <_crc_sync_crc32+0xc0>
	} else {
		*pcrc = (uint32_t)hri_dsu_read_DATA_reg(device->hw);
    880c:	68fb      	ldr	r3, [r7, #12]
    880e:	681b      	ldr	r3, [r3, #0]
    8810:	4618      	mov	r0, r3
    8812:	4b16      	ldr	r3, [pc, #88]	; (886c <_crc_sync_crc32+0x110>)
    8814:	4798      	blx	r3
    8816:	4602      	mov	r2, r0
    8818:	683b      	ldr	r3, [r7, #0]
    881a:	601a      	str	r2, [r3, #0]
	}
	hri_dsu_clear_STATUSA_DONE_bit(device->hw);
    881c:	68fb      	ldr	r3, [r7, #12]
    881e:	681b      	ldr	r3, [r3, #0]
    8820:	4618      	mov	r0, r3
    8822:	4b11      	ldr	r3, [pc, #68]	; (8868 <_crc_sync_crc32+0x10c>)
    8824:	4798      	blx	r3

	/* Restore write-protected of PAC->DSU */
	_periph_lock(device->hw);
    8826:	68fb      	ldr	r3, [r7, #12]
    8828:	681b      	ldr	r3, [r3, #0]
    882a:	4618      	mov	r0, r3
    882c:	4b10      	ldr	r3, [pc, #64]	; (8870 <_crc_sync_crc32+0x114>)
    882e:	4798      	blx	r3

	CRITICAL_SECTION_LEAVE()
    8830:	f107 0310 	add.w	r3, r7, #16
    8834:	4618      	mov	r0, r3
    8836:	4b0f      	ldr	r3, [pc, #60]	; (8874 <_crc_sync_crc32+0x118>)
    8838:	4798      	blx	r3

	return rc;
    883a:	697b      	ldr	r3, [r7, #20]
}
    883c:	4618      	mov	r0, r3
    883e:	3718      	adds	r7, #24
    8840:	46bd      	mov	sp, r7
    8842:	bd80      	pop	{r7, pc}
    8844:	0001059d 	.word	0x0001059d
    8848:	00009b79 	.word	0x00009b79
    884c:	00008601 	.word	0x00008601
    8850:	0000861d 	.word	0x0000861d
    8854:	00008651 	.word	0x00008651
    8858:	0000870b 	.word	0x0000870b
    885c:	00008685 	.word	0x00008685
    8860:	000086c7 	.word	0x000086c7
    8864:	000086f1 	.word	0x000086f1
    8868:	000086ad 	.word	0x000086ad
    886c:	0000866d 	.word	0x0000866d
    8870:	00009aed 	.word	0x00009aed
    8874:	000105c3 	.word	0x000105c3

00008878 <__NVIC_EnableIRQ>:
{
    8878:	b480      	push	{r7}
    887a:	b083      	sub	sp, #12
    887c:	af00      	add	r7, sp, #0
    887e:	4603      	mov	r3, r0
    8880:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8886:	2b00      	cmp	r3, #0
    8888:	db0b      	blt.n	88a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    888a:	4909      	ldr	r1, [pc, #36]	; (88b0 <__NVIC_EnableIRQ+0x38>)
    888c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8890:	095b      	lsrs	r3, r3, #5
    8892:	88fa      	ldrh	r2, [r7, #6]
    8894:	f002 021f 	and.w	r2, r2, #31
    8898:	2001      	movs	r0, #1
    889a:	fa00 f202 	lsl.w	r2, r0, r2
    889e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    88a2:	bf00      	nop
    88a4:	370c      	adds	r7, #12
    88a6:	46bd      	mov	sp, r7
    88a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ac:	4770      	bx	lr
    88ae:	bf00      	nop
    88b0:	e000e100 	.word	0xe000e100

000088b4 <__NVIC_DisableIRQ>:
{
    88b4:	b480      	push	{r7}
    88b6:	b083      	sub	sp, #12
    88b8:	af00      	add	r7, sp, #0
    88ba:	4603      	mov	r3, r0
    88bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    88be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    88c2:	2b00      	cmp	r3, #0
    88c4:	db10      	blt.n	88e8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    88c6:	490b      	ldr	r1, [pc, #44]	; (88f4 <__NVIC_DisableIRQ+0x40>)
    88c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    88cc:	095b      	lsrs	r3, r3, #5
    88ce:	88fa      	ldrh	r2, [r7, #6]
    88d0:	f002 021f 	and.w	r2, r2, #31
    88d4:	2001      	movs	r0, #1
    88d6:	fa00 f202 	lsl.w	r2, r0, r2
    88da:	3320      	adds	r3, #32
    88dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    88e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    88e4:	f3bf 8f6f 	isb	sy
}
    88e8:	bf00      	nop
    88ea:	370c      	adds	r7, #12
    88ec:	46bd      	mov	sp, r7
    88ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    88f2:	4770      	bx	lr
    88f4:	e000e100 	.word	0xe000e100

000088f8 <__NVIC_ClearPendingIRQ>:
{
    88f8:	b480      	push	{r7}
    88fa:	b083      	sub	sp, #12
    88fc:	af00      	add	r7, sp, #0
    88fe:	4603      	mov	r3, r0
    8900:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8906:	2b00      	cmp	r3, #0
    8908:	db0c      	blt.n	8924 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    890a:	4909      	ldr	r1, [pc, #36]	; (8930 <__NVIC_ClearPendingIRQ+0x38>)
    890c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8910:	095b      	lsrs	r3, r3, #5
    8912:	88fa      	ldrh	r2, [r7, #6]
    8914:	f002 021f 	and.w	r2, r2, #31
    8918:	2001      	movs	r0, #1
    891a:	fa00 f202 	lsl.w	r2, r0, r2
    891e:	3360      	adds	r3, #96	; 0x60
    8920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8924:	bf00      	nop
    8926:	370c      	adds	r7, #12
    8928:	46bd      	mov	sp, r7
    892a:	f85d 7b04 	ldr.w	r7, [sp], #4
    892e:	4770      	bx	lr
    8930:	e000e100 	.word	0xe000e100

00008934 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    8934:	b480      	push	{r7}
    8936:	b083      	sub	sp, #12
    8938:	af00      	add	r7, sp, #0
    893a:	6078      	str	r0, [r7, #4]
    893c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    893e:	bf00      	nop
    8940:	687b      	ldr	r3, [r7, #4]
    8942:	685a      	ldr	r2, [r3, #4]
    8944:	683b      	ldr	r3, [r7, #0]
    8946:	4013      	ands	r3, r2
    8948:	2b00      	cmp	r3, #0
    894a:	d1f9      	bne.n	8940 <hri_eic_wait_for_sync+0xc>
	};
}
    894c:	bf00      	nop
    894e:	370c      	adds	r7, #12
    8950:	46bd      	mov	sp, r7
    8952:	f85d 7b04 	ldr.w	r7, [sp], #4
    8956:	4770      	bx	lr

00008958 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    8958:	b480      	push	{r7}
    895a:	b083      	sub	sp, #12
    895c:	af00      	add	r7, sp, #0
    895e:	6078      	str	r0, [r7, #4]
    8960:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    8962:	687b      	ldr	r3, [r7, #4]
    8964:	685a      	ldr	r2, [r3, #4]
    8966:	683b      	ldr	r3, [r7, #0]
    8968:	4013      	ands	r3, r2
    896a:	2b00      	cmp	r3, #0
    896c:	bf14      	ite	ne
    896e:	2301      	movne	r3, #1
    8970:	2300      	moveq	r3, #0
    8972:	b2db      	uxtb	r3, r3
}
    8974:	4618      	mov	r0, r3
    8976:	370c      	adds	r7, #12
    8978:	46bd      	mov	sp, r7
    897a:	f85d 7b04 	ldr.w	r7, [sp], #4
    897e:	4770      	bx	lr

00008980 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    8980:	b480      	push	{r7}
    8982:	b083      	sub	sp, #12
    8984:	af00      	add	r7, sp, #0
    8986:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    8988:	687b      	ldr	r3, [r7, #4]
    898a:	695b      	ldr	r3, [r3, #20]
}
    898c:	4618      	mov	r0, r3
    898e:	370c      	adds	r7, #12
    8990:	46bd      	mov	sp, r7
    8992:	f85d 7b04 	ldr.w	r7, [sp], #4
    8996:	4770      	bx	lr

00008998 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    8998:	b480      	push	{r7}
    899a:	b083      	sub	sp, #12
    899c:	af00      	add	r7, sp, #0
    899e:	6078      	str	r0, [r7, #4]
    89a0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    89a2:	687b      	ldr	r3, [r7, #4]
    89a4:	683a      	ldr	r2, [r7, #0]
    89a6:	615a      	str	r2, [r3, #20]
}
    89a8:	bf00      	nop
    89aa:	370c      	adds	r7, #12
    89ac:	46bd      	mov	sp, r7
    89ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    89b2:	4770      	bx	lr

000089b4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    89b4:	b480      	push	{r7}
    89b6:	b083      	sub	sp, #12
    89b8:	af00      	add	r7, sp, #0
    89ba:	6078      	str	r0, [r7, #4]
    89bc:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    89be:	687b      	ldr	r3, [r7, #4]
    89c0:	683a      	ldr	r2, [r7, #0]
    89c2:	611a      	str	r2, [r3, #16]
}
    89c4:	bf00      	nop
    89c6:	370c      	adds	r7, #12
    89c8:	46bd      	mov	sp, r7
    89ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    89ce:	4770      	bx	lr

000089d0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    89d0:	b480      	push	{r7}
    89d2:	b083      	sub	sp, #12
    89d4:	af00      	add	r7, sp, #0
    89d6:	6078      	str	r0, [r7, #4]
    89d8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    89da:	687b      	ldr	r3, [r7, #4]
    89dc:	683a      	ldr	r2, [r7, #0]
    89de:	60da      	str	r2, [r3, #12]
}
    89e0:	bf00      	nop
    89e2:	370c      	adds	r7, #12
    89e4:	46bd      	mov	sp, r7
    89e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    89ea:	4770      	bx	lr

000089ec <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    89ec:	b580      	push	{r7, lr}
    89ee:	b082      	sub	sp, #8
    89f0:	af00      	add	r7, sp, #0
    89f2:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    89f4:	687b      	ldr	r3, [r7, #4]
    89f6:	781b      	ldrb	r3, [r3, #0]
    89f8:	b2db      	uxtb	r3, r3
    89fa:	f043 0302 	orr.w	r3, r3, #2
    89fe:	b2da      	uxtb	r2, r3
    8a00:	687b      	ldr	r3, [r7, #4]
    8a02:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    8a04:	2103      	movs	r1, #3
    8a06:	6878      	ldr	r0, [r7, #4]
    8a08:	4b02      	ldr	r3, [pc, #8]	; (8a14 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    8a0a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8a0c:	bf00      	nop
    8a0e:	3708      	adds	r7, #8
    8a10:	46bd      	mov	sp, r7
    8a12:	bd80      	pop	{r7, pc}
    8a14:	00008935 	.word	0x00008935

00008a18 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8a18:	b580      	push	{r7, lr}
    8a1a:	b082      	sub	sp, #8
    8a1c:	af00      	add	r7, sp, #0
    8a1e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    8a20:	687b      	ldr	r3, [r7, #4]
    8a22:	781b      	ldrb	r3, [r3, #0]
    8a24:	b2db      	uxtb	r3, r3
    8a26:	f023 0302 	bic.w	r3, r3, #2
    8a2a:	b2da      	uxtb	r2, r3
    8a2c:	687b      	ldr	r3, [r7, #4]
    8a2e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    8a30:	2103      	movs	r1, #3
    8a32:	6878      	ldr	r0, [r7, #4]
    8a34:	4b02      	ldr	r3, [pc, #8]	; (8a40 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    8a36:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8a38:	bf00      	nop
    8a3a:	3708      	adds	r7, #8
    8a3c:	46bd      	mov	sp, r7
    8a3e:	bd80      	pop	{r7, pc}
    8a40:	00008935 	.word	0x00008935

00008a44 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    8a44:	b580      	push	{r7, lr}
    8a46:	b084      	sub	sp, #16
    8a48:	af00      	add	r7, sp, #0
    8a4a:	6078      	str	r0, [r7, #4]
    8a4c:	460b      	mov	r3, r1
    8a4e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    8a50:	687b      	ldr	r3, [r7, #4]
    8a52:	781b      	ldrb	r3, [r3, #0]
    8a54:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    8a56:	7bfb      	ldrb	r3, [r7, #15]
    8a58:	f023 0310 	bic.w	r3, r3, #16
    8a5c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    8a5e:	78fb      	ldrb	r3, [r7, #3]
    8a60:	011b      	lsls	r3, r3, #4
    8a62:	b25a      	sxtb	r2, r3
    8a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8a68:	4313      	orrs	r3, r2
    8a6a:	b25b      	sxtb	r3, r3
    8a6c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    8a6e:	687b      	ldr	r3, [r7, #4]
    8a70:	7bfa      	ldrb	r2, [r7, #15]
    8a72:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8a74:	2103      	movs	r1, #3
    8a76:	6878      	ldr	r0, [r7, #4]
    8a78:	4b02      	ldr	r3, [pc, #8]	; (8a84 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    8a7a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8a7c:	bf00      	nop
    8a7e:	3710      	adds	r7, #16
    8a80:	46bd      	mov	sp, r7
    8a82:	bd80      	pop	{r7, pc}
    8a84:	00008935 	.word	0x00008935

00008a88 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    8a88:	b580      	push	{r7, lr}
    8a8a:	b084      	sub	sp, #16
    8a8c:	af00      	add	r7, sp, #0
    8a8e:	6078      	str	r0, [r7, #4]
    8a90:	460b      	mov	r3, r1
    8a92:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8a94:	2103      	movs	r1, #3
    8a96:	6878      	ldr	r0, [r7, #4]
    8a98:	4b06      	ldr	r3, [pc, #24]	; (8ab4 <hri_eic_get_CTRLA_reg+0x2c>)
    8a9a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    8a9c:	687b      	ldr	r3, [r7, #4]
    8a9e:	781b      	ldrb	r3, [r3, #0]
    8aa0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8aa2:	7bfa      	ldrb	r2, [r7, #15]
    8aa4:	78fb      	ldrb	r3, [r7, #3]
    8aa6:	4013      	ands	r3, r2
    8aa8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8aaa:	7bfb      	ldrb	r3, [r7, #15]
}
    8aac:	4618      	mov	r0, r3
    8aae:	3710      	adds	r7, #16
    8ab0:	46bd      	mov	sp, r7
    8ab2:	bd80      	pop	{r7, pc}
    8ab4:	00008935 	.word	0x00008935

00008ab8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    8ab8:	b580      	push	{r7, lr}
    8aba:	b082      	sub	sp, #8
    8abc:	af00      	add	r7, sp, #0
    8abe:	6078      	str	r0, [r7, #4]
    8ac0:	460b      	mov	r3, r1
    8ac2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    8ac4:	687b      	ldr	r3, [r7, #4]
    8ac6:	78fa      	ldrb	r2, [r7, #3]
    8ac8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    8aca:	2103      	movs	r1, #3
    8acc:	6878      	ldr	r0, [r7, #4]
    8ace:	4b03      	ldr	r3, [pc, #12]	; (8adc <hri_eic_write_CTRLA_reg+0x24>)
    8ad0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    8ad2:	bf00      	nop
    8ad4:	3708      	adds	r7, #8
    8ad6:	46bd      	mov	sp, r7
    8ad8:	bd80      	pop	{r7, pc}
    8ada:	bf00      	nop
    8adc:	00008935 	.word	0x00008935

00008ae0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    8ae0:	b480      	push	{r7}
    8ae2:	b083      	sub	sp, #12
    8ae4:	af00      	add	r7, sp, #0
    8ae6:	6078      	str	r0, [r7, #4]
    8ae8:	460b      	mov	r3, r1
    8aea:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    8aec:	687b      	ldr	r3, [r7, #4]
    8aee:	78fa      	ldrb	r2, [r7, #3]
    8af0:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8af2:	bf00      	nop
    8af4:	370c      	adds	r7, #12
    8af6:	46bd      	mov	sp, r7
    8af8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8afc:	4770      	bx	lr

00008afe <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    8afe:	b480      	push	{r7}
    8b00:	b083      	sub	sp, #12
    8b02:	af00      	add	r7, sp, #0
    8b04:	6078      	str	r0, [r7, #4]
    8b06:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    8b08:	687b      	ldr	r3, [r7, #4]
    8b0a:	683a      	ldr	r2, [r7, #0]
    8b0c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8b0e:	bf00      	nop
    8b10:	370c      	adds	r7, #12
    8b12:	46bd      	mov	sp, r7
    8b14:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b18:	4770      	bx	lr

00008b1a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    8b1a:	b480      	push	{r7}
    8b1c:	b083      	sub	sp, #12
    8b1e:	af00      	add	r7, sp, #0
    8b20:	6078      	str	r0, [r7, #4]
    8b22:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    8b24:	687b      	ldr	r3, [r7, #4]
    8b26:	683a      	ldr	r2, [r7, #0]
    8b28:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8b2a:	bf00      	nop
    8b2c:	370c      	adds	r7, #12
    8b2e:	46bd      	mov	sp, r7
    8b30:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b34:	4770      	bx	lr

00008b36 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    8b36:	b480      	push	{r7}
    8b38:	b085      	sub	sp, #20
    8b3a:	af00      	add	r7, sp, #0
    8b3c:	60f8      	str	r0, [r7, #12]
    8b3e:	460b      	mov	r3, r1
    8b40:	607a      	str	r2, [r7, #4]
    8b42:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    8b44:	7afb      	ldrb	r3, [r7, #11]
    8b46:	68fa      	ldr	r2, [r7, #12]
    8b48:	3306      	adds	r3, #6
    8b4a:	009b      	lsls	r3, r3, #2
    8b4c:	4413      	add	r3, r2
    8b4e:	687a      	ldr	r2, [r7, #4]
    8b50:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    8b52:	bf00      	nop
    8b54:	3714      	adds	r7, #20
    8b56:	46bd      	mov	sp, r7
    8b58:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b5c:	4770      	bx	lr

00008b5e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    8b5e:	b480      	push	{r7}
    8b60:	b083      	sub	sp, #12
    8b62:	af00      	add	r7, sp, #0
    8b64:	6078      	str	r0, [r7, #4]
    8b66:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    8b68:	687b      	ldr	r3, [r7, #4]
    8b6a:	683a      	ldr	r2, [r7, #0]
    8b6c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    8b6e:	bf00      	nop
    8b70:	370c      	adds	r7, #12
    8b72:	46bd      	mov	sp, r7
    8b74:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b78:	4770      	bx	lr

00008b7a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    8b7a:	b480      	push	{r7}
    8b7c:	b083      	sub	sp, #12
    8b7e:	af00      	add	r7, sp, #0
    8b80:	6078      	str	r0, [r7, #4]
    8b82:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    8b84:	687b      	ldr	r3, [r7, #4]
    8b86:	683a      	ldr	r2, [r7, #0]
    8b88:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    8b8a:	bf00      	nop
    8b8c:	370c      	adds	r7, #12
    8b8e:	46bd      	mov	sp, r7
    8b90:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b94:	4770      	bx	lr
	...

00008b98 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    8b98:	b580      	push	{r7, lr}
    8b9a:	b082      	sub	sp, #8
    8b9c:	af00      	add	r7, sp, #0
    8b9e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    8ba0:	2101      	movs	r1, #1
    8ba2:	4846      	ldr	r0, [pc, #280]	; (8cbc <_ext_irq_init+0x124>)
    8ba4:	4b46      	ldr	r3, [pc, #280]	; (8cc0 <_ext_irq_init+0x128>)
    8ba6:	4798      	blx	r3
    8ba8:	4603      	mov	r3, r0
    8baa:	f083 0301 	eor.w	r3, r3, #1
    8bae:	b2db      	uxtb	r3, r3
    8bb0:	2b00      	cmp	r3, #0
    8bb2:	d011      	beq.n	8bd8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    8bb4:	2102      	movs	r1, #2
    8bb6:	4841      	ldr	r0, [pc, #260]	; (8cbc <_ext_irq_init+0x124>)
    8bb8:	4b42      	ldr	r3, [pc, #264]	; (8cc4 <_ext_irq_init+0x12c>)
    8bba:	4798      	blx	r3
    8bbc:	4603      	mov	r3, r0
    8bbe:	2b00      	cmp	r3, #0
    8bc0:	d006      	beq.n	8bd0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    8bc2:	483e      	ldr	r0, [pc, #248]	; (8cbc <_ext_irq_init+0x124>)
    8bc4:	4b40      	ldr	r3, [pc, #256]	; (8cc8 <_ext_irq_init+0x130>)
    8bc6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    8bc8:	2102      	movs	r1, #2
    8bca:	483c      	ldr	r0, [pc, #240]	; (8cbc <_ext_irq_init+0x124>)
    8bcc:	4b3f      	ldr	r3, [pc, #252]	; (8ccc <_ext_irq_init+0x134>)
    8bce:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    8bd0:	2101      	movs	r1, #1
    8bd2:	483a      	ldr	r0, [pc, #232]	; (8cbc <_ext_irq_init+0x124>)
    8bd4:	4b3e      	ldr	r3, [pc, #248]	; (8cd0 <_ext_irq_init+0x138>)
    8bd6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    8bd8:	2101      	movs	r1, #1
    8bda:	4838      	ldr	r0, [pc, #224]	; (8cbc <_ext_irq_init+0x124>)
    8bdc:	4b3b      	ldr	r3, [pc, #236]	; (8ccc <_ext_irq_init+0x134>)
    8bde:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    8be0:	2100      	movs	r1, #0
    8be2:	4836      	ldr	r0, [pc, #216]	; (8cbc <_ext_irq_init+0x124>)
    8be4:	4b3b      	ldr	r3, [pc, #236]	; (8cd4 <_ext_irq_init+0x13c>)
    8be6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    8be8:	2100      	movs	r1, #0
    8bea:	4834      	ldr	r0, [pc, #208]	; (8cbc <_ext_irq_init+0x124>)
    8bec:	4b3a      	ldr	r3, [pc, #232]	; (8cd8 <_ext_irq_init+0x140>)
    8bee:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    8bf0:	2100      	movs	r1, #0
    8bf2:	4832      	ldr	r0, [pc, #200]	; (8cbc <_ext_irq_init+0x124>)
    8bf4:	4b39      	ldr	r3, [pc, #228]	; (8cdc <_ext_irq_init+0x144>)
    8bf6:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    8bf8:	f240 31b1 	movw	r1, #945	; 0x3b1
    8bfc:	482f      	ldr	r0, [pc, #188]	; (8cbc <_ext_irq_init+0x124>)
    8bfe:	4b38      	ldr	r3, [pc, #224]	; (8ce0 <_ext_irq_init+0x148>)
    8c00:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    8c02:	f240 3131 	movw	r1, #817	; 0x331
    8c06:	482d      	ldr	r0, [pc, #180]	; (8cbc <_ext_irq_init+0x124>)
    8c08:	4b36      	ldr	r3, [pc, #216]	; (8ce4 <_ext_irq_init+0x14c>)
    8c0a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    8c0c:	2100      	movs	r1, #0
    8c0e:	482b      	ldr	r0, [pc, #172]	; (8cbc <_ext_irq_init+0x124>)
    8c10:	4b35      	ldr	r3, [pc, #212]	; (8ce8 <_ext_irq_init+0x150>)
    8c12:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    8c14:	4a35      	ldr	r2, [pc, #212]	; (8cec <_ext_irq_init+0x154>)
    8c16:	2100      	movs	r1, #0
    8c18:	4828      	ldr	r0, [pc, #160]	; (8cbc <_ext_irq_init+0x124>)
    8c1a:	4b35      	ldr	r3, [pc, #212]	; (8cf0 <_ext_irq_init+0x158>)
    8c1c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    8c1e:	2211      	movs	r2, #17
    8c20:	2101      	movs	r1, #1
    8c22:	4826      	ldr	r0, [pc, #152]	; (8cbc <_ext_irq_init+0x124>)
    8c24:	4b32      	ldr	r3, [pc, #200]	; (8cf0 <_ext_irq_init+0x158>)
    8c26:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    8c28:	4824      	ldr	r0, [pc, #144]	; (8cbc <_ext_irq_init+0x124>)
    8c2a:	4b32      	ldr	r3, [pc, #200]	; (8cf4 <_ext_irq_init+0x15c>)
    8c2c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    8c2e:	200c      	movs	r0, #12
    8c30:	4b31      	ldr	r3, [pc, #196]	; (8cf8 <_ext_irq_init+0x160>)
    8c32:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    8c34:	200c      	movs	r0, #12
    8c36:	4b31      	ldr	r3, [pc, #196]	; (8cfc <_ext_irq_init+0x164>)
    8c38:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    8c3a:	200c      	movs	r0, #12
    8c3c:	4b30      	ldr	r3, [pc, #192]	; (8d00 <_ext_irq_init+0x168>)
    8c3e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    8c40:	2010      	movs	r0, #16
    8c42:	4b2d      	ldr	r3, [pc, #180]	; (8cf8 <_ext_irq_init+0x160>)
    8c44:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    8c46:	2010      	movs	r0, #16
    8c48:	4b2c      	ldr	r3, [pc, #176]	; (8cfc <_ext_irq_init+0x164>)
    8c4a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    8c4c:	2010      	movs	r0, #16
    8c4e:	4b2c      	ldr	r3, [pc, #176]	; (8d00 <_ext_irq_init+0x168>)
    8c50:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    8c52:	2011      	movs	r0, #17
    8c54:	4b28      	ldr	r3, [pc, #160]	; (8cf8 <_ext_irq_init+0x160>)
    8c56:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    8c58:	2011      	movs	r0, #17
    8c5a:	4b28      	ldr	r3, [pc, #160]	; (8cfc <_ext_irq_init+0x164>)
    8c5c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    8c5e:	2011      	movs	r0, #17
    8c60:	4b27      	ldr	r3, [pc, #156]	; (8d00 <_ext_irq_init+0x168>)
    8c62:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    8c64:	2012      	movs	r0, #18
    8c66:	4b24      	ldr	r3, [pc, #144]	; (8cf8 <_ext_irq_init+0x160>)
    8c68:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    8c6a:	2012      	movs	r0, #18
    8c6c:	4b23      	ldr	r3, [pc, #140]	; (8cfc <_ext_irq_init+0x164>)
    8c6e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    8c70:	2012      	movs	r0, #18
    8c72:	4b23      	ldr	r3, [pc, #140]	; (8d00 <_ext_irq_init+0x168>)
    8c74:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    8c76:	2013      	movs	r0, #19
    8c78:	4b1f      	ldr	r3, [pc, #124]	; (8cf8 <_ext_irq_init+0x160>)
    8c7a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    8c7c:	2013      	movs	r0, #19
    8c7e:	4b1f      	ldr	r3, [pc, #124]	; (8cfc <_ext_irq_init+0x164>)
    8c80:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    8c82:	2013      	movs	r0, #19
    8c84:	4b1e      	ldr	r3, [pc, #120]	; (8d00 <_ext_irq_init+0x168>)
    8c86:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    8c88:	2014      	movs	r0, #20
    8c8a:	4b1b      	ldr	r3, [pc, #108]	; (8cf8 <_ext_irq_init+0x160>)
    8c8c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    8c8e:	2014      	movs	r0, #20
    8c90:	4b1a      	ldr	r3, [pc, #104]	; (8cfc <_ext_irq_init+0x164>)
    8c92:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    8c94:	2014      	movs	r0, #20
    8c96:	4b1a      	ldr	r3, [pc, #104]	; (8d00 <_ext_irq_init+0x168>)
    8c98:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    8c9a:	2015      	movs	r0, #21
    8c9c:	4b16      	ldr	r3, [pc, #88]	; (8cf8 <_ext_irq_init+0x160>)
    8c9e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    8ca0:	2015      	movs	r0, #21
    8ca2:	4b16      	ldr	r3, [pc, #88]	; (8cfc <_ext_irq_init+0x164>)
    8ca4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    8ca6:	2015      	movs	r0, #21
    8ca8:	4b15      	ldr	r3, [pc, #84]	; (8d00 <_ext_irq_init+0x168>)
    8caa:	4798      	blx	r3

	callback = cb;
    8cac:	4a15      	ldr	r2, [pc, #84]	; (8d04 <_ext_irq_init+0x16c>)
    8cae:	687b      	ldr	r3, [r7, #4]
    8cb0:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    8cb2:	2300      	movs	r3, #0
}
    8cb4:	4618      	mov	r0, r3
    8cb6:	3708      	adds	r7, #8
    8cb8:	46bd      	mov	sp, r7
    8cba:	bd80      	pop	{r7, pc}
    8cbc:	40002800 	.word	0x40002800
    8cc0:	00008959 	.word	0x00008959
    8cc4:	00008a89 	.word	0x00008a89
    8cc8:	00008a19 	.word	0x00008a19
    8ccc:	00008935 	.word	0x00008935
    8cd0:	00008ab9 	.word	0x00008ab9
    8cd4:	00008a45 	.word	0x00008a45
    8cd8:	00008ae1 	.word	0x00008ae1
    8cdc:	00008aff 	.word	0x00008aff
    8ce0:	00008b1b 	.word	0x00008b1b
    8ce4:	00008b5f 	.word	0x00008b5f
    8ce8:	00008b7b 	.word	0x00008b7b
    8cec:	90990003 	.word	0x90990003
    8cf0:	00008b37 	.word	0x00008b37
    8cf4:	000089ed 	.word	0x000089ed
    8cf8:	000088b5 	.word	0x000088b5
    8cfc:	000088f9 	.word	0x000088f9
    8d00:	00008879 	.word	0x00008879
    8d04:	2000886c 	.word	0x2000886c

00008d08 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    8d08:	b580      	push	{r7, lr}
    8d0a:	b084      	sub	sp, #16
    8d0c:	af00      	add	r7, sp, #0
    8d0e:	6078      	str	r0, [r7, #4]
    8d10:	460b      	mov	r3, r1
    8d12:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    8d14:	23ff      	movs	r3, #255	; 0xff
    8d16:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    8d18:	2300      	movs	r3, #0
    8d1a:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    8d1c:	e010      	b.n	8d40 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    8d1e:	7bbb      	ldrb	r3, [r7, #14]
    8d20:	4a1c      	ldr	r2, [pc, #112]	; (8d94 <_ext_irq_enable+0x8c>)
    8d22:	00db      	lsls	r3, r3, #3
    8d24:	4413      	add	r3, r2
    8d26:	685a      	ldr	r2, [r3, #4]
    8d28:	687b      	ldr	r3, [r7, #4]
    8d2a:	429a      	cmp	r2, r3
    8d2c:	d105      	bne.n	8d3a <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    8d2e:	7bbb      	ldrb	r3, [r7, #14]
    8d30:	4a18      	ldr	r2, [pc, #96]	; (8d94 <_ext_irq_enable+0x8c>)
    8d32:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    8d36:	73fb      	strb	r3, [r7, #15]
			break;
    8d38:	e005      	b.n	8d46 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    8d3a:	7bbb      	ldrb	r3, [r7, #14]
    8d3c:	3301      	adds	r3, #1
    8d3e:	73bb      	strb	r3, [r7, #14]
    8d40:	7bbb      	ldrb	r3, [r7, #14]
    8d42:	2b06      	cmp	r3, #6
    8d44:	d9eb      	bls.n	8d1e <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    8d46:	7bfb      	ldrb	r3, [r7, #15]
    8d48:	2bff      	cmp	r3, #255	; 0xff
    8d4a:	d102      	bne.n	8d52 <_ext_irq_enable+0x4a>
		return -1;
    8d4c:	f04f 33ff 	mov.w	r3, #4294967295
    8d50:	e01c      	b.n	8d8c <_ext_irq_enable+0x84>
	}

	if (enable) {
    8d52:	78fb      	ldrb	r3, [r7, #3]
    8d54:	2b00      	cmp	r3, #0
    8d56:	d008      	beq.n	8d6a <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    8d58:	7bfb      	ldrb	r3, [r7, #15]
    8d5a:	2201      	movs	r2, #1
    8d5c:	fa02 f303 	lsl.w	r3, r2, r3
    8d60:	4619      	mov	r1, r3
    8d62:	480d      	ldr	r0, [pc, #52]	; (8d98 <_ext_irq_enable+0x90>)
    8d64:	4b0d      	ldr	r3, [pc, #52]	; (8d9c <_ext_irq_enable+0x94>)
    8d66:	4798      	blx	r3
    8d68:	e00f      	b.n	8d8a <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    8d6a:	7bfb      	ldrb	r3, [r7, #15]
    8d6c:	2201      	movs	r2, #1
    8d6e:	fa02 f303 	lsl.w	r3, r2, r3
    8d72:	4619      	mov	r1, r3
    8d74:	4808      	ldr	r0, [pc, #32]	; (8d98 <_ext_irq_enable+0x90>)
    8d76:	4b0a      	ldr	r3, [pc, #40]	; (8da0 <_ext_irq_enable+0x98>)
    8d78:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    8d7a:	7bfb      	ldrb	r3, [r7, #15]
    8d7c:	2201      	movs	r2, #1
    8d7e:	fa02 f303 	lsl.w	r3, r2, r3
    8d82:	4619      	mov	r1, r3
    8d84:	4804      	ldr	r0, [pc, #16]	; (8d98 <_ext_irq_enable+0x90>)
    8d86:	4b07      	ldr	r3, [pc, #28]	; (8da4 <_ext_irq_enable+0x9c>)
    8d88:	4798      	blx	r3
	}

	return ERR_NONE;
    8d8a:	2300      	movs	r3, #0
}
    8d8c:	4618      	mov	r0, r3
    8d8e:	3710      	adds	r7, #16
    8d90:	46bd      	mov	sp, r7
    8d92:	bd80      	pop	{r7, pc}
    8d94:	0001f9ac 	.word	0x0001f9ac
    8d98:	40002800 	.word	0x40002800
    8d9c:	000089b5 	.word	0x000089b5
    8da0:	000089d1 	.word	0x000089d1
    8da4:	00008999 	.word	0x00008999

00008da8 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    8da8:	b580      	push	{r7, lr}
    8daa:	b084      	sub	sp, #16
    8dac:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    8dae:	4841      	ldr	r0, [pc, #260]	; (8eb4 <_ext_irq_handler+0x10c>)
    8db0:	4b41      	ldr	r3, [pc, #260]	; (8eb8 <_ext_irq_handler+0x110>)
    8db2:	4798      	blx	r3
    8db4:	4603      	mov	r3, r0
    8db6:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    8db8:	f04f 33ff 	mov.w	r3, #4294967295
    8dbc:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    8dbe:	683b      	ldr	r3, [r7, #0]
    8dc0:	4619      	mov	r1, r3
    8dc2:	483c      	ldr	r0, [pc, #240]	; (8eb4 <_ext_irq_handler+0x10c>)
    8dc4:	4b3d      	ldr	r3, [pc, #244]	; (8ebc <_ext_irq_handler+0x114>)
    8dc6:	4798      	blx	r3

	ASSERT(callback);
    8dc8:	4b3d      	ldr	r3, [pc, #244]	; (8ec0 <_ext_irq_handler+0x118>)
    8dca:	681b      	ldr	r3, [r3, #0]
    8dcc:	2b00      	cmp	r3, #0
    8dce:	bf14      	ite	ne
    8dd0:	2301      	movne	r3, #1
    8dd2:	2300      	moveq	r3, #0
    8dd4:	b2db      	uxtb	r3, r3
    8dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
    8dda:	493a      	ldr	r1, [pc, #232]	; (8ec4 <_ext_irq_handler+0x11c>)
    8ddc:	4618      	mov	r0, r3
    8dde:	4b3a      	ldr	r3, [pc, #232]	; (8ec8 <_ext_irq_handler+0x120>)
    8de0:	4798      	blx	r3

	while (flags) {
    8de2:	e060      	b.n	8ea6 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    8de4:	683b      	ldr	r3, [r7, #0]
    8de6:	4618      	mov	r0, r3
    8de8:	4b38      	ldr	r3, [pc, #224]	; (8ecc <_ext_irq_handler+0x124>)
    8dea:	4798      	blx	r3
    8dec:	4603      	mov	r3, r0
    8dee:	b2db      	uxtb	r3, r3
    8df0:	3b01      	subs	r3, #1
    8df2:	b2db      	uxtb	r3, r3
    8df4:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    8df6:	e047      	b.n	8e88 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    8df8:	2300      	movs	r3, #0
    8dfa:	71fb      	strb	r3, [r7, #7]
    8dfc:	2307      	movs	r3, #7
    8dfe:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    8e00:	e024      	b.n	8e4c <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    8e02:	79ba      	ldrb	r2, [r7, #6]
    8e04:	79fb      	ldrb	r3, [r7, #7]
    8e06:	4413      	add	r3, r2
    8e08:	105b      	asrs	r3, r3, #1
    8e0a:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    8e0c:	797b      	ldrb	r3, [r7, #5]
    8e0e:	4a30      	ldr	r2, [pc, #192]	; (8ed0 <_ext_irq_handler+0x128>)
    8e10:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    8e14:	461a      	mov	r2, r3
    8e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8e1a:	429a      	cmp	r2, r3
    8e1c:	d106      	bne.n	8e2c <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    8e1e:	797b      	ldrb	r3, [r7, #5]
    8e20:	4a2b      	ldr	r2, [pc, #172]	; (8ed0 <_ext_irq_handler+0x128>)
    8e22:	00db      	lsls	r3, r3, #3
    8e24:	4413      	add	r3, r2
    8e26:	685b      	ldr	r3, [r3, #4]
    8e28:	60bb      	str	r3, [r7, #8]
					break;
    8e2a:	e013      	b.n	8e54 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    8e2c:	797b      	ldrb	r3, [r7, #5]
    8e2e:	4a28      	ldr	r2, [pc, #160]	; (8ed0 <_ext_irq_handler+0x128>)
    8e30:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    8e34:	461a      	mov	r2, r3
    8e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8e3a:	429a      	cmp	r2, r3
    8e3c:	da03      	bge.n	8e46 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    8e3e:	797b      	ldrb	r3, [r7, #5]
    8e40:	3301      	adds	r3, #1
    8e42:	71fb      	strb	r3, [r7, #7]
    8e44:	e002      	b.n	8e4c <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    8e46:	797b      	ldrb	r3, [r7, #5]
    8e48:	3b01      	subs	r3, #1
    8e4a:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    8e4c:	79ba      	ldrb	r2, [r7, #6]
    8e4e:	79fb      	ldrb	r3, [r7, #7]
    8e50:	429a      	cmp	r2, r3
    8e52:	d2d6      	bcs.n	8e02 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    8e54:	68bb      	ldr	r3, [r7, #8]
    8e56:	f1b3 3fff 	cmp.w	r3, #4294967295
    8e5a:	d003      	beq.n	8e64 <_ext_irq_handler+0xbc>
				callback(pin);
    8e5c:	4b18      	ldr	r3, [pc, #96]	; (8ec0 <_ext_irq_handler+0x118>)
    8e5e:	681b      	ldr	r3, [r3, #0]
    8e60:	68b8      	ldr	r0, [r7, #8]
    8e62:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    8e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8e68:	2201      	movs	r2, #1
    8e6a:	fa02 f303 	lsl.w	r3, r2, r3
    8e6e:	43da      	mvns	r2, r3
    8e70:	683b      	ldr	r3, [r7, #0]
    8e72:	4013      	ands	r3, r2
    8e74:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    8e76:	683b      	ldr	r3, [r7, #0]
    8e78:	4618      	mov	r0, r3
    8e7a:	4b14      	ldr	r3, [pc, #80]	; (8ecc <_ext_irq_handler+0x124>)
    8e7c:	4798      	blx	r3
    8e7e:	4603      	mov	r3, r0
    8e80:	b2db      	uxtb	r3, r3
    8e82:	3b01      	subs	r3, #1
    8e84:	b2db      	uxtb	r3, r3
    8e86:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    8e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
    8e90:	d1b2      	bne.n	8df8 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    8e92:	4808      	ldr	r0, [pc, #32]	; (8eb4 <_ext_irq_handler+0x10c>)
    8e94:	4b08      	ldr	r3, [pc, #32]	; (8eb8 <_ext_irq_handler+0x110>)
    8e96:	4798      	blx	r3
    8e98:	4603      	mov	r3, r0
    8e9a:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    8e9c:	683b      	ldr	r3, [r7, #0]
    8e9e:	4619      	mov	r1, r3
    8ea0:	4804      	ldr	r0, [pc, #16]	; (8eb4 <_ext_irq_handler+0x10c>)
    8ea2:	4b06      	ldr	r3, [pc, #24]	; (8ebc <_ext_irq_handler+0x114>)
    8ea4:	4798      	blx	r3
	while (flags) {
    8ea6:	683b      	ldr	r3, [r7, #0]
    8ea8:	2b00      	cmp	r3, #0
    8eaa:	d19b      	bne.n	8de4 <_ext_irq_handler+0x3c>
	}
}
    8eac:	bf00      	nop
    8eae:	3710      	adds	r7, #16
    8eb0:	46bd      	mov	sp, r7
    8eb2:	bd80      	pop	{r7, pc}
    8eb4:	40002800 	.word	0x40002800
    8eb8:	00008981 	.word	0x00008981
    8ebc:	00008999 	.word	0x00008999
    8ec0:	2000886c 	.word	0x2000886c
    8ec4:	0001f9e4 	.word	0x0001f9e4
    8ec8:	0000799d 	.word	0x0000799d
    8ecc:	0001b0a9 	.word	0x0001b0a9
    8ed0:	0001f9ac 	.word	0x0001f9ac

00008ed4 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    8ed4:	b580      	push	{r7, lr}
    8ed6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8ed8:	4b01      	ldr	r3, [pc, #4]	; (8ee0 <EIC_0_Handler+0xc>)
    8eda:	4798      	blx	r3
} /**
    8edc:	bf00      	nop
    8ede:	bd80      	pop	{r7, pc}
    8ee0:	00008da9 	.word	0x00008da9

00008ee4 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    8ee4:	b580      	push	{r7, lr}
    8ee6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8ee8:	4b01      	ldr	r3, [pc, #4]	; (8ef0 <EIC_4_Handler+0xc>)
    8eea:	4798      	blx	r3
} /**
    8eec:	bf00      	nop
    8eee:	bd80      	pop	{r7, pc}
    8ef0:	00008da9 	.word	0x00008da9

00008ef4 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    8ef4:	b580      	push	{r7, lr}
    8ef6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8ef8:	4b01      	ldr	r3, [pc, #4]	; (8f00 <EIC_5_Handler+0xc>)
    8efa:	4798      	blx	r3
} /**
    8efc:	bf00      	nop
    8efe:	bd80      	pop	{r7, pc}
    8f00:	00008da9 	.word	0x00008da9

00008f04 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    8f04:	b580      	push	{r7, lr}
    8f06:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8f08:	4b01      	ldr	r3, [pc, #4]	; (8f10 <EIC_6_Handler+0xc>)
    8f0a:	4798      	blx	r3
} /**
    8f0c:	bf00      	nop
    8f0e:	bd80      	pop	{r7, pc}
    8f10:	00008da9 	.word	0x00008da9

00008f14 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    8f14:	b580      	push	{r7, lr}
    8f16:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8f18:	4b01      	ldr	r3, [pc, #4]	; (8f20 <EIC_7_Handler+0xc>)
    8f1a:	4798      	blx	r3
} /**
    8f1c:	bf00      	nop
    8f1e:	bd80      	pop	{r7, pc}
    8f20:	00008da9 	.word	0x00008da9

00008f24 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    8f24:	b580      	push	{r7, lr}
    8f26:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8f28:	4b01      	ldr	r3, [pc, #4]	; (8f30 <EIC_8_Handler+0xc>)
    8f2a:	4798      	blx	r3
} /**
    8f2c:	bf00      	nop
    8f2e:	bd80      	pop	{r7, pc}
    8f30:	00008da9 	.word	0x00008da9

00008f34 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    8f34:	b580      	push	{r7, lr}
    8f36:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    8f38:	4b01      	ldr	r3, [pc, #4]	; (8f40 <EIC_9_Handler+0xc>)
    8f3a:	4798      	blx	r3
}
    8f3c:	bf00      	nop
    8f3e:	bd80      	pop	{r7, pc}
    8f40:	00008da9 	.word	0x00008da9

00008f44 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    8f44:	b480      	push	{r7}
    8f46:	b085      	sub	sp, #20
    8f48:	af00      	add	r7, sp, #0
    8f4a:	60f8      	str	r0, [r7, #12]
    8f4c:	460b      	mov	r3, r1
    8f4e:	607a      	str	r2, [r7, #4]
    8f50:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    8f52:	7afa      	ldrb	r2, [r7, #11]
    8f54:	68fb      	ldr	r3, [r7, #12]
    8f56:	3248      	adds	r2, #72	; 0x48
    8f58:	6879      	ldr	r1, [r7, #4]
    8f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    8f5e:	bf00      	nop
    8f60:	3714      	adds	r7, #20
    8f62:	46bd      	mov	sp, r7
    8f64:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f68:	4770      	bx	lr

00008f6a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    8f6a:	b480      	push	{r7}
    8f6c:	b083      	sub	sp, #12
    8f6e:	af00      	add	r7, sp, #0
    8f70:	6078      	str	r0, [r7, #4]
    8f72:	460b      	mov	r3, r1
    8f74:	70fb      	strb	r3, [r7, #3]
    8f76:	4613      	mov	r3, r2
    8f78:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    8f7a:	78fb      	ldrb	r3, [r7, #3]
    8f7c:	687a      	ldr	r2, [r7, #4]
    8f7e:	3304      	adds	r3, #4
    8f80:	00db      	lsls	r3, r3, #3
    8f82:	4413      	add	r3, r2
    8f84:	78ba      	ldrb	r2, [r7, #2]
    8f86:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    8f88:	78fb      	ldrb	r3, [r7, #3]
    8f8a:	78ba      	ldrb	r2, [r7, #2]
    8f8c:	43d2      	mvns	r2, r2
    8f8e:	b2d1      	uxtb	r1, r2
    8f90:	687a      	ldr	r2, [r7, #4]
    8f92:	3304      	adds	r3, #4
    8f94:	00db      	lsls	r3, r3, #3
    8f96:	4413      	add	r3, r2
    8f98:	460a      	mov	r2, r1
    8f9a:	711a      	strb	r2, [r3, #4]
}
    8f9c:	bf00      	nop
    8f9e:	370c      	adds	r7, #12
    8fa0:	46bd      	mov	sp, r7
    8fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fa6:	4770      	bx	lr

00008fa8 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    8fa8:	b480      	push	{r7}
    8faa:	b085      	sub	sp, #20
    8fac:	af00      	add	r7, sp, #0
    8fae:	60f8      	str	r0, [r7, #12]
    8fb0:	460b      	mov	r3, r1
    8fb2:	607a      	str	r2, [r7, #4]
    8fb4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    8fb6:	7afa      	ldrb	r2, [r7, #11]
    8fb8:	68fb      	ldr	r3, [r7, #12]
    8fba:	3204      	adds	r2, #4
    8fbc:	6879      	ldr	r1, [r7, #4]
    8fbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    8fc2:	bf00      	nop
    8fc4:	3714      	adds	r7, #20
    8fc6:	46bd      	mov	sp, r7
    8fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fcc:	4770      	bx	lr
	...

00008fd0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    8fd0:	b580      	push	{r7, lr}
    8fd2:	b082      	sub	sp, #8
    8fd4:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    8fd6:	2300      	movs	r3, #0
    8fd8:	71fb      	strb	r3, [r7, #7]
    8fda:	e00b      	b.n	8ff4 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    8fdc:	79fb      	ldrb	r3, [r7, #7]
    8fde:	4a18      	ldr	r2, [pc, #96]	; (9040 <_event_system_init+0x70>)
    8fe0:	5cd3      	ldrb	r3, [r2, r3]
    8fe2:	461a      	mov	r2, r3
    8fe4:	79fb      	ldrb	r3, [r7, #7]
    8fe6:	4619      	mov	r1, r3
    8fe8:	4816      	ldr	r0, [pc, #88]	; (9044 <_event_system_init+0x74>)
    8fea:	4b17      	ldr	r3, [pc, #92]	; (9048 <_event_system_init+0x78>)
    8fec:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    8fee:	79fb      	ldrb	r3, [r7, #7]
    8ff0:	3301      	adds	r3, #1
    8ff2:	71fb      	strb	r3, [r7, #7]
    8ff4:	79fb      	ldrb	r3, [r7, #7]
    8ff6:	2b42      	cmp	r3, #66	; 0x42
    8ff8:	d9f0      	bls.n	8fdc <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    8ffa:	2300      	movs	r3, #0
    8ffc:	71fb      	strb	r3, [r7, #7]
    8ffe:	e016      	b.n	902e <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    9000:	79fb      	ldrb	r3, [r7, #7]
    9002:	4a12      	ldr	r2, [pc, #72]	; (904c <_event_system_init+0x7c>)
    9004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    9008:	461a      	mov	r2, r3
    900a:	79fb      	ldrb	r3, [r7, #7]
    900c:	4619      	mov	r1, r3
    900e:	480d      	ldr	r0, [pc, #52]	; (9044 <_event_system_init+0x74>)
    9010:	4b0f      	ldr	r3, [pc, #60]	; (9050 <_event_system_init+0x80>)
    9012:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    9014:	79fb      	ldrb	r3, [r7, #7]
    9016:	4a0f      	ldr	r2, [pc, #60]	; (9054 <_event_system_init+0x84>)
    9018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    901c:	b2da      	uxtb	r2, r3
    901e:	79fb      	ldrb	r3, [r7, #7]
    9020:	4619      	mov	r1, r3
    9022:	4808      	ldr	r0, [pc, #32]	; (9044 <_event_system_init+0x74>)
    9024:	4b0c      	ldr	r3, [pc, #48]	; (9058 <_event_system_init+0x88>)
    9026:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    9028:	79fb      	ldrb	r3, [r7, #7]
    902a:	3301      	adds	r3, #1
    902c:	71fb      	strb	r3, [r7, #7]
    902e:	79fb      	ldrb	r3, [r7, #7]
    9030:	2b1f      	cmp	r3, #31
    9032:	d9e5      	bls.n	9000 <_event_system_init+0x30>
	}

	return ERR_NONE;
    9034:	2300      	movs	r3, #0
}
    9036:	4618      	mov	r0, r3
    9038:	3708      	adds	r7, #8
    903a:	46bd      	mov	sp, r7
    903c:	bd80      	pop	{r7, pc}
    903e:	bf00      	nop
    9040:	0001f9fc 	.word	0x0001f9fc
    9044:	4100e000 	.word	0x4100e000
    9048:	00008f45 	.word	0x00008f45
    904c:	0001fa40 	.word	0x0001fa40
    9050:	00008fa9 	.word	0x00008fa9
    9054:	0001fa80 	.word	0x0001fa80
    9058:	00008f6b 	.word	0x00008f6b

0000905c <hri_gclk_wait_for_sync>:
{
    905c:	b480      	push	{r7}
    905e:	b083      	sub	sp, #12
    9060:	af00      	add	r7, sp, #0
    9062:	6078      	str	r0, [r7, #4]
    9064:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9066:	bf00      	nop
    9068:	687b      	ldr	r3, [r7, #4]
    906a:	685a      	ldr	r2, [r3, #4]
    906c:	683b      	ldr	r3, [r7, #0]
    906e:	4013      	ands	r3, r2
    9070:	2b00      	cmp	r3, #0
    9072:	d1f9      	bne.n	9068 <hri_gclk_wait_for_sync+0xc>
}
    9074:	bf00      	nop
    9076:	370c      	adds	r7, #12
    9078:	46bd      	mov	sp, r7
    907a:	f85d 7b04 	ldr.w	r7, [sp], #4
    907e:	4770      	bx	lr

00009080 <hri_gclk_write_GENCTRL_reg>:
{
    9080:	b580      	push	{r7, lr}
    9082:	b084      	sub	sp, #16
    9084:	af00      	add	r7, sp, #0
    9086:	60f8      	str	r0, [r7, #12]
    9088:	460b      	mov	r3, r1
    908a:	607a      	str	r2, [r7, #4]
    908c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    908e:	7afa      	ldrb	r2, [r7, #11]
    9090:	68fb      	ldr	r3, [r7, #12]
    9092:	3208      	adds	r2, #8
    9094:	6879      	ldr	r1, [r7, #4]
    9096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    909a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    909e:	68f8      	ldr	r0, [r7, #12]
    90a0:	4b02      	ldr	r3, [pc, #8]	; (90ac <hri_gclk_write_GENCTRL_reg+0x2c>)
    90a2:	4798      	blx	r3
}
    90a4:	bf00      	nop
    90a6:	3710      	adds	r7, #16
    90a8:	46bd      	mov	sp, r7
    90aa:	bd80      	pop	{r7, pc}
    90ac:	0000905d 	.word	0x0000905d

000090b0 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    90b0:	b580      	push	{r7, lr}
    90b2:	b082      	sub	sp, #8
    90b4:	af00      	add	r7, sp, #0
    90b6:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    90b8:	687b      	ldr	r3, [r7, #4]
    90ba:	f003 0301 	and.w	r3, r3, #1
    90be:	2b00      	cmp	r3, #0
    90c0:	d004      	beq.n	90cc <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    90c2:	4a36      	ldr	r2, [pc, #216]	; (919c <_gclk_init_generators_by_fref+0xec>)
    90c4:	2100      	movs	r1, #0
    90c6:	4836      	ldr	r0, [pc, #216]	; (91a0 <_gclk_init_generators_by_fref+0xf0>)
    90c8:	4b36      	ldr	r3, [pc, #216]	; (91a4 <_gclk_init_generators_by_fref+0xf4>)
    90ca:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    90cc:	687b      	ldr	r3, [r7, #4]
    90ce:	f003 0302 	and.w	r3, r3, #2
    90d2:	2b00      	cmp	r3, #0
    90d4:	d004      	beq.n	90e0 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    90d6:	4a34      	ldr	r2, [pc, #208]	; (91a8 <_gclk_init_generators_by_fref+0xf8>)
    90d8:	2101      	movs	r1, #1
    90da:	4831      	ldr	r0, [pc, #196]	; (91a0 <_gclk_init_generators_by_fref+0xf0>)
    90dc:	4b31      	ldr	r3, [pc, #196]	; (91a4 <_gclk_init_generators_by_fref+0xf4>)
    90de:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    90e0:	687b      	ldr	r3, [r7, #4]
    90e2:	f003 0304 	and.w	r3, r3, #4
    90e6:	2b00      	cmp	r3, #0
    90e8:	d004      	beq.n	90f4 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    90ea:	4a30      	ldr	r2, [pc, #192]	; (91ac <_gclk_init_generators_by_fref+0xfc>)
    90ec:	2102      	movs	r1, #2
    90ee:	482c      	ldr	r0, [pc, #176]	; (91a0 <_gclk_init_generators_by_fref+0xf0>)
    90f0:	4b2c      	ldr	r3, [pc, #176]	; (91a4 <_gclk_init_generators_by_fref+0xf4>)
    90f2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    90f4:	687b      	ldr	r3, [r7, #4]
    90f6:	f003 0308 	and.w	r3, r3, #8
    90fa:	2b00      	cmp	r3, #0
    90fc:	d004      	beq.n	9108 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    90fe:	4a2c      	ldr	r2, [pc, #176]	; (91b0 <_gclk_init_generators_by_fref+0x100>)
    9100:	2103      	movs	r1, #3
    9102:	4827      	ldr	r0, [pc, #156]	; (91a0 <_gclk_init_generators_by_fref+0xf0>)
    9104:	4b27      	ldr	r3, [pc, #156]	; (91a4 <_gclk_init_generators_by_fref+0xf4>)
    9106:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    9108:	687b      	ldr	r3, [r7, #4]
    910a:	f003 0310 	and.w	r3, r3, #16
    910e:	2b00      	cmp	r3, #0
    9110:	d004      	beq.n	911c <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    9112:	4a28      	ldr	r2, [pc, #160]	; (91b4 <_gclk_init_generators_by_fref+0x104>)
    9114:	2104      	movs	r1, #4
    9116:	4822      	ldr	r0, [pc, #136]	; (91a0 <_gclk_init_generators_by_fref+0xf0>)
    9118:	4b22      	ldr	r3, [pc, #136]	; (91a4 <_gclk_init_generators_by_fref+0xf4>)
    911a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    911c:	687b      	ldr	r3, [r7, #4]
    911e:	f003 0320 	and.w	r3, r3, #32
    9122:	2b00      	cmp	r3, #0
    9124:	d004      	beq.n	9130 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    9126:	4a24      	ldr	r2, [pc, #144]	; (91b8 <_gclk_init_generators_by_fref+0x108>)
    9128:	2105      	movs	r1, #5
    912a:	481d      	ldr	r0, [pc, #116]	; (91a0 <_gclk_init_generators_by_fref+0xf0>)
    912c:	4b1d      	ldr	r3, [pc, #116]	; (91a4 <_gclk_init_generators_by_fref+0xf4>)
    912e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    9130:	687b      	ldr	r3, [r7, #4]
    9132:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9136:	2b00      	cmp	r3, #0
    9138:	d004      	beq.n	9144 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    913a:	4a20      	ldr	r2, [pc, #128]	; (91bc <_gclk_init_generators_by_fref+0x10c>)
    913c:	2106      	movs	r1, #6
    913e:	4818      	ldr	r0, [pc, #96]	; (91a0 <_gclk_init_generators_by_fref+0xf0>)
    9140:	4b18      	ldr	r3, [pc, #96]	; (91a4 <_gclk_init_generators_by_fref+0xf4>)
    9142:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    9144:	687b      	ldr	r3, [r7, #4]
    9146:	f003 0380 	and.w	r3, r3, #128	; 0x80
    914a:	2b00      	cmp	r3, #0
    914c:	d004      	beq.n	9158 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    914e:	4a1c      	ldr	r2, [pc, #112]	; (91c0 <_gclk_init_generators_by_fref+0x110>)
    9150:	2107      	movs	r1, #7
    9152:	4813      	ldr	r0, [pc, #76]	; (91a0 <_gclk_init_generators_by_fref+0xf0>)
    9154:	4b13      	ldr	r3, [pc, #76]	; (91a4 <_gclk_init_generators_by_fref+0xf4>)
    9156:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    9158:	687b      	ldr	r3, [r7, #4]
    915a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    915e:	2b00      	cmp	r3, #0
    9160:	d004      	beq.n	916c <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    9162:	4a18      	ldr	r2, [pc, #96]	; (91c4 <_gclk_init_generators_by_fref+0x114>)
    9164:	2108      	movs	r1, #8
    9166:	480e      	ldr	r0, [pc, #56]	; (91a0 <_gclk_init_generators_by_fref+0xf0>)
    9168:	4b0e      	ldr	r3, [pc, #56]	; (91a4 <_gclk_init_generators_by_fref+0xf4>)
    916a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    916c:	687b      	ldr	r3, [r7, #4]
    916e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9172:	2b00      	cmp	r3, #0
    9174:	d004      	beq.n	9180 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    9176:	4a14      	ldr	r2, [pc, #80]	; (91c8 <_gclk_init_generators_by_fref+0x118>)
    9178:	210a      	movs	r1, #10
    917a:	4809      	ldr	r0, [pc, #36]	; (91a0 <_gclk_init_generators_by_fref+0xf0>)
    917c:	4b09      	ldr	r3, [pc, #36]	; (91a4 <_gclk_init_generators_by_fref+0xf4>)
    917e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    9180:	687b      	ldr	r3, [r7, #4]
    9182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    9186:	2b00      	cmp	r3, #0
    9188:	d004      	beq.n	9194 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    918a:	4a10      	ldr	r2, [pc, #64]	; (91cc <_gclk_init_generators_by_fref+0x11c>)
    918c:	210b      	movs	r1, #11
    918e:	4804      	ldr	r0, [pc, #16]	; (91a0 <_gclk_init_generators_by_fref+0xf0>)
    9190:	4b04      	ldr	r3, [pc, #16]	; (91a4 <_gclk_init_generators_by_fref+0xf4>)
    9192:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    9194:	bf00      	nop
    9196:	3708      	adds	r7, #8
    9198:	46bd      	mov	sp, r7
    919a:	bd80      	pop	{r7, pc}
    919c:	00010107 	.word	0x00010107
    91a0:	40001c00 	.word	0x40001c00
    91a4:	00009081 	.word	0x00009081
    91a8:	00010907 	.word	0x00010907
    91ac:	00010906 	.word	0x00010906
    91b0:	00020908 	.word	0x00020908
    91b4:	00010901 	.word	0x00010901
    91b8:	00062901 	.word	0x00062901
    91bc:	000c2901 	.word	0x000c2901
    91c0:	00082908 	.word	0x00082908
    91c4:	00032901 	.word	0x00032901
    91c8:	00010905 	.word	0x00010905
    91cc:	00041905 	.word	0x00041905

000091d0 <hri_mclk_write_CPUDIV_reg>:
{
    91d0:	b480      	push	{r7}
    91d2:	b083      	sub	sp, #12
    91d4:	af00      	add	r7, sp, #0
    91d6:	6078      	str	r0, [r7, #4]
    91d8:	460b      	mov	r3, r1
    91da:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    91dc:	687b      	ldr	r3, [r7, #4]
    91de:	78fa      	ldrb	r2, [r7, #3]
    91e0:	715a      	strb	r2, [r3, #5]
}
    91e2:	bf00      	nop
    91e4:	370c      	adds	r7, #12
    91e6:	46bd      	mov	sp, r7
    91e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    91ec:	4770      	bx	lr
	...

000091f0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    91f0:	b580      	push	{r7, lr}
    91f2:	b082      	sub	sp, #8
    91f4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    91f6:	4b05      	ldr	r3, [pc, #20]	; (920c <_mclk_init+0x1c>)
    91f8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    91fa:	2101      	movs	r1, #1
    91fc:	6878      	ldr	r0, [r7, #4]
    91fe:	4b04      	ldr	r3, [pc, #16]	; (9210 <_mclk_init+0x20>)
    9200:	4798      	blx	r3
}
    9202:	bf00      	nop
    9204:	3708      	adds	r7, #8
    9206:	46bd      	mov	sp, r7
    9208:	bd80      	pop	{r7, pc}
    920a:	bf00      	nop
    920c:	40000800 	.word	0x40000800
    9210:	000091d1 	.word	0x000091d1

00009214 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    9214:	b480      	push	{r7}
    9216:	b083      	sub	sp, #12
    9218:	af00      	add	r7, sp, #0
    921a:	6078      	str	r0, [r7, #4]
    921c:	460b      	mov	r3, r1
    921e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    9220:	687b      	ldr	r3, [r7, #4]
    9222:	78fa      	ldrb	r2, [r7, #3]
    9224:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9226:	bf00      	nop
    9228:	370c      	adds	r7, #12
    922a:	46bd      	mov	sp, r7
    922c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9230:	4770      	bx	lr

00009232 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    9232:	b480      	push	{r7}
    9234:	b083      	sub	sp, #12
    9236:	af00      	add	r7, sp, #0
    9238:	6078      	str	r0, [r7, #4]
    923a:	460b      	mov	r3, r1
    923c:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    923e:	687b      	ldr	r3, [r7, #4]
    9240:	887a      	ldrh	r2, [r7, #2]
    9242:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9244:	bf00      	nop
    9246:	370c      	adds	r7, #12
    9248:	46bd      	mov	sp, r7
    924a:	f85d 7b04 	ldr.w	r7, [sp], #4
    924e:	4770      	bx	lr

00009250 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    9250:	b480      	push	{r7}
    9252:	b083      	sub	sp, #12
    9254:	af00      	add	r7, sp, #0
    9256:	6078      	str	r0, [r7, #4]
    9258:	460b      	mov	r3, r1
    925a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    925c:	687b      	ldr	r3, [r7, #4]
    925e:	78fa      	ldrb	r2, [r7, #3]
    9260:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9262:	bf00      	nop
    9264:	370c      	adds	r7, #12
    9266:	46bd      	mov	sp, r7
    9268:	f85d 7b04 	ldr.w	r7, [sp], #4
    926c:	4770      	bx	lr

0000926e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    926e:	b480      	push	{r7}
    9270:	b083      	sub	sp, #12
    9272:	af00      	add	r7, sp, #0
    9274:	6078      	str	r0, [r7, #4]
    9276:	460b      	mov	r3, r1
    9278:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    927a:	687b      	ldr	r3, [r7, #4]
    927c:	78fa      	ldrb	r2, [r7, #3]
    927e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    9280:	bf00      	nop
    9282:	370c      	adds	r7, #12
    9284:	46bd      	mov	sp, r7
    9286:	f85d 7b04 	ldr.w	r7, [sp], #4
    928a:	4770      	bx	lr

0000928c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    928c:	b480      	push	{r7}
    928e:	b085      	sub	sp, #20
    9290:	af00      	add	r7, sp, #0
    9292:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    9294:	687b      	ldr	r3, [r7, #4]
    9296:	69db      	ldr	r3, [r3, #28]
    9298:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    929a:	68fb      	ldr	r3, [r7, #12]
    929c:	0a1b      	lsrs	r3, r3, #8
    929e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    92a2:	60fb      	str	r3, [r7, #12]
	return tmp;
    92a4:	68fb      	ldr	r3, [r7, #12]
}
    92a6:	4618      	mov	r0, r3
    92a8:	3714      	adds	r7, #20
    92aa:	46bd      	mov	sp, r7
    92ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    92b0:	4770      	bx	lr

000092b2 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    92b2:	b480      	push	{r7}
    92b4:	b083      	sub	sp, #12
    92b6:	af00      	add	r7, sp, #0
    92b8:	6078      	str	r0, [r7, #4]
    92ba:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    92bc:	687b      	ldr	r3, [r7, #4]
    92be:	683a      	ldr	r2, [r7, #0]
    92c0:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    92c2:	bf00      	nop
    92c4:	370c      	adds	r7, #12
    92c6:	46bd      	mov	sp, r7
    92c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    92cc:	4770      	bx	lr
	...

000092d0 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    92d0:	b580      	push	{r7, lr}
    92d2:	b082      	sub	sp, #8
    92d4:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    92d6:	4b13      	ldr	r3, [pc, #76]	; (9324 <_osc32kctrl_init_sources+0x54>)
    92d8:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    92da:	2300      	movs	r3, #0
    92dc:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    92de:	f242 018e 	movw	r1, #8334	; 0x208e
    92e2:	6878      	ldr	r0, [r7, #4]
    92e4:	4b10      	ldr	r3, [pc, #64]	; (9328 <_osc32kctrl_init_sources+0x58>)
    92e6:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    92e8:	2100      	movs	r1, #0
    92ea:	6878      	ldr	r0, [r7, #4]
    92ec:	4b0f      	ldr	r3, [pc, #60]	; (932c <_osc32kctrl_init_sources+0x5c>)
    92ee:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    92f0:	2100      	movs	r1, #0
    92f2:	6878      	ldr	r0, [r7, #4]
    92f4:	4b0e      	ldr	r3, [pc, #56]	; (9330 <_osc32kctrl_init_sources+0x60>)
    92f6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    92f8:	6878      	ldr	r0, [r7, #4]
    92fa:	4b0e      	ldr	r3, [pc, #56]	; (9334 <_osc32kctrl_init_sources+0x64>)
    92fc:	4798      	blx	r3
    92fe:	4603      	mov	r3, r0
    9300:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    9302:	887b      	ldrh	r3, [r7, #2]
    9304:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    9306:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    930a:	4619      	mov	r1, r3
    930c:	6878      	ldr	r0, [r7, #4]
    930e:	4b0a      	ldr	r3, [pc, #40]	; (9338 <_osc32kctrl_init_sources+0x68>)
    9310:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    9312:	2100      	movs	r1, #0
    9314:	6878      	ldr	r0, [r7, #4]
    9316:	4b09      	ldr	r3, [pc, #36]	; (933c <_osc32kctrl_init_sources+0x6c>)
    9318:	4798      	blx	r3
	(void)calib;
}
    931a:	bf00      	nop
    931c:	3708      	adds	r7, #8
    931e:	46bd      	mov	sp, r7
    9320:	bd80      	pop	{r7, pc}
    9322:	bf00      	nop
    9324:	40001400 	.word	0x40001400
    9328:	00009233 	.word	0x00009233
    932c:	00009251 	.word	0x00009251
    9330:	0000926f 	.word	0x0000926f
    9334:	0000928d 	.word	0x0000928d
    9338:	000092b3 	.word	0x000092b3
    933c:	00009215 	.word	0x00009215

00009340 <hri_gclk_wait_for_sync>:
{
    9340:	b480      	push	{r7}
    9342:	b083      	sub	sp, #12
    9344:	af00      	add	r7, sp, #0
    9346:	6078      	str	r0, [r7, #4]
    9348:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    934a:	bf00      	nop
    934c:	687b      	ldr	r3, [r7, #4]
    934e:	685a      	ldr	r2, [r3, #4]
    9350:	683b      	ldr	r3, [r7, #0]
    9352:	4013      	ands	r3, r2
    9354:	2b00      	cmp	r3, #0
    9356:	d1f9      	bne.n	934c <hri_gclk_wait_for_sync+0xc>
}
    9358:	bf00      	nop
    935a:	370c      	adds	r7, #12
    935c:	46bd      	mov	sp, r7
    935e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9362:	4770      	bx	lr

00009364 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    9364:	b480      	push	{r7}
    9366:	b083      	sub	sp, #12
    9368:	af00      	add	r7, sp, #0
    936a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    936c:	687b      	ldr	r3, [r7, #4]
    936e:	685b      	ldr	r3, [r3, #4]
    9370:	089b      	lsrs	r3, r3, #2
    9372:	f003 0301 	and.w	r3, r3, #1
    9376:	2b00      	cmp	r3, #0
    9378:	bf14      	ite	ne
    937a:	2301      	movne	r3, #1
    937c:	2300      	moveq	r3, #0
    937e:	b2db      	uxtb	r3, r3
}
    9380:	4618      	mov	r0, r3
    9382:	370c      	adds	r7, #12
    9384:	46bd      	mov	sp, r7
    9386:	f85d 7b04 	ldr.w	r7, [sp], #4
    938a:	4770      	bx	lr

0000938c <hri_gclk_read_SYNCBUSY_reg>:
{
    938c:	b480      	push	{r7}
    938e:	b083      	sub	sp, #12
    9390:	af00      	add	r7, sp, #0
    9392:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    9394:	687b      	ldr	r3, [r7, #4]
    9396:	685b      	ldr	r3, [r3, #4]
}
    9398:	4618      	mov	r0, r3
    939a:	370c      	adds	r7, #12
    939c:	46bd      	mov	sp, r7
    939e:	f85d 7b04 	ldr.w	r7, [sp], #4
    93a2:	4770      	bx	lr

000093a4 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    93a4:	b580      	push	{r7, lr}
    93a6:	b086      	sub	sp, #24
    93a8:	af00      	add	r7, sp, #0
    93aa:	60f8      	str	r0, [r7, #12]
    93ac:	460b      	mov	r3, r1
    93ae:	607a      	str	r2, [r7, #4]
    93b0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    93b2:	7afa      	ldrb	r2, [r7, #11]
    93b4:	68fb      	ldr	r3, [r7, #12]
    93b6:	3208      	adds	r2, #8
    93b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    93bc:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    93be:	697b      	ldr	r3, [r7, #20]
    93c0:	f023 030f 	bic.w	r3, r3, #15
    93c4:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    93c6:	687b      	ldr	r3, [r7, #4]
    93c8:	f003 030f 	and.w	r3, r3, #15
    93cc:	697a      	ldr	r2, [r7, #20]
    93ce:	4313      	orrs	r3, r2
    93d0:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    93d2:	7afa      	ldrb	r2, [r7, #11]
    93d4:	68fb      	ldr	r3, [r7, #12]
    93d6:	3208      	adds	r2, #8
    93d8:	6979      	ldr	r1, [r7, #20]
    93da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    93de:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    93e2:	68f8      	ldr	r0, [r7, #12]
    93e4:	4b02      	ldr	r3, [pc, #8]	; (93f0 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    93e6:	4798      	blx	r3
}
    93e8:	bf00      	nop
    93ea:	3718      	adds	r7, #24
    93ec:	46bd      	mov	sp, r7
    93ee:	bd80      	pop	{r7, pc}
    93f0:	00009341 	.word	0x00009341

000093f4 <hri_gclk_write_PCHCTRL_reg>:
{
    93f4:	b480      	push	{r7}
    93f6:	b085      	sub	sp, #20
    93f8:	af00      	add	r7, sp, #0
    93fa:	60f8      	str	r0, [r7, #12]
    93fc:	460b      	mov	r3, r1
    93fe:	607a      	str	r2, [r7, #4]
    9400:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    9402:	7afa      	ldrb	r2, [r7, #11]
    9404:	68fb      	ldr	r3, [r7, #12]
    9406:	3220      	adds	r2, #32
    9408:	6879      	ldr	r1, [r7, #4]
    940a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    940e:	bf00      	nop
    9410:	3714      	adds	r7, #20
    9412:	46bd      	mov	sp, r7
    9414:	f85d 7b04 	ldr.w	r7, [sp], #4
    9418:	4770      	bx	lr

0000941a <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    941a:	b480      	push	{r7}
    941c:	b085      	sub	sp, #20
    941e:	af00      	add	r7, sp, #0
    9420:	60f8      	str	r0, [r7, #12]
    9422:	460b      	mov	r3, r1
    9424:	607a      	str	r2, [r7, #4]
    9426:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    9428:	bf00      	nop
    942a:	7afa      	ldrb	r2, [r7, #11]
    942c:	68f9      	ldr	r1, [r7, #12]
    942e:	4613      	mov	r3, r2
    9430:	009b      	lsls	r3, r3, #2
    9432:	4413      	add	r3, r2
    9434:	009b      	lsls	r3, r3, #2
    9436:	440b      	add	r3, r1
    9438:	333c      	adds	r3, #60	; 0x3c
    943a:	681a      	ldr	r2, [r3, #0]
    943c:	687b      	ldr	r3, [r7, #4]
    943e:	4013      	ands	r3, r2
    9440:	2b00      	cmp	r3, #0
    9442:	d1f2      	bne.n	942a <hri_oscctrl_wait_for_sync+0x10>
	};
}
    9444:	bf00      	nop
    9446:	3714      	adds	r7, #20
    9448:	46bd      	mov	sp, r7
    944a:	f85d 7b04 	ldr.w	r7, [sp], #4
    944e:	4770      	bx	lr

00009450 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    9450:	b480      	push	{r7}
    9452:	b083      	sub	sp, #12
    9454:	af00      	add	r7, sp, #0
    9456:	6078      	str	r0, [r7, #4]
    9458:	460b      	mov	r3, r1
    945a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    945c:	78fa      	ldrb	r2, [r7, #3]
    945e:	6879      	ldr	r1, [r7, #4]
    9460:	4613      	mov	r3, r2
    9462:	009b      	lsls	r3, r3, #2
    9464:	4413      	add	r3, r2
    9466:	009b      	lsls	r3, r3, #2
    9468:	440b      	add	r3, r1
    946a:	3340      	adds	r3, #64	; 0x40
    946c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    946e:	f003 0301 	and.w	r3, r3, #1
    9472:	2b00      	cmp	r3, #0
    9474:	bf14      	ite	ne
    9476:	2301      	movne	r3, #1
    9478:	2300      	moveq	r3, #0
    947a:	b2db      	uxtb	r3, r3
}
    947c:	4618      	mov	r0, r3
    947e:	370c      	adds	r7, #12
    9480:	46bd      	mov	sp, r7
    9482:	f85d 7b04 	ldr.w	r7, [sp], #4
    9486:	4770      	bx	lr

00009488 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    9488:	b480      	push	{r7}
    948a:	b083      	sub	sp, #12
    948c:	af00      	add	r7, sp, #0
    948e:	6078      	str	r0, [r7, #4]
    9490:	460b      	mov	r3, r1
    9492:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    9494:	78fa      	ldrb	r2, [r7, #3]
    9496:	6879      	ldr	r1, [r7, #4]
    9498:	4613      	mov	r3, r2
    949a:	009b      	lsls	r3, r3, #2
    949c:	4413      	add	r3, r2
    949e:	009b      	lsls	r3, r3, #2
    94a0:	440b      	add	r3, r1
    94a2:	3340      	adds	r3, #64	; 0x40
    94a4:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    94a6:	085b      	lsrs	r3, r3, #1
    94a8:	f003 0301 	and.w	r3, r3, #1
    94ac:	2b00      	cmp	r3, #0
    94ae:	bf14      	ite	ne
    94b0:	2301      	movne	r3, #1
    94b2:	2300      	moveq	r3, #0
    94b4:	b2db      	uxtb	r3, r3
}
    94b6:	4618      	mov	r0, r3
    94b8:	370c      	adds	r7, #12
    94ba:	46bd      	mov	sp, r7
    94bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    94c0:	4770      	bx	lr
	...

000094c4 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    94c4:	b580      	push	{r7, lr}
    94c6:	b082      	sub	sp, #8
    94c8:	af00      	add	r7, sp, #0
    94ca:	6078      	str	r0, [r7, #4]
    94cc:	460b      	mov	r3, r1
    94ce:	70fb      	strb	r3, [r7, #3]
    94d0:	4613      	mov	r3, r2
    94d2:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    94d4:	78fa      	ldrb	r2, [r7, #3]
    94d6:	6879      	ldr	r1, [r7, #4]
    94d8:	4613      	mov	r3, r2
    94da:	009b      	lsls	r3, r3, #2
    94dc:	4413      	add	r3, r2
    94de:	009b      	lsls	r3, r3, #2
    94e0:	440b      	add	r3, r1
    94e2:	3330      	adds	r3, #48	; 0x30
    94e4:	78ba      	ldrb	r2, [r7, #2]
    94e6:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    94e8:	78fb      	ldrb	r3, [r7, #3]
    94ea:	2202      	movs	r2, #2
    94ec:	4619      	mov	r1, r3
    94ee:	6878      	ldr	r0, [r7, #4]
    94f0:	4b02      	ldr	r3, [pc, #8]	; (94fc <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    94f2:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    94f4:	bf00      	nop
    94f6:	3708      	adds	r7, #8
    94f8:	46bd      	mov	sp, r7
    94fa:	bd80      	pop	{r7, pc}
    94fc:	0000941b 	.word	0x0000941b

00009500 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    9500:	b580      	push	{r7, lr}
    9502:	b084      	sub	sp, #16
    9504:	af00      	add	r7, sp, #0
    9506:	60f8      	str	r0, [r7, #12]
    9508:	460b      	mov	r3, r1
    950a:	607a      	str	r2, [r7, #4]
    950c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    950e:	7afa      	ldrb	r2, [r7, #11]
    9510:	68f9      	ldr	r1, [r7, #12]
    9512:	4613      	mov	r3, r2
    9514:	009b      	lsls	r3, r3, #2
    9516:	4413      	add	r3, r2
    9518:	009b      	lsls	r3, r3, #2
    951a:	440b      	add	r3, r1
    951c:	3334      	adds	r3, #52	; 0x34
    951e:	687a      	ldr	r2, [r7, #4]
    9520:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    9522:	7afb      	ldrb	r3, [r7, #11]
    9524:	2206      	movs	r2, #6
    9526:	4619      	mov	r1, r3
    9528:	68f8      	ldr	r0, [r7, #12]
    952a:	4b03      	ldr	r3, [pc, #12]	; (9538 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    952c:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    952e:	bf00      	nop
    9530:	3710      	adds	r7, #16
    9532:	46bd      	mov	sp, r7
    9534:	bd80      	pop	{r7, pc}
    9536:	bf00      	nop
    9538:	0000941b 	.word	0x0000941b

0000953c <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    953c:	b480      	push	{r7}
    953e:	b085      	sub	sp, #20
    9540:	af00      	add	r7, sp, #0
    9542:	60f8      	str	r0, [r7, #12]
    9544:	460b      	mov	r3, r1
    9546:	607a      	str	r2, [r7, #4]
    9548:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    954a:	7afa      	ldrb	r2, [r7, #11]
    954c:	68f9      	ldr	r1, [r7, #12]
    954e:	4613      	mov	r3, r2
    9550:	009b      	lsls	r3, r3, #2
    9552:	4413      	add	r3, r2
    9554:	009b      	lsls	r3, r3, #2
    9556:	440b      	add	r3, r1
    9558:	3338      	adds	r3, #56	; 0x38
    955a:	687a      	ldr	r2, [r7, #4]
    955c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    955e:	bf00      	nop
    9560:	3714      	adds	r7, #20
    9562:	46bd      	mov	sp, r7
    9564:	f85d 7b04 	ldr.w	r7, [sp], #4
    9568:	4770      	bx	lr

0000956a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    956a:	b480      	push	{r7}
    956c:	b083      	sub	sp, #12
    956e:	af00      	add	r7, sp, #0
    9570:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    9572:	687b      	ldr	r3, [r7, #4]
    9574:	691b      	ldr	r3, [r3, #16]
    9576:	085b      	lsrs	r3, r3, #1
    9578:	f003 0301 	and.w	r3, r3, #1
    957c:	2b00      	cmp	r3, #0
    957e:	bf14      	ite	ne
    9580:	2301      	movne	r3, #1
    9582:	2300      	moveq	r3, #0
    9584:	b2db      	uxtb	r3, r3
}
    9586:	4618      	mov	r0, r3
    9588:	370c      	adds	r7, #12
    958a:	46bd      	mov	sp, r7
    958c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9590:	4770      	bx	lr

00009592 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    9592:	b480      	push	{r7}
    9594:	b083      	sub	sp, #12
    9596:	af00      	add	r7, sp, #0
    9598:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    959a:	687b      	ldr	r3, [r7, #4]
    959c:	691b      	ldr	r3, [r3, #16]
    959e:	0a1b      	lsrs	r3, r3, #8
    95a0:	f003 0301 	and.w	r3, r3, #1
    95a4:	2b00      	cmp	r3, #0
    95a6:	bf14      	ite	ne
    95a8:	2301      	movne	r3, #1
    95aa:	2300      	moveq	r3, #0
    95ac:	b2db      	uxtb	r3, r3
}
    95ae:	4618      	mov	r0, r3
    95b0:	370c      	adds	r7, #12
    95b2:	46bd      	mov	sp, r7
    95b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    95b8:	4770      	bx	lr

000095ba <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    95ba:	b480      	push	{r7}
    95bc:	b085      	sub	sp, #20
    95be:	af00      	add	r7, sp, #0
    95c0:	6078      	str	r0, [r7, #4]
    95c2:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    95c4:	687b      	ldr	r3, [r7, #4]
    95c6:	691b      	ldr	r3, [r3, #16]
    95c8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    95ca:	68fa      	ldr	r2, [r7, #12]
    95cc:	683b      	ldr	r3, [r7, #0]
    95ce:	4013      	ands	r3, r2
    95d0:	60fb      	str	r3, [r7, #12]
	return tmp;
    95d2:	68fb      	ldr	r3, [r7, #12]
}
    95d4:	4618      	mov	r0, r3
    95d6:	3714      	adds	r7, #20
    95d8:	46bd      	mov	sp, r7
    95da:	f85d 7b04 	ldr.w	r7, [sp], #4
    95de:	4770      	bx	lr

000095e0 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    95e0:	b480      	push	{r7}
    95e2:	b085      	sub	sp, #20
    95e4:	af00      	add	r7, sp, #0
    95e6:	60f8      	str	r0, [r7, #12]
    95e8:	460b      	mov	r3, r1
    95ea:	607a      	str	r2, [r7, #4]
    95ec:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    95ee:	7afb      	ldrb	r3, [r7, #11]
    95f0:	68fa      	ldr	r2, [r7, #12]
    95f2:	3304      	adds	r3, #4
    95f4:	009b      	lsls	r3, r3, #2
    95f6:	4413      	add	r3, r2
    95f8:	687a      	ldr	r2, [r7, #4]
    95fa:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    95fc:	bf00      	nop
    95fe:	3714      	adds	r7, #20
    9600:	46bd      	mov	sp, r7
    9602:	f85d 7b04 	ldr.w	r7, [sp], #4
    9606:	4770      	bx	lr

00009608 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    9608:	b480      	push	{r7}
    960a:	b083      	sub	sp, #12
    960c:	af00      	add	r7, sp, #0
    960e:	6078      	str	r0, [r7, #4]
    9610:	460b      	mov	r3, r1
    9612:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    9614:	687b      	ldr	r3, [r7, #4]
    9616:	78fa      	ldrb	r2, [r7, #3]
    9618:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    961a:	bf00      	nop
    961c:	370c      	adds	r7, #12
    961e:	46bd      	mov	sp, r7
    9620:	f85d 7b04 	ldr.w	r7, [sp], #4
    9624:	4770      	bx	lr

00009626 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    9626:	b480      	push	{r7}
    9628:	b085      	sub	sp, #20
    962a:	af00      	add	r7, sp, #0
    962c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    962e:	687b      	ldr	r3, [r7, #4]
    9630:	f893 3020 	ldrb.w	r3, [r3, #32]
    9634:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    9636:	7bfb      	ldrb	r3, [r7, #15]
    9638:	f003 0301 	and.w	r3, r3, #1
    963c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    963e:	7bfb      	ldrb	r3, [r7, #15]
    9640:	2b00      	cmp	r3, #0
    9642:	bf14      	ite	ne
    9644:	2301      	movne	r3, #1
    9646:	2300      	moveq	r3, #0
    9648:	b2db      	uxtb	r3, r3
}
    964a:	4618      	mov	r0, r3
    964c:	3714      	adds	r7, #20
    964e:	46bd      	mov	sp, r7
    9650:	f85d 7b04 	ldr.w	r7, [sp], #4
    9654:	4770      	bx	lr

00009656 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    9656:	b480      	push	{r7}
    9658:	b083      	sub	sp, #12
    965a:	af00      	add	r7, sp, #0
    965c:	6078      	str	r0, [r7, #4]
    965e:	460b      	mov	r3, r1
    9660:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    9662:	687b      	ldr	r3, [r7, #4]
    9664:	78fa      	ldrb	r2, [r7, #3]
    9666:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    966a:	bf00      	nop
    966c:	370c      	adds	r7, #12
    966e:	46bd      	mov	sp, r7
    9670:	f85d 7b04 	ldr.w	r7, [sp], #4
    9674:	4770      	bx	lr

00009676 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    9676:	b480      	push	{r7}
    9678:	b083      	sub	sp, #12
    967a:	af00      	add	r7, sp, #0
    967c:	6078      	str	r0, [r7, #4]
    967e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	683a      	ldr	r2, [r7, #0]
    9684:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    9686:	bf00      	nop
    9688:	370c      	adds	r7, #12
    968a:	46bd      	mov	sp, r7
    968c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9690:	4770      	bx	lr

00009692 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    9692:	b480      	push	{r7}
    9694:	b083      	sub	sp, #12
    9696:	af00      	add	r7, sp, #0
    9698:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    969a:	687b      	ldr	r3, [r7, #4]
    969c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    969e:	4618      	mov	r0, r3
    96a0:	370c      	adds	r7, #12
    96a2:	46bd      	mov	sp, r7
    96a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    96a8:	4770      	bx	lr

000096aa <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    96aa:	b480      	push	{r7}
    96ac:	b083      	sub	sp, #12
    96ae:	af00      	add	r7, sp, #0
    96b0:	6078      	str	r0, [r7, #4]
    96b2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    96b4:	687b      	ldr	r3, [r7, #4]
    96b6:	683a      	ldr	r2, [r7, #0]
    96b8:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    96ba:	bf00      	nop
    96bc:	370c      	adds	r7, #12
    96be:	46bd      	mov	sp, r7
    96c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    96c4:	4770      	bx	lr

000096c6 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    96c6:	b480      	push	{r7}
    96c8:	b085      	sub	sp, #20
    96ca:	af00      	add	r7, sp, #0
    96cc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    96ce:	687b      	ldr	r3, [r7, #4]
    96d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    96d4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    96d6:	7bfb      	ldrb	r3, [r7, #15]
    96d8:	085b      	lsrs	r3, r3, #1
    96da:	b2db      	uxtb	r3, r3
    96dc:	f003 0301 	and.w	r3, r3, #1
    96e0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    96e2:	7bfb      	ldrb	r3, [r7, #15]
    96e4:	2b00      	cmp	r3, #0
    96e6:	bf14      	ite	ne
    96e8:	2301      	movne	r3, #1
    96ea:	2300      	moveq	r3, #0
    96ec:	b2db      	uxtb	r3, r3
}
    96ee:	4618      	mov	r0, r3
    96f0:	3714      	adds	r7, #20
    96f2:	46bd      	mov	sp, r7
    96f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    96f8:	4770      	bx	lr

000096fa <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    96fa:	b480      	push	{r7}
    96fc:	b085      	sub	sp, #20
    96fe:	af00      	add	r7, sp, #0
    9700:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9702:	687b      	ldr	r3, [r7, #4]
    9704:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9708:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    970a:	7bfb      	ldrb	r3, [r7, #15]
    970c:	089b      	lsrs	r3, r3, #2
    970e:	b2db      	uxtb	r3, r3
    9710:	f003 0301 	and.w	r3, r3, #1
    9714:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9716:	7bfb      	ldrb	r3, [r7, #15]
    9718:	2b00      	cmp	r3, #0
    971a:	bf14      	ite	ne
    971c:	2301      	movne	r3, #1
    971e:	2300      	moveq	r3, #0
    9720:	b2db      	uxtb	r3, r3
}
    9722:	4618      	mov	r0, r3
    9724:	3714      	adds	r7, #20
    9726:	46bd      	mov	sp, r7
    9728:	f85d 7b04 	ldr.w	r7, [sp], #4
    972c:	4770      	bx	lr

0000972e <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    972e:	b480      	push	{r7}
    9730:	b085      	sub	sp, #20
    9732:	af00      	add	r7, sp, #0
    9734:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    9736:	687b      	ldr	r3, [r7, #4]
    9738:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    973c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    973e:	7bfb      	ldrb	r3, [r7, #15]
    9740:	08db      	lsrs	r3, r3, #3
    9742:	b2db      	uxtb	r3, r3
    9744:	f003 0301 	and.w	r3, r3, #1
    9748:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    974a:	7bfb      	ldrb	r3, [r7, #15]
    974c:	2b00      	cmp	r3, #0
    974e:	bf14      	ite	ne
    9750:	2301      	movne	r3, #1
    9752:	2300      	moveq	r3, #0
    9754:	b2db      	uxtb	r3, r3
}
    9756:	4618      	mov	r0, r3
    9758:	3714      	adds	r7, #20
    975a:	46bd      	mov	sp, r7
    975c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9760:	4770      	bx	lr

00009762 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    9762:	b480      	push	{r7}
    9764:	b085      	sub	sp, #20
    9766:	af00      	add	r7, sp, #0
    9768:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    976a:	687b      	ldr	r3, [r7, #4]
    976c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    9770:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    9772:	7bfb      	ldrb	r3, [r7, #15]
    9774:	091b      	lsrs	r3, r3, #4
    9776:	b2db      	uxtb	r3, r3
    9778:	f003 0301 	and.w	r3, r3, #1
    977c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    977e:	7bfb      	ldrb	r3, [r7, #15]
    9780:	2b00      	cmp	r3, #0
    9782:	bf14      	ite	ne
    9784:	2301      	movne	r3, #1
    9786:	2300      	moveq	r3, #0
    9788:	b2db      	uxtb	r3, r3
}
    978a:	4618      	mov	r0, r3
    978c:	3714      	adds	r7, #20
    978e:	46bd      	mov	sp, r7
    9790:	f85d 7b04 	ldr.w	r7, [sp], #4
    9794:	4770      	bx	lr
	...

00009798 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    9798:	b580      	push	{r7, lr}
    979a:	b082      	sub	sp, #8
    979c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    979e:	4b0a      	ldr	r3, [pc, #40]	; (97c8 <_oscctrl_init_sources+0x30>)
    97a0:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    97a2:	4a0a      	ldr	r2, [pc, #40]	; (97cc <_oscctrl_init_sources+0x34>)
    97a4:	2101      	movs	r1, #1
    97a6:	6878      	ldr	r0, [r7, #4]
    97a8:	4b09      	ldr	r3, [pc, #36]	; (97d0 <_oscctrl_init_sources+0x38>)
    97aa:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    97ac:	bf00      	nop
    97ae:	6878      	ldr	r0, [r7, #4]
    97b0:	4b08      	ldr	r3, [pc, #32]	; (97d4 <_oscctrl_init_sources+0x3c>)
    97b2:	4798      	blx	r3
    97b4:	4603      	mov	r3, r0
    97b6:	f083 0301 	eor.w	r3, r3, #1
    97ba:	b2db      	uxtb	r3, r3
    97bc:	2b00      	cmp	r3, #0
    97be:	d1f6      	bne.n	97ae <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    97c0:	bf00      	nop
    97c2:	3708      	adds	r7, #8
    97c4:	46bd      	mov	sp, r7
    97c6:	bd80      	pop	{r7, pc}
    97c8:	40001000 	.word	0x40001000
    97cc:	03002646 	.word	0x03002646
    97d0:	000095e1 	.word	0x000095e1
    97d4:	0000956b 	.word	0x0000956b

000097d8 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    97d8:	b580      	push	{r7, lr}
    97da:	b084      	sub	sp, #16
    97dc:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    97de:	4b6b      	ldr	r3, [pc, #428]	; (998c <_oscctrl_init_referenced_generators+0x1b4>)
    97e0:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    97e2:	2204      	movs	r2, #4
    97e4:	2100      	movs	r1, #0
    97e6:	486a      	ldr	r0, [pc, #424]	; (9990 <_oscctrl_init_referenced_generators+0x1b8>)
    97e8:	4b6a      	ldr	r3, [pc, #424]	; (9994 <_oscctrl_init_referenced_generators+0x1bc>)
    97ea:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    97ec:	bf00      	nop
    97ee:	4868      	ldr	r0, [pc, #416]	; (9990 <_oscctrl_init_referenced_generators+0x1b8>)
    97f0:	4b69      	ldr	r3, [pc, #420]	; (9998 <_oscctrl_init_referenced_generators+0x1c0>)
    97f2:	4798      	blx	r3
    97f4:	4603      	mov	r3, r0
    97f6:	2b00      	cmp	r3, #0
    97f8:	d1f9      	bne.n	97ee <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    97fa:	2100      	movs	r1, #0
    97fc:	68f8      	ldr	r0, [r7, #12]
    97fe:	4b67      	ldr	r3, [pc, #412]	; (999c <_oscctrl_init_referenced_generators+0x1c4>)
    9800:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    9802:	4967      	ldr	r1, [pc, #412]	; (99a0 <_oscctrl_init_referenced_generators+0x1c8>)
    9804:	68f8      	ldr	r0, [r7, #12]
    9806:	4b67      	ldr	r3, [pc, #412]	; (99a4 <_oscctrl_init_referenced_generators+0x1cc>)
    9808:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    980a:	bf00      	nop
    980c:	68f8      	ldr	r0, [r7, #12]
    980e:	4b66      	ldr	r3, [pc, #408]	; (99a8 <_oscctrl_init_referenced_generators+0x1d0>)
    9810:	4798      	blx	r3
    9812:	4603      	mov	r3, r0
    9814:	2b00      	cmp	r3, #0
    9816:	d1f9      	bne.n	980c <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    9818:	2100      	movs	r1, #0
    981a:	68f8      	ldr	r0, [r7, #12]
    981c:	4b63      	ldr	r3, [pc, #396]	; (99ac <_oscctrl_init_referenced_generators+0x1d4>)
    981e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    9820:	bf00      	nop
    9822:	68f8      	ldr	r0, [r7, #12]
    9824:	4b62      	ldr	r3, [pc, #392]	; (99b0 <_oscctrl_init_referenced_generators+0x1d8>)
    9826:	4798      	blx	r3
    9828:	4603      	mov	r3, r0
    982a:	2b00      	cmp	r3, #0
    982c:	d1f9      	bne.n	9822 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    982e:	2302      	movs	r3, #2
    9830:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    9832:	7afb      	ldrb	r3, [r7, #11]
    9834:	4619      	mov	r1, r3
    9836:	68f8      	ldr	r0, [r7, #12]
    9838:	4b58      	ldr	r3, [pc, #352]	; (999c <_oscctrl_init_referenced_generators+0x1c4>)
    983a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    983c:	bf00      	nop
    983e:	68f8      	ldr	r0, [r7, #12]
    9840:	4b5c      	ldr	r3, [pc, #368]	; (99b4 <_oscctrl_init_referenced_generators+0x1dc>)
    9842:	4798      	blx	r3
    9844:	4603      	mov	r3, r0
    9846:	2b00      	cmp	r3, #0
    9848:	d1f9      	bne.n	983e <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    984a:	68f8      	ldr	r0, [r7, #12]
    984c:	4b5a      	ldr	r3, [pc, #360]	; (99b8 <_oscctrl_init_referenced_generators+0x1e0>)
    984e:	4798      	blx	r3
    9850:	4603      	mov	r3, r0
    9852:	4619      	mov	r1, r3
    9854:	68f8      	ldr	r0, [r7, #12]
    9856:	4b59      	ldr	r3, [pc, #356]	; (99bc <_oscctrl_init_referenced_generators+0x1e4>)
    9858:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    985a:	bf00      	nop
    985c:	68f8      	ldr	r0, [r7, #12]
    985e:	4b58      	ldr	r3, [pc, #352]	; (99c0 <_oscctrl_init_referenced_generators+0x1e8>)
    9860:	4798      	blx	r3
    9862:	4603      	mov	r3, r0
    9864:	2b00      	cmp	r3, #0
    9866:	d1f9      	bne.n	985c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    9868:	2319      	movs	r3, #25
    986a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    986c:	7afb      	ldrb	r3, [r7, #11]
    986e:	4619      	mov	r1, r3
    9870:	68f8      	ldr	r0, [r7, #12]
    9872:	4b4e      	ldr	r3, [pc, #312]	; (99ac <_oscctrl_init_referenced_generators+0x1d4>)
    9874:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    9876:	bf00      	nop
    9878:	68f8      	ldr	r0, [r7, #12]
    987a:	4b4d      	ldr	r3, [pc, #308]	; (99b0 <_oscctrl_init_referenced_generators+0x1d8>)
    987c:	4798      	blx	r3
    987e:	4603      	mov	r3, r0
    9880:	2b00      	cmp	r3, #0
    9882:	d1f9      	bne.n	9878 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    9884:	2245      	movs	r2, #69	; 0x45
    9886:	2101      	movs	r1, #1
    9888:	4841      	ldr	r0, [pc, #260]	; (9990 <_oscctrl_init_referenced_generators+0x1b8>)
    988a:	4b4e      	ldr	r3, [pc, #312]	; (99c4 <_oscctrl_init_referenced_generators+0x1ec>)
    988c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    988e:	223b      	movs	r2, #59	; 0x3b
    9890:	2100      	movs	r1, #0
    9892:	68f8      	ldr	r0, [r7, #12]
    9894:	4b4c      	ldr	r3, [pc, #304]	; (99c8 <_oscctrl_init_referenced_generators+0x1f0>)
    9896:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    9898:	f44f 6201 	mov.w	r2, #2064	; 0x810
    989c:	2100      	movs	r1, #0
    989e:	68f8      	ldr	r0, [r7, #12]
    98a0:	4b4a      	ldr	r3, [pc, #296]	; (99cc <_oscctrl_init_referenced_generators+0x1f4>)
    98a2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    98a4:	2242      	movs	r2, #66	; 0x42
    98a6:	2100      	movs	r1, #0
    98a8:	68f8      	ldr	r0, [r7, #12]
    98aa:	4b49      	ldr	r3, [pc, #292]	; (99d0 <_oscctrl_init_referenced_generators+0x1f8>)
    98ac:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    98ae:	4a49      	ldr	r2, [pc, #292]	; (99d4 <_oscctrl_init_referenced_generators+0x1fc>)
    98b0:	2101      	movs	r1, #1
    98b2:	68f8      	ldr	r0, [r7, #12]
    98b4:	4b44      	ldr	r3, [pc, #272]	; (99c8 <_oscctrl_init_referenced_generators+0x1f0>)
    98b6:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    98b8:	f44f 6203 	mov.w	r2, #2096	; 0x830
    98bc:	2101      	movs	r1, #1
    98be:	68f8      	ldr	r0, [r7, #12]
    98c0:	4b42      	ldr	r3, [pc, #264]	; (99cc <_oscctrl_init_referenced_generators+0x1f4>)
    98c2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    98c4:	2202      	movs	r2, #2
    98c6:	2101      	movs	r1, #1
    98c8:	68f8      	ldr	r0, [r7, #12]
    98ca:	4b41      	ldr	r3, [pc, #260]	; (99d0 <_oscctrl_init_referenced_generators+0x1f8>)
    98cc:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    98ce:	68f8      	ldr	r0, [r7, #12]
    98d0:	4b41      	ldr	r3, [pc, #260]	; (99d8 <_oscctrl_init_referenced_generators+0x200>)
    98d2:	4798      	blx	r3
    98d4:	4603      	mov	r3, r0
    98d6:	2b00      	cmp	r3, #0
    98d8:	d00c      	beq.n	98f4 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    98da:	f44f 6310 	mov.w	r3, #2304	; 0x900
    98de:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    98e0:	bf00      	nop
    98e2:	6879      	ldr	r1, [r7, #4]
    98e4:	68f8      	ldr	r0, [r7, #12]
    98e6:	4b3d      	ldr	r3, [pc, #244]	; (99dc <_oscctrl_init_referenced_generators+0x204>)
    98e8:	4798      	blx	r3
    98ea:	4602      	mov	r2, r0
    98ec:	687b      	ldr	r3, [r7, #4]
    98ee:	429a      	cmp	r2, r3
    98f0:	d1f7      	bne.n	98e2 <_oscctrl_init_referenced_generators+0x10a>
    98f2:	e009      	b.n	9908 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    98f4:	bf00      	nop
    98f6:	68f8      	ldr	r0, [r7, #12]
    98f8:	4b39      	ldr	r3, [pc, #228]	; (99e0 <_oscctrl_init_referenced_generators+0x208>)
    98fa:	4798      	blx	r3
    98fc:	4603      	mov	r3, r0
    98fe:	f083 0301 	eor.w	r3, r3, #1
    9902:	b2db      	uxtb	r3, r3
    9904:	2b00      	cmp	r3, #0
    9906:	d1f6      	bne.n	98f6 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    9908:	bf00      	nop
    990a:	2100      	movs	r1, #0
    990c:	68f8      	ldr	r0, [r7, #12]
    990e:	4b35      	ldr	r3, [pc, #212]	; (99e4 <_oscctrl_init_referenced_generators+0x20c>)
    9910:	4798      	blx	r3
    9912:	4603      	mov	r3, r0
    9914:	f083 0301 	eor.w	r3, r3, #1
    9918:	b2db      	uxtb	r3, r3
    991a:	2b00      	cmp	r3, #0
    991c:	d009      	beq.n	9932 <_oscctrl_init_referenced_generators+0x15a>
    991e:	2100      	movs	r1, #0
    9920:	68f8      	ldr	r0, [r7, #12]
    9922:	4b31      	ldr	r3, [pc, #196]	; (99e8 <_oscctrl_init_referenced_generators+0x210>)
    9924:	4798      	blx	r3
    9926:	4603      	mov	r3, r0
    9928:	f083 0301 	eor.w	r3, r3, #1
    992c:	b2db      	uxtb	r3, r3
    992e:	2b00      	cmp	r3, #0
    9930:	d1eb      	bne.n	990a <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    9932:	bf00      	nop
    9934:	2101      	movs	r1, #1
    9936:	68f8      	ldr	r0, [r7, #12]
    9938:	4b2a      	ldr	r3, [pc, #168]	; (99e4 <_oscctrl_init_referenced_generators+0x20c>)
    993a:	4798      	blx	r3
    993c:	4603      	mov	r3, r0
    993e:	f083 0301 	eor.w	r3, r3, #1
    9942:	b2db      	uxtb	r3, r3
    9944:	2b00      	cmp	r3, #0
    9946:	d009      	beq.n	995c <_oscctrl_init_referenced_generators+0x184>
    9948:	2101      	movs	r1, #1
    994a:	68f8      	ldr	r0, [r7, #12]
    994c:	4b26      	ldr	r3, [pc, #152]	; (99e8 <_oscctrl_init_referenced_generators+0x210>)
    994e:	4798      	blx	r3
    9950:	4603      	mov	r3, r0
    9952:	f083 0301 	eor.w	r3, r3, #1
    9956:	b2db      	uxtb	r3, r3
    9958:	2b00      	cmp	r3, #0
    995a:	d1eb      	bne.n	9934 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    995c:	bf00      	nop
    995e:	480c      	ldr	r0, [pc, #48]	; (9990 <_oscctrl_init_referenced_generators+0x1b8>)
    9960:	4b22      	ldr	r3, [pc, #136]	; (99ec <_oscctrl_init_referenced_generators+0x214>)
    9962:	4798      	blx	r3
    9964:	4603      	mov	r3, r0
    9966:	2b00      	cmp	r3, #0
    9968:	d1f9      	bne.n	995e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    996a:	2207      	movs	r2, #7
    996c:	2100      	movs	r1, #0
    996e:	4808      	ldr	r0, [pc, #32]	; (9990 <_oscctrl_init_referenced_generators+0x1b8>)
    9970:	4b08      	ldr	r3, [pc, #32]	; (9994 <_oscctrl_init_referenced_generators+0x1bc>)
    9972:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    9974:	bf00      	nop
    9976:	4806      	ldr	r0, [pc, #24]	; (9990 <_oscctrl_init_referenced_generators+0x1b8>)
    9978:	4b07      	ldr	r3, [pc, #28]	; (9998 <_oscctrl_init_referenced_generators+0x1c0>)
    997a:	4798      	blx	r3
    997c:	4603      	mov	r3, r0
    997e:	2b00      	cmp	r3, #0
    9980:	d1f9      	bne.n	9976 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    9982:	bf00      	nop
    9984:	3710      	adds	r7, #16
    9986:	46bd      	mov	sp, r7
    9988:	bd80      	pop	{r7, pc}
    998a:	bf00      	nop
    998c:	40001000 	.word	0x40001000
    9990:	40001c00 	.word	0x40001c00
    9994:	000093a5 	.word	0x000093a5
    9998:	00009365 	.word	0x00009365
    999c:	00009609 	.word	0x00009609
    99a0:	0401bb80 	.word	0x0401bb80
    99a4:	000096ab 	.word	0x000096ab
    99a8:	00009763 	.word	0x00009763
    99ac:	00009657 	.word	0x00009657
    99b0:	000096fb 	.word	0x000096fb
    99b4:	000096c7 	.word	0x000096c7
    99b8:	00009693 	.word	0x00009693
    99bc:	00009677 	.word	0x00009677
    99c0:	0000972f 	.word	0x0000972f
    99c4:	000093f5 	.word	0x000093f5
    99c8:	00009501 	.word	0x00009501
    99cc:	0000953d 	.word	0x0000953d
    99d0:	000094c5 	.word	0x000094c5
    99d4:	000407a0 	.word	0x000407a0
    99d8:	00009627 	.word	0x00009627
    99dc:	000095bb 	.word	0x000095bb
    99e0:	00009593 	.word	0x00009593
    99e4:	00009451 	.word	0x00009451
    99e8:	00009489 	.word	0x00009489
    99ec:	0000938d 	.word	0x0000938d

000099f0 <hri_pac_get_STATUSA_reg>:
{
	return (((Pac *)hw)->STATUSA.reg & PAC_STATUSA_TC1) >> PAC_STATUSA_TC1_Pos;
}

static inline hri_pac_statusa_reg_t hri_pac_get_STATUSA_reg(const void *const hw, hri_pac_statusa_reg_t mask)
{
    99f0:	b480      	push	{r7}
    99f2:	b085      	sub	sp, #20
    99f4:	af00      	add	r7, sp, #0
    99f6:	6078      	str	r0, [r7, #4]
    99f8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSA.reg;
    99fa:	687b      	ldr	r3, [r7, #4]
    99fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    99fe:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9a00:	68fa      	ldr	r2, [r7, #12]
    9a02:	683b      	ldr	r3, [r7, #0]
    9a04:	4013      	ands	r3, r2
    9a06:	60fb      	str	r3, [r7, #12]
	return tmp;
    9a08:	68fb      	ldr	r3, [r7, #12]
}
    9a0a:	4618      	mov	r0, r3
    9a0c:	3714      	adds	r7, #20
    9a0e:	46bd      	mov	sp, r7
    9a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a14:	4770      	bx	lr

00009a16 <hri_pac_get_STATUSB_reg>:
{
	return (((Pac *)hw)->STATUSB.reg & PAC_STATUSB_RAMECC) >> PAC_STATUSB_RAMECC_Pos;
}

static inline hri_pac_statusb_reg_t hri_pac_get_STATUSB_reg(const void *const hw, hri_pac_statusb_reg_t mask)
{
    9a16:	b480      	push	{r7}
    9a18:	b085      	sub	sp, #20
    9a1a:	af00      	add	r7, sp, #0
    9a1c:	6078      	str	r0, [r7, #4]
    9a1e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSB.reg;
    9a20:	687b      	ldr	r3, [r7, #4]
    9a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9a24:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9a26:	68fa      	ldr	r2, [r7, #12]
    9a28:	683b      	ldr	r3, [r7, #0]
    9a2a:	4013      	ands	r3, r2
    9a2c:	60fb      	str	r3, [r7, #12]
	return tmp;
    9a2e:	68fb      	ldr	r3, [r7, #12]
}
    9a30:	4618      	mov	r0, r3
    9a32:	3714      	adds	r7, #20
    9a34:	46bd      	mov	sp, r7
    9a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a3a:	4770      	bx	lr

00009a3c <hri_pac_get_STATUSC_reg>:
{
	return (((Pac *)hw)->STATUSC.reg & PAC_STATUSC_CCL) >> PAC_STATUSC_CCL_Pos;
}

static inline hri_pac_statusc_reg_t hri_pac_get_STATUSC_reg(const void *const hw, hri_pac_statusc_reg_t mask)
{
    9a3c:	b480      	push	{r7}
    9a3e:	b085      	sub	sp, #20
    9a40:	af00      	add	r7, sp, #0
    9a42:	6078      	str	r0, [r7, #4]
    9a44:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSC.reg;
    9a46:	687b      	ldr	r3, [r7, #4]
    9a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9a4a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9a4c:	68fa      	ldr	r2, [r7, #12]
    9a4e:	683b      	ldr	r3, [r7, #0]
    9a50:	4013      	ands	r3, r2
    9a52:	60fb      	str	r3, [r7, #12]
	return tmp;
    9a54:	68fb      	ldr	r3, [r7, #12]
}
    9a56:	4618      	mov	r0, r3
    9a58:	3714      	adds	r7, #20
    9a5a:	46bd      	mov	sp, r7
    9a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a60:	4770      	bx	lr

00009a62 <hri_pac_get_STATUSD_reg>:
{
	return (((Pac *)hw)->STATUSD.reg & PAC_STATUSD_PCC) >> PAC_STATUSD_PCC_Pos;
}

static inline hri_pac_statusd_reg_t hri_pac_get_STATUSD_reg(const void *const hw, hri_pac_statusd_reg_t mask)
{
    9a62:	b480      	push	{r7}
    9a64:	b085      	sub	sp, #20
    9a66:	af00      	add	r7, sp, #0
    9a68:	6078      	str	r0, [r7, #4]
    9a6a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pac *)hw)->STATUSD.reg;
    9a6c:	687b      	ldr	r3, [r7, #4]
    9a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9a70:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9a72:	68fa      	ldr	r2, [r7, #12]
    9a74:	683b      	ldr	r3, [r7, #0]
    9a76:	4013      	ands	r3, r2
    9a78:	60fb      	str	r3, [r7, #12]
	return tmp;
    9a7a:	68fb      	ldr	r3, [r7, #12]
}
    9a7c:	4618      	mov	r0, r3
    9a7e:	3714      	adds	r7, #20
    9a80:	46bd      	mov	sp, r7
    9a82:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a86:	4770      	bx	lr

00009a88 <hri_pac_write_WRCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pac_write_WRCTRL_reg(const void *const hw, hri_pac_wrctrl_reg_t data)
{
    9a88:	b480      	push	{r7}
    9a8a:	b083      	sub	sp, #12
    9a8c:	af00      	add	r7, sp, #0
    9a8e:	6078      	str	r0, [r7, #4]
    9a90:	6039      	str	r1, [r7, #0]
	PAC_CRITICAL_SECTION_ENTER();
	((Pac *)hw)->WRCTRL.reg = data;
    9a92:	687b      	ldr	r3, [r7, #4]
    9a94:	683a      	ldr	r2, [r7, #0]
    9a96:	601a      	str	r2, [r3, #0]
	PAC_CRITICAL_SECTION_LEAVE();
}
    9a98:	bf00      	nop
    9a9a:	370c      	adds	r7, #12
    9a9c:	46bd      	mov	sp, r7
    9a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9aa2:	4770      	bx	lr

00009aa4 <_pac_get_peripheral_id>:
#include <compiler.h>
#include <utils_assert.h>
#include <hpl_pac.h>

static uint32_t _pac_get_peripheral_id(const void *const module)
{
    9aa4:	b480      	push	{r7}
    9aa6:	b085      	sub	sp, #20
    9aa8:	af00      	add	r7, sp, #0
    9aaa:	6078      	str	r0, [r7, #4]
	uint32_t peripheral = 10;
    9aac:	230a      	movs	r3, #10
    9aae:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module & (uint32_t)HPB1_ADDR) == (uint32_t)HPB1_ADDR) {
    9ab0:	687b      	ldr	r3, [r7, #4]
    9ab2:	f003 4382 	and.w	r3, r3, #1090519040	; 0x41000000
    9ab6:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    9aba:	d101      	bne.n	9ac0 <_pac_get_peripheral_id+0x1c>
		peripheral = 13;
    9abc:	230d      	movs	r3, #13
    9abe:	60fb      	str	r3, [r7, #12]
	}

	peripheral = (((uint32_t)module & 0x0F000000) >> 24) * 32 + (((uint32_t)module & 0x000fff00) >> peripheral);
    9ac0:	687b      	ldr	r3, [r7, #4]
    9ac2:	0e1b      	lsrs	r3, r3, #24
    9ac4:	f003 030f 	and.w	r3, r3, #15
    9ac8:	015a      	lsls	r2, r3, #5
    9aca:	6879      	ldr	r1, [r7, #4]
    9acc:	4b06      	ldr	r3, [pc, #24]	; (9ae8 <_pac_get_peripheral_id+0x44>)
    9ace:	400b      	ands	r3, r1
    9ad0:	68f9      	ldr	r1, [r7, #12]
    9ad2:	40cb      	lsrs	r3, r1
    9ad4:	4413      	add	r3, r2
    9ad6:	60fb      	str	r3, [r7, #12]

	return peripheral;
    9ad8:	68fb      	ldr	r3, [r7, #12]
}
    9ada:	4618      	mov	r0, r3
    9adc:	3714      	adds	r7, #20
    9ade:	46bd      	mov	sp, r7
    9ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ae4:	4770      	bx	lr
    9ae6:	bf00      	nop
    9ae8:	000fff00 	.word	0x000fff00

00009aec <_periph_lock>:

/**
 * \brief Enable write protect for the given hardware module
 */
int32_t _periph_lock(const void *const module)
{
    9aec:	b580      	push	{r7, lr}
    9aee:	b086      	sub	sp, #24
    9af0:	af00      	add	r7, sp, #0
    9af2:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9af4:	687b      	ldr	r3, [r7, #4]
    9af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9afa:	bf8c      	ite	hi
    9afc:	2301      	movhi	r3, #1
    9afe:	2300      	movls	r3, #0
    9b00:	b2db      	uxtb	r3, r3
    9b02:	2239      	movs	r2, #57	; 0x39
    9b04:	4917      	ldr	r1, [pc, #92]	; (9b64 <_periph_lock+0x78>)
    9b06:	4618      	mov	r0, r3
    9b08:	4b17      	ldr	r3, [pc, #92]	; (9b68 <_periph_lock+0x7c>)
    9b0a:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    9b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9b10:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    9b12:	6878      	ldr	r0, [r7, #4]
    9b14:	4b15      	ldr	r3, [pc, #84]	; (9b6c <_periph_lock+0x80>)
    9b16:	4798      	blx	r3
    9b18:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_SET);
    9b1a:	693b      	ldr	r3, [r7, #16]
    9b1c:	b29b      	uxth	r3, r3
    9b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9b22:	4619      	mov	r1, r3
    9b24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9b28:	4b11      	ldr	r3, [pc, #68]	; (9b70 <_periph_lock+0x84>)
    9b2a:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    9b2c:	f107 030f 	add.w	r3, r7, #15
    9b30:	4619      	mov	r1, r3
    9b32:	6878      	ldr	r0, [r7, #4]
    9b34:	4b0f      	ldr	r3, [pc, #60]	; (9b74 <_periph_lock+0x88>)
    9b36:	4798      	blx	r3
	} while (!stat && timeout--);
    9b38:	7bfb      	ldrb	r3, [r7, #15]
    9b3a:	f083 0301 	eor.w	r3, r3, #1
    9b3e:	b2db      	uxtb	r3, r3
    9b40:	2b00      	cmp	r3, #0
    9b42:	d004      	beq.n	9b4e <_periph_lock+0x62>
    9b44:	697b      	ldr	r3, [r7, #20]
    9b46:	1e5a      	subs	r2, r3, #1
    9b48:	617a      	str	r2, [r7, #20]
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	d1ee      	bne.n	9b2c <_periph_lock+0x40>

	if (timeout < 0) {
    9b4e:	697b      	ldr	r3, [r7, #20]
    9b50:	2b00      	cmp	r3, #0
    9b52:	da02      	bge.n	9b5a <_periph_lock+0x6e>
		return ERR_TIMEOUT;
    9b54:	f06f 0307 	mvn.w	r3, #7
    9b58:	e000      	b.n	9b5c <_periph_lock+0x70>
	}

	return ERR_NONE;
    9b5a:	2300      	movs	r3, #0
}
    9b5c:	4618      	mov	r0, r3
    9b5e:	3718      	adds	r7, #24
    9b60:	46bd      	mov	sp, r7
    9b62:	bd80      	pop	{r7, pc}
    9b64:	0001fb00 	.word	0x0001fb00
    9b68:	0000799d 	.word	0x0000799d
    9b6c:	00009aa5 	.word	0x00009aa5
    9b70:	00009a89 	.word	0x00009a89
    9b74:	00009c01 	.word	0x00009c01

00009b78 <_periph_unlock>:

/**
 * \brief Disable write protect for the given hardware module
 */
int32_t _periph_unlock(const void *const module)
{
    9b78:	b580      	push	{r7, lr}
    9b7a:	b086      	sub	sp, #24
    9b7c:	af00      	add	r7, sp, #0
    9b7e:	6078      	str	r0, [r7, #4]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9b80:	687b      	ldr	r3, [r7, #4]
    9b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9b86:	bf8c      	ite	hi
    9b88:	2301      	movhi	r3, #1
    9b8a:	2300      	movls	r3, #0
    9b8c:	b2db      	uxtb	r3, r3
    9b8e:	2253      	movs	r2, #83	; 0x53
    9b90:	4916      	ldr	r1, [pc, #88]	; (9bec <_periph_unlock+0x74>)
    9b92:	4618      	mov	r0, r3
    9b94:	4b16      	ldr	r3, [pc, #88]	; (9bf0 <_periph_unlock+0x78>)
    9b96:	4798      	blx	r3

	uint32_t peripheral;
	int32_t  timeout = 1000;
    9b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9b9c:	617b      	str	r3, [r7, #20]
	bool     stat;

	peripheral = _pac_get_peripheral_id(module);
    9b9e:	6878      	ldr	r0, [r7, #4]
    9ba0:	4b14      	ldr	r3, [pc, #80]	; (9bf4 <_periph_unlock+0x7c>)
    9ba2:	4798      	blx	r3
    9ba4:	6138      	str	r0, [r7, #16]

	hri_pac_write_WRCTRL_reg(PAC, PAC_WRCTRL_PERID(peripheral) | PAC_WRCTRL_KEY_CLR);
    9ba6:	693b      	ldr	r3, [r7, #16]
    9ba8:	b29b      	uxth	r3, r3
    9baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9bae:	4619      	mov	r1, r3
    9bb0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9bb4:	4b10      	ldr	r3, [pc, #64]	; (9bf8 <_periph_unlock+0x80>)
    9bb6:	4798      	blx	r3

	do {
		_periph_get_lock_state(module, &stat);
    9bb8:	f107 030f 	add.w	r3, r7, #15
    9bbc:	4619      	mov	r1, r3
    9bbe:	6878      	ldr	r0, [r7, #4]
    9bc0:	4b0e      	ldr	r3, [pc, #56]	; (9bfc <_periph_unlock+0x84>)
    9bc2:	4798      	blx	r3
	} while (stat && timeout--);
    9bc4:	7bfb      	ldrb	r3, [r7, #15]
    9bc6:	2b00      	cmp	r3, #0
    9bc8:	d004      	beq.n	9bd4 <_periph_unlock+0x5c>
    9bca:	697b      	ldr	r3, [r7, #20]
    9bcc:	1e5a      	subs	r2, r3, #1
    9bce:	617a      	str	r2, [r7, #20]
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d1f1      	bne.n	9bb8 <_periph_unlock+0x40>

	if (timeout < 0) {
    9bd4:	697b      	ldr	r3, [r7, #20]
    9bd6:	2b00      	cmp	r3, #0
    9bd8:	da02      	bge.n	9be0 <_periph_unlock+0x68>
		return ERR_TIMEOUT;
    9bda:	f06f 0307 	mvn.w	r3, #7
    9bde:	e000      	b.n	9be2 <_periph_unlock+0x6a>
	}

	return ERR_NONE;
    9be0:	2300      	movs	r3, #0
}
    9be2:	4618      	mov	r0, r3
    9be4:	3718      	adds	r7, #24
    9be6:	46bd      	mov	sp, r7
    9be8:	bd80      	pop	{r7, pc}
    9bea:	bf00      	nop
    9bec:	0001fb00 	.word	0x0001fb00
    9bf0:	0000799d 	.word	0x0000799d
    9bf4:	00009aa5 	.word	0x00009aa5
    9bf8:	00009a89 	.word	0x00009a89
    9bfc:	00009c01 	.word	0x00009c01

00009c00 <_periph_get_lock_state>:

/**
 * \brief Get write protect for the given hardware module
 */
int32_t _periph_get_lock_state(const void *const module, bool *const state)
{
    9c00:	b580      	push	{r7, lr}
    9c02:	b084      	sub	sp, #16
    9c04:	af00      	add	r7, sp, #0
    9c06:	6078      	str	r0, [r7, #4]
    9c08:	6039      	str	r1, [r7, #0]
	ASSERT((((uint32_t)module) > (uint32_t)HPB0_ADDR));
    9c0a:	687b      	ldr	r3, [r7, #4]
    9c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9c10:	bf8c      	ite	hi
    9c12:	2301      	movhi	r3, #1
    9c14:	2300      	movls	r3, #0
    9c16:	b2db      	uxtb	r3, r3
    9c18:	226d      	movs	r2, #109	; 0x6d
    9c1a:	4931      	ldr	r1, [pc, #196]	; (9ce0 <_periph_get_lock_state+0xe0>)
    9c1c:	4618      	mov	r0, r3
    9c1e:	4b31      	ldr	r3, [pc, #196]	; (9ce4 <_periph_get_lock_state+0xe4>)
    9c20:	4798      	blx	r3

	uint32_t peripheral;

	peripheral = _pac_get_peripheral_id(module) & 0x1F;
    9c22:	6878      	ldr	r0, [r7, #4]
    9c24:	4b30      	ldr	r3, [pc, #192]	; (9ce8 <_periph_get_lock_state+0xe8>)
    9c26:	4798      	blx	r3
    9c28:	4603      	mov	r3, r0
    9c2a:	f003 031f 	and.w	r3, r3, #31
    9c2e:	60fb      	str	r3, [r7, #12]

	if (((uint32_t)module) < (uint32_t)HPB1_ADDR) {
    9c30:	687b      	ldr	r3, [r7, #4]
    9c32:	f1b3 4f82 	cmp.w	r3, #1090519040	; 0x41000000
    9c36:	d211      	bcs.n	9c5c <_periph_get_lock_state+0x5c>
		*state = hri_pac_get_STATUSA_reg(PAC, 1 << peripheral);
    9c38:	2201      	movs	r2, #1
    9c3a:	68fb      	ldr	r3, [r7, #12]
    9c3c:	fa02 f303 	lsl.w	r3, r2, r3
    9c40:	4619      	mov	r1, r3
    9c42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9c46:	4b29      	ldr	r3, [pc, #164]	; (9cec <_periph_get_lock_state+0xec>)
    9c48:	4798      	blx	r3
    9c4a:	4603      	mov	r3, r0
    9c4c:	2b00      	cmp	r3, #0
    9c4e:	bf14      	ite	ne
    9c50:	2301      	movne	r3, #1
    9c52:	2300      	moveq	r3, #0
    9c54:	b2da      	uxtb	r2, r3
    9c56:	683b      	ldr	r3, [r7, #0]
    9c58:	701a      	strb	r2, [r3, #0]
    9c5a:	e03c      	b.n	9cd6 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB2_ADDR) {
    9c5c:	687b      	ldr	r3, [r7, #4]
    9c5e:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    9c62:	d211      	bcs.n	9c88 <_periph_get_lock_state+0x88>
		*state = hri_pac_get_STATUSB_reg(PAC, 1 << peripheral);
    9c64:	2201      	movs	r2, #1
    9c66:	68fb      	ldr	r3, [r7, #12]
    9c68:	fa02 f303 	lsl.w	r3, r2, r3
    9c6c:	4619      	mov	r1, r3
    9c6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9c72:	4b1f      	ldr	r3, [pc, #124]	; (9cf0 <_periph_get_lock_state+0xf0>)
    9c74:	4798      	blx	r3
    9c76:	4603      	mov	r3, r0
    9c78:	2b00      	cmp	r3, #0
    9c7a:	bf14      	ite	ne
    9c7c:	2301      	movne	r3, #1
    9c7e:	2300      	moveq	r3, #0
    9c80:	b2da      	uxtb	r2, r3
    9c82:	683b      	ldr	r3, [r7, #0]
    9c84:	701a      	strb	r2, [r3, #0]
    9c86:	e026      	b.n	9cd6 <_periph_get_lock_state+0xd6>
	} else if (((uint32_t)module) < (uint32_t)HPB3_ADDR) {
    9c88:	687b      	ldr	r3, [r7, #4]
    9c8a:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    9c8e:	d211      	bcs.n	9cb4 <_periph_get_lock_state+0xb4>
		*state = hri_pac_get_STATUSC_reg(PAC, 1 << peripheral);
    9c90:	2201      	movs	r2, #1
    9c92:	68fb      	ldr	r3, [r7, #12]
    9c94:	fa02 f303 	lsl.w	r3, r2, r3
    9c98:	4619      	mov	r1, r3
    9c9a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9c9e:	4b15      	ldr	r3, [pc, #84]	; (9cf4 <_periph_get_lock_state+0xf4>)
    9ca0:	4798      	blx	r3
    9ca2:	4603      	mov	r3, r0
    9ca4:	2b00      	cmp	r3, #0
    9ca6:	bf14      	ite	ne
    9ca8:	2301      	movne	r3, #1
    9caa:	2300      	moveq	r3, #0
    9cac:	b2da      	uxtb	r2, r3
    9cae:	683b      	ldr	r3, [r7, #0]
    9cb0:	701a      	strb	r2, [r3, #0]
    9cb2:	e010      	b.n	9cd6 <_periph_get_lock_state+0xd6>
	} else {
		*state = hri_pac_get_STATUSD_reg(PAC, 1 << peripheral);
    9cb4:	2201      	movs	r2, #1
    9cb6:	68fb      	ldr	r3, [r7, #12]
    9cb8:	fa02 f303 	lsl.w	r3, r2, r3
    9cbc:	4619      	mov	r1, r3
    9cbe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9cc2:	4b0d      	ldr	r3, [pc, #52]	; (9cf8 <_periph_get_lock_state+0xf8>)
    9cc4:	4798      	blx	r3
    9cc6:	4603      	mov	r3, r0
    9cc8:	2b00      	cmp	r3, #0
    9cca:	bf14      	ite	ne
    9ccc:	2301      	movne	r3, #1
    9cce:	2300      	moveq	r3, #0
    9cd0:	b2da      	uxtb	r2, r3
    9cd2:	683b      	ldr	r3, [r7, #0]
    9cd4:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
    9cd6:	2300      	movs	r3, #0
}
    9cd8:	4618      	mov	r0, r3
    9cda:	3710      	adds	r7, #16
    9cdc:	46bd      	mov	sp, r7
    9cde:	bd80      	pop	{r7, pc}
    9ce0:	0001fb00 	.word	0x0001fb00
    9ce4:	0000799d 	.word	0x0000799d
    9ce8:	00009aa5 	.word	0x00009aa5
    9cec:	000099f1 	.word	0x000099f1
    9cf0:	00009a17 	.word	0x00009a17
    9cf4:	00009a3d 	.word	0x00009a3d
    9cf8:	00009a63 	.word	0x00009a63

00009cfc <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    9cfc:	b480      	push	{r7}
    9cfe:	b083      	sub	sp, #12
    9d00:	af00      	add	r7, sp, #0
    9d02:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    9d04:	687b      	ldr	r3, [r7, #4]
    9d06:	69db      	ldr	r3, [r3, #28]
    9d08:	0a9b      	lsrs	r3, r3, #10
    9d0a:	f003 0301 	and.w	r3, r3, #1
    9d0e:	2b00      	cmp	r3, #0
    9d10:	bf14      	ite	ne
    9d12:	2301      	movne	r3, #1
    9d14:	2300      	moveq	r3, #0
    9d16:	b2db      	uxtb	r3, r3
}
    9d18:	4618      	mov	r0, r3
    9d1a:	370c      	adds	r7, #12
    9d1c:	46bd      	mov	sp, r7
    9d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d22:	4770      	bx	lr

00009d24 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    9d24:	b480      	push	{r7}
    9d26:	b083      	sub	sp, #12
    9d28:	af00      	add	r7, sp, #0
    9d2a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    9d2c:	687b      	ldr	r3, [r7, #4]
    9d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9d32:	61da      	str	r2, [r3, #28]
}
    9d34:	bf00      	nop
    9d36:	370c      	adds	r7, #12
    9d38:	46bd      	mov	sp, r7
    9d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d3e:	4770      	bx	lr

00009d40 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    9d40:	b480      	push	{r7}
    9d42:	b083      	sub	sp, #12
    9d44:	af00      	add	r7, sp, #0
    9d46:	6078      	str	r0, [r7, #4]
    9d48:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    9d4a:	687b      	ldr	r3, [r7, #4]
    9d4c:	683a      	ldr	r2, [r7, #0]
    9d4e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9d50:	bf00      	nop
    9d52:	370c      	adds	r7, #12
    9d54:	46bd      	mov	sp, r7
    9d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d5a:	4770      	bx	lr

00009d5c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    9d5c:	b480      	push	{r7}
    9d5e:	b083      	sub	sp, #12
    9d60:	af00      	add	r7, sp, #0
    9d62:	6078      	str	r0, [r7, #4]
    9d64:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    9d66:	687b      	ldr	r3, [r7, #4]
    9d68:	683a      	ldr	r2, [r7, #0]
    9d6a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9d6c:	bf00      	nop
    9d6e:	370c      	adds	r7, #12
    9d70:	46bd      	mov	sp, r7
    9d72:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d76:	4770      	bx	lr

00009d78 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    9d78:	b480      	push	{r7}
    9d7a:	b083      	sub	sp, #12
    9d7c:	af00      	add	r7, sp, #0
    9d7e:	6078      	str	r0, [r7, #4]
    9d80:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    9d82:	687b      	ldr	r3, [r7, #4]
    9d84:	683a      	ldr	r2, [r7, #0]
    9d86:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9d88:	bf00      	nop
    9d8a:	370c      	adds	r7, #12
    9d8c:	46bd      	mov	sp, r7
    9d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d92:	4770      	bx	lr

00009d94 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    9d94:	b480      	push	{r7}
    9d96:	b083      	sub	sp, #12
    9d98:	af00      	add	r7, sp, #0
    9d9a:	6078      	str	r0, [r7, #4]
    9d9c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    9d9e:	687b      	ldr	r3, [r7, #4]
    9da0:	683a      	ldr	r2, [r7, #0]
    9da2:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9da4:	bf00      	nop
    9da6:	370c      	adds	r7, #12
    9da8:	46bd      	mov	sp, r7
    9daa:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dae:	4770      	bx	lr

00009db0 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    9db0:	b480      	push	{r7}
    9db2:	b085      	sub	sp, #20
    9db4:	af00      	add	r7, sp, #0
    9db6:	6078      	str	r0, [r7, #4]
    9db8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    9dba:	687b      	ldr	r3, [r7, #4]
    9dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9dbe:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    9dc0:	68fb      	ldr	r3, [r7, #12]
    9dc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9dc6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    9dc8:	683b      	ldr	r3, [r7, #0]
    9dca:	b2db      	uxtb	r3, r3
    9dcc:	68fa      	ldr	r2, [r7, #12]
    9dce:	4313      	orrs	r3, r2
    9dd0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    9dd2:	687b      	ldr	r3, [r7, #4]
    9dd4:	68fa      	ldr	r2, [r7, #12]
    9dd6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9dd8:	bf00      	nop
    9dda:	3714      	adds	r7, #20
    9ddc:	46bd      	mov	sp, r7
    9dde:	f85d 7b04 	ldr.w	r7, [sp], #4
    9de2:	4770      	bx	lr

00009de4 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    9de4:	b480      	push	{r7}
    9de6:	b085      	sub	sp, #20
    9de8:	af00      	add	r7, sp, #0
    9dea:	6078      	str	r0, [r7, #4]
    9dec:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    9dee:	687b      	ldr	r3, [r7, #4]
    9df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9df2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    9df4:	68fb      	ldr	r3, [r7, #12]
    9df6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    9dfa:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    9dfc:	683b      	ldr	r3, [r7, #0]
    9dfe:	041b      	lsls	r3, r3, #16
    9e00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    9e04:	68fa      	ldr	r2, [r7, #12]
    9e06:	4313      	orrs	r3, r2
    9e08:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    9e0a:	687b      	ldr	r3, [r7, #4]
    9e0c:	68fa      	ldr	r2, [r7, #12]
    9e0e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9e10:	bf00      	nop
    9e12:	3714      	adds	r7, #20
    9e14:	46bd      	mov	sp, r7
    9e16:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e1a:	4770      	bx	lr

00009e1c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    9e1c:	b480      	push	{r7}
    9e1e:	b083      	sub	sp, #12
    9e20:	af00      	add	r7, sp, #0
    9e22:	6078      	str	r0, [r7, #4]
    9e24:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    9e26:	687b      	ldr	r3, [r7, #4]
    9e28:	683a      	ldr	r2, [r7, #0]
    9e2a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    9e2c:	bf00      	nop
    9e2e:	370c      	adds	r7, #12
    9e30:	46bd      	mov	sp, r7
    9e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e36:	4770      	bx	lr

00009e38 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    9e38:	b480      	push	{r7}
    9e3a:	b083      	sub	sp, #12
    9e3c:	af00      	add	r7, sp, #0
    9e3e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    9e40:	687b      	ldr	r3, [r7, #4]
    9e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    9e44:	4618      	mov	r0, r3
    9e46:	370c      	adds	r7, #12
    9e48:	46bd      	mov	sp, r7
    9e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e4e:	4770      	bx	lr

00009e50 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    9e50:	b480      	push	{r7}
    9e52:	b085      	sub	sp, #20
    9e54:	af00      	add	r7, sp, #0
    9e56:	60f8      	str	r0, [r7, #12]
    9e58:	60b9      	str	r1, [r7, #8]
    9e5a:	607a      	str	r2, [r7, #4]
	while (count--) {
    9e5c:	e007      	b.n	9e6e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    9e5e:	68fb      	ldr	r3, [r7, #12]
    9e60:	1c5a      	adds	r2, r3, #1
    9e62:	60fa      	str	r2, [r7, #12]
    9e64:	68ba      	ldr	r2, [r7, #8]
    9e66:	1c51      	adds	r1, r2, #1
    9e68:	60b9      	str	r1, [r7, #8]
    9e6a:	7812      	ldrb	r2, [r2, #0]
    9e6c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    9e6e:	687b      	ldr	r3, [r7, #4]
    9e70:	1e5a      	subs	r2, r3, #1
    9e72:	607a      	str	r2, [r7, #4]
    9e74:	2b00      	cmp	r3, #0
    9e76:	d1f2      	bne.n	9e5e <_qspi_memcpy+0xe>
	}
}
    9e78:	bf00      	nop
    9e7a:	3714      	adds	r7, #20
    9e7c:	46bd      	mov	sp, r7
    9e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e82:	4770      	bx	lr

00009e84 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    9e84:	b580      	push	{r7, lr}
    9e86:	b082      	sub	sp, #8
    9e88:	af00      	add	r7, sp, #0
    9e8a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    9e8c:	4903      	ldr	r1, [pc, #12]	; (9e9c <_qspi_end_transfer+0x18>)
    9e8e:	6878      	ldr	r0, [r7, #4]
    9e90:	4b03      	ldr	r3, [pc, #12]	; (9ea0 <_qspi_end_transfer+0x1c>)
    9e92:	4798      	blx	r3
}
    9e94:	bf00      	nop
    9e96:	3708      	adds	r7, #8
    9e98:	46bd      	mov	sp, r7
    9e9a:	bd80      	pop	{r7, pc}
    9e9c:	01000002 	.word	0x01000002
    9ea0:	00009d41 	.word	0x00009d41

00009ea4 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    9ea4:	b580      	push	{r7, lr}
    9ea6:	b082      	sub	sp, #8
    9ea8:	af00      	add	r7, sp, #0
    9eaa:	6078      	str	r0, [r7, #4]
    9eac:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    9eae:	687b      	ldr	r3, [r7, #4]
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	d004      	beq.n	9ebe <_qspi_sync_init+0x1a>
    9eb4:	683b      	ldr	r3, [r7, #0]
    9eb6:	2b00      	cmp	r3, #0
    9eb8:	d001      	beq.n	9ebe <_qspi_sync_init+0x1a>
    9eba:	2301      	movs	r3, #1
    9ebc:	e000      	b.n	9ec0 <_qspi_sync_init+0x1c>
    9ebe:	2300      	movs	r3, #0
    9ec0:	f003 0301 	and.w	r3, r3, #1
    9ec4:	b2db      	uxtb	r3, r3
    9ec6:	2240      	movs	r2, #64	; 0x40
    9ec8:	490c      	ldr	r1, [pc, #48]	; (9efc <_qspi_sync_init+0x58>)
    9eca:	4618      	mov	r0, r3
    9ecc:	4b0c      	ldr	r3, [pc, #48]	; (9f00 <_qspi_sync_init+0x5c>)
    9ece:	4798      	blx	r3
	dev->prvt = hw;
    9ed0:	687b      	ldr	r3, [r7, #4]
    9ed2:	683a      	ldr	r2, [r7, #0]
    9ed4:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    9ed6:	687b      	ldr	r3, [r7, #4]
    9ed8:	681b      	ldr	r3, [r3, #0]
    9eda:	2101      	movs	r1, #1
    9edc:	4618      	mov	r0, r3
    9ede:	4b09      	ldr	r3, [pc, #36]	; (9f04 <_qspi_sync_init+0x60>)
    9ee0:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    9ee2:	4909      	ldr	r1, [pc, #36]	; (9f08 <_qspi_sync_init+0x64>)
    9ee4:	6838      	ldr	r0, [r7, #0]
    9ee6:	4b09      	ldr	r3, [pc, #36]	; (9f0c <_qspi_sync_init+0x68>)
    9ee8:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    9eea:	4909      	ldr	r1, [pc, #36]	; (9f10 <_qspi_sync_init+0x6c>)
    9eec:	6838      	ldr	r0, [r7, #0]
    9eee:	4b09      	ldr	r3, [pc, #36]	; (9f14 <_qspi_sync_init+0x70>)
    9ef0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    9ef2:	2300      	movs	r3, #0
}
    9ef4:	4618      	mov	r0, r3
    9ef6:	3708      	adds	r7, #8
    9ef8:	46bd      	mov	sp, r7
    9efa:	bd80      	pop	{r7, pc}
    9efc:	0001fb18 	.word	0x0001fb18
    9f00:	0000799d 	.word	0x0000799d
    9f04:	00009d41 	.word	0x00009d41
    9f08:	06000011 	.word	0x06000011
    9f0c:	00009d5d 	.word	0x00009d5d
    9f10:	00241300 	.word	0x00241300
    9f14:	00009d79 	.word	0x00009d79

00009f18 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    9f18:	b580      	push	{r7, lr}
    9f1a:	b082      	sub	sp, #8
    9f1c:	af00      	add	r7, sp, #0
    9f1e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    9f20:	687b      	ldr	r3, [r7, #4]
    9f22:	681b      	ldr	r3, [r3, #0]
    9f24:	2102      	movs	r1, #2
    9f26:	4618      	mov	r0, r3
    9f28:	4b03      	ldr	r3, [pc, #12]	; (9f38 <_qspi_sync_enable+0x20>)
    9f2a:	4798      	blx	r3
	return ERR_NONE;
    9f2c:	2300      	movs	r3, #0
}
    9f2e:	4618      	mov	r0, r3
    9f30:	3708      	adds	r7, #8
    9f32:	46bd      	mov	sp, r7
    9f34:	bd80      	pop	{r7, pc}
    9f36:	bf00      	nop
    9f38:	00009d41 	.word	0x00009d41

00009f3c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    9f3c:	b580      	push	{r7, lr}
    9f3e:	b082      	sub	sp, #8
    9f40:	af00      	add	r7, sp, #0
    9f42:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    9f44:	687b      	ldr	r3, [r7, #4]
    9f46:	681b      	ldr	r3, [r3, #0]
    9f48:	2100      	movs	r1, #0
    9f4a:	4618      	mov	r0, r3
    9f4c:	4b03      	ldr	r3, [pc, #12]	; (9f5c <_qspi_sync_disable+0x20>)
    9f4e:	4798      	blx	r3
	return ERR_NONE;
    9f50:	2300      	movs	r3, #0
}
    9f52:	4618      	mov	r0, r3
    9f54:	3708      	adds	r7, #8
    9f56:	46bd      	mov	sp, r7
    9f58:	bd80      	pop	{r7, pc}
    9f5a:	bf00      	nop
    9f5c:	00009d41 	.word	0x00009d41

00009f60 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    9f60:	b580      	push	{r7, lr}
    9f62:	b084      	sub	sp, #16
    9f64:	af00      	add	r7, sp, #0
    9f66:	6078      	str	r0, [r7, #4]
    9f68:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    9f6a:	687b      	ldr	r3, [r7, #4]
    9f6c:	681b      	ldr	r3, [r3, #0]
    9f6e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    9f70:	683b      	ldr	r3, [r7, #0]
    9f72:	781b      	ldrb	r3, [r3, #0]
    9f74:	f003 0320 	and.w	r3, r3, #32
    9f78:	b2db      	uxtb	r3, r3
    9f7a:	2b00      	cmp	r3, #0
    9f7c:	d005      	beq.n	9f8a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    9f7e:	683b      	ldr	r3, [r7, #0]
    9f80:	689b      	ldr	r3, [r3, #8]
    9f82:	4619      	mov	r1, r3
    9f84:	68f8      	ldr	r0, [r7, #12]
    9f86:	4b13      	ldr	r3, [pc, #76]	; (9fd4 <_qspi_sync_command_set_ifr+0x74>)
    9f88:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    9f8a:	683b      	ldr	r3, [r7, #0]
    9f8c:	781b      	ldrb	r3, [r3, #0]
    9f8e:	f003 0310 	and.w	r3, r3, #16
    9f92:	b2db      	uxtb	r3, r3
    9f94:	2b00      	cmp	r3, #0
    9f96:	d005      	beq.n	9fa4 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    9f98:	683b      	ldr	r3, [r7, #0]
    9f9a:	791b      	ldrb	r3, [r3, #4]
    9f9c:	4619      	mov	r1, r3
    9f9e:	68f8      	ldr	r0, [r7, #12]
    9fa0:	4b0d      	ldr	r3, [pc, #52]	; (9fd8 <_qspi_sync_command_set_ifr+0x78>)
    9fa2:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    9fa4:	683b      	ldr	r3, [r7, #0]
    9fa6:	781b      	ldrb	r3, [r3, #0]
    9fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9fac:	b2db      	uxtb	r3, r3
    9fae:	2b00      	cmp	r3, #0
    9fb0:	d005      	beq.n	9fbe <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    9fb2:	683b      	ldr	r3, [r7, #0]
    9fb4:	795b      	ldrb	r3, [r3, #5]
    9fb6:	4619      	mov	r1, r3
    9fb8:	68f8      	ldr	r0, [r7, #12]
    9fba:	4b08      	ldr	r3, [pc, #32]	; (9fdc <_qspi_sync_command_set_ifr+0x7c>)
    9fbc:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    9fbe:	683b      	ldr	r3, [r7, #0]
    9fc0:	681b      	ldr	r3, [r3, #0]
    9fc2:	4619      	mov	r1, r3
    9fc4:	68f8      	ldr	r0, [r7, #12]
    9fc6:	4b06      	ldr	r3, [pc, #24]	; (9fe0 <_qspi_sync_command_set_ifr+0x80>)
    9fc8:	4798      	blx	r3
}
    9fca:	bf00      	nop
    9fcc:	3710      	adds	r7, #16
    9fce:	46bd      	mov	sp, r7
    9fd0:	bd80      	pop	{r7, pc}
    9fd2:	bf00      	nop
    9fd4:	00009d95 	.word	0x00009d95
    9fd8:	00009db1 	.word	0x00009db1
    9fdc:	00009de5 	.word	0x00009de5
    9fe0:	00009e1d 	.word	0x00009e1d

00009fe4 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    9fe4:	b580      	push	{r7, lr}
    9fe6:	b084      	sub	sp, #16
    9fe8:	af00      	add	r7, sp, #0
    9fea:	6078      	str	r0, [r7, #4]
    9fec:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    9fee:	687b      	ldr	r3, [r7, #4]
    9ff0:	681b      	ldr	r3, [r3, #0]
    9ff2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    9ff4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    9ff8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    9ffa:	683b      	ldr	r3, [r7, #0]
    9ffc:	781b      	ldrb	r3, [r3, #0]
    9ffe:	f003 0320 	and.w	r3, r3, #32
    a002:	b2db      	uxtb	r3, r3
    a004:	2b00      	cmp	r3, #0
    a006:	d004      	beq.n	a012 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    a008:	683b      	ldr	r3, [r7, #0]
    a00a:	689b      	ldr	r3, [r3, #8]
    a00c:	68fa      	ldr	r2, [r7, #12]
    a00e:	4413      	add	r3, r2
    a010:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    a012:	68b8      	ldr	r0, [r7, #8]
    a014:	4b18      	ldr	r3, [pc, #96]	; (a078 <_qspi_sync_run_transfer+0x94>)
    a016:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    a018:	683b      	ldr	r3, [r7, #0]
    a01a:	691b      	ldr	r3, [r3, #16]
    a01c:	2b00      	cmp	r3, #0
    a01e:	d103      	bne.n	a028 <_qspi_sync_run_transfer+0x44>
    a020:	683b      	ldr	r3, [r7, #0]
    a022:	695b      	ldr	r3, [r3, #20]
    a024:	2b00      	cmp	r3, #0
    a026:	d001      	beq.n	a02c <_qspi_sync_run_transfer+0x48>
    a028:	2301      	movs	r3, #1
    a02a:	e000      	b.n	a02e <_qspi_sync_run_transfer+0x4a>
    a02c:	2300      	movs	r3, #0
    a02e:	f003 0301 	and.w	r3, r3, #1
    a032:	b2db      	uxtb	r3, r3
    a034:	2282      	movs	r2, #130	; 0x82
    a036:	4911      	ldr	r1, [pc, #68]	; (a07c <_qspi_sync_run_transfer+0x98>)
    a038:	4618      	mov	r0, r3
    a03a:	4b11      	ldr	r3, [pc, #68]	; (a080 <_qspi_sync_run_transfer+0x9c>)
    a03c:	4798      	blx	r3

	if (cmd->tx_buf) {
    a03e:	683b      	ldr	r3, [r7, #0]
    a040:	691b      	ldr	r3, [r3, #16]
    a042:	2b00      	cmp	r3, #0
    a044:	d008      	beq.n	a058 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    a046:	683b      	ldr	r3, [r7, #0]
    a048:	6919      	ldr	r1, [r3, #16]
    a04a:	683b      	ldr	r3, [r7, #0]
    a04c:	68db      	ldr	r3, [r3, #12]
    a04e:	461a      	mov	r2, r3
    a050:	68f8      	ldr	r0, [r7, #12]
    a052:	4b0c      	ldr	r3, [pc, #48]	; (a084 <_qspi_sync_run_transfer+0xa0>)
    a054:	4798      	blx	r3
    a056:	e007      	b.n	a068 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    a058:	683b      	ldr	r3, [r7, #0]
    a05a:	6958      	ldr	r0, [r3, #20]
    a05c:	683b      	ldr	r3, [r7, #0]
    a05e:	68db      	ldr	r3, [r3, #12]
    a060:	461a      	mov	r2, r3
    a062:	68f9      	ldr	r1, [r7, #12]
    a064:	4b07      	ldr	r3, [pc, #28]	; (a084 <_qspi_sync_run_transfer+0xa0>)
    a066:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    a068:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a06c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    a070:	bf00      	nop
    a072:	3710      	adds	r7, #16
    a074:	46bd      	mov	sp, r7
    a076:	bd80      	pop	{r7, pc}
    a078:	00009e39 	.word	0x00009e39
    a07c:	0001fb18 	.word	0x0001fb18
    a080:	0000799d 	.word	0x0000799d
    a084:	00009e51 	.word	0x00009e51

0000a088 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    a088:	b580      	push	{r7, lr}
    a08a:	b082      	sub	sp, #8
    a08c:	af00      	add	r7, sp, #0
    a08e:	6078      	str	r0, [r7, #4]
    a090:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    a092:	6839      	ldr	r1, [r7, #0]
    a094:	6878      	ldr	r0, [r7, #4]
    a096:	4b14      	ldr	r3, [pc, #80]	; (a0e8 <_qspi_sync_serial_run_command+0x60>)
    a098:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    a09a:	683b      	ldr	r3, [r7, #0]
    a09c:	781b      	ldrb	r3, [r3, #0]
    a09e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a0a2:	b2db      	uxtb	r3, r3
    a0a4:	2b00      	cmp	r3, #0
    a0a6:	d003      	beq.n	a0b0 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    a0a8:	6839      	ldr	r1, [r7, #0]
    a0aa:	6878      	ldr	r0, [r7, #4]
    a0ac:	4b0f      	ldr	r3, [pc, #60]	; (a0ec <_qspi_sync_serial_run_command+0x64>)
    a0ae:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    a0b0:	687b      	ldr	r3, [r7, #4]
    a0b2:	681b      	ldr	r3, [r3, #0]
    a0b4:	4618      	mov	r0, r3
    a0b6:	4b0e      	ldr	r3, [pc, #56]	; (a0f0 <_qspi_sync_serial_run_command+0x68>)
    a0b8:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    a0ba:	bf00      	nop
    a0bc:	687b      	ldr	r3, [r7, #4]
    a0be:	681b      	ldr	r3, [r3, #0]
    a0c0:	4618      	mov	r0, r3
    a0c2:	4b0c      	ldr	r3, [pc, #48]	; (a0f4 <_qspi_sync_serial_run_command+0x6c>)
    a0c4:	4798      	blx	r3
    a0c6:	4603      	mov	r3, r0
    a0c8:	f083 0301 	eor.w	r3, r3, #1
    a0cc:	b2db      	uxtb	r3, r3
    a0ce:	2b00      	cmp	r3, #0
    a0d0:	d1f4      	bne.n	a0bc <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    a0d2:	687b      	ldr	r3, [r7, #4]
    a0d4:	681b      	ldr	r3, [r3, #0]
    a0d6:	4618      	mov	r0, r3
    a0d8:	4b07      	ldr	r3, [pc, #28]	; (a0f8 <_qspi_sync_serial_run_command+0x70>)
    a0da:	4798      	blx	r3
	return ERR_NONE;
    a0dc:	2300      	movs	r3, #0
}
    a0de:	4618      	mov	r0, r3
    a0e0:	3708      	adds	r7, #8
    a0e2:	46bd      	mov	sp, r7
    a0e4:	bd80      	pop	{r7, pc}
    a0e6:	bf00      	nop
    a0e8:	00009f61 	.word	0x00009f61
    a0ec:	00009fe5 	.word	0x00009fe5
    a0f0:	00009e85 	.word	0x00009e85
    a0f4:	00009cfd 	.word	0x00009cfd
    a0f8:	00009d25 	.word	0x00009d25

0000a0fc <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    a0fc:	b480      	push	{r7}
    a0fe:	b083      	sub	sp, #12
    a100:	af00      	add	r7, sp, #0
    a102:	6078      	str	r0, [r7, #4]
    a104:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    a106:	bf00      	nop
    a108:	687b      	ldr	r3, [r7, #4]
    a10a:	691a      	ldr	r2, [r3, #16]
    a10c:	683b      	ldr	r3, [r7, #0]
    a10e:	4013      	ands	r3, r2
    a110:	2b00      	cmp	r3, #0
    a112:	d1f9      	bne.n	a108 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    a114:	bf00      	nop
    a116:	370c      	adds	r7, #12
    a118:	46bd      	mov	sp, r7
    a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a11e:	4770      	bx	lr

0000a120 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    a120:	b480      	push	{r7}
    a122:	b083      	sub	sp, #12
    a124:	af00      	add	r7, sp, #0
    a126:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    a128:	687b      	ldr	r3, [r7, #4]
    a12a:	f44f 7280 	mov.w	r2, #256	; 0x100
    a12e:	819a      	strh	r2, [r3, #12]
}
    a130:	bf00      	nop
    a132:	370c      	adds	r7, #12
    a134:	46bd      	mov	sp, r7
    a136:	f85d 7b04 	ldr.w	r7, [sp], #4
    a13a:	4770      	bx	lr

0000a13c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    a13c:	b480      	push	{r7}
    a13e:	b083      	sub	sp, #12
    a140:	af00      	add	r7, sp, #0
    a142:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    a144:	687b      	ldr	r3, [r7, #4]
    a146:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a14a:	819a      	strh	r2, [r3, #12]
}
    a14c:	bf00      	nop
    a14e:	370c      	adds	r7, #12
    a150:	46bd      	mov	sp, r7
    a152:	f85d 7b04 	ldr.w	r7, [sp], #4
    a156:	4770      	bx	lr

0000a158 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    a158:	b480      	push	{r7}
    a15a:	b083      	sub	sp, #12
    a15c:	af00      	add	r7, sp, #0
    a15e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    a160:	687b      	ldr	r3, [r7, #4]
    a162:	899b      	ldrh	r3, [r3, #12]
    a164:	b29b      	uxth	r3, r3
}
    a166:	4618      	mov	r0, r3
    a168:	370c      	adds	r7, #12
    a16a:	46bd      	mov	sp, r7
    a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a170:	4770      	bx	lr

0000a172 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    a172:	b480      	push	{r7}
    a174:	b083      	sub	sp, #12
    a176:	af00      	add	r7, sp, #0
    a178:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    a17a:	687b      	ldr	r3, [r7, #4]
    a17c:	895b      	ldrh	r3, [r3, #10]
    a17e:	b29b      	uxth	r3, r3
}
    a180:	4618      	mov	r0, r3
    a182:	370c      	adds	r7, #12
    a184:	46bd      	mov	sp, r7
    a186:	f85d 7b04 	ldr.w	r7, [sp], #4
    a18a:	4770      	bx	lr

0000a18c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    a18c:	b580      	push	{r7, lr}
    a18e:	b082      	sub	sp, #8
    a190:	af00      	add	r7, sp, #0
    a192:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    a194:	687b      	ldr	r3, [r7, #4]
    a196:	881b      	ldrh	r3, [r3, #0]
    a198:	b29b      	uxth	r3, r3
    a19a:	f043 0301 	orr.w	r3, r3, #1
    a19e:	b29a      	uxth	r2, r3
    a1a0:	687b      	ldr	r3, [r7, #4]
    a1a2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    a1a4:	2101      	movs	r1, #1
    a1a6:	6878      	ldr	r0, [r7, #4]
    a1a8:	4b02      	ldr	r3, [pc, #8]	; (a1b4 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    a1aa:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a1ac:	bf00      	nop
    a1ae:	3708      	adds	r7, #8
    a1b0:	46bd      	mov	sp, r7
    a1b2:	bd80      	pop	{r7, pc}
    a1b4:	0000a0fd 	.word	0x0000a0fd

0000a1b8 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a1b8:	b580      	push	{r7, lr}
    a1ba:	b082      	sub	sp, #8
    a1bc:	af00      	add	r7, sp, #0
    a1be:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    a1c0:	687b      	ldr	r3, [r7, #4]
    a1c2:	881b      	ldrh	r3, [r3, #0]
    a1c4:	b29b      	uxth	r3, r3
    a1c6:	f043 0302 	orr.w	r3, r3, #2
    a1ca:	b29a      	uxth	r2, r3
    a1cc:	687b      	ldr	r3, [r7, #4]
    a1ce:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a1d0:	f248 0103 	movw	r1, #32771	; 0x8003
    a1d4:	6878      	ldr	r0, [r7, #4]
    a1d6:	4b03      	ldr	r3, [pc, #12]	; (a1e4 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    a1d8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a1da:	bf00      	nop
    a1dc:	3708      	adds	r7, #8
    a1de:	46bd      	mov	sp, r7
    a1e0:	bd80      	pop	{r7, pc}
    a1e2:	bf00      	nop
    a1e4:	0000a0fd 	.word	0x0000a0fd

0000a1e8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a1e8:	b580      	push	{r7, lr}
    a1ea:	b084      	sub	sp, #16
    a1ec:	af00      	add	r7, sp, #0
    a1ee:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a1f0:	f248 0103 	movw	r1, #32771	; 0x8003
    a1f4:	6878      	ldr	r0, [r7, #4]
    a1f6:	4b0a      	ldr	r3, [pc, #40]	; (a220 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    a1f8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    a1fa:	687b      	ldr	r3, [r7, #4]
    a1fc:	881b      	ldrh	r3, [r3, #0]
    a1fe:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    a200:	89fb      	ldrh	r3, [r7, #14]
    a202:	085b      	lsrs	r3, r3, #1
    a204:	b29b      	uxth	r3, r3
    a206:	f003 0301 	and.w	r3, r3, #1
    a20a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    a20c:	89fb      	ldrh	r3, [r7, #14]
    a20e:	2b00      	cmp	r3, #0
    a210:	bf14      	ite	ne
    a212:	2301      	movne	r3, #1
    a214:	2300      	moveq	r3, #0
    a216:	b2db      	uxtb	r3, r3
}
    a218:	4618      	mov	r0, r3
    a21a:	3710      	adds	r7, #16
    a21c:	46bd      	mov	sp, r7
    a21e:	bd80      	pop	{r7, pc}
    a220:	0000a0fd 	.word	0x0000a0fd

0000a224 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a224:	b580      	push	{r7, lr}
    a226:	b082      	sub	sp, #8
    a228:	af00      	add	r7, sp, #0
    a22a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    a22c:	687b      	ldr	r3, [r7, #4]
    a22e:	881b      	ldrh	r3, [r3, #0]
    a230:	b29b      	uxth	r3, r3
    a232:	f023 0302 	bic.w	r3, r3, #2
    a236:	b29a      	uxth	r2, r3
    a238:	687b      	ldr	r3, [r7, #4]
    a23a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a23c:	f248 0103 	movw	r1, #32771	; 0x8003
    a240:	6878      	ldr	r0, [r7, #4]
    a242:	4b03      	ldr	r3, [pc, #12]	; (a250 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    a244:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a246:	bf00      	nop
    a248:	3708      	adds	r7, #8
    a24a:	46bd      	mov	sp, r7
    a24c:	bd80      	pop	{r7, pc}
    a24e:	bf00      	nop
    a250:	0000a0fd 	.word	0x0000a0fd

0000a254 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    a254:	b580      	push	{r7, lr}
    a256:	b082      	sub	sp, #8
    a258:	af00      	add	r7, sp, #0
    a25a:	6078      	str	r0, [r7, #4]
    a25c:	460b      	mov	r3, r1
    a25e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    a260:	687b      	ldr	r3, [r7, #4]
    a262:	887a      	ldrh	r2, [r7, #2]
    a264:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    a266:	f248 0103 	movw	r1, #32771	; 0x8003
    a26a:	6878      	ldr	r0, [r7, #4]
    a26c:	4b02      	ldr	r3, [pc, #8]	; (a278 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    a26e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a270:	bf00      	nop
    a272:	3708      	adds	r7, #8
    a274:	46bd      	mov	sp, r7
    a276:	bd80      	pop	{r7, pc}
    a278:	0000a0fd 	.word	0x0000a0fd

0000a27c <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    a27c:	b580      	push	{r7, lr}
    a27e:	b082      	sub	sp, #8
    a280:	af00      	add	r7, sp, #0
    a282:	6078      	str	r0, [r7, #4]
    a284:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    a286:	687b      	ldr	r3, [r7, #4]
    a288:	683a      	ldr	r2, [r7, #0]
    a28a:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    a28c:	2108      	movs	r1, #8
    a28e:	6878      	ldr	r0, [r7, #4]
    a290:	4b02      	ldr	r3, [pc, #8]	; (a29c <hri_rtcmode0_write_COUNT_reg+0x20>)
    a292:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    a294:	bf00      	nop
    a296:	3708      	adds	r7, #8
    a298:	46bd      	mov	sp, r7
    a29a:	bd80      	pop	{r7, pc}
    a29c:	0000a0fd 	.word	0x0000a0fd

0000a2a0 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    a2a0:	b580      	push	{r7, lr}
    a2a2:	b082      	sub	sp, #8
    a2a4:	af00      	add	r7, sp, #0
    a2a6:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    a2a8:	2108      	movs	r1, #8
    a2aa:	6878      	ldr	r0, [r7, #4]
    a2ac:	4b03      	ldr	r3, [pc, #12]	; (a2bc <hri_rtcmode0_read_COUNT_reg+0x1c>)
    a2ae:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    a2b0:	687b      	ldr	r3, [r7, #4]
    a2b2:	699b      	ldr	r3, [r3, #24]
}
    a2b4:	4618      	mov	r0, r3
    a2b6:	3708      	adds	r7, #8
    a2b8:	46bd      	mov	sp, r7
    a2ba:	bd80      	pop	{r7, pc}
    a2bc:	0000a0fd 	.word	0x0000a0fd

0000a2c0 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    a2c0:	b480      	push	{r7}
    a2c2:	b083      	sub	sp, #12
    a2c4:	af00      	add	r7, sp, #0
    a2c6:	6078      	str	r0, [r7, #4]
    a2c8:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    a2ca:	687b      	ldr	r3, [r7, #4]
    a2cc:	683a      	ldr	r2, [r7, #0]
    a2ce:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    a2d0:	bf00      	nop
    a2d2:	370c      	adds	r7, #12
    a2d4:	46bd      	mov	sp, r7
    a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2da:	4770      	bx	lr

0000a2dc <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    a2dc:	b580      	push	{r7, lr}
    a2de:	b082      	sub	sp, #8
    a2e0:	af00      	add	r7, sp, #0
    a2e2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a2e4:	687b      	ldr	r3, [r7, #4]
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	d005      	beq.n	a2f6 <_calendar_init+0x1a>
    a2ea:	687b      	ldr	r3, [r7, #4]
    a2ec:	681b      	ldr	r3, [r3, #0]
    a2ee:	2b00      	cmp	r3, #0
    a2f0:	d001      	beq.n	a2f6 <_calendar_init+0x1a>
    a2f2:	2301      	movs	r3, #1
    a2f4:	e000      	b.n	a2f8 <_calendar_init+0x1c>
    a2f6:	2300      	movs	r3, #0
    a2f8:	f003 0301 	and.w	r3, r3, #1
    a2fc:	b2db      	uxtb	r3, r3
    a2fe:	222f      	movs	r2, #47	; 0x2f
    a300:	491b      	ldr	r1, [pc, #108]	; (a370 <_calendar_init+0x94>)
    a302:	4618      	mov	r0, r3
    a304:	4b1b      	ldr	r3, [pc, #108]	; (a374 <_calendar_init+0x98>)
    a306:	4798      	blx	r3

	_rtc_dev = dev;
    a308:	4a1b      	ldr	r2, [pc, #108]	; (a378 <_calendar_init+0x9c>)
    a30a:	687b      	ldr	r3, [r7, #4]
    a30c:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    a30e:	687b      	ldr	r3, [r7, #4]
    a310:	681b      	ldr	r3, [r3, #0]
    a312:	4618      	mov	r0, r3
    a314:	4b19      	ldr	r3, [pc, #100]	; (a37c <_calendar_init+0xa0>)
    a316:	4798      	blx	r3
    a318:	4603      	mov	r3, r0
    a31a:	2b00      	cmp	r3, #0
    a31c:	d00a      	beq.n	a334 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    a31e:	687b      	ldr	r3, [r7, #4]
    a320:	681b      	ldr	r3, [r3, #0]
    a322:	4618      	mov	r0, r3
    a324:	4b16      	ldr	r3, [pc, #88]	; (a380 <_calendar_init+0xa4>)
    a326:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    a328:	687b      	ldr	r3, [r7, #4]
    a32a:	681b      	ldr	r3, [r3, #0]
    a32c:	2102      	movs	r1, #2
    a32e:	4618      	mov	r0, r3
    a330:	4b14      	ldr	r3, [pc, #80]	; (a384 <_calendar_init+0xa8>)
    a332:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    a334:	687b      	ldr	r3, [r7, #4]
    a336:	681b      	ldr	r3, [r3, #0]
    a338:	4618      	mov	r0, r3
    a33a:	4b13      	ldr	r3, [pc, #76]	; (a388 <_calendar_init+0xac>)
    a33c:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    a33e:	687b      	ldr	r3, [r7, #4]
    a340:	681b      	ldr	r3, [r3, #0]
    a342:	2101      	movs	r1, #1
    a344:	4618      	mov	r0, r3
    a346:	4b0f      	ldr	r3, [pc, #60]	; (a384 <_calendar_init+0xa8>)
    a348:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    a34a:	687b      	ldr	r3, [r7, #4]
    a34c:	681b      	ldr	r3, [r3, #0]
    a34e:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    a352:	4618      	mov	r0, r3
    a354:	4b0d      	ldr	r3, [pc, #52]	; (a38c <_calendar_init+0xb0>)
    a356:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    a358:	687b      	ldr	r3, [r7, #4]
    a35a:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    a35c:	2100      	movs	r1, #0
    a35e:	4618      	mov	r0, r3
    a360:	4b0b      	ldr	r3, [pc, #44]	; (a390 <_calendar_init+0xb4>)
    a362:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    a364:	2300      	movs	r3, #0
}
    a366:	4618      	mov	r0, r3
    a368:	3708      	adds	r7, #8
    a36a:	46bd      	mov	sp, r7
    a36c:	bd80      	pop	{r7, pc}
    a36e:	bf00      	nop
    a370:	0001fb30 	.word	0x0001fb30
    a374:	0000799d 	.word	0x0000799d
    a378:	20008870 	.word	0x20008870
    a37c:	0000a1e9 	.word	0x0000a1e9
    a380:	0000a225 	.word	0x0000a225
    a384:	0000a0fd 	.word	0x0000a0fd
    a388:	0000a18d 	.word	0x0000a18d
    a38c:	0000a255 	.word	0x0000a255
    a390:	0000a2c1 	.word	0x0000a2c1

0000a394 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    a394:	b580      	push	{r7, lr}
    a396:	b082      	sub	sp, #8
    a398:	af00      	add	r7, sp, #0
    a39a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a39c:	687b      	ldr	r3, [r7, #4]
    a39e:	2b00      	cmp	r3, #0
    a3a0:	d005      	beq.n	a3ae <_calendar_enable+0x1a>
    a3a2:	687b      	ldr	r3, [r7, #4]
    a3a4:	681b      	ldr	r3, [r3, #0]
    a3a6:	2b00      	cmp	r3, #0
    a3a8:	d001      	beq.n	a3ae <_calendar_enable+0x1a>
    a3aa:	2301      	movs	r3, #1
    a3ac:	e000      	b.n	a3b0 <_calendar_enable+0x1c>
    a3ae:	2300      	movs	r3, #0
    a3b0:	f003 0301 	and.w	r3, r3, #1
    a3b4:	b2db      	uxtb	r3, r3
    a3b6:	2275      	movs	r2, #117	; 0x75
    a3b8:	4906      	ldr	r1, [pc, #24]	; (a3d4 <_calendar_enable+0x40>)
    a3ba:	4618      	mov	r0, r3
    a3bc:	4b06      	ldr	r3, [pc, #24]	; (a3d8 <_calendar_enable+0x44>)
    a3be:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    a3c0:	687b      	ldr	r3, [r7, #4]
    a3c2:	681b      	ldr	r3, [r3, #0]
    a3c4:	4618      	mov	r0, r3
    a3c6:	4b05      	ldr	r3, [pc, #20]	; (a3dc <_calendar_enable+0x48>)
    a3c8:	4798      	blx	r3

	return ERR_NONE;
    a3ca:	2300      	movs	r3, #0
}
    a3cc:	4618      	mov	r0, r3
    a3ce:	3708      	adds	r7, #8
    a3d0:	46bd      	mov	sp, r7
    a3d2:	bd80      	pop	{r7, pc}
    a3d4:	0001fb30 	.word	0x0001fb30
    a3d8:	0000799d 	.word	0x0000799d
    a3dc:	0000a1b9 	.word	0x0000a1b9

0000a3e0 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    a3e0:	b580      	push	{r7, lr}
    a3e2:	b082      	sub	sp, #8
    a3e4:	af00      	add	r7, sp, #0
    a3e6:	6078      	str	r0, [r7, #4]
    a3e8:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    a3ea:	687b      	ldr	r3, [r7, #4]
    a3ec:	2b00      	cmp	r3, #0
    a3ee:	d005      	beq.n	a3fc <_calendar_set_counter+0x1c>
    a3f0:	687b      	ldr	r3, [r7, #4]
    a3f2:	681b      	ldr	r3, [r3, #0]
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	d001      	beq.n	a3fc <_calendar_set_counter+0x1c>
    a3f8:	2301      	movs	r3, #1
    a3fa:	e000      	b.n	a3fe <_calendar_set_counter+0x1e>
    a3fc:	2300      	movs	r3, #0
    a3fe:	f003 0301 	and.w	r3, r3, #1
    a402:	b2db      	uxtb	r3, r3
    a404:	228d      	movs	r2, #141	; 0x8d
    a406:	4907      	ldr	r1, [pc, #28]	; (a424 <_calendar_set_counter+0x44>)
    a408:	4618      	mov	r0, r3
    a40a:	4b07      	ldr	r3, [pc, #28]	; (a428 <_calendar_set_counter+0x48>)
    a40c:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    a40e:	687b      	ldr	r3, [r7, #4]
    a410:	681b      	ldr	r3, [r3, #0]
    a412:	6839      	ldr	r1, [r7, #0]
    a414:	4618      	mov	r0, r3
    a416:	4b05      	ldr	r3, [pc, #20]	; (a42c <_calendar_set_counter+0x4c>)
    a418:	4798      	blx	r3

	return ERR_NONE;
    a41a:	2300      	movs	r3, #0
}
    a41c:	4618      	mov	r0, r3
    a41e:	3708      	adds	r7, #8
    a420:	46bd      	mov	sp, r7
    a422:	bd80      	pop	{r7, pc}
    a424:	0001fb30 	.word	0x0001fb30
    a428:	0000799d 	.word	0x0000799d
    a42c:	0000a27d 	.word	0x0000a27d

0000a430 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    a430:	b580      	push	{r7, lr}
    a432:	b082      	sub	sp, #8
    a434:	af00      	add	r7, sp, #0
    a436:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    a438:	687b      	ldr	r3, [r7, #4]
    a43a:	2b00      	cmp	r3, #0
    a43c:	d005      	beq.n	a44a <_calendar_get_counter+0x1a>
    a43e:	687b      	ldr	r3, [r7, #4]
    a440:	681b      	ldr	r3, [r3, #0]
    a442:	2b00      	cmp	r3, #0
    a444:	d001      	beq.n	a44a <_calendar_get_counter+0x1a>
    a446:	2301      	movs	r3, #1
    a448:	e000      	b.n	a44c <_calendar_get_counter+0x1c>
    a44a:	2300      	movs	r3, #0
    a44c:	f003 0301 	and.w	r3, r3, #1
    a450:	b2db      	uxtb	r3, r3
    a452:	2299      	movs	r2, #153	; 0x99
    a454:	4906      	ldr	r1, [pc, #24]	; (a470 <_calendar_get_counter+0x40>)
    a456:	4618      	mov	r0, r3
    a458:	4b06      	ldr	r3, [pc, #24]	; (a474 <_calendar_get_counter+0x44>)
    a45a:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    a45c:	687b      	ldr	r3, [r7, #4]
    a45e:	681b      	ldr	r3, [r3, #0]
    a460:	4618      	mov	r0, r3
    a462:	4b05      	ldr	r3, [pc, #20]	; (a478 <_calendar_get_counter+0x48>)
    a464:	4798      	blx	r3
    a466:	4603      	mov	r3, r0
}
    a468:	4618      	mov	r0, r3
    a46a:	3708      	adds	r7, #8
    a46c:	46bd      	mov	sp, r7
    a46e:	bd80      	pop	{r7, pc}
    a470:	0001fb30 	.word	0x0001fb30
    a474:	0000799d 	.word	0x0000799d
    a478:	0000a2a1 	.word	0x0000a2a1

0000a47c <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    a47c:	b580      	push	{r7, lr}
    a47e:	b084      	sub	sp, #16
    a480:	af00      	add	r7, sp, #0
    a482:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    a484:	687b      	ldr	r3, [r7, #4]
    a486:	681b      	ldr	r3, [r3, #0]
    a488:	4618      	mov	r0, r3
    a48a:	4b19      	ldr	r3, [pc, #100]	; (a4f0 <_rtc_interrupt_handler+0x74>)
    a48c:	4798      	blx	r3
    a48e:	4603      	mov	r3, r0
    a490:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    a492:	687b      	ldr	r3, [r7, #4]
    a494:	681b      	ldr	r3, [r3, #0]
    a496:	4618      	mov	r0, r3
    a498:	4b16      	ldr	r3, [pc, #88]	; (a4f4 <_rtc_interrupt_handler+0x78>)
    a49a:	4798      	blx	r3
    a49c:	4603      	mov	r3, r0
    a49e:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    a4a0:	89fa      	ldrh	r2, [r7, #14]
    a4a2:	89bb      	ldrh	r3, [r7, #12]
    a4a4:	4013      	ands	r3, r2
    a4a6:	b29b      	uxth	r3, r3
    a4a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a4ac:	2b00      	cmp	r3, #0
    a4ae:	d009      	beq.n	a4c4 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    a4b0:	687b      	ldr	r3, [r7, #4]
    a4b2:	685b      	ldr	r3, [r3, #4]
    a4b4:	6878      	ldr	r0, [r7, #4]
    a4b6:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    a4b8:	687b      	ldr	r3, [r7, #4]
    a4ba:	681b      	ldr	r3, [r3, #0]
    a4bc:	4618      	mov	r0, r3
    a4be:	4b0e      	ldr	r3, [pc, #56]	; (a4f8 <_rtc_interrupt_handler+0x7c>)
    a4c0:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    a4c2:	e010      	b.n	a4e6 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    a4c4:	89fa      	ldrh	r2, [r7, #14]
    a4c6:	89bb      	ldrh	r3, [r7, #12]
    a4c8:	4013      	ands	r3, r2
    a4ca:	b29b      	uxth	r3, r3
    a4cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a4d0:	2b00      	cmp	r3, #0
    a4d2:	d008      	beq.n	a4e6 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    a4d4:	687b      	ldr	r3, [r7, #4]
    a4d6:	689b      	ldr	r3, [r3, #8]
    a4d8:	6878      	ldr	r0, [r7, #4]
    a4da:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    a4dc:	687b      	ldr	r3, [r7, #4]
    a4de:	681b      	ldr	r3, [r3, #0]
    a4e0:	4618      	mov	r0, r3
    a4e2:	4b06      	ldr	r3, [pc, #24]	; (a4fc <_rtc_interrupt_handler+0x80>)
    a4e4:	4798      	blx	r3
}
    a4e6:	bf00      	nop
    a4e8:	3710      	adds	r7, #16
    a4ea:	46bd      	mov	sp, r7
    a4ec:	bd80      	pop	{r7, pc}
    a4ee:	bf00      	nop
    a4f0:	0000a159 	.word	0x0000a159
    a4f4:	0000a173 	.word	0x0000a173
    a4f8:	0000a121 	.word	0x0000a121
    a4fc:	0000a13d 	.word	0x0000a13d

0000a500 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    a500:	b580      	push	{r7, lr}
    a502:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    a504:	4b03      	ldr	r3, [pc, #12]	; (a514 <RTC_Handler+0x14>)
    a506:	681b      	ldr	r3, [r3, #0]
    a508:	4618      	mov	r0, r3
    a50a:	4b03      	ldr	r3, [pc, #12]	; (a518 <RTC_Handler+0x18>)
    a50c:	4798      	blx	r3
}
    a50e:	bf00      	nop
    a510:	bd80      	pop	{r7, pc}
    a512:	bf00      	nop
    a514:	20008870 	.word	0x20008870
    a518:	0000a47d 	.word	0x0000a47d

0000a51c <__NVIC_EnableIRQ>:
{
    a51c:	b480      	push	{r7}
    a51e:	b083      	sub	sp, #12
    a520:	af00      	add	r7, sp, #0
    a522:	4603      	mov	r3, r0
    a524:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a52a:	2b00      	cmp	r3, #0
    a52c:	db0b      	blt.n	a546 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a52e:	4909      	ldr	r1, [pc, #36]	; (a554 <__NVIC_EnableIRQ+0x38>)
    a530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a534:	095b      	lsrs	r3, r3, #5
    a536:	88fa      	ldrh	r2, [r7, #6]
    a538:	f002 021f 	and.w	r2, r2, #31
    a53c:	2001      	movs	r0, #1
    a53e:	fa00 f202 	lsl.w	r2, r0, r2
    a542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a546:	bf00      	nop
    a548:	370c      	adds	r7, #12
    a54a:	46bd      	mov	sp, r7
    a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a550:	4770      	bx	lr
    a552:	bf00      	nop
    a554:	e000e100 	.word	0xe000e100

0000a558 <__NVIC_DisableIRQ>:
{
    a558:	b480      	push	{r7}
    a55a:	b083      	sub	sp, #12
    a55c:	af00      	add	r7, sp, #0
    a55e:	4603      	mov	r3, r0
    a560:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a566:	2b00      	cmp	r3, #0
    a568:	db10      	blt.n	a58c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a56a:	490b      	ldr	r1, [pc, #44]	; (a598 <__NVIC_DisableIRQ+0x40>)
    a56c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a570:	095b      	lsrs	r3, r3, #5
    a572:	88fa      	ldrh	r2, [r7, #6]
    a574:	f002 021f 	and.w	r2, r2, #31
    a578:	2001      	movs	r0, #1
    a57a:	fa00 f202 	lsl.w	r2, r0, r2
    a57e:	3320      	adds	r3, #32
    a580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    a584:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a588:	f3bf 8f6f 	isb	sy
}
    a58c:	bf00      	nop
    a58e:	370c      	adds	r7, #12
    a590:	46bd      	mov	sp, r7
    a592:	f85d 7b04 	ldr.w	r7, [sp], #4
    a596:	4770      	bx	lr
    a598:	e000e100 	.word	0xe000e100

0000a59c <__NVIC_ClearPendingIRQ>:
{
    a59c:	b480      	push	{r7}
    a59e:	b083      	sub	sp, #12
    a5a0:	af00      	add	r7, sp, #0
    a5a2:	4603      	mov	r3, r0
    a5a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a5a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a5aa:	2b00      	cmp	r3, #0
    a5ac:	db0c      	blt.n	a5c8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a5ae:	4909      	ldr	r1, [pc, #36]	; (a5d4 <__NVIC_ClearPendingIRQ+0x38>)
    a5b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a5b4:	095b      	lsrs	r3, r3, #5
    a5b6:	88fa      	ldrh	r2, [r7, #6]
    a5b8:	f002 021f 	and.w	r2, r2, #31
    a5bc:	2001      	movs	r0, #1
    a5be:	fa00 f202 	lsl.w	r2, r0, r2
    a5c2:	3360      	adds	r3, #96	; 0x60
    a5c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a5c8:	bf00      	nop
    a5ca:	370c      	adds	r7, #12
    a5cc:	46bd      	mov	sp, r7
    a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5d2:	4770      	bx	lr
    a5d4:	e000e100 	.word	0xe000e100

0000a5d8 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    a5d8:	b480      	push	{r7}
    a5da:	b083      	sub	sp, #12
    a5dc:	af00      	add	r7, sp, #0
    a5de:	6078      	str	r0, [r7, #4]
    a5e0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a5e2:	bf00      	nop
    a5e4:	687b      	ldr	r3, [r7, #4]
    a5e6:	69da      	ldr	r2, [r3, #28]
    a5e8:	683b      	ldr	r3, [r7, #0]
    a5ea:	4013      	ands	r3, r2
    a5ec:	2b00      	cmp	r3, #0
    a5ee:	d1f9      	bne.n	a5e4 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    a5f0:	bf00      	nop
    a5f2:	370c      	adds	r7, #12
    a5f4:	46bd      	mov	sp, r7
    a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5fa:	4770      	bx	lr

0000a5fc <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    a5fc:	b480      	push	{r7}
    a5fe:	b083      	sub	sp, #12
    a600:	af00      	add	r7, sp, #0
    a602:	6078      	str	r0, [r7, #4]
    a604:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    a606:	687b      	ldr	r3, [r7, #4]
    a608:	69da      	ldr	r2, [r3, #28]
    a60a:	683b      	ldr	r3, [r7, #0]
    a60c:	4013      	ands	r3, r2
    a60e:	2b00      	cmp	r3, #0
    a610:	bf14      	ite	ne
    a612:	2301      	movne	r3, #1
    a614:	2300      	moveq	r3, #0
    a616:	b2db      	uxtb	r3, r3
}
    a618:	4618      	mov	r0, r3
    a61a:	370c      	adds	r7, #12
    a61c:	46bd      	mov	sp, r7
    a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a622:	4770      	bx	lr

0000a624 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    a624:	b480      	push	{r7}
    a626:	b083      	sub	sp, #12
    a628:	af00      	add	r7, sp, #0
    a62a:	6078      	str	r0, [r7, #4]
    a62c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    a62e:	bf00      	nop
    a630:	687b      	ldr	r3, [r7, #4]
    a632:	69da      	ldr	r2, [r3, #28]
    a634:	683b      	ldr	r3, [r7, #0]
    a636:	4013      	ands	r3, r2
    a638:	2b00      	cmp	r3, #0
    a63a:	d1f9      	bne.n	a630 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    a63c:	bf00      	nop
    a63e:	370c      	adds	r7, #12
    a640:	46bd      	mov	sp, r7
    a642:	f85d 7b04 	ldr.w	r7, [sp], #4
    a646:	4770      	bx	lr

0000a648 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    a648:	b480      	push	{r7}
    a64a:	b083      	sub	sp, #12
    a64c:	af00      	add	r7, sp, #0
    a64e:	6078      	str	r0, [r7, #4]
    a650:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    a652:	687b      	ldr	r3, [r7, #4]
    a654:	69da      	ldr	r2, [r3, #28]
    a656:	683b      	ldr	r3, [r7, #0]
    a658:	4013      	ands	r3, r2
    a65a:	2b00      	cmp	r3, #0
    a65c:	bf14      	ite	ne
    a65e:	2301      	movne	r3, #1
    a660:	2300      	moveq	r3, #0
    a662:	b2db      	uxtb	r3, r3
}
    a664:	4618      	mov	r0, r3
    a666:	370c      	adds	r7, #12
    a668:	46bd      	mov	sp, r7
    a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a66e:	4770      	bx	lr

0000a670 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    a670:	b480      	push	{r7}
    a672:	b083      	sub	sp, #12
    a674:	af00      	add	r7, sp, #0
    a676:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    a678:	687b      	ldr	r3, [r7, #4]
    a67a:	2201      	movs	r2, #1
    a67c:	761a      	strb	r2, [r3, #24]
}
    a67e:	bf00      	nop
    a680:	370c      	adds	r7, #12
    a682:	46bd      	mov	sp, r7
    a684:	f85d 7b04 	ldr.w	r7, [sp], #4
    a688:	4770      	bx	lr

0000a68a <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    a68a:	b480      	push	{r7}
    a68c:	b083      	sub	sp, #12
    a68e:	af00      	add	r7, sp, #0
    a690:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    a692:	687b      	ldr	r3, [r7, #4]
    a694:	2202      	movs	r2, #2
    a696:	761a      	strb	r2, [r3, #24]
}
    a698:	bf00      	nop
    a69a:	370c      	adds	r7, #12
    a69c:	46bd      	mov	sp, r7
    a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6a2:	4770      	bx	lr

0000a6a4 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    a6a4:	b480      	push	{r7}
    a6a6:	b083      	sub	sp, #12
    a6a8:	af00      	add	r7, sp, #0
    a6aa:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    a6ac:	687b      	ldr	r3, [r7, #4]
    a6ae:	7e1b      	ldrb	r3, [r3, #24]
    a6b0:	b2db      	uxtb	r3, r3
}
    a6b2:	4618      	mov	r0, r3
    a6b4:	370c      	adds	r7, #12
    a6b6:	46bd      	mov	sp, r7
    a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6bc:	4770      	bx	lr

0000a6be <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    a6be:	b480      	push	{r7}
    a6c0:	b083      	sub	sp, #12
    a6c2:	af00      	add	r7, sp, #0
    a6c4:	6078      	str	r0, [r7, #4]
    a6c6:	460b      	mov	r3, r1
    a6c8:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    a6ca:	687b      	ldr	r3, [r7, #4]
    a6cc:	78fa      	ldrb	r2, [r7, #3]
    a6ce:	761a      	strb	r2, [r3, #24]
}
    a6d0:	bf00      	nop
    a6d2:	370c      	adds	r7, #12
    a6d4:	46bd      	mov	sp, r7
    a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6da:	4770      	bx	lr

0000a6dc <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    a6dc:	b480      	push	{r7}
    a6de:	b085      	sub	sp, #20
    a6e0:	af00      	add	r7, sp, #0
    a6e2:	6078      	str	r0, [r7, #4]
    a6e4:	460b      	mov	r3, r1
    a6e6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    a6e8:	687b      	ldr	r3, [r7, #4]
    a6ea:	7e1b      	ldrb	r3, [r3, #24]
    a6ec:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a6ee:	7bfa      	ldrb	r2, [r7, #15]
    a6f0:	78fb      	ldrb	r3, [r7, #3]
    a6f2:	4013      	ands	r3, r2
    a6f4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a6f6:	7bfb      	ldrb	r3, [r7, #15]
}
    a6f8:	4618      	mov	r0, r3
    a6fa:	3714      	adds	r7, #20
    a6fc:	46bd      	mov	sp, r7
    a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a702:	4770      	bx	lr

0000a704 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    a704:	b480      	push	{r7}
    a706:	b083      	sub	sp, #12
    a708:	af00      	add	r7, sp, #0
    a70a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    a70c:	687b      	ldr	r3, [r7, #4]
    a70e:	7e1b      	ldrb	r3, [r3, #24]
    a710:	b2db      	uxtb	r3, r3
}
    a712:	4618      	mov	r0, r3
    a714:	370c      	adds	r7, #12
    a716:	46bd      	mov	sp, r7
    a718:	f85d 7b04 	ldr.w	r7, [sp], #4
    a71c:	4770      	bx	lr

0000a71e <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    a71e:	b480      	push	{r7}
    a720:	b083      	sub	sp, #12
    a722:	af00      	add	r7, sp, #0
    a724:	6078      	str	r0, [r7, #4]
    a726:	460b      	mov	r3, r1
    a728:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    a72a:	687b      	ldr	r3, [r7, #4]
    a72c:	78fa      	ldrb	r2, [r7, #3]
    a72e:	761a      	strb	r2, [r3, #24]
}
    a730:	bf00      	nop
    a732:	370c      	adds	r7, #12
    a734:	46bd      	mov	sp, r7
    a736:	f85d 7b04 	ldr.w	r7, [sp], #4
    a73a:	4770      	bx	lr

0000a73c <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    a73c:	b480      	push	{r7}
    a73e:	b083      	sub	sp, #12
    a740:	af00      	add	r7, sp, #0
    a742:	6078      	str	r0, [r7, #4]
    a744:	460b      	mov	r3, r1
    a746:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    a748:	78fb      	ldrb	r3, [r7, #3]
    a74a:	f083 0301 	eor.w	r3, r3, #1
    a74e:	b2db      	uxtb	r3, r3
    a750:	2b00      	cmp	r3, #0
    a752:	d003      	beq.n	a75c <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    a754:	687b      	ldr	r3, [r7, #4]
    a756:	2201      	movs	r2, #1
    a758:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    a75a:	e002      	b.n	a762 <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    a75c:	687b      	ldr	r3, [r7, #4]
    a75e:	2201      	movs	r2, #1
    a760:	759a      	strb	r2, [r3, #22]
}
    a762:	bf00      	nop
    a764:	370c      	adds	r7, #12
    a766:	46bd      	mov	sp, r7
    a768:	f85d 7b04 	ldr.w	r7, [sp], #4
    a76c:	4770      	bx	lr

0000a76e <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    a76e:	b480      	push	{r7}
    a770:	b083      	sub	sp, #12
    a772:	af00      	add	r7, sp, #0
    a774:	6078      	str	r0, [r7, #4]
    a776:	460b      	mov	r3, r1
    a778:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    a77a:	78fb      	ldrb	r3, [r7, #3]
    a77c:	f083 0301 	eor.w	r3, r3, #1
    a780:	b2db      	uxtb	r3, r3
    a782:	2b00      	cmp	r3, #0
    a784:	d003      	beq.n	a78e <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    a786:	687b      	ldr	r3, [r7, #4]
    a788:	2202      	movs	r2, #2
    a78a:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    a78c:	e002      	b.n	a794 <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    a78e:	687b      	ldr	r3, [r7, #4]
    a790:	2202      	movs	r2, #2
    a792:	759a      	strb	r2, [r3, #22]
}
    a794:	bf00      	nop
    a796:	370c      	adds	r7, #12
    a798:	46bd      	mov	sp, r7
    a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a79e:	4770      	bx	lr

0000a7a0 <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    a7a0:	b480      	push	{r7}
    a7a2:	b083      	sub	sp, #12
    a7a4:	af00      	add	r7, sp, #0
    a7a6:	6078      	str	r0, [r7, #4]
    a7a8:	460b      	mov	r3, r1
    a7aa:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    a7ac:	78fb      	ldrb	r3, [r7, #3]
    a7ae:	f083 0301 	eor.w	r3, r3, #1
    a7b2:	b2db      	uxtb	r3, r3
    a7b4:	2b00      	cmp	r3, #0
    a7b6:	d003      	beq.n	a7c0 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    a7b8:	687b      	ldr	r3, [r7, #4]
    a7ba:	2280      	movs	r2, #128	; 0x80
    a7bc:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    a7be:	e002      	b.n	a7c6 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    a7c0:	687b      	ldr	r3, [r7, #4]
    a7c2:	2280      	movs	r2, #128	; 0x80
    a7c4:	759a      	strb	r2, [r3, #22]
}
    a7c6:	bf00      	nop
    a7c8:	370c      	adds	r7, #12
    a7ca:	46bd      	mov	sp, r7
    a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7d0:	4770      	bx	lr
	...

0000a7d4 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a7d4:	b580      	push	{r7, lr}
    a7d6:	b082      	sub	sp, #8
    a7d8:	af00      	add	r7, sp, #0
    a7da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    a7dc:	687b      	ldr	r3, [r7, #4]
    a7de:	681b      	ldr	r3, [r3, #0]
    a7e0:	f043 0202 	orr.w	r2, r3, #2
    a7e4:	687b      	ldr	r3, [r7, #4]
    a7e6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    a7e8:	2103      	movs	r1, #3
    a7ea:	6878      	ldr	r0, [r7, #4]
    a7ec:	4b02      	ldr	r3, [pc, #8]	; (a7f8 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    a7ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a7f0:	bf00      	nop
    a7f2:	3708      	adds	r7, #8
    a7f4:	46bd      	mov	sp, r7
    a7f6:	bd80      	pop	{r7, pc}
    a7f8:	0000a5d9 	.word	0x0000a5d9

0000a7fc <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a7fc:	b580      	push	{r7, lr}
    a7fe:	b082      	sub	sp, #8
    a800:	af00      	add	r7, sp, #0
    a802:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    a804:	687b      	ldr	r3, [r7, #4]
    a806:	681b      	ldr	r3, [r3, #0]
    a808:	f023 0202 	bic.w	r2, r3, #2
    a80c:	687b      	ldr	r3, [r7, #4]
    a80e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    a810:	2103      	movs	r1, #3
    a812:	6878      	ldr	r0, [r7, #4]
    a814:	4b02      	ldr	r3, [pc, #8]	; (a820 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    a816:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a818:	bf00      	nop
    a81a:	3708      	adds	r7, #8
    a81c:	46bd      	mov	sp, r7
    a81e:	bd80      	pop	{r7, pc}
    a820:	0000a5d9 	.word	0x0000a5d9

0000a824 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    a824:	b480      	push	{r7}
    a826:	b085      	sub	sp, #20
    a828:	af00      	add	r7, sp, #0
    a82a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    a82c:	687b      	ldr	r3, [r7, #4]
    a82e:	681b      	ldr	r3, [r3, #0]
    a830:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    a832:	68fb      	ldr	r3, [r7, #12]
    a834:	0edb      	lsrs	r3, r3, #27
    a836:	f003 0301 	and.w	r3, r3, #1
    a83a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    a83c:	68fb      	ldr	r3, [r7, #12]
    a83e:	2b00      	cmp	r3, #0
    a840:	bf14      	ite	ne
    a842:	2301      	movne	r3, #1
    a844:	2300      	moveq	r3, #0
    a846:	b2db      	uxtb	r3, r3
}
    a848:	4618      	mov	r0, r3
    a84a:	3714      	adds	r7, #20
    a84c:	46bd      	mov	sp, r7
    a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a852:	4770      	bx	lr

0000a854 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    a854:	b580      	push	{r7, lr}
    a856:	b084      	sub	sp, #16
    a858:	af00      	add	r7, sp, #0
    a85a:	6078      	str	r0, [r7, #4]
    a85c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    a85e:	2103      	movs	r1, #3
    a860:	6878      	ldr	r0, [r7, #4]
    a862:	4b07      	ldr	r3, [pc, #28]	; (a880 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    a864:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    a866:	687b      	ldr	r3, [r7, #4]
    a868:	681b      	ldr	r3, [r3, #0]
    a86a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a86c:	68fa      	ldr	r2, [r7, #12]
    a86e:	683b      	ldr	r3, [r7, #0]
    a870:	4013      	ands	r3, r2
    a872:	60fb      	str	r3, [r7, #12]
	return tmp;
    a874:	68fb      	ldr	r3, [r7, #12]
}
    a876:	4618      	mov	r0, r3
    a878:	3710      	adds	r7, #16
    a87a:	46bd      	mov	sp, r7
    a87c:	bd80      	pop	{r7, pc}
    a87e:	bf00      	nop
    a880:	0000a5d9 	.word	0x0000a5d9

0000a884 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    a884:	b580      	push	{r7, lr}
    a886:	b082      	sub	sp, #8
    a888:	af00      	add	r7, sp, #0
    a88a:	6078      	str	r0, [r7, #4]
    a88c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    a88e:	687b      	ldr	r3, [r7, #4]
    a890:	683a      	ldr	r2, [r7, #0]
    a892:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    a894:	2103      	movs	r1, #3
    a896:	6878      	ldr	r0, [r7, #4]
    a898:	4b02      	ldr	r3, [pc, #8]	; (a8a4 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    a89a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a89c:	bf00      	nop
    a89e:	3708      	adds	r7, #8
    a8a0:	46bd      	mov	sp, r7
    a8a2:	bd80      	pop	{r7, pc}
    a8a4:	0000a5d9 	.word	0x0000a5d9

0000a8a8 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    a8a8:	b580      	push	{r7, lr}
    a8aa:	b082      	sub	sp, #8
    a8ac:	af00      	add	r7, sp, #0
    a8ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    a8b0:	687b      	ldr	r3, [r7, #4]
    a8b2:	681b      	ldr	r3, [r3, #0]
    a8b4:	f043 0202 	orr.w	r2, r3, #2
    a8b8:	687b      	ldr	r3, [r7, #4]
    a8ba:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a8bc:	2103      	movs	r1, #3
    a8be:	6878      	ldr	r0, [r7, #4]
    a8c0:	4b02      	ldr	r3, [pc, #8]	; (a8cc <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    a8c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a8c4:	bf00      	nop
    a8c6:	3708      	adds	r7, #8
    a8c8:	46bd      	mov	sp, r7
    a8ca:	bd80      	pop	{r7, pc}
    a8cc:	0000a625 	.word	0x0000a625

0000a8d0 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a8d0:	b580      	push	{r7, lr}
    a8d2:	b084      	sub	sp, #16
    a8d4:	af00      	add	r7, sp, #0
    a8d6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a8d8:	2103      	movs	r1, #3
    a8da:	6878      	ldr	r0, [r7, #4]
    a8dc:	4b09      	ldr	r3, [pc, #36]	; (a904 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    a8de:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    a8e0:	687b      	ldr	r3, [r7, #4]
    a8e2:	681b      	ldr	r3, [r3, #0]
    a8e4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    a8e6:	68fb      	ldr	r3, [r7, #12]
    a8e8:	085b      	lsrs	r3, r3, #1
    a8ea:	f003 0301 	and.w	r3, r3, #1
    a8ee:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    a8f0:	68fb      	ldr	r3, [r7, #12]
    a8f2:	2b00      	cmp	r3, #0
    a8f4:	bf14      	ite	ne
    a8f6:	2301      	movne	r3, #1
    a8f8:	2300      	moveq	r3, #0
    a8fa:	b2db      	uxtb	r3, r3
}
    a8fc:	4618      	mov	r0, r3
    a8fe:	3710      	adds	r7, #16
    a900:	46bd      	mov	sp, r7
    a902:	bd80      	pop	{r7, pc}
    a904:	0000a625 	.word	0x0000a625

0000a908 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a908:	b580      	push	{r7, lr}
    a90a:	b082      	sub	sp, #8
    a90c:	af00      	add	r7, sp, #0
    a90e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    a910:	687b      	ldr	r3, [r7, #4]
    a912:	681b      	ldr	r3, [r3, #0]
    a914:	f023 0202 	bic.w	r2, r3, #2
    a918:	687b      	ldr	r3, [r7, #4]
    a91a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a91c:	2103      	movs	r1, #3
    a91e:	6878      	ldr	r0, [r7, #4]
    a920:	4b02      	ldr	r3, [pc, #8]	; (a92c <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    a922:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a924:	bf00      	nop
    a926:	3708      	adds	r7, #8
    a928:	46bd      	mov	sp, r7
    a92a:	bd80      	pop	{r7, pc}
    a92c:	0000a625 	.word	0x0000a625

0000a930 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    a930:	b580      	push	{r7, lr}
    a932:	b084      	sub	sp, #16
    a934:	af00      	add	r7, sp, #0
    a936:	6078      	str	r0, [r7, #4]
    a938:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a93a:	2103      	movs	r1, #3
    a93c:	6878      	ldr	r0, [r7, #4]
    a93e:	4b07      	ldr	r3, [pc, #28]	; (a95c <hri_sercomspi_get_CTRLA_reg+0x2c>)
    a940:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    a942:	687b      	ldr	r3, [r7, #4]
    a944:	681b      	ldr	r3, [r3, #0]
    a946:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a948:	68fa      	ldr	r2, [r7, #12]
    a94a:	683b      	ldr	r3, [r7, #0]
    a94c:	4013      	ands	r3, r2
    a94e:	60fb      	str	r3, [r7, #12]
	return tmp;
    a950:	68fb      	ldr	r3, [r7, #12]
}
    a952:	4618      	mov	r0, r3
    a954:	3710      	adds	r7, #16
    a956:	46bd      	mov	sp, r7
    a958:	bd80      	pop	{r7, pc}
    a95a:	bf00      	nop
    a95c:	0000a625 	.word	0x0000a625

0000a960 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    a960:	b580      	push	{r7, lr}
    a962:	b082      	sub	sp, #8
    a964:	af00      	add	r7, sp, #0
    a966:	6078      	str	r0, [r7, #4]
    a968:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    a96a:	687b      	ldr	r3, [r7, #4]
    a96c:	683a      	ldr	r2, [r7, #0]
    a96e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    a970:	2103      	movs	r1, #3
    a972:	6878      	ldr	r0, [r7, #4]
    a974:	4b02      	ldr	r3, [pc, #8]	; (a980 <hri_sercomspi_write_CTRLA_reg+0x20>)
    a976:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a978:	bf00      	nop
    a97a:	3708      	adds	r7, #8
    a97c:	46bd      	mov	sp, r7
    a97e:	bd80      	pop	{r7, pc}
    a980:	0000a625 	.word	0x0000a625

0000a984 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    a984:	b580      	push	{r7, lr}
    a986:	b082      	sub	sp, #8
    a988:	af00      	add	r7, sp, #0
    a98a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    a98c:	687b      	ldr	r3, [r7, #4]
    a98e:	685b      	ldr	r3, [r3, #4]
    a990:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    a994:	687b      	ldr	r3, [r7, #4]
    a996:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a998:	2104      	movs	r1, #4
    a99a:	6878      	ldr	r0, [r7, #4]
    a99c:	4b02      	ldr	r3, [pc, #8]	; (a9a8 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    a99e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a9a0:	bf00      	nop
    a9a2:	3708      	adds	r7, #8
    a9a4:	46bd      	mov	sp, r7
    a9a6:	bd80      	pop	{r7, pc}
    a9a8:	0000a5d9 	.word	0x0000a5d9

0000a9ac <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    a9ac:	b580      	push	{r7, lr}
    a9ae:	b082      	sub	sp, #8
    a9b0:	af00      	add	r7, sp, #0
    a9b2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    a9b4:	687b      	ldr	r3, [r7, #4]
    a9b6:	685b      	ldr	r3, [r3, #4]
    a9b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    a9bc:	687b      	ldr	r3, [r7, #4]
    a9be:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a9c0:	2104      	movs	r1, #4
    a9c2:	6878      	ldr	r0, [r7, #4]
    a9c4:	4b02      	ldr	r3, [pc, #8]	; (a9d0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    a9c6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a9c8:	bf00      	nop
    a9ca:	3708      	adds	r7, #8
    a9cc:	46bd      	mov	sp, r7
    a9ce:	bd80      	pop	{r7, pc}
    a9d0:	0000a5d9 	.word	0x0000a5d9

0000a9d4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    a9d4:	b580      	push	{r7, lr}
    a9d6:	b082      	sub	sp, #8
    a9d8:	af00      	add	r7, sp, #0
    a9da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a9dc:	687b      	ldr	r3, [r7, #4]
    a9de:	685b      	ldr	r3, [r3, #4]
    a9e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    a9e4:	687b      	ldr	r3, [r7, #4]
    a9e6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    a9e8:	2104      	movs	r1, #4
    a9ea:	6878      	ldr	r0, [r7, #4]
    a9ec:	4b02      	ldr	r3, [pc, #8]	; (a9f8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    a9ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    a9f0:	bf00      	nop
    a9f2:	3708      	adds	r7, #8
    a9f4:	46bd      	mov	sp, r7
    a9f6:	bd80      	pop	{r7, pc}
    a9f8:	0000a5d9 	.word	0x0000a5d9

0000a9fc <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    a9fc:	b580      	push	{r7, lr}
    a9fe:	b082      	sub	sp, #8
    aa00:	af00      	add	r7, sp, #0
    aa02:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    aa04:	687b      	ldr	r3, [r7, #4]
    aa06:	685b      	ldr	r3, [r3, #4]
    aa08:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    aa0c:	687b      	ldr	r3, [r7, #4]
    aa0e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aa10:	2104      	movs	r1, #4
    aa12:	6878      	ldr	r0, [r7, #4]
    aa14:	4b02      	ldr	r3, [pc, #8]	; (aa20 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    aa16:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aa18:	bf00      	nop
    aa1a:	3708      	adds	r7, #8
    aa1c:	46bd      	mov	sp, r7
    aa1e:	bd80      	pop	{r7, pc}
    aa20:	0000a5d9 	.word	0x0000a5d9

0000aa24 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    aa24:	b580      	push	{r7, lr}
    aa26:	b082      	sub	sp, #8
    aa28:	af00      	add	r7, sp, #0
    aa2a:	6078      	str	r0, [r7, #4]
    aa2c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    aa2e:	687b      	ldr	r3, [r7, #4]
    aa30:	685a      	ldr	r2, [r3, #4]
    aa32:	683b      	ldr	r3, [r7, #0]
    aa34:	041b      	lsls	r3, r3, #16
    aa36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    aa3a:	431a      	orrs	r2, r3
    aa3c:	687b      	ldr	r3, [r7, #4]
    aa3e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aa40:	2104      	movs	r1, #4
    aa42:	6878      	ldr	r0, [r7, #4]
    aa44:	4b02      	ldr	r3, [pc, #8]	; (aa50 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    aa46:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aa48:	bf00      	nop
    aa4a:	3708      	adds	r7, #8
    aa4c:	46bd      	mov	sp, r7
    aa4e:	bd80      	pop	{r7, pc}
    aa50:	0000a5d9 	.word	0x0000a5d9

0000aa54 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    aa54:	b580      	push	{r7, lr}
    aa56:	b082      	sub	sp, #8
    aa58:	af00      	add	r7, sp, #0
    aa5a:	6078      	str	r0, [r7, #4]
    aa5c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    aa5e:	687b      	ldr	r3, [r7, #4]
    aa60:	683a      	ldr	r2, [r7, #0]
    aa62:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aa64:	2104      	movs	r1, #4
    aa66:	6878      	ldr	r0, [r7, #4]
    aa68:	4b02      	ldr	r3, [pc, #8]	; (aa74 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    aa6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aa6c:	bf00      	nop
    aa6e:	3708      	adds	r7, #8
    aa70:	46bd      	mov	sp, r7
    aa72:	bd80      	pop	{r7, pc}
    aa74:	0000a5d9 	.word	0x0000a5d9

0000aa78 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    aa78:	b580      	push	{r7, lr}
    aa7a:	b082      	sub	sp, #8
    aa7c:	af00      	add	r7, sp, #0
    aa7e:	6078      	str	r0, [r7, #4]
    aa80:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    aa82:	687b      	ldr	r3, [r7, #4]
    aa84:	683a      	ldr	r2, [r7, #0]
    aa86:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    aa88:	2117      	movs	r1, #23
    aa8a:	6878      	ldr	r0, [r7, #4]
    aa8c:	4b02      	ldr	r3, [pc, #8]	; (aa98 <hri_sercomspi_write_CTRLB_reg+0x20>)
    aa8e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aa90:	bf00      	nop
    aa92:	3708      	adds	r7, #8
    aa94:	46bd      	mov	sp, r7
    aa96:	bd80      	pop	{r7, pc}
    aa98:	0000a625 	.word	0x0000a625

0000aa9c <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    aa9c:	b480      	push	{r7}
    aa9e:	b083      	sub	sp, #12
    aaa0:	af00      	add	r7, sp, #0
    aaa2:	6078      	str	r0, [r7, #4]
    aaa4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    aaa6:	687b      	ldr	r3, [r7, #4]
    aaa8:	683a      	ldr	r2, [r7, #0]
    aaaa:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aaac:	bf00      	nop
    aaae:	370c      	adds	r7, #12
    aab0:	46bd      	mov	sp, r7
    aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    aab6:	4770      	bx	lr

0000aab8 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    aab8:	b480      	push	{r7}
    aaba:	b083      	sub	sp, #12
    aabc:	af00      	add	r7, sp, #0
    aabe:	6078      	str	r0, [r7, #4]
    aac0:	460b      	mov	r3, r1
    aac2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    aac4:	687b      	ldr	r3, [r7, #4]
    aac6:	78fa      	ldrb	r2, [r7, #3]
    aac8:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    aaca:	bf00      	nop
    aacc:	370c      	adds	r7, #12
    aace:	46bd      	mov	sp, r7
    aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
    aad4:	4770      	bx	lr
	...

0000aad8 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    aad8:	b580      	push	{r7, lr}
    aada:	b084      	sub	sp, #16
    aadc:	af00      	add	r7, sp, #0
    aade:	6078      	str	r0, [r7, #4]
    aae0:	460b      	mov	r3, r1
    aae2:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    aae4:	687b      	ldr	r3, [r7, #4]
    aae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aae8:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    aaea:	68fb      	ldr	r3, [r7, #12]
    aaec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    aaf0:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    aaf2:	78fb      	ldrb	r3, [r7, #3]
    aaf4:	039b      	lsls	r3, r3, #14
    aaf6:	461a      	mov	r2, r3
    aaf8:	68fb      	ldr	r3, [r7, #12]
    aafa:	4313      	orrs	r3, r2
    aafc:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    aafe:	687b      	ldr	r3, [r7, #4]
    ab00:	68fa      	ldr	r2, [r7, #12]
    ab02:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ab04:	2104      	movs	r1, #4
    ab06:	6878      	ldr	r0, [r7, #4]
    ab08:	4b02      	ldr	r3, [pc, #8]	; (ab14 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    ab0a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ab0c:	bf00      	nop
    ab0e:	3710      	adds	r7, #16
    ab10:	46bd      	mov	sp, r7
    ab12:	bd80      	pop	{r7, pc}
    ab14:	0000a5d9 	.word	0x0000a5d9

0000ab18 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    ab18:	b580      	push	{r7, lr}
    ab1a:	b082      	sub	sp, #8
    ab1c:	af00      	add	r7, sp, #0
    ab1e:	6078      	str	r0, [r7, #4]
    ab20:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    ab22:	687b      	ldr	r3, [r7, #4]
    ab24:	683a      	ldr	r2, [r7, #0]
    ab26:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ab28:	2104      	movs	r1, #4
    ab2a:	6878      	ldr	r0, [r7, #4]
    ab2c:	4b02      	ldr	r3, [pc, #8]	; (ab38 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    ab2e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ab30:	bf00      	nop
    ab32:	3708      	adds	r7, #8
    ab34:	46bd      	mov	sp, r7
    ab36:	bd80      	pop	{r7, pc}
    ab38:	0000a5d9 	.word	0x0000a5d9

0000ab3c <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    ab3c:	b580      	push	{r7, lr}
    ab3e:	b082      	sub	sp, #8
    ab40:	af00      	add	r7, sp, #0
    ab42:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ab44:	2104      	movs	r1, #4
    ab46:	6878      	ldr	r0, [r7, #4]
    ab48:	4b03      	ldr	r3, [pc, #12]	; (ab58 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    ab4a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    ab4c:	687b      	ldr	r3, [r7, #4]
    ab4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    ab50:	4618      	mov	r0, r3
    ab52:	3708      	adds	r7, #8
    ab54:	46bd      	mov	sp, r7
    ab56:	bd80      	pop	{r7, pc}
    ab58:	0000a5d9 	.word	0x0000a5d9

0000ab5c <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    ab5c:	b480      	push	{r7}
    ab5e:	b083      	sub	sp, #12
    ab60:	af00      	add	r7, sp, #0
    ab62:	6078      	str	r0, [r7, #4]
    ab64:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    ab66:	687b      	ldr	r3, [r7, #4]
    ab68:	683a      	ldr	r2, [r7, #0]
    ab6a:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ab6c:	bf00      	nop
    ab6e:	370c      	adds	r7, #12
    ab70:	46bd      	mov	sp, r7
    ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab76:	4770      	bx	lr

0000ab78 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    ab78:	b580      	push	{r7, lr}
    ab7a:	b082      	sub	sp, #8
    ab7c:	af00      	add	r7, sp, #0
    ab7e:	6078      	str	r0, [r7, #4]
    ab80:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    ab82:	687b      	ldr	r3, [r7, #4]
    ab84:	683a      	ldr	r2, [r7, #0]
    ab86:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ab88:	2104      	movs	r1, #4
    ab8a:	6878      	ldr	r0, [r7, #4]
    ab8c:	4b02      	ldr	r3, [pc, #8]	; (ab98 <hri_sercomi2cm_write_DATA_reg+0x20>)
    ab8e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ab90:	bf00      	nop
    ab92:	3708      	adds	r7, #8
    ab94:	46bd      	mov	sp, r7
    ab96:	bd80      	pop	{r7, pc}
    ab98:	0000a5d9 	.word	0x0000a5d9

0000ab9c <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    ab9c:	b580      	push	{r7, lr}
    ab9e:	b082      	sub	sp, #8
    aba0:	af00      	add	r7, sp, #0
    aba2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    aba4:	2104      	movs	r1, #4
    aba6:	6878      	ldr	r0, [r7, #4]
    aba8:	4b03      	ldr	r3, [pc, #12]	; (abb8 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    abaa:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    abac:	687b      	ldr	r3, [r7, #4]
    abae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    abb0:	4618      	mov	r0, r3
    abb2:	3708      	adds	r7, #8
    abb4:	46bd      	mov	sp, r7
    abb6:	bd80      	pop	{r7, pc}
    abb8:	0000a5d9 	.word	0x0000a5d9

0000abbc <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    abbc:	b480      	push	{r7}
    abbe:	b083      	sub	sp, #12
    abc0:	af00      	add	r7, sp, #0
    abc2:	6078      	str	r0, [r7, #4]
    abc4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    abc6:	687b      	ldr	r3, [r7, #4]
    abc8:	683a      	ldr	r2, [r7, #0]
    abca:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    abcc:	bf00      	nop
    abce:	370c      	adds	r7, #12
    abd0:	46bd      	mov	sp, r7
    abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    abd6:	4770      	bx	lr

0000abd8 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    abd8:	b480      	push	{r7}
    abda:	b083      	sub	sp, #12
    abdc:	af00      	add	r7, sp, #0
    abde:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    abe0:	687b      	ldr	r3, [r7, #4]
    abe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    abe4:	4618      	mov	r0, r3
    abe6:	370c      	adds	r7, #12
    abe8:	46bd      	mov	sp, r7
    abea:	f85d 7b04 	ldr.w	r7, [sp], #4
    abee:	4770      	bx	lr

0000abf0 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    abf0:	b480      	push	{r7}
    abf2:	b083      	sub	sp, #12
    abf4:	af00      	add	r7, sp, #0
    abf6:	6078      	str	r0, [r7, #4]
    abf8:	460b      	mov	r3, r1
    abfa:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    abfc:	687b      	ldr	r3, [r7, #4]
    abfe:	78fa      	ldrb	r2, [r7, #3]
    ac00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ac04:	bf00      	nop
    ac06:	370c      	adds	r7, #12
    ac08:	46bd      	mov	sp, r7
    ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac0e:	4770      	bx	lr

0000ac10 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    ac10:	b480      	push	{r7}
    ac12:	b083      	sub	sp, #12
    ac14:	af00      	add	r7, sp, #0
    ac16:	6078      	str	r0, [r7, #4]
    ac18:	460b      	mov	r3, r1
    ac1a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    ac1c:	687b      	ldr	r3, [r7, #4]
    ac1e:	887a      	ldrh	r2, [r7, #2]
    ac20:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ac22:	bf00      	nop
    ac24:	370c      	adds	r7, #12
    ac26:	46bd      	mov	sp, r7
    ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac2c:	4770      	bx	lr
	...

0000ac30 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    ac30:	b580      	push	{r7, lr}
    ac32:	b082      	sub	sp, #8
    ac34:	af00      	add	r7, sp, #0
    ac36:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ac38:	2104      	movs	r1, #4
    ac3a:	6878      	ldr	r0, [r7, #4]
    ac3c:	4b06      	ldr	r3, [pc, #24]	; (ac58 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    ac3e:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    ac40:	687b      	ldr	r3, [r7, #4]
    ac42:	8b5b      	ldrh	r3, [r3, #26]
    ac44:	b29b      	uxth	r3, r3
    ac46:	091b      	lsrs	r3, r3, #4
    ac48:	b29b      	uxth	r3, r3
    ac4a:	f003 0303 	and.w	r3, r3, #3
    ac4e:	b29b      	uxth	r3, r3
}
    ac50:	4618      	mov	r0, r3
    ac52:	3708      	adds	r7, #8
    ac54:	46bd      	mov	sp, r7
    ac56:	bd80      	pop	{r7, pc}
    ac58:	0000a5d9 	.word	0x0000a5d9

0000ac5c <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    ac5c:	b580      	push	{r7, lr}
    ac5e:	b082      	sub	sp, #8
    ac60:	af00      	add	r7, sp, #0
    ac62:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ac64:	2104      	movs	r1, #4
    ac66:	6878      	ldr	r0, [r7, #4]
    ac68:	4b04      	ldr	r3, [pc, #16]	; (ac7c <hri_sercomi2cm_read_STATUS_reg+0x20>)
    ac6a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    ac6c:	687b      	ldr	r3, [r7, #4]
    ac6e:	8b5b      	ldrh	r3, [r3, #26]
    ac70:	b29b      	uxth	r3, r3
}
    ac72:	4618      	mov	r0, r3
    ac74:	3708      	adds	r7, #8
    ac76:	46bd      	mov	sp, r7
    ac78:	bd80      	pop	{r7, pc}
    ac7a:	bf00      	nop
    ac7c:	0000a5d9 	.word	0x0000a5d9

0000ac80 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    ac80:	b580      	push	{r7, lr}
    ac82:	b082      	sub	sp, #8
    ac84:	af00      	add	r7, sp, #0
    ac86:	6078      	str	r0, [r7, #4]
    ac88:	460b      	mov	r3, r1
    ac8a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    ac8c:	687b      	ldr	r3, [r7, #4]
    ac8e:	887a      	ldrh	r2, [r7, #2]
    ac90:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ac92:	2104      	movs	r1, #4
    ac94:	6878      	ldr	r0, [r7, #4]
    ac96:	4b03      	ldr	r3, [pc, #12]	; (aca4 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    ac98:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    ac9a:	bf00      	nop
    ac9c:	3708      	adds	r7, #8
    ac9e:	46bd      	mov	sp, r7
    aca0:	bd80      	pop	{r7, pc}
    aca2:	bf00      	nop
    aca4:	0000a5d9 	.word	0x0000a5d9

0000aca8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    aca8:	b4b0      	push	{r4, r5, r7}
    acaa:	b08d      	sub	sp, #52	; 0x34
    acac:	af00      	add	r7, sp, #0
    acae:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    acb0:	4b13      	ldr	r3, [pc, #76]	; (ad00 <_sercom_get_hardware_index+0x58>)
    acb2:	f107 040c 	add.w	r4, r7, #12
    acb6:	461d      	mov	r5, r3
    acb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    acba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    acbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    acc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    acc4:	2300      	movs	r3, #0
    acc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    acc8:	e010      	b.n	acec <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    acca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    accc:	009b      	lsls	r3, r3, #2
    acce:	f107 0230 	add.w	r2, r7, #48	; 0x30
    acd2:	4413      	add	r3, r2
    acd4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    acd8:	461a      	mov	r2, r3
    acda:	687b      	ldr	r3, [r7, #4]
    acdc:	429a      	cmp	r2, r3
    acde:	d102      	bne.n	ace6 <_sercom_get_hardware_index+0x3e>
			return i;
    ace0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ace2:	b2db      	uxtb	r3, r3
    ace4:	e006      	b.n	acf4 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ace6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ace8:	3301      	adds	r3, #1
    acea:	62fb      	str	r3, [r7, #44]	; 0x2c
    acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    acee:	2b07      	cmp	r3, #7
    acf0:	d9eb      	bls.n	acca <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    acf2:	2300      	movs	r3, #0
}
    acf4:	4618      	mov	r0, r3
    acf6:	3734      	adds	r7, #52	; 0x34
    acf8:	46bd      	mov	sp, r7
    acfa:	bcb0      	pop	{r4, r5, r7}
    acfc:	4770      	bx	lr
    acfe:	bf00      	nop
    ad00:	0001fb64 	.word	0x0001fb64

0000ad04 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    ad04:	b480      	push	{r7}
    ad06:	b083      	sub	sp, #12
    ad08:	af00      	add	r7, sp, #0
    ad0a:	6078      	str	r0, [r7, #4]
    ad0c:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM5) {
    ad0e:	687b      	ldr	r3, [r7, #4]
    ad10:	4a09      	ldr	r2, [pc, #36]	; (ad38 <_sercom_init_irq_param+0x34>)
    ad12:	4293      	cmp	r3, r2
    ad14:	d102      	bne.n	ad1c <_sercom_init_irq_param+0x18>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    ad16:	4a09      	ldr	r2, [pc, #36]	; (ad3c <_sercom_init_irq_param+0x38>)
    ad18:	683b      	ldr	r3, [r7, #0]
    ad1a:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    ad1c:	687b      	ldr	r3, [r7, #4]
    ad1e:	4a08      	ldr	r2, [pc, #32]	; (ad40 <_sercom_init_irq_param+0x3c>)
    ad20:	4293      	cmp	r3, r2
    ad22:	d102      	bne.n	ad2a <_sercom_init_irq_param+0x26>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    ad24:	4a07      	ldr	r2, [pc, #28]	; (ad44 <_sercom_init_irq_param+0x40>)
    ad26:	683b      	ldr	r3, [r7, #0]
    ad28:	6013      	str	r3, [r2, #0]
	}
}
    ad2a:	bf00      	nop
    ad2c:	370c      	adds	r7, #12
    ad2e:	46bd      	mov	sp, r7
    ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad34:	4770      	bx	lr
    ad36:	bf00      	nop
    ad38:	43000400 	.word	0x43000400
    ad3c:	2000888c 	.word	0x2000888c
    ad40:	43000c00 	.word	0x43000c00
    ad44:	20008890 	.word	0x20008890

0000ad48 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    ad48:	b580      	push	{r7, lr}
    ad4a:	b084      	sub	sp, #16
    ad4c:	af00      	add	r7, sp, #0
    ad4e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    ad50:	6878      	ldr	r0, [r7, #4]
    ad52:	4b13      	ldr	r3, [pc, #76]	; (ada0 <_get_i2cm_index+0x58>)
    ad54:	4798      	blx	r3
    ad56:	4603      	mov	r3, r0
    ad58:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    ad5a:	2300      	movs	r3, #0
    ad5c:	73fb      	strb	r3, [r7, #15]
    ad5e:	e010      	b.n	ad82 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    ad60:	7bfa      	ldrb	r2, [r7, #15]
    ad62:	4910      	ldr	r1, [pc, #64]	; (ada4 <_get_i2cm_index+0x5c>)
    ad64:	4613      	mov	r3, r2
    ad66:	005b      	lsls	r3, r3, #1
    ad68:	4413      	add	r3, r2
    ad6a:	00db      	lsls	r3, r3, #3
    ad6c:	440b      	add	r3, r1
    ad6e:	781b      	ldrb	r3, [r3, #0]
    ad70:	7bba      	ldrb	r2, [r7, #14]
    ad72:	429a      	cmp	r2, r3
    ad74:	d102      	bne.n	ad7c <_get_i2cm_index+0x34>
			return i;
    ad76:	f997 300f 	ldrsb.w	r3, [r7, #15]
    ad7a:	e00d      	b.n	ad98 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    ad7c:	7bfb      	ldrb	r3, [r7, #15]
    ad7e:	3301      	adds	r3, #1
    ad80:	73fb      	strb	r3, [r7, #15]
    ad82:	7bfb      	ldrb	r3, [r7, #15]
    ad84:	2b02      	cmp	r3, #2
    ad86:	d9eb      	bls.n	ad60 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    ad88:	f240 32b2 	movw	r2, #946	; 0x3b2
    ad8c:	4906      	ldr	r1, [pc, #24]	; (ada8 <_get_i2cm_index+0x60>)
    ad8e:	2000      	movs	r0, #0
    ad90:	4b06      	ldr	r3, [pc, #24]	; (adac <_get_i2cm_index+0x64>)
    ad92:	4798      	blx	r3
	return -1;
    ad94:	f04f 33ff 	mov.w	r3, #4294967295
}
    ad98:	4618      	mov	r0, r3
    ad9a:	3710      	adds	r7, #16
    ad9c:	46bd      	mov	sp, r7
    ad9e:	bd80      	pop	{r7, pc}
    ada0:	0000aca9 	.word	0x0000aca9
    ada4:	2000007c 	.word	0x2000007c
    ada8:	0001fb48 	.word	0x0001fb48
    adac:	0000799d 	.word	0x0000799d

0000adb0 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    adb0:	b580      	push	{r7, lr}
    adb2:	b082      	sub	sp, #8
    adb4:	af00      	add	r7, sp, #0
    adb6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    adb8:	2103      	movs	r1, #3
    adba:	6878      	ldr	r0, [r7, #4]
    adbc:	4b02      	ldr	r3, [pc, #8]	; (adc8 <_sercom_i2c_send_stop+0x18>)
    adbe:	4798      	blx	r3
}
    adc0:	bf00      	nop
    adc2:	3708      	adds	r7, #8
    adc4:	46bd      	mov	sp, r7
    adc6:	bd80      	pop	{r7, pc}
    adc8:	0000aa25 	.word	0x0000aa25

0000adcc <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    adcc:	b590      	push	{r4, r7, lr}
    adce:	b087      	sub	sp, #28
    add0:	af00      	add	r7, sp, #0
    add2:	60f8      	str	r0, [r7, #12]
    add4:	60b9      	str	r1, [r7, #8]
    add6:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    add8:	68f8      	ldr	r0, [r7, #12]
    adda:	4b7d      	ldr	r3, [pc, #500]	; (afd0 <_sercom_i2c_sync_analyse_flags+0x204>)
    addc:	4798      	blx	r3
    adde:	4603      	mov	r3, r0
    ade0:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    ade2:	68f8      	ldr	r0, [r7, #12]
    ade4:	4b7b      	ldr	r3, [pc, #492]	; (afd4 <_sercom_i2c_sync_analyse_flags+0x208>)
    ade6:	4798      	blx	r3
    ade8:	4603      	mov	r3, r0
    adea:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    adec:	68bb      	ldr	r3, [r7, #8]
    adee:	f003 0301 	and.w	r3, r3, #1
    adf2:	2b00      	cmp	r3, #0
    adf4:	f000 8095 	beq.w	af22 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    adf8:	8a7b      	ldrh	r3, [r7, #18]
    adfa:	f003 0302 	and.w	r3, r3, #2
    adfe:	2b00      	cmp	r3, #0
    ae00:	d01d      	beq.n	ae3e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    ae02:	68f8      	ldr	r0, [r7, #12]
    ae04:	4b74      	ldr	r3, [pc, #464]	; (afd8 <_sercom_i2c_sync_analyse_flags+0x20c>)
    ae06:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    ae08:	687b      	ldr	r3, [r7, #4]
    ae0a:	885b      	ldrh	r3, [r3, #2]
    ae0c:	b29b      	uxth	r3, r3
    ae0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ae12:	b29a      	uxth	r2, r3
    ae14:	687b      	ldr	r3, [r7, #4]
    ae16:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    ae18:	687b      	ldr	r3, [r7, #4]
    ae1a:	885b      	ldrh	r3, [r3, #2]
    ae1c:	b29b      	uxth	r3, r3
    ae1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ae22:	b29a      	uxth	r2, r3
    ae24:	687b      	ldr	r3, [r7, #4]
    ae26:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    ae28:	8a7b      	ldrh	r3, [r7, #18]
    ae2a:	f003 0301 	and.w	r3, r3, #1
    ae2e:	2b00      	cmp	r3, #0
    ae30:	d002      	beq.n	ae38 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    ae32:	f06f 0304 	mvn.w	r3, #4
    ae36:	e0c6      	b.n	afc6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    ae38:	f06f 0303 	mvn.w	r3, #3
    ae3c:	e0c3      	b.n	afc6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    ae3e:	8a7b      	ldrh	r3, [r7, #18]
    ae40:	f003 0304 	and.w	r3, r3, #4
    ae44:	2b00      	cmp	r3, #0
    ae46:	d01f      	beq.n	ae88 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    ae48:	687b      	ldr	r3, [r7, #4]
    ae4a:	685b      	ldr	r3, [r3, #4]
    ae4c:	2b00      	cmp	r3, #0
    ae4e:	dd07      	ble.n	ae60 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    ae50:	687b      	ldr	r3, [r7, #4]
    ae52:	885b      	ldrh	r3, [r3, #2]
    ae54:	b29b      	uxth	r3, r3
    ae56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ae5a:	b29a      	uxth	r2, r3
    ae5c:	687b      	ldr	r3, [r7, #4]
    ae5e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    ae60:	687b      	ldr	r3, [r7, #4]
    ae62:	885b      	ldrh	r3, [r3, #2]
    ae64:	b29b      	uxth	r3, r3
    ae66:	b21b      	sxth	r3, r3
    ae68:	2b00      	cmp	r3, #0
    ae6a:	da02      	bge.n	ae72 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    ae6c:	68f8      	ldr	r0, [r7, #12]
    ae6e:	4b5b      	ldr	r3, [pc, #364]	; (afdc <_sercom_i2c_sync_analyse_flags+0x210>)
    ae70:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    ae72:	687b      	ldr	r3, [r7, #4]
    ae74:	885b      	ldrh	r3, [r3, #2]
    ae76:	b29b      	uxth	r3, r3
    ae78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ae7c:	b29a      	uxth	r2, r3
    ae7e:	687b      	ldr	r3, [r7, #4]
    ae80:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    ae82:	f06f 0301 	mvn.w	r3, #1
    ae86:	e09e      	b.n	afc6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    ae88:	687b      	ldr	r3, [r7, #4]
    ae8a:	885b      	ldrh	r3, [r3, #2]
    ae8c:	b29b      	uxth	r3, r3
    ae8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ae92:	2b00      	cmp	r3, #0
    ae94:	d01c      	beq.n	aed0 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    ae96:	687b      	ldr	r3, [r7, #4]
    ae98:	881b      	ldrh	r3, [r3, #0]
    ae9a:	121b      	asrs	r3, r3, #8
    ae9c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    ae9e:	f003 0406 	and.w	r4, r3, #6
    aea2:	68f8      	ldr	r0, [r7, #12]
    aea4:	4b4e      	ldr	r3, [pc, #312]	; (afe0 <_sercom_i2c_sync_analyse_flags+0x214>)
    aea6:	4798      	blx	r3
    aea8:	4603      	mov	r3, r0
    aeaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    aeae:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    aeb0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    aeb4:	4619      	mov	r1, r3
    aeb6:	68f8      	ldr	r0, [r7, #12]
    aeb8:	4b4a      	ldr	r3, [pc, #296]	; (afe4 <_sercom_i2c_sync_analyse_flags+0x218>)
    aeba:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    aebc:	687b      	ldr	r3, [r7, #4]
    aebe:	885b      	ldrh	r3, [r3, #2]
    aec0:	b29b      	uxth	r3, r3
    aec2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    aec6:	b29a      	uxth	r2, r3
    aec8:	687b      	ldr	r3, [r7, #4]
    aeca:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    aecc:	2300      	movs	r3, #0
    aece:	e07a      	b.n	afc6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    aed0:	687b      	ldr	r3, [r7, #4]
    aed2:	685b      	ldr	r3, [r3, #4]
    aed4:	2b00      	cmp	r3, #0
    aed6:	d111      	bne.n	aefc <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    aed8:	687b      	ldr	r3, [r7, #4]
    aeda:	885b      	ldrh	r3, [r3, #2]
    aedc:	b29b      	uxth	r3, r3
    aede:	b21b      	sxth	r3, r3
    aee0:	2b00      	cmp	r3, #0
    aee2:	da02      	bge.n	aeea <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    aee4:	68f8      	ldr	r0, [r7, #12]
    aee6:	4b3d      	ldr	r3, [pc, #244]	; (afdc <_sercom_i2c_sync_analyse_flags+0x210>)
    aee8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    aeea:	687b      	ldr	r3, [r7, #4]
    aeec:	885b      	ldrh	r3, [r3, #2]
    aeee:	b29b      	uxth	r3, r3
    aef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    aef4:	b29a      	uxth	r2, r3
    aef6:	687b      	ldr	r3, [r7, #4]
    aef8:	805a      	strh	r2, [r3, #2]
    aefa:	e010      	b.n	af1e <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    aefc:	687b      	ldr	r3, [r7, #4]
    aefe:	689b      	ldr	r3, [r3, #8]
    af00:	781b      	ldrb	r3, [r3, #0]
    af02:	4619      	mov	r1, r3
    af04:	68f8      	ldr	r0, [r7, #12]
    af06:	4b38      	ldr	r3, [pc, #224]	; (afe8 <_sercom_i2c_sync_analyse_flags+0x21c>)
    af08:	4798      	blx	r3
				msg->buffer++;
    af0a:	687b      	ldr	r3, [r7, #4]
    af0c:	689b      	ldr	r3, [r3, #8]
    af0e:	1c5a      	adds	r2, r3, #1
    af10:	687b      	ldr	r3, [r7, #4]
    af12:	609a      	str	r2, [r3, #8]
				msg->len--;
    af14:	687b      	ldr	r3, [r7, #4]
    af16:	685b      	ldr	r3, [r3, #4]
    af18:	1e5a      	subs	r2, r3, #1
    af1a:	687b      	ldr	r3, [r7, #4]
    af1c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    af1e:	2300      	movs	r3, #0
    af20:	e051      	b.n	afc6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    af22:	68bb      	ldr	r3, [r7, #8]
    af24:	f003 0302 	and.w	r3, r3, #2
    af28:	2b00      	cmp	r3, #0
    af2a:	d04b      	beq.n	afc4 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    af2c:	687b      	ldr	r3, [r7, #4]
    af2e:	685b      	ldr	r3, [r3, #4]
    af30:	2b00      	cmp	r3, #0
    af32:	d041      	beq.n	afb8 <_sercom_i2c_sync_analyse_flags+0x1ec>
    af34:	8a7b      	ldrh	r3, [r7, #18]
    af36:	f003 0304 	and.w	r3, r3, #4
    af3a:	2b00      	cmp	r3, #0
    af3c:	d13c      	bne.n	afb8 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    af3e:	687b      	ldr	r3, [r7, #4]
    af40:	685b      	ldr	r3, [r3, #4]
    af42:	1e5a      	subs	r2, r3, #1
    af44:	687b      	ldr	r3, [r7, #4]
    af46:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    af48:	687b      	ldr	r3, [r7, #4]
    af4a:	685b      	ldr	r3, [r3, #4]
    af4c:	2b00      	cmp	r3, #0
    af4e:	d102      	bne.n	af56 <_sercom_i2c_sync_analyse_flags+0x18a>
    af50:	697b      	ldr	r3, [r7, #20]
    af52:	2b00      	cmp	r3, #0
    af54:	d006      	beq.n	af64 <_sercom_i2c_sync_analyse_flags+0x198>
    af56:	687b      	ldr	r3, [r7, #4]
    af58:	685b      	ldr	r3, [r3, #4]
    af5a:	2b01      	cmp	r3, #1
    af5c:	d105      	bne.n	af6a <_sercom_i2c_sync_analyse_flags+0x19e>
    af5e:	697b      	ldr	r3, [r7, #20]
    af60:	2b00      	cmp	r3, #0
    af62:	d002      	beq.n	af6a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    af64:	68f8      	ldr	r0, [r7, #12]
    af66:	4b21      	ldr	r3, [pc, #132]	; (afec <_sercom_i2c_sync_analyse_flags+0x220>)
    af68:	4798      	blx	r3
			}

			if (msg->len == 0) {
    af6a:	687b      	ldr	r3, [r7, #4]
    af6c:	685b      	ldr	r3, [r3, #4]
    af6e:	2b00      	cmp	r3, #0
    af70:	d113      	bne.n	af9a <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    af72:	687b      	ldr	r3, [r7, #4]
    af74:	885b      	ldrh	r3, [r3, #2]
    af76:	b29b      	uxth	r3, r3
    af78:	b21b      	sxth	r3, r3
    af7a:	2b00      	cmp	r3, #0
    af7c:	da05      	bge.n	af8a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    af7e:	68f8      	ldr	r0, [r7, #12]
    af80:	4b1b      	ldr	r3, [pc, #108]	; (aff0 <_sercom_i2c_sync_analyse_flags+0x224>)
    af82:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    af84:	68f8      	ldr	r0, [r7, #12]
    af86:	4b15      	ldr	r3, [pc, #84]	; (afdc <_sercom_i2c_sync_analyse_flags+0x210>)
    af88:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    af8a:	687b      	ldr	r3, [r7, #4]
    af8c:	885b      	ldrh	r3, [r3, #2]
    af8e:	b29b      	uxth	r3, r3
    af90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    af94:	b29a      	uxth	r2, r3
    af96:	687b      	ldr	r3, [r7, #4]
    af98:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    af9a:	687b      	ldr	r3, [r7, #4]
    af9c:	689c      	ldr	r4, [r3, #8]
    af9e:	1c62      	adds	r2, r4, #1
    afa0:	687b      	ldr	r3, [r7, #4]
    afa2:	609a      	str	r2, [r3, #8]
    afa4:	68f8      	ldr	r0, [r7, #12]
    afa6:	4b13      	ldr	r3, [pc, #76]	; (aff4 <_sercom_i2c_sync_analyse_flags+0x228>)
    afa8:	4798      	blx	r3
    afaa:	4603      	mov	r3, r0
    afac:	b2db      	uxtb	r3, r3
    afae:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    afb0:	68f8      	ldr	r0, [r7, #12]
    afb2:	4b11      	ldr	r3, [pc, #68]	; (aff8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    afb4:	4798      	blx	r3
    afb6:	e005      	b.n	afc4 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    afb8:	68f8      	ldr	r0, [r7, #12]
    afba:	4b0f      	ldr	r3, [pc, #60]	; (aff8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    afbc:	4798      	blx	r3
			return I2C_NACK;
    afbe:	f06f 0301 	mvn.w	r3, #1
    afc2:	e000      	b.n	afc6 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    afc4:	2300      	movs	r3, #0
}
    afc6:	4618      	mov	r0, r3
    afc8:	371c      	adds	r7, #28
    afca:	46bd      	mov	sp, r7
    afcc:	bd90      	pop	{r4, r7, pc}
    afce:	bf00      	nop
    afd0:	0000a825 	.word	0x0000a825
    afd4:	0000ac5d 	.word	0x0000ac5d
    afd8:	0000a671 	.word	0x0000a671
    afdc:	0000adb1 	.word	0x0000adb1
    afe0:	0000ab3d 	.word	0x0000ab3d
    afe4:	0000ab19 	.word	0x0000ab19
    afe8:	0000ab79 	.word	0x0000ab79
    afec:	0000a9d5 	.word	0x0000a9d5
    aff0:	0000a9ad 	.word	0x0000a9ad
    aff4:	0000ab9d 	.word	0x0000ab9d
    aff8:	0000a68b 	.word	0x0000a68b

0000affc <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    affc:	b580      	push	{r7, lr}
    affe:	b086      	sub	sp, #24
    b000:	af00      	add	r7, sp, #0
    b002:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    b004:	687b      	ldr	r3, [r7, #4]
    b006:	691b      	ldr	r3, [r3, #16]
    b008:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    b00a:	6938      	ldr	r0, [r7, #16]
    b00c:	4b37      	ldr	r3, [pc, #220]	; (b0ec <_sercom_i2c_m_irq_handler+0xf0>)
    b00e:	4798      	blx	r3
    b010:	4603      	mov	r3, r0
    b012:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    b014:	2300      	movs	r3, #0
    b016:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    b018:	687b      	ldr	r3, [r7, #4]
    b01a:	2b00      	cmp	r3, #0
    b01c:	bf14      	ite	ne
    b01e:	2301      	movne	r3, #1
    b020:	2300      	moveq	r3, #0
    b022:	b2db      	uxtb	r3, r3
    b024:	f240 4224 	movw	r2, #1060	; 0x424
    b028:	4931      	ldr	r1, [pc, #196]	; (b0f0 <_sercom_i2c_m_irq_handler+0xf4>)
    b02a:	4618      	mov	r0, r3
    b02c:	4b31      	ldr	r3, [pc, #196]	; (b0f4 <_sercom_i2c_m_irq_handler+0xf8>)
    b02e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    b030:	687b      	ldr	r3, [r7, #4]
    b032:	691b      	ldr	r3, [r3, #16]
    b034:	2b00      	cmp	r3, #0
    b036:	bf14      	ite	ne
    b038:	2301      	movne	r3, #1
    b03a:	2300      	moveq	r3, #0
    b03c:	b2db      	uxtb	r3, r3
    b03e:	f240 4225 	movw	r2, #1061	; 0x425
    b042:	492b      	ldr	r1, [pc, #172]	; (b0f0 <_sercom_i2c_m_irq_handler+0xf4>)
    b044:	4618      	mov	r0, r3
    b046:	4b2b      	ldr	r3, [pc, #172]	; (b0f4 <_sercom_i2c_m_irq_handler+0xf8>)
    b048:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    b04a:	bf00      	nop
    b04c:	68fb      	ldr	r3, [r7, #12]
    b04e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b052:	2b00      	cmp	r3, #0
    b054:	d126      	bne.n	b0a4 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    b056:	687b      	ldr	r3, [r7, #4]
    b058:	461a      	mov	r2, r3
    b05a:	68f9      	ldr	r1, [r7, #12]
    b05c:	6938      	ldr	r0, [r7, #16]
    b05e:	4b26      	ldr	r3, [pc, #152]	; (b0f8 <_sercom_i2c_m_irq_handler+0xfc>)
    b060:	4798      	blx	r3
    b062:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    b064:	697b      	ldr	r3, [r7, #20]
    b066:	2b00      	cmp	r3, #0
    b068:	d11b      	bne.n	b0a2 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    b06a:	68fb      	ldr	r3, [r7, #12]
    b06c:	f003 0301 	and.w	r3, r3, #1
    b070:	2b00      	cmp	r3, #0
    b072:	d008      	beq.n	b086 <_sercom_i2c_m_irq_handler+0x8a>
    b074:	687b      	ldr	r3, [r7, #4]
    b076:	699b      	ldr	r3, [r3, #24]
    b078:	2b00      	cmp	r3, #0
    b07a:	d004      	beq.n	b086 <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    b07c:	687b      	ldr	r3, [r7, #4]
    b07e:	699b      	ldr	r3, [r3, #24]
    b080:	6878      	ldr	r0, [r7, #4]
    b082:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    b084:	e02e      	b.n	b0e4 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    b086:	68fb      	ldr	r3, [r7, #12]
    b088:	f003 0302 	and.w	r3, r3, #2
    b08c:	2b00      	cmp	r3, #0
    b08e:	d029      	beq.n	b0e4 <_sercom_i2c_m_irq_handler+0xe8>
    b090:	687b      	ldr	r3, [r7, #4]
    b092:	69db      	ldr	r3, [r3, #28]
    b094:	2b00      	cmp	r3, #0
    b096:	d025      	beq.n	b0e4 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    b098:	687b      	ldr	r3, [r7, #4]
    b09a:	69db      	ldr	r3, [r3, #28]
    b09c:	6878      	ldr	r0, [r7, #4]
    b09e:	4798      	blx	r3
		return;
    b0a0:	e020      	b.n	b0e4 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    b0a2:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b0a4:	687b      	ldr	r3, [r7, #4]
    b0a6:	885b      	ldrh	r3, [r3, #2]
    b0a8:	b29b      	uxth	r3, r3
    b0aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b0ae:	b29a      	uxth	r2, r3
    b0b0:	687b      	ldr	r3, [r7, #4]
    b0b2:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    b0b4:	687b      	ldr	r3, [r7, #4]
    b0b6:	695b      	ldr	r3, [r3, #20]
    b0b8:	2b00      	cmp	r3, #0
    b0ba:	d014      	beq.n	b0e6 <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    b0bc:	697b      	ldr	r3, [r7, #20]
    b0be:	2b00      	cmp	r3, #0
    b0c0:	d005      	beq.n	b0ce <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    b0c2:	687b      	ldr	r3, [r7, #4]
    b0c4:	695b      	ldr	r3, [r3, #20]
    b0c6:	6979      	ldr	r1, [r7, #20]
    b0c8:	6878      	ldr	r0, [r7, #4]
    b0ca:	4798      	blx	r3
    b0cc:	e005      	b.n	b0da <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    b0ce:	687b      	ldr	r3, [r7, #4]
    b0d0:	695b      	ldr	r3, [r3, #20]
    b0d2:	f06f 0104 	mvn.w	r1, #4
    b0d6:	6878      	ldr	r0, [r7, #4]
    b0d8:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    b0da:	2180      	movs	r1, #128	; 0x80
    b0dc:	6938      	ldr	r0, [r7, #16]
    b0de:	4b07      	ldr	r3, [pc, #28]	; (b0fc <_sercom_i2c_m_irq_handler+0x100>)
    b0e0:	4798      	blx	r3
    b0e2:	e000      	b.n	b0e6 <_sercom_i2c_m_irq_handler+0xea>
		return;
    b0e4:	bf00      	nop
	}
}
    b0e6:	3718      	adds	r7, #24
    b0e8:	46bd      	mov	sp, r7
    b0ea:	bd80      	pop	{r7, pc}
    b0ec:	0000a6a5 	.word	0x0000a6a5
    b0f0:	0001fb48 	.word	0x0001fb48
    b0f4:	0000799d 	.word	0x0000799d
    b0f8:	0000adcd 	.word	0x0000adcd
    b0fc:	0000a6bf 	.word	0x0000a6bf

0000b100 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    b100:	b580      	push	{r7, lr}
    b102:	b082      	sub	sp, #8
    b104:	af00      	add	r7, sp, #0
    b106:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    b108:	687b      	ldr	r3, [r7, #4]
    b10a:	2b00      	cmp	r3, #0
    b10c:	bf14      	ite	ne
    b10e:	2301      	movne	r3, #1
    b110:	2300      	moveq	r3, #0
    b112:	b2db      	uxtb	r3, r3
    b114:	f240 424a 	movw	r2, #1098	; 0x44a
    b118:	4906      	ldr	r1, [pc, #24]	; (b134 <_i2c_m_async_enable+0x34>)
    b11a:	4618      	mov	r0, r3
    b11c:	4b06      	ldr	r3, [pc, #24]	; (b138 <_i2c_m_async_enable+0x38>)
    b11e:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    b120:	687b      	ldr	r3, [r7, #4]
    b122:	691b      	ldr	r3, [r3, #16]
    b124:	4618      	mov	r0, r3
    b126:	4b05      	ldr	r3, [pc, #20]	; (b13c <_i2c_m_async_enable+0x3c>)
    b128:	4798      	blx	r3
    b12a:	4603      	mov	r3, r0
}
    b12c:	4618      	mov	r0, r3
    b12e:	3708      	adds	r7, #8
    b130:	46bd      	mov	sp, r7
    b132:	bd80      	pop	{r7, pc}
    b134:	0001fb48 	.word	0x0001fb48
    b138:	0000799d 	.word	0x0000799d
    b13c:	0000b781 	.word	0x0000b781

0000b140 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    b140:	b580      	push	{r7, lr}
    b142:	b082      	sub	sp, #8
    b144:	af00      	add	r7, sp, #0
    b146:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    b148:	6878      	ldr	r0, [r7, #4]
    b14a:	4b05      	ldr	r3, [pc, #20]	; (b160 <_sercom_get_irq_num+0x20>)
    b14c:	4798      	blx	r3
    b14e:	4603      	mov	r3, r0
    b150:	009b      	lsls	r3, r3, #2
    b152:	b2db      	uxtb	r3, r3
    b154:	332e      	adds	r3, #46	; 0x2e
    b156:	b2db      	uxtb	r3, r3
}
    b158:	4618      	mov	r0, r3
    b15a:	3708      	adds	r7, #8
    b15c:	46bd      	mov	sp, r7
    b15e:	bd80      	pop	{r7, pc}
    b160:	0000aca9 	.word	0x0000aca9

0000b164 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    b164:	b580      	push	{r7, lr}
    b166:	b086      	sub	sp, #24
    b168:	af00      	add	r7, sp, #0
    b16a:	6078      	str	r0, [r7, #4]
    b16c:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    b16e:	687b      	ldr	r3, [r7, #4]
    b170:	2b00      	cmp	r3, #0
    b172:	bf14      	ite	ne
    b174:	2301      	movne	r3, #1
    b176:	2300      	moveq	r3, #0
    b178:	b2db      	uxtb	r3, r3
    b17a:	f44f 6293 	mov.w	r2, #1176	; 0x498
    b17e:	491d      	ldr	r1, [pc, #116]	; (b1f4 <_i2c_m_async_init+0x90>)
    b180:	4618      	mov	r0, r3
    b182:	4b1d      	ldr	r3, [pc, #116]	; (b1f8 <_i2c_m_async_init+0x94>)
    b184:	4798      	blx	r3

	i2c_dev->hw = hw;
    b186:	687b      	ldr	r3, [r7, #4]
    b188:	683a      	ldr	r2, [r7, #0]
    b18a:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    b18c:	687b      	ldr	r3, [r7, #4]
    b18e:	6839      	ldr	r1, [r7, #0]
    b190:	4618      	mov	r0, r3
    b192:	4b1a      	ldr	r3, [pc, #104]	; (b1fc <_i2c_m_async_init+0x98>)
    b194:	4798      	blx	r3
    b196:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    b198:	68fb      	ldr	r3, [r7, #12]
    b19a:	2b00      	cmp	r3, #0
    b19c:	d001      	beq.n	b1a2 <_i2c_m_async_init+0x3e>
		return init_status;
    b19e:	68fb      	ldr	r3, [r7, #12]
    b1a0:	e024      	b.n	b1ec <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    b1a2:	6879      	ldr	r1, [r7, #4]
    b1a4:	6838      	ldr	r0, [r7, #0]
    b1a6:	4b16      	ldr	r3, [pc, #88]	; (b200 <_i2c_m_async_init+0x9c>)
    b1a8:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    b1aa:	6838      	ldr	r0, [r7, #0]
    b1ac:	4b15      	ldr	r3, [pc, #84]	; (b204 <_i2c_m_async_init+0xa0>)
    b1ae:	4798      	blx	r3
    b1b0:	4603      	mov	r3, r0
    b1b2:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    b1b4:	2300      	movs	r3, #0
    b1b6:	613b      	str	r3, [r7, #16]
    b1b8:	e014      	b.n	b1e4 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    b1ba:	7dfb      	ldrb	r3, [r7, #23]
    b1bc:	b21b      	sxth	r3, r3
    b1be:	4618      	mov	r0, r3
    b1c0:	4b11      	ldr	r3, [pc, #68]	; (b208 <_i2c_m_async_init+0xa4>)
    b1c2:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    b1c4:	7dfb      	ldrb	r3, [r7, #23]
    b1c6:	b21b      	sxth	r3, r3
    b1c8:	4618      	mov	r0, r3
    b1ca:	4b10      	ldr	r3, [pc, #64]	; (b20c <_i2c_m_async_init+0xa8>)
    b1cc:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    b1ce:	7dfb      	ldrb	r3, [r7, #23]
    b1d0:	b21b      	sxth	r3, r3
    b1d2:	4618      	mov	r0, r3
    b1d4:	4b0e      	ldr	r3, [pc, #56]	; (b210 <_i2c_m_async_init+0xac>)
    b1d6:	4798      	blx	r3
		irq++;
    b1d8:	7dfb      	ldrb	r3, [r7, #23]
    b1da:	3301      	adds	r3, #1
    b1dc:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    b1de:	693b      	ldr	r3, [r7, #16]
    b1e0:	3301      	adds	r3, #1
    b1e2:	613b      	str	r3, [r7, #16]
    b1e4:	693b      	ldr	r3, [r7, #16]
    b1e6:	2b03      	cmp	r3, #3
    b1e8:	d9e7      	bls.n	b1ba <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    b1ea:	2300      	movs	r3, #0
}
    b1ec:	4618      	mov	r0, r3
    b1ee:	3718      	adds	r7, #24
    b1f0:	46bd      	mov	sp, r7
    b1f2:	bd80      	pop	{r7, pc}
    b1f4:	0001fb48 	.word	0x0001fb48
    b1f8:	0000799d 	.word	0x0000799d
    b1fc:	0000b80d 	.word	0x0000b80d
    b200:	0000ad05 	.word	0x0000ad05
    b204:	0000b141 	.word	0x0000b141
    b208:	0000a559 	.word	0x0000a559
    b20c:	0000a59d 	.word	0x0000a59d
    b210:	0000a51d 	.word	0x0000a51d

0000b214 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    b214:	b590      	push	{r4, r7, lr}
    b216:	b087      	sub	sp, #28
    b218:	af00      	add	r7, sp, #0
    b21a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    b21c:	687b      	ldr	r3, [r7, #4]
    b21e:	691b      	ldr	r3, [r3, #16]
    b220:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    b222:	687b      	ldr	r3, [r7, #4]
    b224:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b226:	6978      	ldr	r0, [r7, #20]
    b228:	4b33      	ldr	r3, [pc, #204]	; (b2f8 <_sercom_i2c_send_address+0xe4>)
    b22a:	4798      	blx	r3
    b22c:	4603      	mov	r3, r0
    b22e:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    b230:	687b      	ldr	r3, [r7, #4]
    b232:	2b00      	cmp	r3, #0
    b234:	bf14      	ite	ne
    b236:	2301      	movne	r3, #1
    b238:	2300      	moveq	r3, #0
    b23a:	b2db      	uxtb	r3, r3
    b23c:	f240 42c6 	movw	r2, #1222	; 0x4c6
    b240:	492e      	ldr	r1, [pc, #184]	; (b2fc <_sercom_i2c_send_address+0xe8>)
    b242:	4618      	mov	r0, r3
    b244:	4b2e      	ldr	r3, [pc, #184]	; (b300 <_sercom_i2c_send_address+0xec>)
    b246:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    b248:	693b      	ldr	r3, [r7, #16]
    b24a:	685b      	ldr	r3, [r3, #4]
    b24c:	2b01      	cmp	r3, #1
    b24e:	d106      	bne.n	b25e <_sercom_i2c_send_address+0x4a>
    b250:	68fb      	ldr	r3, [r7, #12]
    b252:	2b00      	cmp	r3, #0
    b254:	d003      	beq.n	b25e <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    b256:	6978      	ldr	r0, [r7, #20]
    b258:	4b2a      	ldr	r3, [pc, #168]	; (b304 <_sercom_i2c_send_address+0xf0>)
    b25a:	4798      	blx	r3
    b25c:	e002      	b.n	b264 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    b25e:	6978      	ldr	r0, [r7, #20]
    b260:	4b29      	ldr	r3, [pc, #164]	; (b308 <_sercom_i2c_send_address+0xf4>)
    b262:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    b264:	693b      	ldr	r3, [r7, #16]
    b266:	881b      	ldrh	r3, [r3, #0]
    b268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b26c:	2b00      	cmp	r3, #0
    b26e:	d022      	beq.n	b2b6 <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    b270:	693b      	ldr	r3, [r7, #16]
    b272:	885b      	ldrh	r3, [r3, #2]
    b274:	b29b      	uxth	r3, r3
    b276:	f003 0301 	and.w	r3, r3, #1
    b27a:	2b00      	cmp	r3, #0
    b27c:	d007      	beq.n	b28e <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    b27e:	693b      	ldr	r3, [r7, #16]
    b280:	885b      	ldrh	r3, [r3, #2]
    b282:	b29b      	uxth	r3, r3
    b284:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    b288:	b29a      	uxth	r2, r3
    b28a:	693b      	ldr	r3, [r7, #16]
    b28c:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    b28e:	693b      	ldr	r3, [r7, #16]
    b290:	881b      	ldrh	r3, [r3, #0]
    b292:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b294:	f240 74fe 	movw	r4, #2046	; 0x7fe
    b298:	401c      	ands	r4, r3
    b29a:	6978      	ldr	r0, [r7, #20]
    b29c:	4b1b      	ldr	r3, [pc, #108]	; (b30c <_sercom_i2c_send_address+0xf8>)
    b29e:	4798      	blx	r3
    b2a0:	4603      	mov	r3, r0
    b2a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b2a6:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    b2a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b2ac:	4619      	mov	r1, r3
    b2ae:	6978      	ldr	r0, [r7, #20]
    b2b0:	4b17      	ldr	r3, [pc, #92]	; (b310 <_sercom_i2c_send_address+0xfc>)
    b2b2:	4798      	blx	r3
    b2b4:	e01a      	b.n	b2ec <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    b2b6:	693b      	ldr	r3, [r7, #16]
    b2b8:	881b      	ldrh	r3, [r3, #0]
    b2ba:	005b      	lsls	r3, r3, #1
    b2bc:	b2db      	uxtb	r3, r3
    b2be:	693a      	ldr	r2, [r7, #16]
    b2c0:	8852      	ldrh	r2, [r2, #2]
    b2c2:	b292      	uxth	r2, r2
    b2c4:	f002 0201 	and.w	r2, r2, #1
    b2c8:	2a00      	cmp	r2, #0
    b2ca:	bf14      	ite	ne
    b2cc:	2201      	movne	r2, #1
    b2ce:	2200      	moveq	r2, #0
    b2d0:	b2d2      	uxtb	r2, r2
    b2d2:	4313      	orrs	r3, r2
    b2d4:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b2d6:	6978      	ldr	r0, [r7, #20]
    b2d8:	4b0c      	ldr	r3, [pc, #48]	; (b30c <_sercom_i2c_send_address+0xf8>)
    b2da:	4798      	blx	r3
    b2dc:	4603      	mov	r3, r0
    b2de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    b2e2:	4323      	orrs	r3, r4
    b2e4:	4619      	mov	r1, r3
    b2e6:	6978      	ldr	r0, [r7, #20]
    b2e8:	4b09      	ldr	r3, [pc, #36]	; (b310 <_sercom_i2c_send_address+0xfc>)
    b2ea:	4798      	blx	r3
	}

	return ERR_NONE;
    b2ec:	2300      	movs	r3, #0
}
    b2ee:	4618      	mov	r0, r3
    b2f0:	371c      	adds	r7, #28
    b2f2:	46bd      	mov	sp, r7
    b2f4:	bd90      	pop	{r4, r7, pc}
    b2f6:	bf00      	nop
    b2f8:	0000a825 	.word	0x0000a825
    b2fc:	0001fb48 	.word	0x0001fb48
    b300:	0000799d 	.word	0x0000799d
    b304:	0000a9d5 	.word	0x0000a9d5
    b308:	0000a9fd 	.word	0x0000a9fd
    b30c:	0000ab3d 	.word	0x0000ab3d
    b310:	0000ab19 	.word	0x0000ab19

0000b314 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    b314:	b580      	push	{r7, lr}
    b316:	b084      	sub	sp, #16
    b318:	af00      	add	r7, sp, #0
    b31a:	6078      	str	r0, [r7, #4]
    b31c:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    b31e:	687b      	ldr	r3, [r7, #4]
    b320:	2b00      	cmp	r3, #0
    b322:	bf14      	ite	ne
    b324:	2301      	movne	r3, #1
    b326:	2300      	moveq	r3, #0
    b328:	b2db      	uxtb	r3, r3
    b32a:	f240 42ee 	movw	r2, #1262	; 0x4ee
    b32e:	492a      	ldr	r1, [pc, #168]	; (b3d8 <_i2c_m_async_transfer+0xc4>)
    b330:	4618      	mov	r0, r3
    b332:	4b2a      	ldr	r3, [pc, #168]	; (b3dc <_i2c_m_async_transfer+0xc8>)
    b334:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    b336:	687b      	ldr	r3, [r7, #4]
    b338:	691b      	ldr	r3, [r3, #16]
    b33a:	2b00      	cmp	r3, #0
    b33c:	bf14      	ite	ne
    b33e:	2301      	movne	r3, #1
    b340:	2300      	moveq	r3, #0
    b342:	b2db      	uxtb	r3, r3
    b344:	f240 42ef 	movw	r2, #1263	; 0x4ef
    b348:	4923      	ldr	r1, [pc, #140]	; (b3d8 <_i2c_m_async_transfer+0xc4>)
    b34a:	4618      	mov	r0, r3
    b34c:	4b23      	ldr	r3, [pc, #140]	; (b3dc <_i2c_m_async_transfer+0xc8>)
    b34e:	4798      	blx	r3
	ASSERT(msg);
    b350:	683b      	ldr	r3, [r7, #0]
    b352:	2b00      	cmp	r3, #0
    b354:	bf14      	ite	ne
    b356:	2301      	movne	r3, #1
    b358:	2300      	moveq	r3, #0
    b35a:	b2db      	uxtb	r3, r3
    b35c:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
    b360:	491d      	ldr	r1, [pc, #116]	; (b3d8 <_i2c_m_async_transfer+0xc4>)
    b362:	4618      	mov	r0, r3
    b364:	4b1d      	ldr	r3, [pc, #116]	; (b3dc <_i2c_m_async_transfer+0xc8>)
    b366:	4798      	blx	r3

	if (msg->len == 0) {
    b368:	683b      	ldr	r3, [r7, #0]
    b36a:	685b      	ldr	r3, [r3, #4]
    b36c:	2b00      	cmp	r3, #0
    b36e:	d101      	bne.n	b374 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    b370:	2300      	movs	r3, #0
    b372:	e02d      	b.n	b3d0 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    b374:	687b      	ldr	r3, [r7, #4]
    b376:	885b      	ldrh	r3, [r3, #2]
    b378:	b29b      	uxth	r3, r3
    b37a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b37e:	2b00      	cmp	r3, #0
    b380:	d002      	beq.n	b388 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    b382:	f06f 0303 	mvn.w	r3, #3
    b386:	e023      	b.n	b3d0 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    b388:	683b      	ldr	r3, [r7, #0]
    b38a:	885b      	ldrh	r3, [r3, #2]
    b38c:	b29b      	uxth	r3, r3
    b38e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b392:	b29a      	uxth	r2, r3
    b394:	683b      	ldr	r3, [r7, #0]
    b396:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    b398:	687b      	ldr	r3, [r7, #4]
    b39a:	683a      	ldr	r2, [r7, #0]
    b39c:	ca07      	ldmia	r2, {r0, r1, r2}
    b39e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    b3a2:	687b      	ldr	r3, [r7, #4]
    b3a4:	691b      	ldr	r3, [r3, #16]
    b3a6:	4618      	mov	r0, r3
    b3a8:	4b0d      	ldr	r3, [pc, #52]	; (b3e0 <_i2c_m_async_transfer+0xcc>)
    b3aa:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    b3ac:	6878      	ldr	r0, [r7, #4]
    b3ae:	4b0d      	ldr	r3, [pc, #52]	; (b3e4 <_i2c_m_async_transfer+0xd0>)
    b3b0:	4798      	blx	r3
    b3b2:	60f8      	str	r0, [r7, #12]

	if (ret) {
    b3b4:	68fb      	ldr	r3, [r7, #12]
    b3b6:	2b00      	cmp	r3, #0
    b3b8:	d009      	beq.n	b3ce <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b3ba:	687b      	ldr	r3, [r7, #4]
    b3bc:	885b      	ldrh	r3, [r3, #2]
    b3be:	b29b      	uxth	r3, r3
    b3c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b3c4:	b29a      	uxth	r2, r3
    b3c6:	687b      	ldr	r3, [r7, #4]
    b3c8:	805a      	strh	r2, [r3, #2]

		return ret;
    b3ca:	68fb      	ldr	r3, [r7, #12]
    b3cc:	e000      	b.n	b3d0 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    b3ce:	2300      	movs	r3, #0
}
    b3d0:	4618      	mov	r0, r3
    b3d2:	3710      	adds	r7, #16
    b3d4:	46bd      	mov	sp, r7
    b3d6:	bd80      	pop	{r7, pc}
    b3d8:	0001fb48 	.word	0x0001fb48
    b3dc:	0000799d 	.word	0x0000799d
    b3e0:	0000a985 	.word	0x0000a985
    b3e4:	0000b215 	.word	0x0000b215

0000b3e8 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    b3e8:	b480      	push	{r7}
    b3ea:	b085      	sub	sp, #20
    b3ec:	af00      	add	r7, sp, #0
    b3ee:	60f8      	str	r0, [r7, #12]
    b3f0:	460b      	mov	r3, r1
    b3f2:	607a      	str	r2, [r7, #4]
    b3f4:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    b3f6:	7afb      	ldrb	r3, [r7, #11]
    b3f8:	2b01      	cmp	r3, #1
    b3fa:	d008      	beq.n	b40e <_i2c_m_async_register_callback+0x26>
    b3fc:	2b02      	cmp	r3, #2
    b3fe:	d00a      	beq.n	b416 <_i2c_m_async_register_callback+0x2e>
    b400:	2b00      	cmp	r3, #0
    b402:	d000      	beq.n	b406 <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    b404:	e00b      	b.n	b41e <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    b406:	68fb      	ldr	r3, [r7, #12]
    b408:	687a      	ldr	r2, [r7, #4]
    b40a:	615a      	str	r2, [r3, #20]
		break;
    b40c:	e007      	b.n	b41e <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    b40e:	68fb      	ldr	r3, [r7, #12]
    b410:	687a      	ldr	r2, [r7, #4]
    b412:	619a      	str	r2, [r3, #24]
		break;
    b414:	e003      	b.n	b41e <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    b416:	68fb      	ldr	r3, [r7, #12]
    b418:	687a      	ldr	r2, [r7, #4]
    b41a:	61da      	str	r2, [r3, #28]
		break;
    b41c:	bf00      	nop
	}

	return ERR_NONE;
    b41e:	2300      	movs	r3, #0
}
    b420:	4618      	mov	r0, r3
    b422:	3714      	adds	r7, #20
    b424:	46bd      	mov	sp, r7
    b426:	f85d 7b04 	ldr.w	r7, [sp], #4
    b42a:	4770      	bx	lr

0000b42c <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    b42c:	b580      	push	{r7, lr}
    b42e:	b082      	sub	sp, #8
    b430:	af00      	add	r7, sp, #0
    b432:	6078      	str	r0, [r7, #4]
    b434:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    b436:	687b      	ldr	r3, [r7, #4]
    b438:	2b00      	cmp	r3, #0
    b43a:	bf14      	ite	ne
    b43c:	2301      	movne	r3, #1
    b43e:	2300      	moveq	r3, #0
    b440:	b2db      	uxtb	r3, r3
    b442:	f240 524e 	movw	r2, #1358	; 0x54e
    b446:	4908      	ldr	r1, [pc, #32]	; (b468 <_i2c_m_sync_init+0x3c>)
    b448:	4618      	mov	r0, r3
    b44a:	4b08      	ldr	r3, [pc, #32]	; (b46c <_i2c_m_sync_init+0x40>)
    b44c:	4798      	blx	r3

	i2c_dev->hw = hw;
    b44e:	687b      	ldr	r3, [r7, #4]
    b450:	683a      	ldr	r2, [r7, #0]
    b452:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    b454:	687b      	ldr	r3, [r7, #4]
    b456:	6839      	ldr	r1, [r7, #0]
    b458:	4618      	mov	r0, r3
    b45a:	4b05      	ldr	r3, [pc, #20]	; (b470 <_i2c_m_sync_init+0x44>)
    b45c:	4798      	blx	r3
    b45e:	4603      	mov	r3, r0
}
    b460:	4618      	mov	r0, r3
    b462:	3708      	adds	r7, #8
    b464:	46bd      	mov	sp, r7
    b466:	bd80      	pop	{r7, pc}
    b468:	0001fb48 	.word	0x0001fb48
    b46c:	0000799d 	.word	0x0000799d
    b470:	0000b80d 	.word	0x0000b80d

0000b474 <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    b474:	b580      	push	{r7, lr}
    b476:	b082      	sub	sp, #8
    b478:	af00      	add	r7, sp, #0
    b47a:	6078      	str	r0, [r7, #4]
    b47c:	460b      	mov	r3, r1
    b47e:	70fb      	strb	r3, [r7, #3]
    b480:	4613      	mov	r3, r2
    b482:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    b484:	78fb      	ldrb	r3, [r7, #3]
    b486:	2b01      	cmp	r3, #1
    b488:	d002      	beq.n	b490 <_i2c_m_async_set_irq_state+0x1c>
    b48a:	78fb      	ldrb	r3, [r7, #3]
    b48c:	2b02      	cmp	r3, #2
    b48e:	d10e      	bne.n	b4ae <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    b490:	687b      	ldr	r3, [r7, #4]
    b492:	691b      	ldr	r3, [r3, #16]
    b494:	78ba      	ldrb	r2, [r7, #2]
    b496:	4611      	mov	r1, r2
    b498:	4618      	mov	r0, r3
    b49a:	4b0c      	ldr	r3, [pc, #48]	; (b4cc <_i2c_m_async_set_irq_state+0x58>)
    b49c:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    b49e:	687b      	ldr	r3, [r7, #4]
    b4a0:	691b      	ldr	r3, [r3, #16]
    b4a2:	78ba      	ldrb	r2, [r7, #2]
    b4a4:	4611      	mov	r1, r2
    b4a6:	4618      	mov	r0, r3
    b4a8:	4b09      	ldr	r3, [pc, #36]	; (b4d0 <_i2c_m_async_set_irq_state+0x5c>)
    b4aa:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    b4ac:	e009      	b.n	b4c2 <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    b4ae:	78fb      	ldrb	r3, [r7, #3]
    b4b0:	2b00      	cmp	r3, #0
    b4b2:	d106      	bne.n	b4c2 <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    b4b4:	687b      	ldr	r3, [r7, #4]
    b4b6:	691b      	ldr	r3, [r3, #16]
    b4b8:	78ba      	ldrb	r2, [r7, #2]
    b4ba:	4611      	mov	r1, r2
    b4bc:	4618      	mov	r0, r3
    b4be:	4b05      	ldr	r3, [pc, #20]	; (b4d4 <_i2c_m_async_set_irq_state+0x60>)
    b4c0:	4798      	blx	r3
}
    b4c2:	bf00      	nop
    b4c4:	3708      	adds	r7, #8
    b4c6:	46bd      	mov	sp, r7
    b4c8:	bd80      	pop	{r7, pc}
    b4ca:	bf00      	nop
    b4cc:	0000a76f 	.word	0x0000a76f
    b4d0:	0000a73d 	.word	0x0000a73d
    b4d4:	0000a7a1 	.word	0x0000a7a1

0000b4d8 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    b4d8:	b580      	push	{r7, lr}
    b4da:	b084      	sub	sp, #16
    b4dc:	af00      	add	r7, sp, #0
    b4de:	6078      	str	r0, [r7, #4]
    b4e0:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    b4e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b4e6:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    b4e8:	687b      	ldr	r3, [r7, #4]
    b4ea:	691b      	ldr	r3, [r3, #16]
    b4ec:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    b4ee:	68b8      	ldr	r0, [r7, #8]
    b4f0:	4b0f      	ldr	r3, [pc, #60]	; (b530 <_sercom_i2c_sync_wait_bus+0x58>)
    b4f2:	4798      	blx	r3
    b4f4:	4603      	mov	r3, r0
    b4f6:	461a      	mov	r2, r3
    b4f8:	683b      	ldr	r3, [r7, #0]
    b4fa:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    b4fc:	68fb      	ldr	r3, [r7, #12]
    b4fe:	1e5a      	subs	r2, r3, #1
    b500:	60fa      	str	r2, [r7, #12]
    b502:	2b00      	cmp	r3, #0
    b504:	d102      	bne.n	b50c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    b506:	f06f 0304 	mvn.w	r3, #4
    b50a:	e00c      	b.n	b526 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    b50c:	683b      	ldr	r3, [r7, #0]
    b50e:	681b      	ldr	r3, [r3, #0]
    b510:	f003 0301 	and.w	r3, r3, #1
    b514:	2b00      	cmp	r3, #0
    b516:	d105      	bne.n	b524 <_sercom_i2c_sync_wait_bus+0x4c>
    b518:	683b      	ldr	r3, [r7, #0]
    b51a:	681b      	ldr	r3, [r3, #0]
    b51c:	f003 0302 	and.w	r3, r3, #2
    b520:	2b00      	cmp	r3, #0
    b522:	d0e4      	beq.n	b4ee <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    b524:	2300      	movs	r3, #0
}
    b526:	4618      	mov	r0, r3
    b528:	3710      	adds	r7, #16
    b52a:	46bd      	mov	sp, r7
    b52c:	bd80      	pop	{r7, pc}
    b52e:	bf00      	nop
    b530:	0000a6a5 	.word	0x0000a6a5

0000b534 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    b534:	b590      	push	{r4, r7, lr}
    b536:	b087      	sub	sp, #28
    b538:	af00      	add	r7, sp, #0
    b53a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    b53c:	687b      	ldr	r3, [r7, #4]
    b53e:	691b      	ldr	r3, [r3, #16]
    b540:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    b542:	687b      	ldr	r3, [r7, #4]
    b544:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    b546:	6978      	ldr	r0, [r7, #20]
    b548:	4b39      	ldr	r3, [pc, #228]	; (b630 <_sercom_i2c_sync_send_address+0xfc>)
    b54a:	4798      	blx	r3
    b54c:	4603      	mov	r3, r0
    b54e:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    b550:	687b      	ldr	r3, [r7, #4]
    b552:	2b00      	cmp	r3, #0
    b554:	bf14      	ite	ne
    b556:	2301      	movne	r3, #1
    b558:	2300      	moveq	r3, #0
    b55a:	b2db      	uxtb	r3, r3
    b55c:	f240 52db 	movw	r2, #1499	; 0x5db
    b560:	4934      	ldr	r1, [pc, #208]	; (b634 <_sercom_i2c_sync_send_address+0x100>)
    b562:	4618      	mov	r0, r3
    b564:	4b34      	ldr	r3, [pc, #208]	; (b638 <_sercom_i2c_sync_send_address+0x104>)
    b566:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    b568:	693b      	ldr	r3, [r7, #16]
    b56a:	685b      	ldr	r3, [r3, #4]
    b56c:	2b01      	cmp	r3, #1
    b56e:	d106      	bne.n	b57e <_sercom_i2c_sync_send_address+0x4a>
    b570:	68fb      	ldr	r3, [r7, #12]
    b572:	2b00      	cmp	r3, #0
    b574:	d003      	beq.n	b57e <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    b576:	6978      	ldr	r0, [r7, #20]
    b578:	4b30      	ldr	r3, [pc, #192]	; (b63c <_sercom_i2c_sync_send_address+0x108>)
    b57a:	4798      	blx	r3
    b57c:	e002      	b.n	b584 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    b57e:	6978      	ldr	r0, [r7, #20]
    b580:	4b2f      	ldr	r3, [pc, #188]	; (b640 <_sercom_i2c_sync_send_address+0x10c>)
    b582:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    b584:	693b      	ldr	r3, [r7, #16]
    b586:	881b      	ldrh	r3, [r3, #0]
    b588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b58c:	2b00      	cmp	r3, #0
    b58e:	d022      	beq.n	b5d6 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    b590:	693b      	ldr	r3, [r7, #16]
    b592:	885b      	ldrh	r3, [r3, #2]
    b594:	b29b      	uxth	r3, r3
    b596:	f003 0301 	and.w	r3, r3, #1
    b59a:	2b00      	cmp	r3, #0
    b59c:	d007      	beq.n	b5ae <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    b59e:	693b      	ldr	r3, [r7, #16]
    b5a0:	885b      	ldrh	r3, [r3, #2]
    b5a2:	b29b      	uxth	r3, r3
    b5a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    b5a8:	b29a      	uxth	r2, r3
    b5aa:	693b      	ldr	r3, [r7, #16]
    b5ac:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    b5ae:	693b      	ldr	r3, [r7, #16]
    b5b0:	881b      	ldrh	r3, [r3, #0]
    b5b2:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b5b4:	f240 74fe 	movw	r4, #2046	; 0x7fe
    b5b8:	401c      	ands	r4, r3
    b5ba:	6978      	ldr	r0, [r7, #20]
    b5bc:	4b21      	ldr	r3, [pc, #132]	; (b644 <_sercom_i2c_sync_send_address+0x110>)
    b5be:	4798      	blx	r3
    b5c0:	4603      	mov	r3, r0
    b5c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b5c6:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    b5c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b5cc:	4619      	mov	r1, r3
    b5ce:	6978      	ldr	r0, [r7, #20]
    b5d0:	4b1d      	ldr	r3, [pc, #116]	; (b648 <_sercom_i2c_sync_send_address+0x114>)
    b5d2:	4798      	blx	r3
    b5d4:	e01a      	b.n	b60c <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    b5d6:	693b      	ldr	r3, [r7, #16]
    b5d8:	881b      	ldrh	r3, [r3, #0]
    b5da:	005b      	lsls	r3, r3, #1
    b5dc:	b2db      	uxtb	r3, r3
    b5de:	693a      	ldr	r2, [r7, #16]
    b5e0:	8852      	ldrh	r2, [r2, #2]
    b5e2:	b292      	uxth	r2, r2
    b5e4:	f002 0201 	and.w	r2, r2, #1
    b5e8:	2a00      	cmp	r2, #0
    b5ea:	bf14      	ite	ne
    b5ec:	2201      	movne	r2, #1
    b5ee:	2200      	moveq	r2, #0
    b5f0:	b2d2      	uxtb	r2, r2
    b5f2:	4313      	orrs	r3, r2
    b5f4:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b5f6:	6978      	ldr	r0, [r7, #20]
    b5f8:	4b12      	ldr	r3, [pc, #72]	; (b644 <_sercom_i2c_sync_send_address+0x110>)
    b5fa:	4798      	blx	r3
    b5fc:	4603      	mov	r3, r0
    b5fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    b602:	4323      	orrs	r3, r4
    b604:	4619      	mov	r1, r3
    b606:	6978      	ldr	r0, [r7, #20]
    b608:	4b0f      	ldr	r3, [pc, #60]	; (b648 <_sercom_i2c_sync_send_address+0x114>)
    b60a:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    b60c:	f107 0308 	add.w	r3, r7, #8
    b610:	4619      	mov	r1, r3
    b612:	6878      	ldr	r0, [r7, #4]
    b614:	4b0d      	ldr	r3, [pc, #52]	; (b64c <_sercom_i2c_sync_send_address+0x118>)
    b616:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    b618:	68bb      	ldr	r3, [r7, #8]
    b61a:	693a      	ldr	r2, [r7, #16]
    b61c:	4619      	mov	r1, r3
    b61e:	6978      	ldr	r0, [r7, #20]
    b620:	4b0b      	ldr	r3, [pc, #44]	; (b650 <_sercom_i2c_sync_send_address+0x11c>)
    b622:	4798      	blx	r3
    b624:	4603      	mov	r3, r0
}
    b626:	4618      	mov	r0, r3
    b628:	371c      	adds	r7, #28
    b62a:	46bd      	mov	sp, r7
    b62c:	bd90      	pop	{r4, r7, pc}
    b62e:	bf00      	nop
    b630:	0000a825 	.word	0x0000a825
    b634:	0001fb48 	.word	0x0001fb48
    b638:	0000799d 	.word	0x0000799d
    b63c:	0000a9d5 	.word	0x0000a9d5
    b640:	0000a9fd 	.word	0x0000a9fd
    b644:	0000ab3d 	.word	0x0000ab3d
    b648:	0000ab19 	.word	0x0000ab19
    b64c:	0000b4d9 	.word	0x0000b4d9
    b650:	0000adcd 	.word	0x0000adcd

0000b654 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    b654:	b580      	push	{r7, lr}
    b656:	b086      	sub	sp, #24
    b658:	af00      	add	r7, sp, #0
    b65a:	6078      	str	r0, [r7, #4]
    b65c:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    b65e:	687b      	ldr	r3, [r7, #4]
    b660:	691b      	ldr	r3, [r3, #16]
    b662:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    b664:	687b      	ldr	r3, [r7, #4]
    b666:	2b00      	cmp	r3, #0
    b668:	bf14      	ite	ne
    b66a:	2301      	movne	r3, #1
    b66c:	2300      	moveq	r3, #0
    b66e:	b2db      	uxtb	r3, r3
    b670:	f240 6206 	movw	r2, #1542	; 0x606
    b674:	493b      	ldr	r1, [pc, #236]	; (b764 <_i2c_m_sync_transfer+0x110>)
    b676:	4618      	mov	r0, r3
    b678:	4b3b      	ldr	r3, [pc, #236]	; (b768 <_i2c_m_sync_transfer+0x114>)
    b67a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    b67c:	687b      	ldr	r3, [r7, #4]
    b67e:	691b      	ldr	r3, [r3, #16]
    b680:	2b00      	cmp	r3, #0
    b682:	bf14      	ite	ne
    b684:	2301      	movne	r3, #1
    b686:	2300      	moveq	r3, #0
    b688:	b2db      	uxtb	r3, r3
    b68a:	f240 6207 	movw	r2, #1543	; 0x607
    b68e:	4935      	ldr	r1, [pc, #212]	; (b764 <_i2c_m_sync_transfer+0x110>)
    b690:	4618      	mov	r0, r3
    b692:	4b35      	ldr	r3, [pc, #212]	; (b768 <_i2c_m_sync_transfer+0x114>)
    b694:	4798      	blx	r3
	ASSERT(msg);
    b696:	683b      	ldr	r3, [r7, #0]
    b698:	2b00      	cmp	r3, #0
    b69a:	bf14      	ite	ne
    b69c:	2301      	movne	r3, #1
    b69e:	2300      	moveq	r3, #0
    b6a0:	b2db      	uxtb	r3, r3
    b6a2:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    b6a6:	492f      	ldr	r1, [pc, #188]	; (b764 <_i2c_m_sync_transfer+0x110>)
    b6a8:	4618      	mov	r0, r3
    b6aa:	4b2f      	ldr	r3, [pc, #188]	; (b768 <_i2c_m_sync_transfer+0x114>)
    b6ac:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    b6ae:	687b      	ldr	r3, [r7, #4]
    b6b0:	885b      	ldrh	r3, [r3, #2]
    b6b2:	b29b      	uxth	r3, r3
    b6b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b6b8:	2b00      	cmp	r3, #0
    b6ba:	d002      	beq.n	b6c2 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    b6bc:	f06f 0305 	mvn.w	r3, #5
    b6c0:	e04c      	b.n	b75c <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    b6c2:	683b      	ldr	r3, [r7, #0]
    b6c4:	885b      	ldrh	r3, [r3, #2]
    b6c6:	b29b      	uxth	r3, r3
    b6c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b6cc:	b29a      	uxth	r2, r3
    b6ce:	683b      	ldr	r3, [r7, #0]
    b6d0:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    b6d2:	687b      	ldr	r3, [r7, #4]
    b6d4:	683a      	ldr	r2, [r7, #0]
    b6d6:	ca07      	ldmia	r2, {r0, r1, r2}
    b6d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    b6dc:	6938      	ldr	r0, [r7, #16]
    b6de:	4b23      	ldr	r3, [pc, #140]	; (b76c <_i2c_m_sync_transfer+0x118>)
    b6e0:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    b6e2:	6878      	ldr	r0, [r7, #4]
    b6e4:	4b22      	ldr	r3, [pc, #136]	; (b770 <_i2c_m_sync_transfer+0x11c>)
    b6e6:	4798      	blx	r3
    b6e8:	6178      	str	r0, [r7, #20]

	if (ret) {
    b6ea:	697b      	ldr	r3, [r7, #20]
    b6ec:	2b00      	cmp	r3, #0
    b6ee:	d02d      	beq.n	b74c <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b6f0:	687b      	ldr	r3, [r7, #4]
    b6f2:	885b      	ldrh	r3, [r3, #2]
    b6f4:	b29b      	uxth	r3, r3
    b6f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b6fa:	b29a      	uxth	r2, r3
    b6fc:	687b      	ldr	r3, [r7, #4]
    b6fe:	805a      	strh	r2, [r3, #2]

		return ret;
    b700:	697b      	ldr	r3, [r7, #20]
    b702:	e02b      	b.n	b75c <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    b704:	f107 030c 	add.w	r3, r7, #12
    b708:	4619      	mov	r1, r3
    b70a:	6878      	ldr	r0, [r7, #4]
    b70c:	4b19      	ldr	r3, [pc, #100]	; (b774 <_i2c_m_sync_transfer+0x120>)
    b70e:	4798      	blx	r3
    b710:	6178      	str	r0, [r7, #20]

		if (ret) {
    b712:	697b      	ldr	r3, [r7, #20]
    b714:	2b00      	cmp	r3, #0
    b716:	d012      	beq.n	b73e <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    b718:	683b      	ldr	r3, [r7, #0]
    b71a:	885b      	ldrh	r3, [r3, #2]
    b71c:	b29b      	uxth	r3, r3
    b71e:	b21b      	sxth	r3, r3
    b720:	2b00      	cmp	r3, #0
    b722:	da02      	bge.n	b72a <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    b724:	6938      	ldr	r0, [r7, #16]
    b726:	4b14      	ldr	r3, [pc, #80]	; (b778 <_i2c_m_sync_transfer+0x124>)
    b728:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    b72a:	687b      	ldr	r3, [r7, #4]
    b72c:	885b      	ldrh	r3, [r3, #2]
    b72e:	b29b      	uxth	r3, r3
    b730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    b734:	b29a      	uxth	r2, r3
    b736:	687b      	ldr	r3, [r7, #4]
    b738:	805a      	strh	r2, [r3, #2]

			return ret;
    b73a:	697b      	ldr	r3, [r7, #20]
    b73c:	e00e      	b.n	b75c <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    b73e:	68fb      	ldr	r3, [r7, #12]
    b740:	687a      	ldr	r2, [r7, #4]
    b742:	4619      	mov	r1, r3
    b744:	6938      	ldr	r0, [r7, #16]
    b746:	4b0d      	ldr	r3, [pc, #52]	; (b77c <_i2c_m_sync_transfer+0x128>)
    b748:	4798      	blx	r3
    b74a:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    b74c:	687b      	ldr	r3, [r7, #4]
    b74e:	885b      	ldrh	r3, [r3, #2]
    b750:	b29b      	uxth	r3, r3
    b752:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b756:	2b00      	cmp	r3, #0
    b758:	d1d4      	bne.n	b704 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    b75a:	697b      	ldr	r3, [r7, #20]
}
    b75c:	4618      	mov	r0, r3
    b75e:	3718      	adds	r7, #24
    b760:	46bd      	mov	sp, r7
    b762:	bd80      	pop	{r7, pc}
    b764:	0001fb48 	.word	0x0001fb48
    b768:	0000799d 	.word	0x0000799d
    b76c:	0000a985 	.word	0x0000a985
    b770:	0000b535 	.word	0x0000b535
    b774:	0000b4d9 	.word	0x0000b4d9
    b778:	0000adb1 	.word	0x0000adb1
    b77c:	0000adcd 	.word	0x0000adcd

0000b780 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    b780:	b580      	push	{r7, lr}
    b782:	b084      	sub	sp, #16
    b784:	af00      	add	r7, sp, #0
    b786:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    b788:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b78c:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    b78e:	2304      	movs	r3, #4
    b790:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    b792:	687b      	ldr	r3, [r7, #4]
    b794:	2b00      	cmp	r3, #0
    b796:	bf14      	ite	ne
    b798:	2301      	movne	r3, #1
    b79a:	2300      	moveq	r3, #0
    b79c:	b2db      	uxtb	r3, r3
    b79e:	f240 623b 	movw	r2, #1595	; 0x63b
    b7a2:	4915      	ldr	r1, [pc, #84]	; (b7f8 <_i2c_m_enable_implementation+0x78>)
    b7a4:	4618      	mov	r0, r3
    b7a6:	4b15      	ldr	r3, [pc, #84]	; (b7fc <_i2c_m_enable_implementation+0x7c>)
    b7a8:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    b7aa:	6878      	ldr	r0, [r7, #4]
    b7ac:	4b14      	ldr	r3, [pc, #80]	; (b800 <_i2c_m_enable_implementation+0x80>)
    b7ae:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    b7b0:	e016      	b.n	b7e0 <_i2c_m_enable_implementation+0x60>
		timeout--;
    b7b2:	68fb      	ldr	r3, [r7, #12]
    b7b4:	3b01      	subs	r3, #1
    b7b6:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    b7b8:	68fb      	ldr	r3, [r7, #12]
    b7ba:	2b00      	cmp	r3, #0
    b7bc:	dc10      	bgt.n	b7e0 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    b7be:	68bb      	ldr	r3, [r7, #8]
    b7c0:	3b01      	subs	r3, #1
    b7c2:	60bb      	str	r3, [r7, #8]
    b7c4:	68bb      	ldr	r3, [r7, #8]
    b7c6:	2b00      	cmp	r3, #0
    b7c8:	d007      	beq.n	b7da <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    b7ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b7ce:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    b7d0:	2110      	movs	r1, #16
    b7d2:	6878      	ldr	r0, [r7, #4]
    b7d4:	4b0b      	ldr	r3, [pc, #44]	; (b804 <_i2c_m_enable_implementation+0x84>)
    b7d6:	4798      	blx	r3
    b7d8:	e002      	b.n	b7e0 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    b7da:	f06f 0305 	mvn.w	r3, #5
    b7de:	e006      	b.n	b7ee <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    b7e0:	6878      	ldr	r0, [r7, #4]
    b7e2:	4b09      	ldr	r3, [pc, #36]	; (b808 <_i2c_m_enable_implementation+0x88>)
    b7e4:	4798      	blx	r3
    b7e6:	4603      	mov	r3, r0
    b7e8:	2b01      	cmp	r3, #1
    b7ea:	d1e2      	bne.n	b7b2 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    b7ec:	2300      	movs	r3, #0
}
    b7ee:	4618      	mov	r0, r3
    b7f0:	3710      	adds	r7, #16
    b7f2:	46bd      	mov	sp, r7
    b7f4:	bd80      	pop	{r7, pc}
    b7f6:	bf00      	nop
    b7f8:	0001fb48 	.word	0x0001fb48
    b7fc:	0000799d 	.word	0x0000799d
    b800:	0000a7d5 	.word	0x0000a7d5
    b804:	0000ac81 	.word	0x0000ac81
    b808:	0000ac31 	.word	0x0000ac31

0000b80c <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    b80c:	b580      	push	{r7, lr}
    b80e:	b084      	sub	sp, #16
    b810:	af00      	add	r7, sp, #0
    b812:	6078      	str	r0, [r7, #4]
    b814:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    b816:	6838      	ldr	r0, [r7, #0]
    b818:	4b42      	ldr	r3, [pc, #264]	; (b924 <_i2c_m_sync_init_impl+0x118>)
    b81a:	4798      	blx	r3
    b81c:	4603      	mov	r3, r0
    b81e:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    b820:	2101      	movs	r1, #1
    b822:	6838      	ldr	r0, [r7, #0]
    b824:	4b40      	ldr	r3, [pc, #256]	; (b928 <_i2c_m_sync_init_impl+0x11c>)
    b826:	4798      	blx	r3
    b828:	4603      	mov	r3, r0
    b82a:	f083 0301 	eor.w	r3, r3, #1
    b82e:	b2db      	uxtb	r3, r3
    b830:	2b00      	cmp	r3, #0
    b832:	d020      	beq.n	b876 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    b834:	7bfa      	ldrb	r2, [r7, #15]
    b836:	493d      	ldr	r1, [pc, #244]	; (b92c <_i2c_m_sync_init_impl+0x120>)
    b838:	4613      	mov	r3, r2
    b83a:	005b      	lsls	r3, r3, #1
    b83c:	4413      	add	r3, r2
    b83e:	00db      	lsls	r3, r3, #3
    b840:	440b      	add	r3, r1
    b842:	3304      	adds	r3, #4
    b844:	681b      	ldr	r3, [r3, #0]
    b846:	f003 031c 	and.w	r3, r3, #28
    b84a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    b84c:	2102      	movs	r1, #2
    b84e:	6838      	ldr	r0, [r7, #0]
    b850:	4b37      	ldr	r3, [pc, #220]	; (b930 <_i2c_m_sync_init_impl+0x124>)
    b852:	4798      	blx	r3
    b854:	4603      	mov	r3, r0
    b856:	2b00      	cmp	r3, #0
    b858:	d006      	beq.n	b868 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    b85a:	6838      	ldr	r0, [r7, #0]
    b85c:	4b35      	ldr	r3, [pc, #212]	; (b934 <_i2c_m_sync_init_impl+0x128>)
    b85e:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    b860:	2102      	movs	r1, #2
    b862:	6838      	ldr	r0, [r7, #0]
    b864:	4b34      	ldr	r3, [pc, #208]	; (b938 <_i2c_m_sync_init_impl+0x12c>)
    b866:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    b868:	68bb      	ldr	r3, [r7, #8]
    b86a:	f043 0301 	orr.w	r3, r3, #1
    b86e:	4619      	mov	r1, r3
    b870:	6838      	ldr	r0, [r7, #0]
    b872:	4b32      	ldr	r3, [pc, #200]	; (b93c <_i2c_m_sync_init_impl+0x130>)
    b874:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    b876:	2101      	movs	r1, #1
    b878:	6838      	ldr	r0, [r7, #0]
    b87a:	4b2f      	ldr	r3, [pc, #188]	; (b938 <_i2c_m_sync_init_impl+0x12c>)
    b87c:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    b87e:	7bfa      	ldrb	r2, [r7, #15]
    b880:	492a      	ldr	r1, [pc, #168]	; (b92c <_i2c_m_sync_init_impl+0x120>)
    b882:	4613      	mov	r3, r2
    b884:	005b      	lsls	r3, r3, #1
    b886:	4413      	add	r3, r2
    b888:	00db      	lsls	r3, r3, #3
    b88a:	440b      	add	r3, r1
    b88c:	3304      	adds	r3, #4
    b88e:	681b      	ldr	r3, [r3, #0]
    b890:	4619      	mov	r1, r3
    b892:	6838      	ldr	r0, [r7, #0]
    b894:	4b29      	ldr	r3, [pc, #164]	; (b93c <_i2c_m_sync_init_impl+0x130>)
    b896:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    b898:	7bfa      	ldrb	r2, [r7, #15]
    b89a:	4924      	ldr	r1, [pc, #144]	; (b92c <_i2c_m_sync_init_impl+0x120>)
    b89c:	4613      	mov	r3, r2
    b89e:	005b      	lsls	r3, r3, #1
    b8a0:	4413      	add	r3, r2
    b8a2:	00db      	lsls	r3, r3, #3
    b8a4:	440b      	add	r3, r1
    b8a6:	3308      	adds	r3, #8
    b8a8:	681b      	ldr	r3, [r3, #0]
    b8aa:	4619      	mov	r1, r3
    b8ac:	6838      	ldr	r0, [r7, #0]
    b8ae:	4b24      	ldr	r3, [pc, #144]	; (b940 <_i2c_m_sync_init_impl+0x134>)
    b8b0:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    b8b2:	7bfa      	ldrb	r2, [r7, #15]
    b8b4:	491d      	ldr	r1, [pc, #116]	; (b92c <_i2c_m_sync_init_impl+0x120>)
    b8b6:	4613      	mov	r3, r2
    b8b8:	005b      	lsls	r3, r3, #1
    b8ba:	4413      	add	r3, r2
    b8bc:	00db      	lsls	r3, r3, #3
    b8be:	440b      	add	r3, r1
    b8c0:	330c      	adds	r3, #12
    b8c2:	681b      	ldr	r3, [r3, #0]
    b8c4:	4619      	mov	r1, r3
    b8c6:	6838      	ldr	r0, [r7, #0]
    b8c8:	4b1e      	ldr	r3, [pc, #120]	; (b944 <_i2c_m_sync_init_impl+0x138>)
    b8ca:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    b8cc:	7bfa      	ldrb	r2, [r7, #15]
    b8ce:	4917      	ldr	r1, [pc, #92]	; (b92c <_i2c_m_sync_init_impl+0x120>)
    b8d0:	4613      	mov	r3, r2
    b8d2:	005b      	lsls	r3, r3, #1
    b8d4:	4413      	add	r3, r2
    b8d6:	00db      	lsls	r3, r3, #3
    b8d8:	440b      	add	r3, r1
    b8da:	3304      	adds	r3, #4
    b8dc:	681b      	ldr	r3, [r3, #0]
    b8de:	0e1b      	lsrs	r3, r3, #24
    b8e0:	b29b      	uxth	r3, r3
    b8e2:	f003 0303 	and.w	r3, r3, #3
    b8e6:	b29a      	uxth	r2, r3
    b8e8:	687b      	ldr	r3, [r7, #4]
    b8ea:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    b8ec:	687b      	ldr	r3, [r7, #4]
    b8ee:	899b      	ldrh	r3, [r3, #12]
    b8f0:	2b01      	cmp	r3, #1
    b8f2:	bf8c      	ite	hi
    b8f4:	2301      	movhi	r3, #1
    b8f6:	2300      	movls	r3, #0
    b8f8:	b2db      	uxtb	r3, r3
    b8fa:	4619      	mov	r1, r3
    b8fc:	6838      	ldr	r0, [r7, #0]
    b8fe:	4b12      	ldr	r3, [pc, #72]	; (b948 <_i2c_m_sync_init_impl+0x13c>)
    b900:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    b902:	7bfa      	ldrb	r2, [r7, #15]
    b904:	4909      	ldr	r1, [pc, #36]	; (b92c <_i2c_m_sync_init_impl+0x120>)
    b906:	4613      	mov	r3, r2
    b908:	005b      	lsls	r3, r3, #1
    b90a:	4413      	add	r3, r2
    b90c:	00db      	lsls	r3, r3, #3
    b90e:	440b      	add	r3, r1
    b910:	3312      	adds	r3, #18
    b912:	881a      	ldrh	r2, [r3, #0]
    b914:	687b      	ldr	r3, [r7, #4]
    b916:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    b918:	2300      	movs	r3, #0
}
    b91a:	4618      	mov	r0, r3
    b91c:	3710      	adds	r7, #16
    b91e:	46bd      	mov	sp, r7
    b920:	bd80      	pop	{r7, pc}
    b922:	bf00      	nop
    b924:	0000ad49 	.word	0x0000ad49
    b928:	0000a5fd 	.word	0x0000a5fd
    b92c:	2000007c 	.word	0x2000007c
    b930:	0000a855 	.word	0x0000a855
    b934:	0000a7fd 	.word	0x0000a7fd
    b938:	0000a5d9 	.word	0x0000a5d9
    b93c:	0000a885 	.word	0x0000a885
    b940:	0000aa55 	.word	0x0000aa55
    b944:	0000aa9d 	.word	0x0000aa9d
    b948:	0000aad9 	.word	0x0000aad9

0000b94c <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    b94c:	b580      	push	{r7, lr}
    b94e:	b082      	sub	sp, #8
    b950:	af00      	add	r7, sp, #0
    b952:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    b954:	2101      	movs	r1, #1
    b956:	6878      	ldr	r0, [r7, #4]
    b958:	4b07      	ldr	r3, [pc, #28]	; (b978 <_spi_sync_enable+0x2c>)
    b95a:	4798      	blx	r3
    b95c:	4603      	mov	r3, r0
    b95e:	2b00      	cmp	r3, #0
    b960:	d002      	beq.n	b968 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    b962:	f06f 0303 	mvn.w	r3, #3
    b966:	e003      	b.n	b970 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    b968:	6878      	ldr	r0, [r7, #4]
    b96a:	4b04      	ldr	r3, [pc, #16]	; (b97c <_spi_sync_enable+0x30>)
    b96c:	4798      	blx	r3

	return ERR_NONE;
    b96e:	2300      	movs	r3, #0
}
    b970:	4618      	mov	r0, r3
    b972:	3708      	adds	r7, #8
    b974:	46bd      	mov	sp, r7
    b976:	bd80      	pop	{r7, pc}
    b978:	0000a649 	.word	0x0000a649
    b97c:	0000a8a9 	.word	0x0000a8a9

0000b980 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    b980:	b580      	push	{r7, lr}
    b982:	b082      	sub	sp, #8
    b984:	af00      	add	r7, sp, #0
    b986:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    b988:	2101      	movs	r1, #1
    b98a:	6878      	ldr	r0, [r7, #4]
    b98c:	4b07      	ldr	r3, [pc, #28]	; (b9ac <_spi_sync_disable+0x2c>)
    b98e:	4798      	blx	r3
    b990:	4603      	mov	r3, r0
    b992:	2b00      	cmp	r3, #0
    b994:	d002      	beq.n	b99c <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    b996:	f06f 0303 	mvn.w	r3, #3
    b99a:	e003      	b.n	b9a4 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    b99c:	6878      	ldr	r0, [r7, #4]
    b99e:	4b04      	ldr	r3, [pc, #16]	; (b9b0 <_spi_sync_disable+0x30>)
    b9a0:	4798      	blx	r3

	return ERR_NONE;
    b9a2:	2300      	movs	r3, #0
}
    b9a4:	4618      	mov	r0, r3
    b9a6:	3708      	adds	r7, #8
    b9a8:	46bd      	mov	sp, r7
    b9aa:	bd80      	pop	{r7, pc}
    b9ac:	0000a649 	.word	0x0000a649
    b9b0:	0000a909 	.word	0x0000a909

0000b9b4 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    b9b4:	b580      	push	{r7, lr}
    b9b6:	b082      	sub	sp, #8
    b9b8:	af00      	add	r7, sp, #0
    b9ba:	6078      	str	r0, [r7, #4]
    b9bc:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    b9be:	687b      	ldr	r3, [r7, #4]
    b9c0:	2b00      	cmp	r3, #0
    b9c2:	d004      	beq.n	b9ce <_spi_load_regs_master+0x1a>
    b9c4:	683b      	ldr	r3, [r7, #0]
    b9c6:	2b00      	cmp	r3, #0
    b9c8:	d001      	beq.n	b9ce <_spi_load_regs_master+0x1a>
    b9ca:	2301      	movs	r3, #1
    b9cc:	e000      	b.n	b9d0 <_spi_load_regs_master+0x1c>
    b9ce:	2300      	movs	r3, #0
    b9d0:	f003 0301 	and.w	r3, r3, #1
    b9d4:	b2db      	uxtb	r3, r3
    b9d6:	f640 123f 	movw	r2, #2367	; 0x93f
    b9da:	4915      	ldr	r1, [pc, #84]	; (ba30 <_spi_load_regs_master+0x7c>)
    b9dc:	4618      	mov	r0, r3
    b9de:	4b15      	ldr	r3, [pc, #84]	; (ba34 <_spi_load_regs_master+0x80>)
    b9e0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    b9e2:	683b      	ldr	r3, [r7, #0]
    b9e4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    b9e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    b9ea:	f023 0301 	bic.w	r3, r3, #1
    b9ee:	4619      	mov	r1, r3
    b9f0:	6878      	ldr	r0, [r7, #4]
    b9f2:	4b11      	ldr	r3, [pc, #68]	; (ba38 <_spi_load_regs_master+0x84>)
    b9f4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    b9f6:	683b      	ldr	r3, [r7, #0]
    b9f8:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    b9fa:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    b9fe:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    ba02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ba06:	4619      	mov	r1, r3
    ba08:	6878      	ldr	r0, [r7, #4]
    ba0a:	4b0c      	ldr	r3, [pc, #48]	; (ba3c <_spi_load_regs_master+0x88>)
    ba0c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    ba0e:	683b      	ldr	r3, [r7, #0]
    ba10:	7b1b      	ldrb	r3, [r3, #12]
    ba12:	4619      	mov	r1, r3
    ba14:	6878      	ldr	r0, [r7, #4]
    ba16:	4b0a      	ldr	r3, [pc, #40]	; (ba40 <_spi_load_regs_master+0x8c>)
    ba18:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    ba1a:	683b      	ldr	r3, [r7, #0]
    ba1c:	7b5b      	ldrb	r3, [r3, #13]
    ba1e:	4619      	mov	r1, r3
    ba20:	6878      	ldr	r0, [r7, #4]
    ba22:	4b08      	ldr	r3, [pc, #32]	; (ba44 <_spi_load_regs_master+0x90>)
    ba24:	4798      	blx	r3
}
    ba26:	bf00      	nop
    ba28:	3708      	adds	r7, #8
    ba2a:	46bd      	mov	sp, r7
    ba2c:	bd80      	pop	{r7, pc}
    ba2e:	bf00      	nop
    ba30:	0001fb48 	.word	0x0001fb48
    ba34:	0000799d 	.word	0x0000799d
    ba38:	0000a961 	.word	0x0000a961
    ba3c:	0000aa79 	.word	0x0000aa79
    ba40:	0000aab9 	.word	0x0000aab9
    ba44:	0000abf1 	.word	0x0000abf1

0000ba48 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    ba48:	b580      	push	{r7, lr}
    ba4a:	b082      	sub	sp, #8
    ba4c:	af00      	add	r7, sp, #0
    ba4e:	6078      	str	r0, [r7, #4]
    ba50:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    ba52:	687b      	ldr	r3, [r7, #4]
    ba54:	2b00      	cmp	r3, #0
    ba56:	d004      	beq.n	ba62 <_spi_load_regs_slave+0x1a>
    ba58:	683b      	ldr	r3, [r7, #0]
    ba5a:	2b00      	cmp	r3, #0
    ba5c:	d001      	beq.n	ba62 <_spi_load_regs_slave+0x1a>
    ba5e:	2301      	movs	r3, #1
    ba60:	e000      	b.n	ba64 <_spi_load_regs_slave+0x1c>
    ba62:	2300      	movs	r3, #0
    ba64:	f003 0301 	and.w	r3, r3, #1
    ba68:	b2db      	uxtb	r3, r3
    ba6a:	f640 1253 	movw	r2, #2387	; 0x953
    ba6e:	491a      	ldr	r1, [pc, #104]	; (bad8 <_spi_load_regs_slave+0x90>)
    ba70:	4618      	mov	r0, r3
    ba72:	4b1a      	ldr	r3, [pc, #104]	; (badc <_spi_load_regs_slave+0x94>)
    ba74:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    ba76:	683b      	ldr	r3, [r7, #0]
    ba78:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    ba7a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    ba7e:	f023 0301 	bic.w	r3, r3, #1
    ba82:	4619      	mov	r1, r3
    ba84:	6878      	ldr	r0, [r7, #4]
    ba86:	4b16      	ldr	r3, [pc, #88]	; (bae0 <_spi_load_regs_slave+0x98>)
    ba88:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    ba8a:	683b      	ldr	r3, [r7, #0]
    ba8c:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    ba8e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    ba92:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    ba96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ba9a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    ba9e:	4619      	mov	r1, r3
    baa0:	6878      	ldr	r0, [r7, #4]
    baa2:	4b10      	ldr	r3, [pc, #64]	; (bae4 <_spi_load_regs_slave+0x9c>)
    baa4:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    baa6:	683b      	ldr	r3, [r7, #0]
    baa8:	689b      	ldr	r3, [r3, #8]
    baaa:	4619      	mov	r1, r3
    baac:	6878      	ldr	r0, [r7, #4]
    baae:	4b0e      	ldr	r3, [pc, #56]	; (bae8 <_spi_load_regs_slave+0xa0>)
    bab0:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    bab2:	683b      	ldr	r3, [r7, #0]
    bab4:	7b5b      	ldrb	r3, [r3, #13]
    bab6:	4619      	mov	r1, r3
    bab8:	6878      	ldr	r0, [r7, #4]
    baba:	4b0c      	ldr	r3, [pc, #48]	; (baec <_spi_load_regs_slave+0xa4>)
    babc:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    babe:	bf00      	nop
    bac0:	f04f 31ff 	mov.w	r1, #4294967295
    bac4:	6878      	ldr	r0, [r7, #4]
    bac6:	4b0a      	ldr	r3, [pc, #40]	; (baf0 <_spi_load_regs_slave+0xa8>)
    bac8:	4798      	blx	r3
    baca:	4603      	mov	r3, r0
    bacc:	2b00      	cmp	r3, #0
    bace:	d1f7      	bne.n	bac0 <_spi_load_regs_slave+0x78>
		;
}
    bad0:	bf00      	nop
    bad2:	3708      	adds	r7, #8
    bad4:	46bd      	mov	sp, r7
    bad6:	bd80      	pop	{r7, pc}
    bad8:	0001fb48 	.word	0x0001fb48
    badc:	0000799d 	.word	0x0000799d
    bae0:	0000a961 	.word	0x0000a961
    bae4:	0000aa79 	.word	0x0000aa79
    bae8:	0000ab5d 	.word	0x0000ab5d
    baec:	0000abf1 	.word	0x0000abf1
    baf0:	0000a649 	.word	0x0000a649

0000baf4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    baf4:	b580      	push	{r7, lr}
    baf6:	b084      	sub	sp, #16
    baf8:	af00      	add	r7, sp, #0
    bafa:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    bafc:	687b      	ldr	r3, [r7, #4]
    bafe:	4618      	mov	r0, r3
    bb00:	4b11      	ldr	r3, [pc, #68]	; (bb48 <_spi_get_regs+0x54>)
    bb02:	4798      	blx	r3
    bb04:	4603      	mov	r3, r0
    bb06:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    bb08:	2300      	movs	r3, #0
    bb0a:	73fb      	strb	r3, [r7, #15]
    bb0c:	e014      	b.n	bb38 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    bb0e:	7bfa      	ldrb	r2, [r7, #15]
    bb10:	490e      	ldr	r1, [pc, #56]	; (bb4c <_spi_get_regs+0x58>)
    bb12:	4613      	mov	r3, r2
    bb14:	011b      	lsls	r3, r3, #4
    bb16:	4413      	add	r3, r2
    bb18:	440b      	add	r3, r1
    bb1a:	3310      	adds	r3, #16
    bb1c:	781b      	ldrb	r3, [r3, #0]
    bb1e:	7bba      	ldrb	r2, [r7, #14]
    bb20:	429a      	cmp	r2, r3
    bb22:	d106      	bne.n	bb32 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    bb24:	7bfa      	ldrb	r2, [r7, #15]
    bb26:	4613      	mov	r3, r2
    bb28:	011b      	lsls	r3, r3, #4
    bb2a:	4413      	add	r3, r2
    bb2c:	4a07      	ldr	r2, [pc, #28]	; (bb4c <_spi_get_regs+0x58>)
    bb2e:	4413      	add	r3, r2
    bb30:	e006      	b.n	bb40 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    bb32:	7bfb      	ldrb	r3, [r7, #15]
    bb34:	3301      	adds	r3, #1
    bb36:	73fb      	strb	r3, [r7, #15]
    bb38:	7bfb      	ldrb	r3, [r7, #15]
    bb3a:	2b02      	cmp	r3, #2
    bb3c:	d9e7      	bls.n	bb0e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    bb3e:	2300      	movs	r3, #0
}
    bb40:	4618      	mov	r0, r3
    bb42:	3710      	adds	r7, #16
    bb44:	46bd      	mov	sp, r7
    bb46:	bd80      	pop	{r7, pc}
    bb48:	0000aca9 	.word	0x0000aca9
    bb4c:	0001fb84 	.word	0x0001fb84

0000bb50 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    bb50:	b580      	push	{r7, lr}
    bb52:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    bb54:	4b03      	ldr	r3, [pc, #12]	; (bb64 <SERCOM5_0_Handler+0x14>)
    bb56:	681b      	ldr	r3, [r3, #0]
    bb58:	4618      	mov	r0, r3
    bb5a:	4b03      	ldr	r3, [pc, #12]	; (bb68 <SERCOM5_0_Handler+0x18>)
    bb5c:	4798      	blx	r3
}
    bb5e:	bf00      	nop
    bb60:	bd80      	pop	{r7, pc}
    bb62:	bf00      	nop
    bb64:	2000888c 	.word	0x2000888c
    bb68:	0000affd 	.word	0x0000affd

0000bb6c <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    bb6c:	b580      	push	{r7, lr}
    bb6e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    bb70:	4b03      	ldr	r3, [pc, #12]	; (bb80 <SERCOM5_1_Handler+0x14>)
    bb72:	681b      	ldr	r3, [r3, #0]
    bb74:	4618      	mov	r0, r3
    bb76:	4b03      	ldr	r3, [pc, #12]	; (bb84 <SERCOM5_1_Handler+0x18>)
    bb78:	4798      	blx	r3
}
    bb7a:	bf00      	nop
    bb7c:	bd80      	pop	{r7, pc}
    bb7e:	bf00      	nop
    bb80:	2000888c 	.word	0x2000888c
    bb84:	0000affd 	.word	0x0000affd

0000bb88 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    bb88:	b580      	push	{r7, lr}
    bb8a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    bb8c:	4b03      	ldr	r3, [pc, #12]	; (bb9c <SERCOM5_2_Handler+0x14>)
    bb8e:	681b      	ldr	r3, [r3, #0]
    bb90:	4618      	mov	r0, r3
    bb92:	4b03      	ldr	r3, [pc, #12]	; (bba0 <SERCOM5_2_Handler+0x18>)
    bb94:	4798      	blx	r3
}
    bb96:	bf00      	nop
    bb98:	bd80      	pop	{r7, pc}
    bb9a:	bf00      	nop
    bb9c:	2000888c 	.word	0x2000888c
    bba0:	0000affd 	.word	0x0000affd

0000bba4 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    bba4:	b580      	push	{r7, lr}
    bba6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    bba8:	4b03      	ldr	r3, [pc, #12]	; (bbb8 <SERCOM5_3_Handler+0x14>)
    bbaa:	681b      	ldr	r3, [r3, #0]
    bbac:	4618      	mov	r0, r3
    bbae:	4b03      	ldr	r3, [pc, #12]	; (bbbc <SERCOM5_3_Handler+0x18>)
    bbb0:	4798      	blx	r3
}
    bbb2:	bf00      	nop
    bbb4:	bd80      	pop	{r7, pc}
    bbb6:	bf00      	nop
    bbb8:	2000888c 	.word	0x2000888c
    bbbc:	0000affd 	.word	0x0000affd

0000bbc0 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    bbc0:	b580      	push	{r7, lr}
    bbc2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    bbc4:	4b03      	ldr	r3, [pc, #12]	; (bbd4 <SERCOM7_0_Handler+0x14>)
    bbc6:	681b      	ldr	r3, [r3, #0]
    bbc8:	4618      	mov	r0, r3
    bbca:	4b03      	ldr	r3, [pc, #12]	; (bbd8 <SERCOM7_0_Handler+0x18>)
    bbcc:	4798      	blx	r3
}
    bbce:	bf00      	nop
    bbd0:	bd80      	pop	{r7, pc}
    bbd2:	bf00      	nop
    bbd4:	20008890 	.word	0x20008890
    bbd8:	0000affd 	.word	0x0000affd

0000bbdc <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    bbdc:	b580      	push	{r7, lr}
    bbde:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    bbe0:	4b03      	ldr	r3, [pc, #12]	; (bbf0 <SERCOM7_1_Handler+0x14>)
    bbe2:	681b      	ldr	r3, [r3, #0]
    bbe4:	4618      	mov	r0, r3
    bbe6:	4b03      	ldr	r3, [pc, #12]	; (bbf4 <SERCOM7_1_Handler+0x18>)
    bbe8:	4798      	blx	r3
}
    bbea:	bf00      	nop
    bbec:	bd80      	pop	{r7, pc}
    bbee:	bf00      	nop
    bbf0:	20008890 	.word	0x20008890
    bbf4:	0000affd 	.word	0x0000affd

0000bbf8 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    bbf8:	b580      	push	{r7, lr}
    bbfa:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    bbfc:	4b03      	ldr	r3, [pc, #12]	; (bc0c <SERCOM7_2_Handler+0x14>)
    bbfe:	681b      	ldr	r3, [r3, #0]
    bc00:	4618      	mov	r0, r3
    bc02:	4b03      	ldr	r3, [pc, #12]	; (bc10 <SERCOM7_2_Handler+0x18>)
    bc04:	4798      	blx	r3
}
    bc06:	bf00      	nop
    bc08:	bd80      	pop	{r7, pc}
    bc0a:	bf00      	nop
    bc0c:	20008890 	.word	0x20008890
    bc10:	0000affd 	.word	0x0000affd

0000bc14 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    bc14:	b580      	push	{r7, lr}
    bc16:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    bc18:	4b03      	ldr	r3, [pc, #12]	; (bc28 <SERCOM7_3_Handler+0x14>)
    bc1a:	681b      	ldr	r3, [r3, #0]
    bc1c:	4618      	mov	r0, r3
    bc1e:	4b03      	ldr	r3, [pc, #12]	; (bc2c <SERCOM7_3_Handler+0x18>)
    bc20:	4798      	blx	r3
}
    bc22:	bf00      	nop
    bc24:	bd80      	pop	{r7, pc}
    bc26:	bf00      	nop
    bc28:	20008890 	.word	0x20008890
    bc2c:	0000affd 	.word	0x0000affd

0000bc30 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    bc30:	b580      	push	{r7, lr}
    bc32:	b084      	sub	sp, #16
    bc34:	af00      	add	r7, sp, #0
    bc36:	6078      	str	r0, [r7, #4]
    bc38:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    bc3a:	683b      	ldr	r3, [r7, #0]
    bc3c:	4618      	mov	r0, r3
    bc3e:	4b35      	ldr	r3, [pc, #212]	; (bd14 <_spi_m_sync_init+0xe4>)
    bc40:	4798      	blx	r3
    bc42:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    bc44:	687b      	ldr	r3, [r7, #4]
    bc46:	2b00      	cmp	r3, #0
    bc48:	d004      	beq.n	bc54 <_spi_m_sync_init+0x24>
    bc4a:	683b      	ldr	r3, [r7, #0]
    bc4c:	2b00      	cmp	r3, #0
    bc4e:	d001      	beq.n	bc54 <_spi_m_sync_init+0x24>
    bc50:	2301      	movs	r3, #1
    bc52:	e000      	b.n	bc56 <_spi_m_sync_init+0x26>
    bc54:	2300      	movs	r3, #0
    bc56:	f003 0301 	and.w	r3, r3, #1
    bc5a:	b2db      	uxtb	r3, r3
    bc5c:	f640 12af 	movw	r2, #2479	; 0x9af
    bc60:	492d      	ldr	r1, [pc, #180]	; (bd18 <_spi_m_sync_init+0xe8>)
    bc62:	4618      	mov	r0, r3
    bc64:	4b2d      	ldr	r3, [pc, #180]	; (bd1c <_spi_m_sync_init+0xec>)
    bc66:	4798      	blx	r3

	if (regs == NULL) {
    bc68:	68fb      	ldr	r3, [r7, #12]
    bc6a:	2b00      	cmp	r3, #0
    bc6c:	d102      	bne.n	bc74 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    bc6e:	f06f 030c 	mvn.w	r3, #12
    bc72:	e04a      	b.n	bd0a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    bc74:	2101      	movs	r1, #1
    bc76:	6838      	ldr	r0, [r7, #0]
    bc78:	4b29      	ldr	r3, [pc, #164]	; (bd20 <_spi_m_sync_init+0xf0>)
    bc7a:	4798      	blx	r3
    bc7c:	4603      	mov	r3, r0
    bc7e:	f083 0301 	eor.w	r3, r3, #1
    bc82:	b2db      	uxtb	r3, r3
    bc84:	2b00      	cmp	r3, #0
    bc86:	d019      	beq.n	bcbc <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    bc88:	68fb      	ldr	r3, [r7, #12]
    bc8a:	681b      	ldr	r3, [r3, #0]
    bc8c:	f003 031c 	and.w	r3, r3, #28
    bc90:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    bc92:	2102      	movs	r1, #2
    bc94:	6838      	ldr	r0, [r7, #0]
    bc96:	4b23      	ldr	r3, [pc, #140]	; (bd24 <_spi_m_sync_init+0xf4>)
    bc98:	4798      	blx	r3
    bc9a:	4603      	mov	r3, r0
    bc9c:	2b00      	cmp	r3, #0
    bc9e:	d006      	beq.n	bcae <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    bca0:	6838      	ldr	r0, [r7, #0]
    bca2:	4b21      	ldr	r3, [pc, #132]	; (bd28 <_spi_m_sync_init+0xf8>)
    bca4:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    bca6:	2102      	movs	r1, #2
    bca8:	6838      	ldr	r0, [r7, #0]
    bcaa:	4b20      	ldr	r3, [pc, #128]	; (bd2c <_spi_m_sync_init+0xfc>)
    bcac:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    bcae:	68bb      	ldr	r3, [r7, #8]
    bcb0:	f043 0301 	orr.w	r3, r3, #1
    bcb4:	4619      	mov	r1, r3
    bcb6:	6838      	ldr	r0, [r7, #0]
    bcb8:	4b1d      	ldr	r3, [pc, #116]	; (bd30 <_spi_m_sync_init+0x100>)
    bcba:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    bcbc:	2101      	movs	r1, #1
    bcbe:	6838      	ldr	r0, [r7, #0]
    bcc0:	4b1a      	ldr	r3, [pc, #104]	; (bd2c <_spi_m_sync_init+0xfc>)
    bcc2:	4798      	blx	r3

	dev->prvt = hw;
    bcc4:	687b      	ldr	r3, [r7, #4]
    bcc6:	683a      	ldr	r2, [r7, #0]
    bcc8:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    bcca:	68fb      	ldr	r3, [r7, #12]
    bccc:	681b      	ldr	r3, [r3, #0]
    bcce:	f003 031c 	and.w	r3, r3, #28
    bcd2:	2b08      	cmp	r3, #8
    bcd4:	d104      	bne.n	bce0 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    bcd6:	68f9      	ldr	r1, [r7, #12]
    bcd8:	6838      	ldr	r0, [r7, #0]
    bcda:	4b16      	ldr	r3, [pc, #88]	; (bd34 <_spi_m_sync_init+0x104>)
    bcdc:	4798      	blx	r3
    bcde:	e003      	b.n	bce8 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    bce0:	68f9      	ldr	r1, [r7, #12]
    bce2:	6838      	ldr	r0, [r7, #0]
    bce4:	4b14      	ldr	r3, [pc, #80]	; (bd38 <_spi_m_sync_init+0x108>)
    bce6:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    bce8:	68fb      	ldr	r3, [r7, #12]
    bcea:	685b      	ldr	r3, [r3, #4]
    bcec:	f003 0307 	and.w	r3, r3, #7
    bcf0:	2b00      	cmp	r3, #0
    bcf2:	d101      	bne.n	bcf8 <_spi_m_sync_init+0xc8>
    bcf4:	2201      	movs	r2, #1
    bcf6:	e000      	b.n	bcfa <_spi_m_sync_init+0xca>
    bcf8:	2202      	movs	r2, #2
    bcfa:	687b      	ldr	r3, [r7, #4]
    bcfc:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    bcfe:	68fb      	ldr	r3, [r7, #12]
    bd00:	89db      	ldrh	r3, [r3, #14]
    bd02:	b29a      	uxth	r2, r3
    bd04:	687b      	ldr	r3, [r7, #4]
    bd06:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    bd08:	2300      	movs	r3, #0
}
    bd0a:	4618      	mov	r0, r3
    bd0c:	3710      	adds	r7, #16
    bd0e:	46bd      	mov	sp, r7
    bd10:	bd80      	pop	{r7, pc}
    bd12:	bf00      	nop
    bd14:	0000baf5 	.word	0x0000baf5
    bd18:	0001fb48 	.word	0x0001fb48
    bd1c:	0000799d 	.word	0x0000799d
    bd20:	0000a649 	.word	0x0000a649
    bd24:	0000a931 	.word	0x0000a931
    bd28:	0000a909 	.word	0x0000a909
    bd2c:	0000a625 	.word	0x0000a625
    bd30:	0000a961 	.word	0x0000a961
    bd34:	0000ba49 	.word	0x0000ba49
    bd38:	0000b9b5 	.word	0x0000b9b5

0000bd3c <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    bd3c:	b580      	push	{r7, lr}
    bd3e:	b082      	sub	sp, #8
    bd40:	af00      	add	r7, sp, #0
    bd42:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    bd44:	687b      	ldr	r3, [r7, #4]
    bd46:	2b00      	cmp	r3, #0
    bd48:	d005      	beq.n	bd56 <_spi_m_sync_enable+0x1a>
    bd4a:	687b      	ldr	r3, [r7, #4]
    bd4c:	681b      	ldr	r3, [r3, #0]
    bd4e:	2b00      	cmp	r3, #0
    bd50:	d001      	beq.n	bd56 <_spi_m_sync_enable+0x1a>
    bd52:	2301      	movs	r3, #1
    bd54:	e000      	b.n	bd58 <_spi_m_sync_enable+0x1c>
    bd56:	2300      	movs	r3, #0
    bd58:	f003 0301 	and.w	r3, r3, #1
    bd5c:	b2db      	uxtb	r3, r3
    bd5e:	f640 220e 	movw	r2, #2574	; 0xa0e
    bd62:	4907      	ldr	r1, [pc, #28]	; (bd80 <_spi_m_sync_enable+0x44>)
    bd64:	4618      	mov	r0, r3
    bd66:	4b07      	ldr	r3, [pc, #28]	; (bd84 <_spi_m_sync_enable+0x48>)
    bd68:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    bd6a:	687b      	ldr	r3, [r7, #4]
    bd6c:	681b      	ldr	r3, [r3, #0]
    bd6e:	4618      	mov	r0, r3
    bd70:	4b05      	ldr	r3, [pc, #20]	; (bd88 <_spi_m_sync_enable+0x4c>)
    bd72:	4798      	blx	r3
    bd74:	4603      	mov	r3, r0
}
    bd76:	4618      	mov	r0, r3
    bd78:	3708      	adds	r7, #8
    bd7a:	46bd      	mov	sp, r7
    bd7c:	bd80      	pop	{r7, pc}
    bd7e:	bf00      	nop
    bd80:	0001fb48 	.word	0x0001fb48
    bd84:	0000799d 	.word	0x0000799d
    bd88:	0000b94d 	.word	0x0000b94d

0000bd8c <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    bd8c:	b580      	push	{r7, lr}
    bd8e:	b082      	sub	sp, #8
    bd90:	af00      	add	r7, sp, #0
    bd92:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    bd94:	687b      	ldr	r3, [r7, #4]
    bd96:	2b00      	cmp	r3, #0
    bd98:	d005      	beq.n	bda6 <_spi_m_sync_disable+0x1a>
    bd9a:	687b      	ldr	r3, [r7, #4]
    bd9c:	681b      	ldr	r3, [r3, #0]
    bd9e:	2b00      	cmp	r3, #0
    bda0:	d001      	beq.n	bda6 <_spi_m_sync_disable+0x1a>
    bda2:	2301      	movs	r3, #1
    bda4:	e000      	b.n	bda8 <_spi_m_sync_disable+0x1c>
    bda6:	2300      	movs	r3, #0
    bda8:	f003 0301 	and.w	r3, r3, #1
    bdac:	b2db      	uxtb	r3, r3
    bdae:	f640 222a 	movw	r2, #2602	; 0xa2a
    bdb2:	4907      	ldr	r1, [pc, #28]	; (bdd0 <_spi_m_sync_disable+0x44>)
    bdb4:	4618      	mov	r0, r3
    bdb6:	4b07      	ldr	r3, [pc, #28]	; (bdd4 <_spi_m_sync_disable+0x48>)
    bdb8:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    bdba:	687b      	ldr	r3, [r7, #4]
    bdbc:	681b      	ldr	r3, [r3, #0]
    bdbe:	4618      	mov	r0, r3
    bdc0:	4b05      	ldr	r3, [pc, #20]	; (bdd8 <_spi_m_sync_disable+0x4c>)
    bdc2:	4798      	blx	r3
    bdc4:	4603      	mov	r3, r0
}
    bdc6:	4618      	mov	r0, r3
    bdc8:	3708      	adds	r7, #8
    bdca:	46bd      	mov	sp, r7
    bdcc:	bd80      	pop	{r7, pc}
    bdce:	bf00      	nop
    bdd0:	0001fb48 	.word	0x0001fb48
    bdd4:	0000799d 	.word	0x0000799d
    bdd8:	0000b981 	.word	0x0000b981

0000bddc <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    bddc:	b580      	push	{r7, lr}
    bdde:	b082      	sub	sp, #8
    bde0:	af00      	add	r7, sp, #0
    bde2:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    bde4:	bf00      	nop
    bde6:	2103      	movs	r1, #3
    bde8:	6878      	ldr	r0, [r7, #4]
    bdea:	4b06      	ldr	r3, [pc, #24]	; (be04 <_spi_wait_bus_idle+0x28>)
    bdec:	4798      	blx	r3
    bdee:	4603      	mov	r3, r0
    bdf0:	2b00      	cmp	r3, #0
    bdf2:	d0f8      	beq.n	bde6 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    bdf4:	2103      	movs	r1, #3
    bdf6:	6878      	ldr	r0, [r7, #4]
    bdf8:	4b03      	ldr	r3, [pc, #12]	; (be08 <_spi_wait_bus_idle+0x2c>)
    bdfa:	4798      	blx	r3
}
    bdfc:	bf00      	nop
    bdfe:	3708      	adds	r7, #8
    be00:	46bd      	mov	sp, r7
    be02:	bd80      	pop	{r7, pc}
    be04:	0000a6dd 	.word	0x0000a6dd
    be08:	0000a71f 	.word	0x0000a71f

0000be0c <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    be0c:	b580      	push	{r7, lr}
    be0e:	b086      	sub	sp, #24
    be10:	af00      	add	r7, sp, #0
    be12:	60f8      	str	r0, [r7, #12]
    be14:	60b9      	str	r1, [r7, #8]
    be16:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    be18:	68bb      	ldr	r3, [r7, #8]
    be1a:	f003 0304 	and.w	r3, r3, #4
    be1e:	2b00      	cmp	r3, #0
    be20:	d101      	bne.n	be26 <_spi_rx_check_and_receive+0x1a>
		return false;
    be22:	2300      	movs	r3, #0
    be24:	e022      	b.n	be6c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    be26:	68f8      	ldr	r0, [r7, #12]
    be28:	4b12      	ldr	r3, [pc, #72]	; (be74 <_spi_rx_check_and_receive+0x68>)
    be2a:	4798      	blx	r3
    be2c:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    be2e:	687b      	ldr	r3, [r7, #4]
    be30:	685b      	ldr	r3, [r3, #4]
    be32:	2b00      	cmp	r3, #0
    be34:	d014      	beq.n	be60 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    be36:	687b      	ldr	r3, [r7, #4]
    be38:	685b      	ldr	r3, [r3, #4]
    be3a:	1c59      	adds	r1, r3, #1
    be3c:	687a      	ldr	r2, [r7, #4]
    be3e:	6051      	str	r1, [r2, #4]
    be40:	697a      	ldr	r2, [r7, #20]
    be42:	b2d2      	uxtb	r2, r2
    be44:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    be46:	687b      	ldr	r3, [r7, #4]
    be48:	7c1b      	ldrb	r3, [r3, #16]
    be4a:	2b01      	cmp	r3, #1
    be4c:	d908      	bls.n	be60 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    be4e:	687b      	ldr	r3, [r7, #4]
    be50:	685b      	ldr	r3, [r3, #4]
    be52:	1c59      	adds	r1, r3, #1
    be54:	687a      	ldr	r2, [r7, #4]
    be56:	6051      	str	r1, [r2, #4]
    be58:	697a      	ldr	r2, [r7, #20]
    be5a:	0a12      	lsrs	r2, r2, #8
    be5c:	b2d2      	uxtb	r2, r2
    be5e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    be60:	687b      	ldr	r3, [r7, #4]
    be62:	68db      	ldr	r3, [r3, #12]
    be64:	1c5a      	adds	r2, r3, #1
    be66:	687b      	ldr	r3, [r7, #4]
    be68:	60da      	str	r2, [r3, #12]

	return true;
    be6a:	2301      	movs	r3, #1
}
    be6c:	4618      	mov	r0, r3
    be6e:	3718      	adds	r7, #24
    be70:	46bd      	mov	sp, r7
    be72:	bd80      	pop	{r7, pc}
    be74:	0000abd9 	.word	0x0000abd9

0000be78 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    be78:	b580      	push	{r7, lr}
    be7a:	b086      	sub	sp, #24
    be7c:	af00      	add	r7, sp, #0
    be7e:	60f8      	str	r0, [r7, #12]
    be80:	60b9      	str	r1, [r7, #8]
    be82:	607a      	str	r2, [r7, #4]
    be84:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    be86:	68bb      	ldr	r3, [r7, #8]
    be88:	f003 0301 	and.w	r3, r3, #1
    be8c:	2b00      	cmp	r3, #0
    be8e:	d028      	beq.n	bee2 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    be90:	687b      	ldr	r3, [r7, #4]
    be92:	681b      	ldr	r3, [r3, #0]
    be94:	2b00      	cmp	r3, #0
    be96:	d018      	beq.n	beca <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    be98:	687b      	ldr	r3, [r7, #4]
    be9a:	681b      	ldr	r3, [r3, #0]
    be9c:	1c59      	adds	r1, r3, #1
    be9e:	687a      	ldr	r2, [r7, #4]
    bea0:	6011      	str	r1, [r2, #0]
    bea2:	781b      	ldrb	r3, [r3, #0]
    bea4:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    bea6:	687b      	ldr	r3, [r7, #4]
    bea8:	7c1b      	ldrb	r3, [r3, #16]
    beaa:	2b01      	cmp	r3, #1
    beac:	d90f      	bls.n	bece <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    beae:	687b      	ldr	r3, [r7, #4]
    beb0:	681b      	ldr	r3, [r3, #0]
    beb2:	781b      	ldrb	r3, [r3, #0]
    beb4:	021b      	lsls	r3, r3, #8
    beb6:	461a      	mov	r2, r3
    beb8:	697b      	ldr	r3, [r7, #20]
    beba:	4313      	orrs	r3, r2
    bebc:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    bebe:	687b      	ldr	r3, [r7, #4]
    bec0:	681b      	ldr	r3, [r3, #0]
    bec2:	1c5a      	adds	r2, r3, #1
    bec4:	687b      	ldr	r3, [r7, #4]
    bec6:	601a      	str	r2, [r3, #0]
    bec8:	e001      	b.n	bece <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    beca:	887b      	ldrh	r3, [r7, #2]
    becc:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    bece:	687b      	ldr	r3, [r7, #4]
    bed0:	689b      	ldr	r3, [r3, #8]
    bed2:	1c5a      	adds	r2, r3, #1
    bed4:	687b      	ldr	r3, [r7, #4]
    bed6:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    bed8:	6979      	ldr	r1, [r7, #20]
    beda:	68f8      	ldr	r0, [r7, #12]
    bedc:	4b03      	ldr	r3, [pc, #12]	; (beec <_spi_tx_check_and_send+0x74>)
    bede:	4798      	blx	r3
    bee0:	e000      	b.n	bee4 <_spi_tx_check_and_send+0x6c>
		return;
    bee2:	bf00      	nop
}
    bee4:	3718      	adds	r7, #24
    bee6:	46bd      	mov	sp, r7
    bee8:	bd80      	pop	{r7, pc}
    beea:	bf00      	nop
    beec:	0000abbd 	.word	0x0000abbd

0000bef0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    bef0:	b580      	push	{r7, lr}
    bef2:	b082      	sub	sp, #8
    bef4:	af00      	add	r7, sp, #0
    bef6:	6078      	str	r0, [r7, #4]
    bef8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    befa:	687b      	ldr	r3, [r7, #4]
    befc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bf00:	2b00      	cmp	r3, #0
    bf02:	d00b      	beq.n	bf1c <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    bf04:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bf08:	6838      	ldr	r0, [r7, #0]
    bf0a:	4b07      	ldr	r3, [pc, #28]	; (bf28 <_spi_err_check+0x38>)
    bf0c:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    bf0e:	2180      	movs	r1, #128	; 0x80
    bf10:	6838      	ldr	r0, [r7, #0]
    bf12:	4b06      	ldr	r3, [pc, #24]	; (bf2c <_spi_err_check+0x3c>)
    bf14:	4798      	blx	r3
		return ERR_OVERFLOW;
    bf16:	f06f 0312 	mvn.w	r3, #18
    bf1a:	e000      	b.n	bf1e <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    bf1c:	2300      	movs	r3, #0
}
    bf1e:	4618      	mov	r0, r3
    bf20:	3708      	adds	r7, #8
    bf22:	46bd      	mov	sp, r7
    bf24:	bd80      	pop	{r7, pc}
    bf26:	bf00      	nop
    bf28:	0000ac11 	.word	0x0000ac11
    bf2c:	0000a71f 	.word	0x0000a71f

0000bf30 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    bf30:	b590      	push	{r4, r7, lr}
    bf32:	b08b      	sub	sp, #44	; 0x2c
    bf34:	af00      	add	r7, sp, #0
    bf36:	6078      	str	r0, [r7, #4]
    bf38:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    bf3a:	687b      	ldr	r3, [r7, #4]
    bf3c:	681b      	ldr	r3, [r3, #0]
    bf3e:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    bf40:	2300      	movs	r3, #0
    bf42:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    bf44:	683b      	ldr	r3, [r7, #0]
    bf46:	681b      	ldr	r3, [r3, #0]
    bf48:	60bb      	str	r3, [r7, #8]
    bf4a:	683b      	ldr	r3, [r7, #0]
    bf4c:	685b      	ldr	r3, [r3, #4]
    bf4e:	60fb      	str	r3, [r7, #12]
    bf50:	2300      	movs	r3, #0
    bf52:	613b      	str	r3, [r7, #16]
    bf54:	2300      	movs	r3, #0
    bf56:	617b      	str	r3, [r7, #20]
    bf58:	687b      	ldr	r3, [r7, #4]
    bf5a:	791b      	ldrb	r3, [r3, #4]
    bf5c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    bf5e:	687b      	ldr	r3, [r7, #4]
    bf60:	2b00      	cmp	r3, #0
    bf62:	d004      	beq.n	bf6e <_spi_m_sync_trans+0x3e>
    bf64:	6a3b      	ldr	r3, [r7, #32]
    bf66:	2b00      	cmp	r3, #0
    bf68:	d001      	beq.n	bf6e <_spi_m_sync_trans+0x3e>
    bf6a:	2301      	movs	r3, #1
    bf6c:	e000      	b.n	bf70 <_spi_m_sync_trans+0x40>
    bf6e:	2300      	movs	r3, #0
    bf70:	f003 0301 	and.w	r3, r3, #1
    bf74:	b2db      	uxtb	r3, r3
    bf76:	f640 3213 	movw	r2, #2835	; 0xb13
    bf7a:	492b      	ldr	r1, [pc, #172]	; (c028 <_spi_m_sync_trans+0xf8>)
    bf7c:	4618      	mov	r0, r3
    bf7e:	4b2b      	ldr	r3, [pc, #172]	; (c02c <_spi_m_sync_trans+0xfc>)
    bf80:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    bf82:	2107      	movs	r1, #7
    bf84:	6a38      	ldr	r0, [r7, #32]
    bf86:	4b2a      	ldr	r3, [pc, #168]	; (c030 <_spi_m_sync_trans+0x100>)
    bf88:	4798      	blx	r3
    bf8a:	4603      	mov	r3, r0
    bf8c:	2b00      	cmp	r3, #0
    bf8e:	d002      	beq.n	bf96 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    bf90:	f06f 0303 	mvn.w	r3, #3
    bf94:	e043      	b.n	c01e <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    bf96:	6a38      	ldr	r0, [r7, #32]
    bf98:	4b26      	ldr	r3, [pc, #152]	; (c034 <_spi_m_sync_trans+0x104>)
    bf9a:	4798      	blx	r3
    bf9c:	4603      	mov	r3, r0
    bf9e:	f083 0301 	eor.w	r3, r3, #1
    bfa2:	b2db      	uxtb	r3, r3
    bfa4:	2b00      	cmp	r3, #0
    bfa6:	d002      	beq.n	bfae <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    bfa8:	f06f 0313 	mvn.w	r3, #19
    bfac:	e037      	b.n	c01e <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    bfae:	6a38      	ldr	r0, [r7, #32]
    bfb0:	4b21      	ldr	r3, [pc, #132]	; (c038 <_spi_m_sync_trans+0x108>)
    bfb2:	4798      	blx	r3
    bfb4:	4603      	mov	r3, r0
    bfb6:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    bfb8:	f107 0308 	add.w	r3, r7, #8
    bfbc:	461a      	mov	r2, r3
    bfbe:	69f9      	ldr	r1, [r7, #28]
    bfc0:	6a38      	ldr	r0, [r7, #32]
    bfc2:	4b1e      	ldr	r3, [pc, #120]	; (c03c <_spi_m_sync_trans+0x10c>)
    bfc4:	4798      	blx	r3
    bfc6:	4603      	mov	r3, r0
    bfc8:	f083 0301 	eor.w	r3, r3, #1
    bfcc:	b2db      	uxtb	r3, r3
    bfce:	2b00      	cmp	r3, #0
    bfd0:	d00b      	beq.n	bfea <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    bfd2:	697a      	ldr	r2, [r7, #20]
    bfd4:	693b      	ldr	r3, [r7, #16]
    bfd6:	429a      	cmp	r2, r3
    bfd8:	d307      	bcc.n	bfea <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    bfda:	687b      	ldr	r3, [r7, #4]
    bfdc:	88db      	ldrh	r3, [r3, #6]
    bfde:	f107 0208 	add.w	r2, r7, #8
    bfe2:	69f9      	ldr	r1, [r7, #28]
    bfe4:	6a38      	ldr	r0, [r7, #32]
    bfe6:	4c16      	ldr	r4, [pc, #88]	; (c040 <_spi_m_sync_trans+0x110>)
    bfe8:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    bfea:	6a39      	ldr	r1, [r7, #32]
    bfec:	69f8      	ldr	r0, [r7, #28]
    bfee:	4b15      	ldr	r3, [pc, #84]	; (c044 <_spi_m_sync_trans+0x114>)
    bff0:	4798      	blx	r3
    bff2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bff6:	2b00      	cmp	r3, #0
    bff8:	db0c      	blt.n	c014 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    bffa:	693a      	ldr	r2, [r7, #16]
    bffc:	683b      	ldr	r3, [r7, #0]
    bffe:	689b      	ldr	r3, [r3, #8]
    c000:	429a      	cmp	r2, r3
    c002:	d3d4      	bcc.n	bfae <_spi_m_sync_trans+0x7e>
    c004:	697a      	ldr	r2, [r7, #20]
    c006:	683b      	ldr	r3, [r7, #0]
    c008:	689b      	ldr	r3, [r3, #8]
    c00a:	429a      	cmp	r2, r3
    c00c:	d3cf      	bcc.n	bfae <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    c00e:	693b      	ldr	r3, [r7, #16]
    c010:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    c012:	e000      	b.n	c016 <_spi_m_sync_trans+0xe6>
			break;
    c014:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    c016:	6a38      	ldr	r0, [r7, #32]
    c018:	4b0b      	ldr	r3, [pc, #44]	; (c048 <_spi_m_sync_trans+0x118>)
    c01a:	4798      	blx	r3

	return rc;
    c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c01e:	4618      	mov	r0, r3
    c020:	372c      	adds	r7, #44	; 0x2c
    c022:	46bd      	mov	sp, r7
    c024:	bd90      	pop	{r4, r7, pc}
    c026:	bf00      	nop
    c028:	0001fb48 	.word	0x0001fb48
    c02c:	0000799d 	.word	0x0000799d
    c030:	0000a649 	.word	0x0000a649
    c034:	0000a8d1 	.word	0x0000a8d1
    c038:	0000a705 	.word	0x0000a705
    c03c:	0000be0d 	.word	0x0000be0d
    c040:	0000be79 	.word	0x0000be79
    c044:	0000bef1 	.word	0x0000bef1
    c048:	0000bddd 	.word	0x0000bddd

0000c04c <__NVIC_EnableIRQ>:
{
    c04c:	b480      	push	{r7}
    c04e:	b083      	sub	sp, #12
    c050:	af00      	add	r7, sp, #0
    c052:	4603      	mov	r3, r0
    c054:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c05a:	2b00      	cmp	r3, #0
    c05c:	db0b      	blt.n	c076 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c05e:	4909      	ldr	r1, [pc, #36]	; (c084 <__NVIC_EnableIRQ+0x38>)
    c060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c064:	095b      	lsrs	r3, r3, #5
    c066:	88fa      	ldrh	r2, [r7, #6]
    c068:	f002 021f 	and.w	r2, r2, #31
    c06c:	2001      	movs	r0, #1
    c06e:	fa00 f202 	lsl.w	r2, r0, r2
    c072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c076:	bf00      	nop
    c078:	370c      	adds	r7, #12
    c07a:	46bd      	mov	sp, r7
    c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c080:	4770      	bx	lr
    c082:	bf00      	nop
    c084:	e000e100 	.word	0xe000e100

0000c088 <__NVIC_DisableIRQ>:
{
    c088:	b480      	push	{r7}
    c08a:	b083      	sub	sp, #12
    c08c:	af00      	add	r7, sp, #0
    c08e:	4603      	mov	r3, r0
    c090:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c096:	2b00      	cmp	r3, #0
    c098:	db10      	blt.n	c0bc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c09a:	490b      	ldr	r1, [pc, #44]	; (c0c8 <__NVIC_DisableIRQ+0x40>)
    c09c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c0a0:	095b      	lsrs	r3, r3, #5
    c0a2:	88fa      	ldrh	r2, [r7, #6]
    c0a4:	f002 021f 	and.w	r2, r2, #31
    c0a8:	2001      	movs	r0, #1
    c0aa:	fa00 f202 	lsl.w	r2, r0, r2
    c0ae:	3320      	adds	r3, #32
    c0b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    c0b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c0b8:	f3bf 8f6f 	isb	sy
}
    c0bc:	bf00      	nop
    c0be:	370c      	adds	r7, #12
    c0c0:	46bd      	mov	sp, r7
    c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c0c6:	4770      	bx	lr
    c0c8:	e000e100 	.word	0xe000e100

0000c0cc <__NVIC_ClearPendingIRQ>:
{
    c0cc:	b480      	push	{r7}
    c0ce:	b083      	sub	sp, #12
    c0d0:	af00      	add	r7, sp, #0
    c0d2:	4603      	mov	r3, r0
    c0d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c0d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c0da:	2b00      	cmp	r3, #0
    c0dc:	db0c      	blt.n	c0f8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c0de:	4909      	ldr	r1, [pc, #36]	; (c104 <__NVIC_ClearPendingIRQ+0x38>)
    c0e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c0e4:	095b      	lsrs	r3, r3, #5
    c0e6:	88fa      	ldrh	r2, [r7, #6]
    c0e8:	f002 021f 	and.w	r2, r2, #31
    c0ec:	2001      	movs	r0, #1
    c0ee:	fa00 f202 	lsl.w	r2, r0, r2
    c0f2:	3360      	adds	r3, #96	; 0x60
    c0f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c0f8:	bf00      	nop
    c0fa:	370c      	adds	r7, #12
    c0fc:	46bd      	mov	sp, r7
    c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    c102:	4770      	bx	lr
    c104:	e000e100 	.word	0xe000e100

0000c108 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    c108:	b480      	push	{r7}
    c10a:	b083      	sub	sp, #12
    c10c:	af00      	add	r7, sp, #0
    c10e:	6078      	str	r0, [r7, #4]
    c110:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    c112:	bf00      	nop
    c114:	687b      	ldr	r3, [r7, #4]
    c116:	689a      	ldr	r2, [r3, #8]
    c118:	683b      	ldr	r3, [r7, #0]
    c11a:	4013      	ands	r3, r2
    c11c:	2b00      	cmp	r3, #0
    c11e:	d1f9      	bne.n	c114 <hri_tcc_wait_for_sync+0xc>
	};
}
    c120:	bf00      	nop
    c122:	370c      	adds	r7, #12
    c124:	46bd      	mov	sp, r7
    c126:	f85d 7b04 	ldr.w	r7, [sp], #4
    c12a:	4770      	bx	lr

0000c12c <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    c12c:	b480      	push	{r7}
    c12e:	b083      	sub	sp, #12
    c130:	af00      	add	r7, sp, #0
    c132:	6078      	str	r0, [r7, #4]
    c134:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    c136:	687b      	ldr	r3, [r7, #4]
    c138:	689a      	ldr	r2, [r3, #8]
    c13a:	683b      	ldr	r3, [r7, #0]
    c13c:	4013      	ands	r3, r2
    c13e:	2b00      	cmp	r3, #0
    c140:	bf14      	ite	ne
    c142:	2301      	movne	r3, #1
    c144:	2300      	moveq	r3, #0
    c146:	b2db      	uxtb	r3, r3
}
    c148:	4618      	mov	r0, r3
    c14a:	370c      	adds	r7, #12
    c14c:	46bd      	mov	sp, r7
    c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c152:	4770      	bx	lr

0000c154 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    c154:	b480      	push	{r7}
    c156:	b083      	sub	sp, #12
    c158:	af00      	add	r7, sp, #0
    c15a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    c15c:	687b      	ldr	r3, [r7, #4]
    c15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c160:	f003 0301 	and.w	r3, r3, #1
    c164:	2b00      	cmp	r3, #0
    c166:	bf14      	ite	ne
    c168:	2301      	movne	r3, #1
    c16a:	2300      	moveq	r3, #0
    c16c:	b2db      	uxtb	r3, r3
}
    c16e:	4618      	mov	r0, r3
    c170:	370c      	adds	r7, #12
    c172:	46bd      	mov	sp, r7
    c174:	f85d 7b04 	ldr.w	r7, [sp], #4
    c178:	4770      	bx	lr

0000c17a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    c17a:	b480      	push	{r7}
    c17c:	b083      	sub	sp, #12
    c17e:	af00      	add	r7, sp, #0
    c180:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    c182:	687b      	ldr	r3, [r7, #4]
    c184:	2201      	movs	r2, #1
    c186:	62da      	str	r2, [r3, #44]	; 0x2c
}
    c188:	bf00      	nop
    c18a:	370c      	adds	r7, #12
    c18c:	46bd      	mov	sp, r7
    c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c192:	4770      	bx	lr

0000c194 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    c194:	b480      	push	{r7}
    c196:	b083      	sub	sp, #12
    c198:	af00      	add	r7, sp, #0
    c19a:	6078      	str	r0, [r7, #4]
    c19c:	460b      	mov	r3, r1
    c19e:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    c1a0:	687b      	ldr	r3, [r7, #4]
    c1a2:	78fa      	ldrb	r2, [r7, #3]
    c1a4:	715a      	strb	r2, [r3, #5]
}
    c1a6:	bf00      	nop
    c1a8:	370c      	adds	r7, #12
    c1aa:	46bd      	mov	sp, r7
    c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1b0:	4770      	bx	lr

0000c1b2 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    c1b2:	b480      	push	{r7}
    c1b4:	b083      	sub	sp, #12
    c1b6:	af00      	add	r7, sp, #0
    c1b8:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    c1ba:	687b      	ldr	r3, [r7, #4]
    c1bc:	2201      	movs	r2, #1
    c1be:	629a      	str	r2, [r3, #40]	; 0x28
}
    c1c0:	bf00      	nop
    c1c2:	370c      	adds	r7, #12
    c1c4:	46bd      	mov	sp, r7
    c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1ca:	4770      	bx	lr

0000c1cc <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    c1cc:	b580      	push	{r7, lr}
    c1ce:	b082      	sub	sp, #8
    c1d0:	af00      	add	r7, sp, #0
    c1d2:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    c1d4:	687b      	ldr	r3, [r7, #4]
    c1d6:	681b      	ldr	r3, [r3, #0]
    c1d8:	f043 0201 	orr.w	r2, r3, #1
    c1dc:	687b      	ldr	r3, [r7, #4]
    c1de:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    c1e0:	2101      	movs	r1, #1
    c1e2:	6878      	ldr	r0, [r7, #4]
    c1e4:	4b02      	ldr	r3, [pc, #8]	; (c1f0 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    c1e6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c1e8:	bf00      	nop
    c1ea:	3708      	adds	r7, #8
    c1ec:	46bd      	mov	sp, r7
    c1ee:	bd80      	pop	{r7, pc}
    c1f0:	0000c109 	.word	0x0000c109

0000c1f4 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    c1f4:	b580      	push	{r7, lr}
    c1f6:	b082      	sub	sp, #8
    c1f8:	af00      	add	r7, sp, #0
    c1fa:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    c1fc:	687b      	ldr	r3, [r7, #4]
    c1fe:	681b      	ldr	r3, [r3, #0]
    c200:	f043 0202 	orr.w	r2, r3, #2
    c204:	687b      	ldr	r3, [r7, #4]
    c206:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c208:	2103      	movs	r1, #3
    c20a:	6878      	ldr	r0, [r7, #4]
    c20c:	4b02      	ldr	r3, [pc, #8]	; (c218 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    c20e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c210:	bf00      	nop
    c212:	3708      	adds	r7, #8
    c214:	46bd      	mov	sp, r7
    c216:	bd80      	pop	{r7, pc}
    c218:	0000c109 	.word	0x0000c109

0000c21c <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c21c:	b580      	push	{r7, lr}
    c21e:	b084      	sub	sp, #16
    c220:	af00      	add	r7, sp, #0
    c222:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c224:	2103      	movs	r1, #3
    c226:	6878      	ldr	r0, [r7, #4]
    c228:	4b09      	ldr	r3, [pc, #36]	; (c250 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    c22a:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    c22c:	687b      	ldr	r3, [r7, #4]
    c22e:	681b      	ldr	r3, [r3, #0]
    c230:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    c232:	68fb      	ldr	r3, [r7, #12]
    c234:	085b      	lsrs	r3, r3, #1
    c236:	f003 0301 	and.w	r3, r3, #1
    c23a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    c23c:	68fb      	ldr	r3, [r7, #12]
    c23e:	2b00      	cmp	r3, #0
    c240:	bf14      	ite	ne
    c242:	2301      	movne	r3, #1
    c244:	2300      	moveq	r3, #0
    c246:	b2db      	uxtb	r3, r3
}
    c248:	4618      	mov	r0, r3
    c24a:	3710      	adds	r7, #16
    c24c:	46bd      	mov	sp, r7
    c24e:	bd80      	pop	{r7, pc}
    c250:	0000c109 	.word	0x0000c109

0000c254 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c254:	b580      	push	{r7, lr}
    c256:	b082      	sub	sp, #8
    c258:	af00      	add	r7, sp, #0
    c25a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    c25c:	687b      	ldr	r3, [r7, #4]
    c25e:	681b      	ldr	r3, [r3, #0]
    c260:	f023 0202 	bic.w	r2, r3, #2
    c264:	687b      	ldr	r3, [r7, #4]
    c266:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c268:	2103      	movs	r1, #3
    c26a:	6878      	ldr	r0, [r7, #4]
    c26c:	4b02      	ldr	r3, [pc, #8]	; (c278 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    c26e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c270:	bf00      	nop
    c272:	3708      	adds	r7, #8
    c274:	46bd      	mov	sp, r7
    c276:	bd80      	pop	{r7, pc}
    c278:	0000c109 	.word	0x0000c109

0000c27c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    c27c:	b580      	push	{r7, lr}
    c27e:	b084      	sub	sp, #16
    c280:	af00      	add	r7, sp, #0
    c282:	6078      	str	r0, [r7, #4]
    c284:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c286:	2103      	movs	r1, #3
    c288:	6878      	ldr	r0, [r7, #4]
    c28a:	4b07      	ldr	r3, [pc, #28]	; (c2a8 <hri_tcc_get_CTRLA_reg+0x2c>)
    c28c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    c28e:	687b      	ldr	r3, [r7, #4]
    c290:	681b      	ldr	r3, [r3, #0]
    c292:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    c294:	68fa      	ldr	r2, [r7, #12]
    c296:	683b      	ldr	r3, [r7, #0]
    c298:	4013      	ands	r3, r2
    c29a:	60fb      	str	r3, [r7, #12]
	return tmp;
    c29c:	68fb      	ldr	r3, [r7, #12]
}
    c29e:	4618      	mov	r0, r3
    c2a0:	3710      	adds	r7, #16
    c2a2:	46bd      	mov	sp, r7
    c2a4:	bd80      	pop	{r7, pc}
    c2a6:	bf00      	nop
    c2a8:	0000c109 	.word	0x0000c109

0000c2ac <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    c2ac:	b580      	push	{r7, lr}
    c2ae:	b082      	sub	sp, #8
    c2b0:	af00      	add	r7, sp, #0
    c2b2:	6078      	str	r0, [r7, #4]
    c2b4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    c2b6:	687b      	ldr	r3, [r7, #4]
    c2b8:	683a      	ldr	r2, [r7, #0]
    c2ba:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    c2bc:	2103      	movs	r1, #3
    c2be:	6878      	ldr	r0, [r7, #4]
    c2c0:	4b02      	ldr	r3, [pc, #8]	; (c2cc <hri_tcc_write_CTRLA_reg+0x20>)
    c2c2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c2c4:	bf00      	nop
    c2c6:	3708      	adds	r7, #8
    c2c8:	46bd      	mov	sp, r7
    c2ca:	bd80      	pop	{r7, pc}
    c2cc:	0000c109 	.word	0x0000c109

0000c2d0 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    c2d0:	b480      	push	{r7}
    c2d2:	b083      	sub	sp, #12
    c2d4:	af00      	add	r7, sp, #0
    c2d6:	6078      	str	r0, [r7, #4]
    c2d8:	460b      	mov	r3, r1
    c2da:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    c2dc:	687b      	ldr	r3, [r7, #4]
    c2de:	78fa      	ldrb	r2, [r7, #3]
    c2e0:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    c2e2:	bf00      	nop
    c2e4:	370c      	adds	r7, #12
    c2e6:	46bd      	mov	sp, r7
    c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2ec:	4770      	bx	lr

0000c2ee <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    c2ee:	b480      	push	{r7}
    c2f0:	b083      	sub	sp, #12
    c2f2:	af00      	add	r7, sp, #0
    c2f4:	6078      	str	r0, [r7, #4]
    c2f6:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    c2f8:	687b      	ldr	r3, [r7, #4]
    c2fa:	683a      	ldr	r2, [r7, #0]
    c2fc:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    c2fe:	bf00      	nop
    c300:	370c      	adds	r7, #12
    c302:	46bd      	mov	sp, r7
    c304:	f85d 7b04 	ldr.w	r7, [sp], #4
    c308:	4770      	bx	lr
	...

0000c30c <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    c30c:	b580      	push	{r7, lr}
    c30e:	b082      	sub	sp, #8
    c310:	af00      	add	r7, sp, #0
    c312:	6078      	str	r0, [r7, #4]
    c314:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    c316:	687b      	ldr	r3, [r7, #4]
    c318:	683a      	ldr	r2, [r7, #0]
    c31a:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    c31c:	2180      	movs	r1, #128	; 0x80
    c31e:	6878      	ldr	r0, [r7, #4]
    c320:	4b02      	ldr	r3, [pc, #8]	; (c32c <hri_tcc_write_PER_reg+0x20>)
    c322:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    c324:	bf00      	nop
    c326:	3708      	adds	r7, #8
    c328:	46bd      	mov	sp, r7
    c32a:	bd80      	pop	{r7, pc}
    c32c:	0000c109 	.word	0x0000c109

0000c330 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    c330:	b580      	push	{r7, lr}
    c332:	b082      	sub	sp, #8
    c334:	af00      	add	r7, sp, #0
    c336:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    c338:	2180      	movs	r1, #128	; 0x80
    c33a:	6878      	ldr	r0, [r7, #4]
    c33c:	4b03      	ldr	r3, [pc, #12]	; (c34c <hri_tcc_read_PER_reg+0x1c>)
    c33e:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    c340:	687b      	ldr	r3, [r7, #4]
    c342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    c344:	4618      	mov	r0, r3
    c346:	3708      	adds	r7, #8
    c348:	46bd      	mov	sp, r7
    c34a:	bd80      	pop	{r7, pc}
    c34c:	0000c109 	.word	0x0000c109

0000c350 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    c350:	b480      	push	{r7}
    c352:	b083      	sub	sp, #12
    c354:	af00      	add	r7, sp, #0
    c356:	6078      	str	r0, [r7, #4]
    c358:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    c35a:	687b      	ldr	r3, [r7, #4]
    c35c:	4a09      	ldr	r2, [pc, #36]	; (c384 <_tcc_init_irq_param+0x34>)
    c35e:	4293      	cmp	r3, r2
    c360:	d102      	bne.n	c368 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    c362:	4a09      	ldr	r2, [pc, #36]	; (c388 <_tcc_init_irq_param+0x38>)
    c364:	683b      	ldr	r3, [r7, #0]
    c366:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    c368:	687b      	ldr	r3, [r7, #4]
    c36a:	4a08      	ldr	r2, [pc, #32]	; (c38c <_tcc_init_irq_param+0x3c>)
    c36c:	4293      	cmp	r3, r2
    c36e:	d102      	bne.n	c376 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    c370:	4a07      	ldr	r2, [pc, #28]	; (c390 <_tcc_init_irq_param+0x40>)
    c372:	683b      	ldr	r3, [r7, #0]
    c374:	6013      	str	r3, [r2, #0]
	}
}
    c376:	bf00      	nop
    c378:	370c      	adds	r7, #12
    c37a:	46bd      	mov	sp, r7
    c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c380:	4770      	bx	lr
    c382:	bf00      	nop
    c384:	41016000 	.word	0x41016000
    c388:	200088a4 	.word	0x200088a4
    c38c:	41018000 	.word	0x41018000
    c390:	200088a8 	.word	0x200088a8

0000c394 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    c394:	b580      	push	{r7, lr}
    c396:	b084      	sub	sp, #16
    c398:	af00      	add	r7, sp, #0
    c39a:	6078      	str	r0, [r7, #4]
    c39c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    c39e:	6838      	ldr	r0, [r7, #0]
    c3a0:	4b33      	ldr	r3, [pc, #204]	; (c470 <_tcc_timer_init+0xdc>)
    c3a2:	4798      	blx	r3
    c3a4:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    c3a6:	68fb      	ldr	r3, [r7, #12]
    c3a8:	2b00      	cmp	r3, #0
    c3aa:	d102      	bne.n	c3b2 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    c3ac:	f06f 0309 	mvn.w	r3, #9
    c3b0:	e05a      	b.n	c468 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    c3b2:	687b      	ldr	r3, [r7, #4]
    c3b4:	683a      	ldr	r2, [r7, #0]
    c3b6:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    c3b8:	2101      	movs	r1, #1
    c3ba:	6838      	ldr	r0, [r7, #0]
    c3bc:	4b2d      	ldr	r3, [pc, #180]	; (c474 <_tcc_timer_init+0xe0>)
    c3be:	4798      	blx	r3
    c3c0:	4603      	mov	r3, r0
    c3c2:	f083 0301 	eor.w	r3, r3, #1
    c3c6:	b2db      	uxtb	r3, r3
    c3c8:	2b00      	cmp	r3, #0
    c3ca:	d011      	beq.n	c3f0 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    c3cc:	2102      	movs	r1, #2
    c3ce:	6838      	ldr	r0, [r7, #0]
    c3d0:	4b29      	ldr	r3, [pc, #164]	; (c478 <_tcc_timer_init+0xe4>)
    c3d2:	4798      	blx	r3
    c3d4:	4603      	mov	r3, r0
    c3d6:	2b00      	cmp	r3, #0
    c3d8:	d006      	beq.n	c3e8 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    c3da:	6838      	ldr	r0, [r7, #0]
    c3dc:	4b27      	ldr	r3, [pc, #156]	; (c47c <_tcc_timer_init+0xe8>)
    c3de:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    c3e0:	2102      	movs	r1, #2
    c3e2:	6838      	ldr	r0, [r7, #0]
    c3e4:	4b26      	ldr	r3, [pc, #152]	; (c480 <_tcc_timer_init+0xec>)
    c3e6:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    c3e8:	2101      	movs	r1, #1
    c3ea:	6838      	ldr	r0, [r7, #0]
    c3ec:	4b25      	ldr	r3, [pc, #148]	; (c484 <_tcc_timer_init+0xf0>)
    c3ee:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    c3f0:	2101      	movs	r1, #1
    c3f2:	6838      	ldr	r0, [r7, #0]
    c3f4:	4b22      	ldr	r3, [pc, #136]	; (c480 <_tcc_timer_init+0xec>)
    c3f6:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    c3f8:	68fb      	ldr	r3, [r7, #12]
    c3fa:	689b      	ldr	r3, [r3, #8]
    c3fc:	4619      	mov	r1, r3
    c3fe:	6838      	ldr	r0, [r7, #0]
    c400:	4b20      	ldr	r3, [pc, #128]	; (c484 <_tcc_timer_init+0xf0>)
    c402:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    c404:	68fb      	ldr	r3, [r7, #12]
    c406:	7b1b      	ldrb	r3, [r3, #12]
    c408:	4619      	mov	r1, r3
    c40a:	6838      	ldr	r0, [r7, #0]
    c40c:	4b1e      	ldr	r3, [pc, #120]	; (c488 <_tcc_timer_init+0xf4>)
    c40e:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    c410:	68fb      	ldr	r3, [r7, #12]
    c412:	7b5b      	ldrb	r3, [r3, #13]
    c414:	4619      	mov	r1, r3
    c416:	6838      	ldr	r0, [r7, #0]
    c418:	4b1c      	ldr	r3, [pc, #112]	; (c48c <_tcc_timer_init+0xf8>)
    c41a:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    c41c:	68fb      	ldr	r3, [r7, #12]
    c41e:	691b      	ldr	r3, [r3, #16]
    c420:	4619      	mov	r1, r3
    c422:	6838      	ldr	r0, [r7, #0]
    c424:	4b1a      	ldr	r3, [pc, #104]	; (c490 <_tcc_timer_init+0xfc>)
    c426:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    c428:	68fb      	ldr	r3, [r7, #12]
    c42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c42c:	4619      	mov	r1, r3
    c42e:	6838      	ldr	r0, [r7, #0]
    c430:	4b18      	ldr	r3, [pc, #96]	; (c494 <_tcc_timer_init+0x100>)
    c432:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    c434:	6838      	ldr	r0, [r7, #0]
    c436:	4b18      	ldr	r3, [pc, #96]	; (c498 <_tcc_timer_init+0x104>)
    c438:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    c43a:	6879      	ldr	r1, [r7, #4]
    c43c:	6838      	ldr	r0, [r7, #0]
    c43e:	4b17      	ldr	r3, [pc, #92]	; (c49c <_tcc_timer_init+0x108>)
    c440:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    c442:	68fb      	ldr	r3, [r7, #12]
    c444:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c448:	4618      	mov	r0, r3
    c44a:	4b15      	ldr	r3, [pc, #84]	; (c4a0 <_tcc_timer_init+0x10c>)
    c44c:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    c44e:	68fb      	ldr	r3, [r7, #12]
    c450:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c454:	4618      	mov	r0, r3
    c456:	4b13      	ldr	r3, [pc, #76]	; (c4a4 <_tcc_timer_init+0x110>)
    c458:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    c45a:	68fb      	ldr	r3, [r7, #12]
    c45c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c460:	4618      	mov	r0, r3
    c462:	4b11      	ldr	r3, [pc, #68]	; (c4a8 <_tcc_timer_init+0x114>)
    c464:	4798      	blx	r3

	return ERR_NONE;
    c466:	2300      	movs	r3, #0
}
    c468:	4618      	mov	r0, r3
    c46a:	3710      	adds	r7, #16
    c46c:	46bd      	mov	sp, r7
    c46e:	bd80      	pop	{r7, pc}
    c470:	0000c65d 	.word	0x0000c65d
    c474:	0000c12d 	.word	0x0000c12d
    c478:	0000c27d 	.word	0x0000c27d
    c47c:	0000c255 	.word	0x0000c255
    c480:	0000c109 	.word	0x0000c109
    c484:	0000c2ad 	.word	0x0000c2ad
    c488:	0000c195 	.word	0x0000c195
    c48c:	0000c2d1 	.word	0x0000c2d1
    c490:	0000c2ef 	.word	0x0000c2ef
    c494:	0000c30d 	.word	0x0000c30d
    c498:	0000c1b3 	.word	0x0000c1b3
    c49c:	0000c351 	.word	0x0000c351
    c4a0:	0000c089 	.word	0x0000c089
    c4a4:	0000c0cd 	.word	0x0000c0cd
    c4a8:	0000c04d 	.word	0x0000c04d

0000c4ac <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    c4ac:	b580      	push	{r7, lr}
    c4ae:	b084      	sub	sp, #16
    c4b0:	af00      	add	r7, sp, #0
    c4b2:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    c4b4:	687b      	ldr	r3, [r7, #4]
    c4b6:	68db      	ldr	r3, [r3, #12]
    c4b8:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    c4ba:	68f8      	ldr	r0, [r7, #12]
    c4bc:	4b0a      	ldr	r3, [pc, #40]	; (c4e8 <_tcc_timer_deinit+0x3c>)
    c4be:	4798      	blx	r3
    c4c0:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    c4c2:	68bb      	ldr	r3, [r7, #8]
    c4c4:	2b00      	cmp	r3, #0
    c4c6:	d00b      	beq.n	c4e0 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    c4c8:	68bb      	ldr	r3, [r7, #8]
    c4ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c4ce:	4618      	mov	r0, r3
    c4d0:	4b06      	ldr	r3, [pc, #24]	; (c4ec <_tcc_timer_deinit+0x40>)
    c4d2:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    c4d4:	68f8      	ldr	r0, [r7, #12]
    c4d6:	4b06      	ldr	r3, [pc, #24]	; (c4f0 <_tcc_timer_deinit+0x44>)
    c4d8:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    c4da:	68f8      	ldr	r0, [r7, #12]
    c4dc:	4b05      	ldr	r3, [pc, #20]	; (c4f4 <_tcc_timer_deinit+0x48>)
    c4de:	4798      	blx	r3
	}
}
    c4e0:	bf00      	nop
    c4e2:	3710      	adds	r7, #16
    c4e4:	46bd      	mov	sp, r7
    c4e6:	bd80      	pop	{r7, pc}
    c4e8:	0000c65d 	.word	0x0000c65d
    c4ec:	0000c089 	.word	0x0000c089
    c4f0:	0000c255 	.word	0x0000c255
    c4f4:	0000c1cd 	.word	0x0000c1cd

0000c4f8 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    c4f8:	b580      	push	{r7, lr}
    c4fa:	b082      	sub	sp, #8
    c4fc:	af00      	add	r7, sp, #0
    c4fe:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    c500:	687b      	ldr	r3, [r7, #4]
    c502:	68db      	ldr	r3, [r3, #12]
    c504:	4618      	mov	r0, r3
    c506:	4b03      	ldr	r3, [pc, #12]	; (c514 <_tcc_timer_start+0x1c>)
    c508:	4798      	blx	r3
}
    c50a:	bf00      	nop
    c50c:	3708      	adds	r7, #8
    c50e:	46bd      	mov	sp, r7
    c510:	bd80      	pop	{r7, pc}
    c512:	bf00      	nop
    c514:	0000c1f5 	.word	0x0000c1f5

0000c518 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    c518:	b580      	push	{r7, lr}
    c51a:	b082      	sub	sp, #8
    c51c:	af00      	add	r7, sp, #0
    c51e:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    c520:	687b      	ldr	r3, [r7, #4]
    c522:	68db      	ldr	r3, [r3, #12]
    c524:	4618      	mov	r0, r3
    c526:	4b03      	ldr	r3, [pc, #12]	; (c534 <_tcc_timer_stop+0x1c>)
    c528:	4798      	blx	r3
}
    c52a:	bf00      	nop
    c52c:	3708      	adds	r7, #8
    c52e:	46bd      	mov	sp, r7
    c530:	bd80      	pop	{r7, pc}
    c532:	bf00      	nop
    c534:	0000c255 	.word	0x0000c255

0000c538 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    c538:	b580      	push	{r7, lr}
    c53a:	b082      	sub	sp, #8
    c53c:	af00      	add	r7, sp, #0
    c53e:	6078      	str	r0, [r7, #4]
    c540:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    c542:	687b      	ldr	r3, [r7, #4]
    c544:	68db      	ldr	r3, [r3, #12]
    c546:	6839      	ldr	r1, [r7, #0]
    c548:	4618      	mov	r0, r3
    c54a:	4b03      	ldr	r3, [pc, #12]	; (c558 <_tcc_timer_set_period+0x20>)
    c54c:	4798      	blx	r3
}
    c54e:	bf00      	nop
    c550:	3708      	adds	r7, #8
    c552:	46bd      	mov	sp, r7
    c554:	bd80      	pop	{r7, pc}
    c556:	bf00      	nop
    c558:	0000c30d 	.word	0x0000c30d

0000c55c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    c55c:	b580      	push	{r7, lr}
    c55e:	b082      	sub	sp, #8
    c560:	af00      	add	r7, sp, #0
    c562:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    c564:	687b      	ldr	r3, [r7, #4]
    c566:	68db      	ldr	r3, [r3, #12]
    c568:	4618      	mov	r0, r3
    c56a:	4b03      	ldr	r3, [pc, #12]	; (c578 <_tcc_timer_get_period+0x1c>)
    c56c:	4798      	blx	r3
    c56e:	4603      	mov	r3, r0
}
    c570:	4618      	mov	r0, r3
    c572:	3708      	adds	r7, #8
    c574:	46bd      	mov	sp, r7
    c576:	bd80      	pop	{r7, pc}
    c578:	0000c331 	.word	0x0000c331

0000c57c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    c57c:	b580      	push	{r7, lr}
    c57e:	b082      	sub	sp, #8
    c580:	af00      	add	r7, sp, #0
    c582:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    c584:	687b      	ldr	r3, [r7, #4]
    c586:	68db      	ldr	r3, [r3, #12]
    c588:	4618      	mov	r0, r3
    c58a:	4b03      	ldr	r3, [pc, #12]	; (c598 <_tcc_timer_is_started+0x1c>)
    c58c:	4798      	blx	r3
    c58e:	4603      	mov	r3, r0
}
    c590:	4618      	mov	r0, r3
    c592:	3708      	adds	r7, #8
    c594:	46bd      	mov	sp, r7
    c596:	bd80      	pop	{r7, pc}
    c598:	0000c21d 	.word	0x0000c21d

0000c59c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    c59c:	b480      	push	{r7}
    c59e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    c5a0:	4b02      	ldr	r3, [pc, #8]	; (c5ac <_tcc_get_timer+0x10>)
}
    c5a2:	4618      	mov	r0, r3
    c5a4:	46bd      	mov	sp, r7
    c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5aa:	4770      	bx	lr
    c5ac:	20000124 	.word	0x20000124

0000c5b0 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    c5b0:	b580      	push	{r7, lr}
    c5b2:	b084      	sub	sp, #16
    c5b4:	af00      	add	r7, sp, #0
    c5b6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    c5b8:	687b      	ldr	r3, [r7, #4]
    c5ba:	68db      	ldr	r3, [r3, #12]
    c5bc:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    c5be:	68f8      	ldr	r0, [r7, #12]
    c5c0:	4b08      	ldr	r3, [pc, #32]	; (c5e4 <_tcc_timer_set_irq+0x34>)
    c5c2:	4798      	blx	r3
    c5c4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    c5c6:	68bb      	ldr	r3, [r7, #8]
    c5c8:	2b00      	cmp	r3, #0
    c5ca:	d006      	beq.n	c5da <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    c5cc:	68bb      	ldr	r3, [r7, #8]
    c5ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    c5d2:	b2db      	uxtb	r3, r3
    c5d4:	4618      	mov	r0, r3
    c5d6:	4b04      	ldr	r3, [pc, #16]	; (c5e8 <_tcc_timer_set_irq+0x38>)
    c5d8:	4798      	blx	r3
	}
}
    c5da:	bf00      	nop
    c5dc:	3710      	adds	r7, #16
    c5de:	46bd      	mov	sp, r7
    c5e0:	bd80      	pop	{r7, pc}
    c5e2:	bf00      	nop
    c5e4:	0000c65d 	.word	0x0000c65d
    c5e8:	000081e9 	.word	0x000081e9

0000c5ec <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    c5ec:	b580      	push	{r7, lr}
    c5ee:	b084      	sub	sp, #16
    c5f0:	af00      	add	r7, sp, #0
    c5f2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    c5f4:	687b      	ldr	r3, [r7, #4]
    c5f6:	68db      	ldr	r3, [r3, #12]
    c5f8:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    c5fa:	68f8      	ldr	r0, [r7, #12]
    c5fc:	4b07      	ldr	r3, [pc, #28]	; (c61c <tcc_interrupt_handler+0x30>)
    c5fe:	4798      	blx	r3
    c600:	4603      	mov	r3, r0
    c602:	2b00      	cmp	r3, #0
    c604:	d006      	beq.n	c614 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    c606:	68f8      	ldr	r0, [r7, #12]
    c608:	4b05      	ldr	r3, [pc, #20]	; (c620 <tcc_interrupt_handler+0x34>)
    c60a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    c60c:	687b      	ldr	r3, [r7, #4]
    c60e:	681b      	ldr	r3, [r3, #0]
    c610:	6878      	ldr	r0, [r7, #4]
    c612:	4798      	blx	r3
	}
}
    c614:	bf00      	nop
    c616:	3710      	adds	r7, #16
    c618:	46bd      	mov	sp, r7
    c61a:	bd80      	pop	{r7, pc}
    c61c:	0000c155 	.word	0x0000c155
    c620:	0000c17b 	.word	0x0000c17b

0000c624 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    c624:	b580      	push	{r7, lr}
    c626:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    c628:	4b03      	ldr	r3, [pc, #12]	; (c638 <TCC0_0_Handler+0x14>)
    c62a:	681b      	ldr	r3, [r3, #0]
    c62c:	4618      	mov	r0, r3
    c62e:	4b03      	ldr	r3, [pc, #12]	; (c63c <TCC0_0_Handler+0x18>)
    c630:	4798      	blx	r3
}
    c632:	bf00      	nop
    c634:	bd80      	pop	{r7, pc}
    c636:	bf00      	nop
    c638:	200088a4 	.word	0x200088a4
    c63c:	0000c5ed 	.word	0x0000c5ed

0000c640 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    c640:	b580      	push	{r7, lr}
    c642:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    c644:	4b03      	ldr	r3, [pc, #12]	; (c654 <TCC1_0_Handler+0x14>)
    c646:	681b      	ldr	r3, [r3, #0]
    c648:	4618      	mov	r0, r3
    c64a:	4b03      	ldr	r3, [pc, #12]	; (c658 <TCC1_0_Handler+0x18>)
    c64c:	4798      	blx	r3
}
    c64e:	bf00      	nop
    c650:	bd80      	pop	{r7, pc}
    c652:	bf00      	nop
    c654:	200088a8 	.word	0x200088a8
    c658:	0000c5ed 	.word	0x0000c5ed

0000c65c <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    c65c:	b480      	push	{r7}
    c65e:	b085      	sub	sp, #20
    c660:	af00      	add	r7, sp, #0
    c662:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    c664:	2300      	movs	r3, #0
    c666:	73fb      	strb	r3, [r7, #15]
    c668:	e015      	b.n	c696 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    c66a:	7bfa      	ldrb	r2, [r7, #15]
    c66c:	490f      	ldr	r1, [pc, #60]	; (c6ac <_get_tcc_cfg+0x50>)
    c66e:	4613      	mov	r3, r2
    c670:	005b      	lsls	r3, r3, #1
    c672:	4413      	add	r3, r2
    c674:	011b      	lsls	r3, r3, #4
    c676:	440b      	add	r3, r1
    c678:	681a      	ldr	r2, [r3, #0]
    c67a:	687b      	ldr	r3, [r7, #4]
    c67c:	429a      	cmp	r2, r3
    c67e:	d107      	bne.n	c690 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    c680:	7bfa      	ldrb	r2, [r7, #15]
    c682:	4613      	mov	r3, r2
    c684:	005b      	lsls	r3, r3, #1
    c686:	4413      	add	r3, r2
    c688:	011b      	lsls	r3, r3, #4
    c68a:	4a08      	ldr	r2, [pc, #32]	; (c6ac <_get_tcc_cfg+0x50>)
    c68c:	4413      	add	r3, r2
    c68e:	e006      	b.n	c69e <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    c690:	7bfb      	ldrb	r3, [r7, #15]
    c692:	3301      	adds	r3, #1
    c694:	73fb      	strb	r3, [r7, #15]
    c696:	7bfb      	ldrb	r3, [r7, #15]
    c698:	2b01      	cmp	r3, #1
    c69a:	d9e6      	bls.n	c66a <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    c69c:	2300      	movs	r3, #0
}
    c69e:	4618      	mov	r0, r3
    c6a0:	3714      	adds	r7, #20
    c6a2:	46bd      	mov	sp, r7
    c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6a8:	4770      	bx	lr
    c6aa:	bf00      	nop
    c6ac:	200000c4 	.word	0x200000c4

0000c6b0 <__NVIC_EnableIRQ>:
{
    c6b0:	b480      	push	{r7}
    c6b2:	b083      	sub	sp, #12
    c6b4:	af00      	add	r7, sp, #0
    c6b6:	4603      	mov	r3, r0
    c6b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c6ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c6be:	2b00      	cmp	r3, #0
    c6c0:	db0b      	blt.n	c6da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c6c2:	4909      	ldr	r1, [pc, #36]	; (c6e8 <__NVIC_EnableIRQ+0x38>)
    c6c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c6c8:	095b      	lsrs	r3, r3, #5
    c6ca:	88fa      	ldrh	r2, [r7, #6]
    c6cc:	f002 021f 	and.w	r2, r2, #31
    c6d0:	2001      	movs	r0, #1
    c6d2:	fa00 f202 	lsl.w	r2, r0, r2
    c6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c6da:	bf00      	nop
    c6dc:	370c      	adds	r7, #12
    c6de:	46bd      	mov	sp, r7
    c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6e4:	4770      	bx	lr
    c6e6:	bf00      	nop
    c6e8:	e000e100 	.word	0xe000e100

0000c6ec <__NVIC_DisableIRQ>:
{
    c6ec:	b480      	push	{r7}
    c6ee:	b083      	sub	sp, #12
    c6f0:	af00      	add	r7, sp, #0
    c6f2:	4603      	mov	r3, r0
    c6f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c6f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c6fa:	2b00      	cmp	r3, #0
    c6fc:	db10      	blt.n	c720 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c6fe:	490b      	ldr	r1, [pc, #44]	; (c72c <__NVIC_DisableIRQ+0x40>)
    c700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c704:	095b      	lsrs	r3, r3, #5
    c706:	88fa      	ldrh	r2, [r7, #6]
    c708:	f002 021f 	and.w	r2, r2, #31
    c70c:	2001      	movs	r0, #1
    c70e:	fa00 f202 	lsl.w	r2, r0, r2
    c712:	3320      	adds	r3, #32
    c714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    c718:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c71c:	f3bf 8f6f 	isb	sy
}
    c720:	bf00      	nop
    c722:	370c      	adds	r7, #12
    c724:	46bd      	mov	sp, r7
    c726:	f85d 7b04 	ldr.w	r7, [sp], #4
    c72a:	4770      	bx	lr
    c72c:	e000e100 	.word	0xe000e100

0000c730 <__NVIC_ClearPendingIRQ>:
{
    c730:	b480      	push	{r7}
    c732:	b083      	sub	sp, #12
    c734:	af00      	add	r7, sp, #0
    c736:	4603      	mov	r3, r0
    c738:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    c73a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c73e:	2b00      	cmp	r3, #0
    c740:	db0c      	blt.n	c75c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c742:	4909      	ldr	r1, [pc, #36]	; (c768 <__NVIC_ClearPendingIRQ+0x38>)
    c744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    c748:	095b      	lsrs	r3, r3, #5
    c74a:	88fa      	ldrh	r2, [r7, #6]
    c74c:	f002 021f 	and.w	r2, r2, #31
    c750:	2001      	movs	r0, #1
    c752:	fa00 f202 	lsl.w	r2, r0, r2
    c756:	3360      	adds	r3, #96	; 0x60
    c758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c75c:	bf00      	nop
    c75e:	370c      	adds	r7, #12
    c760:	46bd      	mov	sp, r7
    c762:	f85d 7b04 	ldr.w	r7, [sp], #4
    c766:	4770      	bx	lr
    c768:	e000e100 	.word	0xe000e100

0000c76c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    c76c:	b480      	push	{r7}
    c76e:	b083      	sub	sp, #12
    c770:	af00      	add	r7, sp, #0
    c772:	6078      	str	r0, [r7, #4]
    c774:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    c776:	bf00      	nop
    c778:	687b      	ldr	r3, [r7, #4]
    c77a:	691a      	ldr	r2, [r3, #16]
    c77c:	683b      	ldr	r3, [r7, #0]
    c77e:	4013      	ands	r3, r2
    c780:	2b00      	cmp	r3, #0
    c782:	d1f9      	bne.n	c778 <hri_tc_wait_for_sync+0xc>
	};
}
    c784:	bf00      	nop
    c786:	370c      	adds	r7, #12
    c788:	46bd      	mov	sp, r7
    c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c78e:	4770      	bx	lr

0000c790 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    c790:	b480      	push	{r7}
    c792:	b083      	sub	sp, #12
    c794:	af00      	add	r7, sp, #0
    c796:	6078      	str	r0, [r7, #4]
    c798:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    c79a:	687b      	ldr	r3, [r7, #4]
    c79c:	691a      	ldr	r2, [r3, #16]
    c79e:	683b      	ldr	r3, [r7, #0]
    c7a0:	4013      	ands	r3, r2
    c7a2:	2b00      	cmp	r3, #0
    c7a4:	bf14      	ite	ne
    c7a6:	2301      	movne	r3, #1
    c7a8:	2300      	moveq	r3, #0
    c7aa:	b2db      	uxtb	r3, r3
}
    c7ac:	4618      	mov	r0, r3
    c7ae:	370c      	adds	r7, #12
    c7b0:	46bd      	mov	sp, r7
    c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7b6:	4770      	bx	lr

0000c7b8 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    c7b8:	b480      	push	{r7}
    c7ba:	b083      	sub	sp, #12
    c7bc:	af00      	add	r7, sp, #0
    c7be:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    c7c0:	687b      	ldr	r3, [r7, #4]
    c7c2:	7a9b      	ldrb	r3, [r3, #10]
    c7c4:	b2db      	uxtb	r3, r3
    c7c6:	f003 0301 	and.w	r3, r3, #1
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	bf14      	ite	ne
    c7ce:	2301      	movne	r3, #1
    c7d0:	2300      	moveq	r3, #0
    c7d2:	b2db      	uxtb	r3, r3
}
    c7d4:	4618      	mov	r0, r3
    c7d6:	370c      	adds	r7, #12
    c7d8:	46bd      	mov	sp, r7
    c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7de:	4770      	bx	lr

0000c7e0 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    c7e0:	b480      	push	{r7}
    c7e2:	b083      	sub	sp, #12
    c7e4:	af00      	add	r7, sp, #0
    c7e6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    c7e8:	687b      	ldr	r3, [r7, #4]
    c7ea:	2201      	movs	r2, #1
    c7ec:	729a      	strb	r2, [r3, #10]
}
    c7ee:	bf00      	nop
    c7f0:	370c      	adds	r7, #12
    c7f2:	46bd      	mov	sp, r7
    c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7f8:	4770      	bx	lr

0000c7fa <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    c7fa:	b480      	push	{r7}
    c7fc:	b083      	sub	sp, #12
    c7fe:	af00      	add	r7, sp, #0
    c800:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    c802:	687b      	ldr	r3, [r7, #4]
    c804:	2202      	movs	r2, #2
    c806:	729a      	strb	r2, [r3, #10]
}
    c808:	bf00      	nop
    c80a:	370c      	adds	r7, #12
    c80c:	46bd      	mov	sp, r7
    c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c812:	4770      	bx	lr

0000c814 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    c814:	b480      	push	{r7}
    c816:	b083      	sub	sp, #12
    c818:	af00      	add	r7, sp, #0
    c81a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    c81c:	687b      	ldr	r3, [r7, #4]
    c81e:	2201      	movs	r2, #1
    c820:	725a      	strb	r2, [r3, #9]
}
    c822:	bf00      	nop
    c824:	370c      	adds	r7, #12
    c826:	46bd      	mov	sp, r7
    c828:	f85d 7b04 	ldr.w	r7, [sp], #4
    c82c:	4770      	bx	lr

0000c82e <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    c82e:	b480      	push	{r7}
    c830:	b083      	sub	sp, #12
    c832:	af00      	add	r7, sp, #0
    c834:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    c836:	687b      	ldr	r3, [r7, #4]
    c838:	7a5b      	ldrb	r3, [r3, #9]
    c83a:	b2db      	uxtb	r3, r3
    c83c:	085b      	lsrs	r3, r3, #1
    c83e:	f003 0301 	and.w	r3, r3, #1
    c842:	2b00      	cmp	r3, #0
    c844:	bf14      	ite	ne
    c846:	2301      	movne	r3, #1
    c848:	2300      	moveq	r3, #0
    c84a:	b2db      	uxtb	r3, r3
}
    c84c:	4618      	mov	r0, r3
    c84e:	370c      	adds	r7, #12
    c850:	46bd      	mov	sp, r7
    c852:	f85d 7b04 	ldr.w	r7, [sp], #4
    c856:	4770      	bx	lr

0000c858 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    c858:	b580      	push	{r7, lr}
    c85a:	b082      	sub	sp, #8
    c85c:	af00      	add	r7, sp, #0
    c85e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    c860:	687b      	ldr	r3, [r7, #4]
    c862:	681b      	ldr	r3, [r3, #0]
    c864:	f043 0201 	orr.w	r2, r3, #1
    c868:	687b      	ldr	r3, [r7, #4]
    c86a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    c86c:	2101      	movs	r1, #1
    c86e:	6878      	ldr	r0, [r7, #4]
    c870:	4b02      	ldr	r3, [pc, #8]	; (c87c <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    c872:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c874:	bf00      	nop
    c876:	3708      	adds	r7, #8
    c878:	46bd      	mov	sp, r7
    c87a:	bd80      	pop	{r7, pc}
    c87c:	0000c76d 	.word	0x0000c76d

0000c880 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    c880:	b580      	push	{r7, lr}
    c882:	b082      	sub	sp, #8
    c884:	af00      	add	r7, sp, #0
    c886:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    c888:	687b      	ldr	r3, [r7, #4]
    c88a:	681b      	ldr	r3, [r3, #0]
    c88c:	f043 0202 	orr.w	r2, r3, #2
    c890:	687b      	ldr	r3, [r7, #4]
    c892:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    c894:	2103      	movs	r1, #3
    c896:	6878      	ldr	r0, [r7, #4]
    c898:	4b02      	ldr	r3, [pc, #8]	; (c8a4 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    c89a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c89c:	bf00      	nop
    c89e:	3708      	adds	r7, #8
    c8a0:	46bd      	mov	sp, r7
    c8a2:	bd80      	pop	{r7, pc}
    c8a4:	0000c76d 	.word	0x0000c76d

0000c8a8 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c8a8:	b580      	push	{r7, lr}
    c8aa:	b084      	sub	sp, #16
    c8ac:	af00      	add	r7, sp, #0
    c8ae:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    c8b0:	2103      	movs	r1, #3
    c8b2:	6878      	ldr	r0, [r7, #4]
    c8b4:	4b09      	ldr	r3, [pc, #36]	; (c8dc <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    c8b6:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    c8b8:	687b      	ldr	r3, [r7, #4]
    c8ba:	681b      	ldr	r3, [r3, #0]
    c8bc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    c8be:	68fb      	ldr	r3, [r7, #12]
    c8c0:	085b      	lsrs	r3, r3, #1
    c8c2:	f003 0301 	and.w	r3, r3, #1
    c8c6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    c8c8:	68fb      	ldr	r3, [r7, #12]
    c8ca:	2b00      	cmp	r3, #0
    c8cc:	bf14      	ite	ne
    c8ce:	2301      	movne	r3, #1
    c8d0:	2300      	moveq	r3, #0
    c8d2:	b2db      	uxtb	r3, r3
}
    c8d4:	4618      	mov	r0, r3
    c8d6:	3710      	adds	r7, #16
    c8d8:	46bd      	mov	sp, r7
    c8da:	bd80      	pop	{r7, pc}
    c8dc:	0000c76d 	.word	0x0000c76d

0000c8e0 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    c8e0:	b580      	push	{r7, lr}
    c8e2:	b082      	sub	sp, #8
    c8e4:	af00      	add	r7, sp, #0
    c8e6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    c8e8:	687b      	ldr	r3, [r7, #4]
    c8ea:	681b      	ldr	r3, [r3, #0]
    c8ec:	f023 0202 	bic.w	r2, r3, #2
    c8f0:	687b      	ldr	r3, [r7, #4]
    c8f2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    c8f4:	2103      	movs	r1, #3
    c8f6:	6878      	ldr	r0, [r7, #4]
    c8f8:	4b02      	ldr	r3, [pc, #8]	; (c904 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    c8fa:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c8fc:	bf00      	nop
    c8fe:	3708      	adds	r7, #8
    c900:	46bd      	mov	sp, r7
    c902:	bd80      	pop	{r7, pc}
    c904:	0000c76d 	.word	0x0000c76d

0000c908 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    c908:	b480      	push	{r7}
    c90a:	b085      	sub	sp, #20
    c90c:	af00      	add	r7, sp, #0
    c90e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    c910:	687b      	ldr	r3, [r7, #4]
    c912:	681b      	ldr	r3, [r3, #0]
    c914:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    c916:	68fb      	ldr	r3, [r7, #12]
    c918:	089b      	lsrs	r3, r3, #2
    c91a:	f003 0303 	and.w	r3, r3, #3
    c91e:	60fb      	str	r3, [r7, #12]
	return tmp;
    c920:	68fb      	ldr	r3, [r7, #12]
}
    c922:	4618      	mov	r0, r3
    c924:	3714      	adds	r7, #20
    c926:	46bd      	mov	sp, r7
    c928:	f85d 7b04 	ldr.w	r7, [sp], #4
    c92c:	4770      	bx	lr
	...

0000c930 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    c930:	b580      	push	{r7, lr}
    c932:	b084      	sub	sp, #16
    c934:	af00      	add	r7, sp, #0
    c936:	6078      	str	r0, [r7, #4]
    c938:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    c93a:	2103      	movs	r1, #3
    c93c:	6878      	ldr	r0, [r7, #4]
    c93e:	4b07      	ldr	r3, [pc, #28]	; (c95c <hri_tc_get_CTRLA_reg+0x2c>)
    c940:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    c942:	687b      	ldr	r3, [r7, #4]
    c944:	681b      	ldr	r3, [r3, #0]
    c946:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    c948:	68fa      	ldr	r2, [r7, #12]
    c94a:	683b      	ldr	r3, [r7, #0]
    c94c:	4013      	ands	r3, r2
    c94e:	60fb      	str	r3, [r7, #12]
	return tmp;
    c950:	68fb      	ldr	r3, [r7, #12]
}
    c952:	4618      	mov	r0, r3
    c954:	3710      	adds	r7, #16
    c956:	46bd      	mov	sp, r7
    c958:	bd80      	pop	{r7, pc}
    c95a:	bf00      	nop
    c95c:	0000c76d 	.word	0x0000c76d

0000c960 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    c960:	b580      	push	{r7, lr}
    c962:	b082      	sub	sp, #8
    c964:	af00      	add	r7, sp, #0
    c966:	6078      	str	r0, [r7, #4]
    c968:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    c96a:	687b      	ldr	r3, [r7, #4]
    c96c:	683a      	ldr	r2, [r7, #0]
    c96e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    c970:	2103      	movs	r1, #3
    c972:	6878      	ldr	r0, [r7, #4]
    c974:	4b02      	ldr	r3, [pc, #8]	; (c980 <hri_tc_write_CTRLA_reg+0x20>)
    c976:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c978:	bf00      	nop
    c97a:	3708      	adds	r7, #8
    c97c:	46bd      	mov	sp, r7
    c97e:	bd80      	pop	{r7, pc}
    c980:	0000c76d 	.word	0x0000c76d

0000c984 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    c984:	b480      	push	{r7}
    c986:	b083      	sub	sp, #12
    c988:	af00      	add	r7, sp, #0
    c98a:	6078      	str	r0, [r7, #4]
    c98c:	460b      	mov	r3, r1
    c98e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    c990:	687b      	ldr	r3, [r7, #4]
    c992:	887a      	ldrh	r2, [r7, #2]
    c994:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    c996:	bf00      	nop
    c998:	370c      	adds	r7, #12
    c99a:	46bd      	mov	sp, r7
    c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9a0:	4770      	bx	lr

0000c9a2 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    c9a2:	b480      	push	{r7}
    c9a4:	b083      	sub	sp, #12
    c9a6:	af00      	add	r7, sp, #0
    c9a8:	6078      	str	r0, [r7, #4]
    c9aa:	460b      	mov	r3, r1
    c9ac:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    c9ae:	687b      	ldr	r3, [r7, #4]
    c9b0:	78fa      	ldrb	r2, [r7, #3]
    c9b2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    c9b4:	bf00      	nop
    c9b6:	370c      	adds	r7, #12
    c9b8:	46bd      	mov	sp, r7
    c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9be:	4770      	bx	lr

0000c9c0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    c9c0:	b480      	push	{r7}
    c9c2:	b083      	sub	sp, #12
    c9c4:	af00      	add	r7, sp, #0
    c9c6:	6078      	str	r0, [r7, #4]
    c9c8:	460b      	mov	r3, r1
    c9ca:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    c9cc:	687b      	ldr	r3, [r7, #4]
    c9ce:	78fa      	ldrb	r2, [r7, #3]
    c9d0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    c9d2:	bf00      	nop
    c9d4:	370c      	adds	r7, #12
    c9d6:	46bd      	mov	sp, r7
    c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9dc:	4770      	bx	lr
	...

0000c9e0 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    c9e0:	b580      	push	{r7, lr}
    c9e2:	b082      	sub	sp, #8
    c9e4:	af00      	add	r7, sp, #0
    c9e6:	6078      	str	r0, [r7, #4]
    c9e8:	460b      	mov	r3, r1
    c9ea:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    c9ec:	687b      	ldr	r3, [r7, #4]
    c9ee:	78fa      	ldrb	r2, [r7, #3]
    c9f0:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    c9f2:	2120      	movs	r1, #32
    c9f4:	6878      	ldr	r0, [r7, #4]
    c9f6:	4b03      	ldr	r3, [pc, #12]	; (ca04 <hri_tccount8_write_PER_reg+0x24>)
    c9f8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    c9fa:	bf00      	nop
    c9fc:	3708      	adds	r7, #8
    c9fe:	46bd      	mov	sp, r7
    ca00:	bd80      	pop	{r7, pc}
    ca02:	bf00      	nop
    ca04:	0000c76d 	.word	0x0000c76d

0000ca08 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    ca08:	b580      	push	{r7, lr}
    ca0a:	b082      	sub	sp, #8
    ca0c:	af00      	add	r7, sp, #0
    ca0e:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    ca10:	2120      	movs	r1, #32
    ca12:	6878      	ldr	r0, [r7, #4]
    ca14:	4b04      	ldr	r3, [pc, #16]	; (ca28 <hri_tccount8_read_PER_reg+0x20>)
    ca16:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    ca18:	687b      	ldr	r3, [r7, #4]
    ca1a:	7edb      	ldrb	r3, [r3, #27]
    ca1c:	b2db      	uxtb	r3, r3
}
    ca1e:	4618      	mov	r0, r3
    ca20:	3708      	adds	r7, #8
    ca22:	46bd      	mov	sp, r7
    ca24:	bd80      	pop	{r7, pc}
    ca26:	bf00      	nop
    ca28:	0000c76d 	.word	0x0000c76d

0000ca2c <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    ca2c:	b580      	push	{r7, lr}
    ca2e:	b082      	sub	sp, #8
    ca30:	af00      	add	r7, sp, #0
    ca32:	6078      	str	r0, [r7, #4]
    ca34:	460b      	mov	r3, r1
    ca36:	70fb      	strb	r3, [r7, #3]
    ca38:	4613      	mov	r3, r2
    ca3a:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    ca3c:	78fb      	ldrb	r3, [r7, #3]
    ca3e:	687a      	ldr	r2, [r7, #4]
    ca40:	4413      	add	r3, r2
    ca42:	78ba      	ldrb	r2, [r7, #2]
    ca44:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ca46:	21c0      	movs	r1, #192	; 0xc0
    ca48:	6878      	ldr	r0, [r7, #4]
    ca4a:	4b03      	ldr	r3, [pc, #12]	; (ca58 <hri_tccount8_write_CC_reg+0x2c>)
    ca4c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ca4e:	bf00      	nop
    ca50:	3708      	adds	r7, #8
    ca52:	46bd      	mov	sp, r7
    ca54:	bd80      	pop	{r7, pc}
    ca56:	bf00      	nop
    ca58:	0000c76d 	.word	0x0000c76d

0000ca5c <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    ca5c:	b580      	push	{r7, lr}
    ca5e:	b082      	sub	sp, #8
    ca60:	af00      	add	r7, sp, #0
    ca62:	6078      	str	r0, [r7, #4]
    ca64:	460b      	mov	r3, r1
    ca66:	70fb      	strb	r3, [r7, #3]
    ca68:	4613      	mov	r3, r2
    ca6a:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    ca6c:	78fb      	ldrb	r3, [r7, #3]
    ca6e:	687a      	ldr	r2, [r7, #4]
    ca70:	330c      	adds	r3, #12
    ca72:	005b      	lsls	r3, r3, #1
    ca74:	4413      	add	r3, r2
    ca76:	883a      	ldrh	r2, [r7, #0]
    ca78:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ca7a:	21c0      	movs	r1, #192	; 0xc0
    ca7c:	6878      	ldr	r0, [r7, #4]
    ca7e:	4b03      	ldr	r3, [pc, #12]	; (ca8c <hri_tccount16_write_CC_reg+0x30>)
    ca80:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    ca82:	bf00      	nop
    ca84:	3708      	adds	r7, #8
    ca86:	46bd      	mov	sp, r7
    ca88:	bd80      	pop	{r7, pc}
    ca8a:	bf00      	nop
    ca8c:	0000c76d 	.word	0x0000c76d

0000ca90 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    ca90:	b580      	push	{r7, lr}
    ca92:	b082      	sub	sp, #8
    ca94:	af00      	add	r7, sp, #0
    ca96:	6078      	str	r0, [r7, #4]
    ca98:	460b      	mov	r3, r1
    ca9a:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    ca9c:	21c0      	movs	r1, #192	; 0xc0
    ca9e:	6878      	ldr	r0, [r7, #4]
    caa0:	4b06      	ldr	r3, [pc, #24]	; (cabc <hri_tccount16_read_CC_reg+0x2c>)
    caa2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    caa4:	78fb      	ldrb	r3, [r7, #3]
    caa6:	687a      	ldr	r2, [r7, #4]
    caa8:	330c      	adds	r3, #12
    caaa:	005b      	lsls	r3, r3, #1
    caac:	4413      	add	r3, r2
    caae:	889b      	ldrh	r3, [r3, #4]
    cab0:	b29b      	uxth	r3, r3
}
    cab2:	4618      	mov	r0, r3
    cab4:	3708      	adds	r7, #8
    cab6:	46bd      	mov	sp, r7
    cab8:	bd80      	pop	{r7, pc}
    caba:	bf00      	nop
    cabc:	0000c76d 	.word	0x0000c76d

0000cac0 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    cac0:	b580      	push	{r7, lr}
    cac2:	b084      	sub	sp, #16
    cac4:	af00      	add	r7, sp, #0
    cac6:	60f8      	str	r0, [r7, #12]
    cac8:	460b      	mov	r3, r1
    caca:	607a      	str	r2, [r7, #4]
    cacc:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    cace:	7afb      	ldrb	r3, [r7, #11]
    cad0:	68fa      	ldr	r2, [r7, #12]
    cad2:	3306      	adds	r3, #6
    cad4:	009b      	lsls	r3, r3, #2
    cad6:	4413      	add	r3, r2
    cad8:	687a      	ldr	r2, [r7, #4]
    cada:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    cadc:	21c0      	movs	r1, #192	; 0xc0
    cade:	68f8      	ldr	r0, [r7, #12]
    cae0:	4b02      	ldr	r3, [pc, #8]	; (caec <hri_tccount32_write_CC_reg+0x2c>)
    cae2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    cae4:	bf00      	nop
    cae6:	3710      	adds	r7, #16
    cae8:	46bd      	mov	sp, r7
    caea:	bd80      	pop	{r7, pc}
    caec:	0000c76d 	.word	0x0000c76d

0000caf0 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    caf0:	b580      	push	{r7, lr}
    caf2:	b082      	sub	sp, #8
    caf4:	af00      	add	r7, sp, #0
    caf6:	6078      	str	r0, [r7, #4]
    caf8:	460b      	mov	r3, r1
    cafa:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    cafc:	21c0      	movs	r1, #192	; 0xc0
    cafe:	6878      	ldr	r0, [r7, #4]
    cb00:	4b05      	ldr	r3, [pc, #20]	; (cb18 <hri_tccount32_read_CC_reg+0x28>)
    cb02:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    cb04:	78fb      	ldrb	r3, [r7, #3]
    cb06:	687a      	ldr	r2, [r7, #4]
    cb08:	3306      	adds	r3, #6
    cb0a:	009b      	lsls	r3, r3, #2
    cb0c:	4413      	add	r3, r2
    cb0e:	685b      	ldr	r3, [r3, #4]
}
    cb10:	4618      	mov	r0, r3
    cb12:	3708      	adds	r7, #8
    cb14:	46bd      	mov	sp, r7
    cb16:	bd80      	pop	{r7, pc}
    cb18:	0000c76d 	.word	0x0000c76d

0000cb1c <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    cb1c:	b580      	push	{r7, lr}
    cb1e:	b084      	sub	sp, #16
    cb20:	af00      	add	r7, sp, #0
    cb22:	6078      	str	r0, [r7, #4]
    cb24:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    cb26:	6838      	ldr	r0, [r7, #0]
    cb28:	4b93      	ldr	r3, [pc, #588]	; (cd78 <_tc_timer_init+0x25c>)
    cb2a:	4798      	blx	r3
    cb2c:	4603      	mov	r3, r0
    cb2e:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    cb30:	687b      	ldr	r3, [r7, #4]
    cb32:	683a      	ldr	r2, [r7, #0]
    cb34:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    cb36:	22a4      	movs	r2, #164	; 0xa4
    cb38:	4990      	ldr	r1, [pc, #576]	; (cd7c <_tc_timer_init+0x260>)
    cb3a:	2001      	movs	r0, #1
    cb3c:	4b90      	ldr	r3, [pc, #576]	; (cd80 <_tc_timer_init+0x264>)
    cb3e:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    cb40:	2101      	movs	r1, #1
    cb42:	6838      	ldr	r0, [r7, #0]
    cb44:	4b8f      	ldr	r3, [pc, #572]	; (cd84 <_tc_timer_init+0x268>)
    cb46:	4798      	blx	r3
    cb48:	4603      	mov	r3, r0
    cb4a:	f083 0301 	eor.w	r3, r3, #1
    cb4e:	b2db      	uxtb	r3, r3
    cb50:	2b00      	cmp	r3, #0
    cb52:	d011      	beq.n	cb78 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    cb54:	2102      	movs	r1, #2
    cb56:	6838      	ldr	r0, [r7, #0]
    cb58:	4b8b      	ldr	r3, [pc, #556]	; (cd88 <_tc_timer_init+0x26c>)
    cb5a:	4798      	blx	r3
    cb5c:	4603      	mov	r3, r0
    cb5e:	2b00      	cmp	r3, #0
    cb60:	d006      	beq.n	cb70 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    cb62:	6838      	ldr	r0, [r7, #0]
    cb64:	4b89      	ldr	r3, [pc, #548]	; (cd8c <_tc_timer_init+0x270>)
    cb66:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    cb68:	2102      	movs	r1, #2
    cb6a:	6838      	ldr	r0, [r7, #0]
    cb6c:	4b88      	ldr	r3, [pc, #544]	; (cd90 <_tc_timer_init+0x274>)
    cb6e:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    cb70:	2101      	movs	r1, #1
    cb72:	6838      	ldr	r0, [r7, #0]
    cb74:	4b87      	ldr	r3, [pc, #540]	; (cd94 <_tc_timer_init+0x278>)
    cb76:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    cb78:	2101      	movs	r1, #1
    cb7a:	6838      	ldr	r0, [r7, #0]
    cb7c:	4b84      	ldr	r3, [pc, #528]	; (cd90 <_tc_timer_init+0x274>)
    cb7e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    cb80:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cb84:	4984      	ldr	r1, [pc, #528]	; (cd98 <_tc_timer_init+0x27c>)
    cb86:	4613      	mov	r3, r2
    cb88:	009b      	lsls	r3, r3, #2
    cb8a:	4413      	add	r3, r2
    cb8c:	009b      	lsls	r3, r3, #2
    cb8e:	440b      	add	r3, r1
    cb90:	3304      	adds	r3, #4
    cb92:	681b      	ldr	r3, [r3, #0]
    cb94:	4619      	mov	r1, r3
    cb96:	6838      	ldr	r0, [r7, #0]
    cb98:	4b7e      	ldr	r3, [pc, #504]	; (cd94 <_tc_timer_init+0x278>)
    cb9a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    cb9c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cba0:	497d      	ldr	r1, [pc, #500]	; (cd98 <_tc_timer_init+0x27c>)
    cba2:	4613      	mov	r3, r2
    cba4:	009b      	lsls	r3, r3, #2
    cba6:	4413      	add	r3, r2
    cba8:	009b      	lsls	r3, r3, #2
    cbaa:	440b      	add	r3, r1
    cbac:	330a      	adds	r3, #10
    cbae:	781b      	ldrb	r3, [r3, #0]
    cbb0:	4619      	mov	r1, r3
    cbb2:	6838      	ldr	r0, [r7, #0]
    cbb4:	4b79      	ldr	r3, [pc, #484]	; (cd9c <_tc_timer_init+0x280>)
    cbb6:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    cbb8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cbbc:	4976      	ldr	r1, [pc, #472]	; (cd98 <_tc_timer_init+0x27c>)
    cbbe:	4613      	mov	r3, r2
    cbc0:	009b      	lsls	r3, r3, #2
    cbc2:	4413      	add	r3, r2
    cbc4:	009b      	lsls	r3, r3, #2
    cbc6:	440b      	add	r3, r1
    cbc8:	3308      	adds	r3, #8
    cbca:	881b      	ldrh	r3, [r3, #0]
    cbcc:	4619      	mov	r1, r3
    cbce:	6838      	ldr	r0, [r7, #0]
    cbd0:	4b73      	ldr	r3, [pc, #460]	; (cda0 <_tc_timer_init+0x284>)
    cbd2:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    cbd4:	2101      	movs	r1, #1
    cbd6:	6838      	ldr	r0, [r7, #0]
    cbd8:	4b72      	ldr	r3, [pc, #456]	; (cda4 <_tc_timer_init+0x288>)
    cbda:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    cbdc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cbe0:	496d      	ldr	r1, [pc, #436]	; (cd98 <_tc_timer_init+0x27c>)
    cbe2:	4613      	mov	r3, r2
    cbe4:	009b      	lsls	r3, r3, #2
    cbe6:	4413      	add	r3, r2
    cbe8:	009b      	lsls	r3, r3, #2
    cbea:	440b      	add	r3, r1
    cbec:	3304      	adds	r3, #4
    cbee:	681b      	ldr	r3, [r3, #0]
    cbf0:	f003 030c 	and.w	r3, r3, #12
    cbf4:	2b08      	cmp	r3, #8
    cbf6:	d11e      	bne.n	cc36 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    cbf8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cbfc:	4966      	ldr	r1, [pc, #408]	; (cd98 <_tc_timer_init+0x27c>)
    cbfe:	4613      	mov	r3, r2
    cc00:	009b      	lsls	r3, r3, #2
    cc02:	4413      	add	r3, r2
    cc04:	009b      	lsls	r3, r3, #2
    cc06:	440b      	add	r3, r1
    cc08:	330c      	adds	r3, #12
    cc0a:	681b      	ldr	r3, [r3, #0]
    cc0c:	461a      	mov	r2, r3
    cc0e:	2100      	movs	r1, #0
    cc10:	6838      	ldr	r0, [r7, #0]
    cc12:	4b65      	ldr	r3, [pc, #404]	; (cda8 <_tc_timer_init+0x28c>)
    cc14:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    cc16:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cc1a:	495f      	ldr	r1, [pc, #380]	; (cd98 <_tc_timer_init+0x27c>)
    cc1c:	4613      	mov	r3, r2
    cc1e:	009b      	lsls	r3, r3, #2
    cc20:	4413      	add	r3, r2
    cc22:	009b      	lsls	r3, r3, #2
    cc24:	440b      	add	r3, r1
    cc26:	3310      	adds	r3, #16
    cc28:	681b      	ldr	r3, [r3, #0]
    cc2a:	461a      	mov	r2, r3
    cc2c:	2101      	movs	r1, #1
    cc2e:	6838      	ldr	r0, [r7, #0]
    cc30:	4b5d      	ldr	r3, [pc, #372]	; (cda8 <_tc_timer_init+0x28c>)
    cc32:	4798      	blx	r3
    cc34:	e06a      	b.n	cd0c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    cc36:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cc3a:	4957      	ldr	r1, [pc, #348]	; (cd98 <_tc_timer_init+0x27c>)
    cc3c:	4613      	mov	r3, r2
    cc3e:	009b      	lsls	r3, r3, #2
    cc40:	4413      	add	r3, r2
    cc42:	009b      	lsls	r3, r3, #2
    cc44:	440b      	add	r3, r1
    cc46:	3304      	adds	r3, #4
    cc48:	681b      	ldr	r3, [r3, #0]
    cc4a:	f003 030c 	and.w	r3, r3, #12
    cc4e:	2b00      	cmp	r3, #0
    cc50:	d120      	bne.n	cc94 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    cc52:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cc56:	4950      	ldr	r1, [pc, #320]	; (cd98 <_tc_timer_init+0x27c>)
    cc58:	4613      	mov	r3, r2
    cc5a:	009b      	lsls	r3, r3, #2
    cc5c:	4413      	add	r3, r2
    cc5e:	009b      	lsls	r3, r3, #2
    cc60:	440b      	add	r3, r1
    cc62:	330c      	adds	r3, #12
    cc64:	681b      	ldr	r3, [r3, #0]
    cc66:	b29b      	uxth	r3, r3
    cc68:	461a      	mov	r2, r3
    cc6a:	2100      	movs	r1, #0
    cc6c:	6838      	ldr	r0, [r7, #0]
    cc6e:	4b4f      	ldr	r3, [pc, #316]	; (cdac <_tc_timer_init+0x290>)
    cc70:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    cc72:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cc76:	4948      	ldr	r1, [pc, #288]	; (cd98 <_tc_timer_init+0x27c>)
    cc78:	4613      	mov	r3, r2
    cc7a:	009b      	lsls	r3, r3, #2
    cc7c:	4413      	add	r3, r2
    cc7e:	009b      	lsls	r3, r3, #2
    cc80:	440b      	add	r3, r1
    cc82:	3310      	adds	r3, #16
    cc84:	681b      	ldr	r3, [r3, #0]
    cc86:	b29b      	uxth	r3, r3
    cc88:	461a      	mov	r2, r3
    cc8a:	2101      	movs	r1, #1
    cc8c:	6838      	ldr	r0, [r7, #0]
    cc8e:	4b47      	ldr	r3, [pc, #284]	; (cdac <_tc_timer_init+0x290>)
    cc90:	4798      	blx	r3
    cc92:	e03b      	b.n	cd0c <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    cc94:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cc98:	493f      	ldr	r1, [pc, #252]	; (cd98 <_tc_timer_init+0x27c>)
    cc9a:	4613      	mov	r3, r2
    cc9c:	009b      	lsls	r3, r3, #2
    cc9e:	4413      	add	r3, r2
    cca0:	009b      	lsls	r3, r3, #2
    cca2:	440b      	add	r3, r1
    cca4:	3304      	adds	r3, #4
    cca6:	681b      	ldr	r3, [r3, #0]
    cca8:	f003 030c 	and.w	r3, r3, #12
    ccac:	2b04      	cmp	r3, #4
    ccae:	d12d      	bne.n	cd0c <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    ccb0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ccb4:	4938      	ldr	r1, [pc, #224]	; (cd98 <_tc_timer_init+0x27c>)
    ccb6:	4613      	mov	r3, r2
    ccb8:	009b      	lsls	r3, r3, #2
    ccba:	4413      	add	r3, r2
    ccbc:	009b      	lsls	r3, r3, #2
    ccbe:	440b      	add	r3, r1
    ccc0:	330c      	adds	r3, #12
    ccc2:	681b      	ldr	r3, [r3, #0]
    ccc4:	b2db      	uxtb	r3, r3
    ccc6:	461a      	mov	r2, r3
    ccc8:	2100      	movs	r1, #0
    ccca:	6838      	ldr	r0, [r7, #0]
    cccc:	4b38      	ldr	r3, [pc, #224]	; (cdb0 <_tc_timer_init+0x294>)
    ccce:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    ccd0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ccd4:	4930      	ldr	r1, [pc, #192]	; (cd98 <_tc_timer_init+0x27c>)
    ccd6:	4613      	mov	r3, r2
    ccd8:	009b      	lsls	r3, r3, #2
    ccda:	4413      	add	r3, r2
    ccdc:	009b      	lsls	r3, r3, #2
    ccde:	440b      	add	r3, r1
    cce0:	3310      	adds	r3, #16
    cce2:	681b      	ldr	r3, [r3, #0]
    cce4:	b2db      	uxtb	r3, r3
    cce6:	461a      	mov	r2, r3
    cce8:	2101      	movs	r1, #1
    ccea:	6838      	ldr	r0, [r7, #0]
    ccec:	4b30      	ldr	r3, [pc, #192]	; (cdb0 <_tc_timer_init+0x294>)
    ccee:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    ccf0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ccf4:	4928      	ldr	r1, [pc, #160]	; (cd98 <_tc_timer_init+0x27c>)
    ccf6:	4613      	mov	r3, r2
    ccf8:	009b      	lsls	r3, r3, #2
    ccfa:	4413      	add	r3, r2
    ccfc:	009b      	lsls	r3, r3, #2
    ccfe:	440b      	add	r3, r1
    cd00:	330b      	adds	r3, #11
    cd02:	781b      	ldrb	r3, [r3, #0]
    cd04:	4619      	mov	r1, r3
    cd06:	6838      	ldr	r0, [r7, #0]
    cd08:	4b2a      	ldr	r3, [pc, #168]	; (cdb4 <_tc_timer_init+0x298>)
    cd0a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    cd0c:	6838      	ldr	r0, [r7, #0]
    cd0e:	4b2a      	ldr	r3, [pc, #168]	; (cdb8 <_tc_timer_init+0x29c>)
    cd10:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    cd12:	6879      	ldr	r1, [r7, #4]
    cd14:	6838      	ldr	r0, [r7, #0]
    cd16:	4b29      	ldr	r3, [pc, #164]	; (cdbc <_tc_timer_init+0x2a0>)
    cd18:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    cd1a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cd1e:	491e      	ldr	r1, [pc, #120]	; (cd98 <_tc_timer_init+0x27c>)
    cd20:	4613      	mov	r3, r2
    cd22:	009b      	lsls	r3, r3, #2
    cd24:	4413      	add	r3, r2
    cd26:	009b      	lsls	r3, r3, #2
    cd28:	440b      	add	r3, r1
    cd2a:	3302      	adds	r3, #2
    cd2c:	f9b3 3000 	ldrsh.w	r3, [r3]
    cd30:	4618      	mov	r0, r3
    cd32:	4b23      	ldr	r3, [pc, #140]	; (cdc0 <_tc_timer_init+0x2a4>)
    cd34:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    cd36:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cd3a:	4917      	ldr	r1, [pc, #92]	; (cd98 <_tc_timer_init+0x27c>)
    cd3c:	4613      	mov	r3, r2
    cd3e:	009b      	lsls	r3, r3, #2
    cd40:	4413      	add	r3, r2
    cd42:	009b      	lsls	r3, r3, #2
    cd44:	440b      	add	r3, r1
    cd46:	3302      	adds	r3, #2
    cd48:	f9b3 3000 	ldrsh.w	r3, [r3]
    cd4c:	4618      	mov	r0, r3
    cd4e:	4b1d      	ldr	r3, [pc, #116]	; (cdc4 <_tc_timer_init+0x2a8>)
    cd50:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    cd52:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cd56:	4910      	ldr	r1, [pc, #64]	; (cd98 <_tc_timer_init+0x27c>)
    cd58:	4613      	mov	r3, r2
    cd5a:	009b      	lsls	r3, r3, #2
    cd5c:	4413      	add	r3, r2
    cd5e:	009b      	lsls	r3, r3, #2
    cd60:	440b      	add	r3, r1
    cd62:	3302      	adds	r3, #2
    cd64:	f9b3 3000 	ldrsh.w	r3, [r3]
    cd68:	4618      	mov	r0, r3
    cd6a:	4b17      	ldr	r3, [pc, #92]	; (cdc8 <_tc_timer_init+0x2ac>)
    cd6c:	4798      	blx	r3

	return ERR_NONE;
    cd6e:	2300      	movs	r3, #0
}
    cd70:	4618      	mov	r0, r3
    cd72:	3710      	adds	r7, #16
    cd74:	46bd      	mov	sp, r7
    cd76:	bd80      	pop	{r7, pc}
    cd78:	0000d3ad 	.word	0x0000d3ad
    cd7c:	0001fbb8 	.word	0x0001fbb8
    cd80:	0000799d 	.word	0x0000799d
    cd84:	0000c791 	.word	0x0000c791
    cd88:	0000c931 	.word	0x0000c931
    cd8c:	0000c8e1 	.word	0x0000c8e1
    cd90:	0000c76d 	.word	0x0000c76d
    cd94:	0000c961 	.word	0x0000c961
    cd98:	20000144 	.word	0x20000144
    cd9c:	0000c9c1 	.word	0x0000c9c1
    cda0:	0000c985 	.word	0x0000c985
    cda4:	0000c9a3 	.word	0x0000c9a3
    cda8:	0000cac1 	.word	0x0000cac1
    cdac:	0000ca5d 	.word	0x0000ca5d
    cdb0:	0000ca2d 	.word	0x0000ca2d
    cdb4:	0000c9e1 	.word	0x0000c9e1
    cdb8:	0000c815 	.word	0x0000c815
    cdbc:	0000d415 	.word	0x0000d415
    cdc0:	0000c6ed 	.word	0x0000c6ed
    cdc4:	0000c731 	.word	0x0000c731
    cdc8:	0000c6b1 	.word	0x0000c6b1

0000cdcc <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    cdcc:	b580      	push	{r7, lr}
    cdce:	b084      	sub	sp, #16
    cdd0:	af00      	add	r7, sp, #0
    cdd2:	6078      	str	r0, [r7, #4]
    cdd4:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    cdd6:	6838      	ldr	r0, [r7, #0]
    cdd8:	4b73      	ldr	r3, [pc, #460]	; (cfa8 <_pwm_init+0x1dc>)
    cdda:	4798      	blx	r3
    cddc:	4603      	mov	r3, r0
    cdde:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    cde0:	687b      	ldr	r3, [r7, #4]
    cde2:	683a      	ldr	r2, [r7, #0]
    cde4:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    cde6:	2101      	movs	r1, #1
    cde8:	6838      	ldr	r0, [r7, #0]
    cdea:	4b70      	ldr	r3, [pc, #448]	; (cfac <_pwm_init+0x1e0>)
    cdec:	4798      	blx	r3
    cdee:	4603      	mov	r3, r0
    cdf0:	f083 0301 	eor.w	r3, r3, #1
    cdf4:	b2db      	uxtb	r3, r3
    cdf6:	2b00      	cmp	r3, #0
    cdf8:	d011      	beq.n	ce1e <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    cdfa:	2102      	movs	r1, #2
    cdfc:	6838      	ldr	r0, [r7, #0]
    cdfe:	4b6c      	ldr	r3, [pc, #432]	; (cfb0 <_pwm_init+0x1e4>)
    ce00:	4798      	blx	r3
    ce02:	4603      	mov	r3, r0
    ce04:	2b00      	cmp	r3, #0
    ce06:	d006      	beq.n	ce16 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    ce08:	6838      	ldr	r0, [r7, #0]
    ce0a:	4b6a      	ldr	r3, [pc, #424]	; (cfb4 <_pwm_init+0x1e8>)
    ce0c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    ce0e:	2102      	movs	r1, #2
    ce10:	6838      	ldr	r0, [r7, #0]
    ce12:	4b69      	ldr	r3, [pc, #420]	; (cfb8 <_pwm_init+0x1ec>)
    ce14:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    ce16:	2101      	movs	r1, #1
    ce18:	6838      	ldr	r0, [r7, #0]
    ce1a:	4b68      	ldr	r3, [pc, #416]	; (cfbc <_pwm_init+0x1f0>)
    ce1c:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    ce1e:	2101      	movs	r1, #1
    ce20:	6838      	ldr	r0, [r7, #0]
    ce22:	4b65      	ldr	r3, [pc, #404]	; (cfb8 <_pwm_init+0x1ec>)
    ce24:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    ce26:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ce2a:	4965      	ldr	r1, [pc, #404]	; (cfc0 <_pwm_init+0x1f4>)
    ce2c:	4613      	mov	r3, r2
    ce2e:	009b      	lsls	r3, r3, #2
    ce30:	4413      	add	r3, r2
    ce32:	009b      	lsls	r3, r3, #2
    ce34:	440b      	add	r3, r1
    ce36:	3304      	adds	r3, #4
    ce38:	681b      	ldr	r3, [r3, #0]
    ce3a:	4619      	mov	r1, r3
    ce3c:	6838      	ldr	r0, [r7, #0]
    ce3e:	4b5f      	ldr	r3, [pc, #380]	; (cfbc <_pwm_init+0x1f0>)
    ce40:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    ce42:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ce46:	495e      	ldr	r1, [pc, #376]	; (cfc0 <_pwm_init+0x1f4>)
    ce48:	4613      	mov	r3, r2
    ce4a:	009b      	lsls	r3, r3, #2
    ce4c:	4413      	add	r3, r2
    ce4e:	009b      	lsls	r3, r3, #2
    ce50:	440b      	add	r3, r1
    ce52:	330a      	adds	r3, #10
    ce54:	781b      	ldrb	r3, [r3, #0]
    ce56:	4619      	mov	r1, r3
    ce58:	6838      	ldr	r0, [r7, #0]
    ce5a:	4b5a      	ldr	r3, [pc, #360]	; (cfc4 <_pwm_init+0x1f8>)
    ce5c:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    ce5e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ce62:	4957      	ldr	r1, [pc, #348]	; (cfc0 <_pwm_init+0x1f4>)
    ce64:	4613      	mov	r3, r2
    ce66:	009b      	lsls	r3, r3, #2
    ce68:	4413      	add	r3, r2
    ce6a:	009b      	lsls	r3, r3, #2
    ce6c:	440b      	add	r3, r1
    ce6e:	3308      	adds	r3, #8
    ce70:	881b      	ldrh	r3, [r3, #0]
    ce72:	4619      	mov	r1, r3
    ce74:	6838      	ldr	r0, [r7, #0]
    ce76:	4b54      	ldr	r3, [pc, #336]	; (cfc8 <_pwm_init+0x1fc>)
    ce78:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    ce7a:	2103      	movs	r1, #3
    ce7c:	6838      	ldr	r0, [r7, #0]
    ce7e:	4b53      	ldr	r3, [pc, #332]	; (cfcc <_pwm_init+0x200>)
    ce80:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    ce82:	f997 200f 	ldrsb.w	r2, [r7, #15]
    ce86:	494e      	ldr	r1, [pc, #312]	; (cfc0 <_pwm_init+0x1f4>)
    ce88:	4613      	mov	r3, r2
    ce8a:	009b      	lsls	r3, r3, #2
    ce8c:	4413      	add	r3, r2
    ce8e:	009b      	lsls	r3, r3, #2
    ce90:	440b      	add	r3, r1
    ce92:	3304      	adds	r3, #4
    ce94:	681b      	ldr	r3, [r3, #0]
    ce96:	f003 030c 	and.w	r3, r3, #12
    ce9a:	2b08      	cmp	r3, #8
    ce9c:	d11e      	bne.n	cedc <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    ce9e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cea2:	4947      	ldr	r1, [pc, #284]	; (cfc0 <_pwm_init+0x1f4>)
    cea4:	4613      	mov	r3, r2
    cea6:	009b      	lsls	r3, r3, #2
    cea8:	4413      	add	r3, r2
    ceaa:	009b      	lsls	r3, r3, #2
    ceac:	440b      	add	r3, r1
    ceae:	330c      	adds	r3, #12
    ceb0:	681b      	ldr	r3, [r3, #0]
    ceb2:	461a      	mov	r2, r3
    ceb4:	2100      	movs	r1, #0
    ceb6:	6838      	ldr	r0, [r7, #0]
    ceb8:	4b45      	ldr	r3, [pc, #276]	; (cfd0 <_pwm_init+0x204>)
    ceba:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    cebc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cec0:	493f      	ldr	r1, [pc, #252]	; (cfc0 <_pwm_init+0x1f4>)
    cec2:	4613      	mov	r3, r2
    cec4:	009b      	lsls	r3, r3, #2
    cec6:	4413      	add	r3, r2
    cec8:	009b      	lsls	r3, r3, #2
    ceca:	440b      	add	r3, r1
    cecc:	3310      	adds	r3, #16
    cece:	681b      	ldr	r3, [r3, #0]
    ced0:	461a      	mov	r2, r3
    ced2:	2101      	movs	r1, #1
    ced4:	6838      	ldr	r0, [r7, #0]
    ced6:	4b3e      	ldr	r3, [pc, #248]	; (cfd0 <_pwm_init+0x204>)
    ced8:	4798      	blx	r3
    ceda:	e031      	b.n	cf40 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    cedc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cee0:	4937      	ldr	r1, [pc, #220]	; (cfc0 <_pwm_init+0x1f4>)
    cee2:	4613      	mov	r3, r2
    cee4:	009b      	lsls	r3, r3, #2
    cee6:	4413      	add	r3, r2
    cee8:	009b      	lsls	r3, r3, #2
    ceea:	440b      	add	r3, r1
    ceec:	3304      	adds	r3, #4
    ceee:	681b      	ldr	r3, [r3, #0]
    cef0:	f003 030c 	and.w	r3, r3, #12
    cef4:	2b00      	cmp	r3, #0
    cef6:	d120      	bne.n	cf3a <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    cef8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cefc:	4930      	ldr	r1, [pc, #192]	; (cfc0 <_pwm_init+0x1f4>)
    cefe:	4613      	mov	r3, r2
    cf00:	009b      	lsls	r3, r3, #2
    cf02:	4413      	add	r3, r2
    cf04:	009b      	lsls	r3, r3, #2
    cf06:	440b      	add	r3, r1
    cf08:	330c      	adds	r3, #12
    cf0a:	681b      	ldr	r3, [r3, #0]
    cf0c:	b29b      	uxth	r3, r3
    cf0e:	461a      	mov	r2, r3
    cf10:	2100      	movs	r1, #0
    cf12:	6838      	ldr	r0, [r7, #0]
    cf14:	4b2f      	ldr	r3, [pc, #188]	; (cfd4 <_pwm_init+0x208>)
    cf16:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    cf18:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cf1c:	4928      	ldr	r1, [pc, #160]	; (cfc0 <_pwm_init+0x1f4>)
    cf1e:	4613      	mov	r3, r2
    cf20:	009b      	lsls	r3, r3, #2
    cf22:	4413      	add	r3, r2
    cf24:	009b      	lsls	r3, r3, #2
    cf26:	440b      	add	r3, r1
    cf28:	3310      	adds	r3, #16
    cf2a:	681b      	ldr	r3, [r3, #0]
    cf2c:	b29b      	uxth	r3, r3
    cf2e:	461a      	mov	r2, r3
    cf30:	2101      	movs	r1, #1
    cf32:	6838      	ldr	r0, [r7, #0]
    cf34:	4b27      	ldr	r3, [pc, #156]	; (cfd4 <_pwm_init+0x208>)
    cf36:	4798      	blx	r3
    cf38:	e002      	b.n	cf40 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    cf3a:	f04f 33ff 	mov.w	r3, #4294967295
    cf3e:	e02e      	b.n	cf9e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    cf40:	6879      	ldr	r1, [r7, #4]
    cf42:	6838      	ldr	r0, [r7, #0]
    cf44:	4b24      	ldr	r3, [pc, #144]	; (cfd8 <_pwm_init+0x20c>)
    cf46:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    cf48:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cf4c:	491c      	ldr	r1, [pc, #112]	; (cfc0 <_pwm_init+0x1f4>)
    cf4e:	4613      	mov	r3, r2
    cf50:	009b      	lsls	r3, r3, #2
    cf52:	4413      	add	r3, r2
    cf54:	009b      	lsls	r3, r3, #2
    cf56:	440b      	add	r3, r1
    cf58:	3302      	adds	r3, #2
    cf5a:	f9b3 3000 	ldrsh.w	r3, [r3]
    cf5e:	4618      	mov	r0, r3
    cf60:	4b1e      	ldr	r3, [pc, #120]	; (cfdc <_pwm_init+0x210>)
    cf62:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    cf64:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cf68:	4915      	ldr	r1, [pc, #84]	; (cfc0 <_pwm_init+0x1f4>)
    cf6a:	4613      	mov	r3, r2
    cf6c:	009b      	lsls	r3, r3, #2
    cf6e:	4413      	add	r3, r2
    cf70:	009b      	lsls	r3, r3, #2
    cf72:	440b      	add	r3, r1
    cf74:	3302      	adds	r3, #2
    cf76:	f9b3 3000 	ldrsh.w	r3, [r3]
    cf7a:	4618      	mov	r0, r3
    cf7c:	4b18      	ldr	r3, [pc, #96]	; (cfe0 <_pwm_init+0x214>)
    cf7e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    cf80:	f997 200f 	ldrsb.w	r2, [r7, #15]
    cf84:	490e      	ldr	r1, [pc, #56]	; (cfc0 <_pwm_init+0x1f4>)
    cf86:	4613      	mov	r3, r2
    cf88:	009b      	lsls	r3, r3, #2
    cf8a:	4413      	add	r3, r2
    cf8c:	009b      	lsls	r3, r3, #2
    cf8e:	440b      	add	r3, r1
    cf90:	3302      	adds	r3, #2
    cf92:	f9b3 3000 	ldrsh.w	r3, [r3]
    cf96:	4618      	mov	r0, r3
    cf98:	4b12      	ldr	r3, [pc, #72]	; (cfe4 <_pwm_init+0x218>)
    cf9a:	4798      	blx	r3

	return 0;
    cf9c:	2300      	movs	r3, #0
}
    cf9e:	4618      	mov	r0, r3
    cfa0:	3710      	adds	r7, #16
    cfa2:	46bd      	mov	sp, r7
    cfa4:	bd80      	pop	{r7, pc}
    cfa6:	bf00      	nop
    cfa8:	0000d3ad 	.word	0x0000d3ad
    cfac:	0000c791 	.word	0x0000c791
    cfb0:	0000c931 	.word	0x0000c931
    cfb4:	0000c8e1 	.word	0x0000c8e1
    cfb8:	0000c76d 	.word	0x0000c76d
    cfbc:	0000c961 	.word	0x0000c961
    cfc0:	20000144 	.word	0x20000144
    cfc4:	0000c9c1 	.word	0x0000c9c1
    cfc8:	0000c985 	.word	0x0000c985
    cfcc:	0000c9a3 	.word	0x0000c9a3
    cfd0:	0000cac1 	.word	0x0000cac1
    cfd4:	0000ca5d 	.word	0x0000ca5d
    cfd8:	0000d415 	.word	0x0000d415
    cfdc:	0000c6ed 	.word	0x0000c6ed
    cfe0:	0000c731 	.word	0x0000c731
    cfe4:	0000c6b1 	.word	0x0000c6b1

0000cfe8 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    cfe8:	b580      	push	{r7, lr}
    cfea:	b084      	sub	sp, #16
    cfec:	af00      	add	r7, sp, #0
    cfee:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    cff0:	687b      	ldr	r3, [r7, #4]
    cff2:	68db      	ldr	r3, [r3, #12]
    cff4:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    cff6:	68f8      	ldr	r0, [r7, #12]
    cff8:	4b10      	ldr	r3, [pc, #64]	; (d03c <_tc_timer_deinit+0x54>)
    cffa:	4798      	blx	r3
    cffc:	4603      	mov	r3, r0
    cffe:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    d000:	22f9      	movs	r2, #249	; 0xf9
    d002:	490f      	ldr	r1, [pc, #60]	; (d040 <_tc_timer_deinit+0x58>)
    d004:	2001      	movs	r0, #1
    d006:	4b0f      	ldr	r3, [pc, #60]	; (d044 <_tc_timer_deinit+0x5c>)
    d008:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    d00a:	f997 200b 	ldrsb.w	r2, [r7, #11]
    d00e:	490e      	ldr	r1, [pc, #56]	; (d048 <_tc_timer_deinit+0x60>)
    d010:	4613      	mov	r3, r2
    d012:	009b      	lsls	r3, r3, #2
    d014:	4413      	add	r3, r2
    d016:	009b      	lsls	r3, r3, #2
    d018:	440b      	add	r3, r1
    d01a:	3302      	adds	r3, #2
    d01c:	f9b3 3000 	ldrsh.w	r3, [r3]
    d020:	4618      	mov	r0, r3
    d022:	4b0a      	ldr	r3, [pc, #40]	; (d04c <_tc_timer_deinit+0x64>)
    d024:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    d026:	68f8      	ldr	r0, [r7, #12]
    d028:	4b09      	ldr	r3, [pc, #36]	; (d050 <_tc_timer_deinit+0x68>)
    d02a:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    d02c:	68f8      	ldr	r0, [r7, #12]
    d02e:	4b09      	ldr	r3, [pc, #36]	; (d054 <_tc_timer_deinit+0x6c>)
    d030:	4798      	blx	r3
}
    d032:	bf00      	nop
    d034:	3710      	adds	r7, #16
    d036:	46bd      	mov	sp, r7
    d038:	bd80      	pop	{r7, pc}
    d03a:	bf00      	nop
    d03c:	0000d3ad 	.word	0x0000d3ad
    d040:	0001fbb8 	.word	0x0001fbb8
    d044:	0000799d 	.word	0x0000799d
    d048:	20000144 	.word	0x20000144
    d04c:	0000c6ed 	.word	0x0000c6ed
    d050:	0000c8e1 	.word	0x0000c8e1
    d054:	0000c859 	.word	0x0000c859

0000d058 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    d058:	b580      	push	{r7, lr}
    d05a:	b082      	sub	sp, #8
    d05c:	af00      	add	r7, sp, #0
    d05e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    d060:	687b      	ldr	r3, [r7, #4]
    d062:	68db      	ldr	r3, [r3, #12]
    d064:	4618      	mov	r0, r3
    d066:	4b03      	ldr	r3, [pc, #12]	; (d074 <_tc_timer_start+0x1c>)
    d068:	4798      	blx	r3
}
    d06a:	bf00      	nop
    d06c:	3708      	adds	r7, #8
    d06e:	46bd      	mov	sp, r7
    d070:	bd80      	pop	{r7, pc}
    d072:	bf00      	nop
    d074:	0000c881 	.word	0x0000c881

0000d078 <_pwm_enable>:
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    d078:	b580      	push	{r7, lr}
    d07a:	b082      	sub	sp, #8
    d07c:	af00      	add	r7, sp, #0
    d07e:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    d080:	687b      	ldr	r3, [r7, #4]
    d082:	691b      	ldr	r3, [r3, #16]
    d084:	4618      	mov	r0, r3
    d086:	4b03      	ldr	r3, [pc, #12]	; (d094 <_pwm_enable+0x1c>)
    d088:	4798      	blx	r3
}
    d08a:	bf00      	nop
    d08c:	3708      	adds	r7, #8
    d08e:	46bd      	mov	sp, r7
    d090:	bd80      	pop	{r7, pc}
    d092:	bf00      	nop
    d094:	0000c881 	.word	0x0000c881

0000d098 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    d098:	b580      	push	{r7, lr}
    d09a:	b082      	sub	sp, #8
    d09c:	af00      	add	r7, sp, #0
    d09e:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    d0a0:	687b      	ldr	r3, [r7, #4]
    d0a2:	68db      	ldr	r3, [r3, #12]
    d0a4:	4618      	mov	r0, r3
    d0a6:	4b03      	ldr	r3, [pc, #12]	; (d0b4 <_tc_timer_stop+0x1c>)
    d0a8:	4798      	blx	r3
}
    d0aa:	bf00      	nop
    d0ac:	3708      	adds	r7, #8
    d0ae:	46bd      	mov	sp, r7
    d0b0:	bd80      	pop	{r7, pc}
    d0b2:	bf00      	nop
    d0b4:	0000c8e1 	.word	0x0000c8e1

0000d0b8 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    d0b8:	b580      	push	{r7, lr}
    d0ba:	b084      	sub	sp, #16
    d0bc:	af00      	add	r7, sp, #0
    d0be:	6078      	str	r0, [r7, #4]
    d0c0:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    d0c2:	687b      	ldr	r3, [r7, #4]
    d0c4:	68db      	ldr	r3, [r3, #12]
    d0c6:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d0c8:	68f8      	ldr	r0, [r7, #12]
    d0ca:	4b14      	ldr	r3, [pc, #80]	; (d11c <_tc_timer_set_period+0x64>)
    d0cc:	4798      	blx	r3
    d0ce:	4603      	mov	r3, r0
    d0d0:	2b02      	cmp	r3, #2
    d0d2:	d105      	bne.n	d0e0 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    d0d4:	683a      	ldr	r2, [r7, #0]
    d0d6:	2100      	movs	r1, #0
    d0d8:	68f8      	ldr	r0, [r7, #12]
    d0da:	4b11      	ldr	r3, [pc, #68]	; (d120 <_tc_timer_set_period+0x68>)
    d0dc:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    d0de:	e019      	b.n	d114 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d0e0:	68f8      	ldr	r0, [r7, #12]
    d0e2:	4b0e      	ldr	r3, [pc, #56]	; (d11c <_tc_timer_set_period+0x64>)
    d0e4:	4798      	blx	r3
    d0e6:	4603      	mov	r3, r0
    d0e8:	2b00      	cmp	r3, #0
    d0ea:	d107      	bne.n	d0fc <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    d0ec:	683b      	ldr	r3, [r7, #0]
    d0ee:	b29b      	uxth	r3, r3
    d0f0:	461a      	mov	r2, r3
    d0f2:	2100      	movs	r1, #0
    d0f4:	68f8      	ldr	r0, [r7, #12]
    d0f6:	4b0b      	ldr	r3, [pc, #44]	; (d124 <_tc_timer_set_period+0x6c>)
    d0f8:	4798      	blx	r3
}
    d0fa:	e00b      	b.n	d114 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d0fc:	68f8      	ldr	r0, [r7, #12]
    d0fe:	4b07      	ldr	r3, [pc, #28]	; (d11c <_tc_timer_set_period+0x64>)
    d100:	4798      	blx	r3
    d102:	4603      	mov	r3, r0
    d104:	2b01      	cmp	r3, #1
    d106:	d105      	bne.n	d114 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    d108:	683b      	ldr	r3, [r7, #0]
    d10a:	b2db      	uxtb	r3, r3
    d10c:	4619      	mov	r1, r3
    d10e:	68f8      	ldr	r0, [r7, #12]
    d110:	4b05      	ldr	r3, [pc, #20]	; (d128 <_tc_timer_set_period+0x70>)
    d112:	4798      	blx	r3
}
    d114:	bf00      	nop
    d116:	3710      	adds	r7, #16
    d118:	46bd      	mov	sp, r7
    d11a:	bd80      	pop	{r7, pc}
    d11c:	0000c909 	.word	0x0000c909
    d120:	0000cac1 	.word	0x0000cac1
    d124:	0000ca5d 	.word	0x0000ca5d
    d128:	0000c9e1 	.word	0x0000c9e1

0000d12c <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    d12c:	b580      	push	{r7, lr}
    d12e:	b084      	sub	sp, #16
    d130:	af00      	add	r7, sp, #0
    d132:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d134:	687b      	ldr	r3, [r7, #4]
    d136:	68db      	ldr	r3, [r3, #12]
    d138:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d13a:	68f8      	ldr	r0, [r7, #12]
    d13c:	4b13      	ldr	r3, [pc, #76]	; (d18c <_tc_timer_get_period+0x60>)
    d13e:	4798      	blx	r3
    d140:	4603      	mov	r3, r0
    d142:	2b02      	cmp	r3, #2
    d144:	d105      	bne.n	d152 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    d146:	2100      	movs	r1, #0
    d148:	68f8      	ldr	r0, [r7, #12]
    d14a:	4b11      	ldr	r3, [pc, #68]	; (d190 <_tc_timer_get_period+0x64>)
    d14c:	4798      	blx	r3
    d14e:	4603      	mov	r3, r0
    d150:	e017      	b.n	d182 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d152:	68f8      	ldr	r0, [r7, #12]
    d154:	4b0d      	ldr	r3, [pc, #52]	; (d18c <_tc_timer_get_period+0x60>)
    d156:	4798      	blx	r3
    d158:	4603      	mov	r3, r0
    d15a:	2b00      	cmp	r3, #0
    d15c:	d105      	bne.n	d16a <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    d15e:	2100      	movs	r1, #0
    d160:	68f8      	ldr	r0, [r7, #12]
    d162:	4b0c      	ldr	r3, [pc, #48]	; (d194 <_tc_timer_get_period+0x68>)
    d164:	4798      	blx	r3
    d166:	4603      	mov	r3, r0
    d168:	e00b      	b.n	d182 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    d16a:	68f8      	ldr	r0, [r7, #12]
    d16c:	4b07      	ldr	r3, [pc, #28]	; (d18c <_tc_timer_get_period+0x60>)
    d16e:	4798      	blx	r3
    d170:	4603      	mov	r3, r0
    d172:	2b01      	cmp	r3, #1
    d174:	d104      	bne.n	d180 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    d176:	68f8      	ldr	r0, [r7, #12]
    d178:	4b07      	ldr	r3, [pc, #28]	; (d198 <_tc_timer_get_period+0x6c>)
    d17a:	4798      	blx	r3
    d17c:	4603      	mov	r3, r0
    d17e:	e000      	b.n	d182 <_tc_timer_get_period+0x56>
	}

	return 0;
    d180:	2300      	movs	r3, #0
}
    d182:	4618      	mov	r0, r3
    d184:	3710      	adds	r7, #16
    d186:	46bd      	mov	sp, r7
    d188:	bd80      	pop	{r7, pc}
    d18a:	bf00      	nop
    d18c:	0000c909 	.word	0x0000c909
    d190:	0000caf1 	.word	0x0000caf1
    d194:	0000ca91 	.word	0x0000ca91
    d198:	0000ca09 	.word	0x0000ca09

0000d19c <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    d19c:	b580      	push	{r7, lr}
    d19e:	b082      	sub	sp, #8
    d1a0:	af00      	add	r7, sp, #0
    d1a2:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    d1a4:	687b      	ldr	r3, [r7, #4]
    d1a6:	68db      	ldr	r3, [r3, #12]
    d1a8:	4618      	mov	r0, r3
    d1aa:	4b03      	ldr	r3, [pc, #12]	; (d1b8 <_tc_timer_is_started+0x1c>)
    d1ac:	4798      	blx	r3
    d1ae:	4603      	mov	r3, r0
}
    d1b0:	4618      	mov	r0, r3
    d1b2:	3708      	adds	r7, #8
    d1b4:	46bd      	mov	sp, r7
    d1b6:	bd80      	pop	{r7, pc}
    d1b8:	0000c8a9 	.word	0x0000c8a9

0000d1bc <_pwm_is_enabled>:
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    d1bc:	b580      	push	{r7, lr}
    d1be:	b082      	sub	sp, #8
    d1c0:	af00      	add	r7, sp, #0
    d1c2:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    d1c4:	687b      	ldr	r3, [r7, #4]
    d1c6:	691b      	ldr	r3, [r3, #16]
    d1c8:	4618      	mov	r0, r3
    d1ca:	4b03      	ldr	r3, [pc, #12]	; (d1d8 <_pwm_is_enabled+0x1c>)
    d1cc:	4798      	blx	r3
    d1ce:	4603      	mov	r3, r0
}
    d1d0:	4618      	mov	r0, r3
    d1d2:	3708      	adds	r7, #8
    d1d4:	46bd      	mov	sp, r7
    d1d6:	bd80      	pop	{r7, pc}
    d1d8:	0000c8a9 	.word	0x0000c8a9

0000d1dc <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    d1dc:	b480      	push	{r7}
    d1de:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    d1e0:	4b02      	ldr	r3, [pc, #8]	; (d1ec <_tc_get_timer+0x10>)
}
    d1e2:	4618      	mov	r0, r3
    d1e4:	46bd      	mov	sp, r7
    d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1ea:	4770      	bx	lr
    d1ec:	200001bc 	.word	0x200001bc

0000d1f0 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    d1f0:	b480      	push	{r7}
    d1f2:	af00      	add	r7, sp, #0
	return NULL;
    d1f4:	2300      	movs	r3, #0
}
    d1f6:	4618      	mov	r0, r3
    d1f8:	46bd      	mov	sp, r7
    d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    d1fe:	4770      	bx	lr

0000d200 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    d200:	b580      	push	{r7, lr}
    d202:	b084      	sub	sp, #16
    d204:	af00      	add	r7, sp, #0
    d206:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d208:	687b      	ldr	r3, [r7, #4]
    d20a:	68db      	ldr	r3, [r3, #12]
    d20c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    d20e:	68f8      	ldr	r0, [r7, #12]
    d210:	4b0e      	ldr	r3, [pc, #56]	; (d24c <_tc_timer_set_irq+0x4c>)
    d212:	4798      	blx	r3
    d214:	4603      	mov	r3, r0
    d216:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    d218:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    d21c:	490c      	ldr	r1, [pc, #48]	; (d250 <_tc_timer_set_irq+0x50>)
    d21e:	2001      	movs	r0, #1
    d220:	4b0c      	ldr	r3, [pc, #48]	; (d254 <_tc_timer_set_irq+0x54>)
    d222:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    d224:	f997 200b 	ldrsb.w	r2, [r7, #11]
    d228:	490b      	ldr	r1, [pc, #44]	; (d258 <_tc_timer_set_irq+0x58>)
    d22a:	4613      	mov	r3, r2
    d22c:	009b      	lsls	r3, r3, #2
    d22e:	4413      	add	r3, r2
    d230:	009b      	lsls	r3, r3, #2
    d232:	440b      	add	r3, r1
    d234:	3302      	adds	r3, #2
    d236:	f9b3 3000 	ldrsh.w	r3, [r3]
    d23a:	b2db      	uxtb	r3, r3
    d23c:	4618      	mov	r0, r3
    d23e:	4b07      	ldr	r3, [pc, #28]	; (d25c <_tc_timer_set_irq+0x5c>)
    d240:	4798      	blx	r3
}
    d242:	bf00      	nop
    d244:	3710      	adds	r7, #16
    d246:	46bd      	mov	sp, r7
    d248:	bd80      	pop	{r7, pc}
    d24a:	bf00      	nop
    d24c:	0000d3ad 	.word	0x0000d3ad
    d250:	0001fbb8 	.word	0x0001fbb8
    d254:	0000799d 	.word	0x0000799d
    d258:	20000144 	.word	0x20000144
    d25c:	000081e9 	.word	0x000081e9

0000d260 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    d260:	b580      	push	{r7, lr}
    d262:	b084      	sub	sp, #16
    d264:	af00      	add	r7, sp, #0
    d266:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d268:	687b      	ldr	r3, [r7, #4]
    d26a:	68db      	ldr	r3, [r3, #12]
    d26c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    d26e:	68f8      	ldr	r0, [r7, #12]
    d270:	4b07      	ldr	r3, [pc, #28]	; (d290 <tc_interrupt_handler+0x30>)
    d272:	4798      	blx	r3
    d274:	4603      	mov	r3, r0
    d276:	2b00      	cmp	r3, #0
    d278:	d006      	beq.n	d288 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    d27a:	68f8      	ldr	r0, [r7, #12]
    d27c:	4b05      	ldr	r3, [pc, #20]	; (d294 <tc_interrupt_handler+0x34>)
    d27e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    d280:	687b      	ldr	r3, [r7, #4]
    d282:	681b      	ldr	r3, [r3, #0]
    d284:	6878      	ldr	r0, [r7, #4]
    d286:	4798      	blx	r3
	}
}
    d288:	bf00      	nop
    d28a:	3710      	adds	r7, #16
    d28c:	46bd      	mov	sp, r7
    d28e:	bd80      	pop	{r7, pc}
    d290:	0000c7b9 	.word	0x0000c7b9
    d294:	0000c7e1 	.word	0x0000c7e1

0000d298 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    d298:	b580      	push	{r7, lr}
    d29a:	b084      	sub	sp, #16
    d29c:	af00      	add	r7, sp, #0
    d29e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    d2a0:	687b      	ldr	r3, [r7, #4]
    d2a2:	691b      	ldr	r3, [r3, #16]
    d2a4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    d2a6:	68f8      	ldr	r0, [r7, #12]
    d2a8:	4b12      	ldr	r3, [pc, #72]	; (d2f4 <tc_pwm_interrupt_handler+0x5c>)
    d2aa:	4798      	blx	r3
    d2ac:	4603      	mov	r3, r0
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	d00a      	beq.n	d2c8 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    d2b2:	68f8      	ldr	r0, [r7, #12]
    d2b4:	4b10      	ldr	r3, [pc, #64]	; (d2f8 <tc_pwm_interrupt_handler+0x60>)
    d2b6:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    d2b8:	687b      	ldr	r3, [r7, #4]
    d2ba:	681b      	ldr	r3, [r3, #0]
    d2bc:	2b00      	cmp	r3, #0
    d2be:	d003      	beq.n	d2c8 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    d2c0:	687b      	ldr	r3, [r7, #4]
    d2c2:	681b      	ldr	r3, [r3, #0]
    d2c4:	6878      	ldr	r0, [r7, #4]
    d2c6:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    d2c8:	68f8      	ldr	r0, [r7, #12]
    d2ca:	4b0c      	ldr	r3, [pc, #48]	; (d2fc <tc_pwm_interrupt_handler+0x64>)
    d2cc:	4798      	blx	r3
    d2ce:	4603      	mov	r3, r0
    d2d0:	2b00      	cmp	r3, #0
    d2d2:	d00a      	beq.n	d2ea <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    d2d4:	68f8      	ldr	r0, [r7, #12]
    d2d6:	4b0a      	ldr	r3, [pc, #40]	; (d300 <tc_pwm_interrupt_handler+0x68>)
    d2d8:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    d2da:	687b      	ldr	r3, [r7, #4]
    d2dc:	685b      	ldr	r3, [r3, #4]
    d2de:	2b00      	cmp	r3, #0
    d2e0:	d003      	beq.n	d2ea <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    d2e2:	687b      	ldr	r3, [r7, #4]
    d2e4:	685b      	ldr	r3, [r3, #4]
    d2e6:	6878      	ldr	r0, [r7, #4]
    d2e8:	4798      	blx	r3
		}
	}
}
    d2ea:	bf00      	nop
    d2ec:	3710      	adds	r7, #16
    d2ee:	46bd      	mov	sp, r7
    d2f0:	bd80      	pop	{r7, pc}
    d2f2:	bf00      	nop
    d2f4:	0000c7b9 	.word	0x0000c7b9
    d2f8:	0000c7e1 	.word	0x0000c7e1
    d2fc:	0000c82f 	.word	0x0000c82f
    d300:	0000c7fb 	.word	0x0000c7fb

0000d304 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    d304:	b580      	push	{r7, lr}
    d306:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    d308:	4b03      	ldr	r3, [pc, #12]	; (d318 <TC0_Handler+0x14>)
    d30a:	681b      	ldr	r3, [r3, #0]
    d30c:	4618      	mov	r0, r3
    d30e:	4b03      	ldr	r3, [pc, #12]	; (d31c <TC0_Handler+0x18>)
    d310:	4798      	blx	r3
}
    d312:	bf00      	nop
    d314:	bd80      	pop	{r7, pc}
    d316:	bf00      	nop
    d318:	200088ac 	.word	0x200088ac
    d31c:	0000d261 	.word	0x0000d261

0000d320 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    d320:	b580      	push	{r7, lr}
    d322:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc1_dev);
    d324:	4b03      	ldr	r3, [pc, #12]	; (d334 <TC1_Handler+0x14>)
    d326:	681b      	ldr	r3, [r3, #0]
    d328:	4618      	mov	r0, r3
    d32a:	4b03      	ldr	r3, [pc, #12]	; (d338 <TC1_Handler+0x18>)
    d32c:	4798      	blx	r3
}
    d32e:	bf00      	nop
    d330:	bd80      	pop	{r7, pc}
    d332:	bf00      	nop
    d334:	200088b0 	.word	0x200088b0
    d338:	0000d299 	.word	0x0000d299

0000d33c <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    d33c:	b580      	push	{r7, lr}
    d33e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    d340:	4b03      	ldr	r3, [pc, #12]	; (d350 <TC2_Handler+0x14>)
    d342:	681b      	ldr	r3, [r3, #0]
    d344:	4618      	mov	r0, r3
    d346:	4b03      	ldr	r3, [pc, #12]	; (d354 <TC2_Handler+0x18>)
    d348:	4798      	blx	r3
}
    d34a:	bf00      	nop
    d34c:	bd80      	pop	{r7, pc}
    d34e:	bf00      	nop
    d350:	200088b4 	.word	0x200088b4
    d354:	0000d261 	.word	0x0000d261

0000d358 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    d358:	b580      	push	{r7, lr}
    d35a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    d35c:	4b03      	ldr	r3, [pc, #12]	; (d36c <TC4_Handler+0x14>)
    d35e:	681b      	ldr	r3, [r3, #0]
    d360:	4618      	mov	r0, r3
    d362:	4b03      	ldr	r3, [pc, #12]	; (d370 <TC4_Handler+0x18>)
    d364:	4798      	blx	r3
}
    d366:	bf00      	nop
    d368:	bd80      	pop	{r7, pc}
    d36a:	bf00      	nop
    d36c:	200088b8 	.word	0x200088b8
    d370:	0000d261 	.word	0x0000d261

0000d374 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    d374:	b580      	push	{r7, lr}
    d376:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    d378:	4b03      	ldr	r3, [pc, #12]	; (d388 <TC5_Handler+0x14>)
    d37a:	681b      	ldr	r3, [r3, #0]
    d37c:	4618      	mov	r0, r3
    d37e:	4b03      	ldr	r3, [pc, #12]	; (d38c <TC5_Handler+0x18>)
    d380:	4798      	blx	r3
}
    d382:	bf00      	nop
    d384:	bd80      	pop	{r7, pc}
    d386:	bf00      	nop
    d388:	200088bc 	.word	0x200088bc
    d38c:	0000d261 	.word	0x0000d261

0000d390 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    d390:	b580      	push	{r7, lr}
    d392:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    d394:	4b03      	ldr	r3, [pc, #12]	; (d3a4 <TC6_Handler+0x14>)
    d396:	681b      	ldr	r3, [r3, #0]
    d398:	4618      	mov	r0, r3
    d39a:	4b03      	ldr	r3, [pc, #12]	; (d3a8 <TC6_Handler+0x18>)
    d39c:	4798      	blx	r3
}
    d39e:	bf00      	nop
    d3a0:	bd80      	pop	{r7, pc}
    d3a2:	bf00      	nop
    d3a4:	200088c0 	.word	0x200088c0
    d3a8:	0000d261 	.word	0x0000d261

0000d3ac <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    d3ac:	b580      	push	{r7, lr}
    d3ae:	b084      	sub	sp, #16
    d3b0:	af00      	add	r7, sp, #0
    d3b2:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    d3b4:	6878      	ldr	r0, [r7, #4]
    d3b6:	4b13      	ldr	r3, [pc, #76]	; (d404 <get_tc_index+0x58>)
    d3b8:	4798      	blx	r3
    d3ba:	4603      	mov	r3, r0
    d3bc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    d3be:	2300      	movs	r3, #0
    d3c0:	73fb      	strb	r3, [r7, #15]
    d3c2:	e010      	b.n	d3e6 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    d3c4:	7bfa      	ldrb	r2, [r7, #15]
    d3c6:	4910      	ldr	r1, [pc, #64]	; (d408 <get_tc_index+0x5c>)
    d3c8:	4613      	mov	r3, r2
    d3ca:	009b      	lsls	r3, r3, #2
    d3cc:	4413      	add	r3, r2
    d3ce:	009b      	lsls	r3, r3, #2
    d3d0:	440b      	add	r3, r1
    d3d2:	781b      	ldrb	r3, [r3, #0]
    d3d4:	7bba      	ldrb	r2, [r7, #14]
    d3d6:	429a      	cmp	r2, r3
    d3d8:	d102      	bne.n	d3e0 <get_tc_index+0x34>
			return i;
    d3da:	f997 300f 	ldrsb.w	r3, [r7, #15]
    d3de:	e00d      	b.n	d3fc <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    d3e0:	7bfb      	ldrb	r3, [r7, #15]
    d3e2:	3301      	adds	r3, #1
    d3e4:	73fb      	strb	r3, [r7, #15]
    d3e6:	7bfb      	ldrb	r3, [r7, #15]
    d3e8:	2b05      	cmp	r3, #5
    d3ea:	d9eb      	bls.n	d3c4 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    d3ec:	f240 221d 	movw	r2, #541	; 0x21d
    d3f0:	4906      	ldr	r1, [pc, #24]	; (d40c <get_tc_index+0x60>)
    d3f2:	2000      	movs	r0, #0
    d3f4:	4b06      	ldr	r3, [pc, #24]	; (d410 <get_tc_index+0x64>)
    d3f6:	4798      	blx	r3
	return -1;
    d3f8:	f04f 33ff 	mov.w	r3, #4294967295
}
    d3fc:	4618      	mov	r0, r3
    d3fe:	3710      	adds	r7, #16
    d400:	46bd      	mov	sp, r7
    d402:	bd80      	pop	{r7, pc}
    d404:	0000d4b1 	.word	0x0000d4b1
    d408:	20000144 	.word	0x20000144
    d40c:	0001fbb8 	.word	0x0001fbb8
    d410:	0000799d 	.word	0x0000799d

0000d414 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    d414:	b480      	push	{r7}
    d416:	b083      	sub	sp, #12
    d418:	af00      	add	r7, sp, #0
    d41a:	6078      	str	r0, [r7, #4]
    d41c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    d41e:	687b      	ldr	r3, [r7, #4]
    d420:	4a17      	ldr	r2, [pc, #92]	; (d480 <_tc_init_irq_param+0x6c>)
    d422:	4293      	cmp	r3, r2
    d424:	d102      	bne.n	d42c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    d426:	4a17      	ldr	r2, [pc, #92]	; (d484 <_tc_init_irq_param+0x70>)
    d428:	683b      	ldr	r3, [r7, #0]
    d42a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    d42c:	687b      	ldr	r3, [r7, #4]
    d42e:	4a16      	ldr	r2, [pc, #88]	; (d488 <_tc_init_irq_param+0x74>)
    d430:	4293      	cmp	r3, r2
    d432:	d102      	bne.n	d43a <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _pwm_device *)dev;
    d434:	4a15      	ldr	r2, [pc, #84]	; (d48c <_tc_init_irq_param+0x78>)
    d436:	683b      	ldr	r3, [r7, #0]
    d438:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    d43a:	687b      	ldr	r3, [r7, #4]
    d43c:	4a14      	ldr	r2, [pc, #80]	; (d490 <_tc_init_irq_param+0x7c>)
    d43e:	4293      	cmp	r3, r2
    d440:	d102      	bne.n	d448 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    d442:	4a14      	ldr	r2, [pc, #80]	; (d494 <_tc_init_irq_param+0x80>)
    d444:	683b      	ldr	r3, [r7, #0]
    d446:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    d448:	687b      	ldr	r3, [r7, #4]
    d44a:	4a13      	ldr	r2, [pc, #76]	; (d498 <_tc_init_irq_param+0x84>)
    d44c:	4293      	cmp	r3, r2
    d44e:	d102      	bne.n	d456 <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
    d450:	4a12      	ldr	r2, [pc, #72]	; (d49c <_tc_init_irq_param+0x88>)
    d452:	683b      	ldr	r3, [r7, #0]
    d454:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    d456:	687b      	ldr	r3, [r7, #4]
    d458:	4a11      	ldr	r2, [pc, #68]	; (d4a0 <_tc_init_irq_param+0x8c>)
    d45a:	4293      	cmp	r3, r2
    d45c:	d102      	bne.n	d464 <_tc_init_irq_param+0x50>
		_tc5_dev = (struct _timer_device *)dev;
    d45e:	4a11      	ldr	r2, [pc, #68]	; (d4a4 <_tc_init_irq_param+0x90>)
    d460:	683b      	ldr	r3, [r7, #0]
    d462:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    d464:	687b      	ldr	r3, [r7, #4]
    d466:	4a10      	ldr	r2, [pc, #64]	; (d4a8 <_tc_init_irq_param+0x94>)
    d468:	4293      	cmp	r3, r2
    d46a:	d102      	bne.n	d472 <_tc_init_irq_param+0x5e>
		_tc6_dev = (struct _timer_device *)dev;
    d46c:	4a0f      	ldr	r2, [pc, #60]	; (d4ac <_tc_init_irq_param+0x98>)
    d46e:	683b      	ldr	r3, [r7, #0]
    d470:	6013      	str	r3, [r2, #0]
	}
}
    d472:	bf00      	nop
    d474:	370c      	adds	r7, #12
    d476:	46bd      	mov	sp, r7
    d478:	f85d 7b04 	ldr.w	r7, [sp], #4
    d47c:	4770      	bx	lr
    d47e:	bf00      	nop
    d480:	40003800 	.word	0x40003800
    d484:	200088ac 	.word	0x200088ac
    d488:	40003c00 	.word	0x40003c00
    d48c:	200088b0 	.word	0x200088b0
    d490:	4101a000 	.word	0x4101a000
    d494:	200088b4 	.word	0x200088b4
    d498:	42001400 	.word	0x42001400
    d49c:	200088b8 	.word	0x200088b8
    d4a0:	42001800 	.word	0x42001800
    d4a4:	200088bc 	.word	0x200088bc
    d4a8:	43001400 	.word	0x43001400
    d4ac:	200088c0 	.word	0x200088c0

0000d4b0 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    d4b0:	b4b0      	push	{r4, r5, r7}
    d4b2:	b08d      	sub	sp, #52	; 0x34
    d4b4:	af00      	add	r7, sp, #0
    d4b6:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    d4b8:	4b13      	ldr	r3, [pc, #76]	; (d508 <_get_hardware_offset+0x58>)
    d4ba:	f107 040c 	add.w	r4, r7, #12
    d4be:	461d      	mov	r5, r3
    d4c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d4c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d4c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    d4c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    d4cc:	2300      	movs	r3, #0
    d4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    d4d0:	e010      	b.n	d4f4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    d4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d4d4:	009b      	lsls	r3, r3, #2
    d4d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    d4da:	4413      	add	r3, r2
    d4dc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    d4e0:	461a      	mov	r2, r3
    d4e2:	687b      	ldr	r3, [r7, #4]
    d4e4:	429a      	cmp	r2, r3
    d4e6:	d102      	bne.n	d4ee <_get_hardware_offset+0x3e>
			return i;
    d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d4ea:	b2db      	uxtb	r3, r3
    d4ec:	e006      	b.n	d4fc <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    d4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d4f0:	3301      	adds	r3, #1
    d4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    d4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d4f6:	2b07      	cmp	r3, #7
    d4f8:	d9eb      	bls.n	d4d2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    d4fa:	2300      	movs	r3, #0
}
    d4fc:	4618      	mov	r0, r3
    d4fe:	3734      	adds	r7, #52	; 0x34
    d500:	46bd      	mov	sp, r7
    d502:	bcb0      	pop	{r4, r5, r7}
    d504:	4770      	bx	lr
    d506:	bf00      	nop
    d508:	0001fbcc 	.word	0x0001fbcc

0000d50c <__NVIC_EnableIRQ>:
{
    d50c:	b480      	push	{r7}
    d50e:	b083      	sub	sp, #12
    d510:	af00      	add	r7, sp, #0
    d512:	4603      	mov	r3, r0
    d514:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    d516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d51a:	2b00      	cmp	r3, #0
    d51c:	db0b      	blt.n	d536 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d51e:	4909      	ldr	r1, [pc, #36]	; (d544 <__NVIC_EnableIRQ+0x38>)
    d520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d524:	095b      	lsrs	r3, r3, #5
    d526:	88fa      	ldrh	r2, [r7, #6]
    d528:	f002 021f 	and.w	r2, r2, #31
    d52c:	2001      	movs	r0, #1
    d52e:	fa00 f202 	lsl.w	r2, r0, r2
    d532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d536:	bf00      	nop
    d538:	370c      	adds	r7, #12
    d53a:	46bd      	mov	sp, r7
    d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d540:	4770      	bx	lr
    d542:	bf00      	nop
    d544:	e000e100 	.word	0xe000e100

0000d548 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    d548:	b480      	push	{r7}
    d54a:	b087      	sub	sp, #28
    d54c:	af00      	add	r7, sp, #0
    d54e:	60f8      	str	r0, [r7, #12]
    d550:	460b      	mov	r3, r1
    d552:	607a      	str	r2, [r7, #4]
    d554:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    d556:	7afa      	ldrb	r2, [r7, #11]
    d558:	68f9      	ldr	r1, [r7, #12]
    d55a:	4613      	mov	r3, r2
    d55c:	009b      	lsls	r3, r3, #2
    d55e:	4413      	add	r3, r2
    d560:	009b      	lsls	r3, r3, #2
    d562:	440b      	add	r3, r1
    d564:	3340      	adds	r3, #64	; 0x40
    d566:	681b      	ldr	r3, [r3, #0]
    d568:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    d56a:	697a      	ldr	r2, [r7, #20]
    d56c:	687b      	ldr	r3, [r7, #4]
    d56e:	4013      	ands	r3, r2
    d570:	617b      	str	r3, [r7, #20]
	return tmp;
    d572:	697b      	ldr	r3, [r7, #20]
}
    d574:	4618      	mov	r0, r3
    d576:	371c      	adds	r7, #28
    d578:	46bd      	mov	sp, r7
    d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d57e:	4770      	bx	lr

0000d580 <hri_oscctrl_get_STATUS_reg>:
{
    d580:	b480      	push	{r7}
    d582:	b085      	sub	sp, #20
    d584:	af00      	add	r7, sp, #0
    d586:	6078      	str	r0, [r7, #4]
    d588:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    d58a:	687b      	ldr	r3, [r7, #4]
    d58c:	691b      	ldr	r3, [r3, #16]
    d58e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    d590:	68fa      	ldr	r2, [r7, #12]
    d592:	683b      	ldr	r3, [r7, #0]
    d594:	4013      	ands	r3, r2
    d596:	60fb      	str	r3, [r7, #12]
	return tmp;
    d598:	68fb      	ldr	r3, [r7, #12]
}
    d59a:	4618      	mov	r0, r3
    d59c:	3714      	adds	r7, #20
    d59e:	46bd      	mov	sp, r7
    d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d5a4:	4770      	bx	lr

0000d5a6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    d5a6:	b480      	push	{r7}
    d5a8:	b085      	sub	sp, #20
    d5aa:	af00      	add	r7, sp, #0
    d5ac:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    d5ae:	687b      	ldr	r3, [r7, #4]
    d5b0:	f893 3020 	ldrb.w	r3, [r3, #32]
    d5b4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    d5b6:	7bfb      	ldrb	r3, [r7, #15]
    d5b8:	f003 0301 	and.w	r3, r3, #1
    d5bc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    d5be:	7bfb      	ldrb	r3, [r7, #15]
    d5c0:	2b00      	cmp	r3, #0
    d5c2:	bf14      	ite	ne
    d5c4:	2301      	movne	r3, #1
    d5c6:	2300      	moveq	r3, #0
    d5c8:	b2db      	uxtb	r3, r3
}
    d5ca:	4618      	mov	r0, r3
    d5cc:	3714      	adds	r7, #20
    d5ce:	46bd      	mov	sp, r7
    d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d5d4:	4770      	bx	lr

0000d5d6 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    d5d6:	b480      	push	{r7}
    d5d8:	b083      	sub	sp, #12
    d5da:	af00      	add	r7, sp, #0
    d5dc:	6078      	str	r0, [r7, #4]
    d5de:	460b      	mov	r3, r1
    d5e0:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    d5e2:	bf00      	nop
    d5e4:	687b      	ldr	r3, [r7, #4]
    d5e6:	789b      	ldrb	r3, [r3, #2]
    d5e8:	b2da      	uxtb	r2, r3
    d5ea:	78fb      	ldrb	r3, [r7, #3]
    d5ec:	4013      	ands	r3, r2
    d5ee:	b2db      	uxtb	r3, r3
    d5f0:	2b00      	cmp	r3, #0
    d5f2:	d1f7      	bne.n	d5e4 <hri_usb_wait_for_sync+0xe>
	};
}
    d5f4:	bf00      	nop
    d5f6:	370c      	adds	r7, #12
    d5f8:	46bd      	mov	sp, r7
    d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    d5fe:	4770      	bx	lr

0000d600 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    d600:	b480      	push	{r7}
    d602:	b083      	sub	sp, #12
    d604:	af00      	add	r7, sp, #0
    d606:	6078      	str	r0, [r7, #4]
    d608:	460b      	mov	r3, r1
    d60a:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    d60c:	687b      	ldr	r3, [r7, #4]
    d60e:	789b      	ldrb	r3, [r3, #2]
    d610:	b2da      	uxtb	r2, r3
    d612:	78fb      	ldrb	r3, [r7, #3]
    d614:	4013      	ands	r3, r2
    d616:	b2db      	uxtb	r3, r3
    d618:	2b00      	cmp	r3, #0
    d61a:	bf14      	ite	ne
    d61c:	2301      	movne	r3, #1
    d61e:	2300      	moveq	r3, #0
    d620:	b2db      	uxtb	r3, r3
}
    d622:	4618      	mov	r0, r3
    d624:	370c      	adds	r7, #12
    d626:	46bd      	mov	sp, r7
    d628:	f85d 7b04 	ldr.w	r7, [sp], #4
    d62c:	4770      	bx	lr

0000d62e <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    d62e:	b480      	push	{r7}
    d630:	b085      	sub	sp, #20
    d632:	af00      	add	r7, sp, #0
    d634:	6078      	str	r0, [r7, #4]
    d636:	460b      	mov	r3, r1
    d638:	70fb      	strb	r3, [r7, #3]
    d63a:	4613      	mov	r3, r2
    d63c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    d63e:	78fb      	ldrb	r3, [r7, #3]
    d640:	687a      	ldr	r2, [r7, #4]
    d642:	3308      	adds	r3, #8
    d644:	015b      	lsls	r3, r3, #5
    d646:	4413      	add	r3, r2
    d648:	3307      	adds	r3, #7
    d64a:	781b      	ldrb	r3, [r3, #0]
    d64c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    d64e:	7bfa      	ldrb	r2, [r7, #15]
    d650:	78bb      	ldrb	r3, [r7, #2]
    d652:	4013      	ands	r3, r2
    d654:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d656:	7bfb      	ldrb	r3, [r7, #15]
}
    d658:	4618      	mov	r0, r3
    d65a:	3714      	adds	r7, #20
    d65c:	46bd      	mov	sp, r7
    d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d662:	4770      	bx	lr

0000d664 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    d664:	b480      	push	{r7}
    d666:	b083      	sub	sp, #12
    d668:	af00      	add	r7, sp, #0
    d66a:	6078      	str	r0, [r7, #4]
    d66c:	460b      	mov	r3, r1
    d66e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    d670:	78fb      	ldrb	r3, [r7, #3]
    d672:	687a      	ldr	r2, [r7, #4]
    d674:	3308      	adds	r3, #8
    d676:	015b      	lsls	r3, r3, #5
    d678:	4413      	add	r3, r2
    d67a:	3307      	adds	r3, #7
    d67c:	781b      	ldrb	r3, [r3, #0]
    d67e:	b2db      	uxtb	r3, r3
}
    d680:	4618      	mov	r0, r3
    d682:	370c      	adds	r7, #12
    d684:	46bd      	mov	sp, r7
    d686:	f85d 7b04 	ldr.w	r7, [sp], #4
    d68a:	4770      	bx	lr

0000d68c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    d68c:	b480      	push	{r7}
    d68e:	b083      	sub	sp, #12
    d690:	af00      	add	r7, sp, #0
    d692:	6078      	str	r0, [r7, #4]
    d694:	460b      	mov	r3, r1
    d696:	70fb      	strb	r3, [r7, #3]
    d698:	4613      	mov	r3, r2
    d69a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    d69c:	78fb      	ldrb	r3, [r7, #3]
    d69e:	687a      	ldr	r2, [r7, #4]
    d6a0:	3308      	adds	r3, #8
    d6a2:	015b      	lsls	r3, r3, #5
    d6a4:	4413      	add	r3, r2
    d6a6:	3307      	adds	r3, #7
    d6a8:	78ba      	ldrb	r2, [r7, #2]
    d6aa:	701a      	strb	r2, [r3, #0]
}
    d6ac:	bf00      	nop
    d6ae:	370c      	adds	r7, #12
    d6b0:	46bd      	mov	sp, r7
    d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d6b6:	4770      	bx	lr

0000d6b8 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    d6b8:	b480      	push	{r7}
    d6ba:	b083      	sub	sp, #12
    d6bc:	af00      	add	r7, sp, #0
    d6be:	6078      	str	r0, [r7, #4]
    d6c0:	460b      	mov	r3, r1
    d6c2:	70fb      	strb	r3, [r7, #3]
    d6c4:	4613      	mov	r3, r2
    d6c6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    d6c8:	78fb      	ldrb	r3, [r7, #3]
    d6ca:	687a      	ldr	r2, [r7, #4]
    d6cc:	3308      	adds	r3, #8
    d6ce:	015b      	lsls	r3, r3, #5
    d6d0:	4413      	add	r3, r2
    d6d2:	3305      	adds	r3, #5
    d6d4:	78ba      	ldrb	r2, [r7, #2]
    d6d6:	701a      	strb	r2, [r3, #0]
}
    d6d8:	bf00      	nop
    d6da:	370c      	adds	r7, #12
    d6dc:	46bd      	mov	sp, r7
    d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
    d6e2:	4770      	bx	lr

0000d6e4 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    d6e4:	b480      	push	{r7}
    d6e6:	b083      	sub	sp, #12
    d6e8:	af00      	add	r7, sp, #0
    d6ea:	6078      	str	r0, [r7, #4]
    d6ec:	460b      	mov	r3, r1
    d6ee:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    d6f0:	78fb      	ldrb	r3, [r7, #3]
    d6f2:	687a      	ldr	r2, [r7, #4]
    d6f4:	3308      	adds	r3, #8
    d6f6:	015b      	lsls	r3, r3, #5
    d6f8:	4413      	add	r3, r2
    d6fa:	3306      	adds	r3, #6
    d6fc:	781b      	ldrb	r3, [r3, #0]
    d6fe:	b2db      	uxtb	r3, r3
}
    d700:	4618      	mov	r0, r3
    d702:	370c      	adds	r7, #12
    d704:	46bd      	mov	sp, r7
    d706:	f85d 7b04 	ldr.w	r7, [sp], #4
    d70a:	4770      	bx	lr

0000d70c <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    d70c:	b480      	push	{r7}
    d70e:	b083      	sub	sp, #12
    d710:	af00      	add	r7, sp, #0
    d712:	6078      	str	r0, [r7, #4]
    d714:	460b      	mov	r3, r1
    d716:	70fb      	strb	r3, [r7, #3]
    d718:	4613      	mov	r3, r2
    d71a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    d71c:	78fb      	ldrb	r3, [r7, #3]
    d71e:	687a      	ldr	r2, [r7, #4]
    d720:	3308      	adds	r3, #8
    d722:	015b      	lsls	r3, r3, #5
    d724:	4413      	add	r3, r2
    d726:	3304      	adds	r3, #4
    d728:	78ba      	ldrb	r2, [r7, #2]
    d72a:	701a      	strb	r2, [r3, #0]
}
    d72c:	bf00      	nop
    d72e:	370c      	adds	r7, #12
    d730:	46bd      	mov	sp, r7
    d732:	f85d 7b04 	ldr.w	r7, [sp], #4
    d736:	4770      	bx	lr

0000d738 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    d738:	b480      	push	{r7}
    d73a:	b083      	sub	sp, #12
    d73c:	af00      	add	r7, sp, #0
    d73e:	6078      	str	r0, [r7, #4]
    d740:	460b      	mov	r3, r1
    d742:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    d744:	78fb      	ldrb	r3, [r7, #3]
    d746:	687a      	ldr	r2, [r7, #4]
    d748:	015b      	lsls	r3, r3, #5
    d74a:	4413      	add	r3, r2
    d74c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    d750:	2210      	movs	r2, #16
    d752:	701a      	strb	r2, [r3, #0]
}
    d754:	bf00      	nop
    d756:	370c      	adds	r7, #12
    d758:	46bd      	mov	sp, r7
    d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d75e:	4770      	bx	lr

0000d760 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    d760:	b480      	push	{r7}
    d762:	b083      	sub	sp, #12
    d764:	af00      	add	r7, sp, #0
    d766:	6078      	str	r0, [r7, #4]
    d768:	460b      	mov	r3, r1
    d76a:	70fb      	strb	r3, [r7, #3]
    d76c:	4613      	mov	r3, r2
    d76e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    d770:	78fb      	ldrb	r3, [r7, #3]
    d772:	687a      	ldr	r2, [r7, #4]
    d774:	015b      	lsls	r3, r3, #5
    d776:	4413      	add	r3, r2
    d778:	f203 1309 	addw	r3, r3, #265	; 0x109
    d77c:	78ba      	ldrb	r2, [r7, #2]
    d77e:	701a      	strb	r2, [r3, #0]
}
    d780:	bf00      	nop
    d782:	370c      	adds	r7, #12
    d784:	46bd      	mov	sp, r7
    d786:	f85d 7b04 	ldr.w	r7, [sp], #4
    d78a:	4770      	bx	lr

0000d78c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    d78c:	b480      	push	{r7}
    d78e:	b083      	sub	sp, #12
    d790:	af00      	add	r7, sp, #0
    d792:	6078      	str	r0, [r7, #4]
    d794:	460b      	mov	r3, r1
    d796:	70fb      	strb	r3, [r7, #3]
    d798:	4613      	mov	r3, r2
    d79a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    d79c:	78fb      	ldrb	r3, [r7, #3]
    d79e:	687a      	ldr	r2, [r7, #4]
    d7a0:	015b      	lsls	r3, r3, #5
    d7a2:	4413      	add	r3, r2
    d7a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    d7a8:	78ba      	ldrb	r2, [r7, #2]
    d7aa:	701a      	strb	r2, [r3, #0]
}
    d7ac:	bf00      	nop
    d7ae:	370c      	adds	r7, #12
    d7b0:	46bd      	mov	sp, r7
    d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d7b6:	4770      	bx	lr

0000d7b8 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    d7b8:	b480      	push	{r7}
    d7ba:	b085      	sub	sp, #20
    d7bc:	af00      	add	r7, sp, #0
    d7be:	6078      	str	r0, [r7, #4]
    d7c0:	460b      	mov	r3, r1
    d7c2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    d7c4:	78fb      	ldrb	r3, [r7, #3]
    d7c6:	687a      	ldr	r2, [r7, #4]
    d7c8:	3308      	adds	r3, #8
    d7ca:	015b      	lsls	r3, r3, #5
    d7cc:	4413      	add	r3, r2
    d7ce:	781b      	ldrb	r3, [r3, #0]
    d7d0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    d7d2:	7bfb      	ldrb	r3, [r7, #15]
    d7d4:	f003 0307 	and.w	r3, r3, #7
    d7d8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d7da:	7bfb      	ldrb	r3, [r7, #15]
}
    d7dc:	4618      	mov	r0, r3
    d7de:	3714      	adds	r7, #20
    d7e0:	46bd      	mov	sp, r7
    d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d7e6:	4770      	bx	lr

0000d7e8 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    d7e8:	b480      	push	{r7}
    d7ea:	b085      	sub	sp, #20
    d7ec:	af00      	add	r7, sp, #0
    d7ee:	6078      	str	r0, [r7, #4]
    d7f0:	460b      	mov	r3, r1
    d7f2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    d7f4:	78fb      	ldrb	r3, [r7, #3]
    d7f6:	687a      	ldr	r2, [r7, #4]
    d7f8:	3308      	adds	r3, #8
    d7fa:	015b      	lsls	r3, r3, #5
    d7fc:	4413      	add	r3, r2
    d7fe:	781b      	ldrb	r3, [r3, #0]
    d800:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    d802:	7bfb      	ldrb	r3, [r7, #15]
    d804:	091b      	lsrs	r3, r3, #4
    d806:	b2db      	uxtb	r3, r3
    d808:	f003 0307 	and.w	r3, r3, #7
    d80c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d80e:	7bfb      	ldrb	r3, [r7, #15]
}
    d810:	4618      	mov	r0, r3
    d812:	3714      	adds	r7, #20
    d814:	46bd      	mov	sp, r7
    d816:	f85d 7b04 	ldr.w	r7, [sp], #4
    d81a:	4770      	bx	lr

0000d81c <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    d81c:	b480      	push	{r7}
    d81e:	b083      	sub	sp, #12
    d820:	af00      	add	r7, sp, #0
    d822:	6078      	str	r0, [r7, #4]
    d824:	460b      	mov	r3, r1
    d826:	70fb      	strb	r3, [r7, #3]
    d828:	4613      	mov	r3, r2
    d82a:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    d82c:	78fb      	ldrb	r3, [r7, #3]
    d82e:	687a      	ldr	r2, [r7, #4]
    d830:	3308      	adds	r3, #8
    d832:	015b      	lsls	r3, r3, #5
    d834:	4413      	add	r3, r2
    d836:	78ba      	ldrb	r2, [r7, #2]
    d838:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    d83a:	bf00      	nop
    d83c:	370c      	adds	r7, #12
    d83e:	46bd      	mov	sp, r7
    d840:	f85d 7b04 	ldr.w	r7, [sp], #4
    d844:	4770      	bx	lr

0000d846 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    d846:	b480      	push	{r7}
    d848:	b083      	sub	sp, #12
    d84a:	af00      	add	r7, sp, #0
    d84c:	6078      	str	r0, [r7, #4]
    d84e:	460b      	mov	r3, r1
    d850:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    d852:	78fb      	ldrb	r3, [r7, #3]
    d854:	687a      	ldr	r2, [r7, #4]
    d856:	3308      	adds	r3, #8
    d858:	015b      	lsls	r3, r3, #5
    d85a:	4413      	add	r3, r2
    d85c:	781b      	ldrb	r3, [r3, #0]
    d85e:	b2db      	uxtb	r3, r3
}
    d860:	4618      	mov	r0, r3
    d862:	370c      	adds	r7, #12
    d864:	46bd      	mov	sp, r7
    d866:	f85d 7b04 	ldr.w	r7, [sp], #4
    d86a:	4770      	bx	lr

0000d86c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    d86c:	b480      	push	{r7}
    d86e:	b083      	sub	sp, #12
    d870:	af00      	add	r7, sp, #0
    d872:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    d874:	687b      	ldr	r3, [r7, #4]
    d876:	8b9b      	ldrh	r3, [r3, #28]
    d878:	b29b      	uxth	r3, r3
}
    d87a:	4618      	mov	r0, r3
    d87c:	370c      	adds	r7, #12
    d87e:	46bd      	mov	sp, r7
    d880:	f85d 7b04 	ldr.w	r7, [sp], #4
    d884:	4770      	bx	lr

0000d886 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    d886:	b480      	push	{r7}
    d888:	b083      	sub	sp, #12
    d88a:	af00      	add	r7, sp, #0
    d88c:	6078      	str	r0, [r7, #4]
    d88e:	460b      	mov	r3, r1
    d890:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    d892:	687b      	ldr	r3, [r7, #4]
    d894:	887a      	ldrh	r2, [r7, #2]
    d896:	839a      	strh	r2, [r3, #28]
}
    d898:	bf00      	nop
    d89a:	370c      	adds	r7, #12
    d89c:	46bd      	mov	sp, r7
    d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8a2:	4770      	bx	lr

0000d8a4 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    d8a4:	b480      	push	{r7}
    d8a6:	b083      	sub	sp, #12
    d8a8:	af00      	add	r7, sp, #0
    d8aa:	6078      	str	r0, [r7, #4]
    d8ac:	460b      	mov	r3, r1
    d8ae:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    d8b0:	687b      	ldr	r3, [r7, #4]
    d8b2:	887a      	ldrh	r2, [r7, #2]
    d8b4:	831a      	strh	r2, [r3, #24]
}
    d8b6:	bf00      	nop
    d8b8:	370c      	adds	r7, #12
    d8ba:	46bd      	mov	sp, r7
    d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8c0:	4770      	bx	lr

0000d8c2 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    d8c2:	b480      	push	{r7}
    d8c4:	b083      	sub	sp, #12
    d8c6:	af00      	add	r7, sp, #0
    d8c8:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    d8ca:	687b      	ldr	r3, [r7, #4]
    d8cc:	8b1b      	ldrh	r3, [r3, #24]
    d8ce:	b29b      	uxth	r3, r3
}
    d8d0:	4618      	mov	r0, r3
    d8d2:	370c      	adds	r7, #12
    d8d4:	46bd      	mov	sp, r7
    d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8da:	4770      	bx	lr

0000d8dc <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    d8dc:	b480      	push	{r7}
    d8de:	b083      	sub	sp, #12
    d8e0:	af00      	add	r7, sp, #0
    d8e2:	6078      	str	r0, [r7, #4]
    d8e4:	460b      	mov	r3, r1
    d8e6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    d8e8:	687b      	ldr	r3, [r7, #4]
    d8ea:	887a      	ldrh	r2, [r7, #2]
    d8ec:	829a      	strh	r2, [r3, #20]
}
    d8ee:	bf00      	nop
    d8f0:	370c      	adds	r7, #12
    d8f2:	46bd      	mov	sp, r7
    d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8f8:	4770      	bx	lr

0000d8fa <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    d8fa:	b480      	push	{r7}
    d8fc:	b085      	sub	sp, #20
    d8fe:	af00      	add	r7, sp, #0
    d900:	6078      	str	r0, [r7, #4]
    d902:	460b      	mov	r3, r1
    d904:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    d906:	687b      	ldr	r3, [r7, #4]
    d908:	789b      	ldrb	r3, [r3, #2]
    d90a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    d90c:	7bfa      	ldrb	r2, [r7, #15]
    d90e:	78fb      	ldrb	r3, [r7, #3]
    d910:	4013      	ands	r3, r2
    d912:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d914:	7bfb      	ldrb	r3, [r7, #15]
}
    d916:	4618      	mov	r0, r3
    d918:	3714      	adds	r7, #20
    d91a:	46bd      	mov	sp, r7
    d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d920:	4770      	bx	lr
	...

0000d924 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    d924:	b580      	push	{r7, lr}
    d926:	b082      	sub	sp, #8
    d928:	af00      	add	r7, sp, #0
    d92a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    d92c:	687b      	ldr	r3, [r7, #4]
    d92e:	781b      	ldrb	r3, [r3, #0]
    d930:	b2db      	uxtb	r3, r3
    d932:	f023 0302 	bic.w	r3, r3, #2
    d936:	b2da      	uxtb	r2, r3
    d938:	687b      	ldr	r3, [r7, #4]
    d93a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    d93c:	2103      	movs	r1, #3
    d93e:	6878      	ldr	r0, [r7, #4]
    d940:	4b02      	ldr	r3, [pc, #8]	; (d94c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    d942:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    d944:	bf00      	nop
    d946:	3708      	adds	r7, #8
    d948:	46bd      	mov	sp, r7
    d94a:	bd80      	pop	{r7, pc}
    d94c:	0000d5d7 	.word	0x0000d5d7

0000d950 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    d950:	b580      	push	{r7, lr}
    d952:	b084      	sub	sp, #16
    d954:	af00      	add	r7, sp, #0
    d956:	6078      	str	r0, [r7, #4]
    d958:	460b      	mov	r3, r1
    d95a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    d95c:	2103      	movs	r1, #3
    d95e:	6878      	ldr	r0, [r7, #4]
    d960:	4b06      	ldr	r3, [pc, #24]	; (d97c <hri_usb_get_CTRLA_reg+0x2c>)
    d962:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    d964:	687b      	ldr	r3, [r7, #4]
    d966:	781b      	ldrb	r3, [r3, #0]
    d968:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    d96a:	7bfa      	ldrb	r2, [r7, #15]
    d96c:	78fb      	ldrb	r3, [r7, #3]
    d96e:	4013      	ands	r3, r2
    d970:	73fb      	strb	r3, [r7, #15]
	return tmp;
    d972:	7bfb      	ldrb	r3, [r7, #15]
}
    d974:	4618      	mov	r0, r3
    d976:	3710      	adds	r7, #16
    d978:	46bd      	mov	sp, r7
    d97a:	bd80      	pop	{r7, pc}
    d97c:	0000d5d7 	.word	0x0000d5d7

0000d980 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    d980:	b580      	push	{r7, lr}
    d982:	b082      	sub	sp, #8
    d984:	af00      	add	r7, sp, #0
    d986:	6078      	str	r0, [r7, #4]
    d988:	460b      	mov	r3, r1
    d98a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    d98c:	687b      	ldr	r3, [r7, #4]
    d98e:	78fa      	ldrb	r2, [r7, #3]
    d990:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    d992:	2103      	movs	r1, #3
    d994:	6878      	ldr	r0, [r7, #4]
    d996:	4b03      	ldr	r3, [pc, #12]	; (d9a4 <hri_usb_write_CTRLA_reg+0x24>)
    d998:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    d99a:	bf00      	nop
    d99c:	3708      	adds	r7, #8
    d99e:	46bd      	mov	sp, r7
    d9a0:	bd80      	pop	{r7, pc}
    d9a2:	bf00      	nop
    d9a4:	0000d5d7 	.word	0x0000d5d7

0000d9a8 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    d9a8:	b580      	push	{r7, lr}
    d9aa:	b082      	sub	sp, #8
    d9ac:	af00      	add	r7, sp, #0
    d9ae:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    d9b0:	2103      	movs	r1, #3
    d9b2:	6878      	ldr	r0, [r7, #4]
    d9b4:	4b04      	ldr	r3, [pc, #16]	; (d9c8 <hri_usb_read_CTRLA_reg+0x20>)
    d9b6:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    d9b8:	687b      	ldr	r3, [r7, #4]
    d9ba:	781b      	ldrb	r3, [r3, #0]
    d9bc:	b2db      	uxtb	r3, r3
}
    d9be:	4618      	mov	r0, r3
    d9c0:	3708      	adds	r7, #8
    d9c2:	46bd      	mov	sp, r7
    d9c4:	bd80      	pop	{r7, pc}
    d9c6:	bf00      	nop
    d9c8:	0000d5d7 	.word	0x0000d5d7

0000d9cc <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    d9cc:	b480      	push	{r7}
    d9ce:	b083      	sub	sp, #12
    d9d0:	af00      	add	r7, sp, #0
    d9d2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    d9d4:	687b      	ldr	r3, [r7, #4]
    d9d6:	891b      	ldrh	r3, [r3, #8]
    d9d8:	b29b      	uxth	r3, r3
    d9da:	f023 0301 	bic.w	r3, r3, #1
    d9de:	b29a      	uxth	r2, r3
    d9e0:	687b      	ldr	r3, [r7, #4]
    d9e2:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    d9e4:	bf00      	nop
    d9e6:	370c      	adds	r7, #12
    d9e8:	46bd      	mov	sp, r7
    d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9ee:	4770      	bx	lr

0000d9f0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    d9f0:	b480      	push	{r7}
    d9f2:	b083      	sub	sp, #12
    d9f4:	af00      	add	r7, sp, #0
    d9f6:	6078      	str	r0, [r7, #4]
    d9f8:	460b      	mov	r3, r1
    d9fa:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    d9fc:	687b      	ldr	r3, [r7, #4]
    d9fe:	887a      	ldrh	r2, [r7, #2]
    da00:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    da02:	bf00      	nop
    da04:	370c      	adds	r7, #12
    da06:	46bd      	mov	sp, r7
    da08:	f85d 7b04 	ldr.w	r7, [sp], #4
    da0c:	4770      	bx	lr

0000da0e <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    da0e:	b480      	push	{r7}
    da10:	b083      	sub	sp, #12
    da12:	af00      	add	r7, sp, #0
    da14:	6078      	str	r0, [r7, #4]
    da16:	460b      	mov	r3, r1
    da18:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    da1a:	687b      	ldr	r3, [r7, #4]
    da1c:	78fa      	ldrb	r2, [r7, #3]
    da1e:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    da20:	bf00      	nop
    da22:	370c      	adds	r7, #12
    da24:	46bd      	mov	sp, r7
    da26:	f85d 7b04 	ldr.w	r7, [sp], #4
    da2a:	4770      	bx	lr

0000da2c <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    da2c:	b480      	push	{r7}
    da2e:	b083      	sub	sp, #12
    da30:	af00      	add	r7, sp, #0
    da32:	6078      	str	r0, [r7, #4]
    da34:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    da36:	687b      	ldr	r3, [r7, #4]
    da38:	683a      	ldr	r2, [r7, #0]
    da3a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    da3c:	bf00      	nop
    da3e:	370c      	adds	r7, #12
    da40:	46bd      	mov	sp, r7
    da42:	f85d 7b04 	ldr.w	r7, [sp], #4
    da46:	4770      	bx	lr

0000da48 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    da48:	b480      	push	{r7}
    da4a:	b083      	sub	sp, #12
    da4c:	af00      	add	r7, sp, #0
    da4e:	6078      	str	r0, [r7, #4]
    da50:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    da52:	2300      	movs	r3, #0
}
    da54:	4618      	mov	r0, r3
    da56:	370c      	adds	r7, #12
    da58:	46bd      	mov	sp, r7
    da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    da5e:	4770      	bx	lr

0000da60 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    da60:	b480      	push	{r7}
    da62:	b085      	sub	sp, #20
    da64:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    da66:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    da6a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    da6c:	4b28      	ldr	r3, [pc, #160]	; (db10 <_usb_load_calib+0xb0>)
    da6e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    da70:	f003 031f 	and.w	r3, r3, #31
    da74:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    da76:	4b26      	ldr	r3, [pc, #152]	; (db10 <_usb_load_calib+0xb0>)
    da78:	681b      	ldr	r3, [r3, #0]
    da7a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    da7c:	f003 031f 	and.w	r3, r3, #31
    da80:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    da82:	4b23      	ldr	r3, [pc, #140]	; (db10 <_usb_load_calib+0xb0>)
    da84:	681b      	ldr	r3, [r3, #0]
    da86:	0a9b      	lsrs	r3, r3, #10
    da88:	f003 0307 	and.w	r3, r3, #7
    da8c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    da8e:	68fb      	ldr	r3, [r7, #12]
    da90:	2b00      	cmp	r3, #0
    da92:	d002      	beq.n	da9a <_usb_load_calib+0x3a>
    da94:	68fb      	ldr	r3, [r7, #12]
    da96:	2b1f      	cmp	r3, #31
    da98:	d101      	bne.n	da9e <_usb_load_calib+0x3e>
		pad_transn = 9;
    da9a:	2309      	movs	r3, #9
    da9c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    da9e:	68bb      	ldr	r3, [r7, #8]
    daa0:	2b00      	cmp	r3, #0
    daa2:	d002      	beq.n	daaa <_usb_load_calib+0x4a>
    daa4:	68bb      	ldr	r3, [r7, #8]
    daa6:	2b1f      	cmp	r3, #31
    daa8:	d101      	bne.n	daae <_usb_load_calib+0x4e>
		pad_transp = 25;
    daaa:	2319      	movs	r3, #25
    daac:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    daae:	687b      	ldr	r3, [r7, #4]
    dab0:	2b00      	cmp	r3, #0
    dab2:	d002      	beq.n	daba <_usb_load_calib+0x5a>
    dab4:	687b      	ldr	r3, [r7, #4]
    dab6:	2b07      	cmp	r3, #7
    dab8:	d101      	bne.n	dabe <_usb_load_calib+0x5e>
		pad_trim = 6;
    daba:	2306      	movs	r3, #6
    dabc:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    dabe:	68fb      	ldr	r3, [r7, #12]
    dac0:	b29b      	uxth	r3, r3
    dac2:	019b      	lsls	r3, r3, #6
    dac4:	b29b      	uxth	r3, r3
    dac6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    daca:	b29a      	uxth	r2, r3
    dacc:	68bb      	ldr	r3, [r7, #8]
    dace:	b29b      	uxth	r3, r3
    dad0:	f003 031f 	and.w	r3, r3, #31
    dad4:	b29b      	uxth	r3, r3
    dad6:	4313      	orrs	r3, r2
    dad8:	b29a      	uxth	r2, r3
    dada:	687b      	ldr	r3, [r7, #4]
    dadc:	b29b      	uxth	r3, r3
    dade:	031b      	lsls	r3, r3, #12
    dae0:	b29b      	uxth	r3, r3
    dae2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    dae6:	b29b      	uxth	r3, r3
    dae8:	4313      	orrs	r3, r2
    daea:	b29a      	uxth	r2, r3
    daec:	683b      	ldr	r3, [r7, #0]
    daee:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    daf0:	683a      	ldr	r2, [r7, #0]
    daf2:	78d3      	ldrb	r3, [r2, #3]
    daf4:	f043 0303 	orr.w	r3, r3, #3
    daf8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    dafa:	683a      	ldr	r2, [r7, #0]
    dafc:	78d3      	ldrb	r3, [r2, #3]
    dafe:	f043 030c 	orr.w	r3, r3, #12
    db02:	70d3      	strb	r3, [r2, #3]
}
    db04:	bf00      	nop
    db06:	3714      	adds	r7, #20
    db08:	46bd      	mov	sp, r7
    db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    db0e:	4770      	bx	lr
    db10:	00800084 	.word	0x00800084

0000db14 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    db14:	b580      	push	{r7, lr}
    db16:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    db18:	bf00      	nop
    db1a:	2203      	movs	r2, #3
    db1c:	2100      	movs	r1, #0
    db1e:	4804      	ldr	r0, [pc, #16]	; (db30 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    db20:	4b04      	ldr	r3, [pc, #16]	; (db34 <_usb_d_dev_wait_dpll_rdy+0x20>)
    db22:	4798      	blx	r3
    db24:	4603      	mov	r3, r0
    db26:	2b03      	cmp	r3, #3
    db28:	d1f7      	bne.n	db1a <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    db2a:	bf00      	nop
    db2c:	bd80      	pop	{r7, pc}
    db2e:	bf00      	nop
    db30:	40001000 	.word	0x40001000
    db34:	0000d549 	.word	0x0000d549

0000db38 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    db38:	b580      	push	{r7, lr}
    db3a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    db3c:	480e      	ldr	r0, [pc, #56]	; (db78 <_usb_d_dev_wait_dfll_rdy+0x40>)
    db3e:	4b0f      	ldr	r3, [pc, #60]	; (db7c <_usb_d_dev_wait_dfll_rdy+0x44>)
    db40:	4798      	blx	r3
    db42:	4603      	mov	r3, r0
    db44:	2b00      	cmp	r3, #0
    db46:	d00a      	beq.n	db5e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    db48:	bf00      	nop
    db4a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    db4e:	480a      	ldr	r0, [pc, #40]	; (db78 <_usb_d_dev_wait_dfll_rdy+0x40>)
    db50:	4b0b      	ldr	r3, [pc, #44]	; (db80 <_usb_d_dev_wait_dfll_rdy+0x48>)
    db52:	4798      	blx	r3
    db54:	4603      	mov	r3, r0
    db56:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    db5a:	d1f6      	bne.n	db4a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    db5c:	e009      	b.n	db72 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    db5e:	bf00      	nop
    db60:	f44f 7180 	mov.w	r1, #256	; 0x100
    db64:	4804      	ldr	r0, [pc, #16]	; (db78 <_usb_d_dev_wait_dfll_rdy+0x40>)
    db66:	4b06      	ldr	r3, [pc, #24]	; (db80 <_usb_d_dev_wait_dfll_rdy+0x48>)
    db68:	4798      	blx	r3
    db6a:	4603      	mov	r3, r0
    db6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    db70:	d1f6      	bne.n	db60 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    db72:	bf00      	nop
    db74:	bd80      	pop	{r7, pc}
    db76:	bf00      	nop
    db78:	40001000 	.word	0x40001000
    db7c:	0000d5a7 	.word	0x0000d5a7
    db80:	0000d581 	.word	0x0000d581

0000db84 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    db84:	b580      	push	{r7, lr}
    db86:	b082      	sub	sp, #8
    db88:	af00      	add	r7, sp, #0
    db8a:	4603      	mov	r3, r0
    db8c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    db8e:	79fb      	ldrb	r3, [r7, #7]
    db90:	2b00      	cmp	r3, #0
    db92:	d102      	bne.n	db9a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    db94:	4b05      	ldr	r3, [pc, #20]	; (dbac <_usb_d_dev_wait_clk_rdy+0x28>)
    db96:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    db98:	e004      	b.n	dba4 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    db9a:	79fb      	ldrb	r3, [r7, #7]
    db9c:	2b01      	cmp	r3, #1
    db9e:	d101      	bne.n	dba4 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    dba0:	4b03      	ldr	r3, [pc, #12]	; (dbb0 <_usb_d_dev_wait_clk_rdy+0x2c>)
    dba2:	4798      	blx	r3
}
    dba4:	bf00      	nop
    dba6:	3708      	adds	r7, #8
    dba8:	46bd      	mov	sp, r7
    dbaa:	bd80      	pop	{r7, pc}
    dbac:	0000db39 	.word	0x0000db39
    dbb0:	0000db15 	.word	0x0000db15

0000dbb4 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    dbb4:	b580      	push	{r7, lr}
    dbb6:	b082      	sub	sp, #8
    dbb8:	af00      	add	r7, sp, #0
    dbba:	4603      	mov	r3, r0
    dbbc:	6039      	str	r1, [r7, #0]
    dbbe:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    dbc0:	683b      	ldr	r3, [r7, #0]
    dbc2:	b2da      	uxtb	r2, r3
    dbc4:	79fb      	ldrb	r3, [r7, #7]
    dbc6:	4619      	mov	r1, r3
    dbc8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dbcc:	4b02      	ldr	r3, [pc, #8]	; (dbd8 <_usbd_ep_int_ack+0x24>)
    dbce:	4798      	blx	r3
}
    dbd0:	bf00      	nop
    dbd2:	3708      	adds	r7, #8
    dbd4:	46bd      	mov	sp, r7
    dbd6:	bd80      	pop	{r7, pc}
    dbd8:	0000d68d 	.word	0x0000d68d

0000dbdc <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    dbdc:	b580      	push	{r7, lr}
    dbde:	b082      	sub	sp, #8
    dbe0:	af00      	add	r7, sp, #0
    dbe2:	4603      	mov	r3, r0
    dbe4:	6039      	str	r1, [r7, #0]
    dbe6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    dbe8:	683b      	ldr	r3, [r7, #0]
    dbea:	b2da      	uxtb	r2, r3
    dbec:	79fb      	ldrb	r3, [r7, #7]
    dbee:	4619      	mov	r1, r3
    dbf0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dbf4:	4b02      	ldr	r3, [pc, #8]	; (dc00 <_usbd_ep_int_en+0x24>)
    dbf6:	4798      	blx	r3
}
    dbf8:	bf00      	nop
    dbfa:	3708      	adds	r7, #8
    dbfc:	46bd      	mov	sp, r7
    dbfe:	bd80      	pop	{r7, pc}
    dc00:	0000d761 	.word	0x0000d761

0000dc04 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    dc04:	b580      	push	{r7, lr}
    dc06:	b082      	sub	sp, #8
    dc08:	af00      	add	r7, sp, #0
    dc0a:	4603      	mov	r3, r0
    dc0c:	6039      	str	r1, [r7, #0]
    dc0e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    dc10:	683b      	ldr	r3, [r7, #0]
    dc12:	b2da      	uxtb	r2, r3
    dc14:	79fb      	ldrb	r3, [r7, #7]
    dc16:	4619      	mov	r1, r3
    dc18:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dc1c:	4b02      	ldr	r3, [pc, #8]	; (dc28 <_usbd_ep_int_dis+0x24>)
    dc1e:	4798      	blx	r3
}
    dc20:	bf00      	nop
    dc22:	3708      	adds	r7, #8
    dc24:	46bd      	mov	sp, r7
    dc26:	bd80      	pop	{r7, pc}
    dc28:	0000d78d 	.word	0x0000d78d

0000dc2c <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    dc2c:	b580      	push	{r7, lr}
    dc2e:	b082      	sub	sp, #8
    dc30:	af00      	add	r7, sp, #0
    dc32:	4603      	mov	r3, r0
    dc34:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    dc36:	79fb      	ldrb	r3, [r7, #7]
    dc38:	4619      	mov	r1, r3
    dc3a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dc3e:	4b06      	ldr	r3, [pc, #24]	; (dc58 <_usbd_ep_is_ctrl+0x2c>)
    dc40:	4798      	blx	r3
    dc42:	4603      	mov	r3, r0
    dc44:	2b11      	cmp	r3, #17
    dc46:	bf0c      	ite	eq
    dc48:	2301      	moveq	r3, #1
    dc4a:	2300      	movne	r3, #0
    dc4c:	b2db      	uxtb	r3, r3
}
    dc4e:	4618      	mov	r0, r3
    dc50:	3708      	adds	r7, #8
    dc52:	46bd      	mov	sp, r7
    dc54:	bd80      	pop	{r7, pc}
    dc56:	bf00      	nop
    dc58:	0000d847 	.word	0x0000d847

0000dc5c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    dc5c:	b580      	push	{r7, lr}
    dc5e:	b082      	sub	sp, #8
    dc60:	af00      	add	r7, sp, #0
    dc62:	4603      	mov	r3, r0
    dc64:	71fb      	strb	r3, [r7, #7]
    dc66:	460b      	mov	r3, r1
    dc68:	71bb      	strb	r3, [r7, #6]
    dc6a:	4613      	mov	r3, r2
    dc6c:	717b      	strb	r3, [r7, #5]
	if (st) {
    dc6e:	797b      	ldrb	r3, [r7, #5]
    dc70:	2b00      	cmp	r3, #0
    dc72:	d00b      	beq.n	dc8c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    dc74:	79bb      	ldrb	r3, [r7, #6]
    dc76:	2210      	movs	r2, #16
    dc78:	fa02 f303 	lsl.w	r3, r2, r3
    dc7c:	b2da      	uxtb	r2, r3
    dc7e:	79fb      	ldrb	r3, [r7, #7]
    dc80:	4619      	mov	r1, r3
    dc82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dc86:	4b09      	ldr	r3, [pc, #36]	; (dcac <_usbd_ep_set_stall+0x50>)
    dc88:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    dc8a:	e00a      	b.n	dca2 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    dc8c:	79bb      	ldrb	r3, [r7, #6]
    dc8e:	2210      	movs	r2, #16
    dc90:	fa02 f303 	lsl.w	r3, r2, r3
    dc94:	b2da      	uxtb	r2, r3
    dc96:	79fb      	ldrb	r3, [r7, #7]
    dc98:	4619      	mov	r1, r3
    dc9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    dc9e:	4b04      	ldr	r3, [pc, #16]	; (dcb0 <_usbd_ep_set_stall+0x54>)
    dca0:	4798      	blx	r3
}
    dca2:	bf00      	nop
    dca4:	3708      	adds	r7, #8
    dca6:	46bd      	mov	sp, r7
    dca8:	bd80      	pop	{r7, pc}
    dcaa:	bf00      	nop
    dcac:	0000d6b9 	.word	0x0000d6b9
    dcb0:	0000d70d 	.word	0x0000d70d

0000dcb4 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    dcb4:	b580      	push	{r7, lr}
    dcb6:	b084      	sub	sp, #16
    dcb8:	af00      	add	r7, sp, #0
    dcba:	4603      	mov	r3, r0
    dcbc:	460a      	mov	r2, r1
    dcbe:	71fb      	strb	r3, [r7, #7]
    dcc0:	4613      	mov	r3, r2
    dcc2:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    dcc4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    dcc8:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    dcca:	79fb      	ldrb	r3, [r7, #7]
    dccc:	4619      	mov	r1, r3
    dcce:	68f8      	ldr	r0, [r7, #12]
    dcd0:	4b08      	ldr	r3, [pc, #32]	; (dcf4 <_usbd_ep_is_stalled+0x40>)
    dcd2:	4798      	blx	r3
    dcd4:	4603      	mov	r3, r0
    dcd6:	4619      	mov	r1, r3
    dcd8:	79bb      	ldrb	r3, [r7, #6]
    dcda:	2210      	movs	r2, #16
    dcdc:	fa02 f303 	lsl.w	r3, r2, r3
    dce0:	400b      	ands	r3, r1
    dce2:	2b00      	cmp	r3, #0
    dce4:	bf14      	ite	ne
    dce6:	2301      	movne	r3, #1
    dce8:	2300      	moveq	r3, #0
    dcea:	b2db      	uxtb	r3, r3
}
    dcec:	4618      	mov	r0, r3
    dcee:	3710      	adds	r7, #16
    dcf0:	46bd      	mov	sp, r7
    dcf2:	bd80      	pop	{r7, pc}
    dcf4:	0000d6e5 	.word	0x0000d6e5

0000dcf8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    dcf8:	b580      	push	{r7, lr}
    dcfa:	b084      	sub	sp, #16
    dcfc:	af00      	add	r7, sp, #0
    dcfe:	4603      	mov	r3, r0
    dd00:	460a      	mov	r2, r1
    dd02:	71fb      	strb	r3, [r7, #7]
    dd04:	4613      	mov	r3, r2
    dd06:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    dd08:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    dd0c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    dd0e:	79fb      	ldrb	r3, [r7, #7]
    dd10:	4619      	mov	r1, r3
    dd12:	68f8      	ldr	r0, [r7, #12]
    dd14:	4b08      	ldr	r3, [pc, #32]	; (dd38 <_usbd_ep_is_stall_sent+0x40>)
    dd16:	4798      	blx	r3
    dd18:	4603      	mov	r3, r0
    dd1a:	4619      	mov	r1, r3
    dd1c:	79bb      	ldrb	r3, [r7, #6]
    dd1e:	2220      	movs	r2, #32
    dd20:	fa02 f303 	lsl.w	r3, r2, r3
    dd24:	400b      	ands	r3, r1
    dd26:	2b00      	cmp	r3, #0
    dd28:	bf14      	ite	ne
    dd2a:	2301      	movne	r3, #1
    dd2c:	2300      	moveq	r3, #0
    dd2e:	b2db      	uxtb	r3, r3
}
    dd30:	4618      	mov	r0, r3
    dd32:	3710      	adds	r7, #16
    dd34:	46bd      	mov	sp, r7
    dd36:	bd80      	pop	{r7, pc}
    dd38:	0000d665 	.word	0x0000d665

0000dd3c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    dd3c:	b580      	push	{r7, lr}
    dd3e:	b082      	sub	sp, #8
    dd40:	af00      	add	r7, sp, #0
    dd42:	4603      	mov	r3, r0
    dd44:	460a      	mov	r2, r1
    dd46:	71fb      	strb	r3, [r7, #7]
    dd48:	4613      	mov	r3, r2
    dd4a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    dd4c:	79bb      	ldrb	r3, [r7, #6]
    dd4e:	2220      	movs	r2, #32
    dd50:	409a      	lsls	r2, r3
    dd52:	79fb      	ldrb	r3, [r7, #7]
    dd54:	4611      	mov	r1, r2
    dd56:	4618      	mov	r0, r3
    dd58:	4b02      	ldr	r3, [pc, #8]	; (dd64 <_usbd_ep_ack_stall+0x28>)
    dd5a:	4798      	blx	r3
}
    dd5c:	bf00      	nop
    dd5e:	3708      	adds	r7, #8
    dd60:	46bd      	mov	sp, r7
    dd62:	bd80      	pop	{r7, pc}
    dd64:	0000dbb5 	.word	0x0000dbb5

0000dd68 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    dd68:	b580      	push	{r7, lr}
    dd6a:	b082      	sub	sp, #8
    dd6c:	af00      	add	r7, sp, #0
    dd6e:	4603      	mov	r3, r0
    dd70:	71fb      	strb	r3, [r7, #7]
    dd72:	460b      	mov	r3, r1
    dd74:	71bb      	strb	r3, [r7, #6]
    dd76:	4613      	mov	r3, r2
    dd78:	717b      	strb	r3, [r7, #5]
	if (en) {
    dd7a:	797b      	ldrb	r3, [r7, #5]
    dd7c:	2b00      	cmp	r3, #0
    dd7e:	d008      	beq.n	dd92 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    dd80:	79bb      	ldrb	r3, [r7, #6]
    dd82:	2220      	movs	r2, #32
    dd84:	409a      	lsls	r2, r3
    dd86:	79fb      	ldrb	r3, [r7, #7]
    dd88:	4611      	mov	r1, r2
    dd8a:	4618      	mov	r0, r3
    dd8c:	4b07      	ldr	r3, [pc, #28]	; (ddac <_usbd_ep_int_stall_en+0x44>)
    dd8e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    dd90:	e007      	b.n	dda2 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    dd92:	79bb      	ldrb	r3, [r7, #6]
    dd94:	2220      	movs	r2, #32
    dd96:	409a      	lsls	r2, r3
    dd98:	79fb      	ldrb	r3, [r7, #7]
    dd9a:	4611      	mov	r1, r2
    dd9c:	4618      	mov	r0, r3
    dd9e:	4b04      	ldr	r3, [pc, #16]	; (ddb0 <_usbd_ep_int_stall_en+0x48>)
    dda0:	4798      	blx	r3
}
    dda2:	bf00      	nop
    dda4:	3708      	adds	r7, #8
    dda6:	46bd      	mov	sp, r7
    dda8:	bd80      	pop	{r7, pc}
    ddaa:	bf00      	nop
    ddac:	0000dbdd 	.word	0x0000dbdd
    ddb0:	0000dc05 	.word	0x0000dc05

0000ddb4 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    ddb4:	b580      	push	{r7, lr}
    ddb6:	b082      	sub	sp, #8
    ddb8:	af00      	add	r7, sp, #0
    ddba:	4603      	mov	r3, r0
    ddbc:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    ddbe:	79fb      	ldrb	r3, [r7, #7]
    ddc0:	4619      	mov	r1, r3
    ddc2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ddc6:	4b03      	ldr	r3, [pc, #12]	; (ddd4 <_usbd_ep_stop_setup+0x20>)
    ddc8:	4798      	blx	r3
}
    ddca:	bf00      	nop
    ddcc:	3708      	adds	r7, #8
    ddce:	46bd      	mov	sp, r7
    ddd0:	bd80      	pop	{r7, pc}
    ddd2:	bf00      	nop
    ddd4:	0000d739 	.word	0x0000d739

0000ddd8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    ddd8:	b580      	push	{r7, lr}
    ddda:	b082      	sub	sp, #8
    dddc:	af00      	add	r7, sp, #0
    ddde:	4603      	mov	r3, r0
    dde0:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    dde2:	79fb      	ldrb	r3, [r7, #7]
    dde4:	2210      	movs	r2, #16
    dde6:	4619      	mov	r1, r3
    dde8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ddec:	4b05      	ldr	r3, [pc, #20]	; (de04 <_usbd_ep_is_setup+0x2c>)
    ddee:	4798      	blx	r3
    ddf0:	4603      	mov	r3, r0
    ddf2:	2b00      	cmp	r3, #0
    ddf4:	bf14      	ite	ne
    ddf6:	2301      	movne	r3, #1
    ddf8:	2300      	moveq	r3, #0
    ddfa:	b2db      	uxtb	r3, r3
}
    ddfc:	4618      	mov	r0, r3
    ddfe:	3708      	adds	r7, #8
    de00:	46bd      	mov	sp, r7
    de02:	bd80      	pop	{r7, pc}
    de04:	0000d62f 	.word	0x0000d62f

0000de08 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    de08:	b580      	push	{r7, lr}
    de0a:	b082      	sub	sp, #8
    de0c:	af00      	add	r7, sp, #0
    de0e:	4603      	mov	r3, r0
    de10:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    de12:	79fb      	ldrb	r3, [r7, #7]
    de14:	2110      	movs	r1, #16
    de16:	4618      	mov	r0, r3
    de18:	4b02      	ldr	r3, [pc, #8]	; (de24 <_usbd_ep_ack_setup+0x1c>)
    de1a:	4798      	blx	r3
}
    de1c:	bf00      	nop
    de1e:	3708      	adds	r7, #8
    de20:	46bd      	mov	sp, r7
    de22:	bd80      	pop	{r7, pc}
    de24:	0000dbb5 	.word	0x0000dbb5

0000de28 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    de28:	b580      	push	{r7, lr}
    de2a:	b082      	sub	sp, #8
    de2c:	af00      	add	r7, sp, #0
    de2e:	4603      	mov	r3, r0
    de30:	71fb      	strb	r3, [r7, #7]
    de32:	460b      	mov	r3, r1
    de34:	71bb      	strb	r3, [r7, #6]
    de36:	4613      	mov	r3, r2
    de38:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    de3a:	797b      	ldrb	r3, [r7, #5]
    de3c:	2b00      	cmp	r3, #0
    de3e:	d00b      	beq.n	de58 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    de40:	79bb      	ldrb	r3, [r7, #6]
    de42:	2201      	movs	r2, #1
    de44:	fa02 f303 	lsl.w	r3, r2, r3
    de48:	b2da      	uxtb	r2, r3
    de4a:	79fb      	ldrb	r3, [r7, #7]
    de4c:	4619      	mov	r1, r3
    de4e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    de52:	4b09      	ldr	r3, [pc, #36]	; (de78 <_usbd_ep_set_toggle+0x50>)
    de54:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    de56:	e00a      	b.n	de6e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    de58:	79bb      	ldrb	r3, [r7, #6]
    de5a:	2201      	movs	r2, #1
    de5c:	fa02 f303 	lsl.w	r3, r2, r3
    de60:	b2da      	uxtb	r2, r3
    de62:	79fb      	ldrb	r3, [r7, #7]
    de64:	4619      	mov	r1, r3
    de66:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    de6a:	4b04      	ldr	r3, [pc, #16]	; (de7c <_usbd_ep_set_toggle+0x54>)
    de6c:	4798      	blx	r3
}
    de6e:	bf00      	nop
    de70:	3708      	adds	r7, #8
    de72:	46bd      	mov	sp, r7
    de74:	bd80      	pop	{r7, pc}
    de76:	bf00      	nop
    de78:	0000d6b9 	.word	0x0000d6b9
    de7c:	0000d70d 	.word	0x0000d70d

0000de80 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    de80:	b580      	push	{r7, lr}
    de82:	b082      	sub	sp, #8
    de84:	af00      	add	r7, sp, #0
    de86:	4603      	mov	r3, r0
    de88:	460a      	mov	r2, r1
    de8a:	71fb      	strb	r3, [r7, #7]
    de8c:	4613      	mov	r3, r2
    de8e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    de90:	79bb      	ldrb	r3, [r7, #6]
    de92:	2201      	movs	r2, #1
    de94:	409a      	lsls	r2, r3
    de96:	79fb      	ldrb	r3, [r7, #7]
    de98:	4611      	mov	r1, r2
    de9a:	4618      	mov	r0, r3
    de9c:	4b02      	ldr	r3, [pc, #8]	; (dea8 <_usbd_ep_ack_io_cpt+0x28>)
    de9e:	4798      	blx	r3
}
    dea0:	bf00      	nop
    dea2:	3708      	adds	r7, #8
    dea4:	46bd      	mov	sp, r7
    dea6:	bd80      	pop	{r7, pc}
    dea8:	0000dbb5 	.word	0x0000dbb5

0000deac <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    deac:	b480      	push	{r7}
    deae:	b085      	sub	sp, #20
    deb0:	af00      	add	r7, sp, #0
    deb2:	4603      	mov	r3, r0
    deb4:	603a      	str	r2, [r7, #0]
    deb6:	71fb      	strb	r3, [r7, #7]
    deb8:	460b      	mov	r3, r1
    deba:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    debc:	79fa      	ldrb	r2, [r7, #7]
    debe:	79bb      	ldrb	r3, [r7, #6]
    dec0:	0052      	lsls	r2, r2, #1
    dec2:	4413      	add	r3, r2
    dec4:	011b      	lsls	r3, r3, #4
    dec6:	4a06      	ldr	r2, [pc, #24]	; (dee0 <_usbd_ep_set_buf+0x34>)
    dec8:	4413      	add	r3, r2
    deca:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    decc:	68fb      	ldr	r3, [r7, #12]
    dece:	683a      	ldr	r2, [r7, #0]
    ded0:	601a      	str	r2, [r3, #0]
}
    ded2:	bf00      	nop
    ded4:	3714      	adds	r7, #20
    ded6:	46bd      	mov	sp, r7
    ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
    dedc:	4770      	bx	lr
    dede:	bf00      	nop
    dee0:	20008bcc 	.word	0x20008bcc

0000dee4 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    dee4:	b480      	push	{r7}
    dee6:	b085      	sub	sp, #20
    dee8:	af00      	add	r7, sp, #0
    deea:	4603      	mov	r3, r0
    deec:	71fb      	strb	r3, [r7, #7]
    deee:	460b      	mov	r3, r1
    def0:	71bb      	strb	r3, [r7, #6]
    def2:	4613      	mov	r3, r2
    def4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    def6:	79fa      	ldrb	r2, [r7, #7]
    def8:	79bb      	ldrb	r3, [r7, #6]
    defa:	0052      	lsls	r2, r2, #1
    defc:	4413      	add	r3, r2
    defe:	011b      	lsls	r3, r3, #4
    df00:	4a08      	ldr	r2, [pc, #32]	; (df24 <_usbd_ep_set_in_count+0x40>)
    df02:	4413      	add	r3, r2
    df04:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    df06:	88bb      	ldrh	r3, [r7, #4]
    df08:	f3c3 030d 	ubfx	r3, r3, #0, #14
    df0c:	b299      	uxth	r1, r3
    df0e:	68fa      	ldr	r2, [r7, #12]
    df10:	6853      	ldr	r3, [r2, #4]
    df12:	f361 339b 	bfi	r3, r1, #14, #14
    df16:	6053      	str	r3, [r2, #4]
}
    df18:	bf00      	nop
    df1a:	3714      	adds	r7, #20
    df1c:	46bd      	mov	sp, r7
    df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    df22:	4770      	bx	lr
    df24:	20008bcc 	.word	0x20008bcc

0000df28 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    df28:	b480      	push	{r7}
    df2a:	b085      	sub	sp, #20
    df2c:	af00      	add	r7, sp, #0
    df2e:	4603      	mov	r3, r0
    df30:	71fb      	strb	r3, [r7, #7]
    df32:	460b      	mov	r3, r1
    df34:	71bb      	strb	r3, [r7, #6]
    df36:	4613      	mov	r3, r2
    df38:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    df3a:	79fa      	ldrb	r2, [r7, #7]
    df3c:	79bb      	ldrb	r3, [r7, #6]
    df3e:	0052      	lsls	r2, r2, #1
    df40:	4413      	add	r3, r2
    df42:	011b      	lsls	r3, r3, #4
    df44:	4a08      	ldr	r2, [pc, #32]	; (df68 <_usbd_ep_set_in_size+0x40>)
    df46:	4413      	add	r3, r2
    df48:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    df4a:	88bb      	ldrh	r3, [r7, #4]
    df4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    df50:	b299      	uxth	r1, r3
    df52:	68fa      	ldr	r2, [r7, #12]
    df54:	6853      	ldr	r3, [r2, #4]
    df56:	f361 030d 	bfi	r3, r1, #0, #14
    df5a:	6053      	str	r3, [r2, #4]
}
    df5c:	bf00      	nop
    df5e:	3714      	adds	r7, #20
    df60:	46bd      	mov	sp, r7
    df62:	f85d 7b04 	ldr.w	r7, [sp], #4
    df66:	4770      	bx	lr
    df68:	20008bcc 	.word	0x20008bcc

0000df6c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    df6c:	b480      	push	{r7}
    df6e:	b085      	sub	sp, #20
    df70:	af00      	add	r7, sp, #0
    df72:	4603      	mov	r3, r0
    df74:	71fb      	strb	r3, [r7, #7]
    df76:	460b      	mov	r3, r1
    df78:	71bb      	strb	r3, [r7, #6]
    df7a:	4613      	mov	r3, r2
    df7c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    df7e:	79fa      	ldrb	r2, [r7, #7]
    df80:	79bb      	ldrb	r3, [r7, #6]
    df82:	0052      	lsls	r2, r2, #1
    df84:	4413      	add	r3, r2
    df86:	011b      	lsls	r3, r3, #4
    df88:	4a08      	ldr	r2, [pc, #32]	; (dfac <_usbd_ep_set_out_count+0x40>)
    df8a:	4413      	add	r3, r2
    df8c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    df8e:	88bb      	ldrh	r3, [r7, #4]
    df90:	f3c3 030d 	ubfx	r3, r3, #0, #14
    df94:	b299      	uxth	r1, r3
    df96:	68fa      	ldr	r2, [r7, #12]
    df98:	6853      	ldr	r3, [r2, #4]
    df9a:	f361 030d 	bfi	r3, r1, #0, #14
    df9e:	6053      	str	r3, [r2, #4]
}
    dfa0:	bf00      	nop
    dfa2:	3714      	adds	r7, #20
    dfa4:	46bd      	mov	sp, r7
    dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfaa:	4770      	bx	lr
    dfac:	20008bcc 	.word	0x20008bcc

0000dfb0 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    dfb0:	b480      	push	{r7}
    dfb2:	b085      	sub	sp, #20
    dfb4:	af00      	add	r7, sp, #0
    dfb6:	4603      	mov	r3, r0
    dfb8:	71fb      	strb	r3, [r7, #7]
    dfba:	460b      	mov	r3, r1
    dfbc:	71bb      	strb	r3, [r7, #6]
    dfbe:	4613      	mov	r3, r2
    dfc0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    dfc2:	79fa      	ldrb	r2, [r7, #7]
    dfc4:	79bb      	ldrb	r3, [r7, #6]
    dfc6:	0052      	lsls	r2, r2, #1
    dfc8:	4413      	add	r3, r2
    dfca:	011b      	lsls	r3, r3, #4
    dfcc:	4a08      	ldr	r2, [pc, #32]	; (dff0 <_usbd_ep_set_out_size+0x40>)
    dfce:	4413      	add	r3, r2
    dfd0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    dfd2:	88bb      	ldrh	r3, [r7, #4]
    dfd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    dfd8:	b299      	uxth	r1, r3
    dfda:	68fa      	ldr	r2, [r7, #12]
    dfdc:	6853      	ldr	r3, [r2, #4]
    dfde:	f361 339b 	bfi	r3, r1, #14, #14
    dfe2:	6053      	str	r3, [r2, #4]
}
    dfe4:	bf00      	nop
    dfe6:	3714      	adds	r7, #20
    dfe8:	46bd      	mov	sp, r7
    dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfee:	4770      	bx	lr
    dff0:	20008bcc 	.word	0x20008bcc

0000dff4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    dff4:	b580      	push	{r7, lr}
    dff6:	b084      	sub	sp, #16
    dff8:	af00      	add	r7, sp, #0
    dffa:	60ba      	str	r2, [r7, #8]
    dffc:	607b      	str	r3, [r7, #4]
    dffe:	4603      	mov	r3, r0
    e000:	73fb      	strb	r3, [r7, #15]
    e002:	460b      	mov	r3, r1
    e004:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    e006:	68bb      	ldr	r3, [r7, #8]
    e008:	b29a      	uxth	r2, r3
    e00a:	7bb9      	ldrb	r1, [r7, #14]
    e00c:	7bfb      	ldrb	r3, [r7, #15]
    e00e:	4618      	mov	r0, r3
    e010:	4b06      	ldr	r3, [pc, #24]	; (e02c <_usbd_ep_set_in_trans+0x38>)
    e012:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    e014:	687b      	ldr	r3, [r7, #4]
    e016:	b29a      	uxth	r2, r3
    e018:	7bb9      	ldrb	r1, [r7, #14]
    e01a:	7bfb      	ldrb	r3, [r7, #15]
    e01c:	4618      	mov	r0, r3
    e01e:	4b04      	ldr	r3, [pc, #16]	; (e030 <_usbd_ep_set_in_trans+0x3c>)
    e020:	4798      	blx	r3
}
    e022:	bf00      	nop
    e024:	3710      	adds	r7, #16
    e026:	46bd      	mov	sp, r7
    e028:	bd80      	pop	{r7, pc}
    e02a:	bf00      	nop
    e02c:	0000df29 	.word	0x0000df29
    e030:	0000dee5 	.word	0x0000dee5

0000e034 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    e034:	b580      	push	{r7, lr}
    e036:	b084      	sub	sp, #16
    e038:	af00      	add	r7, sp, #0
    e03a:	60ba      	str	r2, [r7, #8]
    e03c:	607b      	str	r3, [r7, #4]
    e03e:	4603      	mov	r3, r0
    e040:	73fb      	strb	r3, [r7, #15]
    e042:	460b      	mov	r3, r1
    e044:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    e046:	68bb      	ldr	r3, [r7, #8]
    e048:	b29a      	uxth	r2, r3
    e04a:	7bb9      	ldrb	r1, [r7, #14]
    e04c:	7bfb      	ldrb	r3, [r7, #15]
    e04e:	4618      	mov	r0, r3
    e050:	4b06      	ldr	r3, [pc, #24]	; (e06c <_usbd_ep_set_out_trans+0x38>)
    e052:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    e054:	687b      	ldr	r3, [r7, #4]
    e056:	b29a      	uxth	r2, r3
    e058:	7bb9      	ldrb	r1, [r7, #14]
    e05a:	7bfb      	ldrb	r3, [r7, #15]
    e05c:	4618      	mov	r0, r3
    e05e:	4b04      	ldr	r3, [pc, #16]	; (e070 <_usbd_ep_set_out_trans+0x3c>)
    e060:	4798      	blx	r3
}
    e062:	bf00      	nop
    e064:	3710      	adds	r7, #16
    e066:	46bd      	mov	sp, r7
    e068:	bd80      	pop	{r7, pc}
    e06a:	bf00      	nop
    e06c:	0000dfb1 	.word	0x0000dfb1
    e070:	0000df6d 	.word	0x0000df6d

0000e074 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    e074:	b480      	push	{r7}
    e076:	b085      	sub	sp, #20
    e078:	af00      	add	r7, sp, #0
    e07a:	4603      	mov	r3, r0
    e07c:	460a      	mov	r2, r1
    e07e:	71fb      	strb	r3, [r7, #7]
    e080:	4613      	mov	r3, r2
    e082:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    e084:	79fa      	ldrb	r2, [r7, #7]
    e086:	79bb      	ldrb	r3, [r7, #6]
    e088:	0052      	lsls	r2, r2, #1
    e08a:	4413      	add	r3, r2
    e08c:	011b      	lsls	r3, r3, #4
    e08e:	4a06      	ldr	r2, [pc, #24]	; (e0a8 <_usbd_ep_clear_bank_status+0x34>)
    e090:	4413      	add	r3, r2
    e092:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    e094:	68fb      	ldr	r3, [r7, #12]
    e096:	2200      	movs	r2, #0
    e098:	729a      	strb	r2, [r3, #10]
}
    e09a:	bf00      	nop
    e09c:	3714      	adds	r7, #20
    e09e:	46bd      	mov	sp, r7
    e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0a4:	4770      	bx	lr
    e0a6:	bf00      	nop
    e0a8:	20008bcc 	.word	0x20008bcc

0000e0ac <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    e0ac:	b580      	push	{r7, lr}
    e0ae:	b082      	sub	sp, #8
    e0b0:	af00      	add	r7, sp, #0
    e0b2:	4603      	mov	r3, r0
    e0b4:	71fb      	strb	r3, [r7, #7]
    e0b6:	460b      	mov	r3, r1
    e0b8:	71bb      	strb	r3, [r7, #6]
    e0ba:	4613      	mov	r3, r2
    e0bc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    e0be:	797b      	ldrb	r3, [r7, #5]
    e0c0:	2b00      	cmp	r3, #0
    e0c2:	d00b      	beq.n	e0dc <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e0c4:	79bb      	ldrb	r3, [r7, #6]
    e0c6:	2240      	movs	r2, #64	; 0x40
    e0c8:	fa02 f303 	lsl.w	r3, r2, r3
    e0cc:	b2da      	uxtb	r2, r3
    e0ce:	79fb      	ldrb	r3, [r7, #7]
    e0d0:	4619      	mov	r1, r3
    e0d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e0d6:	4b09      	ldr	r3, [pc, #36]	; (e0fc <_usbd_ep_set_in_rdy+0x50>)
    e0d8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    e0da:	e00a      	b.n	e0f2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e0dc:	79bb      	ldrb	r3, [r7, #6]
    e0de:	2240      	movs	r2, #64	; 0x40
    e0e0:	fa02 f303 	lsl.w	r3, r2, r3
    e0e4:	b2da      	uxtb	r2, r3
    e0e6:	79fb      	ldrb	r3, [r7, #7]
    e0e8:	4619      	mov	r1, r3
    e0ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e0ee:	4b04      	ldr	r3, [pc, #16]	; (e100 <_usbd_ep_set_in_rdy+0x54>)
    e0f0:	4798      	blx	r3
}
    e0f2:	bf00      	nop
    e0f4:	3708      	adds	r7, #8
    e0f6:	46bd      	mov	sp, r7
    e0f8:	bd80      	pop	{r7, pc}
    e0fa:	bf00      	nop
    e0fc:	0000d6b9 	.word	0x0000d6b9
    e100:	0000d70d 	.word	0x0000d70d

0000e104 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    e104:	b580      	push	{r7, lr}
    e106:	b082      	sub	sp, #8
    e108:	af00      	add	r7, sp, #0
    e10a:	4603      	mov	r3, r0
    e10c:	71fb      	strb	r3, [r7, #7]
    e10e:	460b      	mov	r3, r1
    e110:	71bb      	strb	r3, [r7, #6]
    e112:	4613      	mov	r3, r2
    e114:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    e116:	797b      	ldrb	r3, [r7, #5]
    e118:	2b00      	cmp	r3, #0
    e11a:	d00b      	beq.n	e134 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e11c:	79bb      	ldrb	r3, [r7, #6]
    e11e:	2240      	movs	r2, #64	; 0x40
    e120:	fa02 f303 	lsl.w	r3, r2, r3
    e124:	b2da      	uxtb	r2, r3
    e126:	79fb      	ldrb	r3, [r7, #7]
    e128:	4619      	mov	r1, r3
    e12a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e12e:	4b09      	ldr	r3, [pc, #36]	; (e154 <_usbd_ep_set_out_rdy+0x50>)
    e130:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    e132:	e00a      	b.n	e14a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    e134:	79bb      	ldrb	r3, [r7, #6]
    e136:	2240      	movs	r2, #64	; 0x40
    e138:	fa02 f303 	lsl.w	r3, r2, r3
    e13c:	b2da      	uxtb	r2, r3
    e13e:	79fb      	ldrb	r3, [r7, #7]
    e140:	4619      	mov	r1, r3
    e142:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e146:	4b04      	ldr	r3, [pc, #16]	; (e158 <_usbd_ep_set_out_rdy+0x54>)
    e148:	4798      	blx	r3
}
    e14a:	bf00      	nop
    e14c:	3708      	adds	r7, #8
    e14e:	46bd      	mov	sp, r7
    e150:	bd80      	pop	{r7, pc}
    e152:	bf00      	nop
    e154:	0000d70d 	.word	0x0000d70d
    e158:	0000d6b9 	.word	0x0000d6b9

0000e15c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    e15c:	b480      	push	{r7}
    e15e:	b083      	sub	sp, #12
    e160:	af00      	add	r7, sp, #0
    e162:	4603      	mov	r3, r0
    e164:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    e166:	88fb      	ldrh	r3, [r7, #6]
    e168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e16c:	d820      	bhi.n	e1b0 <_usbd_ep_pcksize_size+0x54>
    e16e:	88fb      	ldrh	r3, [r7, #6]
    e170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    e174:	d81a      	bhi.n	e1ac <_usbd_ep_pcksize_size+0x50>
    e176:	88fb      	ldrh	r3, [r7, #6]
    e178:	2b80      	cmp	r3, #128	; 0x80
    e17a:	d815      	bhi.n	e1a8 <_usbd_ep_pcksize_size+0x4c>
    e17c:	88fb      	ldrh	r3, [r7, #6]
    e17e:	2b40      	cmp	r3, #64	; 0x40
    e180:	d810      	bhi.n	e1a4 <_usbd_ep_pcksize_size+0x48>
    e182:	88fb      	ldrh	r3, [r7, #6]
    e184:	2b20      	cmp	r3, #32
    e186:	d80b      	bhi.n	e1a0 <_usbd_ep_pcksize_size+0x44>
    e188:	88fb      	ldrh	r3, [r7, #6]
    e18a:	2b10      	cmp	r3, #16
    e18c:	d806      	bhi.n	e19c <_usbd_ep_pcksize_size+0x40>
    e18e:	88fb      	ldrh	r3, [r7, #6]
    e190:	2b08      	cmp	r3, #8
    e192:	bf8c      	ite	hi
    e194:	2301      	movhi	r3, #1
    e196:	2300      	movls	r3, #0
    e198:	b2db      	uxtb	r3, r3
    e19a:	e00a      	b.n	e1b2 <_usbd_ep_pcksize_size+0x56>
    e19c:	2302      	movs	r3, #2
    e19e:	e008      	b.n	e1b2 <_usbd_ep_pcksize_size+0x56>
    e1a0:	2303      	movs	r3, #3
    e1a2:	e006      	b.n	e1b2 <_usbd_ep_pcksize_size+0x56>
    e1a4:	2304      	movs	r3, #4
    e1a6:	e004      	b.n	e1b2 <_usbd_ep_pcksize_size+0x56>
    e1a8:	2305      	movs	r3, #5
    e1aa:	e002      	b.n	e1b2 <_usbd_ep_pcksize_size+0x56>
    e1ac:	2306      	movs	r3, #6
    e1ae:	e000      	b.n	e1b2 <_usbd_ep_pcksize_size+0x56>
    e1b0:	2307      	movs	r3, #7
}
    e1b2:	4618      	mov	r0, r3
    e1b4:	370c      	adds	r7, #12
    e1b6:	46bd      	mov	sp, r7
    e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1bc:	4770      	bx	lr
	...

0000e1c0 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    e1c0:	b480      	push	{r7}
    e1c2:	b085      	sub	sp, #20
    e1c4:	af00      	add	r7, sp, #0
    e1c6:	4603      	mov	r3, r0
    e1c8:	460a      	mov	r2, r1
    e1ca:	71fb      	strb	r3, [r7, #7]
    e1cc:	4613      	mov	r3, r2
    e1ce:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    e1d0:	79fb      	ldrb	r3, [r7, #7]
    e1d2:	2b00      	cmp	r3, #0
    e1d4:	d008      	beq.n	e1e8 <_usb_d_dev_ept+0x28>
    e1d6:	79bb      	ldrb	r3, [r7, #6]
    e1d8:	2b00      	cmp	r3, #0
    e1da:	d003      	beq.n	e1e4 <_usb_d_dev_ept+0x24>
    e1dc:	79fb      	ldrb	r3, [r7, #7]
    e1de:	3304      	adds	r3, #4
    e1e0:	b2db      	uxtb	r3, r3
    e1e2:	e002      	b.n	e1ea <_usb_d_dev_ept+0x2a>
    e1e4:	79fb      	ldrb	r3, [r7, #7]
    e1e6:	e000      	b.n	e1ea <_usb_d_dev_ept+0x2a>
    e1e8:	2300      	movs	r3, #0
    e1ea:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    e1ec:	7bfa      	ldrb	r2, [r7, #15]
    e1ee:	4613      	mov	r3, r2
    e1f0:	009b      	lsls	r3, r3, #2
    e1f2:	4413      	add	r3, r2
    e1f4:	009b      	lsls	r3, r3, #2
    e1f6:	3310      	adds	r3, #16
    e1f8:	4a04      	ldr	r2, [pc, #16]	; (e20c <_usb_d_dev_ept+0x4c>)
    e1fa:	4413      	add	r3, r2
    e1fc:	3304      	adds	r3, #4
}
    e1fe:	4618      	mov	r0, r3
    e200:	3714      	adds	r7, #20
    e202:	46bd      	mov	sp, r7
    e204:	f85d 7b04 	ldr.w	r7, [sp], #4
    e208:	4770      	bx	lr
    e20a:	bf00      	nop
    e20c:	20008b04 	.word	0x20008b04

0000e210 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    e210:	b580      	push	{r7, lr}
    e212:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    e214:	2104      	movs	r1, #4
    e216:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e21a:	4b03      	ldr	r3, [pc, #12]	; (e228 <_usb_d_dev_sof+0x18>)
    e21c:	4798      	blx	r3
	dev_inst.callbacks.sof();
    e21e:	4b03      	ldr	r3, [pc, #12]	; (e22c <_usb_d_dev_sof+0x1c>)
    e220:	681b      	ldr	r3, [r3, #0]
    e222:	4798      	blx	r3
}
    e224:	bf00      	nop
    e226:	bd80      	pop	{r7, pc}
    e228:	0000d887 	.word	0x0000d887
    e22c:	20008b04 	.word	0x20008b04

0000e230 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    e230:	b580      	push	{r7, lr}
    e232:	b084      	sub	sp, #16
    e234:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    e236:	2300      	movs	r3, #0
    e238:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e23a:	f240 2101 	movw	r1, #513	; 0x201
    e23e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e242:	4b1a      	ldr	r3, [pc, #104]	; (e2ac <_usb_d_dev_lpmsusp+0x7c>)
    e244:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e246:	f240 2101 	movw	r1, #513	; 0x201
    e24a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e24e:	4b18      	ldr	r3, [pc, #96]	; (e2b0 <_usb_d_dev_lpmsusp+0x80>)
    e250:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e252:	2170      	movs	r1, #112	; 0x70
    e254:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e258:	4b16      	ldr	r3, [pc, #88]	; (e2b4 <_usb_d_dev_lpmsusp+0x84>)
    e25a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    e25c:	2300      	movs	r3, #0
    e25e:	73fb      	strb	r3, [r7, #15]
    e260:	e018      	b.n	e294 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    e262:	7bfb      	ldrb	r3, [r7, #15]
    e264:	015b      	lsls	r3, r3, #5
    e266:	4a14      	ldr	r2, [pc, #80]	; (e2b8 <_usb_d_dev_lpmsusp+0x88>)
    e268:	4413      	add	r3, r2
    e26a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    e26c:	687b      	ldr	r3, [r7, #4]
    e26e:	891b      	ldrh	r3, [r3, #8]
    e270:	f3c3 0303 	ubfx	r3, r3, #0, #4
    e274:	b2db      	uxtb	r3, r3
    e276:	2b03      	cmp	r3, #3
    e278:	d109      	bne.n	e28e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    e27a:	687b      	ldr	r3, [r7, #4]
    e27c:	891b      	ldrh	r3, [r3, #8]
    e27e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    e282:	b29b      	uxth	r3, r3
    e284:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    e286:	687b      	ldr	r3, [r7, #4]
    e288:	2200      	movs	r2, #0
    e28a:	811a      	strh	r2, [r3, #8]
			break;
    e28c:	e005      	b.n	e29a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    e28e:	7bfb      	ldrb	r3, [r7, #15]
    e290:	3301      	adds	r3, #1
    e292:	73fb      	strb	r3, [r7, #15]
    e294:	7bfb      	ldrb	r3, [r7, #15]
    e296:	2b03      	cmp	r3, #3
    e298:	d9e3      	bls.n	e262 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    e29a:	4b08      	ldr	r3, [pc, #32]	; (e2bc <_usb_d_dev_lpmsusp+0x8c>)
    e29c:	685b      	ldr	r3, [r3, #4]
    e29e:	68b9      	ldr	r1, [r7, #8]
    e2a0:	2003      	movs	r0, #3
    e2a2:	4798      	blx	r3
}
    e2a4:	bf00      	nop
    e2a6:	3710      	adds	r7, #16
    e2a8:	46bd      	mov	sp, r7
    e2aa:	bd80      	pop	{r7, pc}
    e2ac:	0000d887 	.word	0x0000d887
    e2b0:	0000d8dd 	.word	0x0000d8dd
    e2b4:	0000d8a5 	.word	0x0000d8a5
    e2b8:	20008bcc 	.word	0x20008bcc
    e2bc:	20008b04 	.word	0x20008b04

0000e2c0 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    e2c0:	b580      	push	{r7, lr}
    e2c2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    e2c4:	2180      	movs	r1, #128	; 0x80
    e2c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e2ca:	4b04      	ldr	r3, [pc, #16]	; (e2dc <_usb_d_dev_ramerr+0x1c>)
    e2cc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    e2ce:	4b04      	ldr	r3, [pc, #16]	; (e2e0 <_usb_d_dev_ramerr+0x20>)
    e2d0:	685b      	ldr	r3, [r3, #4]
    e2d2:	2100      	movs	r1, #0
    e2d4:	2005      	movs	r0, #5
    e2d6:	4798      	blx	r3
}
    e2d8:	bf00      	nop
    e2da:	bd80      	pop	{r7, pc}
    e2dc:	0000d887 	.word	0x0000d887
    e2e0:	20008b04 	.word	0x20008b04

0000e2e4 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    e2e4:	b580      	push	{r7, lr}
    e2e6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e2e8:	2170      	movs	r1, #112	; 0x70
    e2ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e2ee:	4b0b      	ldr	r3, [pc, #44]	; (e31c <_usb_d_dev_wakeup+0x38>)
    e2f0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e2f2:	2170      	movs	r1, #112	; 0x70
    e2f4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e2f8:	4b09      	ldr	r3, [pc, #36]	; (e320 <_usb_d_dev_wakeup+0x3c>)
    e2fa:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e2fc:	f240 2101 	movw	r1, #513	; 0x201
    e300:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e304:	4b07      	ldr	r3, [pc, #28]	; (e324 <_usb_d_dev_wakeup+0x40>)
    e306:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    e308:	2000      	movs	r0, #0
    e30a:	4b07      	ldr	r3, [pc, #28]	; (e328 <_usb_d_dev_wakeup+0x44>)
    e30c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    e30e:	4b07      	ldr	r3, [pc, #28]	; (e32c <_usb_d_dev_wakeup+0x48>)
    e310:	685b      	ldr	r3, [r3, #4]
    e312:	2100      	movs	r1, #0
    e314:	2002      	movs	r0, #2
    e316:	4798      	blx	r3
}
    e318:	bf00      	nop
    e31a:	bd80      	pop	{r7, pc}
    e31c:	0000d887 	.word	0x0000d887
    e320:	0000d8dd 	.word	0x0000d8dd
    e324:	0000d8a5 	.word	0x0000d8a5
    e328:	0000db85 	.word	0x0000db85
    e32c:	20008b04 	.word	0x20008b04

0000e330 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    e330:	b580      	push	{r7, lr}
    e332:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    e334:	2200      	movs	r2, #0
    e336:	2100      	movs	r1, #0
    e338:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e33c:	4b0d      	ldr	r3, [pc, #52]	; (e374 <_usb_d_dev_reset+0x44>)
    e33e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    e340:	2108      	movs	r1, #8
    e342:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e346:	4b0c      	ldr	r3, [pc, #48]	; (e378 <_usb_d_dev_reset+0x48>)
    e348:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e34a:	2170      	movs	r1, #112	; 0x70
    e34c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e350:	4b0a      	ldr	r3, [pc, #40]	; (e37c <_usb_d_dev_reset+0x4c>)
    e352:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e354:	f240 2101 	movw	r1, #513	; 0x201
    e358:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e35c:	4b08      	ldr	r3, [pc, #32]	; (e380 <_usb_d_dev_reset+0x50>)
    e35e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    e360:	4b08      	ldr	r3, [pc, #32]	; (e384 <_usb_d_dev_reset+0x54>)
    e362:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    e364:	4b08      	ldr	r3, [pc, #32]	; (e388 <_usb_d_dev_reset+0x58>)
    e366:	685b      	ldr	r3, [r3, #4]
    e368:	2100      	movs	r1, #0
    e36a:	2001      	movs	r0, #1
    e36c:	4798      	blx	r3
}
    e36e:	bf00      	nop
    e370:	bd80      	pop	{r7, pc}
    e372:	bf00      	nop
    e374:	0000d81d 	.word	0x0000d81d
    e378:	0000d887 	.word	0x0000d887
    e37c:	0000d8dd 	.word	0x0000d8dd
    e380:	0000d8a5 	.word	0x0000d8a5
    e384:	0000eeed 	.word	0x0000eeed
    e388:	20008b04 	.word	0x20008b04

0000e38c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    e38c:	b580      	push	{r7, lr}
    e38e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e390:	f240 2101 	movw	r1, #513	; 0x201
    e394:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e398:	4b09      	ldr	r3, [pc, #36]	; (e3c0 <_usb_d_dev_suspend+0x34>)
    e39a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    e39c:	f240 2101 	movw	r1, #513	; 0x201
    e3a0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e3a4:	4b07      	ldr	r3, [pc, #28]	; (e3c4 <_usb_d_dev_suspend+0x38>)
    e3a6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    e3a8:	2170      	movs	r1, #112	; 0x70
    e3aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e3ae:	4b06      	ldr	r3, [pc, #24]	; (e3c8 <_usb_d_dev_suspend+0x3c>)
    e3b0:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    e3b2:	4b06      	ldr	r3, [pc, #24]	; (e3cc <_usb_d_dev_suspend+0x40>)
    e3b4:	685b      	ldr	r3, [r3, #4]
    e3b6:	2100      	movs	r1, #0
    e3b8:	2004      	movs	r0, #4
    e3ba:	4798      	blx	r3
}
    e3bc:	bf00      	nop
    e3be:	bd80      	pop	{r7, pc}
    e3c0:	0000d887 	.word	0x0000d887
    e3c4:	0000d8dd 	.word	0x0000d8dd
    e3c8:	0000d8a5 	.word	0x0000d8a5
    e3cc:	20008b04 	.word	0x20008b04

0000e3d0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    e3d0:	b580      	push	{r7, lr}
    e3d2:	b082      	sub	sp, #8
    e3d4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    e3d6:	2301      	movs	r3, #1
    e3d8:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    e3da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e3de:	4b22      	ldr	r3, [pc, #136]	; (e468 <_usb_d_dev_handle_nep+0x98>)
    e3e0:	4798      	blx	r3
    e3e2:	4603      	mov	r3, r0
    e3e4:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    e3e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    e3ea:	4b20      	ldr	r3, [pc, #128]	; (e46c <_usb_d_dev_handle_nep+0x9c>)
    e3ec:	4798      	blx	r3
    e3ee:	4603      	mov	r3, r0
    e3f0:	461a      	mov	r2, r3
    e3f2:	88bb      	ldrh	r3, [r7, #4]
    e3f4:	4013      	ands	r3, r2
    e3f6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    e3f8:	88bb      	ldrh	r3, [r7, #4]
    e3fa:	f003 0304 	and.w	r3, r3, #4
    e3fe:	2b00      	cmp	r3, #0
    e400:	d003      	beq.n	e40a <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    e402:	4b1b      	ldr	r3, [pc, #108]	; (e470 <_usb_d_dev_handle_nep+0xa0>)
    e404:	4798      	blx	r3
		return true;
    e406:	2301      	movs	r3, #1
    e408:	e02a      	b.n	e460 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    e40a:	88bb      	ldrh	r3, [r7, #4]
    e40c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    e410:	2b00      	cmp	r3, #0
    e412:	d002      	beq.n	e41a <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    e414:	4b17      	ldr	r3, [pc, #92]	; (e474 <_usb_d_dev_handle_nep+0xa4>)
    e416:	4798      	blx	r3
    e418:	e021      	b.n	e45e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    e41a:	88bb      	ldrh	r3, [r7, #4]
    e41c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e420:	2b00      	cmp	r3, #0
    e422:	d002      	beq.n	e42a <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    e424:	4b14      	ldr	r3, [pc, #80]	; (e478 <_usb_d_dev_handle_nep+0xa8>)
    e426:	4798      	blx	r3
    e428:	e019      	b.n	e45e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    e42a:	88bb      	ldrh	r3, [r7, #4]
    e42c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e430:	2b00      	cmp	r3, #0
    e432:	d002      	beq.n	e43a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    e434:	4b11      	ldr	r3, [pc, #68]	; (e47c <_usb_d_dev_handle_nep+0xac>)
    e436:	4798      	blx	r3
    e438:	e011      	b.n	e45e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    e43a:	88bb      	ldrh	r3, [r7, #4]
    e43c:	f003 0308 	and.w	r3, r3, #8
    e440:	2b00      	cmp	r3, #0
    e442:	d002      	beq.n	e44a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    e444:	4b0e      	ldr	r3, [pc, #56]	; (e480 <_usb_d_dev_handle_nep+0xb0>)
    e446:	4798      	blx	r3
    e448:	e009      	b.n	e45e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    e44a:	88bb      	ldrh	r3, [r7, #4]
    e44c:	f003 0301 	and.w	r3, r3, #1
    e450:	2b00      	cmp	r3, #0
    e452:	d002      	beq.n	e45a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    e454:	4b0b      	ldr	r3, [pc, #44]	; (e484 <_usb_d_dev_handle_nep+0xb4>)
    e456:	4798      	blx	r3
    e458:	e001      	b.n	e45e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    e45a:	2300      	movs	r3, #0
    e45c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    e45e:	79fb      	ldrb	r3, [r7, #7]
}
    e460:	4618      	mov	r0, r3
    e462:	3708      	adds	r7, #8
    e464:	46bd      	mov	sp, r7
    e466:	bd80      	pop	{r7, pc}
    e468:	0000d86d 	.word	0x0000d86d
    e46c:	0000d8c3 	.word	0x0000d8c3
    e470:	0000e211 	.word	0x0000e211
    e474:	0000e231 	.word	0x0000e231
    e478:	0000e2c1 	.word	0x0000e2c1
    e47c:	0000e2e5 	.word	0x0000e2e5
    e480:	0000e331 	.word	0x0000e331
    e484:	0000e38d 	.word	0x0000e38d

0000e488 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    e488:	b590      	push	{r4, r7, lr}
    e48a:	b089      	sub	sp, #36	; 0x24
    e48c:	af00      	add	r7, sp, #0
    e48e:	6078      	str	r0, [r7, #4]
    e490:	460b      	mov	r3, r1
    e492:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    e494:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e498:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    e49a:	687b      	ldr	r3, [r7, #4]
    e49c:	7c9b      	ldrb	r3, [r3, #18]
    e49e:	f003 030f 	and.w	r3, r3, #15
    e4a2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    e4a4:	7dfb      	ldrb	r3, [r7, #23]
    e4a6:	015b      	lsls	r3, r3, #5
    e4a8:	4a73      	ldr	r2, [pc, #460]	; (e678 <_usb_d_dev_in_next+0x1f0>)
    e4aa:	4413      	add	r3, r2
    e4ac:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    e4ae:	78fb      	ldrb	r3, [r7, #3]
    e4b0:	2b00      	cmp	r3, #0
    e4b2:	d006      	beq.n	e4c2 <_usb_d_dev_in_next+0x3a>
    e4b4:	693b      	ldr	r3, [r7, #16]
    e4b6:	3310      	adds	r3, #16
    e4b8:	685b      	ldr	r3, [r3, #4]
    e4ba:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e4be:	b29b      	uxth	r3, r3
    e4c0:	e000      	b.n	e4c4 <_usb_d_dev_in_next+0x3c>
    e4c2:	2300      	movs	r3, #0
    e4c4:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    e4c6:	687b      	ldr	r3, [r7, #4]
    e4c8:	8a1b      	ldrh	r3, [r3, #16]
    e4ca:	f240 32ff 	movw	r2, #1023	; 0x3ff
    e4ce:	4293      	cmp	r3, r2
    e4d0:	d103      	bne.n	e4da <_usb_d_dev_in_next+0x52>
    e4d2:	687b      	ldr	r3, [r7, #4]
    e4d4:	8a1b      	ldrh	r3, [r3, #16]
    e4d6:	b21b      	sxth	r3, r3
    e4d8:	e004      	b.n	e4e4 <_usb_d_dev_in_next+0x5c>
    e4da:	687b      	ldr	r3, [r7, #4]
    e4dc:	8a1b      	ldrh	r3, [r3, #16]
    e4de:	3b01      	subs	r3, #1
    e4e0:	b29b      	uxth	r3, r3
    e4e2:	b21b      	sxth	r3, r3
    e4e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    e4e8:	4013      	ands	r3, r2
    e4ea:	b21b      	sxth	r3, r3
    e4ec:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    e4ee:	2300      	movs	r3, #0
    e4f0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    e4f2:	687b      	ldr	r3, [r7, #4]
    e4f4:	7cdb      	ldrb	r3, [r3, #19]
    e4f6:	f003 0307 	and.w	r3, r3, #7
    e4fa:	b2db      	uxtb	r3, r3
    e4fc:	2b01      	cmp	r3, #1
    e4fe:	bf0c      	ite	eq
    e500:	2301      	moveq	r3, #1
    e502:	2300      	movne	r3, #0
    e504:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    e506:	78fb      	ldrb	r3, [r7, #3]
    e508:	2b00      	cmp	r3, #0
    e50a:	d004      	beq.n	e516 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    e50c:	7dfb      	ldrb	r3, [r7, #23]
    e50e:	2101      	movs	r1, #1
    e510:	4618      	mov	r0, r3
    e512:	4b5a      	ldr	r3, [pc, #360]	; (e67c <_usb_d_dev_in_next+0x1f4>)
    e514:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    e516:	687b      	ldr	r3, [r7, #4]
    e518:	689a      	ldr	r2, [r3, #8]
    e51a:	89fb      	ldrh	r3, [r7, #14]
    e51c:	441a      	add	r2, r3
    e51e:	687b      	ldr	r3, [r7, #4]
    e520:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    e522:	687b      	ldr	r3, [r7, #4]
    e524:	689a      	ldr	r2, [r3, #8]
    e526:	687b      	ldr	r3, [r7, #4]
    e528:	685b      	ldr	r3, [r3, #4]
    e52a:	429a      	cmp	r2, r3
    e52c:	d243      	bcs.n	e5b6 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    e52e:	687b      	ldr	r3, [r7, #4]
    e530:	685b      	ldr	r3, [r3, #4]
    e532:	b29a      	uxth	r2, r3
    e534:	687b      	ldr	r3, [r7, #4]
    e536:	689b      	ldr	r3, [r3, #8]
    e538:	b29b      	uxth	r3, r3
    e53a:	1ad3      	subs	r3, r2, r3
    e53c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    e53e:	687b      	ldr	r3, [r7, #4]
    e540:	7cdb      	ldrb	r3, [r3, #19]
    e542:	f003 0320 	and.w	r3, r3, #32
    e546:	b2db      	uxtb	r3, r3
    e548:	2b00      	cmp	r3, #0
    e54a:	d01b      	beq.n	e584 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    e54c:	687b      	ldr	r3, [r7, #4]
    e54e:	8a1b      	ldrh	r3, [r3, #16]
    e550:	8bfa      	ldrh	r2, [r7, #30]
    e552:	429a      	cmp	r2, r3
    e554:	d902      	bls.n	e55c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    e556:	687b      	ldr	r3, [r7, #4]
    e558:	8a1b      	ldrh	r3, [r3, #16]
    e55a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    e55c:	687b      	ldr	r3, [r7, #4]
    e55e:	68d8      	ldr	r0, [r3, #12]
    e560:	687b      	ldr	r3, [r7, #4]
    e562:	681a      	ldr	r2, [r3, #0]
    e564:	687b      	ldr	r3, [r7, #4]
    e566:	689b      	ldr	r3, [r3, #8]
    e568:	4413      	add	r3, r2
    e56a:	8bfa      	ldrh	r2, [r7, #30]
    e56c:	4619      	mov	r1, r3
    e56e:	4b44      	ldr	r3, [pc, #272]	; (e680 <_usb_d_dev_in_next+0x1f8>)
    e570:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    e572:	687b      	ldr	r3, [r7, #4]
    e574:	68db      	ldr	r3, [r3, #12]
    e576:	461a      	mov	r2, r3
    e578:	7dfb      	ldrb	r3, [r7, #23]
    e57a:	2101      	movs	r1, #1
    e57c:	4618      	mov	r0, r3
    e57e:	4b41      	ldr	r3, [pc, #260]	; (e684 <_usb_d_dev_in_next+0x1fc>)
    e580:	4798      	blx	r3
    e582:	e011      	b.n	e5a8 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    e584:	8bfb      	ldrh	r3, [r7, #30]
    e586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    e58a:	d902      	bls.n	e592 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    e58c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e590:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    e592:	687b      	ldr	r3, [r7, #4]
    e594:	681a      	ldr	r2, [r3, #0]
    e596:	687b      	ldr	r3, [r7, #4]
    e598:	689b      	ldr	r3, [r3, #8]
    e59a:	4413      	add	r3, r2
    e59c:	461a      	mov	r2, r3
    e59e:	7dfb      	ldrb	r3, [r7, #23]
    e5a0:	2101      	movs	r1, #1
    e5a2:	4618      	mov	r0, r3
    e5a4:	4b37      	ldr	r3, [pc, #220]	; (e684 <_usb_d_dev_in_next+0x1fc>)
    e5a6:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    e5a8:	8bfa      	ldrh	r2, [r7, #30]
    e5aa:	7df8      	ldrb	r0, [r7, #23]
    e5ac:	2300      	movs	r3, #0
    e5ae:	2101      	movs	r1, #1
    e5b0:	4c35      	ldr	r4, [pc, #212]	; (e688 <_usb_d_dev_in_next+0x200>)
    e5b2:	47a0      	blx	r4
		goto _in_tx_exec;
    e5b4:	e041      	b.n	e63a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    e5b6:	687b      	ldr	r3, [r7, #4]
    e5b8:	7cdb      	ldrb	r3, [r3, #19]
    e5ba:	f003 0310 	and.w	r3, r3, #16
    e5be:	b2db      	uxtb	r3, r3
    e5c0:	2b00      	cmp	r3, #0
    e5c2:	d00b      	beq.n	e5dc <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    e5c4:	687a      	ldr	r2, [r7, #4]
    e5c6:	7cd3      	ldrb	r3, [r2, #19]
    e5c8:	f36f 1304 	bfc	r3, #4, #1
    e5cc:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    e5ce:	7df8      	ldrb	r0, [r7, #23]
    e5d0:	2300      	movs	r3, #0
    e5d2:	2200      	movs	r2, #0
    e5d4:	2101      	movs	r1, #1
    e5d6:	4c2c      	ldr	r4, [pc, #176]	; (e688 <_usb_d_dev_in_next+0x200>)
    e5d8:	47a0      	blx	r4
		goto _in_tx_exec;
    e5da:	e02e      	b.n	e63a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    e5dc:	7afb      	ldrb	r3, [r7, #11]
    e5de:	2b00      	cmp	r3, #0
    e5e0:	d006      	beq.n	e5f0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    e5e2:	7dfb      	ldrb	r3, [r7, #23]
    e5e4:	224b      	movs	r2, #75	; 0x4b
    e5e6:	4619      	mov	r1, r3
    e5e8:	69b8      	ldr	r0, [r7, #24]
    e5ea:	4b28      	ldr	r3, [pc, #160]	; (e68c <_usb_d_dev_in_next+0x204>)
    e5ec:	4798      	blx	r3
    e5ee:	e005      	b.n	e5fc <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    e5f0:	7dfb      	ldrb	r3, [r7, #23]
    e5f2:	224a      	movs	r2, #74	; 0x4a
    e5f4:	4619      	mov	r1, r3
    e5f6:	69b8      	ldr	r0, [r7, #24]
    e5f8:	4b24      	ldr	r3, [pc, #144]	; (e68c <_usb_d_dev_in_next+0x204>)
    e5fa:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    e5fc:	687b      	ldr	r3, [r7, #4]
    e5fe:	8a1b      	ldrh	r3, [r3, #16]
    e600:	89ba      	ldrh	r2, [r7, #12]
    e602:	429a      	cmp	r2, r3
    e604:	d114      	bne.n	e630 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    e606:	687a      	ldr	r2, [r7, #4]
    e608:	7cd3      	ldrb	r3, [r2, #19]
    e60a:	f36f 1386 	bfc	r3, #6, #1
    e60e:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    e610:	4b1f      	ldr	r3, [pc, #124]	; (e690 <_usb_d_dev_in_next+0x208>)
    e612:	68db      	ldr	r3, [r3, #12]
    e614:	687a      	ldr	r2, [r7, #4]
    e616:	7c90      	ldrb	r0, [r2, #18]
    e618:	687a      	ldr	r2, [r7, #4]
    e61a:	6892      	ldr	r2, [r2, #8]
    e61c:	4611      	mov	r1, r2
    e61e:	4798      	blx	r3
    e620:	4603      	mov	r3, r0
    e622:	2b00      	cmp	r3, #0
    e624:	d124      	bne.n	e670 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    e626:	687a      	ldr	r2, [r7, #4]
    e628:	7cd3      	ldrb	r3, [r2, #19]
    e62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e62e:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    e630:	2100      	movs	r1, #0
    e632:	6878      	ldr	r0, [r7, #4]
    e634:	4b17      	ldr	r3, [pc, #92]	; (e694 <_usb_d_dev_in_next+0x20c>)
    e636:	4798      	blx	r3
	return;
    e638:	e01b      	b.n	e672 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    e63a:	78fb      	ldrb	r3, [r7, #3]
    e63c:	f083 0301 	eor.w	r3, r3, #1
    e640:	b2db      	uxtb	r3, r3
    e642:	2b00      	cmp	r3, #0
    e644:	d00d      	beq.n	e662 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    e646:	7afb      	ldrb	r3, [r7, #11]
    e648:	2b00      	cmp	r3, #0
    e64a:	d002      	beq.n	e652 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    e64c:	234e      	movs	r3, #78	; 0x4e
    e64e:	777b      	strb	r3, [r7, #29]
    e650:	e001      	b.n	e656 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    e652:	234a      	movs	r3, #74	; 0x4a
    e654:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    e656:	7f7a      	ldrb	r2, [r7, #29]
    e658:	7dfb      	ldrb	r3, [r7, #23]
    e65a:	4619      	mov	r1, r3
    e65c:	69b8      	ldr	r0, [r7, #24]
    e65e:	4b0e      	ldr	r3, [pc, #56]	; (e698 <_usb_d_dev_in_next+0x210>)
    e660:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    e662:	7dfb      	ldrb	r3, [r7, #23]
    e664:	2201      	movs	r2, #1
    e666:	2101      	movs	r1, #1
    e668:	4618      	mov	r0, r3
    e66a:	4b0c      	ldr	r3, [pc, #48]	; (e69c <_usb_d_dev_in_next+0x214>)
    e66c:	4798      	blx	r3
    e66e:	e000      	b.n	e672 <_usb_d_dev_in_next+0x1ea>
			return;
    e670:	bf00      	nop
}
    e672:	3724      	adds	r7, #36	; 0x24
    e674:	46bd      	mov	sp, r7
    e676:	bd90      	pop	{r4, r7, pc}
    e678:	20008bcc 	.word	0x20008bcc
    e67c:	0000de81 	.word	0x0000de81
    e680:	0001b35d 	.word	0x0001b35d
    e684:	0000dead 	.word	0x0000dead
    e688:	0000dff5 	.word	0x0000dff5
    e68c:	0000d78d 	.word	0x0000d78d
    e690:	20008b04 	.word	0x20008b04
    e694:	0000f7b1 	.word	0x0000f7b1
    e698:	0000d761 	.word	0x0000d761
    e69c:	0000e0ad 	.word	0x0000e0ad

0000e6a0 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    e6a0:	b590      	push	{r4, r7, lr}
    e6a2:	b08b      	sub	sp, #44	; 0x2c
    e6a4:	af00      	add	r7, sp, #0
    e6a6:	6078      	str	r0, [r7, #4]
    e6a8:	460b      	mov	r3, r1
    e6aa:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    e6ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    e6b0:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    e6b2:	687b      	ldr	r3, [r7, #4]
    e6b4:	7c9b      	ldrb	r3, [r3, #18]
    e6b6:	f003 030f 	and.w	r3, r3, #15
    e6ba:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    e6bc:	7ffb      	ldrb	r3, [r7, #31]
    e6be:	015b      	lsls	r3, r3, #5
    e6c0:	4a94      	ldr	r2, [pc, #592]	; (e914 <_usb_d_dev_out_next+0x274>)
    e6c2:	4413      	add	r3, r2
    e6c4:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    e6c6:	78fb      	ldrb	r3, [r7, #3]
    e6c8:	2b00      	cmp	r3, #0
    e6ca:	d005      	beq.n	e6d8 <_usb_d_dev_out_next+0x38>
    e6cc:	69bb      	ldr	r3, [r7, #24]
    e6ce:	685b      	ldr	r3, [r3, #4]
    e6d0:	f3c3 338d 	ubfx	r3, r3, #14, #14
    e6d4:	b29b      	uxth	r3, r3
    e6d6:	e000      	b.n	e6da <_usb_d_dev_out_next+0x3a>
    e6d8:	2300      	movs	r3, #0
    e6da:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    e6dc:	78fb      	ldrb	r3, [r7, #3]
    e6de:	2b00      	cmp	r3, #0
    e6e0:	d005      	beq.n	e6ee <_usb_d_dev_out_next+0x4e>
    e6e2:	69bb      	ldr	r3, [r7, #24]
    e6e4:	685b      	ldr	r3, [r3, #4]
    e6e6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    e6ea:	b29b      	uxth	r3, r3
    e6ec:	e000      	b.n	e6f0 <_usb_d_dev_out_next+0x50>
    e6ee:	2300      	movs	r3, #0
    e6f0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    e6f2:	687b      	ldr	r3, [r7, #4]
    e6f4:	8a1b      	ldrh	r3, [r3, #16]
    e6f6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    e6fa:	4293      	cmp	r3, r2
    e6fc:	d004      	beq.n	e708 <_usb_d_dev_out_next+0x68>
    e6fe:	687b      	ldr	r3, [r7, #4]
    e700:	8a1b      	ldrh	r3, [r3, #16]
    e702:	3b01      	subs	r3, #1
    e704:	b29b      	uxth	r3, r3
    e706:	e001      	b.n	e70c <_usb_d_dev_out_next+0x6c>
    e708:	f240 33ff 	movw	r3, #1023	; 0x3ff
    e70c:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    e70e:	8aba      	ldrh	r2, [r7, #20]
    e710:	8a7b      	ldrh	r3, [r7, #18]
    e712:	4013      	ands	r3, r2
    e714:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    e716:	687b      	ldr	r3, [r7, #4]
    e718:	7cdb      	ldrb	r3, [r3, #19]
    e71a:	f003 0307 	and.w	r3, r3, #7
    e71e:	b2db      	uxtb	r3, r3
    e720:	2b01      	cmp	r3, #1
    e722:	bf0c      	ite	eq
    e724:	2301      	moveq	r3, #1
    e726:	2300      	movne	r3, #0
    e728:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    e72a:	78fb      	ldrb	r3, [r7, #3]
    e72c:	2b00      	cmp	r3, #0
    e72e:	d004      	beq.n	e73a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    e730:	7ffb      	ldrb	r3, [r7, #31]
    e732:	2100      	movs	r1, #0
    e734:	4618      	mov	r0, r3
    e736:	4b78      	ldr	r3, [pc, #480]	; (e918 <_usb_d_dev_out_next+0x278>)
    e738:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    e73a:	687b      	ldr	r3, [r7, #4]
    e73c:	7cdb      	ldrb	r3, [r3, #19]
    e73e:	f003 0320 	and.w	r3, r3, #32
    e742:	b2db      	uxtb	r3, r3
    e744:	2b00      	cmp	r3, #0
    e746:	d01c      	beq.n	e782 <_usb_d_dev_out_next+0xe2>
    e748:	687b      	ldr	r3, [r7, #4]
    e74a:	685b      	ldr	r3, [r3, #4]
    e74c:	2b00      	cmp	r3, #0
    e74e:	d018      	beq.n	e782 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    e750:	687b      	ldr	r3, [r7, #4]
    e752:	685b      	ldr	r3, [r3, #4]
    e754:	b29a      	uxth	r2, r3
    e756:	687b      	ldr	r3, [r7, #4]
    e758:	689b      	ldr	r3, [r3, #8]
    e75a:	b29b      	uxth	r3, r3
    e75c:	1ad3      	subs	r3, r2, r3
    e75e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    e760:	687b      	ldr	r3, [r7, #4]
    e762:	681a      	ldr	r2, [r3, #0]
    e764:	687b      	ldr	r3, [r7, #4]
    e766:	689b      	ldr	r3, [r3, #8]
    e768:	18d0      	adds	r0, r2, r3
    e76a:	687b      	ldr	r3, [r7, #4]
    e76c:	68d9      	ldr	r1, [r3, #12]
    e76e:	89ba      	ldrh	r2, [r7, #12]
    e770:	8a3b      	ldrh	r3, [r7, #16]
    e772:	429a      	cmp	r2, r3
    e774:	d901      	bls.n	e77a <_usb_d_dev_out_next+0xda>
    e776:	8a3b      	ldrh	r3, [r7, #16]
    e778:	e000      	b.n	e77c <_usb_d_dev_out_next+0xdc>
    e77a:	89bb      	ldrh	r3, [r7, #12]
    e77c:	461a      	mov	r2, r3
    e77e:	4b67      	ldr	r3, [pc, #412]	; (e91c <_usb_d_dev_out_next+0x27c>)
    e780:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    e782:	687b      	ldr	r3, [r7, #4]
    e784:	685b      	ldr	r3, [r3, #4]
    e786:	2b00      	cmp	r3, #0
    e788:	d121      	bne.n	e7ce <_usb_d_dev_out_next+0x12e>
    e78a:	687b      	ldr	r3, [r7, #4]
    e78c:	7cdb      	ldrb	r3, [r3, #19]
    e78e:	f003 0310 	and.w	r3, r3, #16
    e792:	b2db      	uxtb	r3, r3
    e794:	2b00      	cmp	r3, #0
    e796:	d01a      	beq.n	e7ce <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    e798:	687a      	ldr	r2, [r7, #4]
    e79a:	7cd3      	ldrb	r3, [r2, #19]
    e79c:	f36f 1304 	bfc	r3, #4, #1
    e7a0:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    e7a2:	687a      	ldr	r2, [r7, #4]
    e7a4:	7cd3      	ldrb	r3, [r2, #19]
    e7a6:	f043 0320 	orr.w	r3, r3, #32
    e7aa:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    e7ac:	687b      	ldr	r3, [r7, #4]
    e7ae:	68db      	ldr	r3, [r3, #12]
    e7b0:	461a      	mov	r2, r3
    e7b2:	7ffb      	ldrb	r3, [r7, #31]
    e7b4:	2100      	movs	r1, #0
    e7b6:	4618      	mov	r0, r3
    e7b8:	4b59      	ldr	r3, [pc, #356]	; (e920 <_usb_d_dev_out_next+0x280>)
    e7ba:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    e7bc:	687b      	ldr	r3, [r7, #4]
    e7be:	8a1b      	ldrh	r3, [r3, #16]
    e7c0:	461a      	mov	r2, r3
    e7c2:	7ff8      	ldrb	r0, [r7, #31]
    e7c4:	2300      	movs	r3, #0
    e7c6:	2100      	movs	r1, #0
    e7c8:	4c56      	ldr	r4, [pc, #344]	; (e924 <_usb_d_dev_out_next+0x284>)
    e7ca:	47a0      	blx	r4
		goto _out_rx_exec;
    e7cc:	e090      	b.n	e8f0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    e7ce:	78fb      	ldrb	r3, [r7, #3]
    e7d0:	2b00      	cmp	r3, #0
    e7d2:	d010      	beq.n	e7f6 <_usb_d_dev_out_next+0x156>
    e7d4:	687b      	ldr	r3, [r7, #4]
    e7d6:	8a1b      	ldrh	r3, [r3, #16]
    e7d8:	8a3a      	ldrh	r2, [r7, #16]
    e7da:	429a      	cmp	r2, r3
    e7dc:	d20b      	bcs.n	e7f6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    e7de:	687a      	ldr	r2, [r7, #4]
    e7e0:	7cd3      	ldrb	r3, [r2, #19]
    e7e2:	f36f 1304 	bfc	r3, #4, #1
    e7e6:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    e7e8:	687b      	ldr	r3, [r7, #4]
    e7ea:	689a      	ldr	r2, [r3, #8]
    e7ec:	8abb      	ldrh	r3, [r7, #20]
    e7ee:	441a      	add	r2, r3
    e7f0:	687b      	ldr	r3, [r7, #4]
    e7f2:	609a      	str	r2, [r3, #8]
    e7f4:	e05c      	b.n	e8b0 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    e7f6:	687b      	ldr	r3, [r7, #4]
    e7f8:	689a      	ldr	r2, [r3, #8]
    e7fa:	8afb      	ldrh	r3, [r7, #22]
    e7fc:	441a      	add	r2, r3
    e7fe:	687b      	ldr	r3, [r7, #4]
    e800:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    e802:	687b      	ldr	r3, [r7, #4]
    e804:	689a      	ldr	r2, [r3, #8]
    e806:	687b      	ldr	r3, [r7, #4]
    e808:	685b      	ldr	r3, [r3, #4]
    e80a:	429a      	cmp	r2, r3
    e80c:	d250      	bcs.n	e8b0 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    e80e:	687b      	ldr	r3, [r7, #4]
    e810:	685b      	ldr	r3, [r3, #4]
    e812:	b29a      	uxth	r2, r3
    e814:	687b      	ldr	r3, [r7, #4]
    e816:	689b      	ldr	r3, [r3, #8]
    e818:	b29b      	uxth	r3, r3
    e81a:	1ad3      	subs	r3, r2, r3
    e81c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    e81e:	687b      	ldr	r3, [r7, #4]
    e820:	7cdb      	ldrb	r3, [r3, #19]
    e822:	f003 0320 	and.w	r3, r3, #32
    e826:	b2db      	uxtb	r3, r3
    e828:	2b00      	cmp	r3, #0
    e82a:	d010      	beq.n	e84e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    e82c:	687b      	ldr	r3, [r7, #4]
    e82e:	8a1b      	ldrh	r3, [r3, #16]
    e830:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e832:	429a      	cmp	r2, r3
    e834:	d902      	bls.n	e83c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    e836:	687b      	ldr	r3, [r7, #4]
    e838:	8a1b      	ldrh	r3, [r3, #16]
    e83a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    e83c:	687b      	ldr	r3, [r7, #4]
    e83e:	68db      	ldr	r3, [r3, #12]
    e840:	461a      	mov	r2, r3
    e842:	7ffb      	ldrb	r3, [r7, #31]
    e844:	2100      	movs	r1, #0
    e846:	4618      	mov	r0, r3
    e848:	4b35      	ldr	r3, [pc, #212]	; (e920 <_usb_d_dev_out_next+0x280>)
    e84a:	4798      	blx	r3
    e84c:	e029      	b.n	e8a2 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    e84e:	687b      	ldr	r3, [r7, #4]
    e850:	8a1b      	ldrh	r3, [r3, #16]
    e852:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e854:	429a      	cmp	r2, r3
    e856:	d90f      	bls.n	e878 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    e858:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    e85a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    e85e:	d903      	bls.n	e868 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    e860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e864:	84fb      	strh	r3, [r7, #38]	; 0x26
    e866:	e011      	b.n	e88c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    e868:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e86a:	8a7b      	ldrh	r3, [r7, #18]
    e86c:	4013      	ands	r3, r2
    e86e:	b29b      	uxth	r3, r3
    e870:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e872:	1ad3      	subs	r3, r2, r3
    e874:	84fb      	strh	r3, [r7, #38]	; 0x26
    e876:	e009      	b.n	e88c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    e878:	687b      	ldr	r3, [r7, #4]
    e87a:	8a1b      	ldrh	r3, [r3, #16]
    e87c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e87e:	429a      	cmp	r2, r3
    e880:	d204      	bcs.n	e88c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    e882:	687a      	ldr	r2, [r7, #4]
    e884:	7cd3      	ldrb	r3, [r2, #19]
    e886:	f043 0320 	orr.w	r3, r3, #32
    e88a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    e88c:	687b      	ldr	r3, [r7, #4]
    e88e:	681a      	ldr	r2, [r3, #0]
    e890:	687b      	ldr	r3, [r7, #4]
    e892:	689b      	ldr	r3, [r3, #8]
    e894:	4413      	add	r3, r2
    e896:	461a      	mov	r2, r3
    e898:	7ffb      	ldrb	r3, [r7, #31]
    e89a:	2100      	movs	r1, #0
    e89c:	4618      	mov	r0, r3
    e89e:	4b20      	ldr	r3, [pc, #128]	; (e920 <_usb_d_dev_out_next+0x280>)
    e8a0:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    e8a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    e8a4:	7ff8      	ldrb	r0, [r7, #31]
    e8a6:	2300      	movs	r3, #0
    e8a8:	2100      	movs	r1, #0
    e8aa:	4c1e      	ldr	r4, [pc, #120]	; (e924 <_usb_d_dev_out_next+0x284>)
    e8ac:	47a0      	blx	r4
			goto _out_rx_exec;
    e8ae:	e01f      	b.n	e8f0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    e8b0:	7bfb      	ldrb	r3, [r7, #15]
    e8b2:	2b00      	cmp	r3, #0
    e8b4:	d006      	beq.n	e8c4 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    e8b6:	7ffb      	ldrb	r3, [r7, #31]
    e8b8:	222d      	movs	r2, #45	; 0x2d
    e8ba:	4619      	mov	r1, r3
    e8bc:	6a38      	ldr	r0, [r7, #32]
    e8be:	4b1a      	ldr	r3, [pc, #104]	; (e928 <_usb_d_dev_out_next+0x288>)
    e8c0:	4798      	blx	r3
    e8c2:	e005      	b.n	e8d0 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    e8c4:	7ffb      	ldrb	r3, [r7, #31]
    e8c6:	2225      	movs	r2, #37	; 0x25
    e8c8:	4619      	mov	r1, r3
    e8ca:	6a38      	ldr	r0, [r7, #32]
    e8cc:	4b16      	ldr	r3, [pc, #88]	; (e928 <_usb_d_dev_out_next+0x288>)
    e8ce:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    e8d0:	7ffb      	ldrb	r3, [r7, #31]
    e8d2:	2b00      	cmp	r3, #0
    e8d4:	d107      	bne.n	e8e6 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    e8d6:	687b      	ldr	r3, [r7, #4]
    e8d8:	68db      	ldr	r3, [r3, #12]
    e8da:	461a      	mov	r2, r3
    e8dc:	7ffb      	ldrb	r3, [r7, #31]
    e8de:	2100      	movs	r1, #0
    e8e0:	4618      	mov	r0, r3
    e8e2:	4b0f      	ldr	r3, [pc, #60]	; (e920 <_usb_d_dev_out_next+0x280>)
    e8e4:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    e8e6:	2100      	movs	r1, #0
    e8e8:	6878      	ldr	r0, [r7, #4]
    e8ea:	4b10      	ldr	r3, [pc, #64]	; (e92c <_usb_d_dev_out_next+0x28c>)
    e8ec:	4798      	blx	r3
	return;
    e8ee:	e031      	b.n	e954 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    e8f0:	78fb      	ldrb	r3, [r7, #3]
    e8f2:	f083 0301 	eor.w	r3, r3, #1
    e8f6:	b2db      	uxtb	r3, r3
    e8f8:	2b00      	cmp	r3, #0
    e8fa:	d025      	beq.n	e948 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    e8fc:	7bfb      	ldrb	r3, [r7, #15]
    e8fe:	2b00      	cmp	r3, #0
    e900:	d018      	beq.n	e934 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    e902:	7ffb      	ldrb	r3, [r7, #31]
    e904:	2101      	movs	r1, #1
    e906:	4618      	mov	r0, r3
    e908:	4b09      	ldr	r3, [pc, #36]	; (e930 <_usb_d_dev_out_next+0x290>)
    e90a:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    e90c:	232d      	movs	r3, #45	; 0x2d
    e90e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    e912:	e012      	b.n	e93a <_usb_d_dev_out_next+0x29a>
    e914:	20008bcc 	.word	0x20008bcc
    e918:	0000de81 	.word	0x0000de81
    e91c:	0001b35d 	.word	0x0001b35d
    e920:	0000dead 	.word	0x0000dead
    e924:	0000e035 	.word	0x0000e035
    e928:	0000d78d 	.word	0x0000d78d
    e92c:	0000f7b1 	.word	0x0000f7b1
    e930:	0000e075 	.word	0x0000e075
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    e934:	2325      	movs	r3, #37	; 0x25
    e936:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    e93a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    e93e:	7ffb      	ldrb	r3, [r7, #31]
    e940:	4619      	mov	r1, r3
    e942:	6a38      	ldr	r0, [r7, #32]
    e944:	4b05      	ldr	r3, [pc, #20]	; (e95c <_usb_d_dev_out_next+0x2bc>)
    e946:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    e948:	7ffb      	ldrb	r3, [r7, #31]
    e94a:	2201      	movs	r2, #1
    e94c:	2100      	movs	r1, #0
    e94e:	4618      	mov	r0, r3
    e950:	4b03      	ldr	r3, [pc, #12]	; (e960 <_usb_d_dev_out_next+0x2c0>)
    e952:	4798      	blx	r3
}
    e954:	372c      	adds	r7, #44	; 0x2c
    e956:	46bd      	mov	sp, r7
    e958:	bd90      	pop	{r4, r7, pc}
    e95a:	bf00      	nop
    e95c:	0000d761 	.word	0x0000d761
    e960:	0000e105 	.word	0x0000e105

0000e964 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    e964:	b580      	push	{r7, lr}
    e966:	b084      	sub	sp, #16
    e968:	af00      	add	r7, sp, #0
    e96a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    e96c:	687b      	ldr	r3, [r7, #4]
    e96e:	7c9b      	ldrb	r3, [r3, #18]
    e970:	f003 030f 	and.w	r3, r3, #15
    e974:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    e976:	687b      	ldr	r3, [r7, #4]
    e978:	7cdb      	ldrb	r3, [r3, #19]
    e97a:	f003 0307 	and.w	r3, r3, #7
    e97e:	b2db      	uxtb	r3, r3
    e980:	2b01      	cmp	r3, #1
    e982:	bf0c      	ite	eq
    e984:	2301      	moveq	r3, #1
    e986:	2300      	movne	r3, #0
    e988:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    e98a:	7bbb      	ldrb	r3, [r7, #14]
    e98c:	f083 0301 	eor.w	r3, r3, #1
    e990:	b2db      	uxtb	r3, r3
    e992:	2b00      	cmp	r3, #0
    e994:	d008      	beq.n	e9a8 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    e996:	7bfb      	ldrb	r3, [r7, #15]
    e998:	4618      	mov	r0, r3
    e99a:	4b20      	ldr	r3, [pc, #128]	; (ea1c <_usb_d_dev_handle_setup+0xb8>)
    e99c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    e99e:	7bfb      	ldrb	r3, [r7, #15]
    e9a0:	4618      	mov	r0, r3
    e9a2:	4b1f      	ldr	r3, [pc, #124]	; (ea20 <_usb_d_dev_handle_setup+0xbc>)
    e9a4:	4798      	blx	r3
		return;
    e9a6:	e036      	b.n	ea16 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    e9a8:	687b      	ldr	r3, [r7, #4]
    e9aa:	7cdb      	ldrb	r3, [r3, #19]
    e9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e9b0:	b2db      	uxtb	r3, r3
    e9b2:	2b00      	cmp	r3, #0
    e9b4:	d010      	beq.n	e9d8 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    e9b6:	687a      	ldr	r2, [r7, #4]
    e9b8:	7cd3      	ldrb	r3, [r2, #19]
    e9ba:	f36f 1386 	bfc	r3, #6, #1
    e9be:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    e9c0:	7bfb      	ldrb	r3, [r7, #15]
    e9c2:	2200      	movs	r2, #0
    e9c4:	2101      	movs	r1, #1
    e9c6:	4618      	mov	r0, r3
    e9c8:	4b16      	ldr	r3, [pc, #88]	; (ea24 <_usb_d_dev_handle_setup+0xc0>)
    e9ca:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    e9cc:	7bfb      	ldrb	r3, [r7, #15]
    e9ce:	2200      	movs	r2, #0
    e9d0:	2100      	movs	r1, #0
    e9d2:	4618      	mov	r0, r3
    e9d4:	4b14      	ldr	r3, [pc, #80]	; (ea28 <_usb_d_dev_handle_setup+0xc4>)
    e9d6:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    e9d8:	687a      	ldr	r2, [r7, #4]
    e9da:	7cd3      	ldrb	r3, [r2, #19]
    e9dc:	f36f 03c3 	bfc	r3, #3, #1
    e9e0:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    e9e2:	7bfb      	ldrb	r3, [r7, #15]
    e9e4:	2100      	movs	r1, #0
    e9e6:	4618      	mov	r0, r3
    e9e8:	4b10      	ldr	r3, [pc, #64]	; (ea2c <_usb_d_dev_handle_setup+0xc8>)
    e9ea:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    e9ec:	7bfb      	ldrb	r3, [r7, #15]
    e9ee:	2101      	movs	r1, #1
    e9f0:	4618      	mov	r0, r3
    e9f2:	4b0e      	ldr	r3, [pc, #56]	; (ea2c <_usb_d_dev_handle_setup+0xc8>)
    e9f4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    e9f6:	7bfb      	ldrb	r3, [r7, #15]
    e9f8:	216f      	movs	r1, #111	; 0x6f
    e9fa:	4618      	mov	r0, r3
    e9fc:	4b0c      	ldr	r3, [pc, #48]	; (ea30 <_usb_d_dev_handle_setup+0xcc>)
    e9fe:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    ea00:	7bfb      	ldrb	r3, [r7, #15]
    ea02:	216f      	movs	r1, #111	; 0x6f
    ea04:	4618      	mov	r0, r3
    ea06:	4b0b      	ldr	r3, [pc, #44]	; (ea34 <_usb_d_dev_handle_setup+0xd0>)
    ea08:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    ea0a:	4b0b      	ldr	r3, [pc, #44]	; (ea38 <_usb_d_dev_handle_setup+0xd4>)
    ea0c:	689b      	ldr	r3, [r3, #8]
    ea0e:	687a      	ldr	r2, [r7, #4]
    ea10:	7c92      	ldrb	r2, [r2, #18]
    ea12:	4610      	mov	r0, r2
    ea14:	4798      	blx	r3
}
    ea16:	3710      	adds	r7, #16
    ea18:	46bd      	mov	sp, r7
    ea1a:	bd80      	pop	{r7, pc}
    ea1c:	0000de09 	.word	0x0000de09
    ea20:	0000ddb5 	.word	0x0000ddb5
    ea24:	0000e0ad 	.word	0x0000e0ad
    ea28:	0000e105 	.word	0x0000e105
    ea2c:	0000e075 	.word	0x0000e075
    ea30:	0000dbb5 	.word	0x0000dbb5
    ea34:	0000dc05 	.word	0x0000dc05
    ea38:	20008b04 	.word	0x20008b04

0000ea3c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    ea3c:	b580      	push	{r7, lr}
    ea3e:	b084      	sub	sp, #16
    ea40:	af00      	add	r7, sp, #0
    ea42:	6078      	str	r0, [r7, #4]
    ea44:	460b      	mov	r3, r1
    ea46:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ea48:	687b      	ldr	r3, [r7, #4]
    ea4a:	7c9b      	ldrb	r3, [r3, #18]
    ea4c:	f003 030f 	and.w	r3, r3, #15
    ea50:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    ea52:	78f9      	ldrb	r1, [r7, #3]
    ea54:	7bfb      	ldrb	r3, [r7, #15]
    ea56:	2200      	movs	r2, #0
    ea58:	4618      	mov	r0, r3
    ea5a:	4b07      	ldr	r3, [pc, #28]	; (ea78 <_usb_d_dev_handle_stall+0x3c>)
    ea5c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    ea5e:	4b07      	ldr	r3, [pc, #28]	; (ea7c <_usb_d_dev_handle_stall+0x40>)
    ea60:	691b      	ldr	r3, [r3, #16]
    ea62:	687a      	ldr	r2, [r7, #4]
    ea64:	7c90      	ldrb	r0, [r2, #18]
    ea66:	687a      	ldr	r2, [r7, #4]
    ea68:	6892      	ldr	r2, [r2, #8]
    ea6a:	2101      	movs	r1, #1
    ea6c:	4798      	blx	r3
}
    ea6e:	bf00      	nop
    ea70:	3710      	adds	r7, #16
    ea72:	46bd      	mov	sp, r7
    ea74:	bd80      	pop	{r7, pc}
    ea76:	bf00      	nop
    ea78:	0000dd69 	.word	0x0000dd69
    ea7c:	20008b04 	.word	0x20008b04

0000ea80 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    ea80:	b580      	push	{r7, lr}
    ea82:	b088      	sub	sp, #32
    ea84:	af00      	add	r7, sp, #0
    ea86:	6078      	str	r0, [r7, #4]
    ea88:	460b      	mov	r3, r1
    ea8a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    ea8c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ea90:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    ea92:	687b      	ldr	r3, [r7, #4]
    ea94:	7c9b      	ldrb	r3, [r3, #18]
    ea96:	f003 030f 	and.w	r3, r3, #15
    ea9a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    ea9c:	4b61      	ldr	r3, [pc, #388]	; (ec24 <_usb_d_dev_handle_trfail+0x1a4>)
    ea9e:	881b      	ldrh	r3, [r3, #0]
    eaa0:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    eaa2:	7efb      	ldrb	r3, [r7, #27]
    eaa4:	015b      	lsls	r3, r3, #5
    eaa6:	4a60      	ldr	r2, [pc, #384]	; (ec28 <_usb_d_dev_handle_trfail+0x1a8>)
    eaa8:	4413      	add	r3, r2
    eaaa:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    eaac:	78fb      	ldrb	r3, [r7, #3]
    eaae:	2b00      	cmp	r3, #0
    eab0:	d006      	beq.n	eac0 <_usb_d_dev_handle_trfail+0x40>
    eab2:	7efb      	ldrb	r3, [r7, #27]
    eab4:	4619      	mov	r1, r3
    eab6:	69f8      	ldr	r0, [r7, #28]
    eab8:	4b5c      	ldr	r3, [pc, #368]	; (ec2c <_usb_d_dev_handle_trfail+0x1ac>)
    eaba:	4798      	blx	r3
    eabc:	4603      	mov	r3, r0
    eabe:	e005      	b.n	eacc <_usb_d_dev_handle_trfail+0x4c>
    eac0:	7efb      	ldrb	r3, [r7, #27]
    eac2:	4619      	mov	r1, r3
    eac4:	69f8      	ldr	r0, [r7, #28]
    eac6:	4b5a      	ldr	r3, [pc, #360]	; (ec30 <_usb_d_dev_handle_trfail+0x1b0>)
    eac8:	4798      	blx	r3
    eaca:	4603      	mov	r3, r0
    eacc:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    eace:	687b      	ldr	r3, [r7, #4]
    ead0:	7cdb      	ldrb	r3, [r3, #19]
    ead2:	f003 0307 	and.w	r3, r3, #7
    ead6:	b2db      	uxtb	r3, r3
    ead8:	2b01      	cmp	r3, #1
    eada:	bf0c      	ite	eq
    eadc:	2301      	moveq	r3, #1
    eade:	2300      	movne	r3, #0
    eae0:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    eae2:	78fb      	ldrb	r3, [r7, #3]
    eae4:	011b      	lsls	r3, r3, #4
    eae6:	697a      	ldr	r2, [r7, #20]
    eae8:	4413      	add	r3, r2
    eaea:	7a9b      	ldrb	r3, [r3, #10]
    eaec:	b2db      	uxtb	r3, r3
    eaee:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    eaf0:	7cfb      	ldrb	r3, [r7, #19]
    eaf2:	2b02      	cmp	r3, #2
    eaf4:	d12f      	bne.n	eb56 <_usb_d_dev_handle_trfail+0xd6>
    eaf6:	7b3b      	ldrb	r3, [r7, #12]
    eaf8:	f003 0301 	and.w	r3, r3, #1
    eafc:	b2db      	uxtb	r3, r3
    eafe:	2b00      	cmp	r3, #0
    eb00:	d029      	beq.n	eb56 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    eb02:	78fb      	ldrb	r3, [r7, #3]
    eb04:	011b      	lsls	r3, r3, #4
    eb06:	697a      	ldr	r2, [r7, #20]
    eb08:	441a      	add	r2, r3
    eb0a:	7a93      	ldrb	r3, [r2, #10]
    eb0c:	f36f 0300 	bfc	r3, #0, #1
    eb10:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    eb12:	78fb      	ldrb	r3, [r7, #3]
    eb14:	f107 0220 	add.w	r2, r7, #32
    eb18:	4413      	add	r3, r2
    eb1a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    eb1e:	7efb      	ldrb	r3, [r7, #27]
    eb20:	4619      	mov	r1, r3
    eb22:	69f8      	ldr	r0, [r7, #28]
    eb24:	4b43      	ldr	r3, [pc, #268]	; (ec34 <_usb_d_dev_handle_trfail+0x1b4>)
    eb26:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    eb28:	78fb      	ldrb	r3, [r7, #3]
    eb2a:	f107 0220 	add.w	r2, r7, #32
    eb2e:	4413      	add	r3, r2
    eb30:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    eb34:	7efb      	ldrb	r3, [r7, #27]
    eb36:	4619      	mov	r1, r3
    eb38:	69f8      	ldr	r0, [r7, #28]
    eb3a:	4b3f      	ldr	r3, [pc, #252]	; (ec38 <_usb_d_dev_handle_trfail+0x1b8>)
    eb3c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    eb3e:	78fb      	ldrb	r3, [r7, #3]
    eb40:	2b00      	cmp	r3, #0
    eb42:	bf14      	ite	ne
    eb44:	2301      	movne	r3, #1
    eb46:	2300      	moveq	r3, #0
    eb48:	b2db      	uxtb	r3, r3
    eb4a:	2204      	movs	r2, #4
    eb4c:	4619      	mov	r1, r3
    eb4e:	6878      	ldr	r0, [r7, #4]
    eb50:	4b3a      	ldr	r3, [pc, #232]	; (ec3c <_usb_d_dev_handle_trfail+0x1bc>)
    eb52:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    eb54:	e062      	b.n	ec1c <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    eb56:	7b3b      	ldrb	r3, [r7, #12]
    eb58:	f003 0302 	and.w	r3, r3, #2
    eb5c:	b2db      	uxtb	r3, r3
    eb5e:	2b00      	cmp	r3, #0
    eb60:	d040      	beq.n	ebe4 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    eb62:	78fb      	ldrb	r3, [r7, #3]
    eb64:	011b      	lsls	r3, r3, #4
    eb66:	697a      	ldr	r2, [r7, #20]
    eb68:	441a      	add	r2, r3
    eb6a:	7a93      	ldrb	r3, [r2, #10]
    eb6c:	f36f 0341 	bfc	r3, #1, #1
    eb70:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    eb72:	78fb      	ldrb	r3, [r7, #3]
    eb74:	f107 0220 	add.w	r2, r7, #32
    eb78:	4413      	add	r3, r2
    eb7a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    eb7e:	7efb      	ldrb	r3, [r7, #27]
    eb80:	4619      	mov	r1, r3
    eb82:	69f8      	ldr	r0, [r7, #28]
    eb84:	4b2b      	ldr	r3, [pc, #172]	; (ec34 <_usb_d_dev_handle_trfail+0x1b4>)
    eb86:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    eb88:	78fb      	ldrb	r3, [r7, #3]
    eb8a:	f107 0220 	add.w	r2, r7, #32
    eb8e:	4413      	add	r3, r2
    eb90:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    eb94:	7efb      	ldrb	r3, [r7, #27]
    eb96:	4619      	mov	r1, r3
    eb98:	69f8      	ldr	r0, [r7, #28]
    eb9a:	4b27      	ldr	r3, [pc, #156]	; (ec38 <_usb_d_dev_handle_trfail+0x1b8>)
    eb9c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    eb9e:	7cbb      	ldrb	r3, [r7, #18]
    eba0:	2b00      	cmp	r3, #0
    eba2:	d03b      	beq.n	ec1c <_usb_d_dev_handle_trfail+0x19c>
    eba4:	687b      	ldr	r3, [r7, #4]
    eba6:	7cdb      	ldrb	r3, [r3, #19]
    eba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ebac:	b2db      	uxtb	r3, r3
    ebae:	2b00      	cmp	r3, #0
    ebb0:	d034      	beq.n	ec1c <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    ebb2:	687b      	ldr	r3, [r7, #4]
    ebb4:	7cdb      	ldrb	r3, [r3, #19]
    ebb6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ebba:	b2db      	uxtb	r3, r3
    ebbc:	461a      	mov	r2, r3
    ebbe:	78fb      	ldrb	r3, [r7, #3]
    ebc0:	4293      	cmp	r3, r2
    ebc2:	d02b      	beq.n	ec1c <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    ebc4:	687b      	ldr	r3, [r7, #4]
    ebc6:	7cdb      	ldrb	r3, [r3, #19]
    ebc8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ebcc:	b2db      	uxtb	r3, r3
    ebce:	2b00      	cmp	r3, #0
    ebd0:	bf14      	ite	ne
    ebd2:	2301      	movne	r3, #1
    ebd4:	2300      	moveq	r3, #0
    ebd6:	b2db      	uxtb	r3, r3
    ebd8:	2200      	movs	r2, #0
    ebda:	4619      	mov	r1, r3
    ebdc:	6878      	ldr	r0, [r7, #4]
    ebde:	4b17      	ldr	r3, [pc, #92]	; (ec3c <_usb_d_dev_handle_trfail+0x1bc>)
    ebe0:	4798      	blx	r3
}
    ebe2:	e01b      	b.n	ec1c <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    ebe4:	78fa      	ldrb	r2, [r7, #3]
    ebe6:	7efb      	ldrb	r3, [r7, #27]
    ebe8:	4611      	mov	r1, r2
    ebea:	4618      	mov	r0, r3
    ebec:	4b14      	ldr	r3, [pc, #80]	; (ec40 <_usb_d_dev_handle_trfail+0x1c0>)
    ebee:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    ebf0:	78fb      	ldrb	r3, [r7, #3]
    ebf2:	f107 0220 	add.w	r2, r7, #32
    ebf6:	4413      	add	r3, r2
    ebf8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ebfc:	7efb      	ldrb	r3, [r7, #27]
    ebfe:	4619      	mov	r1, r3
    ec00:	69f8      	ldr	r0, [r7, #28]
    ec02:	4b0c      	ldr	r3, [pc, #48]	; (ec34 <_usb_d_dev_handle_trfail+0x1b4>)
    ec04:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ec06:	78fb      	ldrb	r3, [r7, #3]
    ec08:	f107 0220 	add.w	r2, r7, #32
    ec0c:	4413      	add	r3, r2
    ec0e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ec12:	7efb      	ldrb	r3, [r7, #27]
    ec14:	4619      	mov	r1, r3
    ec16:	69f8      	ldr	r0, [r7, #28]
    ec18:	4b07      	ldr	r3, [pc, #28]	; (ec38 <_usb_d_dev_handle_trfail+0x1b8>)
    ec1a:	4798      	blx	r3
}
    ec1c:	bf00      	nop
    ec1e:	3720      	adds	r7, #32
    ec20:	46bd      	mov	sp, r7
    ec22:	bd80      	pop	{r7, pc}
    ec24:	0001fc28 	.word	0x0001fc28
    ec28:	20008bcc 	.word	0x20008bcc
    ec2c:	0000d7e9 	.word	0x0000d7e9
    ec30:	0000d7b9 	.word	0x0000d7b9
    ec34:	0000d68d 	.word	0x0000d68d
    ec38:	0000d78d 	.word	0x0000d78d
    ec3c:	0000f7f9 	.word	0x0000f7f9
    ec40:	0000e075 	.word	0x0000e075

0000ec44 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    ec44:	b580      	push	{r7, lr}
    ec46:	b082      	sub	sp, #8
    ec48:	af00      	add	r7, sp, #0
    ec4a:	6078      	str	r0, [r7, #4]
    ec4c:	460b      	mov	r3, r1
    ec4e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    ec50:	78fb      	ldrb	r3, [r7, #3]
    ec52:	f003 0310 	and.w	r3, r3, #16
    ec56:	2b00      	cmp	r3, #0
    ec58:	d003      	beq.n	ec62 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    ec5a:	6878      	ldr	r0, [r7, #4]
    ec5c:	4b0c      	ldr	r3, [pc, #48]	; (ec90 <_usb_d_dev_trans_setup_isr+0x4c>)
    ec5e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    ec60:	e012      	b.n	ec88 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    ec62:	78fb      	ldrb	r3, [r7, #3]
    ec64:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ec68:	2b00      	cmp	r3, #0
    ec6a:	d004      	beq.n	ec76 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    ec6c:	2101      	movs	r1, #1
    ec6e:	6878      	ldr	r0, [r7, #4]
    ec70:	4b08      	ldr	r3, [pc, #32]	; (ec94 <_usb_d_dev_trans_setup_isr+0x50>)
    ec72:	4798      	blx	r3
}
    ec74:	e008      	b.n	ec88 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    ec76:	78fb      	ldrb	r3, [r7, #3]
    ec78:	f003 0320 	and.w	r3, r3, #32
    ec7c:	2b00      	cmp	r3, #0
    ec7e:	d003      	beq.n	ec88 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    ec80:	2100      	movs	r1, #0
    ec82:	6878      	ldr	r0, [r7, #4]
    ec84:	4b03      	ldr	r3, [pc, #12]	; (ec94 <_usb_d_dev_trans_setup_isr+0x50>)
    ec86:	4798      	blx	r3
}
    ec88:	bf00      	nop
    ec8a:	3708      	adds	r7, #8
    ec8c:	46bd      	mov	sp, r7
    ec8e:	bd80      	pop	{r7, pc}
    ec90:	0000e965 	.word	0x0000e965
    ec94:	0000ea3d 	.word	0x0000ea3d

0000ec98 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    ec98:	b580      	push	{r7, lr}
    ec9a:	b082      	sub	sp, #8
    ec9c:	af00      	add	r7, sp, #0
    ec9e:	6078      	str	r0, [r7, #4]
    eca0:	460b      	mov	r3, r1
    eca2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    eca4:	78fb      	ldrb	r3, [r7, #3]
    eca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ecaa:	2b00      	cmp	r3, #0
    ecac:	d004      	beq.n	ecb8 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    ecae:	2101      	movs	r1, #1
    ecb0:	6878      	ldr	r0, [r7, #4]
    ecb2:	4b1a      	ldr	r3, [pc, #104]	; (ed1c <_usb_d_dev_trans_in_isr+0x84>)
    ecb4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    ecb6:	e02c      	b.n	ed12 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    ecb8:	78fb      	ldrb	r3, [r7, #3]
    ecba:	f003 0308 	and.w	r3, r3, #8
    ecbe:	2b00      	cmp	r3, #0
    ecc0:	d004      	beq.n	eccc <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    ecc2:	2101      	movs	r1, #1
    ecc4:	6878      	ldr	r0, [r7, #4]
    ecc6:	4b16      	ldr	r3, [pc, #88]	; (ed20 <_usb_d_dev_trans_in_isr+0x88>)
    ecc8:	4798      	blx	r3
}
    ecca:	e022      	b.n	ed12 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    eccc:	78fb      	ldrb	r3, [r7, #3]
    ecce:	f003 0302 	and.w	r3, r3, #2
    ecd2:	2b00      	cmp	r3, #0
    ecd4:	d004      	beq.n	ece0 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    ecd6:	2101      	movs	r1, #1
    ecd8:	6878      	ldr	r0, [r7, #4]
    ecda:	4b12      	ldr	r3, [pc, #72]	; (ed24 <_usb_d_dev_trans_in_isr+0x8c>)
    ecdc:	4798      	blx	r3
}
    ecde:	e018      	b.n	ed12 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    ece0:	687b      	ldr	r3, [r7, #4]
    ece2:	7cdb      	ldrb	r3, [r3, #19]
    ece4:	f003 0307 	and.w	r3, r3, #7
    ece8:	b2db      	uxtb	r3, r3
    ecea:	2b01      	cmp	r3, #1
    ecec:	d111      	bne.n	ed12 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    ecee:	78fb      	ldrb	r3, [r7, #3]
    ecf0:	f003 0304 	and.w	r3, r3, #4
    ecf4:	2b00      	cmp	r3, #0
    ecf6:	d004      	beq.n	ed02 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    ecf8:	2100      	movs	r1, #0
    ecfa:	6878      	ldr	r0, [r7, #4]
    ecfc:	4b08      	ldr	r3, [pc, #32]	; (ed20 <_usb_d_dev_trans_in_isr+0x88>)
    ecfe:	4798      	blx	r3
}
    ed00:	e007      	b.n	ed12 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    ed02:	78fb      	ldrb	r3, [r7, #3]
    ed04:	f003 0310 	and.w	r3, r3, #16
    ed08:	2b00      	cmp	r3, #0
    ed0a:	d002      	beq.n	ed12 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    ed0c:	6878      	ldr	r0, [r7, #4]
    ed0e:	4b06      	ldr	r3, [pc, #24]	; (ed28 <_usb_d_dev_trans_in_isr+0x90>)
    ed10:	4798      	blx	r3
}
    ed12:	bf00      	nop
    ed14:	3708      	adds	r7, #8
    ed16:	46bd      	mov	sp, r7
    ed18:	bd80      	pop	{r7, pc}
    ed1a:	bf00      	nop
    ed1c:	0000ea3d 	.word	0x0000ea3d
    ed20:	0000ea81 	.word	0x0000ea81
    ed24:	0000e489 	.word	0x0000e489
    ed28:	0000e965 	.word	0x0000e965

0000ed2c <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    ed2c:	b580      	push	{r7, lr}
    ed2e:	b082      	sub	sp, #8
    ed30:	af00      	add	r7, sp, #0
    ed32:	6078      	str	r0, [r7, #4]
    ed34:	460b      	mov	r3, r1
    ed36:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    ed38:	78fb      	ldrb	r3, [r7, #3]
    ed3a:	f003 0320 	and.w	r3, r3, #32
    ed3e:	2b00      	cmp	r3, #0
    ed40:	d004      	beq.n	ed4c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    ed42:	2100      	movs	r1, #0
    ed44:	6878      	ldr	r0, [r7, #4]
    ed46:	4b1a      	ldr	r3, [pc, #104]	; (edb0 <_usb_d_dev_trans_out_isr+0x84>)
    ed48:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    ed4a:	e02c      	b.n	eda6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    ed4c:	78fb      	ldrb	r3, [r7, #3]
    ed4e:	f003 0304 	and.w	r3, r3, #4
    ed52:	2b00      	cmp	r3, #0
    ed54:	d004      	beq.n	ed60 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    ed56:	2100      	movs	r1, #0
    ed58:	6878      	ldr	r0, [r7, #4]
    ed5a:	4b16      	ldr	r3, [pc, #88]	; (edb4 <_usb_d_dev_trans_out_isr+0x88>)
    ed5c:	4798      	blx	r3
}
    ed5e:	e022      	b.n	eda6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    ed60:	78fb      	ldrb	r3, [r7, #3]
    ed62:	f003 0301 	and.w	r3, r3, #1
    ed66:	2b00      	cmp	r3, #0
    ed68:	d004      	beq.n	ed74 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    ed6a:	2101      	movs	r1, #1
    ed6c:	6878      	ldr	r0, [r7, #4]
    ed6e:	4b12      	ldr	r3, [pc, #72]	; (edb8 <_usb_d_dev_trans_out_isr+0x8c>)
    ed70:	4798      	blx	r3
}
    ed72:	e018      	b.n	eda6 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    ed74:	687b      	ldr	r3, [r7, #4]
    ed76:	7cdb      	ldrb	r3, [r3, #19]
    ed78:	f003 0307 	and.w	r3, r3, #7
    ed7c:	b2db      	uxtb	r3, r3
    ed7e:	2b01      	cmp	r3, #1
    ed80:	d111      	bne.n	eda6 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    ed82:	78fb      	ldrb	r3, [r7, #3]
    ed84:	f003 0308 	and.w	r3, r3, #8
    ed88:	2b00      	cmp	r3, #0
    ed8a:	d004      	beq.n	ed96 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    ed8c:	2101      	movs	r1, #1
    ed8e:	6878      	ldr	r0, [r7, #4]
    ed90:	4b08      	ldr	r3, [pc, #32]	; (edb4 <_usb_d_dev_trans_out_isr+0x88>)
    ed92:	4798      	blx	r3
}
    ed94:	e007      	b.n	eda6 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    ed96:	78fb      	ldrb	r3, [r7, #3]
    ed98:	f003 0310 	and.w	r3, r3, #16
    ed9c:	2b00      	cmp	r3, #0
    ed9e:	d002      	beq.n	eda6 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    eda0:	6878      	ldr	r0, [r7, #4]
    eda2:	4b06      	ldr	r3, [pc, #24]	; (edbc <_usb_d_dev_trans_out_isr+0x90>)
    eda4:	4798      	blx	r3
}
    eda6:	bf00      	nop
    eda8:	3708      	adds	r7, #8
    edaa:	46bd      	mov	sp, r7
    edac:	bd80      	pop	{r7, pc}
    edae:	bf00      	nop
    edb0:	0000ea3d 	.word	0x0000ea3d
    edb4:	0000ea81 	.word	0x0000ea81
    edb8:	0000e6a1 	.word	0x0000e6a1
    edbc:	0000e965 	.word	0x0000e965

0000edc0 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    edc0:	b580      	push	{r7, lr}
    edc2:	b084      	sub	sp, #16
    edc4:	af00      	add	r7, sp, #0
    edc6:	6078      	str	r0, [r7, #4]
    edc8:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    edca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    edce:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    edd0:	683b      	ldr	r3, [r7, #0]
    edd2:	7c9b      	ldrb	r3, [r3, #18]
    edd4:	f003 030f 	and.w	r3, r3, #15
    edd8:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    edda:	7afb      	ldrb	r3, [r7, #11]
    eddc:	2201      	movs	r2, #1
    edde:	409a      	lsls	r2, r3
    ede0:	687b      	ldr	r3, [r7, #4]
    ede2:	4013      	ands	r3, r2
    ede4:	2b00      	cmp	r3, #0
    ede6:	d03d      	beq.n	ee64 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    ede8:	7afb      	ldrb	r3, [r7, #11]
    edea:	68fa      	ldr	r2, [r7, #12]
    edec:	3308      	adds	r3, #8
    edee:	015b      	lsls	r3, r3, #5
    edf0:	4413      	add	r3, r2
    edf2:	3307      	adds	r3, #7
    edf4:	781b      	ldrb	r3, [r3, #0]
    edf6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    edf8:	7afb      	ldrb	r3, [r7, #11]
    edfa:	68fa      	ldr	r2, [r7, #12]
    edfc:	015b      	lsls	r3, r3, #5
    edfe:	4413      	add	r3, r2
    ee00:	f203 1309 	addw	r3, r3, #265	; 0x109
    ee04:	781b      	ldrb	r3, [r3, #0]
    ee06:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    ee08:	7aba      	ldrb	r2, [r7, #10]
    ee0a:	7a7b      	ldrb	r3, [r7, #9]
    ee0c:	4013      	ands	r3, r2
    ee0e:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    ee10:	7abb      	ldrb	r3, [r7, #10]
    ee12:	2b00      	cmp	r3, #0
    ee14:	d027      	beq.n	ee66 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    ee16:	683b      	ldr	r3, [r7, #0]
    ee18:	7cdb      	ldrb	r3, [r3, #19]
    ee1a:	f003 0307 	and.w	r3, r3, #7
    ee1e:	b2db      	uxtb	r3, r3
    ee20:	2b01      	cmp	r3, #1
    ee22:	d10c      	bne.n	ee3e <_usb_d_dev_handle_eps+0x7e>
    ee24:	683b      	ldr	r3, [r7, #0]
    ee26:	7cdb      	ldrb	r3, [r3, #19]
    ee28:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ee2c:	b2db      	uxtb	r3, r3
    ee2e:	2b00      	cmp	r3, #0
    ee30:	d105      	bne.n	ee3e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    ee32:	7abb      	ldrb	r3, [r7, #10]
    ee34:	4619      	mov	r1, r3
    ee36:	6838      	ldr	r0, [r7, #0]
    ee38:	4b0c      	ldr	r3, [pc, #48]	; (ee6c <_usb_d_dev_handle_eps+0xac>)
    ee3a:	4798      	blx	r3
    ee3c:	e013      	b.n	ee66 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    ee3e:	683b      	ldr	r3, [r7, #0]
    ee40:	7cdb      	ldrb	r3, [r3, #19]
    ee42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    ee46:	b2db      	uxtb	r3, r3
    ee48:	2b00      	cmp	r3, #0
    ee4a:	d005      	beq.n	ee58 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    ee4c:	7abb      	ldrb	r3, [r7, #10]
    ee4e:	4619      	mov	r1, r3
    ee50:	6838      	ldr	r0, [r7, #0]
    ee52:	4b07      	ldr	r3, [pc, #28]	; (ee70 <_usb_d_dev_handle_eps+0xb0>)
    ee54:	4798      	blx	r3
    ee56:	e006      	b.n	ee66 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    ee58:	7abb      	ldrb	r3, [r7, #10]
    ee5a:	4619      	mov	r1, r3
    ee5c:	6838      	ldr	r0, [r7, #0]
    ee5e:	4b05      	ldr	r3, [pc, #20]	; (ee74 <_usb_d_dev_handle_eps+0xb4>)
    ee60:	4798      	blx	r3
    ee62:	e000      	b.n	ee66 <_usb_d_dev_handle_eps+0xa6>
		return;
    ee64:	bf00      	nop
		}
	}
}
    ee66:	3710      	adds	r7, #16
    ee68:	46bd      	mov	sp, r7
    ee6a:	bd80      	pop	{r7, pc}
    ee6c:	0000ec45 	.word	0x0000ec45
    ee70:	0000ec99 	.word	0x0000ec99
    ee74:	0000ed2d 	.word	0x0000ed2d

0000ee78 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    ee78:	b580      	push	{r7, lr}
    ee7a:	b084      	sub	sp, #16
    ee7c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    ee7e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ee82:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    ee84:	68bb      	ldr	r3, [r7, #8]
    ee86:	8c1b      	ldrh	r3, [r3, #32]
    ee88:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    ee8a:	88fb      	ldrh	r3, [r7, #6]
    ee8c:	2b00      	cmp	r3, #0
    ee8e:	d104      	bne.n	ee9a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    ee90:	4b13      	ldr	r3, [pc, #76]	; (eee0 <_usb_d_dev_handler+0x68>)
    ee92:	4798      	blx	r3
    ee94:	4603      	mov	r3, r0
    ee96:	2b00      	cmp	r3, #0
    ee98:	d11e      	bne.n	eed8 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    ee9a:	2300      	movs	r3, #0
    ee9c:	73fb      	strb	r3, [r7, #15]
    ee9e:	e017      	b.n	eed0 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    eea0:	7bfa      	ldrb	r2, [r7, #15]
    eea2:	4613      	mov	r3, r2
    eea4:	009b      	lsls	r3, r3, #2
    eea6:	4413      	add	r3, r2
    eea8:	009b      	lsls	r3, r3, #2
    eeaa:	3310      	adds	r3, #16
    eeac:	4a0d      	ldr	r2, [pc, #52]	; (eee4 <_usb_d_dev_handler+0x6c>)
    eeae:	4413      	add	r3, r2
    eeb0:	3304      	adds	r3, #4
    eeb2:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    eeb4:	683b      	ldr	r3, [r7, #0]
    eeb6:	7c9b      	ldrb	r3, [r3, #18]
    eeb8:	2bff      	cmp	r3, #255	; 0xff
    eeba:	d005      	beq.n	eec8 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    eebc:	88fb      	ldrh	r3, [r7, #6]
    eebe:	6839      	ldr	r1, [r7, #0]
    eec0:	4618      	mov	r0, r3
    eec2:	4b09      	ldr	r3, [pc, #36]	; (eee8 <_usb_d_dev_handler+0x70>)
    eec4:	4798      	blx	r3
    eec6:	e000      	b.n	eeca <_usb_d_dev_handler+0x52>
			continue;
    eec8:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    eeca:	7bfb      	ldrb	r3, [r7, #15]
    eecc:	3301      	adds	r3, #1
    eece:	73fb      	strb	r3, [r7, #15]
    eed0:	7bfb      	ldrb	r3, [r7, #15]
    eed2:	2b08      	cmp	r3, #8
    eed4:	d9e4      	bls.n	eea0 <_usb_d_dev_handler+0x28>
    eed6:	e000      	b.n	eeda <_usb_d_dev_handler+0x62>
			return;
    eed8:	bf00      	nop
	}
}
    eeda:	3710      	adds	r7, #16
    eedc:	46bd      	mov	sp, r7
    eede:	bd80      	pop	{r7, pc}
    eee0:	0000e3d1 	.word	0x0000e3d1
    eee4:	20008b04 	.word	0x20008b04
    eee8:	0000edc1 	.word	0x0000edc1

0000eeec <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    eeec:	b580      	push	{r7, lr}
    eeee:	b082      	sub	sp, #8
    eef0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    eef2:	2300      	movs	r3, #0
    eef4:	71fb      	strb	r3, [r7, #7]
    eef6:	e023      	b.n	ef40 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    eef8:	79fa      	ldrb	r2, [r7, #7]
    eefa:	4613      	mov	r3, r2
    eefc:	009b      	lsls	r3, r3, #2
    eefe:	4413      	add	r3, r2
    ef00:	009b      	lsls	r3, r3, #2
    ef02:	3310      	adds	r3, #16
    ef04:	4a14      	ldr	r2, [pc, #80]	; (ef58 <_usb_d_dev_reset_epts+0x6c>)
    ef06:	4413      	add	r3, r2
    ef08:	3304      	adds	r3, #4
    ef0a:	2103      	movs	r1, #3
    ef0c:	4618      	mov	r0, r3
    ef0e:	4b13      	ldr	r3, [pc, #76]	; (ef5c <_usb_d_dev_reset_epts+0x70>)
    ef10:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    ef12:	79fa      	ldrb	r2, [r7, #7]
    ef14:	4910      	ldr	r1, [pc, #64]	; (ef58 <_usb_d_dev_reset_epts+0x6c>)
    ef16:	4613      	mov	r3, r2
    ef18:	009b      	lsls	r3, r3, #2
    ef1a:	4413      	add	r3, r2
    ef1c:	009b      	lsls	r3, r3, #2
    ef1e:	440b      	add	r3, r1
    ef20:	3326      	adds	r3, #38	; 0x26
    ef22:	22ff      	movs	r2, #255	; 0xff
    ef24:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    ef26:	79fa      	ldrb	r2, [r7, #7]
    ef28:	490b      	ldr	r1, [pc, #44]	; (ef58 <_usb_d_dev_reset_epts+0x6c>)
    ef2a:	4613      	mov	r3, r2
    ef2c:	009b      	lsls	r3, r3, #2
    ef2e:	4413      	add	r3, r2
    ef30:	009b      	lsls	r3, r3, #2
    ef32:	440b      	add	r3, r1
    ef34:	3327      	adds	r3, #39	; 0x27
    ef36:	2200      	movs	r2, #0
    ef38:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    ef3a:	79fb      	ldrb	r3, [r7, #7]
    ef3c:	3301      	adds	r3, #1
    ef3e:	71fb      	strb	r3, [r7, #7]
    ef40:	79fb      	ldrb	r3, [r7, #7]
    ef42:	2b08      	cmp	r3, #8
    ef44:	d9d8      	bls.n	eef8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    ef46:	22a0      	movs	r2, #160	; 0xa0
    ef48:	2100      	movs	r1, #0
    ef4a:	4805      	ldr	r0, [pc, #20]	; (ef60 <_usb_d_dev_reset_epts+0x74>)
    ef4c:	4b05      	ldr	r3, [pc, #20]	; (ef64 <_usb_d_dev_reset_epts+0x78>)
    ef4e:	4798      	blx	r3
}
    ef50:	bf00      	nop
    ef52:	3708      	adds	r7, #8
    ef54:	46bd      	mov	sp, r7
    ef56:	bd80      	pop	{r7, pc}
    ef58:	20008b04 	.word	0x20008b04
    ef5c:	0000f7b1 	.word	0x0000f7b1
    ef60:	20008bcc 	.word	0x20008bcc
    ef64:	0001b491 	.word	0x0001b491

0000ef68 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    ef68:	b580      	push	{r7, lr}
    ef6a:	b084      	sub	sp, #16
    ef6c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    ef6e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ef72:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    ef74:	2301      	movs	r3, #1
    ef76:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    ef78:	2304      	movs	r3, #4
    ef7a:	713b      	strb	r3, [r7, #4]
    ef7c:	2300      	movs	r3, #0
    ef7e:	717b      	strb	r3, [r7, #5]
    ef80:	2300      	movs	r3, #0
    ef82:	71bb      	strb	r3, [r7, #6]
    ef84:	2300      	movs	r3, #0
    ef86:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    ef88:	2101      	movs	r1, #1
    ef8a:	68f8      	ldr	r0, [r7, #12]
    ef8c:	4b26      	ldr	r3, [pc, #152]	; (f028 <_usb_d_dev_init+0xc0>)
    ef8e:	4798      	blx	r3
    ef90:	4603      	mov	r3, r0
    ef92:	f083 0301 	eor.w	r3, r3, #1
    ef96:	b2db      	uxtb	r3, r3
    ef98:	2b00      	cmp	r3, #0
    ef9a:	d011      	beq.n	efc0 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    ef9c:	2102      	movs	r1, #2
    ef9e:	68f8      	ldr	r0, [r7, #12]
    efa0:	4b22      	ldr	r3, [pc, #136]	; (f02c <_usb_d_dev_init+0xc4>)
    efa2:	4798      	blx	r3
    efa4:	4603      	mov	r3, r0
    efa6:	2b00      	cmp	r3, #0
    efa8:	d006      	beq.n	efb8 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    efaa:	68f8      	ldr	r0, [r7, #12]
    efac:	4b20      	ldr	r3, [pc, #128]	; (f030 <_usb_d_dev_init+0xc8>)
    efae:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    efb0:	2102      	movs	r1, #2
    efb2:	68f8      	ldr	r0, [r7, #12]
    efb4:	4b1f      	ldr	r3, [pc, #124]	; (f034 <_usb_d_dev_init+0xcc>)
    efb6:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    efb8:	2101      	movs	r1, #1
    efba:	68f8      	ldr	r0, [r7, #12]
    efbc:	4b1e      	ldr	r3, [pc, #120]	; (f038 <_usb_d_dev_init+0xd0>)
    efbe:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    efc0:	2101      	movs	r1, #1
    efc2:	68f8      	ldr	r0, [r7, #12]
    efc4:	4b1b      	ldr	r3, [pc, #108]	; (f034 <_usb_d_dev_init+0xcc>)
    efc6:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    efc8:	4b1c      	ldr	r3, [pc, #112]	; (f03c <_usb_d_dev_init+0xd4>)
    efca:	4a1d      	ldr	r2, [pc, #116]	; (f040 <_usb_d_dev_init+0xd8>)
    efcc:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    efce:	4b1b      	ldr	r3, [pc, #108]	; (f03c <_usb_d_dev_init+0xd4>)
    efd0:	4a1b      	ldr	r2, [pc, #108]	; (f040 <_usb_d_dev_init+0xd8>)
    efd2:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    efd4:	4b19      	ldr	r3, [pc, #100]	; (f03c <_usb_d_dev_init+0xd4>)
    efd6:	4a1a      	ldr	r2, [pc, #104]	; (f040 <_usb_d_dev_init+0xd8>)
    efd8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    efda:	4b18      	ldr	r3, [pc, #96]	; (f03c <_usb_d_dev_init+0xd4>)
    efdc:	4a18      	ldr	r2, [pc, #96]	; (f040 <_usb_d_dev_init+0xd8>)
    efde:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    efe0:	4b16      	ldr	r3, [pc, #88]	; (f03c <_usb_d_dev_init+0xd4>)
    efe2:	4a17      	ldr	r2, [pc, #92]	; (f040 <_usb_d_dev_init+0xd8>)
    efe4:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    efe6:	4b17      	ldr	r3, [pc, #92]	; (f044 <_usb_d_dev_init+0xdc>)
    efe8:	4798      	blx	r3

	_usb_load_calib();
    efea:	4b17      	ldr	r3, [pc, #92]	; (f048 <_usb_d_dev_init+0xe0>)
    efec:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    efee:	2104      	movs	r1, #4
    eff0:	68f8      	ldr	r0, [r7, #12]
    eff2:	4b11      	ldr	r3, [pc, #68]	; (f038 <_usb_d_dev_init+0xd0>)
    eff4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    eff6:	4b15      	ldr	r3, [pc, #84]	; (f04c <_usb_d_dev_init+0xe4>)
    eff8:	4619      	mov	r1, r3
    effa:	68f8      	ldr	r0, [r7, #12]
    effc:	4b14      	ldr	r3, [pc, #80]	; (f050 <_usb_d_dev_init+0xe8>)
    effe:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    f000:	7afb      	ldrb	r3, [r7, #11]
    f002:	f107 0210 	add.w	r2, r7, #16
    f006:	4413      	add	r3, r2
    f008:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    f00c:	f043 0301 	orr.w	r3, r3, #1
    f010:	b2db      	uxtb	r3, r3
    f012:	b29b      	uxth	r3, r3
    f014:	4619      	mov	r1, r3
    f016:	68f8      	ldr	r0, [r7, #12]
    f018:	4b0e      	ldr	r3, [pc, #56]	; (f054 <_usb_d_dev_init+0xec>)
    f01a:	4798      	blx	r3

	return ERR_NONE;
    f01c:	2300      	movs	r3, #0
}
    f01e:	4618      	mov	r0, r3
    f020:	3710      	adds	r7, #16
    f022:	46bd      	mov	sp, r7
    f024:	bd80      	pop	{r7, pc}
    f026:	bf00      	nop
    f028:	0000d601 	.word	0x0000d601
    f02c:	0000d951 	.word	0x0000d951
    f030:	0000d925 	.word	0x0000d925
    f034:	0000d5d7 	.word	0x0000d5d7
    f038:	0000d981 	.word	0x0000d981
    f03c:	20008b04 	.word	0x20008b04
    f040:	0000da49 	.word	0x0000da49
    f044:	0000eeed 	.word	0x0000eeed
    f048:	0000da61 	.word	0x0000da61
    f04c:	20008bcc 	.word	0x20008bcc
    f050:	0000da2d 	.word	0x0000da2d
    f054:	0000d9f1 	.word	0x0000d9f1

0000f058 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    f058:	b580      	push	{r7, lr}
    f05a:	b082      	sub	sp, #8
    f05c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    f05e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f062:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    f064:	2103      	movs	r1, #3
    f066:	6878      	ldr	r0, [r7, #4]
    f068:	4b17      	ldr	r3, [pc, #92]	; (f0c8 <_usb_d_dev_enable+0x70>)
    f06a:	4798      	blx	r3
    f06c:	4603      	mov	r3, r0
    f06e:	2b00      	cmp	r3, #0
    f070:	d002      	beq.n	f078 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    f072:	f06f 0310 	mvn.w	r3, #16
    f076:	e023      	b.n	f0c0 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    f078:	6878      	ldr	r0, [r7, #4]
    f07a:	4b14      	ldr	r3, [pc, #80]	; (f0cc <_usb_d_dev_enable+0x74>)
    f07c:	4798      	blx	r3
    f07e:	4603      	mov	r3, r0
    f080:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    f082:	78fb      	ldrb	r3, [r7, #3]
    f084:	f003 0302 	and.w	r3, r3, #2
    f088:	2b00      	cmp	r3, #0
    f08a:	d107      	bne.n	f09c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    f08c:	78fb      	ldrb	r3, [r7, #3]
    f08e:	f043 0302 	orr.w	r3, r3, #2
    f092:	b2db      	uxtb	r3, r3
    f094:	4619      	mov	r1, r3
    f096:	6878      	ldr	r0, [r7, #4]
    f098:	4b0d      	ldr	r3, [pc, #52]	; (f0d0 <_usb_d_dev_enable+0x78>)
    f09a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    f09c:	2050      	movs	r0, #80	; 0x50
    f09e:	4b0d      	ldr	r3, [pc, #52]	; (f0d4 <_usb_d_dev_enable+0x7c>)
    f0a0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    f0a2:	2051      	movs	r0, #81	; 0x51
    f0a4:	4b0b      	ldr	r3, [pc, #44]	; (f0d4 <_usb_d_dev_enable+0x7c>)
    f0a6:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    f0a8:	2052      	movs	r0, #82	; 0x52
    f0aa:	4b0a      	ldr	r3, [pc, #40]	; (f0d4 <_usb_d_dev_enable+0x7c>)
    f0ac:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    f0ae:	2053      	movs	r0, #83	; 0x53
    f0b0:	4b08      	ldr	r3, [pc, #32]	; (f0d4 <_usb_d_dev_enable+0x7c>)
    f0b2:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    f0b4:	f240 218d 	movw	r1, #653	; 0x28d
    f0b8:	6878      	ldr	r0, [r7, #4]
    f0ba:	4b07      	ldr	r3, [pc, #28]	; (f0d8 <_usb_d_dev_enable+0x80>)
    f0bc:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    f0be:	2300      	movs	r3, #0
}
    f0c0:	4618      	mov	r0, r3
    f0c2:	3708      	adds	r7, #8
    f0c4:	46bd      	mov	sp, r7
    f0c6:	bd80      	pop	{r7, pc}
    f0c8:	0000d8fb 	.word	0x0000d8fb
    f0cc:	0000d9a9 	.word	0x0000d9a9
    f0d0:	0000d981 	.word	0x0000d981
    f0d4:	0000d50d 	.word	0x0000d50d
    f0d8:	0000d8a5 	.word	0x0000d8a5

0000f0dc <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    f0dc:	b580      	push	{r7, lr}
    f0de:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    f0e0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f0e4:	4b01      	ldr	r3, [pc, #4]	; (f0ec <_usb_d_dev_attach+0x10>)
    f0e6:	4798      	blx	r3
}
    f0e8:	bf00      	nop
    f0ea:	bd80      	pop	{r7, pc}
    f0ec:	0000d9cd 	.word	0x0000d9cd

0000f0f0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    f0f0:	b580      	push	{r7, lr}
    f0f2:	b082      	sub	sp, #8
    f0f4:	af00      	add	r7, sp, #0
    f0f6:	4603      	mov	r3, r0
    f0f8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    f0fa:	79fb      	ldrb	r3, [r7, #7]
    f0fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f100:	b2db      	uxtb	r3, r3
    f102:	4619      	mov	r1, r3
    f104:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f108:	4b02      	ldr	r3, [pc, #8]	; (f114 <_usb_d_dev_set_address+0x24>)
    f10a:	4798      	blx	r3
}
    f10c:	bf00      	nop
    f10e:	3708      	adds	r7, #8
    f110:	46bd      	mov	sp, r7
    f112:	bd80      	pop	{r7, pc}
    f114:	0000da0f 	.word	0x0000da0f

0000f118 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    f118:	b590      	push	{r4, r7, lr}
    f11a:	b085      	sub	sp, #20
    f11c:	af00      	add	r7, sp, #0
    f11e:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    f120:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f124:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f126:	687b      	ldr	r3, [r7, #4]
    f128:	7c9b      	ldrb	r3, [r3, #18]
    f12a:	f003 030f 	and.w	r3, r3, #15
    f12e:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    f130:	687b      	ldr	r3, [r7, #4]
    f132:	68db      	ldr	r3, [r3, #12]
    f134:	461a      	mov	r2, r3
    f136:	7afb      	ldrb	r3, [r7, #11]
    f138:	2100      	movs	r1, #0
    f13a:	4618      	mov	r0, r3
    f13c:	4b0f      	ldr	r3, [pc, #60]	; (f17c <_usb_d_dev_trans_setup+0x64>)
    f13e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    f140:	687b      	ldr	r3, [r7, #4]
    f142:	8a1b      	ldrh	r3, [r3, #16]
    f144:	461a      	mov	r2, r3
    f146:	7af8      	ldrb	r0, [r7, #11]
    f148:	2300      	movs	r3, #0
    f14a:	2100      	movs	r1, #0
    f14c:	4c0c      	ldr	r4, [pc, #48]	; (f180 <_usb_d_dev_trans_setup+0x68>)
    f14e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    f150:	7afb      	ldrb	r3, [r7, #11]
    f152:	22b0      	movs	r2, #176	; 0xb0
    f154:	4619      	mov	r1, r3
    f156:	68f8      	ldr	r0, [r7, #12]
    f158:	4b0a      	ldr	r3, [pc, #40]	; (f184 <_usb_d_dev_trans_setup+0x6c>)
    f15a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    f15c:	7afb      	ldrb	r3, [r7, #11]
    f15e:	2200      	movs	r2, #0
    f160:	2100      	movs	r1, #0
    f162:	4618      	mov	r0, r3
    f164:	4b08      	ldr	r3, [pc, #32]	; (f188 <_usb_d_dev_trans_setup+0x70>)
    f166:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    f168:	7afb      	ldrb	r3, [r7, #11]
    f16a:	2210      	movs	r2, #16
    f16c:	4619      	mov	r1, r3
    f16e:	68f8      	ldr	r0, [r7, #12]
    f170:	4b06      	ldr	r3, [pc, #24]	; (f18c <_usb_d_dev_trans_setup+0x74>)
    f172:	4798      	blx	r3
}
    f174:	bf00      	nop
    f176:	3714      	adds	r7, #20
    f178:	46bd      	mov	sp, r7
    f17a:	bd90      	pop	{r4, r7, pc}
    f17c:	0000dead 	.word	0x0000dead
    f180:	0000e035 	.word	0x0000e035
    f184:	0000d70d 	.word	0x0000d70d
    f188:	0000e105 	.word	0x0000e105
    f18c:	0000d761 	.word	0x0000d761

0000f190 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    f190:	b580      	push	{r7, lr}
    f192:	b088      	sub	sp, #32
    f194:	af00      	add	r7, sp, #0
    f196:	4603      	mov	r3, r0
    f198:	71fb      	strb	r3, [r7, #7]
    f19a:	460b      	mov	r3, r1
    f19c:	71bb      	strb	r3, [r7, #6]
    f19e:	4613      	mov	r3, r2
    f1a0:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    f1a2:	79fb      	ldrb	r3, [r7, #7]
    f1a4:	f003 030f 	and.w	r3, r3, #15
    f1a8:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    f1aa:	79fb      	ldrb	r3, [r7, #7]
    f1ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f1b0:	2b00      	cmp	r3, #0
    f1b2:	bf14      	ite	ne
    f1b4:	2301      	movne	r3, #1
    f1b6:	2300      	moveq	r3, #0
    f1b8:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f1ba:	7fba      	ldrb	r2, [r7, #30]
    f1bc:	7ffb      	ldrb	r3, [r7, #31]
    f1be:	4611      	mov	r1, r2
    f1c0:	4618      	mov	r0, r3
    f1c2:	4b3e      	ldr	r3, [pc, #248]	; (f2bc <_usb_d_dev_ep_init+0x12c>)
    f1c4:	4798      	blx	r3
    f1c6:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    f1c8:	79bb      	ldrb	r3, [r7, #6]
    f1ca:	f003 0303 	and.w	r3, r3, #3
    f1ce:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    f1d0:	7ffa      	ldrb	r2, [r7, #31]
    f1d2:	4613      	mov	r3, r2
    f1d4:	005b      	lsls	r3, r3, #1
    f1d6:	4413      	add	r3, r2
    f1d8:	009b      	lsls	r3, r3, #2
    f1da:	4a39      	ldr	r2, [pc, #228]	; (f2c0 <_usb_d_dev_ep_init+0x130>)
    f1dc:	4413      	add	r3, r2
    f1de:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    f1e0:	7ffb      	ldrb	r3, [r7, #31]
    f1e2:	2b04      	cmp	r3, #4
    f1e4:	d902      	bls.n	f1ec <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    f1e6:	f06f 0311 	mvn.w	r3, #17
    f1ea:	e063      	b.n	f2b4 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    f1ec:	69bb      	ldr	r3, [r7, #24]
    f1ee:	7c9b      	ldrb	r3, [r3, #18]
    f1f0:	2bff      	cmp	r3, #255	; 0xff
    f1f2:	d002      	beq.n	f1fa <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    f1f4:	f06f 0313 	mvn.w	r3, #19
    f1f8:	e05c      	b.n	f2b4 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    f1fa:	7dfb      	ldrb	r3, [r7, #23]
    f1fc:	2b00      	cmp	r3, #0
    f1fe:	d11f      	bne.n	f240 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    f200:	7fbb      	ldrb	r3, [r7, #30]
    f202:	2b00      	cmp	r3, #0
    f204:	bf14      	ite	ne
    f206:	2301      	movne	r3, #1
    f208:	2300      	moveq	r3, #0
    f20a:	b2db      	uxtb	r3, r3
    f20c:	f083 0301 	eor.w	r3, r3, #1
    f210:	b2db      	uxtb	r3, r3
    f212:	f003 0301 	and.w	r3, r3, #1
    f216:	b2da      	uxtb	r2, r3
    f218:	7ffb      	ldrb	r3, [r7, #31]
    f21a:	4611      	mov	r1, r2
    f21c:	4618      	mov	r0, r3
    f21e:	4b27      	ldr	r3, [pc, #156]	; (f2bc <_usb_d_dev_ep_init+0x12c>)
    f220:	4798      	blx	r3
    f222:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    f224:	68fb      	ldr	r3, [r7, #12]
    f226:	7c9b      	ldrb	r3, [r3, #18]
    f228:	2bff      	cmp	r3, #255	; 0xff
    f22a:	d002      	beq.n	f232 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    f22c:	f06f 0313 	mvn.w	r3, #19
    f230:	e040      	b.n	f2b4 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    f232:	693b      	ldr	r3, [r7, #16]
    f234:	681b      	ldr	r3, [r3, #0]
    f236:	2b00      	cmp	r3, #0
    f238:	d102      	bne.n	f240 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    f23a:	f06f 0312 	mvn.w	r3, #18
    f23e:	e039      	b.n	f2b4 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    f240:	7fbb      	ldrb	r3, [r7, #30]
    f242:	2b00      	cmp	r3, #0
    f244:	d007      	beq.n	f256 <_usb_d_dev_ep_init+0xc6>
    f246:	693b      	ldr	r3, [r7, #16]
    f248:	685b      	ldr	r3, [r3, #4]
    f24a:	2b00      	cmp	r3, #0
    f24c:	bf14      	ite	ne
    f24e:	2301      	movne	r3, #1
    f250:	2300      	moveq	r3, #0
    f252:	b2db      	uxtb	r3, r3
    f254:	e006      	b.n	f264 <_usb_d_dev_ep_init+0xd4>
    f256:	693b      	ldr	r3, [r7, #16]
    f258:	681b      	ldr	r3, [r3, #0]
    f25a:	2b00      	cmp	r3, #0
    f25c:	bf14      	ite	ne
    f25e:	2301      	movne	r3, #1
    f260:	2300      	moveq	r3, #0
    f262:	b2db      	uxtb	r3, r3
    f264:	2b00      	cmp	r3, #0
    f266:	d00f      	beq.n	f288 <_usb_d_dev_ep_init+0xf8>
    f268:	7fbb      	ldrb	r3, [r7, #30]
    f26a:	2b00      	cmp	r3, #0
    f26c:	d003      	beq.n	f276 <_usb_d_dev_ep_init+0xe6>
    f26e:	693b      	ldr	r3, [r7, #16]
    f270:	895b      	ldrh	r3, [r3, #10]
    f272:	461a      	mov	r2, r3
    f274:	e002      	b.n	f27c <_usb_d_dev_ep_init+0xec>
    f276:	693b      	ldr	r3, [r7, #16]
    f278:	891b      	ldrh	r3, [r3, #8]
    f27a:	461a      	mov	r2, r3
    f27c:	88bb      	ldrh	r3, [r7, #4]
    f27e:	429a      	cmp	r2, r3
    f280:	da02      	bge.n	f288 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    f282:	f06f 0312 	mvn.w	r3, #18
    f286:	e015      	b.n	f2b4 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    f288:	7fbb      	ldrb	r3, [r7, #30]
    f28a:	2b00      	cmp	r3, #0
    f28c:	d002      	beq.n	f294 <_usb_d_dev_ep_init+0x104>
    f28e:	693b      	ldr	r3, [r7, #16]
    f290:	685b      	ldr	r3, [r3, #4]
    f292:	e001      	b.n	f298 <_usb_d_dev_ep_init+0x108>
    f294:	693b      	ldr	r3, [r7, #16]
    f296:	681b      	ldr	r3, [r3, #0]
    f298:	69ba      	ldr	r2, [r7, #24]
    f29a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    f29c:	69bb      	ldr	r3, [r7, #24]
    f29e:	88ba      	ldrh	r2, [r7, #4]
    f2a0:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    f2a2:	7dfb      	ldrb	r3, [r7, #23]
    f2a4:	3301      	adds	r3, #1
    f2a6:	b2da      	uxtb	r2, r3
    f2a8:	69bb      	ldr	r3, [r7, #24]
    f2aa:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    f2ac:	69bb      	ldr	r3, [r7, #24]
    f2ae:	79fa      	ldrb	r2, [r7, #7]
    f2b0:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    f2b2:	2300      	movs	r3, #0
}
    f2b4:	4618      	mov	r0, r3
    f2b6:	3720      	adds	r7, #32
    f2b8:	46bd      	mov	sp, r7
    f2ba:	bd80      	pop	{r7, pc}
    f2bc:	0000e1c1 	.word	0x0000e1c1
    f2c0:	0001fbec 	.word	0x0001fbec

0000f2c4 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    f2c4:	b580      	push	{r7, lr}
    f2c6:	b086      	sub	sp, #24
    f2c8:	af00      	add	r7, sp, #0
    f2ca:	4603      	mov	r3, r0
    f2cc:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    f2ce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f2d2:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    f2d4:	79fb      	ldrb	r3, [r7, #7]
    f2d6:	f003 030f 	and.w	r3, r3, #15
    f2da:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    f2dc:	79fb      	ldrb	r3, [r7, #7]
    f2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f2e2:	2b00      	cmp	r3, #0
    f2e4:	bf14      	ite	ne
    f2e6:	2301      	movne	r3, #1
    f2e8:	2300      	moveq	r3, #0
    f2ea:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f2ec:	7cba      	ldrb	r2, [r7, #18]
    f2ee:	7cfb      	ldrb	r3, [r7, #19]
    f2f0:	4611      	mov	r1, r2
    f2f2:	4618      	mov	r0, r3
    f2f4:	4b2a      	ldr	r3, [pc, #168]	; (f3a0 <_usb_d_dev_ep_deinit+0xdc>)
    f2f6:	4798      	blx	r3
    f2f8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    f2fa:	7cfb      	ldrb	r3, [r7, #19]
    f2fc:	2b04      	cmp	r3, #4
    f2fe:	d84a      	bhi.n	f396 <_usb_d_dev_ep_deinit+0xd2>
    f300:	68fb      	ldr	r3, [r7, #12]
    f302:	7c9b      	ldrb	r3, [r3, #18]
    f304:	2bff      	cmp	r3, #255	; 0xff
    f306:	d046      	beq.n	f396 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    f308:	7cbb      	ldrb	r3, [r7, #18]
    f30a:	2203      	movs	r2, #3
    f30c:	4619      	mov	r1, r3
    f30e:	68f8      	ldr	r0, [r7, #12]
    f310:	4b24      	ldr	r3, [pc, #144]	; (f3a4 <_usb_d_dev_ep_deinit+0xe0>)
    f312:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    f314:	68fb      	ldr	r3, [r7, #12]
    f316:	7cdb      	ldrb	r3, [r3, #19]
    f318:	f003 0307 	and.w	r3, r3, #7
    f31c:	b2db      	uxtb	r3, r3
    f31e:	2b01      	cmp	r3, #1
    f320:	d107      	bne.n	f332 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    f322:	79fb      	ldrb	r3, [r7, #7]
    f324:	697a      	ldr	r2, [r7, #20]
    f326:	3308      	adds	r3, #8
    f328:	015b      	lsls	r3, r3, #5
    f32a:	4413      	add	r3, r2
    f32c:	2200      	movs	r2, #0
    f32e:	701a      	strb	r2, [r3, #0]
    f330:	e02a      	b.n	f388 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    f332:	f997 3007 	ldrsb.w	r3, [r7, #7]
    f336:	2b00      	cmp	r3, #0
    f338:	da15      	bge.n	f366 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    f33a:	79fb      	ldrb	r3, [r7, #7]
    f33c:	f003 030f 	and.w	r3, r3, #15
    f340:	79fa      	ldrb	r2, [r7, #7]
    f342:	f002 020f 	and.w	r2, r2, #15
    f346:	6979      	ldr	r1, [r7, #20]
    f348:	3208      	adds	r2, #8
    f34a:	0152      	lsls	r2, r2, #5
    f34c:	440a      	add	r2, r1
    f34e:	7812      	ldrb	r2, [r2, #0]
    f350:	b2d2      	uxtb	r2, r2
    f352:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    f356:	b2d1      	uxtb	r1, r2
    f358:	697a      	ldr	r2, [r7, #20]
    f35a:	3308      	adds	r3, #8
    f35c:	015b      	lsls	r3, r3, #5
    f35e:	4413      	add	r3, r2
    f360:	460a      	mov	r2, r1
    f362:	701a      	strb	r2, [r3, #0]
    f364:	e010      	b.n	f388 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    f366:	79fb      	ldrb	r3, [r7, #7]
    f368:	79fa      	ldrb	r2, [r7, #7]
    f36a:	6979      	ldr	r1, [r7, #20]
    f36c:	3208      	adds	r2, #8
    f36e:	0152      	lsls	r2, r2, #5
    f370:	440a      	add	r2, r1
    f372:	7812      	ldrb	r2, [r2, #0]
    f374:	b2d2      	uxtb	r2, r2
    f376:	f022 0207 	bic.w	r2, r2, #7
    f37a:	b2d1      	uxtb	r1, r2
    f37c:	697a      	ldr	r2, [r7, #20]
    f37e:	3308      	adds	r3, #8
    f380:	015b      	lsls	r3, r3, #5
    f382:	4413      	add	r3, r2
    f384:	460a      	mov	r2, r1
    f386:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    f388:	68fb      	ldr	r3, [r7, #12]
    f38a:	2200      	movs	r2, #0
    f38c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    f38e:	68fb      	ldr	r3, [r7, #12]
    f390:	22ff      	movs	r2, #255	; 0xff
    f392:	749a      	strb	r2, [r3, #18]
    f394:	e000      	b.n	f398 <_usb_d_dev_ep_deinit+0xd4>
		return;
    f396:	bf00      	nop
}
    f398:	3718      	adds	r7, #24
    f39a:	46bd      	mov	sp, r7
    f39c:	bd80      	pop	{r7, pc}
    f39e:	bf00      	nop
    f3a0:	0000e1c1 	.word	0x0000e1c1
    f3a4:	0000f7f9 	.word	0x0000f7f9

0000f3a8 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    f3a8:	b5b0      	push	{r4, r5, r7, lr}
    f3aa:	b088      	sub	sp, #32
    f3ac:	af00      	add	r7, sp, #0
    f3ae:	4603      	mov	r3, r0
    f3b0:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    f3b2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    f3b6:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    f3b8:	79fb      	ldrb	r3, [r7, #7]
    f3ba:	f003 030f 	and.w	r3, r3, #15
    f3be:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    f3c0:	79fb      	ldrb	r3, [r7, #7]
    f3c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f3c6:	2b00      	cmp	r3, #0
    f3c8:	bf14      	ite	ne
    f3ca:	2301      	movne	r3, #1
    f3cc:	2300      	moveq	r3, #0
    f3ce:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    f3d0:	7eba      	ldrb	r2, [r7, #26]
    f3d2:	7efb      	ldrb	r3, [r7, #27]
    f3d4:	4611      	mov	r1, r2
    f3d6:	4618      	mov	r0, r3
    f3d8:	4b70      	ldr	r3, [pc, #448]	; (f59c <_usb_d_dev_ep_enable+0x1f4>)
    f3da:	4798      	blx	r3
    f3dc:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    f3de:	7efb      	ldrb	r3, [r7, #27]
    f3e0:	4619      	mov	r1, r3
    f3e2:	69f8      	ldr	r0, [r7, #28]
    f3e4:	4b6e      	ldr	r3, [pc, #440]	; (f5a0 <_usb_d_dev_ep_enable+0x1f8>)
    f3e6:	4798      	blx	r3
    f3e8:	4603      	mov	r3, r0
    f3ea:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    f3ec:	7efb      	ldrb	r3, [r7, #27]
    f3ee:	2b04      	cmp	r3, #4
    f3f0:	d803      	bhi.n	f3fa <_usb_d_dev_ep_enable+0x52>
    f3f2:	697b      	ldr	r3, [r7, #20]
    f3f4:	7c9b      	ldrb	r3, [r3, #18]
    f3f6:	2bff      	cmp	r3, #255	; 0xff
    f3f8:	d102      	bne.n	f400 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    f3fa:	f06f 0311 	mvn.w	r3, #17
    f3fe:	e0c8      	b.n	f592 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    f400:	7efb      	ldrb	r3, [r7, #27]
    f402:	015b      	lsls	r3, r3, #5
    f404:	4a67      	ldr	r2, [pc, #412]	; (f5a4 <_usb_d_dev_ep_enable+0x1fc>)
    f406:	4413      	add	r3, r2
    f408:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    f40a:	697b      	ldr	r3, [r7, #20]
    f40c:	7cdb      	ldrb	r3, [r3, #19]
    f40e:	f003 0307 	and.w	r3, r3, #7
    f412:	b2db      	uxtb	r3, r3
    f414:	2b01      	cmp	r3, #1
    f416:	d14b      	bne.n	f4b0 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    f418:	7cfb      	ldrb	r3, [r7, #19]
    f41a:	f003 0377 	and.w	r3, r3, #119	; 0x77
    f41e:	2b00      	cmp	r3, #0
    f420:	d002      	beq.n	f428 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    f422:	f06f 0313 	mvn.w	r3, #19
    f426:	e0b4      	b.n	f592 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    f428:	7efb      	ldrb	r3, [r7, #27]
    f42a:	2211      	movs	r2, #17
    f42c:	4619      	mov	r1, r3
    f42e:	69f8      	ldr	r0, [r7, #28]
    f430:	4b5d      	ldr	r3, [pc, #372]	; (f5a8 <_usb_d_dev_ep_enable+0x200>)
    f432:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    f434:	697b      	ldr	r3, [r7, #20]
    f436:	8a1b      	ldrh	r3, [r3, #16]
    f438:	039b      	lsls	r3, r3, #14
    f43a:	4c5c      	ldr	r4, [pc, #368]	; (f5ac <_usb_d_dev_ep_enable+0x204>)
    f43c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    f43e:	697b      	ldr	r3, [r7, #20]
    f440:	8a1b      	ldrh	r3, [r3, #16]
    f442:	4618      	mov	r0, r3
    f444:	4b5a      	ldr	r3, [pc, #360]	; (f5b0 <_usb_d_dev_ep_enable+0x208>)
    f446:	4798      	blx	r3
    f448:	4603      	mov	r3, r0
    f44a:	071b      	lsls	r3, r3, #28
    f44c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    f450:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    f454:	68fb      	ldr	r3, [r7, #12]
    f456:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    f458:	68fb      	ldr	r3, [r7, #12]
    f45a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    f45e:	697b      	ldr	r3, [r7, #20]
    f460:	8a1b      	ldrh	r3, [r3, #16]
    f462:	f3c3 050d 	ubfx	r5, r3, #0, #14
    f466:	697b      	ldr	r3, [r7, #20]
    f468:	8a1b      	ldrh	r3, [r3, #16]
    f46a:	4618      	mov	r0, r3
    f46c:	4b50      	ldr	r3, [pc, #320]	; (f5b0 <_usb_d_dev_ep_enable+0x208>)
    f46e:	4798      	blx	r3
    f470:	4603      	mov	r3, r0
    f472:	071b      	lsls	r3, r3, #28
    f474:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    f478:	432b      	orrs	r3, r5
    f47a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    f47c:	7efb      	ldrb	r3, [r7, #27]
    f47e:	2200      	movs	r2, #0
    f480:	2100      	movs	r1, #0
    f482:	4618      	mov	r0, r3
    f484:	4b4b      	ldr	r3, [pc, #300]	; (f5b4 <_usb_d_dev_ep_enable+0x20c>)
    f486:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    f488:	7efb      	ldrb	r3, [r7, #27]
    f48a:	2200      	movs	r2, #0
    f48c:	2101      	movs	r1, #1
    f48e:	4618      	mov	r0, r3
    f490:	4b49      	ldr	r3, [pc, #292]	; (f5b8 <_usb_d_dev_ep_enable+0x210>)
    f492:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    f494:	7efb      	ldrb	r3, [r7, #27]
    f496:	2100      	movs	r1, #0
    f498:	4618      	mov	r0, r3
    f49a:	4b48      	ldr	r3, [pc, #288]	; (f5bc <_usb_d_dev_ep_enable+0x214>)
    f49c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    f49e:	7efb      	ldrb	r3, [r7, #27]
    f4a0:	2101      	movs	r1, #1
    f4a2:	4618      	mov	r0, r3
    f4a4:	4b45      	ldr	r3, [pc, #276]	; (f5bc <_usb_d_dev_ep_enable+0x214>)
    f4a6:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    f4a8:	6978      	ldr	r0, [r7, #20]
    f4aa:	4b45      	ldr	r3, [pc, #276]	; (f5c0 <_usb_d_dev_ep_enable+0x218>)
    f4ac:	4798      	blx	r3
    f4ae:	e06f      	b.n	f590 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    f4b0:	7ebb      	ldrb	r3, [r7, #26]
    f4b2:	2b00      	cmp	r3, #0
    f4b4:	d038      	beq.n	f528 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    f4b6:	7cfb      	ldrb	r3, [r7, #19]
    f4b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    f4bc:	2b00      	cmp	r3, #0
    f4be:	d002      	beq.n	f4c6 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    f4c0:	f06f 0313 	mvn.w	r3, #19
    f4c4:	e065      	b.n	f592 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    f4c6:	697b      	ldr	r3, [r7, #20]
    f4c8:	7cdb      	ldrb	r3, [r3, #19]
    f4ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f4ce:	b2db      	uxtb	r3, r3
    f4d0:	011b      	lsls	r3, r3, #4
    f4d2:	b2db      	uxtb	r3, r3
    f4d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    f4d8:	b2da      	uxtb	r2, r3
    f4da:	7cfb      	ldrb	r3, [r7, #19]
    f4dc:	4313      	orrs	r3, r2
    f4de:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    f4e0:	7cfa      	ldrb	r2, [r7, #19]
    f4e2:	7efb      	ldrb	r3, [r7, #27]
    f4e4:	4619      	mov	r1, r3
    f4e6:	69f8      	ldr	r0, [r7, #28]
    f4e8:	4b2f      	ldr	r3, [pc, #188]	; (f5a8 <_usb_d_dev_ep_enable+0x200>)
    f4ea:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    f4ec:	68fb      	ldr	r3, [r7, #12]
    f4ee:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    f4f2:	697b      	ldr	r3, [r7, #20]
    f4f4:	8a1b      	ldrh	r3, [r3, #16]
    f4f6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    f4fa:	697b      	ldr	r3, [r7, #20]
    f4fc:	8a1b      	ldrh	r3, [r3, #16]
    f4fe:	4618      	mov	r0, r3
    f500:	4b2b      	ldr	r3, [pc, #172]	; (f5b0 <_usb_d_dev_ep_enable+0x208>)
    f502:	4798      	blx	r3
    f504:	4603      	mov	r3, r0
    f506:	071b      	lsls	r3, r3, #28
    f508:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    f50c:	432b      	orrs	r3, r5
    f50e:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    f510:	7efb      	ldrb	r3, [r7, #27]
    f512:	2200      	movs	r2, #0
    f514:	2101      	movs	r1, #1
    f516:	4618      	mov	r0, r3
    f518:	4b27      	ldr	r3, [pc, #156]	; (f5b8 <_usb_d_dev_ep_enable+0x210>)
    f51a:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    f51c:	7efb      	ldrb	r3, [r7, #27]
    f51e:	2101      	movs	r1, #1
    f520:	4618      	mov	r0, r3
    f522:	4b26      	ldr	r3, [pc, #152]	; (f5bc <_usb_d_dev_ep_enable+0x214>)
    f524:	4798      	blx	r3
    f526:	e033      	b.n	f590 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    f528:	7cfb      	ldrb	r3, [r7, #19]
    f52a:	f003 0307 	and.w	r3, r3, #7
    f52e:	2b00      	cmp	r3, #0
    f530:	d002      	beq.n	f538 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    f532:	f06f 0313 	mvn.w	r3, #19
    f536:	e02c      	b.n	f592 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    f538:	697b      	ldr	r3, [r7, #20]
    f53a:	7cdb      	ldrb	r3, [r3, #19]
    f53c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f540:	b2db      	uxtb	r3, r3
    f542:	461a      	mov	r2, r3
    f544:	7cfb      	ldrb	r3, [r7, #19]
    f546:	4313      	orrs	r3, r2
    f548:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    f54a:	7cfa      	ldrb	r2, [r7, #19]
    f54c:	7efb      	ldrb	r3, [r7, #27]
    f54e:	4619      	mov	r1, r3
    f550:	69f8      	ldr	r0, [r7, #28]
    f552:	4b15      	ldr	r3, [pc, #84]	; (f5a8 <_usb_d_dev_ep_enable+0x200>)
    f554:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    f556:	697b      	ldr	r3, [r7, #20]
    f558:	8a1b      	ldrh	r3, [r3, #16]
    f55a:	039b      	lsls	r3, r3, #14
    f55c:	4c13      	ldr	r4, [pc, #76]	; (f5ac <_usb_d_dev_ep_enable+0x204>)
    f55e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    f560:	697b      	ldr	r3, [r7, #20]
    f562:	8a1b      	ldrh	r3, [r3, #16]
    f564:	4618      	mov	r0, r3
    f566:	4b12      	ldr	r3, [pc, #72]	; (f5b0 <_usb_d_dev_ep_enable+0x208>)
    f568:	4798      	blx	r3
    f56a:	4603      	mov	r3, r0
    f56c:	071b      	lsls	r3, r3, #28
    f56e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    f572:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    f576:	68fb      	ldr	r3, [r7, #12]
    f578:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    f57a:	7efb      	ldrb	r3, [r7, #27]
    f57c:	2200      	movs	r2, #0
    f57e:	2100      	movs	r1, #0
    f580:	4618      	mov	r0, r3
    f582:	4b0c      	ldr	r3, [pc, #48]	; (f5b4 <_usb_d_dev_ep_enable+0x20c>)
    f584:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    f586:	7efb      	ldrb	r3, [r7, #27]
    f588:	2100      	movs	r1, #0
    f58a:	4618      	mov	r0, r3
    f58c:	4b0b      	ldr	r3, [pc, #44]	; (f5bc <_usb_d_dev_ep_enable+0x214>)
    f58e:	4798      	blx	r3
	}

	return USB_OK;
    f590:	2300      	movs	r3, #0
}
    f592:	4618      	mov	r0, r3
    f594:	3720      	adds	r7, #32
    f596:	46bd      	mov	sp, r7
    f598:	bdb0      	pop	{r4, r5, r7, pc}
    f59a:	bf00      	nop
    f59c:	0000e1c1 	.word	0x0000e1c1
    f5a0:	0000d847 	.word	0x0000d847
    f5a4:	20008bcc 	.word	0x20008bcc
    f5a8:	0000d81d 	.word	0x0000d81d
    f5ac:	0fffc000 	.word	0x0fffc000
    f5b0:	0000e15d 	.word	0x0000e15d
    f5b4:	0000e105 	.word	0x0000e105
    f5b8:	0000e0ad 	.word	0x0000e0ad
    f5bc:	0000e075 	.word	0x0000e075
    f5c0:	0000f119 	.word	0x0000f119

0000f5c4 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    f5c4:	b580      	push	{r7, lr}
    f5c6:	b084      	sub	sp, #16
    f5c8:	af00      	add	r7, sp, #0
    f5ca:	6078      	str	r0, [r7, #4]
    f5cc:	460b      	mov	r3, r1
    f5ce:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f5d0:	687b      	ldr	r3, [r7, #4]
    f5d2:	7c9b      	ldrb	r3, [r3, #18]
    f5d4:	f003 030f 	and.w	r3, r3, #15
    f5d8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    f5da:	78fa      	ldrb	r2, [r7, #3]
    f5dc:	7bfb      	ldrb	r3, [r7, #15]
    f5de:	4611      	mov	r1, r2
    f5e0:	4618      	mov	r0, r3
    f5e2:	4b03      	ldr	r3, [pc, #12]	; (f5f0 <_usb_d_dev_ep_stall_get+0x2c>)
    f5e4:	4798      	blx	r3
    f5e6:	4603      	mov	r3, r0
}
    f5e8:	4618      	mov	r0, r3
    f5ea:	3710      	adds	r7, #16
    f5ec:	46bd      	mov	sp, r7
    f5ee:	bd80      	pop	{r7, pc}
    f5f0:	0000dcb5 	.word	0x0000dcb5

0000f5f4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    f5f4:	b580      	push	{r7, lr}
    f5f6:	b084      	sub	sp, #16
    f5f8:	af00      	add	r7, sp, #0
    f5fa:	6078      	str	r0, [r7, #4]
    f5fc:	460b      	mov	r3, r1
    f5fe:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f600:	687b      	ldr	r3, [r7, #4]
    f602:	7c9b      	ldrb	r3, [r3, #18]
    f604:	f003 030f 	and.w	r3, r3, #15
    f608:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    f60a:	78f9      	ldrb	r1, [r7, #3]
    f60c:	7bfb      	ldrb	r3, [r7, #15]
    f60e:	2201      	movs	r2, #1
    f610:	4618      	mov	r0, r3
    f612:	4b0a      	ldr	r3, [pc, #40]	; (f63c <_usb_d_dev_ep_stall_set+0x48>)
    f614:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    f616:	78fb      	ldrb	r3, [r7, #3]
    f618:	2220      	movs	r2, #32
    f61a:	409a      	lsls	r2, r3
    f61c:	7bfb      	ldrb	r3, [r7, #15]
    f61e:	4611      	mov	r1, r2
    f620:	4618      	mov	r0, r3
    f622:	4b07      	ldr	r3, [pc, #28]	; (f640 <_usb_d_dev_ep_stall_set+0x4c>)
    f624:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    f626:	687a      	ldr	r2, [r7, #4]
    f628:	7cd3      	ldrb	r3, [r2, #19]
    f62a:	f043 0308 	orr.w	r3, r3, #8
    f62e:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    f630:	2300      	movs	r3, #0
}
    f632:	4618      	mov	r0, r3
    f634:	3710      	adds	r7, #16
    f636:	46bd      	mov	sp, r7
    f638:	bd80      	pop	{r7, pc}
    f63a:	bf00      	nop
    f63c:	0000dc5d 	.word	0x0000dc5d
    f640:	0000dbdd 	.word	0x0000dbdd

0000f644 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    f644:	b580      	push	{r7, lr}
    f646:	b084      	sub	sp, #16
    f648:	af00      	add	r7, sp, #0
    f64a:	6078      	str	r0, [r7, #4]
    f64c:	460b      	mov	r3, r1
    f64e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    f650:	687b      	ldr	r3, [r7, #4]
    f652:	7c9b      	ldrb	r3, [r3, #18]
    f654:	f003 030f 	and.w	r3, r3, #15
    f658:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    f65a:	78fa      	ldrb	r2, [r7, #3]
    f65c:	7bfb      	ldrb	r3, [r7, #15]
    f65e:	4611      	mov	r1, r2
    f660:	4618      	mov	r0, r3
    f662:	4b28      	ldr	r3, [pc, #160]	; (f704 <_usb_d_dev_ep_stall_clr+0xc0>)
    f664:	4798      	blx	r3
    f666:	4603      	mov	r3, r0
    f668:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    f66a:	7bbb      	ldrb	r3, [r7, #14]
    f66c:	f083 0301 	eor.w	r3, r3, #1
    f670:	b2db      	uxtb	r3, r3
    f672:	2b00      	cmp	r3, #0
    f674:	d001      	beq.n	f67a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    f676:	2300      	movs	r3, #0
    f678:	e040      	b.n	f6fc <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    f67a:	78f9      	ldrb	r1, [r7, #3]
    f67c:	7bfb      	ldrb	r3, [r7, #15]
    f67e:	2200      	movs	r2, #0
    f680:	4618      	mov	r0, r3
    f682:	4b21      	ldr	r3, [pc, #132]	; (f708 <_usb_d_dev_ep_stall_clr+0xc4>)
    f684:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    f686:	78fb      	ldrb	r3, [r7, #3]
    f688:	2220      	movs	r2, #32
    f68a:	409a      	lsls	r2, r3
    f68c:	7bfb      	ldrb	r3, [r7, #15]
    f68e:	4611      	mov	r1, r2
    f690:	4618      	mov	r0, r3
    f692:	4b1e      	ldr	r3, [pc, #120]	; (f70c <_usb_d_dev_ep_stall_clr+0xc8>)
    f694:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    f696:	78fa      	ldrb	r2, [r7, #3]
    f698:	7bfb      	ldrb	r3, [r7, #15]
    f69a:	4611      	mov	r1, r2
    f69c:	4618      	mov	r0, r3
    f69e:	4b1c      	ldr	r3, [pc, #112]	; (f710 <_usb_d_dev_ep_stall_clr+0xcc>)
    f6a0:	4798      	blx	r3
    f6a2:	4603      	mov	r3, r0
    f6a4:	2b00      	cmp	r3, #0
    f6a6:	d00b      	beq.n	f6c0 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    f6a8:	78fa      	ldrb	r2, [r7, #3]
    f6aa:	7bfb      	ldrb	r3, [r7, #15]
    f6ac:	4611      	mov	r1, r2
    f6ae:	4618      	mov	r0, r3
    f6b0:	4b18      	ldr	r3, [pc, #96]	; (f714 <_usb_d_dev_ep_stall_clr+0xd0>)
    f6b2:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    f6b4:	78f9      	ldrb	r1, [r7, #3]
    f6b6:	7bfb      	ldrb	r3, [r7, #15]
    f6b8:	2200      	movs	r2, #0
    f6ba:	4618      	mov	r0, r3
    f6bc:	4b16      	ldr	r3, [pc, #88]	; (f718 <_usb_d_dev_ep_stall_clr+0xd4>)
    f6be:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    f6c0:	687b      	ldr	r3, [r7, #4]
    f6c2:	7cdb      	ldrb	r3, [r3, #19]
    f6c4:	f003 0307 	and.w	r3, r3, #7
    f6c8:	b2db      	uxtb	r3, r3
    f6ca:	2b01      	cmp	r3, #1
    f6cc:	d110      	bne.n	f6f0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    f6ce:	7bfb      	ldrb	r3, [r7, #15]
    f6d0:	4619      	mov	r1, r3
    f6d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    f6d6:	4b11      	ldr	r3, [pc, #68]	; (f71c <_usb_d_dev_ep_stall_clr+0xd8>)
    f6d8:	4798      	blx	r3
    f6da:	4603      	mov	r3, r0
    f6dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
    f6e0:	2b00      	cmp	r3, #0
    f6e2:	d10a      	bne.n	f6fa <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    f6e4:	687a      	ldr	r2, [r7, #4]
    f6e6:	7cd3      	ldrb	r3, [r2, #19]
    f6e8:	f36f 03c3 	bfc	r3, #3, #1
    f6ec:	74d3      	strb	r3, [r2, #19]
    f6ee:	e004      	b.n	f6fa <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    f6f0:	687a      	ldr	r2, [r7, #4]
    f6f2:	7cd3      	ldrb	r3, [r2, #19]
    f6f4:	f36f 03c3 	bfc	r3, #3, #1
    f6f8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    f6fa:	2300      	movs	r3, #0
}
    f6fc:	4618      	mov	r0, r3
    f6fe:	3710      	adds	r7, #16
    f700:	46bd      	mov	sp, r7
    f702:	bd80      	pop	{r7, pc}
    f704:	0000dcb5 	.word	0x0000dcb5
    f708:	0000dc5d 	.word	0x0000dc5d
    f70c:	0000dc05 	.word	0x0000dc05
    f710:	0000dcf9 	.word	0x0000dcf9
    f714:	0000dd3d 	.word	0x0000dd3d
    f718:	0000de29 	.word	0x0000de29
    f71c:	0000d6e5 	.word	0x0000d6e5

0000f720 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    f720:	b580      	push	{r7, lr}
    f722:	b086      	sub	sp, #24
    f724:	af00      	add	r7, sp, #0
    f726:	4603      	mov	r3, r0
    f728:	460a      	mov	r2, r1
    f72a:	71fb      	strb	r3, [r7, #7]
    f72c:	4613      	mov	r3, r2
    f72e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    f730:	79fb      	ldrb	r3, [r7, #7]
    f732:	f003 030f 	and.w	r3, r3, #15
    f736:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    f738:	79fb      	ldrb	r3, [r7, #7]
    f73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f73e:	2b00      	cmp	r3, #0
    f740:	bf14      	ite	ne
    f742:	2301      	movne	r3, #1
    f744:	2300      	moveq	r3, #0
    f746:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f748:	7cba      	ldrb	r2, [r7, #18]
    f74a:	7cfb      	ldrb	r3, [r7, #19]
    f74c:	4611      	mov	r1, r2
    f74e:	4618      	mov	r0, r3
    f750:	4b13      	ldr	r3, [pc, #76]	; (f7a0 <_usb_d_dev_ep_stall+0x80>)
    f752:	4798      	blx	r3
    f754:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    f756:	7cfb      	ldrb	r3, [r7, #19]
    f758:	2b04      	cmp	r3, #4
    f75a:	d902      	bls.n	f762 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    f75c:	f06f 0311 	mvn.w	r3, #17
    f760:	e01a      	b.n	f798 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    f762:	79bb      	ldrb	r3, [r7, #6]
    f764:	2b01      	cmp	r3, #1
    f766:	d106      	bne.n	f776 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    f768:	7cbb      	ldrb	r3, [r7, #18]
    f76a:	4619      	mov	r1, r3
    f76c:	68f8      	ldr	r0, [r7, #12]
    f76e:	4b0d      	ldr	r3, [pc, #52]	; (f7a4 <_usb_d_dev_ep_stall+0x84>)
    f770:	4798      	blx	r3
    f772:	6178      	str	r0, [r7, #20]
    f774:	e00f      	b.n	f796 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    f776:	79bb      	ldrb	r3, [r7, #6]
    f778:	2b00      	cmp	r3, #0
    f77a:	d106      	bne.n	f78a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    f77c:	7cbb      	ldrb	r3, [r7, #18]
    f77e:	4619      	mov	r1, r3
    f780:	68f8      	ldr	r0, [r7, #12]
    f782:	4b09      	ldr	r3, [pc, #36]	; (f7a8 <_usb_d_dev_ep_stall+0x88>)
    f784:	4798      	blx	r3
    f786:	6178      	str	r0, [r7, #20]
    f788:	e005      	b.n	f796 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    f78a:	7cbb      	ldrb	r3, [r7, #18]
    f78c:	4619      	mov	r1, r3
    f78e:	68f8      	ldr	r0, [r7, #12]
    f790:	4b06      	ldr	r3, [pc, #24]	; (f7ac <_usb_d_dev_ep_stall+0x8c>)
    f792:	4798      	blx	r3
    f794:	6178      	str	r0, [r7, #20]
	}
	return rc;
    f796:	697b      	ldr	r3, [r7, #20]
}
    f798:	4618      	mov	r0, r3
    f79a:	3718      	adds	r7, #24
    f79c:	46bd      	mov	sp, r7
    f79e:	bd80      	pop	{r7, pc}
    f7a0:	0000e1c1 	.word	0x0000e1c1
    f7a4:	0000f5f5 	.word	0x0000f5f5
    f7a8:	0000f645 	.word	0x0000f645
    f7ac:	0000f5c5 	.word	0x0000f5c5

0000f7b0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    f7b0:	b580      	push	{r7, lr}
    f7b2:	b082      	sub	sp, #8
    f7b4:	af00      	add	r7, sp, #0
    f7b6:	6078      	str	r0, [r7, #4]
    f7b8:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    f7ba:	687b      	ldr	r3, [r7, #4]
    f7bc:	7c9b      	ldrb	r3, [r3, #18]
    f7be:	2bff      	cmp	r3, #255	; 0xff
    f7c0:	d014      	beq.n	f7ec <_usb_d_dev_trans_done+0x3c>
    f7c2:	687b      	ldr	r3, [r7, #4]
    f7c4:	7cdb      	ldrb	r3, [r3, #19]
    f7c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f7ca:	b2db      	uxtb	r3, r3
    f7cc:	2b00      	cmp	r3, #0
    f7ce:	d00d      	beq.n	f7ec <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    f7d0:	687a      	ldr	r2, [r7, #4]
    f7d2:	7cd3      	ldrb	r3, [r2, #19]
    f7d4:	f36f 1386 	bfc	r3, #6, #1
    f7d8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    f7da:	4b06      	ldr	r3, [pc, #24]	; (f7f4 <_usb_d_dev_trans_done+0x44>)
    f7dc:	691b      	ldr	r3, [r3, #16]
    f7de:	687a      	ldr	r2, [r7, #4]
    f7e0:	7c90      	ldrb	r0, [r2, #18]
    f7e2:	687a      	ldr	r2, [r7, #4]
    f7e4:	6892      	ldr	r2, [r2, #8]
    f7e6:	6839      	ldr	r1, [r7, #0]
    f7e8:	4798      	blx	r3
    f7ea:	e000      	b.n	f7ee <_usb_d_dev_trans_done+0x3e>
		return;
    f7ec:	bf00      	nop
}
    f7ee:	3708      	adds	r7, #8
    f7f0:	46bd      	mov	sp, r7
    f7f2:	bd80      	pop	{r7, pc}
    f7f4:	20008b04 	.word	0x20008b04

0000f7f8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    f7f8:	b580      	push	{r7, lr}
    f7fa:	b086      	sub	sp, #24
    f7fc:	af00      	add	r7, sp, #0
    f7fe:	60f8      	str	r0, [r7, #12]
    f800:	460b      	mov	r3, r1
    f802:	607a      	str	r2, [r7, #4]
    f804:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    f806:	68fb      	ldr	r3, [r7, #12]
    f808:	7c9b      	ldrb	r3, [r3, #18]
    f80a:	f003 030f 	and.w	r3, r3, #15
    f80e:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    f810:	4b1f      	ldr	r3, [pc, #124]	; (f890 <_usb_d_dev_trans_stop+0x98>)
    f812:	881b      	ldrh	r3, [r3, #0]
    f814:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    f816:	68fb      	ldr	r3, [r7, #12]
    f818:	7c9b      	ldrb	r3, [r3, #18]
    f81a:	2bff      	cmp	r3, #255	; 0xff
    f81c:	d033      	beq.n	f886 <_usb_d_dev_trans_stop+0x8e>
    f81e:	68fb      	ldr	r3, [r7, #12]
    f820:	7cdb      	ldrb	r3, [r3, #19]
    f822:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f826:	b2db      	uxtb	r3, r3
    f828:	2b00      	cmp	r3, #0
    f82a:	d02c      	beq.n	f886 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    f82c:	7afb      	ldrb	r3, [r7, #11]
    f82e:	2b00      	cmp	r3, #0
    f830:	d006      	beq.n	f840 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    f832:	7dfb      	ldrb	r3, [r7, #23]
    f834:	2200      	movs	r2, #0
    f836:	2101      	movs	r1, #1
    f838:	4618      	mov	r0, r3
    f83a:	4b16      	ldr	r3, [pc, #88]	; (f894 <_usb_d_dev_trans_stop+0x9c>)
    f83c:	4798      	blx	r3
    f83e:	e005      	b.n	f84c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    f840:	7dfb      	ldrb	r3, [r7, #23]
    f842:	2200      	movs	r2, #0
    f844:	2100      	movs	r1, #0
    f846:	4618      	mov	r0, r3
    f848:	4b13      	ldr	r3, [pc, #76]	; (f898 <_usb_d_dev_trans_stop+0xa0>)
    f84a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    f84c:	7afb      	ldrb	r3, [r7, #11]
    f84e:	f107 0218 	add.w	r2, r7, #24
    f852:	4413      	add	r3, r2
    f854:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    f858:	461a      	mov	r2, r3
    f85a:	7dfb      	ldrb	r3, [r7, #23]
    f85c:	4611      	mov	r1, r2
    f85e:	4618      	mov	r0, r3
    f860:	4b0e      	ldr	r3, [pc, #56]	; (f89c <_usb_d_dev_trans_stop+0xa4>)
    f862:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    f864:	7afb      	ldrb	r3, [r7, #11]
    f866:	f107 0218 	add.w	r2, r7, #24
    f86a:	4413      	add	r3, r2
    f86c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    f870:	461a      	mov	r2, r3
    f872:	7dfb      	ldrb	r3, [r7, #23]
    f874:	4611      	mov	r1, r2
    f876:	4618      	mov	r0, r3
    f878:	4b09      	ldr	r3, [pc, #36]	; (f8a0 <_usb_d_dev_trans_stop+0xa8>)
    f87a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    f87c:	6879      	ldr	r1, [r7, #4]
    f87e:	68f8      	ldr	r0, [r7, #12]
    f880:	4b08      	ldr	r3, [pc, #32]	; (f8a4 <_usb_d_dev_trans_stop+0xac>)
    f882:	4798      	blx	r3
    f884:	e000      	b.n	f888 <_usb_d_dev_trans_stop+0x90>
		return;
    f886:	bf00      	nop
}
    f888:	3718      	adds	r7, #24
    f88a:	46bd      	mov	sp, r7
    f88c:	bd80      	pop	{r7, pc}
    f88e:	bf00      	nop
    f890:	0001fc2c 	.word	0x0001fc2c
    f894:	0000e0ad 	.word	0x0000e0ad
    f898:	0000e105 	.word	0x0000e105
    f89c:	0000dbb5 	.word	0x0000dbb5
    f8a0:	0000dc05 	.word	0x0000dc05
    f8a4:	0000f7b1 	.word	0x0000f7b1

0000f8a8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    f8a8:	b580      	push	{r7, lr}
    f8aa:	b086      	sub	sp, #24
    f8ac:	af00      	add	r7, sp, #0
    f8ae:	4603      	mov	r3, r0
    f8b0:	6039      	str	r1, [r7, #0]
    f8b2:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    f8b4:	79fb      	ldrb	r3, [r7, #7]
    f8b6:	f003 030f 	and.w	r3, r3, #15
    f8ba:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    f8bc:	7dfb      	ldrb	r3, [r7, #23]
    f8be:	015b      	lsls	r3, r3, #5
    f8c0:	4a1e      	ldr	r2, [pc, #120]	; (f93c <_usb_d_dev_ep_read_req+0x94>)
    f8c2:	4413      	add	r3, r2
    f8c4:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    f8c6:	693b      	ldr	r3, [r7, #16]
    f8c8:	681b      	ldr	r3, [r3, #0]
    f8ca:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    f8cc:	693b      	ldr	r3, [r7, #16]
    f8ce:	685b      	ldr	r3, [r3, #4]
    f8d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    f8d4:	b29b      	uxth	r3, r3
    f8d6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    f8d8:	7dfb      	ldrb	r3, [r7, #23]
    f8da:	2b04      	cmp	r3, #4
    f8dc:	d802      	bhi.n	f8e4 <_usb_d_dev_ep_read_req+0x3c>
    f8de:	683b      	ldr	r3, [r7, #0]
    f8e0:	2b00      	cmp	r3, #0
    f8e2:	d102      	bne.n	f8ea <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    f8e4:	f06f 0311 	mvn.w	r3, #17
    f8e8:	e023      	b.n	f932 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    f8ea:	7dfb      	ldrb	r3, [r7, #23]
    f8ec:	4618      	mov	r0, r3
    f8ee:	4b14      	ldr	r3, [pc, #80]	; (f940 <_usb_d_dev_ep_read_req+0x98>)
    f8f0:	4798      	blx	r3
    f8f2:	4603      	mov	r3, r0
    f8f4:	f083 0301 	eor.w	r3, r3, #1
    f8f8:	b2db      	uxtb	r3, r3
    f8fa:	2b00      	cmp	r3, #0
    f8fc:	d002      	beq.n	f904 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    f8fe:	f06f 0312 	mvn.w	r3, #18
    f902:	e016      	b.n	f932 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    f904:	7dfb      	ldrb	r3, [r7, #23]
    f906:	4618      	mov	r0, r3
    f908:	4b0e      	ldr	r3, [pc, #56]	; (f944 <_usb_d_dev_ep_read_req+0x9c>)
    f90a:	4798      	blx	r3
    f90c:	4603      	mov	r3, r0
    f90e:	f083 0301 	eor.w	r3, r3, #1
    f912:	b2db      	uxtb	r3, r3
    f914:	2b00      	cmp	r3, #0
    f916:	d001      	beq.n	f91c <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    f918:	2300      	movs	r3, #0
    f91a:	e00a      	b.n	f932 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    f91c:	68fb      	ldr	r3, [r7, #12]
    f91e:	2208      	movs	r2, #8
    f920:	4619      	mov	r1, r3
    f922:	6838      	ldr	r0, [r7, #0]
    f924:	4b08      	ldr	r3, [pc, #32]	; (f948 <_usb_d_dev_ep_read_req+0xa0>)
    f926:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    f928:	7dfb      	ldrb	r3, [r7, #23]
    f92a:	4618      	mov	r0, r3
    f92c:	4b07      	ldr	r3, [pc, #28]	; (f94c <_usb_d_dev_ep_read_req+0xa4>)
    f92e:	4798      	blx	r3

	return bytes;
    f930:	897b      	ldrh	r3, [r7, #10]
}
    f932:	4618      	mov	r0, r3
    f934:	3718      	adds	r7, #24
    f936:	46bd      	mov	sp, r7
    f938:	bd80      	pop	{r7, pc}
    f93a:	bf00      	nop
    f93c:	20008bcc 	.word	0x20008bcc
    f940:	0000dc2d 	.word	0x0000dc2d
    f944:	0000ddd9 	.word	0x0000ddd9
    f948:	0001b35d 	.word	0x0001b35d
    f94c:	0000de09 	.word	0x0000de09

0000f950 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    f950:	b580      	push	{r7, lr}
    f952:	b086      	sub	sp, #24
    f954:	af00      	add	r7, sp, #0
    f956:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    f958:	687b      	ldr	r3, [r7, #4]
    f95a:	7a1b      	ldrb	r3, [r3, #8]
    f95c:	f003 030f 	and.w	r3, r3, #15
    f960:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    f962:	687b      	ldr	r3, [r7, #4]
    f964:	7a1b      	ldrb	r3, [r3, #8]
    f966:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f96a:	2b00      	cmp	r3, #0
    f96c:	bf14      	ite	ne
    f96e:	2301      	movne	r3, #1
    f970:	2300      	moveq	r3, #0
    f972:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    f974:	7d7a      	ldrb	r2, [r7, #21]
    f976:	7dbb      	ldrb	r3, [r7, #22]
    f978:	4611      	mov	r1, r2
    f97a:	4618      	mov	r0, r3
    f97c:	4b5f      	ldr	r3, [pc, #380]	; (fafc <_usb_d_dev_ep_trans+0x1ac>)
    f97e:	4798      	blx	r3
    f980:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    f982:	693b      	ldr	r3, [r7, #16]
    f984:	8a1b      	ldrh	r3, [r3, #16]
    f986:	f240 32ff 	movw	r2, #1023	; 0x3ff
    f98a:	4293      	cmp	r3, r2
    f98c:	d004      	beq.n	f998 <_usb_d_dev_ep_trans+0x48>
    f98e:	693b      	ldr	r3, [r7, #16]
    f990:	8a1b      	ldrh	r3, [r3, #16]
    f992:	3b01      	subs	r3, #1
    f994:	b29b      	uxth	r3, r3
    f996:	e001      	b.n	f99c <_usb_d_dev_ep_trans+0x4c>
    f998:	f240 33ff 	movw	r3, #1023	; 0x3ff
    f99c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    f99e:	687b      	ldr	r3, [r7, #4]
    f9a0:	685a      	ldr	r2, [r3, #4]
    f9a2:	89fb      	ldrh	r3, [r7, #14]
    f9a4:	4013      	ands	r3, r2
    f9a6:	2b00      	cmp	r3, #0
    f9a8:	bf14      	ite	ne
    f9aa:	2301      	movne	r3, #1
    f9ac:	2300      	moveq	r3, #0
    f9ae:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    f9b0:	2300      	movs	r3, #0
    f9b2:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    f9b4:	7dbb      	ldrb	r3, [r7, #22]
    f9b6:	2b04      	cmp	r3, #4
    f9b8:	d902      	bls.n	f9c0 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    f9ba:	f06f 0311 	mvn.w	r3, #17
    f9be:	e098      	b.n	faf2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    f9c0:	687b      	ldr	r3, [r7, #4]
    f9c2:	681b      	ldr	r3, [r3, #0]
    f9c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    f9c8:	d31a      	bcc.n	fa00 <_usb_d_dev_ep_trans+0xb0>
    f9ca:	687b      	ldr	r3, [r7, #4]
    f9cc:	681b      	ldr	r3, [r3, #0]
    f9ce:	461a      	mov	r2, r3
    f9d0:	687b      	ldr	r3, [r7, #4]
    f9d2:	685b      	ldr	r3, [r3, #4]
    f9d4:	4413      	add	r3, r2
    f9d6:	4a4a      	ldr	r2, [pc, #296]	; (fb00 <_usb_d_dev_ep_trans+0x1b0>)
    f9d8:	4293      	cmp	r3, r2
    f9da:	d811      	bhi.n	fa00 <_usb_d_dev_ep_trans+0xb0>
    f9dc:	687b      	ldr	r3, [r7, #4]
    f9de:	681b      	ldr	r3, [r3, #0]
    f9e0:	f003 0303 	and.w	r3, r3, #3
    f9e4:	2b00      	cmp	r3, #0
    f9e6:	d10b      	bne.n	fa00 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    f9e8:	7d7b      	ldrb	r3, [r7, #21]
    f9ea:	f083 0301 	eor.w	r3, r3, #1
    f9ee:	b2db      	uxtb	r3, r3
    f9f0:	2b00      	cmp	r3, #0
    f9f2:	d00e      	beq.n	fa12 <_usb_d_dev_ep_trans+0xc2>
    f9f4:	687b      	ldr	r3, [r7, #4]
    f9f6:	685b      	ldr	r3, [r3, #4]
    f9f8:	693a      	ldr	r2, [r7, #16]
    f9fa:	8a12      	ldrh	r2, [r2, #16]
    f9fc:	4293      	cmp	r3, r2
    f9fe:	d208      	bcs.n	fa12 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    fa00:	693b      	ldr	r3, [r7, #16]
    fa02:	68db      	ldr	r3, [r3, #12]
    fa04:	2b00      	cmp	r3, #0
    fa06:	d102      	bne.n	fa0e <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    fa08:	f06f 0312 	mvn.w	r3, #18
    fa0c:	e071      	b.n	faf2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    fa0e:	2301      	movs	r3, #1
    fa10:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    fa12:	7d7b      	ldrb	r3, [r7, #21]
    fa14:	f083 0301 	eor.w	r3, r3, #1
    fa18:	b2db      	uxtb	r3, r3
    fa1a:	2b00      	cmp	r3, #0
    fa1c:	d009      	beq.n	fa32 <_usb_d_dev_ep_trans+0xe2>
    fa1e:	7b7b      	ldrb	r3, [r7, #13]
    fa20:	2b00      	cmp	r3, #0
    fa22:	d006      	beq.n	fa32 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    fa24:	693b      	ldr	r3, [r7, #16]
    fa26:	68db      	ldr	r3, [r3, #12]
    fa28:	2b00      	cmp	r3, #0
    fa2a:	d102      	bne.n	fa32 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    fa2c:	f06f 0311 	mvn.w	r3, #17
    fa30:	e05f      	b.n	faf2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    fa32:	693b      	ldr	r3, [r7, #16]
    fa34:	7cdb      	ldrb	r3, [r3, #19]
    fa36:	f003 0308 	and.w	r3, r3, #8
    fa3a:	b2db      	uxtb	r3, r3
    fa3c:	2b00      	cmp	r3, #0
    fa3e:	d001      	beq.n	fa44 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    fa40:	2302      	movs	r3, #2
    fa42:	e056      	b.n	faf2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    fa44:	f107 0308 	add.w	r3, r7, #8
    fa48:	4618      	mov	r0, r3
    fa4a:	4b2e      	ldr	r3, [pc, #184]	; (fb04 <_usb_d_dev_ep_trans+0x1b4>)
    fa4c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    fa4e:	693b      	ldr	r3, [r7, #16]
    fa50:	7cdb      	ldrb	r3, [r3, #19]
    fa52:	f003 0340 	and.w	r3, r3, #64	; 0x40
    fa56:	b2db      	uxtb	r3, r3
    fa58:	2b00      	cmp	r3, #0
    fa5a:	d006      	beq.n	fa6a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    fa5c:	f107 0308 	add.w	r3, r7, #8
    fa60:	4618      	mov	r0, r3
    fa62:	4b29      	ldr	r3, [pc, #164]	; (fb08 <_usb_d_dev_ep_trans+0x1b8>)
    fa64:	4798      	blx	r3
		return USB_BUSY;
    fa66:	2301      	movs	r3, #1
    fa68:	e043      	b.n	faf2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    fa6a:	693a      	ldr	r2, [r7, #16]
    fa6c:	7cd3      	ldrb	r3, [r2, #19]
    fa6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fa72:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    fa74:	f107 0308 	add.w	r3, r7, #8
    fa78:	4618      	mov	r0, r3
    fa7a:	4b23      	ldr	r3, [pc, #140]	; (fb08 <_usb_d_dev_ep_trans+0x1b8>)
    fa7c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    fa7e:	687b      	ldr	r3, [r7, #4]
    fa80:	681a      	ldr	r2, [r3, #0]
    fa82:	693b      	ldr	r3, [r7, #16]
    fa84:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    fa86:	687b      	ldr	r3, [r7, #4]
    fa88:	685a      	ldr	r2, [r3, #4]
    fa8a:	693b      	ldr	r3, [r7, #16]
    fa8c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    fa8e:	693b      	ldr	r3, [r7, #16]
    fa90:	2200      	movs	r2, #0
    fa92:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    fa94:	693a      	ldr	r2, [r7, #16]
    fa96:	7cd3      	ldrb	r3, [r2, #19]
    fa98:	7d79      	ldrb	r1, [r7, #21]
    fa9a:	f361 13c7 	bfi	r3, r1, #7, #1
    fa9e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    faa0:	693a      	ldr	r2, [r7, #16]
    faa2:	7cd3      	ldrb	r3, [r2, #19]
    faa4:	7df9      	ldrb	r1, [r7, #23]
    faa6:	f361 1345 	bfi	r3, r1, #5, #1
    faaa:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    faac:	687b      	ldr	r3, [r7, #4]
    faae:	7a5b      	ldrb	r3, [r3, #9]
    fab0:	2b00      	cmp	r3, #0
    fab2:	d007      	beq.n	fac4 <_usb_d_dev_ep_trans+0x174>
    fab4:	7b7b      	ldrb	r3, [r7, #13]
    fab6:	f083 0301 	eor.w	r3, r3, #1
    faba:	b2db      	uxtb	r3, r3
    fabc:	2b00      	cmp	r3, #0
    fabe:	d001      	beq.n	fac4 <_usb_d_dev_ep_trans+0x174>
    fac0:	2301      	movs	r3, #1
    fac2:	e000      	b.n	fac6 <_usb_d_dev_ep_trans+0x176>
    fac4:	2300      	movs	r3, #0
    fac6:	b2db      	uxtb	r3, r3
    fac8:	f003 0301 	and.w	r3, r3, #1
    facc:	b2d9      	uxtb	r1, r3
    face:	693a      	ldr	r2, [r7, #16]
    fad0:	7cd3      	ldrb	r3, [r2, #19]
    fad2:	f361 1304 	bfi	r3, r1, #4, #1
    fad6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    fad8:	7d7b      	ldrb	r3, [r7, #21]
    fada:	2b00      	cmp	r3, #0
    fadc:	d004      	beq.n	fae8 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    fade:	2100      	movs	r1, #0
    fae0:	6938      	ldr	r0, [r7, #16]
    fae2:	4b0a      	ldr	r3, [pc, #40]	; (fb0c <_usb_d_dev_ep_trans+0x1bc>)
    fae4:	4798      	blx	r3
    fae6:	e003      	b.n	faf0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    fae8:	2100      	movs	r1, #0
    faea:	6938      	ldr	r0, [r7, #16]
    faec:	4b08      	ldr	r3, [pc, #32]	; (fb10 <_usb_d_dev_ep_trans+0x1c0>)
    faee:	4798      	blx	r3
	}

	return ERR_NONE;
    faf0:	2300      	movs	r3, #0
}
    faf2:	4618      	mov	r0, r3
    faf4:	3718      	adds	r7, #24
    faf6:	46bd      	mov	sp, r7
    faf8:	bd80      	pop	{r7, pc}
    fafa:	bf00      	nop
    fafc:	0000e1c1 	.word	0x0000e1c1
    fb00:	20041fff 	.word	0x20041fff
    fb04:	0001059d 	.word	0x0001059d
    fb08:	000105c3 	.word	0x000105c3
    fb0c:	0000e489 	.word	0x0000e489
    fb10:	0000e6a1 	.word	0x0000e6a1

0000fb14 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    fb14:	b580      	push	{r7, lr}
    fb16:	b084      	sub	sp, #16
    fb18:	af00      	add	r7, sp, #0
    fb1a:	4603      	mov	r3, r0
    fb1c:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    fb1e:	79fb      	ldrb	r3, [r7, #7]
    fb20:	f003 030f 	and.w	r3, r3, #15
    fb24:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    fb26:	79fb      	ldrb	r3, [r7, #7]
    fb28:	f003 0380 	and.w	r3, r3, #128	; 0x80
    fb2c:	2b00      	cmp	r3, #0
    fb2e:	bf14      	ite	ne
    fb30:	2301      	movne	r3, #1
    fb32:	2300      	moveq	r3, #0
    fb34:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    fb36:	7bba      	ldrb	r2, [r7, #14]
    fb38:	7bfb      	ldrb	r3, [r7, #15]
    fb3a:	4611      	mov	r1, r2
    fb3c:	4618      	mov	r0, r3
    fb3e:	4b08      	ldr	r3, [pc, #32]	; (fb60 <_usb_d_dev_ep_abort+0x4c>)
    fb40:	4798      	blx	r3
    fb42:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    fb44:	7bfb      	ldrb	r3, [r7, #15]
    fb46:	2b04      	cmp	r3, #4
    fb48:	d806      	bhi.n	fb58 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    fb4a:	7bbb      	ldrb	r3, [r7, #14]
    fb4c:	2202      	movs	r2, #2
    fb4e:	4619      	mov	r1, r3
    fb50:	68b8      	ldr	r0, [r7, #8]
    fb52:	4b04      	ldr	r3, [pc, #16]	; (fb64 <_usb_d_dev_ep_abort+0x50>)
    fb54:	4798      	blx	r3
    fb56:	e000      	b.n	fb5a <_usb_d_dev_ep_abort+0x46>
		return;
    fb58:	bf00      	nop
}
    fb5a:	3710      	adds	r7, #16
    fb5c:	46bd      	mov	sp, r7
    fb5e:	bd80      	pop	{r7, pc}
    fb60:	0000e1c1 	.word	0x0000e1c1
    fb64:	0000f7f9 	.word	0x0000f7f9

0000fb68 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    fb68:	b480      	push	{r7}
    fb6a:	b085      	sub	sp, #20
    fb6c:	af00      	add	r7, sp, #0
    fb6e:	4603      	mov	r3, r0
    fb70:	6039      	str	r1, [r7, #0]
    fb72:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    fb74:	683b      	ldr	r3, [r7, #0]
    fb76:	2b00      	cmp	r3, #0
    fb78:	d001      	beq.n	fb7e <_usb_d_dev_register_callback+0x16>
    fb7a:	683b      	ldr	r3, [r7, #0]
    fb7c:	e000      	b.n	fb80 <_usb_d_dev_register_callback+0x18>
    fb7e:	4b0a      	ldr	r3, [pc, #40]	; (fba8 <_usb_d_dev_register_callback+0x40>)
    fb80:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    fb82:	79fb      	ldrb	r3, [r7, #7]
    fb84:	2b01      	cmp	r3, #1
    fb86:	d103      	bne.n	fb90 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    fb88:	4a08      	ldr	r2, [pc, #32]	; (fbac <_usb_d_dev_register_callback+0x44>)
    fb8a:	68fb      	ldr	r3, [r7, #12]
    fb8c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    fb8e:	e005      	b.n	fb9c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    fb90:	79fb      	ldrb	r3, [r7, #7]
    fb92:	2b00      	cmp	r3, #0
    fb94:	d102      	bne.n	fb9c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    fb96:	4a05      	ldr	r2, [pc, #20]	; (fbac <_usb_d_dev_register_callback+0x44>)
    fb98:	68fb      	ldr	r3, [r7, #12]
    fb9a:	6013      	str	r3, [r2, #0]
}
    fb9c:	bf00      	nop
    fb9e:	3714      	adds	r7, #20
    fba0:	46bd      	mov	sp, r7
    fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    fba6:	4770      	bx	lr
    fba8:	0000da49 	.word	0x0000da49
    fbac:	20008b04 	.word	0x20008b04

0000fbb0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    fbb0:	b480      	push	{r7}
    fbb2:	b085      	sub	sp, #20
    fbb4:	af00      	add	r7, sp, #0
    fbb6:	4603      	mov	r3, r0
    fbb8:	6039      	str	r1, [r7, #0]
    fbba:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    fbbc:	683b      	ldr	r3, [r7, #0]
    fbbe:	2b00      	cmp	r3, #0
    fbc0:	d001      	beq.n	fbc6 <_usb_d_dev_register_ep_callback+0x16>
    fbc2:	683b      	ldr	r3, [r7, #0]
    fbc4:	e000      	b.n	fbc8 <_usb_d_dev_register_ep_callback+0x18>
    fbc6:	4b0e      	ldr	r3, [pc, #56]	; (fc00 <_usb_d_dev_register_ep_callback+0x50>)
    fbc8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    fbca:	79fb      	ldrb	r3, [r7, #7]
    fbcc:	2b00      	cmp	r3, #0
    fbce:	d103      	bne.n	fbd8 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    fbd0:	4a0c      	ldr	r2, [pc, #48]	; (fc04 <_usb_d_dev_register_ep_callback+0x54>)
    fbd2:	68fb      	ldr	r3, [r7, #12]
    fbd4:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    fbd6:	e00c      	b.n	fbf2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    fbd8:	79fb      	ldrb	r3, [r7, #7]
    fbda:	2b01      	cmp	r3, #1
    fbdc:	d103      	bne.n	fbe6 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    fbde:	4a09      	ldr	r2, [pc, #36]	; (fc04 <_usb_d_dev_register_ep_callback+0x54>)
    fbe0:	68fb      	ldr	r3, [r7, #12]
    fbe2:	60d3      	str	r3, [r2, #12]
}
    fbe4:	e005      	b.n	fbf2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    fbe6:	79fb      	ldrb	r3, [r7, #7]
    fbe8:	2b02      	cmp	r3, #2
    fbea:	d102      	bne.n	fbf2 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    fbec:	4a05      	ldr	r2, [pc, #20]	; (fc04 <_usb_d_dev_register_ep_callback+0x54>)
    fbee:	68fb      	ldr	r3, [r7, #12]
    fbf0:	6113      	str	r3, [r2, #16]
}
    fbf2:	bf00      	nop
    fbf4:	3714      	adds	r7, #20
    fbf6:	46bd      	mov	sp, r7
    fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    fbfc:	4770      	bx	lr
    fbfe:	bf00      	nop
    fc00:	0000da49 	.word	0x0000da49
    fc04:	20008b04 	.word	0x20008b04

0000fc08 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    fc08:	b580      	push	{r7, lr}
    fc0a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    fc0c:	4b01      	ldr	r3, [pc, #4]	; (fc14 <USB_0_Handler+0xc>)
    fc0e:	4798      	blx	r3
}
    fc10:	bf00      	nop
    fc12:	bd80      	pop	{r7, pc}
    fc14:	0000ee79 	.word	0x0000ee79

0000fc18 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    fc18:	b580      	push	{r7, lr}
    fc1a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    fc1c:	4b01      	ldr	r3, [pc, #4]	; (fc24 <USB_1_Handler+0xc>)
    fc1e:	4798      	blx	r3
}
    fc20:	bf00      	nop
    fc22:	bd80      	pop	{r7, pc}
    fc24:	0000ee79 	.word	0x0000ee79

0000fc28 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    fc28:	b580      	push	{r7, lr}
    fc2a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    fc2c:	4b01      	ldr	r3, [pc, #4]	; (fc34 <USB_2_Handler+0xc>)
    fc2e:	4798      	blx	r3
}
    fc30:	bf00      	nop
    fc32:	bd80      	pop	{r7, pc}
    fc34:	0000ee79 	.word	0x0000ee79

0000fc38 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    fc38:	b580      	push	{r7, lr}
    fc3a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    fc3c:	4b01      	ldr	r3, [pc, #4]	; (fc44 <USB_3_Handler+0xc>)
    fc3e:	4798      	blx	r3
}
    fc40:	bf00      	nop
    fc42:	bd80      	pop	{r7, pc}
    fc44:	0000ee79 	.word	0x0000ee79

0000fc48 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    fc48:	b480      	push	{r7}
    fc4a:	b083      	sub	sp, #12
    fc4c:	af00      	add	r7, sp, #0
    fc4e:	6078      	str	r0, [r7, #4]
    fc50:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    fc52:	bf00      	nop
    fc54:	687b      	ldr	r3, [r7, #4]
    fc56:	689a      	ldr	r2, [r3, #8]
    fc58:	683b      	ldr	r3, [r7, #0]
    fc5a:	4013      	ands	r3, r2
    fc5c:	2b00      	cmp	r3, #0
    fc5e:	d1f9      	bne.n	fc54 <hri_wdt_wait_for_sync+0xc>
	};
}
    fc60:	bf00      	nop
    fc62:	370c      	adds	r7, #12
    fc64:	46bd      	mov	sp, r7
    fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
    fc6a:	4770      	bx	lr

0000fc6c <hri_wdt_set_CTRLA_ENABLE_bit>:
{
	return ((Wdt *)hw)->SYNCBUSY.reg;
}

static inline void hri_wdt_set_CTRLA_ENABLE_bit(const void *const hw)
{
    fc6c:	b580      	push	{r7, lr}
    fc6e:	b082      	sub	sp, #8
    fc70:	af00      	add	r7, sp, #0
    fc72:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    fc74:	687b      	ldr	r3, [r7, #4]
    fc76:	781b      	ldrb	r3, [r3, #0]
    fc78:	b2db      	uxtb	r3, r3
    fc7a:	f043 0302 	orr.w	r3, r3, #2
    fc7e:	b2da      	uxtb	r2, r3
    fc80:	687b      	ldr	r3, [r7, #4]
    fc82:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    fc84:	210e      	movs	r1, #14
    fc86:	6878      	ldr	r0, [r7, #4]
    fc88:	4b02      	ldr	r3, [pc, #8]	; (fc94 <hri_wdt_set_CTRLA_ENABLE_bit+0x28>)
    fc8a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    fc8c:	bf00      	nop
    fc8e:	3708      	adds	r7, #8
    fc90:	46bd      	mov	sp, r7
    fc92:	bd80      	pop	{r7, pc}
    fc94:	0000fc49 	.word	0x0000fc49

0000fc98 <hri_wdt_get_CTRLA_ENABLE_bit>:

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    fc98:	b580      	push	{r7, lr}
    fc9a:	b084      	sub	sp, #16
    fc9c:	af00      	add	r7, sp, #0
    fc9e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    fca0:	210e      	movs	r1, #14
    fca2:	6878      	ldr	r0, [r7, #4]
    fca4:	4b0a      	ldr	r3, [pc, #40]	; (fcd0 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    fca6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    fca8:	687b      	ldr	r3, [r7, #4]
    fcaa:	781b      	ldrb	r3, [r3, #0]
    fcac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    fcae:	7bfb      	ldrb	r3, [r7, #15]
    fcb0:	085b      	lsrs	r3, r3, #1
    fcb2:	b2db      	uxtb	r3, r3
    fcb4:	f003 0301 	and.w	r3, r3, #1
    fcb8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    fcba:	7bfb      	ldrb	r3, [r7, #15]
    fcbc:	2b00      	cmp	r3, #0
    fcbe:	bf14      	ite	ne
    fcc0:	2301      	movne	r3, #1
    fcc2:	2300      	moveq	r3, #0
    fcc4:	b2db      	uxtb	r3, r3
}
    fcc6:	4618      	mov	r0, r3
    fcc8:	3710      	adds	r7, #16
    fcca:	46bd      	mov	sp, r7
    fccc:	bd80      	pop	{r7, pc}
    fcce:	bf00      	nop
    fcd0:	0000fc49 	.word	0x0000fc49

0000fcd4 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    fcd4:	b580      	push	{r7, lr}
    fcd6:	b082      	sub	sp, #8
    fcd8:	af00      	add	r7, sp, #0
    fcda:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    fcdc:	687b      	ldr	r3, [r7, #4]
    fcde:	781b      	ldrb	r3, [r3, #0]
    fce0:	b2db      	uxtb	r3, r3
    fce2:	f023 0304 	bic.w	r3, r3, #4
    fce6:	b2da      	uxtb	r2, r3
    fce8:	687b      	ldr	r3, [r7, #4]
    fcea:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    fcec:	210e      	movs	r1, #14
    fcee:	6878      	ldr	r0, [r7, #4]
    fcf0:	4b02      	ldr	r3, [pc, #8]	; (fcfc <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    fcf2:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    fcf4:	bf00      	nop
    fcf6:	3708      	adds	r7, #8
    fcf8:	46bd      	mov	sp, r7
    fcfa:	bd80      	pop	{r7, pc}
    fcfc:	0000fc49 	.word	0x0000fc49

0000fd00 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    fd00:	b580      	push	{r7, lr}
    fd02:	b084      	sub	sp, #16
    fd04:	af00      	add	r7, sp, #0
    fd06:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    fd08:	210e      	movs	r1, #14
    fd0a:	6878      	ldr	r0, [r7, #4]
    fd0c:	4b08      	ldr	r3, [pc, #32]	; (fd30 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    fd0e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    fd10:	687b      	ldr	r3, [r7, #4]
    fd12:	781b      	ldrb	r3, [r3, #0]
    fd14:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    fd16:	7bfb      	ldrb	r3, [r7, #15]
    fd18:	09db      	lsrs	r3, r3, #7
    fd1a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    fd1c:	7bfb      	ldrb	r3, [r7, #15]
    fd1e:	2b00      	cmp	r3, #0
    fd20:	bf14      	ite	ne
    fd22:	2301      	movne	r3, #1
    fd24:	2300      	moveq	r3, #0
    fd26:	b2db      	uxtb	r3, r3
}
    fd28:	4618      	mov	r0, r3
    fd2a:	3710      	adds	r7, #16
    fd2c:	46bd      	mov	sp, r7
    fd2e:	bd80      	pop	{r7, pc}
    fd30:	0000fc49 	.word	0x0000fc49

0000fd34 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    fd34:	b480      	push	{r7}
    fd36:	b085      	sub	sp, #20
    fd38:	af00      	add	r7, sp, #0
    fd3a:	6078      	str	r0, [r7, #4]
    fd3c:	460b      	mov	r3, r1
    fd3e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    fd40:	687b      	ldr	r3, [r7, #4]
    fd42:	785b      	ldrb	r3, [r3, #1]
    fd44:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    fd46:	7bfb      	ldrb	r3, [r7, #15]
    fd48:	f023 030f 	bic.w	r3, r3, #15
    fd4c:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    fd4e:	78fb      	ldrb	r3, [r7, #3]
    fd50:	f003 030f 	and.w	r3, r3, #15
    fd54:	b2da      	uxtb	r2, r3
    fd56:	7bfb      	ldrb	r3, [r7, #15]
    fd58:	4313      	orrs	r3, r2
    fd5a:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    fd5c:	687b      	ldr	r3, [r7, #4]
    fd5e:	7bfa      	ldrb	r2, [r7, #15]
    fd60:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    fd62:	bf00      	nop
    fd64:	3714      	adds	r7, #20
    fd66:	46bd      	mov	sp, r7
    fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
    fd6c:	4770      	bx	lr
	...

0000fd70 <hri_wdt_write_CLEAR_reg>:
{
	return ((Wdt *)hw)->EWCTRL.reg;
}

static inline void hri_wdt_write_CLEAR_reg(const void *const hw, hri_wdt_clear_reg_t data)
{
    fd70:	b580      	push	{r7, lr}
    fd72:	b082      	sub	sp, #8
    fd74:	af00      	add	r7, sp, #0
    fd76:	6078      	str	r0, [r7, #4]
    fd78:	460b      	mov	r3, r1
    fd7a:	70fb      	strb	r3, [r7, #3]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CLEAR.reg = data;
    fd7c:	687b      	ldr	r3, [r7, #4]
    fd7e:	78fa      	ldrb	r2, [r7, #3]
    fd80:	731a      	strb	r2, [r3, #12]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_CLEAR);
    fd82:	2110      	movs	r1, #16
    fd84:	6878      	ldr	r0, [r7, #4]
    fd86:	4b03      	ldr	r3, [pc, #12]	; (fd94 <hri_wdt_write_CLEAR_reg+0x24>)
    fd88:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    fd8a:	bf00      	nop
    fd8c:	3708      	adds	r7, #8
    fd8e:	46bd      	mov	sp, r7
    fd90:	bd80      	pop	{r7, pc}
    fd92:	bf00      	nop
    fd94:	0000fc49 	.word	0x0000fc49

0000fd98 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    fd98:	b580      	push	{r7, lr}
    fd9a:	b082      	sub	sp, #8
    fd9c:	af00      	add	r7, sp, #0
    fd9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    fda0:	687b      	ldr	r3, [r7, #4]
    fda2:	2b00      	cmp	r3, #0
    fda4:	d005      	beq.n	fdb2 <_wdt_init+0x1a>
    fda6:	687b      	ldr	r3, [r7, #4]
    fda8:	681b      	ldr	r3, [r3, #0]
    fdaa:	2b00      	cmp	r3, #0
    fdac:	d001      	beq.n	fdb2 <_wdt_init+0x1a>
    fdae:	2301      	movs	r3, #1
    fdb0:	e000      	b.n	fdb4 <_wdt_init+0x1c>
    fdb2:	2300      	movs	r3, #0
    fdb4:	f003 0301 	and.w	r3, r3, #1
    fdb8:	b2db      	uxtb	r3, r3
    fdba:	2250      	movs	r2, #80	; 0x50
    fdbc:	4913      	ldr	r1, [pc, #76]	; (fe0c <_wdt_init+0x74>)
    fdbe:	4618      	mov	r0, r3
    fdc0:	4b13      	ldr	r3, [pc, #76]	; (fe10 <_wdt_init+0x78>)
    fdc2:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    fdc4:	687b      	ldr	r3, [r7, #4]
    fdc6:	681b      	ldr	r3, [r3, #0]
    fdc8:	4618      	mov	r0, r3
    fdca:	4b12      	ldr	r3, [pc, #72]	; (fe14 <_wdt_init+0x7c>)
    fdcc:	4798      	blx	r3
    fdce:	4603      	mov	r3, r0
    fdd0:	2b00      	cmp	r3, #0
    fdd2:	d107      	bne.n	fde4 <_wdt_init+0x4c>
    fdd4:	687b      	ldr	r3, [r7, #4]
    fdd6:	681b      	ldr	r3, [r3, #0]
    fdd8:	4618      	mov	r0, r3
    fdda:	4b0f      	ldr	r3, [pc, #60]	; (fe18 <_wdt_init+0x80>)
    fddc:	4798      	blx	r3
    fdde:	4603      	mov	r3, r0
    fde0:	2b00      	cmp	r3, #0
    fde2:	d002      	beq.n	fdea <_wdt_init+0x52>
		return ERR_DENIED;
    fde4:	f06f 0310 	mvn.w	r3, #16
    fde8:	e00b      	b.n	fe02 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    fdea:	687b      	ldr	r3, [r7, #4]
    fdec:	681b      	ldr	r3, [r3, #0]
    fdee:	4618      	mov	r0, r3
    fdf0:	4b0a      	ldr	r3, [pc, #40]	; (fe1c <_wdt_init+0x84>)
    fdf2:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    fdf4:	687b      	ldr	r3, [r7, #4]
    fdf6:	681b      	ldr	r3, [r3, #0]
    fdf8:	210b      	movs	r1, #11
    fdfa:	4618      	mov	r0, r3
    fdfc:	4b08      	ldr	r3, [pc, #32]	; (fe20 <_wdt_init+0x88>)
    fdfe:	4798      	blx	r3
	}

	return ERR_NONE;
    fe00:	2300      	movs	r3, #0
}
    fe02:	4618      	mov	r0, r3
    fe04:	3708      	adds	r7, #8
    fe06:	46bd      	mov	sp, r7
    fe08:	bd80      	pop	{r7, pc}
    fe0a:	bf00      	nop
    fe0c:	0001fc30 	.word	0x0001fc30
    fe10:	0000799d 	.word	0x0000799d
    fe14:	0000fd01 	.word	0x0000fd01
    fe18:	0000fc99 	.word	0x0000fc99
    fe1c:	0000fcd5 	.word	0x0000fcd5
    fe20:	0000fd35 	.word	0x0000fd35

0000fe24 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    fe24:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe26:	b08b      	sub	sp, #44	; 0x2c
    fe28:	af00      	add	r7, sp, #0
    fe2a:	60f8      	str	r0, [r7, #12]
    fe2c:	60b9      	str	r1, [r7, #8]
    fe2e:	4613      	mov	r3, r2
    fe30:	80fb      	strh	r3, [r7, #6]
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    fe32:	68fb      	ldr	r3, [r7, #12]
    fe34:	2b00      	cmp	r3, #0
    fe36:	d005      	beq.n	fe44 <_wdt_set_timeout_period+0x20>
    fe38:	68fb      	ldr	r3, [r7, #12]
    fe3a:	681b      	ldr	r3, [r3, #0]
    fe3c:	2b00      	cmp	r3, #0
    fe3e:	d001      	beq.n	fe44 <_wdt_set_timeout_period+0x20>
    fe40:	2301      	movs	r3, #1
    fe42:	e000      	b.n	fe46 <_wdt_set_timeout_period+0x22>
    fe44:	2300      	movs	r3, #0
    fe46:	f003 0301 	and.w	r3, r3, #1
    fe4a:	b2db      	uxtb	r3, r3
    fe4c:	227a      	movs	r2, #122	; 0x7a
    fe4e:	4954      	ldr	r1, [pc, #336]	; (ffa0 <_wdt_set_timeout_period+0x17c>)
    fe50:	4618      	mov	r0, r3
    fe52:	4b54      	ldr	r3, [pc, #336]	; (ffa4 <_wdt_set_timeout_period+0x180>)
    fe54:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    fe56:	68fb      	ldr	r3, [r7, #12]
    fe58:	681b      	ldr	r3, [r3, #0]
    fe5a:	4618      	mov	r0, r3
    fe5c:	4b52      	ldr	r3, [pc, #328]	; (ffa8 <_wdt_set_timeout_period+0x184>)
    fe5e:	4798      	blx	r3
    fe60:	4603      	mov	r3, r0
    fe62:	2b00      	cmp	r3, #0
    fe64:	d107      	bne.n	fe76 <_wdt_set_timeout_period+0x52>
    fe66:	68fb      	ldr	r3, [r7, #12]
    fe68:	681b      	ldr	r3, [r3, #0]
    fe6a:	4618      	mov	r0, r3
    fe6c:	4b4f      	ldr	r3, [pc, #316]	; (ffac <_wdt_set_timeout_period+0x188>)
    fe6e:	4798      	blx	r3
    fe70:	4603      	mov	r3, r0
    fe72:	2b00      	cmp	r3, #0
    fe74:	d002      	beq.n	fe7c <_wdt_set_timeout_period+0x58>
		return ERR_DENIED;
    fe76:	f06f 0310 	mvn.w	r3, #16
    fe7a:	e08c      	b.n	ff96 <_wdt_set_timeout_period+0x172>
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    fe7c:	88f9      	ldrh	r1, [r7, #6]
    fe7e:	f04f 0200 	mov.w	r2, #0
    fe82:	68bb      	ldr	r3, [r7, #8]
    fe84:	f04f 0400 	mov.w	r4, #0
    fe88:	fb03 fe02 	mul.w	lr, r3, r2
    fe8c:	fb01 f004 	mul.w	r0, r1, r4
    fe90:	4470      	add	r0, lr
    fe92:	fba1 3403 	umull	r3, r4, r1, r3
    fe96:	1902      	adds	r2, r0, r4
    fe98:	4614      	mov	r4, r2
    fe9a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    fe9e:	e9c7 3406 	strd	r3, r4, [r7, #24]

		/* check whether overflow*/
		if (tmp >> 32) {
    fea2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    fea6:	0025      	movs	r5, r4
    fea8:	2600      	movs	r6, #0
    feaa:	ea55 0306 	orrs.w	r3, r5, r6
    feae:	d002      	beq.n	feb6 <_wdt_set_timeout_period+0x92>
			return ERR_INVALID_ARG;
    feb0:	f06f 030c 	mvn.w	r3, #12
    feb4:	e06f      	b.n	ff96 <_wdt_set_timeout_period+0x172>
		}

		period_cycles = (uint32_t)tmp;
    feb6:	69bb      	ldr	r3, [r7, #24]
    feb8:	617b      	str	r3, [r7, #20]
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    feba:	697b      	ldr	r3, [r7, #20]
    febc:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
    fec0:	d041      	beq.n	ff46 <_wdt_set_timeout_period+0x122>
    fec2:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
    fec6:	d813      	bhi.n	fef0 <_wdt_set_timeout_period+0xcc>
    fec8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
    fecc:	d02f      	beq.n	ff2e <_wdt_set_timeout_period+0x10a>
    fece:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
    fed2:	d806      	bhi.n	fee2 <_wdt_set_timeout_period+0xbe>
    fed4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
    fed8:	d021      	beq.n	ff1e <_wdt_set_timeout_period+0xfa>
    feda:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
    fede:	d022      	beq.n	ff26 <_wdt_set_timeout_period+0x102>
    fee0:	e04d      	b.n	ff7e <_wdt_set_timeout_period+0x15a>
    fee2:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
    fee6:	d026      	beq.n	ff36 <_wdt_set_timeout_period+0x112>
    fee8:	f5b3 3ffa 	cmp.w	r3, #128000	; 0x1f400
    feec:	d027      	beq.n	ff3e <_wdt_set_timeout_period+0x11a>
    feee:	e046      	b.n	ff7e <_wdt_set_timeout_period+0x15a>
    fef0:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
    fef4:	d033      	beq.n	ff5e <_wdt_set_timeout_period+0x13a>
    fef6:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
    fefa:	d806      	bhi.n	ff0a <_wdt_set_timeout_period+0xe6>
    fefc:	f5b3 2ffa 	cmp.w	r3, #512000	; 0x7d000
    ff00:	d025      	beq.n	ff4e <_wdt_set_timeout_period+0x12a>
    ff02:	f5b3 2f7a 	cmp.w	r3, #1024000	; 0xfa000
    ff06:	d026      	beq.n	ff56 <_wdt_set_timeout_period+0x132>
    ff08:	e039      	b.n	ff7e <_wdt_set_timeout_period+0x15a>
    ff0a:	f5b3 0ffa 	cmp.w	r3, #8192000	; 0x7d0000
    ff0e:	d02e      	beq.n	ff6e <_wdt_set_timeout_period+0x14a>
    ff10:	f5b3 0f7a 	cmp.w	r3, #16384000	; 0xfa0000
    ff14:	d02f      	beq.n	ff76 <_wdt_set_timeout_period+0x152>
    ff16:	f5b3 1f7a 	cmp.w	r3, #4096000	; 0x3e8000
    ff1a:	d024      	beq.n	ff66 <_wdt_set_timeout_period+0x142>
    ff1c:	e02f      	b.n	ff7e <_wdt_set_timeout_period+0x15a>
		case WDT_CLK_8CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    ff1e:	2300      	movs	r3, #0
    ff20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    ff24:	e02e      	b.n	ff84 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_16CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    ff26:	2301      	movs	r3, #1
    ff28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    ff2c:	e02a      	b.n	ff84 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_32CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    ff2e:	2302      	movs	r3, #2
    ff30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    ff34:	e026      	b.n	ff84 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_64CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    ff36:	2303      	movs	r3, #3
    ff38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    ff3c:	e022      	b.n	ff84 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_128CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    ff3e:	2304      	movs	r3, #4
    ff40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    ff44:	e01e      	b.n	ff84 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_256CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    ff46:	2305      	movs	r3, #5
    ff48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    ff4c:	e01a      	b.n	ff84 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_512CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    ff4e:	2306      	movs	r3, #6
    ff50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    ff54:	e016      	b.n	ff84 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_1024CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    ff56:	2307      	movs	r3, #7
    ff58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    ff5c:	e012      	b.n	ff84 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_2048CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    ff5e:	2308      	movs	r3, #8
    ff60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    ff64:	e00e      	b.n	ff84 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_4096CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    ff66:	2309      	movs	r3, #9
    ff68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    ff6c:	e00a      	b.n	ff84 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_8192CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    ff6e:	230a      	movs	r3, #10
    ff70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    ff74:	e006      	b.n	ff84 <_wdt_set_timeout_period+0x160>
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    ff76:	230b      	movs	r3, #11
    ff78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
    ff7c:	e002      	b.n	ff84 <_wdt_set_timeout_period+0x160>
		default:
			return ERR_INVALID_ARG;
    ff7e:	f06f 030c 	mvn.w	r3, #12
    ff82:	e008      	b.n	ff96 <_wdt_set_timeout_period+0x172>
		}
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);
    ff84:	68fb      	ldr	r3, [r7, #12]
    ff86:	681b      	ldr	r3, [r3, #0]
    ff88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    ff8c:	4611      	mov	r1, r2
    ff8e:	4618      	mov	r0, r3
    ff90:	4b07      	ldr	r3, [pc, #28]	; (ffb0 <_wdt_set_timeout_period+0x18c>)
    ff92:	4798      	blx	r3

	return ERR_NONE;
    ff94:	2300      	movs	r3, #0
}
    ff96:	4618      	mov	r0, r3
    ff98:	372c      	adds	r7, #44	; 0x2c
    ff9a:	46bd      	mov	sp, r7
    ff9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff9e:	bf00      	nop
    ffa0:	0001fc30 	.word	0x0001fc30
    ffa4:	0000799d 	.word	0x0000799d
    ffa8:	0000fd01 	.word	0x0000fd01
    ffac:	0000fc99 	.word	0x0000fc99
    ffb0:	0000fd35 	.word	0x0000fd35

0000ffb4 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    ffb4:	b580      	push	{r7, lr}
    ffb6:	b082      	sub	sp, #8
    ffb8:	af00      	add	r7, sp, #0
    ffba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ffbc:	687b      	ldr	r3, [r7, #4]
    ffbe:	2b00      	cmp	r3, #0
    ffc0:	d005      	beq.n	ffce <_wdt_enable+0x1a>
    ffc2:	687b      	ldr	r3, [r7, #4]
    ffc4:	681b      	ldr	r3, [r3, #0]
    ffc6:	2b00      	cmp	r3, #0
    ffc8:	d001      	beq.n	ffce <_wdt_enable+0x1a>
    ffca:	2301      	movs	r3, #1
    ffcc:	e000      	b.n	ffd0 <_wdt_enable+0x1c>
    ffce:	2300      	movs	r3, #0
    ffd0:	f003 0301 	and.w	r3, r3, #1
    ffd4:	b2db      	uxtb	r3, r3
    ffd6:	22fb      	movs	r2, #251	; 0xfb
    ffd8:	4906      	ldr	r1, [pc, #24]	; (fff4 <_wdt_enable+0x40>)
    ffda:	4618      	mov	r0, r3
    ffdc:	4b06      	ldr	r3, [pc, #24]	; (fff8 <_wdt_enable+0x44>)
    ffde:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    ffe0:	687b      	ldr	r3, [r7, #4]
    ffe2:	681b      	ldr	r3, [r3, #0]
    ffe4:	4618      	mov	r0, r3
    ffe6:	4b05      	ldr	r3, [pc, #20]	; (fffc <_wdt_enable+0x48>)
    ffe8:	4798      	blx	r3

	return ERR_NONE;
    ffea:	2300      	movs	r3, #0
}
    ffec:	4618      	mov	r0, r3
    ffee:	3708      	adds	r7, #8
    fff0:	46bd      	mov	sp, r7
    fff2:	bd80      	pop	{r7, pc}
    fff4:	0001fc30 	.word	0x0001fc30
    fff8:	0000799d 	.word	0x0000799d
    fffc:	0000fc6d 	.word	0x0000fc6d

00010000 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
   10000:	b580      	push	{r7, lr}
   10002:	b082      	sub	sp, #8
   10004:	af00      	add	r7, sp, #0
   10006:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
   10008:	687b      	ldr	r3, [r7, #4]
   1000a:	2b00      	cmp	r3, #0
   1000c:	d005      	beq.n	1001a <_wdt_feed+0x1a>
   1000e:	687b      	ldr	r3, [r7, #4]
   10010:	681b      	ldr	r3, [r3, #0]
   10012:	2b00      	cmp	r3, #0
   10014:	d001      	beq.n	1001a <_wdt_feed+0x1a>
   10016:	2301      	movs	r3, #1
   10018:	e000      	b.n	1001c <_wdt_feed+0x1c>
   1001a:	2300      	movs	r3, #0
   1001c:	f003 0301 	and.w	r3, r3, #1
   10020:	b2db      	uxtb	r3, r3
   10022:	f240 1219 	movw	r2, #281	; 0x119
   10026:	4907      	ldr	r1, [pc, #28]	; (10044 <STACK_SIZE+0x44>)
   10028:	4618      	mov	r0, r3
   1002a:	4b07      	ldr	r3, [pc, #28]	; (10048 <STACK_SIZE+0x48>)
   1002c:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
   1002e:	687b      	ldr	r3, [r7, #4]
   10030:	681b      	ldr	r3, [r3, #0]
   10032:	21a5      	movs	r1, #165	; 0xa5
   10034:	4618      	mov	r0, r3
   10036:	4b05      	ldr	r3, [pc, #20]	; (1004c <STACK_SIZE+0x4c>)
   10038:	4798      	blx	r3

	return ERR_NONE;
   1003a:	2300      	movs	r3, #0
}
   1003c:	4618      	mov	r0, r3
   1003e:	3708      	adds	r7, #8
   10040:	46bd      	mov	sp, r7
   10042:	bd80      	pop	{r7, pc}
   10044:	0001fc30 	.word	0x0001fc30
   10048:	0000799d 	.word	0x0000799d
   1004c:	0000fd71 	.word	0x0000fd71

00010050 <hri_port_set_DIR_reg>:
{
   10050:	b480      	push	{r7}
   10052:	b085      	sub	sp, #20
   10054:	af00      	add	r7, sp, #0
   10056:	60f8      	str	r0, [r7, #12]
   10058:	460b      	mov	r3, r1
   1005a:	607a      	str	r2, [r7, #4]
   1005c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   1005e:	7afb      	ldrb	r3, [r7, #11]
   10060:	68fa      	ldr	r2, [r7, #12]
   10062:	01db      	lsls	r3, r3, #7
   10064:	4413      	add	r3, r2
   10066:	3308      	adds	r3, #8
   10068:	687a      	ldr	r2, [r7, #4]
   1006a:	601a      	str	r2, [r3, #0]
}
   1006c:	bf00      	nop
   1006e:	3714      	adds	r7, #20
   10070:	46bd      	mov	sp, r7
   10072:	f85d 7b04 	ldr.w	r7, [sp], #4
   10076:	4770      	bx	lr

00010078 <hri_port_clear_DIR_reg>:
{
   10078:	b480      	push	{r7}
   1007a:	b085      	sub	sp, #20
   1007c:	af00      	add	r7, sp, #0
   1007e:	60f8      	str	r0, [r7, #12]
   10080:	460b      	mov	r3, r1
   10082:	607a      	str	r2, [r7, #4]
   10084:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   10086:	7afb      	ldrb	r3, [r7, #11]
   10088:	68fa      	ldr	r2, [r7, #12]
   1008a:	01db      	lsls	r3, r3, #7
   1008c:	4413      	add	r3, r2
   1008e:	3304      	adds	r3, #4
   10090:	687a      	ldr	r2, [r7, #4]
   10092:	601a      	str	r2, [r3, #0]
}
   10094:	bf00      	nop
   10096:	3714      	adds	r7, #20
   10098:	46bd      	mov	sp, r7
   1009a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1009e:	4770      	bx	lr

000100a0 <hri_port_set_OUT_reg>:
{
   100a0:	b480      	push	{r7}
   100a2:	b085      	sub	sp, #20
   100a4:	af00      	add	r7, sp, #0
   100a6:	60f8      	str	r0, [r7, #12]
   100a8:	460b      	mov	r3, r1
   100aa:	607a      	str	r2, [r7, #4]
   100ac:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   100ae:	7afb      	ldrb	r3, [r7, #11]
   100b0:	68fa      	ldr	r2, [r7, #12]
   100b2:	01db      	lsls	r3, r3, #7
   100b4:	4413      	add	r3, r2
   100b6:	3318      	adds	r3, #24
   100b8:	687a      	ldr	r2, [r7, #4]
   100ba:	601a      	str	r2, [r3, #0]
}
   100bc:	bf00      	nop
   100be:	3714      	adds	r7, #20
   100c0:	46bd      	mov	sp, r7
   100c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   100c6:	4770      	bx	lr

000100c8 <hri_port_clear_OUT_reg>:
{
   100c8:	b480      	push	{r7}
   100ca:	b085      	sub	sp, #20
   100cc:	af00      	add	r7, sp, #0
   100ce:	60f8      	str	r0, [r7, #12]
   100d0:	460b      	mov	r3, r1
   100d2:	607a      	str	r2, [r7, #4]
   100d4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   100d6:	7afb      	ldrb	r3, [r7, #11]
   100d8:	68fa      	ldr	r2, [r7, #12]
   100da:	01db      	lsls	r3, r3, #7
   100dc:	4413      	add	r3, r2
   100de:	3314      	adds	r3, #20
   100e0:	687a      	ldr	r2, [r7, #4]
   100e2:	601a      	str	r2, [r3, #0]
}
   100e4:	bf00      	nop
   100e6:	3714      	adds	r7, #20
   100e8:	46bd      	mov	sp, r7
   100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   100ee:	4770      	bx	lr

000100f0 <hri_port_write_PMUX_PMUXE_bf>:
{
   100f0:	b480      	push	{r7}
   100f2:	b085      	sub	sp, #20
   100f4:	af00      	add	r7, sp, #0
   100f6:	6078      	str	r0, [r7, #4]
   100f8:	4608      	mov	r0, r1
   100fa:	4611      	mov	r1, r2
   100fc:	461a      	mov	r2, r3
   100fe:	4603      	mov	r3, r0
   10100:	70fb      	strb	r3, [r7, #3]
   10102:	460b      	mov	r3, r1
   10104:	70bb      	strb	r3, [r7, #2]
   10106:	4613      	mov	r3, r2
   10108:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1010a:	78fa      	ldrb	r2, [r7, #3]
   1010c:	78bb      	ldrb	r3, [r7, #2]
   1010e:	6879      	ldr	r1, [r7, #4]
   10110:	01d2      	lsls	r2, r2, #7
   10112:	440a      	add	r2, r1
   10114:	4413      	add	r3, r2
   10116:	3330      	adds	r3, #48	; 0x30
   10118:	781b      	ldrb	r3, [r3, #0]
   1011a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   1011c:	7bfb      	ldrb	r3, [r7, #15]
   1011e:	f023 030f 	bic.w	r3, r3, #15
   10122:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   10124:	787b      	ldrb	r3, [r7, #1]
   10126:	f003 030f 	and.w	r3, r3, #15
   1012a:	b2da      	uxtb	r2, r3
   1012c:	7bfb      	ldrb	r3, [r7, #15]
   1012e:	4313      	orrs	r3, r2
   10130:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   10132:	78fa      	ldrb	r2, [r7, #3]
   10134:	78bb      	ldrb	r3, [r7, #2]
   10136:	6879      	ldr	r1, [r7, #4]
   10138:	01d2      	lsls	r2, r2, #7
   1013a:	440a      	add	r2, r1
   1013c:	4413      	add	r3, r2
   1013e:	3330      	adds	r3, #48	; 0x30
   10140:	7bfa      	ldrb	r2, [r7, #15]
   10142:	701a      	strb	r2, [r3, #0]
}
   10144:	bf00      	nop
   10146:	3714      	adds	r7, #20
   10148:	46bd      	mov	sp, r7
   1014a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1014e:	4770      	bx	lr

00010150 <hri_port_write_PMUX_PMUXO_bf>:
{
   10150:	b480      	push	{r7}
   10152:	b085      	sub	sp, #20
   10154:	af00      	add	r7, sp, #0
   10156:	6078      	str	r0, [r7, #4]
   10158:	4608      	mov	r0, r1
   1015a:	4611      	mov	r1, r2
   1015c:	461a      	mov	r2, r3
   1015e:	4603      	mov	r3, r0
   10160:	70fb      	strb	r3, [r7, #3]
   10162:	460b      	mov	r3, r1
   10164:	70bb      	strb	r3, [r7, #2]
   10166:	4613      	mov	r3, r2
   10168:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1016a:	78fa      	ldrb	r2, [r7, #3]
   1016c:	78bb      	ldrb	r3, [r7, #2]
   1016e:	6879      	ldr	r1, [r7, #4]
   10170:	01d2      	lsls	r2, r2, #7
   10172:	440a      	add	r2, r1
   10174:	4413      	add	r3, r2
   10176:	3330      	adds	r3, #48	; 0x30
   10178:	781b      	ldrb	r3, [r3, #0]
   1017a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   1017c:	7bfb      	ldrb	r3, [r7, #15]
   1017e:	f003 030f 	and.w	r3, r3, #15
   10182:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   10184:	787b      	ldrb	r3, [r7, #1]
   10186:	011b      	lsls	r3, r3, #4
   10188:	b2da      	uxtb	r2, r3
   1018a:	7bfb      	ldrb	r3, [r7, #15]
   1018c:	4313      	orrs	r3, r2
   1018e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   10190:	78fa      	ldrb	r2, [r7, #3]
   10192:	78bb      	ldrb	r3, [r7, #2]
   10194:	6879      	ldr	r1, [r7, #4]
   10196:	01d2      	lsls	r2, r2, #7
   10198:	440a      	add	r2, r1
   1019a:	4413      	add	r3, r2
   1019c:	3330      	adds	r3, #48	; 0x30
   1019e:	7bfa      	ldrb	r2, [r7, #15]
   101a0:	701a      	strb	r2, [r3, #0]
}
   101a2:	bf00      	nop
   101a4:	3714      	adds	r7, #20
   101a6:	46bd      	mov	sp, r7
   101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   101ac:	4770      	bx	lr

000101ae <hri_port_write_PINCFG_PMUXEN_bit>:
{
   101ae:	b480      	push	{r7}
   101b0:	b085      	sub	sp, #20
   101b2:	af00      	add	r7, sp, #0
   101b4:	6078      	str	r0, [r7, #4]
   101b6:	4608      	mov	r0, r1
   101b8:	4611      	mov	r1, r2
   101ba:	461a      	mov	r2, r3
   101bc:	4603      	mov	r3, r0
   101be:	70fb      	strb	r3, [r7, #3]
   101c0:	460b      	mov	r3, r1
   101c2:	70bb      	strb	r3, [r7, #2]
   101c4:	4613      	mov	r3, r2
   101c6:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   101c8:	78fa      	ldrb	r2, [r7, #3]
   101ca:	78bb      	ldrb	r3, [r7, #2]
   101cc:	6879      	ldr	r1, [r7, #4]
   101ce:	01d2      	lsls	r2, r2, #7
   101d0:	440a      	add	r2, r1
   101d2:	4413      	add	r3, r2
   101d4:	3340      	adds	r3, #64	; 0x40
   101d6:	781b      	ldrb	r3, [r3, #0]
   101d8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   101da:	7bfb      	ldrb	r3, [r7, #15]
   101dc:	f023 0301 	bic.w	r3, r3, #1
   101e0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   101e2:	787a      	ldrb	r2, [r7, #1]
   101e4:	7bfb      	ldrb	r3, [r7, #15]
   101e6:	4313      	orrs	r3, r2
   101e8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   101ea:	78fa      	ldrb	r2, [r7, #3]
   101ec:	78bb      	ldrb	r3, [r7, #2]
   101ee:	6879      	ldr	r1, [r7, #4]
   101f0:	01d2      	lsls	r2, r2, #7
   101f2:	440a      	add	r2, r1
   101f4:	4413      	add	r3, r2
   101f6:	3340      	adds	r3, #64	; 0x40
   101f8:	7bfa      	ldrb	r2, [r7, #15]
   101fa:	701a      	strb	r2, [r3, #0]
}
   101fc:	bf00      	nop
   101fe:	3714      	adds	r7, #20
   10200:	46bd      	mov	sp, r7
   10202:	f85d 7b04 	ldr.w	r7, [sp], #4
   10206:	4770      	bx	lr

00010208 <hri_port_write_WRCONFIG_reg>:
{
   10208:	b480      	push	{r7}
   1020a:	b085      	sub	sp, #20
   1020c:	af00      	add	r7, sp, #0
   1020e:	60f8      	str	r0, [r7, #12]
   10210:	460b      	mov	r3, r1
   10212:	607a      	str	r2, [r7, #4]
   10214:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   10216:	7afb      	ldrb	r3, [r7, #11]
   10218:	68fa      	ldr	r2, [r7, #12]
   1021a:	01db      	lsls	r3, r3, #7
   1021c:	4413      	add	r3, r2
   1021e:	3328      	adds	r3, #40	; 0x28
   10220:	687a      	ldr	r2, [r7, #4]
   10222:	601a      	str	r2, [r3, #0]
}
   10224:	bf00      	nop
   10226:	3714      	adds	r7, #20
   10228:	46bd      	mov	sp, r7
   1022a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1022e:	4770      	bx	lr

00010230 <_gpio_set_direction>:
{
   10230:	b580      	push	{r7, lr}
   10232:	b082      	sub	sp, #8
   10234:	af00      	add	r7, sp, #0
   10236:	4603      	mov	r3, r0
   10238:	6039      	str	r1, [r7, #0]
   1023a:	71fb      	strb	r3, [r7, #7]
   1023c:	4613      	mov	r3, r2
   1023e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   10240:	79bb      	ldrb	r3, [r7, #6]
   10242:	2b01      	cmp	r3, #1
   10244:	d01c      	beq.n	10280 <_gpio_set_direction+0x50>
   10246:	2b02      	cmp	r3, #2
   10248:	d037      	beq.n	102ba <_gpio_set_direction+0x8a>
   1024a:	2b00      	cmp	r3, #0
   1024c:	d14e      	bne.n	102ec <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   1024e:	79fb      	ldrb	r3, [r7, #7]
   10250:	683a      	ldr	r2, [r7, #0]
   10252:	4619      	mov	r1, r3
   10254:	482a      	ldr	r0, [pc, #168]	; (10300 <_gpio_set_direction+0xd0>)
   10256:	4b2b      	ldr	r3, [pc, #172]	; (10304 <_gpio_set_direction+0xd4>)
   10258:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   1025a:	683b      	ldr	r3, [r7, #0]
   1025c:	b29b      	uxth	r3, r3
   1025e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   10262:	79fb      	ldrb	r3, [r7, #7]
   10264:	4619      	mov	r1, r3
   10266:	4826      	ldr	r0, [pc, #152]	; (10300 <_gpio_set_direction+0xd0>)
   10268:	4b27      	ldr	r3, [pc, #156]	; (10308 <_gpio_set_direction+0xd8>)
   1026a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   1026c:	683b      	ldr	r3, [r7, #0]
   1026e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   10270:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   10274:	79fb      	ldrb	r3, [r7, #7]
   10276:	4619      	mov	r1, r3
   10278:	4821      	ldr	r0, [pc, #132]	; (10300 <_gpio_set_direction+0xd0>)
   1027a:	4b23      	ldr	r3, [pc, #140]	; (10308 <_gpio_set_direction+0xd8>)
   1027c:	4798      	blx	r3
		break;
   1027e:	e03a      	b.n	102f6 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   10280:	79fb      	ldrb	r3, [r7, #7]
   10282:	683a      	ldr	r2, [r7, #0]
   10284:	4619      	mov	r1, r3
   10286:	481e      	ldr	r0, [pc, #120]	; (10300 <_gpio_set_direction+0xd0>)
   10288:	4b1e      	ldr	r3, [pc, #120]	; (10304 <_gpio_set_direction+0xd4>)
   1028a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   1028c:	683b      	ldr	r3, [r7, #0]
   1028e:	b29b      	uxth	r3, r3
   10290:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   10294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10298:	79f9      	ldrb	r1, [r7, #7]
   1029a:	461a      	mov	r2, r3
   1029c:	4818      	ldr	r0, [pc, #96]	; (10300 <_gpio_set_direction+0xd0>)
   1029e:	4b1a      	ldr	r3, [pc, #104]	; (10308 <_gpio_set_direction+0xd8>)
   102a0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   102a2:	683b      	ldr	r3, [r7, #0]
   102a4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   102a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   102aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   102ae:	79f9      	ldrb	r1, [r7, #7]
   102b0:	461a      	mov	r2, r3
   102b2:	4813      	ldr	r0, [pc, #76]	; (10300 <_gpio_set_direction+0xd0>)
   102b4:	4b14      	ldr	r3, [pc, #80]	; (10308 <_gpio_set_direction+0xd8>)
   102b6:	4798      	blx	r3
		break;
   102b8:	e01d      	b.n	102f6 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   102ba:	79fb      	ldrb	r3, [r7, #7]
   102bc:	683a      	ldr	r2, [r7, #0]
   102be:	4619      	mov	r1, r3
   102c0:	480f      	ldr	r0, [pc, #60]	; (10300 <_gpio_set_direction+0xd0>)
   102c2:	4b12      	ldr	r3, [pc, #72]	; (1030c <_gpio_set_direction+0xdc>)
   102c4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   102c6:	683b      	ldr	r3, [r7, #0]
   102c8:	b29b      	uxth	r3, r3
   102ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   102ce:	79fb      	ldrb	r3, [r7, #7]
   102d0:	4619      	mov	r1, r3
   102d2:	480b      	ldr	r0, [pc, #44]	; (10300 <_gpio_set_direction+0xd0>)
   102d4:	4b0c      	ldr	r3, [pc, #48]	; (10308 <_gpio_set_direction+0xd8>)
   102d6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   102d8:	683b      	ldr	r3, [r7, #0]
   102da:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   102dc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
   102e0:	79fb      	ldrb	r3, [r7, #7]
   102e2:	4619      	mov	r1, r3
   102e4:	4806      	ldr	r0, [pc, #24]	; (10300 <_gpio_set_direction+0xd0>)
   102e6:	4b08      	ldr	r3, [pc, #32]	; (10308 <_gpio_set_direction+0xd8>)
   102e8:	4798      	blx	r3
		break;
   102ea:	e004      	b.n	102f6 <_gpio_set_direction+0xc6>
		ASSERT(false);
   102ec:	2246      	movs	r2, #70	; 0x46
   102ee:	4908      	ldr	r1, [pc, #32]	; (10310 <_gpio_set_direction+0xe0>)
   102f0:	2000      	movs	r0, #0
   102f2:	4b08      	ldr	r3, [pc, #32]	; (10314 <_gpio_set_direction+0xe4>)
   102f4:	4798      	blx	r3
}
   102f6:	bf00      	nop
   102f8:	3708      	adds	r7, #8
   102fa:	46bd      	mov	sp, r7
   102fc:	bd80      	pop	{r7, pc}
   102fe:	bf00      	nop
   10300:	41008000 	.word	0x41008000
   10304:	00010079 	.word	0x00010079
   10308:	00010209 	.word	0x00010209
   1030c:	00010051 	.word	0x00010051
   10310:	0001fc48 	.word	0x0001fc48
   10314:	0000799d 	.word	0x0000799d

00010318 <_gpio_set_level>:
{
   10318:	b580      	push	{r7, lr}
   1031a:	b082      	sub	sp, #8
   1031c:	af00      	add	r7, sp, #0
   1031e:	4603      	mov	r3, r0
   10320:	6039      	str	r1, [r7, #0]
   10322:	71fb      	strb	r3, [r7, #7]
   10324:	4613      	mov	r3, r2
   10326:	71bb      	strb	r3, [r7, #6]
	if (level) {
   10328:	79bb      	ldrb	r3, [r7, #6]
   1032a:	2b00      	cmp	r3, #0
   1032c:	d006      	beq.n	1033c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1032e:	79fb      	ldrb	r3, [r7, #7]
   10330:	683a      	ldr	r2, [r7, #0]
   10332:	4619      	mov	r1, r3
   10334:	4806      	ldr	r0, [pc, #24]	; (10350 <_gpio_set_level+0x38>)
   10336:	4b07      	ldr	r3, [pc, #28]	; (10354 <_gpio_set_level+0x3c>)
   10338:	4798      	blx	r3
}
   1033a:	e005      	b.n	10348 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   1033c:	79fb      	ldrb	r3, [r7, #7]
   1033e:	683a      	ldr	r2, [r7, #0]
   10340:	4619      	mov	r1, r3
   10342:	4803      	ldr	r0, [pc, #12]	; (10350 <_gpio_set_level+0x38>)
   10344:	4b04      	ldr	r3, [pc, #16]	; (10358 <_gpio_set_level+0x40>)
   10346:	4798      	blx	r3
}
   10348:	bf00      	nop
   1034a:	3708      	adds	r7, #8
   1034c:	46bd      	mov	sp, r7
   1034e:	bd80      	pop	{r7, pc}
   10350:	41008000 	.word	0x41008000
   10354:	000100a1 	.word	0x000100a1
   10358:	000100c9 	.word	0x000100c9

0001035c <_gpio_set_pin_function>:
{
   1035c:	b590      	push	{r4, r7, lr}
   1035e:	b085      	sub	sp, #20
   10360:	af00      	add	r7, sp, #0
   10362:	6078      	str	r0, [r7, #4]
   10364:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   10366:	687b      	ldr	r3, [r7, #4]
   10368:	095b      	lsrs	r3, r3, #5
   1036a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   1036c:	687b      	ldr	r3, [r7, #4]
   1036e:	b2db      	uxtb	r3, r3
   10370:	f003 031f 	and.w	r3, r3, #31
   10374:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
   10376:	683b      	ldr	r3, [r7, #0]
   10378:	f1b3 3fff 	cmp.w	r3, #4294967295
   1037c:	d106      	bne.n	1038c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   1037e:	7bba      	ldrb	r2, [r7, #14]
   10380:	7bf9      	ldrb	r1, [r7, #15]
   10382:	2300      	movs	r3, #0
   10384:	4812      	ldr	r0, [pc, #72]	; (103d0 <_gpio_set_pin_function+0x74>)
   10386:	4c13      	ldr	r4, [pc, #76]	; (103d4 <_gpio_set_pin_function+0x78>)
   10388:	47a0      	blx	r4
}
   1038a:	e01d      	b.n	103c8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   1038c:	7bba      	ldrb	r2, [r7, #14]
   1038e:	7bf9      	ldrb	r1, [r7, #15]
   10390:	2301      	movs	r3, #1
   10392:	480f      	ldr	r0, [pc, #60]	; (103d0 <_gpio_set_pin_function+0x74>)
   10394:	4c0f      	ldr	r4, [pc, #60]	; (103d4 <_gpio_set_pin_function+0x78>)
   10396:	47a0      	blx	r4
		if (pin & 1) {
   10398:	7bbb      	ldrb	r3, [r7, #14]
   1039a:	f003 0301 	and.w	r3, r3, #1
   1039e:	2b00      	cmp	r3, #0
   103a0:	d009      	beq.n	103b6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   103a2:	7bbb      	ldrb	r3, [r7, #14]
   103a4:	085b      	lsrs	r3, r3, #1
   103a6:	b2da      	uxtb	r2, r3
   103a8:	683b      	ldr	r3, [r7, #0]
   103aa:	b2db      	uxtb	r3, r3
   103ac:	7bf9      	ldrb	r1, [r7, #15]
   103ae:	4808      	ldr	r0, [pc, #32]	; (103d0 <_gpio_set_pin_function+0x74>)
   103b0:	4c09      	ldr	r4, [pc, #36]	; (103d8 <_gpio_set_pin_function+0x7c>)
   103b2:	47a0      	blx	r4
}
   103b4:	e008      	b.n	103c8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   103b6:	7bbb      	ldrb	r3, [r7, #14]
   103b8:	085b      	lsrs	r3, r3, #1
   103ba:	b2da      	uxtb	r2, r3
   103bc:	683b      	ldr	r3, [r7, #0]
   103be:	b2db      	uxtb	r3, r3
   103c0:	7bf9      	ldrb	r1, [r7, #15]
   103c2:	4803      	ldr	r0, [pc, #12]	; (103d0 <_gpio_set_pin_function+0x74>)
   103c4:	4c05      	ldr	r4, [pc, #20]	; (103dc <_gpio_set_pin_function+0x80>)
   103c6:	47a0      	blx	r4
}
   103c8:	bf00      	nop
   103ca:	3714      	adds	r7, #20
   103cc:	46bd      	mov	sp, r7
   103ce:	bd90      	pop	{r4, r7, pc}
   103d0:	41008000 	.word	0x41008000
   103d4:	000101af 	.word	0x000101af
   103d8:	00010151 	.word	0x00010151
   103dc:	000100f1 	.word	0x000100f1

000103e0 <gpio_set_pin_function>:
{
   103e0:	b580      	push	{r7, lr}
   103e2:	b082      	sub	sp, #8
   103e4:	af00      	add	r7, sp, #0
   103e6:	6078      	str	r0, [r7, #4]
   103e8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   103ea:	6839      	ldr	r1, [r7, #0]
   103ec:	6878      	ldr	r0, [r7, #4]
   103ee:	4b03      	ldr	r3, [pc, #12]	; (103fc <gpio_set_pin_function+0x1c>)
   103f0:	4798      	blx	r3
}
   103f2:	bf00      	nop
   103f4:	3708      	adds	r7, #8
   103f6:	46bd      	mov	sp, r7
   103f8:	bd80      	pop	{r7, pc}
   103fa:	bf00      	nop
   103fc:	0001035d 	.word	0x0001035d

00010400 <gpio_set_pin_direction>:
{
   10400:	b580      	push	{r7, lr}
   10402:	b082      	sub	sp, #8
   10404:	af00      	add	r7, sp, #0
   10406:	4603      	mov	r3, r0
   10408:	460a      	mov	r2, r1
   1040a:	71fb      	strb	r3, [r7, #7]
   1040c:	4613      	mov	r3, r2
   1040e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   10410:	79fb      	ldrb	r3, [r7, #7]
   10412:	095b      	lsrs	r3, r3, #5
   10414:	b2d8      	uxtb	r0, r3
   10416:	79fb      	ldrb	r3, [r7, #7]
   10418:	f003 031f 	and.w	r3, r3, #31
   1041c:	2201      	movs	r2, #1
   1041e:	fa02 f303 	lsl.w	r3, r2, r3
   10422:	79ba      	ldrb	r2, [r7, #6]
   10424:	4619      	mov	r1, r3
   10426:	4b03      	ldr	r3, [pc, #12]	; (10434 <gpio_set_pin_direction+0x34>)
   10428:	4798      	blx	r3
}
   1042a:	bf00      	nop
   1042c:	3708      	adds	r7, #8
   1042e:	46bd      	mov	sp, r7
   10430:	bd80      	pop	{r7, pc}
   10432:	bf00      	nop
   10434:	00010231 	.word	0x00010231

00010438 <gpio_set_pin_level>:
{
   10438:	b580      	push	{r7, lr}
   1043a:	b082      	sub	sp, #8
   1043c:	af00      	add	r7, sp, #0
   1043e:	4603      	mov	r3, r0
   10440:	460a      	mov	r2, r1
   10442:	71fb      	strb	r3, [r7, #7]
   10444:	4613      	mov	r3, r2
   10446:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   10448:	79fb      	ldrb	r3, [r7, #7]
   1044a:	095b      	lsrs	r3, r3, #5
   1044c:	b2d8      	uxtb	r0, r3
   1044e:	79fb      	ldrb	r3, [r7, #7]
   10450:	f003 031f 	and.w	r3, r3, #31
   10454:	2201      	movs	r2, #1
   10456:	fa02 f303 	lsl.w	r3, r2, r3
   1045a:	79ba      	ldrb	r2, [r7, #6]
   1045c:	4619      	mov	r1, r3
   1045e:	4b03      	ldr	r3, [pc, #12]	; (1046c <gpio_set_pin_level+0x34>)
   10460:	4798      	blx	r3
}
   10462:	bf00      	nop
   10464:	3708      	adds	r7, #8
   10466:	46bd      	mov	sp, r7
   10468:	bd80      	pop	{r7, pc}
   1046a:	bf00      	nop
   1046c:	00010319 	.word	0x00010319

00010470 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
   10470:	b580      	push	{r7, lr}
   10472:	b082      	sub	sp, #8
   10474:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   10476:	2100      	movs	r1, #0
   10478:	2008      	movs	r0, #8
   1047a:	4b24      	ldr	r3, [pc, #144]	; (1050c <QSPI_N25Q256_exit_xip+0x9c>)
   1047c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   1047e:	2100      	movs	r1, #0
   10480:	202b      	movs	r0, #43	; 0x2b
   10482:	4b22      	ldr	r3, [pc, #136]	; (1050c <QSPI_N25Q256_exit_xip+0x9c>)
   10484:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   10486:	2100      	movs	r1, #0
   10488:	202a      	movs	r0, #42	; 0x2a
   1048a:	4b20      	ldr	r3, [pc, #128]	; (1050c <QSPI_N25Q256_exit_xip+0x9c>)
   1048c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   1048e:	2102      	movs	r1, #2
   10490:	2008      	movs	r0, #8
   10492:	4b1f      	ldr	r3, [pc, #124]	; (10510 <QSPI_N25Q256_exit_xip+0xa0>)
   10494:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   10496:	2102      	movs	r1, #2
   10498:	202b      	movs	r0, #43	; 0x2b
   1049a:	4b1d      	ldr	r3, [pc, #116]	; (10510 <QSPI_N25Q256_exit_xip+0xa0>)
   1049c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   1049e:	2102      	movs	r1, #2
   104a0:	202a      	movs	r0, #42	; 0x2a
   104a2:	4b1b      	ldr	r3, [pc, #108]	; (10510 <QSPI_N25Q256_exit_xip+0xa0>)
   104a4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   104a6:	2101      	movs	r1, #1
   104a8:	2008      	movs	r0, #8
   104aa:	4b1a      	ldr	r3, [pc, #104]	; (10514 <QSPI_N25Q256_exit_xip+0xa4>)
   104ac:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   104ae:	2100      	movs	r1, #0
   104b0:	202b      	movs	r0, #43	; 0x2b
   104b2:	4b18      	ldr	r3, [pc, #96]	; (10514 <QSPI_N25Q256_exit_xip+0xa4>)
   104b4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   104b6:	2100      	movs	r1, #0
   104b8:	202a      	movs	r0, #42	; 0x2a
   104ba:	4b16      	ldr	r3, [pc, #88]	; (10514 <QSPI_N25Q256_exit_xip+0xa4>)
   104bc:	4798      	blx	r3

	delay_us(1);
   104be:	2001      	movs	r0, #1
   104c0:	4b15      	ldr	r3, [pc, #84]	; (10518 <QSPI_N25Q256_exit_xip+0xa8>)
   104c2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   104c4:	2300      	movs	r3, #0
   104c6:	607b      	str	r3, [r7, #4]
   104c8:	e010      	b.n	104ec <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
   104ca:	2101      	movs	r1, #1
   104cc:	202a      	movs	r0, #42	; 0x2a
   104ce:	4b11      	ldr	r3, [pc, #68]	; (10514 <QSPI_N25Q256_exit_xip+0xa4>)
   104d0:	4798      	blx	r3
		delay_us(1);
   104d2:	2001      	movs	r0, #1
   104d4:	4b10      	ldr	r3, [pc, #64]	; (10518 <QSPI_N25Q256_exit_xip+0xa8>)
   104d6:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   104d8:	2100      	movs	r1, #0
   104da:	202a      	movs	r0, #42	; 0x2a
   104dc:	4b0d      	ldr	r3, [pc, #52]	; (10514 <QSPI_N25Q256_exit_xip+0xa4>)
   104de:	4798      	blx	r3
		delay_us(1);
   104e0:	2001      	movs	r0, #1
   104e2:	4b0d      	ldr	r3, [pc, #52]	; (10518 <QSPI_N25Q256_exit_xip+0xa8>)
   104e4:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   104e6:	687b      	ldr	r3, [r7, #4]
   104e8:	3301      	adds	r3, #1
   104ea:	607b      	str	r3, [r7, #4]
   104ec:	687b      	ldr	r3, [r7, #4]
   104ee:	2b06      	cmp	r3, #6
   104f0:	ddeb      	ble.n	104ca <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
   104f2:	2101      	movs	r1, #1
   104f4:	202b      	movs	r0, #43	; 0x2b
   104f6:	4b07      	ldr	r3, [pc, #28]	; (10514 <QSPI_N25Q256_exit_xip+0xa4>)
   104f8:	4798      	blx	r3
	delay_us(1);
   104fa:	2001      	movs	r0, #1
   104fc:	4b06      	ldr	r3, [pc, #24]	; (10518 <QSPI_N25Q256_exit_xip+0xa8>)
   104fe:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   10500:	4b06      	ldr	r3, [pc, #24]	; (1051c <QSPI_N25Q256_exit_xip+0xac>)
   10502:	4798      	blx	r3
}
   10504:	bf00      	nop
   10506:	3708      	adds	r7, #8
   10508:	46bd      	mov	sp, r7
   1050a:	bd80      	pop	{r7, pc}
   1050c:	000103e1 	.word	0x000103e1
   10510:	00010401 	.word	0x00010401
   10514:	00010439 	.word	0x00010439
   10518:	00006075 	.word	0x00006075
   1051c:	00004e15 	.word	0x00004e15

00010520 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
   10520:	b598      	push	{r3, r4, r7, lr}
   10522:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
   10524:	4806      	ldr	r0, [pc, #24]	; (10540 <spi_nor_flash_init+0x20>)
   10526:	4b07      	ldr	r3, [pc, #28]	; (10544 <spi_nor_flash_init+0x24>)
   10528:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
   1052a:	2300      	movs	r3, #0
   1052c:	4a06      	ldr	r2, [pc, #24]	; (10548 <spi_nor_flash_init+0x28>)
   1052e:	4904      	ldr	r1, [pc, #16]	; (10540 <spi_nor_flash_init+0x20>)
   10530:	4806      	ldr	r0, [pc, #24]	; (1054c <spi_nor_flash_init+0x2c>)
   10532:	4c07      	ldr	r4, [pc, #28]	; (10550 <spi_nor_flash_init+0x30>)
   10534:	47a0      	blx	r4
   10536:	4602      	mov	r2, r0
   10538:	4b06      	ldr	r3, [pc, #24]	; (10554 <spi_nor_flash_init+0x34>)
   1053a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
   1053c:	bf00      	nop
   1053e:	bd98      	pop	{r3, r4, r7, pc}
   10540:	2000a57c 	.word	0x2000a57c
   10544:	00006845 	.word	0x00006845
   10548:	00010471 	.word	0x00010471
   1054c:	20008c6c 	.word	0x20008c6c
   10550:	0001098d 	.word	0x0001098d
   10554:	2000a7bc 	.word	0x2000a7bc

00010558 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
   10558:	b580      	push	{r7, lr}
   1055a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
   1055c:	4805      	ldr	r0, [pc, #20]	; (10574 <cdc_device_acm_init+0x1c>)
   1055e:	4b06      	ldr	r3, [pc, #24]	; (10578 <cdc_device_acm_init+0x20>)
   10560:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
   10562:	4b06      	ldr	r3, [pc, #24]	; (1057c <cdc_device_acm_init+0x24>)
   10564:	4798      	blx	r3

	usbdc_start(single_desc);
   10566:	4806      	ldr	r0, [pc, #24]	; (10580 <cdc_device_acm_init+0x28>)
   10568:	4b06      	ldr	r3, [pc, #24]	; (10584 <cdc_device_acm_init+0x2c>)
   1056a:	4798      	blx	r3
	usbdc_attach();
   1056c:	4b06      	ldr	r3, [pc, #24]	; (10588 <cdc_device_acm_init+0x30>)
   1056e:	4798      	blx	r3
}
   10570:	bf00      	nop
   10572:	bd80      	pop	{r7, pc}
   10574:	20008cbc 	.word	0x20008cbc
   10578:	000120b5 	.word	0x000120b5
   1057c:	0001132d 	.word	0x0001132d
   10580:	20000234 	.word	0x20000234
   10584:	00012151 	.word	0x00012151
   10588:	000121a1 	.word	0x000121a1

0001058c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
   1058c:	b580      	push	{r7, lr}
   1058e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
   10590:	4b01      	ldr	r3, [pc, #4]	; (10598 <usb_init+0xc>)
   10592:	4798      	blx	r3
}
   10594:	bf00      	nop
   10596:	bd80      	pop	{r7, pc}
   10598:	00010559 	.word	0x00010559

0001059c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
   1059c:	b480      	push	{r7}
   1059e:	b085      	sub	sp, #20
   105a0:	af00      	add	r7, sp, #0
   105a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   105a4:	f3ef 8310 	mrs	r3, PRIMASK
   105a8:	60fb      	str	r3, [r7, #12]
  return(result);
   105aa:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
   105ac:	687b      	ldr	r3, [r7, #4]
   105ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   105b0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   105b2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
   105b6:	bf00      	nop
   105b8:	3714      	adds	r7, #20
   105ba:	46bd      	mov	sp, r7
   105bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   105c0:	4770      	bx	lr

000105c2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
   105c2:	b480      	push	{r7}
   105c4:	b085      	sub	sp, #20
   105c6:	af00      	add	r7, sp, #0
   105c8:	6078      	str	r0, [r7, #4]
   105ca:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
   105ce:	687b      	ldr	r3, [r7, #4]
   105d0:	681b      	ldr	r3, [r3, #0]
   105d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   105d4:	68fb      	ldr	r3, [r7, #12]
   105d6:	f383 8810 	msr	PRIMASK, r3
}
   105da:	bf00      	nop
   105dc:	3714      	adds	r7, #20
   105de:	46bd      	mov	sp, r7
   105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   105e4:	4770      	bx	lr
	...

000105e8 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
   105e8:	b580      	push	{r7, lr}
   105ea:	b08c      	sub	sp, #48	; 0x30
   105ec:	af00      	add	r7, sp, #0
   105ee:	6078      	str	r0, [r7, #4]
   105f0:	460b      	mov	r3, r1
   105f2:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   105f4:	687b      	ldr	r3, [r7, #4]
   105f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   105f8:	687b      	ldr	r3, [r7, #4]
   105fa:	681b      	ldr	r3, [r3, #0]
   105fc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
   105fe:	f107 030c 	add.w	r3, r7, #12
   10602:	2200      	movs	r2, #0
   10604:	601a      	str	r2, [r3, #0]
   10606:	605a      	str	r2, [r3, #4]
   10608:	609a      	str	r2, [r3, #8]
   1060a:	60da      	str	r2, [r3, #12]
   1060c:	611a      	str	r2, [r3, #16]
   1060e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   10610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10612:	7b1b      	ldrb	r3, [r3, #12]
   10614:	2b00      	cmp	r3, #0
   10616:	d001      	beq.n	1061c <n25q256a_xip_confirm+0x34>
   10618:	2206      	movs	r2, #6
   1061a:	e000      	b.n	1061e <n25q256a_xip_confirm+0x36>
   1061c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   1061e:	7b3b      	ldrb	r3, [r7, #12]
   10620:	f362 0302 	bfi	r3, r2, #0, #3
   10624:	733b      	strb	r3, [r7, #12]
   10626:	7b3b      	ldrb	r3, [r7, #12]
   10628:	f043 0310 	orr.w	r3, r3, #16
   1062c:	733b      	strb	r3, [r7, #12]
   1062e:	7b3b      	ldrb	r3, [r7, #12]
   10630:	f043 0320 	orr.w	r3, r3, #32
   10634:	733b      	strb	r3, [r7, #12]
   10636:	7b3b      	ldrb	r3, [r7, #12]
   10638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1063c:	733b      	strb	r3, [r7, #12]
   1063e:	7b3b      	ldrb	r3, [r7, #12]
   10640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10644:	733b      	strb	r3, [r7, #12]
   10646:	7b7b      	ldrb	r3, [r7, #13]
   10648:	f043 0303 	orr.w	r3, r3, #3
   1064c:	737b      	strb	r3, [r7, #13]
   1064e:	7b7b      	ldrb	r3, [r7, #13]
   10650:	2201      	movs	r2, #1
   10652:	f362 1305 	bfi	r3, r2, #4, #2
   10656:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
   10658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1065a:	7b1b      	ldrb	r3, [r3, #12]
   1065c:	2b00      	cmp	r3, #0
   1065e:	d001      	beq.n	10664 <n25q256a_xip_confirm+0x7c>
   10660:	2208      	movs	r2, #8
   10662:	e000      	b.n	10666 <n25q256a_xip_confirm+0x7e>
   10664:	2200      	movs	r2, #0
	struct _qspi_command         cmd
   10666:	7bbb      	ldrb	r3, [r7, #14]
   10668:	f362 0304 	bfi	r3, r2, #0, #5
   1066c:	73bb      	strb	r3, [r7, #14]
   1066e:	230b      	movs	r3, #11
   10670:	743b      	strb	r3, [r7, #16]
   10672:	78fb      	ldrb	r3, [r7, #3]
   10674:	2b00      	cmp	r3, #0
   10676:	d001      	beq.n	1067c <n25q256a_xip_confirm+0x94>
   10678:	2300      	movs	r3, #0
   1067a:	e000      	b.n	1067e <n25q256a_xip_confirm+0x96>
   1067c:	23ff      	movs	r3, #255	; 0xff
   1067e:	747b      	strb	r3, [r7, #17]
   10680:	2301      	movs	r3, #1
   10682:	61bb      	str	r3, [r7, #24]
   10684:	f107 0327 	add.w	r3, r7, #39	; 0x27
   10688:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
   1068a:	f107 030c 	add.w	r3, r7, #12
   1068e:	4619      	mov	r1, r3
   10690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10692:	4b07      	ldr	r3, [pc, #28]	; (106b0 <n25q256a_xip_confirm+0xc8>)
   10694:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
   10696:	78fb      	ldrb	r3, [r7, #3]
   10698:	2b00      	cmp	r3, #0
   1069a:	d001      	beq.n	106a0 <n25q256a_xip_confirm+0xb8>
   1069c:	2202      	movs	r2, #2
   1069e:	e000      	b.n	106a2 <n25q256a_xip_confirm+0xba>
   106a0:	2201      	movs	r2, #1
   106a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   106a4:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   106a6:	2300      	movs	r3, #0
}
   106a8:	4618      	mov	r0, r3
   106aa:	3730      	adds	r7, #48	; 0x30
   106ac:	46bd      	mov	sp, r7
   106ae:	bd80      	pop	{r7, pc}
   106b0:	000068bd 	.word	0x000068bd

000106b4 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
   106b4:	b580      	push	{r7, lr}
   106b6:	b08c      	sub	sp, #48	; 0x30
   106b8:	af00      	add	r7, sp, #0
   106ba:	6078      	str	r0, [r7, #4]
   106bc:	460b      	mov	r3, r1
   106be:	70fb      	strb	r3, [r7, #3]
   106c0:	4613      	mov	r3, r2
   106c2:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
   106c4:	2300      	movs	r3, #0
   106c6:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
   106c8:	687b      	ldr	r3, [r7, #4]
   106ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
   106cc:	687b      	ldr	r3, [r7, #4]
   106ce:	681b      	ldr	r3, [r3, #0]
   106d0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
   106d2:	f107 030c 	add.w	r3, r7, #12
   106d6:	2200      	movs	r2, #0
   106d8:	601a      	str	r2, [r3, #0]
   106da:	605a      	str	r2, [r3, #4]
   106dc:	609a      	str	r2, [r3, #8]
   106de:	60da      	str	r2, [r3, #12]
   106e0:	611a      	str	r2, [r3, #16]
   106e2:	615a      	str	r2, [r3, #20]
   106e4:	78fb      	ldrb	r3, [r7, #3]
   106e6:	f003 0307 	and.w	r3, r3, #7
   106ea:	b2da      	uxtb	r2, r3
   106ec:	7b3b      	ldrb	r3, [r7, #12]
   106ee:	f362 0302 	bfi	r3, r2, #0, #3
   106f2:	733b      	strb	r3, [r7, #12]
   106f4:	7b3b      	ldrb	r3, [r7, #12]
   106f6:	f043 0310 	orr.w	r3, r3, #16
   106fa:	733b      	strb	r3, [r7, #12]
   106fc:	7b3b      	ldrb	r3, [r7, #12]
   106fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10702:	733b      	strb	r3, [r7, #12]
   10704:	78bb      	ldrb	r3, [r7, #2]
   10706:	743b      	strb	r3, [r7, #16]
   10708:	2301      	movs	r3, #1
   1070a:	61bb      	str	r3, [r7, #24]
   1070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   10710:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
   10712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10714:	7b5b      	ldrb	r3, [r3, #13]
   10716:	2b00      	cmp	r3, #0
   10718:	d003      	beq.n	10722 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
   1071a:	2100      	movs	r1, #0
   1071c:	6878      	ldr	r0, [r7, #4]
   1071e:	4b0a      	ldr	r3, [pc, #40]	; (10748 <n25q256a_read_reg+0x94>)
   10720:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   10722:	f107 030c 	add.w	r3, r7, #12
   10726:	4619      	mov	r1, r3
   10728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1072a:	4b08      	ldr	r3, [pc, #32]	; (1074c <n25q256a_read_reg+0x98>)
   1072c:	4798      	blx	r3
	if (n25q->xip_mode) {
   1072e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10730:	7b5b      	ldrb	r3, [r3, #13]
   10732:	2b00      	cmp	r3, #0
   10734:	d003      	beq.n	1073e <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
   10736:	2101      	movs	r1, #1
   10738:	6878      	ldr	r0, [r7, #4]
   1073a:	4b03      	ldr	r3, [pc, #12]	; (10748 <n25q256a_read_reg+0x94>)
   1073c:	4798      	blx	r3
	}
	return status;
   1073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   10740:	4618      	mov	r0, r3
   10742:	3730      	adds	r7, #48	; 0x30
   10744:	46bd      	mov	sp, r7
   10746:	bd80      	pop	{r7, pc}
   10748:	000105e9 	.word	0x000105e9
   1074c:	000068bd 	.word	0x000068bd

00010750 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
   10750:	b580      	push	{r7, lr}
   10752:	b08c      	sub	sp, #48	; 0x30
   10754:	af00      	add	r7, sp, #0
   10756:	60f8      	str	r0, [r7, #12]
   10758:	607b      	str	r3, [r7, #4]
   1075a:	460b      	mov	r3, r1
   1075c:	72fb      	strb	r3, [r7, #11]
   1075e:	4613      	mov	r3, r2
   10760:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10762:	68fb      	ldr	r3, [r7, #12]
   10764:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10766:	68fb      	ldr	r3, [r7, #12]
   10768:	681b      	ldr	r3, [r3, #0]
   1076a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
   1076c:	f107 0310 	add.w	r3, r7, #16
   10770:	2200      	movs	r2, #0
   10772:	601a      	str	r2, [r3, #0]
   10774:	605a      	str	r2, [r3, #4]
   10776:	609a      	str	r2, [r3, #8]
   10778:	60da      	str	r2, [r3, #12]
   1077a:	611a      	str	r2, [r3, #16]
   1077c:	615a      	str	r2, [r3, #20]
   1077e:	7afb      	ldrb	r3, [r7, #11]
   10780:	f003 0307 	and.w	r3, r3, #7
   10784:	b2da      	uxtb	r2, r3
   10786:	7c3b      	ldrb	r3, [r7, #16]
   10788:	f362 0302 	bfi	r3, r2, #0, #3
   1078c:	743b      	strb	r3, [r7, #16]
   1078e:	7c3b      	ldrb	r3, [r7, #16]
   10790:	f043 0310 	orr.w	r3, r3, #16
   10794:	743b      	strb	r3, [r7, #16]
   10796:	7c3b      	ldrb	r3, [r7, #16]
   10798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1079c:	743b      	strb	r3, [r7, #16]
   1079e:	7c7b      	ldrb	r3, [r7, #17]
   107a0:	2202      	movs	r2, #2
   107a2:	f362 1305 	bfi	r3, r2, #4, #2
   107a6:	747b      	strb	r3, [r7, #17]
   107a8:	7abb      	ldrb	r3, [r7, #10]
   107aa:	753b      	strb	r3, [r7, #20]
   107ac:	2301      	movs	r3, #1
   107ae:	61fb      	str	r3, [r7, #28]
   107b0:	1d3b      	adds	r3, r7, #4
   107b2:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
   107b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107b6:	7b5b      	ldrb	r3, [r3, #13]
   107b8:	2b00      	cmp	r3, #0
   107ba:	d003      	beq.n	107c4 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
   107bc:	2100      	movs	r1, #0
   107be:	68f8      	ldr	r0, [r7, #12]
   107c0:	4b09      	ldr	r3, [pc, #36]	; (107e8 <n25q256a_write_reg+0x98>)
   107c2:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
   107c4:	f107 0310 	add.w	r3, r7, #16
   107c8:	4619      	mov	r1, r3
   107ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   107cc:	4b07      	ldr	r3, [pc, #28]	; (107ec <n25q256a_write_reg+0x9c>)
   107ce:	4798      	blx	r3
	if (n25q->xip_mode) {
   107d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107d2:	7b5b      	ldrb	r3, [r3, #13]
   107d4:	2b00      	cmp	r3, #0
   107d6:	d003      	beq.n	107e0 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
   107d8:	2101      	movs	r1, #1
   107da:	68f8      	ldr	r0, [r7, #12]
   107dc:	4b02      	ldr	r3, [pc, #8]	; (107e8 <n25q256a_write_reg+0x98>)
   107de:	4798      	blx	r3
	}
}
   107e0:	bf00      	nop
   107e2:	3730      	adds	r7, #48	; 0x30
   107e4:	46bd      	mov	sp, r7
   107e6:	bd80      	pop	{r7, pc}
   107e8:	000105e9 	.word	0x000105e9
   107ec:	000068bd 	.word	0x000068bd

000107f0 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
   107f0:	b580      	push	{r7, lr}
   107f2:	b090      	sub	sp, #64	; 0x40
   107f4:	af00      	add	r7, sp, #0
   107f6:	6078      	str	r0, [r7, #4]
   107f8:	460b      	mov	r3, r1
   107fa:	70fb      	strb	r3, [r7, #3]
   107fc:	4613      	mov	r3, r2
   107fe:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10800:	687b      	ldr	r3, [r7, #4]
   10802:	681b      	ldr	r3, [r3, #0]
   10804:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
   10806:	78bb      	ldrb	r3, [r7, #2]
   10808:	2b00      	cmp	r3, #0
   1080a:	d001      	beq.n	10810 <n25q256a_write_enable+0x20>
   1080c:	2306      	movs	r3, #6
   1080e:	e000      	b.n	10812 <n25q256a_write_enable+0x22>
   10810:	2304      	movs	r3, #4
   10812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
   10816:	f107 0320 	add.w	r3, r7, #32
   1081a:	2200      	movs	r2, #0
   1081c:	601a      	str	r2, [r3, #0]
   1081e:	605a      	str	r2, [r3, #4]
   10820:	609a      	str	r2, [r3, #8]
   10822:	60da      	str	r2, [r3, #12]
   10824:	611a      	str	r2, [r3, #16]
   10826:	615a      	str	r2, [r3, #20]
   10828:	78fb      	ldrb	r3, [r7, #3]
   1082a:	f003 0307 	and.w	r3, r3, #7
   1082e:	b2da      	uxtb	r2, r3
   10830:	f897 3020 	ldrb.w	r3, [r7, #32]
   10834:	f362 0302 	bfi	r3, r2, #0, #3
   10838:	f887 3020 	strb.w	r3, [r7, #32]
   1083c:	f897 3020 	ldrb.w	r3, [r7, #32]
   10840:	f043 0310 	orr.w	r3, r3, #16
   10844:	f887 3020 	strb.w	r3, [r7, #32]
   10848:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   1084c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
   10850:	f107 0308 	add.w	r3, r7, #8
   10854:	2200      	movs	r2, #0
   10856:	601a      	str	r2, [r3, #0]
   10858:	605a      	str	r2, [r3, #4]
   1085a:	609a      	str	r2, [r3, #8]
   1085c:	60da      	str	r2, [r3, #12]
   1085e:	611a      	str	r2, [r3, #16]
   10860:	615a      	str	r2, [r3, #20]
   10862:	78fb      	ldrb	r3, [r7, #3]
   10864:	f003 0307 	and.w	r3, r3, #7
   10868:	b2da      	uxtb	r2, r3
   1086a:	7a3b      	ldrb	r3, [r7, #8]
   1086c:	f362 0302 	bfi	r3, r2, #0, #3
   10870:	723b      	strb	r3, [r7, #8]
   10872:	7a3b      	ldrb	r3, [r7, #8]
   10874:	f043 0310 	orr.w	r3, r3, #16
   10878:	723b      	strb	r3, [r7, #8]
   1087a:	7a3b      	ldrb	r3, [r7, #8]
   1087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10880:	723b      	strb	r3, [r7, #8]
   10882:	2305      	movs	r3, #5
   10884:	733b      	strb	r3, [r7, #12]
   10886:	2301      	movs	r3, #1
   10888:	617b      	str	r3, [r7, #20]
   1088a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   1088e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
   10890:	f107 0320 	add.w	r3, r7, #32
   10894:	4619      	mov	r1, r3
   10896:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   10898:	4b08      	ldr	r3, [pc, #32]	; (108bc <n25q256a_write_enable+0xcc>)
   1089a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
   1089c:	f107 0308 	add.w	r3, r7, #8
   108a0:	4619      	mov	r1, r3
   108a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   108a4:	4b05      	ldr	r3, [pc, #20]	; (108bc <n25q256a_write_enable+0xcc>)
   108a6:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
   108a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   108ac:	f003 0302 	and.w	r3, r3, #2
   108b0:	2b00      	cmp	r3, #0
   108b2:	d0ed      	beq.n	10890 <n25q256a_write_enable+0xa0>
}
   108b4:	bf00      	nop
   108b6:	3740      	adds	r7, #64	; 0x40
   108b8:	46bd      	mov	sp, r7
   108ba:	bd80      	pop	{r7, pc}
   108bc:	000068bd 	.word	0x000068bd

000108c0 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
   108c0:	b590      	push	{r4, r7, lr}
   108c2:	b087      	sub	sp, #28
   108c4:	af00      	add	r7, sp, #0
   108c6:	6078      	str	r0, [r7, #4]
   108c8:	460b      	mov	r3, r1
   108ca:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
   108cc:	687b      	ldr	r3, [r7, #4]
   108ce:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   108d0:	68fb      	ldr	r3, [r7, #12]
   108d2:	7b1b      	ldrb	r3, [r3, #12]
   108d4:	2b00      	cmp	r3, #0
   108d6:	d001      	beq.n	108dc <n25q256a_switch_mode+0x1c>
   108d8:	2306      	movs	r3, #6
   108da:	e000      	b.n	108de <n25q256a_switch_mode+0x1e>
   108dc:	2300      	movs	r3, #0
   108de:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   108e0:	7afb      	ldrb	r3, [r7, #11]
   108e2:	2265      	movs	r2, #101	; 0x65
   108e4:	4619      	mov	r1, r3
   108e6:	6878      	ldr	r0, [r7, #4]
   108e8:	4b25      	ldr	r3, [pc, #148]	; (10980 <n25q256a_switch_mode+0xc0>)
   108ea:	4798      	blx	r3
   108ec:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
   108ee:	2300      	movs	r3, #0
   108f0:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
   108f2:	68fb      	ldr	r3, [r7, #12]
   108f4:	7b1b      	ldrb	r3, [r3, #12]
   108f6:	78fa      	ldrb	r2, [r7, #3]
   108f8:	429a      	cmp	r2, r3
   108fa:	d03d      	beq.n	10978 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
   108fc:	78fb      	ldrb	r3, [r7, #3]
   108fe:	2b00      	cmp	r3, #0
   10900:	d00b      	beq.n	1091a <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
   10902:	697b      	ldr	r3, [r7, #20]
   10904:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10908:	2b00      	cmp	r3, #0
   1090a:	d011      	beq.n	10930 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
   1090c:	697b      	ldr	r3, [r7, #20]
   1090e:	f003 031f 	and.w	r3, r3, #31
   10912:	617b      	str	r3, [r7, #20]
			modify = 1;
   10914:	2301      	movs	r3, #1
   10916:	74fb      	strb	r3, [r7, #19]
   10918:	e00a      	b.n	10930 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
   1091a:	697b      	ldr	r3, [r7, #20]
   1091c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10920:	2b00      	cmp	r3, #0
   10922:	d105      	bne.n	10930 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
   10924:	697b      	ldr	r3, [r7, #20]
   10926:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   1092a:	617b      	str	r3, [r7, #20]
			modify = 1;
   1092c:	2301      	movs	r3, #1
   1092e:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
   10930:	7cfb      	ldrb	r3, [r7, #19]
   10932:	2b00      	cmp	r3, #0
   10934:	d021      	beq.n	1097a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
   10936:	68fb      	ldr	r3, [r7, #12]
   10938:	78fa      	ldrb	r2, [r7, #3]
   1093a:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
   1093c:	7afb      	ldrb	r3, [r7, #11]
   1093e:	2201      	movs	r2, #1
   10940:	4619      	mov	r1, r3
   10942:	6878      	ldr	r0, [r7, #4]
   10944:	4b0f      	ldr	r3, [pc, #60]	; (10984 <n25q256a_switch_mode+0xc4>)
   10946:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
   10948:	7af9      	ldrb	r1, [r7, #11]
   1094a:	697b      	ldr	r3, [r7, #20]
   1094c:	2261      	movs	r2, #97	; 0x61
   1094e:	6878      	ldr	r0, [r7, #4]
   10950:	4c0d      	ldr	r4, [pc, #52]	; (10988 <n25q256a_switch_mode+0xc8>)
   10952:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10954:	78fb      	ldrb	r3, [r7, #3]
   10956:	2b00      	cmp	r3, #0
   10958:	d001      	beq.n	1095e <n25q256a_switch_mode+0x9e>
   1095a:	2306      	movs	r3, #6
   1095c:	e000      	b.n	10960 <n25q256a_switch_mode+0xa0>
   1095e:	2300      	movs	r3, #0
   10960:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
   10962:	7afb      	ldrb	r3, [r7, #11]
   10964:	2265      	movs	r2, #101	; 0x65
   10966:	4619      	mov	r1, r3
   10968:	6878      	ldr	r0, [r7, #4]
   1096a:	4b05      	ldr	r3, [pc, #20]	; (10980 <n25q256a_switch_mode+0xc0>)
   1096c:	4798      	blx	r3
   1096e:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
   10970:	68fb      	ldr	r3, [r7, #12]
   10972:	78fa      	ldrb	r2, [r7, #3]
   10974:	731a      	strb	r2, [r3, #12]
   10976:	e000      	b.n	1097a <n25q256a_switch_mode+0xba>
		return;
   10978:	bf00      	nop
	}
}
   1097a:	371c      	adds	r7, #28
   1097c:	46bd      	mov	sp, r7
   1097e:	bd90      	pop	{r4, r7, pc}
   10980:	000106b5 	.word	0x000106b5
   10984:	000107f1 	.word	0x000107f1
   10988:	00010751 	.word	0x00010751

0001098c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
   1098c:	b580      	push	{r7, lr}
   1098e:	b086      	sub	sp, #24
   10990:	af00      	add	r7, sp, #0
   10992:	60f8      	str	r0, [r7, #12]
   10994:	60b9      	str	r1, [r7, #8]
   10996:	607a      	str	r2, [r7, #4]
   10998:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
   1099a:	68fb      	ldr	r3, [r7, #12]
   1099c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
   1099e:	4a0c      	ldr	r2, [pc, #48]	; (109d0 <n25q256a_construct+0x44>)
   109a0:	68b9      	ldr	r1, [r7, #8]
   109a2:	68f8      	ldr	r0, [r7, #12]
   109a4:	4b0b      	ldr	r3, [pc, #44]	; (109d4 <n25q256a_construct+0x48>)
   109a6:	4798      	blx	r3
	n25q->quad_mode    = 0;
   109a8:	697b      	ldr	r3, [r7, #20]
   109aa:	2200      	movs	r2, #0
   109ac:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
   109ae:	697b      	ldr	r3, [r7, #20]
   109b0:	2200      	movs	r2, #0
   109b2:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
   109b4:	697b      	ldr	r3, [r7, #20]
   109b6:	687a      	ldr	r2, [r7, #4]
   109b8:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
   109ba:	78fb      	ldrb	r3, [r7, #3]
   109bc:	4619      	mov	r1, r3
   109be:	68f8      	ldr	r0, [r7, #12]
   109c0:	4b05      	ldr	r3, [pc, #20]	; (109d8 <n25q256a_construct+0x4c>)
   109c2:	4798      	blx	r3
	return me;
   109c4:	68fb      	ldr	r3, [r7, #12]
}
   109c6:	4618      	mov	r0, r3
   109c8:	3718      	adds	r7, #24
   109ca:	46bd      	mov	sp, r7
   109cc:	bd80      	pop	{r7, pc}
   109ce:	bf00      	nop
   109d0:	0001fc64 	.word	0x0001fc64
   109d4:	00010e69 	.word	0x00010e69
   109d8:	000108c1 	.word	0x000108c1

000109dc <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   109dc:	b580      	push	{r7, lr}
   109de:	b08c      	sub	sp, #48	; 0x30
   109e0:	af00      	add	r7, sp, #0
   109e2:	60f8      	str	r0, [r7, #12]
   109e4:	60b9      	str	r1, [r7, #8]
   109e6:	607a      	str	r2, [r7, #4]
   109e8:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   109ea:	68fb      	ldr	r3, [r7, #12]
   109ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   109ee:	68fb      	ldr	r3, [r7, #12]
   109f0:	681b      	ldr	r3, [r3, #0]
   109f2:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
   109f4:	f107 0310 	add.w	r3, r7, #16
   109f8:	2200      	movs	r2, #0
   109fa:	601a      	str	r2, [r3, #0]
   109fc:	605a      	str	r2, [r3, #4]
   109fe:	609a      	str	r2, [r3, #8]
   10a00:	60da      	str	r2, [r3, #12]
   10a02:	611a      	str	r2, [r3, #16]
   10a04:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   10a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a08:	7b1b      	ldrb	r3, [r3, #12]
   10a0a:	2b00      	cmp	r3, #0
   10a0c:	d001      	beq.n	10a12 <n25q256a_read+0x36>
   10a0e:	2206      	movs	r2, #6
   10a10:	e000      	b.n	10a14 <n25q256a_read+0x38>
   10a12:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
   10a14:	7c3b      	ldrb	r3, [r7, #16]
   10a16:	f362 0302 	bfi	r3, r2, #0, #3
   10a1a:	743b      	strb	r3, [r7, #16]
   10a1c:	7c3b      	ldrb	r3, [r7, #16]
   10a1e:	f043 0310 	orr.w	r3, r3, #16
   10a22:	743b      	strb	r3, [r7, #16]
   10a24:	7c3b      	ldrb	r3, [r7, #16]
   10a26:	f043 0320 	orr.w	r3, r3, #32
   10a2a:	743b      	strb	r3, [r7, #16]
   10a2c:	7c3b      	ldrb	r3, [r7, #16]
   10a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10a32:	743b      	strb	r3, [r7, #16]
   10a34:	7c7b      	ldrb	r3, [r7, #17]
   10a36:	2201      	movs	r2, #1
   10a38:	f362 1305 	bfi	r3, r2, #4, #2
   10a3c:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
   10a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a40:	7b1b      	ldrb	r3, [r3, #12]
   10a42:	2b00      	cmp	r3, #0
   10a44:	d001      	beq.n	10a4a <n25q256a_read+0x6e>
   10a46:	220a      	movs	r2, #10
   10a48:	e000      	b.n	10a4c <n25q256a_read+0x70>
   10a4a:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
   10a4c:	7cbb      	ldrb	r3, [r7, #18]
   10a4e:	f362 0304 	bfi	r3, r2, #0, #5
   10a52:	74bb      	strb	r3, [r7, #18]
   10a54:	230b      	movs	r3, #11
   10a56:	753b      	strb	r3, [r7, #20]
   10a58:	687b      	ldr	r3, [r7, #4]
   10a5a:	61bb      	str	r3, [r7, #24]
   10a5c:	683b      	ldr	r3, [r7, #0]
   10a5e:	61fb      	str	r3, [r7, #28]
   10a60:	68bb      	ldr	r3, [r7, #8]
   10a62:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
   10a64:	f107 0310 	add.w	r3, r7, #16
   10a68:	4619      	mov	r1, r3
   10a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10a6c:	4b03      	ldr	r3, [pc, #12]	; (10a7c <n25q256a_read+0xa0>)
   10a6e:	4798      	blx	r3
	return ERR_NONE;
   10a70:	2300      	movs	r3, #0
}
   10a72:	4618      	mov	r0, r3
   10a74:	3730      	adds	r7, #48	; 0x30
   10a76:	46bd      	mov	sp, r7
   10a78:	bd80      	pop	{r7, pc}
   10a7a:	bf00      	nop
   10a7c:	000068bd 	.word	0x000068bd

00010a80 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
   10a80:	b580      	push	{r7, lr}
   10a82:	b08c      	sub	sp, #48	; 0x30
   10a84:	af00      	add	r7, sp, #0
   10a86:	60f8      	str	r0, [r7, #12]
   10a88:	60b9      	str	r1, [r7, #8]
   10a8a:	607a      	str	r2, [r7, #4]
   10a8c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10a8e:	68fb      	ldr	r3, [r7, #12]
   10a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10a92:	68fb      	ldr	r3, [r7, #12]
   10a94:	681b      	ldr	r3, [r3, #0]
   10a96:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
   10a98:	f107 0310 	add.w	r3, r7, #16
   10a9c:	2200      	movs	r2, #0
   10a9e:	601a      	str	r2, [r3, #0]
   10aa0:	605a      	str	r2, [r3, #4]
   10aa2:	609a      	str	r2, [r3, #8]
   10aa4:	60da      	str	r2, [r3, #12]
   10aa6:	611a      	str	r2, [r3, #16]
   10aa8:	615a      	str	r2, [r3, #20]
   10aaa:	7c3b      	ldrb	r3, [r7, #16]
   10aac:	f043 0310 	orr.w	r3, r3, #16
   10ab0:	743b      	strb	r3, [r7, #16]
   10ab2:	7c3b      	ldrb	r3, [r7, #16]
   10ab4:	f043 0320 	orr.w	r3, r3, #32
   10ab8:	743b      	strb	r3, [r7, #16]
   10aba:	7c3b      	ldrb	r3, [r7, #16]
   10abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10ac0:	743b      	strb	r3, [r7, #16]
   10ac2:	7c7b      	ldrb	r3, [r7, #17]
   10ac4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   10ac8:	747b      	strb	r3, [r7, #17]
   10aca:	2302      	movs	r3, #2
   10acc:	753b      	strb	r3, [r7, #20]
   10ace:	687b      	ldr	r3, [r7, #4]
   10ad0:	61bb      	str	r3, [r7, #24]
   10ad2:	683b      	ldr	r3, [r7, #0]
   10ad4:	61fb      	str	r3, [r7, #28]
   10ad6:	68bb      	ldr	r3, [r7, #8]
   10ad8:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10adc:	7b1b      	ldrb	r3, [r3, #12]
   10ade:	2b00      	cmp	r3, #0
   10ae0:	d001      	beq.n	10ae6 <n25q256a_write+0x66>
   10ae2:	2206      	movs	r2, #6
   10ae4:	e000      	b.n	10ae8 <n25q256a_write+0x68>
   10ae6:	2200      	movs	r2, #0
   10ae8:	7c3b      	ldrb	r3, [r7, #16]
   10aea:	f362 0302 	bfi	r3, r2, #0, #3
   10aee:	743b      	strb	r3, [r7, #16]
	while (length) {
   10af0:	e035      	b.n	10b5e <n25q256a_write+0xde>
		cmd.address = address;
   10af2:	687b      	ldr	r3, [r7, #4]
   10af4:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
   10af6:	683b      	ldr	r3, [r7, #0]
   10af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   10afc:	d802      	bhi.n	10b04 <n25q256a_write+0x84>
			cmd.buf_len = length;
   10afe:	683b      	ldr	r3, [r7, #0]
   10b00:	61fb      	str	r3, [r7, #28]
   10b02:	e002      	b.n	10b0a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
   10b04:	f44f 7380 	mov.w	r3, #256	; 0x100
   10b08:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   10b0a:	7c3b      	ldrb	r3, [r7, #16]
   10b0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10b10:	b2db      	uxtb	r3, r3
   10b12:	2201      	movs	r2, #1
   10b14:	4619      	mov	r1, r3
   10b16:	68f8      	ldr	r0, [r7, #12]
   10b18:	4b19      	ldr	r3, [pc, #100]	; (10b80 <n25q256a_write+0x100>)
   10b1a:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
   10b1c:	f107 0310 	add.w	r3, r7, #16
   10b20:	4619      	mov	r1, r3
   10b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10b24:	4b17      	ldr	r3, [pc, #92]	; (10b84 <n25q256a_write+0x104>)
   10b26:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   10b28:	bf00      	nop
   10b2a:	7c3b      	ldrb	r3, [r7, #16]
   10b2c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10b30:	b2db      	uxtb	r3, r3
   10b32:	2270      	movs	r2, #112	; 0x70
   10b34:	4619      	mov	r1, r3
   10b36:	68f8      	ldr	r0, [r7, #12]
   10b38:	4b13      	ldr	r3, [pc, #76]	; (10b88 <n25q256a_write+0x108>)
   10b3a:	4798      	blx	r3
   10b3c:	4603      	mov	r3, r0
   10b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10b42:	2b00      	cmp	r3, #0
   10b44:	d0f1      	beq.n	10b2a <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
   10b46:	6a3a      	ldr	r2, [r7, #32]
   10b48:	69fb      	ldr	r3, [r7, #28]
   10b4a:	4413      	add	r3, r2
   10b4c:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
   10b4e:	69fb      	ldr	r3, [r7, #28]
   10b50:	683a      	ldr	r2, [r7, #0]
   10b52:	1ad3      	subs	r3, r2, r3
   10b54:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
   10b56:	69fb      	ldr	r3, [r7, #28]
   10b58:	687a      	ldr	r2, [r7, #4]
   10b5a:	4413      	add	r3, r2
   10b5c:	607b      	str	r3, [r7, #4]
	while (length) {
   10b5e:	683b      	ldr	r3, [r7, #0]
   10b60:	2b00      	cmp	r3, #0
   10b62:	d1c6      	bne.n	10af2 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
   10b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b66:	7b5b      	ldrb	r3, [r3, #13]
   10b68:	2b00      	cmp	r3, #0
   10b6a:	d003      	beq.n	10b74 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
   10b6c:	2101      	movs	r1, #1
   10b6e:	68f8      	ldr	r0, [r7, #12]
   10b70:	4b06      	ldr	r3, [pc, #24]	; (10b8c <n25q256a_write+0x10c>)
   10b72:	4798      	blx	r3
	}
	return ERR_NONE;
   10b74:	2300      	movs	r3, #0
}
   10b76:	4618      	mov	r0, r3
   10b78:	3730      	adds	r7, #48	; 0x30
   10b7a:	46bd      	mov	sp, r7
   10b7c:	bd80      	pop	{r7, pc}
   10b7e:	bf00      	nop
   10b80:	000107f1 	.word	0x000107f1
   10b84:	000068bd 	.word	0x000068bd
   10b88:	000106b5 	.word	0x000106b5
   10b8c:	000105e9 	.word	0x000105e9

00010b90 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
   10b90:	b580      	push	{r7, lr}
   10b92:	b090      	sub	sp, #64	; 0x40
   10b94:	af00      	add	r7, sp, #0
   10b96:	60f8      	str	r0, [r7, #12]
   10b98:	60b9      	str	r1, [r7, #8]
   10b9a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10b9c:	68fb      	ldr	r3, [r7, #12]
   10b9e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10ba0:	68fb      	ldr	r3, [r7, #12]
   10ba2:	681b      	ldr	r3, [r3, #0]
   10ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
   10ba6:	f107 0314 	add.w	r3, r7, #20
   10baa:	2200      	movs	r2, #0
   10bac:	601a      	str	r2, [r3, #0]
   10bae:	605a      	str	r2, [r3, #4]
   10bb0:	609a      	str	r2, [r3, #8]
   10bb2:	60da      	str	r2, [r3, #12]
   10bb4:	611a      	str	r2, [r3, #16]
   10bb6:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
   10bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10bba:	7b1b      	ldrb	r3, [r3, #12]
   10bbc:	2b00      	cmp	r3, #0
   10bbe:	d001      	beq.n	10bc4 <n25q256a_erase+0x34>
   10bc0:	2206      	movs	r2, #6
   10bc2:	e000      	b.n	10bc6 <n25q256a_erase+0x36>
   10bc4:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
   10bc6:	7d3b      	ldrb	r3, [r7, #20]
   10bc8:	f362 0302 	bfi	r3, r2, #0, #3
   10bcc:	753b      	strb	r3, [r7, #20]
   10bce:	7d3b      	ldrb	r3, [r7, #20]
   10bd0:	f043 0310 	orr.w	r3, r3, #16
   10bd4:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
   10bd6:	687b      	ldr	r3, [r7, #4]
   10bd8:	4a56      	ldr	r2, [pc, #344]	; (10d34 <n25q256a_erase+0x1a4>)
   10bda:	4293      	cmp	r3, r2
   10bdc:	bf94      	ite	ls
   10bde:	2301      	movls	r3, #1
   10be0:	2300      	movhi	r3, #0
   10be2:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
   10be4:	7d3b      	ldrb	r3, [r7, #20]
   10be6:	f362 1345 	bfi	r3, r2, #5, #1
   10bea:	753b      	strb	r3, [r7, #20]
   10bec:	7d7b      	ldrb	r3, [r7, #21]
   10bee:	2202      	movs	r2, #2
   10bf0:	f362 1305 	bfi	r3, r2, #4, #2
   10bf4:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
   10bf6:	68bb      	ldr	r3, [r7, #8]
   10bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
   10bfa:	687b      	ldr	r3, [r7, #4]
   10bfc:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
   10bfe:	2300      	movs	r3, #0
   10c00:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
   10c02:	687b      	ldr	r3, [r7, #4]
   10c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
   10c08:	2b00      	cmp	r3, #0
   10c0a:	d104      	bne.n	10c16 <n25q256a_erase+0x86>
   10c0c:	68bb      	ldr	r3, [r7, #8]
   10c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
   10c12:	2b00      	cmp	r3, #0
   10c14:	d002      	beq.n	10c1c <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
   10c16:	f06f 030c 	mvn.w	r3, #12
   10c1a:	e087      	b.n	10d2c <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
   10c1c:	687b      	ldr	r3, [r7, #4]
   10c1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   10c22:	d368      	bcc.n	10cf6 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
   10c24:	23c7      	movs	r3, #199	; 0xc7
   10c26:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   10c28:	7d3b      	ldrb	r3, [r7, #20]
   10c2a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10c2e:	b2db      	uxtb	r3, r3
   10c30:	2201      	movs	r2, #1
   10c32:	4619      	mov	r1, r3
   10c34:	68f8      	ldr	r0, [r7, #12]
   10c36:	4b40      	ldr	r3, [pc, #256]	; (10d38 <n25q256a_erase+0x1a8>)
   10c38:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
   10c3a:	f107 0314 	add.w	r3, r7, #20
   10c3e:	4619      	mov	r1, r3
   10c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10c42:	4b3e      	ldr	r3, [pc, #248]	; (10d3c <n25q256a_erase+0x1ac>)
   10c44:	4798      	blx	r3
   10c46:	e059      	b.n	10cfc <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
   10c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10c4a:	b29b      	uxth	r3, r3
   10c4c:	2b00      	cmp	r3, #0
   10c4e:	d11f      	bne.n	10c90 <n25q256a_erase+0x100>
   10c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   10c56:	d31b      	bcc.n	10c90 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
   10c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10c5a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
   10c5c:	23d8      	movs	r3, #216	; 0xd8
   10c5e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   10c60:	7d3b      	ldrb	r3, [r7, #20]
   10c62:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10c66:	b2db      	uxtb	r3, r3
   10c68:	2201      	movs	r2, #1
   10c6a:	4619      	mov	r1, r3
   10c6c:	68f8      	ldr	r0, [r7, #12]
   10c6e:	4b32      	ldr	r3, [pc, #200]	; (10d38 <n25q256a_erase+0x1a8>)
   10c70:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   10c72:	f107 0314 	add.w	r3, r7, #20
   10c76:	4619      	mov	r1, r3
   10c78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10c7a:	4b30      	ldr	r3, [pc, #192]	; (10d3c <n25q256a_erase+0x1ac>)
   10c7c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
   10c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10c80:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   10c84:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
   10c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10c88:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   10c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   10c8e:	e023      	b.n	10cd8 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
   10c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   10c96:	d31b      	bcc.n	10cd0 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
   10c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10c9a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
   10c9c:	2320      	movs	r3, #32
   10c9e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
   10ca0:	7d3b      	ldrb	r3, [r7, #20]
   10ca2:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10ca6:	b2db      	uxtb	r3, r3
   10ca8:	2201      	movs	r2, #1
   10caa:	4619      	mov	r1, r3
   10cac:	68f8      	ldr	r0, [r7, #12]
   10cae:	4b22      	ldr	r3, [pc, #136]	; (10d38 <n25q256a_erase+0x1a8>)
   10cb0:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
   10cb2:	f107 0314 	add.w	r3, r7, #20
   10cb6:	4619      	mov	r1, r3
   10cb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10cba:	4b20      	ldr	r3, [pc, #128]	; (10d3c <n25q256a_erase+0x1ac>)
   10cbc:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
   10cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   10cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
   10cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10cc8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   10ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   10cce:	e003      	b.n	10cd8 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
   10cd0:	f06f 030c 	mvn.w	r3, #12
   10cd4:	637b      	str	r3, [r7, #52]	; 0x34
				break;
   10cd6:	e011      	b.n	10cfc <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   10cd8:	bf00      	nop
   10cda:	7d3b      	ldrb	r3, [r7, #20]
   10cdc:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10ce0:	b2db      	uxtb	r3, r3
   10ce2:	2270      	movs	r2, #112	; 0x70
   10ce4:	4619      	mov	r1, r3
   10ce6:	68f8      	ldr	r0, [r7, #12]
   10ce8:	4b15      	ldr	r3, [pc, #84]	; (10d40 <n25q256a_erase+0x1b0>)
   10cea:	4798      	blx	r3
   10cec:	4603      	mov	r3, r0
   10cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10cf2:	2b00      	cmp	r3, #0
   10cf4:	d0f1      	beq.n	10cda <n25q256a_erase+0x14a>
		while (temp_len > 0) {
   10cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10cf8:	2b00      	cmp	r3, #0
   10cfa:	d1a5      	bne.n	10c48 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   10cfc:	bf00      	nop
   10cfe:	7d3b      	ldrb	r3, [r7, #20]
   10d00:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10d04:	b2db      	uxtb	r3, r3
   10d06:	2270      	movs	r2, #112	; 0x70
   10d08:	4619      	mov	r1, r3
   10d0a:	68f8      	ldr	r0, [r7, #12]
   10d0c:	4b0c      	ldr	r3, [pc, #48]	; (10d40 <n25q256a_erase+0x1b0>)
   10d0e:	4798      	blx	r3
   10d10:	4603      	mov	r3, r0
   10d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10d16:	2b00      	cmp	r3, #0
   10d18:	d0f1      	beq.n	10cfe <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
   10d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10d1c:	7b5b      	ldrb	r3, [r3, #13]
   10d1e:	2b00      	cmp	r3, #0
   10d20:	d003      	beq.n	10d2a <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
   10d22:	2101      	movs	r1, #1
   10d24:	68f8      	ldr	r0, [r7, #12]
   10d26:	4b07      	ldr	r3, [pc, #28]	; (10d44 <n25q256a_erase+0x1b4>)
   10d28:	4798      	blx	r3
	}
	return rc;
   10d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   10d2c:	4618      	mov	r0, r3
   10d2e:	3740      	adds	r7, #64	; 0x40
   10d30:	46bd      	mov	sp, r7
   10d32:	bd80      	pop	{r7, pc}
   10d34:	001fffff 	.word	0x001fffff
   10d38:	000107f1 	.word	0x000107f1
   10d3c:	000068bd 	.word	0x000068bd
   10d40:	000106b5 	.word	0x000106b5
   10d44:	000105e9 	.word	0x000105e9

00010d48 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
   10d48:	b590      	push	{r4, r7, lr}
   10d4a:	b085      	sub	sp, #20
   10d4c:	af00      	add	r7, sp, #0
   10d4e:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
   10d50:	687b      	ldr	r3, [r7, #4]
   10d52:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10d54:	68fb      	ldr	r3, [r7, #12]
   10d56:	7b1b      	ldrb	r3, [r3, #12]
   10d58:	2b00      	cmp	r3, #0
   10d5a:	d001      	beq.n	10d60 <n25q256a_enable_xip+0x18>
   10d5c:	2306      	movs	r3, #6
   10d5e:	e000      	b.n	10d62 <n25q256a_enable_xip+0x1a>
   10d60:	2300      	movs	r3, #0
   10d62:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
   10d64:	68fb      	ldr	r3, [r7, #12]
   10d66:	7b5b      	ldrb	r3, [r3, #13]
   10d68:	2b00      	cmp	r3, #0
   10d6a:	d129      	bne.n	10dc0 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   10d6c:	7afb      	ldrb	r3, [r7, #11]
   10d6e:	2285      	movs	r2, #133	; 0x85
   10d70:	4619      	mov	r1, r3
   10d72:	6878      	ldr	r0, [r7, #4]
   10d74:	4b15      	ldr	r3, [pc, #84]	; (10dcc <n25q256a_enable_xip+0x84>)
   10d76:	4798      	blx	r3
   10d78:	4603      	mov	r3, r0
   10d7a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
   10d7c:	7abb      	ldrb	r3, [r7, #10]
   10d7e:	f003 0308 	and.w	r3, r3, #8
   10d82:	2b00      	cmp	r3, #0
   10d84:	d015      	beq.n	10db2 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
   10d86:	7abb      	ldrb	r3, [r7, #10]
   10d88:	f023 0308 	bic.w	r3, r3, #8
   10d8c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
   10d8e:	7abb      	ldrb	r3, [r7, #10]
   10d90:	7af9      	ldrb	r1, [r7, #11]
   10d92:	2281      	movs	r2, #129	; 0x81
   10d94:	6878      	ldr	r0, [r7, #4]
   10d96:	4c0e      	ldr	r4, [pc, #56]	; (10dd0 <n25q256a_enable_xip+0x88>)
   10d98:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
   10d9a:	bf00      	nop
   10d9c:	7afb      	ldrb	r3, [r7, #11]
   10d9e:	2270      	movs	r2, #112	; 0x70
   10da0:	4619      	mov	r1, r3
   10da2:	6878      	ldr	r0, [r7, #4]
   10da4:	4b09      	ldr	r3, [pc, #36]	; (10dcc <n25q256a_enable_xip+0x84>)
   10da6:	4798      	blx	r3
   10da8:	4603      	mov	r3, r0
   10daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
   10dae:	2b00      	cmp	r3, #0
   10db0:	d0f4      	beq.n	10d9c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
   10db2:	68fb      	ldr	r3, [r7, #12]
   10db4:	2201      	movs	r2, #1
   10db6:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
   10db8:	2101      	movs	r1, #1
   10dba:	6878      	ldr	r0, [r7, #4]
   10dbc:	4b05      	ldr	r3, [pc, #20]	; (10dd4 <n25q256a_enable_xip+0x8c>)
   10dbe:	4798      	blx	r3
	}
	return ERR_NONE;
   10dc0:	2300      	movs	r3, #0
}
   10dc2:	4618      	mov	r0, r3
   10dc4:	3714      	adds	r7, #20
   10dc6:	46bd      	mov	sp, r7
   10dc8:	bd90      	pop	{r4, r7, pc}
   10dca:	bf00      	nop
   10dcc:	000106b5 	.word	0x000106b5
   10dd0:	00010751 	.word	0x00010751
   10dd4:	000105e9 	.word	0x000105e9

00010dd8 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
   10dd8:	b580      	push	{r7, lr}
   10dda:	b086      	sub	sp, #24
   10ddc:	af00      	add	r7, sp, #0
   10dde:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
   10de0:	687b      	ldr	r3, [r7, #4]
   10de2:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
   10de4:	687b      	ldr	r3, [r7, #4]
   10de6:	681b      	ldr	r3, [r3, #0]
   10de8:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
   10dea:	697b      	ldr	r3, [r7, #20]
   10dec:	7b1b      	ldrb	r3, [r3, #12]
   10dee:	2b00      	cmp	r3, #0
   10df0:	d001      	beq.n	10df6 <n25q256a_disable_xip+0x1e>
   10df2:	2306      	movs	r3, #6
   10df4:	e000      	b.n	10df8 <n25q256a_disable_xip+0x20>
   10df6:	2300      	movs	r3, #0
   10df8:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
   10dfa:	2100      	movs	r1, #0
   10dfc:	6878      	ldr	r0, [r7, #4]
   10dfe:	4b15      	ldr	r3, [pc, #84]	; (10e54 <n25q256a_disable_xip+0x7c>)
   10e00:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
   10e02:	7bfb      	ldrb	r3, [r7, #15]
   10e04:	2285      	movs	r2, #133	; 0x85
   10e06:	4619      	mov	r1, r3
   10e08:	6878      	ldr	r0, [r7, #4]
   10e0a:	4b13      	ldr	r3, [pc, #76]	; (10e58 <n25q256a_disable_xip+0x80>)
   10e0c:	4798      	blx	r3
   10e0e:	4603      	mov	r3, r0
   10e10:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
   10e12:	7bbb      	ldrb	r3, [r7, #14]
   10e14:	f003 0308 	and.w	r3, r3, #8
   10e18:	2b00      	cmp	r3, #0
   10e1a:	d113      	bne.n	10e44 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
   10e1c:	697b      	ldr	r3, [r7, #20]
   10e1e:	689b      	ldr	r3, [r3, #8]
   10e20:	2b00      	cmp	r3, #0
   10e22:	d00f      	beq.n	10e44 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
   10e24:	693b      	ldr	r3, [r7, #16]
   10e26:	681b      	ldr	r3, [r3, #0]
   10e28:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
   10e2a:	6938      	ldr	r0, [r7, #16]
   10e2c:	4b0b      	ldr	r3, [pc, #44]	; (10e5c <n25q256a_disable_xip+0x84>)
   10e2e:	4798      	blx	r3
			n25q->pin_exit_xip();
   10e30:	697b      	ldr	r3, [r7, #20]
   10e32:	689b      	ldr	r3, [r3, #8]
   10e34:	4798      	blx	r3

			qspi_sync_init(descr, hw);
   10e36:	68b9      	ldr	r1, [r7, #8]
   10e38:	6938      	ldr	r0, [r7, #16]
   10e3a:	4b09      	ldr	r3, [pc, #36]	; (10e60 <n25q256a_disable_xip+0x88>)
   10e3c:	4798      	blx	r3
			qspi_sync_enable(descr);
   10e3e:	6938      	ldr	r0, [r7, #16]
   10e40:	4b08      	ldr	r3, [pc, #32]	; (10e64 <n25q256a_disable_xip+0x8c>)
   10e42:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
   10e44:	697b      	ldr	r3, [r7, #20]
   10e46:	2200      	movs	r2, #0
   10e48:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
   10e4a:	2300      	movs	r3, #0
}
   10e4c:	4618      	mov	r0, r3
   10e4e:	3718      	adds	r7, #24
   10e50:	46bd      	mov	sp, r7
   10e52:	bd80      	pop	{r7, pc}
   10e54:	000105e9 	.word	0x000105e9
   10e58:	000106b5 	.word	0x000106b5
   10e5c:	00006881 	.word	0x00006881
   10e60:	000067f9 	.word	0x000067f9
   10e64:	00006845 	.word	0x00006845

00010e68 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
   10e68:	b480      	push	{r7}
   10e6a:	b085      	sub	sp, #20
   10e6c:	af00      	add	r7, sp, #0
   10e6e:	60f8      	str	r0, [r7, #12]
   10e70:	60b9      	str	r1, [r7, #8]
   10e72:	607a      	str	r2, [r7, #4]
	me->io        = io;
   10e74:	68fb      	ldr	r3, [r7, #12]
   10e76:	68ba      	ldr	r2, [r7, #8]
   10e78:	601a      	str	r2, [r3, #0]
	me->interface = interface;
   10e7a:	68fb      	ldr	r3, [r7, #12]
   10e7c:	687a      	ldr	r2, [r7, #4]
   10e7e:	605a      	str	r2, [r3, #4]

	return me;
   10e80:	68fb      	ldr	r3, [r7, #12]
}
   10e82:	4618      	mov	r0, r3
   10e84:	3714      	adds	r7, #20
   10e86:	46bd      	mov	sp, r7
   10e88:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e8c:	4770      	bx	lr

00010e8e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
   10e8e:	b480      	push	{r7}
   10e90:	b083      	sub	sp, #12
   10e92:	af00      	add	r7, sp, #0
   10e94:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   10e96:	687b      	ldr	r3, [r7, #4]
   10e98:	781b      	ldrb	r3, [r3, #0]
   10e9a:	b29a      	uxth	r2, r3
   10e9c:	687b      	ldr	r3, [r7, #4]
   10e9e:	3301      	adds	r3, #1
   10ea0:	781b      	ldrb	r3, [r3, #0]
   10ea2:	b29b      	uxth	r3, r3
   10ea4:	021b      	lsls	r3, r3, #8
   10ea6:	b29b      	uxth	r3, r3
   10ea8:	4413      	add	r3, r2
   10eaa:	b29b      	uxth	r3, r3
}
   10eac:	4618      	mov	r0, r3
   10eae:	370c      	adds	r7, #12
   10eb0:	46bd      	mov	sp, r7
   10eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
   10eb6:	4770      	bx	lr

00010eb8 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
   10eb8:	b480      	push	{r7}
   10eba:	b083      	sub	sp, #12
   10ebc:	af00      	add	r7, sp, #0
   10ebe:	6078      	str	r0, [r7, #4]
	return desc[0];
   10ec0:	687b      	ldr	r3, [r7, #4]
   10ec2:	781b      	ldrb	r3, [r3, #0]
}
   10ec4:	4618      	mov	r0, r3
   10ec6:	370c      	adds	r7, #12
   10ec8:	46bd      	mov	sp, r7
   10eca:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ece:	4770      	bx	lr

00010ed0 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
   10ed0:	b580      	push	{r7, lr}
   10ed2:	b082      	sub	sp, #8
   10ed4:	af00      	add	r7, sp, #0
   10ed6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   10ed8:	6878      	ldr	r0, [r7, #4]
   10eda:	4b05      	ldr	r3, [pc, #20]	; (10ef0 <usb_desc_next+0x20>)
   10edc:	4798      	blx	r3
   10ede:	4603      	mov	r3, r0
   10ee0:	461a      	mov	r2, r3
   10ee2:	687b      	ldr	r3, [r7, #4]
   10ee4:	4413      	add	r3, r2
}
   10ee6:	4618      	mov	r0, r3
   10ee8:	3708      	adds	r7, #8
   10eea:	46bd      	mov	sp, r7
   10eec:	bd80      	pop	{r7, pc}
   10eee:	bf00      	nop
   10ef0:	00010eb9 	.word	0x00010eb9

00010ef4 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   10ef4:	b580      	push	{r7, lr}
   10ef6:	b08c      	sub	sp, #48	; 0x30
   10ef8:	af00      	add	r7, sp, #0
   10efa:	6078      	str	r0, [r7, #4]
   10efc:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   10efe:	687b      	ldr	r3, [r7, #4]
   10f00:	689b      	ldr	r3, [r3, #8]
   10f02:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
   10f04:	683b      	ldr	r3, [r7, #0]
   10f06:	681b      	ldr	r3, [r3, #0]
   10f08:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   10f0a:	2300      	movs	r3, #0
   10f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   10f10:	e08f      	b.n	11032 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
   10f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f14:	2b00      	cmp	r3, #0
   10f16:	d102      	bne.n	10f1e <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
   10f18:	f06f 0309 	mvn.w	r3, #9
   10f1c:	e092      	b.n	11044 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
   10f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f20:	789b      	ldrb	r3, [r3, #2]
   10f22:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
   10f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f26:	795b      	ldrb	r3, [r3, #5]
   10f28:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
   10f2a:	7c7b      	ldrb	r3, [r7, #17]
   10f2c:	2b02      	cmp	r3, #2
   10f2e:	d002      	beq.n	10f36 <cdcdf_acm_enable+0x42>
   10f30:	7c7b      	ldrb	r3, [r7, #17]
   10f32:	2b0a      	cmp	r3, #10
   10f34:	d121      	bne.n	10f7a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   10f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10f3a:	6a3a      	ldr	r2, [r7, #32]
   10f3c:	5cd2      	ldrb	r2, [r2, r3]
   10f3e:	7bbb      	ldrb	r3, [r7, #14]
   10f40:	429a      	cmp	r2, r3
   10f42:	d102      	bne.n	10f4a <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
   10f44:	f06f 0311 	mvn.w	r3, #17
   10f48:	e07c      	b.n	11044 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
   10f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10f4e:	6a3a      	ldr	r2, [r7, #32]
   10f50:	5cd3      	ldrb	r3, [r2, r3]
   10f52:	2bff      	cmp	r3, #255	; 0xff
   10f54:	d002      	beq.n	10f5c <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
   10f56:	f06f 031b 	mvn.w	r3, #27
   10f5a:	e073      	b.n	11044 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
   10f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10f60:	7bb9      	ldrb	r1, [r7, #14]
   10f62:	6a3a      	ldr	r2, [r7, #32]
   10f64:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
   10f66:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
   10f68:	683b      	ldr	r3, [r7, #0]
   10f6a:	685b      	ldr	r3, [r3, #4]
   10f6c:	2205      	movs	r2, #5
   10f6e:	4619      	mov	r1, r3
   10f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   10f72:	4b36      	ldr	r3, [pc, #216]	; (1104c <cdcdf_acm_enable+0x158>)
   10f74:	4798      	blx	r3
   10f76:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   10f78:	e047      	b.n	1100a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
   10f7a:	f06f 0309 	mvn.w	r3, #9
   10f7e:	e061      	b.n	11044 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
   10f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10f82:	789b      	ldrb	r3, [r3, #2]
   10f84:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
   10f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10f88:	78db      	ldrb	r3, [r3, #3]
   10f8a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
   10f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10f8e:	3304      	adds	r3, #4
   10f90:	4618      	mov	r0, r3
   10f92:	4b2f      	ldr	r3, [pc, #188]	; (11050 <cdcdf_acm_enable+0x15c>)
   10f94:	4798      	blx	r3
   10f96:	4603      	mov	r3, r0
   10f98:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
   10f9a:	7ebb      	ldrb	r3, [r7, #26]
   10f9c:	7ef9      	ldrb	r1, [r7, #27]
   10f9e:	8bba      	ldrh	r2, [r7, #28]
   10fa0:	4618      	mov	r0, r3
   10fa2:	4b2c      	ldr	r3, [pc, #176]	; (11054 <cdcdf_acm_enable+0x160>)
   10fa4:	4798      	blx	r3
   10fa6:	4603      	mov	r3, r0
   10fa8:	2b00      	cmp	r3, #0
   10faa:	d002      	beq.n	10fb2 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
   10fac:	f06f 0313 	mvn.w	r3, #19
   10fb0:	e048      	b.n	11044 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
   10fb2:	7ebb      	ldrb	r3, [r7, #26]
   10fb4:	b25b      	sxtb	r3, r3
   10fb6:	2b00      	cmp	r3, #0
   10fb8:	da0f      	bge.n	10fda <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
   10fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10fbe:	7eb9      	ldrb	r1, [r7, #26]
   10fc0:	6a3a      	ldr	r2, [r7, #32]
   10fc2:	4413      	add	r3, r2
   10fc4:	460a      	mov	r2, r1
   10fc6:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
   10fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   10fcc:	6a3a      	ldr	r2, [r7, #32]
   10fce:	4413      	add	r3, r2
   10fd0:	789b      	ldrb	r3, [r3, #2]
   10fd2:	4618      	mov	r0, r3
   10fd4:	4b20      	ldr	r3, [pc, #128]	; (11058 <cdcdf_acm_enable+0x164>)
   10fd6:	4798      	blx	r3
   10fd8:	e007      	b.n	10fea <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
   10fda:	7eba      	ldrb	r2, [r7, #26]
   10fdc:	6a3b      	ldr	r3, [r7, #32]
   10fde:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
   10fe0:	6a3b      	ldr	r3, [r7, #32]
   10fe2:	791b      	ldrb	r3, [r3, #4]
   10fe4:	4618      	mov	r0, r3
   10fe6:	4b1c      	ldr	r3, [pc, #112]	; (11058 <cdcdf_acm_enable+0x164>)
   10fe8:	4798      	blx	r3
			}
			desc->sod = ep;
   10fea:	683b      	ldr	r3, [r7, #0]
   10fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10fee:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
   10ff0:	683b      	ldr	r3, [r7, #0]
   10ff2:	681b      	ldr	r3, [r3, #0]
   10ff4:	4618      	mov	r0, r3
   10ff6:	4b19      	ldr	r3, [pc, #100]	; (1105c <cdcdf_acm_enable+0x168>)
   10ff8:	4798      	blx	r3
   10ffa:	4602      	mov	r2, r0
   10ffc:	683b      	ldr	r3, [r7, #0]
   10ffe:	685b      	ldr	r3, [r3, #4]
   11000:	4619      	mov	r1, r3
   11002:	4610      	mov	r0, r2
   11004:	4b16      	ldr	r3, [pc, #88]	; (11060 <cdcdf_acm_enable+0x16c>)
   11006:	4798      	blx	r3
   11008:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
   1100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1100c:	2b00      	cmp	r3, #0
   1100e:	d1b7      	bne.n	10f80 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
   11010:	683b      	ldr	r3, [r7, #0]
   11012:	681b      	ldr	r3, [r3, #0]
   11014:	4618      	mov	r0, r3
   11016:	4b11      	ldr	r3, [pc, #68]	; (1105c <cdcdf_acm_enable+0x168>)
   11018:	4798      	blx	r3
   1101a:	683b      	ldr	r3, [r7, #0]
   1101c:	685b      	ldr	r3, [r3, #4]
   1101e:	2204      	movs	r2, #4
   11020:	4619      	mov	r1, r3
   11022:	4b0a      	ldr	r3, [pc, #40]	; (1104c <cdcdf_acm_enable+0x158>)
   11024:	4798      	blx	r3
   11026:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
   11028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1102c:	3301      	adds	r3, #1
   1102e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   11032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11036:	2b01      	cmp	r3, #1
   11038:	f67f af6b 	bls.w	10f12 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
   1103c:	4b09      	ldr	r3, [pc, #36]	; (11064 <cdcdf_acm_enable+0x170>)
   1103e:	2201      	movs	r2, #1
   11040:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   11042:	2300      	movs	r3, #0
}
   11044:	4618      	mov	r0, r3
   11046:	3730      	adds	r7, #48	; 0x30
   11048:	46bd      	mov	sp, r7
   1104a:	bd80      	pop	{r7, pc}
   1104c:	000122b5 	.word	0x000122b5
   11050:	00010e8f 	.word	0x00010e8f
   11054:	00007531 	.word	0x00007531
   11058:	0000761d 	.word	0x0000761d
   1105c:	00010ed1 	.word	0x00010ed1
   11060:	00012311 	.word	0x00012311
   11064:	20008d08 	.word	0x20008d08

00011068 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
   11068:	b580      	push	{r7, lr}
   1106a:	b088      	sub	sp, #32
   1106c:	af00      	add	r7, sp, #0
   1106e:	6078      	str	r0, [r7, #4]
   11070:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
   11072:	687b      	ldr	r3, [r7, #4]
   11074:	689b      	ldr	r3, [r3, #8]
   11076:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
   11078:	683b      	ldr	r3, [r7, #0]
   1107a:	2b00      	cmp	r3, #0
   1107c:	d00c      	beq.n	11098 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
   1107e:	683b      	ldr	r3, [r7, #0]
   11080:	681b      	ldr	r3, [r3, #0]
   11082:	795b      	ldrb	r3, [r3, #5]
   11084:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
   11086:	7c7b      	ldrb	r3, [r7, #17]
   11088:	2b02      	cmp	r3, #2
   1108a:	d005      	beq.n	11098 <cdcdf_acm_disable+0x30>
   1108c:	7c7b      	ldrb	r3, [r7, #17]
   1108e:	2b0a      	cmp	r3, #10
   11090:	d002      	beq.n	11098 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
   11092:	f06f 0309 	mvn.w	r3, #9
   11096:	e035      	b.n	11104 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
   11098:	2300      	movs	r3, #0
   1109a:	77fb      	strb	r3, [r7, #31]
   1109c:	e01f      	b.n	110de <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
   1109e:	7ffb      	ldrb	r3, [r7, #31]
   110a0:	69ba      	ldr	r2, [r7, #24]
   110a2:	5cd3      	ldrb	r3, [r2, r3]
   110a4:	2bff      	cmp	r3, #255	; 0xff
   110a6:	d016      	beq.n	110d6 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
   110a8:	7ffb      	ldrb	r3, [r7, #31]
   110aa:	69ba      	ldr	r2, [r7, #24]
   110ac:	21ff      	movs	r1, #255	; 0xff
   110ae:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
   110b0:	7ffb      	ldrb	r3, [r7, #31]
   110b2:	69ba      	ldr	r2, [r7, #24]
   110b4:	4413      	add	r3, r2
   110b6:	789b      	ldrb	r3, [r3, #2]
   110b8:	2bff      	cmp	r3, #255	; 0xff
   110ba:	d00d      	beq.n	110d8 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
   110bc:	7ffb      	ldrb	r3, [r7, #31]
   110be:	69ba      	ldr	r2, [r7, #24]
   110c0:	4413      	add	r3, r2
   110c2:	789b      	ldrb	r3, [r3, #2]
   110c4:	4618      	mov	r0, r3
   110c6:	4b11      	ldr	r3, [pc, #68]	; (1110c <cdcdf_acm_disable+0xa4>)
   110c8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
   110ca:	7ffb      	ldrb	r3, [r7, #31]
   110cc:	69ba      	ldr	r2, [r7, #24]
   110ce:	4413      	add	r3, r2
   110d0:	22ff      	movs	r2, #255	; 0xff
   110d2:	709a      	strb	r2, [r3, #2]
   110d4:	e000      	b.n	110d8 <cdcdf_acm_disable+0x70>
			continue;
   110d6:	bf00      	nop
	for (i = 0; i < 2; i++) {
   110d8:	7ffb      	ldrb	r3, [r7, #31]
   110da:	3301      	adds	r3, #1
   110dc:	77fb      	strb	r3, [r7, #31]
   110de:	7ffb      	ldrb	r3, [r7, #31]
   110e0:	2b01      	cmp	r3, #1
   110e2:	d9dc      	bls.n	1109e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
   110e4:	69bb      	ldr	r3, [r7, #24]
   110e6:	791b      	ldrb	r3, [r3, #4]
   110e8:	2bff      	cmp	r3, #255	; 0xff
   110ea:	d007      	beq.n	110fc <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
   110ec:	69bb      	ldr	r3, [r7, #24]
   110ee:	791b      	ldrb	r3, [r3, #4]
   110f0:	4618      	mov	r0, r3
   110f2:	4b06      	ldr	r3, [pc, #24]	; (1110c <cdcdf_acm_disable+0xa4>)
   110f4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
   110f6:	69bb      	ldr	r3, [r7, #24]
   110f8:	22ff      	movs	r2, #255	; 0xff
   110fa:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
   110fc:	4b04      	ldr	r3, [pc, #16]	; (11110 <cdcdf_acm_disable+0xa8>)
   110fe:	2200      	movs	r2, #0
   11100:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
   11102:	2300      	movs	r3, #0
}
   11104:	4618      	mov	r0, r3
   11106:	3720      	adds	r7, #32
   11108:	46bd      	mov	sp, r7
   1110a:	bd80      	pop	{r7, pc}
   1110c:	000075cd 	.word	0x000075cd
   11110:	20008d08 	.word	0x20008d08

00011114 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
   11114:	b580      	push	{r7, lr}
   11116:	b084      	sub	sp, #16
   11118:	af00      	add	r7, sp, #0
   1111a:	60f8      	str	r0, [r7, #12]
   1111c:	460b      	mov	r3, r1
   1111e:	607a      	str	r2, [r7, #4]
   11120:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
   11122:	7afb      	ldrb	r3, [r7, #11]
   11124:	2b01      	cmp	r3, #1
   11126:	d009      	beq.n	1113c <cdcdf_acm_ctrl+0x28>
   11128:	2b02      	cmp	r3, #2
   1112a:	d00d      	beq.n	11148 <cdcdf_acm_ctrl+0x34>
   1112c:	2b00      	cmp	r3, #0
   1112e:	d10e      	bne.n	1114e <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
   11130:	6879      	ldr	r1, [r7, #4]
   11132:	68f8      	ldr	r0, [r7, #12]
   11134:	4b09      	ldr	r3, [pc, #36]	; (1115c <cdcdf_acm_ctrl+0x48>)
   11136:	4798      	blx	r3
   11138:	4603      	mov	r3, r0
   1113a:	e00a      	b.n	11152 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
   1113c:	6879      	ldr	r1, [r7, #4]
   1113e:	68f8      	ldr	r0, [r7, #12]
   11140:	4b07      	ldr	r3, [pc, #28]	; (11160 <cdcdf_acm_ctrl+0x4c>)
   11142:	4798      	blx	r3
   11144:	4603      	mov	r3, r0
   11146:	e004      	b.n	11152 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
   11148:	f06f 031a 	mvn.w	r3, #26
   1114c:	e001      	b.n	11152 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
   1114e:	f06f 030c 	mvn.w	r3, #12
	}
}
   11152:	4618      	mov	r0, r3
   11154:	3710      	adds	r7, #16
   11156:	46bd      	mov	sp, r7
   11158:	bd80      	pop	{r7, pc}
   1115a:	bf00      	nop
   1115c:	00010ef5 	.word	0x00010ef5
   11160:	00011069 	.word	0x00011069

00011164 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11164:	b590      	push	{r4, r7, lr}
   11166:	b087      	sub	sp, #28
   11168:	af00      	add	r7, sp, #0
   1116a:	4603      	mov	r3, r0
   1116c:	6039      	str	r1, [r7, #0]
   1116e:	71fb      	strb	r3, [r7, #7]
   11170:	4613      	mov	r3, r2
   11172:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
   11174:	683b      	ldr	r3, [r7, #0]
   11176:	799a      	ldrb	r2, [r3, #6]
   11178:	79db      	ldrb	r3, [r3, #7]
   1117a:	021b      	lsls	r3, r3, #8
   1117c:	4313      	orrs	r3, r2
   1117e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
   11180:	4b2b      	ldr	r3, [pc, #172]	; (11230 <cdcdf_acm_set_req+0xcc>)
   11182:	4798      	blx	r3
   11184:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
   11186:	683b      	ldr	r3, [r7, #0]
   11188:	785b      	ldrb	r3, [r3, #1]
   1118a:	2b20      	cmp	r3, #32
   1118c:	d002      	beq.n	11194 <cdcdf_acm_set_req+0x30>
   1118e:	2b22      	cmp	r3, #34	; 0x22
   11190:	d034      	beq.n	111fc <cdcdf_acm_set_req+0x98>
   11192:	e046      	b.n	11222 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   11194:	8afb      	ldrh	r3, [r7, #22]
   11196:	2b07      	cmp	r3, #7
   11198:	d002      	beq.n	111a0 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
   1119a:	f04f 33ff 	mov.w	r3, #4294967295
   1119e:	e042      	b.n	11226 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
   111a0:	79bb      	ldrb	r3, [r7, #6]
   111a2:	2b00      	cmp	r3, #0
   111a4:	d107      	bne.n	111b6 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
   111a6:	8afa      	ldrh	r2, [r7, #22]
   111a8:	79f8      	ldrb	r0, [r7, #7]
   111aa:	2300      	movs	r3, #0
   111ac:	6939      	ldr	r1, [r7, #16]
   111ae:	4c21      	ldr	r4, [pc, #132]	; (11234 <cdcdf_acm_set_req+0xd0>)
   111b0:	47a0      	blx	r4
   111b2:	4603      	mov	r3, r0
   111b4:	e037      	b.n	11226 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
   111b6:	693a      	ldr	r2, [r7, #16]
   111b8:	f107 0308 	add.w	r3, r7, #8
   111bc:	6810      	ldr	r0, [r2, #0]
   111be:	6018      	str	r0, [r3, #0]
   111c0:	8891      	ldrh	r1, [r2, #4]
   111c2:	7992      	ldrb	r2, [r2, #6]
   111c4:	8099      	strh	r1, [r3, #4]
   111c6:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
   111c8:	4b1b      	ldr	r3, [pc, #108]	; (11238 <cdcdf_acm_set_req+0xd4>)
   111ca:	681b      	ldr	r3, [r3, #0]
   111cc:	2b00      	cmp	r3, #0
   111ce:	d008      	beq.n	111e2 <cdcdf_acm_set_req+0x7e>
   111d0:	4b19      	ldr	r3, [pc, #100]	; (11238 <cdcdf_acm_set_req+0xd4>)
   111d2:	681b      	ldr	r3, [r3, #0]
   111d4:	f107 0208 	add.w	r2, r7, #8
   111d8:	4610      	mov	r0, r2
   111da:	4798      	blx	r3
   111dc:	4603      	mov	r3, r0
   111de:	2b00      	cmp	r3, #0
   111e0:	d00a      	beq.n	111f8 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
   111e2:	4b16      	ldr	r3, [pc, #88]	; (1123c <cdcdf_acm_set_req+0xd8>)
   111e4:	f107 0208 	add.w	r2, r7, #8
   111e8:	e892 0003 	ldmia.w	r2, {r0, r1}
   111ec:	6018      	str	r0, [r3, #0]
   111ee:	3304      	adds	r3, #4
   111f0:	8019      	strh	r1, [r3, #0]
   111f2:	3302      	adds	r3, #2
   111f4:	0c0a      	lsrs	r2, r1, #16
   111f6:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
   111f8:	2300      	movs	r3, #0
   111fa:	e014      	b.n	11226 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
   111fc:	2300      	movs	r3, #0
   111fe:	2200      	movs	r2, #0
   11200:	2100      	movs	r1, #0
   11202:	2000      	movs	r0, #0
   11204:	4c0b      	ldr	r4, [pc, #44]	; (11234 <cdcdf_acm_set_req+0xd0>)
   11206:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
   11208:	4b0d      	ldr	r3, [pc, #52]	; (11240 <cdcdf_acm_set_req+0xdc>)
   1120a:	681b      	ldr	r3, [r3, #0]
   1120c:	2b00      	cmp	r3, #0
   1120e:	d006      	beq.n	1121e <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
   11210:	4b0b      	ldr	r3, [pc, #44]	; (11240 <cdcdf_acm_set_req+0xdc>)
   11212:	681b      	ldr	r3, [r3, #0]
   11214:	683a      	ldr	r2, [r7, #0]
   11216:	8852      	ldrh	r2, [r2, #2]
   11218:	b292      	uxth	r2, r2
   1121a:	4610      	mov	r0, r2
   1121c:	4798      	blx	r3
		}
		return ERR_NONE;
   1121e:	2300      	movs	r3, #0
   11220:	e001      	b.n	11226 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
   11222:	f06f 030c 	mvn.w	r3, #12
	}
}
   11226:	4618      	mov	r0, r3
   11228:	371c      	adds	r7, #28
   1122a:	46bd      	mov	sp, r7
   1122c:	bd90      	pop	{r4, r7, pc}
   1122e:	bf00      	nop
   11230:	000121b1 	.word	0x000121b1
   11234:	00012025 	.word	0x00012025
   11238:	20008d1c 	.word	0x20008d1c
   1123c:	20008d10 	.word	0x20008d10
   11240:	20008d18 	.word	0x20008d18

00011244 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11244:	b590      	push	{r4, r7, lr}
   11246:	b085      	sub	sp, #20
   11248:	af00      	add	r7, sp, #0
   1124a:	4603      	mov	r3, r0
   1124c:	6039      	str	r1, [r7, #0]
   1124e:	71fb      	strb	r3, [r7, #7]
   11250:	4613      	mov	r3, r2
   11252:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
   11254:	683b      	ldr	r3, [r7, #0]
   11256:	799a      	ldrb	r2, [r3, #6]
   11258:	79db      	ldrb	r3, [r3, #7]
   1125a:	021b      	lsls	r3, r3, #8
   1125c:	4313      	orrs	r3, r2
   1125e:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
   11260:	79bb      	ldrb	r3, [r7, #6]
   11262:	2b01      	cmp	r3, #1
   11264:	d101      	bne.n	1126a <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
   11266:	2300      	movs	r3, #0
   11268:	e013      	b.n	11292 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
   1126a:	683b      	ldr	r3, [r7, #0]
   1126c:	785b      	ldrb	r3, [r3, #1]
   1126e:	2b21      	cmp	r3, #33	; 0x21
   11270:	d10d      	bne.n	1128e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
   11272:	89fb      	ldrh	r3, [r7, #14]
   11274:	2b07      	cmp	r3, #7
   11276:	d002      	beq.n	1127e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
   11278:	f04f 33ff 	mov.w	r3, #4294967295
   1127c:	e009      	b.n	11292 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
   1127e:	89fa      	ldrh	r2, [r7, #14]
   11280:	79f8      	ldrb	r0, [r7, #7]
   11282:	2300      	movs	r3, #0
   11284:	4905      	ldr	r1, [pc, #20]	; (1129c <cdcdf_acm_get_req+0x58>)
   11286:	4c06      	ldr	r4, [pc, #24]	; (112a0 <cdcdf_acm_get_req+0x5c>)
   11288:	47a0      	blx	r4
   1128a:	4603      	mov	r3, r0
   1128c:	e001      	b.n	11292 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
   1128e:	f06f 030c 	mvn.w	r3, #12
	}
}
   11292:	4618      	mov	r0, r3
   11294:	3714      	adds	r7, #20
   11296:	46bd      	mov	sp, r7
   11298:	bd90      	pop	{r4, r7, pc}
   1129a:	bf00      	nop
   1129c:	20008d10 	.word	0x20008d10
   112a0:	00012025 	.word	0x00012025

000112a4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   112a4:	b580      	push	{r7, lr}
   112a6:	b082      	sub	sp, #8
   112a8:	af00      	add	r7, sp, #0
   112aa:	4603      	mov	r3, r0
   112ac:	6039      	str	r1, [r7, #0]
   112ae:	71fb      	strb	r3, [r7, #7]
   112b0:	4613      	mov	r3, r2
   112b2:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
   112b4:	683b      	ldr	r3, [r7, #0]
   112b6:	781b      	ldrb	r3, [r3, #0]
   112b8:	095b      	lsrs	r3, r3, #5
   112ba:	b2db      	uxtb	r3, r3
   112bc:	f003 0303 	and.w	r3, r3, #3
   112c0:	2b01      	cmp	r3, #1
   112c2:	d002      	beq.n	112ca <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
   112c4:	f06f 0309 	mvn.w	r3, #9
   112c8:	e026      	b.n	11318 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
   112ca:	683b      	ldr	r3, [r7, #0]
   112cc:	889b      	ldrh	r3, [r3, #4]
   112ce:	b29a      	uxth	r2, r3
   112d0:	4b13      	ldr	r3, [pc, #76]	; (11320 <cdcdf_acm_req+0x7c>)
   112d2:	781b      	ldrb	r3, [r3, #0]
   112d4:	b29b      	uxth	r3, r3
   112d6:	429a      	cmp	r2, r3
   112d8:	d007      	beq.n	112ea <cdcdf_acm_req+0x46>
   112da:	683b      	ldr	r3, [r7, #0]
   112dc:	889b      	ldrh	r3, [r3, #4]
   112de:	b29a      	uxth	r2, r3
   112e0:	4b0f      	ldr	r3, [pc, #60]	; (11320 <cdcdf_acm_req+0x7c>)
   112e2:	785b      	ldrb	r3, [r3, #1]
   112e4:	b29b      	uxth	r3, r3
   112e6:	429a      	cmp	r2, r3
   112e8:	d114      	bne.n	11314 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
   112ea:	683b      	ldr	r3, [r7, #0]
   112ec:	781b      	ldrb	r3, [r3, #0]
   112ee:	b25b      	sxtb	r3, r3
   112f0:	2b00      	cmp	r3, #0
   112f2:	da07      	bge.n	11304 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
   112f4:	79ba      	ldrb	r2, [r7, #6]
   112f6:	79fb      	ldrb	r3, [r7, #7]
   112f8:	6839      	ldr	r1, [r7, #0]
   112fa:	4618      	mov	r0, r3
   112fc:	4b09      	ldr	r3, [pc, #36]	; (11324 <cdcdf_acm_req+0x80>)
   112fe:	4798      	blx	r3
   11300:	4603      	mov	r3, r0
   11302:	e009      	b.n	11318 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
   11304:	79ba      	ldrb	r2, [r7, #6]
   11306:	79fb      	ldrb	r3, [r7, #7]
   11308:	6839      	ldr	r1, [r7, #0]
   1130a:	4618      	mov	r0, r3
   1130c:	4b06      	ldr	r3, [pc, #24]	; (11328 <cdcdf_acm_req+0x84>)
   1130e:	4798      	blx	r3
   11310:	4603      	mov	r3, r0
   11312:	e001      	b.n	11318 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
   11314:	f06f 0309 	mvn.w	r3, #9
	}
}
   11318:	4618      	mov	r0, r3
   1131a:	3708      	adds	r7, #8
   1131c:	46bd      	mov	sp, r7
   1131e:	bd80      	pop	{r7, pc}
   11320:	20008d08 	.word	0x20008d08
   11324:	00011245 	.word	0x00011245
   11328:	00011165 	.word	0x00011165

0001132c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
   1132c:	b580      	push	{r7, lr}
   1132e:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
   11330:	4b0b      	ldr	r3, [pc, #44]	; (11360 <cdcdf_acm_init+0x34>)
   11332:	4798      	blx	r3
   11334:	4603      	mov	r3, r0
   11336:	2b01      	cmp	r3, #1
   11338:	d902      	bls.n	11340 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
   1133a:	f06f 0310 	mvn.w	r3, #16
   1133e:	e00d      	b.n	1135c <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
   11340:	4b08      	ldr	r3, [pc, #32]	; (11364 <cdcdf_acm_init+0x38>)
   11342:	4a09      	ldr	r2, [pc, #36]	; (11368 <cdcdf_acm_init+0x3c>)
   11344:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
   11346:	4b07      	ldr	r3, [pc, #28]	; (11364 <cdcdf_acm_init+0x38>)
   11348:	4a08      	ldr	r2, [pc, #32]	; (1136c <cdcdf_acm_init+0x40>)
   1134a:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
   1134c:	4805      	ldr	r0, [pc, #20]	; (11364 <cdcdf_acm_init+0x38>)
   1134e:	4b08      	ldr	r3, [pc, #32]	; (11370 <cdcdf_acm_init+0x44>)
   11350:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
   11352:	4908      	ldr	r1, [pc, #32]	; (11374 <cdcdf_acm_init+0x48>)
   11354:	2001      	movs	r0, #1
   11356:	4b08      	ldr	r3, [pc, #32]	; (11378 <cdcdf_acm_init+0x4c>)
   11358:	4798      	blx	r3
	return ERR_NONE;
   1135a:	2300      	movs	r3, #0
}
   1135c:	4618      	mov	r0, r3
   1135e:	bd80      	pop	{r7, pc}
   11360:	000121c9 	.word	0x000121c9
   11364:	20008cfc 	.word	0x20008cfc
   11368:	00011115 	.word	0x00011115
   1136c:	20008d08 	.word	0x20008d08
   11370:	00012131 	.word	0x00012131
   11374:	2000023c 	.word	0x2000023c
   11378:	00012061 	.word	0x00012061

0001137c <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
   1137c:	b590      	push	{r4, r7, lr}
   1137e:	b083      	sub	sp, #12
   11380:	af00      	add	r7, sp, #0
   11382:	6078      	str	r0, [r7, #4]
   11384:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   11386:	4b0b      	ldr	r3, [pc, #44]	; (113b4 <cdcdf_acm_read+0x38>)
   11388:	4798      	blx	r3
   1138a:	4603      	mov	r3, r0
   1138c:	f083 0301 	eor.w	r3, r3, #1
   11390:	b2db      	uxtb	r3, r3
   11392:	2b00      	cmp	r3, #0
   11394:	d002      	beq.n	1139c <cdcdf_acm_read+0x20>
		return ERR_DENIED;
   11396:	f06f 0310 	mvn.w	r3, #16
   1139a:	e007      	b.n	113ac <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
   1139c:	4b06      	ldr	r3, [pc, #24]	; (113b8 <cdcdf_acm_read+0x3c>)
   1139e:	7918      	ldrb	r0, [r3, #4]
   113a0:	2300      	movs	r3, #0
   113a2:	683a      	ldr	r2, [r7, #0]
   113a4:	6879      	ldr	r1, [r7, #4]
   113a6:	4c05      	ldr	r4, [pc, #20]	; (113bc <cdcdf_acm_read+0x40>)
   113a8:	47a0      	blx	r4
   113aa:	4603      	mov	r3, r0
}
   113ac:	4618      	mov	r0, r3
   113ae:	370c      	adds	r7, #12
   113b0:	46bd      	mov	sp, r7
   113b2:	bd90      	pop	{r4, r7, pc}
   113b4:	000114a1 	.word	0x000114a1
   113b8:	20008d08 	.word	0x20008d08
   113bc:	00012025 	.word	0x00012025

000113c0 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
   113c0:	b590      	push	{r4, r7, lr}
   113c2:	b083      	sub	sp, #12
   113c4:	af00      	add	r7, sp, #0
   113c6:	6078      	str	r0, [r7, #4]
   113c8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
   113ca:	4b0b      	ldr	r3, [pc, #44]	; (113f8 <cdcdf_acm_write+0x38>)
   113cc:	4798      	blx	r3
   113ce:	4603      	mov	r3, r0
   113d0:	f083 0301 	eor.w	r3, r3, #1
   113d4:	b2db      	uxtb	r3, r3
   113d6:	2b00      	cmp	r3, #0
   113d8:	d002      	beq.n	113e0 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
   113da:	f06f 0310 	mvn.w	r3, #16
   113de:	e007      	b.n	113f0 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
   113e0:	4b06      	ldr	r3, [pc, #24]	; (113fc <cdcdf_acm_write+0x3c>)
   113e2:	78d8      	ldrb	r0, [r3, #3]
   113e4:	2301      	movs	r3, #1
   113e6:	683a      	ldr	r2, [r7, #0]
   113e8:	6879      	ldr	r1, [r7, #4]
   113ea:	4c05      	ldr	r4, [pc, #20]	; (11400 <cdcdf_acm_write+0x40>)
   113ec:	47a0      	blx	r4
   113ee:	4603      	mov	r3, r0
}
   113f0:	4618      	mov	r0, r3
   113f2:	370c      	adds	r7, #12
   113f4:	46bd      	mov	sp, r7
   113f6:	bd90      	pop	{r4, r7, pc}
   113f8:	000114a1 	.word	0x000114a1
   113fc:	20008d08 	.word	0x20008d08
   11400:	00012025 	.word	0x00012025

00011404 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
   11404:	b580      	push	{r7, lr}
   11406:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
   11408:	4b05      	ldr	r3, [pc, #20]	; (11420 <cdcdf_acm_stop_xfer+0x1c>)
   1140a:	78db      	ldrb	r3, [r3, #3]
   1140c:	4618      	mov	r0, r3
   1140e:	4b05      	ldr	r3, [pc, #20]	; (11424 <cdcdf_acm_stop_xfer+0x20>)
   11410:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
   11412:	4b03      	ldr	r3, [pc, #12]	; (11420 <cdcdf_acm_stop_xfer+0x1c>)
   11414:	791b      	ldrb	r3, [r3, #4]
   11416:	4618      	mov	r0, r3
   11418:	4b02      	ldr	r3, [pc, #8]	; (11424 <cdcdf_acm_stop_xfer+0x20>)
   1141a:	4798      	blx	r3
}
   1141c:	bf00      	nop
   1141e:	bd80      	pop	{r7, pc}
   11420:	20008d08 	.word	0x20008d08
   11424:	000077f5 	.word	0x000077f5

00011428 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
   11428:	b580      	push	{r7, lr}
   1142a:	b082      	sub	sp, #8
   1142c:	af00      	add	r7, sp, #0
   1142e:	4603      	mov	r3, r0
   11430:	6039      	str	r1, [r7, #0]
   11432:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
   11434:	79fb      	ldrb	r3, [r7, #7]
   11436:	2b03      	cmp	r3, #3
   11438:	d822      	bhi.n	11480 <cdcdf_acm_register_callback+0x58>
   1143a:	a201      	add	r2, pc, #4	; (adr r2, 11440 <cdcdf_acm_register_callback+0x18>)
   1143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11440:	00011451 	.word	0x00011451
   11444:	00011461 	.word	0x00011461
   11448:	00011471 	.word	0x00011471
   1144c:	00011479 	.word	0x00011479
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
   11450:	4b0f      	ldr	r3, [pc, #60]	; (11490 <cdcdf_acm_register_callback+0x68>)
   11452:	791b      	ldrb	r3, [r3, #4]
   11454:	683a      	ldr	r2, [r7, #0]
   11456:	2102      	movs	r1, #2
   11458:	4618      	mov	r0, r3
   1145a:	4b0e      	ldr	r3, [pc, #56]	; (11494 <cdcdf_acm_register_callback+0x6c>)
   1145c:	4798      	blx	r3
		break;
   1145e:	e012      	b.n	11486 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
   11460:	4b0b      	ldr	r3, [pc, #44]	; (11490 <cdcdf_acm_register_callback+0x68>)
   11462:	78db      	ldrb	r3, [r3, #3]
   11464:	683a      	ldr	r2, [r7, #0]
   11466:	2102      	movs	r1, #2
   11468:	4618      	mov	r0, r3
   1146a:	4b0a      	ldr	r3, [pc, #40]	; (11494 <cdcdf_acm_register_callback+0x6c>)
   1146c:	4798      	blx	r3
		break;
   1146e:	e00a      	b.n	11486 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
   11470:	4a09      	ldr	r2, [pc, #36]	; (11498 <cdcdf_acm_register_callback+0x70>)
   11472:	683b      	ldr	r3, [r7, #0]
   11474:	6013      	str	r3, [r2, #0]
		break;
   11476:	e006      	b.n	11486 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
   11478:	4a08      	ldr	r2, [pc, #32]	; (1149c <cdcdf_acm_register_callback+0x74>)
   1147a:	683b      	ldr	r3, [r7, #0]
   1147c:	6013      	str	r3, [r2, #0]
		break;
   1147e:	e002      	b.n	11486 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
   11480:	f06f 030c 	mvn.w	r3, #12
   11484:	e000      	b.n	11488 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
   11486:	2300      	movs	r3, #0
}
   11488:	4618      	mov	r0, r3
   1148a:	3708      	adds	r7, #8
   1148c:	46bd      	mov	sp, r7
   1148e:	bd80      	pop	{r7, pc}
   11490:	20008d08 	.word	0x20008d08
   11494:	00007921 	.word	0x00007921
   11498:	20008d1c 	.word	0x20008d1c
   1149c:	20008d18 	.word	0x20008d18

000114a0 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
   114a0:	b480      	push	{r7}
   114a2:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
   114a4:	4b03      	ldr	r3, [pc, #12]	; (114b4 <cdcdf_acm_is_enabled+0x14>)
   114a6:	795b      	ldrb	r3, [r3, #5]
}
   114a8:	4618      	mov	r0, r3
   114aa:	46bd      	mov	sp, r7
   114ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   114b0:	4770      	bx	lr
   114b2:	bf00      	nop
   114b4:	20008d08 	.word	0x20008d08

000114b8 <usb_get_u16>:
{
   114b8:	b480      	push	{r7}
   114ba:	b083      	sub	sp, #12
   114bc:	af00      	add	r7, sp, #0
   114be:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   114c0:	687b      	ldr	r3, [r7, #4]
   114c2:	781b      	ldrb	r3, [r3, #0]
   114c4:	b29a      	uxth	r2, r3
   114c6:	687b      	ldr	r3, [r7, #4]
   114c8:	3301      	adds	r3, #1
   114ca:	781b      	ldrb	r3, [r3, #0]
   114cc:	b29b      	uxth	r3, r3
   114ce:	021b      	lsls	r3, r3, #8
   114d0:	b29b      	uxth	r3, r3
   114d2:	4413      	add	r3, r2
   114d4:	b29b      	uxth	r3, r3
}
   114d6:	4618      	mov	r0, r3
   114d8:	370c      	adds	r7, #12
   114da:	46bd      	mov	sp, r7
   114dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   114e0:	4770      	bx	lr

000114e2 <usb_desc_len>:
{
   114e2:	b480      	push	{r7}
   114e4:	b083      	sub	sp, #12
   114e6:	af00      	add	r7, sp, #0
   114e8:	6078      	str	r0, [r7, #4]
	return desc[0];
   114ea:	687b      	ldr	r3, [r7, #4]
   114ec:	781b      	ldrb	r3, [r3, #0]
}
   114ee:	4618      	mov	r0, r3
   114f0:	370c      	adds	r7, #12
   114f2:	46bd      	mov	sp, r7
   114f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   114f8:	4770      	bx	lr
	...

000114fc <usb_desc_next>:
{
   114fc:	b580      	push	{r7, lr}
   114fe:	b082      	sub	sp, #8
   11500:	af00      	add	r7, sp, #0
   11502:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   11504:	6878      	ldr	r0, [r7, #4]
   11506:	4b05      	ldr	r3, [pc, #20]	; (1151c <usb_desc_next+0x20>)
   11508:	4798      	blx	r3
   1150a:	4603      	mov	r3, r0
   1150c:	461a      	mov	r2, r3
   1150e:	687b      	ldr	r3, [r7, #4]
   11510:	4413      	add	r3, r2
}
   11512:	4618      	mov	r0, r3
   11514:	3708      	adds	r7, #8
   11516:	46bd      	mov	sp, r7
   11518:	bd80      	pop	{r7, pc}
   1151a:	bf00      	nop
   1151c:	000114e3 	.word	0x000114e3

00011520 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
   11520:	b580      	push	{r7, lr}
   11522:	b082      	sub	sp, #8
   11524:	af00      	add	r7, sp, #0
   11526:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   11528:	687b      	ldr	r3, [r7, #4]
   1152a:	3302      	adds	r3, #2
   1152c:	4618      	mov	r0, r3
   1152e:	4b03      	ldr	r3, [pc, #12]	; (1153c <usb_cfg_desc_total_len+0x1c>)
   11530:	4798      	blx	r3
   11532:	4603      	mov	r3, r0
}
   11534:	4618      	mov	r0, r3
   11536:	3708      	adds	r7, #8
   11538:	46bd      	mov	sp, r7
   1153a:	bd80      	pop	{r7, pc}
   1153c:	000114b9 	.word	0x000114b9

00011540 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
   11540:	b590      	push	{r4, r7, lr}
   11542:	b085      	sub	sp, #20
   11544:	af00      	add	r7, sp, #0
   11546:	4603      	mov	r3, r0
   11548:	6039      	str	r1, [r7, #0]
   1154a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
   1154c:	2300      	movs	r3, #0
   1154e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
   11550:	683b      	ldr	r3, [r7, #0]
   11552:	799a      	ldrb	r2, [r3, #6]
   11554:	79db      	ldrb	r3, [r3, #7]
   11556:	021b      	lsls	r3, r3, #8
   11558:	4313      	orrs	r3, r2
   1155a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
   1155c:	897b      	ldrh	r3, [r7, #10]
   1155e:	2b12      	cmp	r3, #18
   11560:	d901      	bls.n	11566 <usbdc_get_dev_desc+0x26>
		length = 0x12;
   11562:	2312      	movs	r3, #18
   11564:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
   11566:	68fb      	ldr	r3, [r7, #12]
   11568:	2b00      	cmp	r3, #0
   1156a:	d10a      	bne.n	11582 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   1156c:	4b0f      	ldr	r3, [pc, #60]	; (115ac <usbdc_get_dev_desc+0x6c>)
   1156e:	681b      	ldr	r3, [r3, #0]
   11570:	6818      	ldr	r0, [r3, #0]
   11572:	4b0e      	ldr	r3, [pc, #56]	; (115ac <usbdc_get_dev_desc+0x6c>)
   11574:	681b      	ldr	r3, [r3, #0]
   11576:	685b      	ldr	r3, [r3, #4]
   11578:	2201      	movs	r2, #1
   1157a:	4619      	mov	r1, r3
   1157c:	4b0c      	ldr	r3, [pc, #48]	; (115b0 <usbdc_get_dev_desc+0x70>)
   1157e:	4798      	blx	r3
   11580:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
   11582:	68fb      	ldr	r3, [r7, #12]
   11584:	2b00      	cmp	r3, #0
   11586:	d101      	bne.n	1158c <usbdc_get_dev_desc+0x4c>
		return false;
   11588:	2300      	movs	r3, #0
   1158a:	e00b      	b.n	115a4 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   1158c:	897a      	ldrh	r2, [r7, #10]
   1158e:	79f8      	ldrb	r0, [r7, #7]
   11590:	2300      	movs	r3, #0
   11592:	68f9      	ldr	r1, [r7, #12]
   11594:	4c07      	ldr	r4, [pc, #28]	; (115b4 <usbdc_get_dev_desc+0x74>)
   11596:	47a0      	blx	r4
   11598:	4603      	mov	r3, r0
   1159a:	2b00      	cmp	r3, #0
   1159c:	d001      	beq.n	115a2 <usbdc_get_dev_desc+0x62>
		return false;
   1159e:	2300      	movs	r3, #0
   115a0:	e000      	b.n	115a4 <usbdc_get_dev_desc+0x64>
	}
	return true;
   115a2:	2301      	movs	r3, #1
}
   115a4:	4618      	mov	r0, r3
   115a6:	3714      	adds	r7, #20
   115a8:	46bd      	mov	sp, r7
   115aa:	bd90      	pop	{r4, r7, pc}
   115ac:	20008d20 	.word	0x20008d20
   115b0:	000122b5 	.word	0x000122b5
   115b4:	00012025 	.word	0x00012025

000115b8 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
   115b8:	b590      	push	{r4, r7, lr}
   115ba:	b087      	sub	sp, #28
   115bc:	af00      	add	r7, sp, #0
   115be:	4603      	mov	r3, r0
   115c0:	6039      	str	r1, [r7, #0]
   115c2:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
   115c4:	2300      	movs	r3, #0
   115c6:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
   115c8:	683b      	ldr	r3, [r7, #0]
   115ca:	799a      	ldrb	r2, [r3, #6]
   115cc:	79db      	ldrb	r3, [r3, #7]
   115ce:	021b      	lsls	r3, r3, #8
   115d0:	4313      	orrs	r3, r2
   115d2:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
   115d4:	683b      	ldr	r3, [r7, #0]
   115d6:	885b      	ldrh	r3, [r3, #2]
   115d8:	b29b      	uxth	r3, r3
   115da:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   115dc:	8a7a      	ldrh	r2, [r7, #18]
   115de:	4b1e      	ldr	r3, [pc, #120]	; (11658 <usbdc_get_cfg_desc+0xa0>)
   115e0:	7f1b      	ldrb	r3, [r3, #28]
   115e2:	3b01      	subs	r3, #1
   115e4:	4013      	ands	r3, r2
   115e6:	2b00      	cmp	r3, #0
   115e8:	bf0c      	ite	eq
   115ea:	2301      	moveq	r3, #1
   115ec:	2300      	movne	r3, #0
   115ee:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   115f0:	697b      	ldr	r3, [r7, #20]
   115f2:	2b00      	cmp	r3, #0
   115f4:	d10c      	bne.n	11610 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   115f6:	4b18      	ldr	r3, [pc, #96]	; (11658 <usbdc_get_cfg_desc+0xa0>)
   115f8:	681b      	ldr	r3, [r3, #0]
   115fa:	6818      	ldr	r0, [r3, #0]
   115fc:	4b16      	ldr	r3, [pc, #88]	; (11658 <usbdc_get_cfg_desc+0xa0>)
   115fe:	681b      	ldr	r3, [r3, #0]
   11600:	6859      	ldr	r1, [r3, #4]
   11602:	7c3b      	ldrb	r3, [r7, #16]
   11604:	3301      	adds	r3, #1
   11606:	b2db      	uxtb	r3, r3
   11608:	461a      	mov	r2, r3
   1160a:	4b14      	ldr	r3, [pc, #80]	; (1165c <usbdc_get_cfg_desc+0xa4>)
   1160c:	4798      	blx	r3
   1160e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
   11610:	697b      	ldr	r3, [r7, #20]
   11612:	2b00      	cmp	r3, #0
   11614:	d101      	bne.n	1161a <usbdc_get_cfg_desc+0x62>
		return false;
   11616:	2300      	movs	r3, #0
   11618:	e019      	b.n	1164e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
   1161a:	6978      	ldr	r0, [r7, #20]
   1161c:	4b10      	ldr	r3, [pc, #64]	; (11660 <usbdc_get_cfg_desc+0xa8>)
   1161e:	4798      	blx	r3
   11620:	4603      	mov	r3, r0
   11622:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
   11624:	8a7a      	ldrh	r2, [r7, #18]
   11626:	89fb      	ldrh	r3, [r7, #14]
   11628:	429a      	cmp	r2, r3
   1162a:	d802      	bhi.n	11632 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
   1162c:	2300      	movs	r3, #0
   1162e:	747b      	strb	r3, [r7, #17]
   11630:	e001      	b.n	11636 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
   11632:	89fb      	ldrh	r3, [r7, #14]
   11634:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
   11636:	8a7a      	ldrh	r2, [r7, #18]
   11638:	7c7b      	ldrb	r3, [r7, #17]
   1163a:	79f8      	ldrb	r0, [r7, #7]
   1163c:	6979      	ldr	r1, [r7, #20]
   1163e:	4c09      	ldr	r4, [pc, #36]	; (11664 <usbdc_get_cfg_desc+0xac>)
   11640:	47a0      	blx	r4
   11642:	4603      	mov	r3, r0
   11644:	2b00      	cmp	r3, #0
   11646:	d001      	beq.n	1164c <usbdc_get_cfg_desc+0x94>
		return false;
   11648:	2300      	movs	r3, #0
   1164a:	e000      	b.n	1164e <usbdc_get_cfg_desc+0x96>
	}
	return true;
   1164c:	2301      	movs	r3, #1
}
   1164e:	4618      	mov	r0, r3
   11650:	371c      	adds	r7, #28
   11652:	46bd      	mov	sp, r7
   11654:	bd90      	pop	{r4, r7, pc}
   11656:	bf00      	nop
   11658:	20008d20 	.word	0x20008d20
   1165c:	00012375 	.word	0x00012375
   11660:	00011521 	.word	0x00011521
   11664:	00012025 	.word	0x00012025

00011668 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
   11668:	b590      	push	{r4, r7, lr}
   1166a:	b085      	sub	sp, #20
   1166c:	af00      	add	r7, sp, #0
   1166e:	4603      	mov	r3, r0
   11670:	6039      	str	r1, [r7, #0]
   11672:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
   11674:	683b      	ldr	r3, [r7, #0]
   11676:	799a      	ldrb	r2, [r3, #6]
   11678:	79db      	ldrb	r3, [r3, #7]
   1167a:	021b      	lsls	r3, r3, #8
   1167c:	4313      	orrs	r3, r2
   1167e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
   11680:	683b      	ldr	r3, [r7, #0]
   11682:	885b      	ldrh	r3, [r3, #2]
   11684:	b29b      	uxth	r3, r3
   11686:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11688:	89fa      	ldrh	r2, [r7, #14]
   1168a:	4b1a      	ldr	r3, [pc, #104]	; (116f4 <usbdc_get_str_desc+0x8c>)
   1168c:	7f1b      	ldrb	r3, [r3, #28]
   1168e:	3b01      	subs	r3, #1
   11690:	4013      	ands	r3, r2
   11692:	2b00      	cmp	r3, #0
   11694:	bf0c      	ite	eq
   11696:	2301      	moveq	r3, #1
   11698:	2300      	movne	r3, #0
   1169a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   1169c:	4b15      	ldr	r3, [pc, #84]	; (116f4 <usbdc_get_str_desc+0x8c>)
   1169e:	681b      	ldr	r3, [r3, #0]
   116a0:	6818      	ldr	r0, [r3, #0]
   116a2:	4b14      	ldr	r3, [pc, #80]	; (116f4 <usbdc_get_str_desc+0x8c>)
   116a4:	681b      	ldr	r3, [r3, #0]
   116a6:	685b      	ldr	r3, [r3, #4]
   116a8:	7b3a      	ldrb	r2, [r7, #12]
   116aa:	4619      	mov	r1, r3
   116ac:	4b12      	ldr	r3, [pc, #72]	; (116f8 <usbdc_get_str_desc+0x90>)
   116ae:	4798      	blx	r3
   116b0:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
   116b2:	68bb      	ldr	r3, [r7, #8]
   116b4:	2b00      	cmp	r3, #0
   116b6:	d101      	bne.n	116bc <usbdc_get_str_desc+0x54>
		return false;
   116b8:	2300      	movs	r3, #0
   116ba:	e017      	b.n	116ec <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
   116bc:	68bb      	ldr	r3, [r7, #8]
   116be:	781b      	ldrb	r3, [r3, #0]
   116c0:	b29b      	uxth	r3, r3
   116c2:	89fa      	ldrh	r2, [r7, #14]
   116c4:	429a      	cmp	r2, r3
   116c6:	d802      	bhi.n	116ce <usbdc_get_str_desc+0x66>
		need_zlp = false;
   116c8:	2300      	movs	r3, #0
   116ca:	737b      	strb	r3, [r7, #13]
   116cc:	e002      	b.n	116d4 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
   116ce:	68bb      	ldr	r3, [r7, #8]
   116d0:	781b      	ldrb	r3, [r3, #0]
   116d2:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   116d4:	89fa      	ldrh	r2, [r7, #14]
   116d6:	7b7b      	ldrb	r3, [r7, #13]
   116d8:	79f8      	ldrb	r0, [r7, #7]
   116da:	68b9      	ldr	r1, [r7, #8]
   116dc:	4c07      	ldr	r4, [pc, #28]	; (116fc <usbdc_get_str_desc+0x94>)
   116de:	47a0      	blx	r4
   116e0:	4603      	mov	r3, r0
   116e2:	2b00      	cmp	r3, #0
   116e4:	d001      	beq.n	116ea <usbdc_get_str_desc+0x82>
		return false;
   116e6:	2300      	movs	r3, #0
   116e8:	e000      	b.n	116ec <usbdc_get_str_desc+0x84>
	}
	return true;
   116ea:	2301      	movs	r3, #1
}
   116ec:	4618      	mov	r0, r3
   116ee:	3714      	adds	r7, #20
   116f0:	46bd      	mov	sp, r7
   116f2:	bd90      	pop	{r4, r7, pc}
   116f4:	20008d20 	.word	0x20008d20
   116f8:	000123ed 	.word	0x000123ed
   116fc:	00012025 	.word	0x00012025

00011700 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
   11700:	b580      	push	{r7, lr}
   11702:	b084      	sub	sp, #16
   11704:	af00      	add	r7, sp, #0
   11706:	4603      	mov	r3, r0
   11708:	6039      	str	r1, [r7, #0]
   1170a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
   1170c:	683b      	ldr	r3, [r7, #0]
   1170e:	885b      	ldrh	r3, [r3, #2]
   11710:	b29b      	uxth	r3, r3
   11712:	0a1b      	lsrs	r3, r3, #8
   11714:	b29b      	uxth	r3, r3
   11716:	73fb      	strb	r3, [r7, #15]
	switch (type) {
   11718:	7bfb      	ldrb	r3, [r7, #15]
   1171a:	2b02      	cmp	r3, #2
   1171c:	d00d      	beq.n	1173a <usbdc_get_desc_req+0x3a>
   1171e:	2b03      	cmp	r3, #3
   11720:	d012      	beq.n	11748 <usbdc_get_desc_req+0x48>
   11722:	2b01      	cmp	r3, #1
   11724:	d002      	beq.n	1172c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
   11726:	bf00      	nop
	}
	return false;
   11728:	2300      	movs	r3, #0
   1172a:	e013      	b.n	11754 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
   1172c:	79fb      	ldrb	r3, [r7, #7]
   1172e:	6839      	ldr	r1, [r7, #0]
   11730:	4618      	mov	r0, r3
   11732:	4b0a      	ldr	r3, [pc, #40]	; (1175c <usbdc_get_desc_req+0x5c>)
   11734:	4798      	blx	r3
   11736:	4603      	mov	r3, r0
   11738:	e00c      	b.n	11754 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
   1173a:	79fb      	ldrb	r3, [r7, #7]
   1173c:	6839      	ldr	r1, [r7, #0]
   1173e:	4618      	mov	r0, r3
   11740:	4b07      	ldr	r3, [pc, #28]	; (11760 <usbdc_get_desc_req+0x60>)
   11742:	4798      	blx	r3
   11744:	4603      	mov	r3, r0
   11746:	e005      	b.n	11754 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
   11748:	79fb      	ldrb	r3, [r7, #7]
   1174a:	6839      	ldr	r1, [r7, #0]
   1174c:	4618      	mov	r0, r3
   1174e:	4b05      	ldr	r3, [pc, #20]	; (11764 <usbdc_get_desc_req+0x64>)
   11750:	4798      	blx	r3
   11752:	4603      	mov	r3, r0
}
   11754:	4618      	mov	r0, r3
   11756:	3710      	adds	r7, #16
   11758:	46bd      	mov	sp, r7
   1175a:	bd80      	pop	{r7, pc}
   1175c:	00011541 	.word	0x00011541
   11760:	000115b9 	.word	0x000115b9
   11764:	00011669 	.word	0x00011669

00011768 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
   11768:	b590      	push	{r4, r7, lr}
   1176a:	b085      	sub	sp, #20
   1176c:	af00      	add	r7, sp, #0
   1176e:	4603      	mov	r3, r0
   11770:	6039      	str	r1, [r7, #0]
   11772:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11774:	683b      	ldr	r3, [r7, #0]
   11776:	781b      	ldrb	r3, [r3, #0]
   11778:	f003 031f 	and.w	r3, r3, #31
   1177c:	2b00      	cmp	r3, #0
   1177e:	db1b      	blt.n	117b8 <usbdc_get_status_req+0x50>
   11780:	2b01      	cmp	r3, #1
   11782:	dd02      	ble.n	1178a <usbdc_get_status_req+0x22>
   11784:	2b02      	cmp	r3, #2
   11786:	d003      	beq.n	11790 <usbdc_get_status_req+0x28>
   11788:	e016      	b.n	117b8 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
   1178a:	2300      	movs	r3, #0
   1178c:	60fb      	str	r3, [r7, #12]
		break;
   1178e:	e015      	b.n	117bc <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   11790:	683b      	ldr	r3, [r7, #0]
   11792:	889b      	ldrh	r3, [r3, #4]
   11794:	b29b      	uxth	r3, r3
   11796:	b2db      	uxtb	r3, r3
   11798:	2102      	movs	r1, #2
   1179a:	4618      	mov	r0, r3
   1179c:	4b0f      	ldr	r3, [pc, #60]	; (117dc <usbdc_get_status_req+0x74>)
   1179e:	4798      	blx	r3
   117a0:	4603      	mov	r3, r0
   117a2:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
   117a4:	68fb      	ldr	r3, [r7, #12]
   117a6:	2b00      	cmp	r3, #0
   117a8:	da01      	bge.n	117ae <usbdc_get_status_req+0x46>
			return false;
   117aa:	2300      	movs	r3, #0
   117ac:	e012      	b.n	117d4 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
   117ae:	68fb      	ldr	r3, [r7, #12]
   117b0:	f003 0301 	and.w	r3, r3, #1
   117b4:	60fb      	str	r3, [r7, #12]
		break;
   117b6:	e001      	b.n	117bc <usbdc_get_status_req+0x54>
	default:
		return false;
   117b8:	2300      	movs	r3, #0
   117ba:	e00b      	b.n	117d4 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
   117bc:	4b08      	ldr	r3, [pc, #32]	; (117e0 <usbdc_get_status_req+0x78>)
   117be:	695b      	ldr	r3, [r3, #20]
   117c0:	89ba      	ldrh	r2, [r7, #12]
   117c2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   117c4:	4b06      	ldr	r3, [pc, #24]	; (117e0 <usbdc_get_status_req+0x78>)
   117c6:	6959      	ldr	r1, [r3, #20]
   117c8:	79f8      	ldrb	r0, [r7, #7]
   117ca:	2300      	movs	r3, #0
   117cc:	2202      	movs	r2, #2
   117ce:	4c05      	ldr	r4, [pc, #20]	; (117e4 <usbdc_get_status_req+0x7c>)
   117d0:	47a0      	blx	r4
	return true;
   117d2:	2301      	movs	r3, #1
}
   117d4:	4618      	mov	r0, r3
   117d6:	3714      	adds	r7, #20
   117d8:	46bd      	mov	sp, r7
   117da:	bd90      	pop	{r4, r7, pc}
   117dc:	000078cd 	.word	0x000078cd
   117e0:	20008d20 	.word	0x20008d20
   117e4:	00012025 	.word	0x00012025

000117e8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
   117e8:	b590      	push	{r4, r7, lr}
   117ea:	b085      	sub	sp, #20
   117ec:	af00      	add	r7, sp, #0
   117ee:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   117f0:	4b1f      	ldr	r3, [pc, #124]	; (11870 <usbdc_get_interface+0x88>)
   117f2:	691b      	ldr	r3, [r3, #16]
   117f4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   117f6:	4b1e      	ldr	r3, [pc, #120]	; (11870 <usbdc_get_interface+0x88>)
   117f8:	7f5b      	ldrb	r3, [r3, #29]
   117fa:	461a      	mov	r2, r3
   117fc:	687b      	ldr	r3, [r7, #4]
   117fe:	889b      	ldrh	r3, [r3, #4]
   11800:	b29b      	uxth	r3, r3
   11802:	fa42 f303 	asr.w	r3, r2, r3
   11806:	f003 0301 	and.w	r3, r3, #1
   1180a:	2b00      	cmp	r3, #0
   1180c:	d128      	bne.n	11860 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
   1180e:	4b18      	ldr	r3, [pc, #96]	; (11870 <usbdc_get_interface+0x88>)
   11810:	695b      	ldr	r3, [r3, #20]
   11812:	2200      	movs	r2, #0
   11814:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11816:	4b16      	ldr	r3, [pc, #88]	; (11870 <usbdc_get_interface+0x88>)
   11818:	6959      	ldr	r1, [r3, #20]
   1181a:	2300      	movs	r3, #0
   1181c:	2201      	movs	r2, #1
   1181e:	2000      	movs	r0, #0
   11820:	4c14      	ldr	r4, [pc, #80]	; (11874 <usbdc_get_interface+0x8c>)
   11822:	47a0      	blx	r4
		return true;
   11824:	2301      	movs	r3, #1
   11826:	e01f      	b.n	11868 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   11828:	68fb      	ldr	r3, [r7, #12]
   1182a:	685b      	ldr	r3, [r3, #4]
   1182c:	687a      	ldr	r2, [r7, #4]
   1182e:	2102      	movs	r1, #2
   11830:	68f8      	ldr	r0, [r7, #12]
   11832:	4798      	blx	r3
   11834:	60b8      	str	r0, [r7, #8]
   11836:	68bb      	ldr	r3, [r7, #8]
   11838:	2b00      	cmp	r3, #0
   1183a:	da03      	bge.n	11844 <usbdc_get_interface+0x5c>
			func = func->next;
   1183c:	68fb      	ldr	r3, [r7, #12]
   1183e:	681b      	ldr	r3, [r3, #0]
   11840:	60fb      	str	r3, [r7, #12]
   11842:	e00d      	b.n	11860 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   11844:	4b0a      	ldr	r3, [pc, #40]	; (11870 <usbdc_get_interface+0x88>)
   11846:	695b      	ldr	r3, [r3, #20]
   11848:	68ba      	ldr	r2, [r7, #8]
   1184a:	b2d2      	uxtb	r2, r2
   1184c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   1184e:	4b08      	ldr	r3, [pc, #32]	; (11870 <usbdc_get_interface+0x88>)
   11850:	6959      	ldr	r1, [r3, #20]
   11852:	2300      	movs	r3, #0
   11854:	2201      	movs	r2, #1
   11856:	2000      	movs	r0, #0
   11858:	4c06      	ldr	r4, [pc, #24]	; (11874 <usbdc_get_interface+0x8c>)
   1185a:	47a0      	blx	r4
			return true;
   1185c:	2301      	movs	r3, #1
   1185e:	e003      	b.n	11868 <usbdc_get_interface+0x80>
	while (NULL != func) {
   11860:	68fb      	ldr	r3, [r7, #12]
   11862:	2b00      	cmp	r3, #0
   11864:	d1e0      	bne.n	11828 <usbdc_get_interface+0x40>
		}
	}
	return false;
   11866:	2300      	movs	r3, #0
}
   11868:	4618      	mov	r0, r3
   1186a:	3714      	adds	r7, #20
   1186c:	46bd      	mov	sp, r7
   1186e:	bd90      	pop	{r4, r7, pc}
   11870:	20008d20 	.word	0x20008d20
   11874:	00012025 	.word	0x00012025

00011878 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
   11878:	b590      	push	{r4, r7, lr}
   1187a:	b083      	sub	sp, #12
   1187c:	af00      	add	r7, sp, #0
   1187e:	4603      	mov	r3, r0
   11880:	6039      	str	r1, [r7, #0]
   11882:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   11884:	683b      	ldr	r3, [r7, #0]
   11886:	785b      	ldrb	r3, [r3, #1]
   11888:	2b0a      	cmp	r3, #10
   1188a:	d83a      	bhi.n	11902 <usbdc_get_req+0x8a>
   1188c:	a201      	add	r2, pc, #4	; (adr r2, 11894 <usbdc_get_req+0x1c>)
   1188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11892:	bf00      	nop
   11894:	000118eb 	.word	0x000118eb
   11898:	00011903 	.word	0x00011903
   1189c:	00011903 	.word	0x00011903
   118a0:	00011903 	.word	0x00011903
   118a4:	00011903 	.word	0x00011903
   118a8:	00011903 	.word	0x00011903
   118ac:	000118c1 	.word	0x000118c1
   118b0:	00011903 	.word	0x00011903
   118b4:	000118cf 	.word	0x000118cf
   118b8:	00011903 	.word	0x00011903
   118bc:	000118f9 	.word	0x000118f9
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
   118c0:	79fb      	ldrb	r3, [r7, #7]
   118c2:	6839      	ldr	r1, [r7, #0]
   118c4:	4618      	mov	r0, r3
   118c6:	4b11      	ldr	r3, [pc, #68]	; (1190c <usbdc_get_req+0x94>)
   118c8:	4798      	blx	r3
   118ca:	4603      	mov	r3, r0
   118cc:	e01a      	b.n	11904 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   118ce:	4b10      	ldr	r3, [pc, #64]	; (11910 <usbdc_get_req+0x98>)
   118d0:	695b      	ldr	r3, [r3, #20]
   118d2:	4a0f      	ldr	r2, [pc, #60]	; (11910 <usbdc_get_req+0x98>)
   118d4:	7ed2      	ldrb	r2, [r2, #27]
   118d6:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   118d8:	4b0d      	ldr	r3, [pc, #52]	; (11910 <usbdc_get_req+0x98>)
   118da:	6959      	ldr	r1, [r3, #20]
   118dc:	79f8      	ldrb	r0, [r7, #7]
   118de:	2300      	movs	r3, #0
   118e0:	2201      	movs	r2, #1
   118e2:	4c0c      	ldr	r4, [pc, #48]	; (11914 <usbdc_get_req+0x9c>)
   118e4:	47a0      	blx	r4
		return true;
   118e6:	2301      	movs	r3, #1
   118e8:	e00c      	b.n	11904 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
   118ea:	79fb      	ldrb	r3, [r7, #7]
   118ec:	6839      	ldr	r1, [r7, #0]
   118ee:	4618      	mov	r0, r3
   118f0:	4b09      	ldr	r3, [pc, #36]	; (11918 <usbdc_get_req+0xa0>)
   118f2:	4798      	blx	r3
   118f4:	4603      	mov	r3, r0
   118f6:	e005      	b.n	11904 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
   118f8:	6838      	ldr	r0, [r7, #0]
   118fa:	4b08      	ldr	r3, [pc, #32]	; (1191c <usbdc_get_req+0xa4>)
   118fc:	4798      	blx	r3
   118fe:	4603      	mov	r3, r0
   11900:	e000      	b.n	11904 <usbdc_get_req+0x8c>
	default:
		return false;
   11902:	2300      	movs	r3, #0
	}
}
   11904:	4618      	mov	r0, r3
   11906:	370c      	adds	r7, #12
   11908:	46bd      	mov	sp, r7
   1190a:	bd90      	pop	{r4, r7, pc}
   1190c:	00011701 	.word	0x00011701
   11910:	20008d20 	.word	0x20008d20
   11914:	00012025 	.word	0x00012025
   11918:	00011769 	.word	0x00011769
   1191c:	000117e9 	.word	0x000117e9

00011920 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   11920:	b590      	push	{r4, r7, lr}
   11922:	b083      	sub	sp, #12
   11924:	af00      	add	r7, sp, #0
   11926:	4603      	mov	r3, r0
   11928:	6039      	str	r1, [r7, #0]
   1192a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   1192c:	683b      	ldr	r3, [r7, #0]
   1192e:	781b      	ldrb	r3, [r3, #0]
   11930:	f003 031f 	and.w	r3, r3, #31
   11934:	2b02      	cmp	r3, #2
   11936:	d116      	bne.n	11966 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   11938:	683b      	ldr	r3, [r7, #0]
   1193a:	88db      	ldrh	r3, [r3, #6]
   1193c:	b29b      	uxth	r3, r3
   1193e:	2b00      	cmp	r3, #0
   11940:	d001      	beq.n	11946 <usbdc_clear_ftr_req+0x26>
			return false;
   11942:	2300      	movs	r3, #0
   11944:	e010      	b.n	11968 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   11946:	683b      	ldr	r3, [r7, #0]
   11948:	889b      	ldrh	r3, [r3, #4]
   1194a:	b29b      	uxth	r3, r3
   1194c:	b2db      	uxtb	r3, r3
   1194e:	2100      	movs	r1, #0
   11950:	4618      	mov	r0, r3
   11952:	4b07      	ldr	r3, [pc, #28]	; (11970 <usbdc_clear_ftr_req+0x50>)
   11954:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   11956:	79f8      	ldrb	r0, [r7, #7]
   11958:	2301      	movs	r3, #1
   1195a:	2200      	movs	r2, #0
   1195c:	2100      	movs	r1, #0
   1195e:	4c05      	ldr	r4, [pc, #20]	; (11974 <usbdc_clear_ftr_req+0x54>)
   11960:	47a0      	blx	r4
		return true;
   11962:	2301      	movs	r3, #1
   11964:	e000      	b.n	11968 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
   11966:	2300      	movs	r3, #0
	}
}
   11968:	4618      	mov	r0, r3
   1196a:	370c      	adds	r7, #12
   1196c:	46bd      	mov	sp, r7
   1196e:	bd90      	pop	{r4, r7, pc}
   11970:	000078cd 	.word	0x000078cd
   11974:	00012025 	.word	0x00012025

00011978 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
   11978:	b590      	push	{r4, r7, lr}
   1197a:	b083      	sub	sp, #12
   1197c:	af00      	add	r7, sp, #0
   1197e:	4603      	mov	r3, r0
   11980:	6039      	str	r1, [r7, #0]
   11982:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11984:	683b      	ldr	r3, [r7, #0]
   11986:	781b      	ldrb	r3, [r3, #0]
   11988:	f003 031f 	and.w	r3, r3, #31
   1198c:	2b02      	cmp	r3, #2
   1198e:	d116      	bne.n	119be <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
   11990:	683b      	ldr	r3, [r7, #0]
   11992:	88db      	ldrh	r3, [r3, #6]
   11994:	b29b      	uxth	r3, r3
   11996:	2b00      	cmp	r3, #0
   11998:	d001      	beq.n	1199e <usbdc_set_ftr_req+0x26>
			return false;
   1199a:	2300      	movs	r3, #0
   1199c:	e010      	b.n	119c0 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   1199e:	683b      	ldr	r3, [r7, #0]
   119a0:	889b      	ldrh	r3, [r3, #4]
   119a2:	b29b      	uxth	r3, r3
   119a4:	b2db      	uxtb	r3, r3
   119a6:	2101      	movs	r1, #1
   119a8:	4618      	mov	r0, r3
   119aa:	4b07      	ldr	r3, [pc, #28]	; (119c8 <usbdc_set_ftr_req+0x50>)
   119ac:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   119ae:	79f8      	ldrb	r0, [r7, #7]
   119b0:	2301      	movs	r3, #1
   119b2:	2200      	movs	r2, #0
   119b4:	2100      	movs	r1, #0
   119b6:	4c05      	ldr	r4, [pc, #20]	; (119cc <usbdc_set_ftr_req+0x54>)
   119b8:	47a0      	blx	r4
		return true;
   119ba:	2301      	movs	r3, #1
   119bc:	e000      	b.n	119c0 <usbdc_set_ftr_req+0x48>
	default:
		return false;
   119be:	2300      	movs	r3, #0
	}
}
   119c0:	4618      	mov	r0, r3
   119c2:	370c      	adds	r7, #12
   119c4:	46bd      	mov	sp, r7
   119c6:	bd90      	pop	{r4, r7, pc}
   119c8:	000078cd 	.word	0x000078cd
   119cc:	00012025 	.word	0x00012025

000119d0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
   119d0:	b580      	push	{r7, lr}
   119d2:	b082      	sub	sp, #8
   119d4:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   119d6:	4b0a      	ldr	r3, [pc, #40]	; (11a00 <usbdc_unconfig+0x30>)
   119d8:	691b      	ldr	r3, [r3, #16]
   119da:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   119dc:	e008      	b.n	119f0 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
   119de:	687b      	ldr	r3, [r7, #4]
   119e0:	685b      	ldr	r3, [r3, #4]
   119e2:	2200      	movs	r2, #0
   119e4:	2101      	movs	r1, #1
   119e6:	6878      	ldr	r0, [r7, #4]
   119e8:	4798      	blx	r3
		func = func->next;
   119ea:	687b      	ldr	r3, [r7, #4]
   119ec:	681b      	ldr	r3, [r3, #0]
   119ee:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
   119f0:	687b      	ldr	r3, [r7, #4]
   119f2:	2b00      	cmp	r3, #0
   119f4:	d1f3      	bne.n	119de <usbdc_unconfig+0xe>
	}
}
   119f6:	bf00      	nop
   119f8:	3708      	adds	r7, #8
   119fa:	46bd      	mov	sp, r7
   119fc:	bd80      	pop	{r7, pc}
   119fe:	bf00      	nop
   11a00:	20008d20 	.word	0x20008d20

00011a04 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
   11a04:	b580      	push	{r7, lr}
   11a06:	b088      	sub	sp, #32
   11a08:	af00      	add	r7, sp, #0
   11a0a:	4603      	mov	r3, r0
   11a0c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
   11a0e:	2300      	movs	r3, #0
   11a10:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
   11a12:	23ff      	movs	r3, #255	; 0xff
   11a14:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
   11a16:	79fb      	ldrb	r3, [r7, #7]
   11a18:	2b00      	cmp	r3, #0
   11a1a:	d103      	bne.n	11a24 <usbdc_set_config+0x20>
		usbdc_unconfig();
   11a1c:	4b2e      	ldr	r3, [pc, #184]	; (11ad8 <usbdc_set_config+0xd4>)
   11a1e:	4798      	blx	r3
		return true;
   11a20:	2301      	movs	r3, #1
   11a22:	e055      	b.n	11ad0 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
   11a24:	69bb      	ldr	r3, [r7, #24]
   11a26:	2b00      	cmp	r3, #0
   11a28:	d10a      	bne.n	11a40 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   11a2a:	4b2c      	ldr	r3, [pc, #176]	; (11adc <usbdc_set_config+0xd8>)
   11a2c:	681b      	ldr	r3, [r3, #0]
   11a2e:	6818      	ldr	r0, [r3, #0]
   11a30:	4b2a      	ldr	r3, [pc, #168]	; (11adc <usbdc_set_config+0xd8>)
   11a32:	681b      	ldr	r3, [r3, #0]
   11a34:	685b      	ldr	r3, [r3, #4]
   11a36:	79fa      	ldrb	r2, [r7, #7]
   11a38:	4619      	mov	r1, r3
   11a3a:	4b29      	ldr	r3, [pc, #164]	; (11ae0 <usbdc_set_config+0xdc>)
   11a3c:	4798      	blx	r3
   11a3e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
   11a40:	69bb      	ldr	r3, [r7, #24]
   11a42:	2b00      	cmp	r3, #0
   11a44:	d101      	bne.n	11a4a <usbdc_set_config+0x46>
		return false;
   11a46:	2300      	movs	r3, #0
   11a48:	e042      	b.n	11ad0 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
   11a4a:	69b8      	ldr	r0, [r7, #24]
   11a4c:	4b25      	ldr	r3, [pc, #148]	; (11ae4 <usbdc_set_config+0xe0>)
   11a4e:	4798      	blx	r3
   11a50:	4603      	mov	r3, r0
   11a52:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
   11a54:	8abb      	ldrh	r3, [r7, #20]
   11a56:	69ba      	ldr	r2, [r7, #24]
   11a58:	4413      	add	r3, r2
   11a5a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11a5c:	693b      	ldr	r3, [r7, #16]
   11a5e:	2204      	movs	r2, #4
   11a60:	4619      	mov	r1, r3
   11a62:	69b8      	ldr	r0, [r7, #24]
   11a64:	4b20      	ldr	r3, [pc, #128]	; (11ae8 <usbdc_set_config+0xe4>)
   11a66:	4798      	blx	r3
   11a68:	4603      	mov	r3, r0
   11a6a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
   11a6c:	e02c      	b.n	11ac8 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   11a6e:	68fb      	ldr	r3, [r7, #12]
   11a70:	3302      	adds	r3, #2
   11a72:	781b      	ldrb	r3, [r3, #0]
   11a74:	7dfa      	ldrb	r2, [r7, #23]
   11a76:	429a      	cmp	r2, r3
   11a78:	d018      	beq.n	11aac <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
   11a7a:	68fb      	ldr	r3, [r7, #12]
   11a7c:	789b      	ldrb	r3, [r3, #2]
   11a7e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   11a80:	4b16      	ldr	r3, [pc, #88]	; (11adc <usbdc_set_config+0xd8>)
   11a82:	691b      	ldr	r3, [r3, #16]
   11a84:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   11a86:	e00c      	b.n	11aa2 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   11a88:	69fb      	ldr	r3, [r7, #28]
   11a8a:	685b      	ldr	r3, [r3, #4]
   11a8c:	f107 020c 	add.w	r2, r7, #12
   11a90:	2100      	movs	r1, #0
   11a92:	69f8      	ldr	r0, [r7, #28]
   11a94:	4798      	blx	r3
   11a96:	4603      	mov	r3, r0
   11a98:	2b00      	cmp	r3, #0
   11a9a:	d006      	beq.n	11aaa <usbdc_set_config+0xa6>
					func = func->next;
   11a9c:	69fb      	ldr	r3, [r7, #28]
   11a9e:	681b      	ldr	r3, [r3, #0]
   11aa0:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
   11aa2:	69fb      	ldr	r3, [r7, #28]
   11aa4:	2b00      	cmp	r3, #0
   11aa6:	d1ef      	bne.n	11a88 <usbdc_set_config+0x84>
   11aa8:	e000      	b.n	11aac <usbdc_set_config+0xa8>
				} else {
					break;
   11aaa:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
   11aac:	68fb      	ldr	r3, [r7, #12]
   11aae:	4618      	mov	r0, r3
   11ab0:	4b0e      	ldr	r3, [pc, #56]	; (11aec <usbdc_set_config+0xe8>)
   11ab2:	4798      	blx	r3
   11ab4:	4603      	mov	r3, r0
   11ab6:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11ab8:	68fb      	ldr	r3, [r7, #12]
   11aba:	6939      	ldr	r1, [r7, #16]
   11abc:	2204      	movs	r2, #4
   11abe:	4618      	mov	r0, r3
   11ac0:	4b09      	ldr	r3, [pc, #36]	; (11ae8 <usbdc_set_config+0xe4>)
   11ac2:	4798      	blx	r3
   11ac4:	4603      	mov	r3, r0
   11ac6:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
   11ac8:	68fb      	ldr	r3, [r7, #12]
   11aca:	2b00      	cmp	r3, #0
   11acc:	d1cf      	bne.n	11a6e <usbdc_set_config+0x6a>
	}
	return true;
   11ace:	2301      	movs	r3, #1
}
   11ad0:	4618      	mov	r0, r3
   11ad2:	3720      	adds	r7, #32
   11ad4:	46bd      	mov	sp, r7
   11ad6:	bd80      	pop	{r7, pc}
   11ad8:	000119d1 	.word	0x000119d1
   11adc:	20008d20 	.word	0x20008d20
   11ae0:	00012375 	.word	0x00012375
   11ae4:	00011521 	.word	0x00011521
   11ae8:	000122b5 	.word	0x000122b5
   11aec:	000114fd 	.word	0x000114fd

00011af0 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
   11af0:	b580      	push	{r7, lr}
   11af2:	b082      	sub	sp, #8
   11af4:	af00      	add	r7, sp, #0
   11af6:	4603      	mov	r3, r0
   11af8:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
   11afa:	79fb      	ldrb	r3, [r7, #7]
   11afc:	4618      	mov	r0, r3
   11afe:	4b03      	ldr	r3, [pc, #12]	; (11b0c <usbdc_set_address+0x1c>)
   11b00:	4798      	blx	r3
}
   11b02:	bf00      	nop
   11b04:	3708      	adds	r7, #8
   11b06:	46bd      	mov	sp, r7
   11b08:	bd80      	pop	{r7, pc}
   11b0a:	bf00      	nop
   11b0c:	000074e9 	.word	0x000074e9

00011b10 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
   11b10:	b590      	push	{r4, r7, lr}
   11b12:	b087      	sub	sp, #28
   11b14:	af00      	add	r7, sp, #0
   11b16:	4603      	mov	r3, r0
   11b18:	460a      	mov	r2, r1
   11b1a:	80fb      	strh	r3, [r7, #6]
   11b1c:	4613      	mov	r3, r2
   11b1e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
   11b20:	2300      	movs	r3, #0
   11b22:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
   11b24:	693b      	ldr	r3, [r7, #16]
   11b26:	2b00      	cmp	r3, #0
   11b28:	d10b      	bne.n	11b42 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   11b2a:	4b43      	ldr	r3, [pc, #268]	; (11c38 <usbdc_set_interface+0x128>)
   11b2c:	681b      	ldr	r3, [r3, #0]
   11b2e:	6818      	ldr	r0, [r3, #0]
   11b30:	4b41      	ldr	r3, [pc, #260]	; (11c38 <usbdc_set_interface+0x128>)
   11b32:	681b      	ldr	r3, [r3, #0]
   11b34:	6859      	ldr	r1, [r3, #4]
   11b36:	4b40      	ldr	r3, [pc, #256]	; (11c38 <usbdc_set_interface+0x128>)
   11b38:	7edb      	ldrb	r3, [r3, #27]
   11b3a:	461a      	mov	r2, r3
   11b3c:	4b3f      	ldr	r3, [pc, #252]	; (11c3c <usbdc_set_interface+0x12c>)
   11b3e:	4798      	blx	r3
   11b40:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
   11b42:	693b      	ldr	r3, [r7, #16]
   11b44:	2b00      	cmp	r3, #0
   11b46:	d101      	bne.n	11b4c <usbdc_set_interface+0x3c>
		return false;
   11b48:	2300      	movs	r3, #0
   11b4a:	e071      	b.n	11c30 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
   11b4c:	693b      	ldr	r3, [r7, #16]
   11b4e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   11b50:	6938      	ldr	r0, [r7, #16]
   11b52:	4b3b      	ldr	r3, [pc, #236]	; (11c40 <usbdc_set_interface+0x130>)
   11b54:	4798      	blx	r3
   11b56:	4603      	mov	r3, r0
   11b58:	461a      	mov	r2, r3
   11b5a:	693b      	ldr	r3, [r7, #16]
   11b5c:	4413      	add	r3, r2
   11b5e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   11b60:	68bb      	ldr	r3, [r7, #8]
   11b62:	68f9      	ldr	r1, [r7, #12]
   11b64:	2204      	movs	r2, #4
   11b66:	4618      	mov	r0, r3
   11b68:	4b36      	ldr	r3, [pc, #216]	; (11c44 <usbdc_set_interface+0x134>)
   11b6a:	4798      	blx	r3
   11b6c:	6138      	str	r0, [r7, #16]
   11b6e:	693b      	ldr	r3, [r7, #16]
   11b70:	2b00      	cmp	r3, #0
   11b72:	d113      	bne.n	11b9c <usbdc_set_interface+0x8c>
		return false;
   11b74:	2300      	movs	r3, #0
   11b76:	e05b      	b.n	11c30 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
   11b78:	68bb      	ldr	r3, [r7, #8]
   11b7a:	4618      	mov	r0, r3
   11b7c:	4b32      	ldr	r3, [pc, #200]	; (11c48 <usbdc_set_interface+0x138>)
   11b7e:	4798      	blx	r3
   11b80:	4603      	mov	r3, r0
   11b82:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11b84:	68bb      	ldr	r3, [r7, #8]
   11b86:	68f9      	ldr	r1, [r7, #12]
   11b88:	2204      	movs	r2, #4
   11b8a:	4618      	mov	r0, r3
   11b8c:	4b2d      	ldr	r3, [pc, #180]	; (11c44 <usbdc_set_interface+0x134>)
   11b8e:	4798      	blx	r3
   11b90:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
   11b92:	693b      	ldr	r3, [r7, #16]
   11b94:	2b00      	cmp	r3, #0
   11b96:	d101      	bne.n	11b9c <usbdc_set_interface+0x8c>
			return false;
   11b98:	2300      	movs	r3, #0
   11b9a:	e049      	b.n	11c30 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   11b9c:	693b      	ldr	r3, [r7, #16]
   11b9e:	3302      	adds	r3, #2
   11ba0:	781b      	ldrb	r3, [r3, #0]
   11ba2:	b29b      	uxth	r3, r3
   11ba4:	88ba      	ldrh	r2, [r7, #4]
   11ba6:	429a      	cmp	r2, r3
   11ba8:	d1e6      	bne.n	11b78 <usbdc_set_interface+0x68>
   11baa:	693b      	ldr	r3, [r7, #16]
   11bac:	3303      	adds	r3, #3
   11bae:	781b      	ldrb	r3, [r3, #0]
   11bb0:	b29b      	uxth	r3, r3
   11bb2:	88fa      	ldrh	r2, [r7, #6]
   11bb4:	429a      	cmp	r2, r3
   11bb6:	d1df      	bne.n	11b78 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
   11bb8:	693b      	ldr	r3, [r7, #16]
   11bba:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   11bbc:	4b1e      	ldr	r3, [pc, #120]	; (11c38 <usbdc_set_interface+0x128>)
   11bbe:	691b      	ldr	r3, [r3, #16]
   11bc0:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
   11bc2:	e031      	b.n	11c28 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   11bc4:	697b      	ldr	r3, [r7, #20]
   11bc6:	685b      	ldr	r3, [r3, #4]
   11bc8:	f107 0208 	add.w	r2, r7, #8
   11bcc:	2101      	movs	r1, #1
   11bce:	6978      	ldr	r0, [r7, #20]
   11bd0:	4798      	blx	r3
   11bd2:	4603      	mov	r3, r0
   11bd4:	2b00      	cmp	r3, #0
   11bd6:	d003      	beq.n	11be0 <usbdc_set_interface+0xd0>
			func = func->next;
   11bd8:	697b      	ldr	r3, [r7, #20]
   11bda:	681b      	ldr	r3, [r3, #0]
   11bdc:	617b      	str	r3, [r7, #20]
   11bde:	e023      	b.n	11c28 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   11be0:	697b      	ldr	r3, [r7, #20]
   11be2:	685b      	ldr	r3, [r3, #4]
   11be4:	f107 0208 	add.w	r2, r7, #8
   11be8:	2100      	movs	r1, #0
   11bea:	6978      	ldr	r0, [r7, #20]
   11bec:	4798      	blx	r3
   11bee:	4603      	mov	r3, r0
   11bf0:	2b00      	cmp	r3, #0
   11bf2:	d117      	bne.n	11c24 <usbdc_set_interface+0x114>
			if (alt_set) {
   11bf4:	88fb      	ldrh	r3, [r7, #6]
   11bf6:	2b00      	cmp	r3, #0
   11bf8:	d00c      	beq.n	11c14 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
   11bfa:	4b0f      	ldr	r3, [pc, #60]	; (11c38 <usbdc_set_interface+0x128>)
   11bfc:	7f5b      	ldrb	r3, [r3, #29]
   11bfe:	b25a      	sxtb	r2, r3
   11c00:	88bb      	ldrh	r3, [r7, #4]
   11c02:	2101      	movs	r1, #1
   11c04:	fa01 f303 	lsl.w	r3, r1, r3
   11c08:	b25b      	sxtb	r3, r3
   11c0a:	4313      	orrs	r3, r2
   11c0c:	b25b      	sxtb	r3, r3
   11c0e:	b2da      	uxtb	r2, r3
   11c10:	4b09      	ldr	r3, [pc, #36]	; (11c38 <usbdc_set_interface+0x128>)
   11c12:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
   11c14:	2300      	movs	r3, #0
   11c16:	2200      	movs	r2, #0
   11c18:	2100      	movs	r1, #0
   11c1a:	2000      	movs	r0, #0
   11c1c:	4c0b      	ldr	r4, [pc, #44]	; (11c4c <usbdc_set_interface+0x13c>)
   11c1e:	47a0      	blx	r4
			return true;
   11c20:	2301      	movs	r3, #1
   11c22:	e005      	b.n	11c30 <usbdc_set_interface+0x120>
		} else {
			return false;
   11c24:	2300      	movs	r3, #0
   11c26:	e003      	b.n	11c30 <usbdc_set_interface+0x120>
	while (NULL != func) {
   11c28:	697b      	ldr	r3, [r7, #20]
   11c2a:	2b00      	cmp	r3, #0
   11c2c:	d1ca      	bne.n	11bc4 <usbdc_set_interface+0xb4>
		}
	}

	return false;
   11c2e:	2300      	movs	r3, #0
}
   11c30:	4618      	mov	r0, r3
   11c32:	371c      	adds	r7, #28
   11c34:	46bd      	mov	sp, r7
   11c36:	bd90      	pop	{r4, r7, pc}
   11c38:	20008d20 	.word	0x20008d20
   11c3c:	00012375 	.word	0x00012375
   11c40:	00011521 	.word	0x00011521
   11c44:	000122b5 	.word	0x000122b5
   11c48:	000114fd 	.word	0x000114fd
   11c4c:	00012025 	.word	0x00012025

00011c50 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
   11c50:	b590      	push	{r4, r7, lr}
   11c52:	b083      	sub	sp, #12
   11c54:	af00      	add	r7, sp, #0
   11c56:	4603      	mov	r3, r0
   11c58:	6039      	str	r1, [r7, #0]
   11c5a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
   11c5c:	683b      	ldr	r3, [r7, #0]
   11c5e:	785b      	ldrb	r3, [r3, #1]
   11c60:	3b01      	subs	r3, #1
   11c62:	2b0a      	cmp	r3, #10
   11c64:	d85b      	bhi.n	11d1e <usbdc_set_req+0xce>
   11c66:	a201      	add	r2, pc, #4	; (adr r2, 11c6c <usbdc_set_req+0x1c>)
   11c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11c6c:	00011ceb 	.word	0x00011ceb
   11c70:	00011d1f 	.word	0x00011d1f
   11c74:	00011cf9 	.word	0x00011cf9
   11c78:	00011d1f 	.word	0x00011d1f
   11c7c:	00011c99 	.word	0x00011c99
   11c80:	00011d1f 	.word	0x00011d1f
   11c84:	00011d1f 	.word	0x00011d1f
   11c88:	00011d1f 	.word	0x00011d1f
   11c8c:	00011cb3 	.word	0x00011cb3
   11c90:	00011d1f 	.word	0x00011d1f
   11c94:	00011d07 	.word	0x00011d07
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   11c98:	79f8      	ldrb	r0, [r7, #7]
   11c9a:	2301      	movs	r3, #1
   11c9c:	2200      	movs	r2, #0
   11c9e:	2100      	movs	r1, #0
   11ca0:	4c21      	ldr	r4, [pc, #132]	; (11d28 <usbdc_set_req+0xd8>)
   11ca2:	47a0      	blx	r4
   11ca4:	4603      	mov	r3, r0
   11ca6:	2b00      	cmp	r3, #0
   11ca8:	bf0c      	ite	eq
   11caa:	2301      	moveq	r3, #1
   11cac:	2300      	movne	r3, #0
   11cae:	b2db      	uxtb	r3, r3
   11cb0:	e036      	b.n	11d20 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
   11cb2:	683b      	ldr	r3, [r7, #0]
   11cb4:	885b      	ldrh	r3, [r3, #2]
   11cb6:	b29b      	uxth	r3, r3
   11cb8:	b2db      	uxtb	r3, r3
   11cba:	4618      	mov	r0, r3
   11cbc:	4b1b      	ldr	r3, [pc, #108]	; (11d2c <usbdc_set_req+0xdc>)
   11cbe:	4798      	blx	r3
   11cc0:	4603      	mov	r3, r0
   11cc2:	f083 0301 	eor.w	r3, r3, #1
   11cc6:	b2db      	uxtb	r3, r3
   11cc8:	2b00      	cmp	r3, #0
   11cca:	d001      	beq.n	11cd0 <usbdc_set_req+0x80>
			return false;
   11ccc:	2300      	movs	r3, #0
   11cce:	e027      	b.n	11d20 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   11cd0:	79f8      	ldrb	r0, [r7, #7]
   11cd2:	2301      	movs	r3, #1
   11cd4:	2200      	movs	r2, #0
   11cd6:	2100      	movs	r1, #0
   11cd8:	4c13      	ldr	r4, [pc, #76]	; (11d28 <usbdc_set_req+0xd8>)
   11cda:	47a0      	blx	r4
   11cdc:	4603      	mov	r3, r0
   11cde:	2b00      	cmp	r3, #0
   11ce0:	bf0c      	ite	eq
   11ce2:	2301      	moveq	r3, #1
   11ce4:	2300      	movne	r3, #0
   11ce6:	b2db      	uxtb	r3, r3
   11ce8:	e01a      	b.n	11d20 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
   11cea:	79fb      	ldrb	r3, [r7, #7]
   11cec:	6839      	ldr	r1, [r7, #0]
   11cee:	4618      	mov	r0, r3
   11cf0:	4b0f      	ldr	r3, [pc, #60]	; (11d30 <usbdc_set_req+0xe0>)
   11cf2:	4798      	blx	r3
   11cf4:	4603      	mov	r3, r0
   11cf6:	e013      	b.n	11d20 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
   11cf8:	79fb      	ldrb	r3, [r7, #7]
   11cfa:	6839      	ldr	r1, [r7, #0]
   11cfc:	4618      	mov	r0, r3
   11cfe:	4b0d      	ldr	r3, [pc, #52]	; (11d34 <usbdc_set_req+0xe4>)
   11d00:	4798      	blx	r3
   11d02:	4603      	mov	r3, r0
   11d04:	e00c      	b.n	11d20 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
   11d06:	683b      	ldr	r3, [r7, #0]
   11d08:	885b      	ldrh	r3, [r3, #2]
   11d0a:	b29a      	uxth	r2, r3
   11d0c:	683b      	ldr	r3, [r7, #0]
   11d0e:	889b      	ldrh	r3, [r3, #4]
   11d10:	b29b      	uxth	r3, r3
   11d12:	4619      	mov	r1, r3
   11d14:	4610      	mov	r0, r2
   11d16:	4b08      	ldr	r3, [pc, #32]	; (11d38 <usbdc_set_req+0xe8>)
   11d18:	4798      	blx	r3
   11d1a:	4603      	mov	r3, r0
   11d1c:	e000      	b.n	11d20 <usbdc_set_req+0xd0>
	default:
		return false;
   11d1e:	2300      	movs	r3, #0
	}
}
   11d20:	4618      	mov	r0, r3
   11d22:	370c      	adds	r7, #12
   11d24:	46bd      	mov	sp, r7
   11d26:	bd90      	pop	{r4, r7, pc}
   11d28:	00012025 	.word	0x00012025
   11d2c:	00011a05 	.word	0x00011a05
   11d30:	00011921 	.word	0x00011921
   11d34:	00011979 	.word	0x00011979
   11d38:	00011b11 	.word	0x00011b11

00011d3c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
   11d3c:	b580      	push	{r7, lr}
   11d3e:	b082      	sub	sp, #8
   11d40:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   11d42:	4b0a      	ldr	r3, [pc, #40]	; (11d6c <usbdc_sof_notify+0x30>)
   11d44:	685b      	ldr	r3, [r3, #4]
   11d46:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
   11d48:	e009      	b.n	11d5e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
   11d4a:	687b      	ldr	r3, [r7, #4]
   11d4c:	685b      	ldr	r3, [r3, #4]
   11d4e:	2b00      	cmp	r3, #0
   11d50:	d002      	beq.n	11d58 <usbdc_sof_notify+0x1c>
			sof->cb();
   11d52:	687b      	ldr	r3, [r7, #4]
   11d54:	685b      	ldr	r3, [r3, #4]
   11d56:	4798      	blx	r3
		}
		sof = sof->next;
   11d58:	687b      	ldr	r3, [r7, #4]
   11d5a:	681b      	ldr	r3, [r3, #0]
   11d5c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
   11d5e:	687b      	ldr	r3, [r7, #4]
   11d60:	2b00      	cmp	r3, #0
   11d62:	d1f2      	bne.n	11d4a <usbdc_sof_notify+0xe>
	}
}
   11d64:	bf00      	nop
   11d66:	3708      	adds	r7, #8
   11d68:	46bd      	mov	sp, r7
   11d6a:	bd80      	pop	{r7, pc}
   11d6c:	20008d20 	.word	0x20008d20

00011d70 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
   11d70:	b580      	push	{r7, lr}
   11d72:	b084      	sub	sp, #16
   11d74:	af00      	add	r7, sp, #0
   11d76:	4603      	mov	r3, r0
   11d78:	6039      	str	r1, [r7, #0]
   11d7a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   11d7c:	4b0b      	ldr	r3, [pc, #44]	; (11dac <usbdc_change_notify+0x3c>)
   11d7e:	68db      	ldr	r3, [r3, #12]
   11d80:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
   11d82:	e00c      	b.n	11d9e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
   11d84:	68fb      	ldr	r3, [r7, #12]
   11d86:	685b      	ldr	r3, [r3, #4]
   11d88:	2b00      	cmp	r3, #0
   11d8a:	d005      	beq.n	11d98 <usbdc_change_notify+0x28>
			cg->cb(change, value);
   11d8c:	68fb      	ldr	r3, [r7, #12]
   11d8e:	685b      	ldr	r3, [r3, #4]
   11d90:	79fa      	ldrb	r2, [r7, #7]
   11d92:	6839      	ldr	r1, [r7, #0]
   11d94:	4610      	mov	r0, r2
   11d96:	4798      	blx	r3
		}
		cg = cg->next;
   11d98:	68fb      	ldr	r3, [r7, #12]
   11d9a:	681b      	ldr	r3, [r3, #0]
   11d9c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
   11d9e:	68fb      	ldr	r3, [r7, #12]
   11da0:	2b00      	cmp	r3, #0
   11da2:	d1ef      	bne.n	11d84 <usbdc_change_notify+0x14>
	}
}
   11da4:	bf00      	nop
   11da6:	3710      	adds	r7, #16
   11da8:	46bd      	mov	sp, r7
   11daa:	bd80      	pop	{r7, pc}
   11dac:	20008d20 	.word	0x20008d20

00011db0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11db0:	b580      	push	{r7, lr}
   11db2:	b084      	sub	sp, #16
   11db4:	af00      	add	r7, sp, #0
   11db6:	4603      	mov	r3, r0
   11db8:	6039      	str	r1, [r7, #0]
   11dba:	71fb      	strb	r3, [r7, #7]
   11dbc:	4613      	mov	r3, r2
   11dbe:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   11dc0:	4b12      	ldr	r3, [pc, #72]	; (11e0c <usbdc_request_handler+0x5c>)
   11dc2:	689b      	ldr	r3, [r3, #8]
   11dc4:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
   11dc6:	e019      	b.n	11dfc <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
   11dc8:	68fb      	ldr	r3, [r7, #12]
   11dca:	685b      	ldr	r3, [r3, #4]
   11dcc:	2b00      	cmp	r3, #0
   11dce:	d012      	beq.n	11df6 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
   11dd0:	68fb      	ldr	r3, [r7, #12]
   11dd2:	685b      	ldr	r3, [r3, #4]
   11dd4:	79ba      	ldrb	r2, [r7, #6]
   11dd6:	79f8      	ldrb	r0, [r7, #7]
   11dd8:	6839      	ldr	r1, [r7, #0]
   11dda:	4798      	blx	r3
   11ddc:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
   11dde:	68bb      	ldr	r3, [r7, #8]
   11de0:	2b00      	cmp	r3, #0
   11de2:	d101      	bne.n	11de8 <usbdc_request_handler+0x38>
				return true;
   11de4:	2301      	movs	r3, #1
   11de6:	e00d      	b.n	11e04 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
   11de8:	68bb      	ldr	r3, [r7, #8]
   11dea:	f113 0f0a 	cmn.w	r3, #10
   11dee:	d002      	beq.n	11df6 <usbdc_request_handler+0x46>
				return -1;
   11df0:	f04f 33ff 	mov.w	r3, #4294967295
   11df4:	e006      	b.n	11e04 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
   11df6:	68fb      	ldr	r3, [r7, #12]
   11df8:	681b      	ldr	r3, [r3, #0]
   11dfa:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
   11dfc:	68fb      	ldr	r3, [r7, #12]
   11dfe:	2b00      	cmp	r3, #0
   11e00:	d1e2      	bne.n	11dc8 <usbdc_request_handler+0x18>
	}
	return false;
   11e02:	2300      	movs	r3, #0
}
   11e04:	4618      	mov	r0, r3
   11e06:	3710      	adds	r7, #16
   11e08:	46bd      	mov	sp, r7
   11e0a:	bd80      	pop	{r7, pc}
   11e0c:	20008d20 	.word	0x20008d20

00011e10 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   11e10:	b580      	push	{r7, lr}
   11e12:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
   11e14:	4b01      	ldr	r3, [pc, #4]	; (11e1c <usbd_sof_cb+0xc>)
   11e16:	4798      	blx	r3
}
   11e18:	bf00      	nop
   11e1a:	bd80      	pop	{r7, pc}
   11e1c:	00011d3d 	.word	0x00011d3d

00011e20 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
   11e20:	b580      	push	{r7, lr}
   11e22:	b082      	sub	sp, #8
   11e24:	af00      	add	r7, sp, #0
   11e26:	4603      	mov	r3, r0
   11e28:	6039      	str	r1, [r7, #0]
   11e2a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   11e2c:	79fb      	ldrb	r3, [r7, #7]
   11e2e:	2200      	movs	r2, #0
   11e30:	6839      	ldr	r1, [r7, #0]
   11e32:	4618      	mov	r0, r3
   11e34:	4b14      	ldr	r3, [pc, #80]	; (11e88 <usbdc_cb_ctl_req+0x68>)
   11e36:	4798      	blx	r3
   11e38:	4603      	mov	r3, r0
   11e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
   11e3e:	d00b      	beq.n	11e58 <usbdc_cb_ctl_req+0x38>
   11e40:	2b01      	cmp	r3, #1
   11e42:	d007      	beq.n	11e54 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
   11e44:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   11e46:	683b      	ldr	r3, [r7, #0]
   11e48:	781b      	ldrb	r3, [r3, #0]
   11e4a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   11e4e:	2b00      	cmp	r3, #0
   11e50:	d007      	beq.n	11e62 <usbdc_cb_ctl_req+0x42>
   11e52:	e003      	b.n	11e5c <usbdc_cb_ctl_req+0x3c>
		return true;
   11e54:	2301      	movs	r3, #1
   11e56:	e013      	b.n	11e80 <usbdc_cb_ctl_req+0x60>
		return false;
   11e58:	2300      	movs	r3, #0
   11e5a:	e011      	b.n	11e80 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   11e5c:	2b80      	cmp	r3, #128	; 0x80
   11e5e:	d007      	beq.n	11e70 <usbdc_cb_ctl_req+0x50>
   11e60:	e00d      	b.n	11e7e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
   11e62:	79fb      	ldrb	r3, [r7, #7]
   11e64:	6839      	ldr	r1, [r7, #0]
   11e66:	4618      	mov	r0, r3
   11e68:	4b08      	ldr	r3, [pc, #32]	; (11e8c <usbdc_cb_ctl_req+0x6c>)
   11e6a:	4798      	blx	r3
   11e6c:	4603      	mov	r3, r0
   11e6e:	e007      	b.n	11e80 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
   11e70:	79fb      	ldrb	r3, [r7, #7]
   11e72:	6839      	ldr	r1, [r7, #0]
   11e74:	4618      	mov	r0, r3
   11e76:	4b06      	ldr	r3, [pc, #24]	; (11e90 <usbdc_cb_ctl_req+0x70>)
   11e78:	4798      	blx	r3
   11e7a:	4603      	mov	r3, r0
   11e7c:	e000      	b.n	11e80 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
   11e7e:	2300      	movs	r3, #0
	}
}
   11e80:	4618      	mov	r0, r3
   11e82:	3708      	adds	r7, #8
   11e84:	46bd      	mov	sp, r7
   11e86:	bd80      	pop	{r7, pc}
   11e88:	00011db1 	.word	0x00011db1
   11e8c:	00011c51 	.word	0x00011c51
   11e90:	00011879 	.word	0x00011879

00011e94 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
   11e94:	b580      	push	{r7, lr}
   11e96:	b082      	sub	sp, #8
   11e98:	af00      	add	r7, sp, #0
   11e9a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   11e9c:	687b      	ldr	r3, [r7, #4]
   11e9e:	781b      	ldrb	r3, [r3, #0]
   11ea0:	2b00      	cmp	r3, #0
   11ea2:	d135      	bne.n	11f10 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
   11ea4:	687b      	ldr	r3, [r7, #4]
   11ea6:	785b      	ldrb	r3, [r3, #1]
   11ea8:	2b05      	cmp	r3, #5
   11eaa:	d019      	beq.n	11ee0 <usbdc_ctrl_status_end+0x4c>
   11eac:	2b09      	cmp	r3, #9
   11eae:	d000      	beq.n	11eb2 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
   11eb0:	e02f      	b.n	11f12 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
   11eb2:	687b      	ldr	r3, [r7, #4]
   11eb4:	885b      	ldrh	r3, [r3, #2]
   11eb6:	b29b      	uxth	r3, r3
   11eb8:	b2da      	uxtb	r2, r3
   11eba:	4b17      	ldr	r3, [pc, #92]	; (11f18 <usbdc_ctrl_status_end+0x84>)
   11ebc:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   11ebe:	687b      	ldr	r3, [r7, #4]
   11ec0:	885b      	ldrh	r3, [r3, #2]
   11ec2:	b29b      	uxth	r3, r3
   11ec4:	2b00      	cmp	r3, #0
   11ec6:	d001      	beq.n	11ecc <usbdc_ctrl_status_end+0x38>
   11ec8:	2204      	movs	r2, #4
   11eca:	e000      	b.n	11ece <usbdc_ctrl_status_end+0x3a>
   11ecc:	2203      	movs	r2, #3
   11ece:	4b12      	ldr	r3, [pc, #72]	; (11f18 <usbdc_ctrl_status_end+0x84>)
   11ed0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   11ed2:	4b11      	ldr	r3, [pc, #68]	; (11f18 <usbdc_ctrl_status_end+0x84>)
   11ed4:	7e9b      	ldrb	r3, [r3, #26]
   11ed6:	4619      	mov	r1, r3
   11ed8:	2001      	movs	r0, #1
   11eda:	4b10      	ldr	r3, [pc, #64]	; (11f1c <usbdc_ctrl_status_end+0x88>)
   11edc:	4798      	blx	r3
		break;
   11ede:	e018      	b.n	11f12 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
   11ee0:	687b      	ldr	r3, [r7, #4]
   11ee2:	885b      	ldrh	r3, [r3, #2]
   11ee4:	b29b      	uxth	r3, r3
   11ee6:	b2db      	uxtb	r3, r3
   11ee8:	4618      	mov	r0, r3
   11eea:	4b0d      	ldr	r3, [pc, #52]	; (11f20 <usbdc_ctrl_status_end+0x8c>)
   11eec:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   11eee:	687b      	ldr	r3, [r7, #4]
   11ef0:	885b      	ldrh	r3, [r3, #2]
   11ef2:	b29b      	uxth	r3, r3
   11ef4:	2b00      	cmp	r3, #0
   11ef6:	d001      	beq.n	11efc <usbdc_ctrl_status_end+0x68>
   11ef8:	2203      	movs	r2, #3
   11efa:	e000      	b.n	11efe <usbdc_ctrl_status_end+0x6a>
   11efc:	2202      	movs	r2, #2
   11efe:	4b06      	ldr	r3, [pc, #24]	; (11f18 <usbdc_ctrl_status_end+0x84>)
   11f00:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   11f02:	4b05      	ldr	r3, [pc, #20]	; (11f18 <usbdc_ctrl_status_end+0x84>)
   11f04:	7e9b      	ldrb	r3, [r3, #26]
   11f06:	4619      	mov	r1, r3
   11f08:	2001      	movs	r0, #1
   11f0a:	4b04      	ldr	r3, [pc, #16]	; (11f1c <usbdc_ctrl_status_end+0x88>)
   11f0c:	4798      	blx	r3
		break;
   11f0e:	e000      	b.n	11f12 <usbdc_ctrl_status_end+0x7e>
		return;
   11f10:	bf00      	nop
	}
}
   11f12:	3708      	adds	r7, #8
   11f14:	46bd      	mov	sp, r7
   11f16:	bd80      	pop	{r7, pc}
   11f18:	20008d20 	.word	0x20008d20
   11f1c:	00011d71 	.word	0x00011d71
   11f20:	00011af1 	.word	0x00011af1

00011f24 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
   11f24:	b580      	push	{r7, lr}
   11f26:	b082      	sub	sp, #8
   11f28:	af00      	add	r7, sp, #0
   11f2a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   11f2c:	2201      	movs	r2, #1
   11f2e:	6879      	ldr	r1, [r7, #4]
   11f30:	2000      	movs	r0, #0
   11f32:	4b03      	ldr	r3, [pc, #12]	; (11f40 <usbdc_ctrl_data_end+0x1c>)
   11f34:	4798      	blx	r3
	return false;
   11f36:	2300      	movs	r3, #0
}
   11f38:	4618      	mov	r0, r3
   11f3a:	3708      	adds	r7, #8
   11f3c:	46bd      	mov	sp, r7
   11f3e:	bd80      	pop	{r7, pc}
   11f40:	00011db1 	.word	0x00011db1

00011f44 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   11f44:	b580      	push	{r7, lr}
   11f46:	b082      	sub	sp, #8
   11f48:	af00      	add	r7, sp, #0
   11f4a:	4603      	mov	r3, r0
   11f4c:	603a      	str	r2, [r7, #0]
   11f4e:	71fb      	strb	r3, [r7, #7]
   11f50:	460b      	mov	r3, r1
   11f52:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
   11f54:	79bb      	ldrb	r3, [r7, #6]
   11f56:	2b00      	cmp	r3, #0
   11f58:	d002      	beq.n	11f60 <usbdc_cb_ctl_done+0x1c>
   11f5a:	2b01      	cmp	r3, #1
   11f5c:	d004      	beq.n	11f68 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
   11f5e:	e008      	b.n	11f72 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
   11f60:	6838      	ldr	r0, [r7, #0]
   11f62:	4b06      	ldr	r3, [pc, #24]	; (11f7c <usbdc_cb_ctl_done+0x38>)
   11f64:	4798      	blx	r3
		break;
   11f66:	e004      	b.n	11f72 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
   11f68:	6838      	ldr	r0, [r7, #0]
   11f6a:	4b05      	ldr	r3, [pc, #20]	; (11f80 <usbdc_cb_ctl_done+0x3c>)
   11f6c:	4798      	blx	r3
   11f6e:	4603      	mov	r3, r0
   11f70:	e000      	b.n	11f74 <usbdc_cb_ctl_done+0x30>
	}
	return false;
   11f72:	2300      	movs	r3, #0
}
   11f74:	4618      	mov	r0, r3
   11f76:	3708      	adds	r7, #8
   11f78:	46bd      	mov	sp, r7
   11f7a:	bd80      	pop	{r7, pc}
   11f7c:	00011e95 	.word	0x00011e95
   11f80:	00011f25 	.word	0x00011f25

00011f84 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   11f84:	b580      	push	{r7, lr}
   11f86:	af00      	add	r7, sp, #0
	usbdc_unconfig();
   11f88:	4b10      	ldr	r3, [pc, #64]	; (11fcc <usbdc_reset+0x48>)
   11f8a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
   11f8c:	4b10      	ldr	r3, [pc, #64]	; (11fd0 <usbdc_reset+0x4c>)
   11f8e:	2202      	movs	r2, #2
   11f90:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
   11f92:	4b0f      	ldr	r3, [pc, #60]	; (11fd0 <usbdc_reset+0x4c>)
   11f94:	2200      	movs	r2, #0
   11f96:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
   11f98:	4b0d      	ldr	r3, [pc, #52]	; (11fd0 <usbdc_reset+0x4c>)
   11f9a:	2200      	movs	r2, #0
   11f9c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
   11f9e:	2000      	movs	r0, #0
   11fa0:	4b0c      	ldr	r3, [pc, #48]	; (11fd4 <usbdc_reset+0x50>)
   11fa2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   11fa4:	4b0a      	ldr	r3, [pc, #40]	; (11fd0 <usbdc_reset+0x4c>)
   11fa6:	7f1b      	ldrb	r3, [r3, #28]
   11fa8:	4618      	mov	r0, r3
   11faa:	4b0b      	ldr	r3, [pc, #44]	; (11fd8 <usbdc_reset+0x54>)
   11fac:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   11fae:	4a0b      	ldr	r2, [pc, #44]	; (11fdc <usbdc_reset+0x58>)
   11fb0:	2100      	movs	r1, #0
   11fb2:	2000      	movs	r0, #0
   11fb4:	4b0a      	ldr	r3, [pc, #40]	; (11fe0 <usbdc_reset+0x5c>)
   11fb6:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   11fb8:	4a0a      	ldr	r2, [pc, #40]	; (11fe4 <usbdc_reset+0x60>)
   11fba:	2102      	movs	r1, #2
   11fbc:	2000      	movs	r0, #0
   11fbe:	4b08      	ldr	r3, [pc, #32]	; (11fe0 <usbdc_reset+0x5c>)
   11fc0:	4798      	blx	r3
	usb_d_ep_enable(0);
   11fc2:	2000      	movs	r0, #0
   11fc4:	4b08      	ldr	r3, [pc, #32]	; (11fe8 <usbdc_reset+0x64>)
   11fc6:	4798      	blx	r3
}
   11fc8:	bf00      	nop
   11fca:	bd80      	pop	{r7, pc}
   11fcc:	000119d1 	.word	0x000119d1
   11fd0:	20008d20 	.word	0x20008d20
   11fd4:	000075cd 	.word	0x000075cd
   11fd8:	00007509 	.word	0x00007509
   11fdc:	00011e21 	.word	0x00011e21
   11fe0:	00007921 	.word	0x00007921
   11fe4:	00011f45 	.word	0x00011f45
   11fe8:	0000761d 	.word	0x0000761d

00011fec <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
   11fec:	b580      	push	{r7, lr}
   11fee:	b082      	sub	sp, #8
   11ff0:	af00      	add	r7, sp, #0
   11ff2:	4603      	mov	r3, r0
   11ff4:	6039      	str	r1, [r7, #0]
   11ff6:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
   11ff8:	79fb      	ldrb	r3, [r7, #7]
   11ffa:	2b00      	cmp	r3, #0
   11ffc:	d002      	beq.n	12004 <usbd_event_cb+0x18>
   11ffe:	2b01      	cmp	r3, #1
   12000:	d005      	beq.n	1200e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
   12002:	e007      	b.n	12014 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
   12004:	6839      	ldr	r1, [r7, #0]
   12006:	2000      	movs	r0, #0
   12008:	4b04      	ldr	r3, [pc, #16]	; (1201c <usbd_event_cb+0x30>)
   1200a:	4798      	blx	r3
		break;
   1200c:	e002      	b.n	12014 <usbd_event_cb+0x28>
		usbdc_reset();
   1200e:	4b04      	ldr	r3, [pc, #16]	; (12020 <usbd_event_cb+0x34>)
   12010:	4798      	blx	r3
		break;
   12012:	bf00      	nop
	}
}
   12014:	bf00      	nop
   12016:	3708      	adds	r7, #8
   12018:	46bd      	mov	sp, r7
   1201a:	bd80      	pop	{r7, pc}
   1201c:	00011d71 	.word	0x00011d71
   12020:	00011f85 	.word	0x00011f85

00012024 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   12024:	b580      	push	{r7, lr}
   12026:	b088      	sub	sp, #32
   12028:	af00      	add	r7, sp, #0
   1202a:	60b9      	str	r1, [r7, #8]
   1202c:	607a      	str	r2, [r7, #4]
   1202e:	461a      	mov	r2, r3
   12030:	4603      	mov	r3, r0
   12032:	73fb      	strb	r3, [r7, #15]
   12034:	4613      	mov	r3, r2
   12036:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   12038:	68bb      	ldr	r3, [r7, #8]
   1203a:	617b      	str	r3, [r7, #20]
   1203c:	687b      	ldr	r3, [r7, #4]
   1203e:	61bb      	str	r3, [r7, #24]
   12040:	7bfb      	ldrb	r3, [r7, #15]
   12042:	773b      	strb	r3, [r7, #28]
   12044:	7bbb      	ldrb	r3, [r7, #14]
   12046:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
   12048:	f107 0314 	add.w	r3, r7, #20
   1204c:	4618      	mov	r0, r3
   1204e:	4b03      	ldr	r3, [pc, #12]	; (1205c <usbdc_xfer+0x38>)
   12050:	4798      	blx	r3
   12052:	4603      	mov	r3, r0
}
   12054:	4618      	mov	r0, r3
   12056:	3720      	adds	r7, #32
   12058:	46bd      	mov	sp, r7
   1205a:	bd80      	pop	{r7, pc}
   1205c:	0000768d 	.word	0x0000768d

00012060 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
   12060:	b580      	push	{r7, lr}
   12062:	b082      	sub	sp, #8
   12064:	af00      	add	r7, sp, #0
   12066:	4603      	mov	r3, r0
   12068:	6039      	str	r1, [r7, #0]
   1206a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
   1206c:	79fb      	ldrb	r3, [r7, #7]
   1206e:	2b01      	cmp	r3, #1
   12070:	d009      	beq.n	12086 <usbdc_register_handler+0x26>
   12072:	2b02      	cmp	r3, #2
   12074:	d00c      	beq.n	12090 <usbdc_register_handler+0x30>
   12076:	2b00      	cmp	r3, #0
   12078:	d000      	beq.n	1207c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
   1207a:	e00e      	b.n	1209a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   1207c:	6839      	ldr	r1, [r7, #0]
   1207e:	4809      	ldr	r0, [pc, #36]	; (120a4 <usbdc_register_handler+0x44>)
   12080:	4b09      	ldr	r3, [pc, #36]	; (120a8 <usbdc_register_handler+0x48>)
   12082:	4798      	blx	r3
		break;
   12084:	e009      	b.n	1209a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   12086:	6839      	ldr	r1, [r7, #0]
   12088:	4808      	ldr	r0, [pc, #32]	; (120ac <usbdc_register_handler+0x4c>)
   1208a:	4b07      	ldr	r3, [pc, #28]	; (120a8 <usbdc_register_handler+0x48>)
   1208c:	4798      	blx	r3
		break;
   1208e:	e004      	b.n	1209a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   12090:	6839      	ldr	r1, [r7, #0]
   12092:	4807      	ldr	r0, [pc, #28]	; (120b0 <usbdc_register_handler+0x50>)
   12094:	4b04      	ldr	r3, [pc, #16]	; (120a8 <usbdc_register_handler+0x48>)
   12096:	4798      	blx	r3
		break;
   12098:	bf00      	nop
	}
}
   1209a:	bf00      	nop
   1209c:	3708      	adds	r7, #8
   1209e:	46bd      	mov	sp, r7
   120a0:	bd80      	pop	{r7, pc}
   120a2:	bf00      	nop
   120a4:	20008d24 	.word	0x20008d24
   120a8:	00007a79 	.word	0x00007a79
   120ac:	20008d28 	.word	0x20008d28
   120b0:	20008d2c 	.word	0x20008d2c

000120b4 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   120b4:	b580      	push	{r7, lr}
   120b6:	b084      	sub	sp, #16
   120b8:	af00      	add	r7, sp, #0
   120ba:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
   120bc:	687b      	ldr	r3, [r7, #4]
   120be:	2b00      	cmp	r3, #0
   120c0:	bf14      	ite	ne
   120c2:	2301      	movne	r3, #1
   120c4:	2300      	moveq	r3, #0
   120c6:	b2db      	uxtb	r3, r3
   120c8:	f240 3255 	movw	r2, #853	; 0x355
   120cc:	4910      	ldr	r1, [pc, #64]	; (12110 <usbdc_init+0x5c>)
   120ce:	4618      	mov	r0, r3
   120d0:	4b10      	ldr	r3, [pc, #64]	; (12114 <usbdc_init+0x60>)
   120d2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   120d4:	4b10      	ldr	r3, [pc, #64]	; (12118 <usbdc_init+0x64>)
   120d6:	4798      	blx	r3
   120d8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
   120da:	68fb      	ldr	r3, [r7, #12]
   120dc:	2b00      	cmp	r3, #0
   120de:	da01      	bge.n	120e4 <usbdc_init+0x30>
		return rc;
   120e0:	68fb      	ldr	r3, [r7, #12]
   120e2:	e010      	b.n	12106 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
   120e4:	2220      	movs	r2, #32
   120e6:	2100      	movs	r1, #0
   120e8:	480c      	ldr	r0, [pc, #48]	; (1211c <usbdc_init+0x68>)
   120ea:	4b0d      	ldr	r3, [pc, #52]	; (12120 <usbdc_init+0x6c>)
   120ec:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
   120ee:	4a0b      	ldr	r2, [pc, #44]	; (1211c <usbdc_init+0x68>)
   120f0:	687b      	ldr	r3, [r7, #4]
   120f2:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   120f4:	490b      	ldr	r1, [pc, #44]	; (12124 <usbdc_init+0x70>)
   120f6:	2000      	movs	r0, #0
   120f8:	4b0b      	ldr	r3, [pc, #44]	; (12128 <usbdc_init+0x74>)
   120fa:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   120fc:	490b      	ldr	r1, [pc, #44]	; (1212c <usbdc_init+0x78>)
   120fe:	2001      	movs	r0, #1
   12100:	4b09      	ldr	r3, [pc, #36]	; (12128 <usbdc_init+0x74>)
   12102:	4798      	blx	r3

	return 0;
   12104:	2300      	movs	r3, #0
}
   12106:	4618      	mov	r0, r3
   12108:	3710      	adds	r7, #16
   1210a:	46bd      	mov	sp, r7
   1210c:	bd80      	pop	{r7, pc}
   1210e:	bf00      	nop
   12110:	0001fc78 	.word	0x0001fc78
   12114:	0000799d 	.word	0x0000799d
   12118:	000073f5 	.word	0x000073f5
   1211c:	20008d20 	.word	0x20008d20
   12120:	0001b491 	.word	0x0001b491
   12124:	00011e11 	.word	0x00011e11
   12128:	000074a1 	.word	0x000074a1
   1212c:	00011fed 	.word	0x00011fed

00012130 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   12130:	b580      	push	{r7, lr}
   12132:	b082      	sub	sp, #8
   12134:	af00      	add	r7, sp, #0
   12136:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
   12138:	6879      	ldr	r1, [r7, #4]
   1213a:	4803      	ldr	r0, [pc, #12]	; (12148 <usbdc_register_function+0x18>)
   1213c:	4b03      	ldr	r3, [pc, #12]	; (1214c <usbdc_register_function+0x1c>)
   1213e:	4798      	blx	r3
}
   12140:	bf00      	nop
   12142:	3708      	adds	r7, #8
   12144:	46bd      	mov	sp, r7
   12146:	bd80      	pop	{r7, pc}
   12148:	20008d30 	.word	0x20008d30
   1214c:	00007a79 	.word	0x00007a79

00012150 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   12150:	b580      	push	{r7, lr}
   12152:	b082      	sub	sp, #8
   12154:	af00      	add	r7, sp, #0
   12156:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
   12158:	4b0f      	ldr	r3, [pc, #60]	; (12198 <usbdc_start+0x48>)
   1215a:	7e9b      	ldrb	r3, [r3, #26]
   1215c:	2b00      	cmp	r3, #0
   1215e:	d002      	beq.n	12166 <usbdc_start+0x16>
		return ERR_BUSY;
   12160:	f06f 0303 	mvn.w	r3, #3
   12164:	e013      	b.n	1218e <usbdc_start+0x3e>
	}

	if (desces) {
   12166:	687b      	ldr	r3, [r7, #4]
   12168:	2b00      	cmp	r3, #0
   1216a:	d00e      	beq.n	1218a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
   1216c:	4a0a      	ldr	r2, [pc, #40]	; (12198 <usbdc_start+0x48>)
   1216e:	687b      	ldr	r3, [r7, #4]
   12170:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   12172:	687b      	ldr	r3, [r7, #4]
   12174:	681b      	ldr	r3, [r3, #0]
   12176:	79da      	ldrb	r2, [r3, #7]
   12178:	4b07      	ldr	r3, [pc, #28]	; (12198 <usbdc_start+0x48>)
   1217a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   1217c:	4b06      	ldr	r3, [pc, #24]	; (12198 <usbdc_start+0x48>)
   1217e:	2201      	movs	r2, #1
   12180:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   12182:	4b06      	ldr	r3, [pc, #24]	; (1219c <usbdc_start+0x4c>)
   12184:	4798      	blx	r3
	return ERR_NONE;
   12186:	2300      	movs	r3, #0
   12188:	e001      	b.n	1218e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
   1218a:	f06f 0308 	mvn.w	r3, #8
}
   1218e:	4618      	mov	r0, r3
   12190:	3708      	adds	r7, #8
   12192:	46bd      	mov	sp, r7
   12194:	bd80      	pop	{r7, pc}
   12196:	bf00      	nop
   12198:	20008d20 	.word	0x20008d20
   1219c:	000074c5 	.word	0x000074c5

000121a0 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
   121a0:	b580      	push	{r7, lr}
   121a2:	af00      	add	r7, sp, #0
	usb_d_attach();
   121a4:	4b01      	ldr	r3, [pc, #4]	; (121ac <usbdc_attach+0xc>)
   121a6:	4798      	blx	r3
}
   121a8:	bf00      	nop
   121aa:	bd80      	pop	{r7, pc}
   121ac:	000074d9 	.word	0x000074d9

000121b0 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
   121b0:	b480      	push	{r7}
   121b2:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
   121b4:	4b03      	ldr	r3, [pc, #12]	; (121c4 <usbdc_get_ctrl_buffer+0x14>)
   121b6:	695b      	ldr	r3, [r3, #20]
}
   121b8:	4618      	mov	r0, r3
   121ba:	46bd      	mov	sp, r7
   121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   121c0:	4770      	bx	lr
   121c2:	bf00      	nop
   121c4:	20008d20 	.word	0x20008d20

000121c8 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
   121c8:	b480      	push	{r7}
   121ca:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
   121cc:	4b07      	ldr	r3, [pc, #28]	; (121ec <usbdc_get_state+0x24>)
   121ce:	7e9b      	ldrb	r3, [r3, #26]
   121d0:	f003 0310 	and.w	r3, r3, #16
   121d4:	2b00      	cmp	r3, #0
   121d6:	d001      	beq.n	121dc <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
   121d8:	2310      	movs	r3, #16
   121da:	e001      	b.n	121e0 <usbdc_get_state+0x18>
	}
	return usbdc.state;
   121dc:	4b03      	ldr	r3, [pc, #12]	; (121ec <usbdc_get_state+0x24>)
   121de:	7e9b      	ldrb	r3, [r3, #26]
}
   121e0:	4618      	mov	r0, r3
   121e2:	46bd      	mov	sp, r7
   121e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   121e8:	4770      	bx	lr
   121ea:	bf00      	nop
   121ec:	20008d20 	.word	0x20008d20

000121f0 <usb_get_u16>:
{
   121f0:	b480      	push	{r7}
   121f2:	b083      	sub	sp, #12
   121f4:	af00      	add	r7, sp, #0
   121f6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
   121f8:	687b      	ldr	r3, [r7, #4]
   121fa:	781b      	ldrb	r3, [r3, #0]
   121fc:	b29a      	uxth	r2, r3
   121fe:	687b      	ldr	r3, [r7, #4]
   12200:	3301      	adds	r3, #1
   12202:	781b      	ldrb	r3, [r3, #0]
   12204:	b29b      	uxth	r3, r3
   12206:	021b      	lsls	r3, r3, #8
   12208:	b29b      	uxth	r3, r3
   1220a:	4413      	add	r3, r2
   1220c:	b29b      	uxth	r3, r3
}
   1220e:	4618      	mov	r0, r3
   12210:	370c      	adds	r7, #12
   12212:	46bd      	mov	sp, r7
   12214:	f85d 7b04 	ldr.w	r7, [sp], #4
   12218:	4770      	bx	lr

0001221a <usb_desc_len>:
{
   1221a:	b480      	push	{r7}
   1221c:	b083      	sub	sp, #12
   1221e:	af00      	add	r7, sp, #0
   12220:	6078      	str	r0, [r7, #4]
	return desc[0];
   12222:	687b      	ldr	r3, [r7, #4]
   12224:	781b      	ldrb	r3, [r3, #0]
}
   12226:	4618      	mov	r0, r3
   12228:	370c      	adds	r7, #12
   1222a:	46bd      	mov	sp, r7
   1222c:	f85d 7b04 	ldr.w	r7, [sp], #4
   12230:	4770      	bx	lr

00012232 <usb_desc_type>:
{
   12232:	b480      	push	{r7}
   12234:	b083      	sub	sp, #12
   12236:	af00      	add	r7, sp, #0
   12238:	6078      	str	r0, [r7, #4]
	return desc[1];
   1223a:	687b      	ldr	r3, [r7, #4]
   1223c:	3301      	adds	r3, #1
   1223e:	781b      	ldrb	r3, [r3, #0]
}
   12240:	4618      	mov	r0, r3
   12242:	370c      	adds	r7, #12
   12244:	46bd      	mov	sp, r7
   12246:	f85d 7b04 	ldr.w	r7, [sp], #4
   1224a:	4770      	bx	lr

0001224c <usb_desc_next>:
{
   1224c:	b580      	push	{r7, lr}
   1224e:	b082      	sub	sp, #8
   12250:	af00      	add	r7, sp, #0
   12252:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
   12254:	6878      	ldr	r0, [r7, #4]
   12256:	4b05      	ldr	r3, [pc, #20]	; (1226c <usb_desc_next+0x20>)
   12258:	4798      	blx	r3
   1225a:	4603      	mov	r3, r0
   1225c:	461a      	mov	r2, r3
   1225e:	687b      	ldr	r3, [r7, #4]
   12260:	4413      	add	r3, r2
}
   12262:	4618      	mov	r0, r3
   12264:	3708      	adds	r7, #8
   12266:	46bd      	mov	sp, r7
   12268:	bd80      	pop	{r7, pc}
   1226a:	bf00      	nop
   1226c:	0001221b 	.word	0x0001221b

00012270 <usb_cfg_desc_total_len>:
{
   12270:	b580      	push	{r7, lr}
   12272:	b082      	sub	sp, #8
   12274:	af00      	add	r7, sp, #0
   12276:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
   12278:	687b      	ldr	r3, [r7, #4]
   1227a:	3302      	adds	r3, #2
   1227c:	4618      	mov	r0, r3
   1227e:	4b03      	ldr	r3, [pc, #12]	; (1228c <usb_cfg_desc_total_len+0x1c>)
   12280:	4798      	blx	r3
   12282:	4603      	mov	r3, r0
}
   12284:	4618      	mov	r0, r3
   12286:	3708      	adds	r7, #8
   12288:	46bd      	mov	sp, r7
   1228a:	bd80      	pop	{r7, pc}
   1228c:	000121f1 	.word	0x000121f1

00012290 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
   12290:	b580      	push	{r7, lr}
   12292:	b082      	sub	sp, #8
   12294:	af00      	add	r7, sp, #0
   12296:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
   12298:	6878      	ldr	r0, [r7, #4]
   1229a:	4b05      	ldr	r3, [pc, #20]	; (122b0 <usb_cfg_desc_next+0x20>)
   1229c:	4798      	blx	r3
   1229e:	4603      	mov	r3, r0
   122a0:	461a      	mov	r2, r3
   122a2:	687b      	ldr	r3, [r7, #4]
   122a4:	4413      	add	r3, r2
}
   122a6:	4618      	mov	r0, r3
   122a8:	3708      	adds	r7, #8
   122aa:	46bd      	mov	sp, r7
   122ac:	bd80      	pop	{r7, pc}
   122ae:	bf00      	nop
   122b0:	00012271 	.word	0x00012271

000122b4 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
   122b4:	b580      	push	{r7, lr}
   122b6:	b084      	sub	sp, #16
   122b8:	af00      	add	r7, sp, #0
   122ba:	60f8      	str	r0, [r7, #12]
   122bc:	60b9      	str	r1, [r7, #8]
   122be:	4613      	mov	r3, r2
   122c0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   122c2:	e015      	b.n	122f0 <usb_find_desc+0x3c>
		_desc_len_check();
   122c4:	68f8      	ldr	r0, [r7, #12]
   122c6:	4b0f      	ldr	r3, [pc, #60]	; (12304 <usb_find_desc+0x50>)
   122c8:	4798      	blx	r3
   122ca:	4603      	mov	r3, r0
   122cc:	2b01      	cmp	r3, #1
   122ce:	d801      	bhi.n	122d4 <usb_find_desc+0x20>
   122d0:	2300      	movs	r3, #0
   122d2:	e012      	b.n	122fa <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
   122d4:	68f8      	ldr	r0, [r7, #12]
   122d6:	4b0c      	ldr	r3, [pc, #48]	; (12308 <usb_find_desc+0x54>)
   122d8:	4798      	blx	r3
   122da:	4603      	mov	r3, r0
   122dc:	461a      	mov	r2, r3
   122de:	79fb      	ldrb	r3, [r7, #7]
   122e0:	4293      	cmp	r3, r2
   122e2:	d101      	bne.n	122e8 <usb_find_desc+0x34>
			return desc;
   122e4:	68fb      	ldr	r3, [r7, #12]
   122e6:	e008      	b.n	122fa <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
   122e8:	68f8      	ldr	r0, [r7, #12]
   122ea:	4b08      	ldr	r3, [pc, #32]	; (1230c <usb_find_desc+0x58>)
   122ec:	4798      	blx	r3
   122ee:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   122f0:	68fa      	ldr	r2, [r7, #12]
   122f2:	68bb      	ldr	r3, [r7, #8]
   122f4:	429a      	cmp	r2, r3
   122f6:	d3e5      	bcc.n	122c4 <usb_find_desc+0x10>
	}
	return NULL;
   122f8:	2300      	movs	r3, #0
}
   122fa:	4618      	mov	r0, r3
   122fc:	3710      	adds	r7, #16
   122fe:	46bd      	mov	sp, r7
   12300:	bd80      	pop	{r7, pc}
   12302:	bf00      	nop
   12304:	0001221b 	.word	0x0001221b
   12308:	00012233 	.word	0x00012233
   1230c:	0001224d 	.word	0x0001224d

00012310 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
   12310:	b580      	push	{r7, lr}
   12312:	b082      	sub	sp, #8
   12314:	af00      	add	r7, sp, #0
   12316:	6078      	str	r0, [r7, #4]
   12318:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
   1231a:	e019      	b.n	12350 <usb_find_ep_desc+0x40>
		_desc_len_check();
   1231c:	6878      	ldr	r0, [r7, #4]
   1231e:	4b12      	ldr	r3, [pc, #72]	; (12368 <usb_find_ep_desc+0x58>)
   12320:	4798      	blx	r3
   12322:	4603      	mov	r3, r0
   12324:	2b01      	cmp	r3, #1
   12326:	d801      	bhi.n	1232c <usb_find_ep_desc+0x1c>
   12328:	2300      	movs	r3, #0
   1232a:	e018      	b.n	1235e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
   1232c:	6878      	ldr	r0, [r7, #4]
   1232e:	4b0f      	ldr	r3, [pc, #60]	; (1236c <usb_find_ep_desc+0x5c>)
   12330:	4798      	blx	r3
   12332:	4603      	mov	r3, r0
   12334:	2b04      	cmp	r3, #4
   12336:	d010      	beq.n	1235a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
   12338:	6878      	ldr	r0, [r7, #4]
   1233a:	4b0c      	ldr	r3, [pc, #48]	; (1236c <usb_find_ep_desc+0x5c>)
   1233c:	4798      	blx	r3
   1233e:	4603      	mov	r3, r0
   12340:	2b05      	cmp	r3, #5
   12342:	d101      	bne.n	12348 <usb_find_ep_desc+0x38>
			return desc;
   12344:	687b      	ldr	r3, [r7, #4]
   12346:	e00a      	b.n	1235e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
   12348:	6878      	ldr	r0, [r7, #4]
   1234a:	4b09      	ldr	r3, [pc, #36]	; (12370 <usb_find_ep_desc+0x60>)
   1234c:	4798      	blx	r3
   1234e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
   12350:	687a      	ldr	r2, [r7, #4]
   12352:	683b      	ldr	r3, [r7, #0]
   12354:	429a      	cmp	r2, r3
   12356:	d3e1      	bcc.n	1231c <usb_find_ep_desc+0xc>
   12358:	e000      	b.n	1235c <usb_find_ep_desc+0x4c>
			break;
   1235a:	bf00      	nop
	}
	return NULL;
   1235c:	2300      	movs	r3, #0
}
   1235e:	4618      	mov	r0, r3
   12360:	3708      	adds	r7, #8
   12362:	46bd      	mov	sp, r7
   12364:	bd80      	pop	{r7, pc}
   12366:	bf00      	nop
   12368:	0001221b 	.word	0x0001221b
   1236c:	00012233 	.word	0x00012233
   12370:	0001224d 	.word	0x0001224d

00012374 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
   12374:	b580      	push	{r7, lr}
   12376:	b084      	sub	sp, #16
   12378:	af00      	add	r7, sp, #0
   1237a:	60f8      	str	r0, [r7, #12]
   1237c:	60b9      	str	r1, [r7, #8]
   1237e:	4613      	mov	r3, r2
   12380:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
   12382:	2202      	movs	r2, #2
   12384:	68b9      	ldr	r1, [r7, #8]
   12386:	68f8      	ldr	r0, [r7, #12]
   12388:	4b15      	ldr	r3, [pc, #84]	; (123e0 <usb_find_cfg_desc+0x6c>)
   1238a:	4798      	blx	r3
   1238c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
   1238e:	68fb      	ldr	r3, [r7, #12]
   12390:	2b00      	cmp	r3, #0
   12392:	d11a      	bne.n	123ca <usb_find_cfg_desc+0x56>
		return NULL;
   12394:	2300      	movs	r3, #0
   12396:	e01f      	b.n	123d8 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
   12398:	68f8      	ldr	r0, [r7, #12]
   1239a:	4b12      	ldr	r3, [pc, #72]	; (123e4 <usb_find_cfg_desc+0x70>)
   1239c:	4798      	blx	r3
   1239e:	4603      	mov	r3, r0
   123a0:	2b01      	cmp	r3, #1
   123a2:	d801      	bhi.n	123a8 <usb_find_cfg_desc+0x34>
   123a4:	2300      	movs	r3, #0
   123a6:	e017      	b.n	123d8 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
   123a8:	68fb      	ldr	r3, [r7, #12]
   123aa:	3301      	adds	r3, #1
   123ac:	781b      	ldrb	r3, [r3, #0]
   123ae:	2b02      	cmp	r3, #2
   123b0:	d110      	bne.n	123d4 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	3305      	adds	r3, #5
   123b6:	781b      	ldrb	r3, [r3, #0]
   123b8:	79fa      	ldrb	r2, [r7, #7]
   123ba:	429a      	cmp	r2, r3
   123bc:	d101      	bne.n	123c2 <usb_find_cfg_desc+0x4e>
			return desc;
   123be:	68fb      	ldr	r3, [r7, #12]
   123c0:	e00a      	b.n	123d8 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
   123c2:	68f8      	ldr	r0, [r7, #12]
   123c4:	4b08      	ldr	r3, [pc, #32]	; (123e8 <usb_find_cfg_desc+0x74>)
   123c6:	4798      	blx	r3
   123c8:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
   123ca:	68fa      	ldr	r2, [r7, #12]
   123cc:	68bb      	ldr	r3, [r7, #8]
   123ce:	429a      	cmp	r2, r3
   123d0:	d3e2      	bcc.n	12398 <usb_find_cfg_desc+0x24>
   123d2:	e000      	b.n	123d6 <usb_find_cfg_desc+0x62>
			break;
   123d4:	bf00      	nop
	}
	return NULL;
   123d6:	2300      	movs	r3, #0
}
   123d8:	4618      	mov	r0, r3
   123da:	3710      	adds	r7, #16
   123dc:	46bd      	mov	sp, r7
   123de:	bd80      	pop	{r7, pc}
   123e0:	000122b5 	.word	0x000122b5
   123e4:	0001221b 	.word	0x0001221b
   123e8:	00012291 	.word	0x00012291

000123ec <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
   123ec:	b580      	push	{r7, lr}
   123ee:	b086      	sub	sp, #24
   123f0:	af00      	add	r7, sp, #0
   123f2:	60f8      	str	r0, [r7, #12]
   123f4:	60b9      	str	r1, [r7, #8]
   123f6:	4613      	mov	r3, r2
   123f8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
   123fa:	2300      	movs	r3, #0
   123fc:	75fb      	strb	r3, [r7, #23]
   123fe:	e020      	b.n	12442 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
   12400:	2203      	movs	r2, #3
   12402:	68b9      	ldr	r1, [r7, #8]
   12404:	68f8      	ldr	r0, [r7, #12]
   12406:	4b13      	ldr	r3, [pc, #76]	; (12454 <usb_find_str_desc+0x68>)
   12408:	4798      	blx	r3
   1240a:	60f8      	str	r0, [r7, #12]
		if (desc) {
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	2b00      	cmp	r3, #0
   12410:	d015      	beq.n	1243e <usb_find_str_desc+0x52>
			_desc_len_check();
   12412:	68f8      	ldr	r0, [r7, #12]
   12414:	4b10      	ldr	r3, [pc, #64]	; (12458 <usb_find_str_desc+0x6c>)
   12416:	4798      	blx	r3
   12418:	4603      	mov	r3, r0
   1241a:	2b01      	cmp	r3, #1
   1241c:	d801      	bhi.n	12422 <usb_find_str_desc+0x36>
   1241e:	2300      	movs	r3, #0
   12420:	e014      	b.n	1244c <usb_find_str_desc+0x60>
			if (i == str_index) {
   12422:	7dfa      	ldrb	r2, [r7, #23]
   12424:	79fb      	ldrb	r3, [r7, #7]
   12426:	429a      	cmp	r2, r3
   12428:	d101      	bne.n	1242e <usb_find_str_desc+0x42>
				return desc;
   1242a:	68fb      	ldr	r3, [r7, #12]
   1242c:	e00e      	b.n	1244c <usb_find_str_desc+0x60>
			}
			i++;
   1242e:	7dfb      	ldrb	r3, [r7, #23]
   12430:	3301      	adds	r3, #1
   12432:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
   12434:	68f8      	ldr	r0, [r7, #12]
   12436:	4b09      	ldr	r3, [pc, #36]	; (1245c <usb_find_str_desc+0x70>)
   12438:	4798      	blx	r3
   1243a:	60f8      	str	r0, [r7, #12]
   1243c:	e001      	b.n	12442 <usb_find_str_desc+0x56>
		} else {
			return NULL;
   1243e:	2300      	movs	r3, #0
   12440:	e004      	b.n	1244c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
   12442:	68fa      	ldr	r2, [r7, #12]
   12444:	68bb      	ldr	r3, [r7, #8]
   12446:	429a      	cmp	r2, r3
   12448:	d3da      	bcc.n	12400 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
   1244a:	2300      	movs	r3, #0
}
   1244c:	4618      	mov	r0, r3
   1244e:	3718      	adds	r7, #24
   12450:	46bd      	mov	sp, r7
   12452:	bd80      	pop	{r7, pc}
   12454:	000122b5 	.word	0x000122b5
   12458:	0001221b 	.word	0x0001221b
   1245c:	0001224d 	.word	0x0001224d

00012460 <_ZN18ARINC_Buffer_ClassC2Ev>:
static 	uint8_t bufferReceiverBuffer[RX_LABELS_NUMBER][4];             // [# of buffers][16 bytes]
static	uint8_t	bufferTransmitBuffer[TX_LABELS_NUMBER][4];


// default constructor
ARINC_Buffer_Class::ARINC_Buffer_Class()
   12460:	b480      	push	{r7}
   12462:	b083      	sub	sp, #12
   12464:	af00      	add	r7, sp, #0
   12466:	6078      	str	r0, [r7, #4]
   12468:	6039      	str	r1, [r7, #0]
   1246a:	683b      	ldr	r3, [r7, #0]
   1246c:	681a      	ldr	r2, [r3, #0]
   1246e:	687b      	ldr	r3, [r7, #4]
   12470:	601a      	str	r2, [r3, #0]
   12472:	687b      	ldr	r3, [r7, #4]
   12474:	681b      	ldr	r3, [r3, #0]
   12476:	3b0c      	subs	r3, #12
   12478:	681b      	ldr	r3, [r3, #0]
   1247a:	461a      	mov	r2, r3
   1247c:	687b      	ldr	r3, [r7, #4]
   1247e:	4413      	add	r3, r2
   12480:	683a      	ldr	r2, [r7, #0]
   12482:	6852      	ldr	r2, [r2, #4]
   12484:	601a      	str	r2, [r3, #0]
   12486:	687b      	ldr	r3, [r7, #4]
   12488:	681b      	ldr	r3, [r3, #0]
   1248a:	3b10      	subs	r3, #16
   1248c:	681b      	ldr	r3, [r3, #0]
   1248e:	461a      	mov	r2, r3
   12490:	687b      	ldr	r3, [r7, #4]
   12492:	4413      	add	r3, r2
   12494:	683a      	ldr	r2, [r7, #0]
   12496:	6892      	ldr	r2, [r2, #8]
   12498:	601a      	str	r2, [r3, #0]
{
	

	//receiverBuffer=            // [# of buffers][16 bytes]
	//transmitBuffer=&bufferTransmitBuffer[0];
} //ARINC_Buffer_Class
   1249a:	687b      	ldr	r3, [r7, #4]
   1249c:	4618      	mov	r0, r3
   1249e:	370c      	adds	r7, #12
   124a0:	46bd      	mov	sp, r7
   124a2:	bc80      	pop	{r7}
   124a4:	4770      	bx	lr

000124a6 <_ZN18ARINC_Buffer_ClassD2Ev>:

// default destructor
ARINC_Buffer_Class::~ARINC_Buffer_Class()
   124a6:	b480      	push	{r7}
   124a8:	b083      	sub	sp, #12
   124aa:	af00      	add	r7, sp, #0
   124ac:	6078      	str	r0, [r7, #4]
   124ae:	6039      	str	r1, [r7, #0]
   124b0:	683b      	ldr	r3, [r7, #0]
   124b2:	681a      	ldr	r2, [r3, #0]
   124b4:	687b      	ldr	r3, [r7, #4]
   124b6:	601a      	str	r2, [r3, #0]
   124b8:	687b      	ldr	r3, [r7, #4]
   124ba:	681b      	ldr	r3, [r3, #0]
   124bc:	3b0c      	subs	r3, #12
   124be:	681b      	ldr	r3, [r3, #0]
   124c0:	461a      	mov	r2, r3
   124c2:	687b      	ldr	r3, [r7, #4]
   124c4:	4413      	add	r3, r2
   124c6:	683a      	ldr	r2, [r7, #0]
   124c8:	6852      	ldr	r2, [r2, #4]
   124ca:	601a      	str	r2, [r3, #0]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	681b      	ldr	r3, [r3, #0]
   124d0:	3b10      	subs	r3, #16
   124d2:	681b      	ldr	r3, [r3, #0]
   124d4:	461a      	mov	r2, r3
   124d6:	687b      	ldr	r3, [r7, #4]
   124d8:	4413      	add	r3, r2
   124da:	683a      	ldr	r2, [r7, #0]
   124dc:	6892      	ldr	r2, [r2, #8]
   124de:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Buffer_Class
   124e0:	687b      	ldr	r3, [r7, #4]
   124e2:	4618      	mov	r0, r3
   124e4:	370c      	adds	r7, #12
   124e6:	46bd      	mov	sp, r7
   124e8:	bc80      	pop	{r7}
   124ea:	4770      	bx	lr

000124ec <_ZN18ARINC_Buffer_Class10InitBufferEv>:

void	ARINC_Buffer_Class::InitBuffer(void){
   124ec:	b480      	push	{r7}
   124ee:	b085      	sub	sp, #20
   124f0:	af00      	add	r7, sp, #0
   124f2:	6078      	str	r0, [r7, #4]
	LabelsArrayTX=&bufferLabelsArrayTX[0];
   124f4:	687b      	ldr	r3, [r7, #4]
   124f6:	4a1a      	ldr	r2, [pc, #104]	; (12560 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x74>)
   124f8:	605a      	str	r2, [r3, #4]
	LabelsArrayRX1=&bufferLabelsArrayRX1[0];
   124fa:	687b      	ldr	r3, [r7, #4]
   124fc:	4a19      	ldr	r2, [pc, #100]	; (12564 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x78>)
   124fe:	609a      	str	r2, [r3, #8]
	LabelsArrayRX2=&bufferLabelsArrayRX2[0];
   12500:	687b      	ldr	r3, [r7, #4]
   12502:	4a19      	ldr	r2, [pc, #100]	; (12568 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x7c>)
   12504:	60da      	str	r2, [r3, #12]
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
   12506:	2300      	movs	r3, #0
   12508:	73fb      	strb	r3, [r7, #15]
   1250a:	7bfb      	ldrb	r3, [r7, #15]
   1250c:	2b1f      	cmp	r3, #31
   1250e:	dc17      	bgt.n	12540 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x54>
		{
			pointerArrayRX[i]=bufferReceiverBuffer[i];
   12510:	7bfb      	ldrb	r3, [r7, #15]
   12512:	7bfa      	ldrb	r2, [r7, #15]
   12514:	0092      	lsls	r2, r2, #2
   12516:	4915      	ldr	r1, [pc, #84]	; (1256c <_ZN18ARINC_Buffer_Class10InitBufferEv+0x80>)
   12518:	440a      	add	r2, r1
   1251a:	6879      	ldr	r1, [r7, #4]
   1251c:	3328      	adds	r3, #40	; 0x28
   1251e:	009b      	lsls	r3, r3, #2
   12520:	440b      	add	r3, r1
   12522:	605a      	str	r2, [r3, #4]
			pointerArrayTX[i]=bufferTransmitBuffer[i];
   12524:	7bfb      	ldrb	r3, [r7, #15]
   12526:	7bfa      	ldrb	r2, [r7, #15]
   12528:	0092      	lsls	r2, r2, #2
   1252a:	4911      	ldr	r1, [pc, #68]	; (12570 <_ZN18ARINC_Buffer_Class10InitBufferEv+0x84>)
   1252c:	440a      	add	r2, r1
   1252e:	6879      	ldr	r1, [r7, #4]
   12530:	3308      	adds	r3, #8
   12532:	009b      	lsls	r3, r3, #2
   12534:	440b      	add	r3, r1
   12536:	605a      	str	r2, [r3, #4]
		for (uint8_t i = 0; i < TX_LABELS_NUMBER; i++)
   12538:	7bfb      	ldrb	r3, [r7, #15]
   1253a:	3301      	adds	r3, #1
   1253c:	73fb      	strb	r3, [r7, #15]
   1253e:	e7e4      	b.n	1250a <_ZN18ARINC_Buffer_Class10InitBufferEv+0x1e>
		}
		receiverBuffer=pointerArrayRX;
   12540:	687b      	ldr	r3, [r7, #4]
   12542:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
   12546:	687b      	ldr	r3, [r7, #4]
   12548:	611a      	str	r2, [r3, #16]
		transmitBuffer=pointerArrayTX;
   1254a:	687b      	ldr	r3, [r7, #4]
   1254c:	f103 0224 	add.w	r2, r3, #36	; 0x24
   12550:	687b      	ldr	r3, [r7, #4]
   12552:	615a      	str	r2, [r3, #20]
}
   12554:	bf00      	nop
   12556:	3714      	adds	r7, #20
   12558:	46bd      	mov	sp, r7
   1255a:	bc80      	pop	{r7}
   1255c:	4770      	bx	lr
   1255e:	bf00      	nop
   12560:	20008d40 	.word	0x20008d40
   12564:	20008d60 	.word	0x20008d60
   12568:	20008d80 	.word	0x20008d80
   1256c:	20008da0 	.word	0x20008da0
   12570:	20008e20 	.word	0x20008e20

00012574 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv>:

void ARINC_Buffer_Class::SaveTemperature(void){
   12574:	b590      	push	{r4, r7, lr}
   12576:	b085      	sub	sp, #20
   12578:	af00      	add	r7, sp, #0
   1257a:	6078      	str	r0, [r7, #4]
	octalLabel=Label2Byte(COCKPITS_TEMPERATURE);
   1257c:	687b      	ldr	r3, [r7, #4]
   1257e:	681b      	ldr	r3, [r3, #0]
   12580:	3b0c      	subs	r3, #12
   12582:	681b      	ldr	r3, [r3, #0]
   12584:	461a      	mov	r2, r3
   12586:	687b      	ldr	r3, [r7, #4]
   12588:	4413      	add	r3, r2
   1258a:	681b      	ldr	r3, [r3, #0]
   1258c:	3304      	adds	r3, #4
   1258e:	681b      	ldr	r3, [r3, #0]
   12590:	687a      	ldr	r2, [r7, #4]
   12592:	6812      	ldr	r2, [r2, #0]
   12594:	3a0c      	subs	r2, #12
   12596:	6812      	ldr	r2, [r2, #0]
   12598:	4611      	mov	r1, r2
   1259a:	687a      	ldr	r2, [r7, #4]
   1259c:	440a      	add	r2, r1
   1259e:	f44f 71bb 	mov.w	r1, #374	; 0x176
   125a2:	4610      	mov	r0, r2
   125a4:	4798      	blx	r3
   125a6:	4603      	mov	r3, r0
   125a8:	461a      	mov	r2, r3
   125aa:	687b      	ldr	r3, [r7, #4]
   125ac:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   125ae:	687b      	ldr	r3, [r7, #4]
   125b0:	681b      	ldr	r3, [r3, #0]
   125b2:	3b0c      	subs	r3, #12
   125b4:	681b      	ldr	r3, [r3, #0]
   125b6:	461a      	mov	r2, r3
   125b8:	687b      	ldr	r3, [r7, #4]
   125ba:	1898      	adds	r0, r3, r2
   125bc:	687b      	ldr	r3, [r7, #4]
   125be:	7e59      	ldrb	r1, [r3, #25]
   125c0:	687b      	ldr	r3, [r7, #4]
   125c2:	685b      	ldr	r3, [r3, #4]
   125c4:	461a      	mov	r2, r3
   125c6:	4b21      	ldr	r3, [pc, #132]	; (1264c <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xd8>)
   125c8:	4798      	blx	r3
   125ca:	4603      	mov	r3, r0
   125cc:	461a      	mov	r2, r3
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	761a      	strb	r2, [r3, #24]
	float temperature=temperatures.values[0][1];
   125d2:	4b1f      	ldr	r3, [pc, #124]	; (12650 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xdc>)
   125d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   125d6:	60fb      	str	r3, [r7, #12]
	data=MakeLabel374(FloatTwoComplement(temperature,15),temperature);
   125d8:	687b      	ldr	r3, [r7, #4]
   125da:	681b      	ldr	r3, [r3, #0]
   125dc:	3b10      	subs	r3, #16
   125de:	681b      	ldr	r3, [r3, #0]
   125e0:	461a      	mov	r2, r3
   125e2:	687b      	ldr	r3, [r7, #4]
   125e4:	189c      	adds	r4, r3, r2
   125e6:	687b      	ldr	r3, [r7, #4]
   125e8:	681b      	ldr	r3, [r3, #0]
   125ea:	3b0c      	subs	r3, #12
   125ec:	681b      	ldr	r3, [r3, #0]
   125ee:	461a      	mov	r2, r3
   125f0:	687b      	ldr	r3, [r7, #4]
   125f2:	4413      	add	r3, r2
   125f4:	220f      	movs	r2, #15
   125f6:	68f9      	ldr	r1, [r7, #12]
   125f8:	4618      	mov	r0, r3
   125fa:	4b16      	ldr	r3, [pc, #88]	; (12654 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xe0>)
   125fc:	4798      	blx	r3
   125fe:	4603      	mov	r3, r0
   12600:	68fa      	ldr	r2, [r7, #12]
   12602:	4619      	mov	r1, r3
   12604:	4620      	mov	r0, r4
   12606:	4b14      	ldr	r3, [pc, #80]	; (12658 <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xe4>)
   12608:	4798      	blx	r3
   1260a:	4602      	mov	r2, r0
   1260c:	687b      	ldr	r3, [r7, #4]
   1260e:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   12610:	687b      	ldr	r3, [r7, #4]
   12612:	681b      	ldr	r3, [r3, #0]
   12614:	3b0c      	subs	r3, #12
   12616:	681b      	ldr	r3, [r3, #0]
   12618:	461a      	mov	r2, r3
   1261a:	687b      	ldr	r3, [r7, #4]
   1261c:	1898      	adds	r0, r3, r2
   1261e:	687b      	ldr	r3, [r7, #4]
   12620:	69d9      	ldr	r1, [r3, #28]
   12622:	687b      	ldr	r3, [r7, #4]
   12624:	3320      	adds	r3, #32
   12626:	461a      	mov	r2, r3
   12628:	4b0c      	ldr	r3, [pc, #48]	; (1265c <_ZN18ARINC_Buffer_Class15SaveTemperatureEv+0xe8>)
   1262a:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   1262c:	687b      	ldr	r3, [r7, #4]
   1262e:	695a      	ldr	r2, [r3, #20]
   12630:	687b      	ldr	r3, [r7, #4]
   12632:	7e1b      	ldrb	r3, [r3, #24]
   12634:	009b      	lsls	r3, r3, #2
   12636:	4413      	add	r3, r2
   12638:	681b      	ldr	r3, [r3, #0]
   1263a:	687a      	ldr	r2, [r7, #4]
   1263c:	3220      	adds	r2, #32
   1263e:	6812      	ldr	r2, [r2, #0]
   12640:	601a      	str	r2, [r3, #0]
}
   12642:	bf00      	nop
   12644:	3714      	adds	r7, #20
   12646:	46bd      	mov	sp, r7
   12648:	bd90      	pop	{r4, r7, pc}
   1264a:	bf00      	nop
   1264c:	0001297b 	.word	0x0001297b
   12650:	20009b78 	.word	0x20009b78
   12654:	00012a4d 	.word	0x00012a4d
   12658:	00013e1d 	.word	0x00013e1d
   1265c:	00012a09 	.word	0x00012a09

00012660 <_ZN18ARINC_Buffer_Class10SaveStatusEm>:

void ARINC_Buffer_Class::SaveStatus(uint32_t st){
   12660:	b580      	push	{r7, lr}
   12662:	b082      	sub	sp, #8
   12664:	af00      	add	r7, sp, #0
   12666:	6078      	str	r0, [r7, #4]
   12668:	6039      	str	r1, [r7, #0]
	octalLabel=Label2Byte(ECS_COMMAND_ACKNOWLEDGE);
   1266a:	687b      	ldr	r3, [r7, #4]
   1266c:	681b      	ldr	r3, [r3, #0]
   1266e:	3b0c      	subs	r3, #12
   12670:	681b      	ldr	r3, [r3, #0]
   12672:	461a      	mov	r2, r3
   12674:	687b      	ldr	r3, [r7, #4]
   12676:	4413      	add	r3, r2
   12678:	681b      	ldr	r3, [r3, #0]
   1267a:	3304      	adds	r3, #4
   1267c:	681b      	ldr	r3, [r3, #0]
   1267e:	687a      	ldr	r2, [r7, #4]
   12680:	6812      	ldr	r2, [r2, #0]
   12682:	3a0c      	subs	r2, #12
   12684:	6812      	ldr	r2, [r2, #0]
   12686:	4611      	mov	r1, r2
   12688:	687a      	ldr	r2, [r7, #4]
   1268a:	440a      	add	r2, r1
   1268c:	f44f 7187 	mov.w	r1, #270	; 0x10e
   12690:	4610      	mov	r0, r2
   12692:	4798      	blx	r3
   12694:	4603      	mov	r3, r0
   12696:	461a      	mov	r2, r3
   12698:	687b      	ldr	r3, [r7, #4]
   1269a:	765a      	strb	r2, [r3, #25]
	index=GetIndexTXLabelarray(octalLabel,LabelsArrayTX);
   1269c:	687b      	ldr	r3, [r7, #4]
   1269e:	681b      	ldr	r3, [r3, #0]
   126a0:	3b0c      	subs	r3, #12
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	461a      	mov	r2, r3
   126a6:	687b      	ldr	r3, [r7, #4]
   126a8:	1898      	adds	r0, r3, r2
   126aa:	687b      	ldr	r3, [r7, #4]
   126ac:	7e59      	ldrb	r1, [r3, #25]
   126ae:	687b      	ldr	r3, [r7, #4]
   126b0:	685b      	ldr	r3, [r3, #4]
   126b2:	461a      	mov	r2, r3
   126b4:	4b18      	ldr	r3, [pc, #96]	; (12718 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xb8>)
   126b6:	4798      	blx	r3
   126b8:	4603      	mov	r3, r0
   126ba:	461a      	mov	r2, r3
   126bc:	687b      	ldr	r3, [r7, #4]
   126be:	761a      	strb	r2, [r3, #24]
	data=MakeLabel270(st);
   126c0:	687b      	ldr	r3, [r7, #4]
   126c2:	681b      	ldr	r3, [r3, #0]
   126c4:	3b10      	subs	r3, #16
   126c6:	681b      	ldr	r3, [r3, #0]
   126c8:	461a      	mov	r2, r3
   126ca:	687b      	ldr	r3, [r7, #4]
   126cc:	4413      	add	r3, r2
   126ce:	6839      	ldr	r1, [r7, #0]
   126d0:	4618      	mov	r0, r3
   126d2:	4b12      	ldr	r3, [pc, #72]	; (1271c <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xbc>)
   126d4:	4798      	blx	r3
   126d6:	4602      	mov	r2, r0
   126d8:	687b      	ldr	r3, [r7, #4]
   126da:	61da      	str	r2, [r3, #28]
	Uint32FourBytesArray(data,localArray);
   126dc:	687b      	ldr	r3, [r7, #4]
   126de:	681b      	ldr	r3, [r3, #0]
   126e0:	3b0c      	subs	r3, #12
   126e2:	681b      	ldr	r3, [r3, #0]
   126e4:	461a      	mov	r2, r3
   126e6:	687b      	ldr	r3, [r7, #4]
   126e8:	1898      	adds	r0, r3, r2
   126ea:	687b      	ldr	r3, [r7, #4]
   126ec:	69d9      	ldr	r1, [r3, #28]
   126ee:	687b      	ldr	r3, [r7, #4]
   126f0:	3320      	adds	r3, #32
   126f2:	461a      	mov	r2, r3
   126f4:	4b0a      	ldr	r3, [pc, #40]	; (12720 <_ZN18ARINC_Buffer_Class10SaveStatusEm+0xc0>)
   126f6:	4798      	blx	r3
	memcpy(transmitBuffer[index],localArray,4);
   126f8:	687b      	ldr	r3, [r7, #4]
   126fa:	695a      	ldr	r2, [r3, #20]
   126fc:	687b      	ldr	r3, [r7, #4]
   126fe:	7e1b      	ldrb	r3, [r3, #24]
   12700:	009b      	lsls	r3, r3, #2
   12702:	4413      	add	r3, r2
   12704:	681b      	ldr	r3, [r3, #0]
   12706:	687a      	ldr	r2, [r7, #4]
   12708:	3220      	adds	r2, #32
   1270a:	6812      	ldr	r2, [r2, #0]
   1270c:	601a      	str	r2, [r3, #0]
}
   1270e:	bf00      	nop
   12710:	3708      	adds	r7, #8
   12712:	46bd      	mov	sp, r7
   12714:	bd80      	pop	{r7, pc}
   12716:	bf00      	nop
   12718:	0001297b 	.word	0x0001297b
   1271c:	00013eb5 	.word	0x00013eb5
   12720:	00012a09 	.word	0x00012a09

00012724 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh>:

void ARINC_Buffer_Class::SortReceivedData(uint8_t* receiver){
   12724:	b480      	push	{r7}
   12726:	b085      	sub	sp, #20
   12728:	af00      	add	r7, sp, #0
   1272a:	6078      	str	r0, [r7, #4]
   1272c:	6039      	str	r1, [r7, #0]
		uint8_t i,j,l;
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
   1272e:	2300      	movs	r3, #0
   12730:	73fb      	strb	r3, [r7, #15]
   12732:	7bfb      	ldrb	r3, [r7, #15]
   12734:	2b1f      	cmp	r3, #31
   12736:	dc1d      	bgt.n	12774 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x50>
		{
			if (LabelsArrayRX1[i]>0)
   12738:	687b      	ldr	r3, [r7, #4]
   1273a:	689a      	ldr	r2, [r3, #8]
   1273c:	7bfb      	ldrb	r3, [r7, #15]
   1273e:	4413      	add	r3, r2
   12740:	781b      	ldrb	r3, [r3, #0]
   12742:	2b00      	cmp	r3, #0
   12744:	dd12      	ble.n	1276c <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x48>
			{
			
					if (receiver[3]==LabelsArrayRX1[i])
   12746:	683b      	ldr	r3, [r7, #0]
   12748:	3303      	adds	r3, #3
   1274a:	781a      	ldrb	r2, [r3, #0]
   1274c:	687b      	ldr	r3, [r7, #4]
   1274e:	6899      	ldr	r1, [r3, #8]
   12750:	7bfb      	ldrb	r3, [r7, #15]
   12752:	440b      	add	r3, r1
   12754:	781b      	ldrb	r3, [r3, #0]
   12756:	429a      	cmp	r2, r3
   12758:	d108      	bne.n	1276c <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0x48>
					{
						memcpy(receiverBuffer[i],receiver,4);
   1275a:	687b      	ldr	r3, [r7, #4]
   1275c:	691a      	ldr	r2, [r3, #16]
   1275e:	7bfb      	ldrb	r3, [r7, #15]
   12760:	009b      	lsls	r3, r3, #2
   12762:	4413      	add	r3, r2
   12764:	681b      	ldr	r3, [r3, #0]
   12766:	683a      	ldr	r2, [r7, #0]
   12768:	6812      	ldr	r2, [r2, #0]
   1276a:	601a      	str	r2, [r3, #0]
		for (i = 0; i <RX_LABELS_NUMBER ; i++)
   1276c:	7bfb      	ldrb	r3, [r7, #15]
   1276e:	3301      	adds	r3, #1
   12770:	73fb      	strb	r3, [r7, #15]
   12772:	e7de      	b.n	12732 <_ZN18ARINC_Buffer_Class16SortReceivedDataEPh+0xe>
					}
			
	
			}
		}
   12774:	bf00      	nop
   12776:	3714      	adds	r7, #20
   12778:	46bd      	mov	sp, r7
   1277a:	bc80      	pop	{r7}
   1277c:	4770      	bx	lr
	...

00012780 <_ZN17ARINC_ConversionsC1Ev>:

#include "ARINC_Conversions.h"


// default constructor
ARINC_Conversions::ARINC_Conversions()
   12780:	b480      	push	{r7}
   12782:	b083      	sub	sp, #12
   12784:	af00      	add	r7, sp, #0
   12786:	6078      	str	r0, [r7, #4]
   12788:	4a04      	ldr	r2, [pc, #16]	; (1279c <_ZN17ARINC_ConversionsC1Ev+0x1c>)
   1278a:	687b      	ldr	r3, [r7, #4]
   1278c:	601a      	str	r2, [r3, #0]
{
} //ARINC_Conversions
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	4618      	mov	r0, r3
   12792:	370c      	adds	r7, #12
   12794:	46bd      	mov	sp, r7
   12796:	bc80      	pop	{r7}
   12798:	4770      	bx	lr
   1279a:	bf00      	nop
   1279c:	0001fc98 	.word	0x0001fc98

000127a0 <_ZN17ARINC_ConversionsD1Ev>:

// default destructor
ARINC_Conversions::~ARINC_Conversions()
   127a0:	b480      	push	{r7}
   127a2:	b083      	sub	sp, #12
   127a4:	af00      	add	r7, sp, #0
   127a6:	6078      	str	r0, [r7, #4]
   127a8:	4a04      	ldr	r2, [pc, #16]	; (127bc <_ZN17ARINC_ConversionsD1Ev+0x1c>)
   127aa:	687b      	ldr	r3, [r7, #4]
   127ac:	601a      	str	r2, [r3, #0]
{
} //~ARINC_Conversions
   127ae:	687b      	ldr	r3, [r7, #4]
   127b0:	4618      	mov	r0, r3
   127b2:	370c      	adds	r7, #12
   127b4:	46bd      	mov	sp, r7
   127b6:	bc80      	pop	{r7}
   127b8:	4770      	bx	lr
   127ba:	bf00      	nop
   127bc:	0001fc98 	.word	0x0001fc98

000127c0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
   127c0:	b5b0      	push	{r4, r5, r7, lr}
   127c2:	b082      	sub	sp, #8
   127c4:	af00      	add	r7, sp, #0
   127c6:	6078      	str	r0, [r7, #4]
   127c8:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   127ca:	4b0a      	ldr	r3, [pc, #40]	; (127f4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   127cc:	6878      	ldr	r0, [r7, #4]
   127ce:	4798      	blx	r3
   127d0:	4604      	mov	r4, r0
   127d2:	460d      	mov	r5, r1
   127d4:	4b07      	ldr	r3, [pc, #28]	; (127f4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x34>)
   127d6:	6838      	ldr	r0, [r7, #0]
   127d8:	4798      	blx	r3
   127da:	4602      	mov	r2, r0
   127dc:	460b      	mov	r3, r1
   127de:	4620      	mov	r0, r4
   127e0:	4629      	mov	r1, r5
   127e2:	4c05      	ldr	r4, [pc, #20]	; (127f8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_+0x38>)
   127e4:	47a0      	blx	r4
   127e6:	4603      	mov	r3, r0
   127e8:	460c      	mov	r4, r1
    }
   127ea:	4618      	mov	r0, r3
   127ec:	4621      	mov	r1, r4
   127ee:	3708      	adds	r7, #8
   127f0:	46bd      	mov	sp, r7
   127f2:	bdb0      	pop	{r4, r5, r7, pc}
   127f4:	0001a111 	.word	0x0001a111
   127f8:	00018d21 	.word	0x00018d21

000127fc <_ZN17ARINC_Conversions10Label2ByteEm>:
	}
	return result;
	
}

uint8_t ARINC_Conversions::Label2Byte(uint32_t label){
   127fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12800:	b085      	sub	sp, #20
   12802:	af00      	add	r7, sp, #0
   12804:	6078      	str	r0, [r7, #4]
   12806:	6039      	str	r1, [r7, #0]
	uint8_t octals[3], result;
	result=0;
   12808:	2300      	movs	r3, #0
   1280a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   1280c:	2300      	movs	r3, #0
   1280e:	73bb      	strb	r3, [r7, #14]
   12810:	7bbb      	ldrb	r3, [r7, #14]
   12812:	2b02      	cmp	r3, #2
   12814:	d86d      	bhi.n	128f2 <_ZN17ARINC_Conversions10Label2ByteEm+0xf6>
		
		octals[2-i]=(uint8_t)(label/(pow(10,2-i)));
   12816:	7bbb      	ldrb	r3, [r7, #14]
   12818:	f1c3 0402 	rsb	r4, r3, #2
   1281c:	4b3c      	ldr	r3, [pc, #240]	; (12910 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   1281e:	6838      	ldr	r0, [r7, #0]
   12820:	4798      	blx	r3
   12822:	4680      	mov	r8, r0
   12824:	4689      	mov	r9, r1
   12826:	7bbb      	ldrb	r3, [r7, #14]
   12828:	f1c3 0302 	rsb	r3, r3, #2
   1282c:	4619      	mov	r1, r3
   1282e:	200a      	movs	r0, #10
   12830:	4b38      	ldr	r3, [pc, #224]	; (12914 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   12832:	4798      	blx	r3
   12834:	4602      	mov	r2, r0
   12836:	460b      	mov	r3, r1
   12838:	4d37      	ldr	r5, [pc, #220]	; (12918 <_ZN17ARINC_Conversions10Label2ByteEm+0x11c>)
   1283a:	4640      	mov	r0, r8
   1283c:	4649      	mov	r1, r9
   1283e:	47a8      	blx	r5
   12840:	4602      	mov	r2, r0
   12842:	460b      	mov	r3, r1
   12844:	4611      	mov	r1, r2
   12846:	461a      	mov	r2, r3
   12848:	4b34      	ldr	r3, [pc, #208]	; (1291c <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   1284a:	4608      	mov	r0, r1
   1284c:	4611      	mov	r1, r2
   1284e:	4798      	blx	r3
   12850:	4603      	mov	r3, r0
   12852:	b2da      	uxtb	r2, r3
   12854:	f107 0310 	add.w	r3, r7, #16
   12858:	4423      	add	r3, r4
   1285a:	f803 2c08 	strb.w	r2, [r3, #-8]
		label-=octals[2-i]*pow(10,2-i);
   1285e:	7bbb      	ldrb	r3, [r7, #14]
   12860:	f1c3 0302 	rsb	r3, r3, #2
   12864:	f107 0210 	add.w	r2, r7, #16
   12868:	4413      	add	r3, r2
   1286a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1286e:	461a      	mov	r2, r3
   12870:	4b2b      	ldr	r3, [pc, #172]	; (12920 <_ZN17ARINC_Conversions10Label2ByteEm+0x124>)
   12872:	4610      	mov	r0, r2
   12874:	4798      	blx	r3
   12876:	4605      	mov	r5, r0
   12878:	460e      	mov	r6, r1
   1287a:	7bbb      	ldrb	r3, [r7, #14]
   1287c:	f1c3 0302 	rsb	r3, r3, #2
   12880:	4619      	mov	r1, r3
   12882:	200a      	movs	r0, #10
   12884:	4b23      	ldr	r3, [pc, #140]	; (12914 <_ZN17ARINC_Conversions10Label2ByteEm+0x118>)
   12886:	4798      	blx	r3
   12888:	4602      	mov	r2, r0
   1288a:	460b      	mov	r3, r1
   1288c:	4c25      	ldr	r4, [pc, #148]	; (12924 <_ZN17ARINC_Conversions10Label2ByteEm+0x128>)
   1288e:	4628      	mov	r0, r5
   12890:	4631      	mov	r1, r6
   12892:	47a0      	blx	r4
   12894:	4603      	mov	r3, r0
   12896:	460c      	mov	r4, r1
   12898:	461d      	mov	r5, r3
   1289a:	4626      	mov	r6, r4
   1289c:	4b1c      	ldr	r3, [pc, #112]	; (12910 <_ZN17ARINC_Conversions10Label2ByteEm+0x114>)
   1289e:	6838      	ldr	r0, [r7, #0]
   128a0:	4798      	blx	r3
   128a2:	4c21      	ldr	r4, [pc, #132]	; (12928 <_ZN17ARINC_Conversions10Label2ByteEm+0x12c>)
   128a4:	462a      	mov	r2, r5
   128a6:	4633      	mov	r3, r6
   128a8:	47a0      	blx	r4
   128aa:	4603      	mov	r3, r0
   128ac:	460c      	mov	r4, r1
   128ae:	4619      	mov	r1, r3
   128b0:	4622      	mov	r2, r4
   128b2:	4b1a      	ldr	r3, [pc, #104]	; (1291c <_ZN17ARINC_Conversions10Label2ByteEm+0x120>)
   128b4:	4608      	mov	r0, r1
   128b6:	4611      	mov	r1, r2
   128b8:	4798      	blx	r3
   128ba:	4603      	mov	r3, r0
   128bc:	603b      	str	r3, [r7, #0]
		result|=octals[2-i]<<(6-3*i);
   128be:	7bbb      	ldrb	r3, [r7, #14]
   128c0:	f1c3 0302 	rsb	r3, r3, #2
   128c4:	f107 0210 	add.w	r2, r7, #16
   128c8:	4413      	add	r3, r2
   128ca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   128ce:	461a      	mov	r2, r3
   128d0:	7bbb      	ldrb	r3, [r7, #14]
   128d2:	4619      	mov	r1, r3
   128d4:	009b      	lsls	r3, r3, #2
   128d6:	1acb      	subs	r3, r1, r3
   128d8:	3306      	adds	r3, #6
   128da:	fa02 f303 	lsl.w	r3, r2, r3
   128de:	b25a      	sxtb	r2, r3
   128e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
   128e4:	4313      	orrs	r3, r2
   128e6:	b25b      	sxtb	r3, r3
   128e8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(octals); i++){
   128ea:	7bbb      	ldrb	r3, [r7, #14]
   128ec:	3301      	adds	r3, #1
   128ee:	73bb      	strb	r3, [r7, #14]
   128f0:	e78e      	b.n	12810 <_ZN17ARINC_Conversions10Label2ByteEm+0x14>
	}
	result=FlipByte(result);
   128f2:	687b      	ldr	r3, [r7, #4]
   128f4:	681b      	ldr	r3, [r3, #0]
   128f6:	681b      	ldr	r3, [r3, #0]
   128f8:	7bfa      	ldrb	r2, [r7, #15]
   128fa:	4611      	mov	r1, r2
   128fc:	6878      	ldr	r0, [r7, #4]
   128fe:	4798      	blx	r3
   12900:	4603      	mov	r3, r0
   12902:	73fb      	strb	r3, [r7, #15]
	return result;
   12904:	7bfb      	ldrb	r3, [r7, #15]
	
}
   12906:	4618      	mov	r0, r3
   12908:	3714      	adds	r7, #20
   1290a:	46bd      	mov	sp, r7
   1290c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12910:	0001a0f1 	.word	0x0001a0f1
   12914:	000127c1 	.word	0x000127c1
   12918:	0001a431 	.word	0x0001a431
   1291c:	0001a73d 	.word	0x0001a73d
   12920:	0001a111 	.word	0x0001a111
   12924:	0001a1dd 	.word	0x0001a1dd
   12928:	00019e75 	.word	0x00019e75

0001292c <_ZN17ARINC_Conversions8FlipByteEh>:
	return hex2;

}


uint8_t ARINC_Conversions::FlipByte(uint8_t byte){
   1292c:	b480      	push	{r7}
   1292e:	b085      	sub	sp, #20
   12930:	af00      	add	r7, sp, #0
   12932:	6078      	str	r0, [r7, #4]
   12934:	460b      	mov	r3, r1
   12936:	70fb      	strb	r3, [r7, #3]
	uint8_t rev=0;
   12938:	2300      	movs	r3, #0
   1293a:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   1293c:	2300      	movs	r3, #0
   1293e:	60bb      	str	r3, [r7, #8]
   12940:	68bb      	ldr	r3, [r7, #8]
   12942:	2b07      	cmp	r3, #7
   12944:	dc13      	bgt.n	1296e <_ZN17ARINC_Conversions8FlipByteEh+0x42>
	{
		rev=rev<<1;
   12946:	7bfb      	ldrb	r3, [r7, #15]
   12948:	005b      	lsls	r3, r3, #1
   1294a:	73fb      	strb	r3, [r7, #15]
		rev|=(byte>>i)&(0x01);
   1294c:	78fa      	ldrb	r2, [r7, #3]
   1294e:	68bb      	ldr	r3, [r7, #8]
   12950:	fa42 f303 	asr.w	r3, r2, r3
   12954:	b25b      	sxtb	r3, r3
   12956:	f003 0301 	and.w	r3, r3, #1
   1295a:	b25a      	sxtb	r2, r3
   1295c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   12960:	4313      	orrs	r3, r2
   12962:	b25b      	sxtb	r3, r3
   12964:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<8;i++)
   12966:	68bb      	ldr	r3, [r7, #8]
   12968:	3301      	adds	r3, #1
   1296a:	60bb      	str	r3, [r7, #8]
   1296c:	e7e8      	b.n	12940 <_ZN17ARINC_Conversions8FlipByteEh+0x14>
	}
	return rev;
   1296e:	7bfb      	ldrb	r3, [r7, #15]
}
   12970:	4618      	mov	r0, r3
   12972:	3714      	adds	r7, #20
   12974:	46bd      	mov	sp, r7
   12976:	bc80      	pop	{r7}
   12978:	4770      	bx	lr

0001297a <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh>:
uint8_t ARINC_Conversions::GetIndexTXLabelarray(uint8_t l, uint8_t* arr){
   1297a:	b480      	push	{r7}
   1297c:	b087      	sub	sp, #28
   1297e:	af00      	add	r7, sp, #0
   12980:	60f8      	str	r0, [r7, #12]
   12982:	460b      	mov	r3, r1
   12984:	607a      	str	r2, [r7, #4]
   12986:	72fb      	strb	r3, [r7, #11]
	for (uint8_t ii = 0; ii < 32; ii++)
   12988:	2300      	movs	r3, #0
   1298a:	75fb      	strb	r3, [r7, #23]
   1298c:	7dfb      	ldrb	r3, [r7, #23]
   1298e:	2b1f      	cmp	r3, #31
   12990:	dc0c      	bgt.n	129ac <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x32>
	{
		if (arr[ii]==l)
   12992:	7dfb      	ldrb	r3, [r7, #23]
   12994:	687a      	ldr	r2, [r7, #4]
   12996:	4413      	add	r3, r2
   12998:	781b      	ldrb	r3, [r3, #0]
   1299a:	7afa      	ldrb	r2, [r7, #11]
   1299c:	429a      	cmp	r2, r3
   1299e:	d101      	bne.n	129a4 <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x2a>
		{
			return ii;
   129a0:	7dfb      	ldrb	r3, [r7, #23]
   129a2:	e004      	b.n	129ae <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x34>
	for (uint8_t ii = 0; ii < 32; ii++)
   129a4:	7dfb      	ldrb	r3, [r7, #23]
   129a6:	3301      	adds	r3, #1
   129a8:	75fb      	strb	r3, [r7, #23]
   129aa:	e7ef      	b.n	1298c <_ZN17ARINC_Conversions20GetIndexTXLabelarrayEhPh+0x12>
		}
		
	}
	return 32;
   129ac:	2320      	movs	r3, #32
}
   129ae:	4618      	mov	r0, r3
   129b0:	371c      	adds	r7, #28
   129b2:	46bd      	mov	sp, r7
   129b4:	bc80      	pop	{r7}
   129b6:	4770      	bx	lr

000129b8 <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh>:
		
	}


}
uint32_t	ARINC_Conversions::FourBytesArray2Uint32(uint8_t* arr){
   129b8:	b480      	push	{r7}
   129ba:	b085      	sub	sp, #20
   129bc:	af00      	add	r7, sp, #0
   129be:	6078      	str	r0, [r7, #4]
   129c0:	6039      	str	r1, [r7, #0]

		result=0;
   129c2:	687b      	ldr	r3, [r7, #4]
   129c4:	2200      	movs	r2, #0
   129c6:	609a      	str	r2, [r3, #8]
		for (uint8_t ii = 0; ii < 4; ii++)
   129c8:	2300      	movs	r3, #0
   129ca:	73fb      	strb	r3, [r7, #15]
   129cc:	7bfb      	ldrb	r3, [r7, #15]
   129ce:	2b03      	cmp	r3, #3
   129d0:	dc13      	bgt.n	129fa <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x42>
		{
			result|=((uint32_t)arr[ii])<<(24-ii*8);
   129d2:	687b      	ldr	r3, [r7, #4]
   129d4:	689a      	ldr	r2, [r3, #8]
   129d6:	7bfb      	ldrb	r3, [r7, #15]
   129d8:	6839      	ldr	r1, [r7, #0]
   129da:	440b      	add	r3, r1
   129dc:	781b      	ldrb	r3, [r3, #0]
   129de:	4619      	mov	r1, r3
   129e0:	7bfb      	ldrb	r3, [r7, #15]
   129e2:	f1c3 0303 	rsb	r3, r3, #3
   129e6:	00db      	lsls	r3, r3, #3
   129e8:	fa01 f303 	lsl.w	r3, r1, r3
   129ec:	431a      	orrs	r2, r3
   129ee:	687b      	ldr	r3, [r7, #4]
   129f0:	609a      	str	r2, [r3, #8]
		for (uint8_t ii = 0; ii < 4; ii++)
   129f2:	7bfb      	ldrb	r3, [r7, #15]
   129f4:	3301      	adds	r3, #1
   129f6:	73fb      	strb	r3, [r7, #15]
   129f8:	e7e8      	b.n	129cc <_ZN17ARINC_Conversions21FourBytesArray2Uint32EPh+0x14>

		}
		return result;
   129fa:	687b      	ldr	r3, [r7, #4]
   129fc:	689b      	ldr	r3, [r3, #8]
}
   129fe:	4618      	mov	r0, r3
   12a00:	3714      	adds	r7, #20
   12a02:	46bd      	mov	sp, r7
   12a04:	bc80      	pop	{r7}
   12a06:	4770      	bx	lr

00012a08 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh>:
void	ARINC_Conversions::Uint32FourBytesArray(uint32_t data,uint8_t *dest){
   12a08:	b480      	push	{r7}
   12a0a:	b087      	sub	sp, #28
   12a0c:	af00      	add	r7, sp, #0
   12a0e:	60f8      	str	r0, [r7, #12]
   12a10:	60b9      	str	r1, [r7, #8]
   12a12:	607a      	str	r2, [r7, #4]

	uint8_t d;
	for (uint8_t ii = 0; ii < 4; ii++)
   12a14:	2300      	movs	r3, #0
   12a16:	75fb      	strb	r3, [r7, #23]
   12a18:	7dfb      	ldrb	r3, [r7, #23]
   12a1a:	2b03      	cmp	r3, #3
   12a1c:	dc10      	bgt.n	12a40 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh+0x38>
	{
		d=(uint8_t)((data>>(24-ii*8))&(0xff));
   12a1e:	7dfb      	ldrb	r3, [r7, #23]
   12a20:	f1c3 0303 	rsb	r3, r3, #3
   12a24:	00db      	lsls	r3, r3, #3
   12a26:	68ba      	ldr	r2, [r7, #8]
   12a28:	fa22 f303 	lsr.w	r3, r2, r3
   12a2c:	75bb      	strb	r3, [r7, #22]
		dest[ii]=d;
   12a2e:	7dfb      	ldrb	r3, [r7, #23]
   12a30:	687a      	ldr	r2, [r7, #4]
   12a32:	4413      	add	r3, r2
   12a34:	7dba      	ldrb	r2, [r7, #22]
   12a36:	701a      	strb	r2, [r3, #0]
	for (uint8_t ii = 0; ii < 4; ii++)
   12a38:	7dfb      	ldrb	r3, [r7, #23]
   12a3a:	3301      	adds	r3, #1
   12a3c:	75fb      	strb	r3, [r7, #23]
   12a3e:	e7eb      	b.n	12a18 <_ZN17ARINC_Conversions20Uint32FourBytesArrayEmPh+0x10>

	}

}
   12a40:	bf00      	nop
   12a42:	371c      	adds	r7, #28
   12a44:	46bd      	mov	sp, r7
   12a46:	bc80      	pop	{r7}
   12a48:	4770      	bx	lr
	...

00012a4c <_ZN17ARINC_Conversions18FloatTwoComplementEfh>:
uint32_t	ARINC_Conversions::FloatTwoComplement(float f, uint8_t size){
   12a4c:	b580      	push	{r7, lr}
   12a4e:	b084      	sub	sp, #16
   12a50:	af00      	add	r7, sp, #0
   12a52:	60f8      	str	r0, [r7, #12]
   12a54:	60b9      	str	r1, [r7, #8]
   12a56:	4613      	mov	r3, r2
   12a58:	71fb      	strb	r3, [r7, #7]
	
	if (f>=0)
   12a5a:	4b17      	ldr	r3, [pc, #92]	; (12ab8 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x6c>)
   12a5c:	f04f 0100 	mov.w	r1, #0
   12a60:	68b8      	ldr	r0, [r7, #8]
   12a62:	4798      	blx	r3
   12a64:	4603      	mov	r3, r0
   12a66:	2b00      	cmp	r3, #0
   12a68:	d006      	beq.n	12a78 <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x2c>
	{
		value=(uint32_t)f;
   12a6a:	4b14      	ldr	r3, [pc, #80]	; (12abc <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x70>)
   12a6c:	68b8      	ldr	r0, [r7, #8]
   12a6e:	4798      	blx	r3
   12a70:	4602      	mov	r2, r0
   12a72:	68fb      	ldr	r3, [r7, #12]
   12a74:	60da      	str	r2, [r3, #12]
   12a76:	e018      	b.n	12aaa <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x5e>
	} 
	else
	{
		value=(uint32_t)(-1*f);
   12a78:	68bb      	ldr	r3, [r7, #8]
   12a7a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   12a7e:	4b0f      	ldr	r3, [pc, #60]	; (12abc <_ZN17ARINC_Conversions18FloatTwoComplementEfh+0x70>)
   12a80:	4610      	mov	r0, r2
   12a82:	4798      	blx	r3
   12a84:	4602      	mov	r2, r0
   12a86:	68fb      	ldr	r3, [r7, #12]
   12a88:	60da      	str	r2, [r3, #12]
		value=(~value)&((1<<(size))-1);
   12a8a:	68fb      	ldr	r3, [r7, #12]
   12a8c:	68db      	ldr	r3, [r3, #12]
   12a8e:	43db      	mvns	r3, r3
   12a90:	79fa      	ldrb	r2, [r7, #7]
   12a92:	4611      	mov	r1, r2
   12a94:	2201      	movs	r2, #1
   12a96:	408a      	lsls	r2, r1
   12a98:	3a01      	subs	r2, #1
   12a9a:	401a      	ands	r2, r3
   12a9c:	68fb      	ldr	r3, [r7, #12]
   12a9e:	60da      	str	r2, [r3, #12]
		value+=1;
   12aa0:	68fb      	ldr	r3, [r7, #12]
   12aa2:	68db      	ldr	r3, [r3, #12]
   12aa4:	1c5a      	adds	r2, r3, #1
   12aa6:	68fb      	ldr	r3, [r7, #12]
   12aa8:	60da      	str	r2, [r3, #12]
	}
	return value;
   12aaa:	68fb      	ldr	r3, [r7, #12]
   12aac:	68db      	ldr	r3, [r3, #12]
}
   12aae:	4618      	mov	r0, r3
   12ab0:	3710      	adds	r7, #16
   12ab2:	46bd      	mov	sp, r7
   12ab4:	bd80      	pop	{r7, pc}
   12ab6:	bf00      	nop
   12ab8:	0001acfd 	.word	0x0001acfd
   12abc:	0001ad25 	.word	0x0001ad25

00012ac0 <_ZN17ARINC_Conversions10FindParityEm>:


// Function to find the parity
bool ARINC_Conversions::FindParity(uint32_t x)
{
   12ac0:	b480      	push	{r7}
   12ac2:	b085      	sub	sp, #20
   12ac4:	af00      	add	r7, sp, #0
   12ac6:	6078      	str	r0, [r7, #4]
   12ac8:	6039      	str	r1, [r7, #0]
	uint32_t y = x ^ (x >> 1);
   12aca:	683b      	ldr	r3, [r7, #0]
   12acc:	085a      	lsrs	r2, r3, #1
   12ace:	683b      	ldr	r3, [r7, #0]
   12ad0:	4053      	eors	r3, r2
   12ad2:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 2);
   12ad4:	68fb      	ldr	r3, [r7, #12]
   12ad6:	089b      	lsrs	r3, r3, #2
   12ad8:	68fa      	ldr	r2, [r7, #12]
   12ada:	4053      	eors	r3, r2
   12adc:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 4);
   12ade:	68fb      	ldr	r3, [r7, #12]
   12ae0:	091b      	lsrs	r3, r3, #4
   12ae2:	68fa      	ldr	r2, [r7, #12]
   12ae4:	4053      	eors	r3, r2
   12ae6:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 8);
   12ae8:	68fb      	ldr	r3, [r7, #12]
   12aea:	0a1b      	lsrs	r3, r3, #8
   12aec:	68fa      	ldr	r2, [r7, #12]
   12aee:	4053      	eors	r3, r2
   12af0:	60fb      	str	r3, [r7, #12]
	y = y ^ (y >> 16);
   12af2:	68fb      	ldr	r3, [r7, #12]
   12af4:	0c1b      	lsrs	r3, r3, #16
   12af6:	68fa      	ldr	r2, [r7, #12]
   12af8:	4053      	eors	r3, r2
   12afa:	60fb      	str	r3, [r7, #12]

	// Rightmost bit of y holds the parity value
	// if (y&1) is 1 then parity is odd else even
	if (y & 1){
   12afc:	68fb      	ldr	r3, [r7, #12]
   12afe:	f003 0301 	and.w	r3, r3, #1
   12b02:	2b00      	cmp	r3, #0
   12b04:	d001      	beq.n	12b0a <_ZN17ARINC_Conversions10FindParityEm+0x4a>
			return 1;
   12b06:	2301      	movs	r3, #1
   12b08:	e000      	b.n	12b0c <_ZN17ARINC_Conversions10FindParityEm+0x4c>
	}

	return 0;
   12b0a:	2300      	movs	r3, #0
}
   12b0c:	4618      	mov	r0, r3
   12b0e:	3714      	adds	r7, #20
   12b10:	46bd      	mov	sp, r7
   12b12:	bc80      	pop	{r7}
   12b14:	4770      	bx	lr

00012b16 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   12b16:	b480      	push	{r7}
   12b18:	b085      	sub	sp, #20
   12b1a:	af00      	add	r7, sp, #0
   12b1c:	60f8      	str	r0, [r7, #12]
   12b1e:	460b      	mov	r3, r1
   12b20:	607a      	str	r2, [r7, #4]
   12b22:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12b24:	7afb      	ldrb	r3, [r7, #11]
   12b26:	68fa      	ldr	r2, [r7, #12]
   12b28:	01db      	lsls	r3, r3, #7
   12b2a:	4413      	add	r3, r2
   12b2c:	3318      	adds	r3, #24
   12b2e:	687a      	ldr	r2, [r7, #4]
   12b30:	601a      	str	r2, [r3, #0]
}
   12b32:	bf00      	nop
   12b34:	3714      	adds	r7, #20
   12b36:	46bd      	mov	sp, r7
   12b38:	bc80      	pop	{r7}
   12b3a:	4770      	bx	lr

00012b3c <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   12b3c:	b480      	push	{r7}
   12b3e:	b085      	sub	sp, #20
   12b40:	af00      	add	r7, sp, #0
   12b42:	60f8      	str	r0, [r7, #12]
   12b44:	460b      	mov	r3, r1
   12b46:	607a      	str	r2, [r7, #4]
   12b48:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   12b4a:	7afb      	ldrb	r3, [r7, #11]
   12b4c:	68fa      	ldr	r2, [r7, #12]
   12b4e:	01db      	lsls	r3, r3, #7
   12b50:	4413      	add	r3, r2
   12b52:	3314      	adds	r3, #20
   12b54:	687a      	ldr	r2, [r7, #4]
   12b56:	601a      	str	r2, [r3, #0]
}
   12b58:	bf00      	nop
   12b5a:	3714      	adds	r7, #20
   12b5c:	46bd      	mov	sp, r7
   12b5e:	bc80      	pop	{r7}
   12b60:	4770      	bx	lr
	...

00012b64 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   12b64:	b580      	push	{r7, lr}
   12b66:	b082      	sub	sp, #8
   12b68:	af00      	add	r7, sp, #0
   12b6a:	4603      	mov	r3, r0
   12b6c:	6039      	str	r1, [r7, #0]
   12b6e:	71fb      	strb	r3, [r7, #7]
   12b70:	4613      	mov	r3, r2
   12b72:	71bb      	strb	r3, [r7, #6]
	if (level) {
   12b74:	79bb      	ldrb	r3, [r7, #6]
   12b76:	2b00      	cmp	r3, #0
   12b78:	d006      	beq.n	12b88 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   12b7a:	79fb      	ldrb	r3, [r7, #7]
   12b7c:	683a      	ldr	r2, [r7, #0]
   12b7e:	4619      	mov	r1, r3
   12b80:	4806      	ldr	r0, [pc, #24]	; (12b9c <_gpio_set_level+0x38>)
   12b82:	4b07      	ldr	r3, [pc, #28]	; (12ba0 <_gpio_set_level+0x3c>)
   12b84:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   12b86:	e005      	b.n	12b94 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   12b88:	79fb      	ldrb	r3, [r7, #7]
   12b8a:	683a      	ldr	r2, [r7, #0]
   12b8c:	4619      	mov	r1, r3
   12b8e:	4803      	ldr	r0, [pc, #12]	; (12b9c <_gpio_set_level+0x38>)
   12b90:	4b04      	ldr	r3, [pc, #16]	; (12ba4 <_gpio_set_level+0x40>)
   12b92:	4798      	blx	r3
}
   12b94:	bf00      	nop
   12b96:	3708      	adds	r7, #8
   12b98:	46bd      	mov	sp, r7
   12b9a:	bd80      	pop	{r7, pc}
   12b9c:	41008000 	.word	0x41008000
   12ba0:	00012b17 	.word	0x00012b17
   12ba4:	00012b3d 	.word	0x00012b3d

00012ba8 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   12ba8:	b580      	push	{r7, lr}
   12baa:	b082      	sub	sp, #8
   12bac:	af00      	add	r7, sp, #0
   12bae:	4603      	mov	r3, r0
   12bb0:	460a      	mov	r2, r1
   12bb2:	71fb      	strb	r3, [r7, #7]
   12bb4:	4613      	mov	r3, r2
   12bb6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   12bb8:	79fb      	ldrb	r3, [r7, #7]
   12bba:	115b      	asrs	r3, r3, #5
   12bbc:	b2d8      	uxtb	r0, r3
   12bbe:	79fb      	ldrb	r3, [r7, #7]
   12bc0:	f003 031f 	and.w	r3, r3, #31
   12bc4:	2201      	movs	r2, #1
   12bc6:	fa02 f303 	lsl.w	r3, r2, r3
   12bca:	79ba      	ldrb	r2, [r7, #6]
   12bcc:	4619      	mov	r1, r3
   12bce:	4b03      	ldr	r3, [pc, #12]	; (12bdc <gpio_set_pin_level+0x34>)
   12bd0:	4798      	blx	r3
}
   12bd2:	bf00      	nop
   12bd4:	3708      	adds	r7, #8
   12bd6:	46bd      	mov	sp, r7
   12bd8:	bd80      	pop	{r7, pc}
   12bda:	bf00      	nop
   12bdc:	00012b65 	.word	0x00012b65

00012be0 <_ZL10blink_LED0PK10timer_task>:
};



ARINC_Interface  *ptrARINCInterface;
static void blink_LED0(const struct timer_task *const timer_task){
   12be0:	b480      	push	{r7}
   12be2:	b083      	sub	sp, #12
   12be4:	af00      	add	r7, sp, #0
   12be6:	6078      	str	r0, [r7, #4]
	//gpio_toggle_pin_level(LED0);
}
   12be8:	bf00      	nop
   12bea:	370c      	adds	r7, #12
   12bec:	46bd      	mov	sp, r7
   12bee:	bc80      	pop	{r7}
   12bf0:	4770      	bx	lr
	...

00012bf4 <_ZL9TxTimeoutPK10timer_task>:
static void TxTimeout(const struct timer_task *const timer_task){
   12bf4:	b480      	push	{r7}
   12bf6:	b083      	sub	sp, #12
   12bf8:	af00      	add	r7, sp, #0
   12bfa:	6078      	str	r0, [r7, #4]
	ptrARINCInterface->txTimeout=true;
   12bfc:	4b04      	ldr	r3, [pc, #16]	; (12c10 <_ZL9TxTimeoutPK10timer_task+0x1c>)
   12bfe:	681b      	ldr	r3, [r3, #0]
   12c00:	2201      	movs	r2, #1
   12c02:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
}
   12c06:	bf00      	nop
   12c08:	370c      	adds	r7, #12
   12c0a:	46bd      	mov	sp, r7
   12c0c:	bc80      	pop	{r7}
   12c0e:	4770      	bx	lr
   12c10:	20008ea0 	.word	0x20008ea0

00012c14 <_ZL12Receiver1Intv>:

static void Receiver1Int(void){
   12c14:	b480      	push	{r7}
   12c16:	af00      	add	r7, sp, #0
	ptrARINCInterface->newMessageR1=true;
   12c18:	4b04      	ldr	r3, [pc, #16]	; (12c2c <_ZL12Receiver1Intv+0x18>)
   12c1a:	681b      	ldr	r3, [r3, #0]
   12c1c:	2201      	movs	r2, #1
   12c1e:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
}
   12c22:	bf00      	nop
   12c24:	46bd      	mov	sp, r7
   12c26:	bc80      	pop	{r7}
   12c28:	4770      	bx	lr
   12c2a:	bf00      	nop
   12c2c:	20008ea0 	.word	0x20008ea0

00012c30 <_ZN15ARINC_InterfaceC2Ev>:

// default constructor
ARINC_Interface::ARINC_Interface()
   12c30:	b580      	push	{r7, lr}
   12c32:	b082      	sub	sp, #8
   12c34:	af00      	add	r7, sp, #0
   12c36:	6078      	str	r0, [r7, #4]
   12c38:	6039      	str	r1, [r7, #0]
   12c3a:	687a      	ldr	r2, [r7, #4]
   12c3c:	683b      	ldr	r3, [r7, #0]
   12c3e:	3304      	adds	r3, #4
   12c40:	4619      	mov	r1, r3
   12c42:	4610      	mov	r0, r2
   12c44:	4b13      	ldr	r3, [pc, #76]	; (12c94 <_ZN15ARINC_InterfaceC2Ev+0x64>)
   12c46:	4798      	blx	r3
   12c48:	683b      	ldr	r3, [r7, #0]
   12c4a:	681a      	ldr	r2, [r3, #0]
   12c4c:	687b      	ldr	r3, [r7, #4]
   12c4e:	601a      	str	r2, [r3, #0]
   12c50:	687b      	ldr	r3, [r7, #4]
   12c52:	681b      	ldr	r3, [r3, #0]
   12c54:	3b0c      	subs	r3, #12
   12c56:	681b      	ldr	r3, [r3, #0]
   12c58:	461a      	mov	r2, r3
   12c5a:	687b      	ldr	r3, [r7, #4]
   12c5c:	4413      	add	r3, r2
   12c5e:	683a      	ldr	r2, [r7, #0]
   12c60:	6912      	ldr	r2, [r2, #16]
   12c62:	601a      	str	r2, [r3, #0]
   12c64:	687b      	ldr	r3, [r7, #4]
   12c66:	681b      	ldr	r3, [r3, #0]
   12c68:	3b10      	subs	r3, #16
   12c6a:	681b      	ldr	r3, [r3, #0]
   12c6c:	461a      	mov	r2, r3
   12c6e:	687b      	ldr	r3, [r7, #4]
   12c70:	4413      	add	r3, r2
   12c72:	683a      	ldr	r2, [r7, #0]
   12c74:	6952      	ldr	r2, [r2, #20]
   12c76:	601a      	str	r2, [r3, #0]
   12c78:	687b      	ldr	r3, [r7, #4]
   12c7a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   12c7e:	4618      	mov	r0, r3
   12c80:	4b05      	ldr	r3, [pc, #20]	; (12c98 <_ZN15ARINC_InterfaceC2Ev+0x68>)
   12c82:	4798      	blx	r3
{
	ptrARINCInterface=this;
   12c84:	4a05      	ldr	r2, [pc, #20]	; (12c9c <_ZN15ARINC_InterfaceC2Ev+0x6c>)
   12c86:	687b      	ldr	r3, [r7, #4]
   12c88:	6013      	str	r3, [r2, #0]

	//converter=ptrConverter;
} //ARINC_Interface
   12c8a:	687b      	ldr	r3, [r7, #4]
   12c8c:	4618      	mov	r0, r3
   12c8e:	3708      	adds	r7, #8
   12c90:	46bd      	mov	sp, r7
   12c92:	bd80      	pop	{r7, pc}
   12c94:	00012461 	.word	0x00012461
   12c98:	00013689 	.word	0x00013689
   12c9c:	20008ea0 	.word	0x20008ea0

00012ca0 <_ZN15ARINC_InterfaceC1Ev>:
ARINC_Interface::ARINC_Interface()
   12ca0:	b580      	push	{r7, lr}
   12ca2:	b082      	sub	sp, #8
   12ca4:	af00      	add	r7, sp, #0
   12ca6:	6078      	str	r0, [r7, #4]
   12ca8:	687b      	ldr	r3, [r7, #4]
   12caa:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
   12cae:	4618      	mov	r0, r3
   12cb0:	4b15      	ldr	r3, [pc, #84]	; (12d08 <_ZN15ARINC_InterfaceC1Ev+0x68>)
   12cb2:	4798      	blx	r3
   12cb4:	687b      	ldr	r3, [r7, #4]
   12cb6:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
   12cba:	4a14      	ldr	r2, [pc, #80]	; (12d0c <_ZN15ARINC_InterfaceC1Ev+0x6c>)
   12cbc:	4611      	mov	r1, r2
   12cbe:	4618      	mov	r0, r3
   12cc0:	4b13      	ldr	r3, [pc, #76]	; (12d10 <_ZN15ARINC_InterfaceC1Ev+0x70>)
   12cc2:	4798      	blx	r3
   12cc4:	687b      	ldr	r3, [r7, #4]
   12cc6:	4a13      	ldr	r2, [pc, #76]	; (12d14 <_ZN15ARINC_InterfaceC1Ev+0x74>)
   12cc8:	4611      	mov	r1, r2
   12cca:	4618      	mov	r0, r3
   12ccc:	4b12      	ldr	r3, [pc, #72]	; (12d18 <_ZN15ARINC_InterfaceC1Ev+0x78>)
   12cce:	4798      	blx	r3
   12cd0:	4a12      	ldr	r2, [pc, #72]	; (12d1c <_ZN15ARINC_InterfaceC1Ev+0x7c>)
   12cd2:	687b      	ldr	r3, [r7, #4]
   12cd4:	601a      	str	r2, [r3, #0]
   12cd6:	687b      	ldr	r3, [r7, #4]
   12cd8:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
   12cdc:	4a10      	ldr	r2, [pc, #64]	; (12d20 <_ZN15ARINC_InterfaceC1Ev+0x80>)
   12cde:	601a      	str	r2, [r3, #0]
   12ce0:	687b      	ldr	r3, [r7, #4]
   12ce2:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
   12ce6:	4a0f      	ldr	r2, [pc, #60]	; (12d24 <_ZN15ARINC_InterfaceC1Ev+0x84>)
   12ce8:	601a      	str	r2, [r3, #0]
   12cea:	687b      	ldr	r3, [r7, #4]
   12cec:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   12cf0:	4618      	mov	r0, r3
   12cf2:	4b0d      	ldr	r3, [pc, #52]	; (12d28 <_ZN15ARINC_InterfaceC1Ev+0x88>)
   12cf4:	4798      	blx	r3
	ptrARINCInterface=this;
   12cf6:	4a0d      	ldr	r2, [pc, #52]	; (12d2c <_ZN15ARINC_InterfaceC1Ev+0x8c>)
   12cf8:	687b      	ldr	r3, [r7, #4]
   12cfa:	6013      	str	r3, [r2, #0]
} //ARINC_Interface
   12cfc:	687b      	ldr	r3, [r7, #4]
   12cfe:	4618      	mov	r0, r3
   12d00:	3708      	adds	r7, #8
   12d02:	46bd      	mov	sp, r7
   12d04:	bd80      	pop	{r7, pc}
   12d06:	bf00      	nop
   12d08:	00012781 	.word	0x00012781
   12d0c:	0002075c 	.word	0x0002075c
   12d10:	00000d49 	.word	0x00000d49
   12d14:	00020748 	.word	0x00020748
   12d18:	00012461 	.word	0x00012461
   12d1c:	00020700 	.word	0x00020700
   12d20:	0002071c 	.word	0x0002071c
   12d24:	00020738 	.word	0x00020738
   12d28:	00013689 	.word	0x00013689
   12d2c:	20008ea0 	.word	0x20008ea0

00012d30 <_ZN15ARINC_InterfaceD2Ev>:


// default destructor
ARINC_Interface::~ARINC_Interface()
   12d30:	b580      	push	{r7, lr}
   12d32:	b082      	sub	sp, #8
   12d34:	af00      	add	r7, sp, #0
   12d36:	6078      	str	r0, [r7, #4]
   12d38:	6039      	str	r1, [r7, #0]
   12d3a:	683b      	ldr	r3, [r7, #0]
   12d3c:	681a      	ldr	r2, [r3, #0]
   12d3e:	687b      	ldr	r3, [r7, #4]
   12d40:	601a      	str	r2, [r3, #0]
   12d42:	687b      	ldr	r3, [r7, #4]
   12d44:	681b      	ldr	r3, [r3, #0]
   12d46:	3b0c      	subs	r3, #12
   12d48:	681b      	ldr	r3, [r3, #0]
   12d4a:	461a      	mov	r2, r3
   12d4c:	687b      	ldr	r3, [r7, #4]
   12d4e:	4413      	add	r3, r2
   12d50:	683a      	ldr	r2, [r7, #0]
   12d52:	6912      	ldr	r2, [r2, #16]
   12d54:	601a      	str	r2, [r3, #0]
   12d56:	687b      	ldr	r3, [r7, #4]
   12d58:	681b      	ldr	r3, [r3, #0]
   12d5a:	3b10      	subs	r3, #16
   12d5c:	681b      	ldr	r3, [r3, #0]
   12d5e:	461a      	mov	r2, r3
   12d60:	687b      	ldr	r3, [r7, #4]
   12d62:	4413      	add	r3, r2
   12d64:	683a      	ldr	r2, [r7, #0]
   12d66:	6952      	ldr	r2, [r2, #20]
   12d68:	601a      	str	r2, [r3, #0]
   12d6a:	687b      	ldr	r3, [r7, #4]
   12d6c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   12d70:	4618      	mov	r0, r3
   12d72:	4b07      	ldr	r3, [pc, #28]	; (12d90 <_ZN15ARINC_InterfaceD2Ev+0x60>)
   12d74:	4798      	blx	r3
   12d76:	687a      	ldr	r2, [r7, #4]
   12d78:	683b      	ldr	r3, [r7, #0]
   12d7a:	3304      	adds	r3, #4
   12d7c:	4619      	mov	r1, r3
   12d7e:	4610      	mov	r0, r2
   12d80:	4b04      	ldr	r3, [pc, #16]	; (12d94 <_ZN15ARINC_InterfaceD2Ev+0x64>)
   12d82:	4798      	blx	r3
{
} //~ARINC_Interface
   12d84:	687b      	ldr	r3, [r7, #4]
   12d86:	4618      	mov	r0, r3
   12d88:	3708      	adds	r7, #8
   12d8a:	46bd      	mov	sp, r7
   12d8c:	bd80      	pop	{r7, pc}
   12d8e:	bf00      	nop
   12d90:	000136a9 	.word	0x000136a9
   12d94:	000124a7 	.word	0x000124a7

00012d98 <_ZN15ARINC_InterfaceD1Ev>:
ARINC_Interface::~ARINC_Interface()
   12d98:	b580      	push	{r7, lr}
   12d9a:	b082      	sub	sp, #8
   12d9c:	af00      	add	r7, sp, #0
   12d9e:	6078      	str	r0, [r7, #4]
   12da0:	4a15      	ldr	r2, [pc, #84]	; (12df8 <_ZN15ARINC_InterfaceD1Ev+0x60>)
   12da2:	687b      	ldr	r3, [r7, #4]
   12da4:	601a      	str	r2, [r3, #0]
   12da6:	687b      	ldr	r3, [r7, #4]
   12da8:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
   12dac:	4a13      	ldr	r2, [pc, #76]	; (12dfc <_ZN15ARINC_InterfaceD1Ev+0x64>)
   12dae:	601a      	str	r2, [r3, #0]
   12db0:	687b      	ldr	r3, [r7, #4]
   12db2:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
   12db6:	4a12      	ldr	r2, [pc, #72]	; (12e00 <_ZN15ARINC_InterfaceD1Ev+0x68>)
   12db8:	601a      	str	r2, [r3, #0]
   12dba:	687b      	ldr	r3, [r7, #4]
   12dbc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   12dc0:	4618      	mov	r0, r3
   12dc2:	4b10      	ldr	r3, [pc, #64]	; (12e04 <_ZN15ARINC_InterfaceD1Ev+0x6c>)
   12dc4:	4798      	blx	r3
   12dc6:	687b      	ldr	r3, [r7, #4]
   12dc8:	4a0f      	ldr	r2, [pc, #60]	; (12e08 <_ZN15ARINC_InterfaceD1Ev+0x70>)
   12dca:	4611      	mov	r1, r2
   12dcc:	4618      	mov	r0, r3
   12dce:	4b0f      	ldr	r3, [pc, #60]	; (12e0c <_ZN15ARINC_InterfaceD1Ev+0x74>)
   12dd0:	4798      	blx	r3
   12dd2:	687b      	ldr	r3, [r7, #4]
   12dd4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
   12dd8:	4a0d      	ldr	r2, [pc, #52]	; (12e10 <_ZN15ARINC_InterfaceD1Ev+0x78>)
   12dda:	4611      	mov	r1, r2
   12ddc:	4618      	mov	r0, r3
   12dde:	4b0d      	ldr	r3, [pc, #52]	; (12e14 <_ZN15ARINC_InterfaceD1Ev+0x7c>)
   12de0:	4798      	blx	r3
   12de2:	687b      	ldr	r3, [r7, #4]
   12de4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
   12de8:	4618      	mov	r0, r3
   12dea:	4b0b      	ldr	r3, [pc, #44]	; (12e18 <_ZN15ARINC_InterfaceD1Ev+0x80>)
   12dec:	4798      	blx	r3
} //~ARINC_Interface
   12dee:	687b      	ldr	r3, [r7, #4]
   12df0:	4618      	mov	r0, r3
   12df2:	3708      	adds	r7, #8
   12df4:	46bd      	mov	sp, r7
   12df6:	bd80      	pop	{r7, pc}
   12df8:	00020700 	.word	0x00020700
   12dfc:	0002071c 	.word	0x0002071c
   12e00:	00020738 	.word	0x00020738
   12e04:	000136a9 	.word	0x000136a9
   12e08:	00020748 	.word	0x00020748
   12e0c:	000124a7 	.word	0x000124a7
   12e10:	0002075c 	.word	0x0002075c
   12e14:	00013d91 	.word	0x00013d91
   12e18:	000127a1 	.word	0x000127a1

00012e1c <_ZTv0_n16_N15ARINC_InterfaceD1Ev>:
   12e1c:	b580      	push	{r7, lr}
   12e1e:	b082      	sub	sp, #8
   12e20:	af00      	add	r7, sp, #0
   12e22:	6078      	str	r0, [r7, #4]
   12e24:	687b      	ldr	r3, [r7, #4]
   12e26:	681b      	ldr	r3, [r3, #0]
   12e28:	3b10      	subs	r3, #16
   12e2a:	681b      	ldr	r3, [r3, #0]
   12e2c:	461a      	mov	r2, r3
   12e2e:	687b      	ldr	r3, [r7, #4]
   12e30:	4413      	add	r3, r2
   12e32:	4618      	mov	r0, r3
   12e34:	4b03      	ldr	r3, [pc, #12]	; (12e44 <_ZTv0_n16_N15ARINC_InterfaceD1Ev+0x28>)
   12e36:	4798      	blx	r3
   12e38:	4603      	mov	r3, r0
   12e3a:	4618      	mov	r0, r3
   12e3c:	3708      	adds	r7, #8
   12e3e:	46bd      	mov	sp, r7
   12e40:	bd80      	pop	{r7, pc}
   12e42:	bf00      	nop
   12e44:	00012d99 	.word	0x00012d99

00012e48 <_ZN15ARINC_InterfaceD0Ev>:
ARINC_Interface::~ARINC_Interface()
   12e48:	b580      	push	{r7, lr}
   12e4a:	b082      	sub	sp, #8
   12e4c:	af00      	add	r7, sp, #0
   12e4e:	6078      	str	r0, [r7, #4]
} //~ARINC_Interface
   12e50:	6878      	ldr	r0, [r7, #4]
   12e52:	4b06      	ldr	r3, [pc, #24]	; (12e6c <_ZN15ARINC_InterfaceD0Ev+0x24>)
   12e54:	4798      	blx	r3
   12e56:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   12e5a:	6878      	ldr	r0, [r7, #4]
   12e5c:	4b04      	ldr	r3, [pc, #16]	; (12e70 <_ZN15ARINC_InterfaceD0Ev+0x28>)
   12e5e:	4798      	blx	r3
   12e60:	687b      	ldr	r3, [r7, #4]
   12e62:	4618      	mov	r0, r3
   12e64:	3708      	adds	r7, #8
   12e66:	46bd      	mov	sp, r7
   12e68:	bd80      	pop	{r7, pc}
   12e6a:	bf00      	nop
   12e6c:	00012d99 	.word	0x00012d99
   12e70:	00018c01 	.word	0x00018c01

00012e74 <_ZTv0_n16_N15ARINC_InterfaceD0Ev>:
   12e74:	b580      	push	{r7, lr}
   12e76:	b082      	sub	sp, #8
   12e78:	af00      	add	r7, sp, #0
   12e7a:	6078      	str	r0, [r7, #4]
   12e7c:	687b      	ldr	r3, [r7, #4]
   12e7e:	681b      	ldr	r3, [r3, #0]
   12e80:	3b10      	subs	r3, #16
   12e82:	681b      	ldr	r3, [r3, #0]
   12e84:	461a      	mov	r2, r3
   12e86:	687b      	ldr	r3, [r7, #4]
   12e88:	4413      	add	r3, r2
   12e8a:	4618      	mov	r0, r3
   12e8c:	4b03      	ldr	r3, [pc, #12]	; (12e9c <_ZTv0_n16_N15ARINC_InterfaceD0Ev+0x28>)
   12e8e:	4798      	blx	r3
   12e90:	4603      	mov	r3, r0
   12e92:	4618      	mov	r0, r3
   12e94:	3708      	adds	r7, #8
   12e96:	46bd      	mov	sp, r7
   12e98:	bd80      	pop	{r7, pc}
   12e9a:	bf00      	nop
   12e9c:	00012e49 	.word	0x00012e49

00012ea0 <_ZN15ARINC_Interface4InitEv>:




bool	ARINC_Interface::Init(void){
   12ea0:	b580      	push	{r7, lr}
   12ea2:	b082      	sub	sp, #8
   12ea4:	af00      	add	r7, sp, #0
   12ea6:	6078      	str	r0, [r7, #4]
	MessageCount=0; MessageCount1=0; MessageCount2=0;
   12ea8:	687b      	ldr	r3, [r7, #4]
   12eaa:	2200      	movs	r2, #0
   12eac:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
   12eb0:	687b      	ldr	r3, [r7, #4]
   12eb2:	2200      	movs	r2, #0
   12eb4:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
   12eb8:	687b      	ldr	r3, [r7, #4]
   12eba:	2200      	movs	r2, #0
   12ebc:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	BITRATE0=false;
   12ec0:	687b      	ldr	r3, [r7, #4]
   12ec2:	2200      	movs	r2, #0
   12ec4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	BITRATE1=false;
   12ec8:	687b      	ldr	r3, [r7, #4]
   12eca:	2200      	movs	r2, #0
   12ecc:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	BITRATE2=false;
   12ed0:	687b      	ldr	r3, [r7, #4]
   12ed2:	2200      	movs	r2, #0
   12ed4:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a

	PARITY=false;
   12ed8:	687b      	ldr	r3, [r7, #4]
   12eda:	2200      	movs	r2, #0
   12edc:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	HW_RESET();
   12ee0:	6878      	ldr	r0, [r7, #4]
   12ee2:	4b3d      	ldr	r3, [pc, #244]	; (12fd8 <_ZN15ARINC_Interface4InitEv+0x138>)
   12ee4:	4798      	blx	r3
	InitBuffer();
   12ee6:	687b      	ldr	r3, [r7, #4]
   12ee8:	4618      	mov	r0, r3
   12eea:	4b3c      	ldr	r3, [pc, #240]	; (12fdc <_ZN15ARINC_Interface4InitEv+0x13c>)
   12eec:	4798      	blx	r3
	statusHolt=HI3593.Init();
   12eee:	687b      	ldr	r3, [r7, #4]
   12ef0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   12ef4:	4618      	mov	r0, r3
   12ef6:	4b3a      	ldr	r3, [pc, #232]	; (12fe0 <_ZN15ARINC_Interface4InitEv+0x140>)
   12ef8:	4798      	blx	r3
   12efa:	4603      	mov	r3, r0
   12efc:	461a      	mov	r2, r3
   12efe:	687b      	ldr	r3, [r7, #4]
   12f00:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
	if (statusHolt!=TSR_Default){
   12f04:	687b      	ldr	r3, [r7, #4]
   12f06:	f893 317b 	ldrb.w	r3, [r3, #379]	; 0x17b
   12f0a:	2b01      	cmp	r3, #1
   12f0c:	d008      	beq.n	12f20 <_ZN15ARINC_Interface4InitEv+0x80>
		usb.println("\n\rHI-3593 failed to Initilize\n\r");
   12f0e:	4935      	ldr	r1, [pc, #212]	; (12fe4 <_ZN15ARINC_Interface4InitEv+0x144>)
   12f10:	4835      	ldr	r0, [pc, #212]	; (12fe8 <_ZN15ARINC_Interface4InitEv+0x148>)
   12f12:	4b36      	ldr	r3, [pc, #216]	; (12fec <_ZN15ARINC_Interface4InitEv+0x14c>)
   12f14:	4798      	blx	r3
		isOK=false;
   12f16:	687b      	ldr	r3, [r7, #4]
   12f18:	2200      	movs	r2, #0
   12f1a:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
   12f1e:	e03d      	b.n	12f9c <_ZN15ARINC_Interface4InitEv+0xfc>
	}else{
		isOK=true;
   12f20:	687b      	ldr	r3, [r7, #4]
   12f22:	2201      	movs	r2, #1
   12f24:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
		newMessageR1=false;
   12f28:	687b      	ldr	r3, [r7, #4]
   12f2a:	2200      	movs	r2, #0
   12f2c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		newMessageR2=false;
   12f30:	687b      	ldr	r3, [r7, #4]
   12f32:	2200      	movs	r2, #0
   12f34:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
		BigCounter.Word32 = 0;     // clear all 8 bytes of the data field.
   12f38:	687b      	ldr	r3, [r7, #4]
   12f3a:	2200      	movs	r2, #0
   12f3c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		MessageCount=0;
   12f40:	687b      	ldr	r3, [r7, #4]
   12f42:	2200      	movs	r2, #0
   12f44:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
		octalLabel = 0x1D;         // Write ARINC Label
   12f48:	687b      	ldr	r3, [r7, #4]
   12f4a:	221d      	movs	r2, #29
   12f4c:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
		Arate=0;
   12f50:	687b      	ldr	r3, [r7, #4]
   12f52:	2200      	movs	r2, #0
   12f54:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
		
		(void)memset(TXBuffer, 0, sizeof(TXBuffer));    // clear the buffer
   12f58:	687b      	ldr	r3, [r7, #4]
   12f5a:	f203 1327 	addw	r3, r3, #295	; 0x127
   12f5e:	2210      	movs	r2, #16
   12f60:	2100      	movs	r1, #0
   12f62:	4618      	mov	r0, r3
   12f64:	4b22      	ldr	r3, [pc, #136]	; (12ff0 <_ZN15ARINC_Interface4InitEv+0x150>)
   12f66:	4798      	blx	r3
			
		// Setup the Labels
		HI3593.InitReceiver1Labels();     // initial Rec1 labels
   12f68:	687b      	ldr	r3, [r7, #4]
   12f6a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   12f6e:	4618      	mov	r0, r3
   12f70:	4b20      	ldr	r3, [pc, #128]	; (12ff4 <_ZN15ARINC_Interface4InitEv+0x154>)
   12f72:	4798      	blx	r3
		HI3593.initReceiver2Labels();     // initial Rec2 labels
   12f74:	687b      	ldr	r3, [r7, #4]
   12f76:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   12f7a:	4618      	mov	r0, r3
   12f7c:	4b1e      	ldr	r3, [pc, #120]	; (12ff8 <_ZN15ARINC_Interface4InitEv+0x158>)
   12f7e:	4798      	blx	r3
		HI3593.InitPriorityLabels();
   12f80:	687b      	ldr	r3, [r7, #4]
   12f82:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   12f86:	4618      	mov	r0, r3
   12f88:	4b1c      	ldr	r3, [pc, #112]	; (12ffc <_ZN15ARINC_Interface4InitEv+0x15c>)
   12f8a:	4798      	blx	r3
		//HI3593.MultiByteRead(REC1MEMORY, 32, LabelsArrayRX1); // read in all Rec-1 labels into the passed array
		//HI3593.MultiByteRead(REC2MEMORY, 32, LabelsArrayRX2); // read in all Rec-2 labels into the passed array

		Rec1Parity =0;
   12f8c:	687b      	ldr	r3, [r7, #4]
   12f8e:	2200      	movs	r2, #0
   12f90:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		Rec2Parity =0;
   12f94:	687b      	ldr	r3, [r7, #4]
   12f96:	2200      	movs	r2, #0
   12f98:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

		//HI3593.W_CommandValue(REC1CR,RFLIP | PLON | LABREC | Arate | Rec1Parity);  // enable PL1 in the Receiver Control Reg
		//HI3593.W_CommandValue(REC2CR,RFLIP | PLON | LABREC | Arate | Rec2Parity);  // enable PL2 in the Receiver Control Reg
	}
	
	arincTimer.Init();
   12f9c:	4818      	ldr	r0, [pc, #96]	; (13000 <_ZN15ARINC_Interface4InitEv+0x160>)
   12f9e:	4b19      	ldr	r3, [pc, #100]	; (13004 <_ZN15ARINC_Interface4InitEv+0x164>)
   12fa0:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(blink_LED0),1000);
   12fa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12fa6:	4918      	ldr	r1, [pc, #96]	; (13008 <_ZN15ARINC_Interface4InitEv+0x168>)
   12fa8:	4815      	ldr	r0, [pc, #84]	; (13000 <_ZN15ARINC_Interface4InitEv+0x160>)
   12faa:	4b18      	ldr	r3, [pc, #96]	; (1300c <_ZN15ARINC_Interface4InitEv+0x16c>)
   12fac:	4798      	blx	r3
	arincTimer.Add_periodic_task(FUNC_PTR(TxTimeout),500);
   12fae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   12fb2:	4917      	ldr	r1, [pc, #92]	; (13010 <_ZN15ARINC_Interface4InitEv+0x170>)
   12fb4:	4812      	ldr	r0, [pc, #72]	; (13000 <_ZN15ARINC_Interface4InitEv+0x160>)
   12fb6:	4b15      	ldr	r3, [pc, #84]	; (1300c <_ZN15ARINC_Interface4InitEv+0x16c>)
   12fb8:	4798      	blx	r3
	ext_irq_register(ARINCR1Int, Receiver1Int);
   12fba:	4916      	ldr	r1, [pc, #88]	; (13014 <_ZN15ARINC_Interface4InitEv+0x174>)
   12fbc:	2057      	movs	r0, #87	; 0x57
   12fbe:	4b16      	ldr	r3, [pc, #88]	; (13018 <_ZN15ARINC_Interface4InitEv+0x178>)
   12fc0:	4798      	blx	r3
	arincTimer.start();
   12fc2:	480f      	ldr	r0, [pc, #60]	; (13000 <_ZN15ARINC_Interface4InitEv+0x160>)
   12fc4:	4b15      	ldr	r3, [pc, #84]	; (1301c <_ZN15ARINC_Interface4InitEv+0x17c>)
   12fc6:	4798      	blx	r3
	//HI3893.InitPriorityLabels();
	return isOK;
   12fc8:	687b      	ldr	r3, [r7, #4]
   12fca:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
}
   12fce:	4618      	mov	r0, r3
   12fd0:	3708      	adds	r7, #8
   12fd2:	46bd      	mov	sp, r7
   12fd4:	bd80      	pop	{r7, pc}
   12fd6:	bf00      	nop
   12fd8:	00013549 	.word	0x00013549
   12fdc:	000124ed 	.word	0x000124ed
   12fe0:	000136c9 	.word	0x000136c9
   12fe4:	0001fcd8 	.word	0x0001fcd8
   12fe8:	2000a258 	.word	0x2000a258
   12fec:	00017899 	.word	0x00017899
   12ff0:	0001b491 	.word	0x0001b491
   12ff4:	000138d9 	.word	0x000138d9
   12ff8:	00013a65 	.word	0x00013a65
   12ffc:	00013945 	.word	0x00013945
   13000:	2000a238 	.word	0x2000a238
   13004:	00016da9 	.word	0x00016da9
   13008:	00012be1 	.word	0x00012be1
   1300c:	00016eb9 	.word	0x00016eb9
   13010:	00012bf5 	.word	0x00012bf5
   13014:	00012c15 	.word	0x00012c15
   13018:	0000613d 	.word	0x0000613d
   1301c:	00016df9 	.word	0x00016df9

00013020 <_ZN15ARINC_Interface12ReadRXBufferEh>:
	else
	{
		return false;
	}
}
uint32_t ARINC_Interface::ReadRXBuffer(uint8_t n){
   13020:	b580      	push	{r7, lr}
   13022:	b0c4      	sub	sp, #272	; 0x110
   13024:	af00      	add	r7, sp, #0
   13026:	1d3b      	adds	r3, r7, #4
   13028:	6018      	str	r0, [r3, #0]
   1302a:	460a      	mov	r2, r1
   1302c:	1cfb      	adds	r3, r7, #3
   1302e:	701a      	strb	r2, [r3, #0]
	
	usb.println("r\n---!got message!----");
   13030:	4949      	ldr	r1, [pc, #292]	; (13158 <_ZN15ARINC_Interface12ReadRXBufferEh+0x138>)
   13032:	484a      	ldr	r0, [pc, #296]	; (1315c <_ZN15ARINC_Interface12ReadRXBufferEh+0x13c>)
   13034:	4b4a      	ldr	r3, [pc, #296]	; (13160 <_ZN15ARINC_Interface12ReadRXBufferEh+0x140>)
   13036:	4798      	blx	r3
	uint8_t receiver[2*RX_LABELS_NUMBER][4];
	uint8_t	messagesCounter=0;
   13038:	2300      	movs	r3, #0
   1303a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	cpu_irq_disable();
   1303e:	1d3b      	adds	r3, r7, #4
   13040:	6818      	ldr	r0, [r3, #0]
   13042:	4b48      	ldr	r3, [pc, #288]	; (13164 <_ZN15ARINC_Interface12ReadRXBufferEh+0x144>)
   13044:	4798      	blx	r3
	                     // Poll Receiver1 status register
	
	for (uint8_t ii = 0; ii <2*RX_LABELS_NUMBER ; ii++)
   13046:	2300      	movs	r3, #0
   13048:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
   1304c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
   13050:	2b3f      	cmp	r3, #63	; 0x3f
   13052:	dc46      	bgt.n	130e2 <_ZN15ARINC_Interface12ReadRXBufferEh+0xc2>
	{
		statusRegister= HI3593.R_Register(RXSTATUS_1+(n-1)*0x20);  
   13054:	1d3b      	adds	r3, r7, #4
   13056:	681b      	ldr	r3, [r3, #0]
   13058:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
   1305c:	1cfb      	adds	r3, r7, #3
   1305e:	781b      	ldrb	r3, [r3, #0]
   13060:	3b01      	subs	r3, #1
   13062:	b2db      	uxtb	r3, r3
   13064:	015b      	lsls	r3, r3, #5
   13066:	b2db      	uxtb	r3, r3
   13068:	3b70      	subs	r3, #112	; 0x70
   1306a:	b2db      	uxtb	r3, r3
   1306c:	4619      	mov	r1, r3
   1306e:	4610      	mov	r0, r2
   13070:	4b3d      	ldr	r3, [pc, #244]	; (13168 <_ZN15ARINC_Interface12ReadRXBufferEh+0x148>)
   13072:	4798      	blx	r3
   13074:	4603      	mov	r3, r0
   13076:	461a      	mov	r2, r3
   13078:	1d3b      	adds	r3, r7, #4
   1307a:	681b      	ldr	r3, [r3, #0]
   1307c:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
		if(((statusRegister & FFEMPTY) == 0))
   13080:	1d3b      	adds	r3, r7, #4
   13082:	681b      	ldr	r3, [r3, #0]
   13084:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
   13088:	f003 0301 	and.w	r3, r3, #1
   1308c:	2b00      	cmp	r3, #0
   1308e:	d127      	bne.n	130e0 <_ZN15ARINC_Interface12ReadRXBufferEh+0xc0>
		{
				
			HI3593.ArincRead(RXFIFO_1+(n-1)*0x20,RXBuffer );
   13090:	1d3b      	adds	r3, r7, #4
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	f503 70c6 	add.w	r0, r3, #396	; 0x18c
   13098:	1cfb      	adds	r3, r7, #3
   1309a:	781b      	ldrb	r3, [r3, #0]
   1309c:	3304      	adds	r3, #4
   1309e:	b2db      	uxtb	r3, r3
   130a0:	015b      	lsls	r3, r3, #5
   130a2:	b2d9      	uxtb	r1, r3
   130a4:	1d3b      	adds	r3, r7, #4
   130a6:	681b      	ldr	r3, [r3, #0]
   130a8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   130ac:	461a      	mov	r2, r3
   130ae:	4b2f      	ldr	r3, [pc, #188]	; (1316c <_ZN15ARINC_Interface12ReadRXBufferEh+0x14c>)
   130b0:	4798      	blx	r3
				
			memcpy(receiver[messagesCounter],RXBuffer,g_RXBuffSize);  // copy frame to large array for safe keeping
   130b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
   130b6:	f107 020c 	add.w	r2, r7, #12
   130ba:	009b      	lsls	r3, r3, #2
   130bc:	4413      	add	r3, r2
   130be:	1d3a      	adds	r2, r7, #4
   130c0:	6812      	ldr	r2, [r2, #0]
   130c2:	f502 72b0 	add.w	r2, r2, #352	; 0x160
   130c6:	6812      	ldr	r2, [r2, #0]
   130c8:	601a      	str	r2, [r3, #0]
				
			//		printARINCData(REC1_HEADER,RXBuffer);
		//	CheckMessageCountMax();
			messagesCounter++;
   130ca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
   130ce:	3301      	adds	r3, #1
   130d0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	for (uint8_t ii = 0; ii <2*RX_LABELS_NUMBER ; ii++)
   130d4:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
   130d8:	3301      	adds	r3, #1
   130da:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
   130de:	e7b5      	b.n	1304c <_ZN15ARINC_Interface12ReadRXBufferEh+0x2c>
				
		}else{
			break;
   130e0:	bf00      	nop
		}
	}

	cpu_irq_enable();
   130e2:	1d3b      	adds	r3, r7, #4
   130e4:	6818      	ldr	r0, [r3, #0]
   130e6:	4b22      	ldr	r3, [pc, #136]	; (13170 <_ZN15ARINC_Interface12ReadRXBufferEh+0x150>)
   130e8:	4798      	blx	r3

		if ((n==1))
   130ea:	1cfb      	adds	r3, r7, #3
   130ec:	781b      	ldrb	r3, [r3, #0]
   130ee:	2b01      	cmp	r3, #1
   130f0:	d105      	bne.n	130fe <_ZN15ARINC_Interface12ReadRXBufferEh+0xde>
		{
			newMessageR1=false;
   130f2:	1d3b      	adds	r3, r7, #4
   130f4:	681b      	ldr	r3, [r3, #0]
   130f6:	2200      	movs	r2, #0
   130f8:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
   130fc:	e008      	b.n	13110 <_ZN15ARINC_Interface12ReadRXBufferEh+0xf0>
		}
		else if (n==2)
   130fe:	1cfb      	adds	r3, r7, #3
   13100:	781b      	ldrb	r3, [r3, #0]
   13102:	2b02      	cmp	r3, #2
   13104:	d104      	bne.n	13110 <_ZN15ARINC_Interface12ReadRXBufferEh+0xf0>
		{
			newMessageR2=false;
   13106:	1d3b      	adds	r3, r7, #4
   13108:	681b      	ldr	r3, [r3, #0]
   1310a:	2200      	movs	r2, #0
   1310c:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
		}
	for (uint8_t i = 0; i < messagesCounter; i++)
   13110:	2300      	movs	r3, #0
   13112:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
   13116:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
   1311a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
   1311e:	429a      	cmp	r2, r3
   13120:	da10      	bge.n	13144 <_ZN15ARINC_Interface12ReadRXBufferEh+0x124>
	{
		SortReceivedData(receiver[i]);
   13122:	1d3b      	adds	r3, r7, #4
   13124:	6818      	ldr	r0, [r3, #0]
   13126:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
   1312a:	f107 020c 	add.w	r2, r7, #12
   1312e:	009b      	lsls	r3, r3, #2
   13130:	4413      	add	r3, r2
   13132:	4619      	mov	r1, r3
   13134:	4b0f      	ldr	r3, [pc, #60]	; (13174 <_ZN15ARINC_Interface12ReadRXBufferEh+0x154>)
   13136:	4798      	blx	r3
	for (uint8_t i = 0; i < messagesCounter; i++)
   13138:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
   1313c:	3301      	adds	r3, #1
   1313e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
   13142:	e7e8      	b.n	13116 <_ZN15ARINC_Interface12ReadRXBufferEh+0xf6>
	}
	
	return statusRegister;	
   13144:	1d3b      	adds	r3, r7, #4
   13146:	681b      	ldr	r3, [r3, #0]
   13148:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
}
   1314c:	4618      	mov	r0, r3
   1314e:	f507 7788 	add.w	r7, r7, #272	; 0x110
   13152:	46bd      	mov	sp, r7
   13154:	bd80      	pop	{r7, pc}
   13156:	bf00      	nop
   13158:	0001fd1c 	.word	0x0001fd1c
   1315c:	2000a258 	.word	0x2000a258
   13160:	00017899 	.word	0x00017899
   13164:	00013485 	.word	0x00013485
   13168:	00013d11 	.word	0x00013d11
   1316c:	00013ad1 	.word	0x00013ad1
   13170:	0001346d 	.word	0x0001346d
   13174:	00012725 	.word	0x00012725

00013178 <_ZN15ARINC_Interface15ReadBufferLabelEh>:
		}
	
	return statusRegister;
}

uint32_t ARINC_Interface::ReadBufferLabel(uint8_t label){
   13178:	b480      	push	{r7}
   1317a:	b085      	sub	sp, #20
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
   13180:	460b      	mov	r3, r1
   13182:	70fb      	strb	r3, [r7, #3]
	uint32_t *data;
	uint8_t	j;
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   13184:	2300      	movs	r3, #0
   13186:	73fb      	strb	r3, [r7, #15]
   13188:	7bfb      	ldrb	r3, [r7, #15]
   1318a:	2b1f      	cmp	r3, #31
   1318c:	dc21      	bgt.n	131d2 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x5a>
		j=(MessageCount+i)%MESSAGECOUNTMAX;
   1318e:	687b      	ldr	r3, [r7, #4]
   13190:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
   13194:	7bfb      	ldrb	r3, [r7, #15]
   13196:	4413      	add	r3, r2
   13198:	b2db      	uxtb	r3, r3
   1319a:	f003 031f 	and.w	r3, r3, #31
   1319e:	73bb      	strb	r3, [r7, #14]
		if (receiverBuffer[j][3]==label)
   131a0:	687b      	ldr	r3, [r7, #4]
   131a2:	691a      	ldr	r2, [r3, #16]
   131a4:	7bbb      	ldrb	r3, [r7, #14]
   131a6:	009b      	lsls	r3, r3, #2
   131a8:	4413      	add	r3, r2
   131aa:	681b      	ldr	r3, [r3, #0]
   131ac:	3303      	adds	r3, #3
   131ae:	781b      	ldrb	r3, [r3, #0]
   131b0:	78fa      	ldrb	r2, [r7, #3]
   131b2:	429a      	cmp	r2, r3
   131b4:	d109      	bne.n	131ca <_ZN15ARINC_Interface15ReadBufferLabelEh+0x52>
		{
			data=(uint32_t*)receiverBuffer[j];
   131b6:	687b      	ldr	r3, [r7, #4]
   131b8:	691a      	ldr	r2, [r3, #16]
   131ba:	7bbb      	ldrb	r3, [r7, #14]
   131bc:	009b      	lsls	r3, r3, #2
   131be:	4413      	add	r3, r2
   131c0:	681b      	ldr	r3, [r3, #0]
   131c2:	60bb      	str	r3, [r7, #8]
			return *data;
   131c4:	68bb      	ldr	r3, [r7, #8]
   131c6:	681b      	ldr	r3, [r3, #0]
   131c8:	e004      	b.n	131d4 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x5c>
	for (uint8_t i=0;i<MESSAGECOUNTMAX;i++){
   131ca:	7bfb      	ldrb	r3, [r7, #15]
   131cc:	3301      	adds	r3, #1
   131ce:	73fb      	strb	r3, [r7, #15]
   131d0:	e7da      	b.n	13188 <_ZN15ARINC_Interface15ReadBufferLabelEh+0x10>
		}
		
	}

	return 0;
   131d2:	2300      	movs	r3, #0
}
   131d4:	4618      	mov	r0, r3
   131d6:	3714      	adds	r7, #20
   131d8:	46bd      	mov	sp, r7
   131da:	bc80      	pop	{r7}
   131dc:	4770      	bx	lr
	...

000131e0 <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh>:
   131e0:	b580      	push	{r7, lr}
   131e2:	b082      	sub	sp, #8
   131e4:	af00      	add	r7, sp, #0
   131e6:	6078      	str	r0, [r7, #4]
   131e8:	460b      	mov	r3, r1
   131ea:	70fb      	strb	r3, [r7, #3]
   131ec:	687b      	ldr	r3, [r7, #4]
   131ee:	681b      	ldr	r3, [r3, #0]
   131f0:	3b14      	subs	r3, #20
   131f2:	681b      	ldr	r3, [r3, #0]
   131f4:	461a      	mov	r2, r3
   131f6:	687b      	ldr	r3, [r7, #4]
   131f8:	4413      	add	r3, r2
   131fa:	78fa      	ldrb	r2, [r7, #3]
   131fc:	4611      	mov	r1, r2
   131fe:	4618      	mov	r0, r3
   13200:	4b03      	ldr	r3, [pc, #12]	; (13210 <_ZTv0_n20_N15ARINC_Interface15ReadBufferLabelEh+0x30>)
   13202:	4798      	blx	r3
   13204:	4603      	mov	r3, r0
   13206:	4618      	mov	r0, r3
   13208:	3708      	adds	r7, #8
   1320a:	46bd      	mov	sp, r7
   1320c:	bd80      	pop	{r7, pc}
   1320e:	bf00      	nop
   13210:	00013179 	.word	0x00013179

00013214 <_ZN15ARINC_Interface18TrasmitSingleLabelEv>:
uint32_t ARINC_Interface::ReadBufferLabel(int label){
	uint8_t	l=Label2Byte((uint32_t)label);
	return (uint32_t)ReadBufferLabel(l);
}
uint32_t ARINC_Interface::TrasmitSingleLabel(void){
   13214:	b580      	push	{r7, lr}
   13216:	b082      	sub	sp, #8
   13218:	af00      	add	r7, sp, #0
   1321a:	6078      	str	r0, [r7, #4]
	return	TrasmitSingleLabel((uint32_t)DEFAULT_LABEL);
   1321c:	f44f 7187 	mov.w	r1, #270	; 0x10e
   13220:	6878      	ldr	r0, [r7, #4]
   13222:	4b03      	ldr	r3, [pc, #12]	; (13230 <_ZN15ARINC_Interface18TrasmitSingleLabelEv+0x1c>)
   13224:	4798      	blx	r3
   13226:	4603      	mov	r3, r0
}
   13228:	4618      	mov	r0, r3
   1322a:	3708      	adds	r7, #8
   1322c:	46bd      	mov	sp, r7
   1322e:	bd80      	pop	{r7, pc}
   13230:	00013235 	.word	0x00013235

00013234 <_ZN15ARINC_Interface18TrasmitSingleLabelEm>:

uint32_t ARINC_Interface::TrasmitSingleLabel(uint32_t l){
   13234:	b590      	push	{r4, r7, lr}
   13236:	b085      	sub	sp, #20
   13238:	af00      	add	r7, sp, #0
   1323a:	6078      	str	r0, [r7, #4]
   1323c:	6039      	str	r1, [r7, #0]
	gpio_set_pin_level(LED0,false);
   1323e:	2100      	movs	r1, #0
   13240:	2052      	movs	r0, #82	; 0x52
   13242:	4b45      	ldr	r3, [pc, #276]	; (13358 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   13244:	4798      	blx	r3
	octalLabel=Label2Byte(l);
   13246:	687b      	ldr	r3, [r7, #4]
   13248:	681b      	ldr	r3, [r3, #0]
   1324a:	3b0c      	subs	r3, #12
   1324c:	681b      	ldr	r3, [r3, #0]
   1324e:	461a      	mov	r2, r3
   13250:	687b      	ldr	r3, [r7, #4]
   13252:	4413      	add	r3, r2
   13254:	681b      	ldr	r3, [r3, #0]
   13256:	3304      	adds	r3, #4
   13258:	681b      	ldr	r3, [r3, #0]
   1325a:	687a      	ldr	r2, [r7, #4]
   1325c:	6812      	ldr	r2, [r2, #0]
   1325e:	3a0c      	subs	r2, #12
   13260:	6812      	ldr	r2, [r2, #0]
   13262:	4611      	mov	r1, r2
   13264:	687a      	ldr	r2, [r7, #4]
   13266:	440a      	add	r2, r1
   13268:	6839      	ldr	r1, [r7, #0]
   1326a:	4610      	mov	r0, r2
   1326c:	4798      	blx	r3
   1326e:	4603      	mov	r3, r0
   13270:	461a      	mov	r2, r3
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
	index=GetIndexTXLabelarray(FlipByte(octalLabel),LabelsArrayTX);
   13278:	687b      	ldr	r3, [r7, #4]
   1327a:	681b      	ldr	r3, [r3, #0]
   1327c:	3b0c      	subs	r3, #12
   1327e:	681b      	ldr	r3, [r3, #0]
   13280:	461a      	mov	r2, r3
   13282:	687b      	ldr	r3, [r7, #4]
   13284:	189c      	adds	r4, r3, r2
   13286:	687b      	ldr	r3, [r7, #4]
   13288:	681b      	ldr	r3, [r3, #0]
   1328a:	3b0c      	subs	r3, #12
   1328c:	681b      	ldr	r3, [r3, #0]
   1328e:	461a      	mov	r2, r3
   13290:	687b      	ldr	r3, [r7, #4]
   13292:	4413      	add	r3, r2
   13294:	681b      	ldr	r3, [r3, #0]
   13296:	681b      	ldr	r3, [r3, #0]
   13298:	687a      	ldr	r2, [r7, #4]
   1329a:	6812      	ldr	r2, [r2, #0]
   1329c:	3a0c      	subs	r2, #12
   1329e:	6812      	ldr	r2, [r2, #0]
   132a0:	4611      	mov	r1, r2
   132a2:	687a      	ldr	r2, [r7, #4]
   132a4:	1850      	adds	r0, r2, r1
   132a6:	687a      	ldr	r2, [r7, #4]
   132a8:	f892 2184 	ldrb.w	r2, [r2, #388]	; 0x184
   132ac:	4611      	mov	r1, r2
   132ae:	4798      	blx	r3
   132b0:	4603      	mov	r3, r0
   132b2:	4619      	mov	r1, r3
   132b4:	687b      	ldr	r3, [r7, #4]
   132b6:	685b      	ldr	r3, [r3, #4]
   132b8:	461a      	mov	r2, r3
   132ba:	4620      	mov	r0, r4
   132bc:	4b27      	ldr	r3, [pc, #156]	; (1335c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x128>)
   132be:	4798      	blx	r3
   132c0:	4603      	mov	r3, r0
   132c2:	461a      	mov	r2, r3
   132c4:	687b      	ldr	r3, [r7, #4]
   132c6:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	uint8_t localBuffer[4];
//	memcpy(localBuffer,LabelsArrayTX,4);
	memcpy(localBuffer,transmitBuffer[index],4);
   132ca:	687b      	ldr	r3, [r7, #4]
   132cc:	695a      	ldr	r2, [r3, #20]
   132ce:	687b      	ldr	r3, [r7, #4]
   132d0:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
   132d4:	009b      	lsls	r3, r3, #2
   132d6:	4413      	add	r3, r2
   132d8:	681b      	ldr	r3, [r3, #0]
   132da:	681b      	ldr	r3, [r3, #0]
   132dc:	60fb      	str	r3, [r7, #12]
//	Uint32FourBytesArray(0x1234561d,localBuffer);
//	PrepareSingleTXBuffer(TXBuffer,LabelsArrayTX);
	usb.println(" transmitting...");
   132de:	4920      	ldr	r1, [pc, #128]	; (13360 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x12c>)
   132e0:	4820      	ldr	r0, [pc, #128]	; (13364 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   132e2:	4b21      	ldr	r3, [pc, #132]	; (13368 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   132e4:	4798      	blx	r3
	cpu_irq_disable();
   132e6:	6878      	ldr	r0, [r7, #4]
   132e8:	4b20      	ldr	r3, [pc, #128]	; (1336c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x138>)
   132ea:	4798      	blx	r3
	HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   132ec:	687b      	ldr	r3, [r7, #4]
   132ee:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   132f2:	f107 020c 	add.w	r2, r7, #12
   132f6:	210c      	movs	r1, #12
   132f8:	4618      	mov	r0, r3
   132fa:	4b1d      	ldr	r3, [pc, #116]	; (13370 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x13c>)
   132fc:	4798      	blx	r3
	cpu_irq_enable();
   132fe:	6878      	ldr	r0, [r7, #4]
   13300:	4b1c      	ldr	r3, [pc, #112]	; (13374 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x140>)
   13302:	4798      	blx	r3
	usb.println(" Transmitted!");
   13304:	491c      	ldr	r1, [pc, #112]	; (13378 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x144>)
   13306:	4817      	ldr	r0, [pc, #92]	; (13364 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   13308:	4b17      	ldr	r3, [pc, #92]	; (13368 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   1330a:	4798      	blx	r3
	usb.println(">");
   1330c:	491b      	ldr	r1, [pc, #108]	; (1337c <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x148>)
   1330e:	4815      	ldr	r0, [pc, #84]	; (13364 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x130>)
   13310:	4b15      	ldr	r3, [pc, #84]	; (13368 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x134>)
   13312:	4798      	blx	r3
	printARINCTXData(TXBuffer);
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	f203 1327 	addw	r3, r3, #295	; 0x127
   1331a:	4619      	mov	r1, r3
   1331c:	6878      	ldr	r0, [r7, #4]
   1331e:	4b18      	ldr	r3, [pc, #96]	; (13380 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x14c>)
   13320:	4798      	blx	r3
	txTimeout=false;
   13322:	687b      	ldr	r3, [r7, #4]
   13324:	2200      	movs	r2, #0
   13326:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	gpio_set_pin_level(LED0,true);
   1332a:	2101      	movs	r1, #1
   1332c:	2052      	movs	r0, #82	; 0x52
   1332e:	4b0a      	ldr	r3, [pc, #40]	; (13358 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x124>)
   13330:	4798      	blx	r3
	return FourBytesArray2Uint32(TXBuffer);
   13332:	687b      	ldr	r3, [r7, #4]
   13334:	681b      	ldr	r3, [r3, #0]
   13336:	3b0c      	subs	r3, #12
   13338:	681b      	ldr	r3, [r3, #0]
   1333a:	461a      	mov	r2, r3
   1333c:	687b      	ldr	r3, [r7, #4]
   1333e:	441a      	add	r2, r3
   13340:	687b      	ldr	r3, [r7, #4]
   13342:	f203 1327 	addw	r3, r3, #295	; 0x127
   13346:	4619      	mov	r1, r3
   13348:	4610      	mov	r0, r2
   1334a:	4b0e      	ldr	r3, [pc, #56]	; (13384 <_ZN15ARINC_Interface18TrasmitSingleLabelEm+0x150>)
   1334c:	4798      	blx	r3
   1334e:	4603      	mov	r3, r0
}
   13350:	4618      	mov	r0, r3
   13352:	3714      	adds	r7, #20
   13354:	46bd      	mov	sp, r7
   13356:	bd90      	pop	{r4, r7, pc}
   13358:	00012ba9 	.word	0x00012ba9
   1335c:	0001297b 	.word	0x0001297b
   13360:	0001fd34 	.word	0x0001fd34
   13364:	2000a258 	.word	0x2000a258
   13368:	00017899 	.word	0x00017899
   1336c:	00013485 	.word	0x00013485
   13370:	00013b9d 	.word	0x00013b9d
   13374:	0001346d 	.word	0x0001346d
   13378:	0001fd48 	.word	0x0001fd48
   1337c:	0001fd58 	.word	0x0001fd58
   13380:	000134d5 	.word	0x000134d5
   13384:	000129b9 	.word	0x000129b9

00013388 <_ZN15ARINC_Interface18TrasmitSingleLabelEh>:

uint8_t ARINC_Interface::TrasmitSingleLabel(uint8_t l){
   13388:	b580      	push	{r7, lr}
   1338a:	b084      	sub	sp, #16
   1338c:	af00      	add	r7, sp, #0
   1338e:	6078      	str	r0, [r7, #4]
   13390:	460b      	mov	r3, r1
   13392:	70fb      	strb	r3, [r7, #3]
	gpio_set_pin_level(LED0,false);
   13394:	2100      	movs	r1, #0
   13396:	2052      	movs	r0, #82	; 0x52
   13398:	4b1c      	ldr	r3, [pc, #112]	; (1340c <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x84>)
   1339a:	4798      	blx	r3
	index=GetIndexTXLabelarray(l,LabelsArrayTX);
   1339c:	687b      	ldr	r3, [r7, #4]
   1339e:	681b      	ldr	r3, [r3, #0]
   133a0:	3b0c      	subs	r3, #12
   133a2:	681b      	ldr	r3, [r3, #0]
   133a4:	461a      	mov	r2, r3
   133a6:	687b      	ldr	r3, [r7, #4]
   133a8:	1898      	adds	r0, r3, r2
   133aa:	687b      	ldr	r3, [r7, #4]
   133ac:	685a      	ldr	r2, [r3, #4]
   133ae:	78fb      	ldrb	r3, [r7, #3]
   133b0:	4619      	mov	r1, r3
   133b2:	4b17      	ldr	r3, [pc, #92]	; (13410 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x88>)
   133b4:	4798      	blx	r3
   133b6:	4603      	mov	r3, r0
   133b8:	461a      	mov	r2, r3
   133ba:	687b      	ldr	r3, [r7, #4]
   133bc:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	uint8_t localBuffer[4];
	//	memcpy(localBuffer,LabelsArrayTX,4);
	memcpy(localBuffer,transmitBuffer[index],4);
   133c0:	687b      	ldr	r3, [r7, #4]
   133c2:	695a      	ldr	r2, [r3, #20]
   133c4:	687b      	ldr	r3, [r7, #4]
   133c6:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
   133ca:	009b      	lsls	r3, r3, #2
   133cc:	4413      	add	r3, r2
   133ce:	681b      	ldr	r3, [r3, #0]
   133d0:	681b      	ldr	r3, [r3, #0]
   133d2:	60fb      	str	r3, [r7, #12]
	//	Uint32FourBytesArray(0x1234561d,localBuffer);
	//	PrepareSingleTXBuffer(TXBuffer,LabelsArrayTX);
//	usb.println(" transmitting...");
	cpu_irq_disable();
   133d4:	6878      	ldr	r0, [r7, #4]
   133d6:	4b0f      	ldr	r3, [pc, #60]	; (13414 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x8c>)
   133d8:	4798      	blx	r3
	HI3593.TransmitCommandAndData(TXFIFO,localBuffer);
   133da:	687b      	ldr	r3, [r7, #4]
   133dc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
   133e0:	f107 020c 	add.w	r2, r7, #12
   133e4:	210c      	movs	r1, #12
   133e6:	4618      	mov	r0, r3
   133e8:	4b0b      	ldr	r3, [pc, #44]	; (13418 <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x90>)
   133ea:	4798      	blx	r3
	cpu_irq_enable();
   133ec:	6878      	ldr	r0, [r7, #4]
   133ee:	4b0b      	ldr	r3, [pc, #44]	; (1341c <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x94>)
   133f0:	4798      	blx	r3
	//usb.println(" Transmitted!");
//	usb.println(">");
	//printARINCTXData(TXBuffer);
	txTimeout=false;
   133f2:	687b      	ldr	r3, [r7, #4]
   133f4:	2200      	movs	r2, #0
   133f6:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
	gpio_set_pin_level(LED0,true);
   133fa:	2101      	movs	r1, #1
   133fc:	2052      	movs	r0, #82	; 0x52
   133fe:	4b03      	ldr	r3, [pc, #12]	; (1340c <_ZN15ARINC_Interface18TrasmitSingleLabelEh+0x84>)
   13400:	4798      	blx	r3
	return l;
   13402:	78fb      	ldrb	r3, [r7, #3]
}
   13404:	4618      	mov	r0, r3
   13406:	3710      	adds	r7, #16
   13408:	46bd      	mov	sp, r7
   1340a:	bd80      	pop	{r7, pc}
   1340c:	00012ba9 	.word	0x00012ba9
   13410:	0001297b 	.word	0x0001297b
   13414:	00013485 	.word	0x00013485
   13418:	00013b9d 	.word	0x00013b9d
   1341c:	0001346d 	.word	0x0001346d

00013420 <_ZN15ARINC_Interface16TransmitTXBufferEv>:

void	ARINC_Interface::TransmitTXBuffer(void){
   13420:	b580      	push	{r7, lr}
   13422:	b084      	sub	sp, #16
   13424:	af00      	add	r7, sp, #0
   13426:	6078      	str	r0, [r7, #4]
	uint8_t i,l;
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
   13428:	2300      	movs	r3, #0
   1342a:	73fb      	strb	r3, [r7, #15]
   1342c:	7bfb      	ldrb	r3, [r7, #15]
   1342e:	2b1f      	cmp	r3, #31
   13430:	dc15      	bgt.n	1345e <_ZN15ARINC_Interface16TransmitTXBufferEv+0x3e>
	{
		if (LabelsArrayTX[i]>0)
   13432:	687b      	ldr	r3, [r7, #4]
   13434:	685a      	ldr	r2, [r3, #4]
   13436:	7bfb      	ldrb	r3, [r7, #15]
   13438:	4413      	add	r3, r2
   1343a:	781b      	ldrb	r3, [r3, #0]
   1343c:	2b00      	cmp	r3, #0
   1343e:	dd0a      	ble.n	13456 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x36>
		{
			l=LabelsArrayTX[i];
   13440:	687b      	ldr	r3, [r7, #4]
   13442:	685a      	ldr	r2, [r3, #4]
   13444:	7bfb      	ldrb	r3, [r7, #15]
   13446:	4413      	add	r3, r2
   13448:	781b      	ldrb	r3, [r3, #0]
   1344a:	73bb      	strb	r3, [r7, #14]
			TrasmitSingleLabel(l);
   1344c:	7bbb      	ldrb	r3, [r7, #14]
   1344e:	4619      	mov	r1, r3
   13450:	6878      	ldr	r0, [r7, #4]
   13452:	4b05      	ldr	r3, [pc, #20]	; (13468 <_ZN15ARINC_Interface16TransmitTXBufferEv+0x48>)
   13454:	4798      	blx	r3
	for (i = 0; i <MESSAGECOUNTMAX ; i++)
   13456:	7bfb      	ldrb	r3, [r7, #15]
   13458:	3301      	adds	r3, #1
   1345a:	73fb      	strb	r3, [r7, #15]
   1345c:	e7e6      	b.n	1342c <_ZN15ARINC_Interface16TransmitTXBufferEv+0xc>
		}
	}
}
   1345e:	bf00      	nop
   13460:	3710      	adds	r7, #16
   13462:	46bd      	mov	sp, r7
   13464:	bd80      	pop	{r7, pc}
   13466:	bf00      	nop
   13468:	00013389 	.word	0x00013389

0001346c <_ZN15ARINC_Interface14cpu_irq_enableEv>:
	usb.println("  I = Increment Message and Transmit. Explorer Mode  - ONLY!");
	usb.println("  M = Enter Custom Message. Explorer Mode  - ONLY!");
	usb.println("  ENTER= Transmit next message. Explorer Mode  - ONLY!");
}

void	ARINC_Interface::cpu_irq_enable(void){
   1346c:	b480      	push	{r7}
   1346e:	b083      	sub	sp, #12
   13470:	af00      	add	r7, sp, #0
   13472:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   13474:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   13478:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
   1347a:	bf00      	nop
   1347c:	370c      	adds	r7, #12
   1347e:	46bd      	mov	sp, r7
   13480:	bc80      	pop	{r7}
   13482:	4770      	bx	lr

00013484 <_ZN15ARINC_Interface15cpu_irq_disableEv>:
void	ARINC_Interface::cpu_irq_disable(void){
   13484:	b480      	push	{r7}
   13486:	b083      	sub	sp, #12
   13488:	af00      	add	r7, sp, #0
   1348a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   1348c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   13490:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
   13492:	bf00      	nop
   13494:	370c      	adds	r7, #12
   13496:	46bd      	mov	sp, r7
   13498:	bc80      	pop	{r7}
   1349a:	4770      	bx	lr

0001349c <_ZN15ARINC_Interface12PrintHexByteEh>:
	usb.write(&p,1);
	p=0x0D;
	usb.write(&p,1);
}
void ARINC_Interface::PrintHexByte(uint8_t c)
{
   1349c:	b580      	push	{r7, lr}
   1349e:	b082      	sub	sp, #8
   134a0:	af00      	add	r7, sp, #0
   134a2:	6078      	str	r0, [r7, #4]
   134a4:	460b      	mov	r3, r1
   134a6:	70fb      	strb	r3, [r7, #3]
	usb<<"0x ";
   134a8:	4906      	ldr	r1, [pc, #24]	; (134c4 <_ZN15ARINC_Interface12PrintHexByteEh+0x28>)
   134aa:	4807      	ldr	r0, [pc, #28]	; (134c8 <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   134ac:	4b07      	ldr	r3, [pc, #28]	; (134cc <_ZN15ARINC_Interface12PrintHexByteEh+0x30>)
   134ae:	4798      	blx	r3
	usb.println(c,HEX);
   134b0:	78fb      	ldrb	r3, [r7, #3]
   134b2:	2210      	movs	r2, #16
   134b4:	4619      	mov	r1, r3
   134b6:	4804      	ldr	r0, [pc, #16]	; (134c8 <_ZN15ARINC_Interface12PrintHexByteEh+0x2c>)
   134b8:	4b05      	ldr	r3, [pc, #20]	; (134d0 <_ZN15ARINC_Interface12PrintHexByteEh+0x34>)
   134ba:	4798      	blx	r3
	
}
   134bc:	bf00      	nop
   134be:	3708      	adds	r7, #8
   134c0:	46bd      	mov	sp, r7
   134c2:	bd80      	pop	{r7, pc}
   134c4:	000201f8 	.word	0x000201f8
   134c8:	2000a258 	.word	0x2000a258
   134cc:	000013e1 	.word	0x000013e1
   134d0:	000178cd 	.word	0x000178cd

000134d4 <_ZN15ARINC_Interface16printARINCTXDataEPh>:
		usb.println("\n\rLabels 192-255:  ");
	}
	
}

void ARINC_Interface::printARINCTXData(unsigned char *array) {
   134d4:	b580      	push	{r7, lr}
   134d6:	b084      	sub	sp, #16
   134d8:	af00      	add	r7, sp, #0
   134da:	6078      	str	r0, [r7, #4]
   134dc:	6039      	str	r1, [r7, #0]
	unsigned char i;
	
	usb.println("\n\r>TX    Data:");
   134de:	4914      	ldr	r1, [pc, #80]	; (13530 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x5c>)
   134e0:	4814      	ldr	r0, [pc, #80]	; (13534 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   134e2:	4b15      	ldr	r3, [pc, #84]	; (13538 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   134e4:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   134e6:	2300      	movs	r3, #0
   134e8:	73fb      	strb	r3, [r7, #15]
   134ea:	7bfb      	ldrb	r3, [r7, #15]
   134ec:	2b02      	cmp	r3, #2
   134ee:	dc0b      	bgt.n	13508 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x34>
		PrintHexByte(array[i]);          // Output the data
   134f0:	7bfb      	ldrb	r3, [r7, #15]
   134f2:	683a      	ldr	r2, [r7, #0]
   134f4:	4413      	add	r3, r2
   134f6:	781b      	ldrb	r3, [r3, #0]
   134f8:	4619      	mov	r1, r3
   134fa:	6878      	ldr	r0, [r7, #4]
   134fc:	4b0f      	ldr	r3, [pc, #60]	; (1353c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   134fe:	4798      	blx	r3
	for(i=0; i< 3;i++) {
   13500:	7bfb      	ldrb	r3, [r7, #15]
   13502:	3301      	adds	r3, #1
   13504:	73fb      	strb	r3, [r7, #15]
   13506:	e7f0      	b.n	134ea <_ZN15ARINC_Interface16printARINCTXDataEPh+0x16>
	}
	usb.println("Label:");
   13508:	490d      	ldr	r1, [pc, #52]	; (13540 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x6c>)
   1350a:	480a      	ldr	r0, [pc, #40]	; (13534 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   1350c:	4b0a      	ldr	r3, [pc, #40]	; (13538 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   1350e:	4798      	blx	r3
	PrintHexByte(array[3]);             // Output the label data
   13510:	683b      	ldr	r3, [r7, #0]
   13512:	3303      	adds	r3, #3
   13514:	781b      	ldrb	r3, [r3, #0]
   13516:	4619      	mov	r1, r3
   13518:	6878      	ldr	r0, [r7, #4]
   1351a:	4b08      	ldr	r3, [pc, #32]	; (1353c <_ZN15ARINC_Interface16printARINCTXDataEPh+0x68>)
   1351c:	4798      	blx	r3
	
	//crlf();
	usb.println(">");
   1351e:	4909      	ldr	r1, [pc, #36]	; (13544 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x70>)
   13520:	4804      	ldr	r0, [pc, #16]	; (13534 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x60>)
   13522:	4b05      	ldr	r3, [pc, #20]	; (13538 <_ZN15ARINC_Interface16printARINCTXDataEPh+0x64>)
   13524:	4798      	blx	r3
}
   13526:	bf00      	nop
   13528:	3710      	adds	r7, #16
   1352a:	46bd      	mov	sp, r7
   1352c:	bd80      	pop	{r7, pc}
   1352e:	bf00      	nop
   13530:	000203c8 	.word	0x000203c8
   13534:	2000a258 	.word	0x2000a258
   13538:	00017899 	.word	0x00017899
   1353c:	0001349d 	.word	0x0001349d
   13540:	000203d8 	.word	0x000203d8
   13544:	0001fd58 	.word	0x0001fd58

00013548 <_ZN15ARINC_Interface8HW_RESETEv>:
	//crlf();
	usb.println("\n\r");
	usb.println(">");
}

void ARINC_Interface::HW_RESET(void){
   13548:	b580      	push	{r7, lr}
   1354a:	b082      	sub	sp, #8
   1354c:	af00      	add	r7, sp, #0
   1354e:	6078      	str	r0, [r7, #4]
		
	//gpio_set_pin_level(MR,true);
	delay_us(1);
   13550:	2001      	movs	r0, #1
   13552:	4b03      	ldr	r3, [pc, #12]	; (13560 <_ZN15ARINC_Interface8HW_RESETEv+0x18>)
   13554:	4798      	blx	r3
	//gpio_set_pin_level(MR,false);
}
   13556:	bf00      	nop
   13558:	3708      	adds	r7, #8
   1355a:	46bd      	mov	sp, r7
   1355c:	bd80      	pop	{r7, pc}
   1355e:	bf00      	nop
   13560:	00006075 	.word	0x00006075

00013564 <_Z41__static_initialization_and_destruction_0ii>:
	p[0]=uint8_t(byte);
	
	usb.write(&p[0],sizeof(p));
}

 ARINC_Interface	arinc;
   13564:	b580      	push	{r7, lr}
   13566:	b082      	sub	sp, #8
   13568:	af00      	add	r7, sp, #0
   1356a:	6078      	str	r0, [r7, #4]
   1356c:	6039      	str	r1, [r7, #0]
   1356e:	687b      	ldr	r3, [r7, #4]
   13570:	2b01      	cmp	r3, #1
   13572:	d10c      	bne.n	1358e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   13574:	683b      	ldr	r3, [r7, #0]
   13576:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1357a:	4293      	cmp	r3, r2
   1357c:	d107      	bne.n	1358e <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1357e:	4806      	ldr	r0, [pc, #24]	; (13598 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   13580:	4b06      	ldr	r3, [pc, #24]	; (1359c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13582:	4798      	blx	r3
   13584:	4a06      	ldr	r2, [pc, #24]	; (135a0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13586:	4907      	ldr	r1, [pc, #28]	; (135a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13588:	4803      	ldr	r0, [pc, #12]	; (13598 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1358a:	4b07      	ldr	r3, [pc, #28]	; (135a8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1358c:	4798      	blx	r3
   1358e:	bf00      	nop
   13590:	3708      	adds	r7, #8
   13592:	46bd      	mov	sp, r7
   13594:	bd80      	pop	{r7, pc}
   13596:	bf00      	nop
   13598:	20008ea4 	.word	0x20008ea4
   1359c:	00012ca1 	.word	0x00012ca1
   135a0:	20000000 	.word	0x20000000
   135a4:	00012d99 	.word	0x00012d99
   135a8:	00018bf5 	.word	0x00018bf5

000135ac <_GLOBAL__sub_I_HexSymbols>:
   135ac:	b580      	push	{r7, lr}
   135ae:	af00      	add	r7, sp, #0
   135b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   135b4:	2001      	movs	r0, #1
   135b6:	4b01      	ldr	r3, [pc, #4]	; (135bc <_GLOBAL__sub_I_HexSymbols+0x10>)
   135b8:	4798      	blx	r3
   135ba:	bd80      	pop	{r7, pc}
   135bc:	00013565 	.word	0x00013565

000135c0 <hri_port_set_OUT_reg>:
{
   135c0:	b480      	push	{r7}
   135c2:	b085      	sub	sp, #20
   135c4:	af00      	add	r7, sp, #0
   135c6:	60f8      	str	r0, [r7, #12]
   135c8:	460b      	mov	r3, r1
   135ca:	607a      	str	r2, [r7, #4]
   135cc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   135ce:	7afb      	ldrb	r3, [r7, #11]
   135d0:	68fa      	ldr	r2, [r7, #12]
   135d2:	01db      	lsls	r3, r3, #7
   135d4:	4413      	add	r3, r2
   135d6:	3318      	adds	r3, #24
   135d8:	687a      	ldr	r2, [r7, #4]
   135da:	601a      	str	r2, [r3, #0]
}
   135dc:	bf00      	nop
   135de:	3714      	adds	r7, #20
   135e0:	46bd      	mov	sp, r7
   135e2:	bc80      	pop	{r7}
   135e4:	4770      	bx	lr

000135e6 <hri_port_clear_OUT_reg>:
{
   135e6:	b480      	push	{r7}
   135e8:	b085      	sub	sp, #20
   135ea:	af00      	add	r7, sp, #0
   135ec:	60f8      	str	r0, [r7, #12]
   135ee:	460b      	mov	r3, r1
   135f0:	607a      	str	r2, [r7, #4]
   135f2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   135f4:	7afb      	ldrb	r3, [r7, #11]
   135f6:	68fa      	ldr	r2, [r7, #12]
   135f8:	01db      	lsls	r3, r3, #7
   135fa:	4413      	add	r3, r2
   135fc:	3314      	adds	r3, #20
   135fe:	687a      	ldr	r2, [r7, #4]
   13600:	601a      	str	r2, [r3, #0]
}
   13602:	bf00      	nop
   13604:	3714      	adds	r7, #20
   13606:	46bd      	mov	sp, r7
   13608:	bc80      	pop	{r7}
   1360a:	4770      	bx	lr

0001360c <_gpio_set_level>:
{
   1360c:	b580      	push	{r7, lr}
   1360e:	b082      	sub	sp, #8
   13610:	af00      	add	r7, sp, #0
   13612:	4603      	mov	r3, r0
   13614:	6039      	str	r1, [r7, #0]
   13616:	71fb      	strb	r3, [r7, #7]
   13618:	4613      	mov	r3, r2
   1361a:	71bb      	strb	r3, [r7, #6]
	if (level) {
   1361c:	79bb      	ldrb	r3, [r7, #6]
   1361e:	2b00      	cmp	r3, #0
   13620:	d006      	beq.n	13630 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   13622:	79fb      	ldrb	r3, [r7, #7]
   13624:	683a      	ldr	r2, [r7, #0]
   13626:	4619      	mov	r1, r3
   13628:	4806      	ldr	r0, [pc, #24]	; (13644 <_gpio_set_level+0x38>)
   1362a:	4b07      	ldr	r3, [pc, #28]	; (13648 <_gpio_set_level+0x3c>)
   1362c:	4798      	blx	r3
}
   1362e:	e005      	b.n	1363c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   13630:	79fb      	ldrb	r3, [r7, #7]
   13632:	683a      	ldr	r2, [r7, #0]
   13634:	4619      	mov	r1, r3
   13636:	4803      	ldr	r0, [pc, #12]	; (13644 <_gpio_set_level+0x38>)
   13638:	4b04      	ldr	r3, [pc, #16]	; (1364c <_gpio_set_level+0x40>)
   1363a:	4798      	blx	r3
}
   1363c:	bf00      	nop
   1363e:	3708      	adds	r7, #8
   13640:	46bd      	mov	sp, r7
   13642:	bd80      	pop	{r7, pc}
   13644:	41008000 	.word	0x41008000
   13648:	000135c1 	.word	0x000135c1
   1364c:	000135e7 	.word	0x000135e7

00013650 <gpio_set_pin_level>:
{
   13650:	b580      	push	{r7, lr}
   13652:	b082      	sub	sp, #8
   13654:	af00      	add	r7, sp, #0
   13656:	4603      	mov	r3, r0
   13658:	460a      	mov	r2, r1
   1365a:	71fb      	strb	r3, [r7, #7]
   1365c:	4613      	mov	r3, r2
   1365e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   13660:	79fb      	ldrb	r3, [r7, #7]
   13662:	115b      	asrs	r3, r3, #5
   13664:	b2d8      	uxtb	r0, r3
   13666:	79fb      	ldrb	r3, [r7, #7]
   13668:	f003 031f 	and.w	r3, r3, #31
   1366c:	2201      	movs	r2, #1
   1366e:	fa02 f303 	lsl.w	r3, r2, r3
   13672:	79ba      	ldrb	r2, [r7, #6]
   13674:	4619      	mov	r1, r3
   13676:	4b03      	ldr	r3, [pc, #12]	; (13684 <gpio_set_pin_level+0x34>)
   13678:	4798      	blx	r3
}
   1367a:	bf00      	nop
   1367c:	3708      	adds	r7, #8
   1367e:	46bd      	mov	sp, r7
   13680:	bd80      	pop	{r7, pc}
   13682:	bf00      	nop
   13684:	0001360d 	.word	0x0001360d

00013688 <_ZN15Holt_3593_ClassC1Ev>:
#include "Holt_3593_Class.h"
#include "ARINC_Interface.h"
#include "string.h"

// default constructor
Holt_3593_Class::Holt_3593_Class()
   13688:	b580      	push	{r7, lr}
   1368a:	b082      	sub	sp, #8
   1368c:	af00      	add	r7, sp, #0
   1368e:	6078      	str	r0, [r7, #4]
   13690:	687b      	ldr	r3, [r7, #4]
   13692:	4618      	mov	r0, r3
   13694:	4b03      	ldr	r3, [pc, #12]	; (136a4 <_ZN15Holt_3593_ClassC1Ev+0x1c>)
   13696:	4798      	blx	r3
{
} //Holt_3593_Class
   13698:	687b      	ldr	r3, [r7, #4]
   1369a:	4618      	mov	r0, r3
   1369c:	3708      	adds	r7, #8
   1369e:	46bd      	mov	sp, r7
   136a0:	bd80      	pop	{r7, pc}
   136a2:	bf00      	nop
   136a4:	0001531d 	.word	0x0001531d

000136a8 <_ZN15Holt_3593_ClassD1Ev>:

// default destructor
Holt_3593_Class::~Holt_3593_Class()
   136a8:	b580      	push	{r7, lr}
   136aa:	b082      	sub	sp, #8
   136ac:	af00      	add	r7, sp, #0
   136ae:	6078      	str	r0, [r7, #4]
   136b0:	687b      	ldr	r3, [r7, #4]
   136b2:	4618      	mov	r0, r3
   136b4:	4b03      	ldr	r3, [pc, #12]	; (136c4 <_ZN15Holt_3593_ClassD1Ev+0x1c>)
   136b6:	4798      	blx	r3
{
} //~Holt_3593_Class
   136b8:	687b      	ldr	r3, [r7, #4]
   136ba:	4618      	mov	r0, r3
   136bc:	3708      	adds	r7, #8
   136be:	46bd      	mov	sp, r7
   136c0:	bd80      	pop	{r7, pc}
   136c2:	bf00      	nop
   136c4:	0001533d 	.word	0x0001533d

000136c8 <_ZN15Holt_3593_Class4InitEv>:

// Priority Label-1 Table     
unsigned char LabelPriority2 [3];

  
 uint8_t	Holt_3593_Class::Init(void){
   136c8:	b590      	push	{r4, r7, lr}
   136ca:	b089      	sub	sp, #36	; 0x24
   136cc:	af02      	add	r7, sp, #8
   136ce:	6078      	str	r0, [r7, #4]
	 
	 spi.SetDescriptor(&SPI_HI3593);
   136d0:	687b      	ldr	r3, [r7, #4]
   136d2:	492c      	ldr	r1, [pc, #176]	; (13784 <_ZN15Holt_3593_Class4InitEv+0xbc>)
   136d4:	4618      	mov	r0, r3
   136d6:	4b2c      	ldr	r3, [pc, #176]	; (13788 <_ZN15Holt_3593_Class4InitEv+0xc0>)
   136d8:	4798      	blx	r3
	  spi.init();
   136da:	687b      	ldr	r3, [r7, #4]
   136dc:	4618      	mov	r0, r3
   136de:	4b2b      	ldr	r3, [pc, #172]	; (1378c <_ZN15Holt_3593_Class4InitEv+0xc4>)
   136e0:	4798      	blx	r3
	 uint8_t	status=	Init3593(ACLKDIV,  // ARINC clock divisor
	 TMODE,    // Transmit mode. Set for "send as soon as possible"
	 SELFTEST_OFF, // Selftest defined by Mode switches
	 BITRATE,    // Arinc speed and if Parity is enabled by the switch
	 TFLIP );
   136e2:	2340      	movs	r3, #64	; 0x40
   136e4:	9301      	str	r3, [sp, #4]
   136e6:	2300      	movs	r3, #0
   136e8:	9300      	str	r3, [sp, #0]
   136ea:	2300      	movs	r3, #0
   136ec:	2201      	movs	r2, #1
   136ee:	2104      	movs	r1, #4
   136f0:	6878      	ldr	r0, [r7, #4]
   136f2:	4c27      	ldr	r4, [pc, #156]	; (13790 <_ZN15Holt_3593_Class4InitEv+0xc8>)
   136f4:	47a0      	blx	r4
   136f6:	4603      	mov	r3, r0
   136f8:	73fb      	strb	r3, [r7, #15]

	for (int i=0;i<32;i++)
   136fa:	2300      	movs	r3, #0
   136fc:	617b      	str	r3, [r7, #20]
   136fe:	697b      	ldr	r3, [r7, #20]
   13700:	2b1f      	cmp	r3, #31
   13702:	dc27      	bgt.n	13754 <_ZN15Holt_3593_Class4InitEv+0x8c>
	{
// 		LabelArray_2[i]=FlipByte(LabelArray_1[i]);
// 		LabelArray_1[i]=LabelArray_2[i];
		LabelArray_2[i]=LabelArray_1[i];
   13704:	4a23      	ldr	r2, [pc, #140]	; (13794 <_ZN15Holt_3593_Class4InitEv+0xcc>)
   13706:	697b      	ldr	r3, [r7, #20]
   13708:	4413      	add	r3, r2
   1370a:	7819      	ldrb	r1, [r3, #0]
   1370c:	4a22      	ldr	r2, [pc, #136]	; (13798 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   1370e:	697b      	ldr	r3, [r7, #20]
   13710:	4413      	add	r3, r2
   13712:	460a      	mov	r2, r1
   13714:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX1[i]=LabelArray_2[i];
   13716:	4b21      	ldr	r3, [pc, #132]	; (1379c <_ZN15Holt_3593_Class4InitEv+0xd4>)
   13718:	689a      	ldr	r2, [r3, #8]
   1371a:	697b      	ldr	r3, [r7, #20]
   1371c:	4413      	add	r3, r2
   1371e:	491e      	ldr	r1, [pc, #120]	; (13798 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13720:	697a      	ldr	r2, [r7, #20]
   13722:	440a      	add	r2, r1
   13724:	7812      	ldrb	r2, [r2, #0]
   13726:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayRX2[i]=LabelArray_2[i];
   13728:	4b1c      	ldr	r3, [pc, #112]	; (1379c <_ZN15Holt_3593_Class4InitEv+0xd4>)
   1372a:	68da      	ldr	r2, [r3, #12]
   1372c:	697b      	ldr	r3, [r7, #20]
   1372e:	4413      	add	r3, r2
   13730:	4919      	ldr	r1, [pc, #100]	; (13798 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13732:	697a      	ldr	r2, [r7, #20]
   13734:	440a      	add	r2, r1
   13736:	7812      	ldrb	r2, [r2, #0]
   13738:	701a      	strb	r2, [r3, #0]
		arinc.LabelsArrayTX[i]=LabelArray_2[i];
   1373a:	4b18      	ldr	r3, [pc, #96]	; (1379c <_ZN15Holt_3593_Class4InitEv+0xd4>)
   1373c:	685a      	ldr	r2, [r3, #4]
   1373e:	697b      	ldr	r3, [r7, #20]
   13740:	4413      	add	r3, r2
   13742:	4915      	ldr	r1, [pc, #84]	; (13798 <_ZN15Holt_3593_Class4InitEv+0xd0>)
   13744:	697a      	ldr	r2, [r7, #20]
   13746:	440a      	add	r2, r1
   13748:	7812      	ldrb	r2, [r2, #0]
   1374a:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<32;i++)
   1374c:	697b      	ldr	r3, [r7, #20]
   1374e:	3301      	adds	r3, #1
   13750:	617b      	str	r3, [r7, #20]
   13752:	e7d4      	b.n	136fe <_ZN15Holt_3593_Class4InitEv+0x36>
	}
	for (int i=0;i<3;i++)
   13754:	2300      	movs	r3, #0
   13756:	613b      	str	r3, [r7, #16]
   13758:	693b      	ldr	r3, [r7, #16]
   1375a:	2b02      	cmp	r3, #2
   1375c:	dc0c      	bgt.n	13778 <_ZN15Holt_3593_Class4InitEv+0xb0>
	{
		//LabelPriority2[i]=FlipByte(LabelPriority1[i]);
		LabelPriority2[i]=LabelPriority1[i];
   1375e:	4a10      	ldr	r2, [pc, #64]	; (137a0 <_ZN15Holt_3593_Class4InitEv+0xd8>)
   13760:	693b      	ldr	r3, [r7, #16]
   13762:	4413      	add	r3, r2
   13764:	7819      	ldrb	r1, [r3, #0]
   13766:	4a0f      	ldr	r2, [pc, #60]	; (137a4 <_ZN15Holt_3593_Class4InitEv+0xdc>)
   13768:	693b      	ldr	r3, [r7, #16]
   1376a:	4413      	add	r3, r2
   1376c:	460a      	mov	r2, r1
   1376e:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<3;i++)
   13770:	693b      	ldr	r3, [r7, #16]
   13772:	3301      	adds	r3, #1
   13774:	613b      	str	r3, [r7, #16]
   13776:	e7ef      	b.n	13758 <_ZN15Holt_3593_Class4InitEv+0x90>
	}
	//memcpy(arinc.LabelsArrayRX1,LabelArray_1,LABEL_ARRAY_SIZE);	
//	memcpy(arinc.LabelsArrayRX2,LabelArray_2,LABEL_ARRAY_SIZE);	
	//memcpy(arinc.LabelsArrayTX,LabelArray_2,LABEL_ARRAY_SIZE);		
	return	status;
   13778:	7bfb      	ldrb	r3, [r7, #15]
 } 
   1377a:	4618      	mov	r0, r3
   1377c:	371c      	adds	r7, #28
   1377e:	46bd      	mov	sp, r7
   13780:	bd90      	pop	{r4, r7, pc}
   13782:	bf00      	nop
   13784:	2000a52c 	.word	0x2000a52c
   13788:	00015399 	.word	0x00015399
   1378c:	00015351 	.word	0x00015351
   13790:	000137a9 	.word	0x000137a9
   13794:	000207e4 	.word	0x000207e4
   13798:	20009188 	.word	0x20009188
   1379c:	20008ea4 	.word	0x20008ea4
   137a0:	20000244 	.word	0x20000244
   137a4:	200091a8 	.word	0x200091a8

000137a8 <_ZN15Holt_3593_Class8Init3593Ehhhhh>:
 
 // ------------------------------------------------------------------
 // Initialize the HI-3593
 // ------------------------------------------------------------------
 uint8_t Holt_3593_Class::Init3593(uint8_t AclkDiv, uint8_t tmode, uint8_t selftest, uint8_t arate, uint8_t tflip )
 {
   137a8:	b580      	push	{r7, lr}
   137aa:	b084      	sub	sp, #16
   137ac:	af00      	add	r7, sp, #0
   137ae:	6078      	str	r0, [r7, #4]
   137b0:	4608      	mov	r0, r1
   137b2:	4611      	mov	r1, r2
   137b4:	461a      	mov	r2, r3
   137b6:	4603      	mov	r3, r0
   137b8:	70fb      	strb	r3, [r7, #3]
   137ba:	460b      	mov	r3, r1
   137bc:	70bb      	strb	r3, [r7, #2]
   137be:	4613      	mov	r3, r2
   137c0:	707b      	strb	r3, [r7, #1]
	 unsigned char cmd=0;
   137c2:	2300      	movs	r3, #0
   137c4:	73fb      	strb	r3, [r7, #15]
	 
	 W_Command(RESETCMD);                // Reset the HI-3593
   137c6:	2104      	movs	r1, #4
   137c8:	6878      	ldr	r0, [r7, #4]
   137ca:	4b18      	ldr	r3, [pc, #96]	; (1382c <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x84>)
   137cc:	4798      	blx	r3
	 W_CommandValue(DivReg, AclkDiv);	   // ACLK div/4 divisor
   137ce:	78fb      	ldrb	r3, [r7, #3]
   137d0:	461a      	mov	r2, r3
   137d2:	2138      	movs	r1, #56	; 0x38
   137d4:	6878      	ldr	r0, [r7, #4]
   137d6:	4b16      	ldr	r3, [pc, #88]	; (13830 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   137d8:	4798      	blx	r3
	 cmd =  arate;
   137da:	7e3b      	ldrb	r3, [r7, #24]
   137dc:	73fb      	strb	r3, [r7, #15]
	 cmd |= selftest << 4;
   137de:	787b      	ldrb	r3, [r7, #1]
   137e0:	011b      	lsls	r3, r3, #4
   137e2:	b25a      	sxtb	r2, r3
   137e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   137e8:	4313      	orrs	r3, r2
   137ea:	b25b      	sxtb	r3, r3
   137ec:	73fb      	strb	r3, [r7, #15]
	 cmd |= tmode << 5;
   137ee:	78bb      	ldrb	r3, [r7, #2]
   137f0:	015b      	lsls	r3, r3, #5
   137f2:	b25a      	sxtb	r2, r3
   137f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   137f8:	4313      	orrs	r3, r2
   137fa:	b25b      	sxtb	r3, r3
   137fc:	73fb      	strb	r3, [r7, #15]
	 cmd |= tflip << 6;                  // TFLIP on
   137fe:	7f3b      	ldrb	r3, [r7, #28]
   13800:	019b      	lsls	r3, r3, #6
   13802:	b25a      	sxtb	r2, r3
   13804:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13808:	4313      	orrs	r3, r2
   1380a:	b25b      	sxtb	r3, r3
   1380c:	73fb      	strb	r3, [r7, #15]
	 W_CommandValue(TCR, cmd);           // Program the Transmit Control Register
   1380e:	7bfb      	ldrb	r3, [r7, #15]
   13810:	461a      	mov	r2, r3
   13812:	2108      	movs	r1, #8
   13814:	6878      	ldr	r0, [r7, #4]
   13816:	4b06      	ldr	r3, [pc, #24]	; (13830 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x88>)
   13818:	4798      	blx	r3
	 return R_Register (R_TSR);
   1381a:	2180      	movs	r1, #128	; 0x80
   1381c:	6878      	ldr	r0, [r7, #4]
   1381e:	4b05      	ldr	r3, [pc, #20]	; (13834 <_ZN15Holt_3593_Class8Init3593Ehhhhh+0x8c>)
   13820:	4798      	blx	r3
   13822:	4603      	mov	r3, r0
	 
	 
 }
   13824:	4618      	mov	r0, r3
   13826:	3710      	adds	r7, #16
   13828:	46bd      	mov	sp, r7
   1382a:	bd80      	pop	{r7, pc}
   1382c:	00013c49 	.word	0x00013c49
   13830:	00013c9d 	.word	0x00013c9d
   13834:	00013d11 	.word	0x00013d11

00013838 <_ZN15Holt_3593_Class4openEv>:
 
 void Holt_3593_Class::open(){
   13838:	b580      	push	{r7, lr}
   1383a:	b082      	sub	sp, #8
   1383c:	af00      	add	r7, sp, #0
   1383e:	6078      	str	r0, [r7, #4]
	 	spi.Enable();
   13840:	687b      	ldr	r3, [r7, #4]
   13842:	4618      	mov	r0, r3
   13844:	4b04      	ldr	r3, [pc, #16]	; (13858 <_ZN15Holt_3593_Class4openEv+0x20>)
   13846:	4798      	blx	r3
		 SS_Low();
   13848:	6878      	ldr	r0, [r7, #4]
   1384a:	4b04      	ldr	r3, [pc, #16]	; (1385c <_ZN15Holt_3593_Class4openEv+0x24>)
   1384c:	4798      	blx	r3
 }
   1384e:	bf00      	nop
   13850:	3708      	adds	r7, #8
   13852:	46bd      	mov	sp, r7
   13854:	bd80      	pop	{r7, pc}
   13856:	bf00      	nop
   13858:	000153bd 	.word	0x000153bd
   1385c:	00013d59 	.word	0x00013d59

00013860 <_ZN15Holt_3593_Class5closeEv>:
  void Holt_3593_Class::close(){
   13860:	b580      	push	{r7, lr}
   13862:	b082      	sub	sp, #8
   13864:	af00      	add	r7, sp, #0
   13866:	6078      	str	r0, [r7, #4]
	    SS_High();
   13868:	6878      	ldr	r0, [r7, #4]
   1386a:	4b05      	ldr	r3, [pc, #20]	; (13880 <_ZN15Holt_3593_Class5closeEv+0x20>)
   1386c:	4798      	blx	r3
	  spi.Disable();
   1386e:	687b      	ldr	r3, [r7, #4]
   13870:	4618      	mov	r0, r3
   13872:	4b04      	ldr	r3, [pc, #16]	; (13884 <_ZN15Holt_3593_Class5closeEv+0x24>)
   13874:	4798      	blx	r3
	
  }
   13876:	bf00      	nop
   13878:	3708      	adds	r7, #8
   1387a:	46bd      	mov	sp, r7
   1387c:	bd80      	pop	{r7, pc}
   1387e:	bf00      	nop
   13880:	00013d75 	.word	0x00013d75
   13884:	00015481 	.word	0x00015481

00013888 <_ZN15Holt_3593_Class11txrx8bits_8Ehh>:
 
// ------------------------------------------------------------------
//  SPI function to load 8 bits of label data
// ------------------------------------------------------------------   
unsigned char Holt_3593_Class::txrx8bits_8(unsigned char txbyte, unsigned char return_when_done) {
   13888:	b580      	push	{r7, lr}
   1388a:	b084      	sub	sp, #16
   1388c:	af00      	add	r7, sp, #0
   1388e:	6078      	str	r0, [r7, #4]
   13890:	460b      	mov	r3, r1
   13892:	70fb      	strb	r3, [r7, #3]
   13894:	4613      	mov	r3, r2
   13896:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;    
 // rxbyte = Get_Byte();         // clear SPI status register
  uint8_t	p(txbyte);
   13898:	78fb      	ldrb	r3, [r7, #3]
   1389a:	73fb      	strb	r3, [r7, #15]
  Send_Byte(p)    ;   // write Data Register to begin transfer  
   1389c:	7bfb      	ldrb	r3, [r7, #15]
   1389e:	4619      	mov	r1, r3
   138a0:	6878      	ldr	r0, [r7, #4]
   138a2:	4b0b      	ldr	r3, [pc, #44]	; (138d0 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x48>)
   138a4:	4798      	blx	r3
	  
  if (return_when_done) {  // optional wait for SPIF flag
   138a6:	78bb      	ldrb	r3, [r7, #2]
   138a8:	2b00      	cmp	r3, #0
   138aa:	d00a      	beq.n	138c2 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
    while (!spi.IsSPIReady());     
   138ac:	687b      	ldr	r3, [r7, #4]
   138ae:	4618      	mov	r0, r3
   138b0:	4b08      	ldr	r3, [pc, #32]	; (138d4 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x4c>)
   138b2:	4798      	blx	r3
   138b4:	4603      	mov	r3, r0
   138b6:	f083 0301 	eor.w	r3, r3, #1
   138ba:	b2db      	uxtb	r3, r3
   138bc:	2b00      	cmp	r3, #0
   138be:	d000      	beq.n	138c2 <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x3a>
   138c0:	e7f4      	b.n	138ac <_ZN15Holt_3593_Class11txrx8bits_8Ehh+0x24>
  }
  return rxbyte = txbyte;
   138c2:	78fb      	ldrb	r3, [r7, #3]
   138c4:	73bb      	strb	r3, [r7, #14]
   138c6:	7bbb      	ldrb	r3, [r7, #14]
  
}
   138c8:	4618      	mov	r0, r3
   138ca:	3710      	adds	r7, #16
   138cc:	46bd      	mov	sp, r7
   138ce:	bd80      	pop	{r7, pc}
   138d0:	000139b9 	.word	0x000139b9
   138d4:	000154a1 	.word	0x000154a1

000138d8 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv>:

// ------------------------------------------------------------------
//  Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------                              */
void Holt_3593_Class::InitReceiver1Labels(void)
{
   138d8:	b580      	push	{r7, lr}
   138da:	b084      	sub	sp, #16
   138dc:	af00      	add	r7, sp, #0
   138de:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
  open();
   138e0:	6878      	ldr	r0, [r7, #4]
   138e2:	4b14      	ldr	r3, [pc, #80]	; (13934 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x5c>)
   138e4:	4798      	blx	r3

  dummy = txrx8bits_8(0x14,1);  
   138e6:	2201      	movs	r2, #1
   138e8:	2114      	movs	r1, #20
   138ea:	6878      	ldr	r0, [r7, #4]
   138ec:	4b12      	ldr	r3, [pc, #72]	; (13938 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x60>)
   138ee:	4798      	blx	r3
   138f0:	4603      	mov	r3, r0
   138f2:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   138f4:	231f      	movs	r3, #31
   138f6:	73fb      	strb	r3, [r7, #15]
   138f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
   138fc:	2b00      	cmp	r3, #0
   138fe:	db11      	blt.n	13924 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_1[i],1);       
   13900:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13904:	4a0d      	ldr	r2, [pc, #52]	; (1393c <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x64>)
   13906:	5cd3      	ldrb	r3, [r2, r3]
   13908:	2201      	movs	r2, #1
   1390a:	4619      	mov	r1, r3
   1390c:	6878      	ldr	r0, [r7, #4]
   1390e:	4b0a      	ldr	r3, [pc, #40]	; (13938 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x60>)
   13910:	4798      	blx	r3
   13912:	4603      	mov	r3, r0
   13914:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   13916:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1391a:	b2db      	uxtb	r3, r3
   1391c:	3b01      	subs	r3, #1
   1391e:	b2db      	uxtb	r3, r3
   13920:	73fb      	strb	r3, [r7, #15]
   13922:	e7e9      	b.n	138f8 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x20>
  }    
 	  
	close();
   13924:	6878      	ldr	r0, [r7, #4]
   13926:	4b06      	ldr	r3, [pc, #24]	; (13940 <_ZN15Holt_3593_Class19InitReceiver1LabelsEv+0x68>)
   13928:	4798      	blx	r3
}
   1392a:	bf00      	nop
   1392c:	3710      	adds	r7, #16
   1392e:	46bd      	mov	sp, r7
   13930:	bd80      	pop	{r7, pc}
   13932:	bf00      	nop
   13934:	00013839 	.word	0x00013839
   13938:	00013889 	.word	0x00013889
   1393c:	000207e4 	.word	0x000207e4
   13940:	00013861 	.word	0x00013861

00013944 <_ZN15Holt_3593_Class18InitPriorityLabelsEv>:
void Holt_3593_Class::InitPriorityLabels(void)
{
   13944:	b580      	push	{r7, lr}
   13946:	b082      	sub	sp, #8
   13948:	af00      	add	r7, sp, #0
   1394a:	6078      	str	r0, [r7, #4]
	
	// Priorty Labels
	TXBuffer[0] =  LabelPriority1[0];   // filter 3
   1394c:	4b17      	ldr	r3, [pc, #92]	; (139ac <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x68>)
   1394e:	781a      	ldrb	r2, [r3, #0]
   13950:	687b      	ldr	r3, [r7, #4]
   13952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	TXBuffer[1] =  LabelPriority1[1];   // filter 2
   13956:	4b15      	ldr	r3, [pc, #84]	; (139ac <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x68>)
   13958:	785a      	ldrb	r2, [r3, #1]
   1395a:	687b      	ldr	r3, [r7, #4]
   1395c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	TXBuffer[2] =  LabelPriority1[2];   // filter 1
   13960:	4b12      	ldr	r3, [pc, #72]	; (139ac <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x68>)
   13962:	789a      	ldrb	r2, [r3, #2]
   13964:	687b      	ldr	r3, [r7, #4]
   13966:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	TransmitCommandAndData(W_PL1Match,TXBuffer);  // initialize the Receiver1 PL match registers
   1396a:	687b      	ldr	r3, [r7, #4]
   1396c:	3321      	adds	r3, #33	; 0x21
   1396e:	461a      	mov	r2, r3
   13970:	2118      	movs	r1, #24
   13972:	6878      	ldr	r0, [r7, #4]
   13974:	4b0e      	ldr	r3, [pc, #56]	; (139b0 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x6c>)
   13976:	4798      	blx	r3
	
	TXBuffer[0] =  LabelPriority2[0];   // filter 3
   13978:	4b0e      	ldr	r3, [pc, #56]	; (139b4 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x70>)
   1397a:	781a      	ldrb	r2, [r3, #0]
   1397c:	687b      	ldr	r3, [r7, #4]
   1397e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	TXBuffer[1] =   LabelPriority2[1];   // filter 2
   13982:	4b0c      	ldr	r3, [pc, #48]	; (139b4 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x70>)
   13984:	785a      	ldrb	r2, [r3, #1]
   13986:	687b      	ldr	r3, [r7, #4]
   13988:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	TXBuffer[2] =   LabelPriority2[2];   // filter 1
   1398c:	4b09      	ldr	r3, [pc, #36]	; (139b4 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x70>)
   1398e:	789a      	ldrb	r2, [r3, #2]
   13990:	687b      	ldr	r3, [r7, #4]
   13992:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	TransmitCommandAndData(W_PL2Match,TXBuffer);  // initialize the Receiver2 PL match registers
   13996:	687b      	ldr	r3, [r7, #4]
   13998:	3321      	adds	r3, #33	; 0x21
   1399a:	461a      	mov	r2, r3
   1399c:	212c      	movs	r1, #44	; 0x2c
   1399e:	6878      	ldr	r0, [r7, #4]
   139a0:	4b03      	ldr	r3, [pc, #12]	; (139b0 <_ZN15Holt_3593_Class18InitPriorityLabelsEv+0x6c>)
   139a2:	4798      	blx	r3
}
   139a4:	bf00      	nop
   139a6:	3708      	adds	r7, #8
   139a8:	46bd      	mov	sp, r7
   139aa:	bd80      	pop	{r7, pc}
   139ac:	20000244 	.word	0x20000244
   139b0:	00013b9d 	.word	0x00013b9d
   139b4:	200091a8 	.word	0x200091a8

000139b8 <_ZN15Holt_3593_Class9Send_ByteEh>:
	}
	return rev;
}

uint8_t Holt_3593_Class::Send_Byte(uint8_t byte)
{
   139b8:	b580      	push	{r7, lr}
   139ba:	b082      	sub	sp, #8
   139bc:	af00      	add	r7, sp, #0
   139be:	6078      	str	r0, [r7, #4]
   139c0:	460b      	mov	r3, r1
   139c2:	70fb      	strb	r3, [r7, #3]
	while (!spi.IsSPIReady()); 
   139c4:	687b      	ldr	r3, [r7, #4]
   139c6:	4618      	mov	r0, r3
   139c8:	4b0f      	ldr	r3, [pc, #60]	; (13a08 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   139ca:	4798      	blx	r3
   139cc:	4603      	mov	r3, r0
   139ce:	f083 0301 	eor.w	r3, r3, #1
   139d2:	b2db      	uxtb	r3, r3
   139d4:	2b00      	cmp	r3, #0
   139d6:	d000      	beq.n	139da <_ZN15Holt_3593_Class9Send_ByteEh+0x22>
   139d8:	e7f4      	b.n	139c4 <_ZN15Holt_3593_Class9Send_ByteEh+0xc>
	spi.Write(&byte,1);
   139da:	687b      	ldr	r3, [r7, #4]
   139dc:	1cf9      	adds	r1, r7, #3
   139de:	2201      	movs	r2, #1
   139e0:	4618      	mov	r0, r3
   139e2:	4b0a      	ldr	r3, [pc, #40]	; (13a0c <_ZN15Holt_3593_Class9Send_ByteEh+0x54>)
   139e4:	4798      	blx	r3
	while (!spi.IsSPIReady());  
   139e6:	687b      	ldr	r3, [r7, #4]
   139e8:	4618      	mov	r0, r3
   139ea:	4b07      	ldr	r3, [pc, #28]	; (13a08 <_ZN15Holt_3593_Class9Send_ByteEh+0x50>)
   139ec:	4798      	blx	r3
   139ee:	4603      	mov	r3, r0
   139f0:	f083 0301 	eor.w	r3, r3, #1
   139f4:	b2db      	uxtb	r3, r3
   139f6:	2b00      	cmp	r3, #0
   139f8:	d000      	beq.n	139fc <_ZN15Holt_3593_Class9Send_ByteEh+0x44>
   139fa:	e7f4      	b.n	139e6 <_ZN15Holt_3593_Class9Send_ByteEh+0x2e>
	return byte;
   139fc:	78fb      	ldrb	r3, [r7, #3]
}
   139fe:	4618      	mov	r0, r3
   13a00:	3708      	adds	r7, #8
   13a02:	46bd      	mov	sp, r7
   13a04:	bd80      	pop	{r7, pc}
   13a06:	bf00      	nop
   13a08:	000154a1 	.word	0x000154a1
   13a0c:	000153f9 	.word	0x000153f9

00013a10 <_ZN15Holt_3593_Class8Get_ByteEv>:

uint8_t Holt_3593_Class::Get_Byte(void)
{
   13a10:	b580      	push	{r7, lr}
   13a12:	b084      	sub	sp, #16
   13a14:	af00      	add	r7, sp, #0
   13a16:	6078      	str	r0, [r7, #4]
	uint8_t byte;
	
	while (!spi.IsSPIReady());
   13a18:	687b      	ldr	r3, [r7, #4]
   13a1a:	4618      	mov	r0, r3
   13a1c:	4b0f      	ldr	r3, [pc, #60]	; (13a5c <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   13a1e:	4798      	blx	r3
   13a20:	4603      	mov	r3, r0
   13a22:	f083 0301 	eor.w	r3, r3, #1
   13a26:	b2db      	uxtb	r3, r3
   13a28:	2b00      	cmp	r3, #0
   13a2a:	d000      	beq.n	13a2e <_ZN15Holt_3593_Class8Get_ByteEv+0x1e>
   13a2c:	e7f4      	b.n	13a18 <_ZN15Holt_3593_Class8Get_ByteEv+0x8>
	spi.Read(&byte,1);
   13a2e:	687b      	ldr	r3, [r7, #4]
   13a30:	f107 010f 	add.w	r1, r7, #15
   13a34:	2201      	movs	r2, #1
   13a36:	4618      	mov	r0, r3
   13a38:	4b09      	ldr	r3, [pc, #36]	; (13a60 <_ZN15Holt_3593_Class8Get_ByteEv+0x50>)
   13a3a:	4798      	blx	r3
	while (!spi.IsSPIReady());
   13a3c:	687b      	ldr	r3, [r7, #4]
   13a3e:	4618      	mov	r0, r3
   13a40:	4b06      	ldr	r3, [pc, #24]	; (13a5c <_ZN15Holt_3593_Class8Get_ByteEv+0x4c>)
   13a42:	4798      	blx	r3
   13a44:	4603      	mov	r3, r0
   13a46:	f083 0301 	eor.w	r3, r3, #1
   13a4a:	b2db      	uxtb	r3, r3
   13a4c:	2b00      	cmp	r3, #0
   13a4e:	d000      	beq.n	13a52 <_ZN15Holt_3593_Class8Get_ByteEv+0x42>
   13a50:	e7f4      	b.n	13a3c <_ZN15Holt_3593_Class8Get_ByteEv+0x2c>


	
	return byte;
   13a52:	7bfb      	ldrb	r3, [r7, #15]
}	
   13a54:	4618      	mov	r0, r3
   13a56:	3710      	adds	r7, #16
   13a58:	46bd      	mov	sp, r7
   13a5a:	bd80      	pop	{r7, pc}
   13a5c:	000154a1 	.word	0x000154a1
   13a60:	0001543d 	.word	0x0001543d

00013a64 <_ZN15Holt_3593_Class19initReceiver2LabelsEv>:
 
// ------------------------------------------------------------------
// Initilize Receiver 2 labels with contents of array
// ------------------------------------------------------------------ 
void Holt_3593_Class::initReceiver2Labels(void)
{
   13a64:	b580      	push	{r7, lr}
   13a66:	b084      	sub	sp, #16
   13a68:	af00      	add	r7, sp, #0
   13a6a:	6078      	str	r0, [r7, #4]
   
  unsigned char dummy;
  signed char i; 
 	
	open();	
   13a6c:	6878      	ldr	r0, [r7, #4]
   13a6e:	4b14      	ldr	r3, [pc, #80]	; (13ac0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x5c>)
   13a70:	4798      	blx	r3
  // send op code (ignore returned data byte)
  dummy = txrx8bits_8(0x28,1);  
   13a72:	2201      	movs	r2, #1
   13a74:	2128      	movs	r1, #40	; 0x28
   13a76:	6878      	ldr	r0, [r7, #4]
   13a78:	4b12      	ldr	r3, [pc, #72]	; (13ac4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   13a7a:	4798      	blx	r3
   13a7c:	4603      	mov	r3, r0
   13a7e:	73bb      	strb	r3, [r7, #14]
  // send 32 bytes of ARINC label data
  for (i=31; i>=0; i--) {
   13a80:	231f      	movs	r3, #31
   13a82:	73fb      	strb	r3, [r7, #15]
   13a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13a88:	2b00      	cmp	r3, #0
   13a8a:	db11      	blt.n	13ab0 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x4c>
    // send 1 byte of label data, ignore returned data byte            
    dummy = txrx8bits_8(LabelArray_2[i],1);       
   13a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13a90:	4a0d      	ldr	r2, [pc, #52]	; (13ac8 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x64>)
   13a92:	5cd3      	ldrb	r3, [r2, r3]
   13a94:	2201      	movs	r2, #1
   13a96:	4619      	mov	r1, r3
   13a98:	6878      	ldr	r0, [r7, #4]
   13a9a:	4b0a      	ldr	r3, [pc, #40]	; (13ac4 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x60>)
   13a9c:	4798      	blx	r3
   13a9e:	4603      	mov	r3, r0
   13aa0:	73bb      	strb	r3, [r7, #14]
  for (i=31; i>=0; i--) {
   13aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
   13aa6:	b2db      	uxtb	r3, r3
   13aa8:	3b01      	subs	r3, #1
   13aaa:	b2db      	uxtb	r3, r3
   13aac:	73fb      	strb	r3, [r7, #15]
   13aae:	e7e9      	b.n	13a84 <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x20>
  }    
 	  
	close();
   13ab0:	6878      	ldr	r0, [r7, #4]
   13ab2:	4b06      	ldr	r3, [pc, #24]	; (13acc <_ZN15Holt_3593_Class19initReceiver2LabelsEv+0x68>)
   13ab4:	4798      	blx	r3
}
   13ab6:	bf00      	nop
   13ab8:	3710      	adds	r7, #16
   13aba:	46bd      	mov	sp, r7
   13abc:	bd80      	pop	{r7, pc}
   13abe:	bf00      	nop
   13ac0:	00013839 	.word	0x00013839
   13ac4:	00013889 	.word	0x00013889
   13ac8:	20009188 	.word	0x20009188
   13acc:	00013861 	.word	0x00013861

00013ad0 <_ZN15Holt_3593_Class9ArincReadEhPh>:
// ------------------------------------------------------
// Fetch the FIFO ARINC data from the desired receiver channel 
//
// ------------------------------------------------------
void Holt_3593_Class::ArincRead(uint8_t source, unsigned char *passedArray)
{
   13ad0:	b580      	push	{r7, lr}
   13ad2:	b086      	sub	sp, #24
   13ad4:	af00      	add	r7, sp, #0
   13ad6:	60f8      	str	r0, [r7, #12]
   13ad8:	460b      	mov	r3, r1
   13ada:	607a      	str	r2, [r7, #4]
   13adc:	72fb      	strb	r3, [r7, #11]
   uint8_t dummy, ByteCount, count;
   
   count = 3;                // assume it's a Priority Label Word?
   13ade:	2303      	movs	r3, #3
   13ae0:	75bb      	strb	r3, [r7, #22]
   if(source==0xA0 || source == 0xC0){  // is it a normal Word?
   13ae2:	7afb      	ldrb	r3, [r7, #11]
   13ae4:	2ba0      	cmp	r3, #160	; 0xa0
   13ae6:	d002      	beq.n	13aee <_ZN15Holt_3593_Class9ArincReadEhPh+0x1e>
   13ae8:	7afb      	ldrb	r3, [r7, #11]
   13aea:	2bc0      	cmp	r3, #192	; 0xc0
   13aec:	d102      	bne.n	13af4 <_ZN15Holt_3593_Class9ArincReadEhPh+0x24>
       count++;								 // then it has 4 bytes.
   13aee:	7dbb      	ldrb	r3, [r7, #22]
   13af0:	3301      	adds	r3, #1
   13af2:	75bb      	strb	r3, [r7, #22]
	   }                        
  open();
   13af4:	68f8      	ldr	r0, [r7, #12]
   13af6:	4b11      	ldr	r3, [pc, #68]	; (13b3c <_ZN15Holt_3593_Class9ArincReadEhPh+0x6c>)
   13af8:	4798      	blx	r3
  // dummy = Get_Byte();                   // clear SPI status register    
   Send_Byte(source) ;                  // source command to read FIFO data
   13afa:	7afb      	ldrb	r3, [r7, #11]
   13afc:	4619      	mov	r1, r3
   13afe:	68f8      	ldr	r0, [r7, #12]
   13b00:	4b0f      	ldr	r3, [pc, #60]	; (13b40 <_ZN15Holt_3593_Class9ArincReadEhPh+0x70>)
   13b02:	4798      	blx	r3
   
 //  dummy = Get_Byte();                  // read/ignore Rx data in Data Reg, resets SPIF                    
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   13b04:	2300      	movs	r3, #0
   13b06:	75fb      	strb	r3, [r7, #23]
   13b08:	7dfa      	ldrb	r2, [r7, #23]
   13b0a:	7dbb      	ldrb	r3, [r7, #22]
   13b0c:	429a      	cmp	r2, r3
   13b0e:	da0d      	bge.n	13b2c <_ZN15Holt_3593_Class9ArincReadEhPh+0x5c>
      dummy = Get_Byte(); 
   13b10:	68f8      	ldr	r0, [r7, #12]
   13b12:	4b0c      	ldr	r3, [pc, #48]	; (13b44 <_ZN15Holt_3593_Class9ArincReadEhPh+0x74>)
   13b14:	4798      	blx	r3
   13b16:	4603      	mov	r3, r0
   13b18:	757b      	strb	r3, [r7, #21]
      passedArray[ByteCount] = dummy; 
   13b1a:	7dfb      	ldrb	r3, [r7, #23]
   13b1c:	687a      	ldr	r2, [r7, #4]
   13b1e:	4413      	add	r3, r2
   13b20:	7d7a      	ldrb	r2, [r7, #21]
   13b22:	701a      	strb	r2, [r3, #0]
   for (ByteCount=0; ByteCount < count; ByteCount++) {
   13b24:	7dfb      	ldrb	r3, [r7, #23]
   13b26:	3301      	adds	r3, #1
   13b28:	75fb      	strb	r3, [r7, #23]
   13b2a:	e7ed      	b.n	13b08 <_ZN15Holt_3593_Class9ArincReadEhPh+0x38>
     }

  close();
   13b2c:	68f8      	ldr	r0, [r7, #12]
   13b2e:	4b06      	ldr	r3, [pc, #24]	; (13b48 <_ZN15Holt_3593_Class9ArincReadEhPh+0x78>)
   13b30:	4798      	blx	r3
  
}
   13b32:	bf00      	nop
   13b34:	3718      	adds	r7, #24
   13b36:	46bd      	mov	sp, r7
   13b38:	bd80      	pop	{r7, pc}
   13b3a:	bf00      	nop
   13b3c:	00013839 	.word	0x00013839
   13b40:	000139b9 	.word	0x000139b9
   13b44:	00013a11 	.word	0x00013a11
   13b48:	00013861 	.word	0x00013861

00013b4c <_ZN15Holt_3593_Class9txrx8bitsEhh>:
              back commands. If return_when_done is False, the function
              returns immediately after initiating the transfer. 
              
Example Call: rcv_byte = txrx8bits(0xFF,1) // sends data 0xFF then returns 
                                           // data when xfer is done  */
unsigned char Holt_3593_Class::txrx8bits (unsigned char txbyte, unsigned char return_when_done) {
   13b4c:	b580      	push	{r7, lr}
   13b4e:	b084      	sub	sp, #16
   13b50:	af00      	add	r7, sp, #0
   13b52:	6078      	str	r0, [r7, #4]
   13b54:	460b      	mov	r3, r1
   13b56:	70fb      	strb	r3, [r7, #3]
   13b58:	4613      	mov	r3, r2
   13b5a:	70bb      	strb	r3, [r7, #2]
  unsigned char rxbyte;  
    uint8_t	p(txbyte);
   13b5c:	78fb      	ldrb	r3, [r7, #3]
   13b5e:	73fb      	strb	r3, [r7, #15]
   // rxbyte = Get_Byte();         // clear SPI status register  
	Send_Byte(p);        // write Data Register to begin transfer   
   13b60:	7bfb      	ldrb	r3, [r7, #15]
   13b62:	4619      	mov	r1, r3
   13b64:	6878      	ldr	r0, [r7, #4]
   13b66:	4b0b      	ldr	r3, [pc, #44]	; (13b94 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x48>)
   13b68:	4798      	blx	r3
	//rxbyte = Get_Byte(); 
	if (return_when_done) {  // optional wait for SPIF flag
   13b6a:	78bb      	ldrb	r3, [r7, #2]
   13b6c:	2b00      	cmp	r3, #0
   13b6e:	d00a      	beq.n	13b86 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
		while (!spi.IsSPIReady());      
   13b70:	687b      	ldr	r3, [r7, #4]
   13b72:	4618      	mov	r0, r3
   13b74:	4b08      	ldr	r3, [pc, #32]	; (13b98 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x4c>)
   13b76:	4798      	blx	r3
   13b78:	4603      	mov	r3, r0
   13b7a:	f083 0301 	eor.w	r3, r3, #1
   13b7e:	b2db      	uxtb	r3, r3
   13b80:	2b00      	cmp	r3, #0
   13b82:	d000      	beq.n	13b86 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x3a>
   13b84:	e7f4      	b.n	13b70 <_ZN15Holt_3593_Class9txrx8bitsEhh+0x24>
    }

  rxbyte = txbyte;  // get received data byte from Data Register
   13b86:	78fb      	ldrb	r3, [r7, #3]
   13b88:	73bb      	strb	r3, [r7, #14]

  return rxbyte;
   13b8a:	7bbb      	ldrb	r3, [r7, #14]
  
 }
   13b8c:	4618      	mov	r0, r3
   13b8e:	3710      	adds	r7, #16
   13b90:	46bd      	mov	sp, r7
   13b92:	bd80      	pop	{r7, pc}
   13b94:	000139b9 	.word	0x000139b9
   13b98:	000154a1 	.word	0x000154a1

00013b9c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh>:
// ------------------------------------------------------------------
// Transmits the Message Command and data contained in the passed array pointer
// Transmit the 0x0C Opcode command + 4 bytes of ARINC data per Figure 1, pg 8 of the data sheet
// ------------------------------------------------------------------
 void Holt_3593_Class::TransmitCommandAndData(uint8_t cmd, uint8_t *TXBuffer)
 {              
   13b9c:	b580      	push	{r7, lr}
   13b9e:	b084      	sub	sp, #16
   13ba0:	af00      	add	r7, sp, #0
   13ba2:	60f8      	str	r0, [r7, #12]
   13ba4:	460b      	mov	r3, r1
   13ba6:	607a      	str	r2, [r7, #4]
   13ba8:	72fb      	strb	r3, [r7, #11]
 uint8_t static ByteCount,dummy,transmitCount;
 
	open();
   13baa:	68f8      	ldr	r0, [r7, #12]
   13bac:	4b20      	ldr	r3, [pc, #128]	; (13c30 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x94>)
   13bae:	4798      	blx	r3
   
   transmitCount=4;                                // Standard messages are 4 bytes
   13bb0:	4b20      	ldr	r3, [pc, #128]	; (13c34 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   13bb2:	2204      	movs	r2, #4
   13bb4:	701a      	strb	r2, [r3, #0]
   if(cmd==W_PL1Match || cmd==W_PL2Match){       // if writing PL Match registers send only 3 bytes
   13bb6:	7afb      	ldrb	r3, [r7, #11]
   13bb8:	2b18      	cmp	r3, #24
   13bba:	d002      	beq.n	13bc2 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x26>
   13bbc:	7afb      	ldrb	r3, [r7, #11]
   13bbe:	2b2c      	cmp	r3, #44	; 0x2c
   13bc0:	d105      	bne.n	13bce <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x32>
      transmitCount--;
   13bc2:	4b1c      	ldr	r3, [pc, #112]	; (13c34 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   13bc4:	781b      	ldrb	r3, [r3, #0]
   13bc6:	3b01      	subs	r3, #1
   13bc8:	b2da      	uxtb	r2, r3
   13bca:	4b1a      	ldr	r3, [pc, #104]	; (13c34 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   13bcc:	701a      	strb	r2, [r3, #0]
   }
   
   dummy = txrx8bits(cmd, 1);      // Transmit the whole message, ignore return values 
   13bce:	7afb      	ldrb	r3, [r7, #11]
   13bd0:	2201      	movs	r2, #1
   13bd2:	4619      	mov	r1, r3
   13bd4:	68f8      	ldr	r0, [r7, #12]
   13bd6:	4b18      	ldr	r3, [pc, #96]	; (13c38 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   13bd8:	4798      	blx	r3
   13bda:	4603      	mov	r3, r0
   13bdc:	461a      	mov	r2, r3
   13bde:	4b17      	ldr	r3, [pc, #92]	; (13c3c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   13be0:	701a      	strb	r2, [r3, #0]

   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   13be2:	4b17      	ldr	r3, [pc, #92]	; (13c40 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   13be4:	2200      	movs	r2, #0
   13be6:	701a      	strb	r2, [r3, #0]
   13be8:	4b15      	ldr	r3, [pc, #84]	; (13c40 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   13bea:	781b      	ldrb	r3, [r3, #0]
   13bec:	461a      	mov	r2, r3
   13bee:	4b11      	ldr	r3, [pc, #68]	; (13c34 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x98>)
   13bf0:	781b      	ldrb	r3, [r3, #0]
   13bf2:	429a      	cmp	r2, r3
   13bf4:	da15      	bge.n	13c22 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x86>
      {              
         dummy = txrx8bits(TXBuffer[ByteCount], 1);      // Transmit the whole message, ignore return values 
   13bf6:	4b12      	ldr	r3, [pc, #72]	; (13c40 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   13bf8:	781b      	ldrb	r3, [r3, #0]
   13bfa:	461a      	mov	r2, r3
   13bfc:	687b      	ldr	r3, [r7, #4]
   13bfe:	4413      	add	r3, r2
   13c00:	781b      	ldrb	r3, [r3, #0]
   13c02:	2201      	movs	r2, #1
   13c04:	4619      	mov	r1, r3
   13c06:	68f8      	ldr	r0, [r7, #12]
   13c08:	4b0b      	ldr	r3, [pc, #44]	; (13c38 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x9c>)
   13c0a:	4798      	blx	r3
   13c0c:	4603      	mov	r3, r0
   13c0e:	461a      	mov	r2, r3
   13c10:	4b0a      	ldr	r3, [pc, #40]	; (13c3c <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa0>)
   13c12:	701a      	strb	r2, [r3, #0]
   for(ByteCount=0; ByteCount< transmitCount; ByteCount++)// Transmit command=0x0C +  4 bytes        
   13c14:	4b0a      	ldr	r3, [pc, #40]	; (13c40 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   13c16:	781b      	ldrb	r3, [r3, #0]
   13c18:	3301      	adds	r3, #1
   13c1a:	b2da      	uxtb	r2, r3
   13c1c:	4b08      	ldr	r3, [pc, #32]	; (13c40 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa4>)
   13c1e:	701a      	strb	r2, [r3, #0]
   13c20:	e7e2      	b.n	13be8 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0x4c>
      }   
 close();
   13c22:	68f8      	ldr	r0, [r7, #12]
   13c24:	4b07      	ldr	r3, [pc, #28]	; (13c44 <_ZN15Holt_3593_Class22TransmitCommandAndDataEhPh+0xa8>)
   13c26:	4798      	blx	r3
}
   13c28:	bf00      	nop
   13c2a:	3710      	adds	r7, #16
   13c2c:	46bd      	mov	sp, r7
   13c2e:	bd80      	pop	{r7, pc}
   13c30:	00013839 	.word	0x00013839
   13c34:	200091ad 	.word	0x200091ad
   13c38:	00013b4d 	.word	0x00013b4d
   13c3c:	200091ac 	.word	0x200091ac
   13c40:	200091ab 	.word	0x200091ab
   13c44:	00013861 	.word	0x00013861

00013c48 <_ZN15Holt_3593_Class9W_CommandEc>:
// Primitive SPI Commands below
//
// ------------------------------------------------------------------
// Single command byte write
// ------------------------------------------------------------------
void Holt_3593_Class::W_Command (char cmd) {
   13c48:	b580      	push	{r7, lr}
   13c4a:	b084      	sub	sp, #16
   13c4c:	af00      	add	r7, sp, #0
   13c4e:	6078      	str	r0, [r7, #4]
   13c50:	460b      	mov	r3, r1
   13c52:	70fb      	strb	r3, [r7, #3]

 	  uint8_t p(cmd); 
   13c54:	78fb      	ldrb	r3, [r7, #3]
   13c56:	73fb      	strb	r3, [r7, #15]
  open();
   13c58:	6878      	ldr	r0, [r7, #4]
   13c5a:	4b0c      	ldr	r3, [pc, #48]	; (13c8c <_ZN15Holt_3593_Class9W_CommandEc+0x44>)
   13c5c:	4798      	blx	r3
  //dummy = Get_Byte();               // clear SPI status register    
 
  Send_Byte(p);             // Test Mode SPI Instruction - MASTER RESET CMD 
   13c5e:	7bfb      	ldrb	r3, [r7, #15]
   13c60:	4619      	mov	r1, r3
   13c62:	6878      	ldr	r0, [r7, #4]
   13c64:	4b0a      	ldr	r3, [pc, #40]	; (13c90 <_ZN15Holt_3593_Class9W_CommandEc+0x48>)
   13c66:	4798      	blx	r3
  while (!spi.IsSPIReady()) {;}      // Wait for data to come back in.
   13c68:	687b      	ldr	r3, [r7, #4]
   13c6a:	4618      	mov	r0, r3
   13c6c:	4b09      	ldr	r3, [pc, #36]	; (13c94 <_ZN15Holt_3593_Class9W_CommandEc+0x4c>)
   13c6e:	4798      	blx	r3
   13c70:	4603      	mov	r3, r0
   13c72:	f083 0301 	eor.w	r3, r3, #1
   13c76:	b2db      	uxtb	r3, r3
   13c78:	2b00      	cmp	r3, #0
   13c7a:	d000      	beq.n	13c7e <_ZN15Holt_3593_Class9W_CommandEc+0x36>
   13c7c:	e7f4      	b.n	13c68 <_ZN15Holt_3593_Class9W_CommandEc+0x20>
  //dummy = char(Get_Byte());               // read Rx data in Data Reg to reset SPIF 
  close();
   13c7e:	6878      	ldr	r0, [r7, #4]
   13c80:	4b05      	ldr	r3, [pc, #20]	; (13c98 <_ZN15Holt_3593_Class9W_CommandEc+0x50>)
   13c82:	4798      	blx	r3
}
   13c84:	bf00      	nop
   13c86:	3710      	adds	r7, #16
   13c88:	46bd      	mov	sp, r7
   13c8a:	bd80      	pop	{r7, pc}
   13c8c:	00013839 	.word	0x00013839
   13c90:	000139b9 	.word	0x000139b9
   13c94:	000154a1 	.word	0x000154a1
   13c98:	00013861 	.word	0x00013861

00013c9c <_ZN15Holt_3593_Class14W_CommandValueEhh>:

// ------------------------------------------------------------------
// Write SPI Command (Opcode) with a Value to HI-3593
//  ------------------------------------------------------------------
void Holt_3593_Class::W_CommandValue (uint8_t cmd, uint8_t value){
   13c9c:	b580      	push	{r7, lr}
   13c9e:	b082      	sub	sp, #8
   13ca0:	af00      	add	r7, sp, #0
   13ca2:	6078      	str	r0, [r7, #4]
   13ca4:	460b      	mov	r3, r1
   13ca6:	70fb      	strb	r3, [r7, #3]
   13ca8:	4613      	mov	r3, r2
   13caa:	70bb      	strb	r3, [r7, #2]

  	
  open();                             // assert the SPI0 /SS strobe
   13cac:	6878      	ldr	r0, [r7, #4]
   13cae:	4b14      	ldr	r3, [pc, #80]	; (13d00 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x64>)
   13cb0:	4798      	blx	r3
 // dummy = Get_Byte();                           // clear SPI status register    
  Send_Byte(cmd);                             // SPI  command 
   13cb2:	78fb      	ldrb	r3, [r7, #3]
   13cb4:	4619      	mov	r1, r3
   13cb6:	6878      	ldr	r0, [r7, #4]
   13cb8:	4b12      	ldr	r3, [pc, #72]	; (13d04 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   13cba:	4798      	blx	r3
  while (!spi.IsSPIReady());    
   13cbc:	687b      	ldr	r3, [r7, #4]
   13cbe:	4618      	mov	r0, r3
   13cc0:	4b11      	ldr	r3, [pc, #68]	; (13d08 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   13cc2:	4798      	blx	r3
   13cc4:	4603      	mov	r3, r0
   13cc6:	f083 0301 	eor.w	r3, r3, #1
   13cca:	b2db      	uxtb	r3, r3
   13ccc:	2b00      	cmp	r3, #0
   13cce:	d000      	beq.n	13cd2 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x36>
   13cd0:	e7f4      	b.n	13cbc <_ZN15Holt_3593_Class14W_CommandValueEhh+0x20>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF
                         // clear SPI status register    
  Send_Byte(value);                           // Reset values     
   13cd2:	78bb      	ldrb	r3, [r7, #2]
   13cd4:	4619      	mov	r1, r3
   13cd6:	6878      	ldr	r0, [r7, #4]
   13cd8:	4b0a      	ldr	r3, [pc, #40]	; (13d04 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x68>)
   13cda:	4798      	blx	r3
  while (!spi.IsSPIReady());    
   13cdc:	687b      	ldr	r3, [r7, #4]
   13cde:	4618      	mov	r0, r3
   13ce0:	4b09      	ldr	r3, [pc, #36]	; (13d08 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x6c>)
   13ce2:	4798      	blx	r3
   13ce4:	4603      	mov	r3, r0
   13ce6:	f083 0301 	eor.w	r3, r3, #1
   13cea:	b2db      	uxtb	r3, r3
   13cec:	2b00      	cmp	r3, #0
   13cee:	d000      	beq.n	13cf2 <_ZN15Holt_3593_Class14W_CommandValueEhh+0x56>
   13cf0:	e7f4      	b.n	13cdc <_ZN15Holt_3593_Class14W_CommandValueEhh+0x40>
 // dummy = Get_Byte();                           // read Rx data in Data Reg to reset SPIF

  close();
   13cf2:	6878      	ldr	r0, [r7, #4]
   13cf4:	4b05      	ldr	r3, [pc, #20]	; (13d0c <_ZN15Holt_3593_Class14W_CommandValueEhh+0x70>)
   13cf6:	4798      	blx	r3
}
   13cf8:	bf00      	nop
   13cfa:	3708      	adds	r7, #8
   13cfc:	46bd      	mov	sp, r7
   13cfe:	bd80      	pop	{r7, pc}
   13d00:	00013839 	.word	0x00013839
   13d04:	000139b9 	.word	0x000139b9
   13d08:	000154a1 	.word	0x000154a1
   13d0c:	00013861 	.word	0x00013861

00013d10 <_ZN15Holt_3593_Class10R_RegisterEc>:
Argument(s):  Register to read

     Return:  8-bit Register Value 
*/

unsigned char Holt_3593_Class::R_Register(char Reg){                     
   13d10:	b580      	push	{r7, lr}
   13d12:	b084      	sub	sp, #16
   13d14:	af00      	add	r7, sp, #0
   13d16:	6078      	str	r0, [r7, #4]
   13d18:	460b      	mov	r3, r1
   13d1a:	70fb      	strb	r3, [r7, #3]
  unsigned char R_Reg;
	
  open();
   13d1c:	6878      	ldr	r0, [r7, #4]
   13d1e:	4b0a      	ldr	r3, [pc, #40]	; (13d48 <_ZN15Holt_3593_Class10R_RegisterEc+0x38>)
   13d20:	4798      	blx	r3
  txrx8bits(Reg,1);        // send op code (ignore returned data byte)
   13d22:	78fb      	ldrb	r3, [r7, #3]
   13d24:	2201      	movs	r2, #1
   13d26:	4619      	mov	r1, r3
   13d28:	6878      	ldr	r0, [r7, #4]
   13d2a:	4b08      	ldr	r3, [pc, #32]	; (13d4c <_ZN15Holt_3593_Class10R_RegisterEc+0x3c>)
   13d2c:	4798      	blx	r3
              
  R_Reg  = Get_Byte();  
   13d2e:	6878      	ldr	r0, [r7, #4]
   13d30:	4b07      	ldr	r3, [pc, #28]	; (13d50 <_ZN15Holt_3593_Class10R_RegisterEc+0x40>)
   13d32:	4798      	blx	r3
   13d34:	4603      	mov	r3, r0
   13d36:	73fb      	strb	r3, [r7, #15]
         
  close();
   13d38:	6878      	ldr	r0, [r7, #4]
   13d3a:	4b06      	ldr	r3, [pc, #24]	; (13d54 <_ZN15Holt_3593_Class10R_RegisterEc+0x44>)
   13d3c:	4798      	blx	r3
  return R_Reg;
   13d3e:	7bfb      	ldrb	r3, [r7, #15]
}
   13d40:	4618      	mov	r0, r3
   13d42:	3710      	adds	r7, #16
   13d44:	46bd      	mov	sp, r7
   13d46:	bd80      	pop	{r7, pc}
   13d48:	00013839 	.word	0x00013839
   13d4c:	00013b4d 	.word	0x00013b4d
   13d50:	00013a11 	.word	0x00013a11
   13d54:	00013861 	.word	0x00013861

00013d58 <_ZN15Holt_3593_Class6SS_LowEv>:
  //--------------------------------------------    
	open();                             // assert the SPI0 /SS strobe
  } 

void Holt_3593_Class::SS_Low(void)
{
   13d58:	b580      	push	{r7, lr}
   13d5a:	b082      	sub	sp, #8
   13d5c:	af00      	add	r7, sp, #0
   13d5e:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);
   13d60:	2100      	movs	r1, #0
   13d62:	204e      	movs	r0, #78	; 0x4e
   13d64:	4b02      	ldr	r3, [pc, #8]	; (13d70 <_ZN15Holt_3593_Class6SS_LowEv+0x18>)
   13d66:	4798      	blx	r3
}
   13d68:	bf00      	nop
   13d6a:	3708      	adds	r7, #8
   13d6c:	46bd      	mov	sp, r7
   13d6e:	bd80      	pop	{r7, pc}
   13d70:	00013651 	.word	0x00013651

00013d74 <_ZN15Holt_3593_Class7SS_HighEv>:
void Holt_3593_Class::SS_High(void)
{
   13d74:	b580      	push	{r7, lr}
   13d76:	b082      	sub	sp, #8
   13d78:	af00      	add	r7, sp, #0
   13d7a:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS_Holt,
	// <y> Initial level
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
   13d7c:	2101      	movs	r1, #1
   13d7e:	204e      	movs	r0, #78	; 0x4e
   13d80:	4b02      	ldr	r3, [pc, #8]	; (13d8c <_ZN15Holt_3593_Class7SS_HighEv+0x18>)
   13d82:	4798      	blx	r3
}
   13d84:	bf00      	nop
   13d86:	3708      	adds	r7, #8
   13d88:	46bd      	mov	sp, r7
   13d8a:	bd80      	pop	{r7, pc}
   13d8c:	00013651 	.word	0x00013651

00013d90 <_ZN14Protocol_ClassD2Ev>:

#include "Protocol_Class.h"
#include "stdlib.h"

// virtual destructor
Protocol_Class::~Protocol_Class()
   13d90:	b480      	push	{r7}
   13d92:	b083      	sub	sp, #12
   13d94:	af00      	add	r7, sp, #0
   13d96:	6078      	str	r0, [r7, #4]
   13d98:	6039      	str	r1, [r7, #0]
   13d9a:	683b      	ldr	r3, [r7, #0]
   13d9c:	681a      	ldr	r2, [r3, #0]
   13d9e:	687b      	ldr	r3, [r7, #4]
   13da0:	601a      	str	r2, [r3, #0]
   13da2:	687b      	ldr	r3, [r7, #4]
   13da4:	681b      	ldr	r3, [r3, #0]
   13da6:	3b0c      	subs	r3, #12
   13da8:	681b      	ldr	r3, [r3, #0]
   13daa:	461a      	mov	r2, r3
   13dac:	687b      	ldr	r3, [r7, #4]
   13dae:	4413      	add	r3, r2
   13db0:	683a      	ldr	r2, [r7, #0]
   13db2:	6852      	ldr	r2, [r2, #4]
   13db4:	601a      	str	r2, [r3, #0]
{
} //~Protocol_Class
   13db6:	687b      	ldr	r3, [r7, #4]
   13db8:	4618      	mov	r0, r3
   13dba:	370c      	adds	r7, #12
   13dbc:	46bd      	mov	sp, r7
   13dbe:	bc80      	pop	{r7}
   13dc0:	4770      	bx	lr

00013dc2 <_ZN14Protocol_Class13GetActiveLineEv>:

uint8_t	Protocol_Class::GetActiveLine(void){
   13dc2:	b590      	push	{r4, r7, lr}
   13dc4:	b085      	sub	sp, #20
   13dc6:	af00      	add	r7, sp, #0
   13dc8:	6078      	str	r0, [r7, #4]
	uint32_t	data=ReadBufferLabel(Label2Byte(270));
   13dca:	687b      	ldr	r3, [r7, #4]
   13dcc:	681b      	ldr	r3, [r3, #0]
   13dce:	3308      	adds	r3, #8
   13dd0:	681c      	ldr	r4, [r3, #0]
   13dd2:	687b      	ldr	r3, [r7, #4]
   13dd4:	681b      	ldr	r3, [r3, #0]
   13dd6:	3b0c      	subs	r3, #12
   13dd8:	681b      	ldr	r3, [r3, #0]
   13dda:	461a      	mov	r2, r3
   13ddc:	687b      	ldr	r3, [r7, #4]
   13dde:	4413      	add	r3, r2
   13de0:	681b      	ldr	r3, [r3, #0]
   13de2:	3304      	adds	r3, #4
   13de4:	681b      	ldr	r3, [r3, #0]
   13de6:	687a      	ldr	r2, [r7, #4]
   13de8:	6812      	ldr	r2, [r2, #0]
   13dea:	3a0c      	subs	r2, #12
   13dec:	6812      	ldr	r2, [r2, #0]
   13dee:	4611      	mov	r1, r2
   13df0:	687a      	ldr	r2, [r7, #4]
   13df2:	440a      	add	r2, r1
   13df4:	f44f 7187 	mov.w	r1, #270	; 0x10e
   13df8:	4610      	mov	r0, r2
   13dfa:	4798      	blx	r3
   13dfc:	4603      	mov	r3, r0
   13dfe:	4619      	mov	r1, r3
   13e00:	6878      	ldr	r0, [r7, #4]
   13e02:	47a0      	blx	r4
   13e04:	60f8      	str	r0, [r7, #12]
	uint8_t	key=uint8_t((data&0xc0000)>>18);
   13e06:	68fb      	ldr	r3, [r7, #12]
   13e08:	0c9b      	lsrs	r3, r3, #18
   13e0a:	b2db      	uxtb	r3, r3
   13e0c:	f003 0303 	and.w	r3, r3, #3
   13e10:	72fb      	strb	r3, [r7, #11]

	return key;
   13e12:	7afb      	ldrb	r3, [r7, #11]
}
   13e14:	4618      	mov	r0, r3
   13e16:	3714      	adds	r7, #20
   13e18:	46bd      	mov	sp, r7
   13e1a:	bd90      	pop	{r4, r7, pc}

00013e1c <_ZN14Protocol_Class12MakeLabel374Emf>:
	data=(0x1ffffc00&d)>>10;
	datagram.bit.dataField=data;

	return	data;
}
uint32_t Protocol_Class::MakeLabel374(uint32_t d,float v){
   13e1c:	b580      	push	{r7, lr}
   13e1e:	b084      	sub	sp, #16
   13e20:	af00      	add	r7, sp, #0
   13e22:	60f8      	str	r0, [r7, #12]
   13e24:	60b9      	str	r1, [r7, #8]
   13e26:	607a      	str	r2, [r7, #4]
	value=d<<12;
   13e28:	68bb      	ldr	r3, [r7, #8]
   13e2a:	031a      	lsls	r2, r3, #12
   13e2c:	68fb      	ldr	r3, [r7, #12]
   13e2e:	60da      	str	r2, [r3, #12]
	label=Label2Byte(374);
   13e30:	68fb      	ldr	r3, [r7, #12]
   13e32:	681b      	ldr	r3, [r3, #0]
   13e34:	3b0c      	subs	r3, #12
   13e36:	681b      	ldr	r3, [r3, #0]
   13e38:	461a      	mov	r2, r3
   13e3a:	68fb      	ldr	r3, [r7, #12]
   13e3c:	4413      	add	r3, r2
   13e3e:	681b      	ldr	r3, [r3, #0]
   13e40:	3304      	adds	r3, #4
   13e42:	681b      	ldr	r3, [r3, #0]
   13e44:	68fa      	ldr	r2, [r7, #12]
   13e46:	6812      	ldr	r2, [r2, #0]
   13e48:	3a0c      	subs	r2, #12
   13e4a:	6812      	ldr	r2, [r2, #0]
   13e4c:	4611      	mov	r1, r2
   13e4e:	68fa      	ldr	r2, [r7, #12]
   13e50:	440a      	add	r2, r1
   13e52:	f44f 71bb 	mov.w	r1, #374	; 0x176
   13e56:	4610      	mov	r0, r2
   13e58:	4798      	blx	r3
   13e5a:	4603      	mov	r3, r0
   13e5c:	461a      	mov	r2, r3
   13e5e:	68fb      	ldr	r3, [r7, #12]
   13e60:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   13e62:	68fb      	ldr	r3, [r7, #12]
   13e64:	68db      	ldr	r3, [r3, #12]
   13e66:	68fa      	ldr	r2, [r7, #12]
   13e68:	7c12      	ldrb	r2, [r2, #16]
   13e6a:	431a      	orrs	r2, r3
   13e6c:	68fb      	ldr	r3, [r7, #12]
   13e6e:	60da      	str	r2, [r3, #12]
	if (v<0)
   13e70:	4b0e      	ldr	r3, [pc, #56]	; (13eac <_ZN14Protocol_Class12MakeLabel374Emf+0x90>)
   13e72:	f04f 0100 	mov.w	r1, #0
   13e76:	6878      	ldr	r0, [r7, #4]
   13e78:	4798      	blx	r3
   13e7a:	4603      	mov	r3, r0
   13e7c:	2b00      	cmp	r3, #0
   13e7e:	d005      	beq.n	13e8c <_ZN14Protocol_Class12MakeLabel374Emf+0x70>
	{
		value|=0x1<<28;
   13e80:	68fb      	ldr	r3, [r7, #12]
   13e82:	68db      	ldr	r3, [r3, #12]
   13e84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
   13e88:	68fb      	ldr	r3, [r7, #12]
   13e8a:	60da      	str	r2, [r3, #12]
	}
	value=MakeEvenParity(value);
   13e8c:	68fb      	ldr	r3, [r7, #12]
   13e8e:	68db      	ldr	r3, [r3, #12]
   13e90:	4619      	mov	r1, r3
   13e92:	68f8      	ldr	r0, [r7, #12]
   13e94:	4b06      	ldr	r3, [pc, #24]	; (13eb0 <_ZN14Protocol_Class12MakeLabel374Emf+0x94>)
   13e96:	4798      	blx	r3
   13e98:	4602      	mov	r2, r0
   13e9a:	68fb      	ldr	r3, [r7, #12]
   13e9c:	60da      	str	r2, [r3, #12]
	return value;
   13e9e:	68fb      	ldr	r3, [r7, #12]
   13ea0:	68db      	ldr	r3, [r3, #12]
	
}
   13ea2:	4618      	mov	r0, r3
   13ea4:	3710      	adds	r7, #16
   13ea6:	46bd      	mov	sp, r7
   13ea8:	bd80      	pop	{r7, pc}
   13eaa:	bf00      	nop
   13eac:	0001acd5 	.word	0x0001acd5
   13eb0:	00013f41 	.word	0x00013f41

00013eb4 <_ZN14Protocol_Class12MakeLabel270Em>:
uint32_t Protocol_Class::MakeLabel270(uint32_t d){
   13eb4:	b580      	push	{r7, lr}
   13eb6:	b082      	sub	sp, #8
   13eb8:	af00      	add	r7, sp, #0
   13eba:	6078      	str	r0, [r7, #4]
   13ebc:	6039      	str	r1, [r7, #0]
	
	value=d<<10;
   13ebe:	683b      	ldr	r3, [r7, #0]
   13ec0:	029a      	lsls	r2, r3, #10
   13ec2:	687b      	ldr	r3, [r7, #4]
   13ec4:	60da      	str	r2, [r3, #12]
	label=Label2Byte(270);
   13ec6:	687b      	ldr	r3, [r7, #4]
   13ec8:	681b      	ldr	r3, [r3, #0]
   13eca:	3b0c      	subs	r3, #12
   13ecc:	681b      	ldr	r3, [r3, #0]
   13ece:	461a      	mov	r2, r3
   13ed0:	687b      	ldr	r3, [r7, #4]
   13ed2:	4413      	add	r3, r2
   13ed4:	681b      	ldr	r3, [r3, #0]
   13ed6:	3304      	adds	r3, #4
   13ed8:	681b      	ldr	r3, [r3, #0]
   13eda:	687a      	ldr	r2, [r7, #4]
   13edc:	6812      	ldr	r2, [r2, #0]
   13ede:	3a0c      	subs	r2, #12
   13ee0:	6812      	ldr	r2, [r2, #0]
   13ee2:	4611      	mov	r1, r2
   13ee4:	687a      	ldr	r2, [r7, #4]
   13ee6:	440a      	add	r2, r1
   13ee8:	f44f 7187 	mov.w	r1, #270	; 0x10e
   13eec:	4610      	mov	r0, r2
   13eee:	4798      	blx	r3
   13ef0:	4603      	mov	r3, r0
   13ef2:	461a      	mov	r2, r3
   13ef4:	687b      	ldr	r3, [r7, #4]
   13ef6:	741a      	strb	r2, [r3, #16]
	value|=(uint32_t)label;
   13ef8:	687b      	ldr	r3, [r7, #4]
   13efa:	68db      	ldr	r3, [r3, #12]
   13efc:	687a      	ldr	r2, [r7, #4]
   13efe:	7c12      	ldrb	r2, [r2, #16]
   13f00:	431a      	orrs	r2, r3
   13f02:	687b      	ldr	r3, [r7, #4]
   13f04:	60da      	str	r2, [r3, #12]
	value|=(uint32_t)(((uint8_t)rand()))<<19;
   13f06:	4b0c      	ldr	r3, [pc, #48]	; (13f38 <_ZN14Protocol_Class12MakeLabel270Em+0x84>)
   13f08:	4798      	blx	r3
   13f0a:	4603      	mov	r3, r0
   13f0c:	b2db      	uxtb	r3, r3
   13f0e:	04db      	lsls	r3, r3, #19
   13f10:	687a      	ldr	r2, [r7, #4]
   13f12:	68d2      	ldr	r2, [r2, #12]
   13f14:	431a      	orrs	r2, r3
   13f16:	687b      	ldr	r3, [r7, #4]
   13f18:	60da      	str	r2, [r3, #12]
	value=MakeEvenParity(value);
   13f1a:	687b      	ldr	r3, [r7, #4]
   13f1c:	68db      	ldr	r3, [r3, #12]
   13f1e:	4619      	mov	r1, r3
   13f20:	6878      	ldr	r0, [r7, #4]
   13f22:	4b06      	ldr	r3, [pc, #24]	; (13f3c <_ZN14Protocol_Class12MakeLabel270Em+0x88>)
   13f24:	4798      	blx	r3
   13f26:	4602      	mov	r2, r0
   13f28:	687b      	ldr	r3, [r7, #4]
   13f2a:	60da      	str	r2, [r3, #12]
	return value;
   13f2c:	687b      	ldr	r3, [r7, #4]
   13f2e:	68db      	ldr	r3, [r3, #12]
	
}
   13f30:	4618      	mov	r0, r3
   13f32:	3708      	adds	r7, #8
   13f34:	46bd      	mov	sp, r7
   13f36:	bd80      	pop	{r7, pc}
   13f38:	0001b52d 	.word	0x0001b52d
   13f3c:	00013f41 	.word	0x00013f41

00013f40 <_ZN14Protocol_Class14MakeEvenParityEm>:
uint32_t Protocol_Class::MakeEvenParity(uint32_t data){
   13f40:	b580      	push	{r7, lr}
   13f42:	b082      	sub	sp, #8
   13f44:	af00      	add	r7, sp, #0
   13f46:	6078      	str	r0, [r7, #4]
   13f48:	6039      	str	r1, [r7, #0]
	if (FindParity(data))
   13f4a:	687b      	ldr	r3, [r7, #4]
   13f4c:	681b      	ldr	r3, [r3, #0]
   13f4e:	3b0c      	subs	r3, #12
   13f50:	681b      	ldr	r3, [r3, #0]
   13f52:	461a      	mov	r2, r3
   13f54:	687b      	ldr	r3, [r7, #4]
   13f56:	4413      	add	r3, r2
   13f58:	6839      	ldr	r1, [r7, #0]
   13f5a:	4618      	mov	r0, r3
   13f5c:	4b06      	ldr	r3, [pc, #24]	; (13f78 <_ZN14Protocol_Class14MakeEvenParityEm+0x38>)
   13f5e:	4798      	blx	r3
   13f60:	4603      	mov	r3, r0
   13f62:	2b00      	cmp	r3, #0
   13f64:	d003      	beq.n	13f6e <_ZN14Protocol_Class14MakeEvenParityEm+0x2e>
	{
		data|=0x01<<31;
   13f66:	683b      	ldr	r3, [r7, #0]
   13f68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13f6c:	603b      	str	r3, [r7, #0]
	} 
	else
	{
		
	}
	return data;
   13f6e:	683b      	ldr	r3, [r7, #0]
   13f70:	4618      	mov	r0, r3
   13f72:	3708      	adds	r7, #8
   13f74:	46bd      	mov	sp, r7
   13f76:	bd80      	pop	{r7, pc}
   13f78:	00012ac1 	.word	0x00012ac1

00013f7c <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   13f7c:	b480      	push	{r7}
   13f7e:	b083      	sub	sp, #12
   13f80:	af00      	add	r7, sp, #0
   13f82:	6078      	str	r0, [r7, #4]
    return (void *)0;
   13f84:	2300      	movs	r3, #0
	}
   13f86:	4618      	mov	r0, r3
   13f88:	370c      	adds	r7, #12
   13f8a:	46bd      	mov	sp, r7
   13f8c:	bc80      	pop	{r7}
   13f8e:	4770      	bx	lr

00013f90 <free>:
//............................................................................
extern "C" void free(void *)
	{
   13f90:	b480      	push	{r7}
   13f92:	b083      	sub	sp, #12
   13f94:	af00      	add	r7, sp, #0
   13f96:	6078      	str	r0, [r7, #4]
	}
   13f98:	bf00      	nop
   13f9a:	370c      	adds	r7, #12
   13f9c:	46bd      	mov	sp, r7
   13f9e:	bc80      	pop	{r7}
   13fa0:	4770      	bx	lr

00013fa2 <_sbrk>:

extern "C" void *_sbrk (ptrdiff_t)
	{
   13fa2:	b480      	push	{r7}
   13fa4:	b083      	sub	sp, #12
   13fa6:	af00      	add	r7, sp, #0
   13fa8:	6078      	str	r0, [r7, #4]
    return (void *)0;
   13faa:	2300      	movs	r3, #0
	}
   13fac:	4618      	mov	r0, r3
   13fae:	370c      	adds	r7, #12
   13fb0:	46bd      	mov	sp, r7
   13fb2:	bc80      	pop	{r7}
   13fb4:	4770      	bx	lr

00013fb6 <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   13fb6:	b480      	push	{r7}
   13fb8:	af00      	add	r7, sp, #0
		}
   13fba:	bf00      	nop
   13fbc:	46bd      	mov	sp, r7
   13fbe:	bc80      	pop	{r7}
   13fc0:	4770      	bx	lr
	...

00013fc4 <_ZdlPv>:
	{
	return malloc(size);
	}

void operator delete(void* p)
	{
   13fc4:	b580      	push	{r7, lr}
   13fc6:	b082      	sub	sp, #8
   13fc8:	af00      	add	r7, sp, #0
   13fca:	6078      	str	r0, [r7, #4]
	free(p);
   13fcc:	6878      	ldr	r0, [r7, #4]
   13fce:	4b03      	ldr	r3, [pc, #12]	; (13fdc <_ZdlPv+0x18>)
   13fd0:	4798      	blx	r3
	}
   13fd2:	bf00      	nop
   13fd4:	3708      	adds	r7, #8
   13fd6:	46bd      	mov	sp, r7
   13fd8:	bd80      	pop	{r7, pc}
   13fda:	bf00      	nop
   13fdc:	00013f91 	.word	0x00013f91

00013fe0 <_ZN11DiagnosticsC1Ev>:
 class Diagnostics
  {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
   13fe0:	b480      	push	{r7}
   13fe2:	b083      	sub	sp, #12
   13fe4:	af00      	add	r7, sp, #0
   13fe6:	6078      	str	r0, [r7, #4]
   13fe8:	687b      	ldr	r3, [r7, #4]
   13fea:	4618      	mov	r0, r3
   13fec:	370c      	adds	r7, #12
   13fee:	46bd      	mov	sp, r7
   13ff0:	bc80      	pop	{r7}
   13ff2:	4770      	bx	lr

00013ff4 <_ZN11DiagnosticsD1Ev>:
  ~Diagnostics(void){};
   13ff4:	b480      	push	{r7}
   13ff6:	b083      	sub	sp, #12
   13ff8:	af00      	add	r7, sp, #0
   13ffa:	6078      	str	r0, [r7, #4]
   13ffc:	687b      	ldr	r3, [r7, #4]
   13ffe:	4618      	mov	r0, r3
   14000:	370c      	adds	r7, #12
   14002:	46bd      	mov	sp, r7
   14004:	bc80      	pop	{r7}
   14006:	4770      	bx	lr

00014008 <_ZN11Diagnostics12troubleshootEhb>:
#include "diagnostics.h"
#include "CDC_Class.h"


//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
   14008:	b580      	push	{r7, lr}
   1400a:	b084      	sub	sp, #16
   1400c:	af00      	add	r7, sp, #0
   1400e:	6078      	str	r0, [r7, #4]
   14010:	460b      	mov	r3, r1
   14012:	70fb      	strb	r3, [r7, #3]
   14014:	4613      	mov	r3, r2
   14016:	70bb      	strb	r3, [r7, #2]
  bool _printoverride;
  errorcode = _code;
   14018:	687b      	ldr	r3, [r7, #4]
   1401a:	78fa      	ldrb	r2, [r7, #3]
   1401c:	701a      	strb	r2, [r3, #0]
  _printoverride = true;
#elif defined (RUNDIAGNOSTIC) && defined (ARDUINO_ARCH_AVR)
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
   1401e:	78bb      	ldrb	r3, [r7, #2]
   14020:	73fb      	strb	r3, [r7, #15]
#endif
  if (_printoverride) {
   14022:	7bfb      	ldrb	r3, [r7, #15]
   14024:	2b00      	cmp	r3, #0
   14026:	f000 80ba 	beq.w	1419e <_ZN11Diagnostics12troubleshootEhb+0x196>
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
   1402a:	78fb      	ldrb	r3, [r7, #3]
   1402c:	2b14      	cmp	r3, #20
   1402e:	f200 80a2 	bhi.w	14176 <_ZN11Diagnostics12troubleshootEhb+0x16e>
   14032:	a201      	add	r2, pc, #4	; (adr r2, 14038 <_ZN11Diagnostics12troubleshootEhb+0x30>)
   14034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14038:	0001408d 	.word	0x0001408d
   1403c:	000140a1 	.word	0x000140a1
   14040:	000140ab 	.word	0x000140ab
   14044:	000140b5 	.word	0x000140b5
   14048:	000140bf 	.word	0x000140bf
   1404c:	000140d1 	.word	0x000140d1
   14050:	000140db 	.word	0x000140db
   14054:	000140ed 	.word	0x000140ed
   14058:	000140ff 	.word	0x000140ff
   1405c:	00014113 	.word	0x00014113
   14060:	0001411d 	.word	0x0001411d
   14064:	00014097 	.word	0x00014097
   14068:	00014109 	.word	0x00014109
   1406c:	00014127 	.word	0x00014127
   14070:	00014131 	.word	0x00014131
   14074:	0001413b 	.word	0x0001413b
   14078:	00014145 	.word	0x00014145
   1407c:	0001414f 	.word	0x0001414f
   14080:	00014159 	.word	0x00014159
   14084:	00014163 	.word	0x00014163
   14088:	0001416d 	.word	0x0001416d
      case SUCCESS:
      usb.println(F("Function executed successfully"));
   1408c:	4946      	ldr	r1, [pc, #280]	; (141a8 <_ZN11Diagnostics12troubleshootEhb+0x1a0>)
   1408e:	4847      	ldr	r0, [pc, #284]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14090:	4b47      	ldr	r3, [pc, #284]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14092:	4798      	blx	r3
      break;
   14094:	e074      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NORESPONSE:
      usb.println(F("Check your wiring. Flash chip is non-responsive."));
   14096:	4947      	ldr	r1, [pc, #284]	; (141b4 <_ZN11Diagnostics12troubleshootEhb+0x1ac>)
   14098:	4844      	ldr	r0, [pc, #272]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1409a:	4b45      	ldr	r3, [pc, #276]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1409c:	4798      	blx	r3
      break;
   1409e:	e06f      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CALLBEGIN:
      usb.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
   140a0:	4945      	ldr	r1, [pc, #276]	; (141b8 <_ZN11Diagnostics12troubleshootEhb+0x1b0>)
   140a2:	4842      	ldr	r0, [pc, #264]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   140a4:	4b42      	ldr	r3, [pc, #264]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   140a6:	4798      	blx	r3
      break;
   140a8:	e06a      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCHIP:
      usb.println(F("Unable to identify chip. Are you sure this chip is supported?"));
   140aa:	4944      	ldr	r1, [pc, #272]	; (141bc <_ZN11Diagnostics12troubleshootEhb+0x1b4>)
   140ac:	483f      	ldr	r0, [pc, #252]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   140ae:	4b40      	ldr	r3, [pc, #256]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   140b0:	4798      	blx	r3
      //usb.println(F("Chip details:"));
      //TODO: Insert a diagnostics subroutine here.
      break;
   140b2:	e065      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNKNOWNCAP:
      usb.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
   140b4:	4942      	ldr	r1, [pc, #264]	; (141c0 <_ZN11Diagnostics12troubleshootEhb+0x1b8>)
   140b6:	483d      	ldr	r0, [pc, #244]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   140b8:	4b3d      	ldr	r3, [pc, #244]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   140ba:	4798      	blx	r3
      break;
   140bc:	e060      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPBUSY:
      usb.println(F("Chip is busy."));
   140be:	4941      	ldr	r1, [pc, #260]	; (141c4 <_ZN11Diagnostics12troubleshootEhb+0x1bc>)
   140c0:	483a      	ldr	r0, [pc, #232]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   140c2:	4b3b      	ldr	r3, [pc, #236]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   140c4:	4798      	blx	r3
      usb.println(F("Make sure all pins have been connected properly"));
   140c6:	4940      	ldr	r1, [pc, #256]	; (141c8 <_ZN11Diagnostics12troubleshootEhb+0x1c0>)
   140c8:	4838      	ldr	r0, [pc, #224]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   140ca:	4b39      	ldr	r3, [pc, #228]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   140cc:	4798      	blx	r3
      break;
   140ce:	e057      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case OUTOFBOUNDS:
      usb.println(F("Page overflow has been disabled and the address called exceeds the memory"));
   140d0:	493e      	ldr	r1, [pc, #248]	; (141cc <_ZN11Diagnostics12troubleshootEhb+0x1c4>)
   140d2:	4836      	ldr	r0, [pc, #216]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   140d4:	4b36      	ldr	r3, [pc, #216]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   140d6:	4798      	blx	r3
      break;
   140d8:	e052      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CANTENWRITE:
      usb.println(F("Unable to Enable Writing to chip."));
   140da:	493d      	ldr	r1, [pc, #244]	; (141d0 <_ZN11Diagnostics12troubleshootEhb+0x1c8>)
   140dc:	4833      	ldr	r0, [pc, #204]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   140de:	4b34      	ldr	r3, [pc, #208]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   140e0:	4798      	blx	r3
      usb.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
   140e2:	493c      	ldr	r1, [pc, #240]	; (141d4 <_ZN11Diagnostics12troubleshootEhb+0x1cc>)
   140e4:	4831      	ldr	r0, [pc, #196]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   140e6:	4b32      	ldr	r3, [pc, #200]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   140e8:	4798      	blx	r3
      break;
   140ea:	e049      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case PREVWRITTEN:
      usb.println(F("This sector already contains data."));
   140ec:	493a      	ldr	r1, [pc, #232]	; (141d8 <_ZN11Diagnostics12troubleshootEhb+0x1d0>)
   140ee:	482f      	ldr	r0, [pc, #188]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   140f0:	4b2f      	ldr	r3, [pc, #188]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   140f2:	4798      	blx	r3
      usb.println(F("Please make sure the sectors being written to are erased."));
   140f4:	4939      	ldr	r1, [pc, #228]	; (141dc <_ZN11Diagnostics12troubleshootEhb+0x1d4>)
   140f6:	482d      	ldr	r0, [pc, #180]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   140f8:	4b2d      	ldr	r3, [pc, #180]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   140fa:	4798      	blx	r3
      break;
   140fc:	e040      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case LOWRAM:
      usb.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
   140fe:	4938      	ldr	r1, [pc, #224]	; (141e0 <_ZN11Diagnostics12troubleshootEhb+0x1d8>)
   14100:	482a      	ldr	r0, [pc, #168]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14102:	4b2b      	ldr	r3, [pc, #172]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14104:	4798      	blx	r3
      /*#if defined (ARDUINO_ARCH_SAM)
        usb.print(F("Current Free SRAM: "));
        usb.println(freeRAM());
      #endif*/
      break;
   14106:	e03b      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNSUPPORTEDFUNC:
      usb.println(F("This function is not supported by the flash memory hardware."));
   14108:	4936      	ldr	r1, [pc, #216]	; (141e4 <_ZN11Diagnostics12troubleshootEhb+0x1dc>)
   1410a:	4828      	ldr	r0, [pc, #160]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1410c:	4b28      	ldr	r3, [pc, #160]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1410e:	4798      	blx	r3
      break;
   14110:	e036      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case SYSSUSPEND:
      usb.println(F("Unable to suspend/resume operation."));
   14112:	4935      	ldr	r1, [pc, #212]	; (141e8 <_ZN11Diagnostics12troubleshootEhb+0x1e0>)
   14114:	4825      	ldr	r0, [pc, #148]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14116:	4b26      	ldr	r3, [pc, #152]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14118:	4798      	blx	r3
      break;
   1411a:	e031      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case ERRORCHKFAIL:
      usb.println(F("Write Function has failed errorcheck."));
   1411c:	4933      	ldr	r1, [pc, #204]	; (141ec <_ZN11Diagnostics12troubleshootEhb+0x1e4>)
   1411e:	4823      	ldr	r0, [pc, #140]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14120:	4b23      	ldr	r3, [pc, #140]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14122:	4798      	blx	r3
      break;
   14124:	e02c      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO4BYTE:
      usb.println(F("Unable to enable 4-byte addressing."));
   14126:	4932      	ldr	r1, [pc, #200]	; (141f0 <_ZN11Diagnostics12troubleshootEhb+0x1e8>)
   14128:	4820      	ldr	r0, [pc, #128]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1412a:	4b21      	ldr	r3, [pc, #132]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1412c:	4798      	blx	r3
      break;
   1412e:	e027      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case UNABLETO3BYTE:
      usb.println(F("Unable to disable 4-byte addressing."));
   14130:	4930      	ldr	r1, [pc, #192]	; (141f4 <_ZN11Diagnostics12troubleshootEhb+0x1ec>)
   14132:	481e      	ldr	r0, [pc, #120]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14134:	4b1e      	ldr	r3, [pc, #120]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14136:	4798      	blx	r3
      break;
   14138:	e022      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case CHIPISPOWEREDDOWN:
      usb.println(F("The chip is currently powered down."));
   1413a:	492f      	ldr	r1, [pc, #188]	; (141f8 <_ZN11Diagnostics12troubleshootEhb+0x1f0>)
   1413c:	481b      	ldr	r0, [pc, #108]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1413e:	4b1c      	ldr	r3, [pc, #112]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14140:	4798      	blx	r3
      break;
   14142:	e01d      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDP:
      usb.println(F("The Flash chip does not support SFDP."));
   14144:	492d      	ldr	r1, [pc, #180]	; (141fc <_ZN11Diagnostics12troubleshootEhb+0x1f4>)
   14146:	4819      	ldr	r0, [pc, #100]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14148:	4b19      	ldr	r3, [pc, #100]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1414a:	4798      	blx	r3
      break;
   1414c:	e018      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASEPARAM:
      usb.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
   1414e:	492c      	ldr	r1, [pc, #176]	; (14200 <_ZN11Diagnostics12troubleshootEhb+0x1f8>)
   14150:	4816      	ldr	r0, [pc, #88]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14152:	4b17      	ldr	r3, [pc, #92]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14154:	4798      	blx	r3
      break;
   14156:	e013      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPERASETIME:
      usb.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
   14158:	492a      	ldr	r1, [pc, #168]	; (14204 <_ZN11Diagnostics12troubleshootEhb+0x1fc>)
   1415a:	4814      	ldr	r0, [pc, #80]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1415c:	4b14      	ldr	r3, [pc, #80]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1415e:	4798      	blx	r3
      break;
   14160:	e00e      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOSFDPPROGRAMTIMEPARAM:
      usb.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
   14162:	4929      	ldr	r1, [pc, #164]	; (14208 <_ZN11Diagnostics12troubleshootEhb+0x200>)
   14164:	4811      	ldr	r0, [pc, #68]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14166:	4b12      	ldr	r3, [pc, #72]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14168:	4798      	blx	r3
      break;
   1416a:	e009      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      case NOCHIPSELECTDECLARED:
      usb.println(F("No Chip Select pin defined in the custom SPI Array."));
   1416c:	4927      	ldr	r1, [pc, #156]	; (1420c <_ZN11Diagnostics12troubleshootEhb+0x204>)
   1416e:	480f      	ldr	r0, [pc, #60]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   14170:	4b0f      	ldr	r3, [pc, #60]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   14172:	4798      	blx	r3
      break;
   14174:	e004      	b.n	14180 <_ZN11Diagnostics12troubleshootEhb+0x178>

      default:
      usb.println(F("Unknown error"));
   14176:	4926      	ldr	r1, [pc, #152]	; (14210 <_ZN11Diagnostics12troubleshootEhb+0x208>)
   14178:	480c      	ldr	r0, [pc, #48]	; (141ac <_ZN11Diagnostics12troubleshootEhb+0x1a4>)
   1417a:	4b0d      	ldr	r3, [pc, #52]	; (141b0 <_ZN11Diagnostics12troubleshootEhb+0x1a8>)
   1417c:	4798      	blx	r3
      break;
   1417e:	bf00      	nop
    }
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
   14180:	78fb      	ldrb	r3, [r7, #3]
   14182:	2b0a      	cmp	r3, #10
   14184:	d008      	beq.n	14198 <_ZN11Diagnostics12troubleshootEhb+0x190>
   14186:	78fb      	ldrb	r3, [r7, #3]
   14188:	2b06      	cmp	r3, #6
   1418a:	d005      	beq.n	14198 <_ZN11Diagnostics12troubleshootEhb+0x190>
   1418c:	78fb      	ldrb	r3, [r7, #3]
   1418e:	2b02      	cmp	r3, #2
   14190:	d002      	beq.n	14198 <_ZN11Diagnostics12troubleshootEhb+0x190>
   14192:	78fb      	ldrb	r3, [r7, #3]
   14194:	2b0b      	cmp	r3, #11
   14196:	d102      	bne.n	1419e <_ZN11Diagnostics12troubleshootEhb+0x196>
      _printSupportLink();
   14198:	6878      	ldr	r0, [r7, #4]
   1419a:	4b1e      	ldr	r3, [pc, #120]	; (14214 <_ZN11Diagnostics12troubleshootEhb+0x20c>)
   1419c:	4798      	blx	r3
    }
  #endif
  }
}
   1419e:	bf00      	nop
   141a0:	3710      	adds	r7, #16
   141a2:	46bd      	mov	sp, r7
   141a4:	bd80      	pop	{r7, pc}
   141a6:	bf00      	nop
   141a8:	00020804 	.word	0x00020804
   141ac:	2000a258 	.word	0x2000a258
   141b0:	00017841 	.word	0x00017841
   141b4:	00020824 	.word	0x00020824
   141b8:	00020858 	.word	0x00020858
   141bc:	00020898 	.word	0x00020898
   141c0:	000208d8 	.word	0x000208d8
   141c4:	00020970 	.word	0x00020970
   141c8:	00020980 	.word	0x00020980
   141cc:	000209b0 	.word	0x000209b0
   141d0:	000209fc 	.word	0x000209fc
   141d4:	00020a20 	.word	0x00020a20
   141d8:	00020a64 	.word	0x00020a64
   141dc:	00020a88 	.word	0x00020a88
   141e0:	00020ac4 	.word	0x00020ac4
   141e4:	00020b14 	.word	0x00020b14
   141e8:	00020b54 	.word	0x00020b54
   141ec:	00020b78 	.word	0x00020b78
   141f0:	00020ba0 	.word	0x00020ba0
   141f4:	00020bc4 	.word	0x00020bc4
   141f8:	00020bec 	.word	0x00020bec
   141fc:	00020c10 	.word	0x00020c10
   14200:	00020c38 	.word	0x00020c38
   14204:	00020c84 	.word	0x00020c84
   14208:	00020cd4 	.word	0x00020cd4
   1420c:	00020d24 	.word	0x00020d24
   14210:	00020d58 	.word	0x00020d58
   14214:	00014219 	.word	0x00014219

00014218 <_ZN11Diagnostics17_printSupportLinkEv>:
		usb.print(F("0"));
	}
	usb.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
   14218:	b580      	push	{r7, lr}
   1421a:	b082      	sub	sp, #8
   1421c:	af00      	add	r7, sp, #0
   1421e:	6078      	str	r0, [r7, #4]
	usb.print(F("If this does not help resolve/clarify this issue, "));
   14220:	4905      	ldr	r1, [pc, #20]	; (14238 <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
   14222:	4806      	ldr	r0, [pc, #24]	; (1423c <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   14224:	4b06      	ldr	r3, [pc, #24]	; (14240 <_ZN11Diagnostics17_printSupportLinkEv+0x28>)
   14226:	4798      	blx	r3
	usb.println(F("please raise an issue at http://www.hs2-engineering.de/index.php/contact.html with the details of what your were doing when this error occurred"));
   14228:	4906      	ldr	r1, [pc, #24]	; (14244 <_ZN11Diagnostics17_printSupportLinkEv+0x2c>)
   1422a:	4804      	ldr	r0, [pc, #16]	; (1423c <_ZN11Diagnostics17_printSupportLinkEv+0x24>)
   1422c:	4b06      	ldr	r3, [pc, #24]	; (14248 <_ZN11Diagnostics17_printSupportLinkEv+0x30>)
   1422e:	4798      	blx	r3
}
   14230:	bf00      	nop
   14232:	3708      	adds	r7, #8
   14234:	46bd      	mov	sp, r7
   14236:	bd80      	pop	{r7, pc}
   14238:	00020d7c 	.word	0x00020d7c
   1423c:	2000a258 	.word	0x2000a258
   14240:	00017795 	.word	0x00017795
   14244:	00020db0 	.word	0x00020db0
   14248:	00017841 	.word	0x00017841

0001424c <_Z41__static_initialization_and_destruction_0ii>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
   1424c:	b580      	push	{r7, lr}
   1424e:	b082      	sub	sp, #8
   14250:	af00      	add	r7, sp, #0
   14252:	6078      	str	r0, [r7, #4]
   14254:	6039      	str	r1, [r7, #0]
   14256:	687b      	ldr	r3, [r7, #4]
   14258:	2b01      	cmp	r3, #1
   1425a:	d10c      	bne.n	14276 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1425c:	683b      	ldr	r3, [r7, #0]
   1425e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14262:	4293      	cmp	r3, r2
   14264:	d107      	bne.n	14276 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   14266:	4806      	ldr	r0, [pc, #24]	; (14280 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14268:	4b06      	ldr	r3, [pc, #24]	; (14284 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1426a:	4798      	blx	r3
   1426c:	4a06      	ldr	r2, [pc, #24]	; (14288 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1426e:	4907      	ldr	r1, [pc, #28]	; (1428c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   14270:	4803      	ldr	r0, [pc, #12]	; (14280 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14272:	4b07      	ldr	r3, [pc, #28]	; (14290 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   14274:	4798      	blx	r3
   14276:	bf00      	nop
   14278:	3708      	adds	r7, #8
   1427a:	46bd      	mov	sp, r7
   1427c:	bd80      	pop	{r7, pc}
   1427e:	bf00      	nop
   14280:	200091b0 	.word	0x200091b0
   14284:	00013fe1 	.word	0x00013fe1
   14288:	20000000 	.word	0x20000000
   1428c:	00013ff5 	.word	0x00013ff5
   14290:	00018bf5 	.word	0x00018bf5

00014294 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb>:
   14294:	b580      	push	{r7, lr}
   14296:	af00      	add	r7, sp, #0
   14298:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1429c:	2001      	movs	r0, #1
   1429e:	4b01      	ldr	r3, [pc, #4]	; (142a4 <_GLOBAL__sub_I__ZN11Diagnostics12troubleshootEhb+0x10>)
   142a0:	4798      	blx	r3
   142a2:	bd80      	pop	{r7, pc}
   142a4:	0001424d 	.word	0x0001424d

000142a8 <_ZL14EventTimerTaskPK10timer_task>:
#define CHECK_EVENT_PERIOD 50
#endif
const tick_t	forever = 0x7fffffff;
EventHandler_Class	*ptrEventHandlerClass;

static void	EventTimerTask(const struct timer_task *const timer_task){
   142a8:	b480      	push	{r7}
   142aa:	b083      	sub	sp, #12
   142ac:	af00      	add	r7, sp, #0
   142ae:	6078      	str	r0, [r7, #4]
	ptrEventHandlerClass->eventTimeout=true;
   142b0:	4b04      	ldr	r3, [pc, #16]	; (142c4 <_ZL14EventTimerTaskPK10timer_task+0x1c>)
   142b2:	681b      	ldr	r3, [r3, #0]
   142b4:	2201      	movs	r2, #1
   142b6:	741a      	strb	r2, [r3, #16]
}
   142b8:	bf00      	nop
   142ba:	370c      	adds	r7, #12
   142bc:	46bd      	mov	sp, r7
   142be:	bc80      	pop	{r7}
   142c0:	4770      	bx	lr
   142c2:	bf00      	nop
   142c4:	200099b8 	.word	0x200099b8

000142c8 <_ZL15EventTimerTicksPK10timer_task>:

static void EventTimerTicks(const struct timer_task *const timer_task)
{
   142c8:	b480      	push	{r7}
   142ca:	b083      	sub	sp, #12
   142cc:	af00      	add	r7, sp, #0
   142ce:	6078      	str	r0, [r7, #4]
	eventTimer.ticks++;
   142d0:	4b04      	ldr	r3, [pc, #16]	; (142e4 <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   142d2:	689b      	ldr	r3, [r3, #8]
   142d4:	3301      	adds	r3, #1
   142d6:	4a03      	ldr	r2, [pc, #12]	; (142e4 <_ZL15EventTimerTicksPK10timer_task+0x1c>)
   142d8:	6093      	str	r3, [r2, #8]
}
   142da:	bf00      	nop
   142dc:	370c      	adds	r7, #12
   142de:	46bd      	mov	sp, r7
   142e0:	bc80      	pop	{r7}
   142e2:	4770      	bx	lr
   142e4:	2000a1e4 	.word	0x2000a1e4

000142e8 <_ZN18EventHandler_ClassC1Ev>:

// default constructor
EventHandler_Class::EventHandler_Class()
   142e8:	b580      	push	{r7, lr}
   142ea:	b082      	sub	sp, #8
   142ec:	af00      	add	r7, sp, #0
   142ee:	6078      	str	r0, [r7, #4]
   142f0:	687b      	ldr	r3, [r7, #4]
   142f2:	4618      	mov	r0, r3
   142f4:	4b06      	ldr	r3, [pc, #24]	; (14310 <_ZN18EventHandler_ClassC1Ev+0x28>)
   142f6:	4798      	blx	r3
{
	ptrEventHandlerClass=this;
   142f8:	4a06      	ldr	r2, [pc, #24]	; (14314 <_ZN18EventHandler_ClassC1Ev+0x2c>)
   142fa:	687b      	ldr	r3, [r7, #4]
   142fc:	6013      	str	r3, [r2, #0]
	eventQueue = eventStorage;
   142fe:	687b      	ldr	r3, [r7, #4]
   14300:	4a05      	ldr	r2, [pc, #20]	; (14318 <_ZN18EventHandler_ClassC1Ev+0x30>)
   14302:	631a      	str	r2, [r3, #48]	; 0x30
} //EventHandler_Class
   14304:	687b      	ldr	r3, [r7, #4]
   14306:	4618      	mov	r0, r3
   14308:	3708      	adds	r7, #8
   1430a:	46bd      	mov	sp, r7
   1430c:	bd80      	pop	{r7, pc}
   1430e:	bf00      	nop
   14310:	000003c5 	.word	0x000003c5
   14314:	200099b8 	.word	0x200099b8
   14318:	200091b4 	.word	0x200091b4

0001431c <_ZN18EventHandler_ClassD1Ev>:

// default destructor
EventHandler_Class::~EventHandler_Class()
   1431c:	b480      	push	{r7}
   1431e:	b083      	sub	sp, #12
   14320:	af00      	add	r7, sp, #0
   14322:	6078      	str	r0, [r7, #4]
{
	ptrEventHandlerClass=this;
   14324:	4a04      	ldr	r2, [pc, #16]	; (14338 <_ZN18EventHandler_ClassD1Ev+0x1c>)
   14326:	687b      	ldr	r3, [r7, #4]
   14328:	6013      	str	r3, [r2, #0]
} //~EventHandler_Class
   1432a:	687b      	ldr	r3, [r7, #4]
   1432c:	4618      	mov	r0, r3
   1432e:	370c      	adds	r7, #12
   14330:	46bd      	mov	sp, r7
   14332:	bc80      	pop	{r7}
   14334:	4770      	bx	lr
   14336:	bf00      	nop
   14338:	200099b8 	.word	0x200099b8

0001433c <_ZN18EventHandler_Class4InitEv>:



bool EventHandler_Class::Init(void)
{
   1433c:	b580      	push	{r7, lr}
   1433e:	b084      	sub	sp, #16
   14340:	af00      	add	r7, sp, #0
   14342:	6078      	str	r0, [r7, #4]
	int16	i;
	eventTimeout=false;
   14344:	687b      	ldr	r3, [r7, #4]
   14346:	2200      	movs	r2, #0
   14348:	741a      	strb	r2, [r3, #16]
	eventsInUse=0;
   1434a:	687b      	ldr	r3, [r7, #4]
   1434c:	2200      	movs	r2, #0
   1434e:	61da      	str	r2, [r3, #28]
	eventsInUsePeak=0;
   14350:	687b      	ldr	r3, [r7, #4]
   14352:	2200      	movs	r2, #0
   14354:	621a      	str	r2, [r3, #32]
	eventCollisions=0;
   14356:	687b      	ldr	r3, [r7, #4]
   14358:	2200      	movs	r2, #0
   1435a:	625a      	str	r2, [r3, #36]	; 0x24
	eventEvalCollisions=0;
   1435c:	687b      	ldr	r3, [r7, #4]
   1435e:	2200      	movs	r2, #0
   14360:	629a      	str	r2, [r3, #40]	; 0x28
	eventQueueUnderflow=0;
   14362:	687b      	ldr	r3, [r7, #4]
   14364:	2200      	movs	r2, #0
   14366:	62da      	str	r2, [r3, #44]	; 0x2c

	usb << "initializeEvents\r";

	#endif

	for (i=1; i<sizeOfEventQueue; i++)
   14368:	2301      	movs	r3, #1
   1436a:	81fb      	strh	r3, [r7, #14]
   1436c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14370:	2b7f      	cmp	r3, #127	; 0x7f
   14372:	dc1b      	bgt.n	143ac <_ZN18EventHandler_Class4InitEv+0x70>
	{
		eventStorage[i].next = (event*)NULL;
   14374:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14378:	4a15      	ldr	r2, [pc, #84]	; (143d0 <_ZN18EventHandler_Class4InitEv+0x94>)
   1437a:	011b      	lsls	r3, r3, #4
   1437c:	4413      	add	r3, r2
   1437e:	330c      	adds	r3, #12
   14380:	2200      	movs	r2, #0
   14382:	601a      	str	r2, [r3, #0]
		eventStorage[i-1].next = &eventStorage[i];
   14384:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   14388:	3b01      	subs	r3, #1
   1438a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
   1438e:	0112      	lsls	r2, r2, #4
   14390:	490f      	ldr	r1, [pc, #60]	; (143d0 <_ZN18EventHandler_Class4InitEv+0x94>)
   14392:	440a      	add	r2, r1
   14394:	490e      	ldr	r1, [pc, #56]	; (143d0 <_ZN18EventHandler_Class4InitEv+0x94>)
   14396:	011b      	lsls	r3, r3, #4
   14398:	440b      	add	r3, r1
   1439a:	330c      	adds	r3, #12
   1439c:	601a      	str	r2, [r3, #0]
	for (i=1; i<sizeOfEventQueue; i++)
   1439e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   143a2:	b29b      	uxth	r3, r3
   143a4:	3301      	adds	r3, #1
   143a6:	b29b      	uxth	r3, r3
   143a8:	81fb      	strh	r3, [r7, #14]
   143aa:	e7df      	b.n	1436c <_ZN18EventHandler_Class4InitEv+0x30>
	}
	isOK=eventTimer.Init();
   143ac:	4809      	ldr	r0, [pc, #36]	; (143d4 <_ZN18EventHandler_Class4InitEv+0x98>)
   143ae:	4b0a      	ldr	r3, [pc, #40]	; (143d8 <_ZN18EventHandler_Class4InitEv+0x9c>)
   143b0:	4798      	blx	r3
   143b2:	4603      	mov	r3, r0
   143b4:	461a      	mov	r2, r3
   143b6:	687b      	ldr	r3, [r7, #4]
   143b8:	761a      	strb	r2, [r3, #24]
	eventTimer.Start_periodic_task(FUNC_PTR(EventTimerTicks),1);
   143ba:	2201      	movs	r2, #1
   143bc:	4907      	ldr	r1, [pc, #28]	; (143dc <_ZN18EventHandler_Class4InitEv+0xa0>)
   143be:	4805      	ldr	r0, [pc, #20]	; (143d4 <_ZN18EventHandler_Class4InitEv+0x98>)
   143c0:	4b07      	ldr	r3, [pc, #28]	; (143e0 <_ZN18EventHandler_Class4InitEv+0xa4>)
   143c2:	4798      	blx	r3
	{
		usb<< "initializeEvents: event #" << i << " == " << (void*)&eventStorage[i] << ", next == " << (void*)eventStorage[i].next << newline;
	}

	#endif
	return (bool)&eventStorage[0];
   143c4:	2301      	movs	r3, #1
}
   143c6:	4618      	mov	r0, r3
   143c8:	3710      	adds	r7, #16
   143ca:	46bd      	mov	sp, r7
   143cc:	bd80      	pop	{r7, pc}
   143ce:	bf00      	nop
   143d0:	200091b4 	.word	0x200091b4
   143d4:	2000a1e4 	.word	0x2000a1e4
   143d8:	00016da9 	.word	0x00016da9
   143dc:	000142c9 	.word	0x000142c9
   143e0:	00016e6d 	.word	0x00016e6d

000143e4 <_ZN18EventHandler_Class12WaitForEventER5eventttl>:
bool	EventHandler_Class::WaitForEvent(event& e, uint16 eventClass, uint16 eventType, tick_t timeout){
   143e4:	b590      	push	{r4, r7, lr}
   143e6:	b087      	sub	sp, #28
   143e8:	af02      	add	r7, sp, #8
   143ea:	60f8      	str	r0, [r7, #12]
   143ec:	60b9      	str	r1, [r7, #8]
   143ee:	4611      	mov	r1, r2
   143f0:	461a      	mov	r2, r3
   143f2:	460b      	mov	r3, r1
   143f4:	80fb      	strh	r3, [r7, #6]
   143f6:	4613      	mov	r3, r2
   143f8:	80bb      	strh	r3, [r7, #4]
	return	WaitForEvent(e,(EventClass)eventClass,(EventType)eventType,timeout);
   143fa:	88b9      	ldrh	r1, [r7, #4]
   143fc:	88fa      	ldrh	r2, [r7, #6]
   143fe:	6a3b      	ldr	r3, [r7, #32]
   14400:	9300      	str	r3, [sp, #0]
   14402:	460b      	mov	r3, r1
   14404:	68b9      	ldr	r1, [r7, #8]
   14406:	68f8      	ldr	r0, [r7, #12]
   14408:	4c03      	ldr	r4, [pc, #12]	; (14418 <_ZN18EventHandler_Class12WaitForEventER5eventttl+0x34>)
   1440a:	47a0      	blx	r4
   1440c:	4603      	mov	r3, r0
}
   1440e:	4618      	mov	r0, r3
   14410:	3714      	adds	r7, #20
   14412:	46bd      	mov	sp, r7
   14414:	bd90      	pop	{r4, r7, pc}
   14416:	bf00      	nop
   14418:	0001441d 	.word	0x0001441d

0001441c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel>:

bool	EventHandler_Class::WaitForEvent(event& e, EventClass eventClass, EventType eventType, tick_t timeout)
{
   1441c:	b590      	push	{r4, r7, lr}
   1441e:	b089      	sub	sp, #36	; 0x24
   14420:	af00      	add	r7, sp, #0
   14422:	60f8      	str	r0, [r7, #12]
   14424:	60b9      	str	r1, [r7, #8]
   14426:	4611      	mov	r1, r2
   14428:	461a      	mov	r2, r3
   1442a:	460b      	mov	r3, r1
   1442c:	80fb      	strh	r3, [r7, #6]
   1442e:	4613      	mov	r3, r2
   14430:	80bb      	strh	r3, [r7, #4]
	bool	result(false);
   14432:	2300      	movs	r3, #0
   14434:	77fb      	strb	r3, [r7, #31]
	event*	queue;
	event*	queuePrev(NULL);
   14436:	2300      	movs	r3, #0
   14438:	617b      	str	r3, [r7, #20]
	eventTimeout=false;
   1443a:	68fb      	ldr	r3, [r7, #12]
   1443c:	2200      	movs	r2, #0
   1443e:	741a      	strb	r2, [r3, #16]

	
	e.eventClass = eventClass;
   14440:	68bb      	ldr	r3, [r7, #8]
   14442:	88fa      	ldrh	r2, [r7, #6]
   14444:	801a      	strh	r2, [r3, #0]
	e.eventType = eventType;
   14446:	68bb      	ldr	r3, [r7, #8]
   14448:	88ba      	ldrh	r2, [r7, #4]
   1444a:	805a      	strh	r2, [r3, #2]

	
	if (timeout != forever){
   1444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1444e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   14452:	4293      	cmp	r3, r2
   14454:	d006      	beq.n	14464 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x48>
		eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,(uint32_t)timeout);
   14456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14458:	461a      	mov	r2, r3
   1445a:	493a      	ldr	r1, [pc, #232]	; (14544 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   1445c:	483a      	ldr	r0, [pc, #232]	; (14548 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   1445e:	4b3b      	ldr	r3, [pc, #236]	; (1454c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   14460:	4798      	blx	r3
   14462:	e004      	b.n	1446e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>

	}else{
		
			eventTimer.Start_oneShot_task((FUNC_PTR)EventTimerTask,CHECK_EVENT_PERIOD);
   14464:	2232      	movs	r2, #50	; 0x32
   14466:	4937      	ldr	r1, [pc, #220]	; (14544 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14468:	4837      	ldr	r0, [pc, #220]	; (14548 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   1446a:	4b38      	ldr	r3, [pc, #224]	; (1454c <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x130>)
   1446c:	4798      	blx	r3
	}

	while (!result && (!eventTimeout))
   1446e:	7ffb      	ldrb	r3, [r7, #31]
   14470:	f083 0301 	eor.w	r3, r3, #1
   14474:	b2db      	uxtb	r3, r3
   14476:	2b00      	cmp	r3, #0
   14478:	d009      	beq.n	1448e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x72>
   1447a:	68fb      	ldr	r3, [r7, #12]
   1447c:	7c1b      	ldrb	r3, [r3, #16]
   1447e:	b2db      	uxtb	r3, r3
   14480:	f083 0301 	eor.w	r3, r3, #1
   14484:	b2db      	uxtb	r3, r3
   14486:	2b00      	cmp	r3, #0
   14488:	d001      	beq.n	1448e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x72>
   1448a:	2301      	movs	r3, #1
   1448c:	e000      	b.n	14490 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x74>
   1448e:	2300      	movs	r3, #0
   14490:	2b00      	cmp	r3, #0
   14492:	d04d      	beq.n	14530 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x114>
	{
		if (eventHandler)
   14494:	68fb      	ldr	r3, [r7, #12]
   14496:	695b      	ldr	r3, [r3, #20]
   14498:	2b00      	cmp	r3, #0
   1449a:	d002      	beq.n	144a2 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x86>
		{
			eventHandler();
   1449c:	68fb      	ldr	r3, [r7, #12]
   1449e:	695b      	ldr	r3, [r3, #20]
   144a0:	4798      	blx	r3
		}

		queue = (event*)mainThreadEventQueue;
   144a2:	4b2b      	ldr	r3, [pc, #172]	; (14550 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   144a4:	681b      	ldr	r3, [r3, #0]
   144a6:	61bb      	str	r3, [r7, #24]

		while (queue)
   144a8:	69bb      	ldr	r3, [r7, #24]
   144aa:	2b00      	cmp	r3, #0
   144ac:	d0df      	beq.n	1446e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x52>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
		
			#endif
			if (((e.eventClass == kAnyEventClass) ||(queue->eventClass == e.eventClass))
   144ae:	68bb      	ldr	r3, [r7, #8]
   144b0:	881b      	ldrh	r3, [r3, #0]
   144b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   144b6:	4293      	cmp	r3, r2
   144b8:	d005      	beq.n	144c6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xaa>
   144ba:	69bb      	ldr	r3, [r7, #24]
   144bc:	881a      	ldrh	r2, [r3, #0]
   144be:	68bb      	ldr	r3, [r7, #8]
   144c0:	881b      	ldrh	r3, [r3, #0]
   144c2:	429a      	cmp	r2, r3
   144c4:	d12e      	bne.n	14524 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x108>
			&& ((e.eventType == kAnyEventType) ||	(queue->eventType == e.eventType)))
   144c6:	68bb      	ldr	r3, [r7, #8]
   144c8:	885b      	ldrh	r3, [r3, #2]
   144ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   144ce:	4293      	cmp	r3, r2
   144d0:	d005      	beq.n	144de <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xc2>
   144d2:	69bb      	ldr	r3, [r7, #24]
   144d4:	885a      	ldrh	r2, [r3, #2]
   144d6:	68bb      	ldr	r3, [r7, #8]
   144d8:	885b      	ldrh	r3, [r3, #2]
   144da:	429a      	cmp	r2, r3
   144dc:	d122      	bne.n	14524 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x108>
			{
				if (queuePrev)
   144de:	697b      	ldr	r3, [r7, #20]
   144e0:	2b00      	cmp	r3, #0
   144e2:	d004      	beq.n	144ee <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xd2>
				{
					queuePrev->next = queue->next;
   144e4:	69bb      	ldr	r3, [r7, #24]
   144e6:	68da      	ldr	r2, [r3, #12]
   144e8:	697b      	ldr	r3, [r7, #20]
   144ea:	60da      	str	r2, [r3, #12]
   144ec:	e003      	b.n	144f6 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0xda>
				}
				else
				{
					mainThreadEventQueue = queue->next;
   144ee:	69bb      	ldr	r3, [r7, #24]
   144f0:	68db      	ldr	r3, [r3, #12]
   144f2:	4a17      	ldr	r2, [pc, #92]	; (14550 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x134>)
   144f4:	6013      	str	r3, [r2, #0]
				}
				
				e = *queue;
   144f6:	68ba      	ldr	r2, [r7, #8]
   144f8:	69bb      	ldr	r3, [r7, #24]
   144fa:	4614      	mov	r4, r2
   144fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   144fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

				queue->next = eventQueue;
   14502:	68fb      	ldr	r3, [r7, #12]
   14504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   14506:	69bb      	ldr	r3, [r7, #24]
   14508:	60da      	str	r2, [r3, #12]
				eventQueue = queue;
   1450a:	68fb      	ldr	r3, [r7, #12]
   1450c:	69ba      	ldr	r2, [r7, #24]
   1450e:	631a      	str	r2, [r3, #48]	; 0x30
				
				eventsInUse--;
   14510:	68fb      	ldr	r3, [r7, #12]
   14512:	69db      	ldr	r3, [r3, #28]
   14514:	1e5a      	subs	r2, r3, #1
   14516:	68fb      	ldr	r3, [r7, #12]
   14518:	61da      	str	r2, [r3, #28]

				queue = NULL;
   1451a:	2300      	movs	r3, #0
   1451c:	61bb      	str	r3, [r7, #24]
				result = true;
   1451e:	2301      	movs	r3, #1
   14520:	77fb      	strb	r3, [r7, #31]
   14522:	e004      	b.n	1452e <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x112>
			}
			else
			{
				queuePrev = queue;
   14524:	69bb      	ldr	r3, [r7, #24]
   14526:	617b      	str	r3, [r7, #20]
				queue = queue->next;
   14528:	69bb      	ldr	r3, [r7, #24]
   1452a:	68db      	ldr	r3, [r3, #12]
   1452c:	61bb      	str	r3, [r7, #24]
		while (queue)
   1452e:	e7bb      	b.n	144a8 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x8c>
			//while (!eventTimeout);
		
		}
		
	}
	eventTimer.Remove_task(FUNC_PTR(EventTimerTask));
   14530:	4904      	ldr	r1, [pc, #16]	; (14544 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x128>)
   14532:	4805      	ldr	r0, [pc, #20]	; (14548 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x12c>)
   14534:	4b07      	ldr	r3, [pc, #28]	; (14554 <_ZN18EventHandler_Class12WaitForEventER5event10EventClass9EventTypel+0x138>)
   14536:	4798      	blx	r3
	//eventTimer.stop();
	return result;
   14538:	7ffb      	ldrb	r3, [r7, #31]
}
   1453a:	4618      	mov	r0, r3
   1453c:	3724      	adds	r7, #36	; 0x24
   1453e:	46bd      	mov	sp, r7
   14540:	bd90      	pop	{r4, r7, pc}
   14542:	bf00      	nop
   14544:	000142a9 	.word	0x000142a9
   14548:	2000a1e4 	.word	0x2000a1e4
   1454c:	00016f51 	.word	0x00016f51
   14550:	200099b4 	.word	0x200099b4
   14554:	00016ee1 	.word	0x00016ee1

00014558 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass>:

bool	EventHandler_Class::IsEventListed(EventType eventType, EventClass eventClass)
{
   14558:	b480      	push	{r7}
   1455a:	b087      	sub	sp, #28
   1455c:	af00      	add	r7, sp, #0
   1455e:	6078      	str	r0, [r7, #4]
   14560:	460b      	mov	r3, r1
   14562:	807b      	strh	r3, [r7, #2]
   14564:	4613      	mov	r3, r2
   14566:	803b      	strh	r3, [r7, #0]
	bool	result(false);
   14568:	2300      	movs	r3, #0
   1456a:	75fb      	strb	r3, [r7, #23]
	event*	queue;
	event*	queuePrev(NULL);
   1456c:	2300      	movs	r3, #0
   1456e:	60fb      	str	r3, [r7, #12]

	if ((eventsInUse==0))
   14570:	687b      	ldr	r3, [r7, #4]
   14572:	69db      	ldr	r3, [r3, #28]
   14574:	2b00      	cmp	r3, #0
   14576:	d102      	bne.n	1457e <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x26>
	{
		result = false;
   14578:	2300      	movs	r3, #0
   1457a:	75fb      	strb	r3, [r7, #23]
   1457c:	e027      	b.n	145ce <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
	}
	else
	{
		queue = (event*)mainThreadEventQueue;
   1457e:	4b17      	ldr	r3, [pc, #92]	; (145dc <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x84>)
   14580:	681b      	ldr	r3, [r3, #0]
   14582:	613b      	str	r3, [r7, #16]
		while (queue)
   14584:	693b      	ldr	r3, [r7, #16]
   14586:	2b00      	cmp	r3, #0
   14588:	d021      	beq.n	145ce <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
			usb << "     queue->class:     " << (uint16)((*queue).eventClass) << newline;
			usb << "     queue->type:      " << (uint16)((*queue).eventType) << newline;
			usb << "     queue->timestamp: " << (uint16)((*queue).timestamp) << newline;
			
			#endif
			if (((eventClass == kAnyEventClass)|(queue->eventClass == eventClass)) && (queue->eventType == eventType))
   1458a:	883b      	ldrh	r3, [r7, #0]
   1458c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14590:	4293      	cmp	r3, r2
   14592:	bf0c      	ite	eq
   14594:	2301      	moveq	r3, #1
   14596:	2300      	movne	r3, #0
   14598:	b2da      	uxtb	r2, r3
   1459a:	693b      	ldr	r3, [r7, #16]
   1459c:	881b      	ldrh	r3, [r3, #0]
   1459e:	8839      	ldrh	r1, [r7, #0]
   145a0:	4299      	cmp	r1, r3
   145a2:	bf0c      	ite	eq
   145a4:	2301      	moveq	r3, #1
   145a6:	2300      	movne	r3, #0
   145a8:	b2db      	uxtb	r3, r3
   145aa:	4313      	orrs	r3, r2
   145ac:	b2db      	uxtb	r3, r3
   145ae:	2b00      	cmp	r3, #0
   145b0:	d007      	beq.n	145c2 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x6a>
   145b2:	693b      	ldr	r3, [r7, #16]
   145b4:	885b      	ldrh	r3, [r3, #2]
   145b6:	887a      	ldrh	r2, [r7, #2]
   145b8:	429a      	cmp	r2, r3
   145ba:	d102      	bne.n	145c2 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x6a>
			{

				result = true;
   145bc:	2301      	movs	r3, #1
   145be:	75fb      	strb	r3, [r7, #23]
				break;
   145c0:	e005      	b.n	145ce <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x76>
			}
			else
			{
				queuePrev = queue;
   145c2:	693b      	ldr	r3, [r7, #16]
   145c4:	60fb      	str	r3, [r7, #12]
				queue = queue->next;
   145c6:	693b      	ldr	r3, [r7, #16]
   145c8:	68db      	ldr	r3, [r3, #12]
   145ca:	613b      	str	r3, [r7, #16]
		while (queue)
   145cc:	e7da      	b.n	14584 <_ZN18EventHandler_Class13IsEventListedE9EventType10EventClass+0x2c>
		
	}

	
	//eventTimer.stop();
	return result;
   145ce:	7dfb      	ldrb	r3, [r7, #23]
}
   145d0:	4618      	mov	r0, r3
   145d2:	371c      	adds	r7, #28
   145d4:	46bd      	mov	sp, r7
   145d6:	bc80      	pop	{r7}
   145d8:	4770      	bx	lr
   145da:	bf00      	nop
   145dc:	200099b4 	.word	0x200099b4

000145e0 <_ZN18EventHandler_Class13SendEventSelfERK5event>:
{
	SendEventSelf(e);
}

void EventHandler_Class::SendEventSelf(const event& e)
{
   145e0:	b580      	push	{r7, lr}
   145e2:	b084      	sub	sp, #16
   145e4:	af00      	add	r7, sp, #0
   145e6:	6078      	str	r0, [r7, #4]
   145e8:	6039      	str	r1, [r7, #0]
	if (IsEventListed(e.eventType,e.eventClass))
   145ea:	683b      	ldr	r3, [r7, #0]
   145ec:	8859      	ldrh	r1, [r3, #2]
   145ee:	683b      	ldr	r3, [r7, #0]
   145f0:	881b      	ldrh	r3, [r3, #0]
   145f2:	461a      	mov	r2, r3
   145f4:	6878      	ldr	r0, [r7, #4]
   145f6:	4b25      	ldr	r3, [pc, #148]	; (1468c <_ZN18EventHandler_Class13SendEventSelfERK5event+0xac>)
   145f8:	4798      	blx	r3
   145fa:	4603      	mov	r3, r0
   145fc:	2b00      	cmp	r3, #0
   145fe:	d140      	bne.n	14682 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa2>
	{
		
	} 
	else
	{
		event*	theEvent(eventQueue);
   14600:	687b      	ldr	r3, [r7, #4]
   14602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14604:	60bb      	str	r3, [r7, #8]
		
		if (theEvent)
   14606:	68bb      	ldr	r3, [r7, #8]
   14608:	2b00      	cmp	r3, #0
   1460a:	d035      	beq.n	14678 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x98>
		{
			eventQueue = eventQueue->next;
   1460c:	687b      	ldr	r3, [r7, #4]
   1460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14610:	68da      	ldr	r2, [r3, #12]
   14612:	687b      	ldr	r3, [r7, #4]
   14614:	631a      	str	r2, [r3, #48]	; 0x30
			theEvent->next = NULL;
   14616:	68bb      	ldr	r3, [r7, #8]
   14618:	2200      	movs	r2, #0
   1461a:	60da      	str	r2, [r3, #12]
			eventsInUse++;
   1461c:	687b      	ldr	r3, [r7, #4]
   1461e:	69db      	ldr	r3, [r3, #28]
   14620:	1c5a      	adds	r2, r3, #1
   14622:	687b      	ldr	r3, [r7, #4]
   14624:	61da      	str	r2, [r3, #28]

			event*	threadQueue((event*)mainThreadEventQueue);
   14626:	4b1a      	ldr	r3, [pc, #104]	; (14690 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb0>)
   14628:	681b      	ldr	r3, [r3, #0]
   1462a:	60fb      	str	r3, [r7, #12]
			if (threadQueue == NULL)
   1462c:	68fb      	ldr	r3, [r7, #12]
   1462e:	2b00      	cmp	r3, #0
   14630:	d103      	bne.n	1463a <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
			mainThreadEventQueue = theEvent;
   14632:	4a17      	ldr	r2, [pc, #92]	; (14690 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb0>)
   14634:	68bb      	ldr	r3, [r7, #8]
   14636:	6013      	str	r3, [r2, #0]
   14638:	e00a      	b.n	14650 <_ZN18EventHandler_Class13SendEventSelfERK5event+0x70>
			else
			{
				while (threadQueue->next)
   1463a:	68fb      	ldr	r3, [r7, #12]
   1463c:	68db      	ldr	r3, [r3, #12]
   1463e:	2b00      	cmp	r3, #0
   14640:	d003      	beq.n	1464a <_ZN18EventHandler_Class13SendEventSelfERK5event+0x6a>
				threadQueue = threadQueue->next;
   14642:	68fb      	ldr	r3, [r7, #12]
   14644:	68db      	ldr	r3, [r3, #12]
   14646:	60fb      	str	r3, [r7, #12]
				while (threadQueue->next)
   14648:	e7f7      	b.n	1463a <_ZN18EventHandler_Class13SendEventSelfERK5event+0x5a>
				threadQueue->next = theEvent;
   1464a:	68fb      	ldr	r3, [r7, #12]
   1464c:	68ba      	ldr	r2, [r7, #8]
   1464e:	60da      	str	r2, [r3, #12]
				usb << "eventsInUsePeak => " << eventsInUsePeak << newline;
				
			}
			#endif

			(*theEvent).eventClass = e.eventClass;
   14650:	683b      	ldr	r3, [r7, #0]
   14652:	881a      	ldrh	r2, [r3, #0]
   14654:	68bb      	ldr	r3, [r7, #8]
   14656:	801a      	strh	r2, [r3, #0]
			(*theEvent).eventType = e.eventType;
   14658:	683b      	ldr	r3, [r7, #0]
   1465a:	885a      	ldrh	r2, [r3, #2]
   1465c:	68bb      	ldr	r3, [r7, #8]
   1465e:	805a      	strh	r2, [r3, #2]
			(*theEvent).data = e.data;
   14660:	68bb      	ldr	r3, [r7, #8]
   14662:	683a      	ldr	r2, [r7, #0]
   14664:	6892      	ldr	r2, [r2, #8]
   14666:	609a      	str	r2, [r3, #8]
			(*theEvent).timestamp = eventTimer.Get_ticks();
   14668:	480a      	ldr	r0, [pc, #40]	; (14694 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb4>)
   1466a:	4b0b      	ldr	r3, [pc, #44]	; (14698 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xb8>)
   1466c:	4798      	blx	r3
   1466e:	4603      	mov	r3, r0
   14670:	461a      	mov	r2, r3
   14672:	68bb      	ldr	r3, [r7, #8]
   14674:	605a      	str	r2, [r3, #4]
	usb << "     class:   " << (uint16)e.eventClass << newline;
	usb << "     type:    " << (uint16)e.eventType << newline;
	
	#endif
	
}
   14676:	e004      	b.n	14682 <_ZN18EventHandler_Class13SendEventSelfERK5event+0xa2>
			eventQueueUnderflow++;
   14678:	687b      	ldr	r3, [r7, #4]
   1467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1467c:	1c5a      	adds	r2, r3, #1
   1467e:	687b      	ldr	r3, [r7, #4]
   14680:	62da      	str	r2, [r3, #44]	; 0x2c
}
   14682:	bf00      	nop
   14684:	3710      	adds	r7, #16
   14686:	46bd      	mov	sp, r7
   14688:	bd80      	pop	{r7, pc}
   1468a:	bf00      	nop
   1468c:	00014559 	.word	0x00014559
   14690:	200099b4 	.word	0x200099b4
   14694:	2000a1e4 	.word	0x2000a1e4
   14698:	00016f39 	.word	0x00016f39

0001469c <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData>:
	
	SendEventSelf(theEvent);
}

void EventHandler_Class::SendErrorSelf(uint16_t et,const eventData& data)
{
   1469c:	b580      	push	{r7, lr}
   1469e:	b088      	sub	sp, #32
   146a0:	af00      	add	r7, sp, #0
   146a2:	60f8      	str	r0, [r7, #12]
   146a4:	460b      	mov	r3, r1
   146a6:	607a      	str	r2, [r7, #4]
   146a8:	817b      	strh	r3, [r7, #10]
	event		theEvent;
   146aa:	f107 0310 	add.w	r3, r7, #16
   146ae:	4618      	mov	r0, r3
   146b0:	4b09      	ldr	r3, [pc, #36]	; (146d8 <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x3c>)
   146b2:	4798      	blx	r3
	theEvent.eventClass = kErrorEventClass;
   146b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   146b8:	823b      	strh	r3, [r7, #16]
	theEvent.eventType =(EventType)et ;
   146ba:	897b      	ldrh	r3, [r7, #10]
   146bc:	827b      	strh	r3, [r7, #18]
	theEvent.data = data;
   146be:	687b      	ldr	r3, [r7, #4]
   146c0:	681b      	ldr	r3, [r3, #0]
   146c2:	61bb      	str	r3, [r7, #24]
	SendEventSelf(theEvent);
   146c4:	f107 0310 	add.w	r3, r7, #16
   146c8:	4619      	mov	r1, r3
   146ca:	68f8      	ldr	r0, [r7, #12]
   146cc:	4b03      	ldr	r3, [pc, #12]	; (146dc <_ZN18EventHandler_Class13SendErrorSelfEtRK9eventData+0x40>)
   146ce:	4798      	blx	r3
}
   146d0:	bf00      	nop
   146d2:	3720      	adds	r7, #32
   146d4:	46bd      	mov	sp, r7
   146d6:	bd80      	pop	{r7, pc}
   146d8:	000003c5 	.word	0x000003c5
   146dc:	000145e1 	.word	0x000145e1

000146e0 <_ZN18EventHandler_Class10CheckEventEv>:
uint32_t EventHandler_Class::CheckEvent(void)
{
   146e0:	b580      	push	{r7, lr}
   146e2:	b08a      	sub	sp, #40	; 0x28
   146e4:	af00      	add	r7, sp, #0
   146e6:	6078      	str	r0, [r7, #4]
	
	float	temperatureSMPST = 0.0;	//stores temp value for fan off function
   146e8:	f04f 0300 	mov.w	r3, #0
   146ec:	627b      	str	r3, [r7, #36]	; 0x24
	float 	temperatureExhaust = 0.0;
   146ee:	f04f 0300 	mov.w	r3, #0
   146f2:	623b      	str	r3, [r7, #32]
	float	temperatureMagnetron = 0.0;
   146f4:	f04f 0300 	mov.w	r3, #0
   146f8:	61fb      	str	r3, [r7, #28]

	
	#if __DEBUG__ > 4
	usb<< "checkEvent" << newline;
	#endif
	event	e;
   146fa:	f107 030c 	add.w	r3, r7, #12
   146fe:	4618      	mov	r0, r3
   14700:	4b03      	ldr	r3, [pc, #12]	; (14710 <_ZN18EventHandler_Class10CheckEventEv+0x30>)
   14702:	4798      	blx	r3
	//Alive beacon function: i2cAlive is reset by a successful coreI2Cread to true and checked here.
	//If coreI2Cread was unsuccessful I2C is reseted



	return	(uint32_t)eventsInUse;
   14704:	687b      	ldr	r3, [r7, #4]
   14706:	69db      	ldr	r3, [r3, #28]
	
}
   14708:	4618      	mov	r0, r3
   1470a:	3728      	adds	r7, #40	; 0x28
   1470c:	46bd      	mov	sp, r7
   1470e:	bd80      	pop	{r7, pc}
   14710:	000003c5 	.word	0x000003c5

00014714 <_Z41__static_initialization_and_destruction_0ii>:

	EventHandler_Class	listener;
   14714:	b5b0      	push	{r4, r5, r7, lr}
   14716:	b082      	sub	sp, #8
   14718:	af00      	add	r7, sp, #0
   1471a:	6078      	str	r0, [r7, #4]
   1471c:	6039      	str	r1, [r7, #0]
   1471e:	687b      	ldr	r3, [r7, #4]
   14720:	2b01      	cmp	r3, #1
   14722:	d117      	bne.n	14754 <_Z41__static_initialization_and_destruction_0ii+0x40>
   14724:	683b      	ldr	r3, [r7, #0]
   14726:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1472a:	4293      	cmp	r3, r2
   1472c:	d112      	bne.n	14754 <_Z41__static_initialization_and_destruction_0ii+0x40>
static event	eventStorage[EVENT_QUEUE_BUFFER];
   1472e:	4b0b      	ldr	r3, [pc, #44]	; (1475c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   14730:	247f      	movs	r4, #127	; 0x7f
   14732:	461d      	mov	r5, r3
   14734:	2c00      	cmp	r4, #0
   14736:	db05      	blt.n	14744 <_Z41__static_initialization_and_destruction_0ii+0x30>
   14738:	4628      	mov	r0, r5
   1473a:	4b09      	ldr	r3, [pc, #36]	; (14760 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   1473c:	4798      	blx	r3
   1473e:	3510      	adds	r5, #16
   14740:	3c01      	subs	r4, #1
   14742:	e7f7      	b.n	14734 <_Z41__static_initialization_and_destruction_0ii+0x20>
	EventHandler_Class	listener;
   14744:	4807      	ldr	r0, [pc, #28]	; (14764 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   14746:	4b08      	ldr	r3, [pc, #32]	; (14768 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   14748:	4798      	blx	r3
   1474a:	4a08      	ldr	r2, [pc, #32]	; (1476c <_Z41__static_initialization_and_destruction_0ii+0x58>)
   1474c:	4908      	ldr	r1, [pc, #32]	; (14770 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1474e:	4805      	ldr	r0, [pc, #20]	; (14764 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   14750:	4b08      	ldr	r3, [pc, #32]	; (14774 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   14752:	4798      	blx	r3
   14754:	bf00      	nop
   14756:	3708      	adds	r7, #8
   14758:	46bd      	mov	sp, r7
   1475a:	bdb0      	pop	{r4, r5, r7, pc}
   1475c:	200091b4 	.word	0x200091b4
   14760:	000003c5 	.word	0x000003c5
   14764:	200099c8 	.word	0x200099c8
   14768:	000142e9 	.word	0x000142e9
   1476c:	20000000 	.word	0x20000000
   14770:	0001431d 	.word	0x0001431d
   14774:	00018bf5 	.word	0x00018bf5

00014778 <_GLOBAL__sub_I_maxEventCount>:
   14778:	b580      	push	{r7, lr}
   1477a:	af00      	add	r7, sp, #0
   1477c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14780:	2001      	movs	r0, #1
   14782:	4b01      	ldr	r3, [pc, #4]	; (14788 <_GLOBAL__sub_I_maxEventCount+0x10>)
   14784:	4798      	blx	r3
   14786:	bd80      	pop	{r7, pc}
   14788:	00014715 	.word	0x00014715

0001478c <_ZL23GetRelativeClassPointerP16i2c_m_async_desc>:

I2C_Asyn_Class	*ptrI2C_Asyn_Class;
//static list_descriptor i2cList=NULL;
//i2cList=NULL;
list_descriptor i2cList;
static void GetRelativeClassPointer(i2c_m_async_desc*  i2c){
   1478c:	b580      	push	{r7, lr}
   1478e:	b084      	sub	sp, #16
   14790:	af00      	add	r7, sp, #0
   14792:	6078      	str	r0, [r7, #4]
	uint32_t  *ptr=(uint32_t*)ptrI2C_Asyn_Class->GetClassPointer(i2c);;
   14794:	4b08      	ldr	r3, [pc, #32]	; (147b8 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   14796:	681b      	ldr	r3, [r3, #0]
   14798:	6879      	ldr	r1, [r7, #4]
   1479a:	4618      	mov	r0, r3
   1479c:	4b07      	ldr	r3, [pc, #28]	; (147bc <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x30>)
   1479e:	4798      	blx	r3
   147a0:	4603      	mov	r3, r0
   147a2:	60fb      	str	r3, [r7, #12]
	I2C_Asyn_Class	*ptrClass=(I2C_Asyn_Class*)ptr;
   147a4:	68fb      	ldr	r3, [r7, #12]
   147a6:	60bb      	str	r3, [r7, #8]
	ptrI2C_Asyn_Class=ptrClass;
   147a8:	4a03      	ldr	r2, [pc, #12]	; (147b8 <_ZL23GetRelativeClassPointerP16i2c_m_async_desc+0x2c>)
   147aa:	68bb      	ldr	r3, [r7, #8]
   147ac:	6013      	str	r3, [r2, #0]
}
   147ae:	bf00      	nop
   147b0:	3710      	adds	r7, #16
   147b2:	46bd      	mov	sp, r7
   147b4:	bd80      	pop	{r7, pc}
   147b6:	bf00      	nop
   147b8:	20009afc 	.word	0x20009afc
   147bc:	00014be5 	.word	0x00014be5

000147c0 <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
   147c0:	b580      	push	{r7, lr}
   147c2:	b082      	sub	sp, #8
   147c4:	af00      	add	r7, sp, #0
   147c6:	6078      	str	r0, [r7, #4]
	
	GetRelativeClassPointer(i2c);
   147c8:	6878      	ldr	r0, [r7, #4]
   147ca:	4b05      	ldr	r3, [pc, #20]	; (147e0 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x20>)
   147cc:	4798      	blx	r3
	ptrI2C_Asyn_Class->txReady=true;
   147ce:	4b05      	ldr	r3, [pc, #20]	; (147e4 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x24>)
   147d0:	681b      	ldr	r3, [r3, #0]
   147d2:	2201      	movs	r2, #1
   147d4:	751a      	strb	r2, [r3, #20]


}
   147d6:	bf00      	nop
   147d8:	3708      	adds	r7, #8
   147da:	46bd      	mov	sp, r7
   147dc:	bd80      	pop	{r7, pc}
   147de:	bf00      	nop
   147e0:	0001478d 	.word	0x0001478d
   147e4:	20009afc 	.word	0x20009afc

000147e8 <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
   147e8:	b580      	push	{r7, lr}
   147ea:	b082      	sub	sp, #8
   147ec:	af00      	add	r7, sp, #0
   147ee:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   147f0:	6878      	ldr	r0, [r7, #4]
   147f2:	4b05      	ldr	r3, [pc, #20]	; (14808 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x20>)
   147f4:	4798      	blx	r3
	ptrI2C_Asyn_Class->rxReady=true;
   147f6:	4b05      	ldr	r3, [pc, #20]	; (1480c <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x24>)
   147f8:	681b      	ldr	r3, [r3, #0]
   147fa:	2201      	movs	r2, #1
   147fc:	755a      	strb	r2, [r3, #21]
}
   147fe:	bf00      	nop
   14800:	3708      	adds	r7, #8
   14802:	46bd      	mov	sp, r7
   14804:	bd80      	pop	{r7, pc}
   14806:	bf00      	nop
   14808:	0001478d 	.word	0x0001478d
   1480c:	20009afc 	.word	0x20009afc

00014810 <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
   14810:	b580      	push	{r7, lr}
   14812:	b082      	sub	sp, #8
   14814:	af00      	add	r7, sp, #0
   14816:	6078      	str	r0, [r7, #4]
		GetRelativeClassPointer(i2c);
   14818:	6878      	ldr	r0, [r7, #4]
   1481a:	4b09      	ldr	r3, [pc, #36]	; (14840 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
   1481c:	4798      	blx	r3
		ptrI2C_Asyn_Class->Clear_ack();
   1481e:	4b09      	ldr	r3, [pc, #36]	; (14844 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   14820:	681b      	ldr	r3, [r3, #0]
   14822:	4618      	mov	r0, r3
   14824:	4b08      	ldr	r3, [pc, #32]	; (14848 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x38>)
   14826:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
   14828:	4b06      	ldr	r3, [pc, #24]	; (14844 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   1482a:	681b      	ldr	r3, [r3, #0]
   1482c:	2201      	movs	r2, #1
   1482e:	751a      	strb	r2, [r3, #20]
		ptrI2C_Asyn_Class->rxReady=true;
   14830:	4b04      	ldr	r3, [pc, #16]	; (14844 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x34>)
   14832:	681b      	ldr	r3, [r3, #0]
   14834:	2201      	movs	r2, #1
   14836:	755a      	strb	r2, [r3, #21]
 }
   14838:	bf00      	nop
   1483a:	3708      	adds	r7, #8
   1483c:	46bd      	mov	sp, r7
   1483e:	bd80      	pop	{r7, pc}
   14840:	0001478d 	.word	0x0001478d
   14844:	20009afc 	.word	0x20009afc
   14848:	00014ac9 	.word	0x00014ac9

0001484c <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
   1484c:	b580      	push	{r7, lr}
   1484e:	b082      	sub	sp, #8
   14850:	af00      	add	r7, sp, #0
   14852:	6078      	str	r0, [r7, #4]
   14854:	687b      	ldr	r3, [r7, #4]
   14856:	4618      	mov	r0, r3
   14858:	4b07      	ldr	r3, [pc, #28]	; (14878 <_ZN14I2C_Asyn_ClassC1Ev+0x2c>)
   1485a:	4798      	blx	r3
{
	ptrI2CAsynDescr=&I2C_EXPANDER;
   1485c:	687b      	ldr	r3, [r7, #4]
   1485e:	4a07      	ldr	r2, [pc, #28]	; (1487c <_ZN14I2C_Asyn_ClassC1Ev+0x30>)
   14860:	62da      	str	r2, [r3, #44]	; 0x2c
	ptrClass=this;
   14862:	687b      	ldr	r3, [r7, #4]
   14864:	687a      	ldr	r2, [r7, #4]
   14866:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   14868:	4a05      	ldr	r2, [pc, #20]	; (14880 <_ZN14I2C_Asyn_ClassC1Ev+0x34>)
   1486a:	687b      	ldr	r3, [r7, #4]
   1486c:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
   1486e:	687b      	ldr	r3, [r7, #4]
   14870:	4618      	mov	r0, r3
   14872:	3708      	adds	r7, #8
   14874:	46bd      	mov	sp, r7
   14876:	bd80      	pop	{r7, pc}
   14878:	00014afd 	.word	0x00014afd
   1487c:	2000a644 	.word	0x2000a644
   14880:	20009afc 	.word	0x20009afc

00014884 <_ZN14I2C_Asyn_ClassC1EP16i2c_m_async_desc>:
// default constructor
I2C_Asyn_Class::I2C_Asyn_Class(i2c_m_async_desc *i2c_a)
   14884:	b580      	push	{r7, lr}
   14886:	b082      	sub	sp, #8
   14888:	af00      	add	r7, sp, #0
   1488a:	6078      	str	r0, [r7, #4]
   1488c:	6039      	str	r1, [r7, #0]
   1488e:	687b      	ldr	r3, [r7, #4]
   14890:	4618      	mov	r0, r3
   14892:	4b0b      	ldr	r3, [pc, #44]	; (148c0 <_ZN14I2C_Asyn_ClassC1EP16i2c_m_async_desc+0x3c>)
   14894:	4798      	blx	r3
{
	ptrI2CAsynDescr=i2c_a;
   14896:	687b      	ldr	r3, [r7, #4]
   14898:	683a      	ldr	r2, [r7, #0]
   1489a:	62da      	str	r2, [r3, #44]	; 0x2c
	ptrClass=this;
   1489c:	687b      	ldr	r3, [r7, #4]
   1489e:	687a      	ldr	r2, [r7, #4]
   148a0:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   148a2:	4a08      	ldr	r2, [pc, #32]	; (148c4 <_ZN14I2C_Asyn_ClassC1EP16i2c_m_async_desc+0x40>)
   148a4:	687b      	ldr	r3, [r7, #4]
   148a6:	6013      	str	r3, [r2, #0]
	isOK=false;
   148a8:	687b      	ldr	r3, [r7, #4]
   148aa:	2200      	movs	r2, #0
   148ac:	761a      	strb	r2, [r3, #24]
	initiated=false;
   148ae:	687b      	ldr	r3, [r7, #4]
   148b0:	2200      	movs	r2, #0
   148b2:	759a      	strb	r2, [r3, #22]
} //I2C_Asyn_Class
   148b4:	687b      	ldr	r3, [r7, #4]
   148b6:	4618      	mov	r0, r3
   148b8:	3708      	adds	r7, #8
   148ba:	46bd      	mov	sp, r7
   148bc:	bd80      	pop	{r7, pc}
   148be:	bf00      	nop
   148c0:	00014afd 	.word	0x00014afd
   148c4:	20009afc 	.word	0x20009afc

000148c8 <_ZN14I2C_Asyn_ClassD1Ev>:

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
   148c8:	b580      	push	{r7, lr}
   148ca:	b082      	sub	sp, #8
   148cc:	af00      	add	r7, sp, #0
   148ce:	6078      	str	r0, [r7, #4]
   148d0:	687b      	ldr	r3, [r7, #4]
   148d2:	4618      	mov	r0, r3
   148d4:	4b03      	ldr	r3, [pc, #12]	; (148e4 <_ZN14I2C_Asyn_ClassD1Ev+0x1c>)
   148d6:	4798      	blx	r3
{

} //~I2C_Asyn_Class
   148d8:	687b      	ldr	r3, [r7, #4]
   148da:	4618      	mov	r0, r3
   148dc:	3708      	adds	r7, #8
   148de:	46bd      	mov	sp, r7
   148e0:	bd80      	pop	{r7, pc}
   148e2:	bf00      	nop
   148e4:	00014b1d 	.word	0x00014b1d

000148e8 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
   148e8:	b480      	push	{r7}
   148ea:	b083      	sub	sp, #12
   148ec:	af00      	add	r7, sp, #0
   148ee:	6078      	str	r0, [r7, #4]
   148f0:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
   148f2:	687b      	ldr	r3, [r7, #4]
   148f4:	683a      	ldr	r2, [r7, #0]
   148f6:	62da      	str	r2, [r3, #44]	; 0x2c
	ptrClass=this;
   148f8:	687b      	ldr	r3, [r7, #4]
   148fa:	687a      	ldr	r2, [r7, #4]
   148fc:	61da      	str	r2, [r3, #28]
	ptrI2C_Asyn_Class=this;
   148fe:	4a04      	ldr	r2, [pc, #16]	; (14910 <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x28>)
   14900:	687b      	ldr	r3, [r7, #4]
   14902:	6013      	str	r3, [r2, #0]
}
   14904:	bf00      	nop
   14906:	370c      	adds	r7, #12
   14908:	46bd      	mov	sp, r7
   1490a:	bc80      	pop	{r7}
   1490c:	4770      	bx	lr
   1490e:	bf00      	nop
   14910:	20009afc 	.word	0x20009afc

00014914 <_ZN14I2C_Asyn_Class4InitEv>:

bool	I2C_Asyn_Class::Init(void){
   14914:	b580      	push	{r7, lr}
   14916:	b084      	sub	sp, #16
   14918:	af00      	add	r7, sp, #0
   1491a:	6078      	str	r0, [r7, #4]
	txBuffer=txStaticBuffer;
   1491c:	687b      	ldr	r3, [r7, #4]
   1491e:	4a2c      	ldr	r2, [pc, #176]	; (149d0 <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   14920:	621a      	str	r2, [r3, #32]
	rxBuffer=txStaticBuffer;
   14922:	687b      	ldr	r3, [r7, #4]
   14924:	4a2a      	ldr	r2, [pc, #168]	; (149d0 <_ZN14I2C_Asyn_Class4InitEv+0xbc>)
   14926:	625a      	str	r2, [r3, #36]	; 0x24

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
   14928:	687b      	ldr	r3, [r7, #4]
   1492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1492c:	687b      	ldr	r3, [r7, #4]
   1492e:	3328      	adds	r3, #40	; 0x28
   14930:	4619      	mov	r1, r3
   14932:	4610      	mov	r0, r2
   14934:	4b27      	ldr	r3, [pc, #156]	; (149d4 <_ZN14I2C_Asyn_Class4InitEv+0xc0>)
   14936:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
   14938:	687b      	ldr	r3, [r7, #4]
   1493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1493c:	4618      	mov	r0, r3
   1493e:	4b26      	ldr	r3, [pc, #152]	; (149d8 <_ZN14I2C_Asyn_Class4InitEv+0xc4>)
   14940:	4798      	blx	r3
   14942:	4603      	mov	r3, r0
   14944:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
   14946:	687b      	ldr	r3, [r7, #4]
   14948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1494a:	4a24      	ldr	r2, [pc, #144]	; (149dc <_ZN14I2C_Asyn_Class4InitEv+0xc8>)
   1494c:	2101      	movs	r1, #1
   1494e:	4618      	mov	r0, r3
   14950:	4b23      	ldr	r3, [pc, #140]	; (149e0 <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   14952:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
   14954:	687b      	ldr	r3, [r7, #4]
   14956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14958:	4a22      	ldr	r2, [pc, #136]	; (149e4 <_ZN14I2C_Asyn_Class4InitEv+0xd0>)
   1495a:	2102      	movs	r1, #2
   1495c:	4618      	mov	r0, r3
   1495e:	4b20      	ldr	r3, [pc, #128]	; (149e0 <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   14960:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
   14962:	687b      	ldr	r3, [r7, #4]
   14964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14966:	4a20      	ldr	r2, [pc, #128]	; (149e8 <_ZN14I2C_Asyn_Class4InitEv+0xd4>)
   14968:	2100      	movs	r1, #0
   1496a:	4618      	mov	r0, r3
   1496c:	4b1c      	ldr	r3, [pc, #112]	; (149e0 <_ZN14I2C_Asyn_Class4InitEv+0xcc>)
   1496e:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	coupleKey.ptrI2CAsynClass=(uint32_t)ptrClass;
   14970:	687b      	ldr	r3, [r7, #4]
   14972:	69db      	ldr	r3, [r3, #28]
   14974:	461a      	mov	r2, r3
   14976:	687b      	ldr	r3, [r7, #4]
   14978:	641a      	str	r2, [r3, #64]	; 0x40
	coupleKey.i2cDescr=ptrI2CAsynDescr;
   1497a:	687b      	ldr	r3, [r7, #4]
   1497c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1497e:	687b      	ldr	r3, [r7, #4]
   14980:	63da      	str	r2, [r3, #60]	; 0x3c
	coupleKey.dummy=(uint32_t)ptrClass;
   14982:	687b      	ldr	r3, [r7, #4]
   14984:	69db      	ldr	r3, [r3, #28]
   14986:	461a      	mov	r2, r3
   14988:	687b      	ldr	r3, [r7, #4]
   1498a:	639a      	str	r2, [r3, #56]	; 0x38
	AddI2CObject(coupleKey);
   1498c:	687a      	ldr	r2, [r7, #4]
   1498e:	687b      	ldr	r3, [r7, #4]
   14990:	3334      	adds	r3, #52	; 0x34
   14992:	4619      	mov	r1, r3
   14994:	4610      	mov	r0, r2
   14996:	4b15      	ldr	r3, [pc, #84]	; (149ec <_ZN14I2C_Asyn_Class4InitEv+0xd8>)
   14998:	4798      	blx	r3
	txReady=true;
   1499a:	687b      	ldr	r3, [r7, #4]
   1499c:	2201      	movs	r2, #1
   1499e:	751a      	strb	r2, [r3, #20]
	rxReady=true;
   149a0:	687b      	ldr	r3, [r7, #4]
   149a2:	2201      	movs	r2, #1
   149a4:	755a      	strb	r2, [r3, #21]
	isOK=ena==0;
   149a6:	7bfb      	ldrb	r3, [r7, #15]
   149a8:	2b00      	cmp	r3, #0
   149aa:	bf0c      	ite	eq
   149ac:	2301      	moveq	r3, #1
   149ae:	2300      	movne	r3, #0
   149b0:	b2da      	uxtb	r2, r3
   149b2:	687b      	ldr	r3, [r7, #4]
   149b4:	761a      	strb	r2, [r3, #24]
	initiated=isOK;
   149b6:	687b      	ldr	r3, [r7, #4]
   149b8:	7e1b      	ldrb	r3, [r3, #24]
   149ba:	b2da      	uxtb	r2, r3
   149bc:	687b      	ldr	r3, [r7, #4]
   149be:	759a      	strb	r2, [r3, #22]
	return isOK;
   149c0:	687b      	ldr	r3, [r7, #4]
   149c2:	7e1b      	ldrb	r3, [r3, #24]
   149c4:	b2db      	uxtb	r3, r3
	
}
   149c6:	4618      	mov	r0, r3
   149c8:	3710      	adds	r7, #16
   149ca:	46bd      	mov	sp, r7
   149cc:	bd80      	pop	{r7, pc}
   149ce:	bf00      	nop
   149d0:	200099fc 	.word	0x200099fc
   149d4:	000065d7 	.word	0x000065d7
   149d8:	000064e9 	.word	0x000064e9
   149dc:	000147c1 	.word	0x000147c1
   149e0:	0000658f 	.word	0x0000658f
   149e4:	000147e9 	.word	0x000147e9
   149e8:	00014811 	.word	0x00014811
   149ec:	00014b31 	.word	0x00014b31

000149f0 <_ZN14I2C_Asyn_Class4InitEh>:
bool	I2C_Asyn_Class::Init(uint8_t add){
   149f0:	b580      	push	{r7, lr}
   149f2:	b082      	sub	sp, #8
   149f4:	af00      	add	r7, sp, #0
   149f6:	6078      	str	r0, [r7, #4]
   149f8:	460b      	mov	r3, r1
   149fa:	70fb      	strb	r3, [r7, #3]
	isOK=Init();
   149fc:	6878      	ldr	r0, [r7, #4]
   149fe:	4b0e      	ldr	r3, [pc, #56]	; (14a38 <_ZN14I2C_Asyn_Class4InitEh+0x48>)
   14a00:	4798      	blx	r3
   14a02:	4603      	mov	r3, r0
   14a04:	461a      	mov	r2, r3
   14a06:	687b      	ldr	r3, [r7, #4]
   14a08:	761a      	strb	r2, [r3, #24]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
   14a0a:	687b      	ldr	r3, [r7, #4]
   14a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14a0e:	78fa      	ldrb	r2, [r7, #3]
   14a10:	b211      	sxth	r1, r2
   14a12:	f44f 6200 	mov.w	r2, #2048	; 0x800
   14a16:	4618      	mov	r0, r3
   14a18:	4b08      	ldr	r3, [pc, #32]	; (14a3c <_ZN14I2C_Asyn_Class4InitEh+0x4c>)
   14a1a:	4798      	blx	r3
	txReady=true;
   14a1c:	687b      	ldr	r3, [r7, #4]
   14a1e:	2201      	movs	r2, #1
   14a20:	751a      	strb	r2, [r3, #20]
	rxReady=true;
   14a22:	687b      	ldr	r3, [r7, #4]
   14a24:	2201      	movs	r2, #1
   14a26:	755a      	strb	r2, [r3, #21]
	return isOK;
   14a28:	687b      	ldr	r3, [r7, #4]
   14a2a:	7e1b      	ldrb	r3, [r3, #24]
   14a2c:	b2db      	uxtb	r3, r3
}
   14a2e:	4618      	mov	r0, r3
   14a30:	3708      	adds	r7, #8
   14a32:	46bd      	mov	sp, r7
   14a34:	bd80      	pop	{r7, pc}
   14a36:	bf00      	nop
   14a38:	00014915 	.word	0x00014915
   14a3c:	00006555 	.word	0x00006555

00014a40 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
   14a40:	b580      	push	{r7, lr}
   14a42:	b084      	sub	sp, #16
   14a44:	af00      	add	r7, sp, #0
   14a46:	60f8      	str	r0, [r7, #12]
   14a48:	60b9      	str	r1, [r7, #8]
   14a4a:	4613      	mov	r3, r2
   14a4c:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
   14a4e:	68fb      	ldr	r3, [r7, #12]
   14a50:	7d1b      	ldrb	r3, [r3, #20]
   14a52:	b2db      	uxtb	r3, r3
   14a54:	f083 0301 	eor.w	r3, r3, #1
   14a58:	b2db      	uxtb	r3, r3
   14a5a:	2b00      	cmp	r3, #0
   14a5c:	d000      	beq.n	14a60 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
   14a5e:	e7f6      	b.n	14a4e <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
   14a60:	68fb      	ldr	r3, [r7, #12]
   14a62:	2200      	movs	r2, #0
   14a64:	751a      	strb	r2, [r3, #20]
	return io_write(I2C_io, buffer, lenght);
   14a66:	68fb      	ldr	r3, [r7, #12]
   14a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14a6a:	88fa      	ldrh	r2, [r7, #6]
   14a6c:	68b9      	ldr	r1, [r7, #8]
   14a6e:	4618      	mov	r0, r3
   14a70:	4b03      	ldr	r3, [pc, #12]	; (14a80 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
   14a72:	4798      	blx	r3
   14a74:	4603      	mov	r3, r0
}
   14a76:	4618      	mov	r0, r3
   14a78:	3710      	adds	r7, #16
   14a7a:	46bd      	mov	sp, r7
   14a7c:	bd80      	pop	{r7, pc}
   14a7e:	bf00      	nop
   14a80:	00018b55 	.word	0x00018b55

00014a84 <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
   14a84:	b580      	push	{r7, lr}
   14a86:	b084      	sub	sp, #16
   14a88:	af00      	add	r7, sp, #0
   14a8a:	60f8      	str	r0, [r7, #12]
   14a8c:	60b9      	str	r1, [r7, #8]
   14a8e:	4613      	mov	r3, r2
   14a90:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
   14a92:	68fb      	ldr	r3, [r7, #12]
   14a94:	7d5b      	ldrb	r3, [r3, #21]
   14a96:	b2db      	uxtb	r3, r3
   14a98:	f083 0301 	eor.w	r3, r3, #1
   14a9c:	b2db      	uxtb	r3, r3
   14a9e:	2b00      	cmp	r3, #0
   14aa0:	d000      	beq.n	14aa4 <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
   14aa2:	e7f6      	b.n	14a92 <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
   14aa4:	68fb      	ldr	r3, [r7, #12]
   14aa6:	2200      	movs	r2, #0
   14aa8:	755a      	strb	r2, [r3, #21]
		return io_read(I2C_io, buffer, lenght);
   14aaa:	68fb      	ldr	r3, [r7, #12]
   14aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14aae:	88fa      	ldrh	r2, [r7, #6]
   14ab0:	68b9      	ldr	r1, [r7, #8]
   14ab2:	4618      	mov	r0, r3
   14ab4:	4b03      	ldr	r3, [pc, #12]	; (14ac4 <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
   14ab6:	4798      	blx	r3
   14ab8:	4603      	mov	r3, r0
}
   14aba:	4618      	mov	r0, r3
   14abc:	3710      	adds	r7, #16
   14abe:	46bd      	mov	sp, r7
   14ac0:	bd80      	pop	{r7, pc}
   14ac2:	bf00      	nop
   14ac4:	00018ba5 	.word	0x00018ba5

00014ac8 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
   14ac8:	b480      	push	{r7}
   14aca:	b083      	sub	sp, #12
   14acc:	af00      	add	r7, sp, #0
   14ace:	6078      	str	r0, [r7, #4]
	 ack=false;
   14ad0:	687b      	ldr	r3, [r7, #4]
   14ad2:	2200      	movs	r2, #0
   14ad4:	75da      	strb	r2, [r3, #23]
	 return ack;
   14ad6:	687b      	ldr	r3, [r7, #4]
   14ad8:	7ddb      	ldrb	r3, [r3, #23]
   14ada:	b2db      	uxtb	r3, r3
 }
   14adc:	4618      	mov	r0, r3
   14ade:	370c      	adds	r7, #12
   14ae0:	46bd      	mov	sp, r7
   14ae2:	bc80      	pop	{r7}
   14ae4:	4770      	bx	lr

00014ae6 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
   14ae6:	b480      	push	{r7}
   14ae8:	b083      	sub	sp, #12
   14aea:	af00      	add	r7, sp, #0
   14aec:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
   14aee:	687b      	ldr	r3, [r7, #4]
   14af0:	681b      	ldr	r3, [r3, #0]
}
   14af2:	4618      	mov	r0, r3
   14af4:	370c      	adds	r7, #12
   14af6:	46bd      	mov	sp, r7
   14af8:	bc80      	pop	{r7}
   14afa:	4770      	bx	lr

00014afc <_ZN14I2C_ObjectListC1Ev>:

#include "I2C_ObjectList.h"
#include "I2C_Asyn_Class.h"

// default constructor
I2C_ObjectList::I2C_ObjectList()
   14afc:	b480      	push	{r7}
   14afe:	b083      	sub	sp, #12
   14b00:	af00      	add	r7, sp, #0
   14b02:	6078      	str	r0, [r7, #4]
{
	objList=&i2cList;
   14b04:	687b      	ldr	r3, [r7, #4]
   14b06:	4a04      	ldr	r2, [pc, #16]	; (14b18 <_ZN14I2C_ObjectListC1Ev+0x1c>)
   14b08:	611a      	str	r2, [r3, #16]
} //I2C_ObjectList
   14b0a:	687b      	ldr	r3, [r7, #4]
   14b0c:	4618      	mov	r0, r3
   14b0e:	370c      	adds	r7, #12
   14b10:	46bd      	mov	sp, r7
   14b12:	bc80      	pop	{r7}
   14b14:	4770      	bx	lr
   14b16:	bf00      	nop
   14b18:	20009b00 	.word	0x20009b00

00014b1c <_ZN14I2C_ObjectListD1Ev>:

// default destructor
I2C_ObjectList::~I2C_ObjectList()
   14b1c:	b480      	push	{r7}
   14b1e:	b083      	sub	sp, #12
   14b20:	af00      	add	r7, sp, #0
   14b22:	6078      	str	r0, [r7, #4]
{
} //~I2C_ObjectList
   14b24:	687b      	ldr	r3, [r7, #4]
   14b26:	4618      	mov	r0, r3
   14b28:	370c      	adds	r7, #12
   14b2a:	46bd      	mov	sp, r7
   14b2c:	bc80      	pop	{r7}
   14b2e:	4770      	bx	lr

00014b30 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor>:

int I2C_ObjectList::AddI2CObject(I2CPointerAndDescriptor& ck ){
   14b30:	b580      	push	{r7, lr}
   14b32:	b082      	sub	sp, #8
   14b34:	af00      	add	r7, sp, #0
   14b36:	6078      	str	r0, [r7, #4]
   14b38:	6039      	str	r1, [r7, #0]
	
		ASSERT((objList)&&(&ck));
   14b3a:	687b      	ldr	r3, [r7, #4]
   14b3c:	691b      	ldr	r3, [r3, #16]
   14b3e:	2b00      	cmp	r3, #0
   14b40:	d004      	beq.n	14b4c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   14b42:	683b      	ldr	r3, [r7, #0]
   14b44:	2b00      	cmp	r3, #0
   14b46:	d001      	beq.n	14b4c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1c>
   14b48:	2301      	movs	r3, #1
   14b4a:	e000      	b.n	14b4e <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x1e>
   14b4c:	2300      	movs	r3, #0
   14b4e:	2219      	movs	r2, #25
   14b50:	4910      	ldr	r1, [pc, #64]	; (14b94 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   14b52:	4618      	mov	r0, r3
   14b54:	4b10      	ldr	r3, [pc, #64]	; (14b98 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   14b56:	4798      	blx	r3
		if (is_list_element(objList,&ck)) {
   14b58:	687b      	ldr	r3, [r7, #4]
   14b5a:	691b      	ldr	r3, [r3, #16]
   14b5c:	6839      	ldr	r1, [r7, #0]
   14b5e:	4618      	mov	r0, r3
   14b60:	4b0e      	ldr	r3, [pc, #56]	; (14b9c <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x6c>)
   14b62:	4798      	blx	r3
   14b64:	4603      	mov	r3, r0
   14b66:	2b00      	cmp	r3, #0
   14b68:	d007      	beq.n	14b7a <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x4a>

			ASSERT(false);
   14b6a:	221c      	movs	r2, #28
   14b6c:	4909      	ldr	r1, [pc, #36]	; (14b94 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x64>)
   14b6e:	2000      	movs	r0, #0
   14b70:	4b09      	ldr	r3, [pc, #36]	; (14b98 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x68>)
   14b72:	4798      	blx	r3
			return ERR_ALREADY_INITIALIZED;
   14b74:	f06f 0311 	mvn.w	r3, #17
   14b78:	e007      	b.n	14b8a <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x5a>
		}
		AddObject(objList,&ck);
   14b7a:	687b      	ldr	r3, [r7, #4]
   14b7c:	691b      	ldr	r3, [r3, #16]
   14b7e:	683a      	ldr	r2, [r7, #0]
   14b80:	4619      	mov	r1, r3
   14b82:	6878      	ldr	r0, [r7, #4]
   14b84:	4b06      	ldr	r3, [pc, #24]	; (14ba0 <_ZN14I2C_ObjectList12AddI2CObjectER23I2CPointerAndDescriptor+0x70>)
   14b86:	4798      	blx	r3
		return ERR_NONE;
   14b88:	2300      	movs	r3, #0
}
   14b8a:	4618      	mov	r0, r3
   14b8c:	3708      	adds	r7, #8
   14b8e:	46bd      	mov	sp, r7
   14b90:	bd80      	pop	{r7, pc}
   14b92:	bf00      	nop
   14b94:	00020e48 	.word	0x00020e48
   14b98:	0000799d 	.word	0x0000799d
   14b9c:	000079c5 	.word	0x000079c5
   14ba0:	00014ba5 	.word	0x00014ba5

00014ba4 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor>:
		coupleKey.i2cDescr=ptrI2C;
		ck=coupleKey;
			
}

void I2C_ObjectList::AddObject(list_descriptor *list,I2CPointerAndDescriptor* nck){
   14ba4:	b580      	push	{r7, lr}
   14ba6:	b086      	sub	sp, #24
   14ba8:	af00      	add	r7, sp, #0
   14baa:	60f8      	str	r0, [r7, #12]
   14bac:	60b9      	str	r1, [r7, #8]
   14bae:	607a      	str	r2, [r7, #4]
		I2CPointerAndDescriptor *it, *head = (I2CPointerAndDescriptor *)list_get_head(list);
   14bb0:	68b8      	ldr	r0, [r7, #8]
   14bb2:	4b09      	ldr	r3, [pc, #36]	; (14bd8 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x34>)
   14bb4:	4798      	blx	r3
   14bb6:	6178      	str	r0, [r7, #20]

		if (!head) {
   14bb8:	697b      	ldr	r3, [r7, #20]
   14bba:	2b00      	cmp	r3, #0
   14bbc:	d104      	bne.n	14bc8 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x24>
			list_insert_as_head(list, nck);
   14bbe:	6879      	ldr	r1, [r7, #4]
   14bc0:	68b8      	ldr	r0, [r7, #8]
   14bc2:	4b06      	ldr	r3, [pc, #24]	; (14bdc <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x38>)
   14bc4:	4798      	blx	r3
			return;
   14bc6:	e003      	b.n	14bd0 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x2c>
		}else{
			list_insert_at_end(list,nck);
   14bc8:	6879      	ldr	r1, [r7, #4]
   14bca:	68b8      	ldr	r0, [r7, #8]
   14bcc:	4b04      	ldr	r3, [pc, #16]	; (14be0 <_ZN14I2C_ObjectList9AddObjectEP15list_descriptorP23I2CPointerAndDescriptor+0x3c>)
   14bce:	4798      	blx	r3
		}
}
   14bd0:	3718      	adds	r7, #24
   14bd2:	46bd      	mov	sp, r7
   14bd4:	bd80      	pop	{r7, pc}
   14bd6:	bf00      	nop
   14bd8:	00014ae7 	.word	0x00014ae7
   14bdc:	000079fd 	.word	0x000079fd
   14be0:	00007a79 	.word	0x00007a79

00014be4 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc>:

uint32_t I2C_ObjectList::GetClassPointer(i2c_m_async_desc*	i2cDescr){
   14be4:	b480      	push	{r7}
   14be6:	b087      	sub	sp, #28
   14be8:	af00      	add	r7, sp, #0
   14bea:	6078      	str	r0, [r7, #4]
   14bec:	6039      	str	r1, [r7, #0]
		struct list_element *it;
		//I2CPointerAndDescriptor *it;
		I2CPointerAndDescriptor *k;
		uint32_t ptr;
		for (it = objList->head; it; it = it->next) {
   14bee:	687b      	ldr	r3, [r7, #4]
   14bf0:	691b      	ldr	r3, [r3, #16]
   14bf2:	681b      	ldr	r3, [r3, #0]
   14bf4:	617b      	str	r3, [r7, #20]
   14bf6:	697b      	ldr	r3, [r7, #20]
   14bf8:	2b00      	cmp	r3, #0
   14bfa:	d00f      	beq.n	14c1c <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x38>
			k=(I2CPointerAndDescriptor*)it;
   14bfc:	697b      	ldr	r3, [r7, #20]
   14bfe:	613b      	str	r3, [r7, #16]
			
			if (k->i2cDescr== i2cDescr){
   14c00:	693b      	ldr	r3, [r7, #16]
   14c02:	689a      	ldr	r2, [r3, #8]
   14c04:	683b      	ldr	r3, [r7, #0]
   14c06:	429a      	cmp	r2, r3
   14c08:	d104      	bne.n	14c14 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x30>
				ptr=k->ptrI2CAsynClass;
   14c0a:	693b      	ldr	r3, [r7, #16]
   14c0c:	68db      	ldr	r3, [r3, #12]
   14c0e:	60fb      	str	r3, [r7, #12]
				return ptr;
   14c10:	68fb      	ldr	r3, [r7, #12]
   14c12:	e004      	b.n	14c1e <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x3a>
		for (it = objList->head; it; it = it->next) {
   14c14:	697b      	ldr	r3, [r7, #20]
   14c16:	681b      	ldr	r3, [r3, #0]
   14c18:	617b      	str	r3, [r7, #20]
   14c1a:	e7ec      	b.n	14bf6 <_ZN14I2C_ObjectList15GetClassPointerEP16i2c_m_async_desc+0x12>
			}
		}

		return 0;
   14c1c:	2300      	movs	r3, #0
   14c1e:	4618      	mov	r0, r3
   14c20:	371c      	adds	r7, #28
   14c22:	46bd      	mov	sp, r7
   14c24:	bc80      	pop	{r7}
   14c26:	4770      	bx	lr

00014c28 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   14c28:	b480      	push	{r7}
   14c2a:	b083      	sub	sp, #12
   14c2c:	af00      	add	r7, sp, #0
   14c2e:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   14c30:	687b      	ldr	r3, [r7, #4]
   14c32:	4618      	mov	r0, r3
   14c34:	370c      	adds	r7, #12
   14c36:	46bd      	mov	sp, r7
   14c38:	bc80      	pop	{r7}
   14c3a:	4770      	bx	lr

00014c3c <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   14c3c:	b480      	push	{r7}
   14c3e:	b083      	sub	sp, #12
   14c40:	af00      	add	r7, sp, #0
   14c42:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   14c44:	687b      	ldr	r3, [r7, #4]
   14c46:	4618      	mov	r0, r3
   14c48:	370c      	adds	r7, #12
   14c4a:	46bd      	mov	sp, r7
   14c4c:	bc80      	pop	{r7}
   14c4e:	4770      	bx	lr

00014c50 <_ZN14MCP23008_Class4InitEhP14I2C_Asyn_Class>:
	//i2ca.Set_descriptor(ptrI2CDescr);
	//isReady=i2ca.Init(addr)==0;
	//ext_irq_register(PIN_PA04,FUNC_PTR(MCPHadChanged));
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
bool MCP23008_Class::Init(uint8_t addr,I2C_Asyn_Class *i2c){
   14c50:	b480      	push	{r7}
   14c52:	b085      	sub	sp, #20
   14c54:	af00      	add	r7, sp, #0
   14c56:	60f8      	str	r0, [r7, #12]
   14c58:	460b      	mov	r3, r1
   14c5a:	607a      	str	r2, [r7, #4]
   14c5c:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   14c5e:	687b      	ldr	r3, [r7, #4]
   14c60:	6a1a      	ldr	r2, [r3, #32]
   14c62:	68fb      	ldr	r3, [r7, #12]
   14c64:	615a      	str	r2, [r3, #20]
	rxBuffer=i2c->rxBuffer;
   14c66:	687b      	ldr	r3, [r7, #4]
   14c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   14c6a:	68fb      	ldr	r3, [r7, #12]
   14c6c:	619a      	str	r2, [r3, #24]
	i2cAddress=addr;
   14c6e:	68fb      	ldr	r3, [r7, #12]
   14c70:	7afa      	ldrb	r2, [r7, #11]
   14c72:	73da      	strb	r2, [r3, #15]
	i2cClass=i2c;
   14c74:	68fb      	ldr	r3, [r7, #12]
   14c76:	687a      	ldr	r2, [r7, #4]
   14c78:	611a      	str	r2, [r3, #16]
	isOK=i2cClass->isOK;
   14c7a:	68fb      	ldr	r3, [r7, #12]
   14c7c:	691b      	ldr	r3, [r3, #16]
   14c7e:	7e1b      	ldrb	r3, [r3, #24]
   14c80:	b2da      	uxtb	r2, r3
   14c82:	68fb      	ldr	r3, [r7, #12]
   14c84:	735a      	strb	r2, [r3, #13]

	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   14c86:	bf00      	nop
   14c88:	4618      	mov	r0, r3
   14c8a:	3714      	adds	r7, #20
   14c8c:	46bd      	mov	sp, r7
   14c8e:	bc80      	pop	{r7}
   14c90:	4770      	bx	lr
	...

00014c94 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc>:

MCP23017_Class::MCP23017_Class()
{
	ptrMCP23017Class=this;
} //AT24MAC_Class
MCP23017_Class::MCP23017_Class(i2c_m_async_desc *i2c)
   14c94:	b580      	push	{r7, lr}
   14c96:	b082      	sub	sp, #8
   14c98:	af00      	add	r7, sp, #0
   14c9a:	6078      	str	r0, [r7, #4]
   14c9c:	6039      	str	r1, [r7, #0]
   14c9e:	687b      	ldr	r3, [r7, #4]
   14ca0:	3304      	adds	r3, #4
   14ca2:	4618      	mov	r0, r3
   14ca4:	4b06      	ldr	r3, [pc, #24]	; (14cc0 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x2c>)
   14ca6:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
   14ca8:	687b      	ldr	r3, [r7, #4]
   14caa:	683a      	ldr	r2, [r7, #0]
   14cac:	649a      	str	r2, [r3, #72]	; 0x48
	ptrMCP23017Class=this;
   14cae:	4a05      	ldr	r2, [pc, #20]	; (14cc4 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x30>)
   14cb0:	687b      	ldr	r3, [r7, #4]
   14cb2:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
   14cb4:	687b      	ldr	r3, [r7, #4]
   14cb6:	4618      	mov	r0, r3
   14cb8:	3708      	adds	r7, #8
   14cba:	46bd      	mov	sp, r7
   14cbc:	bd80      	pop	{r7, pc}
   14cbe:	bf00      	nop
   14cc0:	0001484d 	.word	0x0001484d
   14cc4:	20009b04 	.word	0x20009b04

00014cc8 <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
   14cc8:	b580      	push	{r7, lr}
   14cca:	b082      	sub	sp, #8
   14ccc:	af00      	add	r7, sp, #0
   14cce:	6078      	str	r0, [r7, #4]
   14cd0:	687b      	ldr	r3, [r7, #4]
   14cd2:	3304      	adds	r3, #4
   14cd4:	4618      	mov	r0, r3
   14cd6:	4b03      	ldr	r3, [pc, #12]	; (14ce4 <_ZN14MCP23017_ClassD1Ev+0x1c>)
   14cd8:	4798      	blx	r3
{
} //~AT24MAC_Class
   14cda:	687b      	ldr	r3, [r7, #4]
   14cdc:	4618      	mov	r0, r3
   14cde:	3708      	adds	r7, #8
   14ce0:	46bd      	mov	sp, r7
   14ce2:	bd80      	pop	{r7, pc}
   14ce4:	000148c9 	.word	0x000148c9

00014ce8 <_ZN14MCP23017_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23017_Class::readRegister(uint8_t addr){
   14ce8:	b580      	push	{r7, lr}
   14cea:	b082      	sub	sp, #8
   14cec:	af00      	add	r7, sp, #0
   14cee:	6078      	str	r0, [r7, #4]
   14cf0:	460b      	mov	r3, r1
   14cf2:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
   14cf4:	687b      	ldr	r3, [r7, #4]
   14cf6:	3304      	adds	r3, #4
   14cf8:	1cf9      	adds	r1, r7, #3
   14cfa:	2201      	movs	r2, #1
   14cfc:	4618      	mov	r0, r3
   14cfe:	4b11      	ldr	r3, [pc, #68]	; (14d44 <_ZN14MCP23017_Class12readRegisterEh+0x5c>)
   14d00:	4798      	blx	r3
	while(!i2ca.txReady);
   14d02:	687b      	ldr	r3, [r7, #4]
   14d04:	7e1b      	ldrb	r3, [r3, #24]
   14d06:	b2db      	uxtb	r3, r3
   14d08:	f083 0301 	eor.w	r3, r3, #1
   14d0c:	b2db      	uxtb	r3, r3
   14d0e:	2b00      	cmp	r3, #0
   14d10:	d000      	beq.n	14d14 <_ZN14MCP23017_Class12readRegisterEh+0x2c>
   14d12:	e7f6      	b.n	14d02 <_ZN14MCP23017_Class12readRegisterEh+0x1a>
	i2ca.Read(&registerValue,1);
   14d14:	687b      	ldr	r3, [r7, #4]
   14d16:	1d18      	adds	r0, r3, #4
   14d18:	687b      	ldr	r3, [r7, #4]
   14d1a:	3350      	adds	r3, #80	; 0x50
   14d1c:	2201      	movs	r2, #1
   14d1e:	4619      	mov	r1, r3
   14d20:	4b09      	ldr	r3, [pc, #36]	; (14d48 <_ZN14MCP23017_Class12readRegisterEh+0x60>)
   14d22:	4798      	blx	r3
	while(!i2ca.rxReady);
   14d24:	687b      	ldr	r3, [r7, #4]
   14d26:	7e5b      	ldrb	r3, [r3, #25]
   14d28:	b2db      	uxtb	r3, r3
   14d2a:	f083 0301 	eor.w	r3, r3, #1
   14d2e:	b2db      	uxtb	r3, r3
   14d30:	2b00      	cmp	r3, #0
   14d32:	d000      	beq.n	14d36 <_ZN14MCP23017_Class12readRegisterEh+0x4e>
   14d34:	e7f6      	b.n	14d24 <_ZN14MCP23017_Class12readRegisterEh+0x3c>
	return registerValue;
   14d36:	687b      	ldr	r3, [r7, #4]
   14d38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
}
   14d3c:	4618      	mov	r0, r3
   14d3e:	3708      	adds	r7, #8
   14d40:	46bd      	mov	sp, r7
   14d42:	bd80      	pop	{r7, pc}
   14d44:	00014a41 	.word	0x00014a41
   14d48:	00014a85 	.word	0x00014a85

00014d4c <_ZN14MCP23017_Class8readGPIOEh>:

/**
 * Read a single port, A or B, and return its current 8 bit value.
 * Parameter b should be 0 for GPIOA, and 1 for GPIOB.
 */
uint8_t MCP23017_Class::readGPIO(uint8_t b) {
   14d4c:	b580      	push	{r7, lr}
   14d4e:	b082      	sub	sp, #8
   14d50:	af00      	add	r7, sp, #0
   14d52:	6078      	str	r0, [r7, #4]
   14d54:	460b      	mov	r3, r1
   14d56:	70fb      	strb	r3, [r7, #3]

	if (b == 0){
   14d58:	78fb      	ldrb	r3, [r7, #3]
   14d5a:	2b00      	cmp	r3, #0
   14d5c:	d10c      	bne.n	14d78 <_ZN14MCP23017_Class8readGPIOEh+0x2c>
		regAddress=MCP23017_GPIOA;
   14d5e:	687b      	ldr	r3, [r7, #4]
   14d60:	2212      	movs	r2, #18
   14d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		i2ca.Write(&regAddress,1);
   14d66:	687b      	ldr	r3, [r7, #4]
   14d68:	1d18      	adds	r0, r3, #4
   14d6a:	687b      	ldr	r3, [r7, #4]
   14d6c:	3351      	adds	r3, #81	; 0x51
   14d6e:	2201      	movs	r2, #1
   14d70:	4619      	mov	r1, r3
   14d72:	4b18      	ldr	r3, [pc, #96]	; (14dd4 <_ZN14MCP23017_Class8readGPIOEh+0x88>)
   14d74:	4798      	blx	r3
   14d76:	e00b      	b.n	14d90 <_ZN14MCP23017_Class8readGPIOEh+0x44>
	}else {
		regAddress=MCP23017_GPIOB;
   14d78:	687b      	ldr	r3, [r7, #4]
   14d7a:	2213      	movs	r2, #19
   14d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		i2ca.Write(&regAddress,1);
   14d80:	687b      	ldr	r3, [r7, #4]
   14d82:	1d18      	adds	r0, r3, #4
   14d84:	687b      	ldr	r3, [r7, #4]
   14d86:	3351      	adds	r3, #81	; 0x51
   14d88:	2201      	movs	r2, #1
   14d8a:	4619      	mov	r1, r3
   14d8c:	4b11      	ldr	r3, [pc, #68]	; (14dd4 <_ZN14MCP23017_Class8readGPIOEh+0x88>)
   14d8e:	4798      	blx	r3
	}


		while(!i2ca.txReady);
   14d90:	687b      	ldr	r3, [r7, #4]
   14d92:	7e1b      	ldrb	r3, [r3, #24]
   14d94:	b2db      	uxtb	r3, r3
   14d96:	f083 0301 	eor.w	r3, r3, #1
   14d9a:	b2db      	uxtb	r3, r3
   14d9c:	2b00      	cmp	r3, #0
   14d9e:	d000      	beq.n	14da2 <_ZN14MCP23017_Class8readGPIOEh+0x56>
   14da0:	e7f6      	b.n	14d90 <_ZN14MCP23017_Class8readGPIOEh+0x44>
		i2ca.Read(&registerValue,1);
   14da2:	687b      	ldr	r3, [r7, #4]
   14da4:	1d18      	adds	r0, r3, #4
   14da6:	687b      	ldr	r3, [r7, #4]
   14da8:	3350      	adds	r3, #80	; 0x50
   14daa:	2201      	movs	r2, #1
   14dac:	4619      	mov	r1, r3
   14dae:	4b0a      	ldr	r3, [pc, #40]	; (14dd8 <_ZN14MCP23017_Class8readGPIOEh+0x8c>)
   14db0:	4798      	blx	r3
		while(!i2ca.rxReady);
   14db2:	687b      	ldr	r3, [r7, #4]
   14db4:	7e5b      	ldrb	r3, [r3, #25]
   14db6:	b2db      	uxtb	r3, r3
   14db8:	f083 0301 	eor.w	r3, r3, #1
   14dbc:	b2db      	uxtb	r3, r3
   14dbe:	2b00      	cmp	r3, #0
   14dc0:	d000      	beq.n	14dc4 <_ZN14MCP23017_Class8readGPIOEh+0x78>
   14dc2:	e7f6      	b.n	14db2 <_ZN14MCP23017_Class8readGPIOEh+0x66>
		return	registerValue;
   14dc4:	687b      	ldr	r3, [r7, #4]
   14dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
}
   14dca:	4618      	mov	r0, r3
   14dcc:	3708      	adds	r7, #8
   14dce:	46bd      	mov	sp, r7
   14dd0:	bd80      	pop	{r7, pc}
   14dd2:	bf00      	nop
   14dd4:	00014a41 	.word	0x00014a41
   14dd8:	00014a85 	.word	0x00014a85

00014ddc <_ZN14MCP23017_Class9SavePortsEv>:
	for(int i=0;i<8;i++) if (bitRead(intf,i)) return i+8;

	return MCP23017_INT_ERR;

}
uint8_t	MCP23017_Class::SavePorts(void){
   14ddc:	b580      	push	{r7, lr}
   14dde:	b082      	sub	sp, #8
   14de0:	af00      	add	r7, sp, #0
   14de2:	6078      	str	r0, [r7, #4]
	portA=readGPIO(0);
   14de4:	2100      	movs	r1, #0
   14de6:	6878      	ldr	r0, [r7, #4]
   14de8:	4b0f      	ldr	r3, [pc, #60]	; (14e28 <_ZN14MCP23017_Class9SavePortsEv+0x4c>)
   14dea:	4798      	blx	r3
   14dec:	4603      	mov	r3, r0
   14dee:	461a      	mov	r2, r3
   14df0:	687b      	ldr	r3, [r7, #4]
   14df2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	portB=readGPIO(1);
   14df6:	2101      	movs	r1, #1
   14df8:	6878      	ldr	r0, [r7, #4]
   14dfa:	4b0b      	ldr	r3, [pc, #44]	; (14e28 <_ZN14MCP23017_Class9SavePortsEv+0x4c>)
   14dfc:	4798      	blx	r3
   14dfe:	4603      	mov	r3, r0
   14e00:	461a      	mov	r2, r3
   14e02:	687b      	ldr	r3, [r7, #4]
   14e04:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	if (hasChanged)
   14e08:	687b      	ldr	r3, [r7, #4]
   14e0a:	785b      	ldrb	r3, [r3, #1]
   14e0c:	b2db      	uxtb	r3, r3
   14e0e:	2b00      	cmp	r3, #0
   14e10:	d002      	beq.n	14e18 <_ZN14MCP23017_Class9SavePortsEv+0x3c>
	{
		ClearIntRegisters();
   14e12:	6878      	ldr	r0, [r7, #4]
   14e14:	4b05      	ldr	r3, [pc, #20]	; (14e2c <_ZN14MCP23017_Class9SavePortsEv+0x50>)
   14e16:	4798      	blx	r3
	}
	return portA;
   14e18:	687b      	ldr	r3, [r7, #4]
   14e1a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
}
   14e1e:	4618      	mov	r0, r3
   14e20:	3708      	adds	r7, #8
   14e22:	46bd      	mov	sp, r7
   14e24:	bd80      	pop	{r7, pc}
   14e26:	bf00      	nop
   14e28:	00014d4d 	.word	0x00014d4d
   14e2c:	00014e31 	.word	0x00014e31

00014e30 <_ZN14MCP23017_Class17ClearIntRegistersEv>:
void MCP23017_Class::ClearIntRegisters(){
   14e30:	b580      	push	{r7, lr}
   14e32:	b082      	sub	sp, #8
   14e34:	af00      	add	r7, sp, #0
   14e36:	6078      	str	r0, [r7, #4]
		readRegister(MCP23017_INTCAPA);
   14e38:	2110      	movs	r1, #16
   14e3a:	6878      	ldr	r0, [r7, #4]
   14e3c:	4b04      	ldr	r3, [pc, #16]	; (14e50 <_ZN14MCP23017_Class17ClearIntRegistersEv+0x20>)
   14e3e:	4798      	blx	r3
	readRegister(MCP23017_INTCAPB);
   14e40:	2111      	movs	r1, #17
   14e42:	6878      	ldr	r0, [r7, #4]
   14e44:	4b02      	ldr	r3, [pc, #8]	; (14e50 <_ZN14MCP23017_Class17ClearIntRegistersEv+0x20>)
   14e46:	4798      	blx	r3
}
   14e48:	bf00      	nop
   14e4a:	3708      	adds	r7, #8
   14e4c:	46bd      	mov	sp, r7
   14e4e:	bd80      	pop	{r7, pc}
   14e50:	00014ce9 	.word	0x00014ce9

00014e54 <_Z41__static_initialization_and_destruction_0ii>:
	{
		isOK=false;
	}
	return isOK;
}
   14e54:	b580      	push	{r7, lr}
   14e56:	b082      	sub	sp, #8
   14e58:	af00      	add	r7, sp, #0
   14e5a:	6078      	str	r0, [r7, #4]
   14e5c:	6039      	str	r1, [r7, #0]
   14e5e:	687b      	ldr	r3, [r7, #4]
   14e60:	2b01      	cmp	r3, #1
   14e62:	d10d      	bne.n	14e80 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   14e64:	683b      	ldr	r3, [r7, #0]
   14e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14e6a:	4293      	cmp	r3, r2
   14e6c:	d108      	bne.n	14e80 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   14e6e:	4906      	ldr	r1, [pc, #24]	; (14e88 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   14e70:	4806      	ldr	r0, [pc, #24]	; (14e8c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   14e72:	4b07      	ldr	r3, [pc, #28]	; (14e90 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   14e74:	4798      	blx	r3
   14e76:	4a07      	ldr	r2, [pc, #28]	; (14e94 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   14e78:	4907      	ldr	r1, [pc, #28]	; (14e98 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   14e7a:	4804      	ldr	r0, [pc, #16]	; (14e8c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   14e7c:	4b07      	ldr	r3, [pc, #28]	; (14e9c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   14e7e:	4798      	blx	r3
   14e80:	bf00      	nop
   14e82:	3708      	adds	r7, #8
   14e84:	46bd      	mov	sp, r7
   14e86:	bd80      	pop	{r7, pc}
   14e88:	2000a644 	.word	0x2000a644
   14e8c:	20009b08 	.word	0x20009b08
   14e90:	00014c95 	.word	0x00014c95
   14e94:	20000000 	.word	0x20000000
   14e98:	00014cc9 	.word	0x00014cc9
   14e9c:	00018bf5 	.word	0x00018bf5

00014ea0 <_GLOBAL__sub_I_ptrMCP23017Class>:
   14ea0:	b580      	push	{r7, lr}
   14ea2:	af00      	add	r7, sp, #0
   14ea4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14ea8:	2001      	movs	r0, #1
   14eaa:	4b01      	ldr	r3, [pc, #4]	; (14eb0 <_GLOBAL__sub_I_ptrMCP23017Class+0x10>)
   14eac:	4798      	blx	r3
   14eae:	bd80      	pop	{r7, pc}
   14eb0:	00014e55 	.word	0x00014e55

00014eb4 <_ZL15Converter1Readyv>:


#include "TemperatureSensors_Class.h"
static TemperatureSensors_Class	*ptrTemperaturesClass;

static void Converter1Ready(void){
   14eb4:	b580      	push	{r7, lr}
   14eb6:	af00      	add	r7, sp, #0
	ptrTemperaturesClass->converterReady[0]=true;
   14eb8:	4b08      	ldr	r3, [pc, #32]	; (14edc <_ZL15Converter1Readyv+0x28>)
   14eba:	681b      	ldr	r3, [r3, #0]
   14ebc:	2201      	movs	r2, #1
   14ebe:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	ptrTemperaturesClass->SetModuleReady(0);
   14ec2:	4b06      	ldr	r3, [pc, #24]	; (14edc <_ZL15Converter1Readyv+0x28>)
   14ec4:	681b      	ldr	r3, [r3, #0]
   14ec6:	2100      	movs	r1, #0
   14ec8:	4618      	mov	r0, r3
   14eca:	4b05      	ldr	r3, [pc, #20]	; (14ee0 <_ZL15Converter1Readyv+0x2c>)
   14ecc:	4798      	blx	r3
	ptrTemperaturesClass->converterTimeout=false;
   14ece:	4b03      	ldr	r3, [pc, #12]	; (14edc <_ZL15Converter1Readyv+0x28>)
   14ed0:	681b      	ldr	r3, [r3, #0]
   14ed2:	2200      	movs	r2, #0
   14ed4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
   14ed8:	bf00      	nop
   14eda:	bd80      	pop	{r7, pc}
   14edc:	20009b60 	.word	0x20009b60
   14ee0:	00015265 	.word	0x00015265

00014ee4 <_ZL15Converter2Readyv>:
static void Converter2Ready(void){
   14ee4:	b580      	push	{r7, lr}
   14ee6:	af00      	add	r7, sp, #0
	ptrTemperaturesClass->converterReady[1]=true;
   14ee8:	4b08      	ldr	r3, [pc, #32]	; (14f0c <_ZL15Converter2Readyv+0x28>)
   14eea:	681b      	ldr	r3, [r3, #0]
   14eec:	2201      	movs	r2, #1
   14eee:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	ptrTemperaturesClass->SetModuleReady(1);
   14ef2:	4b06      	ldr	r3, [pc, #24]	; (14f0c <_ZL15Converter2Readyv+0x28>)
   14ef4:	681b      	ldr	r3, [r3, #0]
   14ef6:	2101      	movs	r1, #1
   14ef8:	4618      	mov	r0, r3
   14efa:	4b05      	ldr	r3, [pc, #20]	; (14f10 <_ZL15Converter2Readyv+0x2c>)
   14efc:	4798      	blx	r3
	ptrTemperaturesClass->converterTimeout=false;
   14efe:	4b03      	ldr	r3, [pc, #12]	; (14f0c <_ZL15Converter2Readyv+0x28>)
   14f00:	681b      	ldr	r3, [r3, #0]
   14f02:	2200      	movs	r2, #0
   14f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
   14f08:	bf00      	nop
   14f0a:	bd80      	pop	{r7, pc}
   14f0c:	20009b60 	.word	0x20009b60
   14f10:	00015265 	.word	0x00015265

00014f14 <_ZL17ConversionTimeoutPK10timer_task>:
static void	ConversionTimeout(const struct timer_task *const timer_task){
   14f14:	b480      	push	{r7}
   14f16:	b083      	sub	sp, #12
   14f18:	af00      	add	r7, sp, #0
   14f1a:	6078      	str	r0, [r7, #4]
	ptrTemperaturesClass->converterTimeout=true;
   14f1c:	4b05      	ldr	r3, [pc, #20]	; (14f34 <_ZL17ConversionTimeoutPK10timer_task+0x20>)
   14f1e:	681b      	ldr	r3, [r3, #0]
   14f20:	2201      	movs	r2, #1
   14f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	asm("nop");
   14f26:	bf00      	nop
}
   14f28:	bf00      	nop
   14f2a:	370c      	adds	r7, #12
   14f2c:	46bd      	mov	sp, r7
   14f2e:	bc80      	pop	{r7}
   14f30:	4770      	bx	lr
   14f32:	bf00      	nop
   14f34:	20009b60 	.word	0x20009b60

00014f38 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
static LT_SPI	ltSPI;
// default constructor
TemperatureSensors_Class::TemperatureSensors_Class()
{
} //TemperatureSensors_Class
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   14f38:	b5b0      	push	{r4, r5, r7, lr}
   14f3a:	b082      	sub	sp, #8
   14f3c:	af00      	add	r7, sp, #0
   14f3e:	6078      	str	r0, [r7, #4]
   14f40:	6039      	str	r1, [r7, #0]
   14f42:	687b      	ldr	r3, [r7, #4]
   14f44:	4618      	mov	r0, r3
   14f46:	4b0f      	ldr	r3, [pc, #60]	; (14f84 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x4c>)
   14f48:	4798      	blx	r3
   14f4a:	687b      	ldr	r3, [r7, #4]
   14f4c:	3384      	adds	r3, #132	; 0x84
   14f4e:	2401      	movs	r4, #1
   14f50:	461d      	mov	r5, r3
   14f52:	2c00      	cmp	r4, #0
   14f54:	db05      	blt.n	14f62 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x2a>
   14f56:	4628      	mov	r0, r5
   14f58:	4b0b      	ldr	r3, [pc, #44]	; (14f88 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x50>)
   14f5a:	4798      	blx	r3
   14f5c:	355c      	adds	r5, #92	; 0x5c
   14f5e:	3c01      	subs	r4, #1
   14f60:	e7f7      	b.n	14f52 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x1a>
{
		spiLite=&ltSPI;
   14f62:	687b      	ldr	r3, [r7, #4]
   14f64:	4a09      	ldr	r2, [pc, #36]	; (14f8c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x54>)
   14f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		ptrTemperaturesClass=this;
   14f6a:	4a09      	ldr	r2, [pc, #36]	; (14f90 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x58>)
   14f6c:	687b      	ldr	r3, [r7, #4]
   14f6e:	6013      	str	r3, [r2, #0]
		SPIA=SPI_LTC;
   14f70:	687b      	ldr	r3, [r7, #4]
   14f72:	683a      	ldr	r2, [r7, #0]
   14f74:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		
} //TemperatureSensors_Class
   14f78:	687b      	ldr	r3, [r7, #4]
   14f7a:	4618      	mov	r0, r3
   14f7c:	3708      	adds	r7, #8
   14f7e:	46bd      	mov	sp, r7
   14f80:	bdb0      	pop	{r4, r5, r7, pc}
   14f82:	bf00      	nop
   14f84:	00017fe1 	.word	0x00017fe1
   14f88:	00017fe1 	.word	0x00017fe1
   14f8c:	20009b64 	.word	0x20009b64
   14f90:	20009b60 	.word	0x20009b60

00014f94 <_ZN24TemperatureSensors_ClassD1Ev>:

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   14f94:	b590      	push	{r4, r7, lr}
   14f96:	b083      	sub	sp, #12
   14f98:	af00      	add	r7, sp, #0
   14f9a:	6078      	str	r0, [r7, #4]
   14f9c:	687b      	ldr	r3, [r7, #4]
   14f9e:	3384      	adds	r3, #132	; 0x84
   14fa0:	2b00      	cmp	r3, #0
   14fa2:	d00c      	beq.n	14fbe <_ZN24TemperatureSensors_ClassD1Ev+0x2a>
   14fa4:	687b      	ldr	r3, [r7, #4]
   14fa6:	3384      	adds	r3, #132	; 0x84
   14fa8:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
   14fac:	687b      	ldr	r3, [r7, #4]
   14fae:	3384      	adds	r3, #132	; 0x84
   14fb0:	42a3      	cmp	r3, r4
   14fb2:	d004      	beq.n	14fbe <_ZN24TemperatureSensors_ClassD1Ev+0x2a>
   14fb4:	3c5c      	subs	r4, #92	; 0x5c
   14fb6:	4620      	mov	r0, r4
   14fb8:	4b05      	ldr	r3, [pc, #20]	; (14fd0 <_ZN24TemperatureSensors_ClassD1Ev+0x3c>)
   14fba:	4798      	blx	r3
   14fbc:	e7f6      	b.n	14fac <_ZN24TemperatureSensors_ClassD1Ev+0x18>
   14fbe:	687b      	ldr	r3, [r7, #4]
   14fc0:	4618      	mov	r0, r3
   14fc2:	4b04      	ldr	r3, [pc, #16]	; (14fd4 <_ZN24TemperatureSensors_ClassD1Ev+0x40>)
   14fc4:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   14fc6:	687b      	ldr	r3, [r7, #4]
   14fc8:	4618      	mov	r0, r3
   14fca:	370c      	adds	r7, #12
   14fcc:	46bd      	mov	sp, r7
   14fce:	bd90      	pop	{r4, r7, pc}
   14fd0:	00017ff5 	.word	0x00017ff5
   14fd4:	00017ff5 	.word	0x00017ff5

00014fd8 <_ZN24TemperatureSensors_Class4InitEv>:

bool	TemperatureSensors_Class::Init(void){
   14fd8:	b580      	push	{r7, lr}
   14fda:	b082      	sub	sp, #8
   14fdc:	af00      	add	r7, sp, #0
   14fde:	6078      	str	r0, [r7, #4]
	spiLite->set_descriptor(SPIA);
   14fe0:	687b      	ldr	r3, [r7, #4]
   14fe2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   14fe6:	687b      	ldr	r3, [r7, #4]
   14fe8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   14fec:	4619      	mov	r1, r3
   14fee:	4610      	mov	r0, r2
   14ff0:	4b1a      	ldr	r3, [pc, #104]	; (1505c <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   14ff2:	4798      	blx	r3
	spiLite->init();
   14ff4:	687b      	ldr	r3, [r7, #4]
   14ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   14ffa:	4618      	mov	r0, r3
   14ffc:	4b18      	ldr	r3, [pc, #96]	; (15060 <_ZN24TemperatureSensors_Class4InitEv+0x88>)
   14ffe:	4798      	blx	r3
	ptrTemperaturesClass=this;
   15000:	4a18      	ldr	r2, [pc, #96]	; (15064 <_ZN24TemperatureSensors_Class4InitEv+0x8c>)
   15002:	687b      	ldr	r3, [r7, #4]
   15004:	6013      	str	r3, [r2, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   15006:	4918      	ldr	r1, [pc, #96]	; (15068 <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   15008:	2028      	movs	r0, #40	; 0x28
   1500a:	4b18      	ldr	r3, [pc, #96]	; (1506c <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   1500c:	4798      	blx	r3
	ext_irq_register(PIN_PB09, Converter2Ready);
   1500e:	4918      	ldr	r1, [pc, #96]	; (15070 <_ZN24TemperatureSensors_Class4InitEv+0x98>)
   15010:	2029      	movs	r0, #41	; 0x29
   15012:	4b16      	ldr	r3, [pc, #88]	; (1506c <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   15014:	4798      	blx	r3
	InitModules();
   15016:	6878      	ldr	r0, [r7, #4]
   15018:	4b16      	ldr	r3, [pc, #88]	; (15074 <_ZN24TemperatureSensors_Class4InitEv+0x9c>)
   1501a:	4798      	blx	r3
	currentModule=0; currentChannelIndex=0;
   1501c:	687b      	ldr	r3, [r7, #4]
   1501e:	2200      	movs	r2, #0
   15020:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
   15024:	687b      	ldr	r3, [r7, #4]
   15026:	2200      	movs	r2, #0
   15028:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	isOK=(module[0].isOK)&(module[1].isOK);
   1502c:	687b      	ldr	r3, [r7, #4]
   1502e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   15032:	461a      	mov	r2, r3
   15034:	687b      	ldr	r3, [r7, #4]
   15036:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
   1503a:	4013      	ands	r3, r2
   1503c:	2b00      	cmp	r3, #0
   1503e:	bf14      	ite	ne
   15040:	2301      	movne	r3, #1
   15042:	2300      	moveq	r3, #0
   15044:	b2da      	uxtb	r2, r3
   15046:	687b      	ldr	r3, [r7, #4]
   15048:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	return isOK;
   1504c:	687b      	ldr	r3, [r7, #4]
   1504e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   15052:	b2db      	uxtb	r3, r3
}
   15054:	4618      	mov	r0, r3
   15056:	3708      	adds	r7, #8
   15058:	46bd      	mov	sp, r7
   1505a:	bd80      	pop	{r7, pc}
   1505c:	0001882d 	.word	0x0001882d
   15060:	000187d1 	.word	0x000187d1
   15064:	20009b60 	.word	0x20009b60
   15068:	00014eb5 	.word	0x00014eb5
   1506c:	0000613d 	.word	0x0000613d
   15070:	00014ee5 	.word	0x00014ee5
   15074:	00015079 	.word	0x00015079

00015078 <_ZN24TemperatureSensors_Class11InitModulesEv>:

bool TemperatureSensors_Class::InitModules(void){
   15078:	b580      	push	{r7, lr}
   1507a:	b084      	sub	sp, #16
   1507c:	af00      	add	r7, sp, #0
   1507e:	6078      	str	r0, [r7, #4]
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2;
   15080:	687b      	ldr	r3, [r7, #4]
   15082:	223d      	movs	r2, #61	; 0x3d
   15084:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   15088:	687b      	ldr	r3, [r7, #4]
   1508a:	221b      	movs	r2, #27
   1508c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   15090:	2300      	movs	r3, #0
   15092:	73fb      	strb	r3, [r7, #15]
   15094:	7bfb      	ldrb	r3, [r7, #15]
   15096:	2b01      	cmp	r3, #1
   15098:	dc17      	bgt.n	150ca <_ZN24TemperatureSensors_Class11InitModulesEv+0x52>
	{
		module[ii].Init(csPins[ii],spiLite);
   1509a:	7bfb      	ldrb	r3, [r7, #15]
   1509c:	225c      	movs	r2, #92	; 0x5c
   1509e:	fb02 f303 	mul.w	r3, r2, r3
   150a2:	3380      	adds	r3, #128	; 0x80
   150a4:	687a      	ldr	r2, [r7, #4]
   150a6:	4413      	add	r3, r2
   150a8:	1d18      	adds	r0, r3, #4
   150aa:	7bfb      	ldrb	r3, [r7, #15]
   150ac:	687a      	ldr	r2, [r7, #4]
   150ae:	334e      	adds	r3, #78	; 0x4e
   150b0:	009b      	lsls	r3, r3, #2
   150b2:	4413      	add	r3, r2
   150b4:	6859      	ldr	r1, [r3, #4]
   150b6:	687b      	ldr	r3, [r7, #4]
   150b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   150bc:	461a      	mov	r2, r3
   150be:	4b05      	ldr	r3, [pc, #20]	; (150d4 <_ZN24TemperatureSensors_Class11InitModulesEv+0x5c>)
   150c0:	4798      	blx	r3
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   150c2:	7bfb      	ldrb	r3, [r7, #15]
   150c4:	3301      	adds	r3, #1
   150c6:	73fb      	strb	r3, [r7, #15]
   150c8:	e7e4      	b.n	15094 <_ZN24TemperatureSensors_Class11InitModulesEv+0x1c>
	}

}
   150ca:	bf00      	nop
   150cc:	4618      	mov	r0, r3
   150ce:	3710      	adds	r7, #16
   150d0:	46bd      	mov	sp, r7
   150d2:	bd80      	pop	{r7, pc}
   150d4:	00018009 	.word	0x00018009

000150d8 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   150d8:	b580      	push	{r7, lr}
   150da:	b082      	sub	sp, #8
   150dc:	af00      	add	r7, sp, #0
   150de:	6078      	str	r0, [r7, #4]
	converterTimeout=false;
   150e0:	687b      	ldr	r3, [r7, #4]
   150e2:	2200      	movs	r2, #0
   150e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	converterReady[currentModule]=false;
   150e8:	687b      	ldr	r3, [r7, #4]
   150ea:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   150ee:	461a      	mov	r2, r3
   150f0:	687b      	ldr	r3, [r7, #4]
   150f2:	4413      	add	r3, r2
   150f4:	2200      	movs	r2, #0
   150f6:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   150fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   150fe:	490d      	ldr	r1, [pc, #52]	; (15134 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x5c>)
   15100:	480d      	ldr	r0, [pc, #52]	; (15138 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x60>)
   15102:	4b0e      	ldr	r3, [pc, #56]	; (1513c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x64>)
   15104:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   15106:	687b      	ldr	r3, [r7, #4]
   15108:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   1510c:	461a      	mov	r2, r3
   1510e:	235c      	movs	r3, #92	; 0x5c
   15110:	fb03 f302 	mul.w	r3, r3, r2
   15114:	3380      	adds	r3, #128	; 0x80
   15116:	687a      	ldr	r2, [r7, #4]
   15118:	4413      	add	r3, r2
   1511a:	1d1a      	adds	r2, r3, #4
   1511c:	687b      	ldr	r3, [r7, #4]
   1511e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15122:	4619      	mov	r1, r3
   15124:	4610      	mov	r0, r2
   15126:	4b06      	ldr	r3, [pc, #24]	; (15140 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x68>)
   15128:	4798      	blx	r3
	
}
   1512a:	bf00      	nop
   1512c:	3708      	adds	r7, #8
   1512e:	46bd      	mov	sp, r7
   15130:	bd80      	pop	{r7, pc}
   15132:	bf00      	nop
   15134:	00014f15 	.word	0x00014f15
   15138:	2000a1c8 	.word	0x2000a1c8
   1513c:	00016f51 	.word	0x00016f51
   15140:	000180f5 	.word	0x000180f5

00015144 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   15144:	b590      	push	{r4, r7, lr}
   15146:	b083      	sub	sp, #12
   15148:	af00      	add	r7, sp, #0
   1514a:	6078      	str	r0, [r7, #4]
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   1514c:	4934      	ldr	r1, [pc, #208]	; (15220 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xdc>)
   1514e:	4835      	ldr	r0, [pc, #212]	; (15224 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe0>)
   15150:	4b35      	ldr	r3, [pc, #212]	; (15228 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe4>)
   15152:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   15154:	687b      	ldr	r3, [r7, #4]
   15156:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   1515a:	461a      	mov	r2, r3
   1515c:	235c      	movs	r3, #92	; 0x5c
   1515e:	fb03 f302 	mul.w	r3, r3, r2
   15162:	3380      	adds	r3, #128	; 0x80
   15164:	687a      	ldr	r2, [r7, #4]
   15166:	4413      	add	r3, r2
   15168:	1d1a      	adds	r2, r3, #4
   1516a:	687b      	ldr	r3, [r7, #4]
   1516c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   15170:	4619      	mov	r1, r3
   15172:	4610      	mov	r0, r2
   15174:	4b2d      	ldr	r3, [pc, #180]	; (1522c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xe8>)
   15176:	4798      	blx	r3
   15178:	4602      	mov	r2, r0
   1517a:	687b      	ldr	r3, [r7, #4]
   1517c:	67da      	str	r2, [r3, #124]	; 0x7c
	faultData=module[currentModule].fault_data;
   1517e:	687b      	ldr	r3, [r7, #4]
   15180:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15184:	4619      	mov	r1, r3
   15186:	687a      	ldr	r2, [r7, #4]
   15188:	235c      	movs	r3, #92	; 0x5c
   1518a:	fb03 f301 	mul.w	r3, r3, r1
   1518e:	4413      	add	r3, r2
   15190:	338a      	adds	r3, #138	; 0x8a
   15192:	781a      	ldrb	r2, [r3, #0]
   15194:	687b      	ldr	r3, [r7, #4]
   15196:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		if (faultData==VALID_TEMPERATURE)
   1519a:	687b      	ldr	r3, [r7, #4]
   1519c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   151a0:	2b01      	cmp	r3, #1
   151a2:	d112      	bne.n	151ca <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x86>
		{
			values[currentModule][currentChannelIndex]=lastValue;
   151a4:	687b      	ldr	r3, [r7, #4]
   151a6:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   151aa:	4618      	mov	r0, r3
   151ac:	687b      	ldr	r3, [r7, #4]
   151ae:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   151b2:	461c      	mov	r4, r3
   151b4:	687b      	ldr	r3, [r7, #4]
   151b6:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
   151b8:	687a      	ldr	r2, [r7, #4]
   151ba:	4603      	mov	r3, r0
   151bc:	005b      	lsls	r3, r3, #1
   151be:	4403      	add	r3, r0
   151c0:	4423      	add	r3, r4
   151c2:	3318      	adds	r3, #24
   151c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   151c8:	e002      	b.n	151d0 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>
		}
		else
		{
			lastValue=-999;
   151ca:	687b      	ldr	r3, [r7, #4]
   151cc:	4a18      	ldr	r2, [pc, #96]	; (15230 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xec>)
   151ce:	67da      	str	r2, [r3, #124]	; 0x7c
		}
	
	currentChannelIndex++;
   151d0:	687b      	ldr	r3, [r7, #4]
   151d2:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   151d6:	3301      	adds	r3, #1
   151d8:	b2da      	uxtb	r2, r3
   151da:	687b      	ldr	r3, [r7, #4]
   151dc:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   151e0:	687b      	ldr	r3, [r7, #4]
   151e2:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
   151e6:	2b03      	cmp	r3, #3
   151e8:	d114      	bne.n	15214 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xd0>
	{
		currentChannelIndex=0;
   151ea:	687b      	ldr	r3, [r7, #4]
   151ec:	2200      	movs	r2, #0
   151ee:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
		currentModule++;
   151f2:	687b      	ldr	r3, [r7, #4]
   151f4:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   151f8:	3301      	adds	r3, #1
   151fa:	b2da      	uxtb	r2, r3
   151fc:	687b      	ldr	r3, [r7, #4]
   151fe:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
		if (currentModule==NUMBER_LTC2983_MODULES)
   15202:	687b      	ldr	r3, [r7, #4]
   15204:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
   15208:	2b02      	cmp	r3, #2
   1520a:	d103      	bne.n	15214 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0xd0>
		{
			currentModule=0;
   1520c:	687b      	ldr	r3, [r7, #4]
   1520e:	2200      	movs	r2, #0
   15210:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
		}
	} 
	else
	{
	}
	return lastValue;
   15214:	687b      	ldr	r3, [r7, #4]
   15216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
   15218:	4618      	mov	r0, r3
   1521a:	370c      	adds	r7, #12
   1521c:	46bd      	mov	sp, r7
   1521e:	bd90      	pop	{r4, r7, pc}
   15220:	00014f15 	.word	0x00014f15
   15224:	2000a1c8 	.word	0x2000a1c8
   15228:	00016ee1 	.word	0x00016ee1
   1522c:	0001823d 	.word	0x0001823d
   15230:	c479c000 	.word	0xc479c000

00015234 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
bool	TemperatureSensors_Class::IsConversionFinished(){
   15234:	b480      	push	{r7}
   15236:	b083      	sub	sp, #12
   15238:	af00      	add	r7, sp, #0
   1523a:	6078      	str	r0, [r7, #4]
	return converterReady[0]&converterReady[1];
   1523c:	687b      	ldr	r3, [r7, #4]
   1523e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
   15242:	b2db      	uxtb	r3, r3
   15244:	461a      	mov	r2, r3
   15246:	687b      	ldr	r3, [r7, #4]
   15248:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
   1524c:	b2db      	uxtb	r3, r3
   1524e:	4013      	ands	r3, r2
   15250:	2b00      	cmp	r3, #0
   15252:	bf14      	ite	ne
   15254:	2301      	movne	r3, #1
   15256:	2300      	moveq	r3, #0
   15258:	b2db      	uxtb	r3, r3
}
   1525a:	4618      	mov	r0, r3
   1525c:	370c      	adds	r7, #12
   1525e:	46bd      	mov	sp, r7
   15260:	bc80      	pop	{r7}
   15262:	4770      	bx	lr

00015264 <_ZN24TemperatureSensors_Class14SetModuleReadyEh>:
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
   15264:	b480      	push	{r7}
   15266:	b083      	sub	sp, #12
   15268:	af00      	add	r7, sp, #0
   1526a:	6078      	str	r0, [r7, #4]
   1526c:	460b      	mov	r3, r1
   1526e:	70fb      	strb	r3, [r7, #3]
	module[m].ready=true;
   15270:	78fb      	ldrb	r3, [r7, #3]
   15272:	687a      	ldr	r2, [r7, #4]
   15274:	215c      	movs	r1, #92	; 0x5c
   15276:	fb01 f303 	mul.w	r3, r1, r3
   1527a:	4413      	add	r3, r2
   1527c:	3384      	adds	r3, #132	; 0x84
   1527e:	2201      	movs	r2, #1
   15280:	701a      	strb	r2, [r3, #0]
	return module[m].ready;
   15282:	78fb      	ldrb	r3, [r7, #3]
   15284:	687a      	ldr	r2, [r7, #4]
   15286:	215c      	movs	r1, #92	; 0x5c
   15288:	fb01 f303 	mul.w	r3, r1, r3
   1528c:	4413      	add	r3, r2
   1528e:	3384      	adds	r3, #132	; 0x84
   15290:	781b      	ldrb	r3, [r3, #0]
   15292:	b2db      	uxtb	r3, r3
}
   15294:	4618      	mov	r0, r3
   15296:	370c      	adds	r7, #12
   15298:	46bd      	mov	sp, r7
   1529a:	bc80      	pop	{r7}
   1529c:	4770      	bx	lr
	...

000152a0 <_Z41__static_initialization_and_destruction_0ii>:

TemperatureSensors_Class temperatures(&SPI_TEMP);
   152a0:	b580      	push	{r7, lr}
   152a2:	b082      	sub	sp, #8
   152a4:	af00      	add	r7, sp, #0
   152a6:	6078      	str	r0, [r7, #4]
   152a8:	6039      	str	r1, [r7, #0]
   152aa:	687b      	ldr	r3, [r7, #4]
   152ac:	2b01      	cmp	r3, #1
   152ae:	d115      	bne.n	152dc <_Z41__static_initialization_and_destruction_0ii+0x3c>
   152b0:	683b      	ldr	r3, [r7, #0]
   152b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   152b6:	4293      	cmp	r3, r2
   152b8:	d110      	bne.n	152dc <_Z41__static_initialization_and_destruction_0ii+0x3c>
static LT_SPI	ltSPI;
   152ba:	480a      	ldr	r0, [pc, #40]	; (152e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   152bc:	4b0a      	ldr	r3, [pc, #40]	; (152e8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   152be:	4798      	blx	r3
   152c0:	4a0a      	ldr	r2, [pc, #40]	; (152ec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   152c2:	490b      	ldr	r1, [pc, #44]	; (152f0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   152c4:	4807      	ldr	r0, [pc, #28]	; (152e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   152c6:	4b0b      	ldr	r3, [pc, #44]	; (152f4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   152c8:	4798      	blx	r3
TemperatureSensors_Class temperatures(&SPI_TEMP);
   152ca:	490b      	ldr	r1, [pc, #44]	; (152f8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   152cc:	480b      	ldr	r0, [pc, #44]	; (152fc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   152ce:	4b0c      	ldr	r3, [pc, #48]	; (15300 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   152d0:	4798      	blx	r3
   152d2:	4a06      	ldr	r2, [pc, #24]	; (152ec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   152d4:	490b      	ldr	r1, [pc, #44]	; (15304 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   152d6:	4809      	ldr	r0, [pc, #36]	; (152fc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   152d8:	4b06      	ldr	r3, [pc, #24]	; (152f4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   152da:	4798      	blx	r3
   152dc:	bf00      	nop
   152de:	3708      	adds	r7, #8
   152e0:	46bd      	mov	sp, r7
   152e2:	bd80      	pop	{r7, pc}
   152e4:	20009b64 	.word	0x20009b64
   152e8:	00018795 	.word	0x00018795
   152ec:	20000000 	.word	0x20000000
   152f0:	000187bd 	.word	0x000187bd
   152f4:	00018bf5 	.word	0x00018bf5
   152f8:	2000a544 	.word	0x2000a544
   152fc:	20009b78 	.word	0x20009b78
   15300:	00014f39 	.word	0x00014f39
   15304:	00014f95 	.word	0x00014f95

00015308 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
   15308:	b580      	push	{r7, lr}
   1530a:	af00      	add	r7, sp, #0
   1530c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15310:	2001      	movs	r0, #1
   15312:	4b01      	ldr	r3, [pc, #4]	; (15318 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x10>)
   15314:	4798      	blx	r3
   15316:	bd80      	pop	{r7, pc}
   15318:	000152a1 	.word	0x000152a1

0001531c <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   1531c:	b480      	push	{r7}
   1531e:	b083      	sub	sp, #12
   15320:	af00      	add	r7, sp, #0
   15322:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   15324:	4a04      	ldr	r2, [pc, #16]	; (15338 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   15326:	687b      	ldr	r3, [r7, #4]
   15328:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   1532a:	687b      	ldr	r3, [r7, #4]
   1532c:	4618      	mov	r0, r3
   1532e:	370c      	adds	r7, #12
   15330:	46bd      	mov	sp, r7
   15332:	bc80      	pop	{r7}
   15334:	4770      	bx	lr
   15336:	bf00      	nop
   15338:	20009cc8 	.word	0x20009cc8

0001533c <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   1533c:	b480      	push	{r7}
   1533e:	b083      	sub	sp, #12
   15340:	af00      	add	r7, sp, #0
   15342:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   15344:	687b      	ldr	r3, [r7, #4]
   15346:	4618      	mov	r0, r3
   15348:	370c      	adds	r7, #12
   1534a:	46bd      	mov	sp, r7
   1534c:	bc80      	pop	{r7}
   1534e:	4770      	bx	lr

00015350 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   15350:	b580      	push	{r7, lr}
   15352:	b082      	sub	sp, #8
   15354:	af00      	add	r7, sp, #0
   15356:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   15358:	687b      	ldr	r3, [r7, #4]
   1535a:	68da      	ldr	r2, [r3, #12]
   1535c:	687b      	ldr	r3, [r7, #4]
   1535e:	3310      	adds	r3, #16
   15360:	4619      	mov	r1, r3
   15362:	4610      	mov	r0, r2
   15364:	4b09      	ldr	r3, [pc, #36]	; (1538c <_ZN13SPI_Syn_Class4initEv+0x3c>)
   15366:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   15368:	687b      	ldr	r3, [r7, #4]
   1536a:	68db      	ldr	r3, [r3, #12]
   1536c:	4618      	mov	r0, r3
   1536e:	4b08      	ldr	r3, [pc, #32]	; (15390 <_ZN13SPI_Syn_Class4initEv+0x40>)
   15370:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   15372:	687b      	ldr	r3, [r7, #4]
   15374:	4a07      	ldr	r2, [pc, #28]	; (15394 <_ZN13SPI_Syn_Class4initEv+0x44>)
   15376:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   15378:	687b      	ldr	r3, [r7, #4]
   1537a:	4a06      	ldr	r2, [pc, #24]	; (15394 <_ZN13SPI_Syn_Class4initEv+0x44>)
   1537c:	609a      	str	r2, [r3, #8]
	ready=true;
   1537e:	687b      	ldr	r3, [r7, #4]
   15380:	2201      	movs	r2, #1
   15382:	701a      	strb	r2, [r3, #0]
	
}
   15384:	bf00      	nop
   15386:	3708      	adds	r7, #8
   15388:	46bd      	mov	sp, r7
   1538a:	bd80      	pop	{r7, pc}
   1538c:	00006b15 	.word	0x00006b15
   15390:	00006989 	.word	0x00006989
   15394:	20009ccc 	.word	0x20009ccc

00015398 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   15398:	b480      	push	{r7}
   1539a:	b083      	sub	sp, #12
   1539c:	af00      	add	r7, sp, #0
   1539e:	6078      	str	r0, [r7, #4]
   153a0:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   153a2:	4a05      	ldr	r2, [pc, #20]	; (153b8 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   153a4:	687b      	ldr	r3, [r7, #4]
   153a6:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   153a8:	687b      	ldr	r3, [r7, #4]
   153aa:	683a      	ldr	r2, [r7, #0]
   153ac:	60da      	str	r2, [r3, #12]
}
   153ae:	bf00      	nop
   153b0:	370c      	adds	r7, #12
   153b2:	46bd      	mov	sp, r7
   153b4:	bc80      	pop	{r7}
   153b6:	4770      	bx	lr
   153b8:	20009cc8 	.word	0x20009cc8

000153bc <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   153bc:	b580      	push	{r7, lr}
   153be:	b082      	sub	sp, #8
   153c0:	af00      	add	r7, sp, #0
   153c2:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   153c4:	687b      	ldr	r3, [r7, #4]
   153c6:	68da      	ldr	r2, [r3, #12]
   153c8:	687b      	ldr	r3, [r7, #4]
   153ca:	3310      	adds	r3, #16
   153cc:	4619      	mov	r1, r3
   153ce:	4610      	mov	r0, r2
   153d0:	4b07      	ldr	r3, [pc, #28]	; (153f0 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   153d2:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   153d4:	687b      	ldr	r3, [r7, #4]
   153d6:	68db      	ldr	r3, [r3, #12]
   153d8:	4618      	mov	r0, r3
   153da:	4b06      	ldr	r3, [pc, #24]	; (153f4 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   153dc:	4798      	blx	r3
	ready=true;
   153de:	687b      	ldr	r3, [r7, #4]
   153e0:	2201      	movs	r2, #1
   153e2:	701a      	strb	r2, [r3, #0]
	return 0;
   153e4:	2300      	movs	r3, #0
}
   153e6:	4618      	mov	r0, r3
   153e8:	3708      	adds	r7, #8
   153ea:	46bd      	mov	sp, r7
   153ec:	bd80      	pop	{r7, pc}
   153ee:	bf00      	nop
   153f0:	00006b15 	.word	0x00006b15
   153f4:	00006989 	.word	0x00006989

000153f8 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   153f8:	b580      	push	{r7, lr}
   153fa:	b086      	sub	sp, #24
   153fc:	af00      	add	r7, sp, #0
   153fe:	60f8      	str	r0, [r7, #12]
   15400:	60b9      	str	r1, [r7, #8]
   15402:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   15404:	68fb      	ldr	r3, [r7, #12]
   15406:	2201      	movs	r2, #1
   15408:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   1540a:	68fb      	ldr	r3, [r7, #12]
   1540c:	691b      	ldr	r3, [r3, #16]
   1540e:	687a      	ldr	r2, [r7, #4]
   15410:	b292      	uxth	r2, r2
   15412:	68b9      	ldr	r1, [r7, #8]
   15414:	4618      	mov	r0, r3
   15416:	4b08      	ldr	r3, [pc, #32]	; (15438 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   15418:	4798      	blx	r3
   1541a:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   1541c:	697b      	ldr	r3, [r7, #20]
   1541e:	2b00      	cmp	r3, #0
   15420:	bf14      	ite	ne
   15422:	2301      	movne	r3, #1
   15424:	2300      	moveq	r3, #0
   15426:	b2da      	uxtb	r2, r3
   15428:	68fb      	ldr	r3, [r7, #12]
   1542a:	761a      	strb	r2, [r3, #24]
	 return w;
   1542c:	697b      	ldr	r3, [r7, #20]
	
}
   1542e:	4618      	mov	r0, r3
   15430:	3718      	adds	r7, #24
   15432:	46bd      	mov	sp, r7
   15434:	bd80      	pop	{r7, pc}
   15436:	bf00      	nop
   15438:	00018b55 	.word	0x00018b55

0001543c <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   1543c:	b580      	push	{r7, lr}
   1543e:	b086      	sub	sp, #24
   15440:	af00      	add	r7, sp, #0
   15442:	60f8      	str	r0, [r7, #12]
   15444:	60b9      	str	r1, [r7, #8]
   15446:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   15448:	68fb      	ldr	r3, [r7, #12]
   1544a:	2201      	movs	r2, #1
   1544c:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   1544e:	68fb      	ldr	r3, [r7, #12]
   15450:	691b      	ldr	r3, [r3, #16]
   15452:	687a      	ldr	r2, [r7, #4]
   15454:	b292      	uxth	r2, r2
   15456:	68b9      	ldr	r1, [r7, #8]
   15458:	4618      	mov	r0, r3
   1545a:	4b08      	ldr	r3, [pc, #32]	; (1547c <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   1545c:	4798      	blx	r3
   1545e:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   15460:	697b      	ldr	r3, [r7, #20]
   15462:	2b00      	cmp	r3, #0
   15464:	bf14      	ite	ne
   15466:	2301      	movne	r3, #1
   15468:	2300      	moveq	r3, #0
   1546a:	b2da      	uxtb	r2, r3
   1546c:	68fb      	ldr	r3, [r7, #12]
   1546e:	765a      	strb	r2, [r3, #25]
	return  r;
   15470:	697b      	ldr	r3, [r7, #20]
}
   15472:	4618      	mov	r0, r3
   15474:	3718      	adds	r7, #24
   15476:	46bd      	mov	sp, r7
   15478:	bd80      	pop	{r7, pc}
   1547a:	bf00      	nop
   1547c:	00018ba5 	.word	0x00018ba5

00015480 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   15480:	b580      	push	{r7, lr}
   15482:	b082      	sub	sp, #8
   15484:	af00      	add	r7, sp, #0
   15486:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   15488:	687b      	ldr	r3, [r7, #4]
   1548a:	68db      	ldr	r3, [r3, #12]
   1548c:	4618      	mov	r0, r3
   1548e:	4b03      	ldr	r3, [pc, #12]	; (1549c <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   15490:	4798      	blx	r3
	
}
   15492:	bf00      	nop
   15494:	3708      	adds	r7, #8
   15496:	46bd      	mov	sp, r7
   15498:	bd80      	pop	{r7, pc}
   1549a:	bf00      	nop
   1549c:	000069c5 	.word	0x000069c5

000154a0 <_ZN13SPI_Syn_Class10IsSPIReadyEv>:
/*
void SPI_Asyn_Class::classInterruptHandler(void) {
	SPICallbackHandler(setSPIReady());
}
*/
bool SPI_Syn_Class::IsSPIReady(void){
   154a0:	b480      	push	{r7}
   154a2:	b083      	sub	sp, #12
   154a4:	af00      	add	r7, sp, #0
   154a6:	6078      	str	r0, [r7, #4]
	ready=~(rFlag||wFlag);
   154a8:	687b      	ldr	r3, [r7, #4]
   154aa:	2201      	movs	r2, #1
   154ac:	701a      	strb	r2, [r3, #0]
	//spi_m_async_register_callback(&SPI0, SPI_M_ASYNC_CB_XFER, (FUNC_PTR)(&SPI_Asyn_Class::complete_cb_SPI_0));
	if (ready)
   154ae:	687b      	ldr	r3, [r7, #4]
   154b0:	781b      	ldrb	r3, [r3, #0]
   154b2:	b2db      	uxtb	r3, r3
   154b4:	2b00      	cmp	r3, #0
   154b6:	d001      	beq.n	154bc <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1c>
	{
		
		return true;
   154b8:	2301      	movs	r3, #1
   154ba:	e000      	b.n	154be <_ZN13SPI_Syn_Class10IsSPIReadyEv+0x1e>
	} 
	else
	{
		return false;
   154bc:	2300      	movs	r3, #0
	}
	return ready;
	
}
   154be:	4618      	mov	r0, r3
   154c0:	370c      	adds	r7, #12
   154c2:	46bd      	mov	sp, r7
   154c4:	bc80      	pop	{r7}
   154c6:	4770      	bx	lr

000154c8 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc>:
// default constructor
AT24MAC_Class::AT24MAC_Class()
{
	ptrAT24MACClass=this;
} //AT24MAC_Class
AT24MAC_Class::AT24MAC_Class(i2c_m_async_desc *i2c)
   154c8:	b480      	push	{r7}
   154ca:	b083      	sub	sp, #12
   154cc:	af00      	add	r7, sp, #0
   154ce:	6078      	str	r0, [r7, #4]
   154d0:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=i2c;
   154d2:	687b      	ldr	r3, [r7, #4]
   154d4:	683a      	ldr	r2, [r7, #0]
   154d6:	605a      	str	r2, [r3, #4]
	ptrAT24MACClass=this;
   154d8:	4a05      	ldr	r2, [pc, #20]	; (154f0 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x28>)
   154da:	687b      	ldr	r3, [r7, #4]
   154dc:	6013      	str	r3, [r2, #0]
	i2ca=&i2cAsync;
   154de:	687b      	ldr	r3, [r7, #4]
   154e0:	4a04      	ldr	r2, [pc, #16]	; (154f4 <_ZN13AT24MAC_ClassC1EP16i2c_m_async_desc+0x2c>)
   154e2:	609a      	str	r2, [r3, #8]
} //AT24MAC_Class
   154e4:	687b      	ldr	r3, [r7, #4]
   154e6:	4618      	mov	r0, r3
   154e8:	370c      	adds	r7, #12
   154ea:	46bd      	mov	sp, r7
   154ec:	bc80      	pop	{r7}
   154ee:	4770      	bx	lr
   154f0:	20009d0c 	.word	0x20009d0c
   154f4:	20009d14 	.word	0x20009d14

000154f8 <_ZN13AT24MAC_ClassD1Ev>:


// default destructor
AT24MAC_Class::~AT24MAC_Class()
   154f8:	b480      	push	{r7}
   154fa:	b083      	sub	sp, #12
   154fc:	af00      	add	r7, sp, #0
   154fe:	6078      	str	r0, [r7, #4]
{
} //~AT24MAC_Class
   15500:	687b      	ldr	r3, [r7, #4]
   15502:	4618      	mov	r0, r3
   15504:	370c      	adds	r7, #12
   15506:	46bd      	mov	sp, r7
   15508:	bc80      	pop	{r7}
   1550a:	4770      	bx	lr

0001550c <_ZN13AT24MAC_Class4InitEv>:



bool AT24MAC_Class::Init(void){
   1550c:	b580      	push	{r7, lr}
   1550e:	b082      	sub	sp, #8
   15510:	af00      	add	r7, sp, #0
   15512:	6078      	str	r0, [r7, #4]
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
   15514:	2156      	movs	r1, #86	; 0x56
   15516:	6878      	ldr	r0, [r7, #4]
   15518:	4b04      	ldr	r3, [pc, #16]	; (1552c <_ZN13AT24MAC_Class4InitEv+0x20>)
   1551a:	4798      	blx	r3
	return SelfTest();
   1551c:	6878      	ldr	r0, [r7, #4]
   1551e:	4b04      	ldr	r3, [pc, #16]	; (15530 <_ZN13AT24MAC_Class4InitEv+0x24>)
   15520:	4798      	blx	r3
   15522:	4603      	mov	r3, r0
}
   15524:	4618      	mov	r0, r3
   15526:	3708      	adds	r7, #8
   15528:	46bd      	mov	sp, r7
   1552a:	bd80      	pop	{r7, pc}
   1552c:	00015535 	.word	0x00015535
   15530:	000157e5 	.word	0x000157e5

00015534 <_ZN13AT24MAC_Class4InitEh>:
void AT24MAC_Class::Init(i2c_m_async_desc *i2c){
	ptrI2CDescr=i2c;
	Init((uint8_t)AT24MAC_DEVICE_ADDRESS);
}

void AT24MAC_Class::Init(uint8_t addr ){
   15534:	b580      	push	{r7, lr}
   15536:	b082      	sub	sp, #8
   15538:	af00      	add	r7, sp, #0
   1553a:	6078      	str	r0, [r7, #4]
   1553c:	460b      	mov	r3, r1
   1553e:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
   15540:	687b      	ldr	r3, [r7, #4]
   15542:	78fa      	ldrb	r2, [r7, #3]
   15544:	731a      	strb	r2, [r3, #12]
	i2ca->Set_descriptor(ptrI2CDescr);
   15546:	687b      	ldr	r3, [r7, #4]
   15548:	689a      	ldr	r2, [r3, #8]
   1554a:	687b      	ldr	r3, [r7, #4]
   1554c:	685b      	ldr	r3, [r3, #4]
   1554e:	4619      	mov	r1, r3
   15550:	4610      	mov	r0, r2
   15552:	4b09      	ldr	r3, [pc, #36]	; (15578 <_ZN13AT24MAC_Class4InitEh+0x44>)
   15554:	4798      	blx	r3
	isReady=i2ca->Init(addr)==0;
   15556:	687b      	ldr	r3, [r7, #4]
   15558:	689b      	ldr	r3, [r3, #8]
   1555a:	78fa      	ldrb	r2, [r7, #3]
   1555c:	4611      	mov	r1, r2
   1555e:	4618      	mov	r0, r3
   15560:	4b06      	ldr	r3, [pc, #24]	; (1557c <_ZN13AT24MAC_Class4InitEh+0x48>)
   15562:	4798      	blx	r3
   15564:	4603      	mov	r3, r0
   15566:	f083 0301 	eor.w	r3, r3, #1
   1556a:	b2da      	uxtb	r2, r3
   1556c:	687b      	ldr	r3, [r7, #4]
   1556e:	701a      	strb	r2, [r3, #0]
}
   15570:	bf00      	nop
   15572:	3708      	adds	r7, #8
   15574:	46bd      	mov	sp, r7
   15576:	bd80      	pop	{r7, pc}
   15578:	000148e9 	.word	0x000148e9
   1557c:	000149f1 	.word	0x000149f1

00015580 <_ZN13AT24MAC_Class12WriteAddressEPhhh>:
	array[1]=value;
	uint32_t w= i2ca->Write(array,2);
	while(!i2ca->txReady);
	return	w;
}
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint8_t addr, uint8_t size){
   15580:	b580      	push	{r7, lr}
   15582:	b08c      	sub	sp, #48	; 0x30
   15584:	af00      	add	r7, sp, #0
   15586:	60f8      	str	r0, [r7, #12]
   15588:	60b9      	str	r1, [r7, #8]
   1558a:	4611      	mov	r1, r2
   1558c:	461a      	mov	r2, r3
   1558e:	460b      	mov	r3, r1
   15590:	71fb      	strb	r3, [r7, #7]
   15592:	4613      	mov	r3, r2
   15594:	71bb      	strb	r3, [r7, #6]
	uint32_t w;
	uint8_t i;
	uint8_t	*ptr=p;
   15596:	68bb      	ldr	r3, [r7, #8]
   15598:	627b      	str	r3, [r7, #36]	; 0x24
// 		delay_us(1500);
// 		p++;
// 	
// 		while(!AcknolledgePolling());
// 	}
	isReady=false;
   1559a:	68fb      	ldr	r3, [r7, #12]
   1559c:	2200      	movs	r2, #0
   1559e:	701a      	strb	r2, [r3, #0]
	uint8_t array[1+AT24MAC_BUFFER_SIZE],value,size0,addr0=addr;
   155a0:	79fb      	ldrb	r3, [r7, #7]
   155a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if ( size>AT24MAC_BUFFER_SIZE)
   155a6:	79bb      	ldrb	r3, [r7, #6]
   155a8:	2b10      	cmp	r3, #16
   155aa:	dd6e      	ble.n	1568a <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x10a>
	{
		array[0]=addr0;
   155ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   155b0:	743b      	strb	r3, [r7, #16]
		size0=AT24MAC_BUFFER_SIZE-addr%(AT24MAC_BUFFER_SIZE);
   155b2:	79fb      	ldrb	r3, [r7, #7]
   155b4:	f003 030f 	and.w	r3, r3, #15
   155b8:	b2db      	uxtb	r3, r3
   155ba:	f1c3 0310 	rsb	r3, r3, #16
   155be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		memcpy((void*)&array[1],ptr,size0);
   155c2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
   155c6:	f107 0310 	add.w	r3, r7, #16
   155ca:	3301      	adds	r3, #1
   155cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   155ce:	4618      	mov	r0, r3
   155d0:	4b41      	ldr	r3, [pc, #260]	; (156d8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   155d2:	4798      	blx	r3
		w= i2ca->Write(array,1+size0);
   155d4:	68fb      	ldr	r3, [r7, #12]
   155d6:	6898      	ldr	r0, [r3, #8]
   155d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   155dc:	b29b      	uxth	r3, r3
   155de:	3301      	adds	r3, #1
   155e0:	b29a      	uxth	r2, r3
   155e2:	f107 0310 	add.w	r3, r7, #16
   155e6:	4619      	mov	r1, r3
   155e8:	4b3c      	ldr	r3, [pc, #240]	; (156dc <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   155ea:	4798      	blx	r3
   155ec:	4603      	mov	r3, r0
   155ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(!i2ca->txReady);
   155f0:	68fb      	ldr	r3, [r7, #12]
   155f2:	689b      	ldr	r3, [r3, #8]
   155f4:	7d1b      	ldrb	r3, [r3, #20]
   155f6:	b2db      	uxtb	r3, r3
   155f8:	f083 0301 	eor.w	r3, r3, #1
   155fc:	b2db      	uxtb	r3, r3
   155fe:	2b00      	cmp	r3, #0
   15600:	d000      	beq.n	15604 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x84>
   15602:	e7f5      	b.n	155f0 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x70>
		ptr+=size0;
   15604:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   15608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1560a:	4413      	add	r3, r2
   1560c:	627b      	str	r3, [r7, #36]	; 0x24
		addr0+=size0;
   1560e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   15612:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   15616:	4413      	add	r3, r2
   15618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for (i = size0; i <size+1; i+=AT24MAC_BUFFER_SIZE)
   1561c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   15620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   15624:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   15628:	79bb      	ldrb	r3, [r7, #6]
   1562a:	3301      	adds	r3, #1
   1562c:	429a      	cmp	r2, r3
   1562e:	da4d      	bge.n	156cc <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x14c>
		{
			array[0]=addr0;
   15630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   15634:	743b      	strb	r3, [r7, #16]
			memcpy((void*)&array[1],ptr,AT24MAC_BUFFER_SIZE);
   15636:	f107 0310 	add.w	r3, r7, #16
   1563a:	3301      	adds	r3, #1
   1563c:	2210      	movs	r2, #16
   1563e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15640:	4618      	mov	r0, r3
   15642:	4b25      	ldr	r3, [pc, #148]	; (156d8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   15644:	4798      	blx	r3
			w= i2ca->Write(array,1+AT24MAC_BUFFER_SIZE);
   15646:	68fb      	ldr	r3, [r7, #12]
   15648:	689b      	ldr	r3, [r3, #8]
   1564a:	f107 0110 	add.w	r1, r7, #16
   1564e:	2211      	movs	r2, #17
   15650:	4618      	mov	r0, r3
   15652:	4b22      	ldr	r3, [pc, #136]	; (156dc <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   15654:	4798      	blx	r3
   15656:	4603      	mov	r3, r0
   15658:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(!i2ca->txReady);
   1565a:	68fb      	ldr	r3, [r7, #12]
   1565c:	689b      	ldr	r3, [r3, #8]
   1565e:	7d1b      	ldrb	r3, [r3, #20]
   15660:	b2db      	uxtb	r3, r3
   15662:	f083 0301 	eor.w	r3, r3, #1
   15666:	b2db      	uxtb	r3, r3
   15668:	2b00      	cmp	r3, #0
   1566a:	d000      	beq.n	1566e <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xee>
   1566c:	e7f5      	b.n	1565a <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xda>
			ptr+=AT24MAC_BUFFER_SIZE;
   1566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15670:	3310      	adds	r3, #16
   15672:	627b      	str	r3, [r7, #36]	; 0x24
			addr0+=AT24MAC_BUFFER_SIZE;
   15674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   15678:	3310      	adds	r3, #16
   1567a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for (i = size0; i <size+1; i+=AT24MAC_BUFFER_SIZE)
   1567e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   15682:	3310      	adds	r3, #16
   15684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   15688:	e7cc      	b.n	15624 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0xa4>
		}
		
	} 
	else
	{
		array[0]=addr;
   1568a:	79fb      	ldrb	r3, [r7, #7]
   1568c:	743b      	strb	r3, [r7, #16]
		memcpy((void*)&array[1],p,size);
   1568e:	79ba      	ldrb	r2, [r7, #6]
   15690:	f107 0310 	add.w	r3, r7, #16
   15694:	3301      	adds	r3, #1
   15696:	68b9      	ldr	r1, [r7, #8]
   15698:	4618      	mov	r0, r3
   1569a:	4b0f      	ldr	r3, [pc, #60]	; (156d8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x158>)
   1569c:	4798      	blx	r3
		w= i2ca->Write(array,1+size);
   1569e:	68fb      	ldr	r3, [r7, #12]
   156a0:	6898      	ldr	r0, [r3, #8]
   156a2:	79bb      	ldrb	r3, [r7, #6]
   156a4:	b29b      	uxth	r3, r3
   156a6:	3301      	adds	r3, #1
   156a8:	b29a      	uxth	r2, r3
   156aa:	f107 0310 	add.w	r3, r7, #16
   156ae:	4619      	mov	r1, r3
   156b0:	4b0a      	ldr	r3, [pc, #40]	; (156dc <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x15c>)
   156b2:	4798      	blx	r3
   156b4:	4603      	mov	r3, r0
   156b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		//AcknolledgePolling();
		while(!i2ca->txReady);
   156b8:	68fb      	ldr	r3, [r7, #12]
   156ba:	689b      	ldr	r3, [r3, #8]
   156bc:	7d1b      	ldrb	r3, [r3, #20]
   156be:	b2db      	uxtb	r3, r3
   156c0:	f083 0301 	eor.w	r3, r3, #1
   156c4:	b2db      	uxtb	r3, r3
   156c6:	2b00      	cmp	r3, #0
   156c8:	d000      	beq.n	156cc <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x14c>
   156ca:	e7f5      	b.n	156b8 <_ZN13AT24MAC_Class12WriteAddressEPhhh+0x138>
	}
	
	
	
	return	w;
   156cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   156ce:	4618      	mov	r0, r3
   156d0:	3730      	adds	r7, #48	; 0x30
   156d2:	46bd      	mov	sp, r7
   156d4:	bd80      	pop	{r7, pc}
   156d6:	bf00      	nop
   156d8:	0001b35d 	.word	0x0001b35d
   156dc:	00014a41 	.word	0x00014a41

000156e0 <_ZN13AT24MAC_Class12WriteAddressEPhth>:
uint32_t AT24MAC_Class::WriteAddress(uint8_t *p, uint16_t addr, uint8_t size){
   156e0:	b590      	push	{r4, r7, lr}
   156e2:	b087      	sub	sp, #28
   156e4:	af00      	add	r7, sp, #0
   156e6:	60f8      	str	r0, [r7, #12]
   156e8:	60b9      	str	r1, [r7, #8]
   156ea:	4611      	mov	r1, r2
   156ec:	461a      	mov	r2, r3
   156ee:	460b      	mov	r3, r1
   156f0:	80fb      	strh	r3, [r7, #6]
   156f2:	4613      	mov	r3, r2
   156f4:	717b      	strb	r3, [r7, #5]
	

	uint8_t add=(uint8_t)(0xff&addr);
   156f6:	88fb      	ldrh	r3, [r7, #6]
   156f8:	75fb      	strb	r3, [r7, #23]
	return	WriteAddress(p,add,size);
   156fa:	797b      	ldrb	r3, [r7, #5]
   156fc:	7dfa      	ldrb	r2, [r7, #23]
   156fe:	68b9      	ldr	r1, [r7, #8]
   15700:	68f8      	ldr	r0, [r7, #12]
   15702:	4c03      	ldr	r4, [pc, #12]	; (15710 <_ZN13AT24MAC_Class12WriteAddressEPhth+0x30>)
   15704:	47a0      	blx	r4
   15706:	4603      	mov	r3, r0
}
   15708:	4618      	mov	r0, r3
   1570a:	371c      	adds	r7, #28
   1570c:	46bd      	mov	sp, r7
   1570e:	bd90      	pop	{r4, r7, pc}
   15710:	00015581 	.word	0x00015581

00015714 <_ZN13AT24MAC_Class11ReadAddressEPhhh>:
	i2ca->Read(&value,1);
	
	return value;
}

uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint8_t addr, uint8_t size){
   15714:	b580      	push	{r7, lr}
   15716:	b086      	sub	sp, #24
   15718:	af00      	add	r7, sp, #0
   1571a:	60f8      	str	r0, [r7, #12]
   1571c:	60b9      	str	r1, [r7, #8]
   1571e:	4611      	mov	r1, r2
   15720:	461a      	mov	r2, r3
   15722:	460b      	mov	r3, r1
   15724:	71fb      	strb	r3, [r7, #7]
   15726:	4613      	mov	r3, r2
   15728:	71bb      	strb	r3, [r7, #6]
	
	uint32_t r;
	uint8_t	value;
	while(!i2ca->rxReady);
   1572a:	68fb      	ldr	r3, [r7, #12]
   1572c:	689b      	ldr	r3, [r3, #8]
   1572e:	7d5b      	ldrb	r3, [r3, #21]
   15730:	b2db      	uxtb	r3, r3
   15732:	f083 0301 	eor.w	r3, r3, #1
   15736:	b2db      	uxtb	r3, r3
   15738:	2b00      	cmp	r3, #0
   1573a:	d000      	beq.n	1573e <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x2a>
   1573c:	e7f5      	b.n	1572a <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x16>
	i2ca->Write(&addr,1);
   1573e:	68fb      	ldr	r3, [r7, #12]
   15740:	689b      	ldr	r3, [r3, #8]
   15742:	1df9      	adds	r1, r7, #7
   15744:	2201      	movs	r2, #1
   15746:	4618      	mov	r0, r3
   15748:	4b12      	ldr	r3, [pc, #72]	; (15794 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x80>)
   1574a:	4798      	blx	r3
	while(!i2ca->txReady);
   1574c:	68fb      	ldr	r3, [r7, #12]
   1574e:	689b      	ldr	r3, [r3, #8]
   15750:	7d1b      	ldrb	r3, [r3, #20]
   15752:	b2db      	uxtb	r3, r3
   15754:	f083 0301 	eor.w	r3, r3, #1
   15758:	b2db      	uxtb	r3, r3
   1575a:	2b00      	cmp	r3, #0
   1575c:	d000      	beq.n	15760 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x4c>
   1575e:	e7f5      	b.n	1574c <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x38>
	r= i2ca->Read(p,size);
   15760:	68fb      	ldr	r3, [r7, #12]
   15762:	689b      	ldr	r3, [r3, #8]
   15764:	79ba      	ldrb	r2, [r7, #6]
   15766:	b292      	uxth	r2, r2
   15768:	68b9      	ldr	r1, [r7, #8]
   1576a:	4618      	mov	r0, r3
   1576c:	4b0a      	ldr	r3, [pc, #40]	; (15798 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x84>)
   1576e:	4798      	blx	r3
   15770:	4603      	mov	r3, r0
   15772:	617b      	str	r3, [r7, #20]
	while(!i2ca->rxReady);
   15774:	68fb      	ldr	r3, [r7, #12]
   15776:	689b      	ldr	r3, [r3, #8]
   15778:	7d5b      	ldrb	r3, [r3, #21]
   1577a:	b2db      	uxtb	r3, r3
   1577c:	f083 0301 	eor.w	r3, r3, #1
   15780:	b2db      	uxtb	r3, r3
   15782:	2b00      	cmp	r3, #0
   15784:	d000      	beq.n	15788 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x74>
   15786:	e7f5      	b.n	15774 <_ZN13AT24MAC_Class11ReadAddressEPhhh+0x60>
			localAddress+=localSize;
		}
	}
	*/
	
	return r;
   15788:	697b      	ldr	r3, [r7, #20]
}
   1578a:	4618      	mov	r0, r3
   1578c:	3718      	adds	r7, #24
   1578e:	46bd      	mov	sp, r7
   15790:	bd80      	pop	{r7, pc}
   15792:	bf00      	nop
   15794:	00014a41 	.word	0x00014a41
   15798:	00014a85 	.word	0x00014a85

0001579c <_ZN13AT24MAC_Class11ReadAddressEPhth>:
uint32_t AT24MAC_Class::ReadAddress(uint8_t *p, uint16_t addr, uint8_t size){
   1579c:	b590      	push	{r4, r7, lr}
   1579e:	b087      	sub	sp, #28
   157a0:	af00      	add	r7, sp, #0
   157a2:	60f8      	str	r0, [r7, #12]
   157a4:	60b9      	str	r1, [r7, #8]
   157a6:	4611      	mov	r1, r2
   157a8:	461a      	mov	r2, r3
   157aa:	460b      	mov	r3, r1
   157ac:	80fb      	strh	r3, [r7, #6]
   157ae:	4613      	mov	r3, r2
   157b0:	717b      	strb	r3, [r7, #5]
	uint8_t add=(uint8_t)(0xff&addr);
   157b2:	88fb      	ldrh	r3, [r7, #6]
   157b4:	75fb      	strb	r3, [r7, #23]
	while(!i2ca->rxReady);
   157b6:	68fb      	ldr	r3, [r7, #12]
   157b8:	689b      	ldr	r3, [r3, #8]
   157ba:	7d5b      	ldrb	r3, [r3, #21]
   157bc:	b2db      	uxtb	r3, r3
   157be:	f083 0301 	eor.w	r3, r3, #1
   157c2:	b2db      	uxtb	r3, r3
   157c4:	2b00      	cmp	r3, #0
   157c6:	d000      	beq.n	157ca <_ZN13AT24MAC_Class11ReadAddressEPhth+0x2e>
   157c8:	e7f5      	b.n	157b6 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x1a>
	return ReadAddress(p,add,size);
   157ca:	797b      	ldrb	r3, [r7, #5]
   157cc:	7dfa      	ldrb	r2, [r7, #23]
   157ce:	68b9      	ldr	r1, [r7, #8]
   157d0:	68f8      	ldr	r0, [r7, #12]
   157d2:	4c03      	ldr	r4, [pc, #12]	; (157e0 <_ZN13AT24MAC_Class11ReadAddressEPhth+0x44>)
   157d4:	47a0      	blx	r4
   157d6:	4603      	mov	r3, r0
}
   157d8:	4618      	mov	r0, r3
   157da:	371c      	adds	r7, #28
   157dc:	46bd      	mov	sp, r7
   157de:	bd90      	pop	{r4, r7, pc}
   157e0:	00015715 	.word	0x00015715

000157e4 <_ZN13AT24MAC_Class8SelfTestEv>:
		GetAcknowledge();
	} while (!IsReady());
	return isReady;
}

bool	AT24MAC_Class::SelfTest(void){
   157e4:	b590      	push	{r4, r7, lr}
   157e6:	b085      	sub	sp, #20
   157e8:	af00      	add	r7, sp, #0
   157ea:	6078      	str	r0, [r7, #4]
	currentAddress=AT24MAC_MEMORY_SIZE-AT24MAC_BUFFER_SIZE*2;
   157ec:	687b      	ldr	r3, [r7, #4]
   157ee:	22e0      	movs	r2, #224	; 0xe0
   157f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   157f4:	2300      	movs	r3, #0
   157f6:	60fb      	str	r3, [r7, #12]
   157f8:	68fb      	ldr	r3, [r7, #12]
   157fa:	2b0f      	cmp	r3, #15
   157fc:	dc18      	bgt.n	15830 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
		tx_buffer[i] = (uint8_t)rand();
   157fe:	4b33      	ldr	r3, [pc, #204]	; (158cc <_ZN13AT24MAC_Class8SelfTestEv+0xe8>)
   15800:	4798      	blx	r3
   15802:	4603      	mov	r3, r0
   15804:	b2d9      	uxtb	r1, r3
   15806:	687a      	ldr	r2, [r7, #4]
   15808:	68fb      	ldr	r3, [r7, #12]
   1580a:	4413      	add	r3, r2
   1580c:	330e      	adds	r3, #14
   1580e:	460a      	mov	r2, r1
   15810:	701a      	strb	r2, [r3, #0]
		rx_buffer[i] = (uint8_t)(AT24MAC_BUFFER_SIZE-i);
   15812:	68fb      	ldr	r3, [r7, #12]
   15814:	b2db      	uxtb	r3, r3
   15816:	f1c3 0310 	rsb	r3, r3, #16
   1581a:	b2d9      	uxtb	r1, r3
   1581c:	687a      	ldr	r2, [r7, #4]
   1581e:	68fb      	ldr	r3, [r7, #12]
   15820:	4413      	add	r3, r2
   15822:	331e      	adds	r3, #30
   15824:	460a      	mov	r2, r1
   15826:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < AT24MAC_BUFFER_SIZE ; i++) {
   15828:	68fb      	ldr	r3, [r7, #12]
   1582a:	3301      	adds	r3, #1
   1582c:	60fb      	str	r3, [r7, #12]
   1582e:	e7e3      	b.n	157f8 <_ZN13AT24MAC_Class8SelfTestEv+0x14>
	}

	while(!IsReady());
   15830:	6878      	ldr	r0, [r7, #4]
   15832:	4b27      	ldr	r3, [pc, #156]	; (158d0 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   15834:	4798      	blx	r3
   15836:	4603      	mov	r3, r0
   15838:	f083 0301 	eor.w	r3, r3, #1
   1583c:	b2db      	uxtb	r3, r3
   1583e:	2b00      	cmp	r3, #0
   15840:	d000      	beq.n	15844 <_ZN13AT24MAC_Class8SelfTestEv+0x60>
   15842:	e7f5      	b.n	15830 <_ZN13AT24MAC_Class8SelfTestEv+0x4c>
	WriteAddress(tx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   15844:	687b      	ldr	r3, [r7, #4]
   15846:	f103 010e 	add.w	r1, r3, #14
   1584a:	687b      	ldr	r3, [r7, #4]
   1584c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   15850:	2310      	movs	r3, #16
   15852:	6878      	ldr	r0, [r7, #4]
   15854:	4c1f      	ldr	r4, [pc, #124]	; (158d4 <_ZN13AT24MAC_Class8SelfTestEv+0xf0>)
   15856:	47a0      	blx	r4
	while(!IsReady());
   15858:	6878      	ldr	r0, [r7, #4]
   1585a:	4b1d      	ldr	r3, [pc, #116]	; (158d0 <_ZN13AT24MAC_Class8SelfTestEv+0xec>)
   1585c:	4798      	blx	r3
   1585e:	4603      	mov	r3, r0
   15860:	f083 0301 	eor.w	r3, r3, #1
   15864:	b2db      	uxtb	r3, r3
   15866:	2b00      	cmp	r3, #0
   15868:	d000      	beq.n	1586c <_ZN13AT24MAC_Class8SelfTestEv+0x88>
   1586a:	e7f5      	b.n	15858 <_ZN13AT24MAC_Class8SelfTestEv+0x74>
	ReadAddress(rx_buffer,currentAddress,AT24MAC_BUFFER_SIZE);
   1586c:	687b      	ldr	r3, [r7, #4]
   1586e:	f103 011e 	add.w	r1, r3, #30
   15872:	687b      	ldr	r3, [r7, #4]
   15874:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   15878:	2310      	movs	r3, #16
   1587a:	6878      	ldr	r0, [r7, #4]
   1587c:	4c16      	ldr	r4, [pc, #88]	; (158d8 <_ZN13AT24MAC_Class8SelfTestEv+0xf4>)
   1587e:	47a0      	blx	r4
	isOK = true;
   15880:	687b      	ldr	r3, [r7, #4]
   15882:	2201      	movs	r2, #1
   15884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   15888:	2300      	movs	r3, #0
   1588a:	60bb      	str	r3, [r7, #8]
   1588c:	68bb      	ldr	r3, [r7, #8]
   1588e:	2b0f      	cmp	r3, #15
   15890:	dc14      	bgt.n	158bc <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
		if (tx_buffer[i] != rx_buffer[i]) {
   15892:	687a      	ldr	r2, [r7, #4]
   15894:	68bb      	ldr	r3, [r7, #8]
   15896:	4413      	add	r3, r2
   15898:	330e      	adds	r3, #14
   1589a:	781a      	ldrb	r2, [r3, #0]
   1589c:	6879      	ldr	r1, [r7, #4]
   1589e:	68bb      	ldr	r3, [r7, #8]
   158a0:	440b      	add	r3, r1
   158a2:	331e      	adds	r3, #30
   158a4:	781b      	ldrb	r3, [r3, #0]
   158a6:	429a      	cmp	r2, r3
   158a8:	d004      	beq.n	158b4 <_ZN13AT24MAC_Class8SelfTestEv+0xd0>
			isOK = false;
   158aa:	687b      	ldr	r3, [r7, #4]
   158ac:	2200      	movs	r2, #0
   158ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
// 			usb.print("EEPROM verification failed. Address: ");
// 			usb.print(addr,HEX);
// 			usb<<" bit :"<<i<<NEWLINE;
			//flashAddress=0;
			
			break;
   158b2:	e003      	b.n	158bc <_ZN13AT24MAC_Class8SelfTestEv+0xd8>
	for (int i = 0; i < AT24MAC_BUFFER_SIZE; i++) {
   158b4:	68bb      	ldr	r3, [r7, #8]
   158b6:	3301      	adds	r3, #1
   158b8:	60bb      	str	r3, [r7, #8]
   158ba:	e7e7      	b.n	1588c <_ZN13AT24MAC_Class8SelfTestEv+0xa8>
		}
		
	}
	return isOK;
   158bc:	687b      	ldr	r3, [r7, #4]
   158be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
   158c2:	4618      	mov	r0, r3
   158c4:	3714      	adds	r7, #20
   158c6:	46bd      	mov	sp, r7
   158c8:	bd90      	pop	{r4, r7, pc}
   158ca:	bf00      	nop
   158cc:	0001b52d 	.word	0x0001b52d
   158d0:	000158dd 	.word	0x000158dd
   158d4:	00015581 	.word	0x00015581
   158d8:	00015715 	.word	0x00015715

000158dc <_ZN13AT24MAC_Class7IsReadyEv>:


bool AT24MAC_Class::IsReady(void){
   158dc:	b480      	push	{r7}
   158de:	b083      	sub	sp, #12
   158e0:	af00      	add	r7, sp, #0
   158e2:	6078      	str	r0, [r7, #4]

	if (i2ca->txReady && i2ca->rxReady)
   158e4:	687b      	ldr	r3, [r7, #4]
   158e6:	689b      	ldr	r3, [r3, #8]
   158e8:	7d1b      	ldrb	r3, [r3, #20]
   158ea:	b2db      	uxtb	r3, r3
   158ec:	2b00      	cmp	r3, #0
   158ee:	d007      	beq.n	15900 <_ZN13AT24MAC_Class7IsReadyEv+0x24>
   158f0:	687b      	ldr	r3, [r7, #4]
   158f2:	689b      	ldr	r3, [r3, #8]
   158f4:	7d5b      	ldrb	r3, [r3, #21]
   158f6:	b2db      	uxtb	r3, r3
   158f8:	2b00      	cmp	r3, #0
   158fa:	d001      	beq.n	15900 <_ZN13AT24MAC_Class7IsReadyEv+0x24>
   158fc:	2301      	movs	r3, #1
   158fe:	e000      	b.n	15902 <_ZN13AT24MAC_Class7IsReadyEv+0x26>
   15900:	2300      	movs	r3, #0
   15902:	2b00      	cmp	r3, #0
   15904:	d003      	beq.n	1590e <_ZN13AT24MAC_Class7IsReadyEv+0x32>
	{
		isReady=true;
   15906:	687b      	ldr	r3, [r7, #4]
   15908:	2201      	movs	r2, #1
   1590a:	701a      	strb	r2, [r3, #0]
   1590c:	e002      	b.n	15914 <_ZN13AT24MAC_Class7IsReadyEv+0x38>
	}
	else
	{
		isReady=false;
   1590e:	687b      	ldr	r3, [r7, #4]
   15910:	2200      	movs	r2, #0
   15912:	701a      	strb	r2, [r3, #0]
	}
	return isReady;	
   15914:	687b      	ldr	r3, [r7, #4]
   15916:	781b      	ldrb	r3, [r3, #0]
   15918:	b2db      	uxtb	r3, r3
}
   1591a:	4618      	mov	r0, r3
   1591c:	370c      	adds	r7, #12
   1591e:	46bd      	mov	sp, r7
   15920:	bc80      	pop	{r7}
   15922:	4770      	bx	lr

00015924 <_Z41__static_initialization_and_destruction_0ii>:

   15924:	b580      	push	{r7, lr}
   15926:	b082      	sub	sp, #8
   15928:	af00      	add	r7, sp, #0
   1592a:	6078      	str	r0, [r7, #4]
   1592c:	6039      	str	r1, [r7, #0]
   1592e:	687b      	ldr	r3, [r7, #4]
   15930:	2b01      	cmp	r3, #1
   15932:	d115      	bne.n	15960 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   15934:	683b      	ldr	r3, [r7, #0]
   15936:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1593a:	4293      	cmp	r3, r2
   1593c:	d110      	bne.n	15960 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static  I2C_Asyn_Class	i2cAsync;
   1593e:	480a      	ldr	r0, [pc, #40]	; (15968 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   15940:	4b0a      	ldr	r3, [pc, #40]	; (1596c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   15942:	4798      	blx	r3
   15944:	4a0a      	ldr	r2, [pc, #40]	; (15970 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15946:	490b      	ldr	r1, [pc, #44]	; (15974 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   15948:	4807      	ldr	r0, [pc, #28]	; (15968 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1594a:	4b0b      	ldr	r3, [pc, #44]	; (15978 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1594c:	4798      	blx	r3
   1594e:	490b      	ldr	r1, [pc, #44]	; (1597c <_Z41__static_initialization_and_destruction_0ii+0x58>)
   15950:	480b      	ldr	r0, [pc, #44]	; (15980 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   15952:	4b0c      	ldr	r3, [pc, #48]	; (15984 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   15954:	4798      	blx	r3
   15956:	4a06      	ldr	r2, [pc, #24]	; (15970 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   15958:	490b      	ldr	r1, [pc, #44]	; (15988 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   1595a:	4809      	ldr	r0, [pc, #36]	; (15980 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   1595c:	4b06      	ldr	r3, [pc, #24]	; (15978 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   1595e:	4798      	blx	r3
   15960:	bf00      	nop
   15962:	3708      	adds	r7, #8
   15964:	46bd      	mov	sp, r7
   15966:	bd80      	pop	{r7, pc}
   15968:	20009d14 	.word	0x20009d14
   1596c:	0001484d 	.word	0x0001484d
   15970:	20000000 	.word	0x20000000
   15974:	000148c9 	.word	0x000148c9
   15978:	00018bf5 	.word	0x00018bf5
   1597c:	2000a6c4 	.word	0x2000a6c4
   15980:	20009d58 	.word	0x20009d58
   15984:	000154c9 	.word	0x000154c9
   15988:	000154f9 	.word	0x000154f9

0001598c <_GLOBAL__sub_I_ptrAT24MACClass>:
   1598c:	b580      	push	{r7, lr}
   1598e:	af00      	add	r7, sp, #0
   15990:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15994:	2001      	movs	r0, #1
   15996:	4b01      	ldr	r3, [pc, #4]	; (1599c <_GLOBAL__sub_I_ptrAT24MACClass+0x10>)
   15998:	4798      	blx	r3
   1599a:	bd80      	pop	{r7, pc}
   1599c:	00015925 	.word	0x00015925

000159a0 <hri_port_set_DIR_reg>:
{
   159a0:	b480      	push	{r7}
   159a2:	b085      	sub	sp, #20
   159a4:	af00      	add	r7, sp, #0
   159a6:	60f8      	str	r0, [r7, #12]
   159a8:	460b      	mov	r3, r1
   159aa:	607a      	str	r2, [r7, #4]
   159ac:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   159ae:	7afb      	ldrb	r3, [r7, #11]
   159b0:	68fa      	ldr	r2, [r7, #12]
   159b2:	01db      	lsls	r3, r3, #7
   159b4:	4413      	add	r3, r2
   159b6:	3308      	adds	r3, #8
   159b8:	687a      	ldr	r2, [r7, #4]
   159ba:	601a      	str	r2, [r3, #0]
}
   159bc:	bf00      	nop
   159be:	3714      	adds	r7, #20
   159c0:	46bd      	mov	sp, r7
   159c2:	bc80      	pop	{r7}
   159c4:	4770      	bx	lr

000159c6 <hri_port_clear_DIR_reg>:
{
   159c6:	b480      	push	{r7}
   159c8:	b085      	sub	sp, #20
   159ca:	af00      	add	r7, sp, #0
   159cc:	60f8      	str	r0, [r7, #12]
   159ce:	460b      	mov	r3, r1
   159d0:	607a      	str	r2, [r7, #4]
   159d2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   159d4:	7afb      	ldrb	r3, [r7, #11]
   159d6:	68fa      	ldr	r2, [r7, #12]
   159d8:	01db      	lsls	r3, r3, #7
   159da:	4413      	add	r3, r2
   159dc:	3304      	adds	r3, #4
   159de:	687a      	ldr	r2, [r7, #4]
   159e0:	601a      	str	r2, [r3, #0]
}
   159e2:	bf00      	nop
   159e4:	3714      	adds	r7, #20
   159e6:	46bd      	mov	sp, r7
   159e8:	bc80      	pop	{r7}
   159ea:	4770      	bx	lr

000159ec <hri_port_set_OUT_reg>:
{
   159ec:	b480      	push	{r7}
   159ee:	b085      	sub	sp, #20
   159f0:	af00      	add	r7, sp, #0
   159f2:	60f8      	str	r0, [r7, #12]
   159f4:	460b      	mov	r3, r1
   159f6:	607a      	str	r2, [r7, #4]
   159f8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   159fa:	7afb      	ldrb	r3, [r7, #11]
   159fc:	68fa      	ldr	r2, [r7, #12]
   159fe:	01db      	lsls	r3, r3, #7
   15a00:	4413      	add	r3, r2
   15a02:	3318      	adds	r3, #24
   15a04:	687a      	ldr	r2, [r7, #4]
   15a06:	601a      	str	r2, [r3, #0]
}
   15a08:	bf00      	nop
   15a0a:	3714      	adds	r7, #20
   15a0c:	46bd      	mov	sp, r7
   15a0e:	bc80      	pop	{r7}
   15a10:	4770      	bx	lr

00015a12 <hri_port_clear_OUT_reg>:
{
   15a12:	b480      	push	{r7}
   15a14:	b085      	sub	sp, #20
   15a16:	af00      	add	r7, sp, #0
   15a18:	60f8      	str	r0, [r7, #12]
   15a1a:	460b      	mov	r3, r1
   15a1c:	607a      	str	r2, [r7, #4]
   15a1e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   15a20:	7afb      	ldrb	r3, [r7, #11]
   15a22:	68fa      	ldr	r2, [r7, #12]
   15a24:	01db      	lsls	r3, r3, #7
   15a26:	4413      	add	r3, r2
   15a28:	3314      	adds	r3, #20
   15a2a:	687a      	ldr	r2, [r7, #4]
   15a2c:	601a      	str	r2, [r3, #0]
}
   15a2e:	bf00      	nop
   15a30:	3714      	adds	r7, #20
   15a32:	46bd      	mov	sp, r7
   15a34:	bc80      	pop	{r7}
   15a36:	4770      	bx	lr

00015a38 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   15a38:	b480      	push	{r7}
   15a3a:	b085      	sub	sp, #20
   15a3c:	af00      	add	r7, sp, #0
   15a3e:	6078      	str	r0, [r7, #4]
   15a40:	4608      	mov	r0, r1
   15a42:	4611      	mov	r1, r2
   15a44:	461a      	mov	r2, r3
   15a46:	4603      	mov	r3, r0
   15a48:	70fb      	strb	r3, [r7, #3]
   15a4a:	460b      	mov	r3, r1
   15a4c:	70bb      	strb	r3, [r7, #2]
   15a4e:	4613      	mov	r3, r2
   15a50:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   15a52:	78fa      	ldrb	r2, [r7, #3]
   15a54:	78bb      	ldrb	r3, [r7, #2]
   15a56:	6879      	ldr	r1, [r7, #4]
   15a58:	01d2      	lsls	r2, r2, #7
   15a5a:	440a      	add	r2, r1
   15a5c:	4413      	add	r3, r2
   15a5e:	3330      	adds	r3, #48	; 0x30
   15a60:	781b      	ldrb	r3, [r3, #0]
   15a62:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   15a64:	7bfb      	ldrb	r3, [r7, #15]
   15a66:	f023 030f 	bic.w	r3, r3, #15
   15a6a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   15a6c:	787b      	ldrb	r3, [r7, #1]
   15a6e:	f003 030f 	and.w	r3, r3, #15
   15a72:	b2da      	uxtb	r2, r3
   15a74:	7bfb      	ldrb	r3, [r7, #15]
   15a76:	4313      	orrs	r3, r2
   15a78:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   15a7a:	78fa      	ldrb	r2, [r7, #3]
   15a7c:	78bb      	ldrb	r3, [r7, #2]
   15a7e:	6879      	ldr	r1, [r7, #4]
   15a80:	01d2      	lsls	r2, r2, #7
   15a82:	440a      	add	r2, r1
   15a84:	4413      	add	r3, r2
   15a86:	3330      	adds	r3, #48	; 0x30
   15a88:	7bfa      	ldrb	r2, [r7, #15]
   15a8a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   15a8c:	bf00      	nop
   15a8e:	3714      	adds	r7, #20
   15a90:	46bd      	mov	sp, r7
   15a92:	bc80      	pop	{r7}
   15a94:	4770      	bx	lr

00015a96 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   15a96:	b480      	push	{r7}
   15a98:	b085      	sub	sp, #20
   15a9a:	af00      	add	r7, sp, #0
   15a9c:	6078      	str	r0, [r7, #4]
   15a9e:	4608      	mov	r0, r1
   15aa0:	4611      	mov	r1, r2
   15aa2:	461a      	mov	r2, r3
   15aa4:	4603      	mov	r3, r0
   15aa6:	70fb      	strb	r3, [r7, #3]
   15aa8:	460b      	mov	r3, r1
   15aaa:	70bb      	strb	r3, [r7, #2]
   15aac:	4613      	mov	r3, r2
   15aae:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   15ab0:	78fa      	ldrb	r2, [r7, #3]
   15ab2:	78bb      	ldrb	r3, [r7, #2]
   15ab4:	6879      	ldr	r1, [r7, #4]
   15ab6:	01d2      	lsls	r2, r2, #7
   15ab8:	440a      	add	r2, r1
   15aba:	4413      	add	r3, r2
   15abc:	3330      	adds	r3, #48	; 0x30
   15abe:	781b      	ldrb	r3, [r3, #0]
   15ac0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   15ac2:	7bfb      	ldrb	r3, [r7, #15]
   15ac4:	f003 030f 	and.w	r3, r3, #15
   15ac8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   15aca:	787b      	ldrb	r3, [r7, #1]
   15acc:	011b      	lsls	r3, r3, #4
   15ace:	b2da      	uxtb	r2, r3
   15ad0:	7bfb      	ldrb	r3, [r7, #15]
   15ad2:	4313      	orrs	r3, r2
   15ad4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   15ad6:	78fa      	ldrb	r2, [r7, #3]
   15ad8:	78bb      	ldrb	r3, [r7, #2]
   15ada:	6879      	ldr	r1, [r7, #4]
   15adc:	01d2      	lsls	r2, r2, #7
   15ade:	440a      	add	r2, r1
   15ae0:	4413      	add	r3, r2
   15ae2:	3330      	adds	r3, #48	; 0x30
   15ae4:	7bfa      	ldrb	r2, [r7, #15]
   15ae6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   15ae8:	bf00      	nop
   15aea:	3714      	adds	r7, #20
   15aec:	46bd      	mov	sp, r7
   15aee:	bc80      	pop	{r7}
   15af0:	4770      	bx	lr

00015af2 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   15af2:	b480      	push	{r7}
   15af4:	b085      	sub	sp, #20
   15af6:	af00      	add	r7, sp, #0
   15af8:	6078      	str	r0, [r7, #4]
   15afa:	4608      	mov	r0, r1
   15afc:	4611      	mov	r1, r2
   15afe:	461a      	mov	r2, r3
   15b00:	4603      	mov	r3, r0
   15b02:	70fb      	strb	r3, [r7, #3]
   15b04:	460b      	mov	r3, r1
   15b06:	70bb      	strb	r3, [r7, #2]
   15b08:	4613      	mov	r3, r2
   15b0a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   15b0c:	78fa      	ldrb	r2, [r7, #3]
   15b0e:	78bb      	ldrb	r3, [r7, #2]
   15b10:	6879      	ldr	r1, [r7, #4]
   15b12:	01d2      	lsls	r2, r2, #7
   15b14:	440a      	add	r2, r1
   15b16:	4413      	add	r3, r2
   15b18:	3340      	adds	r3, #64	; 0x40
   15b1a:	781b      	ldrb	r3, [r3, #0]
   15b1c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   15b1e:	7bfb      	ldrb	r3, [r7, #15]
   15b20:	f023 0301 	bic.w	r3, r3, #1
   15b24:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   15b26:	787a      	ldrb	r2, [r7, #1]
   15b28:	7bfb      	ldrb	r3, [r7, #15]
   15b2a:	4313      	orrs	r3, r2
   15b2c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   15b2e:	78fa      	ldrb	r2, [r7, #3]
   15b30:	78bb      	ldrb	r3, [r7, #2]
   15b32:	6879      	ldr	r1, [r7, #4]
   15b34:	01d2      	lsls	r2, r2, #7
   15b36:	440a      	add	r2, r1
   15b38:	4413      	add	r3, r2
   15b3a:	3340      	adds	r3, #64	; 0x40
   15b3c:	7bfa      	ldrb	r2, [r7, #15]
   15b3e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   15b40:	bf00      	nop
   15b42:	3714      	adds	r7, #20
   15b44:	46bd      	mov	sp, r7
   15b46:	bc80      	pop	{r7}
   15b48:	4770      	bx	lr

00015b4a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   15b4a:	b480      	push	{r7}
   15b4c:	b085      	sub	sp, #20
   15b4e:	af00      	add	r7, sp, #0
   15b50:	60f8      	str	r0, [r7, #12]
   15b52:	460b      	mov	r3, r1
   15b54:	607a      	str	r2, [r7, #4]
   15b56:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   15b58:	7afb      	ldrb	r3, [r7, #11]
   15b5a:	68fa      	ldr	r2, [r7, #12]
   15b5c:	01db      	lsls	r3, r3, #7
   15b5e:	4413      	add	r3, r2
   15b60:	3328      	adds	r3, #40	; 0x28
   15b62:	687a      	ldr	r2, [r7, #4]
   15b64:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   15b66:	bf00      	nop
   15b68:	3714      	adds	r7, #20
   15b6a:	46bd      	mov	sp, r7
   15b6c:	bc80      	pop	{r7}
   15b6e:	4770      	bx	lr

00015b70 <_gpio_set_direction>:
{
   15b70:	b580      	push	{r7, lr}
   15b72:	b082      	sub	sp, #8
   15b74:	af00      	add	r7, sp, #0
   15b76:	4603      	mov	r3, r0
   15b78:	6039      	str	r1, [r7, #0]
   15b7a:	71fb      	strb	r3, [r7, #7]
   15b7c:	4613      	mov	r3, r2
   15b7e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   15b80:	79bb      	ldrb	r3, [r7, #6]
   15b82:	2b01      	cmp	r3, #1
   15b84:	d01c      	beq.n	15bc0 <_gpio_set_direction+0x50>
   15b86:	2b02      	cmp	r3, #2
   15b88:	d037      	beq.n	15bfa <_gpio_set_direction+0x8a>
   15b8a:	2b00      	cmp	r3, #0
   15b8c:	d14e      	bne.n	15c2c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   15b8e:	79fb      	ldrb	r3, [r7, #7]
   15b90:	683a      	ldr	r2, [r7, #0]
   15b92:	4619      	mov	r1, r3
   15b94:	482a      	ldr	r0, [pc, #168]	; (15c40 <_gpio_set_direction+0xd0>)
   15b96:	4b2b      	ldr	r3, [pc, #172]	; (15c44 <_gpio_set_direction+0xd4>)
   15b98:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   15b9a:	683b      	ldr	r3, [r7, #0]
   15b9c:	b29b      	uxth	r3, r3
   15b9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   15ba2:	79fb      	ldrb	r3, [r7, #7]
   15ba4:	4619      	mov	r1, r3
   15ba6:	4826      	ldr	r0, [pc, #152]	; (15c40 <_gpio_set_direction+0xd0>)
   15ba8:	4b27      	ldr	r3, [pc, #156]	; (15c48 <_gpio_set_direction+0xd8>)
   15baa:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   15bac:	683b      	ldr	r3, [r7, #0]
   15bae:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   15bb0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   15bb4:	79fb      	ldrb	r3, [r7, #7]
   15bb6:	4619      	mov	r1, r3
   15bb8:	4821      	ldr	r0, [pc, #132]	; (15c40 <_gpio_set_direction+0xd0>)
   15bba:	4b23      	ldr	r3, [pc, #140]	; (15c48 <_gpio_set_direction+0xd8>)
   15bbc:	4798      	blx	r3
		break;
   15bbe:	e03a      	b.n	15c36 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   15bc0:	79fb      	ldrb	r3, [r7, #7]
   15bc2:	683a      	ldr	r2, [r7, #0]
   15bc4:	4619      	mov	r1, r3
   15bc6:	481e      	ldr	r0, [pc, #120]	; (15c40 <_gpio_set_direction+0xd0>)
   15bc8:	4b1e      	ldr	r3, [pc, #120]	; (15c44 <_gpio_set_direction+0xd4>)
   15bca:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   15bcc:	683b      	ldr	r3, [r7, #0]
   15bce:	b29b      	uxth	r3, r3
   15bd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   15bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15bd8:	79f9      	ldrb	r1, [r7, #7]
   15bda:	461a      	mov	r2, r3
   15bdc:	4818      	ldr	r0, [pc, #96]	; (15c40 <_gpio_set_direction+0xd0>)
   15bde:	4b1a      	ldr	r3, [pc, #104]	; (15c48 <_gpio_set_direction+0xd8>)
   15be0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   15be2:	683b      	ldr	r3, [r7, #0]
   15be4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   15be6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   15bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   15bee:	79f9      	ldrb	r1, [r7, #7]
   15bf0:	461a      	mov	r2, r3
   15bf2:	4813      	ldr	r0, [pc, #76]	; (15c40 <_gpio_set_direction+0xd0>)
   15bf4:	4b14      	ldr	r3, [pc, #80]	; (15c48 <_gpio_set_direction+0xd8>)
   15bf6:	4798      	blx	r3
		break;
   15bf8:	e01d      	b.n	15c36 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   15bfa:	79fb      	ldrb	r3, [r7, #7]
   15bfc:	683a      	ldr	r2, [r7, #0]
   15bfe:	4619      	mov	r1, r3
   15c00:	480f      	ldr	r0, [pc, #60]	; (15c40 <_gpio_set_direction+0xd0>)
   15c02:	4b12      	ldr	r3, [pc, #72]	; (15c4c <_gpio_set_direction+0xdc>)
   15c04:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   15c06:	683b      	ldr	r3, [r7, #0]
   15c08:	b29b      	uxth	r3, r3
   15c0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   15c0e:	79fb      	ldrb	r3, [r7, #7]
   15c10:	4619      	mov	r1, r3
   15c12:	480b      	ldr	r0, [pc, #44]	; (15c40 <_gpio_set_direction+0xd0>)
   15c14:	4b0c      	ldr	r3, [pc, #48]	; (15c48 <_gpio_set_direction+0xd8>)
   15c16:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   15c18:	683b      	ldr	r3, [r7, #0]
   15c1a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   15c1c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   15c20:	79fb      	ldrb	r3, [r7, #7]
   15c22:	4619      	mov	r1, r3
   15c24:	4806      	ldr	r0, [pc, #24]	; (15c40 <_gpio_set_direction+0xd0>)
   15c26:	4b08      	ldr	r3, [pc, #32]	; (15c48 <_gpio_set_direction+0xd8>)
   15c28:	4798      	blx	r3
		break;
   15c2a:	e004      	b.n	15c36 <_gpio_set_direction+0xc6>
		ASSERT(false);
   15c2c:	2246      	movs	r2, #70	; 0x46
   15c2e:	4908      	ldr	r1, [pc, #32]	; (15c50 <_gpio_set_direction+0xe0>)
   15c30:	2000      	movs	r0, #0
   15c32:	4b08      	ldr	r3, [pc, #32]	; (15c54 <_gpio_set_direction+0xe4>)
   15c34:	4798      	blx	r3
}
   15c36:	bf00      	nop
   15c38:	3708      	adds	r7, #8
   15c3a:	46bd      	mov	sp, r7
   15c3c:	bd80      	pop	{r7, pc}
   15c3e:	bf00      	nop
   15c40:	41008000 	.word	0x41008000
   15c44:	000159c7 	.word	0x000159c7
   15c48:	00015b4b 	.word	0x00015b4b
   15c4c:	000159a1 	.word	0x000159a1
   15c50:	00020e64 	.word	0x00020e64
   15c54:	0000799d 	.word	0x0000799d

00015c58 <_gpio_set_level>:
{
   15c58:	b580      	push	{r7, lr}
   15c5a:	b082      	sub	sp, #8
   15c5c:	af00      	add	r7, sp, #0
   15c5e:	4603      	mov	r3, r0
   15c60:	6039      	str	r1, [r7, #0]
   15c62:	71fb      	strb	r3, [r7, #7]
   15c64:	4613      	mov	r3, r2
   15c66:	71bb      	strb	r3, [r7, #6]
	if (level) {
   15c68:	79bb      	ldrb	r3, [r7, #6]
   15c6a:	2b00      	cmp	r3, #0
   15c6c:	d006      	beq.n	15c7c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   15c6e:	79fb      	ldrb	r3, [r7, #7]
   15c70:	683a      	ldr	r2, [r7, #0]
   15c72:	4619      	mov	r1, r3
   15c74:	4806      	ldr	r0, [pc, #24]	; (15c90 <_gpio_set_level+0x38>)
   15c76:	4b07      	ldr	r3, [pc, #28]	; (15c94 <_gpio_set_level+0x3c>)
   15c78:	4798      	blx	r3
}
   15c7a:	e005      	b.n	15c88 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   15c7c:	79fb      	ldrb	r3, [r7, #7]
   15c7e:	683a      	ldr	r2, [r7, #0]
   15c80:	4619      	mov	r1, r3
   15c82:	4803      	ldr	r0, [pc, #12]	; (15c90 <_gpio_set_level+0x38>)
   15c84:	4b04      	ldr	r3, [pc, #16]	; (15c98 <_gpio_set_level+0x40>)
   15c86:	4798      	blx	r3
}
   15c88:	bf00      	nop
   15c8a:	3708      	adds	r7, #8
   15c8c:	46bd      	mov	sp, r7
   15c8e:	bd80      	pop	{r7, pc}
   15c90:	41008000 	.word	0x41008000
   15c94:	000159ed 	.word	0x000159ed
   15c98:	00015a13 	.word	0x00015a13

00015c9c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   15c9c:	b590      	push	{r4, r7, lr}
   15c9e:	b085      	sub	sp, #20
   15ca0:	af00      	add	r7, sp, #0
   15ca2:	6078      	str	r0, [r7, #4]
   15ca4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   15ca6:	687b      	ldr	r3, [r7, #4]
   15ca8:	095b      	lsrs	r3, r3, #5
   15caa:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   15cac:	687b      	ldr	r3, [r7, #4]
   15cae:	b2db      	uxtb	r3, r3
   15cb0:	f003 031f 	and.w	r3, r3, #31
   15cb4:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   15cb6:	683b      	ldr	r3, [r7, #0]
   15cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
   15cbc:	d106      	bne.n	15ccc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   15cbe:	7bba      	ldrb	r2, [r7, #14]
   15cc0:	7bf9      	ldrb	r1, [r7, #15]
   15cc2:	2300      	movs	r3, #0
   15cc4:	4812      	ldr	r0, [pc, #72]	; (15d10 <_gpio_set_pin_function+0x74>)
   15cc6:	4c13      	ldr	r4, [pc, #76]	; (15d14 <_gpio_set_pin_function+0x78>)
   15cc8:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   15cca:	e01d      	b.n	15d08 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   15ccc:	7bba      	ldrb	r2, [r7, #14]
   15cce:	7bf9      	ldrb	r1, [r7, #15]
   15cd0:	2301      	movs	r3, #1
   15cd2:	480f      	ldr	r0, [pc, #60]	; (15d10 <_gpio_set_pin_function+0x74>)
   15cd4:	4c0f      	ldr	r4, [pc, #60]	; (15d14 <_gpio_set_pin_function+0x78>)
   15cd6:	47a0      	blx	r4
		if (pin & 1) {
   15cd8:	7bbb      	ldrb	r3, [r7, #14]
   15cda:	f003 0301 	and.w	r3, r3, #1
   15cde:	2b00      	cmp	r3, #0
   15ce0:	d009      	beq.n	15cf6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   15ce2:	7bbb      	ldrb	r3, [r7, #14]
   15ce4:	105b      	asrs	r3, r3, #1
   15ce6:	b2da      	uxtb	r2, r3
   15ce8:	683b      	ldr	r3, [r7, #0]
   15cea:	b2db      	uxtb	r3, r3
   15cec:	7bf9      	ldrb	r1, [r7, #15]
   15cee:	4808      	ldr	r0, [pc, #32]	; (15d10 <_gpio_set_pin_function+0x74>)
   15cf0:	4c09      	ldr	r4, [pc, #36]	; (15d18 <_gpio_set_pin_function+0x7c>)
   15cf2:	47a0      	blx	r4
}
   15cf4:	e008      	b.n	15d08 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   15cf6:	7bbb      	ldrb	r3, [r7, #14]
   15cf8:	105b      	asrs	r3, r3, #1
   15cfa:	b2da      	uxtb	r2, r3
   15cfc:	683b      	ldr	r3, [r7, #0]
   15cfe:	b2db      	uxtb	r3, r3
   15d00:	7bf9      	ldrb	r1, [r7, #15]
   15d02:	4803      	ldr	r0, [pc, #12]	; (15d10 <_gpio_set_pin_function+0x74>)
   15d04:	4c05      	ldr	r4, [pc, #20]	; (15d1c <_gpio_set_pin_function+0x80>)
   15d06:	47a0      	blx	r4
}
   15d08:	bf00      	nop
   15d0a:	3714      	adds	r7, #20
   15d0c:	46bd      	mov	sp, r7
   15d0e:	bd90      	pop	{r4, r7, pc}
   15d10:	41008000 	.word	0x41008000
   15d14:	00015af3 	.word	0x00015af3
   15d18:	00015a97 	.word	0x00015a97
   15d1c:	00015a39 	.word	0x00015a39

00015d20 <gpio_set_pin_function>:
{
   15d20:	b580      	push	{r7, lr}
   15d22:	b082      	sub	sp, #8
   15d24:	af00      	add	r7, sp, #0
   15d26:	6078      	str	r0, [r7, #4]
   15d28:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   15d2a:	6839      	ldr	r1, [r7, #0]
   15d2c:	6878      	ldr	r0, [r7, #4]
   15d2e:	4b03      	ldr	r3, [pc, #12]	; (15d3c <gpio_set_pin_function+0x1c>)
   15d30:	4798      	blx	r3
}
   15d32:	bf00      	nop
   15d34:	3708      	adds	r7, #8
   15d36:	46bd      	mov	sp, r7
   15d38:	bd80      	pop	{r7, pc}
   15d3a:	bf00      	nop
   15d3c:	00015c9d 	.word	0x00015c9d

00015d40 <gpio_set_pin_direction>:
{
   15d40:	b580      	push	{r7, lr}
   15d42:	b082      	sub	sp, #8
   15d44:	af00      	add	r7, sp, #0
   15d46:	4603      	mov	r3, r0
   15d48:	460a      	mov	r2, r1
   15d4a:	71fb      	strb	r3, [r7, #7]
   15d4c:	4613      	mov	r3, r2
   15d4e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   15d50:	79fb      	ldrb	r3, [r7, #7]
   15d52:	115b      	asrs	r3, r3, #5
   15d54:	b2d8      	uxtb	r0, r3
   15d56:	79fb      	ldrb	r3, [r7, #7]
   15d58:	f003 031f 	and.w	r3, r3, #31
   15d5c:	2201      	movs	r2, #1
   15d5e:	fa02 f303 	lsl.w	r3, r2, r3
   15d62:	79ba      	ldrb	r2, [r7, #6]
   15d64:	4619      	mov	r1, r3
   15d66:	4b03      	ldr	r3, [pc, #12]	; (15d74 <gpio_set_pin_direction+0x34>)
   15d68:	4798      	blx	r3
}
   15d6a:	bf00      	nop
   15d6c:	3708      	adds	r7, #8
   15d6e:	46bd      	mov	sp, r7
   15d70:	bd80      	pop	{r7, pc}
   15d72:	bf00      	nop
   15d74:	00015b71 	.word	0x00015b71

00015d78 <gpio_set_pin_level>:
{
   15d78:	b580      	push	{r7, lr}
   15d7a:	b082      	sub	sp, #8
   15d7c:	af00      	add	r7, sp, #0
   15d7e:	4603      	mov	r3, r0
   15d80:	460a      	mov	r2, r1
   15d82:	71fb      	strb	r3, [r7, #7]
   15d84:	4613      	mov	r3, r2
   15d86:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   15d88:	79fb      	ldrb	r3, [r7, #7]
   15d8a:	115b      	asrs	r3, r3, #5
   15d8c:	b2d8      	uxtb	r0, r3
   15d8e:	79fb      	ldrb	r3, [r7, #7]
   15d90:	f003 031f 	and.w	r3, r3, #31
   15d94:	2201      	movs	r2, #1
   15d96:	fa02 f303 	lsl.w	r3, r2, r3
   15d9a:	79ba      	ldrb	r2, [r7, #6]
   15d9c:	4619      	mov	r1, r3
   15d9e:	4b03      	ldr	r3, [pc, #12]	; (15dac <gpio_set_pin_level+0x34>)
   15da0:	4798      	blx	r3
}
   15da2:	bf00      	nop
   15da4:	3708      	adds	r7, #8
   15da6:	46bd      	mov	sp, r7
   15da8:	bd80      	pop	{r7, pc}
   15daa:	bf00      	nop
   15dac:	00015c59 	.word	0x00015c59

00015db0 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   15db0:	b580      	push	{r7, lr}
   15db2:	b082      	sub	sp, #8
   15db4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   15db6:	2100      	movs	r1, #0
   15db8:	2008      	movs	r0, #8
   15dba:	4b24      	ldr	r3, [pc, #144]	; (15e4c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   15dbc:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   15dbe:	2100      	movs	r1, #0
   15dc0:	202b      	movs	r0, #43	; 0x2b
   15dc2:	4b22      	ldr	r3, [pc, #136]	; (15e4c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   15dc4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   15dc6:	2100      	movs	r1, #0
   15dc8:	202a      	movs	r0, #42	; 0x2a
   15dca:	4b20      	ldr	r3, [pc, #128]	; (15e4c <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   15dcc:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   15dce:	2102      	movs	r1, #2
   15dd0:	2008      	movs	r0, #8
   15dd2:	4b1f      	ldr	r3, [pc, #124]	; (15e50 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   15dd4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   15dd6:	2102      	movs	r1, #2
   15dd8:	202b      	movs	r0, #43	; 0x2b
   15dda:	4b1d      	ldr	r3, [pc, #116]	; (15e50 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   15ddc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   15dde:	2102      	movs	r1, #2
   15de0:	202a      	movs	r0, #42	; 0x2a
   15de2:	4b1b      	ldr	r3, [pc, #108]	; (15e50 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   15de4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   15de6:	2101      	movs	r1, #1
   15de8:	2008      	movs	r0, #8
   15dea:	4b1a      	ldr	r3, [pc, #104]	; (15e54 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   15dec:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   15dee:	2100      	movs	r1, #0
   15df0:	202b      	movs	r0, #43	; 0x2b
   15df2:	4b18      	ldr	r3, [pc, #96]	; (15e54 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   15df4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   15df6:	2100      	movs	r1, #0
   15df8:	202a      	movs	r0, #42	; 0x2a
   15dfa:	4b16      	ldr	r3, [pc, #88]	; (15e54 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   15dfc:	4798      	blx	r3

	delay_us(1);
   15dfe:	2001      	movs	r0, #1
   15e00:	4b15      	ldr	r3, [pc, #84]	; (15e58 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   15e02:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   15e04:	2300      	movs	r3, #0
   15e06:	607b      	str	r3, [r7, #4]
   15e08:	687b      	ldr	r3, [r7, #4]
   15e0a:	2b06      	cmp	r3, #6
   15e0c:	dc11      	bgt.n	15e32 <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   15e0e:	2101      	movs	r1, #1
   15e10:	202a      	movs	r0, #42	; 0x2a
   15e12:	4b10      	ldr	r3, [pc, #64]	; (15e54 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   15e14:	4798      	blx	r3
		delay_us(1);
   15e16:	2001      	movs	r0, #1
   15e18:	4b0f      	ldr	r3, [pc, #60]	; (15e58 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   15e1a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   15e1c:	2100      	movs	r1, #0
   15e1e:	202a      	movs	r0, #42	; 0x2a
   15e20:	4b0c      	ldr	r3, [pc, #48]	; (15e54 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   15e22:	4798      	blx	r3
		delay_us(1);
   15e24:	2001      	movs	r0, #1
   15e26:	4b0c      	ldr	r3, [pc, #48]	; (15e58 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   15e28:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   15e2a:	687b      	ldr	r3, [r7, #4]
   15e2c:	3301      	adds	r3, #1
   15e2e:	607b      	str	r3, [r7, #4]
   15e30:	e7ea      	b.n	15e08 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   15e32:	2101      	movs	r1, #1
   15e34:	202b      	movs	r0, #43	; 0x2b
   15e36:	4b07      	ldr	r3, [pc, #28]	; (15e54 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   15e38:	4798      	blx	r3
	delay_us(1);
   15e3a:	2001      	movs	r0, #1
   15e3c:	4b06      	ldr	r3, [pc, #24]	; (15e58 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   15e3e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   15e40:	4b06      	ldr	r3, [pc, #24]	; (15e5c <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   15e42:	4798      	blx	r3
}
   15e44:	bf00      	nop
   15e46:	3708      	adds	r7, #8
   15e48:	46bd      	mov	sp, r7
   15e4a:	bd80      	pop	{r7, pc}
   15e4c:	00015d21 	.word	0x00015d21
   15e50:	00015d41 	.word	0x00015d41
   15e54:	00015d79 	.word	0x00015d79
   15e58:	00006075 	.word	0x00006075
   15e5c:	00004e15 	.word	0x00004e15

00015e60 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   15e60:	b480      	push	{r7}
   15e62:	b083      	sub	sp, #12
   15e64:	af00      	add	r7, sp, #0
   15e66:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   15e68:	687b      	ldr	r3, [r7, #4]
   15e6a:	4618      	mov	r0, r3
   15e6c:	370c      	adds	r7, #12
   15e6e:	46bd      	mov	sp, r7
   15e70:	bc80      	pop	{r7}
   15e72:	4770      	bx	lr

00015e74 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   15e74:	b480      	push	{r7}
   15e76:	b083      	sub	sp, #12
   15e78:	af00      	add	r7, sp, #0
   15e7a:	6078      	str	r0, [r7, #4]
   15e7c:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   15e7e:	687b      	ldr	r3, [r7, #4]
   15e80:	683a      	ldr	r2, [r7, #0]
   15e82:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   15e84:	687b      	ldr	r3, [r7, #4]
   15e86:	4a04      	ldr	r2, [pc, #16]	; (15e98 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   15e88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   15e8c:	687b      	ldr	r3, [r7, #4]
   15e8e:	4618      	mov	r0, r3
   15e90:	370c      	adds	r7, #12
   15e92:	46bd      	mov	sp, r7
   15e94:	bc80      	pop	{r7}
   15e96:	4770      	bx	lr
   15e98:	001fff00 	.word	0x001fff00

00015e9c <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   15e9c:	b480      	push	{r7}
   15e9e:	b083      	sub	sp, #12
   15ea0:	af00      	add	r7, sp, #0
   15ea2:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   15ea4:	687b      	ldr	r3, [r7, #4]
   15ea6:	4618      	mov	r0, r3
   15ea8:	370c      	adds	r7, #12
   15eaa:	46bd      	mov	sp, r7
   15eac:	bc80      	pop	{r7}
   15eae:	4770      	bx	lr

00015eb0 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   15eb0:	b580      	push	{r7, lr}
   15eb2:	b082      	sub	sp, #8
   15eb4:	af00      	add	r7, sp, #0
   15eb6:	6078      	str	r0, [r7, #4]
	xferDone=false;
   15eb8:	687b      	ldr	r3, [r7, #4]
   15eba:	2200      	movs	r2, #0
   15ebc:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   15ebe:	6878      	ldr	r0, [r7, #4]
   15ec0:	4b04      	ldr	r3, [pc, #16]	; (15ed4 <_ZN13N25Q256_Class4InitEv+0x24>)
   15ec2:	4798      	blx	r3
	return SelfTest();
   15ec4:	6878      	ldr	r0, [r7, #4]
   15ec6:	4b04      	ldr	r3, [pc, #16]	; (15ed8 <_ZN13N25Q256_Class4InitEv+0x28>)
   15ec8:	4798      	blx	r3
   15eca:	4603      	mov	r3, r0
}
   15ecc:	4618      	mov	r0, r3
   15ece:	3708      	adds	r7, #8
   15ed0:	46bd      	mov	sp, r7
   15ed2:	bd80      	pop	{r7, pc}
   15ed4:	00015edd 	.word	0x00015edd
   15ed8:	00016091 	.word	0x00016091

00015edc <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   15edc:	b590      	push	{r4, r7, lr}
   15ede:	b083      	sub	sp, #12
   15ee0:	af00      	add	r7, sp, #0
   15ee2:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   15ee4:	687b      	ldr	r3, [r7, #4]
   15ee6:	685b      	ldr	r3, [r3, #4]
   15ee8:	4618      	mov	r0, r3
   15eea:	4b08      	ldr	r3, [pc, #32]	; (15f0c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   15eec:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   15eee:	687b      	ldr	r3, [r7, #4]
   15ef0:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   15ef2:	2300      	movs	r3, #0
   15ef4:	4a06      	ldr	r2, [pc, #24]	; (15f10 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   15ef6:	4807      	ldr	r0, [pc, #28]	; (15f14 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   15ef8:	4c07      	ldr	r4, [pc, #28]	; (15f18 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   15efa:	47a0      	blx	r4
   15efc:	4602      	mov	r2, r0
   15efe:	687b      	ldr	r3, [r7, #4]
   15f00:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   15f04:	bf00      	nop
   15f06:	370c      	adds	r7, #12
   15f08:	46bd      	mov	sp, r7
   15f0a:	bd90      	pop	{r4, r7, pc}
   15f0c:	00006845 	.word	0x00006845
   15f10:	00015db1 	.word	0x00015db1
   15f14:	20009d90 	.word	0x20009d90
   15f18:	0001098d 	.word	0x0001098d

00015f1c <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   15f1c:	b580      	push	{r7, lr}
   15f1e:	b084      	sub	sp, #16
   15f20:	af00      	add	r7, sp, #0
   15f22:	6078      	str	r0, [r7, #4]
   15f24:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   15f26:	687b      	ldr	r3, [r7, #4]
   15f28:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   15f2c:	685b      	ldr	r3, [r3, #4]
   15f2e:	689b      	ldr	r3, [r3, #8]
   15f30:	687a      	ldr	r2, [r7, #4]
   15f32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   15f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   15f3a:	6839      	ldr	r1, [r7, #0]
   15f3c:	4798      	blx	r3
   15f3e:	4603      	mov	r3, r0
   15f40:	60fb      	str	r3, [r7, #12]
	return	e;
   15f42:	68fb      	ldr	r3, [r7, #12]
}
   15f44:	4618      	mov	r0, r3
   15f46:	3710      	adds	r7, #16
   15f48:	46bd      	mov	sp, r7
   15f4a:	bd80      	pop	{r7, pc}

00015f4c <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   15f4c:	b590      	push	{r4, r7, lr}
   15f4e:	b087      	sub	sp, #28
   15f50:	af00      	add	r7, sp, #0
   15f52:	60f8      	str	r0, [r7, #12]
   15f54:	60b9      	str	r1, [r7, #8]
   15f56:	607a      	str	r2, [r7, #4]
   15f58:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   15f5a:	68fb      	ldr	r3, [r7, #12]
   15f5c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   15f60:	685b      	ldr	r3, [r3, #4]
   15f62:	685c      	ldr	r4, [r3, #4]
   15f64:	68fb      	ldr	r3, [r7, #12]
   15f66:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   15f6a:	683b      	ldr	r3, [r7, #0]
   15f6c:	687a      	ldr	r2, [r7, #4]
   15f6e:	68b9      	ldr	r1, [r7, #8]
   15f70:	47a0      	blx	r4
   15f72:	4603      	mov	r3, r0
   15f74:	617b      	str	r3, [r7, #20]
	return	w;
   15f76:	697b      	ldr	r3, [r7, #20]
}
   15f78:	4618      	mov	r0, r3
   15f7a:	371c      	adds	r7, #28
   15f7c:	46bd      	mov	sp, r7
   15f7e:	bd90      	pop	{r4, r7, pc}

00015f80 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   15f80:	b590      	push	{r4, r7, lr}
   15f82:	b087      	sub	sp, #28
   15f84:	af00      	add	r7, sp, #0
   15f86:	60f8      	str	r0, [r7, #12]
   15f88:	60b9      	str	r1, [r7, #8]
   15f8a:	607a      	str	r2, [r7, #4]
   15f8c:	603b      	str	r3, [r7, #0]
	xferDone=false;
   15f8e:	68fb      	ldr	r3, [r7, #12]
   15f90:	2200      	movs	r2, #0
   15f92:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   15f94:	68fb      	ldr	r3, [r7, #12]
   15f96:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   15f9a:	685b      	ldr	r3, [r3, #4]
   15f9c:	681c      	ldr	r4, [r3, #0]
   15f9e:	68fb      	ldr	r3, [r7, #12]
   15fa0:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   15fa4:	683b      	ldr	r3, [r7, #0]
   15fa6:	687a      	ldr	r2, [r7, #4]
   15fa8:	68b9      	ldr	r1, [r7, #8]
   15faa:	47a0      	blx	r4
   15fac:	4603      	mov	r3, r0
   15fae:	617b      	str	r3, [r7, #20]
	return	r;
   15fb0:	697b      	ldr	r3, [r7, #20]
}
   15fb2:	4618      	mov	r0, r3
   15fb4:	371c      	adds	r7, #28
   15fb6:	46bd      	mov	sp, r7
   15fb8:	bd90      	pop	{r4, r7, pc}
	...

00015fbc <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   15fbc:	b580      	push	{r7, lr}
   15fbe:	b082      	sub	sp, #8
   15fc0:	af00      	add	r7, sp, #0
   15fc2:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   15fc4:	687a      	ldr	r2, [r7, #4]
   15fc6:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   15fca:	f043 0310 	orr.w	r3, r3, #16
   15fce:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   15fd2:	687a      	ldr	r2, [r7, #4]
   15fd4:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   15fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15fdc:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   15fe0:	687a      	ldr	r2, [r7, #4]
   15fe2:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   15fe6:	f36f 1305 	bfc	r3, #4, #2
   15fea:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   15fee:	687b      	ldr	r3, [r7, #4]
   15ff0:	2205      	movs	r2, #5
   15ff2:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   15ff6:	687b      	ldr	r3, [r7, #4]
   15ff8:	2201      	movs	r2, #1
   15ffa:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   15ffe:	687b      	ldr	r3, [r7, #4]
   16000:	f203 2212 	addw	r2, r3, #530	; 0x212
   16004:	687b      	ldr	r3, [r7, #4]
   16006:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   1600a:	687b      	ldr	r3, [r7, #4]
   1600c:	685a      	ldr	r2, [r3, #4]
   1600e:	687b      	ldr	r3, [r7, #4]
   16010:	f503 7305 	add.w	r3, r3, #532	; 0x214
   16014:	4619      	mov	r1, r3
   16016:	4610      	mov	r0, r2
   16018:	4b04      	ldr	r3, [pc, #16]	; (1602c <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   1601a:	4798      	blx	r3
		return status;
   1601c:	687b      	ldr	r3, [r7, #4]
   1601e:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   16022:	4618      	mov	r0, r3
   16024:	3708      	adds	r7, #8
   16026:	46bd      	mov	sp, r7
   16028:	bd80      	pop	{r7, pc}
   1602a:	bf00      	nop
   1602c:	000068bd 	.word	0x000068bd

00016030 <_ZN13N25Q256_Class17GetMemoryCapacityEv>:
uint32_t	N25Q256_Class::GetMemoryCapacity(){
   16030:	b480      	push	{r7}
   16032:	b083      	sub	sp, #12
   16034:	af00      	add	r7, sp, #0
   16036:	6078      	str	r0, [r7, #4]
	return	memoryCapacity;
   16038:	687b      	ldr	r3, [r7, #4]
   1603a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
}
   1603e:	4618      	mov	r0, r3
   16040:	370c      	adds	r7, #12
   16042:	46bd      	mov	sp, r7
   16044:	bc80      	pop	{r7}
   16046:	4770      	bx	lr

00016048 <_ZN13N25Q256_Class10WaitOnBusyEv>:
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   16048:	b580      	push	{r7, lr}
   1604a:	b082      	sub	sp, #8
   1604c:	af00      	add	r7, sp, #0
   1604e:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   16050:	6878      	ldr	r0, [r7, #4]
   16052:	4b0e      	ldr	r3, [pc, #56]	; (1608c <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   16054:	4798      	blx	r3
   16056:	4603      	mov	r3, r0
   16058:	461a      	mov	r2, r3
   1605a:	687b      	ldr	r3, [r7, #4]
   1605c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   16060:	687b      	ldr	r3, [r7, #4]
   16062:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   16066:	f003 0301 	and.w	r3, r3, #1
   1606a:	2b00      	cmp	r3, #0
   1606c:	d000      	beq.n	16070 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   1606e:	e7ef      	b.n	16050 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   16070:	687b      	ldr	r3, [r7, #4]
   16072:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   16076:	f003 0301 	and.w	r3, r3, #1
   1607a:	2b00      	cmp	r3, #0
   1607c:	bf0c      	ite	eq
   1607e:	2301      	moveq	r3, #1
   16080:	2300      	movne	r3, #0
   16082:	b2db      	uxtb	r3, r3
}
   16084:	4618      	mov	r0, r3
   16086:	3708      	adds	r7, #8
   16088:	46bd      	mov	sp, r7
   1608a:	bd80      	pop	{r7, pc}
   1608c:	00015fbd 	.word	0x00015fbd

00016090 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   16090:	b590      	push	{r4, r7, lr}
   16092:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   16096:	b085      	sub	sp, #20
   16098:	af00      	add	r7, sp, #0
   1609a:	f107 0310 	add.w	r3, r7, #16
   1609e:	3b0c      	subs	r3, #12
   160a0:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   160a2:	f107 0310 	add.w	r3, r7, #16
   160a6:	3b0c      	subs	r3, #12
   160a8:	681b      	ldr	r3, [r3, #0]
   160aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   160ae:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   160b2:	f107 0310 	add.w	r3, r7, #16
   160b6:	3b0c      	subs	r3, #12
   160b8:	681b      	ldr	r3, [r3, #0]
   160ba:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   160be:	f107 0110 	add.w	r1, r7, #16
   160c2:	3904      	subs	r1, #4
   160c4:	f107 0010 	add.w	r0, r7, #16
   160c8:	380c      	subs	r0, #12
   160ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   160ce:	6800      	ldr	r0, [r0, #0]
   160d0:	4c4b      	ldr	r4, [pc, #300]	; (16200 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   160d2:	47a0      	blx	r4
	WaitOnBusy();
   160d4:	f107 0310 	add.w	r3, r7, #16
   160d8:	3b0c      	subs	r3, #12
   160da:	6818      	ldr	r0, [r3, #0]
   160dc:	4b49      	ldr	r3, [pc, #292]	; (16204 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   160de:	4798      	blx	r3
	Erase(currentAddress);
   160e0:	f107 0310 	add.w	r3, r7, #16
   160e4:	3b0c      	subs	r3, #12
   160e6:	681b      	ldr	r3, [r3, #0]
   160e8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   160ec:	f107 0310 	add.w	r3, r7, #16
   160f0:	3b0c      	subs	r3, #12
   160f2:	4611      	mov	r1, r2
   160f4:	6818      	ldr	r0, [r3, #0]
   160f6:	4b44      	ldr	r3, [pc, #272]	; (16208 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   160f8:	4798      	blx	r3
	WaitOnBusy();
   160fa:	f107 0310 	add.w	r3, r7, #16
   160fe:	3b0c      	subs	r3, #12
   16100:	6818      	ldr	r0, [r3, #0]
   16102:	4b40      	ldr	r3, [pc, #256]	; (16204 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16104:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   16106:	f107 0310 	add.w	r3, r7, #16
   1610a:	3b0c      	subs	r3, #12
   1610c:	681b      	ldr	r3, [r3, #0]
   1610e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16112:	f107 0110 	add.w	r1, r7, #16
   16116:	3904      	subs	r1, #4
   16118:	f107 0010 	add.w	r0, r7, #16
   1611c:	380c      	subs	r0, #12
   1611e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16122:	6800      	ldr	r0, [r0, #0]
   16124:	4c39      	ldr	r4, [pc, #228]	; (1620c <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   16126:	47a0      	blx	r4
	WaitOnBusy();
   16128:	f107 0310 	add.w	r3, r7, #16
   1612c:	3b0c      	subs	r3, #12
   1612e:	6818      	ldr	r0, [r3, #0]
   16130:	4b34      	ldr	r3, [pc, #208]	; (16204 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16132:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   16134:	f107 0310 	add.w	r3, r7, #16
   16138:	3b0c      	subs	r3, #12
   1613a:	681b      	ldr	r3, [r3, #0]
   1613c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   16140:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   16144:	f101 0110 	add.w	r1, r1, #16
   16148:	3904      	subs	r1, #4
   1614a:	f107 0010 	add.w	r0, r7, #16
   1614e:	380c      	subs	r0, #12
   16150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16154:	6800      	ldr	r0, [r0, #0]
   16156:	4c2a      	ldr	r4, [pc, #168]	; (16200 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   16158:	47a0      	blx	r4
	WaitOnBusy();
   1615a:	f107 0310 	add.w	r3, r7, #16
   1615e:	3b0c      	subs	r3, #12
   16160:	6818      	ldr	r0, [r3, #0]
   16162:	4b28      	ldr	r3, [pc, #160]	; (16204 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   16164:	4798      	blx	r3
	isOK	 = true;
   16166:	f107 0310 	add.w	r3, r7, #16
   1616a:	3b0c      	subs	r3, #12
   1616c:	681b      	ldr	r3, [r3, #0]
   1616e:	2201      	movs	r2, #1
   16170:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   16174:	2300      	movs	r3, #0
   16176:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1617a:	f102 020c 	add.w	r2, r2, #12
   1617e:	6013      	str	r3, [r2, #0]
   16180:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   16184:	f103 030c 	add.w	r3, r3, #12
   16188:	681b      	ldr	r3, [r3, #0]
   1618a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1618e:	da2b      	bge.n	161e8 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   16190:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   16194:	f103 0310 	add.w	r3, r3, #16
   16198:	3b04      	subs	r3, #4
   1619a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1619e:	f102 020c 	add.w	r2, r2, #12
   161a2:	6812      	ldr	r2, [r2, #0]
   161a4:	4413      	add	r3, r2
   161a6:	781a      	ldrb	r2, [r3, #0]
   161a8:	f107 0310 	add.w	r3, r7, #16
   161ac:	3b04      	subs	r3, #4
   161ae:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   161b2:	f101 010c 	add.w	r1, r1, #12
   161b6:	6809      	ldr	r1, [r1, #0]
   161b8:	440b      	add	r3, r1
   161ba:	781b      	ldrb	r3, [r3, #0]
   161bc:	429a      	cmp	r2, r3
   161be:	d007      	beq.n	161d0 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   161c0:	f107 0310 	add.w	r3, r7, #16
   161c4:	3b0c      	subs	r3, #12
   161c6:	681b      	ldr	r3, [r3, #0]
   161c8:	2200      	movs	r2, #0
   161ca:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   161ce:	e00b      	b.n	161e8 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   161d0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   161d4:	f103 030c 	add.w	r3, r3, #12
   161d8:	681b      	ldr	r3, [r3, #0]
   161da:	3301      	adds	r3, #1
   161dc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   161e0:	f102 020c 	add.w	r2, r2, #12
   161e4:	6013      	str	r3, [r2, #0]
   161e6:	e7cb      	b.n	16180 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   161e8:	f107 0310 	add.w	r3, r7, #16
   161ec:	3b0c      	subs	r3, #12
   161ee:	681b      	ldr	r3, [r3, #0]
   161f0:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   161f4:	4618      	mov	r0, r3
   161f6:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   161fa:	3714      	adds	r7, #20
   161fc:	46bd      	mov	sp, r7
   161fe:	bd90      	pop	{r4, r7, pc}
   16200:	00015f81 	.word	0x00015f81
   16204:	00016049 	.word	0x00016049
   16208:	00015f1d 	.word	0x00015f1d
   1620c:	00015f4d 	.word	0x00015f4d

00016210 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   16210:	b580      	push	{r7, lr}
   16212:	b082      	sub	sp, #8
   16214:	af00      	add	r7, sp, #0
   16216:	6078      	str	r0, [r7, #4]
   16218:	6039      	str	r1, [r7, #0]
   1621a:	687b      	ldr	r3, [r7, #4]
   1621c:	2b01      	cmp	r3, #1
   1621e:	d10d      	bne.n	1623c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   16220:	683b      	ldr	r3, [r7, #0]
   16222:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16226:	4293      	cmp	r3, r2
   16228:	d108      	bne.n	1623c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1622a:	4906      	ldr	r1, [pc, #24]	; (16244 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1622c:	4806      	ldr	r0, [pc, #24]	; (16248 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1622e:	4b07      	ldr	r3, [pc, #28]	; (1624c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   16230:	4798      	blx	r3
   16232:	4a07      	ldr	r2, [pc, #28]	; (16250 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   16234:	4907      	ldr	r1, [pc, #28]	; (16254 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   16236:	4804      	ldr	r0, [pc, #16]	; (16248 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   16238:	4b07      	ldr	r3, [pc, #28]	; (16258 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1623a:	4798      	blx	r3
   1623c:	bf00      	nop
   1623e:	3708      	adds	r7, #8
   16240:	46bd      	mov	sp, r7
   16242:	bd80      	pop	{r7, pc}
   16244:	2000a57c 	.word	0x2000a57c
   16248:	20009da0 	.word	0x20009da0
   1624c:	00015e75 	.word	0x00015e75
   16250:	20000000 	.word	0x20000000
   16254:	00015e9d 	.word	0x00015e9d
   16258:	00018bf5 	.word	0x00018bf5

0001625c <_GLOBAL__sub_I_ptrN25Q256Class>:
   1625c:	b580      	push	{r7, lr}
   1625e:	af00      	add	r7, sp, #0
   16260:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16264:	2001      	movs	r0, #1
   16266:	4b01      	ldr	r3, [pc, #4]	; (1626c <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   16268:	4798      	blx	r3
   1626a:	bd80      	pop	{r7, pc}
   1626c:	00016211 	.word	0x00016211

00016270 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   16270:	b580      	push	{r7, lr}
   16272:	b082      	sub	sp, #8
   16274:	af00      	add	r7, sp, #0
   16276:	6078      	str	r0, [r7, #4]
   16278:	687b      	ldr	r3, [r7, #4]
   1627a:	4618      	mov	r0, r3
   1627c:	4b06      	ldr	r3, [pc, #24]	; (16298 <_ZN14Calendar_ClassC1Ev+0x28>)
   1627e:	4798      	blx	r3
   16280:	4a06      	ldr	r2, [pc, #24]	; (1629c <_ZN14Calendar_ClassC1Ev+0x2c>)
   16282:	687b      	ldr	r3, [r7, #4]
   16284:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   16286:	4a06      	ldr	r2, [pc, #24]	; (162a0 <_ZN14Calendar_ClassC1Ev+0x30>)
   16288:	687b      	ldr	r3, [r7, #4]
   1628a:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   1628c:	687b      	ldr	r3, [r7, #4]
   1628e:	4618      	mov	r0, r3
   16290:	3708      	adds	r7, #8
   16292:	46bd      	mov	sp, r7
   16294:	bd80      	pop	{r7, pc}
   16296:	bf00      	nop
   16298:	000169bd 	.word	0x000169bd
   1629c:	00020eb0 	.word	0x00020eb0
   162a0:	20009fd0 	.word	0x20009fd0

000162a4 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   162a4:	b580      	push	{r7, lr}
   162a6:	b082      	sub	sp, #8
   162a8:	af00      	add	r7, sp, #0
   162aa:	6078      	str	r0, [r7, #4]
   162ac:	6039      	str	r1, [r7, #0]
   162ae:	687b      	ldr	r3, [r7, #4]
   162b0:	4618      	mov	r0, r3
   162b2:	4b08      	ldr	r3, [pc, #32]	; (162d4 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   162b4:	4798      	blx	r3
   162b6:	4a08      	ldr	r2, [pc, #32]	; (162d8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   162b8:	687b      	ldr	r3, [r7, #4]
   162ba:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   162bc:	687b      	ldr	r3, [r7, #4]
   162be:	683a      	ldr	r2, [r7, #0]
   162c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	ptrCalendarClass=this;
   162c4:	4a05      	ldr	r2, [pc, #20]	; (162dc <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   162c6:	687b      	ldr	r3, [r7, #4]
   162c8:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   162ca:	687b      	ldr	r3, [r7, #4]
   162cc:	4618      	mov	r0, r3
   162ce:	3708      	adds	r7, #8
   162d0:	46bd      	mov	sp, r7
   162d2:	bd80      	pop	{r7, pc}
   162d4:	000169bd 	.word	0x000169bd
   162d8:	00020eb0 	.word	0x00020eb0
   162dc:	20009fd0 	.word	0x20009fd0

000162e0 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   162e0:	b580      	push	{r7, lr}
   162e2:	b082      	sub	sp, #8
   162e4:	af00      	add	r7, sp, #0
   162e6:	6078      	str	r0, [r7, #4]
   162e8:	4a05      	ldr	r2, [pc, #20]	; (16300 <_ZN14Calendar_ClassD1Ev+0x20>)
   162ea:	687b      	ldr	r3, [r7, #4]
   162ec:	601a      	str	r2, [r3, #0]
   162ee:	687b      	ldr	r3, [r7, #4]
   162f0:	4618      	mov	r0, r3
   162f2:	4b04      	ldr	r3, [pc, #16]	; (16304 <_ZN14Calendar_ClassD1Ev+0x24>)
   162f4:	4798      	blx	r3
{
} //~Calendar_Class
   162f6:	687b      	ldr	r3, [r7, #4]
   162f8:	4618      	mov	r0, r3
   162fa:	3708      	adds	r7, #8
   162fc:	46bd      	mov	sp, r7
   162fe:	bd80      	pop	{r7, pc}
   16300:	00020eb0 	.word	0x00020eb0
   16304:	000169dd 	.word	0x000169dd

00016308 <_ZN14Calendar_Class4InitEv>:

void	Calendar_Class::Init(void){
   16308:	b580      	push	{r7, lr}
   1630a:	b082      	sub	sp, #8
   1630c:	af00      	add	r7, sp, #0
   1630e:	6078      	str	r0, [r7, #4]
	ptrMemory=&eeprom;
   16310:	687b      	ldr	r3, [r7, #4]
   16312:	4a50      	ldr	r2, [pc, #320]	; (16454 <_ZN14Calendar_Class4InitEv+0x14c>)
   16314:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	calendar_enable(ptrCalendar);
   16318:	687b      	ldr	r3, [r7, #4]
   1631a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1631e:	4618      	mov	r0, r3
   16320:	4b4d      	ldr	r3, [pc, #308]	; (16458 <_ZN14Calendar_Class4InitEv+0x150>)
   16322:	4798      	blx	r3
	
	InitMaxDate();
   16324:	6878      	ldr	r0, [r7, #4]
   16326:	4b4d      	ldr	r3, [pc, #308]	; (1645c <_ZN14Calendar_Class4InitEv+0x154>)
   16328:	4798      	blx	r3
	
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	ReadLastDateTime();
   1632a:	687b      	ldr	r3, [r7, #4]
   1632c:	4618      	mov	r0, r3
   1632e:	4b4c      	ldr	r3, [pc, #304]	; (16460 <_ZN14Calendar_Class4InitEv+0x158>)
   16330:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   16332:	687b      	ldr	r3, [r7, #4]
   16334:	681b      	ldr	r3, [r3, #0]
   16336:	3304      	adds	r3, #4
   16338:	681b      	ldr	r3, [r3, #0]
   1633a:	687a      	ldr	r2, [r7, #4]
   1633c:	3260      	adds	r2, #96	; 0x60
   1633e:	4611      	mov	r1, r2
   16340:	6878      	ldr	r0, [r7, #4]
   16342:	4798      	blx	r3
   16344:	4602      	mov	r2, r0
   16346:	687b      	ldr	r3, [r7, #4]
   16348:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   1634c:	687b      	ldr	r3, [r7, #4]
   1634e:	681b      	ldr	r3, [r3, #0]
   16350:	3304      	adds	r3, #4
   16352:	681b      	ldr	r3, [r3, #0]
   16354:	687a      	ldr	r2, [r7, #4]
   16356:	326c      	adds	r2, #108	; 0x6c
   16358:	4611      	mov	r1, r2
   1635a:	6878      	ldr	r0, [r7, #4]
   1635c:	4798      	blx	r3
   1635e:	4602      	mov	r2, r0
   16360:	687b      	ldr	r3, [r7, #4]
   16362:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   16366:	687b      	ldr	r3, [r7, #4]
   16368:	681b      	ldr	r3, [r3, #0]
   1636a:	3304      	adds	r3, #4
   1636c:	681b      	ldr	r3, [r3, #0]
   1636e:	687a      	ldr	r2, [r7, #4]
   16370:	327c      	adds	r2, #124	; 0x7c
   16372:	4611      	mov	r1, r2
   16374:	6878      	ldr	r0, [r7, #4]
   16376:	4798      	blx	r3
   16378:	4602      	mov	r2, r0
   1637a:	687b      	ldr	r3, [r7, #4]
   1637c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   16380:	687b      	ldr	r3, [r7, #4]
   16382:	681b      	ldr	r3, [r3, #0]
   16384:	3304      	adds	r3, #4
   16386:	681b      	ldr	r3, [r3, #0]
   16388:	687a      	ldr	r2, [r7, #4]
   1638a:	3284      	adds	r2, #132	; 0x84
   1638c:	4611      	mov	r1, r2
   1638e:	6878      	ldr	r0, [r7, #4]
   16390:	4798      	blx	r3
   16392:	4602      	mov	r2, r0
   16394:	687b      	ldr	r3, [r7, #4]
   16396:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   16398:	6878      	ldr	r0, [r7, #4]
   1639a:	4b32      	ldr	r3, [pc, #200]	; (16464 <_ZN14Calendar_Class4InitEv+0x15c>)
   1639c:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   1639e:	687b      	ldr	r3, [r7, #4]
   163a0:	681b      	ldr	r3, [r3, #0]
   163a2:	3304      	adds	r3, #4
   163a4:	681b      	ldr	r3, [r3, #0]
   163a6:	687a      	ldr	r2, [r7, #4]
   163a8:	3274      	adds	r2, #116	; 0x74
   163aa:	4611      	mov	r1, r2
   163ac:	6878      	ldr	r0, [r7, #4]
   163ae:	4798      	blx	r3
   163b0:	4602      	mov	r2, r0
   163b2:	687b      	ldr	r3, [r7, #4]
   163b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   163b8:	687b      	ldr	r3, [r7, #4]
   163ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   163be:	687b      	ldr	r3, [r7, #4]
   163c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   163c4:	429a      	cmp	r2, r3
   163c6:	d80e      	bhi.n	163e6 <_ZN14Calendar_Class4InitEv+0xde>
   163c8:	687b      	ldr	r3, [r7, #4]
   163ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   163ce:	687b      	ldr	r3, [r7, #4]
   163d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   163d4:	429a      	cmp	r2, r3
   163d6:	d006      	beq.n	163e6 <_ZN14Calendar_Class4InitEv+0xde>
   163d8:	687b      	ldr	r3, [r7, #4]
   163da:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   163de:	687b      	ldr	r3, [r7, #4]
   163e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   163e2:	429a      	cmp	r2, r3
   163e4:	d106      	bne.n	163f4 <_ZN14Calendar_Class4InitEv+0xec>
	{
		SetDateTime(&compilationDateTime);
   163e6:	687b      	ldr	r3, [r7, #4]
   163e8:	3374      	adds	r3, #116	; 0x74
   163ea:	4619      	mov	r1, r3
   163ec:	6878      	ldr	r0, [r7, #4]
   163ee:	4b1e      	ldr	r3, [pc, #120]	; (16468 <_ZN14Calendar_Class4InitEv+0x160>)
   163f0:	4798      	blx	r3
   163f2:	e022      	b.n	1643a <_ZN14Calendar_Class4InitEv+0x132>
	}
	else
	{
		if (lastTimestamp<currentTimestamp)
   163f4:	687b      	ldr	r3, [r7, #4]
   163f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   163fa:	687b      	ldr	r3, [r7, #4]
   163fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   16400:	429a      	cmp	r2, r3
   16402:	d206      	bcs.n	16412 <_ZN14Calendar_Class4InitEv+0x10a>
		{
			SetDateTime(&compilationDateTime);
   16404:	687b      	ldr	r3, [r7, #4]
   16406:	3374      	adds	r3, #116	; 0x74
   16408:	4619      	mov	r1, r3
   1640a:	6878      	ldr	r0, [r7, #4]
   1640c:	4b16      	ldr	r3, [pc, #88]	; (16468 <_ZN14Calendar_Class4InitEv+0x160>)
   1640e:	4798      	blx	r3
   16410:	e013      	b.n	1643a <_ZN14Calendar_Class4InitEv+0x132>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   16412:	687b      	ldr	r3, [r7, #4]
   16414:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   16418:	687b      	ldr	r3, [r7, #4]
   1641a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1641c:	429a      	cmp	r2, r3
   1641e:	d106      	bne.n	1642e <_ZN14Calendar_Class4InitEv+0x126>
			{
				SetDateTime(&compilationDateTime);
   16420:	687b      	ldr	r3, [r7, #4]
   16422:	3374      	adds	r3, #116	; 0x74
   16424:	4619      	mov	r1, r3
   16426:	6878      	ldr	r0, [r7, #4]
   16428:	4b0f      	ldr	r3, [pc, #60]	; (16468 <_ZN14Calendar_Class4InitEv+0x160>)
   1642a:	4798      	blx	r3
   1642c:	e005      	b.n	1643a <_ZN14Calendar_Class4InitEv+0x132>
			} 
			else
			{
				SetDateTime(&lastDateTime);
   1642e:	687b      	ldr	r3, [r7, #4]
   16430:	3360      	adds	r3, #96	; 0x60
   16432:	4619      	mov	r1, r3
   16434:	6878      	ldr	r0, [r7, #4]
   16436:	4b0c      	ldr	r3, [pc, #48]	; (16468 <_ZN14Calendar_Class4InitEv+0x160>)
   16438:	4798      	blx	r3
			}
		
		}
	}
	enlapsedTime=false;
   1643a:	687b      	ldr	r3, [r7, #4]
   1643c:	2200      	movs	r2, #0
   1643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SaveCurrentDateTime();
   16442:	687b      	ldr	r3, [r7, #4]
   16444:	4618      	mov	r0, r3
   16446:	4b09      	ldr	r3, [pc, #36]	; (1646c <_ZN14Calendar_Class4InitEv+0x164>)
   16448:	4798      	blx	r3
	
}
   1644a:	bf00      	nop
   1644c:	3708      	adds	r7, #8
   1644e:	46bd      	mov	sp, r7
   16450:	bd80      	pop	{r7, pc}
   16452:	bf00      	nop
   16454:	20009d58 	.word	0x20009d58
   16458:	00005d01 	.word	0x00005d01
   1645c:	00016471 	.word	0x00016471
   16460:	00016c91 	.word	0x00016c91
   16464:	00016517 	.word	0x00016517
   16468:	0001670d 	.word	0x0001670d
   1646c:	00016c21 	.word	0x00016c21

00016470 <_ZN14Calendar_Class11InitMaxDateEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitMaxDate(void){
   16470:	b480      	push	{r7}
   16472:	b083      	sub	sp, #12
   16474:	af00      	add	r7, sp, #0
   16476:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   16478:	687b      	ldr	r3, [r7, #4]
   1647a:	f640 0202 	movw	r2, #2050	; 0x802
   1647e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   16482:	687b      	ldr	r3, [r7, #4]
   16484:	220c      	movs	r2, #12
   16486:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   1648a:	687b      	ldr	r3, [r7, #4]
   1648c:	221f      	movs	r2, #31
   1648e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   16492:	687b      	ldr	r3, [r7, #4]
   16494:	220c      	movs	r2, #12
   16496:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   1649a:	687b      	ldr	r3, [r7, #4]
   1649c:	223b      	movs	r2, #59	; 0x3b
   1649e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   164a2:	687b      	ldr	r3, [r7, #4]
   164a4:	223b      	movs	r2, #59	; 0x3b
   164a6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   164aa:	687b      	ldr	r3, [r7, #4]
   164ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   164b0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   164b4:	687b      	ldr	r3, [r7, #4]
   164b6:	22ff      	movs	r2, #255	; 0xff
   164b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   164bc:	687b      	ldr	r3, [r7, #4]
   164be:	22ff      	movs	r2, #255	; 0xff
   164c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   164c4:	687b      	ldr	r3, [r7, #4]
   164c6:	22ff      	movs	r2, #255	; 0xff
   164c8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   164cc:	687b      	ldr	r3, [r7, #4]
   164ce:	22ff      	movs	r2, #255	; 0xff
   164d0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   164d4:	687b      	ldr	r3, [r7, #4]
   164d6:	22ff      	movs	r2, #255	; 0xff
   164d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   164dc:	687b      	ldr	r3, [r7, #4]
   164de:	2200      	movs	r2, #0
   164e0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   164e4:	687b      	ldr	r3, [r7, #4]
   164e6:	2200      	movs	r2, #0
   164e8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   164ec:	687b      	ldr	r3, [r7, #4]
   164ee:	2200      	movs	r2, #0
   164f0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   164f4:	687b      	ldr	r3, [r7, #4]
   164f6:	2200      	movs	r2, #0
   164f8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   164fc:	687b      	ldr	r3, [r7, #4]
   164fe:	2200      	movs	r2, #0
   16500:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   16504:	687b      	ldr	r3, [r7, #4]
   16506:	2200      	movs	r2, #0
   16508:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   1650c:	bf00      	nop
   1650e:	370c      	adds	r7, #12
   16510:	46bd      	mov	sp, r7
   16512:	bc80      	pop	{r7}
   16514:	4770      	bx	lr

00016516 <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   16516:	b480      	push	{r7}
   16518:	b083      	sub	sp, #12
   1651a:	af00      	add	r7, sp, #0
   1651c:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   1651e:	2332      	movs	r3, #50	; 0x32
   16520:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16524:	4613      	mov	r3, r2
   16526:	009b      	lsls	r3, r3, #2
   16528:	4413      	add	r3, r2
   1652a:	005b      	lsls	r3, r3, #1
   1652c:	461a      	mov	r2, r3
   1652e:	2330      	movs	r3, #48	; 0x30
   16530:	3b30      	subs	r3, #48	; 0x30
   16532:	441a      	add	r2, r3
   16534:	4613      	mov	r3, r2
   16536:	009b      	lsls	r3, r3, #2
   16538:	4413      	add	r3, r2
   1653a:	005b      	lsls	r3, r3, #1
   1653c:	461a      	mov	r2, r3
   1653e:	2332      	movs	r3, #50	; 0x32
   16540:	3b30      	subs	r3, #48	; 0x30
   16542:	4413      	add	r3, r2
   16544:	b29b      	uxth	r3, r3
   16546:	461a      	mov	r2, r3
   16548:	0092      	lsls	r2, r2, #2
   1654a:	4413      	add	r3, r2
   1654c:	005b      	lsls	r3, r3, #1
   1654e:	b29a      	uxth	r2, r3
   16550:	2330      	movs	r3, #48	; 0x30
   16552:	b29b      	uxth	r3, r3
   16554:	4413      	add	r3, r2
   16556:	b29b      	uxth	r3, r3
   16558:	3b30      	subs	r3, #48	; 0x30
   1655a:	b29a      	uxth	r2, r3
   1655c:	687b      	ldr	r3, [r7, #4]
   1655e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   16562:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16564:	2b6e      	cmp	r3, #110	; 0x6e
   16566:	d106      	bne.n	16576 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   16568:	2363      	movs	r3, #99	; 0x63
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1656a:	2b61      	cmp	r3, #97	; 0x61
   1656c:	d101      	bne.n	16572 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   1656e:	2301      	movs	r3, #1
   16570:	e02f      	b.n	165d2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   16572:	2306      	movs	r3, #6
   16574:	e02d      	b.n	165d2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   16576:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16578:	2b62      	cmp	r3, #98	; 0x62
   1657a:	d029      	beq.n	165d0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   1657c:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1657e:	2b72      	cmp	r3, #114	; 0x72
   16580:	d106      	bne.n	16590 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   16582:	234f      	movs	r3, #79	; 0x4f
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16584:	2b4d      	cmp	r3, #77	; 0x4d
   16586:	d101      	bne.n	1658c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   16588:	2303      	movs	r3, #3
   1658a:	e022      	b.n	165d2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1658c:	2304      	movs	r3, #4
   1658e:	e020      	b.n	165d2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   16590:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16592:	2b79      	cmp	r3, #121	; 0x79
   16594:	d01a      	beq.n	165cc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   16596:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   16598:	2b6c      	cmp	r3, #108	; 0x6c
   1659a:	d015      	beq.n	165c8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   1659c:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1659e:	2b67      	cmp	r3, #103	; 0x67
   165a0:	d010      	beq.n	165c4 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   165a2:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   165a4:	2b70      	cmp	r3, #112	; 0x70
   165a6:	d00b      	beq.n	165c0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   165a8:	2374      	movs	r3, #116	; 0x74
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   165aa:	2b74      	cmp	r3, #116	; 0x74
   165ac:	d006      	beq.n	165bc <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   165ae:	2374      	movs	r3, #116	; 0x74
   165b0:	2b76      	cmp	r3, #118	; 0x76
   165b2:	d101      	bne.n	165b8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   165b4:	230b      	movs	r3, #11
   165b6:	e00c      	b.n	165d2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   165b8:	230c      	movs	r3, #12
   165ba:	e00a      	b.n	165d2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   165bc:	230a      	movs	r3, #10
   165be:	e008      	b.n	165d2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   165c0:	2309      	movs	r3, #9
   165c2:	e006      	b.n	165d2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   165c4:	2308      	movs	r3, #8
   165c6:	e004      	b.n	165d2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   165c8:	2307      	movs	r3, #7
   165ca:	e002      	b.n	165d2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   165cc:	2305      	movs	r3, #5
   165ce:	e000      	b.n	165d2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   165d0:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   165d2:	687a      	ldr	r2, [r7, #4]
   165d4:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   165d8:	2331      	movs	r3, #49	; 0x31
   165da:	2b20      	cmp	r3, #32
   165dc:	d008      	beq.n	165f0 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   165de:	2331      	movs	r3, #49	; 0x31
   165e0:	3b30      	subs	r3, #48	; 0x30
   165e2:	b2db      	uxtb	r3, r3
   165e4:	461a      	mov	r2, r3
   165e6:	0092      	lsls	r2, r2, #2
   165e8:	4413      	add	r3, r2
   165ea:	005b      	lsls	r3, r3, #1
   165ec:	b2db      	uxtb	r3, r3
   165ee:	e000      	b.n	165f2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   165f0:	2300      	movs	r3, #0
   165f2:	2236      	movs	r2, #54	; 0x36
   165f4:	4413      	add	r3, r2
   165f6:	b2db      	uxtb	r3, r3
   165f8:	3b30      	subs	r3, #48	; 0x30
   165fa:	b2da      	uxtb	r2, r3
   165fc:	687b      	ldr	r3, [r7, #4]
   165fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   16602:	2331      	movs	r3, #49	; 0x31
   16604:	3b30      	subs	r3, #48	; 0x30
   16606:	b2db      	uxtb	r3, r3
   16608:	461a      	mov	r2, r3
   1660a:	0092      	lsls	r2, r2, #2
   1660c:	4413      	add	r3, r2
   1660e:	005b      	lsls	r3, r3, #1
   16610:	b2db      	uxtb	r3, r3
   16612:	2236      	movs	r2, #54	; 0x36
   16614:	4413      	add	r3, r2
   16616:	b2db      	uxtb	r3, r3
   16618:	3b30      	subs	r3, #48	; 0x30
   1661a:	b2da      	uxtb	r2, r3
   1661c:	687b      	ldr	r3, [r7, #4]
   1661e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   16622:	2334      	movs	r3, #52	; 0x34
   16624:	3b30      	subs	r3, #48	; 0x30
   16626:	b2db      	uxtb	r3, r3
   16628:	461a      	mov	r2, r3
   1662a:	0092      	lsls	r2, r2, #2
   1662c:	4413      	add	r3, r2
   1662e:	005b      	lsls	r3, r3, #1
   16630:	b2db      	uxtb	r3, r3
   16632:	2236      	movs	r2, #54	; 0x36
   16634:	4413      	add	r3, r2
   16636:	b2db      	uxtb	r3, r3
   16638:	3b30      	subs	r3, #48	; 0x30
   1663a:	b2da      	uxtb	r2, r3
   1663c:	687b      	ldr	r3, [r7, #4]
   1663e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   16642:	2330      	movs	r3, #48	; 0x30
   16644:	3b30      	subs	r3, #48	; 0x30
   16646:	b2db      	uxtb	r3, r3
   16648:	461a      	mov	r2, r3
   1664a:	0092      	lsls	r2, r2, #2
   1664c:	4413      	add	r3, r2
   1664e:	005b      	lsls	r3, r3, #1
   16650:	b2db      	uxtb	r3, r3
   16652:	2232      	movs	r2, #50	; 0x32
   16654:	4413      	add	r3, r2
   16656:	b2db      	uxtb	r3, r3
   16658:	3b30      	subs	r3, #48	; 0x30
   1665a:	b2da      	uxtb	r2, r3
   1665c:	687b      	ldr	r3, [r7, #4]
   1665e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	}
   16662:	bf00      	nop
   16664:	370c      	adds	r7, #12
   16666:	46bd      	mov	sp, r7
   16668:	bc80      	pop	{r7}
   1666a:	4770      	bx	lr

0001666c <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   1666c:	b580      	push	{r7, lr}
   1666e:	b082      	sub	sp, #8
   16670:	af00      	add	r7, sp, #0
   16672:	6078      	str	r0, [r7, #4]
   16674:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   16676:	687b      	ldr	r3, [r7, #4]
   16678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1667c:	6839      	ldr	r1, [r7, #0]
   1667e:	4618      	mov	r0, r3
   16680:	4b03      	ldr	r3, [pc, #12]	; (16690 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   16682:	4798      	blx	r3
   16684:	4603      	mov	r3, r0
}
   16686:	4618      	mov	r0, r3
   16688:	3708      	adds	r7, #8
   1668a:	46bd      	mov	sp, r7
   1668c:	bd80      	pop	{r7, pc}
   1668e:	bf00      	nop
   16690:	00005e51 	.word	0x00005e51

00016694 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   16694:	b480      	push	{r7}
   16696:	b083      	sub	sp, #12
   16698:	af00      	add	r7, sp, #0
   1669a:	6078      	str	r0, [r7, #4]
   1669c:	460b      	mov	r3, r1
   1669e:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   166a0:	887b      	ldrh	r3, [r7, #2]
   166a2:	f003 0303 	and.w	r3, r3, #3
   166a6:	2b00      	cmp	r3, #0
   166a8:	d001      	beq.n	166ae <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   166aa:	2300      	movs	r3, #0
   166ac:	e000      	b.n	166b0 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   166ae:	2301      	movs	r3, #1
	}
}
   166b0:	4618      	mov	r0, r3
   166b2:	370c      	adds	r7, #12
   166b4:	46bd      	mov	sp, r7
   166b6:	bc80      	pop	{r7}
   166b8:	4770      	bx	lr
	...

000166bc <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   166bc:	b580      	push	{r7, lr}
   166be:	b082      	sub	sp, #8
   166c0:	af00      	add	r7, sp, #0
   166c2:	6078      	str	r0, [r7, #4]
   166c4:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   166c6:	687b      	ldr	r3, [r7, #4]
   166c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   166cc:	6839      	ldr	r1, [r7, #0]
   166ce:	4618      	mov	r0, r3
   166d0:	4b03      	ldr	r3, [pc, #12]	; (166e0 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   166d2:	4798      	blx	r3
   166d4:	4603      	mov	r3, r0
}
   166d6:	4618      	mov	r0, r3
   166d8:	3708      	adds	r7, #8
   166da:	46bd      	mov	sp, r7
   166dc:	bd80      	pop	{r7, pc}
   166de:	bf00      	nop
   166e0:	00005d41 	.word	0x00005d41

000166e4 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   166e4:	b580      	push	{r7, lr}
   166e6:	b082      	sub	sp, #8
   166e8:	af00      	add	r7, sp, #0
   166ea:	6078      	str	r0, [r7, #4]
   166ec:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   166ee:	687b      	ldr	r3, [r7, #4]
   166f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   166f4:	6839      	ldr	r1, [r7, #0]
   166f6:	4618      	mov	r0, r3
   166f8:	4b03      	ldr	r3, [pc, #12]	; (16708 <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   166fa:	4798      	blx	r3
   166fc:	4603      	mov	r3, r0
}
   166fe:	4618      	mov	r0, r3
   16700:	3708      	adds	r7, #8
   16702:	46bd      	mov	sp, r7
   16704:	bd80      	pop	{r7, pc}
   16706:	bf00      	nop
   16708:	00005dc9 	.word	0x00005dc9

0001670c <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   1670c:	b580      	push	{r7, lr}
   1670e:	b084      	sub	sp, #16
   16710:	af00      	add	r7, sp, #0
   16712:	6078      	str	r0, [r7, #4]
   16714:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   16716:	683a      	ldr	r2, [r7, #0]
   16718:	f107 030c 	add.w	r3, r7, #12
   1671c:	3204      	adds	r2, #4
   1671e:	6810      	ldr	r0, [r2, #0]
   16720:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   16722:	f107 030c 	add.w	r3, r7, #12
   16726:	4619      	mov	r1, r3
   16728:	6878      	ldr	r0, [r7, #4]
   1672a:	4b0a      	ldr	r3, [pc, #40]	; (16754 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   1672c:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   1672e:	683a      	ldr	r2, [r7, #0]
   16730:	f107 0308 	add.w	r3, r7, #8
   16734:	8811      	ldrh	r1, [r2, #0]
   16736:	7892      	ldrb	r2, [r2, #2]
   16738:	8019      	strh	r1, [r3, #0]
   1673a:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   1673c:	f107 0308 	add.w	r3, r7, #8
   16740:	4619      	mov	r1, r3
   16742:	6878      	ldr	r0, [r7, #4]
   16744:	4b04      	ldr	r3, [pc, #16]	; (16758 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   16746:	4798      	blx	r3
   16748:	4603      	mov	r3, r0
			
}
   1674a:	4618      	mov	r0, r3
   1674c:	3710      	adds	r7, #16
   1674e:	46bd      	mov	sp, r7
   16750:	bd80      	pop	{r7, pc}
   16752:	bf00      	nop
   16754:	000166e5 	.word	0x000166e5
   16758:	000166bd 	.word	0x000166bd

0001675c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   1675c:	b580      	push	{r7, lr}
   1675e:	b086      	sub	sp, #24
   16760:	af00      	add	r7, sp, #0
   16762:	6078      	str	r0, [r7, #4]
   16764:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   16766:	2300      	movs	r3, #0
   16768:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   1676a:	2300      	movs	r3, #0
   1676c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   1676e:	683b      	ldr	r3, [r7, #0]
   16770:	88db      	ldrh	r3, [r3, #6]
   16772:	b2da      	uxtb	r2, r3
   16774:	687b      	ldr	r3, [r7, #4]
   16776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1677a:	699b      	ldr	r3, [r3, #24]
   1677c:	b2db      	uxtb	r3, r3
   1677e:	1ad3      	subs	r3, r2, r3
   16780:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   16782:	683b      	ldr	r3, [r7, #0]
   16784:	795b      	ldrb	r3, [r3, #5]
   16786:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   16788:	683b      	ldr	r3, [r7, #0]
   1678a:	791b      	ldrb	r3, [r3, #4]
   1678c:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   1678e:	683b      	ldr	r3, [r7, #0]
   16790:	789b      	ldrb	r3, [r3, #2]
   16792:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   16794:	683b      	ldr	r3, [r7, #0]
   16796:	785b      	ldrb	r3, [r3, #1]
   16798:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   1679a:	683b      	ldr	r3, [r7, #0]
   1679c:	781b      	ldrb	r3, [r3, #0]
   1679e:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   167a0:	2300      	movs	r3, #0
   167a2:	613b      	str	r3, [r7, #16]
   167a4:	7bfa      	ldrb	r2, [r7, #15]
   167a6:	693b      	ldr	r3, [r7, #16]
   167a8:	429a      	cmp	r2, r3
   167aa:	d91e      	bls.n	167ea <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   167ac:	687b      	ldr	r3, [r7, #4]
   167ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   167b2:	699b      	ldr	r3, [r3, #24]
   167b4:	b29a      	uxth	r2, r3
   167b6:	693b      	ldr	r3, [r7, #16]
   167b8:	b29b      	uxth	r3, r3
   167ba:	4413      	add	r3, r2
   167bc:	b29b      	uxth	r3, r3
   167be:	4619      	mov	r1, r3
   167c0:	6878      	ldr	r0, [r7, #4]
   167c2:	4b27      	ldr	r3, [pc, #156]	; (16860 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   167c4:	4798      	blx	r3
   167c6:	4603      	mov	r3, r0
   167c8:	2b00      	cmp	r3, #0
   167ca:	d006      	beq.n	167da <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   167cc:	697b      	ldr	r3, [r7, #20]
   167ce:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   167d2:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   167d6:	617b      	str	r3, [r7, #20]
   167d8:	e003      	b.n	167e2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   167da:	697a      	ldr	r2, [r7, #20]
   167dc:	4b21      	ldr	r3, [pc, #132]	; (16864 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   167de:	4413      	add	r3, r2
   167e0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   167e2:	693b      	ldr	r3, [r7, #16]
   167e4:	3301      	adds	r3, #1
   167e6:	613b      	str	r3, [r7, #16]
   167e8:	e7dc      	b.n	167a4 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   167ea:	2301      	movs	r3, #1
   167ec:	613b      	str	r3, [r7, #16]
   167ee:	7bba      	ldrb	r2, [r7, #14]
   167f0:	693b      	ldr	r3, [r7, #16]
   167f2:	429a      	cmp	r2, r3
   167f4:	d910      	bls.n	16818 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   167f6:	683b      	ldr	r3, [r7, #0]
   167f8:	88db      	ldrh	r3, [r3, #6]
   167fa:	4619      	mov	r1, r3
   167fc:	693b      	ldr	r3, [r7, #16]
   167fe:	b2db      	uxtb	r3, r3
   16800:	461a      	mov	r2, r3
   16802:	6878      	ldr	r0, [r7, #4]
   16804:	4b18      	ldr	r3, [pc, #96]	; (16868 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   16806:	4798      	blx	r3
   16808:	4602      	mov	r2, r0
   1680a:	697b      	ldr	r3, [r7, #20]
   1680c:	4413      	add	r3, r2
   1680e:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   16810:	693b      	ldr	r3, [r7, #16]
   16812:	3301      	adds	r3, #1
   16814:	613b      	str	r3, [r7, #16]
   16816:	e7ea      	b.n	167ee <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   16818:	7b7b      	ldrb	r3, [r7, #13]
   1681a:	3b01      	subs	r3, #1
   1681c:	4a13      	ldr	r2, [pc, #76]	; (1686c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   1681e:	fb02 f303 	mul.w	r3, r2, r3
   16822:	461a      	mov	r2, r3
   16824:	697b      	ldr	r3, [r7, #20]
   16826:	4413      	add	r3, r2
   16828:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   1682a:	7b3b      	ldrb	r3, [r7, #12]
   1682c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   16830:	fb02 f303 	mul.w	r3, r2, r3
   16834:	461a      	mov	r2, r3
   16836:	697b      	ldr	r3, [r7, #20]
   16838:	4413      	add	r3, r2
   1683a:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   1683c:	7afa      	ldrb	r2, [r7, #11]
   1683e:	4613      	mov	r3, r2
   16840:	011b      	lsls	r3, r3, #4
   16842:	1a9b      	subs	r3, r3, r2
   16844:	009b      	lsls	r3, r3, #2
   16846:	461a      	mov	r2, r3
   16848:	697b      	ldr	r3, [r7, #20]
   1684a:	4413      	add	r3, r2
   1684c:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   1684e:	7abb      	ldrb	r3, [r7, #10]
   16850:	697a      	ldr	r2, [r7, #20]
   16852:	4413      	add	r3, r2
   16854:	617b      	str	r3, [r7, #20]

	return tmp;
   16856:	697b      	ldr	r3, [r7, #20]
}
   16858:	4618      	mov	r0, r3
   1685a:	3718      	adds	r7, #24
   1685c:	46bd      	mov	sp, r7
   1685e:	bd80      	pop	{r7, pc}
   16860:	00016695 	.word	0x00016695
   16864:	01e13380 	.word	0x01e13380
   16868:	00016871 	.word	0x00016871
   1686c:	00015180 	.word	0x00015180

00016870 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   16870:	b580      	push	{r7, lr}
   16872:	b086      	sub	sp, #24
   16874:	af00      	add	r7, sp, #0
   16876:	60f8      	str	r0, [r7, #12]
   16878:	60b9      	str	r1, [r7, #8]
   1687a:	4613      	mov	r3, r2
   1687c:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   1687e:	2300      	movs	r3, #0
   16880:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   16882:	68bb      	ldr	r3, [r7, #8]
   16884:	b29b      	uxth	r3, r3
   16886:	4619      	mov	r1, r3
   16888:	68f8      	ldr	r0, [r7, #12]
   1688a:	4b2f      	ldr	r3, [pc, #188]	; (16948 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   1688c:	4798      	blx	r3
   1688e:	4603      	mov	r3, r0
   16890:	2b00      	cmp	r3, #0
   16892:	d028      	beq.n	168e6 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   16894:	79fb      	ldrb	r3, [r7, #7]
   16896:	3b01      	subs	r3, #1
   16898:	2b0b      	cmp	r3, #11
   1689a:	d84c      	bhi.n	16936 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   1689c:	a201      	add	r2, pc, #4	; (adr r2, 168a4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   1689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   168a2:	bf00      	nop
   168a4:	000168d5 	.word	0x000168d5
   168a8:	000168db 	.word	0x000168db
   168ac:	000168d5 	.word	0x000168d5
   168b0:	000168e1 	.word	0x000168e1
   168b4:	000168d5 	.word	0x000168d5
   168b8:	000168e1 	.word	0x000168e1
   168bc:	000168d5 	.word	0x000168d5
   168c0:	000168d5 	.word	0x000168d5
   168c4:	000168e1 	.word	0x000168e1
   168c8:	000168d5 	.word	0x000168d5
   168cc:	000168e1 	.word	0x000168e1
   168d0:	000168d5 	.word	0x000168d5
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   168d4:	4b1d      	ldr	r3, [pc, #116]	; (1694c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   168d6:	617b      	str	r3, [r7, #20]
			break;
   168d8:	e030      	b.n	1693c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   168da:	4b1d      	ldr	r3, [pc, #116]	; (16950 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   168dc:	617b      	str	r3, [r7, #20]
			break;
   168de:	e02d      	b.n	1693c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   168e0:	4b1c      	ldr	r3, [pc, #112]	; (16954 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   168e2:	617b      	str	r3, [r7, #20]
			break;
   168e4:	e02a      	b.n	1693c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   168e6:	79fb      	ldrb	r3, [r7, #7]
   168e8:	3b01      	subs	r3, #1
   168ea:	2b0b      	cmp	r3, #11
   168ec:	d825      	bhi.n	1693a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   168ee:	a201      	add	r2, pc, #4	; (adr r2, 168f4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   168f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   168f4:	00016925 	.word	0x00016925
   168f8:	0001692b 	.word	0x0001692b
   168fc:	00016925 	.word	0x00016925
   16900:	00016931 	.word	0x00016931
   16904:	00016925 	.word	0x00016925
   16908:	00016931 	.word	0x00016931
   1690c:	00016925 	.word	0x00016925
   16910:	00016925 	.word	0x00016925
   16914:	00016931 	.word	0x00016931
   16918:	00016925 	.word	0x00016925
   1691c:	00016931 	.word	0x00016931
   16920:	00016925 	.word	0x00016925
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   16924:	4b09      	ldr	r3, [pc, #36]	; (1694c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   16926:	617b      	str	r3, [r7, #20]
			break;
   16928:	e008      	b.n	1693c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   1692a:	4b0b      	ldr	r3, [pc, #44]	; (16958 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   1692c:	617b      	str	r3, [r7, #20]
			break;
   1692e:	e005      	b.n	1693c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   16930:	4b08      	ldr	r3, [pc, #32]	; (16954 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   16932:	617b      	str	r3, [r7, #20]
			break;
   16934:	e002      	b.n	1693c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   16936:	bf00      	nop
   16938:	e000      	b.n	1693c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   1693a:	bf00      	nop
		}
	}

	return sec_in_month;
   1693c:	697b      	ldr	r3, [r7, #20]
}
   1693e:	4618      	mov	r0, r3
   16940:	3718      	adds	r7, #24
   16942:	46bd      	mov	sp, r7
   16944:	bd80      	pop	{r7, pc}
   16946:	bf00      	nop
   16948:	00016695 	.word	0x00016695
   1694c:	0028de80 	.word	0x0028de80
   16950:	00263b80 	.word	0x00263b80
   16954:	00278d00 	.word	0x00278d00
   16958:	0024ea00 	.word	0x0024ea00

0001695c <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   1695c:	b580      	push	{r7, lr}
   1695e:	b082      	sub	sp, #8
   16960:	af00      	add	r7, sp, #0
   16962:	6078      	str	r0, [r7, #4]
   16964:	6039      	str	r1, [r7, #0]
   16966:	687b      	ldr	r3, [r7, #4]
   16968:	2b01      	cmp	r3, #1
   1696a:	d10d      	bne.n	16988 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1696c:	683b      	ldr	r3, [r7, #0]
   1696e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16972:	4293      	cmp	r3, r2
   16974:	d108      	bne.n	16988 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   16976:	4906      	ldr	r1, [pc, #24]	; (16990 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   16978:	4806      	ldr	r0, [pc, #24]	; (16994 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1697a:	4b07      	ldr	r3, [pc, #28]	; (16998 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1697c:	4798      	blx	r3
   1697e:	4a07      	ldr	r2, [pc, #28]	; (1699c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   16980:	4907      	ldr	r1, [pc, #28]	; (169a0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   16982:	4804      	ldr	r0, [pc, #16]	; (16994 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   16984:	4b07      	ldr	r3, [pc, #28]	; (169a4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   16986:	4798      	blx	r3
   16988:	bf00      	nop
   1698a:	3708      	adds	r7, #8
   1698c:	46bd      	mov	sp, r7
   1698e:	bd80      	pop	{r7, pc}
   16990:	2000a704 	.word	0x2000a704
   16994:	20009fd8 	.word	0x20009fd8
   16998:	000162a5 	.word	0x000162a5
   1699c:	20000000 	.word	0x20000000
   169a0:	000162e1 	.word	0x000162e1
   169a4:	00018bf5 	.word	0x00018bf5

000169a8 <_GLOBAL__sub_I_ptrCalendarClass>:
   169a8:	b580      	push	{r7, lr}
   169aa:	af00      	add	r7, sp, #0
   169ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
   169b0:	2001      	movs	r0, #1
   169b2:	4b01      	ldr	r3, [pc, #4]	; (169b8 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   169b4:	4798      	blx	r3
   169b6:	bd80      	pop	{r7, pc}
   169b8:	0001695d 	.word	0x0001695d

000169bc <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   169bc:	b480      	push	{r7}
   169be:	b083      	sub	sp, #12
   169c0:	af00      	add	r7, sp, #0
   169c2:	6078      	str	r0, [r7, #4]
   169c4:	4a04      	ldr	r2, [pc, #16]	; (169d8 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   169c6:	687b      	ldr	r3, [r7, #4]
   169c8:	601a      	str	r2, [r3, #0]
{
} //~D
   169ca:	687b      	ldr	r3, [r7, #4]
   169cc:	4618      	mov	r0, r3
   169ce:	370c      	adds	r7, #12
   169d0:	46bd      	mov	sp, r7
   169d2:	bc80      	pop	{r7}
   169d4:	4770      	bx	lr
   169d6:	bf00      	nop
   169d8:	00020ec0 	.word	0x00020ec0

000169dc <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   169dc:	b480      	push	{r7}
   169de:	b083      	sub	sp, #12
   169e0:	af00      	add	r7, sp, #0
   169e2:	6078      	str	r0, [r7, #4]
   169e4:	4a04      	ldr	r2, [pc, #16]	; (169f8 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   169e6:	687b      	ldr	r3, [r7, #4]
   169e8:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   169ea:	687b      	ldr	r3, [r7, #4]
   169ec:	4618      	mov	r0, r3
   169ee:	370c      	adds	r7, #12
   169f0:	46bd      	mov	sp, r7
   169f2:	bc80      	pop	{r7}
   169f4:	4770      	bx	lr
   169f6:	bf00      	nop
   169f8:	00020ec0 	.word	0x00020ec0

000169fc <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv>:

tick_t	DateTimeLog_Class::GetPowerInterrupTime(void){
   169fc:	b590      	push	{r4, r7, lr}
   169fe:	b085      	sub	sp, #20
   16a00:	af00      	add	r7, sp, #0
   16a02:	6078      	str	r0, [r7, #4]

	GetDateTime(&dateTime);
   16a04:	687b      	ldr	r3, [r7, #4]
   16a06:	681b      	ldr	r3, [r3, #0]
   16a08:	681b      	ldr	r3, [r3, #0]
   16a0a:	687a      	ldr	r2, [r7, #4]
   16a0c:	3226      	adds	r2, #38	; 0x26
   16a0e:	4611      	mov	r1, r2
   16a10:	6878      	ldr	r0, [r7, #4]
   16a12:	4798      	blx	r3
	currentTimestamp=convert_datetime_to_timestamp(&dateTime);
   16a14:	687b      	ldr	r3, [r7, #4]
   16a16:	681b      	ldr	r3, [r3, #0]
   16a18:	3304      	adds	r3, #4
   16a1a:	681b      	ldr	r3, [r3, #0]
   16a1c:	687a      	ldr	r2, [r7, #4]
   16a1e:	3226      	adds	r2, #38	; 0x26
   16a20:	4611      	mov	r1, r2
   16a22:	6878      	ldr	r0, [r7, #4]
   16a24:	4798      	blx	r3
   16a26:	4602      	mov	r2, r0
   16a28:	687b      	ldr	r3, [r7, #4]
   16a2a:	609a      	str	r2, [r3, #8]
	ReadLastDateTime();
   16a2c:	6878      	ldr	r0, [r7, #4]
   16a2e:	4b1a      	ldr	r3, [pc, #104]	; (16a98 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x9c>)
   16a30:	4798      	blx	r3
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   16a32:	687b      	ldr	r3, [r7, #4]
   16a34:	681b      	ldr	r3, [r3, #0]
   16a36:	3304      	adds	r3, #4
   16a38:	681b      	ldr	r3, [r3, #0]
   16a3a:	687a      	ldr	r2, [r7, #4]
   16a3c:	322e      	adds	r2, #46	; 0x2e
   16a3e:	4611      	mov	r1, r2
   16a40:	6878      	ldr	r0, [r7, #4]
   16a42:	4798      	blx	r3
   16a44:	4602      	mov	r2, r0
   16a46:	687b      	ldr	r3, [r7, #4]
   16a48:	60da      	str	r2, [r3, #12]
	tick_t diferencia;
	if (lastTimestamp==calendar.nullTimestamp)
   16a4a:	687b      	ldr	r3, [r7, #4]
   16a4c:	68da      	ldr	r2, [r3, #12]
   16a4e:	4b13      	ldr	r3, [pc, #76]	; (16a9c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa0>)
   16a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   16a52:	429a      	cmp	r2, r3
   16a54:	d103      	bne.n	16a5e <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x62>
	{
		diferencia=UPDATE_TIME_MAX*2;
   16a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16a5a:	60fb      	str	r3, [r7, #12]
   16a5c:	e016      	b.n	16a8c <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0x90>
	} 
	else
	{
		timeDifference=difftime((time_t)currentTimestamp,(time_t)lastTimestamp);
   16a5e:	687b      	ldr	r3, [r7, #4]
   16a60:	689b      	ldr	r3, [r3, #8]
   16a62:	461a      	mov	r2, r3
   16a64:	687b      	ldr	r3, [r7, #4]
   16a66:	68db      	ldr	r3, [r3, #12]
   16a68:	4619      	mov	r1, r3
   16a6a:	4610      	mov	r0, r2
   16a6c:	4b0c      	ldr	r3, [pc, #48]	; (16aa0 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa4>)
   16a6e:	4798      	blx	r3
   16a70:	4603      	mov	r3, r0
   16a72:	460c      	mov	r4, r1
   16a74:	687a      	ldr	r2, [r7, #4]
   16a76:	e9c2 3406 	strd	r3, r4, [r2, #24]
		diferencia=(uint32_t)timeDifference;
   16a7a:	687b      	ldr	r3, [r7, #4]
   16a7c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
   16a80:	4a08      	ldr	r2, [pc, #32]	; (16aa4 <_ZN17DateTimeLog_Class20GetPowerInterrupTimeEv+0xa8>)
   16a82:	4618      	mov	r0, r3
   16a84:	4621      	mov	r1, r4
   16a86:	4790      	blx	r2
   16a88:	4603      	mov	r3, r0
   16a8a:	60fb      	str	r3, [r7, #12]
	}

	return	diferencia;
   16a8c:	68fb      	ldr	r3, [r7, #12]
}
   16a8e:	4618      	mov	r0, r3
   16a90:	3714      	adds	r7, #20
   16a92:	46bd      	mov	sp, r7
   16a94:	bd90      	pop	{r4, r7, pc}
   16a96:	bf00      	nop
   16a98:	00016c91 	.word	0x00016c91
   16a9c:	20009fd8 	.word	0x20009fd8
   16aa0:	0001b091 	.word	0x0001b091
   16aa4:	0001a73d 	.word	0x0001a73d

00016aa8 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
   16aa8:	b5b0      	push	{r4, r5, r7, lr}
   16aaa:	b082      	sub	sp, #8
   16aac:	af00      	add	r7, sp, #0
   16aae:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
   16ab0:	4b07      	ldr	r3, [pc, #28]	; (16ad0 <_ZSt3absIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_+0x28>)
   16ab2:	6878      	ldr	r0, [r7, #4]
   16ab4:	4798      	blx	r3
   16ab6:	4602      	mov	r2, r0
   16ab8:	460b      	mov	r3, r1
   16aba:	4614      	mov	r4, r2
   16abc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   16ac0:	4623      	mov	r3, r4
   16ac2:	462c      	mov	r4, r5
   16ac4:	4618      	mov	r0, r3
   16ac6:	4621      	mov	r1, r4
   16ac8:	3708      	adds	r7, #8
   16aca:	46bd      	mov	sp, r7
   16acc:	bdb0      	pop	{r4, r5, r7, pc}
   16ace:	bf00      	nop
   16ad0:	0001a111 	.word	0x0001a111

00016ad4 <_ZN17DateTimeLog_Class14WasInterruptedEv>:

bool	DateTimeLog_Class::WasInterrupted(void){
   16ad4:	b5b0      	push	{r4, r5, r7, lr}
   16ad6:	b082      	sub	sp, #8
   16ad8:	af00      	add	r7, sp, #0
   16ada:	6078      	str	r0, [r7, #4]
	
	if (abs(GetPowerInterrupTime()-UPDATE_TIME_MAX)>UPDATE_ERROR)
   16adc:	6878      	ldr	r0, [r7, #4]
   16ade:	4b12      	ldr	r3, [pc, #72]	; (16b28 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x54>)
   16ae0:	4798      	blx	r3
   16ae2:	4603      	mov	r3, r0
   16ae4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   16ae8:	4618      	mov	r0, r3
   16aea:	4b10      	ldr	r3, [pc, #64]	; (16b2c <_ZN17DateTimeLog_Class14WasInterruptedEv+0x58>)
   16aec:	4798      	blx	r3
   16aee:	2301      	movs	r3, #1
   16af0:	461d      	mov	r5, r3
   16af2:	4c0f      	ldr	r4, [pc, #60]	; (16b30 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x5c>)
   16af4:	f04f 0200 	mov.w	r2, #0
   16af8:	4b0e      	ldr	r3, [pc, #56]	; (16b34 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x60>)
   16afa:	47a0      	blx	r4
   16afc:	4603      	mov	r3, r0
   16afe:	2b00      	cmp	r3, #0
   16b00:	d101      	bne.n	16b06 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x32>
   16b02:	2300      	movs	r3, #0
   16b04:	461d      	mov	r5, r3
   16b06:	b2eb      	uxtb	r3, r5
   16b08:	2b00      	cmp	r3, #0
   16b0a:	d003      	beq.n	16b14 <_ZN17DateTimeLog_Class14WasInterruptedEv+0x40>
	{
		powerInterrupt=true;
   16b0c:	687b      	ldr	r3, [r7, #4]
   16b0e:	2201      	movs	r2, #1
   16b10:	711a      	strb	r2, [r3, #4]
   16b12:	e002      	b.n	16b1a <_ZN17DateTimeLog_Class14WasInterruptedEv+0x46>
	} 
	else
	{
		powerInterrupt=false;
   16b14:	687b      	ldr	r3, [r7, #4]
   16b16:	2200      	movs	r2, #0
   16b18:	711a      	strb	r2, [r3, #4]
	}
	return	powerInterrupt;
   16b1a:	687b      	ldr	r3, [r7, #4]
   16b1c:	791b      	ldrb	r3, [r3, #4]
   16b1e:	b2db      	uxtb	r3, r3
}
   16b20:	4618      	mov	r0, r3
   16b22:	3708      	adds	r7, #8
   16b24:	46bd      	mov	sp, r7
   16b26:	bdb0      	pop	{r4, r5, r7, pc}
   16b28:	000169fd 	.word	0x000169fd
   16b2c:	00016aa9 	.word	0x00016aa9
   16b30:	0001a6fd 	.word	0x0001a6fd
   16b34:	40490000 	.word	0x40490000

00016b38 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv>:

uint32_t	DateTimeLog_Class::IncrementMemoryStack(){
   16b38:	b590      	push	{r4, r7, lr}
   16b3a:	b085      	sub	sp, #20
   16b3c:	af00      	add	r7, sp, #0
   16b3e:	6078      	str	r0, [r7, #4]
	
	uint32_t r=	eeprom.ReadAddress((uint8_t*)&stackValue,stackAdress,1);
   16b40:	687b      	ldr	r3, [r7, #4]
   16b42:	f103 0122 	add.w	r1, r3, #34	; 0x22
   16b46:	687b      	ldr	r3, [r7, #4]
   16b48:	8c1a      	ldrh	r2, [r3, #32]
   16b4a:	2301      	movs	r3, #1
   16b4c:	480c      	ldr	r0, [pc, #48]	; (16b80 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   16b4e:	4c0d      	ldr	r4, [pc, #52]	; (16b84 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x4c>)
   16b50:	47a0      	blx	r4
   16b52:	60f8      	str	r0, [r7, #12]
	stackValue=(uint16_t)RollStack();
   16b54:	6878      	ldr	r0, [r7, #4]
   16b56:	4b0c      	ldr	r3, [pc, #48]	; (16b88 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x50>)
   16b58:	4798      	blx	r3
   16b5a:	4603      	mov	r3, r0
   16b5c:	b29a      	uxth	r2, r3
   16b5e:	687b      	ldr	r3, [r7, #4]
   16b60:	845a      	strh	r2, [r3, #34]	; 0x22
	r=	eeprom.WriteAddress((uint8_t*)&stackValue,stackAdress,1);
   16b62:	687b      	ldr	r3, [r7, #4]
   16b64:	f103 0122 	add.w	r1, r3, #34	; 0x22
   16b68:	687b      	ldr	r3, [r7, #4]
   16b6a:	8c1a      	ldrh	r2, [r3, #32]
   16b6c:	2301      	movs	r3, #1
   16b6e:	4804      	ldr	r0, [pc, #16]	; (16b80 <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x48>)
   16b70:	4c06      	ldr	r4, [pc, #24]	; (16b8c <_ZN17DateTimeLog_Class20IncrementMemoryStackEv+0x54>)
   16b72:	47a0      	blx	r4
   16b74:	60f8      	str	r0, [r7, #12]
	return r;
   16b76:	68fb      	ldr	r3, [r7, #12]
}
   16b78:	4618      	mov	r0, r3
   16b7a:	3714      	adds	r7, #20
   16b7c:	46bd      	mov	sp, r7
   16b7e:	bd90      	pop	{r4, r7, pc}
   16b80:	20009d58 	.word	0x20009d58
   16b84:	0001579d 	.word	0x0001579d
   16b88:	00016b91 	.word	0x00016b91
   16b8c:	000156e1 	.word	0x000156e1

00016b90 <_ZN17DateTimeLog_Class9RollStackEv>:
 uint8_t DateTimeLog_Class::RollStack(void)
 {
   16b90:	b480      	push	{r7}
   16b92:	b083      	sub	sp, #12
   16b94:	af00      	add	r7, sp, #0
   16b96:	6078      	str	r0, [r7, #4]
	 return (uint8_t)(stackValue +1 ) % AT24MAC_BUFFER_SIZE;
   16b98:	687b      	ldr	r3, [r7, #4]
   16b9a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   16b9c:	b2db      	uxtb	r3, r3
   16b9e:	3301      	adds	r3, #1
   16ba0:	b2db      	uxtb	r3, r3
   16ba2:	f003 030f 	and.w	r3, r3, #15
   16ba6:	b2db      	uxtb	r3, r3
 }
   16ba8:	4618      	mov	r0, r3
   16baa:	370c      	adds	r7, #12
   16bac:	46bd      	mov	sp, r7
   16bae:	bc80      	pop	{r7}
   16bb0:	4770      	bx	lr
	...

00016bb4 <_ZN17DateTimeLog_Class14ReadStackValueEv>:
 
 uint8_t	DateTimeLog_Class::ReadStackValue(void){
   16bb4:	b590      	push	{r4, r7, lr}
   16bb6:	b085      	sub	sp, #20
   16bb8:	af00      	add	r7, sp, #0
   16bba:	6078      	str	r0, [r7, #4]
	 uint8_t s;
	eeprom.ReadAddress(&s,stackAdress,1);
   16bbc:	687b      	ldr	r3, [r7, #4]
   16bbe:	8c1a      	ldrh	r2, [r3, #32]
   16bc0:	f107 010f 	add.w	r1, r7, #15
   16bc4:	2301      	movs	r3, #1
   16bc6:	4804      	ldr	r0, [pc, #16]	; (16bd8 <_ZN17DateTimeLog_Class14ReadStackValueEv+0x24>)
   16bc8:	4c04      	ldr	r4, [pc, #16]	; (16bdc <_ZN17DateTimeLog_Class14ReadStackValueEv+0x28>)
   16bca:	47a0      	blx	r4
	 return	s;
   16bcc:	7bfb      	ldrb	r3, [r7, #15]
 }
   16bce:	4618      	mov	r0, r3
   16bd0:	3714      	adds	r7, #20
   16bd2:	46bd      	mov	sp, r7
   16bd4:	bd90      	pop	{r4, r7, pc}
   16bd6:	bf00      	nop
   16bd8:	20009d58 	.word	0x20009d58
   16bdc:	0001579d 	.word	0x0001579d

00016be0 <_ZN17DateTimeLog_Class23SetCalendarStackAddressEm>:
 
 uint16_t	DateTimeLog_Class::SetCalendarStackAddress(uint32_t add){
   16be0:	b480      	push	{r7}
   16be2:	b083      	sub	sp, #12
   16be4:	af00      	add	r7, sp, #0
   16be6:	6078      	str	r0, [r7, #4]
   16be8:	6039      	str	r1, [r7, #0]
	 stackAdress=(uint16_t)(add&0xffff);
   16bea:	683b      	ldr	r3, [r7, #0]
   16bec:	b29a      	uxth	r2, r3
   16bee:	687b      	ldr	r3, [r7, #4]
   16bf0:	841a      	strh	r2, [r3, #32]
	 return	stackAdress;
   16bf2:	687b      	ldr	r3, [r7, #4]
   16bf4:	8c1b      	ldrh	r3, [r3, #32]
 }
   16bf6:	4618      	mov	r0, r3
   16bf8:	370c      	adds	r7, #12
   16bfa:	46bd      	mov	sp, r7
   16bfc:	bc80      	pop	{r7}
   16bfe:	4770      	bx	lr

00016c00 <_ZN17DateTimeLog_Class18SetCalendarAddressEm>:
uint16_t	DateTimeLog_Class::SetCalendarAddress(uint32_t add){
   16c00:	b480      	push	{r7}
   16c02:	b083      	sub	sp, #12
   16c04:	af00      	add	r7, sp, #0
   16c06:	6078      	str	r0, [r7, #4]
   16c08:	6039      	str	r1, [r7, #0]
	dataTimeLogsAddress=(uint16_t)(add&0xffff);
   16c0a:	683b      	ldr	r3, [r7, #0]
   16c0c:	b29a      	uxth	r2, r3
   16c0e:	687b      	ldr	r3, [r7, #4]
   16c10:	849a      	strh	r2, [r3, #36]	; 0x24
	return	dataTimeLogsAddress;
   16c12:	687b      	ldr	r3, [r7, #4]
   16c14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}
   16c16:	4618      	mov	r0, r3
   16c18:	370c      	adds	r7, #12
   16c1a:	46bd      	mov	sp, r7
   16c1c:	bc80      	pop	{r7}
   16c1e:	4770      	bx	lr

00016c20 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv>:
uint32_t	DateTimeLog_Class::SaveCurrentDateTime(void){
   16c20:	b590      	push	{r4, r7, lr}
   16c22:	b085      	sub	sp, #20
   16c24:	af00      	add	r7, sp, #0
   16c26:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   16c28:	6878      	ldr	r0, [r7, #4]
   16c2a:	4b15      	ldr	r3, [pc, #84]	; (16c80 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x60>)
   16c2c:	4798      	blx	r3
   16c2e:	4603      	mov	r3, r0
   16c30:	b29a      	uxth	r2, r3
   16c32:	687b      	ldr	r3, [r7, #4]
   16c34:	845a      	strh	r2, [r3, #34]	; 0x22
	GetDateTime(&dateTime);
   16c36:	687b      	ldr	r3, [r7, #4]
   16c38:	681b      	ldr	r3, [r3, #0]
   16c3a:	681b      	ldr	r3, [r3, #0]
   16c3c:	687a      	ldr	r2, [r7, #4]
   16c3e:	3226      	adds	r2, #38	; 0x26
   16c40:	4611      	mov	r1, r2
   16c42:	6878      	ldr	r0, [r7, #4]
   16c44:	4798      	blx	r3
	handler=(PTR_DATE_TIME)(&dateTime);
   16c46:	687b      	ldr	r3, [r7, #4]
   16c48:	3326      	adds	r3, #38	; 0x26
   16c4a:	461a      	mov	r2, r3
   16c4c:	687b      	ldr	r3, [r7, #4]
   16c4e:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t	w= eeprom.WriteAddress((uint8_t*)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   16c50:	687b      	ldr	r3, [r7, #4]
   16c52:	6b99      	ldr	r1, [r3, #56]	; 0x38
   16c54:	687b      	ldr	r3, [r7, #4]
   16c56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   16c58:	b2da      	uxtb	r2, r3
   16c5a:	687b      	ldr	r3, [r7, #4]
   16c5c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   16c5e:	b2db      	uxtb	r3, r3
   16c60:	4413      	add	r3, r2
   16c62:	b2da      	uxtb	r2, r3
   16c64:	2308      	movs	r3, #8
   16c66:	4807      	ldr	r0, [pc, #28]	; (16c84 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x64>)
   16c68:	4c07      	ldr	r4, [pc, #28]	; (16c88 <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x68>)
   16c6a:	47a0      	blx	r4
   16c6c:	60f8      	str	r0, [r7, #12]
	IncrementMemoryStack();
   16c6e:	6878      	ldr	r0, [r7, #4]
   16c70:	4b06      	ldr	r3, [pc, #24]	; (16c8c <_ZN17DateTimeLog_Class19SaveCurrentDateTimeEv+0x6c>)
   16c72:	4798      	blx	r3
	return	w;
   16c74:	68fb      	ldr	r3, [r7, #12]
}
   16c76:	4618      	mov	r0, r3
   16c78:	3714      	adds	r7, #20
   16c7a:	46bd      	mov	sp, r7
   16c7c:	bd90      	pop	{r4, r7, pc}
   16c7e:	bf00      	nop
   16c80:	00016bb5 	.word	0x00016bb5
   16c84:	20009d58 	.word	0x20009d58
   16c88:	00015581 	.word	0x00015581
   16c8c:	00016b39 	.word	0x00016b39

00016c90 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv>:

uint32_t	DateTimeLog_Class::ReadLastDateTime(void){
   16c90:	b590      	push	{r4, r7, lr}
   16c92:	b085      	sub	sp, #20
   16c94:	af00      	add	r7, sp, #0
   16c96:	6078      	str	r0, [r7, #4]
	stackValue=ReadStackValue();
   16c98:	6878      	ldr	r0, [r7, #4]
   16c9a:	4b0f      	ldr	r3, [pc, #60]	; (16cd8 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x48>)
   16c9c:	4798      	blx	r3
   16c9e:	4603      	mov	r3, r0
   16ca0:	b29a      	uxth	r2, r3
   16ca2:	687b      	ldr	r3, [r7, #4]
   16ca4:	845a      	strh	r2, [r3, #34]	; 0x22
	handler=(PTR_DATE_TIME)(&lastDateTime);
   16ca6:	687b      	ldr	r3, [r7, #4]
   16ca8:	332e      	adds	r3, #46	; 0x2e
   16caa:	461a      	mov	r2, r3
   16cac:	687b      	ldr	r3, [r7, #4]
   16cae:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t r=	eeprom.ReadAddress((uint8_t *)handler,(uint8_t)(dataTimeLogsAddress+stackValue),(uint8_t)sizeof(lastDateTime));
   16cb0:	687b      	ldr	r3, [r7, #4]
   16cb2:	6b99      	ldr	r1, [r3, #56]	; 0x38
   16cb4:	687b      	ldr	r3, [r7, #4]
   16cb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   16cb8:	b2da      	uxtb	r2, r3
   16cba:	687b      	ldr	r3, [r7, #4]
   16cbc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   16cbe:	b2db      	uxtb	r3, r3
   16cc0:	4413      	add	r3, r2
   16cc2:	b2da      	uxtb	r2, r3
   16cc4:	2308      	movs	r3, #8
   16cc6:	4805      	ldr	r0, [pc, #20]	; (16cdc <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x4c>)
   16cc8:	4c05      	ldr	r4, [pc, #20]	; (16ce0 <_ZN17DateTimeLog_Class16ReadLastDateTimeEv+0x50>)
   16cca:	47a0      	blx	r4
   16ccc:	60f8      	str	r0, [r7, #12]
	return	r;
   16cce:	68fb      	ldr	r3, [r7, #12]
}
   16cd0:	4618      	mov	r0, r3
   16cd2:	3714      	adds	r7, #20
   16cd4:	46bd      	mov	sp, r7
   16cd6:	bd90      	pop	{r4, r7, pc}
   16cd8:	00016bb5 	.word	0x00016bb5
   16cdc:	20009d58 	.word	0x20009d58
   16ce0:	00015715 	.word	0x00015715

00016ce4 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   16ce4:	b480      	push	{r7}
   16ce6:	b083      	sub	sp, #12
   16ce8:	af00      	add	r7, sp, #0
   16cea:	6078      	str	r0, [r7, #4]
   16cec:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   16cee:	687b      	ldr	r3, [r7, #4]
   16cf0:	683a      	ldr	r2, [r7, #0]
   16cf2:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
   16cf4:	4a06      	ldr	r2, [pc, #24]	; (16d10 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
   16cf6:	687b      	ldr	r3, [r7, #4]
   16cf8:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   16cfa:	687b      	ldr	r3, [r7, #4]
   16cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16d00:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   16d02:	687b      	ldr	r3, [r7, #4]
   16d04:	4618      	mov	r0, r3
   16d06:	370c      	adds	r7, #12
   16d08:	46bd      	mov	sp, r7
   16d0a:	bc80      	pop	{r7}
   16d0c:	4770      	bx	lr
   16d0e:	bf00      	nop
   16d10:	2000a080 	.word	0x2000a080

00016d14 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   16d14:	b480      	push	{r7}
   16d16:	b083      	sub	sp, #12
   16d18:	af00      	add	r7, sp, #0
   16d1a:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   16d1c:	687b      	ldr	r3, [r7, #4]
   16d1e:	2200      	movs	r2, #0
   16d20:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   16d22:	687b      	ldr	r3, [r7, #4]
   16d24:	4618      	mov	r0, r3
   16d26:	370c      	adds	r7, #12
   16d28:	46bd      	mov	sp, r7
   16d2a:	bc80      	pop	{r7}
   16d2c:	4770      	bx	lr
	...

00016d30 <_ZL9InitArrayv>:


static void InitArray(){
   16d30:	b480      	push	{r7}
   16d32:	b083      	sub	sp, #12
   16d34:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
   16d36:	2301      	movs	r3, #1
   16d38:	607b      	str	r3, [r7, #4]
   16d3a:	687b      	ldr	r3, [r7, #4]
   16d3c:	2b0f      	cmp	r3, #15
   16d3e:	dc26      	bgt.n	16d8e <_ZL9InitArrayv+0x5e>
	{
		taskArray[i].elem.next = (list_element*)NULL;
   16d40:	4917      	ldr	r1, [pc, #92]	; (16da0 <_ZL9InitArrayv+0x70>)
   16d42:	687a      	ldr	r2, [r7, #4]
   16d44:	4613      	mov	r3, r2
   16d46:	009b      	lsls	r3, r3, #2
   16d48:	4413      	add	r3, r2
   16d4a:	009b      	lsls	r3, r3, #2
   16d4c:	440b      	add	r3, r1
   16d4e:	2200      	movs	r2, #0
   16d50:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
   16d52:	4913      	ldr	r1, [pc, #76]	; (16da0 <_ZL9InitArrayv+0x70>)
   16d54:	687a      	ldr	r2, [r7, #4]
   16d56:	4613      	mov	r3, r2
   16d58:	009b      	lsls	r3, r3, #2
   16d5a:	4413      	add	r3, r2
   16d5c:	009b      	lsls	r3, r3, #2
   16d5e:	440b      	add	r3, r1
   16d60:	330c      	adds	r3, #12
   16d62:	2200      	movs	r2, #0
   16d64:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
   16d66:	687b      	ldr	r3, [r7, #4]
   16d68:	1e5a      	subs	r2, r3, #1
   16d6a:	6879      	ldr	r1, [r7, #4]
   16d6c:	460b      	mov	r3, r1
   16d6e:	009b      	lsls	r3, r3, #2
   16d70:	440b      	add	r3, r1
   16d72:	009b      	lsls	r3, r3, #2
   16d74:	490a      	ldr	r1, [pc, #40]	; (16da0 <_ZL9InitArrayv+0x70>)
   16d76:	4419      	add	r1, r3
   16d78:	4809      	ldr	r0, [pc, #36]	; (16da0 <_ZL9InitArrayv+0x70>)
   16d7a:	4613      	mov	r3, r2
   16d7c:	009b      	lsls	r3, r3, #2
   16d7e:	4413      	add	r3, r2
   16d80:	009b      	lsls	r3, r3, #2
   16d82:	4403      	add	r3, r0
   16d84:	6019      	str	r1, [r3, #0]
	for (int i=1; i<TASK_NUMBER	; i++)
   16d86:	687b      	ldr	r3, [r7, #4]
   16d88:	3301      	adds	r3, #1
   16d8a:	607b      	str	r3, [r7, #4]
   16d8c:	e7d5      	b.n	16d3a <_ZL9InitArrayv+0xa>
	}
	arrayInitiated=true;
   16d8e:	4b05      	ldr	r3, [pc, #20]	; (16da4 <_ZL9InitArrayv+0x74>)
   16d90:	2201      	movs	r2, #1
   16d92:	701a      	strb	r2, [r3, #0]
		
}
   16d94:	bf00      	nop
   16d96:	370c      	adds	r7, #12
   16d98:	46bd      	mov	sp, r7
   16d9a:	bc80      	pop	{r7}
   16d9c:	4770      	bx	lr
   16d9e:	bf00      	nop
   16da0:	2000a084 	.word	0x2000a084
   16da4:	2000a1c4 	.word	0x2000a1c4

00016da8 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
   16da8:	b580      	push	{r7, lr}
   16daa:	b082      	sub	sp, #8
   16dac:	af00      	add	r7, sp, #0
   16dae:	6078      	str	r0, [r7, #4]
	ticks=0;
   16db0:	687b      	ldr	r3, [r7, #4]
   16db2:	2200      	movs	r2, #0
   16db4:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
   16db6:	4b0d      	ldr	r3, [pc, #52]	; (16dec <_ZN11Timer_Class4InitEv+0x44>)
   16db8:	781b      	ldrb	r3, [r3, #0]
   16dba:	f083 0301 	eor.w	r3, r3, #1
   16dbe:	b2db      	uxtb	r3, r3
   16dc0:	2b00      	cmp	r3, #0
   16dc2:	d001      	beq.n	16dc8 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
   16dc4:	4b0a      	ldr	r3, [pc, #40]	; (16df0 <_ZN11Timer_Class4InitEv+0x48>)
   16dc6:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=start()==ERR_NONE;
   16dc8:	6878      	ldr	r0, [r7, #4]
   16dca:	4b0a      	ldr	r3, [pc, #40]	; (16df4 <_ZN11Timer_Class4InitEv+0x4c>)
   16dcc:	4798      	blx	r3
   16dce:	4603      	mov	r3, r0
   16dd0:	2b00      	cmp	r3, #0
   16dd2:	bf0c      	ite	eq
   16dd4:	2301      	moveq	r3, #1
   16dd6:	2300      	movne	r3, #0
   16dd8:	b2da      	uxtb	r2, r3
   16dda:	687b      	ldr	r3, [r7, #4]
   16ddc:	709a      	strb	r2, [r3, #2]
	return isOK;
   16dde:	687b      	ldr	r3, [r7, #4]
   16de0:	789b      	ldrb	r3, [r3, #2]
   16de2:	b2db      	uxtb	r3, r3
}
   16de4:	4618      	mov	r0, r3
   16de6:	3708      	adds	r7, #8
   16de8:	46bd      	mov	sp, r7
   16dea:	bd80      	pop	{r7, pc}
   16dec:	2000a1c4 	.word	0x2000a1c4
   16df0:	00016d31 	.word	0x00016d31
   16df4:	00016df9 	.word	0x00016df9

00016df8 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
   16df8:	b580      	push	{r7, lr}
   16dfa:	b084      	sub	sp, #16
   16dfc:	af00      	add	r7, sp, #0
   16dfe:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   16e00:	687b      	ldr	r3, [r7, #4]
   16e02:	68db      	ldr	r3, [r3, #12]
   16e04:	4618      	mov	r0, r3
   16e06:	4b04      	ldr	r3, [pc, #16]	; (16e18 <_ZN11Timer_Class5startEv+0x20>)
   16e08:	4798      	blx	r3
   16e0a:	60f8      	str	r0, [r7, #12]
	return status;
   16e0c:	68fb      	ldr	r3, [r7, #12]
	
}
   16e0e:	4618      	mov	r0, r3
   16e10:	3710      	adds	r7, #16
   16e12:	46bd      	mov	sp, r7
   16e14:	bd80      	pop	{r7, pc}
   16e16:	bf00      	nop
   16e18:	00006c05 	.word	0x00006c05

00016e1c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   16e1c:	b580      	push	{r7, lr}
   16e1e:	b086      	sub	sp, #24
   16e20:	af00      	add	r7, sp, #0
   16e22:	60f8      	str	r0, [r7, #12]
   16e24:	60b9      	str	r1, [r7, #8]
   16e26:	607a      	str	r2, [r7, #4]
   16e28:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   16e2a:	68f8      	ldr	r0, [r7, #12]
   16e2c:	4b0d      	ldr	r3, [pc, #52]	; (16e64 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   16e2e:	4798      	blx	r3
	task->interval = interval;
   16e30:	68fb      	ldr	r3, [r7, #12]
   16e32:	699b      	ldr	r3, [r3, #24]
   16e34:	687a      	ldr	r2, [r7, #4]
   16e36:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   16e38:	68fb      	ldr	r3, [r7, #12]
   16e3a:	699b      	ldr	r3, [r3, #24]
   16e3c:	68ba      	ldr	r2, [r7, #8]
   16e3e:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   16e40:	68fb      	ldr	r3, [r7, #12]
   16e42:	699b      	ldr	r3, [r3, #24]
   16e44:	78fa      	ldrb	r2, [r7, #3]
   16e46:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   16e48:	68fb      	ldr	r3, [r7, #12]
   16e4a:	68da      	ldr	r2, [r3, #12]
   16e4c:	68fb      	ldr	r3, [r7, #12]
   16e4e:	699b      	ldr	r3, [r3, #24]
   16e50:	4619      	mov	r1, r3
   16e52:	4610      	mov	r0, r2
   16e54:	4b04      	ldr	r3, [pc, #16]	; (16e68 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   16e56:	4798      	blx	r3
   16e58:	6178      	str	r0, [r7, #20]
	
	return status;
   16e5a:	697b      	ldr	r3, [r7, #20]
}
   16e5c:	4618      	mov	r0, r3
   16e5e:	3718      	adds	r7, #24
   16e60:	46bd      	mov	sp, r7
   16e62:	bd80      	pop	{r7, pc}
   16e64:	00016fa1 	.word	0x00016fa1
   16e68:	00006cd9 	.word	0x00006cd9

00016e6c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   16e6c:	b580      	push	{r7, lr}
   16e6e:	b086      	sub	sp, #24
   16e70:	af00      	add	r7, sp, #0
   16e72:	60f8      	str	r0, [r7, #12]
   16e74:	60b9      	str	r1, [r7, #8]
   16e76:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
   16e78:	687a      	ldr	r2, [r7, #4]
   16e7a:	68b9      	ldr	r1, [r7, #8]
   16e7c:	68f8      	ldr	r0, [r7, #12]
   16e7e:	4b0c      	ldr	r3, [pc, #48]	; (16eb0 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
   16e80:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
   16e82:	68fb      	ldr	r3, [r7, #12]
   16e84:	68db      	ldr	r3, [r3, #12]
   16e86:	681b      	ldr	r3, [r3, #0]
   16e88:	699b      	ldr	r3, [r3, #24]
   16e8a:	68fa      	ldr	r2, [r7, #12]
   16e8c:	68d2      	ldr	r2, [r2, #12]
   16e8e:	3204      	adds	r2, #4
   16e90:	4610      	mov	r0, r2
   16e92:	4798      	blx	r3
   16e94:	4603      	mov	r3, r0
   16e96:	2b00      	cmp	r3, #0
   16e98:	d105      	bne.n	16ea6 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
   16e9a:	68fb      	ldr	r3, [r7, #12]
   16e9c:	68db      	ldr	r3, [r3, #12]
   16e9e:	4618      	mov	r0, r3
   16ea0:	4b04      	ldr	r3, [pc, #16]	; (16eb4 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
   16ea2:	4798      	blx	r3
   16ea4:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
   16ea6:	697b      	ldr	r3, [r7, #20]
}
   16ea8:	4618      	mov	r0, r3
   16eaa:	3718      	adds	r7, #24
   16eac:	46bd      	mov	sp, r7
   16eae:	bd80      	pop	{r7, pc}
   16eb0:	00016eb9 	.word	0x00016eb9
   16eb4:	00006c05 	.word	0x00006c05

00016eb8 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   16eb8:	b590      	push	{r4, r7, lr}
   16eba:	b087      	sub	sp, #28
   16ebc:	af00      	add	r7, sp, #0
   16ebe:	60f8      	str	r0, [r7, #12]
   16ec0:	60b9      	str	r1, [r7, #8]
   16ec2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   16ec4:	2301      	movs	r3, #1
   16ec6:	687a      	ldr	r2, [r7, #4]
   16ec8:	68b9      	ldr	r1, [r7, #8]
   16eca:	68f8      	ldr	r0, [r7, #12]
   16ecc:	4c03      	ldr	r4, [pc, #12]	; (16edc <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
   16ece:	47a0      	blx	r4
   16ed0:	6178      	str	r0, [r7, #20]
		return status;
   16ed2:	697b      	ldr	r3, [r7, #20]
}
   16ed4:	4618      	mov	r0, r3
   16ed6:	371c      	adds	r7, #28
   16ed8:	46bd      	mov	sp, r7
   16eda:	bd90      	pop	{r4, r7, pc}
   16edc:	00016e1d 	.word	0x00016e1d

00016ee0 <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
   16ee0:	b580      	push	{r7, lr}
   16ee2:	b082      	sub	sp, #8
   16ee4:	af00      	add	r7, sp, #0
   16ee6:	6078      	str	r0, [r7, #4]
   16ee8:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   16eea:	6839      	ldr	r1, [r7, #0]
   16eec:	6878      	ldr	r0, [r7, #4]
   16eee:	4b0f      	ldr	r3, [pc, #60]	; (16f2c <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   16ef0:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   16ef2:	687b      	ldr	r3, [r7, #4]
   16ef4:	68db      	ldr	r3, [r3, #12]
   16ef6:	f103 0218 	add.w	r2, r3, #24
   16efa:	687b      	ldr	r3, [r7, #4]
   16efc:	699b      	ldr	r3, [r3, #24]
   16efe:	4619      	mov	r1, r3
   16f00:	4610      	mov	r0, r2
   16f02:	4b0b      	ldr	r3, [pc, #44]	; (16f30 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   16f04:	4798      	blx	r3
   16f06:	4603      	mov	r3, r0
   16f08:	2b00      	cmp	r3, #0
   16f0a:	d007      	beq.n	16f1c <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   16f0c:	687b      	ldr	r3, [r7, #4]
   16f0e:	68da      	ldr	r2, [r3, #12]
   16f10:	687b      	ldr	r3, [r7, #4]
   16f12:	699b      	ldr	r3, [r3, #24]
   16f14:	4619      	mov	r1, r3
   16f16:	4610      	mov	r0, r2
   16f18:	4b06      	ldr	r3, [pc, #24]	; (16f34 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   16f1a:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   16f1c:	687b      	ldr	r3, [r7, #4]
   16f1e:	699b      	ldr	r3, [r3, #24]
   16f20:	2200      	movs	r2, #0
   16f22:	60da      	str	r2, [r3, #12]
}
   16f24:	bf00      	nop
   16f26:	3708      	adds	r7, #8
   16f28:	46bd      	mov	sp, r7
   16f2a:	bd80      	pop	{r7, pc}
   16f2c:	00017001 	.word	0x00017001
   16f30:	000079c5 	.word	0x000079c5
   16f34:	00006ddd 	.word	0x00006ddd

00016f38 <_ZN11Timer_Class9Get_ticksEv>:



uint32_t	Timer_Class::Get_ticks(void){
   16f38:	b480      	push	{r7}
   16f3a:	b083      	sub	sp, #12
   16f3c:	af00      	add	r7, sp, #0
   16f3e:	6078      	str	r0, [r7, #4]
	
		return ticks;
   16f40:	687b      	ldr	r3, [r7, #4]
   16f42:	689b      	ldr	r3, [r3, #8]
}
   16f44:	4618      	mov	r0, r3
   16f46:	370c      	adds	r7, #12
   16f48:	46bd      	mov	sp, r7
   16f4a:	bc80      	pop	{r7}
   16f4c:	4770      	bx	lr
	...

00016f50 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   16f50:	b590      	push	{r4, r7, lr}
   16f52:	b087      	sub	sp, #28
   16f54:	af00      	add	r7, sp, #0
   16f56:	60f8      	str	r0, [r7, #12]
   16f58:	60b9      	str	r1, [r7, #8]
   16f5a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   16f5c:	2300      	movs	r3, #0
   16f5e:	687a      	ldr	r2, [r7, #4]
   16f60:	68b9      	ldr	r1, [r7, #8]
   16f62:	68f8      	ldr	r0, [r7, #12]
   16f64:	4c0c      	ldr	r4, [pc, #48]	; (16f98 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   16f66:	47a0      	blx	r4
   16f68:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   16f6a:	68fb      	ldr	r3, [r7, #12]
   16f6c:	68db      	ldr	r3, [r3, #12]
   16f6e:	681b      	ldr	r3, [r3, #0]
   16f70:	699b      	ldr	r3, [r3, #24]
   16f72:	68fa      	ldr	r2, [r7, #12]
   16f74:	68d2      	ldr	r2, [r2, #12]
   16f76:	3204      	adds	r2, #4
   16f78:	4610      	mov	r0, r2
   16f7a:	4798      	blx	r3
   16f7c:	4603      	mov	r3, r0
   16f7e:	2b00      	cmp	r3, #0
   16f80:	d105      	bne.n	16f8e <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   16f82:	68fb      	ldr	r3, [r7, #12]
   16f84:	68db      	ldr	r3, [r3, #12]
   16f86:	4618      	mov	r0, r3
   16f88:	4b04      	ldr	r3, [pc, #16]	; (16f9c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   16f8a:	4798      	blx	r3
   16f8c:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   16f8e:	697b      	ldr	r3, [r7, #20]
}
   16f90:	4618      	mov	r0, r3
   16f92:	371c      	adds	r7, #28
   16f94:	46bd      	mov	sp, r7
   16f96:	bd90      	pop	{r4, r7, pc}
   16f98:	00016e1d 	.word	0x00016e1d
   16f9c:	00006c05 	.word	0x00006c05

00016fa0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   16fa0:	b480      	push	{r7}
   16fa2:	b085      	sub	sp, #20
   16fa4:	af00      	add	r7, sp, #0
   16fa6:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   16fa8:	2300      	movs	r3, #0
   16faa:	73fb      	strb	r3, [r7, #15]
   16fac:	7bfb      	ldrb	r3, [r7, #15]
   16fae:	2b0f      	cmp	r3, #15
   16fb0:	dc1c      	bgt.n	16fec <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
   16fb2:	7bfb      	ldrb	r3, [r7, #15]
   16fb4:	f003 030f 	and.w	r3, r3, #15
   16fb8:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   16fba:	7bba      	ldrb	r2, [r7, #14]
   16fbc:	490f      	ldr	r1, [pc, #60]	; (16ffc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   16fbe:	4613      	mov	r3, r2
   16fc0:	009b      	lsls	r3, r3, #2
   16fc2:	4413      	add	r3, r2
   16fc4:	009b      	lsls	r3, r3, #2
   16fc6:	440b      	add	r3, r1
   16fc8:	330c      	adds	r3, #12
   16fca:	681b      	ldr	r3, [r3, #0]
   16fcc:	2b00      	cmp	r3, #0
   16fce:	d109      	bne.n	16fe4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
   16fd0:	7bba      	ldrb	r2, [r7, #14]
   16fd2:	4613      	mov	r3, r2
   16fd4:	009b      	lsls	r3, r3, #2
   16fd6:	4413      	add	r3, r2
   16fd8:	009b      	lsls	r3, r3, #2
   16fda:	4a08      	ldr	r2, [pc, #32]	; (16ffc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   16fdc:	441a      	add	r2, r3
   16fde:	687b      	ldr	r3, [r7, #4]
   16fe0:	619a      	str	r2, [r3, #24]
			return;
   16fe2:	e006      	b.n	16ff2 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   16fe4:	7bfb      	ldrb	r3, [r7, #15]
   16fe6:	3301      	adds	r3, #1
   16fe8:	73fb      	strb	r3, [r7, #15]
   16fea:	e7df      	b.n	16fac <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   16fec:	687b      	ldr	r3, [r7, #4]
   16fee:	4a03      	ldr	r2, [pc, #12]	; (16ffc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
   16ff0:	619a      	str	r2, [r3, #24]

}
   16ff2:	3714      	adds	r7, #20
   16ff4:	46bd      	mov	sp, r7
   16ff6:	bc80      	pop	{r7}
   16ff8:	4770      	bx	lr
   16ffa:	bf00      	nop
   16ffc:	2000a084 	.word	0x2000a084

00017000 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   17000:	b480      	push	{r7}
   17002:	b085      	sub	sp, #20
   17004:	af00      	add	r7, sp, #0
   17006:	6078      	str	r0, [r7, #4]
   17008:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1700a:	2300      	movs	r3, #0
   1700c:	73fb      	strb	r3, [r7, #15]
   1700e:	7bfb      	ldrb	r3, [r7, #15]
   17010:	2b0f      	cmp	r3, #15
   17012:	dc19      	bgt.n	17048 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   17014:	7bfa      	ldrb	r2, [r7, #15]
   17016:	490f      	ldr	r1, [pc, #60]	; (17054 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   17018:	4613      	mov	r3, r2
   1701a:	009b      	lsls	r3, r3, #2
   1701c:	4413      	add	r3, r2
   1701e:	009b      	lsls	r3, r3, #2
   17020:	440b      	add	r3, r1
   17022:	330c      	adds	r3, #12
   17024:	681a      	ldr	r2, [r3, #0]
   17026:	683b      	ldr	r3, [r7, #0]
   17028:	429a      	cmp	r2, r3
   1702a:	d109      	bne.n	17040 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   1702c:	7bfa      	ldrb	r2, [r7, #15]
   1702e:	4613      	mov	r3, r2
   17030:	009b      	lsls	r3, r3, #2
   17032:	4413      	add	r3, r2
   17034:	009b      	lsls	r3, r3, #2
   17036:	4a07      	ldr	r2, [pc, #28]	; (17054 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   17038:	441a      	add	r2, r3
   1703a:	687b      	ldr	r3, [r7, #4]
   1703c:	619a      	str	r2, [r3, #24]
			return;
   1703e:	e004      	b.n	1704a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   17040:	7bfb      	ldrb	r3, [r7, #15]
   17042:	3301      	adds	r3, #1
   17044:	73fb      	strb	r3, [r7, #15]
   17046:	e7e2      	b.n	1700e <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   17048:	bf00      	nop
}
   1704a:	3714      	adds	r7, #20
   1704c:	46bd      	mov	sp, r7
   1704e:	bc80      	pop	{r7}
   17050:	4770      	bx	lr
   17052:	bf00      	nop
   17054:	2000a084 	.word	0x2000a084

00017058 <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
   17058:	b580      	push	{r7, lr}
   1705a:	b082      	sub	sp, #8
   1705c:	af00      	add	r7, sp, #0
   1705e:	6078      	str	r0, [r7, #4]
   17060:	6039      	str	r1, [r7, #0]
   17062:	687b      	ldr	r3, [r7, #4]
   17064:	2b01      	cmp	r3, #1
   17066:	d131      	bne.n	170cc <_Z41__static_initialization_and_destruction_0ii+0x74>
   17068:	683b      	ldr	r3, [r7, #0]
   1706a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1706e:	4293      	cmp	r3, r2
   17070:	d12c      	bne.n	170cc <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   17072:	4918      	ldr	r1, [pc, #96]	; (170d4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   17074:	4818      	ldr	r0, [pc, #96]	; (170d8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   17076:	4b19      	ldr	r3, [pc, #100]	; (170dc <_Z41__static_initialization_and_destruction_0ii+0x84>)
   17078:	4798      	blx	r3
   1707a:	4a19      	ldr	r2, [pc, #100]	; (170e0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   1707c:	4919      	ldr	r1, [pc, #100]	; (170e4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   1707e:	4816      	ldr	r0, [pc, #88]	; (170d8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   17080:	4b19      	ldr	r3, [pc, #100]	; (170e8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17082:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
   17084:	4919      	ldr	r1, [pc, #100]	; (170ec <_Z41__static_initialization_and_destruction_0ii+0x94>)
   17086:	481a      	ldr	r0, [pc, #104]	; (170f0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   17088:	4b14      	ldr	r3, [pc, #80]	; (170dc <_Z41__static_initialization_and_destruction_0ii+0x84>)
   1708a:	4798      	blx	r3
   1708c:	4a14      	ldr	r2, [pc, #80]	; (170e0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   1708e:	4915      	ldr	r1, [pc, #84]	; (170e4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   17090:	4817      	ldr	r0, [pc, #92]	; (170f0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
   17092:	4b15      	ldr	r3, [pc, #84]	; (170e8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   17094:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
   17096:	4917      	ldr	r1, [pc, #92]	; (170f4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
   17098:	4817      	ldr	r0, [pc, #92]	; (170f8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   1709a:	4b10      	ldr	r3, [pc, #64]	; (170dc <_Z41__static_initialization_and_destruction_0ii+0x84>)
   1709c:	4798      	blx	r3
   1709e:	4a10      	ldr	r2, [pc, #64]	; (170e0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   170a0:	4910      	ldr	r1, [pc, #64]	; (170e4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   170a2:	4815      	ldr	r0, [pc, #84]	; (170f8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
   170a4:	4b10      	ldr	r3, [pc, #64]	; (170e8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   170a6:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
   170a8:	4914      	ldr	r1, [pc, #80]	; (170fc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
   170aa:	4815      	ldr	r0, [pc, #84]	; (17100 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   170ac:	4b0b      	ldr	r3, [pc, #44]	; (170dc <_Z41__static_initialization_and_destruction_0ii+0x84>)
   170ae:	4798      	blx	r3
   170b0:	4a0b      	ldr	r2, [pc, #44]	; (170e0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   170b2:	490c      	ldr	r1, [pc, #48]	; (170e4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   170b4:	4812      	ldr	r0, [pc, #72]	; (17100 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
   170b6:	4b0c      	ldr	r3, [pc, #48]	; (170e8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   170b8:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
   170ba:	4912      	ldr	r1, [pc, #72]	; (17104 <_Z41__static_initialization_and_destruction_0ii+0xac>)
   170bc:	4812      	ldr	r0, [pc, #72]	; (17108 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   170be:	4b07      	ldr	r3, [pc, #28]	; (170dc <_Z41__static_initialization_and_destruction_0ii+0x84>)
   170c0:	4798      	blx	r3
   170c2:	4a07      	ldr	r2, [pc, #28]	; (170e0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   170c4:	4907      	ldr	r1, [pc, #28]	; (170e4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   170c6:	4810      	ldr	r0, [pc, #64]	; (17108 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
   170c8:	4b07      	ldr	r3, [pc, #28]	; (170e8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   170ca:	4798      	blx	r3
   170cc:	bf00      	nop
   170ce:	3708      	adds	r7, #8
   170d0:	46bd      	mov	sp, r7
   170d2:	bd80      	pop	{r7, pc}
   170d4:	2000a4f4 	.word	0x2000a4f4
   170d8:	2000a1c8 	.word	0x2000a1c8
   170dc:	00016ce5 	.word	0x00016ce5
   170e0:	20000000 	.word	0x20000000
   170e4:	00016d15 	.word	0x00016d15
   170e8:	00018bf5 	.word	0x00018bf5
   170ec:	2000a580 	.word	0x2000a580
   170f0:	2000a1e4 	.word	0x2000a1e4
   170f4:	2000a6a4 	.word	0x2000a6a4
   170f8:	2000a200 	.word	0x2000a200
   170fc:	2000a5a0 	.word	0x2000a5a0
   17100:	2000a21c 	.word	0x2000a21c
   17104:	2000a604 	.word	0x2000a604
   17108:	2000a238 	.word	0x2000a238

0001710c <_GLOBAL__sub_I_ptrTimerClass>:
   1710c:	b580      	push	{r7, lr}
   1710e:	af00      	add	r7, sp, #0
   17110:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17114:	2001      	movs	r0, #1
   17116:	4b01      	ldr	r3, [pc, #4]	; (1711c <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   17118:	4798      	blx	r3
   1711a:	bd80      	pop	{r7, pc}
   1711c:	00017059 	.word	0x00017059

00017120 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   17120:	b480      	push	{r7}
   17122:	b083      	sub	sp, #12
   17124:	af00      	add	r7, sp, #0
   17126:	6078      	str	r0, [r7, #4]
   17128:	4a05      	ldr	r2, [pc, #20]	; (17140 <_ZN5PrintC1Ev+0x20>)
   1712a:	687b      	ldr	r3, [r7, #4]
   1712c:	601a      	str	r2, [r3, #0]
   1712e:	687b      	ldr	r3, [r7, #4]
   17130:	2200      	movs	r2, #0
   17132:	605a      	str	r2, [r3, #4]
   17134:	687b      	ldr	r3, [r7, #4]
   17136:	4618      	mov	r0, r3
   17138:	370c      	adds	r7, #12
   1713a:	46bd      	mov	sp, r7
   1713c:	bc80      	pop	{r7}
   1713e:	4770      	bx	lr
   17140:	00020f3c 	.word	0x00020f3c

00017144 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   17144:	b480      	push	{r7}
   17146:	b083      	sub	sp, #12
   17148:	af00      	add	r7, sp, #0
   1714a:	6078      	str	r0, [r7, #4]
   1714c:	2300      	movs	r3, #0
   1714e:	4618      	mov	r0, r3
   17150:	370c      	adds	r7, #12
   17152:	46bd      	mov	sp, r7
   17154:	bc80      	pop	{r7}
   17156:	4770      	bx	lr

00017158 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   17158:	b480      	push	{r7}
   1715a:	b083      	sub	sp, #12
   1715c:	af00      	add	r7, sp, #0
   1715e:	6078      	str	r0, [r7, #4]
   17160:	bf00      	nop
   17162:	370c      	adds	r7, #12
   17164:	46bd      	mov	sp, r7
   17166:	bc80      	pop	{r7}
   17168:	4770      	bx	lr
	...

0001716c <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   1716c:	b580      	push	{r7, lr}
   1716e:	b082      	sub	sp, #8
   17170:	af00      	add	r7, sp, #0
   17172:	6078      	str	r0, [r7, #4]
   17174:	687b      	ldr	r3, [r7, #4]
   17176:	4618      	mov	r0, r3
   17178:	4b06      	ldr	r3, [pc, #24]	; (17194 <_ZN6StreamC1Ev+0x28>)
   1717a:	4798      	blx	r3
   1717c:	4a06      	ldr	r2, [pc, #24]	; (17198 <_ZN6StreamC1Ev+0x2c>)
   1717e:	687b      	ldr	r3, [r7, #4]
   17180:	601a      	str	r2, [r3, #0]
   17182:	687b      	ldr	r3, [r7, #4]
   17184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17188:	609a      	str	r2, [r3, #8]
   1718a:	687b      	ldr	r3, [r7, #4]
   1718c:	4618      	mov	r0, r3
   1718e:	3708      	adds	r7, #8
   17190:	46bd      	mov	sp, r7
   17192:	bd80      	pop	{r7, pc}
   17194:	00017121 	.word	0x00017121
   17198:	00020f00 	.word	0x00020f00

0001719c <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   1719c:	b480      	push	{r7}
   1719e:	b083      	sub	sp, #12
   171a0:	af00      	add	r7, sp, #0
   171a2:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   171a4:	4b06      	ldr	r3, [pc, #24]	; (171c0 <_ZL10USBTimeoutPK10timer_task+0x24>)
   171a6:	681b      	ldr	r3, [r3, #0]
   171a8:	2201      	movs	r2, #1
   171aa:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   171ac:	4b04      	ldr	r3, [pc, #16]	; (171c0 <_ZL10USBTimeoutPK10timer_task+0x24>)
   171ae:	681b      	ldr	r3, [r3, #0]
   171b0:	2200      	movs	r2, #0
   171b2:	741a      	strb	r2, [r3, #16]
	
}
   171b4:	bf00      	nop
   171b6:	370c      	adds	r7, #12
   171b8:	46bd      	mov	sp, r7
   171ba:	bc80      	pop	{r7}
   171bc:	4770      	bx	lr
   171be:	bf00      	nop
   171c0:	2000a254 	.word	0x2000a254

000171c4 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   171c4:	b480      	push	{r7}
   171c6:	b083      	sub	sp, #12
   171c8:	af00      	add	r7, sp, #0
   171ca:	4603      	mov	r3, r0
   171cc:	603a      	str	r2, [r7, #0]
   171ce:	71fb      	strb	r3, [r7, #7]
   171d0:	460b      	mov	r3, r1
   171d2:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   171d4:	4b08      	ldr	r3, [pc, #32]	; (171f8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   171d6:	681b      	ldr	r3, [r3, #0]
   171d8:	2201      	movs	r2, #1
   171da:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   171dc:	4b06      	ldr	r3, [pc, #24]	; (171f8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   171de:	681b      	ldr	r3, [r3, #0]
   171e0:	2201      	movs	r2, #1
   171e2:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   171e4:	4b04      	ldr	r3, [pc, #16]	; (171f8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   171e6:	681b      	ldr	r3, [r3, #0]
   171e8:	2201      	movs	r2, #1
   171ea:	741a      	strb	r2, [r3, #16]


	return false;
   171ec:	2300      	movs	r3, #0
}
   171ee:	4618      	mov	r0, r3
   171f0:	370c      	adds	r7, #12
   171f2:	46bd      	mov	sp, r7
   171f4:	bc80      	pop	{r7}
   171f6:	4770      	bx	lr
   171f8:	2000a254 	.word	0x2000a254

000171fc <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   171fc:	b480      	push	{r7}
   171fe:	b083      	sub	sp, #12
   17200:	af00      	add	r7, sp, #0
   17202:	4603      	mov	r3, r0
   17204:	603a      	str	r2, [r7, #0]
   17206:	71fb      	strb	r3, [r7, #7]
   17208:	460b      	mov	r3, r1
   1720a:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   1720c:	4b08      	ldr	r3, [pc, #32]	; (17230 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1720e:	681b      	ldr	r3, [r3, #0]
   17210:	2201      	movs	r2, #1
   17212:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   17214:	4b06      	ldr	r3, [pc, #24]	; (17230 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   17216:	681b      	ldr	r3, [r3, #0]
   17218:	2201      	movs	r2, #1
   1721a:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   1721c:	4b04      	ldr	r3, [pc, #16]	; (17230 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1721e:	681b      	ldr	r3, [r3, #0]
   17220:	2201      	movs	r2, #1
   17222:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   17224:	2300      	movs	r3, #0
}
   17226:	4618      	mov	r0, r3
   17228:	370c      	adds	r7, #12
   1722a:	46bd      	mov	sp, r7
   1722c:	bc80      	pop	{r7}
   1722e:	4770      	bx	lr
   17230:	2000a254 	.word	0x2000a254

00017234 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   17234:	b580      	push	{r7, lr}
   17236:	b082      	sub	sp, #8
   17238:	af00      	add	r7, sp, #0
   1723a:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   1723c:	793b      	ldrb	r3, [r7, #4]
   1723e:	f003 0301 	and.w	r3, r3, #1
   17242:	b2db      	uxtb	r3, r3
   17244:	2b00      	cmp	r3, #0
   17246:	d013      	beq.n	17270 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   17248:	490c      	ldr	r1, [pc, #48]	; (1727c <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   1724a:	2000      	movs	r0, #0
   1724c:	4b0c      	ldr	r3, [pc, #48]	; (17280 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   1724e:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   17250:	490c      	ldr	r1, [pc, #48]	; (17284 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   17252:	2001      	movs	r0, #1
   17254:	4b0a      	ldr	r3, [pc, #40]	; (17280 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   17256:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   17258:	4b0b      	ldr	r3, [pc, #44]	; (17288 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   1725a:	681b      	ldr	r3, [r3, #0]
   1725c:	2201      	movs	r2, #1
   1725e:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   17260:	4b09      	ldr	r3, [pc, #36]	; (17288 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   17262:	681b      	ldr	r3, [r3, #0]
   17264:	2201      	movs	r2, #1
   17266:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   17268:	4b07      	ldr	r3, [pc, #28]	; (17288 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   1726a:	681b      	ldr	r3, [r3, #0]
   1726c:	2201      	movs	r2, #1
   1726e:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   17270:	2300      	movs	r3, #0
}
   17272:	4618      	mov	r0, r3
   17274:	3708      	adds	r7, #8
   17276:	46bd      	mov	sp, r7
   17278:	bd80      	pop	{r7, pc}
   1727a:	bf00      	nop
   1727c:	000171c5 	.word	0x000171c5
   17280:	00011429 	.word	0x00011429
   17284:	000171fd 	.word	0x000171fd
   17288:	2000a254 	.word	0x2000a254

0001728c <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   1728c:	b580      	push	{r7, lr}
   1728e:	b082      	sub	sp, #8
   17290:	af00      	add	r7, sp, #0
   17292:	6078      	str	r0, [r7, #4]
   17294:	687b      	ldr	r3, [r7, #4]
   17296:	4618      	mov	r0, r3
   17298:	4b0a      	ldr	r3, [pc, #40]	; (172c4 <_ZN9CDC_ClassC1Ev+0x38>)
   1729a:	4798      	blx	r3
   1729c:	687b      	ldr	r3, [r7, #4]
   1729e:	3310      	adds	r3, #16
   172a0:	4618      	mov	r0, r3
   172a2:	4b09      	ldr	r3, [pc, #36]	; (172c8 <_ZN9CDC_ClassC1Ev+0x3c>)
   172a4:	4798      	blx	r3
   172a6:	4a09      	ldr	r2, [pc, #36]	; (172cc <_ZN9CDC_ClassC1Ev+0x40>)
   172a8:	687b      	ldr	r3, [r7, #4]
   172aa:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   172ac:	687b      	ldr	r3, [r7, #4]
   172ae:	f04f 32ff 	mov.w	r2, #4294967295
   172b2:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   172b4:	4a06      	ldr	r2, [pc, #24]	; (172d0 <_ZN9CDC_ClassC1Ev+0x44>)
   172b6:	687b      	ldr	r3, [r7, #4]
   172b8:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   172ba:	687b      	ldr	r3, [r7, #4]
   172bc:	4618      	mov	r0, r3
   172be:	3708      	adds	r7, #8
   172c0:	46bd      	mov	sp, r7
   172c2:	bd80      	pop	{r7, pc}
   172c4:	0001716d 	.word	0x0001716d
   172c8:	00017b3d 	.word	0x00017b3d
   172cc:	00020ed0 	.word	0x00020ed0
   172d0:	2000a254 	.word	0x2000a254

000172d4 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   172d4:	b580      	push	{r7, lr}
   172d6:	b082      	sub	sp, #8
   172d8:	af00      	add	r7, sp, #0
   172da:	6078      	str	r0, [r7, #4]
   172dc:	4a06      	ldr	r2, [pc, #24]	; (172f8 <_ZN9CDC_ClassD1Ev+0x24>)
   172de:	687b      	ldr	r3, [r7, #4]
   172e0:	601a      	str	r2, [r3, #0]
   172e2:	687b      	ldr	r3, [r7, #4]
   172e4:	3310      	adds	r3, #16
   172e6:	4618      	mov	r0, r3
   172e8:	4b04      	ldr	r3, [pc, #16]	; (172fc <_ZN9CDC_ClassD1Ev+0x28>)
   172ea:	4798      	blx	r3
{
} //~CDC_Class
   172ec:	687b      	ldr	r3, [r7, #4]
   172ee:	4618      	mov	r0, r3
   172f0:	3708      	adds	r7, #8
   172f2:	46bd      	mov	sp, r7
   172f4:	bd80      	pop	{r7, pc}
   172f6:	bf00      	nop
   172f8:	00020ed0 	.word	0x00020ed0
   172fc:	00017b5d 	.word	0x00017b5d

00017300 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   17300:	b580      	push	{r7, lr}
   17302:	b082      	sub	sp, #8
   17304:	af00      	add	r7, sp, #0
   17306:	6078      	str	r0, [r7, #4]
	
	OnInit();
   17308:	687b      	ldr	r3, [r7, #4]
   1730a:	3310      	adds	r3, #16
   1730c:	4618      	mov	r0, r3
   1730e:	4b09      	ldr	r3, [pc, #36]	; (17334 <_ZN9CDC_Class4InitEv+0x34>)
   17310:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   17312:	4909      	ldr	r1, [pc, #36]	; (17338 <_ZN9CDC_Class4InitEv+0x38>)
   17314:	2003      	movs	r0, #3
   17316:	4b09      	ldr	r3, [pc, #36]	; (1733c <_ZN9CDC_Class4InitEv+0x3c>)
   17318:	4798      	blx	r3
	delay_ms(100);
   1731a:	2064      	movs	r0, #100	; 0x64
   1731c:	4b08      	ldr	r3, [pc, #32]	; (17340 <_ZN9CDC_Class4InitEv+0x40>)
   1731e:	4798      	blx	r3
		
	if (connected)
   17320:	687b      	ldr	r3, [r7, #4]
   17322:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
   17324:	2064      	movs	r0, #100	; 0x64
   17326:	4b06      	ldr	r3, [pc, #24]	; (17340 <_ZN9CDC_Class4InitEv+0x40>)
   17328:	4798      	blx	r3

	

}
   1732a:	bf00      	nop
   1732c:	3708      	adds	r7, #8
   1732e:	46bd      	mov	sp, r7
   17330:	bd80      	pop	{r7, pc}
   17332:	bf00      	nop
   17334:	00017b71 	.word	0x00017b71
   17338:	00017235 	.word	0x00017235
   1733c:	00011429 	.word	0x00011429
   17340:	000060a9 	.word	0x000060a9

00017344 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   17344:	b580      	push	{r7, lr}
   17346:	b082      	sub	sp, #8
   17348:	af00      	add	r7, sp, #0
   1734a:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   1734c:	4b03      	ldr	r3, [pc, #12]	; (1735c <_ZN9CDC_Class9IsEnabledEv+0x18>)
   1734e:	4798      	blx	r3
   17350:	4603      	mov	r3, r0
	
}
   17352:	4618      	mov	r0, r3
   17354:	3708      	adds	r7, #8
   17356:	46bd      	mov	sp, r7
   17358:	bd80      	pop	{r7, pc}
   1735a:	bf00      	nop
   1735c:	000114a1 	.word	0x000114a1

00017360 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   17360:	b580      	push	{r7, lr}
   17362:	b084      	sub	sp, #16
   17364:	af00      	add	r7, sp, #0
   17366:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   17368:	687b      	ldr	r3, [r7, #4]
   1736a:	699b      	ldr	r3, [r3, #24]
   1736c:	f1b3 3fff 	cmp.w	r3, #4294967295
   17370:	bf14      	ite	ne
   17372:	2301      	movne	r3, #1
   17374:	2300      	moveq	r3, #0
   17376:	b2db      	uxtb	r3, r3
   17378:	2b00      	cmp	r3, #0
   1737a:	d002      	beq.n	17382 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   1737c:	687b      	ldr	r3, [r7, #4]
   1737e:	699b      	ldr	r3, [r3, #24]
   17380:	e011      	b.n	173a6 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   17382:	687b      	ldr	r3, [r7, #4]
   17384:	681b      	ldr	r3, [r3, #0]
   17386:	331c      	adds	r3, #28
   17388:	681b      	ldr	r3, [r3, #0]
   1738a:	f107 010f 	add.w	r1, r7, #15
   1738e:	2201      	movs	r2, #1
   17390:	6878      	ldr	r0, [r7, #4]
   17392:	4798      	blx	r3
   17394:	4602      	mov	r2, r0
   17396:	687b      	ldr	r3, [r7, #4]
   17398:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   1739a:	7bfb      	ldrb	r3, [r7, #15]
   1739c:	461a      	mov	r2, r3
   1739e:	687b      	ldr	r3, [r7, #4]
   173a0:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   173a2:	687b      	ldr	r3, [r7, #4]
   173a4:	699b      	ldr	r3, [r3, #24]
}
   173a6:	4618      	mov	r0, r3
   173a8:	3710      	adds	r7, #16
   173aa:	46bd      	mov	sp, r7
   173ac:	bd80      	pop	{r7, pc}
	...

000173b0 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   173b0:	b580      	push	{r7, lr}
   173b2:	b086      	sub	sp, #24
   173b4:	af00      	add	r7, sp, #0
   173b6:	60f8      	str	r0, [r7, #12]
   173b8:	60b9      	str	r1, [r7, #8]
   173ba:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   173bc:	68fb      	ldr	r3, [r7, #12]
   173be:	7c1b      	ldrb	r3, [r3, #16]
   173c0:	b2db      	uxtb	r3, r3
   173c2:	2b00      	cmp	r3, #0
   173c4:	d02e      	beq.n	17424 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   173c6:	687a      	ldr	r2, [r7, #4]
   173c8:	4613      	mov	r3, r2
   173ca:	009b      	lsls	r3, r3, #2
   173cc:	4413      	add	r3, r2
   173ce:	005b      	lsls	r3, r3, #1
   173d0:	461a      	mov	r2, r3
   173d2:	4918      	ldr	r1, [pc, #96]	; (17434 <_ZN9CDC_Class8readDataEPvl+0x84>)
   173d4:	4818      	ldr	r0, [pc, #96]	; (17438 <_ZN9CDC_Class8readDataEPvl+0x88>)
   173d6:	4b19      	ldr	r3, [pc, #100]	; (1743c <_ZN9CDC_Class8readDataEPvl+0x8c>)
   173d8:	4798      	blx	r3
		rxReady=false;
   173da:	68fb      	ldr	r3, [r7, #12]
   173dc:	2200      	movs	r2, #0
   173de:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   173e0:	687b      	ldr	r3, [r7, #4]
   173e2:	4619      	mov	r1, r3
   173e4:	68b8      	ldr	r0, [r7, #8]
   173e6:	4b16      	ldr	r3, [pc, #88]	; (17440 <_ZN9CDC_Class8readDataEPvl+0x90>)
   173e8:	4798      	blx	r3
   173ea:	4603      	mov	r3, r0
   173ec:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   173ee:	68fb      	ldr	r3, [r7, #12]
   173f0:	7d5b      	ldrb	r3, [r3, #21]
   173f2:	b2db      	uxtb	r3, r3
   173f4:	f083 0301 	eor.w	r3, r3, #1
   173f8:	b2db      	uxtb	r3, r3
   173fa:	2b00      	cmp	r3, #0
   173fc:	d006      	beq.n	1740c <_ZN9CDC_Class8readDataEPvl+0x5c>
   173fe:	68fb      	ldr	r3, [r7, #12]
   17400:	7c1b      	ldrb	r3, [r3, #16]
   17402:	b2db      	uxtb	r3, r3
   17404:	2b00      	cmp	r3, #0
   17406:	d001      	beq.n	1740c <_ZN9CDC_Class8readDataEPvl+0x5c>
   17408:	2301      	movs	r3, #1
   1740a:	e000      	b.n	1740e <_ZN9CDC_Class8readDataEPvl+0x5e>
   1740c:	2300      	movs	r3, #0
   1740e:	2b00      	cmp	r3, #0
   17410:	d000      	beq.n	17414 <_ZN9CDC_Class8readDataEPvl+0x64>
   17412:	e7ec      	b.n	173ee <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   17414:	4808      	ldr	r0, [pc, #32]	; (17438 <_ZN9CDC_Class8readDataEPvl+0x88>)
   17416:	4b0b      	ldr	r3, [pc, #44]	; (17444 <_ZN9CDC_Class8readDataEPvl+0x94>)
   17418:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   1741a:	4906      	ldr	r1, [pc, #24]	; (17434 <_ZN9CDC_Class8readDataEPvl+0x84>)
   1741c:	4806      	ldr	r0, [pc, #24]	; (17438 <_ZN9CDC_Class8readDataEPvl+0x88>)
   1741e:	4b0a      	ldr	r3, [pc, #40]	; (17448 <_ZN9CDC_Class8readDataEPvl+0x98>)
   17420:	4798      	blx	r3
   17422:	e001      	b.n	17428 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   17424:	2300      	movs	r3, #0
   17426:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   17428:	7dfb      	ldrb	r3, [r7, #23]
}
   1742a:	4618      	mov	r0, r3
   1742c:	3718      	adds	r7, #24
   1742e:	46bd      	mov	sp, r7
   17430:	bd80      	pop	{r7, pc}
   17432:	bf00      	nop
   17434:	0001719d 	.word	0x0001719d
   17438:	2000a310 	.word	0x2000a310
   1743c:	00017ddd 	.word	0x00017ddd
   17440:	0001137d 	.word	0x0001137d
   17444:	00017cfd 	.word	0x00017cfd
   17448:	00017e41 	.word	0x00017e41

0001744c <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   1744c:	b580      	push	{r7, lr}
   1744e:	b086      	sub	sp, #24
   17450:	af00      	add	r7, sp, #0
   17452:	60f8      	str	r0, [r7, #12]
   17454:	60b9      	str	r1, [r7, #8]
   17456:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   17458:	68fb      	ldr	r3, [r7, #12]
   1745a:	2200      	movs	r2, #0
   1745c:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   1745e:	687b      	ldr	r3, [r7, #4]
   17460:	4619      	mov	r1, r3
   17462:	68b8      	ldr	r0, [r7, #8]
   17464:	4b04      	ldr	r3, [pc, #16]	; (17478 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   17466:	4798      	blx	r3
   17468:	4603      	mov	r3, r0
   1746a:	617b      	str	r3, [r7, #20]
	return r;
   1746c:	697b      	ldr	r3, [r7, #20]
}
   1746e:	4618      	mov	r0, r3
   17470:	3718      	adds	r7, #24
   17472:	46bd      	mov	sp, r7
   17474:	bd80      	pop	{r7, pc}
   17476:	bf00      	nop
   17478:	0001137d 	.word	0x0001137d

0001747c <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   1747c:	b580      	push	{r7, lr}
   1747e:	b084      	sub	sp, #16
   17480:	af00      	add	r7, sp, #0
   17482:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   17484:	687b      	ldr	r3, [r7, #4]
   17486:	2200      	movs	r2, #0
   17488:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   1748a:	f107 030f 	add.w	r3, r7, #15
   1748e:	2101      	movs	r1, #1
   17490:	4618      	mov	r0, r3
   17492:	4b08      	ldr	r3, [pc, #32]	; (174b4 <_ZN9CDC_Class4readEv+0x38>)
   17494:	4798      	blx	r3
	while(!rxReady);
   17496:	687b      	ldr	r3, [r7, #4]
   17498:	7d5b      	ldrb	r3, [r3, #21]
   1749a:	b2db      	uxtb	r3, r3
   1749c:	f083 0301 	eor.w	r3, r3, #1
   174a0:	b2db      	uxtb	r3, r3
   174a2:	2b00      	cmp	r3, #0
   174a4:	d000      	beq.n	174a8 <_ZN9CDC_Class4readEv+0x2c>
   174a6:	e7f6      	b.n	17496 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   174a8:	7bfb      	ldrb	r3, [r7, #15]
}
   174aa:	4618      	mov	r0, r3
   174ac:	3710      	adds	r7, #16
   174ae:	46bd      	mov	sp, r7
   174b0:	bd80      	pop	{r7, pc}
   174b2:	bf00      	nop
   174b4:	0001137d 	.word	0x0001137d

000174b8 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   174b8:	b580      	push	{r7, lr}
   174ba:	b082      	sub	sp, #8
   174bc:	af00      	add	r7, sp, #0
   174be:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   174c0:	687b      	ldr	r3, [r7, #4]
   174c2:	331c      	adds	r3, #28
   174c4:	2140      	movs	r1, #64	; 0x40
   174c6:	4618      	mov	r0, r3
   174c8:	4b02      	ldr	r3, [pc, #8]	; (174d4 <_ZN9CDC_Class5flushEv+0x1c>)
   174ca:	4798      	blx	r3
}
   174cc:	bf00      	nop
   174ce:	3708      	adds	r7, #8
   174d0:	46bd      	mov	sp, r7
   174d2:	bd80      	pop	{r7, pc}
   174d4:	000113c1 	.word	0x000113c1

000174d8 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   174d8:	b580      	push	{r7, lr}
   174da:	b082      	sub	sp, #8
   174dc:	af00      	add	r7, sp, #0
   174de:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   174e0:	4b02      	ldr	r3, [pc, #8]	; (174ec <_ZN9CDC_Class5clearEv+0x14>)
   174e2:	4798      	blx	r3
}
   174e4:	bf00      	nop
   174e6:	3708      	adds	r7, #8
   174e8:	46bd      	mov	sp, r7
   174ea:	bd80      	pop	{r7, pc}
   174ec:	00011405 	.word	0x00011405

000174f0 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   174f0:	b580      	push	{r7, lr}
   174f2:	b082      	sub	sp, #8
   174f4:	af00      	add	r7, sp, #0
   174f6:	6078      	str	r0, [r7, #4]
   174f8:	460b      	mov	r3, r1
   174fa:	70fb      	strb	r3, [r7, #3]
	if (connected){
   174fc:	687b      	ldr	r3, [r7, #4]
   174fe:	7c1b      	ldrb	r3, [r3, #16]
   17500:	b2db      	uxtb	r3, r3
   17502:	2b00      	cmp	r3, #0
   17504:	d012      	beq.n	1752c <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
   17506:	687b      	ldr	r3, [r7, #4]
   17508:	7d1b      	ldrb	r3, [r3, #20]
   1750a:	b2db      	uxtb	r3, r3
   1750c:	f083 0301 	eor.w	r3, r3, #1
   17510:	b2db      	uxtb	r3, r3
   17512:	2b00      	cmp	r3, #0
   17514:	d000      	beq.n	17518 <_ZN9CDC_Class5writeEh+0x28>
   17516:	e7f6      	b.n	17506 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
   17518:	687b      	ldr	r3, [r7, #4]
   1751a:	681b      	ldr	r3, [r3, #0]
   1751c:	3324      	adds	r3, #36	; 0x24
   1751e:	681b      	ldr	r3, [r3, #0]
   17520:	1cf9      	adds	r1, r7, #3
   17522:	2201      	movs	r2, #1
   17524:	6878      	ldr	r0, [r7, #4]
   17526:	4798      	blx	r3
   17528:	4603      	mov	r3, r0
   1752a:	e000      	b.n	1752e <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
   1752c:	2300      	movs	r3, #0
	}
		
}
   1752e:	4618      	mov	r0, r3
   17530:	3708      	adds	r7, #8
   17532:	46bd      	mov	sp, r7
   17534:	bd80      	pop	{r7, pc}
	...

00017538 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   17538:	b580      	push	{r7, lr}
   1753a:	b086      	sub	sp, #24
   1753c:	af00      	add	r7, sp, #0
   1753e:	60f8      	str	r0, [r7, #12]
   17540:	60b9      	str	r1, [r7, #8]
   17542:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   17544:	68fb      	ldr	r3, [r7, #12]
   17546:	7c1b      	ldrb	r3, [r3, #16]
   17548:	b2db      	uxtb	r3, r3
   1754a:	2b00      	cmp	r3, #0
   1754c:	d02f      	beq.n	175ae <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   1754e:	687a      	ldr	r2, [r7, #4]
   17550:	4613      	mov	r3, r2
   17552:	009b      	lsls	r3, r3, #2
   17554:	4413      	add	r3, r2
   17556:	005b      	lsls	r3, r3, #1
   17558:	461a      	mov	r2, r3
   1755a:	4917      	ldr	r1, [pc, #92]	; (175b8 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   1755c:	4817      	ldr	r0, [pc, #92]	; (175bc <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   1755e:	4b18      	ldr	r3, [pc, #96]	; (175c0 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   17560:	4798      	blx	r3
		txReady=false;
   17562:	68fb      	ldr	r3, [r7, #12]
   17564:	2200      	movs	r2, #0
   17566:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   17568:	687b      	ldr	r3, [r7, #4]
   1756a:	4619      	mov	r1, r3
   1756c:	68b8      	ldr	r0, [r7, #8]
   1756e:	4b15      	ldr	r3, [pc, #84]	; (175c4 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   17570:	4798      	blx	r3
   17572:	4603      	mov	r3, r0
   17574:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   17576:	68fb      	ldr	r3, [r7, #12]
   17578:	7d1b      	ldrb	r3, [r3, #20]
   1757a:	b2db      	uxtb	r3, r3
   1757c:	f083 0301 	eor.w	r3, r3, #1
   17580:	b2db      	uxtb	r3, r3
   17582:	2b00      	cmp	r3, #0
   17584:	d006      	beq.n	17594 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   17586:	68fb      	ldr	r3, [r7, #12]
   17588:	7c1b      	ldrb	r3, [r3, #16]
   1758a:	b2db      	uxtb	r3, r3
   1758c:	2b00      	cmp	r3, #0
   1758e:	d001      	beq.n	17594 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   17590:	2301      	movs	r3, #1
   17592:	e000      	b.n	17596 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   17594:	2300      	movs	r3, #0
   17596:	2b00      	cmp	r3, #0
   17598:	d000      	beq.n	1759c <_ZN9CDC_Class9writeDataEPKvl+0x64>
   1759a:	e7ec      	b.n	17576 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   1759c:	4807      	ldr	r0, [pc, #28]	; (175bc <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   1759e:	4b0a      	ldr	r3, [pc, #40]	; (175c8 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   175a0:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   175a2:	4905      	ldr	r1, [pc, #20]	; (175b8 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   175a4:	4805      	ldr	r0, [pc, #20]	; (175bc <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   175a6:	4b09      	ldr	r3, [pc, #36]	; (175cc <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   175a8:	4798      	blx	r3
		return r;
   175aa:	697b      	ldr	r3, [r7, #20]
   175ac:	e000      	b.n	175b0 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   175ae:	2300      	movs	r3, #0
	}
	

}
   175b0:	4618      	mov	r0, r3
   175b2:	3718      	adds	r7, #24
   175b4:	46bd      	mov	sp, r7
   175b6:	bd80      	pop	{r7, pc}
   175b8:	0001719d 	.word	0x0001719d
   175bc:	2000a310 	.word	0x2000a310
   175c0:	00017ddd 	.word	0x00017ddd
   175c4:	000113c1 	.word	0x000113c1
   175c8:	00017cfd 	.word	0x00017cfd
   175cc:	00017e41 	.word	0x00017e41

000175d0 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   175d0:	b580      	push	{r7, lr}
   175d2:	b086      	sub	sp, #24
   175d4:	af00      	add	r7, sp, #0
   175d6:	60f8      	str	r0, [r7, #12]
   175d8:	60b9      	str	r1, [r7, #8]
   175da:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   175dc:	68fb      	ldr	r3, [r7, #12]
   175de:	2200      	movs	r2, #0
   175e0:	751a      	strb	r2, [r3, #20]

 	if (connected){
   175e2:	68fb      	ldr	r3, [r7, #12]
   175e4:	7c1b      	ldrb	r3, [r3, #16]
   175e6:	b2db      	uxtb	r3, r3
   175e8:	2b00      	cmp	r3, #0
   175ea:	d02a      	beq.n	17642 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   175ec:	687a      	ldr	r2, [r7, #4]
   175ee:	4613      	mov	r3, r2
   175f0:	009b      	lsls	r3, r3, #2
   175f2:	4413      	add	r3, r2
   175f4:	005b      	lsls	r3, r3, #1
   175f6:	461a      	mov	r2, r3
   175f8:	4915      	ldr	r1, [pc, #84]	; (17650 <_ZN9CDC_Class5writeEPKhj+0x80>)
   175fa:	4816      	ldr	r0, [pc, #88]	; (17654 <_ZN9CDC_Class5writeEPKhj+0x84>)
   175fc:	4b16      	ldr	r3, [pc, #88]	; (17658 <_ZN9CDC_Class5writeEPKhj+0x88>)
   175fe:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   17600:	6879      	ldr	r1, [r7, #4]
   17602:	68b8      	ldr	r0, [r7, #8]
   17604:	4b15      	ldr	r3, [pc, #84]	; (1765c <_ZN9CDC_Class5writeEPKhj+0x8c>)
   17606:	4798      	blx	r3
   17608:	4603      	mov	r3, r0
   1760a:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   1760c:	68fb      	ldr	r3, [r7, #12]
   1760e:	7d1b      	ldrb	r3, [r3, #20]
   17610:	b2db      	uxtb	r3, r3
   17612:	f083 0301 	eor.w	r3, r3, #1
   17616:	b2db      	uxtb	r3, r3
   17618:	2b00      	cmp	r3, #0
   1761a:	d006      	beq.n	1762a <_ZN9CDC_Class5writeEPKhj+0x5a>
   1761c:	68fb      	ldr	r3, [r7, #12]
   1761e:	7c1b      	ldrb	r3, [r3, #16]
   17620:	b2db      	uxtb	r3, r3
   17622:	2b00      	cmp	r3, #0
   17624:	d001      	beq.n	1762a <_ZN9CDC_Class5writeEPKhj+0x5a>
   17626:	2301      	movs	r3, #1
   17628:	e000      	b.n	1762c <_ZN9CDC_Class5writeEPKhj+0x5c>
   1762a:	2300      	movs	r3, #0
   1762c:	2b00      	cmp	r3, #0
   1762e:	d000      	beq.n	17632 <_ZN9CDC_Class5writeEPKhj+0x62>
   17630:	e7ec      	b.n	1760c <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   17632:	4808      	ldr	r0, [pc, #32]	; (17654 <_ZN9CDC_Class5writeEPKhj+0x84>)
   17634:	4b0a      	ldr	r3, [pc, #40]	; (17660 <_ZN9CDC_Class5writeEPKhj+0x90>)
   17636:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   17638:	4905      	ldr	r1, [pc, #20]	; (17650 <_ZN9CDC_Class5writeEPKhj+0x80>)
   1763a:	4806      	ldr	r0, [pc, #24]	; (17654 <_ZN9CDC_Class5writeEPKhj+0x84>)
   1763c:	4b09      	ldr	r3, [pc, #36]	; (17664 <_ZN9CDC_Class5writeEPKhj+0x94>)
   1763e:	4798      	blx	r3
   17640:	e001      	b.n	17646 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   17642:	2300      	movs	r3, #0
   17644:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   17646:	697b      	ldr	r3, [r7, #20]
}
   17648:	4618      	mov	r0, r3
   1764a:	3718      	adds	r7, #24
   1764c:	46bd      	mov	sp, r7
   1764e:	bd80      	pop	{r7, pc}
   17650:	0001719d 	.word	0x0001719d
   17654:	2000a310 	.word	0x2000a310
   17658:	00017ddd 	.word	0x00017ddd
   1765c:	000113c1 	.word	0x000113c1
   17660:	00017cfd 	.word	0x00017cfd
   17664:	00017e41 	.word	0x00017e41

00017668 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   17668:	b480      	push	{r7}
   1766a:	b083      	sub	sp, #12
   1766c:	af00      	add	r7, sp, #0
   1766e:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   17670:	687b      	ldr	r3, [r7, #4]
   17672:	7d5b      	ldrb	r3, [r3, #21]
   17674:	b2db      	uxtb	r3, r3
   17676:	2b00      	cmp	r3, #0
   17678:	d006      	beq.n	17688 <_ZN9CDC_Class9availableEv+0x20>
   1767a:	687b      	ldr	r3, [r7, #4]
   1767c:	7d1b      	ldrb	r3, [r3, #20]
   1767e:	b2db      	uxtb	r3, r3
   17680:	2b00      	cmp	r3, #0
   17682:	d001      	beq.n	17688 <_ZN9CDC_Class9availableEv+0x20>
   17684:	2301      	movs	r3, #1
   17686:	e000      	b.n	1768a <_ZN9CDC_Class9availableEv+0x22>
   17688:	2300      	movs	r3, #0
   1768a:	2b00      	cmp	r3, #0
   1768c:	d001      	beq.n	17692 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   1768e:	2301      	movs	r3, #1
   17690:	e000      	b.n	17694 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   17692:	2300      	movs	r3, #0
	}
	
}
   17694:	4618      	mov	r0, r3
   17696:	370c      	adds	r7, #12
   17698:	46bd      	mov	sp, r7
   1769a:	bc80      	pop	{r7}
   1769c:	4770      	bx	lr
	...

000176a0 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   176a0:	b580      	push	{r7, lr}
   176a2:	b082      	sub	sp, #8
   176a4:	af00      	add	r7, sp, #0
   176a6:	6078      	str	r0, [r7, #4]
   176a8:	6039      	str	r1, [r7, #0]
   176aa:	687b      	ldr	r3, [r7, #4]
   176ac:	2b01      	cmp	r3, #1
   176ae:	d10c      	bne.n	176ca <_Z41__static_initialization_and_destruction_0ii+0x2a>
   176b0:	683b      	ldr	r3, [r7, #0]
   176b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   176b6:	4293      	cmp	r3, r2
   176b8:	d107      	bne.n	176ca <_Z41__static_initialization_and_destruction_0ii+0x2a>
   176ba:	4806      	ldr	r0, [pc, #24]	; (176d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   176bc:	4b06      	ldr	r3, [pc, #24]	; (176d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   176be:	4798      	blx	r3
   176c0:	4a06      	ldr	r2, [pc, #24]	; (176dc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   176c2:	4907      	ldr	r1, [pc, #28]	; (176e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   176c4:	4803      	ldr	r0, [pc, #12]	; (176d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   176c6:	4b07      	ldr	r3, [pc, #28]	; (176e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   176c8:	4798      	blx	r3
   176ca:	bf00      	nop
   176cc:	3708      	adds	r7, #8
   176ce:	46bd      	mov	sp, r7
   176d0:	bd80      	pop	{r7, pc}
   176d2:	bf00      	nop
   176d4:	2000a258 	.word	0x2000a258
   176d8:	0001728d 	.word	0x0001728d
   176dc:	20000000 	.word	0x20000000
   176e0:	000172d5 	.word	0x000172d5
   176e4:	00018bf5 	.word	0x00018bf5

000176e8 <_GLOBAL__sub_I_ptrCDCClass>:
   176e8:	b580      	push	{r7, lr}
   176ea:	af00      	add	r7, sp, #0
   176ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   176f0:	2001      	movs	r0, #1
   176f2:	4b01      	ldr	r3, [pc, #4]	; (176f8 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   176f4:	4798      	blx	r3
   176f6:	bd80      	pop	{r7, pc}
   176f8:	000176a1 	.word	0x000176a1

000176fc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   176fc:	b590      	push	{r4, r7, lr}
   176fe:	b083      	sub	sp, #12
   17700:	af00      	add	r7, sp, #0
   17702:	6078      	str	r0, [r7, #4]
   17704:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
   17706:	683b      	ldr	r3, [r7, #0]
   17708:	2b00      	cmp	r3, #0
   1770a:	d101      	bne.n	17710 <_ZN5Print5writeEPKc+0x14>
   1770c:	2300      	movs	r3, #0
   1770e:	e00c      	b.n	1772a <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
   17710:	687b      	ldr	r3, [r7, #4]
   17712:	681b      	ldr	r3, [r3, #0]
   17714:	3304      	adds	r3, #4
   17716:	681c      	ldr	r4, [r3, #0]
   17718:	6838      	ldr	r0, [r7, #0]
   1771a:	4b06      	ldr	r3, [pc, #24]	; (17734 <_ZN5Print5writeEPKc+0x38>)
   1771c:	4798      	blx	r3
   1771e:	4603      	mov	r3, r0
   17720:	461a      	mov	r2, r3
   17722:	6839      	ldr	r1, [r7, #0]
   17724:	6878      	ldr	r0, [r7, #4]
   17726:	47a0      	blx	r4
   17728:	4603      	mov	r3, r0
    }
   1772a:	4618      	mov	r0, r3
   1772c:	370c      	adds	r7, #12
   1772e:	46bd      	mov	sp, r7
   17730:	bd90      	pop	{r4, r7, pc}
   17732:	bf00      	nop
   17734:	0001b581 	.word	0x0001b581

00017738 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   17738:	b580      	push	{r7, lr}
   1773a:	b086      	sub	sp, #24
   1773c:	af00      	add	r7, sp, #0
   1773e:	60f8      	str	r0, [r7, #12]
   17740:	60b9      	str	r1, [r7, #8]
   17742:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   17744:	2300      	movs	r3, #0
   17746:	617b      	str	r3, [r7, #20]
  while (size--) {
   17748:	687b      	ldr	r3, [r7, #4]
   1774a:	1e5a      	subs	r2, r3, #1
   1774c:	607a      	str	r2, [r7, #4]
   1774e:	2b00      	cmp	r3, #0
   17750:	bf14      	ite	ne
   17752:	2301      	movne	r3, #1
   17754:	2300      	moveq	r3, #0
   17756:	b2db      	uxtb	r3, r3
   17758:	2b00      	cmp	r3, #0
   1775a:	d016      	beq.n	1778a <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   1775c:	68fb      	ldr	r3, [r7, #12]
   1775e:	681b      	ldr	r3, [r3, #0]
   17760:	681a      	ldr	r2, [r3, #0]
   17762:	68bb      	ldr	r3, [r7, #8]
   17764:	1c59      	adds	r1, r3, #1
   17766:	60b9      	str	r1, [r7, #8]
   17768:	781b      	ldrb	r3, [r3, #0]
   1776a:	4619      	mov	r1, r3
   1776c:	68f8      	ldr	r0, [r7, #12]
   1776e:	4790      	blx	r2
   17770:	4603      	mov	r3, r0
   17772:	2b00      	cmp	r3, #0
   17774:	bf14      	ite	ne
   17776:	2301      	movne	r3, #1
   17778:	2300      	moveq	r3, #0
   1777a:	b2db      	uxtb	r3, r3
   1777c:	2b00      	cmp	r3, #0
   1777e:	d003      	beq.n	17788 <_ZN5Print5writeEPKhj+0x50>
   17780:	697b      	ldr	r3, [r7, #20]
   17782:	3301      	adds	r3, #1
   17784:	617b      	str	r3, [r7, #20]
  while (size--) {
   17786:	e7df      	b.n	17748 <_ZN5Print5writeEPKhj+0x10>
    else break;
   17788:	bf00      	nop
  }
  return n;
   1778a:	697b      	ldr	r3, [r7, #20]
}
   1778c:	4618      	mov	r0, r3
   1778e:	3718      	adds	r7, #24
   17790:	46bd      	mov	sp, r7
   17792:	bd80      	pop	{r7, pc}

00017794 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
   17794:	b580      	push	{r7, lr}
   17796:	b082      	sub	sp, #8
   17798:	af00      	add	r7, sp, #0
   1779a:	6078      	str	r0, [r7, #4]
   1779c:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
   1779e:	6839      	ldr	r1, [r7, #0]
   177a0:	6878      	ldr	r0, [r7, #4]
   177a2:	4b03      	ldr	r3, [pc, #12]	; (177b0 <_ZN5Print5printEPK19__FlashStringHelper+0x1c>)
   177a4:	4798      	blx	r3
   177a6:	4603      	mov	r3, r0
}
   177a8:	4618      	mov	r0, r3
   177aa:	3708      	adds	r7, #8
   177ac:	46bd      	mov	sp, r7
   177ae:	bd80      	pop	{r7, pc}
   177b0:	000177b5 	.word	0x000177b5

000177b4 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
   177b4:	b580      	push	{r7, lr}
   177b6:	b082      	sub	sp, #8
   177b8:	af00      	add	r7, sp, #0
   177ba:	6078      	str	r0, [r7, #4]
   177bc:	6039      	str	r1, [r7, #0]
  return write(str);
   177be:	6839      	ldr	r1, [r7, #0]
   177c0:	6878      	ldr	r0, [r7, #4]
   177c2:	4b03      	ldr	r3, [pc, #12]	; (177d0 <_ZN5Print5printEPKc+0x1c>)
   177c4:	4798      	blx	r3
   177c6:	4603      	mov	r3, r0
}
   177c8:	4618      	mov	r0, r3
   177ca:	3708      	adds	r7, #8
   177cc:	46bd      	mov	sp, r7
   177ce:	bd80      	pop	{r7, pc}
   177d0:	000176fd 	.word	0x000176fd

000177d4 <_ZN5Print5printEhi>:
	snprintf(tmp, 12, "0x%.8X", (unsigned int)v);
	return write(tmp);
}

size_t Print::print(unsigned char b, int base)
{
   177d4:	b580      	push	{r7, lr}
   177d6:	b084      	sub	sp, #16
   177d8:	af00      	add	r7, sp, #0
   177da:	60f8      	str	r0, [r7, #12]
   177dc:	460b      	mov	r3, r1
   177de:	607a      	str	r2, [r7, #4]
   177e0:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
   177e2:	7afb      	ldrb	r3, [r7, #11]
   177e4:	687a      	ldr	r2, [r7, #4]
   177e6:	4619      	mov	r1, r3
   177e8:	68f8      	ldr	r0, [r7, #12]
   177ea:	4b03      	ldr	r3, [pc, #12]	; (177f8 <_ZN5Print5printEhi+0x24>)
   177ec:	4798      	blx	r3
   177ee:	4603      	mov	r3, r0
}
   177f0:	4618      	mov	r0, r3
   177f2:	3710      	adds	r7, #16
   177f4:	46bd      	mov	sp, r7
   177f6:	bd80      	pop	{r7, pc}
   177f8:	000177fd 	.word	0x000177fd

000177fc <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   177fc:	b580      	push	{r7, lr}
   177fe:	b084      	sub	sp, #16
   17800:	af00      	add	r7, sp, #0
   17802:	60f8      	str	r0, [r7, #12]
   17804:	60b9      	str	r1, [r7, #8]
   17806:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
   17808:	687b      	ldr	r3, [r7, #4]
   1780a:	2b00      	cmp	r3, #0
   1780c:	d109      	bne.n	17822 <_ZN5Print5printEmi+0x26>
   1780e:	68fb      	ldr	r3, [r7, #12]
   17810:	681b      	ldr	r3, [r3, #0]
   17812:	681b      	ldr	r3, [r3, #0]
   17814:	68ba      	ldr	r2, [r7, #8]
   17816:	b2d2      	uxtb	r2, r2
   17818:	4611      	mov	r1, r2
   1781a:	68f8      	ldr	r0, [r7, #12]
   1781c:	4798      	blx	r3
   1781e:	4603      	mov	r3, r0
   17820:	e007      	b.n	17832 <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
   17822:	687b      	ldr	r3, [r7, #4]
   17824:	b2db      	uxtb	r3, r3
   17826:	461a      	mov	r2, r3
   17828:	68b9      	ldr	r1, [r7, #8]
   1782a:	68f8      	ldr	r0, [r7, #12]
   1782c:	4b03      	ldr	r3, [pc, #12]	; (1783c <_ZN5Print5printEmi+0x40>)
   1782e:	4798      	blx	r3
   17830:	4603      	mov	r3, r0
}
   17832:	4618      	mov	r0, r3
   17834:	3710      	adds	r7, #16
   17836:	46bd      	mov	sp, r7
   17838:	bd80      	pop	{r7, pc}
   1783a:	bf00      	nop
   1783c:	00017941 	.word	0x00017941

00017840 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
   17840:	b580      	push	{r7, lr}
   17842:	b084      	sub	sp, #16
   17844:	af00      	add	r7, sp, #0
   17846:	6078      	str	r0, [r7, #4]
   17848:	6039      	str	r1, [r7, #0]
  size_t n = print(ifsh);
   1784a:	6839      	ldr	r1, [r7, #0]
   1784c:	6878      	ldr	r0, [r7, #4]
   1784e:	4b07      	ldr	r3, [pc, #28]	; (1786c <_ZN5Print7printlnEPK19__FlashStringHelper+0x2c>)
   17850:	4798      	blx	r3
   17852:	60f8      	str	r0, [r7, #12]
  n += println();
   17854:	6878      	ldr	r0, [r7, #4]
   17856:	4b06      	ldr	r3, [pc, #24]	; (17870 <_ZN5Print7printlnEPK19__FlashStringHelper+0x30>)
   17858:	4798      	blx	r3
   1785a:	4602      	mov	r2, r0
   1785c:	68fb      	ldr	r3, [r7, #12]
   1785e:	4413      	add	r3, r2
   17860:	60fb      	str	r3, [r7, #12]
  return n;
   17862:	68fb      	ldr	r3, [r7, #12]
}
   17864:	4618      	mov	r0, r3
   17866:	3710      	adds	r7, #16
   17868:	46bd      	mov	sp, r7
   1786a:	bd80      	pop	{r7, pc}
   1786c:	00017795 	.word	0x00017795
   17870:	00017875 	.word	0x00017875

00017874 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   17874:	b580      	push	{r7, lr}
   17876:	b082      	sub	sp, #8
   17878:	af00      	add	r7, sp, #0
   1787a:	6078      	str	r0, [r7, #4]
  return write("\r\n");
   1787c:	4904      	ldr	r1, [pc, #16]	; (17890 <_ZN5Print7printlnEv+0x1c>)
   1787e:	6878      	ldr	r0, [r7, #4]
   17880:	4b04      	ldr	r3, [pc, #16]	; (17894 <_ZN5Print7printlnEv+0x20>)
   17882:	4798      	blx	r3
   17884:	4603      	mov	r3, r0
}
   17886:	4618      	mov	r0, r3
   17888:	3708      	adds	r7, #8
   1788a:	46bd      	mov	sp, r7
   1788c:	bd80      	pop	{r7, pc}
   1788e:	bf00      	nop
   17890:	00020f24 	.word	0x00020f24
   17894:	000176fd 	.word	0x000176fd

00017898 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
   17898:	b580      	push	{r7, lr}
   1789a:	b084      	sub	sp, #16
   1789c:	af00      	add	r7, sp, #0
   1789e:	6078      	str	r0, [r7, #4]
   178a0:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
   178a2:	6839      	ldr	r1, [r7, #0]
   178a4:	6878      	ldr	r0, [r7, #4]
   178a6:	4b07      	ldr	r3, [pc, #28]	; (178c4 <_ZN5Print7printlnEPKc+0x2c>)
   178a8:	4798      	blx	r3
   178aa:	60f8      	str	r0, [r7, #12]
  n += println();
   178ac:	6878      	ldr	r0, [r7, #4]
   178ae:	4b06      	ldr	r3, [pc, #24]	; (178c8 <_ZN5Print7printlnEPKc+0x30>)
   178b0:	4798      	blx	r3
   178b2:	4602      	mov	r2, r0
   178b4:	68fb      	ldr	r3, [r7, #12]
   178b6:	4413      	add	r3, r2
   178b8:	60fb      	str	r3, [r7, #12]
  return n;
   178ba:	68fb      	ldr	r3, [r7, #12]
}
   178bc:	4618      	mov	r0, r3
   178be:	3710      	adds	r7, #16
   178c0:	46bd      	mov	sp, r7
   178c2:	bd80      	pop	{r7, pc}
   178c4:	000177b5 	.word	0x000177b5
   178c8:	00017875 	.word	0x00017875

000178cc <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   178cc:	b580      	push	{r7, lr}
   178ce:	b086      	sub	sp, #24
   178d0:	af00      	add	r7, sp, #0
   178d2:	60f8      	str	r0, [r7, #12]
   178d4:	460b      	mov	r3, r1
   178d6:	607a      	str	r2, [r7, #4]
   178d8:	72fb      	strb	r3, [r7, #11]
  size_t n = print(b, base);
   178da:	7afb      	ldrb	r3, [r7, #11]
   178dc:	687a      	ldr	r2, [r7, #4]
   178de:	4619      	mov	r1, r3
   178e0:	68f8      	ldr	r0, [r7, #12]
   178e2:	4b07      	ldr	r3, [pc, #28]	; (17900 <_ZN5Print7printlnEhi+0x34>)
   178e4:	4798      	blx	r3
   178e6:	6178      	str	r0, [r7, #20]
  n += println();
   178e8:	68f8      	ldr	r0, [r7, #12]
   178ea:	4b06      	ldr	r3, [pc, #24]	; (17904 <_ZN5Print7printlnEhi+0x38>)
   178ec:	4798      	blx	r3
   178ee:	4602      	mov	r2, r0
   178f0:	697b      	ldr	r3, [r7, #20]
   178f2:	4413      	add	r3, r2
   178f4:	617b      	str	r3, [r7, #20]
  return n;
   178f6:	697b      	ldr	r3, [r7, #20]
}
   178f8:	4618      	mov	r0, r3
   178fa:	3718      	adds	r7, #24
   178fc:	46bd      	mov	sp, r7
   178fe:	bd80      	pop	{r7, pc}
   17900:	000177d5 	.word	0x000177d5
   17904:	00017875 	.word	0x00017875

00017908 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   17908:	b580      	push	{r7, lr}
   1790a:	b086      	sub	sp, #24
   1790c:	af00      	add	r7, sp, #0
   1790e:	60f8      	str	r0, [r7, #12]
   17910:	60b9      	str	r1, [r7, #8]
   17912:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
   17914:	687a      	ldr	r2, [r7, #4]
   17916:	68b9      	ldr	r1, [r7, #8]
   17918:	68f8      	ldr	r0, [r7, #12]
   1791a:	4b07      	ldr	r3, [pc, #28]	; (17938 <_ZN5Print7printlnEmi+0x30>)
   1791c:	4798      	blx	r3
   1791e:	6178      	str	r0, [r7, #20]
  n += println();
   17920:	68f8      	ldr	r0, [r7, #12]
   17922:	4b06      	ldr	r3, [pc, #24]	; (1793c <_ZN5Print7printlnEmi+0x34>)
   17924:	4798      	blx	r3
   17926:	4602      	mov	r2, r0
   17928:	697b      	ldr	r3, [r7, #20]
   1792a:	4413      	add	r3, r2
   1792c:	617b      	str	r3, [r7, #20]
  return n;
   1792e:	697b      	ldr	r3, [r7, #20]
}
   17930:	4618      	mov	r0, r3
   17932:	3718      	adds	r7, #24
   17934:	46bd      	mov	sp, r7
   17936:	bd80      	pop	{r7, pc}
   17938:	000177fd 	.word	0x000177fd
   1793c:	00017875 	.word	0x00017875

00017940 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   17940:	b580      	push	{r7, lr}
   17942:	b08e      	sub	sp, #56	; 0x38
   17944:	af00      	add	r7, sp, #0
   17946:	60f8      	str	r0, [r7, #12]
   17948:	60b9      	str	r1, [r7, #8]
   1794a:	4613      	mov	r3, r2
   1794c:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
   1794e:	f107 0310 	add.w	r3, r7, #16
   17952:	3320      	adds	r3, #32
   17954:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
   17956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17958:	2200      	movs	r2, #0
   1795a:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   1795c:	79fb      	ldrb	r3, [r7, #7]
   1795e:	2b01      	cmp	r3, #1
   17960:	dc01      	bgt.n	17966 <_ZN5Print11printNumberEmh+0x26>
   17962:	230a      	movs	r3, #10
   17964:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
   17966:	79fa      	ldrb	r2, [r7, #7]
   17968:	68bb      	ldr	r3, [r7, #8]
   1796a:	fbb3 f1f2 	udiv	r1, r3, r2
   1796e:	fb02 f201 	mul.w	r2, r2, r1
   17972:	1a9b      	subs	r3, r3, r2
   17974:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
   17978:	79fb      	ldrb	r3, [r7, #7]
   1797a:	68ba      	ldr	r2, [r7, #8]
   1797c:	fbb2 f3f3 	udiv	r3, r2, r3
   17980:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   17982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17984:	3b01      	subs	r3, #1
   17986:	637b      	str	r3, [r7, #52]	; 0x34
   17988:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1798c:	2b09      	cmp	r3, #9
   1798e:	dc04      	bgt.n	1799a <_ZN5Print11printNumberEmh+0x5a>
   17990:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   17994:	3330      	adds	r3, #48	; 0x30
   17996:	b2db      	uxtb	r3, r3
   17998:	e003      	b.n	179a2 <_ZN5Print11printNumberEmh+0x62>
   1799a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1799e:	3337      	adds	r3, #55	; 0x37
   179a0:	b2db      	uxtb	r3, r3
   179a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   179a4:	7013      	strb	r3, [r2, #0]
  } while(n);
   179a6:	68bb      	ldr	r3, [r7, #8]
   179a8:	2b00      	cmp	r3, #0
   179aa:	d000      	beq.n	179ae <_ZN5Print11printNumberEmh+0x6e>
  do {
   179ac:	e7db      	b.n	17966 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
   179ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
   179b0:	68f8      	ldr	r0, [r7, #12]
   179b2:	4b03      	ldr	r3, [pc, #12]	; (179c0 <_ZN5Print11printNumberEmh+0x80>)
   179b4:	4798      	blx	r3
   179b6:	4603      	mov	r3, r0
}
   179b8:	4618      	mov	r0, r3
   179ba:	3738      	adds	r7, #56	; 0x38
   179bc:	46bd      	mov	sp, r7
   179be:	bd80      	pop	{r7, pc}
   179c0:	000176fd 	.word	0x000176fd

000179c4 <hri_port_read_DIR_reg>:
{
   179c4:	b480      	push	{r7}
   179c6:	b083      	sub	sp, #12
   179c8:	af00      	add	r7, sp, #0
   179ca:	6078      	str	r0, [r7, #4]
   179cc:	460b      	mov	r3, r1
   179ce:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   179d0:	78fb      	ldrb	r3, [r7, #3]
   179d2:	687a      	ldr	r2, [r7, #4]
   179d4:	01db      	lsls	r3, r3, #7
   179d6:	4413      	add	r3, r2
   179d8:	681b      	ldr	r3, [r3, #0]
}
   179da:	4618      	mov	r0, r3
   179dc:	370c      	adds	r7, #12
   179de:	46bd      	mov	sp, r7
   179e0:	bc80      	pop	{r7}
   179e2:	4770      	bx	lr

000179e4 <hri_port_read_OUT_reg>:
{
   179e4:	b480      	push	{r7}
   179e6:	b083      	sub	sp, #12
   179e8:	af00      	add	r7, sp, #0
   179ea:	6078      	str	r0, [r7, #4]
   179ec:	460b      	mov	r3, r1
   179ee:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   179f0:	78fb      	ldrb	r3, [r7, #3]
   179f2:	687a      	ldr	r2, [r7, #4]
   179f4:	01db      	lsls	r3, r3, #7
   179f6:	4413      	add	r3, r2
   179f8:	3310      	adds	r3, #16
   179fa:	681b      	ldr	r3, [r3, #0]
}
   179fc:	4618      	mov	r0, r3
   179fe:	370c      	adds	r7, #12
   17a00:	46bd      	mov	sp, r7
   17a02:	bc80      	pop	{r7}
   17a04:	4770      	bx	lr

00017a06 <hri_port_read_IN_reg>:
{
   17a06:	b480      	push	{r7}
   17a08:	b083      	sub	sp, #12
   17a0a:	af00      	add	r7, sp, #0
   17a0c:	6078      	str	r0, [r7, #4]
   17a0e:	460b      	mov	r3, r1
   17a10:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   17a12:	78fb      	ldrb	r3, [r7, #3]
   17a14:	687a      	ldr	r2, [r7, #4]
   17a16:	01db      	lsls	r3, r3, #7
   17a18:	4413      	add	r3, r2
   17a1a:	3320      	adds	r3, #32
   17a1c:	681b      	ldr	r3, [r3, #0]
}
   17a1e:	4618      	mov	r0, r3
   17a20:	370c      	adds	r7, #12
   17a22:	46bd      	mov	sp, r7
   17a24:	bc80      	pop	{r7}
   17a26:	4770      	bx	lr

00017a28 <_gpio_get_level>:
{
   17a28:	b580      	push	{r7, lr}
   17a2a:	b086      	sub	sp, #24
   17a2c:	af00      	add	r7, sp, #0
   17a2e:	4603      	mov	r3, r0
   17a30:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
   17a32:	f107 030c 	add.w	r3, r7, #12
   17a36:	4618      	mov	r0, r3
   17a38:	4b13      	ldr	r3, [pc, #76]	; (17a88 <_gpio_get_level+0x60>)
   17a3a:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   17a3c:	79fb      	ldrb	r3, [r7, #7]
   17a3e:	4619      	mov	r1, r3
   17a40:	4812      	ldr	r0, [pc, #72]	; (17a8c <_gpio_get_level+0x64>)
   17a42:	4b13      	ldr	r3, [pc, #76]	; (17a90 <_gpio_get_level+0x68>)
   17a44:	4798      	blx	r3
   17a46:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   17a48:	79fb      	ldrb	r3, [r7, #7]
   17a4a:	4619      	mov	r1, r3
   17a4c:	480f      	ldr	r0, [pc, #60]	; (17a8c <_gpio_get_level+0x64>)
   17a4e:	4b11      	ldr	r3, [pc, #68]	; (17a94 <_gpio_get_level+0x6c>)
   17a50:	4798      	blx	r3
   17a52:	4602      	mov	r2, r0
   17a54:	697b      	ldr	r3, [r7, #20]
   17a56:	43db      	mvns	r3, r3
   17a58:	4013      	ands	r3, r2
   17a5a:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   17a5c:	79fb      	ldrb	r3, [r7, #7]
   17a5e:	4619      	mov	r1, r3
   17a60:	480a      	ldr	r0, [pc, #40]	; (17a8c <_gpio_get_level+0x64>)
   17a62:	4b0d      	ldr	r3, [pc, #52]	; (17a98 <_gpio_get_level+0x70>)
   17a64:	4798      	blx	r3
   17a66:	4602      	mov	r2, r0
   17a68:	697b      	ldr	r3, [r7, #20]
   17a6a:	4013      	ands	r3, r2
   17a6c:	693a      	ldr	r2, [r7, #16]
   17a6e:	4313      	orrs	r3, r2
   17a70:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
   17a72:	f107 030c 	add.w	r3, r7, #12
   17a76:	4618      	mov	r0, r3
   17a78:	4b08      	ldr	r3, [pc, #32]	; (17a9c <_gpio_get_level+0x74>)
   17a7a:	4798      	blx	r3
	return tmp;
   17a7c:	693b      	ldr	r3, [r7, #16]
}
   17a7e:	4618      	mov	r0, r3
   17a80:	3718      	adds	r7, #24
   17a82:	46bd      	mov	sp, r7
   17a84:	bd80      	pop	{r7, pc}
   17a86:	bf00      	nop
   17a88:	0001059d 	.word	0x0001059d
   17a8c:	41008000 	.word	0x41008000
   17a90:	000179c5 	.word	0x000179c5
   17a94:	00017a07 	.word	0x00017a07
   17a98:	000179e5 	.word	0x000179e5
   17a9c:	000105c3 	.word	0x000105c3

00017aa0 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   17aa0:	b580      	push	{r7, lr}
   17aa2:	b082      	sub	sp, #8
   17aa4:	af00      	add	r7, sp, #0
   17aa6:	4603      	mov	r3, r0
   17aa8:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   17aaa:	79fb      	ldrb	r3, [r7, #7]
   17aac:	115b      	asrs	r3, r3, #5
   17aae:	b2db      	uxtb	r3, r3
   17ab0:	4618      	mov	r0, r3
   17ab2:	4b09      	ldr	r3, [pc, #36]	; (17ad8 <gpio_get_pin_level+0x38>)
   17ab4:	4798      	blx	r3
   17ab6:	4601      	mov	r1, r0
   17ab8:	79fb      	ldrb	r3, [r7, #7]
   17aba:	f003 031f 	and.w	r3, r3, #31
   17abe:	2201      	movs	r2, #1
   17ac0:	fa02 f303 	lsl.w	r3, r2, r3
   17ac4:	400b      	ands	r3, r1
   17ac6:	2b00      	cmp	r3, #0
   17ac8:	bf14      	ite	ne
   17aca:	2301      	movne	r3, #1
   17acc:	2300      	moveq	r3, #0
   17ace:	b2db      	uxtb	r3, r3
}
   17ad0:	4618      	mov	r0, r3
   17ad2:	3708      	adds	r7, #8
   17ad4:	46bd      	mov	sp, r7
   17ad6:	bd80      	pop	{r7, pc}
   17ad8:	00017a29 	.word	0x00017a29

00017adc <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   17adc:	b480      	push	{r7}
   17ade:	b083      	sub	sp, #12
   17ae0:	af00      	add	r7, sp, #0
   17ae2:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   17ae4:	4b06      	ldr	r3, [pc, #24]	; (17b00 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   17ae6:	681b      	ldr	r3, [r3, #0]
   17ae8:	2201      	movs	r2, #1
   17aea:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   17aec:	4b04      	ldr	r3, [pc, #16]	; (17b00 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   17aee:	681b      	ldr	r3, [r3, #0]
   17af0:	2200      	movs	r2, #0
   17af2:	705a      	strb	r2, [r3, #1]
}
   17af4:	bf00      	nop
   17af6:	370c      	adds	r7, #12
   17af8:	46bd      	mov	sp, r7
   17afa:	bc80      	pop	{r7}
   17afc:	4770      	bx	lr
   17afe:	bf00      	nop
   17b00:	2000a2b8 	.word	0x2000a2b8

00017b04 <_ZL10USBPluggedv>:

static void USBPlugged(void){
   17b04:	b580      	push	{r7, lr}
   17b06:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   17b08:	2040      	movs	r0, #64	; 0x40
   17b0a:	4b0a      	ldr	r3, [pc, #40]	; (17b34 <_ZL10USBPluggedv+0x30>)
   17b0c:	4798      	blx	r3
   17b0e:	4603      	mov	r3, r0
   17b10:	2b00      	cmp	r3, #0
   17b12:	d004      	beq.n	17b1e <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   17b14:	4b08      	ldr	r3, [pc, #32]	; (17b38 <_ZL10USBPluggedv+0x34>)
   17b16:	681b      	ldr	r3, [r3, #0]
   17b18:	2201      	movs	r2, #1
   17b1a:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   17b1c:	e007      	b.n	17b2e <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   17b1e:	4b06      	ldr	r3, [pc, #24]	; (17b38 <_ZL10USBPluggedv+0x34>)
   17b20:	681b      	ldr	r3, [r3, #0]
   17b22:	2200      	movs	r2, #0
   17b24:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   17b26:	4b04      	ldr	r3, [pc, #16]	; (17b38 <_ZL10USBPluggedv+0x34>)
   17b28:	681b      	ldr	r3, [r3, #0]
   17b2a:	2200      	movs	r2, #0
   17b2c:	701a      	strb	r2, [r3, #0]
}
   17b2e:	bf00      	nop
   17b30:	bd80      	pop	{r7, pc}
   17b32:	bf00      	nop
   17b34:	00017aa1 	.word	0x00017aa1
   17b38:	2000a2b8 	.word	0x2000a2b8

00017b3c <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   17b3c:	b480      	push	{r7}
   17b3e:	b083      	sub	sp, #12
   17b40:	af00      	add	r7, sp, #0
   17b42:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   17b44:	4a04      	ldr	r2, [pc, #16]	; (17b58 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   17b46:	687b      	ldr	r3, [r7, #4]
   17b48:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   17b4a:	687b      	ldr	r3, [r7, #4]
   17b4c:	4618      	mov	r0, r3
   17b4e:	370c      	adds	r7, #12
   17b50:	46bd      	mov	sp, r7
   17b52:	bc80      	pop	{r7}
   17b54:	4770      	bx	lr
   17b56:	bf00      	nop
   17b58:	2000a2b8 	.word	0x2000a2b8

00017b5c <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   17b5c:	b480      	push	{r7}
   17b5e:	b083      	sub	sp, #12
   17b60:	af00      	add	r7, sp, #0
   17b62:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   17b64:	687b      	ldr	r3, [r7, #4]
   17b66:	4618      	mov	r0, r3
   17b68:	370c      	adds	r7, #12
   17b6a:	46bd      	mov	sp, r7
   17b6c:	bc80      	pop	{r7}
   17b6e:	4770      	bx	lr

00017b70 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   17b70:	b580      	push	{r7, lr}
   17b72:	b082      	sub	sp, #8
   17b74:	af00      	add	r7, sp, #0
   17b76:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   17b78:	491f      	ldr	r1, [pc, #124]	; (17bf8 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   17b7a:	2040      	movs	r0, #64	; 0x40
   17b7c:	4b1f      	ldr	r3, [pc, #124]	; (17bfc <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   17b7e:	4798      	blx	r3
		if (usbTerminalTimer.Init())
   17b80:	481f      	ldr	r0, [pc, #124]	; (17c00 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   17b82:	4b20      	ldr	r3, [pc, #128]	; (17c04 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   17b84:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   17b86:	2040      	movs	r0, #64	; 0x40
   17b88:	4b1f      	ldr	r3, [pc, #124]	; (17c08 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   17b8a:	4798      	blx	r3
   17b8c:	4603      	mov	r3, r0
   17b8e:	461a      	mov	r2, r3
   17b90:	687b      	ldr	r3, [r7, #4]
   17b92:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   17b94:	687b      	ldr	r3, [r7, #4]
   17b96:	78db      	ldrb	r3, [r3, #3]
   17b98:	2b00      	cmp	r3, #0
   17b9a:	d024      	beq.n	17be6 <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
   17b9c:	687b      	ldr	r3, [r7, #4]
   17b9e:	2200      	movs	r2, #0
   17ba0:	709a      	strb	r2, [r3, #2]
			plugged=true;
   17ba2:	687b      	ldr	r3, [r7, #4]
   17ba4:	2201      	movs	r2, #1
   17ba6:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   17ba8:	f44f 7216 	mov.w	r2, #600	; 0x258
   17bac:	4917      	ldr	r1, [pc, #92]	; (17c0c <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   17bae:	4814      	ldr	r0, [pc, #80]	; (17c00 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   17bb0:	4b17      	ldr	r3, [pc, #92]	; (17c10 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   17bb2:	4798      	blx	r3
			usbTerminalTimer.Start();
   17bb4:	4812      	ldr	r0, [pc, #72]	; (17c00 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   17bb6:	4b17      	ldr	r3, [pc, #92]	; (17c14 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   17bb8:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   17bba:	4817      	ldr	r0, [pc, #92]	; (17c18 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   17bbc:	4b17      	ldr	r3, [pc, #92]	; (17c1c <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
   17bbe:	4798      	blx	r3
   17bc0:	4603      	mov	r3, r0
   17bc2:	f083 0301 	eor.w	r3, r3, #1
   17bc6:	b2db      	uxtb	r3, r3
   17bc8:	2b00      	cmp	r3, #0
   17bca:	d008      	beq.n	17bde <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
   17bcc:	687b      	ldr	r3, [r7, #4]
   17bce:	789b      	ldrb	r3, [r3, #2]
   17bd0:	b2db      	uxtb	r3, r3
   17bd2:	2b00      	cmp	r3, #0
   17bd4:	d0f1      	beq.n	17bba <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
   17bd6:	687b      	ldr	r3, [r7, #4]
   17bd8:	2200      	movs	r2, #0
   17bda:	701a      	strb	r2, [r3, #0]
					return;
   17bdc:	e009      	b.n	17bf2 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   17bde:	4808      	ldr	r0, [pc, #32]	; (17c00 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   17be0:	4b0f      	ldr	r3, [pc, #60]	; (17c20 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
   17be2:	4798      	blx	r3
   17be4:	e005      	b.n	17bf2 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
   17be6:	687b      	ldr	r3, [r7, #4]
   17be8:	2200      	movs	r2, #0
   17bea:	701a      	strb	r2, [r3, #0]
			plugged=false;
   17bec:	687b      	ldr	r3, [r7, #4]
   17bee:	2200      	movs	r2, #0
   17bf0:	705a      	strb	r2, [r3, #1]
		}
		
}
   17bf2:	3708      	adds	r7, #8
   17bf4:	46bd      	mov	sp, r7
   17bf6:	bd80      	pop	{r7, pc}
   17bf8:	00017b05 	.word	0x00017b05
   17bfc:	0000613d 	.word	0x0000613d
   17c00:	2000a310 	.word	0x2000a310
   17c04:	00017ca1 	.word	0x00017ca1
   17c08:	00017aa1 	.word	0x00017aa1
   17c0c:	00017add 	.word	0x00017add
   17c10:	00017db5 	.word	0x00017db5
   17c14:	00017cd9 	.word	0x00017cd9
   17c18:	2000a258 	.word	0x2000a258
   17c1c:	00017345 	.word	0x00017345
   17c20:	00017cfd 	.word	0x00017cfd

00017c24 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
   17c24:	b580      	push	{r7, lr}
   17c26:	b082      	sub	sp, #8
   17c28:	af00      	add	r7, sp, #0
   17c2a:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
   17c2c:	4b04      	ldr	r3, [pc, #16]	; (17c40 <_ZL7task_cbPK10timer_task+0x1c>)
   17c2e:	681b      	ldr	r3, [r3, #0]
   17c30:	4618      	mov	r0, r3
   17c32:	4b04      	ldr	r3, [pc, #16]	; (17c44 <_ZL7task_cbPK10timer_task+0x20>)
   17c34:	4798      	blx	r3
}
   17c36:	bf00      	nop
   17c38:	3708      	adds	r7, #8
   17c3a:	46bd      	mov	sp, r7
   17c3c:	bd80      	pop	{r7, pc}
   17c3e:	bf00      	nop
   17c40:	2000a2bc 	.word	0x2000a2bc
   17c44:	00017d25 	.word	0x00017d25

00017c48 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
   17c48:	b480      	push	{r7}
   17c4a:	b083      	sub	sp, #12
   17c4c:	af00      	add	r7, sp, #0
   17c4e:	6078      	str	r0, [r7, #4]
   17c50:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   17c52:	687b      	ldr	r3, [r7, #4]
   17c54:	683a      	ldr	r2, [r7, #0]
   17c56:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
   17c58:	4a08      	ldr	r2, [pc, #32]	; (17c7c <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
   17c5a:	687b      	ldr	r3, [r7, #4]
   17c5c:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   17c5e:	687b      	ldr	r3, [r7, #4]
   17c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17c64:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
   17c66:	687b      	ldr	r3, [r7, #4]
   17c68:	689b      	ldr	r3, [r3, #8]
   17c6a:	4a05      	ldr	r2, [pc, #20]	; (17c80 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
   17c6c:	60da      	str	r2, [r3, #12]
} //Timer_Class
   17c6e:	687b      	ldr	r3, [r7, #4]
   17c70:	4618      	mov	r0, r3
   17c72:	370c      	adds	r7, #12
   17c74:	46bd      	mov	sp, r7
   17c76:	bc80      	pop	{r7}
   17c78:	4770      	bx	lr
   17c7a:	bf00      	nop
   17c7c:	2000a2bc 	.word	0x2000a2bc
   17c80:	00017c25 	.word	0x00017c25

00017c84 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
   17c84:	b480      	push	{r7}
   17c86:	b083      	sub	sp, #12
   17c88:	af00      	add	r7, sp, #0
   17c8a:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   17c8c:	687b      	ldr	r3, [r7, #4]
   17c8e:	2200      	movs	r2, #0
   17c90:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   17c92:	687b      	ldr	r3, [r7, #4]
   17c94:	4618      	mov	r0, r3
   17c96:	370c      	adds	r7, #12
   17c98:	46bd      	mov	sp, r7
   17c9a:	bc80      	pop	{r7}
   17c9c:	4770      	bx	lr
	...

00017ca0 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
   17ca0:	b580      	push	{r7, lr}
   17ca2:	b082      	sub	sp, #8
   17ca4:	af00      	add	r7, sp, #0
   17ca6:	6078      	str	r0, [r7, #4]
	
	ticks=0;
   17ca8:	687b      	ldr	r3, [r7, #4]
   17caa:	2200      	movs	r2, #0
   17cac:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
   17cae:	6878      	ldr	r0, [r7, #4]
   17cb0:	4b08      	ldr	r3, [pc, #32]	; (17cd4 <_ZN17TimerSerial_Class4InitEv+0x34>)
   17cb2:	4798      	blx	r3
   17cb4:	4603      	mov	r3, r0
   17cb6:	2b00      	cmp	r3, #0
   17cb8:	bf0c      	ite	eq
   17cba:	2301      	moveq	r3, #1
   17cbc:	2300      	movne	r3, #0
   17cbe:	b2da      	uxtb	r2, r3
   17cc0:	687b      	ldr	r3, [r7, #4]
   17cc2:	709a      	strb	r2, [r3, #2]
	return isOK;
   17cc4:	687b      	ldr	r3, [r7, #4]
   17cc6:	789b      	ldrb	r3, [r3, #2]
   17cc8:	b2db      	uxtb	r3, r3
}
   17cca:	4618      	mov	r0, r3
   17ccc:	3708      	adds	r7, #8
   17cce:	46bd      	mov	sp, r7
   17cd0:	bd80      	pop	{r7, pc}
   17cd2:	bf00      	nop
   17cd4:	00017cd9 	.word	0x00017cd9

00017cd8 <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
   17cd8:	b580      	push	{r7, lr}
   17cda:	b084      	sub	sp, #16
   17cdc:	af00      	add	r7, sp, #0
   17cde:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   17ce0:	687b      	ldr	r3, [r7, #4]
   17ce2:	691b      	ldr	r3, [r3, #16]
   17ce4:	4618      	mov	r0, r3
   17ce6:	4b04      	ldr	r3, [pc, #16]	; (17cf8 <_ZN17TimerSerial_Class5StartEv+0x20>)
   17ce8:	4798      	blx	r3
   17cea:	60f8      	str	r0, [r7, #12]
	return status;
   17cec:	68fb      	ldr	r3, [r7, #12]
	
}
   17cee:	4618      	mov	r0, r3
   17cf0:	3710      	adds	r7, #16
   17cf2:	46bd      	mov	sp, r7
   17cf4:	bd80      	pop	{r7, pc}
   17cf6:	bf00      	nop
   17cf8:	00006c05 	.word	0x00006c05

00017cfc <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
   17cfc:	b580      	push	{r7, lr}
   17cfe:	b084      	sub	sp, #16
   17d00:	af00      	add	r7, sp, #0
   17d02:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   17d04:	687b      	ldr	r3, [r7, #4]
   17d06:	691b      	ldr	r3, [r3, #16]
   17d08:	4618      	mov	r0, r3
   17d0a:	4b05      	ldr	r3, [pc, #20]	; (17d20 <_ZN17TimerSerial_Class4StopEv+0x24>)
   17d0c:	4798      	blx	r3
   17d0e:	60f8      	str	r0, [r7, #12]
	timeout=0;
   17d10:	687b      	ldr	r3, [r7, #4]
   17d12:	2200      	movs	r2, #0
   17d14:	705a      	strb	r2, [r3, #1]
	return status;
   17d16:	68fb      	ldr	r3, [r7, #12]
}
   17d18:	4618      	mov	r0, r3
   17d1a:	3710      	adds	r7, #16
   17d1c:	46bd      	mov	sp, r7
   17d1e:	bd80      	pop	{r7, pc}
   17d20:	00006c6d 	.word	0x00006c6d

00017d24 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
   17d24:	b480      	push	{r7}
   17d26:	b083      	sub	sp, #12
   17d28:	af00      	add	r7, sp, #0
   17d2a:	6078      	str	r0, [r7, #4]
	timeout=1;
   17d2c:	687b      	ldr	r3, [r7, #4]
   17d2e:	2201      	movs	r2, #1
   17d30:	705a      	strb	r2, [r3, #1]
}
   17d32:	bf00      	nop
   17d34:	370c      	adds	r7, #12
   17d36:	46bd      	mov	sp, r7
   17d38:	bc80      	pop	{r7}
   17d3a:	4770      	bx	lr

00017d3c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   17d3c:	b580      	push	{r7, lr}
   17d3e:	b086      	sub	sp, #24
   17d40:	af00      	add	r7, sp, #0
   17d42:	60f8      	str	r0, [r7, #12]
   17d44:	60b9      	str	r1, [r7, #8]
   17d46:	607a      	str	r2, [r7, #4]
   17d48:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
   17d4a:	68f8      	ldr	r0, [r7, #12]
   17d4c:	4b0d      	ldr	r3, [pc, #52]	; (17d84 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
   17d4e:	4798      	blx	r3
	task->interval = interval;
   17d50:	68fb      	ldr	r3, [r7, #12]
   17d52:	689b      	ldr	r3, [r3, #8]
   17d54:	687a      	ldr	r2, [r7, #4]
   17d56:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   17d58:	68fb      	ldr	r3, [r7, #12]
   17d5a:	689b      	ldr	r3, [r3, #8]
   17d5c:	68ba      	ldr	r2, [r7, #8]
   17d5e:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   17d60:	68fb      	ldr	r3, [r7, #12]
   17d62:	689b      	ldr	r3, [r3, #8]
   17d64:	78fa      	ldrb	r2, [r7, #3]
   17d66:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   17d68:	68fb      	ldr	r3, [r7, #12]
   17d6a:	691a      	ldr	r2, [r3, #16]
   17d6c:	68fb      	ldr	r3, [r7, #12]
   17d6e:	689b      	ldr	r3, [r3, #8]
   17d70:	4619      	mov	r1, r3
   17d72:	4610      	mov	r0, r2
   17d74:	4b04      	ldr	r3, [pc, #16]	; (17d88 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   17d76:	4798      	blx	r3
   17d78:	6178      	str	r0, [r7, #20]
	
	return status;
   17d7a:	697b      	ldr	r3, [r7, #20]
}
   17d7c:	4618      	mov	r0, r3
   17d7e:	3718      	adds	r7, #24
   17d80:	46bd      	mov	sp, r7
   17d82:	bd80      	pop	{r7, pc}
   17d84:	00017e99 	.word	0x00017e99
   17d88:	00006cd9 	.word	0x00006cd9

00017d8c <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   17d8c:	b590      	push	{r4, r7, lr}
   17d8e:	b087      	sub	sp, #28
   17d90:	af00      	add	r7, sp, #0
   17d92:	60f8      	str	r0, [r7, #12]
   17d94:	60b9      	str	r1, [r7, #8]
   17d96:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   17d98:	2301      	movs	r3, #1
   17d9a:	687a      	ldr	r2, [r7, #4]
   17d9c:	68b9      	ldr	r1, [r7, #8]
   17d9e:	68f8      	ldr	r0, [r7, #12]
   17da0:	4c03      	ldr	r4, [pc, #12]	; (17db0 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
   17da2:	47a0      	blx	r4
   17da4:	6178      	str	r0, [r7, #20]
		return status;
   17da6:	697b      	ldr	r3, [r7, #20]
}
   17da8:	4618      	mov	r0, r3
   17daa:	371c      	adds	r7, #28
   17dac:	46bd      	mov	sp, r7
   17dae:	bd90      	pop	{r4, r7, pc}
   17db0:	00017d3d 	.word	0x00017d3d

00017db4 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
   17db4:	b590      	push	{r4, r7, lr}
   17db6:	b087      	sub	sp, #28
   17db8:	af00      	add	r7, sp, #0
   17dba:	60f8      	str	r0, [r7, #12]
   17dbc:	60b9      	str	r1, [r7, #8]
   17dbe:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   17dc0:	2300      	movs	r3, #0
   17dc2:	687a      	ldr	r2, [r7, #4]
   17dc4:	68b9      	ldr	r1, [r7, #8]
   17dc6:	68f8      	ldr	r0, [r7, #12]
   17dc8:	4c03      	ldr	r4, [pc, #12]	; (17dd8 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
   17dca:	47a0      	blx	r4
   17dcc:	6178      	str	r0, [r7, #20]
	return status;
   17dce:	697b      	ldr	r3, [r7, #20]
}
   17dd0:	4618      	mov	r0, r3
   17dd2:	371c      	adds	r7, #28
   17dd4:	46bd      	mov	sp, r7
   17dd6:	bd90      	pop	{r4, r7, pc}
   17dd8:	00017d3d 	.word	0x00017d3d

00017ddc <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   17ddc:	b590      	push	{r4, r7, lr}
   17dde:	b087      	sub	sp, #28
   17de0:	af00      	add	r7, sp, #0
   17de2:	60f8      	str	r0, [r7, #12]
   17de4:	60b9      	str	r1, [r7, #8]
   17de6:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   17de8:	2300      	movs	r3, #0
   17dea:	687a      	ldr	r2, [r7, #4]
   17dec:	68b9      	ldr	r1, [r7, #8]
   17dee:	68f8      	ldr	r0, [r7, #12]
   17df0:	4c06      	ldr	r4, [pc, #24]	; (17e0c <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
   17df2:	47a0      	blx	r4
   17df4:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
   17df6:	68fb      	ldr	r3, [r7, #12]
   17df8:	691b      	ldr	r3, [r3, #16]
   17dfa:	4618      	mov	r0, r3
   17dfc:	4b04      	ldr	r3, [pc, #16]	; (17e10 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
   17dfe:	4798      	blx	r3
   17e00:	6178      	str	r0, [r7, #20]
	return status;
   17e02:	697b      	ldr	r3, [r7, #20]
}
   17e04:	4618      	mov	r0, r3
   17e06:	371c      	adds	r7, #28
   17e08:	46bd      	mov	sp, r7
   17e0a:	bd90      	pop	{r4, r7, pc}
   17e0c:	00017d3d 	.word	0x00017d3d
   17e10:	00006c05 	.word	0x00006c05

00017e14 <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
   17e14:	b580      	push	{r7, lr}
   17e16:	b082      	sub	sp, #8
   17e18:	af00      	add	r7, sp, #0
   17e1a:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   17e1c:	687b      	ldr	r3, [r7, #4]
   17e1e:	691a      	ldr	r2, [r3, #16]
   17e20:	687b      	ldr	r3, [r7, #4]
   17e22:	689b      	ldr	r3, [r3, #8]
   17e24:	4619      	mov	r1, r3
   17e26:	4610      	mov	r0, r2
   17e28:	4b04      	ldr	r3, [pc, #16]	; (17e3c <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
   17e2a:	4798      	blx	r3
	task->cb=NULL;
   17e2c:	687b      	ldr	r3, [r7, #4]
   17e2e:	689b      	ldr	r3, [r3, #8]
   17e30:	2200      	movs	r2, #0
   17e32:	60da      	str	r2, [r3, #12]
}
   17e34:	bf00      	nop
   17e36:	3708      	adds	r7, #8
   17e38:	46bd      	mov	sp, r7
   17e3a:	bd80      	pop	{r7, pc}
   17e3c:	00006ddd 	.word	0x00006ddd

00017e40 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
   17e40:	b580      	push	{r7, lr}
   17e42:	b082      	sub	sp, #8
   17e44:	af00      	add	r7, sp, #0
   17e46:	6078      	str	r0, [r7, #4]
   17e48:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   17e4a:	6839      	ldr	r1, [r7, #0]
   17e4c:	6878      	ldr	r0, [r7, #4]
   17e4e:	4b0f      	ldr	r3, [pc, #60]	; (17e8c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
   17e50:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   17e52:	687b      	ldr	r3, [r7, #4]
   17e54:	691b      	ldr	r3, [r3, #16]
   17e56:	f103 0218 	add.w	r2, r3, #24
   17e5a:	687b      	ldr	r3, [r7, #4]
   17e5c:	689b      	ldr	r3, [r3, #8]
   17e5e:	4619      	mov	r1, r3
   17e60:	4610      	mov	r0, r2
   17e62:	4b0b      	ldr	r3, [pc, #44]	; (17e90 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
   17e64:	4798      	blx	r3
   17e66:	4603      	mov	r3, r0
   17e68:	2b00      	cmp	r3, #0
   17e6a:	d007      	beq.n	17e7c <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   17e6c:	687b      	ldr	r3, [r7, #4]
   17e6e:	691a      	ldr	r2, [r3, #16]
   17e70:	687b      	ldr	r3, [r7, #4]
   17e72:	689b      	ldr	r3, [r3, #8]
   17e74:	4619      	mov	r1, r3
   17e76:	4610      	mov	r0, r2
   17e78:	4b06      	ldr	r3, [pc, #24]	; (17e94 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
   17e7a:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   17e7c:	687b      	ldr	r3, [r7, #4]
   17e7e:	689b      	ldr	r3, [r3, #8]
   17e80:	2200      	movs	r2, #0
   17e82:	60da      	str	r2, [r3, #12]
}
   17e84:	bf00      	nop
   17e86:	3708      	adds	r7, #8
   17e88:	46bd      	mov	sp, r7
   17e8a:	bd80      	pop	{r7, pc}
   17e8c:	00017ef1 	.word	0x00017ef1
   17e90:	000079c5 	.word	0x000079c5
   17e94:	00006ddd 	.word	0x00006ddd

00017e98 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
   17e98:	b480      	push	{r7}
   17e9a:	b085      	sub	sp, #20
   17e9c:	af00      	add	r7, sp, #0
   17e9e:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   17ea0:	2300      	movs	r3, #0
   17ea2:	73fb      	strb	r3, [r7, #15]
   17ea4:	7bfb      	ldrb	r3, [r7, #15]
   17ea6:	2b03      	cmp	r3, #3
   17ea8:	dc18      	bgt.n	17edc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
   17eaa:	7bfa      	ldrb	r2, [r7, #15]
   17eac:	490f      	ldr	r1, [pc, #60]	; (17eec <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   17eae:	4613      	mov	r3, r2
   17eb0:	009b      	lsls	r3, r3, #2
   17eb2:	4413      	add	r3, r2
   17eb4:	009b      	lsls	r3, r3, #2
   17eb6:	440b      	add	r3, r1
   17eb8:	330c      	adds	r3, #12
   17eba:	681b      	ldr	r3, [r3, #0]
   17ebc:	2b00      	cmp	r3, #0
   17ebe:	d109      	bne.n	17ed4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
   17ec0:	7bfa      	ldrb	r2, [r7, #15]
   17ec2:	4613      	mov	r3, r2
   17ec4:	009b      	lsls	r3, r3, #2
   17ec6:	4413      	add	r3, r2
   17ec8:	009b      	lsls	r3, r3, #2
   17eca:	4a08      	ldr	r2, [pc, #32]	; (17eec <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   17ecc:	441a      	add	r2, r3
   17ece:	687b      	ldr	r3, [r7, #4]
   17ed0:	609a      	str	r2, [r3, #8]
			return;
   17ed2:	e006      	b.n	17ee2 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   17ed4:	7bfb      	ldrb	r3, [r7, #15]
   17ed6:	3301      	adds	r3, #1
   17ed8:	73fb      	strb	r3, [r7, #15]
   17eda:	e7e3      	b.n	17ea4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
   17edc:	687b      	ldr	r3, [r7, #4]
   17ede:	4a03      	ldr	r2, [pc, #12]	; (17eec <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
   17ee0:	609a      	str	r2, [r3, #8]

}
   17ee2:	3714      	adds	r7, #20
   17ee4:	46bd      	mov	sp, r7
   17ee6:	bc80      	pop	{r7}
   17ee8:	4770      	bx	lr
   17eea:	bf00      	nop
   17eec:	2000a2c0 	.word	0x2000a2c0

00017ef0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
   17ef0:	b480      	push	{r7}
   17ef2:	b085      	sub	sp, #20
   17ef4:	af00      	add	r7, sp, #0
   17ef6:	6078      	str	r0, [r7, #4]
   17ef8:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   17efa:	2300      	movs	r3, #0
   17efc:	73fb      	strb	r3, [r7, #15]
   17efe:	7bfb      	ldrb	r3, [r7, #15]
   17f00:	2b03      	cmp	r3, #3
   17f02:	dc19      	bgt.n	17f38 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   17f04:	7bfa      	ldrb	r2, [r7, #15]
   17f06:	490e      	ldr	r1, [pc, #56]	; (17f40 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
   17f08:	4613      	mov	r3, r2
   17f0a:	009b      	lsls	r3, r3, #2
   17f0c:	4413      	add	r3, r2
   17f0e:	009b      	lsls	r3, r3, #2
   17f10:	440b      	add	r3, r1
   17f12:	330c      	adds	r3, #12
   17f14:	681a      	ldr	r2, [r3, #0]
   17f16:	683b      	ldr	r3, [r7, #0]
   17f18:	429a      	cmp	r2, r3
   17f1a:	d109      	bne.n	17f30 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   17f1c:	7bfa      	ldrb	r2, [r7, #15]
   17f1e:	4613      	mov	r3, r2
   17f20:	009b      	lsls	r3, r3, #2
   17f22:	4413      	add	r3, r2
   17f24:	009b      	lsls	r3, r3, #2
   17f26:	4a06      	ldr	r2, [pc, #24]	; (17f40 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
   17f28:	441a      	add	r2, r3
   17f2a:	687b      	ldr	r3, [r7, #4]
   17f2c:	609a      	str	r2, [r3, #8]
			return;
   17f2e:	e003      	b.n	17f38 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
   17f30:	7bfb      	ldrb	r3, [r7, #15]
   17f32:	3301      	adds	r3, #1
   17f34:	73fb      	strb	r3, [r7, #15]
   17f36:	e7e2      	b.n	17efe <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
   17f38:	3714      	adds	r7, #20
   17f3a:	46bd      	mov	sp, r7
   17f3c:	bc80      	pop	{r7}
   17f3e:	4770      	bx	lr
   17f40:	2000a2c0 	.word	0x2000a2c0

00017f44 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   17f44:	b580      	push	{r7, lr}
   17f46:	b082      	sub	sp, #8
   17f48:	af00      	add	r7, sp, #0
   17f4a:	6078      	str	r0, [r7, #4]
   17f4c:	6039      	str	r1, [r7, #0]
   17f4e:	687b      	ldr	r3, [r7, #4]
   17f50:	2b01      	cmp	r3, #1
   17f52:	d116      	bne.n	17f82 <_Z41__static_initialization_and_destruction_0ii+0x3e>
   17f54:	683b      	ldr	r3, [r7, #0]
   17f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17f5a:	4293      	cmp	r3, r2
   17f5c:	d111      	bne.n	17f82 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
   17f5e:	490b      	ldr	r1, [pc, #44]	; (17f8c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   17f60:	480b      	ldr	r0, [pc, #44]	; (17f90 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   17f62:	4b0c      	ldr	r3, [pc, #48]	; (17f94 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   17f64:	4798      	blx	r3
   17f66:	4a0c      	ldr	r2, [pc, #48]	; (17f98 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   17f68:	490c      	ldr	r1, [pc, #48]	; (17f9c <_Z41__static_initialization_and_destruction_0ii+0x58>)
   17f6a:	4809      	ldr	r0, [pc, #36]	; (17f90 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
   17f6c:	4b0c      	ldr	r3, [pc, #48]	; (17fa0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   17f6e:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
   17f70:	490c      	ldr	r1, [pc, #48]	; (17fa4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   17f72:	480d      	ldr	r0, [pc, #52]	; (17fa8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   17f74:	4b07      	ldr	r3, [pc, #28]	; (17f94 <_Z41__static_initialization_and_destruction_0ii+0x50>)
   17f76:	4798      	blx	r3
   17f78:	4a07      	ldr	r2, [pc, #28]	; (17f98 <_Z41__static_initialization_and_destruction_0ii+0x54>)
   17f7a:	4908      	ldr	r1, [pc, #32]	; (17f9c <_Z41__static_initialization_and_destruction_0ii+0x58>)
   17f7c:	480a      	ldr	r0, [pc, #40]	; (17fa8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   17f7e:	4b08      	ldr	r3, [pc, #32]	; (17fa0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   17f80:	4798      	blx	r3
   17f82:	bf00      	nop
   17f84:	3708      	adds	r7, #8
   17f86:	46bd      	mov	sp, r7
   17f88:	bd80      	pop	{r7, pc}
   17f8a:	bf00      	nop
   17f8c:	2000a624 	.word	0x2000a624
   17f90:	2000a310 	.word	0x2000a310
   17f94:	00017c49 	.word	0x00017c49
   17f98:	20000000 	.word	0x20000000
   17f9c:	00017c85 	.word	0x00017c85
   17fa0:	00018bf5 	.word	0x00018bf5
   17fa4:	2000a55c 	.word	0x2000a55c
   17fa8:	2000a330 	.word	0x2000a330

00017fac <_GLOBAL__sub_I_ptrTimerSerialClass>:
   17fac:	b580      	push	{r7, lr}
   17fae:	af00      	add	r7, sp, #0
   17fb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17fb4:	2001      	movs	r0, #1
   17fb6:	4b01      	ldr	r3, [pc, #4]	; (17fbc <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
   17fb8:	4798      	blx	r3
   17fba:	bd80      	pop	{r7, pc}
   17fbc:	00017f45 	.word	0x00017f45

00017fc0 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   17fc0:	b480      	push	{r7}
   17fc2:	b083      	sub	sp, #12
   17fc4:	af00      	add	r7, sp, #0
   17fc6:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   17fc8:	4b04      	ldr	r3, [pc, #16]	; (17fdc <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   17fca:	681b      	ldr	r3, [r3, #0]
   17fcc:	2201      	movs	r2, #1
   17fce:	709a      	strb	r2, [r3, #2]
	asm("nop");
   17fd0:	bf00      	nop
}
   17fd2:	bf00      	nop
   17fd4:	370c      	adds	r7, #12
   17fd6:	46bd      	mov	sp, r7
   17fd8:	bc80      	pop	{r7}
   17fda:	4770      	bx	lr
   17fdc:	2000a350 	.word	0x2000a350

00017fe0 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   17fe0:	b480      	push	{r7}
   17fe2:	b083      	sub	sp, #12
   17fe4:	af00      	add	r7, sp, #0
   17fe6:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   17fe8:	687b      	ldr	r3, [r7, #4]
   17fea:	4618      	mov	r0, r3
   17fec:	370c      	adds	r7, #12
   17fee:	46bd      	mov	sp, r7
   17ff0:	bc80      	pop	{r7}
   17ff2:	4770      	bx	lr

00017ff4 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   17ff4:	b480      	push	{r7}
   17ff6:	b083      	sub	sp, #12
   17ff8:	af00      	add	r7, sp, #0
   17ffa:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   17ffc:	687b      	ldr	r3, [r7, #4]
   17ffe:	4618      	mov	r0, r3
   18000:	370c      	adds	r7, #12
   18002:	46bd      	mov	sp, r7
   18004:	bc80      	pop	{r7}
   18006:	4770      	bx	lr

00018008 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   18008:	b580      	push	{r7, lr}
   1800a:	b084      	sub	sp, #16
   1800c:	af00      	add	r7, sp, #0
   1800e:	60f8      	str	r0, [r7, #12]
   18010:	60b9      	str	r1, [r7, #8]
   18012:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   18014:	4a1a      	ldr	r2, [pc, #104]	; (18080 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x78>)
   18016:	68fb      	ldr	r3, [r7, #12]
   18018:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   1801a:	68fb      	ldr	r3, [r7, #12]
   1801c:	68ba      	ldr	r2, [r7, #8]
   1801e:	64da      	str	r2, [r3, #76]	; 0x4c
	spiLT=spiLite;
   18020:	68fb      	ldr	r3, [r7, #12]
   18022:	687a      	ldr	r2, [r7, #4]
   18024:	619a      	str	r2, [r3, #24]
	rx=spiLT->rxLiteBuffer;
   18026:	68fb      	ldr	r3, [r7, #12]
   18028:	699b      	ldr	r3, [r3, #24]
   1802a:	68da      	ldr	r2, [r3, #12]
   1802c:	68fb      	ldr	r3, [r7, #12]
   1802e:	625a      	str	r2, [r3, #36]	; 0x24
	tx=spiLT->txLiteBuffer;
   18030:	68fb      	ldr	r3, [r7, #12]
   18032:	699b      	ldr	r3, [r3, #24]
   18034:	689a      	ldr	r2, [r3, #8]
   18036:	68fb      	ldr	r3, [r7, #12]
   18038:	621a      	str	r2, [r3, #32]
	auxTimer=&hvacTimer;
   1803a:	68fb      	ldr	r3, [r7, #12]
   1803c:	4a11      	ldr	r2, [pc, #68]	; (18084 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x7c>)
   1803e:	629a      	str	r2, [r3, #40]	; 0x28
	activeChannels[0]=4;
   18040:	68fb      	ldr	r3, [r7, #12]
   18042:	2204      	movs	r2, #4
   18044:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=8;
   18046:	68fb      	ldr	r3, [r7, #12]
   18048:	2208      	movs	r2, #8
   1804a:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=15;
   1804c:	68fb      	ldr	r3, [r7, #12]
   1804e:	220f      	movs	r2, #15
   18050:	715a      	strb	r2, [r3, #5]
	delay_ms(200);
   18052:	20c8      	movs	r0, #200	; 0xc8
   18054:	4b0c      	ldr	r3, [pc, #48]	; (18088 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   18056:	4798      	blx	r3
	temperatureTimer.Init();
   18058:	480c      	ldr	r0, [pc, #48]	; (1808c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   1805a:	4b0d      	ldr	r3, [pc, #52]	; (18090 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   1805c:	4798      	blx	r3
	configure_channels();
   1805e:	68f8      	ldr	r0, [r7, #12]
   18060:	4b0c      	ldr	r3, [pc, #48]	; (18094 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   18062:	4798      	blx	r3
	configure_global_parameters();
   18064:	68f8      	ldr	r0, [r7, #12]
   18066:	4b0c      	ldr	r3, [pc, #48]	; (18098 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   18068:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   1806a:	68fb      	ldr	r3, [r7, #12]
   1806c:	2201      	movs	r2, #1
   1806e:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   18070:	68f8      	ldr	r0, [r7, #12]
   18072:	4b0a      	ldr	r3, [pc, #40]	; (1809c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   18074:	4798      	blx	r3
   18076:	4603      	mov	r3, r0
}
   18078:	4618      	mov	r0, r3
   1807a:	3710      	adds	r7, #16
   1807c:	46bd      	mov	sp, r7
   1807e:	bd80      	pop	{r7, pc}
   18080:	2000a350 	.word	0x2000a350
   18084:	2000a200 	.word	0x2000a200
   18088:	000060a9 	.word	0x000060a9
   1808c:	2000a1c8 	.word	0x2000a1c8
   18090:	00016da9 	.word	0x00016da9
   18094:	000184e9 	.word	0x000184e9
   18098:	00018579 	.word	0x00018579
   1809c:	000185b1 	.word	0x000185b1

000180a0 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   180a0:	b590      	push	{r4, r7, lr}
   180a2:	b089      	sub	sp, #36	; 0x24
   180a4:	af02      	add	r7, sp, #8
   180a6:	60f8      	str	r0, [r7, #12]
   180a8:	60b9      	str	r1, [r7, #8]
   180aa:	603b      	str	r3, [r7, #0]
   180ac:	4613      	mov	r3, r2
   180ae:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   180b0:	79fb      	ldrb	r3, [r7, #7]
   180b2:	461a      	mov	r2, r3
   180b4:	f44f 7100 	mov.w	r1, #512	; 0x200
   180b8:	68f8      	ldr	r0, [r7, #12]
   180ba:	4b0b      	ldr	r3, [pc, #44]	; (180e8 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   180bc:	4798      	blx	r3
   180be:	4603      	mov	r3, r0
   180c0:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   180c2:	8afa      	ldrh	r2, [r7, #22]
   180c4:	683b      	ldr	r3, [r7, #0]
   180c6:	9300      	str	r3, [sp, #0]
   180c8:	4613      	mov	r3, r2
   180ca:	2202      	movs	r2, #2
   180cc:	68b9      	ldr	r1, [r7, #8]
   180ce:	68f8      	ldr	r0, [r7, #12]
   180d0:	4c06      	ldr	r4, [pc, #24]	; (180ec <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   180d2:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   180d4:	8afb      	ldrh	r3, [r7, #22]
   180d6:	79fa      	ldrb	r2, [r7, #7]
   180d8:	68b9      	ldr	r1, [r7, #8]
   180da:	68f8      	ldr	r0, [r7, #12]
   180dc:	4c04      	ldr	r4, [pc, #16]	; (180f0 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   180de:	47a0      	blx	r4
}
   180e0:	bf00      	nop
   180e2:	371c      	adds	r7, #28
   180e4:	46bd      	mov	sp, r7
   180e6:	bd90      	pop	{r4, r7, pc}
   180e8:	000184bd 	.word	0x000184bd
   180ec:	0001837d 	.word	0x0001837d
   180f0:	00018141 	.word	0x00018141

000180f4 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   180f4:	b590      	push	{r4, r7, lr}
   180f6:	b087      	sub	sp, #28
   180f8:	af02      	add	r7, sp, #8
   180fa:	6078      	str	r0, [r7, #4]
   180fc:	460b      	mov	r3, r1
   180fe:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   18100:	78fb      	ldrb	r3, [r7, #3]
   18102:	687a      	ldr	r2, [r7, #4]
   18104:	4413      	add	r3, r2
   18106:	78db      	ldrb	r3, [r3, #3]
   18108:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   1810a:	687b      	ldr	r3, [r7, #4]
   1810c:	2200      	movs	r2, #0
   1810e:	705a      	strb	r2, [r3, #1]
	ready=false;
   18110:	687b      	ldr	r3, [r7, #4]
   18112:	2200      	movs	r2, #0
   18114:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   18116:	687b      	ldr	r3, [r7, #4]
   18118:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1811a:	7bfb      	ldrb	r3, [r7, #15]
   1811c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18120:	b2db      	uxtb	r3, r3
   18122:	9300      	str	r3, [sp, #0]
   18124:	2300      	movs	r3, #0
   18126:	2202      	movs	r2, #2
   18128:	6878      	ldr	r0, [r7, #4]
   1812a:	4c04      	ldr	r4, [pc, #16]	; (1813c <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   1812c:	47a0      	blx	r4
	channelOnProcess=channel_number;
   1812e:	687b      	ldr	r3, [r7, #4]
   18130:	7bfa      	ldrb	r2, [r7, #15]
   18132:	71da      	strb	r2, [r3, #7]
	//wait_for_process_to_finish(chip_select);
}
   18134:	bf00      	nop
   18136:	3714      	adds	r7, #20
   18138:	46bd      	mov	sp, r7
   1813a:	bd90      	pop	{r4, r7, pc}
   1813c:	0001844d 	.word	0x0001844d

00018140 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   18140:	b590      	push	{r4, r7, lr}
   18142:	b089      	sub	sp, #36	; 0x24
   18144:	af02      	add	r7, sp, #8
   18146:	60f8      	str	r0, [r7, #12]
   18148:	60b9      	str	r1, [r7, #8]
   1814a:	4611      	mov	r1, r2
   1814c:	461a      	mov	r2, r3
   1814e:	460b      	mov	r3, r1
   18150:	71fb      	strb	r3, [r7, #7]
   18152:	4613      	mov	r3, r2
   18154:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   18156:	88ba      	ldrh	r2, [r7, #4]
   18158:	2300      	movs	r3, #0
   1815a:	9300      	str	r3, [sp, #0]
   1815c:	4613      	mov	r3, r2
   1815e:	2203      	movs	r2, #3
   18160:	68b9      	ldr	r1, [r7, #8]
   18162:	68f8      	ldr	r0, [r7, #12]
   18164:	4c0c      	ldr	r4, [pc, #48]	; (18198 <_ZN13LTC2983_Class20print_config_channelEmht+0x58>)
   18166:	47a0      	blx	r4
   18168:	6178      	str	r0, [r7, #20]

	usb.print(F("\nChannel Config "));
   1816a:	490c      	ldr	r1, [pc, #48]	; (1819c <_ZN13LTC2983_Class20print_config_channelEmht+0x5c>)
   1816c:	480c      	ldr	r0, [pc, #48]	; (181a0 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   1816e:	4b0d      	ldr	r3, [pc, #52]	; (181a4 <_ZN13LTC2983_Class20print_config_channelEmht+0x64>)
   18170:	4798      	blx	r3
	usb.println(channel_number);
   18172:	79fb      	ldrb	r3, [r7, #7]
   18174:	220a      	movs	r2, #10
   18176:	4619      	mov	r1, r3
   18178:	4809      	ldr	r0, [pc, #36]	; (181a0 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   1817a:	4b0b      	ldr	r3, [pc, #44]	; (181a8 <_ZN13LTC2983_Class20print_config_channelEmht+0x68>)
   1817c:	4798      	blx	r3

	// 24 LSB's are conversion result
	
	usb<<"register value: ";
   1817e:	490b      	ldr	r1, [pc, #44]	; (181ac <_ZN13LTC2983_Class20print_config_channelEmht+0x6c>)
   18180:	4807      	ldr	r0, [pc, #28]	; (181a0 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   18182:	4b0b      	ldr	r3, [pc, #44]	; (181b0 <_ZN13LTC2983_Class20print_config_channelEmht+0x70>)
   18184:	4798      	blx	r3
	usb.println(raw_data,HEX);
   18186:	2210      	movs	r2, #16
   18188:	6979      	ldr	r1, [r7, #20]
   1818a:	4805      	ldr	r0, [pc, #20]	; (181a0 <_ZN13LTC2983_Class20print_config_channelEmht+0x60>)
   1818c:	4b09      	ldr	r3, [pc, #36]	; (181b4 <_ZN13LTC2983_Class20print_config_channelEmht+0x74>)
   1818e:	4798      	blx	r3
	
}
   18190:	bf00      	nop
   18192:	371c      	adds	r7, #28
   18194:	46bd      	mov	sp, r7
   18196:	bd90      	pop	{r4, r7, pc}
   18198:	0001837d 	.word	0x0001837d
   1819c:	00021124 	.word	0x00021124
   181a0:	2000a258 	.word	0x2000a258
   181a4:	00017795 	.word	0x00017795
   181a8:	000178cd 	.word	0x000178cd
   181ac:	00021138 	.word	0x00021138
   181b0:	000186ad 	.word	0x000186ad
   181b4:	00017909 	.word	0x00017909

000181b8 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   181b8:	b590      	push	{r4, r7, lr}
   181ba:	b085      	sub	sp, #20
   181bc:	af02      	add	r7, sp, #8
   181be:	6078      	str	r0, [r7, #4]
   181c0:	460b      	mov	r3, r1
   181c2:	70fb      	strb	r3, [r7, #3]
   181c4:	4613      	mov	r3, r2
   181c6:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   181c8:	78fb      	ldrb	r3, [r7, #3]
   181ca:	461a      	mov	r2, r3
   181cc:	2110      	movs	r1, #16
   181ce:	6878      	ldr	r0, [r7, #4]
   181d0:	4b17      	ldr	r3, [pc, #92]	; (18230 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   181d2:	4798      	blx	r3
   181d4:	4603      	mov	r3, r0
   181d6:	461a      	mov	r2, r3
   181d8:	687b      	ldr	r3, [r7, #4]
   181da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   181de:	687b      	ldr	r3, [r7, #4]
   181e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   181e2:	687b      	ldr	r3, [r7, #4]
   181e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
   181e8:	2300      	movs	r3, #0
   181ea:	9300      	str	r3, [sp, #0]
   181ec:	4613      	mov	r3, r2
   181ee:	2203      	movs	r2, #3
   181f0:	6878      	ldr	r0, [r7, #4]
   181f2:	4c10      	ldr	r4, [pc, #64]	; (18234 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   181f4:	47a0      	blx	r4
   181f6:	4602      	mov	r2, r0
   181f8:	687b      	ldr	r3, [r7, #4]
   181fa:	649a      	str	r2, [r3, #72]	; 0x48


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   181fc:	687b      	ldr	r3, [r7, #4]
   181fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18200:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   18204:	687b      	ldr	r3, [r7, #4]
   18206:	645a      	str	r2, [r3, #68]	; 0x44
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   18208:	687b      	ldr	r3, [r7, #4]
   1820a:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1820c:	78bb      	ldrb	r3, [r7, #2]
   1820e:	78fa      	ldrb	r2, [r7, #3]
   18210:	6878      	ldr	r0, [r7, #4]
   18212:	4c09      	ldr	r4, [pc, #36]	; (18238 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   18214:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   18216:	687b      	ldr	r3, [r7, #4]
   18218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1821a:	0e1b      	lsrs	r3, r3, #24
   1821c:	b2da      	uxtb	r2, r3
   1821e:	687b      	ldr	r3, [r7, #4]
   18220:	719a      	strb	r2, [r3, #6]
	return scaled_result;
   18222:	687b      	ldr	r3, [r7, #4]
   18224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
   18226:	4618      	mov	r0, r3
   18228:	370c      	adds	r7, #12
   1822a:	46bd      	mov	sp, r7
   1822c:	bd90      	pop	{r4, r7, pc}
   1822e:	bf00      	nop
   18230:	000184bd 	.word	0x000184bd
   18234:	0001837d 	.word	0x0001837d
   18238:	00018291 	.word	0x00018291

0001823c <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   1823c:	b580      	push	{r7, lr}
   1823e:	b082      	sub	sp, #8
   18240:	af00      	add	r7, sp, #0
   18242:	6078      	str	r0, [r7, #4]
   18244:	460b      	mov	r3, r1
   18246:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   18248:	78fb      	ldrb	r3, [r7, #3]
   1824a:	687a      	ldr	r2, [r7, #4]
   1824c:	4413      	add	r3, r2
   1824e:	78db      	ldrb	r3, [r3, #3]
   18250:	4619      	mov	r1, r3
   18252:	6878      	ldr	r0, [r7, #4]
   18254:	4b03      	ldr	r3, [pc, #12]	; (18264 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   18256:	4798      	blx	r3
   18258:	4603      	mov	r3, r0
}
   1825a:	4618      	mov	r0, r3
   1825c:	3708      	adds	r7, #8
   1825e:	46bd      	mov	sp, r7
   18260:	bd80      	pop	{r7, pc}
   18262:	bf00      	nop
   18264:	00018269 	.word	0x00018269

00018268 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   18268:	b580      	push	{r7, lr}
   1826a:	b082      	sub	sp, #8
   1826c:	af00      	add	r7, sp, #0
   1826e:	6078      	str	r0, [r7, #4]
   18270:	460b      	mov	r3, r1
   18272:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   18274:	78fb      	ldrb	r3, [r7, #3]
   18276:	2202      	movs	r2, #2
   18278:	4619      	mov	r1, r3
   1827a:	6878      	ldr	r0, [r7, #4]
   1827c:	4b03      	ldr	r3, [pc, #12]	; (1828c <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   1827e:	4798      	blx	r3
   18280:	4603      	mov	r3, r0
}
   18282:	4618      	mov	r0, r3
   18284:	3708      	adds	r7, #8
   18286:	46bd      	mov	sp, r7
   18288:	bd80      	pop	{r7, pc}
   1828a:	bf00      	nop
   1828c:	000181b9 	.word	0x000181b9

00018290 <_ZN13LTC2983_Class13ConvertResultEmhh>:
		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   18290:	b580      	push	{r7, lr}
   18292:	b084      	sub	sp, #16
   18294:	af00      	add	r7, sp, #0
   18296:	60f8      	str	r0, [r7, #12]
   18298:	60b9      	str	r1, [r7, #8]
   1829a:	4611      	mov	r1, r2
   1829c:	461a      	mov	r2, r3
   1829e:	460b      	mov	r3, r1
   182a0:	71fb      	strb	r3, [r7, #7]
   182a2:	4613      	mov	r3, r2
   182a4:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   182a6:	68ba      	ldr	r2, [r7, #8]
   182a8:	68fb      	ldr	r3, [r7, #12]
   182aa:	655a      	str	r2, [r3, #84]	; 0x54
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   182ac:	68fb      	ldr	r3, [r7, #12]
   182ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   182b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   182b4:	2b00      	cmp	r3, #0
   182b6:	d006      	beq.n	182c6 <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   182b8:	68fb      	ldr	r3, [r7, #12]
   182ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   182bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   182c0:	461a      	mov	r2, r3
   182c2:	68fb      	ldr	r3, [r7, #12]
   182c4:	655a      	str	r2, [r3, #84]	; 0x54

	// Translate and print result
	if (channel_output == TEMPERATURE)
   182c6:	79bb      	ldrb	r3, [r7, #6]
   182c8:	2b02      	cmp	r3, #2
   182ca:	d11c      	bne.n	18306 <_ZN13LTC2983_Class13ConvertResultEmhh+0x76>
	{
		scaled_result= float(signed_data) / 1024;
   182cc:	68fb      	ldr	r3, [r7, #12]
   182ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   182d0:	4b18      	ldr	r3, [pc, #96]	; (18334 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   182d2:	4610      	mov	r0, r2
   182d4:	4798      	blx	r3
   182d6:	4602      	mov	r2, r0
   182d8:	4b17      	ldr	r3, [pc, #92]	; (18338 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   182da:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   182de:	4610      	mov	r0, r2
   182e0:	4798      	blx	r3
   182e2:	4603      	mov	r3, r0
   182e4:	461a      	mov	r2, r3
   182e6:	68fb      	ldr	r3, [r7, #12]
   182e8:	651a      	str	r2, [r3, #80]	; 0x50
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   182ea:	79fb      	ldrb	r3, [r7, #7]
   182ec:	4619      	mov	r1, r3
   182ee:	68f8      	ldr	r0, [r7, #12]
   182f0:	4b12      	ldr	r3, [pc, #72]	; (1833c <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   182f2:	4798      	blx	r3
   182f4:	4603      	mov	r3, r0
   182f6:	461a      	mov	r2, r3
   182f8:	68fb      	ldr	r3, [r7, #12]
   182fa:	6d19      	ldr	r1, [r3, #80]	; 0x50
   182fc:	68fb      	ldr	r3, [r7, #12]
   182fe:	3202      	adds	r2, #2
   18300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   18304:	e011      	b.n	1832a <_ZN13LTC2983_Class13ConvertResultEmhh+0x9a>
	else if (channel_output == VOLTAGE)
   18306:	79bb      	ldrb	r3, [r7, #6]
   18308:	2b01      	cmp	r3, #1
   1830a:	d10e      	bne.n	1832a <_ZN13LTC2983_Class13ConvertResultEmhh+0x9a>
		scaled_result = float(signed_data) / 2097152;
   1830c:	68fb      	ldr	r3, [r7, #12]
   1830e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   18310:	4b08      	ldr	r3, [pc, #32]	; (18334 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   18312:	4610      	mov	r0, r2
   18314:	4798      	blx	r3
   18316:	4602      	mov	r2, r0
   18318:	4b07      	ldr	r3, [pc, #28]	; (18338 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1831a:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   1831e:	4610      	mov	r0, r2
   18320:	4798      	blx	r3
   18322:	4603      	mov	r3, r0
   18324:	461a      	mov	r2, r3
   18326:	68fb      	ldr	r3, [r7, #12]
   18328:	651a      	str	r2, [r3, #80]	; 0x50
}
   1832a:	bf00      	nop
   1832c:	3710      	adds	r7, #16
   1832e:	46bd      	mov	sp, r7
   18330:	bd80      	pop	{r7, pc}
   18332:	bf00      	nop
   18334:	0001a8f1 	.word	0x0001a8f1
   18338:	0001ab01 	.word	0x0001ab01
   1833c:	00018341 	.word	0x00018341

00018340 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   18340:	b480      	push	{r7}
   18342:	b085      	sub	sp, #20
   18344:	af00      	add	r7, sp, #0
   18346:	6078      	str	r0, [r7, #4]
   18348:	460b      	mov	r3, r1
   1834a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   1834c:	2300      	movs	r3, #0
   1834e:	73fb      	strb	r3, [r7, #15]
   18350:	7bfb      	ldrb	r3, [r7, #15]
   18352:	2b02      	cmp	r3, #2
   18354:	dc0c      	bgt.n	18370 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   18356:	7bfb      	ldrb	r3, [r7, #15]
   18358:	687a      	ldr	r2, [r7, #4]
   1835a:	4413      	add	r3, r2
   1835c:	78db      	ldrb	r3, [r3, #3]
   1835e:	78fa      	ldrb	r2, [r7, #3]
   18360:	429a      	cmp	r2, r3
   18362:	d101      	bne.n	18368 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   18364:	7bfb      	ldrb	r3, [r7, #15]
   18366:	e004      	b.n	18372 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   18368:	7bfb      	ldrb	r3, [r7, #15]
   1836a:	3301      	adds	r3, #1
   1836c:	73fb      	strb	r3, [r7, #15]
   1836e:	e7ef      	b.n	18350 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   18370:	2300      	movs	r3, #0
}
   18372:	4618      	mov	r0, r3
   18374:	3714      	adds	r7, #20
   18376:	46bd      	mov	sp, r7
   18378:	bc80      	pop	{r7}
   1837a:	4770      	bx	lr

0001837c <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   1837c:	b590      	push	{r4, r7, lr}
   1837e:	b089      	sub	sp, #36	; 0x24
   18380:	af02      	add	r7, sp, #8
   18382:	60f8      	str	r0, [r7, #12]
   18384:	60b9      	str	r1, [r7, #8]
   18386:	4611      	mov	r1, r2
   18388:	461a      	mov	r2, r3
   1838a:	460b      	mov	r3, r1
   1838c:	71fb      	strb	r3, [r7, #7]
   1838e:	4613      	mov	r3, r2
   18390:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   18392:	2300      	movs	r3, #0
   18394:	75fb      	strb	r3, [r7, #23]
   18396:	7dfb      	ldrb	r3, [r7, #23]
   18398:	2b06      	cmp	r3, #6
   1839a:	dc09      	bgt.n	183b0 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   1839c:	68fb      	ldr	r3, [r7, #12]
   1839e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   183a0:	7dfb      	ldrb	r3, [r7, #23]
   183a2:	4413      	add	r3, r2
   183a4:	2200      	movs	r2, #0
   183a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   183a8:	7dfb      	ldrb	r3, [r7, #23]
   183aa:	3301      	adds	r3, #1
   183ac:	75fb      	strb	r3, [r7, #23]
   183ae:	e7f2      	b.n	18396 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   183b0:	68fb      	ldr	r3, [r7, #12]
   183b2:	6a1b      	ldr	r3, [r3, #32]
   183b4:	79fa      	ldrb	r2, [r7, #7]
   183b6:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   183b8:	68fb      	ldr	r3, [r7, #12]
   183ba:	6a1b      	ldr	r3, [r3, #32]
   183bc:	3301      	adds	r3, #1
   183be:	88ba      	ldrh	r2, [r7, #4]
   183c0:	1212      	asrs	r2, r2, #8
   183c2:	b2d2      	uxtb	r2, r2
   183c4:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   183c6:	68fb      	ldr	r3, [r7, #12]
   183c8:	6a1b      	ldr	r3, [r3, #32]
   183ca:	3302      	adds	r3, #2
   183cc:	88ba      	ldrh	r2, [r7, #4]
   183ce:	b2d2      	uxtb	r2, r2
   183d0:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   183d2:	68fb      	ldr	r3, [r7, #12]
   183d4:	6a1b      	ldr	r3, [r3, #32]
   183d6:	3303      	adds	r3, #3
   183d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   183da:	0e12      	lsrs	r2, r2, #24
   183dc:	b2d2      	uxtb	r2, r2
   183de:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   183e0:	68fb      	ldr	r3, [r7, #12]
   183e2:	6a1b      	ldr	r3, [r3, #32]
   183e4:	3304      	adds	r3, #4
   183e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   183e8:	0c12      	lsrs	r2, r2, #16
   183ea:	b2d2      	uxtb	r2, r2
   183ec:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   183ee:	68fb      	ldr	r3, [r7, #12]
   183f0:	6a1b      	ldr	r3, [r3, #32]
   183f2:	3305      	adds	r3, #5
   183f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   183f6:	0a12      	lsrs	r2, r2, #8
   183f8:	b2d2      	uxtb	r2, r2
   183fa:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   183fc:	68fb      	ldr	r3, [r7, #12]
   183fe:	6a1b      	ldr	r3, [r3, #32]
   18400:	3306      	adds	r3, #6
   18402:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18404:	b2d2      	uxtb	r2, r2
   18406:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   18408:	68fb      	ldr	r3, [r7, #12]
   1840a:	6998      	ldr	r0, [r3, #24]
   1840c:	68fb      	ldr	r3, [r7, #12]
   1840e:	6a1a      	ldr	r2, [r3, #32]
   18410:	f107 0110 	add.w	r1, r7, #16
   18414:	2307      	movs	r3, #7
   18416:	9300      	str	r3, [sp, #0]
   18418:	460b      	mov	r3, r1
   1841a:	68b9      	ldr	r1, [r7, #8]
   1841c:	4c0a      	ldr	r4, [pc, #40]	; (18448 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   1841e:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   18420:	7c3b      	ldrb	r3, [r7, #16]
   18422:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   18424:	7c7b      	ldrb	r3, [r7, #17]
   18426:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   18428:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   1842a:	7cbb      	ldrb	r3, [r7, #18]
   1842c:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   1842e:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   18430:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   18432:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   18434:	68fb      	ldr	r3, [r7, #12]
   18436:	61da      	str	r2, [r3, #28]
	asm("nop");
   18438:	bf00      	nop
	return output_data;
   1843a:	68fb      	ldr	r3, [r7, #12]
   1843c:	69db      	ldr	r3, [r3, #28]
}
   1843e:	4618      	mov	r0, r3
   18440:	371c      	adds	r7, #28
   18442:	46bd      	mov	sp, r7
   18444:	bd90      	pop	{r4, r7, pc}
   18446:	bf00      	nop
   18448:	00018851 	.word	0x00018851

0001844c <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   1844c:	b590      	push	{r4, r7, lr}
   1844e:	b087      	sub	sp, #28
   18450:	af02      	add	r7, sp, #8
   18452:	60f8      	str	r0, [r7, #12]
   18454:	60b9      	str	r1, [r7, #8]
   18456:	4611      	mov	r1, r2
   18458:	461a      	mov	r2, r3
   1845a:	460b      	mov	r3, r1
   1845c:	71fb      	strb	r3, [r7, #7]
   1845e:	4613      	mov	r3, r2
   18460:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   18462:	68fb      	ldr	r3, [r7, #12]
   18464:	6a1b      	ldr	r3, [r3, #32]
   18466:	79fa      	ldrb	r2, [r7, #7]
   18468:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   1846a:	68fb      	ldr	r3, [r7, #12]
   1846c:	6a1b      	ldr	r3, [r3, #32]
   1846e:	3301      	adds	r3, #1
   18470:	88ba      	ldrh	r2, [r7, #4]
   18472:	1212      	asrs	r2, r2, #8
   18474:	b2d2      	uxtb	r2, r2
   18476:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   18478:	68fb      	ldr	r3, [r7, #12]
   1847a:	6a1b      	ldr	r3, [r3, #32]
   1847c:	3302      	adds	r3, #2
   1847e:	88ba      	ldrh	r2, [r7, #4]
   18480:	b2d2      	uxtb	r2, r2
   18482:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   18484:	68fb      	ldr	r3, [r7, #12]
   18486:	6a1b      	ldr	r3, [r3, #32]
   18488:	3303      	adds	r3, #3
   1848a:	f897 2020 	ldrb.w	r2, [r7, #32]
   1848e:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   18490:	68fb      	ldr	r3, [r7, #12]
   18492:	6998      	ldr	r0, [r3, #24]
   18494:	68fb      	ldr	r3, [r7, #12]
   18496:	6a1a      	ldr	r2, [r3, #32]
   18498:	68fb      	ldr	r3, [r7, #12]
   1849a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1849c:	2304      	movs	r3, #4
   1849e:	9300      	str	r3, [sp, #0]
   184a0:	460b      	mov	r3, r1
   184a2:	68b9      	ldr	r1, [r7, #8]
   184a4:	4c04      	ldr	r4, [pc, #16]	; (184b8 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   184a6:	47a0      	blx	r4
	return rx[0];
   184a8:	68fb      	ldr	r3, [r7, #12]
   184aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   184ac:	781b      	ldrb	r3, [r3, #0]
}
   184ae:	4618      	mov	r0, r3
   184b0:	3714      	adds	r7, #20
   184b2:	46bd      	mov	sp, r7
   184b4:	bd90      	pop	{r4, r7, pc}
   184b6:	bf00      	nop
   184b8:	00018851 	.word	0x00018851

000184bc <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   184bc:	b480      	push	{r7}
   184be:	b083      	sub	sp, #12
   184c0:	af00      	add	r7, sp, #0
   184c2:	6078      	str	r0, [r7, #4]
   184c4:	460b      	mov	r3, r1
   184c6:	807b      	strh	r3, [r7, #2]
   184c8:	4613      	mov	r3, r2
   184ca:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   184cc:	787b      	ldrb	r3, [r7, #1]
   184ce:	3b01      	subs	r3, #1
   184d0:	b29b      	uxth	r3, r3
   184d2:	009b      	lsls	r3, r3, #2
   184d4:	b29a      	uxth	r2, r3
   184d6:	887b      	ldrh	r3, [r7, #2]
   184d8:	4413      	add	r3, r2
   184da:	b29b      	uxth	r3, r3
}
   184dc:	4618      	mov	r0, r3
   184de:	370c      	adds	r7, #12
   184e0:	46bd      	mov	sp, r7
   184e2:	bc80      	pop	{r7}
   184e4:	4770      	bx	lr
	...

000184e8 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   184e8:	b590      	push	{r4, r7, lr}
   184ea:	b085      	sub	sp, #20
   184ec:	af00      	add	r7, sp, #0
   184ee:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	// ----- Channel 2: Assign Sense Resistor -----
	channel_assignment_data =
   184f0:	4b1c      	ldr	r3, [pc, #112]	; (18564 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   184f2:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 2, channel_assignment_data);
   184f4:	687b      	ldr	r3, [r7, #4]
   184f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   184f8:	68fb      	ldr	r3, [r7, #12]
   184fa:	2202      	movs	r2, #2
   184fc:	6878      	ldr	r0, [r7, #4]
   184fe:	4c1a      	ldr	r4, [pc, #104]	; (18568 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18500:	47a0      	blx	r4
	// ----- Channel 4: Assign RTD PT-100 -----
	channel_assignment_data =
   18502:	4b1a      	ldr	r3, [pc, #104]	; (1856c <_ZN13LTC2983_Class18configure_channelsEv+0x84>)
   18504:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__2 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 4, channel_assignment_data);
   18506:	687b      	ldr	r3, [r7, #4]
   18508:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1850a:	68fb      	ldr	r3, [r7, #12]
   1850c:	2204      	movs	r2, #4
   1850e:	6878      	ldr	r0, [r7, #4]
   18510:	4c15      	ldr	r4, [pc, #84]	; (18568 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18512:	47a0      	blx	r4
	// ----- Channel 6: Assign Sense Resistor -----
	channel_assignment_data =
   18514:	4b13      	ldr	r3, [pc, #76]	; (18564 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   18516:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 6, channel_assignment_data);
   18518:	687b      	ldr	r3, [r7, #4]
   1851a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1851c:	68fb      	ldr	r3, [r7, #12]
   1851e:	2206      	movs	r2, #6
   18520:	6878      	ldr	r0, [r7, #4]
   18522:	4c11      	ldr	r4, [pc, #68]	; (18568 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18524:	47a0      	blx	r4
	// ----- Channel 8: Assign RTD PT-100 -----
	channel_assignment_data =
   18526:	4b12      	ldr	r3, [pc, #72]	; (18570 <_ZN13LTC2983_Class18configure_channelsEv+0x88>)
   18528:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__6 |
	RTD_NUM_WIRES__4_WIRE |
	RTD_EXCITATION_MODE__ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 8, channel_assignment_data);
   1852a:	687b      	ldr	r3, [r7, #4]
   1852c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1852e:	68fb      	ldr	r3, [r7, #12]
   18530:	2208      	movs	r2, #8
   18532:	6878      	ldr	r0, [r7, #4]
   18534:	4c0c      	ldr	r4, [pc, #48]	; (18568 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18536:	47a0      	blx	r4
	// ----- Channel 13: Assign Sense Resistor -----
	channel_assignment_data =
   18538:	4b0a      	ldr	r3, [pc, #40]	; (18564 <_ZN13LTC2983_Class18configure_channelsEv+0x7c>)
   1853a:	60fb      	str	r3, [r7, #12]
	SENSOR_TYPE__SENSE_RESISTOR |
	(uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	assign_channel(chipSelect, 13, channel_assignment_data);
   1853c:	687b      	ldr	r3, [r7, #4]
   1853e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   18540:	68fb      	ldr	r3, [r7, #12]
   18542:	220d      	movs	r2, #13
   18544:	6878      	ldr	r0, [r7, #4]
   18546:	4c08      	ldr	r4, [pc, #32]	; (18568 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   18548:	47a0      	blx	r4
	// ----- Channel 15: Assign RTD PT-100 -----
	channel_assignment_data =
   1854a:	4b0a      	ldr	r3, [pc, #40]	; (18574 <_ZN13LTC2983_Class18configure_channelsEv+0x8c>)
   1854c:	60fb      	str	r3, [r7, #12]
	RTD_RSENSE_CHANNEL__13 |
	RTD_NUM_WIRES__2_WIRE |
	RTD_EXCITATION_MODE__NO_ROTATION_SHARING |
	RTD_EXCITATION_CURRENT__50UA |
	RTD_STANDARD__AMERICAN;
	assign_channel(chipSelect, 15, channel_assignment_data);
   1854e:	687b      	ldr	r3, [r7, #4]
   18550:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   18552:	68fb      	ldr	r3, [r7, #12]
   18554:	220f      	movs	r2, #15
   18556:	6878      	ldr	r0, [r7, #4]
   18558:	4c03      	ldr	r4, [pc, #12]	; (18568 <_ZN13LTC2983_Class18configure_channelsEv+0x80>)
   1855a:	47a0      	blx	r4

}
   1855c:	bf00      	nop
   1855e:	3714      	adds	r7, #20
   18560:	46bd      	mov	sp, r7
   18562:	bd90      	pop	{r4, r7, pc}
   18564:	e89c4000 	.word	0xe89c4000
   18568:	000180a1 	.word	0x000180a1
   1856c:	60851000 	.word	0x60851000
   18570:	61a91000 	.word	0x61a91000
   18574:	63451000 	.word	0x63451000

00018578 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   18578:	b590      	push	{r4, r7, lr}
   1857a:	b085      	sub	sp, #20
   1857c:	af02      	add	r7, sp, #8
   1857e:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   18580:	687b      	ldr	r3, [r7, #4]
   18582:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
	REJECTION__50_60_HZ);
   18584:	2300      	movs	r3, #0
   18586:	9300      	str	r3, [sp, #0]
   18588:	23f0      	movs	r3, #240	; 0xf0
   1858a:	2202      	movs	r2, #2
   1858c:	6878      	ldr	r0, [r7, #4]
   1858e:	4c07      	ldr	r4, [pc, #28]	; (185ac <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   18590:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   18592:	687b      	ldr	r3, [r7, #4]
   18594:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   18596:	2300      	movs	r3, #0
   18598:	9300      	str	r3, [sp, #0]
   1859a:	23ff      	movs	r3, #255	; 0xff
   1859c:	2202      	movs	r2, #2
   1859e:	6878      	ldr	r0, [r7, #4]
   185a0:	4c02      	ldr	r4, [pc, #8]	; (185ac <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   185a2:	47a0      	blx	r4
}
   185a4:	bf00      	nop
   185a6:	370c      	adds	r7, #12
   185a8:	46bd      	mov	sp, r7
   185aa:	bd90      	pop	{r4, r7, pc}
   185ac:	0001844d 	.word	0x0001844d

000185b0 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   185b0:	b580      	push	{r7, lr}
   185b2:	b082      	sub	sp, #8
   185b4:	af00      	add	r7, sp, #0
   185b6:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   185b8:	687b      	ldr	r3, [r7, #4]
   185ba:	2200      	movs	r2, #0
   185bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	meassureTimeout=false;
   185c0:	687b      	ldr	r3, [r7, #4]
   185c2:	2200      	movs	r2, #0
   185c4:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   185c6:	4a31      	ldr	r2, [pc, #196]	; (1868c <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   185c8:	687b      	ldr	r3, [r7, #4]
   185ca:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   185cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   185d0:	492f      	ldr	r1, [pc, #188]	; (18690 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   185d2:	4830      	ldr	r0, [pc, #192]	; (18694 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   185d4:	4b30      	ldr	r3, [pc, #192]	; (18698 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   185d6:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   185d8:	687b      	ldr	r3, [r7, #4]
   185da:	799b      	ldrb	r3, [r3, #6]
   185dc:	2b01      	cmp	r3, #1
   185de:	d009      	beq.n	185f4 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   185e0:	687b      	ldr	r3, [r7, #4]
   185e2:	789b      	ldrb	r3, [r3, #2]
   185e4:	b2db      	uxtb	r3, r3
   185e6:	f083 0301 	eor.w	r3, r3, #1
   185ea:	b2db      	uxtb	r3, r3
   185ec:	2b00      	cmp	r3, #0
   185ee:	d001      	beq.n	185f4 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   185f0:	2301      	movs	r3, #1
   185f2:	e000      	b.n	185f6 <_ZN13LTC2983_Class8SelfTestEv+0x46>
   185f4:	2300      	movs	r3, #0
   185f6:	2b00      	cmp	r3, #0
   185f8:	d034      	beq.n	18664 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   185fa:	2100      	movs	r1, #0
   185fc:	6878      	ldr	r0, [r7, #4]
   185fe:	4b27      	ldr	r3, [pc, #156]	; (1869c <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   18600:	4798      	blx	r3
		delay_ms(1);
   18602:	2001      	movs	r0, #1
   18604:	4b26      	ldr	r3, [pc, #152]	; (186a0 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   18606:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   18608:	687b      	ldr	r3, [r7, #4]
   1860a:	781b      	ldrb	r3, [r3, #0]
   1860c:	b2db      	uxtb	r3, r3
   1860e:	f083 0301 	eor.w	r3, r3, #1
   18612:	b2db      	uxtb	r3, r3
   18614:	2b00      	cmp	r3, #0
   18616:	d009      	beq.n	1862c <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   18618:	687b      	ldr	r3, [r7, #4]
   1861a:	789b      	ldrb	r3, [r3, #2]
   1861c:	b2db      	uxtb	r3, r3
   1861e:	f083 0301 	eor.w	r3, r3, #1
   18622:	b2db      	uxtb	r3, r3
   18624:	2b00      	cmp	r3, #0
   18626:	d001      	beq.n	1862c <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   18628:	2301      	movs	r3, #1
   1862a:	e000      	b.n	1862e <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   1862c:	2300      	movs	r3, #0
   1862e:	2b00      	cmp	r3, #0
   18630:	d000      	beq.n	18634 <_ZN13LTC2983_Class8SelfTestEv+0x84>
   18632:	e7e9      	b.n	18608 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   18634:	687b      	ldr	r3, [r7, #4]
   18636:	789b      	ldrb	r3, [r3, #2]
   18638:	b2db      	uxtb	r3, r3
   1863a:	f083 0301 	eor.w	r3, r3, #1
   1863e:	b2db      	uxtb	r3, r3
   18640:	2b00      	cmp	r3, #0
   18642:	d0c9      	beq.n	185d8 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   18644:	687b      	ldr	r3, [r7, #4]
   18646:	781b      	ldrb	r3, [r3, #0]
   18648:	b2db      	uxtb	r3, r3
   1864a:	2b00      	cmp	r3, #0
   1864c:	d006      	beq.n	1865c <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   1864e:	687b      	ldr	r3, [r7, #4]
   18650:	78db      	ldrb	r3, [r3, #3]
   18652:	4619      	mov	r1, r3
   18654:	6878      	ldr	r0, [r7, #4]
   18656:	4b13      	ldr	r3, [pc, #76]	; (186a4 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   18658:	4798      	blx	r3
   1865a:	e7bd      	b.n	185d8 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   1865c:	2001      	movs	r0, #1
   1865e:	4b10      	ldr	r3, [pc, #64]	; (186a0 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   18660:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   18662:	e7b9      	b.n	185d8 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   18664:	490a      	ldr	r1, [pc, #40]	; (18690 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   18666:	480b      	ldr	r0, [pc, #44]	; (18694 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   18668:	4b0f      	ldr	r3, [pc, #60]	; (186a8 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   1866a:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   1866c:	687b      	ldr	r3, [r7, #4]
   1866e:	799b      	ldrb	r3, [r3, #6]
   18670:	2b01      	cmp	r3, #1
   18672:	bf0c      	ite	eq
   18674:	2301      	moveq	r3, #1
   18676:	2300      	movne	r3, #0
   18678:	b2da      	uxtb	r2, r3
   1867a:	687b      	ldr	r3, [r7, #4]
   1867c:	751a      	strb	r2, [r3, #20]
	return	isOK;
   1867e:	687b      	ldr	r3, [r7, #4]
   18680:	7d1b      	ldrb	r3, [r3, #20]
	}
   18682:	4618      	mov	r0, r3
   18684:	3708      	adds	r7, #8
   18686:	46bd      	mov	sp, r7
   18688:	bd80      	pop	{r7, pc}
   1868a:	bf00      	nop
   1868c:	2000a350 	.word	0x2000a350
   18690:	00017fc1 	.word	0x00017fc1
   18694:	2000a1c8 	.word	0x2000a1c8
   18698:	00016f51 	.word	0x00016f51
   1869c:	000180f5 	.word	0x000180f5
   186a0:	000060a9 	.word	0x000060a9
   186a4:	00018269 	.word	0x00018269
   186a8:	00016ee1 	.word	0x00016ee1

000186ac <_ZlsIA17_cER5PrintS2_RKT_>:
	writeAddr(v);
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
   186ac:	b580      	push	{r7, lr}
   186ae:	b082      	sub	sp, #8
   186b0:	af00      	add	r7, sp, #0
   186b2:	6078      	str	r0, [r7, #4]
   186b4:	6039      	str	r1, [r7, #0]
{ stream.print(arg); return stream; }
   186b6:	6839      	ldr	r1, [r7, #0]
   186b8:	6878      	ldr	r0, [r7, #4]
   186ba:	4b03      	ldr	r3, [pc, #12]	; (186c8 <_ZlsIA17_cER5PrintS2_RKT_+0x1c>)
   186bc:	4798      	blx	r3
   186be:	687b      	ldr	r3, [r7, #4]
   186c0:	4618      	mov	r0, r3
   186c2:	3708      	adds	r7, #8
   186c4:	46bd      	mov	sp, r7
   186c6:	bd80      	pop	{r7, pc}
   186c8:	000177b5 	.word	0x000177b5

000186cc <hri_port_set_OUT_reg>:
{
   186cc:	b480      	push	{r7}
   186ce:	b085      	sub	sp, #20
   186d0:	af00      	add	r7, sp, #0
   186d2:	60f8      	str	r0, [r7, #12]
   186d4:	460b      	mov	r3, r1
   186d6:	607a      	str	r2, [r7, #4]
   186d8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   186da:	7afb      	ldrb	r3, [r7, #11]
   186dc:	68fa      	ldr	r2, [r7, #12]
   186de:	01db      	lsls	r3, r3, #7
   186e0:	4413      	add	r3, r2
   186e2:	3318      	adds	r3, #24
   186e4:	687a      	ldr	r2, [r7, #4]
   186e6:	601a      	str	r2, [r3, #0]
}
   186e8:	bf00      	nop
   186ea:	3714      	adds	r7, #20
   186ec:	46bd      	mov	sp, r7
   186ee:	bc80      	pop	{r7}
   186f0:	4770      	bx	lr

000186f2 <hri_port_clear_OUT_reg>:
{
   186f2:	b480      	push	{r7}
   186f4:	b085      	sub	sp, #20
   186f6:	af00      	add	r7, sp, #0
   186f8:	60f8      	str	r0, [r7, #12]
   186fa:	460b      	mov	r3, r1
   186fc:	607a      	str	r2, [r7, #4]
   186fe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   18700:	7afb      	ldrb	r3, [r7, #11]
   18702:	68fa      	ldr	r2, [r7, #12]
   18704:	01db      	lsls	r3, r3, #7
   18706:	4413      	add	r3, r2
   18708:	3314      	adds	r3, #20
   1870a:	687a      	ldr	r2, [r7, #4]
   1870c:	601a      	str	r2, [r3, #0]
}
   1870e:	bf00      	nop
   18710:	3714      	adds	r7, #20
   18712:	46bd      	mov	sp, r7
   18714:	bc80      	pop	{r7}
   18716:	4770      	bx	lr

00018718 <_gpio_set_level>:
{
   18718:	b580      	push	{r7, lr}
   1871a:	b082      	sub	sp, #8
   1871c:	af00      	add	r7, sp, #0
   1871e:	4603      	mov	r3, r0
   18720:	6039      	str	r1, [r7, #0]
   18722:	71fb      	strb	r3, [r7, #7]
   18724:	4613      	mov	r3, r2
   18726:	71bb      	strb	r3, [r7, #6]
	if (level) {
   18728:	79bb      	ldrb	r3, [r7, #6]
   1872a:	2b00      	cmp	r3, #0
   1872c:	d006      	beq.n	1873c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1872e:	79fb      	ldrb	r3, [r7, #7]
   18730:	683a      	ldr	r2, [r7, #0]
   18732:	4619      	mov	r1, r3
   18734:	4806      	ldr	r0, [pc, #24]	; (18750 <_gpio_set_level+0x38>)
   18736:	4b07      	ldr	r3, [pc, #28]	; (18754 <_gpio_set_level+0x3c>)
   18738:	4798      	blx	r3
}
   1873a:	e005      	b.n	18748 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   1873c:	79fb      	ldrb	r3, [r7, #7]
   1873e:	683a      	ldr	r2, [r7, #0]
   18740:	4619      	mov	r1, r3
   18742:	4803      	ldr	r0, [pc, #12]	; (18750 <_gpio_set_level+0x38>)
   18744:	4b04      	ldr	r3, [pc, #16]	; (18758 <_gpio_set_level+0x40>)
   18746:	4798      	blx	r3
}
   18748:	bf00      	nop
   1874a:	3708      	adds	r7, #8
   1874c:	46bd      	mov	sp, r7
   1874e:	bd80      	pop	{r7, pc}
   18750:	41008000 	.word	0x41008000
   18754:	000186cd 	.word	0x000186cd
   18758:	000186f3 	.word	0x000186f3

0001875c <gpio_set_pin_level>:
{
   1875c:	b580      	push	{r7, lr}
   1875e:	b082      	sub	sp, #8
   18760:	af00      	add	r7, sp, #0
   18762:	4603      	mov	r3, r0
   18764:	460a      	mov	r2, r1
   18766:	71fb      	strb	r3, [r7, #7]
   18768:	4613      	mov	r3, r2
   1876a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   1876c:	79fb      	ldrb	r3, [r7, #7]
   1876e:	115b      	asrs	r3, r3, #5
   18770:	b2d8      	uxtb	r0, r3
   18772:	79fb      	ldrb	r3, [r7, #7]
   18774:	f003 031f 	and.w	r3, r3, #31
   18778:	2201      	movs	r2, #1
   1877a:	fa02 f303 	lsl.w	r3, r2, r3
   1877e:	79ba      	ldrb	r2, [r7, #6]
   18780:	4619      	mov	r1, r3
   18782:	4b03      	ldr	r3, [pc, #12]	; (18790 <gpio_set_pin_level+0x34>)
   18784:	4798      	blx	r3
}
   18786:	bf00      	nop
   18788:	3708      	adds	r7, #8
   1878a:	46bd      	mov	sp, r7
   1878c:	bd80      	pop	{r7, pc}
   1878e:	bf00      	nop
   18790:	00018719 	.word	0x00018719

00018794 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   18794:	b480      	push	{r7}
   18796:	b083      	sub	sp, #12
   18798:	af00      	add	r7, sp, #0
   1879a:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   1879c:	4a05      	ldr	r2, [pc, #20]	; (187b4 <_ZN6LT_SPIC1Ev+0x20>)
   1879e:	687b      	ldr	r3, [r7, #4]
   187a0:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   187a2:	687b      	ldr	r3, [r7, #4]
   187a4:	4a04      	ldr	r2, [pc, #16]	; (187b8 <_ZN6LT_SPIC1Ev+0x24>)
   187a6:	605a      	str	r2, [r3, #4]
} //LT_SPI
   187a8:	687b      	ldr	r3, [r7, #4]
   187aa:	4618      	mov	r0, r3
   187ac:	370c      	adds	r7, #12
   187ae:	46bd      	mov	sp, r7
   187b0:	bc80      	pop	{r7}
   187b2:	4770      	bx	lr
   187b4:	2000a354 	.word	0x2000a354
   187b8:	2000a358 	.word	0x2000a358

000187bc <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   187bc:	b480      	push	{r7}
   187be:	b083      	sub	sp, #12
   187c0:	af00      	add	r7, sp, #0
   187c2:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   187c4:	687b      	ldr	r3, [r7, #4]
   187c6:	4618      	mov	r0, r3
   187c8:	370c      	adds	r7, #12
   187ca:	46bd      	mov	sp, r7
   187cc:	bc80      	pop	{r7}
   187ce:	4770      	bx	lr

000187d0 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   187d0:	b580      	push	{r7, lr}
   187d2:	b082      	sub	sp, #8
   187d4:	af00      	add	r7, sp, #0
   187d6:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   187d8:	687b      	ldr	r3, [r7, #4]
   187da:	685a      	ldr	r2, [r3, #4]
   187dc:	687b      	ldr	r3, [r7, #4]
   187de:	691b      	ldr	r3, [r3, #16]
   187e0:	4619      	mov	r1, r3
   187e2:	4610      	mov	r0, r2
   187e4:	4b0e      	ldr	r3, [pc, #56]	; (18820 <_ZN6LT_SPI4initEv+0x50>)
   187e6:	4798      	blx	r3
	spiTemp->init();
   187e8:	687b      	ldr	r3, [r7, #4]
   187ea:	685b      	ldr	r3, [r3, #4]
   187ec:	4618      	mov	r0, r3
   187ee:	4b0d      	ldr	r3, [pc, #52]	; (18824 <_ZN6LT_SPI4initEv+0x54>)
   187f0:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   187f2:	687b      	ldr	r3, [r7, #4]
   187f4:	685b      	ldr	r3, [r3, #4]
   187f6:	685a      	ldr	r2, [r3, #4]
   187f8:	687b      	ldr	r3, [r7, #4]
   187fa:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   187fc:	687b      	ldr	r3, [r7, #4]
   187fe:	685b      	ldr	r3, [r3, #4]
   18800:	689a      	ldr	r2, [r3, #8]
   18802:	687b      	ldr	r3, [r7, #4]
   18804:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   18806:	687b      	ldr	r3, [r7, #4]
   18808:	685b      	ldr	r3, [r3, #4]
   1880a:	4618      	mov	r0, r3
   1880c:	4b06      	ldr	r3, [pc, #24]	; (18828 <_ZN6LT_SPI4initEv+0x58>)
   1880e:	4798      	blx	r3
	ready=true;
   18810:	687b      	ldr	r3, [r7, #4]
   18812:	2201      	movs	r2, #1
   18814:	701a      	strb	r2, [r3, #0]
}
   18816:	bf00      	nop
   18818:	3708      	adds	r7, #8
   1881a:	46bd      	mov	sp, r7
   1881c:	bd80      	pop	{r7, pc}
   1881e:	bf00      	nop
   18820:	00015399 	.word	0x00015399
   18824:	00015351 	.word	0x00015351
   18828:	000153bd 	.word	0x000153bd

0001882c <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   1882c:	b480      	push	{r7}
   1882e:	b083      	sub	sp, #12
   18830:	af00      	add	r7, sp, #0
   18832:	6078      	str	r0, [r7, #4]
   18834:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   18836:	687b      	ldr	r3, [r7, #4]
   18838:	683a      	ldr	r2, [r7, #0]
   1883a:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   1883c:	4a03      	ldr	r2, [pc, #12]	; (1884c <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   1883e:	687b      	ldr	r3, [r7, #4]
   18840:	6013      	str	r3, [r2, #0]
}
   18842:	bf00      	nop
   18844:	370c      	adds	r7, #12
   18846:	46bd      	mov	sp, r7
   18848:	bc80      	pop	{r7}
   1884a:	4770      	bx	lr
   1884c:	2000a354 	.word	0x2000a354

00018850 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   18850:	b580      	push	{r7, lr}
   18852:	b086      	sub	sp, #24
   18854:	af00      	add	r7, sp, #0
   18856:	60f8      	str	r0, [r7, #12]
   18858:	60b9      	str	r1, [r7, #8]
   1885a:	607a      	str	r2, [r7, #4]
   1885c:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   1885e:	687b      	ldr	r3, [r7, #4]
   18860:	781b      	ldrb	r3, [r3, #0]
   18862:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   18864:	68b9      	ldr	r1, [r7, #8]
   18866:	68f8      	ldr	r0, [r7, #12]
   18868:	4b25      	ldr	r3, [pc, #148]	; (18900 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   1886a:	4798      	blx	r3
	
	switch(rOrw){
   1886c:	7dfb      	ldrb	r3, [r7, #23]
   1886e:	2b02      	cmp	r3, #2
   18870:	d002      	beq.n	18878 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   18872:	2b03      	cmp	r3, #3
   18874:	d009      	beq.n	1888a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   18876:	e028      	b.n	188ca <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   18878:	68fb      	ldr	r3, [r7, #12]
   1887a:	685b      	ldr	r3, [r3, #4]
   1887c:	f897 2020 	ldrb.w	r2, [r7, #32]
   18880:	6879      	ldr	r1, [r7, #4]
   18882:	4618      	mov	r0, r3
   18884:	4b1f      	ldr	r3, [pc, #124]	; (18904 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   18886:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   18888:	e031      	b.n	188ee <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   1888a:	68fb      	ldr	r3, [r7, #12]
   1888c:	685b      	ldr	r3, [r3, #4]
   1888e:	2203      	movs	r2, #3
   18890:	6879      	ldr	r1, [r7, #4]
   18892:	4618      	mov	r0, r3
   18894:	4b1b      	ldr	r3, [pc, #108]	; (18904 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   18896:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   18898:	f897 3020 	ldrb.w	r3, [r7, #32]
   1889c:	2b04      	cmp	r3, #4
   1889e:	dd0b      	ble.n	188b8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   188a0:	68fb      	ldr	r3, [r7, #12]
   188a2:	6858      	ldr	r0, [r3, #4]
   188a4:	f897 3020 	ldrb.w	r3, [r7, #32]
   188a8:	3b03      	subs	r3, #3
   188aa:	461a      	mov	r2, r3
   188ac:	6839      	ldr	r1, [r7, #0]
   188ae:	4b16      	ldr	r3, [pc, #88]	; (18908 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   188b0:	4798      	blx	r3
					asm("nop");
   188b2:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   188b4:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   188b6:	e01a      	b.n	188ee <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   188b8:	68fb      	ldr	r3, [r7, #12]
   188ba:	685b      	ldr	r3, [r3, #4]
   188bc:	2201      	movs	r2, #1
   188be:	6839      	ldr	r1, [r7, #0]
   188c0:	4618      	mov	r0, r3
   188c2:	4b11      	ldr	r3, [pc, #68]	; (18908 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   188c4:	4798      	blx	r3
				asm("nop");
   188c6:	bf00      	nop
			break;
   188c8:	e011      	b.n	188ee <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   188ca:	68fb      	ldr	r3, [r7, #12]
   188cc:	685b      	ldr	r3, [r3, #4]
   188ce:	f897 2020 	ldrb.w	r2, [r7, #32]
   188d2:	6879      	ldr	r1, [r7, #4]
   188d4:	4618      	mov	r0, r3
   188d6:	4b0b      	ldr	r3, [pc, #44]	; (18904 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   188d8:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   188da:	68fb      	ldr	r3, [r7, #12]
   188dc:	6858      	ldr	r0, [r3, #4]
   188de:	f897 3020 	ldrb.w	r3, [r7, #32]
   188e2:	3b03      	subs	r3, #3
   188e4:	461a      	mov	r2, r3
   188e6:	6839      	ldr	r1, [r7, #0]
   188e8:	4b07      	ldr	r3, [pc, #28]	; (18908 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   188ea:	4798      	blx	r3
			break;
   188ec:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   188ee:	68b9      	ldr	r1, [r7, #8]
   188f0:	68f8      	ldr	r0, [r7, #12]
   188f2:	4b06      	ldr	r3, [pc, #24]	; (1890c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   188f4:	4798      	blx	r3
	asm("nop");
   188f6:	bf00      	nop
	
}
   188f8:	bf00      	nop
   188fa:	3718      	adds	r7, #24
   188fc:	46bd      	mov	sp, r7
   188fe:	bd80      	pop	{r7, pc}
   18900:	00018911 	.word	0x00018911
   18904:	000153f9 	.word	0x000153f9
   18908:	0001543d 	.word	0x0001543d
   1890c:	00018959 	.word	0x00018959

00018910 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   18910:	b580      	push	{r7, lr}
   18912:	b082      	sub	sp, #8
   18914:	af00      	add	r7, sp, #0
   18916:	6078      	str	r0, [r7, #4]
   18918:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1891a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   1891e:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   18920:	683b      	ldr	r3, [r7, #0]
   18922:	b2db      	uxtb	r3, r3
   18924:	2100      	movs	r1, #0
   18926:	4618      	mov	r0, r3
   18928:	4b08      	ldr	r3, [pc, #32]	; (1894c <_ZN6LT_SPI4OpenEm+0x3c>)
   1892a:	4798      	blx	r3
	 delay_us(10);
   1892c:	200a      	movs	r0, #10
   1892e:	4b08      	ldr	r3, [pc, #32]	; (18950 <_ZN6LT_SPI4OpenEm+0x40>)
   18930:	4798      	blx	r3
	spiTemp->Enable();
   18932:	687b      	ldr	r3, [r7, #4]
   18934:	685b      	ldr	r3, [r3, #4]
   18936:	4618      	mov	r0, r3
   18938:	4b06      	ldr	r3, [pc, #24]	; (18954 <_ZN6LT_SPI4OpenEm+0x44>)
   1893a:	4798      	blx	r3
	 delay_us(10);
   1893c:	200a      	movs	r0, #10
   1893e:	4b04      	ldr	r3, [pc, #16]	; (18950 <_ZN6LT_SPI4OpenEm+0x40>)
   18940:	4798      	blx	r3
 }
   18942:	bf00      	nop
   18944:	3708      	adds	r7, #8
   18946:	46bd      	mov	sp, r7
   18948:	bd80      	pop	{r7, pc}
   1894a:	bf00      	nop
   1894c:	0001875d 	.word	0x0001875d
   18950:	00006075 	.word	0x00006075
   18954:	000153bd 	.word	0x000153bd

00018958 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   18958:	b580      	push	{r7, lr}
   1895a:	b082      	sub	sp, #8
   1895c:	af00      	add	r7, sp, #0
   1895e:	6078      	str	r0, [r7, #4]
   18960:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   18962:	200a      	movs	r0, #10
   18964:	4b0b      	ldr	r3, [pc, #44]	; (18994 <_ZN6LT_SPI5CloseEm+0x3c>)
   18966:	4798      	blx	r3
	 spiTemp->Disable();
   18968:	687b      	ldr	r3, [r7, #4]
   1896a:	685b      	ldr	r3, [r3, #4]
   1896c:	4618      	mov	r0, r3
   1896e:	4b0a      	ldr	r3, [pc, #40]	; (18998 <_ZN6LT_SPI5CloseEm+0x40>)
   18970:	4798      	blx	r3
	delay_us(10);
   18972:	200a      	movs	r0, #10
   18974:	4b07      	ldr	r3, [pc, #28]	; (18994 <_ZN6LT_SPI5CloseEm+0x3c>)
   18976:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   18978:	683b      	ldr	r3, [r7, #0]
   1897a:	b2db      	uxtb	r3, r3
   1897c:	2101      	movs	r1, #1
   1897e:	4618      	mov	r0, r3
   18980:	4b06      	ldr	r3, [pc, #24]	; (1899c <_ZN6LT_SPI5CloseEm+0x44>)
   18982:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   18984:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   18988:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   1898a:	bf00      	nop
   1898c:	3708      	adds	r7, #8
   1898e:	46bd      	mov	sp, r7
   18990:	bd80      	pop	{r7, pc}
   18992:	bf00      	nop
   18994:	00006075 	.word	0x00006075
   18998:	00015481 	.word	0x00015481
   1899c:	0001875d 	.word	0x0001875d

000189a0 <_Z41__static_initialization_and_destruction_0ii>:
   189a0:	b580      	push	{r7, lr}
   189a2:	b082      	sub	sp, #8
   189a4:	af00      	add	r7, sp, #0
   189a6:	6078      	str	r0, [r7, #4]
   189a8:	6039      	str	r1, [r7, #0]
   189aa:	687b      	ldr	r3, [r7, #4]
   189ac:	2b01      	cmp	r3, #1
   189ae:	d10c      	bne.n	189ca <_Z41__static_initialization_and_destruction_0ii+0x2a>
   189b0:	683b      	ldr	r3, [r7, #0]
   189b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   189b6:	4293      	cmp	r3, r2
   189b8:	d107      	bne.n	189ca <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   189ba:	4806      	ldr	r0, [pc, #24]	; (189d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   189bc:	4b06      	ldr	r3, [pc, #24]	; (189d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   189be:	4798      	blx	r3
   189c0:	4a06      	ldr	r2, [pc, #24]	; (189dc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   189c2:	4907      	ldr	r1, [pc, #28]	; (189e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   189c4:	4803      	ldr	r0, [pc, #12]	; (189d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   189c6:	4b07      	ldr	r3, [pc, #28]	; (189e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   189c8:	4798      	blx	r3
   189ca:	bf00      	nop
   189cc:	3708      	adds	r7, #8
   189ce:	46bd      	mov	sp, r7
   189d0:	bd80      	pop	{r7, pc}
   189d2:	bf00      	nop
   189d4:	2000a358 	.word	0x2000a358
   189d8:	0001531d 	.word	0x0001531d
   189dc:	20000000 	.word	0x20000000
   189e0:	0001533d 	.word	0x0001533d
   189e4:	00018bf5 	.word	0x00018bf5

000189e8 <_GLOBAL__sub_I_ptrLTSPIClass>:
   189e8:	b580      	push	{r7, lr}
   189ea:	af00      	add	r7, sp, #0
   189ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   189f0:	2001      	movs	r0, #1
   189f2:	4b01      	ldr	r3, [pc, #4]	; (189f8 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   189f4:	4798      	blx	r3
   189f6:	bd80      	pop	{r7, pc}
   189f8:	000189a1 	.word	0x000189a1

000189fc <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
   189fc:	4b02      	ldr	r3, [pc, #8]	; (18a08 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
   189fe:	681a      	ldr	r2, [r3, #0]
   18a00:	6813      	ldr	r3, [r2, #0]
   18a02:	3301      	adds	r3, #1
   18a04:	6013      	str	r3, [r2, #0]
   18a06:	4770      	bx	lr
   18a08:	2000a374 	.word	0x2000a374

00018a0c <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
   18a0c:	4b02      	ldr	r3, [pc, #8]	; (18a18 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
   18a0e:	681b      	ldr	r3, [r3, #0]
   18a10:	2200      	movs	r2, #0
   18a12:	711a      	strb	r2, [r3, #4]
   18a14:	4770      	bx	lr
   18a16:	bf00      	nop
   18a18:	2000a374 	.word	0x2000a374

00018a1c <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
   18a1c:	b538      	push	{r3, r4, r5, lr}
   18a1e:	4604      	mov	r4, r0
{
	ticks=0;
   18a20:	2300      	movs	r3, #0
   18a22:	6003      	str	r3, [r0, #0]
	interfaceTimer.Stop();
   18a24:	4d04      	ldr	r5, [pc, #16]	; (18a38 <_ZN16Maintenance_ToolD1Ev+0x1c>)
   18a26:	4628      	mov	r0, r5
   18a28:	4b04      	ldr	r3, [pc, #16]	; (18a3c <_ZN16Maintenance_ToolD1Ev+0x20>)
   18a2a:	4798      	blx	r3
	interfaceTimer.Remove_task();
   18a2c:	4628      	mov	r0, r5
   18a2e:	4b04      	ldr	r3, [pc, #16]	; (18a40 <_ZN16Maintenance_ToolD1Ev+0x24>)
   18a30:	4798      	blx	r3
	
} //~Maintenance_Tool
   18a32:	4620      	mov	r0, r4
   18a34:	bd38      	pop	{r3, r4, r5, pc}
   18a36:	bf00      	nop
   18a38:	2000a330 	.word	0x2000a330
   18a3c:	00017cfd 	.word	0x00017cfd
   18a40:	00017e15 	.word	0x00017e15

00018a44 <_ZN16Maintenance_ToolC1Ev>:
	ptrMaintenanceTool=this;
   18a44:	4a04      	ldr	r2, [pc, #16]	; (18a58 <_ZN16Maintenance_ToolC1Ev+0x14>)
   18a46:	6010      	str	r0, [r2, #0]
	maintenanceIsConnected = false;
   18a48:	2200      	movs	r2, #0
   18a4a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	nextMaintenanceSyncTime = 0;
   18a4e:	6482      	str	r2, [r0, #72]	; 0x48
	nextMaintenanceUsageTimerSyncTime = 0;
   18a50:	64c2      	str	r2, [r0, #76]	; 0x4c
	ticks=0;
   18a52:	6002      	str	r2, [r0, #0]
} //Maintenance_Tool
   18a54:	4770      	bx	lr
   18a56:	bf00      	nop
   18a58:	2000a374 	.word	0x2000a374

00018a5c <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
   18a5c:	b510      	push	{r4, lr}
		maintenanceIsConnected = isConnected;
   18a5e:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
		if (isConnected)
   18a62:	b919      	cbnz	r1, 18a6c <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
   18a64:	4808      	ldr	r0, [pc, #32]	; (18a88 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   18a66:	4b09      	ldr	r3, [pc, #36]	; (18a8c <_ZN16Maintenance_Tool12setConnectedEb+0x30>)
   18a68:	4798      	blx	r3
   18a6a:	bd10      	pop	{r4, pc}
			interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
   18a6c:	4c06      	ldr	r4, [pc, #24]	; (18a88 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
   18a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18a72:	4907      	ldr	r1, [pc, #28]	; (18a90 <_ZN16Maintenance_Tool12setConnectedEb+0x34>)
   18a74:	4620      	mov	r0, r4
   18a76:	4b07      	ldr	r3, [pc, #28]	; (18a94 <_ZN16Maintenance_Tool12setConnectedEb+0x38>)
   18a78:	4798      	blx	r3
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
   18a7a:	f64e 2260 	movw	r2, #60000	; 0xea60
   18a7e:	4906      	ldr	r1, [pc, #24]	; (18a98 <_ZN16Maintenance_Tool12setConnectedEb+0x3c>)
   18a80:	4620      	mov	r0, r4
   18a82:	4b06      	ldr	r3, [pc, #24]	; (18a9c <_ZN16Maintenance_Tool12setConnectedEb+0x40>)
   18a84:	4798      	blx	r3
   18a86:	bd10      	pop	{r4, pc}
   18a88:	2000a330 	.word	0x2000a330
   18a8c:	00017cfd 	.word	0x00017cfd
   18a90:	000189fd 	.word	0x000189fd
   18a94:	00017d8d 	.word	0x00017d8d
   18a98:	00018a0d 	.word	0x00018a0d
   18a9c:	00017ddd 	.word	0x00017ddd

00018aa0 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
   18aa0:	b510      	push	{r4, lr}
   18aa2:	4604      	mov	r4, r0
	result=false;
   18aa4:	2300      	movs	r3, #0
   18aa6:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	magic=0;
   18aaa:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
	if (gotAccess==true)
   18aae:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
   18ab2:	b12b      	cbz	r3, 18ac0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
   18ab4:	2301      	movs	r3, #1
   18ab6:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	return	result;
   18aba:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
}
   18abe:	bd10      	pop	{r4, pc}
		if (usb.connected)
   18ac0:	4b15      	ldr	r3, [pc, #84]	; (18b18 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   18ac2:	7c1b      	ldrb	r3, [r3, #16]
   18ac4:	2b00      	cmp	r3, #0
   18ac6:	d0f8      	beq.n	18aba <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
			if (usb.rxReady)
   18ac8:	4b13      	ldr	r3, [pc, #76]	; (18b18 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   18aca:	7d5b      	ldrb	r3, [r3, #21]
   18acc:	b18b      	cbz	r3, 18af2 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x52>
   18ace:	1d43      	adds	r3, r0, #5
   18ad0:	3009      	adds	r0, #9
   18ad2:	2200      	movs	r2, #0
					magic|= localBuffer[i];
   18ad4:	f813 1b01 	ldrb.w	r1, [r3], #1
   18ad8:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
				for (int i = 0; i < 4; i++)
   18adc:	4283      	cmp	r3, r0
   18ade:	d1f9      	bne.n	18ad4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x34>
   18ae0:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
				xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
   18ae4:	4b0d      	ldr	r3, [pc, #52]	; (18b1c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
   18ae6:	ea82 0103 	eor.w	r1, r2, r3
   18aea:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
				if (xorResult==0)
   18aee:	429a      	cmp	r2, r3
   18af0:	d005      	beq.n	18afe <_ZN16Maintenance_Tool14IsAppConnectedEv+0x5e>
			usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
   18af2:	2240      	movs	r2, #64	; 0x40
   18af4:	1d61      	adds	r1, r4, #5
   18af6:	4808      	ldr	r0, [pc, #32]	; (18b18 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
   18af8:	4b09      	ldr	r3, [pc, #36]	; (18b20 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
   18afa:	4798      	blx	r3
   18afc:	e7dd      	b.n	18aba <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
					gotAccess=true;
   18afe:	2101      	movs	r1, #1
   18b00:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
					result=true;
   18b04:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
					is_MTPC_Beaming=true;
   18b08:	7121      	strb	r1, [r4, #4]
					setConnected(true);
   18b0a:	4620      	mov	r0, r4
   18b0c:	4b05      	ldr	r3, [pc, #20]	; (18b24 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
   18b0e:	4798      	blx	r3
					return	result;
   18b10:	f894 00f8 	ldrb.w	r0, [r4, #248]	; 0xf8
   18b14:	bd10      	pop	{r4, pc}
   18b16:	bf00      	nop
   18b18:	2000a258 	.word	0x2000a258
   18b1c:	61626364 	.word	0x61626364
   18b20:	0001744d 	.word	0x0001744d
   18b24:	00018a5d 	.word	0x00018a5d

00018b28 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	{
		memcpy(buffer+4*ii, (uint8_t*)(add+4*ii), 4);
	}

}
   18b28:	b510      	push	{r4, lr}
   18b2a:	4c05      	ldr	r4, [pc, #20]	; (18b40 <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
   18b2c:	4620      	mov	r0, r4
   18b2e:	4b05      	ldr	r3, [pc, #20]	; (18b44 <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
   18b30:	4798      	blx	r3
   18b32:	4a05      	ldr	r2, [pc, #20]	; (18b48 <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
   18b34:	4905      	ldr	r1, [pc, #20]	; (18b4c <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
   18b36:	4620      	mov	r0, r4
   18b38:	4b05      	ldr	r3, [pc, #20]	; (18b50 <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
   18b3a:	4798      	blx	r3
   18b3c:	bd10      	pop	{r4, pc}
   18b3e:	bf00      	nop
   18b40:	2000a378 	.word	0x2000a378
   18b44:	00018a45 	.word	0x00018a45
   18b48:	20000000 	.word	0x20000000
   18b4c:	00018a1d 	.word	0x00018a1d
   18b50:	00018bf5 	.word	0x00018bf5

00018b54 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   18b54:	b580      	push	{r7, lr}
   18b56:	b084      	sub	sp, #16
   18b58:	af00      	add	r7, sp, #0
   18b5a:	60f8      	str	r0, [r7, #12]
   18b5c:	60b9      	str	r1, [r7, #8]
   18b5e:	4613      	mov	r3, r2
   18b60:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   18b62:	68fb      	ldr	r3, [r7, #12]
   18b64:	2b00      	cmp	r3, #0
   18b66:	d004      	beq.n	18b72 <io_write+0x1e>
   18b68:	68bb      	ldr	r3, [r7, #8]
   18b6a:	2b00      	cmp	r3, #0
   18b6c:	d001      	beq.n	18b72 <io_write+0x1e>
   18b6e:	2301      	movs	r3, #1
   18b70:	e000      	b.n	18b74 <io_write+0x20>
   18b72:	2300      	movs	r3, #0
   18b74:	f003 0301 	and.w	r3, r3, #1
   18b78:	b2db      	uxtb	r3, r3
   18b7a:	2234      	movs	r2, #52	; 0x34
   18b7c:	4907      	ldr	r1, [pc, #28]	; (18b9c <io_write+0x48>)
   18b7e:	4618      	mov	r0, r3
   18b80:	4b07      	ldr	r3, [pc, #28]	; (18ba0 <io_write+0x4c>)
   18b82:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   18b84:	68fb      	ldr	r3, [r7, #12]
   18b86:	681b      	ldr	r3, [r3, #0]
   18b88:	88fa      	ldrh	r2, [r7, #6]
   18b8a:	68b9      	ldr	r1, [r7, #8]
   18b8c:	68f8      	ldr	r0, [r7, #12]
   18b8e:	4798      	blx	r3
   18b90:	4603      	mov	r3, r0
}
   18b92:	4618      	mov	r0, r3
   18b94:	3710      	adds	r7, #16
   18b96:	46bd      	mov	sp, r7
   18b98:	bd80      	pop	{r7, pc}
   18b9a:	bf00      	nop
   18b9c:	00021280 	.word	0x00021280
   18ba0:	0000799d 	.word	0x0000799d

00018ba4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   18ba4:	b580      	push	{r7, lr}
   18ba6:	b084      	sub	sp, #16
   18ba8:	af00      	add	r7, sp, #0
   18baa:	60f8      	str	r0, [r7, #12]
   18bac:	60b9      	str	r1, [r7, #8]
   18bae:	4613      	mov	r3, r2
   18bb0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   18bb2:	68fb      	ldr	r3, [r7, #12]
   18bb4:	2b00      	cmp	r3, #0
   18bb6:	d004      	beq.n	18bc2 <io_read+0x1e>
   18bb8:	68bb      	ldr	r3, [r7, #8]
   18bba:	2b00      	cmp	r3, #0
   18bbc:	d001      	beq.n	18bc2 <io_read+0x1e>
   18bbe:	2301      	movs	r3, #1
   18bc0:	e000      	b.n	18bc4 <io_read+0x20>
   18bc2:	2300      	movs	r3, #0
   18bc4:	f003 0301 	and.w	r3, r3, #1
   18bc8:	b2db      	uxtb	r3, r3
   18bca:	223d      	movs	r2, #61	; 0x3d
   18bcc:	4907      	ldr	r1, [pc, #28]	; (18bec <io_read+0x48>)
   18bce:	4618      	mov	r0, r3
   18bd0:	4b07      	ldr	r3, [pc, #28]	; (18bf0 <io_read+0x4c>)
   18bd2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   18bd4:	68fb      	ldr	r3, [r7, #12]
   18bd6:	685b      	ldr	r3, [r3, #4]
   18bd8:	88fa      	ldrh	r2, [r7, #6]
   18bda:	68b9      	ldr	r1, [r7, #8]
   18bdc:	68f8      	ldr	r0, [r7, #12]
   18bde:	4798      	blx	r3
   18be0:	4603      	mov	r3, r0
}
   18be2:	4618      	mov	r0, r3
   18be4:	3710      	adds	r7, #16
   18be6:	46bd      	mov	sp, r7
   18be8:	bd80      	pop	{r7, pc}
   18bea:	bf00      	nop
   18bec:	00021280 	.word	0x00021280
   18bf0:	0000799d 	.word	0x0000799d

00018bf4 <__aeabi_atexit>:
   18bf4:	460b      	mov	r3, r1
   18bf6:	4601      	mov	r1, r0
   18bf8:	4618      	mov	r0, r3
   18bfa:	f002 ba43 	b.w	1b084 <__cxa_atexit>
   18bfe:	bf00      	nop

00018c00 <_ZdlPvj>:
   18c00:	f7fb b9e0 	b.w	13fc4 <_ZdlPv>
   18c04:	0000      	movs	r0, r0
	...

00018c08 <floor>:
   18c08:	f3c1 520a 	ubfx	r2, r1, #20, #11
   18c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18c10:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   18c14:	2e13      	cmp	r6, #19
   18c16:	460b      	mov	r3, r1
   18c18:	460d      	mov	r5, r1
   18c1a:	4604      	mov	r4, r0
   18c1c:	4688      	mov	r8, r1
   18c1e:	4607      	mov	r7, r0
   18c20:	dc1d      	bgt.n	18c5e <floor+0x56>
   18c22:	2e00      	cmp	r6, #0
   18c24:	db40      	blt.n	18ca8 <floor+0xa0>
   18c26:	4a3c      	ldr	r2, [pc, #240]	; (18d18 <floor+0x110>)
   18c28:	fa42 f906 	asr.w	r9, r2, r6
   18c2c:	ea01 0209 	and.w	r2, r1, r9
   18c30:	4302      	orrs	r2, r0
   18c32:	4686      	mov	lr, r0
   18c34:	d018      	beq.n	18c68 <floor+0x60>
   18c36:	a336      	add	r3, pc, #216	; (adr r3, 18d10 <floor+0x108>)
   18c38:	e9d3 2300 	ldrd	r2, r3, [r3]
   18c3c:	f001 f91c 	bl	19e78 <__adddf3>
   18c40:	2200      	movs	r2, #0
   18c42:	2300      	movs	r3, #0
   18c44:	f001 fd5a 	bl	1a6fc <__aeabi_dcmpgt>
   18c48:	b120      	cbz	r0, 18c54 <floor+0x4c>
   18c4a:	2d00      	cmp	r5, #0
   18c4c:	db42      	blt.n	18cd4 <floor+0xcc>
   18c4e:	ea28 0509 	bic.w	r5, r8, r9
   18c52:	2700      	movs	r7, #0
   18c54:	463c      	mov	r4, r7
   18c56:	4629      	mov	r1, r5
   18c58:	4620      	mov	r0, r4
   18c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18c5e:	2e33      	cmp	r6, #51	; 0x33
   18c60:	dd06      	ble.n	18c70 <floor+0x68>
   18c62:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   18c66:	d02f      	beq.n	18cc8 <floor+0xc0>
   18c68:	4619      	mov	r1, r3
   18c6a:	4620      	mov	r0, r4
   18c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18c70:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   18c74:	f04f 39ff 	mov.w	r9, #4294967295
   18c78:	fa29 f902 	lsr.w	r9, r9, r2
   18c7c:	ea10 0f09 	tst.w	r0, r9
   18c80:	d0f2      	beq.n	18c68 <floor+0x60>
   18c82:	a323      	add	r3, pc, #140	; (adr r3, 18d10 <floor+0x108>)
   18c84:	e9d3 2300 	ldrd	r2, r3, [r3]
   18c88:	f001 f8f6 	bl	19e78 <__adddf3>
   18c8c:	2200      	movs	r2, #0
   18c8e:	2300      	movs	r3, #0
   18c90:	f001 fd34 	bl	1a6fc <__aeabi_dcmpgt>
   18c94:	2800      	cmp	r0, #0
   18c96:	d0dd      	beq.n	18c54 <floor+0x4c>
   18c98:	2d00      	cmp	r5, #0
   18c9a:	db21      	blt.n	18ce0 <floor+0xd8>
   18c9c:	4645      	mov	r5, r8
   18c9e:	ea27 0709 	bic.w	r7, r7, r9
   18ca2:	463c      	mov	r4, r7
   18ca4:	4629      	mov	r1, r5
   18ca6:	e7d7      	b.n	18c58 <floor+0x50>
   18ca8:	a319      	add	r3, pc, #100	; (adr r3, 18d10 <floor+0x108>)
   18caa:	e9d3 2300 	ldrd	r2, r3, [r3]
   18cae:	f001 f8e3 	bl	19e78 <__adddf3>
   18cb2:	2200      	movs	r2, #0
   18cb4:	2300      	movs	r3, #0
   18cb6:	f001 fd21 	bl	1a6fc <__aeabi_dcmpgt>
   18cba:	2800      	cmp	r0, #0
   18cbc:	d0ca      	beq.n	18c54 <floor+0x4c>
   18cbe:	2d00      	cmp	r5, #0
   18cc0:	db19      	blt.n	18cf6 <floor+0xee>
   18cc2:	2700      	movs	r7, #0
   18cc4:	463d      	mov	r5, r7
   18cc6:	e7c5      	b.n	18c54 <floor+0x4c>
   18cc8:	4602      	mov	r2, r0
   18cca:	460b      	mov	r3, r1
   18ccc:	f001 f8d4 	bl	19e78 <__adddf3>
   18cd0:	4604      	mov	r4, r0
   18cd2:	e7ca      	b.n	18c6a <floor+0x62>
   18cd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   18cd8:	fa43 f606 	asr.w	r6, r3, r6
   18cdc:	44b0      	add	r8, r6
   18cde:	e7b6      	b.n	18c4e <floor+0x46>
   18ce0:	2e14      	cmp	r6, #20
   18ce2:	d010      	beq.n	18d06 <floor+0xfe>
   18ce4:	2301      	movs	r3, #1
   18ce6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   18cea:	fa03 f606 	lsl.w	r6, r3, r6
   18cee:	1937      	adds	r7, r6, r4
   18cf0:	bf28      	it	cs
   18cf2:	4498      	addcs	r8, r3
   18cf4:	e7d2      	b.n	18c9c <floor+0x94>
   18cf6:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   18cfa:	4b08      	ldr	r3, [pc, #32]	; (18d1c <floor+0x114>)
   18cfc:	4322      	orrs	r2, r4
   18cfe:	bf18      	it	ne
   18d00:	461d      	movne	r5, r3
   18d02:	2700      	movs	r7, #0
   18d04:	e7a6      	b.n	18c54 <floor+0x4c>
   18d06:	f105 0801 	add.w	r8, r5, #1
   18d0a:	e7c7      	b.n	18c9c <floor+0x94>
   18d0c:	f3af 8000 	nop.w
   18d10:	8800759c 	.word	0x8800759c
   18d14:	7e37e43c 	.word	0x7e37e43c
   18d18:	000fffff 	.word	0x000fffff
   18d1c:	bff00000 	.word	0xbff00000

00018d20 <pow>:
   18d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d24:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 19018 <pow+0x2f8>
   18d28:	b08d      	sub	sp, #52	; 0x34
   18d2a:	4606      	mov	r6, r0
   18d2c:	460f      	mov	r7, r1
   18d2e:	4614      	mov	r4, r2
   18d30:	461d      	mov	r5, r3
   18d32:	f000 f975 	bl	19020 <__ieee754_pow>
   18d36:	f999 8000 	ldrsb.w	r8, [r9]
   18d3a:	f1b8 3fff 	cmp.w	r8, #4294967295
   18d3e:	e9cd 0100 	strd	r0, r1, [sp]
   18d42:	d036      	beq.n	18db2 <pow+0x92>
   18d44:	4622      	mov	r2, r4
   18d46:	462b      	mov	r3, r5
   18d48:	4620      	mov	r0, r4
   18d4a:	4629      	mov	r1, r5
   18d4c:	f001 fce0 	bl	1a710 <__aeabi_dcmpun>
   18d50:	4683      	mov	fp, r0
   18d52:	bb70      	cbnz	r0, 18db2 <pow+0x92>
   18d54:	4632      	mov	r2, r6
   18d56:	463b      	mov	r3, r7
   18d58:	4630      	mov	r0, r6
   18d5a:	4639      	mov	r1, r7
   18d5c:	f001 fcd8 	bl	1a710 <__aeabi_dcmpun>
   18d60:	2200      	movs	r2, #0
   18d62:	4682      	mov	sl, r0
   18d64:	2300      	movs	r3, #0
   18d66:	2800      	cmp	r0, #0
   18d68:	f040 80a0 	bne.w	18eac <pow+0x18c>
   18d6c:	4630      	mov	r0, r6
   18d6e:	4639      	mov	r1, r7
   18d70:	f001 fc9c 	bl	1a6ac <__aeabi_dcmpeq>
   18d74:	b310      	cbz	r0, 18dbc <pow+0x9c>
   18d76:	2200      	movs	r2, #0
   18d78:	2300      	movs	r3, #0
   18d7a:	4620      	mov	r0, r4
   18d7c:	4629      	mov	r1, r5
   18d7e:	f001 fc95 	bl	1a6ac <__aeabi_dcmpeq>
   18d82:	4683      	mov	fp, r0
   18d84:	2800      	cmp	r0, #0
   18d86:	d06a      	beq.n	18e5e <pow+0x13e>
   18d88:	2201      	movs	r2, #1
   18d8a:	4b9c      	ldr	r3, [pc, #624]	; (18ffc <pow+0x2dc>)
   18d8c:	9202      	str	r2, [sp, #8]
   18d8e:	2100      	movs	r1, #0
   18d90:	2200      	movs	r2, #0
   18d92:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   18d96:	e9cd 6704 	strd	r6, r7, [sp, #16]
   18d9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   18d9e:	e9cd 1208 	strd	r1, r2, [sp, #32]
   18da2:	9303      	str	r3, [sp, #12]
   18da4:	f1b8 0f00 	cmp.w	r8, #0
   18da8:	d045      	beq.n	18e36 <pow+0x116>
   18daa:	4c95      	ldr	r4, [pc, #596]	; (19000 <pow+0x2e0>)
   18dac:	2300      	movs	r3, #0
   18dae:	e9cd 3400 	strd	r3, r4, [sp]
   18db2:	e9dd 0100 	ldrd	r0, r1, [sp]
   18db6:	b00d      	add	sp, #52	; 0x34
   18db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dbc:	e9dd 0100 	ldrd	r0, r1, [sp]
   18dc0:	f000 ff34 	bl	19c2c <finite>
   18dc4:	4680      	mov	r8, r0
   18dc6:	2800      	cmp	r0, #0
   18dc8:	f000 808b 	beq.w	18ee2 <pow+0x1c2>
   18dcc:	f04f 0a00 	mov.w	sl, #0
   18dd0:	f04f 0b00 	mov.w	fp, #0
   18dd4:	4652      	mov	r2, sl
   18dd6:	465b      	mov	r3, fp
   18dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
   18ddc:	f001 fc66 	bl	1a6ac <__aeabi_dcmpeq>
   18de0:	2800      	cmp	r0, #0
   18de2:	d0e6      	beq.n	18db2 <pow+0x92>
   18de4:	4630      	mov	r0, r6
   18de6:	4639      	mov	r1, r7
   18de8:	f000 ff20 	bl	19c2c <finite>
   18dec:	2800      	cmp	r0, #0
   18dee:	d0e0      	beq.n	18db2 <pow+0x92>
   18df0:	4620      	mov	r0, r4
   18df2:	4629      	mov	r1, r5
   18df4:	f000 ff1a 	bl	19c2c <finite>
   18df8:	2800      	cmp	r0, #0
   18dfa:	d0da      	beq.n	18db2 <pow+0x92>
   18dfc:	f999 3000 	ldrsb.w	r3, [r9]
   18e00:	4a7e      	ldr	r2, [pc, #504]	; (18ffc <pow+0x2dc>)
   18e02:	9203      	str	r2, [sp, #12]
   18e04:	2104      	movs	r1, #4
   18e06:	2200      	movs	r2, #0
   18e08:	2b02      	cmp	r3, #2
   18e0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
   18e0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
   18e12:	e9cd ab08 	strd	sl, fp, [sp, #32]
   18e16:	9102      	str	r1, [sp, #8]
   18e18:	920a      	str	r2, [sp, #40]	; 0x28
   18e1a:	d003      	beq.n	18e24 <pow+0x104>
   18e1c:	a802      	add	r0, sp, #8
   18e1e:	f000 ff0b 	bl	19c38 <matherr>
   18e22:	b968      	cbnz	r0, 18e40 <pow+0x120>
   18e24:	f002 f93a 	bl	1b09c <__errno>
   18e28:	2322      	movs	r3, #34	; 0x22
   18e2a:	6003      	str	r3, [r0, #0]
   18e2c:	e008      	b.n	18e40 <pow+0x120>
   18e2e:	2300      	movs	r3, #0
   18e30:	2400      	movs	r4, #0
   18e32:	e9cd 3408 	strd	r3, r4, [sp, #32]
   18e36:	a802      	add	r0, sp, #8
   18e38:	f000 fefe 	bl	19c38 <matherr>
   18e3c:	2800      	cmp	r0, #0
   18e3e:	d030      	beq.n	18ea2 <pow+0x182>
   18e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18e42:	b11b      	cbz	r3, 18e4c <pow+0x12c>
   18e44:	f002 f92a 	bl	1b09c <__errno>
   18e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18e4a:	6003      	str	r3, [r0, #0]
   18e4c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   18e50:	e9cd 3400 	strd	r3, r4, [sp]
   18e54:	e9dd 0100 	ldrd	r0, r1, [sp]
   18e58:	b00d      	add	sp, #52	; 0x34
   18e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e5e:	4620      	mov	r0, r4
   18e60:	4629      	mov	r1, r5
   18e62:	f000 fee3 	bl	19c2c <finite>
   18e66:	2800      	cmp	r0, #0
   18e68:	d0a3      	beq.n	18db2 <pow+0x92>
   18e6a:	2200      	movs	r2, #0
   18e6c:	2300      	movs	r3, #0
   18e6e:	4620      	mov	r0, r4
   18e70:	4629      	mov	r1, r5
   18e72:	f001 fc25 	bl	1a6c0 <__aeabi_dcmplt>
   18e76:	2800      	cmp	r0, #0
   18e78:	d09b      	beq.n	18db2 <pow+0x92>
   18e7a:	f999 3000 	ldrsb.w	r3, [r9]
   18e7e:	4a5f      	ldr	r2, [pc, #380]	; (18ffc <pow+0x2dc>)
   18e80:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   18e84:	2101      	movs	r1, #1
   18e86:	e9cd 6704 	strd	r6, r7, [sp, #16]
   18e8a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   18e8e:	9102      	str	r1, [sp, #8]
   18e90:	9203      	str	r2, [sp, #12]
   18e92:	2b00      	cmp	r3, #0
   18e94:	d0cb      	beq.n	18e2e <pow+0x10e>
   18e96:	495b      	ldr	r1, [pc, #364]	; (19004 <pow+0x2e4>)
   18e98:	2000      	movs	r0, #0
   18e9a:	2b02      	cmp	r3, #2
   18e9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   18ea0:	d1c9      	bne.n	18e36 <pow+0x116>
   18ea2:	f002 f8fb 	bl	1b09c <__errno>
   18ea6:	2321      	movs	r3, #33	; 0x21
   18ea8:	6003      	str	r3, [r0, #0]
   18eaa:	e7c9      	b.n	18e40 <pow+0x120>
   18eac:	4620      	mov	r0, r4
   18eae:	4629      	mov	r1, r5
   18eb0:	f001 fbfc 	bl	1a6ac <__aeabi_dcmpeq>
   18eb4:	2800      	cmp	r0, #0
   18eb6:	f43f af7c 	beq.w	18db2 <pow+0x92>
   18eba:	4b51      	ldr	r3, [pc, #324]	; (19000 <pow+0x2e0>)
   18ebc:	494f      	ldr	r1, [pc, #316]	; (18ffc <pow+0x2dc>)
   18ebe:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   18ec2:	2001      	movs	r0, #1
   18ec4:	2200      	movs	r2, #0
   18ec6:	f1b8 0f02 	cmp.w	r8, #2
   18eca:	e9cd 6704 	strd	r6, r7, [sp, #16]
   18ece:	e9cd 4506 	strd	r4, r5, [sp, #24]
   18ed2:	9002      	str	r0, [sp, #8]
   18ed4:	9103      	str	r1, [sp, #12]
   18ed6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   18eda:	d1ac      	bne.n	18e36 <pow+0x116>
   18edc:	e9cd 2300 	strd	r2, r3, [sp]
   18ee0:	e767      	b.n	18db2 <pow+0x92>
   18ee2:	4630      	mov	r0, r6
   18ee4:	4639      	mov	r1, r7
   18ee6:	f000 fea1 	bl	19c2c <finite>
   18eea:	2800      	cmp	r0, #0
   18eec:	f43f af6e 	beq.w	18dcc <pow+0xac>
   18ef0:	4620      	mov	r0, r4
   18ef2:	4629      	mov	r1, r5
   18ef4:	f000 fe9a 	bl	19c2c <finite>
   18ef8:	2800      	cmp	r0, #0
   18efa:	f43f af67 	beq.w	18dcc <pow+0xac>
   18efe:	e9dd 2300 	ldrd	r2, r3, [sp]
   18f02:	4610      	mov	r0, r2
   18f04:	4619      	mov	r1, r3
   18f06:	f001 fc03 	bl	1a710 <__aeabi_dcmpun>
   18f0a:	2800      	cmp	r0, #0
   18f0c:	d158      	bne.n	18fc0 <pow+0x2a0>
   18f0e:	2303      	movs	r3, #3
   18f10:	f999 8000 	ldrsb.w	r8, [r9]
   18f14:	9302      	str	r3, [sp, #8]
   18f16:	4b39      	ldr	r3, [pc, #228]	; (18ffc <pow+0x2dc>)
   18f18:	900a      	str	r0, [sp, #40]	; 0x28
   18f1a:	9303      	str	r3, [sp, #12]
   18f1c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   18f20:	e9cd 4506 	strd	r4, r5, [sp, #24]
   18f24:	2200      	movs	r2, #0
   18f26:	2300      	movs	r3, #0
   18f28:	4630      	mov	r0, r6
   18f2a:	4639      	mov	r1, r7
   18f2c:	f1b8 0f00 	cmp.w	r8, #0
   18f30:	d126      	bne.n	18f80 <pow+0x260>
   18f32:	4f35      	ldr	r7, [pc, #212]	; (19008 <pow+0x2e8>)
   18f34:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   18f38:	e9cd 6708 	strd	r6, r7, [sp, #32]
   18f3c:	f001 fbc0 	bl	1a6c0 <__aeabi_dcmplt>
   18f40:	2800      	cmp	r0, #0
   18f42:	f43f af6b 	beq.w	18e1c <pow+0xfc>
   18f46:	2200      	movs	r2, #0
   18f48:	4b30      	ldr	r3, [pc, #192]	; (1900c <pow+0x2ec>)
   18f4a:	4620      	mov	r0, r4
   18f4c:	4629      	mov	r1, r5
   18f4e:	f001 f945 	bl	1a1dc <__aeabi_dmul>
   18f52:	4604      	mov	r4, r0
   18f54:	460d      	mov	r5, r1
   18f56:	f000 fe77 	bl	19c48 <rint>
   18f5a:	4602      	mov	r2, r0
   18f5c:	460b      	mov	r3, r1
   18f5e:	4620      	mov	r0, r4
   18f60:	4629      	mov	r1, r5
   18f62:	f001 fba3 	bl	1a6ac <__aeabi_dcmpeq>
   18f66:	bb40      	cbnz	r0, 18fba <pow+0x29a>
   18f68:	4b29      	ldr	r3, [pc, #164]	; (19010 <pow+0x2f0>)
   18f6a:	f999 8000 	ldrsb.w	r8, [r9]
   18f6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   18f72:	e9cd 2308 	strd	r2, r3, [sp, #32]
   18f76:	f1b8 0f02 	cmp.w	r8, #2
   18f7a:	f47f af4f 	bne.w	18e1c <pow+0xfc>
   18f7e:	e751      	b.n	18e24 <pow+0x104>
   18f80:	4f24      	ldr	r7, [pc, #144]	; (19014 <pow+0x2f4>)
   18f82:	2600      	movs	r6, #0
   18f84:	e9cd 6708 	strd	r6, r7, [sp, #32]
   18f88:	f001 fb9a 	bl	1a6c0 <__aeabi_dcmplt>
   18f8c:	2800      	cmp	r0, #0
   18f8e:	d0f2      	beq.n	18f76 <pow+0x256>
   18f90:	2200      	movs	r2, #0
   18f92:	4b1e      	ldr	r3, [pc, #120]	; (1900c <pow+0x2ec>)
   18f94:	4620      	mov	r0, r4
   18f96:	4629      	mov	r1, r5
   18f98:	f001 f920 	bl	1a1dc <__aeabi_dmul>
   18f9c:	4604      	mov	r4, r0
   18f9e:	460d      	mov	r5, r1
   18fa0:	f000 fe52 	bl	19c48 <rint>
   18fa4:	4602      	mov	r2, r0
   18fa6:	460b      	mov	r3, r1
   18fa8:	4620      	mov	r0, r4
   18faa:	4629      	mov	r1, r5
   18fac:	f001 fb7e 	bl	1a6ac <__aeabi_dcmpeq>
   18fb0:	b918      	cbnz	r0, 18fba <pow+0x29a>
   18fb2:	4b14      	ldr	r3, [pc, #80]	; (19004 <pow+0x2e4>)
   18fb4:	2200      	movs	r2, #0
   18fb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   18fba:	f999 8000 	ldrsb.w	r8, [r9]
   18fbe:	e7da      	b.n	18f76 <pow+0x256>
   18fc0:	f999 9000 	ldrsb.w	r9, [r9]
   18fc4:	4b0d      	ldr	r3, [pc, #52]	; (18ffc <pow+0x2dc>)
   18fc6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   18fca:	2201      	movs	r2, #1
   18fcc:	e9cd 6704 	strd	r6, r7, [sp, #16]
   18fd0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   18fd4:	9202      	str	r2, [sp, #8]
   18fd6:	9303      	str	r3, [sp, #12]
   18fd8:	f1b9 0f00 	cmp.w	r9, #0
   18fdc:	f43f af27 	beq.w	18e2e <pow+0x10e>
   18fe0:	2200      	movs	r2, #0
   18fe2:	2300      	movs	r3, #0
   18fe4:	4610      	mov	r0, r2
   18fe6:	4619      	mov	r1, r3
   18fe8:	f001 fa22 	bl	1a430 <__aeabi_ddiv>
   18fec:	f1b9 0f02 	cmp.w	r9, #2
   18ff0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   18ff4:	f43f af55 	beq.w	18ea2 <pow+0x182>
   18ff8:	e71d      	b.n	18e36 <pow+0x116>
   18ffa:	bf00      	nop
   18ffc:	00021294 	.word	0x00021294
   19000:	3ff00000 	.word	0x3ff00000
   19004:	fff00000 	.word	0xfff00000
   19008:	47efffff 	.word	0x47efffff
   1900c:	3fe00000 	.word	0x3fe00000
   19010:	c7efffff 	.word	0xc7efffff
   19014:	7ff00000 	.word	0x7ff00000
   19018:	20000247 	.word	0x20000247
   1901c:	00000000 	.word	0x00000000

00019020 <__ieee754_pow>:
   19020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19024:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   19028:	ea57 0402 	orrs.w	r4, r7, r2
   1902c:	b093      	sub	sp, #76	; 0x4c
   1902e:	d037      	beq.n	190a0 <__ieee754_pow+0x80>
   19030:	4c67      	ldr	r4, [pc, #412]	; (191d0 <__ieee754_pow+0x1b0>)
   19032:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   19036:	42a6      	cmp	r6, r4
   19038:	4683      	mov	fp, r0
   1903a:	460d      	mov	r5, r1
   1903c:	dc29      	bgt.n	19092 <__ieee754_pow+0x72>
   1903e:	469a      	mov	sl, r3
   19040:	4696      	mov	lr, r2
   19042:	d025      	beq.n	19090 <__ieee754_pow+0x70>
   19044:	42a7      	cmp	r7, r4
   19046:	dc24      	bgt.n	19092 <__ieee754_pow+0x72>
   19048:	4c61      	ldr	r4, [pc, #388]	; (191d0 <__ieee754_pow+0x1b0>)
   1904a:	42a7      	cmp	r7, r4
   1904c:	d079      	beq.n	19142 <__ieee754_pow+0x122>
   1904e:	2d00      	cmp	r5, #0
   19050:	4689      	mov	r9, r1
   19052:	4680      	mov	r8, r0
   19054:	e9cd 2300 	strd	r2, r3, [sp]
   19058:	db77      	blt.n	1914a <__ieee754_pow+0x12a>
   1905a:	2400      	movs	r4, #0
   1905c:	f1be 0f00 	cmp.w	lr, #0
   19060:	d12c      	bne.n	190bc <__ieee754_pow+0x9c>
   19062:	4b5b      	ldr	r3, [pc, #364]	; (191d0 <__ieee754_pow+0x1b0>)
   19064:	429f      	cmp	r7, r3
   19066:	f000 808b 	beq.w	19180 <__ieee754_pow+0x160>
   1906a:	4b5a      	ldr	r3, [pc, #360]	; (191d4 <__ieee754_pow+0x1b4>)
   1906c:	429f      	cmp	r7, r3
   1906e:	d061      	beq.n	19134 <__ieee754_pow+0x114>
   19070:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
   19074:	f000 83ba 	beq.w	197ec <__ieee754_pow+0x7cc>
   19078:	4b57      	ldr	r3, [pc, #348]	; (191d8 <__ieee754_pow+0x1b8>)
   1907a:	459a      	cmp	sl, r3
   1907c:	d11e      	bne.n	190bc <__ieee754_pow+0x9c>
   1907e:	2d00      	cmp	r5, #0
   19080:	db1c      	blt.n	190bc <__ieee754_pow+0x9c>
   19082:	4640      	mov	r0, r8
   19084:	4649      	mov	r1, r9
   19086:	b013      	add	sp, #76	; 0x4c
   19088:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1908c:	f000 bd0e 	b.w	19aac <__ieee754_sqrt>
   19090:	b158      	cbz	r0, 190aa <__ieee754_pow+0x8a>
   19092:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   19096:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   1909a:	ea56 030b 	orrs.w	r3, r6, fp
   1909e:	d106      	bne.n	190ae <__ieee754_pow+0x8e>
   190a0:	494c      	ldr	r1, [pc, #304]	; (191d4 <__ieee754_pow+0x1b4>)
   190a2:	2000      	movs	r0, #0
   190a4:	b013      	add	sp, #76	; 0x4c
   190a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190aa:	42b7      	cmp	r7, r6
   190ac:	ddcc      	ble.n	19048 <__ieee754_pow+0x28>
   190ae:	484b      	ldr	r0, [pc, #300]	; (191dc <__ieee754_pow+0x1bc>)
   190b0:	b013      	add	sp, #76	; 0x4c
   190b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190b6:	f000 bdc1 	b.w	19c3c <nan>
   190ba:	2400      	movs	r4, #0
   190bc:	4640      	mov	r0, r8
   190be:	4649      	mov	r1, r9
   190c0:	f000 fdb0 	bl	19c24 <fabs>
   190c4:	f1bb 0f00 	cmp.w	fp, #0
   190c8:	d119      	bne.n	190fe <__ieee754_pow+0xde>
   190ca:	b126      	cbz	r6, 190d6 <__ieee754_pow+0xb6>
   190cc:	4b41      	ldr	r3, [pc, #260]	; (191d4 <__ieee754_pow+0x1b4>)
   190ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   190d2:	429a      	cmp	r2, r3
   190d4:	d113      	bne.n	190fe <__ieee754_pow+0xde>
   190d6:	f1ba 0f00 	cmp.w	sl, #0
   190da:	f2c0 83bc 	blt.w	19856 <__ieee754_pow+0x836>
   190de:	2d00      	cmp	r5, #0
   190e0:	dae0      	bge.n	190a4 <__ieee754_pow+0x84>
   190e2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
   190e6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
   190ea:	ea56 0304 	orrs.w	r3, r6, r4
   190ee:	f000 848f 	beq.w	19a10 <__ieee754_pow+0x9f0>
   190f2:	2c01      	cmp	r4, #1
   190f4:	d1d6      	bne.n	190a4 <__ieee754_pow+0x84>
   190f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   190fa:	4619      	mov	r1, r3
   190fc:	e7d2      	b.n	190a4 <__ieee754_pow+0x84>
   190fe:	0fed      	lsrs	r5, r5, #31
   19100:	3d01      	subs	r5, #1
   19102:	ea54 0305 	orrs.w	r3, r4, r5
   19106:	d04e      	beq.n	191a6 <__ieee754_pow+0x186>
   19108:	4b35      	ldr	r3, [pc, #212]	; (191e0 <__ieee754_pow+0x1c0>)
   1910a:	429f      	cmp	r7, r3
   1910c:	dd6e      	ble.n	191ec <__ieee754_pow+0x1cc>
   1910e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   19112:	429f      	cmp	r7, r3
   19114:	f340 83e8 	ble.w	198e8 <__ieee754_pow+0x8c8>
   19118:	4b32      	ldr	r3, [pc, #200]	; (191e4 <__ieee754_pow+0x1c4>)
   1911a:	429e      	cmp	r6, r3
   1911c:	dd4e      	ble.n	191bc <__ieee754_pow+0x19c>
   1911e:	f1ba 0f00 	cmp.w	sl, #0
   19122:	dd4e      	ble.n	191c2 <__ieee754_pow+0x1a2>
   19124:	a328      	add	r3, pc, #160	; (adr r3, 191c8 <__ieee754_pow+0x1a8>)
   19126:	e9d3 2300 	ldrd	r2, r3, [r3]
   1912a:	4610      	mov	r0, r2
   1912c:	4619      	mov	r1, r3
   1912e:	f001 f855 	bl	1a1dc <__aeabi_dmul>
   19132:	e7b7      	b.n	190a4 <__ieee754_pow+0x84>
   19134:	f1ba 0f00 	cmp.w	sl, #0
   19138:	f2c0 843c 	blt.w	199b4 <__ieee754_pow+0x994>
   1913c:	4640      	mov	r0, r8
   1913e:	4649      	mov	r1, r9
   19140:	e7b0      	b.n	190a4 <__ieee754_pow+0x84>
   19142:	f1be 0f00 	cmp.w	lr, #0
   19146:	d082      	beq.n	1904e <__ieee754_pow+0x2e>
   19148:	e7a3      	b.n	19092 <__ieee754_pow+0x72>
   1914a:	4b27      	ldr	r3, [pc, #156]	; (191e8 <__ieee754_pow+0x1c8>)
   1914c:	429f      	cmp	r7, r3
   1914e:	dc28      	bgt.n	191a2 <__ieee754_pow+0x182>
   19150:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   19154:	429f      	cmp	r7, r3
   19156:	dd80      	ble.n	1905a <__ieee754_pow+0x3a>
   19158:	153b      	asrs	r3, r7, #20
   1915a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1915e:	2b14      	cmp	r3, #20
   19160:	f340 843e 	ble.w	199e0 <__ieee754_pow+0x9c0>
   19164:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   19168:	fa2e f203 	lsr.w	r2, lr, r3
   1916c:	fa02 f303 	lsl.w	r3, r2, r3
   19170:	459e      	cmp	lr, r3
   19172:	f47f af72 	bne.w	1905a <__ieee754_pow+0x3a>
   19176:	f002 0201 	and.w	r2, r2, #1
   1917a:	f1c2 0402 	rsb	r4, r2, #2
   1917e:	e76d      	b.n	1905c <__ieee754_pow+0x3c>
   19180:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   19184:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   19188:	ea53 030b 	orrs.w	r3, r3, fp
   1918c:	d088      	beq.n	190a0 <__ieee754_pow+0x80>
   1918e:	4b15      	ldr	r3, [pc, #84]	; (191e4 <__ieee754_pow+0x1c4>)
   19190:	429e      	cmp	r6, r3
   19192:	f340 8332 	ble.w	197fa <__ieee754_pow+0x7da>
   19196:	f1ba 0f00 	cmp.w	sl, #0
   1919a:	db12      	blt.n	191c2 <__ieee754_pow+0x1a2>
   1919c:	e9dd 0100 	ldrd	r0, r1, [sp]
   191a0:	e780      	b.n	190a4 <__ieee754_pow+0x84>
   191a2:	2402      	movs	r4, #2
   191a4:	e75a      	b.n	1905c <__ieee754_pow+0x3c>
   191a6:	4642      	mov	r2, r8
   191a8:	464b      	mov	r3, r9
   191aa:	4640      	mov	r0, r8
   191ac:	4649      	mov	r1, r9
   191ae:	f000 fe61 	bl	19e74 <__aeabi_dsub>
   191b2:	4602      	mov	r2, r0
   191b4:	460b      	mov	r3, r1
   191b6:	f001 f93b 	bl	1a430 <__aeabi_ddiv>
   191ba:	e773      	b.n	190a4 <__ieee754_pow+0x84>
   191bc:	f1ba 0f00 	cmp.w	sl, #0
   191c0:	dbb0      	blt.n	19124 <__ieee754_pow+0x104>
   191c2:	2000      	movs	r0, #0
   191c4:	2100      	movs	r1, #0
   191c6:	e76d      	b.n	190a4 <__ieee754_pow+0x84>
   191c8:	8800759c 	.word	0x8800759c
   191cc:	7e37e43c 	.word	0x7e37e43c
   191d0:	7ff00000 	.word	0x7ff00000
   191d4:	3ff00000 	.word	0x3ff00000
   191d8:	3fe00000 	.word	0x3fe00000
   191dc:	000213cc 	.word	0x000213cc
   191e0:	41e00000 	.word	0x41e00000
   191e4:	3fefffff 	.word	0x3fefffff
   191e8:	433fffff 	.word	0x433fffff
   191ec:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   191f0:	f04f 0200 	mov.w	r2, #0
   191f4:	da05      	bge.n	19202 <__ieee754_pow+0x1e2>
   191f6:	4bd4      	ldr	r3, [pc, #848]	; (19548 <__ieee754_pow+0x528>)
   191f8:	f000 fff0 	bl	1a1dc <__aeabi_dmul>
   191fc:	f06f 0234 	mvn.w	r2, #52	; 0x34
   19200:	460e      	mov	r6, r1
   19202:	1533      	asrs	r3, r6, #20
   19204:	4fd1      	ldr	r7, [pc, #836]	; (1954c <__ieee754_pow+0x52c>)
   19206:	f3c6 0613 	ubfx	r6, r6, #0, #20
   1920a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1920e:	4413      	add	r3, r2
   19210:	f046 5a7f 	orr.w	sl, r6, #1069547520	; 0x3fc00000
   19214:	42be      	cmp	r6, r7
   19216:	461a      	mov	r2, r3
   19218:	930d      	str	r3, [sp, #52]	; 0x34
   1921a:	f44a 1a40 	orr.w	sl, sl, #3145728	; 0x300000
   1921e:	f340 8321 	ble.w	19864 <__ieee754_pow+0x844>
   19222:	4bcb      	ldr	r3, [pc, #812]	; (19550 <__ieee754_pow+0x530>)
   19224:	429e      	cmp	r6, r3
   19226:	f340 83fd 	ble.w	19a24 <__ieee754_pow+0xa04>
   1922a:	4613      	mov	r3, r2
   1922c:	3301      	adds	r3, #1
   1922e:	930d      	str	r3, [sp, #52]	; 0x34
   19230:	4bc8      	ldr	r3, [pc, #800]	; (19554 <__ieee754_pow+0x534>)
   19232:	2200      	movs	r2, #0
   19234:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19238:	2700      	movs	r7, #0
   1923a:	2600      	movs	r6, #0
   1923c:	e9cd 6708 	strd	r6, r7, [sp, #32]
   19240:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   19244:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
   19248:	2700      	movs	r7, #0
   1924a:	4602      	mov	r2, r0
   1924c:	4653      	mov	r3, sl
   1924e:	4651      	mov	r1, sl
   19250:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   19254:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19258:	f000 fe0c 	bl	19e74 <__aeabi_dsub>
   1925c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19260:	4680      	mov	r8, r0
   19262:	4689      	mov	r9, r1
   19264:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   19268:	f000 fe06 	bl	19e78 <__adddf3>
   1926c:	4602      	mov	r2, r0
   1926e:	460b      	mov	r3, r1
   19270:	2000      	movs	r0, #0
   19272:	49b8      	ldr	r1, [pc, #736]	; (19554 <__ieee754_pow+0x534>)
   19274:	f001 f8dc 	bl	1a430 <__aeabi_ddiv>
   19278:	460a      	mov	r2, r1
   1927a:	4601      	mov	r1, r0
   1927c:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
   19280:	4613      	mov	r3, r2
   19282:	4649      	mov	r1, r9
   19284:	4602      	mov	r2, r0
   19286:	4640      	mov	r0, r8
   19288:	f000 ffa8 	bl	1a1dc <__aeabi_dmul>
   1928c:	ea4f 036a 	mov.w	r3, sl, asr #1
   19290:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   19294:	468c      	mov	ip, r1
   19296:	4683      	mov	fp, r0
   19298:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   1929c:	e9cd bc04 	strd	fp, ip, [sp, #16]
   192a0:	46da      	mov	sl, fp
   192a2:	468b      	mov	fp, r1
   192a4:	19d9      	adds	r1, r3, r7
   192a6:	2300      	movs	r3, #0
   192a8:	e9cd ab02 	strd	sl, fp, [sp, #8]
   192ac:	9302      	str	r3, [sp, #8]
   192ae:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   192b2:	2000      	movs	r0, #0
   192b4:	4606      	mov	r6, r0
   192b6:	460f      	mov	r7, r1
   192b8:	4602      	mov	r2, r0
   192ba:	460b      	mov	r3, r1
   192bc:	4650      	mov	r0, sl
   192be:	4659      	mov	r1, fp
   192c0:	f000 ff8c 	bl	1a1dc <__aeabi_dmul>
   192c4:	4602      	mov	r2, r0
   192c6:	460b      	mov	r3, r1
   192c8:	4640      	mov	r0, r8
   192ca:	4649      	mov	r1, r9
   192cc:	f000 fdd2 	bl	19e74 <__aeabi_dsub>
   192d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   192d4:	4680      	mov	r8, r0
   192d6:	4689      	mov	r9, r1
   192d8:	4630      	mov	r0, r6
   192da:	4639      	mov	r1, r7
   192dc:	f000 fdca 	bl	19e74 <__aeabi_dsub>
   192e0:	4602      	mov	r2, r0
   192e2:	460b      	mov	r3, r1
   192e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   192e8:	f000 fdc4 	bl	19e74 <__aeabi_dsub>
   192ec:	4652      	mov	r2, sl
   192ee:	465b      	mov	r3, fp
   192f0:	f000 ff74 	bl	1a1dc <__aeabi_dmul>
   192f4:	4602      	mov	r2, r0
   192f6:	460b      	mov	r3, r1
   192f8:	4640      	mov	r0, r8
   192fa:	4649      	mov	r1, r9
   192fc:	f000 fdba 	bl	19e74 <__aeabi_dsub>
   19300:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   19304:	f000 ff6a 	bl	1a1dc <__aeabi_dmul>
   19308:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   1930c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   19310:	4632      	mov	r2, r6
   19312:	463b      	mov	r3, r7
   19314:	4630      	mov	r0, r6
   19316:	4639      	mov	r1, r7
   19318:	f000 ff60 	bl	1a1dc <__aeabi_dmul>
   1931c:	a378      	add	r3, pc, #480	; (adr r3, 19500 <__ieee754_pow+0x4e0>)
   1931e:	e9d3 2300 	ldrd	r2, r3, [r3]
   19322:	4606      	mov	r6, r0
   19324:	460f      	mov	r7, r1
   19326:	f000 ff59 	bl	1a1dc <__aeabi_dmul>
   1932a:	a377      	add	r3, pc, #476	; (adr r3, 19508 <__ieee754_pow+0x4e8>)
   1932c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19330:	f000 fda2 	bl	19e78 <__adddf3>
   19334:	4632      	mov	r2, r6
   19336:	463b      	mov	r3, r7
   19338:	f000 ff50 	bl	1a1dc <__aeabi_dmul>
   1933c:	a374      	add	r3, pc, #464	; (adr r3, 19510 <__ieee754_pow+0x4f0>)
   1933e:	e9d3 2300 	ldrd	r2, r3, [r3]
   19342:	f000 fd99 	bl	19e78 <__adddf3>
   19346:	4632      	mov	r2, r6
   19348:	463b      	mov	r3, r7
   1934a:	f000 ff47 	bl	1a1dc <__aeabi_dmul>
   1934e:	a372      	add	r3, pc, #456	; (adr r3, 19518 <__ieee754_pow+0x4f8>)
   19350:	e9d3 2300 	ldrd	r2, r3, [r3]
   19354:	f000 fd90 	bl	19e78 <__adddf3>
   19358:	4632      	mov	r2, r6
   1935a:	463b      	mov	r3, r7
   1935c:	f000 ff3e 	bl	1a1dc <__aeabi_dmul>
   19360:	a36f      	add	r3, pc, #444	; (adr r3, 19520 <__ieee754_pow+0x500>)
   19362:	e9d3 2300 	ldrd	r2, r3, [r3]
   19366:	f000 fd87 	bl	19e78 <__adddf3>
   1936a:	4632      	mov	r2, r6
   1936c:	463b      	mov	r3, r7
   1936e:	f000 ff35 	bl	1a1dc <__aeabi_dmul>
   19372:	a36d      	add	r3, pc, #436	; (adr r3, 19528 <__ieee754_pow+0x508>)
   19374:	e9d3 2300 	ldrd	r2, r3, [r3]
   19378:	f000 fd7e 	bl	19e78 <__adddf3>
   1937c:	4632      	mov	r2, r6
   1937e:	4680      	mov	r8, r0
   19380:	4689      	mov	r9, r1
   19382:	463b      	mov	r3, r7
   19384:	4630      	mov	r0, r6
   19386:	4639      	mov	r1, r7
   19388:	f000 ff28 	bl	1a1dc <__aeabi_dmul>
   1938c:	4602      	mov	r2, r0
   1938e:	460b      	mov	r3, r1
   19390:	4640      	mov	r0, r8
   19392:	4649      	mov	r1, r9
   19394:	f000 ff22 	bl	1a1dc <__aeabi_dmul>
   19398:	4652      	mov	r2, sl
   1939a:	4606      	mov	r6, r0
   1939c:	460f      	mov	r7, r1
   1939e:	465b      	mov	r3, fp
   193a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   193a4:	f000 fd68 	bl	19e78 <__adddf3>
   193a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   193ac:	f000 ff16 	bl	1a1dc <__aeabi_dmul>
   193b0:	4632      	mov	r2, r6
   193b2:	463b      	mov	r3, r7
   193b4:	f000 fd60 	bl	19e78 <__adddf3>
   193b8:	4652      	mov	r2, sl
   193ba:	4680      	mov	r8, r0
   193bc:	4689      	mov	r9, r1
   193be:	465b      	mov	r3, fp
   193c0:	4650      	mov	r0, sl
   193c2:	4659      	mov	r1, fp
   193c4:	f000 ff0a 	bl	1a1dc <__aeabi_dmul>
   193c8:	2200      	movs	r2, #0
   193ca:	4b63      	ldr	r3, [pc, #396]	; (19558 <__ieee754_pow+0x538>)
   193cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   193d0:	f000 fd52 	bl	19e78 <__adddf3>
   193d4:	4642      	mov	r2, r8
   193d6:	464b      	mov	r3, r9
   193d8:	f000 fd4e 	bl	19e78 <__adddf3>
   193dc:	9802      	ldr	r0, [sp, #8]
   193de:	460f      	mov	r7, r1
   193e0:	4606      	mov	r6, r0
   193e2:	4632      	mov	r2, r6
   193e4:	463b      	mov	r3, r7
   193e6:	4650      	mov	r0, sl
   193e8:	4659      	mov	r1, fp
   193ea:	f000 fef7 	bl	1a1dc <__aeabi_dmul>
   193ee:	2200      	movs	r2, #0
   193f0:	4682      	mov	sl, r0
   193f2:	468b      	mov	fp, r1
   193f4:	4b58      	ldr	r3, [pc, #352]	; (19558 <__ieee754_pow+0x538>)
   193f6:	4630      	mov	r0, r6
   193f8:	4639      	mov	r1, r7
   193fa:	f000 fd3b 	bl	19e74 <__aeabi_dsub>
   193fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   19402:	f000 fd37 	bl	19e74 <__aeabi_dsub>
   19406:	4602      	mov	r2, r0
   19408:	460b      	mov	r3, r1
   1940a:	4640      	mov	r0, r8
   1940c:	4649      	mov	r1, r9
   1940e:	f000 fd31 	bl	19e74 <__aeabi_dsub>
   19412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19416:	f000 fee1 	bl	1a1dc <__aeabi_dmul>
   1941a:	4632      	mov	r2, r6
   1941c:	4680      	mov	r8, r0
   1941e:	4689      	mov	r9, r1
   19420:	463b      	mov	r3, r7
   19422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   19426:	f000 fed9 	bl	1a1dc <__aeabi_dmul>
   1942a:	4602      	mov	r2, r0
   1942c:	460b      	mov	r3, r1
   1942e:	4640      	mov	r0, r8
   19430:	4649      	mov	r1, r9
   19432:	f000 fd21 	bl	19e78 <__adddf3>
   19436:	4680      	mov	r8, r0
   19438:	4689      	mov	r9, r1
   1943a:	4602      	mov	r2, r0
   1943c:	460b      	mov	r3, r1
   1943e:	4650      	mov	r0, sl
   19440:	4659      	mov	r1, fp
   19442:	e9cd ab04 	strd	sl, fp, [sp, #16]
   19446:	f000 fd17 	bl	19e78 <__adddf3>
   1944a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   1944e:	a338      	add	r3, pc, #224	; (adr r3, 19530 <__ieee754_pow+0x510>)
   19450:	e9d3 2300 	ldrd	r2, r3, [r3]
   19454:	4650      	mov	r0, sl
   19456:	460f      	mov	r7, r1
   19458:	f000 fec0 	bl	1a1dc <__aeabi_dmul>
   1945c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19460:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19464:	4639      	mov	r1, r7
   19466:	4650      	mov	r0, sl
   19468:	f000 fd04 	bl	19e74 <__aeabi_dsub>
   1946c:	4602      	mov	r2, r0
   1946e:	460b      	mov	r3, r1
   19470:	4640      	mov	r0, r8
   19472:	4649      	mov	r1, r9
   19474:	f000 fcfe 	bl	19e74 <__aeabi_dsub>
   19478:	a32f      	add	r3, pc, #188	; (adr r3, 19538 <__ieee754_pow+0x518>)
   1947a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1947e:	f000 fead 	bl	1a1dc <__aeabi_dmul>
   19482:	a32f      	add	r3, pc, #188	; (adr r3, 19540 <__ieee754_pow+0x520>)
   19484:	e9d3 2300 	ldrd	r2, r3, [r3]
   19488:	4680      	mov	r8, r0
   1948a:	4689      	mov	r9, r1
   1948c:	4650      	mov	r0, sl
   1948e:	4639      	mov	r1, r7
   19490:	f000 fea4 	bl	1a1dc <__aeabi_dmul>
   19494:	4602      	mov	r2, r0
   19496:	460b      	mov	r3, r1
   19498:	4640      	mov	r0, r8
   1949a:	4649      	mov	r1, r9
   1949c:	f000 fcec 	bl	19e78 <__adddf3>
   194a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   194a4:	f000 fce8 	bl	19e78 <__adddf3>
   194a8:	4680      	mov	r8, r0
   194aa:	980d      	ldr	r0, [sp, #52]	; 0x34
   194ac:	4689      	mov	r9, r1
   194ae:	f000 fe2f 	bl	1a110 <__aeabi_i2d>
   194b2:	4642      	mov	r2, r8
   194b4:	4606      	mov	r6, r0
   194b6:	460f      	mov	r7, r1
   194b8:	464b      	mov	r3, r9
   194ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   194be:	f000 fcdb 	bl	19e78 <__adddf3>
   194c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   194c6:	f000 fcd7 	bl	19e78 <__adddf3>
   194ca:	4632      	mov	r2, r6
   194cc:	463b      	mov	r3, r7
   194ce:	f000 fcd3 	bl	19e78 <__adddf3>
   194d2:	4632      	mov	r2, r6
   194d4:	463b      	mov	r3, r7
   194d6:	4650      	mov	r0, sl
   194d8:	468b      	mov	fp, r1
   194da:	f000 fccb 	bl	19e74 <__aeabi_dsub>
   194de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   194e2:	f000 fcc7 	bl	19e74 <__aeabi_dsub>
   194e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   194ea:	f000 fcc3 	bl	19e74 <__aeabi_dsub>
   194ee:	4602      	mov	r2, r0
   194f0:	460b      	mov	r3, r1
   194f2:	4640      	mov	r0, r8
   194f4:	4649      	mov	r1, r9
   194f6:	f000 fcbd 	bl	19e74 <__aeabi_dsub>
   194fa:	4680      	mov	r8, r0
   194fc:	e02e      	b.n	1955c <__ieee754_pow+0x53c>
   194fe:	bf00      	nop
   19500:	4a454eef 	.word	0x4a454eef
   19504:	3fca7e28 	.word	0x3fca7e28
   19508:	93c9db65 	.word	0x93c9db65
   1950c:	3fcd864a 	.word	0x3fcd864a
   19510:	a91d4101 	.word	0xa91d4101
   19514:	3fd17460 	.word	0x3fd17460
   19518:	518f264d 	.word	0x518f264d
   1951c:	3fd55555 	.word	0x3fd55555
   19520:	db6fabff 	.word	0xdb6fabff
   19524:	3fdb6db6 	.word	0x3fdb6db6
   19528:	33333303 	.word	0x33333303
   1952c:	3fe33333 	.word	0x3fe33333
   19530:	e0000000 	.word	0xe0000000
   19534:	3feec709 	.word	0x3feec709
   19538:	dc3a03fd 	.word	0xdc3a03fd
   1953c:	3feec709 	.word	0x3feec709
   19540:	145b01f5 	.word	0x145b01f5
   19544:	be3e2fe0 	.word	0xbe3e2fe0
   19548:	43400000 	.word	0x43400000
   1954c:	0003988e 	.word	0x0003988e
   19550:	000bb679 	.word	0x000bb679
   19554:	3ff00000 	.word	0x3ff00000
   19558:	40080000 	.word	0x40080000
   1955c:	4689      	mov	r9, r1
   1955e:	3c01      	subs	r4, #1
   19560:	ea54 0305 	orrs.w	r3, r4, r5
   19564:	e9dd 0100 	ldrd	r0, r1, [sp]
   19568:	bf14      	ite	ne
   1956a:	4cd9      	ldrne	r4, [pc, #868]	; (198d0 <__ieee754_pow+0x8b0>)
   1956c:	4cd9      	ldreq	r4, [pc, #868]	; (198d4 <__ieee754_pow+0x8b4>)
   1956e:	2300      	movs	r3, #0
   19570:	e9cd 3404 	strd	r3, r4, [sp, #16]
   19574:	4603      	mov	r3, r0
   19576:	460c      	mov	r4, r1
   19578:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1957c:	2300      	movs	r3, #0
   1957e:	9302      	str	r3, [sp, #8]
   19580:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   19584:	4622      	mov	r2, r4
   19586:	462b      	mov	r3, r5
   19588:	f000 fc74 	bl	19e74 <__aeabi_dsub>
   1958c:	4652      	mov	r2, sl
   1958e:	465b      	mov	r3, fp
   19590:	f000 fe24 	bl	1a1dc <__aeabi_dmul>
   19594:	e9dd 2300 	ldrd	r2, r3, [sp]
   19598:	4606      	mov	r6, r0
   1959a:	460f      	mov	r7, r1
   1959c:	4640      	mov	r0, r8
   1959e:	4649      	mov	r1, r9
   195a0:	f000 fe1c 	bl	1a1dc <__aeabi_dmul>
   195a4:	4602      	mov	r2, r0
   195a6:	460b      	mov	r3, r1
   195a8:	4630      	mov	r0, r6
   195aa:	4639      	mov	r1, r7
   195ac:	f000 fc64 	bl	19e78 <__adddf3>
   195b0:	4622      	mov	r2, r4
   195b2:	4680      	mov	r8, r0
   195b4:	4689      	mov	r9, r1
   195b6:	462b      	mov	r3, r5
   195b8:	4650      	mov	r0, sl
   195ba:	4659      	mov	r1, fp
   195bc:	e9cd 8900 	strd	r8, r9, [sp]
   195c0:	f000 fe0c 	bl	1a1dc <__aeabi_dmul>
   195c4:	460b      	mov	r3, r1
   195c6:	4602      	mov	r2, r0
   195c8:	4606      	mov	r6, r0
   195ca:	460f      	mov	r7, r1
   195cc:	4640      	mov	r0, r8
   195ce:	4649      	mov	r1, r9
   195d0:	f000 fc52 	bl	19e78 <__adddf3>
   195d4:	4bc0      	ldr	r3, [pc, #768]	; (198d8 <__ieee754_pow+0x8b8>)
   195d6:	4299      	cmp	r1, r3
   195d8:	4604      	mov	r4, r0
   195da:	460d      	mov	r5, r1
   195dc:	468a      	mov	sl, r1
   195de:	f340 8116 	ble.w	1980e <__ieee754_pow+0x7ee>
   195e2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   195e6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   195ea:	4303      	orrs	r3, r0
   195ec:	f040 81ea 	bne.w	199c4 <__ieee754_pow+0x9a4>
   195f0:	a3a3      	add	r3, pc, #652	; (adr r3, 19880 <__ieee754_pow+0x860>)
   195f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   195f6:	e9dd 0100 	ldrd	r0, r1, [sp]
   195fa:	f000 fc3d 	bl	19e78 <__adddf3>
   195fe:	4632      	mov	r2, r6
   19600:	4680      	mov	r8, r0
   19602:	4689      	mov	r9, r1
   19604:	463b      	mov	r3, r7
   19606:	4620      	mov	r0, r4
   19608:	4629      	mov	r1, r5
   1960a:	f000 fc33 	bl	19e74 <__aeabi_dsub>
   1960e:	4602      	mov	r2, r0
   19610:	460b      	mov	r3, r1
   19612:	4640      	mov	r0, r8
   19614:	4649      	mov	r1, r9
   19616:	f001 f871 	bl	1a6fc <__aeabi_dcmpgt>
   1961a:	2800      	cmp	r0, #0
   1961c:	f040 81d2 	bne.w	199c4 <__ieee754_pow+0x9a4>
   19620:	46a8      	mov	r8, r5
   19622:	ea4f 5328 	mov.w	r3, r8, asr #20
   19626:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1962a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1962e:	fa42 f303 	asr.w	r3, r2, r3
   19632:	4453      	add	r3, sl
   19634:	f3c3 520a 	ubfx	r2, r3, #20, #11
   19638:	4da8      	ldr	r5, [pc, #672]	; (198dc <__ieee754_pow+0x8bc>)
   1963a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   1963e:	4115      	asrs	r5, r2
   19640:	f3c3 0413 	ubfx	r4, r3, #0, #20
   19644:	ea23 0105 	bic.w	r1, r3, r5
   19648:	2000      	movs	r0, #0
   1964a:	f1c2 0b14 	rsb	fp, r2, #20
   1964e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   19652:	f1ba 0f00 	cmp.w	sl, #0
   19656:	4602      	mov	r2, r0
   19658:	460b      	mov	r3, r1
   1965a:	fa44 fb0b 	asr.w	fp, r4, fp
   1965e:	4630      	mov	r0, r6
   19660:	4639      	mov	r1, r7
   19662:	bfb8      	it	lt
   19664:	f1cb 0b00 	rsblt	fp, fp, #0
   19668:	f000 fc04 	bl	19e74 <__aeabi_dsub>
   1966c:	4602      	mov	r2, r0
   1966e:	460b      	mov	r3, r1
   19670:	4606      	mov	r6, r0
   19672:	460f      	mov	r7, r1
   19674:	e9dd 0100 	ldrd	r0, r1, [sp]
   19678:	f000 fbfe 	bl	19e78 <__adddf3>
   1967c:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   19680:	460d      	mov	r5, r1
   19682:	2400      	movs	r4, #0
   19684:	a380      	add	r3, pc, #512	; (adr r3, 19888 <__ieee754_pow+0x868>)
   19686:	e9d3 2300 	ldrd	r2, r3, [r3]
   1968a:	4620      	mov	r0, r4
   1968c:	4629      	mov	r1, r5
   1968e:	f000 fda5 	bl	1a1dc <__aeabi_dmul>
   19692:	4632      	mov	r2, r6
   19694:	4680      	mov	r8, r0
   19696:	4689      	mov	r9, r1
   19698:	463b      	mov	r3, r7
   1969a:	4620      	mov	r0, r4
   1969c:	4629      	mov	r1, r5
   1969e:	f000 fbe9 	bl	19e74 <__aeabi_dsub>
   196a2:	4602      	mov	r2, r0
   196a4:	460b      	mov	r3, r1
   196a6:	e9dd 0100 	ldrd	r0, r1, [sp]
   196aa:	f000 fbe3 	bl	19e74 <__aeabi_dsub>
   196ae:	a378      	add	r3, pc, #480	; (adr r3, 19890 <__ieee754_pow+0x870>)
   196b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   196b4:	f000 fd92 	bl	1a1dc <__aeabi_dmul>
   196b8:	a377      	add	r3, pc, #476	; (adr r3, 19898 <__ieee754_pow+0x878>)
   196ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   196be:	4606      	mov	r6, r0
   196c0:	460f      	mov	r7, r1
   196c2:	4620      	mov	r0, r4
   196c4:	4629      	mov	r1, r5
   196c6:	f000 fd89 	bl	1a1dc <__aeabi_dmul>
   196ca:	4602      	mov	r2, r0
   196cc:	460b      	mov	r3, r1
   196ce:	4630      	mov	r0, r6
   196d0:	4639      	mov	r1, r7
   196d2:	f000 fbd1 	bl	19e78 <__adddf3>
   196d6:	4606      	mov	r6, r0
   196d8:	460f      	mov	r7, r1
   196da:	4602      	mov	r2, r0
   196dc:	460b      	mov	r3, r1
   196de:	4640      	mov	r0, r8
   196e0:	4649      	mov	r1, r9
   196e2:	f000 fbc9 	bl	19e78 <__adddf3>
   196e6:	4642      	mov	r2, r8
   196e8:	464b      	mov	r3, r9
   196ea:	4604      	mov	r4, r0
   196ec:	460d      	mov	r5, r1
   196ee:	f000 fbc1 	bl	19e74 <__aeabi_dsub>
   196f2:	4602      	mov	r2, r0
   196f4:	460b      	mov	r3, r1
   196f6:	4630      	mov	r0, r6
   196f8:	4639      	mov	r1, r7
   196fa:	f000 fbbb 	bl	19e74 <__aeabi_dsub>
   196fe:	4622      	mov	r2, r4
   19700:	4680      	mov	r8, r0
   19702:	4689      	mov	r9, r1
   19704:	462b      	mov	r3, r5
   19706:	4620      	mov	r0, r4
   19708:	4629      	mov	r1, r5
   1970a:	f000 fd67 	bl	1a1dc <__aeabi_dmul>
   1970e:	a364      	add	r3, pc, #400	; (adr r3, 198a0 <__ieee754_pow+0x880>)
   19710:	e9d3 2300 	ldrd	r2, r3, [r3]
   19714:	4606      	mov	r6, r0
   19716:	460f      	mov	r7, r1
   19718:	f000 fd60 	bl	1a1dc <__aeabi_dmul>
   1971c:	a362      	add	r3, pc, #392	; (adr r3, 198a8 <__ieee754_pow+0x888>)
   1971e:	e9d3 2300 	ldrd	r2, r3, [r3]
   19722:	f000 fba7 	bl	19e74 <__aeabi_dsub>
   19726:	4632      	mov	r2, r6
   19728:	463b      	mov	r3, r7
   1972a:	f000 fd57 	bl	1a1dc <__aeabi_dmul>
   1972e:	a360      	add	r3, pc, #384	; (adr r3, 198b0 <__ieee754_pow+0x890>)
   19730:	e9d3 2300 	ldrd	r2, r3, [r3]
   19734:	f000 fba0 	bl	19e78 <__adddf3>
   19738:	4632      	mov	r2, r6
   1973a:	463b      	mov	r3, r7
   1973c:	f000 fd4e 	bl	1a1dc <__aeabi_dmul>
   19740:	a35d      	add	r3, pc, #372	; (adr r3, 198b8 <__ieee754_pow+0x898>)
   19742:	e9d3 2300 	ldrd	r2, r3, [r3]
   19746:	f000 fb95 	bl	19e74 <__aeabi_dsub>
   1974a:	4632      	mov	r2, r6
   1974c:	463b      	mov	r3, r7
   1974e:	f000 fd45 	bl	1a1dc <__aeabi_dmul>
   19752:	a35b      	add	r3, pc, #364	; (adr r3, 198c0 <__ieee754_pow+0x8a0>)
   19754:	e9d3 2300 	ldrd	r2, r3, [r3]
   19758:	f000 fb8e 	bl	19e78 <__adddf3>
   1975c:	4632      	mov	r2, r6
   1975e:	463b      	mov	r3, r7
   19760:	f000 fd3c 	bl	1a1dc <__aeabi_dmul>
   19764:	4602      	mov	r2, r0
   19766:	460b      	mov	r3, r1
   19768:	4620      	mov	r0, r4
   1976a:	4629      	mov	r1, r5
   1976c:	f000 fb82 	bl	19e74 <__aeabi_dsub>
   19770:	4606      	mov	r6, r0
   19772:	460f      	mov	r7, r1
   19774:	4602      	mov	r2, r0
   19776:	460b      	mov	r3, r1
   19778:	4620      	mov	r0, r4
   1977a:	4629      	mov	r1, r5
   1977c:	f000 fd2e 	bl	1a1dc <__aeabi_dmul>
   19780:	2200      	movs	r2, #0
   19782:	e9cd 0100 	strd	r0, r1, [sp]
   19786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1978a:	4630      	mov	r0, r6
   1978c:	4639      	mov	r1, r7
   1978e:	f000 fb71 	bl	19e74 <__aeabi_dsub>
   19792:	4602      	mov	r2, r0
   19794:	460b      	mov	r3, r1
   19796:	e9dd 0100 	ldrd	r0, r1, [sp]
   1979a:	f000 fe49 	bl	1a430 <__aeabi_ddiv>
   1979e:	4642      	mov	r2, r8
   197a0:	4606      	mov	r6, r0
   197a2:	460f      	mov	r7, r1
   197a4:	464b      	mov	r3, r9
   197a6:	4620      	mov	r0, r4
   197a8:	4629      	mov	r1, r5
   197aa:	f000 fd17 	bl	1a1dc <__aeabi_dmul>
   197ae:	4642      	mov	r2, r8
   197b0:	464b      	mov	r3, r9
   197b2:	f000 fb61 	bl	19e78 <__adddf3>
   197b6:	4602      	mov	r2, r0
   197b8:	460b      	mov	r3, r1
   197ba:	4630      	mov	r0, r6
   197bc:	4639      	mov	r1, r7
   197be:	f000 fb59 	bl	19e74 <__aeabi_dsub>
   197c2:	4622      	mov	r2, r4
   197c4:	462b      	mov	r3, r5
   197c6:	f000 fb55 	bl	19e74 <__aeabi_dsub>
   197ca:	4602      	mov	r2, r0
   197cc:	460b      	mov	r3, r1
   197ce:	2000      	movs	r0, #0
   197d0:	493f      	ldr	r1, [pc, #252]	; (198d0 <__ieee754_pow+0x8b0>)
   197d2:	f000 fb4f 	bl	19e74 <__aeabi_dsub>
   197d6:	448a      	add	sl, r1
   197d8:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   197dc:	f2c0 8133 	blt.w	19a46 <__ieee754_pow+0xa26>
   197e0:	4651      	mov	r1, sl
   197e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   197e6:	f000 fcf9 	bl	1a1dc <__aeabi_dmul>
   197ea:	e45b      	b.n	190a4 <__ieee754_pow+0x84>
   197ec:	4642      	mov	r2, r8
   197ee:	4640      	mov	r0, r8
   197f0:	464b      	mov	r3, r9
   197f2:	4649      	mov	r1, r9
   197f4:	f000 fcf2 	bl	1a1dc <__aeabi_dmul>
   197f8:	e454      	b.n	190a4 <__ieee754_pow+0x84>
   197fa:	f1ba 0f00 	cmp.w	sl, #0
   197fe:	f6bf ace0 	bge.w	191c2 <__ieee754_pow+0x1a2>
   19802:	e9dd 3400 	ldrd	r3, r4, [sp]
   19806:	4618      	mov	r0, r3
   19808:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
   1980c:	e44a      	b.n	190a4 <__ieee754_pow+0x84>
   1980e:	4b34      	ldr	r3, [pc, #208]	; (198e0 <__ieee754_pow+0x8c0>)
   19810:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   19814:	4598      	cmp	r8, r3
   19816:	f340 80f2 	ble.w	199fe <__ieee754_pow+0x9de>
   1981a:	4b32      	ldr	r3, [pc, #200]	; (198e4 <__ieee754_pow+0x8c4>)
   1981c:	440b      	add	r3, r1
   1981e:	4303      	orrs	r3, r0
   19820:	d10c      	bne.n	1983c <__ieee754_pow+0x81c>
   19822:	4632      	mov	r2, r6
   19824:	463b      	mov	r3, r7
   19826:	f000 fb25 	bl	19e74 <__aeabi_dsub>
   1982a:	4602      	mov	r2, r0
   1982c:	460b      	mov	r3, r1
   1982e:	e9dd 0100 	ldrd	r0, r1, [sp]
   19832:	f000 ff4f 	bl	1a6d4 <__aeabi_dcmple>
   19836:	2800      	cmp	r0, #0
   19838:	f43f aef3 	beq.w	19622 <__ieee754_pow+0x602>
   1983c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19840:	a321      	add	r3, pc, #132	; (adr r3, 198c8 <__ieee754_pow+0x8a8>)
   19842:	e9d3 2300 	ldrd	r2, r3, [r3]
   19846:	f000 fcc9 	bl	1a1dc <__aeabi_dmul>
   1984a:	a31f      	add	r3, pc, #124	; (adr r3, 198c8 <__ieee754_pow+0x8a8>)
   1984c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19850:	f000 fcc4 	bl	1a1dc <__aeabi_dmul>
   19854:	e426      	b.n	190a4 <__ieee754_pow+0x84>
   19856:	4602      	mov	r2, r0
   19858:	460b      	mov	r3, r1
   1985a:	2000      	movs	r0, #0
   1985c:	491c      	ldr	r1, [pc, #112]	; (198d0 <__ieee754_pow+0x8b0>)
   1985e:	f000 fde7 	bl	1a430 <__aeabi_ddiv>
   19862:	e43c      	b.n	190de <__ieee754_pow+0xbe>
   19864:	2200      	movs	r2, #0
   19866:	2300      	movs	r3, #0
   19868:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1986c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   19870:	4b17      	ldr	r3, [pc, #92]	; (198d0 <__ieee754_pow+0x8b0>)
   19872:	2200      	movs	r2, #0
   19874:	2700      	movs	r7, #0
   19876:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1987a:	e4e6      	b.n	1924a <__ieee754_pow+0x22a>
   1987c:	f3af 8000 	nop.w
   19880:	652b82fe 	.word	0x652b82fe
   19884:	3c971547 	.word	0x3c971547
   19888:	00000000 	.word	0x00000000
   1988c:	3fe62e43 	.word	0x3fe62e43
   19890:	fefa39ef 	.word	0xfefa39ef
   19894:	3fe62e42 	.word	0x3fe62e42
   19898:	0ca86c39 	.word	0x0ca86c39
   1989c:	be205c61 	.word	0xbe205c61
   198a0:	72bea4d0 	.word	0x72bea4d0
   198a4:	3e663769 	.word	0x3e663769
   198a8:	c5d26bf1 	.word	0xc5d26bf1
   198ac:	3ebbbd41 	.word	0x3ebbbd41
   198b0:	af25de2c 	.word	0xaf25de2c
   198b4:	3f11566a 	.word	0x3f11566a
   198b8:	16bebd93 	.word	0x16bebd93
   198bc:	3f66c16c 	.word	0x3f66c16c
   198c0:	5555553e 	.word	0x5555553e
   198c4:	3fc55555 	.word	0x3fc55555
   198c8:	c2f8f359 	.word	0xc2f8f359
   198cc:	01a56e1f 	.word	0x01a56e1f
   198d0:	3ff00000 	.word	0x3ff00000
   198d4:	bff00000 	.word	0xbff00000
   198d8:	408fffff 	.word	0x408fffff
   198dc:	000fffff 	.word	0x000fffff
   198e0:	4090cbff 	.word	0x4090cbff
   198e4:	3f6f3400 	.word	0x3f6f3400
   198e8:	4b6b      	ldr	r3, [pc, #428]	; (19a98 <__ieee754_pow+0xa78>)
   198ea:	429e      	cmp	r6, r3
   198ec:	f77f ac66 	ble.w	191bc <__ieee754_pow+0x19c>
   198f0:	4b6a      	ldr	r3, [pc, #424]	; (19a9c <__ieee754_pow+0xa7c>)
   198f2:	429e      	cmp	r6, r3
   198f4:	f73f ac13 	bgt.w	1911e <__ieee754_pow+0xfe>
   198f8:	2200      	movs	r2, #0
   198fa:	4b68      	ldr	r3, [pc, #416]	; (19a9c <__ieee754_pow+0xa7c>)
   198fc:	f000 faba 	bl	19e74 <__aeabi_dsub>
   19900:	a357      	add	r3, pc, #348	; (adr r3, 19a60 <__ieee754_pow+0xa40>)
   19902:	e9d3 2300 	ldrd	r2, r3, [r3]
   19906:	4606      	mov	r6, r0
   19908:	460f      	mov	r7, r1
   1990a:	f000 fc67 	bl	1a1dc <__aeabi_dmul>
   1990e:	a356      	add	r3, pc, #344	; (adr r3, 19a68 <__ieee754_pow+0xa48>)
   19910:	e9d3 2300 	ldrd	r2, r3, [r3]
   19914:	4680      	mov	r8, r0
   19916:	4689      	mov	r9, r1
   19918:	4630      	mov	r0, r6
   1991a:	4639      	mov	r1, r7
   1991c:	f000 fc5e 	bl	1a1dc <__aeabi_dmul>
   19920:	2200      	movs	r2, #0
   19922:	4682      	mov	sl, r0
   19924:	468b      	mov	fp, r1
   19926:	4b5e      	ldr	r3, [pc, #376]	; (19aa0 <__ieee754_pow+0xa80>)
   19928:	4630      	mov	r0, r6
   1992a:	4639      	mov	r1, r7
   1992c:	f000 fc56 	bl	1a1dc <__aeabi_dmul>
   19930:	4602      	mov	r2, r0
   19932:	460b      	mov	r3, r1
   19934:	a14e      	add	r1, pc, #312	; (adr r1, 19a70 <__ieee754_pow+0xa50>)
   19936:	e9d1 0100 	ldrd	r0, r1, [r1]
   1993a:	f000 fa9b 	bl	19e74 <__aeabi_dsub>
   1993e:	4632      	mov	r2, r6
   19940:	463b      	mov	r3, r7
   19942:	f000 fc4b 	bl	1a1dc <__aeabi_dmul>
   19946:	4602      	mov	r2, r0
   19948:	460b      	mov	r3, r1
   1994a:	2000      	movs	r0, #0
   1994c:	4955      	ldr	r1, [pc, #340]	; (19aa4 <__ieee754_pow+0xa84>)
   1994e:	f000 fa91 	bl	19e74 <__aeabi_dsub>
   19952:	4632      	mov	r2, r6
   19954:	e9cd 0102 	strd	r0, r1, [sp, #8]
   19958:	463b      	mov	r3, r7
   1995a:	4630      	mov	r0, r6
   1995c:	4639      	mov	r1, r7
   1995e:	f000 fc3d 	bl	1a1dc <__aeabi_dmul>
   19962:	4602      	mov	r2, r0
   19964:	460b      	mov	r3, r1
   19966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1996a:	f000 fc37 	bl	1a1dc <__aeabi_dmul>
   1996e:	a342      	add	r3, pc, #264	; (adr r3, 19a78 <__ieee754_pow+0xa58>)
   19970:	e9d3 2300 	ldrd	r2, r3, [r3]
   19974:	f000 fc32 	bl	1a1dc <__aeabi_dmul>
   19978:	4602      	mov	r2, r0
   1997a:	460b      	mov	r3, r1
   1997c:	4650      	mov	r0, sl
   1997e:	4659      	mov	r1, fp
   19980:	f000 fa78 	bl	19e74 <__aeabi_dsub>
   19984:	4602      	mov	r2, r0
   19986:	460b      	mov	r3, r1
   19988:	4606      	mov	r6, r0
   1998a:	460f      	mov	r7, r1
   1998c:	4640      	mov	r0, r8
   1998e:	4649      	mov	r1, r9
   19990:	f000 fa72 	bl	19e78 <__adddf3>
   19994:	4642      	mov	r2, r8
   19996:	464b      	mov	r3, r9
   19998:	2000      	movs	r0, #0
   1999a:	4682      	mov	sl, r0
   1999c:	468b      	mov	fp, r1
   1999e:	f000 fa69 	bl	19e74 <__aeabi_dsub>
   199a2:	4602      	mov	r2, r0
   199a4:	460b      	mov	r3, r1
   199a6:	4630      	mov	r0, r6
   199a8:	4639      	mov	r1, r7
   199aa:	f000 fa63 	bl	19e74 <__aeabi_dsub>
   199ae:	4680      	mov	r8, r0
   199b0:	4689      	mov	r9, r1
   199b2:	e5d4      	b.n	1955e <__ieee754_pow+0x53e>
   199b4:	4642      	mov	r2, r8
   199b6:	464b      	mov	r3, r9
   199b8:	2000      	movs	r0, #0
   199ba:	4938      	ldr	r1, [pc, #224]	; (19a9c <__ieee754_pow+0xa7c>)
   199bc:	f000 fd38 	bl	1a430 <__aeabi_ddiv>
   199c0:	f7ff bb70 	b.w	190a4 <__ieee754_pow+0x84>
   199c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   199c8:	a32d      	add	r3, pc, #180	; (adr r3, 19a80 <__ieee754_pow+0xa60>)
   199ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   199ce:	f000 fc05 	bl	1a1dc <__aeabi_dmul>
   199d2:	a32b      	add	r3, pc, #172	; (adr r3, 19a80 <__ieee754_pow+0xa60>)
   199d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   199d8:	f000 fc00 	bl	1a1dc <__aeabi_dmul>
   199dc:	f7ff bb62 	b.w	190a4 <__ieee754_pow+0x84>
   199e0:	f1be 0f00 	cmp.w	lr, #0
   199e4:	f47f ab69 	bne.w	190ba <__ieee754_pow+0x9a>
   199e8:	f1c3 0314 	rsb	r3, r3, #20
   199ec:	fa47 f203 	asr.w	r2, r7, r3
   199f0:	fa02 f303 	lsl.w	r3, r2, r3
   199f4:	429f      	cmp	r7, r3
   199f6:	d02a      	beq.n	19a4e <__ieee754_pow+0xa2e>
   199f8:	4674      	mov	r4, lr
   199fa:	f7ff bb36 	b.w	1906a <__ieee754_pow+0x4a>
   199fe:	4b29      	ldr	r3, [pc, #164]	; (19aa4 <__ieee754_pow+0xa84>)
   19a00:	4598      	cmp	r8, r3
   19a02:	f73f ae0e 	bgt.w	19622 <__ieee754_pow+0x602>
   19a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19a0a:	4692      	mov	sl, r2
   19a0c:	4693      	mov	fp, r2
   19a0e:	e638      	b.n	19682 <__ieee754_pow+0x662>
   19a10:	4602      	mov	r2, r0
   19a12:	460b      	mov	r3, r1
   19a14:	f000 fa2e 	bl	19e74 <__aeabi_dsub>
   19a18:	4602      	mov	r2, r0
   19a1a:	460b      	mov	r3, r1
   19a1c:	f000 fd08 	bl	1a430 <__aeabi_ddiv>
   19a20:	f7ff bb40 	b.w	190a4 <__ieee754_pow+0x84>
   19a24:	a318      	add	r3, pc, #96	; (adr r3, 19a88 <__ieee754_pow+0xa68>)
   19a26:	e9d3 2300 	ldrd	r2, r3, [r3]
   19a2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   19a2e:	a318      	add	r3, pc, #96	; (adr r3, 19a90 <__ieee754_pow+0xa70>)
   19a30:	e9d3 2300 	ldrd	r2, r3, [r3]
   19a34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   19a38:	4b1b      	ldr	r3, [pc, #108]	; (19aa8 <__ieee754_pow+0xa88>)
   19a3a:	2200      	movs	r2, #0
   19a3c:	f44f 2780 	mov.w	r7, #262144	; 0x40000
   19a40:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19a44:	e401      	b.n	1924a <__ieee754_pow+0x22a>
   19a46:	465a      	mov	r2, fp
   19a48:	f000 f98a 	bl	19d60 <scalbn>
   19a4c:	e6c9      	b.n	197e2 <__ieee754_pow+0x7c2>
   19a4e:	f002 0201 	and.w	r2, r2, #1
   19a52:	f1c2 0402 	rsb	r4, r2, #2
   19a56:	f7ff bb08 	b.w	1906a <__ieee754_pow+0x4a>
   19a5a:	bf00      	nop
   19a5c:	f3af 8000 	nop.w
   19a60:	60000000 	.word	0x60000000
   19a64:	3ff71547 	.word	0x3ff71547
   19a68:	f85ddf44 	.word	0xf85ddf44
   19a6c:	3e54ae0b 	.word	0x3e54ae0b
   19a70:	55555555 	.word	0x55555555
   19a74:	3fd55555 	.word	0x3fd55555
   19a78:	652b82fe 	.word	0x652b82fe
   19a7c:	3ff71547 	.word	0x3ff71547
   19a80:	8800759c 	.word	0x8800759c
   19a84:	7e37e43c 	.word	0x7e37e43c
   19a88:	40000000 	.word	0x40000000
   19a8c:	3fe2b803 	.word	0x3fe2b803
   19a90:	43cfd006 	.word	0x43cfd006
   19a94:	3e4cfdeb 	.word	0x3e4cfdeb
   19a98:	3feffffe 	.word	0x3feffffe
   19a9c:	3ff00000 	.word	0x3ff00000
   19aa0:	3fd00000 	.word	0x3fd00000
   19aa4:	3fe00000 	.word	0x3fe00000
   19aa8:	3ff80000 	.word	0x3ff80000

00019aac <__ieee754_sqrt>:
   19aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19ab0:	4f5b      	ldr	r7, [pc, #364]	; (19c20 <__ieee754_sqrt+0x174>)
   19ab2:	438f      	bics	r7, r1
   19ab4:	4605      	mov	r5, r0
   19ab6:	460c      	mov	r4, r1
   19ab8:	f000 8092 	beq.w	19be0 <__ieee754_sqrt+0x134>
   19abc:	2900      	cmp	r1, #0
   19abe:	460b      	mov	r3, r1
   19ac0:	4602      	mov	r2, r0
   19ac2:	dd6f      	ble.n	19ba4 <__ieee754_sqrt+0xf8>
   19ac4:	150f      	asrs	r7, r1, #20
   19ac6:	d07b      	beq.n	19bc0 <__ieee754_sqrt+0x114>
   19ac8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   19acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
   19ad0:	07f8      	lsls	r0, r7, #31
   19ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   19ad6:	d45c      	bmi.n	19b92 <__ieee754_sqrt+0xe6>
   19ad8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   19adc:	2600      	movs	r6, #0
   19ade:	440b      	add	r3, r1
   19ae0:	107f      	asrs	r7, r7, #1
   19ae2:	0052      	lsls	r2, r2, #1
   19ae4:	46b6      	mov	lr, r6
   19ae6:	2016      	movs	r0, #22
   19ae8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   19aec:	eb0e 0401 	add.w	r4, lr, r1
   19af0:	429c      	cmp	r4, r3
   19af2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   19af6:	ea4f 0242 	mov.w	r2, r2, lsl #1
   19afa:	dc03      	bgt.n	19b04 <__ieee754_sqrt+0x58>
   19afc:	1b1b      	subs	r3, r3, r4
   19afe:	eb04 0e01 	add.w	lr, r4, r1
   19b02:	440e      	add	r6, r1
   19b04:	3801      	subs	r0, #1
   19b06:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   19b0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   19b0e:	d1ed      	bne.n	19aec <__ieee754_sqrt+0x40>
   19b10:	4684      	mov	ip, r0
   19b12:	2420      	movs	r4, #32
   19b14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   19b18:	e009      	b.n	19b2e <__ieee754_sqrt+0x82>
   19b1a:	d020      	beq.n	19b5e <__ieee754_sqrt+0xb2>
   19b1c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   19b20:	3c01      	subs	r4, #1
   19b22:	ea4f 0151 	mov.w	r1, r1, lsr #1
   19b26:	442b      	add	r3, r5
   19b28:	ea4f 0242 	mov.w	r2, r2, lsl #1
   19b2c:	d020      	beq.n	19b70 <__ieee754_sqrt+0xc4>
   19b2e:	4573      	cmp	r3, lr
   19b30:	eb01 050c 	add.w	r5, r1, ip
   19b34:	ddf1      	ble.n	19b1a <__ieee754_sqrt+0x6e>
   19b36:	2d00      	cmp	r5, #0
   19b38:	eb05 0c01 	add.w	ip, r5, r1
   19b3c:	db09      	blt.n	19b52 <__ieee754_sqrt+0xa6>
   19b3e:	46f0      	mov	r8, lr
   19b40:	4295      	cmp	r5, r2
   19b42:	eba3 030e 	sub.w	r3, r3, lr
   19b46:	d900      	bls.n	19b4a <__ieee754_sqrt+0x9e>
   19b48:	3b01      	subs	r3, #1
   19b4a:	1b52      	subs	r2, r2, r5
   19b4c:	4408      	add	r0, r1
   19b4e:	46c6      	mov	lr, r8
   19b50:	e7e4      	b.n	19b1c <__ieee754_sqrt+0x70>
   19b52:	f1bc 0f00 	cmp.w	ip, #0
   19b56:	dbf2      	blt.n	19b3e <__ieee754_sqrt+0x92>
   19b58:	f10e 0801 	add.w	r8, lr, #1
   19b5c:	e7f0      	b.n	19b40 <__ieee754_sqrt+0x94>
   19b5e:	4295      	cmp	r5, r2
   19b60:	d8dc      	bhi.n	19b1c <__ieee754_sqrt+0x70>
   19b62:	2d00      	cmp	r5, #0
   19b64:	eb05 0c01 	add.w	ip, r5, r1
   19b68:	db44      	blt.n	19bf4 <__ieee754_sqrt+0x148>
   19b6a:	4698      	mov	r8, r3
   19b6c:	2300      	movs	r3, #0
   19b6e:	e7ec      	b.n	19b4a <__ieee754_sqrt+0x9e>
   19b70:	4313      	orrs	r3, r2
   19b72:	d113      	bne.n	19b9c <__ieee754_sqrt+0xf0>
   19b74:	0840      	lsrs	r0, r0, #1
   19b76:	1073      	asrs	r3, r6, #1
   19b78:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   19b7c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   19b80:	07f2      	lsls	r2, r6, #31
   19b82:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   19b86:	bf48      	it	mi
   19b88:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   19b8c:	4649      	mov	r1, r9
   19b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19b92:	005b      	lsls	r3, r3, #1
   19b94:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   19b98:	0052      	lsls	r2, r2, #1
   19b9a:	e79d      	b.n	19ad8 <__ieee754_sqrt+0x2c>
   19b9c:	1c41      	adds	r1, r0, #1
   19b9e:	d02d      	beq.n	19bfc <__ieee754_sqrt+0x150>
   19ba0:	3001      	adds	r0, #1
   19ba2:	e7e7      	b.n	19b74 <__ieee754_sqrt+0xc8>
   19ba4:	4606      	mov	r6, r0
   19ba6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   19baa:	433e      	orrs	r6, r7
   19bac:	d0ef      	beq.n	19b8e <__ieee754_sqrt+0xe2>
   19bae:	bb69      	cbnz	r1, 19c0c <__ieee754_sqrt+0x160>
   19bb0:	460f      	mov	r7, r1
   19bb2:	0ad3      	lsrs	r3, r2, #11
   19bb4:	3f15      	subs	r7, #21
   19bb6:	0552      	lsls	r2, r2, #21
   19bb8:	2b00      	cmp	r3, #0
   19bba:	d0fa      	beq.n	19bb2 <__ieee754_sqrt+0x106>
   19bbc:	02de      	lsls	r6, r3, #11
   19bbe:	d420      	bmi.n	19c02 <__ieee754_sqrt+0x156>
   19bc0:	2400      	movs	r4, #0
   19bc2:	e000      	b.n	19bc6 <__ieee754_sqrt+0x11a>
   19bc4:	4604      	mov	r4, r0
   19bc6:	005b      	lsls	r3, r3, #1
   19bc8:	02dd      	lsls	r5, r3, #11
   19bca:	f104 0001 	add.w	r0, r4, #1
   19bce:	d5f9      	bpl.n	19bc4 <__ieee754_sqrt+0x118>
   19bd0:	f1c0 0120 	rsb	r1, r0, #32
   19bd4:	fa22 f101 	lsr.w	r1, r2, r1
   19bd8:	430b      	orrs	r3, r1
   19bda:	1b3f      	subs	r7, r7, r4
   19bdc:	4082      	lsls	r2, r0
   19bde:	e773      	b.n	19ac8 <__ieee754_sqrt+0x1c>
   19be0:	4602      	mov	r2, r0
   19be2:	460b      	mov	r3, r1
   19be4:	f000 fafa 	bl	1a1dc <__aeabi_dmul>
   19be8:	462a      	mov	r2, r5
   19bea:	4623      	mov	r3, r4
   19bec:	f000 f944 	bl	19e78 <__adddf3>
   19bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19bf4:	f1bc 0f00 	cmp.w	ip, #0
   19bf8:	daae      	bge.n	19b58 <__ieee754_sqrt+0xac>
   19bfa:	e7b6      	b.n	19b6a <__ieee754_sqrt+0xbe>
   19bfc:	3601      	adds	r6, #1
   19bfe:	4620      	mov	r0, r4
   19c00:	e7b9      	b.n	19b76 <__ieee754_sqrt+0xca>
   19c02:	2000      	movs	r0, #0
   19c04:	2120      	movs	r1, #32
   19c06:	f04f 34ff 	mov.w	r4, #4294967295
   19c0a:	e7e3      	b.n	19bd4 <__ieee754_sqrt+0x128>
   19c0c:	4602      	mov	r2, r0
   19c0e:	460b      	mov	r3, r1
   19c10:	f000 f930 	bl	19e74 <__aeabi_dsub>
   19c14:	4602      	mov	r2, r0
   19c16:	460b      	mov	r3, r1
   19c18:	f000 fc0a 	bl	1a430 <__aeabi_ddiv>
   19c1c:	e7b7      	b.n	19b8e <__ieee754_sqrt+0xe2>
   19c1e:	bf00      	nop
   19c20:	7ff00000 	.word	0x7ff00000

00019c24 <fabs>:
   19c24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   19c28:	4770      	bx	lr
   19c2a:	bf00      	nop

00019c2c <finite>:
   19c2c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   19c30:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
   19c34:	0fc0      	lsrs	r0, r0, #31
   19c36:	4770      	bx	lr

00019c38 <matherr>:
   19c38:	2000      	movs	r0, #0
   19c3a:	4770      	bx	lr

00019c3c <nan>:
   19c3c:	2000      	movs	r0, #0
   19c3e:	4901      	ldr	r1, [pc, #4]	; (19c44 <nan+0x8>)
   19c40:	4770      	bx	lr
   19c42:	bf00      	nop
   19c44:	7ff80000 	.word	0x7ff80000

00019c48 <rint>:
   19c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c4a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
   19c4e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
   19c52:	2e13      	cmp	r6, #19
   19c54:	b083      	sub	sp, #12
   19c56:	4602      	mov	r2, r0
   19c58:	460b      	mov	r3, r1
   19c5a:	460c      	mov	r4, r1
   19c5c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
   19c60:	4607      	mov	r7, r0
   19c62:	dc2e      	bgt.n	19cc2 <rint+0x7a>
   19c64:	2e00      	cmp	r6, #0
   19c66:	db49      	blt.n	19cfc <rint+0xb4>
   19c68:	493a      	ldr	r1, [pc, #232]	; (19d54 <rint+0x10c>)
   19c6a:	4131      	asrs	r1, r6
   19c6c:	ea03 0001 	and.w	r0, r3, r1
   19c70:	4310      	orrs	r0, r2
   19c72:	d02b      	beq.n	19ccc <rint+0x84>
   19c74:	0849      	lsrs	r1, r1, #1
   19c76:	400b      	ands	r3, r1
   19c78:	ea53 0702 	orrs.w	r7, r3, r2
   19c7c:	d00c      	beq.n	19c98 <rint+0x50>
   19c7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   19c82:	2e13      	cmp	r6, #19
   19c84:	ea24 0101 	bic.w	r1, r4, r1
   19c88:	fa43 f406 	asr.w	r4, r3, r6
   19c8c:	ea44 0401 	orr.w	r4, r4, r1
   19c90:	bf0c      	ite	eq
   19c92:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   19c96:	2700      	movne	r7, #0
   19c98:	4b2f      	ldr	r3, [pc, #188]	; (19d58 <rint+0x110>)
   19c9a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   19c9e:	4621      	mov	r1, r4
   19ca0:	e9d5 4500 	ldrd	r4, r5, [r5]
   19ca4:	4638      	mov	r0, r7
   19ca6:	4622      	mov	r2, r4
   19ca8:	462b      	mov	r3, r5
   19caa:	f000 f8e5 	bl	19e78 <__adddf3>
   19cae:	e9cd 0100 	strd	r0, r1, [sp]
   19cb2:	4622      	mov	r2, r4
   19cb4:	462b      	mov	r3, r5
   19cb6:	e9dd 0100 	ldrd	r0, r1, [sp]
   19cba:	f000 f8db 	bl	19e74 <__aeabi_dsub>
   19cbe:	b003      	add	sp, #12
   19cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19cc2:	2e33      	cmp	r6, #51	; 0x33
   19cc4:	dd06      	ble.n	19cd4 <rint+0x8c>
   19cc6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   19cca:	d040      	beq.n	19d4e <rint+0x106>
   19ccc:	4610      	mov	r0, r2
   19cce:	4619      	mov	r1, r3
   19cd0:	b003      	add	sp, #12
   19cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19cd4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
   19cd8:	f04f 31ff 	mov.w	r1, #4294967295
   19cdc:	fa21 f10e 	lsr.w	r1, r1, lr
   19ce0:	4208      	tst	r0, r1
   19ce2:	d0f3      	beq.n	19ccc <rint+0x84>
   19ce4:	0849      	lsrs	r1, r1, #1
   19ce6:	4208      	tst	r0, r1
   19ce8:	d0d6      	beq.n	19c98 <rint+0x50>
   19cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19cee:	ea20 0101 	bic.w	r1, r0, r1
   19cf2:	fa43 fe0e 	asr.w	lr, r3, lr
   19cf6:	ea4e 0701 	orr.w	r7, lr, r1
   19cfa:	e7cd      	b.n	19c98 <rint+0x50>
   19cfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   19d00:	4301      	orrs	r1, r0
   19d02:	d0e3      	beq.n	19ccc <rint+0x84>
   19d04:	f3c3 0113 	ubfx	r1, r3, #0, #20
   19d08:	4e13      	ldr	r6, [pc, #76]	; (19d58 <rint+0x110>)
   19d0a:	4301      	orrs	r1, r0
   19d0c:	f1c1 0c00 	rsb	ip, r1, #0
   19d10:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
   19d14:	e9d6 6700 	ldrd	r6, r7, [r6]
   19d18:	ea4c 0c01 	orr.w	ip, ip, r1
   19d1c:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   19d20:	0c5c      	lsrs	r4, r3, #17
   19d22:	0464      	lsls	r4, r4, #17
   19d24:	f40c 2300 	and.w	r3, ip, #524288	; 0x80000
   19d28:	ea43 0104 	orr.w	r1, r3, r4
   19d2c:	4632      	mov	r2, r6
   19d2e:	463b      	mov	r3, r7
   19d30:	f000 f8a2 	bl	19e78 <__adddf3>
   19d34:	e9cd 0100 	strd	r0, r1, [sp]
   19d38:	4632      	mov	r2, r6
   19d3a:	463b      	mov	r3, r7
   19d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
   19d40:	f000 f898 	bl	19e74 <__aeabi_dsub>
   19d44:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   19d48:	ea44 71c5 	orr.w	r1, r4, r5, lsl #31
   19d4c:	e7c0      	b.n	19cd0 <rint+0x88>
   19d4e:	f000 f893 	bl	19e78 <__adddf3>
   19d52:	e7bd      	b.n	19cd0 <rint+0x88>
   19d54:	000fffff 	.word	0x000fffff
   19d58:	00021298 	.word	0x00021298
   19d5c:	00000000 	.word	0x00000000

00019d60 <scalbn>:
   19d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d62:	f3c1 560a 	ubfx	r6, r1, #20, #11
   19d66:	4604      	mov	r4, r0
   19d68:	460d      	mov	r5, r1
   19d6a:	460b      	mov	r3, r1
   19d6c:	4617      	mov	r7, r2
   19d6e:	bb0e      	cbnz	r6, 19db4 <scalbn+0x54>
   19d70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   19d74:	4303      	orrs	r3, r0
   19d76:	4686      	mov	lr, r0
   19d78:	d025      	beq.n	19dc6 <scalbn+0x66>
   19d7a:	2200      	movs	r2, #0
   19d7c:	4b34      	ldr	r3, [pc, #208]	; (19e50 <scalbn+0xf0>)
   19d7e:	f000 fa2d 	bl	1a1dc <__aeabi_dmul>
   19d82:	4a34      	ldr	r2, [pc, #208]	; (19e54 <scalbn+0xf4>)
   19d84:	4297      	cmp	r7, r2
   19d86:	4604      	mov	r4, r0
   19d88:	460d      	mov	r5, r1
   19d8a:	460b      	mov	r3, r1
   19d8c:	db2a      	blt.n	19de4 <scalbn+0x84>
   19d8e:	f3c1 560a 	ubfx	r6, r1, #20, #11
   19d92:	3e36      	subs	r6, #54	; 0x36
   19d94:	443e      	add	r6, r7
   19d96:	f240 72fe 	movw	r2, #2046	; 0x7fe
   19d9a:	4296      	cmp	r6, r2
   19d9c:	dc28      	bgt.n	19df0 <scalbn+0x90>
   19d9e:	2e00      	cmp	r6, #0
   19da0:	dd12      	ble.n	19dc8 <scalbn+0x68>
   19da2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   19da6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   19daa:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   19dae:	4620      	mov	r0, r4
   19db0:	4629      	mov	r1, r5
   19db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19db4:	f240 72ff 	movw	r2, #2047	; 0x7ff
   19db8:	4296      	cmp	r6, r2
   19dba:	d1eb      	bne.n	19d94 <scalbn+0x34>
   19dbc:	4602      	mov	r2, r0
   19dbe:	460b      	mov	r3, r1
   19dc0:	f000 f85a 	bl	19e78 <__adddf3>
   19dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19dc8:	f116 0f35 	cmn.w	r6, #53	; 0x35
   19dcc:	da1d      	bge.n	19e0a <scalbn+0xaa>
   19dce:	f24c 3350 	movw	r3, #50000	; 0xc350
   19dd2:	429f      	cmp	r7, r3
   19dd4:	4622      	mov	r2, r4
   19dd6:	462b      	mov	r3, r5
   19dd8:	dc25      	bgt.n	19e26 <scalbn+0xc6>
   19dda:	a119      	add	r1, pc, #100	; (adr r1, 19e40 <scalbn+0xe0>)
   19ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
   19de0:	f000 f83c 	bl	19e5c <copysign>
   19de4:	a316      	add	r3, pc, #88	; (adr r3, 19e40 <scalbn+0xe0>)
   19de6:	e9d3 2300 	ldrd	r2, r3, [r3]
   19dea:	f000 f9f7 	bl	1a1dc <__aeabi_dmul>
   19dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19df0:	4622      	mov	r2, r4
   19df2:	462b      	mov	r3, r5
   19df4:	a114      	add	r1, pc, #80	; (adr r1, 19e48 <scalbn+0xe8>)
   19df6:	e9d1 0100 	ldrd	r0, r1, [r1]
   19dfa:	f000 f82f 	bl	19e5c <copysign>
   19dfe:	a312      	add	r3, pc, #72	; (adr r3, 19e48 <scalbn+0xe8>)
   19e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   19e04:	f000 f9ea 	bl	1a1dc <__aeabi_dmul>
   19e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19e0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   19e0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   19e12:	3636      	adds	r6, #54	; 0x36
   19e14:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   19e18:	4620      	mov	r0, r4
   19e1a:	4629      	mov	r1, r5
   19e1c:	2200      	movs	r2, #0
   19e1e:	4b0e      	ldr	r3, [pc, #56]	; (19e58 <scalbn+0xf8>)
   19e20:	f000 f9dc 	bl	1a1dc <__aeabi_dmul>
   19e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19e26:	a108      	add	r1, pc, #32	; (adr r1, 19e48 <scalbn+0xe8>)
   19e28:	e9d1 0100 	ldrd	r0, r1, [r1]
   19e2c:	f000 f816 	bl	19e5c <copysign>
   19e30:	a305      	add	r3, pc, #20	; (adr r3, 19e48 <scalbn+0xe8>)
   19e32:	e9d3 2300 	ldrd	r2, r3, [r3]
   19e36:	f000 f9d1 	bl	1a1dc <__aeabi_dmul>
   19e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19e3c:	f3af 8000 	nop.w
   19e40:	c2f8f359 	.word	0xc2f8f359
   19e44:	01a56e1f 	.word	0x01a56e1f
   19e48:	8800759c 	.word	0x8800759c
   19e4c:	7e37e43c 	.word	0x7e37e43c
   19e50:	43500000 	.word	0x43500000
   19e54:	ffff3cb0 	.word	0xffff3cb0
   19e58:	3c900000 	.word	0x3c900000

00019e5c <copysign>:
   19e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   19e60:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   19e64:	ea42 0103 	orr.w	r1, r2, r3
   19e68:	4770      	bx	lr
   19e6a:	bf00      	nop

00019e6c <__aeabi_drsub>:
   19e6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   19e70:	e002      	b.n	19e78 <__adddf3>
   19e72:	bf00      	nop

00019e74 <__aeabi_dsub>:
   19e74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00019e78 <__adddf3>:
   19e78:	b530      	push	{r4, r5, lr}
   19e7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   19e7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   19e82:	ea94 0f05 	teq	r4, r5
   19e86:	bf08      	it	eq
   19e88:	ea90 0f02 	teqeq	r0, r2
   19e8c:	bf1f      	itttt	ne
   19e8e:	ea54 0c00 	orrsne.w	ip, r4, r0
   19e92:	ea55 0c02 	orrsne.w	ip, r5, r2
   19e96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   19e9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   19e9e:	f000 80e2 	beq.w	1a066 <__adddf3+0x1ee>
   19ea2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   19ea6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   19eaa:	bfb8      	it	lt
   19eac:	426d      	neglt	r5, r5
   19eae:	dd0c      	ble.n	19eca <__adddf3+0x52>
   19eb0:	442c      	add	r4, r5
   19eb2:	ea80 0202 	eor.w	r2, r0, r2
   19eb6:	ea81 0303 	eor.w	r3, r1, r3
   19eba:	ea82 0000 	eor.w	r0, r2, r0
   19ebe:	ea83 0101 	eor.w	r1, r3, r1
   19ec2:	ea80 0202 	eor.w	r2, r0, r2
   19ec6:	ea81 0303 	eor.w	r3, r1, r3
   19eca:	2d36      	cmp	r5, #54	; 0x36
   19ecc:	bf88      	it	hi
   19ece:	bd30      	pophi	{r4, r5, pc}
   19ed0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   19ed4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   19ed8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   19edc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   19ee0:	d002      	beq.n	19ee8 <__adddf3+0x70>
   19ee2:	4240      	negs	r0, r0
   19ee4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19ee8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   19eec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   19ef0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   19ef4:	d002      	beq.n	19efc <__adddf3+0x84>
   19ef6:	4252      	negs	r2, r2
   19ef8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   19efc:	ea94 0f05 	teq	r4, r5
   19f00:	f000 80a7 	beq.w	1a052 <__adddf3+0x1da>
   19f04:	f1a4 0401 	sub.w	r4, r4, #1
   19f08:	f1d5 0e20 	rsbs	lr, r5, #32
   19f0c:	db0d      	blt.n	19f2a <__adddf3+0xb2>
   19f0e:	fa02 fc0e 	lsl.w	ip, r2, lr
   19f12:	fa22 f205 	lsr.w	r2, r2, r5
   19f16:	1880      	adds	r0, r0, r2
   19f18:	f141 0100 	adc.w	r1, r1, #0
   19f1c:	fa03 f20e 	lsl.w	r2, r3, lr
   19f20:	1880      	adds	r0, r0, r2
   19f22:	fa43 f305 	asr.w	r3, r3, r5
   19f26:	4159      	adcs	r1, r3
   19f28:	e00e      	b.n	19f48 <__adddf3+0xd0>
   19f2a:	f1a5 0520 	sub.w	r5, r5, #32
   19f2e:	f10e 0e20 	add.w	lr, lr, #32
   19f32:	2a01      	cmp	r2, #1
   19f34:	fa03 fc0e 	lsl.w	ip, r3, lr
   19f38:	bf28      	it	cs
   19f3a:	f04c 0c02 	orrcs.w	ip, ip, #2
   19f3e:	fa43 f305 	asr.w	r3, r3, r5
   19f42:	18c0      	adds	r0, r0, r3
   19f44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   19f48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19f4c:	d507      	bpl.n	19f5e <__adddf3+0xe6>
   19f4e:	f04f 0e00 	mov.w	lr, #0
   19f52:	f1dc 0c00 	rsbs	ip, ip, #0
   19f56:	eb7e 0000 	sbcs.w	r0, lr, r0
   19f5a:	eb6e 0101 	sbc.w	r1, lr, r1
   19f5e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   19f62:	d31b      	bcc.n	19f9c <__adddf3+0x124>
   19f64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   19f68:	d30c      	bcc.n	19f84 <__adddf3+0x10c>
   19f6a:	0849      	lsrs	r1, r1, #1
   19f6c:	ea5f 0030 	movs.w	r0, r0, rrx
   19f70:	ea4f 0c3c 	mov.w	ip, ip, rrx
   19f74:	f104 0401 	add.w	r4, r4, #1
   19f78:	ea4f 5244 	mov.w	r2, r4, lsl #21
   19f7c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   19f80:	f080 809a 	bcs.w	1a0b8 <__adddf3+0x240>
   19f84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   19f88:	bf08      	it	eq
   19f8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   19f8e:	f150 0000 	adcs.w	r0, r0, #0
   19f92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   19f96:	ea41 0105 	orr.w	r1, r1, r5
   19f9a:	bd30      	pop	{r4, r5, pc}
   19f9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   19fa0:	4140      	adcs	r0, r0
   19fa2:	eb41 0101 	adc.w	r1, r1, r1
   19fa6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   19faa:	f1a4 0401 	sub.w	r4, r4, #1
   19fae:	d1e9      	bne.n	19f84 <__adddf3+0x10c>
   19fb0:	f091 0f00 	teq	r1, #0
   19fb4:	bf04      	itt	eq
   19fb6:	4601      	moveq	r1, r0
   19fb8:	2000      	moveq	r0, #0
   19fba:	fab1 f381 	clz	r3, r1
   19fbe:	bf08      	it	eq
   19fc0:	3320      	addeq	r3, #32
   19fc2:	f1a3 030b 	sub.w	r3, r3, #11
   19fc6:	f1b3 0220 	subs.w	r2, r3, #32
   19fca:	da0c      	bge.n	19fe6 <__adddf3+0x16e>
   19fcc:	320c      	adds	r2, #12
   19fce:	dd08      	ble.n	19fe2 <__adddf3+0x16a>
   19fd0:	f102 0c14 	add.w	ip, r2, #20
   19fd4:	f1c2 020c 	rsb	r2, r2, #12
   19fd8:	fa01 f00c 	lsl.w	r0, r1, ip
   19fdc:	fa21 f102 	lsr.w	r1, r1, r2
   19fe0:	e00c      	b.n	19ffc <__adddf3+0x184>
   19fe2:	f102 0214 	add.w	r2, r2, #20
   19fe6:	bfd8      	it	le
   19fe8:	f1c2 0c20 	rsble	ip, r2, #32
   19fec:	fa01 f102 	lsl.w	r1, r1, r2
   19ff0:	fa20 fc0c 	lsr.w	ip, r0, ip
   19ff4:	bfdc      	itt	le
   19ff6:	ea41 010c 	orrle.w	r1, r1, ip
   19ffa:	4090      	lslle	r0, r2
   19ffc:	1ae4      	subs	r4, r4, r3
   19ffe:	bfa2      	ittt	ge
   1a000:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1a004:	4329      	orrge	r1, r5
   1a006:	bd30      	popge	{r4, r5, pc}
   1a008:	ea6f 0404 	mvn.w	r4, r4
   1a00c:	3c1f      	subs	r4, #31
   1a00e:	da1c      	bge.n	1a04a <__adddf3+0x1d2>
   1a010:	340c      	adds	r4, #12
   1a012:	dc0e      	bgt.n	1a032 <__adddf3+0x1ba>
   1a014:	f104 0414 	add.w	r4, r4, #20
   1a018:	f1c4 0220 	rsb	r2, r4, #32
   1a01c:	fa20 f004 	lsr.w	r0, r0, r4
   1a020:	fa01 f302 	lsl.w	r3, r1, r2
   1a024:	ea40 0003 	orr.w	r0, r0, r3
   1a028:	fa21 f304 	lsr.w	r3, r1, r4
   1a02c:	ea45 0103 	orr.w	r1, r5, r3
   1a030:	bd30      	pop	{r4, r5, pc}
   1a032:	f1c4 040c 	rsb	r4, r4, #12
   1a036:	f1c4 0220 	rsb	r2, r4, #32
   1a03a:	fa20 f002 	lsr.w	r0, r0, r2
   1a03e:	fa01 f304 	lsl.w	r3, r1, r4
   1a042:	ea40 0003 	orr.w	r0, r0, r3
   1a046:	4629      	mov	r1, r5
   1a048:	bd30      	pop	{r4, r5, pc}
   1a04a:	fa21 f004 	lsr.w	r0, r1, r4
   1a04e:	4629      	mov	r1, r5
   1a050:	bd30      	pop	{r4, r5, pc}
   1a052:	f094 0f00 	teq	r4, #0
   1a056:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1a05a:	bf06      	itte	eq
   1a05c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1a060:	3401      	addeq	r4, #1
   1a062:	3d01      	subne	r5, #1
   1a064:	e74e      	b.n	19f04 <__adddf3+0x8c>
   1a066:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a06a:	bf18      	it	ne
   1a06c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1a070:	d029      	beq.n	1a0c6 <__adddf3+0x24e>
   1a072:	ea94 0f05 	teq	r4, r5
   1a076:	bf08      	it	eq
   1a078:	ea90 0f02 	teqeq	r0, r2
   1a07c:	d005      	beq.n	1a08a <__adddf3+0x212>
   1a07e:	ea54 0c00 	orrs.w	ip, r4, r0
   1a082:	bf04      	itt	eq
   1a084:	4619      	moveq	r1, r3
   1a086:	4610      	moveq	r0, r2
   1a088:	bd30      	pop	{r4, r5, pc}
   1a08a:	ea91 0f03 	teq	r1, r3
   1a08e:	bf1e      	ittt	ne
   1a090:	2100      	movne	r1, #0
   1a092:	2000      	movne	r0, #0
   1a094:	bd30      	popne	{r4, r5, pc}
   1a096:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1a09a:	d105      	bne.n	1a0a8 <__adddf3+0x230>
   1a09c:	0040      	lsls	r0, r0, #1
   1a09e:	4149      	adcs	r1, r1
   1a0a0:	bf28      	it	cs
   1a0a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1a0a6:	bd30      	pop	{r4, r5, pc}
   1a0a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1a0ac:	bf3c      	itt	cc
   1a0ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1a0b2:	bd30      	popcc	{r4, r5, pc}
   1a0b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a0b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1a0bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1a0c0:	f04f 0000 	mov.w	r0, #0
   1a0c4:	bd30      	pop	{r4, r5, pc}
   1a0c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a0ca:	bf1a      	itte	ne
   1a0cc:	4619      	movne	r1, r3
   1a0ce:	4610      	movne	r0, r2
   1a0d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1a0d4:	bf1c      	itt	ne
   1a0d6:	460b      	movne	r3, r1
   1a0d8:	4602      	movne	r2, r0
   1a0da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1a0de:	bf06      	itte	eq
   1a0e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1a0e4:	ea91 0f03 	teqeq	r1, r3
   1a0e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1a0ec:	bd30      	pop	{r4, r5, pc}
   1a0ee:	bf00      	nop

0001a0f0 <__aeabi_ui2d>:
   1a0f0:	f090 0f00 	teq	r0, #0
   1a0f4:	bf04      	itt	eq
   1a0f6:	2100      	moveq	r1, #0
   1a0f8:	4770      	bxeq	lr
   1a0fa:	b530      	push	{r4, r5, lr}
   1a0fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a100:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a104:	f04f 0500 	mov.w	r5, #0
   1a108:	f04f 0100 	mov.w	r1, #0
   1a10c:	e750      	b.n	19fb0 <__adddf3+0x138>
   1a10e:	bf00      	nop

0001a110 <__aeabi_i2d>:
   1a110:	f090 0f00 	teq	r0, #0
   1a114:	bf04      	itt	eq
   1a116:	2100      	moveq	r1, #0
   1a118:	4770      	bxeq	lr
   1a11a:	b530      	push	{r4, r5, lr}
   1a11c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a120:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a124:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1a128:	bf48      	it	mi
   1a12a:	4240      	negmi	r0, r0
   1a12c:	f04f 0100 	mov.w	r1, #0
   1a130:	e73e      	b.n	19fb0 <__adddf3+0x138>
   1a132:	bf00      	nop

0001a134 <__aeabi_f2d>:
   1a134:	0042      	lsls	r2, r0, #1
   1a136:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1a13a:	ea4f 0131 	mov.w	r1, r1, rrx
   1a13e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1a142:	bf1f      	itttt	ne
   1a144:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1a148:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1a14c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1a150:	4770      	bxne	lr
   1a152:	f092 0f00 	teq	r2, #0
   1a156:	bf14      	ite	ne
   1a158:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1a15c:	4770      	bxeq	lr
   1a15e:	b530      	push	{r4, r5, lr}
   1a160:	f44f 7460 	mov.w	r4, #896	; 0x380
   1a164:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a168:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1a16c:	e720      	b.n	19fb0 <__adddf3+0x138>
   1a16e:	bf00      	nop

0001a170 <__aeabi_ul2d>:
   1a170:	ea50 0201 	orrs.w	r2, r0, r1
   1a174:	bf08      	it	eq
   1a176:	4770      	bxeq	lr
   1a178:	b530      	push	{r4, r5, lr}
   1a17a:	f04f 0500 	mov.w	r5, #0
   1a17e:	e00a      	b.n	1a196 <__aeabi_l2d+0x16>

0001a180 <__aeabi_l2d>:
   1a180:	ea50 0201 	orrs.w	r2, r0, r1
   1a184:	bf08      	it	eq
   1a186:	4770      	bxeq	lr
   1a188:	b530      	push	{r4, r5, lr}
   1a18a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1a18e:	d502      	bpl.n	1a196 <__aeabi_l2d+0x16>
   1a190:	4240      	negs	r0, r0
   1a192:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a196:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a19a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a19e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1a1a2:	f43f aedc 	beq.w	19f5e <__adddf3+0xe6>
   1a1a6:	f04f 0203 	mov.w	r2, #3
   1a1aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1a1ae:	bf18      	it	ne
   1a1b0:	3203      	addne	r2, #3
   1a1b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1a1b6:	bf18      	it	ne
   1a1b8:	3203      	addne	r2, #3
   1a1ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1a1be:	f1c2 0320 	rsb	r3, r2, #32
   1a1c2:	fa00 fc03 	lsl.w	ip, r0, r3
   1a1c6:	fa20 f002 	lsr.w	r0, r0, r2
   1a1ca:	fa01 fe03 	lsl.w	lr, r1, r3
   1a1ce:	ea40 000e 	orr.w	r0, r0, lr
   1a1d2:	fa21 f102 	lsr.w	r1, r1, r2
   1a1d6:	4414      	add	r4, r2
   1a1d8:	e6c1      	b.n	19f5e <__adddf3+0xe6>
   1a1da:	bf00      	nop

0001a1dc <__aeabi_dmul>:
   1a1dc:	b570      	push	{r4, r5, r6, lr}
   1a1de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a1e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1a1e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1a1ea:	bf1d      	ittte	ne
   1a1ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1a1f0:	ea94 0f0c 	teqne	r4, ip
   1a1f4:	ea95 0f0c 	teqne	r5, ip
   1a1f8:	f000 f8de 	bleq	1a3b8 <__aeabi_dmul+0x1dc>
   1a1fc:	442c      	add	r4, r5
   1a1fe:	ea81 0603 	eor.w	r6, r1, r3
   1a202:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1a206:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1a20a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1a20e:	bf18      	it	ne
   1a210:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1a214:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a218:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1a21c:	d038      	beq.n	1a290 <__aeabi_dmul+0xb4>
   1a21e:	fba0 ce02 	umull	ip, lr, r0, r2
   1a222:	f04f 0500 	mov.w	r5, #0
   1a226:	fbe1 e502 	umlal	lr, r5, r1, r2
   1a22a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1a22e:	fbe0 e503 	umlal	lr, r5, r0, r3
   1a232:	f04f 0600 	mov.w	r6, #0
   1a236:	fbe1 5603 	umlal	r5, r6, r1, r3
   1a23a:	f09c 0f00 	teq	ip, #0
   1a23e:	bf18      	it	ne
   1a240:	f04e 0e01 	orrne.w	lr, lr, #1
   1a244:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1a248:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1a24c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1a250:	d204      	bcs.n	1a25c <__aeabi_dmul+0x80>
   1a252:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1a256:	416d      	adcs	r5, r5
   1a258:	eb46 0606 	adc.w	r6, r6, r6
   1a25c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1a260:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1a264:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1a268:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1a26c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1a270:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1a274:	bf88      	it	hi
   1a276:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1a27a:	d81e      	bhi.n	1a2ba <__aeabi_dmul+0xde>
   1a27c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1a280:	bf08      	it	eq
   1a282:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1a286:	f150 0000 	adcs.w	r0, r0, #0
   1a28a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1a28e:	bd70      	pop	{r4, r5, r6, pc}
   1a290:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1a294:	ea46 0101 	orr.w	r1, r6, r1
   1a298:	ea40 0002 	orr.w	r0, r0, r2
   1a29c:	ea81 0103 	eor.w	r1, r1, r3
   1a2a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1a2a4:	bfc2      	ittt	gt
   1a2a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   1a2aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1a2ae:	bd70      	popgt	{r4, r5, r6, pc}
   1a2b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a2b4:	f04f 0e00 	mov.w	lr, #0
   1a2b8:	3c01      	subs	r4, #1
   1a2ba:	f300 80ab 	bgt.w	1a414 <__aeabi_dmul+0x238>
   1a2be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1a2c2:	bfde      	ittt	le
   1a2c4:	2000      	movle	r0, #0
   1a2c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1a2ca:	bd70      	pople	{r4, r5, r6, pc}
   1a2cc:	f1c4 0400 	rsb	r4, r4, #0
   1a2d0:	3c20      	subs	r4, #32
   1a2d2:	da35      	bge.n	1a340 <__aeabi_dmul+0x164>
   1a2d4:	340c      	adds	r4, #12
   1a2d6:	dc1b      	bgt.n	1a310 <__aeabi_dmul+0x134>
   1a2d8:	f104 0414 	add.w	r4, r4, #20
   1a2dc:	f1c4 0520 	rsb	r5, r4, #32
   1a2e0:	fa00 f305 	lsl.w	r3, r0, r5
   1a2e4:	fa20 f004 	lsr.w	r0, r0, r4
   1a2e8:	fa01 f205 	lsl.w	r2, r1, r5
   1a2ec:	ea40 0002 	orr.w	r0, r0, r2
   1a2f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1a2f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1a2f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1a2fc:	fa21 f604 	lsr.w	r6, r1, r4
   1a300:	eb42 0106 	adc.w	r1, r2, r6
   1a304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1a308:	bf08      	it	eq
   1a30a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1a30e:	bd70      	pop	{r4, r5, r6, pc}
   1a310:	f1c4 040c 	rsb	r4, r4, #12
   1a314:	f1c4 0520 	rsb	r5, r4, #32
   1a318:	fa00 f304 	lsl.w	r3, r0, r4
   1a31c:	fa20 f005 	lsr.w	r0, r0, r5
   1a320:	fa01 f204 	lsl.w	r2, r1, r4
   1a324:	ea40 0002 	orr.w	r0, r0, r2
   1a328:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a32c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1a330:	f141 0100 	adc.w	r1, r1, #0
   1a334:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1a338:	bf08      	it	eq
   1a33a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1a33e:	bd70      	pop	{r4, r5, r6, pc}
   1a340:	f1c4 0520 	rsb	r5, r4, #32
   1a344:	fa00 f205 	lsl.w	r2, r0, r5
   1a348:	ea4e 0e02 	orr.w	lr, lr, r2
   1a34c:	fa20 f304 	lsr.w	r3, r0, r4
   1a350:	fa01 f205 	lsl.w	r2, r1, r5
   1a354:	ea43 0302 	orr.w	r3, r3, r2
   1a358:	fa21 f004 	lsr.w	r0, r1, r4
   1a35c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a360:	fa21 f204 	lsr.w	r2, r1, r4
   1a364:	ea20 0002 	bic.w	r0, r0, r2
   1a368:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1a36c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1a370:	bf08      	it	eq
   1a372:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1a376:	bd70      	pop	{r4, r5, r6, pc}
   1a378:	f094 0f00 	teq	r4, #0
   1a37c:	d10f      	bne.n	1a39e <__aeabi_dmul+0x1c2>
   1a37e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1a382:	0040      	lsls	r0, r0, #1
   1a384:	eb41 0101 	adc.w	r1, r1, r1
   1a388:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a38c:	bf08      	it	eq
   1a38e:	3c01      	subeq	r4, #1
   1a390:	d0f7      	beq.n	1a382 <__aeabi_dmul+0x1a6>
   1a392:	ea41 0106 	orr.w	r1, r1, r6
   1a396:	f095 0f00 	teq	r5, #0
   1a39a:	bf18      	it	ne
   1a39c:	4770      	bxne	lr
   1a39e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1a3a2:	0052      	lsls	r2, r2, #1
   1a3a4:	eb43 0303 	adc.w	r3, r3, r3
   1a3a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1a3ac:	bf08      	it	eq
   1a3ae:	3d01      	subeq	r5, #1
   1a3b0:	d0f7      	beq.n	1a3a2 <__aeabi_dmul+0x1c6>
   1a3b2:	ea43 0306 	orr.w	r3, r3, r6
   1a3b6:	4770      	bx	lr
   1a3b8:	ea94 0f0c 	teq	r4, ip
   1a3bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1a3c0:	bf18      	it	ne
   1a3c2:	ea95 0f0c 	teqne	r5, ip
   1a3c6:	d00c      	beq.n	1a3e2 <__aeabi_dmul+0x206>
   1a3c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1a3cc:	bf18      	it	ne
   1a3ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1a3d2:	d1d1      	bne.n	1a378 <__aeabi_dmul+0x19c>
   1a3d4:	ea81 0103 	eor.w	r1, r1, r3
   1a3d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a3dc:	f04f 0000 	mov.w	r0, #0
   1a3e0:	bd70      	pop	{r4, r5, r6, pc}
   1a3e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1a3e6:	bf06      	itte	eq
   1a3e8:	4610      	moveq	r0, r2
   1a3ea:	4619      	moveq	r1, r3
   1a3ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1a3f0:	d019      	beq.n	1a426 <__aeabi_dmul+0x24a>
   1a3f2:	ea94 0f0c 	teq	r4, ip
   1a3f6:	d102      	bne.n	1a3fe <__aeabi_dmul+0x222>
   1a3f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1a3fc:	d113      	bne.n	1a426 <__aeabi_dmul+0x24a>
   1a3fe:	ea95 0f0c 	teq	r5, ip
   1a402:	d105      	bne.n	1a410 <__aeabi_dmul+0x234>
   1a404:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1a408:	bf1c      	itt	ne
   1a40a:	4610      	movne	r0, r2
   1a40c:	4619      	movne	r1, r3
   1a40e:	d10a      	bne.n	1a426 <__aeabi_dmul+0x24a>
   1a410:	ea81 0103 	eor.w	r1, r1, r3
   1a414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a418:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1a41c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1a420:	f04f 0000 	mov.w	r0, #0
   1a424:	bd70      	pop	{r4, r5, r6, pc}
   1a426:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1a42a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1a42e:	bd70      	pop	{r4, r5, r6, pc}

0001a430 <__aeabi_ddiv>:
   1a430:	b570      	push	{r4, r5, r6, lr}
   1a432:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a436:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1a43a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1a43e:	bf1d      	ittte	ne
   1a440:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1a444:	ea94 0f0c 	teqne	r4, ip
   1a448:	ea95 0f0c 	teqne	r5, ip
   1a44c:	f000 f8a7 	bleq	1a59e <__aeabi_ddiv+0x16e>
   1a450:	eba4 0405 	sub.w	r4, r4, r5
   1a454:	ea81 0e03 	eor.w	lr, r1, r3
   1a458:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1a45c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1a460:	f000 8088 	beq.w	1a574 <__aeabi_ddiv+0x144>
   1a464:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1a468:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1a46c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1a470:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1a474:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1a478:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1a47c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1a480:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1a484:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1a488:	429d      	cmp	r5, r3
   1a48a:	bf08      	it	eq
   1a48c:	4296      	cmpeq	r6, r2
   1a48e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1a492:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1a496:	d202      	bcs.n	1a49e <__aeabi_ddiv+0x6e>
   1a498:	085b      	lsrs	r3, r3, #1
   1a49a:	ea4f 0232 	mov.w	r2, r2, rrx
   1a49e:	1ab6      	subs	r6, r6, r2
   1a4a0:	eb65 0503 	sbc.w	r5, r5, r3
   1a4a4:	085b      	lsrs	r3, r3, #1
   1a4a6:	ea4f 0232 	mov.w	r2, r2, rrx
   1a4aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1a4ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1a4b2:	ebb6 0e02 	subs.w	lr, r6, r2
   1a4b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a4ba:	bf22      	ittt	cs
   1a4bc:	1ab6      	subcs	r6, r6, r2
   1a4be:	4675      	movcs	r5, lr
   1a4c0:	ea40 000c 	orrcs.w	r0, r0, ip
   1a4c4:	085b      	lsrs	r3, r3, #1
   1a4c6:	ea4f 0232 	mov.w	r2, r2, rrx
   1a4ca:	ebb6 0e02 	subs.w	lr, r6, r2
   1a4ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a4d2:	bf22      	ittt	cs
   1a4d4:	1ab6      	subcs	r6, r6, r2
   1a4d6:	4675      	movcs	r5, lr
   1a4d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1a4dc:	085b      	lsrs	r3, r3, #1
   1a4de:	ea4f 0232 	mov.w	r2, r2, rrx
   1a4e2:	ebb6 0e02 	subs.w	lr, r6, r2
   1a4e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a4ea:	bf22      	ittt	cs
   1a4ec:	1ab6      	subcs	r6, r6, r2
   1a4ee:	4675      	movcs	r5, lr
   1a4f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1a4f4:	085b      	lsrs	r3, r3, #1
   1a4f6:	ea4f 0232 	mov.w	r2, r2, rrx
   1a4fa:	ebb6 0e02 	subs.w	lr, r6, r2
   1a4fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a502:	bf22      	ittt	cs
   1a504:	1ab6      	subcs	r6, r6, r2
   1a506:	4675      	movcs	r5, lr
   1a508:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1a50c:	ea55 0e06 	orrs.w	lr, r5, r6
   1a510:	d018      	beq.n	1a544 <__aeabi_ddiv+0x114>
   1a512:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1a516:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1a51a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1a51e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1a522:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1a526:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1a52a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1a52e:	d1c0      	bne.n	1a4b2 <__aeabi_ddiv+0x82>
   1a530:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a534:	d10b      	bne.n	1a54e <__aeabi_ddiv+0x11e>
   1a536:	ea41 0100 	orr.w	r1, r1, r0
   1a53a:	f04f 0000 	mov.w	r0, #0
   1a53e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1a542:	e7b6      	b.n	1a4b2 <__aeabi_ddiv+0x82>
   1a544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a548:	bf04      	itt	eq
   1a54a:	4301      	orreq	r1, r0
   1a54c:	2000      	moveq	r0, #0
   1a54e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1a552:	bf88      	it	hi
   1a554:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1a558:	f63f aeaf 	bhi.w	1a2ba <__aeabi_dmul+0xde>
   1a55c:	ebb5 0c03 	subs.w	ip, r5, r3
   1a560:	bf04      	itt	eq
   1a562:	ebb6 0c02 	subseq.w	ip, r6, r2
   1a566:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1a56a:	f150 0000 	adcs.w	r0, r0, #0
   1a56e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1a572:	bd70      	pop	{r4, r5, r6, pc}
   1a574:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1a578:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1a57c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1a580:	bfc2      	ittt	gt
   1a582:	ebd4 050c 	rsbsgt	r5, r4, ip
   1a586:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1a58a:	bd70      	popgt	{r4, r5, r6, pc}
   1a58c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a590:	f04f 0e00 	mov.w	lr, #0
   1a594:	3c01      	subs	r4, #1
   1a596:	e690      	b.n	1a2ba <__aeabi_dmul+0xde>
   1a598:	ea45 0e06 	orr.w	lr, r5, r6
   1a59c:	e68d      	b.n	1a2ba <__aeabi_dmul+0xde>
   1a59e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1a5a2:	ea94 0f0c 	teq	r4, ip
   1a5a6:	bf08      	it	eq
   1a5a8:	ea95 0f0c 	teqeq	r5, ip
   1a5ac:	f43f af3b 	beq.w	1a426 <__aeabi_dmul+0x24a>
   1a5b0:	ea94 0f0c 	teq	r4, ip
   1a5b4:	d10a      	bne.n	1a5cc <__aeabi_ddiv+0x19c>
   1a5b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1a5ba:	f47f af34 	bne.w	1a426 <__aeabi_dmul+0x24a>
   1a5be:	ea95 0f0c 	teq	r5, ip
   1a5c2:	f47f af25 	bne.w	1a410 <__aeabi_dmul+0x234>
   1a5c6:	4610      	mov	r0, r2
   1a5c8:	4619      	mov	r1, r3
   1a5ca:	e72c      	b.n	1a426 <__aeabi_dmul+0x24a>
   1a5cc:	ea95 0f0c 	teq	r5, ip
   1a5d0:	d106      	bne.n	1a5e0 <__aeabi_ddiv+0x1b0>
   1a5d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1a5d6:	f43f aefd 	beq.w	1a3d4 <__aeabi_dmul+0x1f8>
   1a5da:	4610      	mov	r0, r2
   1a5dc:	4619      	mov	r1, r3
   1a5de:	e722      	b.n	1a426 <__aeabi_dmul+0x24a>
   1a5e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1a5e4:	bf18      	it	ne
   1a5e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1a5ea:	f47f aec5 	bne.w	1a378 <__aeabi_dmul+0x19c>
   1a5ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1a5f2:	f47f af0d 	bne.w	1a410 <__aeabi_dmul+0x234>
   1a5f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1a5fa:	f47f aeeb 	bne.w	1a3d4 <__aeabi_dmul+0x1f8>
   1a5fe:	e712      	b.n	1a426 <__aeabi_dmul+0x24a>

0001a600 <__gedf2>:
   1a600:	f04f 3cff 	mov.w	ip, #4294967295
   1a604:	e006      	b.n	1a614 <__cmpdf2+0x4>
   1a606:	bf00      	nop

0001a608 <__ledf2>:
   1a608:	f04f 0c01 	mov.w	ip, #1
   1a60c:	e002      	b.n	1a614 <__cmpdf2+0x4>
   1a60e:	bf00      	nop

0001a610 <__cmpdf2>:
   1a610:	f04f 0c01 	mov.w	ip, #1
   1a614:	f84d cd04 	str.w	ip, [sp, #-4]!
   1a618:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1a61c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a620:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1a624:	bf18      	it	ne
   1a626:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1a62a:	d01b      	beq.n	1a664 <__cmpdf2+0x54>
   1a62c:	b001      	add	sp, #4
   1a62e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1a632:	bf0c      	ite	eq
   1a634:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1a638:	ea91 0f03 	teqne	r1, r3
   1a63c:	bf02      	ittt	eq
   1a63e:	ea90 0f02 	teqeq	r0, r2
   1a642:	2000      	moveq	r0, #0
   1a644:	4770      	bxeq	lr
   1a646:	f110 0f00 	cmn.w	r0, #0
   1a64a:	ea91 0f03 	teq	r1, r3
   1a64e:	bf58      	it	pl
   1a650:	4299      	cmppl	r1, r3
   1a652:	bf08      	it	eq
   1a654:	4290      	cmpeq	r0, r2
   1a656:	bf2c      	ite	cs
   1a658:	17d8      	asrcs	r0, r3, #31
   1a65a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1a65e:	f040 0001 	orr.w	r0, r0, #1
   1a662:	4770      	bx	lr
   1a664:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1a668:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a66c:	d102      	bne.n	1a674 <__cmpdf2+0x64>
   1a66e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1a672:	d107      	bne.n	1a684 <__cmpdf2+0x74>
   1a674:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1a678:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a67c:	d1d6      	bne.n	1a62c <__cmpdf2+0x1c>
   1a67e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1a682:	d0d3      	beq.n	1a62c <__cmpdf2+0x1c>
   1a684:	f85d 0b04 	ldr.w	r0, [sp], #4
   1a688:	4770      	bx	lr
   1a68a:	bf00      	nop

0001a68c <__aeabi_cdrcmple>:
   1a68c:	4684      	mov	ip, r0
   1a68e:	4610      	mov	r0, r2
   1a690:	4662      	mov	r2, ip
   1a692:	468c      	mov	ip, r1
   1a694:	4619      	mov	r1, r3
   1a696:	4663      	mov	r3, ip
   1a698:	e000      	b.n	1a69c <__aeabi_cdcmpeq>
   1a69a:	bf00      	nop

0001a69c <__aeabi_cdcmpeq>:
   1a69c:	b501      	push	{r0, lr}
   1a69e:	f7ff ffb7 	bl	1a610 <__cmpdf2>
   1a6a2:	2800      	cmp	r0, #0
   1a6a4:	bf48      	it	mi
   1a6a6:	f110 0f00 	cmnmi.w	r0, #0
   1a6aa:	bd01      	pop	{r0, pc}

0001a6ac <__aeabi_dcmpeq>:
   1a6ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a6b0:	f7ff fff4 	bl	1a69c <__aeabi_cdcmpeq>
   1a6b4:	bf0c      	ite	eq
   1a6b6:	2001      	moveq	r0, #1
   1a6b8:	2000      	movne	r0, #0
   1a6ba:	f85d fb08 	ldr.w	pc, [sp], #8
   1a6be:	bf00      	nop

0001a6c0 <__aeabi_dcmplt>:
   1a6c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a6c4:	f7ff ffea 	bl	1a69c <__aeabi_cdcmpeq>
   1a6c8:	bf34      	ite	cc
   1a6ca:	2001      	movcc	r0, #1
   1a6cc:	2000      	movcs	r0, #0
   1a6ce:	f85d fb08 	ldr.w	pc, [sp], #8
   1a6d2:	bf00      	nop

0001a6d4 <__aeabi_dcmple>:
   1a6d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a6d8:	f7ff ffe0 	bl	1a69c <__aeabi_cdcmpeq>
   1a6dc:	bf94      	ite	ls
   1a6de:	2001      	movls	r0, #1
   1a6e0:	2000      	movhi	r0, #0
   1a6e2:	f85d fb08 	ldr.w	pc, [sp], #8
   1a6e6:	bf00      	nop

0001a6e8 <__aeabi_dcmpge>:
   1a6e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a6ec:	f7ff ffce 	bl	1a68c <__aeabi_cdrcmple>
   1a6f0:	bf94      	ite	ls
   1a6f2:	2001      	movls	r0, #1
   1a6f4:	2000      	movhi	r0, #0
   1a6f6:	f85d fb08 	ldr.w	pc, [sp], #8
   1a6fa:	bf00      	nop

0001a6fc <__aeabi_dcmpgt>:
   1a6fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1a700:	f7ff ffc4 	bl	1a68c <__aeabi_cdrcmple>
   1a704:	bf34      	ite	cc
   1a706:	2001      	movcc	r0, #1
   1a708:	2000      	movcs	r0, #0
   1a70a:	f85d fb08 	ldr.w	pc, [sp], #8
   1a70e:	bf00      	nop

0001a710 <__aeabi_dcmpun>:
   1a710:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1a714:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a718:	d102      	bne.n	1a720 <__aeabi_dcmpun+0x10>
   1a71a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1a71e:	d10a      	bne.n	1a736 <__aeabi_dcmpun+0x26>
   1a720:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1a724:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1a728:	d102      	bne.n	1a730 <__aeabi_dcmpun+0x20>
   1a72a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1a72e:	d102      	bne.n	1a736 <__aeabi_dcmpun+0x26>
   1a730:	f04f 0000 	mov.w	r0, #0
   1a734:	4770      	bx	lr
   1a736:	f04f 0001 	mov.w	r0, #1
   1a73a:	4770      	bx	lr

0001a73c <__aeabi_d2uiz>:
   1a73c:	004a      	lsls	r2, r1, #1
   1a73e:	d211      	bcs.n	1a764 <__aeabi_d2uiz+0x28>
   1a740:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1a744:	d211      	bcs.n	1a76a <__aeabi_d2uiz+0x2e>
   1a746:	d50d      	bpl.n	1a764 <__aeabi_d2uiz+0x28>
   1a748:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1a74c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1a750:	d40e      	bmi.n	1a770 <__aeabi_d2uiz+0x34>
   1a752:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1a756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a75a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1a75e:	fa23 f002 	lsr.w	r0, r3, r2
   1a762:	4770      	bx	lr
   1a764:	f04f 0000 	mov.w	r0, #0
   1a768:	4770      	bx	lr
   1a76a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1a76e:	d102      	bne.n	1a776 <__aeabi_d2uiz+0x3a>
   1a770:	f04f 30ff 	mov.w	r0, #4294967295
   1a774:	4770      	bx	lr
   1a776:	f04f 0000 	mov.w	r0, #0
   1a77a:	4770      	bx	lr

0001a77c <__aeabi_frsub>:
   1a77c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1a780:	e002      	b.n	1a788 <__addsf3>
   1a782:	bf00      	nop

0001a784 <__aeabi_fsub>:
   1a784:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001a788 <__addsf3>:
   1a788:	0042      	lsls	r2, r0, #1
   1a78a:	bf1f      	itttt	ne
   1a78c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1a790:	ea92 0f03 	teqne	r2, r3
   1a794:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1a798:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1a79c:	d06a      	beq.n	1a874 <__addsf3+0xec>
   1a79e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1a7a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1a7a6:	bfc1      	itttt	gt
   1a7a8:	18d2      	addgt	r2, r2, r3
   1a7aa:	4041      	eorgt	r1, r0
   1a7ac:	4048      	eorgt	r0, r1
   1a7ae:	4041      	eorgt	r1, r0
   1a7b0:	bfb8      	it	lt
   1a7b2:	425b      	neglt	r3, r3
   1a7b4:	2b19      	cmp	r3, #25
   1a7b6:	bf88      	it	hi
   1a7b8:	4770      	bxhi	lr
   1a7ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1a7be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a7c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a7c6:	bf18      	it	ne
   1a7c8:	4240      	negne	r0, r0
   1a7ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1a7ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1a7d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a7d6:	bf18      	it	ne
   1a7d8:	4249      	negne	r1, r1
   1a7da:	ea92 0f03 	teq	r2, r3
   1a7de:	d03f      	beq.n	1a860 <__addsf3+0xd8>
   1a7e0:	f1a2 0201 	sub.w	r2, r2, #1
   1a7e4:	fa41 fc03 	asr.w	ip, r1, r3
   1a7e8:	eb10 000c 	adds.w	r0, r0, ip
   1a7ec:	f1c3 0320 	rsb	r3, r3, #32
   1a7f0:	fa01 f103 	lsl.w	r1, r1, r3
   1a7f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1a7f8:	d502      	bpl.n	1a800 <__addsf3+0x78>
   1a7fa:	4249      	negs	r1, r1
   1a7fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1a800:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a804:	d313      	bcc.n	1a82e <__addsf3+0xa6>
   1a806:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1a80a:	d306      	bcc.n	1a81a <__addsf3+0x92>
   1a80c:	0840      	lsrs	r0, r0, #1
   1a80e:	ea4f 0131 	mov.w	r1, r1, rrx
   1a812:	f102 0201 	add.w	r2, r2, #1
   1a816:	2afe      	cmp	r2, #254	; 0xfe
   1a818:	d251      	bcs.n	1a8be <__addsf3+0x136>
   1a81a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1a81e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a822:	bf08      	it	eq
   1a824:	f020 0001 	biceq.w	r0, r0, #1
   1a828:	ea40 0003 	orr.w	r0, r0, r3
   1a82c:	4770      	bx	lr
   1a82e:	0049      	lsls	r1, r1, #1
   1a830:	eb40 0000 	adc.w	r0, r0, r0
   1a834:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1a838:	f1a2 0201 	sub.w	r2, r2, #1
   1a83c:	d1ed      	bne.n	1a81a <__addsf3+0x92>
   1a83e:	fab0 fc80 	clz	ip, r0
   1a842:	f1ac 0c08 	sub.w	ip, ip, #8
   1a846:	ebb2 020c 	subs.w	r2, r2, ip
   1a84a:	fa00 f00c 	lsl.w	r0, r0, ip
   1a84e:	bfaa      	itet	ge
   1a850:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1a854:	4252      	neglt	r2, r2
   1a856:	4318      	orrge	r0, r3
   1a858:	bfbc      	itt	lt
   1a85a:	40d0      	lsrlt	r0, r2
   1a85c:	4318      	orrlt	r0, r3
   1a85e:	4770      	bx	lr
   1a860:	f092 0f00 	teq	r2, #0
   1a864:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1a868:	bf06      	itte	eq
   1a86a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1a86e:	3201      	addeq	r2, #1
   1a870:	3b01      	subne	r3, #1
   1a872:	e7b5      	b.n	1a7e0 <__addsf3+0x58>
   1a874:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1a878:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1a87c:	bf18      	it	ne
   1a87e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1a882:	d021      	beq.n	1a8c8 <__addsf3+0x140>
   1a884:	ea92 0f03 	teq	r2, r3
   1a888:	d004      	beq.n	1a894 <__addsf3+0x10c>
   1a88a:	f092 0f00 	teq	r2, #0
   1a88e:	bf08      	it	eq
   1a890:	4608      	moveq	r0, r1
   1a892:	4770      	bx	lr
   1a894:	ea90 0f01 	teq	r0, r1
   1a898:	bf1c      	itt	ne
   1a89a:	2000      	movne	r0, #0
   1a89c:	4770      	bxne	lr
   1a89e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1a8a2:	d104      	bne.n	1a8ae <__addsf3+0x126>
   1a8a4:	0040      	lsls	r0, r0, #1
   1a8a6:	bf28      	it	cs
   1a8a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1a8ac:	4770      	bx	lr
   1a8ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1a8b2:	bf3c      	itt	cc
   1a8b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1a8b8:	4770      	bxcc	lr
   1a8ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1a8be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1a8c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a8c6:	4770      	bx	lr
   1a8c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1a8cc:	bf16      	itet	ne
   1a8ce:	4608      	movne	r0, r1
   1a8d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1a8d4:	4601      	movne	r1, r0
   1a8d6:	0242      	lsls	r2, r0, #9
   1a8d8:	bf06      	itte	eq
   1a8da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1a8de:	ea90 0f01 	teqeq	r0, r1
   1a8e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1a8e6:	4770      	bx	lr

0001a8e8 <__aeabi_ui2f>:
   1a8e8:	f04f 0300 	mov.w	r3, #0
   1a8ec:	e004      	b.n	1a8f8 <__aeabi_i2f+0x8>
   1a8ee:	bf00      	nop

0001a8f0 <__aeabi_i2f>:
   1a8f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1a8f4:	bf48      	it	mi
   1a8f6:	4240      	negmi	r0, r0
   1a8f8:	ea5f 0c00 	movs.w	ip, r0
   1a8fc:	bf08      	it	eq
   1a8fe:	4770      	bxeq	lr
   1a900:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1a904:	4601      	mov	r1, r0
   1a906:	f04f 0000 	mov.w	r0, #0
   1a90a:	e01c      	b.n	1a946 <__aeabi_l2f+0x2a>

0001a90c <__aeabi_ul2f>:
   1a90c:	ea50 0201 	orrs.w	r2, r0, r1
   1a910:	bf08      	it	eq
   1a912:	4770      	bxeq	lr
   1a914:	f04f 0300 	mov.w	r3, #0
   1a918:	e00a      	b.n	1a930 <__aeabi_l2f+0x14>
   1a91a:	bf00      	nop

0001a91c <__aeabi_l2f>:
   1a91c:	ea50 0201 	orrs.w	r2, r0, r1
   1a920:	bf08      	it	eq
   1a922:	4770      	bxeq	lr
   1a924:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1a928:	d502      	bpl.n	1a930 <__aeabi_l2f+0x14>
   1a92a:	4240      	negs	r0, r0
   1a92c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a930:	ea5f 0c01 	movs.w	ip, r1
   1a934:	bf02      	ittt	eq
   1a936:	4684      	moveq	ip, r0
   1a938:	4601      	moveq	r1, r0
   1a93a:	2000      	moveq	r0, #0
   1a93c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1a940:	bf08      	it	eq
   1a942:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1a946:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1a94a:	fabc f28c 	clz	r2, ip
   1a94e:	3a08      	subs	r2, #8
   1a950:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1a954:	db10      	blt.n	1a978 <__aeabi_l2f+0x5c>
   1a956:	fa01 fc02 	lsl.w	ip, r1, r2
   1a95a:	4463      	add	r3, ip
   1a95c:	fa00 fc02 	lsl.w	ip, r0, r2
   1a960:	f1c2 0220 	rsb	r2, r2, #32
   1a964:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1a968:	fa20 f202 	lsr.w	r2, r0, r2
   1a96c:	eb43 0002 	adc.w	r0, r3, r2
   1a970:	bf08      	it	eq
   1a972:	f020 0001 	biceq.w	r0, r0, #1
   1a976:	4770      	bx	lr
   1a978:	f102 0220 	add.w	r2, r2, #32
   1a97c:	fa01 fc02 	lsl.w	ip, r1, r2
   1a980:	f1c2 0220 	rsb	r2, r2, #32
   1a984:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1a988:	fa21 f202 	lsr.w	r2, r1, r2
   1a98c:	eb43 0002 	adc.w	r0, r3, r2
   1a990:	bf08      	it	eq
   1a992:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1a996:	4770      	bx	lr

0001a998 <__aeabi_fmul>:
   1a998:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a99c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1a9a0:	bf1e      	ittt	ne
   1a9a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1a9a6:	ea92 0f0c 	teqne	r2, ip
   1a9aa:	ea93 0f0c 	teqne	r3, ip
   1a9ae:	d06f      	beq.n	1aa90 <__aeabi_fmul+0xf8>
   1a9b0:	441a      	add	r2, r3
   1a9b2:	ea80 0c01 	eor.w	ip, r0, r1
   1a9b6:	0240      	lsls	r0, r0, #9
   1a9b8:	bf18      	it	ne
   1a9ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1a9be:	d01e      	beq.n	1a9fe <__aeabi_fmul+0x66>
   1a9c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1a9c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1a9c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1a9cc:	fba0 3101 	umull	r3, r1, r0, r1
   1a9d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1a9d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1a9d8:	bf3e      	ittt	cc
   1a9da:	0049      	lslcc	r1, r1, #1
   1a9dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1a9e0:	005b      	lslcc	r3, r3, #1
   1a9e2:	ea40 0001 	orr.w	r0, r0, r1
   1a9e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1a9ea:	2afd      	cmp	r2, #253	; 0xfd
   1a9ec:	d81d      	bhi.n	1aa2a <__aeabi_fmul+0x92>
   1a9ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1a9f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a9f6:	bf08      	it	eq
   1a9f8:	f020 0001 	biceq.w	r0, r0, #1
   1a9fc:	4770      	bx	lr
   1a9fe:	f090 0f00 	teq	r0, #0
   1aa02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1aa06:	bf08      	it	eq
   1aa08:	0249      	lsleq	r1, r1, #9
   1aa0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1aa0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1aa12:	3a7f      	subs	r2, #127	; 0x7f
   1aa14:	bfc2      	ittt	gt
   1aa16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1aa1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1aa1e:	4770      	bxgt	lr
   1aa20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1aa24:	f04f 0300 	mov.w	r3, #0
   1aa28:	3a01      	subs	r2, #1
   1aa2a:	dc5d      	bgt.n	1aae8 <__aeabi_fmul+0x150>
   1aa2c:	f112 0f19 	cmn.w	r2, #25
   1aa30:	bfdc      	itt	le
   1aa32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1aa36:	4770      	bxle	lr
   1aa38:	f1c2 0200 	rsb	r2, r2, #0
   1aa3c:	0041      	lsls	r1, r0, #1
   1aa3e:	fa21 f102 	lsr.w	r1, r1, r2
   1aa42:	f1c2 0220 	rsb	r2, r2, #32
   1aa46:	fa00 fc02 	lsl.w	ip, r0, r2
   1aa4a:	ea5f 0031 	movs.w	r0, r1, rrx
   1aa4e:	f140 0000 	adc.w	r0, r0, #0
   1aa52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1aa56:	bf08      	it	eq
   1aa58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1aa5c:	4770      	bx	lr
   1aa5e:	f092 0f00 	teq	r2, #0
   1aa62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1aa66:	bf02      	ittt	eq
   1aa68:	0040      	lsleq	r0, r0, #1
   1aa6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1aa6e:	3a01      	subeq	r2, #1
   1aa70:	d0f9      	beq.n	1aa66 <__aeabi_fmul+0xce>
   1aa72:	ea40 000c 	orr.w	r0, r0, ip
   1aa76:	f093 0f00 	teq	r3, #0
   1aa7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1aa7e:	bf02      	ittt	eq
   1aa80:	0049      	lsleq	r1, r1, #1
   1aa82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1aa86:	3b01      	subeq	r3, #1
   1aa88:	d0f9      	beq.n	1aa7e <__aeabi_fmul+0xe6>
   1aa8a:	ea41 010c 	orr.w	r1, r1, ip
   1aa8e:	e78f      	b.n	1a9b0 <__aeabi_fmul+0x18>
   1aa90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1aa94:	ea92 0f0c 	teq	r2, ip
   1aa98:	bf18      	it	ne
   1aa9a:	ea93 0f0c 	teqne	r3, ip
   1aa9e:	d00a      	beq.n	1aab6 <__aeabi_fmul+0x11e>
   1aaa0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1aaa4:	bf18      	it	ne
   1aaa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1aaaa:	d1d8      	bne.n	1aa5e <__aeabi_fmul+0xc6>
   1aaac:	ea80 0001 	eor.w	r0, r0, r1
   1aab0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1aab4:	4770      	bx	lr
   1aab6:	f090 0f00 	teq	r0, #0
   1aaba:	bf17      	itett	ne
   1aabc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1aac0:	4608      	moveq	r0, r1
   1aac2:	f091 0f00 	teqne	r1, #0
   1aac6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1aaca:	d014      	beq.n	1aaf6 <__aeabi_fmul+0x15e>
   1aacc:	ea92 0f0c 	teq	r2, ip
   1aad0:	d101      	bne.n	1aad6 <__aeabi_fmul+0x13e>
   1aad2:	0242      	lsls	r2, r0, #9
   1aad4:	d10f      	bne.n	1aaf6 <__aeabi_fmul+0x15e>
   1aad6:	ea93 0f0c 	teq	r3, ip
   1aada:	d103      	bne.n	1aae4 <__aeabi_fmul+0x14c>
   1aadc:	024b      	lsls	r3, r1, #9
   1aade:	bf18      	it	ne
   1aae0:	4608      	movne	r0, r1
   1aae2:	d108      	bne.n	1aaf6 <__aeabi_fmul+0x15e>
   1aae4:	ea80 0001 	eor.w	r0, r0, r1
   1aae8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1aaec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1aaf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1aaf4:	4770      	bx	lr
   1aaf6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1aafa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1aafe:	4770      	bx	lr

0001ab00 <__aeabi_fdiv>:
   1ab00:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ab04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1ab08:	bf1e      	ittt	ne
   1ab0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1ab0e:	ea92 0f0c 	teqne	r2, ip
   1ab12:	ea93 0f0c 	teqne	r3, ip
   1ab16:	d069      	beq.n	1abec <__aeabi_fdiv+0xec>
   1ab18:	eba2 0203 	sub.w	r2, r2, r3
   1ab1c:	ea80 0c01 	eor.w	ip, r0, r1
   1ab20:	0249      	lsls	r1, r1, #9
   1ab22:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1ab26:	d037      	beq.n	1ab98 <__aeabi_fdiv+0x98>
   1ab28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ab2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1ab30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1ab34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1ab38:	428b      	cmp	r3, r1
   1ab3a:	bf38      	it	cc
   1ab3c:	005b      	lslcc	r3, r3, #1
   1ab3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1ab42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1ab46:	428b      	cmp	r3, r1
   1ab48:	bf24      	itt	cs
   1ab4a:	1a5b      	subcs	r3, r3, r1
   1ab4c:	ea40 000c 	orrcs.w	r0, r0, ip
   1ab50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1ab54:	bf24      	itt	cs
   1ab56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1ab5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1ab5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1ab62:	bf24      	itt	cs
   1ab64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1ab68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1ab6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1ab70:	bf24      	itt	cs
   1ab72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1ab76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1ab7a:	011b      	lsls	r3, r3, #4
   1ab7c:	bf18      	it	ne
   1ab7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1ab82:	d1e0      	bne.n	1ab46 <__aeabi_fdiv+0x46>
   1ab84:	2afd      	cmp	r2, #253	; 0xfd
   1ab86:	f63f af50 	bhi.w	1aa2a <__aeabi_fmul+0x92>
   1ab8a:	428b      	cmp	r3, r1
   1ab8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1ab90:	bf08      	it	eq
   1ab92:	f020 0001 	biceq.w	r0, r0, #1
   1ab96:	4770      	bx	lr
   1ab98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1ab9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1aba0:	327f      	adds	r2, #127	; 0x7f
   1aba2:	bfc2      	ittt	gt
   1aba4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1aba8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1abac:	4770      	bxgt	lr
   1abae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1abb2:	f04f 0300 	mov.w	r3, #0
   1abb6:	3a01      	subs	r2, #1
   1abb8:	e737      	b.n	1aa2a <__aeabi_fmul+0x92>
   1abba:	f092 0f00 	teq	r2, #0
   1abbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1abc2:	bf02      	ittt	eq
   1abc4:	0040      	lsleq	r0, r0, #1
   1abc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1abca:	3a01      	subeq	r2, #1
   1abcc:	d0f9      	beq.n	1abc2 <__aeabi_fdiv+0xc2>
   1abce:	ea40 000c 	orr.w	r0, r0, ip
   1abd2:	f093 0f00 	teq	r3, #0
   1abd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1abda:	bf02      	ittt	eq
   1abdc:	0049      	lsleq	r1, r1, #1
   1abde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1abe2:	3b01      	subeq	r3, #1
   1abe4:	d0f9      	beq.n	1abda <__aeabi_fdiv+0xda>
   1abe6:	ea41 010c 	orr.w	r1, r1, ip
   1abea:	e795      	b.n	1ab18 <__aeabi_fdiv+0x18>
   1abec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1abf0:	ea92 0f0c 	teq	r2, ip
   1abf4:	d108      	bne.n	1ac08 <__aeabi_fdiv+0x108>
   1abf6:	0242      	lsls	r2, r0, #9
   1abf8:	f47f af7d 	bne.w	1aaf6 <__aeabi_fmul+0x15e>
   1abfc:	ea93 0f0c 	teq	r3, ip
   1ac00:	f47f af70 	bne.w	1aae4 <__aeabi_fmul+0x14c>
   1ac04:	4608      	mov	r0, r1
   1ac06:	e776      	b.n	1aaf6 <__aeabi_fmul+0x15e>
   1ac08:	ea93 0f0c 	teq	r3, ip
   1ac0c:	d104      	bne.n	1ac18 <__aeabi_fdiv+0x118>
   1ac0e:	024b      	lsls	r3, r1, #9
   1ac10:	f43f af4c 	beq.w	1aaac <__aeabi_fmul+0x114>
   1ac14:	4608      	mov	r0, r1
   1ac16:	e76e      	b.n	1aaf6 <__aeabi_fmul+0x15e>
   1ac18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1ac1c:	bf18      	it	ne
   1ac1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1ac22:	d1ca      	bne.n	1abba <__aeabi_fdiv+0xba>
   1ac24:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1ac28:	f47f af5c 	bne.w	1aae4 <__aeabi_fmul+0x14c>
   1ac2c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1ac30:	f47f af3c 	bne.w	1aaac <__aeabi_fmul+0x114>
   1ac34:	e75f      	b.n	1aaf6 <__aeabi_fmul+0x15e>
   1ac36:	bf00      	nop

0001ac38 <__gesf2>:
   1ac38:	f04f 3cff 	mov.w	ip, #4294967295
   1ac3c:	e006      	b.n	1ac4c <__cmpsf2+0x4>
   1ac3e:	bf00      	nop

0001ac40 <__lesf2>:
   1ac40:	f04f 0c01 	mov.w	ip, #1
   1ac44:	e002      	b.n	1ac4c <__cmpsf2+0x4>
   1ac46:	bf00      	nop

0001ac48 <__cmpsf2>:
   1ac48:	f04f 0c01 	mov.w	ip, #1
   1ac4c:	f84d cd04 	str.w	ip, [sp, #-4]!
   1ac50:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1ac54:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1ac58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1ac5c:	bf18      	it	ne
   1ac5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1ac62:	d011      	beq.n	1ac88 <__cmpsf2+0x40>
   1ac64:	b001      	add	sp, #4
   1ac66:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1ac6a:	bf18      	it	ne
   1ac6c:	ea90 0f01 	teqne	r0, r1
   1ac70:	bf58      	it	pl
   1ac72:	ebb2 0003 	subspl.w	r0, r2, r3
   1ac76:	bf88      	it	hi
   1ac78:	17c8      	asrhi	r0, r1, #31
   1ac7a:	bf38      	it	cc
   1ac7c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1ac80:	bf18      	it	ne
   1ac82:	f040 0001 	orrne.w	r0, r0, #1
   1ac86:	4770      	bx	lr
   1ac88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1ac8c:	d102      	bne.n	1ac94 <__cmpsf2+0x4c>
   1ac8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1ac92:	d105      	bne.n	1aca0 <__cmpsf2+0x58>
   1ac94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1ac98:	d1e4      	bne.n	1ac64 <__cmpsf2+0x1c>
   1ac9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1ac9e:	d0e1      	beq.n	1ac64 <__cmpsf2+0x1c>
   1aca0:	f85d 0b04 	ldr.w	r0, [sp], #4
   1aca4:	4770      	bx	lr
   1aca6:	bf00      	nop

0001aca8 <__aeabi_cfrcmple>:
   1aca8:	4684      	mov	ip, r0
   1acaa:	4608      	mov	r0, r1
   1acac:	4661      	mov	r1, ip
   1acae:	e7ff      	b.n	1acb0 <__aeabi_cfcmpeq>

0001acb0 <__aeabi_cfcmpeq>:
   1acb0:	b50f      	push	{r0, r1, r2, r3, lr}
   1acb2:	f7ff ffc9 	bl	1ac48 <__cmpsf2>
   1acb6:	2800      	cmp	r0, #0
   1acb8:	bf48      	it	mi
   1acba:	f110 0f00 	cmnmi.w	r0, #0
   1acbe:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001acc0 <__aeabi_fcmpeq>:
   1acc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1acc4:	f7ff fff4 	bl	1acb0 <__aeabi_cfcmpeq>
   1acc8:	bf0c      	ite	eq
   1acca:	2001      	moveq	r0, #1
   1accc:	2000      	movne	r0, #0
   1acce:	f85d fb08 	ldr.w	pc, [sp], #8
   1acd2:	bf00      	nop

0001acd4 <__aeabi_fcmplt>:
   1acd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1acd8:	f7ff ffea 	bl	1acb0 <__aeabi_cfcmpeq>
   1acdc:	bf34      	ite	cc
   1acde:	2001      	movcc	r0, #1
   1ace0:	2000      	movcs	r0, #0
   1ace2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ace6:	bf00      	nop

0001ace8 <__aeabi_fcmple>:
   1ace8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1acec:	f7ff ffe0 	bl	1acb0 <__aeabi_cfcmpeq>
   1acf0:	bf94      	ite	ls
   1acf2:	2001      	movls	r0, #1
   1acf4:	2000      	movhi	r0, #0
   1acf6:	f85d fb08 	ldr.w	pc, [sp], #8
   1acfa:	bf00      	nop

0001acfc <__aeabi_fcmpge>:
   1acfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ad00:	f7ff ffd2 	bl	1aca8 <__aeabi_cfrcmple>
   1ad04:	bf94      	ite	ls
   1ad06:	2001      	movls	r0, #1
   1ad08:	2000      	movhi	r0, #0
   1ad0a:	f85d fb08 	ldr.w	pc, [sp], #8
   1ad0e:	bf00      	nop

0001ad10 <__aeabi_fcmpgt>:
   1ad10:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ad14:	f7ff ffc8 	bl	1aca8 <__aeabi_cfrcmple>
   1ad18:	bf34      	ite	cc
   1ad1a:	2001      	movcc	r0, #1
   1ad1c:	2000      	movcs	r0, #0
   1ad1e:	f85d fb08 	ldr.w	pc, [sp], #8
   1ad22:	bf00      	nop

0001ad24 <__aeabi_f2uiz>:
   1ad24:	0042      	lsls	r2, r0, #1
   1ad26:	d20e      	bcs.n	1ad46 <__aeabi_f2uiz+0x22>
   1ad28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1ad2c:	d30b      	bcc.n	1ad46 <__aeabi_f2uiz+0x22>
   1ad2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1ad32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1ad36:	d409      	bmi.n	1ad4c <__aeabi_f2uiz+0x28>
   1ad38:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1ad3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ad40:	fa23 f002 	lsr.w	r0, r3, r2
   1ad44:	4770      	bx	lr
   1ad46:	f04f 0000 	mov.w	r0, #0
   1ad4a:	4770      	bx	lr
   1ad4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1ad50:	d101      	bne.n	1ad56 <__aeabi_f2uiz+0x32>
   1ad52:	0242      	lsls	r2, r0, #9
   1ad54:	d102      	bne.n	1ad5c <__aeabi_f2uiz+0x38>
   1ad56:	f04f 30ff 	mov.w	r0, #4294967295
   1ad5a:	4770      	bx	lr
   1ad5c:	f04f 0000 	mov.w	r0, #0
   1ad60:	4770      	bx	lr
   1ad62:	bf00      	nop

0001ad64 <__aeabi_uldivmod>:
   1ad64:	b953      	cbnz	r3, 1ad7c <__aeabi_uldivmod+0x18>
   1ad66:	b94a      	cbnz	r2, 1ad7c <__aeabi_uldivmod+0x18>
   1ad68:	2900      	cmp	r1, #0
   1ad6a:	bf08      	it	eq
   1ad6c:	2800      	cmpeq	r0, #0
   1ad6e:	bf1c      	itt	ne
   1ad70:	f04f 31ff 	movne.w	r1, #4294967295
   1ad74:	f04f 30ff 	movne.w	r0, #4294967295
   1ad78:	f000 b97a 	b.w	1b070 <__aeabi_idiv0>
   1ad7c:	f1ad 0c08 	sub.w	ip, sp, #8
   1ad80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ad84:	f000 f806 	bl	1ad94 <__udivmoddi4>
   1ad88:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ad8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ad90:	b004      	add	sp, #16
   1ad92:	4770      	bx	lr

0001ad94 <__udivmoddi4>:
   1ad94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad98:	468c      	mov	ip, r1
   1ad9a:	460d      	mov	r5, r1
   1ad9c:	4604      	mov	r4, r0
   1ad9e:	9e08      	ldr	r6, [sp, #32]
   1ada0:	2b00      	cmp	r3, #0
   1ada2:	d151      	bne.n	1ae48 <__udivmoddi4+0xb4>
   1ada4:	428a      	cmp	r2, r1
   1ada6:	4617      	mov	r7, r2
   1ada8:	d96d      	bls.n	1ae86 <__udivmoddi4+0xf2>
   1adaa:	fab2 fe82 	clz	lr, r2
   1adae:	f1be 0f00 	cmp.w	lr, #0
   1adb2:	d00b      	beq.n	1adcc <__udivmoddi4+0x38>
   1adb4:	f1ce 0c20 	rsb	ip, lr, #32
   1adb8:	fa01 f50e 	lsl.w	r5, r1, lr
   1adbc:	fa20 fc0c 	lsr.w	ip, r0, ip
   1adc0:	fa02 f70e 	lsl.w	r7, r2, lr
   1adc4:	ea4c 0c05 	orr.w	ip, ip, r5
   1adc8:	fa00 f40e 	lsl.w	r4, r0, lr
   1adcc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1add0:	0c25      	lsrs	r5, r4, #16
   1add2:	fbbc f8fa 	udiv	r8, ip, sl
   1add6:	fa1f f987 	uxth.w	r9, r7
   1adda:	fb0a cc18 	mls	ip, sl, r8, ip
   1adde:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1ade2:	fb08 f309 	mul.w	r3, r8, r9
   1ade6:	42ab      	cmp	r3, r5
   1ade8:	d90a      	bls.n	1ae00 <__udivmoddi4+0x6c>
   1adea:	19ed      	adds	r5, r5, r7
   1adec:	f108 32ff 	add.w	r2, r8, #4294967295
   1adf0:	f080 8123 	bcs.w	1b03a <__udivmoddi4+0x2a6>
   1adf4:	42ab      	cmp	r3, r5
   1adf6:	f240 8120 	bls.w	1b03a <__udivmoddi4+0x2a6>
   1adfa:	f1a8 0802 	sub.w	r8, r8, #2
   1adfe:	443d      	add	r5, r7
   1ae00:	1aed      	subs	r5, r5, r3
   1ae02:	b2a4      	uxth	r4, r4
   1ae04:	fbb5 f0fa 	udiv	r0, r5, sl
   1ae08:	fb0a 5510 	mls	r5, sl, r0, r5
   1ae0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1ae10:	fb00 f909 	mul.w	r9, r0, r9
   1ae14:	45a1      	cmp	r9, r4
   1ae16:	d909      	bls.n	1ae2c <__udivmoddi4+0x98>
   1ae18:	19e4      	adds	r4, r4, r7
   1ae1a:	f100 33ff 	add.w	r3, r0, #4294967295
   1ae1e:	f080 810a 	bcs.w	1b036 <__udivmoddi4+0x2a2>
   1ae22:	45a1      	cmp	r9, r4
   1ae24:	f240 8107 	bls.w	1b036 <__udivmoddi4+0x2a2>
   1ae28:	3802      	subs	r0, #2
   1ae2a:	443c      	add	r4, r7
   1ae2c:	eba4 0409 	sub.w	r4, r4, r9
   1ae30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1ae34:	2100      	movs	r1, #0
   1ae36:	2e00      	cmp	r6, #0
   1ae38:	d061      	beq.n	1aefe <__udivmoddi4+0x16a>
   1ae3a:	fa24 f40e 	lsr.w	r4, r4, lr
   1ae3e:	2300      	movs	r3, #0
   1ae40:	6034      	str	r4, [r6, #0]
   1ae42:	6073      	str	r3, [r6, #4]
   1ae44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ae48:	428b      	cmp	r3, r1
   1ae4a:	d907      	bls.n	1ae5c <__udivmoddi4+0xc8>
   1ae4c:	2e00      	cmp	r6, #0
   1ae4e:	d054      	beq.n	1aefa <__udivmoddi4+0x166>
   1ae50:	2100      	movs	r1, #0
   1ae52:	e886 0021 	stmia.w	r6, {r0, r5}
   1ae56:	4608      	mov	r0, r1
   1ae58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ae5c:	fab3 f183 	clz	r1, r3
   1ae60:	2900      	cmp	r1, #0
   1ae62:	f040 808e 	bne.w	1af82 <__udivmoddi4+0x1ee>
   1ae66:	42ab      	cmp	r3, r5
   1ae68:	d302      	bcc.n	1ae70 <__udivmoddi4+0xdc>
   1ae6a:	4282      	cmp	r2, r0
   1ae6c:	f200 80fa 	bhi.w	1b064 <__udivmoddi4+0x2d0>
   1ae70:	1a84      	subs	r4, r0, r2
   1ae72:	eb65 0503 	sbc.w	r5, r5, r3
   1ae76:	2001      	movs	r0, #1
   1ae78:	46ac      	mov	ip, r5
   1ae7a:	2e00      	cmp	r6, #0
   1ae7c:	d03f      	beq.n	1aefe <__udivmoddi4+0x16a>
   1ae7e:	e886 1010 	stmia.w	r6, {r4, ip}
   1ae82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ae86:	b912      	cbnz	r2, 1ae8e <__udivmoddi4+0xfa>
   1ae88:	2701      	movs	r7, #1
   1ae8a:	fbb7 f7f2 	udiv	r7, r7, r2
   1ae8e:	fab7 fe87 	clz	lr, r7
   1ae92:	f1be 0f00 	cmp.w	lr, #0
   1ae96:	d134      	bne.n	1af02 <__udivmoddi4+0x16e>
   1ae98:	1beb      	subs	r3, r5, r7
   1ae9a:	0c3a      	lsrs	r2, r7, #16
   1ae9c:	fa1f fc87 	uxth.w	ip, r7
   1aea0:	2101      	movs	r1, #1
   1aea2:	fbb3 f8f2 	udiv	r8, r3, r2
   1aea6:	0c25      	lsrs	r5, r4, #16
   1aea8:	fb02 3318 	mls	r3, r2, r8, r3
   1aeac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1aeb0:	fb0c f308 	mul.w	r3, ip, r8
   1aeb4:	42ab      	cmp	r3, r5
   1aeb6:	d907      	bls.n	1aec8 <__udivmoddi4+0x134>
   1aeb8:	19ed      	adds	r5, r5, r7
   1aeba:	f108 30ff 	add.w	r0, r8, #4294967295
   1aebe:	d202      	bcs.n	1aec6 <__udivmoddi4+0x132>
   1aec0:	42ab      	cmp	r3, r5
   1aec2:	f200 80d1 	bhi.w	1b068 <__udivmoddi4+0x2d4>
   1aec6:	4680      	mov	r8, r0
   1aec8:	1aed      	subs	r5, r5, r3
   1aeca:	b2a3      	uxth	r3, r4
   1aecc:	fbb5 f0f2 	udiv	r0, r5, r2
   1aed0:	fb02 5510 	mls	r5, r2, r0, r5
   1aed4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1aed8:	fb0c fc00 	mul.w	ip, ip, r0
   1aedc:	45a4      	cmp	ip, r4
   1aede:	d907      	bls.n	1aef0 <__udivmoddi4+0x15c>
   1aee0:	19e4      	adds	r4, r4, r7
   1aee2:	f100 33ff 	add.w	r3, r0, #4294967295
   1aee6:	d202      	bcs.n	1aeee <__udivmoddi4+0x15a>
   1aee8:	45a4      	cmp	ip, r4
   1aeea:	f200 80b8 	bhi.w	1b05e <__udivmoddi4+0x2ca>
   1aeee:	4618      	mov	r0, r3
   1aef0:	eba4 040c 	sub.w	r4, r4, ip
   1aef4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1aef8:	e79d      	b.n	1ae36 <__udivmoddi4+0xa2>
   1aefa:	4631      	mov	r1, r6
   1aefc:	4630      	mov	r0, r6
   1aefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1af02:	f1ce 0420 	rsb	r4, lr, #32
   1af06:	fa05 f30e 	lsl.w	r3, r5, lr
   1af0a:	fa07 f70e 	lsl.w	r7, r7, lr
   1af0e:	fa20 f804 	lsr.w	r8, r0, r4
   1af12:	0c3a      	lsrs	r2, r7, #16
   1af14:	fa25 f404 	lsr.w	r4, r5, r4
   1af18:	ea48 0803 	orr.w	r8, r8, r3
   1af1c:	fbb4 f1f2 	udiv	r1, r4, r2
   1af20:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1af24:	fb02 4411 	mls	r4, r2, r1, r4
   1af28:	fa1f fc87 	uxth.w	ip, r7
   1af2c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1af30:	fb01 f30c 	mul.w	r3, r1, ip
   1af34:	42ab      	cmp	r3, r5
   1af36:	fa00 f40e 	lsl.w	r4, r0, lr
   1af3a:	d909      	bls.n	1af50 <__udivmoddi4+0x1bc>
   1af3c:	19ed      	adds	r5, r5, r7
   1af3e:	f101 30ff 	add.w	r0, r1, #4294967295
   1af42:	f080 808a 	bcs.w	1b05a <__udivmoddi4+0x2c6>
   1af46:	42ab      	cmp	r3, r5
   1af48:	f240 8087 	bls.w	1b05a <__udivmoddi4+0x2c6>
   1af4c:	3902      	subs	r1, #2
   1af4e:	443d      	add	r5, r7
   1af50:	1aeb      	subs	r3, r5, r3
   1af52:	fa1f f588 	uxth.w	r5, r8
   1af56:	fbb3 f0f2 	udiv	r0, r3, r2
   1af5a:	fb02 3310 	mls	r3, r2, r0, r3
   1af5e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1af62:	fb00 f30c 	mul.w	r3, r0, ip
   1af66:	42ab      	cmp	r3, r5
   1af68:	d907      	bls.n	1af7a <__udivmoddi4+0x1e6>
   1af6a:	19ed      	adds	r5, r5, r7
   1af6c:	f100 38ff 	add.w	r8, r0, #4294967295
   1af70:	d26f      	bcs.n	1b052 <__udivmoddi4+0x2be>
   1af72:	42ab      	cmp	r3, r5
   1af74:	d96d      	bls.n	1b052 <__udivmoddi4+0x2be>
   1af76:	3802      	subs	r0, #2
   1af78:	443d      	add	r5, r7
   1af7a:	1aeb      	subs	r3, r5, r3
   1af7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1af80:	e78f      	b.n	1aea2 <__udivmoddi4+0x10e>
   1af82:	f1c1 0720 	rsb	r7, r1, #32
   1af86:	fa22 f807 	lsr.w	r8, r2, r7
   1af8a:	408b      	lsls	r3, r1
   1af8c:	fa05 f401 	lsl.w	r4, r5, r1
   1af90:	ea48 0303 	orr.w	r3, r8, r3
   1af94:	fa20 fe07 	lsr.w	lr, r0, r7
   1af98:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1af9c:	40fd      	lsrs	r5, r7
   1af9e:	ea4e 0e04 	orr.w	lr, lr, r4
   1afa2:	fbb5 f9fc 	udiv	r9, r5, ip
   1afa6:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1afaa:	fb0c 5519 	mls	r5, ip, r9, r5
   1afae:	fa1f f883 	uxth.w	r8, r3
   1afb2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1afb6:	fb09 f408 	mul.w	r4, r9, r8
   1afba:	42ac      	cmp	r4, r5
   1afbc:	fa02 f201 	lsl.w	r2, r2, r1
   1afc0:	fa00 fa01 	lsl.w	sl, r0, r1
   1afc4:	d908      	bls.n	1afd8 <__udivmoddi4+0x244>
   1afc6:	18ed      	adds	r5, r5, r3
   1afc8:	f109 30ff 	add.w	r0, r9, #4294967295
   1afcc:	d243      	bcs.n	1b056 <__udivmoddi4+0x2c2>
   1afce:	42ac      	cmp	r4, r5
   1afd0:	d941      	bls.n	1b056 <__udivmoddi4+0x2c2>
   1afd2:	f1a9 0902 	sub.w	r9, r9, #2
   1afd6:	441d      	add	r5, r3
   1afd8:	1b2d      	subs	r5, r5, r4
   1afda:	fa1f fe8e 	uxth.w	lr, lr
   1afde:	fbb5 f0fc 	udiv	r0, r5, ip
   1afe2:	fb0c 5510 	mls	r5, ip, r0, r5
   1afe6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1afea:	fb00 f808 	mul.w	r8, r0, r8
   1afee:	45a0      	cmp	r8, r4
   1aff0:	d907      	bls.n	1b002 <__udivmoddi4+0x26e>
   1aff2:	18e4      	adds	r4, r4, r3
   1aff4:	f100 35ff 	add.w	r5, r0, #4294967295
   1aff8:	d229      	bcs.n	1b04e <__udivmoddi4+0x2ba>
   1affa:	45a0      	cmp	r8, r4
   1affc:	d927      	bls.n	1b04e <__udivmoddi4+0x2ba>
   1affe:	3802      	subs	r0, #2
   1b000:	441c      	add	r4, r3
   1b002:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1b006:	eba4 0408 	sub.w	r4, r4, r8
   1b00a:	fba0 8902 	umull	r8, r9, r0, r2
   1b00e:	454c      	cmp	r4, r9
   1b010:	46c6      	mov	lr, r8
   1b012:	464d      	mov	r5, r9
   1b014:	d315      	bcc.n	1b042 <__udivmoddi4+0x2ae>
   1b016:	d012      	beq.n	1b03e <__udivmoddi4+0x2aa>
   1b018:	b156      	cbz	r6, 1b030 <__udivmoddi4+0x29c>
   1b01a:	ebba 030e 	subs.w	r3, sl, lr
   1b01e:	eb64 0405 	sbc.w	r4, r4, r5
   1b022:	fa04 f707 	lsl.w	r7, r4, r7
   1b026:	40cb      	lsrs	r3, r1
   1b028:	431f      	orrs	r7, r3
   1b02a:	40cc      	lsrs	r4, r1
   1b02c:	6037      	str	r7, [r6, #0]
   1b02e:	6074      	str	r4, [r6, #4]
   1b030:	2100      	movs	r1, #0
   1b032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b036:	4618      	mov	r0, r3
   1b038:	e6f8      	b.n	1ae2c <__udivmoddi4+0x98>
   1b03a:	4690      	mov	r8, r2
   1b03c:	e6e0      	b.n	1ae00 <__udivmoddi4+0x6c>
   1b03e:	45c2      	cmp	sl, r8
   1b040:	d2ea      	bcs.n	1b018 <__udivmoddi4+0x284>
   1b042:	ebb8 0e02 	subs.w	lr, r8, r2
   1b046:	eb69 0503 	sbc.w	r5, r9, r3
   1b04a:	3801      	subs	r0, #1
   1b04c:	e7e4      	b.n	1b018 <__udivmoddi4+0x284>
   1b04e:	4628      	mov	r0, r5
   1b050:	e7d7      	b.n	1b002 <__udivmoddi4+0x26e>
   1b052:	4640      	mov	r0, r8
   1b054:	e791      	b.n	1af7a <__udivmoddi4+0x1e6>
   1b056:	4681      	mov	r9, r0
   1b058:	e7be      	b.n	1afd8 <__udivmoddi4+0x244>
   1b05a:	4601      	mov	r1, r0
   1b05c:	e778      	b.n	1af50 <__udivmoddi4+0x1bc>
   1b05e:	3802      	subs	r0, #2
   1b060:	443c      	add	r4, r7
   1b062:	e745      	b.n	1aef0 <__udivmoddi4+0x15c>
   1b064:	4608      	mov	r0, r1
   1b066:	e708      	b.n	1ae7a <__udivmoddi4+0xe6>
   1b068:	f1a8 0802 	sub.w	r8, r8, #2
   1b06c:	443d      	add	r5, r7
   1b06e:	e72b      	b.n	1aec8 <__udivmoddi4+0x134>

0001b070 <__aeabi_idiv0>:
   1b070:	4770      	bx	lr
   1b072:	bf00      	nop

0001b074 <ctime>:
   1b074:	b508      	push	{r3, lr}
   1b076:	f000 f84d 	bl	1b114 <localtime>
   1b07a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b07e:	f000 bdc3 	b.w	1bc08 <asctime>
   1b082:	bf00      	nop

0001b084 <__cxa_atexit>:
   1b084:	4613      	mov	r3, r2
   1b086:	460a      	mov	r2, r1
   1b088:	4601      	mov	r1, r0
   1b08a:	2002      	movs	r0, #2
   1b08c:	f000 bd50 	b.w	1bb30 <__register_exitproc>

0001b090 <difftime>:
   1b090:	b508      	push	{r3, lr}
   1b092:	1a40      	subs	r0, r0, r1
   1b094:	f7ff f83c 	bl	1a110 <__aeabi_i2d>
   1b098:	bd08      	pop	{r3, pc}
   1b09a:	bf00      	nop

0001b09c <__errno>:
   1b09c:	4b01      	ldr	r3, [pc, #4]	; (1b0a4 <__errno+0x8>)
   1b09e:	6818      	ldr	r0, [r3, #0]
   1b0a0:	4770      	bx	lr
   1b0a2:	bf00      	nop
   1b0a4:	20000248 	.word	0x20000248

0001b0a8 <ffs>:
   1b0a8:	b140      	cbz	r0, 1b0bc <ffs+0x14>
   1b0aa:	2300      	movs	r3, #0
   1b0ac:	fa40 f103 	asr.w	r1, r0, r3
   1b0b0:	1c5a      	adds	r2, r3, #1
   1b0b2:	07c9      	lsls	r1, r1, #31
   1b0b4:	4613      	mov	r3, r2
   1b0b6:	d5f9      	bpl.n	1b0ac <ffs+0x4>
   1b0b8:	4610      	mov	r0, r2
   1b0ba:	4770      	bx	lr
   1b0bc:	4602      	mov	r2, r0
   1b0be:	4610      	mov	r0, r2
   1b0c0:	4770      	bx	lr
   1b0c2:	bf00      	nop

0001b0c4 <__libc_init_array>:
   1b0c4:	b570      	push	{r4, r5, r6, lr}
   1b0c6:	4e0f      	ldr	r6, [pc, #60]	; (1b104 <__libc_init_array+0x40>)
   1b0c8:	4d0f      	ldr	r5, [pc, #60]	; (1b108 <__libc_init_array+0x44>)
   1b0ca:	1b76      	subs	r6, r6, r5
   1b0cc:	10b6      	asrs	r6, r6, #2
   1b0ce:	bf18      	it	ne
   1b0d0:	2400      	movne	r4, #0
   1b0d2:	d005      	beq.n	1b0e0 <__libc_init_array+0x1c>
   1b0d4:	3401      	adds	r4, #1
   1b0d6:	f855 3b04 	ldr.w	r3, [r5], #4
   1b0da:	4798      	blx	r3
   1b0dc:	42a6      	cmp	r6, r4
   1b0de:	d1f9      	bne.n	1b0d4 <__libc_init_array+0x10>
   1b0e0:	4e0a      	ldr	r6, [pc, #40]	; (1b10c <__libc_init_array+0x48>)
   1b0e2:	4d0b      	ldr	r5, [pc, #44]	; (1b110 <__libc_init_array+0x4c>)
   1b0e4:	1b76      	subs	r6, r6, r5
   1b0e6:	f006 fa2d 	bl	21544 <_init>
   1b0ea:	10b6      	asrs	r6, r6, #2
   1b0ec:	bf18      	it	ne
   1b0ee:	2400      	movne	r4, #0
   1b0f0:	d006      	beq.n	1b100 <__libc_init_array+0x3c>
   1b0f2:	3401      	adds	r4, #1
   1b0f4:	f855 3b04 	ldr.w	r3, [r5], #4
   1b0f8:	4798      	blx	r3
   1b0fa:	42a6      	cmp	r6, r4
   1b0fc:	d1f9      	bne.n	1b0f2 <__libc_init_array+0x2e>
   1b0fe:	bd70      	pop	{r4, r5, r6, pc}
   1b100:	bd70      	pop	{r4, r5, r6, pc}
   1b102:	bf00      	nop
   1b104:	00021550 	.word	0x00021550
   1b108:	00021550 	.word	0x00021550
   1b10c:	000215b4 	.word	0x000215b4
   1b110:	00021550 	.word	0x00021550

0001b114 <localtime>:
   1b114:	4b02      	ldr	r3, [pc, #8]	; (1b120 <localtime+0xc>)
   1b116:	6819      	ldr	r1, [r3, #0]
   1b118:	317c      	adds	r1, #124	; 0x7c
   1b11a:	f000 b803 	b.w	1b124 <localtime_r>
   1b11e:	bf00      	nop
   1b120:	20000248 	.word	0x20000248

0001b124 <localtime_r>:
   1b124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b128:	460c      	mov	r4, r1
   1b12a:	4607      	mov	r7, r0
   1b12c:	f000 fe00 	bl	1bd30 <__gettzinfo>
   1b130:	4621      	mov	r1, r4
   1b132:	4680      	mov	r8, r0
   1b134:	4638      	mov	r0, r7
   1b136:	f000 fdff 	bl	1bd38 <gmtime_r>
   1b13a:	6946      	ldr	r6, [r0, #20]
   1b13c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1b140:	07b1      	lsls	r1, r6, #30
   1b142:	4604      	mov	r4, r0
   1b144:	f000 80b9 	beq.w	1b2ba <localtime_r+0x196>
   1b148:	17f5      	asrs	r5, r6, #31
   1b14a:	4b7f      	ldr	r3, [pc, #508]	; (1b348 <localtime_r+0x224>)
   1b14c:	fb83 2306 	smull	r2, r3, r3, r6
   1b150:	ebc5 15e3 	rsb	r5, r5, r3, asr #7
   1b154:	f44f 73c8 	mov.w	r3, #400	; 0x190
   1b158:	fb03 6515 	mls	r5, r3, r5, r6
   1b15c:	2d00      	cmp	r5, #0
   1b15e:	bf0c      	ite	eq
   1b160:	2530      	moveq	r5, #48	; 0x30
   1b162:	2500      	movne	r5, #0
   1b164:	4b79      	ldr	r3, [pc, #484]	; (1b34c <localtime_r+0x228>)
   1b166:	441d      	add	r5, r3
   1b168:	f000 fb3a 	bl	1b7e0 <__tz_lock>
   1b16c:	f000 fb44 	bl	1b7f8 <_tzset_unlocked>
   1b170:	4b77      	ldr	r3, [pc, #476]	; (1b350 <localtime_r+0x22c>)
   1b172:	681b      	ldr	r3, [r3, #0]
   1b174:	b343      	cbz	r3, 1b1c8 <localtime_r+0xa4>
   1b176:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b17a:	429e      	cmp	r6, r3
   1b17c:	d005      	beq.n	1b18a <localtime_r+0x66>
   1b17e:	4630      	mov	r0, r6
   1b180:	f000 fa6c 	bl	1b65c <__tzcalc_limits>
   1b184:	2800      	cmp	r0, #0
   1b186:	f000 80a6 	beq.w	1b2d6 <localtime_r+0x1b2>
   1b18a:	f8d8 3000 	ldr.w	r3, [r8]
   1b18e:	b983      	cbnz	r3, 1b1b2 <localtime_r+0x8e>
   1b190:	683b      	ldr	r3, [r7, #0]
   1b192:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1b196:	4293      	cmp	r3, r2
   1b198:	f280 80a1 	bge.w	1b2de <localtime_r+0x1ba>
   1b19c:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1b1a0:	4293      	cmp	r3, r2
   1b1a2:	bfb4      	ite	lt
   1b1a4:	2301      	movlt	r3, #1
   1b1a6:	2300      	movge	r3, #0
   1b1a8:	6223      	str	r3, [r4, #32]
   1b1aa:	da0e      	bge.n	1b1ca <localtime_r+0xa6>
   1b1ac:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
   1b1b0:	e00d      	b.n	1b1ce <localtime_r+0xaa>
   1b1b2:	683b      	ldr	r3, [r7, #0]
   1b1b4:	f8d8 201c 	ldr.w	r2, [r8, #28]
   1b1b8:	4293      	cmp	r3, r2
   1b1ba:	db04      	blt.n	1b1c6 <localtime_r+0xa2>
   1b1bc:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
   1b1c0:	4293      	cmp	r3, r2
   1b1c2:	f2c0 808c 	blt.w	1b2de <localtime_r+0x1ba>
   1b1c6:	2300      	movs	r3, #0
   1b1c8:	6223      	str	r3, [r4, #32]
   1b1ca:	f8d8 6020 	ldr.w	r6, [r8, #32]
   1b1ce:	4a61      	ldr	r2, [pc, #388]	; (1b354 <localtime_r+0x230>)
   1b1d0:	4f61      	ldr	r7, [pc, #388]	; (1b358 <localtime_r+0x234>)
   1b1d2:	68a1      	ldr	r1, [r4, #8]
   1b1d4:	fb82 3206 	smull	r3, r2, r2, r6
   1b1d8:	4432      	add	r2, r6
   1b1da:	17f3      	asrs	r3, r6, #31
   1b1dc:	12d2      	asrs	r2, r2, #11
   1b1de:	1ad0      	subs	r0, r2, r3
   1b1e0:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1b1e4:	fb0e 6010 	mls	r0, lr, r0, r6
   1b1e8:	fb87 6700 	smull	r6, r7, r7, r0
   1b1ec:	183e      	adds	r6, r7, r0
   1b1ee:	17c7      	asrs	r7, r0, #31
   1b1f0:	ebc7 1766 	rsb	r7, r7, r6, asr #5
   1b1f4:	ebc7 1e07 	rsb	lr, r7, r7, lsl #4
   1b1f8:	6826      	ldr	r6, [r4, #0]
   1b1fa:	1ad3      	subs	r3, r2, r3
   1b1fc:	eba0 008e 	sub.w	r0, r0, lr, lsl #2
   1b200:	6862      	ldr	r2, [r4, #4]
   1b202:	1a30      	subs	r0, r6, r0
   1b204:	1acb      	subs	r3, r1, r3
   1b206:	1bd2      	subs	r2, r2, r7
   1b208:	283b      	cmp	r0, #59	; 0x3b
   1b20a:	e884 000d 	stmia.w	r4, {r0, r2, r3}
   1b20e:	dd4d      	ble.n	1b2ac <localtime_r+0x188>
   1b210:	3201      	adds	r2, #1
   1b212:	383c      	subs	r0, #60	; 0x3c
   1b214:	e884 0005 	stmia.w	r4, {r0, r2}
   1b218:	2a3b      	cmp	r2, #59	; 0x3b
   1b21a:	dd40      	ble.n	1b29e <localtime_r+0x17a>
   1b21c:	3301      	adds	r3, #1
   1b21e:	3a3c      	subs	r2, #60	; 0x3c
   1b220:	60a3      	str	r3, [r4, #8]
   1b222:	6062      	str	r2, [r4, #4]
   1b224:	2b17      	cmp	r3, #23
   1b226:	dd1d      	ble.n	1b264 <localtime_r+0x140>
   1b228:	69a2      	ldr	r2, [r4, #24]
   1b22a:	69e1      	ldr	r1, [r4, #28]
   1b22c:	3201      	adds	r2, #1
   1b22e:	2a06      	cmp	r2, #6
   1b230:	bfc8      	it	gt
   1b232:	2200      	movgt	r2, #0
   1b234:	61a2      	str	r2, [r4, #24]
   1b236:	68e2      	ldr	r2, [r4, #12]
   1b238:	3101      	adds	r1, #1
   1b23a:	61e1      	str	r1, [r4, #28]
   1b23c:	3b18      	subs	r3, #24
   1b23e:	3201      	adds	r2, #1
   1b240:	6921      	ldr	r1, [r4, #16]
   1b242:	60a3      	str	r3, [r4, #8]
   1b244:	60e2      	str	r2, [r4, #12]
   1b246:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1b24a:	429a      	cmp	r2, r3
   1b24c:	dd05      	ble.n	1b25a <localtime_r+0x136>
   1b24e:	3101      	adds	r1, #1
   1b250:	1ad2      	subs	r2, r2, r3
   1b252:	290c      	cmp	r1, #12
   1b254:	60e2      	str	r2, [r4, #12]
   1b256:	d045      	beq.n	1b2e4 <localtime_r+0x1c0>
   1b258:	6121      	str	r1, [r4, #16]
   1b25a:	f000 fac7 	bl	1b7ec <__tz_unlock>
   1b25e:	4620      	mov	r0, r4
   1b260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b264:	2b00      	cmp	r3, #0
   1b266:	daf8      	bge.n	1b25a <localtime_r+0x136>
   1b268:	69a2      	ldr	r2, [r4, #24]
   1b26a:	69e1      	ldr	r1, [r4, #28]
   1b26c:	3a01      	subs	r2, #1
   1b26e:	bf48      	it	mi
   1b270:	2206      	movmi	r2, #6
   1b272:	61a2      	str	r2, [r4, #24]
   1b274:	68e2      	ldr	r2, [r4, #12]
   1b276:	3901      	subs	r1, #1
   1b278:	3318      	adds	r3, #24
   1b27a:	3a01      	subs	r2, #1
   1b27c:	61e1      	str	r1, [r4, #28]
   1b27e:	60a3      	str	r3, [r4, #8]
   1b280:	60e2      	str	r2, [r4, #12]
   1b282:	2a00      	cmp	r2, #0
   1b284:	d1e9      	bne.n	1b25a <localtime_r+0x136>
   1b286:	6923      	ldr	r3, [r4, #16]
   1b288:	3b01      	subs	r3, #1
   1b28a:	d432      	bmi.n	1b2f2 <localtime_r+0x1ce>
   1b28c:	6123      	str	r3, [r4, #16]
   1b28e:	009b      	lsls	r3, r3, #2
   1b290:	58eb      	ldr	r3, [r5, r3]
   1b292:	60e3      	str	r3, [r4, #12]
   1b294:	f000 faaa 	bl	1b7ec <__tz_unlock>
   1b298:	4620      	mov	r0, r4
   1b29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b29e:	2a00      	cmp	r2, #0
   1b2a0:	dac0      	bge.n	1b224 <localtime_r+0x100>
   1b2a2:	3b01      	subs	r3, #1
   1b2a4:	323c      	adds	r2, #60	; 0x3c
   1b2a6:	60a3      	str	r3, [r4, #8]
   1b2a8:	6062      	str	r2, [r4, #4]
   1b2aa:	e7bb      	b.n	1b224 <localtime_r+0x100>
   1b2ac:	2800      	cmp	r0, #0
   1b2ae:	dab3      	bge.n	1b218 <localtime_r+0xf4>
   1b2b0:	3a01      	subs	r2, #1
   1b2b2:	303c      	adds	r0, #60	; 0x3c
   1b2b4:	e884 0005 	stmia.w	r4, {r0, r2}
   1b2b8:	e7ae      	b.n	1b218 <localtime_r+0xf4>
   1b2ba:	4b23      	ldr	r3, [pc, #140]	; (1b348 <localtime_r+0x224>)
   1b2bc:	17f5      	asrs	r5, r6, #31
   1b2be:	fb83 2306 	smull	r2, r3, r3, r6
   1b2c2:	ebc5 1363 	rsb	r3, r5, r3, asr #5
   1b2c6:	2264      	movs	r2, #100	; 0x64
   1b2c8:	fb02 6313 	mls	r3, r2, r3, r6
   1b2cc:	2b00      	cmp	r3, #0
   1b2ce:	f43f af3c 	beq.w	1b14a <localtime_r+0x26>
   1b2d2:	2530      	movs	r5, #48	; 0x30
   1b2d4:	e746      	b.n	1b164 <localtime_r+0x40>
   1b2d6:	f04f 33ff 	mov.w	r3, #4294967295
   1b2da:	6223      	str	r3, [r4, #32]
   1b2dc:	e775      	b.n	1b1ca <localtime_r+0xa6>
   1b2de:	2301      	movs	r3, #1
   1b2e0:	6223      	str	r3, [r4, #32]
   1b2e2:	e763      	b.n	1b1ac <localtime_r+0x88>
   1b2e4:	6963      	ldr	r3, [r4, #20]
   1b2e6:	2200      	movs	r2, #0
   1b2e8:	3301      	adds	r3, #1
   1b2ea:	6163      	str	r3, [r4, #20]
   1b2ec:	6122      	str	r2, [r4, #16]
   1b2ee:	61e2      	str	r2, [r4, #28]
   1b2f0:	e7b3      	b.n	1b25a <localtime_r+0x136>
   1b2f2:	6963      	ldr	r3, [r4, #20]
   1b2f4:	1e5a      	subs	r2, r3, #1
   1b2f6:	210b      	movs	r1, #11
   1b2f8:	6162      	str	r2, [r4, #20]
   1b2fa:	0792      	lsls	r2, r2, #30
   1b2fc:	6121      	str	r1, [r4, #16]
   1b2fe:	d013      	beq.n	1b328 <localtime_r+0x204>
   1b300:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   1b304:	17d3      	asrs	r3, r2, #31
   1b306:	4910      	ldr	r1, [pc, #64]	; (1b348 <localtime_r+0x224>)
   1b308:	fb81 0102 	smull	r0, r1, r1, r2
   1b30c:	ebc3 13e1 	rsb	r3, r3, r1, asr #7
   1b310:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1b314:	fb01 2313 	mls	r3, r1, r3, r2
   1b318:	fab3 f383 	clz	r3, r3
   1b31c:	095b      	lsrs	r3, r3, #5
   1b31e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   1b322:	61e3      	str	r3, [r4, #28]
   1b324:	232c      	movs	r3, #44	; 0x2c
   1b326:	e7b3      	b.n	1b290 <localtime_r+0x16c>
   1b328:	4907      	ldr	r1, [pc, #28]	; (1b348 <localtime_r+0x224>)
   1b32a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   1b32e:	fb81 3102 	smull	r3, r1, r1, r2
   1b332:	17d3      	asrs	r3, r2, #31
   1b334:	ebc3 1161 	rsb	r1, r3, r1, asr #5
   1b338:	2064      	movs	r0, #100	; 0x64
   1b33a:	fb00 2111 	mls	r1, r0, r1, r2
   1b33e:	2900      	cmp	r1, #0
   1b340:	d0e1      	beq.n	1b306 <localtime_r+0x1e2>
   1b342:	f240 136d 	movw	r3, #365	; 0x16d
   1b346:	e7ec      	b.n	1b322 <localtime_r+0x1fe>
   1b348:	51eb851f 	.word	0x51eb851f
   1b34c:	000212ac 	.word	0x000212ac
   1b350:	2000a4b4 	.word	0x2000a4b4
   1b354:	91a2b3c5 	.word	0x91a2b3c5
   1b358:	88888889 	.word	0x88888889

0001b35c <memcpy>:
   1b35c:	4684      	mov	ip, r0
   1b35e:	ea41 0300 	orr.w	r3, r1, r0
   1b362:	f013 0303 	ands.w	r3, r3, #3
   1b366:	d16d      	bne.n	1b444 <memcpy+0xe8>
   1b368:	3a40      	subs	r2, #64	; 0x40
   1b36a:	d341      	bcc.n	1b3f0 <memcpy+0x94>
   1b36c:	f851 3b04 	ldr.w	r3, [r1], #4
   1b370:	f840 3b04 	str.w	r3, [r0], #4
   1b374:	f851 3b04 	ldr.w	r3, [r1], #4
   1b378:	f840 3b04 	str.w	r3, [r0], #4
   1b37c:	f851 3b04 	ldr.w	r3, [r1], #4
   1b380:	f840 3b04 	str.w	r3, [r0], #4
   1b384:	f851 3b04 	ldr.w	r3, [r1], #4
   1b388:	f840 3b04 	str.w	r3, [r0], #4
   1b38c:	f851 3b04 	ldr.w	r3, [r1], #4
   1b390:	f840 3b04 	str.w	r3, [r0], #4
   1b394:	f851 3b04 	ldr.w	r3, [r1], #4
   1b398:	f840 3b04 	str.w	r3, [r0], #4
   1b39c:	f851 3b04 	ldr.w	r3, [r1], #4
   1b3a0:	f840 3b04 	str.w	r3, [r0], #4
   1b3a4:	f851 3b04 	ldr.w	r3, [r1], #4
   1b3a8:	f840 3b04 	str.w	r3, [r0], #4
   1b3ac:	f851 3b04 	ldr.w	r3, [r1], #4
   1b3b0:	f840 3b04 	str.w	r3, [r0], #4
   1b3b4:	f851 3b04 	ldr.w	r3, [r1], #4
   1b3b8:	f840 3b04 	str.w	r3, [r0], #4
   1b3bc:	f851 3b04 	ldr.w	r3, [r1], #4
   1b3c0:	f840 3b04 	str.w	r3, [r0], #4
   1b3c4:	f851 3b04 	ldr.w	r3, [r1], #4
   1b3c8:	f840 3b04 	str.w	r3, [r0], #4
   1b3cc:	f851 3b04 	ldr.w	r3, [r1], #4
   1b3d0:	f840 3b04 	str.w	r3, [r0], #4
   1b3d4:	f851 3b04 	ldr.w	r3, [r1], #4
   1b3d8:	f840 3b04 	str.w	r3, [r0], #4
   1b3dc:	f851 3b04 	ldr.w	r3, [r1], #4
   1b3e0:	f840 3b04 	str.w	r3, [r0], #4
   1b3e4:	f851 3b04 	ldr.w	r3, [r1], #4
   1b3e8:	f840 3b04 	str.w	r3, [r0], #4
   1b3ec:	3a40      	subs	r2, #64	; 0x40
   1b3ee:	d2bd      	bcs.n	1b36c <memcpy+0x10>
   1b3f0:	3230      	adds	r2, #48	; 0x30
   1b3f2:	d311      	bcc.n	1b418 <memcpy+0xbc>
   1b3f4:	f851 3b04 	ldr.w	r3, [r1], #4
   1b3f8:	f840 3b04 	str.w	r3, [r0], #4
   1b3fc:	f851 3b04 	ldr.w	r3, [r1], #4
   1b400:	f840 3b04 	str.w	r3, [r0], #4
   1b404:	f851 3b04 	ldr.w	r3, [r1], #4
   1b408:	f840 3b04 	str.w	r3, [r0], #4
   1b40c:	f851 3b04 	ldr.w	r3, [r1], #4
   1b410:	f840 3b04 	str.w	r3, [r0], #4
   1b414:	3a10      	subs	r2, #16
   1b416:	d2ed      	bcs.n	1b3f4 <memcpy+0x98>
   1b418:	320c      	adds	r2, #12
   1b41a:	d305      	bcc.n	1b428 <memcpy+0xcc>
   1b41c:	f851 3b04 	ldr.w	r3, [r1], #4
   1b420:	f840 3b04 	str.w	r3, [r0], #4
   1b424:	3a04      	subs	r2, #4
   1b426:	d2f9      	bcs.n	1b41c <memcpy+0xc0>
   1b428:	3204      	adds	r2, #4
   1b42a:	d008      	beq.n	1b43e <memcpy+0xe2>
   1b42c:	07d2      	lsls	r2, r2, #31
   1b42e:	bf1c      	itt	ne
   1b430:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1b434:	f800 3b01 	strbne.w	r3, [r0], #1
   1b438:	d301      	bcc.n	1b43e <memcpy+0xe2>
   1b43a:	880b      	ldrh	r3, [r1, #0]
   1b43c:	8003      	strh	r3, [r0, #0]
   1b43e:	4660      	mov	r0, ip
   1b440:	4770      	bx	lr
   1b442:	bf00      	nop
   1b444:	2a08      	cmp	r2, #8
   1b446:	d313      	bcc.n	1b470 <memcpy+0x114>
   1b448:	078b      	lsls	r3, r1, #30
   1b44a:	d08d      	beq.n	1b368 <memcpy+0xc>
   1b44c:	f010 0303 	ands.w	r3, r0, #3
   1b450:	d08a      	beq.n	1b368 <memcpy+0xc>
   1b452:	f1c3 0304 	rsb	r3, r3, #4
   1b456:	1ad2      	subs	r2, r2, r3
   1b458:	07db      	lsls	r3, r3, #31
   1b45a:	bf1c      	itt	ne
   1b45c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1b460:	f800 3b01 	strbne.w	r3, [r0], #1
   1b464:	d380      	bcc.n	1b368 <memcpy+0xc>
   1b466:	f831 3b02 	ldrh.w	r3, [r1], #2
   1b46a:	f820 3b02 	strh.w	r3, [r0], #2
   1b46e:	e77b      	b.n	1b368 <memcpy+0xc>
   1b470:	3a04      	subs	r2, #4
   1b472:	d3d9      	bcc.n	1b428 <memcpy+0xcc>
   1b474:	3a01      	subs	r2, #1
   1b476:	f811 3b01 	ldrb.w	r3, [r1], #1
   1b47a:	f800 3b01 	strb.w	r3, [r0], #1
   1b47e:	d2f9      	bcs.n	1b474 <memcpy+0x118>
   1b480:	780b      	ldrb	r3, [r1, #0]
   1b482:	7003      	strb	r3, [r0, #0]
   1b484:	784b      	ldrb	r3, [r1, #1]
   1b486:	7043      	strb	r3, [r0, #1]
   1b488:	788b      	ldrb	r3, [r1, #2]
   1b48a:	7083      	strb	r3, [r0, #2]
   1b48c:	4660      	mov	r0, ip
   1b48e:	4770      	bx	lr

0001b490 <memset>:
   1b490:	b470      	push	{r4, r5, r6}
   1b492:	0786      	lsls	r6, r0, #30
   1b494:	d046      	beq.n	1b524 <memset+0x94>
   1b496:	1e54      	subs	r4, r2, #1
   1b498:	2a00      	cmp	r2, #0
   1b49a:	d041      	beq.n	1b520 <memset+0x90>
   1b49c:	b2ca      	uxtb	r2, r1
   1b49e:	4603      	mov	r3, r0
   1b4a0:	e002      	b.n	1b4a8 <memset+0x18>
   1b4a2:	f114 34ff 	adds.w	r4, r4, #4294967295
   1b4a6:	d33b      	bcc.n	1b520 <memset+0x90>
   1b4a8:	f803 2b01 	strb.w	r2, [r3], #1
   1b4ac:	079d      	lsls	r5, r3, #30
   1b4ae:	d1f8      	bne.n	1b4a2 <memset+0x12>
   1b4b0:	2c03      	cmp	r4, #3
   1b4b2:	d92e      	bls.n	1b512 <memset+0x82>
   1b4b4:	b2cd      	uxtb	r5, r1
   1b4b6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1b4ba:	2c0f      	cmp	r4, #15
   1b4bc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1b4c0:	d919      	bls.n	1b4f6 <memset+0x66>
   1b4c2:	f103 0210 	add.w	r2, r3, #16
   1b4c6:	4626      	mov	r6, r4
   1b4c8:	3e10      	subs	r6, #16
   1b4ca:	2e0f      	cmp	r6, #15
   1b4cc:	f842 5c10 	str.w	r5, [r2, #-16]
   1b4d0:	f842 5c0c 	str.w	r5, [r2, #-12]
   1b4d4:	f842 5c08 	str.w	r5, [r2, #-8]
   1b4d8:	f842 5c04 	str.w	r5, [r2, #-4]
   1b4dc:	f102 0210 	add.w	r2, r2, #16
   1b4e0:	d8f2      	bhi.n	1b4c8 <memset+0x38>
   1b4e2:	f1a4 0210 	sub.w	r2, r4, #16
   1b4e6:	f022 020f 	bic.w	r2, r2, #15
   1b4ea:	f004 040f 	and.w	r4, r4, #15
   1b4ee:	3210      	adds	r2, #16
   1b4f0:	2c03      	cmp	r4, #3
   1b4f2:	4413      	add	r3, r2
   1b4f4:	d90d      	bls.n	1b512 <memset+0x82>
   1b4f6:	461e      	mov	r6, r3
   1b4f8:	4622      	mov	r2, r4
   1b4fa:	3a04      	subs	r2, #4
   1b4fc:	2a03      	cmp	r2, #3
   1b4fe:	f846 5b04 	str.w	r5, [r6], #4
   1b502:	d8fa      	bhi.n	1b4fa <memset+0x6a>
   1b504:	1f22      	subs	r2, r4, #4
   1b506:	f022 0203 	bic.w	r2, r2, #3
   1b50a:	3204      	adds	r2, #4
   1b50c:	4413      	add	r3, r2
   1b50e:	f004 0403 	and.w	r4, r4, #3
   1b512:	b12c      	cbz	r4, 1b520 <memset+0x90>
   1b514:	b2c9      	uxtb	r1, r1
   1b516:	441c      	add	r4, r3
   1b518:	f803 1b01 	strb.w	r1, [r3], #1
   1b51c:	429c      	cmp	r4, r3
   1b51e:	d1fb      	bne.n	1b518 <memset+0x88>
   1b520:	bc70      	pop	{r4, r5, r6}
   1b522:	4770      	bx	lr
   1b524:	4614      	mov	r4, r2
   1b526:	4603      	mov	r3, r0
   1b528:	e7c2      	b.n	1b4b0 <memset+0x20>
   1b52a:	bf00      	nop

0001b52c <rand>:
   1b52c:	b410      	push	{r4}
   1b52e:	4b0c      	ldr	r3, [pc, #48]	; (1b560 <rand+0x34>)
   1b530:	480c      	ldr	r0, [pc, #48]	; (1b564 <rand+0x38>)
   1b532:	6819      	ldr	r1, [r3, #0]
   1b534:	4c0c      	ldr	r4, [pc, #48]	; (1b568 <rand+0x3c>)
   1b536:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   1b53a:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   1b53e:	fb00 f002 	mul.w	r0, r0, r2
   1b542:	fb04 0003 	mla	r0, r4, r3, r0
   1b546:	fba2 2304 	umull	r2, r3, r2, r4
   1b54a:	4403      	add	r3, r0
   1b54c:	3201      	adds	r2, #1
   1b54e:	f143 0300 	adc.w	r3, r3, #0
   1b552:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   1b556:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1b55a:	bc10      	pop	{r4}
   1b55c:	4770      	bx	lr
   1b55e:	bf00      	nop
   1b560:	20000248 	.word	0x20000248
   1b564:	5851f42d 	.word	0x5851f42d
   1b568:	4c957f2d 	.word	0x4c957f2d
	...

0001b580 <strlen>:
   1b580:	f890 f000 	pld	[r0]
   1b584:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1b588:	f020 0107 	bic.w	r1, r0, #7
   1b58c:	f06f 0c00 	mvn.w	ip, #0
   1b590:	f010 0407 	ands.w	r4, r0, #7
   1b594:	f891 f020 	pld	[r1, #32]
   1b598:	f040 8049 	bne.w	1b62e <strlen+0xae>
   1b59c:	f04f 0400 	mov.w	r4, #0
   1b5a0:	f06f 0007 	mvn.w	r0, #7
   1b5a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b5a8:	f891 f040 	pld	[r1, #64]	; 0x40
   1b5ac:	f100 0008 	add.w	r0, r0, #8
   1b5b0:	fa82 f24c 	uadd8	r2, r2, ip
   1b5b4:	faa4 f28c 	sel	r2, r4, ip
   1b5b8:	fa83 f34c 	uadd8	r3, r3, ip
   1b5bc:	faa2 f38c 	sel	r3, r2, ip
   1b5c0:	bb4b      	cbnz	r3, 1b616 <strlen+0x96>
   1b5c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1b5c6:	fa82 f24c 	uadd8	r2, r2, ip
   1b5ca:	f100 0008 	add.w	r0, r0, #8
   1b5ce:	faa4 f28c 	sel	r2, r4, ip
   1b5d2:	fa83 f34c 	uadd8	r3, r3, ip
   1b5d6:	faa2 f38c 	sel	r3, r2, ip
   1b5da:	b9e3      	cbnz	r3, 1b616 <strlen+0x96>
   1b5dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1b5e0:	fa82 f24c 	uadd8	r2, r2, ip
   1b5e4:	f100 0008 	add.w	r0, r0, #8
   1b5e8:	faa4 f28c 	sel	r2, r4, ip
   1b5ec:	fa83 f34c 	uadd8	r3, r3, ip
   1b5f0:	faa2 f38c 	sel	r3, r2, ip
   1b5f4:	b97b      	cbnz	r3, 1b616 <strlen+0x96>
   1b5f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1b5fa:	f101 0120 	add.w	r1, r1, #32
   1b5fe:	fa82 f24c 	uadd8	r2, r2, ip
   1b602:	f100 0008 	add.w	r0, r0, #8
   1b606:	faa4 f28c 	sel	r2, r4, ip
   1b60a:	fa83 f34c 	uadd8	r3, r3, ip
   1b60e:	faa2 f38c 	sel	r3, r2, ip
   1b612:	2b00      	cmp	r3, #0
   1b614:	d0c6      	beq.n	1b5a4 <strlen+0x24>
   1b616:	2a00      	cmp	r2, #0
   1b618:	bf04      	itt	eq
   1b61a:	3004      	addeq	r0, #4
   1b61c:	461a      	moveq	r2, r3
   1b61e:	ba12      	rev	r2, r2
   1b620:	fab2 f282 	clz	r2, r2
   1b624:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1b628:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1b62c:	4770      	bx	lr
   1b62e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b632:	f004 0503 	and.w	r5, r4, #3
   1b636:	f1c4 0000 	rsb	r0, r4, #0
   1b63a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1b63e:	f014 0f04 	tst.w	r4, #4
   1b642:	f891 f040 	pld	[r1, #64]	; 0x40
   1b646:	fa0c f505 	lsl.w	r5, ip, r5
   1b64a:	ea62 0205 	orn	r2, r2, r5
   1b64e:	bf1c      	itt	ne
   1b650:	ea63 0305 	ornne	r3, r3, r5
   1b654:	4662      	movne	r2, ip
   1b656:	f04f 0400 	mov.w	r4, #0
   1b65a:	e7a9      	b.n	1b5b0 <strlen+0x30>

0001b65c <__tzcalc_limits>:
   1b65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b660:	b083      	sub	sp, #12
   1b662:	4605      	mov	r5, r0
   1b664:	f000 fb64 	bl	1bd30 <__gettzinfo>
   1b668:	f240 73b1 	movw	r3, #1969	; 0x7b1
   1b66c:	429d      	cmp	r5, r3
   1b66e:	f340 8093 	ble.w	1b798 <__tzcalc_limits+0x13c>
   1b672:	4c57      	ldr	r4, [pc, #348]	; (1b7d0 <__tzcalc_limits+0x174>)
   1b674:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1b7dc <__tzcalc_limits+0x180>
   1b678:	6045      	str	r5, [r0, #4]
   1b67a:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   1b67e:	18ee      	adds	r6, r5, r3
   1b680:	f2a5 726d 	subw	r2, r5, #1901	; 0x76d
   1b684:	fb84 3102 	smull	r3, r1, r4, r2
   1b688:	10b7      	asrs	r7, r6, #2
   1b68a:	f240 1e6d 	movw	lr, #365	; 0x16d
   1b68e:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   1b692:	f2a5 76b2 	subw	r6, r5, #1970	; 0x7b2
   1b696:	17d2      	asrs	r2, r2, #31
   1b698:	eb05 030c 	add.w	r3, r5, ip
   1b69c:	fb0e 7606 	mla	r6, lr, r6, r7
   1b6a0:	eba2 1261 	sub.w	r2, r2, r1, asr #5
   1b6a4:	17ef      	asrs	r7, r5, #31
   1b6a6:	fb84 c105 	smull	ip, r1, r4, r5
   1b6aa:	4416      	add	r6, r2
   1b6ac:	fb84 e403 	smull	lr, r4, r4, r3
   1b6b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1b6b4:	ebc7 1ee1 	rsb	lr, r7, r1, asr #7
   1b6b8:	17db      	asrs	r3, r3, #31
   1b6ba:	ebc3 13e4 	rsb	r3, r3, r4, asr #7
   1b6be:	fb02 5e1e 	mls	lr, r2, lr, r5
   1b6c2:	ebc7 1761 	rsb	r7, r7, r1, asr #5
   1b6c6:	2264      	movs	r2, #100	; 0x64
   1b6c8:	441e      	add	r6, r3
   1b6ca:	f1be 0f00 	cmp.w	lr, #0
   1b6ce:	bf0c      	ite	eq
   1b6d0:	2330      	moveq	r3, #48	; 0x30
   1b6d2:	2300      	movne	r3, #0
   1b6d4:	fb02 5717 	mls	r7, r2, r7, r5
   1b6d8:	9301      	str	r3, [sp, #4]
   1b6da:	f005 0503 	and.w	r5, r5, #3
   1b6de:	4604      	mov	r4, r0
   1b6e0:	f100 0c38 	add.w	ip, r0, #56	; 0x38
   1b6e4:	7a23      	ldrb	r3, [r4, #8]
   1b6e6:	2b4a      	cmp	r3, #74	; 0x4a
   1b6e8:	d05a      	beq.n	1b7a0 <__tzcalc_limits+0x144>
   1b6ea:	2b44      	cmp	r3, #68	; 0x44
   1b6ec:	d068      	beq.n	1b7c0 <__tzcalc_limits+0x164>
   1b6ee:	2d00      	cmp	r5, #0
   1b6f0:	d04b      	beq.n	1b78a <__tzcalc_limits+0x12e>
   1b6f2:	f8dd 9004 	ldr.w	r9, [sp, #4]
   1b6f6:	68e3      	ldr	r3, [r4, #12]
   1b6f8:	4a36      	ldr	r2, [pc, #216]	; (1b7d4 <__tzcalc_limits+0x178>)
   1b6fa:	2b01      	cmp	r3, #1
   1b6fc:	4491      	add	r9, r2
   1b6fe:	dd62      	ble.n	1b7c6 <__tzcalc_limits+0x16a>
   1b700:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
   1b704:	f1ab 0b02 	sub.w	fp, fp, #2
   1b708:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   1b70c:	eb09 0a0b 	add.w	sl, r9, fp
   1b710:	f1a9 0304 	sub.w	r3, r9, #4
   1b714:	4632      	mov	r2, r6
   1b716:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1b71a:	459a      	cmp	sl, r3
   1b71c:	440a      	add	r2, r1
   1b71e:	d1fa      	bne.n	1b716 <__tzcalc_limits+0xba>
   1b720:	f10b 0b04 	add.w	fp, fp, #4
   1b724:	4b2c      	ldr	r3, [pc, #176]	; (1b7d8 <__tzcalc_limits+0x17c>)
   1b726:	f859 900b 	ldr.w	r9, [r9, fp]
   1b72a:	1d11      	adds	r1, r2, #4
   1b72c:	fb83 a301 	smull	sl, r3, r3, r1
   1b730:	440b      	add	r3, r1
   1b732:	ea4f 7ae1 	mov.w	sl, r1, asr #31
   1b736:	ebca 0aa3 	rsb	sl, sl, r3, asr #2
   1b73a:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
   1b73e:	6963      	ldr	r3, [r4, #20]
   1b740:	eba1 010a 	sub.w	r1, r1, sl
   1b744:	1a59      	subs	r1, r3, r1
   1b746:	6923      	ldr	r3, [r4, #16]
   1b748:	f103 33ff 	add.w	r3, r3, #4294967295
   1b74c:	bf48      	it	mi
   1b74e:	3107      	addmi	r1, #7
   1b750:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1b754:	440b      	add	r3, r1
   1b756:	454b      	cmp	r3, r9
   1b758:	db02      	blt.n	1b760 <__tzcalc_limits+0x104>
   1b75a:	3b07      	subs	r3, #7
   1b75c:	454b      	cmp	r3, r9
   1b75e:	dafc      	bge.n	1b75a <__tzcalc_limits+0xfe>
   1b760:	441a      	add	r2, r3
   1b762:	69a1      	ldr	r1, [r4, #24]
   1b764:	6a23      	ldr	r3, [r4, #32]
   1b766:	fb08 1102 	mla	r1, r8, r2, r1
   1b76a:	440b      	add	r3, r1
   1b76c:	f844 3f1c 	str.w	r3, [r4, #28]!
   1b770:	45a4      	cmp	ip, r4
   1b772:	d1b7      	bne.n	1b6e4 <__tzcalc_limits+0x88>
   1b774:	69c3      	ldr	r3, [r0, #28]
   1b776:	6b82      	ldr	r2, [r0, #56]	; 0x38
   1b778:	4293      	cmp	r3, r2
   1b77a:	bfac      	ite	ge
   1b77c:	2300      	movge	r3, #0
   1b77e:	2301      	movlt	r3, #1
   1b780:	6003      	str	r3, [r0, #0]
   1b782:	2001      	movs	r0, #1
   1b784:	b003      	add	sp, #12
   1b786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b78a:	9b01      	ldr	r3, [sp, #4]
   1b78c:	2f00      	cmp	r7, #0
   1b78e:	bf0c      	ite	eq
   1b790:	4699      	moveq	r9, r3
   1b792:	f04f 0930 	movne.w	r9, #48	; 0x30
   1b796:	e7ae      	b.n	1b6f6 <__tzcalc_limits+0x9a>
   1b798:	2000      	movs	r0, #0
   1b79a:	b003      	add	sp, #12
   1b79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7a0:	6962      	ldr	r2, [r4, #20]
   1b7a2:	18b1      	adds	r1, r6, r2
   1b7a4:	b93d      	cbnz	r5, 1b7b6 <__tzcalc_limits+0x15a>
   1b7a6:	b137      	cbz	r7, 1b7b6 <__tzcalc_limits+0x15a>
   1b7a8:	2a3b      	cmp	r2, #59	; 0x3b
   1b7aa:	bfd4      	ite	le
   1b7ac:	2200      	movle	r2, #0
   1b7ae:	2201      	movgt	r2, #1
   1b7b0:	440a      	add	r2, r1
   1b7b2:	3a01      	subs	r2, #1
   1b7b4:	e7d5      	b.n	1b762 <__tzcalc_limits+0x106>
   1b7b6:	f1be 0f00 	cmp.w	lr, #0
   1b7ba:	d0f5      	beq.n	1b7a8 <__tzcalc_limits+0x14c>
   1b7bc:	2200      	movs	r2, #0
   1b7be:	e7f7      	b.n	1b7b0 <__tzcalc_limits+0x154>
   1b7c0:	6962      	ldr	r2, [r4, #20]
   1b7c2:	4432      	add	r2, r6
   1b7c4:	e7cd      	b.n	1b762 <__tzcalc_limits+0x106>
   1b7c6:	4632      	mov	r2, r6
   1b7c8:	f04f 0b00 	mov.w	fp, #0
   1b7cc:	e7aa      	b.n	1b724 <__tzcalc_limits+0xc8>
   1b7ce:	bf00      	nop
   1b7d0:	51eb851f 	.word	0x51eb851f
   1b7d4:	000212ac 	.word	0x000212ac
   1b7d8:	92492493 	.word	0x92492493
   1b7dc:	00015180 	.word	0x00015180

0001b7e0 <__tz_lock>:
   1b7e0:	4801      	ldr	r0, [pc, #4]	; (1b7e8 <__tz_lock+0x8>)
   1b7e2:	f000 bb93 	b.w	1bf0c <__retarget_lock_acquire>
   1b7e6:	bf00      	nop
   1b7e8:	2000a7dc 	.word	0x2000a7dc

0001b7ec <__tz_unlock>:
   1b7ec:	4801      	ldr	r0, [pc, #4]	; (1b7f4 <__tz_unlock+0x8>)
   1b7ee:	f000 bb91 	b.w	1bf14 <__retarget_lock_release>
   1b7f2:	bf00      	nop
   1b7f4:	2000a7dc 	.word	0x2000a7dc

0001b7f8 <_tzset_unlocked>:
   1b7f8:	4b01      	ldr	r3, [pc, #4]	; (1b800 <_tzset_unlocked+0x8>)
   1b7fa:	6818      	ldr	r0, [r3, #0]
   1b7fc:	f000 b802 	b.w	1b804 <_tzset_unlocked_r>
   1b800:	20000248 	.word	0x20000248

0001b804 <_tzset_unlocked_r>:
   1b804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b808:	b08b      	sub	sp, #44	; 0x2c
   1b80a:	4607      	mov	r7, r0
   1b80c:	f000 fa90 	bl	1bd30 <__gettzinfo>
   1b810:	49bb      	ldr	r1, [pc, #748]	; (1bb00 <_tzset_unlocked_r+0x2fc>)
   1b812:	4dbc      	ldr	r5, [pc, #752]	; (1bb04 <_tzset_unlocked_r+0x300>)
   1b814:	4606      	mov	r6, r0
   1b816:	4638      	mov	r0, r7
   1b818:	f000 fa82 	bl	1bd20 <_getenv_r>
   1b81c:	4604      	mov	r4, r0
   1b81e:	2800      	cmp	r0, #0
   1b820:	f000 80f7 	beq.w	1ba12 <_tzset_unlocked_r+0x20e>
   1b824:	6829      	ldr	r1, [r5, #0]
   1b826:	b131      	cbz	r1, 1b836 <_tzset_unlocked_r+0x32>
   1b828:	f000 fefe 	bl	1c628 <strcmp>
   1b82c:	b910      	cbnz	r0, 1b834 <_tzset_unlocked_r+0x30>
   1b82e:	b00b      	add	sp, #44	; 0x2c
   1b830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b834:	6829      	ldr	r1, [r5, #0]
   1b836:	4608      	mov	r0, r1
   1b838:	f7f8 fbaa 	bl	13f90 <free>
   1b83c:	4620      	mov	r0, r4
   1b83e:	f7ff fe9f 	bl	1b580 <strlen>
   1b842:	1c41      	adds	r1, r0, #1
   1b844:	4638      	mov	r0, r7
   1b846:	f000 fb69 	bl	1bf1c <_malloc_r>
   1b84a:	6028      	str	r0, [r5, #0]
   1b84c:	b110      	cbz	r0, 1b854 <_tzset_unlocked_r+0x50>
   1b84e:	4621      	mov	r1, r4
   1b850:	f001 f854 	bl	1c8fc <strcpy>
   1b854:	7823      	ldrb	r3, [r4, #0]
   1b856:	4aac      	ldr	r2, [pc, #688]	; (1bb08 <_tzset_unlocked_r+0x304>)
   1b858:	49ac      	ldr	r1, [pc, #688]	; (1bb0c <_tzset_unlocked_r+0x308>)
   1b85a:	2b3a      	cmp	r3, #58	; 0x3a
   1b85c:	bf08      	it	eq
   1b85e:	3401      	addeq	r4, #1
   1b860:	ad08      	add	r5, sp, #32
   1b862:	462b      	mov	r3, r5
   1b864:	4620      	mov	r0, r4
   1b866:	f000 fe9f 	bl	1c5a8 <siscanf>
   1b86a:	2800      	cmp	r0, #0
   1b86c:	dddf      	ble.n	1b82e <_tzset_unlocked_r+0x2a>
   1b86e:	9b08      	ldr	r3, [sp, #32]
   1b870:	5ce2      	ldrb	r2, [r4, r3]
   1b872:	2a2d      	cmp	r2, #45	; 0x2d
   1b874:	441c      	add	r4, r3
   1b876:	f000 80c8 	beq.w	1ba0a <_tzset_unlocked_r+0x206>
   1b87a:	2a2b      	cmp	r2, #43	; 0x2b
   1b87c:	bf08      	it	eq
   1b87e:	3401      	addeq	r4, #1
   1b880:	f04f 0801 	mov.w	r8, #1
   1b884:	ab06      	add	r3, sp, #24
   1b886:	9302      	str	r3, [sp, #8]
   1b888:	f10d 0316 	add.w	r3, sp, #22
   1b88c:	2700      	movs	r7, #0
   1b88e:	9300      	str	r3, [sp, #0]
   1b890:	9503      	str	r5, [sp, #12]
   1b892:	9501      	str	r5, [sp, #4]
   1b894:	aa05      	add	r2, sp, #20
   1b896:	462b      	mov	r3, r5
   1b898:	499d      	ldr	r1, [pc, #628]	; (1bb10 <_tzset_unlocked_r+0x30c>)
   1b89a:	f8ad 7016 	strh.w	r7, [sp, #22]
   1b89e:	4620      	mov	r0, r4
   1b8a0:	f8ad 7018 	strh.w	r7, [sp, #24]
   1b8a4:	f000 fe80 	bl	1c5a8 <siscanf>
   1b8a8:	42b8      	cmp	r0, r7
   1b8aa:	ddc0      	ble.n	1b82e <_tzset_unlocked_r+0x2a>
   1b8ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1b8b0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1b8b4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1b8b8:	9808      	ldr	r0, [sp, #32]
   1b8ba:	f8df a26c 	ldr.w	sl, [pc, #620]	; 1bb28 <_tzset_unlocked_r+0x324>
   1b8be:	f8df 925c 	ldr.w	r9, [pc, #604]	; 1bb1c <_tzset_unlocked_r+0x318>
   1b8c2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1b8c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1b8ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1b8ce:	fb01 3302 	mla	r3, r1, r2, r3
   1b8d2:	fb08 f303 	mul.w	r3, r8, r3
   1b8d6:	6233      	str	r3, [r6, #32]
   1b8d8:	4404      	add	r4, r0
   1b8da:	4b8b      	ldr	r3, [pc, #556]	; (1bb08 <_tzset_unlocked_r+0x304>)
   1b8dc:	f8c9 3000 	str.w	r3, [r9]
   1b8e0:	4620      	mov	r0, r4
   1b8e2:	4652      	mov	r2, sl
   1b8e4:	4989      	ldr	r1, [pc, #548]	; (1bb0c <_tzset_unlocked_r+0x308>)
   1b8e6:	462b      	mov	r3, r5
   1b8e8:	f000 fe5e 	bl	1c5a8 <siscanf>
   1b8ec:	42b8      	cmp	r0, r7
   1b8ee:	f340 8082 	ble.w	1b9f6 <_tzset_unlocked_r+0x1f2>
   1b8f2:	9808      	ldr	r0, [sp, #32]
   1b8f4:	f8c9 a004 	str.w	sl, [r9, #4]
   1b8f8:	5c23      	ldrb	r3, [r4, r0]
   1b8fa:	2b2d      	cmp	r3, #45	; 0x2d
   1b8fc:	4404      	add	r4, r0
   1b8fe:	f000 8095 	beq.w	1ba2c <_tzset_unlocked_r+0x228>
   1b902:	2b2b      	cmp	r3, #43	; 0x2b
   1b904:	bf08      	it	eq
   1b906:	3401      	addeq	r4, #1
   1b908:	f04f 0801 	mov.w	r8, #1
   1b90c:	ab06      	add	r3, sp, #24
   1b90e:	9302      	str	r3, [sp, #8]
   1b910:	f10d 0316 	add.w	r3, sp, #22
   1b914:	2700      	movs	r7, #0
   1b916:	9300      	str	r3, [sp, #0]
   1b918:	9503      	str	r5, [sp, #12]
   1b91a:	9501      	str	r5, [sp, #4]
   1b91c:	462b      	mov	r3, r5
   1b91e:	aa05      	add	r2, sp, #20
   1b920:	497b      	ldr	r1, [pc, #492]	; (1bb10 <_tzset_unlocked_r+0x30c>)
   1b922:	f8ad 7014 	strh.w	r7, [sp, #20]
   1b926:	4620      	mov	r0, r4
   1b928:	f8ad 7016 	strh.w	r7, [sp, #22]
   1b92c:	f8ad 7018 	strh.w	r7, [sp, #24]
   1b930:	9708      	str	r7, [sp, #32]
   1b932:	f000 fe39 	bl	1c5a8 <siscanf>
   1b936:	42b8      	cmp	r0, r7
   1b938:	dd7c      	ble.n	1ba34 <_tzset_unlocked_r+0x230>
   1b93a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1b93e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1b942:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1b946:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1b94a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1b94e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1b952:	fb01 3302 	mla	r3, r1, r2, r3
   1b956:	fb08 f303 	mul.w	r3, r8, r3
   1b95a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1b95c:	9b08      	ldr	r3, [sp, #32]
   1b95e:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 1bb2c <_tzset_unlocked_r+0x328>
   1b962:	441c      	add	r4, r3
   1b964:	46b0      	mov	r8, r6
   1b966:	f04f 0a00 	mov.w	sl, #0
   1b96a:	7827      	ldrb	r7, [r4, #0]
   1b96c:	2f2c      	cmp	r7, #44	; 0x2c
   1b96e:	bf04      	itt	eq
   1b970:	7867      	ldrbeq	r7, [r4, #1]
   1b972:	3401      	addeq	r4, #1
   1b974:	2f4d      	cmp	r7, #77	; 0x4d
   1b976:	d062      	beq.n	1ba3e <_tzset_unlocked_r+0x23a>
   1b978:	2f4a      	cmp	r7, #74	; 0x4a
   1b97a:	bf08      	it	eq
   1b97c:	3401      	addeq	r4, #1
   1b97e:	f04f 020a 	mov.w	r2, #10
   1b982:	a909      	add	r1, sp, #36	; 0x24
   1b984:	4620      	mov	r0, r4
   1b986:	bf18      	it	ne
   1b988:	2744      	movne	r7, #68	; 0x44
   1b98a:	f001 f91d 	bl	1cbc8 <strtoul>
   1b98e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1b992:	f8ad 001e 	strh.w	r0, [sp, #30]
   1b996:	454c      	cmp	r4, r9
   1b998:	f000 809c 	beq.w	1bad4 <_tzset_unlocked_r+0x2d0>
   1b99c:	b280      	uxth	r0, r0
   1b99e:	f8c8 0014 	str.w	r0, [r8, #20]
   1b9a2:	f888 7008 	strb.w	r7, [r8, #8]
   1b9a6:	2400      	movs	r4, #0
   1b9a8:	2302      	movs	r3, #2
   1b9aa:	f8ad 3014 	strh.w	r3, [sp, #20]
   1b9ae:	f8ad 4016 	strh.w	r4, [sp, #22]
   1b9b2:	f8ad 4018 	strh.w	r4, [sp, #24]
   1b9b6:	9408      	str	r4, [sp, #32]
   1b9b8:	f899 3000 	ldrb.w	r3, [r9]
   1b9bc:	2b2f      	cmp	r3, #47	; 0x2f
   1b9be:	d06c      	beq.n	1ba9a <_tzset_unlocked_r+0x296>
   1b9c0:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   1b9c4:	f10a 0a01 	add.w	sl, sl, #1
   1b9c8:	f1ba 0f02 	cmp.w	sl, #2
   1b9cc:	f8c8 3018 	str.w	r3, [r8, #24]
   1b9d0:	444c      	add	r4, r9
   1b9d2:	f108 081c 	add.w	r8, r8, #28
   1b9d6:	d1c8      	bne.n	1b96a <_tzset_unlocked_r+0x166>
   1b9d8:	6870      	ldr	r0, [r6, #4]
   1b9da:	f7ff fe3f 	bl	1b65c <__tzcalc_limits>
   1b9de:	6a32      	ldr	r2, [r6, #32]
   1b9e0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1b9e2:	484c      	ldr	r0, [pc, #304]	; (1bb14 <_tzset_unlocked_r+0x310>)
   1b9e4:	494c      	ldr	r1, [pc, #304]	; (1bb18 <_tzset_unlocked_r+0x314>)
   1b9e6:	1a9b      	subs	r3, r3, r2
   1b9e8:	bf18      	it	ne
   1b9ea:	2301      	movne	r3, #1
   1b9ec:	6003      	str	r3, [r0, #0]
   1b9ee:	600a      	str	r2, [r1, #0]
   1b9f0:	b00b      	add	sp, #44	; 0x2c
   1b9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9f6:	4948      	ldr	r1, [pc, #288]	; (1bb18 <_tzset_unlocked_r+0x314>)
   1b9f8:	4a46      	ldr	r2, [pc, #280]	; (1bb14 <_tzset_unlocked_r+0x310>)
   1b9fa:	6a30      	ldr	r0, [r6, #32]
   1b9fc:	f8d9 3000 	ldr.w	r3, [r9]
   1ba00:	6008      	str	r0, [r1, #0]
   1ba02:	6017      	str	r7, [r2, #0]
   1ba04:	f8c9 3004 	str.w	r3, [r9, #4]
   1ba08:	e711      	b.n	1b82e <_tzset_unlocked_r+0x2a>
   1ba0a:	3401      	adds	r4, #1
   1ba0c:	f04f 38ff 	mov.w	r8, #4294967295
   1ba10:	e738      	b.n	1b884 <_tzset_unlocked_r+0x80>
   1ba12:	4b42      	ldr	r3, [pc, #264]	; (1bb1c <_tzset_unlocked_r+0x318>)
   1ba14:	493f      	ldr	r1, [pc, #252]	; (1bb14 <_tzset_unlocked_r+0x310>)
   1ba16:	4e40      	ldr	r6, [pc, #256]	; (1bb18 <_tzset_unlocked_r+0x314>)
   1ba18:	4a41      	ldr	r2, [pc, #260]	; (1bb20 <_tzset_unlocked_r+0x31c>)
   1ba1a:	6828      	ldr	r0, [r5, #0]
   1ba1c:	6034      	str	r4, [r6, #0]
   1ba1e:	600c      	str	r4, [r1, #0]
   1ba20:	601a      	str	r2, [r3, #0]
   1ba22:	605a      	str	r2, [r3, #4]
   1ba24:	f7f8 fab4 	bl	13f90 <free>
   1ba28:	602c      	str	r4, [r5, #0]
   1ba2a:	e700      	b.n	1b82e <_tzset_unlocked_r+0x2a>
   1ba2c:	3401      	adds	r4, #1
   1ba2e:	f04f 38ff 	mov.w	r8, #4294967295
   1ba32:	e76b      	b.n	1b90c <_tzset_unlocked_r+0x108>
   1ba34:	6a33      	ldr	r3, [r6, #32]
   1ba36:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   1ba3a:	63f3      	str	r3, [r6, #60]	; 0x3c
   1ba3c:	e78e      	b.n	1b95c <_tzset_unlocked_r+0x158>
   1ba3e:	f10d 021e 	add.w	r2, sp, #30
   1ba42:	ab07      	add	r3, sp, #28
   1ba44:	9202      	str	r2, [sp, #8]
   1ba46:	9300      	str	r3, [sp, #0]
   1ba48:	9503      	str	r5, [sp, #12]
   1ba4a:	9501      	str	r5, [sp, #4]
   1ba4c:	462b      	mov	r3, r5
   1ba4e:	f10d 021a 	add.w	r2, sp, #26
   1ba52:	4659      	mov	r1, fp
   1ba54:	4620      	mov	r0, r4
   1ba56:	f000 fda7 	bl	1c5a8 <siscanf>
   1ba5a:	2803      	cmp	r0, #3
   1ba5c:	f47f aee7 	bne.w	1b82e <_tzset_unlocked_r+0x2a>
   1ba60:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1ba64:	1e5a      	subs	r2, r3, #1
   1ba66:	2a0b      	cmp	r2, #11
   1ba68:	f63f aee1 	bhi.w	1b82e <_tzset_unlocked_r+0x2a>
   1ba6c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1ba70:	1e51      	subs	r1, r2, #1
   1ba72:	2904      	cmp	r1, #4
   1ba74:	f63f aedb 	bhi.w	1b82e <_tzset_unlocked_r+0x2a>
   1ba78:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   1ba7c:	2906      	cmp	r1, #6
   1ba7e:	f63f aed6 	bhi.w	1b82e <_tzset_unlocked_r+0x2a>
   1ba82:	f888 7008 	strb.w	r7, [r8, #8]
   1ba86:	f8c8 300c 	str.w	r3, [r8, #12]
   1ba8a:	f8c8 2010 	str.w	r2, [r8, #16]
   1ba8e:	f8c8 1014 	str.w	r1, [r8, #20]
   1ba92:	9b08      	ldr	r3, [sp, #32]
   1ba94:	eb04 0903 	add.w	r9, r4, r3
   1ba98:	e785      	b.n	1b9a6 <_tzset_unlocked_r+0x1a2>
   1ba9a:	ab06      	add	r3, sp, #24
   1ba9c:	9302      	str	r3, [sp, #8]
   1ba9e:	f10d 0316 	add.w	r3, sp, #22
   1baa2:	9300      	str	r3, [sp, #0]
   1baa4:	aa05      	add	r2, sp, #20
   1baa6:	462b      	mov	r3, r5
   1baa8:	491e      	ldr	r1, [pc, #120]	; (1bb24 <_tzset_unlocked_r+0x320>)
   1baaa:	9503      	str	r5, [sp, #12]
   1baac:	9501      	str	r5, [sp, #4]
   1baae:	4648      	mov	r0, r9
   1bab0:	f000 fd7a 	bl	1c5a8 <siscanf>
   1bab4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1bab8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1babc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1bac0:	9c08      	ldr	r4, [sp, #32]
   1bac2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   1bac6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1baca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   1bace:	fb01 2303 	mla	r3, r1, r3, r2
   1bad2:	e777      	b.n	1b9c4 <_tzset_unlocked_r+0x1c0>
   1bad4:	f1ba 0f00 	cmp.w	sl, #0
   1bad8:	d009      	beq.n	1baee <_tzset_unlocked_r+0x2ea>
   1bada:	224d      	movs	r2, #77	; 0x4d
   1badc:	230b      	movs	r3, #11
   1bade:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
   1bae2:	62b3      	str	r3, [r6, #40]	; 0x28
   1bae4:	2201      	movs	r2, #1
   1bae6:	2300      	movs	r3, #0
   1bae8:	62f2      	str	r2, [r6, #44]	; 0x2c
   1baea:	6333      	str	r3, [r6, #48]	; 0x30
   1baec:	e75b      	b.n	1b9a6 <_tzset_unlocked_r+0x1a2>
   1baee:	234d      	movs	r3, #77	; 0x4d
   1baf0:	2203      	movs	r2, #3
   1baf2:	7233      	strb	r3, [r6, #8]
   1baf4:	2302      	movs	r3, #2
   1baf6:	f8c6 a014 	str.w	sl, [r6, #20]
   1bafa:	60f2      	str	r2, [r6, #12]
   1bafc:	6133      	str	r3, [r6, #16]
   1bafe:	e752      	b.n	1b9a6 <_tzset_unlocked_r+0x1a2>
   1bb00:	0002130c 	.word	0x0002130c
   1bb04:	2000a4b0 	.word	0x2000a4b0
   1bb08:	2000a4a4 	.word	0x2000a4a4
   1bb0c:	00021314 	.word	0x00021314
   1bb10:	00021324 	.word	0x00021324
   1bb14:	2000a4b4 	.word	0x2000a4b4
   1bb18:	2000a4b8 	.word	0x2000a4b8
   1bb1c:	20000678 	.word	0x20000678
   1bb20:	00021310 	.word	0x00021310
   1bb24:	0002134c 	.word	0x0002134c
   1bb28:	2000a498 	.word	0x2000a498
   1bb2c:	00021338 	.word	0x00021338

0001bb30 <__register_exitproc>:
   1bb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bb34:	4d2c      	ldr	r5, [pc, #176]	; (1bbe8 <__register_exitproc+0xb8>)
   1bb36:	4606      	mov	r6, r0
   1bb38:	6828      	ldr	r0, [r5, #0]
   1bb3a:	4698      	mov	r8, r3
   1bb3c:	460f      	mov	r7, r1
   1bb3e:	4691      	mov	r9, r2
   1bb40:	f000 f9e6 	bl	1bf10 <__retarget_lock_acquire_recursive>
   1bb44:	4b29      	ldr	r3, [pc, #164]	; (1bbec <__register_exitproc+0xbc>)
   1bb46:	681c      	ldr	r4, [r3, #0]
   1bb48:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1bb4c:	2b00      	cmp	r3, #0
   1bb4e:	d03e      	beq.n	1bbce <__register_exitproc+0x9e>
   1bb50:	685a      	ldr	r2, [r3, #4]
   1bb52:	2a1f      	cmp	r2, #31
   1bb54:	dc1c      	bgt.n	1bb90 <__register_exitproc+0x60>
   1bb56:	f102 0e01 	add.w	lr, r2, #1
   1bb5a:	b176      	cbz	r6, 1bb7a <__register_exitproc+0x4a>
   1bb5c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1bb60:	2401      	movs	r4, #1
   1bb62:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1bb66:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1bb6a:	4094      	lsls	r4, r2
   1bb6c:	4320      	orrs	r0, r4
   1bb6e:	2e02      	cmp	r6, #2
   1bb70:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1bb74:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1bb78:	d023      	beq.n	1bbc2 <__register_exitproc+0x92>
   1bb7a:	3202      	adds	r2, #2
   1bb7c:	f8c3 e004 	str.w	lr, [r3, #4]
   1bb80:	6828      	ldr	r0, [r5, #0]
   1bb82:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1bb86:	f000 f9c7 	bl	1bf18 <__retarget_lock_release_recursive>
   1bb8a:	2000      	movs	r0, #0
   1bb8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bb90:	4b17      	ldr	r3, [pc, #92]	; (1bbf0 <__register_exitproc+0xc0>)
   1bb92:	b30b      	cbz	r3, 1bbd8 <__register_exitproc+0xa8>
   1bb94:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1bb98:	f7f8 f9f0 	bl	13f7c <malloc>
   1bb9c:	4603      	mov	r3, r0
   1bb9e:	b1d8      	cbz	r0, 1bbd8 <__register_exitproc+0xa8>
   1bba0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1bba4:	6002      	str	r2, [r0, #0]
   1bba6:	2100      	movs	r1, #0
   1bba8:	6041      	str	r1, [r0, #4]
   1bbaa:	460a      	mov	r2, r1
   1bbac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1bbb0:	f04f 0e01 	mov.w	lr, #1
   1bbb4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1bbb8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1bbbc:	2e00      	cmp	r6, #0
   1bbbe:	d0dc      	beq.n	1bb7a <__register_exitproc+0x4a>
   1bbc0:	e7cc      	b.n	1bb5c <__register_exitproc+0x2c>
   1bbc2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1bbc6:	430c      	orrs	r4, r1
   1bbc8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1bbcc:	e7d5      	b.n	1bb7a <__register_exitproc+0x4a>
   1bbce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1bbd2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1bbd6:	e7bb      	b.n	1bb50 <__register_exitproc+0x20>
   1bbd8:	6828      	ldr	r0, [r5, #0]
   1bbda:	f000 f99d 	bl	1bf18 <__retarget_lock_release_recursive>
   1bbde:	f04f 30ff 	mov.w	r0, #4294967295
   1bbe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bbe6:	bf00      	nop
   1bbe8:	20000680 	.word	0x20000680
   1bbec:	000212a8 	.word	0x000212a8
   1bbf0:	00013f7d 	.word	0x00013f7d

0001bbf4 <register_fini>:
   1bbf4:	4b02      	ldr	r3, [pc, #8]	; (1bc00 <register_fini+0xc>)
   1bbf6:	b113      	cbz	r3, 1bbfe <register_fini+0xa>
   1bbf8:	4802      	ldr	r0, [pc, #8]	; (1bc04 <register_fini+0x10>)
   1bbfa:	f000 b833 	b.w	1bc64 <atexit>
   1bbfe:	4770      	bx	lr
   1bc00:	00000000 	.word	0x00000000
   1bc04:	0001bc71 	.word	0x0001bc71

0001bc08 <asctime>:
   1bc08:	4b02      	ldr	r3, [pc, #8]	; (1bc14 <asctime+0xc>)
   1bc0a:	6819      	ldr	r1, [r3, #0]
   1bc0c:	3160      	adds	r1, #96	; 0x60
   1bc0e:	f000 b803 	b.w	1bc18 <asctime_r>
   1bc12:	bf00      	nop
   1bc14:	20000248 	.word	0x20000248

0001bc18 <asctime_r>:
   1bc18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc1a:	6946      	ldr	r6, [r0, #20]
   1bc1c:	6807      	ldr	r7, [r0, #0]
   1bc1e:	6905      	ldr	r5, [r0, #16]
   1bc20:	6984      	ldr	r4, [r0, #24]
   1bc22:	4b0d      	ldr	r3, [pc, #52]	; (1bc58 <asctime_r+0x40>)
   1bc24:	4a0d      	ldr	r2, [pc, #52]	; (1bc5c <asctime_r+0x44>)
   1bc26:	b087      	sub	sp, #28
   1bc28:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   1bc2c:	9703      	str	r7, [sp, #12]
   1bc2e:	460f      	mov	r7, r1
   1bc30:	6841      	ldr	r1, [r0, #4]
   1bc32:	9604      	str	r6, [sp, #16]
   1bc34:	6886      	ldr	r6, [r0, #8]
   1bc36:	68c0      	ldr	r0, [r0, #12]
   1bc38:	9102      	str	r1, [sp, #8]
   1bc3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1bc3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1bc42:	e88d 0041 	stmia.w	sp, {r0, r6}
   1bc46:	442b      	add	r3, r5
   1bc48:	4422      	add	r2, r4
   1bc4a:	4638      	mov	r0, r7
   1bc4c:	4904      	ldr	r1, [pc, #16]	; (1bc60 <asctime_r+0x48>)
   1bc4e:	f000 fc85 	bl	1c55c <siprintf>
   1bc52:	4638      	mov	r0, r7
   1bc54:	b007      	add	sp, #28
   1bc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc58:	00021398 	.word	0x00021398
   1bc5c:	00021380 	.word	0x00021380
   1bc60:	00021360 	.word	0x00021360

0001bc64 <atexit>:
   1bc64:	2300      	movs	r3, #0
   1bc66:	4601      	mov	r1, r0
   1bc68:	461a      	mov	r2, r3
   1bc6a:	4618      	mov	r0, r3
   1bc6c:	f7ff bf60 	b.w	1bb30 <__register_exitproc>

0001bc70 <__libc_fini_array>:
   1bc70:	b538      	push	{r3, r4, r5, lr}
   1bc72:	4c0a      	ldr	r4, [pc, #40]	; (1bc9c <__libc_fini_array+0x2c>)
   1bc74:	4d0a      	ldr	r5, [pc, #40]	; (1bca0 <__libc_fini_array+0x30>)
   1bc76:	1b64      	subs	r4, r4, r5
   1bc78:	10a4      	asrs	r4, r4, #2
   1bc7a:	d00a      	beq.n	1bc92 <__libc_fini_array+0x22>
   1bc7c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1bc80:	3b01      	subs	r3, #1
   1bc82:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1bc86:	3c01      	subs	r4, #1
   1bc88:	f855 3904 	ldr.w	r3, [r5], #-4
   1bc8c:	4798      	blx	r3
   1bc8e:	2c00      	cmp	r4, #0
   1bc90:	d1f9      	bne.n	1bc86 <__libc_fini_array+0x16>
   1bc92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1bc96:	f005 bc8d 	b.w	215b4 <_fini>
   1bc9a:	bf00      	nop
   1bc9c:	000215c4 	.word	0x000215c4
   1bca0:	000215c0 	.word	0x000215c0

0001bca4 <_findenv_r>:
   1bca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bca8:	4f1c      	ldr	r7, [pc, #112]	; (1bd1c <_findenv_r+0x78>)
   1bcaa:	460e      	mov	r6, r1
   1bcac:	4691      	mov	r9, r2
   1bcae:	4680      	mov	r8, r0
   1bcb0:	f002 faf2 	bl	1e298 <__env_lock>
   1bcb4:	683d      	ldr	r5, [r7, #0]
   1bcb6:	b1f5      	cbz	r5, 1bcf6 <_findenv_r+0x52>
   1bcb8:	7834      	ldrb	r4, [r6, #0]
   1bcba:	b15c      	cbz	r4, 1bcd4 <_findenv_r+0x30>
   1bcbc:	2c3d      	cmp	r4, #61	; 0x3d
   1bcbe:	bf18      	it	ne
   1bcc0:	4634      	movne	r4, r6
   1bcc2:	d102      	bne.n	1bcca <_findenv_r+0x26>
   1bcc4:	e017      	b.n	1bcf6 <_findenv_r+0x52>
   1bcc6:	2b3d      	cmp	r3, #61	; 0x3d
   1bcc8:	d015      	beq.n	1bcf6 <_findenv_r+0x52>
   1bcca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1bcce:	2b00      	cmp	r3, #0
   1bcd0:	d1f9      	bne.n	1bcc6 <_findenv_r+0x22>
   1bcd2:	1ba4      	subs	r4, r4, r6
   1bcd4:	6828      	ldr	r0, [r5, #0]
   1bcd6:	b170      	cbz	r0, 1bcf6 <_findenv_r+0x52>
   1bcd8:	4622      	mov	r2, r4
   1bcda:	4631      	mov	r1, r6
   1bcdc:	f000 fe6c 	bl	1c9b8 <strncmp>
   1bce0:	b928      	cbnz	r0, 1bcee <_findenv_r+0x4a>
   1bce2:	6828      	ldr	r0, [r5, #0]
   1bce4:	5d03      	ldrb	r3, [r0, r4]
   1bce6:	2b3d      	cmp	r3, #61	; 0x3d
   1bce8:	eb00 0a04 	add.w	sl, r0, r4
   1bcec:	d009      	beq.n	1bd02 <_findenv_r+0x5e>
   1bcee:	f855 0f04 	ldr.w	r0, [r5, #4]!
   1bcf2:	2800      	cmp	r0, #0
   1bcf4:	d1f0      	bne.n	1bcd8 <_findenv_r+0x34>
   1bcf6:	4640      	mov	r0, r8
   1bcf8:	f002 fad4 	bl	1e2a4 <__env_unlock>
   1bcfc:	2000      	movs	r0, #0
   1bcfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bd02:	683b      	ldr	r3, [r7, #0]
   1bd04:	1aed      	subs	r5, r5, r3
   1bd06:	10ad      	asrs	r5, r5, #2
   1bd08:	4640      	mov	r0, r8
   1bd0a:	f8c9 5000 	str.w	r5, [r9]
   1bd0e:	f002 fac9 	bl	1e2a4 <__env_unlock>
   1bd12:	f10a 0001 	add.w	r0, sl, #1
   1bd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bd1a:	bf00      	nop
   1bd1c:	20000ad4 	.word	0x20000ad4

0001bd20 <_getenv_r>:
   1bd20:	b500      	push	{lr}
   1bd22:	b083      	sub	sp, #12
   1bd24:	aa01      	add	r2, sp, #4
   1bd26:	f7ff ffbd 	bl	1bca4 <_findenv_r>
   1bd2a:	b003      	add	sp, #12
   1bd2c:	f85d fb04 	ldr.w	pc, [sp], #4

0001bd30 <__gettzinfo>:
   1bd30:	4800      	ldr	r0, [pc, #0]	; (1bd34 <__gettzinfo+0x4>)
   1bd32:	4770      	bx	lr
   1bd34:	20000684 	.word	0x20000684

0001bd38 <gmtime_r>:
   1bd38:	6800      	ldr	r0, [r0, #0]
   1bd3a:	4b65      	ldr	r3, [pc, #404]	; (1bed0 <gmtime_r+0x198>)
   1bd3c:	fb83 2300 	smull	r2, r3, r3, r0
   1bd40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bd44:	4403      	add	r3, r0
   1bd46:	4d63      	ldr	r5, [pc, #396]	; (1bed4 <gmtime_r+0x19c>)
   1bd48:	17c2      	asrs	r2, r0, #31
   1bd4a:	ebc2 4323 	rsb	r3, r2, r3, asr #16
   1bd4e:	fb05 0513 	mls	r5, r5, r3, r0
   1bd52:	2d00      	cmp	r5, #0
   1bd54:	f2c0 80b3 	blt.w	1bebe <gmtime_r+0x186>
   1bd58:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1bd5c:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
   1bd60:	4e5d      	ldr	r6, [pc, #372]	; (1bed8 <gmtime_r+0x1a0>)
   1bd62:	485e      	ldr	r0, [pc, #376]	; (1bedc <gmtime_r+0x1a4>)
   1bd64:	4a5e      	ldr	r2, [pc, #376]	; (1bee0 <gmtime_r+0x1a8>)
   1bd66:	4c5f      	ldr	r4, [pc, #380]	; (1bee4 <gmtime_r+0x1ac>)
   1bd68:	f8df c18c 	ldr.w	ip, [pc, #396]	; 1bef8 <gmtime_r+0x1c0>
   1bd6c:	f8df e18c 	ldr.w	lr, [pc, #396]	; 1befc <gmtime_r+0x1c4>
   1bd70:	fb86 7603 	smull	r7, r6, r6, r3
   1bd74:	17df      	asrs	r7, r3, #31
   1bd76:	ebc7 36e6 	rsb	r6, r7, r6, asr #15
   1bd7a:	fb00 3006 	mla	r0, r0, r6, r3
   1bd7e:	0887      	lsrs	r7, r0, #2
   1bd80:	fba2 8207 	umull	r8, r2, r2, r7
   1bd84:	eb00 22d2 	add.w	r2, r0, r2, lsr #11
   1bd88:	fba4 8707 	umull	r8, r7, r4, r7
   1bd8c:	ea4f 1810 	mov.w	r8, r0, lsr #4
   1bd90:	eba2 12d7 	sub.w	r2, r2, r7, lsr #7
   1bd94:	fbac c708 	umull	ip, r7, ip, r8
   1bd98:	eba2 1217 	sub.w	r2, r2, r7, lsr #4
   1bd9c:	f8df c160 	ldr.w	ip, [pc, #352]	; 1bf00 <gmtime_r+0x1c8>
   1bda0:	4f51      	ldr	r7, [pc, #324]	; (1bee8 <gmtime_r+0x1b0>)
   1bda2:	fbae 8e02 	umull	r8, lr, lr, r2
   1bda6:	fbac 9c02 	umull	r9, ip, ip, r2
   1bdaa:	eba2 080e 	sub.w	r8, r2, lr
   1bdae:	0892      	lsrs	r2, r2, #2
   1bdb0:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
   1bdb4:	eb00 30dc 	add.w	r0, r0, ip, lsr #15
   1bdb8:	fba4 4202 	umull	r4, r2, r4, r2
   1bdbc:	eba0 12d2 	sub.w	r2, r0, r2, lsr #7
   1bdc0:	ea4f 241e 	mov.w	r4, lr, lsr #8
   1bdc4:	f240 106d 	movw	r0, #365	; 0x16d
   1bdc8:	fb00 2214 	mls	r2, r0, r4, r2
   1bdcc:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1bf04 <gmtime_r+0x1cc>
   1bdd0:	fb87 0e05 	smull	r0, lr, r7, r5
   1bdd4:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1bdd8:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   1bddc:	44ae      	add	lr, r5
   1bdde:	3002      	adds	r0, #2
   1bde0:	ebcc 2eee 	rsb	lr, ip, lr, asr #11
   1bde4:	4f41      	ldr	r7, [pc, #260]	; (1beec <gmtime_r+0x1b4>)
   1bde6:	f8c1 e008 	str.w	lr, [r1, #8]
   1bdea:	f103 0c03 	add.w	ip, r3, #3
   1bdee:	fba8 3000 	umull	r3, r0, r8, r0
   1bdf2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   1bdf6:	fb03 551e 	mls	r5, r3, lr, r5
   1bdfa:	4b3d      	ldr	r3, [pc, #244]	; (1bef0 <gmtime_r+0x1b8>)
   1bdfc:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1bf08 <gmtime_r+0x1d0>
   1be00:	fb87 e705 	smull	lr, r7, r7, r5
   1be04:	fb83 390c 	smull	r3, r9, r3, ip
   1be08:	197b      	adds	r3, r7, r5
   1be0a:	f44f 77c8 	mov.w	r7, #400	; 0x190
   1be0e:	fb07 4606 	mla	r6, r7, r6, r4
   1be12:	17ef      	asrs	r7, r5, #31
   1be14:	44e1      	add	r9, ip
   1be16:	ebc7 1363 	rsb	r3, r7, r3, asr #5
   1be1a:	ea4f 77ec 	mov.w	r7, ip, asr #31
   1be1e:	09c0      	lsrs	r0, r0, #7
   1be20:	ebc7 07a9 	rsb	r7, r7, r9, asr #2
   1be24:	2809      	cmp	r0, #9
   1be26:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
   1be2a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
   1be2e:	ebac 0707 	sub.w	r7, ip, r7
   1be32:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
   1be36:	bf8c      	ite	hi
   1be38:	f06f 0c09 	mvnhi.w	ip, #9
   1be3c:	f04f 0c02 	movls.w	ip, #2
   1be40:	4460      	add	r0, ip
   1be42:	f10e 0e02 	add.w	lr, lr, #2
   1be46:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
   1be4a:	fba8 8e0e 	umull	r8, lr, r8, lr
   1be4e:	eba5 058c 	sub.w	r5, r5, ip, lsl #2
   1be52:	f102 0801 	add.w	r8, r2, #1
   1be56:	2801      	cmp	r0, #1
   1be58:	bf98      	it	ls
   1be5a:	3601      	addls	r6, #1
   1be5c:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
   1be60:	eba8 0e9e 	sub.w	lr, r8, lr, lsr #2
   1be64:	604b      	str	r3, [r1, #4]
   1be66:	600d      	str	r5, [r1, #0]
   1be68:	618f      	str	r7, [r1, #24]
   1be6a:	d225      	bcs.n	1beb8 <gmtime_r+0x180>
   1be6c:	07a3      	lsls	r3, r4, #30
   1be6e:	d018      	beq.n	1bea2 <gmtime_r+0x16a>
   1be70:	4b20      	ldr	r3, [pc, #128]	; (1bef4 <gmtime_r+0x1bc>)
   1be72:	fba3 5304 	umull	r5, r3, r3, r4
   1be76:	09db      	lsrs	r3, r3, #7
   1be78:	f44f 75c8 	mov.w	r5, #400	; 0x190
   1be7c:	fb05 4413 	mls	r4, r5, r3, r4
   1be80:	fab4 f484 	clz	r4, r4
   1be84:	0964      	lsrs	r4, r4, #5
   1be86:	323b      	adds	r2, #59	; 0x3b
   1be88:	4422      	add	r2, r4
   1be8a:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   1be8e:	2300      	movs	r3, #0
   1be90:	6108      	str	r0, [r1, #16]
   1be92:	614e      	str	r6, [r1, #20]
   1be94:	61ca      	str	r2, [r1, #28]
   1be96:	f8c1 e00c 	str.w	lr, [r1, #12]
   1be9a:	620b      	str	r3, [r1, #32]
   1be9c:	4608      	mov	r0, r1
   1be9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1bea2:	4b14      	ldr	r3, [pc, #80]	; (1bef4 <gmtime_r+0x1bc>)
   1bea4:	fba3 5304 	umull	r5, r3, r3, r4
   1bea8:	095b      	lsrs	r3, r3, #5
   1beaa:	2564      	movs	r5, #100	; 0x64
   1beac:	fb05 4313 	mls	r3, r5, r3, r4
   1beb0:	2b00      	cmp	r3, #0
   1beb2:	d0dd      	beq.n	1be70 <gmtime_r+0x138>
   1beb4:	2401      	movs	r4, #1
   1beb6:	e7e6      	b.n	1be86 <gmtime_r+0x14e>
   1beb8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
   1bebc:	e7e5      	b.n	1be8a <gmtime_r+0x152>
   1bebe:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
   1bec2:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
   1bec6:	f505 75c0 	add.w	r5, r5, #384	; 0x180
   1beca:	f603 236b 	addw	r3, r3, #2667	; 0xa6b
   1bece:	e747      	b.n	1bd60 <gmtime_r+0x28>
   1bed0:	c22e4507 	.word	0xc22e4507
   1bed4:	00015180 	.word	0x00015180
   1bed8:	396b06bd 	.word	0x396b06bd
   1bedc:	fffdc54f 	.word	0xfffdc54f
   1bee0:	396b207f 	.word	0x396b207f
   1bee4:	59c67cd9 	.word	0x59c67cd9
   1bee8:	91a2b3c5 	.word	0x91a2b3c5
   1beec:	88888889 	.word	0x88888889
   1bef0:	92492493 	.word	0x92492493
   1bef4:	51eb851f 	.word	0x51eb851f
   1bef8:	0072d641 	.word	0x0072d641
   1befc:	6719f361 	.word	0x6719f361
   1bf00:	e5d32b1f 	.word	0xe5d32b1f
   1bf04:	d62b80d7 	.word	0xd62b80d7
   1bf08:	cccccccd 	.word	0xcccccccd

0001bf0c <__retarget_lock_acquire>:
   1bf0c:	4770      	bx	lr
   1bf0e:	bf00      	nop

0001bf10 <__retarget_lock_acquire_recursive>:
   1bf10:	4770      	bx	lr
   1bf12:	bf00      	nop

0001bf14 <__retarget_lock_release>:
   1bf14:	4770      	bx	lr
   1bf16:	bf00      	nop

0001bf18 <__retarget_lock_release_recursive>:
   1bf18:	4770      	bx	lr
   1bf1a:	bf00      	nop

0001bf1c <_malloc_r>:
   1bf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf20:	f101 060b 	add.w	r6, r1, #11
   1bf24:	2e16      	cmp	r6, #22
   1bf26:	b083      	sub	sp, #12
   1bf28:	4605      	mov	r5, r0
   1bf2a:	f240 809e 	bls.w	1c06a <_malloc_r+0x14e>
   1bf2e:	f036 0607 	bics.w	r6, r6, #7
   1bf32:	f100 80bd 	bmi.w	1c0b0 <_malloc_r+0x194>
   1bf36:	42b1      	cmp	r1, r6
   1bf38:	f200 80ba 	bhi.w	1c0b0 <_malloc_r+0x194>
   1bf3c:	f000 faf0 	bl	1c520 <__malloc_lock>
   1bf40:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1bf44:	f0c0 8293 	bcc.w	1c46e <_malloc_r+0x552>
   1bf48:	0a73      	lsrs	r3, r6, #9
   1bf4a:	f000 80b8 	beq.w	1c0be <_malloc_r+0x1a2>
   1bf4e:	2b04      	cmp	r3, #4
   1bf50:	f200 8179 	bhi.w	1c246 <_malloc_r+0x32a>
   1bf54:	09b3      	lsrs	r3, r6, #6
   1bf56:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1bf5a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   1bf5e:	00c3      	lsls	r3, r0, #3
   1bf60:	4fbf      	ldr	r7, [pc, #764]	; (1c260 <_malloc_r+0x344>)
   1bf62:	443b      	add	r3, r7
   1bf64:	f1a3 0108 	sub.w	r1, r3, #8
   1bf68:	685c      	ldr	r4, [r3, #4]
   1bf6a:	42a1      	cmp	r1, r4
   1bf6c:	d106      	bne.n	1bf7c <_malloc_r+0x60>
   1bf6e:	e00c      	b.n	1bf8a <_malloc_r+0x6e>
   1bf70:	2a00      	cmp	r2, #0
   1bf72:	f280 80aa 	bge.w	1c0ca <_malloc_r+0x1ae>
   1bf76:	68e4      	ldr	r4, [r4, #12]
   1bf78:	42a1      	cmp	r1, r4
   1bf7a:	d006      	beq.n	1bf8a <_malloc_r+0x6e>
   1bf7c:	6863      	ldr	r3, [r4, #4]
   1bf7e:	f023 0303 	bic.w	r3, r3, #3
   1bf82:	1b9a      	subs	r2, r3, r6
   1bf84:	2a0f      	cmp	r2, #15
   1bf86:	ddf3      	ble.n	1bf70 <_malloc_r+0x54>
   1bf88:	4670      	mov	r0, lr
   1bf8a:	693c      	ldr	r4, [r7, #16]
   1bf8c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 1c274 <_malloc_r+0x358>
   1bf90:	4574      	cmp	r4, lr
   1bf92:	f000 81ab 	beq.w	1c2ec <_malloc_r+0x3d0>
   1bf96:	6863      	ldr	r3, [r4, #4]
   1bf98:	f023 0303 	bic.w	r3, r3, #3
   1bf9c:	1b9a      	subs	r2, r3, r6
   1bf9e:	2a0f      	cmp	r2, #15
   1bfa0:	f300 8190 	bgt.w	1c2c4 <_malloc_r+0x3a8>
   1bfa4:	2a00      	cmp	r2, #0
   1bfa6:	f8c7 e014 	str.w	lr, [r7, #20]
   1bfaa:	f8c7 e010 	str.w	lr, [r7, #16]
   1bfae:	f280 809d 	bge.w	1c0ec <_malloc_r+0x1d0>
   1bfb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1bfb6:	f080 8161 	bcs.w	1c27c <_malloc_r+0x360>
   1bfba:	08db      	lsrs	r3, r3, #3
   1bfbc:	f103 0c01 	add.w	ip, r3, #1
   1bfc0:	1099      	asrs	r1, r3, #2
   1bfc2:	687a      	ldr	r2, [r7, #4]
   1bfc4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   1bfc8:	f8c4 8008 	str.w	r8, [r4, #8]
   1bfcc:	2301      	movs	r3, #1
   1bfce:	408b      	lsls	r3, r1
   1bfd0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   1bfd4:	4313      	orrs	r3, r2
   1bfd6:	3908      	subs	r1, #8
   1bfd8:	60e1      	str	r1, [r4, #12]
   1bfda:	607b      	str	r3, [r7, #4]
   1bfdc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   1bfe0:	f8c8 400c 	str.w	r4, [r8, #12]
   1bfe4:	1082      	asrs	r2, r0, #2
   1bfe6:	2401      	movs	r4, #1
   1bfe8:	4094      	lsls	r4, r2
   1bfea:	429c      	cmp	r4, r3
   1bfec:	f200 808b 	bhi.w	1c106 <_malloc_r+0x1ea>
   1bff0:	421c      	tst	r4, r3
   1bff2:	d106      	bne.n	1c002 <_malloc_r+0xe6>
   1bff4:	f020 0003 	bic.w	r0, r0, #3
   1bff8:	0064      	lsls	r4, r4, #1
   1bffa:	421c      	tst	r4, r3
   1bffc:	f100 0004 	add.w	r0, r0, #4
   1c000:	d0fa      	beq.n	1bff8 <_malloc_r+0xdc>
   1c002:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1c006:	46cc      	mov	ip, r9
   1c008:	4680      	mov	r8, r0
   1c00a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1c00e:	459c      	cmp	ip, r3
   1c010:	d107      	bne.n	1c022 <_malloc_r+0x106>
   1c012:	e16d      	b.n	1c2f0 <_malloc_r+0x3d4>
   1c014:	2a00      	cmp	r2, #0
   1c016:	f280 817b 	bge.w	1c310 <_malloc_r+0x3f4>
   1c01a:	68db      	ldr	r3, [r3, #12]
   1c01c:	459c      	cmp	ip, r3
   1c01e:	f000 8167 	beq.w	1c2f0 <_malloc_r+0x3d4>
   1c022:	6859      	ldr	r1, [r3, #4]
   1c024:	f021 0103 	bic.w	r1, r1, #3
   1c028:	1b8a      	subs	r2, r1, r6
   1c02a:	2a0f      	cmp	r2, #15
   1c02c:	ddf2      	ble.n	1c014 <_malloc_r+0xf8>
   1c02e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1c032:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1c036:	9300      	str	r3, [sp, #0]
   1c038:	199c      	adds	r4, r3, r6
   1c03a:	4628      	mov	r0, r5
   1c03c:	f046 0601 	orr.w	r6, r6, #1
   1c040:	f042 0501 	orr.w	r5, r2, #1
   1c044:	605e      	str	r6, [r3, #4]
   1c046:	f8c8 c00c 	str.w	ip, [r8, #12]
   1c04a:	f8cc 8008 	str.w	r8, [ip, #8]
   1c04e:	617c      	str	r4, [r7, #20]
   1c050:	613c      	str	r4, [r7, #16]
   1c052:	f8c4 e00c 	str.w	lr, [r4, #12]
   1c056:	f8c4 e008 	str.w	lr, [r4, #8]
   1c05a:	6065      	str	r5, [r4, #4]
   1c05c:	505a      	str	r2, [r3, r1]
   1c05e:	f000 fa65 	bl	1c52c <__malloc_unlock>
   1c062:	9b00      	ldr	r3, [sp, #0]
   1c064:	f103 0408 	add.w	r4, r3, #8
   1c068:	e01e      	b.n	1c0a8 <_malloc_r+0x18c>
   1c06a:	2910      	cmp	r1, #16
   1c06c:	d820      	bhi.n	1c0b0 <_malloc_r+0x194>
   1c06e:	f000 fa57 	bl	1c520 <__malloc_lock>
   1c072:	2610      	movs	r6, #16
   1c074:	2318      	movs	r3, #24
   1c076:	2002      	movs	r0, #2
   1c078:	4f79      	ldr	r7, [pc, #484]	; (1c260 <_malloc_r+0x344>)
   1c07a:	443b      	add	r3, r7
   1c07c:	f1a3 0208 	sub.w	r2, r3, #8
   1c080:	685c      	ldr	r4, [r3, #4]
   1c082:	4294      	cmp	r4, r2
   1c084:	f000 813d 	beq.w	1c302 <_malloc_r+0x3e6>
   1c088:	6863      	ldr	r3, [r4, #4]
   1c08a:	68e1      	ldr	r1, [r4, #12]
   1c08c:	68a6      	ldr	r6, [r4, #8]
   1c08e:	f023 0303 	bic.w	r3, r3, #3
   1c092:	4423      	add	r3, r4
   1c094:	4628      	mov	r0, r5
   1c096:	685a      	ldr	r2, [r3, #4]
   1c098:	60f1      	str	r1, [r6, #12]
   1c09a:	f042 0201 	orr.w	r2, r2, #1
   1c09e:	608e      	str	r6, [r1, #8]
   1c0a0:	605a      	str	r2, [r3, #4]
   1c0a2:	f000 fa43 	bl	1c52c <__malloc_unlock>
   1c0a6:	3408      	adds	r4, #8
   1c0a8:	4620      	mov	r0, r4
   1c0aa:	b003      	add	sp, #12
   1c0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0b0:	2400      	movs	r4, #0
   1c0b2:	230c      	movs	r3, #12
   1c0b4:	4620      	mov	r0, r4
   1c0b6:	602b      	str	r3, [r5, #0]
   1c0b8:	b003      	add	sp, #12
   1c0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0be:	2040      	movs	r0, #64	; 0x40
   1c0c0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c0c4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   1c0c8:	e74a      	b.n	1bf60 <_malloc_r+0x44>
   1c0ca:	4423      	add	r3, r4
   1c0cc:	68e1      	ldr	r1, [r4, #12]
   1c0ce:	685a      	ldr	r2, [r3, #4]
   1c0d0:	68a6      	ldr	r6, [r4, #8]
   1c0d2:	f042 0201 	orr.w	r2, r2, #1
   1c0d6:	60f1      	str	r1, [r6, #12]
   1c0d8:	4628      	mov	r0, r5
   1c0da:	608e      	str	r6, [r1, #8]
   1c0dc:	605a      	str	r2, [r3, #4]
   1c0de:	f000 fa25 	bl	1c52c <__malloc_unlock>
   1c0e2:	3408      	adds	r4, #8
   1c0e4:	4620      	mov	r0, r4
   1c0e6:	b003      	add	sp, #12
   1c0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0ec:	4423      	add	r3, r4
   1c0ee:	4628      	mov	r0, r5
   1c0f0:	685a      	ldr	r2, [r3, #4]
   1c0f2:	f042 0201 	orr.w	r2, r2, #1
   1c0f6:	605a      	str	r2, [r3, #4]
   1c0f8:	f000 fa18 	bl	1c52c <__malloc_unlock>
   1c0fc:	3408      	adds	r4, #8
   1c0fe:	4620      	mov	r0, r4
   1c100:	b003      	add	sp, #12
   1c102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c106:	68bc      	ldr	r4, [r7, #8]
   1c108:	6863      	ldr	r3, [r4, #4]
   1c10a:	f023 0803 	bic.w	r8, r3, #3
   1c10e:	45b0      	cmp	r8, r6
   1c110:	d304      	bcc.n	1c11c <_malloc_r+0x200>
   1c112:	eba8 0306 	sub.w	r3, r8, r6
   1c116:	2b0f      	cmp	r3, #15
   1c118:	f300 8085 	bgt.w	1c226 <_malloc_r+0x30a>
   1c11c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1c278 <_malloc_r+0x35c>
   1c120:	4b50      	ldr	r3, [pc, #320]	; (1c264 <_malloc_r+0x348>)
   1c122:	f8d9 2000 	ldr.w	r2, [r9]
   1c126:	681b      	ldr	r3, [r3, #0]
   1c128:	3201      	adds	r2, #1
   1c12a:	4433      	add	r3, r6
   1c12c:	eb04 0a08 	add.w	sl, r4, r8
   1c130:	f000 8155 	beq.w	1c3de <_malloc_r+0x4c2>
   1c134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1c138:	330f      	adds	r3, #15
   1c13a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   1c13e:	f02b 0b0f 	bic.w	fp, fp, #15
   1c142:	4659      	mov	r1, fp
   1c144:	4628      	mov	r0, r5
   1c146:	f000 f9f7 	bl	1c538 <_sbrk_r>
   1c14a:	1c41      	adds	r1, r0, #1
   1c14c:	4602      	mov	r2, r0
   1c14e:	f000 80fc 	beq.w	1c34a <_malloc_r+0x42e>
   1c152:	4582      	cmp	sl, r0
   1c154:	f200 80f7 	bhi.w	1c346 <_malloc_r+0x42a>
   1c158:	4b43      	ldr	r3, [pc, #268]	; (1c268 <_malloc_r+0x34c>)
   1c15a:	6819      	ldr	r1, [r3, #0]
   1c15c:	4459      	add	r1, fp
   1c15e:	6019      	str	r1, [r3, #0]
   1c160:	f000 814d 	beq.w	1c3fe <_malloc_r+0x4e2>
   1c164:	f8d9 0000 	ldr.w	r0, [r9]
   1c168:	3001      	adds	r0, #1
   1c16a:	bf1b      	ittet	ne
   1c16c:	eba2 0a0a 	subne.w	sl, r2, sl
   1c170:	4451      	addne	r1, sl
   1c172:	f8c9 2000 	streq.w	r2, [r9]
   1c176:	6019      	strne	r1, [r3, #0]
   1c178:	f012 0107 	ands.w	r1, r2, #7
   1c17c:	f000 8115 	beq.w	1c3aa <_malloc_r+0x48e>
   1c180:	f1c1 0008 	rsb	r0, r1, #8
   1c184:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1c188:	4402      	add	r2, r0
   1c18a:	3108      	adds	r1, #8
   1c18c:	eb02 090b 	add.w	r9, r2, fp
   1c190:	f3c9 090b 	ubfx	r9, r9, #0, #12
   1c194:	eba1 0909 	sub.w	r9, r1, r9
   1c198:	4649      	mov	r1, r9
   1c19a:	4628      	mov	r0, r5
   1c19c:	9301      	str	r3, [sp, #4]
   1c19e:	9200      	str	r2, [sp, #0]
   1c1a0:	f000 f9ca 	bl	1c538 <_sbrk_r>
   1c1a4:	1c43      	adds	r3, r0, #1
   1c1a6:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1c1aa:	f000 8143 	beq.w	1c434 <_malloc_r+0x518>
   1c1ae:	1a80      	subs	r0, r0, r2
   1c1b0:	4448      	add	r0, r9
   1c1b2:	f040 0001 	orr.w	r0, r0, #1
   1c1b6:	6819      	ldr	r1, [r3, #0]
   1c1b8:	60ba      	str	r2, [r7, #8]
   1c1ba:	4449      	add	r1, r9
   1c1bc:	42bc      	cmp	r4, r7
   1c1be:	6050      	str	r0, [r2, #4]
   1c1c0:	6019      	str	r1, [r3, #0]
   1c1c2:	d017      	beq.n	1c1f4 <_malloc_r+0x2d8>
   1c1c4:	f1b8 0f0f 	cmp.w	r8, #15
   1c1c8:	f240 80fb 	bls.w	1c3c2 <_malloc_r+0x4a6>
   1c1cc:	6860      	ldr	r0, [r4, #4]
   1c1ce:	f1a8 020c 	sub.w	r2, r8, #12
   1c1d2:	f022 0207 	bic.w	r2, r2, #7
   1c1d6:	eb04 0e02 	add.w	lr, r4, r2
   1c1da:	f000 0001 	and.w	r0, r0, #1
   1c1de:	f04f 0c05 	mov.w	ip, #5
   1c1e2:	4310      	orrs	r0, r2
   1c1e4:	2a0f      	cmp	r2, #15
   1c1e6:	6060      	str	r0, [r4, #4]
   1c1e8:	f8ce c004 	str.w	ip, [lr, #4]
   1c1ec:	f8ce c008 	str.w	ip, [lr, #8]
   1c1f0:	f200 8117 	bhi.w	1c422 <_malloc_r+0x506>
   1c1f4:	4b1d      	ldr	r3, [pc, #116]	; (1c26c <_malloc_r+0x350>)
   1c1f6:	68bc      	ldr	r4, [r7, #8]
   1c1f8:	681a      	ldr	r2, [r3, #0]
   1c1fa:	4291      	cmp	r1, r2
   1c1fc:	bf88      	it	hi
   1c1fe:	6019      	strhi	r1, [r3, #0]
   1c200:	4b1b      	ldr	r3, [pc, #108]	; (1c270 <_malloc_r+0x354>)
   1c202:	681a      	ldr	r2, [r3, #0]
   1c204:	4291      	cmp	r1, r2
   1c206:	6862      	ldr	r2, [r4, #4]
   1c208:	bf88      	it	hi
   1c20a:	6019      	strhi	r1, [r3, #0]
   1c20c:	f022 0203 	bic.w	r2, r2, #3
   1c210:	4296      	cmp	r6, r2
   1c212:	eba2 0306 	sub.w	r3, r2, r6
   1c216:	d801      	bhi.n	1c21c <_malloc_r+0x300>
   1c218:	2b0f      	cmp	r3, #15
   1c21a:	dc04      	bgt.n	1c226 <_malloc_r+0x30a>
   1c21c:	4628      	mov	r0, r5
   1c21e:	f000 f985 	bl	1c52c <__malloc_unlock>
   1c222:	2400      	movs	r4, #0
   1c224:	e740      	b.n	1c0a8 <_malloc_r+0x18c>
   1c226:	19a2      	adds	r2, r4, r6
   1c228:	f043 0301 	orr.w	r3, r3, #1
   1c22c:	f046 0601 	orr.w	r6, r6, #1
   1c230:	6066      	str	r6, [r4, #4]
   1c232:	4628      	mov	r0, r5
   1c234:	60ba      	str	r2, [r7, #8]
   1c236:	6053      	str	r3, [r2, #4]
   1c238:	f000 f978 	bl	1c52c <__malloc_unlock>
   1c23c:	3408      	adds	r4, #8
   1c23e:	4620      	mov	r0, r4
   1c240:	b003      	add	sp, #12
   1c242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c246:	2b14      	cmp	r3, #20
   1c248:	d971      	bls.n	1c32e <_malloc_r+0x412>
   1c24a:	2b54      	cmp	r3, #84	; 0x54
   1c24c:	f200 80a3 	bhi.w	1c396 <_malloc_r+0x47a>
   1c250:	0b33      	lsrs	r3, r6, #12
   1c252:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1c256:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   1c25a:	00c3      	lsls	r3, r0, #3
   1c25c:	e680      	b.n	1bf60 <_malloc_r+0x44>
   1c25e:	bf00      	nop
   1c260:	200006c4 	.word	0x200006c4
   1c264:	2000a4ec 	.word	0x2000a4ec
   1c268:	2000a4bc 	.word	0x2000a4bc
   1c26c:	2000a4e4 	.word	0x2000a4e4
   1c270:	2000a4e8 	.word	0x2000a4e8
   1c274:	200006cc 	.word	0x200006cc
   1c278:	20000acc 	.word	0x20000acc
   1c27c:	0a5a      	lsrs	r2, r3, #9
   1c27e:	2a04      	cmp	r2, #4
   1c280:	d95b      	bls.n	1c33a <_malloc_r+0x41e>
   1c282:	2a14      	cmp	r2, #20
   1c284:	f200 80ae 	bhi.w	1c3e4 <_malloc_r+0x4c8>
   1c288:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1c28c:	00c9      	lsls	r1, r1, #3
   1c28e:	325b      	adds	r2, #91	; 0x5b
   1c290:	eb07 0c01 	add.w	ip, r7, r1
   1c294:	5879      	ldr	r1, [r7, r1]
   1c296:	f1ac 0c08 	sub.w	ip, ip, #8
   1c29a:	458c      	cmp	ip, r1
   1c29c:	f000 8088 	beq.w	1c3b0 <_malloc_r+0x494>
   1c2a0:	684a      	ldr	r2, [r1, #4]
   1c2a2:	f022 0203 	bic.w	r2, r2, #3
   1c2a6:	4293      	cmp	r3, r2
   1c2a8:	d273      	bcs.n	1c392 <_malloc_r+0x476>
   1c2aa:	6889      	ldr	r1, [r1, #8]
   1c2ac:	458c      	cmp	ip, r1
   1c2ae:	d1f7      	bne.n	1c2a0 <_malloc_r+0x384>
   1c2b0:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1c2b4:	687b      	ldr	r3, [r7, #4]
   1c2b6:	60e2      	str	r2, [r4, #12]
   1c2b8:	f8c4 c008 	str.w	ip, [r4, #8]
   1c2bc:	6094      	str	r4, [r2, #8]
   1c2be:	f8cc 400c 	str.w	r4, [ip, #12]
   1c2c2:	e68f      	b.n	1bfe4 <_malloc_r+0xc8>
   1c2c4:	19a1      	adds	r1, r4, r6
   1c2c6:	f046 0c01 	orr.w	ip, r6, #1
   1c2ca:	f042 0601 	orr.w	r6, r2, #1
   1c2ce:	f8c4 c004 	str.w	ip, [r4, #4]
   1c2d2:	4628      	mov	r0, r5
   1c2d4:	6179      	str	r1, [r7, #20]
   1c2d6:	6139      	str	r1, [r7, #16]
   1c2d8:	f8c1 e00c 	str.w	lr, [r1, #12]
   1c2dc:	f8c1 e008 	str.w	lr, [r1, #8]
   1c2e0:	604e      	str	r6, [r1, #4]
   1c2e2:	50e2      	str	r2, [r4, r3]
   1c2e4:	f000 f922 	bl	1c52c <__malloc_unlock>
   1c2e8:	3408      	adds	r4, #8
   1c2ea:	e6dd      	b.n	1c0a8 <_malloc_r+0x18c>
   1c2ec:	687b      	ldr	r3, [r7, #4]
   1c2ee:	e679      	b.n	1bfe4 <_malloc_r+0xc8>
   1c2f0:	f108 0801 	add.w	r8, r8, #1
   1c2f4:	f018 0f03 	tst.w	r8, #3
   1c2f8:	f10c 0c08 	add.w	ip, ip, #8
   1c2fc:	f47f ae85 	bne.w	1c00a <_malloc_r+0xee>
   1c300:	e02d      	b.n	1c35e <_malloc_r+0x442>
   1c302:	68dc      	ldr	r4, [r3, #12]
   1c304:	42a3      	cmp	r3, r4
   1c306:	bf08      	it	eq
   1c308:	3002      	addeq	r0, #2
   1c30a:	f43f ae3e 	beq.w	1bf8a <_malloc_r+0x6e>
   1c30e:	e6bb      	b.n	1c088 <_malloc_r+0x16c>
   1c310:	4419      	add	r1, r3
   1c312:	461c      	mov	r4, r3
   1c314:	684a      	ldr	r2, [r1, #4]
   1c316:	68db      	ldr	r3, [r3, #12]
   1c318:	f854 6f08 	ldr.w	r6, [r4, #8]!
   1c31c:	f042 0201 	orr.w	r2, r2, #1
   1c320:	604a      	str	r2, [r1, #4]
   1c322:	4628      	mov	r0, r5
   1c324:	60f3      	str	r3, [r6, #12]
   1c326:	609e      	str	r6, [r3, #8]
   1c328:	f000 f900 	bl	1c52c <__malloc_unlock>
   1c32c:	e6bc      	b.n	1c0a8 <_malloc_r+0x18c>
   1c32e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1c332:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   1c336:	00c3      	lsls	r3, r0, #3
   1c338:	e612      	b.n	1bf60 <_malloc_r+0x44>
   1c33a:	099a      	lsrs	r2, r3, #6
   1c33c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   1c340:	00c9      	lsls	r1, r1, #3
   1c342:	3238      	adds	r2, #56	; 0x38
   1c344:	e7a4      	b.n	1c290 <_malloc_r+0x374>
   1c346:	42bc      	cmp	r4, r7
   1c348:	d054      	beq.n	1c3f4 <_malloc_r+0x4d8>
   1c34a:	68bc      	ldr	r4, [r7, #8]
   1c34c:	6862      	ldr	r2, [r4, #4]
   1c34e:	f022 0203 	bic.w	r2, r2, #3
   1c352:	e75d      	b.n	1c210 <_malloc_r+0x2f4>
   1c354:	f859 3908 	ldr.w	r3, [r9], #-8
   1c358:	4599      	cmp	r9, r3
   1c35a:	f040 8086 	bne.w	1c46a <_malloc_r+0x54e>
   1c35e:	f010 0f03 	tst.w	r0, #3
   1c362:	f100 30ff 	add.w	r0, r0, #4294967295
   1c366:	d1f5      	bne.n	1c354 <_malloc_r+0x438>
   1c368:	687b      	ldr	r3, [r7, #4]
   1c36a:	ea23 0304 	bic.w	r3, r3, r4
   1c36e:	607b      	str	r3, [r7, #4]
   1c370:	0064      	lsls	r4, r4, #1
   1c372:	429c      	cmp	r4, r3
   1c374:	f63f aec7 	bhi.w	1c106 <_malloc_r+0x1ea>
   1c378:	2c00      	cmp	r4, #0
   1c37a:	f43f aec4 	beq.w	1c106 <_malloc_r+0x1ea>
   1c37e:	421c      	tst	r4, r3
   1c380:	4640      	mov	r0, r8
   1c382:	f47f ae3e 	bne.w	1c002 <_malloc_r+0xe6>
   1c386:	0064      	lsls	r4, r4, #1
   1c388:	421c      	tst	r4, r3
   1c38a:	f100 0004 	add.w	r0, r0, #4
   1c38e:	d0fa      	beq.n	1c386 <_malloc_r+0x46a>
   1c390:	e637      	b.n	1c002 <_malloc_r+0xe6>
   1c392:	468c      	mov	ip, r1
   1c394:	e78c      	b.n	1c2b0 <_malloc_r+0x394>
   1c396:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1c39a:	d815      	bhi.n	1c3c8 <_malloc_r+0x4ac>
   1c39c:	0bf3      	lsrs	r3, r6, #15
   1c39e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1c3a2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   1c3a6:	00c3      	lsls	r3, r0, #3
   1c3a8:	e5da      	b.n	1bf60 <_malloc_r+0x44>
   1c3aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1c3ae:	e6ed      	b.n	1c18c <_malloc_r+0x270>
   1c3b0:	687b      	ldr	r3, [r7, #4]
   1c3b2:	1092      	asrs	r2, r2, #2
   1c3b4:	2101      	movs	r1, #1
   1c3b6:	fa01 f202 	lsl.w	r2, r1, r2
   1c3ba:	4313      	orrs	r3, r2
   1c3bc:	607b      	str	r3, [r7, #4]
   1c3be:	4662      	mov	r2, ip
   1c3c0:	e779      	b.n	1c2b6 <_malloc_r+0x39a>
   1c3c2:	2301      	movs	r3, #1
   1c3c4:	6053      	str	r3, [r2, #4]
   1c3c6:	e729      	b.n	1c21c <_malloc_r+0x300>
   1c3c8:	f240 5254 	movw	r2, #1364	; 0x554
   1c3cc:	4293      	cmp	r3, r2
   1c3ce:	d822      	bhi.n	1c416 <_malloc_r+0x4fa>
   1c3d0:	0cb3      	lsrs	r3, r6, #18
   1c3d2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1c3d6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   1c3da:	00c3      	lsls	r3, r0, #3
   1c3dc:	e5c0      	b.n	1bf60 <_malloc_r+0x44>
   1c3de:	f103 0b10 	add.w	fp, r3, #16
   1c3e2:	e6ae      	b.n	1c142 <_malloc_r+0x226>
   1c3e4:	2a54      	cmp	r2, #84	; 0x54
   1c3e6:	d829      	bhi.n	1c43c <_malloc_r+0x520>
   1c3e8:	0b1a      	lsrs	r2, r3, #12
   1c3ea:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   1c3ee:	00c9      	lsls	r1, r1, #3
   1c3f0:	326e      	adds	r2, #110	; 0x6e
   1c3f2:	e74d      	b.n	1c290 <_malloc_r+0x374>
   1c3f4:	4b20      	ldr	r3, [pc, #128]	; (1c478 <_malloc_r+0x55c>)
   1c3f6:	6819      	ldr	r1, [r3, #0]
   1c3f8:	4459      	add	r1, fp
   1c3fa:	6019      	str	r1, [r3, #0]
   1c3fc:	e6b2      	b.n	1c164 <_malloc_r+0x248>
   1c3fe:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1c402:	2800      	cmp	r0, #0
   1c404:	f47f aeae 	bne.w	1c164 <_malloc_r+0x248>
   1c408:	eb08 030b 	add.w	r3, r8, fp
   1c40c:	68ba      	ldr	r2, [r7, #8]
   1c40e:	f043 0301 	orr.w	r3, r3, #1
   1c412:	6053      	str	r3, [r2, #4]
   1c414:	e6ee      	b.n	1c1f4 <_malloc_r+0x2d8>
   1c416:	207f      	movs	r0, #127	; 0x7f
   1c418:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1c41c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   1c420:	e59e      	b.n	1bf60 <_malloc_r+0x44>
   1c422:	f104 0108 	add.w	r1, r4, #8
   1c426:	4628      	mov	r0, r5
   1c428:	9300      	str	r3, [sp, #0]
   1c42a:	f001 ff91 	bl	1e350 <_free_r>
   1c42e:	9b00      	ldr	r3, [sp, #0]
   1c430:	6819      	ldr	r1, [r3, #0]
   1c432:	e6df      	b.n	1c1f4 <_malloc_r+0x2d8>
   1c434:	2001      	movs	r0, #1
   1c436:	f04f 0900 	mov.w	r9, #0
   1c43a:	e6bc      	b.n	1c1b6 <_malloc_r+0x29a>
   1c43c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1c440:	d805      	bhi.n	1c44e <_malloc_r+0x532>
   1c442:	0bda      	lsrs	r2, r3, #15
   1c444:	f102 0178 	add.w	r1, r2, #120	; 0x78
   1c448:	00c9      	lsls	r1, r1, #3
   1c44a:	3277      	adds	r2, #119	; 0x77
   1c44c:	e720      	b.n	1c290 <_malloc_r+0x374>
   1c44e:	f240 5154 	movw	r1, #1364	; 0x554
   1c452:	428a      	cmp	r2, r1
   1c454:	d805      	bhi.n	1c462 <_malloc_r+0x546>
   1c456:	0c9a      	lsrs	r2, r3, #18
   1c458:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   1c45c:	00c9      	lsls	r1, r1, #3
   1c45e:	327c      	adds	r2, #124	; 0x7c
   1c460:	e716      	b.n	1c290 <_malloc_r+0x374>
   1c462:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1c466:	227e      	movs	r2, #126	; 0x7e
   1c468:	e712      	b.n	1c290 <_malloc_r+0x374>
   1c46a:	687b      	ldr	r3, [r7, #4]
   1c46c:	e780      	b.n	1c370 <_malloc_r+0x454>
   1c46e:	08f0      	lsrs	r0, r6, #3
   1c470:	f106 0308 	add.w	r3, r6, #8
   1c474:	e600      	b.n	1c078 <_malloc_r+0x15c>
   1c476:	bf00      	nop
   1c478:	2000a4bc 	.word	0x2000a4bc
   1c47c:	00000000 	.word	0x00000000

0001c480 <memchr>:
   1c480:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1c484:	2a10      	cmp	r2, #16
   1c486:	db2b      	blt.n	1c4e0 <memchr+0x60>
   1c488:	f010 0f07 	tst.w	r0, #7
   1c48c:	d008      	beq.n	1c4a0 <memchr+0x20>
   1c48e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1c492:	3a01      	subs	r2, #1
   1c494:	428b      	cmp	r3, r1
   1c496:	d02d      	beq.n	1c4f4 <memchr+0x74>
   1c498:	f010 0f07 	tst.w	r0, #7
   1c49c:	b342      	cbz	r2, 1c4f0 <memchr+0x70>
   1c49e:	d1f6      	bne.n	1c48e <memchr+0xe>
   1c4a0:	b4f0      	push	{r4, r5, r6, r7}
   1c4a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1c4a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1c4aa:	f022 0407 	bic.w	r4, r2, #7
   1c4ae:	f07f 0700 	mvns.w	r7, #0
   1c4b2:	2300      	movs	r3, #0
   1c4b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   1c4b8:	3c08      	subs	r4, #8
   1c4ba:	ea85 0501 	eor.w	r5, r5, r1
   1c4be:	ea86 0601 	eor.w	r6, r6, r1
   1c4c2:	fa85 f547 	uadd8	r5, r5, r7
   1c4c6:	faa3 f587 	sel	r5, r3, r7
   1c4ca:	fa86 f647 	uadd8	r6, r6, r7
   1c4ce:	faa5 f687 	sel	r6, r5, r7
   1c4d2:	b98e      	cbnz	r6, 1c4f8 <memchr+0x78>
   1c4d4:	d1ee      	bne.n	1c4b4 <memchr+0x34>
   1c4d6:	bcf0      	pop	{r4, r5, r6, r7}
   1c4d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1c4dc:	f002 0207 	and.w	r2, r2, #7
   1c4e0:	b132      	cbz	r2, 1c4f0 <memchr+0x70>
   1c4e2:	f810 3b01 	ldrb.w	r3, [r0], #1
   1c4e6:	3a01      	subs	r2, #1
   1c4e8:	ea83 0301 	eor.w	r3, r3, r1
   1c4ec:	b113      	cbz	r3, 1c4f4 <memchr+0x74>
   1c4ee:	d1f8      	bne.n	1c4e2 <memchr+0x62>
   1c4f0:	2000      	movs	r0, #0
   1c4f2:	4770      	bx	lr
   1c4f4:	3801      	subs	r0, #1
   1c4f6:	4770      	bx	lr
   1c4f8:	2d00      	cmp	r5, #0
   1c4fa:	bf06      	itte	eq
   1c4fc:	4635      	moveq	r5, r6
   1c4fe:	3803      	subeq	r0, #3
   1c500:	3807      	subne	r0, #7
   1c502:	f015 0f01 	tst.w	r5, #1
   1c506:	d107      	bne.n	1c518 <memchr+0x98>
   1c508:	3001      	adds	r0, #1
   1c50a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1c50e:	bf02      	ittt	eq
   1c510:	3001      	addeq	r0, #1
   1c512:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   1c516:	3001      	addeq	r0, #1
   1c518:	bcf0      	pop	{r4, r5, r6, r7}
   1c51a:	3801      	subs	r0, #1
   1c51c:	4770      	bx	lr
   1c51e:	bf00      	nop

0001c520 <__malloc_lock>:
   1c520:	4801      	ldr	r0, [pc, #4]	; (1c528 <__malloc_lock+0x8>)
   1c522:	f7ff bcf5 	b.w	1bf10 <__retarget_lock_acquire_recursive>
   1c526:	bf00      	nop
   1c528:	2000a7d0 	.word	0x2000a7d0

0001c52c <__malloc_unlock>:
   1c52c:	4801      	ldr	r0, [pc, #4]	; (1c534 <__malloc_unlock+0x8>)
   1c52e:	f7ff bcf3 	b.w	1bf18 <__retarget_lock_release_recursive>
   1c532:	bf00      	nop
   1c534:	2000a7d0 	.word	0x2000a7d0

0001c538 <_sbrk_r>:
   1c538:	b538      	push	{r3, r4, r5, lr}
   1c53a:	4c07      	ldr	r4, [pc, #28]	; (1c558 <_sbrk_r+0x20>)
   1c53c:	2300      	movs	r3, #0
   1c53e:	4605      	mov	r5, r0
   1c540:	4608      	mov	r0, r1
   1c542:	6023      	str	r3, [r4, #0]
   1c544:	f7f7 fd2d 	bl	13fa2 <_sbrk>
   1c548:	1c43      	adds	r3, r0, #1
   1c54a:	d000      	beq.n	1c54e <_sbrk_r+0x16>
   1c54c:	bd38      	pop	{r3, r4, r5, pc}
   1c54e:	6823      	ldr	r3, [r4, #0]
   1c550:	2b00      	cmp	r3, #0
   1c552:	d0fb      	beq.n	1c54c <_sbrk_r+0x14>
   1c554:	602b      	str	r3, [r5, #0]
   1c556:	bd38      	pop	{r3, r4, r5, pc}
   1c558:	2000a7e4 	.word	0x2000a7e4

0001c55c <siprintf>:
   1c55c:	b40e      	push	{r1, r2, r3}
   1c55e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c560:	b09c      	sub	sp, #112	; 0x70
   1c562:	ab21      	add	r3, sp, #132	; 0x84
   1c564:	490f      	ldr	r1, [pc, #60]	; (1c5a4 <siprintf+0x48>)
   1c566:	f853 2b04 	ldr.w	r2, [r3], #4
   1c56a:	9301      	str	r3, [sp, #4]
   1c56c:	4605      	mov	r5, r0
   1c56e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1c572:	6808      	ldr	r0, [r1, #0]
   1c574:	9502      	str	r5, [sp, #8]
   1c576:	f44f 7702 	mov.w	r7, #520	; 0x208
   1c57a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1c57e:	a902      	add	r1, sp, #8
   1c580:	9506      	str	r5, [sp, #24]
   1c582:	f8ad 7014 	strh.w	r7, [sp, #20]
   1c586:	9404      	str	r4, [sp, #16]
   1c588:	9407      	str	r4, [sp, #28]
   1c58a:	f8ad 6016 	strh.w	r6, [sp, #22]
   1c58e:	f000 fbaf 	bl	1ccf0 <_svfiprintf_r>
   1c592:	9b02      	ldr	r3, [sp, #8]
   1c594:	2200      	movs	r2, #0
   1c596:	701a      	strb	r2, [r3, #0]
   1c598:	b01c      	add	sp, #112	; 0x70
   1c59a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c59e:	b003      	add	sp, #12
   1c5a0:	4770      	bx	lr
   1c5a2:	bf00      	nop
   1c5a4:	20000248 	.word	0x20000248

0001c5a8 <siscanf>:
   1c5a8:	b40e      	push	{r1, r2, r3}
   1c5aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c5ac:	b09c      	sub	sp, #112	; 0x70
   1c5ae:	ac21      	add	r4, sp, #132	; 0x84
   1c5b0:	f44f 7201 	mov.w	r2, #516	; 0x204
   1c5b4:	f854 6b04 	ldr.w	r6, [r4], #4
   1c5b8:	f8ad 2014 	strh.w	r2, [sp, #20]
   1c5bc:	9002      	str	r0, [sp, #8]
   1c5be:	9006      	str	r0, [sp, #24]
   1c5c0:	f7fe ffde 	bl	1b580 <strlen>
   1c5c4:	4b0c      	ldr	r3, [pc, #48]	; (1c5f8 <siscanf+0x50>)
   1c5c6:	9401      	str	r4, [sp, #4]
   1c5c8:	4605      	mov	r5, r0
   1c5ca:	4632      	mov	r2, r6
   1c5cc:	4f0b      	ldr	r7, [pc, #44]	; (1c5fc <siscanf+0x54>)
   1c5ce:	6818      	ldr	r0, [r3, #0]
   1c5d0:	9503      	str	r5, [sp, #12]
   1c5d2:	4623      	mov	r3, r4
   1c5d4:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1c5d8:	2400      	movs	r4, #0
   1c5da:	a902      	add	r1, sp, #8
   1c5dc:	9507      	str	r5, [sp, #28]
   1c5de:	970a      	str	r7, [sp, #40]	; 0x28
   1c5e0:	940e      	str	r4, [sp, #56]	; 0x38
   1c5e2:	9413      	str	r4, [sp, #76]	; 0x4c
   1c5e4:	f8ad 6016 	strh.w	r6, [sp, #22]
   1c5e8:	f001 f94a 	bl	1d880 <__ssvfiscanf_r>
   1c5ec:	b01c      	add	sp, #112	; 0x70
   1c5ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c5f2:	b003      	add	sp, #12
   1c5f4:	4770      	bx	lr
   1c5f6:	bf00      	nop
   1c5f8:	20000248 	.word	0x20000248
   1c5fc:	0001c601 	.word	0x0001c601

0001c600 <__seofread>:
   1c600:	2000      	movs	r0, #0
   1c602:	4770      	bx	lr
	...
   1c620:	eba2 0003 	sub.w	r0, r2, r3
   1c624:	4770      	bx	lr
   1c626:	bf00      	nop

0001c628 <strcmp>:
   1c628:	7802      	ldrb	r2, [r0, #0]
   1c62a:	780b      	ldrb	r3, [r1, #0]
   1c62c:	2a01      	cmp	r2, #1
   1c62e:	bf28      	it	cs
   1c630:	429a      	cmpcs	r2, r3
   1c632:	d1f5      	bne.n	1c620 <__seofread+0x20>
   1c634:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1c638:	ea40 0401 	orr.w	r4, r0, r1
   1c63c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1c640:	f06f 0c00 	mvn.w	ip, #0
   1c644:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1c648:	b312      	cbz	r2, 1c690 <strcmp+0x68>
   1c64a:	ea80 0401 	eor.w	r4, r0, r1
   1c64e:	f014 0f07 	tst.w	r4, #7
   1c652:	d16a      	bne.n	1c72a <strcmp+0x102>
   1c654:	f000 0407 	and.w	r4, r0, #7
   1c658:	f020 0007 	bic.w	r0, r0, #7
   1c65c:	f004 0503 	and.w	r5, r4, #3
   1c660:	f021 0107 	bic.w	r1, r1, #7
   1c664:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1c668:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1c66c:	f014 0f04 	tst.w	r4, #4
   1c670:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1c674:	fa0c f405 	lsl.w	r4, ip, r5
   1c678:	ea62 0204 	orn	r2, r2, r4
   1c67c:	ea66 0604 	orn	r6, r6, r4
   1c680:	d00a      	beq.n	1c698 <strcmp+0x70>
   1c682:	ea63 0304 	orn	r3, r3, r4
   1c686:	4662      	mov	r2, ip
   1c688:	ea67 0704 	orn	r7, r7, r4
   1c68c:	4666      	mov	r6, ip
   1c68e:	e003      	b.n	1c698 <strcmp+0x70>
   1c690:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1c694:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1c698:	fa82 f54c 	uadd8	r5, r2, ip
   1c69c:	ea82 0406 	eor.w	r4, r2, r6
   1c6a0:	faa4 f48c 	sel	r4, r4, ip
   1c6a4:	bb6c      	cbnz	r4, 1c702 <strcmp+0xda>
   1c6a6:	fa83 f54c 	uadd8	r5, r3, ip
   1c6aa:	ea83 0507 	eor.w	r5, r3, r7
   1c6ae:	faa5 f58c 	sel	r5, r5, ip
   1c6b2:	b995      	cbnz	r5, 1c6da <strcmp+0xb2>
   1c6b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1c6b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1c6bc:	fa82 f54c 	uadd8	r5, r2, ip
   1c6c0:	ea82 0406 	eor.w	r4, r2, r6
   1c6c4:	faa4 f48c 	sel	r4, r4, ip
   1c6c8:	fa83 f54c 	uadd8	r5, r3, ip
   1c6cc:	ea83 0507 	eor.w	r5, r3, r7
   1c6d0:	faa5 f58c 	sel	r5, r5, ip
   1c6d4:	4325      	orrs	r5, r4
   1c6d6:	d0db      	beq.n	1c690 <strcmp+0x68>
   1c6d8:	b99c      	cbnz	r4, 1c702 <strcmp+0xda>
   1c6da:	ba2d      	rev	r5, r5
   1c6dc:	fab5 f485 	clz	r4, r5
   1c6e0:	f024 0407 	bic.w	r4, r4, #7
   1c6e4:	fa27 f104 	lsr.w	r1, r7, r4
   1c6e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1c6ec:	fa23 f304 	lsr.w	r3, r3, r4
   1c6f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1c6f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1c6f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1c6fc:	eba0 0001 	sub.w	r0, r0, r1
   1c700:	4770      	bx	lr
   1c702:	ba24      	rev	r4, r4
   1c704:	fab4 f484 	clz	r4, r4
   1c708:	f024 0407 	bic.w	r4, r4, #7
   1c70c:	fa26 f104 	lsr.w	r1, r6, r4
   1c710:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1c714:	fa22 f204 	lsr.w	r2, r2, r4
   1c718:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1c71c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1c720:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1c724:	eba0 0001 	sub.w	r0, r0, r1
   1c728:	4770      	bx	lr
   1c72a:	f014 0f03 	tst.w	r4, #3
   1c72e:	d13c      	bne.n	1c7aa <strcmp+0x182>
   1c730:	f010 0403 	ands.w	r4, r0, #3
   1c734:	d128      	bne.n	1c788 <strcmp+0x160>
   1c736:	f850 2b08 	ldr.w	r2, [r0], #8
   1c73a:	f851 3b08 	ldr.w	r3, [r1], #8
   1c73e:	fa82 f54c 	uadd8	r5, r2, ip
   1c742:	ea82 0503 	eor.w	r5, r2, r3
   1c746:	faa5 f58c 	sel	r5, r5, ip
   1c74a:	b95d      	cbnz	r5, 1c764 <strcmp+0x13c>
   1c74c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1c750:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1c754:	fa82 f54c 	uadd8	r5, r2, ip
   1c758:	ea82 0503 	eor.w	r5, r2, r3
   1c75c:	faa5 f58c 	sel	r5, r5, ip
   1c760:	2d00      	cmp	r5, #0
   1c762:	d0e8      	beq.n	1c736 <strcmp+0x10e>
   1c764:	ba2d      	rev	r5, r5
   1c766:	fab5 f485 	clz	r4, r5
   1c76a:	f024 0407 	bic.w	r4, r4, #7
   1c76e:	fa23 f104 	lsr.w	r1, r3, r4
   1c772:	fa22 f204 	lsr.w	r2, r2, r4
   1c776:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1c77a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1c77e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1c782:	eba0 0001 	sub.w	r0, r0, r1
   1c786:	4770      	bx	lr
   1c788:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1c78c:	f020 0003 	bic.w	r0, r0, #3
   1c790:	f850 2b08 	ldr.w	r2, [r0], #8
   1c794:	f021 0103 	bic.w	r1, r1, #3
   1c798:	f851 3b08 	ldr.w	r3, [r1], #8
   1c79c:	fa0c f404 	lsl.w	r4, ip, r4
   1c7a0:	ea62 0204 	orn	r2, r2, r4
   1c7a4:	ea63 0304 	orn	r3, r3, r4
   1c7a8:	e7c9      	b.n	1c73e <strcmp+0x116>
   1c7aa:	f010 0403 	ands.w	r4, r0, #3
   1c7ae:	d01a      	beq.n	1c7e6 <strcmp+0x1be>
   1c7b0:	eba1 0104 	sub.w	r1, r1, r4
   1c7b4:	f020 0003 	bic.w	r0, r0, #3
   1c7b8:	07e4      	lsls	r4, r4, #31
   1c7ba:	f850 2b04 	ldr.w	r2, [r0], #4
   1c7be:	d006      	beq.n	1c7ce <strcmp+0x1a6>
   1c7c0:	d20f      	bcs.n	1c7e2 <strcmp+0x1ba>
   1c7c2:	788b      	ldrb	r3, [r1, #2]
   1c7c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1c7c8:	1ae4      	subs	r4, r4, r3
   1c7ca:	d106      	bne.n	1c7da <strcmp+0x1b2>
   1c7cc:	b12b      	cbz	r3, 1c7da <strcmp+0x1b2>
   1c7ce:	78cb      	ldrb	r3, [r1, #3]
   1c7d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1c7d4:	1ae4      	subs	r4, r4, r3
   1c7d6:	d100      	bne.n	1c7da <strcmp+0x1b2>
   1c7d8:	b91b      	cbnz	r3, 1c7e2 <strcmp+0x1ba>
   1c7da:	4620      	mov	r0, r4
   1c7dc:	f85d 4b10 	ldr.w	r4, [sp], #16
   1c7e0:	4770      	bx	lr
   1c7e2:	f101 0104 	add.w	r1, r1, #4
   1c7e6:	f850 2b04 	ldr.w	r2, [r0], #4
   1c7ea:	07cc      	lsls	r4, r1, #31
   1c7ec:	f021 0103 	bic.w	r1, r1, #3
   1c7f0:	f851 3b04 	ldr.w	r3, [r1], #4
   1c7f4:	d848      	bhi.n	1c888 <strcmp+0x260>
   1c7f6:	d224      	bcs.n	1c842 <strcmp+0x21a>
   1c7f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1c7fc:	fa82 f54c 	uadd8	r5, r2, ip
   1c800:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1c804:	faa5 f58c 	sel	r5, r5, ip
   1c808:	d10a      	bne.n	1c820 <strcmp+0x1f8>
   1c80a:	b965      	cbnz	r5, 1c826 <strcmp+0x1fe>
   1c80c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c810:	ea84 0402 	eor.w	r4, r4, r2
   1c814:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1c818:	d10e      	bne.n	1c838 <strcmp+0x210>
   1c81a:	f850 2b04 	ldr.w	r2, [r0], #4
   1c81e:	e7eb      	b.n	1c7f8 <strcmp+0x1d0>
   1c820:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1c824:	e055      	b.n	1c8d2 <strcmp+0x2aa>
   1c826:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1c82a:	d14d      	bne.n	1c8c8 <strcmp+0x2a0>
   1c82c:	7808      	ldrb	r0, [r1, #0]
   1c82e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1c832:	f1c0 0000 	rsb	r0, r0, #0
   1c836:	4770      	bx	lr
   1c838:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1c83c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1c840:	e047      	b.n	1c8d2 <strcmp+0x2aa>
   1c842:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1c846:	fa82 f54c 	uadd8	r5, r2, ip
   1c84a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1c84e:	faa5 f58c 	sel	r5, r5, ip
   1c852:	d10a      	bne.n	1c86a <strcmp+0x242>
   1c854:	b965      	cbnz	r5, 1c870 <strcmp+0x248>
   1c856:	f851 3b04 	ldr.w	r3, [r1], #4
   1c85a:	ea84 0402 	eor.w	r4, r4, r2
   1c85e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1c862:	d10c      	bne.n	1c87e <strcmp+0x256>
   1c864:	f850 2b04 	ldr.w	r2, [r0], #4
   1c868:	e7eb      	b.n	1c842 <strcmp+0x21a>
   1c86a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1c86e:	e030      	b.n	1c8d2 <strcmp+0x2aa>
   1c870:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1c874:	d128      	bne.n	1c8c8 <strcmp+0x2a0>
   1c876:	880b      	ldrh	r3, [r1, #0]
   1c878:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1c87c:	e029      	b.n	1c8d2 <strcmp+0x2aa>
   1c87e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1c882:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1c886:	e024      	b.n	1c8d2 <strcmp+0x2aa>
   1c888:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1c88c:	fa82 f54c 	uadd8	r5, r2, ip
   1c890:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1c894:	faa5 f58c 	sel	r5, r5, ip
   1c898:	d10a      	bne.n	1c8b0 <strcmp+0x288>
   1c89a:	b965      	cbnz	r5, 1c8b6 <strcmp+0x28e>
   1c89c:	f851 3b04 	ldr.w	r3, [r1], #4
   1c8a0:	ea84 0402 	eor.w	r4, r4, r2
   1c8a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1c8a8:	d109      	bne.n	1c8be <strcmp+0x296>
   1c8aa:	f850 2b04 	ldr.w	r2, [r0], #4
   1c8ae:	e7eb      	b.n	1c888 <strcmp+0x260>
   1c8b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1c8b4:	e00d      	b.n	1c8d2 <strcmp+0x2aa>
   1c8b6:	f015 0fff 	tst.w	r5, #255	; 0xff
   1c8ba:	d105      	bne.n	1c8c8 <strcmp+0x2a0>
   1c8bc:	680b      	ldr	r3, [r1, #0]
   1c8be:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1c8c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1c8c6:	e004      	b.n	1c8d2 <strcmp+0x2aa>
   1c8c8:	f04f 0000 	mov.w	r0, #0
   1c8cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1c8d0:	4770      	bx	lr
   1c8d2:	ba12      	rev	r2, r2
   1c8d4:	ba1b      	rev	r3, r3
   1c8d6:	fa82 f44c 	uadd8	r4, r2, ip
   1c8da:	ea82 0403 	eor.w	r4, r2, r3
   1c8de:	faa4 f58c 	sel	r5, r4, ip
   1c8e2:	fab5 f485 	clz	r4, r5
   1c8e6:	fa02 f204 	lsl.w	r2, r2, r4
   1c8ea:	fa03 f304 	lsl.w	r3, r3, r4
   1c8ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1c8f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1c8f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1c8fa:	4770      	bx	lr

0001c8fc <strcpy>:
   1c8fc:	ea80 0201 	eor.w	r2, r0, r1
   1c900:	4684      	mov	ip, r0
   1c902:	f012 0f03 	tst.w	r2, #3
   1c906:	d14f      	bne.n	1c9a8 <strcpy+0xac>
   1c908:	f011 0f03 	tst.w	r1, #3
   1c90c:	d132      	bne.n	1c974 <strcpy+0x78>
   1c90e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1c912:	f011 0f04 	tst.w	r1, #4
   1c916:	f851 3b04 	ldr.w	r3, [r1], #4
   1c91a:	d00b      	beq.n	1c934 <strcpy+0x38>
   1c91c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1c920:	439a      	bics	r2, r3
   1c922:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1c926:	bf04      	itt	eq
   1c928:	f84c 3b04 	streq.w	r3, [ip], #4
   1c92c:	f851 3b04 	ldreq.w	r3, [r1], #4
   1c930:	d116      	bne.n	1c960 <strcpy+0x64>
   1c932:	bf00      	nop
   1c934:	f851 4b04 	ldr.w	r4, [r1], #4
   1c938:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1c93c:	439a      	bics	r2, r3
   1c93e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1c942:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1c946:	d10b      	bne.n	1c960 <strcpy+0x64>
   1c948:	f84c 3b04 	str.w	r3, [ip], #4
   1c94c:	43a2      	bics	r2, r4
   1c94e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1c952:	bf04      	itt	eq
   1c954:	f851 3b04 	ldreq.w	r3, [r1], #4
   1c958:	f84c 4b04 	streq.w	r4, [ip], #4
   1c95c:	d0ea      	beq.n	1c934 <strcpy+0x38>
   1c95e:	4623      	mov	r3, r4
   1c960:	f80c 3b01 	strb.w	r3, [ip], #1
   1c964:	f013 0fff 	tst.w	r3, #255	; 0xff
   1c968:	ea4f 2333 	mov.w	r3, r3, ror #8
   1c96c:	d1f8      	bne.n	1c960 <strcpy+0x64>
   1c96e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c972:	4770      	bx	lr
   1c974:	f011 0f01 	tst.w	r1, #1
   1c978:	d006      	beq.n	1c988 <strcpy+0x8c>
   1c97a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1c97e:	f80c 2b01 	strb.w	r2, [ip], #1
   1c982:	2a00      	cmp	r2, #0
   1c984:	bf08      	it	eq
   1c986:	4770      	bxeq	lr
   1c988:	f011 0f02 	tst.w	r1, #2
   1c98c:	d0bf      	beq.n	1c90e <strcpy+0x12>
   1c98e:	f831 2b02 	ldrh.w	r2, [r1], #2
   1c992:	f012 0fff 	tst.w	r2, #255	; 0xff
   1c996:	bf16      	itet	ne
   1c998:	f82c 2b02 	strhne.w	r2, [ip], #2
   1c99c:	f88c 2000 	strbeq.w	r2, [ip]
   1c9a0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1c9a4:	d1b3      	bne.n	1c90e <strcpy+0x12>
   1c9a6:	4770      	bx	lr
   1c9a8:	f811 2b01 	ldrb.w	r2, [r1], #1
   1c9ac:	f80c 2b01 	strb.w	r2, [ip], #1
   1c9b0:	2a00      	cmp	r2, #0
   1c9b2:	d1f9      	bne.n	1c9a8 <strcpy+0xac>
   1c9b4:	4770      	bx	lr
   1c9b6:	bf00      	nop

0001c9b8 <strncmp>:
   1c9b8:	2a00      	cmp	r2, #0
   1c9ba:	d041      	beq.n	1ca40 <strncmp+0x88>
   1c9bc:	ea40 0301 	orr.w	r3, r0, r1
   1c9c0:	f013 0303 	ands.w	r3, r3, #3
   1c9c4:	b4f0      	push	{r4, r5, r6, r7}
   1c9c6:	d125      	bne.n	1ca14 <strncmp+0x5c>
   1c9c8:	2a03      	cmp	r2, #3
   1c9ca:	d923      	bls.n	1ca14 <strncmp+0x5c>
   1c9cc:	6804      	ldr	r4, [r0, #0]
   1c9ce:	680d      	ldr	r5, [r1, #0]
   1c9d0:	42ac      	cmp	r4, r5
   1c9d2:	d11f      	bne.n	1ca14 <strncmp+0x5c>
   1c9d4:	3a04      	subs	r2, #4
   1c9d6:	d038      	beq.n	1ca4a <strncmp+0x92>
   1c9d8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   1c9dc:	ea25 0404 	bic.w	r4, r5, r4
   1c9e0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1c9e4:	d12e      	bne.n	1ca44 <strncmp+0x8c>
   1c9e6:	3004      	adds	r0, #4
   1c9e8:	3104      	adds	r1, #4
   1c9ea:	e00f      	b.n	1ca0c <strncmp+0x54>
   1c9ec:	f850 3b04 	ldr.w	r3, [r0], #4
   1c9f0:	680e      	ldr	r6, [r1, #0]
   1c9f2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   1c9f6:	42b3      	cmp	r3, r6
   1c9f8:	ea24 0403 	bic.w	r4, r4, r3
   1c9fc:	f101 0104 	add.w	r1, r1, #4
   1ca00:	d126      	bne.n	1ca50 <strncmp+0x98>
   1ca02:	3a04      	subs	r2, #4
   1ca04:	d021      	beq.n	1ca4a <strncmp+0x92>
   1ca06:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1ca0a:	d11b      	bne.n	1ca44 <strncmp+0x8c>
   1ca0c:	2a03      	cmp	r2, #3
   1ca0e:	4607      	mov	r7, r0
   1ca10:	460d      	mov	r5, r1
   1ca12:	d8eb      	bhi.n	1c9ec <strncmp+0x34>
   1ca14:	7805      	ldrb	r5, [r0, #0]
   1ca16:	780c      	ldrb	r4, [r1, #0]
   1ca18:	42ac      	cmp	r4, r5
   1ca1a:	f102 33ff 	add.w	r3, r2, #4294967295
   1ca1e:	d11a      	bne.n	1ca56 <strncmp+0x9e>
   1ca20:	b183      	cbz	r3, 1ca44 <strncmp+0x8c>
   1ca22:	b914      	cbnz	r4, 1ca2a <strncmp+0x72>
   1ca24:	e00e      	b.n	1ca44 <strncmp+0x8c>
   1ca26:	b16b      	cbz	r3, 1ca44 <strncmp+0x8c>
   1ca28:	b17a      	cbz	r2, 1ca4a <strncmp+0x92>
   1ca2a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   1ca2e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1ca32:	42a2      	cmp	r2, r4
   1ca34:	f103 33ff 	add.w	r3, r3, #4294967295
   1ca38:	d0f5      	beq.n	1ca26 <strncmp+0x6e>
   1ca3a:	1b10      	subs	r0, r2, r4
   1ca3c:	bcf0      	pop	{r4, r5, r6, r7}
   1ca3e:	4770      	bx	lr
   1ca40:	4610      	mov	r0, r2
   1ca42:	4770      	bx	lr
   1ca44:	2000      	movs	r0, #0
   1ca46:	bcf0      	pop	{r4, r5, r6, r7}
   1ca48:	4770      	bx	lr
   1ca4a:	4610      	mov	r0, r2
   1ca4c:	bcf0      	pop	{r4, r5, r6, r7}
   1ca4e:	4770      	bx	lr
   1ca50:	4629      	mov	r1, r5
   1ca52:	4638      	mov	r0, r7
   1ca54:	e7de      	b.n	1ca14 <strncmp+0x5c>
   1ca56:	462a      	mov	r2, r5
   1ca58:	e7ef      	b.n	1ca3a <strncmp+0x82>
   1ca5a:	bf00      	nop

0001ca5c <_strtoul_l.isra.0>:
   1ca5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca60:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1ca64:	460e      	mov	r6, r1
   1ca66:	4607      	mov	r7, r0
   1ca68:	4615      	mov	r5, r2
   1ca6a:	4698      	mov	r8, r3
   1ca6c:	468a      	mov	sl, r1
   1ca6e:	e000      	b.n	1ca72 <_strtoul_l.isra.0+0x16>
   1ca70:	46a2      	mov	sl, r4
   1ca72:	4654      	mov	r4, sl
   1ca74:	4648      	mov	r0, r9
   1ca76:	f814 bb01 	ldrb.w	fp, [r4], #1
   1ca7a:	f001 fd6b 	bl	1e554 <__locale_ctype_ptr_l>
   1ca7e:	4458      	add	r0, fp
   1ca80:	7840      	ldrb	r0, [r0, #1]
   1ca82:	f010 0008 	ands.w	r0, r0, #8
   1ca86:	d1f3      	bne.n	1ca70 <_strtoul_l.isra.0+0x14>
   1ca88:	4659      	mov	r1, fp
   1ca8a:	292d      	cmp	r1, #45	; 0x2d
   1ca8c:	d059      	beq.n	1cb42 <_strtoul_l.isra.0+0xe6>
   1ca8e:	292b      	cmp	r1, #43	; 0x2b
   1ca90:	bf04      	itt	eq
   1ca92:	7821      	ldrbeq	r1, [r4, #0]
   1ca94:	f10a 0402 	addeq.w	r4, sl, #2
   1ca98:	f1b8 0f00 	cmp.w	r8, #0
   1ca9c:	d00c      	beq.n	1cab8 <_strtoul_l.isra.0+0x5c>
   1ca9e:	f1b8 0f10 	cmp.w	r8, #16
   1caa2:	d053      	beq.n	1cb4c <_strtoul_l.isra.0+0xf0>
   1caa4:	f04f 3cff 	mov.w	ip, #4294967295
   1caa8:	fbbc fcf8 	udiv	ip, ip, r8
   1caac:	fb08 fa0c 	mul.w	sl, r8, ip
   1cab0:	ea6f 0a0a 	mvn.w	sl, sl
   1cab4:	46c1      	mov	r9, r8
   1cab6:	e008      	b.n	1caca <_strtoul_l.isra.0+0x6e>
   1cab8:	2930      	cmp	r1, #48	; 0x30
   1caba:	d058      	beq.n	1cb6e <_strtoul_l.isra.0+0x112>
   1cabc:	f04f 080a 	mov.w	r8, #10
   1cac0:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 1cba0 <_strtoul_l.isra.0+0x144>
   1cac4:	46c1      	mov	r9, r8
   1cac6:	f04f 0a05 	mov.w	sl, #5
   1caca:	2300      	movs	r3, #0
   1cacc:	469e      	mov	lr, r3
   1cace:	e005      	b.n	1cadc <_strtoul_l.isra.0+0x80>
   1cad0:	d02a      	beq.n	1cb28 <_strtoul_l.isra.0+0xcc>
   1cad2:	fb09 2e0e 	mla	lr, r9, lr, r2
   1cad6:	2301      	movs	r3, #1
   1cad8:	f814 1b01 	ldrb.w	r1, [r4], #1
   1cadc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1cae0:	2a09      	cmp	r2, #9
   1cae2:	d905      	bls.n	1caf0 <_strtoul_l.isra.0+0x94>
   1cae4:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1cae8:	2a19      	cmp	r2, #25
   1caea:	d80a      	bhi.n	1cb02 <_strtoul_l.isra.0+0xa6>
   1caec:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   1caf0:	4590      	cmp	r8, r2
   1caf2:	dd0e      	ble.n	1cb12 <_strtoul_l.isra.0+0xb6>
   1caf4:	2b00      	cmp	r3, #0
   1caf6:	db01      	blt.n	1cafc <_strtoul_l.isra.0+0xa0>
   1caf8:	45e6      	cmp	lr, ip
   1cafa:	d9e9      	bls.n	1cad0 <_strtoul_l.isra.0+0x74>
   1cafc:	f04f 33ff 	mov.w	r3, #4294967295
   1cb00:	e7ea      	b.n	1cad8 <_strtoul_l.isra.0+0x7c>
   1cb02:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1cb06:	2a19      	cmp	r2, #25
   1cb08:	d803      	bhi.n	1cb12 <_strtoul_l.isra.0+0xb6>
   1cb0a:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   1cb0e:	4590      	cmp	r8, r2
   1cb10:	dcf0      	bgt.n	1caf4 <_strtoul_l.isra.0+0x98>
   1cb12:	2b00      	cmp	r3, #0
   1cb14:	db0d      	blt.n	1cb32 <_strtoul_l.isra.0+0xd6>
   1cb16:	b108      	cbz	r0, 1cb1c <_strtoul_l.isra.0+0xc0>
   1cb18:	f1ce 0e00 	rsb	lr, lr, #0
   1cb1c:	b10d      	cbz	r5, 1cb22 <_strtoul_l.isra.0+0xc6>
   1cb1e:	b973      	cbnz	r3, 1cb3e <_strtoul_l.isra.0+0xe2>
   1cb20:	602e      	str	r6, [r5, #0]
   1cb22:	4670      	mov	r0, lr
   1cb24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb28:	4552      	cmp	r2, sl
   1cb2a:	ddd2      	ble.n	1cad2 <_strtoul_l.isra.0+0x76>
   1cb2c:	f04f 33ff 	mov.w	r3, #4294967295
   1cb30:	e7d2      	b.n	1cad8 <_strtoul_l.isra.0+0x7c>
   1cb32:	2322      	movs	r3, #34	; 0x22
   1cb34:	603b      	str	r3, [r7, #0]
   1cb36:	f04f 3eff 	mov.w	lr, #4294967295
   1cb3a:	2d00      	cmp	r5, #0
   1cb3c:	d0f1      	beq.n	1cb22 <_strtoul_l.isra.0+0xc6>
   1cb3e:	1e66      	subs	r6, r4, #1
   1cb40:	e7ee      	b.n	1cb20 <_strtoul_l.isra.0+0xc4>
   1cb42:	7821      	ldrb	r1, [r4, #0]
   1cb44:	2001      	movs	r0, #1
   1cb46:	f10a 0402 	add.w	r4, sl, #2
   1cb4a:	e7a5      	b.n	1ca98 <_strtoul_l.isra.0+0x3c>
   1cb4c:	2930      	cmp	r1, #48	; 0x30
   1cb4e:	d11b      	bne.n	1cb88 <_strtoul_l.isra.0+0x12c>
   1cb50:	7823      	ldrb	r3, [r4, #0]
   1cb52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1cb56:	2b58      	cmp	r3, #88	; 0x58
   1cb58:	d11c      	bne.n	1cb94 <_strtoul_l.isra.0+0x138>
   1cb5a:	f04f 0910 	mov.w	r9, #16
   1cb5e:	7861      	ldrb	r1, [r4, #1]
   1cb60:	46c8      	mov	r8, r9
   1cb62:	f04f 0a0f 	mov.w	sl, #15
   1cb66:	3402      	adds	r4, #2
   1cb68:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1cb6c:	e7ad      	b.n	1caca <_strtoul_l.isra.0+0x6e>
   1cb6e:	7823      	ldrb	r3, [r4, #0]
   1cb70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1cb74:	2b58      	cmp	r3, #88	; 0x58
   1cb76:	d0f0      	beq.n	1cb5a <_strtoul_l.isra.0+0xfe>
   1cb78:	f04f 0808 	mov.w	r8, #8
   1cb7c:	46c1      	mov	r9, r8
   1cb7e:	f04f 0a07 	mov.w	sl, #7
   1cb82:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   1cb86:	e7a0      	b.n	1caca <_strtoul_l.isra.0+0x6e>
   1cb88:	f04f 0a0f 	mov.w	sl, #15
   1cb8c:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1cb90:	46c1      	mov	r9, r8
   1cb92:	e79a      	b.n	1caca <_strtoul_l.isra.0+0x6e>
   1cb94:	46c1      	mov	r9, r8
   1cb96:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   1cb9a:	f04f 0a0f 	mov.w	sl, #15
   1cb9e:	e794      	b.n	1caca <_strtoul_l.isra.0+0x6e>
   1cba0:	19999999 	.word	0x19999999

0001cba4 <_strtoul_r>:
   1cba4:	b530      	push	{r4, r5, lr}
   1cba6:	4c06      	ldr	r4, [pc, #24]	; (1cbc0 <_strtoul_r+0x1c>)
   1cba8:	4d06      	ldr	r5, [pc, #24]	; (1cbc4 <_strtoul_r+0x20>)
   1cbaa:	6824      	ldr	r4, [r4, #0]
   1cbac:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1cbae:	b083      	sub	sp, #12
   1cbb0:	2c00      	cmp	r4, #0
   1cbb2:	bf08      	it	eq
   1cbb4:	462c      	moveq	r4, r5
   1cbb6:	9400      	str	r4, [sp, #0]
   1cbb8:	f7ff ff50 	bl	1ca5c <_strtoul_l.isra.0>
   1cbbc:	b003      	add	sp, #12
   1cbbe:	bd30      	pop	{r4, r5, pc}
   1cbc0:	20000248 	.word	0x20000248
   1cbc4:	20000ad8 	.word	0x20000ad8

0001cbc8 <strtoul>:
   1cbc8:	b530      	push	{r4, r5, lr}
   1cbca:	4c08      	ldr	r4, [pc, #32]	; (1cbec <strtoul+0x24>)
   1cbcc:	4b08      	ldr	r3, [pc, #32]	; (1cbf0 <strtoul+0x28>)
   1cbce:	6825      	ldr	r5, [r4, #0]
   1cbd0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   1cbd2:	b083      	sub	sp, #12
   1cbd4:	2c00      	cmp	r4, #0
   1cbd6:	bf08      	it	eq
   1cbd8:	461c      	moveq	r4, r3
   1cbda:	9400      	str	r4, [sp, #0]
   1cbdc:	4613      	mov	r3, r2
   1cbde:	460a      	mov	r2, r1
   1cbe0:	4601      	mov	r1, r0
   1cbe2:	4628      	mov	r0, r5
   1cbe4:	f7ff ff3a 	bl	1ca5c <_strtoul_l.isra.0>
   1cbe8:	b003      	add	sp, #12
   1cbea:	bd30      	pop	{r4, r5, pc}
   1cbec:	20000248 	.word	0x20000248
   1cbf0:	20000ad8 	.word	0x20000ad8

0001cbf4 <__ssprint_r>:
   1cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbf8:	6893      	ldr	r3, [r2, #8]
   1cbfa:	b083      	sub	sp, #12
   1cbfc:	4690      	mov	r8, r2
   1cbfe:	2b00      	cmp	r3, #0
   1cc00:	d070      	beq.n	1cce4 <__ssprint_r+0xf0>
   1cc02:	4682      	mov	sl, r0
   1cc04:	460c      	mov	r4, r1
   1cc06:	6817      	ldr	r7, [r2, #0]
   1cc08:	688d      	ldr	r5, [r1, #8]
   1cc0a:	6808      	ldr	r0, [r1, #0]
   1cc0c:	e042      	b.n	1cc94 <__ssprint_r+0xa0>
   1cc0e:	89a3      	ldrh	r3, [r4, #12]
   1cc10:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1cc14:	d02e      	beq.n	1cc74 <__ssprint_r+0x80>
   1cc16:	6965      	ldr	r5, [r4, #20]
   1cc18:	6921      	ldr	r1, [r4, #16]
   1cc1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1cc1e:	eba0 0b01 	sub.w	fp, r0, r1
   1cc22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1cc26:	f10b 0001 	add.w	r0, fp, #1
   1cc2a:	106d      	asrs	r5, r5, #1
   1cc2c:	4430      	add	r0, r6
   1cc2e:	42a8      	cmp	r0, r5
   1cc30:	462a      	mov	r2, r5
   1cc32:	bf84      	itt	hi
   1cc34:	4605      	movhi	r5, r0
   1cc36:	462a      	movhi	r2, r5
   1cc38:	055b      	lsls	r3, r3, #21
   1cc3a:	d538      	bpl.n	1ccae <__ssprint_r+0xba>
   1cc3c:	4611      	mov	r1, r2
   1cc3e:	4650      	mov	r0, sl
   1cc40:	f7ff f96c 	bl	1bf1c <_malloc_r>
   1cc44:	2800      	cmp	r0, #0
   1cc46:	d03c      	beq.n	1ccc2 <__ssprint_r+0xce>
   1cc48:	465a      	mov	r2, fp
   1cc4a:	6921      	ldr	r1, [r4, #16]
   1cc4c:	9001      	str	r0, [sp, #4]
   1cc4e:	f7fe fb85 	bl	1b35c <memcpy>
   1cc52:	89a2      	ldrh	r2, [r4, #12]
   1cc54:	9b01      	ldr	r3, [sp, #4]
   1cc56:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1cc5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1cc5e:	81a2      	strh	r2, [r4, #12]
   1cc60:	eba5 020b 	sub.w	r2, r5, fp
   1cc64:	eb03 000b 	add.w	r0, r3, fp
   1cc68:	6165      	str	r5, [r4, #20]
   1cc6a:	6123      	str	r3, [r4, #16]
   1cc6c:	6020      	str	r0, [r4, #0]
   1cc6e:	60a2      	str	r2, [r4, #8]
   1cc70:	4635      	mov	r5, r6
   1cc72:	46b3      	mov	fp, r6
   1cc74:	465a      	mov	r2, fp
   1cc76:	4649      	mov	r1, r9
   1cc78:	f001 fcc2 	bl	1e600 <memmove>
   1cc7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1cc80:	68a2      	ldr	r2, [r4, #8]
   1cc82:	6820      	ldr	r0, [r4, #0]
   1cc84:	1b55      	subs	r5, r2, r5
   1cc86:	4458      	add	r0, fp
   1cc88:	1b9e      	subs	r6, r3, r6
   1cc8a:	60a5      	str	r5, [r4, #8]
   1cc8c:	6020      	str	r0, [r4, #0]
   1cc8e:	f8c8 6008 	str.w	r6, [r8, #8]
   1cc92:	b33e      	cbz	r6, 1cce4 <__ssprint_r+0xf0>
   1cc94:	687e      	ldr	r6, [r7, #4]
   1cc96:	463b      	mov	r3, r7
   1cc98:	3708      	adds	r7, #8
   1cc9a:	2e00      	cmp	r6, #0
   1cc9c:	d0fa      	beq.n	1cc94 <__ssprint_r+0xa0>
   1cc9e:	42ae      	cmp	r6, r5
   1cca0:	f8d3 9000 	ldr.w	r9, [r3]
   1cca4:	46ab      	mov	fp, r5
   1cca6:	d2b2      	bcs.n	1cc0e <__ssprint_r+0x1a>
   1cca8:	4635      	mov	r5, r6
   1ccaa:	46b3      	mov	fp, r6
   1ccac:	e7e2      	b.n	1cc74 <__ssprint_r+0x80>
   1ccae:	4650      	mov	r0, sl
   1ccb0:	f001 fd0a 	bl	1e6c8 <_realloc_r>
   1ccb4:	4603      	mov	r3, r0
   1ccb6:	2800      	cmp	r0, #0
   1ccb8:	d1d2      	bne.n	1cc60 <__ssprint_r+0x6c>
   1ccba:	6921      	ldr	r1, [r4, #16]
   1ccbc:	4650      	mov	r0, sl
   1ccbe:	f001 fb47 	bl	1e350 <_free_r>
   1ccc2:	230c      	movs	r3, #12
   1ccc4:	f8ca 3000 	str.w	r3, [sl]
   1ccc8:	89a3      	ldrh	r3, [r4, #12]
   1ccca:	2200      	movs	r2, #0
   1cccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ccd0:	f04f 30ff 	mov.w	r0, #4294967295
   1ccd4:	81a3      	strh	r3, [r4, #12]
   1ccd6:	f8c8 2008 	str.w	r2, [r8, #8]
   1ccda:	f8c8 2004 	str.w	r2, [r8, #4]
   1ccde:	b003      	add	sp, #12
   1cce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cce4:	2000      	movs	r0, #0
   1cce6:	f8c8 0004 	str.w	r0, [r8, #4]
   1ccea:	b003      	add	sp, #12
   1ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ccf0 <_svfiprintf_r>:
   1ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccf4:	b0ad      	sub	sp, #180	; 0xb4
   1ccf6:	460c      	mov	r4, r1
   1ccf8:	9105      	str	r1, [sp, #20]
   1ccfa:	8989      	ldrh	r1, [r1, #12]
   1ccfc:	9307      	str	r3, [sp, #28]
   1ccfe:	060d      	lsls	r5, r1, #24
   1cd00:	900a      	str	r0, [sp, #40]	; 0x28
   1cd02:	d503      	bpl.n	1cd0c <_svfiprintf_r+0x1c>
   1cd04:	6923      	ldr	r3, [r4, #16]
   1cd06:	2b00      	cmp	r3, #0
   1cd08:	f000 84d6 	beq.w	1d6b8 <_svfiprintf_r+0x9c8>
   1cd0c:	2300      	movs	r3, #0
   1cd0e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   1cd12:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1cd14:	930b      	str	r3, [sp, #44]	; 0x2c
   1cd16:	4693      	mov	fp, r2
   1cd18:	9311      	str	r3, [sp, #68]	; 0x44
   1cd1a:	9310      	str	r3, [sp, #64]	; 0x40
   1cd1c:	9302      	str	r3, [sp, #8]
   1cd1e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   1cd22:	46d1      	mov	r9, sl
   1cd24:	f89b 3000 	ldrb.w	r3, [fp]
   1cd28:	465c      	mov	r4, fp
   1cd2a:	b1eb      	cbz	r3, 1cd68 <_svfiprintf_r+0x78>
   1cd2c:	2b25      	cmp	r3, #37	; 0x25
   1cd2e:	d102      	bne.n	1cd36 <_svfiprintf_r+0x46>
   1cd30:	e01a      	b.n	1cd68 <_svfiprintf_r+0x78>
   1cd32:	2b25      	cmp	r3, #37	; 0x25
   1cd34:	d003      	beq.n	1cd3e <_svfiprintf_r+0x4e>
   1cd36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1cd3a:	2b00      	cmp	r3, #0
   1cd3c:	d1f9      	bne.n	1cd32 <_svfiprintf_r+0x42>
   1cd3e:	eba4 050b 	sub.w	r5, r4, fp
   1cd42:	b18d      	cbz	r5, 1cd68 <_svfiprintf_r+0x78>
   1cd44:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cd46:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1cd48:	f8c9 b000 	str.w	fp, [r9]
   1cd4c:	3301      	adds	r3, #1
   1cd4e:	442a      	add	r2, r5
   1cd50:	2b07      	cmp	r3, #7
   1cd52:	f8c9 5004 	str.w	r5, [r9, #4]
   1cd56:	9211      	str	r2, [sp, #68]	; 0x44
   1cd58:	9310      	str	r3, [sp, #64]	; 0x40
   1cd5a:	f300 83c3 	bgt.w	1d4e4 <_svfiprintf_r+0x7f4>
   1cd5e:	f109 0908 	add.w	r9, r9, #8
   1cd62:	9b02      	ldr	r3, [sp, #8]
   1cd64:	442b      	add	r3, r5
   1cd66:	9302      	str	r3, [sp, #8]
   1cd68:	7823      	ldrb	r3, [r4, #0]
   1cd6a:	2b00      	cmp	r3, #0
   1cd6c:	f000 834b 	beq.w	1d406 <_svfiprintf_r+0x716>
   1cd70:	2000      	movs	r0, #0
   1cd72:	f04f 0300 	mov.w	r3, #0
   1cd76:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1cd7a:	f104 0b01 	add.w	fp, r4, #1
   1cd7e:	7862      	ldrb	r2, [r4, #1]
   1cd80:	4605      	mov	r5, r0
   1cd82:	4603      	mov	r3, r0
   1cd84:	f04f 38ff 	mov.w	r8, #4294967295
   1cd88:	4604      	mov	r4, r0
   1cd8a:	f10b 0b01 	add.w	fp, fp, #1
   1cd8e:	f1a2 0120 	sub.w	r1, r2, #32
   1cd92:	2958      	cmp	r1, #88	; 0x58
   1cd94:	f200 826b 	bhi.w	1d26e <_svfiprintf_r+0x57e>
   1cd98:	e8df f011 	tbh	[pc, r1, lsl #1]
   1cd9c:	026900bd 	.word	0x026900bd
   1cda0:	00b80269 	.word	0x00b80269
   1cda4:	02690269 	.word	0x02690269
   1cda8:	02690269 	.word	0x02690269
   1cdac:	02690269 	.word	0x02690269
   1cdb0:	00b30059 	.word	0x00b30059
   1cdb4:	00630269 	.word	0x00630269
   1cdb8:	026901c0 	.word	0x026901c0
   1cdbc:	01ad01bb 	.word	0x01ad01bb
   1cdc0:	01ad01ad 	.word	0x01ad01ad
   1cdc4:	01ad01ad 	.word	0x01ad01ad
   1cdc8:	01ad01ad 	.word	0x01ad01ad
   1cdcc:	01ad01ad 	.word	0x01ad01ad
   1cdd0:	02690269 	.word	0x02690269
   1cdd4:	02690269 	.word	0x02690269
   1cdd8:	02690269 	.word	0x02690269
   1cddc:	02690269 	.word	0x02690269
   1cde0:	02690269 	.word	0x02690269
   1cde4:	0269015f 	.word	0x0269015f
   1cde8:	02690269 	.word	0x02690269
   1cdec:	02690269 	.word	0x02690269
   1cdf0:	02690269 	.word	0x02690269
   1cdf4:	02690269 	.word	0x02690269
   1cdf8:	014d0269 	.word	0x014d0269
   1cdfc:	02690269 	.word	0x02690269
   1ce00:	02690269 	.word	0x02690269
   1ce04:	013c0269 	.word	0x013c0269
   1ce08:	02690269 	.word	0x02690269
   1ce0c:	02690125 	.word	0x02690125
   1ce10:	02690269 	.word	0x02690269
   1ce14:	02690269 	.word	0x02690269
   1ce18:	02690269 	.word	0x02690269
   1ce1c:	02690269 	.word	0x02690269
   1ce20:	00c50269 	.word	0x00c50269
   1ce24:	02690200 	.word	0x02690200
   1ce28:	02690269 	.word	0x02690269
   1ce2c:	020001fb 	.word	0x020001fb
   1ce30:	02690269 	.word	0x02690269
   1ce34:	026901ee 	.word	0x026901ee
   1ce38:	007a01da 	.word	0x007a01da
   1ce3c:	02310236 	.word	0x02310236
   1ce40:	020e0269 	.word	0x020e0269
   1ce44:	00680269 	.word	0x00680269
   1ce48:	02690269 	.word	0x02690269
   1ce4c:	008f      	.short	0x008f
   1ce4e:	9907      	ldr	r1, [sp, #28]
   1ce50:	680c      	ldr	r4, [r1, #0]
   1ce52:	460a      	mov	r2, r1
   1ce54:	2c00      	cmp	r4, #0
   1ce56:	f102 0204 	add.w	r2, r2, #4
   1ce5a:	f280 83c9 	bge.w	1d5f0 <_svfiprintf_r+0x900>
   1ce5e:	4264      	negs	r4, r4
   1ce60:	9207      	str	r2, [sp, #28]
   1ce62:	f043 0304 	orr.w	r3, r3, #4
   1ce66:	f89b 2000 	ldrb.w	r2, [fp]
   1ce6a:	e78e      	b.n	1cd8a <_svfiprintf_r+0x9a>
   1ce6c:	9406      	str	r4, [sp, #24]
   1ce6e:	069c      	lsls	r4, r3, #26
   1ce70:	f100 80d6 	bmi.w	1d020 <_svfiprintf_r+0x330>
   1ce74:	9907      	ldr	r1, [sp, #28]
   1ce76:	06d8      	lsls	r0, r3, #27
   1ce78:	460a      	mov	r2, r1
   1ce7a:	f100 820a 	bmi.w	1d292 <_svfiprintf_r+0x5a2>
   1ce7e:	065e      	lsls	r6, r3, #25
   1ce80:	f140 8207 	bpl.w	1d292 <_svfiprintf_r+0x5a2>
   1ce84:	880c      	ldrh	r4, [r1, #0]
   1ce86:	3104      	adds	r1, #4
   1ce88:	2500      	movs	r5, #0
   1ce8a:	2201      	movs	r2, #1
   1ce8c:	9107      	str	r1, [sp, #28]
   1ce8e:	e1cc      	b.n	1d22a <_svfiprintf_r+0x53a>
   1ce90:	f013 0220 	ands.w	r2, r3, #32
   1ce94:	9406      	str	r4, [sp, #24]
   1ce96:	f040 80d5 	bne.w	1d044 <_svfiprintf_r+0x354>
   1ce9a:	f013 0110 	ands.w	r1, r3, #16
   1ce9e:	f040 81fe 	bne.w	1d29e <_svfiprintf_r+0x5ae>
   1cea2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   1cea6:	f000 81fa 	beq.w	1d29e <_svfiprintf_r+0x5ae>
   1ceaa:	9807      	ldr	r0, [sp, #28]
   1ceac:	460a      	mov	r2, r1
   1ceae:	4601      	mov	r1, r0
   1ceb0:	3104      	adds	r1, #4
   1ceb2:	8804      	ldrh	r4, [r0, #0]
   1ceb4:	9107      	str	r1, [sp, #28]
   1ceb6:	2500      	movs	r5, #0
   1ceb8:	e1b7      	b.n	1d22a <_svfiprintf_r+0x53a>
   1ceba:	9406      	str	r4, [sp, #24]
   1cebc:	2800      	cmp	r0, #0
   1cebe:	f040 8431 	bne.w	1d724 <_svfiprintf_r+0xa34>
   1cec2:	49ba      	ldr	r1, [pc, #744]	; (1d1ac <_svfiprintf_r+0x4bc>)
   1cec4:	910b      	str	r1, [sp, #44]	; 0x2c
   1cec6:	069d      	lsls	r5, r3, #26
   1cec8:	f100 8096 	bmi.w	1cff8 <_svfiprintf_r+0x308>
   1cecc:	9807      	ldr	r0, [sp, #28]
   1cece:	06dc      	lsls	r4, r3, #27
   1ced0:	4601      	mov	r1, r0
   1ced2:	d402      	bmi.n	1ceda <_svfiprintf_r+0x1ea>
   1ced4:	0658      	lsls	r0, r3, #25
   1ced6:	f100 83a9 	bmi.w	1d62c <_svfiprintf_r+0x93c>
   1ceda:	680c      	ldr	r4, [r1, #0]
   1cedc:	3104      	adds	r1, #4
   1cede:	9107      	str	r1, [sp, #28]
   1cee0:	2500      	movs	r5, #0
   1cee2:	07d9      	lsls	r1, r3, #31
   1cee4:	f140 8094 	bpl.w	1d010 <_svfiprintf_r+0x320>
   1cee8:	ea54 0105 	orrs.w	r1, r4, r5
   1ceec:	f000 8090 	beq.w	1d010 <_svfiprintf_r+0x320>
   1cef0:	2130      	movs	r1, #48	; 0x30
   1cef2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1cef6:	f043 0302 	orr.w	r3, r3, #2
   1cefa:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1cefe:	2202      	movs	r2, #2
   1cf00:	e193      	b.n	1d22a <_svfiprintf_r+0x53a>
   1cf02:	f89b 2000 	ldrb.w	r2, [fp]
   1cf06:	2001      	movs	r0, #1
   1cf08:	252b      	movs	r5, #43	; 0x2b
   1cf0a:	e73e      	b.n	1cd8a <_svfiprintf_r+0x9a>
   1cf0c:	f043 0301 	orr.w	r3, r3, #1
   1cf10:	f89b 2000 	ldrb.w	r2, [fp]
   1cf14:	e739      	b.n	1cd8a <_svfiprintf_r+0x9a>
   1cf16:	f89b 2000 	ldrb.w	r2, [fp]
   1cf1a:	2d00      	cmp	r5, #0
   1cf1c:	f47f af35 	bne.w	1cd8a <_svfiprintf_r+0x9a>
   1cf20:	2001      	movs	r0, #1
   1cf22:	2520      	movs	r5, #32
   1cf24:	e731      	b.n	1cd8a <_svfiprintf_r+0x9a>
   1cf26:	9907      	ldr	r1, [sp, #28]
   1cf28:	9406      	str	r4, [sp, #24]
   1cf2a:	680a      	ldr	r2, [r1, #0]
   1cf2c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1cf30:	f04f 0000 	mov.w	r0, #0
   1cf34:	460a      	mov	r2, r1
   1cf36:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1cf3a:	3204      	adds	r2, #4
   1cf3c:	2001      	movs	r0, #1
   1cf3e:	9000      	str	r0, [sp, #0]
   1cf40:	9207      	str	r2, [sp, #28]
   1cf42:	9004      	str	r0, [sp, #16]
   1cf44:	ae12      	add	r6, sp, #72	; 0x48
   1cf46:	9301      	str	r3, [sp, #4]
   1cf48:	f04f 0800 	mov.w	r8, #0
   1cf4c:	9b01      	ldr	r3, [sp, #4]
   1cf4e:	f013 0302 	ands.w	r3, r3, #2
   1cf52:	9308      	str	r3, [sp, #32]
   1cf54:	d002      	beq.n	1cf5c <_svfiprintf_r+0x26c>
   1cf56:	9b00      	ldr	r3, [sp, #0]
   1cf58:	3302      	adds	r3, #2
   1cf5a:	9300      	str	r3, [sp, #0]
   1cf5c:	9b01      	ldr	r3, [sp, #4]
   1cf5e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   1cf62:	9309      	str	r3, [sp, #36]	; 0x24
   1cf64:	f040 81a2 	bne.w	1d2ac <_svfiprintf_r+0x5bc>
   1cf68:	9b06      	ldr	r3, [sp, #24]
   1cf6a:	9a00      	ldr	r2, [sp, #0]
   1cf6c:	1a9c      	subs	r4, r3, r2
   1cf6e:	2c00      	cmp	r4, #0
   1cf70:	f340 819c 	ble.w	1d2ac <_svfiprintf_r+0x5bc>
   1cf74:	2c10      	cmp	r4, #16
   1cf76:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cf78:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1cf7a:	4d8d      	ldr	r5, [pc, #564]	; (1d1b0 <_svfiprintf_r+0x4c0>)
   1cf7c:	dd25      	ble.n	1cfca <_svfiprintf_r+0x2da>
   1cf7e:	4648      	mov	r0, r9
   1cf80:	2310      	movs	r3, #16
   1cf82:	46c1      	mov	r9, r8
   1cf84:	46b0      	mov	r8, r6
   1cf86:	9e05      	ldr	r6, [sp, #20]
   1cf88:	e004      	b.n	1cf94 <_svfiprintf_r+0x2a4>
   1cf8a:	3c10      	subs	r4, #16
   1cf8c:	2c10      	cmp	r4, #16
   1cf8e:	f100 0008 	add.w	r0, r0, #8
   1cf92:	dd17      	ble.n	1cfc4 <_svfiprintf_r+0x2d4>
   1cf94:	3201      	adds	r2, #1
   1cf96:	3110      	adds	r1, #16
   1cf98:	2a07      	cmp	r2, #7
   1cf9a:	9111      	str	r1, [sp, #68]	; 0x44
   1cf9c:	9210      	str	r2, [sp, #64]	; 0x40
   1cf9e:	6005      	str	r5, [r0, #0]
   1cfa0:	6043      	str	r3, [r0, #4]
   1cfa2:	ddf2      	ble.n	1cf8a <_svfiprintf_r+0x29a>
   1cfa4:	aa0f      	add	r2, sp, #60	; 0x3c
   1cfa6:	4631      	mov	r1, r6
   1cfa8:	4638      	mov	r0, r7
   1cfaa:	9303      	str	r3, [sp, #12]
   1cfac:	f7ff fe22 	bl	1cbf4 <__ssprint_r>
   1cfb0:	2800      	cmp	r0, #0
   1cfb2:	f040 822f 	bne.w	1d414 <_svfiprintf_r+0x724>
   1cfb6:	3c10      	subs	r4, #16
   1cfb8:	2c10      	cmp	r4, #16
   1cfba:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cfbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1cfbe:	9b03      	ldr	r3, [sp, #12]
   1cfc0:	4650      	mov	r0, sl
   1cfc2:	dce7      	bgt.n	1cf94 <_svfiprintf_r+0x2a4>
   1cfc4:	4646      	mov	r6, r8
   1cfc6:	46c8      	mov	r8, r9
   1cfc8:	4681      	mov	r9, r0
   1cfca:	1c53      	adds	r3, r2, #1
   1cfcc:	4421      	add	r1, r4
   1cfce:	2b07      	cmp	r3, #7
   1cfd0:	9111      	str	r1, [sp, #68]	; 0x44
   1cfd2:	9310      	str	r3, [sp, #64]	; 0x40
   1cfd4:	f8c9 5000 	str.w	r5, [r9]
   1cfd8:	f8c9 4004 	str.w	r4, [r9, #4]
   1cfdc:	f300 82f2 	bgt.w	1d5c4 <_svfiprintf_r+0x8d4>
   1cfe0:	f109 0908 	add.w	r9, r9, #8
   1cfe4:	e164      	b.n	1d2b0 <_svfiprintf_r+0x5c0>
   1cfe6:	9406      	str	r4, [sp, #24]
   1cfe8:	2800      	cmp	r0, #0
   1cfea:	f040 83a5 	bne.w	1d738 <_svfiprintf_r+0xa48>
   1cfee:	4971      	ldr	r1, [pc, #452]	; (1d1b4 <_svfiprintf_r+0x4c4>)
   1cff0:	910b      	str	r1, [sp, #44]	; 0x2c
   1cff2:	069d      	lsls	r5, r3, #26
   1cff4:	f57f af6a 	bpl.w	1cecc <_svfiprintf_r+0x1dc>
   1cff8:	9c07      	ldr	r4, [sp, #28]
   1cffa:	3407      	adds	r4, #7
   1cffc:	f024 0107 	bic.w	r1, r4, #7
   1d000:	f101 0008 	add.w	r0, r1, #8
   1d004:	e9d1 4500 	ldrd	r4, r5, [r1]
   1d008:	07d9      	lsls	r1, r3, #31
   1d00a:	9007      	str	r0, [sp, #28]
   1d00c:	f53f af6c 	bmi.w	1cee8 <_svfiprintf_r+0x1f8>
   1d010:	2202      	movs	r2, #2
   1d012:	e10a      	b.n	1d22a <_svfiprintf_r+0x53a>
   1d014:	f043 0310 	orr.w	r3, r3, #16
   1d018:	9406      	str	r4, [sp, #24]
   1d01a:	069c      	lsls	r4, r3, #26
   1d01c:	f57f af2a 	bpl.w	1ce74 <_svfiprintf_r+0x184>
   1d020:	9c07      	ldr	r4, [sp, #28]
   1d022:	3407      	adds	r4, #7
   1d024:	f024 0207 	bic.w	r2, r4, #7
   1d028:	f102 0108 	add.w	r1, r2, #8
   1d02c:	e9d2 4500 	ldrd	r4, r5, [r2]
   1d030:	9107      	str	r1, [sp, #28]
   1d032:	2201      	movs	r2, #1
   1d034:	e0f9      	b.n	1d22a <_svfiprintf_r+0x53a>
   1d036:	f043 0310 	orr.w	r3, r3, #16
   1d03a:	f013 0220 	ands.w	r2, r3, #32
   1d03e:	9406      	str	r4, [sp, #24]
   1d040:	f43f af2b 	beq.w	1ce9a <_svfiprintf_r+0x1aa>
   1d044:	9c07      	ldr	r4, [sp, #28]
   1d046:	3407      	adds	r4, #7
   1d048:	f024 0207 	bic.w	r2, r4, #7
   1d04c:	f102 0108 	add.w	r1, r2, #8
   1d050:	e9d2 4500 	ldrd	r4, r5, [r2]
   1d054:	9107      	str	r1, [sp, #28]
   1d056:	2200      	movs	r2, #0
   1d058:	e0e7      	b.n	1d22a <_svfiprintf_r+0x53a>
   1d05a:	9406      	str	r4, [sp, #24]
   1d05c:	2800      	cmp	r0, #0
   1d05e:	f040 8365 	bne.w	1d72c <_svfiprintf_r+0xa3c>
   1d062:	f043 0310 	orr.w	r3, r3, #16
   1d066:	069c      	lsls	r4, r3, #26
   1d068:	f100 82fa 	bmi.w	1d660 <_svfiprintf_r+0x970>
   1d06c:	06d8      	lsls	r0, r3, #27
   1d06e:	d402      	bmi.n	1d076 <_svfiprintf_r+0x386>
   1d070:	0659      	lsls	r1, r3, #25
   1d072:	f100 82c4 	bmi.w	1d5fe <_svfiprintf_r+0x90e>
   1d076:	9907      	ldr	r1, [sp, #28]
   1d078:	680c      	ldr	r4, [r1, #0]
   1d07a:	460a      	mov	r2, r1
   1d07c:	17e5      	asrs	r5, r4, #31
   1d07e:	3204      	adds	r2, #4
   1d080:	9207      	str	r2, [sp, #28]
   1d082:	4620      	mov	r0, r4
   1d084:	4629      	mov	r1, r5
   1d086:	2800      	cmp	r0, #0
   1d088:	f171 0200 	sbcs.w	r2, r1, #0
   1d08c:	f2c0 82c5 	blt.w	1d61a <_svfiprintf_r+0x92a>
   1d090:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1d094:	9203      	str	r2, [sp, #12]
   1d096:	f1b8 3fff 	cmp.w	r8, #4294967295
   1d09a:	f04f 0201 	mov.w	r2, #1
   1d09e:	f040 80ce 	bne.w	1d23e <_svfiprintf_r+0x54e>
   1d0a2:	ea54 0105 	orrs.w	r1, r4, r5
   1d0a6:	f000 820d 	beq.w	1d4c4 <_svfiprintf_r+0x7d4>
   1d0aa:	9301      	str	r3, [sp, #4]
   1d0ac:	2a01      	cmp	r2, #1
   1d0ae:	f000 826b 	beq.w	1d588 <_svfiprintf_r+0x898>
   1d0b2:	2a02      	cmp	r2, #2
   1d0b4:	f040 822d 	bne.w	1d512 <_svfiprintf_r+0x822>
   1d0b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1d0ba:	4656      	mov	r6, sl
   1d0bc:	0923      	lsrs	r3, r4, #4
   1d0be:	f004 010f 	and.w	r1, r4, #15
   1d0c2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   1d0c6:	092a      	lsrs	r2, r5, #4
   1d0c8:	461c      	mov	r4, r3
   1d0ca:	4615      	mov	r5, r2
   1d0cc:	5c43      	ldrb	r3, [r0, r1]
   1d0ce:	f806 3d01 	strb.w	r3, [r6, #-1]!
   1d0d2:	ea54 0305 	orrs.w	r3, r4, r5
   1d0d6:	d1f1      	bne.n	1d0bc <_svfiprintf_r+0x3cc>
   1d0d8:	ebaa 0306 	sub.w	r3, sl, r6
   1d0dc:	9304      	str	r3, [sp, #16]
   1d0de:	9b04      	ldr	r3, [sp, #16]
   1d0e0:	9a03      	ldr	r2, [sp, #12]
   1d0e2:	4543      	cmp	r3, r8
   1d0e4:	bfb8      	it	lt
   1d0e6:	4643      	movlt	r3, r8
   1d0e8:	9300      	str	r3, [sp, #0]
   1d0ea:	2a00      	cmp	r2, #0
   1d0ec:	f43f af2e 	beq.w	1cf4c <_svfiprintf_r+0x25c>
   1d0f0:	3301      	adds	r3, #1
   1d0f2:	9300      	str	r3, [sp, #0]
   1d0f4:	e72a      	b.n	1cf4c <_svfiprintf_r+0x25c>
   1d0f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d0fa:	2400      	movs	r4, #0
   1d0fc:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1d100:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1d104:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   1d108:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d10c:	2909      	cmp	r1, #9
   1d10e:	d9f5      	bls.n	1d0fc <_svfiprintf_r+0x40c>
   1d110:	e63d      	b.n	1cd8e <_svfiprintf_r+0x9e>
   1d112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d116:	f89b 2000 	ldrb.w	r2, [fp]
   1d11a:	e636      	b.n	1cd8a <_svfiprintf_r+0x9a>
   1d11c:	f89b 2000 	ldrb.w	r2, [fp]
   1d120:	2a2a      	cmp	r2, #42	; 0x2a
   1d122:	f10b 0601 	add.w	r6, fp, #1
   1d126:	f000 82e7 	beq.w	1d6f8 <_svfiprintf_r+0xa08>
   1d12a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d12e:	2909      	cmp	r1, #9
   1d130:	46b3      	mov	fp, r6
   1d132:	f04f 0800 	mov.w	r8, #0
   1d136:	f63f ae2a 	bhi.w	1cd8e <_svfiprintf_r+0x9e>
   1d13a:	f81b 2b01 	ldrb.w	r2, [fp], #1
   1d13e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1d142:	eb01 0848 	add.w	r8, r1, r8, lsl #1
   1d146:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1d14a:	2909      	cmp	r1, #9
   1d14c:	d9f5      	bls.n	1d13a <_svfiprintf_r+0x44a>
   1d14e:	e61e      	b.n	1cd8e <_svfiprintf_r+0x9e>
   1d150:	2800      	cmp	r0, #0
   1d152:	f040 82dd 	bne.w	1d710 <_svfiprintf_r+0xa20>
   1d156:	069a      	lsls	r2, r3, #26
   1d158:	f100 8276 	bmi.w	1d648 <_svfiprintf_r+0x958>
   1d15c:	06de      	lsls	r6, r3, #27
   1d15e:	f100 8297 	bmi.w	1d690 <_svfiprintf_r+0x9a0>
   1d162:	065d      	lsls	r5, r3, #25
   1d164:	f140 8294 	bpl.w	1d690 <_svfiprintf_r+0x9a0>
   1d168:	9a07      	ldr	r2, [sp, #28]
   1d16a:	6813      	ldr	r3, [r2, #0]
   1d16c:	3204      	adds	r2, #4
   1d16e:	9207      	str	r2, [sp, #28]
   1d170:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1d174:	801a      	strh	r2, [r3, #0]
   1d176:	e5d5      	b.n	1cd24 <_svfiprintf_r+0x34>
   1d178:	f89b 2000 	ldrb.w	r2, [fp]
   1d17c:	2a6c      	cmp	r2, #108	; 0x6c
   1d17e:	bf03      	ittte	eq
   1d180:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
   1d184:	f043 0320 	orreq.w	r3, r3, #32
   1d188:	f10b 0b01 	addeq.w	fp, fp, #1
   1d18c:	f043 0310 	orrne.w	r3, r3, #16
   1d190:	e5fb      	b.n	1cd8a <_svfiprintf_r+0x9a>
   1d192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d196:	f89b 2000 	ldrb.w	r2, [fp]
   1d19a:	e5f6      	b.n	1cd8a <_svfiprintf_r+0x9a>
   1d19c:	9406      	str	r4, [sp, #24]
   1d19e:	2800      	cmp	r0, #0
   1d1a0:	f43f af61 	beq.w	1d066 <_svfiprintf_r+0x376>
   1d1a4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1d1a8:	e75d      	b.n	1d066 <_svfiprintf_r+0x376>
   1d1aa:	bf00      	nop
   1d1ac:	000213d0 	.word	0x000213d0
   1d1b0:	000213ec 	.word	0x000213ec
   1d1b4:	000213bc 	.word	0x000213bc
   1d1b8:	9907      	ldr	r1, [sp, #28]
   1d1ba:	9406      	str	r4, [sp, #24]
   1d1bc:	680e      	ldr	r6, [r1, #0]
   1d1be:	f04f 0200 	mov.w	r2, #0
   1d1c2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1d1c6:	1d0c      	adds	r4, r1, #4
   1d1c8:	2e00      	cmp	r6, #0
   1d1ca:	f000 8283 	beq.w	1d6d4 <_svfiprintf_r+0x9e4>
   1d1ce:	f1b8 3fff 	cmp.w	r8, #4294967295
   1d1d2:	f000 8265 	beq.w	1d6a0 <_svfiprintf_r+0x9b0>
   1d1d6:	4642      	mov	r2, r8
   1d1d8:	2100      	movs	r1, #0
   1d1da:	4630      	mov	r0, r6
   1d1dc:	9300      	str	r3, [sp, #0]
   1d1de:	f7ff f94f 	bl	1c480 <memchr>
   1d1e2:	9b00      	ldr	r3, [sp, #0]
   1d1e4:	2800      	cmp	r0, #0
   1d1e6:	f000 827e 	beq.w	1d6e6 <_svfiprintf_r+0x9f6>
   1d1ea:	1b82      	subs	r2, r0, r6
   1d1ec:	9301      	str	r3, [sp, #4]
   1d1ee:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1d1f2:	9204      	str	r2, [sp, #16]
   1d1f4:	9407      	str	r4, [sp, #28]
   1d1f6:	9303      	str	r3, [sp, #12]
   1d1f8:	f04f 0800 	mov.w	r8, #0
   1d1fc:	e76f      	b.n	1d0de <_svfiprintf_r+0x3ee>
   1d1fe:	f043 0320 	orr.w	r3, r3, #32
   1d202:	f89b 2000 	ldrb.w	r2, [fp]
   1d206:	e5c0      	b.n	1cd8a <_svfiprintf_r+0x9a>
   1d208:	9807      	ldr	r0, [sp, #28]
   1d20a:	4ab3      	ldr	r2, [pc, #716]	; (1d4d8 <_svfiprintf_r+0x7e8>)
   1d20c:	9406      	str	r4, [sp, #24]
   1d20e:	920b      	str	r2, [sp, #44]	; 0x2c
   1d210:	6804      	ldr	r4, [r0, #0]
   1d212:	2278      	movs	r2, #120	; 0x78
   1d214:	2130      	movs	r1, #48	; 0x30
   1d216:	3004      	adds	r0, #4
   1d218:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   1d21c:	f043 0302 	orr.w	r3, r3, #2
   1d220:	9007      	str	r0, [sp, #28]
   1d222:	2500      	movs	r5, #0
   1d224:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   1d228:	2202      	movs	r2, #2
   1d22a:	f04f 0100 	mov.w	r1, #0
   1d22e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   1d232:	2100      	movs	r1, #0
   1d234:	9103      	str	r1, [sp, #12]
   1d236:	f1b8 3fff 	cmp.w	r8, #4294967295
   1d23a:	f43f af32 	beq.w	1d0a2 <_svfiprintf_r+0x3b2>
   1d23e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   1d242:	9101      	str	r1, [sp, #4]
   1d244:	ea54 0105 	orrs.w	r1, r4, r5
   1d248:	f47f af30 	bne.w	1d0ac <_svfiprintf_r+0x3bc>
   1d24c:	f1b8 0f00 	cmp.w	r8, #0
   1d250:	f040 8137 	bne.w	1d4c2 <_svfiprintf_r+0x7d2>
   1d254:	2a00      	cmp	r2, #0
   1d256:	f040 81b1 	bne.w	1d5bc <_svfiprintf_r+0x8cc>
   1d25a:	f013 0301 	ands.w	r3, r3, #1
   1d25e:	9304      	str	r3, [sp, #16]
   1d260:	f000 81cb 	beq.w	1d5fa <_svfiprintf_r+0x90a>
   1d264:	ae2c      	add	r6, sp, #176	; 0xb0
   1d266:	2330      	movs	r3, #48	; 0x30
   1d268:	f806 3d41 	strb.w	r3, [r6, #-65]!
   1d26c:	e737      	b.n	1d0de <_svfiprintf_r+0x3ee>
   1d26e:	9406      	str	r4, [sp, #24]
   1d270:	2800      	cmp	r0, #0
   1d272:	f040 825e 	bne.w	1d732 <_svfiprintf_r+0xa42>
   1d276:	2a00      	cmp	r2, #0
   1d278:	f000 80c5 	beq.w	1d406 <_svfiprintf_r+0x716>
   1d27c:	2101      	movs	r1, #1
   1d27e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   1d282:	f04f 0200 	mov.w	r2, #0
   1d286:	9100      	str	r1, [sp, #0]
   1d288:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1d28c:	9104      	str	r1, [sp, #16]
   1d28e:	ae12      	add	r6, sp, #72	; 0x48
   1d290:	e659      	b.n	1cf46 <_svfiprintf_r+0x256>
   1d292:	3104      	adds	r1, #4
   1d294:	6814      	ldr	r4, [r2, #0]
   1d296:	9107      	str	r1, [sp, #28]
   1d298:	2201      	movs	r2, #1
   1d29a:	2500      	movs	r5, #0
   1d29c:	e7c5      	b.n	1d22a <_svfiprintf_r+0x53a>
   1d29e:	9807      	ldr	r0, [sp, #28]
   1d2a0:	4601      	mov	r1, r0
   1d2a2:	3104      	adds	r1, #4
   1d2a4:	6804      	ldr	r4, [r0, #0]
   1d2a6:	9107      	str	r1, [sp, #28]
   1d2a8:	2500      	movs	r5, #0
   1d2aa:	e7be      	b.n	1d22a <_svfiprintf_r+0x53a>
   1d2ac:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d2ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d2b0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1d2b4:	b16a      	cbz	r2, 1d2d2 <_svfiprintf_r+0x5e2>
   1d2b6:	3301      	adds	r3, #1
   1d2b8:	3101      	adds	r1, #1
   1d2ba:	f10d 0037 	add.w	r0, sp, #55	; 0x37
   1d2be:	2201      	movs	r2, #1
   1d2c0:	2b07      	cmp	r3, #7
   1d2c2:	9111      	str	r1, [sp, #68]	; 0x44
   1d2c4:	9310      	str	r3, [sp, #64]	; 0x40
   1d2c6:	e889 0005 	stmia.w	r9, {r0, r2}
   1d2ca:	f300 8145 	bgt.w	1d558 <_svfiprintf_r+0x868>
   1d2ce:	f109 0908 	add.w	r9, r9, #8
   1d2d2:	9a08      	ldr	r2, [sp, #32]
   1d2d4:	b162      	cbz	r2, 1d2f0 <_svfiprintf_r+0x600>
   1d2d6:	3301      	adds	r3, #1
   1d2d8:	3102      	adds	r1, #2
   1d2da:	a80e      	add	r0, sp, #56	; 0x38
   1d2dc:	2202      	movs	r2, #2
   1d2de:	2b07      	cmp	r3, #7
   1d2e0:	9111      	str	r1, [sp, #68]	; 0x44
   1d2e2:	9310      	str	r3, [sp, #64]	; 0x40
   1d2e4:	e889 0005 	stmia.w	r9, {r0, r2}
   1d2e8:	f300 8142 	bgt.w	1d570 <_svfiprintf_r+0x880>
   1d2ec:	f109 0908 	add.w	r9, r9, #8
   1d2f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d2f2:	2a80      	cmp	r2, #128	; 0x80
   1d2f4:	f000 809b 	beq.w	1d42e <_svfiprintf_r+0x73e>
   1d2f8:	9a04      	ldr	r2, [sp, #16]
   1d2fa:	eba8 0502 	sub.w	r5, r8, r2
   1d2fe:	2d00      	cmp	r5, #0
   1d300:	dd31      	ble.n	1d366 <_svfiprintf_r+0x676>
   1d302:	2d10      	cmp	r5, #16
   1d304:	4c75      	ldr	r4, [pc, #468]	; (1d4dc <_svfiprintf_r+0x7ec>)
   1d306:	dd23      	ble.n	1d350 <_svfiprintf_r+0x660>
   1d308:	464a      	mov	r2, r9
   1d30a:	f04f 0810 	mov.w	r8, #16
   1d30e:	46b1      	mov	r9, r6
   1d310:	4626      	mov	r6, r4
   1d312:	9c05      	ldr	r4, [sp, #20]
   1d314:	e004      	b.n	1d320 <_svfiprintf_r+0x630>
   1d316:	3d10      	subs	r5, #16
   1d318:	2d10      	cmp	r5, #16
   1d31a:	f102 0208 	add.w	r2, r2, #8
   1d31e:	dd14      	ble.n	1d34a <_svfiprintf_r+0x65a>
   1d320:	3301      	adds	r3, #1
   1d322:	3110      	adds	r1, #16
   1d324:	2b07      	cmp	r3, #7
   1d326:	9111      	str	r1, [sp, #68]	; 0x44
   1d328:	9310      	str	r3, [sp, #64]	; 0x40
   1d32a:	e882 0140 	stmia.w	r2, {r6, r8}
   1d32e:	ddf2      	ble.n	1d316 <_svfiprintf_r+0x626>
   1d330:	aa0f      	add	r2, sp, #60	; 0x3c
   1d332:	4621      	mov	r1, r4
   1d334:	4638      	mov	r0, r7
   1d336:	f7ff fc5d 	bl	1cbf4 <__ssprint_r>
   1d33a:	2800      	cmp	r0, #0
   1d33c:	d16a      	bne.n	1d414 <_svfiprintf_r+0x724>
   1d33e:	3d10      	subs	r5, #16
   1d340:	2d10      	cmp	r5, #16
   1d342:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d344:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d346:	4652      	mov	r2, sl
   1d348:	dcea      	bgt.n	1d320 <_svfiprintf_r+0x630>
   1d34a:	4634      	mov	r4, r6
   1d34c:	464e      	mov	r6, r9
   1d34e:	4691      	mov	r9, r2
   1d350:	3301      	adds	r3, #1
   1d352:	4429      	add	r1, r5
   1d354:	2b07      	cmp	r3, #7
   1d356:	9111      	str	r1, [sp, #68]	; 0x44
   1d358:	9310      	str	r3, [sp, #64]	; 0x40
   1d35a:	e889 0030 	stmia.w	r9, {r4, r5}
   1d35e:	f300 80ca 	bgt.w	1d4f6 <_svfiprintf_r+0x806>
   1d362:	f109 0908 	add.w	r9, r9, #8
   1d366:	9804      	ldr	r0, [sp, #16]
   1d368:	f8c9 6000 	str.w	r6, [r9]
   1d36c:	3301      	adds	r3, #1
   1d36e:	4401      	add	r1, r0
   1d370:	2b07      	cmp	r3, #7
   1d372:	9111      	str	r1, [sp, #68]	; 0x44
   1d374:	9310      	str	r3, [sp, #64]	; 0x40
   1d376:	f8c9 0004 	str.w	r0, [r9, #4]
   1d37a:	f300 8090 	bgt.w	1d49e <_svfiprintf_r+0x7ae>
   1d37e:	f109 0908 	add.w	r9, r9, #8
   1d382:	9b01      	ldr	r3, [sp, #4]
   1d384:	075b      	lsls	r3, r3, #29
   1d386:	d530      	bpl.n	1d3ea <_svfiprintf_r+0x6fa>
   1d388:	9b06      	ldr	r3, [sp, #24]
   1d38a:	9a00      	ldr	r2, [sp, #0]
   1d38c:	1a9c      	subs	r4, r3, r2
   1d38e:	2c00      	cmp	r4, #0
   1d390:	dd2b      	ble.n	1d3ea <_svfiprintf_r+0x6fa>
   1d392:	2c10      	cmp	r4, #16
   1d394:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d396:	4d52      	ldr	r5, [pc, #328]	; (1d4e0 <_svfiprintf_r+0x7f0>)
   1d398:	dd1c      	ble.n	1d3d4 <_svfiprintf_r+0x6e4>
   1d39a:	2610      	movs	r6, #16
   1d39c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1d3a0:	e004      	b.n	1d3ac <_svfiprintf_r+0x6bc>
   1d3a2:	3c10      	subs	r4, #16
   1d3a4:	2c10      	cmp	r4, #16
   1d3a6:	f109 0908 	add.w	r9, r9, #8
   1d3aa:	dd13      	ble.n	1d3d4 <_svfiprintf_r+0x6e4>
   1d3ac:	3301      	adds	r3, #1
   1d3ae:	3110      	adds	r1, #16
   1d3b0:	2b07      	cmp	r3, #7
   1d3b2:	9111      	str	r1, [sp, #68]	; 0x44
   1d3b4:	9310      	str	r3, [sp, #64]	; 0x40
   1d3b6:	e889 0060 	stmia.w	r9, {r5, r6}
   1d3ba:	ddf2      	ble.n	1d3a2 <_svfiprintf_r+0x6b2>
   1d3bc:	aa0f      	add	r2, sp, #60	; 0x3c
   1d3be:	4641      	mov	r1, r8
   1d3c0:	4638      	mov	r0, r7
   1d3c2:	f7ff fc17 	bl	1cbf4 <__ssprint_r>
   1d3c6:	bb28      	cbnz	r0, 1d414 <_svfiprintf_r+0x724>
   1d3c8:	3c10      	subs	r4, #16
   1d3ca:	2c10      	cmp	r4, #16
   1d3cc:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d3ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d3d0:	46d1      	mov	r9, sl
   1d3d2:	dceb      	bgt.n	1d3ac <_svfiprintf_r+0x6bc>
   1d3d4:	3301      	adds	r3, #1
   1d3d6:	4421      	add	r1, r4
   1d3d8:	2b07      	cmp	r3, #7
   1d3da:	9111      	str	r1, [sp, #68]	; 0x44
   1d3dc:	9310      	str	r3, [sp, #64]	; 0x40
   1d3de:	f8c9 5000 	str.w	r5, [r9]
   1d3e2:	f8c9 4004 	str.w	r4, [r9, #4]
   1d3e6:	f300 80f9 	bgt.w	1d5dc <_svfiprintf_r+0x8ec>
   1d3ea:	9b02      	ldr	r3, [sp, #8]
   1d3ec:	9a06      	ldr	r2, [sp, #24]
   1d3ee:	9800      	ldr	r0, [sp, #0]
   1d3f0:	4282      	cmp	r2, r0
   1d3f2:	bfac      	ite	ge
   1d3f4:	189b      	addge	r3, r3, r2
   1d3f6:	181b      	addlt	r3, r3, r0
   1d3f8:	9302      	str	r3, [sp, #8]
   1d3fa:	2900      	cmp	r1, #0
   1d3fc:	d159      	bne.n	1d4b2 <_svfiprintf_r+0x7c2>
   1d3fe:	2300      	movs	r3, #0
   1d400:	9310      	str	r3, [sp, #64]	; 0x40
   1d402:	46d1      	mov	r9, sl
   1d404:	e48e      	b.n	1cd24 <_svfiprintf_r+0x34>
   1d406:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1d408:	b123      	cbz	r3, 1d414 <_svfiprintf_r+0x724>
   1d40a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1d40c:	9905      	ldr	r1, [sp, #20]
   1d40e:	aa0f      	add	r2, sp, #60	; 0x3c
   1d410:	f7ff fbf0 	bl	1cbf4 <__ssprint_r>
   1d414:	9b05      	ldr	r3, [sp, #20]
   1d416:	899b      	ldrh	r3, [r3, #12]
   1d418:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d41c:	9b02      	ldr	r3, [sp, #8]
   1d41e:	bf18      	it	ne
   1d420:	f04f 33ff 	movne.w	r3, #4294967295
   1d424:	9302      	str	r3, [sp, #8]
   1d426:	9802      	ldr	r0, [sp, #8]
   1d428:	b02d      	add	sp, #180	; 0xb4
   1d42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d42e:	9a06      	ldr	r2, [sp, #24]
   1d430:	9800      	ldr	r0, [sp, #0]
   1d432:	1a15      	subs	r5, r2, r0
   1d434:	2d00      	cmp	r5, #0
   1d436:	f77f af5f 	ble.w	1d2f8 <_svfiprintf_r+0x608>
   1d43a:	2d10      	cmp	r5, #16
   1d43c:	4c27      	ldr	r4, [pc, #156]	; (1d4dc <_svfiprintf_r+0x7ec>)
   1d43e:	dd22      	ble.n	1d486 <_svfiprintf_r+0x796>
   1d440:	464a      	mov	r2, r9
   1d442:	46b1      	mov	r9, r6
   1d444:	4626      	mov	r6, r4
   1d446:	9c05      	ldr	r4, [sp, #20]
   1d448:	e004      	b.n	1d454 <_svfiprintf_r+0x764>
   1d44a:	3d10      	subs	r5, #16
   1d44c:	2d10      	cmp	r5, #16
   1d44e:	f102 0208 	add.w	r2, r2, #8
   1d452:	dd15      	ble.n	1d480 <_svfiprintf_r+0x790>
   1d454:	3301      	adds	r3, #1
   1d456:	3110      	adds	r1, #16
   1d458:	2010      	movs	r0, #16
   1d45a:	2b07      	cmp	r3, #7
   1d45c:	9111      	str	r1, [sp, #68]	; 0x44
   1d45e:	9310      	str	r3, [sp, #64]	; 0x40
   1d460:	6016      	str	r6, [r2, #0]
   1d462:	6050      	str	r0, [r2, #4]
   1d464:	ddf1      	ble.n	1d44a <_svfiprintf_r+0x75a>
   1d466:	aa0f      	add	r2, sp, #60	; 0x3c
   1d468:	4621      	mov	r1, r4
   1d46a:	4638      	mov	r0, r7
   1d46c:	f7ff fbc2 	bl	1cbf4 <__ssprint_r>
   1d470:	2800      	cmp	r0, #0
   1d472:	d1cf      	bne.n	1d414 <_svfiprintf_r+0x724>
   1d474:	3d10      	subs	r5, #16
   1d476:	2d10      	cmp	r5, #16
   1d478:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d47a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d47c:	4652      	mov	r2, sl
   1d47e:	dce9      	bgt.n	1d454 <_svfiprintf_r+0x764>
   1d480:	4634      	mov	r4, r6
   1d482:	464e      	mov	r6, r9
   1d484:	4691      	mov	r9, r2
   1d486:	3301      	adds	r3, #1
   1d488:	4429      	add	r1, r5
   1d48a:	2b07      	cmp	r3, #7
   1d48c:	9111      	str	r1, [sp, #68]	; 0x44
   1d48e:	9310      	str	r3, [sp, #64]	; 0x40
   1d490:	e889 0030 	stmia.w	r9, {r4, r5}
   1d494:	f300 80f0 	bgt.w	1d678 <_svfiprintf_r+0x988>
   1d498:	f109 0908 	add.w	r9, r9, #8
   1d49c:	e72c      	b.n	1d2f8 <_svfiprintf_r+0x608>
   1d49e:	aa0f      	add	r2, sp, #60	; 0x3c
   1d4a0:	9905      	ldr	r1, [sp, #20]
   1d4a2:	4638      	mov	r0, r7
   1d4a4:	f7ff fba6 	bl	1cbf4 <__ssprint_r>
   1d4a8:	2800      	cmp	r0, #0
   1d4aa:	d1b3      	bne.n	1d414 <_svfiprintf_r+0x724>
   1d4ac:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d4ae:	46d1      	mov	r9, sl
   1d4b0:	e767      	b.n	1d382 <_svfiprintf_r+0x692>
   1d4b2:	aa0f      	add	r2, sp, #60	; 0x3c
   1d4b4:	9905      	ldr	r1, [sp, #20]
   1d4b6:	4638      	mov	r0, r7
   1d4b8:	f7ff fb9c 	bl	1cbf4 <__ssprint_r>
   1d4bc:	2800      	cmp	r0, #0
   1d4be:	d09e      	beq.n	1d3fe <_svfiprintf_r+0x70e>
   1d4c0:	e7a8      	b.n	1d414 <_svfiprintf_r+0x724>
   1d4c2:	9b01      	ldr	r3, [sp, #4]
   1d4c4:	2a01      	cmp	r2, #1
   1d4c6:	f000 80b7 	beq.w	1d638 <_svfiprintf_r+0x948>
   1d4ca:	2a02      	cmp	r2, #2
   1d4cc:	d11e      	bne.n	1d50c <_svfiprintf_r+0x81c>
   1d4ce:	9301      	str	r3, [sp, #4]
   1d4d0:	2400      	movs	r4, #0
   1d4d2:	2500      	movs	r5, #0
   1d4d4:	e5f0      	b.n	1d0b8 <_svfiprintf_r+0x3c8>
   1d4d6:	bf00      	nop
   1d4d8:	000213d0 	.word	0x000213d0
   1d4dc:	000213fc 	.word	0x000213fc
   1d4e0:	000213ec 	.word	0x000213ec
   1d4e4:	aa0f      	add	r2, sp, #60	; 0x3c
   1d4e6:	9905      	ldr	r1, [sp, #20]
   1d4e8:	4638      	mov	r0, r7
   1d4ea:	f7ff fb83 	bl	1cbf4 <__ssprint_r>
   1d4ee:	2800      	cmp	r0, #0
   1d4f0:	d190      	bne.n	1d414 <_svfiprintf_r+0x724>
   1d4f2:	46d1      	mov	r9, sl
   1d4f4:	e435      	b.n	1cd62 <_svfiprintf_r+0x72>
   1d4f6:	aa0f      	add	r2, sp, #60	; 0x3c
   1d4f8:	9905      	ldr	r1, [sp, #20]
   1d4fa:	4638      	mov	r0, r7
   1d4fc:	f7ff fb7a 	bl	1cbf4 <__ssprint_r>
   1d500:	2800      	cmp	r0, #0
   1d502:	d187      	bne.n	1d414 <_svfiprintf_r+0x724>
   1d504:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d506:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d508:	46d1      	mov	r9, sl
   1d50a:	e72c      	b.n	1d366 <_svfiprintf_r+0x676>
   1d50c:	9301      	str	r3, [sp, #4]
   1d50e:	2400      	movs	r4, #0
   1d510:	2500      	movs	r5, #0
   1d512:	4651      	mov	r1, sl
   1d514:	e000      	b.n	1d518 <_svfiprintf_r+0x828>
   1d516:	4631      	mov	r1, r6
   1d518:	08e2      	lsrs	r2, r4, #3
   1d51a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   1d51e:	08e8      	lsrs	r0, r5, #3
   1d520:	f004 0307 	and.w	r3, r4, #7
   1d524:	4605      	mov	r5, r0
   1d526:	4614      	mov	r4, r2
   1d528:	3330      	adds	r3, #48	; 0x30
   1d52a:	ea54 0205 	orrs.w	r2, r4, r5
   1d52e:	f801 3c01 	strb.w	r3, [r1, #-1]
   1d532:	f101 36ff 	add.w	r6, r1, #4294967295
   1d536:	d1ee      	bne.n	1d516 <_svfiprintf_r+0x826>
   1d538:	9a01      	ldr	r2, [sp, #4]
   1d53a:	07d2      	lsls	r2, r2, #31
   1d53c:	f57f adcc 	bpl.w	1d0d8 <_svfiprintf_r+0x3e8>
   1d540:	2b30      	cmp	r3, #48	; 0x30
   1d542:	f43f adc9 	beq.w	1d0d8 <_svfiprintf_r+0x3e8>
   1d546:	3902      	subs	r1, #2
   1d548:	2330      	movs	r3, #48	; 0x30
   1d54a:	f806 3c01 	strb.w	r3, [r6, #-1]
   1d54e:	ebaa 0301 	sub.w	r3, sl, r1
   1d552:	9304      	str	r3, [sp, #16]
   1d554:	460e      	mov	r6, r1
   1d556:	e5c2      	b.n	1d0de <_svfiprintf_r+0x3ee>
   1d558:	aa0f      	add	r2, sp, #60	; 0x3c
   1d55a:	9905      	ldr	r1, [sp, #20]
   1d55c:	4638      	mov	r0, r7
   1d55e:	f7ff fb49 	bl	1cbf4 <__ssprint_r>
   1d562:	2800      	cmp	r0, #0
   1d564:	f47f af56 	bne.w	1d414 <_svfiprintf_r+0x724>
   1d568:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d56a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d56c:	46d1      	mov	r9, sl
   1d56e:	e6b0      	b.n	1d2d2 <_svfiprintf_r+0x5e2>
   1d570:	aa0f      	add	r2, sp, #60	; 0x3c
   1d572:	9905      	ldr	r1, [sp, #20]
   1d574:	4638      	mov	r0, r7
   1d576:	f7ff fb3d 	bl	1cbf4 <__ssprint_r>
   1d57a:	2800      	cmp	r0, #0
   1d57c:	f47f af4a 	bne.w	1d414 <_svfiprintf_r+0x724>
   1d580:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d582:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d584:	46d1      	mov	r9, sl
   1d586:	e6b3      	b.n	1d2f0 <_svfiprintf_r+0x600>
   1d588:	2d00      	cmp	r5, #0
   1d58a:	bf08      	it	eq
   1d58c:	2c0a      	cmpeq	r4, #10
   1d58e:	d352      	bcc.n	1d636 <_svfiprintf_r+0x946>
   1d590:	4656      	mov	r6, sl
   1d592:	4620      	mov	r0, r4
   1d594:	4629      	mov	r1, r5
   1d596:	220a      	movs	r2, #10
   1d598:	2300      	movs	r3, #0
   1d59a:	f7fd fbe3 	bl	1ad64 <__aeabi_uldivmod>
   1d59e:	3230      	adds	r2, #48	; 0x30
   1d5a0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   1d5a4:	4620      	mov	r0, r4
   1d5a6:	4629      	mov	r1, r5
   1d5a8:	2300      	movs	r3, #0
   1d5aa:	220a      	movs	r2, #10
   1d5ac:	f7fd fbda 	bl	1ad64 <__aeabi_uldivmod>
   1d5b0:	4604      	mov	r4, r0
   1d5b2:	460d      	mov	r5, r1
   1d5b4:	ea54 0305 	orrs.w	r3, r4, r5
   1d5b8:	d1eb      	bne.n	1d592 <_svfiprintf_r+0x8a2>
   1d5ba:	e58d      	b.n	1d0d8 <_svfiprintf_r+0x3e8>
   1d5bc:	f8cd 8010 	str.w	r8, [sp, #16]
   1d5c0:	4656      	mov	r6, sl
   1d5c2:	e58c      	b.n	1d0de <_svfiprintf_r+0x3ee>
   1d5c4:	aa0f      	add	r2, sp, #60	; 0x3c
   1d5c6:	9905      	ldr	r1, [sp, #20]
   1d5c8:	4638      	mov	r0, r7
   1d5ca:	f7ff fb13 	bl	1cbf4 <__ssprint_r>
   1d5ce:	2800      	cmp	r0, #0
   1d5d0:	f47f af20 	bne.w	1d414 <_svfiprintf_r+0x724>
   1d5d4:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d5d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d5d8:	46d1      	mov	r9, sl
   1d5da:	e669      	b.n	1d2b0 <_svfiprintf_r+0x5c0>
   1d5dc:	aa0f      	add	r2, sp, #60	; 0x3c
   1d5de:	9905      	ldr	r1, [sp, #20]
   1d5e0:	4638      	mov	r0, r7
   1d5e2:	f7ff fb07 	bl	1cbf4 <__ssprint_r>
   1d5e6:	2800      	cmp	r0, #0
   1d5e8:	f47f af14 	bne.w	1d414 <_svfiprintf_r+0x724>
   1d5ec:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d5ee:	e6fc      	b.n	1d3ea <_svfiprintf_r+0x6fa>
   1d5f0:	9207      	str	r2, [sp, #28]
   1d5f2:	f89b 2000 	ldrb.w	r2, [fp]
   1d5f6:	f7ff bbc8 	b.w	1cd8a <_svfiprintf_r+0x9a>
   1d5fa:	4656      	mov	r6, sl
   1d5fc:	e56f      	b.n	1d0de <_svfiprintf_r+0x3ee>
   1d5fe:	9e07      	ldr	r6, [sp, #28]
   1d600:	f9b6 4000 	ldrsh.w	r4, [r6]
   1d604:	4632      	mov	r2, r6
   1d606:	17e5      	asrs	r5, r4, #31
   1d608:	4620      	mov	r0, r4
   1d60a:	3204      	adds	r2, #4
   1d60c:	4629      	mov	r1, r5
   1d60e:	2800      	cmp	r0, #0
   1d610:	9207      	str	r2, [sp, #28]
   1d612:	f171 0200 	sbcs.w	r2, r1, #0
   1d616:	f6bf ad3b 	bge.w	1d090 <_svfiprintf_r+0x3a0>
   1d61a:	222d      	movs	r2, #45	; 0x2d
   1d61c:	4264      	negs	r4, r4
   1d61e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   1d622:	9203      	str	r2, [sp, #12]
   1d624:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1d628:	2201      	movs	r2, #1
   1d62a:	e604      	b.n	1d236 <_svfiprintf_r+0x546>
   1d62c:	880c      	ldrh	r4, [r1, #0]
   1d62e:	3104      	adds	r1, #4
   1d630:	2500      	movs	r5, #0
   1d632:	9107      	str	r1, [sp, #28]
   1d634:	e455      	b.n	1cee2 <_svfiprintf_r+0x1f2>
   1d636:	9b01      	ldr	r3, [sp, #4]
   1d638:	9301      	str	r3, [sp, #4]
   1d63a:	ae2c      	add	r6, sp, #176	; 0xb0
   1d63c:	3430      	adds	r4, #48	; 0x30
   1d63e:	2301      	movs	r3, #1
   1d640:	f806 4d41 	strb.w	r4, [r6, #-65]!
   1d644:	9304      	str	r3, [sp, #16]
   1d646:	e54a      	b.n	1d0de <_svfiprintf_r+0x3ee>
   1d648:	9a07      	ldr	r2, [sp, #28]
   1d64a:	9902      	ldr	r1, [sp, #8]
   1d64c:	6813      	ldr	r3, [r2, #0]
   1d64e:	17cd      	asrs	r5, r1, #31
   1d650:	4608      	mov	r0, r1
   1d652:	3204      	adds	r2, #4
   1d654:	4629      	mov	r1, r5
   1d656:	9207      	str	r2, [sp, #28]
   1d658:	e9c3 0100 	strd	r0, r1, [r3]
   1d65c:	f7ff bb62 	b.w	1cd24 <_svfiprintf_r+0x34>
   1d660:	9c07      	ldr	r4, [sp, #28]
   1d662:	3407      	adds	r4, #7
   1d664:	f024 0407 	bic.w	r4, r4, #7
   1d668:	e9d4 0100 	ldrd	r0, r1, [r4]
   1d66c:	f104 0208 	add.w	r2, r4, #8
   1d670:	9207      	str	r2, [sp, #28]
   1d672:	4604      	mov	r4, r0
   1d674:	460d      	mov	r5, r1
   1d676:	e506      	b.n	1d086 <_svfiprintf_r+0x396>
   1d678:	aa0f      	add	r2, sp, #60	; 0x3c
   1d67a:	9905      	ldr	r1, [sp, #20]
   1d67c:	4638      	mov	r0, r7
   1d67e:	f7ff fab9 	bl	1cbf4 <__ssprint_r>
   1d682:	2800      	cmp	r0, #0
   1d684:	f47f aec6 	bne.w	1d414 <_svfiprintf_r+0x724>
   1d688:	9911      	ldr	r1, [sp, #68]	; 0x44
   1d68a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d68c:	46d1      	mov	r9, sl
   1d68e:	e633      	b.n	1d2f8 <_svfiprintf_r+0x608>
   1d690:	9a07      	ldr	r2, [sp, #28]
   1d692:	6813      	ldr	r3, [r2, #0]
   1d694:	3204      	adds	r2, #4
   1d696:	9207      	str	r2, [sp, #28]
   1d698:	9a02      	ldr	r2, [sp, #8]
   1d69a:	601a      	str	r2, [r3, #0]
   1d69c:	f7ff bb42 	b.w	1cd24 <_svfiprintf_r+0x34>
   1d6a0:	4630      	mov	r0, r6
   1d6a2:	9301      	str	r3, [sp, #4]
   1d6a4:	9407      	str	r4, [sp, #28]
   1d6a6:	f7fd ff6b 	bl	1b580 <strlen>
   1d6aa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1d6ae:	9004      	str	r0, [sp, #16]
   1d6b0:	9303      	str	r3, [sp, #12]
   1d6b2:	f04f 0800 	mov.w	r8, #0
   1d6b6:	e512      	b.n	1d0de <_svfiprintf_r+0x3ee>
   1d6b8:	2140      	movs	r1, #64	; 0x40
   1d6ba:	9200      	str	r2, [sp, #0]
   1d6bc:	f7fe fc2e 	bl	1bf1c <_malloc_r>
   1d6c0:	9a05      	ldr	r2, [sp, #20]
   1d6c2:	6010      	str	r0, [r2, #0]
   1d6c4:	6110      	str	r0, [r2, #16]
   1d6c6:	9a00      	ldr	r2, [sp, #0]
   1d6c8:	b328      	cbz	r0, 1d716 <_svfiprintf_r+0xa26>
   1d6ca:	9905      	ldr	r1, [sp, #20]
   1d6cc:	2340      	movs	r3, #64	; 0x40
   1d6ce:	614b      	str	r3, [r1, #20]
   1d6d0:	f7ff bb1c 	b.w	1cd0c <_svfiprintf_r+0x1c>
   1d6d4:	4642      	mov	r2, r8
   1d6d6:	2a06      	cmp	r2, #6
   1d6d8:	bf28      	it	cs
   1d6da:	2206      	movcs	r2, #6
   1d6dc:	9204      	str	r2, [sp, #16]
   1d6de:	9407      	str	r4, [sp, #28]
   1d6e0:	9200      	str	r2, [sp, #0]
   1d6e2:	4e17      	ldr	r6, [pc, #92]	; (1d740 <_svfiprintf_r+0xa50>)
   1d6e4:	e42f      	b.n	1cf46 <_svfiprintf_r+0x256>
   1d6e6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1d6ea:	f8cd 8010 	str.w	r8, [sp, #16]
   1d6ee:	9203      	str	r2, [sp, #12]
   1d6f0:	9407      	str	r4, [sp, #28]
   1d6f2:	9301      	str	r3, [sp, #4]
   1d6f4:	4680      	mov	r8, r0
   1d6f6:	e4f2      	b.n	1d0de <_svfiprintf_r+0x3ee>
   1d6f8:	9a07      	ldr	r2, [sp, #28]
   1d6fa:	6811      	ldr	r1, [r2, #0]
   1d6fc:	f89b 2001 	ldrb.w	r2, [fp, #1]
   1d700:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
   1d704:	9907      	ldr	r1, [sp, #28]
   1d706:	3104      	adds	r1, #4
   1d708:	46b3      	mov	fp, r6
   1d70a:	9107      	str	r1, [sp, #28]
   1d70c:	f7ff bb3d 	b.w	1cd8a <_svfiprintf_r+0x9a>
   1d710:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1d714:	e51f      	b.n	1d156 <_svfiprintf_r+0x466>
   1d716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d718:	230c      	movs	r3, #12
   1d71a:	6013      	str	r3, [r2, #0]
   1d71c:	f04f 33ff 	mov.w	r3, #4294967295
   1d720:	9302      	str	r3, [sp, #8]
   1d722:	e680      	b.n	1d426 <_svfiprintf_r+0x736>
   1d724:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1d728:	f7ff bbcb 	b.w	1cec2 <_svfiprintf_r+0x1d2>
   1d72c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1d730:	e497      	b.n	1d062 <_svfiprintf_r+0x372>
   1d732:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1d736:	e59e      	b.n	1d276 <_svfiprintf_r+0x586>
   1d738:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1d73c:	e457      	b.n	1cfee <_svfiprintf_r+0x2fe>
   1d73e:	bf00      	nop
   1d740:	000213e4 	.word	0x000213e4

0001d744 <_sungetc_r>:
   1d744:	b538      	push	{r3, r4, r5, lr}
   1d746:	1c4b      	adds	r3, r1, #1
   1d748:	d01a      	beq.n	1d780 <_sungetc_r+0x3c>
   1d74a:	8993      	ldrh	r3, [r2, #12]
   1d74c:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1d74e:	f023 0320 	bic.w	r3, r3, #32
   1d752:	b2cd      	uxtb	r5, r1
   1d754:	8193      	strh	r3, [r2, #12]
   1d756:	b1b4      	cbz	r4, 1d786 <_sungetc_r+0x42>
   1d758:	4614      	mov	r4, r2
   1d75a:	6852      	ldr	r2, [r2, #4]
   1d75c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d75e:	429a      	cmp	r2, r3
   1d760:	da09      	bge.n	1d776 <_sungetc_r+0x32>
   1d762:	6823      	ldr	r3, [r4, #0]
   1d764:	1e5a      	subs	r2, r3, #1
   1d766:	6022      	str	r2, [r4, #0]
   1d768:	f803 5c01 	strb.w	r5, [r3, #-1]
   1d76c:	6863      	ldr	r3, [r4, #4]
   1d76e:	3301      	adds	r3, #1
   1d770:	6063      	str	r3, [r4, #4]
   1d772:	4628      	mov	r0, r5
   1d774:	bd38      	pop	{r3, r4, r5, pc}
   1d776:	4621      	mov	r1, r4
   1d778:	f000 fd52 	bl	1e220 <__submore>
   1d77c:	2800      	cmp	r0, #0
   1d77e:	d0f0      	beq.n	1d762 <_sungetc_r+0x1e>
   1d780:	f04f 35ff 	mov.w	r5, #4294967295
   1d784:	e7f5      	b.n	1d772 <_sungetc_r+0x2e>
   1d786:	6911      	ldr	r1, [r2, #16]
   1d788:	6813      	ldr	r3, [r2, #0]
   1d78a:	b129      	cbz	r1, 1d798 <_sungetc_r+0x54>
   1d78c:	4299      	cmp	r1, r3
   1d78e:	d203      	bcs.n	1d798 <_sungetc_r+0x54>
   1d790:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   1d794:	428d      	cmp	r5, r1
   1d796:	d00f      	beq.n	1d7b8 <_sungetc_r+0x74>
   1d798:	6393      	str	r3, [r2, #56]	; 0x38
   1d79a:	4613      	mov	r3, r2
   1d79c:	6854      	ldr	r4, [r2, #4]
   1d79e:	63d4      	str	r4, [r2, #60]	; 0x3c
   1d7a0:	f102 0040 	add.w	r0, r2, #64	; 0x40
   1d7a4:	2103      	movs	r1, #3
   1d7a6:	6310      	str	r0, [r2, #48]	; 0x30
   1d7a8:	6351      	str	r1, [r2, #52]	; 0x34
   1d7aa:	f803 5f42 	strb.w	r5, [r3, #66]!
   1d7ae:	2101      	movs	r1, #1
   1d7b0:	6013      	str	r3, [r2, #0]
   1d7b2:	6051      	str	r1, [r2, #4]
   1d7b4:	4628      	mov	r0, r5
   1d7b6:	bd38      	pop	{r3, r4, r5, pc}
   1d7b8:	6851      	ldr	r1, [r2, #4]
   1d7ba:	3b01      	subs	r3, #1
   1d7bc:	3101      	adds	r1, #1
   1d7be:	6013      	str	r3, [r2, #0]
   1d7c0:	6051      	str	r1, [r2, #4]
   1d7c2:	e7d6      	b.n	1d772 <_sungetc_r+0x2e>

0001d7c4 <__ssrefill_r>:
   1d7c4:	b510      	push	{r4, lr}
   1d7c6:	460c      	mov	r4, r1
   1d7c8:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1d7ca:	b169      	cbz	r1, 1d7e8 <__ssrefill_r+0x24>
   1d7cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1d7d0:	4299      	cmp	r1, r3
   1d7d2:	d001      	beq.n	1d7d8 <__ssrefill_r+0x14>
   1d7d4:	f000 fdbc 	bl	1e350 <_free_r>
   1d7d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1d7da:	6063      	str	r3, [r4, #4]
   1d7dc:	2000      	movs	r0, #0
   1d7de:	6320      	str	r0, [r4, #48]	; 0x30
   1d7e0:	b113      	cbz	r3, 1d7e8 <__ssrefill_r+0x24>
   1d7e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d7e4:	6023      	str	r3, [r4, #0]
   1d7e6:	bd10      	pop	{r4, pc}
   1d7e8:	89a3      	ldrh	r3, [r4, #12]
   1d7ea:	6922      	ldr	r2, [r4, #16]
   1d7ec:	6022      	str	r2, [r4, #0]
   1d7ee:	f043 0320 	orr.w	r3, r3, #32
   1d7f2:	2200      	movs	r2, #0
   1d7f4:	81a3      	strh	r3, [r4, #12]
   1d7f6:	6062      	str	r2, [r4, #4]
   1d7f8:	f04f 30ff 	mov.w	r0, #4294967295
   1d7fc:	bd10      	pop	{r4, pc}
   1d7fe:	bf00      	nop

0001d800 <_sfread_r>:
   1d800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d804:	b083      	sub	sp, #12
   1d806:	fb02 f903 	mul.w	r9, r2, r3
   1d80a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1d80c:	f1b9 0f00 	cmp.w	r9, #0
   1d810:	d028      	beq.n	1d864 <_sfread_r+0x64>
   1d812:	4607      	mov	r7, r0
   1d814:	469a      	mov	sl, r3
   1d816:	9201      	str	r2, [sp, #4]
   1d818:	460d      	mov	r5, r1
   1d81a:	464e      	mov	r6, r9
   1d81c:	f04f 0800 	mov.w	r8, #0
   1d820:	e00f      	b.n	1d842 <_sfread_r+0x42>
   1d822:	6821      	ldr	r1, [r4, #0]
   1d824:	f7fd fd9a 	bl	1b35c <memcpy>
   1d828:	6822      	ldr	r2, [r4, #0]
   1d82a:	f8c4 8004 	str.w	r8, [r4, #4]
   1d82e:	445a      	add	r2, fp
   1d830:	6022      	str	r2, [r4, #0]
   1d832:	4621      	mov	r1, r4
   1d834:	4638      	mov	r0, r7
   1d836:	445d      	add	r5, fp
   1d838:	eba6 060b 	sub.w	r6, r6, fp
   1d83c:	f7ff ffc2 	bl	1d7c4 <__ssrefill_r>
   1d840:	b9a0      	cbnz	r0, 1d86c <_sfread_r+0x6c>
   1d842:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1d846:	455e      	cmp	r6, fp
   1d848:	4628      	mov	r0, r5
   1d84a:	465a      	mov	r2, fp
   1d84c:	d8e9      	bhi.n	1d822 <_sfread_r+0x22>
   1d84e:	4632      	mov	r2, r6
   1d850:	6821      	ldr	r1, [r4, #0]
   1d852:	f7fd fd83 	bl	1b35c <memcpy>
   1d856:	6862      	ldr	r2, [r4, #4]
   1d858:	6823      	ldr	r3, [r4, #0]
   1d85a:	1b92      	subs	r2, r2, r6
   1d85c:	441e      	add	r6, r3
   1d85e:	46d1      	mov	r9, sl
   1d860:	6062      	str	r2, [r4, #4]
   1d862:	6026      	str	r6, [r4, #0]
   1d864:	4648      	mov	r0, r9
   1d866:	b003      	add	sp, #12
   1d868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d86c:	9b01      	ldr	r3, [sp, #4]
   1d86e:	eba9 0906 	sub.w	r9, r9, r6
   1d872:	fbb9 f9f3 	udiv	r9, r9, r3
   1d876:	4648      	mov	r0, r9
   1d878:	b003      	add	sp, #12
   1d87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d87e:	bf00      	nop

0001d880 <__ssvfiscanf_r>:
   1d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d884:	468b      	mov	fp, r1
   1d886:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1d88a:	b0d9      	sub	sp, #356	; 0x164
   1d88c:	4607      	mov	r7, r0
   1d88e:	0488      	lsls	r0, r1, #18
   1d890:	9306      	str	r3, [sp, #24]
   1d892:	d409      	bmi.n	1d8a8 <__ssvfiscanf_r+0x28>
   1d894:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1d898:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1d89c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1d8a0:	f8ab 100c 	strh.w	r1, [fp, #12]
   1d8a4:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   1d8a8:	4614      	mov	r4, r2
   1d8aa:	4626      	mov	r6, r4
   1d8ac:	2300      	movs	r3, #0
   1d8ae:	9307      	str	r3, [sp, #28]
   1d8b0:	9304      	str	r3, [sp, #16]
   1d8b2:	469a      	mov	sl, r3
   1d8b4:	9305      	str	r3, [sp, #20]
   1d8b6:	f816 3b01 	ldrb.w	r3, [r6], #1
   1d8ba:	930b      	str	r3, [sp, #44]	; 0x2c
   1d8bc:	b363      	cbz	r3, 1d918 <__ssvfiscanf_r+0x98>
   1d8be:	f000 fe4d 	bl	1e55c <__locale_ctype_ptr>
   1d8c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d8c4:	4418      	add	r0, r3
   1d8c6:	7845      	ldrb	r5, [r0, #1]
   1d8c8:	f015 0508 	ands.w	r5, r5, #8
   1d8cc:	d028      	beq.n	1d920 <__ssvfiscanf_r+0xa0>
   1d8ce:	f8db 2004 	ldr.w	r2, [fp, #4]
   1d8d2:	e012      	b.n	1d8fa <__ssvfiscanf_r+0x7a>
   1d8d4:	f000 fe42 	bl	1e55c <__locale_ctype_ptr>
   1d8d8:	f8db 3000 	ldr.w	r3, [fp]
   1d8dc:	781a      	ldrb	r2, [r3, #0]
   1d8de:	4410      	add	r0, r2
   1d8e0:	3301      	adds	r3, #1
   1d8e2:	7842      	ldrb	r2, [r0, #1]
   1d8e4:	0712      	lsls	r2, r2, #28
   1d8e6:	d510      	bpl.n	1d90a <__ssvfiscanf_r+0x8a>
   1d8e8:	f8db 2004 	ldr.w	r2, [fp, #4]
   1d8ec:	f8cb 3000 	str.w	r3, [fp]
   1d8f0:	3a01      	subs	r2, #1
   1d8f2:	f10a 0a01 	add.w	sl, sl, #1
   1d8f6:	f8cb 2004 	str.w	r2, [fp, #4]
   1d8fa:	2a00      	cmp	r2, #0
   1d8fc:	dcea      	bgt.n	1d8d4 <__ssvfiscanf_r+0x54>
   1d8fe:	4659      	mov	r1, fp
   1d900:	4638      	mov	r0, r7
   1d902:	f7ff ff5f 	bl	1d7c4 <__ssrefill_r>
   1d906:	2800      	cmp	r0, #0
   1d908:	d0e4      	beq.n	1d8d4 <__ssvfiscanf_r+0x54>
   1d90a:	4634      	mov	r4, r6
   1d90c:	4626      	mov	r6, r4
   1d90e:	f816 3b01 	ldrb.w	r3, [r6], #1
   1d912:	930b      	str	r3, [sp, #44]	; 0x2c
   1d914:	2b00      	cmp	r3, #0
   1d916:	d1d2      	bne.n	1d8be <__ssvfiscanf_r+0x3e>
   1d918:	9805      	ldr	r0, [sp, #20]
   1d91a:	b059      	add	sp, #356	; 0x164
   1d91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d920:	2b25      	cmp	r3, #37	; 0x25
   1d922:	f040 8084 	bne.w	1da2e <__ssvfiscanf_r+0x1ae>
   1d926:	f894 8001 	ldrb.w	r8, [r4, #1]
   1d92a:	462c      	mov	r4, r5
   1d92c:	1c73      	adds	r3, r6, #1
   1d92e:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
   1d932:	f200 8187 	bhi.w	1dc44 <__ssvfiscanf_r+0x3c4>
   1d936:	e8df f018 	tbh	[pc, r8, lsl #1]
   1d93a:	0093      	.short	0x0093
   1d93c:	01850185 	.word	0x01850185
   1d940:	01850185 	.word	0x01850185
   1d944:	01850185 	.word	0x01850185
   1d948:	01850185 	.word	0x01850185
   1d94c:	01850185 	.word	0x01850185
   1d950:	01850185 	.word	0x01850185
   1d954:	01850185 	.word	0x01850185
   1d958:	01850185 	.word	0x01850185
   1d95c:	01850185 	.word	0x01850185
   1d960:	01850185 	.word	0x01850185
   1d964:	01850185 	.word	0x01850185
   1d968:	01850185 	.word	0x01850185
   1d96c:	01850185 	.word	0x01850185
   1d970:	01850185 	.word	0x01850185
   1d974:	01850185 	.word	0x01850185
   1d978:	01850185 	.word	0x01850185
   1d97c:	01850185 	.word	0x01850185
   1d980:	01850185 	.word	0x01850185
   1d984:	01850079 	.word	0x01850079
   1d988:	01850185 	.word	0x01850185
   1d98c:	017f0185 	.word	0x017f0185
   1d990:	01850185 	.word	0x01850185
   1d994:	01850185 	.word	0x01850185
   1d998:	01760185 	.word	0x01760185
   1d99c:	01760176 	.word	0x01760176
   1d9a0:	01760176 	.word	0x01760176
   1d9a4:	01760176 	.word	0x01760176
   1d9a8:	01760176 	.word	0x01760176
   1d9ac:	01850176 	.word	0x01850176
   1d9b0:	01850185 	.word	0x01850185
   1d9b4:	01850185 	.word	0x01850185
   1d9b8:	01850185 	.word	0x01850185
   1d9bc:	01850185 	.word	0x01850185
   1d9c0:	01720185 	.word	0x01720185
   1d9c4:	01850185 	.word	0x01850185
   1d9c8:	01850185 	.word	0x01850185
   1d9cc:	01850185 	.word	0x01850185
   1d9d0:	016c0185 	.word	0x016c0185
   1d9d4:	01850185 	.word	0x01850185
   1d9d8:	01850168 	.word	0x01850168
   1d9dc:	01850185 	.word	0x01850185
   1d9e0:	01850185 	.word	0x01850185
   1d9e4:	01850185 	.word	0x01850185
   1d9e8:	01640185 	.word	0x01640185
   1d9ec:	01850185 	.word	0x01850185
   1d9f0:	0185015b 	.word	0x0185015b
   1d9f4:	01850185 	.word	0x01850185
   1d9f8:	01850185 	.word	0x01850185
   1d9fc:	01850185 	.word	0x01850185
   1da00:	01030115 	.word	0x01030115
   1da04:	01850185 	.word	0x01850185
   1da08:	011a0185 	.word	0x011a0185
   1da0c:	0185009a 	.word	0x0185009a
   1da10:	01510185 	.word	0x01510185
   1da14:	013a0185 	.word	0x013a0185
   1da18:	012a0133 	.word	0x012a0133
   1da1c:	01850185 	.word	0x01850185
   1da20:	01850127 	.word	0x01850127
   1da24:	01850120 	.word	0x01850120
   1da28:	01640185 	.word	0x01640185
   1da2c:	461e      	mov	r6, r3
   1da2e:	f8db 3004 	ldr.w	r3, [fp, #4]
   1da32:	2b00      	cmp	r3, #0
   1da34:	f340 8375 	ble.w	1e122 <__ssvfiscanf_r+0x8a2>
   1da38:	f8db 3000 	ldr.w	r3, [fp]
   1da3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   1da40:	7819      	ldrb	r1, [r3, #0]
   1da42:	4291      	cmp	r1, r2
   1da44:	f47f af68 	bne.w	1d918 <__ssvfiscanf_r+0x98>
   1da48:	f8db 2004 	ldr.w	r2, [fp, #4]
   1da4c:	3301      	adds	r3, #1
   1da4e:	3a01      	subs	r2, #1
   1da50:	f8cb 3000 	str.w	r3, [fp]
   1da54:	f10a 0a01 	add.w	sl, sl, #1
   1da58:	f8cb 2004 	str.w	r2, [fp, #4]
   1da5c:	4634      	mov	r4, r6
   1da5e:	e755      	b.n	1d90c <__ssvfiscanf_r+0x8c>
   1da60:	f04f 33ff 	mov.w	r3, #4294967295
   1da64:	9305      	str	r3, [sp, #20]
   1da66:	9805      	ldr	r0, [sp, #20]
   1da68:	b059      	add	sp, #356	; 0x164
   1da6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da6e:	9303      	str	r3, [sp, #12]
   1da70:	4ba7      	ldr	r3, [pc, #668]	; (1dd10 <__ssvfiscanf_r+0x490>)
   1da72:	9307      	str	r3, [sp, #28]
   1da74:	2300      	movs	r3, #0
   1da76:	9304      	str	r3, [sp, #16]
   1da78:	2603      	movs	r6, #3
   1da7a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1da7e:	2b00      	cmp	r3, #0
   1da80:	dd69      	ble.n	1db56 <__ssvfiscanf_r+0x2d6>
   1da82:	0669      	lsls	r1, r5, #25
   1da84:	d533      	bpl.n	1daee <__ssvfiscanf_r+0x26e>
   1da86:	2e02      	cmp	r6, #2
   1da88:	f000 81f7 	beq.w	1de7a <__ssvfiscanf_r+0x5fa>
   1da8c:	2e03      	cmp	r6, #3
   1da8e:	f000 8143 	beq.w	1dd18 <__ssvfiscanf_r+0x498>
   1da92:	2e01      	cmp	r6, #1
   1da94:	f000 810a 	beq.w	1dcac <__ssvfiscanf_r+0x42c>
   1da98:	2c00      	cmp	r4, #0
   1da9a:	bf08      	it	eq
   1da9c:	2401      	moveq	r4, #1
   1da9e:	f015 0301 	ands.w	r3, r5, #1
   1daa2:	f040 8247 	bne.w	1df34 <__ssvfiscanf_r+0x6b4>
   1daa6:	06ed      	lsls	r5, r5, #27
   1daa8:	f140 831c 	bpl.w	1e0e4 <__ssvfiscanf_r+0x864>
   1daac:	461d      	mov	r5, r3
   1daae:	e009      	b.n	1dac4 <__ssvfiscanf_r+0x244>
   1dab0:	4413      	add	r3, r2
   1dab2:	f8cb 3000 	str.w	r3, [fp]
   1dab6:	4415      	add	r5, r2
   1dab8:	1aa4      	subs	r4, r4, r2
   1daba:	f7ff fe83 	bl	1d7c4 <__ssrefill_r>
   1dabe:	2800      	cmp	r0, #0
   1dac0:	f040 82d6 	bne.w	1e070 <__ssvfiscanf_r+0x7f0>
   1dac4:	f8db 2004 	ldr.w	r2, [fp, #4]
   1dac8:	f8db 3000 	ldr.w	r3, [fp]
   1dacc:	42a2      	cmp	r2, r4
   1dace:	4659      	mov	r1, fp
   1dad0:	4638      	mov	r0, r7
   1dad2:	dbed      	blt.n	1dab0 <__ssvfiscanf_r+0x230>
   1dad4:	1b12      	subs	r2, r2, r4
   1dad6:	4423      	add	r3, r4
   1dad8:	f8cb 2004 	str.w	r2, [fp, #4]
   1dadc:	4425      	add	r5, r4
   1dade:	f8cb 3000 	str.w	r3, [fp]
   1dae2:	9e03      	ldr	r6, [sp, #12]
   1dae4:	44aa      	add	sl, r5
   1dae6:	4634      	mov	r4, r6
   1dae8:	e710      	b.n	1d90c <__ssvfiscanf_r+0x8c>
   1daea:	f8cb 3000 	str.w	r3, [fp]
   1daee:	f000 fd35 	bl	1e55c <__locale_ctype_ptr>
   1daf2:	f8db 3000 	ldr.w	r3, [fp]
   1daf6:	781a      	ldrb	r2, [r3, #0]
   1daf8:	4410      	add	r0, r2
   1dafa:	3301      	adds	r3, #1
   1dafc:	7842      	ldrb	r2, [r0, #1]
   1dafe:	0712      	lsls	r2, r2, #28
   1db00:	d5c1      	bpl.n	1da86 <__ssvfiscanf_r+0x206>
   1db02:	f8db 2004 	ldr.w	r2, [fp, #4]
   1db06:	3a01      	subs	r2, #1
   1db08:	2a00      	cmp	r2, #0
   1db0a:	f10a 0a01 	add.w	sl, sl, #1
   1db0e:	f8cb 2004 	str.w	r2, [fp, #4]
   1db12:	dcea      	bgt.n	1daea <__ssvfiscanf_r+0x26a>
   1db14:	4659      	mov	r1, fp
   1db16:	4638      	mov	r0, r7
   1db18:	f7ff fe54 	bl	1d7c4 <__ssrefill_r>
   1db1c:	2800      	cmp	r0, #0
   1db1e:	d0e6      	beq.n	1daee <__ssvfiscanf_r+0x26e>
   1db20:	9a05      	ldr	r2, [sp, #20]
   1db22:	2a00      	cmp	r2, #0
   1db24:	d09c      	beq.n	1da60 <__ssvfiscanf_r+0x1e0>
   1db26:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1db2a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1db2e:	4613      	mov	r3, r2
   1db30:	bf18      	it	ne
   1db32:	f04f 33ff 	movne.w	r3, #4294967295
   1db36:	9305      	str	r3, [sp, #20]
   1db38:	9805      	ldr	r0, [sp, #20]
   1db3a:	b059      	add	sp, #356	; 0x164
   1db3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db40:	9303      	str	r3, [sp, #12]
   1db42:	4b73      	ldr	r3, [pc, #460]	; (1dd10 <__ssvfiscanf_r+0x490>)
   1db44:	9307      	str	r3, [sp, #28]
   1db46:	230a      	movs	r3, #10
   1db48:	9304      	str	r3, [sp, #16]
   1db4a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1db4e:	2b00      	cmp	r3, #0
   1db50:	f04f 0603 	mov.w	r6, #3
   1db54:	dc95      	bgt.n	1da82 <__ssvfiscanf_r+0x202>
   1db56:	4659      	mov	r1, fp
   1db58:	4638      	mov	r0, r7
   1db5a:	f7ff fe33 	bl	1d7c4 <__ssrefill_r>
   1db5e:	2800      	cmp	r0, #0
   1db60:	d08f      	beq.n	1da82 <__ssvfiscanf_r+0x202>
   1db62:	e7dd      	b.n	1db20 <__ssvfiscanf_r+0x2a0>
   1db64:	9303      	str	r3, [sp, #12]
   1db66:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1db6a:	2600      	movs	r6, #0
   1db6c:	e785      	b.n	1da7a <__ssvfiscanf_r+0x1fa>
   1db6e:	f896 8001 	ldrb.w	r8, [r6, #1]
   1db72:	f045 0504 	orr.w	r5, r5, #4
   1db76:	461e      	mov	r6, r3
   1db78:	e6d8      	b.n	1d92c <__ssvfiscanf_r+0xac>
   1db7a:	9303      	str	r3, [sp, #12]
   1db7c:	4b65      	ldr	r3, [pc, #404]	; (1dd14 <__ssvfiscanf_r+0x494>)
   1db7e:	9307      	str	r3, [sp, #28]
   1db80:	230a      	movs	r3, #10
   1db82:	9304      	str	r3, [sp, #16]
   1db84:	2603      	movs	r6, #3
   1db86:	e778      	b.n	1da7a <__ssvfiscanf_r+0x1fa>
   1db88:	9303      	str	r3, [sp, #12]
   1db8a:	2602      	movs	r6, #2
   1db8c:	e775      	b.n	1da7a <__ssvfiscanf_r+0x1fa>
   1db8e:	9303      	str	r3, [sp, #12]
   1db90:	f445 7508 	orr.w	r5, r5, #544	; 0x220
   1db94:	4b5f      	ldr	r3, [pc, #380]	; (1dd14 <__ssvfiscanf_r+0x494>)
   1db96:	9307      	str	r3, [sp, #28]
   1db98:	2310      	movs	r3, #16
   1db9a:	9304      	str	r3, [sp, #16]
   1db9c:	2603      	movs	r6, #3
   1db9e:	e76c      	b.n	1da7a <__ssvfiscanf_r+0x1fa>
   1dba0:	9303      	str	r3, [sp, #12]
   1dba2:	4b5c      	ldr	r3, [pc, #368]	; (1dd14 <__ssvfiscanf_r+0x494>)
   1dba4:	9307      	str	r3, [sp, #28]
   1dba6:	2308      	movs	r3, #8
   1dba8:	9304      	str	r3, [sp, #16]
   1dbaa:	2603      	movs	r6, #3
   1dbac:	e765      	b.n	1da7a <__ssvfiscanf_r+0x1fa>
   1dbae:	9303      	str	r3, [sp, #12]
   1dbb0:	06eb      	lsls	r3, r5, #27
   1dbb2:	d478      	bmi.n	1dca6 <__ssvfiscanf_r+0x426>
   1dbb4:	076e      	lsls	r6, r5, #29
   1dbb6:	f100 82d4 	bmi.w	1e162 <__ssvfiscanf_r+0x8e2>
   1dbba:	07ec      	lsls	r4, r5, #31
   1dbbc:	f100 82c0 	bmi.w	1e140 <__ssvfiscanf_r+0x8c0>
   1dbc0:	07a8      	lsls	r0, r5, #30
   1dbc2:	f140 82bd 	bpl.w	1e140 <__ssvfiscanf_r+0x8c0>
   1dbc6:	9a06      	ldr	r2, [sp, #24]
   1dbc8:	9e03      	ldr	r6, [sp, #12]
   1dbca:	6813      	ldr	r3, [r2, #0]
   1dbcc:	4650      	mov	r0, sl
   1dbce:	17c1      	asrs	r1, r0, #31
   1dbd0:	3204      	adds	r2, #4
   1dbd2:	9206      	str	r2, [sp, #24]
   1dbd4:	e9c3 0100 	strd	r0, r1, [r3]
   1dbd8:	4634      	mov	r4, r6
   1dbda:	e697      	b.n	1d90c <__ssvfiscanf_r+0x8c>
   1dbdc:	f896 8001 	ldrb.w	r8, [r6, #1]
   1dbe0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   1dbe4:	f000 82a5 	beq.w	1e132 <__ssvfiscanf_r+0x8b2>
   1dbe8:	f045 0501 	orr.w	r5, r5, #1
   1dbec:	461e      	mov	r6, r3
   1dbee:	e69d      	b.n	1d92c <__ssvfiscanf_r+0xac>
   1dbf0:	4619      	mov	r1, r3
   1dbf2:	a818      	add	r0, sp, #96	; 0x60
   1dbf4:	f000 ff0e 	bl	1ea14 <__sccl>
   1dbf8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   1dbfc:	9003      	str	r0, [sp, #12]
   1dbfe:	2601      	movs	r6, #1
   1dc00:	e73b      	b.n	1da7a <__ssvfiscanf_r+0x1fa>
   1dc02:	9303      	str	r3, [sp, #12]
   1dc04:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1dc08:	e7c4      	b.n	1db94 <__ssvfiscanf_r+0x314>
   1dc0a:	9303      	str	r3, [sp, #12]
   1dc0c:	f045 0501 	orr.w	r5, r5, #1
   1dc10:	e7c7      	b.n	1dba2 <__ssvfiscanf_r+0x322>
   1dc12:	f896 8001 	ldrb.w	r8, [r6, #1]
   1dc16:	f045 0502 	orr.w	r5, r5, #2
   1dc1a:	461e      	mov	r6, r3
   1dc1c:	e686      	b.n	1d92c <__ssvfiscanf_r+0xac>
   1dc1e:	9303      	str	r3, [sp, #12]
   1dc20:	f045 0501 	orr.w	r5, r5, #1
   1dc24:	e78d      	b.n	1db42 <__ssvfiscanf_r+0x2c2>
   1dc26:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1dc2a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
   1dc2e:	3c30      	subs	r4, #48	; 0x30
   1dc30:	f896 8001 	ldrb.w	r8, [r6, #1]
   1dc34:	461e      	mov	r6, r3
   1dc36:	e679      	b.n	1d92c <__ssvfiscanf_r+0xac>
   1dc38:	f896 8001 	ldrb.w	r8, [r6, #1]
   1dc3c:	f045 0510 	orr.w	r5, r5, #16
   1dc40:	461e      	mov	r6, r3
   1dc42:	e673      	b.n	1d92c <__ssvfiscanf_r+0xac>
   1dc44:	9303      	str	r3, [sp, #12]
   1dc46:	f000 fc89 	bl	1e55c <__locale_ctype_ptr>
   1dc4a:	4440      	add	r0, r8
   1dc4c:	7843      	ldrb	r3, [r0, #1]
   1dc4e:	f003 0303 	and.w	r3, r3, #3
   1dc52:	2b01      	cmp	r3, #1
   1dc54:	f47f af75 	bne.w	1db42 <__ssvfiscanf_r+0x2c2>
   1dc58:	f045 0501 	orr.w	r5, r5, #1
   1dc5c:	e771      	b.n	1db42 <__ssvfiscanf_r+0x2c2>
   1dc5e:	ab0c      	add	r3, sp, #48	; 0x30
   1dc60:	4618      	mov	r0, r3
   1dc62:	2208      	movs	r2, #8
   1dc64:	2100      	movs	r1, #0
   1dc66:	9308      	str	r3, [sp, #32]
   1dc68:	f7fd fc12 	bl	1b490 <memset>
   1dc6c:	f015 0310 	ands.w	r3, r5, #16
   1dc70:	9309      	str	r3, [sp, #36]	; 0x24
   1dc72:	f000 81e1 	beq.w	1e038 <__ssvfiscanf_r+0x7b8>
   1dc76:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   1dc7a:	2600      	movs	r6, #0
   1dc7c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1dc80:	f000 fc6c 	bl	1e55c <__locale_ctype_ptr>
   1dc84:	f8db 3000 	ldr.w	r3, [fp]
   1dc88:	781b      	ldrb	r3, [r3, #0]
   1dc8a:	4403      	add	r3, r0
   1dc8c:	785b      	ldrb	r3, [r3, #1]
   1dc8e:	071a      	lsls	r2, r3, #28
   1dc90:	d402      	bmi.n	1dc98 <__ssvfiscanf_r+0x418>
   1dc92:	2c00      	cmp	r4, #0
   1dc94:	f040 8270 	bne.w	1e178 <__ssvfiscanf_r+0x8f8>
   1dc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dc9a:	b923      	cbnz	r3, 1dca6 <__ssvfiscanf_r+0x426>
   1dc9c:	f8c9 3000 	str.w	r3, [r9]
   1dca0:	9b05      	ldr	r3, [sp, #20]
   1dca2:	3301      	adds	r3, #1
   1dca4:	9305      	str	r3, [sp, #20]
   1dca6:	9e03      	ldr	r6, [sp, #12]
   1dca8:	4634      	mov	r4, r6
   1dcaa:	e62f      	b.n	1d90c <__ssvfiscanf_r+0x8c>
   1dcac:	2c00      	cmp	r4, #0
   1dcae:	bf08      	it	eq
   1dcb0:	f04f 34ff 	moveq.w	r4, #4294967295
   1dcb4:	06e8      	lsls	r0, r5, #27
   1dcb6:	f140 810b 	bpl.w	1ded0 <__ssvfiscanf_r+0x650>
   1dcba:	f8db 2000 	ldr.w	r2, [fp]
   1dcbe:	2500      	movs	r5, #0
   1dcc0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1dcc4:	7813      	ldrb	r3, [r2, #0]
   1dcc6:	f818 3003 	ldrb.w	r3, [r8, r3]
   1dcca:	3201      	adds	r2, #1
   1dccc:	b1db      	cbz	r3, 1dd06 <__ssvfiscanf_r+0x486>
   1dcce:	f8db 3004 	ldr.w	r3, [fp, #4]
   1dcd2:	f8cb 2000 	str.w	r2, [fp]
   1dcd6:	3501      	adds	r5, #1
   1dcd8:	3b01      	subs	r3, #1
   1dcda:	42ac      	cmp	r4, r5
   1dcdc:	f8cb 3004 	str.w	r3, [fp, #4]
   1dce0:	f43f aeff 	beq.w	1dae2 <__ssvfiscanf_r+0x262>
   1dce4:	2b00      	cmp	r3, #0
   1dce6:	dced      	bgt.n	1dcc4 <__ssvfiscanf_r+0x444>
   1dce8:	4659      	mov	r1, fp
   1dcea:	4638      	mov	r0, r7
   1dcec:	f7ff fd6a 	bl	1d7c4 <__ssrefill_r>
   1dcf0:	2800      	cmp	r0, #0
   1dcf2:	f47f aef6 	bne.w	1dae2 <__ssvfiscanf_r+0x262>
   1dcf6:	f8db 2000 	ldr.w	r2, [fp]
   1dcfa:	7813      	ldrb	r3, [r2, #0]
   1dcfc:	f818 3003 	ldrb.w	r3, [r8, r3]
   1dd00:	3201      	adds	r2, #1
   1dd02:	2b00      	cmp	r3, #0
   1dd04:	d1e3      	bne.n	1dcce <__ssvfiscanf_r+0x44e>
   1dd06:	2d00      	cmp	r5, #0
   1dd08:	f47f aeeb 	bne.w	1dae2 <__ssvfiscanf_r+0x262>
   1dd0c:	e604      	b.n	1d918 <__ssvfiscanf_r+0x98>
   1dd0e:	bf00      	nop
   1dd10:	0001ebb1 	.word	0x0001ebb1
   1dd14:	0001cba5 	.word	0x0001cba5
   1dd18:	1e63      	subs	r3, r4, #1
   1dd1a:	2b26      	cmp	r3, #38	; 0x26
   1dd1c:	bf8c      	ite	hi
   1dd1e:	f1a4 0227 	subhi.w	r2, r4, #39	; 0x27
   1dd22:	2200      	movls	r2, #0
   1dd24:	f04f 0900 	mov.w	r9, #0
   1dd28:	4611      	mov	r1, r2
   1dd2a:	ae0e      	add	r6, sp, #56	; 0x38
   1dd2c:	464b      	mov	r3, r9
   1dd2e:	46b9      	mov	r9, r7
   1dd30:	9f04      	ldr	r7, [sp, #16]
   1dd32:	4652      	mov	r2, sl
   1dd34:	bf88      	it	hi
   1dd36:	2427      	movhi	r4, #39	; 0x27
   1dd38:	f445 6558 	orr.w	r5, r5, #3456	; 0xd80
   1dd3c:	46b0      	mov	r8, r6
   1dd3e:	468a      	mov	sl, r1
   1dd40:	f8db 0000 	ldr.w	r0, [fp]
   1dd44:	f890 e000 	ldrb.w	lr, [r0]
   1dd48:	f1ae 012b 	sub.w	r1, lr, #43	; 0x2b
   1dd4c:	294d      	cmp	r1, #77	; 0x4d
   1dd4e:	d842      	bhi.n	1ddd6 <__ssvfiscanf_r+0x556>
   1dd50:	e8df f001 	tbb	[pc, r1]
   1dd54:	418e418e 	.word	0x418e418e
   1dd58:	5d5d6341 	.word	0x5d5d6341
   1dd5c:	5d5d5d5d 	.word	0x5d5d5d5d
   1dd60:	4188885d 	.word	0x4188885d
   1dd64:	41414141 	.word	0x41414141
   1dd68:	58584141 	.word	0x58584141
   1dd6c:	58585858 	.word	0x58585858
   1dd70:	41414141 	.word	0x41414141
   1dd74:	41414141 	.word	0x41414141
   1dd78:	41414141 	.word	0x41414141
   1dd7c:	41414141 	.word	0x41414141
   1dd80:	41412741 	.word	0x41412741
   1dd84:	41414141 	.word	0x41414141
   1dd88:	58584141 	.word	0x58584141
   1dd8c:	58585858 	.word	0x58585858
   1dd90:	41414141 	.word	0x41414141
   1dd94:	41414141 	.word	0x41414141
   1dd98:	41414141 	.word	0x41414141
   1dd9c:	41414141 	.word	0x41414141
   1dda0:	2741      	.short	0x2741
   1dda2:	f405 61c0 	and.w	r1, r5, #1536	; 0x600
   1dda6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1ddaa:	d114      	bne.n	1ddd6 <__ssvfiscanf_r+0x556>
   1ddac:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   1ddb0:	f445 65a0 	orr.w	r5, r5, #1280	; 0x500
   1ddb4:	2710      	movs	r7, #16
   1ddb6:	f8db 1004 	ldr.w	r1, [fp, #4]
   1ddba:	f888 e000 	strb.w	lr, [r8]
   1ddbe:	3901      	subs	r1, #1
   1ddc0:	2900      	cmp	r1, #0
   1ddc2:	f108 0801 	add.w	r8, r8, #1
   1ddc6:	f8cb 1004 	str.w	r1, [fp, #4]
   1ddca:	dd40      	ble.n	1de4e <__ssvfiscanf_r+0x5ce>
   1ddcc:	3001      	adds	r0, #1
   1ddce:	f8cb 0000 	str.w	r0, [fp]
   1ddd2:	3c01      	subs	r4, #1
   1ddd4:	d1b4      	bne.n	1dd40 <__ssvfiscanf_r+0x4c0>
   1ddd6:	05e8      	lsls	r0, r5, #23
   1ddd8:	9704      	str	r7, [sp, #16]
   1ddda:	4692      	mov	sl, r2
   1dddc:	464f      	mov	r7, r9
   1ddde:	4699      	mov	r9, r3
   1dde0:	d505      	bpl.n	1ddee <__ssvfiscanf_r+0x56e>
   1dde2:	45b0      	cmp	r8, r6
   1dde4:	f200 8194 	bhi.w	1e110 <__ssvfiscanf_r+0x890>
   1dde8:	45b0      	cmp	r8, r6
   1ddea:	f43f ad95 	beq.w	1d918 <__ssvfiscanf_r+0x98>
   1ddee:	f015 0410 	ands.w	r4, r5, #16
   1ddf2:	f000 80e5 	beq.w	1dfc0 <__ssvfiscanf_r+0x740>
   1ddf6:	eba8 0606 	sub.w	r6, r8, r6
   1ddfa:	44b1      	add	r9, r6
   1ddfc:	9e03      	ldr	r6, [sp, #12]
   1ddfe:	44ca      	add	sl, r9
   1de00:	4634      	mov	r4, r6
   1de02:	e583      	b.n	1d90c <__ssvfiscanf_r+0x8c>
   1de04:	2f0a      	cmp	r7, #10
   1de06:	dde6      	ble.n	1ddd6 <__ssvfiscanf_r+0x556>
   1de08:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1de0c:	e7d3      	b.n	1ddb6 <__ssvfiscanf_r+0x536>
   1de0e:	49b3      	ldr	r1, [pc, #716]	; (1e0dc <__ssvfiscanf_r+0x85c>)
   1de10:	f425 6538 	bic.w	r5, r5, #2944	; 0xb80
   1de14:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1de18:	e7cd      	b.n	1ddb6 <__ssvfiscanf_r+0x536>
   1de1a:	0529      	lsls	r1, r5, #20
   1de1c:	d5cb      	bpl.n	1ddb6 <__ssvfiscanf_r+0x536>
   1de1e:	b917      	cbnz	r7, 1de26 <__ssvfiscanf_r+0x5a6>
   1de20:	f445 7500 	orr.w	r5, r5, #512	; 0x200
   1de24:	2708      	movs	r7, #8
   1de26:	0569      	lsls	r1, r5, #21
   1de28:	f100 80fa 	bmi.w	1e020 <__ssvfiscanf_r+0x7a0>
   1de2c:	f425 7560 	bic.w	r5, r5, #896	; 0x380
   1de30:	f1ba 0f00 	cmp.w	sl, #0
   1de34:	d002      	beq.n	1de3c <__ssvfiscanf_r+0x5bc>
   1de36:	f10a 3aff 	add.w	sl, sl, #4294967295
   1de3a:	3401      	adds	r4, #1
   1de3c:	f8db 1004 	ldr.w	r1, [fp, #4]
   1de40:	3901      	subs	r1, #1
   1de42:	2900      	cmp	r1, #0
   1de44:	f103 0301 	add.w	r3, r3, #1
   1de48:	f8cb 1004 	str.w	r1, [fp, #4]
   1de4c:	dcbe      	bgt.n	1ddcc <__ssvfiscanf_r+0x54c>
   1de4e:	4659      	mov	r1, fp
   1de50:	4648      	mov	r0, r9
   1de52:	9308      	str	r3, [sp, #32]
   1de54:	9204      	str	r2, [sp, #16]
   1de56:	f7ff fcb5 	bl	1d7c4 <__ssrefill_r>
   1de5a:	9a04      	ldr	r2, [sp, #16]
   1de5c:	9b08      	ldr	r3, [sp, #32]
   1de5e:	2800      	cmp	r0, #0
   1de60:	d0b7      	beq.n	1ddd2 <__ssvfiscanf_r+0x552>
   1de62:	e7b8      	b.n	1ddd6 <__ssvfiscanf_r+0x556>
   1de64:	499d      	ldr	r1, [pc, #628]	; (1e0dc <__ssvfiscanf_r+0x85c>)
   1de66:	f931 7017 	ldrsh.w	r7, [r1, r7, lsl #1]
   1de6a:	2f08      	cmp	r7, #8
   1de6c:	dccc      	bgt.n	1de08 <__ssvfiscanf_r+0x588>
   1de6e:	e7b2      	b.n	1ddd6 <__ssvfiscanf_r+0x556>
   1de70:	0629      	lsls	r1, r5, #24
   1de72:	d5b0      	bpl.n	1ddd6 <__ssvfiscanf_r+0x556>
   1de74:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   1de78:	e79d      	b.n	1ddb6 <__ssvfiscanf_r+0x536>
   1de7a:	2c00      	cmp	r4, #0
   1de7c:	bf08      	it	eq
   1de7e:	f04f 34ff 	moveq.w	r4, #4294967295
   1de82:	f015 0601 	ands.w	r6, r5, #1
   1de86:	f47f aeea 	bne.w	1dc5e <__ssvfiscanf_r+0x3de>
   1de8a:	06eb      	lsls	r3, r5, #27
   1de8c:	f140 80f4 	bpl.w	1e078 <__ssvfiscanf_r+0x7f8>
   1de90:	f000 fb64 	bl	1e55c <__locale_ctype_ptr>
   1de94:	f8db 3000 	ldr.w	r3, [fp]
   1de98:	781a      	ldrb	r2, [r3, #0]
   1de9a:	4410      	add	r0, r2
   1de9c:	3301      	adds	r3, #1
   1de9e:	7842      	ldrb	r2, [r0, #1]
   1dea0:	0715      	lsls	r5, r2, #28
   1dea2:	d411      	bmi.n	1dec8 <__ssvfiscanf_r+0x648>
   1dea4:	f8db 2004 	ldr.w	r2, [fp, #4]
   1dea8:	f8cb 3000 	str.w	r3, [fp]
   1deac:	3601      	adds	r6, #1
   1deae:	3a01      	subs	r2, #1
   1deb0:	42b4      	cmp	r4, r6
   1deb2:	f8cb 2004 	str.w	r2, [fp, #4]
   1deb6:	d007      	beq.n	1dec8 <__ssvfiscanf_r+0x648>
   1deb8:	2a00      	cmp	r2, #0
   1deba:	dce9      	bgt.n	1de90 <__ssvfiscanf_r+0x610>
   1debc:	4659      	mov	r1, fp
   1debe:	4638      	mov	r0, r7
   1dec0:	f7ff fc80 	bl	1d7c4 <__ssrefill_r>
   1dec4:	2800      	cmp	r0, #0
   1dec6:	d0e3      	beq.n	1de90 <__ssvfiscanf_r+0x610>
   1dec8:	44b2      	add	sl, r6
   1deca:	9e03      	ldr	r6, [sp, #12]
   1decc:	4634      	mov	r4, r6
   1dece:	e51d      	b.n	1d90c <__ssvfiscanf_r+0x8c>
   1ded0:	9a06      	ldr	r2, [sp, #24]
   1ded2:	6815      	ldr	r5, [r2, #0]
   1ded4:	1d16      	adds	r6, r2, #4
   1ded6:	46a9      	mov	r9, r5
   1ded8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1dedc:	f8db 3000 	ldr.w	r3, [fp]
   1dee0:	781a      	ldrb	r2, [r3, #0]
   1dee2:	f818 2002 	ldrb.w	r2, [r8, r2]
   1dee6:	1c59      	adds	r1, r3, #1
   1dee8:	b1c2      	cbz	r2, 1df1c <__ssvfiscanf_r+0x69c>
   1deea:	f8db 2004 	ldr.w	r2, [fp, #4]
   1deee:	f8cb 1000 	str.w	r1, [fp]
   1def2:	3a01      	subs	r2, #1
   1def4:	f8cb 2004 	str.w	r2, [fp, #4]
   1def8:	781b      	ldrb	r3, [r3, #0]
   1defa:	f809 3b01 	strb.w	r3, [r9], #1
   1defe:	3c01      	subs	r4, #1
   1df00:	d00c      	beq.n	1df1c <__ssvfiscanf_r+0x69c>
   1df02:	f8db 3004 	ldr.w	r3, [fp, #4]
   1df06:	2b00      	cmp	r3, #0
   1df08:	dce8      	bgt.n	1dedc <__ssvfiscanf_r+0x65c>
   1df0a:	4659      	mov	r1, fp
   1df0c:	4638      	mov	r0, r7
   1df0e:	f7ff fc59 	bl	1d7c4 <__ssrefill_r>
   1df12:	2800      	cmp	r0, #0
   1df14:	d0e2      	beq.n	1dedc <__ssvfiscanf_r+0x65c>
   1df16:	454d      	cmp	r5, r9
   1df18:	f43f ae02 	beq.w	1db20 <__ssvfiscanf_r+0x2a0>
   1df1c:	ebb9 0505 	subs.w	r5, r9, r5
   1df20:	f43f acfa 	beq.w	1d918 <__ssvfiscanf_r+0x98>
   1df24:	9a05      	ldr	r2, [sp, #20]
   1df26:	9606      	str	r6, [sp, #24]
   1df28:	2300      	movs	r3, #0
   1df2a:	3201      	adds	r2, #1
   1df2c:	9205      	str	r2, [sp, #20]
   1df2e:	f889 3000 	strb.w	r3, [r9]
   1df32:	e5d6      	b.n	1dae2 <__ssvfiscanf_r+0x262>
   1df34:	ab0c      	add	r3, sp, #48	; 0x30
   1df36:	4618      	mov	r0, r3
   1df38:	2208      	movs	r2, #8
   1df3a:	2100      	movs	r1, #0
   1df3c:	9308      	str	r3, [sp, #32]
   1df3e:	f7fd faa7 	bl	1b490 <memset>
   1df42:	f015 0310 	ands.w	r3, r5, #16
   1df46:	9309      	str	r3, [sp, #36]	; 0x24
   1df48:	d06d      	beq.n	1e026 <__ssvfiscanf_r+0x7a6>
   1df4a:	f04f 0900 	mov.w	r9, #0
   1df4e:	2c00      	cmp	r4, #0
   1df50:	f43f aea9 	beq.w	1dca6 <__ssvfiscanf_r+0x426>
   1df54:	2500      	movs	r5, #0
   1df56:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   1df5a:	f000 faed 	bl	1e538 <__locale_mb_cur_max>
   1df5e:	4285      	cmp	r5, r0
   1df60:	f43f adde 	beq.w	1db20 <__ssvfiscanf_r+0x2a0>
   1df64:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1df68:	f812 0b01 	ldrb.w	r0, [r2], #1
   1df6c:	f8cb 2000 	str.w	r2, [fp]
   1df70:	3b01      	subs	r3, #1
   1df72:	9a08      	ldr	r2, [sp, #32]
   1df74:	9200      	str	r2, [sp, #0]
   1df76:	1c6e      	adds	r6, r5, #1
   1df78:	f8cb 3004 	str.w	r3, [fp, #4]
   1df7c:	f808 0005 	strb.w	r0, [r8, r5]
   1df80:	4633      	mov	r3, r6
   1df82:	4642      	mov	r2, r8
   1df84:	4649      	mov	r1, r9
   1df86:	4638      	mov	r0, r7
   1df88:	f000 faf6 	bl	1e578 <_mbrtowc_r>
   1df8c:	1c43      	adds	r3, r0, #1
   1df8e:	f43f adc7 	beq.w	1db20 <__ssvfiscanf_r+0x2a0>
   1df92:	2800      	cmp	r0, #0
   1df94:	d15d      	bne.n	1e052 <__ssvfiscanf_r+0x7d2>
   1df96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1df98:	2b00      	cmp	r3, #0
   1df9a:	d15e      	bne.n	1e05a <__ssvfiscanf_r+0x7da>
   1df9c:	f8c9 3000 	str.w	r3, [r9]
   1dfa0:	44b2      	add	sl, r6
   1dfa2:	3c01      	subs	r4, #1
   1dfa4:	f109 0904 	add.w	r9, r9, #4
   1dfa8:	2500      	movs	r5, #0
   1dfaa:	f8db 3004 	ldr.w	r3, [fp, #4]
   1dfae:	2b00      	cmp	r3, #0
   1dfb0:	dd2d      	ble.n	1e00e <__ssvfiscanf_r+0x78e>
   1dfb2:	2c00      	cmp	r4, #0
   1dfb4:	d1d1      	bne.n	1df5a <__ssvfiscanf_r+0x6da>
   1dfb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dfb8:	2b00      	cmp	r3, #0
   1dfba:	f43f ae71 	beq.w	1dca0 <__ssvfiscanf_r+0x420>
   1dfbe:	e672      	b.n	1dca6 <__ssvfiscanf_r+0x426>
   1dfc0:	4622      	mov	r2, r4
   1dfc2:	4631      	mov	r1, r6
   1dfc4:	f888 4000 	strb.w	r4, [r8]
   1dfc8:	9b04      	ldr	r3, [sp, #16]
   1dfca:	9c07      	ldr	r4, [sp, #28]
   1dfcc:	4638      	mov	r0, r7
   1dfce:	47a0      	blx	r4
   1dfd0:	06a9      	lsls	r1, r5, #26
   1dfd2:	d438      	bmi.n	1e046 <__ssvfiscanf_r+0x7c6>
   1dfd4:	076a      	lsls	r2, r5, #29
   1dfd6:	f100 80be 	bmi.w	1e156 <__ssvfiscanf_r+0x8d6>
   1dfda:	f015 0201 	ands.w	r2, r5, #1
   1dfde:	d132      	bne.n	1e046 <__ssvfiscanf_r+0x7c6>
   1dfe0:	07ab      	lsls	r3, r5, #30
   1dfe2:	d530      	bpl.n	1e046 <__ssvfiscanf_r+0x7c6>
   1dfe4:	9b07      	ldr	r3, [sp, #28]
   1dfe6:	4619      	mov	r1, r3
   1dfe8:	4b3d      	ldr	r3, [pc, #244]	; (1e0e0 <__ssvfiscanf_r+0x860>)
   1dfea:	4299      	cmp	r1, r3
   1dfec:	4638      	mov	r0, r7
   1dfee:	9b04      	ldr	r3, [sp, #16]
   1dff0:	4631      	mov	r1, r6
   1dff2:	f000 8105 	beq.w	1e200 <__ssvfiscanf_r+0x980>
   1dff6:	f000 febb 	bl	1ed70 <_strtoll_r>
   1dffa:	9a06      	ldr	r2, [sp, #24]
   1dffc:	6813      	ldr	r3, [r2, #0]
   1dffe:	e9c3 0100 	strd	r0, r1, [r3]
   1e002:	3204      	adds	r2, #4
   1e004:	9206      	str	r2, [sp, #24]
   1e006:	9b05      	ldr	r3, [sp, #20]
   1e008:	3301      	adds	r3, #1
   1e00a:	9305      	str	r3, [sp, #20]
   1e00c:	e6f3      	b.n	1ddf6 <__ssvfiscanf_r+0x576>
   1e00e:	4659      	mov	r1, fp
   1e010:	4638      	mov	r0, r7
   1e012:	f7ff fbd7 	bl	1d7c4 <__ssrefill_r>
   1e016:	2800      	cmp	r0, #0
   1e018:	d0cb      	beq.n	1dfb2 <__ssvfiscanf_r+0x732>
   1e01a:	2d00      	cmp	r5, #0
   1e01c:	d0cb      	beq.n	1dfb6 <__ssvfiscanf_r+0x736>
   1e01e:	e57f      	b.n	1db20 <__ssvfiscanf_r+0x2a0>
   1e020:	f425 65b0 	bic.w	r5, r5, #1408	; 0x580
   1e024:	e6c7      	b.n	1ddb6 <__ssvfiscanf_r+0x536>
   1e026:	9a06      	ldr	r2, [sp, #24]
   1e028:	4613      	mov	r3, r2
   1e02a:	3304      	adds	r3, #4
   1e02c:	f8d2 9000 	ldr.w	r9, [r2]
   1e030:	9306      	str	r3, [sp, #24]
   1e032:	2c00      	cmp	r4, #0
   1e034:	d18e      	bne.n	1df54 <__ssvfiscanf_r+0x6d4>
   1e036:	e633      	b.n	1dca0 <__ssvfiscanf_r+0x420>
   1e038:	9a06      	ldr	r2, [sp, #24]
   1e03a:	4613      	mov	r3, r2
   1e03c:	3304      	adds	r3, #4
   1e03e:	f8d2 9000 	ldr.w	r9, [r2]
   1e042:	9306      	str	r3, [sp, #24]
   1e044:	e619      	b.n	1dc7a <__ssvfiscanf_r+0x3fa>
   1e046:	9a06      	ldr	r2, [sp, #24]
   1e048:	6813      	ldr	r3, [r2, #0]
   1e04a:	3204      	adds	r2, #4
   1e04c:	9206      	str	r2, [sp, #24]
   1e04e:	6018      	str	r0, [r3, #0]
   1e050:	e7d9      	b.n	1e006 <__ssvfiscanf_r+0x786>
   1e052:	3002      	adds	r0, #2
   1e054:	d105      	bne.n	1e062 <__ssvfiscanf_r+0x7e2>
   1e056:	4635      	mov	r5, r6
   1e058:	e7a7      	b.n	1dfaa <__ssvfiscanf_r+0x72a>
   1e05a:	44b2      	add	sl, r6
   1e05c:	3c01      	subs	r4, #1
   1e05e:	4605      	mov	r5, r0
   1e060:	e7a3      	b.n	1dfaa <__ssvfiscanf_r+0x72a>
   1e062:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e064:	44b2      	add	sl, r6
   1e066:	3c01      	subs	r4, #1
   1e068:	2b00      	cmp	r3, #0
   1e06a:	d09b      	beq.n	1dfa4 <__ssvfiscanf_r+0x724>
   1e06c:	2500      	movs	r5, #0
   1e06e:	e79c      	b.n	1dfaa <__ssvfiscanf_r+0x72a>
   1e070:	2d00      	cmp	r5, #0
   1e072:	f47f ad36 	bne.w	1dae2 <__ssvfiscanf_r+0x262>
   1e076:	e553      	b.n	1db20 <__ssvfiscanf_r+0x2a0>
   1e078:	9a06      	ldr	r2, [sp, #24]
   1e07a:	6816      	ldr	r6, [r2, #0]
   1e07c:	f102 0804 	add.w	r8, r2, #4
   1e080:	4635      	mov	r5, r6
   1e082:	f000 fa6b 	bl	1e55c <__locale_ctype_ptr>
   1e086:	f8db 2000 	ldr.w	r2, [fp]
   1e08a:	7813      	ldrb	r3, [r2, #0]
   1e08c:	4418      	add	r0, r3
   1e08e:	1c51      	adds	r1, r2, #1
   1e090:	7843      	ldrb	r3, [r0, #1]
   1e092:	0718      	lsls	r0, r3, #28
   1e094:	d415      	bmi.n	1e0c2 <__ssvfiscanf_r+0x842>
   1e096:	f8db 3004 	ldr.w	r3, [fp, #4]
   1e09a:	f8cb 1000 	str.w	r1, [fp]
   1e09e:	3b01      	subs	r3, #1
   1e0a0:	f8cb 3004 	str.w	r3, [fp, #4]
   1e0a4:	7813      	ldrb	r3, [r2, #0]
   1e0a6:	f805 3b01 	strb.w	r3, [r5], #1
   1e0aa:	3c01      	subs	r4, #1
   1e0ac:	d009      	beq.n	1e0c2 <__ssvfiscanf_r+0x842>
   1e0ae:	f8db 3004 	ldr.w	r3, [fp, #4]
   1e0b2:	2b00      	cmp	r3, #0
   1e0b4:	dce5      	bgt.n	1e082 <__ssvfiscanf_r+0x802>
   1e0b6:	4659      	mov	r1, fp
   1e0b8:	4638      	mov	r0, r7
   1e0ba:	f7ff fb83 	bl	1d7c4 <__ssrefill_r>
   1e0be:	2800      	cmp	r0, #0
   1e0c0:	d0df      	beq.n	1e082 <__ssvfiscanf_r+0x802>
   1e0c2:	1bae      	subs	r6, r5, r6
   1e0c4:	9a05      	ldr	r2, [sp, #20]
   1e0c6:	f8cd 8018 	str.w	r8, [sp, #24]
   1e0ca:	44b2      	add	sl, r6
   1e0cc:	9e03      	ldr	r6, [sp, #12]
   1e0ce:	2300      	movs	r3, #0
   1e0d0:	3201      	adds	r2, #1
   1e0d2:	9205      	str	r2, [sp, #20]
   1e0d4:	702b      	strb	r3, [r5, #0]
   1e0d6:	4634      	mov	r4, r6
   1e0d8:	e418      	b.n	1d90c <__ssvfiscanf_r+0x8c>
   1e0da:	bf00      	nop
   1e0dc:	0002140c 	.word	0x0002140c
   1e0e0:	0001cba5 	.word	0x0001cba5
   1e0e4:	9d06      	ldr	r5, [sp, #24]
   1e0e6:	4623      	mov	r3, r4
   1e0e8:	6829      	ldr	r1, [r5, #0]
   1e0ea:	f8cd b000 	str.w	fp, [sp]
   1e0ee:	2201      	movs	r2, #1
   1e0f0:	4638      	mov	r0, r7
   1e0f2:	f7ff fb85 	bl	1d800 <_sfread_r>
   1e0f6:	1d2e      	adds	r6, r5, #4
   1e0f8:	2800      	cmp	r0, #0
   1e0fa:	f43f ad11 	beq.w	1db20 <__ssvfiscanf_r+0x2a0>
   1e0fe:	9b05      	ldr	r3, [sp, #20]
   1e100:	9606      	str	r6, [sp, #24]
   1e102:	9e03      	ldr	r6, [sp, #12]
   1e104:	3301      	adds	r3, #1
   1e106:	4482      	add	sl, r0
   1e108:	9305      	str	r3, [sp, #20]
   1e10a:	4634      	mov	r4, r6
   1e10c:	f7ff bbfe 	b.w	1d90c <__ssvfiscanf_r+0x8c>
   1e110:	f818 1c01 	ldrb.w	r1, [r8, #-1]
   1e114:	465a      	mov	r2, fp
   1e116:	4638      	mov	r0, r7
   1e118:	f7ff fb14 	bl	1d744 <_sungetc_r>
   1e11c:	f108 38ff 	add.w	r8, r8, #4294967295
   1e120:	e662      	b.n	1dde8 <__ssvfiscanf_r+0x568>
   1e122:	4659      	mov	r1, fp
   1e124:	4638      	mov	r0, r7
   1e126:	f7ff fb4d 	bl	1d7c4 <__ssrefill_r>
   1e12a:	2800      	cmp	r0, #0
   1e12c:	f43f ac84 	beq.w	1da38 <__ssvfiscanf_r+0x1b8>
   1e130:	e4f6      	b.n	1db20 <__ssvfiscanf_r+0x2a0>
   1e132:	f896 8002 	ldrb.w	r8, [r6, #2]
   1e136:	f045 0502 	orr.w	r5, r5, #2
   1e13a:	3602      	adds	r6, #2
   1e13c:	f7ff bbf6 	b.w	1d92c <__ssvfiscanf_r+0xac>
   1e140:	9a06      	ldr	r2, [sp, #24]
   1e142:	9e03      	ldr	r6, [sp, #12]
   1e144:	6813      	ldr	r3, [r2, #0]
   1e146:	f8c3 a000 	str.w	sl, [r3]
   1e14a:	4613      	mov	r3, r2
   1e14c:	3304      	adds	r3, #4
   1e14e:	9306      	str	r3, [sp, #24]
   1e150:	4634      	mov	r4, r6
   1e152:	f7ff bbdb 	b.w	1d90c <__ssvfiscanf_r+0x8c>
   1e156:	9a06      	ldr	r2, [sp, #24]
   1e158:	6813      	ldr	r3, [r2, #0]
   1e15a:	3204      	adds	r2, #4
   1e15c:	9206      	str	r2, [sp, #24]
   1e15e:	8018      	strh	r0, [r3, #0]
   1e160:	e751      	b.n	1e006 <__ssvfiscanf_r+0x786>
   1e162:	9a06      	ldr	r2, [sp, #24]
   1e164:	9e03      	ldr	r6, [sp, #12]
   1e166:	6813      	ldr	r3, [r2, #0]
   1e168:	f8a3 a000 	strh.w	sl, [r3]
   1e16c:	4613      	mov	r3, r2
   1e16e:	3304      	adds	r3, #4
   1e170:	9306      	str	r3, [sp, #24]
   1e172:	4634      	mov	r4, r6
   1e174:	f7ff bbca 	b.w	1d90c <__ssvfiscanf_r+0x8c>
   1e178:	f000 f9de 	bl	1e538 <__locale_mb_cur_max>
   1e17c:	4286      	cmp	r6, r0
   1e17e:	f43f accf 	beq.w	1db20 <__ssvfiscanf_r+0x2a0>
   1e182:	e89b 000c 	ldmia.w	fp, {r2, r3}
   1e186:	f812 0b01 	ldrb.w	r0, [r2], #1
   1e18a:	f8cb 2000 	str.w	r2, [fp]
   1e18e:	3b01      	subs	r3, #1
   1e190:	9a08      	ldr	r2, [sp, #32]
   1e192:	9200      	str	r2, [sp, #0]
   1e194:	1c75      	adds	r5, r6, #1
   1e196:	f8cb 3004 	str.w	r3, [fp, #4]
   1e19a:	4649      	mov	r1, r9
   1e19c:	f808 0006 	strb.w	r0, [r8, r6]
   1e1a0:	462b      	mov	r3, r5
   1e1a2:	4642      	mov	r2, r8
   1e1a4:	4638      	mov	r0, r7
   1e1a6:	f000 f9e7 	bl	1e578 <_mbrtowc_r>
   1e1aa:	1c41      	adds	r1, r0, #1
   1e1ac:	f43f acb8 	beq.w	1db20 <__ssvfiscanf_r+0x2a0>
   1e1b0:	b198      	cbz	r0, 1e1da <__ssvfiscanf_r+0x95a>
   1e1b2:	3002      	adds	r0, #2
   1e1b4:	bf08      	it	eq
   1e1b6:	462e      	moveq	r6, r5
   1e1b8:	d12e      	bne.n	1e218 <__ssvfiscanf_r+0x998>
   1e1ba:	f8db 3004 	ldr.w	r3, [fp, #4]
   1e1be:	2b00      	cmp	r3, #0
   1e1c0:	f73f ad5e 	bgt.w	1dc80 <__ssvfiscanf_r+0x400>
   1e1c4:	4659      	mov	r1, fp
   1e1c6:	4638      	mov	r0, r7
   1e1c8:	f7ff fafc 	bl	1d7c4 <__ssrefill_r>
   1e1cc:	2800      	cmp	r0, #0
   1e1ce:	f43f ad57 	beq.w	1dc80 <__ssvfiscanf_r+0x400>
   1e1d2:	2e00      	cmp	r6, #0
   1e1d4:	f47f aca4 	bne.w	1db20 <__ssvfiscanf_r+0x2a0>
   1e1d8:	e55e      	b.n	1dc98 <__ssvfiscanf_r+0x418>
   1e1da:	f8c9 0000 	str.w	r0, [r9]
   1e1de:	f000 f99d 	bl	1e51c <iswspace>
   1e1e2:	4606      	mov	r6, r0
   1e1e4:	b178      	cbz	r0, 1e206 <__ssvfiscanf_r+0x986>
   1e1e6:	2d00      	cmp	r5, #0
   1e1e8:	f43f ad56 	beq.w	1dc98 <__ssvfiscanf_r+0x418>
   1e1ec:	4445      	add	r5, r8
   1e1ee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1e1f2:	465a      	mov	r2, fp
   1e1f4:	4638      	mov	r0, r7
   1e1f6:	f7ff faa5 	bl	1d744 <_sungetc_r>
   1e1fa:	4545      	cmp	r5, r8
   1e1fc:	d1f7      	bne.n	1e1ee <__ssvfiscanf_r+0x96e>
   1e1fe:	e54b      	b.n	1dc98 <__ssvfiscanf_r+0x418>
   1e200:	f000 fea6 	bl	1ef50 <_strtoull_r>
   1e204:	e6f9      	b.n	1dffa <__ssvfiscanf_r+0x77a>
   1e206:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e208:	44aa      	add	sl, r5
   1e20a:	3c01      	subs	r4, #1
   1e20c:	2b00      	cmp	r3, #0
   1e20e:	d1d4      	bne.n	1e1ba <__ssvfiscanf_r+0x93a>
   1e210:	f109 0904 	add.w	r9, r9, #4
   1e214:	461e      	mov	r6, r3
   1e216:	e7d0      	b.n	1e1ba <__ssvfiscanf_r+0x93a>
   1e218:	f8d9 0000 	ldr.w	r0, [r9]
   1e21c:	e7df      	b.n	1e1de <__ssvfiscanf_r+0x95e>
   1e21e:	bf00      	nop

0001e220 <__submore>:
   1e220:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1e224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e228:	460c      	mov	r4, r1
   1e22a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1e22c:	4299      	cmp	r1, r3
   1e22e:	d014      	beq.n	1e25a <__submore+0x3a>
   1e230:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1e232:	0077      	lsls	r7, r6, #1
   1e234:	463a      	mov	r2, r7
   1e236:	f000 fa47 	bl	1e6c8 <_realloc_r>
   1e23a:	4605      	mov	r5, r0
   1e23c:	b340      	cbz	r0, 1e290 <__submore+0x70>
   1e23e:	eb00 0806 	add.w	r8, r0, r6
   1e242:	4632      	mov	r2, r6
   1e244:	4640      	mov	r0, r8
   1e246:	4629      	mov	r1, r5
   1e248:	f7fd f888 	bl	1b35c <memcpy>
   1e24c:	f8c4 8000 	str.w	r8, [r4]
   1e250:	6325      	str	r5, [r4, #48]	; 0x30
   1e252:	6367      	str	r7, [r4, #52]	; 0x34
   1e254:	2000      	movs	r0, #0
   1e256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e25a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1e25e:	f7fd fe5d 	bl	1bf1c <_malloc_r>
   1e262:	b1a8      	cbz	r0, 1e290 <__submore+0x70>
   1e264:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1e268:	6320      	str	r0, [r4, #48]	; 0x30
   1e26a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e26e:	6362      	str	r2, [r4, #52]	; 0x34
   1e270:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1e274:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1e278:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1e27c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1e280:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   1e284:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   1e288:	6020      	str	r0, [r4, #0]
   1e28a:	2000      	movs	r0, #0
   1e28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e290:	f04f 30ff 	mov.w	r0, #4294967295
   1e294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e298 <__env_lock>:
   1e298:	4801      	ldr	r0, [pc, #4]	; (1e2a0 <__env_lock+0x8>)
   1e29a:	f7fd be39 	b.w	1bf10 <__retarget_lock_acquire_recursive>
   1e29e:	bf00      	nop
   1e2a0:	2000a7c8 	.word	0x2000a7c8

0001e2a4 <__env_unlock>:
   1e2a4:	4801      	ldr	r0, [pc, #4]	; (1e2ac <__env_unlock+0x8>)
   1e2a6:	f7fd be37 	b.w	1bf18 <__retarget_lock_release_recursive>
   1e2aa:	bf00      	nop
   1e2ac:	2000a7c8 	.word	0x2000a7c8

0001e2b0 <_malloc_trim_r>:
   1e2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e2b2:	4f24      	ldr	r7, [pc, #144]	; (1e344 <_malloc_trim_r+0x94>)
   1e2b4:	460c      	mov	r4, r1
   1e2b6:	4606      	mov	r6, r0
   1e2b8:	f7fe f932 	bl	1c520 <__malloc_lock>
   1e2bc:	68bb      	ldr	r3, [r7, #8]
   1e2be:	685d      	ldr	r5, [r3, #4]
   1e2c0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   1e2c4:	310f      	adds	r1, #15
   1e2c6:	f025 0503 	bic.w	r5, r5, #3
   1e2ca:	4429      	add	r1, r5
   1e2cc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   1e2d0:	f021 010f 	bic.w	r1, r1, #15
   1e2d4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   1e2d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1e2dc:	db07      	blt.n	1e2ee <_malloc_trim_r+0x3e>
   1e2de:	2100      	movs	r1, #0
   1e2e0:	4630      	mov	r0, r6
   1e2e2:	f7fe f929 	bl	1c538 <_sbrk_r>
   1e2e6:	68bb      	ldr	r3, [r7, #8]
   1e2e8:	442b      	add	r3, r5
   1e2ea:	4298      	cmp	r0, r3
   1e2ec:	d004      	beq.n	1e2f8 <_malloc_trim_r+0x48>
   1e2ee:	4630      	mov	r0, r6
   1e2f0:	f7fe f91c 	bl	1c52c <__malloc_unlock>
   1e2f4:	2000      	movs	r0, #0
   1e2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e2f8:	4261      	negs	r1, r4
   1e2fa:	4630      	mov	r0, r6
   1e2fc:	f7fe f91c 	bl	1c538 <_sbrk_r>
   1e300:	3001      	adds	r0, #1
   1e302:	d00d      	beq.n	1e320 <_malloc_trim_r+0x70>
   1e304:	4b10      	ldr	r3, [pc, #64]	; (1e348 <_malloc_trim_r+0x98>)
   1e306:	68ba      	ldr	r2, [r7, #8]
   1e308:	6819      	ldr	r1, [r3, #0]
   1e30a:	1b2d      	subs	r5, r5, r4
   1e30c:	f045 0501 	orr.w	r5, r5, #1
   1e310:	4630      	mov	r0, r6
   1e312:	1b09      	subs	r1, r1, r4
   1e314:	6055      	str	r5, [r2, #4]
   1e316:	6019      	str	r1, [r3, #0]
   1e318:	f7fe f908 	bl	1c52c <__malloc_unlock>
   1e31c:	2001      	movs	r0, #1
   1e31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e320:	2100      	movs	r1, #0
   1e322:	4630      	mov	r0, r6
   1e324:	f7fe f908 	bl	1c538 <_sbrk_r>
   1e328:	68ba      	ldr	r2, [r7, #8]
   1e32a:	1a83      	subs	r3, r0, r2
   1e32c:	2b0f      	cmp	r3, #15
   1e32e:	ddde      	ble.n	1e2ee <_malloc_trim_r+0x3e>
   1e330:	4c06      	ldr	r4, [pc, #24]	; (1e34c <_malloc_trim_r+0x9c>)
   1e332:	4905      	ldr	r1, [pc, #20]	; (1e348 <_malloc_trim_r+0x98>)
   1e334:	6824      	ldr	r4, [r4, #0]
   1e336:	f043 0301 	orr.w	r3, r3, #1
   1e33a:	1b00      	subs	r0, r0, r4
   1e33c:	6053      	str	r3, [r2, #4]
   1e33e:	6008      	str	r0, [r1, #0]
   1e340:	e7d5      	b.n	1e2ee <_malloc_trim_r+0x3e>
   1e342:	bf00      	nop
   1e344:	200006c4 	.word	0x200006c4
   1e348:	2000a4bc 	.word	0x2000a4bc
   1e34c:	20000acc 	.word	0x20000acc

0001e350 <_free_r>:
   1e350:	2900      	cmp	r1, #0
   1e352:	d044      	beq.n	1e3de <_free_r+0x8e>
   1e354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e358:	460d      	mov	r5, r1
   1e35a:	4680      	mov	r8, r0
   1e35c:	f7fe f8e0 	bl	1c520 <__malloc_lock>
   1e360:	f855 7c04 	ldr.w	r7, [r5, #-4]
   1e364:	4969      	ldr	r1, [pc, #420]	; (1e50c <_free_r+0x1bc>)
   1e366:	f027 0301 	bic.w	r3, r7, #1
   1e36a:	f1a5 0408 	sub.w	r4, r5, #8
   1e36e:	18e2      	adds	r2, r4, r3
   1e370:	688e      	ldr	r6, [r1, #8]
   1e372:	6850      	ldr	r0, [r2, #4]
   1e374:	42b2      	cmp	r2, r6
   1e376:	f020 0003 	bic.w	r0, r0, #3
   1e37a:	d05e      	beq.n	1e43a <_free_r+0xea>
   1e37c:	07fe      	lsls	r6, r7, #31
   1e37e:	6050      	str	r0, [r2, #4]
   1e380:	d40b      	bmi.n	1e39a <_free_r+0x4a>
   1e382:	f855 7c08 	ldr.w	r7, [r5, #-8]
   1e386:	1be4      	subs	r4, r4, r7
   1e388:	f101 0e08 	add.w	lr, r1, #8
   1e38c:	68a5      	ldr	r5, [r4, #8]
   1e38e:	4575      	cmp	r5, lr
   1e390:	443b      	add	r3, r7
   1e392:	d06d      	beq.n	1e470 <_free_r+0x120>
   1e394:	68e7      	ldr	r7, [r4, #12]
   1e396:	60ef      	str	r7, [r5, #12]
   1e398:	60bd      	str	r5, [r7, #8]
   1e39a:	1815      	adds	r5, r2, r0
   1e39c:	686d      	ldr	r5, [r5, #4]
   1e39e:	07ed      	lsls	r5, r5, #31
   1e3a0:	d53e      	bpl.n	1e420 <_free_r+0xd0>
   1e3a2:	f043 0201 	orr.w	r2, r3, #1
   1e3a6:	6062      	str	r2, [r4, #4]
   1e3a8:	50e3      	str	r3, [r4, r3]
   1e3aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1e3ae:	d217      	bcs.n	1e3e0 <_free_r+0x90>
   1e3b0:	08db      	lsrs	r3, r3, #3
   1e3b2:	1c58      	adds	r0, r3, #1
   1e3b4:	109a      	asrs	r2, r3, #2
   1e3b6:	684d      	ldr	r5, [r1, #4]
   1e3b8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   1e3bc:	60a7      	str	r7, [r4, #8]
   1e3be:	2301      	movs	r3, #1
   1e3c0:	4093      	lsls	r3, r2
   1e3c2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   1e3c6:	432b      	orrs	r3, r5
   1e3c8:	3a08      	subs	r2, #8
   1e3ca:	60e2      	str	r2, [r4, #12]
   1e3cc:	604b      	str	r3, [r1, #4]
   1e3ce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   1e3d2:	60fc      	str	r4, [r7, #12]
   1e3d4:	4640      	mov	r0, r8
   1e3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e3da:	f7fe b8a7 	b.w	1c52c <__malloc_unlock>
   1e3de:	4770      	bx	lr
   1e3e0:	0a5a      	lsrs	r2, r3, #9
   1e3e2:	2a04      	cmp	r2, #4
   1e3e4:	d852      	bhi.n	1e48c <_free_r+0x13c>
   1e3e6:	099a      	lsrs	r2, r3, #6
   1e3e8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   1e3ec:	00ff      	lsls	r7, r7, #3
   1e3ee:	f102 0538 	add.w	r5, r2, #56	; 0x38
   1e3f2:	19c8      	adds	r0, r1, r7
   1e3f4:	59ca      	ldr	r2, [r1, r7]
   1e3f6:	3808      	subs	r0, #8
   1e3f8:	4290      	cmp	r0, r2
   1e3fa:	d04f      	beq.n	1e49c <_free_r+0x14c>
   1e3fc:	6851      	ldr	r1, [r2, #4]
   1e3fe:	f021 0103 	bic.w	r1, r1, #3
   1e402:	428b      	cmp	r3, r1
   1e404:	d232      	bcs.n	1e46c <_free_r+0x11c>
   1e406:	6892      	ldr	r2, [r2, #8]
   1e408:	4290      	cmp	r0, r2
   1e40a:	d1f7      	bne.n	1e3fc <_free_r+0xac>
   1e40c:	68c3      	ldr	r3, [r0, #12]
   1e40e:	60a0      	str	r0, [r4, #8]
   1e410:	60e3      	str	r3, [r4, #12]
   1e412:	609c      	str	r4, [r3, #8]
   1e414:	60c4      	str	r4, [r0, #12]
   1e416:	4640      	mov	r0, r8
   1e418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e41c:	f7fe b886 	b.w	1c52c <__malloc_unlock>
   1e420:	6895      	ldr	r5, [r2, #8]
   1e422:	4f3b      	ldr	r7, [pc, #236]	; (1e510 <_free_r+0x1c0>)
   1e424:	42bd      	cmp	r5, r7
   1e426:	4403      	add	r3, r0
   1e428:	d040      	beq.n	1e4ac <_free_r+0x15c>
   1e42a:	68d0      	ldr	r0, [r2, #12]
   1e42c:	60e8      	str	r0, [r5, #12]
   1e42e:	f043 0201 	orr.w	r2, r3, #1
   1e432:	6085      	str	r5, [r0, #8]
   1e434:	6062      	str	r2, [r4, #4]
   1e436:	50e3      	str	r3, [r4, r3]
   1e438:	e7b7      	b.n	1e3aa <_free_r+0x5a>
   1e43a:	07ff      	lsls	r7, r7, #31
   1e43c:	4403      	add	r3, r0
   1e43e:	d407      	bmi.n	1e450 <_free_r+0x100>
   1e440:	f855 2c08 	ldr.w	r2, [r5, #-8]
   1e444:	1aa4      	subs	r4, r4, r2
   1e446:	4413      	add	r3, r2
   1e448:	68a0      	ldr	r0, [r4, #8]
   1e44a:	68e2      	ldr	r2, [r4, #12]
   1e44c:	60c2      	str	r2, [r0, #12]
   1e44e:	6090      	str	r0, [r2, #8]
   1e450:	4a30      	ldr	r2, [pc, #192]	; (1e514 <_free_r+0x1c4>)
   1e452:	6812      	ldr	r2, [r2, #0]
   1e454:	f043 0001 	orr.w	r0, r3, #1
   1e458:	4293      	cmp	r3, r2
   1e45a:	6060      	str	r0, [r4, #4]
   1e45c:	608c      	str	r4, [r1, #8]
   1e45e:	d3b9      	bcc.n	1e3d4 <_free_r+0x84>
   1e460:	4b2d      	ldr	r3, [pc, #180]	; (1e518 <_free_r+0x1c8>)
   1e462:	4640      	mov	r0, r8
   1e464:	6819      	ldr	r1, [r3, #0]
   1e466:	f7ff ff23 	bl	1e2b0 <_malloc_trim_r>
   1e46a:	e7b3      	b.n	1e3d4 <_free_r+0x84>
   1e46c:	4610      	mov	r0, r2
   1e46e:	e7cd      	b.n	1e40c <_free_r+0xbc>
   1e470:	1811      	adds	r1, r2, r0
   1e472:	6849      	ldr	r1, [r1, #4]
   1e474:	07c9      	lsls	r1, r1, #31
   1e476:	d444      	bmi.n	1e502 <_free_r+0x1b2>
   1e478:	6891      	ldr	r1, [r2, #8]
   1e47a:	68d2      	ldr	r2, [r2, #12]
   1e47c:	60ca      	str	r2, [r1, #12]
   1e47e:	4403      	add	r3, r0
   1e480:	f043 0001 	orr.w	r0, r3, #1
   1e484:	6091      	str	r1, [r2, #8]
   1e486:	6060      	str	r0, [r4, #4]
   1e488:	50e3      	str	r3, [r4, r3]
   1e48a:	e7a3      	b.n	1e3d4 <_free_r+0x84>
   1e48c:	2a14      	cmp	r2, #20
   1e48e:	d816      	bhi.n	1e4be <_free_r+0x16e>
   1e490:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   1e494:	00ff      	lsls	r7, r7, #3
   1e496:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   1e49a:	e7aa      	b.n	1e3f2 <_free_r+0xa2>
   1e49c:	10aa      	asrs	r2, r5, #2
   1e49e:	2301      	movs	r3, #1
   1e4a0:	684d      	ldr	r5, [r1, #4]
   1e4a2:	4093      	lsls	r3, r2
   1e4a4:	432b      	orrs	r3, r5
   1e4a6:	604b      	str	r3, [r1, #4]
   1e4a8:	4603      	mov	r3, r0
   1e4aa:	e7b0      	b.n	1e40e <_free_r+0xbe>
   1e4ac:	f043 0201 	orr.w	r2, r3, #1
   1e4b0:	614c      	str	r4, [r1, #20]
   1e4b2:	610c      	str	r4, [r1, #16]
   1e4b4:	60e5      	str	r5, [r4, #12]
   1e4b6:	60a5      	str	r5, [r4, #8]
   1e4b8:	6062      	str	r2, [r4, #4]
   1e4ba:	50e3      	str	r3, [r4, r3]
   1e4bc:	e78a      	b.n	1e3d4 <_free_r+0x84>
   1e4be:	2a54      	cmp	r2, #84	; 0x54
   1e4c0:	d806      	bhi.n	1e4d0 <_free_r+0x180>
   1e4c2:	0b1a      	lsrs	r2, r3, #12
   1e4c4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   1e4c8:	00ff      	lsls	r7, r7, #3
   1e4ca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   1e4ce:	e790      	b.n	1e3f2 <_free_r+0xa2>
   1e4d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e4d4:	d806      	bhi.n	1e4e4 <_free_r+0x194>
   1e4d6:	0bda      	lsrs	r2, r3, #15
   1e4d8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   1e4dc:	00ff      	lsls	r7, r7, #3
   1e4de:	f102 0577 	add.w	r5, r2, #119	; 0x77
   1e4e2:	e786      	b.n	1e3f2 <_free_r+0xa2>
   1e4e4:	f240 5054 	movw	r0, #1364	; 0x554
   1e4e8:	4282      	cmp	r2, r0
   1e4ea:	d806      	bhi.n	1e4fa <_free_r+0x1aa>
   1e4ec:	0c9a      	lsrs	r2, r3, #18
   1e4ee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   1e4f2:	00ff      	lsls	r7, r7, #3
   1e4f4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   1e4f8:	e77b      	b.n	1e3f2 <_free_r+0xa2>
   1e4fa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   1e4fe:	257e      	movs	r5, #126	; 0x7e
   1e500:	e777      	b.n	1e3f2 <_free_r+0xa2>
   1e502:	f043 0101 	orr.w	r1, r3, #1
   1e506:	6061      	str	r1, [r4, #4]
   1e508:	6013      	str	r3, [r2, #0]
   1e50a:	e763      	b.n	1e3d4 <_free_r+0x84>
   1e50c:	200006c4 	.word	0x200006c4
   1e510:	200006cc 	.word	0x200006cc
   1e514:	20000ad0 	.word	0x20000ad0
   1e518:	2000a4ec 	.word	0x2000a4ec

0001e51c <iswspace>:
   1e51c:	28ff      	cmp	r0, #255	; 0xff
   1e51e:	d901      	bls.n	1e524 <iswspace+0x8>
   1e520:	2000      	movs	r0, #0
   1e522:	4770      	bx	lr
   1e524:	b510      	push	{r4, lr}
   1e526:	4604      	mov	r4, r0
   1e528:	f000 f818 	bl	1e55c <__locale_ctype_ptr>
   1e52c:	4420      	add	r0, r4
   1e52e:	7840      	ldrb	r0, [r0, #1]
   1e530:	f000 0008 	and.w	r0, r0, #8
   1e534:	bd10      	pop	{r4, pc}
   1e536:	bf00      	nop

0001e538 <__locale_mb_cur_max>:
   1e538:	4b04      	ldr	r3, [pc, #16]	; (1e54c <__locale_mb_cur_max+0x14>)
   1e53a:	4a05      	ldr	r2, [pc, #20]	; (1e550 <__locale_mb_cur_max+0x18>)
   1e53c:	681b      	ldr	r3, [r3, #0]
   1e53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e540:	2b00      	cmp	r3, #0
   1e542:	bf08      	it	eq
   1e544:	4613      	moveq	r3, r2
   1e546:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1e54a:	4770      	bx	lr
   1e54c:	20000248 	.word	0x20000248
   1e550:	20000ad8 	.word	0x20000ad8

0001e554 <__locale_ctype_ptr_l>:
   1e554:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1e558:	4770      	bx	lr
   1e55a:	bf00      	nop

0001e55c <__locale_ctype_ptr>:
   1e55c:	4b04      	ldr	r3, [pc, #16]	; (1e570 <__locale_ctype_ptr+0x14>)
   1e55e:	4a05      	ldr	r2, [pc, #20]	; (1e574 <__locale_ctype_ptr+0x18>)
   1e560:	681b      	ldr	r3, [r3, #0]
   1e562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e564:	2b00      	cmp	r3, #0
   1e566:	bf08      	it	eq
   1e568:	4613      	moveq	r3, r2
   1e56a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1e56e:	4770      	bx	lr
   1e570:	20000248 	.word	0x20000248
   1e574:	20000ad8 	.word	0x20000ad8

0001e578 <_mbrtowc_r>:
   1e578:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e57a:	b083      	sub	sp, #12
   1e57c:	4607      	mov	r7, r0
   1e57e:	9d08      	ldr	r5, [sp, #32]
   1e580:	b192      	cbz	r2, 1e5a8 <_mbrtowc_r+0x30>
   1e582:	4c11      	ldr	r4, [pc, #68]	; (1e5c8 <_mbrtowc_r+0x50>)
   1e584:	4e11      	ldr	r6, [pc, #68]	; (1e5cc <_mbrtowc_r+0x54>)
   1e586:	6824      	ldr	r4, [r4, #0]
   1e588:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1e58a:	9500      	str	r5, [sp, #0]
   1e58c:	2c00      	cmp	r4, #0
   1e58e:	bf08      	it	eq
   1e590:	4634      	moveq	r4, r6
   1e592:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
   1e596:	47a0      	blx	r4
   1e598:	1c43      	adds	r3, r0, #1
   1e59a:	d103      	bne.n	1e5a4 <_mbrtowc_r+0x2c>
   1e59c:	2200      	movs	r2, #0
   1e59e:	238a      	movs	r3, #138	; 0x8a
   1e5a0:	602a      	str	r2, [r5, #0]
   1e5a2:	603b      	str	r3, [r7, #0]
   1e5a4:	b003      	add	sp, #12
   1e5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5a8:	4b07      	ldr	r3, [pc, #28]	; (1e5c8 <_mbrtowc_r+0x50>)
   1e5aa:	4908      	ldr	r1, [pc, #32]	; (1e5cc <_mbrtowc_r+0x54>)
   1e5ac:	681b      	ldr	r3, [r3, #0]
   1e5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e5b0:	9500      	str	r5, [sp, #0]
   1e5b2:	2b00      	cmp	r3, #0
   1e5b4:	bf08      	it	eq
   1e5b6:	460b      	moveq	r3, r1
   1e5b8:	4614      	mov	r4, r2
   1e5ba:	4621      	mov	r1, r4
   1e5bc:	4a04      	ldr	r2, [pc, #16]	; (1e5d0 <_mbrtowc_r+0x58>)
   1e5be:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   1e5c2:	2301      	movs	r3, #1
   1e5c4:	47a0      	blx	r4
   1e5c6:	e7e7      	b.n	1e598 <_mbrtowc_r+0x20>
   1e5c8:	20000248 	.word	0x20000248
   1e5cc:	20000ad8 	.word	0x20000ad8
   1e5d0:	000213cc 	.word	0x000213cc

0001e5d4 <__ascii_mbtowc>:
   1e5d4:	b082      	sub	sp, #8
   1e5d6:	b149      	cbz	r1, 1e5ec <__ascii_mbtowc+0x18>
   1e5d8:	b15a      	cbz	r2, 1e5f2 <__ascii_mbtowc+0x1e>
   1e5da:	b16b      	cbz	r3, 1e5f8 <__ascii_mbtowc+0x24>
   1e5dc:	7813      	ldrb	r3, [r2, #0]
   1e5de:	600b      	str	r3, [r1, #0]
   1e5e0:	7812      	ldrb	r2, [r2, #0]
   1e5e2:	1c10      	adds	r0, r2, #0
   1e5e4:	bf18      	it	ne
   1e5e6:	2001      	movne	r0, #1
   1e5e8:	b002      	add	sp, #8
   1e5ea:	4770      	bx	lr
   1e5ec:	a901      	add	r1, sp, #4
   1e5ee:	2a00      	cmp	r2, #0
   1e5f0:	d1f3      	bne.n	1e5da <__ascii_mbtowc+0x6>
   1e5f2:	4610      	mov	r0, r2
   1e5f4:	b002      	add	sp, #8
   1e5f6:	4770      	bx	lr
   1e5f8:	f06f 0001 	mvn.w	r0, #1
   1e5fc:	e7f4      	b.n	1e5e8 <__ascii_mbtowc+0x14>
   1e5fe:	bf00      	nop

0001e600 <memmove>:
   1e600:	4288      	cmp	r0, r1
   1e602:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e604:	d90d      	bls.n	1e622 <memmove+0x22>
   1e606:	188b      	adds	r3, r1, r2
   1e608:	4298      	cmp	r0, r3
   1e60a:	d20a      	bcs.n	1e622 <memmove+0x22>
   1e60c:	1884      	adds	r4, r0, r2
   1e60e:	2a00      	cmp	r2, #0
   1e610:	d051      	beq.n	1e6b6 <memmove+0xb6>
   1e612:	4622      	mov	r2, r4
   1e614:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e618:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e61c:	4299      	cmp	r1, r3
   1e61e:	d1f9      	bne.n	1e614 <memmove+0x14>
   1e620:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e622:	2a0f      	cmp	r2, #15
   1e624:	d948      	bls.n	1e6b8 <memmove+0xb8>
   1e626:	ea41 0300 	orr.w	r3, r1, r0
   1e62a:	079b      	lsls	r3, r3, #30
   1e62c:	d146      	bne.n	1e6bc <memmove+0xbc>
   1e62e:	f100 0410 	add.w	r4, r0, #16
   1e632:	f101 0310 	add.w	r3, r1, #16
   1e636:	4615      	mov	r5, r2
   1e638:	f853 6c10 	ldr.w	r6, [r3, #-16]
   1e63c:	f844 6c10 	str.w	r6, [r4, #-16]
   1e640:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   1e644:	f844 6c0c 	str.w	r6, [r4, #-12]
   1e648:	f853 6c08 	ldr.w	r6, [r3, #-8]
   1e64c:	f844 6c08 	str.w	r6, [r4, #-8]
   1e650:	3d10      	subs	r5, #16
   1e652:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1e656:	f844 6c04 	str.w	r6, [r4, #-4]
   1e65a:	2d0f      	cmp	r5, #15
   1e65c:	f103 0310 	add.w	r3, r3, #16
   1e660:	f104 0410 	add.w	r4, r4, #16
   1e664:	d8e8      	bhi.n	1e638 <memmove+0x38>
   1e666:	f1a2 0310 	sub.w	r3, r2, #16
   1e66a:	f023 030f 	bic.w	r3, r3, #15
   1e66e:	f002 0e0f 	and.w	lr, r2, #15
   1e672:	3310      	adds	r3, #16
   1e674:	f1be 0f03 	cmp.w	lr, #3
   1e678:	4419      	add	r1, r3
   1e67a:	4403      	add	r3, r0
   1e67c:	d921      	bls.n	1e6c2 <memmove+0xc2>
   1e67e:	1f1e      	subs	r6, r3, #4
   1e680:	460d      	mov	r5, r1
   1e682:	4674      	mov	r4, lr
   1e684:	3c04      	subs	r4, #4
   1e686:	f855 7b04 	ldr.w	r7, [r5], #4
   1e68a:	f846 7f04 	str.w	r7, [r6, #4]!
   1e68e:	2c03      	cmp	r4, #3
   1e690:	d8f8      	bhi.n	1e684 <memmove+0x84>
   1e692:	f1ae 0404 	sub.w	r4, lr, #4
   1e696:	f024 0403 	bic.w	r4, r4, #3
   1e69a:	3404      	adds	r4, #4
   1e69c:	4421      	add	r1, r4
   1e69e:	4423      	add	r3, r4
   1e6a0:	f002 0203 	and.w	r2, r2, #3
   1e6a4:	b162      	cbz	r2, 1e6c0 <memmove+0xc0>
   1e6a6:	3b01      	subs	r3, #1
   1e6a8:	440a      	add	r2, r1
   1e6aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e6ae:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e6b2:	428a      	cmp	r2, r1
   1e6b4:	d1f9      	bne.n	1e6aa <memmove+0xaa>
   1e6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e6b8:	4603      	mov	r3, r0
   1e6ba:	e7f3      	b.n	1e6a4 <memmove+0xa4>
   1e6bc:	4603      	mov	r3, r0
   1e6be:	e7f2      	b.n	1e6a6 <memmove+0xa6>
   1e6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e6c2:	4672      	mov	r2, lr
   1e6c4:	e7ee      	b.n	1e6a4 <memmove+0xa4>
   1e6c6:	bf00      	nop

0001e6c8 <_realloc_r>:
   1e6c8:	2900      	cmp	r1, #0
   1e6ca:	f000 8095 	beq.w	1e7f8 <_realloc_r+0x130>
   1e6ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6d2:	460d      	mov	r5, r1
   1e6d4:	4616      	mov	r6, r2
   1e6d6:	b083      	sub	sp, #12
   1e6d8:	4680      	mov	r8, r0
   1e6da:	f106 070b 	add.w	r7, r6, #11
   1e6de:	f7fd ff1f 	bl	1c520 <__malloc_lock>
   1e6e2:	f855 ec04 	ldr.w	lr, [r5, #-4]
   1e6e6:	2f16      	cmp	r7, #22
   1e6e8:	f02e 0403 	bic.w	r4, lr, #3
   1e6ec:	f1a5 0908 	sub.w	r9, r5, #8
   1e6f0:	d83c      	bhi.n	1e76c <_realloc_r+0xa4>
   1e6f2:	2210      	movs	r2, #16
   1e6f4:	4617      	mov	r7, r2
   1e6f6:	42be      	cmp	r6, r7
   1e6f8:	d83d      	bhi.n	1e776 <_realloc_r+0xae>
   1e6fa:	4294      	cmp	r4, r2
   1e6fc:	da43      	bge.n	1e786 <_realloc_r+0xbe>
   1e6fe:	4bc4      	ldr	r3, [pc, #784]	; (1ea10 <_realloc_r+0x348>)
   1e700:	6899      	ldr	r1, [r3, #8]
   1e702:	eb09 0004 	add.w	r0, r9, r4
   1e706:	4288      	cmp	r0, r1
   1e708:	f000 80b4 	beq.w	1e874 <_realloc_r+0x1ac>
   1e70c:	6843      	ldr	r3, [r0, #4]
   1e70e:	f023 0101 	bic.w	r1, r3, #1
   1e712:	4401      	add	r1, r0
   1e714:	6849      	ldr	r1, [r1, #4]
   1e716:	07c9      	lsls	r1, r1, #31
   1e718:	d54c      	bpl.n	1e7b4 <_realloc_r+0xec>
   1e71a:	f01e 0f01 	tst.w	lr, #1
   1e71e:	f000 809b 	beq.w	1e858 <_realloc_r+0x190>
   1e722:	4631      	mov	r1, r6
   1e724:	4640      	mov	r0, r8
   1e726:	f7fd fbf9 	bl	1bf1c <_malloc_r>
   1e72a:	4606      	mov	r6, r0
   1e72c:	2800      	cmp	r0, #0
   1e72e:	d03a      	beq.n	1e7a6 <_realloc_r+0xde>
   1e730:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e734:	f023 0301 	bic.w	r3, r3, #1
   1e738:	444b      	add	r3, r9
   1e73a:	f1a0 0208 	sub.w	r2, r0, #8
   1e73e:	429a      	cmp	r2, r3
   1e740:	f000 8121 	beq.w	1e986 <_realloc_r+0x2be>
   1e744:	1f22      	subs	r2, r4, #4
   1e746:	2a24      	cmp	r2, #36	; 0x24
   1e748:	f200 8107 	bhi.w	1e95a <_realloc_r+0x292>
   1e74c:	2a13      	cmp	r2, #19
   1e74e:	f200 80db 	bhi.w	1e908 <_realloc_r+0x240>
   1e752:	4603      	mov	r3, r0
   1e754:	462a      	mov	r2, r5
   1e756:	6811      	ldr	r1, [r2, #0]
   1e758:	6019      	str	r1, [r3, #0]
   1e75a:	6851      	ldr	r1, [r2, #4]
   1e75c:	6059      	str	r1, [r3, #4]
   1e75e:	6892      	ldr	r2, [r2, #8]
   1e760:	609a      	str	r2, [r3, #8]
   1e762:	4629      	mov	r1, r5
   1e764:	4640      	mov	r0, r8
   1e766:	f7ff fdf3 	bl	1e350 <_free_r>
   1e76a:	e01c      	b.n	1e7a6 <_realloc_r+0xde>
   1e76c:	f027 0707 	bic.w	r7, r7, #7
   1e770:	2f00      	cmp	r7, #0
   1e772:	463a      	mov	r2, r7
   1e774:	dabf      	bge.n	1e6f6 <_realloc_r+0x2e>
   1e776:	2600      	movs	r6, #0
   1e778:	230c      	movs	r3, #12
   1e77a:	4630      	mov	r0, r6
   1e77c:	f8c8 3000 	str.w	r3, [r8]
   1e780:	b003      	add	sp, #12
   1e782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e786:	462e      	mov	r6, r5
   1e788:	1be3      	subs	r3, r4, r7
   1e78a:	2b0f      	cmp	r3, #15
   1e78c:	d81e      	bhi.n	1e7cc <_realloc_r+0x104>
   1e78e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e792:	f003 0301 	and.w	r3, r3, #1
   1e796:	4323      	orrs	r3, r4
   1e798:	444c      	add	r4, r9
   1e79a:	f8c9 3004 	str.w	r3, [r9, #4]
   1e79e:	6863      	ldr	r3, [r4, #4]
   1e7a0:	f043 0301 	orr.w	r3, r3, #1
   1e7a4:	6063      	str	r3, [r4, #4]
   1e7a6:	4640      	mov	r0, r8
   1e7a8:	f7fd fec0 	bl	1c52c <__malloc_unlock>
   1e7ac:	4630      	mov	r0, r6
   1e7ae:	b003      	add	sp, #12
   1e7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7b4:	f023 0303 	bic.w	r3, r3, #3
   1e7b8:	18e1      	adds	r1, r4, r3
   1e7ba:	4291      	cmp	r1, r2
   1e7bc:	db1f      	blt.n	1e7fe <_realloc_r+0x136>
   1e7be:	68c3      	ldr	r3, [r0, #12]
   1e7c0:	6882      	ldr	r2, [r0, #8]
   1e7c2:	462e      	mov	r6, r5
   1e7c4:	60d3      	str	r3, [r2, #12]
   1e7c6:	460c      	mov	r4, r1
   1e7c8:	609a      	str	r2, [r3, #8]
   1e7ca:	e7dd      	b.n	1e788 <_realloc_r+0xc0>
   1e7cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1e7d0:	eb09 0107 	add.w	r1, r9, r7
   1e7d4:	f002 0201 	and.w	r2, r2, #1
   1e7d8:	444c      	add	r4, r9
   1e7da:	f043 0301 	orr.w	r3, r3, #1
   1e7de:	4317      	orrs	r7, r2
   1e7e0:	f8c9 7004 	str.w	r7, [r9, #4]
   1e7e4:	604b      	str	r3, [r1, #4]
   1e7e6:	6863      	ldr	r3, [r4, #4]
   1e7e8:	f043 0301 	orr.w	r3, r3, #1
   1e7ec:	3108      	adds	r1, #8
   1e7ee:	6063      	str	r3, [r4, #4]
   1e7f0:	4640      	mov	r0, r8
   1e7f2:	f7ff fdad 	bl	1e350 <_free_r>
   1e7f6:	e7d6      	b.n	1e7a6 <_realloc_r+0xde>
   1e7f8:	4611      	mov	r1, r2
   1e7fa:	f7fd bb8f 	b.w	1bf1c <_malloc_r>
   1e7fe:	f01e 0f01 	tst.w	lr, #1
   1e802:	d18e      	bne.n	1e722 <_realloc_r+0x5a>
   1e804:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e808:	eba9 0a01 	sub.w	sl, r9, r1
   1e80c:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e810:	f021 0103 	bic.w	r1, r1, #3
   1e814:	440b      	add	r3, r1
   1e816:	4423      	add	r3, r4
   1e818:	4293      	cmp	r3, r2
   1e81a:	db25      	blt.n	1e868 <_realloc_r+0x1a0>
   1e81c:	68c2      	ldr	r2, [r0, #12]
   1e81e:	6881      	ldr	r1, [r0, #8]
   1e820:	4656      	mov	r6, sl
   1e822:	60ca      	str	r2, [r1, #12]
   1e824:	6091      	str	r1, [r2, #8]
   1e826:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e82a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e82e:	1f22      	subs	r2, r4, #4
   1e830:	2a24      	cmp	r2, #36	; 0x24
   1e832:	60c1      	str	r1, [r0, #12]
   1e834:	6088      	str	r0, [r1, #8]
   1e836:	f200 8094 	bhi.w	1e962 <_realloc_r+0x29a>
   1e83a:	2a13      	cmp	r2, #19
   1e83c:	d96f      	bls.n	1e91e <_realloc_r+0x256>
   1e83e:	6829      	ldr	r1, [r5, #0]
   1e840:	f8ca 1008 	str.w	r1, [sl, #8]
   1e844:	6869      	ldr	r1, [r5, #4]
   1e846:	f8ca 100c 	str.w	r1, [sl, #12]
   1e84a:	2a1b      	cmp	r2, #27
   1e84c:	f200 80a2 	bhi.w	1e994 <_realloc_r+0x2cc>
   1e850:	3508      	adds	r5, #8
   1e852:	f10a 0210 	add.w	r2, sl, #16
   1e856:	e063      	b.n	1e920 <_realloc_r+0x258>
   1e858:	f855 3c08 	ldr.w	r3, [r5, #-8]
   1e85c:	eba9 0a03 	sub.w	sl, r9, r3
   1e860:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e864:	f021 0103 	bic.w	r1, r1, #3
   1e868:	1863      	adds	r3, r4, r1
   1e86a:	4293      	cmp	r3, r2
   1e86c:	f6ff af59 	blt.w	1e722 <_realloc_r+0x5a>
   1e870:	4656      	mov	r6, sl
   1e872:	e7d8      	b.n	1e826 <_realloc_r+0x15e>
   1e874:	6841      	ldr	r1, [r0, #4]
   1e876:	f021 0b03 	bic.w	fp, r1, #3
   1e87a:	44a3      	add	fp, r4
   1e87c:	f107 0010 	add.w	r0, r7, #16
   1e880:	4583      	cmp	fp, r0
   1e882:	da56      	bge.n	1e932 <_realloc_r+0x26a>
   1e884:	f01e 0f01 	tst.w	lr, #1
   1e888:	f47f af4b 	bne.w	1e722 <_realloc_r+0x5a>
   1e88c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   1e890:	eba9 0a01 	sub.w	sl, r9, r1
   1e894:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e898:	f021 0103 	bic.w	r1, r1, #3
   1e89c:	448b      	add	fp, r1
   1e89e:	4558      	cmp	r0, fp
   1e8a0:	dce2      	bgt.n	1e868 <_realloc_r+0x1a0>
   1e8a2:	4656      	mov	r6, sl
   1e8a4:	f8da 100c 	ldr.w	r1, [sl, #12]
   1e8a8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1e8ac:	1f22      	subs	r2, r4, #4
   1e8ae:	2a24      	cmp	r2, #36	; 0x24
   1e8b0:	60c1      	str	r1, [r0, #12]
   1e8b2:	6088      	str	r0, [r1, #8]
   1e8b4:	f200 808f 	bhi.w	1e9d6 <_realloc_r+0x30e>
   1e8b8:	2a13      	cmp	r2, #19
   1e8ba:	f240 808a 	bls.w	1e9d2 <_realloc_r+0x30a>
   1e8be:	6829      	ldr	r1, [r5, #0]
   1e8c0:	f8ca 1008 	str.w	r1, [sl, #8]
   1e8c4:	6869      	ldr	r1, [r5, #4]
   1e8c6:	f8ca 100c 	str.w	r1, [sl, #12]
   1e8ca:	2a1b      	cmp	r2, #27
   1e8cc:	f200 808a 	bhi.w	1e9e4 <_realloc_r+0x31c>
   1e8d0:	3508      	adds	r5, #8
   1e8d2:	f10a 0210 	add.w	r2, sl, #16
   1e8d6:	6829      	ldr	r1, [r5, #0]
   1e8d8:	6011      	str	r1, [r2, #0]
   1e8da:	6869      	ldr	r1, [r5, #4]
   1e8dc:	6051      	str	r1, [r2, #4]
   1e8de:	68a9      	ldr	r1, [r5, #8]
   1e8e0:	6091      	str	r1, [r2, #8]
   1e8e2:	eb0a 0107 	add.w	r1, sl, r7
   1e8e6:	ebab 0207 	sub.w	r2, fp, r7
   1e8ea:	f042 0201 	orr.w	r2, r2, #1
   1e8ee:	6099      	str	r1, [r3, #8]
   1e8f0:	604a      	str	r2, [r1, #4]
   1e8f2:	f8da 3004 	ldr.w	r3, [sl, #4]
   1e8f6:	f003 0301 	and.w	r3, r3, #1
   1e8fa:	431f      	orrs	r7, r3
   1e8fc:	4640      	mov	r0, r8
   1e8fe:	f8ca 7004 	str.w	r7, [sl, #4]
   1e902:	f7fd fe13 	bl	1c52c <__malloc_unlock>
   1e906:	e751      	b.n	1e7ac <_realloc_r+0xe4>
   1e908:	682b      	ldr	r3, [r5, #0]
   1e90a:	6003      	str	r3, [r0, #0]
   1e90c:	686b      	ldr	r3, [r5, #4]
   1e90e:	6043      	str	r3, [r0, #4]
   1e910:	2a1b      	cmp	r2, #27
   1e912:	d82d      	bhi.n	1e970 <_realloc_r+0x2a8>
   1e914:	f100 0308 	add.w	r3, r0, #8
   1e918:	f105 0208 	add.w	r2, r5, #8
   1e91c:	e71b      	b.n	1e756 <_realloc_r+0x8e>
   1e91e:	4632      	mov	r2, r6
   1e920:	6829      	ldr	r1, [r5, #0]
   1e922:	6011      	str	r1, [r2, #0]
   1e924:	6869      	ldr	r1, [r5, #4]
   1e926:	6051      	str	r1, [r2, #4]
   1e928:	68a9      	ldr	r1, [r5, #8]
   1e92a:	6091      	str	r1, [r2, #8]
   1e92c:	461c      	mov	r4, r3
   1e92e:	46d1      	mov	r9, sl
   1e930:	e72a      	b.n	1e788 <_realloc_r+0xc0>
   1e932:	eb09 0107 	add.w	r1, r9, r7
   1e936:	ebab 0b07 	sub.w	fp, fp, r7
   1e93a:	f04b 0201 	orr.w	r2, fp, #1
   1e93e:	6099      	str	r1, [r3, #8]
   1e940:	604a      	str	r2, [r1, #4]
   1e942:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1e946:	f003 0301 	and.w	r3, r3, #1
   1e94a:	431f      	orrs	r7, r3
   1e94c:	4640      	mov	r0, r8
   1e94e:	f845 7c04 	str.w	r7, [r5, #-4]
   1e952:	f7fd fdeb 	bl	1c52c <__malloc_unlock>
   1e956:	462e      	mov	r6, r5
   1e958:	e728      	b.n	1e7ac <_realloc_r+0xe4>
   1e95a:	4629      	mov	r1, r5
   1e95c:	f7ff fe50 	bl	1e600 <memmove>
   1e960:	e6ff      	b.n	1e762 <_realloc_r+0x9a>
   1e962:	4629      	mov	r1, r5
   1e964:	4630      	mov	r0, r6
   1e966:	461c      	mov	r4, r3
   1e968:	46d1      	mov	r9, sl
   1e96a:	f7ff fe49 	bl	1e600 <memmove>
   1e96e:	e70b      	b.n	1e788 <_realloc_r+0xc0>
   1e970:	68ab      	ldr	r3, [r5, #8]
   1e972:	6083      	str	r3, [r0, #8]
   1e974:	68eb      	ldr	r3, [r5, #12]
   1e976:	60c3      	str	r3, [r0, #12]
   1e978:	2a24      	cmp	r2, #36	; 0x24
   1e97a:	d017      	beq.n	1e9ac <_realloc_r+0x2e4>
   1e97c:	f100 0310 	add.w	r3, r0, #16
   1e980:	f105 0210 	add.w	r2, r5, #16
   1e984:	e6e7      	b.n	1e756 <_realloc_r+0x8e>
   1e986:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1e98a:	f023 0303 	bic.w	r3, r3, #3
   1e98e:	441c      	add	r4, r3
   1e990:	462e      	mov	r6, r5
   1e992:	e6f9      	b.n	1e788 <_realloc_r+0xc0>
   1e994:	68a9      	ldr	r1, [r5, #8]
   1e996:	f8ca 1010 	str.w	r1, [sl, #16]
   1e99a:	68e9      	ldr	r1, [r5, #12]
   1e99c:	f8ca 1014 	str.w	r1, [sl, #20]
   1e9a0:	2a24      	cmp	r2, #36	; 0x24
   1e9a2:	d00c      	beq.n	1e9be <_realloc_r+0x2f6>
   1e9a4:	3510      	adds	r5, #16
   1e9a6:	f10a 0218 	add.w	r2, sl, #24
   1e9aa:	e7b9      	b.n	1e920 <_realloc_r+0x258>
   1e9ac:	692b      	ldr	r3, [r5, #16]
   1e9ae:	6103      	str	r3, [r0, #16]
   1e9b0:	696b      	ldr	r3, [r5, #20]
   1e9b2:	6143      	str	r3, [r0, #20]
   1e9b4:	f105 0218 	add.w	r2, r5, #24
   1e9b8:	f100 0318 	add.w	r3, r0, #24
   1e9bc:	e6cb      	b.n	1e756 <_realloc_r+0x8e>
   1e9be:	692a      	ldr	r2, [r5, #16]
   1e9c0:	f8ca 2018 	str.w	r2, [sl, #24]
   1e9c4:	696a      	ldr	r2, [r5, #20]
   1e9c6:	f8ca 201c 	str.w	r2, [sl, #28]
   1e9ca:	3518      	adds	r5, #24
   1e9cc:	f10a 0220 	add.w	r2, sl, #32
   1e9d0:	e7a6      	b.n	1e920 <_realloc_r+0x258>
   1e9d2:	4632      	mov	r2, r6
   1e9d4:	e77f      	b.n	1e8d6 <_realloc_r+0x20e>
   1e9d6:	4629      	mov	r1, r5
   1e9d8:	4630      	mov	r0, r6
   1e9da:	9301      	str	r3, [sp, #4]
   1e9dc:	f7ff fe10 	bl	1e600 <memmove>
   1e9e0:	9b01      	ldr	r3, [sp, #4]
   1e9e2:	e77e      	b.n	1e8e2 <_realloc_r+0x21a>
   1e9e4:	68a9      	ldr	r1, [r5, #8]
   1e9e6:	f8ca 1010 	str.w	r1, [sl, #16]
   1e9ea:	68e9      	ldr	r1, [r5, #12]
   1e9ec:	f8ca 1014 	str.w	r1, [sl, #20]
   1e9f0:	2a24      	cmp	r2, #36	; 0x24
   1e9f2:	d003      	beq.n	1e9fc <_realloc_r+0x334>
   1e9f4:	3510      	adds	r5, #16
   1e9f6:	f10a 0218 	add.w	r2, sl, #24
   1e9fa:	e76c      	b.n	1e8d6 <_realloc_r+0x20e>
   1e9fc:	692a      	ldr	r2, [r5, #16]
   1e9fe:	f8ca 2018 	str.w	r2, [sl, #24]
   1ea02:	696a      	ldr	r2, [r5, #20]
   1ea04:	f8ca 201c 	str.w	r2, [sl, #28]
   1ea08:	3518      	adds	r5, #24
   1ea0a:	f10a 0220 	add.w	r2, sl, #32
   1ea0e:	e762      	b.n	1e8d6 <_realloc_r+0x20e>
   1ea10:	200006c4 	.word	0x200006c4

0001ea14 <__sccl>:
   1ea14:	b470      	push	{r4, r5, r6}
   1ea16:	780c      	ldrb	r4, [r1, #0]
   1ea18:	2c5e      	cmp	r4, #94	; 0x5e
   1ea1a:	d02f      	beq.n	1ea7c <__sccl+0x68>
   1ea1c:	2200      	movs	r2, #0
   1ea1e:	1c4d      	adds	r5, r1, #1
   1ea20:	4616      	mov	r6, r2
   1ea22:	1e43      	subs	r3, r0, #1
   1ea24:	f100 01ff 	add.w	r1, r0, #255	; 0xff
   1ea28:	f803 2f01 	strb.w	r2, [r3, #1]!
   1ea2c:	428b      	cmp	r3, r1
   1ea2e:	d1fb      	bne.n	1ea28 <__sccl+0x14>
   1ea30:	b174      	cbz	r4, 1ea50 <__sccl+0x3c>
   1ea32:	f086 0201 	eor.w	r2, r6, #1
   1ea36:	5502      	strb	r2, [r0, r4]
   1ea38:	1c6e      	adds	r6, r5, #1
   1ea3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1ea3e:	2b2d      	cmp	r3, #45	; 0x2d
   1ea40:	4631      	mov	r1, r6
   1ea42:	d00d      	beq.n	1ea60 <__sccl+0x4c>
   1ea44:	2b5d      	cmp	r3, #93	; 0x5d
   1ea46:	d004      	beq.n	1ea52 <__sccl+0x3e>
   1ea48:	b133      	cbz	r3, 1ea58 <__sccl+0x44>
   1ea4a:	461c      	mov	r4, r3
   1ea4c:	4635      	mov	r5, r6
   1ea4e:	e7f2      	b.n	1ea36 <__sccl+0x22>
   1ea50:	1e69      	subs	r1, r5, #1
   1ea52:	4608      	mov	r0, r1
   1ea54:	bc70      	pop	{r4, r5, r6}
   1ea56:	4770      	bx	lr
   1ea58:	4629      	mov	r1, r5
   1ea5a:	4608      	mov	r0, r1
   1ea5c:	bc70      	pop	{r4, r5, r6}
   1ea5e:	4770      	bx	lr
   1ea60:	7869      	ldrb	r1, [r5, #1]
   1ea62:	295d      	cmp	r1, #93	; 0x5d
   1ea64:	d0f1      	beq.n	1ea4a <__sccl+0x36>
   1ea66:	428c      	cmp	r4, r1
   1ea68:	dcef      	bgt.n	1ea4a <__sccl+0x36>
   1ea6a:	3502      	adds	r5, #2
   1ea6c:	1903      	adds	r3, r0, r4
   1ea6e:	3401      	adds	r4, #1
   1ea70:	42a1      	cmp	r1, r4
   1ea72:	f803 2f01 	strb.w	r2, [r3, #1]!
   1ea76:	dcfa      	bgt.n	1ea6e <__sccl+0x5a>
   1ea78:	3602      	adds	r6, #2
   1ea7a:	e7de      	b.n	1ea3a <__sccl+0x26>
   1ea7c:	2201      	movs	r2, #1
   1ea7e:	784c      	ldrb	r4, [r1, #1]
   1ea80:	4616      	mov	r6, r2
   1ea82:	1c8d      	adds	r5, r1, #2
   1ea84:	e7cd      	b.n	1ea22 <__sccl+0xe>
   1ea86:	bf00      	nop

0001ea88 <_strtol_l.isra.0>:
   1ea88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea8c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1ea90:	460f      	mov	r7, r1
   1ea92:	4680      	mov	r8, r0
   1ea94:	4616      	mov	r6, r2
   1ea96:	461d      	mov	r5, r3
   1ea98:	468a      	mov	sl, r1
   1ea9a:	e000      	b.n	1ea9e <_strtol_l.isra.0+0x16>
   1ea9c:	46a2      	mov	sl, r4
   1ea9e:	4654      	mov	r4, sl
   1eaa0:	4648      	mov	r0, r9
   1eaa2:	f814 bb01 	ldrb.w	fp, [r4], #1
   1eaa6:	f7ff fd55 	bl	1e554 <__locale_ctype_ptr_l>
   1eaaa:	4458      	add	r0, fp
   1eaac:	7842      	ldrb	r2, [r0, #1]
   1eaae:	f012 0208 	ands.w	r2, r2, #8
   1eab2:	d1f3      	bne.n	1ea9c <_strtol_l.isra.0+0x14>
   1eab4:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   1eab8:	d04f      	beq.n	1eb5a <_strtol_l.isra.0+0xd2>
   1eaba:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   1eabe:	bf04      	itt	eq
   1eac0:	f894 b000 	ldrbeq.w	fp, [r4]
   1eac4:	f10a 0402 	addeq.w	r4, sl, #2
   1eac8:	b11d      	cbz	r5, 1ead2 <_strtol_l.isra.0+0x4a>
   1eaca:	2d10      	cmp	r5, #16
   1eacc:	d056      	beq.n	1eb7c <_strtol_l.isra.0+0xf4>
   1eace:	46ac      	mov	ip, r5
   1ead0:	e004      	b.n	1eadc <_strtol_l.isra.0+0x54>
   1ead2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1ead6:	d060      	beq.n	1eb9a <_strtol_l.isra.0+0x112>
   1ead8:	250a      	movs	r5, #10
   1eada:	46ac      	mov	ip, r5
   1eadc:	2a00      	cmp	r2, #0
   1eade:	bf0c      	ite	eq
   1eae0:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   1eae4:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   1eae8:	2100      	movs	r1, #0
   1eaea:	fbb9 fefc 	udiv	lr, r9, ip
   1eaee:	4608      	mov	r0, r1
   1eaf0:	fb0c 9a1e 	mls	sl, ip, lr, r9
   1eaf4:	e005      	b.n	1eb02 <_strtol_l.isra.0+0x7a>
   1eaf6:	d029      	beq.n	1eb4c <_strtol_l.isra.0+0xc4>
   1eaf8:	fb0c 3000 	mla	r0, ip, r0, r3
   1eafc:	2101      	movs	r1, #1
   1eafe:	f814 bb01 	ldrb.w	fp, [r4], #1
   1eb02:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   1eb06:	2b09      	cmp	r3, #9
   1eb08:	d905      	bls.n	1eb16 <_strtol_l.isra.0+0x8e>
   1eb0a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   1eb0e:	2b19      	cmp	r3, #25
   1eb10:	d80b      	bhi.n	1eb2a <_strtol_l.isra.0+0xa2>
   1eb12:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   1eb16:	429d      	cmp	r5, r3
   1eb18:	dd0f      	ble.n	1eb3a <_strtol_l.isra.0+0xb2>
   1eb1a:	f1b1 3fff 	cmp.w	r1, #4294967295
   1eb1e:	d0ee      	beq.n	1eafe <_strtol_l.isra.0+0x76>
   1eb20:	4586      	cmp	lr, r0
   1eb22:	d2e8      	bcs.n	1eaf6 <_strtol_l.isra.0+0x6e>
   1eb24:	f04f 31ff 	mov.w	r1, #4294967295
   1eb28:	e7e9      	b.n	1eafe <_strtol_l.isra.0+0x76>
   1eb2a:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   1eb2e:	2b19      	cmp	r3, #25
   1eb30:	d803      	bhi.n	1eb3a <_strtol_l.isra.0+0xb2>
   1eb32:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   1eb36:	429d      	cmp	r5, r3
   1eb38:	dcef      	bgt.n	1eb1a <_strtol_l.isra.0+0x92>
   1eb3a:	1c4b      	adds	r3, r1, #1
   1eb3c:	d013      	beq.n	1eb66 <_strtol_l.isra.0+0xde>
   1eb3e:	b102      	cbz	r2, 1eb42 <_strtol_l.isra.0+0xba>
   1eb40:	4240      	negs	r0, r0
   1eb42:	b146      	cbz	r6, 1eb56 <_strtol_l.isra.0+0xce>
   1eb44:	b9c1      	cbnz	r1, 1eb78 <_strtol_l.isra.0+0xf0>
   1eb46:	6037      	str	r7, [r6, #0]
   1eb48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb4c:	459a      	cmp	sl, r3
   1eb4e:	dad3      	bge.n	1eaf8 <_strtol_l.isra.0+0x70>
   1eb50:	f04f 31ff 	mov.w	r1, #4294967295
   1eb54:	e7d3      	b.n	1eafe <_strtol_l.isra.0+0x76>
   1eb56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb5a:	f894 b000 	ldrb.w	fp, [r4]
   1eb5e:	2201      	movs	r2, #1
   1eb60:	f10a 0402 	add.w	r4, sl, #2
   1eb64:	e7b0      	b.n	1eac8 <_strtol_l.isra.0+0x40>
   1eb66:	2322      	movs	r3, #34	; 0x22
   1eb68:	f8c8 3000 	str.w	r3, [r8]
   1eb6c:	b1ee      	cbz	r6, 1ebaa <_strtol_l.isra.0+0x122>
   1eb6e:	1e67      	subs	r7, r4, #1
   1eb70:	4648      	mov	r0, r9
   1eb72:	6037      	str	r7, [r6, #0]
   1eb74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb78:	4681      	mov	r9, r0
   1eb7a:	e7f8      	b.n	1eb6e <_strtol_l.isra.0+0xe6>
   1eb7c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1eb80:	d1a5      	bne.n	1eace <_strtol_l.isra.0+0x46>
   1eb82:	7823      	ldrb	r3, [r4, #0]
   1eb84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1eb88:	2b58      	cmp	r3, #88	; 0x58
   1eb8a:	d1a0      	bne.n	1eace <_strtol_l.isra.0+0x46>
   1eb8c:	f04f 0c10 	mov.w	ip, #16
   1eb90:	f894 b001 	ldrb.w	fp, [r4, #1]
   1eb94:	4665      	mov	r5, ip
   1eb96:	3402      	adds	r4, #2
   1eb98:	e7a0      	b.n	1eadc <_strtol_l.isra.0+0x54>
   1eb9a:	7823      	ldrb	r3, [r4, #0]
   1eb9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1eba0:	2b58      	cmp	r3, #88	; 0x58
   1eba2:	d0f3      	beq.n	1eb8c <_strtol_l.isra.0+0x104>
   1eba4:	2508      	movs	r5, #8
   1eba6:	46ac      	mov	ip, r5
   1eba8:	e798      	b.n	1eadc <_strtol_l.isra.0+0x54>
   1ebaa:	4648      	mov	r0, r9
   1ebac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ebb0 <_strtol_r>:
   1ebb0:	b530      	push	{r4, r5, lr}
   1ebb2:	4c06      	ldr	r4, [pc, #24]	; (1ebcc <_strtol_r+0x1c>)
   1ebb4:	4d06      	ldr	r5, [pc, #24]	; (1ebd0 <_strtol_r+0x20>)
   1ebb6:	6824      	ldr	r4, [r4, #0]
   1ebb8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1ebba:	b083      	sub	sp, #12
   1ebbc:	2c00      	cmp	r4, #0
   1ebbe:	bf08      	it	eq
   1ebc0:	462c      	moveq	r4, r5
   1ebc2:	9400      	str	r4, [sp, #0]
   1ebc4:	f7ff ff60 	bl	1ea88 <_strtol_l.isra.0>
   1ebc8:	b003      	add	sp, #12
   1ebca:	bd30      	pop	{r4, r5, pc}
   1ebcc:	20000248 	.word	0x20000248
   1ebd0:	20000ad8 	.word	0x20000ad8

0001ebd4 <_strtoll_l.isra.0>:
   1ebd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebd8:	b085      	sub	sp, #20
   1ebda:	461e      	mov	r6, r3
   1ebdc:	9102      	str	r1, [sp, #8]
   1ebde:	9003      	str	r0, [sp, #12]
   1ebe0:	9200      	str	r2, [sp, #0]
   1ebe2:	4688      	mov	r8, r1
   1ebe4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1ebe6:	e000      	b.n	1ebea <_strtoll_l.isra.0+0x16>
   1ebe8:	46a8      	mov	r8, r5
   1ebea:	4645      	mov	r5, r8
   1ebec:	4638      	mov	r0, r7
   1ebee:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ebf2:	f7ff fcaf 	bl	1e554 <__locale_ctype_ptr_l>
   1ebf6:	4420      	add	r0, r4
   1ebf8:	7843      	ldrb	r3, [r0, #1]
   1ebfa:	f013 0308 	ands.w	r3, r3, #8
   1ebfe:	d1f3      	bne.n	1ebe8 <_strtoll_l.isra.0+0x14>
   1ec00:	2c2d      	cmp	r4, #45	; 0x2d
   1ec02:	f000 8081 	beq.w	1ed08 <_strtoll_l.isra.0+0x134>
   1ec06:	2c2b      	cmp	r4, #43	; 0x2b
   1ec08:	bf03      	ittte	eq
   1ec0a:	782c      	ldrbeq	r4, [r5, #0]
   1ec0c:	9301      	streq	r3, [sp, #4]
   1ec0e:	f108 0502 	addeq.w	r5, r8, #2
   1ec12:	9301      	strne	r3, [sp, #4]
   1ec14:	b166      	cbz	r6, 1ec30 <_strtoll_l.isra.0+0x5c>
   1ec16:	2e10      	cmp	r6, #16
   1ec18:	f000 8088 	beq.w	1ed2c <_strtoll_l.isra.0+0x158>
   1ec1c:	9b01      	ldr	r3, [sp, #4]
   1ec1e:	46b0      	mov	r8, r6
   1ec20:	ea4f 79e6 	mov.w	r9, r6, asr #31
   1ec24:	b97b      	cbnz	r3, 1ec46 <_strtoll_l.isra.0+0x72>
   1ec26:	f04f 3aff 	mov.w	sl, #4294967295
   1ec2a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
   1ec2e:	e00e      	b.n	1ec4e <_strtoll_l.isra.0+0x7a>
   1ec30:	2c30      	cmp	r4, #48	; 0x30
   1ec32:	f000 808a 	beq.w	1ed4a <_strtoll_l.isra.0+0x176>
   1ec36:	f04f 080a 	mov.w	r8, #10
   1ec3a:	f04f 0900 	mov.w	r9, #0
   1ec3e:	260a      	movs	r6, #10
   1ec40:	9b01      	ldr	r3, [sp, #4]
   1ec42:	2b00      	cmp	r3, #0
   1ec44:	d0ef      	beq.n	1ec26 <_strtoll_l.isra.0+0x52>
   1ec46:	f04f 0a00 	mov.w	sl, #0
   1ec4a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
   1ec4e:	4642      	mov	r2, r8
   1ec50:	464b      	mov	r3, r9
   1ec52:	4650      	mov	r0, sl
   1ec54:	4639      	mov	r1, r7
   1ec56:	f7fc f885 	bl	1ad64 <__aeabi_uldivmod>
   1ec5a:	464b      	mov	r3, r9
   1ec5c:	4693      	mov	fp, r2
   1ec5e:	4650      	mov	r0, sl
   1ec60:	4642      	mov	r2, r8
   1ec62:	4639      	mov	r1, r7
   1ec64:	f7fc f87e 	bl	1ad64 <__aeabi_uldivmod>
   1ec68:	f04f 0e00 	mov.w	lr, #0
   1ec6c:	2200      	movs	r2, #0
   1ec6e:	2300      	movs	r3, #0
   1ec70:	e00f      	b.n	1ec92 <_strtoll_l.isra.0+0xbe>
   1ec72:	d044      	beq.n	1ecfe <_strtoll_l.isra.0+0x12a>
   1ec74:	fb02 f409 	mul.w	r4, r2, r9
   1ec78:	fb08 4403 	mla	r4, r8, r3, r4
   1ec7c:	fba2 2308 	umull	r2, r3, r2, r8
   1ec80:	4423      	add	r3, r4
   1ec82:	eb12 020c 	adds.w	r2, r2, ip
   1ec86:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
   1ec8a:	f04f 0e01 	mov.w	lr, #1
   1ec8e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ec92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   1ec96:	f1bc 0f09 	cmp.w	ip, #9
   1ec9a:	d906      	bls.n	1ecaa <_strtoll_l.isra.0+0xd6>
   1ec9c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   1eca0:	f1bc 0f19 	cmp.w	ip, #25
   1eca4:	d80d      	bhi.n	1ecc2 <_strtoll_l.isra.0+0xee>
   1eca6:	f1a4 0c37 	sub.w	ip, r4, #55	; 0x37
   1ecaa:	4566      	cmp	r6, ip
   1ecac:	dd12      	ble.n	1ecd4 <_strtoll_l.isra.0+0x100>
   1ecae:	f1be 3fff 	cmp.w	lr, #4294967295
   1ecb2:	d0ec      	beq.n	1ec8e <_strtoll_l.isra.0+0xba>
   1ecb4:	4299      	cmp	r1, r3
   1ecb6:	bf08      	it	eq
   1ecb8:	4290      	cmpeq	r0, r2
   1ecba:	d2da      	bcs.n	1ec72 <_strtoll_l.isra.0+0x9e>
   1ecbc:	f04f 3eff 	mov.w	lr, #4294967295
   1ecc0:	e7e5      	b.n	1ec8e <_strtoll_l.isra.0+0xba>
   1ecc2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   1ecc6:	f1bc 0f19 	cmp.w	ip, #25
   1ecca:	d803      	bhi.n	1ecd4 <_strtoll_l.isra.0+0x100>
   1eccc:	f1a4 0c57 	sub.w	ip, r4, #87	; 0x57
   1ecd0:	4566      	cmp	r6, ip
   1ecd2:	dcec      	bgt.n	1ecae <_strtoll_l.isra.0+0xda>
   1ecd4:	f1be 3fff 	cmp.w	lr, #4294967295
   1ecd8:	d01c      	beq.n	1ed14 <_strtoll_l.isra.0+0x140>
   1ecda:	9901      	ldr	r1, [sp, #4]
   1ecdc:	b111      	cbz	r1, 1ece4 <_strtoll_l.isra.0+0x110>
   1ecde:	4252      	negs	r2, r2
   1ece0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ece4:	9900      	ldr	r1, [sp, #0]
   1ece6:	b129      	cbz	r1, 1ecf4 <_strtoll_l.isra.0+0x120>
   1ece8:	f1be 0f00 	cmp.w	lr, #0
   1ecec:	d11b      	bne.n	1ed26 <_strtoll_l.isra.0+0x152>
   1ecee:	9d02      	ldr	r5, [sp, #8]
   1ecf0:	9900      	ldr	r1, [sp, #0]
   1ecf2:	600d      	str	r5, [r1, #0]
   1ecf4:	4610      	mov	r0, r2
   1ecf6:	4619      	mov	r1, r3
   1ecf8:	b005      	add	sp, #20
   1ecfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecfe:	45e3      	cmp	fp, ip
   1ed00:	dab8      	bge.n	1ec74 <_strtoll_l.isra.0+0xa0>
   1ed02:	f04f 3eff 	mov.w	lr, #4294967295
   1ed06:	e7c2      	b.n	1ec8e <_strtoll_l.isra.0+0xba>
   1ed08:	2301      	movs	r3, #1
   1ed0a:	782c      	ldrb	r4, [r5, #0]
   1ed0c:	9301      	str	r3, [sp, #4]
   1ed0e:	f108 0502 	add.w	r5, r8, #2
   1ed12:	e77f      	b.n	1ec14 <_strtoll_l.isra.0+0x40>
   1ed14:	9a03      	ldr	r2, [sp, #12]
   1ed16:	2322      	movs	r3, #34	; 0x22
   1ed18:	6013      	str	r3, [r2, #0]
   1ed1a:	9b00      	ldr	r3, [sp, #0]
   1ed1c:	b32b      	cbz	r3, 1ed6a <_strtoll_l.isra.0+0x196>
   1ed1e:	4652      	mov	r2, sl
   1ed20:	463b      	mov	r3, r7
   1ed22:	3d01      	subs	r5, #1
   1ed24:	e7e4      	b.n	1ecf0 <_strtoll_l.isra.0+0x11c>
   1ed26:	4692      	mov	sl, r2
   1ed28:	461f      	mov	r7, r3
   1ed2a:	e7f8      	b.n	1ed1e <_strtoll_l.isra.0+0x14a>
   1ed2c:	2c30      	cmp	r4, #48	; 0x30
   1ed2e:	d117      	bne.n	1ed60 <_strtoll_l.isra.0+0x18c>
   1ed30:	782b      	ldrb	r3, [r5, #0]
   1ed32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ed36:	2b58      	cmp	r3, #88	; 0x58
   1ed38:	d112      	bne.n	1ed60 <_strtoll_l.isra.0+0x18c>
   1ed3a:	786c      	ldrb	r4, [r5, #1]
   1ed3c:	f04f 0810 	mov.w	r8, #16
   1ed40:	f04f 0900 	mov.w	r9, #0
   1ed44:	3502      	adds	r5, #2
   1ed46:	2610      	movs	r6, #16
   1ed48:	e77a      	b.n	1ec40 <_strtoll_l.isra.0+0x6c>
   1ed4a:	782b      	ldrb	r3, [r5, #0]
   1ed4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ed50:	2b58      	cmp	r3, #88	; 0x58
   1ed52:	d0f2      	beq.n	1ed3a <_strtoll_l.isra.0+0x166>
   1ed54:	f04f 0808 	mov.w	r8, #8
   1ed58:	f04f 0900 	mov.w	r9, #0
   1ed5c:	2608      	movs	r6, #8
   1ed5e:	e76f      	b.n	1ec40 <_strtoll_l.isra.0+0x6c>
   1ed60:	f04f 0810 	mov.w	r8, #16
   1ed64:	f04f 0900 	mov.w	r9, #0
   1ed68:	e76a      	b.n	1ec40 <_strtoll_l.isra.0+0x6c>
   1ed6a:	4652      	mov	r2, sl
   1ed6c:	463b      	mov	r3, r7
   1ed6e:	e7c1      	b.n	1ecf4 <_strtoll_l.isra.0+0x120>

0001ed70 <_strtoll_r>:
   1ed70:	b530      	push	{r4, r5, lr}
   1ed72:	4c06      	ldr	r4, [pc, #24]	; (1ed8c <_strtoll_r+0x1c>)
   1ed74:	4d06      	ldr	r5, [pc, #24]	; (1ed90 <_strtoll_r+0x20>)
   1ed76:	6824      	ldr	r4, [r4, #0]
   1ed78:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1ed7a:	b083      	sub	sp, #12
   1ed7c:	2c00      	cmp	r4, #0
   1ed7e:	bf08      	it	eq
   1ed80:	462c      	moveq	r4, r5
   1ed82:	9400      	str	r4, [sp, #0]
   1ed84:	f7ff ff26 	bl	1ebd4 <_strtoll_l.isra.0>
   1ed88:	b003      	add	sp, #12
   1ed8a:	bd30      	pop	{r4, r5, pc}
   1ed8c:	20000248 	.word	0x20000248
   1ed90:	20000ad8 	.word	0x20000ad8

0001ed94 <_strtoull_l.isra.0>:
   1ed94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed98:	b085      	sub	sp, #20
   1ed9a:	4693      	mov	fp, r2
   1ed9c:	9102      	str	r1, [sp, #8]
   1ed9e:	9003      	str	r0, [sp, #12]
   1eda0:	469a      	mov	sl, r3
   1eda2:	460f      	mov	r7, r1
   1eda4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1eda6:	e000      	b.n	1edaa <_strtoull_l.isra.0+0x16>
   1eda8:	462f      	mov	r7, r5
   1edaa:	463d      	mov	r5, r7
   1edac:	4630      	mov	r0, r6
   1edae:	f815 4b01 	ldrb.w	r4, [r5], #1
   1edb2:	f7ff fbcf 	bl	1e554 <__locale_ctype_ptr_l>
   1edb6:	4420      	add	r0, r4
   1edb8:	7843      	ldrb	r3, [r0, #1]
   1edba:	f013 0308 	ands.w	r3, r3, #8
   1edbe:	d1f3      	bne.n	1eda8 <_strtoull_l.isra.0+0x14>
   1edc0:	2c2d      	cmp	r4, #45	; 0x2d
   1edc2:	f000 8089 	beq.w	1eed8 <_strtoull_l.isra.0+0x144>
   1edc6:	2c2b      	cmp	r4, #43	; 0x2b
   1edc8:	bf03      	ittte	eq
   1edca:	782c      	ldrbeq	r4, [r5, #0]
   1edcc:	9301      	streq	r3, [sp, #4]
   1edce:	1cbd      	addeq	r5, r7, #2
   1edd0:	9301      	strne	r3, [sp, #4]
   1edd2:	f1ba 0f00 	cmp.w	sl, #0
   1edd6:	d019      	beq.n	1ee0c <_strtoull_l.isra.0+0x78>
   1edd8:	f1ba 0f10 	cmp.w	sl, #16
   1eddc:	f000 8081 	beq.w	1eee2 <_strtoull_l.isra.0+0x14e>
   1ede0:	46d0      	mov	r8, sl
   1ede2:	ea4f 79ea 	mov.w	r9, sl, asr #31
   1ede6:	4642      	mov	r2, r8
   1ede8:	464b      	mov	r3, r9
   1edea:	f04f 30ff 	mov.w	r0, #4294967295
   1edee:	f04f 31ff 	mov.w	r1, #4294967295
   1edf2:	f7fb ffb7 	bl	1ad64 <__aeabi_uldivmod>
   1edf6:	4642      	mov	r2, r8
   1edf8:	4606      	mov	r6, r0
   1edfa:	460f      	mov	r7, r1
   1edfc:	464b      	mov	r3, r9
   1edfe:	f04f 30ff 	mov.w	r0, #4294967295
   1ee02:	f04f 31ff 	mov.w	r1, #4294967295
   1ee06:	f7fb ffad 	bl	1ad64 <__aeabi_uldivmod>
   1ee0a:	e00b      	b.n	1ee24 <_strtoull_l.isra.0+0x90>
   1ee0c:	2c30      	cmp	r4, #48	; 0x30
   1ee0e:	d07d      	beq.n	1ef0c <_strtoull_l.isra.0+0x178>
   1ee10:	4f4e      	ldr	r7, [pc, #312]	; (1ef4c <_strtoull_l.isra.0+0x1b8>)
   1ee12:	2205      	movs	r2, #5
   1ee14:	f04f 3699 	mov.w	r6, #2576980377	; 0x99999999
   1ee18:	f04f 080a 	mov.w	r8, #10
   1ee1c:	f04f 0900 	mov.w	r9, #0
   1ee20:	f04f 0a0a 	mov.w	sl, #10
   1ee24:	f04f 0e00 	mov.w	lr, #0
   1ee28:	2000      	movs	r0, #0
   1ee2a:	2100      	movs	r1, #0
   1ee2c:	e011      	b.n	1ee52 <_strtoull_l.isra.0+0xbe>
   1ee2e:	42b9      	cmp	r1, r7
   1ee30:	bf08      	it	eq
   1ee32:	42b0      	cmpeq	r0, r6
   1ee34:	d03f      	beq.n	1eeb6 <_strtoull_l.isra.0+0x122>
   1ee36:	fb00 f409 	mul.w	r4, r0, r9
   1ee3a:	fb08 4401 	mla	r4, r8, r1, r4
   1ee3e:	fba0 0108 	umull	r0, r1, r0, r8
   1ee42:	4421      	add	r1, r4
   1ee44:	18c0      	adds	r0, r0, r3
   1ee46:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   1ee4a:	f04f 0e01 	mov.w	lr, #1
   1ee4e:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ee52:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1ee56:	2b09      	cmp	r3, #9
   1ee58:	d905      	bls.n	1ee66 <_strtoull_l.isra.0+0xd2>
   1ee5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   1ee5e:	2b19      	cmp	r3, #25
   1ee60:	d80d      	bhi.n	1ee7e <_strtoull_l.isra.0+0xea>
   1ee62:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1ee66:	459a      	cmp	sl, r3
   1ee68:	dd11      	ble.n	1ee8e <_strtoull_l.isra.0+0xfa>
   1ee6a:	f1be 0f00 	cmp.w	lr, #0
   1ee6e:	db03      	blt.n	1ee78 <_strtoull_l.isra.0+0xe4>
   1ee70:	428f      	cmp	r7, r1
   1ee72:	bf08      	it	eq
   1ee74:	4286      	cmpeq	r6, r0
   1ee76:	d2da      	bcs.n	1ee2e <_strtoull_l.isra.0+0x9a>
   1ee78:	f04f 3eff 	mov.w	lr, #4294967295
   1ee7c:	e7e7      	b.n	1ee4e <_strtoull_l.isra.0+0xba>
   1ee7e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   1ee82:	2b19      	cmp	r3, #25
   1ee84:	d803      	bhi.n	1ee8e <_strtoull_l.isra.0+0xfa>
   1ee86:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   1ee8a:	459a      	cmp	sl, r3
   1ee8c:	dced      	bgt.n	1ee6a <_strtoull_l.isra.0+0xd6>
   1ee8e:	f1be 0f00 	cmp.w	lr, #0
   1ee92:	db15      	blt.n	1eec0 <_strtoull_l.isra.0+0x12c>
   1ee94:	9b01      	ldr	r3, [sp, #4]
   1ee96:	b113      	cbz	r3, 1ee9e <_strtoull_l.isra.0+0x10a>
   1ee98:	4240      	negs	r0, r0
   1ee9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ee9e:	f1bb 0f00 	cmp.w	fp, #0
   1eea2:	d005      	beq.n	1eeb0 <_strtoull_l.isra.0+0x11c>
   1eea4:	f1be 0f00 	cmp.w	lr, #0
   1eea8:	d114      	bne.n	1eed4 <_strtoull_l.isra.0+0x140>
   1eeaa:	9d02      	ldr	r5, [sp, #8]
   1eeac:	f8cb 5000 	str.w	r5, [fp]
   1eeb0:	b005      	add	sp, #20
   1eeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eeb6:	4293      	cmp	r3, r2
   1eeb8:	ddbd      	ble.n	1ee36 <_strtoull_l.isra.0+0xa2>
   1eeba:	f04f 3eff 	mov.w	lr, #4294967295
   1eebe:	e7c6      	b.n	1ee4e <_strtoull_l.isra.0+0xba>
   1eec0:	9a03      	ldr	r2, [sp, #12]
   1eec2:	2322      	movs	r3, #34	; 0x22
   1eec4:	6013      	str	r3, [r2, #0]
   1eec6:	f04f 30ff 	mov.w	r0, #4294967295
   1eeca:	f04f 31ff 	mov.w	r1, #4294967295
   1eece:	f1bb 0f00 	cmp.w	fp, #0
   1eed2:	d0ed      	beq.n	1eeb0 <_strtoull_l.isra.0+0x11c>
   1eed4:	3d01      	subs	r5, #1
   1eed6:	e7e9      	b.n	1eeac <_strtoull_l.isra.0+0x118>
   1eed8:	2301      	movs	r3, #1
   1eeda:	782c      	ldrb	r4, [r5, #0]
   1eedc:	9301      	str	r3, [sp, #4]
   1eede:	1cbd      	adds	r5, r7, #2
   1eee0:	e777      	b.n	1edd2 <_strtoull_l.isra.0+0x3e>
   1eee2:	2c30      	cmp	r4, #48	; 0x30
   1eee4:	d123      	bne.n	1ef2e <_strtoull_l.isra.0+0x19a>
   1eee6:	782b      	ldrb	r3, [r5, #0]
   1eee8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1eeec:	2b58      	cmp	r3, #88	; 0x58
   1eeee:	d128      	bne.n	1ef42 <_strtoull_l.isra.0+0x1ae>
   1eef0:	786c      	ldrb	r4, [r5, #1]
   1eef2:	220f      	movs	r2, #15
   1eef4:	3502      	adds	r5, #2
   1eef6:	f04f 36ff 	mov.w	r6, #4294967295
   1eefa:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   1eefe:	f04f 0810 	mov.w	r8, #16
   1ef02:	f04f 0900 	mov.w	r9, #0
   1ef06:	f04f 0a10 	mov.w	sl, #16
   1ef0a:	e78b      	b.n	1ee24 <_strtoull_l.isra.0+0x90>
   1ef0c:	782b      	ldrb	r3, [r5, #0]
   1ef0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ef12:	2b58      	cmp	r3, #88	; 0x58
   1ef14:	d0ec      	beq.n	1eef0 <_strtoull_l.isra.0+0x15c>
   1ef16:	2207      	movs	r2, #7
   1ef18:	f04f 36ff 	mov.w	r6, #4294967295
   1ef1c:	f06f 4760 	mvn.w	r7, #3758096384	; 0xe0000000
   1ef20:	f04f 0808 	mov.w	r8, #8
   1ef24:	f04f 0900 	mov.w	r9, #0
   1ef28:	f04f 0a08 	mov.w	sl, #8
   1ef2c:	e77a      	b.n	1ee24 <_strtoull_l.isra.0+0x90>
   1ef2e:	220f      	movs	r2, #15
   1ef30:	f04f 36ff 	mov.w	r6, #4294967295
   1ef34:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
   1ef38:	f04f 0810 	mov.w	r8, #16
   1ef3c:	f04f 0900 	mov.w	r9, #0
   1ef40:	e770      	b.n	1ee24 <_strtoull_l.isra.0+0x90>
   1ef42:	f04f 0810 	mov.w	r8, #16
   1ef46:	f04f 0900 	mov.w	r9, #0
   1ef4a:	e74c      	b.n	1ede6 <_strtoull_l.isra.0+0x52>
   1ef4c:	19999999 	.word	0x19999999

0001ef50 <_strtoull_r>:
   1ef50:	b530      	push	{r4, r5, lr}
   1ef52:	4c06      	ldr	r4, [pc, #24]	; (1ef6c <_strtoull_r+0x1c>)
   1ef54:	4d06      	ldr	r5, [pc, #24]	; (1ef70 <_strtoull_r+0x20>)
   1ef56:	6824      	ldr	r4, [r4, #0]
   1ef58:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1ef5a:	b083      	sub	sp, #12
   1ef5c:	2c00      	cmp	r4, #0
   1ef5e:	bf08      	it	eq
   1ef60:	462c      	moveq	r4, r5
   1ef62:	9400      	str	r4, [sp, #0]
   1ef64:	f7ff ff16 	bl	1ed94 <_strtoull_l.isra.0>
   1ef68:	b003      	add	sp, #12
   1ef6a:	bd30      	pop	{r4, r5, pc}
   1ef6c:	20000248 	.word	0x20000248
   1ef70:	20000ad8 	.word	0x20000ad8

0001ef74 <__ascii_wctomb>:
   1ef74:	b121      	cbz	r1, 1ef80 <__ascii_wctomb+0xc>
   1ef76:	2aff      	cmp	r2, #255	; 0xff
   1ef78:	d804      	bhi.n	1ef84 <__ascii_wctomb+0x10>
   1ef7a:	700a      	strb	r2, [r1, #0]
   1ef7c:	2001      	movs	r0, #1
   1ef7e:	4770      	bx	lr
   1ef80:	4608      	mov	r0, r1
   1ef82:	4770      	bx	lr
   1ef84:	238a      	movs	r3, #138	; 0x8a
   1ef86:	6003      	str	r3, [r0, #0]
   1ef88:	f04f 30ff 	mov.w	r0, #4294967295
   1ef8c:	4770      	bx	lr
   1ef8e:	bf00      	nop
   1ef90:	2e2f2e2e 	.word	0x2e2f2e2e
   1ef94:	2e2e2f2e 	.word	0x2e2e2f2e
   1ef98:	554c412f 	.word	0x554c412f
   1ef9c:	6972445f 	.word	0x6972445f
   1efa0:	2f726576 	.word	0x2f726576
   1efa4:	5f554c41 	.word	0x5f554c41
   1efa8:	76697244 	.word	0x76697244
   1efac:	682f7265 	.word	0x682f7265
   1efb0:	692f6c61 	.word	0x692f6c61
   1efb4:	756c636e 	.word	0x756c636e
   1efb8:	682f6564 	.word	0x682f6564
   1efbc:	775f6c61 	.word	0x775f6c61
   1efc0:	682e7464 	.word	0x682e7464
   1efc4:	00000000 	.word	0x00000000
   1efc8:	656c6553 	.word	0x656c6553
   1efcc:	64657463 	.word	0x64657463
   1efd0:	6e696c20 	.word	0x6e696c20
   1efd4:	00003a65 	.word	0x00003a65
   1efd8:	00000a0d 	.word	0x00000a0d
   1efdc:	2a2a2a2a 	.word	0x2a2a2a2a
   1efe0:	66694c20 	.word	0x66694c20
   1efe4:	75502065 	.word	0x75502065
   1efe8:	2065736c 	.word	0x2065736c
   1efec:	69746341 	.word	0x69746341
   1eff0:	65746176 	.word	0x65746176
   1eff4:	2a2a2a64 	.word	0x2a2a2a64
   1eff8:	0000002a 	.word	0x0000002a

0001effc <_ZTV10AMMC_Class>:
   1effc:	000002d4 000002c4 00000000 00000000     ................
   1f00c:	00000df1 00000e91 00013179 00000000     ........y1......
   1f01c:	00000000 fffffd3c 00000000 0001292d     ....<.......-)..
   1f02c:	000127fd fffffd2c fffffd2c fffffff0     .'..,...,.......
   1f03c:	fffffd2c 00000000 00000e65 00000ebd     ,.......e.......
   1f04c:	000131e1                                .1..

0001f050 <_ZTT10AMMC_Class>:
   1f050:	0001f00c 0001f08c 0001f0e0 0001f0f8     ................
   1f060:	0001f114 0001f0a8 0001f0c4 0001f028     ............(...
   1f070:	0001f044 0001f12c 0001f148              D...,...H...

0001f07c <_ZTC10AMMC_Class0_15ARINC_Interface>:
   1f07c:	000002d4 000002c4 00000000 00000000     ................
	...
   1f094:	00013179 00000000 00000000 fffffd3c     y1..........<...
   1f0a4:	00000000 0001292d 000127fd fffffd2c     ....-)...'..,...
   1f0b4:	fffffd2c fffffff0 fffffd2c 00000000     ,.......,.......
	...
   1f0cc:	000131e1                                .1..

0001f0d0 <_ZTC10AMMC_Class0_18ARINC_Buffer_Class>:
   1f0d0:	000002d4 000002c4 00000000 00000000     ................
	...
   1f0f0:	fffffd3c 00000000 0001292d 000127fd     <.......-)...'..
   1f100:	00000000 fffffd2c fffffff0 fffffd2c     ....,.......,...
	...
   1f11c:	00013fb7                                .?..

0001f120 <_ZTC10AMMC_Class724_14Protocol_Class>:
   1f120:	fffffff0 00000000 00000000 00000000     ................
   1f130:	00000000 00013fb7 00000000 00000000     .....?..........
   1f140:	00000010 00000000 0001292d 000127fd     ........-)...'..

0001f150 <factoryDefaultsConfiguration>:
   1f150:	000000ac 00000004 0000070c 00000000     ................
   1f160:	00000000 00000001 000003e8 000003e8     ................
   1f170:	000003e8 00000000 00000000 00000000     ................
   1f180:	3e051eb8 c4128000 42aa0000 42700000     ...>.......B..pB
   1f190:	3e051eb8 c4128000 42960000 42480000     ...>.......B..HB
   1f1a0:	3de147ae 3e0f5c29 3e2e147b c3f68000     .G.=)\.>{..>....
   1f1b0:	c424c000 c444c000 43200000 42f00000     ..$...D... C...B
   1f1c0:	425c0000 444f8000 428c0000 43200000     ..\B..OD...B.. C
   1f1d0:	bc9ba5e3 41780000 3fbae148 42a00000     ......xAH..?...B
   1f1e0:	41200000 41200000 00000014 00000078     .. A.. A....x...
   1f1f0:	be23d70a 41d00000 00000078              ..#....Ax...

0001f1fc <factoryDefaultsCycles>:
   1f1fc:	000001c0 00000005 0000000c 00000024     ............$...
   1f20c:	756e614d 00006c61 00000000 00000000     Manual..........
   1f21c:	00000000 00000001 00000258 0000000f     ........X.......
   1f22c:	000004b0 63697551 7453206b 00747261     ....Quick Start.
	...
   1f244:	00000001 00000258 0000001e 0000012c     ....X.......,...
   1f254:	2030332b 73636573 00000000 00000000     +30 secs........
   1f264:	00000000 00000001 000000f0 0000001e     ................
   1f274:	0000001e 73657250 31207465 00000000     ....Preset 1....
	...
   1f29c:	73657250 32207465 00000000 00000000     Preset 2........
	...
   1f2c0:	73657250 33207465 00000000 00000000     Preset 3........
	...
   1f2e4:	73657250 34207465 00000000 00000000     Preset 4........
	...
   1f308:	73657250 35207465 00000000 00000000     Preset 5........
	...
   1f32c:	73657250 36207465 00000000 00000000     Preset 6........
	...
   1f350:	73657250 37207465 00000000 00000000     Preset 7........
	...
   1f374:	73657250 38207465 00000000 00000000     Preset 8........
	...
   1f398:	73657250 39207465 00000000 00000000     Preset 9........
	...
   1f3bc:	65736552 00000074 74696e49 696c6169     Reset...Initiali
   1f3cc:	0000657a 75736552 0000656d 6e617453     ze..Resume..Stan
   1f3dc:	4f796264 00004646 70657250 53657261     dbyOFF..PrepareS
   1f3ec:	646e6174 4e4f7962 00000000 6e617453     tandbyON....Stan
   1f3fc:	4f796264 0000004e 6e617453 52796264     dbyON...StandbyR
   1f40c:	79646165 00000000 616c6544 00646579     eady....Delayed.
   1f41c:	65746e49 70757272 00646574 00004e4f     Interrupted.ON..
   1f42c:	706f7453 50646570 65636f72 00007373     StoppedProcess..
   1f43c:	61656c43 0070756e 696e6946 64656873     Cleanup.Finished
   1f44c:	00000000 7065654b 00746f48 666c6553     ....KeepHot.Self
   1f45c:	746f7250 00746365 6f727245 00000072     Protect.Error...
   1f46c:	6e69614d 616e6574 0065636e 55494d48     Maintenance.HMIU
   1f47c:	74616470 00000065 6d726946 65726177     pdate...Firmware
   1f48c:	61647055 00006574 72727543 20746e65     Update..Current 
   1f49c:	74617453 00000065 6c637943 75442065     State...Cycle Du
   1f4ac:	69746172 00006e6f 616d6552 6e696e69     ration..Remainin
   1f4bc:	69542067 0000656d 67726154 50207465     g Time..Target P
   1f4cc:	7265776f 00000000 00776f4e 6967614d     ower....Now.Magi
   1f4dc:	00000063                                c...

0001f4e0 <defaultHVACState>:
   1f4e0:	61626364 00000000 00000000 00000000     dcba............
	...
   1f550:	00203a20 00007830 00000a0d               : .0x......

0001f55c <_ZTV17ConfigState_Class>:
	...
   1f564:	00013fb7                                .?..

0001f568 <_ZTV14DateTime_Class>:
	...
   1f570:	0001666d 0001675d 6e69614d 616e6574     mf..]g..Maintena
   1f580:	2065636e 6c6f6f54 636f4c20 0064656b     nce Tool Locked.
   1f590:	00000a0d 6f6d6552 6f206574 61726570     ....Remote opera
   1f5a0:	6e6f6974 73694420 656c6261 00000064     tion Disabled...
   1f5b0:	49505351 6f725020 6d617267 61745320     QSPI Program Sta
   1f5c0:	64657472 00000d0a 73616c46 61642068     rted....Flash da
   1f5d0:	76206174 66697265 74616369 206e6f69     ta verification 
   1f5e0:	6c696166 0a2e6465 0000000d 74696220     failed...... bit
   1f5f0:	00003a20 00000a0d 74697257 202d2065      :......Write - 
   1f600:	64616552 20736920 63637573 66737365     Read is successf
   1f610:	69206c75 5351206e 46204950 6873616c     ul in QSPI Flash
   1f620:	6d656d20 2079726f 00000000 202a2a2a      memory ....*** 
   1f630:	72617453 20705574 6f676c41 68746972     StartUp Algorith
   1f640:	206e656d 74736554 2a2a2a20 00000000     men Test ***....
   1f650:	202a2a2a 65746144 0020203a 2074634f     *** Date:  .Oct 
   1f660:	32203631 00303230 6d695420 00203a65     16 2020. Time: .
   1f670:	353a3731 34343a37 00000000 202a2a2a     17:57:44....*** 
   1f680:	20554c41 74696e69 65746169 2a2a2064     ALU initiated **
   1f690:	0000002a 69746341 6c206576 3a656e69     *...Active line:
   1f6a0:	00000020 73616c46 654d2068 79726f6d      ...Flash Memory
   1f6b0:	6c655320 73655466 41502074 44455353      SelfTest PASSED
   1f6c0:	00000000 00000a0d 73616c46 654d2068     ........Flash Me
   1f6d0:	79726f6d 6c655320 73655466 41462074     mory SelfTest FA
   1f6e0:	44454c49 00000000 52504545 4d204d4f     ILED....EEPROM M
   1f6f0:	726f6d65 65532079 6554666c 50207473     emory SelfTest P
   1f700:	45535341 00000044 52504545 4d204d4f     ASSED...EEPROM M
   1f710:	726f6d65 65532079 6554666c 46207473     emory SelfTest F
   1f720:	454c4941 00000044 20726941 646e6f43     AILED...Air Cond
   1f730:	6f697469 676e696e 73795320 206d6574     itioning System 
   1f740:	7265704f 6e697461 00000067 00000a0d     Operating.......
   1f750:	20726941 646e6f43 6f697469 676e696e     Air Conditioning
   1f760:	73795320 206d6574 72617453 00646574      System Started.
   1f770:	646e6168 4147656c 76454e49 20746e65     handleGAINEvent 
   1f780:	65636572 64657669 7773203a 68637469     received: switch
   1f790:	20676e69 6d6f7266 00000020 206f7420     ing from ... to 
   1f7a0:	00000000 646e6168 7453656c 49657461     ....handleStateI
   1f7b0:	6974696e 7a696c61 66203a65 7367616c     nitialize: flags
   1f7c0:	203d3d20 00007830 646e6168 7453656c      == 0x..handleSt
   1f7d0:	49657461 6974696e 7a696c61 00000065     ateInitialize...
   1f7e0:	646e6168 7453656c 53657461 646e6174     handleStateStand
   1f7f0:	464f7962 00000046 646e6168 7453656c     byOFF...handleSt
   1f800:	50657461 61706572 74536572 62646e61     atePrepareStandb
   1f810:	004e4f79 20726941 646e6f43 6f697469     yON.Air Conditio
   1f820:	676e696e 73795320 206d6574 706f7453     ning System Stop
   1f830:	00646570                                ped.

0001f834 <_ZTV12States_Class>:
	...
   1f83c:	00003cf1 2e2f2e2e 7361542f 6e61486b     .<...././TaskHan
   1f84c:	72656c64 616c435f 632e7373 00007070     dler_Class.cpp..
   1f85c:	682f2e2e 702f6c70 2f74726f 5f6c7068     ../hpl/port/hpl_
   1f86c:	6f697067 7361625f 00682e65 682f2e2e     gpio_base.h.../h
   1f87c:	692f6c61 756c636e 682f6564 775f6c61     al/include/hal_w
   1f88c:	682e7464 00000000 682f2e2e 732f6c61     dt.h....../hal/s
   1f89c:	682f6372 635f6c61 6e656c61 2e726164     rc/hal_calendar.
   1f8ac:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
   1f8bc:	635f6c61 615f6e61 636e7973 0000632e     al_can_async.c..
   1f8cc:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   1f8dc:	735f6372 2e636e79 00000063 682f2e2e     rc_sync.c...../h
   1f8ec:	732f6c61 682f6372 695f6c61 6d5f6332     al/src/hal_i2c_m
   1f8fc:	7973615f 632e636e 00000000 682f2e2e     _async.c....../h
   1f90c:	732f6c61 682f6372 695f6c61 6d5f6332     al/src/hal_i2c_m
   1f91c:	6e79735f 00632e63 682f2e2e 732f6c61     _sync.c.../hal/s
   1f92c:	682f6372 705f6c61 632e6d77 00000000     rc/hal_pwm.c....
   1f93c:	682f2e2e 732f6c61 682f6372 715f6c61     ../hal/src/hal_q
   1f94c:	5f697073 636e7973 0000632e 682f2e2e     spi_sync.c..../h
   1f95c:	732f6c61 682f6372 735f6c61 6d5f6970     al/src/hal_spi_m
   1f96c:	6e79735f 00632e63 682f2e2e 732f6c61     _sync.c.../hal/s
   1f97c:	682f6372 745f6c61 72656d69 0000632e     rc/hal_timer.c..
   1f98c:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
   1f99c:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...

0001f9ac <_map>:
   1f9ac:	00000000 00000040 00000004 00000004     ....@...........
   1f9bc:	00000005 00000005 00000006 00000056     ............V...
   1f9cc:	00000007 00000057 00000008 00000028     ....W.......(...
   1f9dc:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   1f9ec:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0001f9fc <user_mux_confs>:
   1f9fc:	00020100 00000000 00000000 00000000     ................
	...

0001fa40 <channel_confs>:
   1fa40:	0660065f 00000000 00000000 00000000     _.`.............
	...

0001fa80 <interrupt_cfg>:
	...
   1fb00:	682f2e2e 702f6c70 682f6361 705f6c70     ../hpl/pac/hpl_p
   1fb10:	632e6361 00000000 682f2e2e 712f6c70     ac.c....../hpl/q
   1fb20:	2f697073 5f6c7068 69707371 0000632e     spi/hpl_qspi.c..
   1fb30:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
   1fb40:	632e6374 00000000 682f2e2e 732f6c70     tc.c....../hpl/s
   1fb50:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   1fb60:	0000632e 40003000 40003400 41012000     .c...0.@.4.@. .A
   1fb70:	41014000 43000000 43000400 43000800     .@.A...C...C...C
   1fb80:	43000c00                                ...C

0001fb84 <sercomspi_regs>:
   1fb84:	0020008c 00020000 00000000 01ff0063     .. .........c...
   1fb94:	20000c01 02000000 00000000 ff000100     ... ............
   1fba4:	000c0401 00000030 00000002 00ef0000     ....0...........
   1fbb4:	000601ff 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1fbc4:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1fbd4:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1fbe4:	43001400 43001800                       ...C...C

0001fbec <_usb_ep_cfgs>:
   1fbec:	200088c4 00000000 00000040 20008904     ... ....@...... 
   1fbfc:	20008944 00400040 20008984 200089c4     D.. @.@.... ... 
   1fc0c:	00400040 20008a04 20008a44 00400040     @.@.... D.. @.@.
   1fc1c:	20008a84 20008ac4 00400040 00000804     ... ... @.@.....
   1fc2c:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   1fc3c:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   1fc4c:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1fc5c:	7361625f 00682e65                       _base.h.

0001fc64 <n25q256a_interface>:
   1fc64:	000109dd 00010a81 00010b91 00010d49     ............I...
   1fc74:	00010dd9 752f2e2e 642f6273 63697665     ....../usb/devic
   1fc84:	73752f65 2e636462 00000063              e/usbdc.c...

0001fc90 <_ZTV17ARINC_Conversions>:
	...
   1fc98:	0001292d 000127fd                       -)...'..

0001fca0 <_ZL5Mesg1>:
   1fca0:	4e495241 614c2043 3a6c6562 00000020     ARINC Label: ...

0001fcb0 <_ZL5Mesg2>:
   1fcb0:	61746144 0000203a                       Data: ..

0001fcb8 <_ZL10HexToAscii>:
   1fcb8:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0001fcc8 <_ZL11HistoryMesg>:
   1fcc8:	74736948 2079726f 4f464946 0000203a     History FIFO: ..
   1fcd8:	49480d0a 3935332d 61662033 64656c69     ..HI-3593 failed
   1fce8:	206f7420 74696e49 7a696c69 000d0a65      to Initilize...
   1fcf8:	2d0a0d0a 68202d2d 41203273 434e4952     ...--- hs2 ARINC
   1fd08:	746e4920 61667265 20206563 2d2d2d2d      Interface  ----
   1fd18:	00000d0a 2d2d0a72 6f67212d 656d2074     ....r.---!got me
   1fd28:	67617373 2d2d2165 00002d2d 61727420     ssage!----.. tra
   1fd38:	696d736e 6e697474 2e2e2e67 00000000     nsmitting.......
   1fd48:	61725420 696d736e 64657474 00000021      Transmitted!...
   1fd58:	0000003e 72540d0a 6d736e61 26207469     >.....Transmit &
   1fd68:	63655220 65766965 74695720 614c2068      Receive With La
   1fd78:	736c6562 646f4d20 000d0a65 45530d0a     bels Mode.....SE
   1fd88:	542d464c 2c545345 746e4920 616e7265     LF-TEST, Interna
   1fd98:	6944206c 61746967 6f4c206c 622d706f     l Digital Loop-b
   1fda8:	2c6b6361 206f4e20 61746164 20736920     ack, No data is 
   1fdb8:	6e617274 74696d73 20646574 65747865     transmitted exte
   1fdc8:	6c616e72 0d0a796c 00000000 6f200d0a     rnally........ o
   1fdd8:	6154206e 20656c62 6562616c 6120736c     n Table labels a
   1fde8:	45206572 6c62616e 00006465 500a0d0a     re Enabled.....P
   1fdf8:	73736572 2d575320 6f742031 61747320     ress SW-1 to sta
   1fe08:	69207472 6974696e 796c6c61 000a0d0a     rt initially....
   1fe18:	202d2d2d 74747542 43206e6f 616d6d6f     --- Button Comma
   1fe28:	2073646e 0a2d2d2d 0000000d 70532020     nds ---.....  Sp
   1fe38:	20656361 20726142 44206f74 6c707369     ace Bar to Displ
   1fe48:	53207961 75746174 6e612073 6f432064     ay Status and Co
   1fe58:	6f72746e 6552206c 74736967 0a737265     ntrol Registers.
   1fe68:	0000000d 20702020 50206f74 65737561     ....  p to Pause
   1fe78:	00000d0a 206d2020 44206f74 6c707369     ....  m to Displ
   1fe88:	4c207961 6c656261 6d654d20 0079726f     ay Label Memory.
   1fe98:	003e0d0a 72540d0a 6d736e61 69747469     ..>...Transmitti
   1fea8:	0d0a676e 0000003e 49480d0a 3935332d     ng..>.....HI-359
   1feb8:	74532033 73757461 6f43202c 6f72746e     3 Status, Contro
   1fec8:	6552206c 74736967 0d737265 0000000a     l Registers.....
   1fed8:	20090d0a 2a2a2a20 50202a2a 73736572     ...  ***** Press
   1fee8:	70732020 62656361 74207261 6f63206f       spacebar to co
   1fef8:	6e69746e 2a206575 2a2a2a2a 0000002a     ntinue ******...
   1ff08:	540d0a0a 736e6172 2074696d 73756150     ...Transmit Paus
   1ff18:	0d0a6465 00000000 72500d0a 20737365     ed........Press 
   1ff28:	44454c4f 5455425f 2d4e4f54 6f742032     OLED_BUTTON-2 to
   1ff38:	61727420 696d736e 6e6f2074 72662065      transmit one fr
   1ff48:	20656d61 20646e61 73756170 000d0a65     ame and pause...
   1ff58:	72500d0a 20737365 44454c4f 5455425f     ..Press OLED_BUT
   1ff68:	2d4e4f54 6f742033 73655220 0a656d75     TON-3 to Resume.
   1ff78:	0000000d 72540d0a 6d736e61 65747469     ......Transmitte
   1ff88:	65522072 656d7573 2e2e2e64 00000d0a     r Resumed.......
   1ff98:	65520d0a 76696563 31207265 62614c20     ..Receiver 1 Lab
   1ffa8:	0a736c65 0000000d 65520d0a 76696563     els.......Receiv
   1ffb8:	32207265 62614c20 0a736c65 0000000d     er 2 Labels.....
   1ffc8:	72540d0a 6d736e61 26207469 63655220     ..Transmit & Rec
   1ffd8:	65766965 68634520 6f4d206f 0d0a6564     eive Echo Mode..
   1ffe8:	00000000 6c530d0a 5320776f 64656570     ......Slow Speed
   1fff8:	00000000 61460d0a 53207473 64656570     ......Fast Speed
   20008:	00000000 72540d0a 6d736e61 65747469     ......Transmitte
   20018:	61502072 79746972 616e4520 64656c62     r Parity Enabled
   20028:	00000000 49480d0a 3935332d 61662033     ......HI-3593 fa
   20038:	64656c69 206f7420 74696e69 7a696c69     iled to initiliz
   20048:	000d0a65 61540d0a 20656c62 6562616c     e.....Table labe
   20058:	6120736c 45206572 6c62616e 00006465     ls are Enabled..
   20068:	2d0a0d0a 43202d2d 6f736e6f 4320656c     ...--- Console C
   20078:	616d6d6f 2073646e 706c6548 2d2d2d20     ommands Help ---
   20088:	00000000 20502020 6150203d 79746972     ....  P = Parity
   20098:	676f5420 20656c67 6f2f6e6f 00006666      Toggle on/off..
   200a8:	20542020 4654203d 2050494c 676f5420       T = TFLIP  Tog
   200b8:	20656c67 6f2f6e6f 00006666 20522020     gle on/off..  R 
   200c8:	4652203d 2050494c 676f5420 20656c67     = RFLIP  Toggle 
   200d8:	6f2f6e6f 00006666 20532020 4453203d     on/off..  S = SD
   200e8:	202c4e4f 2c394453 31445320 6f542030     ON, SD9, SD10 To
   200f8:	656c6767 2f6e6f20 0066666f 20482020     ggle on/off.  H 
   20108:	6854203d 48207369 20706c65 65676150     = This Help Page
   20118:	00000000 70532020 20656361 20726142     ....  Space Bar 
   20128:	6944203d 616c7073 74532079 73757461     = Display Status
   20138:	646e6120 6e6f4320 6c6f7274 67657220      and Control reg
   20148:	00000073 20492020 6e49203d 6d657263     s...  I = Increm
   20158:	20746e65 7373654d 20656761 20646e61     ent Message and 
   20168:	6e617254 74696d73 7845202e 726f6c70     Transmit. Explor
   20178:	4d207265 2065646f 4f202d20 21594c4e     er Mode  - ONLY!
   20188:	00000000 204d2020 6e45203d 20726574     ....  M = Enter 
   20198:	74737543 4d206d6f 61737365 202e6567     Custom Message. 
   201a8:	6c707845 7265726f 646f4d20 2d202065     Explorer Mode  -
   201b8:	4c4e4f20 00002159 4e452020 3d524554      ONLY!..  ENTER=
   201c8:	61725420 696d736e 656e2074 6d207478      Transmit next m
   201d8:	61737365 202e6567 6c707845 7265726f     essage. Explorer
   201e8:	646f4d20 2d202065 4c4e4f20 00002159      Mode  - ONLY!..
   201f8:	00207830 30307826 00002030 50205854     0x .&x000 ..TX P
   20208:	74697261 52412079 5f434e49 0d0a4e4f     arity ARINC_ON..
   20218:	0000003e 50205854 74697261 52412079     >...TX Parity AR
   20228:	5f434e49 0a46464f 00003e0d 494c4654     INC_OFF..>..TFLI
   20238:	65532050 3e0d0a74 00000000 494c4654     P Set..>....TFLI
   20248:	6c432050 65726165 3e0d0a64 00000000     P Cleared..>....
   20258:	2d434552 46522031 2050494c 0a746553     REC-1 RFLIP Set.
   20268:	00003e0d 2d434552 46522031 2050494c     .>..REC-1 RFLIP 
   20278:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   20288:	46522032 2050494c 0a746553 00003e0d     2 RFLIP Set..>..
   20298:	2d434552 46522032 2050494c 61656c43     REC-2 RFLIP Clea
   202a8:	0a646572 00003e0d 2d434552 44532031     red..>..REC-1 SD
   202b8:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   202c8:	0a746553 00003e0d 2d434552 44532031     Set..>..REC-1 SD
   202d8:	532c4e4f 61203944 5320646e 20303144     ON,SD9 and SD10 
   202e8:	61656c43 0a646572 00003e0d 2d434552     Cleared..>..REC-
   202f8:	44532032 532c4e4f 61203944 5320646e     2 SDON,SD9 and S
   20308:	20303144 0a746553 00003e0d 2d434552     D10 Set..>..REC-
   20318:	44532032 532c4e4f 61203944 5320646e     2 SDON,SD9 and S
   20328:	20303144 61656c43 0a646572 00003e0d     D10 Cleared..>..
   20338:	500a0d0a 73736572 61705320 42206563     ...Press Space B
   20348:	6f207261 57532072 7420342d 6572206f     ar or SW-4 to re
   20358:	656d7573 00000000 6562614c 2020736c     sume....Labels  
   20368:	202d2030 203a3336 00000020 00000020     0 - 63:  ... ...
   20378:	614c0d0a 736c6562 34362020 3732312d     ..Labels  64-127
   20388:	0020203a 614c0d0a 736c6562 38323120     :  ...Labels 128
   20398:	3139312d 0020203a 614c0d0a 736c6562     -191:  ...Labels
   203a8:	32393120 3535322d 0020203a 614c0d0a      192-255:  ...La
   203b8:	736c6562 20302020 3336202d 0020203a     bels  0 - 63:  .
   203c8:	543e0d0a 20202058 74614420 00003a61     ..>TX    Data:..
   203d8:	6562614c 00003a6c 2d636552 61442031     Label:..Rec-1 Da
   203e8:	003a6174 2d314c50 61442031 003a6174     ta:.PL1-1 Data:.
   203f8:	6374614d 00003a68 2d314c50 61442032     Match:..PL1-2 Da
   20408:	003a6174 2d314c50 61442033 003a6174     ta:.PL1-3 Data:.
   20418:	2d636552 61442032 003a6174 2d324c50     Rec-2 Data:.PL2-
   20428:	61442031 003a6174 2d324c50 61442032     1 Data:.PL2-2 Da
   20438:	003a6174 2d324c50 61442033 003a6174     ta:.PL2-3 Data:.
   20448:	00000d0a 78450d0a 726f6c70 4d207265     ......Explorer M
   20458:	0a65646f 0000000d 6c200d0a 6c656261     ode....... label
   20468:	61542073 20656c62 45207369 6c62616e     s Table is Enabl
   20478:	00006465 2d0a0d0a 42202d2d 6f747475     ed.....--- Butto
   20488:	6f43206e 6e616d6d 2d207364 00002d2d     n Commands ---..
   20498:	20200d0a 63617073 72616265 206f7420     ..  spacebar to 
   204a8:	70736944 2079616c 74617453 61207375     Display Status a
   204b8:	4320646e 72746e6f 52206c6f 73696765     nd Control Regis
   204c8:	73726574 00000000 20200d0a 44454c4f     ters......  OLED
   204d8:	5455422d 324e4f54 61727420 696d736e     -BUTTON2 transmi
   204e8:	6e6f2074 656d2065 67617373 72662065     t one message fr
   204f8:	74206d6f 736e6172 2074696d 66667562     om transmit buff
   20508:	00007265 20200d0a 6f74204c 69725020     er....  L to Pri
   20518:	4c20746e 6c656261 6d654d20 0a79726f     nt Label Memory.
   20528:	0000000d 72500d0a 20737365 45544e45     ......Press ENTE
   20538:	6f742052 61725420 696d736e 726f2074     R to Transmit or
   20548:	65737520 65687420 294d2820 6d6f6320      use the (M) com
   20558:	646e616d 206f7420 65746e65 20612072     mand to enter a 
   20568:	74737563 6d206d6f 61737365 00006567     custom message..
   20578:	73657250 57532073 726f2034 61707320     Press SW4 or spa
   20588:	61626563 6f742072 6e6f6320 756e6974     cebar to continu
   20598:	00000065 73657250 70732073 62656361     e...Press spaceb
   205a8:	74207261 6f63206f 6e69746e 00006575     ar to continue..
   205b8:	433e0d0a 616d6d6f 4d20646e 00000000     ..>Command M....
   205c8:	6e450d0a 20726574 79622033 20736574     ..Enter 3 bytes 
   205d8:	414c202b 204c4542 54206f74 736e6172     + LABEL to Trans
   205e8:	2074696d 6c6c6f66 6465776f 20796220     mit followed by 
   205f8:	45544e45 000d0a52 6f540d0a 61725420     ENTER.....To Tra
   20608:	696d736e 65202c74 7265746e 62203320     nsmit, enter 3 b
   20618:	73657479 6c6f6620 65776f6c 79622064     ytes followed by
   20628:	4c206120 6c656261 74796220 6f662065      a Label byte fo
   20638:	776f6c6c 62206465 4e452079 0a524554     llowed by ENTER.
   20648:	0000000d 6d726f46 203a7461 73746942     ....Format: Bits
   20658:	322d3233 42202c35 32737469 37312d34     32-25, Bits24-17
   20668:	6942202c 36317374 202c392d 4542414c     , Bits16-9, LABE
   20678:	3a0d0a4c 00000000 6d617845 3a656c70     L..:....Example:
   20688:	20313020 34203332 37362035 544e4520      01 23 45 67 ENT
   20698:	0d0a5245 0000003a 65725020 52207373     ER..:... Press R
   206a8:	52555445 0000004e 61725420 696d736e     ETURN... Transmi
   206b8:	676e6974 002e2e2e 61725420 696d736e     ting.... Transmi
   206c8:	21646574 00000000 6d6d6f43 20646e61     ted!....Command 
   206d8:	49203a49 6572636e 746e656d 74616420     I: Increment dat
   206e8:	3e0d0a61 00000000                       a..>....

000206f0 <_ZTV15ARINC_Interface>:
   206f0:	000002d0 000002c0 00000000 00000000     ................
   20700:	00012d99 00012e49 00013179 00000000     .-..I...y1......
   20710:	00000000 fffffd40 00000000 0001292d     ....@.......-)..
   20720:	000127fd fffffd30 fffffd30 fffffff0     .'..0...0.......
   20730:	fffffd30 00000000 00012e1d 00012e75     0...........u...
   20740:	000131e1                                .1..

00020744 <_ZTT15ARINC_Interface>:
   20744:	00020700 00020774 0002078c 000207a8     ....t...........
   20754:	0002071c 00020738 000207c0 000207dc     ....8...........

00020764 <_ZTC15ARINC_Interface0_18ARINC_Buffer_Class>:
   20764:	000002d0 000002c0 00000000 00000000     ................
	...
   20784:	fffffd40 00000000 0001292d 000127fd     @.......-)...'..
   20794:	00000000 fffffd30 fffffff0 fffffd30     ....0.......0...
	...
   207b0:	00013fb7                                .?..

000207b4 <_ZTC15ARINC_Interface720_14Protocol_Class>:
   207b4:	fffffff0 00000000 00000000 00000000     ................
   207c4:	00000000 00013fb7 00000000 00000000     .....?..........
   207d4:	00000010 00000000 0001292d 000127fd     ........-)...'..

000207e4 <_ZL12LabelArray_1>:
   207e4:	c1215d1d 9616efdd 3f5f9f0d bd00ffdf     .]!......._?....
	...
   20804:	636e7546 6e6f6974 65786520 65747563     Function execute
   20814:	75732064 73656363 6c756673 0000796c     d successfully..
   20824:	63656843 6f79206b 77207275 6e697269     Check your wirin
   20834:	46202e67 6873616c 69686320 73692070     g. Flash chip is
   20844:	6e6f6e20 7365722d 736e6f70 2e657669      non-responsive.
   20854:	00000000 6e6f632a 75727473 726f7463     ....*constructor
   20864:	5f666f5f 696f6863 2e2a6563 69676562     _of_choice*.begi
   20874:	2029286e 20736177 20746f6e 6c6c6163     n() was not call
   20884:	69206465 6f76206e 73206469 70757465     ed in void setup
   20894:	00002928 62616e55 7420656c 6469206f     ()..Unable to id
   208a4:	69746e65 63207966 2e706968 65724120     entify chip. Are
   208b4:	756f7920 72757320 68742065 63207369      you sure this c
   208c4:	20706968 73207369 6f707075 64657472     hip is supported
   208d4:	0000003f 62616e55 7420656c 6469206f     ?...Unable to id
   208e4:	69746e65 63207966 63617061 2e797469     entify capacity.
   208f4:	20734920 73696874 69686320 666f2070      Is this chip of
   20904:	69636966 796c6c61 70757320 74726f70     ficially support
   20914:	203f6465 6e206649 202c746f 61656c70     ed? If not, plea
   20924:	64206573 6e696665 20612065 50414360     se define a `CAP
   20934:	54494341 63206059 74736e6f 20746e61     ACITY` constant 
   20944:	20646e61 6c636e69 20656475 69207469     and include it i
   20954:	6c66206e 2e687361 69676562 4143286e     n flash.begin(CA
   20964:	49434150 2e295954 00000000 70696843     PACITY).....Chip
   20974:	20736920 79737562 0000002e 656b614d      is busy....Make
   20984:	72757320 6c612065 6970206c 6820736e      sure all pins h
   20994:	20657661 6e656562 6e6f6320 7463656e     ave been connect
   209a4:	70206465 65706f72 00796c72 65676150     ed properly.Page
   209b4:	65766f20 6f6c6672 61682077 65622073      overflow has be
   209c4:	64206e65 62617369 2064656c 20646e61     en disabled and 
   209d4:	20656874 72646461 20737365 6c6c6163     the address call
   209e4:	65206465 65656378 74207364 6d206568     ed exceeds the m
   209f4:	726f6d65 00000079 62616e55 7420656c     emory...Unable t
   20a04:	6e45206f 656c6261 69725720 676e6974     o Enable Writing
   20a14:	206f7420 70696863 0000002e 61656c50      to chip....Plea
   20a24:	6d206573 20656b61 65727573 65687420     se make sure the
   20a34:	4c4f4820 20262044 54495257 4f525045      HOLD & WRITEPRO
   20a44:	54434554 6e697020 72612073 75702065     TECT pins are pu
   20a54:	64656c6c 20707520 56206f74 00004343     lled up to VCC..
   20a64:	73696854 63657320 20726f74 65726c61     This sector alre
   20a74:	20796461 746e6f63 736e6961 74616420     ady contains dat
   20a84:	00002e61 61656c50 6d206573 20656b61     a...Please make 
   20a94:	65727573 65687420 63657320 73726f74     sure the sectors
   20aa4:	69656220 7720676e 74746972 74206e65      being written t
   20ab4:	7261206f 72652065 64657361 0000002e     o are erased....
   20ac4:	20756f59 20657261 6e6e7572 20676e69     You are running 
   20ad4:	20776f6c 53206e6f 2e4d4152 656c5020     low on SRAM. Ple
   20ae4:	20657361 6974706f 6573696d 756f7920     ase optimise you
   20af4:	72702072 6172676f 6f66206d 65622072     r program for be
   20b04:	72657474 4d415220 61737520 00006567     tter RAM usage..
   20b14:	73696854 6e756620 6f697463 7369206e     This function is
   20b24:	746f6e20 70757320 74726f70 62206465      not supported b
   20b34:	68742079 6c662065 20687361 6f6d656d     y the flash memo
   20b44:	68207972 77647261 2e657261 00000000     ry hardware.....
   20b54:	62616e55 7420656c 7573206f 6e657073     Unable to suspen
   20b64:	65722f64 656d7573 65706f20 69746172     d/resume operati
   20b74:	002e6e6f 74697257 75462065 6974636e     on..Write Functi
   20b84:	68206e6f 66207361 656c6961 72652064     on has failed er
   20b94:	63726f72 6b636568 0000002e 62616e55     rorcheck....Unab
   20ba4:	7420656c 6e65206f 656c6261 622d3420     le to enable 4-b
   20bb4:	20657479 72646461 69737365 002e676e     yte addressing..
   20bc4:	62616e55 7420656c 6964206f 6c626173     Unable to disabl
   20bd4:	2d342065 65747962 64646120 73736572     e 4-byte address
   20be4:	2e676e69 00000000 20656854 70696863     ing.....The chip
   20bf4:	20736920 72727563 6c746e65 6f702079      is currently po
   20c04:	65726577 6f642064 002e6e77 20656854     wered down..The 
   20c14:	73616c46 68632068 64207069 2073656f     Flash chip does 
   20c24:	20746f6e 70707573 2074726f 50444653     not support SFDP
   20c34:	0000002e 62616e55 7420656c 6572206f     ....Unable to re
   20c44:	45206461 65736172 72615020 74656d61     ad Erase Paramet
   20c54:	20737265 6d6f7266 69686320 52202e70     ers from chip. R
   20c64:	72657665 676e6974 206f7420 7262696c     everting to libr
   20c74:	20797261 61666564 73746c75 0000002e     ary defaults....
   20c84:	62616e55 7420656c 6572206f 65206461     Unable to read e
   20c94:	65736172 6d697420 66207365 206d6f72     rase times from 
   20ca4:	73616c66 656d2068 79726f6d 6552202e     flash memory. Re
   20cb4:	74726576 20676e69 6c206f74 61726269     verting to libra
   20cc4:	64207972 75616665 2e73746c 00000000     ry defaults.....
   20cd4:	62616e55 7420656c 6572206f 70206461     Unable to read p
   20ce4:	72676f72 74206d61 73656d69 6f726620     rogram times fro
   20cf4:	6c66206d 20687361 6f6d656d 202e7972     m flash memory. 
   20d04:	65766552 6e697472 6f742067 62696c20     Reverting to lib
   20d14:	79726172 66656420 746c7561 00002e73     rary defaults...
   20d24:	43206f4e 20706968 656c6553 70207463     No Chip Select p
   20d34:	64206e69 6e696665 69206465 6874206e     in defined in th
   20d44:	75632065 6d6f7473 49505320 72724120     e custom SPI Arr
   20d54:	002e7961 6e6b6e55 206e776f 6f727265     ay..Unknown erro
   20d64:	00000072 6f727245 6f632072 203a6564     r...Error code: 
   20d74:	00007830 00000030 74206649 20736968     0x..0...If this 
   20d84:	73656f64 746f6e20 6c656820 65722070     does not help re
   20d94:	766c6f73 6c632f65 66697261 68742079     solve/clarify th
   20da4:	69207369 65757373 0000202c 61656c70     is issue, ..plea
   20db4:	72206573 65736961 206e6120 75737369     se raise an issu
   20dc4:	74612065 74746820 2f2f3a70 2e777777     e at http://www.
   20dd4:	2d327368 69676e65 7265656e 2e676e69     hs2-engineering.
   20de4:	692f6564 7865646e 7068702e 6e6f632f     de/index.php/con
   20df4:	74636174 6d74682e 6977206c 74206874     tact.html with t
   20e04:	64206568 69617465 6f20736c 68772066     he details of wh
   20e14:	79207461 2072756f 65726577 696f6420     at your were doi
   20e24:	7720676e 206e6568 73696874 72726520     ng when this err
   20e34:	6f20726f 72756363 00646572              or occurred.

00020e40 <maxEventCount>:
   20e40:	00800008                                         ..

00020e42 <sizeOfEventQueue>:
   20e42:	ffff0080                                         ..

00020e44 <forever>:
   20e44:	7fffffff 492f2e2e 492f4332 4f5f4332     ....../I2C/I2C_O
   20e54:	63656a62 73694c74 70632e74 00000070     bjectList.cpp...
   20e64:	2e2f2e2e 2e2e2f2e 554c412f 6972445f     ../../../ALU_Dri
   20e74:	2f726576 5f554c41 76697244 682f7265     ver/ALU_Driver/h
   20e84:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   20e94:	7361625f 00682e65                       _base.h.

00020e9c <defaultParameters>:
   20e9c:	00000082                                ....

00020ea0 <defaultPreferences>:
   20ea0:	000000fa 00000032                       ....2...

00020ea8 <_ZTV14Calendar_Class>:
	...
   20eb0:	0001666d 0001675d                       mf..]g..

00020eb8 <_ZTV17DateTimeLog_Class>:
	...
   20ec0:	00013fb7 00013fb7                       .?...?..

00020ec8 <_ZTV9CDC_Class>:
	...
   20ed0:	000174f1 000175d1 00017145 000174b9     .t...u..Eq...t..
   20ee0:	00017669 0001747d 00017361 000173b1     iv..}t..as...s..
   20ef0:	000174d9 00017539                       .t..9u..

00020ef8 <_ZTV6Stream>:
	...
   20f00:	00013fb7 00017739 00017145 00017159     .?..9w..Eq..Yq..
   20f10:	00013fb7 00013fb7 00013fb7 2e257830     .?...?...?..0x%.
   20f20:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   20f30:	0066766f                                ovf.

00020f34 <_ZTV5Print>:
	...
   20f3c:	00013fb7 00017739 00017145 00017159     .?..9w..Eq..Yq..
   20f4c:	2a2a2a0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     .***************
   20f5c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   20f6c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   20f7c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   20f8c:	0a2a2a2a 0000000d 43544c20 33383932     ***..... LTC2983
   20f9c:	6d654420 74736e6f 69746172 50206e6f      Demonstration P
   20fac:	72676f72 20206d61 20202020 20202020     rogram          
   20fbc:	20202020 20202020 20202020 00000d0a                 ....
   20fcc:	20202020 20202020 20202020 20202020                     
   20fdc:	20202020 20202020 20202020 20202020                     
   20fec:	20202020 20202020 20202020 20202020                     
   20ffc:	20202020 20202020 20202020 20202020                     
   2100c:	00000d0a 69685420 72702073 6172676f     .... This progra
   2101c:	6564206d 736e6f6d 74617274 68207365     m demonstrates h
   2102c:	7420776f 6572206f 74206461 6d206568     ow to read the m
   2103c:	69746c75 6e65732d 20726f73 20202020     ulti-sensor     
   2104c:	20202020 00000d0a 6d657420 61726570         .... tempera
   2105c:	65727574 61656d20 65727573 746e656d     ture measurement
   2106c:	73797320 2e6d6574 20202020 20202020      system.        
   2107c:	20202020 20202020 20202020 20202020                     
   2108c:	20202020 20202020 00000d0a 74655320             .... Set
   2109c:	65687420 75616220 61722064 74206574      the baud rate t
   210ac:	3131206f 30303235 646e6120 6c657320     o 115200 and sel
   210bc:	20746365 20656874 6c77656e 20656e69     ect the newline 
   210cc:	6d726574 74616e69 202e726f 00000d0a     terminator. ....
   210dc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   210ec:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   210fc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2110c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2111c:	0d0a2a2a 00000000 6168430a 6c656e6e     **.......Channel
   2112c:	6e6f4320 20676966 00000000 69676572      Config ....regi
   2113c:	72657473 6c617620 203a6575 00000000     ster value: ....
   2114c:	6168430a 6c656e6e 00000020 65542020     .Channel ...  Te
   2115c:	7265706d 72757461 203d2065 00000000     mperature = ....
   2116c:	69442020 74636572 43444120 61657220       Direct ADC rea
   2117c:	676e6964 206e6920 203d2056 00000000     ding in V = ....
   2118c:	6f562020 6761746c 726f2065 73657220       Voltage or res
   2119c:	61747369 2065636e 0000203d 41462020     istance = ..  FA
   211ac:	20544c55 41544144 00203d20 202d2020     ULT DATA = .  - 
   211bc:	534e4553 4820524f 20445241 554c4146     SENSOR HARD FALU
   211cc:	00004552 202d2020 5f434441 44524148     RE..  - ADC_HARD
   211dc:	4941465f 4552554c 00000000 202d2020     _FAILURE....  - 
   211ec:	485f4a43 5f445241 4c494146 00455255     CJ_HARD_FAILURE.
   211fc:	202d2020 535f4a43 5f54464f 4c494146       - CJ_SOFT_FAIL
   2120c:	00455255 202d2020 534e4553 415f524f     URE.  - SENSOR_A
   2121c:	45564f42 00000000 202d2020 534e4553     BOVE....  - SENS
   2122c:	425f524f 574f4c45 00000000 202d2020     OR_BELOW....  - 
   2123c:	5f434441 474e4152 52455f45 00524f52     ADC_RANGE_ERROR.
   2124c:	41564e49 2044494c 44414552 20474e49     INVALID READING 
   2125c:	21212121 00002121 464e4f43 52554749     !!!!!!..CONFIGUR
   2126c:	4f495441 5245204e 20524f52 21212121     ATION ERROR !!!!
   2127c:	00002121 682f2e2e 732f6c61 682f6372     !!..../hal/src/h
   2128c:	695f6c61 00632e6f 00776f70              al_io.c.pow.

00021298 <TWO52>:
   21298:	00000000 43300000 00000000 c3300000     ......0C......0.

000212a8 <_global_impure_ptr>:
   212a8:	20000250                                P.. 

000212ac <__month_lengths>:
   212ac:	0000001f 0000001c 0000001f 0000001e     ................
   212bc:	0000001f 0000001e 0000001f 0000001f     ................
   212cc:	0000001e 0000001f 0000001e 0000001f     ................
   212dc:	0000001f 0000001d 0000001f 0000001e     ................
   212ec:	0000001f 0000001e 0000001f 0000001f     ................
   212fc:	0000001e 0000001f 0000001e 0000001f     ................
   2130c:	00005a54 00544d47 5b303125 392d305e     TZ..GMT.%10[^0-9
   2131c:	5d2d2b2c 00006e25 25756825 68253a6e     ,+-]%n..%hu%n:%h
   2132c:	3a6e2575 25756825 0000006e 7568254d     u%n:%hu%n...M%hu
   2133c:	252e6e25 6e257568 7568252e 00006e25     %n.%hu%n.%hu%n..
   2134c:	7568252f 253a6e25 6e257568 7568253a     /%hu%n:%hu%n:%hu
   2135c:	00006e25 73332e25 332e2520 64332573     %n..%.3s %.3s%3d
   2136c:	322e2520 2e253a64 253a6432 2064322e      %.2d:%.2d:%.2d 
   2137c:	000a6425                                %d..

00021380 <day_name.4727>:
   21380:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   21390:	61536972 00000074                       riSat...

00021398 <mon_name.4728>:
   21398:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   213a8:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   213b8:	63654476 33323130 37363534 42413938     vDec0123456789AB
   213c8:	46454443 00000000 33323130 37363534     CDEF....01234567
   213d8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   213e8:	0000296c                                l)..

000213ec <blanks.7203>:
   213ec:	20202020 20202020 20202020 20202020                     

000213fc <zeroes.7204>:
   213fc:	30303030 30303030 30303030 30303030     0000000000000000

0002140c <basefix.6796>:
   2140c:	0001000a 00030002 00050004 00070006     ................
   2141c:	00090008 000b000a 000d000c 000f000e     ................
   2142c:	00000010 00000043 49534f50 00000058     ....C...POSIX...
   2143c:	0000002e                                ....

00021440 <_ctype_>:
   21440:	20202000 20202020 28282020 20282828     .         ((((( 
   21450:	20202020 20202020 20202020 20202020                     
   21460:	10108820 10101010 10101010 10101010      ...............
   21470:	04040410 04040404 10040404 10101010     ................
   21480:	41411010 41414141 01010101 01010101     ..AAAAAA........
   21490:	01010101 01010101 01010101 10101010     ................
   214a0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   214b0:	02020202 02020202 02020202 10101010     ................
   214c0:	00000020 00000000 00000000 00000000      ...............
	...

00021544 <_init>:
   21544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21546:	bf00      	nop
   21548:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2154a:	bc08      	pop	{r3}
   2154c:	469e      	mov	lr, r3
   2154e:	4770      	bx	lr

00021550 <__init_array_start>:
   21550:	0001bbf5 	.word	0x0001bbf5

00021554 <__frame_dummy_init_array_entry>:
   21554:	00000289 00000d35 00000f7d 00001021     ....5...}...!...
   21564:	000016cd 00001c4d 000020e9 000023a5     ....M.... ...#..
   21574:	000027d5 00002cd1 00003f71 000135ad     .'...,..q?...5..
   21584:	00014295 00014779 00014ea1 00015309     .B..yG...N...S..
   21594:	0001598d 0001625d 000169a9 0001710d     .Y..]b...i...q..
   215a4:	000176e9 00017fad 000189e9 00018b29     .v..........)...

000215b4 <_fini>:
   215b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   215b6:	bf00      	nop
   215b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   215ba:	bc08      	pop	{r3}
   215bc:	469e      	mov	lr, r3
   215be:	4770      	bx	lr

000215c0 <__fini_array_start>:
   215c0:	00000265 	.word	0x00000265
