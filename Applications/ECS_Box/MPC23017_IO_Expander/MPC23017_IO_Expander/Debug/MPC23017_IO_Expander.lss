
MPC23017_IO_Expander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cfac  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000cfac  0000cfac  0001cfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000544  20000000  0000cfb4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00020544  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00020544  2**0
                  CONTENTS
  5 .bss          00000808  20000544  0000d4f8  00020544  2**2
                  ALLOC
  6 .stack        00010004  20000d4c  0000dd00  00020544  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00020544  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00020572  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004d915  00000000  00000000  000205cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006821  00000000  00000000  0006dee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017037  00000000  00000000  00074701  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002908  00000000  00000000  0008b738  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002658  00000000  00000000  0008e040  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00046135  00000000  00000000  00090698  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002d163  00000000  00000000  000d67cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001330fe  00000000  00000000  00103930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000ad68  00000000  00000000  00236a30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 0d 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     P.. ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	99 51 00 00 55 03 00 00 55 03 00 00 55 03 00 00     .Q..U...U...U...
      7c:	55 03 00 00 41 40 00 00 51 40 00 00 61 40 00 00     U...A@..Q@..a@..
      8c:	71 40 00 00 55 03 00 00 55 03 00 00 55 03 00 00     q@..U...U...U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     104:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     114:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 d5 65 00 00 f1 65 00 00 0d 66 00 00     U....e...e...f..
     144:	29 66 00 00 45 66 00 00 61 66 00 00 7d 66 00 00     )f..Ef..af..}f..
     154:	99 66 00 00 55 03 00 00 55 03 00 00 55 03 00 00     .f..U...U...U...
     164:	55 03 00 00 b5 66 00 00 d1 66 00 00 ed 66 00 00     U....f...f...f..
     174:	09 67 00 00 55 03 00 00 1d 39 00 00 b9 9e 00 00     .g..U....9......
     184:	c9 9e 00 00 d9 9e 00 00 e9 9e 00 00 55 03 00 00     ............U...
     194:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 3d 76 00 00 59 76 00 00     U...U...=v..Yv..
     1f4:	75 76 00 00 91 76 00 00 55 03 00 00 55 03 00 00     uv...v..U...U...
     204:	55 03 00 00 ad 76 00 00 55 03 00 00 55 03 00 00     U....v..U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000544 	.word	0x20000544
     280:	00000000 	.word	0x00000000
     284:	0000cfb4 	.word	0x0000cfb4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000cfb4 	.word	0x0000cfb4
     2c4:	20000548 	.word	0x20000548
     2c8:	0000cfb4 	.word	0x0000cfb4
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	0000cfb4 	.word	0x0000cfb4
     334:	20000000 	.word	0x20000000
     338:	20000544 	.word	0x20000544
     33c:	20000544 	.word	0x20000544
     340:	20000d4c 	.word	0x20000d4c
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	0000c835 	.word	0x0000c835
     350:	0000035d 	.word	0x0000035d

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>
	...

0000035c <main>:
#include "atmel_start.h"
#include "MCP23017_Class.h"

MCP23017_Class	mcp(&I2C_EXPANDER);
int main(void)
{
     35c:	b590      	push	{r4, r7, lr}
     35e:	b083      	sub	sp, #12
     360:	af00      	add	r7, sp, #0
	atmel_start_init();
     362:	4b12      	ldr	r3, [pc, #72]	; (3ac <main+0x50>)
     364:	4798      	blx	r3
	mcp.Init();
     366:	4812      	ldr	r0, [pc, #72]	; (3b0 <main+0x54>)
     368:	4b12      	ldr	r3, [pc, #72]	; (3b4 <main+0x58>)
     36a:	4798      	blx	r3
	mcp.SetPortAInput();
     36c:	4810      	ldr	r0, [pc, #64]	; (3b0 <main+0x54>)
     36e:	4b12      	ldr	r3, [pc, #72]	; (3b8 <main+0x5c>)
     370:	4798      	blx	r3
	mcp.SetPortBOutput();
     372:	480f      	ldr	r0, [pc, #60]	; (3b0 <main+0x54>)
     374:	4b11      	ldr	r3, [pc, #68]	; (3bc <main+0x60>)
     376:	4798      	blx	r3

    /* Replace with your application code */
    while (1) 
    {
		for (int i = 0; i < 8; i++)
     378:	2300      	movs	r3, #0
     37a:	607b      	str	r3, [r7, #4]
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	2b07      	cmp	r3, #7
     380:	dcfa      	bgt.n	378 <main+0x1c>
		{
			mcp.digitalWrite(8+i,mcp.digitalRead(i));
     382:	687b      	ldr	r3, [r7, #4]
     384:	b2db      	uxtb	r3, r3
     386:	3308      	adds	r3, #8
     388:	b2dc      	uxtb	r4, r3
     38a:	687b      	ldr	r3, [r7, #4]
     38c:	b2db      	uxtb	r3, r3
     38e:	4619      	mov	r1, r3
     390:	4807      	ldr	r0, [pc, #28]	; (3b0 <main+0x54>)
     392:	4b0b      	ldr	r3, [pc, #44]	; (3c0 <main+0x64>)
     394:	4798      	blx	r3
     396:	4603      	mov	r3, r0
     398:	461a      	mov	r2, r3
     39a:	4621      	mov	r1, r4
     39c:	4804      	ldr	r0, [pc, #16]	; (3b0 <main+0x54>)
     39e:	4b09      	ldr	r3, [pc, #36]	; (3c4 <main+0x68>)
     3a0:	4798      	blx	r3
		for (int i = 0; i < 8; i++)
     3a2:	687b      	ldr	r3, [r7, #4]
     3a4:	3301      	adds	r3, #1
     3a6:	607b      	str	r3, [r7, #4]
     3a8:	e7e8      	b.n	37c <main+0x20>
     3aa:	bf00      	nop
     3ac:	00000879 	.word	0x00000879
     3b0:	20000560 	.word	0x20000560
     3b4:	000006fd 	.word	0x000006fd
     3b8:	0000057d 	.word	0x0000057d
     3bc:	000005cd 	.word	0x000005cd
     3c0:	0000081d 	.word	0x0000081d
     3c4:	00000751 	.word	0x00000751

000003c8 <_Z41__static_initialization_and_destruction_0ii>:
		}
		
    }
}
     3c8:	b580      	push	{r7, lr}
     3ca:	b082      	sub	sp, #8
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
     3d0:	6039      	str	r1, [r7, #0]
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	2b01      	cmp	r3, #1
     3d6:	d10d      	bne.n	3f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
     3d8:	683b      	ldr	r3, [r7, #0]
     3da:	f64f 72ff 	movw	r2, #65535	; 0xffff
     3de:	4293      	cmp	r3, r2
     3e0:	d108      	bne.n	3f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
MCP23017_Class	mcp(&I2C_EXPANDER);
     3e2:	4906      	ldr	r1, [pc, #24]	; (3fc <_Z41__static_initialization_and_destruction_0ii+0x34>)
     3e4:	4806      	ldr	r0, [pc, #24]	; (400 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     3e6:	4b07      	ldr	r3, [pc, #28]	; (404 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     3e8:	4798      	blx	r3
     3ea:	4a07      	ldr	r2, [pc, #28]	; (408 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     3ec:	4907      	ldr	r1, [pc, #28]	; (40c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     3ee:	4804      	ldr	r0, [pc, #16]	; (400 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     3f0:	4b07      	ldr	r3, [pc, #28]	; (410 <_Z41__static_initialization_and_destruction_0ii+0x48>)
     3f2:	4798      	blx	r3
}
     3f4:	bf00      	nop
     3f6:	3708      	adds	r7, #8
     3f8:	46bd      	mov	sp, r7
     3fa:	bd80      	pop	{r7, pc}
     3fc:	20000c20 	.word	0x20000c20
     400:	20000560 	.word	0x20000560
     404:	00000429 	.word	0x00000429
     408:	20000000 	.word	0x20000000
     40c:	0000045d 	.word	0x0000045d
     410:	0000c801 	.word	0x0000c801

00000414 <_GLOBAL__sub_I_mcp>:
     414:	b580      	push	{r7, lr}
     416:	af00      	add	r7, sp, #0
     418:	f64f 71ff 	movw	r1, #65535	; 0xffff
     41c:	2001      	movs	r0, #1
     41e:	4b01      	ldr	r3, [pc, #4]	; (424 <_GLOBAL__sub_I_mcp+0x10>)
     420:	4798      	blx	r3
     422:	bd80      	pop	{r7, pc}
     424:	000003c9 	.word	0x000003c9

00000428 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc>:

MCP23017_Class::MCP23017_Class()
{
	ptrMCP23017Class=this;
} //AT24MAC_Class
MCP23017_Class::MCP23017_Class(i2c_m_async_desc *i2c)
     428:	b580      	push	{r7, lr}
     42a:	b082      	sub	sp, #8
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
     430:	6039      	str	r1, [r7, #0]
     432:	687b      	ldr	r3, [r7, #4]
     434:	3308      	adds	r3, #8
     436:	4618      	mov	r0, r3
     438:	4b06      	ldr	r3, [pc, #24]	; (454 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x2c>)
     43a:	4798      	blx	r3
{
	ptrI2CDescr=i2c;
     43c:	687b      	ldr	r3, [r7, #4]
     43e:	683a      	ldr	r2, [r7, #0]
     440:	605a      	str	r2, [r3, #4]
	ptrMCP23017Class=this;
     442:	4a05      	ldr	r2, [pc, #20]	; (458 <_ZN14MCP23017_ClassC1EP16i2c_m_async_desc+0x30>)
     444:	687b      	ldr	r3, [r7, #4]
     446:	6013      	str	r3, [r2, #0]
} //AT24MAC_Class
     448:	687b      	ldr	r3, [r7, #4]
     44a:	4618      	mov	r0, r3
     44c:	3708      	adds	r7, #8
     44e:	46bd      	mov	sp, r7
     450:	bd80      	pop	{r7, pc}
     452:	bf00      	nop
     454:	0000c591 	.word	0x0000c591
     458:	20000580 	.word	0x20000580

0000045c <_ZN14MCP23017_ClassD1Ev>:

// default destructor
MCP23017_Class::~MCP23017_Class()
     45c:	b580      	push	{r7, lr}
     45e:	b082      	sub	sp, #8
     460:	af00      	add	r7, sp, #0
     462:	6078      	str	r0, [r7, #4]
     464:	687b      	ldr	r3, [r7, #4]
     466:	3308      	adds	r3, #8
     468:	4618      	mov	r0, r3
     46a:	4b03      	ldr	r3, [pc, #12]	; (478 <_ZN14MCP23017_ClassD1Ev+0x1c>)
     46c:	4798      	blx	r3
{
} //~AT24MAC_Class
     46e:	687b      	ldr	r3, [r7, #4]
     470:	4618      	mov	r0, r3
     472:	3708      	adds	r7, #8
     474:	46bd      	mov	sp, r7
     476:	bd80      	pop	{r7, pc}
     478:	0000c5b9 	.word	0x0000c5b9

0000047c <_ZN14MCP23017_Class9bitForPinEh>:
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23017_Class::bitForPin(uint8_t pin){
     47c:	b480      	push	{r7}
     47e:	b083      	sub	sp, #12
     480:	af00      	add	r7, sp, #0
     482:	6078      	str	r0, [r7, #4]
     484:	460b      	mov	r3, r1
     486:	70fb      	strb	r3, [r7, #3]
    return pin%8;
     488:	78fb      	ldrb	r3, [r7, #3]
     48a:	f003 0307 	and.w	r3, r3, #7
     48e:	b2db      	uxtb	r3, r3
}
     490:	4618      	mov	r0, r3
     492:	370c      	adds	r7, #12
     494:	46bd      	mov	sp, r7
     496:	bc80      	pop	{r7}
     498:	4770      	bx	lr

0000049a <_ZN14MCP23017_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23017_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
     49a:	b480      	push	{r7}
     49c:	b083      	sub	sp, #12
     49e:	af00      	add	r7, sp, #0
     4a0:	6078      	str	r0, [r7, #4]
     4a2:	4608      	mov	r0, r1
     4a4:	4611      	mov	r1, r2
     4a6:	461a      	mov	r2, r3
     4a8:	4603      	mov	r3, r0
     4aa:	70fb      	strb	r3, [r7, #3]
     4ac:	460b      	mov	r3, r1
     4ae:	70bb      	strb	r3, [r7, #2]
     4b0:	4613      	mov	r3, r2
     4b2:	707b      	strb	r3, [r7, #1]
    return(pin<8) ?portAaddr:portBaddr;
     4b4:	78fb      	ldrb	r3, [r7, #3]
     4b6:	2b07      	cmp	r3, #7
     4b8:	dc01      	bgt.n	4be <_ZN14MCP23017_Class9regForPinEhhh+0x24>
     4ba:	78bb      	ldrb	r3, [r7, #2]
     4bc:	e000      	b.n	4c0 <_ZN14MCP23017_Class9regForPinEhhh+0x26>
     4be:	787b      	ldrb	r3, [r7, #1]
}
     4c0:	4618      	mov	r0, r3
     4c2:	370c      	adds	r7, #12
     4c4:	46bd      	mov	sp, r7
     4c6:	bc80      	pop	{r7}
     4c8:	4770      	bx	lr
	...

000004cc <_ZN14MCP23017_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23017_Class::readRegister(uint8_t addr){
     4cc:	b580      	push	{r7, lr}
     4ce:	b082      	sub	sp, #8
     4d0:	af00      	add	r7, sp, #0
     4d2:	6078      	str	r0, [r7, #4]
     4d4:	460b      	mov	r3, r1
     4d6:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2ca.Write(&addr,1);
     4d8:	687b      	ldr	r3, [r7, #4]
     4da:	3308      	adds	r3, #8
     4dc:	1cf9      	adds	r1, r7, #3
     4de:	2201      	movs	r2, #1
     4e0:	4618      	mov	r0, r3
     4e2:	4b11      	ldr	r3, [pc, #68]	; (528 <_ZN14MCP23017_Class12readRegisterEh+0x5c>)
     4e4:	4798      	blx	r3
	while(!i2ca.txReady);
     4e6:	687b      	ldr	r3, [r7, #4]
     4e8:	7a1b      	ldrb	r3, [r3, #8]
     4ea:	b2db      	uxtb	r3, r3
     4ec:	f083 0301 	eor.w	r3, r3, #1
     4f0:	b2db      	uxtb	r3, r3
     4f2:	2b00      	cmp	r3, #0
     4f4:	d000      	beq.n	4f8 <_ZN14MCP23017_Class12readRegisterEh+0x2c>
     4f6:	e7f6      	b.n	4e6 <_ZN14MCP23017_Class12readRegisterEh+0x1a>
	i2ca.Read(&registerValue,1);
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	f103 0008 	add.w	r0, r3, #8
     4fe:	687b      	ldr	r3, [r7, #4]
     500:	3319      	adds	r3, #25
     502:	2201      	movs	r2, #1
     504:	4619      	mov	r1, r3
     506:	4b09      	ldr	r3, [pc, #36]	; (52c <_ZN14MCP23017_Class12readRegisterEh+0x60>)
     508:	4798      	blx	r3
	while(!i2ca.rxReady);
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	7a5b      	ldrb	r3, [r3, #9]
     50e:	b2db      	uxtb	r3, r3
     510:	f083 0301 	eor.w	r3, r3, #1
     514:	b2db      	uxtb	r3, r3
     516:	2b00      	cmp	r3, #0
     518:	d000      	beq.n	51c <_ZN14MCP23017_Class12readRegisterEh+0x50>
     51a:	e7f6      	b.n	50a <_ZN14MCP23017_Class12readRegisterEh+0x3e>
	return registerValue;
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	7e5b      	ldrb	r3, [r3, #25]
}
     520:	4618      	mov	r0, r3
     522:	3708      	adds	r7, #8
     524:	46bd      	mov	sp, r7
     526:	bd80      	pop	{r7, pc}
     528:	0000c6b9 	.word	0x0000c6b9
     52c:	0000c6fd 	.word	0x0000c6fd

00000530 <_ZN14MCP23017_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
void MCP23017_Class::writeRegister(uint8_t addr, uint8_t value){
     530:	b580      	push	{r7, lr}
     532:	b084      	sub	sp, #16
     534:	af00      	add	r7, sp, #0
     536:	6078      	str	r0, [r7, #4]
     538:	460b      	mov	r3, r1
     53a:	70fb      	strb	r3, [r7, #3]
     53c:	4613      	mov	r3, r2
     53e:	70bb      	strb	r3, [r7, #2]
	// Write the register
	isReady=false;
     540:	687b      	ldr	r3, [r7, #4]
     542:	2200      	movs	r2, #0
     544:	701a      	strb	r2, [r3, #0]
	uint8_t array[2];
	array[0]=addr;
     546:	78fb      	ldrb	r3, [r7, #3]
     548:	733b      	strb	r3, [r7, #12]
	array[1]=value;
     54a:	78bb      	ldrb	r3, [r7, #2]
     54c:	737b      	strb	r3, [r7, #13]
	i2ca.Write(array,2);
     54e:	687b      	ldr	r3, [r7, #4]
     550:	3308      	adds	r3, #8
     552:	f107 010c 	add.w	r1, r7, #12
     556:	2202      	movs	r2, #2
     558:	4618      	mov	r0, r3
     55a:	4b07      	ldr	r3, [pc, #28]	; (578 <_ZN14MCP23017_Class13writeRegisterEhh+0x48>)
     55c:	4798      	blx	r3
	while(!i2ca.txReady);
     55e:	687b      	ldr	r3, [r7, #4]
     560:	7a1b      	ldrb	r3, [r3, #8]
     562:	b2db      	uxtb	r3, r3
     564:	f083 0301 	eor.w	r3, r3, #1
     568:	b2db      	uxtb	r3, r3
     56a:	2b00      	cmp	r3, #0
     56c:	d000      	beq.n	570 <_ZN14MCP23017_Class13writeRegisterEhh+0x40>
     56e:	e7f6      	b.n	55e <_ZN14MCP23017_Class13writeRegisterEhh+0x2e>
}
     570:	bf00      	nop
     572:	3710      	adds	r7, #16
     574:	46bd      	mov	sp, r7
     576:	bd80      	pop	{r7, pc}
     578:	0000c6b9 	.word	0x0000c6b9

0000057c <_ZN14MCP23017_Class13SetPortAInputEv>:

void	MCP23017_Class::SetPortAInput(void){
     57c:	b580      	push	{r7, lr}
     57e:	b082      	sub	sp, #8
     580:	af00      	add	r7, sp, #0
     582:	6078      	str	r0, [r7, #4]
	for (i=0;i<8;i++)
     584:	687b      	ldr	r3, [r7, #4]
     586:	2200      	movs	r2, #0
     588:	76da      	strb	r2, [r3, #27]
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	7edb      	ldrb	r3, [r3, #27]
     58e:	2b07      	cmp	r3, #7
     590:	dc14      	bgt.n	5bc <_ZN14MCP23017_Class13SetPortAInputEv+0x40>
	{
		pinMode(i,INPUT);
     592:	687b      	ldr	r3, [r7, #4]
     594:	7edb      	ldrb	r3, [r3, #27]
     596:	2200      	movs	r2, #0
     598:	4619      	mov	r1, r3
     59a:	6878      	ldr	r0, [r7, #4]
     59c:	4b09      	ldr	r3, [pc, #36]	; (5c4 <_ZN14MCP23017_Class13SetPortAInputEv+0x48>)
     59e:	4798      	blx	r3
		pullUp(i,HIGH);
     5a0:	687b      	ldr	r3, [r7, #4]
     5a2:	7edb      	ldrb	r3, [r3, #27]
     5a4:	2201      	movs	r2, #1
     5a6:	4619      	mov	r1, r3
     5a8:	6878      	ldr	r0, [r7, #4]
     5aa:	4b07      	ldr	r3, [pc, #28]	; (5c8 <_ZN14MCP23017_Class13SetPortAInputEv+0x4c>)
     5ac:	4798      	blx	r3
	for (i=0;i<8;i++)
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	7edb      	ldrb	r3, [r3, #27]
     5b2:	3301      	adds	r3, #1
     5b4:	b2da      	uxtb	r2, r3
     5b6:	687b      	ldr	r3, [r7, #4]
     5b8:	76da      	strb	r2, [r3, #27]
     5ba:	e7e6      	b.n	58a <_ZN14MCP23017_Class13SetPortAInputEv+0xe>
	}
}
     5bc:	bf00      	nop
     5be:	3708      	adds	r7, #8
     5c0:	46bd      	mov	sp, r7
     5c2:	bd80      	pop	{r7, pc}
     5c4:	00000719 	.word	0x00000719
     5c8:	000007f1 	.word	0x000007f1

000005cc <_ZN14MCP23017_Class14SetPortBOutputEv>:
void	MCP23017_Class::SetPortBOutput(void){
     5cc:	b580      	push	{r7, lr}
     5ce:	b082      	sub	sp, #8
     5d0:	af00      	add	r7, sp, #0
     5d2:	6078      	str	r0, [r7, #4]
	for (i=8;i<16;i++)
     5d4:	687b      	ldr	r3, [r7, #4]
     5d6:	2208      	movs	r2, #8
     5d8:	76da      	strb	r2, [r3, #27]
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	7edb      	ldrb	r3, [r3, #27]
     5de:	2b0f      	cmp	r3, #15
     5e0:	dc0d      	bgt.n	5fe <_ZN14MCP23017_Class14SetPortBOutputEv+0x32>
	{
		pinMode(i,OUTPUT);
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	7edb      	ldrb	r3, [r3, #27]
     5e6:	2201      	movs	r2, #1
     5e8:	4619      	mov	r1, r3
     5ea:	6878      	ldr	r0, [r7, #4]
     5ec:	4b06      	ldr	r3, [pc, #24]	; (608 <_ZN14MCP23017_Class14SetPortBOutputEv+0x3c>)
     5ee:	4798      	blx	r3
	for (i=8;i<16;i++)
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	7edb      	ldrb	r3, [r3, #27]
     5f4:	3301      	adds	r3, #1
     5f6:	b2da      	uxtb	r2, r3
     5f8:	687b      	ldr	r3, [r7, #4]
     5fa:	76da      	strb	r2, [r3, #27]
     5fc:	e7ed      	b.n	5da <_ZN14MCP23017_Class14SetPortBOutputEv+0xe>
	}
}
     5fe:	bf00      	nop
     600:	3708      	adds	r7, #8
     602:	46bd      	mov	sp, r7
     604:	bd80      	pop	{r7, pc}
     606:	bf00      	nop
     608:	00000719 	.word	0x00000719

0000060c <_ZN14MCP23017_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23017_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
     60c:	b590      	push	{r4, r7, lr}
     60e:	b085      	sub	sp, #20
     610:	af00      	add	r7, sp, #0
     612:	6078      	str	r0, [r7, #4]
     614:	4608      	mov	r0, r1
     616:	4611      	mov	r1, r2
     618:	461a      	mov	r2, r3
     61a:	4603      	mov	r3, r0
     61c:	70fb      	strb	r3, [r7, #3]
     61e:	460b      	mov	r3, r1
     620:	70bb      	strb	r3, [r7, #2]
     622:	4613      	mov	r3, r2
     624:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=regForPin(pin,portAaddr,portBaddr);
     626:	f897 3020 	ldrb.w	r3, [r7, #32]
     62a:	787a      	ldrb	r2, [r7, #1]
     62c:	78f9      	ldrb	r1, [r7, #3]
     62e:	6878      	ldr	r0, [r7, #4]
     630:	4c19      	ldr	r4, [pc, #100]	; (698 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x8c>)
     632:	47a0      	blx	r4
     634:	4603      	mov	r3, r0
     636:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
     638:	78fb      	ldrb	r3, [r7, #3]
     63a:	4619      	mov	r1, r3
     63c:	6878      	ldr	r0, [r7, #4]
     63e:	4b17      	ldr	r3, [pc, #92]	; (69c <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x90>)
     640:	4798      	blx	r3
     642:	4603      	mov	r3, r0
     644:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
     646:	7bfb      	ldrb	r3, [r7, #15]
     648:	4619      	mov	r1, r3
     64a:	6878      	ldr	r0, [r7, #4]
     64c:	4b14      	ldr	r3, [pc, #80]	; (6a0 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x94>)
     64e:	4798      	blx	r3
     650:	4603      	mov	r3, r0
     652:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
     654:	78bb      	ldrb	r3, [r7, #2]
     656:	2b00      	cmp	r3, #0
     658:	d009      	beq.n	66e <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x62>
     65a:	7bba      	ldrb	r2, [r7, #14]
     65c:	7b7b      	ldrb	r3, [r7, #13]
     65e:	4619      	mov	r1, r3
     660:	2301      	movs	r3, #1
     662:	408b      	lsls	r3, r1
     664:	b2db      	uxtb	r3, r3
     666:	4313      	orrs	r3, r2
     668:	b2db      	uxtb	r3, r3
     66a:	73bb      	strb	r3, [r7, #14]
     66c:	e00a      	b.n	684 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x78>
     66e:	7bba      	ldrb	r2, [r7, #14]
     670:	7b7b      	ldrb	r3, [r7, #13]
     672:	4619      	mov	r1, r3
     674:	2301      	movs	r3, #1
     676:	408b      	lsls	r3, r1
     678:	b2db      	uxtb	r3, r3
     67a:	43db      	mvns	r3, r3
     67c:	b2db      	uxtb	r3, r3
     67e:	4013      	ands	r3, r2
     680:	b2db      	uxtb	r3, r3
     682:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
     684:	7bba      	ldrb	r2, [r7, #14]
     686:	7bfb      	ldrb	r3, [r7, #15]
     688:	4619      	mov	r1, r3
     68a:	6878      	ldr	r0, [r7, #4]
     68c:	4b05      	ldr	r3, [pc, #20]	; (6a4 <_ZN14MCP23017_Class17updateRegisterBitEhhhh+0x98>)
     68e:	4798      	blx	r3
}
     690:	bf00      	nop
     692:	3714      	adds	r7, #20
     694:	46bd      	mov	sp, r7
     696:	bd90      	pop	{r4, r7, pc}
     698:	0000049b 	.word	0x0000049b
     69c:	0000047d 	.word	0x0000047d
     6a0:	000004cd 	.word	0x000004cd
     6a4:	00000531 	.word	0x00000531

000006a8 <_ZN14MCP23017_Class4InitEh>:
/**
 * Initializes the MCP23017 given its HW selected address, see datasheet for Address selection.
 * the addr is from 0 to 7
 * soldering the A0 to A2 to change the addr
 */
void MCP23017_Class::Init(uint8_t addr) {
     6a8:	b580      	push	{r7, lr}
     6aa:	b082      	sub	sp, #8
     6ac:	af00      	add	r7, sp, #0
     6ae:	6078      	str	r0, [r7, #4]
     6b0:	460b      	mov	r3, r1
     6b2:	70fb      	strb	r3, [r7, #3]
	i2c_addr=addr;
     6b4:	687b      	ldr	r3, [r7, #4]
     6b6:	78fa      	ldrb	r2, [r7, #3]
     6b8:	761a      	strb	r2, [r3, #24]
	i2ca.Set_descriptor(ptrI2CDescr);
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	f103 0208 	add.w	r2, r3, #8
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	685b      	ldr	r3, [r3, #4]
     6c4:	4619      	mov	r1, r3
     6c6:	4610      	mov	r0, r2
     6c8:	4b0a      	ldr	r3, [pc, #40]	; (6f4 <_ZN14MCP23017_Class4InitEh+0x4c>)
     6ca:	4798      	blx	r3
	isReady=i2ca.Init(addr)==0;
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	3308      	adds	r3, #8
     6d0:	78fa      	ldrb	r2, [r7, #3]
     6d2:	4611      	mov	r1, r2
     6d4:	4618      	mov	r0, r3
     6d6:	4b08      	ldr	r3, [pc, #32]	; (6f8 <_ZN14MCP23017_Class4InitEh+0x50>)
     6d8:	4798      	blx	r3
     6da:	4603      	mov	r3, r0
     6dc:	2b00      	cmp	r3, #0
     6de:	bf0c      	ite	eq
     6e0:	2301      	moveq	r3, #1
     6e2:	2300      	movne	r3, #0
     6e4:	b2da      	uxtb	r2, r3
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	701a      	strb	r2, [r3, #0]
}
     6ea:	bf00      	nop
     6ec:	3708      	adds	r7, #8
     6ee:	46bd      	mov	sp, r7
     6f0:	bd80      	pop	{r7, pc}
     6f2:	bf00      	nop
     6f4:	0000c5cd 	.word	0x0000c5cd
     6f8:	0000c671 	.word	0x0000c671

000006fc <_ZN14MCP23017_Class4InitEv>:
}

/**
 * Initializes the default MCP23017, with 000 for the configurable part of the address
 */
void MCP23017_Class::Init(void) {
     6fc:	b580      	push	{r7, lr}
     6fe:	b082      	sub	sp, #8
     700:	af00      	add	r7, sp, #0
     702:	6078      	str	r0, [r7, #4]
    Init((uint8_t)MCP23017_ADDRESS);
     704:	2127      	movs	r1, #39	; 0x27
     706:	6878      	ldr	r0, [r7, #4]
     708:	4b02      	ldr	r3, [pc, #8]	; (714 <_ZN14MCP23017_Class4InitEv+0x18>)
     70a:	4798      	blx	r3
}
     70c:	bf00      	nop
     70e:	3708      	adds	r7, #8
     710:	46bd      	mov	sp, r7
     712:	bd80      	pop	{r7, pc}
     714:	000006a9 	.word	0x000006a9

00000718 <_ZN14MCP23017_Class7pinModeEhh>:

/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23017_Class::pinMode(uint8_t p, uint8_t d) {
     718:	b590      	push	{r4, r7, lr}
     71a:	b085      	sub	sp, #20
     71c:	af02      	add	r7, sp, #8
     71e:	6078      	str	r0, [r7, #4]
     720:	460b      	mov	r3, r1
     722:	70fb      	strb	r3, [r7, #3]
     724:	4613      	mov	r3, r2
     726:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==INPUT),MCP23017_IODIRA,MCP23017_IODIRB);
     728:	78bb      	ldrb	r3, [r7, #2]
     72a:	2b00      	cmp	r3, #0
     72c:	bf0c      	ite	eq
     72e:	2301      	moveq	r3, #1
     730:	2300      	movne	r3, #0
     732:	b2db      	uxtb	r3, r3
     734:	461a      	mov	r2, r3
     736:	78f9      	ldrb	r1, [r7, #3]
     738:	2301      	movs	r3, #1
     73a:	9300      	str	r3, [sp, #0]
     73c:	2300      	movs	r3, #0
     73e:	6878      	ldr	r0, [r7, #4]
     740:	4c02      	ldr	r4, [pc, #8]	; (74c <_ZN14MCP23017_Class7pinModeEhh+0x34>)
     742:	47a0      	blx	r4
}
     744:	bf00      	nop
     746:	370c      	adds	r7, #12
     748:	46bd      	mov	sp, r7
     74a:	bd90      	pop	{r4, r7, pc}
     74c:	0000060d 	.word	0x0000060d

00000750 <_ZN14MCP23017_Class12digitalWriteEhh>:
	array[2]=(uint8_t)(ba)&(0xff);
	i2ca.Write(array,3);
	//while(!i2ca.txReady);
}

void MCP23017_Class::digitalWrite(uint8_t pin, uint8_t d) {
     750:	b590      	push	{r4, r7, lr}
     752:	b085      	sub	sp, #20
     754:	af00      	add	r7, sp, #0
     756:	6078      	str	r0, [r7, #4]
     758:	460b      	mov	r3, r1
     75a:	70fb      	strb	r3, [r7, #3]
     75c:	4613      	mov	r3, r2
     75e:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
     760:	78fb      	ldrb	r3, [r7, #3]
     762:	4619      	mov	r1, r3
     764:	6878      	ldr	r0, [r7, #4]
     766:	4b1e      	ldr	r3, [pc, #120]	; (7e0 <_ZN14MCP23017_Class12digitalWriteEhh+0x90>)
     768:	4798      	blx	r3
     76a:	4603      	mov	r3, r0
     76c:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23017_OLATA,MCP23017_OLATB);
     76e:	78f9      	ldrb	r1, [r7, #3]
     770:	2315      	movs	r3, #21
     772:	2214      	movs	r2, #20
     774:	6878      	ldr	r0, [r7, #4]
     776:	4c1b      	ldr	r4, [pc, #108]	; (7e4 <_ZN14MCP23017_Class12digitalWriteEhh+0x94>)
     778:	47a0      	blx	r4
     77a:	4603      	mov	r3, r0
     77c:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
     77e:	7bfb      	ldrb	r3, [r7, #15]
     780:	4619      	mov	r1, r3
     782:	6878      	ldr	r0, [r7, #4]
     784:	4b18      	ldr	r3, [pc, #96]	; (7e8 <_ZN14MCP23017_Class12digitalWriteEhh+0x98>)
     786:	4798      	blx	r3
     788:	4603      	mov	r3, r0
     78a:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,d);
     78c:	78bb      	ldrb	r3, [r7, #2]
     78e:	2b00      	cmp	r3, #0
     790:	d009      	beq.n	7a6 <_ZN14MCP23017_Class12digitalWriteEhh+0x56>
     792:	7bba      	ldrb	r2, [r7, #14]
     794:	7b7b      	ldrb	r3, [r7, #13]
     796:	4619      	mov	r1, r3
     798:	2301      	movs	r3, #1
     79a:	408b      	lsls	r3, r1
     79c:	b2db      	uxtb	r3, r3
     79e:	4313      	orrs	r3, r2
     7a0:	b2db      	uxtb	r3, r3
     7a2:	73bb      	strb	r3, [r7, #14]
     7a4:	e00a      	b.n	7bc <_ZN14MCP23017_Class12digitalWriteEhh+0x6c>
     7a6:	7bba      	ldrb	r2, [r7, #14]
     7a8:	7b7b      	ldrb	r3, [r7, #13]
     7aa:	4619      	mov	r1, r3
     7ac:	2301      	movs	r3, #1
     7ae:	408b      	lsls	r3, r1
     7b0:	b2db      	uxtb	r3, r3
     7b2:	43db      	mvns	r3, r3
     7b4:	b2db      	uxtb	r3, r3
     7b6:	4013      	ands	r3, r2
     7b8:	b2db      	uxtb	r3, r3
     7ba:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
     7bc:	78f9      	ldrb	r1, [r7, #3]
     7be:	2313      	movs	r3, #19
     7c0:	2212      	movs	r2, #18
     7c2:	6878      	ldr	r0, [r7, #4]
     7c4:	4c07      	ldr	r4, [pc, #28]	; (7e4 <_ZN14MCP23017_Class12digitalWriteEhh+0x94>)
     7c6:	47a0      	blx	r4
     7c8:	4603      	mov	r3, r0
     7ca:	73fb      	strb	r3, [r7, #15]
	writeRegister(regAddr,gpio);
     7cc:	7bba      	ldrb	r2, [r7, #14]
     7ce:	7bfb      	ldrb	r3, [r7, #15]
     7d0:	4619      	mov	r1, r3
     7d2:	6878      	ldr	r0, [r7, #4]
     7d4:	4b05      	ldr	r3, [pc, #20]	; (7ec <_ZN14MCP23017_Class12digitalWriteEhh+0x9c>)
     7d6:	4798      	blx	r3
}
     7d8:	bf00      	nop
     7da:	3714      	adds	r7, #20
     7dc:	46bd      	mov	sp, r7
     7de:	bd90      	pop	{r4, r7, pc}
     7e0:	0000047d 	.word	0x0000047d
     7e4:	0000049b 	.word	0x0000049b
     7e8:	000004cd 	.word	0x000004cd
     7ec:	00000531 	.word	0x00000531

000007f0 <_ZN14MCP23017_Class6pullUpEhh>:

void MCP23017_Class::pullUp(uint8_t p, uint8_t d) {
     7f0:	b590      	push	{r4, r7, lr}
     7f2:	b085      	sub	sp, #20
     7f4:	af02      	add	r7, sp, #8
     7f6:	6078      	str	r0, [r7, #4]
     7f8:	460b      	mov	r3, r1
     7fa:	70fb      	strb	r3, [r7, #3]
     7fc:	4613      	mov	r3, r2
     7fe:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23017_GPPUA,MCP23017_GPPUB);
     800:	78ba      	ldrb	r2, [r7, #2]
     802:	78f9      	ldrb	r1, [r7, #3]
     804:	230d      	movs	r3, #13
     806:	9300      	str	r3, [sp, #0]
     808:	230c      	movs	r3, #12
     80a:	6878      	ldr	r0, [r7, #4]
     80c:	4c02      	ldr	r4, [pc, #8]	; (818 <_ZN14MCP23017_Class6pullUpEhh+0x28>)
     80e:	47a0      	blx	r4
}
     810:	bf00      	nop
     812:	370c      	adds	r7, #12
     814:	46bd      	mov	sp, r7
     816:	bd90      	pop	{r4, r7, pc}
     818:	0000060d 	.word	0x0000060d

0000081c <_ZN14MCP23017_Class11digitalReadEh>:

uint8_t MCP23017_Class::digitalRead(uint8_t pin) {
     81c:	b590      	push	{r4, r7, lr}
     81e:	b085      	sub	sp, #20
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
     824:	460b      	mov	r3, r1
     826:	70fb      	strb	r3, [r7, #3]
	uint8_t bit=bitForPin(pin);
     828:	78fb      	ldrb	r3, [r7, #3]
     82a:	4619      	mov	r1, r3
     82c:	6878      	ldr	r0, [r7, #4]
     82e:	4b0f      	ldr	r3, [pc, #60]	; (86c <_ZN14MCP23017_Class11digitalReadEh+0x50>)
     830:	4798      	blx	r3
     832:	4603      	mov	r3, r0
     834:	73fb      	strb	r3, [r7, #15]
	uint8_t regAddr=regForPin(pin,MCP23017_GPIOA,MCP23017_GPIOB);
     836:	78f9      	ldrb	r1, [r7, #3]
     838:	2313      	movs	r3, #19
     83a:	2212      	movs	r2, #18
     83c:	6878      	ldr	r0, [r7, #4]
     83e:	4c0c      	ldr	r4, [pc, #48]	; (870 <_ZN14MCP23017_Class11digitalReadEh+0x54>)
     840:	47a0      	blx	r4
     842:	4603      	mov	r3, r0
     844:	73bb      	strb	r3, [r7, #14]
	return (readRegister(regAddr) >> bit) & 0x1;
     846:	7bbb      	ldrb	r3, [r7, #14]
     848:	4619      	mov	r1, r3
     84a:	6878      	ldr	r0, [r7, #4]
     84c:	4b09      	ldr	r3, [pc, #36]	; (874 <_ZN14MCP23017_Class11digitalReadEh+0x58>)
     84e:	4798      	blx	r3
     850:	4603      	mov	r3, r0
     852:	461a      	mov	r2, r3
     854:	7bfb      	ldrb	r3, [r7, #15]
     856:	fa42 f303 	asr.w	r3, r2, r3
     85a:	b2db      	uxtb	r3, r3
     85c:	f003 0301 	and.w	r3, r3, #1
     860:	b2db      	uxtb	r3, r3
}
     862:	4618      	mov	r0, r3
     864:	3714      	adds	r7, #20
     866:	46bd      	mov	sp, r7
     868:	bd90      	pop	{r4, r7, pc}
     86a:	bf00      	nop
     86c:	0000047d 	.word	0x0000047d
     870:	0000049b 	.word	0x0000049b
     874:	000004cd 	.word	0x000004cd

00000878 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     878:	b580      	push	{r7, lr}
     87a:	af00      	add	r7, sp, #0
	system_init();
     87c:	4b03      	ldr	r3, [pc, #12]	; (88c <atmel_start_init+0x14>)
     87e:	4798      	blx	r3
	usb_init();
     880:	4b03      	ldr	r3, [pc, #12]	; (890 <atmel_start_init+0x18>)
     882:	4798      	blx	r3
	spi_nor_flash_init();
     884:	4b03      	ldr	r3, [pc, #12]	; (894 <atmel_start_init+0x1c>)
     886:	4798      	blx	r3
}
     888:	bf00      	nop
     88a:	bd80      	pop	{r7, pc}
     88c:	00001975 	.word	0x00001975
     890:	0000a5bd 	.word	0x0000a5bd
     894:	0000a551 	.word	0x0000a551

00000898 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     898:	b480      	push	{r7}
     89a:	b085      	sub	sp, #20
     89c:	af00      	add	r7, sp, #0
     89e:	60f8      	str	r0, [r7, #12]
     8a0:	460b      	mov	r3, r1
     8a2:	607a      	str	r2, [r7, #4]
     8a4:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     8a6:	7afa      	ldrb	r2, [r7, #11]
     8a8:	68fb      	ldr	r3, [r7, #12]
     8aa:	3220      	adds	r2, #32
     8ac:	6879      	ldr	r1, [r7, #4]
     8ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     8b2:	bf00      	nop
     8b4:	3714      	adds	r7, #20
     8b6:	46bd      	mov	sp, r7
     8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8bc:	4770      	bx	lr

000008be <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     8be:	b480      	push	{r7}
     8c0:	b083      	sub	sp, #12
     8c2:	af00      	add	r7, sp, #0
     8c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	691b      	ldr	r3, [r3, #16]
     8ca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     8ce:	687b      	ldr	r3, [r7, #4]
     8d0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8d2:	bf00      	nop
     8d4:	370c      	adds	r7, #12
     8d6:	46bd      	mov	sp, r7
     8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8dc:	4770      	bx	lr

000008de <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     8de:	b480      	push	{r7}
     8e0:	b083      	sub	sp, #12
     8e2:	af00      	add	r7, sp, #0
     8e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     8e6:	687b      	ldr	r3, [r7, #4]
     8e8:	691b      	ldr	r3, [r3, #16]
     8ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     8f2:	bf00      	nop
     8f4:	370c      	adds	r7, #12
     8f6:	46bd      	mov	sp, r7
     8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fc:	4770      	bx	lr

000008fe <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     8fe:	b480      	push	{r7}
     900:	b083      	sub	sp, #12
     902:	af00      	add	r7, sp, #0
     904:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     906:	687b      	ldr	r3, [r7, #4]
     908:	691b      	ldr	r3, [r3, #16]
     90a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     90e:	687b      	ldr	r3, [r7, #4]
     910:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     912:	bf00      	nop
     914:	370c      	adds	r7, #12
     916:	46bd      	mov	sp, r7
     918:	f85d 7b04 	ldr.w	r7, [sp], #4
     91c:	4770      	bx	lr

0000091e <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     91e:	b480      	push	{r7}
     920:	b083      	sub	sp, #12
     922:	af00      	add	r7, sp, #0
     924:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     926:	687b      	ldr	r3, [r7, #4]
     928:	691b      	ldr	r3, [r3, #16]
     92a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     92e:	687b      	ldr	r3, [r7, #4]
     930:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     932:	bf00      	nop
     934:	370c      	adds	r7, #12
     936:	46bd      	mov	sp, r7
     938:	f85d 7b04 	ldr.w	r7, [sp], #4
     93c:	4770      	bx	lr

0000093e <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     93e:	b480      	push	{r7}
     940:	b083      	sub	sp, #12
     942:	af00      	add	r7, sp, #0
     944:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     946:	687b      	ldr	r3, [r7, #4]
     948:	695b      	ldr	r3, [r3, #20]
     94a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     94e:	687b      	ldr	r3, [r7, #4]
     950:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     952:	bf00      	nop
     954:	370c      	adds	r7, #12
     956:	46bd      	mov	sp, r7
     958:	f85d 7b04 	ldr.w	r7, [sp], #4
     95c:	4770      	bx	lr

0000095e <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     95e:	b480      	push	{r7}
     960:	b083      	sub	sp, #12
     962:	af00      	add	r7, sp, #0
     964:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     966:	687b      	ldr	r3, [r7, #4]
     968:	695b      	ldr	r3, [r3, #20]
     96a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     96e:	687b      	ldr	r3, [r7, #4]
     970:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     972:	bf00      	nop
     974:	370c      	adds	r7, #12
     976:	46bd      	mov	sp, r7
     978:	f85d 7b04 	ldr.w	r7, [sp], #4
     97c:	4770      	bx	lr

0000097e <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     97e:	b480      	push	{r7}
     980:	b083      	sub	sp, #12
     982:	af00      	add	r7, sp, #0
     984:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     986:	687b      	ldr	r3, [r7, #4]
     988:	695b      	ldr	r3, [r3, #20]
     98a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     98e:	687b      	ldr	r3, [r7, #4]
     990:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     992:	bf00      	nop
     994:	370c      	adds	r7, #12
     996:	46bd      	mov	sp, r7
     998:	f85d 7b04 	ldr.w	r7, [sp], #4
     99c:	4770      	bx	lr

0000099e <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     99e:	b480      	push	{r7}
     9a0:	b083      	sub	sp, #12
     9a2:	af00      	add	r7, sp, #0
     9a4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     9a6:	687b      	ldr	r3, [r7, #4]
     9a8:	695b      	ldr	r3, [r3, #20]
     9aa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     9ae:	687b      	ldr	r3, [r7, #4]
     9b0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9b2:	bf00      	nop
     9b4:	370c      	adds	r7, #12
     9b6:	46bd      	mov	sp, r7
     9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     9bc:	4770      	bx	lr

000009be <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     9be:	b480      	push	{r7}
     9c0:	b083      	sub	sp, #12
     9c2:	af00      	add	r7, sp, #0
     9c4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	695b      	ldr	r3, [r3, #20]
     9ca:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9d2:	bf00      	nop
     9d4:	370c      	adds	r7, #12
     9d6:	46bd      	mov	sp, r7
     9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     9dc:	4770      	bx	lr

000009de <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     9de:	b480      	push	{r7}
     9e0:	b083      	sub	sp, #12
     9e2:	af00      	add	r7, sp, #0
     9e4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	699b      	ldr	r3, [r3, #24]
     9ea:	f043 0201 	orr.w	r2, r3, #1
     9ee:	687b      	ldr	r3, [r7, #4]
     9f0:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9f2:	bf00      	nop
     9f4:	370c      	adds	r7, #12
     9f6:	46bd      	mov	sp, r7
     9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     9fc:	4770      	bx	lr

000009fe <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     9fe:	b480      	push	{r7}
     a00:	b083      	sub	sp, #12
     a02:	af00      	add	r7, sp, #0
     a04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     a06:	687b      	ldr	r3, [r7, #4]
     a08:	699b      	ldr	r3, [r3, #24]
     a0a:	f043 0202 	orr.w	r2, r3, #2
     a0e:	687b      	ldr	r3, [r7, #4]
     a10:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a12:	bf00      	nop
     a14:	370c      	adds	r7, #12
     a16:	46bd      	mov	sp, r7
     a18:	f85d 7b04 	ldr.w	r7, [sp], #4
     a1c:	4770      	bx	lr

00000a1e <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     a1e:	b480      	push	{r7}
     a20:	b083      	sub	sp, #12
     a22:	af00      	add	r7, sp, #0
     a24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	699b      	ldr	r3, [r3, #24]
     a2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     a2e:	687b      	ldr	r3, [r7, #4]
     a30:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a32:	bf00      	nop
     a34:	370c      	adds	r7, #12
     a36:	46bd      	mov	sp, r7
     a38:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3c:	4770      	bx	lr

00000a3e <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     a3e:	b480      	push	{r7}
     a40:	b083      	sub	sp, #12
     a42:	af00      	add	r7, sp, #0
     a44:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	699b      	ldr	r3, [r3, #24]
     a4a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     a4e:	687b      	ldr	r3, [r7, #4]
     a50:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a52:	bf00      	nop
     a54:	370c      	adds	r7, #12
     a56:	46bd      	mov	sp, r7
     a58:	f85d 7b04 	ldr.w	r7, [sp], #4
     a5c:	4770      	bx	lr

00000a5e <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     a5e:	b480      	push	{r7}
     a60:	b083      	sub	sp, #12
     a62:	af00      	add	r7, sp, #0
     a64:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	699b      	ldr	r3, [r3, #24]
     a6a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     a6e:	687b      	ldr	r3, [r7, #4]
     a70:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a72:	bf00      	nop
     a74:	370c      	adds	r7, #12
     a76:	46bd      	mov	sp, r7
     a78:	f85d 7b04 	ldr.w	r7, [sp], #4
     a7c:	4770      	bx	lr

00000a7e <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     a7e:	b480      	push	{r7}
     a80:	b083      	sub	sp, #12
     a82:	af00      	add	r7, sp, #0
     a84:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	69db      	ldr	r3, [r3, #28]
     a8a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a92:	bf00      	nop
     a94:	370c      	adds	r7, #12
     a96:	46bd      	mov	sp, r7
     a98:	f85d 7b04 	ldr.w	r7, [sp], #4
     a9c:	4770      	bx	lr

00000a9e <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     a9e:	b480      	push	{r7}
     aa0:	b083      	sub	sp, #12
     aa2:	af00      	add	r7, sp, #0
     aa4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     aa6:	687b      	ldr	r3, [r7, #4]
     aa8:	6a1b      	ldr	r3, [r3, #32]
     aaa:	f043 0201 	orr.w	r2, r3, #1
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ab2:	bf00      	nop
     ab4:	370c      	adds	r7, #12
     ab6:	46bd      	mov	sp, r7
     ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
     abc:	4770      	bx	lr

00000abe <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     abe:	b480      	push	{r7}
     ac0:	b083      	sub	sp, #12
     ac2:	af00      	add	r7, sp, #0
     ac4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6a1b      	ldr	r3, [r3, #32]
     aca:	f043 0202 	orr.w	r2, r3, #2
     ace:	687b      	ldr	r3, [r7, #4]
     ad0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ad2:	bf00      	nop
     ad4:	370c      	adds	r7, #12
     ad6:	46bd      	mov	sp, r7
     ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
     adc:	4770      	bx	lr

00000ade <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     ade:	b480      	push	{r7}
     ae0:	b083      	sub	sp, #12
     ae2:	af00      	add	r7, sp, #0
     ae4:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     ae6:	687b      	ldr	r3, [r7, #4]
     ae8:	6a1b      	ldr	r3, [r3, #32]
     aea:	f043 0204 	orr.w	r2, r3, #4
     aee:	687b      	ldr	r3, [r7, #4]
     af0:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     af2:	bf00      	nop
     af4:	370c      	adds	r7, #12
     af6:	46bd      	mov	sp, r7
     af8:	f85d 7b04 	ldr.w	r7, [sp], #4
     afc:	4770      	bx	lr

00000afe <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     afe:	b480      	push	{r7}
     b00:	b083      	sub	sp, #12
     b02:	af00      	add	r7, sp, #0
     b04:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	6a1b      	ldr	r3, [r3, #32]
     b0a:	f043 0208 	orr.w	r2, r3, #8
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b12:	bf00      	nop
     b14:	370c      	adds	r7, #12
     b16:	46bd      	mov	sp, r7
     b18:	f85d 7b04 	ldr.w	r7, [sp], #4
     b1c:	4770      	bx	lr

00000b1e <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     b1e:	b480      	push	{r7}
     b20:	b083      	sub	sp, #12
     b22:	af00      	add	r7, sp, #0
     b24:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	6a1b      	ldr	r3, [r3, #32]
     b2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     b2e:	687b      	ldr	r3, [r7, #4]
     b30:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b32:	bf00      	nop
     b34:	370c      	adds	r7, #12
     b36:	46bd      	mov	sp, r7
     b38:	f85d 7b04 	ldr.w	r7, [sp], #4
     b3c:	4770      	bx	lr

00000b3e <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     b3e:	b480      	push	{r7}
     b40:	b085      	sub	sp, #20
     b42:	af00      	add	r7, sp, #0
     b44:	60f8      	str	r0, [r7, #12]
     b46:	460b      	mov	r3, r1
     b48:	607a      	str	r2, [r7, #4]
     b4a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b4c:	7afb      	ldrb	r3, [r7, #11]
     b4e:	68fa      	ldr	r2, [r7, #12]
     b50:	01db      	lsls	r3, r3, #7
     b52:	4413      	add	r3, r2
     b54:	3308      	adds	r3, #8
     b56:	687a      	ldr	r2, [r7, #4]
     b58:	601a      	str	r2, [r3, #0]
}
     b5a:	bf00      	nop
     b5c:	3714      	adds	r7, #20
     b5e:	46bd      	mov	sp, r7
     b60:	f85d 7b04 	ldr.w	r7, [sp], #4
     b64:	4770      	bx	lr

00000b66 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     b66:	b480      	push	{r7}
     b68:	b085      	sub	sp, #20
     b6a:	af00      	add	r7, sp, #0
     b6c:	60f8      	str	r0, [r7, #12]
     b6e:	460b      	mov	r3, r1
     b70:	607a      	str	r2, [r7, #4]
     b72:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b74:	7afb      	ldrb	r3, [r7, #11]
     b76:	68fa      	ldr	r2, [r7, #12]
     b78:	01db      	lsls	r3, r3, #7
     b7a:	4413      	add	r3, r2
     b7c:	3304      	adds	r3, #4
     b7e:	687a      	ldr	r2, [r7, #4]
     b80:	601a      	str	r2, [r3, #0]
}
     b82:	bf00      	nop
     b84:	3714      	adds	r7, #20
     b86:	46bd      	mov	sp, r7
     b88:	f85d 7b04 	ldr.w	r7, [sp], #4
     b8c:	4770      	bx	lr

00000b8e <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     b8e:	b480      	push	{r7}
     b90:	b085      	sub	sp, #20
     b92:	af00      	add	r7, sp, #0
     b94:	60f8      	str	r0, [r7, #12]
     b96:	460b      	mov	r3, r1
     b98:	607a      	str	r2, [r7, #4]
     b9a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b9c:	7afb      	ldrb	r3, [r7, #11]
     b9e:	68fa      	ldr	r2, [r7, #12]
     ba0:	01db      	lsls	r3, r3, #7
     ba2:	4413      	add	r3, r2
     ba4:	3318      	adds	r3, #24
     ba6:	687a      	ldr	r2, [r7, #4]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	bf00      	nop
     bac:	3714      	adds	r7, #20
     bae:	46bd      	mov	sp, r7
     bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb4:	4770      	bx	lr

00000bb6 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     bb6:	b480      	push	{r7}
     bb8:	b085      	sub	sp, #20
     bba:	af00      	add	r7, sp, #0
     bbc:	60f8      	str	r0, [r7, #12]
     bbe:	460b      	mov	r3, r1
     bc0:	607a      	str	r2, [r7, #4]
     bc2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bc4:	7afb      	ldrb	r3, [r7, #11]
     bc6:	68fa      	ldr	r2, [r7, #12]
     bc8:	01db      	lsls	r3, r3, #7
     bca:	4413      	add	r3, r2
     bcc:	3314      	adds	r3, #20
     bce:	687a      	ldr	r2, [r7, #4]
     bd0:	601a      	str	r2, [r3, #0]
}
     bd2:	bf00      	nop
     bd4:	3714      	adds	r7, #20
     bd6:	46bd      	mov	sp, r7
     bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
     bdc:	4770      	bx	lr

00000bde <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     bde:	b480      	push	{r7}
     be0:	b085      	sub	sp, #20
     be2:	af00      	add	r7, sp, #0
     be4:	6078      	str	r0, [r7, #4]
     be6:	4608      	mov	r0, r1
     be8:	4611      	mov	r1, r2
     bea:	461a      	mov	r2, r3
     bec:	4603      	mov	r3, r0
     bee:	70fb      	strb	r3, [r7, #3]
     bf0:	460b      	mov	r3, r1
     bf2:	70bb      	strb	r3, [r7, #2]
     bf4:	4613      	mov	r3, r2
     bf6:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bf8:	78fa      	ldrb	r2, [r7, #3]
     bfa:	78bb      	ldrb	r3, [r7, #2]
     bfc:	6879      	ldr	r1, [r7, #4]
     bfe:	01d2      	lsls	r2, r2, #7
     c00:	440a      	add	r2, r1
     c02:	4413      	add	r3, r2
     c04:	3330      	adds	r3, #48	; 0x30
     c06:	781b      	ldrb	r3, [r3, #0]
     c08:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c0a:	7bfb      	ldrb	r3, [r7, #15]
     c0c:	f023 030f 	bic.w	r3, r3, #15
     c10:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     c12:	787b      	ldrb	r3, [r7, #1]
     c14:	f003 030f 	and.w	r3, r3, #15
     c18:	b2da      	uxtb	r2, r3
     c1a:	7bfb      	ldrb	r3, [r7, #15]
     c1c:	4313      	orrs	r3, r2
     c1e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c20:	78fa      	ldrb	r2, [r7, #3]
     c22:	78bb      	ldrb	r3, [r7, #2]
     c24:	6879      	ldr	r1, [r7, #4]
     c26:	01d2      	lsls	r2, r2, #7
     c28:	440a      	add	r2, r1
     c2a:	4413      	add	r3, r2
     c2c:	3330      	adds	r3, #48	; 0x30
     c2e:	7bfa      	ldrb	r2, [r7, #15]
     c30:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c32:	bf00      	nop
     c34:	3714      	adds	r7, #20
     c36:	46bd      	mov	sp, r7
     c38:	f85d 7b04 	ldr.w	r7, [sp], #4
     c3c:	4770      	bx	lr

00000c3e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     c3e:	b480      	push	{r7}
     c40:	b085      	sub	sp, #20
     c42:	af00      	add	r7, sp, #0
     c44:	6078      	str	r0, [r7, #4]
     c46:	4608      	mov	r0, r1
     c48:	4611      	mov	r1, r2
     c4a:	461a      	mov	r2, r3
     c4c:	4603      	mov	r3, r0
     c4e:	70fb      	strb	r3, [r7, #3]
     c50:	460b      	mov	r3, r1
     c52:	70bb      	strb	r3, [r7, #2]
     c54:	4613      	mov	r3, r2
     c56:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c58:	78fa      	ldrb	r2, [r7, #3]
     c5a:	78bb      	ldrb	r3, [r7, #2]
     c5c:	6879      	ldr	r1, [r7, #4]
     c5e:	01d2      	lsls	r2, r2, #7
     c60:	440a      	add	r2, r1
     c62:	4413      	add	r3, r2
     c64:	3330      	adds	r3, #48	; 0x30
     c66:	781b      	ldrb	r3, [r3, #0]
     c68:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c6a:	7bfb      	ldrb	r3, [r7, #15]
     c6c:	f003 030f 	and.w	r3, r3, #15
     c70:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     c72:	787b      	ldrb	r3, [r7, #1]
     c74:	011b      	lsls	r3, r3, #4
     c76:	b2da      	uxtb	r2, r3
     c78:	7bfb      	ldrb	r3, [r7, #15]
     c7a:	4313      	orrs	r3, r2
     c7c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c7e:	78fa      	ldrb	r2, [r7, #3]
     c80:	78bb      	ldrb	r3, [r7, #2]
     c82:	6879      	ldr	r1, [r7, #4]
     c84:	01d2      	lsls	r2, r2, #7
     c86:	440a      	add	r2, r1
     c88:	4413      	add	r3, r2
     c8a:	3330      	adds	r3, #48	; 0x30
     c8c:	7bfa      	ldrb	r2, [r7, #15]
     c8e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     c90:	bf00      	nop
     c92:	3714      	adds	r7, #20
     c94:	46bd      	mov	sp, r7
     c96:	f85d 7b04 	ldr.w	r7, [sp], #4
     c9a:	4770      	bx	lr

00000c9c <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     c9c:	b480      	push	{r7}
     c9e:	b085      	sub	sp, #20
     ca0:	af00      	add	r7, sp, #0
     ca2:	6078      	str	r0, [r7, #4]
     ca4:	4608      	mov	r0, r1
     ca6:	4611      	mov	r1, r2
     ca8:	461a      	mov	r2, r3
     caa:	4603      	mov	r3, r0
     cac:	70fb      	strb	r3, [r7, #3]
     cae:	460b      	mov	r3, r1
     cb0:	70bb      	strb	r3, [r7, #2]
     cb2:	4613      	mov	r3, r2
     cb4:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cb6:	78fa      	ldrb	r2, [r7, #3]
     cb8:	78bb      	ldrb	r3, [r7, #2]
     cba:	6879      	ldr	r1, [r7, #4]
     cbc:	01d2      	lsls	r2, r2, #7
     cbe:	440a      	add	r2, r1
     cc0:	4413      	add	r3, r2
     cc2:	3340      	adds	r3, #64	; 0x40
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     cc8:	7bfb      	ldrb	r3, [r7, #15]
     cca:	f023 0301 	bic.w	r3, r3, #1
     cce:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cd0:	787a      	ldrb	r2, [r7, #1]
     cd2:	7bfb      	ldrb	r3, [r7, #15]
     cd4:	4313      	orrs	r3, r2
     cd6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cd8:	78fa      	ldrb	r2, [r7, #3]
     cda:	78bb      	ldrb	r3, [r7, #2]
     cdc:	6879      	ldr	r1, [r7, #4]
     cde:	01d2      	lsls	r2, r2, #7
     ce0:	440a      	add	r2, r1
     ce2:	4413      	add	r3, r2
     ce4:	3340      	adds	r3, #64	; 0x40
     ce6:	7bfa      	ldrb	r2, [r7, #15]
     ce8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     cea:	bf00      	nop
     cec:	3714      	adds	r7, #20
     cee:	46bd      	mov	sp, r7
     cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
     cf4:	4770      	bx	lr

00000cf6 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     cf6:	b490      	push	{r4, r7}
     cf8:	b082      	sub	sp, #8
     cfa:	af00      	add	r7, sp, #0
     cfc:	6078      	str	r0, [r7, #4]
     cfe:	460b      	mov	r3, r1
     d00:	70fb      	strb	r3, [r7, #3]
     d02:	4613      	mov	r3, r2
     d04:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     d06:	78fa      	ldrb	r2, [r7, #3]
     d08:	78bb      	ldrb	r3, [r7, #2]
     d0a:	78f8      	ldrb	r0, [r7, #3]
     d0c:	78b9      	ldrb	r1, [r7, #2]
     d0e:	687c      	ldr	r4, [r7, #4]
     d10:	01c0      	lsls	r0, r0, #7
     d12:	4420      	add	r0, r4
     d14:	4401      	add	r1, r0
     d16:	3140      	adds	r1, #64	; 0x40
     d18:	7809      	ldrb	r1, [r1, #0]
     d1a:	b2c9      	uxtb	r1, r1
     d1c:	f041 0104 	orr.w	r1, r1, #4
     d20:	b2c8      	uxtb	r0, r1
     d22:	6879      	ldr	r1, [r7, #4]
     d24:	01d2      	lsls	r2, r2, #7
     d26:	440a      	add	r2, r1
     d28:	4413      	add	r3, r2
     d2a:	3340      	adds	r3, #64	; 0x40
     d2c:	4602      	mov	r2, r0
     d2e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     d30:	bf00      	nop
     d32:	3708      	adds	r7, #8
     d34:	46bd      	mov	sp, r7
     d36:	bc90      	pop	{r4, r7}
     d38:	4770      	bx	lr

00000d3a <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     d3a:	b490      	push	{r4, r7}
     d3c:	b082      	sub	sp, #8
     d3e:	af00      	add	r7, sp, #0
     d40:	6078      	str	r0, [r7, #4]
     d42:	460b      	mov	r3, r1
     d44:	70fb      	strb	r3, [r7, #3]
     d46:	4613      	mov	r3, r2
     d48:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d4a:	78fa      	ldrb	r2, [r7, #3]
     d4c:	78bb      	ldrb	r3, [r7, #2]
     d4e:	78f8      	ldrb	r0, [r7, #3]
     d50:	78b9      	ldrb	r1, [r7, #2]
     d52:	687c      	ldr	r4, [r7, #4]
     d54:	01c0      	lsls	r0, r0, #7
     d56:	4420      	add	r0, r4
     d58:	4401      	add	r1, r0
     d5a:	3140      	adds	r1, #64	; 0x40
     d5c:	7809      	ldrb	r1, [r1, #0]
     d5e:	b2c9      	uxtb	r1, r1
     d60:	f021 0104 	bic.w	r1, r1, #4
     d64:	b2c8      	uxtb	r0, r1
     d66:	6879      	ldr	r1, [r7, #4]
     d68:	01d2      	lsls	r2, r2, #7
     d6a:	440a      	add	r2, r1
     d6c:	4413      	add	r3, r2
     d6e:	3340      	adds	r3, #64	; 0x40
     d70:	4602      	mov	r2, r0
     d72:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     d74:	bf00      	nop
     d76:	3708      	adds	r7, #8
     d78:	46bd      	mov	sp, r7
     d7a:	bc90      	pop	{r4, r7}
     d7c:	4770      	bx	lr

00000d7e <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     d7e:	b480      	push	{r7}
     d80:	b085      	sub	sp, #20
     d82:	af00      	add	r7, sp, #0
     d84:	60f8      	str	r0, [r7, #12]
     d86:	460b      	mov	r3, r1
     d88:	607a      	str	r2, [r7, #4]
     d8a:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d8c:	7afb      	ldrb	r3, [r7, #11]
     d8e:	68fa      	ldr	r2, [r7, #12]
     d90:	01db      	lsls	r3, r3, #7
     d92:	4413      	add	r3, r2
     d94:	3328      	adds	r3, #40	; 0x28
     d96:	687a      	ldr	r2, [r7, #4]
     d98:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     d9a:	bf00      	nop
     d9c:	3714      	adds	r7, #20
     d9e:	46bd      	mov	sp, r7
     da0:	f85d 7b04 	ldr.w	r7, [sp], #4
     da4:	4770      	bx	lr
	...

00000da8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     da8:	b580      	push	{r7, lr}
     daa:	b082      	sub	sp, #8
     dac:	af00      	add	r7, sp, #0
     dae:	4603      	mov	r3, r0
     db0:	6039      	str	r1, [r7, #0]
     db2:	71fb      	strb	r3, [r7, #7]
     db4:	4613      	mov	r3, r2
     db6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     db8:	79bb      	ldrb	r3, [r7, #6]
     dba:	2b01      	cmp	r3, #1
     dbc:	d01c      	beq.n	df8 <_gpio_set_direction+0x50>
     dbe:	2b02      	cmp	r3, #2
     dc0:	d037      	beq.n	e32 <_gpio_set_direction+0x8a>
     dc2:	2b00      	cmp	r3, #0
     dc4:	d14e      	bne.n	e64 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     dc6:	79fb      	ldrb	r3, [r7, #7]
     dc8:	683a      	ldr	r2, [r7, #0]
     dca:	4619      	mov	r1, r3
     dcc:	482a      	ldr	r0, [pc, #168]	; (e78 <_gpio_set_direction+0xd0>)
     dce:	4b2b      	ldr	r3, [pc, #172]	; (e7c <_gpio_set_direction+0xd4>)
     dd0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     dd2:	683b      	ldr	r3, [r7, #0]
     dd4:	b29b      	uxth	r3, r3
     dd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     dda:	79fb      	ldrb	r3, [r7, #7]
     ddc:	4619      	mov	r1, r3
     dde:	4826      	ldr	r0, [pc, #152]	; (e78 <_gpio_set_direction+0xd0>)
     de0:	4b27      	ldr	r3, [pc, #156]	; (e80 <_gpio_set_direction+0xd8>)
     de2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     de4:	683b      	ldr	r3, [r7, #0]
     de6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     de8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     dec:	79fb      	ldrb	r3, [r7, #7]
     dee:	4619      	mov	r1, r3
     df0:	4821      	ldr	r0, [pc, #132]	; (e78 <_gpio_set_direction+0xd0>)
     df2:	4b23      	ldr	r3, [pc, #140]	; (e80 <_gpio_set_direction+0xd8>)
     df4:	4798      	blx	r3
		break;
     df6:	e03a      	b.n	e6e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     df8:	79fb      	ldrb	r3, [r7, #7]
     dfa:	683a      	ldr	r2, [r7, #0]
     dfc:	4619      	mov	r1, r3
     dfe:	481e      	ldr	r0, [pc, #120]	; (e78 <_gpio_set_direction+0xd0>)
     e00:	4b1e      	ldr	r3, [pc, #120]	; (e7c <_gpio_set_direction+0xd4>)
     e02:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     e04:	683b      	ldr	r3, [r7, #0]
     e06:	b29b      	uxth	r3, r3
     e08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     e10:	79f9      	ldrb	r1, [r7, #7]
     e12:	461a      	mov	r2, r3
     e14:	4818      	ldr	r0, [pc, #96]	; (e78 <_gpio_set_direction+0xd0>)
     e16:	4b1a      	ldr	r3, [pc, #104]	; (e80 <_gpio_set_direction+0xd8>)
     e18:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     e1a:	683b      	ldr	r3, [r7, #0]
     e1c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     e1e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     e26:	79f9      	ldrb	r1, [r7, #7]
     e28:	461a      	mov	r2, r3
     e2a:	4813      	ldr	r0, [pc, #76]	; (e78 <_gpio_set_direction+0xd0>)
     e2c:	4b14      	ldr	r3, [pc, #80]	; (e80 <_gpio_set_direction+0xd8>)
     e2e:	4798      	blx	r3
		break;
     e30:	e01d      	b.n	e6e <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     e32:	79fb      	ldrb	r3, [r7, #7]
     e34:	683a      	ldr	r2, [r7, #0]
     e36:	4619      	mov	r1, r3
     e38:	480f      	ldr	r0, [pc, #60]	; (e78 <_gpio_set_direction+0xd0>)
     e3a:	4b12      	ldr	r3, [pc, #72]	; (e84 <_gpio_set_direction+0xdc>)
     e3c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     e3e:	683b      	ldr	r3, [r7, #0]
     e40:	b29b      	uxth	r3, r3
     e42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     e46:	79fb      	ldrb	r3, [r7, #7]
     e48:	4619      	mov	r1, r3
     e4a:	480b      	ldr	r0, [pc, #44]	; (e78 <_gpio_set_direction+0xd0>)
     e4c:	4b0c      	ldr	r3, [pc, #48]	; (e80 <_gpio_set_direction+0xd8>)
     e4e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     e50:	683b      	ldr	r3, [r7, #0]
     e52:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     e54:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     e58:	79fb      	ldrb	r3, [r7, #7]
     e5a:	4619      	mov	r1, r3
     e5c:	4806      	ldr	r0, [pc, #24]	; (e78 <_gpio_set_direction+0xd0>)
     e5e:	4b08      	ldr	r3, [pc, #32]	; (e80 <_gpio_set_direction+0xd8>)
     e60:	4798      	blx	r3
		break;
     e62:	e004      	b.n	e6e <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     e64:	2246      	movs	r2, #70	; 0x46
     e66:	4908      	ldr	r1, [pc, #32]	; (e88 <_gpio_set_direction+0xe0>)
     e68:	2000      	movs	r0, #0
     e6a:	4b08      	ldr	r3, [pc, #32]	; (e8c <_gpio_set_direction+0xe4>)
     e6c:	4798      	blx	r3
	}
}
     e6e:	bf00      	nop
     e70:	3708      	adds	r7, #8
     e72:	46bd      	mov	sp, r7
     e74:	bd80      	pop	{r7, pc}
     e76:	bf00      	nop
     e78:	41008000 	.word	0x41008000
     e7c:	00000b67 	.word	0x00000b67
     e80:	00000d7f 	.word	0x00000d7f
     e84:	00000b3f 	.word	0x00000b3f
     e88:	0000cb74 	.word	0x0000cb74
     e8c:	00003249 	.word	0x00003249

00000e90 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     e90:	b580      	push	{r7, lr}
     e92:	b082      	sub	sp, #8
     e94:	af00      	add	r7, sp, #0
     e96:	4603      	mov	r3, r0
     e98:	6039      	str	r1, [r7, #0]
     e9a:	71fb      	strb	r3, [r7, #7]
     e9c:	4613      	mov	r3, r2
     e9e:	71bb      	strb	r3, [r7, #6]
	if (level) {
     ea0:	79bb      	ldrb	r3, [r7, #6]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d006      	beq.n	eb4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     ea6:	79fb      	ldrb	r3, [r7, #7]
     ea8:	683a      	ldr	r2, [r7, #0]
     eaa:	4619      	mov	r1, r3
     eac:	4806      	ldr	r0, [pc, #24]	; (ec8 <_gpio_set_level+0x38>)
     eae:	4b07      	ldr	r3, [pc, #28]	; (ecc <_gpio_set_level+0x3c>)
     eb0:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     eb2:	e005      	b.n	ec0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     eb4:	79fb      	ldrb	r3, [r7, #7]
     eb6:	683a      	ldr	r2, [r7, #0]
     eb8:	4619      	mov	r1, r3
     eba:	4803      	ldr	r0, [pc, #12]	; (ec8 <_gpio_set_level+0x38>)
     ebc:	4b04      	ldr	r3, [pc, #16]	; (ed0 <_gpio_set_level+0x40>)
     ebe:	4798      	blx	r3
}
     ec0:	bf00      	nop
     ec2:	3708      	adds	r7, #8
     ec4:	46bd      	mov	sp, r7
     ec6:	bd80      	pop	{r7, pc}
     ec8:	41008000 	.word	0x41008000
     ecc:	00000b8f 	.word	0x00000b8f
     ed0:	00000bb7 	.word	0x00000bb7

00000ed4 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     ed4:	b580      	push	{r7, lr}
     ed6:	b082      	sub	sp, #8
     ed8:	af00      	add	r7, sp, #0
     eda:	4603      	mov	r3, r0
     edc:	71fb      	strb	r3, [r7, #7]
     ede:	460b      	mov	r3, r1
     ee0:	71bb      	strb	r3, [r7, #6]
     ee2:	4613      	mov	r3, r2
     ee4:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     ee6:	797b      	ldrb	r3, [r7, #5]
     ee8:	2b01      	cmp	r3, #1
     eea:	d00a      	beq.n	f02 <_gpio_set_pin_pull_mode+0x2e>
     eec:	2b02      	cmp	r3, #2
     eee:	d01f      	beq.n	f30 <_gpio_set_pin_pull_mode+0x5c>
     ef0:	2b00      	cmp	r3, #0
     ef2:	d134      	bne.n	f5e <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     ef4:	79ba      	ldrb	r2, [r7, #6]
     ef6:	79fb      	ldrb	r3, [r7, #7]
     ef8:	4619      	mov	r1, r3
     efa:	481e      	ldr	r0, [pc, #120]	; (f74 <_gpio_set_pin_pull_mode+0xa0>)
     efc:	4b1e      	ldr	r3, [pc, #120]	; (f78 <_gpio_set_pin_pull_mode+0xa4>)
     efe:	4798      	blx	r3
		break;
     f00:	e033      	b.n	f6a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     f02:	79bb      	ldrb	r3, [r7, #6]
     f04:	2201      	movs	r2, #1
     f06:	409a      	lsls	r2, r3
     f08:	79fb      	ldrb	r3, [r7, #7]
     f0a:	4619      	mov	r1, r3
     f0c:	4819      	ldr	r0, [pc, #100]	; (f74 <_gpio_set_pin_pull_mode+0xa0>)
     f0e:	4b1b      	ldr	r3, [pc, #108]	; (f7c <_gpio_set_pin_pull_mode+0xa8>)
     f10:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     f12:	79ba      	ldrb	r2, [r7, #6]
     f14:	79fb      	ldrb	r3, [r7, #7]
     f16:	4619      	mov	r1, r3
     f18:	4816      	ldr	r0, [pc, #88]	; (f74 <_gpio_set_pin_pull_mode+0xa0>)
     f1a:	4b19      	ldr	r3, [pc, #100]	; (f80 <_gpio_set_pin_pull_mode+0xac>)
     f1c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     f1e:	79bb      	ldrb	r3, [r7, #6]
     f20:	2201      	movs	r2, #1
     f22:	409a      	lsls	r2, r3
     f24:	79fb      	ldrb	r3, [r7, #7]
     f26:	4619      	mov	r1, r3
     f28:	4812      	ldr	r0, [pc, #72]	; (f74 <_gpio_set_pin_pull_mode+0xa0>)
     f2a:	4b16      	ldr	r3, [pc, #88]	; (f84 <_gpio_set_pin_pull_mode+0xb0>)
     f2c:	4798      	blx	r3
		break;
     f2e:	e01c      	b.n	f6a <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     f30:	79bb      	ldrb	r3, [r7, #6]
     f32:	2201      	movs	r2, #1
     f34:	409a      	lsls	r2, r3
     f36:	79fb      	ldrb	r3, [r7, #7]
     f38:	4619      	mov	r1, r3
     f3a:	480e      	ldr	r0, [pc, #56]	; (f74 <_gpio_set_pin_pull_mode+0xa0>)
     f3c:	4b0f      	ldr	r3, [pc, #60]	; (f7c <_gpio_set_pin_pull_mode+0xa8>)
     f3e:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     f40:	79ba      	ldrb	r2, [r7, #6]
     f42:	79fb      	ldrb	r3, [r7, #7]
     f44:	4619      	mov	r1, r3
     f46:	480b      	ldr	r0, [pc, #44]	; (f74 <_gpio_set_pin_pull_mode+0xa0>)
     f48:	4b0d      	ldr	r3, [pc, #52]	; (f80 <_gpio_set_pin_pull_mode+0xac>)
     f4a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     f4c:	79bb      	ldrb	r3, [r7, #6]
     f4e:	2201      	movs	r2, #1
     f50:	409a      	lsls	r2, r3
     f52:	79fb      	ldrb	r3, [r7, #7]
     f54:	4619      	mov	r1, r3
     f56:	4807      	ldr	r0, [pc, #28]	; (f74 <_gpio_set_pin_pull_mode+0xa0>)
     f58:	4b0b      	ldr	r3, [pc, #44]	; (f88 <_gpio_set_pin_pull_mode+0xb4>)
     f5a:	4798      	blx	r3
		break;
     f5c:	e005      	b.n	f6a <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     f5e:	2289      	movs	r2, #137	; 0x89
     f60:	490a      	ldr	r1, [pc, #40]	; (f8c <_gpio_set_pin_pull_mode+0xb8>)
     f62:	2000      	movs	r0, #0
     f64:	4b0a      	ldr	r3, [pc, #40]	; (f90 <_gpio_set_pin_pull_mode+0xbc>)
     f66:	4798      	blx	r3
		break;
     f68:	bf00      	nop
	}
}
     f6a:	bf00      	nop
     f6c:	3708      	adds	r7, #8
     f6e:	46bd      	mov	sp, r7
     f70:	bd80      	pop	{r7, pc}
     f72:	bf00      	nop
     f74:	41008000 	.word	0x41008000
     f78:	00000d3b 	.word	0x00000d3b
     f7c:	00000b67 	.word	0x00000b67
     f80:	00000cf7 	.word	0x00000cf7
     f84:	00000b8f 	.word	0x00000b8f
     f88:	00000bb7 	.word	0x00000bb7
     f8c:	0000cb74 	.word	0x0000cb74
     f90:	00003249 	.word	0x00003249

00000f94 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     f94:	b590      	push	{r4, r7, lr}
     f96:	b085      	sub	sp, #20
     f98:	af00      	add	r7, sp, #0
     f9a:	6078      	str	r0, [r7, #4]
     f9c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	095b      	lsrs	r3, r3, #5
     fa2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     fa4:	687b      	ldr	r3, [r7, #4]
     fa6:	b2db      	uxtb	r3, r3
     fa8:	f003 031f 	and.w	r3, r3, #31
     fac:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     fae:	683b      	ldr	r3, [r7, #0]
     fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
     fb4:	d106      	bne.n	fc4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     fb6:	7bba      	ldrb	r2, [r7, #14]
     fb8:	7bf9      	ldrb	r1, [r7, #15]
     fba:	2300      	movs	r3, #0
     fbc:	4812      	ldr	r0, [pc, #72]	; (1008 <_gpio_set_pin_function+0x74>)
     fbe:	4c13      	ldr	r4, [pc, #76]	; (100c <_gpio_set_pin_function+0x78>)
     fc0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     fc2:	e01d      	b.n	1000 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     fc4:	7bba      	ldrb	r2, [r7, #14]
     fc6:	7bf9      	ldrb	r1, [r7, #15]
     fc8:	2301      	movs	r3, #1
     fca:	480f      	ldr	r0, [pc, #60]	; (1008 <_gpio_set_pin_function+0x74>)
     fcc:	4c0f      	ldr	r4, [pc, #60]	; (100c <_gpio_set_pin_function+0x78>)
     fce:	47a0      	blx	r4
		if (pin & 1) {
     fd0:	7bbb      	ldrb	r3, [r7, #14]
     fd2:	f003 0301 	and.w	r3, r3, #1
     fd6:	2b00      	cmp	r3, #0
     fd8:	d009      	beq.n	fee <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     fda:	7bbb      	ldrb	r3, [r7, #14]
     fdc:	085b      	lsrs	r3, r3, #1
     fde:	b2da      	uxtb	r2, r3
     fe0:	683b      	ldr	r3, [r7, #0]
     fe2:	b2db      	uxtb	r3, r3
     fe4:	7bf9      	ldrb	r1, [r7, #15]
     fe6:	4808      	ldr	r0, [pc, #32]	; (1008 <_gpio_set_pin_function+0x74>)
     fe8:	4c09      	ldr	r4, [pc, #36]	; (1010 <_gpio_set_pin_function+0x7c>)
     fea:	47a0      	blx	r4
}
     fec:	e008      	b.n	1000 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     fee:	7bbb      	ldrb	r3, [r7, #14]
     ff0:	085b      	lsrs	r3, r3, #1
     ff2:	b2da      	uxtb	r2, r3
     ff4:	683b      	ldr	r3, [r7, #0]
     ff6:	b2db      	uxtb	r3, r3
     ff8:	7bf9      	ldrb	r1, [r7, #15]
     ffa:	4803      	ldr	r0, [pc, #12]	; (1008 <_gpio_set_pin_function+0x74>)
     ffc:	4c05      	ldr	r4, [pc, #20]	; (1014 <_gpio_set_pin_function+0x80>)
     ffe:	47a0      	blx	r4
}
    1000:	bf00      	nop
    1002:	3714      	adds	r7, #20
    1004:	46bd      	mov	sp, r7
    1006:	bd90      	pop	{r4, r7, pc}
    1008:	41008000 	.word	0x41008000
    100c:	00000c9d 	.word	0x00000c9d
    1010:	00000c3f 	.word	0x00000c3f
    1014:	00000bdf 	.word	0x00000bdf

00001018 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1018:	b580      	push	{r7, lr}
    101a:	b082      	sub	sp, #8
    101c:	af00      	add	r7, sp, #0
    101e:	4603      	mov	r3, r0
    1020:	460a      	mov	r2, r1
    1022:	71fb      	strb	r3, [r7, #7]
    1024:	4613      	mov	r3, r2
    1026:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1028:	79fb      	ldrb	r3, [r7, #7]
    102a:	095b      	lsrs	r3, r3, #5
    102c:	b2d8      	uxtb	r0, r3
    102e:	79fb      	ldrb	r3, [r7, #7]
    1030:	f003 031f 	and.w	r3, r3, #31
    1034:	b2db      	uxtb	r3, r3
    1036:	79ba      	ldrb	r2, [r7, #6]
    1038:	4619      	mov	r1, r3
    103a:	4b03      	ldr	r3, [pc, #12]	; (1048 <gpio_set_pin_pull_mode+0x30>)
    103c:	4798      	blx	r3
}
    103e:	bf00      	nop
    1040:	3708      	adds	r7, #8
    1042:	46bd      	mov	sp, r7
    1044:	bd80      	pop	{r7, pc}
    1046:	bf00      	nop
    1048:	00000ed5 	.word	0x00000ed5

0000104c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    104c:	b580      	push	{r7, lr}
    104e:	b082      	sub	sp, #8
    1050:	af00      	add	r7, sp, #0
    1052:	6078      	str	r0, [r7, #4]
    1054:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1056:	6839      	ldr	r1, [r7, #0]
    1058:	6878      	ldr	r0, [r7, #4]
    105a:	4b03      	ldr	r3, [pc, #12]	; (1068 <gpio_set_pin_function+0x1c>)
    105c:	4798      	blx	r3
}
    105e:	bf00      	nop
    1060:	3708      	adds	r7, #8
    1062:	46bd      	mov	sp, r7
    1064:	bd80      	pop	{r7, pc}
    1066:	bf00      	nop
    1068:	00000f95 	.word	0x00000f95

0000106c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    106c:	b580      	push	{r7, lr}
    106e:	b082      	sub	sp, #8
    1070:	af00      	add	r7, sp, #0
    1072:	4603      	mov	r3, r0
    1074:	460a      	mov	r2, r1
    1076:	71fb      	strb	r3, [r7, #7]
    1078:	4613      	mov	r3, r2
    107a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    107c:	79fb      	ldrb	r3, [r7, #7]
    107e:	095b      	lsrs	r3, r3, #5
    1080:	b2d8      	uxtb	r0, r3
    1082:	79fb      	ldrb	r3, [r7, #7]
    1084:	f003 031f 	and.w	r3, r3, #31
    1088:	2201      	movs	r2, #1
    108a:	fa02 f303 	lsl.w	r3, r2, r3
    108e:	79ba      	ldrb	r2, [r7, #6]
    1090:	4619      	mov	r1, r3
    1092:	4b03      	ldr	r3, [pc, #12]	; (10a0 <gpio_set_pin_direction+0x34>)
    1094:	4798      	blx	r3
}
    1096:	bf00      	nop
    1098:	3708      	adds	r7, #8
    109a:	46bd      	mov	sp, r7
    109c:	bd80      	pop	{r7, pc}
    109e:	bf00      	nop
    10a0:	00000da9 	.word	0x00000da9

000010a4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    10a4:	b580      	push	{r7, lr}
    10a6:	b082      	sub	sp, #8
    10a8:	af00      	add	r7, sp, #0
    10aa:	4603      	mov	r3, r0
    10ac:	460a      	mov	r2, r1
    10ae:	71fb      	strb	r3, [r7, #7]
    10b0:	4613      	mov	r3, r2
    10b2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    10b4:	79fb      	ldrb	r3, [r7, #7]
    10b6:	095b      	lsrs	r3, r3, #5
    10b8:	b2d8      	uxtb	r0, r3
    10ba:	79fb      	ldrb	r3, [r7, #7]
    10bc:	f003 031f 	and.w	r3, r3, #31
    10c0:	2201      	movs	r2, #1
    10c2:	fa02 f303 	lsl.w	r3, r2, r3
    10c6:	79ba      	ldrb	r2, [r7, #6]
    10c8:	4619      	mov	r1, r3
    10ca:	4b03      	ldr	r3, [pc, #12]	; (10d8 <gpio_set_pin_level+0x34>)
    10cc:	4798      	blx	r3
}
    10ce:	bf00      	nop
    10d0:	3708      	adds	r7, #8
    10d2:	46bd      	mov	sp, r7
    10d4:	bd80      	pop	{r7, pc}
    10d6:	bf00      	nop
    10d8:	00000e91 	.word	0x00000e91

000010dc <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    10dc:	b580      	push	{r7, lr}
    10de:	af00      	add	r7, sp, #0
	_init_chip();
    10e0:	4b01      	ldr	r3, [pc, #4]	; (10e8 <init_mcu+0xc>)
    10e2:	4798      	blx	r3
}
    10e4:	bf00      	nop
    10e6:	bd80      	pop	{r7, pc}
    10e8:	00003a85 	.word	0x00003a85

000010ec <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    10ec:	b580      	push	{r7, lr}
    10ee:	b082      	sub	sp, #8
    10f0:	af00      	add	r7, sp, #0
    10f2:	6078      	str	r0, [r7, #4]
    10f4:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	2b00      	cmp	r3, #0
    10fa:	d004      	beq.n	1106 <wdt_init+0x1a>
    10fc:	683b      	ldr	r3, [r7, #0]
    10fe:	2b00      	cmp	r3, #0
    1100:	d001      	beq.n	1106 <wdt_init+0x1a>
    1102:	2301      	movs	r3, #1
    1104:	e000      	b.n	1108 <wdt_init+0x1c>
    1106:	2300      	movs	r3, #0
    1108:	f003 0301 	and.w	r3, r3, #1
    110c:	b2db      	uxtb	r3, r3
    110e:	2248      	movs	r2, #72	; 0x48
    1110:	4907      	ldr	r1, [pc, #28]	; (1130 <wdt_init+0x44>)
    1112:	4618      	mov	r0, r3
    1114:	4b07      	ldr	r3, [pc, #28]	; (1134 <wdt_init+0x48>)
    1116:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1118:	687b      	ldr	r3, [r7, #4]
    111a:	683a      	ldr	r2, [r7, #0]
    111c:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	4618      	mov	r0, r3
    1122:	4b05      	ldr	r3, [pc, #20]	; (1138 <wdt_init+0x4c>)
    1124:	4798      	blx	r3
    1126:	4603      	mov	r3, r0
}
    1128:	4618      	mov	r0, r3
    112a:	3708      	adds	r7, #8
    112c:	46bd      	mov	sp, r7
    112e:	bd80      	pop	{r7, pc}
    1130:	0000cb90 	.word	0x0000cb90
    1134:	00003249 	.word	0x00003249
    1138:	00009ff5 	.word	0x00009ff5

0000113c <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    113c:	b580      	push	{r7, lr}
    113e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1140:	4804      	ldr	r0, [pc, #16]	; (1154 <CRC_CALC_init+0x18>)
    1142:	4b05      	ldr	r3, [pc, #20]	; (1158 <CRC_CALC_init+0x1c>)
    1144:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1146:	4905      	ldr	r1, [pc, #20]	; (115c <CRC_CALC_init+0x20>)
    1148:	4805      	ldr	r0, [pc, #20]	; (1160 <CRC_CALC_init+0x24>)
    114a:	4b06      	ldr	r3, [pc, #24]	; (1164 <CRC_CALC_init+0x28>)
    114c:	4798      	blx	r3
}
    114e:	bf00      	nop
    1150:	bd80      	pop	{r7, pc}
    1152:	bf00      	nop
    1154:	40000800 	.word	0x40000800
    1158:	000009ff 	.word	0x000009ff
    115c:	41002000 	.word	0x41002000
    1160:	20000ce0 	.word	0x20000ce0
    1164:	00001c15 	.word	0x00001c15

00001168 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1168:	b580      	push	{r7, lr}
    116a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    116c:	2244      	movs	r2, #68	; 0x44
    116e:	2104      	movs	r1, #4
    1170:	481e      	ldr	r0, [pc, #120]	; (11ec <EXTERNAL_IRQ_0_init+0x84>)
    1172:	4b1f      	ldr	r3, [pc, #124]	; (11f0 <EXTERNAL_IRQ_0_init+0x88>)
    1174:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1176:	481f      	ldr	r0, [pc, #124]	; (11f4 <EXTERNAL_IRQ_0_init+0x8c>)
    1178:	4b1f      	ldr	r3, [pc, #124]	; (11f8 <EXTERNAL_IRQ_0_init+0x90>)
    117a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    117c:	2101      	movs	r1, #1
    117e:	2004      	movs	r0, #4
    1180:	4b1e      	ldr	r3, [pc, #120]	; (11fc <EXTERNAL_IRQ_0_init+0x94>)
    1182:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    1184:	2102      	movs	r1, #2
    1186:	2004      	movs	r0, #4
    1188:	4b1d      	ldr	r3, [pc, #116]	; (1200 <EXTERNAL_IRQ_0_init+0x98>)
    118a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    118c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1190:	2004      	movs	r0, #4
    1192:	4b1c      	ldr	r3, [pc, #112]	; (1204 <EXTERNAL_IRQ_0_init+0x9c>)
    1194:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    1196:	2101      	movs	r1, #1
    1198:	2005      	movs	r0, #5
    119a:	4b18      	ldr	r3, [pc, #96]	; (11fc <EXTERNAL_IRQ_0_init+0x94>)
    119c:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    119e:	2102      	movs	r1, #2
    11a0:	2005      	movs	r0, #5
    11a2:	4b17      	ldr	r3, [pc, #92]	; (1200 <EXTERNAL_IRQ_0_init+0x98>)
    11a4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    11a6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    11aa:	2005      	movs	r0, #5
    11ac:	4b15      	ldr	r3, [pc, #84]	; (1204 <EXTERNAL_IRQ_0_init+0x9c>)
    11ae:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    11b0:	2101      	movs	r1, #1
    11b2:	2056      	movs	r0, #86	; 0x56
    11b4:	4b11      	ldr	r3, [pc, #68]	; (11fc <EXTERNAL_IRQ_0_init+0x94>)
    11b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    11b8:	2102      	movs	r1, #2
    11ba:	2056      	movs	r0, #86	; 0x56
    11bc:	4b10      	ldr	r3, [pc, #64]	; (1200 <EXTERNAL_IRQ_0_init+0x98>)
    11be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    11c0:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    11c4:	2056      	movs	r0, #86	; 0x56
    11c6:	4b0f      	ldr	r3, [pc, #60]	; (1204 <EXTERNAL_IRQ_0_init+0x9c>)
    11c8:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    11ca:	2101      	movs	r1, #1
    11cc:	2057      	movs	r0, #87	; 0x57
    11ce:	4b0b      	ldr	r3, [pc, #44]	; (11fc <EXTERNAL_IRQ_0_init+0x94>)
    11d0:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    11d2:	2102      	movs	r1, #2
    11d4:	2057      	movs	r0, #87	; 0x57
    11d6:	4b0a      	ldr	r3, [pc, #40]	; (1200 <EXTERNAL_IRQ_0_init+0x98>)
    11d8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    11da:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    11de:	2057      	movs	r0, #87	; 0x57
    11e0:	4b08      	ldr	r3, [pc, #32]	; (1204 <EXTERNAL_IRQ_0_init+0x9c>)
    11e2:	4798      	blx	r3

	ext_irq_init();
    11e4:	4b08      	ldr	r3, [pc, #32]	; (1208 <EXTERNAL_IRQ_0_init+0xa0>)
    11e6:	4798      	blx	r3
}
    11e8:	bf00      	nop
    11ea:	bd80      	pop	{r7, pc}
    11ec:	40001c00 	.word	0x40001c00
    11f0:	00000899 	.word	0x00000899
    11f4:	40000800 	.word	0x40000800
    11f8:	0000097f 	.word	0x0000097f
    11fc:	0000106d 	.word	0x0000106d
    1200:	00001019 	.word	0x00001019
    1204:	0000104d 	.word	0x0000104d
    1208:	00001c75 	.word	0x00001c75

0000120c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    120c:	b580      	push	{r7, lr}
    120e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1210:	2244      	movs	r2, #68	; 0x44
    1212:	210b      	movs	r1, #11
    1214:	4804      	ldr	r0, [pc, #16]	; (1228 <EVENT_SYSTEM_0_init+0x1c>)
    1216:	4b05      	ldr	r3, [pc, #20]	; (122c <EVENT_SYSTEM_0_init+0x20>)
    1218:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    121a:	4805      	ldr	r0, [pc, #20]	; (1230 <EVENT_SYSTEM_0_init+0x24>)
    121c:	4b05      	ldr	r3, [pc, #20]	; (1234 <EVENT_SYSTEM_0_init+0x28>)
    121e:	4798      	blx	r3

	event_system_init();
    1220:	4b05      	ldr	r3, [pc, #20]	; (1238 <EVENT_SYSTEM_0_init+0x2c>)
    1222:	4798      	blx	r3
}
    1224:	bf00      	nop
    1226:	bd80      	pop	{r7, pc}
    1228:	40001c00 	.word	0x40001c00
    122c:	00000899 	.word	0x00000899
    1230:	40000800 	.word	0x40000800
    1234:	00000a1f 	.word	0x00000a1f
    1238:	00001c61 	.word	0x00001c61

0000123c <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    123c:	b580      	push	{r7, lr}
    123e:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1240:	2101      	movs	r1, #1
    1242:	202b      	movs	r0, #43	; 0x2b
    1244:	4b2b      	ldr	r3, [pc, #172]	; (12f4 <QSPI_N25Q256_PORT_init+0xb8>)
    1246:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1248:	2100      	movs	r1, #0
    124a:	202b      	movs	r0, #43	; 0x2b
    124c:	4b2a      	ldr	r3, [pc, #168]	; (12f8 <QSPI_N25Q256_PORT_init+0xbc>)
    124e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1250:	492a      	ldr	r1, [pc, #168]	; (12fc <QSPI_N25Q256_PORT_init+0xc0>)
    1252:	202b      	movs	r0, #43	; 0x2b
    1254:	4b2a      	ldr	r3, [pc, #168]	; (1300 <QSPI_N25Q256_PORT_init+0xc4>)
    1256:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1258:	2102      	movs	r1, #2
    125a:	2008      	movs	r0, #8
    125c:	4b25      	ldr	r3, [pc, #148]	; (12f4 <QSPI_N25Q256_PORT_init+0xb8>)
    125e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1260:	2100      	movs	r1, #0
    1262:	2008      	movs	r0, #8
    1264:	4b27      	ldr	r3, [pc, #156]	; (1304 <QSPI_N25Q256_PORT_init+0xc8>)
    1266:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1268:	2100      	movs	r1, #0
    126a:	2008      	movs	r0, #8
    126c:	4b22      	ldr	r3, [pc, #136]	; (12f8 <QSPI_N25Q256_PORT_init+0xbc>)
    126e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1270:	4925      	ldr	r1, [pc, #148]	; (1308 <QSPI_N25Q256_PORT_init+0xcc>)
    1272:	2008      	movs	r0, #8
    1274:	4b22      	ldr	r3, [pc, #136]	; (1300 <QSPI_N25Q256_PORT_init+0xc4>)
    1276:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1278:	2102      	movs	r1, #2
    127a:	2009      	movs	r0, #9
    127c:	4b1d      	ldr	r3, [pc, #116]	; (12f4 <QSPI_N25Q256_PORT_init+0xb8>)
    127e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1280:	2100      	movs	r1, #0
    1282:	2009      	movs	r0, #9
    1284:	4b1f      	ldr	r3, [pc, #124]	; (1304 <QSPI_N25Q256_PORT_init+0xc8>)
    1286:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1288:	2100      	movs	r1, #0
    128a:	2009      	movs	r0, #9
    128c:	4b1a      	ldr	r3, [pc, #104]	; (12f8 <QSPI_N25Q256_PORT_init+0xbc>)
    128e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1290:	491e      	ldr	r1, [pc, #120]	; (130c <QSPI_N25Q256_PORT_init+0xd0>)
    1292:	2009      	movs	r0, #9
    1294:	4b1a      	ldr	r3, [pc, #104]	; (1300 <QSPI_N25Q256_PORT_init+0xc4>)
    1296:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1298:	2102      	movs	r1, #2
    129a:	200a      	movs	r0, #10
    129c:	4b15      	ldr	r3, [pc, #84]	; (12f4 <QSPI_N25Q256_PORT_init+0xb8>)
    129e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    12a0:	2100      	movs	r1, #0
    12a2:	200a      	movs	r0, #10
    12a4:	4b17      	ldr	r3, [pc, #92]	; (1304 <QSPI_N25Q256_PORT_init+0xc8>)
    12a6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    12a8:	2100      	movs	r1, #0
    12aa:	200a      	movs	r0, #10
    12ac:	4b12      	ldr	r3, [pc, #72]	; (12f8 <QSPI_N25Q256_PORT_init+0xbc>)
    12ae:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    12b0:	4917      	ldr	r1, [pc, #92]	; (1310 <QSPI_N25Q256_PORT_init+0xd4>)
    12b2:	200a      	movs	r0, #10
    12b4:	4b12      	ldr	r3, [pc, #72]	; (1300 <QSPI_N25Q256_PORT_init+0xc4>)
    12b6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    12b8:	2102      	movs	r1, #2
    12ba:	200b      	movs	r0, #11
    12bc:	4b0d      	ldr	r3, [pc, #52]	; (12f4 <QSPI_N25Q256_PORT_init+0xb8>)
    12be:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    12c0:	2100      	movs	r1, #0
    12c2:	200b      	movs	r0, #11
    12c4:	4b0f      	ldr	r3, [pc, #60]	; (1304 <QSPI_N25Q256_PORT_init+0xc8>)
    12c6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    12c8:	2100      	movs	r1, #0
    12ca:	200b      	movs	r0, #11
    12cc:	4b0a      	ldr	r3, [pc, #40]	; (12f8 <QSPI_N25Q256_PORT_init+0xbc>)
    12ce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    12d0:	4910      	ldr	r1, [pc, #64]	; (1314 <QSPI_N25Q256_PORT_init+0xd8>)
    12d2:	200b      	movs	r0, #11
    12d4:	4b0a      	ldr	r3, [pc, #40]	; (1300 <QSPI_N25Q256_PORT_init+0xc4>)
    12d6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    12d8:	2101      	movs	r1, #1
    12da:	202a      	movs	r0, #42	; 0x2a
    12dc:	4b05      	ldr	r3, [pc, #20]	; (12f4 <QSPI_N25Q256_PORT_init+0xb8>)
    12de:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    12e0:	2100      	movs	r1, #0
    12e2:	202a      	movs	r0, #42	; 0x2a
    12e4:	4b04      	ldr	r3, [pc, #16]	; (12f8 <QSPI_N25Q256_PORT_init+0xbc>)
    12e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    12e8:	490b      	ldr	r1, [pc, #44]	; (1318 <QSPI_N25Q256_PORT_init+0xdc>)
    12ea:	202a      	movs	r0, #42	; 0x2a
    12ec:	4b04      	ldr	r3, [pc, #16]	; (1300 <QSPI_N25Q256_PORT_init+0xc4>)
    12ee:	4798      	blx	r3
}
    12f0:	bf00      	nop
    12f2:	bd80      	pop	{r7, pc}
    12f4:	0000106d 	.word	0x0000106d
    12f8:	00001019 	.word	0x00001019
    12fc:	002b0007 	.word	0x002b0007
    1300:	0000104d 	.word	0x0000104d
    1304:	000010a5 	.word	0x000010a5
    1308:	00080007 	.word	0x00080007
    130c:	00090007 	.word	0x00090007
    1310:	000a0007 	.word	0x000a0007
    1314:	000b0007 	.word	0x000b0007
    1318:	002a0007 	.word	0x002a0007

0000131c <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    131c:	b580      	push	{r7, lr}
    131e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1320:	4805      	ldr	r0, [pc, #20]	; (1338 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1322:	4b06      	ldr	r3, [pc, #24]	; (133c <QSPI_N25Q256_CLOCK_init+0x20>)
    1324:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1326:	4804      	ldr	r0, [pc, #16]	; (1338 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1328:	4b05      	ldr	r3, [pc, #20]	; (1340 <QSPI_N25Q256_CLOCK_init+0x24>)
    132a:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    132c:	4802      	ldr	r0, [pc, #8]	; (1338 <QSPI_N25Q256_CLOCK_init+0x1c>)
    132e:	4b05      	ldr	r3, [pc, #20]	; (1344 <QSPI_N25Q256_CLOCK_init+0x28>)
    1330:	4798      	blx	r3
}
    1332:	bf00      	nop
    1334:	bd80      	pop	{r7, pc}
    1336:	bf00      	nop
    1338:	40000800 	.word	0x40000800
    133c:	000008df 	.word	0x000008df
    1340:	0000091f 	.word	0x0000091f
    1344:	00000a7f 	.word	0x00000a7f

00001348 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1348:	b580      	push	{r7, lr}
    134a:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    134c:	4b04      	ldr	r3, [pc, #16]	; (1360 <QSPI_N25Q256_init+0x18>)
    134e:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1350:	4904      	ldr	r1, [pc, #16]	; (1364 <QSPI_N25Q256_init+0x1c>)
    1352:	4805      	ldr	r0, [pc, #20]	; (1368 <QSPI_N25Q256_init+0x20>)
    1354:	4b05      	ldr	r3, [pc, #20]	; (136c <QSPI_N25Q256_init+0x24>)
    1356:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1358:	4b05      	ldr	r3, [pc, #20]	; (1370 <QSPI_N25Q256_init+0x28>)
    135a:	4798      	blx	r3
}
    135c:	bf00      	nop
    135e:	bd80      	pop	{r7, pc}
    1360:	0000131d 	.word	0x0000131d
    1364:	42003400 	.word	0x42003400
    1368:	20000b84 	.word	0x20000b84
    136c:	000020d1 	.word	0x000020d1
    1370:	0000123d 	.word	0x0000123d

00001374 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1374:	b580      	push	{r7, lr}
    1376:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1378:	4802      	ldr	r0, [pc, #8]	; (1384 <DATETIME_CLOCK_CLOCK_init+0x10>)
    137a:	4b03      	ldr	r3, [pc, #12]	; (1388 <DATETIME_CLOCK_CLOCK_init+0x14>)
    137c:	4798      	blx	r3
}
    137e:	bf00      	nop
    1380:	bd80      	pop	{r7, pc}
    1382:	bf00      	nop
    1384:	40000800 	.word	0x40000800
    1388:	0000095f 	.word	0x0000095f

0000138c <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    138c:	b580      	push	{r7, lr}
    138e:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1390:	4b03      	ldr	r3, [pc, #12]	; (13a0 <DATETIME_CLOCK_init+0x14>)
    1392:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1394:	4903      	ldr	r1, [pc, #12]	; (13a4 <DATETIME_CLOCK_init+0x18>)
    1396:	4804      	ldr	r0, [pc, #16]	; (13a8 <DATETIME_CLOCK_init+0x1c>)
    1398:	4b04      	ldr	r3, [pc, #16]	; (13ac <DATETIME_CLOCK_init+0x20>)
    139a:	4798      	blx	r3
}
    139c:	bf00      	nop
    139e:	bd80      	pop	{r7, pc}
    13a0:	00001375 	.word	0x00001375
    13a4:	40002400 	.word	0x40002400
    13a8:	20000cbc 	.word	0x20000cbc
    13ac:	00001ab9 	.word	0x00001ab9

000013b0 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    13b0:	b580      	push	{r7, lr}
    13b2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    13b4:	2100      	movs	r1, #0
    13b6:	203b      	movs	r0, #59	; 0x3b
    13b8:	4b11      	ldr	r3, [pc, #68]	; (1400 <SPI_TEMP_PORT_init+0x50>)
    13ba:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    13bc:	2102      	movs	r1, #2
    13be:	203b      	movs	r0, #59	; 0x3b
    13c0:	4b10      	ldr	r3, [pc, #64]	; (1404 <SPI_TEMP_PORT_init+0x54>)
    13c2:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    13c4:	4910      	ldr	r1, [pc, #64]	; (1408 <SPI_TEMP_PORT_init+0x58>)
    13c6:	203b      	movs	r0, #59	; 0x3b
    13c8:	4b10      	ldr	r3, [pc, #64]	; (140c <SPI_TEMP_PORT_init+0x5c>)
    13ca:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    13cc:	2100      	movs	r1, #0
    13ce:	203a      	movs	r0, #58	; 0x3a
    13d0:	4b0b      	ldr	r3, [pc, #44]	; (1400 <SPI_TEMP_PORT_init+0x50>)
    13d2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    13d4:	2102      	movs	r1, #2
    13d6:	203a      	movs	r0, #58	; 0x3a
    13d8:	4b0a      	ldr	r3, [pc, #40]	; (1404 <SPI_TEMP_PORT_init+0x54>)
    13da:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    13dc:	490c      	ldr	r1, [pc, #48]	; (1410 <SPI_TEMP_PORT_init+0x60>)
    13de:	203a      	movs	r0, #58	; 0x3a
    13e0:	4b0a      	ldr	r3, [pc, #40]	; (140c <SPI_TEMP_PORT_init+0x5c>)
    13e2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    13e4:	2101      	movs	r1, #1
    13e6:	203c      	movs	r0, #60	; 0x3c
    13e8:	4b06      	ldr	r3, [pc, #24]	; (1404 <SPI_TEMP_PORT_init+0x54>)
    13ea:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    13ec:	2100      	movs	r1, #0
    13ee:	203c      	movs	r0, #60	; 0x3c
    13f0:	4b08      	ldr	r3, [pc, #32]	; (1414 <SPI_TEMP_PORT_init+0x64>)
    13f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    13f4:	4908      	ldr	r1, [pc, #32]	; (1418 <SPI_TEMP_PORT_init+0x68>)
    13f6:	203c      	movs	r0, #60	; 0x3c
    13f8:	4b04      	ldr	r3, [pc, #16]	; (140c <SPI_TEMP_PORT_init+0x5c>)
    13fa:	4798      	blx	r3
}
    13fc:	bf00      	nop
    13fe:	bd80      	pop	{r7, pc}
    1400:	000010a5 	.word	0x000010a5
    1404:	0000106d 	.word	0x0000106d
    1408:	003b0003 	.word	0x003b0003
    140c:	0000104d 	.word	0x0000104d
    1410:	003a0003 	.word	0x003a0003
    1414:	00001019 	.word	0x00001019
    1418:	003c0003 	.word	0x003c0003

0000141c <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    141c:	b580      	push	{r7, lr}
    141e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1420:	2243      	movs	r2, #67	; 0x43
    1422:	2122      	movs	r1, #34	; 0x22
    1424:	4806      	ldr	r0, [pc, #24]	; (1440 <SPI_TEMP_CLOCK_init+0x24>)
    1426:	4b07      	ldr	r3, [pc, #28]	; (1444 <SPI_TEMP_CLOCK_init+0x28>)
    1428:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    142a:	224a      	movs	r2, #74	; 0x4a
    142c:	2103      	movs	r1, #3
    142e:	4804      	ldr	r0, [pc, #16]	; (1440 <SPI_TEMP_CLOCK_init+0x24>)
    1430:	4b04      	ldr	r3, [pc, #16]	; (1444 <SPI_TEMP_CLOCK_init+0x28>)
    1432:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1434:	4804      	ldr	r0, [pc, #16]	; (1448 <SPI_TEMP_CLOCK_init+0x2c>)
    1436:	4b05      	ldr	r3, [pc, #20]	; (144c <SPI_TEMP_CLOCK_init+0x30>)
    1438:	4798      	blx	r3
}
    143a:	bf00      	nop
    143c:	bd80      	pop	{r7, pc}
    143e:	bf00      	nop
    1440:	40001c00 	.word	0x40001c00
    1444:	00000899 	.word	0x00000899
    1448:	40000800 	.word	0x40000800
    144c:	00000a9f 	.word	0x00000a9f

00001450 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1450:	b580      	push	{r7, lr}
    1452:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1454:	4b05      	ldr	r3, [pc, #20]	; (146c <SPI_TEMP_init+0x1c>)
    1456:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
    1458:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    145c:	4804      	ldr	r0, [pc, #16]	; (1470 <SPI_TEMP_init+0x20>)
    145e:	4b05      	ldr	r3, [pc, #20]	; (1474 <SPI_TEMP_init+0x24>)
    1460:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1462:	4b05      	ldr	r3, [pc, #20]	; (1478 <SPI_TEMP_init+0x28>)
    1464:	4798      	blx	r3
}
    1466:	bf00      	nop
    1468:	bd80      	pop	{r7, pc}
    146a:	bf00      	nop
    146c:	0000141d 	.word	0x0000141d
    1470:	20000b3c 	.word	0x20000b3c
    1474:	000023f9 	.word	0x000023f9
    1478:	000013b1 	.word	0x000013b1

0000147c <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    147c:	b580      	push	{r7, lr}
    147e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1480:	2100      	movs	r1, #0
    1482:	2017      	movs	r0, #23
    1484:	4b07      	ldr	r3, [pc, #28]	; (14a4 <I2C_EXPANDER_PORT_init+0x28>)
    1486:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1488:	4907      	ldr	r1, [pc, #28]	; (14a8 <I2C_EXPANDER_PORT_init+0x2c>)
    148a:	2017      	movs	r0, #23
    148c:	4b07      	ldr	r3, [pc, #28]	; (14ac <I2C_EXPANDER_PORT_init+0x30>)
    148e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1490:	2100      	movs	r1, #0
    1492:	2016      	movs	r0, #22
    1494:	4b03      	ldr	r3, [pc, #12]	; (14a4 <I2C_EXPANDER_PORT_init+0x28>)
    1496:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1498:	4905      	ldr	r1, [pc, #20]	; (14b0 <I2C_EXPANDER_PORT_init+0x34>)
    149a:	2016      	movs	r0, #22
    149c:	4b03      	ldr	r3, [pc, #12]	; (14ac <I2C_EXPANDER_PORT_init+0x30>)
    149e:	4798      	blx	r3
}
    14a0:	bf00      	nop
    14a2:	bd80      	pop	{r7, pc}
    14a4:	00001019 	.word	0x00001019
    14a8:	00170003 	.word	0x00170003
    14ac:	0000104d 	.word	0x0000104d
    14b0:	00160003 	.word	0x00160003

000014b4 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    14b4:	b580      	push	{r7, lr}
    14b6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14b8:	2243      	movs	r2, #67	; 0x43
    14ba:	2123      	movs	r1, #35	; 0x23
    14bc:	4806      	ldr	r0, [pc, #24]	; (14d8 <I2C_EXPANDER_CLOCK_init+0x24>)
    14be:	4b07      	ldr	r3, [pc, #28]	; (14dc <I2C_EXPANDER_CLOCK_init+0x28>)
    14c0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14c2:	224a      	movs	r2, #74	; 0x4a
    14c4:	2103      	movs	r1, #3
    14c6:	4804      	ldr	r0, [pc, #16]	; (14d8 <I2C_EXPANDER_CLOCK_init+0x24>)
    14c8:	4b04      	ldr	r3, [pc, #16]	; (14dc <I2C_EXPANDER_CLOCK_init+0x28>)
    14ca:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    14cc:	4804      	ldr	r0, [pc, #16]	; (14e0 <I2C_EXPANDER_CLOCK_init+0x2c>)
    14ce:	4b05      	ldr	r3, [pc, #20]	; (14e4 <I2C_EXPANDER_CLOCK_init+0x30>)
    14d0:	4798      	blx	r3
}
    14d2:	bf00      	nop
    14d4:	bd80      	pop	{r7, pc}
    14d6:	bf00      	nop
    14d8:	40001c00 	.word	0x40001c00
    14dc:	00000899 	.word	0x00000899
    14e0:	40000800 	.word	0x40000800
    14e4:	00000abf 	.word	0x00000abf

000014e8 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    14e8:	b580      	push	{r7, lr}
    14ea:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    14ec:	4b04      	ldr	r3, [pc, #16]	; (1500 <I2C_EXPANDER_init+0x18>)
    14ee:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    14f0:	4904      	ldr	r1, [pc, #16]	; (1504 <I2C_EXPANDER_init+0x1c>)
    14f2:	4805      	ldr	r0, [pc, #20]	; (1508 <I2C_EXPANDER_init+0x20>)
    14f4:	4b05      	ldr	r3, [pc, #20]	; (150c <I2C_EXPANDER_init+0x24>)
    14f6:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    14f8:	4b05      	ldr	r3, [pc, #20]	; (1510 <I2C_EXPANDER_init+0x28>)
    14fa:	4798      	blx	r3
}
    14fc:	bf00      	nop
    14fe:	bd80      	pop	{r7, pc}
    1500:	000014b5 	.word	0x000014b5
    1504:	43000400 	.word	0x43000400
    1508:	20000c20 	.word	0x20000c20
    150c:	00001e81 	.word	0x00001e81
    1510:	0000147d 	.word	0x0000147d

00001514 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1514:	b580      	push	{r7, lr}
    1516:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1518:	2100      	movs	r1, #0
    151a:	2044      	movs	r0, #68	; 0x44
    151c:	4b11      	ldr	r3, [pc, #68]	; (1564 <SPI_HI3593_PORT_init+0x50>)
    151e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1520:	2102      	movs	r1, #2
    1522:	2044      	movs	r0, #68	; 0x44
    1524:	4b10      	ldr	r3, [pc, #64]	; (1568 <SPI_HI3593_PORT_init+0x54>)
    1526:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1528:	4910      	ldr	r1, [pc, #64]	; (156c <SPI_HI3593_PORT_init+0x58>)
    152a:	2044      	movs	r0, #68	; 0x44
    152c:	4b10      	ldr	r3, [pc, #64]	; (1570 <SPI_HI3593_PORT_init+0x5c>)
    152e:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1530:	2100      	movs	r1, #0
    1532:	2045      	movs	r0, #69	; 0x45
    1534:	4b0b      	ldr	r3, [pc, #44]	; (1564 <SPI_HI3593_PORT_init+0x50>)
    1536:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1538:	2102      	movs	r1, #2
    153a:	2045      	movs	r0, #69	; 0x45
    153c:	4b0a      	ldr	r3, [pc, #40]	; (1568 <SPI_HI3593_PORT_init+0x54>)
    153e:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1540:	490c      	ldr	r1, [pc, #48]	; (1574 <SPI_HI3593_PORT_init+0x60>)
    1542:	2045      	movs	r0, #69	; 0x45
    1544:	4b0a      	ldr	r3, [pc, #40]	; (1570 <SPI_HI3593_PORT_init+0x5c>)
    1546:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1548:	2101      	movs	r1, #1
    154a:	2047      	movs	r0, #71	; 0x47
    154c:	4b06      	ldr	r3, [pc, #24]	; (1568 <SPI_HI3593_PORT_init+0x54>)
    154e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1550:	2100      	movs	r1, #0
    1552:	2047      	movs	r0, #71	; 0x47
    1554:	4b08      	ldr	r3, [pc, #32]	; (1578 <SPI_HI3593_PORT_init+0x64>)
    1556:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1558:	4908      	ldr	r1, [pc, #32]	; (157c <SPI_HI3593_PORT_init+0x68>)
    155a:	2047      	movs	r0, #71	; 0x47
    155c:	4b04      	ldr	r3, [pc, #16]	; (1570 <SPI_HI3593_PORT_init+0x5c>)
    155e:	4798      	blx	r3
}
    1560:	bf00      	nop
    1562:	bd80      	pop	{r7, pc}
    1564:	000010a5 	.word	0x000010a5
    1568:	0000106d 	.word	0x0000106d
    156c:	00440002 	.word	0x00440002
    1570:	0000104d 	.word	0x0000104d
    1574:	00450002 	.word	0x00450002
    1578:	00001019 	.word	0x00001019
    157c:	00470002 	.word	0x00470002

00001580 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1580:	b580      	push	{r7, lr}
    1582:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1584:	2243      	movs	r2, #67	; 0x43
    1586:	2124      	movs	r1, #36	; 0x24
    1588:	4806      	ldr	r0, [pc, #24]	; (15a4 <SPI_HI3593_CLOCK_init+0x24>)
    158a:	4b07      	ldr	r3, [pc, #28]	; (15a8 <SPI_HI3593_CLOCK_init+0x28>)
    158c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    158e:	224a      	movs	r2, #74	; 0x4a
    1590:	2103      	movs	r1, #3
    1592:	4804      	ldr	r0, [pc, #16]	; (15a4 <SPI_HI3593_CLOCK_init+0x24>)
    1594:	4b04      	ldr	r3, [pc, #16]	; (15a8 <SPI_HI3593_CLOCK_init+0x28>)
    1596:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1598:	4804      	ldr	r0, [pc, #16]	; (15ac <SPI_HI3593_CLOCK_init+0x2c>)
    159a:	4b05      	ldr	r3, [pc, #20]	; (15b0 <SPI_HI3593_CLOCK_init+0x30>)
    159c:	4798      	blx	r3
}
    159e:	bf00      	nop
    15a0:	bd80      	pop	{r7, pc}
    15a2:	bf00      	nop
    15a4:	40001c00 	.word	0x40001c00
    15a8:	00000899 	.word	0x00000899
    15ac:	40000800 	.word	0x40000800
    15b0:	00000adf 	.word	0x00000adf

000015b4 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    15b4:	b580      	push	{r7, lr}
    15b6:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    15b8:	4b04      	ldr	r3, [pc, #16]	; (15cc <SPI_HI3593_init+0x18>)
    15ba:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    15bc:	4904      	ldr	r1, [pc, #16]	; (15d0 <SPI_HI3593_init+0x1c>)
    15be:	4805      	ldr	r0, [pc, #20]	; (15d4 <SPI_HI3593_init+0x20>)
    15c0:	4b05      	ldr	r3, [pc, #20]	; (15d8 <SPI_HI3593_init+0x24>)
    15c2:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    15c4:	4b05      	ldr	r3, [pc, #20]	; (15dc <SPI_HI3593_init+0x28>)
    15c6:	4798      	blx	r3
}
    15c8:	bf00      	nop
    15ca:	bd80      	pop	{r7, pc}
    15cc:	00001581 	.word	0x00001581
    15d0:	43000800 	.word	0x43000800
    15d4:	20000b24 	.word	0x20000b24
    15d8:	000025ad 	.word	0x000025ad
    15dc:	00001515 	.word	0x00001515

000015e0 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    15e0:	b580      	push	{r7, lr}
    15e2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    15e4:	2100      	movs	r1, #0
    15e6:	2068      	movs	r0, #104	; 0x68
    15e8:	4b07      	ldr	r3, [pc, #28]	; (1608 <I2C_EEPROM_PORT_init+0x28>)
    15ea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    15ec:	4907      	ldr	r1, [pc, #28]	; (160c <I2C_EEPROM_PORT_init+0x2c>)
    15ee:	2068      	movs	r0, #104	; 0x68
    15f0:	4b07      	ldr	r3, [pc, #28]	; (1610 <I2C_EEPROM_PORT_init+0x30>)
    15f2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    15f4:	2100      	movs	r1, #0
    15f6:	2069      	movs	r0, #105	; 0x69
    15f8:	4b03      	ldr	r3, [pc, #12]	; (1608 <I2C_EEPROM_PORT_init+0x28>)
    15fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    15fc:	4905      	ldr	r1, [pc, #20]	; (1614 <I2C_EEPROM_PORT_init+0x34>)
    15fe:	2069      	movs	r0, #105	; 0x69
    1600:	4b03      	ldr	r3, [pc, #12]	; (1610 <I2C_EEPROM_PORT_init+0x30>)
    1602:	4798      	blx	r3
}
    1604:	bf00      	nop
    1606:	bd80      	pop	{r7, pc}
    1608:	00001019 	.word	0x00001019
    160c:	00680002 	.word	0x00680002
    1610:	0000104d 	.word	0x0000104d
    1614:	00690002 	.word	0x00690002

00001618 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1618:	b580      	push	{r7, lr}
    161a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    161c:	2244      	movs	r2, #68	; 0x44
    161e:	2125      	movs	r1, #37	; 0x25
    1620:	4806      	ldr	r0, [pc, #24]	; (163c <I2C_EEPROM_CLOCK_init+0x24>)
    1622:	4b07      	ldr	r3, [pc, #28]	; (1640 <I2C_EEPROM_CLOCK_init+0x28>)
    1624:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1626:	224a      	movs	r2, #74	; 0x4a
    1628:	2103      	movs	r1, #3
    162a:	4804      	ldr	r0, [pc, #16]	; (163c <I2C_EEPROM_CLOCK_init+0x24>)
    162c:	4b04      	ldr	r3, [pc, #16]	; (1640 <I2C_EEPROM_CLOCK_init+0x28>)
    162e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1630:	4804      	ldr	r0, [pc, #16]	; (1644 <I2C_EEPROM_CLOCK_init+0x2c>)
    1632:	4b05      	ldr	r3, [pc, #20]	; (1648 <I2C_EEPROM_CLOCK_init+0x30>)
    1634:	4798      	blx	r3
}
    1636:	bf00      	nop
    1638:	bd80      	pop	{r7, pc}
    163a:	bf00      	nop
    163c:	40001c00 	.word	0x40001c00
    1640:	00000899 	.word	0x00000899
    1644:	40000800 	.word	0x40000800
    1648:	00000aff 	.word	0x00000aff

0000164c <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    164c:	b580      	push	{r7, lr}
    164e:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    1650:	4b04      	ldr	r3, [pc, #16]	; (1664 <I2C_EEPROM_init+0x18>)
    1652:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    1654:	4904      	ldr	r1, [pc, #16]	; (1668 <I2C_EEPROM_init+0x1c>)
    1656:	4805      	ldr	r0, [pc, #20]	; (166c <I2C_EEPROM_init+0x20>)
    1658:	4b05      	ldr	r3, [pc, #20]	; (1670 <I2C_EEPROM_init+0x24>)
    165a:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    165c:	4b05      	ldr	r3, [pc, #20]	; (1674 <I2C_EEPROM_init+0x28>)
    165e:	4798      	blx	r3
}
    1660:	bf00      	nop
    1662:	bd80      	pop	{r7, pc}
    1664:	00001619 	.word	0x00001619
    1668:	43000c00 	.word	0x43000c00
    166c:	20000c7c 	.word	0x20000c7c
    1670:	00001e81 	.word	0x00001e81
    1674:	000015e1 	.word	0x000015e1

00001678 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1678:	b580      	push	{r7, lr}
    167a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    167c:	4808      	ldr	r0, [pc, #32]	; (16a0 <TIMER_INTERFACE_init+0x28>)
    167e:	4b09      	ldr	r3, [pc, #36]	; (16a4 <TIMER_INTERFACE_init+0x2c>)
    1680:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1682:	2243      	movs	r2, #67	; 0x43
    1684:	2109      	movs	r1, #9
    1686:	4808      	ldr	r0, [pc, #32]	; (16a8 <TIMER_INTERFACE_init+0x30>)
    1688:	4b08      	ldr	r3, [pc, #32]	; (16ac <TIMER_INTERFACE_init+0x34>)
    168a:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    168c:	4b08      	ldr	r3, [pc, #32]	; (16b0 <TIMER_INTERFACE_init+0x38>)
    168e:	4798      	blx	r3
    1690:	4603      	mov	r3, r0
    1692:	461a      	mov	r2, r3
    1694:	4907      	ldr	r1, [pc, #28]	; (16b4 <TIMER_INTERFACE_init+0x3c>)
    1696:	4808      	ldr	r0, [pc, #32]	; (16b8 <TIMER_INTERFACE_init+0x40>)
    1698:	4b08      	ldr	r3, [pc, #32]	; (16bc <TIMER_INTERFACE_init+0x44>)
    169a:	4798      	blx	r3
}
    169c:	bf00      	nop
    169e:	bd80      	pop	{r7, pc}
    16a0:	40000800 	.word	0x40000800
    16a4:	0000099f 	.word	0x0000099f
    16a8:	40001c00 	.word	0x40001c00
    16ac:	00000899 	.word	0x00000899
    16b0:	00007579 	.word	0x00007579
    16b4:	40003800 	.word	0x40003800
    16b8:	20000ba4 	.word	0x20000ba4
    16bc:	0000277d 	.word	0x0000277d

000016c0 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    16c0:	b580      	push	{r7, lr}
    16c2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    16c4:	4808      	ldr	r0, [pc, #32]	; (16e8 <TIMER_EVENT_init+0x28>)
    16c6:	4b09      	ldr	r3, [pc, #36]	; (16ec <TIMER_EVENT_init+0x2c>)
    16c8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    16ca:	2245      	movs	r2, #69	; 0x45
    16cc:	2109      	movs	r1, #9
    16ce:	4808      	ldr	r0, [pc, #32]	; (16f0 <TIMER_EVENT_init+0x30>)
    16d0:	4b08      	ldr	r3, [pc, #32]	; (16f4 <TIMER_EVENT_init+0x34>)
    16d2:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    16d4:	4b08      	ldr	r3, [pc, #32]	; (16f8 <TIMER_EVENT_init+0x38>)
    16d6:	4798      	blx	r3
    16d8:	4603      	mov	r3, r0
    16da:	461a      	mov	r2, r3
    16dc:	4907      	ldr	r1, [pc, #28]	; (16fc <TIMER_EVENT_init+0x3c>)
    16de:	4808      	ldr	r0, [pc, #32]	; (1700 <TIMER_EVENT_init+0x40>)
    16e0:	4b08      	ldr	r3, [pc, #32]	; (1704 <TIMER_EVENT_init+0x44>)
    16e2:	4798      	blx	r3
}
    16e4:	bf00      	nop
    16e6:	bd80      	pop	{r7, pc}
    16e8:	40000800 	.word	0x40000800
    16ec:	000009bf 	.word	0x000009bf
    16f0:	40001c00 	.word	0x40001c00
    16f4:	00000899 	.word	0x00000899
    16f8:	00007579 	.word	0x00007579
    16fc:	40003c00 	.word	0x40003c00
    1700:	20000b88 	.word	0x20000b88
    1704:	0000277d 	.word	0x0000277d

00001708 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1708:	b580      	push	{r7, lr}
    170a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    170c:	4808      	ldr	r0, [pc, #32]	; (1730 <TIMER_ARINC_init+0x28>)
    170e:	4b09      	ldr	r3, [pc, #36]	; (1734 <TIMER_ARINC_init+0x2c>)
    1710:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1712:	2244      	movs	r2, #68	; 0x44
    1714:	211a      	movs	r1, #26
    1716:	4808      	ldr	r0, [pc, #32]	; (1738 <TIMER_ARINC_init+0x30>)
    1718:	4b08      	ldr	r3, [pc, #32]	; (173c <TIMER_ARINC_init+0x34>)
    171a:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    171c:	4b08      	ldr	r3, [pc, #32]	; (1740 <TIMER_ARINC_init+0x38>)
    171e:	4798      	blx	r3
    1720:	4603      	mov	r3, r0
    1722:	461a      	mov	r2, r3
    1724:	4907      	ldr	r1, [pc, #28]	; (1744 <TIMER_ARINC_init+0x3c>)
    1726:	4808      	ldr	r0, [pc, #32]	; (1748 <TIMER_ARINC_init+0x40>)
    1728:	4b08      	ldr	r3, [pc, #32]	; (174c <TIMER_ARINC_init+0x44>)
    172a:	4798      	blx	r3
}
    172c:	bf00      	nop
    172e:	bd80      	pop	{r7, pc}
    1730:	40000800 	.word	0x40000800
    1734:	00000a3f 	.word	0x00000a3f
    1738:	40001c00 	.word	0x40001c00
    173c:	00000899 	.word	0x00000899
    1740:	00007579 	.word	0x00007579
    1744:	4101a000 	.word	0x4101a000
    1748:	20000c04 	.word	0x20000c04
    174c:	0000277d 	.word	0x0000277d

00001750 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    1750:	b580      	push	{r7, lr}
    1752:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    1754:	4808      	ldr	r0, [pc, #32]	; (1778 <TIMER_HVAC_init+0x28>)
    1756:	4b09      	ldr	r3, [pc, #36]	; (177c <TIMER_HVAC_init+0x2c>)
    1758:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    175a:	2245      	movs	r2, #69	; 0x45
    175c:	211a      	movs	r1, #26
    175e:	4808      	ldr	r0, [pc, #32]	; (1780 <TIMER_HVAC_init+0x30>)
    1760:	4b08      	ldr	r3, [pc, #32]	; (1784 <TIMER_HVAC_init+0x34>)
    1762:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    1764:	4b08      	ldr	r3, [pc, #32]	; (1788 <TIMER_HVAC_init+0x38>)
    1766:	4798      	blx	r3
    1768:	4603      	mov	r3, r0
    176a:	461a      	mov	r2, r3
    176c:	4907      	ldr	r1, [pc, #28]	; (178c <TIMER_HVAC_init+0x3c>)
    176e:	4808      	ldr	r0, [pc, #32]	; (1790 <TIMER_HVAC_init+0x40>)
    1770:	4b08      	ldr	r3, [pc, #32]	; (1794 <TIMER_HVAC_init+0x44>)
    1772:	4798      	blx	r3
}
    1774:	bf00      	nop
    1776:	bd80      	pop	{r7, pc}
    1778:	40000800 	.word	0x40000800
    177c:	00000a5f 	.word	0x00000a5f
    1780:	40001c00 	.word	0x40001c00
    1784:	00000899 	.word	0x00000899
    1788:	00007579 	.word	0x00007579
    178c:	4101c000 	.word	0x4101c000
    1790:	20000c60 	.word	0x20000c60
    1794:	0000277d 	.word	0x0000277d

00001798 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1798:	b580      	push	{r7, lr}
    179a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB00, PINMUX_PB00E_TC7_WO0);
    179c:	4904      	ldr	r1, [pc, #16]	; (17b0 <LIVE_PULSE_PORT_init+0x18>)
    179e:	2020      	movs	r0, #32
    17a0:	4b04      	ldr	r3, [pc, #16]	; (17b4 <LIVE_PULSE_PORT_init+0x1c>)
    17a2:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    17a4:	4904      	ldr	r1, [pc, #16]	; (17b8 <LIVE_PULSE_PORT_init+0x20>)
    17a6:	2021      	movs	r0, #33	; 0x21
    17a8:	4b02      	ldr	r3, [pc, #8]	; (17b4 <LIVE_PULSE_PORT_init+0x1c>)
    17aa:	4798      	blx	r3
}
    17ac:	bf00      	nop
    17ae:	bd80      	pop	{r7, pc}
    17b0:	00200004 	.word	0x00200004
    17b4:	0000104d 	.word	0x0000104d
    17b8:	00210004 	.word	0x00210004

000017bc <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    17bc:	b580      	push	{r7, lr}
    17be:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    17c0:	4804      	ldr	r0, [pc, #16]	; (17d4 <LIVE_PULSE_CLOCK_init+0x18>)
    17c2:	4b05      	ldr	r3, [pc, #20]	; (17d8 <LIVE_PULSE_CLOCK_init+0x1c>)
    17c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17c6:	224b      	movs	r2, #75	; 0x4b
    17c8:	2127      	movs	r1, #39	; 0x27
    17ca:	4804      	ldr	r0, [pc, #16]	; (17dc <LIVE_PULSE_CLOCK_init+0x20>)
    17cc:	4b04      	ldr	r3, [pc, #16]	; (17e0 <LIVE_PULSE_CLOCK_init+0x24>)
    17ce:	4798      	blx	r3
}
    17d0:	bf00      	nop
    17d2:	bd80      	pop	{r7, pc}
    17d4:	40000800 	.word	0x40000800
    17d8:	00000b1f 	.word	0x00000b1f
    17dc:	40001c00 	.word	0x40001c00
    17e0:	00000899 	.word	0x00000899

000017e4 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    17e4:	b580      	push	{r7, lr}
    17e6:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    17e8:	4b06      	ldr	r3, [pc, #24]	; (1804 <LIVE_PULSE_init+0x20>)
    17ea:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    17ec:	4b06      	ldr	r3, [pc, #24]	; (1808 <LIVE_PULSE_init+0x24>)
    17ee:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    17f0:	4b06      	ldr	r3, [pc, #24]	; (180c <LIVE_PULSE_init+0x28>)
    17f2:	4798      	blx	r3
    17f4:	4603      	mov	r3, r0
    17f6:	461a      	mov	r2, r3
    17f8:	4905      	ldr	r1, [pc, #20]	; (1810 <LIVE_PULSE_init+0x2c>)
    17fa:	4806      	ldr	r0, [pc, #24]	; (1814 <LIVE_PULSE_init+0x30>)
    17fc:	4b06      	ldr	r3, [pc, #24]	; (1818 <LIVE_PULSE_init+0x34>)
    17fe:	4798      	blx	r3
}
    1800:	bf00      	nop
    1802:	bd80      	pop	{r7, pc}
    1804:	000017bd 	.word	0x000017bd
    1808:	00001799 	.word	0x00001799
    180c:	00007589 	.word	0x00007589
    1810:	43001800 	.word	0x43001800
    1814:	20000bc0 	.word	0x20000bc0
    1818:	00002025 	.word	0x00002025

0000181c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    181c:	b580      	push	{r7, lr}
    181e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1820:	2102      	movs	r1, #2
    1822:	2018      	movs	r0, #24
    1824:	4b0f      	ldr	r3, [pc, #60]	; (1864 <CDCUSB_PORT_init+0x48>)
    1826:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1828:	2100      	movs	r1, #0
    182a:	2018      	movs	r0, #24
    182c:	4b0e      	ldr	r3, [pc, #56]	; (1868 <CDCUSB_PORT_init+0x4c>)
    182e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1830:	2100      	movs	r1, #0
    1832:	2018      	movs	r0, #24
    1834:	4b0d      	ldr	r3, [pc, #52]	; (186c <CDCUSB_PORT_init+0x50>)
    1836:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1838:	490d      	ldr	r1, [pc, #52]	; (1870 <CDCUSB_PORT_init+0x54>)
    183a:	2018      	movs	r0, #24
    183c:	4b0d      	ldr	r3, [pc, #52]	; (1874 <CDCUSB_PORT_init+0x58>)
    183e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1840:	2102      	movs	r1, #2
    1842:	2019      	movs	r0, #25
    1844:	4b07      	ldr	r3, [pc, #28]	; (1864 <CDCUSB_PORT_init+0x48>)
    1846:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1848:	2100      	movs	r1, #0
    184a:	2019      	movs	r0, #25
    184c:	4b06      	ldr	r3, [pc, #24]	; (1868 <CDCUSB_PORT_init+0x4c>)
    184e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1850:	2100      	movs	r1, #0
    1852:	2019      	movs	r0, #25
    1854:	4b05      	ldr	r3, [pc, #20]	; (186c <CDCUSB_PORT_init+0x50>)
    1856:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1858:	4907      	ldr	r1, [pc, #28]	; (1878 <CDCUSB_PORT_init+0x5c>)
    185a:	2019      	movs	r0, #25
    185c:	4b05      	ldr	r3, [pc, #20]	; (1874 <CDCUSB_PORT_init+0x58>)
    185e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1860:	bf00      	nop
    1862:	bd80      	pop	{r7, pc}
    1864:	0000106d 	.word	0x0000106d
    1868:	000010a5 	.word	0x000010a5
    186c:	00001019 	.word	0x00001019
    1870:	00180007 	.word	0x00180007
    1874:	0000104d 	.word	0x0000104d
    1878:	00190007 	.word	0x00190007

0000187c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    187c:	b580      	push	{r7, lr}
    187e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1880:	2242      	movs	r2, #66	; 0x42
    1882:	210a      	movs	r1, #10
    1884:	4805      	ldr	r0, [pc, #20]	; (189c <CDCUSB_CLOCK_init+0x20>)
    1886:	4b06      	ldr	r3, [pc, #24]	; (18a0 <CDCUSB_CLOCK_init+0x24>)
    1888:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    188a:	4806      	ldr	r0, [pc, #24]	; (18a4 <CDCUSB_CLOCK_init+0x28>)
    188c:	4b06      	ldr	r3, [pc, #24]	; (18a8 <CDCUSB_CLOCK_init+0x2c>)
    188e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    1890:	4804      	ldr	r0, [pc, #16]	; (18a4 <CDCUSB_CLOCK_init+0x28>)
    1892:	4b06      	ldr	r3, [pc, #24]	; (18ac <CDCUSB_CLOCK_init+0x30>)
    1894:	4798      	blx	r3
}
    1896:	bf00      	nop
    1898:	bd80      	pop	{r7, pc}
    189a:	bf00      	nop
    189c:	40001c00 	.word	0x40001c00
    18a0:	00000899 	.word	0x00000899
    18a4:	40000800 	.word	0x40000800
    18a8:	000008bf 	.word	0x000008bf
    18ac:	000009df 	.word	0x000009df

000018b0 <CDCUSB_init>:

void CDCUSB_init(void)
{
    18b0:	b580      	push	{r7, lr}
    18b2:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    18b4:	4b03      	ldr	r3, [pc, #12]	; (18c4 <CDCUSB_init+0x14>)
    18b6:	4798      	blx	r3
	usb_d_init();
    18b8:	4b03      	ldr	r3, [pc, #12]	; (18c8 <CDCUSB_init+0x18>)
    18ba:	4798      	blx	r3
	CDCUSB_PORT_init();
    18bc:	4b03      	ldr	r3, [pc, #12]	; (18cc <CDCUSB_init+0x1c>)
    18be:	4798      	blx	r3
}
    18c0:	bf00      	nop
    18c2:	bd80      	pop	{r7, pc}
    18c4:	0000187d 	.word	0x0000187d
    18c8:	00002cf5 	.word	0x00002cf5
    18cc:	0000181d 	.word	0x0000181d

000018d0 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    18d0:	b580      	push	{r7, lr}
    18d2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    18d4:	4802      	ldr	r0, [pc, #8]	; (18e0 <WATCHDOG_CLOCK_init+0x10>)
    18d6:	4b03      	ldr	r3, [pc, #12]	; (18e4 <WATCHDOG_CLOCK_init+0x14>)
    18d8:	4798      	blx	r3
}
    18da:	bf00      	nop
    18dc:	bd80      	pop	{r7, pc}
    18de:	bf00      	nop
    18e0:	40000800 	.word	0x40000800
    18e4:	0000093f 	.word	0x0000093f

000018e8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    18e8:	b580      	push	{r7, lr}
    18ea:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    18ec:	4b03      	ldr	r3, [pc, #12]	; (18fc <WATCHDOG_init+0x14>)
    18ee:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    18f0:	4903      	ldr	r1, [pc, #12]	; (1900 <WATCHDOG_init+0x18>)
    18f2:	4804      	ldr	r0, [pc, #16]	; (1904 <WATCHDOG_init+0x1c>)
    18f4:	4b04      	ldr	r3, [pc, #16]	; (1908 <WATCHDOG_init+0x20>)
    18f6:	4798      	blx	r3
}
    18f8:	bf00      	nop
    18fa:	bd80      	pop	{r7, pc}
    18fc:	000018d1 	.word	0x000018d1
    1900:	40002000 	.word	0x40002000
    1904:	20000cdc 	.word	0x20000cdc
    1908:	000010ed 	.word	0x000010ed

0000190c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    190c:	b580      	push	{r7, lr}
    190e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1910:	4904      	ldr	r1, [pc, #16]	; (1924 <CAN_CCU_PORT_init+0x18>)
    1912:	202d      	movs	r0, #45	; 0x2d
    1914:	4b04      	ldr	r3, [pc, #16]	; (1928 <CAN_CCU_PORT_init+0x1c>)
    1916:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1918:	4904      	ldr	r1, [pc, #16]	; (192c <CAN_CCU_PORT_init+0x20>)
    191a:	202c      	movs	r0, #44	; 0x2c
    191c:	4b02      	ldr	r3, [pc, #8]	; (1928 <CAN_CCU_PORT_init+0x1c>)
    191e:	4798      	blx	r3
}
    1920:	bf00      	nop
    1922:	bd80      	pop	{r7, pc}
    1924:	002d0007 	.word	0x002d0007
    1928:	0000104d 	.word	0x0000104d
    192c:	002c0007 	.word	0x002c0007

00001930 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1930:	b580      	push	{r7, lr}
    1932:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1934:	4807      	ldr	r0, [pc, #28]	; (1954 <CAN_CCU_init+0x24>)
    1936:	4b08      	ldr	r3, [pc, #32]	; (1958 <CAN_CCU_init+0x28>)
    1938:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    193a:	2243      	movs	r2, #67	; 0x43
    193c:	211c      	movs	r1, #28
    193e:	4807      	ldr	r0, [pc, #28]	; (195c <CAN_CCU_init+0x2c>)
    1940:	4b07      	ldr	r3, [pc, #28]	; (1960 <CAN_CCU_init+0x30>)
    1942:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1944:	4907      	ldr	r1, [pc, #28]	; (1964 <CAN_CCU_init+0x34>)
    1946:	4808      	ldr	r0, [pc, #32]	; (1968 <CAN_CCU_init+0x38>)
    1948:	4b08      	ldr	r3, [pc, #32]	; (196c <CAN_CCU_init+0x3c>)
    194a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    194c:	4b08      	ldr	r3, [pc, #32]	; (1970 <CAN_CCU_init+0x40>)
    194e:	4798      	blx	r3
}
    1950:	bf00      	nop
    1952:	bd80      	pop	{r7, pc}
    1954:	40000800 	.word	0x40000800
    1958:	000008ff 	.word	0x000008ff
    195c:	40001c00 	.word	0x40001c00
    1960:	00000899 	.word	0x00000899
    1964:	42000400 	.word	0x42000400
    1968:	20000bdc 	.word	0x20000bdc
    196c:	00001b29 	.word	0x00001b29
    1970:	0000190d 	.word	0x0000190d

00001974 <system_init>:

void system_init(void)
{
    1974:	b580      	push	{r7, lr}
    1976:	af00      	add	r7, sp, #0
	init_mcu();
    1978:	4b39      	ldr	r3, [pc, #228]	; (1a60 <system_init+0xec>)
    197a:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    197c:	2101      	movs	r1, #1
    197e:	2027      	movs	r0, #39	; 0x27
    1980:	4b38      	ldr	r3, [pc, #224]	; (1a64 <system_init+0xf0>)
    1982:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    1984:	2102      	movs	r1, #2
    1986:	2027      	movs	r0, #39	; 0x27
    1988:	4b37      	ldr	r3, [pc, #220]	; (1a68 <system_init+0xf4>)
    198a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    198c:	f04f 31ff 	mov.w	r1, #4294967295
    1990:	2027      	movs	r0, #39	; 0x27
    1992:	4b36      	ldr	r3, [pc, #216]	; (1a6c <system_init+0xf8>)
    1994:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    1996:	2101      	movs	r1, #1
    1998:	203d      	movs	r0, #61	; 0x3d
    199a:	4b35      	ldr	r3, [pc, #212]	; (1a70 <system_init+0xfc>)
    199c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    199e:	2102      	movs	r1, #2
    19a0:	203d      	movs	r0, #61	; 0x3d
    19a2:	4b30      	ldr	r3, [pc, #192]	; (1a64 <system_init+0xf0>)
    19a4:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    19a6:	f04f 31ff 	mov.w	r1, #4294967295
    19aa:	203d      	movs	r0, #61	; 0x3d
    19ac:	4b2f      	ldr	r3, [pc, #188]	; (1a6c <system_init+0xf8>)
    19ae:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    19b0:	2101      	movs	r1, #1
    19b2:	203f      	movs	r0, #63	; 0x3f
    19b4:	4b2b      	ldr	r3, [pc, #172]	; (1a64 <system_init+0xf0>)
    19b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    19b8:	2101      	movs	r1, #1
    19ba:	203f      	movs	r0, #63	; 0x3f
    19bc:	4b2a      	ldr	r3, [pc, #168]	; (1a68 <system_init+0xf4>)
    19be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    19c0:	f04f 31ff 	mov.w	r1, #4294967295
    19c4:	203f      	movs	r0, #63	; 0x3f
    19c6:	4b29      	ldr	r3, [pc, #164]	; (1a6c <system_init+0xf8>)
    19c8:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    19ca:	2101      	movs	r1, #1
    19cc:	204e      	movs	r0, #78	; 0x4e
    19ce:	4b28      	ldr	r3, [pc, #160]	; (1a70 <system_init+0xfc>)
    19d0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    19d2:	2102      	movs	r1, #2
    19d4:	204e      	movs	r0, #78	; 0x4e
    19d6:	4b23      	ldr	r3, [pc, #140]	; (1a64 <system_init+0xf0>)
    19d8:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    19da:	f04f 31ff 	mov.w	r1, #4294967295
    19de:	204e      	movs	r0, #78	; 0x4e
    19e0:	4b22      	ldr	r3, [pc, #136]	; (1a6c <system_init+0xf8>)
    19e2:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    19e4:	2100      	movs	r1, #0
    19e6:	204f      	movs	r0, #79	; 0x4f
    19e8:	4b21      	ldr	r3, [pc, #132]	; (1a70 <system_init+0xfc>)
    19ea:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    19ec:	2102      	movs	r1, #2
    19ee:	204f      	movs	r0, #79	; 0x4f
    19f0:	4b1c      	ldr	r3, [pc, #112]	; (1a64 <system_init+0xf0>)
    19f2:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    19f4:	f04f 31ff 	mov.w	r1, #4294967295
    19f8:	204f      	movs	r0, #79	; 0x4f
    19fa:	4b1c      	ldr	r3, [pc, #112]	; (1a6c <system_init+0xf8>)
    19fc:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    19fe:	2100      	movs	r1, #0
    1a00:	2052      	movs	r0, #82	; 0x52
    1a02:	4b1b      	ldr	r3, [pc, #108]	; (1a70 <system_init+0xfc>)
    1a04:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1a06:	2102      	movs	r1, #2
    1a08:	2052      	movs	r0, #82	; 0x52
    1a0a:	4b16      	ldr	r3, [pc, #88]	; (1a64 <system_init+0xf0>)
    1a0c:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1a0e:	f04f 31ff 	mov.w	r1, #4294967295
    1a12:	2052      	movs	r0, #82	; 0x52
    1a14:	4b15      	ldr	r3, [pc, #84]	; (1a6c <system_init+0xf8>)
    1a16:	4798      	blx	r3

	CRC_CALC_init();
    1a18:	4b16      	ldr	r3, [pc, #88]	; (1a74 <system_init+0x100>)
    1a1a:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1a1c:	4b16      	ldr	r3, [pc, #88]	; (1a78 <system_init+0x104>)
    1a1e:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1a20:	4b16      	ldr	r3, [pc, #88]	; (1a7c <system_init+0x108>)
    1a22:	4798      	blx	r3

	QSPI_N25Q256_init();
    1a24:	4b16      	ldr	r3, [pc, #88]	; (1a80 <system_init+0x10c>)
    1a26:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1a28:	4b16      	ldr	r3, [pc, #88]	; (1a84 <system_init+0x110>)
    1a2a:	4798      	blx	r3

	SPI_TEMP_init();
    1a2c:	4b16      	ldr	r3, [pc, #88]	; (1a88 <system_init+0x114>)
    1a2e:	4798      	blx	r3

	I2C_EXPANDER_init();
    1a30:	4b16      	ldr	r3, [pc, #88]	; (1a8c <system_init+0x118>)
    1a32:	4798      	blx	r3

	SPI_HI3593_init();
    1a34:	4b16      	ldr	r3, [pc, #88]	; (1a90 <system_init+0x11c>)
    1a36:	4798      	blx	r3

	I2C_EEPROM_init();
    1a38:	4b16      	ldr	r3, [pc, #88]	; (1a94 <system_init+0x120>)
    1a3a:	4798      	blx	r3

	TIMER_INTERFACE_init();
    1a3c:	4b16      	ldr	r3, [pc, #88]	; (1a98 <system_init+0x124>)
    1a3e:	4798      	blx	r3
	TIMER_EVENT_init();
    1a40:	4b16      	ldr	r3, [pc, #88]	; (1a9c <system_init+0x128>)
    1a42:	4798      	blx	r3
	TIMER_ARINC_init();
    1a44:	4b16      	ldr	r3, [pc, #88]	; (1aa0 <system_init+0x12c>)
    1a46:	4798      	blx	r3
	TIMER_HVAC_init();
    1a48:	4b16      	ldr	r3, [pc, #88]	; (1aa4 <system_init+0x130>)
    1a4a:	4798      	blx	r3
	LIVE_PULSE_init();
    1a4c:	4b16      	ldr	r3, [pc, #88]	; (1aa8 <system_init+0x134>)
    1a4e:	4798      	blx	r3

	CDCUSB_init();
    1a50:	4b16      	ldr	r3, [pc, #88]	; (1aac <system_init+0x138>)
    1a52:	4798      	blx	r3

	WATCHDOG_init();
    1a54:	4b16      	ldr	r3, [pc, #88]	; (1ab0 <system_init+0x13c>)
    1a56:	4798      	blx	r3
	CAN_CCU_init();
    1a58:	4b16      	ldr	r3, [pc, #88]	; (1ab4 <system_init+0x140>)
    1a5a:	4798      	blx	r3
}
    1a5c:	bf00      	nop
    1a5e:	bd80      	pop	{r7, pc}
    1a60:	000010dd 	.word	0x000010dd
    1a64:	0000106d 	.word	0x0000106d
    1a68:	00001019 	.word	0x00001019
    1a6c:	0000104d 	.word	0x0000104d
    1a70:	000010a5 	.word	0x000010a5
    1a74:	0000113d 	.word	0x0000113d
    1a78:	00001169 	.word	0x00001169
    1a7c:	0000120d 	.word	0x0000120d
    1a80:	00001349 	.word	0x00001349
    1a84:	0000138d 	.word	0x0000138d
    1a88:	00001451 	.word	0x00001451
    1a8c:	000014e9 	.word	0x000014e9
    1a90:	000015b5 	.word	0x000015b5
    1a94:	0000164d 	.word	0x0000164d
    1a98:	00001679 	.word	0x00001679
    1a9c:	000016c1 	.word	0x000016c1
    1aa0:	00001709 	.word	0x00001709
    1aa4:	00001751 	.word	0x00001751
    1aa8:	000017e5 	.word	0x000017e5
    1aac:	000018b1 	.word	0x000018b1
    1ab0:	000018e9 	.word	0x000018e9
    1ab4:	00001931 	.word	0x00001931

00001ab8 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	b084      	sub	sp, #16
    1abc:	af00      	add	r7, sp, #0
    1abe:	6078      	str	r0, [r7, #4]
    1ac0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1ac2:	2300      	movs	r3, #0
    1ac4:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	2b00      	cmp	r3, #0
    1aca:	bf14      	ite	ne
    1acc:	2301      	movne	r3, #1
    1ace:	2300      	moveq	r3, #0
    1ad0:	b2db      	uxtb	r3, r3
    1ad2:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1ad6:	4911      	ldr	r1, [pc, #68]	; (1b1c <calendar_init+0x64>)
    1ad8:	4618      	mov	r0, r3
    1ada:	4b11      	ldr	r3, [pc, #68]	; (1b20 <calendar_init+0x68>)
    1adc:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1ade:	687b      	ldr	r3, [r7, #4]
    1ae0:	681a      	ldr	r2, [r3, #0]
    1ae2:	683b      	ldr	r3, [r7, #0]
    1ae4:	429a      	cmp	r2, r3
    1ae6:	d101      	bne.n	1aec <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1ae8:	2300      	movs	r3, #0
    1aea:	e013      	b.n	1b14 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	681b      	ldr	r3, [r3, #0]
    1af0:	2b00      	cmp	r3, #0
    1af2:	d002      	beq.n	1afa <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1af4:	f06f 0311 	mvn.w	r3, #17
    1af8:	e00c      	b.n	1b14 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	683a      	ldr	r2, [r7, #0]
    1afe:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	4618      	mov	r0, r3
    1b04:	4b07      	ldr	r3, [pc, #28]	; (1b24 <calendar_init+0x6c>)
    1b06:	4798      	blx	r3
    1b08:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1b0a:	687b      	ldr	r3, [r7, #4]
    1b0c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1b10:	619a      	str	r2, [r3, #24]

	return ret;
    1b12:	68fb      	ldr	r3, [r7, #12]
}
    1b14:	4618      	mov	r0, r3
    1b16:	3710      	adds	r7, #16
    1b18:	46bd      	mov	sp, r7
    1b1a:	bd80      	pop	{r7, pc}
    1b1c:	0000cbac 	.word	0x0000cbac
    1b20:	00003249 	.word	0x00003249
    1b24:	00005051 	.word	0x00005051

00001b28 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	b084      	sub	sp, #16
    1b2c:	af00      	add	r7, sp, #0
    1b2e:	6078      	str	r0, [r7, #4]
    1b30:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1b32:	687b      	ldr	r3, [r7, #4]
    1b34:	2b00      	cmp	r3, #0
    1b36:	d004      	beq.n	1b42 <can_async_init+0x1a>
    1b38:	683b      	ldr	r3, [r7, #0]
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d001      	beq.n	1b42 <can_async_init+0x1a>
    1b3e:	2301      	movs	r3, #1
    1b40:	e000      	b.n	1b44 <can_async_init+0x1c>
    1b42:	2300      	movs	r3, #0
    1b44:	f003 0301 	and.w	r3, r3, #1
    1b48:	b2db      	uxtb	r3, r3
    1b4a:	2241      	movs	r2, #65	; 0x41
    1b4c:	490e      	ldr	r1, [pc, #56]	; (1b88 <can_async_init+0x60>)
    1b4e:	4618      	mov	r0, r3
    1b50:	4b0e      	ldr	r3, [pc, #56]	; (1b8c <can_async_init+0x64>)
    1b52:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	6839      	ldr	r1, [r7, #0]
    1b58:	4618      	mov	r0, r3
    1b5a:	4b0d      	ldr	r3, [pc, #52]	; (1b90 <can_async_init+0x68>)
    1b5c:	4798      	blx	r3
    1b5e:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1b60:	68fb      	ldr	r3, [r7, #12]
    1b62:	2b00      	cmp	r3, #0
    1b64:	d001      	beq.n	1b6a <can_async_init+0x42>
		return rc;
    1b66:	68fb      	ldr	r3, [r7, #12]
    1b68:	e009      	b.n	1b7e <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	4a09      	ldr	r2, [pc, #36]	; (1b94 <can_async_init+0x6c>)
    1b6e:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1b70:	687b      	ldr	r3, [r7, #4]
    1b72:	4a09      	ldr	r2, [pc, #36]	; (1b98 <can_async_init+0x70>)
    1b74:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1b76:	687b      	ldr	r3, [r7, #4]
    1b78:	4a08      	ldr	r2, [pc, #32]	; (1b9c <can_async_init+0x74>)
    1b7a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1b7c:	2300      	movs	r3, #0
}
    1b7e:	4618      	mov	r0, r3
    1b80:	3710      	adds	r7, #16
    1b82:	46bd      	mov	sp, r7
    1b84:	bd80      	pop	{r7, pc}
    1b86:	bf00      	nop
    1b88:	0000cbc8 	.word	0x0000cbc8
    1b8c:	00003249 	.word	0x00003249
    1b90:	0000373d 	.word	0x0000373d
    1b94:	00001ba1 	.word	0x00001ba1
    1b98:	00001bc5 	.word	0x00001bc5
    1b9c:	00001be9 	.word	0x00001be9

00001ba0 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1ba0:	b580      	push	{r7, lr}
    1ba2:	b084      	sub	sp, #16
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1ba8:	687b      	ldr	r3, [r7, #4]
    1baa:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1bac:	68fb      	ldr	r3, [r7, #12]
    1bae:	69db      	ldr	r3, [r3, #28]
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d003      	beq.n	1bbc <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1bb4:	68fb      	ldr	r3, [r7, #12]
    1bb6:	69db      	ldr	r3, [r3, #28]
    1bb8:	68f8      	ldr	r0, [r7, #12]
    1bba:	4798      	blx	r3
	}
}
    1bbc:	bf00      	nop
    1bbe:	3710      	adds	r7, #16
    1bc0:	46bd      	mov	sp, r7
    1bc2:	bd80      	pop	{r7, pc}

00001bc4 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1bc4:	b580      	push	{r7, lr}
    1bc6:	b084      	sub	sp, #16
    1bc8:	af00      	add	r7, sp, #0
    1bca:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1bd0:	68fb      	ldr	r3, [r7, #12]
    1bd2:	6a1b      	ldr	r3, [r3, #32]
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d003      	beq.n	1be0 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1bd8:	68fb      	ldr	r3, [r7, #12]
    1bda:	6a1b      	ldr	r3, [r3, #32]
    1bdc:	68f8      	ldr	r0, [r7, #12]
    1bde:	4798      	blx	r3
	}
}
    1be0:	bf00      	nop
    1be2:	3710      	adds	r7, #16
    1be4:	46bd      	mov	sp, r7
    1be6:	bd80      	pop	{r7, pc}

00001be8 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1be8:	b580      	push	{r7, lr}
    1bea:	b084      	sub	sp, #16
    1bec:	af00      	add	r7, sp, #0
    1bee:	6078      	str	r0, [r7, #4]
    1bf0:	460b      	mov	r3, r1
    1bf2:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1bf4:	687b      	ldr	r3, [r7, #4]
    1bf6:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1bf8:	68fb      	ldr	r3, [r7, #12]
    1bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1bfc:	2b00      	cmp	r3, #0
    1bfe:	d005      	beq.n	1c0c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1c00:	68fb      	ldr	r3, [r7, #12]
    1c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c04:	78fa      	ldrb	r2, [r7, #3]
    1c06:	4611      	mov	r1, r2
    1c08:	68f8      	ldr	r0, [r7, #12]
    1c0a:	4798      	blx	r3
	}
}
    1c0c:	bf00      	nop
    1c0e:	3710      	adds	r7, #16
    1c10:	46bd      	mov	sp, r7
    1c12:	bd80      	pop	{r7, pc}

00001c14 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1c14:	b580      	push	{r7, lr}
    1c16:	b082      	sub	sp, #8
    1c18:	af00      	add	r7, sp, #0
    1c1a:	6078      	str	r0, [r7, #4]
    1c1c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1c1e:	687b      	ldr	r3, [r7, #4]
    1c20:	2b00      	cmp	r3, #0
    1c22:	d004      	beq.n	1c2e <crc_sync_init+0x1a>
    1c24:	683b      	ldr	r3, [r7, #0]
    1c26:	2b00      	cmp	r3, #0
    1c28:	d001      	beq.n	1c2e <crc_sync_init+0x1a>
    1c2a:	2301      	movs	r3, #1
    1c2c:	e000      	b.n	1c30 <crc_sync_init+0x1c>
    1c2e:	2300      	movs	r3, #0
    1c30:	f003 0301 	and.w	r3, r3, #1
    1c34:	b2db      	uxtb	r3, r3
    1c36:	222b      	movs	r2, #43	; 0x2b
    1c38:	4906      	ldr	r1, [pc, #24]	; (1c54 <crc_sync_init+0x40>)
    1c3a:	4618      	mov	r0, r3
    1c3c:	4b06      	ldr	r3, [pc, #24]	; (1c58 <crc_sync_init+0x44>)
    1c3e:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	6839      	ldr	r1, [r7, #0]
    1c44:	4618      	mov	r0, r3
    1c46:	4b05      	ldr	r3, [pc, #20]	; (1c5c <crc_sync_init+0x48>)
    1c48:	4798      	blx	r3
    1c4a:	4603      	mov	r3, r0
}
    1c4c:	4618      	mov	r0, r3
    1c4e:	3708      	adds	r7, #8
    1c50:	46bd      	mov	sp, r7
    1c52:	bd80      	pop	{r7, pc}
    1c54:	0000cbe4 	.word	0x0000cbe4
    1c58:	00003249 	.word	0x00003249
    1c5c:	00003ad9 	.word	0x00003ad9

00001c60 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1c60:	b580      	push	{r7, lr}
    1c62:	af00      	add	r7, sp, #0
	return _event_system_init();
    1c64:	4b02      	ldr	r3, [pc, #8]	; (1c70 <event_system_init+0x10>)
    1c66:	4798      	blx	r3
    1c68:	4603      	mov	r3, r0
}
    1c6a:	4618      	mov	r0, r3
    1c6c:	bd80      	pop	{r7, pc}
    1c6e:	bf00      	nop
    1c70:	0000410d 	.word	0x0000410d

00001c74 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1c74:	b580      	push	{r7, lr}
    1c76:	b082      	sub	sp, #8
    1c78:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1c7a:	2300      	movs	r3, #0
    1c7c:	80fb      	strh	r3, [r7, #6]
    1c7e:	e00e      	b.n	1c9e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1c80:	88fb      	ldrh	r3, [r7, #6]
    1c82:	4a0c      	ldr	r2, [pc, #48]	; (1cb4 <ext_irq_init+0x40>)
    1c84:	00db      	lsls	r3, r3, #3
    1c86:	4413      	add	r3, r2
    1c88:	f04f 32ff 	mov.w	r2, #4294967295
    1c8c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1c8e:	88fb      	ldrh	r3, [r7, #6]
    1c90:	4a08      	ldr	r2, [pc, #32]	; (1cb4 <ext_irq_init+0x40>)
    1c92:	2100      	movs	r1, #0
    1c94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1c98:	88fb      	ldrh	r3, [r7, #6]
    1c9a:	3301      	adds	r3, #1
    1c9c:	80fb      	strh	r3, [r7, #6]
    1c9e:	88fb      	ldrh	r3, [r7, #6]
    1ca0:	2b03      	cmp	r3, #3
    1ca2:	d9ed      	bls.n	1c80 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1ca4:	4804      	ldr	r0, [pc, #16]	; (1cb8 <ext_irq_init+0x44>)
    1ca6:	4b05      	ldr	r3, [pc, #20]	; (1cbc <ext_irq_init+0x48>)
    1ca8:	4798      	blx	r3
    1caa:	4603      	mov	r3, r0
}
    1cac:	4618      	mov	r0, r3
    1cae:	3708      	adds	r7, #8
    1cb0:	46bd      	mov	sp, r7
    1cb2:	bd80      	pop	{r7, pc}
    1cb4:	20000584 	.word	0x20000584
    1cb8:	00001cc1 	.word	0x00001cc1
    1cbc:	00003de1 	.word	0x00003de1

00001cc0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1cc0:	b580      	push	{r7, lr}
    1cc2:	b084      	sub	sp, #16
    1cc4:	af00      	add	r7, sp, #0
    1cc6:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1cc8:	2300      	movs	r3, #0
    1cca:	73fb      	strb	r3, [r7, #15]
    1ccc:	2304      	movs	r3, #4
    1cce:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1cd0:	e02a      	b.n	1d28 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1cd2:	7bba      	ldrb	r2, [r7, #14]
    1cd4:	7bfb      	ldrb	r3, [r7, #15]
    1cd6:	4413      	add	r3, r2
    1cd8:	105b      	asrs	r3, r3, #1
    1cda:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    1cdc:	7b7b      	ldrb	r3, [r7, #13]
    1cde:	2b03      	cmp	r3, #3
    1ce0:	d827      	bhi.n	1d32 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1ce2:	7b7b      	ldrb	r3, [r7, #13]
    1ce4:	4a16      	ldr	r2, [pc, #88]	; (1d40 <process_ext_irq+0x80>)
    1ce6:	00db      	lsls	r3, r3, #3
    1ce8:	4413      	add	r3, r2
    1cea:	685a      	ldr	r2, [r3, #4]
    1cec:	687b      	ldr	r3, [r7, #4]
    1cee:	429a      	cmp	r2, r3
    1cf0:	d10b      	bne.n	1d0a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1cf2:	7b7b      	ldrb	r3, [r7, #13]
    1cf4:	4a12      	ldr	r2, [pc, #72]	; (1d40 <process_ext_irq+0x80>)
    1cf6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d01b      	beq.n	1d36 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    1cfe:	7b7b      	ldrb	r3, [r7, #13]
    1d00:	4a0f      	ldr	r2, [pc, #60]	; (1d40 <process_ext_irq+0x80>)
    1d02:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1d06:	4798      	blx	r3
			}
			return;
    1d08:	e015      	b.n	1d36 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    1d0a:	7b7b      	ldrb	r3, [r7, #13]
    1d0c:	4a0c      	ldr	r2, [pc, #48]	; (1d40 <process_ext_irq+0x80>)
    1d0e:	00db      	lsls	r3, r3, #3
    1d10:	4413      	add	r3, r2
    1d12:	685a      	ldr	r2, [r3, #4]
    1d14:	687b      	ldr	r3, [r7, #4]
    1d16:	429a      	cmp	r2, r3
    1d18:	d203      	bcs.n	1d22 <process_ext_irq+0x62>
			lower = middle + 1;
    1d1a:	7b7b      	ldrb	r3, [r7, #13]
    1d1c:	3301      	adds	r3, #1
    1d1e:	73fb      	strb	r3, [r7, #15]
    1d20:	e002      	b.n	1d28 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1d22:	7b7b      	ldrb	r3, [r7, #13]
    1d24:	3b01      	subs	r3, #1
    1d26:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1d28:	7bba      	ldrb	r2, [r7, #14]
    1d2a:	7bfb      	ldrb	r3, [r7, #15]
    1d2c:	429a      	cmp	r2, r3
    1d2e:	d2d0      	bcs.n	1cd2 <process_ext_irq+0x12>
    1d30:	e002      	b.n	1d38 <process_ext_irq+0x78>
			return;
    1d32:	bf00      	nop
    1d34:	e000      	b.n	1d38 <process_ext_irq+0x78>
			return;
    1d36:	bf00      	nop
		}
	}
}
    1d38:	3710      	adds	r7, #16
    1d3a:	46bd      	mov	sp, r7
    1d3c:	bd80      	pop	{r7, pc}
    1d3e:	bf00      	nop
    1d40:	20000584 	.word	0x20000584

00001d44 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b084      	sub	sp, #16
    1d48:	af00      	add	r7, sp, #0
    1d4a:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1d4c:	687b      	ldr	r3, [r7, #4]
    1d4e:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1d50:	687b      	ldr	r3, [r7, #4]
    1d52:	885b      	ldrh	r3, [r3, #2]
    1d54:	b29b      	uxth	r3, r3
    1d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d107      	bne.n	1d6e <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    1d5e:	68fb      	ldr	r3, [r7, #12]
    1d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1d62:	2b00      	cmp	r3, #0
    1d64:	d003      	beq.n	1d6e <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    1d66:	68fb      	ldr	r3, [r7, #12]
    1d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1d6a:	68f8      	ldr	r0, [r7, #12]
    1d6c:	4798      	blx	r3
		}
	}
}
    1d6e:	bf00      	nop
    1d70:	3710      	adds	r7, #16
    1d72:	46bd      	mov	sp, r7
    1d74:	bd80      	pop	{r7, pc}

00001d76 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1d76:	b580      	push	{r7, lr}
    1d78:	b084      	sub	sp, #16
    1d7a:	af00      	add	r7, sp, #0
    1d7c:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1d82:	687b      	ldr	r3, [r7, #4]
    1d84:	885b      	ldrh	r3, [r3, #2]
    1d86:	b29b      	uxth	r3, r3
    1d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d107      	bne.n	1da0 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    1d90:	68fb      	ldr	r3, [r7, #12]
    1d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1d94:	2b00      	cmp	r3, #0
    1d96:	d003      	beq.n	1da0 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    1d98:	68fb      	ldr	r3, [r7, #12]
    1d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1d9c:	68f8      	ldr	r0, [r7, #12]
    1d9e:	4798      	blx	r3
		}
	}
}
    1da0:	bf00      	nop
    1da2:	3710      	adds	r7, #16
    1da4:	46bd      	mov	sp, r7
    1da6:	bd80      	pop	{r7, pc}

00001da8 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1da8:	b580      	push	{r7, lr}
    1daa:	b084      	sub	sp, #16
    1dac:	af00      	add	r7, sp, #0
    1dae:	6078      	str	r0, [r7, #4]
    1db0:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1db6:	687b      	ldr	r3, [r7, #4]
    1db8:	885b      	ldrh	r3, [r3, #2]
    1dba:	b29b      	uxth	r3, r3
    1dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	d108      	bne.n	1dd6 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    1dc4:	68fb      	ldr	r3, [r7, #12]
    1dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1dc8:	2b00      	cmp	r3, #0
    1dca:	d004      	beq.n	1dd6 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    1dcc:	68fb      	ldr	r3, [r7, #12]
    1dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1dd0:	6839      	ldr	r1, [r7, #0]
    1dd2:	68f8      	ldr	r0, [r7, #12]
    1dd4:	4798      	blx	r3
		}
	}
}
    1dd6:	bf00      	nop
    1dd8:	3710      	adds	r7, #16
    1dda:	46bd      	mov	sp, r7
    1ddc:	bd80      	pop	{r7, pc}
	...

00001de0 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    1de0:	b580      	push	{r7, lr}
    1de2:	b08a      	sub	sp, #40	; 0x28
    1de4:	af00      	add	r7, sp, #0
    1de6:	60f8      	str	r0, [r7, #12]
    1de8:	60b9      	str	r1, [r7, #8]
    1dea:	4613      	mov	r3, r2
    1dec:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1dee:	68fb      	ldr	r3, [r7, #12]
    1df0:	3b28      	subs	r3, #40	; 0x28
    1df2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1df6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1df8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1dfa:	88fb      	ldrh	r3, [r7, #6]
    1dfc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1dfe:	f248 0301 	movw	r3, #32769	; 0x8001
    1e02:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    1e04:	68bb      	ldr	r3, [r7, #8]
    1e06:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e0a:	f107 0214 	add.w	r2, r7, #20
    1e0e:	4611      	mov	r1, r2
    1e10:	4618      	mov	r0, r3
    1e12:	4b06      	ldr	r3, [pc, #24]	; (1e2c <i2c_m_async_read+0x4c>)
    1e14:	4798      	blx	r3
    1e16:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1e18:	6a3b      	ldr	r3, [r7, #32]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d001      	beq.n	1e22 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    1e1e:	6a3b      	ldr	r3, [r7, #32]
    1e20:	e000      	b.n	1e24 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    1e22:	88fb      	ldrh	r3, [r7, #6]
}
    1e24:	4618      	mov	r0, r3
    1e26:	3728      	adds	r7, #40	; 0x28
    1e28:	46bd      	mov	sp, r7
    1e2a:	bd80      	pop	{r7, pc}
    1e2c:	00006049 	.word	0x00006049

00001e30 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1e30:	b580      	push	{r7, lr}
    1e32:	b08a      	sub	sp, #40	; 0x28
    1e34:	af00      	add	r7, sp, #0
    1e36:	60f8      	str	r0, [r7, #12]
    1e38:	60b9      	str	r1, [r7, #8]
    1e3a:	4613      	mov	r3, r2
    1e3c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1e3e:	68fb      	ldr	r3, [r7, #12]
    1e40:	3b28      	subs	r3, #40	; 0x28
    1e42:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1e48:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1e4a:	88fb      	ldrh	r3, [r7, #6]
    1e4c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1e52:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    1e54:	68bb      	ldr	r3, [r7, #8]
    1e56:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e5a:	f107 0214 	add.w	r2, r7, #20
    1e5e:	4611      	mov	r1, r2
    1e60:	4618      	mov	r0, r3
    1e62:	4b06      	ldr	r3, [pc, #24]	; (1e7c <i2c_m_async_write+0x4c>)
    1e64:	4798      	blx	r3
    1e66:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1e68:	6a3b      	ldr	r3, [r7, #32]
    1e6a:	2b00      	cmp	r3, #0
    1e6c:	d001      	beq.n	1e72 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    1e6e:	6a3b      	ldr	r3, [r7, #32]
    1e70:	e000      	b.n	1e74 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    1e72:	88fb      	ldrh	r3, [r7, #6]
}
    1e74:	4618      	mov	r0, r3
    1e76:	3728      	adds	r7, #40	; 0x28
    1e78:	46bd      	mov	sp, r7
    1e7a:	bd80      	pop	{r7, pc}
    1e7c:	00006049 	.word	0x00006049

00001e80 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b084      	sub	sp, #16
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
    1e88:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1e8a:	687b      	ldr	r3, [r7, #4]
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	bf14      	ite	ne
    1e90:	2301      	movne	r3, #1
    1e92:	2300      	moveq	r3, #0
    1e94:	b2db      	uxtb	r3, r3
    1e96:	2289      	movs	r2, #137	; 0x89
    1e98:	4915      	ldr	r1, [pc, #84]	; (1ef0 <i2c_m_async_init+0x70>)
    1e9a:	4618      	mov	r0, r3
    1e9c:	4b15      	ldr	r3, [pc, #84]	; (1ef4 <i2c_m_async_init+0x74>)
    1e9e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	6839      	ldr	r1, [r7, #0]
    1ea4:	4618      	mov	r0, r3
    1ea6:	4b14      	ldr	r3, [pc, #80]	; (1ef8 <i2c_m_async_init+0x78>)
    1ea8:	4798      	blx	r3
    1eaa:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1eac:	68fb      	ldr	r3, [r7, #12]
    1eae:	2b00      	cmp	r3, #0
    1eb0:	d001      	beq.n	1eb6 <i2c_m_async_init+0x36>
		return init_status;
    1eb2:	68fb      	ldr	r3, [r7, #12]
    1eb4:	e018      	b.n	1ee8 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    1eb6:	687b      	ldr	r3, [r7, #4]
    1eb8:	4a10      	ldr	r2, [pc, #64]	; (1efc <i2c_m_async_init+0x7c>)
    1eba:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1ebc:	687b      	ldr	r3, [r7, #4]
    1ebe:	4a10      	ldr	r2, [pc, #64]	; (1f00 <i2c_m_async_init+0x80>)
    1ec0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1ec2:	687b      	ldr	r3, [r7, #4]
    1ec4:	4a0f      	ldr	r2, [pc, #60]	; (1f04 <i2c_m_async_init+0x84>)
    1ec6:	2101      	movs	r1, #1
    1ec8:	4618      	mov	r0, r3
    1eca:	4b0f      	ldr	r3, [pc, #60]	; (1f08 <i2c_m_async_init+0x88>)
    1ecc:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    1ece:	687b      	ldr	r3, [r7, #4]
    1ed0:	4a0e      	ldr	r2, [pc, #56]	; (1f0c <i2c_m_async_init+0x8c>)
    1ed2:	2102      	movs	r1, #2
    1ed4:	4618      	mov	r0, r3
    1ed6:	4b0c      	ldr	r3, [pc, #48]	; (1f08 <i2c_m_async_init+0x88>)
    1ed8:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1eda:	687b      	ldr	r3, [r7, #4]
    1edc:	4a0c      	ldr	r2, [pc, #48]	; (1f10 <i2c_m_async_init+0x90>)
    1ede:	2100      	movs	r1, #0
    1ee0:	4618      	mov	r0, r3
    1ee2:	4b09      	ldr	r3, [pc, #36]	; (1f08 <i2c_m_async_init+0x88>)
    1ee4:	4798      	blx	r3

	return ERR_NONE;
    1ee6:	2300      	movs	r3, #0
}
    1ee8:	4618      	mov	r0, r3
    1eea:	3710      	adds	r7, #16
    1eec:	46bd      	mov	sp, r7
    1eee:	bd80      	pop	{r7, pc}
    1ef0:	0000cc00 	.word	0x0000cc00
    1ef4:	00003249 	.word	0x00003249
    1ef8:	00005e99 	.word	0x00005e99
    1efc:	00001de1 	.word	0x00001de1
    1f00:	00001e31 	.word	0x00001e31
    1f04:	00001d45 	.word	0x00001d45
    1f08:	0000611d 	.word	0x0000611d
    1f0c:	00001d77 	.word	0x00001d77
    1f10:	00001da9 	.word	0x00001da9

00001f14 <i2c_m_async_enable>:

/**
 * \brief Async version of i2c enable
 */
int32_t i2c_m_async_enable(struct i2c_m_async_desc *const i2c)
{
    1f14:	b580      	push	{r7, lr}
    1f16:	b084      	sub	sp, #16
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
	int32_t rc;

	ASSERT(i2c);
    1f1c:	687b      	ldr	r3, [r7, #4]
    1f1e:	2b00      	cmp	r3, #0
    1f20:	bf14      	ite	ne
    1f22:	2301      	movne	r3, #1
    1f24:	2300      	moveq	r3, #0
    1f26:	b2db      	uxtb	r3, r3
    1f28:	22b9      	movs	r2, #185	; 0xb9
    1f2a:	4911      	ldr	r1, [pc, #68]	; (1f70 <i2c_m_async_enable+0x5c>)
    1f2c:	4618      	mov	r0, r3
    1f2e:	4b11      	ldr	r3, [pc, #68]	; (1f74 <i2c_m_async_enable+0x60>)
    1f30:	4798      	blx	r3

	rc = _i2c_m_async_enable(&i2c->device);
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	4618      	mov	r0, r3
    1f36:	4b10      	ldr	r3, [pc, #64]	; (1f78 <i2c_m_async_enable+0x64>)
    1f38:	4798      	blx	r3
    1f3a:	60f8      	str	r0, [r7, #12]
	if (rc == ERR_NONE) {
    1f3c:	68fb      	ldr	r3, [r7, #12]
    1f3e:	2b00      	cmp	r3, #0
    1f40:	d111      	bne.n	1f66 <i2c_m_async_enable+0x52>
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, true);
    1f42:	687b      	ldr	r3, [r7, #4]
    1f44:	2201      	movs	r2, #1
    1f46:	2101      	movs	r1, #1
    1f48:	4618      	mov	r0, r3
    1f4a:	4b0c      	ldr	r3, [pc, #48]	; (1f7c <i2c_m_async_enable+0x68>)
    1f4c:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, true);
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	2201      	movs	r2, #1
    1f52:	2102      	movs	r1, #2
    1f54:	4618      	mov	r0, r3
    1f56:	4b09      	ldr	r3, [pc, #36]	; (1f7c <i2c_m_async_enable+0x68>)
    1f58:	4798      	blx	r3
		_i2c_m_async_set_irq_state(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, true);
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	2201      	movs	r2, #1
    1f5e:	2100      	movs	r1, #0
    1f60:	4618      	mov	r0, r3
    1f62:	4b06      	ldr	r3, [pc, #24]	; (1f7c <i2c_m_async_enable+0x68>)
    1f64:	4798      	blx	r3
	}
	return rc;
    1f66:	68fb      	ldr	r3, [r7, #12]
}
    1f68:	4618      	mov	r0, r3
    1f6a:	3710      	adds	r7, #16
    1f6c:	46bd      	mov	sp, r7
    1f6e:	bd80      	pop	{r7, pc}
    1f70:	0000cc00 	.word	0x0000cc00
    1f74:	00003249 	.word	0x00003249
    1f78:	00005e35 	.word	0x00005e35
    1f7c:	00006161 	.word	0x00006161

00001f80 <i2c_m_async_set_slaveaddr>:

/**
 * \brief Async version of i2c set slave address
 */
int32_t i2c_m_async_set_slaveaddr(struct i2c_m_async_desc *const i2c, int16_t addr, int32_t addr_len)
{
    1f80:	b480      	push	{r7}
    1f82:	b085      	sub	sp, #20
    1f84:	af00      	add	r7, sp, #0
    1f86:	60f8      	str	r0, [r7, #12]
    1f88:	460b      	mov	r3, r1
    1f8a:	607a      	str	r2, [r7, #4]
    1f8c:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    1f8e:	897b      	ldrh	r3, [r7, #10]
    1f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
    1f94:	b21a      	sxth	r2, r3
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	b21b      	sxth	r3, r3
    1f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1f9e:	b21b      	sxth	r3, r3
    1fa0:	4313      	orrs	r3, r2
    1fa2:	b21b      	sxth	r3, r3
    1fa4:	b29a      	uxth	r2, r3
    1fa6:	68fb      	ldr	r3, [r7, #12]
    1fa8:	879a      	strh	r2, [r3, #60]	; 0x3c
    1faa:	68fb      	ldr	r3, [r7, #12]
    1fac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
}
    1fae:	4618      	mov	r0, r3
    1fb0:	3714      	adds	r7, #20
    1fb2:	46bd      	mov	sp, r7
    1fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fb8:	4770      	bx	lr

00001fba <i2c_m_async_register_callback>:
/**
 * \brief I2c register callback
 */
int32_t i2c_m_async_register_callback(struct i2c_m_async_desc *const i2c, enum i2c_m_async_callback_type type,
                                      FUNC_PTR func)
{
    1fba:	b480      	push	{r7}
    1fbc:	b085      	sub	sp, #20
    1fbe:	af00      	add	r7, sp, #0
    1fc0:	60f8      	str	r0, [r7, #12]
    1fc2:	460b      	mov	r3, r1
    1fc4:	607a      	str	r2, [r7, #4]
    1fc6:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    1fc8:	7afb      	ldrb	r3, [r7, #11]
    1fca:	2b01      	cmp	r3, #1
    1fcc:	d007      	beq.n	1fde <i2c_m_async_register_callback+0x24>
    1fce:	2b02      	cmp	r3, #2
    1fd0:	d009      	beq.n	1fe6 <i2c_m_async_register_callback+0x2c>
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	d10b      	bne.n	1fee <i2c_m_async_register_callback+0x34>
	case I2C_M_ASYNC_ERROR:
		i2c->i2c_cb.error = (i2c_error_cb_t)func;
    1fd6:	68fb      	ldr	r3, [r7, #12]
    1fd8:	687a      	ldr	r2, [r7, #4]
    1fda:	631a      	str	r2, [r3, #48]	; 0x30
		break;
    1fdc:	e00a      	b.n	1ff4 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_TX_COMPLETE:
		i2c->i2c_cb.tx_complete = (i2c_complete_cb_t)func;
    1fde:	68fb      	ldr	r3, [r7, #12]
    1fe0:	687a      	ldr	r2, [r7, #4]
    1fe2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
    1fe4:	e006      	b.n	1ff4 <i2c_m_async_register_callback+0x3a>
	case I2C_M_ASYNC_RX_COMPLETE:
		i2c->i2c_cb.rx_complete = (i2c_complete_cb_t)func;
    1fe6:	68fb      	ldr	r3, [r7, #12]
    1fe8:	687a      	ldr	r2, [r7, #4]
    1fea:	639a      	str	r2, [r3, #56]	; 0x38
		break;
    1fec:	e002      	b.n	1ff4 <i2c_m_async_register_callback+0x3a>
	default:
		/* error */
		return ERR_INVALID_ARG;
    1fee:	f06f 030c 	mvn.w	r3, #12
    1ff2:	e000      	b.n	1ff6 <i2c_m_async_register_callback+0x3c>
	}
	return I2C_OK;
    1ff4:	2300      	movs	r3, #0
}
    1ff6:	4618      	mov	r0, r3
    1ff8:	3714      	adds	r7, #20
    1ffa:	46bd      	mov	sp, r7
    1ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2000:	4770      	bx	lr

00002002 <i2c_m_async_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_async_get_io_descriptor(struct i2c_m_async_desc *const i2c, struct io_descriptor **io)
{
    2002:	b480      	push	{r7}
    2004:	b083      	sub	sp, #12
    2006:	af00      	add	r7, sp, #0
    2008:	6078      	str	r0, [r7, #4]
    200a:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    200c:	687b      	ldr	r3, [r7, #4]
    200e:	f103 0228 	add.w	r2, r3, #40	; 0x28
    2012:	683b      	ldr	r3, [r7, #0]
    2014:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2016:	2300      	movs	r3, #0
}
    2018:	4618      	mov	r0, r3
    201a:	370c      	adds	r7, #12
    201c:	46bd      	mov	sp, r7
    201e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2022:	4770      	bx	lr

00002024 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2024:	b580      	push	{r7, lr}
    2026:	b084      	sub	sp, #16
    2028:	af00      	add	r7, sp, #0
    202a:	60f8      	str	r0, [r7, #12]
    202c:	60b9      	str	r1, [r7, #8]
    202e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2030:	68fb      	ldr	r3, [r7, #12]
    2032:	2b00      	cmp	r3, #0
    2034:	d004      	beq.n	2040 <pwm_init+0x1c>
    2036:	68bb      	ldr	r3, [r7, #8]
    2038:	2b00      	cmp	r3, #0
    203a:	d001      	beq.n	2040 <pwm_init+0x1c>
    203c:	2301      	movs	r3, #1
    203e:	e000      	b.n	2042 <pwm_init+0x1e>
    2040:	2300      	movs	r3, #0
    2042:	f003 0301 	and.w	r3, r3, #1
    2046:	b2db      	uxtb	r3, r3
    2048:	2233      	movs	r2, #51	; 0x33
    204a:	490a      	ldr	r1, [pc, #40]	; (2074 <pwm_init+0x50>)
    204c:	4618      	mov	r0, r3
    204e:	4b0a      	ldr	r3, [pc, #40]	; (2078 <pwm_init+0x54>)
    2050:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2052:	68fb      	ldr	r3, [r7, #12]
    2054:	68b9      	ldr	r1, [r7, #8]
    2056:	4618      	mov	r0, r3
    2058:	4b08      	ldr	r3, [pc, #32]	; (207c <pwm_init+0x58>)
    205a:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    205c:	68fb      	ldr	r3, [r7, #12]
    205e:	4a08      	ldr	r2, [pc, #32]	; (2080 <pwm_init+0x5c>)
    2060:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2062:	68fb      	ldr	r3, [r7, #12]
    2064:	4a07      	ldr	r2, [pc, #28]	; (2084 <pwm_init+0x60>)
    2066:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2068:	2300      	movs	r3, #0
}
    206a:	4618      	mov	r0, r3
    206c:	3710      	adds	r7, #16
    206e:	46bd      	mov	sp, r7
    2070:	bd80      	pop	{r7, pc}
    2072:	bf00      	nop
    2074:	0000cc20 	.word	0x0000cc20
    2078:	00003249 	.word	0x00003249
    207c:	0000735d 	.word	0x0000735d
    2080:	00002089 	.word	0x00002089
    2084:	000020ad 	.word	0x000020ad

00002088 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2088:	b580      	push	{r7, lr}
    208a:	b084      	sub	sp, #16
    208c:	af00      	add	r7, sp, #0
    208e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2090:	687b      	ldr	r3, [r7, #4]
    2092:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2094:	68fb      	ldr	r3, [r7, #12]
    2096:	695b      	ldr	r3, [r3, #20]
    2098:	2b00      	cmp	r3, #0
    209a:	d003      	beq.n	20a4 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    209c:	68fb      	ldr	r3, [r7, #12]
    209e:	695b      	ldr	r3, [r3, #20]
    20a0:	68f8      	ldr	r0, [r7, #12]
    20a2:	4798      	blx	r3
	}
}
    20a4:	bf00      	nop
    20a6:	3710      	adds	r7, #16
    20a8:	46bd      	mov	sp, r7
    20aa:	bd80      	pop	{r7, pc}

000020ac <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    20ac:	b580      	push	{r7, lr}
    20ae:	b084      	sub	sp, #16
    20b0:	af00      	add	r7, sp, #0
    20b2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    20b8:	68fb      	ldr	r3, [r7, #12]
    20ba:	699b      	ldr	r3, [r3, #24]
    20bc:	2b00      	cmp	r3, #0
    20be:	d003      	beq.n	20c8 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    20c0:	68fb      	ldr	r3, [r7, #12]
    20c2:	699b      	ldr	r3, [r3, #24]
    20c4:	68f8      	ldr	r0, [r7, #12]
    20c6:	4798      	blx	r3
	}
}
    20c8:	bf00      	nop
    20ca:	3710      	adds	r7, #16
    20cc:	46bd      	mov	sp, r7
    20ce:	bd80      	pop	{r7, pc}

000020d0 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    20d0:	b580      	push	{r7, lr}
    20d2:	b082      	sub	sp, #8
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
    20d8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	2b00      	cmp	r3, #0
    20de:	d004      	beq.n	20ea <qspi_sync_init+0x1a>
    20e0:	683b      	ldr	r3, [r7, #0]
    20e2:	2b00      	cmp	r3, #0
    20e4:	d001      	beq.n	20ea <qspi_sync_init+0x1a>
    20e6:	2301      	movs	r3, #1
    20e8:	e000      	b.n	20ec <qspi_sync_init+0x1c>
    20ea:	2300      	movs	r3, #0
    20ec:	f003 0301 	and.w	r3, r3, #1
    20f0:	b2db      	uxtb	r3, r3
    20f2:	2231      	movs	r2, #49	; 0x31
    20f4:	4906      	ldr	r1, [pc, #24]	; (2110 <qspi_sync_init+0x40>)
    20f6:	4618      	mov	r0, r3
    20f8:	4b06      	ldr	r3, [pc, #24]	; (2114 <qspi_sync_init+0x44>)
    20fa:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    20fc:	687b      	ldr	r3, [r7, #4]
    20fe:	6839      	ldr	r1, [r7, #0]
    2100:	4618      	mov	r0, r3
    2102:	4b05      	ldr	r3, [pc, #20]	; (2118 <qspi_sync_init+0x48>)
    2104:	4798      	blx	r3
    2106:	4603      	mov	r3, r0
}
    2108:	4618      	mov	r0, r3
    210a:	3708      	adds	r7, #8
    210c:	46bd      	mov	sp, r7
    210e:	bd80      	pop	{r7, pc}
    2110:	0000cc38 	.word	0x0000cc38
    2114:	00003249 	.word	0x00003249
    2118:	00004c8d 	.word	0x00004c8d

0000211c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    211c:	b580      	push	{r7, lr}
    211e:	b082      	sub	sp, #8
    2120:	af00      	add	r7, sp, #0
    2122:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2124:	687b      	ldr	r3, [r7, #4]
    2126:	2b00      	cmp	r3, #0
    2128:	bf14      	ite	ne
    212a:	2301      	movne	r3, #1
    212c:	2300      	moveq	r3, #0
    212e:	b2db      	uxtb	r3, r3
    2130:	223f      	movs	r2, #63	; 0x3f
    2132:	4906      	ldr	r1, [pc, #24]	; (214c <qspi_sync_enable+0x30>)
    2134:	4618      	mov	r0, r3
    2136:	4b06      	ldr	r3, [pc, #24]	; (2150 <qspi_sync_enable+0x34>)
    2138:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	4618      	mov	r0, r3
    213e:	4b05      	ldr	r3, [pc, #20]	; (2154 <qspi_sync_enable+0x38>)
    2140:	4798      	blx	r3
    2142:	4603      	mov	r3, r0
}
    2144:	4618      	mov	r0, r3
    2146:	3708      	adds	r7, #8
    2148:	46bd      	mov	sp, r7
    214a:	bd80      	pop	{r7, pc}
    214c:	0000cc38 	.word	0x0000cc38
    2150:	00003249 	.word	0x00003249
    2154:	00004d01 	.word	0x00004d01

00002158 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2158:	b580      	push	{r7, lr}
    215a:	b082      	sub	sp, #8
    215c:	af00      	add	r7, sp, #0
    215e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2160:	687b      	ldr	r3, [r7, #4]
    2162:	2b00      	cmp	r3, #0
    2164:	bf14      	ite	ne
    2166:	2301      	movne	r3, #1
    2168:	2300      	moveq	r3, #0
    216a:	b2db      	uxtb	r3, r3
    216c:	2246      	movs	r2, #70	; 0x46
    216e:	4906      	ldr	r1, [pc, #24]	; (2188 <qspi_sync_disable+0x30>)
    2170:	4618      	mov	r0, r3
    2172:	4b06      	ldr	r3, [pc, #24]	; (218c <qspi_sync_disable+0x34>)
    2174:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4618      	mov	r0, r3
    217a:	4b05      	ldr	r3, [pc, #20]	; (2190 <qspi_sync_disable+0x38>)
    217c:	4798      	blx	r3
    217e:	4603      	mov	r3, r0
}
    2180:	4618      	mov	r0, r3
    2182:	3708      	adds	r7, #8
    2184:	46bd      	mov	sp, r7
    2186:	bd80      	pop	{r7, pc}
    2188:	0000cc38 	.word	0x0000cc38
    218c:	00003249 	.word	0x00003249
    2190:	00004d25 	.word	0x00004d25

00002194 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2194:	b580      	push	{r7, lr}
    2196:	b082      	sub	sp, #8
    2198:	af00      	add	r7, sp, #0
    219a:	6078      	str	r0, [r7, #4]
    219c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    219e:	687b      	ldr	r3, [r7, #4]
    21a0:	2b00      	cmp	r3, #0
    21a2:	d004      	beq.n	21ae <qspi_sync_serial_run_command+0x1a>
    21a4:	683b      	ldr	r3, [r7, #0]
    21a6:	2b00      	cmp	r3, #0
    21a8:	d001      	beq.n	21ae <qspi_sync_serial_run_command+0x1a>
    21aa:	2301      	movs	r3, #1
    21ac:	e000      	b.n	21b0 <qspi_sync_serial_run_command+0x1c>
    21ae:	2300      	movs	r3, #0
    21b0:	f003 0301 	and.w	r3, r3, #1
    21b4:	b2db      	uxtb	r3, r3
    21b6:	224d      	movs	r2, #77	; 0x4d
    21b8:	4906      	ldr	r1, [pc, #24]	; (21d4 <qspi_sync_serial_run_command+0x40>)
    21ba:	4618      	mov	r0, r3
    21bc:	4b06      	ldr	r3, [pc, #24]	; (21d8 <qspi_sync_serial_run_command+0x44>)
    21be:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    21c0:	687b      	ldr	r3, [r7, #4]
    21c2:	6839      	ldr	r1, [r7, #0]
    21c4:	4618      	mov	r0, r3
    21c6:	4b05      	ldr	r3, [pc, #20]	; (21dc <qspi_sync_serial_run_command+0x48>)
    21c8:	4798      	blx	r3
    21ca:	4603      	mov	r3, r0
}
    21cc:	4618      	mov	r0, r3
    21ce:	3708      	adds	r7, #8
    21d0:	46bd      	mov	sp, r7
    21d2:	bd80      	pop	{r7, pc}
    21d4:	0000cc38 	.word	0x0000cc38
    21d8:	00003249 	.word	0x00003249
    21dc:	00004e71 	.word	0x00004e71

000021e0 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    21e0:	b580      	push	{r7, lr}
    21e2:	b084      	sub	sp, #16
    21e4:	af00      	add	r7, sp, #0
    21e6:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    21e8:	687b      	ldr	r3, [r7, #4]
    21ea:	3b04      	subs	r3, #4
    21ec:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    21ee:	687b      	ldr	r3, [r7, #4]
    21f0:	791b      	ldrb	r3, [r3, #4]
    21f2:	2b01      	cmp	r3, #1
    21f4:	d80e      	bhi.n	2214 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    21f6:	68fb      	ldr	r3, [r7, #12]
    21f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    21fa:	68fb      	ldr	r3, [r7, #12]
    21fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    21fe:	1c58      	adds	r0, r3, #1
    2200:	68f9      	ldr	r1, [r7, #12]
    2202:	6448      	str	r0, [r1, #68]	; 0x44
    2204:	4413      	add	r3, r2
    2206:	781b      	ldrb	r3, [r3, #0]
    2208:	b29b      	uxth	r3, r3
    220a:	4619      	mov	r1, r3
    220c:	6878      	ldr	r0, [r7, #4]
    220e:	4b11      	ldr	r3, [pc, #68]	; (2254 <_spi_dev_tx+0x74>)
    2210:	4798      	blx	r3
    2212:	e00d      	b.n	2230 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    2214:	68fb      	ldr	r3, [r7, #12]
    2216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2218:	68fb      	ldr	r3, [r7, #12]
    221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    221c:	1c58      	adds	r0, r3, #1
    221e:	68f9      	ldr	r1, [r7, #12]
    2220:	6448      	str	r0, [r1, #68]	; 0x44
    2222:	005b      	lsls	r3, r3, #1
    2224:	4413      	add	r3, r2
    2226:	881b      	ldrh	r3, [r3, #0]
    2228:	4619      	mov	r1, r3
    222a:	6878      	ldr	r0, [r7, #4]
    222c:	4b09      	ldr	r3, [pc, #36]	; (2254 <_spi_dev_tx+0x74>)
    222e:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    2230:	68fb      	ldr	r3, [r7, #12]
    2232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2234:	68fb      	ldr	r3, [r7, #12]
    2236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2238:	429a      	cmp	r2, r3
    223a:	d107      	bne.n	224c <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    223c:	2100      	movs	r1, #0
    223e:	6878      	ldr	r0, [r7, #4]
    2240:	4b05      	ldr	r3, [pc, #20]	; (2258 <_spi_dev_tx+0x78>)
    2242:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    2244:	2101      	movs	r1, #1
    2246:	6878      	ldr	r0, [r7, #4]
    2248:	4b04      	ldr	r3, [pc, #16]	; (225c <_spi_dev_tx+0x7c>)
    224a:	4798      	blx	r3
	}
}
    224c:	bf00      	nop
    224e:	3710      	adds	r7, #16
    2250:	46bd      	mov	sp, r7
    2252:	bd80      	pop	{r7, pc}
    2254:	00006c6d 	.word	0x00006c6d
    2258:	00006b31 	.word	0x00006b31
    225c:	00006c05 	.word	0x00006c05

00002260 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    2260:	b590      	push	{r4, r7, lr}
    2262:	b085      	sub	sp, #20
    2264:	af00      	add	r7, sp, #0
    2266:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2268:	687b      	ldr	r3, [r7, #4]
    226a:	3b04      	subs	r3, #4
    226c:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    226e:	68fb      	ldr	r3, [r7, #12]
    2270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2272:	2b00      	cmp	r3, #0
    2274:	d021      	beq.n	22ba <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    2276:	687b      	ldr	r3, [r7, #4]
    2278:	791b      	ldrb	r3, [r3, #4]
    227a:	2b01      	cmp	r3, #1
    227c:	d80e      	bhi.n	229c <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    227e:	68fb      	ldr	r3, [r7, #12]
    2280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2282:	68fb      	ldr	r3, [r7, #12]
    2284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2286:	1c58      	adds	r0, r3, #1
    2288:	68f9      	ldr	r1, [r7, #12]
    228a:	6448      	str	r0, [r1, #68]	; 0x44
    228c:	18d4      	adds	r4, r2, r3
    228e:	6878      	ldr	r0, [r7, #4]
    2290:	4b2e      	ldr	r3, [pc, #184]	; (234c <_spi_dev_rx+0xec>)
    2292:	4798      	blx	r3
    2294:	4603      	mov	r3, r0
    2296:	b2db      	uxtb	r3, r3
    2298:	7023      	strb	r3, [r4, #0]
    229a:	e016      	b.n	22ca <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    229c:	68fb      	ldr	r3, [r7, #12]
    229e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    22a0:	68fb      	ldr	r3, [r7, #12]
    22a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    22a4:	1c58      	adds	r0, r3, #1
    22a6:	68f9      	ldr	r1, [r7, #12]
    22a8:	6448      	str	r0, [r1, #68]	; 0x44
    22aa:	005b      	lsls	r3, r3, #1
    22ac:	18d4      	adds	r4, r2, r3
    22ae:	6878      	ldr	r0, [r7, #4]
    22b0:	4b26      	ldr	r3, [pc, #152]	; (234c <_spi_dev_rx+0xec>)
    22b2:	4798      	blx	r3
    22b4:	4603      	mov	r3, r0
    22b6:	8023      	strh	r3, [r4, #0]
    22b8:	e007      	b.n	22ca <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    22ba:	6878      	ldr	r0, [r7, #4]
    22bc:	4b23      	ldr	r3, [pc, #140]	; (234c <_spi_dev_rx+0xec>)
    22be:	4798      	blx	r3
		spi->xfercnt++;
    22c0:	68fb      	ldr	r3, [r7, #12]
    22c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    22c4:	1c5a      	adds	r2, r3, #1
    22c6:	68fb      	ldr	r3, [r7, #12]
    22c8:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    22ca:	68fb      	ldr	r3, [r7, #12]
    22cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    22ce:	68fb      	ldr	r3, [r7, #12]
    22d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    22d2:	429a      	cmp	r2, r3
    22d4:	d226      	bcs.n	2324 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    22d6:	68fb      	ldr	r3, [r7, #12]
    22d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    22da:	2b00      	cmp	r3, #0
    22dc:	d01b      	beq.n	2316 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	791b      	ldrb	r3, [r3, #4]
    22e2:	2b01      	cmp	r3, #1
    22e4:	d80b      	bhi.n	22fe <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    22e6:	68fb      	ldr	r3, [r7, #12]
    22e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    22ea:	68fb      	ldr	r3, [r7, #12]
    22ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    22ee:	4413      	add	r3, r2
    22f0:	781b      	ldrb	r3, [r3, #0]
    22f2:	b29b      	uxth	r3, r3
    22f4:	4619      	mov	r1, r3
    22f6:	6878      	ldr	r0, [r7, #4]
    22f8:	4b15      	ldr	r3, [pc, #84]	; (2350 <_spi_dev_rx+0xf0>)
    22fa:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    22fc:	e022      	b.n	2344 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    22fe:	68fb      	ldr	r3, [r7, #12]
    2300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2302:	68fb      	ldr	r3, [r7, #12]
    2304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2306:	005b      	lsls	r3, r3, #1
    2308:	4413      	add	r3, r2
    230a:	881b      	ldrh	r3, [r3, #0]
    230c:	4619      	mov	r1, r3
    230e:	6878      	ldr	r0, [r7, #4]
    2310:	4b0f      	ldr	r3, [pc, #60]	; (2350 <_spi_dev_rx+0xf0>)
    2312:	4798      	blx	r3
}
    2314:	e016      	b.n	2344 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	88db      	ldrh	r3, [r3, #6]
    231a:	4619      	mov	r1, r3
    231c:	6878      	ldr	r0, [r7, #4]
    231e:	4b0c      	ldr	r3, [pc, #48]	; (2350 <_spi_dev_rx+0xf0>)
    2320:	4798      	blx	r3
}
    2322:	e00f      	b.n	2344 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    2324:	2100      	movs	r1, #0
    2326:	6878      	ldr	r0, [r7, #4]
    2328:	4b0a      	ldr	r3, [pc, #40]	; (2354 <_spi_dev_rx+0xf4>)
    232a:	4798      	blx	r3
		spi->stat = 0;
    232c:	68fb      	ldr	r3, [r7, #12]
    232e:	2200      	movs	r2, #0
    2330:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    2334:	68fb      	ldr	r3, [r7, #12]
    2336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2338:	2b00      	cmp	r3, #0
    233a:	d003      	beq.n	2344 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    233c:	68fb      	ldr	r3, [r7, #12]
    233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2340:	68f8      	ldr	r0, [r7, #12]
    2342:	4798      	blx	r3
}
    2344:	bf00      	nop
    2346:	3714      	adds	r7, #20
    2348:	46bd      	mov	sp, r7
    234a:	bd90      	pop	{r4, r7, pc}
    234c:	00006cc5 	.word	0x00006cc5
    2350:	00006c6d 	.word	0x00006c6d
    2354:	00006b95 	.word	0x00006b95

00002358 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    2358:	b580      	push	{r7, lr}
    235a:	b084      	sub	sp, #16
    235c:	af00      	add	r7, sp, #0
    235e:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	3b04      	subs	r3, #4
    2364:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    2366:	68fb      	ldr	r3, [r7, #12]
    2368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    236a:	68fb      	ldr	r3, [r7, #12]
    236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    236e:	429a      	cmp	r2, r3
    2370:	d30f      	bcc.n	2392 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    2372:	2100      	movs	r1, #0
    2374:	6878      	ldr	r0, [r7, #4]
    2376:	4b09      	ldr	r3, [pc, #36]	; (239c <_spi_dev_complete+0x44>)
    2378:	4798      	blx	r3
		spi->stat = 0;
    237a:	68fb      	ldr	r3, [r7, #12]
    237c:	2200      	movs	r2, #0
    237e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    2382:	68fb      	ldr	r3, [r7, #12]
    2384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2386:	2b00      	cmp	r3, #0
    2388:	d003      	beq.n	2392 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    238a:	68fb      	ldr	r3, [r7, #12]
    238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    238e:	68f8      	ldr	r0, [r7, #12]
    2390:	4798      	blx	r3
		}
	}
}
    2392:	bf00      	nop
    2394:	3710      	adds	r7, #16
    2396:	46bd      	mov	sp, r7
    2398:	bd80      	pop	{r7, pc}
    239a:	bf00      	nop
    239c:	00006c05 	.word	0x00006c05

000023a0 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    23a0:	b580      	push	{r7, lr}
    23a2:	b084      	sub	sp, #16
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
    23a8:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	3b04      	subs	r3, #4
    23ae:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    23b0:	2100      	movs	r1, #0
    23b2:	6878      	ldr	r0, [r7, #4]
    23b4:	4b0d      	ldr	r3, [pc, #52]	; (23ec <_spi_dev_error+0x4c>)
    23b6:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    23b8:	2100      	movs	r1, #0
    23ba:	6878      	ldr	r0, [r7, #4]
    23bc:	4b0c      	ldr	r3, [pc, #48]	; (23f0 <_spi_dev_error+0x50>)
    23be:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    23c0:	2100      	movs	r1, #0
    23c2:	6878      	ldr	r0, [r7, #4]
    23c4:	4b0b      	ldr	r3, [pc, #44]	; (23f4 <_spi_dev_error+0x54>)
    23c6:	4798      	blx	r3
	spi->stat = 0;
    23c8:	68fb      	ldr	r3, [r7, #12]
    23ca:	2200      	movs	r2, #0
    23cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    23d0:	68fb      	ldr	r3, [r7, #12]
    23d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    23d4:	2b00      	cmp	r3, #0
    23d6:	d004      	beq.n	23e2 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    23d8:	68fb      	ldr	r3, [r7, #12]
    23da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    23dc:	6839      	ldr	r1, [r7, #0]
    23de:	68f8      	ldr	r0, [r7, #12]
    23e0:	4798      	blx	r3
	}
}
    23e2:	bf00      	nop
    23e4:	3710      	adds	r7, #16
    23e6:	46bd      	mov	sp, r7
    23e8:	bd80      	pop	{r7, pc}
    23ea:	bf00      	nop
    23ec:	00006b31 	.word	0x00006b31
    23f0:	00006b95 	.word	0x00006b95
    23f4:	00006c05 	.word	0x00006c05

000023f8 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    23f8:	b580      	push	{r7, lr}
    23fa:	b084      	sub	sp, #16
    23fc:	af00      	add	r7, sp, #0
    23fe:	6078      	str	r0, [r7, #4]
    2400:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2402:	2300      	movs	r3, #0
    2404:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2406:	687b      	ldr	r3, [r7, #4]
    2408:	2b00      	cmp	r3, #0
    240a:	d004      	beq.n	2416 <spi_m_async_init+0x1e>
    240c:	683b      	ldr	r3, [r7, #0]
    240e:	2b00      	cmp	r3, #0
    2410:	d001      	beq.n	2416 <spi_m_async_init+0x1e>
    2412:	2301      	movs	r3, #1
    2414:	e000      	b.n	2418 <spi_m_async_init+0x20>
    2416:	2300      	movs	r3, #0
    2418:	f003 0301 	and.w	r3, r3, #1
    241c:	b2db      	uxtb	r3, r3
    241e:	22a5      	movs	r2, #165	; 0xa5
    2420:	491c      	ldr	r1, [pc, #112]	; (2494 <spi_m_async_init+0x9c>)
    2422:	4618      	mov	r0, r3
    2424:	4b1c      	ldr	r3, [pc, #112]	; (2498 <spi_m_async_init+0xa0>)
    2426:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2428:	687b      	ldr	r3, [r7, #4]
    242a:	683a      	ldr	r2, [r7, #0]
    242c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    242e:	687b      	ldr	r3, [r7, #4]
    2430:	3304      	adds	r3, #4
    2432:	6839      	ldr	r1, [r7, #0]
    2434:	4618      	mov	r0, r3
    2436:	4b19      	ldr	r3, [pc, #100]	; (249c <spi_m_async_init+0xa4>)
    2438:	4798      	blx	r3
    243a:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    243c:	68fb      	ldr	r3, [r7, #12]
    243e:	2b00      	cmp	r3, #0
    2440:	db23      	blt.n	248a <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    2442:	687b      	ldr	r3, [r7, #4]
    2444:	3304      	adds	r3, #4
    2446:	4a16      	ldr	r2, [pc, #88]	; (24a0 <spi_m_async_init+0xa8>)
    2448:	2100      	movs	r1, #0
    244a:	4618      	mov	r0, r3
    244c:	4b15      	ldr	r3, [pc, #84]	; (24a4 <spi_m_async_init+0xac>)
    244e:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    2450:	687b      	ldr	r3, [r7, #4]
    2452:	3304      	adds	r3, #4
    2454:	4a14      	ldr	r2, [pc, #80]	; (24a8 <spi_m_async_init+0xb0>)
    2456:	2101      	movs	r1, #1
    2458:	4618      	mov	r0, r3
    245a:	4b12      	ldr	r3, [pc, #72]	; (24a4 <spi_m_async_init+0xac>)
    245c:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	3304      	adds	r3, #4
    2462:	4a12      	ldr	r2, [pc, #72]	; (24ac <spi_m_async_init+0xb4>)
    2464:	2102      	movs	r1, #2
    2466:	4618      	mov	r0, r3
    2468:	4b0e      	ldr	r3, [pc, #56]	; (24a4 <spi_m_async_init+0xac>)
    246a:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    246c:	687b      	ldr	r3, [r7, #4]
    246e:	3304      	adds	r3, #4
    2470:	4a0f      	ldr	r2, [pc, #60]	; (24b0 <spi_m_async_init+0xb8>)
    2472:	2103      	movs	r1, #3
    2474:	4618      	mov	r0, r3
    2476:	4b0b      	ldr	r3, [pc, #44]	; (24a4 <spi_m_async_init+0xac>)
    2478:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	4a0d      	ldr	r2, [pc, #52]	; (24b4 <spi_m_async_init+0xbc>)
    247e:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    2480:	687b      	ldr	r3, [r7, #4]
    2482:	4a0d      	ldr	r2, [pc, #52]	; (24b8 <spi_m_async_init+0xc0>)
    2484:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    2486:	2300      	movs	r3, #0
    2488:	e000      	b.n	248c <spi_m_async_init+0x94>
		return rc;
    248a:	68fb      	ldr	r3, [r7, #12]
}
    248c:	4618      	mov	r0, r3
    248e:	3710      	adds	r7, #16
    2490:	46bd      	mov	sp, r7
    2492:	bd80      	pop	{r7, pc}
    2494:	0000cc54 	.word	0x0000cc54
    2498:	00003249 	.word	0x00003249
    249c:	00006831 	.word	0x00006831
    24a0:	000021e1 	.word	0x000021e1
    24a4:	00006d15 	.word	0x00006d15
    24a8:	00002261 	.word	0x00002261
    24ac:	00002359 	.word	0x00002359
    24b0:	000023a1 	.word	0x000023a1
    24b4:	000024bd 	.word	0x000024bd
    24b8:	0000253d 	.word	0x0000253d

000024bc <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    24bc:	b580      	push	{r7, lr}
    24be:	b086      	sub	sp, #24
    24c0:	af00      	add	r7, sp, #0
    24c2:	60f8      	str	r0, [r7, #12]
    24c4:	60b9      	str	r1, [r7, #8]
    24c6:	4613      	mov	r3, r2
    24c8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    24ca:	68fb      	ldr	r3, [r7, #12]
    24cc:	2b00      	cmp	r3, #0
    24ce:	bf14      	ite	ne
    24d0:	2301      	movne	r3, #1
    24d2:	2300      	moveq	r3, #0
    24d4:	b2db      	uxtb	r3, r3
    24d6:	f240 1205 	movw	r2, #261	; 0x105
    24da:	4914      	ldr	r1, [pc, #80]	; (252c <_spi_m_async_io_read+0x70>)
    24dc:	4618      	mov	r0, r3
    24de:	4b14      	ldr	r3, [pc, #80]	; (2530 <_spi_m_async_io_read+0x74>)
    24e0:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    24e2:	68fb      	ldr	r3, [r7, #12]
    24e4:	3b24      	subs	r3, #36	; 0x24
    24e6:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    24e8:	697b      	ldr	r3, [r7, #20]
    24ea:	68ba      	ldr	r2, [r7, #8]
    24ec:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    24ee:	697b      	ldr	r3, [r7, #20]
    24f0:	2200      	movs	r2, #0
    24f2:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    24f4:	88fa      	ldrh	r2, [r7, #6]
    24f6:	697b      	ldr	r3, [r7, #20]
    24f8:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    24fa:	697b      	ldr	r3, [r7, #20]
    24fc:	2200      	movs	r2, #0
    24fe:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2500:	697b      	ldr	r3, [r7, #20]
    2502:	2210      	movs	r2, #16
    2504:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    2508:	697b      	ldr	r3, [r7, #20]
    250a:	3304      	adds	r3, #4
    250c:	2101      	movs	r1, #1
    250e:	4618      	mov	r0, r3
    2510:	4b08      	ldr	r3, [pc, #32]	; (2534 <_spi_m_async_io_read+0x78>)
    2512:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    2514:	697b      	ldr	r3, [r7, #20]
    2516:	3304      	adds	r3, #4
    2518:	f240 11ff 	movw	r1, #511	; 0x1ff
    251c:	4618      	mov	r0, r3
    251e:	4b06      	ldr	r3, [pc, #24]	; (2538 <_spi_m_async_io_read+0x7c>)
    2520:	4798      	blx	r3

	return ERR_NONE;
    2522:	2300      	movs	r3, #0
}
    2524:	4618      	mov	r0, r3
    2526:	3718      	adds	r7, #24
    2528:	46bd      	mov	sp, r7
    252a:	bd80      	pop	{r7, pc}
    252c:	0000cc54 	.word	0x0000cc54
    2530:	00003249 	.word	0x00003249
    2534:	00006b95 	.word	0x00006b95
    2538:	00006c6d 	.word	0x00006c6d

0000253c <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    253c:	b580      	push	{r7, lr}
    253e:	b086      	sub	sp, #24
    2540:	af00      	add	r7, sp, #0
    2542:	60f8      	str	r0, [r7, #12]
    2544:	60b9      	str	r1, [r7, #8]
    2546:	4613      	mov	r3, r2
    2548:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    254a:	68fb      	ldr	r3, [r7, #12]
    254c:	2b00      	cmp	r3, #0
    254e:	bf14      	ite	ne
    2550:	2301      	movne	r3, #1
    2552:	2300      	moveq	r3, #0
    2554:	b2db      	uxtb	r3, r3
    2556:	f240 1227 	movw	r2, #295	; 0x127
    255a:	4911      	ldr	r1, [pc, #68]	; (25a0 <_spi_m_async_io_write+0x64>)
    255c:	4618      	mov	r0, r3
    255e:	4b11      	ldr	r3, [pc, #68]	; (25a4 <_spi_m_async_io_write+0x68>)
    2560:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    2562:	68fb      	ldr	r3, [r7, #12]
    2564:	3b24      	subs	r3, #36	; 0x24
    2566:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    2568:	697b      	ldr	r3, [r7, #20]
    256a:	2200      	movs	r2, #0
    256c:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    256e:	697b      	ldr	r3, [r7, #20]
    2570:	68ba      	ldr	r2, [r7, #8]
    2572:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2574:	88fa      	ldrh	r2, [r7, #6]
    2576:	697b      	ldr	r3, [r7, #20]
    2578:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    257a:	697b      	ldr	r3, [r7, #20]
    257c:	2200      	movs	r2, #0
    257e:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2580:	697b      	ldr	r3, [r7, #20]
    2582:	2210      	movs	r2, #16
    2584:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    2588:	697b      	ldr	r3, [r7, #20]
    258a:	3304      	adds	r3, #4
    258c:	2101      	movs	r1, #1
    258e:	4618      	mov	r0, r3
    2590:	4b05      	ldr	r3, [pc, #20]	; (25a8 <_spi_m_async_io_write+0x6c>)
    2592:	4798      	blx	r3

	return ERR_NONE;
    2594:	2300      	movs	r3, #0
}
    2596:	4618      	mov	r0, r3
    2598:	3718      	adds	r7, #24
    259a:	46bd      	mov	sp, r7
    259c:	bd80      	pop	{r7, pc}
    259e:	bf00      	nop
    25a0:	0000cc54 	.word	0x0000cc54
    25a4:	00003249 	.word	0x00003249
    25a8:	00006b31 	.word	0x00006b31

000025ac <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    25ac:	b580      	push	{r7, lr}
    25ae:	b084      	sub	sp, #16
    25b0:	af00      	add	r7, sp, #0
    25b2:	6078      	str	r0, [r7, #4]
    25b4:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    25b6:	2300      	movs	r3, #0
    25b8:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    25ba:	687b      	ldr	r3, [r7, #4]
    25bc:	2b00      	cmp	r3, #0
    25be:	d004      	beq.n	25ca <spi_m_sync_init+0x1e>
    25c0:	683b      	ldr	r3, [r7, #0]
    25c2:	2b00      	cmp	r3, #0
    25c4:	d001      	beq.n	25ca <spi_m_sync_init+0x1e>
    25c6:	2301      	movs	r3, #1
    25c8:	e000      	b.n	25cc <spi_m_sync_init+0x20>
    25ca:	2300      	movs	r3, #0
    25cc:	f003 0301 	and.w	r3, r3, #1
    25d0:	b2db      	uxtb	r3, r3
    25d2:	2240      	movs	r2, #64	; 0x40
    25d4:	4910      	ldr	r1, [pc, #64]	; (2618 <spi_m_sync_init+0x6c>)
    25d6:	4618      	mov	r0, r3
    25d8:	4b10      	ldr	r3, [pc, #64]	; (261c <spi_m_sync_init+0x70>)
    25da:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    25dc:	687b      	ldr	r3, [r7, #4]
    25de:	683a      	ldr	r2, [r7, #0]
    25e0:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    25e2:	687b      	ldr	r3, [r7, #4]
    25e4:	3304      	adds	r3, #4
    25e6:	6839      	ldr	r1, [r7, #0]
    25e8:	4618      	mov	r0, r3
    25ea:	4b0d      	ldr	r3, [pc, #52]	; (2620 <spi_m_sync_init+0x74>)
    25ec:	4798      	blx	r3
    25ee:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    25f0:	68fb      	ldr	r3, [r7, #12]
    25f2:	2b00      	cmp	r3, #0
    25f4:	da01      	bge.n	25fa <spi_m_sync_init+0x4e>
		return rc;
    25f6:	68fb      	ldr	r3, [r7, #12]
    25f8:	e00a      	b.n	2610 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    25fa:	687b      	ldr	r3, [r7, #4]
    25fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2600:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	4a07      	ldr	r2, [pc, #28]	; (2624 <spi_m_sync_init+0x78>)
    2606:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2608:	687b      	ldr	r3, [r7, #4]
    260a:	4a07      	ldr	r2, [pc, #28]	; (2628 <spi_m_sync_init+0x7c>)
    260c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    260e:	2300      	movs	r3, #0
}
    2610:	4618      	mov	r0, r3
    2612:	3710      	adds	r7, #16
    2614:	46bd      	mov	sp, r7
    2616:	bd80      	pop	{r7, pc}
    2618:	0000cc74 	.word	0x0000cc74
    261c:	00003249 	.word	0x00003249
    2620:	00006725 	.word	0x00006725
    2624:	0000262d 	.word	0x0000262d
    2628:	00002685 	.word	0x00002685

0000262c <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    262c:	b580      	push	{r7, lr}
    262e:	b088      	sub	sp, #32
    2630:	af00      	add	r7, sp, #0
    2632:	60f8      	str	r0, [r7, #12]
    2634:	60b9      	str	r1, [r7, #8]
    2636:	4613      	mov	r3, r2
    2638:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    263a:	68fb      	ldr	r3, [r7, #12]
    263c:	2b00      	cmp	r3, #0
    263e:	bf14      	ite	ne
    2640:	2301      	movne	r3, #1
    2642:	2300      	moveq	r3, #0
    2644:	b2db      	uxtb	r3, r3
    2646:	2287      	movs	r2, #135	; 0x87
    2648:	490b      	ldr	r1, [pc, #44]	; (2678 <_spi_m_sync_io_read+0x4c>)
    264a:	4618      	mov	r0, r3
    264c:	4b0b      	ldr	r3, [pc, #44]	; (267c <_spi_m_sync_io_read+0x50>)
    264e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2650:	68fb      	ldr	r3, [r7, #12]
    2652:	3b0c      	subs	r3, #12
    2654:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2656:	68bb      	ldr	r3, [r7, #8]
    2658:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    265a:	2300      	movs	r3, #0
    265c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    265e:	88fb      	ldrh	r3, [r7, #6]
    2660:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2662:	f107 0310 	add.w	r3, r7, #16
    2666:	4619      	mov	r1, r3
    2668:	69f8      	ldr	r0, [r7, #28]
    266a:	4b05      	ldr	r3, [pc, #20]	; (2680 <_spi_m_sync_io_read+0x54>)
    266c:	4798      	blx	r3
    266e:	4603      	mov	r3, r0
}
    2670:	4618      	mov	r0, r3
    2672:	3720      	adds	r7, #32
    2674:	46bd      	mov	sp, r7
    2676:	bd80      	pop	{r7, pc}
    2678:	0000cc74 	.word	0x0000cc74
    267c:	00003249 	.word	0x00003249
    2680:	000026dd 	.word	0x000026dd

00002684 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2684:	b580      	push	{r7, lr}
    2686:	b088      	sub	sp, #32
    2688:	af00      	add	r7, sp, #0
    268a:	60f8      	str	r0, [r7, #12]
    268c:	60b9      	str	r1, [r7, #8]
    268e:	4613      	mov	r3, r2
    2690:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2692:	68fb      	ldr	r3, [r7, #12]
    2694:	2b00      	cmp	r3, #0
    2696:	bf14      	ite	ne
    2698:	2301      	movne	r3, #1
    269a:	2300      	moveq	r3, #0
    269c:	b2db      	uxtb	r3, r3
    269e:	22a3      	movs	r2, #163	; 0xa3
    26a0:	490b      	ldr	r1, [pc, #44]	; (26d0 <_spi_m_sync_io_write+0x4c>)
    26a2:	4618      	mov	r0, r3
    26a4:	4b0b      	ldr	r3, [pc, #44]	; (26d4 <_spi_m_sync_io_write+0x50>)
    26a6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    26a8:	68fb      	ldr	r3, [r7, #12]
    26aa:	3b0c      	subs	r3, #12
    26ac:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    26ae:	2300      	movs	r3, #0
    26b0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    26b2:	68bb      	ldr	r3, [r7, #8]
    26b4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    26b6:	88fb      	ldrh	r3, [r7, #6]
    26b8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    26ba:	f107 0310 	add.w	r3, r7, #16
    26be:	4619      	mov	r1, r3
    26c0:	69f8      	ldr	r0, [r7, #28]
    26c2:	4b05      	ldr	r3, [pc, #20]	; (26d8 <_spi_m_sync_io_write+0x54>)
    26c4:	4798      	blx	r3
    26c6:	4603      	mov	r3, r0
}
    26c8:	4618      	mov	r0, r3
    26ca:	3720      	adds	r7, #32
    26cc:	46bd      	mov	sp, r7
    26ce:	bd80      	pop	{r7, pc}
    26d0:	0000cc74 	.word	0x0000cc74
    26d4:	00003249 	.word	0x00003249
    26d8:	000026dd 	.word	0x000026dd

000026dc <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    26dc:	b580      	push	{r7, lr}
    26de:	b086      	sub	sp, #24
    26e0:	af00      	add	r7, sp, #0
    26e2:	6078      	str	r0, [r7, #4]
    26e4:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	2b00      	cmp	r3, #0
    26ea:	d004      	beq.n	26f6 <spi_m_sync_transfer+0x1a>
    26ec:	683b      	ldr	r3, [r7, #0]
    26ee:	2b00      	cmp	r3, #0
    26f0:	d001      	beq.n	26f6 <spi_m_sync_transfer+0x1a>
    26f2:	2301      	movs	r3, #1
    26f4:	e000      	b.n	26f8 <spi_m_sync_transfer+0x1c>
    26f6:	2300      	movs	r3, #0
    26f8:	f003 0301 	and.w	r3, r3, #1
    26fc:	b2db      	uxtb	r3, r3
    26fe:	22b3      	movs	r2, #179	; 0xb3
    2700:	490c      	ldr	r1, [pc, #48]	; (2734 <spi_m_sync_transfer+0x58>)
    2702:	4618      	mov	r0, r3
    2704:	4b0c      	ldr	r3, [pc, #48]	; (2738 <spi_m_sync_transfer+0x5c>)
    2706:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2708:	683b      	ldr	r3, [r7, #0]
    270a:	681b      	ldr	r3, [r3, #0]
    270c:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    270e:	683b      	ldr	r3, [r7, #0]
    2710:	685b      	ldr	r3, [r3, #4]
    2712:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	689b      	ldr	r3, [r3, #8]
    2718:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	3304      	adds	r3, #4
    271e:	f107 020c 	add.w	r2, r7, #12
    2722:	4611      	mov	r1, r2
    2724:	4618      	mov	r0, r3
    2726:	4b05      	ldr	r3, [pc, #20]	; (273c <spi_m_sync_transfer+0x60>)
    2728:	4798      	blx	r3
    272a:	4603      	mov	r3, r0
}
    272c:	4618      	mov	r0, r3
    272e:	3718      	adds	r7, #24
    2730:	46bd      	mov	sp, r7
    2732:	bd80      	pop	{r7, pc}
    2734:	0000cc74 	.word	0x0000cc74
    2738:	00003249 	.word	0x00003249
    273c:	00006a15 	.word	0x00006a15

00002740 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2740:	b480      	push	{r7}
    2742:	b083      	sub	sp, #12
    2744:	af00      	add	r7, sp, #0
    2746:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	681b      	ldr	r3, [r3, #0]
}
    274c:	4618      	mov	r0, r3
    274e:	370c      	adds	r7, #12
    2750:	46bd      	mov	sp, r7
    2752:	f85d 7b04 	ldr.w	r7, [sp], #4
    2756:	4770      	bx	lr

00002758 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2758:	b480      	push	{r7}
    275a:	b083      	sub	sp, #12
    275c:	af00      	add	r7, sp, #0
    275e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	2b00      	cmp	r3, #0
    2764:	d002      	beq.n	276c <list_get_next_element+0x14>
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	681b      	ldr	r3, [r3, #0]
    276a:	e000      	b.n	276e <list_get_next_element+0x16>
    276c:	2300      	movs	r3, #0
}
    276e:	4618      	mov	r0, r3
    2770:	370c      	adds	r7, #12
    2772:	46bd      	mov	sp, r7
    2774:	f85d 7b04 	ldr.w	r7, [sp], #4
    2778:	4770      	bx	lr
	...

0000277c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    277c:	b580      	push	{r7, lr}
    277e:	b084      	sub	sp, #16
    2780:	af00      	add	r7, sp, #0
    2782:	60f8      	str	r0, [r7, #12]
    2784:	60b9      	str	r1, [r7, #8]
    2786:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2788:	68fb      	ldr	r3, [r7, #12]
    278a:	2b00      	cmp	r3, #0
    278c:	d004      	beq.n	2798 <timer_init+0x1c>
    278e:	68bb      	ldr	r3, [r7, #8]
    2790:	2b00      	cmp	r3, #0
    2792:	d001      	beq.n	2798 <timer_init+0x1c>
    2794:	2301      	movs	r3, #1
    2796:	e000      	b.n	279a <timer_init+0x1e>
    2798:	2300      	movs	r3, #0
    279a:	f003 0301 	and.w	r3, r3, #1
    279e:	b2db      	uxtb	r3, r3
    27a0:	223b      	movs	r2, #59	; 0x3b
    27a2:	490a      	ldr	r1, [pc, #40]	; (27cc <timer_init+0x50>)
    27a4:	4618      	mov	r0, r3
    27a6:	4b0a      	ldr	r3, [pc, #40]	; (27d0 <timer_init+0x54>)
    27a8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    27aa:	68fb      	ldr	r3, [r7, #12]
    27ac:	68b9      	ldr	r1, [r7, #8]
    27ae:	4618      	mov	r0, r3
    27b0:	4b08      	ldr	r3, [pc, #32]	; (27d4 <timer_init+0x58>)
    27b2:	4798      	blx	r3
	descr->time                           = 0;
    27b4:	68fb      	ldr	r3, [r7, #12]
    27b6:	2200      	movs	r2, #0
    27b8:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    27ba:	68fb      	ldr	r3, [r7, #12]
    27bc:	4a06      	ldr	r2, [pc, #24]	; (27d8 <timer_init+0x5c>)
    27be:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    27c0:	2300      	movs	r3, #0
}
    27c2:	4618      	mov	r0, r3
    27c4:	3710      	adds	r7, #16
    27c6:	46bd      	mov	sp, r7
    27c8:	bd80      	pop	{r7, pc}
    27ca:	bf00      	nop
    27cc:	0000cc90 	.word	0x0000cc90
    27d0:	00003249 	.word	0x00003249
    27d4:	000070ad 	.word	0x000070ad
    27d8:	0000288d 	.word	0x0000288d

000027dc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    27dc:	b580      	push	{r7, lr}
    27de:	b088      	sub	sp, #32
    27e0:	af00      	add	r7, sp, #0
    27e2:	60f8      	str	r0, [r7, #12]
    27e4:	60b9      	str	r1, [r7, #8]
    27e6:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    27e8:	2300      	movs	r3, #0
    27ea:	61bb      	str	r3, [r7, #24]
    27ec:	68f8      	ldr	r0, [r7, #12]
    27ee:	4b23      	ldr	r3, [pc, #140]	; (287c <timer_add_timer_task+0xa0>)
    27f0:	4798      	blx	r3
    27f2:	6138      	str	r0, [r7, #16]

	if (!head) {
    27f4:	693b      	ldr	r3, [r7, #16]
    27f6:	2b00      	cmp	r3, #0
    27f8:	d104      	bne.n	2804 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    27fa:	68b9      	ldr	r1, [r7, #8]
    27fc:	68f8      	ldr	r0, [r7, #12]
    27fe:	4b20      	ldr	r3, [pc, #128]	; (2880 <timer_add_timer_task+0xa4>)
    2800:	4798      	blx	r3
		return;
    2802:	e037      	b.n	2874 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2804:	693b      	ldr	r3, [r7, #16]
    2806:	61fb      	str	r3, [r7, #28]
    2808:	e022      	b.n	2850 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    280a:	69fb      	ldr	r3, [r7, #28]
    280c:	685a      	ldr	r2, [r3, #4]
    280e:	687b      	ldr	r3, [r7, #4]
    2810:	429a      	cmp	r2, r3
    2812:	d808      	bhi.n	2826 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2814:	69fb      	ldr	r3, [r7, #28]
    2816:	689a      	ldr	r2, [r3, #8]
    2818:	69fb      	ldr	r3, [r7, #28]
    281a:	6859      	ldr	r1, [r3, #4]
    281c:	687b      	ldr	r3, [r7, #4]
    281e:	1acb      	subs	r3, r1, r3
    2820:	4413      	add	r3, r2
    2822:	617b      	str	r3, [r7, #20]
    2824:	e009      	b.n	283a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2826:	69fb      	ldr	r3, [r7, #28]
    2828:	689a      	ldr	r2, [r3, #8]
    282a:	69fb      	ldr	r3, [r7, #28]
    282c:	685b      	ldr	r3, [r3, #4]
    282e:	441a      	add	r2, r3
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	425b      	negs	r3, r3
    2834:	4413      	add	r3, r2
    2836:	3301      	adds	r3, #1
    2838:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    283a:	68bb      	ldr	r3, [r7, #8]
    283c:	689a      	ldr	r2, [r3, #8]
    283e:	697b      	ldr	r3, [r7, #20]
    2840:	429a      	cmp	r2, r3
    2842:	d909      	bls.n	2858 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2844:	69fb      	ldr	r3, [r7, #28]
    2846:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2848:	69f8      	ldr	r0, [r7, #28]
    284a:	4b0e      	ldr	r3, [pc, #56]	; (2884 <timer_add_timer_task+0xa8>)
    284c:	4798      	blx	r3
    284e:	61f8      	str	r0, [r7, #28]
    2850:	69fb      	ldr	r3, [r7, #28]
    2852:	2b00      	cmp	r3, #0
    2854:	d1d9      	bne.n	280a <timer_add_timer_task+0x2e>
    2856:	e000      	b.n	285a <timer_add_timer_task+0x7e>
			break;
    2858:	bf00      	nop
	}

	if (it == head) {
    285a:	69fa      	ldr	r2, [r7, #28]
    285c:	693b      	ldr	r3, [r7, #16]
    285e:	429a      	cmp	r2, r3
    2860:	d104      	bne.n	286c <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2862:	68b9      	ldr	r1, [r7, #8]
    2864:	68f8      	ldr	r0, [r7, #12]
    2866:	4b06      	ldr	r3, [pc, #24]	; (2880 <timer_add_timer_task+0xa4>)
    2868:	4798      	blx	r3
    286a:	e003      	b.n	2874 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    286c:	68b9      	ldr	r1, [r7, #8]
    286e:	69b8      	ldr	r0, [r7, #24]
    2870:	4b05      	ldr	r3, [pc, #20]	; (2888 <timer_add_timer_task+0xac>)
    2872:	4798      	blx	r3
	}
}
    2874:	3720      	adds	r7, #32
    2876:	46bd      	mov	sp, r7
    2878:	bd80      	pop	{r7, pc}
    287a:	bf00      	nop
    287c:	00002741 	.word	0x00002741
    2880:	000032a9 	.word	0x000032a9
    2884:	00002759 	.word	0x00002759
    2888:	00003301 	.word	0x00003301

0000288c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    288c:	b580      	push	{r7, lr}
    288e:	b086      	sub	sp, #24
    2890:	af00      	add	r7, sp, #0
    2892:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2898:	693b      	ldr	r3, [r7, #16]
    289a:	3314      	adds	r3, #20
    289c:	4618      	mov	r0, r3
    289e:	4b27      	ldr	r3, [pc, #156]	; (293c <timer_process_counted+0xb0>)
    28a0:	4798      	blx	r3
    28a2:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    28a4:	693b      	ldr	r3, [r7, #16]
    28a6:	691b      	ldr	r3, [r3, #16]
    28a8:	1c5a      	adds	r2, r3, #1
    28aa:	693b      	ldr	r3, [r7, #16]
    28ac:	611a      	str	r2, [r3, #16]
    28ae:	693b      	ldr	r3, [r7, #16]
    28b0:	691b      	ldr	r3, [r3, #16]
    28b2:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    28b4:	693b      	ldr	r3, [r7, #16]
    28b6:	7e1b      	ldrb	r3, [r3, #24]
    28b8:	b2db      	uxtb	r3, r3
    28ba:	f003 0301 	and.w	r3, r3, #1
    28be:	2b00      	cmp	r3, #0
    28c0:	d106      	bne.n	28d0 <timer_process_counted+0x44>
    28c2:	693b      	ldr	r3, [r7, #16]
    28c4:	7e1b      	ldrb	r3, [r3, #24]
    28c6:	b2db      	uxtb	r3, r3
    28c8:	f003 0302 	and.w	r3, r3, #2
    28cc:	2b00      	cmp	r3, #0
    28ce:	d027      	beq.n	2920 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    28d0:	693b      	ldr	r3, [r7, #16]
    28d2:	7e1b      	ldrb	r3, [r3, #24]
    28d4:	b2db      	uxtb	r3, r3
    28d6:	f043 0302 	orr.w	r3, r3, #2
    28da:	b2da      	uxtb	r2, r3
    28dc:	693b      	ldr	r3, [r7, #16]
    28de:	761a      	strb	r2, [r3, #24]
		return;
    28e0:	e029      	b.n	2936 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    28e2:	697b      	ldr	r3, [r7, #20]
    28e4:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    28e6:	693b      	ldr	r3, [r7, #16]
    28e8:	3314      	adds	r3, #20
    28ea:	4618      	mov	r0, r3
    28ec:	4b14      	ldr	r3, [pc, #80]	; (2940 <timer_process_counted+0xb4>)
    28ee:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    28f0:	68bb      	ldr	r3, [r7, #8]
    28f2:	7c1b      	ldrb	r3, [r3, #16]
    28f4:	2b01      	cmp	r3, #1
    28f6:	d109      	bne.n	290c <timer_process_counted+0x80>
			tmp->time_label = time;
    28f8:	68bb      	ldr	r3, [r7, #8]
    28fa:	68fa      	ldr	r2, [r7, #12]
    28fc:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    28fe:	693b      	ldr	r3, [r7, #16]
    2900:	3314      	adds	r3, #20
    2902:	68fa      	ldr	r2, [r7, #12]
    2904:	68b9      	ldr	r1, [r7, #8]
    2906:	4618      	mov	r0, r3
    2908:	4b0e      	ldr	r3, [pc, #56]	; (2944 <timer_process_counted+0xb8>)
    290a:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    290c:	693b      	ldr	r3, [r7, #16]
    290e:	3314      	adds	r3, #20
    2910:	4618      	mov	r0, r3
    2912:	4b0a      	ldr	r3, [pc, #40]	; (293c <timer_process_counted+0xb0>)
    2914:	4798      	blx	r3
    2916:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2918:	68bb      	ldr	r3, [r7, #8]
    291a:	68db      	ldr	r3, [r3, #12]
    291c:	68b8      	ldr	r0, [r7, #8]
    291e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2920:	697b      	ldr	r3, [r7, #20]
    2922:	2b00      	cmp	r3, #0
    2924:	d007      	beq.n	2936 <timer_process_counted+0xaa>
    2926:	697b      	ldr	r3, [r7, #20]
    2928:	685b      	ldr	r3, [r3, #4]
    292a:	68fa      	ldr	r2, [r7, #12]
    292c:	1ad2      	subs	r2, r2, r3
    292e:	697b      	ldr	r3, [r7, #20]
    2930:	689b      	ldr	r3, [r3, #8]
    2932:	429a      	cmp	r2, r3
    2934:	d2d5      	bcs.n	28e2 <timer_process_counted+0x56>
	}
}
    2936:	3718      	adds	r7, #24
    2938:	46bd      	mov	sp, r7
    293a:	bd80      	pop	{r7, pc}
    293c:	00002741 	.word	0x00002741
    2940:	000033a1 	.word	0x000033a1
    2944:	000027dd 	.word	0x000027dd

00002948 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2948:	b480      	push	{r7}
    294a:	b085      	sub	sp, #20
    294c:	af00      	add	r7, sp, #0
    294e:	4603      	mov	r3, r0
    2950:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2952:	2300      	movs	r3, #0
    2954:	73fb      	strb	r3, [r7, #15]
    2956:	e029      	b.n	29ac <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2958:	f997 300f 	ldrsb.w	r3, [r7, #15]
    295c:	4a19      	ldr	r2, [pc, #100]	; (29c4 <_usb_d_find_ep+0x7c>)
    295e:	015b      	lsls	r3, r3, #5
    2960:	4413      	add	r3, r2
    2962:	3301      	adds	r3, #1
    2964:	781b      	ldrb	r3, [r3, #0]
    2966:	79fa      	ldrb	r2, [r7, #7]
    2968:	429a      	cmp	r2, r3
    296a:	d102      	bne.n	2972 <_usb_d_find_ep+0x2a>
			return i;
    296c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2970:	e022      	b.n	29b8 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2972:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2976:	4a13      	ldr	r2, [pc, #76]	; (29c4 <_usb_d_find_ep+0x7c>)
    2978:	015b      	lsls	r3, r3, #5
    297a:	4413      	add	r3, r2
    297c:	781b      	ldrb	r3, [r3, #0]
    297e:	2b00      	cmp	r3, #0
    2980:	d10e      	bne.n	29a0 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2982:	79fb      	ldrb	r3, [r7, #7]
    2984:	f003 030f 	and.w	r3, r3, #15
    2988:	f997 200f 	ldrsb.w	r2, [r7, #15]
    298c:	490d      	ldr	r1, [pc, #52]	; (29c4 <_usb_d_find_ep+0x7c>)
    298e:	0152      	lsls	r2, r2, #5
    2990:	440a      	add	r2, r1
    2992:	3201      	adds	r2, #1
    2994:	7812      	ldrb	r2, [r2, #0]
    2996:	4293      	cmp	r3, r2
    2998:	d102      	bne.n	29a0 <_usb_d_find_ep+0x58>
			return i;
    299a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    299e:	e00b      	b.n	29b8 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    29a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    29a4:	b2db      	uxtb	r3, r3
    29a6:	3301      	adds	r3, #1
    29a8:	b2db      	uxtb	r3, r3
    29aa:	73fb      	strb	r3, [r7, #15]
    29ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    29b0:	2b03      	cmp	r3, #3
    29b2:	ddd1      	ble.n	2958 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    29b4:	f04f 33ff 	mov.w	r3, #4294967295
}
    29b8:	4618      	mov	r0, r3
    29ba:	3714      	adds	r7, #20
    29bc:	46bd      	mov	sp, r7
    29be:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c2:	4770      	bx	lr
    29c4:	200005a4 	.word	0x200005a4

000029c8 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    29c8:	b580      	push	{r7, lr}
    29ca:	b088      	sub	sp, #32
    29cc:	af00      	add	r7, sp, #0
    29ce:	60ba      	str	r2, [r7, #8]
    29d0:	607b      	str	r3, [r7, #4]
    29d2:	4603      	mov	r3, r0
    29d4:	73fb      	strb	r3, [r7, #15]
    29d6:	460b      	mov	r3, r1
    29d8:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    29da:	68bb      	ldr	r3, [r7, #8]
    29dc:	617b      	str	r3, [r7, #20]
    29de:	687b      	ldr	r3, [r7, #4]
    29e0:	61bb      	str	r3, [r7, #24]
    29e2:	7bbb      	ldrb	r3, [r7, #14]
    29e4:	2b00      	cmp	r3, #0
    29e6:	d004      	beq.n	29f2 <_usb_d_trans+0x2a>
    29e8:	7bfb      	ldrb	r3, [r7, #15]
    29ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    29ee:	b2db      	uxtb	r3, r3
    29f0:	e003      	b.n	29fa <_usb_d_trans+0x32>
    29f2:	7bfb      	ldrb	r3, [r7, #15]
    29f4:	f003 030f 	and.w	r3, r3, #15
    29f8:	b2db      	uxtb	r3, r3
    29fa:	773b      	strb	r3, [r7, #28]
    29fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2a00:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2a02:	f107 0314 	add.w	r3, r7, #20
    2a06:	4618      	mov	r0, r3
    2a08:	4b03      	ldr	r3, [pc, #12]	; (2a18 <_usb_d_trans+0x50>)
    2a0a:	4798      	blx	r3
    2a0c:	4603      	mov	r3, r0
}
    2a0e:	4618      	mov	r0, r3
    2a10:	3720      	adds	r7, #32
    2a12:	46bd      	mov	sp, r7
    2a14:	bd80      	pop	{r7, pc}
    2a16:	bf00      	nop
    2a18:	00009c55 	.word	0x00009c55

00002a1c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2a1c:	b480      	push	{r7}
    2a1e:	b085      	sub	sp, #20
    2a20:	af00      	add	r7, sp, #0
    2a22:	60f8      	str	r0, [r7, #12]
    2a24:	60b9      	str	r1, [r7, #8]
    2a26:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2a28:	2300      	movs	r3, #0
}
    2a2a:	4618      	mov	r0, r3
    2a2c:	3714      	adds	r7, #20
    2a2e:	46bd      	mov	sp, r7
    2a30:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a34:	4770      	bx	lr
	...

00002a38 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b086      	sub	sp, #24
    2a3c:	af00      	add	r7, sp, #0
    2a3e:	4603      	mov	r3, r0
    2a40:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2a42:	79fb      	ldrb	r3, [r7, #7]
    2a44:	4618      	mov	r0, r3
    2a46:	4b2a      	ldr	r3, [pc, #168]	; (2af0 <usb_d_cb_trans_setup+0xb8>)
    2a48:	4798      	blx	r3
    2a4a:	4603      	mov	r3, r0
    2a4c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2a52:	015b      	lsls	r3, r3, #5
    2a54:	4a27      	ldr	r2, [pc, #156]	; (2af4 <usb_d_cb_trans_setup+0xbc>)
    2a56:	4413      	add	r3, r2
    2a58:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2a5a:	693b      	ldr	r3, [r7, #16]
    2a5c:	330c      	adds	r3, #12
    2a5e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2a60:	79fb      	ldrb	r3, [r7, #7]
    2a62:	68f9      	ldr	r1, [r7, #12]
    2a64:	4618      	mov	r0, r3
    2a66:	4b24      	ldr	r3, [pc, #144]	; (2af8 <usb_d_cb_trans_setup+0xc0>)
    2a68:	4798      	blx	r3
    2a6a:	4603      	mov	r3, r0
    2a6c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2a6e:	7afb      	ldrb	r3, [r7, #11]
    2a70:	2b08      	cmp	r3, #8
    2a72:	d00d      	beq.n	2a90 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2a74:	79fb      	ldrb	r3, [r7, #7]
    2a76:	2101      	movs	r1, #1
    2a78:	4618      	mov	r0, r3
    2a7a:	4b20      	ldr	r3, [pc, #128]	; (2afc <usb_d_cb_trans_setup+0xc4>)
    2a7c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2a7e:	79fb      	ldrb	r3, [r7, #7]
    2a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2a84:	b2db      	uxtb	r3, r3
    2a86:	2101      	movs	r1, #1
    2a88:	4618      	mov	r0, r3
    2a8a:	4b1c      	ldr	r3, [pc, #112]	; (2afc <usb_d_cb_trans_setup+0xc4>)
    2a8c:	4798      	blx	r3
		return;
    2a8e:	e02b      	b.n	2ae8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2a90:	79fb      	ldrb	r3, [r7, #7]
    2a92:	2100      	movs	r1, #0
    2a94:	4618      	mov	r0, r3
    2a96:	4b19      	ldr	r3, [pc, #100]	; (2afc <usb_d_cb_trans_setup+0xc4>)
    2a98:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2a9a:	79fb      	ldrb	r3, [r7, #7]
    2a9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2aa0:	b2db      	uxtb	r3, r3
    2aa2:	2100      	movs	r1, #0
    2aa4:	4618      	mov	r0, r3
    2aa6:	4b15      	ldr	r3, [pc, #84]	; (2afc <usb_d_cb_trans_setup+0xc4>)
    2aa8:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2aaa:	693b      	ldr	r3, [r7, #16]
    2aac:	2201      	movs	r2, #1
    2aae:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2ab0:	693b      	ldr	r3, [r7, #16]
    2ab2:	695b      	ldr	r3, [r3, #20]
    2ab4:	79fa      	ldrb	r2, [r7, #7]
    2ab6:	68f9      	ldr	r1, [r7, #12]
    2ab8:	4610      	mov	r0, r2
    2aba:	4798      	blx	r3
    2abc:	4603      	mov	r3, r0
    2abe:	f083 0301 	eor.w	r3, r3, #1
    2ac2:	b2db      	uxtb	r3, r3
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d00f      	beq.n	2ae8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2ac8:	693b      	ldr	r3, [r7, #16]
    2aca:	2205      	movs	r2, #5
    2acc:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2ace:	79fb      	ldrb	r3, [r7, #7]
    2ad0:	2101      	movs	r1, #1
    2ad2:	4618      	mov	r0, r3
    2ad4:	4b09      	ldr	r3, [pc, #36]	; (2afc <usb_d_cb_trans_setup+0xc4>)
    2ad6:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2ad8:	79fb      	ldrb	r3, [r7, #7]
    2ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2ade:	b2db      	uxtb	r3, r3
    2ae0:	2101      	movs	r1, #1
    2ae2:	4618      	mov	r0, r3
    2ae4:	4b05      	ldr	r3, [pc, #20]	; (2afc <usb_d_cb_trans_setup+0xc4>)
    2ae6:	4798      	blx	r3
	}
}
    2ae8:	3718      	adds	r7, #24
    2aea:	46bd      	mov	sp, r7
    2aec:	bd80      	pop	{r7, pc}
    2aee:	bf00      	nop
    2af0:	00002949 	.word	0x00002949
    2af4:	200005a4 	.word	0x200005a4
    2af8:	00009bad 	.word	0x00009bad
    2afc:	00009a25 	.word	0x00009a25

00002b00 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2b00:	b580      	push	{r7, lr}
    2b02:	b084      	sub	sp, #16
    2b04:	af00      	add	r7, sp, #0
    2b06:	4603      	mov	r3, r0
    2b08:	6039      	str	r1, [r7, #0]
    2b0a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2b0c:	79fb      	ldrb	r3, [r7, #7]
    2b0e:	4618      	mov	r0, r3
    2b10:	4b0d      	ldr	r3, [pc, #52]	; (2b48 <usb_d_cb_trans_more+0x48>)
    2b12:	4798      	blx	r3
    2b14:	4603      	mov	r3, r0
    2b16:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b1c:	015b      	lsls	r3, r3, #5
    2b1e:	4a0b      	ldr	r2, [pc, #44]	; (2b4c <usb_d_cb_trans_more+0x4c>)
    2b20:	4413      	add	r3, r2
    2b22:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2b24:	68bb      	ldr	r3, [r7, #8]
    2b26:	789b      	ldrb	r3, [r3, #2]
    2b28:	2b03      	cmp	r3, #3
    2b2a:	d107      	bne.n	2b3c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2b2c:	68bb      	ldr	r3, [r7, #8]
    2b2e:	699b      	ldr	r3, [r3, #24]
    2b30:	79fa      	ldrb	r2, [r7, #7]
    2b32:	6839      	ldr	r1, [r7, #0]
    2b34:	4610      	mov	r0, r2
    2b36:	4798      	blx	r3
    2b38:	4603      	mov	r3, r0
    2b3a:	e000      	b.n	2b3e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2b3c:	2300      	movs	r3, #0
}
    2b3e:	4618      	mov	r0, r3
    2b40:	3710      	adds	r7, #16
    2b42:	46bd      	mov	sp, r7
    2b44:	bd80      	pop	{r7, pc}
    2b46:	bf00      	nop
    2b48:	00002949 	.word	0x00002949
    2b4c:	200005a4 	.word	0x200005a4

00002b50 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2b50:	b590      	push	{r4, r7, lr}
    2b52:	b087      	sub	sp, #28
    2b54:	af02      	add	r7, sp, #8
    2b56:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2b58:	687b      	ldr	r3, [r7, #4]
    2b5a:	789b      	ldrb	r3, [r3, #2]
    2b5c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2b5e:	687b      	ldr	r3, [r7, #4]
    2b60:	7b1b      	ldrb	r3, [r3, #12]
    2b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2b66:	2b00      	cmp	r3, #0
    2b68:	bf14      	ite	ne
    2b6a:	2301      	movne	r3, #1
    2b6c:	2300      	moveq	r3, #0
    2b6e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2b70:	7bfb      	ldrb	r3, [r7, #15]
    2b72:	2b03      	cmp	r3, #3
    2b74:	d13a      	bne.n	2bec <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2b76:	687b      	ldr	r3, [r7, #4]
    2b78:	69db      	ldr	r3, [r3, #28]
    2b7a:	687a      	ldr	r2, [r7, #4]
    2b7c:	7850      	ldrb	r0, [r2, #1]
    2b7e:	687a      	ldr	r2, [r7, #4]
    2b80:	320c      	adds	r2, #12
    2b82:	2101      	movs	r1, #1
    2b84:	4798      	blx	r3
    2b86:	4603      	mov	r3, r0
    2b88:	737b      	strb	r3, [r7, #13]
		if (err) {
    2b8a:	7b7b      	ldrb	r3, [r7, #13]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d015      	beq.n	2bbc <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2b90:	687b      	ldr	r3, [r7, #4]
    2b92:	2205      	movs	r2, #5
    2b94:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2b96:	687b      	ldr	r3, [r7, #4]
    2b98:	2202      	movs	r2, #2
    2b9a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2b9c:	7bbb      	ldrb	r3, [r7, #14]
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d002      	beq.n	2ba8 <usb_d_ctrl_trans_done+0x58>
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	785b      	ldrb	r3, [r3, #1]
    2ba6:	e004      	b.n	2bb2 <usb_d_ctrl_trans_done+0x62>
    2ba8:	687b      	ldr	r3, [r7, #4]
    2baa:	785b      	ldrb	r3, [r3, #1]
    2bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2bb0:	b2db      	uxtb	r3, r3
    2bb2:	2101      	movs	r1, #1
    2bb4:	4618      	mov	r0, r3
    2bb6:	4b15      	ldr	r3, [pc, #84]	; (2c0c <usb_d_ctrl_trans_done+0xbc>)
    2bb8:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2bba:	e022      	b.n	2c02 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2bbc:	687b      	ldr	r3, [r7, #4]
    2bbe:	2204      	movs	r2, #4
    2bc0:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	7858      	ldrb	r0, [r3, #1]
    2bc6:	7bbb      	ldrb	r3, [r7, #14]
    2bc8:	2b00      	cmp	r3, #0
    2bca:	bf14      	ite	ne
    2bcc:	2301      	movne	r3, #1
    2bce:	2300      	moveq	r3, #0
    2bd0:	b2db      	uxtb	r3, r3
    2bd2:	f083 0301 	eor.w	r3, r3, #1
    2bd6:	b2db      	uxtb	r3, r3
    2bd8:	f003 0301 	and.w	r3, r3, #1
    2bdc:	b2d9      	uxtb	r1, r3
    2bde:	2301      	movs	r3, #1
    2be0:	9300      	str	r3, [sp, #0]
    2be2:	2300      	movs	r3, #0
    2be4:	2200      	movs	r2, #0
    2be6:	4c0a      	ldr	r4, [pc, #40]	; (2c10 <usb_d_ctrl_trans_done+0xc0>)
    2be8:	47a0      	blx	r4
}
    2bea:	e00a      	b.n	2c02 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	69db      	ldr	r3, [r3, #28]
    2bf0:	687a      	ldr	r2, [r7, #4]
    2bf2:	7850      	ldrb	r0, [r2, #1]
    2bf4:	687a      	ldr	r2, [r7, #4]
    2bf6:	320c      	adds	r2, #12
    2bf8:	2100      	movs	r1, #0
    2bfa:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	2202      	movs	r2, #2
    2c00:	709a      	strb	r2, [r3, #2]
}
    2c02:	bf00      	nop
    2c04:	3714      	adds	r7, #20
    2c06:	46bd      	mov	sp, r7
    2c08:	bd90      	pop	{r4, r7, pc}
    2c0a:	bf00      	nop
    2c0c:	00009a25 	.word	0x00009a25
    2c10:	000029c9 	.word	0x000029c9

00002c14 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2c14:	b580      	push	{r7, lr}
    2c16:	b086      	sub	sp, #24
    2c18:	af00      	add	r7, sp, #0
    2c1a:	4603      	mov	r3, r0
    2c1c:	60b9      	str	r1, [r7, #8]
    2c1e:	607a      	str	r2, [r7, #4]
    2c20:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c22:	7bfb      	ldrb	r3, [r7, #15]
    2c24:	4618      	mov	r0, r3
    2c26:	4b2f      	ldr	r3, [pc, #188]	; (2ce4 <_usb_d_cb_trans_done+0xd0>)
    2c28:	4798      	blx	r3
    2c2a:	4603      	mov	r3, r0
    2c2c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c32:	015b      	lsls	r3, r3, #5
    2c34:	4a2c      	ldr	r2, [pc, #176]	; (2ce8 <_usb_d_cb_trans_done+0xd4>)
    2c36:	4413      	add	r3, r2
    2c38:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    2c3a:	68bb      	ldr	r3, [r7, #8]
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d10e      	bne.n	2c5e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2c40:	693b      	ldr	r3, [r7, #16]
    2c42:	2200      	movs	r2, #0
    2c44:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2c46:	693b      	ldr	r3, [r7, #16]
    2c48:	781b      	ldrb	r3, [r3, #0]
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	d103      	bne.n	2c56 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    2c4e:	6938      	ldr	r0, [r7, #16]
    2c50:	4b26      	ldr	r3, [pc, #152]	; (2cec <_usb_d_cb_trans_done+0xd8>)
    2c52:	4798      	blx	r3
			return;
    2c54:	e043      	b.n	2cde <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2c56:	693b      	ldr	r3, [r7, #16]
    2c58:	2201      	movs	r2, #1
    2c5a:	709a      	strb	r2, [r3, #2]
    2c5c:	e038      	b.n	2cd0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    2c5e:	68bb      	ldr	r3, [r7, #8]
    2c60:	2b01      	cmp	r3, #1
    2c62:	d113      	bne.n	2c8c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2c64:	693b      	ldr	r3, [r7, #16]
    2c66:	2202      	movs	r2, #2
    2c68:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2c6a:	693b      	ldr	r3, [r7, #16]
    2c6c:	781b      	ldrb	r3, [r3, #0]
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d108      	bne.n	2c84 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2c72:	693b      	ldr	r3, [r7, #16]
    2c74:	2202      	movs	r2, #2
    2c76:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2c78:	7bfb      	ldrb	r3, [r7, #15]
    2c7a:	2100      	movs	r1, #0
    2c7c:	4618      	mov	r0, r3
    2c7e:	4b1c      	ldr	r3, [pc, #112]	; (2cf0 <_usb_d_cb_trans_done+0xdc>)
    2c80:	4798      	blx	r3
    2c82:	e025      	b.n	2cd0 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2c84:	693b      	ldr	r3, [r7, #16]
    2c86:	2205      	movs	r2, #5
    2c88:	709a      	strb	r2, [r3, #2]
    2c8a:	e021      	b.n	2cd0 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2c8c:	68bb      	ldr	r3, [r7, #8]
    2c8e:	2b02      	cmp	r3, #2
    2c90:	d10e      	bne.n	2cb0 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2c92:	693b      	ldr	r3, [r7, #16]
    2c94:	2204      	movs	r2, #4
    2c96:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2c98:	693b      	ldr	r3, [r7, #16]
    2c9a:	781b      	ldrb	r3, [r3, #0]
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	d103      	bne.n	2ca8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2ca0:	693b      	ldr	r3, [r7, #16]
    2ca2:	2202      	movs	r2, #2
    2ca4:	709a      	strb	r2, [r3, #2]
			return;
    2ca6:	e01a      	b.n	2cde <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2ca8:	693b      	ldr	r3, [r7, #16]
    2caa:	2201      	movs	r2, #1
    2cac:	709a      	strb	r2, [r3, #2]
    2cae:	e00f      	b.n	2cd0 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2cb0:	68bb      	ldr	r3, [r7, #8]
    2cb2:	2b03      	cmp	r3, #3
    2cb4:	d106      	bne.n	2cc4 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2cb6:	693b      	ldr	r3, [r7, #16]
    2cb8:	2200      	movs	r2, #0
    2cba:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2cbc:	693b      	ldr	r3, [r7, #16]
    2cbe:	2205      	movs	r2, #5
    2cc0:	70da      	strb	r2, [r3, #3]
    2cc2:	e005      	b.n	2cd0 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2cc4:	693b      	ldr	r3, [r7, #16]
    2cc6:	2206      	movs	r2, #6
    2cc8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2cca:	693b      	ldr	r3, [r7, #16]
    2ccc:	2206      	movs	r2, #6
    2cce:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2cd0:	693b      	ldr	r3, [r7, #16]
    2cd2:	69db      	ldr	r3, [r3, #28]
    2cd4:	693a      	ldr	r2, [r7, #16]
    2cd6:	78d1      	ldrb	r1, [r2, #3]
    2cd8:	687a      	ldr	r2, [r7, #4]
    2cda:	7bf8      	ldrb	r0, [r7, #15]
    2cdc:	4798      	blx	r3
}
    2cde:	3718      	adds	r7, #24
    2ce0:	46bd      	mov	sp, r7
    2ce2:	bd80      	pop	{r7, pc}
    2ce4:	00002949 	.word	0x00002949
    2ce8:	200005a4 	.word	0x200005a4
    2cec:	00002b51 	.word	0x00002b51
    2cf0:	00009a25 	.word	0x00009a25

00002cf4 <usb_d_init>:

int32_t usb_d_init(void)
{
    2cf4:	b580      	push	{r7, lr}
    2cf6:	b082      	sub	sp, #8
    2cf8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    2cfa:	4b21      	ldr	r3, [pc, #132]	; (2d80 <usb_d_init+0x8c>)
    2cfc:	4798      	blx	r3
    2cfe:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2d00:	683b      	ldr	r3, [r7, #0]
    2d02:	2b00      	cmp	r3, #0
    2d04:	da01      	bge.n	2d0a <usb_d_init+0x16>
		return rc;
    2d06:	683b      	ldr	r3, [r7, #0]
    2d08:	e036      	b.n	2d78 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2d0a:	2280      	movs	r2, #128	; 0x80
    2d0c:	2100      	movs	r1, #0
    2d0e:	481d      	ldr	r0, [pc, #116]	; (2d84 <usb_d_init+0x90>)
    2d10:	4b1d      	ldr	r3, [pc, #116]	; (2d88 <usb_d_init+0x94>)
    2d12:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2d14:	2300      	movs	r3, #0
    2d16:	71fb      	strb	r3, [r7, #7]
    2d18:	e01e      	b.n	2d58 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2d1a:	79fb      	ldrb	r3, [r7, #7]
    2d1c:	4a19      	ldr	r2, [pc, #100]	; (2d84 <usb_d_init+0x90>)
    2d1e:	015b      	lsls	r3, r3, #5
    2d20:	4413      	add	r3, r2
    2d22:	3301      	adds	r3, #1
    2d24:	22ff      	movs	r2, #255	; 0xff
    2d26:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2d28:	79fb      	ldrb	r3, [r7, #7]
    2d2a:	4a16      	ldr	r2, [pc, #88]	; (2d84 <usb_d_init+0x90>)
    2d2c:	015b      	lsls	r3, r3, #5
    2d2e:	4413      	add	r3, r2
    2d30:	3314      	adds	r3, #20
    2d32:	4a16      	ldr	r2, [pc, #88]	; (2d8c <usb_d_init+0x98>)
    2d34:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2d36:	79fb      	ldrb	r3, [r7, #7]
    2d38:	4a12      	ldr	r2, [pc, #72]	; (2d84 <usb_d_init+0x90>)
    2d3a:	015b      	lsls	r3, r3, #5
    2d3c:	4413      	add	r3, r2
    2d3e:	3318      	adds	r3, #24
    2d40:	4a12      	ldr	r2, [pc, #72]	; (2d8c <usb_d_init+0x98>)
    2d42:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2d44:	79fb      	ldrb	r3, [r7, #7]
    2d46:	4a0f      	ldr	r2, [pc, #60]	; (2d84 <usb_d_init+0x90>)
    2d48:	015b      	lsls	r3, r3, #5
    2d4a:	4413      	add	r3, r2
    2d4c:	331c      	adds	r3, #28
    2d4e:	4a0f      	ldr	r2, [pc, #60]	; (2d8c <usb_d_init+0x98>)
    2d50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2d52:	79fb      	ldrb	r3, [r7, #7]
    2d54:	3301      	adds	r3, #1
    2d56:	71fb      	strb	r3, [r7, #7]
    2d58:	79fb      	ldrb	r3, [r7, #7]
    2d5a:	2b03      	cmp	r3, #3
    2d5c:	d9dd      	bls.n	2d1a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2d5e:	490c      	ldr	r1, [pc, #48]	; (2d90 <usb_d_init+0x9c>)
    2d60:	2000      	movs	r0, #0
    2d62:	4b0c      	ldr	r3, [pc, #48]	; (2d94 <usb_d_init+0xa0>)
    2d64:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2d66:	490c      	ldr	r1, [pc, #48]	; (2d98 <usb_d_init+0xa4>)
    2d68:	2001      	movs	r0, #1
    2d6a:	4b0a      	ldr	r3, [pc, #40]	; (2d94 <usb_d_init+0xa0>)
    2d6c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2d6e:	490b      	ldr	r1, [pc, #44]	; (2d9c <usb_d_init+0xa8>)
    2d70:	2002      	movs	r0, #2
    2d72:	4b08      	ldr	r3, [pc, #32]	; (2d94 <usb_d_init+0xa0>)
    2d74:	4798      	blx	r3
	return ERR_NONE;
    2d76:	2300      	movs	r3, #0
}
    2d78:	4618      	mov	r0, r3
    2d7a:	3708      	adds	r7, #8
    2d7c:	46bd      	mov	sp, r7
    2d7e:	bd80      	pop	{r7, pc}
    2d80:	0000926d 	.word	0x0000926d
    2d84:	200005a4 	.word	0x200005a4
    2d88:	0000c9b9 	.word	0x0000c9b9
    2d8c:	00002a1d 	.word	0x00002a1d
    2d90:	00002a39 	.word	0x00002a39
    2d94:	00009e61 	.word	0x00009e61
    2d98:	00002b01 	.word	0x00002b01
    2d9c:	00002c15 	.word	0x00002c15

00002da0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2da0:	b580      	push	{r7, lr}
    2da2:	b082      	sub	sp, #8
    2da4:	af00      	add	r7, sp, #0
    2da6:	4603      	mov	r3, r0
    2da8:	6039      	str	r1, [r7, #0]
    2daa:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2dac:	79fb      	ldrb	r3, [r7, #7]
    2dae:	6839      	ldr	r1, [r7, #0]
    2db0:	4618      	mov	r0, r3
    2db2:	4b03      	ldr	r3, [pc, #12]	; (2dc0 <usb_d_register_callback+0x20>)
    2db4:	4798      	blx	r3
}
    2db6:	bf00      	nop
    2db8:	3708      	adds	r7, #8
    2dba:	46bd      	mov	sp, r7
    2dbc:	bd80      	pop	{r7, pc}
    2dbe:	bf00      	nop
    2dc0:	00009e19 	.word	0x00009e19

00002dc4 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2dc4:	b580      	push	{r7, lr}
    2dc6:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2dc8:	4b02      	ldr	r3, [pc, #8]	; (2dd4 <usb_d_enable+0x10>)
    2dca:	4798      	blx	r3
    2dcc:	4603      	mov	r3, r0
}
    2dce:	4618      	mov	r0, r3
    2dd0:	bd80      	pop	{r7, pc}
    2dd2:	bf00      	nop
    2dd4:	0000935d 	.word	0x0000935d

00002dd8 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2dd8:	b580      	push	{r7, lr}
    2dda:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2ddc:	4b01      	ldr	r3, [pc, #4]	; (2de4 <usb_d_attach+0xc>)
    2dde:	4798      	blx	r3
}
    2de0:	bf00      	nop
    2de2:	bd80      	pop	{r7, pc}
    2de4:	000093e1 	.word	0x000093e1

00002de8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2de8:	b580      	push	{r7, lr}
    2dea:	b082      	sub	sp, #8
    2dec:	af00      	add	r7, sp, #0
    2dee:	4603      	mov	r3, r0
    2df0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    2df2:	79fb      	ldrb	r3, [r7, #7]
    2df4:	4618      	mov	r0, r3
    2df6:	4b03      	ldr	r3, [pc, #12]	; (2e04 <usb_d_set_address+0x1c>)
    2df8:	4798      	blx	r3
}
    2dfa:	bf00      	nop
    2dfc:	3708      	adds	r7, #8
    2dfe:	46bd      	mov	sp, r7
    2e00:	bd80      	pop	{r7, pc}
    2e02:	bf00      	nop
    2e04:	000093f5 	.word	0x000093f5

00002e08 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2e08:	b580      	push	{r7, lr}
    2e0a:	b082      	sub	sp, #8
    2e0c:	af00      	add	r7, sp, #0
    2e0e:	4603      	mov	r3, r0
    2e10:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2e12:	79fb      	ldrb	r3, [r7, #7]
    2e14:	b29b      	uxth	r3, r3
    2e16:	461a      	mov	r2, r3
    2e18:	2100      	movs	r1, #0
    2e1a:	2000      	movs	r0, #0
    2e1c:	4b03      	ldr	r3, [pc, #12]	; (2e2c <usb_d_ep0_init+0x24>)
    2e1e:	4798      	blx	r3
    2e20:	4603      	mov	r3, r0
}
    2e22:	4618      	mov	r0, r3
    2e24:	3708      	adds	r7, #8
    2e26:	46bd      	mov	sp, r7
    2e28:	bd80      	pop	{r7, pc}
    2e2a:	bf00      	nop
    2e2c:	00002e31 	.word	0x00002e31

00002e30 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2e30:	b580      	push	{r7, lr}
    2e32:	b086      	sub	sp, #24
    2e34:	af00      	add	r7, sp, #0
    2e36:	4603      	mov	r3, r0
    2e38:	71fb      	strb	r3, [r7, #7]
    2e3a:	460b      	mov	r3, r1
    2e3c:	71bb      	strb	r3, [r7, #6]
    2e3e:	4613      	mov	r3, r2
    2e40:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2e42:	79fb      	ldrb	r3, [r7, #7]
    2e44:	4618      	mov	r0, r3
    2e46:	4b1e      	ldr	r3, [pc, #120]	; (2ec0 <usb_d_ep_init+0x90>)
    2e48:	4798      	blx	r3
    2e4a:	4603      	mov	r3, r0
    2e4c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2e52:	015b      	lsls	r3, r3, #5
    2e54:	4a1b      	ldr	r2, [pc, #108]	; (2ec4 <usb_d_ep_init+0x94>)
    2e56:	4413      	add	r3, r2
    2e58:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    2e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	db02      	blt.n	2e68 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    2e62:	f06f 0313 	mvn.w	r3, #19
    2e66:	e027      	b.n	2eb8 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2e68:	20ff      	movs	r0, #255	; 0xff
    2e6a:	4b15      	ldr	r3, [pc, #84]	; (2ec0 <usb_d_ep_init+0x90>)
    2e6c:	4798      	blx	r3
    2e6e:	4603      	mov	r3, r0
    2e70:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    2e72:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2e76:	2b00      	cmp	r3, #0
    2e78:	da02      	bge.n	2e80 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    2e7a:	f06f 0314 	mvn.w	r3, #20
    2e7e:	e01b      	b.n	2eb8 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    2e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2e84:	015b      	lsls	r3, r3, #5
    2e86:	4a0f      	ldr	r2, [pc, #60]	; (2ec4 <usb_d_ep_init+0x94>)
    2e88:	4413      	add	r3, r2
    2e8a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2e8c:	88ba      	ldrh	r2, [r7, #4]
    2e8e:	79b9      	ldrb	r1, [r7, #6]
    2e90:	79fb      	ldrb	r3, [r7, #7]
    2e92:	4618      	mov	r0, r3
    2e94:	4b0c      	ldr	r3, [pc, #48]	; (2ec8 <usb_d_ep_init+0x98>)
    2e96:	4798      	blx	r3
    2e98:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2e9a:	68fb      	ldr	r3, [r7, #12]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	da01      	bge.n	2ea4 <usb_d_ep_init+0x74>
		return rc;
    2ea0:	68fb      	ldr	r3, [r7, #12]
    2ea2:	e009      	b.n	2eb8 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    2ea4:	693b      	ldr	r3, [r7, #16]
    2ea6:	79fa      	ldrb	r2, [r7, #7]
    2ea8:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2eaa:	79bb      	ldrb	r3, [r7, #6]
    2eac:	f003 0303 	and.w	r3, r3, #3
    2eb0:	b2da      	uxtb	r2, r3
    2eb2:	693b      	ldr	r3, [r7, #16]
    2eb4:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2eb6:	2300      	movs	r3, #0
}
    2eb8:	4618      	mov	r0, r3
    2eba:	3718      	adds	r7, #24
    2ebc:	46bd      	mov	sp, r7
    2ebe:	bd80      	pop	{r7, pc}
    2ec0:	00002949 	.word	0x00002949
    2ec4:	200005a4 	.word	0x200005a4
    2ec8:	00009495 	.word	0x00009495

00002ecc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2ecc:	b580      	push	{r7, lr}
    2ece:	b084      	sub	sp, #16
    2ed0:	af00      	add	r7, sp, #0
    2ed2:	4603      	mov	r3, r0
    2ed4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2ed6:	79fb      	ldrb	r3, [r7, #7]
    2ed8:	4618      	mov	r0, r3
    2eda:	4b0d      	ldr	r3, [pc, #52]	; (2f10 <usb_d_ep_deinit+0x44>)
    2edc:	4798      	blx	r3
    2ede:	4603      	mov	r3, r0
    2ee0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ee6:	015b      	lsls	r3, r3, #5
    2ee8:	4a0a      	ldr	r2, [pc, #40]	; (2f14 <usb_d_ep_deinit+0x48>)
    2eea:	4413      	add	r3, r2
    2eec:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	db07      	blt.n	2f06 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2ef6:	79fb      	ldrb	r3, [r7, #7]
    2ef8:	4618      	mov	r0, r3
    2efa:	4b07      	ldr	r3, [pc, #28]	; (2f18 <usb_d_ep_deinit+0x4c>)
    2efc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2efe:	68bb      	ldr	r3, [r7, #8]
    2f00:	22ff      	movs	r2, #255	; 0xff
    2f02:	705a      	strb	r2, [r3, #1]
    2f04:	e000      	b.n	2f08 <usb_d_ep_deinit+0x3c>
		return;
    2f06:	bf00      	nop
}
    2f08:	3710      	adds	r7, #16
    2f0a:	46bd      	mov	sp, r7
    2f0c:	bd80      	pop	{r7, pc}
    2f0e:	bf00      	nop
    2f10:	00002949 	.word	0x00002949
    2f14:	200005a4 	.word	0x200005a4
    2f18:	000095c9 	.word	0x000095c9

00002f1c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2f1c:	b580      	push	{r7, lr}
    2f1e:	b086      	sub	sp, #24
    2f20:	af00      	add	r7, sp, #0
    2f22:	4603      	mov	r3, r0
    2f24:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2f26:	79fb      	ldrb	r3, [r7, #7]
    2f28:	4618      	mov	r0, r3
    2f2a:	4b15      	ldr	r3, [pc, #84]	; (2f80 <usb_d_ep_enable+0x64>)
    2f2c:	4798      	blx	r3
    2f2e:	4603      	mov	r3, r0
    2f30:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f36:	015b      	lsls	r3, r3, #5
    2f38:	4a12      	ldr	r2, [pc, #72]	; (2f84 <usb_d_ep_enable+0x68>)
    2f3a:	4413      	add	r3, r2
    2f3c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2f42:	2b00      	cmp	r3, #0
    2f44:	da02      	bge.n	2f4c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    2f46:	f06f 0311 	mvn.w	r3, #17
    2f4a:	e014      	b.n	2f76 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2f4c:	693b      	ldr	r3, [r7, #16]
    2f4e:	781b      	ldrb	r3, [r3, #0]
    2f50:	2b00      	cmp	r3, #0
    2f52:	d101      	bne.n	2f58 <usb_d_ep_enable+0x3c>
    2f54:	2202      	movs	r2, #2
    2f56:	e000      	b.n	2f5a <usb_d_ep_enable+0x3e>
    2f58:	2201      	movs	r2, #1
    2f5a:	693b      	ldr	r3, [r7, #16]
    2f5c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2f5e:	79fb      	ldrb	r3, [r7, #7]
    2f60:	4618      	mov	r0, r3
    2f62:	4b09      	ldr	r3, [pc, #36]	; (2f88 <usb_d_ep_enable+0x6c>)
    2f64:	4798      	blx	r3
    2f66:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2f68:	68fb      	ldr	r3, [r7, #12]
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	da02      	bge.n	2f74 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2f6e:	693b      	ldr	r3, [r7, #16]
    2f70:	2200      	movs	r2, #0
    2f72:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    2f74:	68fb      	ldr	r3, [r7, #12]
}
    2f76:	4618      	mov	r0, r3
    2f78:	3718      	adds	r7, #24
    2f7a:	46bd      	mov	sp, r7
    2f7c:	bd80      	pop	{r7, pc}
    2f7e:	bf00      	nop
    2f80:	00002949 	.word	0x00002949
    2f84:	200005a4 	.word	0x200005a4
    2f88:	000096ad 	.word	0x000096ad

00002f8c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2f8c:	b590      	push	{r4, r7, lr}
    2f8e:	b08d      	sub	sp, #52	; 0x34
    2f90:	af02      	add	r7, sp, #8
    2f92:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2f94:	687b      	ldr	r3, [r7, #4]
    2f96:	7a1b      	ldrb	r3, [r3, #8]
    2f98:	4618      	mov	r0, r3
    2f9a:	4b51      	ldr	r3, [pc, #324]	; (30e0 <usb_d_ep_transfer+0x154>)
    2f9c:	4798      	blx	r3
    2f9e:	4603      	mov	r3, r0
    2fa0:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    2fa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2fa6:	015b      	lsls	r3, r3, #5
    2fa8:	4a4e      	ldr	r2, [pc, #312]	; (30e4 <usb_d_ep_transfer+0x158>)
    2faa:	4413      	add	r3, r2
    2fac:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2fae:	687b      	ldr	r3, [r7, #4]
    2fb0:	7a1b      	ldrb	r3, [r3, #8]
    2fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	bf14      	ite	ne
    2fba:	2301      	movne	r3, #1
    2fbc:	2300      	moveq	r3, #0
    2fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2fc2:	687b      	ldr	r3, [r7, #4]
    2fc4:	7a5b      	ldrb	r3, [r3, #9]
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	bf14      	ite	ne
    2fca:	2301      	movne	r3, #1
    2fcc:	2300      	moveq	r3, #0
    2fce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	685b      	ldr	r3, [r3, #4]
    2fd6:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2fd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2fdc:	2b00      	cmp	r3, #0
    2fde:	da02      	bge.n	2fe6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    2fe0:	f06f 0311 	mvn.w	r3, #17
    2fe4:	e077      	b.n	30d6 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    2fe6:	f107 0308 	add.w	r3, r7, #8
    2fea:	4618      	mov	r0, r3
    2fec:	4b3e      	ldr	r3, [pc, #248]	; (30e8 <usb_d_ep_transfer+0x15c>)
    2fee:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2ff0:	69bb      	ldr	r3, [r7, #24]
    2ff2:	789b      	ldrb	r3, [r3, #2]
    2ff4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    2ff6:	7bfb      	ldrb	r3, [r7, #15]
    2ff8:	b2db      	uxtb	r3, r3
    2ffa:	2b01      	cmp	r3, #1
    2ffc:	d10c      	bne.n	3018 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2ffe:	69bb      	ldr	r3, [r7, #24]
    3000:	2203      	movs	r2, #3
    3002:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3004:	f107 0308 	add.w	r3, r7, #8
    3008:	4618      	mov	r0, r3
    300a:	4b38      	ldr	r3, [pc, #224]	; (30ec <usb_d_ep_transfer+0x160>)
    300c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    300e:	69bb      	ldr	r3, [r7, #24]
    3010:	781b      	ldrb	r3, [r3, #0]
    3012:	2b00      	cmp	r3, #0
    3014:	d151      	bne.n	30ba <usb_d_ep_transfer+0x12e>
    3016:	e017      	b.n	3048 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3018:	f107 0308 	add.w	r3, r7, #8
    301c:	4618      	mov	r0, r3
    301e:	4b33      	ldr	r3, [pc, #204]	; (30ec <usb_d_ep_transfer+0x160>)
    3020:	4798      	blx	r3
		switch (state) {
    3022:	7bfb      	ldrb	r3, [r7, #15]
    3024:	b2db      	uxtb	r3, r3
    3026:	2b05      	cmp	r3, #5
    3028:	d004      	beq.n	3034 <usb_d_ep_transfer+0xa8>
    302a:	2b06      	cmp	r3, #6
    302c:	d004      	beq.n	3038 <usb_d_ep_transfer+0xac>
    302e:	2b00      	cmp	r3, #0
    3030:	d005      	beq.n	303e <usb_d_ep_transfer+0xb2>
    3032:	e007      	b.n	3044 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3034:	2302      	movs	r3, #2
    3036:	e04e      	b.n	30d6 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3038:	f06f 030f 	mvn.w	r3, #15
    303c:	e04b      	b.n	30d6 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    303e:	f06f 0312 	mvn.w	r3, #18
    3042:	e048      	b.n	30d6 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3044:	2301      	movs	r3, #1
    3046:	e046      	b.n	30d6 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3048:	69bb      	ldr	r3, [r7, #24]
    304a:	7c9b      	ldrb	r3, [r3, #18]
    304c:	b29a      	uxth	r2, r3
    304e:	69bb      	ldr	r3, [r7, #24]
    3050:	7cdb      	ldrb	r3, [r3, #19]
    3052:	b29b      	uxth	r3, r3
    3054:	021b      	lsls	r3, r3, #8
    3056:	b29b      	uxth	r3, r3
    3058:	4413      	add	r3, r2
    305a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    305c:	8afb      	ldrh	r3, [r7, #22]
    305e:	2b00      	cmp	r3, #0
    3060:	d10b      	bne.n	307a <usb_d_ep_transfer+0xee>
			dir                 = true;
    3062:	2301      	movs	r3, #1
    3064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3068:	2300      	movs	r3, #0
    306a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    306c:	2301      	movs	r3, #1
    306e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3072:	69bb      	ldr	r3, [r7, #24]
    3074:	2204      	movs	r2, #4
    3076:	709a      	strb	r2, [r3, #2]
    3078:	e01f      	b.n	30ba <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    307a:	69bb      	ldr	r3, [r7, #24]
    307c:	7b1b      	ldrb	r3, [r3, #12]
    307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3082:	2b00      	cmp	r3, #0
    3084:	bf14      	ite	ne
    3086:	2301      	movne	r3, #1
    3088:	2300      	moveq	r3, #0
    308a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    308e:	8afa      	ldrh	r2, [r7, #22]
    3090:	6a3b      	ldr	r3, [r7, #32]
    3092:	429a      	cmp	r2, r3
    3094:	d201      	bcs.n	309a <usb_d_ep_transfer+0x10e>
				len = req_len;
    3096:	8afb      	ldrh	r3, [r7, #22]
    3098:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    309a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    309e:	2b00      	cmp	r3, #0
    30a0:	d008      	beq.n	30b4 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    30a2:	8afa      	ldrh	r2, [r7, #22]
    30a4:	6a3b      	ldr	r3, [r7, #32]
    30a6:	429a      	cmp	r2, r3
    30a8:	bf8c      	ite	hi
    30aa:	2301      	movhi	r3, #1
    30ac:	2300      	movls	r3, #0
    30ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    30b2:	e002      	b.n	30ba <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    30b4:	2300      	movs	r3, #0
    30b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    30ba:	687b      	ldr	r3, [r7, #4]
    30bc:	7a18      	ldrb	r0, [r3, #8]
    30be:	687b      	ldr	r3, [r7, #4]
    30c0:	681a      	ldr	r2, [r3, #0]
    30c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    30c6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    30ca:	9300      	str	r3, [sp, #0]
    30cc:	6a3b      	ldr	r3, [r7, #32]
    30ce:	4c08      	ldr	r4, [pc, #32]	; (30f0 <usb_d_ep_transfer+0x164>)
    30d0:	47a0      	blx	r4
    30d2:	6138      	str	r0, [r7, #16]
	return rc;
    30d4:	693b      	ldr	r3, [r7, #16]
}
    30d6:	4618      	mov	r0, r3
    30d8:	372c      	adds	r7, #44	; 0x2c
    30da:	46bd      	mov	sp, r7
    30dc:	bd90      	pop	{r4, r7, pc}
    30de:	bf00      	nop
    30e0:	00002949 	.word	0x00002949
    30e4:	200005a4 	.word	0x200005a4
    30e8:	0000a5cd 	.word	0x0000a5cd
    30ec:	0000a5f3 	.word	0x0000a5f3
    30f0:	000029c9 	.word	0x000029c9

000030f4 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    30f4:	b580      	push	{r7, lr}
    30f6:	b086      	sub	sp, #24
    30f8:	af00      	add	r7, sp, #0
    30fa:	4603      	mov	r3, r0
    30fc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    30fe:	79fb      	ldrb	r3, [r7, #7]
    3100:	4618      	mov	r0, r3
    3102:	4b1a      	ldr	r3, [pc, #104]	; (316c <_usb_d_ep_halt_clr+0x78>)
    3104:	4798      	blx	r3
    3106:	4603      	mov	r3, r0
    3108:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    310a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    310e:	015b      	lsls	r3, r3, #5
    3110:	4a17      	ldr	r2, [pc, #92]	; (3170 <_usb_d_ep_halt_clr+0x7c>)
    3112:	4413      	add	r3, r2
    3114:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3116:	f997 3017 	ldrsb.w	r3, [r7, #23]
    311a:	2b00      	cmp	r3, #0
    311c:	da02      	bge.n	3124 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    311e:	f06f 0311 	mvn.w	r3, #17
    3122:	e01f      	b.n	3164 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3124:	79fb      	ldrb	r3, [r7, #7]
    3126:	2102      	movs	r1, #2
    3128:	4618      	mov	r0, r3
    312a:	4b12      	ldr	r3, [pc, #72]	; (3174 <_usb_d_ep_halt_clr+0x80>)
    312c:	4798      	blx	r3
    312e:	4603      	mov	r3, r0
    3130:	2b00      	cmp	r3, #0
    3132:	d016      	beq.n	3162 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3134:	79fb      	ldrb	r3, [r7, #7]
    3136:	2100      	movs	r1, #0
    3138:	4618      	mov	r0, r3
    313a:	4b0e      	ldr	r3, [pc, #56]	; (3174 <_usb_d_ep_halt_clr+0x80>)
    313c:	4798      	blx	r3
    313e:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3140:	68fb      	ldr	r3, [r7, #12]
    3142:	2b00      	cmp	r3, #0
    3144:	da01      	bge.n	314a <_usb_d_ep_halt_clr+0x56>
			return rc;
    3146:	68fb      	ldr	r3, [r7, #12]
    3148:	e00c      	b.n	3164 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    314a:	693b      	ldr	r3, [r7, #16]
    314c:	2201      	movs	r2, #1
    314e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3150:	693b      	ldr	r3, [r7, #16]
    3152:	2203      	movs	r2, #3
    3154:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3156:	693b      	ldr	r3, [r7, #16]
    3158:	69db      	ldr	r3, [r3, #28]
    315a:	79f8      	ldrb	r0, [r7, #7]
    315c:	2200      	movs	r2, #0
    315e:	2103      	movs	r1, #3
    3160:	4798      	blx	r3
	}
	return ERR_NONE;
    3162:	2300      	movs	r3, #0
}
    3164:	4618      	mov	r0, r3
    3166:	3718      	adds	r7, #24
    3168:	46bd      	mov	sp, r7
    316a:	bd80      	pop	{r7, pc}
    316c:	00002949 	.word	0x00002949
    3170:	200005a4 	.word	0x200005a4
    3174:	00009a25 	.word	0x00009a25

00003178 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3178:	b580      	push	{r7, lr}
    317a:	b082      	sub	sp, #8
    317c:	af00      	add	r7, sp, #0
    317e:	4603      	mov	r3, r0
    3180:	460a      	mov	r2, r1
    3182:	71fb      	strb	r3, [r7, #7]
    3184:	4613      	mov	r3, r2
    3186:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3188:	79bb      	ldrb	r3, [r7, #6]
    318a:	2b00      	cmp	r3, #0
    318c:	d105      	bne.n	319a <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    318e:	79fb      	ldrb	r3, [r7, #7]
    3190:	4618      	mov	r0, r3
    3192:	4b0c      	ldr	r3, [pc, #48]	; (31c4 <usb_d_ep_halt+0x4c>)
    3194:	4798      	blx	r3
    3196:	4603      	mov	r3, r0
    3198:	e00f      	b.n	31ba <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    319a:	79bb      	ldrb	r3, [r7, #6]
    319c:	2b01      	cmp	r3, #1
    319e:	d106      	bne.n	31ae <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    31a0:	79fb      	ldrb	r3, [r7, #7]
    31a2:	2101      	movs	r1, #1
    31a4:	4618      	mov	r0, r3
    31a6:	4b08      	ldr	r3, [pc, #32]	; (31c8 <usb_d_ep_halt+0x50>)
    31a8:	4798      	blx	r3
    31aa:	4603      	mov	r3, r0
    31ac:	e005      	b.n	31ba <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    31ae:	79fb      	ldrb	r3, [r7, #7]
    31b0:	2102      	movs	r1, #2
    31b2:	4618      	mov	r0, r3
    31b4:	4b04      	ldr	r3, [pc, #16]	; (31c8 <usb_d_ep_halt+0x50>)
    31b6:	4798      	blx	r3
    31b8:	4603      	mov	r3, r0
	}
}
    31ba:	4618      	mov	r0, r3
    31bc:	3708      	adds	r7, #8
    31be:	46bd      	mov	sp, r7
    31c0:	bd80      	pop	{r7, pc}
    31c2:	bf00      	nop
    31c4:	000030f5 	.word	0x000030f5
    31c8:	00009a25 	.word	0x00009a25

000031cc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    31cc:	b580      	push	{r7, lr}
    31ce:	b086      	sub	sp, #24
    31d0:	af00      	add	r7, sp, #0
    31d2:	4603      	mov	r3, r0
    31d4:	603a      	str	r2, [r7, #0]
    31d6:	71fb      	strb	r3, [r7, #7]
    31d8:	460b      	mov	r3, r1
    31da:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    31dc:	79fb      	ldrb	r3, [r7, #7]
    31de:	4618      	mov	r0, r3
    31e0:	4b16      	ldr	r3, [pc, #88]	; (323c <usb_d_ep_register_callback+0x70>)
    31e2:	4798      	blx	r3
    31e4:	4603      	mov	r3, r0
    31e6:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    31e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    31ec:	015b      	lsls	r3, r3, #5
    31ee:	4a14      	ldr	r2, [pc, #80]	; (3240 <usb_d_ep_register_callback+0x74>)
    31f0:	4413      	add	r3, r2
    31f2:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    31f4:	683b      	ldr	r3, [r7, #0]
    31f6:	2b00      	cmp	r3, #0
    31f8:	d001      	beq.n	31fe <usb_d_ep_register_callback+0x32>
    31fa:	683b      	ldr	r3, [r7, #0]
    31fc:	e000      	b.n	3200 <usb_d_ep_register_callback+0x34>
    31fe:	4b11      	ldr	r3, [pc, #68]	; (3244 <usb_d_ep_register_callback+0x78>)
    3200:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3202:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3206:	2b00      	cmp	r3, #0
    3208:	db13      	blt.n	3232 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    320a:	79bb      	ldrb	r3, [r7, #6]
    320c:	2b01      	cmp	r3, #1
    320e:	d008      	beq.n	3222 <usb_d_ep_register_callback+0x56>
    3210:	2b02      	cmp	r3, #2
    3212:	d00a      	beq.n	322a <usb_d_ep_register_callback+0x5e>
    3214:	2b00      	cmp	r3, #0
    3216:	d000      	beq.n	321a <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3218:	e00c      	b.n	3234 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    321a:	693b      	ldr	r3, [r7, #16]
    321c:	68fa      	ldr	r2, [r7, #12]
    321e:	615a      	str	r2, [r3, #20]
		break;
    3220:	e008      	b.n	3234 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3222:	693b      	ldr	r3, [r7, #16]
    3224:	68fa      	ldr	r2, [r7, #12]
    3226:	619a      	str	r2, [r3, #24]
		break;
    3228:	e004      	b.n	3234 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    322a:	693b      	ldr	r3, [r7, #16]
    322c:	68fa      	ldr	r2, [r7, #12]
    322e:	61da      	str	r2, [r3, #28]
		break;
    3230:	e000      	b.n	3234 <usb_d_ep_register_callback+0x68>
		return;
    3232:	bf00      	nop
	}
}
    3234:	3718      	adds	r7, #24
    3236:	46bd      	mov	sp, r7
    3238:	bd80      	pop	{r7, pc}
    323a:	bf00      	nop
    323c:	00002949 	.word	0x00002949
    3240:	200005a4 	.word	0x200005a4
    3244:	00002a1d 	.word	0x00002a1d

00003248 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3248:	b480      	push	{r7}
    324a:	b085      	sub	sp, #20
    324c:	af00      	add	r7, sp, #0
    324e:	4603      	mov	r3, r0
    3250:	60b9      	str	r1, [r7, #8]
    3252:	607a      	str	r2, [r7, #4]
    3254:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3256:	7bfb      	ldrb	r3, [r7, #15]
    3258:	f083 0301 	eor.w	r3, r3, #1
    325c:	b2db      	uxtb	r3, r3
    325e:	2b00      	cmp	r3, #0
    3260:	d000      	beq.n	3264 <assert+0x1c>
		__asm("BKPT #0");
    3262:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3264:	bf00      	nop
    3266:	3714      	adds	r7, #20
    3268:	46bd      	mov	sp, r7
    326a:	f85d 7b04 	ldr.w	r7, [sp], #4
    326e:	4770      	bx	lr

00003270 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3270:	b480      	push	{r7}
    3272:	b085      	sub	sp, #20
    3274:	af00      	add	r7, sp, #0
    3276:	6078      	str	r0, [r7, #4]
    3278:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    327a:	687b      	ldr	r3, [r7, #4]
    327c:	681b      	ldr	r3, [r3, #0]
    327e:	60fb      	str	r3, [r7, #12]
    3280:	e008      	b.n	3294 <is_list_element+0x24>
		if (it == element) {
    3282:	68fa      	ldr	r2, [r7, #12]
    3284:	683b      	ldr	r3, [r7, #0]
    3286:	429a      	cmp	r2, r3
    3288:	d101      	bne.n	328e <is_list_element+0x1e>
			return true;
    328a:	2301      	movs	r3, #1
    328c:	e006      	b.n	329c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    328e:	68fb      	ldr	r3, [r7, #12]
    3290:	681b      	ldr	r3, [r3, #0]
    3292:	60fb      	str	r3, [r7, #12]
    3294:	68fb      	ldr	r3, [r7, #12]
    3296:	2b00      	cmp	r3, #0
    3298:	d1f3      	bne.n	3282 <is_list_element+0x12>
		}
	}

	return false;
    329a:	2300      	movs	r3, #0
}
    329c:	4618      	mov	r0, r3
    329e:	3714      	adds	r7, #20
    32a0:	46bd      	mov	sp, r7
    32a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    32a6:	4770      	bx	lr

000032a8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	b082      	sub	sp, #8
    32ac:	af00      	add	r7, sp, #0
    32ae:	6078      	str	r0, [r7, #4]
    32b0:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    32b2:	6839      	ldr	r1, [r7, #0]
    32b4:	6878      	ldr	r0, [r7, #4]
    32b6:	4b0f      	ldr	r3, [pc, #60]	; (32f4 <list_insert_as_head+0x4c>)
    32b8:	4798      	blx	r3
    32ba:	4603      	mov	r3, r0
    32bc:	2b00      	cmp	r3, #0
    32be:	bf14      	ite	ne
    32c0:	2301      	movne	r3, #1
    32c2:	2300      	moveq	r3, #0
    32c4:	b2db      	uxtb	r3, r3
    32c6:	f083 0301 	eor.w	r3, r3, #1
    32ca:	b2db      	uxtb	r3, r3
    32cc:	f003 0301 	and.w	r3, r3, #1
    32d0:	b2db      	uxtb	r3, r3
    32d2:	2239      	movs	r2, #57	; 0x39
    32d4:	4908      	ldr	r1, [pc, #32]	; (32f8 <list_insert_as_head+0x50>)
    32d6:	4618      	mov	r0, r3
    32d8:	4b08      	ldr	r3, [pc, #32]	; (32fc <list_insert_as_head+0x54>)
    32da:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	681a      	ldr	r2, [r3, #0]
    32e0:	683b      	ldr	r3, [r7, #0]
    32e2:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	683a      	ldr	r2, [r7, #0]
    32e8:	601a      	str	r2, [r3, #0]
}
    32ea:	bf00      	nop
    32ec:	3708      	adds	r7, #8
    32ee:	46bd      	mov	sp, r7
    32f0:	bd80      	pop	{r7, pc}
    32f2:	bf00      	nop
    32f4:	00003271 	.word	0x00003271
    32f8:	0000cca8 	.word	0x0000cca8
    32fc:	00003249 	.word	0x00003249

00003300 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3300:	b480      	push	{r7}
    3302:	b083      	sub	sp, #12
    3304:	af00      	add	r7, sp, #0
    3306:	6078      	str	r0, [r7, #4]
    3308:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    330a:	687b      	ldr	r3, [r7, #4]
    330c:	681a      	ldr	r2, [r3, #0]
    330e:	683b      	ldr	r3, [r7, #0]
    3310:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3312:	687b      	ldr	r3, [r7, #4]
    3314:	683a      	ldr	r2, [r7, #0]
    3316:	601a      	str	r2, [r3, #0]
}
    3318:	bf00      	nop
    331a:	370c      	adds	r7, #12
    331c:	46bd      	mov	sp, r7
    331e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3322:	4770      	bx	lr

00003324 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3324:	b580      	push	{r7, lr}
    3326:	b084      	sub	sp, #16
    3328:	af00      	add	r7, sp, #0
    332a:	6078      	str	r0, [r7, #4]
    332c:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	681b      	ldr	r3, [r3, #0]
    3332:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3334:	6839      	ldr	r1, [r7, #0]
    3336:	6878      	ldr	r0, [r7, #4]
    3338:	4b16      	ldr	r3, [pc, #88]	; (3394 <list_insert_at_end+0x70>)
    333a:	4798      	blx	r3
    333c:	4603      	mov	r3, r0
    333e:	2b00      	cmp	r3, #0
    3340:	bf14      	ite	ne
    3342:	2301      	movne	r3, #1
    3344:	2300      	moveq	r3, #0
    3346:	b2db      	uxtb	r3, r3
    3348:	f083 0301 	eor.w	r3, r3, #1
    334c:	b2db      	uxtb	r3, r3
    334e:	f003 0301 	and.w	r3, r3, #1
    3352:	b2db      	uxtb	r3, r3
    3354:	224f      	movs	r2, #79	; 0x4f
    3356:	4910      	ldr	r1, [pc, #64]	; (3398 <list_insert_at_end+0x74>)
    3358:	4618      	mov	r0, r3
    335a:	4b10      	ldr	r3, [pc, #64]	; (339c <list_insert_at_end+0x78>)
    335c:	4798      	blx	r3

	if (!list->head) {
    335e:	687b      	ldr	r3, [r7, #4]
    3360:	681b      	ldr	r3, [r3, #0]
    3362:	2b00      	cmp	r3, #0
    3364:	d109      	bne.n	337a <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	683a      	ldr	r2, [r7, #0]
    336a:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    336c:	683b      	ldr	r3, [r7, #0]
    336e:	2200      	movs	r2, #0
    3370:	601a      	str	r2, [r3, #0]
		return;
    3372:	e00c      	b.n	338e <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3374:	68fb      	ldr	r3, [r7, #12]
    3376:	681b      	ldr	r3, [r3, #0]
    3378:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    337a:	68fb      	ldr	r3, [r7, #12]
    337c:	681b      	ldr	r3, [r3, #0]
    337e:	2b00      	cmp	r3, #0
    3380:	d1f8      	bne.n	3374 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3382:	68fb      	ldr	r3, [r7, #12]
    3384:	683a      	ldr	r2, [r7, #0]
    3386:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3388:	683b      	ldr	r3, [r7, #0]
    338a:	2200      	movs	r2, #0
    338c:	601a      	str	r2, [r3, #0]
}
    338e:	3710      	adds	r7, #16
    3390:	46bd      	mov	sp, r7
    3392:	bd80      	pop	{r7, pc}
    3394:	00003271 	.word	0x00003271
    3398:	0000cca8 	.word	0x0000cca8
    339c:	00003249 	.word	0x00003249

000033a0 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    33a0:	b480      	push	{r7}
    33a2:	b085      	sub	sp, #20
    33a4:	af00      	add	r7, sp, #0
    33a6:	6078      	str	r0, [r7, #4]
	if (list->head) {
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	681b      	ldr	r3, [r3, #0]
    33ac:	2b00      	cmp	r3, #0
    33ae:	d009      	beq.n	33c4 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    33b0:	687b      	ldr	r3, [r7, #4]
    33b2:	681b      	ldr	r3, [r3, #0]
    33b4:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    33b6:	687b      	ldr	r3, [r7, #4]
    33b8:	681b      	ldr	r3, [r3, #0]
    33ba:	681a      	ldr	r2, [r3, #0]
    33bc:	687b      	ldr	r3, [r7, #4]
    33be:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    33c0:	68fb      	ldr	r3, [r7, #12]
    33c2:	e000      	b.n	33c6 <list_remove_head+0x26>
	}

	return NULL;
    33c4:	2300      	movs	r3, #0
}
    33c6:	4618      	mov	r0, r3
    33c8:	3714      	adds	r7, #20
    33ca:	46bd      	mov	sp, r7
    33cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    33d0:	4770      	bx	lr
	...

000033d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    33d4:	b480      	push	{r7}
    33d6:	b083      	sub	sp, #12
    33d8:	af00      	add	r7, sp, #0
    33da:	4603      	mov	r3, r0
    33dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    33de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    33e2:	2b00      	cmp	r3, #0
    33e4:	db0b      	blt.n	33fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    33e6:	4909      	ldr	r1, [pc, #36]	; (340c <__NVIC_EnableIRQ+0x38>)
    33e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    33ec:	095b      	lsrs	r3, r3, #5
    33ee:	88fa      	ldrh	r2, [r7, #6]
    33f0:	f002 021f 	and.w	r2, r2, #31
    33f4:	2001      	movs	r0, #1
    33f6:	fa00 f202 	lsl.w	r2, r0, r2
    33fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    33fe:	bf00      	nop
    3400:	370c      	adds	r7, #12
    3402:	46bd      	mov	sp, r7
    3404:	f85d 7b04 	ldr.w	r7, [sp], #4
    3408:	4770      	bx	lr
    340a:	bf00      	nop
    340c:	e000e100 	.word	0xe000e100

00003410 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3410:	b480      	push	{r7}
    3412:	b083      	sub	sp, #12
    3414:	af00      	add	r7, sp, #0
    3416:	4603      	mov	r3, r0
    3418:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    341a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    341e:	2b00      	cmp	r3, #0
    3420:	db10      	blt.n	3444 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3422:	490b      	ldr	r1, [pc, #44]	; (3450 <__NVIC_DisableIRQ+0x40>)
    3424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3428:	095b      	lsrs	r3, r3, #5
    342a:	88fa      	ldrh	r2, [r7, #6]
    342c:	f002 021f 	and.w	r2, r2, #31
    3430:	2001      	movs	r0, #1
    3432:	fa00 f202 	lsl.w	r2, r0, r2
    3436:	3320      	adds	r3, #32
    3438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    343c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3440:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3444:	bf00      	nop
    3446:	370c      	adds	r7, #12
    3448:	46bd      	mov	sp, r7
    344a:	f85d 7b04 	ldr.w	r7, [sp], #4
    344e:	4770      	bx	lr
    3450:	e000e100 	.word	0xe000e100

00003454 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    3454:	b480      	push	{r7}
    3456:	b083      	sub	sp, #12
    3458:	af00      	add	r7, sp, #0
    345a:	4603      	mov	r3, r0
    345c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    345e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3462:	2b00      	cmp	r3, #0
    3464:	db0c      	blt.n	3480 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3466:	4909      	ldr	r1, [pc, #36]	; (348c <__NVIC_ClearPendingIRQ+0x38>)
    3468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    346c:	095b      	lsrs	r3, r3, #5
    346e:	88fa      	ldrh	r2, [r7, #6]
    3470:	f002 021f 	and.w	r2, r2, #31
    3474:	2001      	movs	r0, #1
    3476:	fa00 f202 	lsl.w	r2, r0, r2
    347a:	3360      	adds	r3, #96	; 0x60
    347c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3480:	bf00      	nop
    3482:	370c      	adds	r7, #12
    3484:	46bd      	mov	sp, r7
    3486:	f85d 7b04 	ldr.w	r7, [sp], #4
    348a:	4770      	bx	lr
    348c:	e000e100 	.word	0xe000e100

00003490 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3490:	b480      	push	{r7}
    3492:	b083      	sub	sp, #12
    3494:	af00      	add	r7, sp, #0
    3496:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3498:	687b      	ldr	r3, [r7, #4]
    349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    349c:	095b      	lsrs	r3, r3, #5
    349e:	f003 0301 	and.w	r3, r3, #1
    34a2:	2b00      	cmp	r3, #0
    34a4:	bf14      	ite	ne
    34a6:	2301      	movne	r3, #1
    34a8:	2300      	moveq	r3, #0
    34aa:	b2db      	uxtb	r3, r3
}
    34ac:	4618      	mov	r0, r3
    34ae:	370c      	adds	r7, #12
    34b0:	46bd      	mov	sp, r7
    34b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    34b6:	4770      	bx	lr

000034b8 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    34b8:	b480      	push	{r7}
    34ba:	b083      	sub	sp, #12
    34bc:	af00      	add	r7, sp, #0
    34be:	6078      	str	r0, [r7, #4]
    34c0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    34c2:	687b      	ldr	r3, [r7, #4]
    34c4:	683a      	ldr	r2, [r7, #0]
    34c6:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    34c8:	bf00      	nop
    34ca:	370c      	adds	r7, #12
    34cc:	46bd      	mov	sp, r7
    34ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    34d2:	4770      	bx	lr

000034d4 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    34d4:	b480      	push	{r7}
    34d6:	b083      	sub	sp, #12
    34d8:	af00      	add	r7, sp, #0
    34da:	6078      	str	r0, [r7, #4]
    34dc:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	683a      	ldr	r2, [r7, #0]
    34e2:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    34e4:	bf00      	nop
    34e6:	370c      	adds	r7, #12
    34e8:	46bd      	mov	sp, r7
    34ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    34ee:	4770      	bx	lr

000034f0 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    34f0:	b480      	push	{r7}
    34f2:	b083      	sub	sp, #12
    34f4:	af00      	add	r7, sp, #0
    34f6:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    34f8:	687b      	ldr	r3, [r7, #4]
    34fa:	699b      	ldr	r3, [r3, #24]
    34fc:	f043 0201 	orr.w	r2, r3, #1
    3500:	687b      	ldr	r3, [r7, #4]
    3502:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3504:	bf00      	nop
    3506:	370c      	adds	r7, #12
    3508:	46bd      	mov	sp, r7
    350a:	f85d 7b04 	ldr.w	r7, [sp], #4
    350e:	4770      	bx	lr

00003510 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3510:	b480      	push	{r7}
    3512:	b085      	sub	sp, #20
    3514:	af00      	add	r7, sp, #0
    3516:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3518:	687b      	ldr	r3, [r7, #4]
    351a:	699b      	ldr	r3, [r3, #24]
    351c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    351e:	68fb      	ldr	r3, [r7, #12]
    3520:	f003 0301 	and.w	r3, r3, #1
    3524:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3526:	68fb      	ldr	r3, [r7, #12]
    3528:	2b00      	cmp	r3, #0
    352a:	bf14      	ite	ne
    352c:	2301      	movne	r3, #1
    352e:	2300      	moveq	r3, #0
    3530:	b2db      	uxtb	r3, r3
}
    3532:	4618      	mov	r0, r3
    3534:	3714      	adds	r7, #20
    3536:	46bd      	mov	sp, r7
    3538:	f85d 7b04 	ldr.w	r7, [sp], #4
    353c:	4770      	bx	lr

0000353e <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    353e:	b480      	push	{r7}
    3540:	b083      	sub	sp, #12
    3542:	af00      	add	r7, sp, #0
    3544:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    3546:	687b      	ldr	r3, [r7, #4]
    3548:	699b      	ldr	r3, [r3, #24]
    354a:	f023 0201 	bic.w	r2, r3, #1
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3552:	bf00      	nop
    3554:	370c      	adds	r7, #12
    3556:	46bd      	mov	sp, r7
    3558:	f85d 7b04 	ldr.w	r7, [sp], #4
    355c:	4770      	bx	lr

0000355e <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    355e:	b480      	push	{r7}
    3560:	b083      	sub	sp, #12
    3562:	af00      	add	r7, sp, #0
    3564:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    3566:	687b      	ldr	r3, [r7, #4]
    3568:	699b      	ldr	r3, [r3, #24]
    356a:	f043 0202 	orr.w	r2, r3, #2
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3572:	bf00      	nop
    3574:	370c      	adds	r7, #12
    3576:	46bd      	mov	sp, r7
    3578:	f85d 7b04 	ldr.w	r7, [sp], #4
    357c:	4770      	bx	lr

0000357e <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    357e:	b480      	push	{r7}
    3580:	b083      	sub	sp, #12
    3582:	af00      	add	r7, sp, #0
    3584:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	699b      	ldr	r3, [r3, #24]
    358a:	f023 0202 	bic.w	r2, r3, #2
    358e:	687b      	ldr	r3, [r7, #4]
    3590:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3592:	bf00      	nop
    3594:	370c      	adds	r7, #12
    3596:	46bd      	mov	sp, r7
    3598:	f85d 7b04 	ldr.w	r7, [sp], #4
    359c:	4770      	bx	lr

0000359e <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    359e:	b480      	push	{r7}
    35a0:	b083      	sub	sp, #12
    35a2:	af00      	add	r7, sp, #0
    35a4:	6078      	str	r0, [r7, #4]
    35a6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    35a8:	687b      	ldr	r3, [r7, #4]
    35aa:	699a      	ldr	r2, [r3, #24]
    35ac:	683b      	ldr	r3, [r7, #0]
    35ae:	431a      	orrs	r2, r3
    35b0:	687b      	ldr	r3, [r7, #4]
    35b2:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    35b4:	bf00      	nop
    35b6:	370c      	adds	r7, #12
    35b8:	46bd      	mov	sp, r7
    35ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    35be:	4770      	bx	lr

000035c0 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    35c0:	b480      	push	{r7}
    35c2:	b083      	sub	sp, #12
    35c4:	af00      	add	r7, sp, #0
    35c6:	6078      	str	r0, [r7, #4]
    35c8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    35ca:	687b      	ldr	r3, [r7, #4]
    35cc:	683a      	ldr	r2, [r7, #0]
    35ce:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    35d0:	bf00      	nop
    35d2:	370c      	adds	r7, #12
    35d4:	46bd      	mov	sp, r7
    35d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    35da:	4770      	bx	lr

000035dc <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    35dc:	b480      	push	{r7}
    35de:	b083      	sub	sp, #12
    35e0:	af00      	add	r7, sp, #0
    35e2:	6078      	str	r0, [r7, #4]
    35e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    35e6:	687b      	ldr	r3, [r7, #4]
    35e8:	683a      	ldr	r2, [r7, #0]
    35ea:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    35ec:	bf00      	nop
    35ee:	370c      	adds	r7, #12
    35f0:	46bd      	mov	sp, r7
    35f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    35f6:	4770      	bx	lr

000035f8 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    35f8:	b480      	push	{r7}
    35fa:	b083      	sub	sp, #12
    35fc:	af00      	add	r7, sp, #0
    35fe:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3600:	687b      	ldr	r3, [r7, #4]
    3602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    3604:	4618      	mov	r0, r3
    3606:	370c      	adds	r7, #12
    3608:	46bd      	mov	sp, r7
    360a:	f85d 7b04 	ldr.w	r7, [sp], #4
    360e:	4770      	bx	lr

00003610 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3610:	b480      	push	{r7}
    3612:	b083      	sub	sp, #12
    3614:	af00      	add	r7, sp, #0
    3616:	6078      	str	r0, [r7, #4]
    3618:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	683a      	ldr	r2, [r7, #0]
    361e:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3620:	bf00      	nop
    3622:	370c      	adds	r7, #12
    3624:	46bd      	mov	sp, r7
    3626:	f85d 7b04 	ldr.w	r7, [sp], #4
    362a:	4770      	bx	lr

0000362c <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    362c:	b480      	push	{r7}
    362e:	b083      	sub	sp, #12
    3630:	af00      	add	r7, sp, #0
    3632:	6078      	str	r0, [r7, #4]
    3634:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    3636:	687b      	ldr	r3, [r7, #4]
    3638:	683a      	ldr	r2, [r7, #0]
    363a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    363e:	bf00      	nop
    3640:	370c      	adds	r7, #12
    3642:	46bd      	mov	sp, r7
    3644:	f85d 7b04 	ldr.w	r7, [sp], #4
    3648:	4770      	bx	lr

0000364a <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    364a:	b480      	push	{r7}
    364c:	b083      	sub	sp, #12
    364e:	af00      	add	r7, sp, #0
    3650:	6078      	str	r0, [r7, #4]
    3652:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    3654:	687b      	ldr	r3, [r7, #4]
    3656:	683a      	ldr	r2, [r7, #0]
    3658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    365c:	bf00      	nop
    365e:	370c      	adds	r7, #12
    3660:	46bd      	mov	sp, r7
    3662:	f85d 7b04 	ldr.w	r7, [sp], #4
    3666:	4770      	bx	lr

00003668 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    3668:	b480      	push	{r7}
    366a:	b083      	sub	sp, #12
    366c:	af00      	add	r7, sp, #0
    366e:	6078      	str	r0, [r7, #4]
    3670:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3672:	687b      	ldr	r3, [r7, #4]
    3674:	683a      	ldr	r2, [r7, #0]
    3676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    367a:	bf00      	nop
    367c:	370c      	adds	r7, #12
    367e:	46bd      	mov	sp, r7
    3680:	f85d 7b04 	ldr.w	r7, [sp], #4
    3684:	4770      	bx	lr

00003686 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    3686:	b480      	push	{r7}
    3688:	b083      	sub	sp, #12
    368a:	af00      	add	r7, sp, #0
    368c:	6078      	str	r0, [r7, #4]
    368e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    3690:	687b      	ldr	r3, [r7, #4]
    3692:	683a      	ldr	r2, [r7, #0]
    3694:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    3698:	bf00      	nop
    369a:	370c      	adds	r7, #12
    369c:	46bd      	mov	sp, r7
    369e:	f85d 7b04 	ldr.w	r7, [sp], #4
    36a2:	4770      	bx	lr

000036a4 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    36a4:	b480      	push	{r7}
    36a6:	b083      	sub	sp, #12
    36a8:	af00      	add	r7, sp, #0
    36aa:	6078      	str	r0, [r7, #4]
    36ac:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    36ae:	687b      	ldr	r3, [r7, #4]
    36b0:	683a      	ldr	r2, [r7, #0]
    36b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    36b6:	bf00      	nop
    36b8:	370c      	adds	r7, #12
    36ba:	46bd      	mov	sp, r7
    36bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    36c0:	4770      	bx	lr

000036c2 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    36c2:	b480      	push	{r7}
    36c4:	b083      	sub	sp, #12
    36c6:	af00      	add	r7, sp, #0
    36c8:	6078      	str	r0, [r7, #4]
    36ca:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    36cc:	687b      	ldr	r3, [r7, #4]
    36ce:	683a      	ldr	r2, [r7, #0]
    36d0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    36d4:	bf00      	nop
    36d6:	370c      	adds	r7, #12
    36d8:	46bd      	mov	sp, r7
    36da:	f85d 7b04 	ldr.w	r7, [sp], #4
    36de:	4770      	bx	lr

000036e0 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    36e0:	b480      	push	{r7}
    36e2:	b083      	sub	sp, #12
    36e4:	af00      	add	r7, sp, #0
    36e6:	6078      	str	r0, [r7, #4]
    36e8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    36ea:	687b      	ldr	r3, [r7, #4]
    36ec:	683a      	ldr	r2, [r7, #0]
    36ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    36f2:	bf00      	nop
    36f4:	370c      	adds	r7, #12
    36f6:	46bd      	mov	sp, r7
    36f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    36fc:	4770      	bx	lr

000036fe <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    36fe:	b480      	push	{r7}
    3700:	b083      	sub	sp, #12
    3702:	af00      	add	r7, sp, #0
    3704:	6078      	str	r0, [r7, #4]
    3706:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3708:	687b      	ldr	r3, [r7, #4]
    370a:	683a      	ldr	r2, [r7, #0]
    370c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3710:	bf00      	nop
    3712:	370c      	adds	r7, #12
    3714:	46bd      	mov	sp, r7
    3716:	f85d 7b04 	ldr.w	r7, [sp], #4
    371a:	4770      	bx	lr

0000371c <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    371c:	b480      	push	{r7}
    371e:	b083      	sub	sp, #12
    3720:	af00      	add	r7, sp, #0
    3722:	6078      	str	r0, [r7, #4]
    3724:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    3726:	687b      	ldr	r3, [r7, #4]
    3728:	683a      	ldr	r2, [r7, #0]
    372a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    372e:	bf00      	nop
    3730:	370c      	adds	r7, #12
    3732:	46bd      	mov	sp, r7
    3734:	f85d 7b04 	ldr.w	r7, [sp], #4
    3738:	4770      	bx	lr
	...

0000373c <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    373c:	b580      	push	{r7, lr}
    373e:	b082      	sub	sp, #8
    3740:	af00      	add	r7, sp, #0
    3742:	6078      	str	r0, [r7, #4]
    3744:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    3746:	687b      	ldr	r3, [r7, #4]
    3748:	683a      	ldr	r2, [r7, #0]
    374a:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	681b      	ldr	r3, [r3, #0]
    3750:	4618      	mov	r0, r3
    3752:	4b53      	ldr	r3, [pc, #332]	; (38a0 <_can_async_init+0x164>)
    3754:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    3756:	bf00      	nop
    3758:	687b      	ldr	r3, [r7, #4]
    375a:	681b      	ldr	r3, [r3, #0]
    375c:	4618      	mov	r0, r3
    375e:	4b51      	ldr	r3, [pc, #324]	; (38a4 <_can_async_init+0x168>)
    3760:	4798      	blx	r3
    3762:	4603      	mov	r3, r0
    3764:	f083 0301 	eor.w	r3, r3, #1
    3768:	b2db      	uxtb	r3, r3
    376a:	2b00      	cmp	r3, #0
    376c:	d1f4      	bne.n	3758 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    376e:	687b      	ldr	r3, [r7, #4]
    3770:	681b      	ldr	r3, [r3, #0]
    3772:	4618      	mov	r0, r3
    3774:	4b4c      	ldr	r3, [pc, #304]	; (38a8 <_can_async_init+0x16c>)
    3776:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3778:	683b      	ldr	r3, [r7, #0]
    377a:	4a4c      	ldr	r2, [pc, #304]	; (38ac <_can_async_init+0x170>)
    377c:	4293      	cmp	r3, r2
    377e:	d177      	bne.n	3870 <_can_async_init+0x134>
		_can1_dev    = dev;
    3780:	4a4b      	ldr	r2, [pc, #300]	; (38b0 <_can_async_init+0x174>)
    3782:	687b      	ldr	r3, [r7, #4]
    3784:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3786:	687b      	ldr	r3, [r7, #4]
    3788:	4a4a      	ldr	r2, [pc, #296]	; (38b4 <_can_async_init+0x178>)
    378a:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    378c:	687b      	ldr	r3, [r7, #4]
    378e:	681b      	ldr	r3, [r3, #0]
    3790:	2100      	movs	r1, #0
    3792:	4618      	mov	r0, r3
    3794:	4b48      	ldr	r3, [pc, #288]	; (38b8 <_can_async_init+0x17c>)
    3796:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3798:	687b      	ldr	r3, [r7, #4]
    379a:	681b      	ldr	r3, [r3, #0]
    379c:	2100      	movs	r1, #0
    379e:	4618      	mov	r0, r3
    37a0:	4b46      	ldr	r3, [pc, #280]	; (38bc <_can_async_init+0x180>)
    37a2:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    37a4:	687b      	ldr	r3, [r7, #4]
    37a6:	681b      	ldr	r3, [r3, #0]
    37a8:	4945      	ldr	r1, [pc, #276]	; (38c0 <_can_async_init+0x184>)
    37aa:	4618      	mov	r0, r3
    37ac:	4b45      	ldr	r3, [pc, #276]	; (38c4 <_can_async_init+0x188>)
    37ae:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    37b0:	687b      	ldr	r3, [r7, #4]
    37b2:	681b      	ldr	r3, [r3, #0]
    37b4:	f640 2133 	movw	r1, #2611	; 0xa33
    37b8:	4618      	mov	r0, r3
    37ba:	4b43      	ldr	r3, [pc, #268]	; (38c8 <_can_async_init+0x18c>)
    37bc:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    37be:	687b      	ldr	r3, [r7, #4]
    37c0:	681a      	ldr	r2, [r3, #0]
    37c2:	4b42      	ldr	r3, [pc, #264]	; (38cc <_can_async_init+0x190>)
    37c4:	b29b      	uxth	r3, r3
    37c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    37ca:	4619      	mov	r1, r3
    37cc:	4610      	mov	r0, r2
    37ce:	4b40      	ldr	r3, [pc, #256]	; (38d0 <_can_async_init+0x194>)
    37d0:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    37d2:	687b      	ldr	r3, [r7, #4]
    37d4:	681b      	ldr	r3, [r3, #0]
    37d6:	2100      	movs	r1, #0
    37d8:	4618      	mov	r0, r3
    37da:	4b3e      	ldr	r3, [pc, #248]	; (38d4 <_can_async_init+0x198>)
    37dc:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    37de:	687b      	ldr	r3, [r7, #4]
    37e0:	681b      	ldr	r3, [r3, #0]
    37e2:	2100      	movs	r1, #0
    37e4:	4618      	mov	r0, r3
    37e6:	4b3c      	ldr	r3, [pc, #240]	; (38d8 <_can_async_init+0x19c>)
    37e8:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    37ea:	687b      	ldr	r3, [r7, #4]
    37ec:	681a      	ldr	r2, [r3, #0]
    37ee:	4b3b      	ldr	r3, [pc, #236]	; (38dc <_can_async_init+0x1a0>)
    37f0:	b29b      	uxth	r3, r3
    37f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    37f6:	4619      	mov	r1, r3
    37f8:	4610      	mov	r0, r2
    37fa:	4b39      	ldr	r3, [pc, #228]	; (38e0 <_can_async_init+0x1a4>)
    37fc:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    37fe:	687b      	ldr	r3, [r7, #4]
    3800:	681a      	ldr	r2, [r3, #0]
    3802:	4b38      	ldr	r3, [pc, #224]	; (38e4 <_can_async_init+0x1a8>)
    3804:	b29b      	uxth	r3, r3
    3806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    380a:	4619      	mov	r1, r3
    380c:	4610      	mov	r0, r2
    380e:	4b36      	ldr	r3, [pc, #216]	; (38e8 <_can_async_init+0x1ac>)
    3810:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	681b      	ldr	r3, [r3, #0]
    3816:	2128      	movs	r1, #40	; 0x28
    3818:	4618      	mov	r0, r3
    381a:	4b34      	ldr	r3, [pc, #208]	; (38ec <_can_async_init+0x1b0>)
    381c:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    381e:	687b      	ldr	r3, [r7, #4]
    3820:	681a      	ldr	r2, [r3, #0]
    3822:	4b33      	ldr	r3, [pc, #204]	; (38f0 <_can_async_init+0x1b4>)
    3824:	b29b      	uxth	r3, r3
    3826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    382a:	4619      	mov	r1, r3
    382c:	4610      	mov	r0, r2
    382e:	4b31      	ldr	r3, [pc, #196]	; (38f4 <_can_async_init+0x1b8>)
    3830:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3832:	687b      	ldr	r3, [r7, #4]
    3834:	681a      	ldr	r2, [r3, #0]
    3836:	4b30      	ldr	r3, [pc, #192]	; (38f8 <_can_async_init+0x1bc>)
    3838:	b29b      	uxth	r3, r3
    383a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    383e:	4619      	mov	r1, r3
    3840:	4610      	mov	r0, r2
    3842:	4b2e      	ldr	r3, [pc, #184]	; (38fc <_can_async_init+0x1c0>)
    3844:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3846:	687b      	ldr	r3, [r7, #4]
    3848:	681b      	ldr	r3, [r3, #0]
    384a:	2100      	movs	r1, #0
    384c:	4618      	mov	r0, r3
    384e:	4b2c      	ldr	r3, [pc, #176]	; (3900 <_can_async_init+0x1c4>)
    3850:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3852:	204f      	movs	r0, #79	; 0x4f
    3854:	4b2b      	ldr	r3, [pc, #172]	; (3904 <_can_async_init+0x1c8>)
    3856:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3858:	204f      	movs	r0, #79	; 0x4f
    385a:	4b2b      	ldr	r3, [pc, #172]	; (3908 <_can_async_init+0x1cc>)
    385c:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    385e:	204f      	movs	r0, #79	; 0x4f
    3860:	4b2a      	ldr	r3, [pc, #168]	; (390c <_can_async_init+0x1d0>)
    3862:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3864:	687b      	ldr	r3, [r7, #4]
    3866:	681b      	ldr	r3, [r3, #0]
    3868:	2101      	movs	r1, #1
    386a:	4618      	mov	r0, r3
    386c:	4b28      	ldr	r3, [pc, #160]	; (3910 <_can_async_init+0x1d4>)
    386e:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3870:	687b      	ldr	r3, [r7, #4]
    3872:	681b      	ldr	r3, [r3, #0]
    3874:	4618      	mov	r0, r3
    3876:	4b27      	ldr	r3, [pc, #156]	; (3914 <_can_async_init+0x1d8>)
    3878:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    387a:	687b      	ldr	r3, [r7, #4]
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	4618      	mov	r0, r3
    3880:	4b25      	ldr	r3, [pc, #148]	; (3918 <_can_async_init+0x1dc>)
    3882:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3884:	bf00      	nop
    3886:	687b      	ldr	r3, [r7, #4]
    3888:	681b      	ldr	r3, [r3, #0]
    388a:	4618      	mov	r0, r3
    388c:	4b05      	ldr	r3, [pc, #20]	; (38a4 <_can_async_init+0x168>)
    388e:	4798      	blx	r3
    3890:	4603      	mov	r3, r0
    3892:	2b00      	cmp	r3, #0
    3894:	d1f7      	bne.n	3886 <_can_async_init+0x14a>
	};

	return ERR_NONE;
    3896:	2300      	movs	r3, #0
}
    3898:	4618      	mov	r0, r3
    389a:	3708      	adds	r7, #8
    389c:	46bd      	mov	sp, r7
    389e:	bd80      	pop	{r7, pc}
    38a0:	000034f1 	.word	0x000034f1
    38a4:	00003511 	.word	0x00003511
    38a8:	0000355f 	.word	0x0000355f
    38ac:	42000400 	.word	0x42000400
    38b0:	2000064c 	.word	0x2000064c
    38b4:	20000004 	.word	0x20000004
    38b8:	0000359f 	.word	0x0000359f
    38bc:	000034b9 	.word	0x000034b9
    38c0:	06020a07 	.word	0x06020a07
    38c4:	000035c1 	.word	0x000035c1
    38c8:	000034d5 	.word	0x000034d5
    38cc:	20000d04 	.word	0x20000d04
    38d0:	000036a5 	.word	0x000036a5
    38d4:	000036c3 	.word	0x000036c3
    38d8:	000036ff 	.word	0x000036ff
    38dc:	20000ce4 	.word	0x20000ce4
    38e0:	000036e1 	.word	0x000036e1
    38e4:	20000624 	.word	0x20000624
    38e8:	0000371d 	.word	0x0000371d
    38ec:	0000362d 	.word	0x0000362d
    38f0:	20000634 	.word	0x20000634
    38f4:	0000364b 	.word	0x0000364b
    38f8:	2000063c 	.word	0x2000063c
    38fc:	00003669 	.word	0x00003669
    3900:	00003687 	.word	0x00003687
    3904:	00003411 	.word	0x00003411
    3908:	00003455 	.word	0x00003455
    390c:	000033d5 	.word	0x000033d5
    3910:	00003611 	.word	0x00003611
    3914:	0000357f 	.word	0x0000357f
    3918:	0000353f 	.word	0x0000353f

0000391c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    391c:	b590      	push	{r4, r7, lr}
    391e:	b083      	sub	sp, #12
    3920:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3922:	4b2c      	ldr	r3, [pc, #176]	; (39d4 <CAN1_Handler+0xb8>)
    3924:	681b      	ldr	r3, [r3, #0]
    3926:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3928:	687b      	ldr	r3, [r7, #4]
    392a:	681b      	ldr	r3, [r3, #0]
    392c:	4618      	mov	r0, r3
    392e:	4b2a      	ldr	r3, [pc, #168]	; (39d8 <CAN1_Handler+0xbc>)
    3930:	4798      	blx	r3
    3932:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3934:	683b      	ldr	r3, [r7, #0]
    3936:	f003 0301 	and.w	r3, r3, #1
    393a:	2b00      	cmp	r3, #0
    393c:	d003      	beq.n	3946 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    393e:	687b      	ldr	r3, [r7, #4]
    3940:	689b      	ldr	r3, [r3, #8]
    3942:	6878      	ldr	r0, [r7, #4]
    3944:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3946:	683b      	ldr	r3, [r7, #0]
    3948:	f403 7300 	and.w	r3, r3, #512	; 0x200
    394c:	2b00      	cmp	r3, #0
    394e:	d003      	beq.n	3958 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3950:	687b      	ldr	r3, [r7, #4]
    3952:	685b      	ldr	r3, [r3, #4]
    3954:	6878      	ldr	r0, [r7, #4]
    3956:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3958:	683b      	ldr	r3, [r7, #0]
    395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    395e:	2b00      	cmp	r3, #0
    3960:	d004      	beq.n	396c <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3962:	687b      	ldr	r3, [r7, #4]
    3964:	68db      	ldr	r3, [r3, #12]
    3966:	2103      	movs	r1, #3
    3968:	6878      	ldr	r0, [r7, #4]
    396a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    396c:	683b      	ldr	r3, [r7, #0]
    396e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3972:	2b00      	cmp	r3, #0
    3974:	d004      	beq.n	3980 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	68db      	ldr	r3, [r3, #12]
    397a:	2100      	movs	r1, #0
    397c:	6878      	ldr	r0, [r7, #4]
    397e:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3980:	683b      	ldr	r3, [r7, #0]
    3982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3986:	2b00      	cmp	r3, #0
    3988:	d00f      	beq.n	39aa <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    398a:	687b      	ldr	r3, [r7, #4]
    398c:	68dc      	ldr	r4, [r3, #12]
    398e:	687b      	ldr	r3, [r7, #4]
    3990:	681b      	ldr	r3, [r3, #0]
    3992:	4618      	mov	r0, r3
    3994:	4b11      	ldr	r3, [pc, #68]	; (39dc <CAN1_Handler+0xc0>)
    3996:	4798      	blx	r3
    3998:	4603      	mov	r3, r0
    399a:	2b00      	cmp	r3, #0
    399c:	d001      	beq.n	39a2 <CAN1_Handler+0x86>
    399e:	2302      	movs	r3, #2
    39a0:	e000      	b.n	39a4 <CAN1_Handler+0x88>
    39a2:	2301      	movs	r3, #1
    39a4:	4619      	mov	r1, r3
    39a6:	6878      	ldr	r0, [r7, #4]
    39a8:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    39aa:	683b      	ldr	r3, [r7, #0]
    39ac:	f003 0308 	and.w	r3, r3, #8
    39b0:	2b00      	cmp	r3, #0
    39b2:	d004      	beq.n	39be <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    39b4:	687b      	ldr	r3, [r7, #4]
    39b6:	68db      	ldr	r3, [r3, #12]
    39b8:	2104      	movs	r1, #4
    39ba:	6878      	ldr	r0, [r7, #4]
    39bc:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	681b      	ldr	r3, [r3, #0]
    39c2:	6839      	ldr	r1, [r7, #0]
    39c4:	4618      	mov	r0, r3
    39c6:	4b06      	ldr	r3, [pc, #24]	; (39e0 <CAN1_Handler+0xc4>)
    39c8:	4798      	blx	r3
}
    39ca:	bf00      	nop
    39cc:	370c      	adds	r7, #12
    39ce:	46bd      	mov	sp, r7
    39d0:	bd90      	pop	{r4, r7, pc}
    39d2:	bf00      	nop
    39d4:	2000064c 	.word	0x2000064c
    39d8:	000035f9 	.word	0x000035f9
    39dc:	00003491 	.word	0x00003491
    39e0:	000035dd 	.word	0x000035dd

000039e4 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    39e4:	b480      	push	{r7}
    39e6:	b083      	sub	sp, #12
    39e8:	af00      	add	r7, sp, #0
    39ea:	6078      	str	r0, [r7, #4]
    39ec:	460b      	mov	r3, r1
    39ee:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    39f0:	687b      	ldr	r3, [r7, #4]
    39f2:	881b      	ldrh	r3, [r3, #0]
    39f4:	b29a      	uxth	r2, r3
    39f6:	887b      	ldrh	r3, [r7, #2]
    39f8:	021b      	lsls	r3, r3, #8
    39fa:	b29b      	uxth	r3, r3
    39fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    3a00:	b29b      	uxth	r3, r3
    3a02:	4313      	orrs	r3, r2
    3a04:	b29a      	uxth	r2, r3
    3a06:	687b      	ldr	r3, [r7, #4]
    3a08:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    3a0a:	bf00      	nop
    3a0c:	370c      	adds	r7, #12
    3a0e:	46bd      	mov	sp, r7
    3a10:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a14:	4770      	bx	lr

00003a16 <hri_port_set_EVCTRL_reg>:
{
    3a16:	b480      	push	{r7}
    3a18:	b085      	sub	sp, #20
    3a1a:	af00      	add	r7, sp, #0
    3a1c:	60f8      	str	r0, [r7, #12]
    3a1e:	460b      	mov	r3, r1
    3a20:	607a      	str	r2, [r7, #4]
    3a22:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    3a24:	7afb      	ldrb	r3, [r7, #11]
    3a26:	7afa      	ldrb	r2, [r7, #11]
    3a28:	68f9      	ldr	r1, [r7, #12]
    3a2a:	01d2      	lsls	r2, r2, #7
    3a2c:	440a      	add	r2, r1
    3a2e:	322c      	adds	r2, #44	; 0x2c
    3a30:	6811      	ldr	r1, [r2, #0]
    3a32:	687a      	ldr	r2, [r7, #4]
    3a34:	430a      	orrs	r2, r1
    3a36:	68f9      	ldr	r1, [r7, #12]
    3a38:	01db      	lsls	r3, r3, #7
    3a3a:	440b      	add	r3, r1
    3a3c:	332c      	adds	r3, #44	; 0x2c
    3a3e:	601a      	str	r2, [r3, #0]
}
    3a40:	bf00      	nop
    3a42:	3714      	adds	r7, #20
    3a44:	46bd      	mov	sp, r7
    3a46:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a4a:	4770      	bx	lr

00003a4c <_port_event_init>:

static inline void _port_event_init()
{
    3a4c:	b580      	push	{r7, lr}
    3a4e:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    3a50:	2200      	movs	r2, #0
    3a52:	2100      	movs	r1, #0
    3a54:	4809      	ldr	r0, [pc, #36]	; (3a7c <_port_event_init+0x30>)
    3a56:	4b0a      	ldr	r3, [pc, #40]	; (3a80 <_port_event_init+0x34>)
    3a58:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    3a5a:	2200      	movs	r2, #0
    3a5c:	2101      	movs	r1, #1
    3a5e:	4807      	ldr	r0, [pc, #28]	; (3a7c <_port_event_init+0x30>)
    3a60:	4b07      	ldr	r3, [pc, #28]	; (3a80 <_port_event_init+0x34>)
    3a62:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    3a64:	22ef      	movs	r2, #239	; 0xef
    3a66:	2102      	movs	r1, #2
    3a68:	4804      	ldr	r0, [pc, #16]	; (3a7c <_port_event_init+0x30>)
    3a6a:	4b05      	ldr	r3, [pc, #20]	; (3a80 <_port_event_init+0x34>)
    3a6c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    3a6e:	2200      	movs	r2, #0
    3a70:	2103      	movs	r1, #3
    3a72:	4802      	ldr	r0, [pc, #8]	; (3a7c <_port_event_init+0x30>)
    3a74:	4b02      	ldr	r3, [pc, #8]	; (3a80 <_port_event_init+0x34>)
    3a76:	4798      	blx	r3
}
    3a78:	bf00      	nop
    3a7a:	bd80      	pop	{r7, pc}
    3a7c:	41008000 	.word	0x41008000
    3a80:	00003a17 	.word	0x00003a17

00003a84 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3a84:	b580      	push	{r7, lr}
    3a86:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    3a88:	2104      	movs	r1, #4
    3a8a:	480b      	ldr	r0, [pc, #44]	; (3ab8 <_init_chip+0x34>)
    3a8c:	4b0b      	ldr	r3, [pc, #44]	; (3abc <_init_chip+0x38>)
    3a8e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    3a90:	4b0b      	ldr	r3, [pc, #44]	; (3ac0 <_init_chip+0x3c>)
    3a92:	4798      	blx	r3
	_oscctrl_init_sources();
    3a94:	4b0b      	ldr	r3, [pc, #44]	; (3ac4 <_init_chip+0x40>)
    3a96:	4798      	blx	r3
	_mclk_init();
    3a98:	4b0b      	ldr	r3, [pc, #44]	; (3ac8 <_init_chip+0x44>)
    3a9a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    3a9c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    3aa0:	4b0a      	ldr	r3, [pc, #40]	; (3acc <_init_chip+0x48>)
    3aa2:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    3aa4:	4b0a      	ldr	r3, [pc, #40]	; (3ad0 <_init_chip+0x4c>)
    3aa6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3aa8:	f640 30df 	movw	r0, #3039	; 0xbdf
    3aac:	4b07      	ldr	r3, [pc, #28]	; (3acc <_init_chip+0x48>)
    3aae:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    3ab0:	4b08      	ldr	r3, [pc, #32]	; (3ad4 <_init_chip+0x50>)
    3ab2:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    3ab4:	bf00      	nop
    3ab6:	bd80      	pop	{r7, pc}
    3ab8:	41004000 	.word	0x41004000
    3abc:	000039e5 	.word	0x000039e5
    3ac0:	000043c5 	.word	0x000043c5
    3ac4:	0000488d 	.word	0x0000488d
    3ac8:	000042e5 	.word	0x000042e5
    3acc:	000041ed 	.word	0x000041ed
    3ad0:	000048cd 	.word	0x000048cd
    3ad4:	00003a4d 	.word	0x00003a4d

00003ad8 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    3ad8:	b480      	push	{r7}
    3ada:	b083      	sub	sp, #12
    3adc:	af00      	add	r7, sp, #0
    3ade:	6078      	str	r0, [r7, #4]
    3ae0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	683a      	ldr	r2, [r7, #0]
    3ae6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    3ae8:	2300      	movs	r3, #0
}
    3aea:	4618      	mov	r0, r3
    3aec:	370c      	adds	r7, #12
    3aee:	46bd      	mov	sp, r7
    3af0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3af4:	4770      	bx	lr
	...

00003af8 <__NVIC_EnableIRQ>:
{
    3af8:	b480      	push	{r7}
    3afa:	b083      	sub	sp, #12
    3afc:	af00      	add	r7, sp, #0
    3afe:	4603      	mov	r3, r0
    3b00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b06:	2b00      	cmp	r3, #0
    3b08:	db0b      	blt.n	3b22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b0a:	4909      	ldr	r1, [pc, #36]	; (3b30 <__NVIC_EnableIRQ+0x38>)
    3b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b10:	095b      	lsrs	r3, r3, #5
    3b12:	88fa      	ldrh	r2, [r7, #6]
    3b14:	f002 021f 	and.w	r2, r2, #31
    3b18:	2001      	movs	r0, #1
    3b1a:	fa00 f202 	lsl.w	r2, r0, r2
    3b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3b22:	bf00      	nop
    3b24:	370c      	adds	r7, #12
    3b26:	46bd      	mov	sp, r7
    3b28:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b2c:	4770      	bx	lr
    3b2e:	bf00      	nop
    3b30:	e000e100 	.word	0xe000e100

00003b34 <__NVIC_DisableIRQ>:
{
    3b34:	b480      	push	{r7}
    3b36:	b083      	sub	sp, #12
    3b38:	af00      	add	r7, sp, #0
    3b3a:	4603      	mov	r3, r0
    3b3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b42:	2b00      	cmp	r3, #0
    3b44:	db10      	blt.n	3b68 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b46:	490b      	ldr	r1, [pc, #44]	; (3b74 <__NVIC_DisableIRQ+0x40>)
    3b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b4c:	095b      	lsrs	r3, r3, #5
    3b4e:	88fa      	ldrh	r2, [r7, #6]
    3b50:	f002 021f 	and.w	r2, r2, #31
    3b54:	2001      	movs	r0, #1
    3b56:	fa00 f202 	lsl.w	r2, r0, r2
    3b5a:	3320      	adds	r3, #32
    3b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3b60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b64:	f3bf 8f6f 	isb	sy
}
    3b68:	bf00      	nop
    3b6a:	370c      	adds	r7, #12
    3b6c:	46bd      	mov	sp, r7
    3b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b72:	4770      	bx	lr
    3b74:	e000e100 	.word	0xe000e100

00003b78 <__NVIC_ClearPendingIRQ>:
{
    3b78:	b480      	push	{r7}
    3b7a:	b083      	sub	sp, #12
    3b7c:	af00      	add	r7, sp, #0
    3b7e:	4603      	mov	r3, r0
    3b80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b86:	2b00      	cmp	r3, #0
    3b88:	db0c      	blt.n	3ba4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b8a:	4909      	ldr	r1, [pc, #36]	; (3bb0 <__NVIC_ClearPendingIRQ+0x38>)
    3b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3b90:	095b      	lsrs	r3, r3, #5
    3b92:	88fa      	ldrh	r2, [r7, #6]
    3b94:	f002 021f 	and.w	r2, r2, #31
    3b98:	2001      	movs	r0, #1
    3b9a:	fa00 f202 	lsl.w	r2, r0, r2
    3b9e:	3360      	adds	r3, #96	; 0x60
    3ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3ba4:	bf00      	nop
    3ba6:	370c      	adds	r7, #12
    3ba8:	46bd      	mov	sp, r7
    3baa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bae:	4770      	bx	lr
    3bb0:	e000e100 	.word	0xe000e100

00003bb4 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    3bb4:	b480      	push	{r7}
    3bb6:	b083      	sub	sp, #12
    3bb8:	af00      	add	r7, sp, #0
    3bba:	6078      	str	r0, [r7, #4]
    3bbc:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    3bbe:	bf00      	nop
    3bc0:	687b      	ldr	r3, [r7, #4]
    3bc2:	685a      	ldr	r2, [r3, #4]
    3bc4:	683b      	ldr	r3, [r7, #0]
    3bc6:	4013      	ands	r3, r2
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d1f9      	bne.n	3bc0 <hri_eic_wait_for_sync+0xc>
	};
}
    3bcc:	bf00      	nop
    3bce:	370c      	adds	r7, #12
    3bd0:	46bd      	mov	sp, r7
    3bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bd6:	4770      	bx	lr

00003bd8 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    3bd8:	b480      	push	{r7}
    3bda:	b083      	sub	sp, #12
    3bdc:	af00      	add	r7, sp, #0
    3bde:	6078      	str	r0, [r7, #4]
    3be0:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    3be2:	687b      	ldr	r3, [r7, #4]
    3be4:	685a      	ldr	r2, [r3, #4]
    3be6:	683b      	ldr	r3, [r7, #0]
    3be8:	4013      	ands	r3, r2
    3bea:	2b00      	cmp	r3, #0
    3bec:	bf14      	ite	ne
    3bee:	2301      	movne	r3, #1
    3bf0:	2300      	moveq	r3, #0
    3bf2:	b2db      	uxtb	r3, r3
}
    3bf4:	4618      	mov	r0, r3
    3bf6:	370c      	adds	r7, #12
    3bf8:	46bd      	mov	sp, r7
    3bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bfe:	4770      	bx	lr

00003c00 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    3c00:	b480      	push	{r7}
    3c02:	b083      	sub	sp, #12
    3c04:	af00      	add	r7, sp, #0
    3c06:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    3c08:	687b      	ldr	r3, [r7, #4]
    3c0a:	695b      	ldr	r3, [r3, #20]
}
    3c0c:	4618      	mov	r0, r3
    3c0e:	370c      	adds	r7, #12
    3c10:	46bd      	mov	sp, r7
    3c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c16:	4770      	bx	lr

00003c18 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    3c18:	b480      	push	{r7}
    3c1a:	b083      	sub	sp, #12
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	6078      	str	r0, [r7, #4]
    3c20:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    3c22:	687b      	ldr	r3, [r7, #4]
    3c24:	683a      	ldr	r2, [r7, #0]
    3c26:	615a      	str	r2, [r3, #20]
}
    3c28:	bf00      	nop
    3c2a:	370c      	adds	r7, #12
    3c2c:	46bd      	mov	sp, r7
    3c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c32:	4770      	bx	lr

00003c34 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3c34:	b580      	push	{r7, lr}
    3c36:	b082      	sub	sp, #8
    3c38:	af00      	add	r7, sp, #0
    3c3a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    3c3c:	687b      	ldr	r3, [r7, #4]
    3c3e:	781b      	ldrb	r3, [r3, #0]
    3c40:	b2db      	uxtb	r3, r3
    3c42:	f043 0302 	orr.w	r3, r3, #2
    3c46:	b2da      	uxtb	r2, r3
    3c48:	687b      	ldr	r3, [r7, #4]
    3c4a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    3c4c:	2103      	movs	r1, #3
    3c4e:	6878      	ldr	r0, [r7, #4]
    3c50:	4b02      	ldr	r3, [pc, #8]	; (3c5c <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    3c52:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3c54:	bf00      	nop
    3c56:	3708      	adds	r7, #8
    3c58:	46bd      	mov	sp, r7
    3c5a:	bd80      	pop	{r7, pc}
    3c5c:	00003bb5 	.word	0x00003bb5

00003c60 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3c60:	b580      	push	{r7, lr}
    3c62:	b082      	sub	sp, #8
    3c64:	af00      	add	r7, sp, #0
    3c66:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	781b      	ldrb	r3, [r3, #0]
    3c6c:	b2db      	uxtb	r3, r3
    3c6e:	f023 0302 	bic.w	r3, r3, #2
    3c72:	b2da      	uxtb	r2, r3
    3c74:	687b      	ldr	r3, [r7, #4]
    3c76:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    3c78:	2103      	movs	r1, #3
    3c7a:	6878      	ldr	r0, [r7, #4]
    3c7c:	4b02      	ldr	r3, [pc, #8]	; (3c88 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    3c7e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3c80:	bf00      	nop
    3c82:	3708      	adds	r7, #8
    3c84:	46bd      	mov	sp, r7
    3c86:	bd80      	pop	{r7, pc}
    3c88:	00003bb5 	.word	0x00003bb5

00003c8c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    3c8c:	b580      	push	{r7, lr}
    3c8e:	b084      	sub	sp, #16
    3c90:	af00      	add	r7, sp, #0
    3c92:	6078      	str	r0, [r7, #4]
    3c94:	460b      	mov	r3, r1
    3c96:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    3c98:	687b      	ldr	r3, [r7, #4]
    3c9a:	781b      	ldrb	r3, [r3, #0]
    3c9c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    3c9e:	7bfb      	ldrb	r3, [r7, #15]
    3ca0:	f023 0310 	bic.w	r3, r3, #16
    3ca4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    3ca6:	78fb      	ldrb	r3, [r7, #3]
    3ca8:	011b      	lsls	r3, r3, #4
    3caa:	b25a      	sxtb	r2, r3
    3cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3cb0:	4313      	orrs	r3, r2
    3cb2:	b25b      	sxtb	r3, r3
    3cb4:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    3cb6:	687b      	ldr	r3, [r7, #4]
    3cb8:	7bfa      	ldrb	r2, [r7, #15]
    3cba:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3cbc:	2103      	movs	r1, #3
    3cbe:	6878      	ldr	r0, [r7, #4]
    3cc0:	4b02      	ldr	r3, [pc, #8]	; (3ccc <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    3cc2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3cc4:	bf00      	nop
    3cc6:	3710      	adds	r7, #16
    3cc8:	46bd      	mov	sp, r7
    3cca:	bd80      	pop	{r7, pc}
    3ccc:	00003bb5 	.word	0x00003bb5

00003cd0 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    3cd0:	b580      	push	{r7, lr}
    3cd2:	b084      	sub	sp, #16
    3cd4:	af00      	add	r7, sp, #0
    3cd6:	6078      	str	r0, [r7, #4]
    3cd8:	460b      	mov	r3, r1
    3cda:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3cdc:	2103      	movs	r1, #3
    3cde:	6878      	ldr	r0, [r7, #4]
    3ce0:	4b06      	ldr	r3, [pc, #24]	; (3cfc <hri_eic_get_CTRLA_reg+0x2c>)
    3ce2:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    3ce4:	687b      	ldr	r3, [r7, #4]
    3ce6:	781b      	ldrb	r3, [r3, #0]
    3ce8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    3cea:	7bfa      	ldrb	r2, [r7, #15]
    3cec:	78fb      	ldrb	r3, [r7, #3]
    3cee:	4013      	ands	r3, r2
    3cf0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    3cf2:	7bfb      	ldrb	r3, [r7, #15]
}
    3cf4:	4618      	mov	r0, r3
    3cf6:	3710      	adds	r7, #16
    3cf8:	46bd      	mov	sp, r7
    3cfa:	bd80      	pop	{r7, pc}
    3cfc:	00003bb5 	.word	0x00003bb5

00003d00 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    3d00:	b580      	push	{r7, lr}
    3d02:	b082      	sub	sp, #8
    3d04:	af00      	add	r7, sp, #0
    3d06:	6078      	str	r0, [r7, #4]
    3d08:	460b      	mov	r3, r1
    3d0a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    3d0c:	687b      	ldr	r3, [r7, #4]
    3d0e:	78fa      	ldrb	r2, [r7, #3]
    3d10:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    3d12:	2103      	movs	r1, #3
    3d14:	6878      	ldr	r0, [r7, #4]
    3d16:	4b03      	ldr	r3, [pc, #12]	; (3d24 <hri_eic_write_CTRLA_reg+0x24>)
    3d18:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    3d1a:	bf00      	nop
    3d1c:	3708      	adds	r7, #8
    3d1e:	46bd      	mov	sp, r7
    3d20:	bd80      	pop	{r7, pc}
    3d22:	bf00      	nop
    3d24:	00003bb5 	.word	0x00003bb5

00003d28 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    3d28:	b480      	push	{r7}
    3d2a:	b083      	sub	sp, #12
    3d2c:	af00      	add	r7, sp, #0
    3d2e:	6078      	str	r0, [r7, #4]
    3d30:	460b      	mov	r3, r1
    3d32:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    3d34:	687b      	ldr	r3, [r7, #4]
    3d36:	78fa      	ldrb	r2, [r7, #3]
    3d38:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3d3a:	bf00      	nop
    3d3c:	370c      	adds	r7, #12
    3d3e:	46bd      	mov	sp, r7
    3d40:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d44:	4770      	bx	lr

00003d46 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    3d46:	b480      	push	{r7}
    3d48:	b083      	sub	sp, #12
    3d4a:	af00      	add	r7, sp, #0
    3d4c:	6078      	str	r0, [r7, #4]
    3d4e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    3d50:	687b      	ldr	r3, [r7, #4]
    3d52:	683a      	ldr	r2, [r7, #0]
    3d54:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3d56:	bf00      	nop
    3d58:	370c      	adds	r7, #12
    3d5a:	46bd      	mov	sp, r7
    3d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d60:	4770      	bx	lr

00003d62 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    3d62:	b480      	push	{r7}
    3d64:	b083      	sub	sp, #12
    3d66:	af00      	add	r7, sp, #0
    3d68:	6078      	str	r0, [r7, #4]
    3d6a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    3d6c:	687b      	ldr	r3, [r7, #4]
    3d6e:	683a      	ldr	r2, [r7, #0]
    3d70:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3d72:	bf00      	nop
    3d74:	370c      	adds	r7, #12
    3d76:	46bd      	mov	sp, r7
    3d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d7c:	4770      	bx	lr

00003d7e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    3d7e:	b480      	push	{r7}
    3d80:	b085      	sub	sp, #20
    3d82:	af00      	add	r7, sp, #0
    3d84:	60f8      	str	r0, [r7, #12]
    3d86:	460b      	mov	r3, r1
    3d88:	607a      	str	r2, [r7, #4]
    3d8a:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    3d8c:	7afb      	ldrb	r3, [r7, #11]
    3d8e:	68fa      	ldr	r2, [r7, #12]
    3d90:	3306      	adds	r3, #6
    3d92:	009b      	lsls	r3, r3, #2
    3d94:	4413      	add	r3, r2
    3d96:	687a      	ldr	r2, [r7, #4]
    3d98:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    3d9a:	bf00      	nop
    3d9c:	3714      	adds	r7, #20
    3d9e:	46bd      	mov	sp, r7
    3da0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3da4:	4770      	bx	lr

00003da6 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    3da6:	b480      	push	{r7}
    3da8:	b083      	sub	sp, #12
    3daa:	af00      	add	r7, sp, #0
    3dac:	6078      	str	r0, [r7, #4]
    3dae:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    3db0:	687b      	ldr	r3, [r7, #4]
    3db2:	683a      	ldr	r2, [r7, #0]
    3db4:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    3db6:	bf00      	nop
    3db8:	370c      	adds	r7, #12
    3dba:	46bd      	mov	sp, r7
    3dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc0:	4770      	bx	lr

00003dc2 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    3dc2:	b480      	push	{r7}
    3dc4:	b083      	sub	sp, #12
    3dc6:	af00      	add	r7, sp, #0
    3dc8:	6078      	str	r0, [r7, #4]
    3dca:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    3dcc:	687b      	ldr	r3, [r7, #4]
    3dce:	683a      	ldr	r2, [r7, #0]
    3dd0:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    3dd2:	bf00      	nop
    3dd4:	370c      	adds	r7, #12
    3dd6:	46bd      	mov	sp, r7
    3dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ddc:	4770      	bx	lr
	...

00003de0 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    3de0:	b580      	push	{r7, lr}
    3de2:	b082      	sub	sp, #8
    3de4:	af00      	add	r7, sp, #0
    3de6:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    3de8:	2101      	movs	r1, #1
    3dea:	4838      	ldr	r0, [pc, #224]	; (3ecc <_ext_irq_init+0xec>)
    3dec:	4b38      	ldr	r3, [pc, #224]	; (3ed0 <_ext_irq_init+0xf0>)
    3dee:	4798      	blx	r3
    3df0:	4603      	mov	r3, r0
    3df2:	f083 0301 	eor.w	r3, r3, #1
    3df6:	b2db      	uxtb	r3, r3
    3df8:	2b00      	cmp	r3, #0
    3dfa:	d011      	beq.n	3e20 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    3dfc:	2102      	movs	r1, #2
    3dfe:	4833      	ldr	r0, [pc, #204]	; (3ecc <_ext_irq_init+0xec>)
    3e00:	4b34      	ldr	r3, [pc, #208]	; (3ed4 <_ext_irq_init+0xf4>)
    3e02:	4798      	blx	r3
    3e04:	4603      	mov	r3, r0
    3e06:	2b00      	cmp	r3, #0
    3e08:	d006      	beq.n	3e18 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    3e0a:	4830      	ldr	r0, [pc, #192]	; (3ecc <_ext_irq_init+0xec>)
    3e0c:	4b32      	ldr	r3, [pc, #200]	; (3ed8 <_ext_irq_init+0xf8>)
    3e0e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    3e10:	2102      	movs	r1, #2
    3e12:	482e      	ldr	r0, [pc, #184]	; (3ecc <_ext_irq_init+0xec>)
    3e14:	4b31      	ldr	r3, [pc, #196]	; (3edc <_ext_irq_init+0xfc>)
    3e16:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    3e18:	2101      	movs	r1, #1
    3e1a:	482c      	ldr	r0, [pc, #176]	; (3ecc <_ext_irq_init+0xec>)
    3e1c:	4b30      	ldr	r3, [pc, #192]	; (3ee0 <_ext_irq_init+0x100>)
    3e1e:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    3e20:	2101      	movs	r1, #1
    3e22:	482a      	ldr	r0, [pc, #168]	; (3ecc <_ext_irq_init+0xec>)
    3e24:	4b2d      	ldr	r3, [pc, #180]	; (3edc <_ext_irq_init+0xfc>)
    3e26:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    3e28:	2100      	movs	r1, #0
    3e2a:	4828      	ldr	r0, [pc, #160]	; (3ecc <_ext_irq_init+0xec>)
    3e2c:	4b2d      	ldr	r3, [pc, #180]	; (3ee4 <_ext_irq_init+0x104>)
    3e2e:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    3e30:	2100      	movs	r1, #0
    3e32:	4826      	ldr	r0, [pc, #152]	; (3ecc <_ext_irq_init+0xec>)
    3e34:	4b2c      	ldr	r3, [pc, #176]	; (3ee8 <_ext_irq_init+0x108>)
    3e36:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    3e38:	2100      	movs	r1, #0
    3e3a:	4824      	ldr	r0, [pc, #144]	; (3ecc <_ext_irq_init+0xec>)
    3e3c:	4b2b      	ldr	r3, [pc, #172]	; (3eec <_ext_irq_init+0x10c>)
    3e3e:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    3e40:	2130      	movs	r1, #48	; 0x30
    3e42:	4822      	ldr	r0, [pc, #136]	; (3ecc <_ext_irq_init+0xec>)
    3e44:	4b2a      	ldr	r3, [pc, #168]	; (3ef0 <_ext_irq_init+0x110>)
    3e46:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    3e48:	2130      	movs	r1, #48	; 0x30
    3e4a:	4820      	ldr	r0, [pc, #128]	; (3ecc <_ext_irq_init+0xec>)
    3e4c:	4b29      	ldr	r3, [pc, #164]	; (3ef4 <_ext_irq_init+0x114>)
    3e4e:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    3e50:	2100      	movs	r1, #0
    3e52:	481e      	ldr	r0, [pc, #120]	; (3ecc <_ext_irq_init+0xec>)
    3e54:	4b28      	ldr	r3, [pc, #160]	; (3ef8 <_ext_irq_init+0x118>)
    3e56:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    3e58:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    3e5c:	2100      	movs	r1, #0
    3e5e:	481b      	ldr	r0, [pc, #108]	; (3ecc <_ext_irq_init+0xec>)
    3e60:	4b26      	ldr	r3, [pc, #152]	; (3efc <_ext_irq_init+0x11c>)
    3e62:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    3e64:	2200      	movs	r2, #0
    3e66:	2101      	movs	r1, #1
    3e68:	4818      	ldr	r0, [pc, #96]	; (3ecc <_ext_irq_init+0xec>)
    3e6a:	4b24      	ldr	r3, [pc, #144]	; (3efc <_ext_irq_init+0x11c>)
    3e6c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    3e6e:	4817      	ldr	r0, [pc, #92]	; (3ecc <_ext_irq_init+0xec>)
    3e70:	4b23      	ldr	r3, [pc, #140]	; (3f00 <_ext_irq_init+0x120>)
    3e72:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    3e74:	2010      	movs	r0, #16
    3e76:	4b23      	ldr	r3, [pc, #140]	; (3f04 <_ext_irq_init+0x124>)
    3e78:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    3e7a:	2010      	movs	r0, #16
    3e7c:	4b22      	ldr	r3, [pc, #136]	; (3f08 <_ext_irq_init+0x128>)
    3e7e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    3e80:	2010      	movs	r0, #16
    3e82:	4b22      	ldr	r3, [pc, #136]	; (3f0c <_ext_irq_init+0x12c>)
    3e84:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    3e86:	2011      	movs	r0, #17
    3e88:	4b1e      	ldr	r3, [pc, #120]	; (3f04 <_ext_irq_init+0x124>)
    3e8a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    3e8c:	2011      	movs	r0, #17
    3e8e:	4b1e      	ldr	r3, [pc, #120]	; (3f08 <_ext_irq_init+0x128>)
    3e90:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    3e92:	2011      	movs	r0, #17
    3e94:	4b1d      	ldr	r3, [pc, #116]	; (3f0c <_ext_irq_init+0x12c>)
    3e96:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    3e98:	2012      	movs	r0, #18
    3e9a:	4b1a      	ldr	r3, [pc, #104]	; (3f04 <_ext_irq_init+0x124>)
    3e9c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    3e9e:	2012      	movs	r0, #18
    3ea0:	4b19      	ldr	r3, [pc, #100]	; (3f08 <_ext_irq_init+0x128>)
    3ea2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    3ea4:	2012      	movs	r0, #18
    3ea6:	4b19      	ldr	r3, [pc, #100]	; (3f0c <_ext_irq_init+0x12c>)
    3ea8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    3eaa:	2013      	movs	r0, #19
    3eac:	4b15      	ldr	r3, [pc, #84]	; (3f04 <_ext_irq_init+0x124>)
    3eae:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    3eb0:	2013      	movs	r0, #19
    3eb2:	4b15      	ldr	r3, [pc, #84]	; (3f08 <_ext_irq_init+0x128>)
    3eb4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    3eb6:	2013      	movs	r0, #19
    3eb8:	4b14      	ldr	r3, [pc, #80]	; (3f0c <_ext_irq_init+0x12c>)
    3eba:	4798      	blx	r3

	callback = cb;
    3ebc:	4a14      	ldr	r2, [pc, #80]	; (3f10 <_ext_irq_init+0x130>)
    3ebe:	687b      	ldr	r3, [r7, #4]
    3ec0:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    3ec2:	2300      	movs	r3, #0
}
    3ec4:	4618      	mov	r0, r3
    3ec6:	3708      	adds	r7, #8
    3ec8:	46bd      	mov	sp, r7
    3eca:	bd80      	pop	{r7, pc}
    3ecc:	40002800 	.word	0x40002800
    3ed0:	00003bd9 	.word	0x00003bd9
    3ed4:	00003cd1 	.word	0x00003cd1
    3ed8:	00003c61 	.word	0x00003c61
    3edc:	00003bb5 	.word	0x00003bb5
    3ee0:	00003d01 	.word	0x00003d01
    3ee4:	00003c8d 	.word	0x00003c8d
    3ee8:	00003d29 	.word	0x00003d29
    3eec:	00003d47 	.word	0x00003d47
    3ef0:	00003d63 	.word	0x00003d63
    3ef4:	00003da7 	.word	0x00003da7
    3ef8:	00003dc3 	.word	0x00003dc3
    3efc:	00003d7f 	.word	0x00003d7f
    3f00:	00003c35 	.word	0x00003c35
    3f04:	00003b35 	.word	0x00003b35
    3f08:	00003b79 	.word	0x00003b79
    3f0c:	00003af9 	.word	0x00003af9
    3f10:	20000650 	.word	0x20000650

00003f14 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    3f14:	b580      	push	{r7, lr}
    3f16:	b084      	sub	sp, #16
    3f18:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    3f1a:	4841      	ldr	r0, [pc, #260]	; (4020 <_ext_irq_handler+0x10c>)
    3f1c:	4b41      	ldr	r3, [pc, #260]	; (4024 <_ext_irq_handler+0x110>)
    3f1e:	4798      	blx	r3
    3f20:	4603      	mov	r3, r0
    3f22:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    3f24:	f04f 33ff 	mov.w	r3, #4294967295
    3f28:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    3f2a:	683b      	ldr	r3, [r7, #0]
    3f2c:	4619      	mov	r1, r3
    3f2e:	483c      	ldr	r0, [pc, #240]	; (4020 <_ext_irq_handler+0x10c>)
    3f30:	4b3d      	ldr	r3, [pc, #244]	; (4028 <_ext_irq_handler+0x114>)
    3f32:	4798      	blx	r3

	ASSERT(callback);
    3f34:	4b3d      	ldr	r3, [pc, #244]	; (402c <_ext_irq_handler+0x118>)
    3f36:	681b      	ldr	r3, [r3, #0]
    3f38:	2b00      	cmp	r3, #0
    3f3a:	bf14      	ite	ne
    3f3c:	2301      	movne	r3, #1
    3f3e:	2300      	moveq	r3, #0
    3f40:	b2db      	uxtb	r3, r3
    3f42:	22f4      	movs	r2, #244	; 0xf4
    3f44:	493a      	ldr	r1, [pc, #232]	; (4030 <_ext_irq_handler+0x11c>)
    3f46:	4618      	mov	r0, r3
    3f48:	4b3a      	ldr	r3, [pc, #232]	; (4034 <_ext_irq_handler+0x120>)
    3f4a:	4798      	blx	r3

	while (flags) {
    3f4c:	e060      	b.n	4010 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    3f4e:	683b      	ldr	r3, [r7, #0]
    3f50:	4618      	mov	r0, r3
    3f52:	4b39      	ldr	r3, [pc, #228]	; (4038 <_ext_irq_handler+0x124>)
    3f54:	4798      	blx	r3
    3f56:	4603      	mov	r3, r0
    3f58:	b2db      	uxtb	r3, r3
    3f5a:	3b01      	subs	r3, #1
    3f5c:	b2db      	uxtb	r3, r3
    3f5e:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    3f60:	e047      	b.n	3ff2 <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    3f62:	2300      	movs	r3, #0
    3f64:	71fb      	strb	r3, [r7, #7]
    3f66:	2304      	movs	r3, #4
    3f68:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    3f6a:	e024      	b.n	3fb6 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    3f6c:	79ba      	ldrb	r2, [r7, #6]
    3f6e:	79fb      	ldrb	r3, [r7, #7]
    3f70:	4413      	add	r3, r2
    3f72:	105b      	asrs	r3, r3, #1
    3f74:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    3f76:	797b      	ldrb	r3, [r7, #5]
    3f78:	4a30      	ldr	r2, [pc, #192]	; (403c <_ext_irq_handler+0x128>)
    3f7a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    3f7e:	461a      	mov	r2, r3
    3f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3f84:	429a      	cmp	r2, r3
    3f86:	d106      	bne.n	3f96 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    3f88:	797b      	ldrb	r3, [r7, #5]
    3f8a:	4a2c      	ldr	r2, [pc, #176]	; (403c <_ext_irq_handler+0x128>)
    3f8c:	00db      	lsls	r3, r3, #3
    3f8e:	4413      	add	r3, r2
    3f90:	685b      	ldr	r3, [r3, #4]
    3f92:	60bb      	str	r3, [r7, #8]
					break;
    3f94:	e013      	b.n	3fbe <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    3f96:	797b      	ldrb	r3, [r7, #5]
    3f98:	4a28      	ldr	r2, [pc, #160]	; (403c <_ext_irq_handler+0x128>)
    3f9a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    3f9e:	461a      	mov	r2, r3
    3fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3fa4:	429a      	cmp	r2, r3
    3fa6:	da03      	bge.n	3fb0 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    3fa8:	797b      	ldrb	r3, [r7, #5]
    3faa:	3301      	adds	r3, #1
    3fac:	71fb      	strb	r3, [r7, #7]
    3fae:	e002      	b.n	3fb6 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    3fb0:	797b      	ldrb	r3, [r7, #5]
    3fb2:	3b01      	subs	r3, #1
    3fb4:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    3fb6:	79ba      	ldrb	r2, [r7, #6]
    3fb8:	79fb      	ldrb	r3, [r7, #7]
    3fba:	429a      	cmp	r2, r3
    3fbc:	d2d6      	bcs.n	3f6c <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    3fbe:	68bb      	ldr	r3, [r7, #8]
    3fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
    3fc4:	d003      	beq.n	3fce <_ext_irq_handler+0xba>
				callback(pin);
    3fc6:	4b19      	ldr	r3, [pc, #100]	; (402c <_ext_irq_handler+0x118>)
    3fc8:	681b      	ldr	r3, [r3, #0]
    3fca:	68b8      	ldr	r0, [r7, #8]
    3fcc:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    3fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3fd2:	2201      	movs	r2, #1
    3fd4:	fa02 f303 	lsl.w	r3, r2, r3
    3fd8:	43da      	mvns	r2, r3
    3fda:	683b      	ldr	r3, [r7, #0]
    3fdc:	4013      	ands	r3, r2
    3fde:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    3fe0:	683b      	ldr	r3, [r7, #0]
    3fe2:	4618      	mov	r0, r3
    3fe4:	4b14      	ldr	r3, [pc, #80]	; (4038 <_ext_irq_handler+0x124>)
    3fe6:	4798      	blx	r3
    3fe8:	4603      	mov	r3, r0
    3fea:	b2db      	uxtb	r3, r3
    3fec:	3b01      	subs	r3, #1
    3fee:	b2db      	uxtb	r3, r3
    3ff0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    3ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ffa:	d1b2      	bne.n	3f62 <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    3ffc:	4808      	ldr	r0, [pc, #32]	; (4020 <_ext_irq_handler+0x10c>)
    3ffe:	4b09      	ldr	r3, [pc, #36]	; (4024 <_ext_irq_handler+0x110>)
    4000:	4798      	blx	r3
    4002:	4603      	mov	r3, r0
    4004:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    4006:	683b      	ldr	r3, [r7, #0]
    4008:	4619      	mov	r1, r3
    400a:	4805      	ldr	r0, [pc, #20]	; (4020 <_ext_irq_handler+0x10c>)
    400c:	4b06      	ldr	r3, [pc, #24]	; (4028 <_ext_irq_handler+0x114>)
    400e:	4798      	blx	r3
	while (flags) {
    4010:	683b      	ldr	r3, [r7, #0]
    4012:	2b00      	cmp	r3, #0
    4014:	d19b      	bne.n	3f4e <_ext_irq_handler+0x3a>
	}
}
    4016:	bf00      	nop
    4018:	3710      	adds	r7, #16
    401a:	46bd      	mov	sp, r7
    401c:	bd80      	pop	{r7, pc}
    401e:	bf00      	nop
    4020:	40002800 	.word	0x40002800
    4024:	00003c01 	.word	0x00003c01
    4028:	00003c19 	.word	0x00003c19
    402c:	20000650 	.word	0x20000650
    4030:	0000cce8 	.word	0x0000cce8
    4034:	00003249 	.word	0x00003249
    4038:	0000c819 	.word	0x0000c819
    403c:	0000ccc8 	.word	0x0000ccc8

00004040 <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    4040:	b580      	push	{r7, lr}
    4042:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4044:	4b01      	ldr	r3, [pc, #4]	; (404c <EIC_4_Handler+0xc>)
    4046:	4798      	blx	r3
} /**
    4048:	bf00      	nop
    404a:	bd80      	pop	{r7, pc}
    404c:	00003f15 	.word	0x00003f15

00004050 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4050:	b580      	push	{r7, lr}
    4052:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4054:	4b01      	ldr	r3, [pc, #4]	; (405c <EIC_5_Handler+0xc>)
    4056:	4798      	blx	r3
} /**
    4058:	bf00      	nop
    405a:	bd80      	pop	{r7, pc}
    405c:	00003f15 	.word	0x00003f15

00004060 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4060:	b580      	push	{r7, lr}
    4062:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4064:	4b01      	ldr	r3, [pc, #4]	; (406c <EIC_6_Handler+0xc>)
    4066:	4798      	blx	r3
} /**
    4068:	bf00      	nop
    406a:	bd80      	pop	{r7, pc}
    406c:	00003f15 	.word	0x00003f15

00004070 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4070:	b580      	push	{r7, lr}
    4072:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4074:	4b01      	ldr	r3, [pc, #4]	; (407c <EIC_7_Handler+0xc>)
    4076:	4798      	blx	r3
}
    4078:	bf00      	nop
    407a:	bd80      	pop	{r7, pc}
    407c:	00003f15 	.word	0x00003f15

00004080 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4080:	b480      	push	{r7}
    4082:	b085      	sub	sp, #20
    4084:	af00      	add	r7, sp, #0
    4086:	60f8      	str	r0, [r7, #12]
    4088:	460b      	mov	r3, r1
    408a:	607a      	str	r2, [r7, #4]
    408c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    408e:	7afa      	ldrb	r2, [r7, #11]
    4090:	68fb      	ldr	r3, [r7, #12]
    4092:	3248      	adds	r2, #72	; 0x48
    4094:	6879      	ldr	r1, [r7, #4]
    4096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    409a:	bf00      	nop
    409c:	3714      	adds	r7, #20
    409e:	46bd      	mov	sp, r7
    40a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    40a4:	4770      	bx	lr

000040a6 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    40a6:	b480      	push	{r7}
    40a8:	b083      	sub	sp, #12
    40aa:	af00      	add	r7, sp, #0
    40ac:	6078      	str	r0, [r7, #4]
    40ae:	460b      	mov	r3, r1
    40b0:	70fb      	strb	r3, [r7, #3]
    40b2:	4613      	mov	r3, r2
    40b4:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    40b6:	78fb      	ldrb	r3, [r7, #3]
    40b8:	687a      	ldr	r2, [r7, #4]
    40ba:	3304      	adds	r3, #4
    40bc:	00db      	lsls	r3, r3, #3
    40be:	4413      	add	r3, r2
    40c0:	78ba      	ldrb	r2, [r7, #2]
    40c2:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    40c4:	78fb      	ldrb	r3, [r7, #3]
    40c6:	78ba      	ldrb	r2, [r7, #2]
    40c8:	43d2      	mvns	r2, r2
    40ca:	b2d1      	uxtb	r1, r2
    40cc:	687a      	ldr	r2, [r7, #4]
    40ce:	3304      	adds	r3, #4
    40d0:	00db      	lsls	r3, r3, #3
    40d2:	4413      	add	r3, r2
    40d4:	460a      	mov	r2, r1
    40d6:	711a      	strb	r2, [r3, #4]
}
    40d8:	bf00      	nop
    40da:	370c      	adds	r7, #12
    40dc:	46bd      	mov	sp, r7
    40de:	f85d 7b04 	ldr.w	r7, [sp], #4
    40e2:	4770      	bx	lr

000040e4 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    40e4:	b480      	push	{r7}
    40e6:	b085      	sub	sp, #20
    40e8:	af00      	add	r7, sp, #0
    40ea:	60f8      	str	r0, [r7, #12]
    40ec:	460b      	mov	r3, r1
    40ee:	607a      	str	r2, [r7, #4]
    40f0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    40f2:	7afa      	ldrb	r2, [r7, #11]
    40f4:	68fb      	ldr	r3, [r7, #12]
    40f6:	3204      	adds	r2, #4
    40f8:	6879      	ldr	r1, [r7, #4]
    40fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    40fe:	bf00      	nop
    4100:	3714      	adds	r7, #20
    4102:	46bd      	mov	sp, r7
    4104:	f85d 7b04 	ldr.w	r7, [sp], #4
    4108:	4770      	bx	lr
	...

0000410c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    410c:	b580      	push	{r7, lr}
    410e:	b082      	sub	sp, #8
    4110:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4112:	2300      	movs	r3, #0
    4114:	71fb      	strb	r3, [r7, #7]
    4116:	e00b      	b.n	4130 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4118:	79fb      	ldrb	r3, [r7, #7]
    411a:	4a18      	ldr	r2, [pc, #96]	; (417c <_event_system_init+0x70>)
    411c:	5cd3      	ldrb	r3, [r2, r3]
    411e:	461a      	mov	r2, r3
    4120:	79fb      	ldrb	r3, [r7, #7]
    4122:	4619      	mov	r1, r3
    4124:	4816      	ldr	r0, [pc, #88]	; (4180 <_event_system_init+0x74>)
    4126:	4b17      	ldr	r3, [pc, #92]	; (4184 <_event_system_init+0x78>)
    4128:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    412a:	79fb      	ldrb	r3, [r7, #7]
    412c:	3301      	adds	r3, #1
    412e:	71fb      	strb	r3, [r7, #7]
    4130:	79fb      	ldrb	r3, [r7, #7]
    4132:	2b42      	cmp	r3, #66	; 0x42
    4134:	d9f0      	bls.n	4118 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4136:	2300      	movs	r3, #0
    4138:	71fb      	strb	r3, [r7, #7]
    413a:	e016      	b.n	416a <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    413c:	79fb      	ldrb	r3, [r7, #7]
    413e:	4a12      	ldr	r2, [pc, #72]	; (4188 <_event_system_init+0x7c>)
    4140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4144:	461a      	mov	r2, r3
    4146:	79fb      	ldrb	r3, [r7, #7]
    4148:	4619      	mov	r1, r3
    414a:	480d      	ldr	r0, [pc, #52]	; (4180 <_event_system_init+0x74>)
    414c:	4b0f      	ldr	r3, [pc, #60]	; (418c <_event_system_init+0x80>)
    414e:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4150:	79fb      	ldrb	r3, [r7, #7]
    4152:	4a0f      	ldr	r2, [pc, #60]	; (4190 <_event_system_init+0x84>)
    4154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4158:	b2da      	uxtb	r2, r3
    415a:	79fb      	ldrb	r3, [r7, #7]
    415c:	4619      	mov	r1, r3
    415e:	4808      	ldr	r0, [pc, #32]	; (4180 <_event_system_init+0x74>)
    4160:	4b0c      	ldr	r3, [pc, #48]	; (4194 <_event_system_init+0x88>)
    4162:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4164:	79fb      	ldrb	r3, [r7, #7]
    4166:	3301      	adds	r3, #1
    4168:	71fb      	strb	r3, [r7, #7]
    416a:	79fb      	ldrb	r3, [r7, #7]
    416c:	2b1f      	cmp	r3, #31
    416e:	d9e5      	bls.n	413c <_event_system_init+0x30>
	}

	return ERR_NONE;
    4170:	2300      	movs	r3, #0
}
    4172:	4618      	mov	r0, r3
    4174:	3708      	adds	r7, #8
    4176:	46bd      	mov	sp, r7
    4178:	bd80      	pop	{r7, pc}
    417a:	bf00      	nop
    417c:	0000cd00 	.word	0x0000cd00
    4180:	4100e000 	.word	0x4100e000
    4184:	00004081 	.word	0x00004081
    4188:	0000cd44 	.word	0x0000cd44
    418c:	000040e5 	.word	0x000040e5
    4190:	0000cd84 	.word	0x0000cd84
    4194:	000040a7 	.word	0x000040a7

00004198 <hri_gclk_wait_for_sync>:
{
    4198:	b480      	push	{r7}
    419a:	b083      	sub	sp, #12
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
    41a0:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    41a2:	bf00      	nop
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	685a      	ldr	r2, [r3, #4]
    41a8:	683b      	ldr	r3, [r7, #0]
    41aa:	4013      	ands	r3, r2
    41ac:	2b00      	cmp	r3, #0
    41ae:	d1f9      	bne.n	41a4 <hri_gclk_wait_for_sync+0xc>
}
    41b0:	bf00      	nop
    41b2:	370c      	adds	r7, #12
    41b4:	46bd      	mov	sp, r7
    41b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    41ba:	4770      	bx	lr

000041bc <hri_gclk_write_GENCTRL_reg>:
{
    41bc:	b580      	push	{r7, lr}
    41be:	b084      	sub	sp, #16
    41c0:	af00      	add	r7, sp, #0
    41c2:	60f8      	str	r0, [r7, #12]
    41c4:	460b      	mov	r3, r1
    41c6:	607a      	str	r2, [r7, #4]
    41c8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    41ca:	7afa      	ldrb	r2, [r7, #11]
    41cc:	68fb      	ldr	r3, [r7, #12]
    41ce:	3208      	adds	r2, #8
    41d0:	6879      	ldr	r1, [r7, #4]
    41d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    41d6:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    41da:	68f8      	ldr	r0, [r7, #12]
    41dc:	4b02      	ldr	r3, [pc, #8]	; (41e8 <hri_gclk_write_GENCTRL_reg+0x2c>)
    41de:	4798      	blx	r3
}
    41e0:	bf00      	nop
    41e2:	3710      	adds	r7, #16
    41e4:	46bd      	mov	sp, r7
    41e6:	bd80      	pop	{r7, pc}
    41e8:	00004199 	.word	0x00004199

000041ec <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    41ec:	b580      	push	{r7, lr}
    41ee:	b082      	sub	sp, #8
    41f0:	af00      	add	r7, sp, #0
    41f2:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    41f4:	687b      	ldr	r3, [r7, #4]
    41f6:	f003 0301 	and.w	r3, r3, #1
    41fa:	2b00      	cmp	r3, #0
    41fc:	d004      	beq.n	4208 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    41fe:	4a27      	ldr	r2, [pc, #156]	; (429c <_gclk_init_generators_by_fref+0xb0>)
    4200:	2100      	movs	r1, #0
    4202:	4827      	ldr	r0, [pc, #156]	; (42a0 <_gclk_init_generators_by_fref+0xb4>)
    4204:	4b27      	ldr	r3, [pc, #156]	; (42a4 <_gclk_init_generators_by_fref+0xb8>)
    4206:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	f003 0302 	and.w	r3, r3, #2
    420e:	2b00      	cmp	r3, #0
    4210:	d004      	beq.n	421c <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4212:	4a25      	ldr	r2, [pc, #148]	; (42a8 <_gclk_init_generators_by_fref+0xbc>)
    4214:	2101      	movs	r1, #1
    4216:	4822      	ldr	r0, [pc, #136]	; (42a0 <_gclk_init_generators_by_fref+0xb4>)
    4218:	4b22      	ldr	r3, [pc, #136]	; (42a4 <_gclk_init_generators_by_fref+0xb8>)
    421a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    421c:	687b      	ldr	r3, [r7, #4]
    421e:	f003 0304 	and.w	r3, r3, #4
    4222:	2b00      	cmp	r3, #0
    4224:	d004      	beq.n	4230 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    4226:	4a21      	ldr	r2, [pc, #132]	; (42ac <_gclk_init_generators_by_fref+0xc0>)
    4228:	2102      	movs	r1, #2
    422a:	481d      	ldr	r0, [pc, #116]	; (42a0 <_gclk_init_generators_by_fref+0xb4>)
    422c:	4b1d      	ldr	r3, [pc, #116]	; (42a4 <_gclk_init_generators_by_fref+0xb8>)
    422e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	f003 0308 	and.w	r3, r3, #8
    4236:	2b00      	cmp	r3, #0
    4238:	d004      	beq.n	4244 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    423a:	4a1d      	ldr	r2, [pc, #116]	; (42b0 <_gclk_init_generators_by_fref+0xc4>)
    423c:	2103      	movs	r1, #3
    423e:	4818      	ldr	r0, [pc, #96]	; (42a0 <_gclk_init_generators_by_fref+0xb4>)
    4240:	4b18      	ldr	r3, [pc, #96]	; (42a4 <_gclk_init_generators_by_fref+0xb8>)
    4242:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4244:	687b      	ldr	r3, [r7, #4]
    4246:	f003 0310 	and.w	r3, r3, #16
    424a:	2b00      	cmp	r3, #0
    424c:	d004      	beq.n	4258 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    424e:	4a19      	ldr	r2, [pc, #100]	; (42b4 <_gclk_init_generators_by_fref+0xc8>)
    4250:	2104      	movs	r1, #4
    4252:	4813      	ldr	r0, [pc, #76]	; (42a0 <_gclk_init_generators_by_fref+0xb4>)
    4254:	4b13      	ldr	r3, [pc, #76]	; (42a4 <_gclk_init_generators_by_fref+0xb8>)
    4256:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	f003 0320 	and.w	r3, r3, #32
    425e:	2b00      	cmp	r3, #0
    4260:	d004      	beq.n	426c <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4262:	4a15      	ldr	r2, [pc, #84]	; (42b8 <_gclk_init_generators_by_fref+0xcc>)
    4264:	2105      	movs	r1, #5
    4266:	480e      	ldr	r0, [pc, #56]	; (42a0 <_gclk_init_generators_by_fref+0xb4>)
    4268:	4b0e      	ldr	r3, [pc, #56]	; (42a4 <_gclk_init_generators_by_fref+0xb8>)
    426a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4272:	2b00      	cmp	r3, #0
    4274:	d004      	beq.n	4280 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    4276:	4a11      	ldr	r2, [pc, #68]	; (42bc <_gclk_init_generators_by_fref+0xd0>)
    4278:	210a      	movs	r1, #10
    427a:	4809      	ldr	r0, [pc, #36]	; (42a0 <_gclk_init_generators_by_fref+0xb4>)
    427c:	4b09      	ldr	r3, [pc, #36]	; (42a4 <_gclk_init_generators_by_fref+0xb8>)
    427e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4280:	687b      	ldr	r3, [r7, #4]
    4282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    4286:	2b00      	cmp	r3, #0
    4288:	d004      	beq.n	4294 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    428a:	4a0d      	ldr	r2, [pc, #52]	; (42c0 <_gclk_init_generators_by_fref+0xd4>)
    428c:	210b      	movs	r1, #11
    428e:	4804      	ldr	r0, [pc, #16]	; (42a0 <_gclk_init_generators_by_fref+0xb4>)
    4290:	4b04      	ldr	r3, [pc, #16]	; (42a4 <_gclk_init_generators_by_fref+0xb8>)
    4292:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4294:	bf00      	nop
    4296:	3708      	adds	r7, #8
    4298:	46bd      	mov	sp, r7
    429a:	bd80      	pop	{r7, pc}
    429c:	00010107 	.word	0x00010107
    42a0:	40001c00 	.word	0x40001c00
    42a4:	000041bd 	.word	0x000041bd
    42a8:	00010907 	.word	0x00010907
    42ac:	00010906 	.word	0x00010906
    42b0:	00011908 	.word	0x00011908
    42b4:	00010901 	.word	0x00010901
    42b8:	00060901 	.word	0x00060901
    42bc:	00010905 	.word	0x00010905
    42c0:	00041905 	.word	0x00041905

000042c4 <hri_mclk_write_CPUDIV_reg>:
{
    42c4:	b480      	push	{r7}
    42c6:	b083      	sub	sp, #12
    42c8:	af00      	add	r7, sp, #0
    42ca:	6078      	str	r0, [r7, #4]
    42cc:	460b      	mov	r3, r1
    42ce:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    42d0:	687b      	ldr	r3, [r7, #4]
    42d2:	78fa      	ldrb	r2, [r7, #3]
    42d4:	715a      	strb	r2, [r3, #5]
}
    42d6:	bf00      	nop
    42d8:	370c      	adds	r7, #12
    42da:	46bd      	mov	sp, r7
    42dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e0:	4770      	bx	lr
	...

000042e4 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    42e4:	b580      	push	{r7, lr}
    42e6:	b082      	sub	sp, #8
    42e8:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    42ea:	4b05      	ldr	r3, [pc, #20]	; (4300 <_mclk_init+0x1c>)
    42ec:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    42ee:	2101      	movs	r1, #1
    42f0:	6878      	ldr	r0, [r7, #4]
    42f2:	4b04      	ldr	r3, [pc, #16]	; (4304 <_mclk_init+0x20>)
    42f4:	4798      	blx	r3
}
    42f6:	bf00      	nop
    42f8:	3708      	adds	r7, #8
    42fa:	46bd      	mov	sp, r7
    42fc:	bd80      	pop	{r7, pc}
    42fe:	bf00      	nop
    4300:	40000800 	.word	0x40000800
    4304:	000042c5 	.word	0x000042c5

00004308 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4308:	b480      	push	{r7}
    430a:	b083      	sub	sp, #12
    430c:	af00      	add	r7, sp, #0
    430e:	6078      	str	r0, [r7, #4]
    4310:	460b      	mov	r3, r1
    4312:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4314:	687b      	ldr	r3, [r7, #4]
    4316:	78fa      	ldrb	r2, [r7, #3]
    4318:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    431a:	bf00      	nop
    431c:	370c      	adds	r7, #12
    431e:	46bd      	mov	sp, r7
    4320:	f85d 7b04 	ldr.w	r7, [sp], #4
    4324:	4770      	bx	lr

00004326 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4326:	b480      	push	{r7}
    4328:	b083      	sub	sp, #12
    432a:	af00      	add	r7, sp, #0
    432c:	6078      	str	r0, [r7, #4]
    432e:	460b      	mov	r3, r1
    4330:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	887a      	ldrh	r2, [r7, #2]
    4336:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4338:	bf00      	nop
    433a:	370c      	adds	r7, #12
    433c:	46bd      	mov	sp, r7
    433e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4342:	4770      	bx	lr

00004344 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4344:	b480      	push	{r7}
    4346:	b083      	sub	sp, #12
    4348:	af00      	add	r7, sp, #0
    434a:	6078      	str	r0, [r7, #4]
    434c:	460b      	mov	r3, r1
    434e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4350:	687b      	ldr	r3, [r7, #4]
    4352:	78fa      	ldrb	r2, [r7, #3]
    4354:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4356:	bf00      	nop
    4358:	370c      	adds	r7, #12
    435a:	46bd      	mov	sp, r7
    435c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4360:	4770      	bx	lr

00004362 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4362:	b480      	push	{r7}
    4364:	b083      	sub	sp, #12
    4366:	af00      	add	r7, sp, #0
    4368:	6078      	str	r0, [r7, #4]
    436a:	460b      	mov	r3, r1
    436c:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    436e:	687b      	ldr	r3, [r7, #4]
    4370:	78fa      	ldrb	r2, [r7, #3]
    4372:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4374:	bf00      	nop
    4376:	370c      	adds	r7, #12
    4378:	46bd      	mov	sp, r7
    437a:	f85d 7b04 	ldr.w	r7, [sp], #4
    437e:	4770      	bx	lr

00004380 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4380:	b480      	push	{r7}
    4382:	b085      	sub	sp, #20
    4384:	af00      	add	r7, sp, #0
    4386:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    4388:	687b      	ldr	r3, [r7, #4]
    438a:	69db      	ldr	r3, [r3, #28]
    438c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    438e:	68fb      	ldr	r3, [r7, #12]
    4390:	0a1b      	lsrs	r3, r3, #8
    4392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4396:	60fb      	str	r3, [r7, #12]
	return tmp;
    4398:	68fb      	ldr	r3, [r7, #12]
}
    439a:	4618      	mov	r0, r3
    439c:	3714      	adds	r7, #20
    439e:	46bd      	mov	sp, r7
    43a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    43a4:	4770      	bx	lr

000043a6 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    43a6:	b480      	push	{r7}
    43a8:	b083      	sub	sp, #12
    43aa:	af00      	add	r7, sp, #0
    43ac:	6078      	str	r0, [r7, #4]
    43ae:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	683a      	ldr	r2, [r7, #0]
    43b4:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    43b6:	bf00      	nop
    43b8:	370c      	adds	r7, #12
    43ba:	46bd      	mov	sp, r7
    43bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    43c0:	4770      	bx	lr
	...

000043c4 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    43c4:	b580      	push	{r7, lr}
    43c6:	b082      	sub	sp, #8
    43c8:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    43ca:	4b13      	ldr	r3, [pc, #76]	; (4418 <_osc32kctrl_init_sources+0x54>)
    43cc:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    43ce:	2300      	movs	r3, #0
    43d0:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    43d2:	f242 018e 	movw	r1, #8334	; 0x208e
    43d6:	6878      	ldr	r0, [r7, #4]
    43d8:	4b10      	ldr	r3, [pc, #64]	; (441c <_osc32kctrl_init_sources+0x58>)
    43da:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    43dc:	2100      	movs	r1, #0
    43de:	6878      	ldr	r0, [r7, #4]
    43e0:	4b0f      	ldr	r3, [pc, #60]	; (4420 <_osc32kctrl_init_sources+0x5c>)
    43e2:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    43e4:	2100      	movs	r1, #0
    43e6:	6878      	ldr	r0, [r7, #4]
    43e8:	4b0e      	ldr	r3, [pc, #56]	; (4424 <_osc32kctrl_init_sources+0x60>)
    43ea:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    43ec:	6878      	ldr	r0, [r7, #4]
    43ee:	4b0e      	ldr	r3, [pc, #56]	; (4428 <_osc32kctrl_init_sources+0x64>)
    43f0:	4798      	blx	r3
    43f2:	4603      	mov	r3, r0
    43f4:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    43f6:	887b      	ldrh	r3, [r7, #2]
    43f8:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    43fa:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    43fe:	4619      	mov	r1, r3
    4400:	6878      	ldr	r0, [r7, #4]
    4402:	4b0a      	ldr	r3, [pc, #40]	; (442c <_osc32kctrl_init_sources+0x68>)
    4404:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4406:	2100      	movs	r1, #0
    4408:	6878      	ldr	r0, [r7, #4]
    440a:	4b09      	ldr	r3, [pc, #36]	; (4430 <_osc32kctrl_init_sources+0x6c>)
    440c:	4798      	blx	r3
	(void)calib;
}
    440e:	bf00      	nop
    4410:	3708      	adds	r7, #8
    4412:	46bd      	mov	sp, r7
    4414:	bd80      	pop	{r7, pc}
    4416:	bf00      	nop
    4418:	40001400 	.word	0x40001400
    441c:	00004327 	.word	0x00004327
    4420:	00004345 	.word	0x00004345
    4424:	00004363 	.word	0x00004363
    4428:	00004381 	.word	0x00004381
    442c:	000043a7 	.word	0x000043a7
    4430:	00004309 	.word	0x00004309

00004434 <hri_gclk_wait_for_sync>:
{
    4434:	b480      	push	{r7}
    4436:	b083      	sub	sp, #12
    4438:	af00      	add	r7, sp, #0
    443a:	6078      	str	r0, [r7, #4]
    443c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    443e:	bf00      	nop
    4440:	687b      	ldr	r3, [r7, #4]
    4442:	685a      	ldr	r2, [r3, #4]
    4444:	683b      	ldr	r3, [r7, #0]
    4446:	4013      	ands	r3, r2
    4448:	2b00      	cmp	r3, #0
    444a:	d1f9      	bne.n	4440 <hri_gclk_wait_for_sync+0xc>
}
    444c:	bf00      	nop
    444e:	370c      	adds	r7, #12
    4450:	46bd      	mov	sp, r7
    4452:	f85d 7b04 	ldr.w	r7, [sp], #4
    4456:	4770      	bx	lr

00004458 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4458:	b480      	push	{r7}
    445a:	b083      	sub	sp, #12
    445c:	af00      	add	r7, sp, #0
    445e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4460:	687b      	ldr	r3, [r7, #4]
    4462:	685b      	ldr	r3, [r3, #4]
    4464:	089b      	lsrs	r3, r3, #2
    4466:	f003 0301 	and.w	r3, r3, #1
    446a:	2b00      	cmp	r3, #0
    446c:	bf14      	ite	ne
    446e:	2301      	movne	r3, #1
    4470:	2300      	moveq	r3, #0
    4472:	b2db      	uxtb	r3, r3
}
    4474:	4618      	mov	r0, r3
    4476:	370c      	adds	r7, #12
    4478:	46bd      	mov	sp, r7
    447a:	f85d 7b04 	ldr.w	r7, [sp], #4
    447e:	4770      	bx	lr

00004480 <hri_gclk_read_SYNCBUSY_reg>:
{
    4480:	b480      	push	{r7}
    4482:	b083      	sub	sp, #12
    4484:	af00      	add	r7, sp, #0
    4486:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4488:	687b      	ldr	r3, [r7, #4]
    448a:	685b      	ldr	r3, [r3, #4]
}
    448c:	4618      	mov	r0, r3
    448e:	370c      	adds	r7, #12
    4490:	46bd      	mov	sp, r7
    4492:	f85d 7b04 	ldr.w	r7, [sp], #4
    4496:	4770      	bx	lr

00004498 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4498:	b580      	push	{r7, lr}
    449a:	b086      	sub	sp, #24
    449c:	af00      	add	r7, sp, #0
    449e:	60f8      	str	r0, [r7, #12]
    44a0:	460b      	mov	r3, r1
    44a2:	607a      	str	r2, [r7, #4]
    44a4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    44a6:	7afa      	ldrb	r2, [r7, #11]
    44a8:	68fb      	ldr	r3, [r7, #12]
    44aa:	3208      	adds	r2, #8
    44ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    44b0:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    44b2:	697b      	ldr	r3, [r7, #20]
    44b4:	f023 030f 	bic.w	r3, r3, #15
    44b8:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    44ba:	687b      	ldr	r3, [r7, #4]
    44bc:	f003 030f 	and.w	r3, r3, #15
    44c0:	697a      	ldr	r2, [r7, #20]
    44c2:	4313      	orrs	r3, r2
    44c4:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    44c6:	7afa      	ldrb	r2, [r7, #11]
    44c8:	68fb      	ldr	r3, [r7, #12]
    44ca:	3208      	adds	r2, #8
    44cc:	6979      	ldr	r1, [r7, #20]
    44ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    44d2:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    44d6:	68f8      	ldr	r0, [r7, #12]
    44d8:	4b02      	ldr	r3, [pc, #8]	; (44e4 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    44da:	4798      	blx	r3
}
    44dc:	bf00      	nop
    44de:	3718      	adds	r7, #24
    44e0:	46bd      	mov	sp, r7
    44e2:	bd80      	pop	{r7, pc}
    44e4:	00004435 	.word	0x00004435

000044e8 <hri_gclk_write_PCHCTRL_reg>:
{
    44e8:	b480      	push	{r7}
    44ea:	b085      	sub	sp, #20
    44ec:	af00      	add	r7, sp, #0
    44ee:	60f8      	str	r0, [r7, #12]
    44f0:	460b      	mov	r3, r1
    44f2:	607a      	str	r2, [r7, #4]
    44f4:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    44f6:	7afa      	ldrb	r2, [r7, #11]
    44f8:	68fb      	ldr	r3, [r7, #12]
    44fa:	3220      	adds	r2, #32
    44fc:	6879      	ldr	r1, [r7, #4]
    44fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4502:	bf00      	nop
    4504:	3714      	adds	r7, #20
    4506:	46bd      	mov	sp, r7
    4508:	f85d 7b04 	ldr.w	r7, [sp], #4
    450c:	4770      	bx	lr

0000450e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    450e:	b480      	push	{r7}
    4510:	b085      	sub	sp, #20
    4512:	af00      	add	r7, sp, #0
    4514:	60f8      	str	r0, [r7, #12]
    4516:	460b      	mov	r3, r1
    4518:	607a      	str	r2, [r7, #4]
    451a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    451c:	bf00      	nop
    451e:	7afa      	ldrb	r2, [r7, #11]
    4520:	68f9      	ldr	r1, [r7, #12]
    4522:	4613      	mov	r3, r2
    4524:	009b      	lsls	r3, r3, #2
    4526:	4413      	add	r3, r2
    4528:	009b      	lsls	r3, r3, #2
    452a:	440b      	add	r3, r1
    452c:	333c      	adds	r3, #60	; 0x3c
    452e:	681a      	ldr	r2, [r3, #0]
    4530:	687b      	ldr	r3, [r7, #4]
    4532:	4013      	ands	r3, r2
    4534:	2b00      	cmp	r3, #0
    4536:	d1f2      	bne.n	451e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4538:	bf00      	nop
    453a:	3714      	adds	r7, #20
    453c:	46bd      	mov	sp, r7
    453e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4542:	4770      	bx	lr

00004544 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4544:	b480      	push	{r7}
    4546:	b083      	sub	sp, #12
    4548:	af00      	add	r7, sp, #0
    454a:	6078      	str	r0, [r7, #4]
    454c:	460b      	mov	r3, r1
    454e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4550:	78fa      	ldrb	r2, [r7, #3]
    4552:	6879      	ldr	r1, [r7, #4]
    4554:	4613      	mov	r3, r2
    4556:	009b      	lsls	r3, r3, #2
    4558:	4413      	add	r3, r2
    455a:	009b      	lsls	r3, r3, #2
    455c:	440b      	add	r3, r1
    455e:	3340      	adds	r3, #64	; 0x40
    4560:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4562:	f003 0301 	and.w	r3, r3, #1
    4566:	2b00      	cmp	r3, #0
    4568:	bf14      	ite	ne
    456a:	2301      	movne	r3, #1
    456c:	2300      	moveq	r3, #0
    456e:	b2db      	uxtb	r3, r3
}
    4570:	4618      	mov	r0, r3
    4572:	370c      	adds	r7, #12
    4574:	46bd      	mov	sp, r7
    4576:	f85d 7b04 	ldr.w	r7, [sp], #4
    457a:	4770      	bx	lr

0000457c <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    457c:	b480      	push	{r7}
    457e:	b083      	sub	sp, #12
    4580:	af00      	add	r7, sp, #0
    4582:	6078      	str	r0, [r7, #4]
    4584:	460b      	mov	r3, r1
    4586:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4588:	78fa      	ldrb	r2, [r7, #3]
    458a:	6879      	ldr	r1, [r7, #4]
    458c:	4613      	mov	r3, r2
    458e:	009b      	lsls	r3, r3, #2
    4590:	4413      	add	r3, r2
    4592:	009b      	lsls	r3, r3, #2
    4594:	440b      	add	r3, r1
    4596:	3340      	adds	r3, #64	; 0x40
    4598:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    459a:	085b      	lsrs	r3, r3, #1
    459c:	f003 0301 	and.w	r3, r3, #1
    45a0:	2b00      	cmp	r3, #0
    45a2:	bf14      	ite	ne
    45a4:	2301      	movne	r3, #1
    45a6:	2300      	moveq	r3, #0
    45a8:	b2db      	uxtb	r3, r3
}
    45aa:	4618      	mov	r0, r3
    45ac:	370c      	adds	r7, #12
    45ae:	46bd      	mov	sp, r7
    45b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45b4:	4770      	bx	lr
	...

000045b8 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    45b8:	b580      	push	{r7, lr}
    45ba:	b082      	sub	sp, #8
    45bc:	af00      	add	r7, sp, #0
    45be:	6078      	str	r0, [r7, #4]
    45c0:	460b      	mov	r3, r1
    45c2:	70fb      	strb	r3, [r7, #3]
    45c4:	4613      	mov	r3, r2
    45c6:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    45c8:	78fa      	ldrb	r2, [r7, #3]
    45ca:	6879      	ldr	r1, [r7, #4]
    45cc:	4613      	mov	r3, r2
    45ce:	009b      	lsls	r3, r3, #2
    45d0:	4413      	add	r3, r2
    45d2:	009b      	lsls	r3, r3, #2
    45d4:	440b      	add	r3, r1
    45d6:	3330      	adds	r3, #48	; 0x30
    45d8:	78ba      	ldrb	r2, [r7, #2]
    45da:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    45dc:	78fb      	ldrb	r3, [r7, #3]
    45de:	2202      	movs	r2, #2
    45e0:	4619      	mov	r1, r3
    45e2:	6878      	ldr	r0, [r7, #4]
    45e4:	4b02      	ldr	r3, [pc, #8]	; (45f0 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    45e6:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    45e8:	bf00      	nop
    45ea:	3708      	adds	r7, #8
    45ec:	46bd      	mov	sp, r7
    45ee:	bd80      	pop	{r7, pc}
    45f0:	0000450f 	.word	0x0000450f

000045f4 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    45f4:	b580      	push	{r7, lr}
    45f6:	b084      	sub	sp, #16
    45f8:	af00      	add	r7, sp, #0
    45fa:	60f8      	str	r0, [r7, #12]
    45fc:	460b      	mov	r3, r1
    45fe:	607a      	str	r2, [r7, #4]
    4600:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4602:	7afa      	ldrb	r2, [r7, #11]
    4604:	68f9      	ldr	r1, [r7, #12]
    4606:	4613      	mov	r3, r2
    4608:	009b      	lsls	r3, r3, #2
    460a:	4413      	add	r3, r2
    460c:	009b      	lsls	r3, r3, #2
    460e:	440b      	add	r3, r1
    4610:	3334      	adds	r3, #52	; 0x34
    4612:	687a      	ldr	r2, [r7, #4]
    4614:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4616:	7afb      	ldrb	r3, [r7, #11]
    4618:	2206      	movs	r2, #6
    461a:	4619      	mov	r1, r3
    461c:	68f8      	ldr	r0, [r7, #12]
    461e:	4b03      	ldr	r3, [pc, #12]	; (462c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4620:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4622:	bf00      	nop
    4624:	3710      	adds	r7, #16
    4626:	46bd      	mov	sp, r7
    4628:	bd80      	pop	{r7, pc}
    462a:	bf00      	nop
    462c:	0000450f 	.word	0x0000450f

00004630 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4630:	b480      	push	{r7}
    4632:	b085      	sub	sp, #20
    4634:	af00      	add	r7, sp, #0
    4636:	60f8      	str	r0, [r7, #12]
    4638:	460b      	mov	r3, r1
    463a:	607a      	str	r2, [r7, #4]
    463c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    463e:	7afa      	ldrb	r2, [r7, #11]
    4640:	68f9      	ldr	r1, [r7, #12]
    4642:	4613      	mov	r3, r2
    4644:	009b      	lsls	r3, r3, #2
    4646:	4413      	add	r3, r2
    4648:	009b      	lsls	r3, r3, #2
    464a:	440b      	add	r3, r1
    464c:	3338      	adds	r3, #56	; 0x38
    464e:	687a      	ldr	r2, [r7, #4]
    4650:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4652:	bf00      	nop
    4654:	3714      	adds	r7, #20
    4656:	46bd      	mov	sp, r7
    4658:	f85d 7b04 	ldr.w	r7, [sp], #4
    465c:	4770      	bx	lr

0000465e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    465e:	b480      	push	{r7}
    4660:	b083      	sub	sp, #12
    4662:	af00      	add	r7, sp, #0
    4664:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4666:	687b      	ldr	r3, [r7, #4]
    4668:	691b      	ldr	r3, [r3, #16]
    466a:	085b      	lsrs	r3, r3, #1
    466c:	f003 0301 	and.w	r3, r3, #1
    4670:	2b00      	cmp	r3, #0
    4672:	bf14      	ite	ne
    4674:	2301      	movne	r3, #1
    4676:	2300      	moveq	r3, #0
    4678:	b2db      	uxtb	r3, r3
}
    467a:	4618      	mov	r0, r3
    467c:	370c      	adds	r7, #12
    467e:	46bd      	mov	sp, r7
    4680:	f85d 7b04 	ldr.w	r7, [sp], #4
    4684:	4770      	bx	lr

00004686 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4686:	b480      	push	{r7}
    4688:	b083      	sub	sp, #12
    468a:	af00      	add	r7, sp, #0
    468c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    468e:	687b      	ldr	r3, [r7, #4]
    4690:	691b      	ldr	r3, [r3, #16]
    4692:	0a1b      	lsrs	r3, r3, #8
    4694:	f003 0301 	and.w	r3, r3, #1
    4698:	2b00      	cmp	r3, #0
    469a:	bf14      	ite	ne
    469c:	2301      	movne	r3, #1
    469e:	2300      	moveq	r3, #0
    46a0:	b2db      	uxtb	r3, r3
}
    46a2:	4618      	mov	r0, r3
    46a4:	370c      	adds	r7, #12
    46a6:	46bd      	mov	sp, r7
    46a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ac:	4770      	bx	lr

000046ae <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    46ae:	b480      	push	{r7}
    46b0:	b085      	sub	sp, #20
    46b2:	af00      	add	r7, sp, #0
    46b4:	6078      	str	r0, [r7, #4]
    46b6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	691b      	ldr	r3, [r3, #16]
    46bc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    46be:	68fa      	ldr	r2, [r7, #12]
    46c0:	683b      	ldr	r3, [r7, #0]
    46c2:	4013      	ands	r3, r2
    46c4:	60fb      	str	r3, [r7, #12]
	return tmp;
    46c6:	68fb      	ldr	r3, [r7, #12]
}
    46c8:	4618      	mov	r0, r3
    46ca:	3714      	adds	r7, #20
    46cc:	46bd      	mov	sp, r7
    46ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    46d2:	4770      	bx	lr

000046d4 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    46d4:	b480      	push	{r7}
    46d6:	b085      	sub	sp, #20
    46d8:	af00      	add	r7, sp, #0
    46da:	60f8      	str	r0, [r7, #12]
    46dc:	460b      	mov	r3, r1
    46de:	607a      	str	r2, [r7, #4]
    46e0:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    46e2:	7afb      	ldrb	r3, [r7, #11]
    46e4:	68fa      	ldr	r2, [r7, #12]
    46e6:	3304      	adds	r3, #4
    46e8:	009b      	lsls	r3, r3, #2
    46ea:	4413      	add	r3, r2
    46ec:	687a      	ldr	r2, [r7, #4]
    46ee:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    46f0:	bf00      	nop
    46f2:	3714      	adds	r7, #20
    46f4:	46bd      	mov	sp, r7
    46f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    46fa:	4770      	bx	lr

000046fc <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    46fc:	b480      	push	{r7}
    46fe:	b083      	sub	sp, #12
    4700:	af00      	add	r7, sp, #0
    4702:	6078      	str	r0, [r7, #4]
    4704:	460b      	mov	r3, r1
    4706:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4708:	687b      	ldr	r3, [r7, #4]
    470a:	78fa      	ldrb	r2, [r7, #3]
    470c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    470e:	bf00      	nop
    4710:	370c      	adds	r7, #12
    4712:	46bd      	mov	sp, r7
    4714:	f85d 7b04 	ldr.w	r7, [sp], #4
    4718:	4770      	bx	lr

0000471a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    471a:	b480      	push	{r7}
    471c:	b085      	sub	sp, #20
    471e:	af00      	add	r7, sp, #0
    4720:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4722:	687b      	ldr	r3, [r7, #4]
    4724:	f893 3020 	ldrb.w	r3, [r3, #32]
    4728:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    472a:	7bfb      	ldrb	r3, [r7, #15]
    472c:	f003 0301 	and.w	r3, r3, #1
    4730:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4732:	7bfb      	ldrb	r3, [r7, #15]
    4734:	2b00      	cmp	r3, #0
    4736:	bf14      	ite	ne
    4738:	2301      	movne	r3, #1
    473a:	2300      	moveq	r3, #0
    473c:	b2db      	uxtb	r3, r3
}
    473e:	4618      	mov	r0, r3
    4740:	3714      	adds	r7, #20
    4742:	46bd      	mov	sp, r7
    4744:	f85d 7b04 	ldr.w	r7, [sp], #4
    4748:	4770      	bx	lr

0000474a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    474a:	b480      	push	{r7}
    474c:	b083      	sub	sp, #12
    474e:	af00      	add	r7, sp, #0
    4750:	6078      	str	r0, [r7, #4]
    4752:	460b      	mov	r3, r1
    4754:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4756:	687b      	ldr	r3, [r7, #4]
    4758:	78fa      	ldrb	r2, [r7, #3]
    475a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    475e:	bf00      	nop
    4760:	370c      	adds	r7, #12
    4762:	46bd      	mov	sp, r7
    4764:	f85d 7b04 	ldr.w	r7, [sp], #4
    4768:	4770      	bx	lr

0000476a <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    476a:	b480      	push	{r7}
    476c:	b083      	sub	sp, #12
    476e:	af00      	add	r7, sp, #0
    4770:	6078      	str	r0, [r7, #4]
    4772:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4774:	687b      	ldr	r3, [r7, #4]
    4776:	683a      	ldr	r2, [r7, #0]
    4778:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    477a:	bf00      	nop
    477c:	370c      	adds	r7, #12
    477e:	46bd      	mov	sp, r7
    4780:	f85d 7b04 	ldr.w	r7, [sp], #4
    4784:	4770      	bx	lr

00004786 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4786:	b480      	push	{r7}
    4788:	b083      	sub	sp, #12
    478a:	af00      	add	r7, sp, #0
    478c:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    478e:	687b      	ldr	r3, [r7, #4]
    4790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4792:	4618      	mov	r0, r3
    4794:	370c      	adds	r7, #12
    4796:	46bd      	mov	sp, r7
    4798:	f85d 7b04 	ldr.w	r7, [sp], #4
    479c:	4770      	bx	lr

0000479e <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    479e:	b480      	push	{r7}
    47a0:	b083      	sub	sp, #12
    47a2:	af00      	add	r7, sp, #0
    47a4:	6078      	str	r0, [r7, #4]
    47a6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    47a8:	687b      	ldr	r3, [r7, #4]
    47aa:	683a      	ldr	r2, [r7, #0]
    47ac:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    47ae:	bf00      	nop
    47b0:	370c      	adds	r7, #12
    47b2:	46bd      	mov	sp, r7
    47b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47b8:	4770      	bx	lr

000047ba <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    47ba:	b480      	push	{r7}
    47bc:	b085      	sub	sp, #20
    47be:	af00      	add	r7, sp, #0
    47c0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    47c8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    47ca:	7bfb      	ldrb	r3, [r7, #15]
    47cc:	085b      	lsrs	r3, r3, #1
    47ce:	b2db      	uxtb	r3, r3
    47d0:	f003 0301 	and.w	r3, r3, #1
    47d4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    47d6:	7bfb      	ldrb	r3, [r7, #15]
    47d8:	2b00      	cmp	r3, #0
    47da:	bf14      	ite	ne
    47dc:	2301      	movne	r3, #1
    47de:	2300      	moveq	r3, #0
    47e0:	b2db      	uxtb	r3, r3
}
    47e2:	4618      	mov	r0, r3
    47e4:	3714      	adds	r7, #20
    47e6:	46bd      	mov	sp, r7
    47e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    47ec:	4770      	bx	lr

000047ee <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    47ee:	b480      	push	{r7}
    47f0:	b085      	sub	sp, #20
    47f2:	af00      	add	r7, sp, #0
    47f4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    47f6:	687b      	ldr	r3, [r7, #4]
    47f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    47fc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    47fe:	7bfb      	ldrb	r3, [r7, #15]
    4800:	089b      	lsrs	r3, r3, #2
    4802:	b2db      	uxtb	r3, r3
    4804:	f003 0301 	and.w	r3, r3, #1
    4808:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    480a:	7bfb      	ldrb	r3, [r7, #15]
    480c:	2b00      	cmp	r3, #0
    480e:	bf14      	ite	ne
    4810:	2301      	movne	r3, #1
    4812:	2300      	moveq	r3, #0
    4814:	b2db      	uxtb	r3, r3
}
    4816:	4618      	mov	r0, r3
    4818:	3714      	adds	r7, #20
    481a:	46bd      	mov	sp, r7
    481c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4820:	4770      	bx	lr

00004822 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4822:	b480      	push	{r7}
    4824:	b085      	sub	sp, #20
    4826:	af00      	add	r7, sp, #0
    4828:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    482a:	687b      	ldr	r3, [r7, #4]
    482c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4830:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4832:	7bfb      	ldrb	r3, [r7, #15]
    4834:	08db      	lsrs	r3, r3, #3
    4836:	b2db      	uxtb	r3, r3
    4838:	f003 0301 	and.w	r3, r3, #1
    483c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    483e:	7bfb      	ldrb	r3, [r7, #15]
    4840:	2b00      	cmp	r3, #0
    4842:	bf14      	ite	ne
    4844:	2301      	movne	r3, #1
    4846:	2300      	moveq	r3, #0
    4848:	b2db      	uxtb	r3, r3
}
    484a:	4618      	mov	r0, r3
    484c:	3714      	adds	r7, #20
    484e:	46bd      	mov	sp, r7
    4850:	f85d 7b04 	ldr.w	r7, [sp], #4
    4854:	4770      	bx	lr

00004856 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4856:	b480      	push	{r7}
    4858:	b085      	sub	sp, #20
    485a:	af00      	add	r7, sp, #0
    485c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    485e:	687b      	ldr	r3, [r7, #4]
    4860:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4864:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4866:	7bfb      	ldrb	r3, [r7, #15]
    4868:	091b      	lsrs	r3, r3, #4
    486a:	b2db      	uxtb	r3, r3
    486c:	f003 0301 	and.w	r3, r3, #1
    4870:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4872:	7bfb      	ldrb	r3, [r7, #15]
    4874:	2b00      	cmp	r3, #0
    4876:	bf14      	ite	ne
    4878:	2301      	movne	r3, #1
    487a:	2300      	moveq	r3, #0
    487c:	b2db      	uxtb	r3, r3
}
    487e:	4618      	mov	r0, r3
    4880:	3714      	adds	r7, #20
    4882:	46bd      	mov	sp, r7
    4884:	f85d 7b04 	ldr.w	r7, [sp], #4
    4888:	4770      	bx	lr
	...

0000488c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    488c:	b580      	push	{r7, lr}
    488e:	b082      	sub	sp, #8
    4890:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4892:	4b0a      	ldr	r3, [pc, #40]	; (48bc <_oscctrl_init_sources+0x30>)
    4894:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    4896:	4a0a      	ldr	r2, [pc, #40]	; (48c0 <_oscctrl_init_sources+0x34>)
    4898:	2101      	movs	r1, #1
    489a:	6878      	ldr	r0, [r7, #4]
    489c:	4b09      	ldr	r3, [pc, #36]	; (48c4 <_oscctrl_init_sources+0x38>)
    489e:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    48a0:	bf00      	nop
    48a2:	6878      	ldr	r0, [r7, #4]
    48a4:	4b08      	ldr	r3, [pc, #32]	; (48c8 <_oscctrl_init_sources+0x3c>)
    48a6:	4798      	blx	r3
    48a8:	4603      	mov	r3, r0
    48aa:	f083 0301 	eor.w	r3, r3, #1
    48ae:	b2db      	uxtb	r3, r3
    48b0:	2b00      	cmp	r3, #0
    48b2:	d1f6      	bne.n	48a2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    48b4:	bf00      	nop
    48b6:	3708      	adds	r7, #8
    48b8:	46bd      	mov	sp, r7
    48ba:	bd80      	pop	{r7, pc}
    48bc:	40001000 	.word	0x40001000
    48c0:	03002606 	.word	0x03002606
    48c4:	000046d5 	.word	0x000046d5
    48c8:	0000465f 	.word	0x0000465f

000048cc <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    48cc:	b580      	push	{r7, lr}
    48ce:	b084      	sub	sp, #16
    48d0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    48d2:	4b6b      	ldr	r3, [pc, #428]	; (4a80 <_oscctrl_init_referenced_generators+0x1b4>)
    48d4:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    48d6:	2204      	movs	r2, #4
    48d8:	2100      	movs	r1, #0
    48da:	486a      	ldr	r0, [pc, #424]	; (4a84 <_oscctrl_init_referenced_generators+0x1b8>)
    48dc:	4b6a      	ldr	r3, [pc, #424]	; (4a88 <_oscctrl_init_referenced_generators+0x1bc>)
    48de:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    48e0:	bf00      	nop
    48e2:	4868      	ldr	r0, [pc, #416]	; (4a84 <_oscctrl_init_referenced_generators+0x1b8>)
    48e4:	4b69      	ldr	r3, [pc, #420]	; (4a8c <_oscctrl_init_referenced_generators+0x1c0>)
    48e6:	4798      	blx	r3
    48e8:	4603      	mov	r3, r0
    48ea:	2b00      	cmp	r3, #0
    48ec:	d1f9      	bne.n	48e2 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    48ee:	2100      	movs	r1, #0
    48f0:	68f8      	ldr	r0, [r7, #12]
    48f2:	4b67      	ldr	r3, [pc, #412]	; (4a90 <_oscctrl_init_referenced_generators+0x1c4>)
    48f4:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    48f6:	4967      	ldr	r1, [pc, #412]	; (4a94 <_oscctrl_init_referenced_generators+0x1c8>)
    48f8:	68f8      	ldr	r0, [r7, #12]
    48fa:	4b67      	ldr	r3, [pc, #412]	; (4a98 <_oscctrl_init_referenced_generators+0x1cc>)
    48fc:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    48fe:	bf00      	nop
    4900:	68f8      	ldr	r0, [r7, #12]
    4902:	4b66      	ldr	r3, [pc, #408]	; (4a9c <_oscctrl_init_referenced_generators+0x1d0>)
    4904:	4798      	blx	r3
    4906:	4603      	mov	r3, r0
    4908:	2b00      	cmp	r3, #0
    490a:	d1f9      	bne.n	4900 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    490c:	2100      	movs	r1, #0
    490e:	68f8      	ldr	r0, [r7, #12]
    4910:	4b63      	ldr	r3, [pc, #396]	; (4aa0 <_oscctrl_init_referenced_generators+0x1d4>)
    4912:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4914:	bf00      	nop
    4916:	68f8      	ldr	r0, [r7, #12]
    4918:	4b62      	ldr	r3, [pc, #392]	; (4aa4 <_oscctrl_init_referenced_generators+0x1d8>)
    491a:	4798      	blx	r3
    491c:	4603      	mov	r3, r0
    491e:	2b00      	cmp	r3, #0
    4920:	d1f9      	bne.n	4916 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    4922:	2302      	movs	r3, #2
    4924:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    4926:	7afb      	ldrb	r3, [r7, #11]
    4928:	4619      	mov	r1, r3
    492a:	68f8      	ldr	r0, [r7, #12]
    492c:	4b58      	ldr	r3, [pc, #352]	; (4a90 <_oscctrl_init_referenced_generators+0x1c4>)
    492e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    4930:	bf00      	nop
    4932:	68f8      	ldr	r0, [r7, #12]
    4934:	4b5c      	ldr	r3, [pc, #368]	; (4aa8 <_oscctrl_init_referenced_generators+0x1dc>)
    4936:	4798      	blx	r3
    4938:	4603      	mov	r3, r0
    493a:	2b00      	cmp	r3, #0
    493c:	d1f9      	bne.n	4932 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    493e:	68f8      	ldr	r0, [r7, #12]
    4940:	4b5a      	ldr	r3, [pc, #360]	; (4aac <_oscctrl_init_referenced_generators+0x1e0>)
    4942:	4798      	blx	r3
    4944:	4603      	mov	r3, r0
    4946:	4619      	mov	r1, r3
    4948:	68f8      	ldr	r0, [r7, #12]
    494a:	4b59      	ldr	r3, [pc, #356]	; (4ab0 <_oscctrl_init_referenced_generators+0x1e4>)
    494c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    494e:	bf00      	nop
    4950:	68f8      	ldr	r0, [r7, #12]
    4952:	4b58      	ldr	r3, [pc, #352]	; (4ab4 <_oscctrl_init_referenced_generators+0x1e8>)
    4954:	4798      	blx	r3
    4956:	4603      	mov	r3, r0
    4958:	2b00      	cmp	r3, #0
    495a:	d1f9      	bne.n	4950 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    495c:	2319      	movs	r3, #25
    495e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    4960:	7afb      	ldrb	r3, [r7, #11]
    4962:	4619      	mov	r1, r3
    4964:	68f8      	ldr	r0, [r7, #12]
    4966:	4b4e      	ldr	r3, [pc, #312]	; (4aa0 <_oscctrl_init_referenced_generators+0x1d4>)
    4968:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    496a:	bf00      	nop
    496c:	68f8      	ldr	r0, [r7, #12]
    496e:	4b4d      	ldr	r3, [pc, #308]	; (4aa4 <_oscctrl_init_referenced_generators+0x1d8>)
    4970:	4798      	blx	r3
    4972:	4603      	mov	r3, r0
    4974:	2b00      	cmp	r3, #0
    4976:	d1f9      	bne.n	496c <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    4978:	2245      	movs	r2, #69	; 0x45
    497a:	2101      	movs	r1, #1
    497c:	4841      	ldr	r0, [pc, #260]	; (4a84 <_oscctrl_init_referenced_generators+0x1b8>)
    497e:	4b4e      	ldr	r3, [pc, #312]	; (4ab8 <_oscctrl_init_referenced_generators+0x1ec>)
    4980:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4982:	223b      	movs	r2, #59	; 0x3b
    4984:	2100      	movs	r1, #0
    4986:	68f8      	ldr	r0, [r7, #12]
    4988:	4b4c      	ldr	r3, [pc, #304]	; (4abc <_oscctrl_init_referenced_generators+0x1f0>)
    498a:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    498c:	f44f 6201 	mov.w	r2, #2064	; 0x810
    4990:	2100      	movs	r1, #0
    4992:	68f8      	ldr	r0, [r7, #12]
    4994:	4b4a      	ldr	r3, [pc, #296]	; (4ac0 <_oscctrl_init_referenced_generators+0x1f4>)
    4996:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4998:	2202      	movs	r2, #2
    499a:	2100      	movs	r1, #0
    499c:	68f8      	ldr	r0, [r7, #12]
    499e:	4b49      	ldr	r3, [pc, #292]	; (4ac4 <_oscctrl_init_referenced_generators+0x1f8>)
    49a0:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    49a2:	4a49      	ldr	r2, [pc, #292]	; (4ac8 <_oscctrl_init_referenced_generators+0x1fc>)
    49a4:	2101      	movs	r1, #1
    49a6:	68f8      	ldr	r0, [r7, #12]
    49a8:	4b44      	ldr	r3, [pc, #272]	; (4abc <_oscctrl_init_referenced_generators+0x1f0>)
    49aa:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    49ac:	f44f 6203 	mov.w	r2, #2096	; 0x830
    49b0:	2101      	movs	r1, #1
    49b2:	68f8      	ldr	r0, [r7, #12]
    49b4:	4b42      	ldr	r3, [pc, #264]	; (4ac0 <_oscctrl_init_referenced_generators+0x1f4>)
    49b6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    49b8:	2202      	movs	r2, #2
    49ba:	2101      	movs	r1, #1
    49bc:	68f8      	ldr	r0, [r7, #12]
    49be:	4b41      	ldr	r3, [pc, #260]	; (4ac4 <_oscctrl_init_referenced_generators+0x1f8>)
    49c0:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    49c2:	68f8      	ldr	r0, [r7, #12]
    49c4:	4b41      	ldr	r3, [pc, #260]	; (4acc <_oscctrl_init_referenced_generators+0x200>)
    49c6:	4798      	blx	r3
    49c8:	4603      	mov	r3, r0
    49ca:	2b00      	cmp	r3, #0
    49cc:	d00c      	beq.n	49e8 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    49ce:	f44f 6310 	mov.w	r3, #2304	; 0x900
    49d2:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    49d4:	bf00      	nop
    49d6:	6879      	ldr	r1, [r7, #4]
    49d8:	68f8      	ldr	r0, [r7, #12]
    49da:	4b3d      	ldr	r3, [pc, #244]	; (4ad0 <_oscctrl_init_referenced_generators+0x204>)
    49dc:	4798      	blx	r3
    49de:	4602      	mov	r2, r0
    49e0:	687b      	ldr	r3, [r7, #4]
    49e2:	429a      	cmp	r2, r3
    49e4:	d1f7      	bne.n	49d6 <_oscctrl_init_referenced_generators+0x10a>
    49e6:	e009      	b.n	49fc <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    49e8:	bf00      	nop
    49ea:	68f8      	ldr	r0, [r7, #12]
    49ec:	4b39      	ldr	r3, [pc, #228]	; (4ad4 <_oscctrl_init_referenced_generators+0x208>)
    49ee:	4798      	blx	r3
    49f0:	4603      	mov	r3, r0
    49f2:	f083 0301 	eor.w	r3, r3, #1
    49f6:	b2db      	uxtb	r3, r3
    49f8:	2b00      	cmp	r3, #0
    49fa:	d1f6      	bne.n	49ea <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    49fc:	bf00      	nop
    49fe:	2100      	movs	r1, #0
    4a00:	68f8      	ldr	r0, [r7, #12]
    4a02:	4b35      	ldr	r3, [pc, #212]	; (4ad8 <_oscctrl_init_referenced_generators+0x20c>)
    4a04:	4798      	blx	r3
    4a06:	4603      	mov	r3, r0
    4a08:	f083 0301 	eor.w	r3, r3, #1
    4a0c:	b2db      	uxtb	r3, r3
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d009      	beq.n	4a26 <_oscctrl_init_referenced_generators+0x15a>
    4a12:	2100      	movs	r1, #0
    4a14:	68f8      	ldr	r0, [r7, #12]
    4a16:	4b31      	ldr	r3, [pc, #196]	; (4adc <_oscctrl_init_referenced_generators+0x210>)
    4a18:	4798      	blx	r3
    4a1a:	4603      	mov	r3, r0
    4a1c:	f083 0301 	eor.w	r3, r3, #1
    4a20:	b2db      	uxtb	r3, r3
    4a22:	2b00      	cmp	r3, #0
    4a24:	d1eb      	bne.n	49fe <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    4a26:	bf00      	nop
    4a28:	2101      	movs	r1, #1
    4a2a:	68f8      	ldr	r0, [r7, #12]
    4a2c:	4b2a      	ldr	r3, [pc, #168]	; (4ad8 <_oscctrl_init_referenced_generators+0x20c>)
    4a2e:	4798      	blx	r3
    4a30:	4603      	mov	r3, r0
    4a32:	f083 0301 	eor.w	r3, r3, #1
    4a36:	b2db      	uxtb	r3, r3
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d009      	beq.n	4a50 <_oscctrl_init_referenced_generators+0x184>
    4a3c:	2101      	movs	r1, #1
    4a3e:	68f8      	ldr	r0, [r7, #12]
    4a40:	4b26      	ldr	r3, [pc, #152]	; (4adc <_oscctrl_init_referenced_generators+0x210>)
    4a42:	4798      	blx	r3
    4a44:	4603      	mov	r3, r0
    4a46:	f083 0301 	eor.w	r3, r3, #1
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d1eb      	bne.n	4a28 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    4a50:	bf00      	nop
    4a52:	480c      	ldr	r0, [pc, #48]	; (4a84 <_oscctrl_init_referenced_generators+0x1b8>)
    4a54:	4b22      	ldr	r3, [pc, #136]	; (4ae0 <_oscctrl_init_referenced_generators+0x214>)
    4a56:	4798      	blx	r3
    4a58:	4603      	mov	r3, r0
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d1f9      	bne.n	4a52 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    4a5e:	2207      	movs	r2, #7
    4a60:	2100      	movs	r1, #0
    4a62:	4808      	ldr	r0, [pc, #32]	; (4a84 <_oscctrl_init_referenced_generators+0x1b8>)
    4a64:	4b08      	ldr	r3, [pc, #32]	; (4a88 <_oscctrl_init_referenced_generators+0x1bc>)
    4a66:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4a68:	bf00      	nop
    4a6a:	4806      	ldr	r0, [pc, #24]	; (4a84 <_oscctrl_init_referenced_generators+0x1b8>)
    4a6c:	4b07      	ldr	r3, [pc, #28]	; (4a8c <_oscctrl_init_referenced_generators+0x1c0>)
    4a6e:	4798      	blx	r3
    4a70:	4603      	mov	r3, r0
    4a72:	2b00      	cmp	r3, #0
    4a74:	d1f9      	bne.n	4a6a <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    4a76:	bf00      	nop
    4a78:	3710      	adds	r7, #16
    4a7a:	46bd      	mov	sp, r7
    4a7c:	bd80      	pop	{r7, pc}
    4a7e:	bf00      	nop
    4a80:	40001000 	.word	0x40001000
    4a84:	40001c00 	.word	0x40001c00
    4a88:	00004499 	.word	0x00004499
    4a8c:	00004459 	.word	0x00004459
    4a90:	000046fd 	.word	0x000046fd
    4a94:	0401bb80 	.word	0x0401bb80
    4a98:	0000479f 	.word	0x0000479f
    4a9c:	00004857 	.word	0x00004857
    4aa0:	0000474b 	.word	0x0000474b
    4aa4:	000047ef 	.word	0x000047ef
    4aa8:	000047bb 	.word	0x000047bb
    4aac:	00004787 	.word	0x00004787
    4ab0:	0000476b 	.word	0x0000476b
    4ab4:	00004823 	.word	0x00004823
    4ab8:	000044e9 	.word	0x000044e9
    4abc:	000045f5 	.word	0x000045f5
    4ac0:	00004631 	.word	0x00004631
    4ac4:	000045b9 	.word	0x000045b9
    4ac8:	000407a0 	.word	0x000407a0
    4acc:	0000471b 	.word	0x0000471b
    4ad0:	000046af 	.word	0x000046af
    4ad4:	00004687 	.word	0x00004687
    4ad8:	00004545 	.word	0x00004545
    4adc:	0000457d 	.word	0x0000457d
    4ae0:	00004481 	.word	0x00004481

00004ae4 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    4ae4:	b480      	push	{r7}
    4ae6:	b083      	sub	sp, #12
    4ae8:	af00      	add	r7, sp, #0
    4aea:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	69db      	ldr	r3, [r3, #28]
    4af0:	0a9b      	lsrs	r3, r3, #10
    4af2:	f003 0301 	and.w	r3, r3, #1
    4af6:	2b00      	cmp	r3, #0
    4af8:	bf14      	ite	ne
    4afa:	2301      	movne	r3, #1
    4afc:	2300      	moveq	r3, #0
    4afe:	b2db      	uxtb	r3, r3
}
    4b00:	4618      	mov	r0, r3
    4b02:	370c      	adds	r7, #12
    4b04:	46bd      	mov	sp, r7
    4b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b0a:	4770      	bx	lr

00004b0c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    4b0c:	b480      	push	{r7}
    4b0e:	b083      	sub	sp, #12
    4b10:	af00      	add	r7, sp, #0
    4b12:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4b1a:	61da      	str	r2, [r3, #28]
}
    4b1c:	bf00      	nop
    4b1e:	370c      	adds	r7, #12
    4b20:	46bd      	mov	sp, r7
    4b22:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b26:	4770      	bx	lr

00004b28 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    4b28:	b480      	push	{r7}
    4b2a:	b083      	sub	sp, #12
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	6078      	str	r0, [r7, #4]
    4b30:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    4b32:	687b      	ldr	r3, [r7, #4]
    4b34:	683a      	ldr	r2, [r7, #0]
    4b36:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4b38:	bf00      	nop
    4b3a:	370c      	adds	r7, #12
    4b3c:	46bd      	mov	sp, r7
    4b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b42:	4770      	bx	lr

00004b44 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    4b44:	b480      	push	{r7}
    4b46:	b083      	sub	sp, #12
    4b48:	af00      	add	r7, sp, #0
    4b4a:	6078      	str	r0, [r7, #4]
    4b4c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	683a      	ldr	r2, [r7, #0]
    4b52:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4b54:	bf00      	nop
    4b56:	370c      	adds	r7, #12
    4b58:	46bd      	mov	sp, r7
    4b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b5e:	4770      	bx	lr

00004b60 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    4b60:	b480      	push	{r7}
    4b62:	b083      	sub	sp, #12
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
    4b68:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    4b6a:	687b      	ldr	r3, [r7, #4]
    4b6c:	683a      	ldr	r2, [r7, #0]
    4b6e:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4b70:	bf00      	nop
    4b72:	370c      	adds	r7, #12
    4b74:	46bd      	mov	sp, r7
    4b76:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b7a:	4770      	bx	lr

00004b7c <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    4b7c:	b480      	push	{r7}
    4b7e:	b083      	sub	sp, #12
    4b80:	af00      	add	r7, sp, #0
    4b82:	6078      	str	r0, [r7, #4]
    4b84:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    4b86:	687b      	ldr	r3, [r7, #4]
    4b88:	683a      	ldr	r2, [r7, #0]
    4b8a:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4b8c:	bf00      	nop
    4b8e:	370c      	adds	r7, #12
    4b90:	46bd      	mov	sp, r7
    4b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b96:	4770      	bx	lr

00004b98 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    4b98:	b480      	push	{r7}
    4b9a:	b085      	sub	sp, #20
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	6078      	str	r0, [r7, #4]
    4ba0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    4ba2:	687b      	ldr	r3, [r7, #4]
    4ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4ba6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    4ba8:	68fb      	ldr	r3, [r7, #12]
    4baa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    4bae:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    4bb0:	683b      	ldr	r3, [r7, #0]
    4bb2:	b2db      	uxtb	r3, r3
    4bb4:	68fa      	ldr	r2, [r7, #12]
    4bb6:	4313      	orrs	r3, r2
    4bb8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    4bba:	687b      	ldr	r3, [r7, #4]
    4bbc:	68fa      	ldr	r2, [r7, #12]
    4bbe:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4bc0:	bf00      	nop
    4bc2:	3714      	adds	r7, #20
    4bc4:	46bd      	mov	sp, r7
    4bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bca:	4770      	bx	lr

00004bcc <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    4bcc:	b480      	push	{r7}
    4bce:	b085      	sub	sp, #20
    4bd0:	af00      	add	r7, sp, #0
    4bd2:	6078      	str	r0, [r7, #4]
    4bd4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    4bd6:	687b      	ldr	r3, [r7, #4]
    4bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4bda:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    4bdc:	68fb      	ldr	r3, [r7, #12]
    4bde:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    4be2:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    4be4:	683b      	ldr	r3, [r7, #0]
    4be6:	041b      	lsls	r3, r3, #16
    4be8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    4bec:	68fa      	ldr	r2, [r7, #12]
    4bee:	4313      	orrs	r3, r2
    4bf0:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    4bf2:	687b      	ldr	r3, [r7, #4]
    4bf4:	68fa      	ldr	r2, [r7, #12]
    4bf6:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4bf8:	bf00      	nop
    4bfa:	3714      	adds	r7, #20
    4bfc:	46bd      	mov	sp, r7
    4bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c02:	4770      	bx	lr

00004c04 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    4c04:	b480      	push	{r7}
    4c06:	b083      	sub	sp, #12
    4c08:	af00      	add	r7, sp, #0
    4c0a:	6078      	str	r0, [r7, #4]
    4c0c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    4c0e:	687b      	ldr	r3, [r7, #4]
    4c10:	683a      	ldr	r2, [r7, #0]
    4c12:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    4c14:	bf00      	nop
    4c16:	370c      	adds	r7, #12
    4c18:	46bd      	mov	sp, r7
    4c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c1e:	4770      	bx	lr

00004c20 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    4c20:	b480      	push	{r7}
    4c22:	b083      	sub	sp, #12
    4c24:	af00      	add	r7, sp, #0
    4c26:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    4c28:	687b      	ldr	r3, [r7, #4]
    4c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    4c2c:	4618      	mov	r0, r3
    4c2e:	370c      	adds	r7, #12
    4c30:	46bd      	mov	sp, r7
    4c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c36:	4770      	bx	lr

00004c38 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    4c38:	b480      	push	{r7}
    4c3a:	b085      	sub	sp, #20
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	60f8      	str	r0, [r7, #12]
    4c40:	60b9      	str	r1, [r7, #8]
    4c42:	607a      	str	r2, [r7, #4]
	while (count--) {
    4c44:	e007      	b.n	4c56 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    4c46:	68fb      	ldr	r3, [r7, #12]
    4c48:	1c5a      	adds	r2, r3, #1
    4c4a:	60fa      	str	r2, [r7, #12]
    4c4c:	68ba      	ldr	r2, [r7, #8]
    4c4e:	1c51      	adds	r1, r2, #1
    4c50:	60b9      	str	r1, [r7, #8]
    4c52:	7812      	ldrb	r2, [r2, #0]
    4c54:	701a      	strb	r2, [r3, #0]
	while (count--) {
    4c56:	687b      	ldr	r3, [r7, #4]
    4c58:	1e5a      	subs	r2, r3, #1
    4c5a:	607a      	str	r2, [r7, #4]
    4c5c:	2b00      	cmp	r3, #0
    4c5e:	d1f2      	bne.n	4c46 <_qspi_memcpy+0xe>
	}
}
    4c60:	bf00      	nop
    4c62:	3714      	adds	r7, #20
    4c64:	46bd      	mov	sp, r7
    4c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c6a:	4770      	bx	lr

00004c6c <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    4c6c:	b580      	push	{r7, lr}
    4c6e:	b082      	sub	sp, #8
    4c70:	af00      	add	r7, sp, #0
    4c72:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    4c74:	4903      	ldr	r1, [pc, #12]	; (4c84 <_qspi_end_transfer+0x18>)
    4c76:	6878      	ldr	r0, [r7, #4]
    4c78:	4b03      	ldr	r3, [pc, #12]	; (4c88 <_qspi_end_transfer+0x1c>)
    4c7a:	4798      	blx	r3
}
    4c7c:	bf00      	nop
    4c7e:	3708      	adds	r7, #8
    4c80:	46bd      	mov	sp, r7
    4c82:	bd80      	pop	{r7, pc}
    4c84:	01000002 	.word	0x01000002
    4c88:	00004b29 	.word	0x00004b29

00004c8c <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    4c8c:	b580      	push	{r7, lr}
    4c8e:	b082      	sub	sp, #8
    4c90:	af00      	add	r7, sp, #0
    4c92:	6078      	str	r0, [r7, #4]
    4c94:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    4c96:	687b      	ldr	r3, [r7, #4]
    4c98:	2b00      	cmp	r3, #0
    4c9a:	d004      	beq.n	4ca6 <_qspi_sync_init+0x1a>
    4c9c:	683b      	ldr	r3, [r7, #0]
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d001      	beq.n	4ca6 <_qspi_sync_init+0x1a>
    4ca2:	2301      	movs	r3, #1
    4ca4:	e000      	b.n	4ca8 <_qspi_sync_init+0x1c>
    4ca6:	2300      	movs	r3, #0
    4ca8:	f003 0301 	and.w	r3, r3, #1
    4cac:	b2db      	uxtb	r3, r3
    4cae:	2240      	movs	r2, #64	; 0x40
    4cb0:	490c      	ldr	r1, [pc, #48]	; (4ce4 <_qspi_sync_init+0x58>)
    4cb2:	4618      	mov	r0, r3
    4cb4:	4b0c      	ldr	r3, [pc, #48]	; (4ce8 <_qspi_sync_init+0x5c>)
    4cb6:	4798      	blx	r3
	dev->prvt = hw;
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	683a      	ldr	r2, [r7, #0]
    4cbc:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    4cbe:	687b      	ldr	r3, [r7, #4]
    4cc0:	681b      	ldr	r3, [r3, #0]
    4cc2:	2101      	movs	r1, #1
    4cc4:	4618      	mov	r0, r3
    4cc6:	4b09      	ldr	r3, [pc, #36]	; (4cec <_qspi_sync_init+0x60>)
    4cc8:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    4cca:	4909      	ldr	r1, [pc, #36]	; (4cf0 <_qspi_sync_init+0x64>)
    4ccc:	6838      	ldr	r0, [r7, #0]
    4cce:	4b09      	ldr	r3, [pc, #36]	; (4cf4 <_qspi_sync_init+0x68>)
    4cd0:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    4cd2:	4909      	ldr	r1, [pc, #36]	; (4cf8 <_qspi_sync_init+0x6c>)
    4cd4:	6838      	ldr	r0, [r7, #0]
    4cd6:	4b09      	ldr	r3, [pc, #36]	; (4cfc <_qspi_sync_init+0x70>)
    4cd8:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    4cda:	2300      	movs	r3, #0
}
    4cdc:	4618      	mov	r0, r3
    4cde:	3708      	adds	r7, #8
    4ce0:	46bd      	mov	sp, r7
    4ce2:	bd80      	pop	{r7, pc}
    4ce4:	0000ce04 	.word	0x0000ce04
    4ce8:	00003249 	.word	0x00003249
    4cec:	00004b29 	.word	0x00004b29
    4cf0:	06000011 	.word	0x06000011
    4cf4:	00004b45 	.word	0x00004b45
    4cf8:	00241300 	.word	0x00241300
    4cfc:	00004b61 	.word	0x00004b61

00004d00 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    4d00:	b580      	push	{r7, lr}
    4d02:	b082      	sub	sp, #8
    4d04:	af00      	add	r7, sp, #0
    4d06:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    4d08:	687b      	ldr	r3, [r7, #4]
    4d0a:	681b      	ldr	r3, [r3, #0]
    4d0c:	2102      	movs	r1, #2
    4d0e:	4618      	mov	r0, r3
    4d10:	4b03      	ldr	r3, [pc, #12]	; (4d20 <_qspi_sync_enable+0x20>)
    4d12:	4798      	blx	r3
	return ERR_NONE;
    4d14:	2300      	movs	r3, #0
}
    4d16:	4618      	mov	r0, r3
    4d18:	3708      	adds	r7, #8
    4d1a:	46bd      	mov	sp, r7
    4d1c:	bd80      	pop	{r7, pc}
    4d1e:	bf00      	nop
    4d20:	00004b29 	.word	0x00004b29

00004d24 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    4d24:	b580      	push	{r7, lr}
    4d26:	b082      	sub	sp, #8
    4d28:	af00      	add	r7, sp, #0
    4d2a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    4d2c:	687b      	ldr	r3, [r7, #4]
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	2100      	movs	r1, #0
    4d32:	4618      	mov	r0, r3
    4d34:	4b03      	ldr	r3, [pc, #12]	; (4d44 <_qspi_sync_disable+0x20>)
    4d36:	4798      	blx	r3
	return ERR_NONE;
    4d38:	2300      	movs	r3, #0
}
    4d3a:	4618      	mov	r0, r3
    4d3c:	3708      	adds	r7, #8
    4d3e:	46bd      	mov	sp, r7
    4d40:	bd80      	pop	{r7, pc}
    4d42:	bf00      	nop
    4d44:	00004b29 	.word	0x00004b29

00004d48 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    4d48:	b580      	push	{r7, lr}
    4d4a:	b084      	sub	sp, #16
    4d4c:	af00      	add	r7, sp, #0
    4d4e:	6078      	str	r0, [r7, #4]
    4d50:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	681b      	ldr	r3, [r3, #0]
    4d56:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    4d58:	683b      	ldr	r3, [r7, #0]
    4d5a:	781b      	ldrb	r3, [r3, #0]
    4d5c:	f003 0320 	and.w	r3, r3, #32
    4d60:	b2db      	uxtb	r3, r3
    4d62:	2b00      	cmp	r3, #0
    4d64:	d005      	beq.n	4d72 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    4d66:	683b      	ldr	r3, [r7, #0]
    4d68:	689b      	ldr	r3, [r3, #8]
    4d6a:	4619      	mov	r1, r3
    4d6c:	68f8      	ldr	r0, [r7, #12]
    4d6e:	4b13      	ldr	r3, [pc, #76]	; (4dbc <_qspi_sync_command_set_ifr+0x74>)
    4d70:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    4d72:	683b      	ldr	r3, [r7, #0]
    4d74:	781b      	ldrb	r3, [r3, #0]
    4d76:	f003 0310 	and.w	r3, r3, #16
    4d7a:	b2db      	uxtb	r3, r3
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d005      	beq.n	4d8c <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    4d80:	683b      	ldr	r3, [r7, #0]
    4d82:	791b      	ldrb	r3, [r3, #4]
    4d84:	4619      	mov	r1, r3
    4d86:	68f8      	ldr	r0, [r7, #12]
    4d88:	4b0d      	ldr	r3, [pc, #52]	; (4dc0 <_qspi_sync_command_set_ifr+0x78>)
    4d8a:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    4d8c:	683b      	ldr	r3, [r7, #0]
    4d8e:	781b      	ldrb	r3, [r3, #0]
    4d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4d94:	b2db      	uxtb	r3, r3
    4d96:	2b00      	cmp	r3, #0
    4d98:	d005      	beq.n	4da6 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    4d9a:	683b      	ldr	r3, [r7, #0]
    4d9c:	795b      	ldrb	r3, [r3, #5]
    4d9e:	4619      	mov	r1, r3
    4da0:	68f8      	ldr	r0, [r7, #12]
    4da2:	4b08      	ldr	r3, [pc, #32]	; (4dc4 <_qspi_sync_command_set_ifr+0x7c>)
    4da4:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    4da6:	683b      	ldr	r3, [r7, #0]
    4da8:	681b      	ldr	r3, [r3, #0]
    4daa:	4619      	mov	r1, r3
    4dac:	68f8      	ldr	r0, [r7, #12]
    4dae:	4b06      	ldr	r3, [pc, #24]	; (4dc8 <_qspi_sync_command_set_ifr+0x80>)
    4db0:	4798      	blx	r3
}
    4db2:	bf00      	nop
    4db4:	3710      	adds	r7, #16
    4db6:	46bd      	mov	sp, r7
    4db8:	bd80      	pop	{r7, pc}
    4dba:	bf00      	nop
    4dbc:	00004b7d 	.word	0x00004b7d
    4dc0:	00004b99 	.word	0x00004b99
    4dc4:	00004bcd 	.word	0x00004bcd
    4dc8:	00004c05 	.word	0x00004c05

00004dcc <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    4dcc:	b580      	push	{r7, lr}
    4dce:	b084      	sub	sp, #16
    4dd0:	af00      	add	r7, sp, #0
    4dd2:	6078      	str	r0, [r7, #4]
    4dd4:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    4dd6:	687b      	ldr	r3, [r7, #4]
    4dd8:	681b      	ldr	r3, [r3, #0]
    4dda:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    4ddc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4de0:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    4de2:	683b      	ldr	r3, [r7, #0]
    4de4:	781b      	ldrb	r3, [r3, #0]
    4de6:	f003 0320 	and.w	r3, r3, #32
    4dea:	b2db      	uxtb	r3, r3
    4dec:	2b00      	cmp	r3, #0
    4dee:	d004      	beq.n	4dfa <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    4df0:	683b      	ldr	r3, [r7, #0]
    4df2:	689b      	ldr	r3, [r3, #8]
    4df4:	68fa      	ldr	r2, [r7, #12]
    4df6:	4413      	add	r3, r2
    4df8:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    4dfa:	68b8      	ldr	r0, [r7, #8]
    4dfc:	4b18      	ldr	r3, [pc, #96]	; (4e60 <_qspi_sync_run_transfer+0x94>)
    4dfe:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    4e00:	683b      	ldr	r3, [r7, #0]
    4e02:	691b      	ldr	r3, [r3, #16]
    4e04:	2b00      	cmp	r3, #0
    4e06:	d103      	bne.n	4e10 <_qspi_sync_run_transfer+0x44>
    4e08:	683b      	ldr	r3, [r7, #0]
    4e0a:	695b      	ldr	r3, [r3, #20]
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d001      	beq.n	4e14 <_qspi_sync_run_transfer+0x48>
    4e10:	2301      	movs	r3, #1
    4e12:	e000      	b.n	4e16 <_qspi_sync_run_transfer+0x4a>
    4e14:	2300      	movs	r3, #0
    4e16:	f003 0301 	and.w	r3, r3, #1
    4e1a:	b2db      	uxtb	r3, r3
    4e1c:	2282      	movs	r2, #130	; 0x82
    4e1e:	4911      	ldr	r1, [pc, #68]	; (4e64 <_qspi_sync_run_transfer+0x98>)
    4e20:	4618      	mov	r0, r3
    4e22:	4b11      	ldr	r3, [pc, #68]	; (4e68 <_qspi_sync_run_transfer+0x9c>)
    4e24:	4798      	blx	r3

	if (cmd->tx_buf) {
    4e26:	683b      	ldr	r3, [r7, #0]
    4e28:	691b      	ldr	r3, [r3, #16]
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	d008      	beq.n	4e40 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    4e2e:	683b      	ldr	r3, [r7, #0]
    4e30:	6919      	ldr	r1, [r3, #16]
    4e32:	683b      	ldr	r3, [r7, #0]
    4e34:	68db      	ldr	r3, [r3, #12]
    4e36:	461a      	mov	r2, r3
    4e38:	68f8      	ldr	r0, [r7, #12]
    4e3a:	4b0c      	ldr	r3, [pc, #48]	; (4e6c <_qspi_sync_run_transfer+0xa0>)
    4e3c:	4798      	blx	r3
    4e3e:	e007      	b.n	4e50 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    4e40:	683b      	ldr	r3, [r7, #0]
    4e42:	6958      	ldr	r0, [r3, #20]
    4e44:	683b      	ldr	r3, [r7, #0]
    4e46:	68db      	ldr	r3, [r3, #12]
    4e48:	461a      	mov	r2, r3
    4e4a:	68f9      	ldr	r1, [r7, #12]
    4e4c:	4b07      	ldr	r3, [pc, #28]	; (4e6c <_qspi_sync_run_transfer+0xa0>)
    4e4e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    4e50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4e54:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    4e58:	bf00      	nop
    4e5a:	3710      	adds	r7, #16
    4e5c:	46bd      	mov	sp, r7
    4e5e:	bd80      	pop	{r7, pc}
    4e60:	00004c21 	.word	0x00004c21
    4e64:	0000ce04 	.word	0x0000ce04
    4e68:	00003249 	.word	0x00003249
    4e6c:	00004c39 	.word	0x00004c39

00004e70 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    4e70:	b580      	push	{r7, lr}
    4e72:	b082      	sub	sp, #8
    4e74:	af00      	add	r7, sp, #0
    4e76:	6078      	str	r0, [r7, #4]
    4e78:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    4e7a:	6839      	ldr	r1, [r7, #0]
    4e7c:	6878      	ldr	r0, [r7, #4]
    4e7e:	4b14      	ldr	r3, [pc, #80]	; (4ed0 <_qspi_sync_serial_run_command+0x60>)
    4e80:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    4e82:	683b      	ldr	r3, [r7, #0]
    4e84:	781b      	ldrb	r3, [r3, #0]
    4e86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    4e8a:	b2db      	uxtb	r3, r3
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	d003      	beq.n	4e98 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    4e90:	6839      	ldr	r1, [r7, #0]
    4e92:	6878      	ldr	r0, [r7, #4]
    4e94:	4b0f      	ldr	r3, [pc, #60]	; (4ed4 <_qspi_sync_serial_run_command+0x64>)
    4e96:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    4e98:	687b      	ldr	r3, [r7, #4]
    4e9a:	681b      	ldr	r3, [r3, #0]
    4e9c:	4618      	mov	r0, r3
    4e9e:	4b0e      	ldr	r3, [pc, #56]	; (4ed8 <_qspi_sync_serial_run_command+0x68>)
    4ea0:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    4ea2:	bf00      	nop
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	681b      	ldr	r3, [r3, #0]
    4ea8:	4618      	mov	r0, r3
    4eaa:	4b0c      	ldr	r3, [pc, #48]	; (4edc <_qspi_sync_serial_run_command+0x6c>)
    4eac:	4798      	blx	r3
    4eae:	4603      	mov	r3, r0
    4eb0:	f083 0301 	eor.w	r3, r3, #1
    4eb4:	b2db      	uxtb	r3, r3
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	d1f4      	bne.n	4ea4 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	681b      	ldr	r3, [r3, #0]
    4ebe:	4618      	mov	r0, r3
    4ec0:	4b07      	ldr	r3, [pc, #28]	; (4ee0 <_qspi_sync_serial_run_command+0x70>)
    4ec2:	4798      	blx	r3
	return ERR_NONE;
    4ec4:	2300      	movs	r3, #0
}
    4ec6:	4618      	mov	r0, r3
    4ec8:	3708      	adds	r7, #8
    4eca:	46bd      	mov	sp, r7
    4ecc:	bd80      	pop	{r7, pc}
    4ece:	bf00      	nop
    4ed0:	00004d49 	.word	0x00004d49
    4ed4:	00004dcd 	.word	0x00004dcd
    4ed8:	00004c6d 	.word	0x00004c6d
    4edc:	00004ae5 	.word	0x00004ae5
    4ee0:	00004b0d 	.word	0x00004b0d

00004ee4 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    4ee4:	b480      	push	{r7}
    4ee6:	b083      	sub	sp, #12
    4ee8:	af00      	add	r7, sp, #0
    4eea:	6078      	str	r0, [r7, #4]
    4eec:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    4eee:	bf00      	nop
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	691a      	ldr	r2, [r3, #16]
    4ef4:	683b      	ldr	r3, [r7, #0]
    4ef6:	4013      	ands	r3, r2
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d1f9      	bne.n	4ef0 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    4efc:	bf00      	nop
    4efe:	370c      	adds	r7, #12
    4f00:	46bd      	mov	sp, r7
    4f02:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f06:	4770      	bx	lr

00004f08 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    4f08:	b480      	push	{r7}
    4f0a:	b083      	sub	sp, #12
    4f0c:	af00      	add	r7, sp, #0
    4f0e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    4f10:	687b      	ldr	r3, [r7, #4]
    4f12:	f44f 7280 	mov.w	r2, #256	; 0x100
    4f16:	819a      	strh	r2, [r3, #12]
}
    4f18:	bf00      	nop
    4f1a:	370c      	adds	r7, #12
    4f1c:	46bd      	mov	sp, r7
    4f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f22:	4770      	bx	lr

00004f24 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    4f24:	b480      	push	{r7}
    4f26:	b083      	sub	sp, #12
    4f28:	af00      	add	r7, sp, #0
    4f2a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    4f2c:	687b      	ldr	r3, [r7, #4]
    4f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4f32:	819a      	strh	r2, [r3, #12]
}
    4f34:	bf00      	nop
    4f36:	370c      	adds	r7, #12
    4f38:	46bd      	mov	sp, r7
    4f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f3e:	4770      	bx	lr

00004f40 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    4f40:	b480      	push	{r7}
    4f42:	b083      	sub	sp, #12
    4f44:	af00      	add	r7, sp, #0
    4f46:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	899b      	ldrh	r3, [r3, #12]
    4f4c:	b29b      	uxth	r3, r3
}
    4f4e:	4618      	mov	r0, r3
    4f50:	370c      	adds	r7, #12
    4f52:	46bd      	mov	sp, r7
    4f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f58:	4770      	bx	lr

00004f5a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    4f5a:	b480      	push	{r7}
    4f5c:	b083      	sub	sp, #12
    4f5e:	af00      	add	r7, sp, #0
    4f60:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    4f62:	687b      	ldr	r3, [r7, #4]
    4f64:	895b      	ldrh	r3, [r3, #10]
    4f66:	b29b      	uxth	r3, r3
}
    4f68:	4618      	mov	r0, r3
    4f6a:	370c      	adds	r7, #12
    4f6c:	46bd      	mov	sp, r7
    4f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f72:	4770      	bx	lr

00004f74 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    4f74:	b580      	push	{r7, lr}
    4f76:	b082      	sub	sp, #8
    4f78:	af00      	add	r7, sp, #0
    4f7a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    4f7c:	687b      	ldr	r3, [r7, #4]
    4f7e:	881b      	ldrh	r3, [r3, #0]
    4f80:	b29b      	uxth	r3, r3
    4f82:	f043 0301 	orr.w	r3, r3, #1
    4f86:	b29a      	uxth	r2, r3
    4f88:	687b      	ldr	r3, [r7, #4]
    4f8a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    4f8c:	2101      	movs	r1, #1
    4f8e:	6878      	ldr	r0, [r7, #4]
    4f90:	4b02      	ldr	r3, [pc, #8]	; (4f9c <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    4f92:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    4f94:	bf00      	nop
    4f96:	3708      	adds	r7, #8
    4f98:	46bd      	mov	sp, r7
    4f9a:	bd80      	pop	{r7, pc}
    4f9c:	00004ee5 	.word	0x00004ee5

00004fa0 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    4fa0:	b580      	push	{r7, lr}
    4fa2:	b084      	sub	sp, #16
    4fa4:	af00      	add	r7, sp, #0
    4fa6:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    4fa8:	f248 0103 	movw	r1, #32771	; 0x8003
    4fac:	6878      	ldr	r0, [r7, #4]
    4fae:	4b0a      	ldr	r3, [pc, #40]	; (4fd8 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    4fb0:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    4fb2:	687b      	ldr	r3, [r7, #4]
    4fb4:	881b      	ldrh	r3, [r3, #0]
    4fb6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    4fb8:	89fb      	ldrh	r3, [r7, #14]
    4fba:	085b      	lsrs	r3, r3, #1
    4fbc:	b29b      	uxth	r3, r3
    4fbe:	f003 0301 	and.w	r3, r3, #1
    4fc2:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    4fc4:	89fb      	ldrh	r3, [r7, #14]
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	bf14      	ite	ne
    4fca:	2301      	movne	r3, #1
    4fcc:	2300      	moveq	r3, #0
    4fce:	b2db      	uxtb	r3, r3
}
    4fd0:	4618      	mov	r0, r3
    4fd2:	3710      	adds	r7, #16
    4fd4:	46bd      	mov	sp, r7
    4fd6:	bd80      	pop	{r7, pc}
    4fd8:	00004ee5 	.word	0x00004ee5

00004fdc <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4fdc:	b580      	push	{r7, lr}
    4fde:	b082      	sub	sp, #8
    4fe0:	af00      	add	r7, sp, #0
    4fe2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    4fe4:	687b      	ldr	r3, [r7, #4]
    4fe6:	881b      	ldrh	r3, [r3, #0]
    4fe8:	b29b      	uxth	r3, r3
    4fea:	f023 0302 	bic.w	r3, r3, #2
    4fee:	b29a      	uxth	r2, r3
    4ff0:	687b      	ldr	r3, [r7, #4]
    4ff2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    4ff4:	f248 0103 	movw	r1, #32771	; 0x8003
    4ff8:	6878      	ldr	r0, [r7, #4]
    4ffa:	4b03      	ldr	r3, [pc, #12]	; (5008 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    4ffc:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    4ffe:	bf00      	nop
    5000:	3708      	adds	r7, #8
    5002:	46bd      	mov	sp, r7
    5004:	bd80      	pop	{r7, pc}
    5006:	bf00      	nop
    5008:	00004ee5 	.word	0x00004ee5

0000500c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    500c:	b580      	push	{r7, lr}
    500e:	b082      	sub	sp, #8
    5010:	af00      	add	r7, sp, #0
    5012:	6078      	str	r0, [r7, #4]
    5014:	460b      	mov	r3, r1
    5016:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5018:	687b      	ldr	r3, [r7, #4]
    501a:	887a      	ldrh	r2, [r7, #2]
    501c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    501e:	f248 0103 	movw	r1, #32771	; 0x8003
    5022:	6878      	ldr	r0, [r7, #4]
    5024:	4b02      	ldr	r3, [pc, #8]	; (5030 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5026:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5028:	bf00      	nop
    502a:	3708      	adds	r7, #8
    502c:	46bd      	mov	sp, r7
    502e:	bd80      	pop	{r7, pc}
    5030:	00004ee5 	.word	0x00004ee5

00005034 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5034:	b480      	push	{r7}
    5036:	b083      	sub	sp, #12
    5038:	af00      	add	r7, sp, #0
    503a:	6078      	str	r0, [r7, #4]
    503c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    503e:	687b      	ldr	r3, [r7, #4]
    5040:	683a      	ldr	r2, [r7, #0]
    5042:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5044:	bf00      	nop
    5046:	370c      	adds	r7, #12
    5048:	46bd      	mov	sp, r7
    504a:	f85d 7b04 	ldr.w	r7, [sp], #4
    504e:	4770      	bx	lr

00005050 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5050:	b580      	push	{r7, lr}
    5052:	b082      	sub	sp, #8
    5054:	af00      	add	r7, sp, #0
    5056:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    5058:	687b      	ldr	r3, [r7, #4]
    505a:	2b00      	cmp	r3, #0
    505c:	d005      	beq.n	506a <_calendar_init+0x1a>
    505e:	687b      	ldr	r3, [r7, #4]
    5060:	681b      	ldr	r3, [r3, #0]
    5062:	2b00      	cmp	r3, #0
    5064:	d001      	beq.n	506a <_calendar_init+0x1a>
    5066:	2301      	movs	r3, #1
    5068:	e000      	b.n	506c <_calendar_init+0x1c>
    506a:	2300      	movs	r3, #0
    506c:	f003 0301 	and.w	r3, r3, #1
    5070:	b2db      	uxtb	r3, r3
    5072:	222f      	movs	r2, #47	; 0x2f
    5074:	491e      	ldr	r1, [pc, #120]	; (50f0 <_calendar_init+0xa0>)
    5076:	4618      	mov	r0, r3
    5078:	4b1e      	ldr	r3, [pc, #120]	; (50f4 <_calendar_init+0xa4>)
    507a:	4798      	blx	r3

	_rtc_dev = dev;
    507c:	4a1e      	ldr	r2, [pc, #120]	; (50f8 <_calendar_init+0xa8>)
    507e:	687b      	ldr	r3, [r7, #4]
    5080:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5082:	687b      	ldr	r3, [r7, #4]
    5084:	681b      	ldr	r3, [r3, #0]
    5086:	2101      	movs	r1, #1
    5088:	4618      	mov	r0, r3
    508a:	4b1c      	ldr	r3, [pc, #112]	; (50fc <_calendar_init+0xac>)
    508c:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    508e:	687b      	ldr	r3, [r7, #4]
    5090:	681b      	ldr	r3, [r3, #0]
    5092:	4618      	mov	r0, r3
    5094:	4b1a      	ldr	r3, [pc, #104]	; (5100 <_calendar_init+0xb0>)
    5096:	4798      	blx	r3
    5098:	4603      	mov	r3, r0
    509a:	2b00      	cmp	r3, #0
    509c:	d00a      	beq.n	50b4 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    509e:	687b      	ldr	r3, [r7, #4]
    50a0:	681b      	ldr	r3, [r3, #0]
    50a2:	4618      	mov	r0, r3
    50a4:	4b17      	ldr	r3, [pc, #92]	; (5104 <_calendar_init+0xb4>)
    50a6:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	681b      	ldr	r3, [r3, #0]
    50ac:	2102      	movs	r1, #2
    50ae:	4618      	mov	r0, r3
    50b0:	4b12      	ldr	r3, [pc, #72]	; (50fc <_calendar_init+0xac>)
    50b2:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    50b4:	687b      	ldr	r3, [r7, #4]
    50b6:	681b      	ldr	r3, [r3, #0]
    50b8:	4618      	mov	r0, r3
    50ba:	4b13      	ldr	r3, [pc, #76]	; (5108 <_calendar_init+0xb8>)
    50bc:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    50be:	687b      	ldr	r3, [r7, #4]
    50c0:	681b      	ldr	r3, [r3, #0]
    50c2:	2101      	movs	r1, #1
    50c4:	4618      	mov	r0, r3
    50c6:	4b0d      	ldr	r3, [pc, #52]	; (50fc <_calendar_init+0xac>)
    50c8:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    50ca:	687b      	ldr	r3, [r7, #4]
    50cc:	681b      	ldr	r3, [r3, #0]
    50ce:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    50d2:	4618      	mov	r0, r3
    50d4:	4b0d      	ldr	r3, [pc, #52]	; (510c <_calendar_init+0xbc>)
    50d6:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    50d8:	687b      	ldr	r3, [r7, #4]
    50da:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    50dc:	2100      	movs	r1, #0
    50de:	4618      	mov	r0, r3
    50e0:	4b0b      	ldr	r3, [pc, #44]	; (5110 <_calendar_init+0xc0>)
    50e2:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    50e4:	2300      	movs	r3, #0
}
    50e6:	4618      	mov	r0, r3
    50e8:	3708      	adds	r7, #8
    50ea:	46bd      	mov	sp, r7
    50ec:	bd80      	pop	{r7, pc}
    50ee:	bf00      	nop
    50f0:	0000ce1c 	.word	0x0000ce1c
    50f4:	00003249 	.word	0x00003249
    50f8:	20000654 	.word	0x20000654
    50fc:	00004ee5 	.word	0x00004ee5
    5100:	00004fa1 	.word	0x00004fa1
    5104:	00004fdd 	.word	0x00004fdd
    5108:	00004f75 	.word	0x00004f75
    510c:	0000500d 	.word	0x0000500d
    5110:	00005035 	.word	0x00005035

00005114 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5114:	b580      	push	{r7, lr}
    5116:	b084      	sub	sp, #16
    5118:	af00      	add	r7, sp, #0
    511a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    511c:	687b      	ldr	r3, [r7, #4]
    511e:	681b      	ldr	r3, [r3, #0]
    5120:	4618      	mov	r0, r3
    5122:	4b19      	ldr	r3, [pc, #100]	; (5188 <_rtc_interrupt_handler+0x74>)
    5124:	4798      	blx	r3
    5126:	4603      	mov	r3, r0
    5128:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    512a:	687b      	ldr	r3, [r7, #4]
    512c:	681b      	ldr	r3, [r3, #0]
    512e:	4618      	mov	r0, r3
    5130:	4b16      	ldr	r3, [pc, #88]	; (518c <_rtc_interrupt_handler+0x78>)
    5132:	4798      	blx	r3
    5134:	4603      	mov	r3, r0
    5136:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5138:	89fa      	ldrh	r2, [r7, #14]
    513a:	89bb      	ldrh	r3, [r7, #12]
    513c:	4013      	ands	r3, r2
    513e:	b29b      	uxth	r3, r3
    5140:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5144:	2b00      	cmp	r3, #0
    5146:	d009      	beq.n	515c <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5148:	687b      	ldr	r3, [r7, #4]
    514a:	685b      	ldr	r3, [r3, #4]
    514c:	6878      	ldr	r0, [r7, #4]
    514e:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5150:	687b      	ldr	r3, [r7, #4]
    5152:	681b      	ldr	r3, [r3, #0]
    5154:	4618      	mov	r0, r3
    5156:	4b0e      	ldr	r3, [pc, #56]	; (5190 <_rtc_interrupt_handler+0x7c>)
    5158:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    515a:	e010      	b.n	517e <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    515c:	89fa      	ldrh	r2, [r7, #14]
    515e:	89bb      	ldrh	r3, [r7, #12]
    5160:	4013      	ands	r3, r2
    5162:	b29b      	uxth	r3, r3
    5164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5168:	2b00      	cmp	r3, #0
    516a:	d008      	beq.n	517e <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    516c:	687b      	ldr	r3, [r7, #4]
    516e:	689b      	ldr	r3, [r3, #8]
    5170:	6878      	ldr	r0, [r7, #4]
    5172:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5174:	687b      	ldr	r3, [r7, #4]
    5176:	681b      	ldr	r3, [r3, #0]
    5178:	4618      	mov	r0, r3
    517a:	4b06      	ldr	r3, [pc, #24]	; (5194 <_rtc_interrupt_handler+0x80>)
    517c:	4798      	blx	r3
}
    517e:	bf00      	nop
    5180:	3710      	adds	r7, #16
    5182:	46bd      	mov	sp, r7
    5184:	bd80      	pop	{r7, pc}
    5186:	bf00      	nop
    5188:	00004f41 	.word	0x00004f41
    518c:	00004f5b 	.word	0x00004f5b
    5190:	00004f09 	.word	0x00004f09
    5194:	00004f25 	.word	0x00004f25

00005198 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    5198:	b580      	push	{r7, lr}
    519a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    519c:	4b03      	ldr	r3, [pc, #12]	; (51ac <RTC_Handler+0x14>)
    519e:	681b      	ldr	r3, [r3, #0]
    51a0:	4618      	mov	r0, r3
    51a2:	4b03      	ldr	r3, [pc, #12]	; (51b0 <RTC_Handler+0x18>)
    51a4:	4798      	blx	r3
}
    51a6:	bf00      	nop
    51a8:	bd80      	pop	{r7, pc}
    51aa:	bf00      	nop
    51ac:	20000654 	.word	0x20000654
    51b0:	00005115 	.word	0x00005115

000051b4 <__NVIC_EnableIRQ>:
{
    51b4:	b480      	push	{r7}
    51b6:	b083      	sub	sp, #12
    51b8:	af00      	add	r7, sp, #0
    51ba:	4603      	mov	r3, r0
    51bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    51be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    51c2:	2b00      	cmp	r3, #0
    51c4:	db0b      	blt.n	51de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    51c6:	4909      	ldr	r1, [pc, #36]	; (51ec <__NVIC_EnableIRQ+0x38>)
    51c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    51cc:	095b      	lsrs	r3, r3, #5
    51ce:	88fa      	ldrh	r2, [r7, #6]
    51d0:	f002 021f 	and.w	r2, r2, #31
    51d4:	2001      	movs	r0, #1
    51d6:	fa00 f202 	lsl.w	r2, r0, r2
    51da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    51de:	bf00      	nop
    51e0:	370c      	adds	r7, #12
    51e2:	46bd      	mov	sp, r7
    51e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    51e8:	4770      	bx	lr
    51ea:	bf00      	nop
    51ec:	e000e100 	.word	0xe000e100

000051f0 <__NVIC_DisableIRQ>:
{
    51f0:	b480      	push	{r7}
    51f2:	b083      	sub	sp, #12
    51f4:	af00      	add	r7, sp, #0
    51f6:	4603      	mov	r3, r0
    51f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    51fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    51fe:	2b00      	cmp	r3, #0
    5200:	db10      	blt.n	5224 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5202:	490b      	ldr	r1, [pc, #44]	; (5230 <__NVIC_DisableIRQ+0x40>)
    5204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5208:	095b      	lsrs	r3, r3, #5
    520a:	88fa      	ldrh	r2, [r7, #6]
    520c:	f002 021f 	and.w	r2, r2, #31
    5210:	2001      	movs	r0, #1
    5212:	fa00 f202 	lsl.w	r2, r0, r2
    5216:	3320      	adds	r3, #32
    5218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    521c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5220:	f3bf 8f6f 	isb	sy
}
    5224:	bf00      	nop
    5226:	370c      	adds	r7, #12
    5228:	46bd      	mov	sp, r7
    522a:	f85d 7b04 	ldr.w	r7, [sp], #4
    522e:	4770      	bx	lr
    5230:	e000e100 	.word	0xe000e100

00005234 <__NVIC_ClearPendingIRQ>:
{
    5234:	b480      	push	{r7}
    5236:	b083      	sub	sp, #12
    5238:	af00      	add	r7, sp, #0
    523a:	4603      	mov	r3, r0
    523c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    523e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5242:	2b00      	cmp	r3, #0
    5244:	db0c      	blt.n	5260 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5246:	4909      	ldr	r1, [pc, #36]	; (526c <__NVIC_ClearPendingIRQ+0x38>)
    5248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    524c:	095b      	lsrs	r3, r3, #5
    524e:	88fa      	ldrh	r2, [r7, #6]
    5250:	f002 021f 	and.w	r2, r2, #31
    5254:	2001      	movs	r0, #1
    5256:	fa00 f202 	lsl.w	r2, r0, r2
    525a:	3360      	adds	r3, #96	; 0x60
    525c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5260:	bf00      	nop
    5262:	370c      	adds	r7, #12
    5264:	46bd      	mov	sp, r7
    5266:	f85d 7b04 	ldr.w	r7, [sp], #4
    526a:	4770      	bx	lr
    526c:	e000e100 	.word	0xe000e100

00005270 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5270:	b480      	push	{r7}
    5272:	b083      	sub	sp, #12
    5274:	af00      	add	r7, sp, #0
    5276:	6078      	str	r0, [r7, #4]
    5278:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    527a:	bf00      	nop
    527c:	687b      	ldr	r3, [r7, #4]
    527e:	69da      	ldr	r2, [r3, #28]
    5280:	683b      	ldr	r3, [r7, #0]
    5282:	4013      	ands	r3, r2
    5284:	2b00      	cmp	r3, #0
    5286:	d1f9      	bne.n	527c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5288:	bf00      	nop
    528a:	370c      	adds	r7, #12
    528c:	46bd      	mov	sp, r7
    528e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5292:	4770      	bx	lr

00005294 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5294:	b480      	push	{r7}
    5296:	b083      	sub	sp, #12
    5298:	af00      	add	r7, sp, #0
    529a:	6078      	str	r0, [r7, #4]
    529c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    529e:	687b      	ldr	r3, [r7, #4]
    52a0:	69da      	ldr	r2, [r3, #28]
    52a2:	683b      	ldr	r3, [r7, #0]
    52a4:	4013      	ands	r3, r2
    52a6:	2b00      	cmp	r3, #0
    52a8:	bf14      	ite	ne
    52aa:	2301      	movne	r3, #1
    52ac:	2300      	moveq	r3, #0
    52ae:	b2db      	uxtb	r3, r3
}
    52b0:	4618      	mov	r0, r3
    52b2:	370c      	adds	r7, #12
    52b4:	46bd      	mov	sp, r7
    52b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ba:	4770      	bx	lr

000052bc <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    52bc:	b480      	push	{r7}
    52be:	b083      	sub	sp, #12
    52c0:	af00      	add	r7, sp, #0
    52c2:	6078      	str	r0, [r7, #4]
    52c4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    52c6:	bf00      	nop
    52c8:	687b      	ldr	r3, [r7, #4]
    52ca:	69da      	ldr	r2, [r3, #28]
    52cc:	683b      	ldr	r3, [r7, #0]
    52ce:	4013      	ands	r3, r2
    52d0:	2b00      	cmp	r3, #0
    52d2:	d1f9      	bne.n	52c8 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    52d4:	bf00      	nop
    52d6:	370c      	adds	r7, #12
    52d8:	46bd      	mov	sp, r7
    52da:	f85d 7b04 	ldr.w	r7, [sp], #4
    52de:	4770      	bx	lr

000052e0 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    52e0:	b480      	push	{r7}
    52e2:	b083      	sub	sp, #12
    52e4:	af00      	add	r7, sp, #0
    52e6:	6078      	str	r0, [r7, #4]
    52e8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    52ea:	687b      	ldr	r3, [r7, #4]
    52ec:	69da      	ldr	r2, [r3, #28]
    52ee:	683b      	ldr	r3, [r7, #0]
    52f0:	4013      	ands	r3, r2
    52f2:	2b00      	cmp	r3, #0
    52f4:	bf14      	ite	ne
    52f6:	2301      	movne	r3, #1
    52f8:	2300      	moveq	r3, #0
    52fa:	b2db      	uxtb	r3, r3
}
    52fc:	4618      	mov	r0, r3
    52fe:	370c      	adds	r7, #12
    5300:	46bd      	mov	sp, r7
    5302:	f85d 7b04 	ldr.w	r7, [sp], #4
    5306:	4770      	bx	lr

00005308 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5308:	b480      	push	{r7}
    530a:	b083      	sub	sp, #12
    530c:	af00      	add	r7, sp, #0
    530e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5310:	687b      	ldr	r3, [r7, #4]
    5312:	2201      	movs	r2, #1
    5314:	761a      	strb	r2, [r3, #24]
}
    5316:	bf00      	nop
    5318:	370c      	adds	r7, #12
    531a:	46bd      	mov	sp, r7
    531c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5320:	4770      	bx	lr

00005322 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5322:	b480      	push	{r7}
    5324:	b083      	sub	sp, #12
    5326:	af00      	add	r7, sp, #0
    5328:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    532a:	687b      	ldr	r3, [r7, #4]
    532c:	2202      	movs	r2, #2
    532e:	761a      	strb	r2, [r3, #24]
}
    5330:	bf00      	nop
    5332:	370c      	adds	r7, #12
    5334:	46bd      	mov	sp, r7
    5336:	f85d 7b04 	ldr.w	r7, [sp], #4
    533a:	4770      	bx	lr

0000533c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    533c:	b480      	push	{r7}
    533e:	b083      	sub	sp, #12
    5340:	af00      	add	r7, sp, #0
    5342:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5344:	687b      	ldr	r3, [r7, #4]
    5346:	7e1b      	ldrb	r3, [r3, #24]
    5348:	b2db      	uxtb	r3, r3
}
    534a:	4618      	mov	r0, r3
    534c:	370c      	adds	r7, #12
    534e:	46bd      	mov	sp, r7
    5350:	f85d 7b04 	ldr.w	r7, [sp], #4
    5354:	4770      	bx	lr

00005356 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    5356:	b480      	push	{r7}
    5358:	b083      	sub	sp, #12
    535a:	af00      	add	r7, sp, #0
    535c:	6078      	str	r0, [r7, #4]
    535e:	460b      	mov	r3, r1
    5360:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    5362:	687b      	ldr	r3, [r7, #4]
    5364:	78fa      	ldrb	r2, [r7, #3]
    5366:	761a      	strb	r2, [r3, #24]
}
    5368:	bf00      	nop
    536a:	370c      	adds	r7, #12
    536c:	46bd      	mov	sp, r7
    536e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5372:	4770      	bx	lr

00005374 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5374:	b480      	push	{r7}
    5376:	b085      	sub	sp, #20
    5378:	af00      	add	r7, sp, #0
    537a:	6078      	str	r0, [r7, #4]
    537c:	460b      	mov	r3, r1
    537e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5380:	687b      	ldr	r3, [r7, #4]
    5382:	7e1b      	ldrb	r3, [r3, #24]
    5384:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    5386:	7bfa      	ldrb	r2, [r7, #15]
    5388:	78fb      	ldrb	r3, [r7, #3]
    538a:	4013      	ands	r3, r2
    538c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    538e:	7bfb      	ldrb	r3, [r7, #15]
}
    5390:	4618      	mov	r0, r3
    5392:	3714      	adds	r7, #20
    5394:	46bd      	mov	sp, r7
    5396:	f85d 7b04 	ldr.w	r7, [sp], #4
    539a:	4770      	bx	lr

0000539c <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    539c:	b480      	push	{r7}
    539e:	b083      	sub	sp, #12
    53a0:	af00      	add	r7, sp, #0
    53a2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    53a4:	687b      	ldr	r3, [r7, #4]
    53a6:	7e1b      	ldrb	r3, [r3, #24]
    53a8:	b2db      	uxtb	r3, r3
}
    53aa:	4618      	mov	r0, r3
    53ac:	370c      	adds	r7, #12
    53ae:	46bd      	mov	sp, r7
    53b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    53b4:	4770      	bx	lr

000053b6 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    53b6:	b480      	push	{r7}
    53b8:	b083      	sub	sp, #12
    53ba:	af00      	add	r7, sp, #0
    53bc:	6078      	str	r0, [r7, #4]
    53be:	460b      	mov	r3, r1
    53c0:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    53c2:	687b      	ldr	r3, [r7, #4]
    53c4:	78fa      	ldrb	r2, [r7, #3]
    53c6:	761a      	strb	r2, [r3, #24]
}
    53c8:	bf00      	nop
    53ca:	370c      	adds	r7, #12
    53cc:	46bd      	mov	sp, r7
    53ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    53d2:	4770      	bx	lr

000053d4 <hri_sercomi2cm_write_INTEN_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_MB) >> SERCOM_I2CM_INTENSET_MB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_MB_bit(const void *const hw, bool value)
{
    53d4:	b480      	push	{r7}
    53d6:	b083      	sub	sp, #12
    53d8:	af00      	add	r7, sp, #0
    53da:	6078      	str	r0, [r7, #4]
    53dc:	460b      	mov	r3, r1
    53de:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    53e0:	78fb      	ldrb	r3, [r7, #3]
    53e2:	f083 0301 	eor.w	r3, r3, #1
    53e6:	b2db      	uxtb	r3, r3
    53e8:	2b00      	cmp	r3, #0
    53ea:	d003      	beq.n	53f4 <hri_sercomi2cm_write_INTEN_MB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_MB;
    53ec:	687b      	ldr	r3, [r7, #4]
    53ee:	2201      	movs	r2, #1
    53f0:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
	}
}
    53f2:	e002      	b.n	53fa <hri_sercomi2cm_write_INTEN_MB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_MB;
    53f4:	687b      	ldr	r3, [r7, #4]
    53f6:	2201      	movs	r2, #1
    53f8:	759a      	strb	r2, [r3, #22]
}
    53fa:	bf00      	nop
    53fc:	370c      	adds	r7, #12
    53fe:	46bd      	mov	sp, r7
    5400:	f85d 7b04 	ldr.w	r7, [sp], #4
    5404:	4770      	bx	lr

00005406 <hri_sercomi2cm_write_INTEN_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_SB) >> SERCOM_I2CM_INTENSET_SB_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_SB_bit(const void *const hw, bool value)
{
    5406:	b480      	push	{r7}
    5408:	b083      	sub	sp, #12
    540a:	af00      	add	r7, sp, #0
    540c:	6078      	str	r0, [r7, #4]
    540e:	460b      	mov	r3, r1
    5410:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    5412:	78fb      	ldrb	r3, [r7, #3]
    5414:	f083 0301 	eor.w	r3, r3, #1
    5418:	b2db      	uxtb	r3, r3
    541a:	2b00      	cmp	r3, #0
    541c:	d003      	beq.n	5426 <hri_sercomi2cm_write_INTEN_SB_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_SB;
    541e:	687b      	ldr	r3, [r7, #4]
    5420:	2202      	movs	r2, #2
    5422:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
	}
}
    5424:	e002      	b.n	542c <hri_sercomi2cm_write_INTEN_SB_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_SB;
    5426:	687b      	ldr	r3, [r7, #4]
    5428:	2202      	movs	r2, #2
    542a:	759a      	strb	r2, [r3, #22]
}
    542c:	bf00      	nop
    542e:	370c      	adds	r7, #12
    5430:	46bd      	mov	sp, r7
    5432:	f85d 7b04 	ldr.w	r7, [sp], #4
    5436:	4770      	bx	lr

00005438 <hri_sercomi2cm_write_INTEN_ERROR_bit>:
{
	return (((Sercom *)hw)->I2CM.INTENSET.reg & SERCOM_I2CM_INTENSET_ERROR) >> SERCOM_I2CM_INTENSET_ERROR_Pos;
}

static inline void hri_sercomi2cm_write_INTEN_ERROR_bit(const void *const hw, bool value)
{
    5438:	b480      	push	{r7}
    543a:	b083      	sub	sp, #12
    543c:	af00      	add	r7, sp, #0
    543e:	6078      	str	r0, [r7, #4]
    5440:	460b      	mov	r3, r1
    5442:	70fb      	strb	r3, [r7, #3]
	if (value == 0x0) {
    5444:	78fb      	ldrb	r3, [r7, #3]
    5446:	f083 0301 	eor.w	r3, r3, #1
    544a:	b2db      	uxtb	r3, r3
    544c:	2b00      	cmp	r3, #0
    544e:	d003      	beq.n	5458 <hri_sercomi2cm_write_INTEN_ERROR_bit+0x20>
		((Sercom *)hw)->I2CM.INTENCLR.reg = SERCOM_I2CM_INTENSET_ERROR;
    5450:	687b      	ldr	r3, [r7, #4]
    5452:	2280      	movs	r2, #128	; 0x80
    5454:	751a      	strb	r2, [r3, #20]
	} else {
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
	}
}
    5456:	e002      	b.n	545e <hri_sercomi2cm_write_INTEN_ERROR_bit+0x26>
		((Sercom *)hw)->I2CM.INTENSET.reg = SERCOM_I2CM_INTENSET_ERROR;
    5458:	687b      	ldr	r3, [r7, #4]
    545a:	2280      	movs	r2, #128	; 0x80
    545c:	759a      	strb	r2, [r3, #22]
}
    545e:	bf00      	nop
    5460:	370c      	adds	r7, #12
    5462:	46bd      	mov	sp, r7
    5464:	f85d 7b04 	ldr.w	r7, [sp], #4
    5468:	4770      	bx	lr

0000546a <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    546a:	b480      	push	{r7}
    546c:	b083      	sub	sp, #12
    546e:	af00      	add	r7, sp, #0
    5470:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    5472:	687b      	ldr	r3, [r7, #4]
    5474:	2201      	movs	r2, #1
    5476:	759a      	strb	r2, [r3, #22]
}
    5478:	bf00      	nop
    547a:	370c      	adds	r7, #12
    547c:	46bd      	mov	sp, r7
    547e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5482:	4770      	bx	lr

00005484 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    5484:	b480      	push	{r7}
    5486:	b083      	sub	sp, #12
    5488:	af00      	add	r7, sp, #0
    548a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    548c:	687b      	ldr	r3, [r7, #4]
    548e:	2201      	movs	r2, #1
    5490:	751a      	strb	r2, [r3, #20]
}
    5492:	bf00      	nop
    5494:	370c      	adds	r7, #12
    5496:	46bd      	mov	sp, r7
    5498:	f85d 7b04 	ldr.w	r7, [sp], #4
    549c:	4770      	bx	lr

0000549e <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    549e:	b480      	push	{r7}
    54a0:	b083      	sub	sp, #12
    54a2:	af00      	add	r7, sp, #0
    54a4:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    54a6:	687b      	ldr	r3, [r7, #4]
    54a8:	2202      	movs	r2, #2
    54aa:	759a      	strb	r2, [r3, #22]
}
    54ac:	bf00      	nop
    54ae:	370c      	adds	r7, #12
    54b0:	46bd      	mov	sp, r7
    54b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    54b6:	4770      	bx	lr

000054b8 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    54b8:	b480      	push	{r7}
    54ba:	b083      	sub	sp, #12
    54bc:	af00      	add	r7, sp, #0
    54be:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    54c0:	687b      	ldr	r3, [r7, #4]
    54c2:	2202      	movs	r2, #2
    54c4:	751a      	strb	r2, [r3, #20]
}
    54c6:	bf00      	nop
    54c8:	370c      	adds	r7, #12
    54ca:	46bd      	mov	sp, r7
    54cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    54d0:	4770      	bx	lr

000054d2 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    54d2:	b480      	push	{r7}
    54d4:	b083      	sub	sp, #12
    54d6:	af00      	add	r7, sp, #0
    54d8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    54da:	687b      	ldr	r3, [r7, #4]
    54dc:	2204      	movs	r2, #4
    54de:	759a      	strb	r2, [r3, #22]
}
    54e0:	bf00      	nop
    54e2:	370c      	adds	r7, #12
    54e4:	46bd      	mov	sp, r7
    54e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ea:	4770      	bx	lr

000054ec <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    54ec:	b480      	push	{r7}
    54ee:	b083      	sub	sp, #12
    54f0:	af00      	add	r7, sp, #0
    54f2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    54f4:	687b      	ldr	r3, [r7, #4]
    54f6:	2204      	movs	r2, #4
    54f8:	751a      	strb	r2, [r3, #20]
}
    54fa:	bf00      	nop
    54fc:	370c      	adds	r7, #12
    54fe:	46bd      	mov	sp, r7
    5500:	f85d 7b04 	ldr.w	r7, [sp], #4
    5504:	4770      	bx	lr

00005506 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    5506:	b480      	push	{r7}
    5508:	b083      	sub	sp, #12
    550a:	af00      	add	r7, sp, #0
    550c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    550e:	687b      	ldr	r3, [r7, #4]
    5510:	7d9b      	ldrb	r3, [r3, #22]
    5512:	b2db      	uxtb	r3, r3
}
    5514:	4618      	mov	r0, r3
    5516:	370c      	adds	r7, #12
    5518:	46bd      	mov	sp, r7
    551a:	f85d 7b04 	ldr.w	r7, [sp], #4
    551e:	4770      	bx	lr

00005520 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5520:	b580      	push	{r7, lr}
    5522:	b082      	sub	sp, #8
    5524:	af00      	add	r7, sp, #0
    5526:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    5528:	687b      	ldr	r3, [r7, #4]
    552a:	681b      	ldr	r3, [r3, #0]
    552c:	f043 0202 	orr.w	r2, r3, #2
    5530:	687b      	ldr	r3, [r7, #4]
    5532:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5534:	2103      	movs	r1, #3
    5536:	6878      	ldr	r0, [r7, #4]
    5538:	4b02      	ldr	r3, [pc, #8]	; (5544 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    553a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    553c:	bf00      	nop
    553e:	3708      	adds	r7, #8
    5540:	46bd      	mov	sp, r7
    5542:	bd80      	pop	{r7, pc}
    5544:	00005271 	.word	0x00005271

00005548 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5548:	b580      	push	{r7, lr}
    554a:	b082      	sub	sp, #8
    554c:	af00      	add	r7, sp, #0
    554e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5550:	687b      	ldr	r3, [r7, #4]
    5552:	681b      	ldr	r3, [r3, #0]
    5554:	f023 0202 	bic.w	r2, r3, #2
    5558:	687b      	ldr	r3, [r7, #4]
    555a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    555c:	2103      	movs	r1, #3
    555e:	6878      	ldr	r0, [r7, #4]
    5560:	4b02      	ldr	r3, [pc, #8]	; (556c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5562:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5564:	bf00      	nop
    5566:	3708      	adds	r7, #8
    5568:	46bd      	mov	sp, r7
    556a:	bd80      	pop	{r7, pc}
    556c:	00005271 	.word	0x00005271

00005570 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5570:	b480      	push	{r7}
    5572:	b085      	sub	sp, #20
    5574:	af00      	add	r7, sp, #0
    5576:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5578:	687b      	ldr	r3, [r7, #4]
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    557e:	68fb      	ldr	r3, [r7, #12]
    5580:	0edb      	lsrs	r3, r3, #27
    5582:	f003 0301 	and.w	r3, r3, #1
    5586:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5588:	68fb      	ldr	r3, [r7, #12]
    558a:	2b00      	cmp	r3, #0
    558c:	bf14      	ite	ne
    558e:	2301      	movne	r3, #1
    5590:	2300      	moveq	r3, #0
    5592:	b2db      	uxtb	r3, r3
}
    5594:	4618      	mov	r0, r3
    5596:	3714      	adds	r7, #20
    5598:	46bd      	mov	sp, r7
    559a:	f85d 7b04 	ldr.w	r7, [sp], #4
    559e:	4770      	bx	lr

000055a0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    55a0:	b580      	push	{r7, lr}
    55a2:	b084      	sub	sp, #16
    55a4:	af00      	add	r7, sp, #0
    55a6:	6078      	str	r0, [r7, #4]
    55a8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    55aa:	2103      	movs	r1, #3
    55ac:	6878      	ldr	r0, [r7, #4]
    55ae:	4b07      	ldr	r3, [pc, #28]	; (55cc <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    55b0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    55b2:	687b      	ldr	r3, [r7, #4]
    55b4:	681b      	ldr	r3, [r3, #0]
    55b6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    55b8:	68fa      	ldr	r2, [r7, #12]
    55ba:	683b      	ldr	r3, [r7, #0]
    55bc:	4013      	ands	r3, r2
    55be:	60fb      	str	r3, [r7, #12]
	return tmp;
    55c0:	68fb      	ldr	r3, [r7, #12]
}
    55c2:	4618      	mov	r0, r3
    55c4:	3710      	adds	r7, #16
    55c6:	46bd      	mov	sp, r7
    55c8:	bd80      	pop	{r7, pc}
    55ca:	bf00      	nop
    55cc:	00005271 	.word	0x00005271

000055d0 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    55d0:	b580      	push	{r7, lr}
    55d2:	b082      	sub	sp, #8
    55d4:	af00      	add	r7, sp, #0
    55d6:	6078      	str	r0, [r7, #4]
    55d8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    55da:	687b      	ldr	r3, [r7, #4]
    55dc:	683a      	ldr	r2, [r7, #0]
    55de:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    55e0:	2103      	movs	r1, #3
    55e2:	6878      	ldr	r0, [r7, #4]
    55e4:	4b02      	ldr	r3, [pc, #8]	; (55f0 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    55e6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    55e8:	bf00      	nop
    55ea:	3708      	adds	r7, #8
    55ec:	46bd      	mov	sp, r7
    55ee:	bd80      	pop	{r7, pc}
    55f0:	00005271 	.word	0x00005271

000055f4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    55f4:	b580      	push	{r7, lr}
    55f6:	b084      	sub	sp, #16
    55f8:	af00      	add	r7, sp, #0
    55fa:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    55fc:	2103      	movs	r1, #3
    55fe:	6878      	ldr	r0, [r7, #4]
    5600:	4b09      	ldr	r3, [pc, #36]	; (5628 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5602:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	681b      	ldr	r3, [r3, #0]
    5608:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    560a:	68fb      	ldr	r3, [r7, #12]
    560c:	085b      	lsrs	r3, r3, #1
    560e:	f003 0301 	and.w	r3, r3, #1
    5612:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5614:	68fb      	ldr	r3, [r7, #12]
    5616:	2b00      	cmp	r3, #0
    5618:	bf14      	ite	ne
    561a:	2301      	movne	r3, #1
    561c:	2300      	moveq	r3, #0
    561e:	b2db      	uxtb	r3, r3
}
    5620:	4618      	mov	r0, r3
    5622:	3710      	adds	r7, #16
    5624:	46bd      	mov	sp, r7
    5626:	bd80      	pop	{r7, pc}
    5628:	000052bd 	.word	0x000052bd

0000562c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    562c:	b580      	push	{r7, lr}
    562e:	b082      	sub	sp, #8
    5630:	af00      	add	r7, sp, #0
    5632:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5634:	687b      	ldr	r3, [r7, #4]
    5636:	681b      	ldr	r3, [r3, #0]
    5638:	f023 0202 	bic.w	r2, r3, #2
    563c:	687b      	ldr	r3, [r7, #4]
    563e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5640:	2103      	movs	r1, #3
    5642:	6878      	ldr	r0, [r7, #4]
    5644:	4b02      	ldr	r3, [pc, #8]	; (5650 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5646:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5648:	bf00      	nop
    564a:	3708      	adds	r7, #8
    564c:	46bd      	mov	sp, r7
    564e:	bd80      	pop	{r7, pc}
    5650:	000052bd 	.word	0x000052bd

00005654 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5654:	b580      	push	{r7, lr}
    5656:	b084      	sub	sp, #16
    5658:	af00      	add	r7, sp, #0
    565a:	6078      	str	r0, [r7, #4]
    565c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    565e:	2103      	movs	r1, #3
    5660:	6878      	ldr	r0, [r7, #4]
    5662:	4b07      	ldr	r3, [pc, #28]	; (5680 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5664:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	681b      	ldr	r3, [r3, #0]
    566a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    566c:	68fa      	ldr	r2, [r7, #12]
    566e:	683b      	ldr	r3, [r7, #0]
    5670:	4013      	ands	r3, r2
    5672:	60fb      	str	r3, [r7, #12]
	return tmp;
    5674:	68fb      	ldr	r3, [r7, #12]
}
    5676:	4618      	mov	r0, r3
    5678:	3710      	adds	r7, #16
    567a:	46bd      	mov	sp, r7
    567c:	bd80      	pop	{r7, pc}
    567e:	bf00      	nop
    5680:	000052bd 	.word	0x000052bd

00005684 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5684:	b580      	push	{r7, lr}
    5686:	b082      	sub	sp, #8
    5688:	af00      	add	r7, sp, #0
    568a:	6078      	str	r0, [r7, #4]
    568c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    568e:	687b      	ldr	r3, [r7, #4]
    5690:	683a      	ldr	r2, [r7, #0]
    5692:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5694:	2103      	movs	r1, #3
    5696:	6878      	ldr	r0, [r7, #4]
    5698:	4b02      	ldr	r3, [pc, #8]	; (56a4 <hri_sercomspi_write_CTRLA_reg+0x20>)
    569a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    569c:	bf00      	nop
    569e:	3708      	adds	r7, #8
    56a0:	46bd      	mov	sp, r7
    56a2:	bd80      	pop	{r7, pc}
    56a4:	000052bd 	.word	0x000052bd

000056a8 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    56a8:	b580      	push	{r7, lr}
    56aa:	b082      	sub	sp, #8
    56ac:	af00      	add	r7, sp, #0
    56ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    56b0:	687b      	ldr	r3, [r7, #4]
    56b2:	685b      	ldr	r3, [r3, #4]
    56b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    56b8:	687b      	ldr	r3, [r7, #4]
    56ba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    56bc:	2104      	movs	r1, #4
    56be:	6878      	ldr	r0, [r7, #4]
    56c0:	4b02      	ldr	r3, [pc, #8]	; (56cc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    56c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    56c4:	bf00      	nop
    56c6:	3708      	adds	r7, #8
    56c8:	46bd      	mov	sp, r7
    56ca:	bd80      	pop	{r7, pc}
    56cc:	00005271 	.word	0x00005271

000056d0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    56d0:	b580      	push	{r7, lr}
    56d2:	b082      	sub	sp, #8
    56d4:	af00      	add	r7, sp, #0
    56d6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    56d8:	687b      	ldr	r3, [r7, #4]
    56da:	685b      	ldr	r3, [r3, #4]
    56dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    56e0:	687b      	ldr	r3, [r7, #4]
    56e2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    56e4:	2104      	movs	r1, #4
    56e6:	6878      	ldr	r0, [r7, #4]
    56e8:	4b02      	ldr	r3, [pc, #8]	; (56f4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    56ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    56ec:	bf00      	nop
    56ee:	3708      	adds	r7, #8
    56f0:	46bd      	mov	sp, r7
    56f2:	bd80      	pop	{r7, pc}
    56f4:	00005271 	.word	0x00005271

000056f8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    56f8:	b580      	push	{r7, lr}
    56fa:	b082      	sub	sp, #8
    56fc:	af00      	add	r7, sp, #0
    56fe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5700:	687b      	ldr	r3, [r7, #4]
    5702:	685b      	ldr	r3, [r3, #4]
    5704:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5708:	687b      	ldr	r3, [r7, #4]
    570a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    570c:	2104      	movs	r1, #4
    570e:	6878      	ldr	r0, [r7, #4]
    5710:	4b02      	ldr	r3, [pc, #8]	; (571c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5712:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5714:	bf00      	nop
    5716:	3708      	adds	r7, #8
    5718:	46bd      	mov	sp, r7
    571a:	bd80      	pop	{r7, pc}
    571c:	00005271 	.word	0x00005271

00005720 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5720:	b580      	push	{r7, lr}
    5722:	b082      	sub	sp, #8
    5724:	af00      	add	r7, sp, #0
    5726:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5728:	687b      	ldr	r3, [r7, #4]
    572a:	685b      	ldr	r3, [r3, #4]
    572c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5730:	687b      	ldr	r3, [r7, #4]
    5732:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5734:	2104      	movs	r1, #4
    5736:	6878      	ldr	r0, [r7, #4]
    5738:	4b02      	ldr	r3, [pc, #8]	; (5744 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    573a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    573c:	bf00      	nop
    573e:	3708      	adds	r7, #8
    5740:	46bd      	mov	sp, r7
    5742:	bd80      	pop	{r7, pc}
    5744:	00005271 	.word	0x00005271

00005748 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5748:	b580      	push	{r7, lr}
    574a:	b082      	sub	sp, #8
    574c:	af00      	add	r7, sp, #0
    574e:	6078      	str	r0, [r7, #4]
    5750:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5752:	687b      	ldr	r3, [r7, #4]
    5754:	685a      	ldr	r2, [r3, #4]
    5756:	683b      	ldr	r3, [r7, #0]
    5758:	041b      	lsls	r3, r3, #16
    575a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    575e:	431a      	orrs	r2, r3
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5764:	2104      	movs	r1, #4
    5766:	6878      	ldr	r0, [r7, #4]
    5768:	4b02      	ldr	r3, [pc, #8]	; (5774 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    576a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    576c:	bf00      	nop
    576e:	3708      	adds	r7, #8
    5770:	46bd      	mov	sp, r7
    5772:	bd80      	pop	{r7, pc}
    5774:	00005271 	.word	0x00005271

00005778 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5778:	b580      	push	{r7, lr}
    577a:	b082      	sub	sp, #8
    577c:	af00      	add	r7, sp, #0
    577e:	6078      	str	r0, [r7, #4]
    5780:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5782:	687b      	ldr	r3, [r7, #4]
    5784:	683a      	ldr	r2, [r7, #0]
    5786:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5788:	2104      	movs	r1, #4
    578a:	6878      	ldr	r0, [r7, #4]
    578c:	4b02      	ldr	r3, [pc, #8]	; (5798 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    578e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5790:	bf00      	nop
    5792:	3708      	adds	r7, #8
    5794:	46bd      	mov	sp, r7
    5796:	bd80      	pop	{r7, pc}
    5798:	00005271 	.word	0x00005271

0000579c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    579c:	b580      	push	{r7, lr}
    579e:	b082      	sub	sp, #8
    57a0:	af00      	add	r7, sp, #0
    57a2:	6078      	str	r0, [r7, #4]
    57a4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    57a6:	687b      	ldr	r3, [r7, #4]
    57a8:	683a      	ldr	r2, [r7, #0]
    57aa:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    57ac:	2117      	movs	r1, #23
    57ae:	6878      	ldr	r0, [r7, #4]
    57b0:	4b02      	ldr	r3, [pc, #8]	; (57bc <hri_sercomspi_write_CTRLB_reg+0x20>)
    57b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    57b4:	bf00      	nop
    57b6:	3708      	adds	r7, #8
    57b8:	46bd      	mov	sp, r7
    57ba:	bd80      	pop	{r7, pc}
    57bc:	000052bd 	.word	0x000052bd

000057c0 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    57c0:	b480      	push	{r7}
    57c2:	b083      	sub	sp, #12
    57c4:	af00      	add	r7, sp, #0
    57c6:	6078      	str	r0, [r7, #4]
    57c8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    57ca:	687b      	ldr	r3, [r7, #4]
    57cc:	683a      	ldr	r2, [r7, #0]
    57ce:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    57d0:	bf00      	nop
    57d2:	370c      	adds	r7, #12
    57d4:	46bd      	mov	sp, r7
    57d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57da:	4770      	bx	lr

000057dc <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    57dc:	b480      	push	{r7}
    57de:	b083      	sub	sp, #12
    57e0:	af00      	add	r7, sp, #0
    57e2:	6078      	str	r0, [r7, #4]
    57e4:	460b      	mov	r3, r1
    57e6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    57e8:	687b      	ldr	r3, [r7, #4]
    57ea:	78fa      	ldrb	r2, [r7, #3]
    57ec:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    57ee:	bf00      	nop
    57f0:	370c      	adds	r7, #12
    57f2:	46bd      	mov	sp, r7
    57f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    57f8:	4770      	bx	lr
	...

000057fc <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    57fc:	b580      	push	{r7, lr}
    57fe:	b084      	sub	sp, #16
    5800:	af00      	add	r7, sp, #0
    5802:	6078      	str	r0, [r7, #4]
    5804:	460b      	mov	r3, r1
    5806:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5808:	687b      	ldr	r3, [r7, #4]
    580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    580c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    580e:	68fb      	ldr	r3, [r7, #12]
    5810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5814:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5816:	78fb      	ldrb	r3, [r7, #3]
    5818:	039b      	lsls	r3, r3, #14
    581a:	461a      	mov	r2, r3
    581c:	68fb      	ldr	r3, [r7, #12]
    581e:	4313      	orrs	r3, r2
    5820:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5822:	687b      	ldr	r3, [r7, #4]
    5824:	68fa      	ldr	r2, [r7, #12]
    5826:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5828:	2104      	movs	r1, #4
    582a:	6878      	ldr	r0, [r7, #4]
    582c:	4b02      	ldr	r3, [pc, #8]	; (5838 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    582e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5830:	bf00      	nop
    5832:	3710      	adds	r7, #16
    5834:	46bd      	mov	sp, r7
    5836:	bd80      	pop	{r7, pc}
    5838:	00005271 	.word	0x00005271

0000583c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    583c:	b580      	push	{r7, lr}
    583e:	b082      	sub	sp, #8
    5840:	af00      	add	r7, sp, #0
    5842:	6078      	str	r0, [r7, #4]
    5844:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5846:	687b      	ldr	r3, [r7, #4]
    5848:	683a      	ldr	r2, [r7, #0]
    584a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    584c:	2104      	movs	r1, #4
    584e:	6878      	ldr	r0, [r7, #4]
    5850:	4b02      	ldr	r3, [pc, #8]	; (585c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5852:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5854:	bf00      	nop
    5856:	3708      	adds	r7, #8
    5858:	46bd      	mov	sp, r7
    585a:	bd80      	pop	{r7, pc}
    585c:	00005271 	.word	0x00005271

00005860 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5860:	b580      	push	{r7, lr}
    5862:	b082      	sub	sp, #8
    5864:	af00      	add	r7, sp, #0
    5866:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5868:	2104      	movs	r1, #4
    586a:	6878      	ldr	r0, [r7, #4]
    586c:	4b03      	ldr	r3, [pc, #12]	; (587c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    586e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5870:	687b      	ldr	r3, [r7, #4]
    5872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5874:	4618      	mov	r0, r3
    5876:	3708      	adds	r7, #8
    5878:	46bd      	mov	sp, r7
    587a:	bd80      	pop	{r7, pc}
    587c:	00005271 	.word	0x00005271

00005880 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5880:	b480      	push	{r7}
    5882:	b083      	sub	sp, #12
    5884:	af00      	add	r7, sp, #0
    5886:	6078      	str	r0, [r7, #4]
    5888:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    588a:	687b      	ldr	r3, [r7, #4]
    588c:	683a      	ldr	r2, [r7, #0]
    588e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5890:	bf00      	nop
    5892:	370c      	adds	r7, #12
    5894:	46bd      	mov	sp, r7
    5896:	f85d 7b04 	ldr.w	r7, [sp], #4
    589a:	4770      	bx	lr

0000589c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    589c:	b580      	push	{r7, lr}
    589e:	b082      	sub	sp, #8
    58a0:	af00      	add	r7, sp, #0
    58a2:	6078      	str	r0, [r7, #4]
    58a4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	683a      	ldr	r2, [r7, #0]
    58aa:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    58ac:	2104      	movs	r1, #4
    58ae:	6878      	ldr	r0, [r7, #4]
    58b0:	4b02      	ldr	r3, [pc, #8]	; (58bc <hri_sercomi2cm_write_DATA_reg+0x20>)
    58b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    58b4:	bf00      	nop
    58b6:	3708      	adds	r7, #8
    58b8:	46bd      	mov	sp, r7
    58ba:	bd80      	pop	{r7, pc}
    58bc:	00005271 	.word	0x00005271

000058c0 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    58c0:	b580      	push	{r7, lr}
    58c2:	b082      	sub	sp, #8
    58c4:	af00      	add	r7, sp, #0
    58c6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    58c8:	2104      	movs	r1, #4
    58ca:	6878      	ldr	r0, [r7, #4]
    58cc:	4b03      	ldr	r3, [pc, #12]	; (58dc <hri_sercomi2cm_read_DATA_reg+0x1c>)
    58ce:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    58d0:	687b      	ldr	r3, [r7, #4]
    58d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    58d4:	4618      	mov	r0, r3
    58d6:	3708      	adds	r7, #8
    58d8:	46bd      	mov	sp, r7
    58da:	bd80      	pop	{r7, pc}
    58dc:	00005271 	.word	0x00005271

000058e0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    58e0:	b480      	push	{r7}
    58e2:	b083      	sub	sp, #12
    58e4:	af00      	add	r7, sp, #0
    58e6:	6078      	str	r0, [r7, #4]
    58e8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    58ea:	687b      	ldr	r3, [r7, #4]
    58ec:	683a      	ldr	r2, [r7, #0]
    58ee:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    58f0:	bf00      	nop
    58f2:	370c      	adds	r7, #12
    58f4:	46bd      	mov	sp, r7
    58f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    58fa:	4770      	bx	lr

000058fc <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    58fc:	b480      	push	{r7}
    58fe:	b083      	sub	sp, #12
    5900:	af00      	add	r7, sp, #0
    5902:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5904:	687b      	ldr	r3, [r7, #4]
    5906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5908:	4618      	mov	r0, r3
    590a:	370c      	adds	r7, #12
    590c:	46bd      	mov	sp, r7
    590e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5912:	4770      	bx	lr

00005914 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5914:	b480      	push	{r7}
    5916:	b083      	sub	sp, #12
    5918:	af00      	add	r7, sp, #0
    591a:	6078      	str	r0, [r7, #4]
    591c:	460b      	mov	r3, r1
    591e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5920:	687b      	ldr	r3, [r7, #4]
    5922:	78fa      	ldrb	r2, [r7, #3]
    5924:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5928:	bf00      	nop
    592a:	370c      	adds	r7, #12
    592c:	46bd      	mov	sp, r7
    592e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5932:	4770      	bx	lr

00005934 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5934:	b480      	push	{r7}
    5936:	b083      	sub	sp, #12
    5938:	af00      	add	r7, sp, #0
    593a:	6078      	str	r0, [r7, #4]
    593c:	460b      	mov	r3, r1
    593e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5940:	687b      	ldr	r3, [r7, #4]
    5942:	887a      	ldrh	r2, [r7, #2]
    5944:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5946:	bf00      	nop
    5948:	370c      	adds	r7, #12
    594a:	46bd      	mov	sp, r7
    594c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5950:	4770      	bx	lr
	...

00005954 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    5954:	b580      	push	{r7, lr}
    5956:	b082      	sub	sp, #8
    5958:	af00      	add	r7, sp, #0
    595a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    595c:	2104      	movs	r1, #4
    595e:	6878      	ldr	r0, [r7, #4]
    5960:	4b06      	ldr	r3, [pc, #24]	; (597c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    5962:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    5964:	687b      	ldr	r3, [r7, #4]
    5966:	8b5b      	ldrh	r3, [r3, #26]
    5968:	b29b      	uxth	r3, r3
    596a:	091b      	lsrs	r3, r3, #4
    596c:	b29b      	uxth	r3, r3
    596e:	f003 0303 	and.w	r3, r3, #3
    5972:	b29b      	uxth	r3, r3
}
    5974:	4618      	mov	r0, r3
    5976:	3708      	adds	r7, #8
    5978:	46bd      	mov	sp, r7
    597a:	bd80      	pop	{r7, pc}
    597c:	00005271 	.word	0x00005271

00005980 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5980:	b580      	push	{r7, lr}
    5982:	b082      	sub	sp, #8
    5984:	af00      	add	r7, sp, #0
    5986:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5988:	2104      	movs	r1, #4
    598a:	6878      	ldr	r0, [r7, #4]
    598c:	4b04      	ldr	r3, [pc, #16]	; (59a0 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    598e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	8b5b      	ldrh	r3, [r3, #26]
    5994:	b29b      	uxth	r3, r3
}
    5996:	4618      	mov	r0, r3
    5998:	3708      	adds	r7, #8
    599a:	46bd      	mov	sp, r7
    599c:	bd80      	pop	{r7, pc}
    599e:	bf00      	nop
    59a0:	00005271 	.word	0x00005271

000059a4 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    59a4:	b580      	push	{r7, lr}
    59a6:	b082      	sub	sp, #8
    59a8:	af00      	add	r7, sp, #0
    59aa:	6078      	str	r0, [r7, #4]
    59ac:	460b      	mov	r3, r1
    59ae:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    59b0:	687b      	ldr	r3, [r7, #4]
    59b2:	887a      	ldrh	r2, [r7, #2]
    59b4:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    59b6:	2104      	movs	r1, #4
    59b8:	6878      	ldr	r0, [r7, #4]
    59ba:	4b03      	ldr	r3, [pc, #12]	; (59c8 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    59bc:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    59be:	bf00      	nop
    59c0:	3708      	adds	r7, #8
    59c2:	46bd      	mov	sp, r7
    59c4:	bd80      	pop	{r7, pc}
    59c6:	bf00      	nop
    59c8:	00005271 	.word	0x00005271

000059cc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    59cc:	b4b0      	push	{r4, r5, r7}
    59ce:	b08d      	sub	sp, #52	; 0x34
    59d0:	af00      	add	r7, sp, #0
    59d2:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    59d4:	4b13      	ldr	r3, [pc, #76]	; (5a24 <_sercom_get_hardware_index+0x58>)
    59d6:	f107 040c 	add.w	r4, r7, #12
    59da:	461d      	mov	r5, r3
    59dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    59de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    59e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    59e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    59e8:	2300      	movs	r3, #0
    59ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    59ec:	e010      	b.n	5a10 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    59ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    59f0:	009b      	lsls	r3, r3, #2
    59f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    59f6:	4413      	add	r3, r2
    59f8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    59fc:	461a      	mov	r2, r3
    59fe:	687b      	ldr	r3, [r7, #4]
    5a00:	429a      	cmp	r2, r3
    5a02:	d102      	bne.n	5a0a <_sercom_get_hardware_index+0x3e>
			return i;
    5a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5a06:	b2db      	uxtb	r3, r3
    5a08:	e006      	b.n	5a18 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5a0c:	3301      	adds	r3, #1
    5a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    5a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5a12:	2b07      	cmp	r3, #7
    5a14:	d9eb      	bls.n	59ee <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    5a16:	2300      	movs	r3, #0
}
    5a18:	4618      	mov	r0, r3
    5a1a:	3734      	adds	r7, #52	; 0x34
    5a1c:	46bd      	mov	sp, r7
    5a1e:	bcb0      	pop	{r4, r5, r7}
    5a20:	4770      	bx	lr
    5a22:	bf00      	nop
    5a24:	0000ce50 	.word	0x0000ce50

00005a28 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    5a28:	b480      	push	{r7}
    5a2a:	b083      	sub	sp, #12
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	6078      	str	r0, [r7, #4]
    5a30:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    5a32:	687b      	ldr	r3, [r7, #4]
    5a34:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    5a38:	d102      	bne.n	5a40 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    5a3a:	4a0b      	ldr	r2, [pc, #44]	; (5a68 <_sercom_init_irq_param+0x40>)
    5a3c:	683b      	ldr	r3, [r7, #0]
    5a3e:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    5a40:	687b      	ldr	r3, [r7, #4]
    5a42:	4a0a      	ldr	r2, [pc, #40]	; (5a6c <_sercom_init_irq_param+0x44>)
    5a44:	4293      	cmp	r3, r2
    5a46:	d102      	bne.n	5a4e <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    5a48:	4a09      	ldr	r2, [pc, #36]	; (5a70 <_sercom_init_irq_param+0x48>)
    5a4a:	683b      	ldr	r3, [r7, #0]
    5a4c:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	4a08      	ldr	r2, [pc, #32]	; (5a74 <_sercom_init_irq_param+0x4c>)
    5a52:	4293      	cmp	r3, r2
    5a54:	d102      	bne.n	5a5c <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    5a56:	4a08      	ldr	r2, [pc, #32]	; (5a78 <_sercom_init_irq_param+0x50>)
    5a58:	683b      	ldr	r3, [r7, #0]
    5a5a:	6013      	str	r3, [r2, #0]
	}
}
    5a5c:	bf00      	nop
    5a5e:	370c      	adds	r7, #12
    5a60:	46bd      	mov	sp, r7
    5a62:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a66:	4770      	bx	lr
    5a68:	20000670 	.word	0x20000670
    5a6c:	43000400 	.word	0x43000400
    5a70:	20000674 	.word	0x20000674
    5a74:	43000c00 	.word	0x43000c00
    5a78:	20000678 	.word	0x20000678

00005a7c <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5a7c:	b580      	push	{r7, lr}
    5a7e:	b084      	sub	sp, #16
    5a80:	af00      	add	r7, sp, #0
    5a82:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5a84:	6878      	ldr	r0, [r7, #4]
    5a86:	4b13      	ldr	r3, [pc, #76]	; (5ad4 <_get_i2cm_index+0x58>)
    5a88:	4798      	blx	r3
    5a8a:	4603      	mov	r3, r0
    5a8c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5a8e:	2300      	movs	r3, #0
    5a90:	73fb      	strb	r3, [r7, #15]
    5a92:	e010      	b.n	5ab6 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5a94:	7bfa      	ldrb	r2, [r7, #15]
    5a96:	4910      	ldr	r1, [pc, #64]	; (5ad8 <_get_i2cm_index+0x5c>)
    5a98:	4613      	mov	r3, r2
    5a9a:	005b      	lsls	r3, r3, #1
    5a9c:	4413      	add	r3, r2
    5a9e:	00db      	lsls	r3, r3, #3
    5aa0:	440b      	add	r3, r1
    5aa2:	781b      	ldrb	r3, [r3, #0]
    5aa4:	7bba      	ldrb	r2, [r7, #14]
    5aa6:	429a      	cmp	r2, r3
    5aa8:	d102      	bne.n	5ab0 <_get_i2cm_index+0x34>
			return i;
    5aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5aae:	e00d      	b.n	5acc <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5ab0:	7bfb      	ldrb	r3, [r7, #15]
    5ab2:	3301      	adds	r3, #1
    5ab4:	73fb      	strb	r3, [r7, #15]
    5ab6:	7bfb      	ldrb	r3, [r7, #15]
    5ab8:	2b01      	cmp	r3, #1
    5aba:	d9eb      	bls.n	5a94 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5abc:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    5ac0:	4906      	ldr	r1, [pc, #24]	; (5adc <_get_i2cm_index+0x60>)
    5ac2:	2000      	movs	r0, #0
    5ac4:	4b06      	ldr	r3, [pc, #24]	; (5ae0 <_get_i2cm_index+0x64>)
    5ac6:	4798      	blx	r3
	return -1;
    5ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
    5acc:	4618      	mov	r0, r3
    5ace:	3710      	adds	r7, #16
    5ad0:	46bd      	mov	sp, r7
    5ad2:	bd80      	pop	{r7, pc}
    5ad4:	000059cd 	.word	0x000059cd
    5ad8:	20000018 	.word	0x20000018
    5adc:	0000ce34 	.word	0x0000ce34
    5ae0:	00003249 	.word	0x00003249

00005ae4 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5ae4:	b580      	push	{r7, lr}
    5ae6:	b082      	sub	sp, #8
    5ae8:	af00      	add	r7, sp, #0
    5aea:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5aec:	2103      	movs	r1, #3
    5aee:	6878      	ldr	r0, [r7, #4]
    5af0:	4b02      	ldr	r3, [pc, #8]	; (5afc <_sercom_i2c_send_stop+0x18>)
    5af2:	4798      	blx	r3
}
    5af4:	bf00      	nop
    5af6:	3708      	adds	r7, #8
    5af8:	46bd      	mov	sp, r7
    5afa:	bd80      	pop	{r7, pc}
    5afc:	00005749 	.word	0x00005749

00005b00 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    5b00:	b590      	push	{r4, r7, lr}
    5b02:	b087      	sub	sp, #28
    5b04:	af00      	add	r7, sp, #0
    5b06:	60f8      	str	r0, [r7, #12]
    5b08:	60b9      	str	r1, [r7, #8]
    5b0a:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5b0c:	68f8      	ldr	r0, [r7, #12]
    5b0e:	4b7d      	ldr	r3, [pc, #500]	; (5d04 <_sercom_i2c_sync_analyse_flags+0x204>)
    5b10:	4798      	blx	r3
    5b12:	4603      	mov	r3, r0
    5b14:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    5b16:	68f8      	ldr	r0, [r7, #12]
    5b18:	4b7b      	ldr	r3, [pc, #492]	; (5d08 <_sercom_i2c_sync_analyse_flags+0x208>)
    5b1a:	4798      	blx	r3
    5b1c:	4603      	mov	r3, r0
    5b1e:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    5b20:	68bb      	ldr	r3, [r7, #8]
    5b22:	f003 0301 	and.w	r3, r3, #1
    5b26:	2b00      	cmp	r3, #0
    5b28:	f000 8095 	beq.w	5c56 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    5b2c:	8a7b      	ldrh	r3, [r7, #18]
    5b2e:	f003 0302 	and.w	r3, r3, #2
    5b32:	2b00      	cmp	r3, #0
    5b34:	d01d      	beq.n	5b72 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    5b36:	68f8      	ldr	r0, [r7, #12]
    5b38:	4b74      	ldr	r3, [pc, #464]	; (5d0c <_sercom_i2c_sync_analyse_flags+0x20c>)
    5b3a:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    5b3c:	687b      	ldr	r3, [r7, #4]
    5b3e:	885b      	ldrh	r3, [r3, #2]
    5b40:	b29b      	uxth	r3, r3
    5b42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5b46:	b29a      	uxth	r2, r3
    5b48:	687b      	ldr	r3, [r7, #4]
    5b4a:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    5b4c:	687b      	ldr	r3, [r7, #4]
    5b4e:	885b      	ldrh	r3, [r3, #2]
    5b50:	b29b      	uxth	r3, r3
    5b52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5b56:	b29a      	uxth	r2, r3
    5b58:	687b      	ldr	r3, [r7, #4]
    5b5a:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    5b5c:	8a7b      	ldrh	r3, [r7, #18]
    5b5e:	f003 0301 	and.w	r3, r3, #1
    5b62:	2b00      	cmp	r3, #0
    5b64:	d002      	beq.n	5b6c <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    5b66:	f06f 0304 	mvn.w	r3, #4
    5b6a:	e0c6      	b.n	5cfa <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    5b6c:	f06f 0303 	mvn.w	r3, #3
    5b70:	e0c3      	b.n	5cfa <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    5b72:	8a7b      	ldrh	r3, [r7, #18]
    5b74:	f003 0304 	and.w	r3, r3, #4
    5b78:	2b00      	cmp	r3, #0
    5b7a:	d01f      	beq.n	5bbc <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    5b7c:	687b      	ldr	r3, [r7, #4]
    5b7e:	685b      	ldr	r3, [r3, #4]
    5b80:	2b00      	cmp	r3, #0
    5b82:	dd07      	ble.n	5b94 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    5b84:	687b      	ldr	r3, [r7, #4]
    5b86:	885b      	ldrh	r3, [r3, #2]
    5b88:	b29b      	uxth	r3, r3
    5b8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5b8e:	b29a      	uxth	r2, r3
    5b90:	687b      	ldr	r3, [r7, #4]
    5b92:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    5b94:	687b      	ldr	r3, [r7, #4]
    5b96:	885b      	ldrh	r3, [r3, #2]
    5b98:	b29b      	uxth	r3, r3
    5b9a:	b21b      	sxth	r3, r3
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	da02      	bge.n	5ba6 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    5ba0:	68f8      	ldr	r0, [r7, #12]
    5ba2:	4b5b      	ldr	r3, [pc, #364]	; (5d10 <_sercom_i2c_sync_analyse_flags+0x210>)
    5ba4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5ba6:	687b      	ldr	r3, [r7, #4]
    5ba8:	885b      	ldrh	r3, [r3, #2]
    5baa:	b29b      	uxth	r3, r3
    5bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5bb0:	b29a      	uxth	r2, r3
    5bb2:	687b      	ldr	r3, [r7, #4]
    5bb4:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    5bb6:	f06f 0301 	mvn.w	r3, #1
    5bba:	e09e      	b.n	5cfa <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    5bbc:	687b      	ldr	r3, [r7, #4]
    5bbe:	885b      	ldrh	r3, [r3, #2]
    5bc0:	b29b      	uxth	r3, r3
    5bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5bc6:	2b00      	cmp	r3, #0
    5bc8:	d01c      	beq.n	5c04 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    5bca:	687b      	ldr	r3, [r7, #4]
    5bcc:	881b      	ldrh	r3, [r3, #0]
    5bce:	121b      	asrs	r3, r3, #8
    5bd0:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5bd2:	f003 0406 	and.w	r4, r3, #6
    5bd6:	68f8      	ldr	r0, [r7, #12]
    5bd8:	4b4e      	ldr	r3, [pc, #312]	; (5d14 <_sercom_i2c_sync_analyse_flags+0x214>)
    5bda:	4798      	blx	r3
    5bdc:	4603      	mov	r3, r0
    5bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5be2:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    5be4:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    5be8:	4619      	mov	r1, r3
    5bea:	68f8      	ldr	r0, [r7, #12]
    5bec:	4b4a      	ldr	r3, [pc, #296]	; (5d18 <_sercom_i2c_sync_analyse_flags+0x218>)
    5bee:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    5bf0:	687b      	ldr	r3, [r7, #4]
    5bf2:	885b      	ldrh	r3, [r3, #2]
    5bf4:	b29b      	uxth	r3, r3
    5bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    5bfa:	b29a      	uxth	r2, r3
    5bfc:	687b      	ldr	r3, [r7, #4]
    5bfe:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    5c00:	2300      	movs	r3, #0
    5c02:	e07a      	b.n	5cfa <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    5c04:	687b      	ldr	r3, [r7, #4]
    5c06:	685b      	ldr	r3, [r3, #4]
    5c08:	2b00      	cmp	r3, #0
    5c0a:	d111      	bne.n	5c30 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    5c0c:	687b      	ldr	r3, [r7, #4]
    5c0e:	885b      	ldrh	r3, [r3, #2]
    5c10:	b29b      	uxth	r3, r3
    5c12:	b21b      	sxth	r3, r3
    5c14:	2b00      	cmp	r3, #0
    5c16:	da02      	bge.n	5c1e <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    5c18:	68f8      	ldr	r0, [r7, #12]
    5c1a:	4b3d      	ldr	r3, [pc, #244]	; (5d10 <_sercom_i2c_sync_analyse_flags+0x210>)
    5c1c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5c1e:	687b      	ldr	r3, [r7, #4]
    5c20:	885b      	ldrh	r3, [r3, #2]
    5c22:	b29b      	uxth	r3, r3
    5c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5c28:	b29a      	uxth	r2, r3
    5c2a:	687b      	ldr	r3, [r7, #4]
    5c2c:	805a      	strh	r2, [r3, #2]
    5c2e:	e010      	b.n	5c52 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    5c30:	687b      	ldr	r3, [r7, #4]
    5c32:	689b      	ldr	r3, [r3, #8]
    5c34:	781b      	ldrb	r3, [r3, #0]
    5c36:	4619      	mov	r1, r3
    5c38:	68f8      	ldr	r0, [r7, #12]
    5c3a:	4b38      	ldr	r3, [pc, #224]	; (5d1c <_sercom_i2c_sync_analyse_flags+0x21c>)
    5c3c:	4798      	blx	r3
				msg->buffer++;
    5c3e:	687b      	ldr	r3, [r7, #4]
    5c40:	689b      	ldr	r3, [r3, #8]
    5c42:	1c5a      	adds	r2, r3, #1
    5c44:	687b      	ldr	r3, [r7, #4]
    5c46:	609a      	str	r2, [r3, #8]
				msg->len--;
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	685b      	ldr	r3, [r3, #4]
    5c4c:	1e5a      	subs	r2, r3, #1
    5c4e:	687b      	ldr	r3, [r7, #4]
    5c50:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    5c52:	2300      	movs	r3, #0
    5c54:	e051      	b.n	5cfa <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    5c56:	68bb      	ldr	r3, [r7, #8]
    5c58:	f003 0302 	and.w	r3, r3, #2
    5c5c:	2b00      	cmp	r3, #0
    5c5e:	d04b      	beq.n	5cf8 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    5c60:	687b      	ldr	r3, [r7, #4]
    5c62:	685b      	ldr	r3, [r3, #4]
    5c64:	2b00      	cmp	r3, #0
    5c66:	d041      	beq.n	5cec <_sercom_i2c_sync_analyse_flags+0x1ec>
    5c68:	8a7b      	ldrh	r3, [r7, #18]
    5c6a:	f003 0304 	and.w	r3, r3, #4
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d13c      	bne.n	5cec <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    5c72:	687b      	ldr	r3, [r7, #4]
    5c74:	685b      	ldr	r3, [r3, #4]
    5c76:	1e5a      	subs	r2, r3, #1
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    5c7c:	687b      	ldr	r3, [r7, #4]
    5c7e:	685b      	ldr	r3, [r3, #4]
    5c80:	2b00      	cmp	r3, #0
    5c82:	d102      	bne.n	5c8a <_sercom_i2c_sync_analyse_flags+0x18a>
    5c84:	697b      	ldr	r3, [r7, #20]
    5c86:	2b00      	cmp	r3, #0
    5c88:	d006      	beq.n	5c98 <_sercom_i2c_sync_analyse_flags+0x198>
    5c8a:	687b      	ldr	r3, [r7, #4]
    5c8c:	685b      	ldr	r3, [r3, #4]
    5c8e:	2b01      	cmp	r3, #1
    5c90:	d105      	bne.n	5c9e <_sercom_i2c_sync_analyse_flags+0x19e>
    5c92:	697b      	ldr	r3, [r7, #20]
    5c94:	2b00      	cmp	r3, #0
    5c96:	d002      	beq.n	5c9e <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    5c98:	68f8      	ldr	r0, [r7, #12]
    5c9a:	4b21      	ldr	r3, [pc, #132]	; (5d20 <_sercom_i2c_sync_analyse_flags+0x220>)
    5c9c:	4798      	blx	r3
			}

			if (msg->len == 0) {
    5c9e:	687b      	ldr	r3, [r7, #4]
    5ca0:	685b      	ldr	r3, [r3, #4]
    5ca2:	2b00      	cmp	r3, #0
    5ca4:	d113      	bne.n	5cce <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    5ca6:	687b      	ldr	r3, [r7, #4]
    5ca8:	885b      	ldrh	r3, [r3, #2]
    5caa:	b29b      	uxth	r3, r3
    5cac:	b21b      	sxth	r3, r3
    5cae:	2b00      	cmp	r3, #0
    5cb0:	da05      	bge.n	5cbe <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    5cb2:	68f8      	ldr	r0, [r7, #12]
    5cb4:	4b1b      	ldr	r3, [pc, #108]	; (5d24 <_sercom_i2c_sync_analyse_flags+0x224>)
    5cb6:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    5cb8:	68f8      	ldr	r0, [r7, #12]
    5cba:	4b15      	ldr	r3, [pc, #84]	; (5d10 <_sercom_i2c_sync_analyse_flags+0x210>)
    5cbc:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5cbe:	687b      	ldr	r3, [r7, #4]
    5cc0:	885b      	ldrh	r3, [r3, #2]
    5cc2:	b29b      	uxth	r3, r3
    5cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5cc8:	b29a      	uxth	r2, r3
    5cca:	687b      	ldr	r3, [r7, #4]
    5ccc:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    5cce:	687b      	ldr	r3, [r7, #4]
    5cd0:	689c      	ldr	r4, [r3, #8]
    5cd2:	1c62      	adds	r2, r4, #1
    5cd4:	687b      	ldr	r3, [r7, #4]
    5cd6:	609a      	str	r2, [r3, #8]
    5cd8:	68f8      	ldr	r0, [r7, #12]
    5cda:	4b13      	ldr	r3, [pc, #76]	; (5d28 <_sercom_i2c_sync_analyse_flags+0x228>)
    5cdc:	4798      	blx	r3
    5cde:	4603      	mov	r3, r0
    5ce0:	b2db      	uxtb	r3, r3
    5ce2:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    5ce4:	68f8      	ldr	r0, [r7, #12]
    5ce6:	4b11      	ldr	r3, [pc, #68]	; (5d2c <_sercom_i2c_sync_analyse_flags+0x22c>)
    5ce8:	4798      	blx	r3
    5cea:	e005      	b.n	5cf8 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    5cec:	68f8      	ldr	r0, [r7, #12]
    5cee:	4b0f      	ldr	r3, [pc, #60]	; (5d2c <_sercom_i2c_sync_analyse_flags+0x22c>)
    5cf0:	4798      	blx	r3
			return I2C_NACK;
    5cf2:	f06f 0301 	mvn.w	r3, #1
    5cf6:	e000      	b.n	5cfa <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    5cf8:	2300      	movs	r3, #0
}
    5cfa:	4618      	mov	r0, r3
    5cfc:	371c      	adds	r7, #28
    5cfe:	46bd      	mov	sp, r7
    5d00:	bd90      	pop	{r4, r7, pc}
    5d02:	bf00      	nop
    5d04:	00005571 	.word	0x00005571
    5d08:	00005981 	.word	0x00005981
    5d0c:	00005309 	.word	0x00005309
    5d10:	00005ae5 	.word	0x00005ae5
    5d14:	00005861 	.word	0x00005861
    5d18:	0000583d 	.word	0x0000583d
    5d1c:	0000589d 	.word	0x0000589d
    5d20:	000056f9 	.word	0x000056f9
    5d24:	000056d1 	.word	0x000056d1
    5d28:	000058c1 	.word	0x000058c1
    5d2c:	00005323 	.word	0x00005323

00005d30 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    5d30:	b580      	push	{r7, lr}
    5d32:	b086      	sub	sp, #24
    5d34:	af00      	add	r7, sp, #0
    5d36:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    5d38:	687b      	ldr	r3, [r7, #4]
    5d3a:	691b      	ldr	r3, [r3, #16]
    5d3c:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    5d3e:	6938      	ldr	r0, [r7, #16]
    5d40:	4b37      	ldr	r3, [pc, #220]	; (5e20 <_sercom_i2c_m_irq_handler+0xf0>)
    5d42:	4798      	blx	r3
    5d44:	4603      	mov	r3, r0
    5d46:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    5d48:	2300      	movs	r3, #0
    5d4a:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    5d4c:	687b      	ldr	r3, [r7, #4]
    5d4e:	2b00      	cmp	r3, #0
    5d50:	bf14      	ite	ne
    5d52:	2301      	movne	r3, #1
    5d54:	2300      	moveq	r3, #0
    5d56:	b2db      	uxtb	r3, r3
    5d58:	f240 422a 	movw	r2, #1066	; 0x42a
    5d5c:	4931      	ldr	r1, [pc, #196]	; (5e24 <_sercom_i2c_m_irq_handler+0xf4>)
    5d5e:	4618      	mov	r0, r3
    5d60:	4b31      	ldr	r3, [pc, #196]	; (5e28 <_sercom_i2c_m_irq_handler+0xf8>)
    5d62:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    5d64:	687b      	ldr	r3, [r7, #4]
    5d66:	691b      	ldr	r3, [r3, #16]
    5d68:	2b00      	cmp	r3, #0
    5d6a:	bf14      	ite	ne
    5d6c:	2301      	movne	r3, #1
    5d6e:	2300      	moveq	r3, #0
    5d70:	b2db      	uxtb	r3, r3
    5d72:	f240 422b 	movw	r2, #1067	; 0x42b
    5d76:	492b      	ldr	r1, [pc, #172]	; (5e24 <_sercom_i2c_m_irq_handler+0xf4>)
    5d78:	4618      	mov	r0, r3
    5d7a:	4b2b      	ldr	r3, [pc, #172]	; (5e28 <_sercom_i2c_m_irq_handler+0xf8>)
    5d7c:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    5d7e:	bf00      	nop
    5d80:	68fb      	ldr	r3, [r7, #12]
    5d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5d86:	2b00      	cmp	r3, #0
    5d88:	d126      	bne.n	5dd8 <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    5d8a:	687b      	ldr	r3, [r7, #4]
    5d8c:	461a      	mov	r2, r3
    5d8e:	68f9      	ldr	r1, [r7, #12]
    5d90:	6938      	ldr	r0, [r7, #16]
    5d92:	4b26      	ldr	r3, [pc, #152]	; (5e2c <_sercom_i2c_m_irq_handler+0xfc>)
    5d94:	4798      	blx	r3
    5d96:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    5d98:	697b      	ldr	r3, [r7, #20]
    5d9a:	2b00      	cmp	r3, #0
    5d9c:	d11b      	bne.n	5dd6 <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    5d9e:	68fb      	ldr	r3, [r7, #12]
    5da0:	f003 0301 	and.w	r3, r3, #1
    5da4:	2b00      	cmp	r3, #0
    5da6:	d008      	beq.n	5dba <_sercom_i2c_m_irq_handler+0x8a>
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	699b      	ldr	r3, [r3, #24]
    5dac:	2b00      	cmp	r3, #0
    5dae:	d004      	beq.n	5dba <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    5db0:	687b      	ldr	r3, [r7, #4]
    5db2:	699b      	ldr	r3, [r3, #24]
    5db4:	6878      	ldr	r0, [r7, #4]
    5db6:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    5db8:	e02e      	b.n	5e18 <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    5dba:	68fb      	ldr	r3, [r7, #12]
    5dbc:	f003 0302 	and.w	r3, r3, #2
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	d029      	beq.n	5e18 <_sercom_i2c_m_irq_handler+0xe8>
    5dc4:	687b      	ldr	r3, [r7, #4]
    5dc6:	69db      	ldr	r3, [r3, #28]
    5dc8:	2b00      	cmp	r3, #0
    5dca:	d025      	beq.n	5e18 <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    5dcc:	687b      	ldr	r3, [r7, #4]
    5dce:	69db      	ldr	r3, [r3, #28]
    5dd0:	6878      	ldr	r0, [r7, #4]
    5dd2:	4798      	blx	r3
		return;
    5dd4:	e020      	b.n	5e18 <_sercom_i2c_m_irq_handler+0xe8>
			break;
    5dd6:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    5dd8:	687b      	ldr	r3, [r7, #4]
    5dda:	885b      	ldrh	r3, [r3, #2]
    5ddc:	b29b      	uxth	r3, r3
    5dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5de2:	b29a      	uxth	r2, r3
    5de4:	687b      	ldr	r3, [r7, #4]
    5de6:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    5de8:	687b      	ldr	r3, [r7, #4]
    5dea:	695b      	ldr	r3, [r3, #20]
    5dec:	2b00      	cmp	r3, #0
    5dee:	d014      	beq.n	5e1a <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    5df0:	697b      	ldr	r3, [r7, #20]
    5df2:	2b00      	cmp	r3, #0
    5df4:	d005      	beq.n	5e02 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    5df6:	687b      	ldr	r3, [r7, #4]
    5df8:	695b      	ldr	r3, [r3, #20]
    5dfa:	6979      	ldr	r1, [r7, #20]
    5dfc:	6878      	ldr	r0, [r7, #4]
    5dfe:	4798      	blx	r3
    5e00:	e005      	b.n	5e0e <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	695b      	ldr	r3, [r3, #20]
    5e06:	f06f 0104 	mvn.w	r1, #4
    5e0a:	6878      	ldr	r0, [r7, #4]
    5e0c:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    5e0e:	2180      	movs	r1, #128	; 0x80
    5e10:	6938      	ldr	r0, [r7, #16]
    5e12:	4b07      	ldr	r3, [pc, #28]	; (5e30 <_sercom_i2c_m_irq_handler+0x100>)
    5e14:	4798      	blx	r3
    5e16:	e000      	b.n	5e1a <_sercom_i2c_m_irq_handler+0xea>
		return;
    5e18:	bf00      	nop
	}
}
    5e1a:	3718      	adds	r7, #24
    5e1c:	46bd      	mov	sp, r7
    5e1e:	bd80      	pop	{r7, pc}
    5e20:	0000533d 	.word	0x0000533d
    5e24:	0000ce34 	.word	0x0000ce34
    5e28:	00003249 	.word	0x00003249
    5e2c:	00005b01 	.word	0x00005b01
    5e30:	00005357 	.word	0x00005357

00005e34 <_i2c_m_async_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_enable(struct _i2c_m_async_device *const i2c_dev)
{
    5e34:	b580      	push	{r7, lr}
    5e36:	b082      	sub	sp, #8
    5e38:	af00      	add	r7, sp, #0
    5e3a:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    5e3c:	687b      	ldr	r3, [r7, #4]
    5e3e:	2b00      	cmp	r3, #0
    5e40:	bf14      	ite	ne
    5e42:	2301      	movne	r3, #1
    5e44:	2300      	moveq	r3, #0
    5e46:	b2db      	uxtb	r3, r3
    5e48:	f44f 628a 	mov.w	r2, #1104	; 0x450
    5e4c:	4906      	ldr	r1, [pc, #24]	; (5e68 <_i2c_m_async_enable+0x34>)
    5e4e:	4618      	mov	r0, r3
    5e50:	4b06      	ldr	r3, [pc, #24]	; (5e6c <_i2c_m_async_enable+0x38>)
    5e52:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    5e54:	687b      	ldr	r3, [r7, #4]
    5e56:	691b      	ldr	r3, [r3, #16]
    5e58:	4618      	mov	r0, r3
    5e5a:	4b05      	ldr	r3, [pc, #20]	; (5e70 <_i2c_m_async_enable+0x3c>)
    5e5c:	4798      	blx	r3
    5e5e:	4603      	mov	r3, r0
}
    5e60:	4618      	mov	r0, r3
    5e62:	3708      	adds	r7, #8
    5e64:	46bd      	mov	sp, r7
    5e66:	bd80      	pop	{r7, pc}
    5e68:	0000ce34 	.word	0x0000ce34
    5e6c:	00003249 	.word	0x00003249
    5e70:	000061c5 	.word	0x000061c5

00005e74 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    5e74:	b580      	push	{r7, lr}
    5e76:	b082      	sub	sp, #8
    5e78:	af00      	add	r7, sp, #0
    5e7a:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    5e7c:	6878      	ldr	r0, [r7, #4]
    5e7e:	4b05      	ldr	r3, [pc, #20]	; (5e94 <_sercom_get_irq_num+0x20>)
    5e80:	4798      	blx	r3
    5e82:	4603      	mov	r3, r0
    5e84:	009b      	lsls	r3, r3, #2
    5e86:	b2db      	uxtb	r3, r3
    5e88:	332e      	adds	r3, #46	; 0x2e
    5e8a:	b2db      	uxtb	r3, r3
}
    5e8c:	4618      	mov	r0, r3
    5e8e:	3708      	adds	r7, #8
    5e90:	46bd      	mov	sp, r7
    5e92:	bd80      	pop	{r7, pc}
    5e94:	000059cd 	.word	0x000059cd

00005e98 <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    5e98:	b580      	push	{r7, lr}
    5e9a:	b086      	sub	sp, #24
    5e9c:	af00      	add	r7, sp, #0
    5e9e:	6078      	str	r0, [r7, #4]
    5ea0:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    5ea2:	687b      	ldr	r3, [r7, #4]
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	bf14      	ite	ne
    5ea8:	2301      	movne	r3, #1
    5eaa:	2300      	moveq	r3, #0
    5eac:	b2db      	uxtb	r3, r3
    5eae:	f240 429e 	movw	r2, #1182	; 0x49e
    5eb2:	491d      	ldr	r1, [pc, #116]	; (5f28 <_i2c_m_async_init+0x90>)
    5eb4:	4618      	mov	r0, r3
    5eb6:	4b1d      	ldr	r3, [pc, #116]	; (5f2c <_i2c_m_async_init+0x94>)
    5eb8:	4798      	blx	r3

	i2c_dev->hw = hw;
    5eba:	687b      	ldr	r3, [r7, #4]
    5ebc:	683a      	ldr	r2, [r7, #0]
    5ebe:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    5ec0:	687b      	ldr	r3, [r7, #4]
    5ec2:	6839      	ldr	r1, [r7, #0]
    5ec4:	4618      	mov	r0, r3
    5ec6:	4b1a      	ldr	r3, [pc, #104]	; (5f30 <_i2c_m_async_init+0x98>)
    5ec8:	4798      	blx	r3
    5eca:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    5ecc:	68fb      	ldr	r3, [r7, #12]
    5ece:	2b00      	cmp	r3, #0
    5ed0:	d001      	beq.n	5ed6 <_i2c_m_async_init+0x3e>
		return init_status;
    5ed2:	68fb      	ldr	r3, [r7, #12]
    5ed4:	e024      	b.n	5f20 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    5ed6:	6879      	ldr	r1, [r7, #4]
    5ed8:	6838      	ldr	r0, [r7, #0]
    5eda:	4b16      	ldr	r3, [pc, #88]	; (5f34 <_i2c_m_async_init+0x9c>)
    5edc:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    5ede:	6838      	ldr	r0, [r7, #0]
    5ee0:	4b15      	ldr	r3, [pc, #84]	; (5f38 <_i2c_m_async_init+0xa0>)
    5ee2:	4798      	blx	r3
    5ee4:	4603      	mov	r3, r0
    5ee6:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    5ee8:	2300      	movs	r3, #0
    5eea:	613b      	str	r3, [r7, #16]
    5eec:	e014      	b.n	5f18 <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    5eee:	7dfb      	ldrb	r3, [r7, #23]
    5ef0:	b21b      	sxth	r3, r3
    5ef2:	4618      	mov	r0, r3
    5ef4:	4b11      	ldr	r3, [pc, #68]	; (5f3c <_i2c_m_async_init+0xa4>)
    5ef6:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    5ef8:	7dfb      	ldrb	r3, [r7, #23]
    5efa:	b21b      	sxth	r3, r3
    5efc:	4618      	mov	r0, r3
    5efe:	4b10      	ldr	r3, [pc, #64]	; (5f40 <_i2c_m_async_init+0xa8>)
    5f00:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    5f02:	7dfb      	ldrb	r3, [r7, #23]
    5f04:	b21b      	sxth	r3, r3
    5f06:	4618      	mov	r0, r3
    5f08:	4b0e      	ldr	r3, [pc, #56]	; (5f44 <_i2c_m_async_init+0xac>)
    5f0a:	4798      	blx	r3
		irq++;
    5f0c:	7dfb      	ldrb	r3, [r7, #23]
    5f0e:	3301      	adds	r3, #1
    5f10:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    5f12:	693b      	ldr	r3, [r7, #16]
    5f14:	3301      	adds	r3, #1
    5f16:	613b      	str	r3, [r7, #16]
    5f18:	693b      	ldr	r3, [r7, #16]
    5f1a:	2b03      	cmp	r3, #3
    5f1c:	d9e7      	bls.n	5eee <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    5f1e:	2300      	movs	r3, #0
}
    5f20:	4618      	mov	r0, r3
    5f22:	3718      	adds	r7, #24
    5f24:	46bd      	mov	sp, r7
    5f26:	bd80      	pop	{r7, pc}
    5f28:	0000ce34 	.word	0x0000ce34
    5f2c:	00003249 	.word	0x00003249
    5f30:	00006251 	.word	0x00006251
    5f34:	00005a29 	.word	0x00005a29
    5f38:	00005e75 	.word	0x00005e75
    5f3c:	000051f1 	.word	0x000051f1
    5f40:	00005235 	.word	0x00005235
    5f44:	000051b5 	.word	0x000051b5

00005f48 <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    5f48:	b590      	push	{r4, r7, lr}
    5f4a:	b087      	sub	sp, #28
    5f4c:	af00      	add	r7, sp, #0
    5f4e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	691b      	ldr	r3, [r3, #16]
    5f54:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    5f56:	687b      	ldr	r3, [r7, #4]
    5f58:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5f5a:	6978      	ldr	r0, [r7, #20]
    5f5c:	4b33      	ldr	r3, [pc, #204]	; (602c <_sercom_i2c_send_address+0xe4>)
    5f5e:	4798      	blx	r3
    5f60:	4603      	mov	r3, r0
    5f62:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    5f64:	687b      	ldr	r3, [r7, #4]
    5f66:	2b00      	cmp	r3, #0
    5f68:	bf14      	ite	ne
    5f6a:	2301      	movne	r3, #1
    5f6c:	2300      	moveq	r3, #0
    5f6e:	b2db      	uxtb	r3, r3
    5f70:	f240 42cc 	movw	r2, #1228	; 0x4cc
    5f74:	492e      	ldr	r1, [pc, #184]	; (6030 <_sercom_i2c_send_address+0xe8>)
    5f76:	4618      	mov	r0, r3
    5f78:	4b2e      	ldr	r3, [pc, #184]	; (6034 <_sercom_i2c_send_address+0xec>)
    5f7a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    5f7c:	693b      	ldr	r3, [r7, #16]
    5f7e:	685b      	ldr	r3, [r3, #4]
    5f80:	2b01      	cmp	r3, #1
    5f82:	d106      	bne.n	5f92 <_sercom_i2c_send_address+0x4a>
    5f84:	68fb      	ldr	r3, [r7, #12]
    5f86:	2b00      	cmp	r3, #0
    5f88:	d003      	beq.n	5f92 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    5f8a:	6978      	ldr	r0, [r7, #20]
    5f8c:	4b2a      	ldr	r3, [pc, #168]	; (6038 <_sercom_i2c_send_address+0xf0>)
    5f8e:	4798      	blx	r3
    5f90:	e002      	b.n	5f98 <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    5f92:	6978      	ldr	r0, [r7, #20]
    5f94:	4b29      	ldr	r3, [pc, #164]	; (603c <_sercom_i2c_send_address+0xf4>)
    5f96:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    5f98:	693b      	ldr	r3, [r7, #16]
    5f9a:	881b      	ldrh	r3, [r3, #0]
    5f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5fa0:	2b00      	cmp	r3, #0
    5fa2:	d022      	beq.n	5fea <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    5fa4:	693b      	ldr	r3, [r7, #16]
    5fa6:	885b      	ldrh	r3, [r3, #2]
    5fa8:	b29b      	uxth	r3, r3
    5faa:	f003 0301 	and.w	r3, r3, #1
    5fae:	2b00      	cmp	r3, #0
    5fb0:	d007      	beq.n	5fc2 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    5fb2:	693b      	ldr	r3, [r7, #16]
    5fb4:	885b      	ldrh	r3, [r3, #2]
    5fb6:	b29b      	uxth	r3, r3
    5fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    5fbc:	b29a      	uxth	r2, r3
    5fbe:	693b      	ldr	r3, [r7, #16]
    5fc0:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    5fc2:	693b      	ldr	r3, [r7, #16]
    5fc4:	881b      	ldrh	r3, [r3, #0]
    5fc6:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5fc8:	f240 74fe 	movw	r4, #2046	; 0x7fe
    5fcc:	401c      	ands	r4, r3
    5fce:	6978      	ldr	r0, [r7, #20]
    5fd0:	4b1b      	ldr	r3, [pc, #108]	; (6040 <_sercom_i2c_send_address+0xf8>)
    5fd2:	4798      	blx	r3
    5fd4:	4603      	mov	r3, r0
    5fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5fda:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    5fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    5fe0:	4619      	mov	r1, r3
    5fe2:	6978      	ldr	r0, [r7, #20]
    5fe4:	4b17      	ldr	r3, [pc, #92]	; (6044 <_sercom_i2c_send_address+0xfc>)
    5fe6:	4798      	blx	r3
    5fe8:	e01a      	b.n	6020 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    5fea:	693b      	ldr	r3, [r7, #16]
    5fec:	881b      	ldrh	r3, [r3, #0]
    5fee:	005b      	lsls	r3, r3, #1
    5ff0:	b2db      	uxtb	r3, r3
    5ff2:	693a      	ldr	r2, [r7, #16]
    5ff4:	8852      	ldrh	r2, [r2, #2]
    5ff6:	b292      	uxth	r2, r2
    5ff8:	f002 0201 	and.w	r2, r2, #1
    5ffc:	2a00      	cmp	r2, #0
    5ffe:	bf14      	ite	ne
    6000:	2201      	movne	r2, #1
    6002:	2200      	moveq	r2, #0
    6004:	b2d2      	uxtb	r2, r2
    6006:	4313      	orrs	r3, r2
    6008:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    600a:	6978      	ldr	r0, [r7, #20]
    600c:	4b0c      	ldr	r3, [pc, #48]	; (6040 <_sercom_i2c_send_address+0xf8>)
    600e:	4798      	blx	r3
    6010:	4603      	mov	r3, r0
    6012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6016:	4323      	orrs	r3, r4
    6018:	4619      	mov	r1, r3
    601a:	6978      	ldr	r0, [r7, #20]
    601c:	4b09      	ldr	r3, [pc, #36]	; (6044 <_sercom_i2c_send_address+0xfc>)
    601e:	4798      	blx	r3
	}

	return ERR_NONE;
    6020:	2300      	movs	r3, #0
}
    6022:	4618      	mov	r0, r3
    6024:	371c      	adds	r7, #28
    6026:	46bd      	mov	sp, r7
    6028:	bd90      	pop	{r4, r7, pc}
    602a:	bf00      	nop
    602c:	00005571 	.word	0x00005571
    6030:	0000ce34 	.word	0x0000ce34
    6034:	00003249 	.word	0x00003249
    6038:	000056f9 	.word	0x000056f9
    603c:	00005721 	.word	0x00005721
    6040:	00005861 	.word	0x00005861
    6044:	0000583d 	.word	0x0000583d

00006048 <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    6048:	b580      	push	{r7, lr}
    604a:	b084      	sub	sp, #16
    604c:	af00      	add	r7, sp, #0
    604e:	6078      	str	r0, [r7, #4]
    6050:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    6052:	687b      	ldr	r3, [r7, #4]
    6054:	2b00      	cmp	r3, #0
    6056:	bf14      	ite	ne
    6058:	2301      	movne	r3, #1
    605a:	2300      	moveq	r3, #0
    605c:	b2db      	uxtb	r3, r3
    605e:	f240 42f4 	movw	r2, #1268	; 0x4f4
    6062:	492a      	ldr	r1, [pc, #168]	; (610c <_i2c_m_async_transfer+0xc4>)
    6064:	4618      	mov	r0, r3
    6066:	4b2a      	ldr	r3, [pc, #168]	; (6110 <_i2c_m_async_transfer+0xc8>)
    6068:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    606a:	687b      	ldr	r3, [r7, #4]
    606c:	691b      	ldr	r3, [r3, #16]
    606e:	2b00      	cmp	r3, #0
    6070:	bf14      	ite	ne
    6072:	2301      	movne	r3, #1
    6074:	2300      	moveq	r3, #0
    6076:	b2db      	uxtb	r3, r3
    6078:	f240 42f5 	movw	r2, #1269	; 0x4f5
    607c:	4923      	ldr	r1, [pc, #140]	; (610c <_i2c_m_async_transfer+0xc4>)
    607e:	4618      	mov	r0, r3
    6080:	4b23      	ldr	r3, [pc, #140]	; (6110 <_i2c_m_async_transfer+0xc8>)
    6082:	4798      	blx	r3
	ASSERT(msg);
    6084:	683b      	ldr	r3, [r7, #0]
    6086:	2b00      	cmp	r3, #0
    6088:	bf14      	ite	ne
    608a:	2301      	movne	r3, #1
    608c:	2300      	moveq	r3, #0
    608e:	b2db      	uxtb	r3, r3
    6090:	f240 42f6 	movw	r2, #1270	; 0x4f6
    6094:	491d      	ldr	r1, [pc, #116]	; (610c <_i2c_m_async_transfer+0xc4>)
    6096:	4618      	mov	r0, r3
    6098:	4b1d      	ldr	r3, [pc, #116]	; (6110 <_i2c_m_async_transfer+0xc8>)
    609a:	4798      	blx	r3

	if (msg->len == 0) {
    609c:	683b      	ldr	r3, [r7, #0]
    609e:	685b      	ldr	r3, [r3, #4]
    60a0:	2b00      	cmp	r3, #0
    60a2:	d101      	bne.n	60a8 <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    60a4:	2300      	movs	r3, #0
    60a6:	e02d      	b.n	6104 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    60a8:	687b      	ldr	r3, [r7, #4]
    60aa:	885b      	ldrh	r3, [r3, #2]
    60ac:	b29b      	uxth	r3, r3
    60ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
    60b2:	2b00      	cmp	r3, #0
    60b4:	d002      	beq.n	60bc <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    60b6:	f06f 0303 	mvn.w	r3, #3
    60ba:	e023      	b.n	6104 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    60bc:	683b      	ldr	r3, [r7, #0]
    60be:	885b      	ldrh	r3, [r3, #2]
    60c0:	b29b      	uxth	r3, r3
    60c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    60c6:	b29a      	uxth	r2, r3
    60c8:	683b      	ldr	r3, [r7, #0]
    60ca:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	683a      	ldr	r2, [r7, #0]
    60d0:	ca07      	ldmia	r2, {r0, r1, r2}
    60d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    60d6:	687b      	ldr	r3, [r7, #4]
    60d8:	691b      	ldr	r3, [r3, #16]
    60da:	4618      	mov	r0, r3
    60dc:	4b0d      	ldr	r3, [pc, #52]	; (6114 <_i2c_m_async_transfer+0xcc>)
    60de:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    60e0:	6878      	ldr	r0, [r7, #4]
    60e2:	4b0d      	ldr	r3, [pc, #52]	; (6118 <_i2c_m_async_transfer+0xd0>)
    60e4:	4798      	blx	r3
    60e6:	60f8      	str	r0, [r7, #12]

	if (ret) {
    60e8:	68fb      	ldr	r3, [r7, #12]
    60ea:	2b00      	cmp	r3, #0
    60ec:	d009      	beq.n	6102 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    60ee:	687b      	ldr	r3, [r7, #4]
    60f0:	885b      	ldrh	r3, [r3, #2]
    60f2:	b29b      	uxth	r3, r3
    60f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    60f8:	b29a      	uxth	r2, r3
    60fa:	687b      	ldr	r3, [r7, #4]
    60fc:	805a      	strh	r2, [r3, #2]

		return ret;
    60fe:	68fb      	ldr	r3, [r7, #12]
    6100:	e000      	b.n	6104 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6102:	2300      	movs	r3, #0
}
    6104:	4618      	mov	r0, r3
    6106:	3710      	adds	r7, #16
    6108:	46bd      	mov	sp, r7
    610a:	bd80      	pop	{r7, pc}
    610c:	0000ce34 	.word	0x0000ce34
    6110:	00003249 	.word	0x00003249
    6114:	000056a9 	.word	0x000056a9
    6118:	00005f49 	.word	0x00005f49

0000611c <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    611c:	b480      	push	{r7}
    611e:	b085      	sub	sp, #20
    6120:	af00      	add	r7, sp, #0
    6122:	60f8      	str	r0, [r7, #12]
    6124:	460b      	mov	r3, r1
    6126:	607a      	str	r2, [r7, #4]
    6128:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    612a:	7afb      	ldrb	r3, [r7, #11]
    612c:	2b01      	cmp	r3, #1
    612e:	d008      	beq.n	6142 <_i2c_m_async_register_callback+0x26>
    6130:	2b02      	cmp	r3, #2
    6132:	d00a      	beq.n	614a <_i2c_m_async_register_callback+0x2e>
    6134:	2b00      	cmp	r3, #0
    6136:	d000      	beq.n	613a <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    6138:	e00b      	b.n	6152 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    613a:	68fb      	ldr	r3, [r7, #12]
    613c:	687a      	ldr	r2, [r7, #4]
    613e:	615a      	str	r2, [r3, #20]
		break;
    6140:	e007      	b.n	6152 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6142:	68fb      	ldr	r3, [r7, #12]
    6144:	687a      	ldr	r2, [r7, #4]
    6146:	619a      	str	r2, [r3, #24]
		break;
    6148:	e003      	b.n	6152 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    614a:	68fb      	ldr	r3, [r7, #12]
    614c:	687a      	ldr	r2, [r7, #4]
    614e:	61da      	str	r2, [r3, #28]
		break;
    6150:	bf00      	nop
	}

	return ERR_NONE;
    6152:	2300      	movs	r3, #0
}
    6154:	4618      	mov	r0, r3
    6156:	3714      	adds	r7, #20
    6158:	46bd      	mov	sp, r7
    615a:	f85d 7b04 	ldr.w	r7, [sp], #4
    615e:	4770      	bx	lr

00006160 <_i2c_m_async_set_irq_state>:
/**
 * \brief Enable/disable I2C master interrupt
 */
void _i2c_m_async_set_irq_state(struct _i2c_m_async_device *const device, const enum _i2c_m_async_callback_type type,
                                const bool state)
{
    6160:	b580      	push	{r7, lr}
    6162:	b082      	sub	sp, #8
    6164:	af00      	add	r7, sp, #0
    6166:	6078      	str	r0, [r7, #4]
    6168:	460b      	mov	r3, r1
    616a:	70fb      	strb	r3, [r7, #3]
    616c:	4613      	mov	r3, r2
    616e:	70bb      	strb	r3, [r7, #2]
	if (I2C_M_ASYNC_DEVICE_TX_COMPLETE == type || I2C_M_ASYNC_DEVICE_RX_COMPLETE == type) {
    6170:	78fb      	ldrb	r3, [r7, #3]
    6172:	2b01      	cmp	r3, #1
    6174:	d002      	beq.n	617c <_i2c_m_async_set_irq_state+0x1c>
    6176:	78fb      	ldrb	r3, [r7, #3]
    6178:	2b02      	cmp	r3, #2
    617a:	d10e      	bne.n	619a <_i2c_m_async_set_irq_state+0x3a>
		hri_sercomi2cm_write_INTEN_SB_bit(device->hw, state);
    617c:	687b      	ldr	r3, [r7, #4]
    617e:	691b      	ldr	r3, [r3, #16]
    6180:	78ba      	ldrb	r2, [r7, #2]
    6182:	4611      	mov	r1, r2
    6184:	4618      	mov	r0, r3
    6186:	4b0c      	ldr	r3, [pc, #48]	; (61b8 <_i2c_m_async_set_irq_state+0x58>)
    6188:	4798      	blx	r3
		hri_sercomi2cm_write_INTEN_MB_bit(device->hw, state);
    618a:	687b      	ldr	r3, [r7, #4]
    618c:	691b      	ldr	r3, [r3, #16]
    618e:	78ba      	ldrb	r2, [r7, #2]
    6190:	4611      	mov	r1, r2
    6192:	4618      	mov	r0, r3
    6194:	4b09      	ldr	r3, [pc, #36]	; (61bc <_i2c_m_async_set_irq_state+0x5c>)
    6196:	4798      	blx	r3
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
	}
}
    6198:	e009      	b.n	61ae <_i2c_m_async_set_irq_state+0x4e>
	} else if (I2C_M_ASYNC_DEVICE_ERROR == type) {
    619a:	78fb      	ldrb	r3, [r7, #3]
    619c:	2b00      	cmp	r3, #0
    619e:	d106      	bne.n	61ae <_i2c_m_async_set_irq_state+0x4e>
		hri_sercomi2cm_write_INTEN_ERROR_bit(device->hw, state);
    61a0:	687b      	ldr	r3, [r7, #4]
    61a2:	691b      	ldr	r3, [r3, #16]
    61a4:	78ba      	ldrb	r2, [r7, #2]
    61a6:	4611      	mov	r1, r2
    61a8:	4618      	mov	r0, r3
    61aa:	4b05      	ldr	r3, [pc, #20]	; (61c0 <_i2c_m_async_set_irq_state+0x60>)
    61ac:	4798      	blx	r3
}
    61ae:	bf00      	nop
    61b0:	3708      	adds	r7, #8
    61b2:	46bd      	mov	sp, r7
    61b4:	bd80      	pop	{r7, pc}
    61b6:	bf00      	nop
    61b8:	00005407 	.word	0x00005407
    61bc:	000053d5 	.word	0x000053d5
    61c0:	00005439 	.word	0x00005439

000061c4 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    61c4:	b580      	push	{r7, lr}
    61c6:	b084      	sub	sp, #16
    61c8:	af00      	add	r7, sp, #0
    61ca:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    61cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    61d0:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    61d2:	2304      	movs	r3, #4
    61d4:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    61d6:	687b      	ldr	r3, [r7, #4]
    61d8:	2b00      	cmp	r3, #0
    61da:	bf14      	ite	ne
    61dc:	2301      	movne	r3, #1
    61de:	2300      	moveq	r3, #0
    61e0:	b2db      	uxtb	r3, r3
    61e2:	f240 6241 	movw	r2, #1601	; 0x641
    61e6:	4915      	ldr	r1, [pc, #84]	; (623c <_i2c_m_enable_implementation+0x78>)
    61e8:	4618      	mov	r0, r3
    61ea:	4b15      	ldr	r3, [pc, #84]	; (6240 <_i2c_m_enable_implementation+0x7c>)
    61ec:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    61ee:	6878      	ldr	r0, [r7, #4]
    61f0:	4b14      	ldr	r3, [pc, #80]	; (6244 <_i2c_m_enable_implementation+0x80>)
    61f2:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    61f4:	e016      	b.n	6224 <_i2c_m_enable_implementation+0x60>
		timeout--;
    61f6:	68fb      	ldr	r3, [r7, #12]
    61f8:	3b01      	subs	r3, #1
    61fa:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    61fc:	68fb      	ldr	r3, [r7, #12]
    61fe:	2b00      	cmp	r3, #0
    6200:	dc10      	bgt.n	6224 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6202:	68bb      	ldr	r3, [r7, #8]
    6204:	3b01      	subs	r3, #1
    6206:	60bb      	str	r3, [r7, #8]
    6208:	68bb      	ldr	r3, [r7, #8]
    620a:	2b00      	cmp	r3, #0
    620c:	d007      	beq.n	621e <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    620e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6212:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6214:	2110      	movs	r1, #16
    6216:	6878      	ldr	r0, [r7, #4]
    6218:	4b0b      	ldr	r3, [pc, #44]	; (6248 <_i2c_m_enable_implementation+0x84>)
    621a:	4798      	blx	r3
    621c:	e002      	b.n	6224 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    621e:	f06f 0305 	mvn.w	r3, #5
    6222:	e006      	b.n	6232 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6224:	6878      	ldr	r0, [r7, #4]
    6226:	4b09      	ldr	r3, [pc, #36]	; (624c <_i2c_m_enable_implementation+0x88>)
    6228:	4798      	blx	r3
    622a:	4603      	mov	r3, r0
    622c:	2b01      	cmp	r3, #1
    622e:	d1e2      	bne.n	61f6 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6230:	2300      	movs	r3, #0
}
    6232:	4618      	mov	r0, r3
    6234:	3710      	adds	r7, #16
    6236:	46bd      	mov	sp, r7
    6238:	bd80      	pop	{r7, pc}
    623a:	bf00      	nop
    623c:	0000ce34 	.word	0x0000ce34
    6240:	00003249 	.word	0x00003249
    6244:	00005521 	.word	0x00005521
    6248:	000059a5 	.word	0x000059a5
    624c:	00005955 	.word	0x00005955

00006250 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6250:	b580      	push	{r7, lr}
    6252:	b084      	sub	sp, #16
    6254:	af00      	add	r7, sp, #0
    6256:	6078      	str	r0, [r7, #4]
    6258:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    625a:	6838      	ldr	r0, [r7, #0]
    625c:	4b42      	ldr	r3, [pc, #264]	; (6368 <_i2c_m_sync_init_impl+0x118>)
    625e:	4798      	blx	r3
    6260:	4603      	mov	r3, r0
    6262:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6264:	2101      	movs	r1, #1
    6266:	6838      	ldr	r0, [r7, #0]
    6268:	4b40      	ldr	r3, [pc, #256]	; (636c <_i2c_m_sync_init_impl+0x11c>)
    626a:	4798      	blx	r3
    626c:	4603      	mov	r3, r0
    626e:	f083 0301 	eor.w	r3, r3, #1
    6272:	b2db      	uxtb	r3, r3
    6274:	2b00      	cmp	r3, #0
    6276:	d020      	beq.n	62ba <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6278:	7bfa      	ldrb	r2, [r7, #15]
    627a:	493d      	ldr	r1, [pc, #244]	; (6370 <_i2c_m_sync_init_impl+0x120>)
    627c:	4613      	mov	r3, r2
    627e:	005b      	lsls	r3, r3, #1
    6280:	4413      	add	r3, r2
    6282:	00db      	lsls	r3, r3, #3
    6284:	440b      	add	r3, r1
    6286:	3304      	adds	r3, #4
    6288:	681b      	ldr	r3, [r3, #0]
    628a:	f003 031c 	and.w	r3, r3, #28
    628e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6290:	2102      	movs	r1, #2
    6292:	6838      	ldr	r0, [r7, #0]
    6294:	4b37      	ldr	r3, [pc, #220]	; (6374 <_i2c_m_sync_init_impl+0x124>)
    6296:	4798      	blx	r3
    6298:	4603      	mov	r3, r0
    629a:	2b00      	cmp	r3, #0
    629c:	d006      	beq.n	62ac <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    629e:	6838      	ldr	r0, [r7, #0]
    62a0:	4b35      	ldr	r3, [pc, #212]	; (6378 <_i2c_m_sync_init_impl+0x128>)
    62a2:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    62a4:	2102      	movs	r1, #2
    62a6:	6838      	ldr	r0, [r7, #0]
    62a8:	4b34      	ldr	r3, [pc, #208]	; (637c <_i2c_m_sync_init_impl+0x12c>)
    62aa:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    62ac:	68bb      	ldr	r3, [r7, #8]
    62ae:	f043 0301 	orr.w	r3, r3, #1
    62b2:	4619      	mov	r1, r3
    62b4:	6838      	ldr	r0, [r7, #0]
    62b6:	4b32      	ldr	r3, [pc, #200]	; (6380 <_i2c_m_sync_init_impl+0x130>)
    62b8:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    62ba:	2101      	movs	r1, #1
    62bc:	6838      	ldr	r0, [r7, #0]
    62be:	4b2f      	ldr	r3, [pc, #188]	; (637c <_i2c_m_sync_init_impl+0x12c>)
    62c0:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    62c2:	7bfa      	ldrb	r2, [r7, #15]
    62c4:	492a      	ldr	r1, [pc, #168]	; (6370 <_i2c_m_sync_init_impl+0x120>)
    62c6:	4613      	mov	r3, r2
    62c8:	005b      	lsls	r3, r3, #1
    62ca:	4413      	add	r3, r2
    62cc:	00db      	lsls	r3, r3, #3
    62ce:	440b      	add	r3, r1
    62d0:	3304      	adds	r3, #4
    62d2:	681b      	ldr	r3, [r3, #0]
    62d4:	4619      	mov	r1, r3
    62d6:	6838      	ldr	r0, [r7, #0]
    62d8:	4b29      	ldr	r3, [pc, #164]	; (6380 <_i2c_m_sync_init_impl+0x130>)
    62da:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    62dc:	7bfa      	ldrb	r2, [r7, #15]
    62de:	4924      	ldr	r1, [pc, #144]	; (6370 <_i2c_m_sync_init_impl+0x120>)
    62e0:	4613      	mov	r3, r2
    62e2:	005b      	lsls	r3, r3, #1
    62e4:	4413      	add	r3, r2
    62e6:	00db      	lsls	r3, r3, #3
    62e8:	440b      	add	r3, r1
    62ea:	3308      	adds	r3, #8
    62ec:	681b      	ldr	r3, [r3, #0]
    62ee:	4619      	mov	r1, r3
    62f0:	6838      	ldr	r0, [r7, #0]
    62f2:	4b24      	ldr	r3, [pc, #144]	; (6384 <_i2c_m_sync_init_impl+0x134>)
    62f4:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    62f6:	7bfa      	ldrb	r2, [r7, #15]
    62f8:	491d      	ldr	r1, [pc, #116]	; (6370 <_i2c_m_sync_init_impl+0x120>)
    62fa:	4613      	mov	r3, r2
    62fc:	005b      	lsls	r3, r3, #1
    62fe:	4413      	add	r3, r2
    6300:	00db      	lsls	r3, r3, #3
    6302:	440b      	add	r3, r1
    6304:	330c      	adds	r3, #12
    6306:	681b      	ldr	r3, [r3, #0]
    6308:	4619      	mov	r1, r3
    630a:	6838      	ldr	r0, [r7, #0]
    630c:	4b1e      	ldr	r3, [pc, #120]	; (6388 <_i2c_m_sync_init_impl+0x138>)
    630e:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6310:	7bfa      	ldrb	r2, [r7, #15]
    6312:	4917      	ldr	r1, [pc, #92]	; (6370 <_i2c_m_sync_init_impl+0x120>)
    6314:	4613      	mov	r3, r2
    6316:	005b      	lsls	r3, r3, #1
    6318:	4413      	add	r3, r2
    631a:	00db      	lsls	r3, r3, #3
    631c:	440b      	add	r3, r1
    631e:	3304      	adds	r3, #4
    6320:	681b      	ldr	r3, [r3, #0]
    6322:	0e1b      	lsrs	r3, r3, #24
    6324:	b29b      	uxth	r3, r3
    6326:	f003 0303 	and.w	r3, r3, #3
    632a:	b29a      	uxth	r2, r3
    632c:	687b      	ldr	r3, [r7, #4]
    632e:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6330:	687b      	ldr	r3, [r7, #4]
    6332:	899b      	ldrh	r3, [r3, #12]
    6334:	2b01      	cmp	r3, #1
    6336:	bf8c      	ite	hi
    6338:	2301      	movhi	r3, #1
    633a:	2300      	movls	r3, #0
    633c:	b2db      	uxtb	r3, r3
    633e:	4619      	mov	r1, r3
    6340:	6838      	ldr	r0, [r7, #0]
    6342:	4b12      	ldr	r3, [pc, #72]	; (638c <_i2c_m_sync_init_impl+0x13c>)
    6344:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    6346:	7bfa      	ldrb	r2, [r7, #15]
    6348:	4909      	ldr	r1, [pc, #36]	; (6370 <_i2c_m_sync_init_impl+0x120>)
    634a:	4613      	mov	r3, r2
    634c:	005b      	lsls	r3, r3, #1
    634e:	4413      	add	r3, r2
    6350:	00db      	lsls	r3, r3, #3
    6352:	440b      	add	r3, r1
    6354:	3312      	adds	r3, #18
    6356:	881a      	ldrh	r2, [r3, #0]
    6358:	687b      	ldr	r3, [r7, #4]
    635a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    635c:	2300      	movs	r3, #0
}
    635e:	4618      	mov	r0, r3
    6360:	3710      	adds	r7, #16
    6362:	46bd      	mov	sp, r7
    6364:	bd80      	pop	{r7, pc}
    6366:	bf00      	nop
    6368:	00005a7d 	.word	0x00005a7d
    636c:	00005295 	.word	0x00005295
    6370:	20000018 	.word	0x20000018
    6374:	000055a1 	.word	0x000055a1
    6378:	00005549 	.word	0x00005549
    637c:	00005271 	.word	0x00005271
    6380:	000055d1 	.word	0x000055d1
    6384:	00005779 	.word	0x00005779
    6388:	000057c1 	.word	0x000057c1
    638c:	000057fd 	.word	0x000057fd

00006390 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6390:	b580      	push	{r7, lr}
    6392:	b082      	sub	sp, #8
    6394:	af00      	add	r7, sp, #0
    6396:	6078      	str	r0, [r7, #4]
    6398:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    639a:	687b      	ldr	r3, [r7, #4]
    639c:	2b00      	cmp	r3, #0
    639e:	d004      	beq.n	63aa <_spi_load_regs_master+0x1a>
    63a0:	683b      	ldr	r3, [r7, #0]
    63a2:	2b00      	cmp	r3, #0
    63a4:	d001      	beq.n	63aa <_spi_load_regs_master+0x1a>
    63a6:	2301      	movs	r3, #1
    63a8:	e000      	b.n	63ac <_spi_load_regs_master+0x1c>
    63aa:	2300      	movs	r3, #0
    63ac:	f003 0301 	and.w	r3, r3, #1
    63b0:	b2db      	uxtb	r3, r3
    63b2:	f640 1242 	movw	r2, #2370	; 0x942
    63b6:	4915      	ldr	r1, [pc, #84]	; (640c <_spi_load_regs_master+0x7c>)
    63b8:	4618      	mov	r0, r3
    63ba:	4b15      	ldr	r3, [pc, #84]	; (6410 <_spi_load_regs_master+0x80>)
    63bc:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    63be:	683b      	ldr	r3, [r7, #0]
    63c0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    63c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    63c6:	f023 0301 	bic.w	r3, r3, #1
    63ca:	4619      	mov	r1, r3
    63cc:	6878      	ldr	r0, [r7, #4]
    63ce:	4b11      	ldr	r3, [pc, #68]	; (6414 <_spi_load_regs_master+0x84>)
    63d0:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    63d2:	683b      	ldr	r3, [r7, #0]
    63d4:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    63d6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    63da:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    63de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    63e2:	4619      	mov	r1, r3
    63e4:	6878      	ldr	r0, [r7, #4]
    63e6:	4b0c      	ldr	r3, [pc, #48]	; (6418 <_spi_load_regs_master+0x88>)
    63e8:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    63ea:	683b      	ldr	r3, [r7, #0]
    63ec:	7b1b      	ldrb	r3, [r3, #12]
    63ee:	4619      	mov	r1, r3
    63f0:	6878      	ldr	r0, [r7, #4]
    63f2:	4b0a      	ldr	r3, [pc, #40]	; (641c <_spi_load_regs_master+0x8c>)
    63f4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    63f6:	683b      	ldr	r3, [r7, #0]
    63f8:	7b5b      	ldrb	r3, [r3, #13]
    63fa:	4619      	mov	r1, r3
    63fc:	6878      	ldr	r0, [r7, #4]
    63fe:	4b08      	ldr	r3, [pc, #32]	; (6420 <_spi_load_regs_master+0x90>)
    6400:	4798      	blx	r3
}
    6402:	bf00      	nop
    6404:	3708      	adds	r7, #8
    6406:	46bd      	mov	sp, r7
    6408:	bd80      	pop	{r7, pc}
    640a:	bf00      	nop
    640c:	0000ce34 	.word	0x0000ce34
    6410:	00003249 	.word	0x00003249
    6414:	00005685 	.word	0x00005685
    6418:	0000579d 	.word	0x0000579d
    641c:	000057dd 	.word	0x000057dd
    6420:	00005915 	.word	0x00005915

00006424 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6424:	b580      	push	{r7, lr}
    6426:	b082      	sub	sp, #8
    6428:	af00      	add	r7, sp, #0
    642a:	6078      	str	r0, [r7, #4]
    642c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    642e:	687b      	ldr	r3, [r7, #4]
    6430:	2b00      	cmp	r3, #0
    6432:	d004      	beq.n	643e <_spi_load_regs_slave+0x1a>
    6434:	683b      	ldr	r3, [r7, #0]
    6436:	2b00      	cmp	r3, #0
    6438:	d001      	beq.n	643e <_spi_load_regs_slave+0x1a>
    643a:	2301      	movs	r3, #1
    643c:	e000      	b.n	6440 <_spi_load_regs_slave+0x1c>
    643e:	2300      	movs	r3, #0
    6440:	f003 0301 	and.w	r3, r3, #1
    6444:	b2db      	uxtb	r3, r3
    6446:	f640 1256 	movw	r2, #2390	; 0x956
    644a:	491a      	ldr	r1, [pc, #104]	; (64b4 <_spi_load_regs_slave+0x90>)
    644c:	4618      	mov	r0, r3
    644e:	4b1a      	ldr	r3, [pc, #104]	; (64b8 <_spi_load_regs_slave+0x94>)
    6450:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6452:	683b      	ldr	r3, [r7, #0]
    6454:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6456:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    645a:	f023 0301 	bic.w	r3, r3, #1
    645e:	4619      	mov	r1, r3
    6460:	6878      	ldr	r0, [r7, #4]
    6462:	4b16      	ldr	r3, [pc, #88]	; (64bc <_spi_load_regs_slave+0x98>)
    6464:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6466:	683b      	ldr	r3, [r7, #0]
    6468:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    646a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    646e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6476:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    647a:	4619      	mov	r1, r3
    647c:	6878      	ldr	r0, [r7, #4]
    647e:	4b10      	ldr	r3, [pc, #64]	; (64c0 <_spi_load_regs_slave+0x9c>)
    6480:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6482:	683b      	ldr	r3, [r7, #0]
    6484:	689b      	ldr	r3, [r3, #8]
    6486:	4619      	mov	r1, r3
    6488:	6878      	ldr	r0, [r7, #4]
    648a:	4b0e      	ldr	r3, [pc, #56]	; (64c4 <_spi_load_regs_slave+0xa0>)
    648c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    648e:	683b      	ldr	r3, [r7, #0]
    6490:	7b5b      	ldrb	r3, [r3, #13]
    6492:	4619      	mov	r1, r3
    6494:	6878      	ldr	r0, [r7, #4]
    6496:	4b0c      	ldr	r3, [pc, #48]	; (64c8 <_spi_load_regs_slave+0xa4>)
    6498:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    649a:	bf00      	nop
    649c:	f04f 31ff 	mov.w	r1, #4294967295
    64a0:	6878      	ldr	r0, [r7, #4]
    64a2:	4b0a      	ldr	r3, [pc, #40]	; (64cc <_spi_load_regs_slave+0xa8>)
    64a4:	4798      	blx	r3
    64a6:	4603      	mov	r3, r0
    64a8:	2b00      	cmp	r3, #0
    64aa:	d1f7      	bne.n	649c <_spi_load_regs_slave+0x78>
		;
}
    64ac:	bf00      	nop
    64ae:	3708      	adds	r7, #8
    64b0:	46bd      	mov	sp, r7
    64b2:	bd80      	pop	{r7, pc}
    64b4:	0000ce34 	.word	0x0000ce34
    64b8:	00003249 	.word	0x00003249
    64bc:	00005685 	.word	0x00005685
    64c0:	0000579d 	.word	0x0000579d
    64c4:	00005881 	.word	0x00005881
    64c8:	00005915 	.word	0x00005915
    64cc:	000052e1 	.word	0x000052e1

000064d0 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    64d0:	b580      	push	{r7, lr}
    64d2:	b084      	sub	sp, #16
    64d4:	af00      	add	r7, sp, #0
    64d6:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    64d8:	687b      	ldr	r3, [r7, #4]
    64da:	4618      	mov	r0, r3
    64dc:	4b11      	ldr	r3, [pc, #68]	; (6524 <_spi_get_regs+0x54>)
    64de:	4798      	blx	r3
    64e0:	4603      	mov	r3, r0
    64e2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    64e4:	2300      	movs	r3, #0
    64e6:	73fb      	strb	r3, [r7, #15]
    64e8:	e014      	b.n	6514 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    64ea:	7bfa      	ldrb	r2, [r7, #15]
    64ec:	490e      	ldr	r1, [pc, #56]	; (6528 <_spi_get_regs+0x58>)
    64ee:	4613      	mov	r3, r2
    64f0:	011b      	lsls	r3, r3, #4
    64f2:	4413      	add	r3, r2
    64f4:	440b      	add	r3, r1
    64f6:	3310      	adds	r3, #16
    64f8:	781b      	ldrb	r3, [r3, #0]
    64fa:	7bba      	ldrb	r2, [r7, #14]
    64fc:	429a      	cmp	r2, r3
    64fe:	d106      	bne.n	650e <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6500:	7bfa      	ldrb	r2, [r7, #15]
    6502:	4613      	mov	r3, r2
    6504:	011b      	lsls	r3, r3, #4
    6506:	4413      	add	r3, r2
    6508:	4a07      	ldr	r2, [pc, #28]	; (6528 <_spi_get_regs+0x58>)
    650a:	4413      	add	r3, r2
    650c:	e006      	b.n	651c <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    650e:	7bfb      	ldrb	r3, [r7, #15]
    6510:	3301      	adds	r3, #1
    6512:	73fb      	strb	r3, [r7, #15]
    6514:	7bfb      	ldrb	r3, [r7, #15]
    6516:	2b01      	cmp	r3, #1
    6518:	d9e7      	bls.n	64ea <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    651a:	2300      	movs	r3, #0
}
    651c:	4618      	mov	r0, r3
    651e:	3710      	adds	r7, #16
    6520:	46bd      	mov	sp, r7
    6522:	bd80      	pop	{r7, pc}
    6524:	000059cd 	.word	0x000059cd
    6528:	0000ce70 	.word	0x0000ce70

0000652c <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    652c:	b580      	push	{r7, lr}
    652e:	b084      	sub	sp, #16
    6530:	af00      	add	r7, sp, #0
    6532:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    6534:	687b      	ldr	r3, [r7, #4]
    6536:	681b      	ldr	r3, [r3, #0]
    6538:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    653a:	68f8      	ldr	r0, [r7, #12]
    653c:	4b21      	ldr	r3, [pc, #132]	; (65c4 <_spi_handler+0x98>)
    653e:	4798      	blx	r3
    6540:	4603      	mov	r3, r0
    6542:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    6544:	68f8      	ldr	r0, [r7, #12]
    6546:	4b20      	ldr	r3, [pc, #128]	; (65c8 <_spi_handler+0x9c>)
    6548:	4798      	blx	r3
    654a:	4603      	mov	r3, r0
    654c:	461a      	mov	r2, r3
    654e:	7afb      	ldrb	r3, [r7, #11]
    6550:	4013      	ands	r3, r2
    6552:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    6554:	7afb      	ldrb	r3, [r7, #11]
    6556:	f003 0301 	and.w	r3, r3, #1
    655a:	2b00      	cmp	r3, #0
    655c:	d004      	beq.n	6568 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    655e:	687b      	ldr	r3, [r7, #4]
    6560:	689b      	ldr	r3, [r3, #8]
    6562:	6878      	ldr	r0, [r7, #4]
    6564:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    6566:	e029      	b.n	65bc <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6568:	7afb      	ldrb	r3, [r7, #11]
    656a:	f003 0304 	and.w	r3, r3, #4
    656e:	2b00      	cmp	r3, #0
    6570:	d004      	beq.n	657c <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    6572:	687b      	ldr	r3, [r7, #4]
    6574:	68db      	ldr	r3, [r3, #12]
    6576:	6878      	ldr	r0, [r7, #4]
    6578:	4798      	blx	r3
}
    657a:	e01f      	b.n	65bc <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    657c:	7afb      	ldrb	r3, [r7, #11]
    657e:	f003 0302 	and.w	r3, r3, #2
    6582:	2b00      	cmp	r3, #0
    6584:	d008      	beq.n	6598 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    6586:	2102      	movs	r1, #2
    6588:	68f8      	ldr	r0, [r7, #12]
    658a:	4b10      	ldr	r3, [pc, #64]	; (65cc <_spi_handler+0xa0>)
    658c:	4798      	blx	r3
		dev->callbacks.complete(dev);
    658e:	687b      	ldr	r3, [r7, #4]
    6590:	691b      	ldr	r3, [r3, #16]
    6592:	6878      	ldr	r0, [r7, #4]
    6594:	4798      	blx	r3
}
    6596:	e011      	b.n	65bc <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    6598:	f997 300b 	ldrsb.w	r3, [r7, #11]
    659c:	2b00      	cmp	r3, #0
    659e:	da0d      	bge.n	65bc <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    65a0:	2104      	movs	r1, #4
    65a2:	68f8      	ldr	r0, [r7, #12]
    65a4:	4b0a      	ldr	r3, [pc, #40]	; (65d0 <_spi_handler+0xa4>)
    65a6:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    65a8:	2180      	movs	r1, #128	; 0x80
    65aa:	68f8      	ldr	r0, [r7, #12]
    65ac:	4b07      	ldr	r3, [pc, #28]	; (65cc <_spi_handler+0xa0>)
    65ae:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	695b      	ldr	r3, [r3, #20]
    65b4:	f06f 0112 	mvn.w	r1, #18
    65b8:	6878      	ldr	r0, [r7, #4]
    65ba:	4798      	blx	r3
}
    65bc:	bf00      	nop
    65be:	3710      	adds	r7, #16
    65c0:	46bd      	mov	sp, r7
    65c2:	bd80      	pop	{r7, pc}
    65c4:	0000539d 	.word	0x0000539d
    65c8:	00005507 	.word	0x00005507
    65cc:	000053b7 	.word	0x000053b7
    65d0:	00005935 	.word	0x00005935

000065d4 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    65d4:	b580      	push	{r7, lr}
    65d6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    65d8:	4b03      	ldr	r3, [pc, #12]	; (65e8 <SERCOM4_0_Handler+0x14>)
    65da:	681b      	ldr	r3, [r3, #0]
    65dc:	4618      	mov	r0, r3
    65de:	4b03      	ldr	r3, [pc, #12]	; (65ec <SERCOM4_0_Handler+0x18>)
    65e0:	4798      	blx	r3
}
    65e2:	bf00      	nop
    65e4:	bd80      	pop	{r7, pc}
    65e6:	bf00      	nop
    65e8:	20000670 	.word	0x20000670
    65ec:	0000652d 	.word	0x0000652d

000065f0 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    65f0:	b580      	push	{r7, lr}
    65f2:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    65f4:	4b03      	ldr	r3, [pc, #12]	; (6604 <SERCOM4_1_Handler+0x14>)
    65f6:	681b      	ldr	r3, [r3, #0]
    65f8:	4618      	mov	r0, r3
    65fa:	4b03      	ldr	r3, [pc, #12]	; (6608 <SERCOM4_1_Handler+0x18>)
    65fc:	4798      	blx	r3
}
    65fe:	bf00      	nop
    6600:	bd80      	pop	{r7, pc}
    6602:	bf00      	nop
    6604:	20000670 	.word	0x20000670
    6608:	0000652d 	.word	0x0000652d

0000660c <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    660c:	b580      	push	{r7, lr}
    660e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6610:	4b03      	ldr	r3, [pc, #12]	; (6620 <SERCOM4_2_Handler+0x14>)
    6612:	681b      	ldr	r3, [r3, #0]
    6614:	4618      	mov	r0, r3
    6616:	4b03      	ldr	r3, [pc, #12]	; (6624 <SERCOM4_2_Handler+0x18>)
    6618:	4798      	blx	r3
}
    661a:	bf00      	nop
    661c:	bd80      	pop	{r7, pc}
    661e:	bf00      	nop
    6620:	20000670 	.word	0x20000670
    6624:	0000652d 	.word	0x0000652d

00006628 <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    6628:	b580      	push	{r7, lr}
    662a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    662c:	4b03      	ldr	r3, [pc, #12]	; (663c <SERCOM4_3_Handler+0x14>)
    662e:	681b      	ldr	r3, [r3, #0]
    6630:	4618      	mov	r0, r3
    6632:	4b03      	ldr	r3, [pc, #12]	; (6640 <SERCOM4_3_Handler+0x18>)
    6634:	4798      	blx	r3
}
    6636:	bf00      	nop
    6638:	bd80      	pop	{r7, pc}
    663a:	bf00      	nop
    663c:	20000670 	.word	0x20000670
    6640:	0000652d 	.word	0x0000652d

00006644 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    6644:	b580      	push	{r7, lr}
    6646:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6648:	4b03      	ldr	r3, [pc, #12]	; (6658 <SERCOM5_0_Handler+0x14>)
    664a:	681b      	ldr	r3, [r3, #0]
    664c:	4618      	mov	r0, r3
    664e:	4b03      	ldr	r3, [pc, #12]	; (665c <SERCOM5_0_Handler+0x18>)
    6650:	4798      	blx	r3
}
    6652:	bf00      	nop
    6654:	bd80      	pop	{r7, pc}
    6656:	bf00      	nop
    6658:	20000674 	.word	0x20000674
    665c:	00005d31 	.word	0x00005d31

00006660 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    6660:	b580      	push	{r7, lr}
    6662:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6664:	4b03      	ldr	r3, [pc, #12]	; (6674 <SERCOM5_1_Handler+0x14>)
    6666:	681b      	ldr	r3, [r3, #0]
    6668:	4618      	mov	r0, r3
    666a:	4b03      	ldr	r3, [pc, #12]	; (6678 <SERCOM5_1_Handler+0x18>)
    666c:	4798      	blx	r3
}
    666e:	bf00      	nop
    6670:	bd80      	pop	{r7, pc}
    6672:	bf00      	nop
    6674:	20000674 	.word	0x20000674
    6678:	00005d31 	.word	0x00005d31

0000667c <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    667c:	b580      	push	{r7, lr}
    667e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6680:	4b03      	ldr	r3, [pc, #12]	; (6690 <SERCOM5_2_Handler+0x14>)
    6682:	681b      	ldr	r3, [r3, #0]
    6684:	4618      	mov	r0, r3
    6686:	4b03      	ldr	r3, [pc, #12]	; (6694 <SERCOM5_2_Handler+0x18>)
    6688:	4798      	blx	r3
}
    668a:	bf00      	nop
    668c:	bd80      	pop	{r7, pc}
    668e:	bf00      	nop
    6690:	20000674 	.word	0x20000674
    6694:	00005d31 	.word	0x00005d31

00006698 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    6698:	b580      	push	{r7, lr}
    669a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    669c:	4b03      	ldr	r3, [pc, #12]	; (66ac <SERCOM5_3_Handler+0x14>)
    669e:	681b      	ldr	r3, [r3, #0]
    66a0:	4618      	mov	r0, r3
    66a2:	4b03      	ldr	r3, [pc, #12]	; (66b0 <SERCOM5_3_Handler+0x18>)
    66a4:	4798      	blx	r3
}
    66a6:	bf00      	nop
    66a8:	bd80      	pop	{r7, pc}
    66aa:	bf00      	nop
    66ac:	20000674 	.word	0x20000674
    66b0:	00005d31 	.word	0x00005d31

000066b4 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    66b4:	b580      	push	{r7, lr}
    66b6:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    66b8:	4b03      	ldr	r3, [pc, #12]	; (66c8 <SERCOM7_0_Handler+0x14>)
    66ba:	681b      	ldr	r3, [r3, #0]
    66bc:	4618      	mov	r0, r3
    66be:	4b03      	ldr	r3, [pc, #12]	; (66cc <SERCOM7_0_Handler+0x18>)
    66c0:	4798      	blx	r3
}
    66c2:	bf00      	nop
    66c4:	bd80      	pop	{r7, pc}
    66c6:	bf00      	nop
    66c8:	20000678 	.word	0x20000678
    66cc:	00005d31 	.word	0x00005d31

000066d0 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    66d0:	b580      	push	{r7, lr}
    66d2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    66d4:	4b03      	ldr	r3, [pc, #12]	; (66e4 <SERCOM7_1_Handler+0x14>)
    66d6:	681b      	ldr	r3, [r3, #0]
    66d8:	4618      	mov	r0, r3
    66da:	4b03      	ldr	r3, [pc, #12]	; (66e8 <SERCOM7_1_Handler+0x18>)
    66dc:	4798      	blx	r3
}
    66de:	bf00      	nop
    66e0:	bd80      	pop	{r7, pc}
    66e2:	bf00      	nop
    66e4:	20000678 	.word	0x20000678
    66e8:	00005d31 	.word	0x00005d31

000066ec <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    66ec:	b580      	push	{r7, lr}
    66ee:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    66f0:	4b03      	ldr	r3, [pc, #12]	; (6700 <SERCOM7_2_Handler+0x14>)
    66f2:	681b      	ldr	r3, [r3, #0]
    66f4:	4618      	mov	r0, r3
    66f6:	4b03      	ldr	r3, [pc, #12]	; (6704 <SERCOM7_2_Handler+0x18>)
    66f8:	4798      	blx	r3
}
    66fa:	bf00      	nop
    66fc:	bd80      	pop	{r7, pc}
    66fe:	bf00      	nop
    6700:	20000678 	.word	0x20000678
    6704:	00005d31 	.word	0x00005d31

00006708 <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    6708:	b580      	push	{r7, lr}
    670a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    670c:	4b03      	ldr	r3, [pc, #12]	; (671c <SERCOM7_3_Handler+0x14>)
    670e:	681b      	ldr	r3, [r3, #0]
    6710:	4618      	mov	r0, r3
    6712:	4b03      	ldr	r3, [pc, #12]	; (6720 <SERCOM7_3_Handler+0x18>)
    6714:	4798      	blx	r3
}
    6716:	bf00      	nop
    6718:	bd80      	pop	{r7, pc}
    671a:	bf00      	nop
    671c:	20000678 	.word	0x20000678
    6720:	00005d31 	.word	0x00005d31

00006724 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6724:	b580      	push	{r7, lr}
    6726:	b084      	sub	sp, #16
    6728:	af00      	add	r7, sp, #0
    672a:	6078      	str	r0, [r7, #4]
    672c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    672e:	683b      	ldr	r3, [r7, #0]
    6730:	4618      	mov	r0, r3
    6732:	4b35      	ldr	r3, [pc, #212]	; (6808 <_spi_m_sync_init+0xe4>)
    6734:	4798      	blx	r3
    6736:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6738:	687b      	ldr	r3, [r7, #4]
    673a:	2b00      	cmp	r3, #0
    673c:	d004      	beq.n	6748 <_spi_m_sync_init+0x24>
    673e:	683b      	ldr	r3, [r7, #0]
    6740:	2b00      	cmp	r3, #0
    6742:	d001      	beq.n	6748 <_spi_m_sync_init+0x24>
    6744:	2301      	movs	r3, #1
    6746:	e000      	b.n	674a <_spi_m_sync_init+0x26>
    6748:	2300      	movs	r3, #0
    674a:	f003 0301 	and.w	r3, r3, #1
    674e:	b2db      	uxtb	r3, r3
    6750:	f640 12e9 	movw	r2, #2537	; 0x9e9
    6754:	492d      	ldr	r1, [pc, #180]	; (680c <_spi_m_sync_init+0xe8>)
    6756:	4618      	mov	r0, r3
    6758:	4b2d      	ldr	r3, [pc, #180]	; (6810 <_spi_m_sync_init+0xec>)
    675a:	4798      	blx	r3

	if (regs == NULL) {
    675c:	68fb      	ldr	r3, [r7, #12]
    675e:	2b00      	cmp	r3, #0
    6760:	d102      	bne.n	6768 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6762:	f06f 030c 	mvn.w	r3, #12
    6766:	e04a      	b.n	67fe <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6768:	2101      	movs	r1, #1
    676a:	6838      	ldr	r0, [r7, #0]
    676c:	4b29      	ldr	r3, [pc, #164]	; (6814 <_spi_m_sync_init+0xf0>)
    676e:	4798      	blx	r3
    6770:	4603      	mov	r3, r0
    6772:	f083 0301 	eor.w	r3, r3, #1
    6776:	b2db      	uxtb	r3, r3
    6778:	2b00      	cmp	r3, #0
    677a:	d019      	beq.n	67b0 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    677c:	68fb      	ldr	r3, [r7, #12]
    677e:	681b      	ldr	r3, [r3, #0]
    6780:	f003 031c 	and.w	r3, r3, #28
    6784:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6786:	2102      	movs	r1, #2
    6788:	6838      	ldr	r0, [r7, #0]
    678a:	4b23      	ldr	r3, [pc, #140]	; (6818 <_spi_m_sync_init+0xf4>)
    678c:	4798      	blx	r3
    678e:	4603      	mov	r3, r0
    6790:	2b00      	cmp	r3, #0
    6792:	d006      	beq.n	67a2 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6794:	6838      	ldr	r0, [r7, #0]
    6796:	4b21      	ldr	r3, [pc, #132]	; (681c <_spi_m_sync_init+0xf8>)
    6798:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    679a:	2102      	movs	r1, #2
    679c:	6838      	ldr	r0, [r7, #0]
    679e:	4b20      	ldr	r3, [pc, #128]	; (6820 <_spi_m_sync_init+0xfc>)
    67a0:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    67a2:	68bb      	ldr	r3, [r7, #8]
    67a4:	f043 0301 	orr.w	r3, r3, #1
    67a8:	4619      	mov	r1, r3
    67aa:	6838      	ldr	r0, [r7, #0]
    67ac:	4b1d      	ldr	r3, [pc, #116]	; (6824 <_spi_m_sync_init+0x100>)
    67ae:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    67b0:	2101      	movs	r1, #1
    67b2:	6838      	ldr	r0, [r7, #0]
    67b4:	4b1a      	ldr	r3, [pc, #104]	; (6820 <_spi_m_sync_init+0xfc>)
    67b6:	4798      	blx	r3

	dev->prvt = hw;
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	683a      	ldr	r2, [r7, #0]
    67bc:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    67be:	68fb      	ldr	r3, [r7, #12]
    67c0:	681b      	ldr	r3, [r3, #0]
    67c2:	f003 031c 	and.w	r3, r3, #28
    67c6:	2b08      	cmp	r3, #8
    67c8:	d104      	bne.n	67d4 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    67ca:	68f9      	ldr	r1, [r7, #12]
    67cc:	6838      	ldr	r0, [r7, #0]
    67ce:	4b16      	ldr	r3, [pc, #88]	; (6828 <_spi_m_sync_init+0x104>)
    67d0:	4798      	blx	r3
    67d2:	e003      	b.n	67dc <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    67d4:	68f9      	ldr	r1, [r7, #12]
    67d6:	6838      	ldr	r0, [r7, #0]
    67d8:	4b14      	ldr	r3, [pc, #80]	; (682c <_spi_m_sync_init+0x108>)
    67da:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    67dc:	68fb      	ldr	r3, [r7, #12]
    67de:	685b      	ldr	r3, [r3, #4]
    67e0:	f003 0307 	and.w	r3, r3, #7
    67e4:	2b00      	cmp	r3, #0
    67e6:	d101      	bne.n	67ec <_spi_m_sync_init+0xc8>
    67e8:	2201      	movs	r2, #1
    67ea:	e000      	b.n	67ee <_spi_m_sync_init+0xca>
    67ec:	2202      	movs	r2, #2
    67ee:	687b      	ldr	r3, [r7, #4]
    67f0:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    67f2:	68fb      	ldr	r3, [r7, #12]
    67f4:	89db      	ldrh	r3, [r3, #14]
    67f6:	b29a      	uxth	r2, r3
    67f8:	687b      	ldr	r3, [r7, #4]
    67fa:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    67fc:	2300      	movs	r3, #0
}
    67fe:	4618      	mov	r0, r3
    6800:	3710      	adds	r7, #16
    6802:	46bd      	mov	sp, r7
    6804:	bd80      	pop	{r7, pc}
    6806:	bf00      	nop
    6808:	000064d1 	.word	0x000064d1
    680c:	0000ce34 	.word	0x0000ce34
    6810:	00003249 	.word	0x00003249
    6814:	000052e1 	.word	0x000052e1
    6818:	00005655 	.word	0x00005655
    681c:	0000562d 	.word	0x0000562d
    6820:	000052bd 	.word	0x000052bd
    6824:	00005685 	.word	0x00005685
    6828:	00006425 	.word	0x00006425
    682c:	00006391 	.word	0x00006391

00006830 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    6830:	b580      	push	{r7, lr}
    6832:	b086      	sub	sp, #24
    6834:	af00      	add	r7, sp, #0
    6836:	6078      	str	r0, [r7, #4]
    6838:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    683a:	687b      	ldr	r3, [r7, #4]
    683c:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    683e:	6839      	ldr	r1, [r7, #0]
    6840:	6878      	ldr	r0, [r7, #4]
    6842:	4b1a      	ldr	r3, [pc, #104]	; (68ac <_spi_m_async_init+0x7c>)
    6844:	4798      	blx	r3
    6846:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    6848:	68bb      	ldr	r3, [r7, #8]
    684a:	2b00      	cmp	r3, #0
    684c:	da01      	bge.n	6852 <_spi_m_async_init+0x22>
		return rc;
    684e:	68bb      	ldr	r3, [r7, #8]
    6850:	e028      	b.n	68a4 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    6852:	6879      	ldr	r1, [r7, #4]
    6854:	6838      	ldr	r0, [r7, #0]
    6856:	4b16      	ldr	r3, [pc, #88]	; (68b0 <_spi_m_async_init+0x80>)
    6858:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    685a:	68fb      	ldr	r3, [r7, #12]
    685c:	2200      	movs	r2, #0
    685e:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    6860:	68fb      	ldr	r3, [r7, #12]
    6862:	2200      	movs	r2, #0
    6864:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    6866:	68fb      	ldr	r3, [r7, #12]
    6868:	2200      	movs	r2, #0
    686a:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    686c:	6838      	ldr	r0, [r7, #0]
    686e:	4b11      	ldr	r3, [pc, #68]	; (68b4 <_spi_m_async_init+0x84>)
    6870:	4798      	blx	r3
    6872:	4603      	mov	r3, r0
    6874:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6876:	2300      	movs	r3, #0
    6878:	613b      	str	r3, [r7, #16]
    687a:	e00f      	b.n	689c <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    687c:	7dfb      	ldrb	r3, [r7, #23]
    687e:	b21b      	sxth	r3, r3
    6880:	4618      	mov	r0, r3
    6882:	4b0d      	ldr	r3, [pc, #52]	; (68b8 <_spi_m_async_init+0x88>)
    6884:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6886:	7dfb      	ldrb	r3, [r7, #23]
    6888:	b21b      	sxth	r3, r3
    688a:	4618      	mov	r0, r3
    688c:	4b0b      	ldr	r3, [pc, #44]	; (68bc <_spi_m_async_init+0x8c>)
    688e:	4798      	blx	r3
		irq++;
    6890:	7dfb      	ldrb	r3, [r7, #23]
    6892:	3301      	adds	r3, #1
    6894:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6896:	693b      	ldr	r3, [r7, #16]
    6898:	3301      	adds	r3, #1
    689a:	613b      	str	r3, [r7, #16]
    689c:	693b      	ldr	r3, [r7, #16]
    689e:	2b03      	cmp	r3, #3
    68a0:	d9ec      	bls.n	687c <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    68a2:	2300      	movs	r3, #0
}
    68a4:	4618      	mov	r0, r3
    68a6:	3718      	adds	r7, #24
    68a8:	46bd      	mov	sp, r7
    68aa:	bd80      	pop	{r7, pc}
    68ac:	00006725 	.word	0x00006725
    68b0:	00005a29 	.word	0x00005a29
    68b4:	00005e75 	.word	0x00005e75
    68b8:	000051f1 	.word	0x000051f1
    68bc:	00005235 	.word	0x00005235

000068c0 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    68c0:	b580      	push	{r7, lr}
    68c2:	b082      	sub	sp, #8
    68c4:	af00      	add	r7, sp, #0
    68c6:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    68c8:	bf00      	nop
    68ca:	2103      	movs	r1, #3
    68cc:	6878      	ldr	r0, [r7, #4]
    68ce:	4b06      	ldr	r3, [pc, #24]	; (68e8 <_spi_wait_bus_idle+0x28>)
    68d0:	4798      	blx	r3
    68d2:	4603      	mov	r3, r0
    68d4:	2b00      	cmp	r3, #0
    68d6:	d0f8      	beq.n	68ca <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    68d8:	2103      	movs	r1, #3
    68da:	6878      	ldr	r0, [r7, #4]
    68dc:	4b03      	ldr	r3, [pc, #12]	; (68ec <_spi_wait_bus_idle+0x2c>)
    68de:	4798      	blx	r3
}
    68e0:	bf00      	nop
    68e2:	3708      	adds	r7, #8
    68e4:	46bd      	mov	sp, r7
    68e6:	bd80      	pop	{r7, pc}
    68e8:	00005375 	.word	0x00005375
    68ec:	000053b7 	.word	0x000053b7

000068f0 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b086      	sub	sp, #24
    68f4:	af00      	add	r7, sp, #0
    68f6:	60f8      	str	r0, [r7, #12]
    68f8:	60b9      	str	r1, [r7, #8]
    68fa:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    68fc:	68bb      	ldr	r3, [r7, #8]
    68fe:	f003 0304 	and.w	r3, r3, #4
    6902:	2b00      	cmp	r3, #0
    6904:	d101      	bne.n	690a <_spi_rx_check_and_receive+0x1a>
		return false;
    6906:	2300      	movs	r3, #0
    6908:	e022      	b.n	6950 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    690a:	68f8      	ldr	r0, [r7, #12]
    690c:	4b12      	ldr	r3, [pc, #72]	; (6958 <_spi_rx_check_and_receive+0x68>)
    690e:	4798      	blx	r3
    6910:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6912:	687b      	ldr	r3, [r7, #4]
    6914:	685b      	ldr	r3, [r3, #4]
    6916:	2b00      	cmp	r3, #0
    6918:	d014      	beq.n	6944 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    691a:	687b      	ldr	r3, [r7, #4]
    691c:	685b      	ldr	r3, [r3, #4]
    691e:	1c59      	adds	r1, r3, #1
    6920:	687a      	ldr	r2, [r7, #4]
    6922:	6051      	str	r1, [r2, #4]
    6924:	697a      	ldr	r2, [r7, #20]
    6926:	b2d2      	uxtb	r2, r2
    6928:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    692a:	687b      	ldr	r3, [r7, #4]
    692c:	7c1b      	ldrb	r3, [r3, #16]
    692e:	2b01      	cmp	r3, #1
    6930:	d908      	bls.n	6944 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6932:	687b      	ldr	r3, [r7, #4]
    6934:	685b      	ldr	r3, [r3, #4]
    6936:	1c59      	adds	r1, r3, #1
    6938:	687a      	ldr	r2, [r7, #4]
    693a:	6051      	str	r1, [r2, #4]
    693c:	697a      	ldr	r2, [r7, #20]
    693e:	0a12      	lsrs	r2, r2, #8
    6940:	b2d2      	uxtb	r2, r2
    6942:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6944:	687b      	ldr	r3, [r7, #4]
    6946:	68db      	ldr	r3, [r3, #12]
    6948:	1c5a      	adds	r2, r3, #1
    694a:	687b      	ldr	r3, [r7, #4]
    694c:	60da      	str	r2, [r3, #12]

	return true;
    694e:	2301      	movs	r3, #1
}
    6950:	4618      	mov	r0, r3
    6952:	3718      	adds	r7, #24
    6954:	46bd      	mov	sp, r7
    6956:	bd80      	pop	{r7, pc}
    6958:	000058fd 	.word	0x000058fd

0000695c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    695c:	b580      	push	{r7, lr}
    695e:	b086      	sub	sp, #24
    6960:	af00      	add	r7, sp, #0
    6962:	60f8      	str	r0, [r7, #12]
    6964:	60b9      	str	r1, [r7, #8]
    6966:	607a      	str	r2, [r7, #4]
    6968:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    696a:	68bb      	ldr	r3, [r7, #8]
    696c:	f003 0301 	and.w	r3, r3, #1
    6970:	2b00      	cmp	r3, #0
    6972:	d028      	beq.n	69c6 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6974:	687b      	ldr	r3, [r7, #4]
    6976:	681b      	ldr	r3, [r3, #0]
    6978:	2b00      	cmp	r3, #0
    697a:	d018      	beq.n	69ae <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    697c:	687b      	ldr	r3, [r7, #4]
    697e:	681b      	ldr	r3, [r3, #0]
    6980:	1c59      	adds	r1, r3, #1
    6982:	687a      	ldr	r2, [r7, #4]
    6984:	6011      	str	r1, [r2, #0]
    6986:	781b      	ldrb	r3, [r3, #0]
    6988:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    698a:	687b      	ldr	r3, [r7, #4]
    698c:	7c1b      	ldrb	r3, [r3, #16]
    698e:	2b01      	cmp	r3, #1
    6990:	d90f      	bls.n	69b2 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6992:	687b      	ldr	r3, [r7, #4]
    6994:	681b      	ldr	r3, [r3, #0]
    6996:	781b      	ldrb	r3, [r3, #0]
    6998:	021b      	lsls	r3, r3, #8
    699a:	461a      	mov	r2, r3
    699c:	697b      	ldr	r3, [r7, #20]
    699e:	4313      	orrs	r3, r2
    69a0:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    69a2:	687b      	ldr	r3, [r7, #4]
    69a4:	681b      	ldr	r3, [r3, #0]
    69a6:	1c5a      	adds	r2, r3, #1
    69a8:	687b      	ldr	r3, [r7, #4]
    69aa:	601a      	str	r2, [r3, #0]
    69ac:	e001      	b.n	69b2 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    69ae:	887b      	ldrh	r3, [r7, #2]
    69b0:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    69b2:	687b      	ldr	r3, [r7, #4]
    69b4:	689b      	ldr	r3, [r3, #8]
    69b6:	1c5a      	adds	r2, r3, #1
    69b8:	687b      	ldr	r3, [r7, #4]
    69ba:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    69bc:	6979      	ldr	r1, [r7, #20]
    69be:	68f8      	ldr	r0, [r7, #12]
    69c0:	4b03      	ldr	r3, [pc, #12]	; (69d0 <_spi_tx_check_and_send+0x74>)
    69c2:	4798      	blx	r3
    69c4:	e000      	b.n	69c8 <_spi_tx_check_and_send+0x6c>
		return;
    69c6:	bf00      	nop
}
    69c8:	3718      	adds	r7, #24
    69ca:	46bd      	mov	sp, r7
    69cc:	bd80      	pop	{r7, pc}
    69ce:	bf00      	nop
    69d0:	000058e1 	.word	0x000058e1

000069d4 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    69d4:	b580      	push	{r7, lr}
    69d6:	b082      	sub	sp, #8
    69d8:	af00      	add	r7, sp, #0
    69da:	6078      	str	r0, [r7, #4]
    69dc:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    69de:	687b      	ldr	r3, [r7, #4]
    69e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    69e4:	2b00      	cmp	r3, #0
    69e6:	d00b      	beq.n	6a00 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    69e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    69ec:	6838      	ldr	r0, [r7, #0]
    69ee:	4b07      	ldr	r3, [pc, #28]	; (6a0c <_spi_err_check+0x38>)
    69f0:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    69f2:	2180      	movs	r1, #128	; 0x80
    69f4:	6838      	ldr	r0, [r7, #0]
    69f6:	4b06      	ldr	r3, [pc, #24]	; (6a10 <_spi_err_check+0x3c>)
    69f8:	4798      	blx	r3
		return ERR_OVERFLOW;
    69fa:	f06f 0312 	mvn.w	r3, #18
    69fe:	e000      	b.n	6a02 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6a00:	2300      	movs	r3, #0
}
    6a02:	4618      	mov	r0, r3
    6a04:	3708      	adds	r7, #8
    6a06:	46bd      	mov	sp, r7
    6a08:	bd80      	pop	{r7, pc}
    6a0a:	bf00      	nop
    6a0c:	00005935 	.word	0x00005935
    6a10:	000053b7 	.word	0x000053b7

00006a14 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6a14:	b590      	push	{r4, r7, lr}
    6a16:	b08b      	sub	sp, #44	; 0x2c
    6a18:	af00      	add	r7, sp, #0
    6a1a:	6078      	str	r0, [r7, #4]
    6a1c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6a1e:	687b      	ldr	r3, [r7, #4]
    6a20:	681b      	ldr	r3, [r3, #0]
    6a22:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6a24:	2300      	movs	r3, #0
    6a26:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6a28:	683b      	ldr	r3, [r7, #0]
    6a2a:	681b      	ldr	r3, [r3, #0]
    6a2c:	60bb      	str	r3, [r7, #8]
    6a2e:	683b      	ldr	r3, [r7, #0]
    6a30:	685b      	ldr	r3, [r3, #4]
    6a32:	60fb      	str	r3, [r7, #12]
    6a34:	2300      	movs	r3, #0
    6a36:	613b      	str	r3, [r7, #16]
    6a38:	2300      	movs	r3, #0
    6a3a:	617b      	str	r3, [r7, #20]
    6a3c:	687b      	ldr	r3, [r7, #4]
    6a3e:	791b      	ldrb	r3, [r3, #4]
    6a40:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6a42:	687b      	ldr	r3, [r7, #4]
    6a44:	2b00      	cmp	r3, #0
    6a46:	d004      	beq.n	6a52 <_spi_m_sync_trans+0x3e>
    6a48:	6a3b      	ldr	r3, [r7, #32]
    6a4a:	2b00      	cmp	r3, #0
    6a4c:	d001      	beq.n	6a52 <_spi_m_sync_trans+0x3e>
    6a4e:	2301      	movs	r3, #1
    6a50:	e000      	b.n	6a54 <_spi_m_sync_trans+0x40>
    6a52:	2300      	movs	r3, #0
    6a54:	f003 0301 	and.w	r3, r3, #1
    6a58:	b2db      	uxtb	r3, r3
    6a5a:	f640 324d 	movw	r2, #2893	; 0xb4d
    6a5e:	492b      	ldr	r1, [pc, #172]	; (6b0c <_spi_m_sync_trans+0xf8>)
    6a60:	4618      	mov	r0, r3
    6a62:	4b2b      	ldr	r3, [pc, #172]	; (6b10 <_spi_m_sync_trans+0xfc>)
    6a64:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6a66:	2107      	movs	r1, #7
    6a68:	6a38      	ldr	r0, [r7, #32]
    6a6a:	4b2a      	ldr	r3, [pc, #168]	; (6b14 <_spi_m_sync_trans+0x100>)
    6a6c:	4798      	blx	r3
    6a6e:	4603      	mov	r3, r0
    6a70:	2b00      	cmp	r3, #0
    6a72:	d002      	beq.n	6a7a <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6a74:	f06f 0303 	mvn.w	r3, #3
    6a78:	e043      	b.n	6b02 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6a7a:	6a38      	ldr	r0, [r7, #32]
    6a7c:	4b26      	ldr	r3, [pc, #152]	; (6b18 <_spi_m_sync_trans+0x104>)
    6a7e:	4798      	blx	r3
    6a80:	4603      	mov	r3, r0
    6a82:	f083 0301 	eor.w	r3, r3, #1
    6a86:	b2db      	uxtb	r3, r3
    6a88:	2b00      	cmp	r3, #0
    6a8a:	d002      	beq.n	6a92 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6a8c:	f06f 0313 	mvn.w	r3, #19
    6a90:	e037      	b.n	6b02 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6a92:	6a38      	ldr	r0, [r7, #32]
    6a94:	4b21      	ldr	r3, [pc, #132]	; (6b1c <_spi_m_sync_trans+0x108>)
    6a96:	4798      	blx	r3
    6a98:	4603      	mov	r3, r0
    6a9a:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6a9c:	f107 0308 	add.w	r3, r7, #8
    6aa0:	461a      	mov	r2, r3
    6aa2:	69f9      	ldr	r1, [r7, #28]
    6aa4:	6a38      	ldr	r0, [r7, #32]
    6aa6:	4b1e      	ldr	r3, [pc, #120]	; (6b20 <_spi_m_sync_trans+0x10c>)
    6aa8:	4798      	blx	r3
    6aaa:	4603      	mov	r3, r0
    6aac:	f083 0301 	eor.w	r3, r3, #1
    6ab0:	b2db      	uxtb	r3, r3
    6ab2:	2b00      	cmp	r3, #0
    6ab4:	d00b      	beq.n	6ace <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6ab6:	697a      	ldr	r2, [r7, #20]
    6ab8:	693b      	ldr	r3, [r7, #16]
    6aba:	429a      	cmp	r2, r3
    6abc:	d307      	bcc.n	6ace <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6abe:	687b      	ldr	r3, [r7, #4]
    6ac0:	88db      	ldrh	r3, [r3, #6]
    6ac2:	f107 0208 	add.w	r2, r7, #8
    6ac6:	69f9      	ldr	r1, [r7, #28]
    6ac8:	6a38      	ldr	r0, [r7, #32]
    6aca:	4c16      	ldr	r4, [pc, #88]	; (6b24 <_spi_m_sync_trans+0x110>)
    6acc:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6ace:	6a39      	ldr	r1, [r7, #32]
    6ad0:	69f8      	ldr	r0, [r7, #28]
    6ad2:	4b15      	ldr	r3, [pc, #84]	; (6b28 <_spi_m_sync_trans+0x114>)
    6ad4:	4798      	blx	r3
    6ad6:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6ada:	2b00      	cmp	r3, #0
    6adc:	db0c      	blt.n	6af8 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6ade:	693a      	ldr	r2, [r7, #16]
    6ae0:	683b      	ldr	r3, [r7, #0]
    6ae2:	689b      	ldr	r3, [r3, #8]
    6ae4:	429a      	cmp	r2, r3
    6ae6:	d3d4      	bcc.n	6a92 <_spi_m_sync_trans+0x7e>
    6ae8:	697a      	ldr	r2, [r7, #20]
    6aea:	683b      	ldr	r3, [r7, #0]
    6aec:	689b      	ldr	r3, [r3, #8]
    6aee:	429a      	cmp	r2, r3
    6af0:	d3cf      	bcc.n	6a92 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6af2:	693b      	ldr	r3, [r7, #16]
    6af4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6af6:	e000      	b.n	6afa <_spi_m_sync_trans+0xe6>
			break;
    6af8:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6afa:	6a38      	ldr	r0, [r7, #32]
    6afc:	4b0b      	ldr	r3, [pc, #44]	; (6b2c <_spi_m_sync_trans+0x118>)
    6afe:	4798      	blx	r3

	return rc;
    6b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6b02:	4618      	mov	r0, r3
    6b04:	372c      	adds	r7, #44	; 0x2c
    6b06:	46bd      	mov	sp, r7
    6b08:	bd90      	pop	{r4, r7, pc}
    6b0a:	bf00      	nop
    6b0c:	0000ce34 	.word	0x0000ce34
    6b10:	00003249 	.word	0x00003249
    6b14:	000052e1 	.word	0x000052e1
    6b18:	000055f5 	.word	0x000055f5
    6b1c:	0000539d 	.word	0x0000539d
    6b20:	000068f1 	.word	0x000068f1
    6b24:	0000695d 	.word	0x0000695d
    6b28:	000069d5 	.word	0x000069d5
    6b2c:	000068c1 	.word	0x000068c1

00006b30 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    6b30:	b580      	push	{r7, lr}
    6b32:	b084      	sub	sp, #16
    6b34:	af00      	add	r7, sp, #0
    6b36:	6078      	str	r0, [r7, #4]
    6b38:	460b      	mov	r3, r1
    6b3a:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6b3c:	687b      	ldr	r3, [r7, #4]
    6b3e:	681b      	ldr	r3, [r3, #0]
    6b40:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	2b00      	cmp	r3, #0
    6b46:	d004      	beq.n	6b52 <_spi_m_async_enable_tx+0x22>
    6b48:	68fb      	ldr	r3, [r7, #12]
    6b4a:	2b00      	cmp	r3, #0
    6b4c:	d001      	beq.n	6b52 <_spi_m_async_enable_tx+0x22>
    6b4e:	2301      	movs	r3, #1
    6b50:	e000      	b.n	6b54 <_spi_m_async_enable_tx+0x24>
    6b52:	2300      	movs	r3, #0
    6b54:	f003 0301 	and.w	r3, r3, #1
    6b58:	b2db      	uxtb	r3, r3
    6b5a:	f640 3279 	movw	r2, #2937	; 0xb79
    6b5e:	4909      	ldr	r1, [pc, #36]	; (6b84 <_spi_m_async_enable_tx+0x54>)
    6b60:	4618      	mov	r0, r3
    6b62:	4b09      	ldr	r3, [pc, #36]	; (6b88 <_spi_m_async_enable_tx+0x58>)
    6b64:	4798      	blx	r3

	if (state) {
    6b66:	78fb      	ldrb	r3, [r7, #3]
    6b68:	2b00      	cmp	r3, #0
    6b6a:	d003      	beq.n	6b74 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    6b6c:	68f8      	ldr	r0, [r7, #12]
    6b6e:	4b07      	ldr	r3, [pc, #28]	; (6b8c <_spi_m_async_enable_tx+0x5c>)
    6b70:	4798      	blx	r3
    6b72:	e002      	b.n	6b7a <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    6b74:	68f8      	ldr	r0, [r7, #12]
    6b76:	4b06      	ldr	r3, [pc, #24]	; (6b90 <_spi_m_async_enable_tx+0x60>)
    6b78:	4798      	blx	r3
	}

	return ERR_NONE;
    6b7a:	2300      	movs	r3, #0
}
    6b7c:	4618      	mov	r0, r3
    6b7e:	3710      	adds	r7, #16
    6b80:	46bd      	mov	sp, r7
    6b82:	bd80      	pop	{r7, pc}
    6b84:	0000ce34 	.word	0x0000ce34
    6b88:	00003249 	.word	0x00003249
    6b8c:	0000546b 	.word	0x0000546b
    6b90:	00005485 	.word	0x00005485

00006b94 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    6b94:	b580      	push	{r7, lr}
    6b96:	b084      	sub	sp, #16
    6b98:	af00      	add	r7, sp, #0
    6b9a:	6078      	str	r0, [r7, #4]
    6b9c:	460b      	mov	r3, r1
    6b9e:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	681b      	ldr	r3, [r3, #0]
    6ba4:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    6ba6:	687b      	ldr	r3, [r7, #4]
    6ba8:	2b00      	cmp	r3, #0
    6baa:	bf14      	ite	ne
    6bac:	2301      	movne	r3, #1
    6bae:	2300      	moveq	r3, #0
    6bb0:	b2db      	uxtb	r3, r3
    6bb2:	f640 328d 	movw	r2, #2957	; 0xb8d
    6bb6:	490f      	ldr	r1, [pc, #60]	; (6bf4 <_spi_m_async_enable_rx+0x60>)
    6bb8:	4618      	mov	r0, r3
    6bba:	4b0f      	ldr	r3, [pc, #60]	; (6bf8 <_spi_m_async_enable_rx+0x64>)
    6bbc:	4798      	blx	r3
	ASSERT(hw);
    6bbe:	68fb      	ldr	r3, [r7, #12]
    6bc0:	2b00      	cmp	r3, #0
    6bc2:	bf14      	ite	ne
    6bc4:	2301      	movne	r3, #1
    6bc6:	2300      	moveq	r3, #0
    6bc8:	b2db      	uxtb	r3, r3
    6bca:	f640 328e 	movw	r2, #2958	; 0xb8e
    6bce:	4909      	ldr	r1, [pc, #36]	; (6bf4 <_spi_m_async_enable_rx+0x60>)
    6bd0:	4618      	mov	r0, r3
    6bd2:	4b09      	ldr	r3, [pc, #36]	; (6bf8 <_spi_m_async_enable_rx+0x64>)
    6bd4:	4798      	blx	r3

	if (state) {
    6bd6:	78fb      	ldrb	r3, [r7, #3]
    6bd8:	2b00      	cmp	r3, #0
    6bda:	d003      	beq.n	6be4 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    6bdc:	68f8      	ldr	r0, [r7, #12]
    6bde:	4b07      	ldr	r3, [pc, #28]	; (6bfc <_spi_m_async_enable_rx+0x68>)
    6be0:	4798      	blx	r3
    6be2:	e002      	b.n	6bea <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    6be4:	68f8      	ldr	r0, [r7, #12]
    6be6:	4b06      	ldr	r3, [pc, #24]	; (6c00 <_spi_m_async_enable_rx+0x6c>)
    6be8:	4798      	blx	r3
	}

	return ERR_NONE;
    6bea:	2300      	movs	r3, #0
}
    6bec:	4618      	mov	r0, r3
    6bee:	3710      	adds	r7, #16
    6bf0:	46bd      	mov	sp, r7
    6bf2:	bd80      	pop	{r7, pc}
    6bf4:	0000ce34 	.word	0x0000ce34
    6bf8:	00003249 	.word	0x00003249
    6bfc:	000054d3 	.word	0x000054d3
    6c00:	000054ed 	.word	0x000054ed

00006c04 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    6c04:	b580      	push	{r7, lr}
    6c06:	b082      	sub	sp, #8
    6c08:	af00      	add	r7, sp, #0
    6c0a:	6078      	str	r0, [r7, #4]
    6c0c:	460b      	mov	r3, r1
    6c0e:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    6c10:	687b      	ldr	r3, [r7, #4]
    6c12:	2b00      	cmp	r3, #0
    6c14:	d005      	beq.n	6c22 <_spi_m_async_enable_tx_complete+0x1e>
    6c16:	687b      	ldr	r3, [r7, #4]
    6c18:	681b      	ldr	r3, [r3, #0]
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	d001      	beq.n	6c22 <_spi_m_async_enable_tx_complete+0x1e>
    6c1e:	2301      	movs	r3, #1
    6c20:	e000      	b.n	6c24 <_spi_m_async_enable_tx_complete+0x20>
    6c22:	2300      	movs	r3, #0
    6c24:	f003 0301 	and.w	r3, r3, #1
    6c28:	b2db      	uxtb	r3, r3
    6c2a:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    6c2e:	490b      	ldr	r1, [pc, #44]	; (6c5c <_spi_m_async_enable_tx_complete+0x58>)
    6c30:	4618      	mov	r0, r3
    6c32:	4b0b      	ldr	r3, [pc, #44]	; (6c60 <_spi_m_async_enable_tx_complete+0x5c>)
    6c34:	4798      	blx	r3

	if (state) {
    6c36:	78fb      	ldrb	r3, [r7, #3]
    6c38:	2b00      	cmp	r3, #0
    6c3a:	d005      	beq.n	6c48 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    6c3c:	687b      	ldr	r3, [r7, #4]
    6c3e:	681b      	ldr	r3, [r3, #0]
    6c40:	4618      	mov	r0, r3
    6c42:	4b08      	ldr	r3, [pc, #32]	; (6c64 <_spi_m_async_enable_tx_complete+0x60>)
    6c44:	4798      	blx	r3
    6c46:	e004      	b.n	6c52 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    6c48:	687b      	ldr	r3, [r7, #4]
    6c4a:	681b      	ldr	r3, [r3, #0]
    6c4c:	4618      	mov	r0, r3
    6c4e:	4b06      	ldr	r3, [pc, #24]	; (6c68 <_spi_m_async_enable_tx_complete+0x64>)
    6c50:	4798      	blx	r3
	}

	return ERR_NONE;
    6c52:	2300      	movs	r3, #0
}
    6c54:	4618      	mov	r0, r3
    6c56:	3708      	adds	r7, #8
    6c58:	46bd      	mov	sp, r7
    6c5a:	bd80      	pop	{r7, pc}
    6c5c:	0000ce34 	.word	0x0000ce34
    6c60:	00003249 	.word	0x00003249
    6c64:	0000549f 	.word	0x0000549f
    6c68:	000054b9 	.word	0x000054b9

00006c6c <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    6c6c:	b580      	push	{r7, lr}
    6c6e:	b082      	sub	sp, #8
    6c70:	af00      	add	r7, sp, #0
    6c72:	6078      	str	r0, [r7, #4]
    6c74:	460b      	mov	r3, r1
    6c76:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    6c78:	687b      	ldr	r3, [r7, #4]
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	d005      	beq.n	6c8a <_spi_m_async_write_one+0x1e>
    6c7e:	687b      	ldr	r3, [r7, #4]
    6c80:	681b      	ldr	r3, [r3, #0]
    6c82:	2b00      	cmp	r3, #0
    6c84:	d001      	beq.n	6c8a <_spi_m_async_write_one+0x1e>
    6c86:	2301      	movs	r3, #1
    6c88:	e000      	b.n	6c8c <_spi_m_async_write_one+0x20>
    6c8a:	2300      	movs	r3, #0
    6c8c:	f003 0301 	and.w	r3, r3, #1
    6c90:	b2db      	uxtb	r3, r3
    6c92:	f640 32b2 	movw	r2, #2994	; 0xbb2
    6c96:	4908      	ldr	r1, [pc, #32]	; (6cb8 <_spi_m_async_write_one+0x4c>)
    6c98:	4618      	mov	r0, r3
    6c9a:	4b08      	ldr	r3, [pc, #32]	; (6cbc <_spi_m_async_write_one+0x50>)
    6c9c:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    6c9e:	687b      	ldr	r3, [r7, #4]
    6ca0:	681b      	ldr	r3, [r3, #0]
    6ca2:	887a      	ldrh	r2, [r7, #2]
    6ca4:	4611      	mov	r1, r2
    6ca6:	4618      	mov	r0, r3
    6ca8:	4b05      	ldr	r3, [pc, #20]	; (6cc0 <_spi_m_async_write_one+0x54>)
    6caa:	4798      	blx	r3

	return ERR_NONE;
    6cac:	2300      	movs	r3, #0
}
    6cae:	4618      	mov	r0, r3
    6cb0:	3708      	adds	r7, #8
    6cb2:	46bd      	mov	sp, r7
    6cb4:	bd80      	pop	{r7, pc}
    6cb6:	bf00      	nop
    6cb8:	0000ce34 	.word	0x0000ce34
    6cbc:	00003249 	.word	0x00003249
    6cc0:	000058e1 	.word	0x000058e1

00006cc4 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    6cc4:	b580      	push	{r7, lr}
    6cc6:	b082      	sub	sp, #8
    6cc8:	af00      	add	r7, sp, #0
    6cca:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d005      	beq.n	6cde <_spi_m_async_read_one+0x1a>
    6cd2:	687b      	ldr	r3, [r7, #4]
    6cd4:	681b      	ldr	r3, [r3, #0]
    6cd6:	2b00      	cmp	r3, #0
    6cd8:	d001      	beq.n	6cde <_spi_m_async_read_one+0x1a>
    6cda:	2301      	movs	r3, #1
    6cdc:	e000      	b.n	6ce0 <_spi_m_async_read_one+0x1c>
    6cde:	2300      	movs	r3, #0
    6ce0:	f003 0301 	and.w	r3, r3, #1
    6ce4:	b2db      	uxtb	r3, r3
    6ce6:	f640 32cd 	movw	r2, #3021	; 0xbcd
    6cea:	4907      	ldr	r1, [pc, #28]	; (6d08 <_spi_m_async_read_one+0x44>)
    6cec:	4618      	mov	r0, r3
    6cee:	4b07      	ldr	r3, [pc, #28]	; (6d0c <_spi_m_async_read_one+0x48>)
    6cf0:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    6cf2:	687b      	ldr	r3, [r7, #4]
    6cf4:	681b      	ldr	r3, [r3, #0]
    6cf6:	4618      	mov	r0, r3
    6cf8:	4b05      	ldr	r3, [pc, #20]	; (6d10 <_spi_m_async_read_one+0x4c>)
    6cfa:	4798      	blx	r3
    6cfc:	4603      	mov	r3, r0
    6cfe:	b29b      	uxth	r3, r3
}
    6d00:	4618      	mov	r0, r3
    6d02:	3708      	adds	r7, #8
    6d04:	46bd      	mov	sp, r7
    6d06:	bd80      	pop	{r7, pc}
    6d08:	0000ce34 	.word	0x0000ce34
    6d0c:	00003249 	.word	0x00003249
    6d10:	000058fd 	.word	0x000058fd

00006d14 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    6d14:	b580      	push	{r7, lr}
    6d16:	b086      	sub	sp, #24
    6d18:	af00      	add	r7, sp, #0
    6d1a:	60f8      	str	r0, [r7, #12]
    6d1c:	460b      	mov	r3, r1
    6d1e:	607a      	str	r2, [r7, #4]
    6d20:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    6d22:	68fb      	ldr	r3, [r7, #12]
    6d24:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    6d26:	68fb      	ldr	r3, [r7, #12]
    6d28:	2b00      	cmp	r3, #0
    6d2a:	d004      	beq.n	6d36 <_spi_m_async_register_callback+0x22>
    6d2c:	7afb      	ldrb	r3, [r7, #11]
    6d2e:	2b03      	cmp	r3, #3
    6d30:	d801      	bhi.n	6d36 <_spi_m_async_register_callback+0x22>
    6d32:	2301      	movs	r3, #1
    6d34:	e000      	b.n	6d38 <_spi_m_async_register_callback+0x24>
    6d36:	2300      	movs	r3, #0
    6d38:	f003 0301 	and.w	r3, r3, #1
    6d3c:	b2db      	uxtb	r3, r3
    6d3e:	f640 32e6 	movw	r2, #3046	; 0xbe6
    6d42:	4909      	ldr	r1, [pc, #36]	; (6d68 <_spi_m_async_register_callback+0x54>)
    6d44:	4618      	mov	r0, r3
    6d46:	4b09      	ldr	r3, [pc, #36]	; (6d6c <_spi_m_async_register_callback+0x58>)
    6d48:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    6d4a:	697b      	ldr	r3, [r7, #20]
    6d4c:	3308      	adds	r3, #8
    6d4e:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    6d50:	7afb      	ldrb	r3, [r7, #11]
    6d52:	009b      	lsls	r3, r3, #2
    6d54:	693a      	ldr	r2, [r7, #16]
    6d56:	4413      	add	r3, r2
    6d58:	687a      	ldr	r2, [r7, #4]
    6d5a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    6d5c:	2300      	movs	r3, #0
}
    6d5e:	4618      	mov	r0, r3
    6d60:	3718      	adds	r7, #24
    6d62:	46bd      	mov	sp, r7
    6d64:	bd80      	pop	{r7, pc}
    6d66:	bf00      	nop
    6d68:	0000ce34 	.word	0x0000ce34
    6d6c:	00003249 	.word	0x00003249

00006d70 <__NVIC_EnableIRQ>:
{
    6d70:	b480      	push	{r7}
    6d72:	b083      	sub	sp, #12
    6d74:	af00      	add	r7, sp, #0
    6d76:	4603      	mov	r3, r0
    6d78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d7e:	2b00      	cmp	r3, #0
    6d80:	db0b      	blt.n	6d9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d82:	4909      	ldr	r1, [pc, #36]	; (6da8 <__NVIC_EnableIRQ+0x38>)
    6d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6d88:	095b      	lsrs	r3, r3, #5
    6d8a:	88fa      	ldrh	r2, [r7, #6]
    6d8c:	f002 021f 	and.w	r2, r2, #31
    6d90:	2001      	movs	r0, #1
    6d92:	fa00 f202 	lsl.w	r2, r0, r2
    6d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d9a:	bf00      	nop
    6d9c:	370c      	adds	r7, #12
    6d9e:	46bd      	mov	sp, r7
    6da0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6da4:	4770      	bx	lr
    6da6:	bf00      	nop
    6da8:	e000e100 	.word	0xe000e100

00006dac <__NVIC_DisableIRQ>:
{
    6dac:	b480      	push	{r7}
    6dae:	b083      	sub	sp, #12
    6db0:	af00      	add	r7, sp, #0
    6db2:	4603      	mov	r3, r0
    6db4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6dba:	2b00      	cmp	r3, #0
    6dbc:	db10      	blt.n	6de0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6dbe:	490b      	ldr	r1, [pc, #44]	; (6dec <__NVIC_DisableIRQ+0x40>)
    6dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6dc4:	095b      	lsrs	r3, r3, #5
    6dc6:	88fa      	ldrh	r2, [r7, #6]
    6dc8:	f002 021f 	and.w	r2, r2, #31
    6dcc:	2001      	movs	r0, #1
    6dce:	fa00 f202 	lsl.w	r2, r0, r2
    6dd2:	3320      	adds	r3, #32
    6dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6dd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6ddc:	f3bf 8f6f 	isb	sy
}
    6de0:	bf00      	nop
    6de2:	370c      	adds	r7, #12
    6de4:	46bd      	mov	sp, r7
    6de6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dea:	4770      	bx	lr
    6dec:	e000e100 	.word	0xe000e100

00006df0 <__NVIC_ClearPendingIRQ>:
{
    6df0:	b480      	push	{r7}
    6df2:	b083      	sub	sp, #12
    6df4:	af00      	add	r7, sp, #0
    6df6:	4603      	mov	r3, r0
    6df8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6dfe:	2b00      	cmp	r3, #0
    6e00:	db0c      	blt.n	6e1c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e02:	4909      	ldr	r1, [pc, #36]	; (6e28 <__NVIC_ClearPendingIRQ+0x38>)
    6e04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6e08:	095b      	lsrs	r3, r3, #5
    6e0a:	88fa      	ldrh	r2, [r7, #6]
    6e0c:	f002 021f 	and.w	r2, r2, #31
    6e10:	2001      	movs	r0, #1
    6e12:	fa00 f202 	lsl.w	r2, r0, r2
    6e16:	3360      	adds	r3, #96	; 0x60
    6e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e1c:	bf00      	nop
    6e1e:	370c      	adds	r7, #12
    6e20:	46bd      	mov	sp, r7
    6e22:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e26:	4770      	bx	lr
    6e28:	e000e100 	.word	0xe000e100

00006e2c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    6e2c:	b480      	push	{r7}
    6e2e:	b083      	sub	sp, #12
    6e30:	af00      	add	r7, sp, #0
    6e32:	6078      	str	r0, [r7, #4]
    6e34:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    6e36:	bf00      	nop
    6e38:	687b      	ldr	r3, [r7, #4]
    6e3a:	691a      	ldr	r2, [r3, #16]
    6e3c:	683b      	ldr	r3, [r7, #0]
    6e3e:	4013      	ands	r3, r2
    6e40:	2b00      	cmp	r3, #0
    6e42:	d1f9      	bne.n	6e38 <hri_tc_wait_for_sync+0xc>
	};
}
    6e44:	bf00      	nop
    6e46:	370c      	adds	r7, #12
    6e48:	46bd      	mov	sp, r7
    6e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e4e:	4770      	bx	lr

00006e50 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    6e50:	b480      	push	{r7}
    6e52:	b083      	sub	sp, #12
    6e54:	af00      	add	r7, sp, #0
    6e56:	6078      	str	r0, [r7, #4]
    6e58:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    6e5a:	687b      	ldr	r3, [r7, #4]
    6e5c:	691a      	ldr	r2, [r3, #16]
    6e5e:	683b      	ldr	r3, [r7, #0]
    6e60:	4013      	ands	r3, r2
    6e62:	2b00      	cmp	r3, #0
    6e64:	bf14      	ite	ne
    6e66:	2301      	movne	r3, #1
    6e68:	2300      	moveq	r3, #0
    6e6a:	b2db      	uxtb	r3, r3
}
    6e6c:	4618      	mov	r0, r3
    6e6e:	370c      	adds	r7, #12
    6e70:	46bd      	mov	sp, r7
    6e72:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e76:	4770      	bx	lr

00006e78 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    6e78:	b480      	push	{r7}
    6e7a:	b083      	sub	sp, #12
    6e7c:	af00      	add	r7, sp, #0
    6e7e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    6e80:	687b      	ldr	r3, [r7, #4]
    6e82:	7a9b      	ldrb	r3, [r3, #10]
    6e84:	b2db      	uxtb	r3, r3
    6e86:	f003 0301 	and.w	r3, r3, #1
    6e8a:	2b00      	cmp	r3, #0
    6e8c:	bf14      	ite	ne
    6e8e:	2301      	movne	r3, #1
    6e90:	2300      	moveq	r3, #0
    6e92:	b2db      	uxtb	r3, r3
}
    6e94:	4618      	mov	r0, r3
    6e96:	370c      	adds	r7, #12
    6e98:	46bd      	mov	sp, r7
    6e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e9e:	4770      	bx	lr

00006ea0 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    6ea0:	b480      	push	{r7}
    6ea2:	b083      	sub	sp, #12
    6ea4:	af00      	add	r7, sp, #0
    6ea6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    6ea8:	687b      	ldr	r3, [r7, #4]
    6eaa:	2201      	movs	r2, #1
    6eac:	729a      	strb	r2, [r3, #10]
}
    6eae:	bf00      	nop
    6eb0:	370c      	adds	r7, #12
    6eb2:	46bd      	mov	sp, r7
    6eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eb8:	4770      	bx	lr

00006eba <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    6eba:	b480      	push	{r7}
    6ebc:	b083      	sub	sp, #12
    6ebe:	af00      	add	r7, sp, #0
    6ec0:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    6ec2:	687b      	ldr	r3, [r7, #4]
    6ec4:	2202      	movs	r2, #2
    6ec6:	729a      	strb	r2, [r3, #10]
}
    6ec8:	bf00      	nop
    6eca:	370c      	adds	r7, #12
    6ecc:	46bd      	mov	sp, r7
    6ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ed2:	4770      	bx	lr

00006ed4 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    6ed4:	b480      	push	{r7}
    6ed6:	b083      	sub	sp, #12
    6ed8:	af00      	add	r7, sp, #0
    6eda:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    6edc:	687b      	ldr	r3, [r7, #4]
    6ede:	2201      	movs	r2, #1
    6ee0:	725a      	strb	r2, [r3, #9]
}
    6ee2:	bf00      	nop
    6ee4:	370c      	adds	r7, #12
    6ee6:	46bd      	mov	sp, r7
    6ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6eec:	4770      	bx	lr

00006eee <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    6eee:	b480      	push	{r7}
    6ef0:	b083      	sub	sp, #12
    6ef2:	af00      	add	r7, sp, #0
    6ef4:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    6ef6:	687b      	ldr	r3, [r7, #4]
    6ef8:	7a5b      	ldrb	r3, [r3, #9]
    6efa:	b2db      	uxtb	r3, r3
    6efc:	085b      	lsrs	r3, r3, #1
    6efe:	f003 0301 	and.w	r3, r3, #1
    6f02:	2b00      	cmp	r3, #0
    6f04:	bf14      	ite	ne
    6f06:	2301      	movne	r3, #1
    6f08:	2300      	moveq	r3, #0
    6f0a:	b2db      	uxtb	r3, r3
}
    6f0c:	4618      	mov	r0, r3
    6f0e:	370c      	adds	r7, #12
    6f10:	46bd      	mov	sp, r7
    6f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f16:	4770      	bx	lr

00006f18 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6f18:	b580      	push	{r7, lr}
    6f1a:	b082      	sub	sp, #8
    6f1c:	af00      	add	r7, sp, #0
    6f1e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    6f20:	687b      	ldr	r3, [r7, #4]
    6f22:	681b      	ldr	r3, [r3, #0]
    6f24:	f023 0202 	bic.w	r2, r3, #2
    6f28:	687b      	ldr	r3, [r7, #4]
    6f2a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6f2c:	2103      	movs	r1, #3
    6f2e:	6878      	ldr	r0, [r7, #4]
    6f30:	4b02      	ldr	r3, [pc, #8]	; (6f3c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    6f32:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6f34:	bf00      	nop
    6f36:	3708      	adds	r7, #8
    6f38:	46bd      	mov	sp, r7
    6f3a:	bd80      	pop	{r7, pc}
    6f3c:	00006e2d 	.word	0x00006e2d

00006f40 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    6f40:	b580      	push	{r7, lr}
    6f42:	b084      	sub	sp, #16
    6f44:	af00      	add	r7, sp, #0
    6f46:	6078      	str	r0, [r7, #4]
    6f48:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6f4a:	2103      	movs	r1, #3
    6f4c:	6878      	ldr	r0, [r7, #4]
    6f4e:	4b07      	ldr	r3, [pc, #28]	; (6f6c <hri_tc_get_CTRLA_reg+0x2c>)
    6f50:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    6f52:	687b      	ldr	r3, [r7, #4]
    6f54:	681b      	ldr	r3, [r3, #0]
    6f56:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6f58:	68fa      	ldr	r2, [r7, #12]
    6f5a:	683b      	ldr	r3, [r7, #0]
    6f5c:	4013      	ands	r3, r2
    6f5e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6f60:	68fb      	ldr	r3, [r7, #12]
}
    6f62:	4618      	mov	r0, r3
    6f64:	3710      	adds	r7, #16
    6f66:	46bd      	mov	sp, r7
    6f68:	bd80      	pop	{r7, pc}
    6f6a:	bf00      	nop
    6f6c:	00006e2d 	.word	0x00006e2d

00006f70 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    6f70:	b580      	push	{r7, lr}
    6f72:	b082      	sub	sp, #8
    6f74:	af00      	add	r7, sp, #0
    6f76:	6078      	str	r0, [r7, #4]
    6f78:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    6f7a:	687b      	ldr	r3, [r7, #4]
    6f7c:	683a      	ldr	r2, [r7, #0]
    6f7e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    6f80:	2103      	movs	r1, #3
    6f82:	6878      	ldr	r0, [r7, #4]
    6f84:	4b02      	ldr	r3, [pc, #8]	; (6f90 <hri_tc_write_CTRLA_reg+0x20>)
    6f86:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    6f88:	bf00      	nop
    6f8a:	3708      	adds	r7, #8
    6f8c:	46bd      	mov	sp, r7
    6f8e:	bd80      	pop	{r7, pc}
    6f90:	00006e2d 	.word	0x00006e2d

00006f94 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    6f94:	b480      	push	{r7}
    6f96:	b083      	sub	sp, #12
    6f98:	af00      	add	r7, sp, #0
    6f9a:	6078      	str	r0, [r7, #4]
    6f9c:	460b      	mov	r3, r1
    6f9e:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    6fa0:	687b      	ldr	r3, [r7, #4]
    6fa2:	887a      	ldrh	r2, [r7, #2]
    6fa4:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    6fa6:	bf00      	nop
    6fa8:	370c      	adds	r7, #12
    6faa:	46bd      	mov	sp, r7
    6fac:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fb0:	4770      	bx	lr

00006fb2 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    6fb2:	b480      	push	{r7}
    6fb4:	b083      	sub	sp, #12
    6fb6:	af00      	add	r7, sp, #0
    6fb8:	6078      	str	r0, [r7, #4]
    6fba:	460b      	mov	r3, r1
    6fbc:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    6fbe:	687b      	ldr	r3, [r7, #4]
    6fc0:	78fa      	ldrb	r2, [r7, #3]
    6fc2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    6fc4:	bf00      	nop
    6fc6:	370c      	adds	r7, #12
    6fc8:	46bd      	mov	sp, r7
    6fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fce:	4770      	bx	lr

00006fd0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    6fd0:	b480      	push	{r7}
    6fd2:	b083      	sub	sp, #12
    6fd4:	af00      	add	r7, sp, #0
    6fd6:	6078      	str	r0, [r7, #4]
    6fd8:	460b      	mov	r3, r1
    6fda:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    6fdc:	687b      	ldr	r3, [r7, #4]
    6fde:	78fa      	ldrb	r2, [r7, #3]
    6fe0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    6fe2:	bf00      	nop
    6fe4:	370c      	adds	r7, #12
    6fe6:	46bd      	mov	sp, r7
    6fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6fec:	4770      	bx	lr
	...

00006ff0 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    6ff0:	b580      	push	{r7, lr}
    6ff2:	b082      	sub	sp, #8
    6ff4:	af00      	add	r7, sp, #0
    6ff6:	6078      	str	r0, [r7, #4]
    6ff8:	460b      	mov	r3, r1
    6ffa:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    6ffc:	687b      	ldr	r3, [r7, #4]
    6ffe:	78fa      	ldrb	r2, [r7, #3]
    7000:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7002:	2120      	movs	r1, #32
    7004:	6878      	ldr	r0, [r7, #4]
    7006:	4b03      	ldr	r3, [pc, #12]	; (7014 <hri_tccount8_write_PER_reg+0x24>)
    7008:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    700a:	bf00      	nop
    700c:	3708      	adds	r7, #8
    700e:	46bd      	mov	sp, r7
    7010:	bd80      	pop	{r7, pc}
    7012:	bf00      	nop
    7014:	00006e2d 	.word	0x00006e2d

00007018 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    7018:	b580      	push	{r7, lr}
    701a:	b082      	sub	sp, #8
    701c:	af00      	add	r7, sp, #0
    701e:	6078      	str	r0, [r7, #4]
    7020:	460b      	mov	r3, r1
    7022:	70fb      	strb	r3, [r7, #3]
    7024:	4613      	mov	r3, r2
    7026:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    7028:	78fb      	ldrb	r3, [r7, #3]
    702a:	687a      	ldr	r2, [r7, #4]
    702c:	4413      	add	r3, r2
    702e:	78ba      	ldrb	r2, [r7, #2]
    7030:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7032:	21c0      	movs	r1, #192	; 0xc0
    7034:	6878      	ldr	r0, [r7, #4]
    7036:	4b03      	ldr	r3, [pc, #12]	; (7044 <hri_tccount8_write_CC_reg+0x2c>)
    7038:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    703a:	bf00      	nop
    703c:	3708      	adds	r7, #8
    703e:	46bd      	mov	sp, r7
    7040:	bd80      	pop	{r7, pc}
    7042:	bf00      	nop
    7044:	00006e2d 	.word	0x00006e2d

00007048 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7048:	b580      	push	{r7, lr}
    704a:	b082      	sub	sp, #8
    704c:	af00      	add	r7, sp, #0
    704e:	6078      	str	r0, [r7, #4]
    7050:	460b      	mov	r3, r1
    7052:	70fb      	strb	r3, [r7, #3]
    7054:	4613      	mov	r3, r2
    7056:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7058:	78fb      	ldrb	r3, [r7, #3]
    705a:	687a      	ldr	r2, [r7, #4]
    705c:	330c      	adds	r3, #12
    705e:	005b      	lsls	r3, r3, #1
    7060:	4413      	add	r3, r2
    7062:	883a      	ldrh	r2, [r7, #0]
    7064:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7066:	21c0      	movs	r1, #192	; 0xc0
    7068:	6878      	ldr	r0, [r7, #4]
    706a:	4b03      	ldr	r3, [pc, #12]	; (7078 <hri_tccount16_write_CC_reg+0x30>)
    706c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    706e:	bf00      	nop
    7070:	3708      	adds	r7, #8
    7072:	46bd      	mov	sp, r7
    7074:	bd80      	pop	{r7, pc}
    7076:	bf00      	nop
    7078:	00006e2d 	.word	0x00006e2d

0000707c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    707c:	b580      	push	{r7, lr}
    707e:	b084      	sub	sp, #16
    7080:	af00      	add	r7, sp, #0
    7082:	60f8      	str	r0, [r7, #12]
    7084:	460b      	mov	r3, r1
    7086:	607a      	str	r2, [r7, #4]
    7088:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    708a:	7afb      	ldrb	r3, [r7, #11]
    708c:	68fa      	ldr	r2, [r7, #12]
    708e:	3306      	adds	r3, #6
    7090:	009b      	lsls	r3, r3, #2
    7092:	4413      	add	r3, r2
    7094:	687a      	ldr	r2, [r7, #4]
    7096:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7098:	21c0      	movs	r1, #192	; 0xc0
    709a:	68f8      	ldr	r0, [r7, #12]
    709c:	4b02      	ldr	r3, [pc, #8]	; (70a8 <hri_tccount32_write_CC_reg+0x2c>)
    709e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    70a0:	bf00      	nop
    70a2:	3710      	adds	r7, #16
    70a4:	46bd      	mov	sp, r7
    70a6:	bd80      	pop	{r7, pc}
    70a8:	00006e2d 	.word	0x00006e2d

000070ac <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    70ac:	b580      	push	{r7, lr}
    70ae:	b084      	sub	sp, #16
    70b0:	af00      	add	r7, sp, #0
    70b2:	6078      	str	r0, [r7, #4]
    70b4:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    70b6:	6838      	ldr	r0, [r7, #0]
    70b8:	4b93      	ldr	r3, [pc, #588]	; (7308 <_timer_init+0x25c>)
    70ba:	4798      	blx	r3
    70bc:	4603      	mov	r3, r0
    70be:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    70c0:	687b      	ldr	r3, [r7, #4]
    70c2:	683a      	ldr	r2, [r7, #0]
    70c4:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    70c6:	2295      	movs	r2, #149	; 0x95
    70c8:	4990      	ldr	r1, [pc, #576]	; (730c <_timer_init+0x260>)
    70ca:	2001      	movs	r0, #1
    70cc:	4b90      	ldr	r3, [pc, #576]	; (7310 <_timer_init+0x264>)
    70ce:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    70d0:	2101      	movs	r1, #1
    70d2:	6838      	ldr	r0, [r7, #0]
    70d4:	4b8f      	ldr	r3, [pc, #572]	; (7314 <_timer_init+0x268>)
    70d6:	4798      	blx	r3
    70d8:	4603      	mov	r3, r0
    70da:	f083 0301 	eor.w	r3, r3, #1
    70de:	b2db      	uxtb	r3, r3
    70e0:	2b00      	cmp	r3, #0
    70e2:	d011      	beq.n	7108 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    70e4:	2102      	movs	r1, #2
    70e6:	6838      	ldr	r0, [r7, #0]
    70e8:	4b8b      	ldr	r3, [pc, #556]	; (7318 <_timer_init+0x26c>)
    70ea:	4798      	blx	r3
    70ec:	4603      	mov	r3, r0
    70ee:	2b00      	cmp	r3, #0
    70f0:	d006      	beq.n	7100 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    70f2:	6838      	ldr	r0, [r7, #0]
    70f4:	4b89      	ldr	r3, [pc, #548]	; (731c <_timer_init+0x270>)
    70f6:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    70f8:	2102      	movs	r1, #2
    70fa:	6838      	ldr	r0, [r7, #0]
    70fc:	4b88      	ldr	r3, [pc, #544]	; (7320 <_timer_init+0x274>)
    70fe:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7100:	2101      	movs	r1, #1
    7102:	6838      	ldr	r0, [r7, #0]
    7104:	4b87      	ldr	r3, [pc, #540]	; (7324 <_timer_init+0x278>)
    7106:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7108:	2101      	movs	r1, #1
    710a:	6838      	ldr	r0, [r7, #0]
    710c:	4b84      	ldr	r3, [pc, #528]	; (7320 <_timer_init+0x274>)
    710e:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7110:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7114:	4984      	ldr	r1, [pc, #528]	; (7328 <_timer_init+0x27c>)
    7116:	4613      	mov	r3, r2
    7118:	009b      	lsls	r3, r3, #2
    711a:	4413      	add	r3, r2
    711c:	009b      	lsls	r3, r3, #2
    711e:	440b      	add	r3, r1
    7120:	3304      	adds	r3, #4
    7122:	681b      	ldr	r3, [r3, #0]
    7124:	4619      	mov	r1, r3
    7126:	6838      	ldr	r0, [r7, #0]
    7128:	4b7e      	ldr	r3, [pc, #504]	; (7324 <_timer_init+0x278>)
    712a:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    712c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7130:	497d      	ldr	r1, [pc, #500]	; (7328 <_timer_init+0x27c>)
    7132:	4613      	mov	r3, r2
    7134:	009b      	lsls	r3, r3, #2
    7136:	4413      	add	r3, r2
    7138:	009b      	lsls	r3, r3, #2
    713a:	440b      	add	r3, r1
    713c:	330a      	adds	r3, #10
    713e:	781b      	ldrb	r3, [r3, #0]
    7140:	4619      	mov	r1, r3
    7142:	6838      	ldr	r0, [r7, #0]
    7144:	4b79      	ldr	r3, [pc, #484]	; (732c <_timer_init+0x280>)
    7146:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7148:	f997 200f 	ldrsb.w	r2, [r7, #15]
    714c:	4976      	ldr	r1, [pc, #472]	; (7328 <_timer_init+0x27c>)
    714e:	4613      	mov	r3, r2
    7150:	009b      	lsls	r3, r3, #2
    7152:	4413      	add	r3, r2
    7154:	009b      	lsls	r3, r3, #2
    7156:	440b      	add	r3, r1
    7158:	3308      	adds	r3, #8
    715a:	881b      	ldrh	r3, [r3, #0]
    715c:	4619      	mov	r1, r3
    715e:	6838      	ldr	r0, [r7, #0]
    7160:	4b73      	ldr	r3, [pc, #460]	; (7330 <_timer_init+0x284>)
    7162:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7164:	2101      	movs	r1, #1
    7166:	6838      	ldr	r0, [r7, #0]
    7168:	4b72      	ldr	r3, [pc, #456]	; (7334 <_timer_init+0x288>)
    716a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    716c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7170:	496d      	ldr	r1, [pc, #436]	; (7328 <_timer_init+0x27c>)
    7172:	4613      	mov	r3, r2
    7174:	009b      	lsls	r3, r3, #2
    7176:	4413      	add	r3, r2
    7178:	009b      	lsls	r3, r3, #2
    717a:	440b      	add	r3, r1
    717c:	3304      	adds	r3, #4
    717e:	681b      	ldr	r3, [r3, #0]
    7180:	f003 030c 	and.w	r3, r3, #12
    7184:	2b08      	cmp	r3, #8
    7186:	d11e      	bne.n	71c6 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7188:	f997 200f 	ldrsb.w	r2, [r7, #15]
    718c:	4966      	ldr	r1, [pc, #408]	; (7328 <_timer_init+0x27c>)
    718e:	4613      	mov	r3, r2
    7190:	009b      	lsls	r3, r3, #2
    7192:	4413      	add	r3, r2
    7194:	009b      	lsls	r3, r3, #2
    7196:	440b      	add	r3, r1
    7198:	330c      	adds	r3, #12
    719a:	681b      	ldr	r3, [r3, #0]
    719c:	461a      	mov	r2, r3
    719e:	2100      	movs	r1, #0
    71a0:	6838      	ldr	r0, [r7, #0]
    71a2:	4b65      	ldr	r3, [pc, #404]	; (7338 <_timer_init+0x28c>)
    71a4:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    71a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71aa:	495f      	ldr	r1, [pc, #380]	; (7328 <_timer_init+0x27c>)
    71ac:	4613      	mov	r3, r2
    71ae:	009b      	lsls	r3, r3, #2
    71b0:	4413      	add	r3, r2
    71b2:	009b      	lsls	r3, r3, #2
    71b4:	440b      	add	r3, r1
    71b6:	3310      	adds	r3, #16
    71b8:	681b      	ldr	r3, [r3, #0]
    71ba:	461a      	mov	r2, r3
    71bc:	2101      	movs	r1, #1
    71be:	6838      	ldr	r0, [r7, #0]
    71c0:	4b5d      	ldr	r3, [pc, #372]	; (7338 <_timer_init+0x28c>)
    71c2:	4798      	blx	r3
    71c4:	e06a      	b.n	729c <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    71c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71ca:	4957      	ldr	r1, [pc, #348]	; (7328 <_timer_init+0x27c>)
    71cc:	4613      	mov	r3, r2
    71ce:	009b      	lsls	r3, r3, #2
    71d0:	4413      	add	r3, r2
    71d2:	009b      	lsls	r3, r3, #2
    71d4:	440b      	add	r3, r1
    71d6:	3304      	adds	r3, #4
    71d8:	681b      	ldr	r3, [r3, #0]
    71da:	f003 030c 	and.w	r3, r3, #12
    71de:	2b00      	cmp	r3, #0
    71e0:	d120      	bne.n	7224 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    71e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    71e6:	4950      	ldr	r1, [pc, #320]	; (7328 <_timer_init+0x27c>)
    71e8:	4613      	mov	r3, r2
    71ea:	009b      	lsls	r3, r3, #2
    71ec:	4413      	add	r3, r2
    71ee:	009b      	lsls	r3, r3, #2
    71f0:	440b      	add	r3, r1
    71f2:	330c      	adds	r3, #12
    71f4:	681b      	ldr	r3, [r3, #0]
    71f6:	b29b      	uxth	r3, r3
    71f8:	461a      	mov	r2, r3
    71fa:	2100      	movs	r1, #0
    71fc:	6838      	ldr	r0, [r7, #0]
    71fe:	4b4f      	ldr	r3, [pc, #316]	; (733c <_timer_init+0x290>)
    7200:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7202:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7206:	4948      	ldr	r1, [pc, #288]	; (7328 <_timer_init+0x27c>)
    7208:	4613      	mov	r3, r2
    720a:	009b      	lsls	r3, r3, #2
    720c:	4413      	add	r3, r2
    720e:	009b      	lsls	r3, r3, #2
    7210:	440b      	add	r3, r1
    7212:	3310      	adds	r3, #16
    7214:	681b      	ldr	r3, [r3, #0]
    7216:	b29b      	uxth	r3, r3
    7218:	461a      	mov	r2, r3
    721a:	2101      	movs	r1, #1
    721c:	6838      	ldr	r0, [r7, #0]
    721e:	4b47      	ldr	r3, [pc, #284]	; (733c <_timer_init+0x290>)
    7220:	4798      	blx	r3
    7222:	e03b      	b.n	729c <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7224:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7228:	493f      	ldr	r1, [pc, #252]	; (7328 <_timer_init+0x27c>)
    722a:	4613      	mov	r3, r2
    722c:	009b      	lsls	r3, r3, #2
    722e:	4413      	add	r3, r2
    7230:	009b      	lsls	r3, r3, #2
    7232:	440b      	add	r3, r1
    7234:	3304      	adds	r3, #4
    7236:	681b      	ldr	r3, [r3, #0]
    7238:	f003 030c 	and.w	r3, r3, #12
    723c:	2b04      	cmp	r3, #4
    723e:	d12d      	bne.n	729c <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7240:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7244:	4938      	ldr	r1, [pc, #224]	; (7328 <_timer_init+0x27c>)
    7246:	4613      	mov	r3, r2
    7248:	009b      	lsls	r3, r3, #2
    724a:	4413      	add	r3, r2
    724c:	009b      	lsls	r3, r3, #2
    724e:	440b      	add	r3, r1
    7250:	330c      	adds	r3, #12
    7252:	681b      	ldr	r3, [r3, #0]
    7254:	b2db      	uxtb	r3, r3
    7256:	461a      	mov	r2, r3
    7258:	2100      	movs	r1, #0
    725a:	6838      	ldr	r0, [r7, #0]
    725c:	4b38      	ldr	r3, [pc, #224]	; (7340 <_timer_init+0x294>)
    725e:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7260:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7264:	4930      	ldr	r1, [pc, #192]	; (7328 <_timer_init+0x27c>)
    7266:	4613      	mov	r3, r2
    7268:	009b      	lsls	r3, r3, #2
    726a:	4413      	add	r3, r2
    726c:	009b      	lsls	r3, r3, #2
    726e:	440b      	add	r3, r1
    7270:	3310      	adds	r3, #16
    7272:	681b      	ldr	r3, [r3, #0]
    7274:	b2db      	uxtb	r3, r3
    7276:	461a      	mov	r2, r3
    7278:	2101      	movs	r1, #1
    727a:	6838      	ldr	r0, [r7, #0]
    727c:	4b30      	ldr	r3, [pc, #192]	; (7340 <_timer_init+0x294>)
    727e:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7280:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7284:	4928      	ldr	r1, [pc, #160]	; (7328 <_timer_init+0x27c>)
    7286:	4613      	mov	r3, r2
    7288:	009b      	lsls	r3, r3, #2
    728a:	4413      	add	r3, r2
    728c:	009b      	lsls	r3, r3, #2
    728e:	440b      	add	r3, r1
    7290:	330b      	adds	r3, #11
    7292:	781b      	ldrb	r3, [r3, #0]
    7294:	4619      	mov	r1, r3
    7296:	6838      	ldr	r0, [r7, #0]
    7298:	4b2a      	ldr	r3, [pc, #168]	; (7344 <_timer_init+0x298>)
    729a:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    729c:	6838      	ldr	r0, [r7, #0]
    729e:	4b2a      	ldr	r3, [pc, #168]	; (7348 <_timer_init+0x29c>)
    72a0:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    72a2:	6879      	ldr	r1, [r7, #4]
    72a4:	6838      	ldr	r0, [r7, #0]
    72a6:	4b29      	ldr	r3, [pc, #164]	; (734c <_timer_init+0x2a0>)
    72a8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    72aa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    72ae:	491e      	ldr	r1, [pc, #120]	; (7328 <_timer_init+0x27c>)
    72b0:	4613      	mov	r3, r2
    72b2:	009b      	lsls	r3, r3, #2
    72b4:	4413      	add	r3, r2
    72b6:	009b      	lsls	r3, r3, #2
    72b8:	440b      	add	r3, r1
    72ba:	3302      	adds	r3, #2
    72bc:	f9b3 3000 	ldrsh.w	r3, [r3]
    72c0:	4618      	mov	r0, r3
    72c2:	4b23      	ldr	r3, [pc, #140]	; (7350 <_timer_init+0x2a4>)
    72c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    72c6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    72ca:	4917      	ldr	r1, [pc, #92]	; (7328 <_timer_init+0x27c>)
    72cc:	4613      	mov	r3, r2
    72ce:	009b      	lsls	r3, r3, #2
    72d0:	4413      	add	r3, r2
    72d2:	009b      	lsls	r3, r3, #2
    72d4:	440b      	add	r3, r1
    72d6:	3302      	adds	r3, #2
    72d8:	f9b3 3000 	ldrsh.w	r3, [r3]
    72dc:	4618      	mov	r0, r3
    72de:	4b1d      	ldr	r3, [pc, #116]	; (7354 <_timer_init+0x2a8>)
    72e0:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    72e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    72e6:	4910      	ldr	r1, [pc, #64]	; (7328 <_timer_init+0x27c>)
    72e8:	4613      	mov	r3, r2
    72ea:	009b      	lsls	r3, r3, #2
    72ec:	4413      	add	r3, r2
    72ee:	009b      	lsls	r3, r3, #2
    72f0:	440b      	add	r3, r1
    72f2:	3302      	adds	r3, #2
    72f4:	f9b3 3000 	ldrsh.w	r3, [r3]
    72f8:	4618      	mov	r0, r3
    72fa:	4b17      	ldr	r3, [pc, #92]	; (7358 <_timer_init+0x2ac>)
    72fc:	4798      	blx	r3

	return ERR_NONE;
    72fe:	2300      	movs	r3, #0
}
    7300:	4618      	mov	r0, r3
    7302:	3710      	adds	r7, #16
    7304:	46bd      	mov	sp, r7
    7306:	bd80      	pop	{r7, pc}
    7308:	000076c9 	.word	0x000076c9
    730c:	0000ce94 	.word	0x0000ce94
    7310:	00003249 	.word	0x00003249
    7314:	00006e51 	.word	0x00006e51
    7318:	00006f41 	.word	0x00006f41
    731c:	00006f19 	.word	0x00006f19
    7320:	00006e2d 	.word	0x00006e2d
    7324:	00006f71 	.word	0x00006f71
    7328:	20000048 	.word	0x20000048
    732c:	00006fd1 	.word	0x00006fd1
    7330:	00006f95 	.word	0x00006f95
    7334:	00006fb3 	.word	0x00006fb3
    7338:	0000707d 	.word	0x0000707d
    733c:	00007049 	.word	0x00007049
    7340:	00007019 	.word	0x00007019
    7344:	00006ff1 	.word	0x00006ff1
    7348:	00006ed5 	.word	0x00006ed5
    734c:	00007731 	.word	0x00007731
    7350:	00006dad 	.word	0x00006dad
    7354:	00006df1 	.word	0x00006df1
    7358:	00006d71 	.word	0x00006d71

0000735c <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    735c:	b580      	push	{r7, lr}
    735e:	b084      	sub	sp, #16
    7360:	af00      	add	r7, sp, #0
    7362:	6078      	str	r0, [r7, #4]
    7364:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7366:	6838      	ldr	r0, [r7, #0]
    7368:	4b73      	ldr	r3, [pc, #460]	; (7538 <_pwm_init+0x1dc>)
    736a:	4798      	blx	r3
    736c:	4603      	mov	r3, r0
    736e:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7370:	687b      	ldr	r3, [r7, #4]
    7372:	683a      	ldr	r2, [r7, #0]
    7374:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7376:	2101      	movs	r1, #1
    7378:	6838      	ldr	r0, [r7, #0]
    737a:	4b70      	ldr	r3, [pc, #448]	; (753c <_pwm_init+0x1e0>)
    737c:	4798      	blx	r3
    737e:	4603      	mov	r3, r0
    7380:	f083 0301 	eor.w	r3, r3, #1
    7384:	b2db      	uxtb	r3, r3
    7386:	2b00      	cmp	r3, #0
    7388:	d011      	beq.n	73ae <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    738a:	2102      	movs	r1, #2
    738c:	6838      	ldr	r0, [r7, #0]
    738e:	4b6c      	ldr	r3, [pc, #432]	; (7540 <_pwm_init+0x1e4>)
    7390:	4798      	blx	r3
    7392:	4603      	mov	r3, r0
    7394:	2b00      	cmp	r3, #0
    7396:	d006      	beq.n	73a6 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7398:	6838      	ldr	r0, [r7, #0]
    739a:	4b6a      	ldr	r3, [pc, #424]	; (7544 <_pwm_init+0x1e8>)
    739c:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    739e:	2102      	movs	r1, #2
    73a0:	6838      	ldr	r0, [r7, #0]
    73a2:	4b69      	ldr	r3, [pc, #420]	; (7548 <_pwm_init+0x1ec>)
    73a4:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    73a6:	2101      	movs	r1, #1
    73a8:	6838      	ldr	r0, [r7, #0]
    73aa:	4b68      	ldr	r3, [pc, #416]	; (754c <_pwm_init+0x1f0>)
    73ac:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    73ae:	2101      	movs	r1, #1
    73b0:	6838      	ldr	r0, [r7, #0]
    73b2:	4b65      	ldr	r3, [pc, #404]	; (7548 <_pwm_init+0x1ec>)
    73b4:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    73b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73ba:	4965      	ldr	r1, [pc, #404]	; (7550 <_pwm_init+0x1f4>)
    73bc:	4613      	mov	r3, r2
    73be:	009b      	lsls	r3, r3, #2
    73c0:	4413      	add	r3, r2
    73c2:	009b      	lsls	r3, r3, #2
    73c4:	440b      	add	r3, r1
    73c6:	3304      	adds	r3, #4
    73c8:	681b      	ldr	r3, [r3, #0]
    73ca:	4619      	mov	r1, r3
    73cc:	6838      	ldr	r0, [r7, #0]
    73ce:	4b5f      	ldr	r3, [pc, #380]	; (754c <_pwm_init+0x1f0>)
    73d0:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    73d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73d6:	495e      	ldr	r1, [pc, #376]	; (7550 <_pwm_init+0x1f4>)
    73d8:	4613      	mov	r3, r2
    73da:	009b      	lsls	r3, r3, #2
    73dc:	4413      	add	r3, r2
    73de:	009b      	lsls	r3, r3, #2
    73e0:	440b      	add	r3, r1
    73e2:	330a      	adds	r3, #10
    73e4:	781b      	ldrb	r3, [r3, #0]
    73e6:	4619      	mov	r1, r3
    73e8:	6838      	ldr	r0, [r7, #0]
    73ea:	4b5a      	ldr	r3, [pc, #360]	; (7554 <_pwm_init+0x1f8>)
    73ec:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    73ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    73f2:	4957      	ldr	r1, [pc, #348]	; (7550 <_pwm_init+0x1f4>)
    73f4:	4613      	mov	r3, r2
    73f6:	009b      	lsls	r3, r3, #2
    73f8:	4413      	add	r3, r2
    73fa:	009b      	lsls	r3, r3, #2
    73fc:	440b      	add	r3, r1
    73fe:	3308      	adds	r3, #8
    7400:	881b      	ldrh	r3, [r3, #0]
    7402:	4619      	mov	r1, r3
    7404:	6838      	ldr	r0, [r7, #0]
    7406:	4b54      	ldr	r3, [pc, #336]	; (7558 <_pwm_init+0x1fc>)
    7408:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    740a:	2103      	movs	r1, #3
    740c:	6838      	ldr	r0, [r7, #0]
    740e:	4b53      	ldr	r3, [pc, #332]	; (755c <_pwm_init+0x200>)
    7410:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7412:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7416:	494e      	ldr	r1, [pc, #312]	; (7550 <_pwm_init+0x1f4>)
    7418:	4613      	mov	r3, r2
    741a:	009b      	lsls	r3, r3, #2
    741c:	4413      	add	r3, r2
    741e:	009b      	lsls	r3, r3, #2
    7420:	440b      	add	r3, r1
    7422:	3304      	adds	r3, #4
    7424:	681b      	ldr	r3, [r3, #0]
    7426:	f003 030c 	and.w	r3, r3, #12
    742a:	2b08      	cmp	r3, #8
    742c:	d11e      	bne.n	746c <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    742e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7432:	4947      	ldr	r1, [pc, #284]	; (7550 <_pwm_init+0x1f4>)
    7434:	4613      	mov	r3, r2
    7436:	009b      	lsls	r3, r3, #2
    7438:	4413      	add	r3, r2
    743a:	009b      	lsls	r3, r3, #2
    743c:	440b      	add	r3, r1
    743e:	330c      	adds	r3, #12
    7440:	681b      	ldr	r3, [r3, #0]
    7442:	461a      	mov	r2, r3
    7444:	2100      	movs	r1, #0
    7446:	6838      	ldr	r0, [r7, #0]
    7448:	4b45      	ldr	r3, [pc, #276]	; (7560 <_pwm_init+0x204>)
    744a:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    744c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7450:	493f      	ldr	r1, [pc, #252]	; (7550 <_pwm_init+0x1f4>)
    7452:	4613      	mov	r3, r2
    7454:	009b      	lsls	r3, r3, #2
    7456:	4413      	add	r3, r2
    7458:	009b      	lsls	r3, r3, #2
    745a:	440b      	add	r3, r1
    745c:	3310      	adds	r3, #16
    745e:	681b      	ldr	r3, [r3, #0]
    7460:	461a      	mov	r2, r3
    7462:	2101      	movs	r1, #1
    7464:	6838      	ldr	r0, [r7, #0]
    7466:	4b3e      	ldr	r3, [pc, #248]	; (7560 <_pwm_init+0x204>)
    7468:	4798      	blx	r3
    746a:	e031      	b.n	74d0 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    746c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7470:	4937      	ldr	r1, [pc, #220]	; (7550 <_pwm_init+0x1f4>)
    7472:	4613      	mov	r3, r2
    7474:	009b      	lsls	r3, r3, #2
    7476:	4413      	add	r3, r2
    7478:	009b      	lsls	r3, r3, #2
    747a:	440b      	add	r3, r1
    747c:	3304      	adds	r3, #4
    747e:	681b      	ldr	r3, [r3, #0]
    7480:	f003 030c 	and.w	r3, r3, #12
    7484:	2b00      	cmp	r3, #0
    7486:	d120      	bne.n	74ca <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7488:	f997 200f 	ldrsb.w	r2, [r7, #15]
    748c:	4930      	ldr	r1, [pc, #192]	; (7550 <_pwm_init+0x1f4>)
    748e:	4613      	mov	r3, r2
    7490:	009b      	lsls	r3, r3, #2
    7492:	4413      	add	r3, r2
    7494:	009b      	lsls	r3, r3, #2
    7496:	440b      	add	r3, r1
    7498:	330c      	adds	r3, #12
    749a:	681b      	ldr	r3, [r3, #0]
    749c:	b29b      	uxth	r3, r3
    749e:	461a      	mov	r2, r3
    74a0:	2100      	movs	r1, #0
    74a2:	6838      	ldr	r0, [r7, #0]
    74a4:	4b2f      	ldr	r3, [pc, #188]	; (7564 <_pwm_init+0x208>)
    74a6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    74a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74ac:	4928      	ldr	r1, [pc, #160]	; (7550 <_pwm_init+0x1f4>)
    74ae:	4613      	mov	r3, r2
    74b0:	009b      	lsls	r3, r3, #2
    74b2:	4413      	add	r3, r2
    74b4:	009b      	lsls	r3, r3, #2
    74b6:	440b      	add	r3, r1
    74b8:	3310      	adds	r3, #16
    74ba:	681b      	ldr	r3, [r3, #0]
    74bc:	b29b      	uxth	r3, r3
    74be:	461a      	mov	r2, r3
    74c0:	2101      	movs	r1, #1
    74c2:	6838      	ldr	r0, [r7, #0]
    74c4:	4b27      	ldr	r3, [pc, #156]	; (7564 <_pwm_init+0x208>)
    74c6:	4798      	blx	r3
    74c8:	e002      	b.n	74d0 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    74ca:	f04f 33ff 	mov.w	r3, #4294967295
    74ce:	e02e      	b.n	752e <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    74d0:	6879      	ldr	r1, [r7, #4]
    74d2:	6838      	ldr	r0, [r7, #0]
    74d4:	4b24      	ldr	r3, [pc, #144]	; (7568 <_pwm_init+0x20c>)
    74d6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    74d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74dc:	491c      	ldr	r1, [pc, #112]	; (7550 <_pwm_init+0x1f4>)
    74de:	4613      	mov	r3, r2
    74e0:	009b      	lsls	r3, r3, #2
    74e2:	4413      	add	r3, r2
    74e4:	009b      	lsls	r3, r3, #2
    74e6:	440b      	add	r3, r1
    74e8:	3302      	adds	r3, #2
    74ea:	f9b3 3000 	ldrsh.w	r3, [r3]
    74ee:	4618      	mov	r0, r3
    74f0:	4b1e      	ldr	r3, [pc, #120]	; (756c <_pwm_init+0x210>)
    74f2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    74f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74f8:	4915      	ldr	r1, [pc, #84]	; (7550 <_pwm_init+0x1f4>)
    74fa:	4613      	mov	r3, r2
    74fc:	009b      	lsls	r3, r3, #2
    74fe:	4413      	add	r3, r2
    7500:	009b      	lsls	r3, r3, #2
    7502:	440b      	add	r3, r1
    7504:	3302      	adds	r3, #2
    7506:	f9b3 3000 	ldrsh.w	r3, [r3]
    750a:	4618      	mov	r0, r3
    750c:	4b18      	ldr	r3, [pc, #96]	; (7570 <_pwm_init+0x214>)
    750e:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7510:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7514:	490e      	ldr	r1, [pc, #56]	; (7550 <_pwm_init+0x1f4>)
    7516:	4613      	mov	r3, r2
    7518:	009b      	lsls	r3, r3, #2
    751a:	4413      	add	r3, r2
    751c:	009b      	lsls	r3, r3, #2
    751e:	440b      	add	r3, r1
    7520:	3302      	adds	r3, #2
    7522:	f9b3 3000 	ldrsh.w	r3, [r3]
    7526:	4618      	mov	r0, r3
    7528:	4b12      	ldr	r3, [pc, #72]	; (7574 <_pwm_init+0x218>)
    752a:	4798      	blx	r3

	return 0;
    752c:	2300      	movs	r3, #0
}
    752e:	4618      	mov	r0, r3
    7530:	3710      	adds	r7, #16
    7532:	46bd      	mov	sp, r7
    7534:	bd80      	pop	{r7, pc}
    7536:	bf00      	nop
    7538:	000076c9 	.word	0x000076c9
    753c:	00006e51 	.word	0x00006e51
    7540:	00006f41 	.word	0x00006f41
    7544:	00006f19 	.word	0x00006f19
    7548:	00006e2d 	.word	0x00006e2d
    754c:	00006f71 	.word	0x00006f71
    7550:	20000048 	.word	0x20000048
    7554:	00006fd1 	.word	0x00006fd1
    7558:	00006f95 	.word	0x00006f95
    755c:	00006fb3 	.word	0x00006fb3
    7560:	0000707d 	.word	0x0000707d
    7564:	00007049 	.word	0x00007049
    7568:	00007731 	.word	0x00007731
    756c:	00006dad 	.word	0x00006dad
    7570:	00006df1 	.word	0x00006df1
    7574:	00006d71 	.word	0x00006d71

00007578 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7578:	b480      	push	{r7}
    757a:	af00      	add	r7, sp, #0
	return NULL;
    757c:	2300      	movs	r3, #0
}
    757e:	4618      	mov	r0, r3
    7580:	46bd      	mov	sp, r7
    7582:	f85d 7b04 	ldr.w	r7, [sp], #4
    7586:	4770      	bx	lr

00007588 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    7588:	b480      	push	{r7}
    758a:	af00      	add	r7, sp, #0
	return NULL;
    758c:	2300      	movs	r3, #0
}
    758e:	4618      	mov	r0, r3
    7590:	46bd      	mov	sp, r7
    7592:	f85d 7b04 	ldr.w	r7, [sp], #4
    7596:	4770      	bx	lr

00007598 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7598:	b580      	push	{r7, lr}
    759a:	b084      	sub	sp, #16
    759c:	af00      	add	r7, sp, #0
    759e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    75a0:	687b      	ldr	r3, [r7, #4]
    75a2:	68db      	ldr	r3, [r3, #12]
    75a4:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    75a6:	68f8      	ldr	r0, [r7, #12]
    75a8:	4b07      	ldr	r3, [pc, #28]	; (75c8 <tc_interrupt_handler+0x30>)
    75aa:	4798      	blx	r3
    75ac:	4603      	mov	r3, r0
    75ae:	2b00      	cmp	r3, #0
    75b0:	d006      	beq.n	75c0 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    75b2:	68f8      	ldr	r0, [r7, #12]
    75b4:	4b05      	ldr	r3, [pc, #20]	; (75cc <tc_interrupt_handler+0x34>)
    75b6:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    75b8:	687b      	ldr	r3, [r7, #4]
    75ba:	681b      	ldr	r3, [r3, #0]
    75bc:	6878      	ldr	r0, [r7, #4]
    75be:	4798      	blx	r3
	}
}
    75c0:	bf00      	nop
    75c2:	3710      	adds	r7, #16
    75c4:	46bd      	mov	sp, r7
    75c6:	bd80      	pop	{r7, pc}
    75c8:	00006e79 	.word	0x00006e79
    75cc:	00006ea1 	.word	0x00006ea1

000075d0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    75d0:	b580      	push	{r7, lr}
    75d2:	b084      	sub	sp, #16
    75d4:	af00      	add	r7, sp, #0
    75d6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    75d8:	687b      	ldr	r3, [r7, #4]
    75da:	691b      	ldr	r3, [r3, #16]
    75dc:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    75de:	68f8      	ldr	r0, [r7, #12]
    75e0:	4b12      	ldr	r3, [pc, #72]	; (762c <tc_pwm_interrupt_handler+0x5c>)
    75e2:	4798      	blx	r3
    75e4:	4603      	mov	r3, r0
    75e6:	2b00      	cmp	r3, #0
    75e8:	d00a      	beq.n	7600 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    75ea:	68f8      	ldr	r0, [r7, #12]
    75ec:	4b10      	ldr	r3, [pc, #64]	; (7630 <tc_pwm_interrupt_handler+0x60>)
    75ee:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    75f0:	687b      	ldr	r3, [r7, #4]
    75f2:	681b      	ldr	r3, [r3, #0]
    75f4:	2b00      	cmp	r3, #0
    75f6:	d003      	beq.n	7600 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    75f8:	687b      	ldr	r3, [r7, #4]
    75fa:	681b      	ldr	r3, [r3, #0]
    75fc:	6878      	ldr	r0, [r7, #4]
    75fe:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    7600:	68f8      	ldr	r0, [r7, #12]
    7602:	4b0c      	ldr	r3, [pc, #48]	; (7634 <tc_pwm_interrupt_handler+0x64>)
    7604:	4798      	blx	r3
    7606:	4603      	mov	r3, r0
    7608:	2b00      	cmp	r3, #0
    760a:	d00a      	beq.n	7622 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    760c:	68f8      	ldr	r0, [r7, #12]
    760e:	4b0a      	ldr	r3, [pc, #40]	; (7638 <tc_pwm_interrupt_handler+0x68>)
    7610:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    7612:	687b      	ldr	r3, [r7, #4]
    7614:	685b      	ldr	r3, [r3, #4]
    7616:	2b00      	cmp	r3, #0
    7618:	d003      	beq.n	7622 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    761a:	687b      	ldr	r3, [r7, #4]
    761c:	685b      	ldr	r3, [r3, #4]
    761e:	6878      	ldr	r0, [r7, #4]
    7620:	4798      	blx	r3
		}
	}
}
    7622:	bf00      	nop
    7624:	3710      	adds	r7, #16
    7626:	46bd      	mov	sp, r7
    7628:	bd80      	pop	{r7, pc}
    762a:	bf00      	nop
    762c:	00006e79 	.word	0x00006e79
    7630:	00006ea1 	.word	0x00006ea1
    7634:	00006eef 	.word	0x00006eef
    7638:	00006ebb 	.word	0x00006ebb

0000763c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    763c:	b580      	push	{r7, lr}
    763e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    7640:	4b03      	ldr	r3, [pc, #12]	; (7650 <TC0_Handler+0x14>)
    7642:	681b      	ldr	r3, [r3, #0]
    7644:	4618      	mov	r0, r3
    7646:	4b03      	ldr	r3, [pc, #12]	; (7654 <TC0_Handler+0x18>)
    7648:	4798      	blx	r3
}
    764a:	bf00      	nop
    764c:	bd80      	pop	{r7, pc}
    764e:	bf00      	nop
    7650:	2000068c 	.word	0x2000068c
    7654:	00007599 	.word	0x00007599

00007658 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    7658:	b580      	push	{r7, lr}
    765a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    765c:	4b03      	ldr	r3, [pc, #12]	; (766c <TC1_Handler+0x14>)
    765e:	681b      	ldr	r3, [r3, #0]
    7660:	4618      	mov	r0, r3
    7662:	4b03      	ldr	r3, [pc, #12]	; (7670 <TC1_Handler+0x18>)
    7664:	4798      	blx	r3
}
    7666:	bf00      	nop
    7668:	bd80      	pop	{r7, pc}
    766a:	bf00      	nop
    766c:	20000690 	.word	0x20000690
    7670:	00007599 	.word	0x00007599

00007674 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    7674:	b580      	push	{r7, lr}
    7676:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    7678:	4b03      	ldr	r3, [pc, #12]	; (7688 <TC2_Handler+0x14>)
    767a:	681b      	ldr	r3, [r3, #0]
    767c:	4618      	mov	r0, r3
    767e:	4b03      	ldr	r3, [pc, #12]	; (768c <TC2_Handler+0x18>)
    7680:	4798      	blx	r3
}
    7682:	bf00      	nop
    7684:	bd80      	pop	{r7, pc}
    7686:	bf00      	nop
    7688:	20000694 	.word	0x20000694
    768c:	00007599 	.word	0x00007599

00007690 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    7690:	b580      	push	{r7, lr}
    7692:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    7694:	4b03      	ldr	r3, [pc, #12]	; (76a4 <TC3_Handler+0x14>)
    7696:	681b      	ldr	r3, [r3, #0]
    7698:	4618      	mov	r0, r3
    769a:	4b03      	ldr	r3, [pc, #12]	; (76a8 <TC3_Handler+0x18>)
    769c:	4798      	blx	r3
}
    769e:	bf00      	nop
    76a0:	bd80      	pop	{r7, pc}
    76a2:	bf00      	nop
    76a4:	20000698 	.word	0x20000698
    76a8:	00007599 	.word	0x00007599

000076ac <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    76ac:	b580      	push	{r7, lr}
    76ae:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    76b0:	4b03      	ldr	r3, [pc, #12]	; (76c0 <TC7_Handler+0x14>)
    76b2:	681b      	ldr	r3, [r3, #0]
    76b4:	4618      	mov	r0, r3
    76b6:	4b03      	ldr	r3, [pc, #12]	; (76c4 <TC7_Handler+0x18>)
    76b8:	4798      	blx	r3
}
    76ba:	bf00      	nop
    76bc:	bd80      	pop	{r7, pc}
    76be:	bf00      	nop
    76c0:	2000069c 	.word	0x2000069c
    76c4:	000075d1 	.word	0x000075d1

000076c8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    76c8:	b580      	push	{r7, lr}
    76ca:	b084      	sub	sp, #16
    76cc:	af00      	add	r7, sp, #0
    76ce:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    76d0:	6878      	ldr	r0, [r7, #4]
    76d2:	4b13      	ldr	r3, [pc, #76]	; (7720 <get_tc_index+0x58>)
    76d4:	4798      	blx	r3
    76d6:	4603      	mov	r3, r0
    76d8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    76da:	2300      	movs	r3, #0
    76dc:	73fb      	strb	r3, [r7, #15]
    76de:	e010      	b.n	7702 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    76e0:	7bfa      	ldrb	r2, [r7, #15]
    76e2:	4910      	ldr	r1, [pc, #64]	; (7724 <get_tc_index+0x5c>)
    76e4:	4613      	mov	r3, r2
    76e6:	009b      	lsls	r3, r3, #2
    76e8:	4413      	add	r3, r2
    76ea:	009b      	lsls	r3, r3, #2
    76ec:	440b      	add	r3, r1
    76ee:	781b      	ldrb	r3, [r3, #0]
    76f0:	7bba      	ldrb	r2, [r7, #14]
    76f2:	429a      	cmp	r2, r3
    76f4:	d102      	bne.n	76fc <get_tc_index+0x34>
			return i;
    76f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    76fa:	e00d      	b.n	7718 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    76fc:	7bfb      	ldrb	r3, [r7, #15]
    76fe:	3301      	adds	r3, #1
    7700:	73fb      	strb	r3, [r7, #15]
    7702:	7bfb      	ldrb	r3, [r7, #15]
    7704:	2b04      	cmp	r3, #4
    7706:	d9eb      	bls.n	76e0 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    7708:	f240 2206 	movw	r2, #518	; 0x206
    770c:	4906      	ldr	r1, [pc, #24]	; (7728 <get_tc_index+0x60>)
    770e:	2000      	movs	r0, #0
    7710:	4b06      	ldr	r3, [pc, #24]	; (772c <get_tc_index+0x64>)
    7712:	4798      	blx	r3
	return -1;
    7714:	f04f 33ff 	mov.w	r3, #4294967295
}
    7718:	4618      	mov	r0, r3
    771a:	3710      	adds	r7, #16
    771c:	46bd      	mov	sp, r7
    771e:	bd80      	pop	{r7, pc}
    7720:	000077b5 	.word	0x000077b5
    7724:	20000048 	.word	0x20000048
    7728:	0000ce94 	.word	0x0000ce94
    772c:	00003249 	.word	0x00003249

00007730 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    7730:	b480      	push	{r7}
    7732:	b083      	sub	sp, #12
    7734:	af00      	add	r7, sp, #0
    7736:	6078      	str	r0, [r7, #4]
    7738:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    773a:	687b      	ldr	r3, [r7, #4]
    773c:	4a13      	ldr	r2, [pc, #76]	; (778c <_tc_init_irq_param+0x5c>)
    773e:	4293      	cmp	r3, r2
    7740:	d102      	bne.n	7748 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    7742:	4a13      	ldr	r2, [pc, #76]	; (7790 <_tc_init_irq_param+0x60>)
    7744:	683b      	ldr	r3, [r7, #0]
    7746:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    7748:	687b      	ldr	r3, [r7, #4]
    774a:	4a12      	ldr	r2, [pc, #72]	; (7794 <_tc_init_irq_param+0x64>)
    774c:	4293      	cmp	r3, r2
    774e:	d102      	bne.n	7756 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    7750:	4a11      	ldr	r2, [pc, #68]	; (7798 <_tc_init_irq_param+0x68>)
    7752:	683b      	ldr	r3, [r7, #0]
    7754:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    7756:	687b      	ldr	r3, [r7, #4]
    7758:	4a10      	ldr	r2, [pc, #64]	; (779c <_tc_init_irq_param+0x6c>)
    775a:	4293      	cmp	r3, r2
    775c:	d102      	bne.n	7764 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    775e:	4a10      	ldr	r2, [pc, #64]	; (77a0 <_tc_init_irq_param+0x70>)
    7760:	683b      	ldr	r3, [r7, #0]
    7762:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    7764:	687b      	ldr	r3, [r7, #4]
    7766:	4a0f      	ldr	r2, [pc, #60]	; (77a4 <_tc_init_irq_param+0x74>)
    7768:	4293      	cmp	r3, r2
    776a:	d102      	bne.n	7772 <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    776c:	4a0e      	ldr	r2, [pc, #56]	; (77a8 <_tc_init_irq_param+0x78>)
    776e:	683b      	ldr	r3, [r7, #0]
    7770:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    7772:	687b      	ldr	r3, [r7, #4]
    7774:	4a0d      	ldr	r2, [pc, #52]	; (77ac <_tc_init_irq_param+0x7c>)
    7776:	4293      	cmp	r3, r2
    7778:	d102      	bne.n	7780 <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    777a:	4a0d      	ldr	r2, [pc, #52]	; (77b0 <_tc_init_irq_param+0x80>)
    777c:	683b      	ldr	r3, [r7, #0]
    777e:	6013      	str	r3, [r2, #0]
	}
}
    7780:	bf00      	nop
    7782:	370c      	adds	r7, #12
    7784:	46bd      	mov	sp, r7
    7786:	f85d 7b04 	ldr.w	r7, [sp], #4
    778a:	4770      	bx	lr
    778c:	40003800 	.word	0x40003800
    7790:	2000068c 	.word	0x2000068c
    7794:	40003c00 	.word	0x40003c00
    7798:	20000690 	.word	0x20000690
    779c:	4101a000 	.word	0x4101a000
    77a0:	20000694 	.word	0x20000694
    77a4:	4101c000 	.word	0x4101c000
    77a8:	20000698 	.word	0x20000698
    77ac:	43001800 	.word	0x43001800
    77b0:	2000069c 	.word	0x2000069c

000077b4 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    77b4:	b4b0      	push	{r4, r5, r7}
    77b6:	b08d      	sub	sp, #52	; 0x34
    77b8:	af00      	add	r7, sp, #0
    77ba:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    77bc:	4b13      	ldr	r3, [pc, #76]	; (780c <_get_hardware_offset+0x58>)
    77be:	f107 040c 	add.w	r4, r7, #12
    77c2:	461d      	mov	r5, r3
    77c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    77c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    77c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    77cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    77d0:	2300      	movs	r3, #0
    77d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    77d4:	e010      	b.n	77f8 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    77d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    77d8:	009b      	lsls	r3, r3, #2
    77da:	f107 0230 	add.w	r2, r7, #48	; 0x30
    77de:	4413      	add	r3, r2
    77e0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    77e4:	461a      	mov	r2, r3
    77e6:	687b      	ldr	r3, [r7, #4]
    77e8:	429a      	cmp	r2, r3
    77ea:	d102      	bne.n	77f2 <_get_hardware_offset+0x3e>
			return i;
    77ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    77ee:	b2db      	uxtb	r3, r3
    77f0:	e006      	b.n	7800 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    77f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    77f4:	3301      	adds	r3, #1
    77f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    77f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    77fa:	2b07      	cmp	r3, #7
    77fc:	d9eb      	bls.n	77d6 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    77fe:	2300      	movs	r3, #0
}
    7800:	4618      	mov	r0, r3
    7802:	3734      	adds	r7, #52	; 0x34
    7804:	46bd      	mov	sp, r7
    7806:	bcb0      	pop	{r4, r5, r7}
    7808:	4770      	bx	lr
    780a:	bf00      	nop
    780c:	0000cea8 	.word	0x0000cea8

00007810 <__NVIC_EnableIRQ>:
{
    7810:	b480      	push	{r7}
    7812:	b083      	sub	sp, #12
    7814:	af00      	add	r7, sp, #0
    7816:	4603      	mov	r3, r0
    7818:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    781a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    781e:	2b00      	cmp	r3, #0
    7820:	db0b      	blt.n	783a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7822:	4909      	ldr	r1, [pc, #36]	; (7848 <__NVIC_EnableIRQ+0x38>)
    7824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7828:	095b      	lsrs	r3, r3, #5
    782a:	88fa      	ldrh	r2, [r7, #6]
    782c:	f002 021f 	and.w	r2, r2, #31
    7830:	2001      	movs	r0, #1
    7832:	fa00 f202 	lsl.w	r2, r0, r2
    7836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    783a:	bf00      	nop
    783c:	370c      	adds	r7, #12
    783e:	46bd      	mov	sp, r7
    7840:	f85d 7b04 	ldr.w	r7, [sp], #4
    7844:	4770      	bx	lr
    7846:	bf00      	nop
    7848:	e000e100 	.word	0xe000e100

0000784c <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    784c:	b480      	push	{r7}
    784e:	b087      	sub	sp, #28
    7850:	af00      	add	r7, sp, #0
    7852:	60f8      	str	r0, [r7, #12]
    7854:	460b      	mov	r3, r1
    7856:	607a      	str	r2, [r7, #4]
    7858:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    785a:	7afa      	ldrb	r2, [r7, #11]
    785c:	68f9      	ldr	r1, [r7, #12]
    785e:	4613      	mov	r3, r2
    7860:	009b      	lsls	r3, r3, #2
    7862:	4413      	add	r3, r2
    7864:	009b      	lsls	r3, r3, #2
    7866:	440b      	add	r3, r1
    7868:	3340      	adds	r3, #64	; 0x40
    786a:	681b      	ldr	r3, [r3, #0]
    786c:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    786e:	697a      	ldr	r2, [r7, #20]
    7870:	687b      	ldr	r3, [r7, #4]
    7872:	4013      	ands	r3, r2
    7874:	617b      	str	r3, [r7, #20]
	return tmp;
    7876:	697b      	ldr	r3, [r7, #20]
}
    7878:	4618      	mov	r0, r3
    787a:	371c      	adds	r7, #28
    787c:	46bd      	mov	sp, r7
    787e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7882:	4770      	bx	lr

00007884 <hri_oscctrl_get_STATUS_reg>:
{
    7884:	b480      	push	{r7}
    7886:	b085      	sub	sp, #20
    7888:	af00      	add	r7, sp, #0
    788a:	6078      	str	r0, [r7, #4]
    788c:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    788e:	687b      	ldr	r3, [r7, #4]
    7890:	691b      	ldr	r3, [r3, #16]
    7892:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7894:	68fa      	ldr	r2, [r7, #12]
    7896:	683b      	ldr	r3, [r7, #0]
    7898:	4013      	ands	r3, r2
    789a:	60fb      	str	r3, [r7, #12]
	return tmp;
    789c:	68fb      	ldr	r3, [r7, #12]
}
    789e:	4618      	mov	r0, r3
    78a0:	3714      	adds	r7, #20
    78a2:	46bd      	mov	sp, r7
    78a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    78a8:	4770      	bx	lr

000078aa <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    78aa:	b480      	push	{r7}
    78ac:	b085      	sub	sp, #20
    78ae:	af00      	add	r7, sp, #0
    78b0:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    78b2:	687b      	ldr	r3, [r7, #4]
    78b4:	f893 3020 	ldrb.w	r3, [r3, #32]
    78b8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    78ba:	7bfb      	ldrb	r3, [r7, #15]
    78bc:	f003 0301 	and.w	r3, r3, #1
    78c0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    78c2:	7bfb      	ldrb	r3, [r7, #15]
    78c4:	2b00      	cmp	r3, #0
    78c6:	bf14      	ite	ne
    78c8:	2301      	movne	r3, #1
    78ca:	2300      	moveq	r3, #0
    78cc:	b2db      	uxtb	r3, r3
}
    78ce:	4618      	mov	r0, r3
    78d0:	3714      	adds	r7, #20
    78d2:	46bd      	mov	sp, r7
    78d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    78d8:	4770      	bx	lr

000078da <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    78da:	b480      	push	{r7}
    78dc:	b083      	sub	sp, #12
    78de:	af00      	add	r7, sp, #0
    78e0:	6078      	str	r0, [r7, #4]
    78e2:	460b      	mov	r3, r1
    78e4:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    78e6:	bf00      	nop
    78e8:	687b      	ldr	r3, [r7, #4]
    78ea:	789b      	ldrb	r3, [r3, #2]
    78ec:	b2da      	uxtb	r2, r3
    78ee:	78fb      	ldrb	r3, [r7, #3]
    78f0:	4013      	ands	r3, r2
    78f2:	b2db      	uxtb	r3, r3
    78f4:	2b00      	cmp	r3, #0
    78f6:	d1f7      	bne.n	78e8 <hri_usb_wait_for_sync+0xe>
	};
}
    78f8:	bf00      	nop
    78fa:	370c      	adds	r7, #12
    78fc:	46bd      	mov	sp, r7
    78fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7902:	4770      	bx	lr

00007904 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7904:	b480      	push	{r7}
    7906:	b083      	sub	sp, #12
    7908:	af00      	add	r7, sp, #0
    790a:	6078      	str	r0, [r7, #4]
    790c:	460b      	mov	r3, r1
    790e:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    7910:	687b      	ldr	r3, [r7, #4]
    7912:	789b      	ldrb	r3, [r3, #2]
    7914:	b2da      	uxtb	r2, r3
    7916:	78fb      	ldrb	r3, [r7, #3]
    7918:	4013      	ands	r3, r2
    791a:	b2db      	uxtb	r3, r3
    791c:	2b00      	cmp	r3, #0
    791e:	bf14      	ite	ne
    7920:	2301      	movne	r3, #1
    7922:	2300      	moveq	r3, #0
    7924:	b2db      	uxtb	r3, r3
}
    7926:	4618      	mov	r0, r3
    7928:	370c      	adds	r7, #12
    792a:	46bd      	mov	sp, r7
    792c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7930:	4770      	bx	lr

00007932 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    7932:	b480      	push	{r7}
    7934:	b085      	sub	sp, #20
    7936:	af00      	add	r7, sp, #0
    7938:	6078      	str	r0, [r7, #4]
    793a:	460b      	mov	r3, r1
    793c:	70fb      	strb	r3, [r7, #3]
    793e:	4613      	mov	r3, r2
    7940:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7942:	78fb      	ldrb	r3, [r7, #3]
    7944:	687a      	ldr	r2, [r7, #4]
    7946:	3308      	adds	r3, #8
    7948:	015b      	lsls	r3, r3, #5
    794a:	4413      	add	r3, r2
    794c:	3307      	adds	r3, #7
    794e:	781b      	ldrb	r3, [r3, #0]
    7950:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7952:	7bfa      	ldrb	r2, [r7, #15]
    7954:	78bb      	ldrb	r3, [r7, #2]
    7956:	4013      	ands	r3, r2
    7958:	73fb      	strb	r3, [r7, #15]
	return tmp;
    795a:	7bfb      	ldrb	r3, [r7, #15]
}
    795c:	4618      	mov	r0, r3
    795e:	3714      	adds	r7, #20
    7960:	46bd      	mov	sp, r7
    7962:	f85d 7b04 	ldr.w	r7, [sp], #4
    7966:	4770      	bx	lr

00007968 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    7968:	b480      	push	{r7}
    796a:	b083      	sub	sp, #12
    796c:	af00      	add	r7, sp, #0
    796e:	6078      	str	r0, [r7, #4]
    7970:	460b      	mov	r3, r1
    7972:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7974:	78fb      	ldrb	r3, [r7, #3]
    7976:	687a      	ldr	r2, [r7, #4]
    7978:	3308      	adds	r3, #8
    797a:	015b      	lsls	r3, r3, #5
    797c:	4413      	add	r3, r2
    797e:	3307      	adds	r3, #7
    7980:	781b      	ldrb	r3, [r3, #0]
    7982:	b2db      	uxtb	r3, r3
}
    7984:	4618      	mov	r0, r3
    7986:	370c      	adds	r7, #12
    7988:	46bd      	mov	sp, r7
    798a:	f85d 7b04 	ldr.w	r7, [sp], #4
    798e:	4770      	bx	lr

00007990 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    7990:	b480      	push	{r7}
    7992:	b083      	sub	sp, #12
    7994:	af00      	add	r7, sp, #0
    7996:	6078      	str	r0, [r7, #4]
    7998:	460b      	mov	r3, r1
    799a:	70fb      	strb	r3, [r7, #3]
    799c:	4613      	mov	r3, r2
    799e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    79a0:	78fb      	ldrb	r3, [r7, #3]
    79a2:	687a      	ldr	r2, [r7, #4]
    79a4:	3308      	adds	r3, #8
    79a6:	015b      	lsls	r3, r3, #5
    79a8:	4413      	add	r3, r2
    79aa:	3307      	adds	r3, #7
    79ac:	78ba      	ldrb	r2, [r7, #2]
    79ae:	701a      	strb	r2, [r3, #0]
}
    79b0:	bf00      	nop
    79b2:	370c      	adds	r7, #12
    79b4:	46bd      	mov	sp, r7
    79b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ba:	4770      	bx	lr

000079bc <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    79bc:	b480      	push	{r7}
    79be:	b083      	sub	sp, #12
    79c0:	af00      	add	r7, sp, #0
    79c2:	6078      	str	r0, [r7, #4]
    79c4:	460b      	mov	r3, r1
    79c6:	70fb      	strb	r3, [r7, #3]
    79c8:	4613      	mov	r3, r2
    79ca:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    79cc:	78fb      	ldrb	r3, [r7, #3]
    79ce:	687a      	ldr	r2, [r7, #4]
    79d0:	3308      	adds	r3, #8
    79d2:	015b      	lsls	r3, r3, #5
    79d4:	4413      	add	r3, r2
    79d6:	3305      	adds	r3, #5
    79d8:	78ba      	ldrb	r2, [r7, #2]
    79da:	701a      	strb	r2, [r3, #0]
}
    79dc:	bf00      	nop
    79de:	370c      	adds	r7, #12
    79e0:	46bd      	mov	sp, r7
    79e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    79e6:	4770      	bx	lr

000079e8 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    79e8:	b480      	push	{r7}
    79ea:	b083      	sub	sp, #12
    79ec:	af00      	add	r7, sp, #0
    79ee:	6078      	str	r0, [r7, #4]
    79f0:	460b      	mov	r3, r1
    79f2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    79f4:	78fb      	ldrb	r3, [r7, #3]
    79f6:	687a      	ldr	r2, [r7, #4]
    79f8:	3308      	adds	r3, #8
    79fa:	015b      	lsls	r3, r3, #5
    79fc:	4413      	add	r3, r2
    79fe:	3306      	adds	r3, #6
    7a00:	781b      	ldrb	r3, [r3, #0]
    7a02:	b2db      	uxtb	r3, r3
}
    7a04:	4618      	mov	r0, r3
    7a06:	370c      	adds	r7, #12
    7a08:	46bd      	mov	sp, r7
    7a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a0e:	4770      	bx	lr

00007a10 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    7a10:	b480      	push	{r7}
    7a12:	b083      	sub	sp, #12
    7a14:	af00      	add	r7, sp, #0
    7a16:	6078      	str	r0, [r7, #4]
    7a18:	460b      	mov	r3, r1
    7a1a:	70fb      	strb	r3, [r7, #3]
    7a1c:	4613      	mov	r3, r2
    7a1e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7a20:	78fb      	ldrb	r3, [r7, #3]
    7a22:	687a      	ldr	r2, [r7, #4]
    7a24:	3308      	adds	r3, #8
    7a26:	015b      	lsls	r3, r3, #5
    7a28:	4413      	add	r3, r2
    7a2a:	3304      	adds	r3, #4
    7a2c:	78ba      	ldrb	r2, [r7, #2]
    7a2e:	701a      	strb	r2, [r3, #0]
}
    7a30:	bf00      	nop
    7a32:	370c      	adds	r7, #12
    7a34:	46bd      	mov	sp, r7
    7a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a3a:	4770      	bx	lr

00007a3c <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    7a3c:	b480      	push	{r7}
    7a3e:	b083      	sub	sp, #12
    7a40:	af00      	add	r7, sp, #0
    7a42:	6078      	str	r0, [r7, #4]
    7a44:	460b      	mov	r3, r1
    7a46:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7a48:	78fb      	ldrb	r3, [r7, #3]
    7a4a:	687a      	ldr	r2, [r7, #4]
    7a4c:	015b      	lsls	r3, r3, #5
    7a4e:	4413      	add	r3, r2
    7a50:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7a54:	2210      	movs	r2, #16
    7a56:	701a      	strb	r2, [r3, #0]
}
    7a58:	bf00      	nop
    7a5a:	370c      	adds	r7, #12
    7a5c:	46bd      	mov	sp, r7
    7a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a62:	4770      	bx	lr

00007a64 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    7a64:	b480      	push	{r7}
    7a66:	b083      	sub	sp, #12
    7a68:	af00      	add	r7, sp, #0
    7a6a:	6078      	str	r0, [r7, #4]
    7a6c:	460b      	mov	r3, r1
    7a6e:	70fb      	strb	r3, [r7, #3]
    7a70:	4613      	mov	r3, r2
    7a72:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7a74:	78fb      	ldrb	r3, [r7, #3]
    7a76:	687a      	ldr	r2, [r7, #4]
    7a78:	015b      	lsls	r3, r3, #5
    7a7a:	4413      	add	r3, r2
    7a7c:	f203 1309 	addw	r3, r3, #265	; 0x109
    7a80:	78ba      	ldrb	r2, [r7, #2]
    7a82:	701a      	strb	r2, [r3, #0]
}
    7a84:	bf00      	nop
    7a86:	370c      	adds	r7, #12
    7a88:	46bd      	mov	sp, r7
    7a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a8e:	4770      	bx	lr

00007a90 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    7a90:	b480      	push	{r7}
    7a92:	b083      	sub	sp, #12
    7a94:	af00      	add	r7, sp, #0
    7a96:	6078      	str	r0, [r7, #4]
    7a98:	460b      	mov	r3, r1
    7a9a:	70fb      	strb	r3, [r7, #3]
    7a9c:	4613      	mov	r3, r2
    7a9e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7aa0:	78fb      	ldrb	r3, [r7, #3]
    7aa2:	687a      	ldr	r2, [r7, #4]
    7aa4:	015b      	lsls	r3, r3, #5
    7aa6:	4413      	add	r3, r2
    7aa8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7aac:	78ba      	ldrb	r2, [r7, #2]
    7aae:	701a      	strb	r2, [r3, #0]
}
    7ab0:	bf00      	nop
    7ab2:	370c      	adds	r7, #12
    7ab4:	46bd      	mov	sp, r7
    7ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aba:	4770      	bx	lr

00007abc <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7abc:	b480      	push	{r7}
    7abe:	b085      	sub	sp, #20
    7ac0:	af00      	add	r7, sp, #0
    7ac2:	6078      	str	r0, [r7, #4]
    7ac4:	460b      	mov	r3, r1
    7ac6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7ac8:	78fb      	ldrb	r3, [r7, #3]
    7aca:	687a      	ldr	r2, [r7, #4]
    7acc:	3308      	adds	r3, #8
    7ace:	015b      	lsls	r3, r3, #5
    7ad0:	4413      	add	r3, r2
    7ad2:	781b      	ldrb	r3, [r3, #0]
    7ad4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7ad6:	7bfb      	ldrb	r3, [r7, #15]
    7ad8:	f003 0307 	and.w	r3, r3, #7
    7adc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7ade:	7bfb      	ldrb	r3, [r7, #15]
}
    7ae0:	4618      	mov	r0, r3
    7ae2:	3714      	adds	r7, #20
    7ae4:	46bd      	mov	sp, r7
    7ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aea:	4770      	bx	lr

00007aec <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7aec:	b480      	push	{r7}
    7aee:	b085      	sub	sp, #20
    7af0:	af00      	add	r7, sp, #0
    7af2:	6078      	str	r0, [r7, #4]
    7af4:	460b      	mov	r3, r1
    7af6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7af8:	78fb      	ldrb	r3, [r7, #3]
    7afa:	687a      	ldr	r2, [r7, #4]
    7afc:	3308      	adds	r3, #8
    7afe:	015b      	lsls	r3, r3, #5
    7b00:	4413      	add	r3, r2
    7b02:	781b      	ldrb	r3, [r3, #0]
    7b04:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    7b06:	7bfb      	ldrb	r3, [r7, #15]
    7b08:	091b      	lsrs	r3, r3, #4
    7b0a:	b2db      	uxtb	r3, r3
    7b0c:	f003 0307 	and.w	r3, r3, #7
    7b10:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7b12:	7bfb      	ldrb	r3, [r7, #15]
}
    7b14:	4618      	mov	r0, r3
    7b16:	3714      	adds	r7, #20
    7b18:	46bd      	mov	sp, r7
    7b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b1e:	4770      	bx	lr

00007b20 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    7b20:	b480      	push	{r7}
    7b22:	b083      	sub	sp, #12
    7b24:	af00      	add	r7, sp, #0
    7b26:	6078      	str	r0, [r7, #4]
    7b28:	460b      	mov	r3, r1
    7b2a:	70fb      	strb	r3, [r7, #3]
    7b2c:	4613      	mov	r3, r2
    7b2e:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7b30:	78fb      	ldrb	r3, [r7, #3]
    7b32:	687a      	ldr	r2, [r7, #4]
    7b34:	3308      	adds	r3, #8
    7b36:	015b      	lsls	r3, r3, #5
    7b38:	4413      	add	r3, r2
    7b3a:	78ba      	ldrb	r2, [r7, #2]
    7b3c:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    7b3e:	bf00      	nop
    7b40:	370c      	adds	r7, #12
    7b42:	46bd      	mov	sp, r7
    7b44:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b48:	4770      	bx	lr

00007b4a <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    7b4a:	b480      	push	{r7}
    7b4c:	b083      	sub	sp, #12
    7b4e:	af00      	add	r7, sp, #0
    7b50:	6078      	str	r0, [r7, #4]
    7b52:	460b      	mov	r3, r1
    7b54:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7b56:	78fb      	ldrb	r3, [r7, #3]
    7b58:	687a      	ldr	r2, [r7, #4]
    7b5a:	3308      	adds	r3, #8
    7b5c:	015b      	lsls	r3, r3, #5
    7b5e:	4413      	add	r3, r2
    7b60:	781b      	ldrb	r3, [r3, #0]
    7b62:	b2db      	uxtb	r3, r3
}
    7b64:	4618      	mov	r0, r3
    7b66:	370c      	adds	r7, #12
    7b68:	46bd      	mov	sp, r7
    7b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b6e:	4770      	bx	lr

00007b70 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    7b70:	b480      	push	{r7}
    7b72:	b083      	sub	sp, #12
    7b74:	af00      	add	r7, sp, #0
    7b76:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7b78:	687b      	ldr	r3, [r7, #4]
    7b7a:	8b9b      	ldrh	r3, [r3, #28]
    7b7c:	b29b      	uxth	r3, r3
}
    7b7e:	4618      	mov	r0, r3
    7b80:	370c      	adds	r7, #12
    7b82:	46bd      	mov	sp, r7
    7b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b88:	4770      	bx	lr

00007b8a <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    7b8a:	b480      	push	{r7}
    7b8c:	b083      	sub	sp, #12
    7b8e:	af00      	add	r7, sp, #0
    7b90:	6078      	str	r0, [r7, #4]
    7b92:	460b      	mov	r3, r1
    7b94:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7b96:	687b      	ldr	r3, [r7, #4]
    7b98:	887a      	ldrh	r2, [r7, #2]
    7b9a:	839a      	strh	r2, [r3, #28]
}
    7b9c:	bf00      	nop
    7b9e:	370c      	adds	r7, #12
    7ba0:	46bd      	mov	sp, r7
    7ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ba6:	4770      	bx	lr

00007ba8 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7ba8:	b480      	push	{r7}
    7baa:	b083      	sub	sp, #12
    7bac:	af00      	add	r7, sp, #0
    7bae:	6078      	str	r0, [r7, #4]
    7bb0:	460b      	mov	r3, r1
    7bb2:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7bb4:	687b      	ldr	r3, [r7, #4]
    7bb6:	887a      	ldrh	r2, [r7, #2]
    7bb8:	831a      	strh	r2, [r3, #24]
}
    7bba:	bf00      	nop
    7bbc:	370c      	adds	r7, #12
    7bbe:	46bd      	mov	sp, r7
    7bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bc4:	4770      	bx	lr

00007bc6 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    7bc6:	b480      	push	{r7}
    7bc8:	b083      	sub	sp, #12
    7bca:	af00      	add	r7, sp, #0
    7bcc:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    7bce:	687b      	ldr	r3, [r7, #4]
    7bd0:	8b1b      	ldrh	r3, [r3, #24]
    7bd2:	b29b      	uxth	r3, r3
}
    7bd4:	4618      	mov	r0, r3
    7bd6:	370c      	adds	r7, #12
    7bd8:	46bd      	mov	sp, r7
    7bda:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bde:	4770      	bx	lr

00007be0 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7be0:	b480      	push	{r7}
    7be2:	b083      	sub	sp, #12
    7be4:	af00      	add	r7, sp, #0
    7be6:	6078      	str	r0, [r7, #4]
    7be8:	460b      	mov	r3, r1
    7bea:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7bec:	687b      	ldr	r3, [r7, #4]
    7bee:	887a      	ldrh	r2, [r7, #2]
    7bf0:	829a      	strh	r2, [r3, #20]
}
    7bf2:	bf00      	nop
    7bf4:	370c      	adds	r7, #12
    7bf6:	46bd      	mov	sp, r7
    7bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bfc:	4770      	bx	lr

00007bfe <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    7bfe:	b480      	push	{r7}
    7c00:	b085      	sub	sp, #20
    7c02:	af00      	add	r7, sp, #0
    7c04:	6078      	str	r0, [r7, #4]
    7c06:	460b      	mov	r3, r1
    7c08:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    7c0a:	687b      	ldr	r3, [r7, #4]
    7c0c:	789b      	ldrb	r3, [r3, #2]
    7c0e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7c10:	7bfa      	ldrb	r2, [r7, #15]
    7c12:	78fb      	ldrb	r3, [r7, #3]
    7c14:	4013      	ands	r3, r2
    7c16:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7c18:	7bfb      	ldrb	r3, [r7, #15]
}
    7c1a:	4618      	mov	r0, r3
    7c1c:	3714      	adds	r7, #20
    7c1e:	46bd      	mov	sp, r7
    7c20:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c24:	4770      	bx	lr
	...

00007c28 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7c28:	b580      	push	{r7, lr}
    7c2a:	b082      	sub	sp, #8
    7c2c:	af00      	add	r7, sp, #0
    7c2e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	781b      	ldrb	r3, [r3, #0]
    7c34:	b2db      	uxtb	r3, r3
    7c36:	f023 0302 	bic.w	r3, r3, #2
    7c3a:	b2da      	uxtb	r2, r3
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    7c40:	2103      	movs	r1, #3
    7c42:	6878      	ldr	r0, [r7, #4]
    7c44:	4b02      	ldr	r3, [pc, #8]	; (7c50 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    7c46:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    7c48:	bf00      	nop
    7c4a:	3708      	adds	r7, #8
    7c4c:	46bd      	mov	sp, r7
    7c4e:	bd80      	pop	{r7, pc}
    7c50:	000078db 	.word	0x000078db

00007c54 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    7c54:	b580      	push	{r7, lr}
    7c56:	b084      	sub	sp, #16
    7c58:	af00      	add	r7, sp, #0
    7c5a:	6078      	str	r0, [r7, #4]
    7c5c:	460b      	mov	r3, r1
    7c5e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7c60:	2103      	movs	r1, #3
    7c62:	6878      	ldr	r0, [r7, #4]
    7c64:	4b06      	ldr	r3, [pc, #24]	; (7c80 <hri_usb_get_CTRLA_reg+0x2c>)
    7c66:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    7c68:	687b      	ldr	r3, [r7, #4]
    7c6a:	781b      	ldrb	r3, [r3, #0]
    7c6c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7c6e:	7bfa      	ldrb	r2, [r7, #15]
    7c70:	78fb      	ldrb	r3, [r7, #3]
    7c72:	4013      	ands	r3, r2
    7c74:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7c76:	7bfb      	ldrb	r3, [r7, #15]
}
    7c78:	4618      	mov	r0, r3
    7c7a:	3710      	adds	r7, #16
    7c7c:	46bd      	mov	sp, r7
    7c7e:	bd80      	pop	{r7, pc}
    7c80:	000078db 	.word	0x000078db

00007c84 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    7c84:	b580      	push	{r7, lr}
    7c86:	b082      	sub	sp, #8
    7c88:	af00      	add	r7, sp, #0
    7c8a:	6078      	str	r0, [r7, #4]
    7c8c:	460b      	mov	r3, r1
    7c8e:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    7c90:	687b      	ldr	r3, [r7, #4]
    7c92:	78fa      	ldrb	r2, [r7, #3]
    7c94:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7c96:	2103      	movs	r1, #3
    7c98:	6878      	ldr	r0, [r7, #4]
    7c9a:	4b03      	ldr	r3, [pc, #12]	; (7ca8 <hri_usb_write_CTRLA_reg+0x24>)
    7c9c:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    7c9e:	bf00      	nop
    7ca0:	3708      	adds	r7, #8
    7ca2:	46bd      	mov	sp, r7
    7ca4:	bd80      	pop	{r7, pc}
    7ca6:	bf00      	nop
    7ca8:	000078db 	.word	0x000078db

00007cac <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    7cac:	b580      	push	{r7, lr}
    7cae:	b082      	sub	sp, #8
    7cb0:	af00      	add	r7, sp, #0
    7cb2:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    7cb4:	2103      	movs	r1, #3
    7cb6:	6878      	ldr	r0, [r7, #4]
    7cb8:	4b04      	ldr	r3, [pc, #16]	; (7ccc <hri_usb_read_CTRLA_reg+0x20>)
    7cba:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	781b      	ldrb	r3, [r3, #0]
    7cc0:	b2db      	uxtb	r3, r3
}
    7cc2:	4618      	mov	r0, r3
    7cc4:	3708      	adds	r7, #8
    7cc6:	46bd      	mov	sp, r7
    7cc8:	bd80      	pop	{r7, pc}
    7cca:	bf00      	nop
    7ccc:	000078db 	.word	0x000078db

00007cd0 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    7cd0:	b480      	push	{r7}
    7cd2:	b083      	sub	sp, #12
    7cd4:	af00      	add	r7, sp, #0
    7cd6:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    7cd8:	687b      	ldr	r3, [r7, #4]
    7cda:	891b      	ldrh	r3, [r3, #8]
    7cdc:	b29b      	uxth	r3, r3
    7cde:	f023 0301 	bic.w	r3, r3, #1
    7ce2:	b29a      	uxth	r2, r3
    7ce4:	687b      	ldr	r3, [r7, #4]
    7ce6:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    7ce8:	bf00      	nop
    7cea:	370c      	adds	r7, #12
    7cec:	46bd      	mov	sp, r7
    7cee:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cf2:	4770      	bx	lr

00007cf4 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    7cf4:	b480      	push	{r7}
    7cf6:	b083      	sub	sp, #12
    7cf8:	af00      	add	r7, sp, #0
    7cfa:	6078      	str	r0, [r7, #4]
    7cfc:	460b      	mov	r3, r1
    7cfe:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    7d00:	687b      	ldr	r3, [r7, #4]
    7d02:	887a      	ldrh	r2, [r7, #2]
    7d04:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    7d06:	bf00      	nop
    7d08:	370c      	adds	r7, #12
    7d0a:	46bd      	mov	sp, r7
    7d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d10:	4770      	bx	lr

00007d12 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    7d12:	b480      	push	{r7}
    7d14:	b083      	sub	sp, #12
    7d16:	af00      	add	r7, sp, #0
    7d18:	6078      	str	r0, [r7, #4]
    7d1a:	460b      	mov	r3, r1
    7d1c:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    7d1e:	687b      	ldr	r3, [r7, #4]
    7d20:	78fa      	ldrb	r2, [r7, #3]
    7d22:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    7d24:	bf00      	nop
    7d26:	370c      	adds	r7, #12
    7d28:	46bd      	mov	sp, r7
    7d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d2e:	4770      	bx	lr

00007d30 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    7d30:	b480      	push	{r7}
    7d32:	b083      	sub	sp, #12
    7d34:	af00      	add	r7, sp, #0
    7d36:	6078      	str	r0, [r7, #4]
    7d38:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    7d3a:	687b      	ldr	r3, [r7, #4]
    7d3c:	683a      	ldr	r2, [r7, #0]
    7d3e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    7d40:	bf00      	nop
    7d42:	370c      	adds	r7, #12
    7d44:	46bd      	mov	sp, r7
    7d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d4a:	4770      	bx	lr

00007d4c <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    7d4c:	b480      	push	{r7}
    7d4e:	b083      	sub	sp, #12
    7d50:	af00      	add	r7, sp, #0
    7d52:	6078      	str	r0, [r7, #4]
    7d54:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    7d56:	2300      	movs	r3, #0
}
    7d58:	4618      	mov	r0, r3
    7d5a:	370c      	adds	r7, #12
    7d5c:	46bd      	mov	sp, r7
    7d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d62:	4770      	bx	lr

00007d64 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    7d64:	b480      	push	{r7}
    7d66:	b085      	sub	sp, #20
    7d68:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    7d6a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7d6e:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    7d70:	4b28      	ldr	r3, [pc, #160]	; (7e14 <_usb_load_calib+0xb0>)
    7d72:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    7d74:	f003 031f 	and.w	r3, r3, #31
    7d78:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    7d7a:	4b26      	ldr	r3, [pc, #152]	; (7e14 <_usb_load_calib+0xb0>)
    7d7c:	681b      	ldr	r3, [r3, #0]
    7d7e:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    7d80:	f003 031f 	and.w	r3, r3, #31
    7d84:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    7d86:	4b23      	ldr	r3, [pc, #140]	; (7e14 <_usb_load_calib+0xb0>)
    7d88:	681b      	ldr	r3, [r3, #0]
    7d8a:	0a9b      	lsrs	r3, r3, #10
    7d8c:	f003 0307 	and.w	r3, r3, #7
    7d90:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    7d92:	68fb      	ldr	r3, [r7, #12]
    7d94:	2b00      	cmp	r3, #0
    7d96:	d002      	beq.n	7d9e <_usb_load_calib+0x3a>
    7d98:	68fb      	ldr	r3, [r7, #12]
    7d9a:	2b1f      	cmp	r3, #31
    7d9c:	d101      	bne.n	7da2 <_usb_load_calib+0x3e>
		pad_transn = 9;
    7d9e:	2309      	movs	r3, #9
    7da0:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    7da2:	68bb      	ldr	r3, [r7, #8]
    7da4:	2b00      	cmp	r3, #0
    7da6:	d002      	beq.n	7dae <_usb_load_calib+0x4a>
    7da8:	68bb      	ldr	r3, [r7, #8]
    7daa:	2b1f      	cmp	r3, #31
    7dac:	d101      	bne.n	7db2 <_usb_load_calib+0x4e>
		pad_transp = 25;
    7dae:	2319      	movs	r3, #25
    7db0:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    7db2:	687b      	ldr	r3, [r7, #4]
    7db4:	2b00      	cmp	r3, #0
    7db6:	d002      	beq.n	7dbe <_usb_load_calib+0x5a>
    7db8:	687b      	ldr	r3, [r7, #4]
    7dba:	2b07      	cmp	r3, #7
    7dbc:	d101      	bne.n	7dc2 <_usb_load_calib+0x5e>
		pad_trim = 6;
    7dbe:	2306      	movs	r3, #6
    7dc0:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    7dc2:	68fb      	ldr	r3, [r7, #12]
    7dc4:	b29b      	uxth	r3, r3
    7dc6:	019b      	lsls	r3, r3, #6
    7dc8:	b29b      	uxth	r3, r3
    7dca:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    7dce:	b29a      	uxth	r2, r3
    7dd0:	68bb      	ldr	r3, [r7, #8]
    7dd2:	b29b      	uxth	r3, r3
    7dd4:	f003 031f 	and.w	r3, r3, #31
    7dd8:	b29b      	uxth	r3, r3
    7dda:	4313      	orrs	r3, r2
    7ddc:	b29a      	uxth	r2, r3
    7dde:	687b      	ldr	r3, [r7, #4]
    7de0:	b29b      	uxth	r3, r3
    7de2:	031b      	lsls	r3, r3, #12
    7de4:	b29b      	uxth	r3, r3
    7de6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    7dea:	b29b      	uxth	r3, r3
    7dec:	4313      	orrs	r3, r2
    7dee:	b29a      	uxth	r2, r3
    7df0:	683b      	ldr	r3, [r7, #0]
    7df2:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    7df4:	683a      	ldr	r2, [r7, #0]
    7df6:	78d3      	ldrb	r3, [r2, #3]
    7df8:	f043 0303 	orr.w	r3, r3, #3
    7dfc:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    7dfe:	683a      	ldr	r2, [r7, #0]
    7e00:	78d3      	ldrb	r3, [r2, #3]
    7e02:	f043 030c 	orr.w	r3, r3, #12
    7e06:	70d3      	strb	r3, [r2, #3]
}
    7e08:	bf00      	nop
    7e0a:	3714      	adds	r7, #20
    7e0c:	46bd      	mov	sp, r7
    7e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e12:	4770      	bx	lr
    7e14:	00800084 	.word	0x00800084

00007e18 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    7e18:	b580      	push	{r7, lr}
    7e1a:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    7e1c:	bf00      	nop
    7e1e:	2203      	movs	r2, #3
    7e20:	2100      	movs	r1, #0
    7e22:	4804      	ldr	r0, [pc, #16]	; (7e34 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    7e24:	4b04      	ldr	r3, [pc, #16]	; (7e38 <_usb_d_dev_wait_dpll_rdy+0x20>)
    7e26:	4798      	blx	r3
    7e28:	4603      	mov	r3, r0
    7e2a:	2b03      	cmp	r3, #3
    7e2c:	d1f7      	bne.n	7e1e <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    7e2e:	bf00      	nop
    7e30:	bd80      	pop	{r7, pc}
    7e32:	bf00      	nop
    7e34:	40001000 	.word	0x40001000
    7e38:	0000784d 	.word	0x0000784d

00007e3c <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    7e3c:	b580      	push	{r7, lr}
    7e3e:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    7e40:	480e      	ldr	r0, [pc, #56]	; (7e7c <_usb_d_dev_wait_dfll_rdy+0x40>)
    7e42:	4b0f      	ldr	r3, [pc, #60]	; (7e80 <_usb_d_dev_wait_dfll_rdy+0x44>)
    7e44:	4798      	blx	r3
    7e46:	4603      	mov	r3, r0
    7e48:	2b00      	cmp	r3, #0
    7e4a:	d00a      	beq.n	7e62 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    7e4c:	bf00      	nop
    7e4e:	f44f 6110 	mov.w	r1, #2304	; 0x900
    7e52:	480a      	ldr	r0, [pc, #40]	; (7e7c <_usb_d_dev_wait_dfll_rdy+0x40>)
    7e54:	4b0b      	ldr	r3, [pc, #44]	; (7e84 <_usb_d_dev_wait_dfll_rdy+0x48>)
    7e56:	4798      	blx	r3
    7e58:	4603      	mov	r3, r0
    7e5a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    7e5e:	d1f6      	bne.n	7e4e <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    7e60:	e009      	b.n	7e76 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    7e62:	bf00      	nop
    7e64:	f44f 7180 	mov.w	r1, #256	; 0x100
    7e68:	4804      	ldr	r0, [pc, #16]	; (7e7c <_usb_d_dev_wait_dfll_rdy+0x40>)
    7e6a:	4b06      	ldr	r3, [pc, #24]	; (7e84 <_usb_d_dev_wait_dfll_rdy+0x48>)
    7e6c:	4798      	blx	r3
    7e6e:	4603      	mov	r3, r0
    7e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    7e74:	d1f6      	bne.n	7e64 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    7e76:	bf00      	nop
    7e78:	bd80      	pop	{r7, pc}
    7e7a:	bf00      	nop
    7e7c:	40001000 	.word	0x40001000
    7e80:	000078ab 	.word	0x000078ab
    7e84:	00007885 	.word	0x00007885

00007e88 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    7e88:	b580      	push	{r7, lr}
    7e8a:	b082      	sub	sp, #8
    7e8c:	af00      	add	r7, sp, #0
    7e8e:	4603      	mov	r3, r0
    7e90:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    7e92:	79fb      	ldrb	r3, [r7, #7]
    7e94:	2b00      	cmp	r3, #0
    7e96:	d102      	bne.n	7e9e <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    7e98:	4b05      	ldr	r3, [pc, #20]	; (7eb0 <_usb_d_dev_wait_clk_rdy+0x28>)
    7e9a:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    7e9c:	e004      	b.n	7ea8 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    7e9e:	79fb      	ldrb	r3, [r7, #7]
    7ea0:	2b01      	cmp	r3, #1
    7ea2:	d101      	bne.n	7ea8 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    7ea4:	4b03      	ldr	r3, [pc, #12]	; (7eb4 <_usb_d_dev_wait_clk_rdy+0x2c>)
    7ea6:	4798      	blx	r3
}
    7ea8:	bf00      	nop
    7eaa:	3708      	adds	r7, #8
    7eac:	46bd      	mov	sp, r7
    7eae:	bd80      	pop	{r7, pc}
    7eb0:	00007e3d 	.word	0x00007e3d
    7eb4:	00007e19 	.word	0x00007e19

00007eb8 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    7eb8:	b580      	push	{r7, lr}
    7eba:	b082      	sub	sp, #8
    7ebc:	af00      	add	r7, sp, #0
    7ebe:	4603      	mov	r3, r0
    7ec0:	6039      	str	r1, [r7, #0]
    7ec2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    7ec4:	683b      	ldr	r3, [r7, #0]
    7ec6:	b2da      	uxtb	r2, r3
    7ec8:	79fb      	ldrb	r3, [r7, #7]
    7eca:	4619      	mov	r1, r3
    7ecc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7ed0:	4b02      	ldr	r3, [pc, #8]	; (7edc <_usbd_ep_int_ack+0x24>)
    7ed2:	4798      	blx	r3
}
    7ed4:	bf00      	nop
    7ed6:	3708      	adds	r7, #8
    7ed8:	46bd      	mov	sp, r7
    7eda:	bd80      	pop	{r7, pc}
    7edc:	00007991 	.word	0x00007991

00007ee0 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    7ee0:	b580      	push	{r7, lr}
    7ee2:	b082      	sub	sp, #8
    7ee4:	af00      	add	r7, sp, #0
    7ee6:	4603      	mov	r3, r0
    7ee8:	6039      	str	r1, [r7, #0]
    7eea:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    7eec:	683b      	ldr	r3, [r7, #0]
    7eee:	b2da      	uxtb	r2, r3
    7ef0:	79fb      	ldrb	r3, [r7, #7]
    7ef2:	4619      	mov	r1, r3
    7ef4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7ef8:	4b02      	ldr	r3, [pc, #8]	; (7f04 <_usbd_ep_int_en+0x24>)
    7efa:	4798      	blx	r3
}
    7efc:	bf00      	nop
    7efe:	3708      	adds	r7, #8
    7f00:	46bd      	mov	sp, r7
    7f02:	bd80      	pop	{r7, pc}
    7f04:	00007a65 	.word	0x00007a65

00007f08 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    7f08:	b580      	push	{r7, lr}
    7f0a:	b082      	sub	sp, #8
    7f0c:	af00      	add	r7, sp, #0
    7f0e:	4603      	mov	r3, r0
    7f10:	6039      	str	r1, [r7, #0]
    7f12:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    7f14:	683b      	ldr	r3, [r7, #0]
    7f16:	b2da      	uxtb	r2, r3
    7f18:	79fb      	ldrb	r3, [r7, #7]
    7f1a:	4619      	mov	r1, r3
    7f1c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7f20:	4b02      	ldr	r3, [pc, #8]	; (7f2c <_usbd_ep_int_dis+0x24>)
    7f22:	4798      	blx	r3
}
    7f24:	bf00      	nop
    7f26:	3708      	adds	r7, #8
    7f28:	46bd      	mov	sp, r7
    7f2a:	bd80      	pop	{r7, pc}
    7f2c:	00007a91 	.word	0x00007a91

00007f30 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    7f30:	b580      	push	{r7, lr}
    7f32:	b082      	sub	sp, #8
    7f34:	af00      	add	r7, sp, #0
    7f36:	4603      	mov	r3, r0
    7f38:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    7f3a:	79fb      	ldrb	r3, [r7, #7]
    7f3c:	4619      	mov	r1, r3
    7f3e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7f42:	4b06      	ldr	r3, [pc, #24]	; (7f5c <_usbd_ep_is_ctrl+0x2c>)
    7f44:	4798      	blx	r3
    7f46:	4603      	mov	r3, r0
    7f48:	2b11      	cmp	r3, #17
    7f4a:	bf0c      	ite	eq
    7f4c:	2301      	moveq	r3, #1
    7f4e:	2300      	movne	r3, #0
    7f50:	b2db      	uxtb	r3, r3
}
    7f52:	4618      	mov	r0, r3
    7f54:	3708      	adds	r7, #8
    7f56:	46bd      	mov	sp, r7
    7f58:	bd80      	pop	{r7, pc}
    7f5a:	bf00      	nop
    7f5c:	00007b4b 	.word	0x00007b4b

00007f60 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    7f60:	b580      	push	{r7, lr}
    7f62:	b082      	sub	sp, #8
    7f64:	af00      	add	r7, sp, #0
    7f66:	4603      	mov	r3, r0
    7f68:	71fb      	strb	r3, [r7, #7]
    7f6a:	460b      	mov	r3, r1
    7f6c:	71bb      	strb	r3, [r7, #6]
    7f6e:	4613      	mov	r3, r2
    7f70:	717b      	strb	r3, [r7, #5]
	if (st) {
    7f72:	797b      	ldrb	r3, [r7, #5]
    7f74:	2b00      	cmp	r3, #0
    7f76:	d00b      	beq.n	7f90 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    7f78:	79bb      	ldrb	r3, [r7, #6]
    7f7a:	2210      	movs	r2, #16
    7f7c:	fa02 f303 	lsl.w	r3, r2, r3
    7f80:	b2da      	uxtb	r2, r3
    7f82:	79fb      	ldrb	r3, [r7, #7]
    7f84:	4619      	mov	r1, r3
    7f86:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7f8a:	4b09      	ldr	r3, [pc, #36]	; (7fb0 <_usbd_ep_set_stall+0x50>)
    7f8c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    7f8e:	e00a      	b.n	7fa6 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    7f90:	79bb      	ldrb	r3, [r7, #6]
    7f92:	2210      	movs	r2, #16
    7f94:	fa02 f303 	lsl.w	r3, r2, r3
    7f98:	b2da      	uxtb	r2, r3
    7f9a:	79fb      	ldrb	r3, [r7, #7]
    7f9c:	4619      	mov	r1, r3
    7f9e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    7fa2:	4b04      	ldr	r3, [pc, #16]	; (7fb4 <_usbd_ep_set_stall+0x54>)
    7fa4:	4798      	blx	r3
}
    7fa6:	bf00      	nop
    7fa8:	3708      	adds	r7, #8
    7faa:	46bd      	mov	sp, r7
    7fac:	bd80      	pop	{r7, pc}
    7fae:	bf00      	nop
    7fb0:	000079bd 	.word	0x000079bd
    7fb4:	00007a11 	.word	0x00007a11

00007fb8 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    7fb8:	b580      	push	{r7, lr}
    7fba:	b084      	sub	sp, #16
    7fbc:	af00      	add	r7, sp, #0
    7fbe:	4603      	mov	r3, r0
    7fc0:	460a      	mov	r2, r1
    7fc2:	71fb      	strb	r3, [r7, #7]
    7fc4:	4613      	mov	r3, r2
    7fc6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    7fc8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    7fcc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    7fce:	79fb      	ldrb	r3, [r7, #7]
    7fd0:	4619      	mov	r1, r3
    7fd2:	68f8      	ldr	r0, [r7, #12]
    7fd4:	4b08      	ldr	r3, [pc, #32]	; (7ff8 <_usbd_ep_is_stalled+0x40>)
    7fd6:	4798      	blx	r3
    7fd8:	4603      	mov	r3, r0
    7fda:	4619      	mov	r1, r3
    7fdc:	79bb      	ldrb	r3, [r7, #6]
    7fde:	2210      	movs	r2, #16
    7fe0:	fa02 f303 	lsl.w	r3, r2, r3
    7fe4:	400b      	ands	r3, r1
    7fe6:	2b00      	cmp	r3, #0
    7fe8:	bf14      	ite	ne
    7fea:	2301      	movne	r3, #1
    7fec:	2300      	moveq	r3, #0
    7fee:	b2db      	uxtb	r3, r3
}
    7ff0:	4618      	mov	r0, r3
    7ff2:	3710      	adds	r7, #16
    7ff4:	46bd      	mov	sp, r7
    7ff6:	bd80      	pop	{r7, pc}
    7ff8:	000079e9 	.word	0x000079e9

00007ffc <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    7ffc:	b580      	push	{r7, lr}
    7ffe:	b084      	sub	sp, #16
    8000:	af00      	add	r7, sp, #0
    8002:	4603      	mov	r3, r0
    8004:	460a      	mov	r2, r1
    8006:	71fb      	strb	r3, [r7, #7]
    8008:	4613      	mov	r3, r2
    800a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    800c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8010:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8012:	79fb      	ldrb	r3, [r7, #7]
    8014:	4619      	mov	r1, r3
    8016:	68f8      	ldr	r0, [r7, #12]
    8018:	4b08      	ldr	r3, [pc, #32]	; (803c <_usbd_ep_is_stall_sent+0x40>)
    801a:	4798      	blx	r3
    801c:	4603      	mov	r3, r0
    801e:	4619      	mov	r1, r3
    8020:	79bb      	ldrb	r3, [r7, #6]
    8022:	2220      	movs	r2, #32
    8024:	fa02 f303 	lsl.w	r3, r2, r3
    8028:	400b      	ands	r3, r1
    802a:	2b00      	cmp	r3, #0
    802c:	bf14      	ite	ne
    802e:	2301      	movne	r3, #1
    8030:	2300      	moveq	r3, #0
    8032:	b2db      	uxtb	r3, r3
}
    8034:	4618      	mov	r0, r3
    8036:	3710      	adds	r7, #16
    8038:	46bd      	mov	sp, r7
    803a:	bd80      	pop	{r7, pc}
    803c:	00007969 	.word	0x00007969

00008040 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    8040:	b580      	push	{r7, lr}
    8042:	b082      	sub	sp, #8
    8044:	af00      	add	r7, sp, #0
    8046:	4603      	mov	r3, r0
    8048:	460a      	mov	r2, r1
    804a:	71fb      	strb	r3, [r7, #7]
    804c:	4613      	mov	r3, r2
    804e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8050:	79bb      	ldrb	r3, [r7, #6]
    8052:	2220      	movs	r2, #32
    8054:	409a      	lsls	r2, r3
    8056:	79fb      	ldrb	r3, [r7, #7]
    8058:	4611      	mov	r1, r2
    805a:	4618      	mov	r0, r3
    805c:	4b02      	ldr	r3, [pc, #8]	; (8068 <_usbd_ep_ack_stall+0x28>)
    805e:	4798      	blx	r3
}
    8060:	bf00      	nop
    8062:	3708      	adds	r7, #8
    8064:	46bd      	mov	sp, r7
    8066:	bd80      	pop	{r7, pc}
    8068:	00007eb9 	.word	0x00007eb9

0000806c <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    806c:	b580      	push	{r7, lr}
    806e:	b082      	sub	sp, #8
    8070:	af00      	add	r7, sp, #0
    8072:	4603      	mov	r3, r0
    8074:	71fb      	strb	r3, [r7, #7]
    8076:	460b      	mov	r3, r1
    8078:	71bb      	strb	r3, [r7, #6]
    807a:	4613      	mov	r3, r2
    807c:	717b      	strb	r3, [r7, #5]
	if (en) {
    807e:	797b      	ldrb	r3, [r7, #5]
    8080:	2b00      	cmp	r3, #0
    8082:	d008      	beq.n	8096 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8084:	79bb      	ldrb	r3, [r7, #6]
    8086:	2220      	movs	r2, #32
    8088:	409a      	lsls	r2, r3
    808a:	79fb      	ldrb	r3, [r7, #7]
    808c:	4611      	mov	r1, r2
    808e:	4618      	mov	r0, r3
    8090:	4b07      	ldr	r3, [pc, #28]	; (80b0 <_usbd_ep_int_stall_en+0x44>)
    8092:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8094:	e007      	b.n	80a6 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8096:	79bb      	ldrb	r3, [r7, #6]
    8098:	2220      	movs	r2, #32
    809a:	409a      	lsls	r2, r3
    809c:	79fb      	ldrb	r3, [r7, #7]
    809e:	4611      	mov	r1, r2
    80a0:	4618      	mov	r0, r3
    80a2:	4b04      	ldr	r3, [pc, #16]	; (80b4 <_usbd_ep_int_stall_en+0x48>)
    80a4:	4798      	blx	r3
}
    80a6:	bf00      	nop
    80a8:	3708      	adds	r7, #8
    80aa:	46bd      	mov	sp, r7
    80ac:	bd80      	pop	{r7, pc}
    80ae:	bf00      	nop
    80b0:	00007ee1 	.word	0x00007ee1
    80b4:	00007f09 	.word	0x00007f09

000080b8 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    80b8:	b580      	push	{r7, lr}
    80ba:	b082      	sub	sp, #8
    80bc:	af00      	add	r7, sp, #0
    80be:	4603      	mov	r3, r0
    80c0:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    80c2:	79fb      	ldrb	r3, [r7, #7]
    80c4:	4619      	mov	r1, r3
    80c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    80ca:	4b03      	ldr	r3, [pc, #12]	; (80d8 <_usbd_ep_stop_setup+0x20>)
    80cc:	4798      	blx	r3
}
    80ce:	bf00      	nop
    80d0:	3708      	adds	r7, #8
    80d2:	46bd      	mov	sp, r7
    80d4:	bd80      	pop	{r7, pc}
    80d6:	bf00      	nop
    80d8:	00007a3d 	.word	0x00007a3d

000080dc <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    80dc:	b580      	push	{r7, lr}
    80de:	b082      	sub	sp, #8
    80e0:	af00      	add	r7, sp, #0
    80e2:	4603      	mov	r3, r0
    80e4:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    80e6:	79fb      	ldrb	r3, [r7, #7]
    80e8:	2210      	movs	r2, #16
    80ea:	4619      	mov	r1, r3
    80ec:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    80f0:	4b05      	ldr	r3, [pc, #20]	; (8108 <_usbd_ep_is_setup+0x2c>)
    80f2:	4798      	blx	r3
    80f4:	4603      	mov	r3, r0
    80f6:	2b00      	cmp	r3, #0
    80f8:	bf14      	ite	ne
    80fa:	2301      	movne	r3, #1
    80fc:	2300      	moveq	r3, #0
    80fe:	b2db      	uxtb	r3, r3
}
    8100:	4618      	mov	r0, r3
    8102:	3708      	adds	r7, #8
    8104:	46bd      	mov	sp, r7
    8106:	bd80      	pop	{r7, pc}
    8108:	00007933 	.word	0x00007933

0000810c <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    810c:	b580      	push	{r7, lr}
    810e:	b082      	sub	sp, #8
    8110:	af00      	add	r7, sp, #0
    8112:	4603      	mov	r3, r0
    8114:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8116:	79fb      	ldrb	r3, [r7, #7]
    8118:	2110      	movs	r1, #16
    811a:	4618      	mov	r0, r3
    811c:	4b02      	ldr	r3, [pc, #8]	; (8128 <_usbd_ep_ack_setup+0x1c>)
    811e:	4798      	blx	r3
}
    8120:	bf00      	nop
    8122:	3708      	adds	r7, #8
    8124:	46bd      	mov	sp, r7
    8126:	bd80      	pop	{r7, pc}
    8128:	00007eb9 	.word	0x00007eb9

0000812c <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    812c:	b580      	push	{r7, lr}
    812e:	b082      	sub	sp, #8
    8130:	af00      	add	r7, sp, #0
    8132:	4603      	mov	r3, r0
    8134:	71fb      	strb	r3, [r7, #7]
    8136:	460b      	mov	r3, r1
    8138:	71bb      	strb	r3, [r7, #6]
    813a:	4613      	mov	r3, r2
    813c:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    813e:	797b      	ldrb	r3, [r7, #5]
    8140:	2b00      	cmp	r3, #0
    8142:	d00b      	beq.n	815c <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8144:	79bb      	ldrb	r3, [r7, #6]
    8146:	2201      	movs	r2, #1
    8148:	fa02 f303 	lsl.w	r3, r2, r3
    814c:	b2da      	uxtb	r2, r3
    814e:	79fb      	ldrb	r3, [r7, #7]
    8150:	4619      	mov	r1, r3
    8152:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8156:	4b09      	ldr	r3, [pc, #36]	; (817c <_usbd_ep_set_toggle+0x50>)
    8158:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    815a:	e00a      	b.n	8172 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    815c:	79bb      	ldrb	r3, [r7, #6]
    815e:	2201      	movs	r2, #1
    8160:	fa02 f303 	lsl.w	r3, r2, r3
    8164:	b2da      	uxtb	r2, r3
    8166:	79fb      	ldrb	r3, [r7, #7]
    8168:	4619      	mov	r1, r3
    816a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    816e:	4b04      	ldr	r3, [pc, #16]	; (8180 <_usbd_ep_set_toggle+0x54>)
    8170:	4798      	blx	r3
}
    8172:	bf00      	nop
    8174:	3708      	adds	r7, #8
    8176:	46bd      	mov	sp, r7
    8178:	bd80      	pop	{r7, pc}
    817a:	bf00      	nop
    817c:	000079bd 	.word	0x000079bd
    8180:	00007a11 	.word	0x00007a11

00008184 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8184:	b580      	push	{r7, lr}
    8186:	b082      	sub	sp, #8
    8188:	af00      	add	r7, sp, #0
    818a:	4603      	mov	r3, r0
    818c:	460a      	mov	r2, r1
    818e:	71fb      	strb	r3, [r7, #7]
    8190:	4613      	mov	r3, r2
    8192:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8194:	79bb      	ldrb	r3, [r7, #6]
    8196:	2201      	movs	r2, #1
    8198:	409a      	lsls	r2, r3
    819a:	79fb      	ldrb	r3, [r7, #7]
    819c:	4611      	mov	r1, r2
    819e:	4618      	mov	r0, r3
    81a0:	4b02      	ldr	r3, [pc, #8]	; (81ac <_usbd_ep_ack_io_cpt+0x28>)
    81a2:	4798      	blx	r3
}
    81a4:	bf00      	nop
    81a6:	3708      	adds	r7, #8
    81a8:	46bd      	mov	sp, r7
    81aa:	bd80      	pop	{r7, pc}
    81ac:	00007eb9 	.word	0x00007eb9

000081b0 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    81b0:	b480      	push	{r7}
    81b2:	b085      	sub	sp, #20
    81b4:	af00      	add	r7, sp, #0
    81b6:	4603      	mov	r3, r0
    81b8:	603a      	str	r2, [r7, #0]
    81ba:	71fb      	strb	r3, [r7, #7]
    81bc:	460b      	mov	r3, r1
    81be:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    81c0:	79fa      	ldrb	r2, [r7, #7]
    81c2:	79bb      	ldrb	r3, [r7, #6]
    81c4:	0052      	lsls	r2, r2, #1
    81c6:	4413      	add	r3, r2
    81c8:	011b      	lsls	r3, r3, #4
    81ca:	4a06      	ldr	r2, [pc, #24]	; (81e4 <_usbd_ep_set_buf+0x34>)
    81cc:	4413      	add	r3, r2
    81ce:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    81d0:	68fb      	ldr	r3, [r7, #12]
    81d2:	683a      	ldr	r2, [r7, #0]
    81d4:	601a      	str	r2, [r3, #0]
}
    81d6:	bf00      	nop
    81d8:	3714      	adds	r7, #20
    81da:	46bd      	mov	sp, r7
    81dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    81e0:	4770      	bx	lr
    81e2:	bf00      	nop
    81e4:	200009a8 	.word	0x200009a8

000081e8 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    81e8:	b480      	push	{r7}
    81ea:	b085      	sub	sp, #20
    81ec:	af00      	add	r7, sp, #0
    81ee:	4603      	mov	r3, r0
    81f0:	71fb      	strb	r3, [r7, #7]
    81f2:	460b      	mov	r3, r1
    81f4:	71bb      	strb	r3, [r7, #6]
    81f6:	4613      	mov	r3, r2
    81f8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    81fa:	79fa      	ldrb	r2, [r7, #7]
    81fc:	79bb      	ldrb	r3, [r7, #6]
    81fe:	0052      	lsls	r2, r2, #1
    8200:	4413      	add	r3, r2
    8202:	011b      	lsls	r3, r3, #4
    8204:	4a08      	ldr	r2, [pc, #32]	; (8228 <_usbd_ep_set_in_count+0x40>)
    8206:	4413      	add	r3, r2
    8208:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    820a:	88bb      	ldrh	r3, [r7, #4]
    820c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8210:	b299      	uxth	r1, r3
    8212:	68fa      	ldr	r2, [r7, #12]
    8214:	6853      	ldr	r3, [r2, #4]
    8216:	f361 339b 	bfi	r3, r1, #14, #14
    821a:	6053      	str	r3, [r2, #4]
}
    821c:	bf00      	nop
    821e:	3714      	adds	r7, #20
    8220:	46bd      	mov	sp, r7
    8222:	f85d 7b04 	ldr.w	r7, [sp], #4
    8226:	4770      	bx	lr
    8228:	200009a8 	.word	0x200009a8

0000822c <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    822c:	b480      	push	{r7}
    822e:	b085      	sub	sp, #20
    8230:	af00      	add	r7, sp, #0
    8232:	4603      	mov	r3, r0
    8234:	71fb      	strb	r3, [r7, #7]
    8236:	460b      	mov	r3, r1
    8238:	71bb      	strb	r3, [r7, #6]
    823a:	4613      	mov	r3, r2
    823c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    823e:	79fa      	ldrb	r2, [r7, #7]
    8240:	79bb      	ldrb	r3, [r7, #6]
    8242:	0052      	lsls	r2, r2, #1
    8244:	4413      	add	r3, r2
    8246:	011b      	lsls	r3, r3, #4
    8248:	4a08      	ldr	r2, [pc, #32]	; (826c <_usbd_ep_set_in_size+0x40>)
    824a:	4413      	add	r3, r2
    824c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    824e:	88bb      	ldrh	r3, [r7, #4]
    8250:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8254:	b299      	uxth	r1, r3
    8256:	68fa      	ldr	r2, [r7, #12]
    8258:	6853      	ldr	r3, [r2, #4]
    825a:	f361 030d 	bfi	r3, r1, #0, #14
    825e:	6053      	str	r3, [r2, #4]
}
    8260:	bf00      	nop
    8262:	3714      	adds	r7, #20
    8264:	46bd      	mov	sp, r7
    8266:	f85d 7b04 	ldr.w	r7, [sp], #4
    826a:	4770      	bx	lr
    826c:	200009a8 	.word	0x200009a8

00008270 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8270:	b480      	push	{r7}
    8272:	b085      	sub	sp, #20
    8274:	af00      	add	r7, sp, #0
    8276:	4603      	mov	r3, r0
    8278:	71fb      	strb	r3, [r7, #7]
    827a:	460b      	mov	r3, r1
    827c:	71bb      	strb	r3, [r7, #6]
    827e:	4613      	mov	r3, r2
    8280:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8282:	79fa      	ldrb	r2, [r7, #7]
    8284:	79bb      	ldrb	r3, [r7, #6]
    8286:	0052      	lsls	r2, r2, #1
    8288:	4413      	add	r3, r2
    828a:	011b      	lsls	r3, r3, #4
    828c:	4a08      	ldr	r2, [pc, #32]	; (82b0 <_usbd_ep_set_out_count+0x40>)
    828e:	4413      	add	r3, r2
    8290:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8292:	88bb      	ldrh	r3, [r7, #4]
    8294:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8298:	b299      	uxth	r1, r3
    829a:	68fa      	ldr	r2, [r7, #12]
    829c:	6853      	ldr	r3, [r2, #4]
    829e:	f361 030d 	bfi	r3, r1, #0, #14
    82a2:	6053      	str	r3, [r2, #4]
}
    82a4:	bf00      	nop
    82a6:	3714      	adds	r7, #20
    82a8:	46bd      	mov	sp, r7
    82aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    82ae:	4770      	bx	lr
    82b0:	200009a8 	.word	0x200009a8

000082b4 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    82b4:	b480      	push	{r7}
    82b6:	b085      	sub	sp, #20
    82b8:	af00      	add	r7, sp, #0
    82ba:	4603      	mov	r3, r0
    82bc:	71fb      	strb	r3, [r7, #7]
    82be:	460b      	mov	r3, r1
    82c0:	71bb      	strb	r3, [r7, #6]
    82c2:	4613      	mov	r3, r2
    82c4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    82c6:	79fa      	ldrb	r2, [r7, #7]
    82c8:	79bb      	ldrb	r3, [r7, #6]
    82ca:	0052      	lsls	r2, r2, #1
    82cc:	4413      	add	r3, r2
    82ce:	011b      	lsls	r3, r3, #4
    82d0:	4a08      	ldr	r2, [pc, #32]	; (82f4 <_usbd_ep_set_out_size+0x40>)
    82d2:	4413      	add	r3, r2
    82d4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    82d6:	88bb      	ldrh	r3, [r7, #4]
    82d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    82dc:	b299      	uxth	r1, r3
    82de:	68fa      	ldr	r2, [r7, #12]
    82e0:	6853      	ldr	r3, [r2, #4]
    82e2:	f361 339b 	bfi	r3, r1, #14, #14
    82e6:	6053      	str	r3, [r2, #4]
}
    82e8:	bf00      	nop
    82ea:	3714      	adds	r7, #20
    82ec:	46bd      	mov	sp, r7
    82ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    82f2:	4770      	bx	lr
    82f4:	200009a8 	.word	0x200009a8

000082f8 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    82f8:	b580      	push	{r7, lr}
    82fa:	b084      	sub	sp, #16
    82fc:	af00      	add	r7, sp, #0
    82fe:	60ba      	str	r2, [r7, #8]
    8300:	607b      	str	r3, [r7, #4]
    8302:	4603      	mov	r3, r0
    8304:	73fb      	strb	r3, [r7, #15]
    8306:	460b      	mov	r3, r1
    8308:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    830a:	68bb      	ldr	r3, [r7, #8]
    830c:	b29a      	uxth	r2, r3
    830e:	7bb9      	ldrb	r1, [r7, #14]
    8310:	7bfb      	ldrb	r3, [r7, #15]
    8312:	4618      	mov	r0, r3
    8314:	4b06      	ldr	r3, [pc, #24]	; (8330 <_usbd_ep_set_in_trans+0x38>)
    8316:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8318:	687b      	ldr	r3, [r7, #4]
    831a:	b29a      	uxth	r2, r3
    831c:	7bb9      	ldrb	r1, [r7, #14]
    831e:	7bfb      	ldrb	r3, [r7, #15]
    8320:	4618      	mov	r0, r3
    8322:	4b04      	ldr	r3, [pc, #16]	; (8334 <_usbd_ep_set_in_trans+0x3c>)
    8324:	4798      	blx	r3
}
    8326:	bf00      	nop
    8328:	3710      	adds	r7, #16
    832a:	46bd      	mov	sp, r7
    832c:	bd80      	pop	{r7, pc}
    832e:	bf00      	nop
    8330:	0000822d 	.word	0x0000822d
    8334:	000081e9 	.word	0x000081e9

00008338 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8338:	b580      	push	{r7, lr}
    833a:	b084      	sub	sp, #16
    833c:	af00      	add	r7, sp, #0
    833e:	60ba      	str	r2, [r7, #8]
    8340:	607b      	str	r3, [r7, #4]
    8342:	4603      	mov	r3, r0
    8344:	73fb      	strb	r3, [r7, #15]
    8346:	460b      	mov	r3, r1
    8348:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    834a:	68bb      	ldr	r3, [r7, #8]
    834c:	b29a      	uxth	r2, r3
    834e:	7bb9      	ldrb	r1, [r7, #14]
    8350:	7bfb      	ldrb	r3, [r7, #15]
    8352:	4618      	mov	r0, r3
    8354:	4b06      	ldr	r3, [pc, #24]	; (8370 <_usbd_ep_set_out_trans+0x38>)
    8356:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8358:	687b      	ldr	r3, [r7, #4]
    835a:	b29a      	uxth	r2, r3
    835c:	7bb9      	ldrb	r1, [r7, #14]
    835e:	7bfb      	ldrb	r3, [r7, #15]
    8360:	4618      	mov	r0, r3
    8362:	4b04      	ldr	r3, [pc, #16]	; (8374 <_usbd_ep_set_out_trans+0x3c>)
    8364:	4798      	blx	r3
}
    8366:	bf00      	nop
    8368:	3710      	adds	r7, #16
    836a:	46bd      	mov	sp, r7
    836c:	bd80      	pop	{r7, pc}
    836e:	bf00      	nop
    8370:	000082b5 	.word	0x000082b5
    8374:	00008271 	.word	0x00008271

00008378 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8378:	b480      	push	{r7}
    837a:	b085      	sub	sp, #20
    837c:	af00      	add	r7, sp, #0
    837e:	4603      	mov	r3, r0
    8380:	460a      	mov	r2, r1
    8382:	71fb      	strb	r3, [r7, #7]
    8384:	4613      	mov	r3, r2
    8386:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8388:	79fa      	ldrb	r2, [r7, #7]
    838a:	79bb      	ldrb	r3, [r7, #6]
    838c:	0052      	lsls	r2, r2, #1
    838e:	4413      	add	r3, r2
    8390:	011b      	lsls	r3, r3, #4
    8392:	4a06      	ldr	r2, [pc, #24]	; (83ac <_usbd_ep_clear_bank_status+0x34>)
    8394:	4413      	add	r3, r2
    8396:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8398:	68fb      	ldr	r3, [r7, #12]
    839a:	2200      	movs	r2, #0
    839c:	729a      	strb	r2, [r3, #10]
}
    839e:	bf00      	nop
    83a0:	3714      	adds	r7, #20
    83a2:	46bd      	mov	sp, r7
    83a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    83a8:	4770      	bx	lr
    83aa:	bf00      	nop
    83ac:	200009a8 	.word	0x200009a8

000083b0 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    83b0:	b580      	push	{r7, lr}
    83b2:	b082      	sub	sp, #8
    83b4:	af00      	add	r7, sp, #0
    83b6:	4603      	mov	r3, r0
    83b8:	71fb      	strb	r3, [r7, #7]
    83ba:	460b      	mov	r3, r1
    83bc:	71bb      	strb	r3, [r7, #6]
    83be:	4613      	mov	r3, r2
    83c0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    83c2:	797b      	ldrb	r3, [r7, #5]
    83c4:	2b00      	cmp	r3, #0
    83c6:	d00b      	beq.n	83e0 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    83c8:	79bb      	ldrb	r3, [r7, #6]
    83ca:	2240      	movs	r2, #64	; 0x40
    83cc:	fa02 f303 	lsl.w	r3, r2, r3
    83d0:	b2da      	uxtb	r2, r3
    83d2:	79fb      	ldrb	r3, [r7, #7]
    83d4:	4619      	mov	r1, r3
    83d6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    83da:	4b09      	ldr	r3, [pc, #36]	; (8400 <_usbd_ep_set_in_rdy+0x50>)
    83dc:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    83de:	e00a      	b.n	83f6 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    83e0:	79bb      	ldrb	r3, [r7, #6]
    83e2:	2240      	movs	r2, #64	; 0x40
    83e4:	fa02 f303 	lsl.w	r3, r2, r3
    83e8:	b2da      	uxtb	r2, r3
    83ea:	79fb      	ldrb	r3, [r7, #7]
    83ec:	4619      	mov	r1, r3
    83ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    83f2:	4b04      	ldr	r3, [pc, #16]	; (8404 <_usbd_ep_set_in_rdy+0x54>)
    83f4:	4798      	blx	r3
}
    83f6:	bf00      	nop
    83f8:	3708      	adds	r7, #8
    83fa:	46bd      	mov	sp, r7
    83fc:	bd80      	pop	{r7, pc}
    83fe:	bf00      	nop
    8400:	000079bd 	.word	0x000079bd
    8404:	00007a11 	.word	0x00007a11

00008408 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8408:	b580      	push	{r7, lr}
    840a:	b082      	sub	sp, #8
    840c:	af00      	add	r7, sp, #0
    840e:	4603      	mov	r3, r0
    8410:	71fb      	strb	r3, [r7, #7]
    8412:	460b      	mov	r3, r1
    8414:	71bb      	strb	r3, [r7, #6]
    8416:	4613      	mov	r3, r2
    8418:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    841a:	797b      	ldrb	r3, [r7, #5]
    841c:	2b00      	cmp	r3, #0
    841e:	d00b      	beq.n	8438 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8420:	79bb      	ldrb	r3, [r7, #6]
    8422:	2240      	movs	r2, #64	; 0x40
    8424:	fa02 f303 	lsl.w	r3, r2, r3
    8428:	b2da      	uxtb	r2, r3
    842a:	79fb      	ldrb	r3, [r7, #7]
    842c:	4619      	mov	r1, r3
    842e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8432:	4b09      	ldr	r3, [pc, #36]	; (8458 <_usbd_ep_set_out_rdy+0x50>)
    8434:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8436:	e00a      	b.n	844e <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8438:	79bb      	ldrb	r3, [r7, #6]
    843a:	2240      	movs	r2, #64	; 0x40
    843c:	fa02 f303 	lsl.w	r3, r2, r3
    8440:	b2da      	uxtb	r2, r3
    8442:	79fb      	ldrb	r3, [r7, #7]
    8444:	4619      	mov	r1, r3
    8446:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    844a:	4b04      	ldr	r3, [pc, #16]	; (845c <_usbd_ep_set_out_rdy+0x54>)
    844c:	4798      	blx	r3
}
    844e:	bf00      	nop
    8450:	3708      	adds	r7, #8
    8452:	46bd      	mov	sp, r7
    8454:	bd80      	pop	{r7, pc}
    8456:	bf00      	nop
    8458:	00007a11 	.word	0x00007a11
    845c:	000079bd 	.word	0x000079bd

00008460 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8460:	b480      	push	{r7}
    8462:	b083      	sub	sp, #12
    8464:	af00      	add	r7, sp, #0
    8466:	4603      	mov	r3, r0
    8468:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    846a:	88fb      	ldrh	r3, [r7, #6]
    846c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8470:	d820      	bhi.n	84b4 <_usbd_ep_pcksize_size+0x54>
    8472:	88fb      	ldrh	r3, [r7, #6]
    8474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8478:	d81a      	bhi.n	84b0 <_usbd_ep_pcksize_size+0x50>
    847a:	88fb      	ldrh	r3, [r7, #6]
    847c:	2b80      	cmp	r3, #128	; 0x80
    847e:	d815      	bhi.n	84ac <_usbd_ep_pcksize_size+0x4c>
    8480:	88fb      	ldrh	r3, [r7, #6]
    8482:	2b40      	cmp	r3, #64	; 0x40
    8484:	d810      	bhi.n	84a8 <_usbd_ep_pcksize_size+0x48>
    8486:	88fb      	ldrh	r3, [r7, #6]
    8488:	2b20      	cmp	r3, #32
    848a:	d80b      	bhi.n	84a4 <_usbd_ep_pcksize_size+0x44>
    848c:	88fb      	ldrh	r3, [r7, #6]
    848e:	2b10      	cmp	r3, #16
    8490:	d806      	bhi.n	84a0 <_usbd_ep_pcksize_size+0x40>
    8492:	88fb      	ldrh	r3, [r7, #6]
    8494:	2b08      	cmp	r3, #8
    8496:	bf8c      	ite	hi
    8498:	2301      	movhi	r3, #1
    849a:	2300      	movls	r3, #0
    849c:	b2db      	uxtb	r3, r3
    849e:	e00a      	b.n	84b6 <_usbd_ep_pcksize_size+0x56>
    84a0:	2302      	movs	r3, #2
    84a2:	e008      	b.n	84b6 <_usbd_ep_pcksize_size+0x56>
    84a4:	2303      	movs	r3, #3
    84a6:	e006      	b.n	84b6 <_usbd_ep_pcksize_size+0x56>
    84a8:	2304      	movs	r3, #4
    84aa:	e004      	b.n	84b6 <_usbd_ep_pcksize_size+0x56>
    84ac:	2305      	movs	r3, #5
    84ae:	e002      	b.n	84b6 <_usbd_ep_pcksize_size+0x56>
    84b0:	2306      	movs	r3, #6
    84b2:	e000      	b.n	84b6 <_usbd_ep_pcksize_size+0x56>
    84b4:	2307      	movs	r3, #7
}
    84b6:	4618      	mov	r0, r3
    84b8:	370c      	adds	r7, #12
    84ba:	46bd      	mov	sp, r7
    84bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    84c0:	4770      	bx	lr
	...

000084c4 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    84c4:	b480      	push	{r7}
    84c6:	b085      	sub	sp, #20
    84c8:	af00      	add	r7, sp, #0
    84ca:	4603      	mov	r3, r0
    84cc:	460a      	mov	r2, r1
    84ce:	71fb      	strb	r3, [r7, #7]
    84d0:	4613      	mov	r3, r2
    84d2:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    84d4:	79fb      	ldrb	r3, [r7, #7]
    84d6:	2b00      	cmp	r3, #0
    84d8:	d008      	beq.n	84ec <_usb_d_dev_ept+0x28>
    84da:	79bb      	ldrb	r3, [r7, #6]
    84dc:	2b00      	cmp	r3, #0
    84de:	d003      	beq.n	84e8 <_usb_d_dev_ept+0x24>
    84e0:	79fb      	ldrb	r3, [r7, #7]
    84e2:	3304      	adds	r3, #4
    84e4:	b2db      	uxtb	r3, r3
    84e6:	e002      	b.n	84ee <_usb_d_dev_ept+0x2a>
    84e8:	79fb      	ldrb	r3, [r7, #7]
    84ea:	e000      	b.n	84ee <_usb_d_dev_ept+0x2a>
    84ec:	2300      	movs	r3, #0
    84ee:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    84f0:	7bfa      	ldrb	r2, [r7, #15]
    84f2:	4613      	mov	r3, r2
    84f4:	009b      	lsls	r3, r3, #2
    84f6:	4413      	add	r3, r2
    84f8:	009b      	lsls	r3, r3, #2
    84fa:	3310      	adds	r3, #16
    84fc:	4a04      	ldr	r2, [pc, #16]	; (8510 <_usb_d_dev_ept+0x4c>)
    84fe:	4413      	add	r3, r2
    8500:	3304      	adds	r3, #4
}
    8502:	4618      	mov	r0, r3
    8504:	3714      	adds	r7, #20
    8506:	46bd      	mov	sp, r7
    8508:	f85d 7b04 	ldr.w	r7, [sp], #4
    850c:	4770      	bx	lr
    850e:	bf00      	nop
    8510:	200008e0 	.word	0x200008e0

00008514 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    8514:	b580      	push	{r7, lr}
    8516:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    8518:	2104      	movs	r1, #4
    851a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    851e:	4b03      	ldr	r3, [pc, #12]	; (852c <_usb_d_dev_sof+0x18>)
    8520:	4798      	blx	r3
	dev_inst.callbacks.sof();
    8522:	4b03      	ldr	r3, [pc, #12]	; (8530 <_usb_d_dev_sof+0x1c>)
    8524:	681b      	ldr	r3, [r3, #0]
    8526:	4798      	blx	r3
}
    8528:	bf00      	nop
    852a:	bd80      	pop	{r7, pc}
    852c:	00007b8b 	.word	0x00007b8b
    8530:	200008e0 	.word	0x200008e0

00008534 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8534:	b580      	push	{r7, lr}
    8536:	b084      	sub	sp, #16
    8538:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    853a:	2300      	movs	r3, #0
    853c:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    853e:	f240 2101 	movw	r1, #513	; 0x201
    8542:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8546:	4b1a      	ldr	r3, [pc, #104]	; (85b0 <_usb_d_dev_lpmsusp+0x7c>)
    8548:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    854a:	f240 2101 	movw	r1, #513	; 0x201
    854e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8552:	4b18      	ldr	r3, [pc, #96]	; (85b4 <_usb_d_dev_lpmsusp+0x80>)
    8554:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8556:	2170      	movs	r1, #112	; 0x70
    8558:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    855c:	4b16      	ldr	r3, [pc, #88]	; (85b8 <_usb_d_dev_lpmsusp+0x84>)
    855e:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8560:	2300      	movs	r3, #0
    8562:	73fb      	strb	r3, [r7, #15]
    8564:	e018      	b.n	8598 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8566:	7bfb      	ldrb	r3, [r7, #15]
    8568:	015b      	lsls	r3, r3, #5
    856a:	4a14      	ldr	r2, [pc, #80]	; (85bc <_usb_d_dev_lpmsusp+0x88>)
    856c:	4413      	add	r3, r2
    856e:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8570:	687b      	ldr	r3, [r7, #4]
    8572:	891b      	ldrh	r3, [r3, #8]
    8574:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8578:	b2db      	uxtb	r3, r3
    857a:	2b03      	cmp	r3, #3
    857c:	d109      	bne.n	8592 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    857e:	687b      	ldr	r3, [r7, #4]
    8580:	891b      	ldrh	r3, [r3, #8]
    8582:	f3c3 130a 	ubfx	r3, r3, #4, #11
    8586:	b29b      	uxth	r3, r3
    8588:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    858a:	687b      	ldr	r3, [r7, #4]
    858c:	2200      	movs	r2, #0
    858e:	811a      	strh	r2, [r3, #8]
			break;
    8590:	e005      	b.n	859e <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8592:	7bfb      	ldrb	r3, [r7, #15]
    8594:	3301      	adds	r3, #1
    8596:	73fb      	strb	r3, [r7, #15]
    8598:	7bfb      	ldrb	r3, [r7, #15]
    859a:	2b03      	cmp	r3, #3
    859c:	d9e3      	bls.n	8566 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    859e:	4b08      	ldr	r3, [pc, #32]	; (85c0 <_usb_d_dev_lpmsusp+0x8c>)
    85a0:	685b      	ldr	r3, [r3, #4]
    85a2:	68b9      	ldr	r1, [r7, #8]
    85a4:	2003      	movs	r0, #3
    85a6:	4798      	blx	r3
}
    85a8:	bf00      	nop
    85aa:	3710      	adds	r7, #16
    85ac:	46bd      	mov	sp, r7
    85ae:	bd80      	pop	{r7, pc}
    85b0:	00007b8b 	.word	0x00007b8b
    85b4:	00007be1 	.word	0x00007be1
    85b8:	00007ba9 	.word	0x00007ba9
    85bc:	200009a8 	.word	0x200009a8
    85c0:	200008e0 	.word	0x200008e0

000085c4 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    85c4:	b580      	push	{r7, lr}
    85c6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    85c8:	2180      	movs	r1, #128	; 0x80
    85ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    85ce:	4b04      	ldr	r3, [pc, #16]	; (85e0 <_usb_d_dev_ramerr+0x1c>)
    85d0:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    85d2:	4b04      	ldr	r3, [pc, #16]	; (85e4 <_usb_d_dev_ramerr+0x20>)
    85d4:	685b      	ldr	r3, [r3, #4]
    85d6:	2100      	movs	r1, #0
    85d8:	2005      	movs	r0, #5
    85da:	4798      	blx	r3
}
    85dc:	bf00      	nop
    85de:	bd80      	pop	{r7, pc}
    85e0:	00007b8b 	.word	0x00007b8b
    85e4:	200008e0 	.word	0x200008e0

000085e8 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    85e8:	b580      	push	{r7, lr}
    85ea:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    85ec:	2170      	movs	r1, #112	; 0x70
    85ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    85f2:	4b0b      	ldr	r3, [pc, #44]	; (8620 <_usb_d_dev_wakeup+0x38>)
    85f4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    85f6:	2170      	movs	r1, #112	; 0x70
    85f8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    85fc:	4b09      	ldr	r3, [pc, #36]	; (8624 <_usb_d_dev_wakeup+0x3c>)
    85fe:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8600:	f240 2101 	movw	r1, #513	; 0x201
    8604:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8608:	4b07      	ldr	r3, [pc, #28]	; (8628 <_usb_d_dev_wakeup+0x40>)
    860a:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    860c:	2000      	movs	r0, #0
    860e:	4b07      	ldr	r3, [pc, #28]	; (862c <_usb_d_dev_wakeup+0x44>)
    8610:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8612:	4b07      	ldr	r3, [pc, #28]	; (8630 <_usb_d_dev_wakeup+0x48>)
    8614:	685b      	ldr	r3, [r3, #4]
    8616:	2100      	movs	r1, #0
    8618:	2002      	movs	r0, #2
    861a:	4798      	blx	r3
}
    861c:	bf00      	nop
    861e:	bd80      	pop	{r7, pc}
    8620:	00007b8b 	.word	0x00007b8b
    8624:	00007be1 	.word	0x00007be1
    8628:	00007ba9 	.word	0x00007ba9
    862c:	00007e89 	.word	0x00007e89
    8630:	200008e0 	.word	0x200008e0

00008634 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    8634:	b580      	push	{r7, lr}
    8636:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    8638:	2200      	movs	r2, #0
    863a:	2100      	movs	r1, #0
    863c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8640:	4b0d      	ldr	r3, [pc, #52]	; (8678 <_usb_d_dev_reset+0x44>)
    8642:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    8644:	2108      	movs	r1, #8
    8646:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    864a:	4b0c      	ldr	r3, [pc, #48]	; (867c <_usb_d_dev_reset+0x48>)
    864c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    864e:	2170      	movs	r1, #112	; 0x70
    8650:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8654:	4b0a      	ldr	r3, [pc, #40]	; (8680 <_usb_d_dev_reset+0x4c>)
    8656:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8658:	f240 2101 	movw	r1, #513	; 0x201
    865c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8660:	4b08      	ldr	r3, [pc, #32]	; (8684 <_usb_d_dev_reset+0x50>)
    8662:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8664:	4b08      	ldr	r3, [pc, #32]	; (8688 <_usb_d_dev_reset+0x54>)
    8666:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8668:	4b08      	ldr	r3, [pc, #32]	; (868c <_usb_d_dev_reset+0x58>)
    866a:	685b      	ldr	r3, [r3, #4]
    866c:	2100      	movs	r1, #0
    866e:	2001      	movs	r0, #1
    8670:	4798      	blx	r3
}
    8672:	bf00      	nop
    8674:	bd80      	pop	{r7, pc}
    8676:	bf00      	nop
    8678:	00007b21 	.word	0x00007b21
    867c:	00007b8b 	.word	0x00007b8b
    8680:	00007be1 	.word	0x00007be1
    8684:	00007ba9 	.word	0x00007ba9
    8688:	000091f1 	.word	0x000091f1
    868c:	200008e0 	.word	0x200008e0

00008690 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    8690:	b580      	push	{r7, lr}
    8692:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8694:	f240 2101 	movw	r1, #513	; 0x201
    8698:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    869c:	4b09      	ldr	r3, [pc, #36]	; (86c4 <_usb_d_dev_suspend+0x34>)
    869e:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    86a0:	f240 2101 	movw	r1, #513	; 0x201
    86a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    86a8:	4b07      	ldr	r3, [pc, #28]	; (86c8 <_usb_d_dev_suspend+0x38>)
    86aa:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    86ac:	2170      	movs	r1, #112	; 0x70
    86ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    86b2:	4b06      	ldr	r3, [pc, #24]	; (86cc <_usb_d_dev_suspend+0x3c>)
    86b4:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    86b6:	4b06      	ldr	r3, [pc, #24]	; (86d0 <_usb_d_dev_suspend+0x40>)
    86b8:	685b      	ldr	r3, [r3, #4]
    86ba:	2100      	movs	r1, #0
    86bc:	2004      	movs	r0, #4
    86be:	4798      	blx	r3
}
    86c0:	bf00      	nop
    86c2:	bd80      	pop	{r7, pc}
    86c4:	00007b8b 	.word	0x00007b8b
    86c8:	00007be1 	.word	0x00007be1
    86cc:	00007ba9 	.word	0x00007ba9
    86d0:	200008e0 	.word	0x200008e0

000086d4 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    86d4:	b580      	push	{r7, lr}
    86d6:	b082      	sub	sp, #8
    86d8:	af00      	add	r7, sp, #0
	bool     rc    = true;
    86da:	2301      	movs	r3, #1
    86dc:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    86de:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    86e2:	4b22      	ldr	r3, [pc, #136]	; (876c <_usb_d_dev_handle_nep+0x98>)
    86e4:	4798      	blx	r3
    86e6:	4603      	mov	r3, r0
    86e8:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    86ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    86ee:	4b20      	ldr	r3, [pc, #128]	; (8770 <_usb_d_dev_handle_nep+0x9c>)
    86f0:	4798      	blx	r3
    86f2:	4603      	mov	r3, r0
    86f4:	461a      	mov	r2, r3
    86f6:	88bb      	ldrh	r3, [r7, #4]
    86f8:	4013      	ands	r3, r2
    86fa:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    86fc:	88bb      	ldrh	r3, [r7, #4]
    86fe:	f003 0304 	and.w	r3, r3, #4
    8702:	2b00      	cmp	r3, #0
    8704:	d003      	beq.n	870e <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    8706:	4b1b      	ldr	r3, [pc, #108]	; (8774 <_usb_d_dev_handle_nep+0xa0>)
    8708:	4798      	blx	r3
		return true;
    870a:	2301      	movs	r3, #1
    870c:	e02a      	b.n	8764 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    870e:	88bb      	ldrh	r3, [r7, #4]
    8710:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8714:	2b00      	cmp	r3, #0
    8716:	d002      	beq.n	871e <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    8718:	4b17      	ldr	r3, [pc, #92]	; (8778 <_usb_d_dev_handle_nep+0xa4>)
    871a:	4798      	blx	r3
    871c:	e021      	b.n	8762 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    871e:	88bb      	ldrh	r3, [r7, #4]
    8720:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8724:	2b00      	cmp	r3, #0
    8726:	d002      	beq.n	872e <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    8728:	4b14      	ldr	r3, [pc, #80]	; (877c <_usb_d_dev_handle_nep+0xa8>)
    872a:	4798      	blx	r3
    872c:	e019      	b.n	8762 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    872e:	88bb      	ldrh	r3, [r7, #4]
    8730:	f003 0370 	and.w	r3, r3, #112	; 0x70
    8734:	2b00      	cmp	r3, #0
    8736:	d002      	beq.n	873e <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    8738:	4b11      	ldr	r3, [pc, #68]	; (8780 <_usb_d_dev_handle_nep+0xac>)
    873a:	4798      	blx	r3
    873c:	e011      	b.n	8762 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    873e:	88bb      	ldrh	r3, [r7, #4]
    8740:	f003 0308 	and.w	r3, r3, #8
    8744:	2b00      	cmp	r3, #0
    8746:	d002      	beq.n	874e <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    8748:	4b0e      	ldr	r3, [pc, #56]	; (8784 <_usb_d_dev_handle_nep+0xb0>)
    874a:	4798      	blx	r3
    874c:	e009      	b.n	8762 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    874e:	88bb      	ldrh	r3, [r7, #4]
    8750:	f003 0301 	and.w	r3, r3, #1
    8754:	2b00      	cmp	r3, #0
    8756:	d002      	beq.n	875e <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    8758:	4b0b      	ldr	r3, [pc, #44]	; (8788 <_usb_d_dev_handle_nep+0xb4>)
    875a:	4798      	blx	r3
    875c:	e001      	b.n	8762 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    875e:	2300      	movs	r3, #0
    8760:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    8762:	79fb      	ldrb	r3, [r7, #7]
}
    8764:	4618      	mov	r0, r3
    8766:	3708      	adds	r7, #8
    8768:	46bd      	mov	sp, r7
    876a:	bd80      	pop	{r7, pc}
    876c:	00007b71 	.word	0x00007b71
    8770:	00007bc7 	.word	0x00007bc7
    8774:	00008515 	.word	0x00008515
    8778:	00008535 	.word	0x00008535
    877c:	000085c5 	.word	0x000085c5
    8780:	000085e9 	.word	0x000085e9
    8784:	00008635 	.word	0x00008635
    8788:	00008691 	.word	0x00008691

0000878c <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    878c:	b590      	push	{r4, r7, lr}
    878e:	b089      	sub	sp, #36	; 0x24
    8790:	af00      	add	r7, sp, #0
    8792:	6078      	str	r0, [r7, #4]
    8794:	460b      	mov	r3, r1
    8796:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    8798:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    879c:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    879e:	687b      	ldr	r3, [r7, #4]
    87a0:	7c9b      	ldrb	r3, [r3, #18]
    87a2:	f003 030f 	and.w	r3, r3, #15
    87a6:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    87a8:	7dfb      	ldrb	r3, [r7, #23]
    87aa:	015b      	lsls	r3, r3, #5
    87ac:	4a73      	ldr	r2, [pc, #460]	; (897c <_usb_d_dev_in_next+0x1f0>)
    87ae:	4413      	add	r3, r2
    87b0:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    87b2:	78fb      	ldrb	r3, [r7, #3]
    87b4:	2b00      	cmp	r3, #0
    87b6:	d006      	beq.n	87c6 <_usb_d_dev_in_next+0x3a>
    87b8:	693b      	ldr	r3, [r7, #16]
    87ba:	3310      	adds	r3, #16
    87bc:	685b      	ldr	r3, [r3, #4]
    87be:	f3c3 030d 	ubfx	r3, r3, #0, #14
    87c2:	b29b      	uxth	r3, r3
    87c4:	e000      	b.n	87c8 <_usb_d_dev_in_next+0x3c>
    87c6:	2300      	movs	r3, #0
    87c8:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    87ca:	687b      	ldr	r3, [r7, #4]
    87cc:	8a1b      	ldrh	r3, [r3, #16]
    87ce:	f240 32ff 	movw	r2, #1023	; 0x3ff
    87d2:	4293      	cmp	r3, r2
    87d4:	d103      	bne.n	87de <_usb_d_dev_in_next+0x52>
    87d6:	687b      	ldr	r3, [r7, #4]
    87d8:	8a1b      	ldrh	r3, [r3, #16]
    87da:	b21b      	sxth	r3, r3
    87dc:	e004      	b.n	87e8 <_usb_d_dev_in_next+0x5c>
    87de:	687b      	ldr	r3, [r7, #4]
    87e0:	8a1b      	ldrh	r3, [r3, #16]
    87e2:	3b01      	subs	r3, #1
    87e4:	b29b      	uxth	r3, r3
    87e6:	b21b      	sxth	r3, r3
    87e8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    87ec:	4013      	ands	r3, r2
    87ee:	b21b      	sxth	r3, r3
    87f0:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    87f2:	2300      	movs	r3, #0
    87f4:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    87f6:	687b      	ldr	r3, [r7, #4]
    87f8:	7cdb      	ldrb	r3, [r3, #19]
    87fa:	f003 0307 	and.w	r3, r3, #7
    87fe:	b2db      	uxtb	r3, r3
    8800:	2b01      	cmp	r3, #1
    8802:	bf0c      	ite	eq
    8804:	2301      	moveq	r3, #1
    8806:	2300      	movne	r3, #0
    8808:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    880a:	78fb      	ldrb	r3, [r7, #3]
    880c:	2b00      	cmp	r3, #0
    880e:	d004      	beq.n	881a <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    8810:	7dfb      	ldrb	r3, [r7, #23]
    8812:	2101      	movs	r1, #1
    8814:	4618      	mov	r0, r3
    8816:	4b5a      	ldr	r3, [pc, #360]	; (8980 <_usb_d_dev_in_next+0x1f4>)
    8818:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    881a:	687b      	ldr	r3, [r7, #4]
    881c:	689a      	ldr	r2, [r3, #8]
    881e:	89fb      	ldrh	r3, [r7, #14]
    8820:	441a      	add	r2, r3
    8822:	687b      	ldr	r3, [r7, #4]
    8824:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    8826:	687b      	ldr	r3, [r7, #4]
    8828:	689a      	ldr	r2, [r3, #8]
    882a:	687b      	ldr	r3, [r7, #4]
    882c:	685b      	ldr	r3, [r3, #4]
    882e:	429a      	cmp	r2, r3
    8830:	d243      	bcs.n	88ba <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    8832:	687b      	ldr	r3, [r7, #4]
    8834:	685b      	ldr	r3, [r3, #4]
    8836:	b29a      	uxth	r2, r3
    8838:	687b      	ldr	r3, [r7, #4]
    883a:	689b      	ldr	r3, [r3, #8]
    883c:	b29b      	uxth	r3, r3
    883e:	1ad3      	subs	r3, r2, r3
    8840:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    8842:	687b      	ldr	r3, [r7, #4]
    8844:	7cdb      	ldrb	r3, [r3, #19]
    8846:	f003 0320 	and.w	r3, r3, #32
    884a:	b2db      	uxtb	r3, r3
    884c:	2b00      	cmp	r3, #0
    884e:	d01b      	beq.n	8888 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    8850:	687b      	ldr	r3, [r7, #4]
    8852:	8a1b      	ldrh	r3, [r3, #16]
    8854:	8bfa      	ldrh	r2, [r7, #30]
    8856:	429a      	cmp	r2, r3
    8858:	d902      	bls.n	8860 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    885a:	687b      	ldr	r3, [r7, #4]
    885c:	8a1b      	ldrh	r3, [r3, #16]
    885e:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8860:	687b      	ldr	r3, [r7, #4]
    8862:	68d8      	ldr	r0, [r3, #12]
    8864:	687b      	ldr	r3, [r7, #4]
    8866:	681a      	ldr	r2, [r3, #0]
    8868:	687b      	ldr	r3, [r7, #4]
    886a:	689b      	ldr	r3, [r3, #8]
    886c:	4413      	add	r3, r2
    886e:	8bfa      	ldrh	r2, [r7, #30]
    8870:	4619      	mov	r1, r3
    8872:	4b44      	ldr	r3, [pc, #272]	; (8984 <_usb_d_dev_in_next+0x1f8>)
    8874:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8876:	687b      	ldr	r3, [r7, #4]
    8878:	68db      	ldr	r3, [r3, #12]
    887a:	461a      	mov	r2, r3
    887c:	7dfb      	ldrb	r3, [r7, #23]
    887e:	2101      	movs	r1, #1
    8880:	4618      	mov	r0, r3
    8882:	4b41      	ldr	r3, [pc, #260]	; (8988 <_usb_d_dev_in_next+0x1fc>)
    8884:	4798      	blx	r3
    8886:	e011      	b.n	88ac <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    8888:	8bfb      	ldrh	r3, [r7, #30]
    888a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    888e:	d902      	bls.n	8896 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    8890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8894:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8896:	687b      	ldr	r3, [r7, #4]
    8898:	681a      	ldr	r2, [r3, #0]
    889a:	687b      	ldr	r3, [r7, #4]
    889c:	689b      	ldr	r3, [r3, #8]
    889e:	4413      	add	r3, r2
    88a0:	461a      	mov	r2, r3
    88a2:	7dfb      	ldrb	r3, [r7, #23]
    88a4:	2101      	movs	r1, #1
    88a6:	4618      	mov	r0, r3
    88a8:	4b37      	ldr	r3, [pc, #220]	; (8988 <_usb_d_dev_in_next+0x1fc>)
    88aa:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    88ac:	8bfa      	ldrh	r2, [r7, #30]
    88ae:	7df8      	ldrb	r0, [r7, #23]
    88b0:	2300      	movs	r3, #0
    88b2:	2101      	movs	r1, #1
    88b4:	4c35      	ldr	r4, [pc, #212]	; (898c <_usb_d_dev_in_next+0x200>)
    88b6:	47a0      	blx	r4
		goto _in_tx_exec;
    88b8:	e041      	b.n	893e <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    88ba:	687b      	ldr	r3, [r7, #4]
    88bc:	7cdb      	ldrb	r3, [r3, #19]
    88be:	f003 0310 	and.w	r3, r3, #16
    88c2:	b2db      	uxtb	r3, r3
    88c4:	2b00      	cmp	r3, #0
    88c6:	d00b      	beq.n	88e0 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    88c8:	687a      	ldr	r2, [r7, #4]
    88ca:	7cd3      	ldrb	r3, [r2, #19]
    88cc:	f36f 1304 	bfc	r3, #4, #1
    88d0:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    88d2:	7df8      	ldrb	r0, [r7, #23]
    88d4:	2300      	movs	r3, #0
    88d6:	2200      	movs	r2, #0
    88d8:	2101      	movs	r1, #1
    88da:	4c2c      	ldr	r4, [pc, #176]	; (898c <_usb_d_dev_in_next+0x200>)
    88dc:	47a0      	blx	r4
		goto _in_tx_exec;
    88de:	e02e      	b.n	893e <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    88e0:	7afb      	ldrb	r3, [r7, #11]
    88e2:	2b00      	cmp	r3, #0
    88e4:	d006      	beq.n	88f4 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    88e6:	7dfb      	ldrb	r3, [r7, #23]
    88e8:	224b      	movs	r2, #75	; 0x4b
    88ea:	4619      	mov	r1, r3
    88ec:	69b8      	ldr	r0, [r7, #24]
    88ee:	4b28      	ldr	r3, [pc, #160]	; (8990 <_usb_d_dev_in_next+0x204>)
    88f0:	4798      	blx	r3
    88f2:	e005      	b.n	8900 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    88f4:	7dfb      	ldrb	r3, [r7, #23]
    88f6:	224a      	movs	r2, #74	; 0x4a
    88f8:	4619      	mov	r1, r3
    88fa:	69b8      	ldr	r0, [r7, #24]
    88fc:	4b24      	ldr	r3, [pc, #144]	; (8990 <_usb_d_dev_in_next+0x204>)
    88fe:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    8900:	687b      	ldr	r3, [r7, #4]
    8902:	8a1b      	ldrh	r3, [r3, #16]
    8904:	89ba      	ldrh	r2, [r7, #12]
    8906:	429a      	cmp	r2, r3
    8908:	d114      	bne.n	8934 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    890a:	687a      	ldr	r2, [r7, #4]
    890c:	7cd3      	ldrb	r3, [r2, #19]
    890e:	f36f 1386 	bfc	r3, #6, #1
    8912:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8914:	4b1f      	ldr	r3, [pc, #124]	; (8994 <_usb_d_dev_in_next+0x208>)
    8916:	68db      	ldr	r3, [r3, #12]
    8918:	687a      	ldr	r2, [r7, #4]
    891a:	7c90      	ldrb	r0, [r2, #18]
    891c:	687a      	ldr	r2, [r7, #4]
    891e:	6892      	ldr	r2, [r2, #8]
    8920:	4611      	mov	r1, r2
    8922:	4798      	blx	r3
    8924:	4603      	mov	r3, r0
    8926:	2b00      	cmp	r3, #0
    8928:	d124      	bne.n	8974 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    892a:	687a      	ldr	r2, [r7, #4]
    892c:	7cd3      	ldrb	r3, [r2, #19]
    892e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8932:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8934:	2100      	movs	r1, #0
    8936:	6878      	ldr	r0, [r7, #4]
    8938:	4b17      	ldr	r3, [pc, #92]	; (8998 <_usb_d_dev_in_next+0x20c>)
    893a:	4798      	blx	r3
	return;
    893c:	e01b      	b.n	8976 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    893e:	78fb      	ldrb	r3, [r7, #3]
    8940:	f083 0301 	eor.w	r3, r3, #1
    8944:	b2db      	uxtb	r3, r3
    8946:	2b00      	cmp	r3, #0
    8948:	d00d      	beq.n	8966 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    894a:	7afb      	ldrb	r3, [r7, #11]
    894c:	2b00      	cmp	r3, #0
    894e:	d002      	beq.n	8956 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    8950:	234e      	movs	r3, #78	; 0x4e
    8952:	777b      	strb	r3, [r7, #29]
    8954:	e001      	b.n	895a <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    8956:	234a      	movs	r3, #74	; 0x4a
    8958:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    895a:	7f7a      	ldrb	r2, [r7, #29]
    895c:	7dfb      	ldrb	r3, [r7, #23]
    895e:	4619      	mov	r1, r3
    8960:	69b8      	ldr	r0, [r7, #24]
    8962:	4b0e      	ldr	r3, [pc, #56]	; (899c <_usb_d_dev_in_next+0x210>)
    8964:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    8966:	7dfb      	ldrb	r3, [r7, #23]
    8968:	2201      	movs	r2, #1
    896a:	2101      	movs	r1, #1
    896c:	4618      	mov	r0, r3
    896e:	4b0c      	ldr	r3, [pc, #48]	; (89a0 <_usb_d_dev_in_next+0x214>)
    8970:	4798      	blx	r3
    8972:	e000      	b.n	8976 <_usb_d_dev_in_next+0x1ea>
			return;
    8974:	bf00      	nop
}
    8976:	3724      	adds	r7, #36	; 0x24
    8978:	46bd      	mov	sp, r7
    897a:	bd90      	pop	{r4, r7, pc}
    897c:	200009a8 	.word	0x200009a8
    8980:	00008185 	.word	0x00008185
    8984:	0000c885 	.word	0x0000c885
    8988:	000081b1 	.word	0x000081b1
    898c:	000082f9 	.word	0x000082f9
    8990:	00007a91 	.word	0x00007a91
    8994:	200008e0 	.word	0x200008e0
    8998:	00009ab5 	.word	0x00009ab5
    899c:	00007a65 	.word	0x00007a65
    89a0:	000083b1 	.word	0x000083b1

000089a4 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    89a4:	b590      	push	{r4, r7, lr}
    89a6:	b08b      	sub	sp, #44	; 0x2c
    89a8:	af00      	add	r7, sp, #0
    89aa:	6078      	str	r0, [r7, #4]
    89ac:	460b      	mov	r3, r1
    89ae:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    89b0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    89b4:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    89b6:	687b      	ldr	r3, [r7, #4]
    89b8:	7c9b      	ldrb	r3, [r3, #18]
    89ba:	f003 030f 	and.w	r3, r3, #15
    89be:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    89c0:	7ffb      	ldrb	r3, [r7, #31]
    89c2:	015b      	lsls	r3, r3, #5
    89c4:	4a94      	ldr	r2, [pc, #592]	; (8c18 <_usb_d_dev_out_next+0x274>)
    89c6:	4413      	add	r3, r2
    89c8:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    89ca:	78fb      	ldrb	r3, [r7, #3]
    89cc:	2b00      	cmp	r3, #0
    89ce:	d005      	beq.n	89dc <_usb_d_dev_out_next+0x38>
    89d0:	69bb      	ldr	r3, [r7, #24]
    89d2:	685b      	ldr	r3, [r3, #4]
    89d4:	f3c3 338d 	ubfx	r3, r3, #14, #14
    89d8:	b29b      	uxth	r3, r3
    89da:	e000      	b.n	89de <_usb_d_dev_out_next+0x3a>
    89dc:	2300      	movs	r3, #0
    89de:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    89e0:	78fb      	ldrb	r3, [r7, #3]
    89e2:	2b00      	cmp	r3, #0
    89e4:	d005      	beq.n	89f2 <_usb_d_dev_out_next+0x4e>
    89e6:	69bb      	ldr	r3, [r7, #24]
    89e8:	685b      	ldr	r3, [r3, #4]
    89ea:	f3c3 030d 	ubfx	r3, r3, #0, #14
    89ee:	b29b      	uxth	r3, r3
    89f0:	e000      	b.n	89f4 <_usb_d_dev_out_next+0x50>
    89f2:	2300      	movs	r3, #0
    89f4:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    89f6:	687b      	ldr	r3, [r7, #4]
    89f8:	8a1b      	ldrh	r3, [r3, #16]
    89fa:	f240 32ff 	movw	r2, #1023	; 0x3ff
    89fe:	4293      	cmp	r3, r2
    8a00:	d004      	beq.n	8a0c <_usb_d_dev_out_next+0x68>
    8a02:	687b      	ldr	r3, [r7, #4]
    8a04:	8a1b      	ldrh	r3, [r3, #16]
    8a06:	3b01      	subs	r3, #1
    8a08:	b29b      	uxth	r3, r3
    8a0a:	e001      	b.n	8a10 <_usb_d_dev_out_next+0x6c>
    8a0c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8a10:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    8a12:	8aba      	ldrh	r2, [r7, #20]
    8a14:	8a7b      	ldrh	r3, [r7, #18]
    8a16:	4013      	ands	r3, r2
    8a18:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8a1a:	687b      	ldr	r3, [r7, #4]
    8a1c:	7cdb      	ldrb	r3, [r3, #19]
    8a1e:	f003 0307 	and.w	r3, r3, #7
    8a22:	b2db      	uxtb	r3, r3
    8a24:	2b01      	cmp	r3, #1
    8a26:	bf0c      	ite	eq
    8a28:	2301      	moveq	r3, #1
    8a2a:	2300      	movne	r3, #0
    8a2c:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    8a2e:	78fb      	ldrb	r3, [r7, #3]
    8a30:	2b00      	cmp	r3, #0
    8a32:	d004      	beq.n	8a3e <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    8a34:	7ffb      	ldrb	r3, [r7, #31]
    8a36:	2100      	movs	r1, #0
    8a38:	4618      	mov	r0, r3
    8a3a:	4b78      	ldr	r3, [pc, #480]	; (8c1c <_usb_d_dev_out_next+0x278>)
    8a3c:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8a3e:	687b      	ldr	r3, [r7, #4]
    8a40:	7cdb      	ldrb	r3, [r3, #19]
    8a42:	f003 0320 	and.w	r3, r3, #32
    8a46:	b2db      	uxtb	r3, r3
    8a48:	2b00      	cmp	r3, #0
    8a4a:	d01c      	beq.n	8a86 <_usb_d_dev_out_next+0xe2>
    8a4c:	687b      	ldr	r3, [r7, #4]
    8a4e:	685b      	ldr	r3, [r3, #4]
    8a50:	2b00      	cmp	r3, #0
    8a52:	d018      	beq.n	8a86 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8a54:	687b      	ldr	r3, [r7, #4]
    8a56:	685b      	ldr	r3, [r3, #4]
    8a58:	b29a      	uxth	r2, r3
    8a5a:	687b      	ldr	r3, [r7, #4]
    8a5c:	689b      	ldr	r3, [r3, #8]
    8a5e:	b29b      	uxth	r3, r3
    8a60:	1ad3      	subs	r3, r2, r3
    8a62:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8a64:	687b      	ldr	r3, [r7, #4]
    8a66:	681a      	ldr	r2, [r3, #0]
    8a68:	687b      	ldr	r3, [r7, #4]
    8a6a:	689b      	ldr	r3, [r3, #8]
    8a6c:	18d0      	adds	r0, r2, r3
    8a6e:	687b      	ldr	r3, [r7, #4]
    8a70:	68d9      	ldr	r1, [r3, #12]
    8a72:	89ba      	ldrh	r2, [r7, #12]
    8a74:	8a3b      	ldrh	r3, [r7, #16]
    8a76:	429a      	cmp	r2, r3
    8a78:	d901      	bls.n	8a7e <_usb_d_dev_out_next+0xda>
    8a7a:	8a3b      	ldrh	r3, [r7, #16]
    8a7c:	e000      	b.n	8a80 <_usb_d_dev_out_next+0xdc>
    8a7e:	89bb      	ldrh	r3, [r7, #12]
    8a80:	461a      	mov	r2, r3
    8a82:	4b67      	ldr	r3, [pc, #412]	; (8c20 <_usb_d_dev_out_next+0x27c>)
    8a84:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8a86:	687b      	ldr	r3, [r7, #4]
    8a88:	685b      	ldr	r3, [r3, #4]
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	d121      	bne.n	8ad2 <_usb_d_dev_out_next+0x12e>
    8a8e:	687b      	ldr	r3, [r7, #4]
    8a90:	7cdb      	ldrb	r3, [r3, #19]
    8a92:	f003 0310 	and.w	r3, r3, #16
    8a96:	b2db      	uxtb	r3, r3
    8a98:	2b00      	cmp	r3, #0
    8a9a:	d01a      	beq.n	8ad2 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    8a9c:	687a      	ldr	r2, [r7, #4]
    8a9e:	7cd3      	ldrb	r3, [r2, #19]
    8aa0:	f36f 1304 	bfc	r3, #4, #1
    8aa4:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    8aa6:	687a      	ldr	r2, [r7, #4]
    8aa8:	7cd3      	ldrb	r3, [r2, #19]
    8aaa:	f043 0320 	orr.w	r3, r3, #32
    8aae:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8ab0:	687b      	ldr	r3, [r7, #4]
    8ab2:	68db      	ldr	r3, [r3, #12]
    8ab4:	461a      	mov	r2, r3
    8ab6:	7ffb      	ldrb	r3, [r7, #31]
    8ab8:	2100      	movs	r1, #0
    8aba:	4618      	mov	r0, r3
    8abc:	4b59      	ldr	r3, [pc, #356]	; (8c24 <_usb_d_dev_out_next+0x280>)
    8abe:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8ac0:	687b      	ldr	r3, [r7, #4]
    8ac2:	8a1b      	ldrh	r3, [r3, #16]
    8ac4:	461a      	mov	r2, r3
    8ac6:	7ff8      	ldrb	r0, [r7, #31]
    8ac8:	2300      	movs	r3, #0
    8aca:	2100      	movs	r1, #0
    8acc:	4c56      	ldr	r4, [pc, #344]	; (8c28 <_usb_d_dev_out_next+0x284>)
    8ace:	47a0      	blx	r4
		goto _out_rx_exec;
    8ad0:	e090      	b.n	8bf4 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    8ad2:	78fb      	ldrb	r3, [r7, #3]
    8ad4:	2b00      	cmp	r3, #0
    8ad6:	d010      	beq.n	8afa <_usb_d_dev_out_next+0x156>
    8ad8:	687b      	ldr	r3, [r7, #4]
    8ada:	8a1b      	ldrh	r3, [r3, #16]
    8adc:	8a3a      	ldrh	r2, [r7, #16]
    8ade:	429a      	cmp	r2, r3
    8ae0:	d20b      	bcs.n	8afa <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    8ae2:	687a      	ldr	r2, [r7, #4]
    8ae4:	7cd3      	ldrb	r3, [r2, #19]
    8ae6:	f36f 1304 	bfc	r3, #4, #1
    8aea:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    8aec:	687b      	ldr	r3, [r7, #4]
    8aee:	689a      	ldr	r2, [r3, #8]
    8af0:	8abb      	ldrh	r3, [r7, #20]
    8af2:	441a      	add	r2, r3
    8af4:	687b      	ldr	r3, [r7, #4]
    8af6:	609a      	str	r2, [r3, #8]
    8af8:	e05c      	b.n	8bb4 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    8afa:	687b      	ldr	r3, [r7, #4]
    8afc:	689a      	ldr	r2, [r3, #8]
    8afe:	8afb      	ldrh	r3, [r7, #22]
    8b00:	441a      	add	r2, r3
    8b02:	687b      	ldr	r3, [r7, #4]
    8b04:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    8b06:	687b      	ldr	r3, [r7, #4]
    8b08:	689a      	ldr	r2, [r3, #8]
    8b0a:	687b      	ldr	r3, [r7, #4]
    8b0c:	685b      	ldr	r3, [r3, #4]
    8b0e:	429a      	cmp	r2, r3
    8b10:	d250      	bcs.n	8bb4 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    8b12:	687b      	ldr	r3, [r7, #4]
    8b14:	685b      	ldr	r3, [r3, #4]
    8b16:	b29a      	uxth	r2, r3
    8b18:	687b      	ldr	r3, [r7, #4]
    8b1a:	689b      	ldr	r3, [r3, #8]
    8b1c:	b29b      	uxth	r3, r3
    8b1e:	1ad3      	subs	r3, r2, r3
    8b20:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    8b22:	687b      	ldr	r3, [r7, #4]
    8b24:	7cdb      	ldrb	r3, [r3, #19]
    8b26:	f003 0320 	and.w	r3, r3, #32
    8b2a:	b2db      	uxtb	r3, r3
    8b2c:	2b00      	cmp	r3, #0
    8b2e:	d010      	beq.n	8b52 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    8b30:	687b      	ldr	r3, [r7, #4]
    8b32:	8a1b      	ldrh	r3, [r3, #16]
    8b34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8b36:	429a      	cmp	r2, r3
    8b38:	d902      	bls.n	8b40 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    8b3a:	687b      	ldr	r3, [r7, #4]
    8b3c:	8a1b      	ldrh	r3, [r3, #16]
    8b3e:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8b40:	687b      	ldr	r3, [r7, #4]
    8b42:	68db      	ldr	r3, [r3, #12]
    8b44:	461a      	mov	r2, r3
    8b46:	7ffb      	ldrb	r3, [r7, #31]
    8b48:	2100      	movs	r1, #0
    8b4a:	4618      	mov	r0, r3
    8b4c:	4b35      	ldr	r3, [pc, #212]	; (8c24 <_usb_d_dev_out_next+0x280>)
    8b4e:	4798      	blx	r3
    8b50:	e029      	b.n	8ba6 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    8b52:	687b      	ldr	r3, [r7, #4]
    8b54:	8a1b      	ldrh	r3, [r3, #16]
    8b56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8b58:	429a      	cmp	r2, r3
    8b5a:	d90f      	bls.n	8b7c <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8b5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    8b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8b62:	d903      	bls.n	8b6c <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    8b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8b68:	84fb      	strh	r3, [r7, #38]	; 0x26
    8b6a:	e011      	b.n	8b90 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    8b6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8b6e:	8a7b      	ldrh	r3, [r7, #18]
    8b70:	4013      	ands	r3, r2
    8b72:	b29b      	uxth	r3, r3
    8b74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8b76:	1ad3      	subs	r3, r2, r3
    8b78:	84fb      	strh	r3, [r7, #38]	; 0x26
    8b7a:	e009      	b.n	8b90 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    8b7c:	687b      	ldr	r3, [r7, #4]
    8b7e:	8a1b      	ldrh	r3, [r3, #16]
    8b80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8b82:	429a      	cmp	r2, r3
    8b84:	d204      	bcs.n	8b90 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    8b86:	687a      	ldr	r2, [r7, #4]
    8b88:	7cd3      	ldrb	r3, [r2, #19]
    8b8a:	f043 0320 	orr.w	r3, r3, #32
    8b8e:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	681a      	ldr	r2, [r3, #0]
    8b94:	687b      	ldr	r3, [r7, #4]
    8b96:	689b      	ldr	r3, [r3, #8]
    8b98:	4413      	add	r3, r2
    8b9a:	461a      	mov	r2, r3
    8b9c:	7ffb      	ldrb	r3, [r7, #31]
    8b9e:	2100      	movs	r1, #0
    8ba0:	4618      	mov	r0, r3
    8ba2:	4b20      	ldr	r3, [pc, #128]	; (8c24 <_usb_d_dev_out_next+0x280>)
    8ba4:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    8ba6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8ba8:	7ff8      	ldrb	r0, [r7, #31]
    8baa:	2300      	movs	r3, #0
    8bac:	2100      	movs	r1, #0
    8bae:	4c1e      	ldr	r4, [pc, #120]	; (8c28 <_usb_d_dev_out_next+0x284>)
    8bb0:	47a0      	blx	r4
			goto _out_rx_exec;
    8bb2:	e01f      	b.n	8bf4 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    8bb4:	7bfb      	ldrb	r3, [r7, #15]
    8bb6:	2b00      	cmp	r3, #0
    8bb8:	d006      	beq.n	8bc8 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    8bba:	7ffb      	ldrb	r3, [r7, #31]
    8bbc:	222d      	movs	r2, #45	; 0x2d
    8bbe:	4619      	mov	r1, r3
    8bc0:	6a38      	ldr	r0, [r7, #32]
    8bc2:	4b1a      	ldr	r3, [pc, #104]	; (8c2c <_usb_d_dev_out_next+0x288>)
    8bc4:	4798      	blx	r3
    8bc6:	e005      	b.n	8bd4 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    8bc8:	7ffb      	ldrb	r3, [r7, #31]
    8bca:	2225      	movs	r2, #37	; 0x25
    8bcc:	4619      	mov	r1, r3
    8bce:	6a38      	ldr	r0, [r7, #32]
    8bd0:	4b16      	ldr	r3, [pc, #88]	; (8c2c <_usb_d_dev_out_next+0x288>)
    8bd2:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    8bd4:	7ffb      	ldrb	r3, [r7, #31]
    8bd6:	2b00      	cmp	r3, #0
    8bd8:	d107      	bne.n	8bea <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8bda:	687b      	ldr	r3, [r7, #4]
    8bdc:	68db      	ldr	r3, [r3, #12]
    8bde:	461a      	mov	r2, r3
    8be0:	7ffb      	ldrb	r3, [r7, #31]
    8be2:	2100      	movs	r1, #0
    8be4:	4618      	mov	r0, r3
    8be6:	4b0f      	ldr	r3, [pc, #60]	; (8c24 <_usb_d_dev_out_next+0x280>)
    8be8:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8bea:	2100      	movs	r1, #0
    8bec:	6878      	ldr	r0, [r7, #4]
    8bee:	4b10      	ldr	r3, [pc, #64]	; (8c30 <_usb_d_dev_out_next+0x28c>)
    8bf0:	4798      	blx	r3
	return;
    8bf2:	e031      	b.n	8c58 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    8bf4:	78fb      	ldrb	r3, [r7, #3]
    8bf6:	f083 0301 	eor.w	r3, r3, #1
    8bfa:	b2db      	uxtb	r3, r3
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	d025      	beq.n	8c4c <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    8c00:	7bfb      	ldrb	r3, [r7, #15]
    8c02:	2b00      	cmp	r3, #0
    8c04:	d018      	beq.n	8c38 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    8c06:	7ffb      	ldrb	r3, [r7, #31]
    8c08:	2101      	movs	r1, #1
    8c0a:	4618      	mov	r0, r3
    8c0c:	4b09      	ldr	r3, [pc, #36]	; (8c34 <_usb_d_dev_out_next+0x290>)
    8c0e:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8c10:	232d      	movs	r3, #45	; 0x2d
    8c12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    8c16:	e012      	b.n	8c3e <_usb_d_dev_out_next+0x29a>
    8c18:	200009a8 	.word	0x200009a8
    8c1c:	00008185 	.word	0x00008185
    8c20:	0000c885 	.word	0x0000c885
    8c24:	000081b1 	.word	0x000081b1
    8c28:	00008339 	.word	0x00008339
    8c2c:	00007a91 	.word	0x00007a91
    8c30:	00009ab5 	.word	0x00009ab5
    8c34:	00008379 	.word	0x00008379
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    8c38:	2325      	movs	r3, #37	; 0x25
    8c3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8c3e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    8c42:	7ffb      	ldrb	r3, [r7, #31]
    8c44:	4619      	mov	r1, r3
    8c46:	6a38      	ldr	r0, [r7, #32]
    8c48:	4b05      	ldr	r3, [pc, #20]	; (8c60 <_usb_d_dev_out_next+0x2bc>)
    8c4a:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    8c4c:	7ffb      	ldrb	r3, [r7, #31]
    8c4e:	2201      	movs	r2, #1
    8c50:	2100      	movs	r1, #0
    8c52:	4618      	mov	r0, r3
    8c54:	4b03      	ldr	r3, [pc, #12]	; (8c64 <_usb_d_dev_out_next+0x2c0>)
    8c56:	4798      	blx	r3
}
    8c58:	372c      	adds	r7, #44	; 0x2c
    8c5a:	46bd      	mov	sp, r7
    8c5c:	bd90      	pop	{r4, r7, pc}
    8c5e:	bf00      	nop
    8c60:	00007a65 	.word	0x00007a65
    8c64:	00008409 	.word	0x00008409

00008c68 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    8c68:	b580      	push	{r7, lr}
    8c6a:	b084      	sub	sp, #16
    8c6c:	af00      	add	r7, sp, #0
    8c6e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    8c70:	687b      	ldr	r3, [r7, #4]
    8c72:	7c9b      	ldrb	r3, [r3, #18]
    8c74:	f003 030f 	and.w	r3, r3, #15
    8c78:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8c7a:	687b      	ldr	r3, [r7, #4]
    8c7c:	7cdb      	ldrb	r3, [r3, #19]
    8c7e:	f003 0307 	and.w	r3, r3, #7
    8c82:	b2db      	uxtb	r3, r3
    8c84:	2b01      	cmp	r3, #1
    8c86:	bf0c      	ite	eq
    8c88:	2301      	moveq	r3, #1
    8c8a:	2300      	movne	r3, #0
    8c8c:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    8c8e:	7bbb      	ldrb	r3, [r7, #14]
    8c90:	f083 0301 	eor.w	r3, r3, #1
    8c94:	b2db      	uxtb	r3, r3
    8c96:	2b00      	cmp	r3, #0
    8c98:	d008      	beq.n	8cac <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    8c9a:	7bfb      	ldrb	r3, [r7, #15]
    8c9c:	4618      	mov	r0, r3
    8c9e:	4b20      	ldr	r3, [pc, #128]	; (8d20 <_usb_d_dev_handle_setup+0xb8>)
    8ca0:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    8ca2:	7bfb      	ldrb	r3, [r7, #15]
    8ca4:	4618      	mov	r0, r3
    8ca6:	4b1f      	ldr	r3, [pc, #124]	; (8d24 <_usb_d_dev_handle_setup+0xbc>)
    8ca8:	4798      	blx	r3
		return;
    8caa:	e036      	b.n	8d1a <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	7cdb      	ldrb	r3, [r3, #19]
    8cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8cb4:	b2db      	uxtb	r3, r3
    8cb6:	2b00      	cmp	r3, #0
    8cb8:	d010      	beq.n	8cdc <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    8cba:	687a      	ldr	r2, [r7, #4]
    8cbc:	7cd3      	ldrb	r3, [r2, #19]
    8cbe:	f36f 1386 	bfc	r3, #6, #1
    8cc2:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    8cc4:	7bfb      	ldrb	r3, [r7, #15]
    8cc6:	2200      	movs	r2, #0
    8cc8:	2101      	movs	r1, #1
    8cca:	4618      	mov	r0, r3
    8ccc:	4b16      	ldr	r3, [pc, #88]	; (8d28 <_usb_d_dev_handle_setup+0xc0>)
    8cce:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    8cd0:	7bfb      	ldrb	r3, [r7, #15]
    8cd2:	2200      	movs	r2, #0
    8cd4:	2100      	movs	r1, #0
    8cd6:	4618      	mov	r0, r3
    8cd8:	4b14      	ldr	r3, [pc, #80]	; (8d2c <_usb_d_dev_handle_setup+0xc4>)
    8cda:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    8cdc:	687a      	ldr	r2, [r7, #4]
    8cde:	7cd3      	ldrb	r3, [r2, #19]
    8ce0:	f36f 03c3 	bfc	r3, #3, #1
    8ce4:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    8ce6:	7bfb      	ldrb	r3, [r7, #15]
    8ce8:	2100      	movs	r1, #0
    8cea:	4618      	mov	r0, r3
    8cec:	4b10      	ldr	r3, [pc, #64]	; (8d30 <_usb_d_dev_handle_setup+0xc8>)
    8cee:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    8cf0:	7bfb      	ldrb	r3, [r7, #15]
    8cf2:	2101      	movs	r1, #1
    8cf4:	4618      	mov	r0, r3
    8cf6:	4b0e      	ldr	r3, [pc, #56]	; (8d30 <_usb_d_dev_handle_setup+0xc8>)
    8cf8:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    8cfa:	7bfb      	ldrb	r3, [r7, #15]
    8cfc:	216f      	movs	r1, #111	; 0x6f
    8cfe:	4618      	mov	r0, r3
    8d00:	4b0c      	ldr	r3, [pc, #48]	; (8d34 <_usb_d_dev_handle_setup+0xcc>)
    8d02:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    8d04:	7bfb      	ldrb	r3, [r7, #15]
    8d06:	216f      	movs	r1, #111	; 0x6f
    8d08:	4618      	mov	r0, r3
    8d0a:	4b0b      	ldr	r3, [pc, #44]	; (8d38 <_usb_d_dev_handle_setup+0xd0>)
    8d0c:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    8d0e:	4b0b      	ldr	r3, [pc, #44]	; (8d3c <_usb_d_dev_handle_setup+0xd4>)
    8d10:	689b      	ldr	r3, [r3, #8]
    8d12:	687a      	ldr	r2, [r7, #4]
    8d14:	7c92      	ldrb	r2, [r2, #18]
    8d16:	4610      	mov	r0, r2
    8d18:	4798      	blx	r3
}
    8d1a:	3710      	adds	r7, #16
    8d1c:	46bd      	mov	sp, r7
    8d1e:	bd80      	pop	{r7, pc}
    8d20:	0000810d 	.word	0x0000810d
    8d24:	000080b9 	.word	0x000080b9
    8d28:	000083b1 	.word	0x000083b1
    8d2c:	00008409 	.word	0x00008409
    8d30:	00008379 	.word	0x00008379
    8d34:	00007eb9 	.word	0x00007eb9
    8d38:	00007f09 	.word	0x00007f09
    8d3c:	200008e0 	.word	0x200008e0

00008d40 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8d40:	b580      	push	{r7, lr}
    8d42:	b084      	sub	sp, #16
    8d44:	af00      	add	r7, sp, #0
    8d46:	6078      	str	r0, [r7, #4]
    8d48:	460b      	mov	r3, r1
    8d4a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    8d4c:	687b      	ldr	r3, [r7, #4]
    8d4e:	7c9b      	ldrb	r3, [r3, #18]
    8d50:	f003 030f 	and.w	r3, r3, #15
    8d54:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    8d56:	78f9      	ldrb	r1, [r7, #3]
    8d58:	7bfb      	ldrb	r3, [r7, #15]
    8d5a:	2200      	movs	r2, #0
    8d5c:	4618      	mov	r0, r3
    8d5e:	4b07      	ldr	r3, [pc, #28]	; (8d7c <_usb_d_dev_handle_stall+0x3c>)
    8d60:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    8d62:	4b07      	ldr	r3, [pc, #28]	; (8d80 <_usb_d_dev_handle_stall+0x40>)
    8d64:	691b      	ldr	r3, [r3, #16]
    8d66:	687a      	ldr	r2, [r7, #4]
    8d68:	7c90      	ldrb	r0, [r2, #18]
    8d6a:	687a      	ldr	r2, [r7, #4]
    8d6c:	6892      	ldr	r2, [r2, #8]
    8d6e:	2101      	movs	r1, #1
    8d70:	4798      	blx	r3
}
    8d72:	bf00      	nop
    8d74:	3710      	adds	r7, #16
    8d76:	46bd      	mov	sp, r7
    8d78:	bd80      	pop	{r7, pc}
    8d7a:	bf00      	nop
    8d7c:	0000806d 	.word	0x0000806d
    8d80:	200008e0 	.word	0x200008e0

00008d84 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    8d84:	b580      	push	{r7, lr}
    8d86:	b088      	sub	sp, #32
    8d88:	af00      	add	r7, sp, #0
    8d8a:	6078      	str	r0, [r7, #4]
    8d8c:	460b      	mov	r3, r1
    8d8e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    8d90:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d94:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    8d96:	687b      	ldr	r3, [r7, #4]
    8d98:	7c9b      	ldrb	r3, [r3, #18]
    8d9a:	f003 030f 	and.w	r3, r3, #15
    8d9e:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    8da0:	4b61      	ldr	r3, [pc, #388]	; (8f28 <_usb_d_dev_handle_trfail+0x1a4>)
    8da2:	881b      	ldrh	r3, [r3, #0]
    8da4:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    8da6:	7efb      	ldrb	r3, [r7, #27]
    8da8:	015b      	lsls	r3, r3, #5
    8daa:	4a60      	ldr	r2, [pc, #384]	; (8f2c <_usb_d_dev_handle_trfail+0x1a8>)
    8dac:	4413      	add	r3, r2
    8dae:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    8db0:	78fb      	ldrb	r3, [r7, #3]
    8db2:	2b00      	cmp	r3, #0
    8db4:	d006      	beq.n	8dc4 <_usb_d_dev_handle_trfail+0x40>
    8db6:	7efb      	ldrb	r3, [r7, #27]
    8db8:	4619      	mov	r1, r3
    8dba:	69f8      	ldr	r0, [r7, #28]
    8dbc:	4b5c      	ldr	r3, [pc, #368]	; (8f30 <_usb_d_dev_handle_trfail+0x1ac>)
    8dbe:	4798      	blx	r3
    8dc0:	4603      	mov	r3, r0
    8dc2:	e005      	b.n	8dd0 <_usb_d_dev_handle_trfail+0x4c>
    8dc4:	7efb      	ldrb	r3, [r7, #27]
    8dc6:	4619      	mov	r1, r3
    8dc8:	69f8      	ldr	r0, [r7, #28]
    8dca:	4b5a      	ldr	r3, [pc, #360]	; (8f34 <_usb_d_dev_handle_trfail+0x1b0>)
    8dcc:	4798      	blx	r3
    8dce:	4603      	mov	r3, r0
    8dd0:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8dd2:	687b      	ldr	r3, [r7, #4]
    8dd4:	7cdb      	ldrb	r3, [r3, #19]
    8dd6:	f003 0307 	and.w	r3, r3, #7
    8dda:	b2db      	uxtb	r3, r3
    8ddc:	2b01      	cmp	r3, #1
    8dde:	bf0c      	ite	eq
    8de0:	2301      	moveq	r3, #1
    8de2:	2300      	movne	r3, #0
    8de4:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    8de6:	78fb      	ldrb	r3, [r7, #3]
    8de8:	011b      	lsls	r3, r3, #4
    8dea:	697a      	ldr	r2, [r7, #20]
    8dec:	4413      	add	r3, r2
    8dee:	7a9b      	ldrb	r3, [r3, #10]
    8df0:	b2db      	uxtb	r3, r3
    8df2:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    8df4:	7cfb      	ldrb	r3, [r7, #19]
    8df6:	2b02      	cmp	r3, #2
    8df8:	d12f      	bne.n	8e5a <_usb_d_dev_handle_trfail+0xd6>
    8dfa:	7b3b      	ldrb	r3, [r7, #12]
    8dfc:	f003 0301 	and.w	r3, r3, #1
    8e00:	b2db      	uxtb	r3, r3
    8e02:	2b00      	cmp	r3, #0
    8e04:	d029      	beq.n	8e5a <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    8e06:	78fb      	ldrb	r3, [r7, #3]
    8e08:	011b      	lsls	r3, r3, #4
    8e0a:	697a      	ldr	r2, [r7, #20]
    8e0c:	441a      	add	r2, r3
    8e0e:	7a93      	ldrb	r3, [r2, #10]
    8e10:	f36f 0300 	bfc	r3, #0, #1
    8e14:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8e16:	78fb      	ldrb	r3, [r7, #3]
    8e18:	f107 0220 	add.w	r2, r7, #32
    8e1c:	4413      	add	r3, r2
    8e1e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8e22:	7efb      	ldrb	r3, [r7, #27]
    8e24:	4619      	mov	r1, r3
    8e26:	69f8      	ldr	r0, [r7, #28]
    8e28:	4b43      	ldr	r3, [pc, #268]	; (8f38 <_usb_d_dev_handle_trfail+0x1b4>)
    8e2a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    8e2c:	78fb      	ldrb	r3, [r7, #3]
    8e2e:	f107 0220 	add.w	r2, r7, #32
    8e32:	4413      	add	r3, r2
    8e34:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8e38:	7efb      	ldrb	r3, [r7, #27]
    8e3a:	4619      	mov	r1, r3
    8e3c:	69f8      	ldr	r0, [r7, #28]
    8e3e:	4b3f      	ldr	r3, [pc, #252]	; (8f3c <_usb_d_dev_handle_trfail+0x1b8>)
    8e40:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    8e42:	78fb      	ldrb	r3, [r7, #3]
    8e44:	2b00      	cmp	r3, #0
    8e46:	bf14      	ite	ne
    8e48:	2301      	movne	r3, #1
    8e4a:	2300      	moveq	r3, #0
    8e4c:	b2db      	uxtb	r3, r3
    8e4e:	2204      	movs	r2, #4
    8e50:	4619      	mov	r1, r3
    8e52:	6878      	ldr	r0, [r7, #4]
    8e54:	4b3a      	ldr	r3, [pc, #232]	; (8f40 <_usb_d_dev_handle_trfail+0x1bc>)
    8e56:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    8e58:	e062      	b.n	8f20 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    8e5a:	7b3b      	ldrb	r3, [r7, #12]
    8e5c:	f003 0302 	and.w	r3, r3, #2
    8e60:	b2db      	uxtb	r3, r3
    8e62:	2b00      	cmp	r3, #0
    8e64:	d040      	beq.n	8ee8 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    8e66:	78fb      	ldrb	r3, [r7, #3]
    8e68:	011b      	lsls	r3, r3, #4
    8e6a:	697a      	ldr	r2, [r7, #20]
    8e6c:	441a      	add	r2, r3
    8e6e:	7a93      	ldrb	r3, [r2, #10]
    8e70:	f36f 0341 	bfc	r3, #1, #1
    8e74:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8e76:	78fb      	ldrb	r3, [r7, #3]
    8e78:	f107 0220 	add.w	r2, r7, #32
    8e7c:	4413      	add	r3, r2
    8e7e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8e82:	7efb      	ldrb	r3, [r7, #27]
    8e84:	4619      	mov	r1, r3
    8e86:	69f8      	ldr	r0, [r7, #28]
    8e88:	4b2b      	ldr	r3, [pc, #172]	; (8f38 <_usb_d_dev_handle_trfail+0x1b4>)
    8e8a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    8e8c:	78fb      	ldrb	r3, [r7, #3]
    8e8e:	f107 0220 	add.w	r2, r7, #32
    8e92:	4413      	add	r3, r2
    8e94:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8e98:	7efb      	ldrb	r3, [r7, #27]
    8e9a:	4619      	mov	r1, r3
    8e9c:	69f8      	ldr	r0, [r7, #28]
    8e9e:	4b27      	ldr	r3, [pc, #156]	; (8f3c <_usb_d_dev_handle_trfail+0x1b8>)
    8ea0:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    8ea2:	7cbb      	ldrb	r3, [r7, #18]
    8ea4:	2b00      	cmp	r3, #0
    8ea6:	d03b      	beq.n	8f20 <_usb_d_dev_handle_trfail+0x19c>
    8ea8:	687b      	ldr	r3, [r7, #4]
    8eaa:	7cdb      	ldrb	r3, [r3, #19]
    8eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8eb0:	b2db      	uxtb	r3, r3
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	d034      	beq.n	8f20 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    8eb6:	687b      	ldr	r3, [r7, #4]
    8eb8:	7cdb      	ldrb	r3, [r3, #19]
    8eba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    8ebe:	b2db      	uxtb	r3, r3
    8ec0:	461a      	mov	r2, r3
    8ec2:	78fb      	ldrb	r3, [r7, #3]
    8ec4:	4293      	cmp	r3, r2
    8ec6:	d02b      	beq.n	8f20 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    8ec8:	687b      	ldr	r3, [r7, #4]
    8eca:	7cdb      	ldrb	r3, [r3, #19]
    8ecc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    8ed0:	b2db      	uxtb	r3, r3
    8ed2:	2b00      	cmp	r3, #0
    8ed4:	bf14      	ite	ne
    8ed6:	2301      	movne	r3, #1
    8ed8:	2300      	moveq	r3, #0
    8eda:	b2db      	uxtb	r3, r3
    8edc:	2200      	movs	r2, #0
    8ede:	4619      	mov	r1, r3
    8ee0:	6878      	ldr	r0, [r7, #4]
    8ee2:	4b17      	ldr	r3, [pc, #92]	; (8f40 <_usb_d_dev_handle_trfail+0x1bc>)
    8ee4:	4798      	blx	r3
}
    8ee6:	e01b      	b.n	8f20 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    8ee8:	78fa      	ldrb	r2, [r7, #3]
    8eea:	7efb      	ldrb	r3, [r7, #27]
    8eec:	4611      	mov	r1, r2
    8eee:	4618      	mov	r0, r3
    8ef0:	4b14      	ldr	r3, [pc, #80]	; (8f44 <_usb_d_dev_handle_trfail+0x1c0>)
    8ef2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    8ef4:	78fb      	ldrb	r3, [r7, #3]
    8ef6:	f107 0220 	add.w	r2, r7, #32
    8efa:	4413      	add	r3, r2
    8efc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8f00:	7efb      	ldrb	r3, [r7, #27]
    8f02:	4619      	mov	r1, r3
    8f04:	69f8      	ldr	r0, [r7, #28]
    8f06:	4b0c      	ldr	r3, [pc, #48]	; (8f38 <_usb_d_dev_handle_trfail+0x1b4>)
    8f08:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    8f0a:	78fb      	ldrb	r3, [r7, #3]
    8f0c:	f107 0220 	add.w	r2, r7, #32
    8f10:	4413      	add	r3, r2
    8f12:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    8f16:	7efb      	ldrb	r3, [r7, #27]
    8f18:	4619      	mov	r1, r3
    8f1a:	69f8      	ldr	r0, [r7, #28]
    8f1c:	4b07      	ldr	r3, [pc, #28]	; (8f3c <_usb_d_dev_handle_trfail+0x1b8>)
    8f1e:	4798      	blx	r3
}
    8f20:	bf00      	nop
    8f22:	3720      	adds	r7, #32
    8f24:	46bd      	mov	sp, r7
    8f26:	bd80      	pop	{r7, pc}
    8f28:	0000cf04 	.word	0x0000cf04
    8f2c:	200009a8 	.word	0x200009a8
    8f30:	00007aed 	.word	0x00007aed
    8f34:	00007abd 	.word	0x00007abd
    8f38:	00007991 	.word	0x00007991
    8f3c:	00007a91 	.word	0x00007a91
    8f40:	00009afd 	.word	0x00009afd
    8f44:	00008379 	.word	0x00008379

00008f48 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    8f48:	b580      	push	{r7, lr}
    8f4a:	b082      	sub	sp, #8
    8f4c:	af00      	add	r7, sp, #0
    8f4e:	6078      	str	r0, [r7, #4]
    8f50:	460b      	mov	r3, r1
    8f52:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    8f54:	78fb      	ldrb	r3, [r7, #3]
    8f56:	f003 0310 	and.w	r3, r3, #16
    8f5a:	2b00      	cmp	r3, #0
    8f5c:	d003      	beq.n	8f66 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    8f5e:	6878      	ldr	r0, [r7, #4]
    8f60:	4b0c      	ldr	r3, [pc, #48]	; (8f94 <_usb_d_dev_trans_setup_isr+0x4c>)
    8f62:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    8f64:	e012      	b.n	8f8c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8f66:	78fb      	ldrb	r3, [r7, #3]
    8f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8f6c:	2b00      	cmp	r3, #0
    8f6e:	d004      	beq.n	8f7a <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    8f70:	2101      	movs	r1, #1
    8f72:	6878      	ldr	r0, [r7, #4]
    8f74:	4b08      	ldr	r3, [pc, #32]	; (8f98 <_usb_d_dev_trans_setup_isr+0x50>)
    8f76:	4798      	blx	r3
}
    8f78:	e008      	b.n	8f8c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    8f7a:	78fb      	ldrb	r3, [r7, #3]
    8f7c:	f003 0320 	and.w	r3, r3, #32
    8f80:	2b00      	cmp	r3, #0
    8f82:	d003      	beq.n	8f8c <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    8f84:	2100      	movs	r1, #0
    8f86:	6878      	ldr	r0, [r7, #4]
    8f88:	4b03      	ldr	r3, [pc, #12]	; (8f98 <_usb_d_dev_trans_setup_isr+0x50>)
    8f8a:	4798      	blx	r3
}
    8f8c:	bf00      	nop
    8f8e:	3708      	adds	r7, #8
    8f90:	46bd      	mov	sp, r7
    8f92:	bd80      	pop	{r7, pc}
    8f94:	00008c69 	.word	0x00008c69
    8f98:	00008d41 	.word	0x00008d41

00008f9c <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    8f9c:	b580      	push	{r7, lr}
    8f9e:	b082      	sub	sp, #8
    8fa0:	af00      	add	r7, sp, #0
    8fa2:	6078      	str	r0, [r7, #4]
    8fa4:	460b      	mov	r3, r1
    8fa6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    8fa8:	78fb      	ldrb	r3, [r7, #3]
    8faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d004      	beq.n	8fbc <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    8fb2:	2101      	movs	r1, #1
    8fb4:	6878      	ldr	r0, [r7, #4]
    8fb6:	4b1a      	ldr	r3, [pc, #104]	; (9020 <_usb_d_dev_trans_in_isr+0x84>)
    8fb8:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    8fba:	e02c      	b.n	9016 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    8fbc:	78fb      	ldrb	r3, [r7, #3]
    8fbe:	f003 0308 	and.w	r3, r3, #8
    8fc2:	2b00      	cmp	r3, #0
    8fc4:	d004      	beq.n	8fd0 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    8fc6:	2101      	movs	r1, #1
    8fc8:	6878      	ldr	r0, [r7, #4]
    8fca:	4b16      	ldr	r3, [pc, #88]	; (9024 <_usb_d_dev_trans_in_isr+0x88>)
    8fcc:	4798      	blx	r3
}
    8fce:	e022      	b.n	9016 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    8fd0:	78fb      	ldrb	r3, [r7, #3]
    8fd2:	f003 0302 	and.w	r3, r3, #2
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	d004      	beq.n	8fe4 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    8fda:	2101      	movs	r1, #1
    8fdc:	6878      	ldr	r0, [r7, #4]
    8fde:	4b12      	ldr	r3, [pc, #72]	; (9028 <_usb_d_dev_trans_in_isr+0x8c>)
    8fe0:	4798      	blx	r3
}
    8fe2:	e018      	b.n	9016 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    8fe4:	687b      	ldr	r3, [r7, #4]
    8fe6:	7cdb      	ldrb	r3, [r3, #19]
    8fe8:	f003 0307 	and.w	r3, r3, #7
    8fec:	b2db      	uxtb	r3, r3
    8fee:	2b01      	cmp	r3, #1
    8ff0:	d111      	bne.n	9016 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    8ff2:	78fb      	ldrb	r3, [r7, #3]
    8ff4:	f003 0304 	and.w	r3, r3, #4
    8ff8:	2b00      	cmp	r3, #0
    8ffa:	d004      	beq.n	9006 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    8ffc:	2100      	movs	r1, #0
    8ffe:	6878      	ldr	r0, [r7, #4]
    9000:	4b08      	ldr	r3, [pc, #32]	; (9024 <_usb_d_dev_trans_in_isr+0x88>)
    9002:	4798      	blx	r3
}
    9004:	e007      	b.n	9016 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9006:	78fb      	ldrb	r3, [r7, #3]
    9008:	f003 0310 	and.w	r3, r3, #16
    900c:	2b00      	cmp	r3, #0
    900e:	d002      	beq.n	9016 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9010:	6878      	ldr	r0, [r7, #4]
    9012:	4b06      	ldr	r3, [pc, #24]	; (902c <_usb_d_dev_trans_in_isr+0x90>)
    9014:	4798      	blx	r3
}
    9016:	bf00      	nop
    9018:	3708      	adds	r7, #8
    901a:	46bd      	mov	sp, r7
    901c:	bd80      	pop	{r7, pc}
    901e:	bf00      	nop
    9020:	00008d41 	.word	0x00008d41
    9024:	00008d85 	.word	0x00008d85
    9028:	0000878d 	.word	0x0000878d
    902c:	00008c69 	.word	0x00008c69

00009030 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9030:	b580      	push	{r7, lr}
    9032:	b082      	sub	sp, #8
    9034:	af00      	add	r7, sp, #0
    9036:	6078      	str	r0, [r7, #4]
    9038:	460b      	mov	r3, r1
    903a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    903c:	78fb      	ldrb	r3, [r7, #3]
    903e:	f003 0320 	and.w	r3, r3, #32
    9042:	2b00      	cmp	r3, #0
    9044:	d004      	beq.n	9050 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9046:	2100      	movs	r1, #0
    9048:	6878      	ldr	r0, [r7, #4]
    904a:	4b1a      	ldr	r3, [pc, #104]	; (90b4 <_usb_d_dev_trans_out_isr+0x84>)
    904c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    904e:	e02c      	b.n	90aa <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9050:	78fb      	ldrb	r3, [r7, #3]
    9052:	f003 0304 	and.w	r3, r3, #4
    9056:	2b00      	cmp	r3, #0
    9058:	d004      	beq.n	9064 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    905a:	2100      	movs	r1, #0
    905c:	6878      	ldr	r0, [r7, #4]
    905e:	4b16      	ldr	r3, [pc, #88]	; (90b8 <_usb_d_dev_trans_out_isr+0x88>)
    9060:	4798      	blx	r3
}
    9062:	e022      	b.n	90aa <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9064:	78fb      	ldrb	r3, [r7, #3]
    9066:	f003 0301 	and.w	r3, r3, #1
    906a:	2b00      	cmp	r3, #0
    906c:	d004      	beq.n	9078 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    906e:	2101      	movs	r1, #1
    9070:	6878      	ldr	r0, [r7, #4]
    9072:	4b12      	ldr	r3, [pc, #72]	; (90bc <_usb_d_dev_trans_out_isr+0x8c>)
    9074:	4798      	blx	r3
}
    9076:	e018      	b.n	90aa <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9078:	687b      	ldr	r3, [r7, #4]
    907a:	7cdb      	ldrb	r3, [r3, #19]
    907c:	f003 0307 	and.w	r3, r3, #7
    9080:	b2db      	uxtb	r3, r3
    9082:	2b01      	cmp	r3, #1
    9084:	d111      	bne.n	90aa <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9086:	78fb      	ldrb	r3, [r7, #3]
    9088:	f003 0308 	and.w	r3, r3, #8
    908c:	2b00      	cmp	r3, #0
    908e:	d004      	beq.n	909a <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9090:	2101      	movs	r1, #1
    9092:	6878      	ldr	r0, [r7, #4]
    9094:	4b08      	ldr	r3, [pc, #32]	; (90b8 <_usb_d_dev_trans_out_isr+0x88>)
    9096:	4798      	blx	r3
}
    9098:	e007      	b.n	90aa <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    909a:	78fb      	ldrb	r3, [r7, #3]
    909c:	f003 0310 	and.w	r3, r3, #16
    90a0:	2b00      	cmp	r3, #0
    90a2:	d002      	beq.n	90aa <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    90a4:	6878      	ldr	r0, [r7, #4]
    90a6:	4b06      	ldr	r3, [pc, #24]	; (90c0 <_usb_d_dev_trans_out_isr+0x90>)
    90a8:	4798      	blx	r3
}
    90aa:	bf00      	nop
    90ac:	3708      	adds	r7, #8
    90ae:	46bd      	mov	sp, r7
    90b0:	bd80      	pop	{r7, pc}
    90b2:	bf00      	nop
    90b4:	00008d41 	.word	0x00008d41
    90b8:	00008d85 	.word	0x00008d85
    90bc:	000089a5 	.word	0x000089a5
    90c0:	00008c69 	.word	0x00008c69

000090c4 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    90c4:	b580      	push	{r7, lr}
    90c6:	b084      	sub	sp, #16
    90c8:	af00      	add	r7, sp, #0
    90ca:	6078      	str	r0, [r7, #4]
    90cc:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    90ce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    90d2:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    90d4:	683b      	ldr	r3, [r7, #0]
    90d6:	7c9b      	ldrb	r3, [r3, #18]
    90d8:	f003 030f 	and.w	r3, r3, #15
    90dc:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    90de:	7afb      	ldrb	r3, [r7, #11]
    90e0:	2201      	movs	r2, #1
    90e2:	409a      	lsls	r2, r3
    90e4:	687b      	ldr	r3, [r7, #4]
    90e6:	4013      	ands	r3, r2
    90e8:	2b00      	cmp	r3, #0
    90ea:	d03d      	beq.n	9168 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    90ec:	7afb      	ldrb	r3, [r7, #11]
    90ee:	68fa      	ldr	r2, [r7, #12]
    90f0:	3308      	adds	r3, #8
    90f2:	015b      	lsls	r3, r3, #5
    90f4:	4413      	add	r3, r2
    90f6:	3307      	adds	r3, #7
    90f8:	781b      	ldrb	r3, [r3, #0]
    90fa:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    90fc:	7afb      	ldrb	r3, [r7, #11]
    90fe:	68fa      	ldr	r2, [r7, #12]
    9100:	015b      	lsls	r3, r3, #5
    9102:	4413      	add	r3, r2
    9104:	f203 1309 	addw	r3, r3, #265	; 0x109
    9108:	781b      	ldrb	r3, [r3, #0]
    910a:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    910c:	7aba      	ldrb	r2, [r7, #10]
    910e:	7a7b      	ldrb	r3, [r7, #9]
    9110:	4013      	ands	r3, r2
    9112:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9114:	7abb      	ldrb	r3, [r7, #10]
    9116:	2b00      	cmp	r3, #0
    9118:	d027      	beq.n	916a <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    911a:	683b      	ldr	r3, [r7, #0]
    911c:	7cdb      	ldrb	r3, [r3, #19]
    911e:	f003 0307 	and.w	r3, r3, #7
    9122:	b2db      	uxtb	r3, r3
    9124:	2b01      	cmp	r3, #1
    9126:	d10c      	bne.n	9142 <_usb_d_dev_handle_eps+0x7e>
    9128:	683b      	ldr	r3, [r7, #0]
    912a:	7cdb      	ldrb	r3, [r3, #19]
    912c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9130:	b2db      	uxtb	r3, r3
    9132:	2b00      	cmp	r3, #0
    9134:	d105      	bne.n	9142 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9136:	7abb      	ldrb	r3, [r7, #10]
    9138:	4619      	mov	r1, r3
    913a:	6838      	ldr	r0, [r7, #0]
    913c:	4b0c      	ldr	r3, [pc, #48]	; (9170 <_usb_d_dev_handle_eps+0xac>)
    913e:	4798      	blx	r3
    9140:	e013      	b.n	916a <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    9142:	683b      	ldr	r3, [r7, #0]
    9144:	7cdb      	ldrb	r3, [r3, #19]
    9146:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    914a:	b2db      	uxtb	r3, r3
    914c:	2b00      	cmp	r3, #0
    914e:	d005      	beq.n	915c <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    9150:	7abb      	ldrb	r3, [r7, #10]
    9152:	4619      	mov	r1, r3
    9154:	6838      	ldr	r0, [r7, #0]
    9156:	4b07      	ldr	r3, [pc, #28]	; (9174 <_usb_d_dev_handle_eps+0xb0>)
    9158:	4798      	blx	r3
    915a:	e006      	b.n	916a <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    915c:	7abb      	ldrb	r3, [r7, #10]
    915e:	4619      	mov	r1, r3
    9160:	6838      	ldr	r0, [r7, #0]
    9162:	4b05      	ldr	r3, [pc, #20]	; (9178 <_usb_d_dev_handle_eps+0xb4>)
    9164:	4798      	blx	r3
    9166:	e000      	b.n	916a <_usb_d_dev_handle_eps+0xa6>
		return;
    9168:	bf00      	nop
		}
	}
}
    916a:	3710      	adds	r7, #16
    916c:	46bd      	mov	sp, r7
    916e:	bd80      	pop	{r7, pc}
    9170:	00008f49 	.word	0x00008f49
    9174:	00008f9d 	.word	0x00008f9d
    9178:	00009031 	.word	0x00009031

0000917c <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    917c:	b580      	push	{r7, lr}
    917e:	b084      	sub	sp, #16
    9180:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9182:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9186:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9188:	68bb      	ldr	r3, [r7, #8]
    918a:	8c1b      	ldrh	r3, [r3, #32]
    918c:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    918e:	88fb      	ldrh	r3, [r7, #6]
    9190:	2b00      	cmp	r3, #0
    9192:	d104      	bne.n	919e <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9194:	4b13      	ldr	r3, [pc, #76]	; (91e4 <_usb_d_dev_handler+0x68>)
    9196:	4798      	blx	r3
    9198:	4603      	mov	r3, r0
    919a:	2b00      	cmp	r3, #0
    919c:	d11e      	bne.n	91dc <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    919e:	2300      	movs	r3, #0
    91a0:	73fb      	strb	r3, [r7, #15]
    91a2:	e017      	b.n	91d4 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    91a4:	7bfa      	ldrb	r2, [r7, #15]
    91a6:	4613      	mov	r3, r2
    91a8:	009b      	lsls	r3, r3, #2
    91aa:	4413      	add	r3, r2
    91ac:	009b      	lsls	r3, r3, #2
    91ae:	3310      	adds	r3, #16
    91b0:	4a0d      	ldr	r2, [pc, #52]	; (91e8 <_usb_d_dev_handler+0x6c>)
    91b2:	4413      	add	r3, r2
    91b4:	3304      	adds	r3, #4
    91b6:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    91b8:	683b      	ldr	r3, [r7, #0]
    91ba:	7c9b      	ldrb	r3, [r3, #18]
    91bc:	2bff      	cmp	r3, #255	; 0xff
    91be:	d005      	beq.n	91cc <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    91c0:	88fb      	ldrh	r3, [r7, #6]
    91c2:	6839      	ldr	r1, [r7, #0]
    91c4:	4618      	mov	r0, r3
    91c6:	4b09      	ldr	r3, [pc, #36]	; (91ec <_usb_d_dev_handler+0x70>)
    91c8:	4798      	blx	r3
    91ca:	e000      	b.n	91ce <_usb_d_dev_handler+0x52>
			continue;
    91cc:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    91ce:	7bfb      	ldrb	r3, [r7, #15]
    91d0:	3301      	adds	r3, #1
    91d2:	73fb      	strb	r3, [r7, #15]
    91d4:	7bfb      	ldrb	r3, [r7, #15]
    91d6:	2b08      	cmp	r3, #8
    91d8:	d9e4      	bls.n	91a4 <_usb_d_dev_handler+0x28>
    91da:	e000      	b.n	91de <_usb_d_dev_handler+0x62>
			return;
    91dc:	bf00      	nop
	}
}
    91de:	3710      	adds	r7, #16
    91e0:	46bd      	mov	sp, r7
    91e2:	bd80      	pop	{r7, pc}
    91e4:	000086d5 	.word	0x000086d5
    91e8:	200008e0 	.word	0x200008e0
    91ec:	000090c5 	.word	0x000090c5

000091f0 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    91f0:	b580      	push	{r7, lr}
    91f2:	b082      	sub	sp, #8
    91f4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    91f6:	2300      	movs	r3, #0
    91f8:	71fb      	strb	r3, [r7, #7]
    91fa:	e023      	b.n	9244 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    91fc:	79fa      	ldrb	r2, [r7, #7]
    91fe:	4613      	mov	r3, r2
    9200:	009b      	lsls	r3, r3, #2
    9202:	4413      	add	r3, r2
    9204:	009b      	lsls	r3, r3, #2
    9206:	3310      	adds	r3, #16
    9208:	4a14      	ldr	r2, [pc, #80]	; (925c <_usb_d_dev_reset_epts+0x6c>)
    920a:	4413      	add	r3, r2
    920c:	3304      	adds	r3, #4
    920e:	2103      	movs	r1, #3
    9210:	4618      	mov	r0, r3
    9212:	4b13      	ldr	r3, [pc, #76]	; (9260 <_usb_d_dev_reset_epts+0x70>)
    9214:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9216:	79fa      	ldrb	r2, [r7, #7]
    9218:	4910      	ldr	r1, [pc, #64]	; (925c <_usb_d_dev_reset_epts+0x6c>)
    921a:	4613      	mov	r3, r2
    921c:	009b      	lsls	r3, r3, #2
    921e:	4413      	add	r3, r2
    9220:	009b      	lsls	r3, r3, #2
    9222:	440b      	add	r3, r1
    9224:	3326      	adds	r3, #38	; 0x26
    9226:	22ff      	movs	r2, #255	; 0xff
    9228:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    922a:	79fa      	ldrb	r2, [r7, #7]
    922c:	490b      	ldr	r1, [pc, #44]	; (925c <_usb_d_dev_reset_epts+0x6c>)
    922e:	4613      	mov	r3, r2
    9230:	009b      	lsls	r3, r3, #2
    9232:	4413      	add	r3, r2
    9234:	009b      	lsls	r3, r3, #2
    9236:	440b      	add	r3, r1
    9238:	3327      	adds	r3, #39	; 0x27
    923a:	2200      	movs	r2, #0
    923c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    923e:	79fb      	ldrb	r3, [r7, #7]
    9240:	3301      	adds	r3, #1
    9242:	71fb      	strb	r3, [r7, #7]
    9244:	79fb      	ldrb	r3, [r7, #7]
    9246:	2b08      	cmp	r3, #8
    9248:	d9d8      	bls.n	91fc <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    924a:	22a0      	movs	r2, #160	; 0xa0
    924c:	2100      	movs	r1, #0
    924e:	4805      	ldr	r0, [pc, #20]	; (9264 <_usb_d_dev_reset_epts+0x74>)
    9250:	4b05      	ldr	r3, [pc, #20]	; (9268 <_usb_d_dev_reset_epts+0x78>)
    9252:	4798      	blx	r3
}
    9254:	bf00      	nop
    9256:	3708      	adds	r7, #8
    9258:	46bd      	mov	sp, r7
    925a:	bd80      	pop	{r7, pc}
    925c:	200008e0 	.word	0x200008e0
    9260:	00009ab5 	.word	0x00009ab5
    9264:	200009a8 	.word	0x200009a8
    9268:	0000c9b9 	.word	0x0000c9b9

0000926c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    926c:	b580      	push	{r7, lr}
    926e:	b084      	sub	sp, #16
    9270:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9272:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9276:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9278:	2301      	movs	r3, #1
    927a:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    927c:	2304      	movs	r3, #4
    927e:	713b      	strb	r3, [r7, #4]
    9280:	2300      	movs	r3, #0
    9282:	717b      	strb	r3, [r7, #5]
    9284:	2300      	movs	r3, #0
    9286:	71bb      	strb	r3, [r7, #6]
    9288:	2300      	movs	r3, #0
    928a:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    928c:	2101      	movs	r1, #1
    928e:	68f8      	ldr	r0, [r7, #12]
    9290:	4b26      	ldr	r3, [pc, #152]	; (932c <_usb_d_dev_init+0xc0>)
    9292:	4798      	blx	r3
    9294:	4603      	mov	r3, r0
    9296:	f083 0301 	eor.w	r3, r3, #1
    929a:	b2db      	uxtb	r3, r3
    929c:	2b00      	cmp	r3, #0
    929e:	d011      	beq.n	92c4 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    92a0:	2102      	movs	r1, #2
    92a2:	68f8      	ldr	r0, [r7, #12]
    92a4:	4b22      	ldr	r3, [pc, #136]	; (9330 <_usb_d_dev_init+0xc4>)
    92a6:	4798      	blx	r3
    92a8:	4603      	mov	r3, r0
    92aa:	2b00      	cmp	r3, #0
    92ac:	d006      	beq.n	92bc <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    92ae:	68f8      	ldr	r0, [r7, #12]
    92b0:	4b20      	ldr	r3, [pc, #128]	; (9334 <_usb_d_dev_init+0xc8>)
    92b2:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    92b4:	2102      	movs	r1, #2
    92b6:	68f8      	ldr	r0, [r7, #12]
    92b8:	4b1f      	ldr	r3, [pc, #124]	; (9338 <_usb_d_dev_init+0xcc>)
    92ba:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    92bc:	2101      	movs	r1, #1
    92be:	68f8      	ldr	r0, [r7, #12]
    92c0:	4b1e      	ldr	r3, [pc, #120]	; (933c <_usb_d_dev_init+0xd0>)
    92c2:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    92c4:	2101      	movs	r1, #1
    92c6:	68f8      	ldr	r0, [r7, #12]
    92c8:	4b1b      	ldr	r3, [pc, #108]	; (9338 <_usb_d_dev_init+0xcc>)
    92ca:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    92cc:	4b1c      	ldr	r3, [pc, #112]	; (9340 <_usb_d_dev_init+0xd4>)
    92ce:	4a1d      	ldr	r2, [pc, #116]	; (9344 <_usb_d_dev_init+0xd8>)
    92d0:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    92d2:	4b1b      	ldr	r3, [pc, #108]	; (9340 <_usb_d_dev_init+0xd4>)
    92d4:	4a1b      	ldr	r2, [pc, #108]	; (9344 <_usb_d_dev_init+0xd8>)
    92d6:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    92d8:	4b19      	ldr	r3, [pc, #100]	; (9340 <_usb_d_dev_init+0xd4>)
    92da:	4a1a      	ldr	r2, [pc, #104]	; (9344 <_usb_d_dev_init+0xd8>)
    92dc:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    92de:	4b18      	ldr	r3, [pc, #96]	; (9340 <_usb_d_dev_init+0xd4>)
    92e0:	4a18      	ldr	r2, [pc, #96]	; (9344 <_usb_d_dev_init+0xd8>)
    92e2:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    92e4:	4b16      	ldr	r3, [pc, #88]	; (9340 <_usb_d_dev_init+0xd4>)
    92e6:	4a17      	ldr	r2, [pc, #92]	; (9344 <_usb_d_dev_init+0xd8>)
    92e8:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    92ea:	4b17      	ldr	r3, [pc, #92]	; (9348 <_usb_d_dev_init+0xdc>)
    92ec:	4798      	blx	r3

	_usb_load_calib();
    92ee:	4b17      	ldr	r3, [pc, #92]	; (934c <_usb_d_dev_init+0xe0>)
    92f0:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    92f2:	2104      	movs	r1, #4
    92f4:	68f8      	ldr	r0, [r7, #12]
    92f6:	4b11      	ldr	r3, [pc, #68]	; (933c <_usb_d_dev_init+0xd0>)
    92f8:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    92fa:	4b15      	ldr	r3, [pc, #84]	; (9350 <_usb_d_dev_init+0xe4>)
    92fc:	4619      	mov	r1, r3
    92fe:	68f8      	ldr	r0, [r7, #12]
    9300:	4b14      	ldr	r3, [pc, #80]	; (9354 <_usb_d_dev_init+0xe8>)
    9302:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9304:	7afb      	ldrb	r3, [r7, #11]
    9306:	f107 0210 	add.w	r2, r7, #16
    930a:	4413      	add	r3, r2
    930c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9310:	f043 0301 	orr.w	r3, r3, #1
    9314:	b2db      	uxtb	r3, r3
    9316:	b29b      	uxth	r3, r3
    9318:	4619      	mov	r1, r3
    931a:	68f8      	ldr	r0, [r7, #12]
    931c:	4b0e      	ldr	r3, [pc, #56]	; (9358 <_usb_d_dev_init+0xec>)
    931e:	4798      	blx	r3

	return ERR_NONE;
    9320:	2300      	movs	r3, #0
}
    9322:	4618      	mov	r0, r3
    9324:	3710      	adds	r7, #16
    9326:	46bd      	mov	sp, r7
    9328:	bd80      	pop	{r7, pc}
    932a:	bf00      	nop
    932c:	00007905 	.word	0x00007905
    9330:	00007c55 	.word	0x00007c55
    9334:	00007c29 	.word	0x00007c29
    9338:	000078db 	.word	0x000078db
    933c:	00007c85 	.word	0x00007c85
    9340:	200008e0 	.word	0x200008e0
    9344:	00007d4d 	.word	0x00007d4d
    9348:	000091f1 	.word	0x000091f1
    934c:	00007d65 	.word	0x00007d65
    9350:	200009a8 	.word	0x200009a8
    9354:	00007d31 	.word	0x00007d31
    9358:	00007cf5 	.word	0x00007cf5

0000935c <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    935c:	b580      	push	{r7, lr}
    935e:	b082      	sub	sp, #8
    9360:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9362:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9366:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9368:	2103      	movs	r1, #3
    936a:	6878      	ldr	r0, [r7, #4]
    936c:	4b17      	ldr	r3, [pc, #92]	; (93cc <_usb_d_dev_enable+0x70>)
    936e:	4798      	blx	r3
    9370:	4603      	mov	r3, r0
    9372:	2b00      	cmp	r3, #0
    9374:	d002      	beq.n	937c <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9376:	f06f 0310 	mvn.w	r3, #16
    937a:	e023      	b.n	93c4 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    937c:	6878      	ldr	r0, [r7, #4]
    937e:	4b14      	ldr	r3, [pc, #80]	; (93d0 <_usb_d_dev_enable+0x74>)
    9380:	4798      	blx	r3
    9382:	4603      	mov	r3, r0
    9384:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9386:	78fb      	ldrb	r3, [r7, #3]
    9388:	f003 0302 	and.w	r3, r3, #2
    938c:	2b00      	cmp	r3, #0
    938e:	d107      	bne.n	93a0 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9390:	78fb      	ldrb	r3, [r7, #3]
    9392:	f043 0302 	orr.w	r3, r3, #2
    9396:	b2db      	uxtb	r3, r3
    9398:	4619      	mov	r1, r3
    939a:	6878      	ldr	r0, [r7, #4]
    939c:	4b0d      	ldr	r3, [pc, #52]	; (93d4 <_usb_d_dev_enable+0x78>)
    939e:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    93a0:	2050      	movs	r0, #80	; 0x50
    93a2:	4b0d      	ldr	r3, [pc, #52]	; (93d8 <_usb_d_dev_enable+0x7c>)
    93a4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    93a6:	2051      	movs	r0, #81	; 0x51
    93a8:	4b0b      	ldr	r3, [pc, #44]	; (93d8 <_usb_d_dev_enable+0x7c>)
    93aa:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    93ac:	2052      	movs	r0, #82	; 0x52
    93ae:	4b0a      	ldr	r3, [pc, #40]	; (93d8 <_usb_d_dev_enable+0x7c>)
    93b0:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    93b2:	2053      	movs	r0, #83	; 0x53
    93b4:	4b08      	ldr	r3, [pc, #32]	; (93d8 <_usb_d_dev_enable+0x7c>)
    93b6:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    93b8:	f240 218d 	movw	r1, #653	; 0x28d
    93bc:	6878      	ldr	r0, [r7, #4]
    93be:	4b07      	ldr	r3, [pc, #28]	; (93dc <_usb_d_dev_enable+0x80>)
    93c0:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    93c2:	2300      	movs	r3, #0
}
    93c4:	4618      	mov	r0, r3
    93c6:	3708      	adds	r7, #8
    93c8:	46bd      	mov	sp, r7
    93ca:	bd80      	pop	{r7, pc}
    93cc:	00007bff 	.word	0x00007bff
    93d0:	00007cad 	.word	0x00007cad
    93d4:	00007c85 	.word	0x00007c85
    93d8:	00007811 	.word	0x00007811
    93dc:	00007ba9 	.word	0x00007ba9

000093e0 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    93e0:	b580      	push	{r7, lr}
    93e2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    93e4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    93e8:	4b01      	ldr	r3, [pc, #4]	; (93f0 <_usb_d_dev_attach+0x10>)
    93ea:	4798      	blx	r3
}
    93ec:	bf00      	nop
    93ee:	bd80      	pop	{r7, pc}
    93f0:	00007cd1 	.word	0x00007cd1

000093f4 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    93f4:	b580      	push	{r7, lr}
    93f6:	b082      	sub	sp, #8
    93f8:	af00      	add	r7, sp, #0
    93fa:	4603      	mov	r3, r0
    93fc:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    93fe:	79fb      	ldrb	r3, [r7, #7]
    9400:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9404:	b2db      	uxtb	r3, r3
    9406:	4619      	mov	r1, r3
    9408:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    940c:	4b02      	ldr	r3, [pc, #8]	; (9418 <_usb_d_dev_set_address+0x24>)
    940e:	4798      	blx	r3
}
    9410:	bf00      	nop
    9412:	3708      	adds	r7, #8
    9414:	46bd      	mov	sp, r7
    9416:	bd80      	pop	{r7, pc}
    9418:	00007d13 	.word	0x00007d13

0000941c <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    941c:	b590      	push	{r4, r7, lr}
    941e:	b085      	sub	sp, #20
    9420:	af00      	add	r7, sp, #0
    9422:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9424:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9428:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    942a:	687b      	ldr	r3, [r7, #4]
    942c:	7c9b      	ldrb	r3, [r3, #18]
    942e:	f003 030f 	and.w	r3, r3, #15
    9432:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9434:	687b      	ldr	r3, [r7, #4]
    9436:	68db      	ldr	r3, [r3, #12]
    9438:	461a      	mov	r2, r3
    943a:	7afb      	ldrb	r3, [r7, #11]
    943c:	2100      	movs	r1, #0
    943e:	4618      	mov	r0, r3
    9440:	4b0f      	ldr	r3, [pc, #60]	; (9480 <_usb_d_dev_trans_setup+0x64>)
    9442:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9444:	687b      	ldr	r3, [r7, #4]
    9446:	8a1b      	ldrh	r3, [r3, #16]
    9448:	461a      	mov	r2, r3
    944a:	7af8      	ldrb	r0, [r7, #11]
    944c:	2300      	movs	r3, #0
    944e:	2100      	movs	r1, #0
    9450:	4c0c      	ldr	r4, [pc, #48]	; (9484 <_usb_d_dev_trans_setup+0x68>)
    9452:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9454:	7afb      	ldrb	r3, [r7, #11]
    9456:	22b0      	movs	r2, #176	; 0xb0
    9458:	4619      	mov	r1, r3
    945a:	68f8      	ldr	r0, [r7, #12]
    945c:	4b0a      	ldr	r3, [pc, #40]	; (9488 <_usb_d_dev_trans_setup+0x6c>)
    945e:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9460:	7afb      	ldrb	r3, [r7, #11]
    9462:	2200      	movs	r2, #0
    9464:	2100      	movs	r1, #0
    9466:	4618      	mov	r0, r3
    9468:	4b08      	ldr	r3, [pc, #32]	; (948c <_usb_d_dev_trans_setup+0x70>)
    946a:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    946c:	7afb      	ldrb	r3, [r7, #11]
    946e:	2210      	movs	r2, #16
    9470:	4619      	mov	r1, r3
    9472:	68f8      	ldr	r0, [r7, #12]
    9474:	4b06      	ldr	r3, [pc, #24]	; (9490 <_usb_d_dev_trans_setup+0x74>)
    9476:	4798      	blx	r3
}
    9478:	bf00      	nop
    947a:	3714      	adds	r7, #20
    947c:	46bd      	mov	sp, r7
    947e:	bd90      	pop	{r4, r7, pc}
    9480:	000081b1 	.word	0x000081b1
    9484:	00008339 	.word	0x00008339
    9488:	00007a11 	.word	0x00007a11
    948c:	00008409 	.word	0x00008409
    9490:	00007a65 	.word	0x00007a65

00009494 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9494:	b580      	push	{r7, lr}
    9496:	b088      	sub	sp, #32
    9498:	af00      	add	r7, sp, #0
    949a:	4603      	mov	r3, r0
    949c:	71fb      	strb	r3, [r7, #7]
    949e:	460b      	mov	r3, r1
    94a0:	71bb      	strb	r3, [r7, #6]
    94a2:	4613      	mov	r3, r2
    94a4:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    94a6:	79fb      	ldrb	r3, [r7, #7]
    94a8:	f003 030f 	and.w	r3, r3, #15
    94ac:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    94ae:	79fb      	ldrb	r3, [r7, #7]
    94b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    94b4:	2b00      	cmp	r3, #0
    94b6:	bf14      	ite	ne
    94b8:	2301      	movne	r3, #1
    94ba:	2300      	moveq	r3, #0
    94bc:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    94be:	7fba      	ldrb	r2, [r7, #30]
    94c0:	7ffb      	ldrb	r3, [r7, #31]
    94c2:	4611      	mov	r1, r2
    94c4:	4618      	mov	r0, r3
    94c6:	4b3e      	ldr	r3, [pc, #248]	; (95c0 <_usb_d_dev_ep_init+0x12c>)
    94c8:	4798      	blx	r3
    94ca:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    94cc:	79bb      	ldrb	r3, [r7, #6]
    94ce:	f003 0303 	and.w	r3, r3, #3
    94d2:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    94d4:	7ffa      	ldrb	r2, [r7, #31]
    94d6:	4613      	mov	r3, r2
    94d8:	005b      	lsls	r3, r3, #1
    94da:	4413      	add	r3, r2
    94dc:	009b      	lsls	r3, r3, #2
    94de:	4a39      	ldr	r2, [pc, #228]	; (95c4 <_usb_d_dev_ep_init+0x130>)
    94e0:	4413      	add	r3, r2
    94e2:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    94e4:	7ffb      	ldrb	r3, [r7, #31]
    94e6:	2b04      	cmp	r3, #4
    94e8:	d902      	bls.n	94f0 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    94ea:	f06f 0311 	mvn.w	r3, #17
    94ee:	e063      	b.n	95b8 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    94f0:	69bb      	ldr	r3, [r7, #24]
    94f2:	7c9b      	ldrb	r3, [r3, #18]
    94f4:	2bff      	cmp	r3, #255	; 0xff
    94f6:	d002      	beq.n	94fe <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    94f8:	f06f 0313 	mvn.w	r3, #19
    94fc:	e05c      	b.n	95b8 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    94fe:	7dfb      	ldrb	r3, [r7, #23]
    9500:	2b00      	cmp	r3, #0
    9502:	d11f      	bne.n	9544 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    9504:	7fbb      	ldrb	r3, [r7, #30]
    9506:	2b00      	cmp	r3, #0
    9508:	bf14      	ite	ne
    950a:	2301      	movne	r3, #1
    950c:	2300      	moveq	r3, #0
    950e:	b2db      	uxtb	r3, r3
    9510:	f083 0301 	eor.w	r3, r3, #1
    9514:	b2db      	uxtb	r3, r3
    9516:	f003 0301 	and.w	r3, r3, #1
    951a:	b2da      	uxtb	r2, r3
    951c:	7ffb      	ldrb	r3, [r7, #31]
    951e:	4611      	mov	r1, r2
    9520:	4618      	mov	r0, r3
    9522:	4b27      	ldr	r3, [pc, #156]	; (95c0 <_usb_d_dev_ep_init+0x12c>)
    9524:	4798      	blx	r3
    9526:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    9528:	68fb      	ldr	r3, [r7, #12]
    952a:	7c9b      	ldrb	r3, [r3, #18]
    952c:	2bff      	cmp	r3, #255	; 0xff
    952e:	d002      	beq.n	9536 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    9530:	f06f 0313 	mvn.w	r3, #19
    9534:	e040      	b.n	95b8 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    9536:	693b      	ldr	r3, [r7, #16]
    9538:	681b      	ldr	r3, [r3, #0]
    953a:	2b00      	cmp	r3, #0
    953c:	d102      	bne.n	9544 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    953e:	f06f 0312 	mvn.w	r3, #18
    9542:	e039      	b.n	95b8 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9544:	7fbb      	ldrb	r3, [r7, #30]
    9546:	2b00      	cmp	r3, #0
    9548:	d007      	beq.n	955a <_usb_d_dev_ep_init+0xc6>
    954a:	693b      	ldr	r3, [r7, #16]
    954c:	685b      	ldr	r3, [r3, #4]
    954e:	2b00      	cmp	r3, #0
    9550:	bf14      	ite	ne
    9552:	2301      	movne	r3, #1
    9554:	2300      	moveq	r3, #0
    9556:	b2db      	uxtb	r3, r3
    9558:	e006      	b.n	9568 <_usb_d_dev_ep_init+0xd4>
    955a:	693b      	ldr	r3, [r7, #16]
    955c:	681b      	ldr	r3, [r3, #0]
    955e:	2b00      	cmp	r3, #0
    9560:	bf14      	ite	ne
    9562:	2301      	movne	r3, #1
    9564:	2300      	moveq	r3, #0
    9566:	b2db      	uxtb	r3, r3
    9568:	2b00      	cmp	r3, #0
    956a:	d00f      	beq.n	958c <_usb_d_dev_ep_init+0xf8>
    956c:	7fbb      	ldrb	r3, [r7, #30]
    956e:	2b00      	cmp	r3, #0
    9570:	d003      	beq.n	957a <_usb_d_dev_ep_init+0xe6>
    9572:	693b      	ldr	r3, [r7, #16]
    9574:	895b      	ldrh	r3, [r3, #10]
    9576:	461a      	mov	r2, r3
    9578:	e002      	b.n	9580 <_usb_d_dev_ep_init+0xec>
    957a:	693b      	ldr	r3, [r7, #16]
    957c:	891b      	ldrh	r3, [r3, #8]
    957e:	461a      	mov	r2, r3
    9580:	88bb      	ldrh	r3, [r7, #4]
    9582:	429a      	cmp	r2, r3
    9584:	da02      	bge.n	958c <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    9586:	f06f 0312 	mvn.w	r3, #18
    958a:	e015      	b.n	95b8 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    958c:	7fbb      	ldrb	r3, [r7, #30]
    958e:	2b00      	cmp	r3, #0
    9590:	d002      	beq.n	9598 <_usb_d_dev_ep_init+0x104>
    9592:	693b      	ldr	r3, [r7, #16]
    9594:	685b      	ldr	r3, [r3, #4]
    9596:	e001      	b.n	959c <_usb_d_dev_ep_init+0x108>
    9598:	693b      	ldr	r3, [r7, #16]
    959a:	681b      	ldr	r3, [r3, #0]
    959c:	69ba      	ldr	r2, [r7, #24]
    959e:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    95a0:	69bb      	ldr	r3, [r7, #24]
    95a2:	88ba      	ldrh	r2, [r7, #4]
    95a4:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    95a6:	7dfb      	ldrb	r3, [r7, #23]
    95a8:	3301      	adds	r3, #1
    95aa:	b2da      	uxtb	r2, r3
    95ac:	69bb      	ldr	r3, [r7, #24]
    95ae:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    95b0:	69bb      	ldr	r3, [r7, #24]
    95b2:	79fa      	ldrb	r2, [r7, #7]
    95b4:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    95b6:	2300      	movs	r3, #0
}
    95b8:	4618      	mov	r0, r3
    95ba:	3720      	adds	r7, #32
    95bc:	46bd      	mov	sp, r7
    95be:	bd80      	pop	{r7, pc}
    95c0:	000084c5 	.word	0x000084c5
    95c4:	0000cec8 	.word	0x0000cec8

000095c8 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    95c8:	b580      	push	{r7, lr}
    95ca:	b086      	sub	sp, #24
    95cc:	af00      	add	r7, sp, #0
    95ce:	4603      	mov	r3, r0
    95d0:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    95d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    95d6:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    95d8:	79fb      	ldrb	r3, [r7, #7]
    95da:	f003 030f 	and.w	r3, r3, #15
    95de:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    95e0:	79fb      	ldrb	r3, [r7, #7]
    95e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    95e6:	2b00      	cmp	r3, #0
    95e8:	bf14      	ite	ne
    95ea:	2301      	movne	r3, #1
    95ec:	2300      	moveq	r3, #0
    95ee:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    95f0:	7cba      	ldrb	r2, [r7, #18]
    95f2:	7cfb      	ldrb	r3, [r7, #19]
    95f4:	4611      	mov	r1, r2
    95f6:	4618      	mov	r0, r3
    95f8:	4b2a      	ldr	r3, [pc, #168]	; (96a4 <_usb_d_dev_ep_deinit+0xdc>)
    95fa:	4798      	blx	r3
    95fc:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    95fe:	7cfb      	ldrb	r3, [r7, #19]
    9600:	2b04      	cmp	r3, #4
    9602:	d84a      	bhi.n	969a <_usb_d_dev_ep_deinit+0xd2>
    9604:	68fb      	ldr	r3, [r7, #12]
    9606:	7c9b      	ldrb	r3, [r3, #18]
    9608:	2bff      	cmp	r3, #255	; 0xff
    960a:	d046      	beq.n	969a <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    960c:	7cbb      	ldrb	r3, [r7, #18]
    960e:	2203      	movs	r2, #3
    9610:	4619      	mov	r1, r3
    9612:	68f8      	ldr	r0, [r7, #12]
    9614:	4b24      	ldr	r3, [pc, #144]	; (96a8 <_usb_d_dev_ep_deinit+0xe0>)
    9616:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9618:	68fb      	ldr	r3, [r7, #12]
    961a:	7cdb      	ldrb	r3, [r3, #19]
    961c:	f003 0307 	and.w	r3, r3, #7
    9620:	b2db      	uxtb	r3, r3
    9622:	2b01      	cmp	r3, #1
    9624:	d107      	bne.n	9636 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    9626:	79fb      	ldrb	r3, [r7, #7]
    9628:	697a      	ldr	r2, [r7, #20]
    962a:	3308      	adds	r3, #8
    962c:	015b      	lsls	r3, r3, #5
    962e:	4413      	add	r3, r2
    9630:	2200      	movs	r2, #0
    9632:	701a      	strb	r2, [r3, #0]
    9634:	e02a      	b.n	968c <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    9636:	f997 3007 	ldrsb.w	r3, [r7, #7]
    963a:	2b00      	cmp	r3, #0
    963c:	da15      	bge.n	966a <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    963e:	79fb      	ldrb	r3, [r7, #7]
    9640:	f003 030f 	and.w	r3, r3, #15
    9644:	79fa      	ldrb	r2, [r7, #7]
    9646:	f002 020f 	and.w	r2, r2, #15
    964a:	6979      	ldr	r1, [r7, #20]
    964c:	3208      	adds	r2, #8
    964e:	0152      	lsls	r2, r2, #5
    9650:	440a      	add	r2, r1
    9652:	7812      	ldrb	r2, [r2, #0]
    9654:	b2d2      	uxtb	r2, r2
    9656:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    965a:	b2d1      	uxtb	r1, r2
    965c:	697a      	ldr	r2, [r7, #20]
    965e:	3308      	adds	r3, #8
    9660:	015b      	lsls	r3, r3, #5
    9662:	4413      	add	r3, r2
    9664:	460a      	mov	r2, r1
    9666:	701a      	strb	r2, [r3, #0]
    9668:	e010      	b.n	968c <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    966a:	79fb      	ldrb	r3, [r7, #7]
    966c:	79fa      	ldrb	r2, [r7, #7]
    966e:	6979      	ldr	r1, [r7, #20]
    9670:	3208      	adds	r2, #8
    9672:	0152      	lsls	r2, r2, #5
    9674:	440a      	add	r2, r1
    9676:	7812      	ldrb	r2, [r2, #0]
    9678:	b2d2      	uxtb	r2, r2
    967a:	f022 0207 	bic.w	r2, r2, #7
    967e:	b2d1      	uxtb	r1, r2
    9680:	697a      	ldr	r2, [r7, #20]
    9682:	3308      	adds	r3, #8
    9684:	015b      	lsls	r3, r3, #5
    9686:	4413      	add	r3, r2
    9688:	460a      	mov	r2, r1
    968a:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    968c:	68fb      	ldr	r3, [r7, #12]
    968e:	2200      	movs	r2, #0
    9690:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    9692:	68fb      	ldr	r3, [r7, #12]
    9694:	22ff      	movs	r2, #255	; 0xff
    9696:	749a      	strb	r2, [r3, #18]
    9698:	e000      	b.n	969c <_usb_d_dev_ep_deinit+0xd4>
		return;
    969a:	bf00      	nop
}
    969c:	3718      	adds	r7, #24
    969e:	46bd      	mov	sp, r7
    96a0:	bd80      	pop	{r7, pc}
    96a2:	bf00      	nop
    96a4:	000084c5 	.word	0x000084c5
    96a8:	00009afd 	.word	0x00009afd

000096ac <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    96ac:	b5b0      	push	{r4, r5, r7, lr}
    96ae:	b088      	sub	sp, #32
    96b0:	af00      	add	r7, sp, #0
    96b2:	4603      	mov	r3, r0
    96b4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    96b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    96ba:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    96bc:	79fb      	ldrb	r3, [r7, #7]
    96be:	f003 030f 	and.w	r3, r3, #15
    96c2:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    96c4:	79fb      	ldrb	r3, [r7, #7]
    96c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    96ca:	2b00      	cmp	r3, #0
    96cc:	bf14      	ite	ne
    96ce:	2301      	movne	r3, #1
    96d0:	2300      	moveq	r3, #0
    96d2:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    96d4:	7eba      	ldrb	r2, [r7, #26]
    96d6:	7efb      	ldrb	r3, [r7, #27]
    96d8:	4611      	mov	r1, r2
    96da:	4618      	mov	r0, r3
    96dc:	4b70      	ldr	r3, [pc, #448]	; (98a0 <_usb_d_dev_ep_enable+0x1f4>)
    96de:	4798      	blx	r3
    96e0:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    96e2:	7efb      	ldrb	r3, [r7, #27]
    96e4:	4619      	mov	r1, r3
    96e6:	69f8      	ldr	r0, [r7, #28]
    96e8:	4b6e      	ldr	r3, [pc, #440]	; (98a4 <_usb_d_dev_ep_enable+0x1f8>)
    96ea:	4798      	blx	r3
    96ec:	4603      	mov	r3, r0
    96ee:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    96f0:	7efb      	ldrb	r3, [r7, #27]
    96f2:	2b04      	cmp	r3, #4
    96f4:	d803      	bhi.n	96fe <_usb_d_dev_ep_enable+0x52>
    96f6:	697b      	ldr	r3, [r7, #20]
    96f8:	7c9b      	ldrb	r3, [r3, #18]
    96fa:	2bff      	cmp	r3, #255	; 0xff
    96fc:	d102      	bne.n	9704 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    96fe:	f06f 0311 	mvn.w	r3, #17
    9702:	e0c8      	b.n	9896 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9704:	7efb      	ldrb	r3, [r7, #27]
    9706:	015b      	lsls	r3, r3, #5
    9708:	4a67      	ldr	r2, [pc, #412]	; (98a8 <_usb_d_dev_ep_enable+0x1fc>)
    970a:	4413      	add	r3, r2
    970c:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    970e:	697b      	ldr	r3, [r7, #20]
    9710:	7cdb      	ldrb	r3, [r3, #19]
    9712:	f003 0307 	and.w	r3, r3, #7
    9716:	b2db      	uxtb	r3, r3
    9718:	2b01      	cmp	r3, #1
    971a:	d14b      	bne.n	97b4 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    971c:	7cfb      	ldrb	r3, [r7, #19]
    971e:	f003 0377 	and.w	r3, r3, #119	; 0x77
    9722:	2b00      	cmp	r3, #0
    9724:	d002      	beq.n	972c <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    9726:	f06f 0313 	mvn.w	r3, #19
    972a:	e0b4      	b.n	9896 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    972c:	7efb      	ldrb	r3, [r7, #27]
    972e:	2211      	movs	r2, #17
    9730:	4619      	mov	r1, r3
    9732:	69f8      	ldr	r0, [r7, #28]
    9734:	4b5d      	ldr	r3, [pc, #372]	; (98ac <_usb_d_dev_ep_enable+0x200>)
    9736:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9738:	697b      	ldr	r3, [r7, #20]
    973a:	8a1b      	ldrh	r3, [r3, #16]
    973c:	039b      	lsls	r3, r3, #14
    973e:	4c5c      	ldr	r4, [pc, #368]	; (98b0 <_usb_d_dev_ep_enable+0x204>)
    9740:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9742:	697b      	ldr	r3, [r7, #20]
    9744:	8a1b      	ldrh	r3, [r3, #16]
    9746:	4618      	mov	r0, r3
    9748:	4b5a      	ldr	r3, [pc, #360]	; (98b4 <_usb_d_dev_ep_enable+0x208>)
    974a:	4798      	blx	r3
    974c:	4603      	mov	r3, r0
    974e:	071b      	lsls	r3, r3, #28
    9750:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9754:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9758:	68fb      	ldr	r3, [r7, #12]
    975a:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    975c:	68fb      	ldr	r3, [r7, #12]
    975e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9762:	697b      	ldr	r3, [r7, #20]
    9764:	8a1b      	ldrh	r3, [r3, #16]
    9766:	f3c3 050d 	ubfx	r5, r3, #0, #14
    976a:	697b      	ldr	r3, [r7, #20]
    976c:	8a1b      	ldrh	r3, [r3, #16]
    976e:	4618      	mov	r0, r3
    9770:	4b50      	ldr	r3, [pc, #320]	; (98b4 <_usb_d_dev_ep_enable+0x208>)
    9772:	4798      	blx	r3
    9774:	4603      	mov	r3, r0
    9776:	071b      	lsls	r3, r3, #28
    9778:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    977c:	432b      	orrs	r3, r5
    977e:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9780:	7efb      	ldrb	r3, [r7, #27]
    9782:	2200      	movs	r2, #0
    9784:	2100      	movs	r1, #0
    9786:	4618      	mov	r0, r3
    9788:	4b4b      	ldr	r3, [pc, #300]	; (98b8 <_usb_d_dev_ep_enable+0x20c>)
    978a:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    978c:	7efb      	ldrb	r3, [r7, #27]
    978e:	2200      	movs	r2, #0
    9790:	2101      	movs	r1, #1
    9792:	4618      	mov	r0, r3
    9794:	4b49      	ldr	r3, [pc, #292]	; (98bc <_usb_d_dev_ep_enable+0x210>)
    9796:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    9798:	7efb      	ldrb	r3, [r7, #27]
    979a:	2100      	movs	r1, #0
    979c:	4618      	mov	r0, r3
    979e:	4b48      	ldr	r3, [pc, #288]	; (98c0 <_usb_d_dev_ep_enable+0x214>)
    97a0:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    97a2:	7efb      	ldrb	r3, [r7, #27]
    97a4:	2101      	movs	r1, #1
    97a6:	4618      	mov	r0, r3
    97a8:	4b45      	ldr	r3, [pc, #276]	; (98c0 <_usb_d_dev_ep_enable+0x214>)
    97aa:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    97ac:	6978      	ldr	r0, [r7, #20]
    97ae:	4b45      	ldr	r3, [pc, #276]	; (98c4 <_usb_d_dev_ep_enable+0x218>)
    97b0:	4798      	blx	r3
    97b2:	e06f      	b.n	9894 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    97b4:	7ebb      	ldrb	r3, [r7, #26]
    97b6:	2b00      	cmp	r3, #0
    97b8:	d038      	beq.n	982c <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    97ba:	7cfb      	ldrb	r3, [r7, #19]
    97bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    97c0:	2b00      	cmp	r3, #0
    97c2:	d002      	beq.n	97ca <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    97c4:	f06f 0313 	mvn.w	r3, #19
    97c8:	e065      	b.n	9896 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    97ca:	697b      	ldr	r3, [r7, #20]
    97cc:	7cdb      	ldrb	r3, [r3, #19]
    97ce:	f3c3 0302 	ubfx	r3, r3, #0, #3
    97d2:	b2db      	uxtb	r3, r3
    97d4:	011b      	lsls	r3, r3, #4
    97d6:	b2db      	uxtb	r3, r3
    97d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    97dc:	b2da      	uxtb	r2, r3
    97de:	7cfb      	ldrb	r3, [r7, #19]
    97e0:	4313      	orrs	r3, r2
    97e2:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    97e4:	7cfa      	ldrb	r2, [r7, #19]
    97e6:	7efb      	ldrb	r3, [r7, #27]
    97e8:	4619      	mov	r1, r3
    97ea:	69f8      	ldr	r0, [r7, #28]
    97ec:	4b2f      	ldr	r3, [pc, #188]	; (98ac <_usb_d_dev_ep_enable+0x200>)
    97ee:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    97f0:	68fb      	ldr	r3, [r7, #12]
    97f2:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    97f6:	697b      	ldr	r3, [r7, #20]
    97f8:	8a1b      	ldrh	r3, [r3, #16]
    97fa:	f3c3 050d 	ubfx	r5, r3, #0, #14
    97fe:	697b      	ldr	r3, [r7, #20]
    9800:	8a1b      	ldrh	r3, [r3, #16]
    9802:	4618      	mov	r0, r3
    9804:	4b2b      	ldr	r3, [pc, #172]	; (98b4 <_usb_d_dev_ep_enable+0x208>)
    9806:	4798      	blx	r3
    9808:	4603      	mov	r3, r0
    980a:	071b      	lsls	r3, r3, #28
    980c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9810:	432b      	orrs	r3, r5
    9812:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9814:	7efb      	ldrb	r3, [r7, #27]
    9816:	2200      	movs	r2, #0
    9818:	2101      	movs	r1, #1
    981a:	4618      	mov	r0, r3
    981c:	4b27      	ldr	r3, [pc, #156]	; (98bc <_usb_d_dev_ep_enable+0x210>)
    981e:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9820:	7efb      	ldrb	r3, [r7, #27]
    9822:	2101      	movs	r1, #1
    9824:	4618      	mov	r0, r3
    9826:	4b26      	ldr	r3, [pc, #152]	; (98c0 <_usb_d_dev_ep_enable+0x214>)
    9828:	4798      	blx	r3
    982a:	e033      	b.n	9894 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    982c:	7cfb      	ldrb	r3, [r7, #19]
    982e:	f003 0307 	and.w	r3, r3, #7
    9832:	2b00      	cmp	r3, #0
    9834:	d002      	beq.n	983c <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    9836:	f06f 0313 	mvn.w	r3, #19
    983a:	e02c      	b.n	9896 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    983c:	697b      	ldr	r3, [r7, #20]
    983e:	7cdb      	ldrb	r3, [r3, #19]
    9840:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9844:	b2db      	uxtb	r3, r3
    9846:	461a      	mov	r2, r3
    9848:	7cfb      	ldrb	r3, [r7, #19]
    984a:	4313      	orrs	r3, r2
    984c:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    984e:	7cfa      	ldrb	r2, [r7, #19]
    9850:	7efb      	ldrb	r3, [r7, #27]
    9852:	4619      	mov	r1, r3
    9854:	69f8      	ldr	r0, [r7, #28]
    9856:	4b15      	ldr	r3, [pc, #84]	; (98ac <_usb_d_dev_ep_enable+0x200>)
    9858:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    985a:	697b      	ldr	r3, [r7, #20]
    985c:	8a1b      	ldrh	r3, [r3, #16]
    985e:	039b      	lsls	r3, r3, #14
    9860:	4c13      	ldr	r4, [pc, #76]	; (98b0 <_usb_d_dev_ep_enable+0x204>)
    9862:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9864:	697b      	ldr	r3, [r7, #20]
    9866:	8a1b      	ldrh	r3, [r3, #16]
    9868:	4618      	mov	r0, r3
    986a:	4b12      	ldr	r3, [pc, #72]	; (98b4 <_usb_d_dev_ep_enable+0x208>)
    986c:	4798      	blx	r3
    986e:	4603      	mov	r3, r0
    9870:	071b      	lsls	r3, r3, #28
    9872:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9876:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    987a:	68fb      	ldr	r3, [r7, #12]
    987c:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    987e:	7efb      	ldrb	r3, [r7, #27]
    9880:	2200      	movs	r2, #0
    9882:	2100      	movs	r1, #0
    9884:	4618      	mov	r0, r3
    9886:	4b0c      	ldr	r3, [pc, #48]	; (98b8 <_usb_d_dev_ep_enable+0x20c>)
    9888:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    988a:	7efb      	ldrb	r3, [r7, #27]
    988c:	2100      	movs	r1, #0
    988e:	4618      	mov	r0, r3
    9890:	4b0b      	ldr	r3, [pc, #44]	; (98c0 <_usb_d_dev_ep_enable+0x214>)
    9892:	4798      	blx	r3
	}

	return USB_OK;
    9894:	2300      	movs	r3, #0
}
    9896:	4618      	mov	r0, r3
    9898:	3720      	adds	r7, #32
    989a:	46bd      	mov	sp, r7
    989c:	bdb0      	pop	{r4, r5, r7, pc}
    989e:	bf00      	nop
    98a0:	000084c5 	.word	0x000084c5
    98a4:	00007b4b 	.word	0x00007b4b
    98a8:	200009a8 	.word	0x200009a8
    98ac:	00007b21 	.word	0x00007b21
    98b0:	0fffc000 	.word	0x0fffc000
    98b4:	00008461 	.word	0x00008461
    98b8:	00008409 	.word	0x00008409
    98bc:	000083b1 	.word	0x000083b1
    98c0:	00008379 	.word	0x00008379
    98c4:	0000941d 	.word	0x0000941d

000098c8 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    98c8:	b580      	push	{r7, lr}
    98ca:	b084      	sub	sp, #16
    98cc:	af00      	add	r7, sp, #0
    98ce:	6078      	str	r0, [r7, #4]
    98d0:	460b      	mov	r3, r1
    98d2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    98d4:	687b      	ldr	r3, [r7, #4]
    98d6:	7c9b      	ldrb	r3, [r3, #18]
    98d8:	f003 030f 	and.w	r3, r3, #15
    98dc:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    98de:	78fa      	ldrb	r2, [r7, #3]
    98e0:	7bfb      	ldrb	r3, [r7, #15]
    98e2:	4611      	mov	r1, r2
    98e4:	4618      	mov	r0, r3
    98e6:	4b03      	ldr	r3, [pc, #12]	; (98f4 <_usb_d_dev_ep_stall_get+0x2c>)
    98e8:	4798      	blx	r3
    98ea:	4603      	mov	r3, r0
}
    98ec:	4618      	mov	r0, r3
    98ee:	3710      	adds	r7, #16
    98f0:	46bd      	mov	sp, r7
    98f2:	bd80      	pop	{r7, pc}
    98f4:	00007fb9 	.word	0x00007fb9

000098f8 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    98f8:	b580      	push	{r7, lr}
    98fa:	b084      	sub	sp, #16
    98fc:	af00      	add	r7, sp, #0
    98fe:	6078      	str	r0, [r7, #4]
    9900:	460b      	mov	r3, r1
    9902:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9904:	687b      	ldr	r3, [r7, #4]
    9906:	7c9b      	ldrb	r3, [r3, #18]
    9908:	f003 030f 	and.w	r3, r3, #15
    990c:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    990e:	78f9      	ldrb	r1, [r7, #3]
    9910:	7bfb      	ldrb	r3, [r7, #15]
    9912:	2201      	movs	r2, #1
    9914:	4618      	mov	r0, r3
    9916:	4b0a      	ldr	r3, [pc, #40]	; (9940 <_usb_d_dev_ep_stall_set+0x48>)
    9918:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    991a:	78fb      	ldrb	r3, [r7, #3]
    991c:	2220      	movs	r2, #32
    991e:	409a      	lsls	r2, r3
    9920:	7bfb      	ldrb	r3, [r7, #15]
    9922:	4611      	mov	r1, r2
    9924:	4618      	mov	r0, r3
    9926:	4b07      	ldr	r3, [pc, #28]	; (9944 <_usb_d_dev_ep_stall_set+0x4c>)
    9928:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    992a:	687a      	ldr	r2, [r7, #4]
    992c:	7cd3      	ldrb	r3, [r2, #19]
    992e:	f043 0308 	orr.w	r3, r3, #8
    9932:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    9934:	2300      	movs	r3, #0
}
    9936:	4618      	mov	r0, r3
    9938:	3710      	adds	r7, #16
    993a:	46bd      	mov	sp, r7
    993c:	bd80      	pop	{r7, pc}
    993e:	bf00      	nop
    9940:	00007f61 	.word	0x00007f61
    9944:	00007ee1 	.word	0x00007ee1

00009948 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    9948:	b580      	push	{r7, lr}
    994a:	b084      	sub	sp, #16
    994c:	af00      	add	r7, sp, #0
    994e:	6078      	str	r0, [r7, #4]
    9950:	460b      	mov	r3, r1
    9952:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9954:	687b      	ldr	r3, [r7, #4]
    9956:	7c9b      	ldrb	r3, [r3, #18]
    9958:	f003 030f 	and.w	r3, r3, #15
    995c:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    995e:	78fa      	ldrb	r2, [r7, #3]
    9960:	7bfb      	ldrb	r3, [r7, #15]
    9962:	4611      	mov	r1, r2
    9964:	4618      	mov	r0, r3
    9966:	4b28      	ldr	r3, [pc, #160]	; (9a08 <_usb_d_dev_ep_stall_clr+0xc0>)
    9968:	4798      	blx	r3
    996a:	4603      	mov	r3, r0
    996c:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    996e:	7bbb      	ldrb	r3, [r7, #14]
    9970:	f083 0301 	eor.w	r3, r3, #1
    9974:	b2db      	uxtb	r3, r3
    9976:	2b00      	cmp	r3, #0
    9978:	d001      	beq.n	997e <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    997a:	2300      	movs	r3, #0
    997c:	e040      	b.n	9a00 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    997e:	78f9      	ldrb	r1, [r7, #3]
    9980:	7bfb      	ldrb	r3, [r7, #15]
    9982:	2200      	movs	r2, #0
    9984:	4618      	mov	r0, r3
    9986:	4b21      	ldr	r3, [pc, #132]	; (9a0c <_usb_d_dev_ep_stall_clr+0xc4>)
    9988:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    998a:	78fb      	ldrb	r3, [r7, #3]
    998c:	2220      	movs	r2, #32
    998e:	409a      	lsls	r2, r3
    9990:	7bfb      	ldrb	r3, [r7, #15]
    9992:	4611      	mov	r1, r2
    9994:	4618      	mov	r0, r3
    9996:	4b1e      	ldr	r3, [pc, #120]	; (9a10 <_usb_d_dev_ep_stall_clr+0xc8>)
    9998:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    999a:	78fa      	ldrb	r2, [r7, #3]
    999c:	7bfb      	ldrb	r3, [r7, #15]
    999e:	4611      	mov	r1, r2
    99a0:	4618      	mov	r0, r3
    99a2:	4b1c      	ldr	r3, [pc, #112]	; (9a14 <_usb_d_dev_ep_stall_clr+0xcc>)
    99a4:	4798      	blx	r3
    99a6:	4603      	mov	r3, r0
    99a8:	2b00      	cmp	r3, #0
    99aa:	d00b      	beq.n	99c4 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    99ac:	78fa      	ldrb	r2, [r7, #3]
    99ae:	7bfb      	ldrb	r3, [r7, #15]
    99b0:	4611      	mov	r1, r2
    99b2:	4618      	mov	r0, r3
    99b4:	4b18      	ldr	r3, [pc, #96]	; (9a18 <_usb_d_dev_ep_stall_clr+0xd0>)
    99b6:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    99b8:	78f9      	ldrb	r1, [r7, #3]
    99ba:	7bfb      	ldrb	r3, [r7, #15]
    99bc:	2200      	movs	r2, #0
    99be:	4618      	mov	r0, r3
    99c0:	4b16      	ldr	r3, [pc, #88]	; (9a1c <_usb_d_dev_ep_stall_clr+0xd4>)
    99c2:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    99c4:	687b      	ldr	r3, [r7, #4]
    99c6:	7cdb      	ldrb	r3, [r3, #19]
    99c8:	f003 0307 	and.w	r3, r3, #7
    99cc:	b2db      	uxtb	r3, r3
    99ce:	2b01      	cmp	r3, #1
    99d0:	d110      	bne.n	99f4 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    99d2:	7bfb      	ldrb	r3, [r7, #15]
    99d4:	4619      	mov	r1, r3
    99d6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99da:	4b11      	ldr	r3, [pc, #68]	; (9a20 <_usb_d_dev_ep_stall_clr+0xd8>)
    99dc:	4798      	blx	r3
    99de:	4603      	mov	r3, r0
    99e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
    99e4:	2b00      	cmp	r3, #0
    99e6:	d10a      	bne.n	99fe <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    99e8:	687a      	ldr	r2, [r7, #4]
    99ea:	7cd3      	ldrb	r3, [r2, #19]
    99ec:	f36f 03c3 	bfc	r3, #3, #1
    99f0:	74d3      	strb	r3, [r2, #19]
    99f2:	e004      	b.n	99fe <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    99f4:	687a      	ldr	r2, [r7, #4]
    99f6:	7cd3      	ldrb	r3, [r2, #19]
    99f8:	f36f 03c3 	bfc	r3, #3, #1
    99fc:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    99fe:	2300      	movs	r3, #0
}
    9a00:	4618      	mov	r0, r3
    9a02:	3710      	adds	r7, #16
    9a04:	46bd      	mov	sp, r7
    9a06:	bd80      	pop	{r7, pc}
    9a08:	00007fb9 	.word	0x00007fb9
    9a0c:	00007f61 	.word	0x00007f61
    9a10:	00007f09 	.word	0x00007f09
    9a14:	00007ffd 	.word	0x00007ffd
    9a18:	00008041 	.word	0x00008041
    9a1c:	0000812d 	.word	0x0000812d
    9a20:	000079e9 	.word	0x000079e9

00009a24 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    9a24:	b580      	push	{r7, lr}
    9a26:	b086      	sub	sp, #24
    9a28:	af00      	add	r7, sp, #0
    9a2a:	4603      	mov	r3, r0
    9a2c:	460a      	mov	r2, r1
    9a2e:	71fb      	strb	r3, [r7, #7]
    9a30:	4613      	mov	r3, r2
    9a32:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    9a34:	79fb      	ldrb	r3, [r7, #7]
    9a36:	f003 030f 	and.w	r3, r3, #15
    9a3a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9a3c:	79fb      	ldrb	r3, [r7, #7]
    9a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9a42:	2b00      	cmp	r3, #0
    9a44:	bf14      	ite	ne
    9a46:	2301      	movne	r3, #1
    9a48:	2300      	moveq	r3, #0
    9a4a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9a4c:	7cba      	ldrb	r2, [r7, #18]
    9a4e:	7cfb      	ldrb	r3, [r7, #19]
    9a50:	4611      	mov	r1, r2
    9a52:	4618      	mov	r0, r3
    9a54:	4b13      	ldr	r3, [pc, #76]	; (9aa4 <_usb_d_dev_ep_stall+0x80>)
    9a56:	4798      	blx	r3
    9a58:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9a5a:	7cfb      	ldrb	r3, [r7, #19]
    9a5c:	2b04      	cmp	r3, #4
    9a5e:	d902      	bls.n	9a66 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    9a60:	f06f 0311 	mvn.w	r3, #17
    9a64:	e01a      	b.n	9a9c <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    9a66:	79bb      	ldrb	r3, [r7, #6]
    9a68:	2b01      	cmp	r3, #1
    9a6a:	d106      	bne.n	9a7a <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9a6c:	7cbb      	ldrb	r3, [r7, #18]
    9a6e:	4619      	mov	r1, r3
    9a70:	68f8      	ldr	r0, [r7, #12]
    9a72:	4b0d      	ldr	r3, [pc, #52]	; (9aa8 <_usb_d_dev_ep_stall+0x84>)
    9a74:	4798      	blx	r3
    9a76:	6178      	str	r0, [r7, #20]
    9a78:	e00f      	b.n	9a9a <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    9a7a:	79bb      	ldrb	r3, [r7, #6]
    9a7c:	2b00      	cmp	r3, #0
    9a7e:	d106      	bne.n	9a8e <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9a80:	7cbb      	ldrb	r3, [r7, #18]
    9a82:	4619      	mov	r1, r3
    9a84:	68f8      	ldr	r0, [r7, #12]
    9a86:	4b09      	ldr	r3, [pc, #36]	; (9aac <_usb_d_dev_ep_stall+0x88>)
    9a88:	4798      	blx	r3
    9a8a:	6178      	str	r0, [r7, #20]
    9a8c:	e005      	b.n	9a9a <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    9a8e:	7cbb      	ldrb	r3, [r7, #18]
    9a90:	4619      	mov	r1, r3
    9a92:	68f8      	ldr	r0, [r7, #12]
    9a94:	4b06      	ldr	r3, [pc, #24]	; (9ab0 <_usb_d_dev_ep_stall+0x8c>)
    9a96:	4798      	blx	r3
    9a98:	6178      	str	r0, [r7, #20]
	}
	return rc;
    9a9a:	697b      	ldr	r3, [r7, #20]
}
    9a9c:	4618      	mov	r0, r3
    9a9e:	3718      	adds	r7, #24
    9aa0:	46bd      	mov	sp, r7
    9aa2:	bd80      	pop	{r7, pc}
    9aa4:	000084c5 	.word	0x000084c5
    9aa8:	000098f9 	.word	0x000098f9
    9aac:	00009949 	.word	0x00009949
    9ab0:	000098c9 	.word	0x000098c9

00009ab4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    9ab4:	b580      	push	{r7, lr}
    9ab6:	b082      	sub	sp, #8
    9ab8:	af00      	add	r7, sp, #0
    9aba:	6078      	str	r0, [r7, #4]
    9abc:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9abe:	687b      	ldr	r3, [r7, #4]
    9ac0:	7c9b      	ldrb	r3, [r3, #18]
    9ac2:	2bff      	cmp	r3, #255	; 0xff
    9ac4:	d014      	beq.n	9af0 <_usb_d_dev_trans_done+0x3c>
    9ac6:	687b      	ldr	r3, [r7, #4]
    9ac8:	7cdb      	ldrb	r3, [r3, #19]
    9aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ace:	b2db      	uxtb	r3, r3
    9ad0:	2b00      	cmp	r3, #0
    9ad2:	d00d      	beq.n	9af0 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    9ad4:	687a      	ldr	r2, [r7, #4]
    9ad6:	7cd3      	ldrb	r3, [r2, #19]
    9ad8:	f36f 1386 	bfc	r3, #6, #1
    9adc:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    9ade:	4b06      	ldr	r3, [pc, #24]	; (9af8 <_usb_d_dev_trans_done+0x44>)
    9ae0:	691b      	ldr	r3, [r3, #16]
    9ae2:	687a      	ldr	r2, [r7, #4]
    9ae4:	7c90      	ldrb	r0, [r2, #18]
    9ae6:	687a      	ldr	r2, [r7, #4]
    9ae8:	6892      	ldr	r2, [r2, #8]
    9aea:	6839      	ldr	r1, [r7, #0]
    9aec:	4798      	blx	r3
    9aee:	e000      	b.n	9af2 <_usb_d_dev_trans_done+0x3e>
		return;
    9af0:	bf00      	nop
}
    9af2:	3708      	adds	r7, #8
    9af4:	46bd      	mov	sp, r7
    9af6:	bd80      	pop	{r7, pc}
    9af8:	200008e0 	.word	0x200008e0

00009afc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    9afc:	b580      	push	{r7, lr}
    9afe:	b086      	sub	sp, #24
    9b00:	af00      	add	r7, sp, #0
    9b02:	60f8      	str	r0, [r7, #12]
    9b04:	460b      	mov	r3, r1
    9b06:	607a      	str	r2, [r7, #4]
    9b08:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9b0a:	68fb      	ldr	r3, [r7, #12]
    9b0c:	7c9b      	ldrb	r3, [r3, #18]
    9b0e:	f003 030f 	and.w	r3, r3, #15
    9b12:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    9b14:	4b1f      	ldr	r3, [pc, #124]	; (9b94 <_usb_d_dev_trans_stop+0x98>)
    9b16:	881b      	ldrh	r3, [r3, #0]
    9b18:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9b1a:	68fb      	ldr	r3, [r7, #12]
    9b1c:	7c9b      	ldrb	r3, [r3, #18]
    9b1e:	2bff      	cmp	r3, #255	; 0xff
    9b20:	d033      	beq.n	9b8a <_usb_d_dev_trans_stop+0x8e>
    9b22:	68fb      	ldr	r3, [r7, #12]
    9b24:	7cdb      	ldrb	r3, [r3, #19]
    9b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b2a:	b2db      	uxtb	r3, r3
    9b2c:	2b00      	cmp	r3, #0
    9b2e:	d02c      	beq.n	9b8a <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    9b30:	7afb      	ldrb	r3, [r7, #11]
    9b32:	2b00      	cmp	r3, #0
    9b34:	d006      	beq.n	9b44 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9b36:	7dfb      	ldrb	r3, [r7, #23]
    9b38:	2200      	movs	r2, #0
    9b3a:	2101      	movs	r1, #1
    9b3c:	4618      	mov	r0, r3
    9b3e:	4b16      	ldr	r3, [pc, #88]	; (9b98 <_usb_d_dev_trans_stop+0x9c>)
    9b40:	4798      	blx	r3
    9b42:	e005      	b.n	9b50 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9b44:	7dfb      	ldrb	r3, [r7, #23]
    9b46:	2200      	movs	r2, #0
    9b48:	2100      	movs	r1, #0
    9b4a:	4618      	mov	r0, r3
    9b4c:	4b13      	ldr	r3, [pc, #76]	; (9b9c <_usb_d_dev_trans_stop+0xa0>)
    9b4e:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    9b50:	7afb      	ldrb	r3, [r7, #11]
    9b52:	f107 0218 	add.w	r2, r7, #24
    9b56:	4413      	add	r3, r2
    9b58:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9b5c:	461a      	mov	r2, r3
    9b5e:	7dfb      	ldrb	r3, [r7, #23]
    9b60:	4611      	mov	r1, r2
    9b62:	4618      	mov	r0, r3
    9b64:	4b0e      	ldr	r3, [pc, #56]	; (9ba0 <_usb_d_dev_trans_stop+0xa4>)
    9b66:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    9b68:	7afb      	ldrb	r3, [r7, #11]
    9b6a:	f107 0218 	add.w	r2, r7, #24
    9b6e:	4413      	add	r3, r2
    9b70:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9b74:	461a      	mov	r2, r3
    9b76:	7dfb      	ldrb	r3, [r7, #23]
    9b78:	4611      	mov	r1, r2
    9b7a:	4618      	mov	r0, r3
    9b7c:	4b09      	ldr	r3, [pc, #36]	; (9ba4 <_usb_d_dev_trans_stop+0xa8>)
    9b7e:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    9b80:	6879      	ldr	r1, [r7, #4]
    9b82:	68f8      	ldr	r0, [r7, #12]
    9b84:	4b08      	ldr	r3, [pc, #32]	; (9ba8 <_usb_d_dev_trans_stop+0xac>)
    9b86:	4798      	blx	r3
    9b88:	e000      	b.n	9b8c <_usb_d_dev_trans_stop+0x90>
		return;
    9b8a:	bf00      	nop
}
    9b8c:	3718      	adds	r7, #24
    9b8e:	46bd      	mov	sp, r7
    9b90:	bd80      	pop	{r7, pc}
    9b92:	bf00      	nop
    9b94:	0000cf08 	.word	0x0000cf08
    9b98:	000083b1 	.word	0x000083b1
    9b9c:	00008409 	.word	0x00008409
    9ba0:	00007eb9 	.word	0x00007eb9
    9ba4:	00007f09 	.word	0x00007f09
    9ba8:	00009ab5 	.word	0x00009ab5

00009bac <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9bac:	b580      	push	{r7, lr}
    9bae:	b086      	sub	sp, #24
    9bb0:	af00      	add	r7, sp, #0
    9bb2:	4603      	mov	r3, r0
    9bb4:	6039      	str	r1, [r7, #0]
    9bb6:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    9bb8:	79fb      	ldrb	r3, [r7, #7]
    9bba:	f003 030f 	and.w	r3, r3, #15
    9bbe:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9bc0:	7dfb      	ldrb	r3, [r7, #23]
    9bc2:	015b      	lsls	r3, r3, #5
    9bc4:	4a1e      	ldr	r2, [pc, #120]	; (9c40 <_usb_d_dev_ep_read_req+0x94>)
    9bc6:	4413      	add	r3, r2
    9bc8:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    9bca:	693b      	ldr	r3, [r7, #16]
    9bcc:	681b      	ldr	r3, [r3, #0]
    9bce:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    9bd0:	693b      	ldr	r3, [r7, #16]
    9bd2:	685b      	ldr	r3, [r3, #4]
    9bd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9bd8:	b29b      	uxth	r3, r3
    9bda:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9bdc:	7dfb      	ldrb	r3, [r7, #23]
    9bde:	2b04      	cmp	r3, #4
    9be0:	d802      	bhi.n	9be8 <_usb_d_dev_ep_read_req+0x3c>
    9be2:	683b      	ldr	r3, [r7, #0]
    9be4:	2b00      	cmp	r3, #0
    9be6:	d102      	bne.n	9bee <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    9be8:	f06f 0311 	mvn.w	r3, #17
    9bec:	e023      	b.n	9c36 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9bee:	7dfb      	ldrb	r3, [r7, #23]
    9bf0:	4618      	mov	r0, r3
    9bf2:	4b14      	ldr	r3, [pc, #80]	; (9c44 <_usb_d_dev_ep_read_req+0x98>)
    9bf4:	4798      	blx	r3
    9bf6:	4603      	mov	r3, r0
    9bf8:	f083 0301 	eor.w	r3, r3, #1
    9bfc:	b2db      	uxtb	r3, r3
    9bfe:	2b00      	cmp	r3, #0
    9c00:	d002      	beq.n	9c08 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    9c02:	f06f 0312 	mvn.w	r3, #18
    9c06:	e016      	b.n	9c36 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    9c08:	7dfb      	ldrb	r3, [r7, #23]
    9c0a:	4618      	mov	r0, r3
    9c0c:	4b0e      	ldr	r3, [pc, #56]	; (9c48 <_usb_d_dev_ep_read_req+0x9c>)
    9c0e:	4798      	blx	r3
    9c10:	4603      	mov	r3, r0
    9c12:	f083 0301 	eor.w	r3, r3, #1
    9c16:	b2db      	uxtb	r3, r3
    9c18:	2b00      	cmp	r3, #0
    9c1a:	d001      	beq.n	9c20 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    9c1c:	2300      	movs	r3, #0
    9c1e:	e00a      	b.n	9c36 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    9c20:	68fb      	ldr	r3, [r7, #12]
    9c22:	2208      	movs	r2, #8
    9c24:	4619      	mov	r1, r3
    9c26:	6838      	ldr	r0, [r7, #0]
    9c28:	4b08      	ldr	r3, [pc, #32]	; (9c4c <_usb_d_dev_ep_read_req+0xa0>)
    9c2a:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    9c2c:	7dfb      	ldrb	r3, [r7, #23]
    9c2e:	4618      	mov	r0, r3
    9c30:	4b07      	ldr	r3, [pc, #28]	; (9c50 <_usb_d_dev_ep_read_req+0xa4>)
    9c32:	4798      	blx	r3

	return bytes;
    9c34:	897b      	ldrh	r3, [r7, #10]
}
    9c36:	4618      	mov	r0, r3
    9c38:	3718      	adds	r7, #24
    9c3a:	46bd      	mov	sp, r7
    9c3c:	bd80      	pop	{r7, pc}
    9c3e:	bf00      	nop
    9c40:	200009a8 	.word	0x200009a8
    9c44:	00007f31 	.word	0x00007f31
    9c48:	000080dd 	.word	0x000080dd
    9c4c:	0000c885 	.word	0x0000c885
    9c50:	0000810d 	.word	0x0000810d

00009c54 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    9c54:	b580      	push	{r7, lr}
    9c56:	b086      	sub	sp, #24
    9c58:	af00      	add	r7, sp, #0
    9c5a:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    9c5c:	687b      	ldr	r3, [r7, #4]
    9c5e:	7a1b      	ldrb	r3, [r3, #8]
    9c60:	f003 030f 	and.w	r3, r3, #15
    9c64:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    9c66:	687b      	ldr	r3, [r7, #4]
    9c68:	7a1b      	ldrb	r3, [r3, #8]
    9c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9c6e:	2b00      	cmp	r3, #0
    9c70:	bf14      	ite	ne
    9c72:	2301      	movne	r3, #1
    9c74:	2300      	moveq	r3, #0
    9c76:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9c78:	7d7a      	ldrb	r2, [r7, #21]
    9c7a:	7dbb      	ldrb	r3, [r7, #22]
    9c7c:	4611      	mov	r1, r2
    9c7e:	4618      	mov	r0, r3
    9c80:	4b5f      	ldr	r3, [pc, #380]	; (9e00 <_usb_d_dev_ep_trans+0x1ac>)
    9c82:	4798      	blx	r3
    9c84:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9c86:	693b      	ldr	r3, [r7, #16]
    9c88:	8a1b      	ldrh	r3, [r3, #16]
    9c8a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9c8e:	4293      	cmp	r3, r2
    9c90:	d004      	beq.n	9c9c <_usb_d_dev_ep_trans+0x48>
    9c92:	693b      	ldr	r3, [r7, #16]
    9c94:	8a1b      	ldrh	r3, [r3, #16]
    9c96:	3b01      	subs	r3, #1
    9c98:	b29b      	uxth	r3, r3
    9c9a:	e001      	b.n	9ca0 <_usb_d_dev_ep_trans+0x4c>
    9c9c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9ca0:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    9ca2:	687b      	ldr	r3, [r7, #4]
    9ca4:	685a      	ldr	r2, [r3, #4]
    9ca6:	89fb      	ldrh	r3, [r7, #14]
    9ca8:	4013      	ands	r3, r2
    9caa:	2b00      	cmp	r3, #0
    9cac:	bf14      	ite	ne
    9cae:	2301      	movne	r3, #1
    9cb0:	2300      	moveq	r3, #0
    9cb2:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    9cb4:	2300      	movs	r3, #0
    9cb6:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9cb8:	7dbb      	ldrb	r3, [r7, #22]
    9cba:	2b04      	cmp	r3, #4
    9cbc:	d902      	bls.n	9cc4 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    9cbe:	f06f 0311 	mvn.w	r3, #17
    9cc2:	e098      	b.n	9df6 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    9cc4:	687b      	ldr	r3, [r7, #4]
    9cc6:	681b      	ldr	r3, [r3, #0]
    9cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    9ccc:	d31a      	bcc.n	9d04 <_usb_d_dev_ep_trans+0xb0>
    9cce:	687b      	ldr	r3, [r7, #4]
    9cd0:	681b      	ldr	r3, [r3, #0]
    9cd2:	461a      	mov	r2, r3
    9cd4:	687b      	ldr	r3, [r7, #4]
    9cd6:	685b      	ldr	r3, [r3, #4]
    9cd8:	4413      	add	r3, r2
    9cda:	4a4a      	ldr	r2, [pc, #296]	; (9e04 <_usb_d_dev_ep_trans+0x1b0>)
    9cdc:	4293      	cmp	r3, r2
    9cde:	d811      	bhi.n	9d04 <_usb_d_dev_ep_trans+0xb0>
    9ce0:	687b      	ldr	r3, [r7, #4]
    9ce2:	681b      	ldr	r3, [r3, #0]
    9ce4:	f003 0303 	and.w	r3, r3, #3
    9ce8:	2b00      	cmp	r3, #0
    9cea:	d10b      	bne.n	9d04 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    9cec:	7d7b      	ldrb	r3, [r7, #21]
    9cee:	f083 0301 	eor.w	r3, r3, #1
    9cf2:	b2db      	uxtb	r3, r3
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d00e      	beq.n	9d16 <_usb_d_dev_ep_trans+0xc2>
    9cf8:	687b      	ldr	r3, [r7, #4]
    9cfa:	685b      	ldr	r3, [r3, #4]
    9cfc:	693a      	ldr	r2, [r7, #16]
    9cfe:	8a12      	ldrh	r2, [r2, #16]
    9d00:	4293      	cmp	r3, r2
    9d02:	d208      	bcs.n	9d16 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    9d04:	693b      	ldr	r3, [r7, #16]
    9d06:	68db      	ldr	r3, [r3, #12]
    9d08:	2b00      	cmp	r3, #0
    9d0a:	d102      	bne.n	9d12 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    9d0c:	f06f 0312 	mvn.w	r3, #18
    9d10:	e071      	b.n	9df6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    9d12:	2301      	movs	r3, #1
    9d14:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    9d16:	7d7b      	ldrb	r3, [r7, #21]
    9d18:	f083 0301 	eor.w	r3, r3, #1
    9d1c:	b2db      	uxtb	r3, r3
    9d1e:	2b00      	cmp	r3, #0
    9d20:	d009      	beq.n	9d36 <_usb_d_dev_ep_trans+0xe2>
    9d22:	7b7b      	ldrb	r3, [r7, #13]
    9d24:	2b00      	cmp	r3, #0
    9d26:	d006      	beq.n	9d36 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    9d28:	693b      	ldr	r3, [r7, #16]
    9d2a:	68db      	ldr	r3, [r3, #12]
    9d2c:	2b00      	cmp	r3, #0
    9d2e:	d102      	bne.n	9d36 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    9d30:	f06f 0311 	mvn.w	r3, #17
    9d34:	e05f      	b.n	9df6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    9d36:	693b      	ldr	r3, [r7, #16]
    9d38:	7cdb      	ldrb	r3, [r3, #19]
    9d3a:	f003 0308 	and.w	r3, r3, #8
    9d3e:	b2db      	uxtb	r3, r3
    9d40:	2b00      	cmp	r3, #0
    9d42:	d001      	beq.n	9d48 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    9d44:	2302      	movs	r3, #2
    9d46:	e056      	b.n	9df6 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    9d48:	f107 0308 	add.w	r3, r7, #8
    9d4c:	4618      	mov	r0, r3
    9d4e:	4b2e      	ldr	r3, [pc, #184]	; (9e08 <_usb_d_dev_ep_trans+0x1b4>)
    9d50:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    9d52:	693b      	ldr	r3, [r7, #16]
    9d54:	7cdb      	ldrb	r3, [r3, #19]
    9d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d5a:	b2db      	uxtb	r3, r3
    9d5c:	2b00      	cmp	r3, #0
    9d5e:	d006      	beq.n	9d6e <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    9d60:	f107 0308 	add.w	r3, r7, #8
    9d64:	4618      	mov	r0, r3
    9d66:	4b29      	ldr	r3, [pc, #164]	; (9e0c <_usb_d_dev_ep_trans+0x1b8>)
    9d68:	4798      	blx	r3
		return USB_BUSY;
    9d6a:	2301      	movs	r3, #1
    9d6c:	e043      	b.n	9df6 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    9d6e:	693a      	ldr	r2, [r7, #16]
    9d70:	7cd3      	ldrb	r3, [r2, #19]
    9d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9d76:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    9d78:	f107 0308 	add.w	r3, r7, #8
    9d7c:	4618      	mov	r0, r3
    9d7e:	4b23      	ldr	r3, [pc, #140]	; (9e0c <_usb_d_dev_ep_trans+0x1b8>)
    9d80:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    9d82:	687b      	ldr	r3, [r7, #4]
    9d84:	681a      	ldr	r2, [r3, #0]
    9d86:	693b      	ldr	r3, [r7, #16]
    9d88:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    9d8a:	687b      	ldr	r3, [r7, #4]
    9d8c:	685a      	ldr	r2, [r3, #4]
    9d8e:	693b      	ldr	r3, [r7, #16]
    9d90:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    9d92:	693b      	ldr	r3, [r7, #16]
    9d94:	2200      	movs	r2, #0
    9d96:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    9d98:	693a      	ldr	r2, [r7, #16]
    9d9a:	7cd3      	ldrb	r3, [r2, #19]
    9d9c:	7d79      	ldrb	r1, [r7, #21]
    9d9e:	f361 13c7 	bfi	r3, r1, #7, #1
    9da2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    9da4:	693a      	ldr	r2, [r7, #16]
    9da6:	7cd3      	ldrb	r3, [r2, #19]
    9da8:	7df9      	ldrb	r1, [r7, #23]
    9daa:	f361 1345 	bfi	r3, r1, #5, #1
    9dae:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    9db0:	687b      	ldr	r3, [r7, #4]
    9db2:	7a5b      	ldrb	r3, [r3, #9]
    9db4:	2b00      	cmp	r3, #0
    9db6:	d007      	beq.n	9dc8 <_usb_d_dev_ep_trans+0x174>
    9db8:	7b7b      	ldrb	r3, [r7, #13]
    9dba:	f083 0301 	eor.w	r3, r3, #1
    9dbe:	b2db      	uxtb	r3, r3
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d001      	beq.n	9dc8 <_usb_d_dev_ep_trans+0x174>
    9dc4:	2301      	movs	r3, #1
    9dc6:	e000      	b.n	9dca <_usb_d_dev_ep_trans+0x176>
    9dc8:	2300      	movs	r3, #0
    9dca:	b2db      	uxtb	r3, r3
    9dcc:	f003 0301 	and.w	r3, r3, #1
    9dd0:	b2d9      	uxtb	r1, r3
    9dd2:	693a      	ldr	r2, [r7, #16]
    9dd4:	7cd3      	ldrb	r3, [r2, #19]
    9dd6:	f361 1304 	bfi	r3, r1, #4, #1
    9dda:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    9ddc:	7d7b      	ldrb	r3, [r7, #21]
    9dde:	2b00      	cmp	r3, #0
    9de0:	d004      	beq.n	9dec <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    9de2:	2100      	movs	r1, #0
    9de4:	6938      	ldr	r0, [r7, #16]
    9de6:	4b0a      	ldr	r3, [pc, #40]	; (9e10 <_usb_d_dev_ep_trans+0x1bc>)
    9de8:	4798      	blx	r3
    9dea:	e003      	b.n	9df4 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    9dec:	2100      	movs	r1, #0
    9dee:	6938      	ldr	r0, [r7, #16]
    9df0:	4b08      	ldr	r3, [pc, #32]	; (9e14 <_usb_d_dev_ep_trans+0x1c0>)
    9df2:	4798      	blx	r3
	}

	return ERR_NONE;
    9df4:	2300      	movs	r3, #0
}
    9df6:	4618      	mov	r0, r3
    9df8:	3718      	adds	r7, #24
    9dfa:	46bd      	mov	sp, r7
    9dfc:	bd80      	pop	{r7, pc}
    9dfe:	bf00      	nop
    9e00:	000084c5 	.word	0x000084c5
    9e04:	20041fff 	.word	0x20041fff
    9e08:	0000a5cd 	.word	0x0000a5cd
    9e0c:	0000a5f3 	.word	0x0000a5f3
    9e10:	0000878d 	.word	0x0000878d
    9e14:	000089a5 	.word	0x000089a5

00009e18 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    9e18:	b480      	push	{r7}
    9e1a:	b085      	sub	sp, #20
    9e1c:	af00      	add	r7, sp, #0
    9e1e:	4603      	mov	r3, r0
    9e20:	6039      	str	r1, [r7, #0]
    9e22:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9e24:	683b      	ldr	r3, [r7, #0]
    9e26:	2b00      	cmp	r3, #0
    9e28:	d001      	beq.n	9e2e <_usb_d_dev_register_callback+0x16>
    9e2a:	683b      	ldr	r3, [r7, #0]
    9e2c:	e000      	b.n	9e30 <_usb_d_dev_register_callback+0x18>
    9e2e:	4b0a      	ldr	r3, [pc, #40]	; (9e58 <_usb_d_dev_register_callback+0x40>)
    9e30:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    9e32:	79fb      	ldrb	r3, [r7, #7]
    9e34:	2b01      	cmp	r3, #1
    9e36:	d103      	bne.n	9e40 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    9e38:	4a08      	ldr	r2, [pc, #32]	; (9e5c <_usb_d_dev_register_callback+0x44>)
    9e3a:	68fb      	ldr	r3, [r7, #12]
    9e3c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    9e3e:	e005      	b.n	9e4c <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    9e40:	79fb      	ldrb	r3, [r7, #7]
    9e42:	2b00      	cmp	r3, #0
    9e44:	d102      	bne.n	9e4c <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    9e46:	4a05      	ldr	r2, [pc, #20]	; (9e5c <_usb_d_dev_register_callback+0x44>)
    9e48:	68fb      	ldr	r3, [r7, #12]
    9e4a:	6013      	str	r3, [r2, #0]
}
    9e4c:	bf00      	nop
    9e4e:	3714      	adds	r7, #20
    9e50:	46bd      	mov	sp, r7
    9e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e56:	4770      	bx	lr
    9e58:	00007d4d 	.word	0x00007d4d
    9e5c:	200008e0 	.word	0x200008e0

00009e60 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    9e60:	b480      	push	{r7}
    9e62:	b085      	sub	sp, #20
    9e64:	af00      	add	r7, sp, #0
    9e66:	4603      	mov	r3, r0
    9e68:	6039      	str	r1, [r7, #0]
    9e6a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    9e6c:	683b      	ldr	r3, [r7, #0]
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d001      	beq.n	9e76 <_usb_d_dev_register_ep_callback+0x16>
    9e72:	683b      	ldr	r3, [r7, #0]
    9e74:	e000      	b.n	9e78 <_usb_d_dev_register_ep_callback+0x18>
    9e76:	4b0e      	ldr	r3, [pc, #56]	; (9eb0 <_usb_d_dev_register_ep_callback+0x50>)
    9e78:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    9e7a:	79fb      	ldrb	r3, [r7, #7]
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	d103      	bne.n	9e88 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    9e80:	4a0c      	ldr	r2, [pc, #48]	; (9eb4 <_usb_d_dev_register_ep_callback+0x54>)
    9e82:	68fb      	ldr	r3, [r7, #12]
    9e84:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    9e86:	e00c      	b.n	9ea2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    9e88:	79fb      	ldrb	r3, [r7, #7]
    9e8a:	2b01      	cmp	r3, #1
    9e8c:	d103      	bne.n	9e96 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    9e8e:	4a09      	ldr	r2, [pc, #36]	; (9eb4 <_usb_d_dev_register_ep_callback+0x54>)
    9e90:	68fb      	ldr	r3, [r7, #12]
    9e92:	60d3      	str	r3, [r2, #12]
}
    9e94:	e005      	b.n	9ea2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    9e96:	79fb      	ldrb	r3, [r7, #7]
    9e98:	2b02      	cmp	r3, #2
    9e9a:	d102      	bne.n	9ea2 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    9e9c:	4a05      	ldr	r2, [pc, #20]	; (9eb4 <_usb_d_dev_register_ep_callback+0x54>)
    9e9e:	68fb      	ldr	r3, [r7, #12]
    9ea0:	6113      	str	r3, [r2, #16]
}
    9ea2:	bf00      	nop
    9ea4:	3714      	adds	r7, #20
    9ea6:	46bd      	mov	sp, r7
    9ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9eac:	4770      	bx	lr
    9eae:	bf00      	nop
    9eb0:	00007d4d 	.word	0x00007d4d
    9eb4:	200008e0 	.word	0x200008e0

00009eb8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    9eb8:	b580      	push	{r7, lr}
    9eba:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    9ebc:	4b01      	ldr	r3, [pc, #4]	; (9ec4 <USB_0_Handler+0xc>)
    9ebe:	4798      	blx	r3
}
    9ec0:	bf00      	nop
    9ec2:	bd80      	pop	{r7, pc}
    9ec4:	0000917d 	.word	0x0000917d

00009ec8 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    9ec8:	b580      	push	{r7, lr}
    9eca:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    9ecc:	4b01      	ldr	r3, [pc, #4]	; (9ed4 <USB_1_Handler+0xc>)
    9ece:	4798      	blx	r3
}
    9ed0:	bf00      	nop
    9ed2:	bd80      	pop	{r7, pc}
    9ed4:	0000917d 	.word	0x0000917d

00009ed8 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    9ed8:	b580      	push	{r7, lr}
    9eda:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    9edc:	4b01      	ldr	r3, [pc, #4]	; (9ee4 <USB_2_Handler+0xc>)
    9ede:	4798      	blx	r3
}
    9ee0:	bf00      	nop
    9ee2:	bd80      	pop	{r7, pc}
    9ee4:	0000917d 	.word	0x0000917d

00009ee8 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    9ee8:	b580      	push	{r7, lr}
    9eea:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    9eec:	4b01      	ldr	r3, [pc, #4]	; (9ef4 <USB_3_Handler+0xc>)
    9eee:	4798      	blx	r3
}
    9ef0:	bf00      	nop
    9ef2:	bd80      	pop	{r7, pc}
    9ef4:	0000917d 	.word	0x0000917d

00009ef8 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    9ef8:	b480      	push	{r7}
    9efa:	b083      	sub	sp, #12
    9efc:	af00      	add	r7, sp, #0
    9efe:	6078      	str	r0, [r7, #4]
    9f00:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    9f02:	bf00      	nop
    9f04:	687b      	ldr	r3, [r7, #4]
    9f06:	689a      	ldr	r2, [r3, #8]
    9f08:	683b      	ldr	r3, [r7, #0]
    9f0a:	4013      	ands	r3, r2
    9f0c:	2b00      	cmp	r3, #0
    9f0e:	d1f9      	bne.n	9f04 <hri_wdt_wait_for_sync+0xc>
	};
}
    9f10:	bf00      	nop
    9f12:	370c      	adds	r7, #12
    9f14:	46bd      	mov	sp, r7
    9f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f1a:	4770      	bx	lr

00009f1c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9f1c:	b580      	push	{r7, lr}
    9f1e:	b084      	sub	sp, #16
    9f20:	af00      	add	r7, sp, #0
    9f22:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    9f24:	210e      	movs	r1, #14
    9f26:	6878      	ldr	r0, [r7, #4]
    9f28:	4b0a      	ldr	r3, [pc, #40]	; (9f54 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    9f2a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9f2c:	687b      	ldr	r3, [r7, #4]
    9f2e:	781b      	ldrb	r3, [r3, #0]
    9f30:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    9f32:	7bfb      	ldrb	r3, [r7, #15]
    9f34:	085b      	lsrs	r3, r3, #1
    9f36:	b2db      	uxtb	r3, r3
    9f38:	f003 0301 	and.w	r3, r3, #1
    9f3c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9f3e:	7bfb      	ldrb	r3, [r7, #15]
    9f40:	2b00      	cmp	r3, #0
    9f42:	bf14      	ite	ne
    9f44:	2301      	movne	r3, #1
    9f46:	2300      	moveq	r3, #0
    9f48:	b2db      	uxtb	r3, r3
}
    9f4a:	4618      	mov	r0, r3
    9f4c:	3710      	adds	r7, #16
    9f4e:	46bd      	mov	sp, r7
    9f50:	bd80      	pop	{r7, pc}
    9f52:	bf00      	nop
    9f54:	00009ef9 	.word	0x00009ef9

00009f58 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    9f58:	b580      	push	{r7, lr}
    9f5a:	b082      	sub	sp, #8
    9f5c:	af00      	add	r7, sp, #0
    9f5e:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    9f60:	687b      	ldr	r3, [r7, #4]
    9f62:	781b      	ldrb	r3, [r3, #0]
    9f64:	b2db      	uxtb	r3, r3
    9f66:	f023 0304 	bic.w	r3, r3, #4
    9f6a:	b2da      	uxtb	r2, r3
    9f6c:	687b      	ldr	r3, [r7, #4]
    9f6e:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    9f70:	210e      	movs	r1, #14
    9f72:	6878      	ldr	r0, [r7, #4]
    9f74:	4b02      	ldr	r3, [pc, #8]	; (9f80 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    9f76:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    9f78:	bf00      	nop
    9f7a:	3708      	adds	r7, #8
    9f7c:	46bd      	mov	sp, r7
    9f7e:	bd80      	pop	{r7, pc}
    9f80:	00009ef9 	.word	0x00009ef9

00009f84 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    9f84:	b580      	push	{r7, lr}
    9f86:	b084      	sub	sp, #16
    9f88:	af00      	add	r7, sp, #0
    9f8a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    9f8c:	210e      	movs	r1, #14
    9f8e:	6878      	ldr	r0, [r7, #4]
    9f90:	4b08      	ldr	r3, [pc, #32]	; (9fb4 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    9f92:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    9f94:	687b      	ldr	r3, [r7, #4]
    9f96:	781b      	ldrb	r3, [r3, #0]
    9f98:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    9f9a:	7bfb      	ldrb	r3, [r7, #15]
    9f9c:	09db      	lsrs	r3, r3, #7
    9f9e:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    9fa0:	7bfb      	ldrb	r3, [r7, #15]
    9fa2:	2b00      	cmp	r3, #0
    9fa4:	bf14      	ite	ne
    9fa6:	2301      	movne	r3, #1
    9fa8:	2300      	moveq	r3, #0
    9faa:	b2db      	uxtb	r3, r3
}
    9fac:	4618      	mov	r0, r3
    9fae:	3710      	adds	r7, #16
    9fb0:	46bd      	mov	sp, r7
    9fb2:	bd80      	pop	{r7, pc}
    9fb4:	00009ef9 	.word	0x00009ef9

00009fb8 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    9fb8:	b480      	push	{r7}
    9fba:	b085      	sub	sp, #20
    9fbc:	af00      	add	r7, sp, #0
    9fbe:	6078      	str	r0, [r7, #4]
    9fc0:	460b      	mov	r3, r1
    9fc2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    9fc4:	687b      	ldr	r3, [r7, #4]
    9fc6:	785b      	ldrb	r3, [r3, #1]
    9fc8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    9fca:	7bfb      	ldrb	r3, [r7, #15]
    9fcc:	f023 030f 	bic.w	r3, r3, #15
    9fd0:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    9fd2:	78fb      	ldrb	r3, [r7, #3]
    9fd4:	f003 030f 	and.w	r3, r3, #15
    9fd8:	b2da      	uxtb	r2, r3
    9fda:	7bfb      	ldrb	r3, [r7, #15]
    9fdc:	4313      	orrs	r3, r2
    9fde:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    9fe0:	687b      	ldr	r3, [r7, #4]
    9fe2:	7bfa      	ldrb	r2, [r7, #15]
    9fe4:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    9fe6:	bf00      	nop
    9fe8:	3714      	adds	r7, #20
    9fea:	46bd      	mov	sp, r7
    9fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ff0:	4770      	bx	lr
	...

00009ff4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    9ff4:	b580      	push	{r7, lr}
    9ff6:	b082      	sub	sp, #8
    9ff8:	af00      	add	r7, sp, #0
    9ffa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    9ffc:	687b      	ldr	r3, [r7, #4]
    9ffe:	2b00      	cmp	r3, #0
    a000:	d005      	beq.n	a00e <_wdt_init+0x1a>
    a002:	687b      	ldr	r3, [r7, #4]
    a004:	681b      	ldr	r3, [r3, #0]
    a006:	2b00      	cmp	r3, #0
    a008:	d001      	beq.n	a00e <_wdt_init+0x1a>
    a00a:	2301      	movs	r3, #1
    a00c:	e000      	b.n	a010 <_wdt_init+0x1c>
    a00e:	2300      	movs	r3, #0
    a010:	f003 0301 	and.w	r3, r3, #1
    a014:	b2db      	uxtb	r3, r3
    a016:	2250      	movs	r2, #80	; 0x50
    a018:	4913      	ldr	r1, [pc, #76]	; (a068 <_wdt_init+0x74>)
    a01a:	4618      	mov	r0, r3
    a01c:	4b13      	ldr	r3, [pc, #76]	; (a06c <_wdt_init+0x78>)
    a01e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a020:	687b      	ldr	r3, [r7, #4]
    a022:	681b      	ldr	r3, [r3, #0]
    a024:	4618      	mov	r0, r3
    a026:	4b12      	ldr	r3, [pc, #72]	; (a070 <_wdt_init+0x7c>)
    a028:	4798      	blx	r3
    a02a:	4603      	mov	r3, r0
    a02c:	2b00      	cmp	r3, #0
    a02e:	d107      	bne.n	a040 <_wdt_init+0x4c>
    a030:	687b      	ldr	r3, [r7, #4]
    a032:	681b      	ldr	r3, [r3, #0]
    a034:	4618      	mov	r0, r3
    a036:	4b0f      	ldr	r3, [pc, #60]	; (a074 <_wdt_init+0x80>)
    a038:	4798      	blx	r3
    a03a:	4603      	mov	r3, r0
    a03c:	2b00      	cmp	r3, #0
    a03e:	d002      	beq.n	a046 <_wdt_init+0x52>
		return ERR_DENIED;
    a040:	f06f 0310 	mvn.w	r3, #16
    a044:	e00b      	b.n	a05e <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a046:	687b      	ldr	r3, [r7, #4]
    a048:	681b      	ldr	r3, [r3, #0]
    a04a:	4618      	mov	r0, r3
    a04c:	4b0a      	ldr	r3, [pc, #40]	; (a078 <_wdt_init+0x84>)
    a04e:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a050:	687b      	ldr	r3, [r7, #4]
    a052:	681b      	ldr	r3, [r3, #0]
    a054:	210b      	movs	r1, #11
    a056:	4618      	mov	r0, r3
    a058:	4b08      	ldr	r3, [pc, #32]	; (a07c <_wdt_init+0x88>)
    a05a:	4798      	blx	r3
	}

	return ERR_NONE;
    a05c:	2300      	movs	r3, #0
}
    a05e:	4618      	mov	r0, r3
    a060:	3708      	adds	r7, #8
    a062:	46bd      	mov	sp, r7
    a064:	bd80      	pop	{r7, pc}
    a066:	bf00      	nop
    a068:	0000cf0c 	.word	0x0000cf0c
    a06c:	00003249 	.word	0x00003249
    a070:	00009f85 	.word	0x00009f85
    a074:	00009f1d 	.word	0x00009f1d
    a078:	00009f59 	.word	0x00009f59
    a07c:	00009fb9 	.word	0x00009fb9

0000a080 <hri_port_set_DIR_reg>:
{
    a080:	b480      	push	{r7}
    a082:	b085      	sub	sp, #20
    a084:	af00      	add	r7, sp, #0
    a086:	60f8      	str	r0, [r7, #12]
    a088:	460b      	mov	r3, r1
    a08a:	607a      	str	r2, [r7, #4]
    a08c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a08e:	7afb      	ldrb	r3, [r7, #11]
    a090:	68fa      	ldr	r2, [r7, #12]
    a092:	01db      	lsls	r3, r3, #7
    a094:	4413      	add	r3, r2
    a096:	3308      	adds	r3, #8
    a098:	687a      	ldr	r2, [r7, #4]
    a09a:	601a      	str	r2, [r3, #0]
}
    a09c:	bf00      	nop
    a09e:	3714      	adds	r7, #20
    a0a0:	46bd      	mov	sp, r7
    a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0a6:	4770      	bx	lr

0000a0a8 <hri_port_clear_DIR_reg>:
{
    a0a8:	b480      	push	{r7}
    a0aa:	b085      	sub	sp, #20
    a0ac:	af00      	add	r7, sp, #0
    a0ae:	60f8      	str	r0, [r7, #12]
    a0b0:	460b      	mov	r3, r1
    a0b2:	607a      	str	r2, [r7, #4]
    a0b4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a0b6:	7afb      	ldrb	r3, [r7, #11]
    a0b8:	68fa      	ldr	r2, [r7, #12]
    a0ba:	01db      	lsls	r3, r3, #7
    a0bc:	4413      	add	r3, r2
    a0be:	3304      	adds	r3, #4
    a0c0:	687a      	ldr	r2, [r7, #4]
    a0c2:	601a      	str	r2, [r3, #0]
}
    a0c4:	bf00      	nop
    a0c6:	3714      	adds	r7, #20
    a0c8:	46bd      	mov	sp, r7
    a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0ce:	4770      	bx	lr

0000a0d0 <hri_port_set_OUT_reg>:
{
    a0d0:	b480      	push	{r7}
    a0d2:	b085      	sub	sp, #20
    a0d4:	af00      	add	r7, sp, #0
    a0d6:	60f8      	str	r0, [r7, #12]
    a0d8:	460b      	mov	r3, r1
    a0da:	607a      	str	r2, [r7, #4]
    a0dc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a0de:	7afb      	ldrb	r3, [r7, #11]
    a0e0:	68fa      	ldr	r2, [r7, #12]
    a0e2:	01db      	lsls	r3, r3, #7
    a0e4:	4413      	add	r3, r2
    a0e6:	3318      	adds	r3, #24
    a0e8:	687a      	ldr	r2, [r7, #4]
    a0ea:	601a      	str	r2, [r3, #0]
}
    a0ec:	bf00      	nop
    a0ee:	3714      	adds	r7, #20
    a0f0:	46bd      	mov	sp, r7
    a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0f6:	4770      	bx	lr

0000a0f8 <hri_port_clear_OUT_reg>:
{
    a0f8:	b480      	push	{r7}
    a0fa:	b085      	sub	sp, #20
    a0fc:	af00      	add	r7, sp, #0
    a0fe:	60f8      	str	r0, [r7, #12]
    a100:	460b      	mov	r3, r1
    a102:	607a      	str	r2, [r7, #4]
    a104:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a106:	7afb      	ldrb	r3, [r7, #11]
    a108:	68fa      	ldr	r2, [r7, #12]
    a10a:	01db      	lsls	r3, r3, #7
    a10c:	4413      	add	r3, r2
    a10e:	3314      	adds	r3, #20
    a110:	687a      	ldr	r2, [r7, #4]
    a112:	601a      	str	r2, [r3, #0]
}
    a114:	bf00      	nop
    a116:	3714      	adds	r7, #20
    a118:	46bd      	mov	sp, r7
    a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a11e:	4770      	bx	lr

0000a120 <hri_port_write_PMUX_PMUXE_bf>:
{
    a120:	b480      	push	{r7}
    a122:	b085      	sub	sp, #20
    a124:	af00      	add	r7, sp, #0
    a126:	6078      	str	r0, [r7, #4]
    a128:	4608      	mov	r0, r1
    a12a:	4611      	mov	r1, r2
    a12c:	461a      	mov	r2, r3
    a12e:	4603      	mov	r3, r0
    a130:	70fb      	strb	r3, [r7, #3]
    a132:	460b      	mov	r3, r1
    a134:	70bb      	strb	r3, [r7, #2]
    a136:	4613      	mov	r3, r2
    a138:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a13a:	78fa      	ldrb	r2, [r7, #3]
    a13c:	78bb      	ldrb	r3, [r7, #2]
    a13e:	6879      	ldr	r1, [r7, #4]
    a140:	01d2      	lsls	r2, r2, #7
    a142:	440a      	add	r2, r1
    a144:	4413      	add	r3, r2
    a146:	3330      	adds	r3, #48	; 0x30
    a148:	781b      	ldrb	r3, [r3, #0]
    a14a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    a14c:	7bfb      	ldrb	r3, [r7, #15]
    a14e:	f023 030f 	bic.w	r3, r3, #15
    a152:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    a154:	787b      	ldrb	r3, [r7, #1]
    a156:	f003 030f 	and.w	r3, r3, #15
    a15a:	b2da      	uxtb	r2, r3
    a15c:	7bfb      	ldrb	r3, [r7, #15]
    a15e:	4313      	orrs	r3, r2
    a160:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a162:	78fa      	ldrb	r2, [r7, #3]
    a164:	78bb      	ldrb	r3, [r7, #2]
    a166:	6879      	ldr	r1, [r7, #4]
    a168:	01d2      	lsls	r2, r2, #7
    a16a:	440a      	add	r2, r1
    a16c:	4413      	add	r3, r2
    a16e:	3330      	adds	r3, #48	; 0x30
    a170:	7bfa      	ldrb	r2, [r7, #15]
    a172:	701a      	strb	r2, [r3, #0]
}
    a174:	bf00      	nop
    a176:	3714      	adds	r7, #20
    a178:	46bd      	mov	sp, r7
    a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a17e:	4770      	bx	lr

0000a180 <hri_port_write_PMUX_PMUXO_bf>:
{
    a180:	b480      	push	{r7}
    a182:	b085      	sub	sp, #20
    a184:	af00      	add	r7, sp, #0
    a186:	6078      	str	r0, [r7, #4]
    a188:	4608      	mov	r0, r1
    a18a:	4611      	mov	r1, r2
    a18c:	461a      	mov	r2, r3
    a18e:	4603      	mov	r3, r0
    a190:	70fb      	strb	r3, [r7, #3]
    a192:	460b      	mov	r3, r1
    a194:	70bb      	strb	r3, [r7, #2]
    a196:	4613      	mov	r3, r2
    a198:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a19a:	78fa      	ldrb	r2, [r7, #3]
    a19c:	78bb      	ldrb	r3, [r7, #2]
    a19e:	6879      	ldr	r1, [r7, #4]
    a1a0:	01d2      	lsls	r2, r2, #7
    a1a2:	440a      	add	r2, r1
    a1a4:	4413      	add	r3, r2
    a1a6:	3330      	adds	r3, #48	; 0x30
    a1a8:	781b      	ldrb	r3, [r3, #0]
    a1aa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a1ac:	7bfb      	ldrb	r3, [r7, #15]
    a1ae:	f003 030f 	and.w	r3, r3, #15
    a1b2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    a1b4:	787b      	ldrb	r3, [r7, #1]
    a1b6:	011b      	lsls	r3, r3, #4
    a1b8:	b2da      	uxtb	r2, r3
    a1ba:	7bfb      	ldrb	r3, [r7, #15]
    a1bc:	4313      	orrs	r3, r2
    a1be:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a1c0:	78fa      	ldrb	r2, [r7, #3]
    a1c2:	78bb      	ldrb	r3, [r7, #2]
    a1c4:	6879      	ldr	r1, [r7, #4]
    a1c6:	01d2      	lsls	r2, r2, #7
    a1c8:	440a      	add	r2, r1
    a1ca:	4413      	add	r3, r2
    a1cc:	3330      	adds	r3, #48	; 0x30
    a1ce:	7bfa      	ldrb	r2, [r7, #15]
    a1d0:	701a      	strb	r2, [r3, #0]
}
    a1d2:	bf00      	nop
    a1d4:	3714      	adds	r7, #20
    a1d6:	46bd      	mov	sp, r7
    a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1dc:	4770      	bx	lr

0000a1de <hri_port_write_PINCFG_PMUXEN_bit>:
{
    a1de:	b480      	push	{r7}
    a1e0:	b085      	sub	sp, #20
    a1e2:	af00      	add	r7, sp, #0
    a1e4:	6078      	str	r0, [r7, #4]
    a1e6:	4608      	mov	r0, r1
    a1e8:	4611      	mov	r1, r2
    a1ea:	461a      	mov	r2, r3
    a1ec:	4603      	mov	r3, r0
    a1ee:	70fb      	strb	r3, [r7, #3]
    a1f0:	460b      	mov	r3, r1
    a1f2:	70bb      	strb	r3, [r7, #2]
    a1f4:	4613      	mov	r3, r2
    a1f6:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    a1f8:	78fa      	ldrb	r2, [r7, #3]
    a1fa:	78bb      	ldrb	r3, [r7, #2]
    a1fc:	6879      	ldr	r1, [r7, #4]
    a1fe:	01d2      	lsls	r2, r2, #7
    a200:	440a      	add	r2, r1
    a202:	4413      	add	r3, r2
    a204:	3340      	adds	r3, #64	; 0x40
    a206:	781b      	ldrb	r3, [r3, #0]
    a208:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    a20a:	7bfb      	ldrb	r3, [r7, #15]
    a20c:	f023 0301 	bic.w	r3, r3, #1
    a210:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    a212:	787a      	ldrb	r2, [r7, #1]
    a214:	7bfb      	ldrb	r3, [r7, #15]
    a216:	4313      	orrs	r3, r2
    a218:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    a21a:	78fa      	ldrb	r2, [r7, #3]
    a21c:	78bb      	ldrb	r3, [r7, #2]
    a21e:	6879      	ldr	r1, [r7, #4]
    a220:	01d2      	lsls	r2, r2, #7
    a222:	440a      	add	r2, r1
    a224:	4413      	add	r3, r2
    a226:	3340      	adds	r3, #64	; 0x40
    a228:	7bfa      	ldrb	r2, [r7, #15]
    a22a:	701a      	strb	r2, [r3, #0]
}
    a22c:	bf00      	nop
    a22e:	3714      	adds	r7, #20
    a230:	46bd      	mov	sp, r7
    a232:	f85d 7b04 	ldr.w	r7, [sp], #4
    a236:	4770      	bx	lr

0000a238 <hri_port_write_WRCONFIG_reg>:
{
    a238:	b480      	push	{r7}
    a23a:	b085      	sub	sp, #20
    a23c:	af00      	add	r7, sp, #0
    a23e:	60f8      	str	r0, [r7, #12]
    a240:	460b      	mov	r3, r1
    a242:	607a      	str	r2, [r7, #4]
    a244:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a246:	7afb      	ldrb	r3, [r7, #11]
    a248:	68fa      	ldr	r2, [r7, #12]
    a24a:	01db      	lsls	r3, r3, #7
    a24c:	4413      	add	r3, r2
    a24e:	3328      	adds	r3, #40	; 0x28
    a250:	687a      	ldr	r2, [r7, #4]
    a252:	601a      	str	r2, [r3, #0]
}
    a254:	bf00      	nop
    a256:	3714      	adds	r7, #20
    a258:	46bd      	mov	sp, r7
    a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a25e:	4770      	bx	lr

0000a260 <_gpio_set_direction>:
{
    a260:	b580      	push	{r7, lr}
    a262:	b082      	sub	sp, #8
    a264:	af00      	add	r7, sp, #0
    a266:	4603      	mov	r3, r0
    a268:	6039      	str	r1, [r7, #0]
    a26a:	71fb      	strb	r3, [r7, #7]
    a26c:	4613      	mov	r3, r2
    a26e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    a270:	79bb      	ldrb	r3, [r7, #6]
    a272:	2b01      	cmp	r3, #1
    a274:	d01c      	beq.n	a2b0 <_gpio_set_direction+0x50>
    a276:	2b02      	cmp	r3, #2
    a278:	d037      	beq.n	a2ea <_gpio_set_direction+0x8a>
    a27a:	2b00      	cmp	r3, #0
    a27c:	d14e      	bne.n	a31c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a27e:	79fb      	ldrb	r3, [r7, #7]
    a280:	683a      	ldr	r2, [r7, #0]
    a282:	4619      	mov	r1, r3
    a284:	482a      	ldr	r0, [pc, #168]	; (a330 <_gpio_set_direction+0xd0>)
    a286:	4b2b      	ldr	r3, [pc, #172]	; (a334 <_gpio_set_direction+0xd4>)
    a288:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a28a:	683b      	ldr	r3, [r7, #0]
    a28c:	b29b      	uxth	r3, r3
    a28e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a292:	79fb      	ldrb	r3, [r7, #7]
    a294:	4619      	mov	r1, r3
    a296:	4826      	ldr	r0, [pc, #152]	; (a330 <_gpio_set_direction+0xd0>)
    a298:	4b27      	ldr	r3, [pc, #156]	; (a338 <_gpio_set_direction+0xd8>)
    a29a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a29c:	683b      	ldr	r3, [r7, #0]
    a29e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a2a0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a2a4:	79fb      	ldrb	r3, [r7, #7]
    a2a6:	4619      	mov	r1, r3
    a2a8:	4821      	ldr	r0, [pc, #132]	; (a330 <_gpio_set_direction+0xd0>)
    a2aa:	4b23      	ldr	r3, [pc, #140]	; (a338 <_gpio_set_direction+0xd8>)
    a2ac:	4798      	blx	r3
		break;
    a2ae:	e03a      	b.n	a326 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a2b0:	79fb      	ldrb	r3, [r7, #7]
    a2b2:	683a      	ldr	r2, [r7, #0]
    a2b4:	4619      	mov	r1, r3
    a2b6:	481e      	ldr	r0, [pc, #120]	; (a330 <_gpio_set_direction+0xd0>)
    a2b8:	4b1e      	ldr	r3, [pc, #120]	; (a334 <_gpio_set_direction+0xd4>)
    a2ba:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    a2bc:	683b      	ldr	r3, [r7, #0]
    a2be:	b29b      	uxth	r3, r3
    a2c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a2c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a2c8:	79f9      	ldrb	r1, [r7, #7]
    a2ca:	461a      	mov	r2, r3
    a2cc:	4818      	ldr	r0, [pc, #96]	; (a330 <_gpio_set_direction+0xd0>)
    a2ce:	4b1a      	ldr	r3, [pc, #104]	; (a338 <_gpio_set_direction+0xd8>)
    a2d0:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    a2d2:	683b      	ldr	r3, [r7, #0]
    a2d4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    a2d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    a2da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a2de:	79f9      	ldrb	r1, [r7, #7]
    a2e0:	461a      	mov	r2, r3
    a2e2:	4813      	ldr	r0, [pc, #76]	; (a330 <_gpio_set_direction+0xd0>)
    a2e4:	4b14      	ldr	r3, [pc, #80]	; (a338 <_gpio_set_direction+0xd8>)
    a2e6:	4798      	blx	r3
		break;
    a2e8:	e01d      	b.n	a326 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    a2ea:	79fb      	ldrb	r3, [r7, #7]
    a2ec:	683a      	ldr	r2, [r7, #0]
    a2ee:	4619      	mov	r1, r3
    a2f0:	480f      	ldr	r0, [pc, #60]	; (a330 <_gpio_set_direction+0xd0>)
    a2f2:	4b12      	ldr	r3, [pc, #72]	; (a33c <_gpio_set_direction+0xdc>)
    a2f4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a2f6:	683b      	ldr	r3, [r7, #0]
    a2f8:	b29b      	uxth	r3, r3
    a2fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a2fe:	79fb      	ldrb	r3, [r7, #7]
    a300:	4619      	mov	r1, r3
    a302:	480b      	ldr	r0, [pc, #44]	; (a330 <_gpio_set_direction+0xd0>)
    a304:	4b0c      	ldr	r3, [pc, #48]	; (a338 <_gpio_set_direction+0xd8>)
    a306:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a308:	683b      	ldr	r3, [r7, #0]
    a30a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a30c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a310:	79fb      	ldrb	r3, [r7, #7]
    a312:	4619      	mov	r1, r3
    a314:	4806      	ldr	r0, [pc, #24]	; (a330 <_gpio_set_direction+0xd0>)
    a316:	4b08      	ldr	r3, [pc, #32]	; (a338 <_gpio_set_direction+0xd8>)
    a318:	4798      	blx	r3
		break;
    a31a:	e004      	b.n	a326 <_gpio_set_direction+0xc6>
		ASSERT(false);
    a31c:	2246      	movs	r2, #70	; 0x46
    a31e:	4908      	ldr	r1, [pc, #32]	; (a340 <_gpio_set_direction+0xe0>)
    a320:	2000      	movs	r0, #0
    a322:	4b08      	ldr	r3, [pc, #32]	; (a344 <_gpio_set_direction+0xe4>)
    a324:	4798      	blx	r3
}
    a326:	bf00      	nop
    a328:	3708      	adds	r7, #8
    a32a:	46bd      	mov	sp, r7
    a32c:	bd80      	pop	{r7, pc}
    a32e:	bf00      	nop
    a330:	41008000 	.word	0x41008000
    a334:	0000a0a9 	.word	0x0000a0a9
    a338:	0000a239 	.word	0x0000a239
    a33c:	0000a081 	.word	0x0000a081
    a340:	0000cf24 	.word	0x0000cf24
    a344:	00003249 	.word	0x00003249

0000a348 <_gpio_set_level>:
{
    a348:	b580      	push	{r7, lr}
    a34a:	b082      	sub	sp, #8
    a34c:	af00      	add	r7, sp, #0
    a34e:	4603      	mov	r3, r0
    a350:	6039      	str	r1, [r7, #0]
    a352:	71fb      	strb	r3, [r7, #7]
    a354:	4613      	mov	r3, r2
    a356:	71bb      	strb	r3, [r7, #6]
	if (level) {
    a358:	79bb      	ldrb	r3, [r7, #6]
    a35a:	2b00      	cmp	r3, #0
    a35c:	d006      	beq.n	a36c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    a35e:	79fb      	ldrb	r3, [r7, #7]
    a360:	683a      	ldr	r2, [r7, #0]
    a362:	4619      	mov	r1, r3
    a364:	4806      	ldr	r0, [pc, #24]	; (a380 <_gpio_set_level+0x38>)
    a366:	4b07      	ldr	r3, [pc, #28]	; (a384 <_gpio_set_level+0x3c>)
    a368:	4798      	blx	r3
}
    a36a:	e005      	b.n	a378 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    a36c:	79fb      	ldrb	r3, [r7, #7]
    a36e:	683a      	ldr	r2, [r7, #0]
    a370:	4619      	mov	r1, r3
    a372:	4803      	ldr	r0, [pc, #12]	; (a380 <_gpio_set_level+0x38>)
    a374:	4b04      	ldr	r3, [pc, #16]	; (a388 <_gpio_set_level+0x40>)
    a376:	4798      	blx	r3
}
    a378:	bf00      	nop
    a37a:	3708      	adds	r7, #8
    a37c:	46bd      	mov	sp, r7
    a37e:	bd80      	pop	{r7, pc}
    a380:	41008000 	.word	0x41008000
    a384:	0000a0d1 	.word	0x0000a0d1
    a388:	0000a0f9 	.word	0x0000a0f9

0000a38c <_gpio_set_pin_function>:
{
    a38c:	b590      	push	{r4, r7, lr}
    a38e:	b085      	sub	sp, #20
    a390:	af00      	add	r7, sp, #0
    a392:	6078      	str	r0, [r7, #4]
    a394:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    a396:	687b      	ldr	r3, [r7, #4]
    a398:	095b      	lsrs	r3, r3, #5
    a39a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    a39c:	687b      	ldr	r3, [r7, #4]
    a39e:	b2db      	uxtb	r3, r3
    a3a0:	f003 031f 	and.w	r3, r3, #31
    a3a4:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    a3a6:	683b      	ldr	r3, [r7, #0]
    a3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
    a3ac:	d106      	bne.n	a3bc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    a3ae:	7bba      	ldrb	r2, [r7, #14]
    a3b0:	7bf9      	ldrb	r1, [r7, #15]
    a3b2:	2300      	movs	r3, #0
    a3b4:	4812      	ldr	r0, [pc, #72]	; (a400 <_gpio_set_pin_function+0x74>)
    a3b6:	4c13      	ldr	r4, [pc, #76]	; (a404 <_gpio_set_pin_function+0x78>)
    a3b8:	47a0      	blx	r4
}
    a3ba:	e01d      	b.n	a3f8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    a3bc:	7bba      	ldrb	r2, [r7, #14]
    a3be:	7bf9      	ldrb	r1, [r7, #15]
    a3c0:	2301      	movs	r3, #1
    a3c2:	480f      	ldr	r0, [pc, #60]	; (a400 <_gpio_set_pin_function+0x74>)
    a3c4:	4c0f      	ldr	r4, [pc, #60]	; (a404 <_gpio_set_pin_function+0x78>)
    a3c6:	47a0      	blx	r4
		if (pin & 1) {
    a3c8:	7bbb      	ldrb	r3, [r7, #14]
    a3ca:	f003 0301 	and.w	r3, r3, #1
    a3ce:	2b00      	cmp	r3, #0
    a3d0:	d009      	beq.n	a3e6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    a3d2:	7bbb      	ldrb	r3, [r7, #14]
    a3d4:	085b      	lsrs	r3, r3, #1
    a3d6:	b2da      	uxtb	r2, r3
    a3d8:	683b      	ldr	r3, [r7, #0]
    a3da:	b2db      	uxtb	r3, r3
    a3dc:	7bf9      	ldrb	r1, [r7, #15]
    a3de:	4808      	ldr	r0, [pc, #32]	; (a400 <_gpio_set_pin_function+0x74>)
    a3e0:	4c09      	ldr	r4, [pc, #36]	; (a408 <_gpio_set_pin_function+0x7c>)
    a3e2:	47a0      	blx	r4
}
    a3e4:	e008      	b.n	a3f8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    a3e6:	7bbb      	ldrb	r3, [r7, #14]
    a3e8:	085b      	lsrs	r3, r3, #1
    a3ea:	b2da      	uxtb	r2, r3
    a3ec:	683b      	ldr	r3, [r7, #0]
    a3ee:	b2db      	uxtb	r3, r3
    a3f0:	7bf9      	ldrb	r1, [r7, #15]
    a3f2:	4803      	ldr	r0, [pc, #12]	; (a400 <_gpio_set_pin_function+0x74>)
    a3f4:	4c05      	ldr	r4, [pc, #20]	; (a40c <_gpio_set_pin_function+0x80>)
    a3f6:	47a0      	blx	r4
}
    a3f8:	bf00      	nop
    a3fa:	3714      	adds	r7, #20
    a3fc:	46bd      	mov	sp, r7
    a3fe:	bd90      	pop	{r4, r7, pc}
    a400:	41008000 	.word	0x41008000
    a404:	0000a1df 	.word	0x0000a1df
    a408:	0000a181 	.word	0x0000a181
    a40c:	0000a121 	.word	0x0000a121

0000a410 <gpio_set_pin_function>:
{
    a410:	b580      	push	{r7, lr}
    a412:	b082      	sub	sp, #8
    a414:	af00      	add	r7, sp, #0
    a416:	6078      	str	r0, [r7, #4]
    a418:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    a41a:	6839      	ldr	r1, [r7, #0]
    a41c:	6878      	ldr	r0, [r7, #4]
    a41e:	4b03      	ldr	r3, [pc, #12]	; (a42c <gpio_set_pin_function+0x1c>)
    a420:	4798      	blx	r3
}
    a422:	bf00      	nop
    a424:	3708      	adds	r7, #8
    a426:	46bd      	mov	sp, r7
    a428:	bd80      	pop	{r7, pc}
    a42a:	bf00      	nop
    a42c:	0000a38d 	.word	0x0000a38d

0000a430 <gpio_set_pin_direction>:
{
    a430:	b580      	push	{r7, lr}
    a432:	b082      	sub	sp, #8
    a434:	af00      	add	r7, sp, #0
    a436:	4603      	mov	r3, r0
    a438:	460a      	mov	r2, r1
    a43a:	71fb      	strb	r3, [r7, #7]
    a43c:	4613      	mov	r3, r2
    a43e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    a440:	79fb      	ldrb	r3, [r7, #7]
    a442:	095b      	lsrs	r3, r3, #5
    a444:	b2d8      	uxtb	r0, r3
    a446:	79fb      	ldrb	r3, [r7, #7]
    a448:	f003 031f 	and.w	r3, r3, #31
    a44c:	2201      	movs	r2, #1
    a44e:	fa02 f303 	lsl.w	r3, r2, r3
    a452:	79ba      	ldrb	r2, [r7, #6]
    a454:	4619      	mov	r1, r3
    a456:	4b03      	ldr	r3, [pc, #12]	; (a464 <gpio_set_pin_direction+0x34>)
    a458:	4798      	blx	r3
}
    a45a:	bf00      	nop
    a45c:	3708      	adds	r7, #8
    a45e:	46bd      	mov	sp, r7
    a460:	bd80      	pop	{r7, pc}
    a462:	bf00      	nop
    a464:	0000a261 	.word	0x0000a261

0000a468 <gpio_set_pin_level>:
{
    a468:	b580      	push	{r7, lr}
    a46a:	b082      	sub	sp, #8
    a46c:	af00      	add	r7, sp, #0
    a46e:	4603      	mov	r3, r0
    a470:	460a      	mov	r2, r1
    a472:	71fb      	strb	r3, [r7, #7]
    a474:	4613      	mov	r3, r2
    a476:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    a478:	79fb      	ldrb	r3, [r7, #7]
    a47a:	095b      	lsrs	r3, r3, #5
    a47c:	b2d8      	uxtb	r0, r3
    a47e:	79fb      	ldrb	r3, [r7, #7]
    a480:	f003 031f 	and.w	r3, r3, #31
    a484:	2201      	movs	r2, #1
    a486:	fa02 f303 	lsl.w	r3, r2, r3
    a48a:	79ba      	ldrb	r2, [r7, #6]
    a48c:	4619      	mov	r1, r3
    a48e:	4b03      	ldr	r3, [pc, #12]	; (a49c <gpio_set_pin_level+0x34>)
    a490:	4798      	blx	r3
}
    a492:	bf00      	nop
    a494:	3708      	adds	r7, #8
    a496:	46bd      	mov	sp, r7
    a498:	bd80      	pop	{r7, pc}
    a49a:	bf00      	nop
    a49c:	0000a349 	.word	0x0000a349

0000a4a0 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    a4a0:	b580      	push	{r7, lr}
    a4a2:	b082      	sub	sp, #8
    a4a4:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    a4a6:	2100      	movs	r1, #0
    a4a8:	2008      	movs	r0, #8
    a4aa:	4b24      	ldr	r3, [pc, #144]	; (a53c <QSPI_N25Q256_exit_xip+0x9c>)
    a4ac:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    a4ae:	2100      	movs	r1, #0
    a4b0:	202b      	movs	r0, #43	; 0x2b
    a4b2:	4b22      	ldr	r3, [pc, #136]	; (a53c <QSPI_N25Q256_exit_xip+0x9c>)
    a4b4:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    a4b6:	2100      	movs	r1, #0
    a4b8:	202a      	movs	r0, #42	; 0x2a
    a4ba:	4b20      	ldr	r3, [pc, #128]	; (a53c <QSPI_N25Q256_exit_xip+0x9c>)
    a4bc:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    a4be:	2102      	movs	r1, #2
    a4c0:	2008      	movs	r0, #8
    a4c2:	4b1f      	ldr	r3, [pc, #124]	; (a540 <QSPI_N25Q256_exit_xip+0xa0>)
    a4c4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    a4c6:	2102      	movs	r1, #2
    a4c8:	202b      	movs	r0, #43	; 0x2b
    a4ca:	4b1d      	ldr	r3, [pc, #116]	; (a540 <QSPI_N25Q256_exit_xip+0xa0>)
    a4cc:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    a4ce:	2102      	movs	r1, #2
    a4d0:	202a      	movs	r0, #42	; 0x2a
    a4d2:	4b1b      	ldr	r3, [pc, #108]	; (a540 <QSPI_N25Q256_exit_xip+0xa0>)
    a4d4:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    a4d6:	2101      	movs	r1, #1
    a4d8:	2008      	movs	r0, #8
    a4da:	4b1a      	ldr	r3, [pc, #104]	; (a544 <QSPI_N25Q256_exit_xip+0xa4>)
    a4dc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    a4de:	2100      	movs	r1, #0
    a4e0:	202b      	movs	r0, #43	; 0x2b
    a4e2:	4b18      	ldr	r3, [pc, #96]	; (a544 <QSPI_N25Q256_exit_xip+0xa4>)
    a4e4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    a4e6:	2100      	movs	r1, #0
    a4e8:	202a      	movs	r0, #42	; 0x2a
    a4ea:	4b16      	ldr	r3, [pc, #88]	; (a544 <QSPI_N25Q256_exit_xip+0xa4>)
    a4ec:	4798      	blx	r3

	delay_us(1);
    a4ee:	2001      	movs	r0, #1
    a4f0:	4b15      	ldr	r3, [pc, #84]	; (a548 <QSPI_N25Q256_exit_xip+0xa8>)
    a4f2:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    a4f4:	2300      	movs	r3, #0
    a4f6:	607b      	str	r3, [r7, #4]
    a4f8:	e010      	b.n	a51c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    a4fa:	2101      	movs	r1, #1
    a4fc:	202a      	movs	r0, #42	; 0x2a
    a4fe:	4b11      	ldr	r3, [pc, #68]	; (a544 <QSPI_N25Q256_exit_xip+0xa4>)
    a500:	4798      	blx	r3
		delay_us(1);
    a502:	2001      	movs	r0, #1
    a504:	4b10      	ldr	r3, [pc, #64]	; (a548 <QSPI_N25Q256_exit_xip+0xa8>)
    a506:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    a508:	2100      	movs	r1, #0
    a50a:	202a      	movs	r0, #42	; 0x2a
    a50c:	4b0d      	ldr	r3, [pc, #52]	; (a544 <QSPI_N25Q256_exit_xip+0xa4>)
    a50e:	4798      	blx	r3
		delay_us(1);
    a510:	2001      	movs	r0, #1
    a512:	4b0d      	ldr	r3, [pc, #52]	; (a548 <QSPI_N25Q256_exit_xip+0xa8>)
    a514:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    a516:	687b      	ldr	r3, [r7, #4]
    a518:	3301      	adds	r3, #1
    a51a:	607b      	str	r3, [r7, #4]
    a51c:	687b      	ldr	r3, [r7, #4]
    a51e:	2b06      	cmp	r3, #6
    a520:	ddeb      	ble.n	a4fa <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    a522:	2101      	movs	r1, #1
    a524:	202b      	movs	r0, #43	; 0x2b
    a526:	4b07      	ldr	r3, [pc, #28]	; (a544 <QSPI_N25Q256_exit_xip+0xa4>)
    a528:	4798      	blx	r3
	delay_us(1);
    a52a:	2001      	movs	r0, #1
    a52c:	4b06      	ldr	r3, [pc, #24]	; (a548 <QSPI_N25Q256_exit_xip+0xa8>)
    a52e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    a530:	4b06      	ldr	r3, [pc, #24]	; (a54c <QSPI_N25Q256_exit_xip+0xac>)
    a532:	4798      	blx	r3
}
    a534:	bf00      	nop
    a536:	3708      	adds	r7, #8
    a538:	46bd      	mov	sp, r7
    a53a:	bd80      	pop	{r7, pc}
    a53c:	0000a411 	.word	0x0000a411
    a540:	0000a431 	.word	0x0000a431
    a544:	0000a469 	.word	0x0000a469
    a548:	0000a619 	.word	0x0000a619
    a54c:	0000123d 	.word	0x0000123d

0000a550 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    a550:	b598      	push	{r3, r4, r7, lr}
    a552:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    a554:	4806      	ldr	r0, [pc, #24]	; (a570 <spi_nor_flash_init+0x20>)
    a556:	4b07      	ldr	r3, [pc, #28]	; (a574 <spi_nor_flash_init+0x24>)
    a558:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    a55a:	2300      	movs	r3, #0
    a55c:	4a06      	ldr	r2, [pc, #24]	; (a578 <spi_nor_flash_init+0x28>)
    a55e:	4904      	ldr	r1, [pc, #16]	; (a570 <spi_nor_flash_init+0x20>)
    a560:	4806      	ldr	r0, [pc, #24]	; (a57c <spi_nor_flash_init+0x2c>)
    a562:	4c07      	ldr	r4, [pc, #28]	; (a580 <spi_nor_flash_init+0x30>)
    a564:	47a0      	blx	r4
    a566:	4602      	mov	r2, r0
    a568:	4b06      	ldr	r3, [pc, #24]	; (a584 <spi_nor_flash_init+0x34>)
    a56a:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    a56c:	bf00      	nop
    a56e:	bd98      	pop	{r3, r4, r7, pc}
    a570:	20000b84 	.word	0x20000b84
    a574:	0000211d 	.word	0x0000211d
    a578:	0000a4a1 	.word	0x0000a4a1
    a57c:	20000a48 	.word	0x20000a48
    a580:	0000ab85 	.word	0x0000ab85
    a584:	20000d24 	.word	0x20000d24

0000a588 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    a588:	b580      	push	{r7, lr}
    a58a:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a58c:	4805      	ldr	r0, [pc, #20]	; (a5a4 <cdc_device_acm_init+0x1c>)
    a58e:	4b06      	ldr	r3, [pc, #24]	; (a5a8 <cdc_device_acm_init+0x20>)
    a590:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    a592:	4b06      	ldr	r3, [pc, #24]	; (a5ac <cdc_device_acm_init+0x24>)
    a594:	4798      	blx	r3

	usbdc_start(single_desc);
    a596:	4806      	ldr	r0, [pc, #24]	; (a5b0 <cdc_device_acm_init+0x28>)
    a598:	4b06      	ldr	r3, [pc, #24]	; (a5b4 <cdc_device_acm_init+0x2c>)
    a59a:	4798      	blx	r3
	usbdc_attach();
    a59c:	4b06      	ldr	r3, [pc, #24]	; (a5b8 <cdc_device_acm_init+0x30>)
    a59e:	4798      	blx	r3
}
    a5a0:	bf00      	nop
    a5a2:	bd80      	pop	{r7, pc}
    a5a4:	20000a98 	.word	0x20000a98
    a5a8:	0000c171 	.word	0x0000c171
    a5ac:	0000b525 	.word	0x0000b525
    a5b0:	20000104 	.word	0x20000104
    a5b4:	0000c20d 	.word	0x0000c20d
    a5b8:	0000c25d 	.word	0x0000c25d

0000a5bc <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    a5bc:	b580      	push	{r7, lr}
    a5be:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    a5c0:	4b01      	ldr	r3, [pc, #4]	; (a5c8 <usb_init+0xc>)
    a5c2:	4798      	blx	r3
}
    a5c4:	bf00      	nop
    a5c6:	bd80      	pop	{r7, pc}
    a5c8:	0000a589 	.word	0x0000a589

0000a5cc <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    a5cc:	b480      	push	{r7}
    a5ce:	b085      	sub	sp, #20
    a5d0:	af00      	add	r7, sp, #0
    a5d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a5d4:	f3ef 8310 	mrs	r3, PRIMASK
    a5d8:	60fb      	str	r3, [r7, #12]
  return(result);
    a5da:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    a5dc:	687b      	ldr	r3, [r7, #4]
    a5de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a5e0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    a5e2:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    a5e6:	bf00      	nop
    a5e8:	3714      	adds	r7, #20
    a5ea:	46bd      	mov	sp, r7
    a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5f0:	4770      	bx	lr

0000a5f2 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    a5f2:	b480      	push	{r7}
    a5f4:	b085      	sub	sp, #20
    a5f6:	af00      	add	r7, sp, #0
    a5f8:	6078      	str	r0, [r7, #4]
    a5fa:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    a5fe:	687b      	ldr	r3, [r7, #4]
    a600:	681b      	ldr	r3, [r3, #0]
    a602:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    a604:	68fb      	ldr	r3, [r7, #12]
    a606:	f383 8810 	msr	PRIMASK, r3
}
    a60a:	bf00      	nop
    a60c:	3714      	adds	r7, #20
    a60e:	46bd      	mov	sp, r7
    a610:	f85d 7b04 	ldr.w	r7, [sp], #4
    a614:	4770      	bx	lr
	...

0000a618 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    a618:	b590      	push	{r4, r7, lr}
    a61a:	b083      	sub	sp, #12
    a61c:	af00      	add	r7, sp, #0
    a61e:	4603      	mov	r3, r0
    a620:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    a622:	4b07      	ldr	r3, [pc, #28]	; (a640 <delay_us+0x28>)
    a624:	681c      	ldr	r4, [r3, #0]
    a626:	88fb      	ldrh	r3, [r7, #6]
    a628:	4618      	mov	r0, r3
    a62a:	4b06      	ldr	r3, [pc, #24]	; (a644 <delay_us+0x2c>)
    a62c:	4798      	blx	r3
    a62e:	4603      	mov	r3, r0
    a630:	4619      	mov	r1, r3
    a632:	4620      	mov	r0, r4
    a634:	4b04      	ldr	r3, [pc, #16]	; (a648 <delay_us+0x30>)
    a636:	4798      	blx	r3
}
    a638:	bf00      	nop
    a63a:	370c      	adds	r7, #12
    a63c:	46bd      	mov	sp, r7
    a63e:	bd90      	pop	{r4, r7, pc}
    a640:	20000ad8 	.word	0x20000ad8
    a644:	0000a795 	.word	0x0000a795
    a648:	0000a7c1 	.word	0x0000a7c1

0000a64c <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    a64c:	b480      	push	{r7}
    a64e:	b083      	sub	sp, #12
    a650:	af00      	add	r7, sp, #0
    a652:	4603      	mov	r3, r0
    a654:	6039      	str	r1, [r7, #0]
    a656:	80fb      	strh	r3, [r7, #6]
    a658:	4613      	mov	r3, r2
    a65a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    a65c:	797b      	ldrb	r3, [r7, #5]
    a65e:	3b04      	subs	r3, #4
    a660:	2b05      	cmp	r3, #5
    a662:	d86b      	bhi.n	a73c <_get_cycles_for_us_internal+0xf0>
    a664:	a201      	add	r2, pc, #4	; (adr r2, a66c <_get_cycles_for_us_internal+0x20>)
    a666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a66a:	bf00      	nop
    a66c:	0000a71b 	.word	0x0000a71b
    a670:	0000a6fb 	.word	0x0000a6fb
    a674:	0000a6dd 	.word	0x0000a6dd
    a678:	0000a6bf 	.word	0x0000a6bf
    a67c:	0000a6a1 	.word	0x0000a6a1
    a680:	0000a685 	.word	0x0000a685
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    a684:	88fb      	ldrh	r3, [r7, #6]
    a686:	683a      	ldr	r2, [r7, #0]
    a688:	4935      	ldr	r1, [pc, #212]	; (a760 <_get_cycles_for_us_internal+0x114>)
    a68a:	fba1 1202 	umull	r1, r2, r1, r2
    a68e:	0c92      	lsrs	r2, r2, #18
    a690:	fb02 f303 	mul.w	r3, r2, r3
    a694:	3302      	adds	r3, #2
    a696:	4a33      	ldr	r2, [pc, #204]	; (a764 <_get_cycles_for_us_internal+0x118>)
    a698:	fba2 2303 	umull	r2, r3, r2, r3
    a69c:	085b      	lsrs	r3, r3, #1
    a69e:	e059      	b.n	a754 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    a6a0:	88fb      	ldrh	r3, [r7, #6]
    a6a2:	683a      	ldr	r2, [r7, #0]
    a6a4:	0952      	lsrs	r2, r2, #5
    a6a6:	4930      	ldr	r1, [pc, #192]	; (a768 <_get_cycles_for_us_internal+0x11c>)
    a6a8:	fba1 1202 	umull	r1, r2, r1, r2
    a6ac:	09d2      	lsrs	r2, r2, #7
    a6ae:	fb02 f303 	mul.w	r3, r2, r3
    a6b2:	331d      	adds	r3, #29
    a6b4:	4a2d      	ldr	r2, [pc, #180]	; (a76c <_get_cycles_for_us_internal+0x120>)
    a6b6:	fba2 2303 	umull	r2, r3, r2, r3
    a6ba:	091b      	lsrs	r3, r3, #4
    a6bc:	e04a      	b.n	a754 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    a6be:	88fb      	ldrh	r3, [r7, #6]
    a6c0:	683a      	ldr	r2, [r7, #0]
    a6c2:	492b      	ldr	r1, [pc, #172]	; (a770 <_get_cycles_for_us_internal+0x124>)
    a6c4:	fba1 1202 	umull	r1, r2, r1, r2
    a6c8:	0b52      	lsrs	r2, r2, #13
    a6ca:	fb02 f303 	mul.w	r3, r2, r3
    a6ce:	f203 132b 	addw	r3, r3, #299	; 0x12b
    a6d2:	4a28      	ldr	r2, [pc, #160]	; (a774 <_get_cycles_for_us_internal+0x128>)
    a6d4:	fba2 2303 	umull	r2, r3, r2, r3
    a6d8:	095b      	lsrs	r3, r3, #5
    a6da:	e03b      	b.n	a754 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    a6dc:	88fb      	ldrh	r3, [r7, #6]
    a6de:	683a      	ldr	r2, [r7, #0]
    a6e0:	4925      	ldr	r1, [pc, #148]	; (a778 <_get_cycles_for_us_internal+0x12c>)
    a6e2:	fba1 1202 	umull	r1, r2, r1, r2
    a6e6:	0992      	lsrs	r2, r2, #6
    a6e8:	fb02 f303 	mul.w	r3, r2, r3
    a6ec:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    a6f0:	4a22      	ldr	r2, [pc, #136]	; (a77c <_get_cycles_for_us_internal+0x130>)
    a6f2:	fba2 2303 	umull	r2, r3, r2, r3
    a6f6:	099b      	lsrs	r3, r3, #6
    a6f8:	e02c      	b.n	a754 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    a6fa:	88fb      	ldrh	r3, [r7, #6]
    a6fc:	683a      	ldr	r2, [r7, #0]
    a6fe:	4920      	ldr	r1, [pc, #128]	; (a780 <_get_cycles_for_us_internal+0x134>)
    a700:	fba1 1202 	umull	r1, r2, r1, r2
    a704:	0952      	lsrs	r2, r2, #5
    a706:	fb02 f303 	mul.w	r3, r2, r3
    a70a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    a70e:	332f      	adds	r3, #47	; 0x2f
    a710:	4a1c      	ldr	r2, [pc, #112]	; (a784 <_get_cycles_for_us_internal+0x138>)
    a712:	fba2 2303 	umull	r2, r3, r2, r3
    a716:	0b5b      	lsrs	r3, r3, #13
    a718:	e01c      	b.n	a754 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    a71a:	88fb      	ldrh	r3, [r7, #6]
    a71c:	683a      	ldr	r2, [r7, #0]
    a71e:	491a      	ldr	r1, [pc, #104]	; (a788 <_get_cycles_for_us_internal+0x13c>)
    a720:	fba1 1202 	umull	r1, r2, r1, r2
    a724:	08d2      	lsrs	r2, r2, #3
    a726:	fb02 f303 	mul.w	r3, r2, r3
    a72a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    a72e:	f203 33df 	addw	r3, r3, #991	; 0x3df
    a732:	4a16      	ldr	r2, [pc, #88]	; (a78c <_get_cycles_for_us_internal+0x140>)
    a734:	fba2 2303 	umull	r2, r3, r2, r3
    a738:	0c5b      	lsrs	r3, r3, #17
    a73a:	e00b      	b.n	a754 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    a73c:	88fb      	ldrh	r3, [r7, #6]
    a73e:	683a      	ldr	r2, [r7, #0]
    a740:	fb02 f303 	mul.w	r3, r2, r3
    a744:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    a748:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    a74c:	4a10      	ldr	r2, [pc, #64]	; (a790 <_get_cycles_for_us_internal+0x144>)
    a74e:	fba2 2303 	umull	r2, r3, r2, r3
    a752:	0c9b      	lsrs	r3, r3, #18
	}
}
    a754:	4618      	mov	r0, r3
    a756:	370c      	adds	r7, #12
    a758:	46bd      	mov	sp, r7
    a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a75e:	4770      	bx	lr
    a760:	431bde83 	.word	0x431bde83
    a764:	aaaaaaab 	.word	0xaaaaaaab
    a768:	0a7c5ac5 	.word	0x0a7c5ac5
    a76c:	88888889 	.word	0x88888889
    a770:	d1b71759 	.word	0xd1b71759
    a774:	1b4e81b5 	.word	0x1b4e81b5
    a778:	10624dd3 	.word	0x10624dd3
    a77c:	057619f1 	.word	0x057619f1
    a780:	51eb851f 	.word	0x51eb851f
    a784:	45e7b273 	.word	0x45e7b273
    a788:	cccccccd 	.word	0xcccccccd
    a78c:	6fd91d85 	.word	0x6fd91d85
    a790:	165e9f81 	.word	0x165e9f81

0000a794 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    a794:	b580      	push	{r7, lr}
    a796:	b082      	sub	sp, #8
    a798:	af00      	add	r7, sp, #0
    a79a:	4603      	mov	r3, r0
    a79c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    a79e:	88fb      	ldrh	r3, [r7, #6]
    a7a0:	2209      	movs	r2, #9
    a7a2:	4904      	ldr	r1, [pc, #16]	; (a7b4 <_get_cycles_for_us+0x20>)
    a7a4:	4618      	mov	r0, r3
    a7a6:	4b04      	ldr	r3, [pc, #16]	; (a7b8 <_get_cycles_for_us+0x24>)
    a7a8:	4798      	blx	r3
    a7aa:	4603      	mov	r3, r0
}
    a7ac:	4618      	mov	r0, r3
    a7ae:	3708      	adds	r7, #8
    a7b0:	46bd      	mov	sp, r7
    a7b2:	bd80      	pop	{r7, pc}
    a7b4:	07270e00 	.word	0x07270e00
    a7b8:	0000a64d 	.word	0x0000a64d
    a7bc:	00000000 	.word	0x00000000

0000a7c0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    a7c0:	b480      	push	{r7}
    a7c2:	b083      	sub	sp, #12
    a7c4:	af00      	add	r7, sp, #0
    a7c6:	6078      	str	r0, [r7, #4]
    a7c8:	6039      	str	r1, [r7, #0]
    a7ca:	bf00      	nop
    a7cc:	f3af 8000 	nop.w

0000a7d0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    a7d0:	3901      	subs	r1, #1
    a7d2:	d8fd      	bhi.n	a7d0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    a7d4:	bf00      	nop
    a7d6:	370c      	adds	r7, #12
    a7d8:	46bd      	mov	sp, r7
    a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7de:	4770      	bx	lr

0000a7e0 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    a7e0:	b580      	push	{r7, lr}
    a7e2:	b08c      	sub	sp, #48	; 0x30
    a7e4:	af00      	add	r7, sp, #0
    a7e6:	6078      	str	r0, [r7, #4]
    a7e8:	460b      	mov	r3, r1
    a7ea:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a7ec:	687b      	ldr	r3, [r7, #4]
    a7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a7f0:	687b      	ldr	r3, [r7, #4]
    a7f2:	681b      	ldr	r3, [r3, #0]
    a7f4:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    a7f6:	f107 030c 	add.w	r3, r7, #12
    a7fa:	2200      	movs	r2, #0
    a7fc:	601a      	str	r2, [r3, #0]
    a7fe:	605a      	str	r2, [r3, #4]
    a800:	609a      	str	r2, [r3, #8]
    a802:	60da      	str	r2, [r3, #12]
    a804:	611a      	str	r2, [r3, #16]
    a806:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    a808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a80a:	7b1b      	ldrb	r3, [r3, #12]
    a80c:	2b00      	cmp	r3, #0
    a80e:	d001      	beq.n	a814 <n25q256a_xip_confirm+0x34>
    a810:	2206      	movs	r2, #6
    a812:	e000      	b.n	a816 <n25q256a_xip_confirm+0x36>
    a814:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    a816:	7b3b      	ldrb	r3, [r7, #12]
    a818:	f362 0302 	bfi	r3, r2, #0, #3
    a81c:	733b      	strb	r3, [r7, #12]
    a81e:	7b3b      	ldrb	r3, [r7, #12]
    a820:	f043 0310 	orr.w	r3, r3, #16
    a824:	733b      	strb	r3, [r7, #12]
    a826:	7b3b      	ldrb	r3, [r7, #12]
    a828:	f043 0320 	orr.w	r3, r3, #32
    a82c:	733b      	strb	r3, [r7, #12]
    a82e:	7b3b      	ldrb	r3, [r7, #12]
    a830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a834:	733b      	strb	r3, [r7, #12]
    a836:	7b3b      	ldrb	r3, [r7, #12]
    a838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a83c:	733b      	strb	r3, [r7, #12]
    a83e:	7b7b      	ldrb	r3, [r7, #13]
    a840:	f043 0303 	orr.w	r3, r3, #3
    a844:	737b      	strb	r3, [r7, #13]
    a846:	7b7b      	ldrb	r3, [r7, #13]
    a848:	2201      	movs	r2, #1
    a84a:	f362 1305 	bfi	r3, r2, #4, #2
    a84e:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a852:	7b1b      	ldrb	r3, [r3, #12]
    a854:	2b00      	cmp	r3, #0
    a856:	d001      	beq.n	a85c <n25q256a_xip_confirm+0x7c>
    a858:	2208      	movs	r2, #8
    a85a:	e000      	b.n	a85e <n25q256a_xip_confirm+0x7e>
    a85c:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    a85e:	7bbb      	ldrb	r3, [r7, #14]
    a860:	f362 0304 	bfi	r3, r2, #0, #5
    a864:	73bb      	strb	r3, [r7, #14]
    a866:	230b      	movs	r3, #11
    a868:	743b      	strb	r3, [r7, #16]
    a86a:	78fb      	ldrb	r3, [r7, #3]
    a86c:	2b00      	cmp	r3, #0
    a86e:	d001      	beq.n	a874 <n25q256a_xip_confirm+0x94>
    a870:	2300      	movs	r3, #0
    a872:	e000      	b.n	a876 <n25q256a_xip_confirm+0x96>
    a874:	23ff      	movs	r3, #255	; 0xff
    a876:	747b      	strb	r3, [r7, #17]
    a878:	2301      	movs	r3, #1
    a87a:	61bb      	str	r3, [r7, #24]
    a87c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    a880:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    a882:	f107 030c 	add.w	r3, r7, #12
    a886:	4619      	mov	r1, r3
    a888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a88a:	4b07      	ldr	r3, [pc, #28]	; (a8a8 <n25q256a_xip_confirm+0xc8>)
    a88c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    a88e:	78fb      	ldrb	r3, [r7, #3]
    a890:	2b00      	cmp	r3, #0
    a892:	d001      	beq.n	a898 <n25q256a_xip_confirm+0xb8>
    a894:	2202      	movs	r2, #2
    a896:	e000      	b.n	a89a <n25q256a_xip_confirm+0xba>
    a898:	2201      	movs	r2, #1
    a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a89c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    a89e:	2300      	movs	r3, #0
}
    a8a0:	4618      	mov	r0, r3
    a8a2:	3730      	adds	r7, #48	; 0x30
    a8a4:	46bd      	mov	sp, r7
    a8a6:	bd80      	pop	{r7, pc}
    a8a8:	00002195 	.word	0x00002195

0000a8ac <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    a8ac:	b580      	push	{r7, lr}
    a8ae:	b08c      	sub	sp, #48	; 0x30
    a8b0:	af00      	add	r7, sp, #0
    a8b2:	6078      	str	r0, [r7, #4]
    a8b4:	460b      	mov	r3, r1
    a8b6:	70fb      	strb	r3, [r7, #3]
    a8b8:	4613      	mov	r3, r2
    a8ba:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    a8bc:	2300      	movs	r3, #0
    a8be:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    a8c0:	687b      	ldr	r3, [r7, #4]
    a8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	681b      	ldr	r3, [r3, #0]
    a8c8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    a8ca:	f107 030c 	add.w	r3, r7, #12
    a8ce:	2200      	movs	r2, #0
    a8d0:	601a      	str	r2, [r3, #0]
    a8d2:	605a      	str	r2, [r3, #4]
    a8d4:	609a      	str	r2, [r3, #8]
    a8d6:	60da      	str	r2, [r3, #12]
    a8d8:	611a      	str	r2, [r3, #16]
    a8da:	615a      	str	r2, [r3, #20]
    a8dc:	78fb      	ldrb	r3, [r7, #3]
    a8de:	f003 0307 	and.w	r3, r3, #7
    a8e2:	b2da      	uxtb	r2, r3
    a8e4:	7b3b      	ldrb	r3, [r7, #12]
    a8e6:	f362 0302 	bfi	r3, r2, #0, #3
    a8ea:	733b      	strb	r3, [r7, #12]
    a8ec:	7b3b      	ldrb	r3, [r7, #12]
    a8ee:	f043 0310 	orr.w	r3, r3, #16
    a8f2:	733b      	strb	r3, [r7, #12]
    a8f4:	7b3b      	ldrb	r3, [r7, #12]
    a8f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a8fa:	733b      	strb	r3, [r7, #12]
    a8fc:	78bb      	ldrb	r3, [r7, #2]
    a8fe:	743b      	strb	r3, [r7, #16]
    a900:	2301      	movs	r3, #1
    a902:	61bb      	str	r3, [r7, #24]
    a904:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a908:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    a90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a90c:	7b5b      	ldrb	r3, [r3, #13]
    a90e:	2b00      	cmp	r3, #0
    a910:	d003      	beq.n	a91a <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    a912:	2100      	movs	r1, #0
    a914:	6878      	ldr	r0, [r7, #4]
    a916:	4b0a      	ldr	r3, [pc, #40]	; (a940 <n25q256a_read_reg+0x94>)
    a918:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    a91a:	f107 030c 	add.w	r3, r7, #12
    a91e:	4619      	mov	r1, r3
    a920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a922:	4b08      	ldr	r3, [pc, #32]	; (a944 <n25q256a_read_reg+0x98>)
    a924:	4798      	blx	r3
	if (n25q->xip_mode) {
    a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a928:	7b5b      	ldrb	r3, [r3, #13]
    a92a:	2b00      	cmp	r3, #0
    a92c:	d003      	beq.n	a936 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    a92e:	2101      	movs	r1, #1
    a930:	6878      	ldr	r0, [r7, #4]
    a932:	4b03      	ldr	r3, [pc, #12]	; (a940 <n25q256a_read_reg+0x94>)
    a934:	4798      	blx	r3
	}
	return status;
    a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    a938:	4618      	mov	r0, r3
    a93a:	3730      	adds	r7, #48	; 0x30
    a93c:	46bd      	mov	sp, r7
    a93e:	bd80      	pop	{r7, pc}
    a940:	0000a7e1 	.word	0x0000a7e1
    a944:	00002195 	.word	0x00002195

0000a948 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    a948:	b580      	push	{r7, lr}
    a94a:	b08c      	sub	sp, #48	; 0x30
    a94c:	af00      	add	r7, sp, #0
    a94e:	60f8      	str	r0, [r7, #12]
    a950:	607b      	str	r3, [r7, #4]
    a952:	460b      	mov	r3, r1
    a954:	72fb      	strb	r3, [r7, #11]
    a956:	4613      	mov	r3, r2
    a958:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a95a:	68fb      	ldr	r3, [r7, #12]
    a95c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a95e:	68fb      	ldr	r3, [r7, #12]
    a960:	681b      	ldr	r3, [r3, #0]
    a962:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    a964:	f107 0310 	add.w	r3, r7, #16
    a968:	2200      	movs	r2, #0
    a96a:	601a      	str	r2, [r3, #0]
    a96c:	605a      	str	r2, [r3, #4]
    a96e:	609a      	str	r2, [r3, #8]
    a970:	60da      	str	r2, [r3, #12]
    a972:	611a      	str	r2, [r3, #16]
    a974:	615a      	str	r2, [r3, #20]
    a976:	7afb      	ldrb	r3, [r7, #11]
    a978:	f003 0307 	and.w	r3, r3, #7
    a97c:	b2da      	uxtb	r2, r3
    a97e:	7c3b      	ldrb	r3, [r7, #16]
    a980:	f362 0302 	bfi	r3, r2, #0, #3
    a984:	743b      	strb	r3, [r7, #16]
    a986:	7c3b      	ldrb	r3, [r7, #16]
    a988:	f043 0310 	orr.w	r3, r3, #16
    a98c:	743b      	strb	r3, [r7, #16]
    a98e:	7c3b      	ldrb	r3, [r7, #16]
    a990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a994:	743b      	strb	r3, [r7, #16]
    a996:	7c7b      	ldrb	r3, [r7, #17]
    a998:	2202      	movs	r2, #2
    a99a:	f362 1305 	bfi	r3, r2, #4, #2
    a99e:	747b      	strb	r3, [r7, #17]
    a9a0:	7abb      	ldrb	r3, [r7, #10]
    a9a2:	753b      	strb	r3, [r7, #20]
    a9a4:	2301      	movs	r3, #1
    a9a6:	61fb      	str	r3, [r7, #28]
    a9a8:	1d3b      	adds	r3, r7, #4
    a9aa:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    a9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9ae:	7b5b      	ldrb	r3, [r3, #13]
    a9b0:	2b00      	cmp	r3, #0
    a9b2:	d003      	beq.n	a9bc <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    a9b4:	2100      	movs	r1, #0
    a9b6:	68f8      	ldr	r0, [r7, #12]
    a9b8:	4b09      	ldr	r3, [pc, #36]	; (a9e0 <n25q256a_write_reg+0x98>)
    a9ba:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    a9bc:	f107 0310 	add.w	r3, r7, #16
    a9c0:	4619      	mov	r1, r3
    a9c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a9c4:	4b07      	ldr	r3, [pc, #28]	; (a9e4 <n25q256a_write_reg+0x9c>)
    a9c6:	4798      	blx	r3
	if (n25q->xip_mode) {
    a9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9ca:	7b5b      	ldrb	r3, [r3, #13]
    a9cc:	2b00      	cmp	r3, #0
    a9ce:	d003      	beq.n	a9d8 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    a9d0:	2101      	movs	r1, #1
    a9d2:	68f8      	ldr	r0, [r7, #12]
    a9d4:	4b02      	ldr	r3, [pc, #8]	; (a9e0 <n25q256a_write_reg+0x98>)
    a9d6:	4798      	blx	r3
	}
}
    a9d8:	bf00      	nop
    a9da:	3730      	adds	r7, #48	; 0x30
    a9dc:	46bd      	mov	sp, r7
    a9de:	bd80      	pop	{r7, pc}
    a9e0:	0000a7e1 	.word	0x0000a7e1
    a9e4:	00002195 	.word	0x00002195

0000a9e8 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    a9e8:	b580      	push	{r7, lr}
    a9ea:	b090      	sub	sp, #64	; 0x40
    a9ec:	af00      	add	r7, sp, #0
    a9ee:	6078      	str	r0, [r7, #4]
    a9f0:	460b      	mov	r3, r1
    a9f2:	70fb      	strb	r3, [r7, #3]
    a9f4:	4613      	mov	r3, r2
    a9f6:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a9f8:	687b      	ldr	r3, [r7, #4]
    a9fa:	681b      	ldr	r3, [r3, #0]
    a9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    a9fe:	78bb      	ldrb	r3, [r7, #2]
    aa00:	2b00      	cmp	r3, #0
    aa02:	d001      	beq.n	aa08 <n25q256a_write_enable+0x20>
    aa04:	2306      	movs	r3, #6
    aa06:	e000      	b.n	aa0a <n25q256a_write_enable+0x22>
    aa08:	2304      	movs	r3, #4
    aa0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    aa0e:	f107 0320 	add.w	r3, r7, #32
    aa12:	2200      	movs	r2, #0
    aa14:	601a      	str	r2, [r3, #0]
    aa16:	605a      	str	r2, [r3, #4]
    aa18:	609a      	str	r2, [r3, #8]
    aa1a:	60da      	str	r2, [r3, #12]
    aa1c:	611a      	str	r2, [r3, #16]
    aa1e:	615a      	str	r2, [r3, #20]
    aa20:	78fb      	ldrb	r3, [r7, #3]
    aa22:	f003 0307 	and.w	r3, r3, #7
    aa26:	b2da      	uxtb	r2, r3
    aa28:	f897 3020 	ldrb.w	r3, [r7, #32]
    aa2c:	f362 0302 	bfi	r3, r2, #0, #3
    aa30:	f887 3020 	strb.w	r3, [r7, #32]
    aa34:	f897 3020 	ldrb.w	r3, [r7, #32]
    aa38:	f043 0310 	orr.w	r3, r3, #16
    aa3c:	f887 3020 	strb.w	r3, [r7, #32]
    aa40:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    aa44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    aa48:	f107 0308 	add.w	r3, r7, #8
    aa4c:	2200      	movs	r2, #0
    aa4e:	601a      	str	r2, [r3, #0]
    aa50:	605a      	str	r2, [r3, #4]
    aa52:	609a      	str	r2, [r3, #8]
    aa54:	60da      	str	r2, [r3, #12]
    aa56:	611a      	str	r2, [r3, #16]
    aa58:	615a      	str	r2, [r3, #20]
    aa5a:	78fb      	ldrb	r3, [r7, #3]
    aa5c:	f003 0307 	and.w	r3, r3, #7
    aa60:	b2da      	uxtb	r2, r3
    aa62:	7a3b      	ldrb	r3, [r7, #8]
    aa64:	f362 0302 	bfi	r3, r2, #0, #3
    aa68:	723b      	strb	r3, [r7, #8]
    aa6a:	7a3b      	ldrb	r3, [r7, #8]
    aa6c:	f043 0310 	orr.w	r3, r3, #16
    aa70:	723b      	strb	r3, [r7, #8]
    aa72:	7a3b      	ldrb	r3, [r7, #8]
    aa74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aa78:	723b      	strb	r3, [r7, #8]
    aa7a:	2305      	movs	r3, #5
    aa7c:	733b      	strb	r3, [r7, #12]
    aa7e:	2301      	movs	r3, #1
    aa80:	617b      	str	r3, [r7, #20]
    aa82:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    aa86:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    aa88:	f107 0320 	add.w	r3, r7, #32
    aa8c:	4619      	mov	r1, r3
    aa8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    aa90:	4b08      	ldr	r3, [pc, #32]	; (aab4 <n25q256a_write_enable+0xcc>)
    aa92:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    aa94:	f107 0308 	add.w	r3, r7, #8
    aa98:	4619      	mov	r1, r3
    aa9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    aa9c:	4b05      	ldr	r3, [pc, #20]	; (aab4 <n25q256a_write_enable+0xcc>)
    aa9e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    aaa0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    aaa4:	f003 0302 	and.w	r3, r3, #2
    aaa8:	2b00      	cmp	r3, #0
    aaaa:	d0ed      	beq.n	aa88 <n25q256a_write_enable+0xa0>
}
    aaac:	bf00      	nop
    aaae:	3740      	adds	r7, #64	; 0x40
    aab0:	46bd      	mov	sp, r7
    aab2:	bd80      	pop	{r7, pc}
    aab4:	00002195 	.word	0x00002195

0000aab8 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    aab8:	b590      	push	{r4, r7, lr}
    aaba:	b087      	sub	sp, #28
    aabc:	af00      	add	r7, sp, #0
    aabe:	6078      	str	r0, [r7, #4]
    aac0:	460b      	mov	r3, r1
    aac2:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    aac4:	687b      	ldr	r3, [r7, #4]
    aac6:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aac8:	68fb      	ldr	r3, [r7, #12]
    aaca:	7b1b      	ldrb	r3, [r3, #12]
    aacc:	2b00      	cmp	r3, #0
    aace:	d001      	beq.n	aad4 <n25q256a_switch_mode+0x1c>
    aad0:	2306      	movs	r3, #6
    aad2:	e000      	b.n	aad6 <n25q256a_switch_mode+0x1e>
    aad4:	2300      	movs	r3, #0
    aad6:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    aad8:	7afb      	ldrb	r3, [r7, #11]
    aada:	2265      	movs	r2, #101	; 0x65
    aadc:	4619      	mov	r1, r3
    aade:	6878      	ldr	r0, [r7, #4]
    aae0:	4b25      	ldr	r3, [pc, #148]	; (ab78 <n25q256a_switch_mode+0xc0>)
    aae2:	4798      	blx	r3
    aae4:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    aae6:	2300      	movs	r3, #0
    aae8:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    aaea:	68fb      	ldr	r3, [r7, #12]
    aaec:	7b1b      	ldrb	r3, [r3, #12]
    aaee:	78fa      	ldrb	r2, [r7, #3]
    aaf0:	429a      	cmp	r2, r3
    aaf2:	d03d      	beq.n	ab70 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    aaf4:	78fb      	ldrb	r3, [r7, #3]
    aaf6:	2b00      	cmp	r3, #0
    aaf8:	d00b      	beq.n	ab12 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    aafa:	697b      	ldr	r3, [r7, #20]
    aafc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab00:	2b00      	cmp	r3, #0
    ab02:	d011      	beq.n	ab28 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    ab04:	697b      	ldr	r3, [r7, #20]
    ab06:	f003 031f 	and.w	r3, r3, #31
    ab0a:	617b      	str	r3, [r7, #20]
			modify = 1;
    ab0c:	2301      	movs	r3, #1
    ab0e:	74fb      	strb	r3, [r7, #19]
    ab10:	e00a      	b.n	ab28 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    ab12:	697b      	ldr	r3, [r7, #20]
    ab14:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab18:	2b00      	cmp	r3, #0
    ab1a:	d105      	bne.n	ab28 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    ab1c:	697b      	ldr	r3, [r7, #20]
    ab1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    ab22:	617b      	str	r3, [r7, #20]
			modify = 1;
    ab24:	2301      	movs	r3, #1
    ab26:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    ab28:	7cfb      	ldrb	r3, [r7, #19]
    ab2a:	2b00      	cmp	r3, #0
    ab2c:	d021      	beq.n	ab72 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    ab2e:	68fb      	ldr	r3, [r7, #12]
    ab30:	78fa      	ldrb	r2, [r7, #3]
    ab32:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    ab34:	7afb      	ldrb	r3, [r7, #11]
    ab36:	2201      	movs	r2, #1
    ab38:	4619      	mov	r1, r3
    ab3a:	6878      	ldr	r0, [r7, #4]
    ab3c:	4b0f      	ldr	r3, [pc, #60]	; (ab7c <n25q256a_switch_mode+0xc4>)
    ab3e:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    ab40:	7af9      	ldrb	r1, [r7, #11]
    ab42:	697b      	ldr	r3, [r7, #20]
    ab44:	2261      	movs	r2, #97	; 0x61
    ab46:	6878      	ldr	r0, [r7, #4]
    ab48:	4c0d      	ldr	r4, [pc, #52]	; (ab80 <n25q256a_switch_mode+0xc8>)
    ab4a:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ab4c:	78fb      	ldrb	r3, [r7, #3]
    ab4e:	2b00      	cmp	r3, #0
    ab50:	d001      	beq.n	ab56 <n25q256a_switch_mode+0x9e>
    ab52:	2306      	movs	r3, #6
    ab54:	e000      	b.n	ab58 <n25q256a_switch_mode+0xa0>
    ab56:	2300      	movs	r3, #0
    ab58:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ab5a:	7afb      	ldrb	r3, [r7, #11]
    ab5c:	2265      	movs	r2, #101	; 0x65
    ab5e:	4619      	mov	r1, r3
    ab60:	6878      	ldr	r0, [r7, #4]
    ab62:	4b05      	ldr	r3, [pc, #20]	; (ab78 <n25q256a_switch_mode+0xc0>)
    ab64:	4798      	blx	r3
    ab66:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    ab68:	68fb      	ldr	r3, [r7, #12]
    ab6a:	78fa      	ldrb	r2, [r7, #3]
    ab6c:	731a      	strb	r2, [r3, #12]
    ab6e:	e000      	b.n	ab72 <n25q256a_switch_mode+0xba>
		return;
    ab70:	bf00      	nop
	}
}
    ab72:	371c      	adds	r7, #28
    ab74:	46bd      	mov	sp, r7
    ab76:	bd90      	pop	{r4, r7, pc}
    ab78:	0000a8ad 	.word	0x0000a8ad
    ab7c:	0000a9e9 	.word	0x0000a9e9
    ab80:	0000a949 	.word	0x0000a949

0000ab84 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    ab84:	b580      	push	{r7, lr}
    ab86:	b086      	sub	sp, #24
    ab88:	af00      	add	r7, sp, #0
    ab8a:	60f8      	str	r0, [r7, #12]
    ab8c:	60b9      	str	r1, [r7, #8]
    ab8e:	607a      	str	r2, [r7, #4]
    ab90:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    ab92:	68fb      	ldr	r3, [r7, #12]
    ab94:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    ab96:	4a0c      	ldr	r2, [pc, #48]	; (abc8 <n25q256a_construct+0x44>)
    ab98:	68b9      	ldr	r1, [r7, #8]
    ab9a:	68f8      	ldr	r0, [r7, #12]
    ab9c:	4b0b      	ldr	r3, [pc, #44]	; (abcc <n25q256a_construct+0x48>)
    ab9e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    aba0:	697b      	ldr	r3, [r7, #20]
    aba2:	2200      	movs	r2, #0
    aba4:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    aba6:	697b      	ldr	r3, [r7, #20]
    aba8:	2200      	movs	r2, #0
    abaa:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    abac:	697b      	ldr	r3, [r7, #20]
    abae:	687a      	ldr	r2, [r7, #4]
    abb0:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    abb2:	78fb      	ldrb	r3, [r7, #3]
    abb4:	4619      	mov	r1, r3
    abb6:	68f8      	ldr	r0, [r7, #12]
    abb8:	4b05      	ldr	r3, [pc, #20]	; (abd0 <n25q256a_construct+0x4c>)
    abba:	4798      	blx	r3
	return me;
    abbc:	68fb      	ldr	r3, [r7, #12]
}
    abbe:	4618      	mov	r0, r3
    abc0:	3718      	adds	r7, #24
    abc2:	46bd      	mov	sp, r7
    abc4:	bd80      	pop	{r7, pc}
    abc6:	bf00      	nop
    abc8:	0000cf40 	.word	0x0000cf40
    abcc:	0000b061 	.word	0x0000b061
    abd0:	0000aab9 	.word	0x0000aab9

0000abd4 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    abd4:	b580      	push	{r7, lr}
    abd6:	b08c      	sub	sp, #48	; 0x30
    abd8:	af00      	add	r7, sp, #0
    abda:	60f8      	str	r0, [r7, #12]
    abdc:	60b9      	str	r1, [r7, #8]
    abde:	607a      	str	r2, [r7, #4]
    abe0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    abe2:	68fb      	ldr	r3, [r7, #12]
    abe4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    abe6:	68fb      	ldr	r3, [r7, #12]
    abe8:	681b      	ldr	r3, [r3, #0]
    abea:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    abec:	f107 0310 	add.w	r3, r7, #16
    abf0:	2200      	movs	r2, #0
    abf2:	601a      	str	r2, [r3, #0]
    abf4:	605a      	str	r2, [r3, #4]
    abf6:	609a      	str	r2, [r3, #8]
    abf8:	60da      	str	r2, [r3, #12]
    abfa:	611a      	str	r2, [r3, #16]
    abfc:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac00:	7b1b      	ldrb	r3, [r3, #12]
    ac02:	2b00      	cmp	r3, #0
    ac04:	d001      	beq.n	ac0a <n25q256a_read+0x36>
    ac06:	2206      	movs	r2, #6
    ac08:	e000      	b.n	ac0c <n25q256a_read+0x38>
    ac0a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    ac0c:	7c3b      	ldrb	r3, [r7, #16]
    ac0e:	f362 0302 	bfi	r3, r2, #0, #3
    ac12:	743b      	strb	r3, [r7, #16]
    ac14:	7c3b      	ldrb	r3, [r7, #16]
    ac16:	f043 0310 	orr.w	r3, r3, #16
    ac1a:	743b      	strb	r3, [r7, #16]
    ac1c:	7c3b      	ldrb	r3, [r7, #16]
    ac1e:	f043 0320 	orr.w	r3, r3, #32
    ac22:	743b      	strb	r3, [r7, #16]
    ac24:	7c3b      	ldrb	r3, [r7, #16]
    ac26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ac2a:	743b      	strb	r3, [r7, #16]
    ac2c:	7c7b      	ldrb	r3, [r7, #17]
    ac2e:	2201      	movs	r2, #1
    ac30:	f362 1305 	bfi	r3, r2, #4, #2
    ac34:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    ac36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac38:	7b1b      	ldrb	r3, [r3, #12]
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d001      	beq.n	ac42 <n25q256a_read+0x6e>
    ac3e:	220a      	movs	r2, #10
    ac40:	e000      	b.n	ac44 <n25q256a_read+0x70>
    ac42:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    ac44:	7cbb      	ldrb	r3, [r7, #18]
    ac46:	f362 0304 	bfi	r3, r2, #0, #5
    ac4a:	74bb      	strb	r3, [r7, #18]
    ac4c:	230b      	movs	r3, #11
    ac4e:	753b      	strb	r3, [r7, #20]
    ac50:	687b      	ldr	r3, [r7, #4]
    ac52:	61bb      	str	r3, [r7, #24]
    ac54:	683b      	ldr	r3, [r7, #0]
    ac56:	61fb      	str	r3, [r7, #28]
    ac58:	68bb      	ldr	r3, [r7, #8]
    ac5a:	627b      	str	r3, [r7, #36]	; 0x24
	    .instruction                  = N25Q_FAST_READ,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    ac5c:	f107 0310 	add.w	r3, r7, #16
    ac60:	4619      	mov	r1, r3
    ac62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ac64:	4b03      	ldr	r3, [pc, #12]	; (ac74 <n25q256a_read+0xa0>)
    ac66:	4798      	blx	r3
	return ERR_NONE;
    ac68:	2300      	movs	r3, #0
}
    ac6a:	4618      	mov	r0, r3
    ac6c:	3730      	adds	r7, #48	; 0x30
    ac6e:	46bd      	mov	sp, r7
    ac70:	bd80      	pop	{r7, pc}
    ac72:	bf00      	nop
    ac74:	00002195 	.word	0x00002195

0000ac78 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ac78:	b580      	push	{r7, lr}
    ac7a:	b08c      	sub	sp, #48	; 0x30
    ac7c:	af00      	add	r7, sp, #0
    ac7e:	60f8      	str	r0, [r7, #12]
    ac80:	60b9      	str	r1, [r7, #8]
    ac82:	607a      	str	r2, [r7, #4]
    ac84:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ac86:	68fb      	ldr	r3, [r7, #12]
    ac88:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ac8a:	68fb      	ldr	r3, [r7, #12]
    ac8c:	681b      	ldr	r3, [r3, #0]
    ac8e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ac90:	f107 0310 	add.w	r3, r7, #16
    ac94:	2200      	movs	r2, #0
    ac96:	601a      	str	r2, [r3, #0]
    ac98:	605a      	str	r2, [r3, #4]
    ac9a:	609a      	str	r2, [r3, #8]
    ac9c:	60da      	str	r2, [r3, #12]
    ac9e:	611a      	str	r2, [r3, #16]
    aca0:	615a      	str	r2, [r3, #20]
    aca2:	7c3b      	ldrb	r3, [r7, #16]
    aca4:	f043 0310 	orr.w	r3, r3, #16
    aca8:	743b      	strb	r3, [r7, #16]
    acaa:	7c3b      	ldrb	r3, [r7, #16]
    acac:	f043 0320 	orr.w	r3, r3, #32
    acb0:	743b      	strb	r3, [r7, #16]
    acb2:	7c3b      	ldrb	r3, [r7, #16]
    acb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    acb8:	743b      	strb	r3, [r7, #16]
    acba:	7c7b      	ldrb	r3, [r7, #17]
    acbc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    acc0:	747b      	strb	r3, [r7, #17]
    acc2:	2302      	movs	r3, #2
    acc4:	753b      	strb	r3, [r7, #20]
    acc6:	687b      	ldr	r3, [r7, #4]
    acc8:	61bb      	str	r3, [r7, #24]
    acca:	683b      	ldr	r3, [r7, #0]
    accc:	61fb      	str	r3, [r7, #28]
    acce:	68bb      	ldr	r3, [r7, #8]
    acd0:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    acd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    acd4:	7b1b      	ldrb	r3, [r3, #12]
    acd6:	2b00      	cmp	r3, #0
    acd8:	d001      	beq.n	acde <n25q256a_write+0x66>
    acda:	2206      	movs	r2, #6
    acdc:	e000      	b.n	ace0 <n25q256a_write+0x68>
    acde:	2200      	movs	r2, #0
    ace0:	7c3b      	ldrb	r3, [r7, #16]
    ace2:	f362 0302 	bfi	r3, r2, #0, #3
    ace6:	743b      	strb	r3, [r7, #16]
	while (length) {
    ace8:	e035      	b.n	ad56 <n25q256a_write+0xde>
		cmd.address = address;
    acea:	687b      	ldr	r3, [r7, #4]
    acec:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    acee:	683b      	ldr	r3, [r7, #0]
    acf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    acf4:	d802      	bhi.n	acfc <n25q256a_write+0x84>
			cmd.buf_len = length;
    acf6:	683b      	ldr	r3, [r7, #0]
    acf8:	61fb      	str	r3, [r7, #28]
    acfa:	e002      	b.n	ad02 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    acfc:	f44f 7380 	mov.w	r3, #256	; 0x100
    ad00:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ad02:	7c3b      	ldrb	r3, [r7, #16]
    ad04:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ad08:	b2db      	uxtb	r3, r3
    ad0a:	2201      	movs	r2, #1
    ad0c:	4619      	mov	r1, r3
    ad0e:	68f8      	ldr	r0, [r7, #12]
    ad10:	4b19      	ldr	r3, [pc, #100]	; (ad78 <n25q256a_write+0x100>)
    ad12:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    ad14:	f107 0310 	add.w	r3, r7, #16
    ad18:	4619      	mov	r1, r3
    ad1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ad1c:	4b17      	ldr	r3, [pc, #92]	; (ad7c <n25q256a_write+0x104>)
    ad1e:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    ad20:	bf00      	nop
    ad22:	7c3b      	ldrb	r3, [r7, #16]
    ad24:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ad28:	b2db      	uxtb	r3, r3
    ad2a:	2270      	movs	r2, #112	; 0x70
    ad2c:	4619      	mov	r1, r3
    ad2e:	68f8      	ldr	r0, [r7, #12]
    ad30:	4b13      	ldr	r3, [pc, #76]	; (ad80 <n25q256a_write+0x108>)
    ad32:	4798      	blx	r3
    ad34:	4603      	mov	r3, r0
    ad36:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad3a:	2b00      	cmp	r3, #0
    ad3c:	d0f1      	beq.n	ad22 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    ad3e:	6a3a      	ldr	r2, [r7, #32]
    ad40:	69fb      	ldr	r3, [r7, #28]
    ad42:	4413      	add	r3, r2
    ad44:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    ad46:	69fb      	ldr	r3, [r7, #28]
    ad48:	683a      	ldr	r2, [r7, #0]
    ad4a:	1ad3      	subs	r3, r2, r3
    ad4c:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    ad4e:	69fb      	ldr	r3, [r7, #28]
    ad50:	687a      	ldr	r2, [r7, #4]
    ad52:	4413      	add	r3, r2
    ad54:	607b      	str	r3, [r7, #4]
	while (length) {
    ad56:	683b      	ldr	r3, [r7, #0]
    ad58:	2b00      	cmp	r3, #0
    ad5a:	d1c6      	bne.n	acea <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    ad5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad5e:	7b5b      	ldrb	r3, [r3, #13]
    ad60:	2b00      	cmp	r3, #0
    ad62:	d003      	beq.n	ad6c <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    ad64:	2101      	movs	r1, #1
    ad66:	68f8      	ldr	r0, [r7, #12]
    ad68:	4b06      	ldr	r3, [pc, #24]	; (ad84 <n25q256a_write+0x10c>)
    ad6a:	4798      	blx	r3
	}
	return ERR_NONE;
    ad6c:	2300      	movs	r3, #0
}
    ad6e:	4618      	mov	r0, r3
    ad70:	3730      	adds	r7, #48	; 0x30
    ad72:	46bd      	mov	sp, r7
    ad74:	bd80      	pop	{r7, pc}
    ad76:	bf00      	nop
    ad78:	0000a9e9 	.word	0x0000a9e9
    ad7c:	00002195 	.word	0x00002195
    ad80:	0000a8ad 	.word	0x0000a8ad
    ad84:	0000a7e1 	.word	0x0000a7e1

0000ad88 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    ad88:	b580      	push	{r7, lr}
    ad8a:	b090      	sub	sp, #64	; 0x40
    ad8c:	af00      	add	r7, sp, #0
    ad8e:	60f8      	str	r0, [r7, #12]
    ad90:	60b9      	str	r1, [r7, #8]
    ad92:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ad94:	68fb      	ldr	r3, [r7, #12]
    ad96:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ad98:	68fb      	ldr	r3, [r7, #12]
    ad9a:	681b      	ldr	r3, [r3, #0]
    ad9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    ad9e:	f107 0314 	add.w	r3, r7, #20
    ada2:	2200      	movs	r2, #0
    ada4:	601a      	str	r2, [r3, #0]
    ada6:	605a      	str	r2, [r3, #4]
    ada8:	609a      	str	r2, [r3, #8]
    adaa:	60da      	str	r2, [r3, #12]
    adac:	611a      	str	r2, [r3, #16]
    adae:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    adb2:	7b1b      	ldrb	r3, [r3, #12]
    adb4:	2b00      	cmp	r3, #0
    adb6:	d001      	beq.n	adbc <n25q256a_erase+0x34>
    adb8:	2206      	movs	r2, #6
    adba:	e000      	b.n	adbe <n25q256a_erase+0x36>
    adbc:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    adbe:	7d3b      	ldrb	r3, [r7, #20]
    adc0:	f362 0302 	bfi	r3, r2, #0, #3
    adc4:	753b      	strb	r3, [r7, #20]
    adc6:	7d3b      	ldrb	r3, [r7, #20]
    adc8:	f043 0310 	orr.w	r3, r3, #16
    adcc:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    adce:	687b      	ldr	r3, [r7, #4]
    add0:	4a56      	ldr	r2, [pc, #344]	; (af2c <n25q256a_erase+0x1a4>)
    add2:	4293      	cmp	r3, r2
    add4:	bf94      	ite	ls
    add6:	2301      	movls	r3, #1
    add8:	2300      	movhi	r3, #0
    adda:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    addc:	7d3b      	ldrb	r3, [r7, #20]
    adde:	f362 1345 	bfi	r3, r2, #5, #1
    ade2:	753b      	strb	r3, [r7, #20]
    ade4:	7d7b      	ldrb	r3, [r7, #21]
    ade6:	2202      	movs	r2, #2
    ade8:	f362 1305 	bfi	r3, r2, #4, #2
    adec:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    adee:	68bb      	ldr	r3, [r7, #8]
    adf0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    adf2:	687b      	ldr	r3, [r7, #4]
    adf4:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    adf6:	2300      	movs	r3, #0
    adf8:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    adfa:	687b      	ldr	r3, [r7, #4]
    adfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ae00:	2b00      	cmp	r3, #0
    ae02:	d104      	bne.n	ae0e <n25q256a_erase+0x86>
    ae04:	68bb      	ldr	r3, [r7, #8]
    ae06:	f3c3 030b 	ubfx	r3, r3, #0, #12
    ae0a:	2b00      	cmp	r3, #0
    ae0c:	d002      	beq.n	ae14 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    ae0e:	f06f 030c 	mvn.w	r3, #12
    ae12:	e087      	b.n	af24 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    ae14:	687b      	ldr	r3, [r7, #4]
    ae16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    ae1a:	d368      	bcc.n	aeee <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    ae1c:	23c7      	movs	r3, #199	; 0xc7
    ae1e:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ae20:	7d3b      	ldrb	r3, [r7, #20]
    ae22:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae26:	b2db      	uxtb	r3, r3
    ae28:	2201      	movs	r2, #1
    ae2a:	4619      	mov	r1, r3
    ae2c:	68f8      	ldr	r0, [r7, #12]
    ae2e:	4b40      	ldr	r3, [pc, #256]	; (af30 <n25q256a_erase+0x1a8>)
    ae30:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    ae32:	f107 0314 	add.w	r3, r7, #20
    ae36:	4619      	mov	r1, r3
    ae38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ae3a:	4b3e      	ldr	r3, [pc, #248]	; (af34 <n25q256a_erase+0x1ac>)
    ae3c:	4798      	blx	r3
    ae3e:	e059      	b.n	aef4 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    ae40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae42:	b29b      	uxth	r3, r3
    ae44:	2b00      	cmp	r3, #0
    ae46:	d11f      	bne.n	ae88 <n25q256a_erase+0x100>
    ae48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ae4e:	d31b      	bcc.n	ae88 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    ae50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae52:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    ae54:	23d8      	movs	r3, #216	; 0xd8
    ae56:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ae58:	7d3b      	ldrb	r3, [r7, #20]
    ae5a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae5e:	b2db      	uxtb	r3, r3
    ae60:	2201      	movs	r2, #1
    ae62:	4619      	mov	r1, r3
    ae64:	68f8      	ldr	r0, [r7, #12]
    ae66:	4b32      	ldr	r3, [pc, #200]	; (af30 <n25q256a_erase+0x1a8>)
    ae68:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    ae6a:	f107 0314 	add.w	r3, r7, #20
    ae6e:	4619      	mov	r1, r3
    ae70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ae72:	4b30      	ldr	r3, [pc, #192]	; (af34 <n25q256a_erase+0x1ac>)
    ae74:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    ae76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae78:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ae7c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    ae7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae80:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    ae84:	63bb      	str	r3, [r7, #56]	; 0x38
    ae86:	e023      	b.n	aed0 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    ae88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    ae8e:	d31b      	bcc.n	aec8 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    ae90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ae92:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    ae94:	2320      	movs	r3, #32
    ae96:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    ae98:	7d3b      	ldrb	r3, [r7, #20]
    ae9a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae9e:	b2db      	uxtb	r3, r3
    aea0:	2201      	movs	r2, #1
    aea2:	4619      	mov	r1, r3
    aea4:	68f8      	ldr	r0, [r7, #12]
    aea6:	4b22      	ldr	r3, [pc, #136]	; (af30 <n25q256a_erase+0x1a8>)
    aea8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    aeaa:	f107 0314 	add.w	r3, r7, #20
    aeae:	4619      	mov	r1, r3
    aeb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    aeb2:	4b20      	ldr	r3, [pc, #128]	; (af34 <n25q256a_erase+0x1ac>)
    aeb4:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    aeb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    aeb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    aebc:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aec0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    aec4:	63bb      	str	r3, [r7, #56]	; 0x38
    aec6:	e003      	b.n	aed0 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    aec8:	f06f 030c 	mvn.w	r3, #12
    aecc:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    aece:	e011      	b.n	aef4 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    aed0:	bf00      	nop
    aed2:	7d3b      	ldrb	r3, [r7, #20]
    aed4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aed8:	b2db      	uxtb	r3, r3
    aeda:	2270      	movs	r2, #112	; 0x70
    aedc:	4619      	mov	r1, r3
    aede:	68f8      	ldr	r0, [r7, #12]
    aee0:	4b15      	ldr	r3, [pc, #84]	; (af38 <n25q256a_erase+0x1b0>)
    aee2:	4798      	blx	r3
    aee4:	4603      	mov	r3, r0
    aee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aeea:	2b00      	cmp	r3, #0
    aeec:	d0f1      	beq.n	aed2 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aef0:	2b00      	cmp	r3, #0
    aef2:	d1a5      	bne.n	ae40 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    aef4:	bf00      	nop
    aef6:	7d3b      	ldrb	r3, [r7, #20]
    aef8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aefc:	b2db      	uxtb	r3, r3
    aefe:	2270      	movs	r2, #112	; 0x70
    af00:	4619      	mov	r1, r3
    af02:	68f8      	ldr	r0, [r7, #12]
    af04:	4b0c      	ldr	r3, [pc, #48]	; (af38 <n25q256a_erase+0x1b0>)
    af06:	4798      	blx	r3
    af08:	4603      	mov	r3, r0
    af0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af0e:	2b00      	cmp	r3, #0
    af10:	d0f1      	beq.n	aef6 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af14:	7b5b      	ldrb	r3, [r3, #13]
    af16:	2b00      	cmp	r3, #0
    af18:	d003      	beq.n	af22 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    af1a:	2101      	movs	r1, #1
    af1c:	68f8      	ldr	r0, [r7, #12]
    af1e:	4b07      	ldr	r3, [pc, #28]	; (af3c <n25q256a_erase+0x1b4>)
    af20:	4798      	blx	r3
	}
	return rc;
    af22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    af24:	4618      	mov	r0, r3
    af26:	3740      	adds	r7, #64	; 0x40
    af28:	46bd      	mov	sp, r7
    af2a:	bd80      	pop	{r7, pc}
    af2c:	001fffff 	.word	0x001fffff
    af30:	0000a9e9 	.word	0x0000a9e9
    af34:	00002195 	.word	0x00002195
    af38:	0000a8ad 	.word	0x0000a8ad
    af3c:	0000a7e1 	.word	0x0000a7e1

0000af40 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    af40:	b590      	push	{r4, r7, lr}
    af42:	b085      	sub	sp, #20
    af44:	af00      	add	r7, sp, #0
    af46:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    af48:	687b      	ldr	r3, [r7, #4]
    af4a:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    af4c:	68fb      	ldr	r3, [r7, #12]
    af4e:	7b1b      	ldrb	r3, [r3, #12]
    af50:	2b00      	cmp	r3, #0
    af52:	d001      	beq.n	af58 <n25q256a_enable_xip+0x18>
    af54:	2306      	movs	r3, #6
    af56:	e000      	b.n	af5a <n25q256a_enable_xip+0x1a>
    af58:	2300      	movs	r3, #0
    af5a:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    af5c:	68fb      	ldr	r3, [r7, #12]
    af5e:	7b5b      	ldrb	r3, [r3, #13]
    af60:	2b00      	cmp	r3, #0
    af62:	d129      	bne.n	afb8 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    af64:	7afb      	ldrb	r3, [r7, #11]
    af66:	2285      	movs	r2, #133	; 0x85
    af68:	4619      	mov	r1, r3
    af6a:	6878      	ldr	r0, [r7, #4]
    af6c:	4b15      	ldr	r3, [pc, #84]	; (afc4 <n25q256a_enable_xip+0x84>)
    af6e:	4798      	blx	r3
    af70:	4603      	mov	r3, r0
    af72:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    af74:	7abb      	ldrb	r3, [r7, #10]
    af76:	f003 0308 	and.w	r3, r3, #8
    af7a:	2b00      	cmp	r3, #0
    af7c:	d015      	beq.n	afaa <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    af7e:	7abb      	ldrb	r3, [r7, #10]
    af80:	f023 0308 	bic.w	r3, r3, #8
    af84:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    af86:	7abb      	ldrb	r3, [r7, #10]
    af88:	7af9      	ldrb	r1, [r7, #11]
    af8a:	2281      	movs	r2, #129	; 0x81
    af8c:	6878      	ldr	r0, [r7, #4]
    af8e:	4c0e      	ldr	r4, [pc, #56]	; (afc8 <n25q256a_enable_xip+0x88>)
    af90:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    af92:	bf00      	nop
    af94:	7afb      	ldrb	r3, [r7, #11]
    af96:	2270      	movs	r2, #112	; 0x70
    af98:	4619      	mov	r1, r3
    af9a:	6878      	ldr	r0, [r7, #4]
    af9c:	4b09      	ldr	r3, [pc, #36]	; (afc4 <n25q256a_enable_xip+0x84>)
    af9e:	4798      	blx	r3
    afa0:	4603      	mov	r3, r0
    afa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    afa6:	2b00      	cmp	r3, #0
    afa8:	d0f4      	beq.n	af94 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    afaa:	68fb      	ldr	r3, [r7, #12]
    afac:	2201      	movs	r2, #1
    afae:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    afb0:	2101      	movs	r1, #1
    afb2:	6878      	ldr	r0, [r7, #4]
    afb4:	4b05      	ldr	r3, [pc, #20]	; (afcc <n25q256a_enable_xip+0x8c>)
    afb6:	4798      	blx	r3
	}
	return ERR_NONE;
    afb8:	2300      	movs	r3, #0
}
    afba:	4618      	mov	r0, r3
    afbc:	3714      	adds	r7, #20
    afbe:	46bd      	mov	sp, r7
    afc0:	bd90      	pop	{r4, r7, pc}
    afc2:	bf00      	nop
    afc4:	0000a8ad 	.word	0x0000a8ad
    afc8:	0000a949 	.word	0x0000a949
    afcc:	0000a7e1 	.word	0x0000a7e1

0000afd0 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    afd0:	b580      	push	{r7, lr}
    afd2:	b086      	sub	sp, #24
    afd4:	af00      	add	r7, sp, #0
    afd6:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    afd8:	687b      	ldr	r3, [r7, #4]
    afda:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    afdc:	687b      	ldr	r3, [r7, #4]
    afde:	681b      	ldr	r3, [r3, #0]
    afe0:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    afe2:	697b      	ldr	r3, [r7, #20]
    afe4:	7b1b      	ldrb	r3, [r3, #12]
    afe6:	2b00      	cmp	r3, #0
    afe8:	d001      	beq.n	afee <n25q256a_disable_xip+0x1e>
    afea:	2306      	movs	r3, #6
    afec:	e000      	b.n	aff0 <n25q256a_disable_xip+0x20>
    afee:	2300      	movs	r3, #0
    aff0:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    aff2:	2100      	movs	r1, #0
    aff4:	6878      	ldr	r0, [r7, #4]
    aff6:	4b15      	ldr	r3, [pc, #84]	; (b04c <n25q256a_disable_xip+0x7c>)
    aff8:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    affa:	7bfb      	ldrb	r3, [r7, #15]
    affc:	2285      	movs	r2, #133	; 0x85
    affe:	4619      	mov	r1, r3
    b000:	6878      	ldr	r0, [r7, #4]
    b002:	4b13      	ldr	r3, [pc, #76]	; (b050 <n25q256a_disable_xip+0x80>)
    b004:	4798      	blx	r3
    b006:	4603      	mov	r3, r0
    b008:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b00a:	7bbb      	ldrb	r3, [r7, #14]
    b00c:	f003 0308 	and.w	r3, r3, #8
    b010:	2b00      	cmp	r3, #0
    b012:	d113      	bne.n	b03c <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b014:	697b      	ldr	r3, [r7, #20]
    b016:	689b      	ldr	r3, [r3, #8]
    b018:	2b00      	cmp	r3, #0
    b01a:	d00f      	beq.n	b03c <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b01c:	693b      	ldr	r3, [r7, #16]
    b01e:	681b      	ldr	r3, [r3, #0]
    b020:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b022:	6938      	ldr	r0, [r7, #16]
    b024:	4b0b      	ldr	r3, [pc, #44]	; (b054 <n25q256a_disable_xip+0x84>)
    b026:	4798      	blx	r3
			n25q->pin_exit_xip();
    b028:	697b      	ldr	r3, [r7, #20]
    b02a:	689b      	ldr	r3, [r3, #8]
    b02c:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b02e:	68b9      	ldr	r1, [r7, #8]
    b030:	6938      	ldr	r0, [r7, #16]
    b032:	4b09      	ldr	r3, [pc, #36]	; (b058 <n25q256a_disable_xip+0x88>)
    b034:	4798      	blx	r3
			qspi_sync_enable(descr);
    b036:	6938      	ldr	r0, [r7, #16]
    b038:	4b08      	ldr	r3, [pc, #32]	; (b05c <n25q256a_disable_xip+0x8c>)
    b03a:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b03c:	697b      	ldr	r3, [r7, #20]
    b03e:	2200      	movs	r2, #0
    b040:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b042:	2300      	movs	r3, #0
}
    b044:	4618      	mov	r0, r3
    b046:	3718      	adds	r7, #24
    b048:	46bd      	mov	sp, r7
    b04a:	bd80      	pop	{r7, pc}
    b04c:	0000a7e1 	.word	0x0000a7e1
    b050:	0000a8ad 	.word	0x0000a8ad
    b054:	00002159 	.word	0x00002159
    b058:	000020d1 	.word	0x000020d1
    b05c:	0000211d 	.word	0x0000211d

0000b060 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b060:	b480      	push	{r7}
    b062:	b085      	sub	sp, #20
    b064:	af00      	add	r7, sp, #0
    b066:	60f8      	str	r0, [r7, #12]
    b068:	60b9      	str	r1, [r7, #8]
    b06a:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b06c:	68fb      	ldr	r3, [r7, #12]
    b06e:	68ba      	ldr	r2, [r7, #8]
    b070:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b072:	68fb      	ldr	r3, [r7, #12]
    b074:	687a      	ldr	r2, [r7, #4]
    b076:	605a      	str	r2, [r3, #4]

	return me;
    b078:	68fb      	ldr	r3, [r7, #12]
}
    b07a:	4618      	mov	r0, r3
    b07c:	3714      	adds	r7, #20
    b07e:	46bd      	mov	sp, r7
    b080:	f85d 7b04 	ldr.w	r7, [sp], #4
    b084:	4770      	bx	lr

0000b086 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b086:	b480      	push	{r7}
    b088:	b083      	sub	sp, #12
    b08a:	af00      	add	r7, sp, #0
    b08c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b08e:	687b      	ldr	r3, [r7, #4]
    b090:	781b      	ldrb	r3, [r3, #0]
    b092:	b29a      	uxth	r2, r3
    b094:	687b      	ldr	r3, [r7, #4]
    b096:	3301      	adds	r3, #1
    b098:	781b      	ldrb	r3, [r3, #0]
    b09a:	b29b      	uxth	r3, r3
    b09c:	021b      	lsls	r3, r3, #8
    b09e:	b29b      	uxth	r3, r3
    b0a0:	4413      	add	r3, r2
    b0a2:	b29b      	uxth	r3, r3
}
    b0a4:	4618      	mov	r0, r3
    b0a6:	370c      	adds	r7, #12
    b0a8:	46bd      	mov	sp, r7
    b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0ae:	4770      	bx	lr

0000b0b0 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b0b0:	b480      	push	{r7}
    b0b2:	b083      	sub	sp, #12
    b0b4:	af00      	add	r7, sp, #0
    b0b6:	6078      	str	r0, [r7, #4]
	return desc[0];
    b0b8:	687b      	ldr	r3, [r7, #4]
    b0ba:	781b      	ldrb	r3, [r3, #0]
}
    b0bc:	4618      	mov	r0, r3
    b0be:	370c      	adds	r7, #12
    b0c0:	46bd      	mov	sp, r7
    b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0c6:	4770      	bx	lr

0000b0c8 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b0c8:	b580      	push	{r7, lr}
    b0ca:	b082      	sub	sp, #8
    b0cc:	af00      	add	r7, sp, #0
    b0ce:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b0d0:	6878      	ldr	r0, [r7, #4]
    b0d2:	4b05      	ldr	r3, [pc, #20]	; (b0e8 <usb_desc_next+0x20>)
    b0d4:	4798      	blx	r3
    b0d6:	4603      	mov	r3, r0
    b0d8:	461a      	mov	r2, r3
    b0da:	687b      	ldr	r3, [r7, #4]
    b0dc:	4413      	add	r3, r2
}
    b0de:	4618      	mov	r0, r3
    b0e0:	3708      	adds	r7, #8
    b0e2:	46bd      	mov	sp, r7
    b0e4:	bd80      	pop	{r7, pc}
    b0e6:	bf00      	nop
    b0e8:	0000b0b1 	.word	0x0000b0b1

0000b0ec <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b0ec:	b580      	push	{r7, lr}
    b0ee:	b08c      	sub	sp, #48	; 0x30
    b0f0:	af00      	add	r7, sp, #0
    b0f2:	6078      	str	r0, [r7, #4]
    b0f4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b0f6:	687b      	ldr	r3, [r7, #4]
    b0f8:	689b      	ldr	r3, [r3, #8]
    b0fa:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b0fc:	683b      	ldr	r3, [r7, #0]
    b0fe:	681b      	ldr	r3, [r3, #0]
    b100:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b102:	2300      	movs	r3, #0
    b104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b108:	e08f      	b.n	b22a <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b10c:	2b00      	cmp	r3, #0
    b10e:	d102      	bne.n	b116 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b110:	f06f 0309 	mvn.w	r3, #9
    b114:	e092      	b.n	b23c <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b118:	789b      	ldrb	r3, [r3, #2]
    b11a:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b11e:	795b      	ldrb	r3, [r3, #5]
    b120:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b122:	7c7b      	ldrb	r3, [r7, #17]
    b124:	2b02      	cmp	r3, #2
    b126:	d002      	beq.n	b12e <cdcdf_acm_enable+0x42>
    b128:	7c7b      	ldrb	r3, [r7, #17]
    b12a:	2b0a      	cmp	r3, #10
    b12c:	d121      	bne.n	b172 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b12e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b132:	6a3a      	ldr	r2, [r7, #32]
    b134:	5cd2      	ldrb	r2, [r2, r3]
    b136:	7bbb      	ldrb	r3, [r7, #14]
    b138:	429a      	cmp	r2, r3
    b13a:	d102      	bne.n	b142 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b13c:	f06f 0311 	mvn.w	r3, #17
    b140:	e07c      	b.n	b23c <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b146:	6a3a      	ldr	r2, [r7, #32]
    b148:	5cd3      	ldrb	r3, [r2, r3]
    b14a:	2bff      	cmp	r3, #255	; 0xff
    b14c:	d002      	beq.n	b154 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b14e:	f06f 031b 	mvn.w	r3, #27
    b152:	e073      	b.n	b23c <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b158:	7bb9      	ldrb	r1, [r7, #14]
    b15a:	6a3a      	ldr	r2, [r7, #32]
    b15c:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b15e:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b160:	683b      	ldr	r3, [r7, #0]
    b162:	685b      	ldr	r3, [r3, #4]
    b164:	2205      	movs	r2, #5
    b166:	4619      	mov	r1, r3
    b168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b16a:	4b36      	ldr	r3, [pc, #216]	; (b244 <cdcdf_acm_enable+0x158>)
    b16c:	4798      	blx	r3
    b16e:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b170:	e047      	b.n	b202 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b172:	f06f 0309 	mvn.w	r3, #9
    b176:	e061      	b.n	b23c <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b178:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b17a:	789b      	ldrb	r3, [r3, #2]
    b17c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b180:	78db      	ldrb	r3, [r3, #3]
    b182:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b186:	3304      	adds	r3, #4
    b188:	4618      	mov	r0, r3
    b18a:	4b2f      	ldr	r3, [pc, #188]	; (b248 <cdcdf_acm_enable+0x15c>)
    b18c:	4798      	blx	r3
    b18e:	4603      	mov	r3, r0
    b190:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b192:	7ebb      	ldrb	r3, [r7, #26]
    b194:	7ef9      	ldrb	r1, [r7, #27]
    b196:	8bba      	ldrh	r2, [r7, #28]
    b198:	4618      	mov	r0, r3
    b19a:	4b2c      	ldr	r3, [pc, #176]	; (b24c <cdcdf_acm_enable+0x160>)
    b19c:	4798      	blx	r3
    b19e:	4603      	mov	r3, r0
    b1a0:	2b00      	cmp	r3, #0
    b1a2:	d002      	beq.n	b1aa <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b1a4:	f06f 0313 	mvn.w	r3, #19
    b1a8:	e048      	b.n	b23c <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b1aa:	7ebb      	ldrb	r3, [r7, #26]
    b1ac:	b25b      	sxtb	r3, r3
    b1ae:	2b00      	cmp	r3, #0
    b1b0:	da0f      	bge.n	b1d2 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b1b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b1b6:	7eb9      	ldrb	r1, [r7, #26]
    b1b8:	6a3a      	ldr	r2, [r7, #32]
    b1ba:	4413      	add	r3, r2
    b1bc:	460a      	mov	r2, r1
    b1be:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b1c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b1c4:	6a3a      	ldr	r2, [r7, #32]
    b1c6:	4413      	add	r3, r2
    b1c8:	789b      	ldrb	r3, [r3, #2]
    b1ca:	4618      	mov	r0, r3
    b1cc:	4b20      	ldr	r3, [pc, #128]	; (b250 <cdcdf_acm_enable+0x164>)
    b1ce:	4798      	blx	r3
    b1d0:	e007      	b.n	b1e2 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b1d2:	7eba      	ldrb	r2, [r7, #26]
    b1d4:	6a3b      	ldr	r3, [r7, #32]
    b1d6:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b1d8:	6a3b      	ldr	r3, [r7, #32]
    b1da:	791b      	ldrb	r3, [r3, #4]
    b1dc:	4618      	mov	r0, r3
    b1de:	4b1c      	ldr	r3, [pc, #112]	; (b250 <cdcdf_acm_enable+0x164>)
    b1e0:	4798      	blx	r3
			}
			desc->sod = ep;
    b1e2:	683b      	ldr	r3, [r7, #0]
    b1e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b1e6:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b1e8:	683b      	ldr	r3, [r7, #0]
    b1ea:	681b      	ldr	r3, [r3, #0]
    b1ec:	4618      	mov	r0, r3
    b1ee:	4b19      	ldr	r3, [pc, #100]	; (b254 <cdcdf_acm_enable+0x168>)
    b1f0:	4798      	blx	r3
    b1f2:	4602      	mov	r2, r0
    b1f4:	683b      	ldr	r3, [r7, #0]
    b1f6:	685b      	ldr	r3, [r3, #4]
    b1f8:	4619      	mov	r1, r3
    b1fa:	4610      	mov	r0, r2
    b1fc:	4b16      	ldr	r3, [pc, #88]	; (b258 <cdcdf_acm_enable+0x16c>)
    b1fe:	4798      	blx	r3
    b200:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b204:	2b00      	cmp	r3, #0
    b206:	d1b7      	bne.n	b178 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b208:	683b      	ldr	r3, [r7, #0]
    b20a:	681b      	ldr	r3, [r3, #0]
    b20c:	4618      	mov	r0, r3
    b20e:	4b11      	ldr	r3, [pc, #68]	; (b254 <cdcdf_acm_enable+0x168>)
    b210:	4798      	blx	r3
    b212:	683b      	ldr	r3, [r7, #0]
    b214:	685b      	ldr	r3, [r3, #4]
    b216:	2204      	movs	r2, #4
    b218:	4619      	mov	r1, r3
    b21a:	4b0a      	ldr	r3, [pc, #40]	; (b244 <cdcdf_acm_enable+0x158>)
    b21c:	4798      	blx	r3
    b21e:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b224:	3301      	adds	r3, #1
    b226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b22a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b22e:	2b01      	cmp	r3, #1
    b230:	f67f af6b 	bls.w	b10a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b234:	4b09      	ldr	r3, [pc, #36]	; (b25c <cdcdf_acm_enable+0x170>)
    b236:	2201      	movs	r2, #1
    b238:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b23a:	2300      	movs	r3, #0
}
    b23c:	4618      	mov	r0, r3
    b23e:	3730      	adds	r7, #48	; 0x30
    b240:	46bd      	mov	sp, r7
    b242:	bd80      	pop	{r7, pc}
    b244:	0000c371 	.word	0x0000c371
    b248:	0000b087 	.word	0x0000b087
    b24c:	00002e31 	.word	0x00002e31
    b250:	00002f1d 	.word	0x00002f1d
    b254:	0000b0c9 	.word	0x0000b0c9
    b258:	0000c3cd 	.word	0x0000c3cd
    b25c:	20000ae8 	.word	0x20000ae8

0000b260 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b260:	b580      	push	{r7, lr}
    b262:	b088      	sub	sp, #32
    b264:	af00      	add	r7, sp, #0
    b266:	6078      	str	r0, [r7, #4]
    b268:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b26a:	687b      	ldr	r3, [r7, #4]
    b26c:	689b      	ldr	r3, [r3, #8]
    b26e:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b270:	683b      	ldr	r3, [r7, #0]
    b272:	2b00      	cmp	r3, #0
    b274:	d00c      	beq.n	b290 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b276:	683b      	ldr	r3, [r7, #0]
    b278:	681b      	ldr	r3, [r3, #0]
    b27a:	795b      	ldrb	r3, [r3, #5]
    b27c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b27e:	7c7b      	ldrb	r3, [r7, #17]
    b280:	2b02      	cmp	r3, #2
    b282:	d005      	beq.n	b290 <cdcdf_acm_disable+0x30>
    b284:	7c7b      	ldrb	r3, [r7, #17]
    b286:	2b0a      	cmp	r3, #10
    b288:	d002      	beq.n	b290 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b28a:	f06f 0309 	mvn.w	r3, #9
    b28e:	e035      	b.n	b2fc <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b290:	2300      	movs	r3, #0
    b292:	77fb      	strb	r3, [r7, #31]
    b294:	e01f      	b.n	b2d6 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b296:	7ffb      	ldrb	r3, [r7, #31]
    b298:	69ba      	ldr	r2, [r7, #24]
    b29a:	5cd3      	ldrb	r3, [r2, r3]
    b29c:	2bff      	cmp	r3, #255	; 0xff
    b29e:	d016      	beq.n	b2ce <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b2a0:	7ffb      	ldrb	r3, [r7, #31]
    b2a2:	69ba      	ldr	r2, [r7, #24]
    b2a4:	21ff      	movs	r1, #255	; 0xff
    b2a6:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b2a8:	7ffb      	ldrb	r3, [r7, #31]
    b2aa:	69ba      	ldr	r2, [r7, #24]
    b2ac:	4413      	add	r3, r2
    b2ae:	789b      	ldrb	r3, [r3, #2]
    b2b0:	2bff      	cmp	r3, #255	; 0xff
    b2b2:	d00d      	beq.n	b2d0 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b2b4:	7ffb      	ldrb	r3, [r7, #31]
    b2b6:	69ba      	ldr	r2, [r7, #24]
    b2b8:	4413      	add	r3, r2
    b2ba:	789b      	ldrb	r3, [r3, #2]
    b2bc:	4618      	mov	r0, r3
    b2be:	4b11      	ldr	r3, [pc, #68]	; (b304 <cdcdf_acm_disable+0xa4>)
    b2c0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b2c2:	7ffb      	ldrb	r3, [r7, #31]
    b2c4:	69ba      	ldr	r2, [r7, #24]
    b2c6:	4413      	add	r3, r2
    b2c8:	22ff      	movs	r2, #255	; 0xff
    b2ca:	709a      	strb	r2, [r3, #2]
    b2cc:	e000      	b.n	b2d0 <cdcdf_acm_disable+0x70>
			continue;
    b2ce:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b2d0:	7ffb      	ldrb	r3, [r7, #31]
    b2d2:	3301      	adds	r3, #1
    b2d4:	77fb      	strb	r3, [r7, #31]
    b2d6:	7ffb      	ldrb	r3, [r7, #31]
    b2d8:	2b01      	cmp	r3, #1
    b2da:	d9dc      	bls.n	b296 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b2dc:	69bb      	ldr	r3, [r7, #24]
    b2de:	791b      	ldrb	r3, [r3, #4]
    b2e0:	2bff      	cmp	r3, #255	; 0xff
    b2e2:	d007      	beq.n	b2f4 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b2e4:	69bb      	ldr	r3, [r7, #24]
    b2e6:	791b      	ldrb	r3, [r3, #4]
    b2e8:	4618      	mov	r0, r3
    b2ea:	4b06      	ldr	r3, [pc, #24]	; (b304 <cdcdf_acm_disable+0xa4>)
    b2ec:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b2ee:	69bb      	ldr	r3, [r7, #24]
    b2f0:	22ff      	movs	r2, #255	; 0xff
    b2f2:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b2f4:	4b04      	ldr	r3, [pc, #16]	; (b308 <cdcdf_acm_disable+0xa8>)
    b2f6:	2200      	movs	r2, #0
    b2f8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b2fa:	2300      	movs	r3, #0
}
    b2fc:	4618      	mov	r0, r3
    b2fe:	3720      	adds	r7, #32
    b300:	46bd      	mov	sp, r7
    b302:	bd80      	pop	{r7, pc}
    b304:	00002ecd 	.word	0x00002ecd
    b308:	20000ae8 	.word	0x20000ae8

0000b30c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    b30c:	b580      	push	{r7, lr}
    b30e:	b084      	sub	sp, #16
    b310:	af00      	add	r7, sp, #0
    b312:	60f8      	str	r0, [r7, #12]
    b314:	460b      	mov	r3, r1
    b316:	607a      	str	r2, [r7, #4]
    b318:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    b31a:	7afb      	ldrb	r3, [r7, #11]
    b31c:	2b01      	cmp	r3, #1
    b31e:	d009      	beq.n	b334 <cdcdf_acm_ctrl+0x28>
    b320:	2b02      	cmp	r3, #2
    b322:	d00d      	beq.n	b340 <cdcdf_acm_ctrl+0x34>
    b324:	2b00      	cmp	r3, #0
    b326:	d10e      	bne.n	b346 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b328:	6879      	ldr	r1, [r7, #4]
    b32a:	68f8      	ldr	r0, [r7, #12]
    b32c:	4b09      	ldr	r3, [pc, #36]	; (b354 <cdcdf_acm_ctrl+0x48>)
    b32e:	4798      	blx	r3
    b330:	4603      	mov	r3, r0
    b332:	e00a      	b.n	b34a <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b334:	6879      	ldr	r1, [r7, #4]
    b336:	68f8      	ldr	r0, [r7, #12]
    b338:	4b07      	ldr	r3, [pc, #28]	; (b358 <cdcdf_acm_ctrl+0x4c>)
    b33a:	4798      	blx	r3
    b33c:	4603      	mov	r3, r0
    b33e:	e004      	b.n	b34a <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    b340:	f06f 031a 	mvn.w	r3, #26
    b344:	e001      	b.n	b34a <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    b346:	f06f 030c 	mvn.w	r3, #12
	}
}
    b34a:	4618      	mov	r0, r3
    b34c:	3710      	adds	r7, #16
    b34e:	46bd      	mov	sp, r7
    b350:	bd80      	pop	{r7, pc}
    b352:	bf00      	nop
    b354:	0000b0ed 	.word	0x0000b0ed
    b358:	0000b261 	.word	0x0000b261

0000b35c <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b35c:	b590      	push	{r4, r7, lr}
    b35e:	b087      	sub	sp, #28
    b360:	af00      	add	r7, sp, #0
    b362:	4603      	mov	r3, r0
    b364:	6039      	str	r1, [r7, #0]
    b366:	71fb      	strb	r3, [r7, #7]
    b368:	4613      	mov	r3, r2
    b36a:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    b36c:	683b      	ldr	r3, [r7, #0]
    b36e:	799a      	ldrb	r2, [r3, #6]
    b370:	79db      	ldrb	r3, [r3, #7]
    b372:	021b      	lsls	r3, r3, #8
    b374:	4313      	orrs	r3, r2
    b376:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b378:	4b2b      	ldr	r3, [pc, #172]	; (b428 <cdcdf_acm_set_req+0xcc>)
    b37a:	4798      	blx	r3
    b37c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    b37e:	683b      	ldr	r3, [r7, #0]
    b380:	785b      	ldrb	r3, [r3, #1]
    b382:	2b20      	cmp	r3, #32
    b384:	d002      	beq.n	b38c <cdcdf_acm_set_req+0x30>
    b386:	2b22      	cmp	r3, #34	; 0x22
    b388:	d034      	beq.n	b3f4 <cdcdf_acm_set_req+0x98>
    b38a:	e046      	b.n	b41a <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b38c:	8afb      	ldrh	r3, [r7, #22]
    b38e:	2b07      	cmp	r3, #7
    b390:	d002      	beq.n	b398 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    b392:	f04f 33ff 	mov.w	r3, #4294967295
    b396:	e042      	b.n	b41e <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    b398:	79bb      	ldrb	r3, [r7, #6]
    b39a:	2b00      	cmp	r3, #0
    b39c:	d107      	bne.n	b3ae <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b39e:	8afa      	ldrh	r2, [r7, #22]
    b3a0:	79f8      	ldrb	r0, [r7, #7]
    b3a2:	2300      	movs	r3, #0
    b3a4:	6939      	ldr	r1, [r7, #16]
    b3a6:	4c21      	ldr	r4, [pc, #132]	; (b42c <cdcdf_acm_set_req+0xd0>)
    b3a8:	47a0      	blx	r4
    b3aa:	4603      	mov	r3, r0
    b3ac:	e037      	b.n	b41e <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b3ae:	693a      	ldr	r2, [r7, #16]
    b3b0:	f107 0308 	add.w	r3, r7, #8
    b3b4:	6810      	ldr	r0, [r2, #0]
    b3b6:	6018      	str	r0, [r3, #0]
    b3b8:	8891      	ldrh	r1, [r2, #4]
    b3ba:	7992      	ldrb	r2, [r2, #6]
    b3bc:	8099      	strh	r1, [r3, #4]
    b3be:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b3c0:	4b1b      	ldr	r3, [pc, #108]	; (b430 <cdcdf_acm_set_req+0xd4>)
    b3c2:	681b      	ldr	r3, [r3, #0]
    b3c4:	2b00      	cmp	r3, #0
    b3c6:	d008      	beq.n	b3da <cdcdf_acm_set_req+0x7e>
    b3c8:	4b19      	ldr	r3, [pc, #100]	; (b430 <cdcdf_acm_set_req+0xd4>)
    b3ca:	681b      	ldr	r3, [r3, #0]
    b3cc:	f107 0208 	add.w	r2, r7, #8
    b3d0:	4610      	mov	r0, r2
    b3d2:	4798      	blx	r3
    b3d4:	4603      	mov	r3, r0
    b3d6:	2b00      	cmp	r3, #0
    b3d8:	d00a      	beq.n	b3f0 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    b3da:	4b16      	ldr	r3, [pc, #88]	; (b434 <cdcdf_acm_set_req+0xd8>)
    b3dc:	f107 0208 	add.w	r2, r7, #8
    b3e0:	e892 0003 	ldmia.w	r2, {r0, r1}
    b3e4:	6018      	str	r0, [r3, #0]
    b3e6:	3304      	adds	r3, #4
    b3e8:	8019      	strh	r1, [r3, #0]
    b3ea:	3302      	adds	r3, #2
    b3ec:	0c0a      	lsrs	r2, r1, #16
    b3ee:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    b3f0:	2300      	movs	r3, #0
    b3f2:	e014      	b.n	b41e <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    b3f4:	2300      	movs	r3, #0
    b3f6:	2200      	movs	r2, #0
    b3f8:	2100      	movs	r1, #0
    b3fa:	2000      	movs	r0, #0
    b3fc:	4c0b      	ldr	r4, [pc, #44]	; (b42c <cdcdf_acm_set_req+0xd0>)
    b3fe:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    b400:	4b0d      	ldr	r3, [pc, #52]	; (b438 <cdcdf_acm_set_req+0xdc>)
    b402:	681b      	ldr	r3, [r3, #0]
    b404:	2b00      	cmp	r3, #0
    b406:	d006      	beq.n	b416 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    b408:	4b0b      	ldr	r3, [pc, #44]	; (b438 <cdcdf_acm_set_req+0xdc>)
    b40a:	681b      	ldr	r3, [r3, #0]
    b40c:	683a      	ldr	r2, [r7, #0]
    b40e:	8852      	ldrh	r2, [r2, #2]
    b410:	b292      	uxth	r2, r2
    b412:	4610      	mov	r0, r2
    b414:	4798      	blx	r3
		}
		return ERR_NONE;
    b416:	2300      	movs	r3, #0
    b418:	e001      	b.n	b41e <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    b41a:	f06f 030c 	mvn.w	r3, #12
	}
}
    b41e:	4618      	mov	r0, r3
    b420:	371c      	adds	r7, #28
    b422:	46bd      	mov	sp, r7
    b424:	bd90      	pop	{r4, r7, pc}
    b426:	bf00      	nop
    b428:	0000c26d 	.word	0x0000c26d
    b42c:	0000c0e1 	.word	0x0000c0e1
    b430:	20000afc 	.word	0x20000afc
    b434:	20000af0 	.word	0x20000af0
    b438:	20000af8 	.word	0x20000af8

0000b43c <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b43c:	b590      	push	{r4, r7, lr}
    b43e:	b085      	sub	sp, #20
    b440:	af00      	add	r7, sp, #0
    b442:	4603      	mov	r3, r0
    b444:	6039      	str	r1, [r7, #0]
    b446:	71fb      	strb	r3, [r7, #7]
    b448:	4613      	mov	r3, r2
    b44a:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    b44c:	683b      	ldr	r3, [r7, #0]
    b44e:	799a      	ldrb	r2, [r3, #6]
    b450:	79db      	ldrb	r3, [r3, #7]
    b452:	021b      	lsls	r3, r3, #8
    b454:	4313      	orrs	r3, r2
    b456:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    b458:	79bb      	ldrb	r3, [r7, #6]
    b45a:	2b01      	cmp	r3, #1
    b45c:	d101      	bne.n	b462 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    b45e:	2300      	movs	r3, #0
    b460:	e013      	b.n	b48a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    b462:	683b      	ldr	r3, [r7, #0]
    b464:	785b      	ldrb	r3, [r3, #1]
    b466:	2b21      	cmp	r3, #33	; 0x21
    b468:	d10d      	bne.n	b486 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b46a:	89fb      	ldrh	r3, [r7, #14]
    b46c:	2b07      	cmp	r3, #7
    b46e:	d002      	beq.n	b476 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    b470:	f04f 33ff 	mov.w	r3, #4294967295
    b474:	e009      	b.n	b48a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b476:	89fa      	ldrh	r2, [r7, #14]
    b478:	79f8      	ldrb	r0, [r7, #7]
    b47a:	2300      	movs	r3, #0
    b47c:	4905      	ldr	r1, [pc, #20]	; (b494 <cdcdf_acm_get_req+0x58>)
    b47e:	4c06      	ldr	r4, [pc, #24]	; (b498 <cdcdf_acm_get_req+0x5c>)
    b480:	47a0      	blx	r4
    b482:	4603      	mov	r3, r0
    b484:	e001      	b.n	b48a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    b486:	f06f 030c 	mvn.w	r3, #12
	}
}
    b48a:	4618      	mov	r0, r3
    b48c:	3714      	adds	r7, #20
    b48e:	46bd      	mov	sp, r7
    b490:	bd90      	pop	{r4, r7, pc}
    b492:	bf00      	nop
    b494:	20000af0 	.word	0x20000af0
    b498:	0000c0e1 	.word	0x0000c0e1

0000b49c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b49c:	b580      	push	{r7, lr}
    b49e:	b082      	sub	sp, #8
    b4a0:	af00      	add	r7, sp, #0
    b4a2:	4603      	mov	r3, r0
    b4a4:	6039      	str	r1, [r7, #0]
    b4a6:	71fb      	strb	r3, [r7, #7]
    b4a8:	4613      	mov	r3, r2
    b4aa:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b4ac:	683b      	ldr	r3, [r7, #0]
    b4ae:	781b      	ldrb	r3, [r3, #0]
    b4b0:	095b      	lsrs	r3, r3, #5
    b4b2:	b2db      	uxtb	r3, r3
    b4b4:	f003 0303 	and.w	r3, r3, #3
    b4b8:	2b01      	cmp	r3, #1
    b4ba:	d002      	beq.n	b4c2 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    b4bc:	f06f 0309 	mvn.w	r3, #9
    b4c0:	e026      	b.n	b510 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b4c2:	683b      	ldr	r3, [r7, #0]
    b4c4:	889b      	ldrh	r3, [r3, #4]
    b4c6:	b29a      	uxth	r2, r3
    b4c8:	4b13      	ldr	r3, [pc, #76]	; (b518 <cdcdf_acm_req+0x7c>)
    b4ca:	781b      	ldrb	r3, [r3, #0]
    b4cc:	b29b      	uxth	r3, r3
    b4ce:	429a      	cmp	r2, r3
    b4d0:	d007      	beq.n	b4e2 <cdcdf_acm_req+0x46>
    b4d2:	683b      	ldr	r3, [r7, #0]
    b4d4:	889b      	ldrh	r3, [r3, #4]
    b4d6:	b29a      	uxth	r2, r3
    b4d8:	4b0f      	ldr	r3, [pc, #60]	; (b518 <cdcdf_acm_req+0x7c>)
    b4da:	785b      	ldrb	r3, [r3, #1]
    b4dc:	b29b      	uxth	r3, r3
    b4de:	429a      	cmp	r2, r3
    b4e0:	d114      	bne.n	b50c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b4e2:	683b      	ldr	r3, [r7, #0]
    b4e4:	781b      	ldrb	r3, [r3, #0]
    b4e6:	b25b      	sxtb	r3, r3
    b4e8:	2b00      	cmp	r3, #0
    b4ea:	da07      	bge.n	b4fc <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    b4ec:	79ba      	ldrb	r2, [r7, #6]
    b4ee:	79fb      	ldrb	r3, [r7, #7]
    b4f0:	6839      	ldr	r1, [r7, #0]
    b4f2:	4618      	mov	r0, r3
    b4f4:	4b09      	ldr	r3, [pc, #36]	; (b51c <cdcdf_acm_req+0x80>)
    b4f6:	4798      	blx	r3
    b4f8:	4603      	mov	r3, r0
    b4fa:	e009      	b.n	b510 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    b4fc:	79ba      	ldrb	r2, [r7, #6]
    b4fe:	79fb      	ldrb	r3, [r7, #7]
    b500:	6839      	ldr	r1, [r7, #0]
    b502:	4618      	mov	r0, r3
    b504:	4b06      	ldr	r3, [pc, #24]	; (b520 <cdcdf_acm_req+0x84>)
    b506:	4798      	blx	r3
    b508:	4603      	mov	r3, r0
    b50a:	e001      	b.n	b510 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    b50c:	f06f 0309 	mvn.w	r3, #9
	}
}
    b510:	4618      	mov	r0, r3
    b512:	3708      	adds	r7, #8
    b514:	46bd      	mov	sp, r7
    b516:	bd80      	pop	{r7, pc}
    b518:	20000ae8 	.word	0x20000ae8
    b51c:	0000b43d 	.word	0x0000b43d
    b520:	0000b35d 	.word	0x0000b35d

0000b524 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b524:	b580      	push	{r7, lr}
    b526:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    b528:	4b0b      	ldr	r3, [pc, #44]	; (b558 <cdcdf_acm_init+0x34>)
    b52a:	4798      	blx	r3
    b52c:	4603      	mov	r3, r0
    b52e:	2b01      	cmp	r3, #1
    b530:	d902      	bls.n	b538 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    b532:	f06f 0310 	mvn.w	r3, #16
    b536:	e00d      	b.n	b554 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b538:	4b08      	ldr	r3, [pc, #32]	; (b55c <cdcdf_acm_init+0x38>)
    b53a:	4a09      	ldr	r2, [pc, #36]	; (b560 <cdcdf_acm_init+0x3c>)
    b53c:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b53e:	4b07      	ldr	r3, [pc, #28]	; (b55c <cdcdf_acm_init+0x38>)
    b540:	4a08      	ldr	r2, [pc, #32]	; (b564 <cdcdf_acm_init+0x40>)
    b542:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    b544:	4805      	ldr	r0, [pc, #20]	; (b55c <cdcdf_acm_init+0x38>)
    b546:	4b08      	ldr	r3, [pc, #32]	; (b568 <cdcdf_acm_init+0x44>)
    b548:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b54a:	4908      	ldr	r1, [pc, #32]	; (b56c <cdcdf_acm_init+0x48>)
    b54c:	2001      	movs	r0, #1
    b54e:	4b08      	ldr	r3, [pc, #32]	; (b570 <cdcdf_acm_init+0x4c>)
    b550:	4798      	blx	r3
	return ERR_NONE;
    b552:	2300      	movs	r3, #0
}
    b554:	4618      	mov	r0, r3
    b556:	bd80      	pop	{r7, pc}
    b558:	0000c285 	.word	0x0000c285
    b55c:	20000adc 	.word	0x20000adc
    b560:	0000b30d 	.word	0x0000b30d
    b564:	20000ae8 	.word	0x20000ae8
    b568:	0000c1ed 	.word	0x0000c1ed
    b56c:	2000010c 	.word	0x2000010c
    b570:	0000c11d 	.word	0x0000c11d

0000b574 <usb_get_u16>:
{
    b574:	b480      	push	{r7}
    b576:	b083      	sub	sp, #12
    b578:	af00      	add	r7, sp, #0
    b57a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b57c:	687b      	ldr	r3, [r7, #4]
    b57e:	781b      	ldrb	r3, [r3, #0]
    b580:	b29a      	uxth	r2, r3
    b582:	687b      	ldr	r3, [r7, #4]
    b584:	3301      	adds	r3, #1
    b586:	781b      	ldrb	r3, [r3, #0]
    b588:	b29b      	uxth	r3, r3
    b58a:	021b      	lsls	r3, r3, #8
    b58c:	b29b      	uxth	r3, r3
    b58e:	4413      	add	r3, r2
    b590:	b29b      	uxth	r3, r3
}
    b592:	4618      	mov	r0, r3
    b594:	370c      	adds	r7, #12
    b596:	46bd      	mov	sp, r7
    b598:	f85d 7b04 	ldr.w	r7, [sp], #4
    b59c:	4770      	bx	lr

0000b59e <usb_desc_len>:
{
    b59e:	b480      	push	{r7}
    b5a0:	b083      	sub	sp, #12
    b5a2:	af00      	add	r7, sp, #0
    b5a4:	6078      	str	r0, [r7, #4]
	return desc[0];
    b5a6:	687b      	ldr	r3, [r7, #4]
    b5a8:	781b      	ldrb	r3, [r3, #0]
}
    b5aa:	4618      	mov	r0, r3
    b5ac:	370c      	adds	r7, #12
    b5ae:	46bd      	mov	sp, r7
    b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5b4:	4770      	bx	lr
	...

0000b5b8 <usb_desc_next>:
{
    b5b8:	b580      	push	{r7, lr}
    b5ba:	b082      	sub	sp, #8
    b5bc:	af00      	add	r7, sp, #0
    b5be:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b5c0:	6878      	ldr	r0, [r7, #4]
    b5c2:	4b05      	ldr	r3, [pc, #20]	; (b5d8 <usb_desc_next+0x20>)
    b5c4:	4798      	blx	r3
    b5c6:	4603      	mov	r3, r0
    b5c8:	461a      	mov	r2, r3
    b5ca:	687b      	ldr	r3, [r7, #4]
    b5cc:	4413      	add	r3, r2
}
    b5ce:	4618      	mov	r0, r3
    b5d0:	3708      	adds	r7, #8
    b5d2:	46bd      	mov	sp, r7
    b5d4:	bd80      	pop	{r7, pc}
    b5d6:	bf00      	nop
    b5d8:	0000b59f 	.word	0x0000b59f

0000b5dc <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    b5dc:	b580      	push	{r7, lr}
    b5de:	b082      	sub	sp, #8
    b5e0:	af00      	add	r7, sp, #0
    b5e2:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    b5e4:	687b      	ldr	r3, [r7, #4]
    b5e6:	3302      	adds	r3, #2
    b5e8:	4618      	mov	r0, r3
    b5ea:	4b03      	ldr	r3, [pc, #12]	; (b5f8 <usb_cfg_desc_total_len+0x1c>)
    b5ec:	4798      	blx	r3
    b5ee:	4603      	mov	r3, r0
}
    b5f0:	4618      	mov	r0, r3
    b5f2:	3708      	adds	r7, #8
    b5f4:	46bd      	mov	sp, r7
    b5f6:	bd80      	pop	{r7, pc}
    b5f8:	0000b575 	.word	0x0000b575

0000b5fc <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    b5fc:	b590      	push	{r4, r7, lr}
    b5fe:	b085      	sub	sp, #20
    b600:	af00      	add	r7, sp, #0
    b602:	4603      	mov	r3, r0
    b604:	6039      	str	r1, [r7, #0]
    b606:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    b608:	2300      	movs	r3, #0
    b60a:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    b60c:	683b      	ldr	r3, [r7, #0]
    b60e:	799a      	ldrb	r2, [r3, #6]
    b610:	79db      	ldrb	r3, [r3, #7]
    b612:	021b      	lsls	r3, r3, #8
    b614:	4313      	orrs	r3, r2
    b616:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    b618:	897b      	ldrh	r3, [r7, #10]
    b61a:	2b12      	cmp	r3, #18
    b61c:	d901      	bls.n	b622 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    b61e:	2312      	movs	r3, #18
    b620:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    b622:	68fb      	ldr	r3, [r7, #12]
    b624:	2b00      	cmp	r3, #0
    b626:	d10a      	bne.n	b63e <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b628:	4b0f      	ldr	r3, [pc, #60]	; (b668 <usbdc_get_dev_desc+0x6c>)
    b62a:	681b      	ldr	r3, [r3, #0]
    b62c:	6818      	ldr	r0, [r3, #0]
    b62e:	4b0e      	ldr	r3, [pc, #56]	; (b668 <usbdc_get_dev_desc+0x6c>)
    b630:	681b      	ldr	r3, [r3, #0]
    b632:	685b      	ldr	r3, [r3, #4]
    b634:	2201      	movs	r2, #1
    b636:	4619      	mov	r1, r3
    b638:	4b0c      	ldr	r3, [pc, #48]	; (b66c <usbdc_get_dev_desc+0x70>)
    b63a:	4798      	blx	r3
    b63c:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    b63e:	68fb      	ldr	r3, [r7, #12]
    b640:	2b00      	cmp	r3, #0
    b642:	d101      	bne.n	b648 <usbdc_get_dev_desc+0x4c>
		return false;
    b644:	2300      	movs	r3, #0
    b646:	e00b      	b.n	b660 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b648:	897a      	ldrh	r2, [r7, #10]
    b64a:	79f8      	ldrb	r0, [r7, #7]
    b64c:	2300      	movs	r3, #0
    b64e:	68f9      	ldr	r1, [r7, #12]
    b650:	4c07      	ldr	r4, [pc, #28]	; (b670 <usbdc_get_dev_desc+0x74>)
    b652:	47a0      	blx	r4
    b654:	4603      	mov	r3, r0
    b656:	2b00      	cmp	r3, #0
    b658:	d001      	beq.n	b65e <usbdc_get_dev_desc+0x62>
		return false;
    b65a:	2300      	movs	r3, #0
    b65c:	e000      	b.n	b660 <usbdc_get_dev_desc+0x64>
	}
	return true;
    b65e:	2301      	movs	r3, #1
}
    b660:	4618      	mov	r0, r3
    b662:	3714      	adds	r7, #20
    b664:	46bd      	mov	sp, r7
    b666:	bd90      	pop	{r4, r7, pc}
    b668:	20000b00 	.word	0x20000b00
    b66c:	0000c371 	.word	0x0000c371
    b670:	0000c0e1 	.word	0x0000c0e1

0000b674 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    b674:	b590      	push	{r4, r7, lr}
    b676:	b087      	sub	sp, #28
    b678:	af00      	add	r7, sp, #0
    b67a:	4603      	mov	r3, r0
    b67c:	6039      	str	r1, [r7, #0]
    b67e:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    b680:	2300      	movs	r3, #0
    b682:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    b684:	683b      	ldr	r3, [r7, #0]
    b686:	799a      	ldrb	r2, [r3, #6]
    b688:	79db      	ldrb	r3, [r3, #7]
    b68a:	021b      	lsls	r3, r3, #8
    b68c:	4313      	orrs	r3, r2
    b68e:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    b690:	683b      	ldr	r3, [r7, #0]
    b692:	885b      	ldrh	r3, [r3, #2]
    b694:	b29b      	uxth	r3, r3
    b696:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b698:	8a7a      	ldrh	r2, [r7, #18]
    b69a:	4b1e      	ldr	r3, [pc, #120]	; (b714 <usbdc_get_cfg_desc+0xa0>)
    b69c:	7f1b      	ldrb	r3, [r3, #28]
    b69e:	3b01      	subs	r3, #1
    b6a0:	4013      	ands	r3, r2
    b6a2:	2b00      	cmp	r3, #0
    b6a4:	bf0c      	ite	eq
    b6a6:	2301      	moveq	r3, #1
    b6a8:	2300      	movne	r3, #0
    b6aa:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    b6ac:	697b      	ldr	r3, [r7, #20]
    b6ae:	2b00      	cmp	r3, #0
    b6b0:	d10c      	bne.n	b6cc <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b6b2:	4b18      	ldr	r3, [pc, #96]	; (b714 <usbdc_get_cfg_desc+0xa0>)
    b6b4:	681b      	ldr	r3, [r3, #0]
    b6b6:	6818      	ldr	r0, [r3, #0]
    b6b8:	4b16      	ldr	r3, [pc, #88]	; (b714 <usbdc_get_cfg_desc+0xa0>)
    b6ba:	681b      	ldr	r3, [r3, #0]
    b6bc:	6859      	ldr	r1, [r3, #4]
    b6be:	7c3b      	ldrb	r3, [r7, #16]
    b6c0:	3301      	adds	r3, #1
    b6c2:	b2db      	uxtb	r3, r3
    b6c4:	461a      	mov	r2, r3
    b6c6:	4b14      	ldr	r3, [pc, #80]	; (b718 <usbdc_get_cfg_desc+0xa4>)
    b6c8:	4798      	blx	r3
    b6ca:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    b6cc:	697b      	ldr	r3, [r7, #20]
    b6ce:	2b00      	cmp	r3, #0
    b6d0:	d101      	bne.n	b6d6 <usbdc_get_cfg_desc+0x62>
		return false;
    b6d2:	2300      	movs	r3, #0
    b6d4:	e019      	b.n	b70a <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    b6d6:	6978      	ldr	r0, [r7, #20]
    b6d8:	4b10      	ldr	r3, [pc, #64]	; (b71c <usbdc_get_cfg_desc+0xa8>)
    b6da:	4798      	blx	r3
    b6dc:	4603      	mov	r3, r0
    b6de:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    b6e0:	8a7a      	ldrh	r2, [r7, #18]
    b6e2:	89fb      	ldrh	r3, [r7, #14]
    b6e4:	429a      	cmp	r2, r3
    b6e6:	d802      	bhi.n	b6ee <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    b6e8:	2300      	movs	r3, #0
    b6ea:	747b      	strb	r3, [r7, #17]
    b6ec:	e001      	b.n	b6f2 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    b6ee:	89fb      	ldrh	r3, [r7, #14]
    b6f0:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b6f2:	8a7a      	ldrh	r2, [r7, #18]
    b6f4:	7c7b      	ldrb	r3, [r7, #17]
    b6f6:	79f8      	ldrb	r0, [r7, #7]
    b6f8:	6979      	ldr	r1, [r7, #20]
    b6fa:	4c09      	ldr	r4, [pc, #36]	; (b720 <usbdc_get_cfg_desc+0xac>)
    b6fc:	47a0      	blx	r4
    b6fe:	4603      	mov	r3, r0
    b700:	2b00      	cmp	r3, #0
    b702:	d001      	beq.n	b708 <usbdc_get_cfg_desc+0x94>
		return false;
    b704:	2300      	movs	r3, #0
    b706:	e000      	b.n	b70a <usbdc_get_cfg_desc+0x96>
	}
	return true;
    b708:	2301      	movs	r3, #1
}
    b70a:	4618      	mov	r0, r3
    b70c:	371c      	adds	r7, #28
    b70e:	46bd      	mov	sp, r7
    b710:	bd90      	pop	{r4, r7, pc}
    b712:	bf00      	nop
    b714:	20000b00 	.word	0x20000b00
    b718:	0000c431 	.word	0x0000c431
    b71c:	0000b5dd 	.word	0x0000b5dd
    b720:	0000c0e1 	.word	0x0000c0e1

0000b724 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    b724:	b590      	push	{r4, r7, lr}
    b726:	b085      	sub	sp, #20
    b728:	af00      	add	r7, sp, #0
    b72a:	4603      	mov	r3, r0
    b72c:	6039      	str	r1, [r7, #0]
    b72e:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    b730:	683b      	ldr	r3, [r7, #0]
    b732:	799a      	ldrb	r2, [r3, #6]
    b734:	79db      	ldrb	r3, [r3, #7]
    b736:	021b      	lsls	r3, r3, #8
    b738:	4313      	orrs	r3, r2
    b73a:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    b73c:	683b      	ldr	r3, [r7, #0]
    b73e:	885b      	ldrh	r3, [r3, #2]
    b740:	b29b      	uxth	r3, r3
    b742:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b744:	89fa      	ldrh	r2, [r7, #14]
    b746:	4b1a      	ldr	r3, [pc, #104]	; (b7b0 <usbdc_get_str_desc+0x8c>)
    b748:	7f1b      	ldrb	r3, [r3, #28]
    b74a:	3b01      	subs	r3, #1
    b74c:	4013      	ands	r3, r2
    b74e:	2b00      	cmp	r3, #0
    b750:	bf0c      	ite	eq
    b752:	2301      	moveq	r3, #1
    b754:	2300      	movne	r3, #0
    b756:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b758:	4b15      	ldr	r3, [pc, #84]	; (b7b0 <usbdc_get_str_desc+0x8c>)
    b75a:	681b      	ldr	r3, [r3, #0]
    b75c:	6818      	ldr	r0, [r3, #0]
    b75e:	4b14      	ldr	r3, [pc, #80]	; (b7b0 <usbdc_get_str_desc+0x8c>)
    b760:	681b      	ldr	r3, [r3, #0]
    b762:	685b      	ldr	r3, [r3, #4]
    b764:	7b3a      	ldrb	r2, [r7, #12]
    b766:	4619      	mov	r1, r3
    b768:	4b12      	ldr	r3, [pc, #72]	; (b7b4 <usbdc_get_str_desc+0x90>)
    b76a:	4798      	blx	r3
    b76c:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    b76e:	68bb      	ldr	r3, [r7, #8]
    b770:	2b00      	cmp	r3, #0
    b772:	d101      	bne.n	b778 <usbdc_get_str_desc+0x54>
		return false;
    b774:	2300      	movs	r3, #0
    b776:	e017      	b.n	b7a8 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    b778:	68bb      	ldr	r3, [r7, #8]
    b77a:	781b      	ldrb	r3, [r3, #0]
    b77c:	b29b      	uxth	r3, r3
    b77e:	89fa      	ldrh	r2, [r7, #14]
    b780:	429a      	cmp	r2, r3
    b782:	d802      	bhi.n	b78a <usbdc_get_str_desc+0x66>
		need_zlp = false;
    b784:	2300      	movs	r3, #0
    b786:	737b      	strb	r3, [r7, #13]
    b788:	e002      	b.n	b790 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    b78a:	68bb      	ldr	r3, [r7, #8]
    b78c:	781b      	ldrb	r3, [r3, #0]
    b78e:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b790:	89fa      	ldrh	r2, [r7, #14]
    b792:	7b7b      	ldrb	r3, [r7, #13]
    b794:	79f8      	ldrb	r0, [r7, #7]
    b796:	68b9      	ldr	r1, [r7, #8]
    b798:	4c07      	ldr	r4, [pc, #28]	; (b7b8 <usbdc_get_str_desc+0x94>)
    b79a:	47a0      	blx	r4
    b79c:	4603      	mov	r3, r0
    b79e:	2b00      	cmp	r3, #0
    b7a0:	d001      	beq.n	b7a6 <usbdc_get_str_desc+0x82>
		return false;
    b7a2:	2300      	movs	r3, #0
    b7a4:	e000      	b.n	b7a8 <usbdc_get_str_desc+0x84>
	}
	return true;
    b7a6:	2301      	movs	r3, #1
}
    b7a8:	4618      	mov	r0, r3
    b7aa:	3714      	adds	r7, #20
    b7ac:	46bd      	mov	sp, r7
    b7ae:	bd90      	pop	{r4, r7, pc}
    b7b0:	20000b00 	.word	0x20000b00
    b7b4:	0000c4a9 	.word	0x0000c4a9
    b7b8:	0000c0e1 	.word	0x0000c0e1

0000b7bc <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    b7bc:	b580      	push	{r7, lr}
    b7be:	b084      	sub	sp, #16
    b7c0:	af00      	add	r7, sp, #0
    b7c2:	4603      	mov	r3, r0
    b7c4:	6039      	str	r1, [r7, #0]
    b7c6:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b7c8:	683b      	ldr	r3, [r7, #0]
    b7ca:	885b      	ldrh	r3, [r3, #2]
    b7cc:	b29b      	uxth	r3, r3
    b7ce:	0a1b      	lsrs	r3, r3, #8
    b7d0:	b29b      	uxth	r3, r3
    b7d2:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    b7d4:	7bfb      	ldrb	r3, [r7, #15]
    b7d6:	2b02      	cmp	r3, #2
    b7d8:	d00d      	beq.n	b7f6 <usbdc_get_desc_req+0x3a>
    b7da:	2b03      	cmp	r3, #3
    b7dc:	d012      	beq.n	b804 <usbdc_get_desc_req+0x48>
    b7de:	2b01      	cmp	r3, #1
    b7e0:	d002      	beq.n	b7e8 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    b7e2:	bf00      	nop
	}
	return false;
    b7e4:	2300      	movs	r3, #0
    b7e6:	e013      	b.n	b810 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    b7e8:	79fb      	ldrb	r3, [r7, #7]
    b7ea:	6839      	ldr	r1, [r7, #0]
    b7ec:	4618      	mov	r0, r3
    b7ee:	4b0a      	ldr	r3, [pc, #40]	; (b818 <usbdc_get_desc_req+0x5c>)
    b7f0:	4798      	blx	r3
    b7f2:	4603      	mov	r3, r0
    b7f4:	e00c      	b.n	b810 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    b7f6:	79fb      	ldrb	r3, [r7, #7]
    b7f8:	6839      	ldr	r1, [r7, #0]
    b7fa:	4618      	mov	r0, r3
    b7fc:	4b07      	ldr	r3, [pc, #28]	; (b81c <usbdc_get_desc_req+0x60>)
    b7fe:	4798      	blx	r3
    b800:	4603      	mov	r3, r0
    b802:	e005      	b.n	b810 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    b804:	79fb      	ldrb	r3, [r7, #7]
    b806:	6839      	ldr	r1, [r7, #0]
    b808:	4618      	mov	r0, r3
    b80a:	4b05      	ldr	r3, [pc, #20]	; (b820 <usbdc_get_desc_req+0x64>)
    b80c:	4798      	blx	r3
    b80e:	4603      	mov	r3, r0
}
    b810:	4618      	mov	r0, r3
    b812:	3710      	adds	r7, #16
    b814:	46bd      	mov	sp, r7
    b816:	bd80      	pop	{r7, pc}
    b818:	0000b5fd 	.word	0x0000b5fd
    b81c:	0000b675 	.word	0x0000b675
    b820:	0000b725 	.word	0x0000b725

0000b824 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    b824:	b590      	push	{r4, r7, lr}
    b826:	b085      	sub	sp, #20
    b828:	af00      	add	r7, sp, #0
    b82a:	4603      	mov	r3, r0
    b82c:	6039      	str	r1, [r7, #0]
    b82e:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b830:	683b      	ldr	r3, [r7, #0]
    b832:	781b      	ldrb	r3, [r3, #0]
    b834:	f003 031f 	and.w	r3, r3, #31
    b838:	2b00      	cmp	r3, #0
    b83a:	db1b      	blt.n	b874 <usbdc_get_status_req+0x50>
    b83c:	2b01      	cmp	r3, #1
    b83e:	dd02      	ble.n	b846 <usbdc_get_status_req+0x22>
    b840:	2b02      	cmp	r3, #2
    b842:	d003      	beq.n	b84c <usbdc_get_status_req+0x28>
    b844:	e016      	b.n	b874 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    b846:	2300      	movs	r3, #0
    b848:	60fb      	str	r3, [r7, #12]
		break;
    b84a:	e015      	b.n	b878 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    b84c:	683b      	ldr	r3, [r7, #0]
    b84e:	889b      	ldrh	r3, [r3, #4]
    b850:	b29b      	uxth	r3, r3
    b852:	b2db      	uxtb	r3, r3
    b854:	2102      	movs	r1, #2
    b856:	4618      	mov	r0, r3
    b858:	4b0f      	ldr	r3, [pc, #60]	; (b898 <usbdc_get_status_req+0x74>)
    b85a:	4798      	blx	r3
    b85c:	4603      	mov	r3, r0
    b85e:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    b860:	68fb      	ldr	r3, [r7, #12]
    b862:	2b00      	cmp	r3, #0
    b864:	da01      	bge.n	b86a <usbdc_get_status_req+0x46>
			return false;
    b866:	2300      	movs	r3, #0
    b868:	e012      	b.n	b890 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    b86a:	68fb      	ldr	r3, [r7, #12]
    b86c:	f003 0301 	and.w	r3, r3, #1
    b870:	60fb      	str	r3, [r7, #12]
		break;
    b872:	e001      	b.n	b878 <usbdc_get_status_req+0x54>
	default:
		return false;
    b874:	2300      	movs	r3, #0
    b876:	e00b      	b.n	b890 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    b878:	4b08      	ldr	r3, [pc, #32]	; (b89c <usbdc_get_status_req+0x78>)
    b87a:	695b      	ldr	r3, [r3, #20]
    b87c:	89ba      	ldrh	r2, [r7, #12]
    b87e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    b880:	4b06      	ldr	r3, [pc, #24]	; (b89c <usbdc_get_status_req+0x78>)
    b882:	6959      	ldr	r1, [r3, #20]
    b884:	79f8      	ldrb	r0, [r7, #7]
    b886:	2300      	movs	r3, #0
    b888:	2202      	movs	r2, #2
    b88a:	4c05      	ldr	r4, [pc, #20]	; (b8a0 <usbdc_get_status_req+0x7c>)
    b88c:	47a0      	blx	r4
	return true;
    b88e:	2301      	movs	r3, #1
}
    b890:	4618      	mov	r0, r3
    b892:	3714      	adds	r7, #20
    b894:	46bd      	mov	sp, r7
    b896:	bd90      	pop	{r4, r7, pc}
    b898:	00003179 	.word	0x00003179
    b89c:	20000b00 	.word	0x20000b00
    b8a0:	0000c0e1 	.word	0x0000c0e1

0000b8a4 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    b8a4:	b590      	push	{r4, r7, lr}
    b8a6:	b085      	sub	sp, #20
    b8a8:	af00      	add	r7, sp, #0
    b8aa:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    b8ac:	4b1f      	ldr	r3, [pc, #124]	; (b92c <usbdc_get_interface+0x88>)
    b8ae:	691b      	ldr	r3, [r3, #16]
    b8b0:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    b8b2:	4b1e      	ldr	r3, [pc, #120]	; (b92c <usbdc_get_interface+0x88>)
    b8b4:	7f5b      	ldrb	r3, [r3, #29]
    b8b6:	461a      	mov	r2, r3
    b8b8:	687b      	ldr	r3, [r7, #4]
    b8ba:	889b      	ldrh	r3, [r3, #4]
    b8bc:	b29b      	uxth	r3, r3
    b8be:	fa42 f303 	asr.w	r3, r2, r3
    b8c2:	f003 0301 	and.w	r3, r3, #1
    b8c6:	2b00      	cmp	r3, #0
    b8c8:	d128      	bne.n	b91c <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    b8ca:	4b18      	ldr	r3, [pc, #96]	; (b92c <usbdc_get_interface+0x88>)
    b8cc:	695b      	ldr	r3, [r3, #20]
    b8ce:	2200      	movs	r2, #0
    b8d0:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b8d2:	4b16      	ldr	r3, [pc, #88]	; (b92c <usbdc_get_interface+0x88>)
    b8d4:	6959      	ldr	r1, [r3, #20]
    b8d6:	2300      	movs	r3, #0
    b8d8:	2201      	movs	r2, #1
    b8da:	2000      	movs	r0, #0
    b8dc:	4c14      	ldr	r4, [pc, #80]	; (b930 <usbdc_get_interface+0x8c>)
    b8de:	47a0      	blx	r4
		return true;
    b8e0:	2301      	movs	r3, #1
    b8e2:	e01f      	b.n	b924 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    b8e4:	68fb      	ldr	r3, [r7, #12]
    b8e6:	685b      	ldr	r3, [r3, #4]
    b8e8:	687a      	ldr	r2, [r7, #4]
    b8ea:	2102      	movs	r1, #2
    b8ec:	68f8      	ldr	r0, [r7, #12]
    b8ee:	4798      	blx	r3
    b8f0:	60b8      	str	r0, [r7, #8]
    b8f2:	68bb      	ldr	r3, [r7, #8]
    b8f4:	2b00      	cmp	r3, #0
    b8f6:	da03      	bge.n	b900 <usbdc_get_interface+0x5c>
			func = func->next;
    b8f8:	68fb      	ldr	r3, [r7, #12]
    b8fa:	681b      	ldr	r3, [r3, #0]
    b8fc:	60fb      	str	r3, [r7, #12]
    b8fe:	e00d      	b.n	b91c <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    b900:	4b0a      	ldr	r3, [pc, #40]	; (b92c <usbdc_get_interface+0x88>)
    b902:	695b      	ldr	r3, [r3, #20]
    b904:	68ba      	ldr	r2, [r7, #8]
    b906:	b2d2      	uxtb	r2, r2
    b908:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    b90a:	4b08      	ldr	r3, [pc, #32]	; (b92c <usbdc_get_interface+0x88>)
    b90c:	6959      	ldr	r1, [r3, #20]
    b90e:	2300      	movs	r3, #0
    b910:	2201      	movs	r2, #1
    b912:	2000      	movs	r0, #0
    b914:	4c06      	ldr	r4, [pc, #24]	; (b930 <usbdc_get_interface+0x8c>)
    b916:	47a0      	blx	r4
			return true;
    b918:	2301      	movs	r3, #1
    b91a:	e003      	b.n	b924 <usbdc_get_interface+0x80>
	while (NULL != func) {
    b91c:	68fb      	ldr	r3, [r7, #12]
    b91e:	2b00      	cmp	r3, #0
    b920:	d1e0      	bne.n	b8e4 <usbdc_get_interface+0x40>
		}
	}
	return false;
    b922:	2300      	movs	r3, #0
}
    b924:	4618      	mov	r0, r3
    b926:	3714      	adds	r7, #20
    b928:	46bd      	mov	sp, r7
    b92a:	bd90      	pop	{r4, r7, pc}
    b92c:	20000b00 	.word	0x20000b00
    b930:	0000c0e1 	.word	0x0000c0e1

0000b934 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    b934:	b590      	push	{r4, r7, lr}
    b936:	b083      	sub	sp, #12
    b938:	af00      	add	r7, sp, #0
    b93a:	4603      	mov	r3, r0
    b93c:	6039      	str	r1, [r7, #0]
    b93e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    b940:	683b      	ldr	r3, [r7, #0]
    b942:	785b      	ldrb	r3, [r3, #1]
    b944:	2b0a      	cmp	r3, #10
    b946:	d83a      	bhi.n	b9be <usbdc_get_req+0x8a>
    b948:	a201      	add	r2, pc, #4	; (adr r2, b950 <usbdc_get_req+0x1c>)
    b94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b94e:	bf00      	nop
    b950:	0000b9a7 	.word	0x0000b9a7
    b954:	0000b9bf 	.word	0x0000b9bf
    b958:	0000b9bf 	.word	0x0000b9bf
    b95c:	0000b9bf 	.word	0x0000b9bf
    b960:	0000b9bf 	.word	0x0000b9bf
    b964:	0000b9bf 	.word	0x0000b9bf
    b968:	0000b97d 	.word	0x0000b97d
    b96c:	0000b9bf 	.word	0x0000b9bf
    b970:	0000b98b 	.word	0x0000b98b
    b974:	0000b9bf 	.word	0x0000b9bf
    b978:	0000b9b5 	.word	0x0000b9b5
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    b97c:	79fb      	ldrb	r3, [r7, #7]
    b97e:	6839      	ldr	r1, [r7, #0]
    b980:	4618      	mov	r0, r3
    b982:	4b11      	ldr	r3, [pc, #68]	; (b9c8 <usbdc_get_req+0x94>)
    b984:	4798      	blx	r3
    b986:	4603      	mov	r3, r0
    b988:	e01a      	b.n	b9c0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    b98a:	4b10      	ldr	r3, [pc, #64]	; (b9cc <usbdc_get_req+0x98>)
    b98c:	695b      	ldr	r3, [r3, #20]
    b98e:	4a0f      	ldr	r2, [pc, #60]	; (b9cc <usbdc_get_req+0x98>)
    b990:	7ed2      	ldrb	r2, [r2, #27]
    b992:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    b994:	4b0d      	ldr	r3, [pc, #52]	; (b9cc <usbdc_get_req+0x98>)
    b996:	6959      	ldr	r1, [r3, #20]
    b998:	79f8      	ldrb	r0, [r7, #7]
    b99a:	2300      	movs	r3, #0
    b99c:	2201      	movs	r2, #1
    b99e:	4c0c      	ldr	r4, [pc, #48]	; (b9d0 <usbdc_get_req+0x9c>)
    b9a0:	47a0      	blx	r4
		return true;
    b9a2:	2301      	movs	r3, #1
    b9a4:	e00c      	b.n	b9c0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    b9a6:	79fb      	ldrb	r3, [r7, #7]
    b9a8:	6839      	ldr	r1, [r7, #0]
    b9aa:	4618      	mov	r0, r3
    b9ac:	4b09      	ldr	r3, [pc, #36]	; (b9d4 <usbdc_get_req+0xa0>)
    b9ae:	4798      	blx	r3
    b9b0:	4603      	mov	r3, r0
    b9b2:	e005      	b.n	b9c0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    b9b4:	6838      	ldr	r0, [r7, #0]
    b9b6:	4b08      	ldr	r3, [pc, #32]	; (b9d8 <usbdc_get_req+0xa4>)
    b9b8:	4798      	blx	r3
    b9ba:	4603      	mov	r3, r0
    b9bc:	e000      	b.n	b9c0 <usbdc_get_req+0x8c>
	default:
		return false;
    b9be:	2300      	movs	r3, #0
	}
}
    b9c0:	4618      	mov	r0, r3
    b9c2:	370c      	adds	r7, #12
    b9c4:	46bd      	mov	sp, r7
    b9c6:	bd90      	pop	{r4, r7, pc}
    b9c8:	0000b7bd 	.word	0x0000b7bd
    b9cc:	20000b00 	.word	0x20000b00
    b9d0:	0000c0e1 	.word	0x0000c0e1
    b9d4:	0000b825 	.word	0x0000b825
    b9d8:	0000b8a5 	.word	0x0000b8a5

0000b9dc <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    b9dc:	b590      	push	{r4, r7, lr}
    b9de:	b083      	sub	sp, #12
    b9e0:	af00      	add	r7, sp, #0
    b9e2:	4603      	mov	r3, r0
    b9e4:	6039      	str	r1, [r7, #0]
    b9e6:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    b9e8:	683b      	ldr	r3, [r7, #0]
    b9ea:	781b      	ldrb	r3, [r3, #0]
    b9ec:	f003 031f 	and.w	r3, r3, #31
    b9f0:	2b02      	cmp	r3, #2
    b9f2:	d116      	bne.n	ba22 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    b9f4:	683b      	ldr	r3, [r7, #0]
    b9f6:	88db      	ldrh	r3, [r3, #6]
    b9f8:	b29b      	uxth	r3, r3
    b9fa:	2b00      	cmp	r3, #0
    b9fc:	d001      	beq.n	ba02 <usbdc_clear_ftr_req+0x26>
			return false;
    b9fe:	2300      	movs	r3, #0
    ba00:	e010      	b.n	ba24 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    ba02:	683b      	ldr	r3, [r7, #0]
    ba04:	889b      	ldrh	r3, [r3, #4]
    ba06:	b29b      	uxth	r3, r3
    ba08:	b2db      	uxtb	r3, r3
    ba0a:	2100      	movs	r1, #0
    ba0c:	4618      	mov	r0, r3
    ba0e:	4b07      	ldr	r3, [pc, #28]	; (ba2c <usbdc_clear_ftr_req+0x50>)
    ba10:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ba12:	79f8      	ldrb	r0, [r7, #7]
    ba14:	2301      	movs	r3, #1
    ba16:	2200      	movs	r2, #0
    ba18:	2100      	movs	r1, #0
    ba1a:	4c05      	ldr	r4, [pc, #20]	; (ba30 <usbdc_clear_ftr_req+0x54>)
    ba1c:	47a0      	blx	r4
		return true;
    ba1e:	2301      	movs	r3, #1
    ba20:	e000      	b.n	ba24 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    ba22:	2300      	movs	r3, #0
	}
}
    ba24:	4618      	mov	r0, r3
    ba26:	370c      	adds	r7, #12
    ba28:	46bd      	mov	sp, r7
    ba2a:	bd90      	pop	{r4, r7, pc}
    ba2c:	00003179 	.word	0x00003179
    ba30:	0000c0e1 	.word	0x0000c0e1

0000ba34 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    ba34:	b590      	push	{r4, r7, lr}
    ba36:	b083      	sub	sp, #12
    ba38:	af00      	add	r7, sp, #0
    ba3a:	4603      	mov	r3, r0
    ba3c:	6039      	str	r1, [r7, #0]
    ba3e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ba40:	683b      	ldr	r3, [r7, #0]
    ba42:	781b      	ldrb	r3, [r3, #0]
    ba44:	f003 031f 	and.w	r3, r3, #31
    ba48:	2b02      	cmp	r3, #2
    ba4a:	d116      	bne.n	ba7a <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    ba4c:	683b      	ldr	r3, [r7, #0]
    ba4e:	88db      	ldrh	r3, [r3, #6]
    ba50:	b29b      	uxth	r3, r3
    ba52:	2b00      	cmp	r3, #0
    ba54:	d001      	beq.n	ba5a <usbdc_set_ftr_req+0x26>
			return false;
    ba56:	2300      	movs	r3, #0
    ba58:	e010      	b.n	ba7c <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    ba5a:	683b      	ldr	r3, [r7, #0]
    ba5c:	889b      	ldrh	r3, [r3, #4]
    ba5e:	b29b      	uxth	r3, r3
    ba60:	b2db      	uxtb	r3, r3
    ba62:	2101      	movs	r1, #1
    ba64:	4618      	mov	r0, r3
    ba66:	4b07      	ldr	r3, [pc, #28]	; (ba84 <usbdc_set_ftr_req+0x50>)
    ba68:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    ba6a:	79f8      	ldrb	r0, [r7, #7]
    ba6c:	2301      	movs	r3, #1
    ba6e:	2200      	movs	r2, #0
    ba70:	2100      	movs	r1, #0
    ba72:	4c05      	ldr	r4, [pc, #20]	; (ba88 <usbdc_set_ftr_req+0x54>)
    ba74:	47a0      	blx	r4
		return true;
    ba76:	2301      	movs	r3, #1
    ba78:	e000      	b.n	ba7c <usbdc_set_ftr_req+0x48>
	default:
		return false;
    ba7a:	2300      	movs	r3, #0
	}
}
    ba7c:	4618      	mov	r0, r3
    ba7e:	370c      	adds	r7, #12
    ba80:	46bd      	mov	sp, r7
    ba82:	bd90      	pop	{r4, r7, pc}
    ba84:	00003179 	.word	0x00003179
    ba88:	0000c0e1 	.word	0x0000c0e1

0000ba8c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    ba8c:	b580      	push	{r7, lr}
    ba8e:	b082      	sub	sp, #8
    ba90:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ba92:	4b0a      	ldr	r3, [pc, #40]	; (babc <usbdc_unconfig+0x30>)
    ba94:	691b      	ldr	r3, [r3, #16]
    ba96:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ba98:	e008      	b.n	baac <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    ba9a:	687b      	ldr	r3, [r7, #4]
    ba9c:	685b      	ldr	r3, [r3, #4]
    ba9e:	2200      	movs	r2, #0
    baa0:	2101      	movs	r1, #1
    baa2:	6878      	ldr	r0, [r7, #4]
    baa4:	4798      	blx	r3
		func = func->next;
    baa6:	687b      	ldr	r3, [r7, #4]
    baa8:	681b      	ldr	r3, [r3, #0]
    baaa:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    baac:	687b      	ldr	r3, [r7, #4]
    baae:	2b00      	cmp	r3, #0
    bab0:	d1f3      	bne.n	ba9a <usbdc_unconfig+0xe>
	}
}
    bab2:	bf00      	nop
    bab4:	3708      	adds	r7, #8
    bab6:	46bd      	mov	sp, r7
    bab8:	bd80      	pop	{r7, pc}
    baba:	bf00      	nop
    babc:	20000b00 	.word	0x20000b00

0000bac0 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    bac0:	b580      	push	{r7, lr}
    bac2:	b088      	sub	sp, #32
    bac4:	af00      	add	r7, sp, #0
    bac6:	4603      	mov	r3, r0
    bac8:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    baca:	2300      	movs	r3, #0
    bacc:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    bace:	23ff      	movs	r3, #255	; 0xff
    bad0:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    bad2:	79fb      	ldrb	r3, [r7, #7]
    bad4:	2b00      	cmp	r3, #0
    bad6:	d103      	bne.n	bae0 <usbdc_set_config+0x20>
		usbdc_unconfig();
    bad8:	4b2e      	ldr	r3, [pc, #184]	; (bb94 <usbdc_set_config+0xd4>)
    bada:	4798      	blx	r3
		return true;
    badc:	2301      	movs	r3, #1
    bade:	e055      	b.n	bb8c <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bae0:	69bb      	ldr	r3, [r7, #24]
    bae2:	2b00      	cmp	r3, #0
    bae4:	d10a      	bne.n	bafc <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    bae6:	4b2c      	ldr	r3, [pc, #176]	; (bb98 <usbdc_set_config+0xd8>)
    bae8:	681b      	ldr	r3, [r3, #0]
    baea:	6818      	ldr	r0, [r3, #0]
    baec:	4b2a      	ldr	r3, [pc, #168]	; (bb98 <usbdc_set_config+0xd8>)
    baee:	681b      	ldr	r3, [r3, #0]
    baf0:	685b      	ldr	r3, [r3, #4]
    baf2:	79fa      	ldrb	r2, [r7, #7]
    baf4:	4619      	mov	r1, r3
    baf6:	4b29      	ldr	r3, [pc, #164]	; (bb9c <usbdc_set_config+0xdc>)
    baf8:	4798      	blx	r3
    bafa:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    bafc:	69bb      	ldr	r3, [r7, #24]
    bafe:	2b00      	cmp	r3, #0
    bb00:	d101      	bne.n	bb06 <usbdc_set_config+0x46>
		return false;
    bb02:	2300      	movs	r3, #0
    bb04:	e042      	b.n	bb8c <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    bb06:	69b8      	ldr	r0, [r7, #24]
    bb08:	4b25      	ldr	r3, [pc, #148]	; (bba0 <usbdc_set_config+0xe0>)
    bb0a:	4798      	blx	r3
    bb0c:	4603      	mov	r3, r0
    bb0e:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    bb10:	8abb      	ldrh	r3, [r7, #20]
    bb12:	69ba      	ldr	r2, [r7, #24]
    bb14:	4413      	add	r3, r2
    bb16:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    bb18:	693b      	ldr	r3, [r7, #16]
    bb1a:	2204      	movs	r2, #4
    bb1c:	4619      	mov	r1, r3
    bb1e:	69b8      	ldr	r0, [r7, #24]
    bb20:	4b20      	ldr	r3, [pc, #128]	; (bba4 <usbdc_set_config+0xe4>)
    bb22:	4798      	blx	r3
    bb24:	4603      	mov	r3, r0
    bb26:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    bb28:	e02c      	b.n	bb84 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    bb2a:	68fb      	ldr	r3, [r7, #12]
    bb2c:	3302      	adds	r3, #2
    bb2e:	781b      	ldrb	r3, [r3, #0]
    bb30:	7dfa      	ldrb	r2, [r7, #23]
    bb32:	429a      	cmp	r2, r3
    bb34:	d018      	beq.n	bb68 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    bb36:	68fb      	ldr	r3, [r7, #12]
    bb38:	789b      	ldrb	r3, [r3, #2]
    bb3a:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    bb3c:	4b16      	ldr	r3, [pc, #88]	; (bb98 <usbdc_set_config+0xd8>)
    bb3e:	691b      	ldr	r3, [r3, #16]
    bb40:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bb42:	e00c      	b.n	bb5e <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    bb44:	69fb      	ldr	r3, [r7, #28]
    bb46:	685b      	ldr	r3, [r3, #4]
    bb48:	f107 020c 	add.w	r2, r7, #12
    bb4c:	2100      	movs	r1, #0
    bb4e:	69f8      	ldr	r0, [r7, #28]
    bb50:	4798      	blx	r3
    bb52:	4603      	mov	r3, r0
    bb54:	2b00      	cmp	r3, #0
    bb56:	d006      	beq.n	bb66 <usbdc_set_config+0xa6>
					func = func->next;
    bb58:	69fb      	ldr	r3, [r7, #28]
    bb5a:	681b      	ldr	r3, [r3, #0]
    bb5c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bb5e:	69fb      	ldr	r3, [r7, #28]
    bb60:	2b00      	cmp	r3, #0
    bb62:	d1ef      	bne.n	bb44 <usbdc_set_config+0x84>
    bb64:	e000      	b.n	bb68 <usbdc_set_config+0xa8>
				} else {
					break;
    bb66:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    bb68:	68fb      	ldr	r3, [r7, #12]
    bb6a:	4618      	mov	r0, r3
    bb6c:	4b0e      	ldr	r3, [pc, #56]	; (bba8 <usbdc_set_config+0xe8>)
    bb6e:	4798      	blx	r3
    bb70:	4603      	mov	r3, r0
    bb72:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bb74:	68fb      	ldr	r3, [r7, #12]
    bb76:	6939      	ldr	r1, [r7, #16]
    bb78:	2204      	movs	r2, #4
    bb7a:	4618      	mov	r0, r3
    bb7c:	4b09      	ldr	r3, [pc, #36]	; (bba4 <usbdc_set_config+0xe4>)
    bb7e:	4798      	blx	r3
    bb80:	4603      	mov	r3, r0
    bb82:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    bb84:	68fb      	ldr	r3, [r7, #12]
    bb86:	2b00      	cmp	r3, #0
    bb88:	d1cf      	bne.n	bb2a <usbdc_set_config+0x6a>
	}
	return true;
    bb8a:	2301      	movs	r3, #1
}
    bb8c:	4618      	mov	r0, r3
    bb8e:	3720      	adds	r7, #32
    bb90:	46bd      	mov	sp, r7
    bb92:	bd80      	pop	{r7, pc}
    bb94:	0000ba8d 	.word	0x0000ba8d
    bb98:	20000b00 	.word	0x20000b00
    bb9c:	0000c431 	.word	0x0000c431
    bba0:	0000b5dd 	.word	0x0000b5dd
    bba4:	0000c371 	.word	0x0000c371
    bba8:	0000b5b9 	.word	0x0000b5b9

0000bbac <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    bbac:	b580      	push	{r7, lr}
    bbae:	b082      	sub	sp, #8
    bbb0:	af00      	add	r7, sp, #0
    bbb2:	4603      	mov	r3, r0
    bbb4:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    bbb6:	79fb      	ldrb	r3, [r7, #7]
    bbb8:	4618      	mov	r0, r3
    bbba:	4b03      	ldr	r3, [pc, #12]	; (bbc8 <usbdc_set_address+0x1c>)
    bbbc:	4798      	blx	r3
}
    bbbe:	bf00      	nop
    bbc0:	3708      	adds	r7, #8
    bbc2:	46bd      	mov	sp, r7
    bbc4:	bd80      	pop	{r7, pc}
    bbc6:	bf00      	nop
    bbc8:	00002de9 	.word	0x00002de9

0000bbcc <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    bbcc:	b590      	push	{r4, r7, lr}
    bbce:	b087      	sub	sp, #28
    bbd0:	af00      	add	r7, sp, #0
    bbd2:	4603      	mov	r3, r0
    bbd4:	460a      	mov	r2, r1
    bbd6:	80fb      	strh	r3, [r7, #6]
    bbd8:	4613      	mov	r3, r2
    bbda:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    bbdc:	2300      	movs	r3, #0
    bbde:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    bbe0:	693b      	ldr	r3, [r7, #16]
    bbe2:	2b00      	cmp	r3, #0
    bbe4:	d10b      	bne.n	bbfe <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    bbe6:	4b43      	ldr	r3, [pc, #268]	; (bcf4 <usbdc_set_interface+0x128>)
    bbe8:	681b      	ldr	r3, [r3, #0]
    bbea:	6818      	ldr	r0, [r3, #0]
    bbec:	4b41      	ldr	r3, [pc, #260]	; (bcf4 <usbdc_set_interface+0x128>)
    bbee:	681b      	ldr	r3, [r3, #0]
    bbf0:	6859      	ldr	r1, [r3, #4]
    bbf2:	4b40      	ldr	r3, [pc, #256]	; (bcf4 <usbdc_set_interface+0x128>)
    bbf4:	7edb      	ldrb	r3, [r3, #27]
    bbf6:	461a      	mov	r2, r3
    bbf8:	4b3f      	ldr	r3, [pc, #252]	; (bcf8 <usbdc_set_interface+0x12c>)
    bbfa:	4798      	blx	r3
    bbfc:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    bbfe:	693b      	ldr	r3, [r7, #16]
    bc00:	2b00      	cmp	r3, #0
    bc02:	d101      	bne.n	bc08 <usbdc_set_interface+0x3c>
		return false;
    bc04:	2300      	movs	r3, #0
    bc06:	e071      	b.n	bcec <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    bc08:	693b      	ldr	r3, [r7, #16]
    bc0a:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    bc0c:	6938      	ldr	r0, [r7, #16]
    bc0e:	4b3b      	ldr	r3, [pc, #236]	; (bcfc <usbdc_set_interface+0x130>)
    bc10:	4798      	blx	r3
    bc12:	4603      	mov	r3, r0
    bc14:	461a      	mov	r2, r3
    bc16:	693b      	ldr	r3, [r7, #16]
    bc18:	4413      	add	r3, r2
    bc1a:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    bc1c:	68bb      	ldr	r3, [r7, #8]
    bc1e:	68f9      	ldr	r1, [r7, #12]
    bc20:	2204      	movs	r2, #4
    bc22:	4618      	mov	r0, r3
    bc24:	4b36      	ldr	r3, [pc, #216]	; (bd00 <usbdc_set_interface+0x134>)
    bc26:	4798      	blx	r3
    bc28:	6138      	str	r0, [r7, #16]
    bc2a:	693b      	ldr	r3, [r7, #16]
    bc2c:	2b00      	cmp	r3, #0
    bc2e:	d113      	bne.n	bc58 <usbdc_set_interface+0x8c>
		return false;
    bc30:	2300      	movs	r3, #0
    bc32:	e05b      	b.n	bcec <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    bc34:	68bb      	ldr	r3, [r7, #8]
    bc36:	4618      	mov	r0, r3
    bc38:	4b32      	ldr	r3, [pc, #200]	; (bd04 <usbdc_set_interface+0x138>)
    bc3a:	4798      	blx	r3
    bc3c:	4603      	mov	r3, r0
    bc3e:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bc40:	68bb      	ldr	r3, [r7, #8]
    bc42:	68f9      	ldr	r1, [r7, #12]
    bc44:	2204      	movs	r2, #4
    bc46:	4618      	mov	r0, r3
    bc48:	4b2d      	ldr	r3, [pc, #180]	; (bd00 <usbdc_set_interface+0x134>)
    bc4a:	4798      	blx	r3
    bc4c:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    bc4e:	693b      	ldr	r3, [r7, #16]
    bc50:	2b00      	cmp	r3, #0
    bc52:	d101      	bne.n	bc58 <usbdc_set_interface+0x8c>
			return false;
    bc54:	2300      	movs	r3, #0
    bc56:	e049      	b.n	bcec <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    bc58:	693b      	ldr	r3, [r7, #16]
    bc5a:	3302      	adds	r3, #2
    bc5c:	781b      	ldrb	r3, [r3, #0]
    bc5e:	b29b      	uxth	r3, r3
    bc60:	88ba      	ldrh	r2, [r7, #4]
    bc62:	429a      	cmp	r2, r3
    bc64:	d1e6      	bne.n	bc34 <usbdc_set_interface+0x68>
    bc66:	693b      	ldr	r3, [r7, #16]
    bc68:	3303      	adds	r3, #3
    bc6a:	781b      	ldrb	r3, [r3, #0]
    bc6c:	b29b      	uxth	r3, r3
    bc6e:	88fa      	ldrh	r2, [r7, #6]
    bc70:	429a      	cmp	r2, r3
    bc72:	d1df      	bne.n	bc34 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    bc74:	693b      	ldr	r3, [r7, #16]
    bc76:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    bc78:	4b1e      	ldr	r3, [pc, #120]	; (bcf4 <usbdc_set_interface+0x128>)
    bc7a:	691b      	ldr	r3, [r3, #16]
    bc7c:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    bc7e:	e031      	b.n	bce4 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    bc80:	697b      	ldr	r3, [r7, #20]
    bc82:	685b      	ldr	r3, [r3, #4]
    bc84:	f107 0208 	add.w	r2, r7, #8
    bc88:	2101      	movs	r1, #1
    bc8a:	6978      	ldr	r0, [r7, #20]
    bc8c:	4798      	blx	r3
    bc8e:	4603      	mov	r3, r0
    bc90:	2b00      	cmp	r3, #0
    bc92:	d003      	beq.n	bc9c <usbdc_set_interface+0xd0>
			func = func->next;
    bc94:	697b      	ldr	r3, [r7, #20]
    bc96:	681b      	ldr	r3, [r3, #0]
    bc98:	617b      	str	r3, [r7, #20]
    bc9a:	e023      	b.n	bce4 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    bc9c:	697b      	ldr	r3, [r7, #20]
    bc9e:	685b      	ldr	r3, [r3, #4]
    bca0:	f107 0208 	add.w	r2, r7, #8
    bca4:	2100      	movs	r1, #0
    bca6:	6978      	ldr	r0, [r7, #20]
    bca8:	4798      	blx	r3
    bcaa:	4603      	mov	r3, r0
    bcac:	2b00      	cmp	r3, #0
    bcae:	d117      	bne.n	bce0 <usbdc_set_interface+0x114>
			if (alt_set) {
    bcb0:	88fb      	ldrh	r3, [r7, #6]
    bcb2:	2b00      	cmp	r3, #0
    bcb4:	d00c      	beq.n	bcd0 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    bcb6:	4b0f      	ldr	r3, [pc, #60]	; (bcf4 <usbdc_set_interface+0x128>)
    bcb8:	7f5b      	ldrb	r3, [r3, #29]
    bcba:	b25a      	sxtb	r2, r3
    bcbc:	88bb      	ldrh	r3, [r7, #4]
    bcbe:	2101      	movs	r1, #1
    bcc0:	fa01 f303 	lsl.w	r3, r1, r3
    bcc4:	b25b      	sxtb	r3, r3
    bcc6:	4313      	orrs	r3, r2
    bcc8:	b25b      	sxtb	r3, r3
    bcca:	b2da      	uxtb	r2, r3
    bccc:	4b09      	ldr	r3, [pc, #36]	; (bcf4 <usbdc_set_interface+0x128>)
    bcce:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    bcd0:	2300      	movs	r3, #0
    bcd2:	2200      	movs	r2, #0
    bcd4:	2100      	movs	r1, #0
    bcd6:	2000      	movs	r0, #0
    bcd8:	4c0b      	ldr	r4, [pc, #44]	; (bd08 <usbdc_set_interface+0x13c>)
    bcda:	47a0      	blx	r4
			return true;
    bcdc:	2301      	movs	r3, #1
    bcde:	e005      	b.n	bcec <usbdc_set_interface+0x120>
		} else {
			return false;
    bce0:	2300      	movs	r3, #0
    bce2:	e003      	b.n	bcec <usbdc_set_interface+0x120>
	while (NULL != func) {
    bce4:	697b      	ldr	r3, [r7, #20]
    bce6:	2b00      	cmp	r3, #0
    bce8:	d1ca      	bne.n	bc80 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    bcea:	2300      	movs	r3, #0
}
    bcec:	4618      	mov	r0, r3
    bcee:	371c      	adds	r7, #28
    bcf0:	46bd      	mov	sp, r7
    bcf2:	bd90      	pop	{r4, r7, pc}
    bcf4:	20000b00 	.word	0x20000b00
    bcf8:	0000c431 	.word	0x0000c431
    bcfc:	0000b5dd 	.word	0x0000b5dd
    bd00:	0000c371 	.word	0x0000c371
    bd04:	0000b5b9 	.word	0x0000b5b9
    bd08:	0000c0e1 	.word	0x0000c0e1

0000bd0c <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    bd0c:	b590      	push	{r4, r7, lr}
    bd0e:	b083      	sub	sp, #12
    bd10:	af00      	add	r7, sp, #0
    bd12:	4603      	mov	r3, r0
    bd14:	6039      	str	r1, [r7, #0]
    bd16:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bd18:	683b      	ldr	r3, [r7, #0]
    bd1a:	785b      	ldrb	r3, [r3, #1]
    bd1c:	3b01      	subs	r3, #1
    bd1e:	2b0a      	cmp	r3, #10
    bd20:	d85b      	bhi.n	bdda <usbdc_set_req+0xce>
    bd22:	a201      	add	r2, pc, #4	; (adr r2, bd28 <usbdc_set_req+0x1c>)
    bd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bd28:	0000bda7 	.word	0x0000bda7
    bd2c:	0000bddb 	.word	0x0000bddb
    bd30:	0000bdb5 	.word	0x0000bdb5
    bd34:	0000bddb 	.word	0x0000bddb
    bd38:	0000bd55 	.word	0x0000bd55
    bd3c:	0000bddb 	.word	0x0000bddb
    bd40:	0000bddb 	.word	0x0000bddb
    bd44:	0000bddb 	.word	0x0000bddb
    bd48:	0000bd6f 	.word	0x0000bd6f
    bd4c:	0000bddb 	.word	0x0000bddb
    bd50:	0000bdc3 	.word	0x0000bdc3
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bd54:	79f8      	ldrb	r0, [r7, #7]
    bd56:	2301      	movs	r3, #1
    bd58:	2200      	movs	r2, #0
    bd5a:	2100      	movs	r1, #0
    bd5c:	4c21      	ldr	r4, [pc, #132]	; (bde4 <usbdc_set_req+0xd8>)
    bd5e:	47a0      	blx	r4
    bd60:	4603      	mov	r3, r0
    bd62:	2b00      	cmp	r3, #0
    bd64:	bf0c      	ite	eq
    bd66:	2301      	moveq	r3, #1
    bd68:	2300      	movne	r3, #0
    bd6a:	b2db      	uxtb	r3, r3
    bd6c:	e036      	b.n	bddc <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    bd6e:	683b      	ldr	r3, [r7, #0]
    bd70:	885b      	ldrh	r3, [r3, #2]
    bd72:	b29b      	uxth	r3, r3
    bd74:	b2db      	uxtb	r3, r3
    bd76:	4618      	mov	r0, r3
    bd78:	4b1b      	ldr	r3, [pc, #108]	; (bde8 <usbdc_set_req+0xdc>)
    bd7a:	4798      	blx	r3
    bd7c:	4603      	mov	r3, r0
    bd7e:	f083 0301 	eor.w	r3, r3, #1
    bd82:	b2db      	uxtb	r3, r3
    bd84:	2b00      	cmp	r3, #0
    bd86:	d001      	beq.n	bd8c <usbdc_set_req+0x80>
			return false;
    bd88:	2300      	movs	r3, #0
    bd8a:	e027      	b.n	bddc <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bd8c:	79f8      	ldrb	r0, [r7, #7]
    bd8e:	2301      	movs	r3, #1
    bd90:	2200      	movs	r2, #0
    bd92:	2100      	movs	r1, #0
    bd94:	4c13      	ldr	r4, [pc, #76]	; (bde4 <usbdc_set_req+0xd8>)
    bd96:	47a0      	blx	r4
    bd98:	4603      	mov	r3, r0
    bd9a:	2b00      	cmp	r3, #0
    bd9c:	bf0c      	ite	eq
    bd9e:	2301      	moveq	r3, #1
    bda0:	2300      	movne	r3, #0
    bda2:	b2db      	uxtb	r3, r3
    bda4:	e01a      	b.n	bddc <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    bda6:	79fb      	ldrb	r3, [r7, #7]
    bda8:	6839      	ldr	r1, [r7, #0]
    bdaa:	4618      	mov	r0, r3
    bdac:	4b0f      	ldr	r3, [pc, #60]	; (bdec <usbdc_set_req+0xe0>)
    bdae:	4798      	blx	r3
    bdb0:	4603      	mov	r3, r0
    bdb2:	e013      	b.n	bddc <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    bdb4:	79fb      	ldrb	r3, [r7, #7]
    bdb6:	6839      	ldr	r1, [r7, #0]
    bdb8:	4618      	mov	r0, r3
    bdba:	4b0d      	ldr	r3, [pc, #52]	; (bdf0 <usbdc_set_req+0xe4>)
    bdbc:	4798      	blx	r3
    bdbe:	4603      	mov	r3, r0
    bdc0:	e00c      	b.n	bddc <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    bdc2:	683b      	ldr	r3, [r7, #0]
    bdc4:	885b      	ldrh	r3, [r3, #2]
    bdc6:	b29a      	uxth	r2, r3
    bdc8:	683b      	ldr	r3, [r7, #0]
    bdca:	889b      	ldrh	r3, [r3, #4]
    bdcc:	b29b      	uxth	r3, r3
    bdce:	4619      	mov	r1, r3
    bdd0:	4610      	mov	r0, r2
    bdd2:	4b08      	ldr	r3, [pc, #32]	; (bdf4 <usbdc_set_req+0xe8>)
    bdd4:	4798      	blx	r3
    bdd6:	4603      	mov	r3, r0
    bdd8:	e000      	b.n	bddc <usbdc_set_req+0xd0>
	default:
		return false;
    bdda:	2300      	movs	r3, #0
	}
}
    bddc:	4618      	mov	r0, r3
    bdde:	370c      	adds	r7, #12
    bde0:	46bd      	mov	sp, r7
    bde2:	bd90      	pop	{r4, r7, pc}
    bde4:	0000c0e1 	.word	0x0000c0e1
    bde8:	0000bac1 	.word	0x0000bac1
    bdec:	0000b9dd 	.word	0x0000b9dd
    bdf0:	0000ba35 	.word	0x0000ba35
    bdf4:	0000bbcd 	.word	0x0000bbcd

0000bdf8 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    bdf8:	b580      	push	{r7, lr}
    bdfa:	b082      	sub	sp, #8
    bdfc:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    bdfe:	4b0a      	ldr	r3, [pc, #40]	; (be28 <usbdc_sof_notify+0x30>)
    be00:	685b      	ldr	r3, [r3, #4]
    be02:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    be04:	e009      	b.n	be1a <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    be06:	687b      	ldr	r3, [r7, #4]
    be08:	685b      	ldr	r3, [r3, #4]
    be0a:	2b00      	cmp	r3, #0
    be0c:	d002      	beq.n	be14 <usbdc_sof_notify+0x1c>
			sof->cb();
    be0e:	687b      	ldr	r3, [r7, #4]
    be10:	685b      	ldr	r3, [r3, #4]
    be12:	4798      	blx	r3
		}
		sof = sof->next;
    be14:	687b      	ldr	r3, [r7, #4]
    be16:	681b      	ldr	r3, [r3, #0]
    be18:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    be1a:	687b      	ldr	r3, [r7, #4]
    be1c:	2b00      	cmp	r3, #0
    be1e:	d1f2      	bne.n	be06 <usbdc_sof_notify+0xe>
	}
}
    be20:	bf00      	nop
    be22:	3708      	adds	r7, #8
    be24:	46bd      	mov	sp, r7
    be26:	bd80      	pop	{r7, pc}
    be28:	20000b00 	.word	0x20000b00

0000be2c <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    be2c:	b580      	push	{r7, lr}
    be2e:	b084      	sub	sp, #16
    be30:	af00      	add	r7, sp, #0
    be32:	4603      	mov	r3, r0
    be34:	6039      	str	r1, [r7, #0]
    be36:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    be38:	4b0b      	ldr	r3, [pc, #44]	; (be68 <usbdc_change_notify+0x3c>)
    be3a:	68db      	ldr	r3, [r3, #12]
    be3c:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    be3e:	e00c      	b.n	be5a <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    be40:	68fb      	ldr	r3, [r7, #12]
    be42:	685b      	ldr	r3, [r3, #4]
    be44:	2b00      	cmp	r3, #0
    be46:	d005      	beq.n	be54 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    be48:	68fb      	ldr	r3, [r7, #12]
    be4a:	685b      	ldr	r3, [r3, #4]
    be4c:	79fa      	ldrb	r2, [r7, #7]
    be4e:	6839      	ldr	r1, [r7, #0]
    be50:	4610      	mov	r0, r2
    be52:	4798      	blx	r3
		}
		cg = cg->next;
    be54:	68fb      	ldr	r3, [r7, #12]
    be56:	681b      	ldr	r3, [r3, #0]
    be58:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    be5a:	68fb      	ldr	r3, [r7, #12]
    be5c:	2b00      	cmp	r3, #0
    be5e:	d1ef      	bne.n	be40 <usbdc_change_notify+0x14>
	}
}
    be60:	bf00      	nop
    be62:	3710      	adds	r7, #16
    be64:	46bd      	mov	sp, r7
    be66:	bd80      	pop	{r7, pc}
    be68:	20000b00 	.word	0x20000b00

0000be6c <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    be6c:	b580      	push	{r7, lr}
    be6e:	b084      	sub	sp, #16
    be70:	af00      	add	r7, sp, #0
    be72:	4603      	mov	r3, r0
    be74:	6039      	str	r1, [r7, #0]
    be76:	71fb      	strb	r3, [r7, #7]
    be78:	4613      	mov	r3, r2
    be7a:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    be7c:	4b12      	ldr	r3, [pc, #72]	; (bec8 <usbdc_request_handler+0x5c>)
    be7e:	689b      	ldr	r3, [r3, #8]
    be80:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    be82:	e019      	b.n	beb8 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    be84:	68fb      	ldr	r3, [r7, #12]
    be86:	685b      	ldr	r3, [r3, #4]
    be88:	2b00      	cmp	r3, #0
    be8a:	d012      	beq.n	beb2 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    be8c:	68fb      	ldr	r3, [r7, #12]
    be8e:	685b      	ldr	r3, [r3, #4]
    be90:	79ba      	ldrb	r2, [r7, #6]
    be92:	79f8      	ldrb	r0, [r7, #7]
    be94:	6839      	ldr	r1, [r7, #0]
    be96:	4798      	blx	r3
    be98:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    be9a:	68bb      	ldr	r3, [r7, #8]
    be9c:	2b00      	cmp	r3, #0
    be9e:	d101      	bne.n	bea4 <usbdc_request_handler+0x38>
				return true;
    bea0:	2301      	movs	r3, #1
    bea2:	e00d      	b.n	bec0 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    bea4:	68bb      	ldr	r3, [r7, #8]
    bea6:	f113 0f0a 	cmn.w	r3, #10
    beaa:	d002      	beq.n	beb2 <usbdc_request_handler+0x46>
				return -1;
    beac:	f04f 33ff 	mov.w	r3, #4294967295
    beb0:	e006      	b.n	bec0 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    beb2:	68fb      	ldr	r3, [r7, #12]
    beb4:	681b      	ldr	r3, [r3, #0]
    beb6:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    beb8:	68fb      	ldr	r3, [r7, #12]
    beba:	2b00      	cmp	r3, #0
    bebc:	d1e2      	bne.n	be84 <usbdc_request_handler+0x18>
	}
	return false;
    bebe:	2300      	movs	r3, #0
}
    bec0:	4618      	mov	r0, r3
    bec2:	3710      	adds	r7, #16
    bec4:	46bd      	mov	sp, r7
    bec6:	bd80      	pop	{r7, pc}
    bec8:	20000b00 	.word	0x20000b00

0000becc <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    becc:	b580      	push	{r7, lr}
    bece:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    bed0:	4b01      	ldr	r3, [pc, #4]	; (bed8 <usbd_sof_cb+0xc>)
    bed2:	4798      	blx	r3
}
    bed4:	bf00      	nop
    bed6:	bd80      	pop	{r7, pc}
    bed8:	0000bdf9 	.word	0x0000bdf9

0000bedc <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    bedc:	b580      	push	{r7, lr}
    bede:	b082      	sub	sp, #8
    bee0:	af00      	add	r7, sp, #0
    bee2:	4603      	mov	r3, r0
    bee4:	6039      	str	r1, [r7, #0]
    bee6:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    bee8:	79fb      	ldrb	r3, [r7, #7]
    beea:	2200      	movs	r2, #0
    beec:	6839      	ldr	r1, [r7, #0]
    beee:	4618      	mov	r0, r3
    bef0:	4b14      	ldr	r3, [pc, #80]	; (bf44 <usbdc_cb_ctl_req+0x68>)
    bef2:	4798      	blx	r3
    bef4:	4603      	mov	r3, r0
    bef6:	f1b3 3fff 	cmp.w	r3, #4294967295
    befa:	d00b      	beq.n	bf14 <usbdc_cb_ctl_req+0x38>
    befc:	2b01      	cmp	r3, #1
    befe:	d007      	beq.n	bf10 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    bf00:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    bf02:	683b      	ldr	r3, [r7, #0]
    bf04:	781b      	ldrb	r3, [r3, #0]
    bf06:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    bf0a:	2b00      	cmp	r3, #0
    bf0c:	d007      	beq.n	bf1e <usbdc_cb_ctl_req+0x42>
    bf0e:	e003      	b.n	bf18 <usbdc_cb_ctl_req+0x3c>
		return true;
    bf10:	2301      	movs	r3, #1
    bf12:	e013      	b.n	bf3c <usbdc_cb_ctl_req+0x60>
		return false;
    bf14:	2300      	movs	r3, #0
    bf16:	e011      	b.n	bf3c <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    bf18:	2b80      	cmp	r3, #128	; 0x80
    bf1a:	d007      	beq.n	bf2c <usbdc_cb_ctl_req+0x50>
    bf1c:	e00d      	b.n	bf3a <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    bf1e:	79fb      	ldrb	r3, [r7, #7]
    bf20:	6839      	ldr	r1, [r7, #0]
    bf22:	4618      	mov	r0, r3
    bf24:	4b08      	ldr	r3, [pc, #32]	; (bf48 <usbdc_cb_ctl_req+0x6c>)
    bf26:	4798      	blx	r3
    bf28:	4603      	mov	r3, r0
    bf2a:	e007      	b.n	bf3c <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    bf2c:	79fb      	ldrb	r3, [r7, #7]
    bf2e:	6839      	ldr	r1, [r7, #0]
    bf30:	4618      	mov	r0, r3
    bf32:	4b06      	ldr	r3, [pc, #24]	; (bf4c <usbdc_cb_ctl_req+0x70>)
    bf34:	4798      	blx	r3
    bf36:	4603      	mov	r3, r0
    bf38:	e000      	b.n	bf3c <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    bf3a:	2300      	movs	r3, #0
	}
}
    bf3c:	4618      	mov	r0, r3
    bf3e:	3708      	adds	r7, #8
    bf40:	46bd      	mov	sp, r7
    bf42:	bd80      	pop	{r7, pc}
    bf44:	0000be6d 	.word	0x0000be6d
    bf48:	0000bd0d 	.word	0x0000bd0d
    bf4c:	0000b935 	.word	0x0000b935

0000bf50 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    bf50:	b580      	push	{r7, lr}
    bf52:	b082      	sub	sp, #8
    bf54:	af00      	add	r7, sp, #0
    bf56:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    bf58:	687b      	ldr	r3, [r7, #4]
    bf5a:	781b      	ldrb	r3, [r3, #0]
    bf5c:	2b00      	cmp	r3, #0
    bf5e:	d135      	bne.n	bfcc <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    bf60:	687b      	ldr	r3, [r7, #4]
    bf62:	785b      	ldrb	r3, [r3, #1]
    bf64:	2b05      	cmp	r3, #5
    bf66:	d019      	beq.n	bf9c <usbdc_ctrl_status_end+0x4c>
    bf68:	2b09      	cmp	r3, #9
    bf6a:	d000      	beq.n	bf6e <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    bf6c:	e02f      	b.n	bfce <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    bf6e:	687b      	ldr	r3, [r7, #4]
    bf70:	885b      	ldrh	r3, [r3, #2]
    bf72:	b29b      	uxth	r3, r3
    bf74:	b2da      	uxtb	r2, r3
    bf76:	4b17      	ldr	r3, [pc, #92]	; (bfd4 <usbdc_ctrl_status_end+0x84>)
    bf78:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    bf7a:	687b      	ldr	r3, [r7, #4]
    bf7c:	885b      	ldrh	r3, [r3, #2]
    bf7e:	b29b      	uxth	r3, r3
    bf80:	2b00      	cmp	r3, #0
    bf82:	d001      	beq.n	bf88 <usbdc_ctrl_status_end+0x38>
    bf84:	2204      	movs	r2, #4
    bf86:	e000      	b.n	bf8a <usbdc_ctrl_status_end+0x3a>
    bf88:	2203      	movs	r2, #3
    bf8a:	4b12      	ldr	r3, [pc, #72]	; (bfd4 <usbdc_ctrl_status_end+0x84>)
    bf8c:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    bf8e:	4b11      	ldr	r3, [pc, #68]	; (bfd4 <usbdc_ctrl_status_end+0x84>)
    bf90:	7e9b      	ldrb	r3, [r3, #26]
    bf92:	4619      	mov	r1, r3
    bf94:	2001      	movs	r0, #1
    bf96:	4b10      	ldr	r3, [pc, #64]	; (bfd8 <usbdc_ctrl_status_end+0x88>)
    bf98:	4798      	blx	r3
		break;
    bf9a:	e018      	b.n	bfce <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    bf9c:	687b      	ldr	r3, [r7, #4]
    bf9e:	885b      	ldrh	r3, [r3, #2]
    bfa0:	b29b      	uxth	r3, r3
    bfa2:	b2db      	uxtb	r3, r3
    bfa4:	4618      	mov	r0, r3
    bfa6:	4b0d      	ldr	r3, [pc, #52]	; (bfdc <usbdc_ctrl_status_end+0x8c>)
    bfa8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    bfaa:	687b      	ldr	r3, [r7, #4]
    bfac:	885b      	ldrh	r3, [r3, #2]
    bfae:	b29b      	uxth	r3, r3
    bfb0:	2b00      	cmp	r3, #0
    bfb2:	d001      	beq.n	bfb8 <usbdc_ctrl_status_end+0x68>
    bfb4:	2203      	movs	r2, #3
    bfb6:	e000      	b.n	bfba <usbdc_ctrl_status_end+0x6a>
    bfb8:	2202      	movs	r2, #2
    bfba:	4b06      	ldr	r3, [pc, #24]	; (bfd4 <usbdc_ctrl_status_end+0x84>)
    bfbc:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    bfbe:	4b05      	ldr	r3, [pc, #20]	; (bfd4 <usbdc_ctrl_status_end+0x84>)
    bfc0:	7e9b      	ldrb	r3, [r3, #26]
    bfc2:	4619      	mov	r1, r3
    bfc4:	2001      	movs	r0, #1
    bfc6:	4b04      	ldr	r3, [pc, #16]	; (bfd8 <usbdc_ctrl_status_end+0x88>)
    bfc8:	4798      	blx	r3
		break;
    bfca:	e000      	b.n	bfce <usbdc_ctrl_status_end+0x7e>
		return;
    bfcc:	bf00      	nop
	}
}
    bfce:	3708      	adds	r7, #8
    bfd0:	46bd      	mov	sp, r7
    bfd2:	bd80      	pop	{r7, pc}
    bfd4:	20000b00 	.word	0x20000b00
    bfd8:	0000be2d 	.word	0x0000be2d
    bfdc:	0000bbad 	.word	0x0000bbad

0000bfe0 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    bfe0:	b580      	push	{r7, lr}
    bfe2:	b082      	sub	sp, #8
    bfe4:	af00      	add	r7, sp, #0
    bfe6:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    bfe8:	2201      	movs	r2, #1
    bfea:	6879      	ldr	r1, [r7, #4]
    bfec:	2000      	movs	r0, #0
    bfee:	4b03      	ldr	r3, [pc, #12]	; (bffc <usbdc_ctrl_data_end+0x1c>)
    bff0:	4798      	blx	r3
	return false;
    bff2:	2300      	movs	r3, #0
}
    bff4:	4618      	mov	r0, r3
    bff6:	3708      	adds	r7, #8
    bff8:	46bd      	mov	sp, r7
    bffa:	bd80      	pop	{r7, pc}
    bffc:	0000be6d 	.word	0x0000be6d

0000c000 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c000:	b580      	push	{r7, lr}
    c002:	b082      	sub	sp, #8
    c004:	af00      	add	r7, sp, #0
    c006:	4603      	mov	r3, r0
    c008:	603a      	str	r2, [r7, #0]
    c00a:	71fb      	strb	r3, [r7, #7]
    c00c:	460b      	mov	r3, r1
    c00e:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c010:	79bb      	ldrb	r3, [r7, #6]
    c012:	2b00      	cmp	r3, #0
    c014:	d002      	beq.n	c01c <usbdc_cb_ctl_done+0x1c>
    c016:	2b01      	cmp	r3, #1
    c018:	d004      	beq.n	c024 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c01a:	e008      	b.n	c02e <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c01c:	6838      	ldr	r0, [r7, #0]
    c01e:	4b06      	ldr	r3, [pc, #24]	; (c038 <usbdc_cb_ctl_done+0x38>)
    c020:	4798      	blx	r3
		break;
    c022:	e004      	b.n	c02e <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c024:	6838      	ldr	r0, [r7, #0]
    c026:	4b05      	ldr	r3, [pc, #20]	; (c03c <usbdc_cb_ctl_done+0x3c>)
    c028:	4798      	blx	r3
    c02a:	4603      	mov	r3, r0
    c02c:	e000      	b.n	c030 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c02e:	2300      	movs	r3, #0
}
    c030:	4618      	mov	r0, r3
    c032:	3708      	adds	r7, #8
    c034:	46bd      	mov	sp, r7
    c036:	bd80      	pop	{r7, pc}
    c038:	0000bf51 	.word	0x0000bf51
    c03c:	0000bfe1 	.word	0x0000bfe1

0000c040 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c040:	b580      	push	{r7, lr}
    c042:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c044:	4b10      	ldr	r3, [pc, #64]	; (c088 <usbdc_reset+0x48>)
    c046:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c048:	4b10      	ldr	r3, [pc, #64]	; (c08c <usbdc_reset+0x4c>)
    c04a:	2202      	movs	r2, #2
    c04c:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c04e:	4b0f      	ldr	r3, [pc, #60]	; (c08c <usbdc_reset+0x4c>)
    c050:	2200      	movs	r2, #0
    c052:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c054:	4b0d      	ldr	r3, [pc, #52]	; (c08c <usbdc_reset+0x4c>)
    c056:	2200      	movs	r2, #0
    c058:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c05a:	2000      	movs	r0, #0
    c05c:	4b0c      	ldr	r3, [pc, #48]	; (c090 <usbdc_reset+0x50>)
    c05e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c060:	4b0a      	ldr	r3, [pc, #40]	; (c08c <usbdc_reset+0x4c>)
    c062:	7f1b      	ldrb	r3, [r3, #28]
    c064:	4618      	mov	r0, r3
    c066:	4b0b      	ldr	r3, [pc, #44]	; (c094 <usbdc_reset+0x54>)
    c068:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c06a:	4a0b      	ldr	r2, [pc, #44]	; (c098 <usbdc_reset+0x58>)
    c06c:	2100      	movs	r1, #0
    c06e:	2000      	movs	r0, #0
    c070:	4b0a      	ldr	r3, [pc, #40]	; (c09c <usbdc_reset+0x5c>)
    c072:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c074:	4a0a      	ldr	r2, [pc, #40]	; (c0a0 <usbdc_reset+0x60>)
    c076:	2102      	movs	r1, #2
    c078:	2000      	movs	r0, #0
    c07a:	4b08      	ldr	r3, [pc, #32]	; (c09c <usbdc_reset+0x5c>)
    c07c:	4798      	blx	r3
	usb_d_ep_enable(0);
    c07e:	2000      	movs	r0, #0
    c080:	4b08      	ldr	r3, [pc, #32]	; (c0a4 <usbdc_reset+0x64>)
    c082:	4798      	blx	r3
}
    c084:	bf00      	nop
    c086:	bd80      	pop	{r7, pc}
    c088:	0000ba8d 	.word	0x0000ba8d
    c08c:	20000b00 	.word	0x20000b00
    c090:	00002ecd 	.word	0x00002ecd
    c094:	00002e09 	.word	0x00002e09
    c098:	0000bedd 	.word	0x0000bedd
    c09c:	000031cd 	.word	0x000031cd
    c0a0:	0000c001 	.word	0x0000c001
    c0a4:	00002f1d 	.word	0x00002f1d

0000c0a8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c0a8:	b580      	push	{r7, lr}
    c0aa:	b082      	sub	sp, #8
    c0ac:	af00      	add	r7, sp, #0
    c0ae:	4603      	mov	r3, r0
    c0b0:	6039      	str	r1, [r7, #0]
    c0b2:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c0b4:	79fb      	ldrb	r3, [r7, #7]
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d002      	beq.n	c0c0 <usbd_event_cb+0x18>
    c0ba:	2b01      	cmp	r3, #1
    c0bc:	d005      	beq.n	c0ca <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c0be:	e007      	b.n	c0d0 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c0c0:	6839      	ldr	r1, [r7, #0]
    c0c2:	2000      	movs	r0, #0
    c0c4:	4b04      	ldr	r3, [pc, #16]	; (c0d8 <usbd_event_cb+0x30>)
    c0c6:	4798      	blx	r3
		break;
    c0c8:	e002      	b.n	c0d0 <usbd_event_cb+0x28>
		usbdc_reset();
    c0ca:	4b04      	ldr	r3, [pc, #16]	; (c0dc <usbd_event_cb+0x34>)
    c0cc:	4798      	blx	r3
		break;
    c0ce:	bf00      	nop
	}
}
    c0d0:	bf00      	nop
    c0d2:	3708      	adds	r7, #8
    c0d4:	46bd      	mov	sp, r7
    c0d6:	bd80      	pop	{r7, pc}
    c0d8:	0000be2d 	.word	0x0000be2d
    c0dc:	0000c041 	.word	0x0000c041

0000c0e0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c0e0:	b580      	push	{r7, lr}
    c0e2:	b088      	sub	sp, #32
    c0e4:	af00      	add	r7, sp, #0
    c0e6:	60b9      	str	r1, [r7, #8]
    c0e8:	607a      	str	r2, [r7, #4]
    c0ea:	461a      	mov	r2, r3
    c0ec:	4603      	mov	r3, r0
    c0ee:	73fb      	strb	r3, [r7, #15]
    c0f0:	4613      	mov	r3, r2
    c0f2:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c0f4:	68bb      	ldr	r3, [r7, #8]
    c0f6:	617b      	str	r3, [r7, #20]
    c0f8:	687b      	ldr	r3, [r7, #4]
    c0fa:	61bb      	str	r3, [r7, #24]
    c0fc:	7bfb      	ldrb	r3, [r7, #15]
    c0fe:	773b      	strb	r3, [r7, #28]
    c100:	7bbb      	ldrb	r3, [r7, #14]
    c102:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c104:	f107 0314 	add.w	r3, r7, #20
    c108:	4618      	mov	r0, r3
    c10a:	4b03      	ldr	r3, [pc, #12]	; (c118 <usbdc_xfer+0x38>)
    c10c:	4798      	blx	r3
    c10e:	4603      	mov	r3, r0
}
    c110:	4618      	mov	r0, r3
    c112:	3720      	adds	r7, #32
    c114:	46bd      	mov	sp, r7
    c116:	bd80      	pop	{r7, pc}
    c118:	00002f8d 	.word	0x00002f8d

0000c11c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c11c:	b580      	push	{r7, lr}
    c11e:	b082      	sub	sp, #8
    c120:	af00      	add	r7, sp, #0
    c122:	4603      	mov	r3, r0
    c124:	6039      	str	r1, [r7, #0]
    c126:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c128:	79fb      	ldrb	r3, [r7, #7]
    c12a:	2b01      	cmp	r3, #1
    c12c:	d009      	beq.n	c142 <usbdc_register_handler+0x26>
    c12e:	2b02      	cmp	r3, #2
    c130:	d00c      	beq.n	c14c <usbdc_register_handler+0x30>
    c132:	2b00      	cmp	r3, #0
    c134:	d000      	beq.n	c138 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c136:	e00e      	b.n	c156 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c138:	6839      	ldr	r1, [r7, #0]
    c13a:	4809      	ldr	r0, [pc, #36]	; (c160 <usbdc_register_handler+0x44>)
    c13c:	4b09      	ldr	r3, [pc, #36]	; (c164 <usbdc_register_handler+0x48>)
    c13e:	4798      	blx	r3
		break;
    c140:	e009      	b.n	c156 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c142:	6839      	ldr	r1, [r7, #0]
    c144:	4808      	ldr	r0, [pc, #32]	; (c168 <usbdc_register_handler+0x4c>)
    c146:	4b07      	ldr	r3, [pc, #28]	; (c164 <usbdc_register_handler+0x48>)
    c148:	4798      	blx	r3
		break;
    c14a:	e004      	b.n	c156 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c14c:	6839      	ldr	r1, [r7, #0]
    c14e:	4807      	ldr	r0, [pc, #28]	; (c16c <usbdc_register_handler+0x50>)
    c150:	4b04      	ldr	r3, [pc, #16]	; (c164 <usbdc_register_handler+0x48>)
    c152:	4798      	blx	r3
		break;
    c154:	bf00      	nop
	}
}
    c156:	bf00      	nop
    c158:	3708      	adds	r7, #8
    c15a:	46bd      	mov	sp, r7
    c15c:	bd80      	pop	{r7, pc}
    c15e:	bf00      	nop
    c160:	20000b04 	.word	0x20000b04
    c164:	00003325 	.word	0x00003325
    c168:	20000b08 	.word	0x20000b08
    c16c:	20000b0c 	.word	0x20000b0c

0000c170 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c170:	b580      	push	{r7, lr}
    c172:	b084      	sub	sp, #16
    c174:	af00      	add	r7, sp, #0
    c176:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c178:	687b      	ldr	r3, [r7, #4]
    c17a:	2b00      	cmp	r3, #0
    c17c:	bf14      	ite	ne
    c17e:	2301      	movne	r3, #1
    c180:	2300      	moveq	r3, #0
    c182:	b2db      	uxtb	r3, r3
    c184:	f240 3255 	movw	r2, #853	; 0x355
    c188:	4910      	ldr	r1, [pc, #64]	; (c1cc <usbdc_init+0x5c>)
    c18a:	4618      	mov	r0, r3
    c18c:	4b10      	ldr	r3, [pc, #64]	; (c1d0 <usbdc_init+0x60>)
    c18e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c190:	4b10      	ldr	r3, [pc, #64]	; (c1d4 <usbdc_init+0x64>)
    c192:	4798      	blx	r3
    c194:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c196:	68fb      	ldr	r3, [r7, #12]
    c198:	2b00      	cmp	r3, #0
    c19a:	da01      	bge.n	c1a0 <usbdc_init+0x30>
		return rc;
    c19c:	68fb      	ldr	r3, [r7, #12]
    c19e:	e010      	b.n	c1c2 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c1a0:	2220      	movs	r2, #32
    c1a2:	2100      	movs	r1, #0
    c1a4:	480c      	ldr	r0, [pc, #48]	; (c1d8 <usbdc_init+0x68>)
    c1a6:	4b0d      	ldr	r3, [pc, #52]	; (c1dc <usbdc_init+0x6c>)
    c1a8:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c1aa:	4a0b      	ldr	r2, [pc, #44]	; (c1d8 <usbdc_init+0x68>)
    c1ac:	687b      	ldr	r3, [r7, #4]
    c1ae:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c1b0:	490b      	ldr	r1, [pc, #44]	; (c1e0 <usbdc_init+0x70>)
    c1b2:	2000      	movs	r0, #0
    c1b4:	4b0b      	ldr	r3, [pc, #44]	; (c1e4 <usbdc_init+0x74>)
    c1b6:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c1b8:	490b      	ldr	r1, [pc, #44]	; (c1e8 <usbdc_init+0x78>)
    c1ba:	2001      	movs	r0, #1
    c1bc:	4b09      	ldr	r3, [pc, #36]	; (c1e4 <usbdc_init+0x74>)
    c1be:	4798      	blx	r3

	return 0;
    c1c0:	2300      	movs	r3, #0
}
    c1c2:	4618      	mov	r0, r3
    c1c4:	3710      	adds	r7, #16
    c1c6:	46bd      	mov	sp, r7
    c1c8:	bd80      	pop	{r7, pc}
    c1ca:	bf00      	nop
    c1cc:	0000cf54 	.word	0x0000cf54
    c1d0:	00003249 	.word	0x00003249
    c1d4:	00002cf5 	.word	0x00002cf5
    c1d8:	20000b00 	.word	0x20000b00
    c1dc:	0000c9b9 	.word	0x0000c9b9
    c1e0:	0000becd 	.word	0x0000becd
    c1e4:	00002da1 	.word	0x00002da1
    c1e8:	0000c0a9 	.word	0x0000c0a9

0000c1ec <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c1ec:	b580      	push	{r7, lr}
    c1ee:	b082      	sub	sp, #8
    c1f0:	af00      	add	r7, sp, #0
    c1f2:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    c1f4:	6879      	ldr	r1, [r7, #4]
    c1f6:	4803      	ldr	r0, [pc, #12]	; (c204 <usbdc_register_function+0x18>)
    c1f8:	4b03      	ldr	r3, [pc, #12]	; (c208 <usbdc_register_function+0x1c>)
    c1fa:	4798      	blx	r3
}
    c1fc:	bf00      	nop
    c1fe:	3708      	adds	r7, #8
    c200:	46bd      	mov	sp, r7
    c202:	bd80      	pop	{r7, pc}
    c204:	20000b10 	.word	0x20000b10
    c208:	00003325 	.word	0x00003325

0000c20c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c20c:	b580      	push	{r7, lr}
    c20e:	b082      	sub	sp, #8
    c210:	af00      	add	r7, sp, #0
    c212:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    c214:	4b0f      	ldr	r3, [pc, #60]	; (c254 <usbdc_start+0x48>)
    c216:	7e9b      	ldrb	r3, [r3, #26]
    c218:	2b00      	cmp	r3, #0
    c21a:	d002      	beq.n	c222 <usbdc_start+0x16>
		return ERR_BUSY;
    c21c:	f06f 0303 	mvn.w	r3, #3
    c220:	e013      	b.n	c24a <usbdc_start+0x3e>
	}

	if (desces) {
    c222:	687b      	ldr	r3, [r7, #4]
    c224:	2b00      	cmp	r3, #0
    c226:	d00e      	beq.n	c246 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    c228:	4a0a      	ldr	r2, [pc, #40]	; (c254 <usbdc_start+0x48>)
    c22a:	687b      	ldr	r3, [r7, #4]
    c22c:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c22e:	687b      	ldr	r3, [r7, #4]
    c230:	681b      	ldr	r3, [r3, #0]
    c232:	79da      	ldrb	r2, [r3, #7]
    c234:	4b07      	ldr	r3, [pc, #28]	; (c254 <usbdc_start+0x48>)
    c236:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c238:	4b06      	ldr	r3, [pc, #24]	; (c254 <usbdc_start+0x48>)
    c23a:	2201      	movs	r2, #1
    c23c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c23e:	4b06      	ldr	r3, [pc, #24]	; (c258 <usbdc_start+0x4c>)
    c240:	4798      	blx	r3
	return ERR_NONE;
    c242:	2300      	movs	r3, #0
    c244:	e001      	b.n	c24a <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    c246:	f06f 0308 	mvn.w	r3, #8
}
    c24a:	4618      	mov	r0, r3
    c24c:	3708      	adds	r7, #8
    c24e:	46bd      	mov	sp, r7
    c250:	bd80      	pop	{r7, pc}
    c252:	bf00      	nop
    c254:	20000b00 	.word	0x20000b00
    c258:	00002dc5 	.word	0x00002dc5

0000c25c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c25c:	b580      	push	{r7, lr}
    c25e:	af00      	add	r7, sp, #0
	usb_d_attach();
    c260:	4b01      	ldr	r3, [pc, #4]	; (c268 <usbdc_attach+0xc>)
    c262:	4798      	blx	r3
}
    c264:	bf00      	nop
    c266:	bd80      	pop	{r7, pc}
    c268:	00002dd9 	.word	0x00002dd9

0000c26c <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    c26c:	b480      	push	{r7}
    c26e:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    c270:	4b03      	ldr	r3, [pc, #12]	; (c280 <usbdc_get_ctrl_buffer+0x14>)
    c272:	695b      	ldr	r3, [r3, #20]
}
    c274:	4618      	mov	r0, r3
    c276:	46bd      	mov	sp, r7
    c278:	f85d 7b04 	ldr.w	r7, [sp], #4
    c27c:	4770      	bx	lr
    c27e:	bf00      	nop
    c280:	20000b00 	.word	0x20000b00

0000c284 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    c284:	b480      	push	{r7}
    c286:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    c288:	4b07      	ldr	r3, [pc, #28]	; (c2a8 <usbdc_get_state+0x24>)
    c28a:	7e9b      	ldrb	r3, [r3, #26]
    c28c:	f003 0310 	and.w	r3, r3, #16
    c290:	2b00      	cmp	r3, #0
    c292:	d001      	beq.n	c298 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    c294:	2310      	movs	r3, #16
    c296:	e001      	b.n	c29c <usbdc_get_state+0x18>
	}
	return usbdc.state;
    c298:	4b03      	ldr	r3, [pc, #12]	; (c2a8 <usbdc_get_state+0x24>)
    c29a:	7e9b      	ldrb	r3, [r3, #26]
}
    c29c:	4618      	mov	r0, r3
    c29e:	46bd      	mov	sp, r7
    c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2a4:	4770      	bx	lr
    c2a6:	bf00      	nop
    c2a8:	20000b00 	.word	0x20000b00

0000c2ac <usb_get_u16>:
{
    c2ac:	b480      	push	{r7}
    c2ae:	b083      	sub	sp, #12
    c2b0:	af00      	add	r7, sp, #0
    c2b2:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c2b4:	687b      	ldr	r3, [r7, #4]
    c2b6:	781b      	ldrb	r3, [r3, #0]
    c2b8:	b29a      	uxth	r2, r3
    c2ba:	687b      	ldr	r3, [r7, #4]
    c2bc:	3301      	adds	r3, #1
    c2be:	781b      	ldrb	r3, [r3, #0]
    c2c0:	b29b      	uxth	r3, r3
    c2c2:	021b      	lsls	r3, r3, #8
    c2c4:	b29b      	uxth	r3, r3
    c2c6:	4413      	add	r3, r2
    c2c8:	b29b      	uxth	r3, r3
}
    c2ca:	4618      	mov	r0, r3
    c2cc:	370c      	adds	r7, #12
    c2ce:	46bd      	mov	sp, r7
    c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2d4:	4770      	bx	lr

0000c2d6 <usb_desc_len>:
{
    c2d6:	b480      	push	{r7}
    c2d8:	b083      	sub	sp, #12
    c2da:	af00      	add	r7, sp, #0
    c2dc:	6078      	str	r0, [r7, #4]
	return desc[0];
    c2de:	687b      	ldr	r3, [r7, #4]
    c2e0:	781b      	ldrb	r3, [r3, #0]
}
    c2e2:	4618      	mov	r0, r3
    c2e4:	370c      	adds	r7, #12
    c2e6:	46bd      	mov	sp, r7
    c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2ec:	4770      	bx	lr

0000c2ee <usb_desc_type>:
{
    c2ee:	b480      	push	{r7}
    c2f0:	b083      	sub	sp, #12
    c2f2:	af00      	add	r7, sp, #0
    c2f4:	6078      	str	r0, [r7, #4]
	return desc[1];
    c2f6:	687b      	ldr	r3, [r7, #4]
    c2f8:	3301      	adds	r3, #1
    c2fa:	781b      	ldrb	r3, [r3, #0]
}
    c2fc:	4618      	mov	r0, r3
    c2fe:	370c      	adds	r7, #12
    c300:	46bd      	mov	sp, r7
    c302:	f85d 7b04 	ldr.w	r7, [sp], #4
    c306:	4770      	bx	lr

0000c308 <usb_desc_next>:
{
    c308:	b580      	push	{r7, lr}
    c30a:	b082      	sub	sp, #8
    c30c:	af00      	add	r7, sp, #0
    c30e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c310:	6878      	ldr	r0, [r7, #4]
    c312:	4b05      	ldr	r3, [pc, #20]	; (c328 <usb_desc_next+0x20>)
    c314:	4798      	blx	r3
    c316:	4603      	mov	r3, r0
    c318:	461a      	mov	r2, r3
    c31a:	687b      	ldr	r3, [r7, #4]
    c31c:	4413      	add	r3, r2
}
    c31e:	4618      	mov	r0, r3
    c320:	3708      	adds	r7, #8
    c322:	46bd      	mov	sp, r7
    c324:	bd80      	pop	{r7, pc}
    c326:	bf00      	nop
    c328:	0000c2d7 	.word	0x0000c2d7

0000c32c <usb_cfg_desc_total_len>:
{
    c32c:	b580      	push	{r7, lr}
    c32e:	b082      	sub	sp, #8
    c330:	af00      	add	r7, sp, #0
    c332:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c334:	687b      	ldr	r3, [r7, #4]
    c336:	3302      	adds	r3, #2
    c338:	4618      	mov	r0, r3
    c33a:	4b03      	ldr	r3, [pc, #12]	; (c348 <usb_cfg_desc_total_len+0x1c>)
    c33c:	4798      	blx	r3
    c33e:	4603      	mov	r3, r0
}
    c340:	4618      	mov	r0, r3
    c342:	3708      	adds	r7, #8
    c344:	46bd      	mov	sp, r7
    c346:	bd80      	pop	{r7, pc}
    c348:	0000c2ad 	.word	0x0000c2ad

0000c34c <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    c34c:	b580      	push	{r7, lr}
    c34e:	b082      	sub	sp, #8
    c350:	af00      	add	r7, sp, #0
    c352:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c354:	6878      	ldr	r0, [r7, #4]
    c356:	4b05      	ldr	r3, [pc, #20]	; (c36c <usb_cfg_desc_next+0x20>)
    c358:	4798      	blx	r3
    c35a:	4603      	mov	r3, r0
    c35c:	461a      	mov	r2, r3
    c35e:	687b      	ldr	r3, [r7, #4]
    c360:	4413      	add	r3, r2
}
    c362:	4618      	mov	r0, r3
    c364:	3708      	adds	r7, #8
    c366:	46bd      	mov	sp, r7
    c368:	bd80      	pop	{r7, pc}
    c36a:	bf00      	nop
    c36c:	0000c32d 	.word	0x0000c32d

0000c370 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    c370:	b580      	push	{r7, lr}
    c372:	b084      	sub	sp, #16
    c374:	af00      	add	r7, sp, #0
    c376:	60f8      	str	r0, [r7, #12]
    c378:	60b9      	str	r1, [r7, #8]
    c37a:	4613      	mov	r3, r2
    c37c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c37e:	e015      	b.n	c3ac <usb_find_desc+0x3c>
		_desc_len_check();
    c380:	68f8      	ldr	r0, [r7, #12]
    c382:	4b0f      	ldr	r3, [pc, #60]	; (c3c0 <usb_find_desc+0x50>)
    c384:	4798      	blx	r3
    c386:	4603      	mov	r3, r0
    c388:	2b01      	cmp	r3, #1
    c38a:	d801      	bhi.n	c390 <usb_find_desc+0x20>
    c38c:	2300      	movs	r3, #0
    c38e:	e012      	b.n	c3b6 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    c390:	68f8      	ldr	r0, [r7, #12]
    c392:	4b0c      	ldr	r3, [pc, #48]	; (c3c4 <usb_find_desc+0x54>)
    c394:	4798      	blx	r3
    c396:	4603      	mov	r3, r0
    c398:	461a      	mov	r2, r3
    c39a:	79fb      	ldrb	r3, [r7, #7]
    c39c:	4293      	cmp	r3, r2
    c39e:	d101      	bne.n	c3a4 <usb_find_desc+0x34>
			return desc;
    c3a0:	68fb      	ldr	r3, [r7, #12]
    c3a2:	e008      	b.n	c3b6 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    c3a4:	68f8      	ldr	r0, [r7, #12]
    c3a6:	4b08      	ldr	r3, [pc, #32]	; (c3c8 <usb_find_desc+0x58>)
    c3a8:	4798      	blx	r3
    c3aa:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c3ac:	68fa      	ldr	r2, [r7, #12]
    c3ae:	68bb      	ldr	r3, [r7, #8]
    c3b0:	429a      	cmp	r2, r3
    c3b2:	d3e5      	bcc.n	c380 <usb_find_desc+0x10>
	}
	return NULL;
    c3b4:	2300      	movs	r3, #0
}
    c3b6:	4618      	mov	r0, r3
    c3b8:	3710      	adds	r7, #16
    c3ba:	46bd      	mov	sp, r7
    c3bc:	bd80      	pop	{r7, pc}
    c3be:	bf00      	nop
    c3c0:	0000c2d7 	.word	0x0000c2d7
    c3c4:	0000c2ef 	.word	0x0000c2ef
    c3c8:	0000c309 	.word	0x0000c309

0000c3cc <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    c3cc:	b580      	push	{r7, lr}
    c3ce:	b082      	sub	sp, #8
    c3d0:	af00      	add	r7, sp, #0
    c3d2:	6078      	str	r0, [r7, #4]
    c3d4:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c3d6:	e019      	b.n	c40c <usb_find_ep_desc+0x40>
		_desc_len_check();
    c3d8:	6878      	ldr	r0, [r7, #4]
    c3da:	4b12      	ldr	r3, [pc, #72]	; (c424 <usb_find_ep_desc+0x58>)
    c3dc:	4798      	blx	r3
    c3de:	4603      	mov	r3, r0
    c3e0:	2b01      	cmp	r3, #1
    c3e2:	d801      	bhi.n	c3e8 <usb_find_ep_desc+0x1c>
    c3e4:	2300      	movs	r3, #0
    c3e6:	e018      	b.n	c41a <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c3e8:	6878      	ldr	r0, [r7, #4]
    c3ea:	4b0f      	ldr	r3, [pc, #60]	; (c428 <usb_find_ep_desc+0x5c>)
    c3ec:	4798      	blx	r3
    c3ee:	4603      	mov	r3, r0
    c3f0:	2b04      	cmp	r3, #4
    c3f2:	d010      	beq.n	c416 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c3f4:	6878      	ldr	r0, [r7, #4]
    c3f6:	4b0c      	ldr	r3, [pc, #48]	; (c428 <usb_find_ep_desc+0x5c>)
    c3f8:	4798      	blx	r3
    c3fa:	4603      	mov	r3, r0
    c3fc:	2b05      	cmp	r3, #5
    c3fe:	d101      	bne.n	c404 <usb_find_ep_desc+0x38>
			return desc;
    c400:	687b      	ldr	r3, [r7, #4]
    c402:	e00a      	b.n	c41a <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    c404:	6878      	ldr	r0, [r7, #4]
    c406:	4b09      	ldr	r3, [pc, #36]	; (c42c <usb_find_ep_desc+0x60>)
    c408:	4798      	blx	r3
    c40a:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    c40c:	687a      	ldr	r2, [r7, #4]
    c40e:	683b      	ldr	r3, [r7, #0]
    c410:	429a      	cmp	r2, r3
    c412:	d3e1      	bcc.n	c3d8 <usb_find_ep_desc+0xc>
    c414:	e000      	b.n	c418 <usb_find_ep_desc+0x4c>
			break;
    c416:	bf00      	nop
	}
	return NULL;
    c418:	2300      	movs	r3, #0
}
    c41a:	4618      	mov	r0, r3
    c41c:	3708      	adds	r7, #8
    c41e:	46bd      	mov	sp, r7
    c420:	bd80      	pop	{r7, pc}
    c422:	bf00      	nop
    c424:	0000c2d7 	.word	0x0000c2d7
    c428:	0000c2ef 	.word	0x0000c2ef
    c42c:	0000c309 	.word	0x0000c309

0000c430 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c430:	b580      	push	{r7, lr}
    c432:	b084      	sub	sp, #16
    c434:	af00      	add	r7, sp, #0
    c436:	60f8      	str	r0, [r7, #12]
    c438:	60b9      	str	r1, [r7, #8]
    c43a:	4613      	mov	r3, r2
    c43c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c43e:	2202      	movs	r2, #2
    c440:	68b9      	ldr	r1, [r7, #8]
    c442:	68f8      	ldr	r0, [r7, #12]
    c444:	4b15      	ldr	r3, [pc, #84]	; (c49c <usb_find_cfg_desc+0x6c>)
    c446:	4798      	blx	r3
    c448:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    c44a:	68fb      	ldr	r3, [r7, #12]
    c44c:	2b00      	cmp	r3, #0
    c44e:	d11a      	bne.n	c486 <usb_find_cfg_desc+0x56>
		return NULL;
    c450:	2300      	movs	r3, #0
    c452:	e01f      	b.n	c494 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    c454:	68f8      	ldr	r0, [r7, #12]
    c456:	4b12      	ldr	r3, [pc, #72]	; (c4a0 <usb_find_cfg_desc+0x70>)
    c458:	4798      	blx	r3
    c45a:	4603      	mov	r3, r0
    c45c:	2b01      	cmp	r3, #1
    c45e:	d801      	bhi.n	c464 <usb_find_cfg_desc+0x34>
    c460:	2300      	movs	r3, #0
    c462:	e017      	b.n	c494 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    c464:	68fb      	ldr	r3, [r7, #12]
    c466:	3301      	adds	r3, #1
    c468:	781b      	ldrb	r3, [r3, #0]
    c46a:	2b02      	cmp	r3, #2
    c46c:	d110      	bne.n	c490 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    c46e:	68fb      	ldr	r3, [r7, #12]
    c470:	3305      	adds	r3, #5
    c472:	781b      	ldrb	r3, [r3, #0]
    c474:	79fa      	ldrb	r2, [r7, #7]
    c476:	429a      	cmp	r2, r3
    c478:	d101      	bne.n	c47e <usb_find_cfg_desc+0x4e>
			return desc;
    c47a:	68fb      	ldr	r3, [r7, #12]
    c47c:	e00a      	b.n	c494 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    c47e:	68f8      	ldr	r0, [r7, #12]
    c480:	4b08      	ldr	r3, [pc, #32]	; (c4a4 <usb_find_cfg_desc+0x74>)
    c482:	4798      	blx	r3
    c484:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c486:	68fa      	ldr	r2, [r7, #12]
    c488:	68bb      	ldr	r3, [r7, #8]
    c48a:	429a      	cmp	r2, r3
    c48c:	d3e2      	bcc.n	c454 <usb_find_cfg_desc+0x24>
    c48e:	e000      	b.n	c492 <usb_find_cfg_desc+0x62>
			break;
    c490:	bf00      	nop
	}
	return NULL;
    c492:	2300      	movs	r3, #0
}
    c494:	4618      	mov	r0, r3
    c496:	3710      	adds	r7, #16
    c498:	46bd      	mov	sp, r7
    c49a:	bd80      	pop	{r7, pc}
    c49c:	0000c371 	.word	0x0000c371
    c4a0:	0000c2d7 	.word	0x0000c2d7
    c4a4:	0000c34d 	.word	0x0000c34d

0000c4a8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    c4a8:	b580      	push	{r7, lr}
    c4aa:	b086      	sub	sp, #24
    c4ac:	af00      	add	r7, sp, #0
    c4ae:	60f8      	str	r0, [r7, #12]
    c4b0:	60b9      	str	r1, [r7, #8]
    c4b2:	4613      	mov	r3, r2
    c4b4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c4b6:	2300      	movs	r3, #0
    c4b8:	75fb      	strb	r3, [r7, #23]
    c4ba:	e020      	b.n	c4fe <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    c4bc:	2203      	movs	r2, #3
    c4be:	68b9      	ldr	r1, [r7, #8]
    c4c0:	68f8      	ldr	r0, [r7, #12]
    c4c2:	4b13      	ldr	r3, [pc, #76]	; (c510 <usb_find_str_desc+0x68>)
    c4c4:	4798      	blx	r3
    c4c6:	60f8      	str	r0, [r7, #12]
		if (desc) {
    c4c8:	68fb      	ldr	r3, [r7, #12]
    c4ca:	2b00      	cmp	r3, #0
    c4cc:	d015      	beq.n	c4fa <usb_find_str_desc+0x52>
			_desc_len_check();
    c4ce:	68f8      	ldr	r0, [r7, #12]
    c4d0:	4b10      	ldr	r3, [pc, #64]	; (c514 <usb_find_str_desc+0x6c>)
    c4d2:	4798      	blx	r3
    c4d4:	4603      	mov	r3, r0
    c4d6:	2b01      	cmp	r3, #1
    c4d8:	d801      	bhi.n	c4de <usb_find_str_desc+0x36>
    c4da:	2300      	movs	r3, #0
    c4dc:	e014      	b.n	c508 <usb_find_str_desc+0x60>
			if (i == str_index) {
    c4de:	7dfa      	ldrb	r2, [r7, #23]
    c4e0:	79fb      	ldrb	r3, [r7, #7]
    c4e2:	429a      	cmp	r2, r3
    c4e4:	d101      	bne.n	c4ea <usb_find_str_desc+0x42>
				return desc;
    c4e6:	68fb      	ldr	r3, [r7, #12]
    c4e8:	e00e      	b.n	c508 <usb_find_str_desc+0x60>
			}
			i++;
    c4ea:	7dfb      	ldrb	r3, [r7, #23]
    c4ec:	3301      	adds	r3, #1
    c4ee:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    c4f0:	68f8      	ldr	r0, [r7, #12]
    c4f2:	4b09      	ldr	r3, [pc, #36]	; (c518 <usb_find_str_desc+0x70>)
    c4f4:	4798      	blx	r3
    c4f6:	60f8      	str	r0, [r7, #12]
    c4f8:	e001      	b.n	c4fe <usb_find_str_desc+0x56>
		} else {
			return NULL;
    c4fa:	2300      	movs	r3, #0
    c4fc:	e004      	b.n	c508 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    c4fe:	68fa      	ldr	r2, [r7, #12]
    c500:	68bb      	ldr	r3, [r7, #8]
    c502:	429a      	cmp	r2, r3
    c504:	d3da      	bcc.n	c4bc <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    c506:	2300      	movs	r3, #0
}
    c508:	4618      	mov	r0, r3
    c50a:	3718      	adds	r7, #24
    c50c:	46bd      	mov	sp, r7
    c50e:	bd80      	pop	{r7, pc}
    c510:	0000c371 	.word	0x0000c371
    c514:	0000c2d7 	.word	0x0000c2d7
    c518:	0000c309 	.word	0x0000c309

0000c51c <_ZL15I2C_tx_completeP16i2c_m_async_desc>:
#include "I2C_Asyn_Class.h"


I2C_Asyn_Class	*ptrI2C_Asyn_Class;
static void I2C_tx_complete(struct i2c_m_async_desc *const i2c)
{
    c51c:	b480      	push	{r7}
    c51e:	b083      	sub	sp, #12
    c520:	af00      	add	r7, sp, #0
    c522:	6078      	str	r0, [r7, #4]

	ptrI2C_Asyn_Class->txReady=true;
    c524:	4b04      	ldr	r3, [pc, #16]	; (c538 <_ZL15I2C_tx_completeP16i2c_m_async_desc+0x1c>)
    c526:	681b      	ldr	r3, [r3, #0]
    c528:	2201      	movs	r2, #1
    c52a:	701a      	strb	r2, [r3, #0]

}
    c52c:	bf00      	nop
    c52e:	370c      	adds	r7, #12
    c530:	46bd      	mov	sp, r7
    c532:	bc80      	pop	{r7}
    c534:	4770      	bx	lr
    c536:	bf00      	nop
    c538:	20000b20 	.word	0x20000b20

0000c53c <_ZL15I2C_rx_completeP16i2c_m_async_desc>:
 static void I2C_rx_complete(struct i2c_m_async_desc *const i2c)
{
    c53c:	b480      	push	{r7}
    c53e:	b083      	sub	sp, #12
    c540:	af00      	add	r7, sp, #0
    c542:	6078      	str	r0, [r7, #4]
	ptrI2C_Asyn_Class->rxReady=true;
    c544:	4b04      	ldr	r3, [pc, #16]	; (c558 <_ZL15I2C_rx_completeP16i2c_m_async_desc+0x1c>)
    c546:	681b      	ldr	r3, [r3, #0]
    c548:	2201      	movs	r2, #1
    c54a:	705a      	strb	r2, [r3, #1]
}
    c54c:	bf00      	nop
    c54e:	370c      	adds	r7, #12
    c550:	46bd      	mov	sp, r7
    c552:	bc80      	pop	{r7}
    c554:	4770      	bx	lr
    c556:	bf00      	nop
    c558:	20000b20 	.word	0x20000b20

0000c55c <_ZL18I2C_error_transferP16i2c_m_async_desc>:
 static void I2C_error_transfer(struct i2c_m_async_desc *const i2c)
 {
    c55c:	b580      	push	{r7, lr}
    c55e:	b082      	sub	sp, #8
    c560:	af00      	add	r7, sp, #0
    c562:	6078      	str	r0, [r7, #4]

		ptrI2C_Asyn_Class->Clear_ack();
    c564:	4b08      	ldr	r3, [pc, #32]	; (c588 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
    c566:	681b      	ldr	r3, [r3, #0]
    c568:	4618      	mov	r0, r3
    c56a:	4b08      	ldr	r3, [pc, #32]	; (c58c <_ZL18I2C_error_transferP16i2c_m_async_desc+0x30>)
    c56c:	4798      	blx	r3
		ptrI2C_Asyn_Class->txReady=true;
    c56e:	4b06      	ldr	r3, [pc, #24]	; (c588 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
    c570:	681b      	ldr	r3, [r3, #0]
    c572:	2201      	movs	r2, #1
    c574:	701a      	strb	r2, [r3, #0]
		ptrI2C_Asyn_Class->rxReady=true;
    c576:	4b04      	ldr	r3, [pc, #16]	; (c588 <_ZL18I2C_error_transferP16i2c_m_async_desc+0x2c>)
    c578:	681b      	ldr	r3, [r3, #0]
    c57a:	2201      	movs	r2, #1
    c57c:	705a      	strb	r2, [r3, #1]
 }
    c57e:	bf00      	nop
    c580:	3708      	adds	r7, #8
    c582:	46bd      	mov	sp, r7
    c584:	bd80      	pop	{r7, pc}
    c586:	bf00      	nop
    c588:	20000b20 	.word	0x20000b20
    c58c:	0000c741 	.word	0x0000c741

0000c590 <_ZN14I2C_Asyn_ClassC1Ev>:

// default constructor
I2C_Asyn_Class::I2C_Asyn_Class()
    c590:	b480      	push	{r7}
    c592:	b083      	sub	sp, #12
    c594:	af00      	add	r7, sp, #0
    c596:	6078      	str	r0, [r7, #4]
{
	ptrI2CAsynDescr=&I2C_EEPROM;
    c598:	687b      	ldr	r3, [r7, #4]
    c59a:	4a05      	ldr	r2, [pc, #20]	; (c5b0 <_ZN14I2C_Asyn_ClassC1Ev+0x20>)
    c59c:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
    c59e:	4a05      	ldr	r2, [pc, #20]	; (c5b4 <_ZN14I2C_Asyn_ClassC1Ev+0x24>)
    c5a0:	687b      	ldr	r3, [r7, #4]
    c5a2:	6013      	str	r3, [r2, #0]
} //I2C_Asyn_Class
    c5a4:	687b      	ldr	r3, [r7, #4]
    c5a6:	4618      	mov	r0, r3
    c5a8:	370c      	adds	r7, #12
    c5aa:	46bd      	mov	sp, r7
    c5ac:	bc80      	pop	{r7}
    c5ae:	4770      	bx	lr
    c5b0:	20000c7c 	.word	0x20000c7c
    c5b4:	20000b20 	.word	0x20000b20

0000c5b8 <_ZN14I2C_Asyn_ClassD1Ev>:
	ptrI2CAsynDescr=i2c_a;
	ptrI2C_Asyn_Class=this;
} //I2C_Asyn_Class

// default destructor
I2C_Asyn_Class::~I2C_Asyn_Class()
    c5b8:	b480      	push	{r7}
    c5ba:	b083      	sub	sp, #12
    c5bc:	af00      	add	r7, sp, #0
    c5be:	6078      	str	r0, [r7, #4]
{
} //~I2C_Asyn_Class
    c5c0:	687b      	ldr	r3, [r7, #4]
    c5c2:	4618      	mov	r0, r3
    c5c4:	370c      	adds	r7, #12
    c5c6:	46bd      	mov	sp, r7
    c5c8:	bc80      	pop	{r7}
    c5ca:	4770      	bx	lr

0000c5cc <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc>:

void	I2C_Asyn_Class::Set_descriptor(i2c_m_async_desc * i2c_a){
    c5cc:	b480      	push	{r7}
    c5ce:	b083      	sub	sp, #12
    c5d0:	af00      	add	r7, sp, #0
    c5d2:	6078      	str	r0, [r7, #4]
    c5d4:	6039      	str	r1, [r7, #0]
	ptrI2CAsynDescr=i2c_a;
    c5d6:	687b      	ldr	r3, [r7, #4]
    c5d8:	683a      	ldr	r2, [r7, #0]
    c5da:	609a      	str	r2, [r3, #8]
	ptrI2C_Asyn_Class=this;
    c5dc:	4a03      	ldr	r2, [pc, #12]	; (c5ec <_ZN14I2C_Asyn_Class14Set_descriptorEP16i2c_m_async_desc+0x20>)
    c5de:	687b      	ldr	r3, [r7, #4]
    c5e0:	6013      	str	r3, [r2, #0]
}
    c5e2:	bf00      	nop
    c5e4:	370c      	adds	r7, #12
    c5e6:	46bd      	mov	sp, r7
    c5e8:	bc80      	pop	{r7}
    c5ea:	4770      	bx	lr
    c5ec:	20000b20 	.word	0x20000b20

0000c5f0 <_ZN14I2C_Asyn_Class4InitEv>:

uint8_t	I2C_Asyn_Class::Init(void){
    c5f0:	b580      	push	{r7, lr}
    c5f2:	b084      	sub	sp, #16
    c5f4:	af00      	add	r7, sp, #0
    c5f6:	6078      	str	r0, [r7, #4]
	

	i2c_m_async_get_io_descriptor(ptrI2CAsynDescr, &I2C_io);
    c5f8:	687b      	ldr	r3, [r7, #4]
    c5fa:	689a      	ldr	r2, [r3, #8]
    c5fc:	687b      	ldr	r3, [r7, #4]
    c5fe:	3304      	adds	r3, #4
    c600:	4619      	mov	r1, r3
    c602:	4610      	mov	r0, r2
    c604:	4b14      	ldr	r3, [pc, #80]	; (c658 <_ZN14I2C_Asyn_Class4InitEv+0x68>)
    c606:	4798      	blx	r3
  	uint8_t	ena=(uint8_t)i2c_m_async_enable(ptrI2CAsynDescr);
    c608:	687b      	ldr	r3, [r7, #4]
    c60a:	689b      	ldr	r3, [r3, #8]
    c60c:	4618      	mov	r0, r3
    c60e:	4b13      	ldr	r3, [pc, #76]	; (c65c <_ZN14I2C_Asyn_Class4InitEv+0x6c>)
    c610:	4798      	blx	r3
    c612:	4603      	mov	r3, r0
    c614:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_TX_COMPLETE, (FUNC_PTR)I2C_tx_complete);
    c616:	687b      	ldr	r3, [r7, #4]
    c618:	689b      	ldr	r3, [r3, #8]
    c61a:	4a11      	ldr	r2, [pc, #68]	; (c660 <_ZN14I2C_Asyn_Class4InitEv+0x70>)
    c61c:	2101      	movs	r1, #1
    c61e:	4618      	mov	r0, r3
    c620:	4b10      	ldr	r3, [pc, #64]	; (c664 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
    c622:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_RX_COMPLETE, (FUNC_PTR)I2C_rx_complete);
    c624:	687b      	ldr	r3, [r7, #4]
    c626:	689b      	ldr	r3, [r3, #8]
    c628:	4a0f      	ldr	r2, [pc, #60]	; (c668 <_ZN14I2C_Asyn_Class4InitEv+0x78>)
    c62a:	2102      	movs	r1, #2
    c62c:	4618      	mov	r0, r3
    c62e:	4b0d      	ldr	r3, [pc, #52]	; (c664 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
    c630:	4798      	blx	r3
	i2c_m_async_register_callback(ptrI2CAsynDescr, I2C_M_ASYNC_ERROR, (FUNC_PTR)I2C_error_transfer);
    c632:	687b      	ldr	r3, [r7, #4]
    c634:	689b      	ldr	r3, [r3, #8]
    c636:	4a0d      	ldr	r2, [pc, #52]	; (c66c <_ZN14I2C_Asyn_Class4InitEv+0x7c>)
    c638:	2100      	movs	r1, #0
    c63a:	4618      	mov	r0, r3
    c63c:	4b09      	ldr	r3, [pc, #36]	; (c664 <_ZN14I2C_Asyn_Class4InitEv+0x74>)
    c63e:	4798      	blx	r3
	//	i2c_m_async_set_slaveaddr(&I2C_A, 0x12, I2C_M_SEVEN);
	txReady=true;
    c640:	687b      	ldr	r3, [r7, #4]
    c642:	2201      	movs	r2, #1
    c644:	701a      	strb	r2, [r3, #0]
	rxReady=true;
    c646:	687b      	ldr	r3, [r7, #4]
    c648:	2201      	movs	r2, #1
    c64a:	705a      	strb	r2, [r3, #1]
	return ena;
    c64c:	7bfb      	ldrb	r3, [r7, #15]
	
}
    c64e:	4618      	mov	r0, r3
    c650:	3710      	adds	r7, #16
    c652:	46bd      	mov	sp, r7
    c654:	bd80      	pop	{r7, pc}
    c656:	bf00      	nop
    c658:	00002003 	.word	0x00002003
    c65c:	00001f15 	.word	0x00001f15
    c660:	0000c51d 	.word	0x0000c51d
    c664:	00001fbb 	.word	0x00001fbb
    c668:	0000c53d 	.word	0x0000c53d
    c66c:	0000c55d 	.word	0x0000c55d

0000c670 <_ZN14I2C_Asyn_Class4InitEh>:
uint8_t	I2C_Asyn_Class::Init(uint8_t add){
    c670:	b580      	push	{r7, lr}
    c672:	b084      	sub	sp, #16
    c674:	af00      	add	r7, sp, #0
    c676:	6078      	str	r0, [r7, #4]
    c678:	460b      	mov	r3, r1
    c67a:	70fb      	strb	r3, [r7, #3]
	uint8_t ena=Init();
    c67c:	6878      	ldr	r0, [r7, #4]
    c67e:	4b0c      	ldr	r3, [pc, #48]	; (c6b0 <_ZN14I2C_Asyn_Class4InitEh+0x40>)
    c680:	4798      	blx	r3
    c682:	4603      	mov	r3, r0
    c684:	73fb      	strb	r3, [r7, #15]
	i2c_m_async_set_slaveaddr(ptrI2CAsynDescr,(int16_t)add, I2C_M_SEVEN);
    c686:	687b      	ldr	r3, [r7, #4]
    c688:	689b      	ldr	r3, [r3, #8]
    c68a:	78fa      	ldrb	r2, [r7, #3]
    c68c:	b211      	sxth	r1, r2
    c68e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c692:	4618      	mov	r0, r3
    c694:	4b07      	ldr	r3, [pc, #28]	; (c6b4 <_ZN14I2C_Asyn_Class4InitEh+0x44>)
    c696:	4798      	blx	r3
	txReady=true;
    c698:	687b      	ldr	r3, [r7, #4]
    c69a:	2201      	movs	r2, #1
    c69c:	701a      	strb	r2, [r3, #0]
	rxReady=true;
    c69e:	687b      	ldr	r3, [r7, #4]
    c6a0:	2201      	movs	r2, #1
    c6a2:	705a      	strb	r2, [r3, #1]
	return ena;
    c6a4:	7bfb      	ldrb	r3, [r7, #15]
}
    c6a6:	4618      	mov	r0, r3
    c6a8:	3710      	adds	r7, #16
    c6aa:	46bd      	mov	sp, r7
    c6ac:	bd80      	pop	{r7, pc}
    c6ae:	bf00      	nop
    c6b0:	0000c5f1 	.word	0x0000c5f1
    c6b4:	00001f81 	.word	0x00001f81

0000c6b8 <_ZN14I2C_Asyn_Class5WriteEPht>:
		delay_ms(1);
	}
	return w;
	
}
int32_t I2C_Asyn_Class::Write(uint8_t* buffer, uint16_t lenght){
    c6b8:	b580      	push	{r7, lr}
    c6ba:	b084      	sub	sp, #16
    c6bc:	af00      	add	r7, sp, #0
    c6be:	60f8      	str	r0, [r7, #12]
    c6c0:	60b9      	str	r1, [r7, #8]
    c6c2:	4613      	mov	r3, r2
    c6c4:	80fb      	strh	r3, [r7, #6]
	while(!txReady);
    c6c6:	68fb      	ldr	r3, [r7, #12]
    c6c8:	781b      	ldrb	r3, [r3, #0]
    c6ca:	b2db      	uxtb	r3, r3
    c6cc:	f083 0301 	eor.w	r3, r3, #1
    c6d0:	b2db      	uxtb	r3, r3
    c6d2:	2b00      	cmp	r3, #0
    c6d4:	d000      	beq.n	c6d8 <_ZN14I2C_Asyn_Class5WriteEPht+0x20>
    c6d6:	e7f6      	b.n	c6c6 <_ZN14I2C_Asyn_Class5WriteEPht+0xe>
	txReady=false;
    c6d8:	68fb      	ldr	r3, [r7, #12]
    c6da:	2200      	movs	r2, #0
    c6dc:	701a      	strb	r2, [r3, #0]
	return io_write(I2C_io, buffer, lenght);
    c6de:	68fb      	ldr	r3, [r7, #12]
    c6e0:	685b      	ldr	r3, [r3, #4]
    c6e2:	88fa      	ldrh	r2, [r7, #6]
    c6e4:	68b9      	ldr	r1, [r7, #8]
    c6e6:	4618      	mov	r0, r3
    c6e8:	4b03      	ldr	r3, [pc, #12]	; (c6f8 <_ZN14I2C_Asyn_Class5WriteEPht+0x40>)
    c6ea:	4798      	blx	r3
    c6ec:	4603      	mov	r3, r0
}
    c6ee:	4618      	mov	r0, r3
    c6f0:	3710      	adds	r7, #16
    c6f2:	46bd      	mov	sp, r7
    c6f4:	bd80      	pop	{r7, pc}
    c6f6:	bf00      	nop
    c6f8:	0000c761 	.word	0x0000c761

0000c6fc <_ZN14I2C_Asyn_Class4ReadEPht>:
	rxReady=false;
	int32_t r= i2c_m_async_cmd_read(ptrI2CAsynDescr, cmd, value);
	while(!rxReady);
	return r;
}
int32_t I2C_Asyn_Class::Read(uint8_t* buffer, uint16_t lenght){
    c6fc:	b580      	push	{r7, lr}
    c6fe:	b084      	sub	sp, #16
    c700:	af00      	add	r7, sp, #0
    c702:	60f8      	str	r0, [r7, #12]
    c704:	60b9      	str	r1, [r7, #8]
    c706:	4613      	mov	r3, r2
    c708:	80fb      	strh	r3, [r7, #6]
	
		while(!rxReady);
    c70a:	68fb      	ldr	r3, [r7, #12]
    c70c:	785b      	ldrb	r3, [r3, #1]
    c70e:	b2db      	uxtb	r3, r3
    c710:	f083 0301 	eor.w	r3, r3, #1
    c714:	b2db      	uxtb	r3, r3
    c716:	2b00      	cmp	r3, #0
    c718:	d000      	beq.n	c71c <_ZN14I2C_Asyn_Class4ReadEPht+0x20>
    c71a:	e7f6      	b.n	c70a <_ZN14I2C_Asyn_Class4ReadEPht+0xe>
		rxReady=false;
    c71c:	68fb      	ldr	r3, [r7, #12]
    c71e:	2200      	movs	r2, #0
    c720:	705a      	strb	r2, [r3, #1]
		return io_read(I2C_io, buffer, lenght);
    c722:	68fb      	ldr	r3, [r7, #12]
    c724:	685b      	ldr	r3, [r3, #4]
    c726:	88fa      	ldrh	r2, [r7, #6]
    c728:	68b9      	ldr	r1, [r7, #8]
    c72a:	4618      	mov	r0, r3
    c72c:	4b03      	ldr	r3, [pc, #12]	; (c73c <_ZN14I2C_Asyn_Class4ReadEPht+0x40>)
    c72e:	4798      	blx	r3
    c730:	4603      	mov	r3, r0
}
    c732:	4618      	mov	r0, r3
    c734:	3710      	adds	r7, #16
    c736:	46bd      	mov	sp, r7
    c738:	bd80      	pop	{r7, pc}
    c73a:	bf00      	nop
    c73c:	0000c7b1 	.word	0x0000c7b1

0000c740 <_ZN14I2C_Asyn_Class9Clear_ackEv>:
int32_t I2C_Asyn_Class::Send_stop(void){
    while(!txReady){};
	//txReady=false;
	return i2c_m_async_send_stop(ptrI2CAsynDescr);
}
 volatile bool I2C_Asyn_Class::Clear_ack(void){
    c740:	b480      	push	{r7}
    c742:	b083      	sub	sp, #12
    c744:	af00      	add	r7, sp, #0
    c746:	6078      	str	r0, [r7, #4]
	 ack=false;
    c748:	687b      	ldr	r3, [r7, #4]
    c74a:	2200      	movs	r2, #0
    c74c:	709a      	strb	r2, [r3, #2]
	 return ack;
    c74e:	687b      	ldr	r3, [r7, #4]
    c750:	789b      	ldrb	r3, [r3, #2]
    c752:	b2db      	uxtb	r3, r3
    c754:	4618      	mov	r0, r3
    c756:	370c      	adds	r7, #12
    c758:	46bd      	mov	sp, r7
    c75a:	bc80      	pop	{r7}
    c75c:	4770      	bx	lr
	...

0000c760 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    c760:	b580      	push	{r7, lr}
    c762:	b084      	sub	sp, #16
    c764:	af00      	add	r7, sp, #0
    c766:	60f8      	str	r0, [r7, #12]
    c768:	60b9      	str	r1, [r7, #8]
    c76a:	4613      	mov	r3, r2
    c76c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    c76e:	68fb      	ldr	r3, [r7, #12]
    c770:	2b00      	cmp	r3, #0
    c772:	d004      	beq.n	c77e <io_write+0x1e>
    c774:	68bb      	ldr	r3, [r7, #8]
    c776:	2b00      	cmp	r3, #0
    c778:	d001      	beq.n	c77e <io_write+0x1e>
    c77a:	2301      	movs	r3, #1
    c77c:	e000      	b.n	c780 <io_write+0x20>
    c77e:	2300      	movs	r3, #0
    c780:	f003 0301 	and.w	r3, r3, #1
    c784:	b2db      	uxtb	r3, r3
    c786:	2234      	movs	r2, #52	; 0x34
    c788:	4907      	ldr	r1, [pc, #28]	; (c7a8 <io_write+0x48>)
    c78a:	4618      	mov	r0, r3
    c78c:	4b07      	ldr	r3, [pc, #28]	; (c7ac <io_write+0x4c>)
    c78e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    c790:	68fb      	ldr	r3, [r7, #12]
    c792:	681b      	ldr	r3, [r3, #0]
    c794:	88fa      	ldrh	r2, [r7, #6]
    c796:	68b9      	ldr	r1, [r7, #8]
    c798:	68f8      	ldr	r0, [r7, #12]
    c79a:	4798      	blx	r3
    c79c:	4603      	mov	r3, r0
}
    c79e:	4618      	mov	r0, r3
    c7a0:	3710      	adds	r7, #16
    c7a2:	46bd      	mov	sp, r7
    c7a4:	bd80      	pop	{r7, pc}
    c7a6:	bf00      	nop
    c7a8:	0000cf6c 	.word	0x0000cf6c
    c7ac:	00003249 	.word	0x00003249

0000c7b0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    c7b0:	b580      	push	{r7, lr}
    c7b2:	b084      	sub	sp, #16
    c7b4:	af00      	add	r7, sp, #0
    c7b6:	60f8      	str	r0, [r7, #12]
    c7b8:	60b9      	str	r1, [r7, #8]
    c7ba:	4613      	mov	r3, r2
    c7bc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    c7be:	68fb      	ldr	r3, [r7, #12]
    c7c0:	2b00      	cmp	r3, #0
    c7c2:	d004      	beq.n	c7ce <io_read+0x1e>
    c7c4:	68bb      	ldr	r3, [r7, #8]
    c7c6:	2b00      	cmp	r3, #0
    c7c8:	d001      	beq.n	c7ce <io_read+0x1e>
    c7ca:	2301      	movs	r3, #1
    c7cc:	e000      	b.n	c7d0 <io_read+0x20>
    c7ce:	2300      	movs	r3, #0
    c7d0:	f003 0301 	and.w	r3, r3, #1
    c7d4:	b2db      	uxtb	r3, r3
    c7d6:	223d      	movs	r2, #61	; 0x3d
    c7d8:	4907      	ldr	r1, [pc, #28]	; (c7f8 <io_read+0x48>)
    c7da:	4618      	mov	r0, r3
    c7dc:	4b07      	ldr	r3, [pc, #28]	; (c7fc <io_read+0x4c>)
    c7de:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    c7e0:	68fb      	ldr	r3, [r7, #12]
    c7e2:	685b      	ldr	r3, [r3, #4]
    c7e4:	88fa      	ldrh	r2, [r7, #6]
    c7e6:	68b9      	ldr	r1, [r7, #8]
    c7e8:	68f8      	ldr	r0, [r7, #12]
    c7ea:	4798      	blx	r3
    c7ec:	4603      	mov	r3, r0
}
    c7ee:	4618      	mov	r0, r3
    c7f0:	3710      	adds	r7, #16
    c7f2:	46bd      	mov	sp, r7
    c7f4:	bd80      	pop	{r7, pc}
    c7f6:	bf00      	nop
    c7f8:	0000cf6c 	.word	0x0000cf6c
    c7fc:	00003249 	.word	0x00003249

0000c800 <__aeabi_atexit>:
    c800:	460b      	mov	r3, r1
    c802:	4601      	mov	r1, r0
    c804:	4618      	mov	r0, r3
    c806:	f000 b801 	b.w	c80c <__cxa_atexit>
    c80a:	bf00      	nop

0000c80c <__cxa_atexit>:
    c80c:	4613      	mov	r3, r2
    c80e:	460a      	mov	r2, r1
    c810:	4601      	mov	r1, r0
    c812:	2002      	movs	r0, #2
    c814:	f000 b91e 	b.w	ca54 <__register_exitproc>

0000c818 <ffs>:
    c818:	b140      	cbz	r0, c82c <ffs+0x14>
    c81a:	2300      	movs	r3, #0
    c81c:	fa40 f103 	asr.w	r1, r0, r3
    c820:	1c5a      	adds	r2, r3, #1
    c822:	07c9      	lsls	r1, r1, #31
    c824:	4613      	mov	r3, r2
    c826:	d5f9      	bpl.n	c81c <ffs+0x4>
    c828:	4610      	mov	r0, r2
    c82a:	4770      	bx	lr
    c82c:	4602      	mov	r2, r0
    c82e:	4610      	mov	r0, r2
    c830:	4770      	bx	lr
    c832:	bf00      	nop

0000c834 <__libc_init_array>:
    c834:	b570      	push	{r4, r5, r6, lr}
    c836:	4e0f      	ldr	r6, [pc, #60]	; (c874 <__libc_init_array+0x40>)
    c838:	4d0f      	ldr	r5, [pc, #60]	; (c878 <__libc_init_array+0x44>)
    c83a:	1b76      	subs	r6, r6, r5
    c83c:	10b6      	asrs	r6, r6, #2
    c83e:	bf18      	it	ne
    c840:	2400      	movne	r4, #0
    c842:	d005      	beq.n	c850 <__libc_init_array+0x1c>
    c844:	3401      	adds	r4, #1
    c846:	f855 3b04 	ldr.w	r3, [r5], #4
    c84a:	4798      	blx	r3
    c84c:	42a6      	cmp	r6, r4
    c84e:	d1f9      	bne.n	c844 <__libc_init_array+0x10>
    c850:	4e0a      	ldr	r6, [pc, #40]	; (c87c <__libc_init_array+0x48>)
    c852:	4d0b      	ldr	r5, [pc, #44]	; (c880 <__libc_init_array+0x4c>)
    c854:	1b76      	subs	r6, r6, r5
    c856:	f000 fb95 	bl	cf84 <_init>
    c85a:	10b6      	asrs	r6, r6, #2
    c85c:	bf18      	it	ne
    c85e:	2400      	movne	r4, #0
    c860:	d006      	beq.n	c870 <__libc_init_array+0x3c>
    c862:	3401      	adds	r4, #1
    c864:	f855 3b04 	ldr.w	r3, [r5], #4
    c868:	4798      	blx	r3
    c86a:	42a6      	cmp	r6, r4
    c86c:	d1f9      	bne.n	c862 <__libc_init_array+0x2e>
    c86e:	bd70      	pop	{r4, r5, r6, pc}
    c870:	bd70      	pop	{r4, r5, r6, pc}
    c872:	bf00      	nop
    c874:	0000cf90 	.word	0x0000cf90
    c878:	0000cf90 	.word	0x0000cf90
    c87c:	0000cf9c 	.word	0x0000cf9c
    c880:	0000cf90 	.word	0x0000cf90

0000c884 <memcpy>:
    c884:	4684      	mov	ip, r0
    c886:	ea41 0300 	orr.w	r3, r1, r0
    c88a:	f013 0303 	ands.w	r3, r3, #3
    c88e:	d16d      	bne.n	c96c <memcpy+0xe8>
    c890:	3a40      	subs	r2, #64	; 0x40
    c892:	d341      	bcc.n	c918 <memcpy+0x94>
    c894:	f851 3b04 	ldr.w	r3, [r1], #4
    c898:	f840 3b04 	str.w	r3, [r0], #4
    c89c:	f851 3b04 	ldr.w	r3, [r1], #4
    c8a0:	f840 3b04 	str.w	r3, [r0], #4
    c8a4:	f851 3b04 	ldr.w	r3, [r1], #4
    c8a8:	f840 3b04 	str.w	r3, [r0], #4
    c8ac:	f851 3b04 	ldr.w	r3, [r1], #4
    c8b0:	f840 3b04 	str.w	r3, [r0], #4
    c8b4:	f851 3b04 	ldr.w	r3, [r1], #4
    c8b8:	f840 3b04 	str.w	r3, [r0], #4
    c8bc:	f851 3b04 	ldr.w	r3, [r1], #4
    c8c0:	f840 3b04 	str.w	r3, [r0], #4
    c8c4:	f851 3b04 	ldr.w	r3, [r1], #4
    c8c8:	f840 3b04 	str.w	r3, [r0], #4
    c8cc:	f851 3b04 	ldr.w	r3, [r1], #4
    c8d0:	f840 3b04 	str.w	r3, [r0], #4
    c8d4:	f851 3b04 	ldr.w	r3, [r1], #4
    c8d8:	f840 3b04 	str.w	r3, [r0], #4
    c8dc:	f851 3b04 	ldr.w	r3, [r1], #4
    c8e0:	f840 3b04 	str.w	r3, [r0], #4
    c8e4:	f851 3b04 	ldr.w	r3, [r1], #4
    c8e8:	f840 3b04 	str.w	r3, [r0], #4
    c8ec:	f851 3b04 	ldr.w	r3, [r1], #4
    c8f0:	f840 3b04 	str.w	r3, [r0], #4
    c8f4:	f851 3b04 	ldr.w	r3, [r1], #4
    c8f8:	f840 3b04 	str.w	r3, [r0], #4
    c8fc:	f851 3b04 	ldr.w	r3, [r1], #4
    c900:	f840 3b04 	str.w	r3, [r0], #4
    c904:	f851 3b04 	ldr.w	r3, [r1], #4
    c908:	f840 3b04 	str.w	r3, [r0], #4
    c90c:	f851 3b04 	ldr.w	r3, [r1], #4
    c910:	f840 3b04 	str.w	r3, [r0], #4
    c914:	3a40      	subs	r2, #64	; 0x40
    c916:	d2bd      	bcs.n	c894 <memcpy+0x10>
    c918:	3230      	adds	r2, #48	; 0x30
    c91a:	d311      	bcc.n	c940 <memcpy+0xbc>
    c91c:	f851 3b04 	ldr.w	r3, [r1], #4
    c920:	f840 3b04 	str.w	r3, [r0], #4
    c924:	f851 3b04 	ldr.w	r3, [r1], #4
    c928:	f840 3b04 	str.w	r3, [r0], #4
    c92c:	f851 3b04 	ldr.w	r3, [r1], #4
    c930:	f840 3b04 	str.w	r3, [r0], #4
    c934:	f851 3b04 	ldr.w	r3, [r1], #4
    c938:	f840 3b04 	str.w	r3, [r0], #4
    c93c:	3a10      	subs	r2, #16
    c93e:	d2ed      	bcs.n	c91c <memcpy+0x98>
    c940:	320c      	adds	r2, #12
    c942:	d305      	bcc.n	c950 <memcpy+0xcc>
    c944:	f851 3b04 	ldr.w	r3, [r1], #4
    c948:	f840 3b04 	str.w	r3, [r0], #4
    c94c:	3a04      	subs	r2, #4
    c94e:	d2f9      	bcs.n	c944 <memcpy+0xc0>
    c950:	3204      	adds	r2, #4
    c952:	d008      	beq.n	c966 <memcpy+0xe2>
    c954:	07d2      	lsls	r2, r2, #31
    c956:	bf1c      	itt	ne
    c958:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c95c:	f800 3b01 	strbne.w	r3, [r0], #1
    c960:	d301      	bcc.n	c966 <memcpy+0xe2>
    c962:	880b      	ldrh	r3, [r1, #0]
    c964:	8003      	strh	r3, [r0, #0]
    c966:	4660      	mov	r0, ip
    c968:	4770      	bx	lr
    c96a:	bf00      	nop
    c96c:	2a08      	cmp	r2, #8
    c96e:	d313      	bcc.n	c998 <memcpy+0x114>
    c970:	078b      	lsls	r3, r1, #30
    c972:	d08d      	beq.n	c890 <memcpy+0xc>
    c974:	f010 0303 	ands.w	r3, r0, #3
    c978:	d08a      	beq.n	c890 <memcpy+0xc>
    c97a:	f1c3 0304 	rsb	r3, r3, #4
    c97e:	1ad2      	subs	r2, r2, r3
    c980:	07db      	lsls	r3, r3, #31
    c982:	bf1c      	itt	ne
    c984:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c988:	f800 3b01 	strbne.w	r3, [r0], #1
    c98c:	d380      	bcc.n	c890 <memcpy+0xc>
    c98e:	f831 3b02 	ldrh.w	r3, [r1], #2
    c992:	f820 3b02 	strh.w	r3, [r0], #2
    c996:	e77b      	b.n	c890 <memcpy+0xc>
    c998:	3a04      	subs	r2, #4
    c99a:	d3d9      	bcc.n	c950 <memcpy+0xcc>
    c99c:	3a01      	subs	r2, #1
    c99e:	f811 3b01 	ldrb.w	r3, [r1], #1
    c9a2:	f800 3b01 	strb.w	r3, [r0], #1
    c9a6:	d2f9      	bcs.n	c99c <memcpy+0x118>
    c9a8:	780b      	ldrb	r3, [r1, #0]
    c9aa:	7003      	strb	r3, [r0, #0]
    c9ac:	784b      	ldrb	r3, [r1, #1]
    c9ae:	7043      	strb	r3, [r0, #1]
    c9b0:	788b      	ldrb	r3, [r1, #2]
    c9b2:	7083      	strb	r3, [r0, #2]
    c9b4:	4660      	mov	r0, ip
    c9b6:	4770      	bx	lr

0000c9b8 <memset>:
    c9b8:	b470      	push	{r4, r5, r6}
    c9ba:	0786      	lsls	r6, r0, #30
    c9bc:	d046      	beq.n	ca4c <memset+0x94>
    c9be:	1e54      	subs	r4, r2, #1
    c9c0:	2a00      	cmp	r2, #0
    c9c2:	d041      	beq.n	ca48 <memset+0x90>
    c9c4:	b2ca      	uxtb	r2, r1
    c9c6:	4603      	mov	r3, r0
    c9c8:	e002      	b.n	c9d0 <memset+0x18>
    c9ca:	f114 34ff 	adds.w	r4, r4, #4294967295
    c9ce:	d33b      	bcc.n	ca48 <memset+0x90>
    c9d0:	f803 2b01 	strb.w	r2, [r3], #1
    c9d4:	079d      	lsls	r5, r3, #30
    c9d6:	d1f8      	bne.n	c9ca <memset+0x12>
    c9d8:	2c03      	cmp	r4, #3
    c9da:	d92e      	bls.n	ca3a <memset+0x82>
    c9dc:	b2cd      	uxtb	r5, r1
    c9de:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    c9e2:	2c0f      	cmp	r4, #15
    c9e4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    c9e8:	d919      	bls.n	ca1e <memset+0x66>
    c9ea:	f103 0210 	add.w	r2, r3, #16
    c9ee:	4626      	mov	r6, r4
    c9f0:	3e10      	subs	r6, #16
    c9f2:	2e0f      	cmp	r6, #15
    c9f4:	f842 5c10 	str.w	r5, [r2, #-16]
    c9f8:	f842 5c0c 	str.w	r5, [r2, #-12]
    c9fc:	f842 5c08 	str.w	r5, [r2, #-8]
    ca00:	f842 5c04 	str.w	r5, [r2, #-4]
    ca04:	f102 0210 	add.w	r2, r2, #16
    ca08:	d8f2      	bhi.n	c9f0 <memset+0x38>
    ca0a:	f1a4 0210 	sub.w	r2, r4, #16
    ca0e:	f022 020f 	bic.w	r2, r2, #15
    ca12:	f004 040f 	and.w	r4, r4, #15
    ca16:	3210      	adds	r2, #16
    ca18:	2c03      	cmp	r4, #3
    ca1a:	4413      	add	r3, r2
    ca1c:	d90d      	bls.n	ca3a <memset+0x82>
    ca1e:	461e      	mov	r6, r3
    ca20:	4622      	mov	r2, r4
    ca22:	3a04      	subs	r2, #4
    ca24:	2a03      	cmp	r2, #3
    ca26:	f846 5b04 	str.w	r5, [r6], #4
    ca2a:	d8fa      	bhi.n	ca22 <memset+0x6a>
    ca2c:	1f22      	subs	r2, r4, #4
    ca2e:	f022 0203 	bic.w	r2, r2, #3
    ca32:	3204      	adds	r2, #4
    ca34:	4413      	add	r3, r2
    ca36:	f004 0403 	and.w	r4, r4, #3
    ca3a:	b12c      	cbz	r4, ca48 <memset+0x90>
    ca3c:	b2c9      	uxtb	r1, r1
    ca3e:	441c      	add	r4, r3
    ca40:	f803 1b01 	strb.w	r1, [r3], #1
    ca44:	429c      	cmp	r4, r3
    ca46:	d1fb      	bne.n	ca40 <memset+0x88>
    ca48:	bc70      	pop	{r4, r5, r6}
    ca4a:	4770      	bx	lr
    ca4c:	4614      	mov	r4, r2
    ca4e:	4603      	mov	r3, r0
    ca50:	e7c2      	b.n	c9d8 <memset+0x20>
    ca52:	bf00      	nop

0000ca54 <__register_exitproc>:
    ca54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca58:	4d2c      	ldr	r5, [pc, #176]	; (cb0c <__register_exitproc+0xb8>)
    ca5a:	4606      	mov	r6, r0
    ca5c:	6828      	ldr	r0, [r5, #0]
    ca5e:	4698      	mov	r8, r3
    ca60:	460f      	mov	r7, r1
    ca62:	4691      	mov	r9, r2
    ca64:	f000 f882 	bl	cb6c <__retarget_lock_acquire_recursive>
    ca68:	4b29      	ldr	r3, [pc, #164]	; (cb10 <__register_exitproc+0xbc>)
    ca6a:	681c      	ldr	r4, [r3, #0]
    ca6c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ca70:	2b00      	cmp	r3, #0
    ca72:	d03e      	beq.n	caf2 <__register_exitproc+0x9e>
    ca74:	685a      	ldr	r2, [r3, #4]
    ca76:	2a1f      	cmp	r2, #31
    ca78:	dc1c      	bgt.n	cab4 <__register_exitproc+0x60>
    ca7a:	f102 0e01 	add.w	lr, r2, #1
    ca7e:	b176      	cbz	r6, ca9e <__register_exitproc+0x4a>
    ca80:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    ca84:	2401      	movs	r4, #1
    ca86:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    ca8a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    ca8e:	4094      	lsls	r4, r2
    ca90:	4320      	orrs	r0, r4
    ca92:	2e02      	cmp	r6, #2
    ca94:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    ca98:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    ca9c:	d023      	beq.n	cae6 <__register_exitproc+0x92>
    ca9e:	3202      	adds	r2, #2
    caa0:	f8c3 e004 	str.w	lr, [r3, #4]
    caa4:	6828      	ldr	r0, [r5, #0]
    caa6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    caaa:	f000 f861 	bl	cb70 <__retarget_lock_release_recursive>
    caae:	2000      	movs	r0, #0
    cab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cab4:	4b17      	ldr	r3, [pc, #92]	; (cb14 <__register_exitproc+0xc0>)
    cab6:	b30b      	cbz	r3, cafc <__register_exitproc+0xa8>
    cab8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    cabc:	f3af 8000 	nop.w
    cac0:	4603      	mov	r3, r0
    cac2:	b1d8      	cbz	r0, cafc <__register_exitproc+0xa8>
    cac4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    cac8:	6002      	str	r2, [r0, #0]
    caca:	2100      	movs	r1, #0
    cacc:	6041      	str	r1, [r0, #4]
    cace:	460a      	mov	r2, r1
    cad0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    cad4:	f04f 0e01 	mov.w	lr, #1
    cad8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    cadc:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    cae0:	2e00      	cmp	r6, #0
    cae2:	d0dc      	beq.n	ca9e <__register_exitproc+0x4a>
    cae4:	e7cc      	b.n	ca80 <__register_exitproc+0x2c>
    cae6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    caea:	430c      	orrs	r4, r1
    caec:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    caf0:	e7d5      	b.n	ca9e <__register_exitproc+0x4a>
    caf2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    caf6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    cafa:	e7bb      	b.n	ca74 <__register_exitproc+0x20>
    cafc:	6828      	ldr	r0, [r5, #0]
    cafe:	f000 f837 	bl	cb70 <__retarget_lock_release_recursive>
    cb02:	f04f 30ff 	mov.w	r0, #4294967295
    cb06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb0a:	bf00      	nop
    cb0c:	20000540 	.word	0x20000540
    cb10:	0000cf80 	.word	0x0000cf80
    cb14:	00000000 	.word	0x00000000

0000cb18 <register_fini>:
    cb18:	4b02      	ldr	r3, [pc, #8]	; (cb24 <register_fini+0xc>)
    cb1a:	b113      	cbz	r3, cb22 <register_fini+0xa>
    cb1c:	4802      	ldr	r0, [pc, #8]	; (cb28 <register_fini+0x10>)
    cb1e:	f000 b805 	b.w	cb2c <atexit>
    cb22:	4770      	bx	lr
    cb24:	00000000 	.word	0x00000000
    cb28:	0000cb39 	.word	0x0000cb39

0000cb2c <atexit>:
    cb2c:	2300      	movs	r3, #0
    cb2e:	4601      	mov	r1, r0
    cb30:	461a      	mov	r2, r3
    cb32:	4618      	mov	r0, r3
    cb34:	f7ff bf8e 	b.w	ca54 <__register_exitproc>

0000cb38 <__libc_fini_array>:
    cb38:	b538      	push	{r3, r4, r5, lr}
    cb3a:	4c0a      	ldr	r4, [pc, #40]	; (cb64 <__libc_fini_array+0x2c>)
    cb3c:	4d0a      	ldr	r5, [pc, #40]	; (cb68 <__libc_fini_array+0x30>)
    cb3e:	1b64      	subs	r4, r4, r5
    cb40:	10a4      	asrs	r4, r4, #2
    cb42:	d00a      	beq.n	cb5a <__libc_fini_array+0x22>
    cb44:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    cb48:	3b01      	subs	r3, #1
    cb4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    cb4e:	3c01      	subs	r4, #1
    cb50:	f855 3904 	ldr.w	r3, [r5], #-4
    cb54:	4798      	blx	r3
    cb56:	2c00      	cmp	r4, #0
    cb58:	d1f9      	bne.n	cb4e <__libc_fini_array+0x16>
    cb5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cb5e:	f000 ba1d 	b.w	cf9c <_fini>
    cb62:	bf00      	nop
    cb64:	0000cfac 	.word	0x0000cfac
    cb68:	0000cfa8 	.word	0x0000cfa8

0000cb6c <__retarget_lock_acquire_recursive>:
    cb6c:	4770      	bx	lr
    cb6e:	bf00      	nop

0000cb70 <__retarget_lock_release_recursive>:
    cb70:	4770      	bx	lr
    cb72:	bf00      	nop
    cb74:	682f2e2e 	.word	0x682f2e2e
    cb78:	702f6c70 	.word	0x702f6c70
    cb7c:	2f74726f 	.word	0x2f74726f
    cb80:	5f6c7068 	.word	0x5f6c7068
    cb84:	6f697067 	.word	0x6f697067
    cb88:	7361625f 	.word	0x7361625f
    cb8c:	00682e65 	.word	0x00682e65
    cb90:	682f2e2e 	.word	0x682f2e2e
    cb94:	692f6c61 	.word	0x692f6c61
    cb98:	756c636e 	.word	0x756c636e
    cb9c:	682f6564 	.word	0x682f6564
    cba0:	775f6c61 	.word	0x775f6c61
    cba4:	682e7464 	.word	0x682e7464
    cba8:	00000000 	.word	0x00000000
    cbac:	682f2e2e 	.word	0x682f2e2e
    cbb0:	732f6c61 	.word	0x732f6c61
    cbb4:	682f6372 	.word	0x682f6372
    cbb8:	635f6c61 	.word	0x635f6c61
    cbbc:	6e656c61 	.word	0x6e656c61
    cbc0:	2e726164 	.word	0x2e726164
    cbc4:	00000063 	.word	0x00000063
    cbc8:	682f2e2e 	.word	0x682f2e2e
    cbcc:	732f6c61 	.word	0x732f6c61
    cbd0:	682f6372 	.word	0x682f6372
    cbd4:	635f6c61 	.word	0x635f6c61
    cbd8:	615f6e61 	.word	0x615f6e61
    cbdc:	636e7973 	.word	0x636e7973
    cbe0:	0000632e 	.word	0x0000632e
    cbe4:	682f2e2e 	.word	0x682f2e2e
    cbe8:	732f6c61 	.word	0x732f6c61
    cbec:	682f6372 	.word	0x682f6372
    cbf0:	635f6c61 	.word	0x635f6c61
    cbf4:	735f6372 	.word	0x735f6372
    cbf8:	2e636e79 	.word	0x2e636e79
    cbfc:	00000063 	.word	0x00000063
    cc00:	682f2e2e 	.word	0x682f2e2e
    cc04:	732f6c61 	.word	0x732f6c61
    cc08:	682f6372 	.word	0x682f6372
    cc0c:	695f6c61 	.word	0x695f6c61
    cc10:	6d5f6332 	.word	0x6d5f6332
    cc14:	7973615f 	.word	0x7973615f
    cc18:	632e636e 	.word	0x632e636e
    cc1c:	00000000 	.word	0x00000000
    cc20:	682f2e2e 	.word	0x682f2e2e
    cc24:	732f6c61 	.word	0x732f6c61
    cc28:	682f6372 	.word	0x682f6372
    cc2c:	705f6c61 	.word	0x705f6c61
    cc30:	632e6d77 	.word	0x632e6d77
    cc34:	00000000 	.word	0x00000000
    cc38:	682f2e2e 	.word	0x682f2e2e
    cc3c:	732f6c61 	.word	0x732f6c61
    cc40:	682f6372 	.word	0x682f6372
    cc44:	715f6c61 	.word	0x715f6c61
    cc48:	5f697073 	.word	0x5f697073
    cc4c:	636e7973 	.word	0x636e7973
    cc50:	0000632e 	.word	0x0000632e
    cc54:	682f2e2e 	.word	0x682f2e2e
    cc58:	732f6c61 	.word	0x732f6c61
    cc5c:	682f6372 	.word	0x682f6372
    cc60:	735f6c61 	.word	0x735f6c61
    cc64:	6d5f6970 	.word	0x6d5f6970
    cc68:	7973615f 	.word	0x7973615f
    cc6c:	632e636e 	.word	0x632e636e
    cc70:	00000000 	.word	0x00000000
    cc74:	682f2e2e 	.word	0x682f2e2e
    cc78:	732f6c61 	.word	0x732f6c61
    cc7c:	682f6372 	.word	0x682f6372
    cc80:	735f6c61 	.word	0x735f6c61
    cc84:	6d5f6970 	.word	0x6d5f6970
    cc88:	6e79735f 	.word	0x6e79735f
    cc8c:	00632e63 	.word	0x00632e63
    cc90:	682f2e2e 	.word	0x682f2e2e
    cc94:	732f6c61 	.word	0x732f6c61
    cc98:	682f6372 	.word	0x682f6372
    cc9c:	745f6c61 	.word	0x745f6c61
    cca0:	72656d69 	.word	0x72656d69
    cca4:	0000632e 	.word	0x0000632e
    cca8:	682f2e2e 	.word	0x682f2e2e
    ccac:	752f6c61 	.word	0x752f6c61
    ccb0:	736c6974 	.word	0x736c6974
    ccb4:	6372732f 	.word	0x6372732f
    ccb8:	6974752f 	.word	0x6974752f
    ccbc:	6c5f736c 	.word	0x6c5f736c
    ccc0:	2e747369 	.word	0x2e747369
    ccc4:	00000063 	.word	0x00000063

0000ccc8 <_map>:
    ccc8:	00000004 00000004 00000005 00000005     ................
    ccd8:	00000006 00000056 00000007 00000057     ....V.......W...
    cce8:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    ccf8:	632e6369 00000000                       ic.c....

0000cd00 <user_mux_confs>:
    cd00:	00000100 00000000 00000000 00000000     ................
	...

0000cd44 <channel_confs>:
    cd44:	0000065e 00000000 00000000 00000000     ^...............
	...

0000cd84 <interrupt_cfg>:
	...
    ce04:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    ce14:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    ce24:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    ce34:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    ce44:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    ce54:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    ce64:	43000400 43000800 43000c00              ...C...C...C

0000ce70 <sercomspi_regs>:
    ce70:	0020000c 00020000 00000000 01ff004f     .. .........O...
    ce80:	30000c04 02000000 00000000 ff004f00     ...0.........O..
    ce90:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    cea0:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
    ceb0:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
    cec0:	43001400 43001800                       ...C...C

0000cec8 <_usb_ep_cfgs>:
    cec8:	200006a0 00000000 00000040 200006e0     ... ....@...... 
    ced8:	20000720 00400040 20000760 200007a0      .. @.@.`.. ... 
    cee8:	00400040 200007e0 20000820 00400040     @.@....  .. @.@.
    cef8:	20000860 200008a0 00400040 00000804     `.. ... @.@.....
    cf08:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
    cf18:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
    cf28:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
    cf38:	7361625f 00682e65                       _base.h.

0000cf40 <n25q256a_interface>:
    cf40:	0000abd5 0000ac79 0000ad89 0000af41     ....y.......A...
    cf50:	0000afd1 752f2e2e 642f6273 63697665     ....../usb/devic
    cf60:	73752f65 2e636462 00000063 682f2e2e     e/usbdc.c...../h
    cf70:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.

0000cf80 <_global_impure_ptr>:
    cf80:	20000118                                ... 

0000cf84 <_init>:
    cf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf86:	bf00      	nop
    cf88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cf8a:	bc08      	pop	{r3}
    cf8c:	469e      	mov	lr, r3
    cf8e:	4770      	bx	lr

0000cf90 <__init_array_start>:
    cf90:	0000cb19 	.word	0x0000cb19

0000cf94 <__frame_dummy_init_array_entry>:
    cf94:	00000289 00000415                       ........

0000cf9c <_fini>:
    cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf9e:	bf00      	nop
    cfa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cfa2:	bc08      	pop	{r3}
    cfa4:	469e      	mov	lr, r3
    cfa6:	4770      	bx	lr

0000cfa8 <__fini_array_start>:
    cfa8:	00000265 	.word	0x00000265
